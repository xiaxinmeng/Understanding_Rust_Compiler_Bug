{"sha": "55b7df8bfb12938e7716445d4e2dc0d2ddf44bac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTViN2RmOGJmYjEyOTM4ZTc3MTY0NDVkNGUyZGMwZDJkZGY0NGJhYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-22T19:21:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-22T22:05:43Z"}, "message": "c-family: Fix problems with blender and PPC from PR 40752 patch.\n\nblender in SPEC is built with -funsigned-char, which is also the default on\nPPC, and exposed -Wsign-conversion issues that weren't seen by the x86_64\ntestsuite.  In blender we were complaining about operands to an expression\nthat we didn't't previously complain about as a whole.  So only check\noperands after we check the whole expression.  Also, to fix the PR 40752\ntestcases on -funsigned-char targets, don't consider -Wsign-conversion for\nthe second operand of PLUS_EXPR, especially since fold changes\n\"x - 5\" to \"x + (-5)\".  And don't use SCHAR_MAX with plain char.\n\n\tPR testsuite/93391 - PR 40752 test fails with unsigned plain char.\n\tPR c++/40752\n\t* c-warn.c (conversion_warning): Check operands only after checking\n\tthe whole expression.  Don't check second operand of + for sign.", "tree": {"sha": "92e64d32e8dc7e2491b7d52ef5e0c3b07ef197e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92e64d32e8dc7e2491b7d52ef5e0c3b07ef197e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55b7df8bfb12938e7716445d4e2dc0d2ddf44bac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55b7df8bfb12938e7716445d4e2dc0d2ddf44bac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55b7df8bfb12938e7716445d4e2dc0d2ddf44bac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55b7df8bfb12938e7716445d4e2dc0d2ddf44bac/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9637168812939d6c9df29ce747d8d4648b37cef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9637168812939d6c9df29ce747d8d4648b37cef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9637168812939d6c9df29ce747d8d4648b37cef"}], "stats": {"total": 82, "additions": 49, "deletions": 33}, "files": [{"sha": "89a66bd4f8486c3e42738a0ef5c6b2132e868921", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b7df8bfb12938e7716445d4e2dc0d2ddf44bac/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b7df8bfb12938e7716445d4e2dc0d2ddf44bac/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=55b7df8bfb12938e7716445d4e2dc0d2ddf44bac", "patch": "@@ -1,3 +1,10 @@\n+2020-01-22  Jason Merrill  <jason@redhat.com>\n+\n+\tPR testsuite/93391 - PR 40752 test fails with unsigned plain char.\n+\tPR c++/40752\n+\t* c-warn.c (conversion_warning): Check operands only after checking\n+\tthe whole expression.  Don't check second operand of + for sign.\n+\n 2020-01-21  Jason Merrill  <jason@redhat.com>\n \t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n "}, {"sha": "6c73317b4a6c66309a0b64d054136a161a869a7f", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b7df8bfb12938e7716445d4e2dc0d2ddf44bac/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b7df8bfb12938e7716445d4e2dc0d2ddf44bac/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=55b7df8bfb12938e7716445d4e2dc0d2ddf44bac", "patch": "@@ -1163,7 +1163,7 @@ conversion_warning (location_t loc, tree type, tree expr, tree result)\n {\n   tree expr_type = TREE_TYPE (expr);\n   enum conversion_safety conversion_kind;\n-  bool is_arith = false;\n+  int arith_ops = 0;\n \n   if (!warn_conversion && !warn_sign_conversion && !warn_float_conversion)\n     return false;\n@@ -1266,14 +1266,8 @@ conversion_warning (location_t loc, tree type, tree expr, tree result)\n     case CEIL_DIV_EXPR:\n     case EXACT_DIV_EXPR:\n     case RDIV_EXPR:\n-      {\n-\ttree op0 = TREE_OPERAND (expr, 0);\n-\ttree op1 = TREE_OPERAND (expr, 1);\n-\tif (conversion_warning (loc, type, op0, result)\n-\t    || conversion_warning (loc, type, op1, result))\n-\t  return true;\n-\tgoto arith_op;\n-      }\n+      arith_ops = 2;\n+      goto default_;\n \n     case PREDECREMENT_EXPR:\n     case PREINCREMENT_EXPR:\n@@ -1285,13 +1279,8 @@ conversion_warning (location_t loc, tree type, tree expr, tree result)\n     case NON_LVALUE_EXPR:\n     case NEGATE_EXPR:\n     case BIT_NOT_EXPR:\n-      {\n-\t/* Unary ops or binary ops for which we only care about the lhs.  */\n-\ttree op0 = TREE_OPERAND (expr, 0);\n-\tif (conversion_warning (loc, type, op0, result))\n-\t  return true;\n-\tgoto arith_op;\n-      }\n+      arith_ops = 1;\n+      goto default_;\n \n     case COND_EXPR:\n       {\n@@ -1304,11 +1293,7 @@ conversion_warning (location_t loc, tree type, tree expr, tree result)\n \t\t|| conversion_warning (loc, type, op2, result));\n       }\n \n-    arith_op:\n-      /* We didn't warn about the operands, we might still want to warn if\n-\t -Warith-conversion.  */\n-      is_arith = true;\n-      gcc_fallthrough ();\n+    default_:\n     default:\n       conversion_kind = unsafe_conversion_p (type, expr, result, true);\n       {\n@@ -1321,11 +1306,27 @@ conversion_warning (location_t loc, tree type, tree expr, tree result)\n \t  warnopt = OPT_Wconversion;\n \telse\n \t  break;\n-\tif (is_arith\n+\n+\tif (arith_ops\n \t    && global_dc->option_enabled (warnopt,\n \t\t\t\t\t  global_dc->lang_mask,\n \t\t\t\t\t  global_dc->option_state))\n-\t  warnopt = OPT_Warith_conversion;\n+\t  {\n+\t    for (int i = 0; i < arith_ops; ++i)\n+\t      {\n+\t\ttree op = TREE_OPERAND (expr, i);\n+\t\ttree opr = convert (type, op);\n+\t\t/* Avoid -Wsign-conversion for (unsigned)(x + (-1)).  */\n+\t\tbool minus = TREE_CODE (expr) == PLUS_EXPR && i == 1;\n+\t\tif (unsafe_conversion_p (type, op, opr, !minus))\n+\t\t  goto op_unsafe;\n+\t      }\n+\t    /* The operands seem safe, we might still want to warn if\n+\t       -Warith-conversion.  */\n+\t    warnopt = OPT_Warith_conversion;\n+\t  op_unsafe:;\n+\t  }\n+\n \tif (conversion_kind == UNSAFE_SIGN)\n \t  warning_at (loc, warnopt, \"conversion to %qT from %qT \"\n \t\t      \"may change the sign of the result\","}, {"sha": "0cd1c7ba116e67f4664da55c0f359260a8165f59", "filename": "gcc/testsuite/c-c++-common/Wconversion-pr40752.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b7df8bfb12938e7716445d4e2dc0d2ddf44bac/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWconversion-pr40752.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b7df8bfb12938e7716445d4e2dc0d2ddf44bac/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWconversion-pr40752.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWconversion-pr40752.c?ref=55b7df8bfb12938e7716445d4e2dc0d2ddf44bac", "patch": "@@ -31,15 +31,15 @@ void bar(char c, int c2)\n   c >>= (int)1;\n   c <<= (int)1;\n   c <<= c2;\n-  c += ((int)SCHAR_MAX + SCHAR_MAX); /* { dg-warning \"conversion\" } */\n+  c += ((int)CHAR_MAX + CHAR_MAX); /* { dg-warning \"conversion\" } */\n   c += c2; /* { dg-warning \"conversion\" } */\n-  c -= ((int)SCHAR_MAX + SCHAR_MAX); /* { dg-warning \"conversion\" } */\n+  c -= ((int)CHAR_MAX + CHAR_MAX); /* { dg-warning \"conversion\" } */\n   c -= c2; /* { dg-warning \"conversion\" } */\n-  c *= ((int)SCHAR_MAX + SCHAR_MAX); /* { dg-warning \"conversion\" } */\n+  c *= ((int)CHAR_MAX + CHAR_MAX); /* { dg-warning \"conversion\" } */\n   c *= c2; /* { dg-warning \"conversion\" } */\n-  c /= ((int)SCHAR_MAX + SCHAR_MAX); /* { dg-warning \"conversion\" } */\n+  c /= ((int)CHAR_MAX + CHAR_MAX); /* { dg-warning \"conversion\" } */\n   c /= c2; /* { dg-warning \"conversion\" } */\n-  c %= ((int)SCHAR_MAX + SCHAR_MAX); /* { dg-warning \"conversion\" } */\n+  c %= ((int)CHAR_MAX + CHAR_MAX); /* { dg-warning \"conversion\" } */\n   c %= c2; /* { dg-warning \"conversion\" } */\n   c = ~c2; /* { dg-warning \"conversion\" } */\n   c = c2++; /* { dg-warning \"conversion\" } */"}, {"sha": "cd70e34c390efad1d8acfd11f64f950cbf6bc5c8", "filename": "gcc/testsuite/c-c++-common/Wconversion-pr40752a.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b7df8bfb12938e7716445d4e2dc0d2ddf44bac/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWconversion-pr40752a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b7df8bfb12938e7716445d4e2dc0d2ddf44bac/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWconversion-pr40752a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWconversion-pr40752a.c?ref=55b7df8bfb12938e7716445d4e2dc0d2ddf44bac", "patch": "@@ -31,15 +31,15 @@ void bar(char c, int c2)\n   c >>= (int)1;\n   c <<= (int)1;\t\t\t/* { dg-warning \"conversion\" } */\n   c <<= c2;\t\t\t/* { dg-warning \"conversion\" } */\n-  c += ((int)SCHAR_MAX + SCHAR_MAX); /* { dg-warning \"conversion\" } */\n+  c += ((int)CHAR_MAX + CHAR_MAX); /* { dg-warning \"conversion\" } */\n   c += c2; /* { dg-warning \"conversion\" } */\n-  c -= ((int)SCHAR_MAX + SCHAR_MAX); /* { dg-warning \"conversion\" } */\n+  c -= ((int)CHAR_MAX + CHAR_MAX); /* { dg-warning \"conversion\" } */\n   c -= c2; /* { dg-warning \"conversion\" } */\n-  c *= ((int)SCHAR_MAX + SCHAR_MAX); /* { dg-warning \"conversion\" } */\n+  c *= ((int)CHAR_MAX + CHAR_MAX); /* { dg-warning \"conversion\" } */\n   c *= c2; /* { dg-warning \"conversion\" } */\n-  c /= ((int)SCHAR_MAX + SCHAR_MAX); /* { dg-warning \"conversion\" } */\n+  c /= ((int)CHAR_MAX + CHAR_MAX); /* { dg-warning \"conversion\" } */\n   c /= c2; /* { dg-warning \"conversion\" } */\n-  c %= ((int)SCHAR_MAX + SCHAR_MAX); /* { dg-warning \"conversion\" } */\n+  c %= ((int)CHAR_MAX + CHAR_MAX); /* { dg-warning \"conversion\" } */\n   c %= c2; /* { dg-warning \"conversion\" } */\n   c = ~c2; /* { dg-warning \"conversion\" } */\n   c = c2++; /* { dg-warning \"conversion\" } */"}, {"sha": "208710bc772711e817dd513287ac0a5b44147d91", "filename": "gcc/testsuite/c-c++-common/Wconversion-pr40752b.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b7df8bfb12938e7716445d4e2dc0d2ddf44bac/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWconversion-pr40752b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b7df8bfb12938e7716445d4e2dc0d2ddf44bac/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWconversion-pr40752b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWconversion-pr40752b.c?ref=55b7df8bfb12938e7716445d4e2dc0d2ddf44bac", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/40752\n+// { dg-additional-options -funsigned-char }\n+\n+#pragma GCC diagnostic error \"-Wsign-conversion\"\n+void f(char *ar, int i)\n+{\n+  ar[i] -= 'a' - 'A';\n+}"}]}