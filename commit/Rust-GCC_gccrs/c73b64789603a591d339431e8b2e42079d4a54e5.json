{"sha": "c73b64789603a591d339431e8b2e42079d4a54e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzczYjY0Nzg5NjAzYTU5MWQzMzk0MzFlOGIyZTQyMDc5ZDRhNTRlNQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-04-22T09:05:58Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-04-22T09:05:58Z"}, "message": "re PR fortran/39735 (procedure pointer assignments: return value is not checked)\n\n2009-04-22  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/39735\n\t* decl.c (add_hidden_procptr_result): Bugfix for procptr results.\n\t(match_procedure_decl): Set if_source.\n\t* expr.c (gfc_check_pointer_assign): Bugfix: Return after error.\n\tAnd: Check interface also for IFSRC_UNKNOWN (return type may be known).\n\t* gfortran.h (typedef enum ifsrc): Remove IFSRC_USAGE,\n\tadd documentation. Rename copy_formal_args and copy_formal_args_intr.\n\t* interface.c (gfc_compare_interfaces): Check for return types,\n\thandle IFSRC_UNKNOWN.\n\t(compare_intr_interfaces,compare_actual_formal_intr): Obsolete, removed.\n\t(gfc_procedure_use): Modified handling of intrinsics.\n\t* intrinsic.c (add_functions): Bugfix for \"dim\".\n\t* resolve.c (resolve_intrinsic): New function to resolve intrinsics,\n\twhich copies the interface from isym to sym.\n\t(resolve_procedure_expression,resolve_function): Use new function\n\t'resolve_intrinsic'.\n\t(resolve_symbol): Add function attribute for externals with return type\n\tand use new function 'resolve_intrinsic'.\n\t* symbol.c (ifsrc_types): Remove string for IFSRC_USAGE.\n\t(copy_formal_args): Renamed to gfc_copy_formal_args.\n\t(copy_formal_args_intr): Renamed to gfc_copy_formal_args_intr.\n\t* trans-const.c (gfc_conv_const_charlen): Handle cl==NULL.\n\n\n2009-04-22  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/39735\n\t* gfortran.dg/assumed_charlen_function_5.f90: Modified.\n\t* gfortran.dg/external_initializer.f90: Modified.\n\t* gfortran.dg/interface_26.f90: Modified.\n\t* gfortran.dg/intrinsic_subroutine.f90: Modified.\n\t* gfortran.dg/proc_ptr_3.f90: Modified.\n\t* gfortran.dg/proc_ptr_15.f90: New.\n\t* gfortran.dg/proc_ptr_result_1.f90: Modified.\n\nFrom-SVN: r146554", "tree": {"sha": "886c827bd40b9679a6e3588aab4c3edd2e1c2322", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/886c827bd40b9679a6e3588aab4c3edd2e1c2322"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c73b64789603a591d339431e8b2e42079d4a54e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73b64789603a591d339431e8b2e42079d4a54e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c73b64789603a591d339431e8b2e42079d4a54e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73b64789603a591d339431e8b2e42079d4a54e5/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c34a0921352e7ed6058aadf4c950ec700375794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c34a0921352e7ed6058aadf4c950ec700375794", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c34a0921352e7ed6058aadf4c950ec700375794"}], "stats": {"total": 371, "additions": 169, "deletions": 202}, "files": [{"sha": "5932195ac5e4acf6ae0f032fcf0ecacd2fd2f1e9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c73b64789603a591d339431e8b2e42079d4a54e5", "patch": "@@ -1,3 +1,28 @@\n+2009-04-22  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/39735\n+\t* decl.c (add_hidden_procptr_result): Bugfix for procptr results.\n+\t(match_procedure_decl): Set if_source.\n+\t* expr.c (gfc_check_pointer_assign): Bugfix: Return after error.\n+\tAnd: Check interface also for IFSRC_UNKNOWN (return type may be known).\n+\t* gfortran.h (typedef enum ifsrc): Remove IFSRC_USAGE,\n+\tadd documentation. Rename copy_formal_args and copy_formal_args_intr.\n+\t* interface.c (gfc_compare_interfaces): Check for return types,\n+\thandle IFSRC_UNKNOWN.\n+\t(compare_intr_interfaces,compare_actual_formal_intr): Obsolete, removed.\n+\t(gfc_procedure_use): Modified handling of intrinsics.\n+\t* intrinsic.c (add_functions): Bugfix for \"dim\".\n+\t* resolve.c (resolve_intrinsic): New function to resolve intrinsics,\n+\twhich copies the interface from isym to sym.\n+\t(resolve_procedure_expression,resolve_function): Use new function\n+\t'resolve_intrinsic'.\n+\t(resolve_symbol): Add function attribute for externals with return type\n+\tand use new function 'resolve_intrinsic'.\n+\t* symbol.c (ifsrc_types): Remove string for IFSRC_USAGE.\n+\t(copy_formal_args): Renamed to gfc_copy_formal_args.\n+\t(copy_formal_args_intr): Renamed to gfc_copy_formal_args_intr.\n+\t* trans-const.c (gfc_conv_const_charlen): Handle cl==NULL.\n+\n 2009-04-21  Joseph Myers  <joseph@codesourcery.com>\n \n \t* ChangeLog, ChangeLog-2002, ChangeLog-2003, ChangeLog-2004,"}, {"sha": "b99989ffeb8786afbbe88d907665b02fc5dde63a", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=c73b64789603a591d339431e8b2e42079d4a54e5", "patch": "@@ -4104,9 +4104,14 @@ add_hidden_procptr_result (gfc_symbol *sym)\n     {\n       gfc_symtree *stree;\n       if (case1)\n-        gfc_get_sym_tree (\"ppr@\", gfc_current_ns, &stree);\n+\tgfc_get_sym_tree (\"ppr@\", gfc_current_ns, &stree);\n       else if (case2)\n-        gfc_get_sym_tree (\"ppr@\", gfc_current_ns->parent, &stree);\n+\t{\n+\t  gfc_symtree *st2;\n+\t  gfc_get_sym_tree (\"ppr@\", gfc_current_ns->parent, &stree);\n+\t  st2 = gfc_new_symtree (&gfc_current_ns->sym_root, \"ppr@\");\n+\t  st2->n.sym = stree->n.sym;\n+\t}\n       sym->result = stree->n.sym;\n \n       sym->result->attr.proc_pointer = sym->attr.proc_pointer;\n@@ -4291,6 +4296,7 @@ match_procedure_decl (void)\n \t    }\n \t  sym->ts.interface = proc_if;\n \t  sym->attr.untyped = 1;\n+\t  sym->attr.if_source = IFSRC_IFBODY;\n \t}\n       else if (current_ts.type != BT_UNKNOWN)\n \t{\n@@ -4300,6 +4306,7 @@ match_procedure_decl (void)\n \t  sym->ts.interface->ts = current_ts;\n \t  sym->ts.interface->attr.function = 1;\n \t  sym->attr.function = sym->ts.interface->attr.function;\n+\t  sym->attr.if_source = IFSRC_UNKNOWN;\n \t}\n \n       if (gfc_match (\" =>\") == MATCH_YES)"}, {"sha": "c70d4d1e7a1677d76f86ea264d4acad66c61e8b9", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=c73b64789603a591d339431e8b2e42079d4a54e5", "patch": "@@ -3146,9 +3146,9 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n \t  gfc_error (\"Abstract interface '%s' is invalid \"\n \t\t     \"in procedure pointer assignment at %L\",\n \t\t     rvalue->symtree->name, &rvalue->where);\n+\t  return FAILURE;\n \t}\n       if (rvalue->expr_type == EXPR_VARIABLE\n-\t  && lvalue->symtree->n.sym->attr.if_source != IFSRC_UNKNOWN\n \t  && !gfc_compare_interfaces (lvalue->symtree->n.sym,\n \t\t\t\t      rvalue->symtree->n.sym, 0))\n \t{"}, {"sha": "5ee297ba7cff5b1e209ca220b45d2cfeccd65b4f", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=c73b64789603a591d339431e8b2e42079d4a54e5", "patch": "@@ -274,9 +274,12 @@ typedef enum gfc_access\n gfc_access;\n \n /* Flags to keep track of where an interface came from.\n-   4 elements = 2 bits.  */\n+   3 elements = 2 bits.  */\n typedef enum ifsrc\n-{ IFSRC_UNKNOWN = 0, IFSRC_DECL, IFSRC_IFBODY, IFSRC_USAGE\n+{ IFSRC_UNKNOWN = 0,\t/* Interface unknown, only return type may be known.  */\n+  IFSRC_DECL,\t\t/* FUNCTION or SUBROUTINE declaration.  */\n+  IFSRC_IFBODY\t\t/* INTERFACE statement or PROCEDURE statement\n+\t\t\t   with explicit interface.  */\n }\n ifsrc;\n \n@@ -2370,8 +2373,8 @@ gfc_gsymbol *gfc_find_gsymbol (gfc_gsymbol *, const char *);\n gfc_symbol* gfc_get_derived_super_type (gfc_symbol*);\n gfc_symtree* gfc_find_typebound_proc (gfc_symbol*, gfc_try*, const char*, bool);\n \n-void copy_formal_args (gfc_symbol *, gfc_symbol *);\n-void copy_formal_args_intr (gfc_symbol *, gfc_intrinsic_sym *);\n+void gfc_copy_formal_args (gfc_symbol *, gfc_symbol *);\n+void gfc_copy_formal_args_intr (gfc_symbol *, gfc_intrinsic_sym *);\n \n void gfc_free_finalizer (gfc_finalizer *el); /* Needed in resolve.c, too  */\n "}, {"sha": "489386c10a62c501185f8a7865efb664be86d643", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 20, "deletions": 147, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=c73b64789603a591d339431e8b2e42079d4a54e5", "patch": "@@ -479,8 +479,6 @@ compare_type_rank (gfc_symbol *s1, gfc_symbol *s2)\n }\n \n \n-static int compare_intr_interfaces (gfc_symbol *, gfc_symbol *);\n-\n /* Given two symbols that are formal arguments, compare their types\n    and rank and their formal interfaces if they are both dummy\n    procedures.  Returns nonzero if the same, zero if different.  */\n@@ -967,155 +965,44 @@ gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, int generic_flag)\n {\n   gfc_formal_arglist *f1, *f2;\n \n-  if (s2->attr.intrinsic)\n-    return compare_intr_interfaces (s1, s2);\n-\n-  if (s1->attr.function != s2->attr.function\n-      || s1->attr.subroutine != s2->attr.subroutine)\n-    return 0;\t\t/* Disagreement between function/subroutine.  */\n-\n-  f1 = s1->formal;\n-  f2 = s2->formal;\n-\n-  if (f1 == NULL && f2 == NULL)\n-    return 1;\t\t\t/* Special case.  */\n-\n-  if (count_types_test (f1, f2))\n+  if ((s1->attr.function && !s2->attr.function)\n+      || (s1->attr.subroutine && s2->attr.function))\n     return 0;\n-  if (count_types_test (f2, f1))\n-    return 0;\n-\n-  if (generic_flag)\n-    {\n-      if (generic_correspondence (f1, f2))\n-\treturn 0;\n-      if (generic_correspondence (f2, f1))\n-\treturn 0;\n-    }\n-  else\n-    {\n-      if (operator_correspondence (f1, f2))\n-\treturn 0;\n-    }\n-\n-  return 1;\n-}\n-\n-\n-static int\n-compare_intr_interfaces (gfc_symbol *s1, gfc_symbol *s2)\n-{\n-  gfc_formal_arglist *f, *f1;\n-  gfc_intrinsic_arg *fi, *f2;\n-  gfc_intrinsic_sym *isym;\n-\n-  isym = gfc_find_function (s2->name);\n-  if (isym)\n-    {\n-      if (!s2->attr.function)\n-\tgfc_add_function (&s2->attr, s2->name, &gfc_current_locus);\n-      s2->ts = isym->ts;\n-    }\n-  else\n-    {\n-      isym = gfc_find_subroutine (s2->name);\n-      gcc_assert (isym);\n-      if (!s2->attr.subroutine)\n-\tgfc_add_subroutine (&s2->attr, s2->name, &gfc_current_locus);\n-    }\n \n-  if (s1->attr.function != s2->attr.function\n-      || s1->attr.subroutine != s2->attr.subroutine)\n-    return 0;\t\t/* Disagreement between function/subroutine.  */\n-  \n-  /* If the arguments are functions, check type and kind.  */\n-  \n-  if (s1->attr.dummy && s1->attr.function && s2->attr.function)\n+  /* If the arguments are functions, check type and kind\n+     (only for dummy procedures and procedure pointer assignments).  */\n+  if ((s1->attr.dummy || s1->attr.proc_pointer)\n+      && s1->attr.function && s2->attr.function)\n     {\n-      if (s1->ts.type != s2->ts.type)\n-\treturn 0;\n-      if (s1->ts.kind != s2->ts.kind)\n+      if (s1->ts.type == BT_UNKNOWN)\n+\treturn 1;\n+      if ((s1->ts.type != s2->ts.type) || (s1->ts.kind != s2->ts.kind))\n \treturn 0;\n       if (s1->attr.if_source == IFSRC_DECL)\n \treturn 1;\n     }\n \n-  f1 = s1->formal;\n-  f2 = isym->formal;\n-\n-  /* Special case.  */\n-  if (f1 == NULL && f2 == NULL)\n+  if (s1->attr.if_source == IFSRC_UNKNOWN)\n     return 1;\n-  \n-  /* First scan through the formal argument list and check the intrinsic.  */\n-  fi = f2;\n-  for (f = f1; f; f = f->next)\n-    {\n-      if (fi == NULL)\n-\treturn 0;\n-      if ((fi->ts.type != f->sym->ts.type) || (fi->ts.kind != f->sym->ts.kind))\n-\treturn 0;\n-      fi = fi->next;\n-    }\n-\n-  /* Now scan through the intrinsic argument list and check the formal.  */\n-  f = f1;\n-  for (fi = f2; fi; fi = fi->next)\n-    {\n-      if (f == NULL)\n-\treturn 0;\n-      if ((fi->ts.type != f->sym->ts.type) || (fi->ts.kind != f->sym->ts.kind))\n-\treturn 0;\n-      f = f->next;\n-    }\n-\n-  return 1;\n-}\n \n+  f1 = s1->formal;\n+  f2 = s2->formal;\n \n-/* Compare an actual argument list with an intrinsic argument list.  */\n-\n-static int\n-compare_actual_formal_intr (gfc_actual_arglist **ap, gfc_symbol *s2)\n-{\n-  gfc_actual_arglist *a;\n-  gfc_intrinsic_arg *fi, *f2;\n-  gfc_intrinsic_sym *isym;\n-\n-  isym = gfc_find_function (s2->name);\n-  \n-  /* This should already have been checked in\n-     resolve.c (resolve_actual_arglist).  */\n-  gcc_assert (isym);\n+  if (f1 == NULL && f2 == NULL)\n+    return 1;\t\t\t/* Special case.  */\n \n-  f2 = isym->formal;\n+  if (count_types_test (f1, f2) || count_types_test (f2, f1))\n+    return 0;\n \n-  /* Special case.  */\n-  if (*ap == NULL && f2 == NULL)\n-    return 1;\n-  \n-  /* First scan through the actual argument list and check the intrinsic.  */\n-  fi = f2;\n-  for (a = *ap; a; a = a->next)\n+  if (generic_flag)\n     {\n-      if (fi == NULL)\n+      if (generic_correspondence (f1, f2) || generic_correspondence (f2, f1))\n \treturn 0;\n-      if ((fi->ts.type != a->expr->ts.type)\n-\t  || (fi->ts.kind != a->expr->ts.kind))\n-\treturn 0;\n-      fi = fi->next;\n     }\n-\n-  /* Now scan through the intrinsic argument list and check the formal.  */\n-  a = *ap;\n-  for (fi = f2; fi; fi = fi->next)\n+  else\n     {\n-      if (a == NULL)\n-\treturn 0;\n-      if ((fi->ts.type != a->expr->ts.type)\n-\t  || (fi->ts.kind != a->expr->ts.kind))\n+      if (operator_correspondence (f1, f2))\n \treturn 0;\n-      a = a->next;\n     }\n \n   return 1;\n@@ -2436,20 +2323,6 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n     gfc_warning (\"Procedure '%s' called with an implicit interface at %L\",\n \t\t sym->name, where);\n \n-  if (sym->ts.interface && sym->ts.interface->attr.intrinsic)\n-    {\n-      gfc_intrinsic_sym *isym;\n-      isym = gfc_find_function (sym->ts.interface->name);\n-      if (isym != NULL)\n-\t{\n-\t  if (compare_actual_formal_intr (ap, sym->ts.interface))\n-\t    return;\n-\t  gfc_error (\"Type/rank mismatch in argument '%s' at %L\",\n-\t\t     sym->name, where);\n-\t  return;\n-\t}\n-    }\n-\n   if (sym->attr.if_source == IFSRC_UNKNOWN)\n     {\n       gfc_actual_arglist *a;"}, {"sha": "7676fa221e50937dca667c8095040615cfcc1ba8", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=c73b64789603a591d339431e8b2e42079d4a54e5", "patch": "@@ -1362,7 +1362,7 @@ add_functions (void)\n \n   add_sym_2 (\"dim\", GFC_ISYM_DIM, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_a_p, gfc_simplify_dim, gfc_resolve_dim,\n-\t     x, BT_REAL, dr, REQUIRED, y, BT_UNKNOWN, dr, REQUIRED);\n+\t     x, BT_REAL, dr, REQUIRED, y, BT_REAL, dr, REQUIRED);\n \n   add_sym_2 (\"idim\", GFC_ISYM_DIM, CLASS_ELEMENTAL, ACTUAL_YES, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_dim, gfc_resolve_dim,"}, {"sha": "25834f8ca999f140c2adc4e5cfc11562fa495aab", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 44, "deletions": 32, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c73b64789603a591d339431e8b2e42079d4a54e5", "patch": "@@ -1141,6 +1141,34 @@ is_illegal_recursion (gfc_symbol* sym, gfc_namespace* context)\n }\n \n \n+/* Resolve an intrinsic procedure: Set its function/subroutine attribute,\n+   its typespec and formal argument list.  */\n+\n+static gfc_try\n+resolve_intrinsic (gfc_symbol *sym, locus *loc)\n+{\n+  gfc_intrinsic_sym *isym = gfc_find_function (sym->name);\n+  if (isym)\n+    {\n+      if (!sym->attr.function &&\n+\t  gfc_add_function (&sym->attr, sym->name, loc) == FAILURE)\n+\treturn FAILURE;\n+      sym->ts = isym->ts;\n+    }\n+  else\n+    {\n+      isym = gfc_find_subroutine (sym->name);\n+      gcc_assert (isym);\n+      if (!sym->attr.subroutine &&\n+\t  gfc_add_subroutine (&sym->attr, sym->name, loc) == FAILURE)\n+\treturn FAILURE;\n+    }\n+  if (!sym->formal)\n+    gfc_copy_formal_args_intr (sym, isym);\n+  return SUCCESS;\n+}\n+\n+\n /* Resolve a procedure expression, like passing it to a called procedure or as\n    RHS for a procedure pointer assignment.  */\n \n@@ -1154,6 +1182,10 @@ resolve_procedure_expression (gfc_expr* expr)\n   gcc_assert (expr->symtree);\n \n   sym = expr->symtree->n.sym;\n+\n+  if (sym->attr.intrinsic)\n+    resolve_intrinsic (sym, &expr->where);\n+\n   if (sym->attr.flavor != FL_PROCEDURE\n       || (sym->attr.function && sym->result == sym))\n     return SUCCESS;\n@@ -2318,14 +2350,8 @@ resolve_function (gfc_expr *expr)\n     sym = expr->symtree->n.sym;\n \n   if (sym && sym->attr.intrinsic\n-      && !gfc_find_function (sym->name)\n-      && gfc_find_subroutine (sym->name)\n-      && sym->attr.function)\n-    {\n-      gfc_error (\"Intrinsic subroutine '%s' used as \"\n-\t\t  \"a function at %L\", sym->name, &expr->where);\n-      return FAILURE;\n-    }\n+      && resolve_intrinsic (sym, &expr->where) == FAILURE)\n+    return FAILURE;\n \n   if (sym && (sym->attr.flavor == FL_VARIABLE || sym->attr.subroutine))\n     {\n@@ -9193,6 +9219,9 @@ resolve_symbol (gfc_symbol *sym)\n \t}\n     }\n \n+  if (sym->attr.external && sym->ts.type != BT_UNKNOWN && !sym->attr.function)\n+    gfc_add_function (&sym->attr, sym->name, &sym->declared_at);\n+\n   if (sym->attr.procedure && sym->ts.interface\n       && sym->attr.if_source != IFSRC_DECL)\n     {\n@@ -9207,30 +9236,13 @@ resolve_symbol (gfc_symbol *sym)\n \t  gfc_symbol *ifc = sym->ts.interface;\n \n \t  if (ifc->attr.intrinsic)\n-\t    {\n-\t      gfc_intrinsic_sym *isym = gfc_find_function (sym->ts.interface->name);\n-\t      if (isym)\n-\t\t{\n-\t\t  sym->attr.function = 1;\n-\t\t  sym->ts = isym->ts;\n-\t\t  sym->ts.interface = ifc;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  isym = gfc_find_subroutine (sym->ts.interface->name);\n-\t\t  gcc_assert (isym);\n-\t\t  sym->attr.subroutine = 1;\n-\t\t}\n-\t      copy_formal_args_intr (sym, isym);\n-\t    }\n-\t  else\n-\t    {\n-\t      sym->ts = ifc->ts;\n-\t      sym->ts.interface = ifc;\n-\t      sym->attr.function = ifc->attr.function;\n-\t      sym->attr.subroutine = ifc->attr.subroutine;\n-\t      copy_formal_args (sym, ifc);\n-\t    }\n+\t    resolve_intrinsic (ifc, &ifc->declared_at);\n+\n+\t  sym->ts = ifc->ts;\n+\t  sym->ts.interface = ifc;\n+\t  sym->attr.function = ifc->attr.function;\n+\t  sym->attr.subroutine = ifc->attr.subroutine;\n+\t  gfc_copy_formal_args (sym, ifc);\n \n \t  sym->attr.allocatable = ifc->attr.allocatable;\n \t  sym->attr.pointer = ifc->attr.pointer;"}, {"sha": "72b068407428a3573d630d993e04d76211e94481", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=c73b64789603a591d339431e8b2e42079d4a54e5", "patch": "@@ -75,8 +75,7 @@ const mstring ifsrc_types[] =\n {\n     minit (\"UNKNOWN\", IFSRC_UNKNOWN),\n     minit (\"DECL\", IFSRC_DECL),\n-    minit (\"BODY\", IFSRC_IFBODY),\n-    minit (\"USAGE\", IFSRC_USAGE)\n+    minit (\"BODY\", IFSRC_IFBODY)\n };\n \n const mstring save_status[] =\n@@ -3768,6 +3767,7 @@ gen_shape_param (gfc_formal_arglist **head,\n   add_formal_arg (head, tail, formal_arg, param_sym);\n }\n \n+\n /* Add a procedure interface to the given symbol (i.e., store a\n    reference to the list of formal arguments).  */\n \n@@ -3780,6 +3780,7 @@ add_proc_interface (gfc_symbol *sym, ifsrc source,\n   sym->attr.if_source = source;\n }\n \n+\n /* Copy the formal args from an existing symbol, src, into a new\n    symbol, dest.  New formal args are created, and the description of\n    each arg is set according to the existing ones.  This function is\n@@ -3788,7 +3789,7 @@ add_proc_interface (gfc_symbol *sym, ifsrc source,\n    args based on the args of a given named interface.  */\n \n void\n-copy_formal_args (gfc_symbol *dest, gfc_symbol *src)\n+gfc_copy_formal_args (gfc_symbol *dest, gfc_symbol *src)\n {\n   gfc_formal_arglist *head = NULL;\n   gfc_formal_arglist *tail = NULL;\n@@ -3812,7 +3813,7 @@ copy_formal_args (gfc_symbol *dest, gfc_symbol *src)\n       formal_arg->sym->attr = curr_arg->sym->attr;\n       formal_arg->sym->ts = curr_arg->sym->ts;\n       formal_arg->sym->as = gfc_copy_array_spec (curr_arg->sym->as);\n-      copy_formal_args (formal_arg->sym, curr_arg->sym);\n+      gfc_copy_formal_args (formal_arg->sym, curr_arg->sym);\n \n       /* If this isn't the first arg, set up the next ptr.  For the\n         last arg built, the formal_arg->next will never get set to\n@@ -3839,8 +3840,9 @@ copy_formal_args (gfc_symbol *dest, gfc_symbol *src)\n   gfc_current_ns = parent_ns;\n }\n \n+\n void\n-copy_formal_args_intr (gfc_symbol *dest, gfc_intrinsic_sym *src)\n+gfc_copy_formal_args_intr (gfc_symbol *dest, gfc_intrinsic_sym *src)\n {\n   gfc_formal_arglist *head = NULL;\n   gfc_formal_arglist *tail = NULL;\n@@ -3863,9 +3865,6 @@ copy_formal_args_intr (gfc_symbol *dest, gfc_intrinsic_sym *src)\n       /* May need to copy more info for the symbol.  */\n       formal_arg->sym->ts = curr_arg->ts;\n       formal_arg->sym->attr.optional = curr_arg->optional;\n-      /*formal_arg->sym->attr = curr_arg->sym->attr;\n-      formal_arg->sym->as = gfc_copy_array_spec (curr_arg->sym->as);\n-      copy_formal_args (formal_arg->sym, curr_arg->sym);*/\n \n       /* If this isn't the first arg, set up the next ptr.  For the\n         last arg built, the formal_arg->next will never get set to\n@@ -3892,6 +3891,7 @@ copy_formal_args_intr (gfc_symbol *dest, gfc_intrinsic_sym *src)\n   gfc_current_ns = parent_ns;\n }\n \n+\n /* Builds the parameter list for the iso_c_binding procedure\n    c_f_pointer or c_f_procpointer.  The old_sym typically refers to a\n    generic version of either the c_f_pointer or c_f_procpointer"}, {"sha": "5b105bef24835594f69ef60981dfa62b422107f1", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=c73b64789603a591d339431e8b2e42079d4a54e5", "patch": "@@ -176,7 +176,7 @@ gfc_conv_string_init (tree length, gfc_expr * expr)\n void\n gfc_conv_const_charlen (gfc_charlen * cl)\n {\n-  if (cl->backend_decl)\n+  if (!cl || cl->backend_decl)\n     return;\n \n   if (cl->length && cl->length->expr_type == EXPR_CONSTANT)"}, {"sha": "ad4e6dd7c3b01671afc72be8725b57e8376ef593", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c73b64789603a591d339431e8b2e42079d4a54e5", "patch": "@@ -1,3 +1,14 @@\n+2009-04-22  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/39735\n+\t* gfortran.dg/assumed_charlen_function_5.f90: Modified.\n+\t* gfortran.dg/external_initializer.f90: Modified.\n+\t* gfortran.dg/interface_26.f90: Modified.\n+\t* gfortran.dg/intrinsic_subroutine.f90: Modified.\n+\t* gfortran.dg/proc_ptr_3.f90: Modified.\n+\t* gfortran.dg/proc_ptr_15.f90: New.\n+\t* gfortran.dg/proc_ptr_result_1.f90: Modified.\n+\n 2009-04-21  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/35711"}, {"sha": "cc7e0108db915625c232800fa479eddef7ba4e4a", "filename": "gcc/testsuite/gfortran.dg/assumed_charlen_function_5.f90", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_charlen_function_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_charlen_function_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_charlen_function_5.f90?ref=c73b64789603a591d339431e8b2e42079d4a54e5", "patch": "@@ -12,7 +12,7 @@ end function charrext\n \n   character(26), external :: charrext\n   interface\n-    integer(4) function test(charr, i)\n+    integer(4) function test(charr, i)  ! { dg-warning \"is obsolescent in fortran 95\" }\n      character(*), external :: charr\n      integer :: i\n     end function test\n@@ -36,4 +36,5 @@ integer(4) function test(charr, i)  ! { dg-warning \"is obsolescent in fortran 95\n   integer :: i\n   print *, charr(i)\n   test = 1\n-end function test\n\\ No newline at end of file\n+end function test\n+"}, {"sha": "eec240917180881f32f6faa5c35d460a1be5bc79", "filename": "gcc/testsuite/gfortran.dg/external_initializer.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ftestsuite%2Fgfortran.dg%2Fexternal_initializer.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ftestsuite%2Fgfortran.dg%2Fexternal_initializer.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fexternal_initializer.f90?ref=c73b64789603a591d339431e8b2e42079d4a54e5", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n ! PR20849 - An external symbol may not have a initializer.\n ! Contributed by Joost VandeVondele <jv244@cam.ac.uk>\n-REAL, EXTERNAL :: X=0 ! { dg-error \"may not have an initializer\" }\n+REAL, EXTERNAL :: X=0 ! { dg-error \"not have an initializer\" }\n END"}, {"sha": "0778345c3e5a963ef473f0b054a84dfd10a6b12c", "filename": "gcc/testsuite/gfortran.dg/interface_26.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_26.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_26.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_26.f90?ref=c73b64789603a591d339431e8b2e42079d4a54e5", "patch": "@@ -37,7 +37,7 @@ END FUNCTION UserFunction\n     END INTERFACE\n     INTEGER, EXTERNAL :: UserOp \n \n-    res = UserFunction( a,b, UserOp )\n+    res = UserFunction( a,b, UserOp ) ! { dg-error \"Type/rank mismatch in argument\" }\n \n     if( res .lt. 10 ) then\n        res = recSum( a, res, UserFunction, UserOp ) "}, {"sha": "87853dbe71e5cb433a231200bfebbf43af2b6c73", "filename": "gcc/testsuite/gfortran.dg/intrinsic_subroutine.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_subroutine.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_subroutine.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_subroutine.f90?ref=c73b64789603a591d339431e8b2e42079d4a54e5", "patch": "@@ -3,5 +3,5 @@\n implicit none\n intrinsic cpu_time\n real :: time\n-print *, CPU_TIME(TIME)  ! { dg-error \"Intrinsic subroutine\" }\n+print *, CPU_TIME(TIME)  ! { dg-error \"attribute conflicts with\" }\n end"}, {"sha": "f95d280621751a4e3d9e46fa4d811ee10936f84f", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_15.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_15.f90?ref=c73b64789603a591d339431e8b2e42079d4a54e5", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do compile }\n+!\n+! PR 39735: procedure pointer assignments: return value is not checked\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+implicit none\n+procedure(real(4)), pointer :: p1\n+procedure(integer), pointer :: p2\n+procedure(sub), pointer :: p3\n+procedure(), pointer :: p4\n+procedure(real(8)),pointer :: p5\n+real(4), external, pointer :: p6\n+\n+! valid\n+p2 => iabs\n+p3 => sub\n+p4 => p2\n+p6 => p1\n+\n+! invalid\n+p1 => iabs   ! { dg-error \"Interfaces don't match\" }\n+p1 => p2     ! { dg-error \"Interfaces don't match\" }\n+p1 => p5     ! { dg-error \"Interfaces don't match\" }\n+p6 => iabs   ! { dg-error \"Interfaces don't match\" }\n+\n+contains\n+\n+  subroutine sub(i)\n+    integer :: i\n+  end subroutine\n+\n+end\n+"}, {"sha": "b69ae9c10e0844f6a20aa827716036f999e0fed8", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_3.f90?ref=c73b64789603a591d339431e8b2e42079d4a54e5", "patch": "@@ -27,7 +27,7 @@ subroutine sp(a,b)\n   end subroutine sp\n end interface\n \n-external :: e1\n+real, external :: e1\n \n interface\n   subroutine e2(a,b)"}, {"sha": "1261791ae73d0708cf321d95021d2f0de2f0fb37", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_result_1.f90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73b64789603a591d339431e8b2e42079d4a54e5/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_result_1.f90?ref=c73b64789603a591d339431e8b2e42079d4a54e5", "patch": "@@ -8,6 +8,7 @@ module mo\n contains\n \n   function j()\n+    implicit none\n     procedure(),pointer :: j\n     intrinsic iabs\n     j => iabs"}]}