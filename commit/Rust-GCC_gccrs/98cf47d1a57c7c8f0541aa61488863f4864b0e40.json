{"sha": "98cf47d1a57c7c8f0541aa61488863f4864b0e40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThjZjQ3ZDFhNTdjN2M4ZjA1NDFhYTYxNDg4ODYzZjQ4NjRiMGU0MA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2012-06-08T17:26:11Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2012-06-08T17:26:11Z"}, "message": "re PR fortran/52552 ([OOP] ICE when trying to allocate non-allocatable object giving a dynamic type)\n\n2012-06-08  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/52552\n\t* match.c (gfc_match_allocate): Modify order of checks. Change wording\n\tof error message. Remove FIXME note.\n\t* resolve.c (resolve_allocate_expr): Add a comment.\n\n2012-06-08  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/52552\n\t* gfortran.dg/allocate_alloc_opt_1.f90: Modified.\n\t* gfortran.dg/allocate_class_1.f90: Modified.\n\t* gfortran.dg/allocate_with_typespec_4.f90: Modified.\n\t* gfortran.dg/allocate_class_2.f90: New.\n\nFrom-SVN: r188335", "tree": {"sha": "8d289d12a300ed4e057d71380dc78973a09d46df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d289d12a300ed4e057d71380dc78973a09d46df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98cf47d1a57c7c8f0541aa61488863f4864b0e40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98cf47d1a57c7c8f0541aa61488863f4864b0e40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98cf47d1a57c7c8f0541aa61488863f4864b0e40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98cf47d1a57c7c8f0541aa61488863f4864b0e40/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef0cd8fe8b4576fe98f4405d99431ed225ef3c17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef0cd8fe8b4576fe98f4405d99431ed225ef3c17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef0cd8fe8b4576fe98f4405d99431ed225ef3c17"}], "stats": {"total": 82, "additions": 57, "deletions": 25}, "files": [{"sha": "02b644544a62d9c565537180c7ed85bbe3497884", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf47d1a57c7c8f0541aa61488863f4864b0e40/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf47d1a57c7c8f0541aa61488863f4864b0e40/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=98cf47d1a57c7c8f0541aa61488863f4864b0e40", "patch": "@@ -1,3 +1,10 @@\n+2012-06-08  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/52552\n+\t* match.c (gfc_match_allocate): Modify order of checks. Change wording\n+\tof error message. Remove FIXME note.\n+\t* resolve.c (resolve_allocate_expr): Add a comment.\n+\n 2012-06-07  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/52861"}, {"sha": "3d63510b00bc604085b055f6eb6fd06aeb5eb775", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf47d1a57c7c8f0541aa61488863f4864b0e40/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf47d1a57c7c8f0541aa61488863f4864b0e40/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=98cf47d1a57c7c8f0541aa61488863f4864b0e40", "patch": "@@ -3533,6 +3533,28 @@ gfc_match_allocate (void)\n \t    }\n \t}\n \n+      /* Check for F08:C628.  */\n+      sym = tail->expr->symtree->n.sym;\n+      b1 = !(tail->expr->ref\n+\t     && (tail->expr->ref->type == REF_COMPONENT\n+\t\t || tail->expr->ref->type == REF_ARRAY));\n+      if (sym && sym->ts.type == BT_CLASS && sym->attr.class_ok)\n+\tb2 = !(CLASS_DATA (sym)->attr.allocatable\n+\t       || CLASS_DATA (sym)->attr.class_pointer);\n+      else\n+\tb2 = sym && !(sym->attr.allocatable || sym->attr.pointer\n+\t\t      || sym->attr.proc_pointer);\n+      b3 = sym && sym->ns && sym->ns->proc_name\n+\t   && (sym->ns->proc_name->attr.allocatable\n+\t       || sym->ns->proc_name->attr.pointer\n+\t       || sym->ns->proc_name->attr.proc_pointer);\n+      if (b1 && b2 && !b3)\n+\t{\n+\t  gfc_error (\"Allocate-object at %L is neither a data pointer \"\n+\t\t     \"nor an allocatable variable\", &tail->expr->where);\n+\t  goto cleanup;\n+\t}\n+\n       /* The ALLOCATE statement had an optional typespec.  Check the\n \t constraints.  */\n       if (ts.type != BT_UNKNOWN)\n@@ -3558,28 +3580,6 @@ gfc_match_allocate (void)\n       if (tail->expr->ts.type == BT_DERIVED)\n \ttail->expr->ts.u.derived = gfc_use_derived (tail->expr->ts.u.derived);\n \n-      /* FIXME: disable the checking on derived types and arrays.  */\n-      sym = tail->expr->symtree->n.sym;\n-      b1 = !(tail->expr->ref\n-\t   && (tail->expr->ref->type == REF_COMPONENT\n-\t\t|| tail->expr->ref->type == REF_ARRAY));\n-      if (sym && sym->ts.type == BT_CLASS && sym->attr.class_ok)\n-\tb2 = !(CLASS_DATA (sym)->attr.allocatable\n-\t       || CLASS_DATA (sym)->attr.class_pointer);\n-      else\n-\tb2 = sym && !(sym->attr.allocatable || sym->attr.pointer\n-\t\t      || sym->attr.proc_pointer);\n-      b3 = sym && sym->ns && sym->ns->proc_name\n-\t   && (sym->ns->proc_name->attr.allocatable\n-\t\t|| sym->ns->proc_name->attr.pointer\n-\t\t|| sym->ns->proc_name->attr.proc_pointer);\n-      if (b1 && b2 && !b3)\n-\t{\n-\t  gfc_error (\"Allocate-object at %L is neither a nonprocedure pointer \"\n-\t\t     \"nor an allocatable variable\", &tail->expr->where);\n-\t  goto cleanup;\n-\t}\n-\n       if (gfc_peek_ascii_char () == '(' && !sym->attr.dimension)\n \t{\n \t  gfc_error (\"Shape specification for allocatable scalar at %C\");"}, {"sha": "8531318669594f06759c677abd8786a8644adf24", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf47d1a57c7c8f0541aa61488863f4864b0e40/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf47d1a57c7c8f0541aa61488863f4864b0e40/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=98cf47d1a57c7c8f0541aa61488863f4864b0e40", "patch": "@@ -6986,6 +6986,7 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n \t}\n     }\n \n+  /* Check for F08:C628.  */\n   if (allocatable == 0 && pointer == 0)\n     {\n       gfc_error (\"Allocate-object at %L must be ALLOCATABLE or a POINTER\","}, {"sha": "60c8e28a6d92f8f6d7897061d8cb89253b8205b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf47d1a57c7c8f0541aa61488863f4864b0e40/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf47d1a57c7c8f0541aa61488863f4864b0e40/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98cf47d1a57c7c8f0541aa61488863f4864b0e40", "patch": "@@ -1,3 +1,11 @@\n+2012-06-08  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/52552\n+\t* gfortran.dg/allocate_alloc_opt_1.f90: Modified.\n+\t* gfortran.dg/allocate_class_1.f90: Modified.\n+\t* gfortran.dg/allocate_with_typespec_4.f90: Modified.\n+\t* gfortran.dg/allocate_class_2.f90: New.\n+\n 2012-06-07  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR middle-end/53535"}, {"sha": "95571fdfe124092ee0abe19db4aedfa6f69bb313", "filename": "gcc/testsuite/gfortran.dg/allocate_alloc_opt_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf47d1a57c7c8f0541aa61488863f4864b0e40/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf47d1a57c7c8f0541aa61488863f4864b0e40/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_1.f90?ref=98cf47d1a57c7c8f0541aa61488863f4864b0e40", "patch": "@@ -24,7 +24,7 @@ program a\n   allocate(i(2), errmsg=err) ! { dg-warning \"useless without a STAT\" }\n   allocate(i(2), stat=j, errmsg=x) ! { dg-error \"must be a scalar CHARACTER\" }\n \n-  allocate(err) ! { dg-error \"neither a nonprocedure pointer nor an allocatable\" }\n+  allocate(err) ! { dg-error \"neither a data pointer nor an allocatable\" }\n \n   allocate(error(2),stat=j,errmsg=error(1)) ! { dg-error \"shall not be ALLOCATEd within\" }\n   allocate(i(2), stat = i(1))  ! { dg-error \"shall not be ALLOCATEd within\" }"}, {"sha": "d8f80ed5ec64e493871b60ebebb73d6450942bfc", "filename": "gcc/testsuite/gfortran.dg/allocate_class_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf47d1a57c7c8f0541aa61488863f4864b0e40/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_class_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf47d1a57c7c8f0541aa61488863f4864b0e40/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_class_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_class_1.f90?ref=98cf47d1a57c7c8f0541aa61488863f4864b0e40", "patch": "@@ -7,5 +7,5 @@\n  type :: t0\n  end type\n  class(t0) :: x  ! { dg-error \"must be dummy, allocatable or pointer\" }\n- allocate(x)     ! { dg-error \"is neither a nonprocedure pointer nor an allocatable variable\" }\n+ allocate(x)     ! { dg-error \"is neither a data pointer nor an allocatable variable\" }\n  end"}, {"sha": "733dca62b99b783886e3c00875521b678906201f", "filename": "gcc/testsuite/gfortran.dg/allocate_class_2.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf47d1a57c7c8f0541aa61488863f4864b0e40/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_class_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf47d1a57c7c8f0541aa61488863f4864b0e40/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_class_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_class_2.f90?ref=98cf47d1a57c7c8f0541aa61488863f4864b0e40", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+!\n+! PR 52552: [OOP] ICE when trying to allocate non-allocatable object giving a dynamic type\n+!\n+! Contributed by <gccbgz.lionm@xoxy.net>\n+\n+\n+  type t\n+    integer :: i\n+  end type\n+  \n+  class(t) :: o      ! { dg-error \"must be dummy, allocatable or pointer\" }\n+\n+  allocate(t::o)     ! { dg-error \"is neither a data pointer nor an allocatable variable\" }\n+\n+end "}, {"sha": "cc09697f385997410b944e3d77b8fe3b95a443a1", "filename": "gcc/testsuite/gfortran.dg/allocate_with_typespec_4.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cf47d1a57c7c8f0541aa61488863f4864b0e40/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cf47d1a57c7c8f0541aa61488863f4864b0e40/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec_4.f90?ref=98cf47d1a57c7c8f0541aa61488863f4864b0e40", "patch": "@@ -21,7 +21,7 @@ subroutine not_an_f03_intrinsic\n    allocate(real*8 :: y(1))       ! { dg-error \"Invalid type-spec at\" }\n    allocate(real*4 :: x8)         ! { dg-error \"Invalid type-spec at\" }\n    allocate(real*4 :: y8(1))      ! { dg-error \"Invalid type-spec at\" }\n-   allocate(double complex :: d1) ! { dg-error \"neither a nonprocedure pointer nor an allocatable\" }\n+   allocate(double complex :: d1) ! { dg-error \"neither a data pointer nor an allocatable\" }\n    allocate(real_type :: b)\n    allocate(real_type :: c(1))\n "}]}