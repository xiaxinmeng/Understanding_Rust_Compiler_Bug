{"sha": "37d6a4b7799e83ffa638091ae78f7e5e3133263f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdkNmE0Yjc3OTllODNmZmE2MzgwOTFhZTc4ZjdlNWUzMTMzMjYzZg==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-07-25T13:42:43Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-07-25T13:42:43Z"}, "message": "[AArch64][3/3] Migrate aarch64_expand_prologue/epilogue to aarch64_add_constant\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_add_constant): New parameter\n\t\"frame_related_p\".  Generate CFA annotation when it's necessary.\n\t(aarch64_expand_prologue): Use aarch64_add_constant.\n\t(aarch64_expand_epilogue): Likewise.\n\t(aarch64_output_mi_thunk): Pass \"false\" when calling\n\taarch64_add_constant.\n\nFrom-SVN: r238714", "tree": {"sha": "fd8e065488ffc0ddb9e79e8594db38f756a5a4cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd8e065488ffc0ddb9e79e8594db38f756a5a4cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37d6a4b7799e83ffa638091ae78f7e5e3133263f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d6a4b7799e83ffa638091ae78f7e5e3133263f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37d6a4b7799e83ffa638091ae78f7e5e3133263f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d6a4b7799e83ffa638091ae78f7e5e3133263f/comments", "author": null, "committer": null, "parents": [{"sha": "c4ddc43acce4417495d3ff3c194edfc2184ecb4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ddc43acce4417495d3ff3c194edfc2184ecb4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4ddc43acce4417495d3ff3c194edfc2184ecb4f"}], "stats": {"total": 96, "additions": 33, "deletions": 63}, "files": [{"sha": "f82a4d3c88894b2bcdedec61796c497afddde7b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d6a4b7799e83ffa638091ae78f7e5e3133263f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d6a4b7799e83ffa638091ae78f7e5e3133263f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37d6a4b7799e83ffa638091ae78f7e5e3133263f", "patch": "@@ -1,3 +1,12 @@\n+2016-07-25  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_add_constant): New parameter\n+\t\"frame_related_p\".  Generate CFA annotation when it's necessary.\n+\t(aarch64_expand_prologue): Use aarch64_add_constant.\n+\t(aarch64_expand_epilogue): Likewise.\n+\t(aarch64_output_mi_thunk): Pass \"false\" when calling\n+\taarch64_add_constant.\n+\n 2016-07-25  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_add_constant): Optimize instruction"}, {"sha": "5560516c9f1a903dae412dd70f3dafaffcf48446", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 24, "deletions": 63, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37d6a4b7799e83ffa638091ae78f7e5e3133263f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37d6a4b7799e83ffa638091ae78f7e5e3133263f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=37d6a4b7799e83ffa638091ae78f7e5e3133263f", "patch": "@@ -1941,14 +1941,19 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n }\n \n /* Add DELTA to REGNUM in mode MODE.  SCRATCHREG can be used to held\n-   intermediate value if necessary.  */\n+   intermediate value if necessary.\n+\n+   This function is sometimes used to adjust the stack pointer, so we must\n+   ensure that it can never cause transient stack deallocation by writing an\n+   invalid value into REGNUM.  */\n \n static void\n aarch64_add_constant (machine_mode mode, int regnum, int scratchreg,\n-\t\t      HOST_WIDE_INT delta)\n+\t\t      HOST_WIDE_INT delta, bool frame_related_p)\n {\n   HOST_WIDE_INT mdelta = abs_hwi (delta);\n   rtx this_rtx = gen_rtx_REG (mode, regnum);\n+  rtx_insn *insn;\n \n   /* Do nothing if mdelta is zero.  */\n   if (!mdelta)\n@@ -1957,7 +1962,8 @@ aarch64_add_constant (machine_mode mode, int regnum, int scratchreg,\n   /* We only need single instruction if the offset fit into add/sub.  */\n   if (aarch64_uimm12_shift (mdelta))\n     {\n-      emit_insn (gen_add2_insn (this_rtx, GEN_INT (delta)));\n+      insn = emit_insn (gen_add2_insn (this_rtx, GEN_INT (delta)));\n+      RTX_FRAME_RELATED_P (insn) = frame_related_p;\n       return;\n     }\n \n@@ -1970,15 +1976,23 @@ aarch64_add_constant (machine_mode mode, int regnum, int scratchreg,\n       HOST_WIDE_INT low_off = mdelta & 0xfff;\n \n       low_off = delta < 0 ? -low_off : low_off;\n-      emit_insn (gen_add2_insn (this_rtx, GEN_INT (low_off)));\n-      emit_insn (gen_add2_insn (this_rtx, GEN_INT (delta - low_off)));\n+      insn = emit_insn (gen_add2_insn (this_rtx, GEN_INT (low_off)));\n+      RTX_FRAME_RELATED_P (insn) = frame_related_p;\n+      insn = emit_insn (gen_add2_insn (this_rtx, GEN_INT (delta - low_off)));\n+      RTX_FRAME_RELATED_P (insn) = frame_related_p;\n       return;\n     }\n \n   /* Otherwise use generic function to handle all other situations.  */\n   rtx scratch_rtx = gen_rtx_REG (mode, scratchreg);\n   aarch64_internal_mov_immediate (scratch_rtx, GEN_INT (delta), true, mode);\n-  emit_insn (gen_add2_insn (this_rtx, scratch_rtx));\n+  insn = emit_insn (gen_add2_insn (this_rtx, scratch_rtx));\n+  if (frame_related_p)\n+    {\n+      RTX_FRAME_RELATED_P (insn) = frame_related_p;\n+      rtx adj = plus_constant (mode, this_rtx, delta);\n+      add_reg_note (insn , REG_CFA_ADJUST_CFA, gen_rtx_SET (this_rtx, adj));\n+    }\n }\n \n static bool\n@@ -3113,36 +3127,7 @@ aarch64_expand_prologue (void)\n       frame_size -= (offset + crtl->outgoing_args_size);\n       fp_offset = 0;\n \n-      if (frame_size >= 0x1000000)\n-\t{\n-\t  rtx op0 = gen_rtx_REG (Pmode, IP0_REGNUM);\n-\t  emit_move_insn (op0, GEN_INT (-frame_size));\n-\t  insn = emit_insn (gen_add2_insn (stack_pointer_rtx, op0));\n-\n-\t  add_reg_note (insn, REG_CFA_ADJUST_CFA,\n-\t\t\tgen_rtx_SET (stack_pointer_rtx,\n-\t\t\t\t     plus_constant (Pmode, stack_pointer_rtx,\n-\t\t\t\t\t\t    -frame_size)));\n-\t  RTX_FRAME_RELATED_P (insn) = 1;\n-\t}\n-      else if (frame_size > 0)\n-\t{\n-\t  int hi_ofs = frame_size & 0xfff000;\n-\t  int lo_ofs = frame_size & 0x000fff;\n-\n-\t  if (hi_ofs)\n-\t    {\n-\t      insn = emit_insn (gen_add2_insn\n-\t\t\t\t(stack_pointer_rtx, GEN_INT (-hi_ofs)));\n-\t      RTX_FRAME_RELATED_P (insn) = 1;\n-\t    }\n-\t  if (lo_ofs)\n-\t    {\n-\t      insn = emit_insn (gen_add2_insn\n-\t\t\t\t(stack_pointer_rtx, GEN_INT (-lo_ofs)));\n-\t      RTX_FRAME_RELATED_P (insn) = 1;\n-\t    }\n-\t}\n+      aarch64_add_constant (Pmode, SP_REGNUM, IP0_REGNUM, -frame_size, true);\n     }\n   else\n     frame_size = -1;\n@@ -3362,31 +3347,7 @@ aarch64_expand_epilogue (bool for_sibcall)\n       if (need_barrier_p)\n \temit_insn (gen_stack_tie (stack_pointer_rtx, stack_pointer_rtx));\n \n-      if (frame_size >= 0x1000000)\n-\t{\n-\t  rtx op0 = gen_rtx_REG (Pmode, IP0_REGNUM);\n-\t  emit_move_insn (op0, GEN_INT (frame_size));\n-\t  insn = emit_insn (gen_add2_insn (stack_pointer_rtx, op0));\n-\t}\n-      else\n-\t{\n-          int hi_ofs = frame_size & 0xfff000;\n-          int lo_ofs = frame_size & 0x000fff;\n-\n-\t  if (hi_ofs && lo_ofs)\n-\t    {\n-\t      insn = emit_insn (gen_add2_insn\n-\t\t\t\t(stack_pointer_rtx, GEN_INT (hi_ofs)));\n-\t      RTX_FRAME_RELATED_P (insn) = 1;\n-\t      frame_size = lo_ofs;\n-\t    }\n-\t  insn = emit_insn (gen_add2_insn\n-\t\t\t    (stack_pointer_rtx, GEN_INT (frame_size)));\n-\t}\n-\n-      /* Reset the CFA to be SP + 0.  */\n-      add_reg_note (insn, REG_CFA_DEF_CFA, stack_pointer_rtx);\n-      RTX_FRAME_RELATED_P (insn) = 1;\n+      aarch64_add_constant (Pmode, SP_REGNUM, IP0_REGNUM, frame_size, true);\n     }\n \n   /* Stack adjustment for exception handler.  */\n@@ -3473,7 +3434,7 @@ aarch64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n   emit_note (NOTE_INSN_PROLOGUE_END);\n \n   if (vcall_offset == 0)\n-    aarch64_add_constant (Pmode, this_regno, IP1_REGNUM, delta);\n+    aarch64_add_constant (Pmode, this_regno, IP1_REGNUM, delta, false);\n   else\n     {\n       gcc_assert ((vcall_offset & (POINTER_BYTES - 1)) == 0);\n@@ -3489,7 +3450,7 @@ aarch64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t    addr = gen_rtx_PRE_MODIFY (Pmode, this_rtx,\n \t\t\t\t       plus_constant (Pmode, this_rtx, delta));\n \t  else\n-\t    aarch64_add_constant (Pmode, this_regno, IP1_REGNUM, delta);\n+\t    aarch64_add_constant (Pmode, this_regno, IP1_REGNUM, delta, false);\n \t}\n \n       if (Pmode == ptr_mode)"}]}