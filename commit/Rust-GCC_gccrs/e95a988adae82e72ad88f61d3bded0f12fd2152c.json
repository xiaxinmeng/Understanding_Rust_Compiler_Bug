{"sha": "e95a988adae82e72ad88f61d3bded0f12fd2152c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk1YTk4OGFkYWU4MmU3MmFkODhmNjFkM2JkZWQwZjEyZmQyMTUyYw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-08-04T10:39:42Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-08-04T10:39:42Z"}, "message": "[AArch64][11/14] Re-layout SIMD builtin types on builtin expansion\n\n\t* config/aarch64/aarch64.c (aarch64_option_valid_attribute_p):\n\tInitialize simd builtins if TARGET_SIMD.\n\t* config/aarch64/aarch64-builtins.c (aarch64_init_simd_builtins):\n\tMake sure that the builtins are initialized only once no matter how\n\tmany times the function is called.\n\t(aarch64_init_builtins): Unconditionally initialize crc builtins.\n\t(aarch64_relayout_simd_param): New function.\n\t(aarch64_simd_expand_args): Use above during argument expansion.\n\t* config/aarch64/aarch64-c.c (aarch64_pragma_target_parse): Initialize\n\tsimd builtins if TARGET_SIMD.\n\t* config/aarch64/aarch64-protos.h (aarch64_init_simd_builtins): New\n\tprototype.\n\t(aarch64_relayout_simd_types): Likewise.\n\n\t* gcc.target/aarch64/target_attr_crypto_ice_1.c: New test.\n\nFrom-SVN: r226564", "tree": {"sha": "ad5c28519ae9150f5341e2af80f52b4b77f6fad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad5c28519ae9150f5341e2af80f52b4b77f6fad8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e95a988adae82e72ad88f61d3bded0f12fd2152c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e95a988adae82e72ad88f61d3bded0f12fd2152c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e95a988adae82e72ad88f61d3bded0f12fd2152c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e95a988adae82e72ad88f61d3bded0f12fd2152c/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e4ea20c8eba2430a534db6d10059ae53051312cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ea20c8eba2430a534db6d10059ae53051312cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ea20c8eba2430a534db6d10059ae53051312cb"}], "stats": {"total": 107, "additions": 104, "deletions": 3}, "files": [{"sha": "fb8cbe114f48fd10110d1b6b418315c8940d1607", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95a988adae82e72ad88f61d3bded0f12fd2152c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95a988adae82e72ad88f61d3bded0f12fd2152c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e95a988adae82e72ad88f61d3bded0f12fd2152c", "patch": "@@ -1,3 +1,19 @@\n+2015-08-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_option_valid_attribute_p):\n+\tInitialize simd builtins if TARGET_SIMD.\n+\t* config/aarch64/aarch64-builtins.c (aarch64_init_simd_builtins):\n+\tMake sure that the builtins are initialized only once no matter how\n+\tmany times the function is called.\n+\t(aarch64_init_builtins): Unconditionally initialize crc builtins.\n+\t(aarch64_relayout_simd_param): New function.\n+\t(aarch64_simd_expand_args): Use above during argument expansion.\n+\t* config/aarch64/aarch64-c.c (aarch64_pragma_target_parse): Initialize\n+\tsimd builtins if TARGET_SIMD.\n+\t* config/aarch64/aarch64-protos.h (aarch64_init_simd_builtins): New\n+\tprototype.\n+\t(aarch64_relayout_simd_types): Likewise.\n+\n 2015-08-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config.gcc (aarch64*-*-*): Specify c_target_objs and cxx_target_objs."}, {"sha": "0f4f2b97022cf029aaeb43a609ae69a30373915a", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95a988adae82e72ad88f61d3bded0f12fd2152c/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95a988adae82e72ad88f61d3bded0f12fd2152c/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=e95a988adae82e72ad88f61d3bded0f12fd2152c", "patch": "@@ -684,11 +684,18 @@ aarch64_init_simd_builtin_scalar_types (void)\n \t\t\t\t\t     \"__builtin_aarch64_simd_udi\");\n }\n \n-static void\n+static bool aarch64_simd_builtins_initialized_p = false;\n+\n+void\n aarch64_init_simd_builtins (void)\n {\n   unsigned int i, fcode = AARCH64_SIMD_PATTERN_START;\n \n+  if (aarch64_simd_builtins_initialized_p)\n+    return;\n+\n+  aarch64_simd_builtins_initialized_p = true;\n+\n   aarch64_init_simd_builtin_types ();\n \n   /* Strong-typing hasn't been implemented for all AdvSIMD builtin intrinsics.\n@@ -857,8 +864,8 @@ aarch64_init_builtins (void)\n \n   if (TARGET_SIMD)\n     aarch64_init_simd_builtins ();\n-  if (TARGET_CRC32)\n-    aarch64_init_crc32_builtins ();\n+\n+  aarch64_init_crc32_builtins ();\n }\n \n tree\n@@ -879,6 +886,31 @@ typedef enum\n   SIMD_ARG_STOP\n } builtin_simd_arg;\n \n+/* Relayout the decl of a function arg.  Keep the RTL component the same,\n+   as varasm.c ICEs.  It doesn't like reinitializing the RTL\n+   on PARM decls.  Something like this needs to be done when compiling a\n+   file without SIMD and then tagging a function with +simd and using SIMD\n+   intrinsics in there.  The types will have been laid out assuming no SIMD,\n+   so we want to re-lay them out.  */\n+\n+static void\n+aarch64_relayout_simd_param (tree arg)\n+{\n+  tree argdecl = arg;\n+  if (TREE_CODE (argdecl) == SSA_NAME)\n+    argdecl = SSA_NAME_VAR (argdecl);\n+\n+  if (argdecl\n+      && (TREE_CODE (argdecl) == PARM_DECL\n+\t  || TREE_CODE (argdecl) == VAR_DECL))\n+    {\n+      rtx rtl = NULL_RTX;\n+      rtl = DECL_RTL_IF_SET (argdecl);\n+      relayout_decl (argdecl);\n+      SET_DECL_RTL (argdecl, rtl);\n+    }\n+}\n+\n static rtx\n aarch64_simd_expand_args (rtx target, int icode, int have_retval,\n \t\t\t  tree exp, builtin_simd_arg *args,\n@@ -908,6 +940,7 @@ aarch64_simd_expand_args (rtx target, int icode, int have_retval,\n \t{\n \t  tree arg = CALL_EXPR_ARG (exp, opc - have_retval);\n \t  enum machine_mode mode = insn_data[icode].operand[opc].mode;\n+\t  aarch64_relayout_simd_param (arg);\n \t  op[opc] = expand_normal (arg);\n \n \t  switch (thisarg)"}, {"sha": "303025f77f01e2c7632505bbf5590da0dbb6eb53", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95a988adae82e72ad88f61d3bded0f12fd2152c/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95a988adae82e72ad88f61d3bded0f12fd2152c/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=e95a988adae82e72ad88f61d3bded0f12fd2152c", "patch": "@@ -177,6 +177,19 @@ aarch64_pragma_target_parse (tree args, tree pop_target)\n \n   cpp_opts->warn_unused_macros = saved_warn_unused_macros;\n \n+  /* Initialize SIMD builtins if we haven't already.\n+     Set current_target_pragma to NULL for the duration so that\n+     the builtin initialization code doesn't try to tag the functions\n+     being built with the attributes specified by any current pragma, thus\n+     going into an infinite recursion.  */\n+  if (TARGET_SIMD)\n+    {\n+      tree saved_current_target_pragma = current_target_pragma;\n+      current_target_pragma = NULL;\n+      aarch64_init_simd_builtins ();\n+      current_target_pragma = saved_current_target_pragma;\n+    }\n+\n   return true;\n }\n "}, {"sha": "5d8902ff3276ecd03f1f8ae3eeff0751ec6c26bc", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95a988adae82e72ad88f61d3bded0f12fd2152c/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95a988adae82e72ad88f61d3bded0f12fd2152c/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=e95a988adae82e72ad88f61d3bded0f12fd2152c", "patch": "@@ -323,10 +323,12 @@ void aarch64_expand_vector_init (rtx, rtx);\n void aarch64_init_cumulative_args (CUMULATIVE_ARGS *, const_tree, rtx,\n \t\t\t\t   const_tree, unsigned);\n void aarch64_init_expanders (void);\n+void aarch64_init_simd_builtins (void);\n void aarch64_print_operand (FILE *, rtx, char);\n void aarch64_print_operand_address (FILE *, rtx);\n void aarch64_emit_call_insn (rtx);\n void aarch64_register_pragmas (void);\n+void aarch64_relayout_simd_types (void);\n void aarch64_reset_previous_fndecl (void);\n \n /* Initialize builtins for SIMD intrinsics.  */"}, {"sha": "63b49ab172111838e4e75744841a9ae3cd365160", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95a988adae82e72ad88f61d3bded0f12fd2152c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95a988adae82e72ad88f61d3bded0f12fd2152c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=e95a988adae82e72ad88f61d3bded0f12fd2152c", "patch": "@@ -8450,6 +8450,18 @@ aarch64_option_valid_attribute_p (tree fndecl, tree, tree args, int)\n   if (ret)\n     {\n       aarch64_override_options_internal (&global_options);\n+      /* Initialize SIMD builtins if we haven't already.\n+\t Set current_target_pragma to NULL for the duration so that\n+\t the builtin initialization code doesn't try to tag the functions\n+\t being built with the attributes specified by any current pragma, thus\n+\t going into an infinite recursion.  */\n+      if (TARGET_SIMD)\n+\t{\n+\t  tree saved_current_target_pragma = current_target_pragma;\n+\t  current_target_pragma = NULL;\n+\t  aarch64_init_simd_builtins ();\n+\t  current_target_pragma = saved_current_target_pragma;\n+\t}\n       new_target = build_target_option_node (&global_options);\n     }\n   else"}, {"sha": "244ed9602b78e773fec73ab660fd040c6911e971", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95a988adae82e72ad88f61d3bded0f12fd2152c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95a988adae82e72ad88f61d3bded0f12fd2152c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e95a988adae82e72ad88f61d3bded0f12fd2152c", "patch": "@@ -1,3 +1,7 @@\n+2015-08-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/target_attr_crypto_ice_1.c: New test.\n+\n 2015-08-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/arm_neon-nosimd-error.c: Delete."}, {"sha": "42f14c461a21c35850793e2c08093a8abae2c0a5", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_crypto_ice_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e95a988adae82e72ad88f61d3bded0f12fd2152c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_crypto_ice_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e95a988adae82e72ad88f61d3bded0f12fd2152c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_crypto_ice_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_crypto_ice_1.c?ref=e95a988adae82e72ad88f61d3bded0f12fd2152c", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=thunderx+nofp\" } */\n+\n+#include \"arm_neon.h\"\n+\n+/* Unless we do something about re-laying out the SIMD builtin types\n+   this testcase ICEs during expansion of the crypto builtin.  */\n+\n+__attribute__ ((target (\"cpu=cortex-a57+crypto\")))\n+uint32x4_t\n+test_vsha1cq_u32 (uint32x4_t hash_abcd, uint32_t hash_e, uint32x4_t wk)\n+{\n+  return vsha1cq_u32 (hash_abcd, hash_e, wk);\n+}\n+\n+/* This one should be compiled for thunderx with no fp.  */\n+int\n+foo (int a)\n+{\n+  return a + 5;\n+}"}]}