{"sha": "a64775a0edd46980036b757041f0c065ed9f8d22", "node_id": "C_kwDOANBUbNoAKGE2NDc3NWEwZWRkNDY5ODAwMzZiNzU3MDQxZjBjMDY1ZWQ5ZjhkMjI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-28T09:44:52Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-28T15:02:04Z"}, "message": "libstdc++: Make 16-bit std::subtract_with_carry_engine work [PR107466]\n\nThis implements the proposed resolution of LWG 3809, so that\nstd::subtract_with_carry_engine can be used with a 16-bit result_type.\nCurrently this produces a narrowing error when instantiating the\nstd::linear_congruential_engine to create the initial state. It also\ntruncates the default_seed constant when passing it as a result_type\nargument.\n\nChange the type of the constant to uint_least32_t and pass 0u when the\ndefault_seed should be used.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/107466\n\t* include/bits/random.h (subtract_with_carry_engine): Use 32-bit\n\ttype for default seed. Use 0u as default argument for\n\tsubtract_with_carry_engine(result_type) constructor and\n\tseed(result_type) member function.\n\t* include/bits/random.tcc (subtract_with_carry_engine): Use\n\t32-bit type for default seed and engine used for initial state.\n\t* testsuite/26_numerics/random/subtract_with_carry_engine/cons/lwg3809.cc:\n\tNew test.", "tree": {"sha": "8756b771d7dfd1eb705dd87a1522a959cc0c772a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8756b771d7dfd1eb705dd87a1522a959cc0c772a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a64775a0edd46980036b757041f0c065ed9f8d22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64775a0edd46980036b757041f0c065ed9f8d22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a64775a0edd46980036b757041f0c065ed9f8d22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64775a0edd46980036b757041f0c065ed9f8d22/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be7ea145514eba69a3d53340da3f05f804e48833", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7ea145514eba69a3d53340da3f05f804e48833", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be7ea145514eba69a3d53340da3f05f804e48833"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "523ef2d65650f184d43493ba707ba166575f3f92", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64775a0edd46980036b757041f0c065ed9f8d22/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64775a0edd46980036b757041f0c065ed9f8d22/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=a64775a0edd46980036b757041f0c065ed9f8d22", "patch": "@@ -721,9 +721,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static constexpr size_t      word_size    = __w;\n       static constexpr size_t      short_lag    = __s;\n       static constexpr size_t      long_lag     = __r;\n-      static constexpr result_type default_seed = 19780503u;\n+      static constexpr uint_least32_t default_seed = 19780503u;\n \n-      subtract_with_carry_engine() : subtract_with_carry_engine(default_seed)\n+      subtract_with_carry_engine() : subtract_with_carry_engine(0u)\n       { }\n \n       /**\n@@ -758,7 +758,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * set carry to 1, otherwise sets carry to 0.\n        */\n       void\n-      seed(result_type __sd = default_seed);\n+      seed(result_type __sd = 0u);\n \n       /**\n        * @brief Seeds the initial state @f$x_0@f$ of the"}, {"sha": "7ec2b3f6c3526e4b20f6c464a7a8fe60837b133c", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64775a0edd46980036b757041f0c065ed9f8d22/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64775a0edd46980036b757041f0c065ed9f8d22/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=a64775a0edd46980036b757041f0c065ed9f8d22", "patch": "@@ -532,7 +532,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     subtract_with_carry_engine<_UIntType, __w, __s, __r>::long_lag;\n \n   template<typename _UIntType, size_t __w, size_t __s, size_t __r>\n-    constexpr _UIntType\n+    constexpr uint_least32_t\n     subtract_with_carry_engine<_UIntType, __w, __s, __r>::default_seed;\n #endif\n \n@@ -541,7 +541,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     subtract_with_carry_engine<_UIntType, __w, __s, __r>::\n     seed(result_type __value)\n     {\n-      std::linear_congruential_engine<result_type, 40014u, 0u, 2147483563u>\n+      std::linear_congruential_engine<uint_least32_t, 40014u, 0u, 2147483563u>\n \t__lcg(__value == 0u ? default_seed : __value);\n \n       const size_t __n = (__w + 31) / 32;"}, {"sha": "21f246b8dc0ec0b8470f3adf183166379323a608", "filename": "libstdc++-v3/testsuite/26_numerics/random/subtract_with_carry_engine/cons/lwg3809.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64775a0edd46980036b757041f0c065ed9f8d22/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Fcons%2Flwg3809.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64775a0edd46980036b757041f0c065ed9f8d22/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Fcons%2Flwg3809.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Fcons%2Flwg3809.cc?ref=a64775a0edd46980036b757041f0c065ed9f8d22", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do run { target c++11 } }\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+// LWG 3809. Is std::subtract_with_carry_engine<uint16_t> supposed to work?\n+// PR\u00a0107466 - invalid -Wnarrowing error with std::subtract_with_carry_engine\n+\n+int main()\n+{\n+  // It should be possible to construct this engine with a 16-bit result_type:\n+  std::subtract_with_carry_engine<uint16_t, 12, 5, 12> s16;\n+  std::subtract_with_carry_engine<uint32_t, 12, 5, 12> s32;\n+  // It should have been seeded with the same sequence as the 32-bit version\n+  // and produce random numbers in the same range, [0, 1<<12).\n+  for (int i = 0; i < 10; ++i)\n+    VERIFY( s16() == s32() );\n+  // The default seed should be usable without truncation to uint16_t:\n+  s16.seed();\n+  s32.seed();\n+  for (int i = 0; i < 10; ++i)\n+    VERIFY( s16() == s32() );\n+  s16.seed(101);\n+  s32.seed(101);\n+  for (int i = 0; i < 10; ++i)\n+    VERIFY( s16() == s32() );\n+}"}]}