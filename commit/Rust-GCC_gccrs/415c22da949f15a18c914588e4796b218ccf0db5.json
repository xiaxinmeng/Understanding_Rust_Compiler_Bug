{"sha": "415c22da949f15a18c914588e4796b218ccf0db5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE1YzIyZGE5NDlmMTVhMThjOTE0NTg4ZTQ3OTZiMjE4Y2NmMGRiNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-01-15T10:03:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-03T10:01:44Z"}, "message": "[Ada] Support pragma Allow_Integer_Address on 64-bit targets\n\n2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* opt.ads (Allow_Integer_Address): Fix typo in comment.\n\t* stand.ads (Standard_Address): New entity.\n\t* cstand.adb (Create_Standard): Create it.\n\t* sem_ch4.adb (Operator_Check): Convert the operands of an\n\toperation with addresses and integers to Standard_Address\n\tif pragma Allow_Integer_Address is in effect.", "tree": {"sha": "ead43615ea5ed4a07a31358f5df8414efbca6781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ead43615ea5ed4a07a31358f5df8414efbca6781"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/415c22da949f15a18c914588e4796b218ccf0db5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/415c22da949f15a18c914588e4796b218ccf0db5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/415c22da949f15a18c914588e4796b218ccf0db5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/415c22da949f15a18c914588e4796b218ccf0db5/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30c6e576a32bfa132fd57434a80b35b712f05458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c6e576a32bfa132fd57434a80b35b712f05458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c6e576a32bfa132fd57434a80b35b712f05458"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "dcdfe736d77dfc6bab02ad979f64e353d6f5c205", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415c22da949f15a18c914588e4796b218ccf0db5/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415c22da949f15a18c914588e4796b218ccf0db5/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=415c22da949f15a18c914588e4796b218ccf0db5", "patch": "@@ -1372,11 +1372,18 @@ package body CStand is\n          \"long_long_unsigned\");\n \n       --  Standard_Unsigned_64 is not user visible, but is used internally. It\n-      --  is an unsigned type mod 2**64, 64-bits unsigned, size is 64.\n+      --  is an unsigned type mod 2**64 with 64 bits size.\n \n       Standard_Unsigned_64 := New_Standard_Entity;\n       Build_Unsigned_Integer_Type (Standard_Unsigned_64, 64, \"unsigned_64\");\n \n+      --  Standard_Address is not user visible, but is used internally. It is\n+      --  an unsigned type mod 2**System_Address_Size with System.Address size.\n+\n+      Standard_Address := New_Standard_Entity;\n+      Build_Unsigned_Integer_Type\n+        (Standard_Address, System_Address_Size, \"standard_address\");\n+\n       --  Note: universal integer and universal real are constructed as fully\n       --  formed signed numeric types, with parameters corresponding to the\n       --  longest runtime types (Long_Long_Integer and Long_Long_Float). This"}, {"sha": "f3488bb44d9e246774ecada20d181c5247a2de37", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415c22da949f15a18c914588e4796b218ccf0db5/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415c22da949f15a18c914588e4796b218ccf0db5/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=415c22da949f15a18c914588e4796b218ccf0db5", "patch": "@@ -210,7 +210,7 @@ package Opt is\n    Allow_Integer_Address : Boolean := False;\n    --  GNAT\n    --  Allow use of integer expression in a context requiring System.Address.\n-   --  Set by the use of configuration pragma Allow_Integer_Address Also set\n+   --  Set by the use of configuration pragma Allow_Integer_Address. Also set\n    --  in relaxed semantics mode for use by CodePeer or when -gnatd.M is used.\n \n    All_Sources : Boolean := False;"}, {"sha": "0b04c42aacc2d2250f506ecf7ccc1cf0a6aead11", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415c22da949f15a18c914588e4796b218ccf0db5/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415c22da949f15a18c914588e4796b218ccf0db5/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=415c22da949f15a18c914588e4796b218ccf0db5", "patch": "@@ -7168,9 +7168,8 @@ package body Sem_Ch4 is\n                                N_Op_Divide,\n                                N_Op_Ge,\n                                N_Op_Gt,\n-                               N_Op_Le)\n-              or else\n-                  Nkind_In (N, N_Op_Lt,\n+                               N_Op_Le,\n+                               N_Op_Lt,\n                                N_Op_Mod,\n                                N_Op_Multiply,\n                                N_Op_Rem,\n@@ -7183,8 +7182,12 @@ package body Sem_Ch4 is\n                  and then not Is_Numeric_Type (Etype (R))\n                then\n                   if Address_Integer_Convert_OK (Etype (R), Etype (L)) then\n+                     Rewrite (L,\n+                       Unchecked_Convert_To (\n+                         Standard_Address, Relocate_Node (L)));\n                      Rewrite (R,\n-                       Unchecked_Convert_To (Etype (L), Relocate_Node (R)));\n+                       Unchecked_Convert_To (\n+                         Standard_Address, Relocate_Node (R)));\n \n                      if Nkind_In (N, N_Op_Ge, N_Op_Gt, N_Op_Le, N_Op_Lt) then\n                         Analyze_Comparison_Op (N);\n@@ -7202,7 +7205,11 @@ package body Sem_Ch4 is\n                then\n                   if Address_Integer_Convert_OK (Etype (L), Etype (R)) then\n                      Rewrite (L,\n-                       Unchecked_Convert_To (Etype (R), Relocate_Node (L)));\n+                       Unchecked_Convert_To (\n+                         Standard_Address, Relocate_Node (L)));\n+                     Rewrite (R,\n+                       Unchecked_Convert_To (\n+                         Standard_Address, Relocate_Node (R)));\n \n                      if Nkind_In (N, N_Op_Ge, N_Op_Gt, N_Op_Le, N_Op_Lt) then\n                         Analyze_Comparison_Op (N);\n@@ -7229,10 +7236,10 @@ package body Sem_Ch4 is\n                   begin\n                      Rewrite (L,\n                        Unchecked_Convert_To (\n-                         Standard_Integer, Relocate_Node (L)));\n+                         Standard_Address, Relocate_Node (L)));\n                      Rewrite (R,\n                        Unchecked_Convert_To (\n-                         Standard_Integer, Relocate_Node (R)));\n+                         Standard_Address, Relocate_Node (R)));\n \n                      if Nkind_In (N, N_Op_Ge, N_Op_Gt, N_Op_Le, N_Op_Lt) then\n                         Analyze_Comparison_Op (N);\n@@ -7330,8 +7337,12 @@ package body Sem_Ch4 is\n \n             elsif Nkind_In (N, N_Op_Eq, N_Op_Ne) then\n                if Address_Integer_Convert_OK (Etype (R), Etype (L)) then\n+                  Rewrite (L,\n+                    Unchecked_Convert_To (\n+                      Standard_Address, Relocate_Node (L)));\n                   Rewrite (R,\n-                    Unchecked_Convert_To (Etype (L), Relocate_Node (R)));\n+                    Unchecked_Convert_To (\n+                      Standard_Address, Relocate_Node (R)));\n                   Analyze_Equality_Op (N);\n                   return;\n "}, {"sha": "f3f7eb512d5b5c1f29169bbb12a5a6f50c763d68", "filename": "gcc/ada/stand.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/415c22da949f15a18c914588e4796b218ccf0db5/gcc%2Fada%2Fstand.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/415c22da949f15a18c914588e4796b218ccf0db5/gcc%2Fada%2Fstand.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstand.ads?ref=415c22da949f15a18c914588e4796b218ccf0db5", "patch": "@@ -468,7 +468,11 @@ package Stand is\n    --  Unsigned types with same Esize as corresponding signed integer types\n \n    Standard_Unsigned_64 : Entity_Id;\n-   --  An unsigned type, mod 2 ** 64, size of 64 bits.\n+   --  Entity for an unsigned type mod 2 ** 64, size of 64 bits.\n+\n+   Standard_Address : Entity_Id;\n+   --  Entity for an unsigned type mod 2 ** System_Address_Size, size of\n+   --  System_Address_Size bits. Used for implementing Allow_Integer_Address.\n \n    Abort_Signal : Entity_Id;\n    --  Entity for abort signal exception"}]}