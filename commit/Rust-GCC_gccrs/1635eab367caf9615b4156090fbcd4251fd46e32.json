{"sha": "1635eab367caf9615b4156090fbcd4251fd46e32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYzNWVhYjM2N2NhZjk2MTViNDE1NjA5MGZiY2Q0MjUxZmQ0NmUzMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-12-12T20:13:58Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-12-12T20:13:58Z"}, "message": "runtime: Fix defer of unlock thread at program startup.\n\nDon't free stack allocated defer block.  Also ensure we have a\nGo context in a few more places before freeing the block.\n\nFrom-SVN: r205940", "tree": {"sha": "cbc29f621fa3a047358c3f193f033b818d994793", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbc29f621fa3a047358c3f193f033b818d994793"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1635eab367caf9615b4156090fbcd4251fd46e32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1635eab367caf9615b4156090fbcd4251fd46e32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1635eab367caf9615b4156090fbcd4251fd46e32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1635eab367caf9615b4156090fbcd4251fd46e32/comments", "author": null, "committer": null, "parents": [{"sha": "96d91784e5de374f52094e00a1a63dc3f2f157e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96d91784e5de374f52094e00a1a63dc3f2f157e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96d91784e5de374f52094e00a1a63dc3f2f157e7"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "4c61ae7db2f26aaed0030fa4cce63179d98bad21", "filename": "libgo/runtime/go-defer.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1635eab367caf9615b4156090fbcd4251fd46e32/libgo%2Fruntime%2Fgo-defer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1635eab367caf9615b4156090fbcd4251fd46e32/libgo%2Fruntime%2Fgo-defer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-defer.c?ref=1635eab367caf9615b4156090fbcd4251fd46e32", "patch": "@@ -28,6 +28,7 @@ __go_defer (_Bool *frame, void (*pfn) (void *), void *arg)\n   n->__arg = arg;\n   n->__retaddr = NULL;\n   n->__makefunc_can_recover = 0;\n+  n->__free = 1;\n   g->defer = n;\n }\n \n@@ -59,7 +60,7 @@ __go_undefer (_Bool *frame)\n \t have a memory context.  Don't try to free anything in that\n \t case--the GC will release it later.  */\n       m = runtime_m ();\n-      if (m != NULL && m->mcache != NULL)\n+      if (m != NULL && m->mcache != NULL && d->__free)\n \t__go_free (d);\n \n       /* Since we are executing a defer function here, we know we are"}, {"sha": "d110a8766e3cdb26f53a6cbc6487c2c2082b9060", "filename": "libgo/runtime/go-defer.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1635eab367caf9615b4156090fbcd4251fd46e32/libgo%2Fruntime%2Fgo-defer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1635eab367caf9615b4156090fbcd4251fd46e32/libgo%2Fruntime%2Fgo-defer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-defer.h?ref=1635eab367caf9615b4156090fbcd4251fd46e32", "patch": "@@ -40,4 +40,8 @@ struct __go_defer_stack\n      function will be somewhere in libffi, so __retaddr is not\n      useful.  */\n   _Bool __makefunc_can_recover;\n+\n+  /* Set to true if this defer stack entry should be freed when\n+     done.  */\n+  _Bool __free;\n };"}, {"sha": "0cacbcd91cbb511b5e5a869140f76f345273b656", "filename": "libgo/runtime/go-panic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1635eab367caf9615b4156090fbcd4251fd46e32/libgo%2Fruntime%2Fgo-panic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1635eab367caf9615b4156090fbcd4251fd46e32/libgo%2Fruntime%2Fgo-panic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-panic.c?ref=1635eab367caf9615b4156090fbcd4251fd46e32", "patch": "@@ -102,7 +102,7 @@ __go_panic (struct __go_empty_interface arg)\n \t have a memory context.  Don't try to free anything in that\n \t case--the GC will release it later.  */\n       m = runtime_m ();\n-      if (m != NULL && m->mcache != NULL)\n+      if (m != NULL && m->mcache != NULL && d->__free)\n \t__go_free (d);\n     }\n "}, {"sha": "04b0a28607aa4d0ccdcef7df6f87e60349777290", "filename": "libgo/runtime/go-unwind.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1635eab367caf9615b4156090fbcd4251fd46e32/libgo%2Fruntime%2Fgo-unwind.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1635eab367caf9615b4156090fbcd4251fd46e32/libgo%2Fruntime%2Fgo-unwind.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unwind.c?ref=1635eab367caf9615b4156090fbcd4251fd46e32", "patch": "@@ -80,6 +80,7 @@ __go_check_defer (_Bool *frame)\n \t{\n \t  struct __go_defer_stack *d;\n \t  void (*pfn) (void *);\n+\t  M *m;\n \n \t  d = g->defer;\n \t  if (d == NULL || d->__frame != frame || d->__pfn == NULL)\n@@ -90,7 +91,9 @@ __go_check_defer (_Bool *frame)\n \n \t  (*pfn) (d->__arg);\n \n-\t  __go_free (d);\n+\t  m = runtime_m ();\n+\t  if (m != NULL && m->mcache != NULL && d->__free)\n+\t    __go_free (d);\n \n \t  if (n->__was_recovered)\n \t    {\n@@ -119,13 +122,17 @@ __go_check_defer (_Bool *frame)\n \t   && g->defer->__frame == frame)\n     {\n       struct __go_defer_stack *d;\n+      M *m;\n \n       /* This is the defer function which called recover.  Simply\n \t return to stop the stack unwind, and let the Go code continue\n \t to execute.  */\n       d = g->defer;\n       g->defer = d->__next;\n-      __go_free (d);\n+\n+      m = runtime_m ();\n+      if (m != NULL && m->mcache != NULL && d->__free)\n+\t__go_free (d);\n \n       /* We are returning from this function.  */\n       *frame = 1;"}, {"sha": "8fe321f6af2de675268a7ee3b246dd82db406d4e", "filename": "libgo/runtime/panic.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1635eab367caf9615b4156090fbcd4251fd46e32/libgo%2Fruntime%2Fpanic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1635eab367caf9615b4156090fbcd4251fd46e32/libgo%2Fruntime%2Fpanic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fpanic.c?ref=1635eab367caf9615b4156090fbcd4251fd46e32", "patch": "@@ -28,7 +28,8 @@ rundefer(void)\n \t\td->__pfn = nil;\n \t\tif (pfn != nil)\n \t\t\t(*pfn)(d->__arg);\n-\t\truntime_free(d);\n+\t\tif (d->__free)\n+\t\t  runtime_free(d);\n \t}\n }\n "}, {"sha": "8f54e51df35e0bc95fe62d5055547d649245e030", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1635eab367caf9615b4156090fbcd4251fd46e32/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1635eab367caf9615b4156090fbcd4251fd46e32/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=1635eab367caf9615b4156090fbcd4251fd46e32", "patch": "@@ -541,6 +541,7 @@ runtime_main(void* dummy __attribute__((unused)))\n \td.__retaddr = nil;\n \td.__makefunc_can_recover = 0;\n \td.__frame = &frame;\n+\td.__free = 0;\n \tg->defer = &d;\n \n \tif(m != &runtime_m0)"}]}