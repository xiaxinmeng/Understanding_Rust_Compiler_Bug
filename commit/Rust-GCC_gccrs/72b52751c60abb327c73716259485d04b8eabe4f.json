{"sha": "72b52751c60abb327c73716259485d04b8eabe4f", "node_id": "C_kwDOANBUbNoAKDcyYjUyNzUxYzYwYWJiMzI3YzczNzE2MjU5NDg1ZDA0YjhlYWJlNGY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-14T08:15:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-14T08:15:38Z"}, "message": "tree-vect-patterns: Fix up ICE in upper_bound [PR109115]\n\nAs mentioned in the PR, range_of_expr returns false if the type\nof the expression isn't suitable for corresponding range type,\nbut doesn't if the range is undefined for other reasons.  Still,\nlower/upper_bound is defined only for ranges which actually have\nat least one pair of subranges, VR_UNDEFINED range doesn't have it.\n\n2023-03-14  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/109115\n\t* tree-vect-patterns.cc (vect_recog_divmod_pattern): Don't use\n\tr.upper_bound () on r.undefined_p () range.\n\n\t* gcc.dg/pr109115.c: New test.", "tree": {"sha": "1e8e901f45edcc67068d449c9151804767f9d007", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e8e901f45edcc67068d449c9151804767f9d007"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72b52751c60abb327c73716259485d04b8eabe4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72b52751c60abb327c73716259485d04b8eabe4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72b52751c60abb327c73716259485d04b8eabe4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72b52751c60abb327c73716259485d04b8eabe4f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5159a1f1e91e03d4b82808a0062697318232543f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5159a1f1e91e03d4b82808a0062697318232543f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5159a1f1e91e03d4b82808a0062697318232543f"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "780477105ed3211adfa3715a44473d89d122b591", "filename": "gcc/testsuite/gcc.dg/pr109115.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72b52751c60abb327c73716259485d04b8eabe4f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr109115.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72b52751c60abb327c73716259485d04b8eabe4f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr109115.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr109115.c?ref=72b52751c60abb327c73716259485d04b8eabe4f", "patch": "@@ -0,0 +1,20 @@\n+/* PR tree-optimization/109115 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int a, b;\n+\n+int\n+main ()\n+{\n+  unsigned short c = a, e = -1;\n+  if (b)\n+    {\n+      unsigned d = (a ^ 1U) / a & c;\n+      int f = (~d >> ~a) / e;\n+      if (a)\n+\tf = a;\n+      a = f;\n+    }\n+  return 0;\n+}"}, {"sha": "8802141cd6edb298866025b8a55843eae1f0eb17", "filename": "gcc/tree-vect-patterns.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72b52751c60abb327c73716259485d04b8eabe4f/gcc%2Ftree-vect-patterns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72b52751c60abb327c73716259485d04b8eabe4f/gcc%2Ftree-vect-patterns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.cc?ref=72b52751c60abb327c73716259485d04b8eabe4f", "patch": "@@ -3973,7 +3973,7 @@ vect_recog_divmod_pattern (vec_info *vinfo,\n \t  /* Check that no overflow will occur.  If we don't have range\n \t     information we can't perform the optimization.  */\n \n-\t  if (ranger.range_of_expr (r, oprnd0, stmt))\n+\t  if (ranger.range_of_expr (r, oprnd0, stmt) && !r.undefined_p ())\n \t    {\n \t      wide_int max = r.upper_bound ();\n \t      wide_int one = wi::shwi (1, prec);"}]}