{"sha": "d6b612a76f77e7c9ae7712df9312bbcf4a92f048", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZiNjEyYTc2Zjc3ZTdjOWFlNzcxMmRmOTMxMmJiY2Y0YTkyZjA0OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-12-21T10:37:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-12-21T10:37:11Z"}, "message": "re PR target/88547 (missed optimization for vector comparisons)\n\n\tPR target/88547\n\t* config/i386/i386.c (ix86_expand_int_sse_cmp): Optimize\n\tx > y ? 0 : -1 into min (x, y) == x ? -1 : 0.\n\n\t* gcc.target/i386/pr88547-1.c: Expect only 2 knotb and 2 knotw\n\tinsns instead of 4, check for vpminud, vpminuq and no vpsubd or\n\tvpsubq.\n\t* gcc.target/i386/sse2-pr88547-1.c: New test.\n\t* gcc.target/i386/sse2-pr88547-2.c: New test.\n\t* gcc.target/i386/sse4_1-pr88547-1.c: New test.\n\t* gcc.target/i386/sse4_1-pr88547-2.c: New test.\n\t* gcc.target/i386/avx2-pr88547-1.c: New test.\n\t* gcc.target/i386/avx2-pr88547-2.c: New test.\n\t* gcc.target/i386/avx512f-pr88547-2.c: New test.\n\t* gcc.target/i386/avx512vl-pr88547-1.c: New test.\n\t* gcc.target/i386/avx512vl-pr88547-2.c: New test.\n\t* gcc.target/i386/avx512vl-pr88547-3.c: New test.\n\t* gcc.target/i386/avx512f_cond_move.c (y): Change from unsigned int\n\tarray to int array.\n\nFrom-SVN: r267322", "tree": {"sha": "910352153ed156492ad084f92249f0efd6be8f32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/910352153ed156492ad084f92249f0efd6be8f32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6b612a76f77e7c9ae7712df9312bbcf4a92f048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b612a76f77e7c9ae7712df9312bbcf4a92f048", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6b612a76f77e7c9ae7712df9312bbcf4a92f048", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10d26d9dd2653c251a1c182ceac21baaeb45e83e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10d26d9dd2653c251a1c182ceac21baaeb45e83e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10d26d9dd2653c251a1c182ceac21baaeb45e83e"}], "stats": {"total": 705, "additions": 702, "deletions": 3}, "files": [{"sha": "7f09e0066fb362408a14146c0c3b2b0914389cc7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6b612a76f77e7c9ae7712df9312bbcf4a92f048", "patch": "@@ -1,3 +1,9 @@\n+2018-12-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/88547\n+\t* config/i386/i386.c (ix86_expand_int_sse_cmp): Optimize\n+\tx > y ? 0 : -1 into min (x, y) == x ? -1 : 0.\n+\n 2018-12-21  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/i386/sse.md (vaesdec_<mode>, vaesdeclast_<mode>): Allow"}, {"sha": "02e24bc5796dc4d96eacc07fc6699bd6a012cedf", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d6b612a76f77e7c9ae7712df9312bbcf4a92f048", "patch": "@@ -24126,6 +24126,104 @@ ix86_expand_int_sse_cmp (rtx dest, enum rtx_code code, rtx cop0, rtx cop1,\n \t    }\n \t}\n \n+      rtx optrue = op_true ? op_true : CONSTM1_RTX (data_mode);\n+      rtx opfalse = op_false ? op_false : CONST0_RTX (data_mode);\n+      if (*negate)\n+\tstd::swap (optrue, opfalse);\n+\n+      /* Transform x > y ? 0 : -1 (i.e. x <= y ? -1 : 0 or x <= y) when\n+\t not using integer masks into min (x, y) == x ? -1 : 0 (i.e.\n+\t min (x, y) == x).  While we add one instruction (the minimum),\n+\t we remove the need for two instructions in the negation, as the\n+\t result is done this way.\n+\t When using masks, do it for SI/DImode element types, as it is shorter\n+\t than the two subtractions.  */\n+      if ((code != EQ\n+\t   && GET_MODE_SIZE (mode) != 64\n+\t   && vector_all_ones_operand (opfalse, data_mode)\n+\t   && optrue == CONST0_RTX (data_mode))\n+\t  || (code == GTU\n+\t      && GET_MODE_SIZE (GET_MODE_INNER (mode)) >= 4\n+\t      /* Don't do it if not using integer masks and we'd end up with\n+\t\t the right values in the registers though.  */\n+\t      && (GET_MODE_SIZE (mode) == 64\n+\t\t  || !vector_all_ones_operand (optrue, data_mode)\n+\t\t  || opfalse != CONST0_RTX (data_mode))))\n+\t{\n+\t  rtx (*gen) (rtx, rtx, rtx) = NULL;\n+\n+\t  switch (mode)\n+\t    {\n+\t    case E_V16SImode:\n+\t      gen = (code == GTU) ? gen_uminv16si3 : gen_sminv16si3;\n+\t      break;\n+\t    case E_V8DImode:\n+\t      gen = (code == GTU) ? gen_uminv8di3 : gen_sminv8di3;\n+\t      cop0 = force_reg (mode, cop0);\n+\t      cop1 = force_reg (mode, cop1);\n+\t      break;\n+\t    case E_V32QImode:\n+\t      if (TARGET_AVX2)\n+\t\tgen = (code == GTU) ? gen_uminv32qi3 : gen_sminv32qi3;\n+\t      break;\n+\t    case E_V16HImode:\n+\t      if (TARGET_AVX2)\n+\t\tgen = (code == GTU) ? gen_uminv16hi3 : gen_sminv16hi3;\n+\t      break;\n+\t    case E_V8SImode:\n+\t      if (TARGET_AVX2)\n+\t\tgen = (code == GTU) ? gen_uminv8si3 : gen_sminv8si3;\n+\t      break;\n+\t    case E_V4DImode:\n+\t      if (TARGET_AVX512VL)\n+\t\t{\n+\t\t  gen = (code == GTU) ? gen_uminv4di3 : gen_sminv4di3;\n+\t\t  cop0 = force_reg (mode, cop0);\n+\t\t  cop1 = force_reg (mode, cop1);\n+\t\t}\n+\t      break;\n+\t    case E_V16QImode:\n+\t      if (code == GTU && TARGET_SSE2)\n+\t\tgen = gen_uminv16qi3;\n+\t      else if (code == GT && TARGET_SSE4_1)\n+\t\tgen = gen_sminv16qi3;\n+\t      break;\n+\t    case E_V8HImode:\n+\t      if (code == GTU && TARGET_SSE4_1)\n+\t\tgen = gen_uminv8hi3;\n+\t      else if (code == GT && TARGET_SSE2)\n+\t\tgen = gen_sminv8hi3;\n+\t      break;\n+\t    case E_V4SImode:\n+\t      if (TARGET_SSE4_1)\n+\t\tgen = (code == GTU) ? gen_uminv4si3 : gen_sminv4si3;\n+\t      break;\n+\t    case E_V2DImode:\n+\t      if (TARGET_AVX512VL)\n+\t\t{\n+\t\t  gen = (code == GTU) ? gen_uminv2di3 : gen_sminv2di3;\n+\t\t  cop0 = force_reg (mode, cop0);\n+\t\t  cop1 = force_reg (mode, cop1);\n+\t\t}\n+\t      break;\n+\t    default:\n+\t      break;\n+\t    }\n+\n+\t  if (gen)\n+\t    {\n+\t      rtx tem = gen_reg_rtx (mode);\n+\t      if (!vector_operand (cop0, mode))\n+\t\tcop0 = force_reg (mode, cop0);\n+\t      if (!vector_operand (cop1, mode))\n+\t\tcop1 = force_reg (mode, cop1);\n+\t      *negate = !*negate;\n+\t      emit_insn (gen (tem, cop0, cop1));\n+\t      cop1 = tem;\n+\t      code = EQ;\n+\t    }\n+\t}\n+\n       /* Unsigned parallel compare is not supported by the hardware.\n \t Play some tricks to turn this into a signed comparison\n \t against 0.  */"}, {"sha": "dcac93bb27507a3c432cb335c40528b19f9b408a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d6b612a76f77e7c9ae7712df9312bbcf4a92f048", "patch": "@@ -1,3 +1,22 @@\n+2018-12-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/88547\n+\t* gcc.target/i386/pr88547-1.c: Expect only 2 knotb and 2 knotw\n+\tinsns instead of 4, check for vpminud, vpminuq and no vpsubd or\n+\tvpsubq.\n+\t* gcc.target/i386/sse2-pr88547-1.c: New test.\n+\t* gcc.target/i386/sse2-pr88547-2.c: New test.\n+\t* gcc.target/i386/sse4_1-pr88547-1.c: New test.\n+\t* gcc.target/i386/sse4_1-pr88547-2.c: New test.\n+\t* gcc.target/i386/avx2-pr88547-1.c: New test.\n+\t* gcc.target/i386/avx2-pr88547-2.c: New test.\n+\t* gcc.target/i386/avx512f-pr88547-2.c: New test.\n+\t* gcc.target/i386/avx512vl-pr88547-1.c: New test.\n+\t* gcc.target/i386/avx512vl-pr88547-2.c: New test.\n+\t* gcc.target/i386/avx512vl-pr88547-3.c: New test.\n+\t* gcc.target/i386/avx512f_cond_move.c (y): Change from unsigned int\n+\tarray to int array.\n+\n 2018-12-20  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/88196 - ICE with class non-type template parameter."}, {"sha": "7da657f78482f9624f8eb5b935938bc8d5951372", "filename": "gcc/testsuite/gcc.target/i386/avx2-pr88547-1.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr88547-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr88547-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr88547-1.c?ref=d6b612a76f77e7c9ae7712df9312bbcf4a92f048", "patch": "@@ -0,0 +1,115 @@\n+/* PR target/88547 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2 -mno-xop -mno-avx512f\" } */\n+/* { dg-final { scan-assembler-not \"vpmingt\\[bwd]\\[\\t ]\" } } */\n+/* { dg-final { scan-assembler-times \"vpminub\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpminsb\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpminuw\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpminsw\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpminud\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpminsd\\[\\t ]\" 2 } } */\n+\n+typedef signed char v32qi __attribute__((vector_size(32)));\n+typedef unsigned char v32uqi __attribute__((vector_size(32)));\n+typedef short v16hi __attribute__((vector_size(32)));\n+typedef unsigned short v16uhi __attribute__((vector_size(32)));\n+typedef int v8si __attribute__((vector_size(32)));\n+typedef unsigned v8usi __attribute__((vector_size(32)));\n+typedef long long v4di __attribute__((vector_size(32)));\n+typedef unsigned long long v4udi __attribute__((vector_size(32)));\n+\n+__attribute__((noipa)) v32qi\n+f1 (v32qi x, v32qi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v32uqi\n+f2 (v32uqi x, v32uqi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v32qi\n+f3 (v32qi x, v32qi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v32uqi\n+f4 (v32uqi x, v32uqi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v16hi\n+f5 (v16hi x, v16hi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v16uhi\n+f6 (v16uhi x, v16uhi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v16hi\n+f7 (v16hi x, v16hi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v16uhi\n+f8 (v16uhi x, v16uhi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v8si\n+f9 (v8si x, v8si y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v8usi\n+f10 (v8usi x, v8usi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v8si\n+f11 (v8si x, v8si y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v8usi\n+f12 (v8usi x, v8usi y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v4di\n+f13 (v4di x, v4di y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v4udi\n+f14 (v4udi x, v4udi y)\n+{\n+  return x <= y;\n+}\n+\n+__attribute__((noipa)) v4di\n+f15 (v4di x, v4di y)\n+{\n+  return x >= y;\n+}\n+\n+__attribute__((noipa)) v4udi\n+f16 (v4udi x, v4udi y)\n+{\n+  return x >= y;\n+}"}, {"sha": "6450ab02e23950c8f8aaabe358032c721c1d2d53", "filename": "gcc/testsuite/gcc.target/i386/avx2-pr88547-2.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr88547-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr88547-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr88547-2.c?ref=d6b612a76f77e7c9ae7712df9312bbcf4a92f048", "patch": "@@ -0,0 +1,90 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+#ifndef CHECK\n+#define CHECK \"avx2-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx2_test\n+#endif\n+\n+#include CHECK\n+\n+#include \"avx2-pr88547-1.c\"\n+\n+#define NUM 256\n+\n+#define TEST_SIGNED(vtype, type, N, fn, op) \\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    union { vtype x[NUM / N]; type i[NUM]; } dst, src1, src2;\t\\\n+    int i, sign = 1;\t\t\t\t\t\t\\\n+    type res;\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tsrc1.i[i] = i * i * sign;\t\t\t\t\\\n+\tsrc2.i[i] = (i + 20) * sign;\t\t\t\t\\\n+\tsign = -sign;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i += N)\t\t\t\t\\\n+      dst.x[i / N] = fn (src1.x[i / N], src2.x[i / N]);\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tres = src1.i[i] op src2.i[i] ? -1 : 0;\t\t\t\\\n+\tif (res != dst.i[i])\t\t\t\t\t\\\n+\t  abort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+#define TEST_UNSIGNED(vtype, type, N, fn, op) \\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    union { vtype x[NUM / N]; type i[NUM]; } dst, src1, src2;\t\\\n+    int i;\t\t\t\t\t\t\t\\\n+    type res;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tsrc1.i[i] = i * i;\t\t\t\t\t\\\n+\tsrc2.i[i] = i + 20;\t\t\t\t\t\\\n+\tif ((i % 4))\t\t\t\t\t\t\\\n+\t  src2.i[i] |= (1ULL << (sizeof (type)\t\t\t\\\n+\t\t\t\t * __CHAR_BIT__ - 1));\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i += N)\t\t\t\t\\\n+      dst.x[i / N] = fn (src1.x[i / N], src2.x[i / N]);\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tres = src1.i[i] op src2.i[i] ? -1 : 0;\t\t\t\\\n+\tif (res != dst.i[i])\t\t\t\t\t\\\n+\t  abort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+static void\n+TEST (void)\n+{\n+  TEST_SIGNED (v32qi, signed char, 32, f1, <=);\n+  TEST_UNSIGNED (v32uqi, unsigned char, 32, f2, <=);\n+  TEST_SIGNED (v32qi, signed char, 32, f3, >=);\n+  TEST_UNSIGNED (v32uqi, unsigned char, 32, f4, >=);\n+  TEST_SIGNED (v16hi, short int, 16, f5, <=);\n+  TEST_UNSIGNED (v16uhi, unsigned short int, 16, f6, <=);\n+  TEST_SIGNED (v16hi, short int, 16, f7, >=);\n+  TEST_UNSIGNED (v16uhi, unsigned short int, 16, f8, >=);\n+  TEST_SIGNED (v8si, int, 8, f9, <=);\n+  TEST_UNSIGNED (v8usi, unsigned int, 8, f10, <=);\n+  TEST_SIGNED (v8si, int, 8, f11, >=);\n+  TEST_UNSIGNED (v8usi, unsigned int, 8, f12, >=);\n+  TEST_SIGNED (v4di, long long int, 4, f13, <=);\n+  TEST_UNSIGNED (v4udi, unsigned long long int, 4, f14, <=);\n+  TEST_SIGNED (v4di, long long int, 4, f15, >=);\n+  TEST_UNSIGNED (v4udi, unsigned long long int, 4, f16, >=);\n+}"}, {"sha": "25be5004f359fac53e222ee89b2b5a0d1fcc7335", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr88547-2.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr88547-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr88547-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr88547-2.c?ref=d6b612a76f77e7c9ae7712df9312bbcf4a92f048", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+\n+#include \"avx512-check.h\"\n+\n+#include \"pr88547-1.c\"\n+\n+#define NUM 512\n+\n+#define TEST_SIGNED(vtype, type, N, fn, op) \\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    union { vtype x[NUM / N]; type i[NUM]; } dst, src1, src2;\t\\\n+    int i, sign = 1;\t\t\t\t\t\t\\\n+    type res;\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tsrc1.i[i] = i * i * sign;\t\t\t\t\\\n+\tsrc2.i[i] = (i + 20) * sign;\t\t\t\t\\\n+\tsign = -sign;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i += N)\t\t\t\t\\\n+      dst.x[i / N] = fn (src1.x[i / N], src2.x[i / N]);\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tres = src1.i[i] op src2.i[i] ? -1 : 0;\t\t\t\\\n+\tif (res != dst.i[i])\t\t\t\t\t\\\n+\t  abort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+#define TEST_UNSIGNED(vtype, type, N, fn, op) \\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    union { vtype x[NUM / N]; type i[NUM]; } dst, src1, src2;\t\\\n+    int i;\t\t\t\t\t\t\t\\\n+    type res;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tsrc1.i[i] = i * i;\t\t\t\t\t\\\n+\tsrc2.i[i] = i + 20;\t\t\t\t\t\\\n+\tif ((i % 4))\t\t\t\t\t\t\\\n+\t  src2.i[i] |= (1ULL << (sizeof (type)\t\t\t\\\n+\t\t\t\t * __CHAR_BIT__ - 1));\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i += N)\t\t\t\t\\\n+      dst.x[i / N] = fn (src1.x[i / N], src2.x[i / N]);\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tres = src1.i[i] op src2.i[i] ? -1 : 0;\t\t\t\\\n+\tif (res != dst.i[i])\t\t\t\t\t\\\n+\t  abort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+static void\n+test_512 (void)\n+{\n+  TEST_SIGNED (v64qi, signed char, 64, f1, <=);\n+  TEST_UNSIGNED (v64uqi, unsigned char, 64, f2, <=);\n+  TEST_SIGNED (v64qi, signed char, 64, f3, >=);\n+  TEST_UNSIGNED (v64uqi, unsigned char, 64, f4, >=);\n+  TEST_SIGNED (v32hi, short int, 32, f5, <=);\n+  TEST_UNSIGNED (v32uhi, unsigned short int, 32, f6, <=);\n+  TEST_SIGNED (v32hi, short int, 32, f7, >=);\n+  TEST_UNSIGNED (v32uhi, unsigned short int, 32, f8, >=);\n+  TEST_SIGNED (v16si, int, 16, f9, <=);\n+  TEST_UNSIGNED (v16usi, unsigned int, 16, f10, <=);\n+  TEST_SIGNED (v16si, int, 16, f11, >=);\n+  TEST_UNSIGNED (v16usi, unsigned int, 16, f12, >=);\n+  TEST_SIGNED (v8di, long long int, 8, f13, <=);\n+  TEST_UNSIGNED (v8udi, unsigned long long int, 8, f14, <=);\n+  TEST_SIGNED (v8di, long long int, 8, f15, >=);\n+  TEST_UNSIGNED (v8udi, unsigned long long int, 8, f16, >=);\n+}"}, {"sha": "99a89f51202cc692d4797761fa5d61875beed5f2", "filename": "gcc/testsuite/gcc.target/i386/avx512f_cond_move.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f_cond_move.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f_cond_move.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f_cond_move.c?ref=d6b612a76f77e7c9ae7712df9312bbcf4a92f048", "patch": "@@ -3,7 +3,7 @@\n /* { dg-final { scan-assembler-times \"(?:vpblendmd|vmovdqa32)\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 8 } } */\n \n unsigned int x[128];\n-unsigned int y[128];\n+int y[128];\n \n void\n foo () "}, {"sha": "aa64dc2f06e723c42b72b5d301df6a4a5f77f0a2", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr88547-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr88547-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr88547-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr88547-1.c?ref=d6b612a76f77e7c9ae7712df9312bbcf4a92f048", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/88547 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-xop -mavx512vl -mno-avx512bw -mno-avx512dq\" } */\n+/* { dg-final { scan-assembler-not \"vpmingt\\[bwdq]\\[\\t ]\" } } */\n+/* { dg-final { scan-assembler-times \"vpminub\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpminsb\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpminuw\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpminsw\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpminud\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpminsd\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpminuq\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpminsq\\[\\t ]\" 2 } } */\n+\n+#include \"avx2-pr88547-1.c\""}, {"sha": "86319152b9efef0e0d6bbaf5eb892acd12179940", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr88547-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr88547-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr88547-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr88547-2.c?ref=d6b612a76f77e7c9ae7712df9312bbcf4a92f048", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+/* { dg-require-effective-target avx512dq } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512BW\n+#define AVX512DQ\n+\n+#include \"avx512f-pr88547-2.c\"\n+\n+static void\n+test_256 (void)\n+{\n+  test_512 ();\n+}\n+\n+static void\n+test_128 (void)\n+{\n+}"}, {"sha": "cf6f3a495330eb30ab49241f6fd31be2b269b850", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr88547-3.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr88547-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr88547-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr88547-3.c?ref=d6b612a76f77e7c9ae7712df9312bbcf4a92f048", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+/* { dg-require-effective-target avx512dq } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw -mavx512dq\" } */\n+\n+#define AVX512VL\n+#define AVX512BW\n+#define AVX512DQ\n+#define CHECK \"avx512-check.h\"\n+#define TEST test_512\n+\n+#include \"avx2-pr88547-2.c\"\n+\n+static void\n+test_256 (void)\n+{\n+  return test_512 ();\n+}\n+\n+static void\n+test_128 (void)\n+{\n+}"}, {"sha": "b6c82157bba6605c2ae2859f328157bebf8f87b2", "filename": "gcc/testsuite/gcc.target/i386/pr88547-1.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88547-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88547-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88547-1.c?ref=d6b612a76f77e7c9ae7712df9312bbcf4a92f048", "patch": "@@ -6,10 +6,14 @@\n /* { dg-final { scan-assembler-times \"vpmovm2w\\[\\t  ]\" 4 } } */\n /* { dg-final { scan-assembler-times \"vpmovm2d\\[\\t  ]\" 4 } } */\n /* { dg-final { scan-assembler-times \"vpmovm2q\\[\\t  ]\" 4 } } */\n-/* { dg-final { scan-assembler-times \"knotb\\[\\t  ]\" 4 } } */\n-/* { dg-final { scan-assembler-times \"knotw\\[\\t  ]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"knotb\\[\\t  ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"knotw\\[\\t  ]\" 2 } } */\n /* { dg-final { scan-assembler-times \"knotd\\[\\t  ]\" 2 } } */\n /* { dg-final { scan-assembler-times \"knotq\\[\\t  ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpminud\\[\\t  ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpminuq\\[\\t  ]\" 2 } } */\n+/* { dg-final { scan-assembler-not \"vpsubd\\[\\t  ]\" } } */\n+/* { dg-final { scan-assembler-not \"vpsubq\\[\\t  ]\" } } */\n \n typedef signed char v64qi __attribute__((vector_size(64)));\n typedef unsigned char v64uqi __attribute__((vector_size(64)));"}, {"sha": "957b21f2fd34e1415638d15f12c782c69eeedabf", "filename": "gcc/testsuite/gcc.target/i386/sse2-pr88547-1.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr88547-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr88547-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr88547-1.c?ref=d6b612a76f77e7c9ae7712df9312bbcf4a92f048", "patch": "@@ -0,0 +1,115 @@\n+/* PR target/88547 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -mno-sse3\" } */\n+/* { dg-final { scan-assembler-not \"pmingtw\\[\\t ]\" } } */\n+/* { dg-final { scan-assembler-times \"pminub\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"pminsw\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-not \"pminsb\\[\\t ]\" } } */\n+/* { dg-final { scan-assembler-not \"pminuw\\[\\t ]\" } } */\n+/* { dg-final { scan-assembler-not \"pminud\\[\\t ]\" } } */\n+/* { dg-final { scan-assembler-not \"pminuq\\[\\t ]\" } } */\n+\n+typedef signed char v16qi __attribute__((vector_size(16)));\n+typedef unsigned char v16uqi __attribute__((vector_size(16)));\n+typedef short v8hi __attribute__((vector_size(16)));\n+typedef unsigned short v8uhi __attribute__((vector_size(16)));\n+typedef int v4si __attribute__((vector_size(16)));\n+typedef unsigned v4usi __attribute__((vector_size(16)));\n+typedef long long v2di __attribute__((vector_size(16)));\n+typedef unsigned long long v2udi __attribute__((vector_size(16)));\n+\n+v16qi\n+f1 (v16qi x, v16qi y)\n+{\n+  return x <= y;\n+}\n+\n+v16uqi\n+f2 (v16uqi x, v16uqi y)\n+{\n+  return x <= y;\n+}\n+\n+v16qi\n+f3 (v16qi x, v16qi y)\n+{\n+  return x >= y;\n+}\n+\n+v16uqi\n+f4 (v16uqi x, v16uqi y)\n+{\n+  return x >= y;\n+}\n+\n+v8hi\n+f5 (v8hi x, v8hi y)\n+{\n+  return x <= y;\n+}\n+\n+v8uhi\n+f6 (v8uhi x, v8uhi y)\n+{\n+  return x <= y;\n+}\n+\n+v8hi\n+f7 (v8hi x, v8hi y)\n+{\n+  return x >= y;\n+}\n+\n+v8uhi\n+f8 (v8uhi x, v8uhi y)\n+{\n+  return x >= y;\n+}\n+\n+v4si\n+f9 (v4si x, v4si y)\n+{\n+  return x <= y;\n+}\n+\n+v4usi\n+f10 (v4usi x, v4usi y)\n+{\n+  return x <= y;\n+}\n+\n+v4si\n+f11 (v4si x, v4si y)\n+{\n+  return x >= y;\n+}\n+\n+v4usi\n+f12 (v4usi x, v4usi y)\n+{\n+  return x >= y;\n+}\n+\n+v2di\n+f13 (v2di x, v2di y)\n+{\n+  return x <= y;\n+}\n+\n+v2udi\n+f14 (v2udi x, v2udi y)\n+{\n+  return x <= y;\n+}\n+\n+v2di\n+f15 (v2di x, v2di y)\n+{\n+  return x >= y;\n+}\n+\n+v2udi\n+f16 (v2udi x, v2udi y)\n+{\n+  return x >= y;\n+}"}, {"sha": "efdcee0df0188c03dc83849e6ececa15ab252a91", "filename": "gcc/testsuite/gcc.target/i386/sse2-pr88547-2.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr88547-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr88547-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr88547-2.c?ref=d6b612a76f77e7c9ae7712df9312bbcf4a92f048", "patch": "@@ -0,0 +1,90 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse2 } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse2_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include \"sse2-pr88547-1.c\"\n+\n+#define NUM 256\n+\n+#define TEST_SIGNED(vtype, type, N, fn, op) \\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    union { vtype x[NUM / N]; type i[NUM]; } dst, src1, src2;\t\\\n+    int i, sign = 1;\t\t\t\t\t\t\\\n+    type res;\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tsrc1.i[i] = i * i * sign;\t\t\t\t\\\n+\tsrc2.i[i] = (i + 20) * sign;\t\t\t\t\\\n+\tsign = -sign;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i += N)\t\t\t\t\\\n+      dst.x[i / N] = fn (src1.x[i / N], src2.x[i / N]);\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tres = src1.i[i] op src2.i[i] ? -1 : 0;\t\t\t\\\n+\tif (res != dst.i[i])\t\t\t\t\t\\\n+\t  abort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+#define TEST_UNSIGNED(vtype, type, N, fn, op) \\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    union { vtype x[NUM / N]; type i[NUM]; } dst, src1, src2;\t\\\n+    int i;\t\t\t\t\t\t\t\\\n+    type res;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tsrc1.i[i] = i * i;\t\t\t\t\t\\\n+\tsrc2.i[i] = i + 20;\t\t\t\t\t\\\n+\tif ((i % 4))\t\t\t\t\t\t\\\n+\t  src2.i[i] |= (1ULL << (sizeof (type)\t\t\t\\\n+\t\t\t\t * __CHAR_BIT__ - 1));\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i += N)\t\t\t\t\\\n+      dst.x[i / N] = fn (src1.x[i / N], src2.x[i / N]);\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    for (i = 0; i < NUM; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tres = src1.i[i] op src2.i[i] ? -1 : 0;\t\t\t\\\n+\tif (res != dst.i[i])\t\t\t\t\t\\\n+\t  abort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+static void\n+TEST (void)\n+{\n+  TEST_SIGNED (v16qi, signed char, 16, f1, <=);\n+  TEST_UNSIGNED (v16uqi, unsigned char, 16, f2, <=);\n+  TEST_SIGNED (v16qi, signed char, 16, f3, >=);\n+  TEST_UNSIGNED (v16uqi, unsigned char, 16, f4, >=);\n+  TEST_SIGNED (v8hi, short int, 8, f5, <=);\n+  TEST_UNSIGNED (v8uhi, unsigned short int, 8, f6, <=);\n+  TEST_SIGNED (v8hi, short int, 8, f7, >=);\n+  TEST_UNSIGNED (v8uhi, unsigned short int, 8, f8, >=);\n+  TEST_SIGNED (v4si, int, 4, f9, <=);\n+  TEST_UNSIGNED (v4usi, unsigned int, 4, f10, <=);\n+  TEST_SIGNED (v4si, int, 4, f11, >=);\n+  TEST_UNSIGNED (v4usi, unsigned int, 4, f12, >=);\n+  TEST_SIGNED (v2di, long long int, 2, f13, <=);\n+  TEST_UNSIGNED (v2udi, unsigned long long int, 2, f14, <=);\n+  TEST_SIGNED (v2di, long long int, 2, f15, >=);\n+  TEST_UNSIGNED (v2udi, unsigned long long int, 2, f16, >=);\n+}"}, {"sha": "362b962ee674a220d4139454b55251064591a164", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pr88547-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pr88547-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pr88547-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pr88547-1.c?ref=d6b612a76f77e7c9ae7712df9312bbcf4a92f048", "patch": "@@ -0,0 +1,12 @@\n+/* PR target/88547 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse4.1 -mno-sse4.2\" } */\n+/* { dg-final { scan-assembler-not \"pmingt\\[bwd]\\[\\t ]\" } } */\n+/* { dg-final { scan-assembler-times \"pminub\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"pminsb\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"pminuw\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"pminsw\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"pminud\\[\\t ]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"pminsd\\[\\t ]\" 2 } } */\n+\n+#include \"sse2-pr88547-1.c\""}, {"sha": "f903155113f58a6f31db42d61b81ac052dfedf5f", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-pr88547-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pr88547-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6b612a76f77e7c9ae7712df9312bbcf4a92f048/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pr88547-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-pr88547-2.c?ref=d6b612a76f77e7c9ae7712df9312bbcf4a92f048", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#define CHECK_H \"sse4_1-check.h\"\n+#define TEST sse4_1_test\n+\n+#include \"sse2-pr88547-2.c\""}]}