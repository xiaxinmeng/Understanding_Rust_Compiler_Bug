{"sha": "9ac121af2a23ff86838f619ae58a6be7cf16d605", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFjMTIxYWYyYTIzZmY4NjgzOGY2MTlhZTU4YTZiZTdjZjE2ZDYwNQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-02-22T03:08:47Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-02-22T03:08:47Z"}, "message": "Makefile.in (ggc-common.o): Depend on $(PARAMS_H)\n\n\t* Makefile.in (ggc-common.o): Depend on $(PARAMS_H)\n\t* doc/invoke.texi (ggc-min-expand, ggc-min-heapsize): Update\n\tdocumentation.\n\t* ggc-common.c: Include params.h\n\t(ggc_min_expand_heuristic, ggc_min_heapsize_heuristic,\n\tinit_ggc_heuristics): New functions.\n\t* ggc.h (ggc_min_expand_heuristic, ggc_min_heapsize_heuristic,\n\tinit_ggc_heuristics): Prototype.\n\t* toplev.c (print_version):  Output GGC heuristics.\n\t(parse_options_and_default_flags): Call init_ggc_heuristics.\n\nFrom-SVN: r63268", "tree": {"sha": "a4fedfbc4cbd08463a6d674fcb9176179935dd4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4fedfbc4cbd08463a6d674fcb9176179935dd4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ac121af2a23ff86838f619ae58a6be7cf16d605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac121af2a23ff86838f619ae58a6be7cf16d605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ac121af2a23ff86838f619ae58a6be7cf16d605", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac121af2a23ff86838f619ae58a6be7cf16d605/comments", "author": null, "committer": null, "parents": [{"sha": "453ee2313a9f013158f1c5ab8bd97cf495c5c270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/453ee2313a9f013158f1c5ab8bd97cf495c5c270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/453ee2313a9f013158f1c5ab8bd97cf495c5c270"}], "stats": {"total": 80, "additions": 74, "deletions": 6}, "files": [{"sha": "17655e6afa3d1b6eaaf96bd0a72f3ece45066540", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac121af2a23ff86838f619ae58a6be7cf16d605/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac121af2a23ff86838f619ae58a6be7cf16d605/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ac121af2a23ff86838f619ae58a6be7cf16d605", "patch": "@@ -1,3 +1,16 @@\n+2003-02-21  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (ggc-common.o): Depend on $(PARAMS_H)\n+\t* doc/invoke.texi (ggc-min-expand, ggc-min-heapsize): Update\n+\tdocumentation.\n+\t* ggc-common.c: Include params.h\n+\t(ggc_min_expand_heuristic, ggc_min_heapsize_heuristic,\n+\tinit_ggc_heuristics): New functions.\n+\t* ggc.h (ggc_min_expand_heuristic, ggc_min_heapsize_heuristic,\n+\tinit_ggc_heuristics): Prototype.\n+\t* toplev.c (print_version):  Output GGC heuristics.\n+\t(parse_options_and_default_flags): Call init_ggc_heuristics.\n+\n Sat Feb 22 02:35:07 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.c (def_builtin):  Special case 64bit builtins."}, {"sha": "e00b2883356e6cb49ab68d51404606615550bb50", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac121af2a23ff86838f619ae58a6be7cf16d605/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac121af2a23ff86838f619ae58a6be7cf16d605/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9ac121af2a23ff86838f619ae58a6be7cf16d605", "patch": "@@ -1375,7 +1375,7 @@ gtype-desc.o: gtype-desc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) varray.h\n \tssa.h cselib.h insn-addr.h\n \n ggc-common.o: ggc-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(GGC_H) \\\n-\t$(HASHTAB_H) toplev.h\n+\t$(HASHTAB_H) toplev.h $(PARAMS_H)\n \n ggc-simple.o: ggc-simple.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n \tflags.h $(GGC_H) varray.h $(TIMEVAR_H) $(TM_P_H) $(PARAMS_H)"}, {"sha": "69aef1491453f86aece918f6d70d6cc472c21283", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac121af2a23ff86838f619ae58a6be7cf16d605/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac121af2a23ff86838f619ae58a6be7cf16d605/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9ac121af2a23ff86838f619ae58a6be7cf16d605", "patch": "@@ -4473,7 +4473,9 @@ collector's heap should be allowed to expand between collections.\n Tuning this may improve compilation speed; it has no effect on code\n generation.\n \n-The default is 30%.  Setting this parameter and\n+The default is 30% + 70% * (RAM/1GB) with an upper bound of 100% when\n+RAM >= 1GB.  If GCC is not able to calculate RAM on a particular\n+platform, the lower bound of 30% is used.  Setting this parameter and\n @option{ggc-min-heapsize} to zero causes a full collection to occur at\n every opportunity.  This is extremely slow, but can be useful for\n debugging.\n@@ -4486,10 +4488,12 @@ by @option{ggc-min-expand}% beyond @option{ggc-min-heapsize}.  Again,\n tuning this may improve compilation speed, and has no effect on code\n generation.\n \n-The default is 4096 (four megabytes).  Setting this parameter very large\n-effectively disables garbage collection.  Setting this parameter and\n-@option{ggc-min-expand} to zero causes a full collection to occur at\n-every opportunity.  \n+The default is RAM/8, with a lower bound of 4096 (four megabytes) and an\n+upper bound of 131072 (128 megabytes).  If GCC is not able to calculate\n+RAM on a particular platform, the lower bound is used.  Setting this\n+parameter very large effectively disables garbage collection.  Setting\n+this parameter and @option{ggc-min-expand} to zero causes a full\n+collection to occur at every opportunity.\n \n @end table\n @end table"}, {"sha": "8a8f7ecd313ad29c8e3da888c5cdafbd6889c9e7", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac121af2a23ff86838f619ae58a6be7cf16d605/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac121af2a23ff86838f619ae58a6be7cf16d605/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=9ac121af2a23ff86838f619ae58a6be7cf16d605", "patch": "@@ -27,6 +27,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"hashtab.h\"\n #include \"ggc.h\"\n #include \"toplev.h\"\n+#include \"params.h\"\n \n #ifdef HAVE_MMAP_FILE\n # include <sys/mman.h>\n@@ -624,3 +625,43 @@ gt_pch_restore (f)\n \n   gt_pch_restore_stringpool ();\n }\n+\n+/* Heuristic to set a default for GGC_MIN_EXPAND.  */\n+int\n+ggc_min_expand_heuristic()\n+{\n+  double min_expand = physmem_total();\n+  \n+  /* The heuristic is a percentage equal to 30% + 70%*(RAM/1GB), yielding\n+     a lower bound of 30% and an upper bound of 100% (when RAM >= 1GB).  */\n+  min_expand /= 1024*1024*1024;\n+  min_expand *= 70;\n+  min_expand = MIN (min_expand, 70);\n+  min_expand += 30;\n+\n+  return min_expand;\n+}\n+\n+/* Heuristic to set a default for GGC_MIN_HEAPSIZE.  */\n+int\n+ggc_min_heapsize_heuristic()\n+{\n+  double min_heap_kbytes = physmem_total() / 1024;\n+  \n+  /* The heuristic is RAM/8, with a lower bound of 4M and an upper\n+     bound of 128M (when RAM >= 1GB).  */\n+  min_heap_kbytes /= 8;\n+  min_heap_kbytes = MAX (min_heap_kbytes, 4 * 1024);\n+  min_heap_kbytes = MIN (min_heap_kbytes, 128 * 1024);\n+\n+  return min_heap_kbytes;\n+}\n+\n+void\n+init_ggc_heuristics ()\n+{\n+#ifndef ENABLE_GC_ALWAYS_COLLECT\n+  set_param_value (\"ggc-min-expand\", ggc_min_expand_heuristic());\n+  set_param_value (\"ggc-min-heapsize\", ggc_min_heapsize_heuristic());\n+#endif\n+}"}, {"sha": "17b8e721c7daa5f244ba9784d36d968505c3feb3", "filename": "gcc/ggc.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac121af2a23ff86838f619ae58a6be7cf16d605/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac121af2a23ff86838f619ae58a6be7cf16d605/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=9ac121af2a23ff86838f619ae58a6be7cf16d605", "patch": "@@ -262,3 +262,8 @@ extern void ggc_print_common_statistics PARAMS ((FILE *, ggc_statistics *));\n /* Print allocation statistics.  */\n extern void ggc_print_statistics\tPARAMS ((void));\n extern void stringpool_statistics\tPARAMS ((void));\n+\n+/* Heuristics.  */\n+extern int ggc_min_expand_heuristic PARAMS ((void));\n+extern int ggc_min_heapsize_heuristic PARAMS ((void));\n+extern void init_ggc_heuristics PARAMS ((void));"}, {"sha": "44898525388c73f8c26482668baa020dc1751056", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac121af2a23ff86838f619ae58a6be7cf16d605/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac121af2a23ff86838f619ae58a6be7cf16d605/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=9ac121af2a23ff86838f619ae58a6be7cf16d605", "patch": "@@ -4638,6 +4638,8 @@ print_version (file, indent)\n      FILE *file;\n      const char *indent;\n {\n+  fnotice (file, \"GGC heuristics: --param ggc-min-expand=%d --param ggc-min-heapsize=%d\\n\",\n+\t   PARAM_VALUE (GGC_MIN_EXPAND), PARAM_VALUE (GGC_MIN_HEAPSIZE));\n #ifndef __VERSION__\n #define __VERSION__ \"[?]\"\n #endif\n@@ -4893,6 +4895,9 @@ parse_options_and_default_flags (argc, argv)\n   /* Register the language-independent parameters.  */\n   add_params (lang_independent_params, LAST_PARAM);\n \n+  /* This must be done after add_params but before argument processing.  */\n+  init_ggc_heuristics();\n+\n   /* Perform language-specific options initialization.  */\n   (*lang_hooks.init_options) ();\n "}]}