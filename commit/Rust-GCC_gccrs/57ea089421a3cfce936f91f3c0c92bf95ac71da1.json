{"sha": "57ea089421a3cfce936f91f3c0c92bf95ac71da1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdlYTA4OTQyMWEzY2ZjZTkzNmY5MWYzYzBjOTJiZjk1YWM3MWRhMQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-27T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-27T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "5d7ed05bedd55467a62a69181f11bf754a0e404b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d7ed05bedd55467a62a69181f11bf754a0e404b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57ea089421a3cfce936f91f3c0c92bf95ac71da1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ea089421a3cfce936f91f3c0c92bf95ac71da1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57ea089421a3cfce936f91f3c0c92bf95ac71da1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ea089421a3cfce936f91f3c0c92bf95ac71da1/comments", "author": null, "committer": null, "parents": [{"sha": "0c223b02b6e4dfbdeac9f1dcd64ee9d1cd04a5a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c223b02b6e4dfbdeac9f1dcd64ee9d1cd04a5a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c223b02b6e4dfbdeac9f1dcd64ee9d1cd04a5a2"}], "stats": {"total": 458, "additions": 457, "deletions": 1}, "files": [{"sha": "b023931686877fddf70dce344df626382f29027b", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ea089421a3cfce936f91f3c0c92bf95ac71da1/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ea089421a3cfce936f91f3c0c92bf95ac71da1/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=57ea089421a3cfce936f91f3c0c92bf95ac71da1", "patch": "@@ -1,3 +1,7 @@\n+2020-08-26  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* MAINTAINERS (Various Maintainers): Add myself as OpenACC maintainer.\n+\n 2020-08-20  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR bootstrap/96612"}, {"sha": "c906cb45b510ef95ff9cbd8e9ab02e0c539391b3", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ea089421a3cfce936f91f3c0c92bf95ac71da1/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ea089421a3cfce936f91f3c0c92bf95ac71da1/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=57ea089421a3cfce936f91f3c0c92bf95ac71da1", "patch": "@@ -1,3 +1,8 @@\n+2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* config-list.mk (LIST): Add OPT-enable-obsolete to tilegx-linux-gnu,\n+\ttilegxbe-linux-gnu, and tilepro-linux-gnu.\n+\n 2020-07-29  Martin Liska  <mliska@suse.cz>\n \n \t* git-backport.py: fix how are ChangeLog paths combined."}, {"sha": "9db853dcd447cb6108b4ccbe044f1db79faf99e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ea089421a3cfce936f91f3c0c92bf95ac71da1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ea089421a3cfce936f91f3c0c92bf95ac71da1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57ea089421a3cfce936f91f3c0c92bf95ac71da1", "patch": "@@ -1,3 +1,136 @@\n+2020-08-26  G\u00f6ran Uddeborg  <goeran@uddeborg.se>\n+\n+\tPR gcov-profile/96285\n+\t* common.opt, doc/invoke.texi: Clarify wording of\n+\t-fprofile-exclude-files and adjust -fprofile-filter-files to\n+\tmatch.\n+\n+2020-08-26  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/96802\n+\t* config/i386/i386-options.c (ix86_valid_target_attribute_inner_p):\n+\tReject target(\"no-general-regs-only\").\n+\n+2020-08-26  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/constraints.md (K): Change unused constraint to\n+\tconstraint to a const_int between 1 and 19.\n+\t(P): New constraint.\n+\t* config/msp430/msp430-protos.h (msp430x_logical_shift_right): Remove.\n+\t(msp430_expand_shift): New.\n+\t(msp430_output_asm_shift_insns): New.\n+\t* config/msp430/msp430.c (msp430_rtx_costs): Remove shift costs.\n+\t(CSH): Remove.\n+\t(msp430_expand_helper): Remove hard-coded generation of some inline\n+\tshift insns.\n+\t(use_helper_for_const_shift): New.\n+\t(msp430_expand_shift): New.\n+\t(msp430_output_asm_shift_insns): New.\n+\t(msp430_print_operand): Add new 'W' operand selector.\n+\t(msp430x_logical_shift_right): Remove.\n+\t* config/msp430/msp430.md (HPSI): New define_mode_iterator.\n+\t(HDI): Likewise.\n+\t(any_shift): New define_code_iterator.\n+\t(shift_insn): New define_code_attr.\n+\tAdjust unnamed insn patterns searched for by combine.\n+\t(ashlhi3): Remove.\n+\t(slli_1): Remove.\n+\t(430x_shift_left): Remove.\n+\t(slll_1): Remove.\n+\t(slll_2): Remove.\n+\t(ashlsi3): Remove.\n+\t(ashldi3): Remove.\n+\t(ashrhi3): Remove.\n+\t(srai_1): Remove.\n+\t(430x_arithmetic_shift_right): Remove.\n+\t(srap_1): Remove.\n+\t(srap_2): Remove.\n+\t(sral_1): Remove.\n+\t(sral_2): Remove.\n+\t(ashrsi3): Remove.\n+\t(ashrdi3): Remove.\n+\t(lshrhi3): Remove.\n+\t(srli_1): Remove.\n+\t(430x_logical_shift_right): Remove.\n+\t(srlp_1): Remove.\n+\t(srll_1): Remove.\n+\t(srll_2x): Remove.\n+\t(lshrsi3): Remove.\n+\t(lshrdi3): Remove.\n+\t(<shift_insn><mode>3): New define_expand.\n+\t(<shift_insn>hi3_430): New define_insn.\n+\t(<shift_insn>si3_const): Likewise.\n+\t(ashl<mode>3_430x): Likewise.\n+\t(ashr<mode>3_430x): Likewise.\n+\t(lshr<mode>3_430x): Likewise.\n+\t(*bitbranch<mode>4_z): Replace renamed predicate msp430_bitpos with\n+\tconst_0_to_15_operand.\n+\t* config/msp430/msp430.opt: New option -mmax-inline-shift=.\n+\t* config/msp430/predicates.md (const_1_to_8_operand): New predicate.\n+\t(const_0_to_15_operand): Rename msp430_bitpos predicate.\n+\t(const_1_to_19_operand): New predicate.\n+\t* doc/invoke.texi: Document -mmax-inline-shift=.\n+\n+2020-08-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-dom.c (simplify_stmt_for_jump_threading): Abstract code out to...\n+\t* tree-vrp.c (find_case_label_range): ...here.  Rewrite for to use irange\n+\tAPI.\n+\t(simplify_stmt_for_jump_threading): Call find_case_label_range instead of\n+\tduplicating the code in simplify_stmt_for_jump_threading.\n+\t* tree-vrp.h (find_case_label_range): New prototype.\n+\n+2020-08-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96698\n+\t* tree-vectorizer.h (loop_vec_info::reduc_latch_defs): New.\n+\t(loop_vec_info::reduc_latch_slp_defs): Likewise.\n+\t* tree-vect-stmts.c (vect_transform_stmt): Only record\n+\tstmts to update PHI latches from, perform the update ...\n+\t* tree-vect-loop.c (vect_transform_loop): ... here after\n+\tvectorizing those PHIs.\n+\t(info_for_reduction): Properly handle non-reduction PHIs.\n+\n+2020-08-26  Martin Liska  <mliska@suse.cz>\n+\n+\t* cgraphunit.c (process_symver_attribute): Match only symver\n+\tTREE_PURPOSE.\n+\n+2020-08-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96783\n+\t* tree-vect-stmts.c (get_group_load_store_type): Use\n+\tVMAT_ELEMENTWISE for negative strides when we cannot\n+\tuse VMAT_STRIDED_SLP.\n+\n+2020-08-26  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/invoke.texi: Document how are pie and pic options merged.\n+\n+2020-08-26  Zhiheng Xie  <xiezhiheng@huawei.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add proper FLAG\n+\tfor add/sub arithmetic intrinsics.\n+\n+2020-08-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/96729\n+\t* dwarf2out.c (dwarf2out_next_real_insn): Adjust function comment.\n+\t(dwarf2out_var_location): Look for next_note only if next_real is\n+\tnon-NULL, in that case look for the first non-deleted\n+\tNOTE_INSN_VAR_LOCATION between loc_note and next_real, if any.\n+\n+2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* config/tilepro/gen-mul-tables.cc (main): Define IN_TARGET_CODE to 1\n+\tin the target file.\n+\n+2020-08-26  Martin Liska  <mliska@suse.cz>\n+\n+\t* cgraphunit.c (process_symver_attribute): Allow multiple\n+\tsymver attributes for one symbol.\n+\t* doc/extend.texi: Document the change.\n+\n 2020-08-25  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/95863"}, {"sha": "c7ea9e023ae1258f5edbb1429381ee5ae75cf071", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ea089421a3cfce936f91f3c0c92bf95ac71da1/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ea089421a3cfce936f91f3c0c92bf95ac71da1/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=57ea089421a3cfce936f91f3c0c92bf95ac71da1", "patch": "@@ -1 +1 @@\n-20200826\n+20200827"}, {"sha": "d0be7b339b071ba7ad7a22f3ac3382f8ad55b354", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ea089421a3cfce936f91f3c0c92bf95ac71da1/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ea089421a3cfce936f91f3c0c92bf95ac71da1/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=57ea089421a3cfce936f91f3c0c92bf95ac71da1", "patch": "@@ -1,3 +1,30 @@\n+2020-08-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/94858\n+\t* region-model-manager.cc\n+\t(region_model_manager::get_or_create_widening_svalue): Assert that\n+\tneither of the inputs are themselves widenings.\n+\t* store.cc (store::eval_alias_1): The initial value of a pointer\n+\tcan't point to a region that was allocated on the heap after the\n+\tbeginning of the path.  A widened pointer value can't alias anything\n+\tthat the initial pointer value can't alias.\n+\t* svalue.cc (svalue::can_merge_p): Merge BINOP (X, OP, CST) with X\n+\tto a widening svalue.  Merge\n+\tBINOP(WIDENING(BASE, BINOP(BASE, X)), X) and BINOP(BASE, X) to\n+\tto the LHS of the first BINOP.\n+\n+2020-08-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96777\n+\t* region-model.h (class compound_svalue): Document that all keys\n+\tmust be concrete.\n+\t(compound_svalue::compound_svalue): Move definition to svalue.cc.\n+\t* store.cc (binding_map::apply_ctor_to_region): Handle\n+\tinitializers for trailing arrays with incomplete size.\n+\t* svalue.cc (compound_svalue::compound_svalue): Move definition\n+\there from region-model.h.  Add assertion that all keys are\n+\tconcrete.\n+\n 2020-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/94851"}, {"sha": "294e2885ec026f990bb88d60cb82d38d97fc937a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ea089421a3cfce936f91f3c0c92bf95ac71da1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ea089421a3cfce936f91f3c0c92bf95ac71da1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=57ea089421a3cfce936f91f3c0c92bf95ac71da1", "patch": "@@ -1,3 +1,15 @@\n+2020-08-26  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* decl.c (poplevel): A local-binding tree list holds the name in\n+\tTREE_PURPOSE.\n+\t* name-lookup.c (update_local_overload): Add id to TREE_PURPOSE.\n+\t(lookup_name_1): Deal with local-binding error_mark_node marker.\n+\t(op_unqualified_lookup): Return error_mark_node for 'nothing\n+\tfound'.  Retain global binding, check class binding here.\n+\t(maybe_save_operator_binding): Reimplement to always cache a\n+\tresult.\n+\t(push_operator_bindings): Deal with 'ignore' marker.\n+\n 2020-08-25  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR c/96678"}, {"sha": "00507aca5823a4055ce80de31e351a15c08635f2", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ea089421a3cfce936f91f3c0c92bf95ac71da1/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ea089421a3cfce936f91f3c0c92bf95ac71da1/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=57ea089421a3cfce936f91f3c0c92bf95ac71da1", "patch": "@@ -1,3 +1,63 @@\n+2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd e49192807\n+\n+2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96156\n+\t* d-frontend.cc (retStyle): Only return RETstack for struct and static\n+\tarray types.\n+\t* decl.cc (DeclVisitor::visit (FuncDeclaration *)): Use NRVO return\n+\tfor all TREE_ADDRESSABLE types.  Set shidden to the RESULT_DECL.\n+\t* expr.cc (ExprVisitor::visit (CallExp *)): Force TARGET_EXPR if the\n+\t'this' pointer reference is a CONSTRUCTOR.\n+\t(ExprVisitor::visit (StructLiteralExp *)): Generate assignment to the\n+\tsymbol to initialize with literal.\n+\t* toir.cc (IRVisitor::visit (ReturnStatement *)): Detect returning\n+\tstruct literals and write directly into the RESULT_DECL.\n+\t* dmd/MERGE: Merge upstream dmd fe5f388d8.\n+\n+2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd cb4a96fae\n+\n+2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-lang.cc (d_parse_file): Use read() to load contents from stdin,\n+\tallow the front-end to free the memory after parsing.\n+\t* dmd/MERGE: Merge upstream dmd 2cc25c219.\n+\n+2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96153\n+\t* d-codegen.cc (build_address): Create a temporary for CALL_EXPRs\n+\treturning trivial aggregates, pre-filling it with zeroes.\n+\t(build_memset_call): Use build_zero_cst if setting the entire object.\n+\n+2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96157\n+\t* d-codegen.cc (d_build_call): Handle TREE_ADDRESSABLE static arrays.\n+\t* types.cc (make_array_type): Propagate TREE_ADDRESSABLE from base\n+\ttype to static array.\n+\n+2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-gimplify.cc (d_gimplify_expr): Move lowering of each tree node to\n+\tseparate functions.\n+\t(d_gimplify_modify_expr): New function.\n+\t(d_gimplify_addr_expr): New function.\n+\t(d_gimplify_call_expr): New function.\n+\t(d_gimplify_unsigned_rshift_expr): New function.\n+\n+2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* Make-lang.in (D_OBJS): Add d-gimplify.o.\n+\t* d-lang.cc (empty_modify_p): Move to d-gimplify.cc.\n+\t(d_gimplify_expr): Likewise.\n+\t* d-tree.h (d_gimplify_expr): Declare.\n+\t* d-gimplify.cc: New file.\n+\n 2020-08-20  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* dmd/MERGE: Merge upstream dmd 1b5a53d01."}, {"sha": "9b989bdb475460be226ce43d2de4c6d67eff8249", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ea089421a3cfce936f91f3c0c92bf95ac71da1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ea089421a3cfce936f91f3c0c92bf95ac71da1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=57ea089421a3cfce936f91f3c0c92bf95ac71da1", "patch": "@@ -1,3 +1,18 @@\n+2020-08-26  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.h (enum gfc_omp_device_type): New.\n+\t(symbol_attribute, gfc_omp_clauses, gfc_common_head): Use it.\n+\t* module.c (enum ab_attribute): Add AB_OMP_DEVICE_TYPE_HOST,\n+\tAB_OMP_DEVICE_TYPE_NOHOST and AB_OMP_DEVICE_TYPE_ANY.\n+\t(attr_bits, mio_symbol_attribute): Handle it.\n+\t(load_commons, write_common_0): Handle omp_device_type flag.\n+\t* openmp.c (enum omp_mask1): Add OMP_CLAUSE_DEVICE_TYPE\n+\t(OMP_DECLARE_TARGET_CLAUSES): Likewise.\n+\t(gfc_match_omp_clauses): Match 'device_type'.\n+\t(gfc_match_omp_declare_target): Handle it.\n+\t* trans-common.c (build_common_decl): Write device-type clause.\n+\t* trans-decl.c (add_attributes_to_decl): Likewise.\n+\n 2020-08-23  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/96737"}, {"sha": "5c1a4571667bb86e459ee4003b40529dbe967fac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ea089421a3cfce936f91f3c0c92bf95ac71da1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ea089421a3cfce936f91f3c0c92bf95ac71da1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=57ea089421a3cfce936f91f3c0c92bf95ac71da1", "patch": "@@ -1,3 +1,113 @@\n+2020-08-26  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.target/i386/387-7.c: Add dg-require-effective-target c99_runtime.\n+\t* gcc.target/i386/387-9.c: Likewise.\n+\t* g++.target/i386/avx512bw-pr96246-1.C: Likewise.\n+\t* gcc.target/i386/avx512f-rint-sfix-vec-2.c: Likewise.\n+\t* gcc.target/i386/avx512f-rintf-sfix-vec-2.c: Likewise.\n+\t* g++.target/i386/avx512vl-pr96246-1.C: Likewise.\n+\t* gcc.target/i386/pr61403.c: Likewise.\n+\t* gcc.target/i386/sse4_1-ceil-sfix-vec.c: Likewise.\n+\t* gcc.target/i386/sse4_1-ceilf-sfix-vec.c: Likewise.\n+\t* gcc.target/i386/sse4_1-floor-sfix-vec.c: Likewise.\n+\t* gcc.target/i386/sse4_1-floorf-sfix-vec.c: Likewise.\n+\t* gcc.target/i386/sse4_1-rint-sfix-vec.c: Likewise.\n+\t* gcc.target/i386/sse4_1-rintf-sfix-vec.c: Likewise.\n+\t* gcc.target/i386/sse4_1-round-sfix-vec.c: Likewise.\n+\t* gcc.target/i386/sse4_1-roundf-sfix-vec.c: Likewise.\n+\n+2020-08-26  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/96802\n+\t* gcc.target/i386/pr96802-1.c: New test.\n+\t* gcc.target/i386/pr96802-2.c: Likewise.\n+\n+2020-08-26  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* gcc.target/msp430/emulate-srli.c: Fix expected assembler text.\n+\t* gcc.target/msp430/max-inline-shift-430-no-opt.c: New test.\n+\t* gcc.target/msp430/max-inline-shift-430.c: New test.\n+\t* gcc.target/msp430/max-inline-shift-430x.c: New test.\n+\n+2020-08-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96698\n+\t* gcc.dg/vect/pr96698.c: New testcase.\n+\n+2020-08-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96783\n+\t* gcc.dg/vect/pr96783-1.c: New testcase.\n+\t* gcc.dg/vect/pr96783-2.c: Likewise.\n+\n+2020-08-26  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/lookup/operator-1.C: New.\n+\t* g++.dg/lookup/operator-2.C: New.\n+\n+2020-08-26  Qian Jianhua  <qianjh@cn.fujitsu.com>\n+\n+\t* gcc.target/aarch64/insv_1.c: Add '#' in scan-assembler\n+\n+2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96156\n+\t* gdc.dg/pr96156.d: New test.\n+\n+2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96153\n+\t* gdc.dg/pr96153.d: Add new tests.\n+\n+2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96157\n+\t* gdc.dg/pr96157a.d: New test.\n+\t* gdc.dg/pr96157b.d: New test.\n+\n+2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* lib/gdc-utils.exp (gdc-convert-test): Clear PERMUTE_ARGS for\n+\tfail_compilation tests if not set by test file.\n+\n+2020-08-26  Martin Liska  <mliska@suse.cz>\n+\n+\t* lib/target-supports-dg.exp: Add dg-require-symver.\n+\t* lib/target-supports.exp: Likewise.\n+\t* gcc.dg/ipa/symver1.c: New test.\n+\n+2020-08-26  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/declare-target-4.f90: New test.\n+\t* gfortran.dg/gomp/declare-target-5.f90: New test.\n+\n+2020-08-26  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/96667\n+\t* gcc.target/i386/avx512bw-pr96246-1.c: Moved to...\n+\t* g++.target/i386/avx512bw-pr96246-1.C: ...here.\n+\t* gcc.target/i386/avx512bw-pr96246-2.c: Moved to...\n+\t* g++.target/i386/avx512bw-pr96246-2.C: ...here.\n+\t* gcc.target/i386/avx512vl-pr96246-1.c: Moved to...\n+\t* g++.target/i386/avx512vl-pr96246-1.C: ...here.\n+\t* gcc.target/i386/avx512vl-pr96246-2.c: Moved to...\n+\t* g++.target/i386/avx512vl-pr96246-2.C: ...here.\n+\n+2020-08-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/94858\n+\t* gcc.dg/analyzer/loop-start-up-to-end-by-1.c: Remove xfail.\n+\t* gcc.dg/analyzer/pr94858-1.c: New test.\n+\t* gcc.dg/analyzer/pr94858-2.c: New test.\n+\t* gcc.dg/analyzer/torture/loop-inc-ptr-2.c: Update expected number\n+\tof enodes.\n+\t* gcc.dg/analyzer/torture/loop-inc-ptr-3.c: Likewise.\n+\n+2020-08-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/96777\n+\t* gcc.dg/analyzer/pr96777.c: New test.\n+\n 2020-08-25  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/95863"}, {"sha": "ccfd6f6a8403bcf177df79b110154e991752b45c", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ea089421a3cfce936f91f3c0c92bf95ac71da1/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ea089421a3cfce936f91f3c0c92bf95ac71da1/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=57ea089421a3cfce936f91f3c0c92bf95ac71da1", "patch": "@@ -1,3 +1,9 @@\n+2020-08-26  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/slli.S (__gnu_mspabi_sllp): New.\n+\t* config/msp430/srai.S (__gnu_mspabi_srap): New.\n+\t* config/msp430/srli.S (__gnu_mspabi_srlp): New.\n+\n 2020-08-13  Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n \t* config/nvptx/atomic.c: New."}, {"sha": "62f5f1bb2ed67c0880663bdf0d7141cfa07087da", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ea089421a3cfce936f91f3c0c92bf95ac71da1/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ea089421a3cfce936f91f3c0c92bf95ac71da1/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=57ea089421a3cfce936f91f3c0c92bf95ac71da1", "patch": "@@ -1,3 +1,10 @@\n+2020-08-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-demangle.c (dlang_function_args): Handle 'in' and 'in ref'\n+\tparameter storage classes.\n+\t(dlang_type): Remove identifier type.\n+\t* testsuite/d-demangle-expected: Update tests.\n+\n 2020-08-03  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/96385"}, {"sha": "61c6e03d21144de5ae310028dd80f2f607be4824", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ea089421a3cfce936f91f3c0c92bf95ac71da1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ea089421a3cfce936f91f3c0c92bf95ac71da1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=57ea089421a3cfce936f91f3c0c92bf95ac71da1", "patch": "@@ -1,3 +1,80 @@\n+2020-08-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/tuple (_Tuple_impl): Whitespaces changes for\n+\tconsistent indentation. Also use __enable_if_t alias template.\n+\n+2020-08-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/96803\n+\t* include/std/tuple\n+\t(_Tuple_impl(allocator_arg_t, Alloc, const _Tuple_impl<U...>&)):\n+\tReplace parameter pack with a type parameter and a pack and pass\n+\tthe first type to __use_alloc.\n+\t* testsuite/20_util/tuple/cons/96803.cc: New test.\n+\n+2020-08-26  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/chrono (year_month_weekday::operator==): Compare\n+\tweekday_indexed instead of weekday.\n+\t* testsuite/std/time/year_month_weekday/1.cc: Augment testcase.\n+\n+2020-08-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/hashtable_policy.h (_Hash_code_base): Change\n+\tindex of _Hashtable_ebo_helper base class.\n+\t* testsuite/23_containers/unordered_map/dup_types.cc: New test.\n+\n+2020-08-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/71960\n+\t* include/experimental/string_view (basic_string_view):\n+\tEnable debug assertions.\n+\t* include/std/string_view (basic_string_view):\n+\tLikewise.\n+\n+2020-08-26  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/hashtable_policy.h (_Hashtable<>): Rename _H1 into _Hash\n+\t_H2 into _RangeHash and _Hash into _Unused.\n+\t(_Hastable_base<>): Likewise.\n+\t(_Map_base<>): Likewise.\n+\t(_Insert_base<>): Likewise.\n+\t(_Insert<>): Likewise.\n+\t(_Rehash_base<>): Likewise.\n+\t(_Local_iterator_base<>): Likewise.\n+\t(_Hash_code_base<>): Likewise.\n+\t(_Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, false>):\n+\tRemove.\n+\t(_Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, true>):\n+\tRemove.\n+\t(_Hash_code_base<_Key, _Value, _ExtractKey, _Hash, _RangeHas, _Unused,\n+\tbool>): Remove _Hashtable_ebo_helper<2, _RangeHash> base type..\n+\t(_Hash_code_base<>::_M_bucket_index(const _Key&, __hash_code, size_t)):\n+\tReplace by...\n+\t(_Hash_code_base<>::_M_bucket_index(__hash_code, size_t)): ...this.\n+\t(_Local_iterator<>): Remove _H1 and _H2 template parameters.\n+\t(_Local_const_iterator<>): Likewise.\n+\t(_Equality<>): Likewise.\n+\t(_Map_base<>::operator[](const key_type&): Adapt.\n+\t(_Map_base<>::operator[](key_type&&): Adapt.\n+\t(_Identity::operator()): Add noexcept.\n+\t(_Select1st::operator()): Likewise.\n+\t(_Hash_code_base<>): Remove _Hashtable_ebo_helper<0, _ExtractKey> base\n+\ttype.\n+\t(_Hash_code_base::_M_extract): Remove.\n+\t* include/bits/hashtable.h (_Hashtable<>): Remove _H1 and _H2 template\n+\tparameters. Remove _ExtractKey from constructors.\n+\t(_Hashtable<>::_M_insert_unique_node(const key_type&, size_t,\n+\t__hash_code, __node_type*, size_t)): Replace by...\n+\t(_Hashtable<>::_M_insert_unique_node(size_t, __hash_code,\n+\t __node_type*, size_t)): ...this.\n+\t(_Hashtable<>::_M_insert_muti_node(__node_type*, const key_type&,\n+\t__hash_code, __node_type*)): Replace by...\n+\t(_Hashtable<>::_M_insert_multi_node(__node_type*, __hash_code,\n+\t__node_type*)): ...this.\n+\t(_Hashtable<>::__key_extract): Remove.\n+\t* include/bits/node_handle.h: Adapt.\n+\n 2020-08-25  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/21_strings/debug/iterator_self_move_assign_neg.cc: Removed."}]}