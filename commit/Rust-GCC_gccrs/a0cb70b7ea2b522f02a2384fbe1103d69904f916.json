{"sha": "a0cb70b7ea2b522f02a2384fbe1103d69904f916", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBjYjcwYjdlYTJiNTIyZjAyYTIzODRmYmUxMTAzZDY5OTA0ZjkxNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-07-06T08:26:33Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-07-06T08:26:33Z"}, "message": "[i386] Fix ambiguous .md attribute uses\n\nThis patch is part of a series that fixes ambiguous attribute\nuses in .md files, i.e. cases in which attributes didn't use\n<ITER:ATTR> to specify an iterator, and in which <ATTR> could\nhave different values depending on the iterator chosen.\n\nNo behavioural change except for dropping the unused *andnot<mode>3_bcst\npermutations.\n\n2019-07-06  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/i386/i386.md (*fop_<X87MODEF:mode>_3_i387)\n\t(l<rounding_insn><MODEF:mode><SWI48:mode>2): Fix ambiguous uses\n\tof .md attributes.\n\t* config/i386/sse.md (*avx512pf_gatherpf<mode>sf_mask)\n\t(*avx512pf_gatherpf<mode>df_mask, *avx512pf_scatterpf<mode>sf_mask)\n\t(*avx512pf_scatterpf<mode>df_mask, *avx2_gathersi<mode>)\n\t(*avx2_gathersi<mode>_2, *avx2_gatherdi<mode>)\n\t(*avx2_gatherdi<mode>_2, *avx2_gatherdi<mode>_3): Likewise.\n\t(*avx2_gatherdi<mode>_4, *avx512f_gathersi<mode>): Likewise.\n\t(*avx512f_gathersi<mode>_2, *avx512f_gatherdi<mode>): Likewise.\n\t(*avx512f_gatherdi<mode>_2, *avx512f_scattersi<mode>): Likewise.\n\t(*avx512f_scatterdi<mode>): Likewise.\n\t(*andnot<mode>3_bcst): Fix VI/VI48_AVX512VL typo.\n\nFrom-SVN: r273161", "tree": {"sha": "94eab327c49e2e5723e50cb3fc15ecb5e697846f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94eab327c49e2e5723e50cb3fc15ecb5e697846f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0cb70b7ea2b522f02a2384fbe1103d69904f916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0cb70b7ea2b522f02a2384fbe1103d69904f916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0cb70b7ea2b522f02a2384fbe1103d69904f916", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0cb70b7ea2b522f02a2384fbe1103d69904f916/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "212ecf90de89e3fde0704753dc2b1268a7062f1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/212ecf90de89e3fde0704753dc2b1268a7062f1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/212ecf90de89e3fde0704753dc2b1268a7062f1b"}], "stats": {"total": 62, "additions": 39, "deletions": 23}, "files": [{"sha": "1b318b9f7c96e20c49fbe994af8de70daf18ec7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0cb70b7ea2b522f02a2384fbe1103d69904f916/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0cb70b7ea2b522f02a2384fbe1103d69904f916/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0cb70b7ea2b522f02a2384fbe1103d69904f916", "patch": "@@ -1,3 +1,19 @@\n+2019-07-06  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/i386/i386.md (*fop_<X87MODEF:mode>_3_i387)\n+\t(l<rounding_insn><MODEF:mode><SWI48:mode>2): Fix ambiguous uses\n+\tof .md attributes.\n+\t* config/i386/sse.md (*avx512pf_gatherpf<mode>sf_mask)\n+\t(*avx512pf_gatherpf<mode>df_mask, *avx512pf_scatterpf<mode>sf_mask)\n+\t(*avx512pf_scatterpf<mode>df_mask, *avx2_gathersi<mode>)\n+\t(*avx2_gathersi<mode>_2, *avx2_gatherdi<mode>)\n+\t(*avx2_gatherdi<mode>_2, *avx2_gatherdi<mode>_3): Likewise.\n+\t(*avx2_gatherdi<mode>_4, *avx512f_gathersi<mode>): Likewise.\n+\t(*avx512f_gathersi<mode>_2, *avx512f_gatherdi<mode>): Likewise.\n+\t(*avx512f_gatherdi<mode>_2, *avx512f_scattersi<mode>): Likewise.\n+\t(*avx512f_scatterdi<mode>): Likewise.\n+\t(*andnot<mode>3_bcst): Fix VI/VI48_AVX512VL typo.\n+\n 2019-07-06  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/h8300/h8300.md (*push1_h8300hs_<mode>): Explicitly"}, {"sha": "db5fa9ae3cae1a1f0a61f7734d5318e9422b83e6", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0cb70b7ea2b522f02a2384fbe1103d69904f916/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0cb70b7ea2b522f02a2384fbe1103d69904f916/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a0cb70b7ea2b522f02a2384fbe1103d69904f916", "patch": "@@ -14755,7 +14755,7 @@\n \t      ]\n \t      (const_string \"fop\")))\n    (set_attr \"fp_int_src\" \"true\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+   (set_attr \"mode\" \"<SWI24:MODE>\")])\n \n (define_insn \"*fop_xf_4_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n@@ -16457,7 +16457,7 @@\n     {\n       rtx tmp = gen_reg_rtx (<MODEF:MODE>mode);\n \n-      emit_insn (gen_sse4_1_round<mode>2\n+      emit_insn (gen_sse4_1_round<MODEF:mode>2\n \t\t (tmp, operands[1], GEN_INT (ROUND_<ROUNDING>\n \t\t\t\t\t     | ROUND_NO_EXC)));\n       emit_insn (gen_fix_trunc<MODEF:mode><SWI48:mode>2"}, {"sha": "3ce22395c6537b3dd330f9bdb118388e281ff18d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0cb70b7ea2b522f02a2384fbe1103d69904f916/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0cb70b7ea2b522f02a2384fbe1103d69904f916/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=a0cb70b7ea2b522f02a2384fbe1103d69904f916", "patch": "@@ -12702,8 +12702,8 @@\n \t      (const_string \"<sseinsnmode>\")))])\n \n (define_insn \"*andnot<mode>3_bcst\"\n-  [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n-\t(and:VI\n+  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(and:VI48_AVX512VL\n \t  (not:VI48_AVX512VL\n \t     (match_operand:VI48_AVX512VL 1 \"register_operand\" \"v\"))\n \t  (vec_duplicate:VI48_AVX512VL\n@@ -18084,7 +18084,7 @@\n \t\t\t\t\toperands[3]), UNSPEC_VSIBADDR);\n })\n \n-(define_insn \"*avx512pf_gatherpf<mode>sf_mask\"\n+(define_insn \"*avx512pf_gatherpf<VI48_512:mode>sf_mask\"\n   [(unspec\n      [(match_operand:<avx512fmaskmode> 0 \"register_operand\" \"Yk\")\n       (match_operator:<GATHER_SCATTER_SF_MEM_MODE> 5 \"vsib_mem_operator\"\n@@ -18131,7 +18131,7 @@\n \t\t\t\t\toperands[3]), UNSPEC_VSIBADDR);\n })\n \n-(define_insn \"*avx512pf_gatherpf<mode>df_mask\"\n+(define_insn \"*avx512pf_gatherpf<VI4_256_8_512:mode>df_mask\"\n   [(unspec\n      [(match_operand:<avx512fmaskmode> 0 \"register_operand\" \"Yk\")\n       (match_operator:V8DF 5 \"vsib_mem_operator\"\n@@ -18178,7 +18178,7 @@\n \t\t\t\t\toperands[3]), UNSPEC_VSIBADDR);\n })\n \n-(define_insn \"*avx512pf_scatterpf<mode>sf_mask\"\n+(define_insn \"*avx512pf_scatterpf<VI48_512:mode>sf_mask\"\n   [(unspec\n      [(match_operand:<avx512fmaskmode> 0 \"register_operand\" \"Yk\")\n       (match_operator:<GATHER_SCATTER_SF_MEM_MODE> 5 \"vsib_mem_operator\"\n@@ -18227,7 +18227,7 @@\n \t\t\t\t\toperands[3]), UNSPEC_VSIBADDR);\n })\n \n-(define_insn \"*avx512pf_scatterpf<mode>df_mask\"\n+(define_insn \"*avx512pf_scatterpf<VI4_256_8_512:mode>df_mask\"\n   [(unspec\n      [(match_operand:<avx512fmaskmode> 0 \"register_operand\" \"Yk\")\n       (match_operator:V8DF 5 \"vsib_mem_operator\"\n@@ -21016,7 +21016,7 @@\n \t\t\t\t\toperands[5]), UNSPEC_VSIBADDR);\n })\n \n-(define_insn \"*avx2_gathersi<mode>\"\n+(define_insn \"*avx2_gathersi<VEC_GATHER_MODE:mode>\"\n   [(set (match_operand:VEC_GATHER_MODE 0 \"register_operand\" \"=&x\")\n \t(unspec:VEC_GATHER_MODE\n \t  [(match_operand:VEC_GATHER_MODE 2 \"register_operand\" \"0\")\n@@ -21036,7 +21036,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"*avx2_gathersi<mode>_2\"\n+(define_insn \"*avx2_gathersi<VEC_GATHER_MODE:mode>_2\"\n   [(set (match_operand:VEC_GATHER_MODE 0 \"register_operand\" \"=&x\")\n \t(unspec:VEC_GATHER_MODE\n \t  [(pc)\n@@ -21077,7 +21077,7 @@\n \t\t\t\t\toperands[5]), UNSPEC_VSIBADDR);\n })\n \n-(define_insn \"*avx2_gatherdi<mode>\"\n+(define_insn \"*avx2_gatherdi<VEC_GATHER_MODE:mode>\"\n   [(set (match_operand:VEC_GATHER_MODE 0 \"register_operand\" \"=&x\")\n \t(unspec:VEC_GATHER_MODE\n \t  [(match_operand:<VEC_GATHER_SRCDI> 2 \"register_operand\" \"0\")\n@@ -21097,7 +21097,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"*avx2_gatherdi<mode>_2\"\n+(define_insn \"*avx2_gatherdi<VEC_GATHER_MODE:mode>_2\"\n   [(set (match_operand:VEC_GATHER_MODE 0 \"register_operand\" \"=&x\")\n \t(unspec:VEC_GATHER_MODE\n \t  [(pc)\n@@ -21113,15 +21113,15 @@\n    (clobber (match_scratch:VEC_GATHER_MODE 1 \"=&x\"))]\n   \"TARGET_AVX2\"\n {\n-  if (<MODE>mode != <VEC_GATHER_SRCDI>mode)\n+  if (<VEC_GATHER_MODE:MODE>mode != <VEC_GATHER_SRCDI>mode)\n     return \"%M2v<sseintprefix>gatherq<ssemodesuffix>\\t{%4, %6, %x0|%x0, %6, %4}\";\n   return \"%M2v<sseintprefix>gatherq<ssemodesuffix>\\t{%4, %6, %0|%0, %6, %4}\";\n }\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"*avx2_gatherdi<mode>_3\"\n+(define_insn \"*avx2_gatherdi<VI4F_256:mode>_3\"\n   [(set (match_operand:<VEC_GATHER_SRCDI> 0 \"register_operand\" \"=&x\")\n \t(vec_select:<VEC_GATHER_SRCDI>\n \t  (unspec:VI4F_256\n@@ -21144,7 +21144,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"*avx2_gatherdi<mode>_4\"\n+(define_insn \"*avx2_gatherdi<VI4F_256:mode>_4\"\n   [(set (match_operand:<VEC_GATHER_SRCDI> 0 \"register_operand\" \"=&x\")\n \t(vec_select:<VEC_GATHER_SRCDI>\n \t  (unspec:VI4F_256\n@@ -21186,7 +21186,7 @@\n \t\t\t\t\toperands[5]), UNSPEC_VSIBADDR);\n })\n \n-(define_insn \"*avx512f_gathersi<mode>\"\n+(define_insn \"*avx512f_gathersi<VI48F:mode>\"\n   [(set (match_operand:VI48F 0 \"register_operand\" \"=&v\")\n \t(unspec:VI48F\n \t  [(match_operand:VI48F 1 \"register_operand\" \"0\")\n@@ -21207,7 +21207,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"*avx512f_gathersi<mode>_2\"\n+(define_insn \"*avx512f_gathersi<VI48F:mode>_2\"\n   [(set (match_operand:VI48F 0 \"register_operand\" \"=&v\")\n \t(unspec:VI48F\n \t  [(pc)\n@@ -21248,7 +21248,7 @@\n \t\t\t\t\toperands[5]), UNSPEC_VSIBADDR);\n })\n \n-(define_insn \"*avx512f_gatherdi<mode>\"\n+(define_insn \"*avx512f_gatherdi<VI48F:mode>\"\n   [(set (match_operand:VI48F 0 \"register_operand\" \"=&v\")\n \t(unspec:VI48F\n \t  [(match_operand:<VEC_GATHER_SRCDI> 1 \"register_operand\" \"0\")\n@@ -21269,7 +21269,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"*avx512f_gatherdi<mode>_2\"\n+(define_insn \"*avx512f_gatherdi<VI48F:mode>_2\"\n   [(set (match_operand:VI48F 0 \"register_operand\" \"=&v\")\n \t(unspec:VI48F\n \t  [(pc)\n@@ -21286,9 +21286,9 @@\n {\n   /* %X5 so that we don't emit any *WORD PTR for -masm=intel, as\n      gas changed what it requires incompatibly.  */\n-  if (<MODE>mode != <VEC_GATHER_SRCDI>mode)\n+  if (<VI48F:MODE>mode != <VEC_GATHER_SRCDI>mode)\n     {\n-      if (<MODE_SIZE> != 64)\n+      if (<VI48F:MODE_SIZE> != 64)\n \treturn \"%M3v<sseintprefix>gatherq<ssemodesuffix>\\t{%5, %x0%{%1%}|%x0%{%1%}, %X5}\";\n       else\n \treturn \"%M3v<sseintprefix>gatherq<ssemodesuffix>\\t{%5, %t0%{%1%}|%t0%{%1%}, %X5}\";\n@@ -21317,7 +21317,7 @@\n \t\t\t\t\toperands[4]), UNSPEC_VSIBADDR);\n })\n \n-(define_insn \"*avx512f_scattersi<mode>\"\n+(define_insn \"*avx512f_scattersi<VI48F:mode>\"\n   [(set (match_operator:VI48F 5 \"vsib_mem_operator\"\n \t  [(unspec:P\n \t     [(match_operand:P 0 \"vsib_address_operand\" \"Tv\")\n@@ -21355,7 +21355,7 @@\n \t\t\t\t\toperands[4]), UNSPEC_VSIBADDR);\n })\n \n-(define_insn \"*avx512f_scatterdi<mode>\"\n+(define_insn \"*avx512f_scatterdi<VI48F:mode>\"\n   [(set (match_operator:VI48F 5 \"vsib_mem_operator\"\n \t  [(unspec:P\n \t     [(match_operand:P 0 \"vsib_address_operand\" \"Tv\")"}]}