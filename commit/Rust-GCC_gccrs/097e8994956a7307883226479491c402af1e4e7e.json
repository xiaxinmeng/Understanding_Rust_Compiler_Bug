{"sha": "097e8994956a7307883226479491c402af1e4e7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk3ZTg5OTQ5NTZhNzMwNzg4MzIyNjQ3OTQ5MWM0MDJhZjFlNGU3ZQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-07-04T14:52:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-07-04T14:52:54Z"}, "message": "Add tests for inserting aliased objects into std::vector\n\n2016-07-04  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* testsuite/23_containers/vector/modifiers/emplace/self_emplace.cc:\n\tNew test.\n\t* testsuite/23_containers/vector/modifiers/insert/self_insert.cc: New\n\ttest.\n\nFrom-SVN: r237986", "tree": {"sha": "8ffb6d6f37fab3cedee7e28fa38b2e13b2c190a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ffb6d6f37fab3cedee7e28fa38b2e13b2c190a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/097e8994956a7307883226479491c402af1e4e7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/097e8994956a7307883226479491c402af1e4e7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/097e8994956a7307883226479491c402af1e4e7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/097e8994956a7307883226479491c402af1e4e7e/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9958c7eb586f40860546007fe0dc27165275c80d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9958c7eb586f40860546007fe0dc27165275c80d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9958c7eb586f40860546007fe0dc27165275c80d"}], "stats": {"total": 221, "additions": 221, "deletions": 0}, "files": [{"sha": "536e49f431145b73c9df8145e268841c41a2df22", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/097e8994956a7307883226479491c402af1e4e7e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/097e8994956a7307883226479491c402af1e4e7e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=097e8994956a7307883226479491c402af1e4e7e", "patch": "@@ -1,3 +1,10 @@\n+2016-07-04  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* testsuite/23_containers/vector/modifiers/emplace/self_emplace.cc:\n+\tNew test.\n+\t* testsuite/23_containers/vector/modifiers/insert/self_insert.cc: New\n+\ttest.\n+\n 2016-07-04  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/stl_vector.h (emplace(const_iterator, _Args&&...)):"}, {"sha": "d452b5b6325adfb985e967612081174abf440236", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/emplace/self_emplace.cc", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/097e8994956a7307883226479491c402af1e4e7e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Femplace%2Fself_emplace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/097e8994956a7307883226479491c402af1e4e7e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Femplace%2Fself_emplace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Femplace%2Fself_emplace.cc?ref=097e8994956a7307883226479491c402af1e4e7e", "patch": "@@ -0,0 +1,144 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+#include \"testsuite_hooks.h\"\n+\n+bool test __attribute__((unused)) = true;\n+\n+void\n+test01()\n+{\n+  std::vector<std::vector<int>> vv =\n+    {\n+      { 2, 3 },\n+      { 4, 5 },\n+      { 0, 1 }\n+    };\n+\n+  // Make sure emplace will imply reallocation.\n+  VERIFY( vv.capacity() == 3 );\n+\n+  vv.emplace(vv.begin(), vv[0]);\n+\n+  VERIFY( vv.size() == 4 );\n+  VERIFY( vv[0].size() == 2 );\n+  VERIFY( vv[0][0] == 2 );\n+  VERIFY( vv[0][1] == 3 );\n+}\n+\n+void\n+test02()\n+{\n+  std::vector<std::vector<int>> vv =\n+    {\n+      { 2, 3 },\n+      { 4, 5 },\n+      { 0, 1 }\n+    };\n+\n+  // Make sure emplace won't reallocate.\n+  vv.reserve(4);\n+  vv.emplace(vv.begin(), vv[0]);\n+\n+  VERIFY( vv.size() == 4 );\n+  VERIFY( vv[0].size() == 2 );\n+  VERIFY( vv[0][0] == 2 );\n+  VERIFY( vv[0][1] == 3 );\n+}\n+\n+struct A\n+{\n+  A(int i) : _i(i)\n+  { }\n+\n+  A(const A& other) : _i(other._i)\n+  {\n+    VERIFY( other._i >= 0 );\n+  }\n+\n+  A(A&& other) : _i(other._i)\n+  {\n+    VERIFY( other._i >= 0 );\n+\n+    other._i = -1;\n+  }\n+\n+  A(std::vector<A>::iterator it) : _i(it->_i)\n+  {\n+    VERIFY( it->_i >= 0 );\n+  }\n+\n+  A& operator=(const A&) = default;\n+  A& operator=(A&& other)\n+  {\n+    VERIFY(other._i >= 0 );\n+\n+    _i = other._i;\n+    other._i = -1;\n+    return *this;\n+  }\n+\n+  int _i;\n+};\n+\n+void\n+test03()\n+{\n+  std::vector<A> va =\n+    {\n+      { A(1) },\n+      { A(2) },\n+      { A(3) }\n+    };\n+\n+  // Make sure emplace will imply reallocation.\n+  VERIFY( va.capacity() == 3 );\n+\n+  va.emplace(va.begin(), va.begin());\n+\n+  VERIFY( va.size() == 4 );\n+  VERIFY( va[0]._i == 1 );\n+}\n+\n+void\n+test04()\n+{\n+  std::vector<A> va =\n+    {\n+      { A(1) },\n+      { A(2) },\n+      { A(3) }\n+    };\n+\n+  // Make sure emplace won't reallocate.\n+  va.reserve(4);\n+  va.emplace(va.begin(), va.begin());\n+\n+  VERIFY( va.size() == 4 );\n+  VERIFY( va[0]._i == 1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}, {"sha": "9944cbbfbb7309bfb80c4490ce2f7bda655c4f30", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/insert/self_insert.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/097e8994956a7307883226479491c402af1e4e7e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Finsert%2Fself_insert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/097e8994956a7307883226479491c402af1e4e7e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Finsert%2Fself_insert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Finsert%2Fself_insert.cc?ref=097e8994956a7307883226479491c402af1e4e7e", "patch": "@@ -0,0 +1,70 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+\n+#include \"testsuite_hooks.h\"\n+\n+bool test __attribute__((unused)) = true;\n+\n+void test01()\n+{\n+  std::vector<std::vector<int>> vv =\n+    {\n+      { 2, 3 },\n+      { 4, 5 },\n+      { 0, 1 }\n+    };\n+\n+  // Make sure it doesn't reallocate during insertion.\n+  vv.reserve(4);\n+\n+  vv.insert(vv.begin(), vv[0]);\n+\n+  VERIFY( vv.size() == 4 );\n+  VERIFY( vv[0].size() == 2 );\n+  VERIFY( vv[0][0] == 2 );\n+  VERIFY( vv[0][1] == 3 );\n+}\n+\n+void test02()\n+{\n+  std::vector<std::vector<int>> vv =\n+    {\n+      { 2, 3 },\n+      { 4, 5 },\n+      { 0, 1 }\n+    };\n+\n+  // Make sure we will reallocate for insertion.\n+  VERIFY( vv.capacity() == 3 );\n+\n+  vv.insert(vv.begin(), vv[0]);\n+\n+  VERIFY( vv.size() == 4 );\n+  VERIFY( vv[0].size() == 2 );\n+  VERIFY( vv[0][0] == 2 );\n+  VERIFY( vv[0][1] == 3 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}]}