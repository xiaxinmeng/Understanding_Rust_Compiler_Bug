{"sha": "5f892aa09229fb2b545b03002266f89bd653d39f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY4OTJhYTA5MjI5ZmIyYjU0NWIwMzAwMjI2NmY4OWJkNjUzZDM5Zg==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-03-08T18:31:08Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2011-03-08T18:31:08Z"}, "message": "avr.h (REGISTER_MOVE_COST, [...]): Remove.\n\n       * config/avr/avr.h (REGISTER_MOVE_COST, MEMORY_MOVE_COST): Remove.\n       * config/avr/avr.c (TARGET_REGISTER_MOVE_COST,\n       TARGET_MEMORY_MOVE_COST): Define.\n       (avr_register_move_cost, avr_memory_move_cost): New Functions.\n\nFrom-SVN: r170788", "tree": {"sha": "9a23a0f762a8f92e0ac7663fce958a2c1af38200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a23a0f762a8f92e0ac7663fce958a2c1af38200"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f892aa09229fb2b545b03002266f89bd653d39f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f892aa09229fb2b545b03002266f89bd653d39f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f892aa09229fb2b545b03002266f89bd653d39f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f892aa09229fb2b545b03002266f89bd653d39f/comments", "author": null, "committer": null, "parents": [{"sha": "cf73ff76423658ae77821b2e769b217d2c4cf3bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf73ff76423658ae77821b2e769b217d2c4cf3bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf73ff76423658ae77821b2e769b217d2c4cf3bb"}], "stats": {"total": 48, "additions": 39, "deletions": 9}, "files": [{"sha": "6b1a72048c4845f14a843efd9e388d83fc29357e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f892aa09229fb2b545b03002266f89bd653d39f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f892aa09229fb2b545b03002266f89bd653d39f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f892aa09229fb2b545b03002266f89bd653d39f", "patch": "@@ -1,3 +1,10 @@\n+2011-03-08  Georg-Johann Lay  <avr@gjlay.de>\n+\n+       * config/avr/avr.h (REGISTER_MOVE_COST, MEMORY_MOVE_COST): Remove.\n+       * config/avr/avr.c (TARGET_REGISTER_MOVE_COST,\n+       TARGET_MEMORY_MOVE_COST): Define.\n+       (avr_register_move_cost, avr_memory_move_cost): New Functions.\n+\n 2011-03-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/47881"}, {"sha": "92cc7b65ba57394707312f99027e98bb43cd3897", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f892aa09229fb2b545b03002266f89bd653d39f/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f892aa09229fb2b545b03002266f89bd653d39f/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=5f892aa09229fb2b545b03002266f89bd653d39f", "patch": "@@ -82,6 +82,8 @@ static unsigned int avr_section_type_flags (tree, const char *, int);\n static void avr_reorg (void);\n static void avr_asm_out_ctor (rtx, int);\n static void avr_asm_out_dtor (rtx, int);\n+static int avr_register_move_cost (enum machine_mode, reg_class_t, reg_class_t);\n+static int avr_memory_move_cost (enum machine_mode, reg_class_t, bool);\n static int avr_operand_rtx_cost (rtx, enum machine_mode, enum rtx_code, bool);\n static bool avr_rtx_costs (rtx, int, int, int *, bool);\n static int avr_address_cost (rtx, bool);\n@@ -174,6 +176,10 @@ static const struct default_options avr_option_optimization_table[] =\n #define TARGET_INSERT_ATTRIBUTES avr_insert_attributes\n #undef TARGET_SECTION_TYPE_FLAGS\n #define TARGET_SECTION_TYPE_FLAGS avr_section_type_flags\n+#undef TARGET_REGISTER_MOVE_COST\n+#define TARGET_REGISTER_MOVE_COST avr_register_move_cost\n+#undef TARGET_MEMORY_MOVE_COST\n+#define TARGET_MEMORY_MOVE_COST avr_memory_move_cost\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS avr_rtx_costs\n #undef TARGET_ADDRESS_COST\n@@ -5132,6 +5138,32 @@ order_regs_for_local_alloc (void)\n }\n \n \n+/* Implement `TARGET_REGISTER_MOVE_COST' */\n+\n+static int\n+avr_register_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n+                        reg_class_t from, reg_class_t to)\n+{\n+  return (from == STACK_REG ? 6\n+          : to == STACK_REG ? 12\n+          : 2);\n+}\n+\n+\n+/* Implement `TARGET_MEMORY_MOVE_COST' */\n+\n+static int\n+avr_memory_move_cost (enum machine_mode mode, reg_class_t rclass ATTRIBUTE_UNUSED,\n+                      bool in ATTRIBUTE_UNUSED)\n+{\n+  return (mode == QImode ? 2\n+          : mode == HImode ? 4\n+          : mode == SImode ? 8\n+          : mode == SFmode ? 8\n+          : 16);\n+}\n+\n+\n /* Mutually recursive subroutine of avr_rtx_cost for calculating the\n    cost of an RTX operand given its context.  X is the rtx of the\n    operand, MODE is its mode, and OUTER is the rtx_code of this"}, {"sha": "b52cf170cbc02bd021bd6e8b7f396d8017040ae7", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f892aa09229fb2b545b03002266f89bd653d39f/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f892aa09229fb2b545b03002266f89bd653d39f/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=5f892aa09229fb2b545b03002266f89bd653d39f", "patch": "@@ -447,15 +447,6 @@ do {\t\t\t\t\t\t\t\t\t    \\\n \n #define LEGITIMATE_CONSTANT_P(X) 1\n \n-#define REGISTER_MOVE_COST(MODE, FROM, TO) ((FROM) == STACK_REG ? 6 \\\n-\t\t\t\t\t    : (TO) == STACK_REG ? 12 \\\n-\t\t\t\t\t    : 2)\n-\n-#define MEMORY_MOVE_COST(MODE,CLASS,IN) ((MODE)==QImode ? 2 :\t\\\n-\t\t\t\t\t (MODE)==HImode ? 4 :\t\\\n-\t\t\t\t\t (MODE)==SImode ? 8 :\t\\\n-\t\t\t\t\t (MODE)==SFmode ? 8 : 16)\n-\n #define BRANCH_COST(speed_p, predictable_p) 0\n \n #define SLOW_BYTE_ACCESS 0"}]}