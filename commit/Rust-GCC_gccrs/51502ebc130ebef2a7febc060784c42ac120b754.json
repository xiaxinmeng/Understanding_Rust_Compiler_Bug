{"sha": "51502ebc130ebef2a7febc060784c42ac120b754", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE1MDJlYmMxMzBlYmVmMmE3ZmViYzA2MDc4NGM0MmFjMTIwYjc1NA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-10-15T01:05:30Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-10-15T01:05:30Z"}, "message": "static_members.cc (test02): Less provincial.\n\n\n2002-10-14  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/22_locale/static_members.cc (test02): Less provincial.\n\nFrom-SVN: r58144", "tree": {"sha": "f246406619fb350bed7c266a64cb993393128a01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f246406619fb350bed7c266a64cb993393128a01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51502ebc130ebef2a7febc060784c42ac120b754", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51502ebc130ebef2a7febc060784c42ac120b754", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51502ebc130ebef2a7febc060784c42ac120b754", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51502ebc130ebef2a7febc060784c42ac120b754/comments", "author": null, "committer": null, "parents": [{"sha": "9fead1f53ba58a53640120443d958aef005ac6d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fead1f53ba58a53640120443d958aef005ac6d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fead1f53ba58a53640120443d958aef005ac6d5"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "b4bf7700ae5651c76156e4e62bba4fc1cfc9a35a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51502ebc130ebef2a7febc060784c42ac120b754/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51502ebc130ebef2a7febc060784c42ac120b754/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=51502ebc130ebef2a7febc060784c42ac120b754", "patch": "@@ -1,3 +1,7 @@\n+2002-10-14  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/22_locale/static_members.cc (test02): Less provincial.\n+\n 2002-10-14  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/22_locale/static_members.cc (test02): Disable for "}, {"sha": "9811dd9a8067dfea65742de8a0b86bc44b3e3eb0", "filename": "libstdc++-v3/testsuite/22_locale/static_members.cc", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51502ebc130ebef2a7febc060784c42ac120b754/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fstatic_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51502ebc130ebef2a7febc060784c42ac120b754/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fstatic_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fstatic_members.cc?ref=51502ebc130ebef2a7febc060784c42ac120b754", "patch": "@@ -67,34 +67,39 @@ void test02()\n   using namespace std;\n   bool test = true;\n   \n-  // If the underlying locale doesn't support these names, setlocale\n-  // won't be reset. Therefore, disable unless we know named locales work.\n-#if _GLIBCPP_C_LOCALE_GNU\n-\n   const string ph(\"en_PH\");\n   const string mx(\"es_MX\");\n+  const char* orig = setlocale(LC_ALL, NULL);\n+  const char* testph = setlocale(LC_ALL, ph.c_str());\n+  const char* testmx = setlocale(LC_ALL, mx.c_str());\n+  setlocale(LC_ALL, orig);\n \n-  const locale loc_ph(ph.c_str());\n-  const locale loc_mx(mx.c_str());\n-\n-  // Use setlocale between two calls to locale(\"\")\n-  const locale loc_env_1(\"\");\n-  setlocale(LC_ALL, ph.c_str());\n-  const locale loc_env_2(\"\");\n-  VERIFY( loc_env_1 == loc_env_2 );\n-\n-  // Change global locale.\n-  locale global_orig = locale::global(loc_mx);\n-  const char* lc_all_mx = setlocale(LC_ALL, NULL);\n-  if (lc_all_mx)\n+  // If the underlying locale doesn't support these names, setlocale\n+  // won't be reset. Therefore, disable unless we know these specific\n+  // named locales work.\n+  if (testph && testmx)\n     {\n-      cout << \"lc_all_mx is \" << lc_all_mx << endl;\n-      VERIFY( mx == lc_all_mx );\n+      const locale loc_ph(ph.c_str());\n+      const locale loc_mx(mx.c_str());\n+      \n+      // Use setlocale between two calls to locale(\"\")\n+      const locale loc_env_1(\"\");\n+      setlocale(LC_ALL, ph.c_str());\n+      const locale loc_env_2(\"\");\n+      VERIFY( loc_env_1 == loc_env_2 );\n+      \n+      // Change global locale.\n+      locale global_orig = locale::global(loc_mx);\n+      const char* lc_all_mx = setlocale(LC_ALL, NULL);\n+      if (lc_all_mx)\n+\t{\n+\t  cout << \"lc_all_mx is \" << lc_all_mx << endl;\n+\t  VERIFY( mx == lc_all_mx );\n+\t}\n+      \n+      // Restore global settings.\n+      locale::global(global_orig);\n     }\n-\n-  // Restore global settings.\n-  locale::global(global_orig);\n-#endif\n }\n \n // Static counter for use in checking ctors/dtors."}]}