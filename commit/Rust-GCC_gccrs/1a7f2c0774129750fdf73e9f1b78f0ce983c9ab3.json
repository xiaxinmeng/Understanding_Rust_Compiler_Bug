{"sha": "1a7f2c0774129750fdf73e9f1b78f0ce983c9ab3", "node_id": "C_kwDOANBUbNoAKDFhN2YyYzA3NzQxMjk3NTBmZGY3M2U5ZjFiNzhmMGNlOTgzYzlhYjM", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-11-02T13:54:32Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-11-17T22:32:30Z"}, "message": "libcpp: escape non-ASCII source bytes in -Wbidi-chars= [PR103026]\n\nThis flags rich_locations associated with -Wbidi-chars= so that\nnon-ASCII bytes will be escaped when printing the source lines\n(using the diagnostics support I added in\nr12-4825-gbd5e882cf6e0def3dd1bc106075d59a303fe0d1e).\n\nIn particular, this ensures that the printed source lines will\nbe pure ASCII, and thus the visual ordering of the characters\nwill be the same as the logical ordering.\n\nBefore:\n\n  Wbidi-chars-1.c: In function \u2018main\u2019:\n  Wbidi-chars-1.c:6:43: warning: unpaired UTF-8 bidirectional control character detected [-Wbidi-chars=]\n      6 |     /*\u202e } \u2066if (isAdmin)\u2069 \u2066 begin admins only */\n        |                                           ^\n  Wbidi-chars-1.c:9:28: warning: unpaired UTF-8 bidirectional control character detected [-Wbidi-chars=]\n      9 |     /* end admins only \u202e { \u2066*/\n        |                            ^\n\n  Wbidi-chars-11.c:6:15: warning: UTF-8 vs UCN mismatch when closing a context by \"U+202C (POP DIRECTIONAL FORMATTING)\" [-Wbidi-chars=]\n      6 | int LRE_\u202a_PDF_\\u202c;\n        |               ^\n  Wbidi-chars-11.c:8:19: warning: UTF-8 vs UCN mismatch when closing a context by \"U+202C (POP DIRECTIONAL FORMATTING)\" [-Wbidi-chars=]\n      8 | int LRE_\\u202a_PDF_\u202c_;\n        |                   ^\n  Wbidi-chars-11.c:10:28: warning: UTF-8 vs UCN mismatch when closing a context by \"U+202C (POP DIRECTIONAL FORMATTING)\" [-Wbidi-chars=]\n     10 | const char *s1 = \"LRE_\u202a_PDF_\\u202c\";\n        |                            ^\n  Wbidi-chars-11.c:12:33: warning: UTF-8 vs UCN mismatch when closing a context by \"U+202C (POP DIRECTIONAL FORMATTING)\" [-Wbidi-chars=]\n     12 | const char *s2 = \"LRE_\\u202a_PDF_\u202c\";\n        |                                 ^\n\nAfter:\n\n  Wbidi-chars-1.c: In function \u2018main\u2019:\n  Wbidi-chars-1.c:6:43: warning: unpaired UTF-8 bidirectional control character detected [-Wbidi-chars=]\n      6 |     /*<U+202E> } <U+2066>if (isAdmin)<U+2069> <U+2066> begin admins only */\n        |                                                                           ^\n  Wbidi-chars-1.c:9:28: warning: unpaired UTF-8 bidirectional control character detected [-Wbidi-chars=]\n      9 |     /* end admins only <U+202E> { <U+2066>*/\n        |                                            ^\n\n  Wbidi-chars-11.c:6:15: warning: UTF-8 vs UCN mismatch when closing a context by \"U+202C (POP DIRECTIONAL FORMATTING)\" [-Wbidi-chars=]\n      6 | int LRE_<U+202A>_PDF_\\u202c;\n        |                       ^\n  Wbidi-chars-11.c:8:19: warning: UTF-8 vs UCN mismatch when closing a context by \"U+202C (POP DIRECTIONAL FORMATTING)\" [-Wbidi-chars=]\n      8 | int LRE_\\u202a_PDF_<U+202C>_;\n        |                   ^\n  Wbidi-chars-11.c:10:28: warning: UTF-8 vs UCN mismatch when closing a context by \"U+202C (POP DIRECTIONAL FORMATTING)\" [-Wbidi-chars=]\n     10 | const char *s1 = \"LRE_<U+202A>_PDF_\\u202c\";\n        |                                    ^\n  Wbidi-chars-11.c:12:33: warning: UTF-8 vs UCN mismatch when closing a context by \"U+202C (POP DIRECTIONAL FORMATTING)\" [-Wbidi-chars=]\n     12 | const char *s2 = \"LRE_\\u202a_PDF_<U+202C>\";\n        |                                 ^\n\nlibcpp/ChangeLog:\n\tPR preprocessor/103026\n\t* lex.c (maybe_warn_bidi_on_close): Use a rich_location\n\tand call set_escape_on_output (true) on it.\n\t(maybe_warn_bidi_on_char): Likewise.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "c75c04138fd6ba0a5f4c2c837e8a6b93e6ff5af4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c75c04138fd6ba0a5f4c2c837e8a6b93e6ff5af4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a7f2c0774129750fdf73e9f1b78f0ce983c9ab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7f2c0774129750fdf73e9f1b78f0ce983c9ab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a7f2c0774129750fdf73e9f1b78f0ce983c9ab3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7f2c0774129750fdf73e9f1b78f0ce983c9ab3/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea9e0d6c27405d256b4888e9e860e469037c911d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea9e0d6c27405d256b4888e9e860e469037c911d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea9e0d6c27405d256b4888e9e860e469037c911d"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "2421d6c0f402394e81cf054516cd4aa2b80ac2d9", "filename": "libcpp/lex.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7f2c0774129750fdf73e9f1b78f0ce983c9ab3/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7f2c0774129750fdf73e9f1b78f0ce983c9ab3/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=1a7f2c0774129750fdf73e9f1b78f0ce983c9ab3", "patch": "@@ -1427,9 +1427,11 @@ maybe_warn_bidi_on_close (cpp_reader *pfile, const uchar *p)\n       const location_t loc\n \t= linemap_position_for_column (pfile->line_table,\n \t\t\t\t       CPP_BUF_COLUMN (pfile->buffer, p));\n-      cpp_warning_with_line (pfile, CPP_W_BIDIRECTIONAL, loc, 0,\n-\t\t\t     \"unpaired UTF-8 bidirectional control character \"\n-\t\t\t     \"detected\");\n+      rich_location rich_loc (pfile->line_table, loc);\n+      rich_loc.set_escape_on_output (true);\n+      cpp_warning_at (pfile, CPP_W_BIDIRECTIONAL, &rich_loc,\n+\t\t      \"unpaired UTF-8 bidirectional control character \"\n+\t\t      \"detected\");\n     }\n   /* We're done with this context.  */\n   bidi::on_close ();\n@@ -1454,6 +1456,9 @@ maybe_warn_bidi_on_char (cpp_reader *pfile, const uchar *p, bidi::kind kind,\n       const location_t loc\n \t= linemap_position_for_column (pfile->line_table,\n \t\t\t\t       CPP_BUF_COLUMN (pfile->buffer, p));\n+      rich_location rich_loc (pfile->line_table, loc);\n+      rich_loc.set_escape_on_output (true);\n+\n       /* It seems excessive to warn about a PDI/PDF that is closing\n \t an opened context because we've already warned about the\n \t opening character.  Except warn when we have a UCN x UTF-8\n@@ -1462,20 +1467,20 @@ maybe_warn_bidi_on_char (cpp_reader *pfile, const uchar *p, bidi::kind kind,\n \t{\n \t  if (warn_bidi == bidirectional_unpaired\n \t      && bidi::current_ctx_ucn_p () != ucn_p)\n-\t    cpp_warning_with_line (pfile, CPP_W_BIDIRECTIONAL, loc, 0,\n-\t\t\t\t   \"UTF-8 vs UCN mismatch when closing \"\n-\t\t\t\t   \"a context by \\\"%s\\\"\", bidi::to_str (kind));\n+\t    cpp_warning_at (pfile, CPP_W_BIDIRECTIONAL, &rich_loc,\n+\t\t\t    \"UTF-8 vs UCN mismatch when closing \"\n+\t\t\t    \"a context by \\\"%s\\\"\", bidi::to_str (kind));\n \t}\n       else if (warn_bidi == bidirectional_any)\n \t{\n \t  if (kind == bidi::kind::PDF || kind == bidi::kind::PDI)\n-\t    cpp_warning_with_line (pfile, CPP_W_BIDIRECTIONAL, loc, 0,\n-\t\t\t\t   \"\\\"%s\\\" is closing an unopened context\",\n-\t\t\t\t   bidi::to_str (kind));\n+\t    cpp_warning_at (pfile, CPP_W_BIDIRECTIONAL, &rich_loc,\n+\t\t\t    \"\\\"%s\\\" is closing an unopened context\",\n+\t\t\t    bidi::to_str (kind));\n \t  else\n-\t    cpp_warning_with_line (pfile, CPP_W_BIDIRECTIONAL, loc, 0,\n-\t\t\t\t   \"found problematic Unicode character \\\"%s\\\"\",\n-\t\t\t\t   bidi::to_str (kind));\n+\t    cpp_warning_at (pfile, CPP_W_BIDIRECTIONAL, &rich_loc,\n+\t\t\t    \"found problematic Unicode character \\\"%s\\\"\",\n+\t\t\t    bidi::to_str (kind));\n \t}\n     }\n   /* We're done with this context.  */"}]}