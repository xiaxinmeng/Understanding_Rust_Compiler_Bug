{"sha": "c39dad64b8b3df3da912134d339ef5fe5c45fad0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM5ZGFkNjRiOGIzZGYzZGE5MTIxMzRkMzM5ZWY1ZmU1YzQ1ZmFkMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-11-23T19:28:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-11-23T19:28:41Z"}, "message": "re PR middle-end/69183 (ICE when using OpenMP PRIVATE keyword in OMP DO loop not explicitly encapsulated in OMP PARALLEL region)\n\n\tPR middle-end/69183\n\t* omp-low.c (build_outer_var_ref): Change lastprivate argument\n\tto code, pass it recursively, adjust uses.  For OMP_CLAUSE_PRIVATE\n\ton worksharing constructs, treat it like clauses on simd construct.\n\tFormatting fix.\n\t(lower_rec_input_clauses): For OMP_CLAUSE_PRIVATE_OUTER_REF pass\n\tOMP_CLAUSE_PRIVATE as last argument to build_outer_var_ref.\n\t(lower_lastprivate_clauses): Pass OMP_CLAUSE_LASTPRIVATE instead\n\tof true as last argument to build_outer_var_ref.\n\n\t* gfortran.dg/gomp/pr69183.f90: New test.\n\nFrom-SVN: r242793", "tree": {"sha": "5d06b113ac247902a7dfb85ee5f1f7021a0eaf1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d06b113ac247902a7dfb85ee5f1f7021a0eaf1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c39dad64b8b3df3da912134d339ef5fe5c45fad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c39dad64b8b3df3da912134d339ef5fe5c45fad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c39dad64b8b3df3da912134d339ef5fe5c45fad0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c39dad64b8b3df3da912134d339ef5fe5c45fad0/comments", "author": null, "committer": null, "parents": [{"sha": "62567da0dfe77e3c708620544f2f395f64caca13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62567da0dfe77e3c708620544f2f395f64caca13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62567da0dfe77e3c708620544f2f395f64caca13"}], "stats": {"total": 61, "additions": 48, "deletions": 13}, "files": [{"sha": "c610804b3b8f962b8ea67b6d5afe9bddc693519f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c39dad64b8b3df3da912134d339ef5fe5c45fad0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c39dad64b8b3df3da912134d339ef5fe5c45fad0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c39dad64b8b3df3da912134d339ef5fe5c45fad0", "patch": "@@ -1,6 +1,18 @@\n+2016-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/69183\n+\t* omp-low.c (build_outer_var_ref): Change lastprivate argument\n+\tto code, pass it recursively, adjust uses.  For OMP_CLAUSE_PRIVATE\n+\ton worksharing constructs, treat it like clauses on simd construct.\n+\tFormatting fix.\n+\t(lower_rec_input_clauses): For OMP_CLAUSE_PRIVATE_OUTER_REF pass\n+\tOMP_CLAUSE_PRIVATE as last argument to build_outer_var_ref.\n+\t(lower_lastprivate_clauses): Pass OMP_CLAUSE_LASTPRIVATE instead\n+\tof true as last argument to build_outer_var_ref.\n+\n 2016-11-23  Uros Bizjak  <ubizjak@gmail.com>\n \n-\t* gcc.target/config/i386.md (*movqi_internal): Calculate mode\n+\t* config/i386/i386.md (*movqi_internal): Calculate mode\n \tattribute of alternatives 7,8,9 depending on TARGET_AVX512DQ.\n \t<TYPE_MSKMOV>: Emit kmovw for MODE_HI insn mode attribute.\n \t(*k<logic><mode>): Calculate mode attribute depending on"}, {"sha": "7bcaeee240918ea54fe550fb014119ebed92990d", "filename": "gcc/omp-low.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c39dad64b8b3df3da912134d339ef5fe5c45fad0/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c39dad64b8b3df3da912134d339ef5fe5c45fad0/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=c39dad64b8b3df3da912134d339ef5fe5c45fad0", "patch": "@@ -1283,7 +1283,8 @@ build_receiver_ref (tree var, bool by_ref, omp_context *ctx)\n    this is some variable.  */\n \n static tree\n-build_outer_var_ref (tree var, omp_context *ctx, bool lastprivate = false)\n+build_outer_var_ref (tree var, omp_context *ctx,\n+\t\t     enum omp_clause_code code = OMP_CLAUSE_ERROR)\n {\n   tree x;\n \n@@ -1292,19 +1293,25 @@ build_outer_var_ref (tree var, omp_context *ctx, bool lastprivate = false)\n   else if (is_variable_sized (var))\n     {\n       x = TREE_OPERAND (DECL_VALUE_EXPR (var), 0);\n-      x = build_outer_var_ref (x, ctx, lastprivate);\n+      x = build_outer_var_ref (x, ctx, code);\n       x = build_simple_mem_ref (x);\n     }\n   else if (is_taskreg_ctx (ctx))\n     {\n       bool by_ref = use_pointer_for_field (var, NULL);\n       x = build_receiver_ref (var, by_ref, ctx);\n     }\n-  else if (gimple_code (ctx->stmt) == GIMPLE_OMP_FOR\n-\t   && gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_SIMD)\n-    {\n-      /* #pragma omp simd isn't a worksharing construct, and can reference even\n-\t private vars in its linear etc. clauses.  */\n+  else if ((gimple_code (ctx->stmt) == GIMPLE_OMP_FOR\n+\t    && gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_SIMD)\n+\t   || (code == OMP_CLAUSE_PRIVATE\n+\t       && (gimple_code (ctx->stmt) == GIMPLE_OMP_FOR\n+\t\t   || gimple_code (ctx->stmt) == GIMPLE_OMP_SECTIONS\n+\t\t   || gimple_code (ctx->stmt) == GIMPLE_OMP_SINGLE)))\n+    {\n+      /* #pragma omp simd isn't a worksharing construct, and can reference\n+\t even private vars in its linear etc. clauses.\n+\t Similarly for OMP_CLAUSE_PRIVATE with outer ref, that can refer\n+\t to private vars in all worksharing constructs.  */\n       x = NULL_TREE;\n       if (ctx->outer && is_taskreg_ctx (ctx))\n \tx = lookup_decl (var, ctx->outer);\n@@ -1313,7 +1320,7 @@ build_outer_var_ref (tree var, omp_context *ctx, bool lastprivate = false)\n       if (x == NULL_TREE)\n \tx = var;\n     }\n-  else if (lastprivate && is_taskloop_ctx (ctx))\n+  else if (code == OMP_CLAUSE_LASTPRIVATE && is_taskloop_ctx (ctx))\n     {\n       gcc_assert (ctx->outer);\n       splay_tree_node n\n@@ -1350,7 +1357,7 @@ build_outer_var_ref (tree var, omp_context *ctx, bool lastprivate = false)\n \t  gcc_assert (outer\n \t\t      && gimple_code (outer->stmt) != GIMPLE_OMP_GRID_BODY);\n \t}\n-\tx = lookup_decl (var, outer);\n+      x = lookup_decl (var, outer);\n     }\n   else if (is_reference (var))\n     /* This can happen with orphaned constructs.  If var is reference, it is\n@@ -5031,7 +5038,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t  if (is_task_ctx (ctx))\n \t\t    x = build_receiver_ref (var, false, ctx);\n \t\t  else\n-\t\t    x = build_outer_var_ref (var, ctx);\n+\t\t    x = build_outer_var_ref (var, ctx, OMP_CLAUSE_PRIVATE);\n \t\t}\n \t      else\n \t\tx = NULL;\n@@ -5697,7 +5704,7 @@ lower_lastprivate_clauses (tree clauses, tree predicate, gimple_seq *stmt_list,\n \t\tx = ovar;\n \t    }\n \t  if (!x)\n-\t    x = build_outer_var_ref (var, ctx, true);\n+\t    x = build_outer_var_ref (var, ctx, OMP_CLAUSE_LASTPRIVATE);\n \t  if (is_reference (var))\n \t    new_var = build_simple_mem_ref_loc (clause_loc, new_var);\n \t  x = lang_hooks.decls.omp_clause_assign_op (c, x, new_var);"}, {"sha": "6c959289cf49dcd1ef852c9eef5e3adfad582891", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c39dad64b8b3df3da912134d339ef5fe5c45fad0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c39dad64b8b3df3da912134d339ef5fe5c45fad0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c39dad64b8b3df3da912134d339ef5fe5c45fad0", "patch": "@@ -1,4 +1,9 @@\n-2016-11-23  Kito Cheng <kito.cheng@gmail.com>\n+2016-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/69183\n+\t* gfortran.dg/gomp/pr69183.f90: New test.\n+\n+2016-11-23  Kito Cheng  <kito.cheng@gmail.com>\n \n \tPR target/78230\n \t* gcc.dg/torture/pr66178.c (test): Use uintptr_t instead of int."}, {"sha": "5dc985a8eb486e334be463dd831acde12366b272", "filename": "gcc/testsuite/gfortran.dg/gomp/pr69183.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c39dad64b8b3df3da912134d339ef5fe5c45fad0/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr69183.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c39dad64b8b3df3da912134d339ef5fe5c45fad0/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr69183.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr69183.f90?ref=c39dad64b8b3df3da912134d339ef5fe5c45fad0", "patch": "@@ -0,0 +1,11 @@\n+! PR middle-end/69183\n+! { dg-do compile }\n+\n+program pr69183\n+  integer, allocatable :: z\n+  integer :: i\n+  !$omp do private(z)\n+  do i = 1, 2\n+    z = i\n+  end do\n+end"}]}