{"sha": "43c371e8b0dc21d3b1b6d87cc7f29d6d53ae5d82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNjMzcxZThiMGRjMjFkM2IxYjZkODdjYzdmMjlkNmQ1M2FlNWQ4Mg==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2017-07-11T12:25:01Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2017-07-11T12:25:01Z"}, "message": "Add extra initialization of broadcasted condition variables\n\n2017-07-11  Tom de Vries  <tom@codesourcery.com>\n\n\t* config/nvptx/nvptx.c (WORKAROUND_PTXJIT_BUG): New macro.\n\t(bb_first_real_insn): New function.\n\t(nvptx_single): Add extra initialization of broadcasted condition\n\tvariables.\n\nFrom-SVN: r250129", "tree": {"sha": "51a2189c41e1bf5a58a6b79774b0005b57b73b25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51a2189c41e1bf5a58a6b79774b0005b57b73b25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43c371e8b0dc21d3b1b6d87cc7f29d6d53ae5d82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43c371e8b0dc21d3b1b6d87cc7f29d6d53ae5d82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43c371e8b0dc21d3b1b6d87cc7f29d6d53ae5d82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43c371e8b0dc21d3b1b6d87cc7f29d6d53ae5d82/comments", "author": null, "committer": null, "parents": [{"sha": "3d36348a32186307ce50d748834df29abda2a951", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d36348a32186307ce50d748834df29abda2a951", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d36348a32186307ce50d748834df29abda2a951"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "c960cd76098e43d47b9786bff974e7d1e749b2b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43c371e8b0dc21d3b1b6d87cc7f29d6d53ae5d82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43c371e8b0dc21d3b1b6d87cc7f29d6d53ae5d82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43c371e8b0dc21d3b1b6d87cc7f29d6d53ae5d82", "patch": "@@ -1,3 +1,10 @@\n+2017-07-11  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* config/nvptx/nvptx.c (WORKAROUND_PTXJIT_BUG): New macro.\n+\t(bb_first_real_insn): New function.\n+\t(nvptx_single): Add extra initialization of broadcasted condition\n+\tvariables.\n+\n 2017-07-11  Nathan Sidwell  <nathan@acm.org>\n \n \t* dwarf2out.c (gen_member_die): Remove useless check for anon ctors."}, {"sha": "c8847a5dbba66a6256c8e0f923c26b4b3b809635", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43c371e8b0dc21d3b1b6d87cc7f29d6d53ae5d82/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43c371e8b0dc21d3b1b6d87cc7f29d6d53ae5d82/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=43c371e8b0dc21d3b1b6d87cc7f29d6d53ae5d82", "patch": "@@ -74,6 +74,8 @@\n /* This file should be included last.  */\n #include \"target-def.h\"\n \n+#define WORKAROUND_PTXJIT_BUG 1\n+\n /* The various PTX memory areas an object might reside in.  */\n enum nvptx_data_area\n {\n@@ -3844,6 +3846,24 @@ nvptx_wsync (bool after)\n   return gen_nvptx_barsync (GEN_INT (after));\n }\n \n+#if WORKAROUND_PTXJIT_BUG\n+/* Return first real insn in BB, or return NULL_RTX if BB does not contain\n+   real insns.  */\n+\n+static rtx_insn *\n+bb_first_real_insn (basic_block bb)\n+{\n+  rtx_insn *insn;\n+\n+  /* Find first insn of from block.  */\n+  FOR_BB_INSNS (bb, insn)\n+    if (INSN_P (insn))\n+      return insn;\n+\n+  return 0;\n+}\n+#endif\n+\n /* Single neutering according to MASK.  FROM is the incoming block and\n    TO is the outgoing block.  These may be the same block. Insert at\n    start of FROM:\n@@ -3958,6 +3978,39 @@ nvptx_single (unsigned mask, basic_block from, basic_block to)\n       if (GOMP_DIM_MASK (GOMP_DIM_VECTOR) == mask)\n \t{\n \t  /* Vector mode only, do a shuffle.  */\n+#if WORKAROUND_PTXJIT_BUG\n+\t  /* The branch condition %rcond is propagated like this:\n+\n+\t\t{\n+\t\t    .reg .u32 %x;\n+\t\t    mov.u32 %x,%tid.x;\n+\t\t    setp.ne.u32 %rnotvzero,%x,0;\n+\t\t }\n+\n+\t\t @%rnotvzero bra Lskip;\n+\t\t setp.<op>.<type> %rcond,op1,op2;\n+\t\t Lskip:\n+\t\t selp.u32 %rcondu32,1,0,%rcond;\n+\t\t shfl.idx.b32 %rcondu32,%rcondu32,0,31;\n+\t\t setp.ne.u32 %rcond,%rcondu32,0;\n+\n+\t     There seems to be a bug in the ptx JIT compiler (observed at driver\n+\t     version 381.22, at -O1 and higher for sm_61), that drops the shfl\n+\t     unless %rcond is initialized to something before 'bra Lskip'.  The\n+\t     bug is not observed with ptxas from cuda 8.0.61.\n+\n+\t     It is true that the code is non-trivial: at Lskip, %rcond is\n+\t     uninitialized in threads 1-31, and after the selp the same holds\n+\t     for %rcondu32.  But shfl propagates the defined value in thread 0\n+\t     to threads 1-31, so after the shfl %rcondu32 is defined in threads\n+\t     0-31, and after the setp.ne %rcond is defined in threads 0-31.\n+\n+\t     There is nothing in the PTX spec to suggest that this is wrong, or\n+\t     to explain why the extra initialization is needed.  So, we classify\n+\t     it as a JIT bug, and the extra initialization as workaround.  */\n+\t  emit_insn_before (gen_movbi (pvar, const0_rtx),\n+\t\t\t    bb_first_real_insn (from));\n+#endif\n \t  emit_insn_before (nvptx_gen_vcast (pvar), tail);\n \t}\n       else"}]}