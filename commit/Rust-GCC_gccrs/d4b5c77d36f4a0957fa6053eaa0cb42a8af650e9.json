{"sha": "d4b5c77d36f4a0957fa6053eaa0cb42a8af650e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRiNWM3N2QzNmY0YTA5NTdmYTYwNTNlYWEwY2I0MmE4YWY2NTBlOQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-05-24T13:55:19Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-05-24T13:55:19Z"}, "message": "[ARM][2/4] Replace casts of 1 to HOST_WIDE_INT by HOST_WIDE_INT_1 and HOST_WIDE_INT_1U\n\n\t* config/arm/arm.md (andsi3): Replace cast of 1 to HOST_WIDE_INT\n\twith HOST_WIDE_INT_1.\n\t(insv): Likewise.\n\t* config/arm/arm.c (optimal_immediate_sequence): Replace cast of\n\t1 to unsigned HOST_WIDE_INT with HOST_WIDE_INT_1U.\n\t(arm_canonicalize_comparison): Likewise.\n\t(thumb1_rtx_costs): Replace cast of 1 to HOST_WIDE_INT with\n\tHOST_WIDE_INT_1.\n\t(thumb1_size_rtx_costs): Likewise.\n\t(vfp_const_double_index): Replace cast of 1 to unsigned\n\tHOST_WIDE_INT with HOST_WIDE_INT_1U.\n\t(get_jump_table_size): Replace cast of 1 to HOST_WIDE_INT with\n\tHOST_WIDE_INT_1.\n\t(arm_asan_shadow_offset): Replace cast of 1 to unsigned\n\tHOST_WIDE_INT with HOST_WIDE_INT_1U.\n\t* config/arm/neon.md (vec_set<mode>): Replace cast of 1 to\n\tHOST_WIDE_INT with HOST_WIDE_INT_1.\n\nFrom-SVN: r236638", "tree": {"sha": "a2c72250a2860ede97e66964fdedff632761d823", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2c72250a2860ede97e66964fdedff632761d823"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4b5c77d36f4a0957fa6053eaa0cb42a8af650e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b5c77d36f4a0957fa6053eaa0cb42a8af650e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4b5c77d36f4a0957fa6053eaa0cb42a8af650e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b5c77d36f4a0957fa6053eaa0cb42a8af650e9/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abd3a68c1343af515a1f9b5e60f2b6ed94ee1d7a"}], "stats": {"total": 46, "additions": 33, "deletions": 13}, "files": [{"sha": "5b3a9f02300693bf78cc84c00f02a74f2a1a39cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b5c77d36f4a0957fa6053eaa0cb42a8af650e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b5c77d36f4a0957fa6053eaa0cb42a8af650e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4b5c77d36f4a0957fa6053eaa0cb42a8af650e9", "patch": "@@ -1,3 +1,23 @@\n+2016-05-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm.md (andsi3): Replace cast of 1 to HOST_WIDE_INT\n+\twith HOST_WIDE_INT_1.\n+\t(insv): Likewise.\n+\t* config/arm/arm.c (optimal_immediate_sequence): Replace cast of\n+\t1 to unsigned HOST_WIDE_INT with HOST_WIDE_INT_1U.\n+\t(arm_canonicalize_comparison): Likewise.\n+\t(thumb1_rtx_costs): Replace cast of 1 to HOST_WIDE_INT with\n+\tHOST_WIDE_INT_1.\n+\t(thumb1_size_rtx_costs): Likewise.\n+\t(vfp_const_double_index): Replace cast of 1 to unsigned\n+\tHOST_WIDE_INT with HOST_WIDE_INT_1U.\n+\t(get_jump_table_size): Replace cast of 1 to HOST_WIDE_INT with\n+\tHOST_WIDE_INT_1.\n+\t(arm_asan_shadow_offset): Replace cast of 1 to unsigned\n+\tHOST_WIDE_INT with HOST_WIDE_INT_1U.\n+\t* config/arm/neon.md (vec_set<mode>): Replace cast of 1 to\n+\tHOST_WIDE_INT with HOST_WIDE_INT_1.\n+\n 2016-05-24  Marek Polacek  <polacek@redhat.com>\n \n \t* tree-cfg.h (should_remove_lhs_p): New predicate."}, {"sha": "21d09b8ad775f795bcddae12a4f233a5cf53d74b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b5c77d36f4a0957fa6053eaa0cb42a8af650e9/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b5c77d36f4a0957fa6053eaa0cb42a8af650e9/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d4b5c77d36f4a0957fa6053eaa0cb42a8af650e9", "patch": "@@ -4113,7 +4113,7 @@ optimal_immediate_sequence (enum rtx_code code, unsigned HOST_WIDE_INT val,\n      yield a shorter sequence, we may as well use zero.  */\n   insns1 = optimal_immediate_sequence_1 (code, val, return_sequence, best_start);\n   if (best_start != 0\n-      && ((((unsigned HOST_WIDE_INT) 1) << best_start) < val))\n+      && ((HOST_WIDE_INT_1U << best_start) < val))\n     {\n       insns2 = optimal_immediate_sequence_1 (code, val, &tmp_sequence, 0);\n       if (insns2 <= insns1)\n@@ -4944,7 +4944,7 @@ arm_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n   if (mode == VOIDmode)\n     mode = GET_MODE (*op1);\n \n-  maxval = (((unsigned HOST_WIDE_INT) 1) << (GET_MODE_BITSIZE(mode) - 1)) - 1;\n+  maxval = (HOST_WIDE_INT_1U << (GET_MODE_BITSIZE (mode) - 1)) - 1;\n \n   /* For DImode, we have GE/LT/GEU/LTU comparisons.  In ARM mode\n      we can also use cmp/cmpeq for GTU/LEU.  GT/LE must be either\n@@ -8320,8 +8320,8 @@ thumb1_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer)\n \t  int i;\n \t  /* This duplicates the tests in the andsi3 expander.  */\n \t  for (i = 9; i <= 31; i++)\n-\t    if ((((HOST_WIDE_INT) 1) << i) - 1 == INTVAL (x)\n-\t\t|| (((HOST_WIDE_INT) 1) << i) - 1 == ~INTVAL (x))\n+\t    if ((HOST_WIDE_INT_1 << i) - 1 == INTVAL (x)\n+\t\t|| (HOST_WIDE_INT_1 << i) - 1 == ~INTVAL (x))\n \t      return COSTS_N_INSNS (2);\n \t}\n       else if (outer == ASHIFT || outer == ASHIFTRT\n@@ -9082,8 +9082,8 @@ thumb1_size_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer)\n           int i;\n           /* This duplicates the tests in the andsi3 expander.  */\n           for (i = 9; i <= 31; i++)\n-            if ((((HOST_WIDE_INT) 1) << i) - 1 == INTVAL (x)\n-                || (((HOST_WIDE_INT) 1) << i) - 1 == ~INTVAL (x))\n+            if ((HOST_WIDE_INT_1 << i) - 1 == INTVAL (x)\n+                || (HOST_WIDE_INT_1 << i) - 1 == ~INTVAL (x))\n               return COSTS_N_INSNS (2);\n         }\n       else if (outer == ASHIFT || outer == ASHIFTRT\n@@ -12258,7 +12258,7 @@ vfp3_const_double_index (rtx x)\n \n   /* We can permit four significant bits of mantissa only, plus a high bit\n      which is always 1.  */\n-  mask = ((unsigned HOST_WIDE_INT)1 << (point_pos - 5)) - 1;\n+  mask = (HOST_WIDE_INT_1U << (point_pos - 5)) - 1;\n   if ((mantissa & mask) != 0)\n     return -1;\n \n@@ -16364,7 +16364,7 @@ get_jump_table_size (rtx_jump_table_data *insn)\n \t{\n \tcase 1:\n \t  /* Round up size  of TBB table to a halfword boundary.  */\n-\t  size = (size + 1) & ~(HOST_WIDE_INT)1;\n+\t  size = (size + 1) & ~HOST_WIDE_INT_1;\n \t  break;\n \tcase 2:\n \t  /* No padding necessary for TBH.  */\n@@ -29859,7 +29859,7 @@ aarch_macro_fusion_pair_p (rtx_insn* prev, rtx_insn* curr)\n static unsigned HOST_WIDE_INT\n arm_asan_shadow_offset (void)\n {\n-  return (unsigned HOST_WIDE_INT) 1 << 29;\n+  return HOST_WIDE_INT_1U << 29;\n }\n \n "}, {"sha": "1e61a60e11c07791a5663f9893d94ecd206bf359", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b5c77d36f4a0957fa6053eaa0cb42a8af650e9/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b5c77d36f4a0957fa6053eaa0cb42a8af650e9/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=d4b5c77d36f4a0957fa6053eaa0cb42a8af650e9", "patch": "@@ -2140,13 +2140,13 @@\n \n           for (i = 9; i <= 31; i++)\n \t    {\n-\t      if ((((HOST_WIDE_INT) 1) << i) - 1 == INTVAL (operands[2]))\n+\t      if ((HOST_WIDE_INT_1 << i) - 1 == INTVAL (operands[2]))\n \t        {\n \t          emit_insn (gen_extzv (operands[0], operands[1], GEN_INT (i),\n \t\t\t \t        const0_rtx));\n \t          DONE;\n \t        }\n-\t      else if ((((HOST_WIDE_INT) 1) << i) - 1\n+\t      else if ((HOST_WIDE_INT_1 << i) - 1\n \t\t       == ~INTVAL (operands[2]))\n \t        {\n \t          rtx shift = GEN_INT (i);\n@@ -2445,7 +2445,7 @@\n   {\n     int start_bit = INTVAL (operands[2]);\n     int width = INTVAL (operands[1]);\n-    HOST_WIDE_INT mask = (((HOST_WIDE_INT)1) << width) - 1;\n+    HOST_WIDE_INT mask = (HOST_WIDE_INT_1 << width) - 1;\n     rtx target, subtarget;\n \n     if (arm_arch_thumb2)"}, {"sha": "21eed7bb99c48d508a1c8be9c8f992ae07f3d550", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b5c77d36f4a0957fa6053eaa0cb42a8af650e9/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b5c77d36f4a0957fa6053eaa0cb42a8af650e9/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=d4b5c77d36f4a0957fa6053eaa0cb42a8af650e9", "patch": "@@ -406,7 +406,7 @@\n    (match_operand:SI 2 \"immediate_operand\" \"\")]\n   \"TARGET_NEON\"\n {\n-  HOST_WIDE_INT elem = (HOST_WIDE_INT) 1 << INTVAL (operands[2]);\n+  HOST_WIDE_INT elem = HOST_WIDE_INT_1 << INTVAL (operands[2]);\n   emit_insn (gen_vec_set<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t GEN_INT (elem), operands[0]));\n   DONE;"}]}