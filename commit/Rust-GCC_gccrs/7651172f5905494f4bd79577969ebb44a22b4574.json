{"sha": "7651172f5905494f4bd79577969ebb44a22b4574", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY1MTE3MmY1OTA1NDk0ZjRiZDc5NTc3OTY5ZWJiNDRhMjJiNDU3NA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-03-27T21:17:43Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-03-27T21:17:43Z"}, "message": "re PR fortran/58880 ([OOP] ICE on valid with FINAL function and type extension)\n\n2014-03-27  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/58880\n        * trans-expr.c (gfc_conv_scalar_to_descriptor): Fix handling\n        of nonpointers.\n\n2014-03-27  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/58880\n        * gfortran.dg/finalize_24.f90: New.\n\nFrom-SVN: r208879", "tree": {"sha": "d8bfaf1a66a5cf217cce963942f05930159f6066", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8bfaf1a66a5cf217cce963942f05930159f6066"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7651172f5905494f4bd79577969ebb44a22b4574", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7651172f5905494f4bd79577969ebb44a22b4574", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7651172f5905494f4bd79577969ebb44a22b4574", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7651172f5905494f4bd79577969ebb44a22b4574/comments", "author": null, "committer": null, "parents": [{"sha": "117f16fbba31ecc4202d734d3ad7c618143c4a40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/117f16fbba31ecc4202d734d3ad7c618143c4a40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/117f16fbba31ecc4202d734d3ad7c618143c4a40"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "ab702313d4773b4fe51cc0cfe4b7385de9f2ccad", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7651172f5905494f4bd79577969ebb44a22b4574/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7651172f5905494f4bd79577969ebb44a22b4574/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7651172f5905494f4bd79577969ebb44a22b4574", "patch": "@@ -1,3 +1,9 @@\n+2014-03-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/58880\n+\t* trans-expr.c (gfc_conv_scalar_to_descriptor): Fix handling\n+\tof nonpointers.\n+\n 2014-03-26 Dominique d'Humieres <dominiq@lps.ens.fr>\n \n \tPR fortran/34928"}, {"sha": "9a6b40c5c58a42ed2a8fba8902d0e249a37549fa", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7651172f5905494f4bd79577969ebb44a22b4574/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7651172f5905494f4bd79577969ebb44a22b4574/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=7651172f5905494f4bd79577969ebb44a22b4574", "patch": "@@ -69,14 +69,16 @@ gfc_conv_scalar_to_descriptor (gfc_se *se, tree scalar, symbol_attribute attr)\n   type = get_scalar_to_descriptor_type (scalar, attr);\n   desc = gfc_create_var (type, \"desc\");\n   DECL_ARTIFICIAL (desc) = 1;\n+\n+  if (!POINTER_TYPE_P (TREE_TYPE (scalar)))\n+    scalar = gfc_build_addr_expr (NULL_TREE, scalar);\n   gfc_add_modify (&se->pre, gfc_conv_descriptor_dtype (desc),\n \t\t  gfc_get_dtype (type));\n   gfc_conv_descriptor_data_set (&se->pre, desc, scalar);\n \n   /* Copy pointer address back - but only if it could have changed and\n      if the actual argument is a pointer and not, e.g., NULL().  */\n-  if ((attr.pointer || attr.allocatable)\n-       && attr.intent != INTENT_IN && POINTER_TYPE_P (TREE_TYPE (scalar)))\n+  if ((attr.pointer || attr.allocatable) && attr.intent != INTENT_IN)\n     gfc_add_modify (&se->post, scalar,\n \t\t    fold_convert (TREE_TYPE (scalar),\n \t\t\t\t  gfc_conv_descriptor_data_get (desc)));"}, {"sha": "03a617b4a432b5898639dcca8a40410ef6c7dc84", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7651172f5905494f4bd79577969ebb44a22b4574/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7651172f5905494f4bd79577969ebb44a22b4574/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7651172f5905494f4bd79577969ebb44a22b4574", "patch": "@@ -1,3 +1,8 @@\n+2014-03-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/58880\n+\t* gfortran.dg/finalize_24.f90: New.\n+\n 2014-03-27  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/p8vector-vbpermq.c: New test to test the\n@@ -43,8 +48,8 @@\n \n 2014-03-26  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n \n-        PR c++/52369\n-        * g++.dg/init/const10.C: New.\n+\tPR c++/52369\n+\t* g++.dg/init/const10.C: New.\n \t* g++.dg/init/const11.C: New.\n \t* g++.dg/init/pr25811.C: Adjust.\n \t* g++.dg/init/pr29043.C: Likewise."}, {"sha": "2a218584a8f84100b9c462613e4e3072e66e8a3d", "filename": "gcc/testsuite/gfortran.dg/finalize_24.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7651172f5905494f4bd79577969ebb44a22b4574/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_24.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7651172f5905494f4bd79577969ebb44a22b4574/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_24.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_24.f90?ref=7651172f5905494f4bd79577969ebb44a22b4574", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do compile }\n+!\n+! PR fortran/58880\n+!\n+! Contributed by Andrew Benson\n+!\n+\n+module gn\n+  type sl\n+     integer, allocatable, dimension(:) :: lv\n+   contains\n+     final :: sld\n+  end type sl\n+  type :: nde\n+     type(sl) :: r\n+  end type nde\n+contains\n+  subroutine ndm(s)\n+    type(nde), intent(inout) :: s\n+    type(nde)                :: i    \n+    i=s\n+  end subroutine ndm\n+  subroutine sld(s)\n+    implicit none\n+    type(sl), intent(inout) :: s\n+    return\n+  end subroutine sld\n+end module gn"}]}