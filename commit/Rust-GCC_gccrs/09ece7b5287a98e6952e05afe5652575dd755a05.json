{"sha": "09ece7b5287a98e6952e05afe5652575dd755a05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDllY2U3YjUyODdhOThlNjk1MmUwNWFmZTU2NTI1NzVkZDc1NWEwNQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-03-20T16:00:49Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-03-20T16:00:49Z"}, "message": "pa.c (emit_move_sequence): Don't lose for a secondary reload to the SAR register if...\n\n        * pa/pa.c (emit_move_sequence): Don't lose for a secondary reload\n        to the SAR register if the input is a MEM with an offset that won't\n        fit in 14bits.\n\nFrom-SVN: r13753", "tree": {"sha": "6ca402aa2668332c80822d26f4daf9c18633e5aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ca402aa2668332c80822d26f4daf9c18633e5aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09ece7b5287a98e6952e05afe5652575dd755a05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09ece7b5287a98e6952e05afe5652575dd755a05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09ece7b5287a98e6952e05afe5652575dd755a05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09ece7b5287a98e6952e05afe5652575dd755a05/comments", "author": null, "committer": null, "parents": [{"sha": "52320a474f6819a407e2be7321551fff49879755", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52320a474f6819a407e2be7321551fff49879755", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52320a474f6819a407e2be7321551fff49879755"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "5f9416057dfe7a12fce4a1cceb3a8c211d74693d", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09ece7b5287a98e6952e05afe5652575dd755a05/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09ece7b5287a98e6952e05afe5652575dd755a05/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=09ece7b5287a98e6952e05afe5652575dd755a05", "patch": "@@ -1170,7 +1170,21 @@ emit_move_sequence (operands, mode, scratch_reg)\n \t\t   && FP_REG_CLASS_P (REGNO_REG_CLASS (REGNO (operand1)))))\n \t   && scratch_reg)\n     {\n-      emit_move_insn (scratch_reg, operand1);\n+      /* D might not fit in 14 bits either; for such cases load D into\n+\t scratch reg.  */\n+      if (GET_CODE (operand1) == MEM\n+\t  && !memory_address_p (SImode, XEXP (operand1, 0)))\n+\t{\n+\t  emit_move_insn (scratch_reg, XEXP (XEXP (operand1, 0), 1));\t\n+\t  emit_move_insn (scratch_reg, gen_rtx (GET_CODE (XEXP (operand1, 0)),\n+\t\t\t\t\t\tSImode,\n+\t\t\t\t\t\tXEXP (XEXP (operand1, 0), 0),\n+\t\t\t\t\t\tscratch_reg));\n+\t  emit_move_insn (scratch_reg, gen_rtx (MEM, GET_MODE (operand1),\n+\t\t\t\t\t\tscratch_reg));\n+\t}\n+      else\n+\temit_move_insn (scratch_reg, operand1);\n       emit_move_insn (operand0, scratch_reg);\n       return 1;\n     }"}]}