{"sha": "46bd2beed4c78dcb32fcde4913815527c14e5e17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZiZDJiZWVkNGM3OGRjYjMyZmNkZTQ5MTM4MTU1MjdjMTRlNWUxNw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2007-02-09T01:11:18Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2007-02-09T01:11:18Z"}, "message": "calls.c (store_one_arg): Pass correct alignment to emit_push_insn for non-BLKmode values.\n\n\t* calls.c (store_one_arg): Pass correct alignment to\n\temit_push_insn for non-BLKmode values.\n\t* expr.c (emit_push_insn): If STRICT_ALIGNMENT, copy to an\n\tunaligned stack slot via a suitably aligned slot.\n\nFrom-SVN: r121736", "tree": {"sha": "0c7d195e64cf1a546187b71d49c8c44bdca1041f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c7d195e64cf1a546187b71d49c8c44bdca1041f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46bd2beed4c78dcb32fcde4913815527c14e5e17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46bd2beed4c78dcb32fcde4913815527c14e5e17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46bd2beed4c78dcb32fcde4913815527c14e5e17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46bd2beed4c78dcb32fcde4913815527c14e5e17/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "687e00ee8a88d034fb91a9eecb611b5927c5f677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/687e00ee8a88d034fb91a9eecb611b5927c5f677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/687e00ee8a88d034fb91a9eecb611b5927c5f677"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "777ca6382c91016d196d7841283909d742a82b62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46bd2beed4c78dcb32fcde4913815527c14e5e17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46bd2beed4c78dcb32fcde4913815527c14e5e17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46bd2beed4c78dcb32fcde4913815527c14e5e17", "patch": "@@ -1,3 +1,10 @@\n+2007-02-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* calls.c (store_one_arg): Pass correct alignment to\n+\temit_push_insn for non-BLKmode values.\n+\t* expr.c (emit_push_insn): If STRICT_ALIGNMENT, copy to an\n+\tunaligned stack slot via a suitably aligned slot.\n+\n 2007-02-08  DJ Delorie  <dj@redhat.com>\n \n \t* config/m32c/m32c.c (m32c_unpend_compare): Add default to silence"}, {"sha": "ab51d17a1dd4ad22aceb1ea6293bf6be123709c3", "filename": "gcc/calls.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46bd2beed4c78dcb32fcde4913815527c14e5e17/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46bd2beed4c78dcb32fcde4913815527c14e5e17/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=46bd2beed4c78dcb32fcde4913815527c14e5e17", "patch": "@@ -1,6 +1,6 @@\n /* Convert function calls to rtl insns, for GNU C compiler.\n    Copyright (C) 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -4191,6 +4191,7 @@ store_one_arg (struct arg_data *arg, rtx argblock, int flags,\n   else if (arg->mode != BLKmode)\n     {\n       int size;\n+      unsigned int parm_align;\n \n       /* Argument is a scalar, not entirely passed in registers.\n \t (If part is passed in registers, arg->partial says how much\n@@ -4218,10 +4219,22 @@ store_one_arg (struct arg_data *arg, rtx argblock, int flags,\n \t\t / (PARM_BOUNDARY / BITS_PER_UNIT))\n \t\t* (PARM_BOUNDARY / BITS_PER_UNIT));\n \n+      /* Compute the alignment of the pushed argument.  */\n+      parm_align = arg->locate.boundary;\n+      if (FUNCTION_ARG_PADDING (arg->mode, TREE_TYPE (pval)) == downward)\n+\t{\n+\t  int pad = used - size;\n+\t  if (pad)\n+\t    {\n+\t      unsigned int pad_align = (pad & -pad) * BITS_PER_UNIT;\n+\t      parm_align = MIN (parm_align, pad_align);\n+\t    }\n+\t}\n+\n       /* This isn't already where we want it on the stack, so put it there.\n \t This can either be done with push or copy insns.  */\n       emit_push_insn (arg->value, arg->mode, TREE_TYPE (pval), NULL_RTX,\n-\t\t      PARM_BOUNDARY, partial, reg, used - size, argblock,\n+\t\t      parm_align, partial, reg, used - size, argblock,\n \t\t      ARGS_SIZE_RTX (arg->locate.offset), reg_parm_stack_space,\n \t\t      ARGS_SIZE_RTX (arg->locate.alignment_pad));\n "}, {"sha": "a04e931acd06fc3cb4dc8bf13c823b23b4c5bb9b", "filename": "gcc/expr.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46bd2beed4c78dcb32fcde4913815527c14e5e17/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46bd2beed4c78dcb32fcde4913815527c14e5e17/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=46bd2beed4c78dcb32fcde4913815527c14e5e17", "patch": "@@ -3643,7 +3643,8 @@ emit_push_insn (rtx x, enum machine_mode mode, tree type, rtx size,\n \n   xinner = x;\n \n-  if (mode == BLKmode)\n+  if (mode == BLKmode\n+      || (STRICT_ALIGNMENT && align < GET_MODE_ALIGNMENT (mode)))\n     {\n       /* Copy a block into the stack, entirely or partially.  */\n \n@@ -3655,6 +3656,20 @@ emit_push_insn (rtx x, enum machine_mode mode, tree type, rtx size,\n       offset = partial % (PARM_BOUNDARY / BITS_PER_UNIT);\n       used = partial - offset;\n \n+      if (mode != BLKmode)\n+\t{\n+\t  /* A value is to be stored in an insufficiently aligned\n+\t     stack slot; copy via a suitably aligned slot if\n+\t     necessary.  */\n+\t  size = GEN_INT (GET_MODE_SIZE (mode));\n+\t  if (!MEM_P (xinner))\n+\t    {\n+\t      temp = assign_temp (type, 0, 1, 1);\n+\t      emit_move_insn (temp, xinner);\n+\t      xinner = temp;\n+\t    }\n+\t}\n+\n       gcc_assert (size);\n \n       /* USED is now the # of bytes we need not copy to the stack"}]}