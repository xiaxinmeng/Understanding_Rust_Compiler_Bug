{"sha": "12f0a54ba9fa25aa13af368af5bb07e345c33dff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJmMGE1NGJhOWZhMjVhYTEzYWYzNjhhZjViYjA3ZTM0NWMzM2RmZg==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-04-26T22:14:15Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-05-07T19:00:21Z"}, "message": "Make TRUE/FALSE edge calculation available without the outgoing edge class.\n\nRename class to gimple_outoging_edge and provide a non-class routine for\nthe outgoing edge of a gcond.\n\n\t* gimple-range-edge.h (gimple_outgoing_range): Rename from\n\toutgoing_range.\n\t(gcond_edge_range): Export prototype.\n\t* gimple-range-edge.cc (gcond_edge_range): New.\n\t(gimple_outgoing_range::edge_range_p): Use gcond_edge_range.\n\t* gimple-range-gori.h (gori_compute): Use gimple_outgoing_range.", "tree": {"sha": "0dfebd27e05dd05f8fe58a2f3a3b9d2bce703937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dfebd27e05dd05f8fe58a2f3a3b9d2bce703937"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12f0a54ba9fa25aa13af368af5bb07e345c33dff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12f0a54ba9fa25aa13af368af5bb07e345c33dff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12f0a54ba9fa25aa13af368af5bb07e345c33dff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12f0a54ba9fa25aa13af368af5bb07e345c33dff/comments", "author": null, "committer": null, "parents": [{"sha": "4c07e591925bb02e71a499f1cf780ce63985dba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c07e591925bb02e71a499f1cf780ce63985dba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c07e591925bb02e71a499f1cf780ce63985dba0"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "d11153e677e74d088667e52a1830f62fbfd7daa3", "filename": "gcc/gimple-range-edge.cc", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12f0a54ba9fa25aa13af368af5bb07e345c33dff/gcc%2Fgimple-range-edge.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12f0a54ba9fa25aa13af368af5bb07e345c33dff/gcc%2Fgimple-range-edge.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-edge.cc?ref=12f0a54ba9fa25aa13af368af5bb07e345c33dff", "patch": "@@ -52,12 +52,26 @@ gimple_outgoing_range_stmt_p (basic_block bb)\n }\n \n \n-outgoing_range::outgoing_range ()\n+// Return a TRUE or FALSE range representing the edge value of a GCOND.\n+\n+void\n+gcond_edge_range (irange &r, edge e)\n+{\n+  gcc_checking_assert (e->flags & (EDGE_TRUE_VALUE | EDGE_FALSE_VALUE));\n+  if (e->flags & EDGE_TRUE_VALUE)\n+    r = int_range<2> (boolean_true_node, boolean_true_node);\n+  else\n+    r = int_range<2> (boolean_false_node, boolean_false_node);\n+}\n+\n+\n+gimple_outgoing_range::gimple_outgoing_range ()\n {\n   m_edge_table = NULL;\n }\n \n-outgoing_range::~outgoing_range ()\n+\n+gimple_outgoing_range::~gimple_outgoing_range ()\n {\n   if (m_edge_table)\n     delete m_edge_table;\n@@ -68,7 +82,7 @@ outgoing_range::~outgoing_range ()\n // Use a cached value if it exists, or calculate it if not.\n \n bool\n-outgoing_range::get_edge_range (irange &r, gimple *s, edge e)\n+gimple_outgoing_range::get_edge_range (irange &r, gimple *s, edge e)\n {\n   gcc_checking_assert (is_a<gswitch *> (s));\n   gswitch *sw = as_a<gswitch *> (s);\n@@ -100,7 +114,7 @@ outgoing_range::get_edge_range (irange &r, gimple *s, edge e)\n // Calculate all switch edges from SW and cache them in the hash table.\n \n void\n-outgoing_range::calc_switch_ranges (gswitch *sw)\n+gimple_outgoing_range::calc_switch_ranges (gswitch *sw)\n {\n   bool existed;\n   unsigned x, lim;\n@@ -165,7 +179,7 @@ outgoing_range::calc_switch_ranges (gswitch *sw)\n // return NULL\n \n gimple *\n-outgoing_range::edge_range_p (irange &r, edge e)\n+gimple_outgoing_range::edge_range_p (irange &r, edge e)\n {\n   // Determine if there is an outgoing edge.\n   gimple *s = gimple_outgoing_range_stmt_p (e->src);\n@@ -174,12 +188,7 @@ outgoing_range::edge_range_p (irange &r, edge e)\n \n   if (is_a<gcond *> (s))\n     {\n-      if (e->flags & EDGE_TRUE_VALUE)\n-\tr = int_range<2> (boolean_true_node, boolean_true_node);\n-      else if (e->flags & EDGE_FALSE_VALUE)\n-\tr = int_range<2> (boolean_false_node, boolean_false_node);\n-      else\n-\tgcc_unreachable ();\n+      gcond_edge_range (r, e);\n       return s;\n     }\n "}, {"sha": "87b4124d01de0f34b6f847942c44614ed89df840", "filename": "gcc/gimple-range-edge.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12f0a54ba9fa25aa13af368af5bb07e345c33dff/gcc%2Fgimple-range-edge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12f0a54ba9fa25aa13af368af5bb07e345c33dff/gcc%2Fgimple-range-edge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-edge.h?ref=12f0a54ba9fa25aa13af368af5bb07e345c33dff", "patch": "@@ -35,21 +35,23 @@ along with GCC; see the file COPYING3.  If not see\n // The return value is NULL for no range, or the branch statement which the\n // edge gets the range from, along with the range.\n \n-class outgoing_range\n+class gimple_outgoing_range\n {\n public:\n-  outgoing_range ();\n-  ~outgoing_range ();\n+  gimple_outgoing_range ();\n+  ~gimple_outgoing_range ();\n   gimple *edge_range_p (irange &r, edge e);\n private:\n   void calc_switch_ranges (gswitch *sw);\n   bool get_edge_range (irange &r, gimple *s, edge e);\n \n   hash_map<edge, irange *> *m_edge_table;\n   irange_allocator m_range_allocator;\n-}; \n+};\n \n-// If there is a range control statment at the end of block BB, return it.\n+// If there is a range control statement at the end of block BB, return it.\n gimple *gimple_outgoing_range_stmt_p (basic_block bb);\n+// Return the range on edge E if it is from a GCOND.  Either TRUE or FALSE.\n+void gcond_edge_range (irange &r, edge e);\n \n #endif  // GIMPLE_RANGE_EDGE_H"}, {"sha": "7bb18a9baf1ee711bd47ade08ef6b8b15c95f066", "filename": "gcc/gimple-range-gori.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12f0a54ba9fa25aa13af368af5bb07e345c33dff/gcc%2Fgimple-range-gori.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12f0a54ba9fa25aa13af368af5bb07e345c33dff/gcc%2Fgimple-range-gori.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.h?ref=12f0a54ba9fa25aa13af368af5bb07e345c33dff", "patch": "@@ -108,7 +108,7 @@ class gori_compute\n \t\t\t\t\t    const irange &lhs, tree name);\n \n   class gori_map *m_gori_map;\n-  outgoing_range outgoing;\t// Edge values for COND_EXPR & SWITCH_EXPR.\n+  gimple_outgoing_range outgoing;\t// Edge values for COND_EXPR & SWITCH_EXPR.\n };\n \n "}]}