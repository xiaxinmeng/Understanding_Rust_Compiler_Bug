{"sha": "15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVkYzk1Y2JjYzIxYjMxZjNiNWFlNTBkNjE3MmRiM2M0ZjQ4OTRiMQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2007-09-01T20:13:45Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-09-01T20:13:45Z"}, "message": "arm.c, [...]: Fix comment typos.\n\n\t* config/arm/arm.c, config/rs6000/ppu_intrinsics.h,\n\tconfig/spu/spu.c, df-scan.c, fixed-value.c, fold-const.c,\n\tginclude/tgmath.h, haifa-sched.c, optabs.c, recog.c,\n\tsched-deps.c, sched-int.h, system.h, target.h,\n\ttree-ssa-live.c, tree-vect-transform.c, tree-vectorizer.c,\n\ttree.def: Fix comment typos.\n\nFrom-SVN: r128016", "tree": {"sha": "45757e42a145a2d8be0144b7e44a0c40f3c59cdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45757e42a145a2d8be0144b7e44a0c40f3c59cdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/comments", "author": null, "committer": null, "parents": [{"sha": "8785d88cf18403b3f36973820c42ab4990c7a4c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8785d88cf18403b3f36973820c42ab4990c7a4c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8785d88cf18403b3f36973820c42ab4990c7a4c5"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "2a7373633e8ded22c02da0fc9e5d145a0f587047", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "patch": "@@ -1,3 +1,12 @@\n+2007-09-01  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* config/arm/arm.c, config/rs6000/ppu_intrinsics.h,\n+\tconfig/spu/spu.c, df-scan.c, fixed-value.c, fold-const.c,\n+\tginclude/tgmath.h, haifa-sched.c, optabs.c, recog.c,\n+\tsched-deps.c, sched-int.h, system.h, target.h,\n+\ttree-ssa-live.c, tree-vect-transform.c, tree-vectorizer.c,\n+\ttree.def: Fix comment typos.\n+\n 2007-09-01  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* config/m68k/m68k.c (TARGET_DEFAULT_TARGET_FLAGS): Remove."}, {"sha": "f36b7264cc967730b514605848f9ed6ac580e1d5", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "patch": "@@ -5868,7 +5868,7 @@ vfp3_const_double_index (rtx x)\n     return -1;\n \n   /* Sign, mantissa and exponent are now in the correct form to plug into the\n-     formulae described in the comment above.  */\n+     formula described in the comment above.  */\n   return (sign << 7) | ((exponent ^ 3) << 4) | (mantissa - 16);\n }\n "}, {"sha": "b18f42de575fc8190f3023dcd9ae2b61fd48791c", "filename": "gcc/config/rs6000/ppu_intrinsics.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Fconfig%2Frs6000%2Fppu_intrinsics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Fconfig%2Frs6000%2Fppu_intrinsics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fppu_intrinsics.h?ref=15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "patch": "@@ -188,7 +188,7 @@ typedef int __V4SI __attribute__((vector_size(16)));\n #endif /* __powerpc64__ */\n \n #ifdef __powerpc64__\n-/* Work around the hadware bug in the current Cell implemention.  */\n+/* Work around the hardware bug in the current Cell implementation.  */\n #define __mftb() __extension__\t\t\t\t\t\\\n   ({ unsigned long long result;\t\t\t\t\t\\\n   __asm__ volatile (\"1: mftb %[current_tb]\\n\"\t\t\t\\"}, {"sha": "00df45b4683fba85f6898fa3e8195696bf5c2d51", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "patch": "@@ -5484,7 +5484,7 @@ spu_builtin_vectorization_cost (bool runtime_test)\n   /* If the branch of the runtime test is taken - i.e. - the vectorized\n      version is skipped - this incurs a misprediction cost (because the\n      vectorized version is expected to be the fall-through).  So we subtract\n-     the latency of a mispredicted branch from the costs that are incured\n+     the latency of a mispredicted branch from the costs that are incurred\n      when the vectorized version is executed.  */\n   if (runtime_test)\n     return -19;"}, {"sha": "6c2c6fad58a541ab56bd19691b0f4df8bb756c7e", "filename": "gcc/df-scan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "patch": "@@ -3632,7 +3632,7 @@ df_record_entry_block_defs (bitmap entry_block_defs)\n }\n \n \n-/* Update the defs in the entry bolck.  */\n+/* Update the defs in the entry block.  */\n \n void\n df_update_entry_block_defs (void)"}, {"sha": "aca386a6d9c00c8cb35fd91d7f7efa177ac44272", "filename": "gcc/fixed-value.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Ffixed-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Ffixed-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixed-value.c?ref=15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "patch": "@@ -553,7 +553,7 @@ do_fixed_divide (FIXED_VALUE_TYPE *f, const FIXED_VALUE_TYPE *a,\n \t\t\t &r.low, &r.high, 0);\n  \t}\n \n-      /* Divide r by pos_b to quo_r.  The remanider is in mod.  */\n+      /* Divide r by pos_b to quo_r.  The remainder is in mod.  */\n       div_and_round_double (TRUNC_DIV_EXPR, 1, r.low, r.high, pos_b.low,\n \t\t\t    pos_b.high, &quo_r.low, &quo_r.high, &mod.low,\n \t\t\t    &mod.high);\n@@ -613,7 +613,7 @@ do_fixed_divide (FIXED_VALUE_TYPE *f, const FIXED_VALUE_TYPE *a,\n   return overflow_p;\n }\n \n-/* Calculate F = A << B if LEFT_P.  Otherwies, F = A >> B.\n+/* Calculate F = A << B if LEFT_P.  Otherwise, F = A >> B.\n    If SAT_P, saturate the result to the max or the min.\n    Return true, if !SAT_P and overflow.  */\n "}, {"sha": "7220711539a9ad5b12f6d5877a8d6d3a56d439a9", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "patch": "@@ -3537,7 +3537,7 @@ omit_one_operand (tree type, tree result, tree omitted)\n {\n   tree t = fold_convert (type, result);\n \n-  /* If the resulting operand is an empty statement, just return the ommited\n+  /* If the resulting operand is an empty statement, just return the omitted\n      statement casted to void. */\n   if (IS_EMPTY_STMT (t) && TREE_SIDE_EFFECTS (omitted))\n     return build1 (NOP_EXPR, void_type_node, fold_ignored_result (omitted));\n@@ -3555,7 +3555,7 @@ pedantic_omit_one_operand (tree type, tree result, tree omitted)\n {\n   tree t = fold_convert (type, result);\n \n-  /* If the resulting operand is an empty statement, just return the ommited\n+  /* If the resulting operand is an empty statement, just return the omitted\n      statement casted to void. */\n   if (IS_EMPTY_STMT (t) && TREE_SIDE_EFFECTS (omitted))\n     return build1 (NOP_EXPR, void_type_node, fold_ignored_result (omitted));"}, {"sha": "1c0fb37cfff0fb78a49716e3d081ef2568f5fe03", "filename": "gcc/ginclude/tgmath.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Fginclude%2Ftgmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Fginclude%2Ftgmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Ftgmath.h?ref=15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "patch": "@@ -50,7 +50,7 @@ Boston, MA 02111-1307, USA.  */\n    If any generic parameter is complex, we use a complex version.  Otherwise\n    we use a real version.  If the real part of any generic parameter is long\n    double, we use the long double version.  Otherwise if the real part of any\n-   generic paramter is double or of integer type, we use the double version.\n+   generic parameter is double or of integer type, we use the double version.\n    Otherwise we use the float version. */\n \n #define __tg_cplx(expr) \\"}, {"sha": "9d1f8b025f591c7f01dd41676f72e0b258093eb2", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "patch": "@@ -2924,7 +2924,7 @@ try_ready (rtx next)\n   else\n     {\n       /* One of the NEXT's dependencies has been resolved.\n-\t Recalcute NEXT's status.  */\n+\t Recalculate NEXT's status.  */\n \n       *ts &= ~SPECULATIVE & ~HARD_DEP;\n \n@@ -3857,7 +3857,7 @@ create_check_block_twin (rtx insn, bool mutate_p)\n       DONE_SPEC (insn) = ts & BEGIN_SPEC;\n       CHECK_SPEC (check) = ts & BEGIN_SPEC;\n \n-      /* Luckyness of future speculations solely depends upon initial\n+      /* Luckiness of future speculations solely depends upon initial\n \t BEGIN speculation.  */\n       if (ts & BEGIN_DATA)\n \tfs = set_dep_weak (fs, BE_IN_DATA, get_dep_weak (ts, BEGIN_DATA));"}, {"sha": "fee7c5039cc8d10491dd8345dbcca82f9b9f6dec", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "patch": "@@ -1265,7 +1265,7 @@ shift_optab_p (optab binoptab)\n     }\n }\n \n-/* Return true if BINOPTAB implements a commutatative binary operation.  */\n+/* Return true if BINOPTAB implements a commutative binary operation.  */\n \n static bool\n commutative_optab_p (optab binoptab)"}, {"sha": "7ee2f97d3fe5993ee03947baa30c9f2671cb12e3", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "patch": "@@ -443,7 +443,7 @@ confirm_change_group (void)\n       if (changes[i].unshare)\n \t*changes[i].loc = copy_rtx (*changes[i].loc);\n \n-      /* Avoid unnecesary rescaning when multiple changes to same instruction\n+      /* Avoid unnecesary rescanning when multiple changes to same instruction\n          are made.  */\n       if (object)\n \t{"}, {"sha": "cdd055b646f1f337aaf6a247a0b974fb7e0c212e", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "patch": "@@ -359,7 +359,7 @@ free_deps_list (deps_list_t l)\n }\n \n /* Return true if there is no dep_nodes and deps_lists out there.\n-   After the region is scheduled all the depedency nodes and lists\n+   After the region is scheduled all the dependency nodes and lists\n    should [generally] be returned to pool.  */\n bool\n deps_pools_are_empty_p (void)\n@@ -648,7 +648,7 @@ sd_finish_insn (rtx insn)\n /* Find a dependency between producer PRO and consumer CON.\n    Search through resolved dependency lists if RESOLVED_P is true.\n    If no such dependency is found return NULL,\n-   overwise return the dependency and initialize SD_IT_PTR [if it is nonnull]\n+   otherwise return the dependency and initialize SD_IT_PTR [if it is nonnull]\n    with an iterator pointing to it.  */\n static dep_t\n sd_find_dep_between_no_cache (rtx pro, rtx con, bool resolved_p,"}, {"sha": "da31ec9d8fb4431889d553eea10270d32e3dd724", "filename": "gcc/sched-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "patch": "@@ -897,7 +897,7 @@ struct _sd_iterator\n      simply a pointer to the next element to allow easy deletion from the\n      list.  When a dep is being removed from the list the iterator\n      will automatically advance because the value in *linkp will start\n-     reffering to the next element.  */\n+     referring to the next element.  */\n   dep_link_t *linkp;\n \n   /* True if the current list is a resolved one.  */"}, {"sha": "c90ded121485aa1e84d61e99faedf771c3a428a7", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "patch": "@@ -789,7 +789,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n #define CONST_CAST(X) ((void*)(X))\n #endif\n \n-/* Acivate -Wcast-qual as a warning (not an error/-Werror).  */\n+/* Activate -Wcast-qual as a warning (not an error/-Werror).  */\n #if GCC_VERSION >= 4003\n #pragma GCC diagnostic warning \"-Wcast-qual\"\n #endif"}, {"sha": "5918aed743f11e65ea2aeb839d73376ea64047c0", "filename": "gcc/target.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "patch": "@@ -306,7 +306,7 @@ struct gcc_target\n     /* The values of the following two members are pointers to\n        functions used to simplify the automaton descriptions.\n        dfa_pre_advance_cycle and dfa_post_advance_cycle are getting called\n-       immediatelly before and after cycle is advanced.  */\n+       immediately before and after cycle is advanced.  */\n     void (* dfa_pre_advance_cycle) (void);\n     void (* dfa_post_advance_cycle) (void);\n "}, {"sha": "a78dd9c19ebbd4820f9d5e7c16348a2000f163d5", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "patch": "@@ -477,7 +477,7 @@ remove_unused_scope_block_p (tree scope)\n     {\n       next = &TREE_CHAIN (*t);\n \n-      /* Debug info of nested function reffers to the block of the\n+      /* Debug info of nested function refers to the block of the\n \t function.  */\n       if (TREE_CODE (*t) == FUNCTION_DECL)\n \tunused = false;"}, {"sha": "321d32534194e751f0df74bcf99a5fcbba57337b", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "patch": "@@ -4619,7 +4619,7 @@ vect_setup_realignment (tree stmt, block_stmt_iterator *bsi,\n      The problem arises only if the memory access is in an inner-loop nested\n      inside LOOP, which is now being vectorized using outer-loop vectorization.\n      This is the only case when the misalignment of the memory access may not\n-     remain fixed thtoughout the iterations of the inner-loop (as exaplained in\n+     remain fixed throughout the iterations of the inner-loop (as explained in\n      detail in vect_supportable_dr_alignment).  In this case, not only is the\n      optimized realignment scheme not applicable, but also the misalignment\n      computation (and generation of the realignment token that is passed to\n@@ -6467,7 +6467,7 @@ vect_create_cond_for_align_checks (loop_vec_info loop_vinfo,\n      DR: The data reference.\n      VECT_FACTOR: vectorization factor.\n \n-   Return an exrpession whose value is the size of segment which will be\n+   Return an expression whose value is the size of segment which will be\n    accessed by DR.  */\n \n static tree"}, {"sha": "11349c2771f2fa970e35702440aa186d925e1af3", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "patch": "@@ -1701,7 +1701,7 @@ vect_supportable_dr_alignment (struct data_reference *dr)\n      iterations, it is *not* guaranteed that is will remain the same throughout\n      the execution of the inner-loop.  This is because the inner-loop advances\n      with the original scalar step (and not in steps of VS).  If the inner-loop\n-     step happens to be a multiple of VS, then the misalignment remaines fixed\n+     step happens to be a multiple of VS, then the misalignment remains fixed\n      and we can use the optimized realignment scheme.  For example:\n \n       for (i=0; i<N; i++)"}, {"sha": "b9c2be1648c1ba7a74176d563e1b5ce50cfc766a", "filename": "gcc/tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=15dc95cbcc21b31f3b5ae50d6172db3c4f4894b1", "patch": "@@ -1017,7 +1017,7 @@ DEFTREECODE (OMP_FOR, \"omp_for\", tcc_statement, 6)\n \t      which of the sections to execute.  */\n DEFTREECODE (OMP_SECTIONS, \"omp_sections\", tcc_statement, 3)\n \n-/* This tree immediatelly follows OMP_SECTIONS, and represents the switch\n+/* This tree immediately follows OMP_SECTIONS, and represents the switch\n    used to decide which branch is taken.  */\n DEFTREECODE (OMP_SECTIONS_SWITCH, \"omp_sections_switch\", tcc_statement, 0)\n "}]}