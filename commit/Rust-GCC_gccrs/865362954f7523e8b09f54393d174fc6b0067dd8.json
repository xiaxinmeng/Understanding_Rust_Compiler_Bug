{"sha": "865362954f7523e8b09f54393d174fc6b0067dd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY1MzYyOTU0Zjc1MjNlOGIwOWY1NDM5M2QxNzRmYzZiMDA2N2RkOA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-11T00:16:31Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-11T00:16:31Z"}, "message": "Daily bump.", "tree": {"sha": "5675f1d119be573496228974157f949c2654faa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5675f1d119be573496228974157f949c2654faa7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/865362954f7523e8b09f54393d174fc6b0067dd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/865362954f7523e8b09f54393d174fc6b0067dd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/865362954f7523e8b09f54393d174fc6b0067dd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/865362954f7523e8b09f54393d174fc6b0067dd8/comments", "author": null, "committer": null, "parents": [{"sha": "c5ec2f858b78aaf22951395db97b25e2d0163dfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ec2f858b78aaf22951395db97b25e2d0163dfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5ec2f858b78aaf22951395db97b25e2d0163dfc"}], "stats": {"total": 650, "additions": 649, "deletions": 1}, "files": [{"sha": "53578ac4ac5fd023661615d577fe13a59daf2b00", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865362954f7523e8b09f54393d174fc6b0067dd8/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865362954f7523e8b09f54393d174fc6b0067dd8/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=865362954f7523e8b09f54393d174fc6b0067dd8", "patch": "@@ -1,3 +1,7 @@\n+2020-07-10  Mike Nolta  <mike@nolta.net>\n+\n+\t* download_prerequisites: Don't pass wget options to curl.\n+\n 2020-07-07  Alexandre Oliva  <oliva@adacore.com>\n \t    Martin Liska  <mliska@suse.cz>\n "}, {"sha": "220126e2589817c9de3d545f39d036c7d22ec43b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865362954f7523e8b09f54393d174fc6b0067dd8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865362954f7523e8b09f54393d174fc6b0067dd8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=865362954f7523e8b09f54393d174fc6b0067dd8", "patch": "@@ -1,3 +1,176 @@\n+2020-07-10  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_xcoff_select_section): Only\n+\tcreate named section for VAR_DECL or FUNCTION_DECL.\n+\n+2020-07-10  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* glimits.h [__STDC_VERSION__ > 201710L] (BOOL_MAX, BOOL_WIDTH):\n+\tNew macros.\n+\n+2020-07-10  Alexander Popov  <alex.popov@linux.com>\n+\n+\t* shrink-wrap.c (try_shrink_wrapping): Improve debug output.\n+\n+2020-07-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/96151\n+\t* expr.c (expand_expr_real_2): When reducing bit fields,\n+\tclear the target if it has a different mode from the expression.\n+\t(reduce_to_bit_field_precision): Don't do that here.  Instead\n+\tassert that the target already has the correct mode.\n+\n+2020-07-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/92789\n+\tPR target/95726\n+\t* config/arm/arm.c (arm_attribute_table): Add\n+\t\"Advanced SIMD type\".\n+\t(arm_comp_type_attributes): Check that the \"Advanced SIMD type\"\n+\tattributes are equal.\n+\t* config/arm/arm-builtins.c: Include stringpool.h and\n+\tattribs.h.\n+\t(arm_mangle_builtin_vector_type): Use the mangling recorded\n+\tin the \"Advanced SIMD type\" attribute.\n+\t(arm_init_simd_builtin_types): Add an \"Advanced SIMD type\"\n+\tattribute to each Advanced SIMD type, using the mangled type\n+\tas the attribute's single argument.\n+\n+2020-07-10  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/vsx.md  (VSX_MM): New define_mode_iterator.\n+\t(VSX_MM4): New define_mode_iterator.\n+\t(vec_mtvsrbmi): New define_insn.\n+\t(vec_mtvsr_<mode>): New define_insn.\n+\t(vec_cntmb_<mode>): New define_insn.\n+\t(vec_extract_<mode>): New define_insn.\n+\t(vec_expand_<mode>): New define_insn.\n+\t(define_c_enum unspec): Add entries UNSPEC_MTVSBM, UNSPEC_VCNTMB,\n+\tUNSPEC_VEXTRACT, UNSPEC_VEXPAND.\n+\t* config/rs6000/altivec.h ( vec_genbm, vec_genhm, vec_genwm,\n+\tvec_gendm, vec_genqm, vec_cntm, vec_expandm, vec_extractm): Add\n+\tdefines.\n+\t* config/rs6000/rs6000-builtin.def: Add defines BU_P10_2, BU_P10_1.\n+\t(BU_P10_1): Add definitions for mtvsrbm, mtvsrhm, mtvsrwm,\n+\tmtvsrdm, mtvsrqm, vexpandmb, vexpandmh, vexpandmw, vexpandmd,\n+\tvexpandmq, vextractmb, vextractmh, vextractmw, vextractmd, vextractmq.\n+\t(BU_P10_2): Add definitions for cntmbb, cntmbh, cntmbw, cntmbd.\n+\t(BU_P10_OVERLOAD_1): Add definitions for mtvsrbm, mtvsrhm,\n+\tmtvsrwm, mtvsrdm, mtvsrqm, vexpandm, vextractm.\n+\t(BU_P10_OVERLOAD_2): Add defition for cntm.\n+\t* config/rs6000/rs6000-call.c (rs6000_expand_binop_builtin): Add\n+\tchecks for CODE_FOR_vec_cntmbb_v16qi, CODE_FOR_vec_cntmb_v8hi,\n+\tCODE_FOR_vec_cntmb_v4si, CODE_FOR_vec_cntmb_v2di.\n+\t(altivec_overloaded_builtins): Add overloaded argument entries for\n+\tP10_BUILTIN_VEC_MTVSRBM, P10_BUILTIN_VEC_MTVSRHM,\n+\tP10_BUILTIN_VEC_MTVSRWM, P10_BUILTIN_VEC_MTVSRDM,\n+\tP10_BUILTIN_VEC_MTVSRQM, P10_BUILTIN_VEC_VCNTMBB,\n+\tP10_BUILTIN_VCNTMBB, P10_BUILTIN_VCNTMBH,\n+\tP10_BUILTIN_VCNTMBW, P10_BUILTIN_VCNTMBD,\n+\tP10_BUILTIN_VEXPANDMB, P10_BUILTIN_VEXPANDMH,\n+\tP10_BUILTIN_VEXPANDMW, P10_BUILTIN_VEXPANDMD,\n+\tP10_BUILTIN_VEXPANDMQ, P10_BUILTIN_VEXTRACTMB,\n+\tP10_BUILTIN_VEXTRACTMH, P10_BUILTIN_VEXTRACTMW,\n+\tP10_BUILTIN_VEXTRACTMD, P10_BUILTIN_VEXTRACTMQ.\n+\t(builtin_function_type): Add case entries for P10_BUILTIN_MTVSRBM,\n+\tP10_BUILTIN_MTVSRHM, P10_BUILTIN_MTVSRWM, P10_BUILTIN_MTVSRDM,\n+\tP10_BUILTIN_MTVSRQM, P10_BUILTIN_VCNTMBB, P10_BUILTIN_VCNTMBH,\n+\tP10_BUILTIN_VCNTMBW, P10_BUILTIN_VCNTMBD,\n+\tP10_BUILTIN_VEXPANDMB, P10_BUILTIN_VEXPANDMH,\n+\tP10_BUILTIN_VEXPANDMW, P10_BUILTIN_VEXPANDMD,\n+\tP10_BUILTIN_VEXPANDMQ.\n+\t* config/rs6000/rs6000-builtin.def (altivec_overloaded_builtins): Add\n+\tentries\tfor MTVSRBM, MTVSRHM, MTVSRWM, MTVSRDM, MTVSRQM, VCNTM,\n+\tVEXPANDM, VEXTRACTM.\n+\n+2020-07-10  Bill Seurer, 507-253-3502, seurer@us.ibm.com  <(no_default)>\n+\n+\tPR target/95581\n+\t* config/rs6000/rs6000-call.c: Add new type v16qi_ftype_pcvoid.\n+\t(altivec_init_builtins) Change __builtin_altivec_mask_for_load to use\n+\tv16qi_ftype_pcvoid with correct number of parameters.\n+\n+2020-07-10  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/96144\n+\t* config/i386/i386-expand.c (ix86_emit_swsqrtsf): Check\n+\tTARGET_AVX512VL when enabling FMA.\n+\n+2020-07-10  Andrea Corallo  <andrea.corallo@arm.com>\n+\t    Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n+\t    Iain Apreotesei  <iain.apreotesei@arm.com>\n+\n+\t* config/arm/arm-protos.h (arm_target_insn_ok_for_lob): New\n+\tprototype.\n+\t* config/arm/arm.c (TARGET_INVALID_WITHIN_DOLOOP): Define.\n+\t(arm_invalid_within_doloop): Implement invalid_within_doloop hook.\n+\t(arm_target_insn_ok_for_lob): New function.\n+\t* config/arm/arm.h (TARGET_HAVE_LOB): Define macro.\n+\t* config/arm/thumb2.md (*doloop_end_internal, doloop_begin)\n+\t(dls_insn): Add new patterns.\n+\t(doloop_end): Modify to select LR when LOB is available.\n+\t* config/arm/unspecs.md: Add new unspec.\n+\t* doc/sourcebuild.texi (arm_v8_1_lob_ok)\n+\t(arm_thumb2_ok_no_arm_v8_1_lob): Document new target supports\n+\toptions.\n+\n+2020-07-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96133\n+\t* gimple-fold.c (fold_array_ctor_reference): Do not\n+\trecurse to folding a CTOR that does not fully cover the\n+\tasked for object.\n+\n+2020-07-10  Cui,Lili  <lili.cui@intel.com>\n+\n+\t* common/config/i386/cpuinfo.h\n+\t(get_intel_cpu): Handle sapphirerapids.\n+\t* common/config/i386/i386-common.c\n+\t(processor_names): Add sapphirerapids and alderlake.\n+\t(processor_alias_table): Add sapphirerapids and alderlake.\n+\t* common/config/i386/i386-cpuinfo.h\n+\t(processor_subtypes): Add INTEL_COREI7_ALDERLAKE and\n+\tINTEL_COREI7_ALDERLAKE.\n+\t* config.gcc: Add -march=sapphirerapids and alderlake.\n+\t* config/i386/driver-i386.c\n+\t(host_detect_local_cpu) Handle sapphirerapids and alderlake.\n+\t* config/i386/i386-c.c\n+\t(ix86_target_macros_internal): Handle sapphirerapids and alderlake.\n+\t* config/i386/i386-options.c\n+\t(m_SAPPHIRERAPIDS) : Define.\n+\t(m_ALDERLAKE): Ditto.\n+\t(m_CORE_AVX512) : Add m_SAPPHIRERAPIDS.\n+\t(processor_cost_table): Add sapphirerapids and alderlake.\n+\t(ix86_option_override_internal) Handle PTA_WAITPKG, PTA_ENQCMD,\n+\tPTA_CLDEMOTE, PTA_SERIALIZE, PTA_TSXLDTRK.\n+\t* config/i386/i386.h\n+\t(ix86_size_cost) : Define SAPPHIRERAPIDS and ALDERLAKE.\n+\t(processor_type) : Add PROCESSOR_SAPPHIRERAPIDS and\n+\tPROCESSOR_ALDERLAKE.\n+\t(PTA_ENQCMD): New.\n+\t(PTA_CLDEMOTE): Ditto.\n+\t(PTA_SERIALIZE): Ditto.\n+\t(PTA_TSXLDTRK): New.\n+\t(PTA_SAPPHIRERAPIDS): Ditto.\n+\t(PTA_ALDERLAKE): Ditto.\n+\t(processor_type) : Add PROCESSOR_SAPPHIRERAPIDS and\n+\tPROCESSOR_ALDERLAKE.\n+\t* doc/extend.texi: Add sapphirerapids and alderlake.\n+\t* doc/invoke.texi: Add sapphirerapids and alderlake.\n+\n+2020-07-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* dumpfile.c [profile-report]: Add new profile dump.\n+\t* dumpfile.h (enum tree_dump_index): Ad TDI_profile_report.\n+\t* passes.c (pass_manager::dump_profile_report): Change stderr\n+\tto dump_file.\n+\n+2020-07-10  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* tree-vect-loop.c (vect_transform_loop): Use LOOP_VINFO_NITERS which\n+\tis adjusted by considering peeled prologue for non\n+\tvect_use_loop_mask_for_alignment_p cases.\n+\n 2020-07-09  Peter Bergner  <bergner@linux.ibm.com>\n \n \tPR target/96125"}, {"sha": "ff113b92e7d3988fad0f33582d838c65813b3028", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865362954f7523e8b09f54393d174fc6b0067dd8/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865362954f7523e8b09f54393d174fc6b0067dd8/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=865362954f7523e8b09f54393d174fc6b0067dd8", "patch": "@@ -1 +1 @@\n-20200710\n+20200711"}, {"sha": "6e4b0e3e27929273ce9a7de85cdfcab47afe8e77", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 279, "deletions": 0, "changes": 279, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865362954f7523e8b09f54393d174fc6b0067dd8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865362954f7523e8b09f54393d174fc6b0067dd8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=865362954f7523e8b09f54393d174fc6b0067dd8", "patch": "@@ -1,3 +1,282 @@\n+2020-07-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch8.adb (Find_Direct_Name): Fix code to match the comment.\n+\n+2020-07-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause) <Address>:\n+\tIssue an unconditional warning for an overlay that changes the\n+\tscalar storage order.\n+\n+2020-07-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch8.adb (Is_Actual_Parameter): Fix processing when parent\n+\tis a procedure call statement; extend comment.\n+\n+2020-07-10  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Expression_With_Actions): Check the rules\n+\tof AI12-0368, and mark the declare expression as static or known\n+\tat compile time as appropriate.\n+\t* sem_ch4.adb: Minor reformatting.\n+\t* libgnat/a-stoufo.ads, libgnat/a-stoufo.adb: Allow up to 9\n+\treplacement parameters. I'm planning to use this in the test\n+\tcase for this ticket.\n+\n+2020-07-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Access_Subprogram_Wrapper_Body): Create a\n+\tproper signature when the access type denotes a parameterless\n+\tsubprogram.\n+\t* exp_ch6.adb (Expand_Call): Handle properly a  parameterless\n+\tindirect call when the corresponding access type has contracts.\n+\n+2020-07-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_aggr.adb\n+\t(Convert_To_Positional): Add Dims local variable\n+\tand pass it in calls to Is_Flat and Flatten.\n+\t(Check_Static_Components): Pass Dims in call to\n+\tIs_Static_Element.\n+\t(Nonflattenable_Next_Aggr): New predicate.\n+\t(Flatten): Add Dims parameter and Expr local variable.  Call\n+\tNonflattenable_Next_Aggr in a couple of places.  In the case\n+\twhen an Others choice is present, check that the element is\n+\teither static or a nested aggregate that can be flattened,\n+\tbefore disregarding the replication limit for elaboration\n+\tpurposes.  Check that a nested array is flattenable in the case\n+\tof a multidimensional array in any position.  Remove redundant\n+\tcheck in the Others case and pass Dims in call to\n+\tIs_Static_Element.  Use Expr variable.\n+\t(Is_Flat): Change type of Dims parameter from Int to Nat.\n+\t(Is_Static_Element): Add Dims parameter.  Replace tests on\n+\tliterals with call to Compile_Time_Known_Value.  If everything\n+\telse failed and the dimension is 1, preanalyze the expression\n+\tbefore calling again Compile_Time_Known_Value on it.  Return\n+\ttrue for null.\n+\t(Late_Expansion): Do not expand further if the assignment to the\n+\ttarget can be done directly by the back end.\n+\n+2020-07-10  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* osint-c.adb (Set_File_Name): Preserve casing of file.\n+\t* osint.adb (File_Names_Equal): New.\n+\t(Executable_Name): Use File_Equal instead of\n+\tCanonical_Case_File_Name.\n+\n+2020-07-10  Pascal Obry  <obry@adacore.com>\n+\n+\t* libgnat/g-socket.adb (Wait_On_Socket): Fix memory leaks and\n+\tfile descriptor leaks.  A memory leak was created each time the\n+\troutine was called without a selector (Selector = Null). Also,\n+\tin case of exception in the routine a memory leak and descriptor\n+\tleak was created as the created file selector was not closed.\n+\n+2020-07-10  Pascal Obry  <obry@adacore.com>\n+\n+\t* libgnat/g-socket.adb: Minor style fixes.\n+\n+2020-07-10  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_util.adb\n+\t(Immediate_Context_Implies_Is_Potentially_Unevaluated): New\n+\tsubprogram.\n+\t(Is_Potentially_Unevaluated): Do not stop climbing the tree on\n+\tthe first candidate subexpression; required to handle nested\n+\texpressions.\n+\n+2020-07-10  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_aggr.adb, exp_spark.adb, sem_ch13.ads, sem_ch13.adb,\n+\tsnames.ads-tmpl: Minor reformatting and typo fixes.\n+\n+2020-07-10  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_util.adb (Has_Enabled_Property): Add handling of\n+\tnon-variable objects.\n+\n+2020-07-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Check_Completion): Refactor chained\n+\tif-then-elsif-...  statement to be more like a case\n+\tstatement (note: we can't simply use case statement because of\n+\tIs_Intrinsic_Subprogram in the first condition).\n+\n+2020-07-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* einfo.ads (E_Protected_Object): Enumeration literal removed.\n+\t* lib-xref.ads (Xref_Entity_Letters): Remove reference to\n+\tremoved literal.\n+\t* sem_ch3.adb (Check_Completion): Likewise.\n+\t* sem_util.adb (Has_Enabled_Property): Likewise.\n+\n+2020-07-10  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_aggr.adb (Max_Aggregate_Size): Use small limit for\n+\taggregate inside subprograms.\n+\t* sprint.adb (Sprint_Node_Actual [N_Object_Declaration]): Do not\n+\tprint the initialization expression if the No_Initialization\n+\tflag is set.\n+\t* sem_util.ads, sem_util.adb (Predicate_Enabled): New.\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): Code cleanup and apply\n+\tpredicate check consistently.\n+\t* exp_ch6.adb (Expand_Actuals.By_Ref_Predicate_Check): Ditto.\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Ditto.\n+\t* exp_ch3.adb (Build_Assignment): Revert handling of predicate\n+\tcheck for allocators with qualified expressions, now handled in\n+\tFreeze_Expression directly.\n+\t* sem_aggr.adb: Fix typos.\n+\t* checks.adb: Code refactoring: use Predicate_Enabled.\n+\t(Apply_Predicate_Check): Code cleanup.\n+\t* freeze.adb (Freeze_Expression): Freeze the subtype mark before\n+\ta qualified expression on an allocator.\n+\t* exp_util.ads, exp_util.adb (Within_Internal_Subprogram):\n+\tRenamed Predicate_Check_In_Scope to clarify usage, refine\n+\thandling of predicates within init procs which should be enabled\n+\twhen the node comes from source.\n+\t* sem_ch13.adb (Freeze_Entity_Checks): Update call to\n+\tPredicate_Check_In_Scope.\n+\n+2020-07-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Array_Comparison): Reformat.\n+\t(Expand_Concatenate): Use standard size values directly and use\n+\tStandard_Long_Long_Unsigned instead of RE_Long_Long_Unsigned.\n+\t(Expand_Modular_Op): Use Standard_Long_Long_Integer in case the\n+\tmodulus is larger than Integer.\n+\t(Expand_N_Op_Expon): Use standard size value directly.\n+\t(Narrow_Large_Operation): Use Uint instead of Nat for sizes and\n+\tuse a local variable for the size of the type.\n+\t(Get_Size_For_Range): Return Uint instead of Nat.\n+\t(Is_OK_For_Range): Take Uint instead of Nat.\n+\n+2020-07-10  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch6.adb (Make_Build_In_Place_Iface_Call_In_Allocator):\n+\tBuild the internal anonymous access type using as a reference\n+\tthe designated type imposed by the context (instead of using the\n+\treturn type of the called function).\n+\n+2020-07-10  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Actuals): Protect call to\n+\tIs_Valued_Procedure.\n+\n+2020-07-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Process_Discriminants): Revert recent change to\n+\tlocation of Set_Ekind; detect effectively volatile discriminants\n+\tby their type only.\n+\n+2020-07-10  Joffrey Huguet  <huguet@adacore.com>\n+\n+\t* libgnat/a-nbnbin.ads, libgnat/a-nbnbre.ads: Add global\n+\tcontract (Global => null) to all functions.\n+\n+2020-07-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* aspects.ads: Add Aspect_Aggregate.\n+\t* exp_aggr.adb (Expand_Container_Aggregate): Expand positional\n+\tcontainer aggregates into separate initialization and insertion\n+\toperations.\n+\t* sem_aggr.ads (Resolve_Container_Aggregate): New subprogram.\n+\t* sem_aggr.adb (Resolve_Container_Aggregate): Parse aspect\n+\taggregate, establish element types and key types if present, and\n+\tresolve aggregate components.\n+\t* sem_ch13.ads (Parse_Aspect_Aggregate): Public subprogram used\n+\tin validation, resolution and expansion of container aggregates\n+\t* sem_ch13.adb\n+\t(Parse_Aspect_Aggregate): Retrieve names of primitives specified\n+\tin aspect specification.\n+\t(Validate_Aspect_Aggregate): Check legality of specified\n+\toperations given in aspect specification, before nane\n+\tresolution.\n+\t(Resolve_Aspect_Aggregate): At freeze point resolve operations\n+\tand verify that given operations have the required profile.\n+\t* sem_res.adb (Resolve): Call Resolve_Aspect_Aggregate if aspect\n+\tis present for type.\n+\t* snames.ads-tmpl: Add names used in aspect Aggregate: Empty,\n+\tAdd_Named, Add_Unnamed, New_Indexed, Assign_Indexed.\n+\n+2020-07-10  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* Makefile.rtl (GNATRTL_NONTASKING_OBJS): Add s-shabig.o.\n+\t* libgnat/s-shabig.ads: New file to share definitions.\n+\t* libgnat/s-genbig.ads, libgnat/s-genbig.adb: Reorganized to\n+\tmake it more generic and flexible in terms of memory allocation\n+\tand data structure returned.\n+\t(To_String): Moved to System.Generic_Bignums to allow sharing\n+\tthis code.\n+\t(Big_And, Big_Or, Big_Shift_Left, Big_Shift_Right): New.\n+\t* libgnat/s-bignum.adb, libgnat/s-bignum.ads: Adapt to new\n+\tSystem.Generic_Bignums spec.\n+\t* libgnat/a-nbnbin.adb: Likewise.\n+\t(To_String): Moved to System.Generic_Bignums to allow sharing\n+\tthis code.\n+\t* libgnat/a-nbnbre.adb (Normalize): Fix handling of Num = 0\n+\tleading to an exception.\n+\n+2020-07-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* freeze.adb (Freeze_Expr_Types): Replace call to Find_Aspect\n+\twith call to Find_Value_Of_Aspect and adjust accordingly.\n+\n+2020-07-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.adb (Write_Field24_Name): Handle E_Loop_Parameter.\n+\t* freeze.adb (Freeze_Expr_Types): Freeze the iterator type used as\n+\tDefault_Iterator of the name of an N_Iterator_Specification node.\n+\n+2020-07-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* checks.adb (Determine_Range): Deal with Min and Max attributes.\n+\t* exp_ch6.adb (Expand_Call_Helper): When generating code to pass\n+\tthe accessibility level to the caller in the case of an actual\n+\twhich is an if-expression, also remove the nodes created after\n+\tthe declaration of the dummy temporary.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Use Natural as\n+\tthe type of the minimum accessibility level object.\n+\n+2020-07-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Process_Discriminants): Set Ekind of the\n+\tprocessed discriminant entity before passing to\n+\tIs_Effectively_Volatile, which was crashing on a failed\n+\tassertion.\n+\t* sem_prag.adb (Analyze_External_Property_In_Decl_Part): Prevent\n+\tcall to No_Caching_Enabled with entities other than variables,\n+\twhich was crashing on a failed assertion.\n+\t(Analyze_Pragma): Style cleanups.\n+\t* sem_util.adb (Is_Effectively_Volatile): Enforce comment with\n+\tan assertion; prevent call to No_Caching_Enabled with entities\n+\tother than variables.\n+\t(Is_Effectively_Volatile_Object): Only call\n+\tIs_Effectively_Volatile on objects, not on types.\n+\t(No_Caching_Enabled): Enforce comment with an assertion.\n+\n+2020-07-10  Yannick Moy  <moy@adacore.com>\n+\n+\t* debug.adb: Update comments to free usage of -gnatdF.\n+\n+2020-07-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_Delta_Or_Update): Refactored from\n+\tExpand_SPARK_N_Attribute_Reference; rewrite into N_Aggregate or\n+\tN_Delta_Aggregate depending on what is being rewritten.\n+\t(Expand_SPARK_N_Delta_Aggregate): New routine to expand\n+\tdelta_aggregate.\n+\t(Expand_SPARK_N_Attribute_Reference): Call the refactored\n+\troutine.\n+\n+2020-07-10  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_N_Attribute_Reference): Fix\n+\texpansion of attribute Update.\n+\n+2020-07-10  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem.adb (Walk_Library_Items): Fix handling of Ghost units.\n+\n 2020-07-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tracebak.c [generic implementation]: Add pragma GCC diagnostic"}, {"sha": "bf7199463eaf6ba9acc29cb4481ece986858a25e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865362954f7523e8b09f54393d174fc6b0067dd8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865362954f7523e8b09f54393d174fc6b0067dd8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=865362954f7523e8b09f54393d174fc6b0067dd8", "patch": "@@ -1,3 +1,24 @@\n+2020-07-10  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.c (structural_type_p): Allow unions.\n+\t* mangle.c (write_expression): Express unions with a designator.\n+\n+2020-07-10  Jason Merrill  <jason@redhat.com>\n+\n+\t* pt.c (convert_nontype_argument): Handle REAL_TYPE.\n+\t(invalid_nontype_parm_type_p): Allow all structural types.\n+\t* tree.c (structural_type_p): Use SCALAR_TYPE_P.\n+\n+2020-07-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96105\n+\tPR c++/96052\n+\tPR c++/95976\n+\t* class.c (check_field_decls): An array of empty classes is not an\n+\tempty data member.\n+\t(layout_empty_base_or_field): Handle explicit alignment.\n+\tFix union handling.\n+\n 2020-07-09  Julian Brown  <julian@codesourcery.com>\n \t    Thomas Schwinge  <thomas@codesourcery.com>\n "}, {"sha": "546d535b98c765c31f08487e1b4d460853be948c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865362954f7523e8b09f54393d174fc6b0067dd8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865362954f7523e8b09f54393d174fc6b0067dd8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=865362954f7523e8b09f54393d174fc6b0067dd8", "patch": "@@ -1,3 +1,21 @@\n+2020-07-10  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95980\n+\t* class.c (gfc_add_component_ref, gfc_build_class_symbol):\n+\tAdd checks for NULL pointer dereference.\n+\t* primary.c (gfc_variable_attr): Likewise.\n+\t* resolve.c (resolve_variable, resolve_assoc_var)\n+\t(resolve_fl_var_and_proc, resolve_fl_variable_derived)\n+\t(resolve_symbol): Likewise.\n+\n+2020-07-10  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/96086\n+\t* match.c (gfc_match_select_rank): Catch NULL pointer\n+\tdereference.\n+\t* resolve.c (resolve_assoc_var): Catch NULL pointer dereference\n+\tthat may occur after an illegal declaration.\n+\n 2020-07-09  Julian Brown  <julian@codesourcery.com>\n \n \t* trans-openmp.c (gfc_trans_omp_clauses): Use 'inner' not 'decl' for"}, {"sha": "b8885a7f7203fa129eed1f858f3d8f1c1d9bbe15", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865362954f7523e8b09f54393d174fc6b0067dd8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865362954f7523e8b09f54393d174fc6b0067dd8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=865362954f7523e8b09f54393d174fc6b0067dd8", "patch": "@@ -1,3 +1,98 @@\n+2020-07-10  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c11-bool-limits-1.c, gcc.dg/c2x-bool-limits-1.c: New\n+\ttests.\n+\n+2020-07-10  Rajalakshmi Srinivasaraghavan  <rajis@linux.vnet.ibm.com>\n+\t    Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/p10-identify.c: New file.\n+\t* gcc.target/powerpc/p10-arch31.c: New file.\n+\t* gcc.target/powerpc/mma-single-test.c: New file.\n+\t* gcc.target/powerpc/mma-double-test.c: New file.\n+\n+2020-07-10  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95980\n+\t* gfortran.dg/pr95980_2.f90: New file.\n+\n+2020-07-10  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/96086\n+\t* gfortran.dg/pr96086.f90: New file.\n+\n+2020-07-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/92789\n+\tPR target/95726\n+\t* g++.target/arm/pr95726.C: New test.\n+\n+2020-07-10  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/vsx_mask-count-runnable.c: New test case.\n+\t* gcc.target/powerpc/vsx_mask-expand-runnable.c: New test case.\n+\t* gcc.target/powerpc/vsx_mask-extract-runnable.c: New test case.\n+\t* gcc.target/powerpc/vsx_mask-move-runnable.c: New test case.\n+\n+2020-07-10  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/96148\n+\t* lib/scanwpaipa.exp: Fix wpa dump file suffix the same way\n+\tas other in the file.\n+\n+2020-07-10  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp2a/nontype-class-union1.C: New test.\n+\n+2020-07-10  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/pr81246.C: No error in C++20.\n+\t* g++.dg/cpp0x/variadic74.C: No error in C++20.\n+\t* g++.dg/cpp1z/nontype-auto3.C: No error in C++20.\n+\t* g++.dg/template/crash106.C: No error in C++20.\n+\t* g++.dg/template/crash119.C: No error in C++20.\n+\t* g++.dg/template/nontype12.C: No error in C++20.\n+\t* g++.dg/template/void3.C: Don't require follow-on message.\n+\t* g++.dg/template/void7.C: Don't require follow-on message.\n+\t* g++.dg/template/void9.C: Don't require follow-on message.\n+\t* g++.dg/cpp2a/nontype-class-equiv1.C: New file.\n+\n+2020-07-10  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96105\n+\tPR c++/96052\n+\tPR c++/95976\n+\t* g++.dg/cpp2a/no_unique_address4.C: New test.\n+\t* g++.dg/cpp2a/no_unique_address5.C: New test.\n+\t* g++.dg/cpp2a/no_unique_address6.C: New test.\n+\n+2020-07-10  Andrea Corallo  <andrea.corallo@arm.com>\n+\t    Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n+\t    Iain Apreotesei  <iain.apreotesei@arm.com>\n+\n+\t* gcc.target/arm/lob.h: New header.\n+\t* gcc.target/arm/lob1.c: New testcase.\n+\t* gcc.target/arm/lob2.c: Likewise.\n+\t* gcc.target/arm/lob3.c: Likewise.\n+\t* gcc.target/arm/lob4.c: Likewise.\n+\t* gcc.target/arm/lob5.c: Likewise.\n+\t* gcc.target/arm/lob6.c: Likewise.\n+\t* gcc.target/arm/unsigned-extend-2.c: Do not run when generating\n+\tlow loop overhead.\n+\t* gcc.target/arm/ivopts.c: Fix check for low loop overhead.\n+\t* lib/target-supports.exp (check_effective_target_arm_v8_1_lob)\n+\t(check_effective_target_arm_thumb2_ok_no_arm_v8_1_lob): New procs.\n+\n+2020-07-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96133\n+\t* gcc.dg/torture/pr96133.c: New testcase.\n+\n+2020-07-10  Cui,Lili  <lili.cui@intel.com>\n+\n+\t* gcc.target/i386/funcspec-56.inc: Handle new march.\n+\t* g++.target/i386/mv16.C: Handle new march\n+\n 2020-07-09  Julian Brown  <julian@codesourcery.com>\n \t    Thomas Schwinge  <thomas@codesourcery.com>\n "}, {"sha": "63b95f2f13fbd418aa2aa26b19580e621c889631", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865362954f7523e8b09f54393d174fc6b0067dd8/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865362954f7523e8b09f54393d174fc6b0067dd8/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=865362954f7523e8b09f54393d174fc6b0067dd8", "patch": "@@ -1,3 +1,53 @@\n+2020-07-10  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* libgomp.h (struct splay_tree_key_s): Change virtual_refcount to\n+\tdynamic_refcount.\n+\t(struct gomp_device_descr): Remove GOMP_MAP_VARS_OPENACC_ENTER_DATA.\n+\t* oacc-mem.c (acc_map_data): Substitute virtual_refcount for\n+\tdynamic_refcount.\n+\t(acc_unmap_data): Update comment.\n+\t(goacc_map_var_existing, goacc_enter_datum): Adjust for\n+\tdynamic_refcount semantics.\n+\t(goacc_exit_datum_1, goacc_exit_datum): Re-add some error checking.\n+\tAdjust for dynamic_refcount semantics.\n+\t(goacc_enter_data_internal): Implement \"present\" case of dynamic\n+\tmemory-map handling here.  Update \"non-present\" case for\n+\tdynamic_refcount semantics.\n+\t(goacc_exit_data_internal): Use goacc_exit_datum_1.\n+\t* target.c (gomp_map_vars_internal): Remove\n+\tGOMP_MAP_VARS_OPENACC_ENTER_DATA handling.  Update for dynamic_refcount\n+\thandling.\n+\t(gomp_unmap_vars_internal): Remove virtual_refcount handling.\n+\t(gomp_load_image_to_device): Substitute dynamic_refcount for\n+\tvirtual_refcount.\n+\t* testsuite/libgomp.oacc-c-c++-common/pr92843-1.c: Remove XFAILs.\n+\t* testsuite/libgomp.oacc-c-c++-common/refcounting-1.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/refcounting-2.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/struct-3-1-1.c: New test.\n+\t* testsuite/libgomp.oacc-fortran/deep-copy-6.f90: Remove XFAILs and\n+\ttrace output.\n+\t* testsuite/libgomp.oacc-fortran/deep-copy-6-no_finalize.F90: Remove\n+\ttrace output.\n+\t* testsuite/libgomp.oacc-fortran/dynamic-incr-structural-1.f90: New\n+\ttest.\n+\t* testsuite/libgomp.oacc-c-c++-common/structured-dynamic-lifetimes-4.c:\n+\tRemove stale comment.\n+\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-1-1.f90: Remove XFAILs.\n+\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-1-2.F90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-2-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-2-2.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-3-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/mdc-refcount-1-4-1.f90: Adjust XFAIL.\n+\n+2020-07-10  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* oacc-mem.c (goacc_map_var_existing): New function.\n+\t(goacc_enter_datum): Use above function.\n+\t(goacc_exit_datum_1): New function.\n+\t(goacc_exit_datum): Use above function.\n+\n 2020-07-09  Julian Brown  <julian@codesourcery.com>\n \t    Thomas Schwinge  <thomas@codesourcery.com>\n "}, {"sha": "040458a3601b18471acae7d4cd7caf857befcbde", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865362954f7523e8b09f54393d174fc6b0067dd8/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865362954f7523e8b09f54393d174fc6b0067dd8/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=865362954f7523e8b09f54393d174fc6b0067dd8", "patch": "@@ -1,3 +1,11 @@\n+2020-07-10  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-demangle.c (cplus_demangle_operators): Add di, dx, dX.\n+\t(d_expression_1): Handle di and dX.\n+\t(is_designated_init, d_maybe_print_designated_init): New.\n+\t(d_print_comp_inner): Use d_maybe_print_designated_init.\n+\t* testsuite/demangle-expected: Add designator tests.\n+\n 2020-06-26  Nick Clifton  <nickc@redhat.com>\n \n \t* bsearch.c (bsearch): Remove use of register keyword."}]}