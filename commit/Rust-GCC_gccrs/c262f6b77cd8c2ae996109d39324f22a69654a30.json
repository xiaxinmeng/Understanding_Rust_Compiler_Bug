{"sha": "c262f6b77cd8c2ae996109d39324f22a69654a30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI2MmY2Yjc3Y2Q4YzJhZTk5NjEwOWQzOTMyNGYyMmE2OTY1NGEzMA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-01-23T00:23:21Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-01-23T00:23:21Z"}, "message": "Warray-bounds-2.c: Include headers only if they exist.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/Warray-bounds-2.c: Include headers only if they exist.\n\t* c-c++-common/Warray-bounds-3.c: Make xfails conditional on target\n\tnon_strict_align.\n\t* c-c++-common/Wrestrict-2.c: Include headers only if they exist.\n\t* c-c++-common/Wrestrict.c: Make xfails conditional on target\n\tnon_strict_align.\n\nFrom-SVN: r268175", "tree": {"sha": "311e69e1c133af83ea62fa3d481a6d27d0547275", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/311e69e1c133af83ea62fa3d481a6d27d0547275"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c262f6b77cd8c2ae996109d39324f22a69654a30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c262f6b77cd8c2ae996109d39324f22a69654a30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c262f6b77cd8c2ae996109d39324f22a69654a30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c262f6b77cd8c2ae996109d39324f22a69654a30/comments", "author": null, "committer": null, "parents": [{"sha": "e6c26d640649ad334160f073ace6ef52d8e4039d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6c26d640649ad334160f073ace6ef52d8e4039d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6c26d640649ad334160f073ace6ef52d8e4039d"}], "stats": {"total": 103, "additions": 76, "deletions": 27}, "files": [{"sha": "3361da85991c0ae95675449f9be4dd5489908c31", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c262f6b77cd8c2ae996109d39324f22a69654a30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c262f6b77cd8c2ae996109d39324f22a69654a30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c262f6b77cd8c2ae996109d39324f22a69654a30", "patch": "@@ -1,21 +1,30 @@\n+2019-01-22  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c-c++-common/Warray-bounds-2.c: Include headers only if they exist.\n+\t* c-c++-common/Warray-bounds-3.c: Make xfails conditional on target\n+\tnon_strict_align.\n+\t* c-c++-common/Wrestrict-2.c: Include headers only if they exist.\n+\t* c-c++-common/Wrestrict.c: Make xfails conditional on target\n+\tnon_strict_align.\n+\n 2018-01-22  Steve Ellcey  <sellcey@marvell.com>\n \n-\tc-c++-common/gomp/pr60823-1.c: Change aarch64-*-* target\n+\t* c-c++-common/gomp/pr60823-1.c: Change aarch64-*-* target\n \tto aarch64*-*-* target.\n-\tc-c++-common/gomp/pr60823-3.c: Ditto.\n-\tg++.dg/gomp/declare-simd-1.C: Ditto.\n-\tg++.dg/gomp/declare-simd-3.C: Ditto.\n-\tg++.dg/gomp/declare-simd-4.C: Ditto.\n-\tg++.dg/gomp/declare-simd-7.C: Ditto.\n-\tg++.dg/gomp/pr88182.C: Ditto.\n-\tgcc.dg/gomp/declare-simd-1.c: Ditto.\n-\tgcc.dg/gomp/declare-simd-3.c: Ditto.\n-\tgcc.dg/gomp/pr59669-2.c: Ditto.\n-\tgcc.dg/gomp/pr87895-1.c: Ditto.\n-\tgcc.dg/gomp/simd-clones-2.c: Ditto.\n-\tgfortran.dg/gomp/declare-simd-2.f90: Ditto.\n-\tgfortran.dg/gomp/pr79154-1.f90: Ditto.\n-\tgfortran.dg/gomp/pr83977.f90: Ditto.\n+\t* c-c++-common/gomp/pr60823-3.c: Ditto.\n+\t* g++.dg/gomp/declare-simd-1.C: Ditto.\n+\t* g++.dg/gomp/declare-simd-3.C: Ditto.\n+\t* g++.dg/gomp/declare-simd-4.C: Ditto.\n+\t* g++.dg/gomp/declare-simd-7.C: Ditto.\n+\t* g++.dg/gomp/pr88182.C: Ditto.\n+\t* gcc.dg/gomp/declare-simd-1.c: Ditto.\n+\t* gcc.dg/gomp/declare-simd-3.c: Ditto.\n+\t* gcc.dg/gomp/pr59669-2.c: Ditto.\n+\t* gcc.dg/gomp/pr87895-1.c: Ditto.\n+\t* gcc.dg/gomp/simd-clones-2.c: Ditto.\n+\t* gfortran.dg/gomp/declare-simd-2.f90: Ditto.\n+\t* gfortran.dg/gomp/pr79154-1.f90: Ditto.\n+\t* gfortran.dg/gomp/pr83977.f90: Ditto.\n \n 2019-01-22  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "ca2d1c98218ed1a5ac42ba220d90f3b1e308ed5e", "filename": "gcc/testsuite/c-c++-common/Warray-bounds-2.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c262f6b77cd8c2ae996109d39324f22a69654a30/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c262f6b77cd8c2ae996109d39324f22a69654a30/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-2.c?ref=c262f6b77cd8c2ae996109d39324f22a69654a30", "patch": "@@ -8,12 +8,27 @@\n    { dg-do compile }\n    { dg-options \"-O2 -Warray-bounds -Wno-stringop-overflow\" } */\n \n-#include <stddef.h>\n-#include <string.h>\n+#if __has_include (<stddef.h>)\n+#  include <stddef.h>\n+#else\n+/* For cross-compilers.  */\n+typedef __PTRDIFF_TYPE__   ptrdiff_t;\n+typedef __SIZE_TYPE__      size_t;\n+#endif\n+\n+#if __has_include (<string.h>)\n+#  include <string.h>\n+#  undef memcpy\n+#  undef strcat\n+#  undef strcpy\n+#  undef strncpy\n+#else\n+extern void* memcpy (void*, const void*, size_t);\n+extern char* strcat (char*, const char*);\n+extern char* strcpy (char*, const char*);\n+extern char* strncpy (char*, const char*, size_t);\n+#endif\n \n-#undef memcpy\n-#undef strcpy\n-#undef strncpy\n \n #define MAX  (__SIZE_MAX__ / 2)\n "}, {"sha": "7f2b33b404a6b041662d4e5032296df9fff77aa3", "filename": "gcc/testsuite/c-c++-common/Warray-bounds-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c262f6b77cd8c2ae996109d39324f22a69654a30/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c262f6b77cd8c2ae996109d39324f22a69654a30/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-3.c?ref=c262f6b77cd8c2ae996109d39324f22a69654a30", "patch": "@@ -158,7 +158,7 @@ void test_memcpy_overflow (char *d, const char *s, size_t n)\n      but known access size is detected.  This works except with small\n      sizes that are powers of 2 due to bug .  */\n   T (char, 1, arr + SR (DIFF_MAX - 1, DIFF_MAX), s, 1);\n-  T (char, 1, arr + SR (DIFF_MAX - 1, DIFF_MAX), s, 2);  /* { dg-warning \"pointer overflow between offset \\\\\\[\\[0-9\\]+, \\[0-9\\]+] and size 2 accessing array \" \"bug \" { xfail *-*-* } } */\n+  T (char, 1, arr + SR (DIFF_MAX - 1, DIFF_MAX), s, 2);  /* { dg-warning \"pointer overflow between offset \\\\\\[\\[0-9\\]+, \\[0-9\\]+] and size 2 accessing array \" \"bug \" { xfail non_strict_align } } */\n   T (char, 1, arr + SR (DIFF_MAX - 2, DIFF_MAX), s, 3);  /* { dg-warning \"pointer overflow between offset \\\\\\[\\[0-9\\]+, \\[0-9\\]+] and size 3 accessing array \" \"memcpy\" } */\n   T (char, 1, arr + SR (DIFF_MAX - 4, DIFF_MAX), s, 5);  /* { dg-warning \"pointer overflow between offset \\\\\\[\\[0-9\\]+, \\[0-9\\]+] and size 5 accessing array \" \"memcpy\" } */\n }"}, {"sha": "4d901670519f58c1441c8e72063650acc05b8560", "filename": "gcc/testsuite/c-c++-common/Wrestrict-2.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c262f6b77cd8c2ae996109d39324f22a69654a30/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWrestrict-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c262f6b77cd8c2ae996109d39324f22a69654a30/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWrestrict-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWrestrict-2.c?ref=c262f6b77cd8c2ae996109d39324f22a69654a30", "patch": "@@ -8,7 +8,29 @@\n    { dg-do compile }\n    { dg-options \"-O2 -Wrestrict\" } */\n \n-#include <string.h>\n+#if __has_include (<stddef.h>)\n+#  include <stddef.h>\n+#else\n+/* For cross-compilers.  */\n+typedef __PTRDIFF_TYPE__   ptrdiff_t;\n+typedef __SIZE_TYPE__      size_t;\n+#endif\n+\n+#if __has_include (<string.h>)\n+#  include <string.h>\n+#  undef memcpy\n+#  undef strcat\n+#  undef strcpy\n+#  undef strncat\n+#  undef strncpy\n+#else\n+extern void* memcpy (void*, const void*, size_t);\n+extern char* strcat (char*, const char*);\n+extern char* strcpy (char*, const char*);\n+extern char* strncat (char*, const char*, size_t);\n+extern char* strncpy (char*, const char*, size_t);\n+#endif\n+\n \n static void wrap_memcpy (void *d, const void *s, size_t n)\n {"}, {"sha": "c852b06bbd77fd78368cdca1f69838438c18bd6d", "filename": "gcc/testsuite/c-c++-common/Wrestrict.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c262f6b77cd8c2ae996109d39324f22a69654a30/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWrestrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c262f6b77cd8c2ae996109d39324f22a69654a30/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWrestrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWrestrict.c?ref=c262f6b77cd8c2ae996109d39324f22a69654a30", "patch": "@@ -53,8 +53,11 @@ void test_memcpy_cst (void *d, const void *s)\n \n   T (a, a, 0);\n \n-  /* This isn't detected because memcpy calls with small power-of-2 sizes\n-     are intentionally folded into safe copies equivalent to memmove.\n+  /* This isn't detected because memcpy calls with size of 1 are\n+     intentionally folded into safe copies equivalent to memmove,\n+     regardless of the target (larger power-of-2 copies may or\n+     may not be folded depending on the target -- see non_strict_align\n+     below, for example).\n      It's marked xfail only because there is value in detecting such\n      invalid calls for portability, and as a reminder of why it isn't\n      diagnosed.  */\n@@ -192,19 +195,19 @@ void test_memcpy_range (char *d, size_t sz)\n   T (a + ir, a, 2);\n   T (a + ir, a, 3);\n   /* The following fails because the size is a small power of 2.  */\n-  T (a + ir, a, 4);               /* { dg-warning \"accessing 4 bytes at offsets \\\\\\[2, 3] and 0 overlaps between 1 and 2 bytes at offset \\\\\\[3, 2]\" \"memcpy\" { xfail *-*-*} } */\n+  T (a + ir, a, 4);               /* { dg-warning \"accessing 4 bytes at offsets \\\\\\[2, 3] and 0 overlaps between 1 and 2 bytes at offset \\(\\\\\\[3, 2]|\\\\\\[2, 3]\\)\" \"pr79220\" { xfail non_strict_align } } */\n   T (a + ir, a, 5);               /* { dg-warning \"accessing 5 bytes at offsets \\\\\\[2, 3] and 0 overlaps between 2 and 3 bytes at offset \\\\\\[2, 3]\" \"memcpy\" } */\n \n   T (d + ir, d, 0);\n   T (d + ir, d, 1);\n   T (d + ir, d, 2);\n   T (d + ir, d, 3);\n-  T (d + ir, d, 4);               /* { dg-warning \"accessing 4 bytes at offsets \\\\\\[2, 3] and 0 overlaps 1 byte at offset 3\" \"bug 79220\" { xfail *-*-* } } */\n+  T (d + ir, d, 4);               /* { dg-warning \"accessing 4 bytes at offsets \\\\\\[2, 3] and 0 overlaps between 1 and 2 bytes at offset \\\\\\[2, 3]\" \"pr79220\" { xfail non_strict_align } } */\n   T (d + ir, d, 5);               /* { dg-warning \"accessing 5 bytes at offsets \\\\\\[2, 3] and 0 overlaps between 2 and 3 bytes at offset \\\\\\[2, 3]\" \"memcpy\" } */\n \n   /* Because the size is constant and a power of 2 the following is\n      folded too early to detect the overlap.  */\n-  T (d + ir, d, 4);               /* { dg-warning \"accessing 4 bytes at offsets \\\\\\[2, 3] and 0 overlaps 2 byte at offset 2\" \"memcpy\" { xfail *-*-* } } */\n+  T (d + ir, d, 4);               /* { dg-warning \"accessing 4 bytes at offsets \\\\\\[2, 3] and 0 overlaps between 1 and 2 bytes at offset \\\\\\[2, 3]\" \"pr79220\" { xfail non_strict_align } } */\n   T (d + ir, d, 5);               /* { dg-warning \"accessing 5 bytes at offsets \\\\\\[2, 3] and 0 overlaps between 2 and 3 bytes at offset \\\\\\[2, 3]\" \"memcpy\" } */\n \n   /* Exercise the full range of size_t.  */"}]}