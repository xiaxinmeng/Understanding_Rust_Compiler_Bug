{"sha": "833c439a501a02c6c3c5b34f8e4c84706e8b62f2", "node_id": "C_kwDOANBUbNoAKDgzM2M0MzlhNTAxYTAyYzZjM2M1YjM0ZjhlNGM4NDcwNmU4YjYyZjI", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-24T12:47:57Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-24T12:47:57Z"}, "message": "Add boilerplate for the new SliceType", "tree": {"sha": "a6f896c42117eb55ac7f14454170b94d811f9a7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6f896c42117eb55ac7f14454170b94d811f9a7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/833c439a501a02c6c3c5b34f8e4c84706e8b62f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833c439a501a02c6c3c5b34f8e4c84706e8b62f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833c439a501a02c6c3c5b34f8e4c84706e8b62f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6dd242845303f44f38035189fd9360c7f572dfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6dd242845303f44f38035189fd9360c7f572dfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6dd242845303f44f38035189fd9360c7f572dfc"}], "stats": {"total": 360, "additions": 360, "deletions": 0}, "files": [{"sha": "21da9aff1d11aacf528ab949e62d9368250b53e5", "filename": "gcc/rust/backend/rust-compile-type.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Fbackend%2Frust-compile-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Fbackend%2Frust-compile-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-type.cc?ref=833c439a501a02c6c3c5b34f8e4c84706e8b62f2", "patch": "@@ -344,6 +344,13 @@ TyTyResolveCompile::visit (const TyTy::ArrayType &type)\n     = ctx->get_backend ()->array_type (element_type, folded_capacity_expr);\n }\n \n+void\n+TyTyResolveCompile::visit (const TyTy::SliceType &type)\n+{\n+  // TODO\n+  gcc_unreachable ();\n+}\n+\n void\n TyTyResolveCompile::visit (const TyTy::BoolType &type)\n {"}, {"sha": "4f9c40349e407db206c97d3515f39ef5647c4f17", "filename": "gcc/rust/backend/rust-compile-type.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Fbackend%2Frust-compile-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Fbackend%2Frust-compile-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-type.h?ref=833c439a501a02c6c3c5b34f8e4c84706e8b62f2", "patch": "@@ -43,6 +43,7 @@ class TyTyResolveCompile : public TyTy::TyConstVisitor\n   void visit (const TyTy::FnType &) override;\n   void visit (const TyTy::FnPtr &) override;\n   void visit (const TyTy::ArrayType &) override;\n+  void visit (const TyTy::SliceType &) override;\n   void visit (const TyTy::BoolType &) override;\n   void visit (const TyTy::IntType &) override;\n   void visit (const TyTy::UintType &) override;"}, {"sha": "a3720f8c2fa3b2f051288056b4d90e01f12138d2", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=833c439a501a02c6c3c5b34f8e4c84706e8b62f2", "patch": "@@ -62,6 +62,8 @@ class TyTyCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::ArrayType &) override { gcc_unreachable (); }\n \n+  void visit (TyTy::SliceType &) override { gcc_unreachable (); }\n+\n   void visit (TyTy::ReferenceType &) override { gcc_unreachable (); }\n \n   void visit (TyTy::PointerType &) override { gcc_unreachable (); }"}, {"sha": "0d48bd2532c352fc4e8ad6bfe39717b30a6e05cd", "filename": "gcc/rust/typecheck/rust-substitution-mapper.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h?ref=833c439a501a02c6c3c5b34f8e4c84706e8b62f2", "patch": "@@ -124,6 +124,7 @@ class SubstMapper : public TyTy::TyVisitor\n   void visit (TyTy::TupleType &) override { gcc_unreachable (); }\n   void visit (TyTy::FnPtr &) override { gcc_unreachable (); }\n   void visit (TyTy::ArrayType &) override { gcc_unreachable (); }\n+  void visit (TyTy::SliceType &) override { gcc_unreachable (); }\n   void visit (TyTy::BoolType &) override { gcc_unreachable (); }\n   void visit (TyTy::IntType &) override { gcc_unreachable (); }\n   void visit (TyTy::UintType &) override { gcc_unreachable (); }\n@@ -224,6 +225,7 @@ class SubstMapperInternal : public TyTy::TyVisitor\n   void visit (TyTy::InferType &) override { gcc_unreachable (); }\n   void visit (TyTy::FnPtr &) override { gcc_unreachable (); }\n   void visit (TyTy::ArrayType &) override { gcc_unreachable (); }\n+  void visit (TyTy::SliceType &) override { gcc_unreachable (); }\n   void visit (TyTy::BoolType &) override { gcc_unreachable (); }\n   void visit (TyTy::IntType &) override { gcc_unreachable (); }\n   void visit (TyTy::UintType &) override { gcc_unreachable (); }\n@@ -286,6 +288,7 @@ class SubstMapperFromExisting : public TyTy::TyVisitor\n   void visit (TyTy::TupleType &) override { gcc_unreachable (); }\n   void visit (TyTy::FnPtr &) override { gcc_unreachable (); }\n   void visit (TyTy::ArrayType &) override { gcc_unreachable (); }\n+  void visit (TyTy::SliceType &) override { gcc_unreachable (); }\n   void visit (TyTy::BoolType &) override { gcc_unreachable (); }\n   void visit (TyTy::IntType &) override { gcc_unreachable (); }\n   void visit (TyTy::UintType &) override { gcc_unreachable (); }\n@@ -343,6 +346,7 @@ class GetUsedSubstArgs : public TyTy::TyConstVisitor\n   void visit (const TyTy::TupleType &) override {}\n   void visit (const TyTy::FnPtr &) override {}\n   void visit (const TyTy::ArrayType &) override {}\n+  void visit (const TyTy::SliceType &) override {}\n   void visit (const TyTy::BoolType &) override {}\n   void visit (const TyTy::IntType &) override {}\n   void visit (const TyTy::UintType &) override {}"}, {"sha": "51817e6446d3eee0cda6e24ead7e85df2a9fd413", "filename": "gcc/rust/typecheck/rust-tyty-call.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h?ref=833c439a501a02c6c3c5b34f8e4c84706e8b62f2", "patch": "@@ -43,6 +43,7 @@ class TypeCheckCallExpr : private TyVisitor\n   void visit (InferType &) override { gcc_unreachable (); }\n   void visit (TupleType &) override { gcc_unreachable (); }\n   void visit (ArrayType &) override { gcc_unreachable (); }\n+  void visit (SliceType &) override { gcc_unreachable (); }\n   void visit (BoolType &) override { gcc_unreachable (); }\n   void visit (IntType &) override { gcc_unreachable (); }\n   void visit (UintType &) override { gcc_unreachable (); }\n@@ -99,6 +100,7 @@ class TypeCheckMethodCallExpr : private TyVisitor\n   void visit (InferType &) override { gcc_unreachable (); }\n   void visit (TupleType &) override { gcc_unreachable (); }\n   void visit (ArrayType &) override { gcc_unreachable (); }\n+  void visit (SliceType &) override { gcc_unreachable (); }\n   void visit (BoolType &) override { gcc_unreachable (); }\n   void visit (IntType &) override { gcc_unreachable (); }\n   void visit (UintType &) override { gcc_unreachable (); }"}, {"sha": "0e0e7b0a65bf8cfb5ebe58f2f18213f946c7a8e5", "filename": "gcc/rust/typecheck/rust-tyty-cast.h", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h?ref=833c439a501a02c6c3c5b34f8e4c84706e8b62f2", "patch": "@@ -153,6 +153,17 @@ class BaseCastRules : public TyVisitor\n \t\t   type.as_string ().c_str ());\n   }\n \n+  virtual void visit (SliceType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"invalid cast [%s] to [%s]\",\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n+  }\n+\n   virtual void visit (BoolType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n@@ -468,6 +479,19 @@ class InferCastRules : public BaseCastRules\n     BaseCastRules::visit (type);\n   }\n \n+  void visit (SliceType &type) override\n+  {\n+    bool is_valid\n+      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n+    if (is_valid)\n+      {\n+\tresolved = type.clone ();\n+\treturn;\n+      }\n+\n+    BaseCastRules::visit (type);\n+  }\n+\n   void visit (ADTType &type) override\n   {\n     bool is_valid\n@@ -818,6 +842,35 @@ class ArrayCastRules : public BaseCastRules\n   ArrayType *base;\n };\n \n+class SliceCastRules : public BaseCastRules\n+{\n+  using Rust::TyTy::BaseCastRules::visit;\n+\n+public:\n+  SliceCastRules (SliceType *base) : BaseCastRules (base), base (base) {}\n+\n+  void visit (SliceType &type) override\n+  {\n+    // check base type\n+    auto base_resolved\n+      = base->get_element_type ()->unify (type.get_element_type ());\n+    if (base_resolved == nullptr)\n+      {\n+\tBaseCastRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = new SliceType (type.get_ref (), type.get_ty_ref (),\n+\t\t\t      type.get_ident ().locus,\n+\t\t\t      TyVar (base_resolved->get_ref ()));\n+  }\n+\n+private:\n+  BaseType *get_base () override { return base; }\n+\n+  SliceType *base;\n+};\n+\n class BoolCastRules : public BaseCastRules\n {\n   using Rust::TyTy::BaseCastRules::visit;"}, {"sha": "436bde9a2954f90810dcab74fe0ef1f0abb7dca0", "filename": "gcc/rust/typecheck/rust-tyty-cmp.h", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h?ref=833c439a501a02c6c3c5b34f8e4c84706e8b62f2", "patch": "@@ -155,6 +155,22 @@ class BaseCmp : public TyConstVisitor\n       }\n   }\n \n+  virtual void visit (const SliceType &type) override\n+  {\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n+\n   virtual void visit (const BoolType &type) override\n   {\n     ok = false;\n@@ -544,6 +560,19 @@ class InferCmp : public BaseCmp\n     BaseCmp::visit (type);\n   }\n \n+  void visit (const SliceType &type) override\n+  {\n+    bool is_valid\n+      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n+    if (is_valid)\n+      {\n+\tok = true;\n+\treturn;\n+      }\n+\n+    BaseCmp::visit (type);\n+  }\n+\n   void visit (const ADTType &type) override\n   {\n     bool is_valid\n@@ -864,6 +893,36 @@ class ArrayCmp : public BaseCmp\n   const ArrayType *base;\n };\n \n+class SliceCmp : public BaseCmp\n+{\n+  using Rust::TyTy::BaseCmp::visit;\n+\n+public:\n+  SliceCmp (const SliceType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n+\n+  void visit (const SliceType &type) override\n+  {\n+    // check base type\n+    const BaseType *base_element = base->get_element_type ();\n+    const BaseType *other_element = type.get_element_type ();\n+    if (!base_element->can_eq (other_element, emit_error_flag))\n+      {\n+\tBaseCmp::visit (type);\n+\treturn;\n+      }\n+\n+    ok = true;\n+  }\n+\n+  void visit (const ParamType &type) override { ok = true; }\n+\n+private:\n+  const BaseType *get_base () const override { return base; }\n+  const SliceType *base;\n+};\n+\n class BoolCmp : public BaseCmp\n {\n   using Rust::TyTy::BaseCmp::visit;\n@@ -1258,6 +1317,8 @@ class ParamCmp : public BaseCmp\n \n   void visit (const ArrayType &) override { ok = true; }\n \n+  void visit (const SliceType &) override { ok = true; }\n+\n   void visit (const BoolType &) override { ok = true; }\n \n   void visit (const IntType &) override { ok = true; }"}, {"sha": "4deed5521a9b773c55595d3b6bc82e7defe4f8d4", "filename": "gcc/rust/typecheck/rust-tyty-coercion.h", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h?ref=833c439a501a02c6c3c5b34f8e4c84706e8b62f2", "patch": "@@ -167,6 +167,17 @@ class BaseCoercionRules : public TyVisitor\n \t\t   type.as_string ().c_str ());\n   }\n \n+  virtual void visit (SliceType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n+  }\n+\n   virtual void visit (BoolType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n@@ -483,6 +494,19 @@ class InferCoercionRules : public BaseCoercionRules\n     BaseCoercionRules::visit (type);\n   }\n \n+  void visit (SliceType &type) override\n+  {\n+    bool is_valid\n+      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n+    if (is_valid)\n+      {\n+\tresolved = type.clone ();\n+\treturn;\n+      }\n+\n+    BaseCoercionRules::visit (type);\n+  }\n+\n   void visit (ADTType &type) override\n   {\n     bool is_valid\n@@ -836,6 +860,36 @@ class ArrayCoercionRules : public BaseCoercionRules\n   ArrayType *base;\n };\n \n+class SliceCoercionRules : public BaseCoercionRules\n+{\n+  using Rust::TyTy::BaseCoercionRules::visit;\n+\n+public:\n+  SliceCoercionRules (SliceType *base) : BaseCoercionRules (base), base (base)\n+  {}\n+\n+  void visit (SliceType &type) override\n+  {\n+    // check base type\n+    auto base_resolved\n+      = base->get_element_type ()->unify (type.get_element_type ());\n+    if (base_resolved == nullptr)\n+      {\n+\tBaseCoercionRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = new SliceType (type.get_ref (), type.get_ty_ref (),\n+\t\t\t      type.get_ident ().locus,\n+\t\t\t      TyVar (base_resolved->get_ref ()));\n+  }\n+\n+private:\n+  BaseType *get_base () override { return base; }\n+\n+  SliceType *base;\n+};\n+\n class BoolCoercionRules : public BaseCoercionRules\n {\n   using Rust::TyTy::BaseCoercionRules::visit;"}, {"sha": "c1fc2cd96c13666a134463617573b87e918a39ee", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=833c439a501a02c6c3c5b34f8e4c84706e8b62f2", "patch": "@@ -185,6 +185,17 @@ class BaseRules : public TyVisitor\n \t\t   type.as_string ().c_str ());\n   }\n \n+  virtual void visit (SliceType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n+  }\n+\n   virtual void visit (BoolType &type) override\n   {\n     Location ref_locus = mappings->lookup_location (type.get_ref ());\n@@ -500,6 +511,19 @@ class InferRules : public BaseRules\n     BaseRules::visit (type);\n   }\n \n+  void visit (SliceType &type) override\n+  {\n+    bool is_valid\n+      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n+    if (is_valid)\n+      {\n+\tresolved = type.clone ();\n+\treturn;\n+      }\n+\n+    BaseRules::visit (type);\n+  }\n+\n   void visit (ADTType &type) override\n   {\n     bool is_valid\n@@ -850,6 +874,35 @@ class ArrayRules : public BaseRules\n   ArrayType *base;\n };\n \n+class SliceRules : public BaseRules\n+{\n+  using Rust::TyTy::BaseRules::visit;\n+\n+public:\n+  SliceRules (SliceType *base) : BaseRules (base), base (base) {}\n+\n+  void visit (SliceType &type) override\n+  {\n+    // check base type\n+    auto base_resolved\n+      = base->get_element_type ()->unify (type.get_element_type ());\n+    if (base_resolved == nullptr)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = new SliceType (type.get_ref (), type.get_ty_ref (),\n+\t\t\t      type.get_ident ().locus,\n+\t\t\t      TyVar (base_resolved->get_ref ()));\n+  }\n+\n+private:\n+  BaseType *get_base () override { return base; }\n+\n+  SliceType *base;\n+};\n+\n class BoolRules : public BaseRules\n {\n   using Rust::TyTy::BaseRules::visit;"}, {"sha": "464e70d39d7781cd517909e6320773b0249c847e", "filename": "gcc/rust/typecheck/rust-tyty-visitor.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h?ref=833c439a501a02c6c3c5b34f8e4c84706e8b62f2", "patch": "@@ -33,6 +33,7 @@ class TyVisitor\n   virtual void visit (FnType &type) = 0;\n   virtual void visit (FnPtr &type) = 0;\n   virtual void visit (ArrayType &type) = 0;\n+  virtual void visit (SliceType &type) = 0;\n   virtual void visit (BoolType &type) = 0;\n   virtual void visit (IntType &type) = 0;\n   virtual void visit (UintType &type) = 0;\n@@ -61,6 +62,7 @@ class TyConstVisitor\n   virtual void visit (const FnType &type) = 0;\n   virtual void visit (const FnPtr &type) = 0;\n   virtual void visit (const ArrayType &type) = 0;\n+  virtual void visit (const SliceType &type) = 0;\n   virtual void visit (const BoolType &type) = 0;\n   virtual void visit (const IntType &type) = 0;\n   virtual void visit (const UintType &type) = 0;"}, {"sha": "fa5dcfb877ce2af35201142fcc6dddc7aed4e4ce", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=833c439a501a02c6c3c5b34f8e4c84706e8b62f2", "patch": "@@ -59,6 +59,9 @@ TypeKindFormat::to_string (TypeKind kind)\n     case TypeKind::ARRAY:\n       return \"ARRAY\";\n \n+    case TypeKind::SLICE:\n+      return \"SLICE\";\n+\n     case TypeKind::FNDEF:\n       return \"FnDef\";\n \n@@ -1502,6 +1505,79 @@ ArrayType::clone () const\n \t\t\telement_type, get_combined_refs ());\n }\n \n+void\n+SliceType::accept_vis (TyVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+SliceType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n+std::string\n+SliceType::as_string () const\n+{\n+  return \"[\" + get_element_type ()->as_string () + \"]\";\n+}\n+\n+BaseType *\n+SliceType::unify (BaseType *other)\n+{\n+  SliceRules r (this);\n+  return r.unify (other);\n+}\n+\n+BaseType *\n+SliceType::coerce (BaseType *other)\n+{\n+  SliceCoercionRules r (this);\n+  return r.coerce (other);\n+}\n+\n+BaseType *\n+SliceType::cast (BaseType *other)\n+{\n+  SliceCastRules r (this);\n+  return r.cast (other);\n+}\n+\n+bool\n+SliceType::can_eq (const BaseType *other, bool emit_errors) const\n+{\n+  SliceCmp r (this, emit_errors);\n+  return r.can_eq (other);\n+}\n+\n+bool\n+SliceType::is_equal (const BaseType &other) const\n+{\n+  if (get_kind () != other.get_kind ())\n+    return false;\n+\n+  auto other2 = static_cast<const SliceType &> (other);\n+\n+  auto this_element_type = get_element_type ();\n+  auto other_element_type = other2.get_element_type ();\n+\n+  return this_element_type->is_equal (*other_element_type);\n+}\n+\n+BaseType *\n+SliceType::get_element_type () const\n+{\n+  return element_type.get_tyty ();\n+}\n+\n+BaseType *\n+SliceType::clone () const\n+{\n+  return new SliceType (get_ref (), get_ty_ref (), ident.locus, element_type,\n+\t\t\tget_combined_refs ());\n+}\n+\n void\n BoolType::accept_vis (TyVisitor &vis)\n {"}, {"sha": "85948b200d384be5f7ffe9a2b2569f524a2cf973", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833c439a501a02c6c3c5b34f8e4c84706e8b62f2/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=833c439a501a02c6c3c5b34f8e4c84706e8b62f2", "patch": "@@ -47,6 +47,7 @@ enum TypeKind\n   POINTER,\n   PARAM,\n   ARRAY,\n+  SLICE,\n   FNDEF,\n   FNPTR,\n   TUPLE,\n@@ -1666,6 +1667,50 @@ class ArrayType : public BaseType\n   HIR::Expr &capacity_expr;\n };\n \n+class SliceType : public BaseType\n+{\n+public:\n+  SliceType (HirId ref, Location locus, TyVar base,\n+\t     std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ref, TypeKind::SLICE,\n+\t\t{Resolver::CanonicalPath::create_empty (), locus}, refs),\n+      element_type (base)\n+  {}\n+\n+  SliceType (HirId ref, HirId ty_ref, Location locus, TyVar base,\n+\t     std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ty_ref, TypeKind::SLICE,\n+\t\t{Resolver::CanonicalPath::create_empty (), locus}, refs),\n+      element_type (base)\n+  {}\n+\n+  void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n+\n+  std::string as_string () const override;\n+\n+  std::string get_name () const override final { return as_string (); }\n+\n+  BaseType *unify (BaseType *other) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  BaseType *coerce (BaseType *other) override;\n+  BaseType *cast (BaseType *other) override;\n+\n+  bool is_equal (const BaseType &other) const override;\n+\n+  BaseType *get_element_type () const;\n+\n+  BaseType *clone () const final override;\n+\n+  bool is_concrete () const final override\n+  {\n+    return get_element_type ()->is_concrete ();\n+  }\n+\n+private:\n+  TyVar element_type;\n+};\n+\n class BoolType : public BaseType\n {\n public:"}]}