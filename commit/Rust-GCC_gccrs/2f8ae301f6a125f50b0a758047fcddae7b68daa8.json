{"sha": "2f8ae301f6a125f50b0a758047fcddae7b68daa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY4YWUzMDFmNmExMjVmNTBiMGE3NTgwNDdmY2RkYWU3YjY4ZGFhOA==", "commit": {"author": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2020-09-07T14:23:44Z"}, "committer": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2020-09-07T14:24:03Z"}, "message": "aarch64: Remove redundant mult patterns\n\nFollowing on from the previous commit to fix up the syntax for\nadd/sub/adds/subs and friends with a sign/zero-extended operand, this\npatch removes the \"mult\" variants of these patterns which are all\nredundant.\n\nThis patch removes the following patterns from the AArch64 backend:\n\n *adds_mul_imm_<mode>\n *subs_mul_imm_<mode>\n *adds_<optab><mode>_multp2\n *subs_<optab><mode>_multp2\n *add_mul_imm_<mode>\n *add_<optab><ALLX:mode>_mult_<GPI:mode>\n *add_<optab><SHORT:mode>_mult_si_uxtw\n *add_<optab><mode>_multp2\n *add_<optab>si_multp2_uxtw\n *add_uxt<mode>_multp2\n *add_uxtsi_multp2_uxtw\n *sub_mul_imm_<mode>\n *sub_mul_imm_si_uxtw\n *sub_<optab><mode>_multp2\n *sub_<optab>si_multp2_uxtw\n *sub_uxt<mode>_multp2\n *sub_uxtsi_multp2_uxtw\n *neg_mul_imm_<mode>2\n *neg_mul_imm_si2_uxtw\n\nTogether with the following predicates which were used only by these\npatterns:\n\n  aarch64_pwr_imm3\n  aarch64_pwr_2_si\n  aarch64_pwr_2_di\n\nThese patterns are all redundant since multiplications by powers of two\nshould be represented as shfits outside a (mem).\n\n---\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64.md (*adds_mul_imm_<mode>): Delete.\n\t(*subs_mul_imm_<mode>): Delete.\n\t(*adds_<optab><mode>_multp2): Delete.\n\t(*subs_<optab><mode>_multp2): Delete.\n\t(*add_mul_imm_<mode>): Delete.\n\t(*add_<optab><ALLX:mode>_mult_<GPI:mode>): Delete.\n\t(*add_<optab><SHORT:mode>_mult_si_uxtw): Delete.\n\t(*add_<optab><mode>_multp2): Delete.\n\t(*add_<optab>si_multp2_uxtw): Delete.\n\t(*add_uxt<mode>_multp2): Delete.\n\t(*add_uxtsi_multp2_uxtw): Delete.\n\t(*sub_mul_imm_<mode>): Delete.\n\t(*sub_mul_imm_si_uxtw): Delete.\n\t(*sub_<optab><mode>_multp2): Delete.\n\t(*sub_<optab>si_multp2_uxtw): Delete.\n\t(*sub_uxt<mode>_multp2): Delete.\n\t(*sub_uxtsi_multp2_uxtw): Delete.\n\t(*neg_mul_imm_<mode>2): Delete.\n\t(*neg_mul_imm_si2_uxtw): Delete.\n\t* config/aarch64/predicates.md (aarch64_pwr_imm3): Delete.\n\t(aarch64_pwr_2_si): Delete.\n\t(aarch64_pwr_2_di): Delete.", "tree": {"sha": "bcc37e23e37f8ab11506078ad01dc66ccd84cd2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcc37e23e37f8ab11506078ad01dc66ccd84cd2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f8ae301f6a125f50b0a758047fcddae7b68daa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f8ae301f6a125f50b0a758047fcddae7b68daa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f8ae301f6a125f50b0a758047fcddae7b68daa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f8ae301f6a125f50b0a758047fcddae7b68daa8/comments", "author": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4febc75e8dfab23bd3132d5747eded918f85107", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4febc75e8dfab23bd3132d5747eded918f85107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4febc75e8dfab23bd3132d5747eded918f85107"}], "stats": {"total": 286, "additions": 0, "deletions": 286}, "files": [{"sha": "dbc6b1db176ab38693651fee65a3149e96eef3ea", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 0, "deletions": 271, "changes": 271, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f8ae301f6a125f50b0a758047fcddae7b68daa8/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f8ae301f6a125f50b0a758047fcddae7b68daa8/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=2f8ae301f6a125f50b0a758047fcddae7b68daa8", "patch": "@@ -2341,38 +2341,6 @@\n   [(set_attr \"type\" \"alus_shift_imm\")]\n )\n \n-(define_insn \"*adds_mul_imm_<mode>\"\n-  [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n-\t (plus:GPI (mult:GPI\n-\t\t    (match_operand:GPI 1 \"register_operand\" \"r\")\n-\t\t    (match_operand:QI 2 \"aarch64_pwr_2_<mode>\" \"n\"))\n-\t\t   (match_operand:GPI 3 \"register_operand\" \"r\"))\n-\t (const_int 0)))\n-   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-\t(plus:GPI (mult:GPI (match_dup 1) (match_dup 2))\n-\t\t  (match_dup 3)))]\n-  \"\"\n-  \"adds\\\\t%<w>0, %<w>3, %<w>1, lsl %p2\"\n-  [(set_attr \"type\" \"alus_shift_imm\")]\n-)\n-\n-(define_insn \"*subs_mul_imm_<mode>\"\n-  [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n-\t (minus:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n-\t\t    (mult:GPI\n-\t\t     (match_operand:GPI 2 \"register_operand\" \"r\")\n-\t\t     (match_operand:QI 3 \"aarch64_pwr_2_<mode>\" \"n\")))\n-\t (const_int 0)))\n-   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-\t(minus:GPI (match_dup 1)\n-\t\t   (mult:GPI (match_dup 2) (match_dup 3))))]\n-  \"\"\n-  \"subs\\\\t%<w>0, %<w>1, %<w>2, lsl %p3\"\n-  [(set_attr \"type\" \"alus_shift_imm\")]\n-)\n-\n (define_insn \"*adds_<optab><ALLX:mode>_<GPI:mode>\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ\n@@ -2437,46 +2405,6 @@\n   [(set_attr \"type\" \"alus_ext\")]\n )\n \n-(define_insn \"*adds_<optab><mode>_multp2\"\n-  [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n-\t (plus:GPI (ANY_EXTRACT:GPI\n-\t\t    (mult:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n-\t\t\t      (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n-\t\t    (match_operand 3 \"const_int_operand\" \"n\")\n-\t\t    (const_int 0))\n-\t\t   (match_operand:GPI 4 \"register_operand\" \"rk\"))\n-\t(const_int 0)))\n-   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-\t(plus:GPI (ANY_EXTRACT:GPI (mult:GPI (match_dup 1) (match_dup 2))\n-\t\t\t\t   (match_dup 3)\n-\t\t\t\t   (const_int 0))\n-\t\t  (match_dup 4)))]\n-  \"aarch64_is_extend_from_extract (<MODE>mode, operands[2], operands[3])\"\n-  \"adds\\\\t%<w>0, %<w>4, %<w>1, <su>xt%e3 %p2\"\n-  [(set_attr \"type\" \"alus_ext\")]\n-)\n-\n-(define_insn \"*subs_<optab><mode>_multp2\"\n-  [(set (reg:CC_NZ CC_REGNUM)\n-\t(compare:CC_NZ\n-\t (minus:GPI (match_operand:GPI 4 \"register_operand\" \"rk\")\n-\t\t    (ANY_EXTRACT:GPI\n-\t\t     (mult:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n-\t\t\t       (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n-\t\t     (match_operand 3 \"const_int_operand\" \"n\")\n-\t\t     (const_int 0)))\n-\t(const_int 0)))\n-   (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-\t(minus:GPI (match_dup 4) (ANY_EXTRACT:GPI\n-\t\t\t\t  (mult:GPI (match_dup 1) (match_dup 2))\n-\t\t\t\t  (match_dup 3)\n-\t\t\t\t  (const_int 0))))]\n-  \"aarch64_is_extend_from_extract (<MODE>mode, operands[2], operands[3])\"\n-  \"subs\\\\t%<w>0, %<w>4, %<w>1, <su>xt%e3 %p2\"\n-  [(set_attr \"type\" \"alus_ext\")]\n-)\n-\n (define_insn \"*add<mode>3nr_compare0\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ\n@@ -2534,16 +2462,6 @@\n   [(set_attr \"type\" \"alu_shift_imm\")]\n )\n \n-(define_insn \"*add_mul_imm_<mode>\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-\t(plus:GPI (mult:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n-\t\t\t    (match_operand:QI 2 \"aarch64_pwr_2_<mode>\" \"n\"))\n-\t\t  (match_operand:GPI 3 \"register_operand\" \"r\")))]\n-  \"\"\n-  \"add\\\\t%<w>0, %<w>3, %<w>1, lsl %p2\"\n-  [(set_attr \"type\" \"alu_shift_imm\")]\n-)\n-\n (define_insn \"*add_<optab><ALLX:mode>_<GPI:mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n \t(plus:GPI (ANY_EXTEND:GPI (match_operand:ALLX 1 \"register_operand\" \"r\"))\n@@ -2588,57 +2506,6 @@\n   [(set_attr \"type\" \"alu_ext\")]\n )\n \n-(define_insn \"*add_<optab><ALLX:mode>_mult_<GPI:mode>\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n-\t(plus:GPI (mult:GPI (ANY_EXTEND:GPI\n-\t\t\t     (match_operand:ALLX 1 \"register_operand\" \"r\"))\n-\t\t\t    (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n-\t\t  (match_operand:GPI 3 \"register_operand\" \"r\")))]\n-  \"\"\n-  \"add\\\\t%<GPI:w>0, %<GPI:w>3, %<GPI:w>1, <su>xt<ALLX:size> %p2\"\n-  [(set_attr \"type\" \"alu_ext\")]\n-)\n-\n-;; zero_extend version of above\n-(define_insn \"*add_<optab><SHORT:mode>_mult_si_uxtw\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=rk\")\n-\t(zero_extend:DI (plus:SI (mult:SI (ANY_EXTEND:SI\n-\t\t\t     (match_operand:SHORT 1 \"register_operand\" \"r\"))\n-\t\t\t    (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n-\t\t  (match_operand:SI 3 \"register_operand\" \"r\"))))]\n-  \"\"\n-  \"add\\\\t%w0, %w3, %w1, <su>xt<SHORT:size> %p2\"\n-  [(set_attr \"type\" \"alu_ext\")]\n-)\n-\n-(define_insn \"*add_<optab><mode>_multp2\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n-\t(plus:GPI (ANY_EXTRACT:GPI\n-\t\t   (mult:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n-\t\t\t     (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n-\t\t   (match_operand 3 \"const_int_operand\" \"n\")\n-\t\t   (const_int 0))\n-\t\t  (match_operand:GPI 4 \"register_operand\" \"r\")))]\n-  \"aarch64_is_extend_from_extract (<MODE>mode, operands[2], operands[3])\"\n-  \"add\\\\t%<w>0, %<w>4, %<w>1, <su>xt%e3 %p2\"\n-  [(set_attr \"type\" \"alu_ext\")]\n-)\n-\n-;; zero_extend version of above\n-(define_insn \"*add_<optab>si_multp2_uxtw\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=rk\")\n-\t(zero_extend:DI\n-         (plus:SI (ANY_EXTRACT:SI\n-\t\t   (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t    (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n-\t\t   (match_operand 3 \"const_int_operand\" \"n\")\n-                   (const_int 0))\n-\t\t  (match_operand:SI 4 \"register_operand\" \"r\"))))]\n-  \"aarch64_is_extend_from_extract (SImode, operands[2], operands[3])\"\n-  \"add\\\\t%w0, %w4, %w1, <su>xt%e3 %p2\"\n-  [(set_attr \"type\" \"alu_ext\")]\n-)\n-\n (define_expand \"add<mode>3_carryin\"\n   [(set (match_operand:GPI 0 \"register_operand\")\n \t(plus:GPI\n@@ -2840,38 +2707,6 @@\n   [(set_attr \"type\" \"alu_ext\")]\n )\n \n-(define_insn \"*add_uxt<mode>_multp2\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n-\t(plus:GPI (and:GPI\n-\t\t   (mult:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n-\t\t\t     (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n-\t\t   (match_operand 3 \"const_int_operand\" \"n\"))\n-\t\t  (match_operand:GPI 4 \"register_operand\" \"r\")))]\n-  \"aarch64_uxt_size (exact_log2 (INTVAL (operands[2])), INTVAL (operands[3])) != 0\"\n-  \"*\n-  operands[3] = GEN_INT (aarch64_uxt_size (exact_log2 (INTVAL (operands[2])),\n-\t\t\t\t\t   INTVAL (operands[3])));\n-  return \\\"add\\t%<w>0, %<w>4, %<w>1, uxt%e3 %p2\\\";\"\n-  [(set_attr \"type\" \"alu_ext\")]\n-)\n-\n-;; zero_extend version of above\n-(define_insn \"*add_uxtsi_multp2_uxtw\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=rk\")\n-\t(zero_extend:DI\n-         (plus:SI (and:SI\n-\t\t   (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t    (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n-\t\t   (match_operand 3 \"const_int_operand\" \"n\"))\n-\t\t  (match_operand:SI 4 \"register_operand\" \"r\"))))]\n-  \"aarch64_uxt_size (exact_log2 (INTVAL (operands[2])), INTVAL (operands[3])) != 0\"\n-  \"*\n-  operands[3] = GEN_INT (aarch64_uxt_size (exact_log2 (INTVAL (operands[2])),\n-\t\t\t\t\t   INTVAL (operands[3])));\n-  return \\\"add\\t%w0, %w4, %w1, uxt%e3 %p2\\\";\"\n-  [(set_attr \"type\" \"alu_ext\")]\n-)\n-\n (define_insn \"subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=rk\")\n \t(minus:SI (match_operand:SI 1 \"register_operand\" \"rk\")\n@@ -3275,30 +3110,6 @@\n   [(set_attr \"type\" \"alu_shift_imm\")]\n )\n \n-(define_insn \"*sub_mul_imm_<mode>\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-\t(minus:GPI (match_operand:GPI 3 \"register_operand\" \"r\")\n-\t\t   (mult:GPI\n-\t\t    (match_operand:GPI 1 \"register_operand\" \"r\")\n-\t\t    (match_operand:QI 2 \"aarch64_pwr_2_<mode>\" \"n\"))))]\n-  \"\"\n-  \"sub\\\\t%<w>0, %<w>3, %<w>1, lsl %p2\"\n-  [(set_attr \"type\" \"alu_shift_imm\")]\n-)\n-\n-;; zero_extend version of above\n-(define_insn \"*sub_mul_imm_si_uxtw\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI\n-         (minus:SI (match_operand:SI 3 \"register_operand\" \"r\")\n-\t\t   (mult:SI\n-\t\t    (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t    (match_operand:QI 2 \"aarch64_pwr_2_si\" \"n\")))))]\n-  \"\"\n-  \"sub\\\\t%w0, %w3, %w1, lsl %p2\"\n-  [(set_attr \"type\" \"alu_shift_imm\")]\n-)\n-\n (define_insn \"*sub_<optab><ALLX:mode>_<GPI:mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n \t(minus:GPI (match_operand:GPI 1 \"register_operand\" \"rk\")\n@@ -3345,34 +3156,6 @@\n   [(set_attr \"type\" \"alu_ext\")]\n )\n \n-(define_insn \"*sub_<optab><mode>_multp2\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n-\t(minus:GPI (match_operand:GPI 4 \"register_operand\" \"rk\")\n-\t\t   (ANY_EXTRACT:GPI\n-\t\t    (mult:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n-\t\t\t      (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n-\t\t    (match_operand 3 \"const_int_operand\" \"n\")\n-\t\t    (const_int 0))))]\n-  \"aarch64_is_extend_from_extract (<MODE>mode, operands[2], operands[3])\"\n-  \"sub\\\\t%<w>0, %<w>4, %<w>1, <su>xt%e3 %p2\"\n-  [(set_attr \"type\" \"alu_ext\")]\n-)\n-\n-;; zero_extend version of above\n-(define_insn \"*sub_<optab>si_multp2_uxtw\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=rk\")\n-\t(zero_extend:DI\n-         (minus:SI (match_operand:SI 4 \"register_operand\" \"rk\")\n-\t\t   (ANY_EXTRACT:SI\n-\t\t    (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t     (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n-\t\t    (match_operand 3 \"const_int_operand\" \"n\")\n-\t\t    (const_int 0)))))]\n-  \"aarch64_is_extend_from_extract (SImode, operands[2], operands[3])\"\n-  \"sub\\\\t%w0, %w4, %w1, <su>xt%e3 %p2\"\n-  [(set_attr \"type\" \"alu_ext\")]\n-)\n-\n ;; The hardware description is op1 + ~op2 + C.\n ;;                           = op1 + (-op2 + 1) + (1 - !C)\n ;;                           = op1 - op2 - 1 + 1 - !C\n@@ -3628,38 +3411,6 @@\n   [(set_attr \"type\" \"alu_ext\")]\n )\n \n-(define_insn \"*sub_uxt<mode>_multp2\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n-\t(minus:GPI (match_operand:GPI 4 \"register_operand\" \"rk\")\n-\t\t   (and:GPI\n-\t\t    (mult:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n-\t\t\t      (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n-\t\t    (match_operand 3 \"const_int_operand\" \"n\"))))]\n-  \"aarch64_uxt_size (exact_log2 (INTVAL (operands[2])),INTVAL (operands[3])) != 0\"\n-  \"*\n-  operands[3] = GEN_INT (aarch64_uxt_size (exact_log2 (INTVAL (operands[2])),\n-\t\t\t\t\t   INTVAL (operands[3])));\n-  return \\\"sub\\t%<w>0, %<w>4, %<w>1, uxt%e3 %p2\\\";\"\n-  [(set_attr \"type\" \"alu_ext\")]\n-)\n-\n-;; zero_extend version of above\n-(define_insn \"*sub_uxtsi_multp2_uxtw\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=rk\")\n-\t(zero_extend:DI\n-         (minus:SI (match_operand:SI 4 \"register_operand\" \"rk\")\n-\t\t   (and:SI\n-\t\t    (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t     (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n-\t\t    (match_operand 3 \"const_int_operand\" \"n\")))))]\n-  \"aarch64_uxt_size (exact_log2 (INTVAL (operands[2])),INTVAL (operands[3])) != 0\"\n-  \"*\n-  operands[3] = GEN_INT (aarch64_uxt_size (exact_log2 (INTVAL (operands[2])),\n-\t\t\t\t\t   INTVAL (operands[3])));\n-  return \\\"sub\\t%w0, %w4, %w1, uxt%e3 %p2\\\";\"\n-  [(set_attr \"type\" \"alu_ext\")]\n-)\n-\n (define_expand \"abs<mode>2\"\n   [(match_operand:GPI 0 \"register_operand\")\n    (match_operand:GPI 1 \"register_operand\")]\n@@ -3772,28 +3523,6 @@\n   [(set_attr \"type\" \"alu_shift_imm\")]\n )\n \n-(define_insn \"*neg_mul_imm_<mode>2\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-\t(neg:GPI (mult:GPI\n-\t\t  (match_operand:GPI 1 \"register_operand\" \"r\")\n-\t\t  (match_operand:QI 2 \"aarch64_pwr_2_<mode>\" \"n\"))))]\n-  \"\"\n-  \"neg\\\\t%<w>0, %<w>1, lsl %p2\"\n-  [(set_attr \"type\" \"alu_shift_imm\")]\n-)\n-\n-;; zero_extend version of above\n-(define_insn \"*neg_mul_imm_si2_uxtw\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI\n-         (neg:SI (mult:SI\n-\t\t  (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t  (match_operand:QI 2 \"aarch64_pwr_2_si\" \"n\")))))]\n-  \"\"\n-  \"neg\\\\t%w0, %w1, lsl %p2\"\n-  [(set_attr \"type\" \"alu_shift_imm\")]\n-)\n-\n (define_insn \"mul<mode>3\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(mult:GPI (match_operand:GPI 1 \"register_operand\" \"r\")"}, {"sha": "91b51483f33f50c22378776d1b4db62dee7d2225", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f8ae301f6a125f50b0a758047fcddae7b68daa8/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f8ae301f6a125f50b0a758047fcddae7b68daa8/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=2f8ae301f6a125f50b0a758047fcddae7b68daa8", "patch": "@@ -235,21 +235,6 @@\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (UINTVAL (op), 0, 0xffffff)\")))\n \n-(define_predicate \"aarch64_pwr_imm3\"\n-  (and (match_code \"const_int\")\n-       (match_test \"INTVAL (op) != 0\n-\t\t    && (unsigned) exact_log2 (INTVAL (op)) <= 4\")))\n-\n-(define_predicate \"aarch64_pwr_2_si\"\n-  (and (match_code \"const_int\")\n-       (match_test \"INTVAL (op) != 0\n-\t\t    && (unsigned) exact_log2 (INTVAL (op)) < 32\")))\n-\n-(define_predicate \"aarch64_pwr_2_di\"\n-  (and (match_code \"const_int\")\n-       (match_test \"INTVAL (op) != 0\n-\t\t    && (unsigned) exact_log2 (INTVAL (op)) < 64\")))\n-\n (define_predicate \"aarch64_mem_pair_offset\"\n   (and (match_code \"const_int\")\n        (match_test \"aarch64_offset_7bit_signed_scaled_p (mode, INTVAL (op))\")))"}]}