{"sha": "6ca3ad1bc5a51dce85970d6fa66167c98d7bfa47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNhM2FkMWJjNWE1MWRjZTg1OTcwZDZmYTY2MTY3Yzk4ZDdiZmE0Nw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-03-09T21:57:48Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-03-09T21:57:48Z"}, "message": "invoke.texi: Fix typo.\n\n\t* invoke.texi: Fix typo.\n\t* gcc.1: Regenerate.\n\nFrom-SVN: r40351", "tree": {"sha": "06926d75a9922ae7bb6ef902467b4f4ed2267b14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06926d75a9922ae7bb6ef902467b4f4ed2267b14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ca3ad1bc5a51dce85970d6fa66167c98d7bfa47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ca3ad1bc5a51dce85970d6fa66167c98d7bfa47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ca3ad1bc5a51dce85970d6fa66167c98d7bfa47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ca3ad1bc5a51dce85970d6fa66167c98d7bfa47/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11642c3a7cf7c6954afa4a174632535a46cf7157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11642c3a7cf7c6954afa4a174632535a46cf7157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11642c3a7cf7c6954afa4a174632535a46cf7157"}], "stats": {"total": 64, "additions": 51, "deletions": 13}, "files": [{"sha": "5abe6f627a3e6dc503dc8edea99d0c7699d38bd4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca3ad1bc5a51dce85970d6fa66167c98d7bfa47/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca3ad1bc5a51dce85970d6fa66167c98d7bfa47/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ca3ad1bc5a51dce85970d6fa66167c98d7bfa47", "patch": "@@ -1,3 +1,8 @@\n+2001-03-09  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* invoke.texi: Fix typo.\n+\t* gcc.1: Regenerate.\n+\n 2001-03-09  Zack Weinberg  <zackw@stanford.edu>\n \n \t* configure.in: Prune nonexistent files from build_xm_file,"}, {"sha": "7e73371b5d46d7aed46a32492259310a48a95ea2", "filename": "gcc/gcc.1", "status": "modified", "additions": 45, "deletions": 12, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca3ad1bc5a51dce85970d6fa66167c98d7bfa47/gcc%2Fgcc.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca3ad1bc5a51dce85970d6fa66167c98d7bfa47/gcc%2Fgcc.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.1?ref=6ca3ad1bc5a51dce85970d6fa66167c98d7bfa47", "patch": "@@ -1,5 +1,5 @@\n .\\\" Automatically generated by Pod::Man version 1.1\n-.\\\" Mon Feb 19 19:32:03 2001\n+.\\\" Fri Mar  9 21:54:51 2001\n .\\\"\n .\\\" Standard preamble:\n .\\\" ======================================================================\n@@ -138,7 +138,7 @@\n .\\\" ======================================================================\n .\\\"\n .IX Title \"GCC 1\"\n-.TH GCC 1 \"gcc-3.1\" \"2001-02-19\" \"GNU\"\n+.TH GCC 1 \"gcc-3.1\" \"2001-03-09\" \"GNU\"\n .UC\n .SH \"NAME\"\n gcc \\- \\s-1GNU\\s0 project C and \\*(C+ compiler\n@@ -280,8 +280,9 @@ in the following sections.\n \\&\\-finline-functions  \\-finline-limit=\\fR\\fIn\\fR  \\fB\\-fkeep-inline-functions \n \\&\\-fkeep-static-consts  \\-fmove-all-movables \n \\&\\-fno-default-inline  \\-fno-defer-pop \n-\\&\\-fno-function-cse   \\-fno-guess-branch-probability\n+\\&\\-fno-function-cse   \\-fno-guess-branch-probability \n \\&\\-fno-inline  \\-fno-math-errno  \\-fno-peephole \n+\\&\\-funsafe-math-optimizations \\-fno-trapping-math \n \\&\\-fomit-frame-pointer  \\-foptimize-register-move \n \\&\\-foptimize-sibling-calls  \\-freduce-all-givs \n \\&\\-fregmove  \\-frename-registers \n@@ -2819,11 +2820,12 @@ that alter the assembler output may be confused by the optimizations\n performed when this option is not used.\n .Ip \"\\fB\\-ffast-math\\fR\" 4\n .IX Item \"-ffast-math\"\n-This option allows \\s-1GCC\\s0 to violate some \\s-1ISO\\s0 or \\s-1IEEE\\s0 rules and/or\n-specifications in the interest of optimizing code for speed.  For\n-example, it allows the compiler to assume arguments to the \\f(CW\\*(C`sqrt\\*(C'\\fR\n-function are non-negative numbers and that no floating-point values\n-are NaNs.\n+Sets \\fB\\-fno-math-errno\\fR, \\fB\\-funsafe-math-optimizations\\fR,\n+and \\fB\\-fno-trapping-math\\fR.\n+.Sp\n+This option causes the preprocessor macro _\\|_FAST_MATH_\\|_ to be defined.\n+.Sp\n+This option causes the preprocessor macro _\\|_FAST_MATH_\\|_ to be defined.\n .Sp\n This option should never be turned on by any \\fB\\-O\\fR option since\n it can result in incorrect output for programs which depend on\n@@ -2836,8 +2838,39 @@ with a single instruction, e.g., sqrt.  A program that relies on\n \\&\\s-1IEEE\\s0 exceptions for math error handling may want to use this flag\n for speed while maintaining \\s-1IEEE\\s0 arithmetic compatibility.\n .Sp\n+This option should never be turned on by any \\fB\\-O\\fR option since\n+it can result in incorrect output for programs which depend on\n+an exact implementation of \\s-1IEEE\\s0 or \\s-1ISO\\s0 rules/specifications for\n+math functions.\n+.Sp\n The default is \\fB\\-fmath-errno\\fR.  The \\fB\\-ffast-math\\fR option\n sets \\fB\\-fno-math-errno\\fR.\n+.Ip \"\\fB\\-funsafe-math-optimizations\\fR\" 4\n+.IX Item \"-funsafe-math-optimizations\"\n+Allow optimizations for floating-point arithmetic that (a) assume\n+that arguments and results are valid and (b) may violate \\s-1IEEE\\s0 or\n+\\&\\s-1ANSI\\s0 standards.  \n+.Sp\n+This option should never be turned on by any \\fB\\-O\\fR option since\n+it can result in incorrect output for programs which depend on\n+an exact implementation of \\s-1IEEE\\s0 or \\s-1ISO\\s0 rules/specifications for\n+math functions.\n+.Sp\n+The default is \\fB\\-fno-unsafe-math-optimizations\\fR.  The\n+\\&\\fB\\-ffast-math\\fR option sets \\fB\\-funsafe-math-optimizations\\fR.\n+.Ip \"\\fB\\-fno-trapping-math\\fR\" 4\n+.IX Item \"-fno-trapping-math\"\n+Compile code assuming that floating-point operations cannot generate\n+user-visible traps.  Setting this option may allow faster code\n+if one relies on ``non-stop'' \\s-1IEEE\\s0 arithmetic, for example.\n+.Sp\n+This option should never be turned on by any \\fB\\-O\\fR option since\n+it can result in incorrect output for programs which depend on\n+an exact implementation of \\s-1IEEE\\s0 or \\s-1ISO\\s0 rules/specifications for\n+math functions.\n+.Sp\n+The default is \\fB\\-ftrapping-math\\fR.  The \\fB\\-ffast-math\\fR\n+option sets \\fB\\-fno-trapping-math\\fR.\n .PP\n The following options control specific optimizations.  The \\fB\\-O2\\fR\n option turns on all of these optimizations except \\fB\\-funroll-loops\\fR\n@@ -5851,14 +5884,14 @@ These \\fB\\-m\\fR options are defined for the i386 family of computers:\n Assume the defaults for the machine type \\fIcpu type\\fR when scheduling\n instructions.  The choices for \\fIcpu type\\fR are \\fBi386\\fR,\n \\&\\fBi486\\fR, \\fBi586\\fR, \\fBi686\\fR, \\fBpentium\\fR,\n-\\&\\fBpentiumpro\\fR, \\fBk6\\fR, and \\fBathlon\\fR\n+\\&\\fBpentiumpro\\fR, \\fBpentium4\\fR, \\fBk6\\fR, and \\fBathlon\\fR\n .Sp\n While picking a specific \\fIcpu type\\fR will schedule things appropriately\n for that particular chip, the compiler will not generate any code that\n does not run on the i386 without the \\fB\\-march=\\fR\\fIcpu type\\fR option\n being used.  \\fBi586\\fR is equivalent to \\fBpentium\\fR and \\fBi686\\fR\n-is equivalent to \\fBpentiumpro\\fR.  \\fBk6\\fR is the \\s-1AMD\\s0 chip as\n-opposed to the Intel ones.\n+is equivalent to \\fBpentiumpro\\fR.  \\fBk6\\fR and \\fBathlon\\fR are the\n+\\&\\s-1AMD\\s0 chips as opposed to the Intel ones.\n .Ip \"\\fB\\-march=\\fR\\fIcpu type\\fR\" 4\n .IX Item \"-march=cpu type\"\n Generate instructions for the machine type \\fIcpu type\\fR.  The choices\n@@ -5917,7 +5950,7 @@ Some 387 emulators do not support the \\f(CW\\*(C`sin\\*(C'\\fR, \\f(CW\\*(C`cos\\*(C'\\\n \\&\\f(CW\\*(C`sqrt\\*(C'\\fR instructions for the 387.  Specify this option to avoid\n generating those instructions. This option is the default on FreeBSD.\n As of revision 2.6.1, these instructions are not generated unless you\n-also use the \\fB\\-ffast-math\\fR switch.\n+also use the \\fB\\-funsafe-math-optimizations\\fR switch.\n .Ip \"\\fB\\-malign-double\\fR\" 4\n .IX Item \"-malign-double\"\n .PD 0"}, {"sha": "519dd92cea503d051c3d89ddb304d6eb042d8359", "filename": "gcc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca3ad1bc5a51dce85970d6fa66167c98d7bfa47/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca3ad1bc5a51dce85970d6fa66167c98d7bfa47/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=6ca3ad1bc5a51dce85970d6fa66167c98d7bfa47", "patch": "@@ -6573,7 +6573,7 @@ While picking a specific @var{cpu type} will schedule things appropriately\n for that particular chip, the compiler will not generate any code that\n does not run on the i386 without the @samp{-march=@var{cpu type}} option\n being used.  @samp{i586} is equivalent to @samp{pentium} and @samp{i686}\n-is equivalent to @samp{pentiumpro}.  @samp{k6} and @samp{athlon} sre the\n+is equivalent to @samp{pentiumpro}.  @samp{k6} and @samp{athlon} are the\n AMD chips as opposed to the Intel ones.\n \n @item -march=@var{cpu type}"}]}