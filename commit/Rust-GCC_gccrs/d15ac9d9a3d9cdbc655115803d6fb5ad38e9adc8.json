{"sha": "d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE1YWM5ZDlhM2Q5Y2RiYzY1NTExNTgwM2Q2ZmI1YWQzOGU5YWRjOA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-09-20T15:50:09Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-09-20T15:50:09Z"}, "message": "re PR libstdc++/58338 (Add noexcept to functions with a narrow contract)\n\n2013-09-20  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR libstdc++/58338\n\t* include/bits/allocator.h (__alloc_swap::_S_do_it,\n\t__shrink_to_fit_aux::_S_do_it): Mark as noexcept.\n\t* include/bits/basic_string.h (basic_string::_Rep) [_S_empty_rep,\n\t_M_is_leaked, _M_is_shared, _M_set_leaked, _M_set_sharable,\n\t_M_set_length_and_sharable, _M_dispose]: Likewise.\n\t(basic_string::_Alloc_hider::_Alloc_hider): Likewise.\n\t(basic_string) [_M_data, _M_rep, _M_ibegin, _M_iend, _M_limit,\n\t_M_disjunct, _M_copy, _M_move, _M_assign, _S_copy_chars, _S_compare,\n\t_S_empty_rep, shrink_to_fit, operator[] const, front const, back const]:\n\tLikewise.\n\t[clear]: Link to PR 56166.\n\t[swap]: Link to PR 58265.\n\t* include/bits/stl_deque.h (_Deque_iterator) [_S_buffer_size,\n\t_Deque_iterator, _M_const_cast, operator*, operator->, operator++,\n\toperator--, operator+=, operator+, operator-=, operator-, operator[],\n\t_M_set_node]: Mark as noexcept.\n\t(operator==(const _Deque_iterator&, const _Deque_iterator&),\n\toperator!=(const _Deque_iterator&, const _Deque_iterator&),\n\toperator<(const _Deque_iterator&, const _Deque_iterator&),\n\toperator>(const _Deque_iterator&, const _Deque_iterator&),\n\toperator<=(const _Deque_iterator&, const _Deque_iterator&),\n\toperator>=(const _Deque_iterator&, const _Deque_iterator&),\n\toperator-(const _Deque_iterator&, const _Deque_iterator&),\n\toperator+(ptrdiff_t, const _Deque_iterator&)): Likewise.\n\t(_Deque_base) [_Deque_base(const allocator_type&)]: Add missing call to\n\t_M_initialize_map.\n\t[~_Deque_base, _M_deallocate_node, _M_deallocate_map, _M_destroy_nodes]:\n\tMark as noexcept.\n\t(_Deque_base::_Deque_impl) [_Deque_impl(const _Tp_alloc_type&),\n\t_Deque_impl(_Tp_alloc_type&&)]: Likewise.\n\t(deque) [_S_buffer_size, operator=(deque&&), shrink_to_fit, operator[],\n\tfront, back, pop_front, pop_back, swap]: Likewise.\n\t[deque(), deque(const allocator_type&)]: Merge.\n\t* include/debug/deque (deque) [operator=(deque&&), shrink_to_fit,\n\toperator[], front, back, pop_front, pop_back, swap]: Mark as noexcept.\n\t* include/profile/deque (deque) [operator=(deque&&), operator[], front,\n\tback, pop_front, pop_back, swap]: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n\tAdjust line number.\n\t* testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\nFrom-SVN: r202781", "tree": {"sha": "5bbf162b3f4bf80507c13550be7d0e47b38ef53e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bbf162b3f4bf80507c13550be7d0e47b38ef53e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d20e48b015fe8e87e7adc33edeb8fbfa23138f9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d20e48b015fe8e87e7adc33edeb8fbfa23138f9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d20e48b015fe8e87e7adc33edeb8fbfa23138f9c"}], "stats": {"total": 279, "additions": 164, "deletions": 115}, "files": [{"sha": "2b6386929fb7dfbea7a8a0dfc9f52d8e5e4de8a5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8", "patch": "@@ -1,3 +1,52 @@\n+2013-09-20  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR libstdc++/58338\n+\t* include/bits/allocator.h (__alloc_swap::_S_do_it,\n+\t__shrink_to_fit_aux::_S_do_it): Mark as noexcept.\n+\t* include/bits/basic_string.h (basic_string::_Rep) [_S_empty_rep,\n+\t_M_is_leaked, _M_is_shared, _M_set_leaked, _M_set_sharable,\n+\t_M_set_length_and_sharable, _M_dispose]: Likewise.\n+\t(basic_string::_Alloc_hider::_Alloc_hider): Likewise.\n+\t(basic_string) [_M_data, _M_rep, _M_ibegin, _M_iend, _M_limit,\n+\t_M_disjunct, _M_copy, _M_move, _M_assign, _S_copy_chars, _S_compare,\n+\t_S_empty_rep, shrink_to_fit, operator[] const, front const, back const]:\n+\tLikewise.\n+\t[clear]: Link to PR 56166.\n+\t[swap]: Link to PR 58265.\n+\t* include/bits/stl_deque.h (_Deque_iterator) [_S_buffer_size,\n+\t_Deque_iterator, _M_const_cast, operator*, operator->, operator++,\n+\toperator--, operator+=, operator+, operator-=, operator-, operator[],\n+\t_M_set_node]: Mark as noexcept.\n+\t(operator==(const _Deque_iterator&, const _Deque_iterator&),\n+\toperator!=(const _Deque_iterator&, const _Deque_iterator&),\n+\toperator<(const _Deque_iterator&, const _Deque_iterator&),\n+\toperator>(const _Deque_iterator&, const _Deque_iterator&),\n+\toperator<=(const _Deque_iterator&, const _Deque_iterator&),\n+\toperator>=(const _Deque_iterator&, const _Deque_iterator&),\n+\toperator-(const _Deque_iterator&, const _Deque_iterator&),\n+\toperator+(ptrdiff_t, const _Deque_iterator&)): Likewise.\n+\t(_Deque_base) [_Deque_base(const allocator_type&)]: Add missing call to\n+\t_M_initialize_map.\n+\t[~_Deque_base, _M_deallocate_node, _M_deallocate_map, _M_destroy_nodes]:\n+\tMark as noexcept.\n+\t(_Deque_base::_Deque_impl) [_Deque_impl(const _Tp_alloc_type&),\n+\t_Deque_impl(_Tp_alloc_type&&)]: Likewise.\n+\t(deque) [_S_buffer_size, operator=(deque&&), shrink_to_fit, operator[],\n+\tfront, back, pop_front, pop_back, swap]: Likewise.\n+\t[deque(), deque(const allocator_type&)]: Merge.\n+\t* include/debug/deque (deque) [operator=(deque&&), shrink_to_fit,\n+\toperator[], front, back, pop_front, pop_back, swap]: Mark as noexcept.\n+\t* include/profile/deque (deque) [operator=(deque&&), operator[], front,\n+\tback, pop_front, pop_back, swap]: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n+\tAdjust line number.\n+\t* testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\n 2013-09-20  Alan Modra  <amodra@gmail.com>\n \n \t* configure: Regenerate."}, {"sha": "c72859b6ed37d4ae3eaee01546530955bf0fa9ae", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8", "patch": "@@ -158,13 +158,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // To implement Option 3 of DR 431.\n   template<typename _Alloc, bool = __is_empty(_Alloc)>\n     struct __alloc_swap\n-    { static void _S_do_it(_Alloc&, _Alloc&) { } };\n+    { static void _S_do_it(_Alloc&, _Alloc&) _GLIBCXX_NOEXCEPT { } };\n \n   template<typename _Alloc>\n     struct __alloc_swap<_Alloc, false>\n     {\n       static void\n-      _S_do_it(_Alloc& __one, _Alloc& __two)\n+      _S_do_it(_Alloc& __one, _Alloc& __two) _GLIBCXX_NOEXCEPT\n       {\n \t// Precondition: swappable allocators.\n \tif (__one != __two)\n@@ -194,13 +194,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     = __or_<is_copy_constructible<typename _Tp::value_type>,\n             is_nothrow_move_constructible<typename _Tp::value_type>>::value>\n     struct __shrink_to_fit_aux\n-    { static bool _S_do_it(_Tp&) { return false; } };\n+    { static bool _S_do_it(_Tp&) noexcept { return false; } };\n \n   template<typename _Tp>\n     struct __shrink_to_fit_aux<_Tp, true>\n     {\n       static bool\n-      _S_do_it(_Tp& __c)\n+      _S_do_it(_Tp& __c) noexcept\n       {\n \t__try\n \t  {"}, {"sha": "4890428886771f042218ec8a219c28622eea6de3", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 31, "deletions": 26, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8", "patch": "@@ -178,7 +178,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         static size_type _S_empty_rep_storage[];\n \n         static _Rep&\n-        _S_empty_rep()\n+        _S_empty_rep() _GLIBCXX_NOEXCEPT\n         { \n \t  // NB: Mild hack to avoid strict-aliasing warnings.  Note that\n \t  // _S_empty_rep_storage is never modified and the punning should\n@@ -188,23 +188,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n         bool\n-\t_M_is_leaked() const\n+\t_M_is_leaked() const _GLIBCXX_NOEXCEPT\n         { return this->_M_refcount < 0; }\n \n         bool\n-\t_M_is_shared() const\n+\t_M_is_shared() const _GLIBCXX_NOEXCEPT\n         { return this->_M_refcount > 0; }\n \n         void\n-\t_M_set_leaked()\n+\t_M_set_leaked() _GLIBCXX_NOEXCEPT\n         { this->_M_refcount = -1; }\n \n         void\n-\t_M_set_sharable()\n+\t_M_set_sharable() _GLIBCXX_NOEXCEPT\n         { this->_M_refcount = 0; }\n \n \tvoid\n-\t_M_set_length_and_sharable(size_type __n)\n+\t_M_set_length_and_sharable(size_type __n) _GLIBCXX_NOEXCEPT\n \t{\n #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n \t  if (__builtin_expect(this != &_S_empty_rep(), false))\n@@ -234,7 +234,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_S_create(size_type, size_type, const _Alloc&);\n \n \tvoid\n-\t_M_dispose(const _Alloc& __a)\n+\t_M_dispose(const _Alloc& __a) _GLIBCXX_NOEXCEPT\n \t{\n #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n \t  if (__builtin_expect(this != &_S_empty_rep(), false))\n@@ -271,7 +271,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html\n       struct _Alloc_hider : _Alloc\n       {\n-\t_Alloc_hider(_CharT* __dat, const _Alloc& __a)\n+\t_Alloc_hider(_CharT* __dat, const _Alloc& __a) _GLIBCXX_NOEXCEPT\n \t: _Alloc(__a), _M_p(__dat) { }\n \n \t_CharT* _M_p; // The actual data.\n@@ -289,25 +289,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       mutable _Alloc_hider\t_M_dataplus;\n \n       _CharT*\n-      _M_data() const\n+      _M_data() const _GLIBCXX_NOEXCEPT\n       { return  _M_dataplus._M_p; }\n \n       _CharT*\n-      _M_data(_CharT* __p)\n+      _M_data(_CharT* __p) _GLIBCXX_NOEXCEPT\n       { return (_M_dataplus._M_p = __p); }\n \n       _Rep*\n-      _M_rep() const\n+      _M_rep() const _GLIBCXX_NOEXCEPT\n       { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }\n \n       // For the internal use we have functions similar to `begin'/`end'\n       // but they do not call _M_leak.\n       iterator\n-      _M_ibegin() const\n+      _M_ibegin() const _GLIBCXX_NOEXCEPT\n       { return iterator(_M_data()); }\n \n       iterator\n-      _M_iend() const\n+      _M_iend() const _GLIBCXX_NOEXCEPT\n       { return iterator(_M_data() + this->size()); }\n \n       void\n@@ -334,15 +334,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // NB: _M_limit doesn't check for a bad __pos value.\n       size_type\n-      _M_limit(size_type __pos, size_type __off) const\n+      _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT\n       {\n \tconst bool __testoff =  __off < this->size() - __pos;\n \treturn __testoff ? __off : this->size() - __pos;\n       }\n \n       // True if _Rep and source do not overlap.\n       bool\n-      _M_disjunct(const _CharT* __s) const\n+      _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT\n       {\n \treturn (less<const _CharT*>()(__s, _M_data())\n \t\t|| less<const _CharT*>()(_M_data() + this->size(), __s));\n@@ -351,7 +351,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // When __n = 1 way faster than the general multichar\n       // traits_type::copy/move/assign.\n       static void\n-      _M_copy(_CharT* __d, const _CharT* __s, size_type __n)\n+      _M_copy(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT\n       {\n \tif (__n == 1)\n \t  traits_type::assign(*__d, *__s);\n@@ -360,7 +360,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       static void\n-      _M_move(_CharT* __d, const _CharT* __s, size_type __n)\n+      _M_move(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT\n       {\n \tif (__n == 1)\n \t  traits_type::assign(*__d, *__s);\n@@ -369,7 +369,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       static void\n-      _M_assign(_CharT* __d, size_type __n, _CharT __c)\n+      _M_assign(_CharT* __d, size_type __n, _CharT __c) _GLIBCXX_NOEXCEPT\n       {\n \tif (__n == 1)\n \t  traits_type::assign(*__d, __c);\n@@ -382,29 +382,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<class _Iterator>\n         static void\n         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)\n+\t_GLIBCXX_NOEXCEPT\n         {\n \t  for (; __k1 != __k2; ++__k1, ++__p)\n \t    traits_type::assign(*__p, *__k1); // These types are off.\n \t}\n \n       static void\n-      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)\n+      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT\n       { _S_copy_chars(__p, __k1.base(), __k2.base()); }\n \n       static void\n       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)\n+      _GLIBCXX_NOEXCEPT\n       { _S_copy_chars(__p, __k1.base(), __k2.base()); }\n \n       static void\n-      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)\n+      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT\n       { _M_copy(__p, __k1, __k2 - __k1); }\n \n       static void\n       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)\n+      _GLIBCXX_NOEXCEPT\n       { _M_copy(__p, __k1, __k2 - __k1); }\n \n       static int\n-      _S_compare(size_type __n1, size_type __n2)\n+      _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT\n       {\n \tconst difference_type __d = difference_type(__n1 - __n2);\n \n@@ -423,7 +426,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_leak_hard();\n \n       static _Rep&\n-      _S_empty_rep()\n+      _S_empty_rep() _GLIBCXX_NOEXCEPT\n       { return _Rep::_S_empty_rep(); }\n \n     public:\n@@ -756,7 +759,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n       ///  A non-binding request to reduce capacity() to size().\n       void\n-      shrink_to_fit()\n+      shrink_to_fit() _GLIBCXX_NOEXCEPT\n       {\n \tif (capacity() > size())\n \t  {\n@@ -799,6 +802,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /**\n        *  Erases the string, making it empty.\n        */\n+      // PR 56166: this should not throw.\n       void\n       clear() _GLIBCXX_NOEXCEPT\n       { _M_mutate(0, this->size(), 0); }\n@@ -823,7 +827,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  see at().)\n        */\n       const_reference\n-      operator[] (size_type __pos) const\n+      operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT\n       {\n \t_GLIBCXX_DEBUG_ASSERT(__pos <= size());\n \treturn _M_data()[__pos];\n@@ -903,7 +907,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  element of the %string.\n        */\n       const_reference\n-      front() const\n+      front() const _GLIBCXX_NOEXCEPT\n       { return operator[](0); }\n \n       /**\n@@ -919,7 +923,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  last element of the %string.\n        */\n       const_reference\n-      back() const\n+      back() const _GLIBCXX_NOEXCEPT\n       { return operator[](this->size() - 1); }\n #endif\n \n@@ -1787,6 +1791,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Exchanges the contents of this string with that of @a __s in constant\n        *  time.\n       */\n+      // PR 58265, this should be noexcept.\n       void\n       swap(basic_string& __s);\n "}, {"sha": "98556f59848fa58b36984e1363a9ae5b6609319c", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 55, "deletions": 60, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8", "patch": "@@ -108,7 +108,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;\n       typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;\n \n-      static size_t _S_buffer_size()\n+      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT\n       { return __deque_buf_size(sizeof(_Tp)); }\n \n       typedef std::random_access_iterator_tag iterator_category;\n@@ -125,31 +125,31 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _Tp* _M_last;\n       _Map_pointer _M_node;\n \n-      _Deque_iterator(_Tp* __x, _Map_pointer __y)\n+      _Deque_iterator(_Tp* __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT\n       : _M_cur(__x), _M_first(*__y),\n         _M_last(*__y + _S_buffer_size()), _M_node(__y) { }\n \n-      _Deque_iterator()\n+      _Deque_iterator() _GLIBCXX_NOEXCEPT\n       : _M_cur(0), _M_first(0), _M_last(0), _M_node(0) { }\n \n-      _Deque_iterator(const iterator& __x)\n+      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT\n       : _M_cur(__x._M_cur), _M_first(__x._M_first),\n         _M_last(__x._M_last), _M_node(__x._M_node) { }\n \n       iterator\n-      _M_const_cast() const\n+      _M_const_cast() const _GLIBCXX_NOEXCEPT\n       { return iterator(_M_cur, _M_node); }\n \n       reference\n-      operator*() const\n+      operator*() const _GLIBCXX_NOEXCEPT\n       { return *_M_cur; }\n \n       pointer\n-      operator->() const\n+      operator->() const _GLIBCXX_NOEXCEPT\n       { return _M_cur; }\n \n       _Self&\n-      operator++()\n+      operator++() _GLIBCXX_NOEXCEPT\n       {\n \t++_M_cur;\n \tif (_M_cur == _M_last)\n@@ -161,15 +161,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n       _Self\n-      operator++(int)\n+      operator++(int) _GLIBCXX_NOEXCEPT\n       {\n \t_Self __tmp = *this;\n \t++*this;\n \treturn __tmp;\n       }\n \n       _Self&\n-      operator--()\n+      operator--() _GLIBCXX_NOEXCEPT\n       {\n \tif (_M_cur == _M_first)\n \t  {\n@@ -181,15 +181,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n       _Self\n-      operator--(int)\n+      operator--(int) _GLIBCXX_NOEXCEPT\n       {\n \t_Self __tmp = *this;\n \t--*this;\n \treturn __tmp;\n       }\n \n       _Self&\n-      operator+=(difference_type __n)\n+      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT\n       {\n \tconst difference_type __offset = __n + (_M_cur - _M_first);\n \tif (__offset >= 0 && __offset < difference_type(_S_buffer_size()))\n@@ -208,25 +208,25 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n       _Self\n-      operator+(difference_type __n) const\n+      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT\n       {\n \t_Self __tmp = *this;\n \treturn __tmp += __n;\n       }\n \n       _Self&\n-      operator-=(difference_type __n)\n+      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT\n       { return *this += -__n; }\n \n       _Self\n-      operator-(difference_type __n) const\n+      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT\n       {\n \t_Self __tmp = *this;\n \treturn __tmp -= __n;\n       }\n \n       reference\n-      operator[](difference_type __n) const\n+      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT\n       { return *(*this + __n); }\n \n       /** \n@@ -235,7 +235,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  immediately afterwards, based on _M_first and _M_last.\n        */\n       void\n-      _M_set_node(_Map_pointer __new_node)\n+      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT\n       {\n \t_M_node = __new_node;\n \t_M_first = *__new_node;\n@@ -249,81 +249,81 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp, typename _Ref, typename _Ptr>\n     inline bool\n     operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n-\t       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)\n+\t       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT\n     { return __x._M_cur == __y._M_cur; }\n \n   template<typename _Tp, typename _RefL, typename _PtrL,\n \t   typename _RefR, typename _PtrR>\n     inline bool\n     operator==(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n-\t       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)\n+\t       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n     { return __x._M_cur == __y._M_cur; }\n \n   template<typename _Tp, typename _Ref, typename _Ptr>\n     inline bool\n     operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n-\t       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)\n+\t       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT\n     { return !(__x == __y); }\n \n   template<typename _Tp, typename _RefL, typename _PtrL,\n \t   typename _RefR, typename _PtrR>\n     inline bool\n     operator!=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n-\t       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)\n+\t       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n     { return !(__x == __y); }\n \n   template<typename _Tp, typename _Ref, typename _Ptr>\n     inline bool\n     operator<(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n-\t      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)\n+\t      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT\n     { return (__x._M_node == __y._M_node) ? (__x._M_cur < __y._M_cur)\n                                           : (__x._M_node < __y._M_node); }\n \n   template<typename _Tp, typename _RefL, typename _PtrL,\n \t   typename _RefR, typename _PtrR>\n     inline bool\n     operator<(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n-\t      const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)\n+\t      const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n     { return (__x._M_node == __y._M_node) ? (__x._M_cur < __y._M_cur)\n \t                                  : (__x._M_node < __y._M_node); }\n \n   template<typename _Tp, typename _Ref, typename _Ptr>\n     inline bool\n     operator>(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n-\t      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)\n+\t      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT\n     { return __y < __x; }\n \n   template<typename _Tp, typename _RefL, typename _PtrL,\n \t   typename _RefR, typename _PtrR>\n     inline bool\n     operator>(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n-\t      const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)\n+\t      const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n     { return __y < __x; }\n \n   template<typename _Tp, typename _Ref, typename _Ptr>\n     inline bool\n     operator<=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n-\t       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)\n+\t       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT\n     { return !(__y < __x); }\n \n   template<typename _Tp, typename _RefL, typename _PtrL,\n \t   typename _RefR, typename _PtrR>\n     inline bool\n     operator<=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n-\t       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)\n+\t       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n     { return !(__y < __x); }\n \n   template<typename _Tp, typename _Ref, typename _Ptr>\n     inline bool\n     operator>=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n-\t       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)\n+\t       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT\n     { return !(__x < __y); }\n \n   template<typename _Tp, typename _RefL, typename _PtrL,\n \t   typename _RefR, typename _PtrR>\n     inline bool\n     operator>=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n-\t       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)\n+\t       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n     { return !(__x < __y); }\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -333,7 +333,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp, typename _Ref, typename _Ptr>\n     inline typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type\n     operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n-\t      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)\n+\t      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT\n     {\n       return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type\n \t(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())\n@@ -345,7 +345,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t   typename _RefR, typename _PtrR>\n     inline typename _Deque_iterator<_Tp, _RefL, _PtrL>::difference_type\n     operator-(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n-\t      const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)\n+\t      const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n     {\n       return typename _Deque_iterator<_Tp, _RefL, _PtrL>::difference_type\n \t(_Deque_iterator<_Tp, _RefL, _PtrL>::_S_buffer_size())\n@@ -356,6 +356,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp, typename _Ref, typename _Ptr>\n     inline _Deque_iterator<_Tp, _Ref, _Ptr>\n     operator+(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)\n+    _GLIBCXX_NOEXCEPT\n     { return __x + __n; }\n \n   template<typename _Tp>\n@@ -466,7 +467,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       _Deque_base(const allocator_type& __a)\n       : _M_impl(__a)\n-      { }\n+      { _M_initialize_map(0); }\n \n #if __cplusplus >= 201103L\n       _Deque_base(_Deque_base&& __x)\n@@ -483,7 +484,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n #endif\n \n-      ~_Deque_base();\n+      ~_Deque_base() _GLIBCXX_NOEXCEPT;\n \n     protected:\n       //This struct encapsulates the implementation of the std::deque\n@@ -506,13 +507,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  _M_start(), _M_finish()\n \t{ }\n \n-\t_Deque_impl(const _Tp_alloc_type& __a)\n+\t_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT\n \t: _Tp_alloc_type(__a), _M_map(0), _M_map_size(0),\n \t  _M_start(), _M_finish()\n \t{ }\n \n #if __cplusplus >= 201103L\n-\t_Deque_impl(_Tp_alloc_type&& __a)\n+\t_Deque_impl(_Tp_alloc_type&& __a) _GLIBCXX_NOEXCEPT\n \t: _Tp_alloc_type(std::move(__a)), _M_map(0), _M_map_size(0),\n \t  _M_start(), _M_finish()\n \t{ }\n@@ -538,7 +539,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n       void\n-      _M_deallocate_node(_Tp* __p)\n+      _M_deallocate_node(_Tp* __p) _GLIBCXX_NOEXCEPT\n       {\n \t_M_impl._Tp_alloc_type::deallocate(__p, __deque_buf_size(sizeof(_Tp)));\n       }\n@@ -548,21 +549,21 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { return _M_get_map_allocator().allocate(__n); }\n \n       void\n-      _M_deallocate_map(_Tp** __p, size_t __n)\n+      _M_deallocate_map(_Tp** __p, size_t __n) _GLIBCXX_NOEXCEPT\n       { _M_get_map_allocator().deallocate(__p, __n); }\n \n     protected:\n       void _M_initialize_map(size_t);\n       void _M_create_nodes(_Tp** __nstart, _Tp** __nfinish);\n-      void _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish);\n+      void _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish) _GLIBCXX_NOEXCEPT;\n       enum { _S_initial_map_size = 8 };\n \n       _Deque_impl _M_impl;\n     };\n \n   template<typename _Tp, typename _Alloc>\n     _Deque_base<_Tp, _Alloc>::\n-    ~_Deque_base()\n+    ~_Deque_base() _GLIBCXX_NOEXCEPT\n     {\n       if (this->_M_impl._M_map)\n \t{\n@@ -640,7 +641,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp, typename _Alloc>\n     void\n     _Deque_base<_Tp, _Alloc>::\n-    _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish)\n+    _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish) _GLIBCXX_NOEXCEPT\n     {\n       for (_Tp** __n = __nstart; __n < __nfinish; ++__n)\n \t_M_deallocate_node(*__n);\n@@ -758,7 +759,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     protected:\n       typedef pointer*                           _Map_pointer;\n \n-      static size_t _S_buffer_size()\n+      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT\n       { return __deque_buf_size(sizeof(_Tp)); }\n \n       // Functions controlling memory layout, and nothing else.\n@@ -780,19 +781,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     public:\n       // [23.2.1.1] construct/copy/destroy\n       // (assign() and get_allocator() are also listed in this section)\n-      /**\n-       *  @brief  Default constructor creates no elements.\n-       */\n-      deque()\n-      : _Base() { }\n-\n       /**\n        *  @brief  Creates a %deque with no elements.\n        *  @param  __a  An allocator object.\n        */\n       explicit\n-      deque(const allocator_type& __a)\n-      : _Base(__a, 0) { }\n+      deque(const allocator_type& __a = allocator_type())\n+      : _Base(__a) { }\n \n #if __cplusplus >= 201103L\n       /**\n@@ -940,7 +935,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @a __x is a valid, but unspecified %deque.\n        */\n       deque&\n-      operator=(deque&& __x)\n+      operator=(deque&& __x) noexcept\n       {\n \t// NB: DR 1204.\n \t// NB: DR 675.\n@@ -1220,7 +1215,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #if __cplusplus >= 201103L\n       /**  A non-binding request to reduce memory use.  */\n       void\n-      shrink_to_fit()\n+      shrink_to_fit() noexcept\n       { _M_shrink_to_fit(); }\n #endif\n \n@@ -1245,7 +1240,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  see at().)\n        */\n       reference\n-      operator[](size_type __n)\n+      operator[](size_type __n) _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_start[difference_type(__n)]; }\n \n       /**\n@@ -1260,7 +1255,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  see at().)\n        */\n       const_reference\n-      operator[](size_type __n) const\n+      operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n       { return this->_M_impl._M_start[difference_type(__n)]; }\n \n     protected:\n@@ -1314,23 +1309,23 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element of the %deque.\n        */\n       reference\n-      front()\n+      front() _GLIBCXX_NOEXCEPT\n       { return *begin(); }\n \n       /**\n        *  Returns a read-only (constant) reference to the data at the first\n        *  element of the %deque.\n        */\n       const_reference\n-      front() const\n+      front() const _GLIBCXX_NOEXCEPT\n       { return *begin(); }\n \n       /**\n        *  Returns a read/write reference to the data at the last element of the\n        *  %deque.\n        */\n       reference\n-      back()\n+      back() _GLIBCXX_NOEXCEPT\n       {\n \titerator __tmp = end();\n \t--__tmp;\n@@ -1342,7 +1337,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element of the %deque.\n        */\n       const_reference\n-      back() const\n+      back() const _GLIBCXX_NOEXCEPT\n       {\n \tconst_iterator __tmp = end();\n \t--__tmp;\n@@ -1422,7 +1417,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  needed, it should be retrieved before pop_front() is called.\n        */\n       void\n-      pop_front()\n+      pop_front() _GLIBCXX_NOEXCEPT\n       {\n \tif (this->_M_impl._M_start._M_cur\n \t    != this->_M_impl._M_start._M_last - 1)\n@@ -1443,7 +1438,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  needed, it should be retrieved before pop_back() is called.\n        */\n       void\n-      pop_back()\n+      pop_back() _GLIBCXX_NOEXCEPT\n       {\n \tif (this->_M_impl._M_finish._M_cur\n \t    != this->_M_impl._M_finish._M_first)\n@@ -1655,7 +1650,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  std::swap(d1,d2) will feed to this function.\n        */\n       void\n-      swap(deque& __x)\n+      swap(deque& __x) _GLIBCXX_NOEXCEPT\n       {\n \tstd::swap(this->_M_impl._M_start, __x._M_impl._M_start);\n \tstd::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);"}, {"sha": "3984f11ac6b24cdedc982c1c38222c52204140d7", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8", "patch": "@@ -128,7 +128,7 @@ namespace __debug\n \n #if __cplusplus >= 201103L\n       deque&\n-      operator=(deque&& __x)\n+      operator=(deque&& __x) noexcept\n       {\n \t// NB: DR 1204.\n \t// NB: DR 675.\n@@ -287,7 +287,7 @@ namespace __debug\n \n #if __cplusplus >= 201103L\n       void\n-      shrink_to_fit()\n+      shrink_to_fit() noexcept\n       {\n \tif (_Base::_M_shrink_to_fit())\n \t  this->_M_invalidate_all();\n@@ -298,14 +298,14 @@ namespace __debug\n \n       // element access:\n       reference\n-      operator[](size_type __n)\n+      operator[](size_type __n) _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_subscript(__n);\n \treturn _M_base()[__n];\n       }\n \n       const_reference\n-      operator[](size_type __n) const\n+      operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_subscript(__n);\n \treturn _M_base()[__n];\n@@ -314,28 +314,28 @@ namespace __debug\n       using _Base::at;\n \n       reference\n-      front()\n+      front() _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::front();\n       }\n \n       const_reference\n-      front() const\n+      front() const _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::front();\n       }\n \n       reference\n-      back()\n+      back() _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::back();\n       }\n \n       const_reference\n-      back() const\n+      back() const _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::back();\n@@ -468,15 +468,15 @@ namespace __debug\n #endif\n \n       void\n-      pop_front()\n+      pop_front() _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \tthis->_M_invalidate_if(_Equal(_Base::begin()));\n \t_Base::pop_front();\n       }\n \n       void\n-      pop_back()\n+      pop_back() _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \tthis->_M_invalidate_if(_Equal(--_Base::end()));\n@@ -556,7 +556,7 @@ namespace __debug\n       }\n \n       void\n-      swap(deque& __x)\n+      swap(deque& __x) _GLIBCXX_NOEXCEPT\n       {\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);"}, {"sha": "52d474d4c1187712f280a25bffdc20300c292f67", "filename": "libstdc++-v3/include/profile/deque", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fdeque?ref=d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8", "patch": "@@ -117,7 +117,7 @@ namespace __profile\n \n #if __cplusplus >= 201103L\n       deque&\n-      operator=(deque&& __x)\n+      operator=(deque&& __x) noexcept\n       {\n \t// NB: DR 1204.\n \t// NB: DR 675.\n@@ -245,39 +245,39 @@ namespace __profile\n \n       // element access:\n       reference\n-      operator[](size_type __n)\n+      operator[](size_type __n) _GLIBCXX_NOEXCEPT\n       {\n \treturn _M_base()[__n];\n       }\n \n       const_reference\n-      operator[](size_type __n) const\n+      operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n       {\n \treturn _M_base()[__n];\n       }\n \n       using _Base::at;\n \n       reference\n-      front()\n+      front() _GLIBCXX_NOEXCEPT\n       {\n \treturn _Base::front();\n       }\n \n       const_reference\n-      front() const\n+      front() const _GLIBCXX_NOEXCEPT\n       {\n \treturn _Base::front();\n       }\n \n       reference\n-      back()\n+      back() _GLIBCXX_NOEXCEPT\n       {\n \treturn _Base::back();\n       }\n \n       const_reference\n-      back() const\n+      back() const _GLIBCXX_NOEXCEPT\n       {\n \treturn _Base::back();\n       }\n@@ -375,13 +375,13 @@ namespace __profile\n #endif\n \n       void\n-      pop_front()\n+      pop_front() _GLIBCXX_NOEXCEPT\n       {\n \t_Base::pop_front();\n       }\n \n       void\n-      pop_back()\n+      pop_back() _GLIBCXX_NOEXCEPT\n       {\n \t_Base::pop_back();\n       }\n@@ -409,7 +409,7 @@ namespace __profile\n       }\n \n       void\n-      swap(deque& __x)\n+      swap(deque& __x) _GLIBCXX_NOEXCEPT\n       {\n \t_Base::swap(__x);\n       }"}, {"sha": "a0bdcdb53f89760bec9c336a48ce2e422d6d7d21", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1760 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1755 }\n \n #include <deque>\n "}, {"sha": "86d7016e616c0f0720836fcdb237e723147941e6", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1693 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1688 }\n \n #include <deque>\n "}, {"sha": "84be8ebda5e8e717ddcb7866f9b3f4104f77ca5d", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1693 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1688 }\n \n #include <deque>\n #include <utility>"}, {"sha": "26e5c290013ca0e98b639c6bacf3581c5c803395", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=d15ac9d9a3d9cdbc655115803d6fb5ad38e9adc8", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1844 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1839 }\n \n #include <deque>\n "}]}