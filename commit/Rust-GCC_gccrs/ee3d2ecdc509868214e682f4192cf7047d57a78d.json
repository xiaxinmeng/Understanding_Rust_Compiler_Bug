{"sha": "ee3d2ecdc509868214e682f4192cf7047d57a78d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUzZDJlY2RjNTA5ODY4MjE0ZTY4MmY0MTkyY2Y3MDQ3ZDU3YTc4ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-01-17T16:21:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-01-17T16:21:49Z"}, "message": "re PR target/51872 (Shrink-wrapping with -mminimal-toc causes bootstrap failure)\n\n\tPR bootstrap/51872\n\t* hard-reg-set.h (struct hard_reg_set_container): New type.\n\t* target.h (struct hard_reg_set_container): Forward declare.\n\t* target.def (set_up_by_prologue): New target hook.\n\t* doc/tm.texi.in (TARGET_SET_UP_BY_PROLOGUE): Document it.\n\t* doc/tm.texi: Regenerated.\n\t* function.c (thread_prologue_and_epilogue_insns): Change\n\tset_up_by_prologue HARD_REG_SET into struct hard_reg_set_container.\n\tCall targetm.set_up_by_prologue on it.\n\t* config/rs6000/rs6000.c (rs6000_set_up_by_prologue): New function.\n\t(TARGET_SET_UP_BY_PROLOGUE): Redefine to it.\n\nFrom-SVN: r183254", "tree": {"sha": "063806ffabfecffdb1aa308a9a26013274f0668b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/063806ffabfecffdb1aa308a9a26013274f0668b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee3d2ecdc509868214e682f4192cf7047d57a78d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee3d2ecdc509868214e682f4192cf7047d57a78d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee3d2ecdc509868214e682f4192cf7047d57a78d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee3d2ecdc509868214e682f4192cf7047d57a78d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b4f05ec1ee0a91c937f9c90df8addf6aec7ad5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b4f05ec1ee0a91c937f9c90df8addf6aec7ad5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b4f05ec1ee0a91c937f9c90df8addf6aec7ad5f"}], "stats": {"total": 86, "additions": 72, "deletions": 14}, "files": [{"sha": "fbd93bb6313a8878ea9702f5b53848086b70b7ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3d2ecdc509868214e682f4192cf7047d57a78d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3d2ecdc509868214e682f4192cf7047d57a78d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee3d2ecdc509868214e682f4192cf7047d57a78d", "patch": "@@ -1,3 +1,17 @@\n+2012-01-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/51872\n+\t* hard-reg-set.h (struct hard_reg_set_container): New type.\n+\t* target.h (struct hard_reg_set_container): Forward declare.\n+\t* target.def (set_up_by_prologue): New target hook.\n+\t* doc/tm.texi.in (TARGET_SET_UP_BY_PROLOGUE): Document it.\n+\t* doc/tm.texi: Regenerated.\n+\t* function.c (thread_prologue_and_epilogue_insns): Change\n+\tset_up_by_prologue HARD_REG_SET into struct hard_reg_set_container.\n+\tCall targetm.set_up_by_prologue on it.\n+\t* config/rs6000/rs6000.c (rs6000_set_up_by_prologue): New function.\n+\t(TARGET_SET_UP_BY_PROLOGUE): Redefine to it.\n+\n 2012-01-17  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rx/rx.c (rx_can_use_simple_return): New function."}, {"sha": "6434be5e9452477045c3074b1abc039c5612ab81", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3d2ecdc509868214e682f4192cf7047d57a78d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3d2ecdc509868214e682f4192cf7047d57a78d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ee3d2ecdc509868214e682f4192cf7047d57a78d", "patch": "@@ -1227,6 +1227,7 @@ static bool rs6000_cannot_force_const_mem (enum machine_mode, rtx);\n static bool rs6000_legitimate_constant_p (enum machine_mode, rtx);\n static bool rs6000_save_toc_in_prologue_p (void);\n static void rs6000_code_end (void) ATTRIBUTE_UNUSED;\n+static void rs6000_set_up_by_prologue (struct hard_reg_set_container *);\n \n /* Hash table stuff for keeping track of TOC entries.  */\n \n@@ -1392,6 +1393,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #define TARGET_ASM_ASSEMBLE_VISIBILITY rs6000_assemble_visibility\n #endif\n \n+#undef TARGET_SET_UP_BY_PROLOGUE\n+#define TARGET_SET_UP_BY_PROLOGUE rs6000_set_up_by_prologue\n+\n #undef TARGET_HAVE_TLS\n #define TARGET_HAVE_TLS HAVE_AS_TLS\n \n@@ -27903,6 +27907,19 @@ rs6000_code_end (void)\n   current_function_decl = NULL;\n }\n \n+/* Add r30 to hard reg set if the prologue sets it up and it is not\n+   pic_offset_table_rtx.  */\n+\n+static void\n+rs6000_set_up_by_prologue (struct hard_reg_set_container *set)\n+{\n+  if (!TARGET_SINGLE_PIC_BASE\n+      && TARGET_TOC\n+      && TARGET_MINIMAL_TOC\n+      && get_pool_size () != 0)\n+    add_to_hard_reg_set (&set->set, Pmode, RS6000_PIC_OFFSET_TABLE_REGNUM);\n+}\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-rs6000.h\""}, {"sha": "9a51968b91c7c3174b870e2f3e4ba813bcbef145", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3d2ecdc509868214e682f4192cf7047d57a78d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3d2ecdc509868214e682f4192cf7047d57a78d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=ee3d2ecdc509868214e682f4192cf7047d57a78d", "patch": "@@ -1,5 +1,5 @@\n @c Copyright (C) 1988,1989,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,\n-@c 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+@c 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012\n @c Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n@@ -4959,6 +4959,10 @@ TARGET_STRUCT_VALUE_RTX, FRAME_POINTER_REGNUM, EH_USES,\n FRAME_POINTER_REGNUM, ARG_POINTER_REGNUM, and the PIC_OFFSET_TABLE_REGNUM.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_SET_UP_BY_PROLOGUE (struct hard_reg_set_container *@var{})\n+This hook should add additional registers that are computed by the prologue to the hard regset for shrink-wrapping optimization purposes.\n+@end deftypefn\n+\n @node Stack Smashing Protection\n @subsection Stack smashing protection\n @cindex stack smashing protection"}, {"sha": "42d69565e80fc9598c35f447dac9981969c24ea3", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3d2ecdc509868214e682f4192cf7047d57a78d/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3d2ecdc509868214e682f4192cf7047d57a78d/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=ee3d2ecdc509868214e682f4192cf7047d57a78d", "patch": "@@ -1,5 +1,5 @@\n @c Copyright (C) 1988,1989,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,\n-@c 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+@c 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012\n @c Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n@@ -4906,6 +4906,8 @@ TARGET_STRUCT_VALUE_RTX, FRAME_POINTER_REGNUM, EH_USES,\n FRAME_POINTER_REGNUM, ARG_POINTER_REGNUM, and the PIC_OFFSET_TABLE_REGNUM.\n @end deftypefn\n \n+@hook TARGET_SET_UP_BY_PROLOGUE\n+\n @node Stack Smashing Protection\n @subsection Stack smashing protection\n @cindex stack smashing protection"}, {"sha": "fcb79f5d1b88c4c6bfb8a3bf0c8f146acacad187", "filename": "gcc/function.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3d2ecdc509868214e682f4192cf7047d57a78d/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3d2ecdc509868214e682f4192cf7047d57a78d/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=ee3d2ecdc509868214e682f4192cf7047d57a78d", "patch": "@@ -1,7 +1,7 @@\n /* Expands front end tree to back end RTL for GCC.\n    Copyright (C) 1987, 1988, 1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997,\n    1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n-   2010, 2011  Free Software Foundation, Inc.\n+   2010, 2011, 2012  Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -5899,7 +5899,7 @@ thread_prologue_and_epilogue_insns (void)\n       && nonempty_prologue && !crtl->calls_eh_return)\n     {\n       HARD_REG_SET prologue_clobbered, prologue_used, live_on_edge;\n-      HARD_REG_SET set_up_by_prologue;\n+      struct hard_reg_set_container set_up_by_prologue;\n       rtx p_insn;\n       VEC(basic_block, heap) *vec;\n       basic_block bb;\n@@ -5939,18 +5939,22 @@ thread_prologue_and_epilogue_insns (void)\n \n       vec = VEC_alloc (basic_block, heap, n_basic_blocks);\n \n-      CLEAR_HARD_REG_SET (set_up_by_prologue);\n-      add_to_hard_reg_set (&set_up_by_prologue, Pmode, STACK_POINTER_REGNUM);\n-      add_to_hard_reg_set (&set_up_by_prologue, Pmode, ARG_POINTER_REGNUM);\n+      CLEAR_HARD_REG_SET (set_up_by_prologue.set);\n+      add_to_hard_reg_set (&set_up_by_prologue.set, Pmode,\n+\t\t\t   STACK_POINTER_REGNUM);\n+      add_to_hard_reg_set (&set_up_by_prologue.set, Pmode, ARG_POINTER_REGNUM);\n       if (frame_pointer_needed)\n-\tadd_to_hard_reg_set (&set_up_by_prologue, Pmode,\n+\tadd_to_hard_reg_set (&set_up_by_prologue.set, Pmode,\n \t\t\t     HARD_FRAME_POINTER_REGNUM);\n       if (pic_offset_table_rtx)\n-\tadd_to_hard_reg_set (&set_up_by_prologue, Pmode,\n+\tadd_to_hard_reg_set (&set_up_by_prologue.set, Pmode,\n \t\t\t     PIC_OFFSET_TABLE_REGNUM);\n       if (stack_realign_drap && crtl->drap_reg)\n-\tadd_to_hard_reg_set (&set_up_by_prologue, GET_MODE (crtl->drap_reg),\n+\tadd_to_hard_reg_set (&set_up_by_prologue.set,\n+\t\t\t     GET_MODE (crtl->drap_reg),\n \t\t\t     REGNO (crtl->drap_reg));\n+      if (targetm.set_up_by_prologue)\n+\ttargetm.set_up_by_prologue (&set_up_by_prologue);\n \n       /* We don't use a different max size depending on\n \t optimize_bb_for_speed_p because increasing shrink-wrapping\n@@ -5968,7 +5972,7 @@ thread_prologue_and_epilogue_insns (void)\n \t    if (NONDEBUG_INSN_P (insn))\n \t      {\n \t\tif (requires_stack_frame_p (insn, prologue_used,\n-\t\t\t\t\t    set_up_by_prologue))\n+\t\t\t\t\t    set_up_by_prologue.set))\n \t\t  {\n \t\t    if (bb == entry_edge->dest)\n \t\t      goto fail_shrinkwrap;"}, {"sha": "ecdad174c133873e7e3bd29e2fc6b0deac64d61f", "filename": "gcc/hard-reg-set.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3d2ecdc509868214e682f4192cf7047d57a78d/gcc%2Fhard-reg-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3d2ecdc509868214e682f4192cf7047d57a78d/gcc%2Fhard-reg-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhard-reg-set.h?ref=ee3d2ecdc509868214e682f4192cf7047d57a78d", "patch": "@@ -1,6 +1,6 @@\n /* Sets (bit vectors) of hard registers, and operations on them.\n    Copyright (C) 1987, 1992, 1994, 2000, 2003, 2004, 2005, 2007, 2008, 2009,\n-   2010 Free Software Foundation, Inc.\n+   2010, 2012 Free Software Foundation, Inc.\n \n This file is part of GCC\n \n@@ -54,6 +54,14 @@ typedef HARD_REG_ELT_TYPE HARD_REG_SET[HARD_REG_SET_LONGS];\n \n #endif\n \n+/* HARD_REG_SET wrapped into a structure, to make it possible to\n+   use HARD_REG_SET even in APIs that should not include\n+   hard-reg-set.h.  */\n+struct hard_reg_set_container\n+{\n+  HARD_REG_SET set;\n+};\n+\n /* HARD_CONST is used to cast a constant to the appropriate type\n    for use with a HARD_REG_SET.  */\n "}, {"sha": "cdc8cb84ad10693502e1262768cfd878ad51cb30", "filename": "gcc/target.def", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3d2ecdc509868214e682f4192cf7047d57a78d/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3d2ecdc509868214e682f4192cf7047d57a78d/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=ee3d2ecdc509868214e682f4192cf7047d57a78d", "patch": "@@ -1,6 +1,6 @@\n /* Target hook definitions.\n    Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-   2011\n+   2011, 2012\n    Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -2644,6 +2644,14 @@ DEFHOOK\n  void, (bitmap regs),\n  hook_void_bitmap)\n \n+/* Fill in additional registers set up by prologue into a regset.  */\n+DEFHOOK\n+(set_up_by_prologue,\n+ \"This hook should add additional registers that are computed by the prologue\\\n+ to the hard regset for shrink-wrapping optimization purposes.\",\n+ void, (struct hard_reg_set_container *),\n+ NULL)\n+\n /* Determine the type of unwind info to emit for debugging.  */\n DEFHOOK\n (debug_unwind_info,"}, {"sha": "381819891044a2454198974dc622724bc85616a3", "filename": "gcc/target.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3d2ecdc509868214e682f4192cf7047d57a78d/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3d2ecdc509868214e682f4192cf7047d57a78d/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=ee3d2ecdc509868214e682f4192cf7047d57a78d", "patch": "@@ -1,6 +1,6 @@\n /* Data structure definitions for a generic GCC target.\n    Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-   2011\n+   2011, 2012\n    Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -92,6 +92,7 @@ extern bool target_default_pointer_address_modes_p (void);\n \n struct stdarg_info;\n struct spec_info_def;\n+struct hard_reg_set_container;\n \n /* The struct used by the secondary_reload target hook.  */\n typedef struct secondary_reload_info"}]}