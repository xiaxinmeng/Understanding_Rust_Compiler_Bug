{"sha": "d6684bc856c24bcd0a8d391579875a456146f585", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY2ODRiYzg1NmMyNGJjZDBhOGQzOTE1Nzk4NzVhNDU2MTQ2ZjU4NQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-04-11T15:51:55Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-04-11T15:51:55Z"}, "message": "Makefile.in (ifcvt.o): Depend on toplev.h.\n\n\t* Makefile.in (ifcvt.o): Depend on toplev.h.\n\n\t* c-semantics.c: Include expr.h.\n\n\t* ifcvt.c: Include toplev.h.\n\n\t* expr.h (rtx_equal_p): Delete prototype.\n\n\t* rtl.h (exact_log2_wide, floor_log2_wide, permalloc,\n\tprotect_from_queue, gen_jump, gen_beq, gen_bge, gen_ble,\n\teliminate_constant_term, expand_complex_abs, find_single_use,\n\tmake_tree, init_expr_once, init_optabs, supports_one_only):\n\tLikewise.\n\n\t* tree.h (exact_log2_wide, floor_log2_wide, expand_null_return,\n\trest_of_type_compilation, emit_queue, do_pending_stack_adjust,\n\texpand_assignment, store_expr, emit_line_note_after,\n\temit_line_note_force, split_specs_attrs, label_rtx): Likewise.\n\n\t* toplev.h (exact_log2_wide, floor_log2_wide): Add prototype.\n\ncp:\n\t* Make-lang.in (cp/semantics.o): Depend on $(EXPR_H).\n\n\t* semantics.c: Include expr.h.\n\njava:\n\t* Make-lang.in (java/boehm.o): Depend on toplev.h.\n\n\t* boehm.c: Include toplev.h.\n\nFrom-SVN: r41256", "tree": {"sha": "5d9f1d3aecfc00b70650045e6e854639f280e872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d9f1d3aecfc00b70650045e6e854639f280e872"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6684bc856c24bcd0a8d391579875a456146f585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6684bc856c24bcd0a8d391579875a456146f585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6684bc856c24bcd0a8d391579875a456146f585", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6684bc856c24bcd0a8d391579875a456146f585/comments", "author": null, "committer": null, "parents": [{"sha": "2ef56a41e6a2b37ed7a638a79a2f920fe9149551", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef56a41e6a2b37ed7a638a79a2f920fe9149551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ef56a41e6a2b37ed7a638a79a2f920fe9149551"}], "stats": {"total": 115, "additions": 50, "deletions": 65}, "files": [{"sha": "1f48401e117fa325f4862fa67e75420a3edc869f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6684bc856c24bcd0a8d391579875a456146f585", "patch": "@@ -1,5 +1,26 @@\n 2001-04-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* Makefile.in (ifcvt.o): Depend on toplev.h.\n+\n+\t* c-semantics.c: Include expr.h.\n+\n+\t* ifcvt.c: Include toplev.h.\n+\n+\t* expr.h (rtx_equal_p): Delete prototype.\n+\n+\t* rtl.h (exact_log2_wide, floor_log2_wide, permalloc,\n+\tprotect_from_queue, gen_jump, gen_beq, gen_bge, gen_ble,\n+\teliminate_constant_term, expand_complex_abs, find_single_use,\n+\tmake_tree, init_expr_once, init_optabs, supports_one_only):\n+\tLikewise.\n+\t\n+\t* tree.h (exact_log2_wide, floor_log2_wide, expand_null_return,\n+\trest_of_type_compilation, emit_queue, do_pending_stack_adjust,\n+\texpand_assignment, store_expr, emit_line_note_after,\n+\temit_line_note_force, split_specs_attrs, label_rtx): Likewise.\n+\t\n+\t* toplev.h (exact_log2_wide, floor_log2_wide): Add prototype.\n+\n \t* sparc-protos.h: Delete redundant prototypes.\n \n 2001-04-11  Vladimir Makarov  <vmakarov@toke.toronto.redhat.com>"}, {"sha": "935c04f8038df739d81c187b756b2077ad5ccd88", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d6684bc856c24bcd0a8d391579875a456146f585", "patch": "@@ -1567,7 +1567,7 @@ timevar.o : timevar.c $(CONFIG_H) $(SYSTEM_H) $(TIMEVAR_H) flags.h intl.h\n regrename.o : regrename.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) insn-config.h \\\n    $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h $(RECOG_H) function.h \\\n    resource.h $(OBSTACK_H) flags.h $(TM_P_H)\n-ifcvt.o : ifcvt.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(REGS_H) \\\n+ifcvt.o : ifcvt.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(REGS_H) toplev.h \\\n    flags.h insn-config.h function.h $(RECOG_H) $(BASIC_BLOCK_H) $(EXPR_H) \\\n    output.h $(TM_P_H)\n dependence.o : dependence.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) \\"}, {"sha": "c491335e1e86d961639795936588880f9f568fb1", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=d6684bc856c24bcd0a8d391579875a456146f585", "patch": "@@ -33,6 +33,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"ggc.h\"\n #include \"rtl.h\"\n+#include \"expr.h\"\n #include \"output.h\"\n #include \"timevar.h\"\n "}, {"sha": "6183bb8f06c25d7a7faa56c4c617c48d3044819f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d6684bc856c24bcd0a8d391579875a456146f585", "patch": "@@ -1,3 +1,9 @@\n+2001-04-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Make-lang.in (cp/semantics.o): Depend on $(EXPR_H).\n+\n+\t* semantics.c: Include expr.h.\n+\n 2001-04-11  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* method.c (implicitly_declare_fn): Commonize code for copy ctor"}, {"sha": "8309ea68e6c16ab777c07375f0ede80fbff19962", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=d6684bc856c24bcd0a8d391579875a456146f585", "patch": "@@ -294,7 +294,7 @@ cp/error.o: cp/error.c $(CXX_TREE_H) toplev.h diagnostic.h\n cp/errfn.o: cp/errfn.c $(CXX_TREE_H) toplev.h\n cp/repo.o: cp/repo.c $(CXX_TREE_H) toplev.h $(GGC_H)\n cp/semantics.o: cp/semantics.c $(CXX_TREE_H) cp/lex.h except.h toplev.h \\\n-  flags.h $(GGC_H) output.h $(RTL_H) $(TIMEVAR_H)\n+  flags.h $(GGC_H) output.h $(RTL_H) $(TIMEVAR_H) $(EXPR_H)\n cp/dump.o: cp/dump.c $(CXX_TREE_H) c-dump.h\n cp/optimize.o: cp/optimize.c $(CXX_TREE_H) rtl.h integrate.h insn-config.h \\\n   input.h params.h"}, {"sha": "9295564cad462dc2d8223550c72ed73113846da9", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=d6684bc856c24bcd0a8d391579875a456146f585", "patch": "@@ -34,6 +34,7 @@\n #include \"flags.h\"\n #include \"ggc.h\"\n #include \"rtl.h\"\n+#include \"expr.h\"\n #include \"output.h\"\n #include \"timevar.h\"\n "}, {"sha": "27b11195bebef398e4cb0681b3100058e95a58bc", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=d6684bc856c24bcd0a8d391579875a456146f585", "patch": "@@ -1168,9 +1168,6 @@ extern void set_mem_attributes PARAMS ((rtx, tree, int));\n /* Assemble the static constant template for function entry trampolines.  */\n extern rtx assemble_trampoline_template PARAMS ((void));\n \n-/* Return 1 if two rtx's are equivalent in structure and elements.  */\n-extern int rtx_equal_p PARAMS ((rtx, rtx));\n-\n /* Given rtx, return new rtx whose address won't be affected by\n    any side effects.  It has been copied to a new temporary reg.  */\n extern rtx stabilize PARAMS ((rtx));"}, {"sha": "f40a656da34448f5607967c37d44ab85aebfc421", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=d6684bc856c24bcd0a8d391579875a456146f585", "patch": "@@ -32,6 +32,7 @@\n #include \"expr.h\"\n #include \"real.h\"\n #include \"output.h\"\n+#include \"toplev.h\"\n #include \"tm_p.h\"\n \n "}, {"sha": "6fed58b51c648bd9b054fe5e0ea81d09b6e00a2e", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=d6684bc856c24bcd0a8d391579875a456146f585", "patch": "@@ -1,3 +1,9 @@\n+2001-04-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Make-lang.in (java/boehm.o): Depend on toplev.h.\n+\n+\t* boehm.c: Include toplev.h.\n+\n 2001-04-06  Tom Tromey  <tromey@redhat.com>\n \t    Alexandre Petit-Bianco  <apbianco@redhat.com>\n "}, {"sha": "ca3653f2d67ace2743248981af908998ed1635c1", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=d6684bc856c24bcd0a8d391579875a456146f585", "patch": "@@ -240,7 +240,7 @@ java/jcf-dump.o: $(CONFIG_H) $(SYSTEM_H) $(JAVA_TREE_H) java/jcf-dump.c \\\n java/gjavah.o: $(CONFIG_H) $(SYSTEM_H) $(JAVA_TREE_H) java/gjavah.c \\\n   java/jcf-reader.c java/jcf.h java/javaop.h version.h\n java/boehm.o: java/boehm.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(JAVA_TREE_H) \\\n-  java/parse.h\n+  java/parse.h toplev.h\n java/buffer.o: java/buffer.c $(CONFIG_H) java/buffer.h $(SYSTEM_H) toplev.h\n java/check-init.o: java/check-init.c $(CONFIG_H) \\\n   $(JAVA_TREE_H) $(SYSTEM_H) toplev.h"}, {"sha": "e92b4402b3803902fbbb0d2e3ca0eda555470b02", "filename": "gcc/java/boehm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Fjava%2Fboehm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Fjava%2Fboehm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fboehm.c?ref=d6684bc856c24bcd0a8d391579875a456146f585", "patch": "@@ -30,6 +30,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"tree.h\"\n #include \"java-tree.h\"\n #include \"parse.h\"\n+#include \"toplev.h\"\n \n static void mark_reference_fields PARAMS ((tree,\n \t\t\t\t\t   unsigned HOST_WIDE_INT *,"}, {"sha": "c1af43d38a85dd46a1830a35db1a0eec259d31d0", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=d6684bc856c24bcd0a8d391579875a456146f585", "patch": "@@ -1132,17 +1132,6 @@ extern int generating_concat_p;\n \n /* Generally useful functions.  */\n \n-/* The following functions accept a wide integer argument.  Rather than\n-   having to cast on every function call, we use a macro instead, that is\n-   defined here and in tree.h.  */\n-\n-#ifndef exact_log2\n-#define exact_log2(N) exact_log2_wide ((unsigned HOST_WIDE_INT) (N))\n-#define floor_log2(N) floor_log2_wide ((unsigned HOST_WIDE_INT) (N))\n-#endif\n-extern int exact_log2_wide\t\tPARAMS ((unsigned HOST_WIDE_INT));\n-extern int floor_log2_wide\t\tPARAMS ((unsigned HOST_WIDE_INT));\n-\n /* In expmed.c */\n extern int ceil_log2\t\t\tPARAMS ((unsigned HOST_WIDE_INT));\n \n@@ -1165,7 +1154,6 @@ extern rtx gen_rtx\t\t\tPARAMS ((enum rtx_code,\n extern rtvec gen_rtvec\t\t\tPARAMS ((int, ...));\n \n /* In other files */\n-extern char *permalloc\t\t\tPARAMS ((int));\n extern rtx rtx_alloc\t\t\tPARAMS ((RTX_CODE));\n extern rtvec rtvec_alloc\t\tPARAMS ((int));\n extern rtx copy_insn_1\t\t\tPARAMS ((rtx));\n@@ -1243,7 +1231,6 @@ extern rtx assign_stack_temp\t\tPARAMS ((enum machine_mode,\n extern rtx assign_temp\t\t\tPARAMS ((union tree_node *,\n \t\t\t\t\t       int, int, int));\n /* In expr.c  */\n-extern rtx protect_from_queue\t\tPARAMS ((rtx, int));\n extern void emit_queue\t\t\tPARAMS ((void));\n extern rtx emit_move_insn\t\tPARAMS ((rtx, rtx));\n \n@@ -1349,21 +1336,9 @@ extern rtx simplify_rtx\t\t\tPARAMS ((rtx));\n /* In optabs.c  */\n extern rtx gen_move_insn\t\tPARAMS ((rtx, rtx));\n \n-extern rtx gen_jump\t\t\tPARAMS ((rtx));\n-extern rtx gen_beq\t\t\tPARAMS ((rtx));\n-extern rtx gen_bge\t\t\tPARAMS ((rtx));\n-extern rtx gen_ble\t\t\tPARAMS ((rtx));\n-\n /* In function.c  */\n extern rtx gen_mem_addressof\t\tPARAMS ((rtx, union tree_node *));\n \n-/* In explow.c  */\n-extern rtx eliminate_constant_term\tPARAMS ((rtx, rtx *));\n-\n-/* In optabs.c */\n-extern rtx expand_complex_abs\t\tPARAMS ((enum machine_mode, rtx, rtx,\n-\t\t\t\t\t\t int));\n-\n /* In regclass.c  */\n extern enum machine_mode choose_hard_reg_mode PARAMS ((unsigned int,\n \t\t\t\t\t\t       unsigned int));\n@@ -1645,11 +1620,9 @@ extern rtx gen_lowpart_SUBREG PARAMS ((enum machine_mode, rtx));\n #define INVALID_REGNUM\t\t\t(~(unsigned int)0)\n \n extern rtx find_next_ref\t\tPARAMS ((rtx, rtx));\n-extern rtx *find_single_use\t\tPARAMS ((rtx, rtx, rtx *));\n \n extern rtx output_constant_def\t\tPARAMS ((union tree_node *, int));\n extern rtx immed_real_const\t\tPARAMS ((union tree_node *));\n-extern union tree_node *make_tree\tPARAMS ((union tree_node *, rtx));\n \n /* Define a default value for STORE_FLAG_VALUE.  */\n \n@@ -1853,7 +1826,6 @@ extern void emit_jump\t\t\tPARAMS ((rtx));\n extern int preserve_subexpressions_p\tPARAMS ((void));\n \n /* In expr.c */\n-extern void init_expr_once\t\tPARAMS ((void));\n extern void move_by_pieces\t\tPARAMS ((rtx, rtx,\n \t\t\t\t\t\t unsigned HOST_WIDE_INT,\n \t\t\t\t\t\t unsigned int));\n@@ -1915,9 +1887,6 @@ extern void combine_stack_adjustments\tPARAMS ((void));\n extern void dbr_schedule\t\tPARAMS ((rtx, FILE *));\n #endif\n \n-/* In optabs.c */\n-extern void init_optabs\t\t\tPARAMS ((void));\n-\n /* In local-alloc.c */\n #ifdef BUFSIZ\n extern void dump_local_alloc\t\tPARAMS ((FILE *));\n@@ -2000,7 +1969,6 @@ extern int set_dominates_use\t\tPARAMS ((int, int, int, rtx, rtx));\n /* In varasm.c */\n extern void bss_section\t\t\tPARAMS ((void));\n extern int in_data_section\t\tPARAMS ((void));\n-extern int supports_one_only\t\tPARAMS ((void));\n extern void init_varasm_once\t\tPARAMS ((void));\n \n /* In rtl.c */"}, {"sha": "edf7e0242e08551775aaf3e593a51ee21f770178", "filename": "gcc/toplev.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=d6684bc856c24bcd0a8d391579875a456146f585", "patch": "@@ -170,4 +170,14 @@ extern struct lang_hooks lang_hooks;\n extern void set_fast_math_flags         PARAMS ((void));\n extern void set_no_fast_math_flags      PARAMS ((void));\n \n+/* The following functions accept a wide integer argument.  Rather\n+   than having to cast on every function call, we use a macro instead.  */\n+\n+#ifndef exact_log2\n+#define exact_log2(N) exact_log2_wide ((unsigned HOST_WIDE_INT) (N))\n+#define floor_log2(N) floor_log2_wide ((unsigned HOST_WIDE_INT) (N))\n+#endif\n+extern int exact_log2_wide             PARAMS ((unsigned HOST_WIDE_INT));\n+extern int floor_log2_wide             PARAMS ((unsigned HOST_WIDE_INT));\n+\n #endif /* __GCC_TOPLEV_H */"}, {"sha": "a394a31f396f45e5efeee30cf3c329ce885cfc10", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6684bc856c24bcd0a8d391579875a456146f585/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d6684bc856c24bcd0a8d391579875a456146f585", "patch": "@@ -1907,17 +1907,6 @@ extern tree integer_types[itk_none];\n \f\n #define NULL_TREE (tree) NULL\n \n-/* The following functions accept a wide integer argument.  Rather than\n-   having to cast on every function call, we use a macro instead, that is\n-   defined here and in rtl.h.  */\n-\n-#ifndef exact_log2\n-#define exact_log2(N) exact_log2_wide ((unsigned HOST_WIDE_INT) (N))\n-#define floor_log2(N) floor_log2_wide ((unsigned HOST_WIDE_INT) (N))\n-#endif\n-extern int exact_log2_wide             PARAMS ((unsigned HOST_WIDE_INT));\n-extern int floor_log2_wide             PARAMS ((unsigned HOST_WIDE_INT));\n-\n /* Approximate positive square root of a host double.  This is for\n    statistical reports, not code generation.  */\n extern double approx_sqrt\t\tPARAMS ((double));\n@@ -2554,7 +2543,6 @@ extern int expand_exit_loop_if_false\t\tPARAMS ((struct nesting *,\n \t\t\t\t\t\t       tree));\n extern int expand_exit_something\t\tPARAMS ((void));\n \n-extern void expand_null_return\t\t\tPARAMS ((void));\n extern void expand_return\t\t\tPARAMS ((tree));\n extern int optimize_tail_recursion\t\tPARAMS ((tree, struct rtx_def *));\n extern void expand_start_bindings_and_block     PARAMS ((int, tree));\n@@ -2679,9 +2667,6 @@ extern tree gettags\t\t\t\tPARAMS ((void));\n \n extern tree build_range_type PARAMS ((tree, tree, tree));\n \n-/* Called after finishing a record, union or enumeral type.  */\n-extern void rest_of_type_compilation PARAMS ((tree, int));\n-\n /* In alias.c */\n extern void record_component_aliases\t\tPARAMS ((tree));\n extern HOST_WIDE_INT get_alias_set\t\tPARAMS ((tree));\n@@ -2789,24 +2774,14 @@ extern void indent_to\t\t\tPARAMS ((FILE *, int));\n #endif\n \n /* In expr.c */\n-extern void emit_queue\t\t\t\tPARAMS ((void));\n extern int apply_args_register_offset\t\tPARAMS ((int));\n extern struct rtx_def *expand_builtin_return_addr\n \tPARAMS ((enum built_in_function, int, struct rtx_def *));\n-extern void do_pending_stack_adjust\t\tPARAMS ((void));\n-extern struct rtx_def *expand_assignment\tPARAMS ((tree, tree, int,\n-\t\t\t\t\t\t\t int));\n-extern struct rtx_def *store_expr\t\tPARAMS ((tree,\n-\t\t\t\t\t\t\t struct rtx_def *,\n-\t\t\t\t\t\t\tint));\n extern void check_max_integer_computation_mode\tPARAMS ((tree));\n \n /* In emit-rtl.c */\n extern void start_sequence_for_rtl_expr\t\tPARAMS ((tree));\n-extern struct rtx_def *emit_line_note_after\tPARAMS ((const char *, int,\n-\t\t\t\t\t\t\t struct rtx_def *));\n extern struct rtx_def *emit_line_note\t\tPARAMS ((const char *, int));\n-extern struct rtx_def *emit_line_note_force\tPARAMS ((const char *, int));\n \n /* In calls.c */\n \n@@ -2818,7 +2793,6 @@ extern int mark_addressable\t\tPARAMS ((tree));\n extern void incomplete_type_error\tPARAMS ((tree, tree));\n extern void print_lang_statistics\tPARAMS ((void));\n extern tree truthvalue_conversion\tPARAMS ((tree));\n-extern void split_specs_attrs\t\tPARAMS ((tree, tree *, tree *));\n #ifdef BUFSIZ\n extern void print_lang_decl\t\tPARAMS ((FILE *, tree, int));\n extern void print_lang_type\t\tPARAMS ((FILE *, tree, int));\n@@ -2860,7 +2834,6 @@ extern int div_and_round_double\t\tPARAMS ((enum tree_code, int,\n /* In stmt.c */\n extern void emit_nop\t\t\tPARAMS ((void));\n extern void expand_computed_goto\tPARAMS ((tree));\n-extern struct rtx_def *label_rtx\tPARAMS ((tree));\n extern void expand_asm_operands\t\tPARAMS ((tree, tree, tree, tree, int,\n \t\t\t\t\t\t const char *, int));\n extern int any_pending_cleanups\t\tPARAMS ((int));"}]}