{"sha": "624e168838b4e0b8c9ba2533f517f1b779dc004d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI0ZTE2ODgzOGI0ZTBiOGM5YmEyNTMzZjUxN2YxYjc3OWRjMDA0ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T12:36:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T12:36:42Z"}, "message": "[multiple changes]\n\n2011-08-29  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch3.adb (Build_Record_Init_Proc.Build_Init_Procedure): Set\n\tException_Handlers to No_List instead of Empty_List in the case where\n\tthere are no handlers.\n\n2011-08-29  Tristan Gingold  <gingold@adacore.com>\n\n\t* gcc-interface/gigi.h (enum standard_datatypes): Add\n\tADT_reraise_zcx_decl\n\t(reraise_zcx_decl): New macro.\n\t* gcc-interface/trans.c (gnu_incoming_exc_ptr): New variable.\n\t(gigi): Set reraise_zcx_decl.\n\t(Exception_Handler_to_gnu_zcx): Save and restore gnu_incoming_exc_ptr.\n\t(gnat_to_gnu): Handle N_Raise_Statement.\n\nFrom-SVN: r178212", "tree": {"sha": "f7c5ca8db216291bd55022a059465e477bf6818e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7c5ca8db216291bd55022a059465e477bf6818e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/624e168838b4e0b8c9ba2533f517f1b779dc004d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/624e168838b4e0b8c9ba2533f517f1b779dc004d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/624e168838b4e0b8c9ba2533f517f1b779dc004d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/624e168838b4e0b8c9ba2533f517f1b779dc004d/comments", "author": null, "committer": null, "parents": [{"sha": "7134062aa9c1264d1dd9f1aca0a433f3586b79c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7134062aa9c1264d1dd9f1aca0a433f3586b79c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7134062aa9c1264d1dd9f1aca0a433f3586b79c9"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "f00b143bbf03b388f55176b050a71906337c2295", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624e168838b4e0b8c9ba2533f517f1b779dc004d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624e168838b4e0b8c9ba2533f517f1b779dc004d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=624e168838b4e0b8c9ba2533f517f1b779dc004d", "patch": "@@ -1,3 +1,19 @@\n+2011-08-29  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Record_Init_Proc.Build_Init_Procedure): Set\n+\tException_Handlers to No_List instead of Empty_List in the case where\n+\tthere are no handlers.\n+\n+2011-08-29  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* gcc-interface/gigi.h (enum standard_datatypes): Add\n+\tADT_reraise_zcx_decl\n+\t(reraise_zcx_decl): New macro.\n+\t* gcc-interface/trans.c (gnu_incoming_exc_ptr): New variable.\n+\t(gigi): Set reraise_zcx_decl.\n+\t(Exception_Handler_to_gnu_zcx): Save and restore gnu_incoming_exc_ptr.\n+\t(gnat_to_gnu): Handle N_Raise_Statement.\n+\n 2011-08-29  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch6.adb, exp_ch3.adb, s-stposu.adb, a-undesu.ads,"}, {"sha": "818653062f2bd3b6515d325485e1eb41357cb810", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624e168838b4e0b8c9ba2533f517f1b779dc004d/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624e168838b4e0b8c9ba2533f517f1b779dc004d/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=624e168838b4e0b8c9ba2533f517f1b779dc004d", "patch": "@@ -2616,7 +2616,7 @@ package body Exp_Ch3 is\n                      Make_Raise_Statement (Loc)))));\n             end;\n          else\n-            Set_Exception_Handlers (Handled_Stmt_Node, Empty_List);\n+            Set_Exception_Handlers (Handled_Stmt_Node, No_List);\n          end if;\n \n          Set_Handled_Statement_Sequence (Body_Node, Handled_Stmt_Node);"}, {"sha": "dbe2dc4393b6a4178c9e048a29449273a163b438", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624e168838b4e0b8c9ba2533f517f1b779dc004d/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624e168838b4e0b8c9ba2533f517f1b779dc004d/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=624e168838b4e0b8c9ba2533f517f1b779dc004d", "patch": "@@ -377,6 +377,7 @@ enum standard_datatypes\n   ADT_longjmp_decl,\n   ADT_update_setjmp_buf_decl,\n   ADT_raise_nodefer_decl,\n+  ADT_reraise_zcx_decl,\n   ADT_begin_handler_decl,\n   ADT_end_handler_decl,\n   ADT_others_decl,\n@@ -422,6 +423,7 @@ extern GTY(()) tree gnat_raise_decls_ext[(int) LAST_REASON_CODE + 1];\n #define longjmp_decl gnat_std_decls[(int) ADT_longjmp_decl]\n #define update_setjmp_buf_decl gnat_std_decls[(int) ADT_update_setjmp_buf_decl]\n #define raise_nodefer_decl gnat_std_decls[(int) ADT_raise_nodefer_decl]\n+#define reraise_zcx_decl gnat_std_decls[(int) ADT_reraise_zcx_decl]\n #define begin_handler_decl gnat_std_decls[(int) ADT_begin_handler_decl]\n #define others_decl gnat_std_decls[(int) ADT_others_decl]\n #define all_others_decl gnat_std_decls[(int) ADT_all_others_decl]"}, {"sha": "8e0ccd41701dc389e245e525f5ff48abee334cb4", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624e168838b4e0b8c9ba2533f517f1b779dc004d/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624e168838b4e0b8c9ba2533f517f1b779dc004d/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=624e168838b4e0b8c9ba2533f517f1b779dc004d", "patch": "@@ -165,6 +165,9 @@ static GTY(()) struct elab_info *elab_info_list;\n    are in an exception handler.  Not used in the zero-cost case.  */\n static GTY(()) VEC(tree,gc) *gnu_except_ptr_stack;\n \n+/* In ZCX case, current exception pointer.  Used to re-raise it.  */\n+static GTY(()) tree gnu_incoming_exc_ptr;\n+\n /* Stack for storing the current elaboration procedure decl.  */\n static GTY(()) VEC(tree,gc) *gnu_elab_proc_stack;\n \n@@ -448,6 +451,12 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \t\t\t   Empty);\n   DECL_IGNORED_P (end_handler_decl) = 1;\n \n+  reraise_zcx_decl\n+    = create_subprog_decl (get_identifier (\"__gnat_reraise_zcx\"), NULL_TREE,\n+\t\t\t   ftype, NULL_TREE, false, true, true, true, NULL,\n+\t\t\t   Empty);\n+  DECL_IGNORED_P (reraise_zcx_decl) = 1;\n+\n   /* If in no exception handlers mode, all raise statements are redirected to\n      __gnat_last_chance_handler.  No need to redefine raise_nodefer_decl since\n      this procedure will never be called in this mode.  */\n@@ -559,8 +568,8 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n     longest_float_type_node = TREE_TYPE (long_long_float_type);\n \n   /* Dummy objects to materialize \"others\" and \"all others\" in the exception\n-     tables.  These are exported by a-exexpr.adb, so see this unit for the\n-     types to use.  */\n+     tables.  These are exported by a-exexpr-gcc.adb, so see this unit for\n+     the types to use.  */\n   others_decl\n     = create_var_decl (get_identifier (\"OTHERS\"),\n \t\t       get_identifier (\"__gnat_others_value\"),\n@@ -3760,7 +3769,7 @@ Exception_Handler_to_gnu_zcx (Node_Id gnat_node)\n   tree gnu_expr;\n   tree gnu_etype;\n   tree gnu_current_exc_ptr;\n-  tree gnu_incoming_exc_ptr;\n+  tree prev_gnu_incoming_exc_ptr;\n   Node_Id gnat_temp;\n \n   /* We build a TREE_LIST of nodes representing what exception types this\n@@ -3832,6 +3841,7 @@ Exception_Handler_to_gnu_zcx (Node_Id gnat_node)\n   gnu_current_exc_ptr\n     = build_call_expr (built_in_decls [BUILT_IN_EH_POINTER],\n \t\t       1, integer_zero_node);\n+  prev_gnu_incoming_exc_ptr = gnu_incoming_exc_ptr;\n   gnu_incoming_exc_ptr = create_var_decl (get_identifier (\"EXPTR\"), NULL_TREE,\n \t\t\t\t\t  ptr_type_node, gnu_current_exc_ptr,\n \t\t\t\t\t  false, false, false, false,\n@@ -3846,6 +3856,8 @@ Exception_Handler_to_gnu_zcx (Node_Id gnat_node)\n   add_stmt_list (Statements (gnat_node));\n   gnat_poplevel ();\n \n+  gnu_incoming_exc_ptr = prev_gnu_incoming_exc_ptr;\n+\n   return build2 (CATCH_EXPR, void_type_node, gnu_etypes_list,\n \t\t end_stmt_group ());\n }\n@@ -5452,7 +5464,27 @@ gnat_to_gnu (Node_Id gnat_node)\n \tgnu_result = Exception_Handler_to_gnu_zcx (gnat_node);\n       else\n \tgcc_unreachable ();\n+      break;\n+\n+    case N_Raise_Statement:\n+      /* Only for reraise in back-end exceptions mode.  */\n+      gcc_assert (No (Name (gnat_node))\n+\t\t  && Exception_Mechanism == Back_End_Exceptions);\n+\n+      start_stmt_group ();\n+      gnat_pushlevel ();\n \n+      /* Clear the current exception pointer so that the occurrence won't be\n+\t deallocated.  */\n+      gnu_expr = create_var_decl (get_identifier (\"SAVED_EXPTR\"), NULL_TREE,\n+\t\t\t\t  ptr_type_node, gnu_incoming_exc_ptr,\n+\t\t\t\t  false, false, false, false, NULL, gnat_node);\n+\n+      add_stmt (build_binary_op (MODIFY_EXPR, NULL_TREE, gnu_incoming_exc_ptr,\n+\t\t\t\t convert (ptr_type_node, integer_zero_node)));\n+      add_stmt (build_call_1_expr (reraise_zcx_decl, gnu_expr));\n+      gnat_poplevel ();\n+      gnu_result = end_stmt_group ();\n       break;\n \n     case N_Push_Constraint_Error_Label:"}]}