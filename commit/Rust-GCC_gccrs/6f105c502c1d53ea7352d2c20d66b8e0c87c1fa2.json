{"sha": "6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYxMDVjNTAyYzFkNTNlYTczNTJkMmMyMGQ2NmI4ZTBjODdjMWZhMg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-02-02T16:56:12Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-02-02T16:56:12Z"}, "message": "[ARM/AArch64][testsuite] Add vmax, vmin, vhadd, vhsub and vrhadd tests.\n\n2015-02-02  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h\n\t(_ARM_FPSRC): Add DN and AHP fields.\n\t(clean_results): Force DN=1 on AArch64.\n\t* gcc.target/aarch64/advsimd-intrinsics/binary_op_no64.inc: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vhadd.c: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vhsub.c: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmax.c: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmin.c: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrhadd.c: New file.\n\nFrom-SVN: r220353", "tree": {"sha": "fb0ac660a81e767c1edb3e357716b7076c10d32f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb0ac660a81e767c1edb3e357716b7076c10d32f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2/comments", "author": null, "committer": null, "parents": [{"sha": "a436ab274e7fc8d5bd3eb752cabb208ef5986ea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a436ab274e7fc8d5bd3eb752cabb208ef5986ea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a436ab274e7fc8d5bd3eb752cabb208ef5986ea5"}], "stats": {"total": 366, "additions": 364, "deletions": 2}, "files": [{"sha": "1bb46b341829b4e5f442276a9fbec748c924cdfc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2", "patch": "@@ -1,3 +1,15 @@\n+2015-02-02  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h\n+\t(_ARM_FPSRC): Add DN and AHP fields.\n+\t(clean_results): Force DN=1 on AArch64.\n+\t* gcc.target/aarch64/advsimd-intrinsics/binary_op_no64.inc: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vhadd.c: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vhsub.c: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmax.c: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmin.c: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrhadd.c: New file.\n+\n 2015-02-02  Alan Modra  <amodra@gmail.com>\n \n \t* gcc.target/powerpc/cprophard.c: New."}, {"sha": "1742e9964181de4cd4abd813055531ecd38ba28b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h?ref=6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2", "patch": "@@ -235,7 +235,9 @@ extern ARRAY(expected, hfloat, 64, 2);\n \n typedef union {\n   struct {\n-    int _xxx:27;\n+    int _xxx:25;\n+    unsigned int DN:1;\n+    unsigned int AHP:1;\n     unsigned int QC:1;\n     int V:1;\n     int C:1;\n@@ -254,7 +256,9 @@ typedef union {\n     int C:1;\n     int V:1;\n     unsigned int QC:1;\n-    int _dnm:27;\n+    unsigned int AHP:1;\n+    unsigned int DN:1;\n+    int _dnm:25;\n   } b;\n   unsigned int word;\n } _ARM_FPSCR;\n@@ -387,6 +391,15 @@ static void clean_results (void)\n   CLEAN(result, poly, 8, 16);\n   CLEAN(result, poly, 16, 8);\n   CLEAN(result, float, 32, 4);\n+\n+#if defined(__aarch64__)\n+  /* On AArch64, make sure to return DefaultNaN to have the same\n+     results as on AArch32.  */\n+  _ARM_FPSCR _afpscr_for_dn;\n+  asm volatile (\"mrs %0,fpcr\" : \"=r\" (_afpscr_for_dn));\n+  _afpscr_for_dn.b.DN = 1;\n+  asm volatile (\"msr fpcr,%0\" : : \"r\" (_afpscr_for_dn));\n+#endif\n }\n \n "}, {"sha": "1eb9271b7f52aff96694f45a987c5368f2c9f95d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/binary_op_no64.inc", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_op_no64.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_op_no64.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_op_no64.inc?ref=6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2", "patch": "@@ -0,0 +1,134 @@\n+/* Can't use the standard binary_op.inc template because vmax has no\n+   64 bits variant.  */\n+\n+#include <math.h>\n+\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+void FNNAME (INSN_NAME) (void)\n+{\n+  int i;\n+\n+  /* Basic test: y=vmax(x,x), then store the result.  */\n+#define TEST_BINARY_OP1(INSN, Q, T1, T2, W, N)\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =                                      \\\n+    INSN##Q##_##T2##W(VECT_VAR(vector, T1, W, N),                       \\\n+                      VECT_VAR(vector2, T1, W, N));                     \\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector_res, T1, W, N))\n+\n+#define TEST_BINARY_OP(INSN, Q, T1, T2, W, N)   \\\n+  TEST_BINARY_OP1(INSN, Q, T1, T2, W, N)        \\\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+  DECL_VARIABLE_ALL_VARIANTS(vector2);\n+  DECL_VARIABLE_ALL_VARIANTS(vector_res);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+#ifdef HAS_FLOAT_VARIANT\n+  VLOAD(vector, buffer, , float, f, 32, 2);\n+  VLOAD(vector, buffer, q, float, f, 32, 4);\n+#endif\n+\n+  /* Choose init value arbitrarily, will be used as comparison value.  */\n+  VDUP(vector2, , int, s, 8, 8, -13);\n+  VDUP(vector2, , int, s, 16, 4, -14);\n+  VDUP(vector2, , int, s, 32, 2, -16);\n+  VDUP(vector2, , uint, u, 8, 8, 0xf3);\n+  VDUP(vector2, , uint, u, 16, 4, 0xfff1);\n+  VDUP(vector2, , uint, u, 32, 2, 0xfffffff0);\n+  VDUP(vector2, q, int, s, 8, 16, -12);\n+  VDUP(vector2, q, int, s, 16, 8, -13);\n+  VDUP(vector2, q, int, s, 32, 4, -15);\n+  VDUP(vector2, q, uint, u, 8, 16, 0xf9);\n+  VDUP(vector2, q, uint, u, 16, 8, 0xfff2);\n+  VDUP(vector2, q, uint, u, 32, 4, 0xfffffff1);\n+#ifdef HAS_FLOAT_VARIANT\n+  VDUP(vector2, , float, f, 32, 2, -15.5f);\n+  VDUP(vector2, q, float, f, 32, 4, -14.5f);\n+#endif\n+\n+#ifdef HAS_FLOAT_VARIANT\n+#define FLOAT_VARIANT(MACRO, VAR)\t\t\t\\\n+  MACRO(VAR, , float, f, 32, 2);\t\t\t\\\n+  MACRO(VAR, q, float, f, 32, 4)\n+#else\n+#define FLOAT_VARIANT(MACRO, VAR)\n+#endif\n+\n+#define TEST_MACRO_NO64BIT_VARIANT_1_5(MACRO, VAR)\t\\\n+  MACRO(VAR, , int, s, 8, 8);\t\t\t\t\\\n+  MACRO(VAR, , int, s, 16, 4);\t\t\t\t\\\n+  MACRO(VAR, , int, s, 32, 2);\t\t\t\t\\\n+  MACRO(VAR, , uint, u, 8, 8);\t\t\t\t\\\n+  MACRO(VAR, , uint, u, 16, 4);\t\t\t\t\\\n+  MACRO(VAR, , uint, u, 32, 2);\t\t\t\t\\\n+  MACRO(VAR, q, int, s, 8, 16);\t\t\t\t\\\n+  MACRO(VAR, q, int, s, 16, 8);\t\t\t\t\\\n+  MACRO(VAR, q, int, s, 32, 4);\t\t\t\t\\\n+  MACRO(VAR, q, uint, u, 8, 16);\t\t\t\\\n+  MACRO(VAR, q, uint, u, 16, 8);\t\t\t\\\n+  MACRO(VAR, q, uint, u, 32, 4);\t\t\t\\\n+  FLOAT_VARIANT(MACRO, VAR)\n+\n+  /* Apply a binary operator named INSN_NAME.  */\n+  TEST_MACRO_NO64BIT_VARIANT_1_5(TEST_BINARY_OP, INSN_NAME);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n+\n+#ifdef HAS_FLOAT_VARIANT\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected, \"\");\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected, \"\");\n+\n+  /* Extra FP tests with special values (NaN, ....)  */\n+  VDUP(vector, q, float, f, 32, 4, 1.0f);\n+  VDUP(vector2, q, float, f, 32, 4, NAN);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 32, 4);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_nan, \" FP special (NaN)\");\n+\n+  VDUP(vector, q, float, f, 32, 4, -NAN);\n+  VDUP(vector2, q, float, f, 32, 4, 1.0f);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 32, 4);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_mnan, \" FP special (-NaN)\");\n+\n+  VDUP(vector, q, float, f, 32, 4, 1.0f);\n+  VDUP(vector2, q, float, f, 32, 4, HUGE_VALF);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 32, 4);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_inf, \" FP special (inf)\");\n+\n+  VDUP(vector, q, float, f, 32, 4, -HUGE_VALF);\n+  VDUP(vector2, q, float, f, 32, 4, 1.0f);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 32, 4);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_minf, \" FP special (-inf)\");\n+\n+  VDUP(vector, q, float, f, 32, 4, 0.0f);\n+  VDUP(vector2, q, float, f, 32, 4, -0.0f);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 32, 4);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_zero1, \" FP special (-0.0)\");\n+\n+  VDUP(vector, q, float, f, 32, 4, -0.0f);\n+  VDUP(vector2, q, float, f, 32, 4, 0.0f);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 32, 4);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_zero2, \" FP special (-0.0)\");\n+#endif\n+}\n+\n+int main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+  return 0;\n+}"}, {"sha": "d8a09ca294eddcda9cc0b48db31f425e3a641c25", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vhadd.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvhadd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvhadd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvhadd.c?ref=6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2", "patch": "@@ -0,0 +1,34 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vhadd\n+#define TEST_MSG \"VHADD/VHADDQ\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf1, 0xf2, 0xf2, 0xf3,\n+\t\t\t\t       0xf3, 0xf4, 0xf4, 0xf5 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfff1, 0xfff1, 0xfff2, 0xfff2 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffff0, 0xfffffff0 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xf1, 0xf2, 0xf2, 0xf3,\n+\t\t\t\t\t0xf3, 0xf4, 0xf4, 0xf5 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfff0, 0xfff1, 0xfff1, 0xfff2 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff0, 0xfffffff0 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xf2, 0xf2, 0xf3, 0xf3,\n+\t\t\t\t\t0xf4, 0xf4, 0xf5, 0xf5,\n+\t\t\t\t\t0xf6, 0xf6, 0xf7, 0xf7,\n+\t\t\t\t\t0xf8, 0xf8, 0xf9, 0xf9 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xfff1, 0xfff2, 0xfff2, 0xfff3,\n+\t\t\t\t\t0xfff3, 0xfff4, 0xfff4, 0xfff5 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t0xfffffff1, 0xfffffff2 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xf4, 0xf5, 0xf5, 0xf6,\n+\t\t\t\t\t 0xf6, 0xf7, 0xf7, 0xf8,\n+\t\t\t\t\t 0xf8, 0xf9, 0xf9, 0xfa,\n+\t\t\t\t\t 0xfa, 0xfb, 0xfb, 0xfc };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfff1, 0xfff1, 0xfff2, 0xfff2,\n+\t\t\t\t\t 0xfff3, 0xfff3, 0xfff4, 0xfff4 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t 0xfffffff1, 0xfffffff2 };\n+\n+#include \"binary_op_no64.inc\""}, {"sha": "0fe808028e4f5a938e0f62460d235e2364c0d77c", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vhsub.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvhsub.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvhsub.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvhsub.c?ref=6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2", "patch": "@@ -0,0 +1,32 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vhsub\n+#define TEST_MSG \"VHSUB/VHSUBQ\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xfe, 0xff, 0xff, 0x0,\n+\t\t\t\t       0x0, 0x1, 0x1, 0x2 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xffff, 0xffff, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xfe, 0xff, 0xff, 0x0,\n+\t\t\t\t\t0x0, 0x1, 0x1, 0x2 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xffff, 0x0, 0x0, 0x1 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xfe, 0xfe, 0xff, 0xff,\n+\t\t\t\t\t0x0, 0x0, 0x1, 0x1,\n+\t\t\t\t\t0x2, 0x2, 0x3, 0x3,\n+\t\t\t\t\t0x4, 0x4, 0x5, 0x5 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xfffe, 0xffff, 0xffff, 0x0,\n+\t\t\t\t\t0x0, 0x1, 0x1, 0x2 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xffffffff, 0x0, 0x0, 0x1 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xfb, 0xfc, 0xfc, 0xfd,\n+\t\t\t\t\t 0xfd, 0xfe, 0xfe, 0xff,\n+\t\t\t\t\t 0xff, 0x0, 0x0, 0x1,\n+\t\t\t\t\t 0x1, 0x2, 0x2, 0x3 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xffff, 0xffff, 0x0, 0x0,\n+\t\t\t\t\t 0x1, 0x1, 0x2, 0x2 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xffffffff, 0x0, 0x0, 0x1 };\n+\n+#include \"binary_op_no64.inc\""}, {"sha": "830603dff6a328b919c7eced364cab3cbbeaad3f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmax.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmax.c?ref=6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2", "patch": "@@ -0,0 +1,51 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vmax\n+#define TEST_MSG \"VMAX/VMAXQ\"\n+\n+#define HAS_FLOAT_VARIANT\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf3, 0xf3, 0xf3, 0xf3,\n+\t\t\t\t       0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfff2, 0xfff2, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xf3, 0xf3, 0xf3, 0xf3,\n+\t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfff1, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1780000, 0xc1700000 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xf4, 0xf4, 0xf4, 0xf4,\n+\t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xfff3, 0xfff3, 0xfff3, 0xfff3,\n+\t\t\t\t\t0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xfffffff1, 0xfffffff1,\n+\t\t\t\t\t0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xf9, 0xf9, 0xf9, 0xf9,\n+\t\t\t\t\t 0xf9, 0xf9, 0xf9, 0xf9,\n+\t\t\t\t\t 0xf9, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t 0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfff2, 0xfff2, 0xfff2, 0xfff3,\n+\t\t\t\t\t 0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfffffff1, 0xfffffff1,\n+\t\t\t\t\t 0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc1680000, 0xc1680000,\n+\t\t\t\t\t   0xc1600000, 0xc1500000 };\n+\n+/* Expected results with special FP values.  */\n+VECT_VAR_DECL(expected_nan,hfloat,32,4) [] = { 0x7fc00000, 0x7fc00000,\n+\t\t\t\t\t       0x7fc00000, 0x7fc00000 };\n+VECT_VAR_DECL(expected_mnan,hfloat,32,4) [] = { 0x7fc00000, 0x7fc00000,\n+\t\t\t\t\t\t0x7fc00000, 0x7fc00000 };\n+VECT_VAR_DECL(expected_inf,hfloat,32,4) [] = { 0x7f800000, 0x7f800000,\n+\t\t\t\t\t       0x7f800000, 0x7f800000 };\n+VECT_VAR_DECL(expected_minf,hfloat,32,4) [] = { 0x3f800000, 0x3f800000,\n+\t\t\t\t\t\t0x3f800000, 0x3f800000 };\n+VECT_VAR_DECL(expected_zero1,hfloat,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_zero2,hfloat,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+\n+#include \"binary_op_no64.inc\""}, {"sha": "8ad2703c3db661e0677e48eb7a2d60ba58c9cefe", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmin.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmin.c?ref=6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2", "patch": "@@ -0,0 +1,52 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vmin\n+#define TEST_MSG \"VMIN/VMINQ\"\n+\n+#define HAS_FLOAT_VARIANT\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t       0xf3, 0xf3, 0xf3, 0xf3 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff2 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffff0, 0xfffffff0 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t0xf3, 0xf3, 0xf3, 0xf3 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfff0, 0xfff1, 0xfff1, 0xfff1 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff0, 0xfffffff0 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1800000, 0xc1780000 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t0xf4, 0xf4, 0xf4, 0xf4,\n+\t\t\t\t\t0xf4, 0xf4, 0xf4, 0xf4,\n+\t\t\t\t\t0xf4, 0xf4, 0xf4, 0xf4 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t0xfff3, 0xfff3, 0xfff3, 0xfff3 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t0xfffffff1, 0xfffffff1 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t 0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t 0xf8, 0xf9, 0xf9, 0xf9,\n+\t\t\t\t\t 0xf9, 0xf9, 0xf9, 0xf9 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff2,\n+\t\t\t\t\t 0xfff2, 0xfff2, 0xfff2, 0xfff2 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t 0xfffffff1, 0xfffffff1 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n+\t\t\t\t\t   0xc1680000, 0xc1680000 };\n+/* Expected results with special FP values.  */\n+VECT_VAR_DECL(expected_nan,hfloat,32,4) [] = { 0x7fc00000, 0x7fc00000,\n+\t\t\t\t\t       0x7fc00000, 0x7fc00000 };\n+VECT_VAR_DECL(expected_mnan,hfloat,32,4) [] = { 0x7fc00000, 0x7fc00000,\n+\t\t\t\t\t\t0x7fc00000, 0x7fc00000 };\n+VECT_VAR_DECL(expected_inf,hfloat,32,4) [] = { 0x3f800000, 0x3f800000,\n+\t\t\t\t\t       0x3f800000, 0x3f800000 };\n+VECT_VAR_DECL(expected_minf,hfloat,32,4) [] = { 0xff800000, 0xff800000,\n+\t\t\t\t\t\t0xff800000, 0xff800000 };\n+VECT_VAR_DECL(expected_zero1,hfloat,32,4) [] = { 0x80000000, 0x80000000,\n+\t\t\t\t\t\t 0x80000000, 0x80000000 };\n+VECT_VAR_DECL(expected_zero2,hfloat,32,4) [] = { 0x80000000, 0x80000000,\n+\t\t\t\t\t\t 0x80000000, 0x80000000 };\n+\n+#include \"binary_op_no64.inc\""}, {"sha": "eb820026ae7e709dc51244f2069f675c9fcb0d08", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrhadd.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrhadd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrhadd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrhadd.c?ref=6f105c502c1d53ea7352d2c20d66b8e0c87c1fa2", "patch": "@@ -0,0 +1,34 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vrhadd\n+#define TEST_MSG \"VRHADD/VRHADDQ\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf2, 0xf2, 0xf3, 0xf3,\n+\t\t\t\t       0xf4, 0xf4, 0xf5, 0xf5 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfff1, 0xfff2, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xf2, 0xf2, 0xf3, 0xf3,\n+\t\t\t\t\t0xf4, 0xf4, 0xf5, 0xf5 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfff1, 0xfff1, 0xfff2, 0xfff2 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xf2, 0xf3, 0xf3, 0xf4,\n+\t\t\t\t\t0xf4, 0xf5, 0xf5, 0xf6,\n+\t\t\t\t\t0xf6, 0xf7, 0xf7, 0xf8,\n+\t\t\t\t\t0xf8, 0xf9, 0xf9, 0xfa };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xfff2, 0xfff2, 0xfff3, 0xfff3,\n+\t\t\t\t\t0xfff4, 0xfff4, 0xfff5, 0xfff5 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xfffffff1, 0xfffffff1,\n+\t\t\t\t\t0xfffffff2, 0xfffffff2 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xf5, 0xf5, 0xf6, 0xf6,\n+\t\t\t\t\t 0xf7, 0xf7, 0xf8, 0xf8,\n+\t\t\t\t\t 0xf9, 0xf9, 0xfa, 0xfa,\n+\t\t\t\t\t 0xfb, 0xfb, 0xfc, 0xfc };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfff1, 0xfff2, 0xfff2, 0xfff3,\n+\t\t\t\t\t 0xfff3, 0xfff4, 0xfff4, 0xfff5 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfffffff1, 0xfffffff1,\n+\t\t\t\t\t 0xfffffff2, 0xfffffff2 };\n+\n+#include \"binary_op_no64.inc\""}]}