{"sha": "dede82f21ba8b569ad0f5538a0c00216ea71d2b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVkZTgyZjIxYmE4YjU2OWFkMGY1NTM4YTBjMDAyMTZlYTcxZDJiNA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2019-10-14T06:43:03Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2019-10-14T06:43:03Z"}, "message": "Normalize unsigned ~[0,0] into [1,MAX].\n\nFrom-SVN: r276949", "tree": {"sha": "92959d5a6425c96a01ed74d448c3ba4bf9128c06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92959d5a6425c96a01ed74d448c3ba4bf9128c06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dede82f21ba8b569ad0f5538a0c00216ea71d2b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dede82f21ba8b569ad0f5538a0c00216ea71d2b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dede82f21ba8b569ad0f5538a0c00216ea71d2b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dede82f21ba8b569ad0f5538a0c00216ea71d2b4/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "103197a183446a81d97a6ef975cc7095a64c8c4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/103197a183446a81d97a6ef975cc7095a64c8c4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/103197a183446a81d97a6ef975cc7095a64c8c4b"}], "stats": {"total": 49, "additions": 34, "deletions": 15}, "files": [{"sha": "cf359bf58351bb9ad52c44686e4b18e2527edb58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dede82f21ba8b569ad0f5538a0c00216ea71d2b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dede82f21ba8b569ad0f5538a0c00216ea71d2b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dede82f21ba8b569ad0f5538a0c00216ea71d2b4", "patch": "@@ -1,3 +1,10 @@\n+2019-10-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-vrp.c (value_range_base::set): Normalize unsigned ~[0,0]\n+\tinto [1,MAX].\n+\t* tree-vrp.h (value_range_base::nonzero_p): Adjust for unsigned\n+\tnon-zero being represented as [1,MAX].\n+\n 2019-10-14  Xiong Hu Luo  <luoxhu@linux.ibm.com>\n \n \t* tree-sra.c (dump_access): Add missing braces."}, {"sha": "fbc3d27f7a3014ac8ca761c3119cd8b92e6fb5ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dede82f21ba8b569ad0f5538a0c00216ea71d2b4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dede82f21ba8b569ad0f5538a0c00216ea71d2b4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dede82f21ba8b569ad0f5538a0c00216ea71d2b4", "patch": "@@ -1,3 +1,8 @@\n+2019-10-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/evrp4.c: Adjust for unsigned non-zero being\n+\t[1,MAX].\n+\n 2019-10-13  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* gcc.target/i386/indirect-thunk-1.c: Allow 'l' or 'L' in"}, {"sha": "ba2f6b9b430ada4c442d48375f8c955df0d15c47", "filename": "gcc/testsuite/gcc.dg/tree-ssa/evrp4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dede82f21ba8b569ad0f5538a0c00216ea71d2b4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dede82f21ba8b569ad0f5538a0c00216ea71d2b4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp4.c?ref=dede82f21ba8b569ad0f5538a0c00216ea71d2b4", "patch": "@@ -17,4 +17,4 @@ int bar (struct st *s)\n   foo (&s->a);\n }\n \n-/* { dg-final { scan-tree-dump \"\\~\\\\\\[0B, 0B\\\\\\]\" \"evrp\" } } */\n+/* { dg-final { scan-tree-dump \"\\\\\\[1B, -1B\\\\\\]\" \"evrp\" } } */"}, {"sha": "cffa05083400bb2539fed72eed7c695b5c8e6949", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dede82f21ba8b569ad0f5538a0c00216ea71d2b4/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dede82f21ba8b569ad0f5538a0c00216ea71d2b4/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=dede82f21ba8b569ad0f5538a0c00216ea71d2b4", "patch": "@@ -800,13 +800,13 @@ value_range_base::set (enum value_range_kind kind, tree min, tree max)\n \t  kind = VR_RANGE;\n \t}\n       else if (is_min\n-\t       /* As a special exception preserve non-null ranges.  */\n-\t       && !(TYPE_UNSIGNED (TREE_TYPE (min))\n-\t\t    && integer_zerop (max)))\n+\t       /* Allow non-zero pointers to be normalized to [1,MAX].  */\n+\t       || (POINTER_TYPE_P (TREE_TYPE (min))\n+\t\t   && integer_zerop (min)))\n         {\n \t  tree one = build_int_cst (TREE_TYPE (max), 1);\n \t  min = int_const_binop (PLUS_EXPR, max, one);\n-\t  max = vrp_val_max (TREE_TYPE (max));\n+\t  max = vrp_val_max (TREE_TYPE (max), true);\n \t  kind = VR_RANGE;\n         }\n       else if (is_max)"}, {"sha": "4bfdfeb8f7905e2273a01afa0e121a510f216180", "filename": "gcc/tree-vrp.h", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dede82f21ba8b569ad0f5538a0c00216ea71d2b4/gcc%2Ftree-vrp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dede82f21ba8b569ad0f5538a0c00216ea71d2b4/gcc%2Ftree-vrp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.h?ref=dede82f21ba8b569ad0f5538a0c00216ea71d2b4", "patch": "@@ -245,16 +245,6 @@ value_range_base::zero_p () const\n \t  && integer_zerop (m_max));\n }\n \n-/* Return TRUE if range is nonzero.  */\n-\n-inline bool\n-value_range_base::nonzero_p () const\n-{\n-  return (m_kind == VR_ANTI_RANGE\n-\t  && integer_zerop (m_min)\n-\t  && integer_zerop (m_max));\n-}\n-\n extern void dump_value_range (FILE *, const value_range *);\n extern void dump_value_range (FILE *, const value_range_base *);\n \n@@ -322,6 +312,23 @@ extern tree get_single_symbol (tree, bool *, tree *);\n extern void maybe_set_nonzero_bits (edge, tree);\n extern value_range_kind determine_value_range (tree, wide_int *, wide_int *);\n \n+/* Return TRUE if range is nonzero.  */\n+\n+inline bool\n+value_range_base::nonzero_p () const\n+{\n+  if (m_kind == VR_ANTI_RANGE\n+      && !TYPE_UNSIGNED (type ())\n+      && integer_zerop (m_min)\n+      && integer_zerop (m_max))\n+    return true;\n+\n+  return (m_kind == VR_RANGE\n+\t  && TYPE_UNSIGNED (type ())\n+\t  && integer_onep (m_min)\n+\t  && vrp_val_is_max (m_max, true));\n+}\n+\n /* Return TRUE if *VR includes the value zero.  */\n \n inline bool"}]}