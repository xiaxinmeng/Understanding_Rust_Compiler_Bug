{"sha": "9f9000d17793db4e2e323ff1f03f3462c2aab75f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY5MDAwZDE3NzkzZGI0ZTJlMzIzZmYxZjAzZjM0NjJjMmFhYjc1Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-07-07T21:48:01Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-07-07T21:48:01Z"}, "message": "re PR libstdc++/16401 (ostringstream in gcc 3.4.x very slow for big data)\n\n2004-07-07  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/16401\n\t* include/bits/sstream.tcc (overflow): When reallocating _M_string\n\tuse an exponential grow policy.\n\t* testsuite/27_io/basic_stringbuf/overflow/char/1.cc: New.\n\t* testsuite/performance/27_io/stringbuf_overflow.cc: New.\n\nFrom-SVN: r84235", "tree": {"sha": "ada7289afa96cb40c16f8be542b8129e99b4a7a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ada7289afa96cb40c16f8be542b8129e99b4a7a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f9000d17793db4e2e323ff1f03f3462c2aab75f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f9000d17793db4e2e323ff1f03f3462c2aab75f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f9000d17793db4e2e323ff1f03f3462c2aab75f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f9000d17793db4e2e323ff1f03f3462c2aab75f/comments", "author": null, "committer": null, "parents": [{"sha": "f4f58d94866e6462e143f6f2b436d90085d92a32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4f58d94866e6462e143f6f2b436d90085d92a32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4f58d94866e6462e143f6f2b436d90085d92a32"}], "stats": {"total": 147, "additions": 137, "deletions": 10}, "files": [{"sha": "5d349d93ea7513ff3898008b5d7a996eb5ab18a6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9000d17793db4e2e323ff1f03f3462c2aab75f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9000d17793db4e2e323ff1f03f3462c2aab75f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9f9000d17793db4e2e323ff1f03f3462c2aab75f", "patch": "@@ -1,3 +1,11 @@\n+2004-07-07  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/16401\n+\t* include/bits/sstream.tcc (overflow): When reallocating _M_string\n+\tuse an exponential grow policy.\n+\t* testsuite/27_io/basic_stringbuf/overflow/char/1.cc: New.\n+\t* testsuite/performance/27_io/stringbuf_overflow.cc: New.\n+\n 2004-07-06  Anssi Hannula  <anssi.hannula@mbnet.fi>\n \n \tPR libstdc++/15928"}, {"sha": "04cd6ec92a29d8245749cbcd8ae36861eebf824b", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9000d17793db4e2e323ff1f03f3462c2aab75f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9000d17793db4e2e323ff1f03f3462c2aab75f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=9f9000d17793db4e2e323ff1f03f3462c2aab75f", "patch": "@@ -83,23 +83,25 @@ namespace std\n       if (__builtin_expect(__testeof, false))\n \treturn traits_type::not_eof(__c);\n \n-      // NB: Start ostringstream buffers at 512 chars. This is an\n-      // experimental value (pronounced \"arbitrary\" in some of the\n-      // hipper english-speaking countries), and can be changed to\n-      // suit particular needs.\n-      const __size_type __len = std::max(__size_type(_M_string.capacity() + 1),\n-\t\t\t\t\t __size_type(512));\n+      const __size_type __capacity = _M_string.capacity();\n+      const __size_type __max_size = _M_string.max_size();\n       const bool __testput = this->pptr() < this->epptr();\n-      if (__builtin_expect(!__testput && __len > _M_string.max_size(), false))\n+      if (__builtin_expect(!__testput && __capacity == __max_size, false))\n \treturn traits_type::eof();\n \n       // Try to append __c into output sequence in one of two ways.\n       // Order these tests done in is unspecified by the standard.\n       if (!__testput)\n \t{\n-\t  // In virtue of DR 169 (TC) we are allowed to grow more than\n-\t  // one char. That's easy to implement thanks to the exponential\n-\t  // growth policy builtin into basic_string.\n+\t  // NB: Start ostringstream buffers at 512 chars. This is an\n+\t  // experimental value (pronounced \"arbitrary\" in some of the\n+\t  // hipper english-speaking countries), and can be changed to\n+\t  // suit particular needs.\n+\t  // Then, in virtue of DR 169 (TC) we are allowed to grow more\n+\t  // than one char.\n+\t  const __size_type __opt_len = std::max(__size_type(2 * __capacity),\n+\t\t\t\t\t\t __size_type(512));\n+\t  const __size_type __len = std::min(__opt_len, __max_size);\n \t  __string_type __tmp;\n \t  __tmp.reserve(__len);\n \t  __tmp.assign(_M_string.data(), this->epptr() - this->pbase());"}, {"sha": "d1608649b80f37e77e8f081ca3d7923bedd133a0", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/overflow/char/1.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9000d17793db4e2e323ff1f03f3462c2aab75f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9000d17793db4e2e323ff1f03f3462c2aab75f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fchar%2F1.cc?ref=9f9000d17793db4e2e323ff1f03f3462c2aab75f", "patch": "@@ -0,0 +1,57 @@\n+// 2004-07-07  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3 basic_stringbuf overridden virtual functions.\n+\n+#include <sstream>\n+#include <cstdlib>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+string\n+data(unsigned len)\n+{\n+  string ret;\n+  for (unsigned i = 0; i < len; ++i)\n+    ret.push_back('a' + rand() % 26);\n+  return ret;\n+}\n+\n+void\n+test01(unsigned iter)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  for (unsigned n = 1; n <= iter; n *= 10)\n+    {\n+      const string str = data(n);\n+      stringbuf sstr;\n+      for (unsigned i = 0; i < n; ++i)\n+\tsstr.sputc(str[i]);\n+      VERIFY( str == sstr.str() );\n+    }\n+}\n+\n+int main()\n+{\n+  test01(10000000);\n+  return 0;\n+}"}, {"sha": "21b53625c673c3eb59a0f9604364064b82a76459", "filename": "libstdc++-v3/testsuite/performance/27_io/stringbuf_overflow.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9000d17793db4e2e323ff1f03f3462c2aab75f/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F27_io%2Fstringbuf_overflow.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9000d17793db4e2e323ff1f03f3462c2aab75f/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F27_io%2Fstringbuf_overflow.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F27_io%2Fstringbuf_overflow.cc?ref=9f9000d17793db4e2e323ff1f03f3462c2aab75f", "patch": "@@ -0,0 +1,60 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <sstream>\n+#include <testsuite_performance.h>\n+\n+// libstdc++/16401 ostringstream in gcc 3.4.x very slow for big data\n+void test01()\n+{\n+  using namespace std;\n+  using namespace __gnu_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+\n+  for(unsigned n = 10000; n <= 10000000; n *= 10)\n+    {\n+      ostringstream oss;\n+      oss << \"size = \" << n; \n+\n+      ostringstream str;\n+      start_counters(time, resource);  \n+      for(unsigned i = 0; i < n; ++i)\n+\tstr << 'a';\n+      stop_counters(time, resource);\n+\n+      report_performance(__FILE__, oss.str(), time, resource);\n+      clear_counters(time, resource);\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}