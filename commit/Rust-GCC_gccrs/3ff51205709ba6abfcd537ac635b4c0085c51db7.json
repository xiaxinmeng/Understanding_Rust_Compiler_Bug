{"sha": "3ff51205709ba6abfcd537ac635b4c0085c51db7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZmNTEyMDU3MDliYTZhYmZjZDUzN2FjNjM1YjRjMDA4NWM1MWRiNw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2001-01-15T22:45:32Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2001-01-15T22:45:32Z"}, "message": "new option to disable guessing of branch prediction\n\nFrom-SVN: r39052", "tree": {"sha": "23385eb6895de7d47672c7ceb1816b55800119ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23385eb6895de7d47672c7ceb1816b55800119ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ff51205709ba6abfcd537ac635b4c0085c51db7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ff51205709ba6abfcd537ac635b4c0085c51db7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ff51205709ba6abfcd537ac635b4c0085c51db7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ff51205709ba6abfcd537ac635b4c0085c51db7/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3cf96b52a1ff56ba9fe091fb3d19e4e86aa8c27c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cf96b52a1ff56ba9fe091fb3d19e4e86aa8c27c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cf96b52a1ff56ba9fe091fb3d19e4e86aa8c27c"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "1c3f69896ae93155f99a0657099f5033c12060ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff51205709ba6abfcd537ac635b4c0085c51db7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff51205709ba6abfcd537ac635b4c0085c51db7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ff51205709ba6abfcd537ac635b4c0085c51db7", "patch": "@@ -1,3 +1,13 @@\n+2001-01-12  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* toplev.c (flag_guess_branch_prob): New.\n+\t(f_options): Add guess-branch-probability option.\n+\t(rest_of_decl_compilation): Only estimate branch probability if\n+\tflag set.\n+\t(main): set flag_guess_branch_prob.\n+\n+\t* flags.h (flag_guess_branch_prob): New.\n+\n 2001-01-15  DJ Delorie  <dj@redhat.com>\n \n \t* gcc.texi (Makefile): Add documentation for Makefile targets."}, {"sha": "99678ba5755449a52158647811675434924b8724", "filename": "gcc/flags.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff51205709ba6abfcd537ac635b4c0085c51db7/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff51205709ba6abfcd537ac635b4c0085c51db7/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=3ff51205709ba6abfcd537ac635b4c0085c51db7", "patch": "@@ -531,6 +531,9 @@ extern int flag_instrument_function_entry_exit;\n /* Perform a peephole pass before sched2. */\n extern int flag_peephole2;\n \n+/* Try to guess branch probablities.  */\n+extern int flag_guess_branch_prob;\n+\n /* -fbounded-pointers causes gcc to compile pointers as composite\n    objects occupying three words: the pointer value, the base address\n    of the referent object, and the address immediately beyond the end"}, {"sha": "513436176510ff468d68bfc6ceb151c9fdd0fb2c", "filename": "gcc/toplev.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff51205709ba6abfcd537ac635b4c0085c51db7/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff51205709ba6abfcd537ac635b4c0085c51db7/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=3ff51205709ba6abfcd537ac635b4c0085c51db7", "patch": "@@ -868,6 +868,9 @@ int flag_no_ident = 0;\n /* This will perform a peephole pass before sched2.  */\n int flag_peephole2 = 0;\n \n+/* This will try to guess branch probabilities.  */\n+int flag_guess_branch_prob = 0;\n+\n /* -fbounded-pointers causes gcc to compile pointers as composite\n    objects occupying three words: the pointer value, the base address\n    of the referent object, and the address immediately beyond the end\n@@ -1136,6 +1139,8 @@ lang_independent_options f_options[] =\n    \"Process #ident directives\"},\n   { \"peephole2\", &flag_peephole2, 1,\n     \"Enables an rtl peephole pass run before sched2\" },\n+  { \"guess-branch-probability\", &flag_guess_branch_prob, 1,\n+    \"Enables guessing of branch probabilities\" },\n   {\"math-errno\", &flag_errno_math, 1,\n    \"Set errno after built-in math functions\"},\n   {\"bounded-pointers\", &flag_bounded_pointers, 1,\n@@ -3253,7 +3258,8 @@ rest_of_compilation (decl)\n       flow_loops_find (&loops, LOOP_TREE);\n \n       /* Estimate using heuristics if no profiling info is available.  */\n-      estimate_probability (&loops);\n+      if (flag_guess_branch_prob)\n+\testimate_probability (&loops);\n \n       if (rtl_dump_file)\n \tflow_loops_dump (&loops, rtl_dump_file, NULL, 0);\n@@ -4636,6 +4642,7 @@ main (argc, argv)\n #ifdef CAN_DEBUG_WITHOUT_FP\n       flag_omit_frame_pointer = 1;\n #endif\n+      flag_guess_branch_prob = 1;\n     }\n \n   if (optimize >= 2)"}]}