{"sha": "154ae7d4e921d704118d6a16ee5cc2a10b9047da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU0YWU3ZDRlOTIxZDcwNDExOGQ2YTE2ZWU1Y2MyYTEwYjkwNDdkYQ==", "commit": {"author": {"name": "Fei Yang", "email": "felix.yang@huawei.com", "date": "2020-04-22T17:24:59Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-04-22T17:24:59Z"}, "message": "aarch64: unexpected result with -mgeneral-regs-only and sve [PR94678]\n\nAs the two testcases for PR94678 show, -mgeneral-regs-only is handled\nproperly with SVE.  We should issue an error message instead of expanding\nSVE builtin funtions when -mgeneral-regs-only option is specified.\n\nThe middle end should never try to use vector patterns when the vector\nmodes have been disabled by !have_regs_of_mode.  But it's still wrong\nfor the target to provide patterns that would inevitably lead to spill\nfailure due to lack of registers.  So we should also add check for\n!TARGET_GENERAL_REGS_ONLY in TARGET_SVE and other SVE related macros.\n\n2020-04-22  Felix Yang  <felix.yang@huawei.com>\n\ngcc/\n\tPR target/94678\n\t* config/aarch64/aarch64.h (TARGET_SVE):\n\tAdd && !TARGET_GENERAL_REGS_ONLY.\n\t(TARGET_SVE2): Add && TARGET_SVE.\n\t(TARGET_SVE2_AES, TARGET_SVE2_BITPERM, TARGET_SVE2_SHA3,\n\tTARGET_SVE2_SM4): Add && TARGET_SVE2.\n\t* config/aarch64/aarch64-sve-builtins.h\n\t(sve_switcher::m_old_general_regs_only): New member.\n\t* config/aarch64/aarch64-sve-builtins.cc (check_required_registers):\n\tNew function.\n\t(reported_missing_registers_p): New variable.\n\t(check_required_extensions): Call check_required_registers before\n\treturn if all required extenstions are present.\n\t(sve_switcher::sve_switcher): Save TARGET_GENERAL_REGS_ONLY in\n\tm_old_general_regs_only and clear MASK_GENERAL_REGS_ONLY in\n\tglobal_options.x_target_flags.\n\t(sve_switcher::~sve_switcher): Set MASK_GENERAL_REGS_ONLY in\n\tglobal_options.x_target_flags if m_old_general_regs_only is true.\n\ngcc/testsuite/\n\tPR target/94678\n\t* gcc.target/aarch64/sve/acle/general/nosve_6.c: New test.", "tree": {"sha": "795c27f2c44b816d3f4a7e9ef1a788d109926978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/795c27f2c44b816d3f4a7e9ef1a788d109926978"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/154ae7d4e921d704118d6a16ee5cc2a10b9047da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/154ae7d4e921d704118d6a16ee5cc2a10b9047da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/154ae7d4e921d704118d6a16ee5cc2a10b9047da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/154ae7d4e921d704118d6a16ee5cc2a10b9047da/comments", "author": null, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c3351398644270eddb4db2028dabc8fe6287632", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c3351398644270eddb4db2028dabc8fe6287632", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c3351398644270eddb4db2028dabc8fe6287632"}], "stats": {"total": 85, "additions": 78, "deletions": 7}, "files": [{"sha": "085135c7a08d0468dafa6297e1d68c61173bce95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/154ae7d4e921d704118d6a16ee5cc2a10b9047da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/154ae7d4e921d704118d6a16ee5cc2a10b9047da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=154ae7d4e921d704118d6a16ee5cc2a10b9047da", "patch": "@@ -1,3 +1,24 @@\n+2020-04-22  Felix Yang  <felix.yang@huawei.com>\n+\n+\tPR target/94678\n+\t* config/aarch64/aarch64.h (TARGET_SVE):\n+\tAdd && !TARGET_GENERAL_REGS_ONLY.\n+\t(TARGET_SVE2): Add && TARGET_SVE.\n+\t(TARGET_SVE2_AES, TARGET_SVE2_BITPERM, TARGET_SVE2_SHA3,\n+\tTARGET_SVE2_SM4): Add && TARGET_SVE2.\n+\t* config/aarch64/aarch64-sve-builtins.h\n+\t(sve_switcher::m_old_general_regs_only): New member.\n+\t* config/aarch64/aarch64-sve-builtins.cc (check_required_registers):\n+\tNew function.\n+\t(reported_missing_registers_p): New variable.\n+\t(check_required_extensions): Call check_required_registers before\n+\treturn if all required extenstions are present.\n+\t(sve_switcher::sve_switcher): Save TARGET_GENERAL_REGS_ONLY in\n+\tm_old_general_regs_only and clear MASK_GENERAL_REGS_ONLY in\n+\tglobal_options.x_target_flags.\n+\t(sve_switcher::~sve_switcher): Set MASK_GENERAL_REGS_ONLY in\n+\tglobal_options.x_target_flags if m_old_general_regs_only is true.\n+\n 2020-04-22  Zackery Spytz  <zspytz@gmail.com>\n \n \t* doc/extend.exi: Add \"free\" to list of other builtin functions"}, {"sha": "8511382351cae00dfcad2b03e8d12b8505c55b2b", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/154ae7d4e921d704118d6a16ee5cc2a10b9047da/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/154ae7d4e921d704118d6a16ee5cc2a10b9047da/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=154ae7d4e921d704118d6a16ee5cc2a10b9047da", "patch": "@@ -558,6 +558,10 @@ static hash_table<registered_function_hasher> *function_table;\n    when the required extension is disabled.  */\n static bool reported_missing_extension_p;\n \n+/* True if we've already complained about attempts to use functions\n+   which require registers that are missing.  */\n+static bool reported_missing_registers_p;\n+\n /* Record that TYPE is an ABI-defined SVE type that contains NUM_ZR SVE vectors\n    and NUM_PR SVE predicates.  MANGLED_NAME, if nonnull, is the ABI-defined\n    mangling of the type.  */\n@@ -657,6 +661,29 @@ report_missing_extension (location_t location, tree fndecl,\n   reported_missing_extension_p = true;\n }\n \n+/* Check whether the registers required by SVE function fndecl are available.\n+   Report an error against LOCATION and return false if not.  */\n+static bool\n+check_required_registers (location_t location, tree fndecl)\n+{\n+  /* Avoid reporting a slew of messages for a single oversight.  */\n+  if (reported_missing_registers_p)\n+    return false;\n+\n+  if (TARGET_GENERAL_REGS_ONLY)\n+    {\n+      /* SVE registers are not usable when -mgeneral-regs-only option\n+\t is specified.  */\n+      error_at (location,\n+\t\t\"ACLE function %qD is incompatible with the use of %qs\",\n+\t\tfndecl, \"-mgeneral-regs-only\");\n+      reported_missing_registers_p = true;\n+      return false;\n+    }\n+\n+  return true;\n+}\n+\n /* Check whether all the AARCH64_FL_* values in REQUIRED_EXTENSIONS are\n    enabled, given that those extensions are required for function FNDECL.\n    Report an error against LOCATION if not.  */\n@@ -666,7 +693,7 @@ check_required_extensions (location_t location, tree fndecl,\n {\n   uint64_t missing_extensions = required_extensions & ~aarch64_isa_flags;\n   if (missing_extensions == 0)\n-    return true;\n+    return check_required_registers (location, fndecl);\n \n   static const struct { uint64_t flag; const char *name; } extensions[] = {\n #define AARCH64_OPT_EXTENSION(EXT_NAME, FLAG_CANONICAL, FLAGS_ON, FLAGS_OFF, \\\n@@ -851,6 +878,9 @@ sve_switcher::sve_switcher ()\n   aarch64_isa_flags = (AARCH64_FL_FP | AARCH64_FL_SIMD | AARCH64_FL_F16\n \t\t       | AARCH64_FL_SVE);\n \n+  m_old_general_regs_only = TARGET_GENERAL_REGS_ONLY;\n+  global_options.x_target_flags &= ~MASK_GENERAL_REGS_ONLY;\n+\n   memcpy (m_old_have_regs_of_mode, have_regs_of_mode,\n \t  sizeof (have_regs_of_mode));\n   for (int i = 0; i < NUM_MACHINE_MODES; ++i)\n@@ -862,6 +892,8 @@ sve_switcher::~sve_switcher ()\n {\n   memcpy (have_regs_of_mode, m_old_have_regs_of_mode,\n \t  sizeof (have_regs_of_mode));\n+  if (m_old_general_regs_only)\n+    global_options.x_target_flags |= MASK_GENERAL_REGS_ONLY;\n   aarch64_isa_flags = m_old_isa_flags;\n }\n "}, {"sha": "526d9f55e7bef1b72f106b8c3d597bdac0cf50ab", "filename": "gcc/config/aarch64/aarch64-sve-builtins.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/154ae7d4e921d704118d6a16ee5cc2a10b9047da/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/154ae7d4e921d704118d6a16ee5cc2a10b9047da/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h?ref=154ae7d4e921d704118d6a16ee5cc2a10b9047da", "patch": "@@ -658,6 +658,7 @@ class sve_switcher\n \n private:\n   unsigned long m_old_isa_flags;\n+  bool m_old_general_regs_only;\n   bool m_old_have_regs_of_mode[MAX_MACHINE_MODE];\n };\n "}, {"sha": "74236c3cffd13700281b4d86ccabc75b8e8be23b", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/154ae7d4e921d704118d6a16ee5cc2a10b9047da/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/154ae7d4e921d704118d6a16ee5cc2a10b9047da/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=154ae7d4e921d704118d6a16ee5cc2a10b9047da", "patch": "@@ -309,22 +309,22 @@ extern unsigned aarch64_architecture_version;\n #define TARGET_DOTPROD (TARGET_SIMD && AARCH64_ISA_DOTPROD)\n \n /* SVE instructions, enabled through +sve.  */\n-#define TARGET_SVE (AARCH64_ISA_SVE)\n+#define TARGET_SVE (!TARGET_GENERAL_REGS_ONLY && AARCH64_ISA_SVE)\n \n /* SVE2 instructions, enabled through +sve2.  */\n-#define TARGET_SVE2 (AARCH64_ISA_SVE2)\n+#define TARGET_SVE2 (TARGET_SVE && AARCH64_ISA_SVE2)\n \n /* SVE2 AES instructions, enabled through +sve2-aes.  */\n-#define TARGET_SVE2_AES (AARCH64_ISA_SVE2_AES)\n+#define TARGET_SVE2_AES (TARGET_SVE2 && AARCH64_ISA_SVE2_AES)\n \n /* SVE2 BITPERM instructions, enabled through +sve2-bitperm.  */\n-#define TARGET_SVE2_BITPERM (AARCH64_ISA_SVE2_BITPERM)\n+#define TARGET_SVE2_BITPERM (TARGET_SVE2 && AARCH64_ISA_SVE2_BITPERM)\n \n /* SVE2 SHA3 instructions, enabled through +sve2-sha3.  */\n-#define TARGET_SVE2_SHA3 (AARCH64_ISA_SVE2_SHA3)\n+#define TARGET_SVE2_SHA3 (TARGET_SVE2 && AARCH64_ISA_SVE2_SHA3)\n \n /* SVE2 SM4 instructions, enabled through +sve2-sm4.  */\n-#define TARGET_SVE2_SM4 (AARCH64_ISA_SVE2_SM4)\n+#define TARGET_SVE2_SM4 (TARGET_SVE2 && AARCH64_ISA_SVE2_SM4)\n \n /* ARMv8.3-A features.  */\n #define TARGET_ARMV8_3\t(AARCH64_ISA_V8_3)"}, {"sha": "acd8b1ae13385182c1b6efc4d265d853ac07bc9b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/154ae7d4e921d704118d6a16ee5cc2a10b9047da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/154ae7d4e921d704118d6a16ee5cc2a10b9047da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=154ae7d4e921d704118d6a16ee5cc2a10b9047da", "patch": "@@ -1,3 +1,8 @@\n+2020-04-22  Felix Yang  <felix.yang@huawei.com>\n+\n+\tPR target/94678\n+\t* gcc.target/aarch64/sve/acle/general/nosve_6.c: New test.\n+\n 2020-04-22  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n \n \tPR fortran/90350"}, {"sha": "d91ba40de1496d064e87115dda4b13e840e18ac3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/nosve_6.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/154ae7d4e921d704118d6a16ee5cc2a10b9047da/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fnosve_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/154ae7d4e921d704118d6a16ee5cc2a10b9047da/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fnosve_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fnosve_6.c?ref=154ae7d4e921d704118d6a16ee5cc2a10b9047da", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-march=armv8-a -mgeneral-regs-only\" } */\n+\n+#pragma GCC aarch64 \"arm_sve.h\"\n+\n+#pragma GCC target \"+sve\"\n+\n+void\n+f (svbool_t *x, svint8_t *y)\n+{\n+  *x = svptrue_b8 (); /* { dg-error {ACLE function '(svbool_t svptrue_b8\\(\\)|svptrue_b8)' is incompatible with the use of '-mgeneral-regs-only'} } */\n+  *y = svadd_m (*x, *y, 1);\n+}"}]}