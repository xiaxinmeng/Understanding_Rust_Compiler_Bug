{"sha": "bd7fc26f04fc4f8ca9bfc7f5348dae6f67268b7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ3ZmMyNmYwNGZjNGY4Y2E5YmZjN2Y1MzQ4ZGFlNmY2NzI2OGI3Yw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "2000-02-23T18:29:25Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-02-23T18:29:25Z"}, "message": "Fix arm_comp_type_attributes\n\nFrom-SVN: r32118", "tree": {"sha": "ca9e54e2b84f9f33484dbb0701c4cc390de07885", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca9e54e2b84f9f33484dbb0701c4cc390de07885"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd7fc26f04fc4f8ca9bfc7f5348dae6f67268b7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd7fc26f04fc4f8ca9bfc7f5348dae6f67268b7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd7fc26f04fc4f8ca9bfc7f5348dae6f67268b7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd7fc26f04fc4f8ca9bfc7f5348dae6f67268b7c/comments", "author": null, "committer": null, "parents": [{"sha": "8bacb3d9672f52aff9464d9d534c30818e3da8fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bacb3d9672f52aff9464d9d534c30818e3da8fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bacb3d9672f52aff9464d9d534c30818e3da8fc"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "24ddde431178c82a6f0de81d961b34fe80c9a5cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7fc26f04fc4f8ca9bfc7f5348dae6f67268b7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7fc26f04fc4f8ca9bfc7f5348dae6f67268b7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd7fc26f04fc4f8ca9bfc7f5348dae6f67268b7c", "patch": "@@ -1,3 +1,8 @@\n+2000-02-23  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* config/arm/arm.c (arm_comp_type_attributes): Simply and\n+\tcomment tests on type attributes.\n+\n Wed Feb 23 16:42:21 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* final.c (shorten_branches): Make value passed to LABEL_ALIGN"}, {"sha": "182bb495860ff32892ab4d448b77adfebe2da638", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd7fc26f04fc4f8ca9bfc7f5348dae6f67268b7c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd7fc26f04fc4f8ca9bfc7f5348dae6f67268b7c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=bd7fc26f04fc4f8ca9bfc7f5348dae6f67268b7c", "patch": "@@ -1545,7 +1545,10 @@ current_file_function_operand (sym_ref)\n   /* XXX FIXME - we need some way to determine if SYMREF has already been\n      compiled.  We wanted to used SYMBOL_REF_FLAG but this is already in use\n      by the constant pool generation code.  */\n-  return sym_ref == XEXP (DECL_RTL (current_function_decl), 0);\n+  return\n+    GET_CODE (sym_ref) == SYMBOL_REF\n+    && sym_ref == XEXP (DECL_RTL (current_function_decl), 0)\n+    && ! DECL_WEAK (current_function_decl);\n }\n \n /* Return non-zero if a 32 bit \"long call\" should be generated for this\n@@ -1639,17 +1642,30 @@ arm_comp_type_attributes (type1, type2)\n      tree type2;\n {\n   int l1, l2, s1, s2;\n+  \n   /* Check for mismatch of non-default calling convention.  */\n   if (TREE_CODE (type1) != FUNCTION_TYPE)\n     return 1;\n \n   /* Check for mismatched call attributes.  */\n-  l1 = ! lookup_attribute (\"long_call\", TYPE_ATTRIBUTES (type1));\n-  l2 = ! lookup_attribute (\"long_call\", TYPE_ATTRIBUTES (type2));\n-  s1 = ! lookup_attribute (\"short_call\", TYPE_ATTRIBUTES (type1));\n-  s2 = ! lookup_attribute (\"short_call\", TYPE_ATTRIBUTES (type2));\n+  l1 = lookup_attribute (\"long_call\", TYPE_ATTRIBUTES (type1));\n+  l2 = lookup_attribute (\"long_call\", TYPE_ATTRIBUTES (type2));\n+  s1 = lookup_attribute (\"short_call\", TYPE_ATTRIBUTES (type1));\n+  s2 = lookup_attribute (\"short_call\", TYPE_ATTRIBUTES (type2));\n+\n+  /* Only bother to check if an attribute is defined.  */\n+  if (l1 | l2 | s1 | s2)\n+    {\n+      /* If one type has an attribute, the other must have the same attribute.  */\n+      if ((!l1 != !l2) || (!s1 != !s2))\n+\treturn 0;\n \n-  return ! ((l1 ^ l2) || (s1 ^s2) || (l1 | s2) || (s1 | l2));\n+      /* Disallow mixed attributes.  */\n+      if ((l1 & s2) || (l2 & s1))\n+\treturn 0;\n+    }\n+  \n+  return 1;\n }\n \n \f"}]}