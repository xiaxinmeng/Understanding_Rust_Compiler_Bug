{"sha": "855ff2e1e447affef1e407fe68b9e10d525f41f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU1ZmYyZTFlNDQ3YWZmZWYxZTQwN2ZlNjhiOWUxMGQ1MjVmNDFmNQ==", "commit": {"author": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-12-17T21:07:05Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-12-17T21:07:05Z"}, "message": "sem_ch3.adb (Analyze_Variant_Part): check that type of discriminant is discrete before analyzing choices.\n\n\t* sem_ch3.adb (Analyze_Variant_Part): check that type of discriminant\n\tis discrete before analyzing choices.\n\n\t* bindgen.adb (Gen_Output_File_Ada): Generate a new C-like string\n\tcontaining the name of the Ada Main Program. This string is mainly\n\tintended for the debugger.\n\t(Gen_Output_File_C): Do the equivalent change when generating a C file.\n\n\t* ali.adb: Set new Dummy_Entry field in dependency entry\n\n\t* ali.ads: Add Dummy_Entry field to source dependency table\n\n\t* bcheck.adb (Check_Consistency): Ignore dummy D lines\n\n\t* lib-writ.adb (Writ_ALI): Write dummy D lines for missing source files\n\n\t* lib-writ.ads: Document dummy D lines for missing files.\n\n\t* types.ads: (Dummy_Time_Stamp): New value for non-existant files\n\nFrom-SVN: r48126", "tree": {"sha": "a224052d9d5171d179321515f61186deba4f2b92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a224052d9d5171d179321515f61186deba4f2b92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/855ff2e1e447affef1e407fe68b9e10d525f41f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/855ff2e1e447affef1e407fe68b9e10d525f41f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/855ff2e1e447affef1e407fe68b9e10d525f41f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/855ff2e1e447affef1e407fe68b9e10d525f41f5/comments", "author": null, "committer": null, "parents": [{"sha": "c1c22e7a703c6e1d638195f667c9f1ce72ef6de5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1c22e7a703c6e1d638195f667c9f1ce72ef6de5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1c22e7a703c6e1d638195f667c9f1ce72ef6de5"}], "stats": {"total": 175, "additions": 131, "deletions": 44}, "files": [{"sha": "76ab8a0177965afaad3cf579a2702af1b7b17bc1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855ff2e1e447affef1e407fe68b9e10d525f41f5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855ff2e1e447affef1e407fe68b9e10d525f41f5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=855ff2e1e447affef1e407fe68b9e10d525f41f5", "patch": "@@ -1,3 +1,29 @@\n+2001-12-17  Ed Schonberg <schonber@gnat.com>\n+\n+\t* sem_ch3.adb (Analyze_Variant_Part): check that type of discriminant \n+\tis discrete before analyzing choices.\n+\t\n+2001-12-17  Joel Brobecker <brobecke@gnat.com>\n+\n+\t* bindgen.adb (Gen_Output_File_Ada): Generate a new C-like string \n+\tcontaining the name of the Ada Main Program. This string is mainly \n+\tintended for the debugger.\n+\t(Gen_Output_File_C): Do the equivalent change when generating a C file.\n+\t\n+2001-12-17  Robert Dewar <dewar@gnat.com>\n+\n+\t* ali.adb: Set new Dummy_Entry field in dependency entry\n+\t\n+\t* ali.ads: Add Dummy_Entry field to source dependency table\n+\t\n+\t* bcheck.adb (Check_Consistency): Ignore dummy D lines\n+\t\n+\t* lib-writ.adb (Writ_ALI): Write dummy D lines for missing source files\n+\t\n+\t* lib-writ.ads: Document dummy D lines for missing files.\n+\t\n+\t* types.ads: (Dummy_Time_Stamp): New value for non-existant files\n+\n 2001-12-17  Robert Dewar <dewar@gnat.com>\n \n \t* ali.adb: Type reference does not reset current file."}, {"sha": "5a4c21bcffabde38355ec28ef9b5284533ec242e", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855ff2e1e447affef1e407fe68b9e10d525f41f5/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855ff2e1e447affef1e407fe68b9e10d525f41f5/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=855ff2e1e447affef1e407fe68b9e10d525f41f5", "patch": "@@ -1128,8 +1128,10 @@ package body ALI is\n          Sdep.Increment_Last;\n          Sdep.Table (Sdep.Last).Sfile := Get_Name (Lower => True);\n          Sdep.Table (Sdep.Last).Stamp := Get_Stamp;\n+         Sdep.Table (Sdep.Last).Dummy_Entry :=\n+           (Sdep.Table (Sdep.Last).Stamp = Dummy_Time_Stamp);\n \n-         --  Check for version number present, and if so store it\n+         --  Acquire checksum value\n \n          Skip_Space;\n "}, {"sha": "78b9435f33476586c7830c9acb8b719d93f9e33f", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855ff2e1e447affef1e407fe68b9e10d525f41f5/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855ff2e1e447affef1e407fe68b9e10d525f41f5/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=855ff2e1e447affef1e407fe68b9e10d525f41f5", "patch": "@@ -517,10 +517,16 @@ package ALI is\n       --  Name of source file\n \n       Stamp : Time_Stamp_Type;\n-      --  Time stamp value\n+      --  Time stamp value. Note that this will be all zero characters\n+      --  for the dummy entries for missing or non-dependent files.\n \n       Checksum : Word;\n-      --  Checksum value\n+      --  Checksum value. Note that this will be all zero characters\n+      --  for the dummy entries for missing or non-dependent files\n+\n+      Dummy_Entry : Boolean;\n+      --  Set True for dummy entries that correspond to missing files\n+      --  or files where no dependency relationship exists.\n \n       Subunit_Name : Name_Id;\n       --  Name_Id for subunit name if present, else No_Name"}, {"sha": "77b3284fc333f89441126acfb89900add5afbab6", "filename": "gcc/ada/bcheck.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855ff2e1e447affef1e407fe68b9e10d525f41f5/gcc%2Fada%2Fbcheck.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855ff2e1e447affef1e407fe68b9e10d525f41f5/gcc%2Fada%2Fbcheck.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbcheck.adb?ref=855ff2e1e447affef1e407fe68b9e10d525f41f5", "patch": "@@ -529,6 +529,10 @@ package body Bcheck is\n          Sdep_Loop : for D in\n            ALIs.Table (A).First_Sdep .. ALIs.Table (A).Last_Sdep\n          loop\n+            if Sdep.Table (D).Dummy_Entry then\n+               goto Continue;\n+            end if;\n+\n             Src := Source_Id (Get_Name_Table_Info (Sdep.Table (D).Sfile));\n \n             --  If the time stamps match, or all checksums match, then we\n@@ -587,6 +591,8 @@ package body Bcheck is\n                exit Sdep_Loop;\n             end if;\n \n+         <<Continue>>\n+            null;\n          end loop Sdep_Loop;\n       end loop ALIs_Loop;\n    end Check_Consistency;"}, {"sha": "a45e7923e1f46da1769a8e7fe1eda4b669297a39", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855ff2e1e447affef1e407fe68b9e10d525f41f5/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855ff2e1e447affef1e407fe68b9e10d525f41f5/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=855ff2e1e447affef1e407fe68b9e10d525f41f5", "patch": "@@ -1752,16 +1752,28 @@ package body Bindgen is\n          end if;\n       end if;\n \n-      --  Generate the GNAT_Version info only for the main program. Otherwise,\n-      --  it can lead under some circumstances to a symbol duplication during\n-      --  the link (for instance when a C program uses 2 Ada libraries)\n+      --  Generate the GNAT_Version and Ada_Main_Program_name info only for\n+      --  the main program. Otherwise, it can lead under some circumstances\n+      --  to a symbol duplication during the link (for instance when a\n+      --  C program uses 2 Ada libraries)\n \n       if Bind_Main_Program then\n          WBI (\"\");\n          WBI (\"   GNAT_Version : constant String :=\");\n          WBI (\"                    \"\"GNAT Version: \" &\n                                    Gnat_Version_String & \"\"\";\");\n          WBI (\"   pragma Export (C, GNAT_Version, \"\"__gnat_version\"\");\");\n+\n+         WBI (\"\");\n+         Set_String (\"   Ada_Main_Program_Name : constant String := \"\"\");\n+         Get_Name_String (Units.Table (First_Unit_Entry).Uname);\n+         Set_Main_Program_Name;\n+         Set_String (\"\"\" & Ascii.NUL;\");\n+         Write_Statement_Buffer;\n+\n+         WBI\n+           (\"   pragma Export (C, Ada_Main_Program_Name, \" &\n+            \"\"\"__gnat_ada_main_program_name\"\");\");\n       end if;\n \n       --  No need to generate a finalization routine if there is no\n@@ -2006,15 +2018,21 @@ package body Bindgen is\n          WBI (\"void __gnat_break_start () {}\");\n       end if;\n \n-      --  Generate the __gnat_version info only for the main program.\n-      --  Otherwise, it can lead under some circumstances to a symbol\n-      --  duplication during the link (for instance when a C program\n-      --  uses 2 Ada libraries)\n+      --  Generate the __gnat_version and __gnat_ada_main_program_name info\n+      --  only for the main program. Otherwise, it can lead under some\n+      --  circumstances to a symbol duplication during the link (for instance\n+      --  when a C program uses 2 Ada libraries)\n \n       if Bind_Main_Program then\n          WBI (\"\");\n          WBI (\"char __gnat_version[] = \"\"GNAT Version: \" &\n                                    Gnat_Version_String & \"\"\";\");\n+\n+         Set_String (\"char __gnat_ada_main_program_name[] = \"\"\");\n+         Get_Name_String (Units.Table (First_Unit_Entry).Uname);\n+         Set_Main_Program_Name;\n+         Set_String (\"\"\";\");\n+         Write_Statement_Buffer;\n       end if;\n \n       --  Generate the adafinal routine. In no runtime mode, this is"}, {"sha": "c2b15d59df02f2551aa5408c59adc49c0f8a667e", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 42, "deletions": 32, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855ff2e1e447affef1e407fe68b9e10d525f41f5/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855ff2e1e447affef1e407fe68b9e10d525f41f5/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=855ff2e1e447affef1e407fe68b9e10d525f41f5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.160 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n@@ -880,50 +880,60 @@ package body Lib.Writ is\n       begin\n          for J in 1 .. Num_Sdep loop\n             Unum := Sdep_Table (J);\n+            Units.Table (Unum).Dependency_Num := J;\n             Sind := Units.Table (Unum).Source_Index;\n \n-            --  Error defence, ignore entries with no source index\n+            Write_Info_Initiate ('D');\n+            Write_Info_Char (' ');\n \n-            if Sind /= No_Source_File then\n-               Units.Table (Unum).Dependency_Num := J;\n+            --  Normal case of a dependent unit entry with a source index\n \n-               if Units.Table (Unum).Dependent_Unit then\n-                  Write_Info_Initiate ('D');\n-                  Write_Info_Char (' ');\n-                  Write_Info_Name (File_Name (Sind));\n-                  Write_Info_Tab (25);\n-                  Write_Info_Str (String (Time_Stamp (Sind)));\n-                  Write_Info_Char (' ');\n-                  Write_Info_Str (Get_Hex_String (Source_Checksum (Sind)));\n-\n-                  --  If subunit, add unit name, omitting the %b at the end\n+            if Sind /= No_Source_File\n+              and then Units.Table (Unum).Dependent_Unit\n+            then\n+               Write_Info_Name (File_Name (Sind));\n+               Write_Info_Tab (25);\n+               Write_Info_Str (String (Time_Stamp (Sind)));\n+               Write_Info_Char (' ');\n+               Write_Info_Str (Get_Hex_String (Source_Checksum (Sind)));\n \n-                  if Present (Cunit (Unum))\n-                    and then Nkind (Unit (Cunit (Unum))) = N_Subunit\n-                  then\n-                     Get_Decoded_Name_String (Unit_Name (Unum));\n-                     Write_Info_Char (' ');\n-                     Write_Info_Str (Name_Buffer (1 .. Name_Len - 2));\n-                  end if;\n+               --  If subunit, add unit name, omitting the %b at the end\n \n-                  --  If Source_Reference pragma used output information\n+               if Present (Cunit (Unum))\n+                 and then Nkind (Unit (Cunit (Unum))) = N_Subunit\n+               then\n+                  Get_Decoded_Name_String (Unit_Name (Unum));\n+                  Write_Info_Char (' ');\n+                  Write_Info_Str (Name_Buffer (1 .. Name_Len - 2));\n+               end if;\n \n-                  if Num_SRef_Pragmas (Sind) > 0 then\n-                     Write_Info_Char (' ');\n+               --  If Source_Reference pragma used output information\n \n-                     if Num_SRef_Pragmas (Sind) = 1 then\n-                        Write_Info_Nat (Int (First_Mapped_Line (Sind)));\n-                     else\n-                        Write_Info_Nat (0);\n-                     end if;\n+               if Num_SRef_Pragmas (Sind) > 0 then\n+                  Write_Info_Char (' ');\n \n-                     Write_Info_Char (':');\n-                     Write_Info_Name (Reference_Name (Sind));\n+                  if Num_SRef_Pragmas (Sind) = 1 then\n+                     Write_Info_Nat (Int (First_Mapped_Line (Sind)));\n+                  else\n+                     Write_Info_Nat (0);\n                   end if;\n \n-                  Write_Info_EOL;\n+                  Write_Info_Char (':');\n+                  Write_Info_Name (Reference_Name (Sind));\n                end if;\n+\n+            --  Case where there is no source index (happens for missing files)\n+            --  Also come here for non-dependent units.\n+\n+            else\n+               Write_Info_Name (Unit_File_Name (Unum));\n+               Write_Info_Tab (25);\n+               Write_Info_Str (String (Dummy_Time_Stamp));\n+               Write_Info_Char (' ');\n+               Write_Info_Str (Get_Hex_String (0));\n             end if;\n+\n+            Write_Info_EOL;\n          end loop;\n       end;\n "}, {"sha": "f1770ba590e5072bf40c9ef49870d3d76a201e1e", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855ff2e1e447affef1e407fe68b9e10d525f41f5/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855ff2e1e447affef1e407fe68b9e10d525f41f5/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=855ff2e1e447affef1e407fe68b9e10d525f41f5", "patch": "@@ -403,6 +403,7 @@ package Lib.Writ is\n \n    --  The dependency lines indicate the source files on which the compiled\n    --  units depend. This is used by the binder for consistency checking.\n+   --  These lines are also referenced by the cross-reference information.\n \n    --    D source-name time-stamp checksum [subunit-name] line:file-name\n \n@@ -437,6 +438,13 @@ package Lib.Writ is\n    --      lines to ease readability. Blanks between fields are also\n    --      ignored.\n \n+   --      For entries corresponding to files that were not present (and\n+   --      thus resulted in error messages), or for files that are not\n+   --      part of the dependency set, both the time stamp and checksum\n+   --      are set to all zero characters. These dummy entries are ignored\n+   --      by the binder in dependency checking, but must be present for\n+   --      proper interpretation of the cross-reference data.\n+\n    --------------------------\n    -- Cross-Reference Data --\n    --------------------------"}, {"sha": "d1076c85ef9a5e2ff5e2ca1a633f30bd8737cbc3", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855ff2e1e447affef1e407fe68b9e10d525f41f5/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855ff2e1e447affef1e407fe68b9e10d525f41f5/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=855ff2e1e447affef1e407fe68b9e10d525f41f5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.10 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001, Free Software Foundation, Inc.         --\n --                                                                          --\n@@ -2609,6 +2609,13 @@ package body Sem_Ch3 is\n \n       Discr_Type := Etype (Entity (Discr_Name));\n \n+      if not Is_Discrete_Type (Discr_Type) then\n+         Error_Msg_N\n+           (\"discriminant in a variant part must be of a discrete type\",\n+             Name (N));\n+         return;\n+      end if;\n+\n       --  Call the instantiated Analyze_Choices which does the rest of the work\n \n       Analyze_Choices"}, {"sha": "bd25cf616ec565a79e2335f2a15ee34c0b2b061c", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855ff2e1e447affef1e407fe68b9e10d525f41f5/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855ff2e1e447affef1e407fe68b9e10d525f41f5/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=855ff2e1e447affef1e407fe68b9e10d525f41f5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                            $Revision: 1.3 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n@@ -622,6 +622,10 @@ pragma Preelaborate (Types);\n    --  exact way in which this string is represented, and instead should\n    --  use the subprograms below.\n \n+   Dummy_Time_Stamp : constant Time_Stamp_Type := (others => '0');\n+   --  This is used for dummy time stamp values used in the D lines for\n+   --  non-existant files, and is intended to be an impossible value.\n+\n    function \"=\"  (Left, Right : Time_Stamp_Type) return Boolean;\n    function \"<=\" (Left, Right : Time_Stamp_Type) return Boolean;\n    function \">=\" (Left, Right : Time_Stamp_Type) return Boolean;"}]}