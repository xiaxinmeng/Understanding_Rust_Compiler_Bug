{"sha": "2f5da730f159de238500c82b0c6ef6c9ab91b1c2", "node_id": "C_kwDOANBUbNoAKDJmNWRhNzMwZjE1OWRlMjM4NTAwYzgyYjBjNmVmNmM5YWI5MWIxYzI", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-09-20T21:14:30Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-09-22T18:48:29Z"}, "message": "Convert CFN_BUILT_IN_TOUPPER and TOLOWER to range-ops.\n\n\t* gimple-range-fold.cc (get_letter_range): Move to new class.\n\t(range_of_builtin_int_call): Remove case for CFN_BUILT_IN_TOUPPER\n\tand CFN_BUILT_IN_TOLOWER.\n\t* gimple-range-op.cc (class cfn_toupper_tolower): New.\n\t(gimple_range_op_handler::maybe_builtin_call): Set arguments.", "tree": {"sha": "f4bf257968e7415075c327c999824a3761095e56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4bf257968e7415075c327c999824a3761095e56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f5da730f159de238500c82b0c6ef6c9ab91b1c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f5da730f159de238500c82b0c6ef6c9ab91b1c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f5da730f159de238500c82b0c6ef6c9ab91b1c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f5da730f159de238500c82b0c6ef6c9ab91b1c2/comments", "author": null, "committer": null, "parents": [{"sha": "eb82b9f68eb8d0cc65a1a022154c8e729860ea59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb82b9f68eb8d0cc65a1a022154c8e729860ea59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb82b9f68eb8d0cc65a1a022154c8e729860ea59"}], "stats": {"total": 143, "additions": 77, "deletions": 66}, "files": [{"sha": "af1f83f740914c085c52c6b7c34bf48a93d02e3e", "filename": "gcc/gimple-range-fold.cc", "status": "modified", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5da730f159de238500c82b0c6ef6c9ab91b1c2/gcc%2Fgimple-range-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5da730f159de238500c82b0c6ef6c9ab91b1c2/gcc%2Fgimple-range-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.cc?ref=2f5da730f159de238500c82b0c6ef6c9ab91b1c2", "patch": "@@ -887,28 +887,6 @@ fold_using_range::range_of_builtin_ubsan_call (irange &r, gcall *call,\n     r.set_varying (type);\n }\n \n-// Return TRUE if we recognize the target character set and return the\n-// range for lower case and upper case letters.\n-\n-static bool\n-get_letter_range (tree type, irange &lowers, irange &uppers)\n-{\n-  // ASCII\n-  int a = lang_hooks.to_target_charset ('a');\n-  int z = lang_hooks.to_target_charset ('z');\n-  int A = lang_hooks.to_target_charset ('A');\n-  int Z = lang_hooks.to_target_charset ('Z');\n-\n-  if ((z - a == 25) && (Z - A == 25))\n-    {\n-      lowers = int_range<2> (build_int_cst (type, a), build_int_cst (type, z));\n-      uppers = int_range<2> (build_int_cst (type, A), build_int_cst (type, Z));\n-      return true;\n-    }\n-  // Unknown character set.\n-  return false;\n-}\n-\n // For a builtin in CALL, return a range in R if known and return\n // TRUE.  Otherwise return FALSE.\n \n@@ -944,50 +922,6 @@ fold_using_range::range_of_builtin_int_call (irange &r, gcall *call,\n \n   switch (func)\n     {\n-    case CFN_BUILT_IN_TOUPPER:\n-      {\n-\targ = gimple_call_arg (call, 0);\n-\t// If the argument isn't compatible with the LHS, do nothing.\n-\tif (!range_compatible_p (type, TREE_TYPE (arg)))\n-\t  return false;\n-\tif (!src.get_operand (r, arg))\n-\t  return false;\n-\n-\tint_range<3> lowers;\n-\tint_range<3> uppers;\n-\tif (!get_letter_range (type, lowers, uppers))\n-\t  return false;\n-\n-\t// Return the range passed in without any lower case characters,\n-\t// but including all the upper case ones.\n-\tlowers.invert ();\n-\tr.intersect (lowers);\n-\tr.union_ (uppers);\n-\treturn true;\n-      }\n-\n-     case CFN_BUILT_IN_TOLOWER:\n-      {\n-\targ = gimple_call_arg (call, 0);\n-\t// If the argument isn't compatible with the LHS, do nothing.\n-\tif (!range_compatible_p (type, TREE_TYPE (arg)))\n-\t  return false;\n-\tif (!src.get_operand (r, arg))\n-\t  return false;\n-\n-\tint_range<3> lowers;\n-\tint_range<3> uppers;\n-\tif (!get_letter_range (type, lowers, uppers))\n-\t  return false;\n-\n-\t// Return the range passed in without any upper case characters,\n-\t// but including all the lower case ones.\n-\tuppers.invert ();\n-\tr.intersect (uppers);\n-\tr.union_ (lowers);\n-\treturn true;\n-      }\n-\n     CASE_CFN_FFS:\n     CASE_CFN_POPCOUNT:\n       // __builtin_ffs* and __builtin_popcount* return [0, prec]."}, {"sha": "45384d990ae464e344307c576f45084ec4207f4f", "filename": "gcc/gimple-range-op.cc", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5da730f159de238500c82b0c6ef6c9ab91b1c2/gcc%2Fgimple-range-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5da730f159de238500c82b0c6ef6c9ab91b1c2/gcc%2Fgimple-range-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-op.cc?ref=2f5da730f159de238500c82b0c6ef6c9ab91b1c2", "patch": "@@ -322,6 +322,71 @@ class cfn_signbit : public range_operator_float\n   }\n } op_cfn_signbit;\n \n+// Implement range operator for CFN_BUILT_IN_TOUPPER and CFN_BUILT_IN_TOLOWER.\n+class cfn_toupper_tolower : public range_operator\n+{\n+public:\n+  using range_operator::fold_range;\n+  cfn_toupper_tolower (bool toupper)  { m_toupper = toupper; }\n+  virtual bool fold_range (irange &r, tree type, const irange &lh,\n+\t\t\t   const irange &, relation_kind) const;\n+private:\n+  bool get_letter_range (tree type, irange &lowers, irange &uppers) const;\n+  bool m_toupper;\n+} op_cfn_toupper (true), op_cfn_tolower (false);\n+\n+// Return TRUE if we recognize the target character set and return the\n+// range for lower case and upper case letters.\n+\n+bool\n+cfn_toupper_tolower::get_letter_range (tree type, irange &lowers,\n+\t\t\t\t       irange &uppers) const\n+{\n+  // ASCII\n+  int a = lang_hooks.to_target_charset ('a');\n+  int z = lang_hooks.to_target_charset ('z');\n+  int A = lang_hooks.to_target_charset ('A');\n+  int Z = lang_hooks.to_target_charset ('Z');\n+\n+  if ((z - a == 25) && (Z - A == 25))\n+    {\n+      lowers = int_range<2> (build_int_cst (type, a), build_int_cst (type, z));\n+      uppers = int_range<2> (build_int_cst (type, A), build_int_cst (type, Z));\n+      return true;\n+    }\n+  // Unknown character set.\n+  return false;\n+}\n+\n+bool\n+cfn_toupper_tolower::fold_range (irange &r, tree type, const irange &lh,\n+\t\t\t\t const irange &, relation_kind) const\n+{\n+  int_range<3> lowers;\n+  int_range<3> uppers;\n+  if (!get_letter_range (type, lowers, uppers))\n+    return false;\n+\n+  r = lh;\n+  if (m_toupper)\n+    {\n+      // Return the range passed in without any lower case characters,\n+      // but including all the upper case ones.\n+      lowers.invert ();\n+      r.intersect (lowers);\n+      r.union_ (uppers);\n+    }\n+  else\n+    {\n+      // Return the range passed in without any lower case characters,\n+      // but including all the upper case ones.\n+      uppers.invert ();\n+      r.intersect (uppers);\n+      r.union_ (lowers);\n+    }\n+  return true;\n+}\n+\n // Set up a gimple_range_op_handler for any built in function which can be\n // supported via range-ops.\n \n@@ -358,6 +423,18 @@ gimple_range_op_handler::maybe_builtin_call ()\n       m_valid = true;\n       break;\n \n+    case CFN_BUILT_IN_TOUPPER:\n+    case CFN_BUILT_IN_TOLOWER:\n+      // Only proceed If the argument is compatible with the LHS.\n+      m_op1 = gimple_call_arg (call, 0);\n+      if (range_compatible_p (type, TREE_TYPE (m_op1)))\n+\t{\n+\t  m_valid = true;\n+\t  m_int = (func == CFN_BUILT_IN_TOLOWER) ? &op_cfn_tolower\n+\t\t\t\t\t\t : &op_cfn_toupper;\n+\t}\n+      break;\n+\n     default:\n       break;\n     }"}]}