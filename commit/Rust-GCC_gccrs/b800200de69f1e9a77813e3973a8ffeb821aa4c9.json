{"sha": "b800200de69f1e9a77813e3973a8ffeb821aa4c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgwMDIwMGRlNjlmMWU5YTc3ODEzZTM5NzNhOGZmZWI4MjFhYTRjOQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-26T19:51:26Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-26T19:51:26Z"}, "message": "Update some net tests from master sources.\n\nFrom-SVN: r169298", "tree": {"sha": "14be5dad158b6b93942fd4428203df120b8c7365", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14be5dad158b6b93942fd4428203df120b8c7365"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b800200de69f1e9a77813e3973a8ffeb821aa4c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b800200de69f1e9a77813e3973a8ffeb821aa4c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b800200de69f1e9a77813e3973a8ffeb821aa4c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b800200de69f1e9a77813e3973a8ffeb821aa4c9/comments", "author": null, "committer": null, "parents": [{"sha": "01c599966bcea004fd37c6b1e6328d1ee5d27c5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c599966bcea004fd37c6b1e6328d1ee5d27c5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01c599966bcea004fd37c6b1e6328d1ee5d27c5d"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "a432800cfe2cb84236b07ab854f2baa10757ba26", "filename": "libgo/go/net/dialgoogle_test.go", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b800200de69f1e9a77813e3973a8ffeb821aa4c9/libgo%2Fgo%2Fnet%2Fdialgoogle_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b800200de69f1e9a77813e3973a8ffeb821aa4c9/libgo%2Fgo%2Fnet%2Fdialgoogle_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fdialgoogle_test.go?ref=b800200de69f1e9a77813e3973a8ffeb821aa4c9", "patch": "@@ -6,12 +6,14 @@ package net\n \n import (\n \t\"flag\"\n+\t\"fmt\"\n \t\"io\"\n+\t\"strings\"\n \t\"syscall\"\n \t\"testing\"\n )\n \n-// If an IPv6 tunnel is running (see go/stubl), we can try dialing a real IPv6 address.\n+// If an IPv6 tunnel is running, we can try dialing a real IPv6 address.\n var ipv6 = flag.Bool(\"ipv6\", false, \"assume ipv6 tunnel is present\")\n \n // fd is already connected to the destination, port 80.\n@@ -40,16 +42,16 @@ func doDial(t *testing.T, network, addr string) {\n }\n \n var googleaddrs = []string{\n-\t\"74.125.19.99:80\",\n+\t\"%d.%d.%d.%d:80\",\n \t\"www.google.com:80\",\n-\t\"74.125.19.99:http\",\n+\t\"%d.%d.%d.%d:http\",\n \t\"www.google.com:http\",\n-\t\"074.125.019.099:0080\",\n-\t\"[::ffff:74.125.19.99]:80\",\n-\t\"[::ffff:4a7d:1363]:80\",\n-\t\"[0:0:0:0:0000:ffff:74.125.19.99]:80\",\n-\t\"[0:0:0:0:000000:ffff:74.125.19.99]:80\",\n-\t\"[0:0:0:0:0:ffff::74.125.19.99]:80\",\n+\t\"%03d.%03d.%03d.%03d:0080\",\n+\t\"[::ffff:%d.%d.%d.%d]:80\",\n+\t\"[::ffff:%02x%02x:%02x%02x]:80\",\n+\t\"[0:0:0:0:0000:ffff:%d.%d.%d.%d]:80\",\n+\t\"[0:0:0:0:000000:ffff:%d.%d.%d.%d]:80\",\n+\t\"[0:0:0:0:0:ffff::%d.%d.%d.%d]:80\",\n \t\"[2001:4860:0:2001::68]:80\", // ipv6.google.com; removed if ipv6 flag not set\n }\n \n@@ -59,6 +61,24 @@ func TestDialGoogle(t *testing.T) {\n \t\tgoogleaddrs[len(googleaddrs)-1] = \"\"\n \t}\n \n+\t// Insert an actual IP address for google.com\n+\t// into the table.\n+\n+\t_, addrs, err := LookupHost(\"www.google.com\")\n+\tif err != nil {\n+\t\tt.Fatalf(\"lookup www.google.com: %v\", err)\n+\t}\n+\tif len(addrs) == 0 {\n+\t\tt.Fatalf(\"no addresses for www.google.com\")\n+\t}\n+\tip := ParseIP(addrs[0]).To4()\n+\n+\tfor i, s := range googleaddrs {\n+\t\tif strings.Contains(s, \"%\") {\n+\t\t\tgoogleaddrs[i] = fmt.Sprintf(s, ip[0], ip[1], ip[2], ip[3])\n+\t\t}\n+\t}\n+\n \tfor i := 0; i < len(googleaddrs); i++ {\n \t\taddr := googleaddrs[i]\n \t\tif addr == \"\" {"}, {"sha": "09a257dc817fca387cb2a16dca49818a39b146e0", "filename": "libgo/go/net/timeout_test.go", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b800200de69f1e9a77813e3973a8ffeb821aa4c9/libgo%2Fgo%2Fnet%2Ftimeout_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b800200de69f1e9a77813e3973a8ffeb821aa4c9/libgo%2Fgo%2Fnet%2Ftimeout_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ftimeout_test.go?ref=b800200de69f1e9a77813e3973a8ffeb821aa4c9", "patch": "@@ -46,8 +46,12 @@ func TestTimeoutUDP(t *testing.T) {\n }\n \n func TestTimeoutTCP(t *testing.T) {\n-\t// 74.125.19.99 is www.google.com.\n-\t// could use dns, but dns depends on\n-\t// timeouts and this is the timeout test.\n-\ttestTimeout(t, \"tcp\", \"74.125.19.99:80\", false)\n+\t// set up a listener that won't talk back\n+\tlistening := make(chan string)\n+\tdone := make(chan int)\n+\tgo runServe(t, \"tcp\", \"127.0.0.1:0\", listening, done)\n+\taddr := <-listening\n+\n+\ttestTimeout(t, \"tcp\", addr, false)\n+\t<-done\n }"}]}