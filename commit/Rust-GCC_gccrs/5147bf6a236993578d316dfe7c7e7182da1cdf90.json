{"sha": "5147bf6a236993578d316dfe7c7e7182da1cdf90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE0N2JmNmEyMzY5OTM1NzhkMzE2ZGZlN2M3ZTcxODJkYTFjZGY5MA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2013-01-16T04:31:30Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2013-01-16T04:31:30Z"}, "message": "re PR rtl-optimization/55547 (Alias analysis does not handle AND addresses correctly)\n\nPR rtl-optimization/55547\nPR rtl-optimization/53827\nPR debug/53671\nPR debug/49888\n* alias.c (memrefs_conflict_p): Set sizes to negative after\nAND adjustments.\n\nFrom-SVN: r195227", "tree": {"sha": "f0fc6a874d85829d0f97a943b956d34c53269040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0fc6a874d85829d0f97a943b956d34c53269040"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5147bf6a236993578d316dfe7c7e7182da1cdf90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5147bf6a236993578d316dfe7c7e7182da1cdf90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5147bf6a236993578d316dfe7c7e7182da1cdf90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5147bf6a236993578d316dfe7c7e7182da1cdf90/comments", "author": null, "committer": null, "parents": [{"sha": "c851c76cdf52884dd5e0c7befd3c809e9d174a73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c851c76cdf52884dd5e0c7befd3c809e9d174a73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c851c76cdf52884dd5e0c7befd3c809e9d174a73"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "6f7441e8b237e204cb9af1726d9dcdab3bd61902", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5147bf6a236993578d316dfe7c7e7182da1cdf90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5147bf6a236993578d316dfe7c7e7182da1cdf90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5147bf6a236993578d316dfe7c7e7182da1cdf90", "patch": "@@ -1,3 +1,12 @@\n+2013-01-16  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR rtl-optimization/55547\n+\tPR rtl-optimization/53827\n+\tPR debug/53671\n+\tPR debug/49888\n+\t* alias.c (memrefs_conflict_p): Set sizes to negative after\n+\tAND adjustments.\n+\n 2013-01-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/55940"}, {"sha": "9a386dde3820d0a23a745749e4d66c7374f65368", "filename": "gcc/alias.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5147bf6a236993578d316dfe7c7e7182da1cdf90/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5147bf6a236993578d316dfe7c7e7182da1cdf90/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=5147bf6a236993578d316dfe7c7e7182da1cdf90", "patch": "@@ -2080,14 +2080,20 @@ memrefs_conflict_p (int xsize, rtx x, int ysize, rtx y, HOST_WIDE_INT c)\n \n   /* Deal with alignment ANDs by adjusting offset and size so as to\n      cover the maximum range, without taking any previously known\n-     alignment into account.  */\n+     alignment into account.  Make a size negative after such an\n+     adjustments, so that, if we end up with e.g. two SYMBOL_REFs, we\n+     assume a potential overlap, because they may end up in contiguous\n+     memory locations and the stricter-alignment access may span over\n+     part of both.  */\n   if (GET_CODE (x) == AND && CONST_INT_P (XEXP (x, 1)))\n     {\n       HOST_WIDE_INT sc = INTVAL (XEXP (x, 1));\n       unsigned HOST_WIDE_INT uc = sc;\n-      if (xsize > 0 && sc < 0 && -uc == (uc & -uc))\n+      if (sc < 0 && -uc == (uc & -uc))\n \t{\n-\t  xsize -= sc + 1;\n+\t  if (xsize > 0)\n+\t    xsize = -xsize;\n+\t  xsize += sc + 1;\n \t  c -= sc + 1;\n \t  return memrefs_conflict_p (xsize, canon_rtx (XEXP (x, 0)),\n \t\t\t\t     ysize, y, c);\n@@ -2097,9 +2103,11 @@ memrefs_conflict_p (int xsize, rtx x, int ysize, rtx y, HOST_WIDE_INT c)\n     {\n       HOST_WIDE_INT sc = INTVAL (XEXP (y, 1));\n       unsigned HOST_WIDE_INT uc = sc;\n-      if (ysize > 0 && sc < 0 && -uc == (uc & -uc))\n+      if (sc < 0 && -uc == (uc & -uc))\n \t{\n-\t  ysize -= sc + 1;\n+\t  if (ysize > 0)\n+\t    ysize = -ysize;\n+\t  ysize += sc + 1;\n \t  c += sc + 1;\n \t  return memrefs_conflict_p (xsize, x,\n \t\t\t\t     ysize, canon_rtx (XEXP (y, 0)), c);"}]}