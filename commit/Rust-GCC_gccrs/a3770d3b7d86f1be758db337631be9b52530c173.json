{"sha": "a3770d3b7d86f1be758db337631be9b52530c173", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM3NzBkM2I3ZDg2ZjFiZTc1OGRiMzM3NjMxYmU5YjUyNTMwYzE3Mw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2012-10-17T21:18:16Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2012-10-17T21:18:16Z"}, "message": "re PR middle-end/54893 (unable to access volatile variable within relaxed transaction)\n\n\tPR middle-end/54893\n        * trans-mem.c (diagnose_tm_1_op): Allow volatiles inside relaxed\n        transactions.\n\nFrom-SVN: r192549", "tree": {"sha": "436fa541fe71a62886a30c7ffde759985c66668b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/436fa541fe71a62886a30c7ffde759985c66668b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3770d3b7d86f1be758db337631be9b52530c173", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3770d3b7d86f1be758db337631be9b52530c173", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3770d3b7d86f1be758db337631be9b52530c173", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3770d3b7d86f1be758db337631be9b52530c173/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7b159a4dcca7e45fdf2b57a865dd2a91148eefb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7b159a4dcca7e45fdf2b57a865dd2a91148eefb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7b159a4dcca7e45fdf2b57a865dd2a91148eefb"}], "stats": {"total": 109, "additions": 76, "deletions": 33}, "files": [{"sha": "b9d99e51dd75a1b1a12b16db2a24c1d3f0dcd098", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3770d3b7d86f1be758db337631be9b52530c173/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3770d3b7d86f1be758db337631be9b52530c173/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3770d3b7d86f1be758db337631be9b52530c173", "patch": "@@ -1,3 +1,9 @@\n+2012-10-17  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR middle-end/54893\n+        * trans-mem.c (diagnose_tm_1_op): Allow volatiles inside relaxed\n+        transactions.\n+\n 2012-10-17  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR rtl-optimization/54900"}, {"sha": "8967f384afddf99a0b9db41e3a53565e993352dc", "filename": "gcc/testsuite/c-c++-common/tm/pr54893.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3770d3b7d86f1be758db337631be9b52530c173/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Fpr54893.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3770d3b7d86f1be758db337631be9b52530c173/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Fpr54893.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftm%2Fpr54893.c?ref=a3770d3b7d86f1be758db337631be9b52530c173", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgnu-tm -fdump-ipa-tmipa\" } */\n+\n+/* Test that volatiles are allowed inside relaxed transactions.  */\n+\n+volatile int test_var = 0;\n+\n+int main()\n+{\n+  __transaction_relaxed {\n+    test_var++;\n+  }\n+}\n+\n+/* { dg-final { scan-ipa-dump \"GTMA_DOES_GO_IRREVOCABLE\" \"tmipa\" } } */\n+/* { dg-final { cleanup-ipa-dump \"tmipa\" } } */"}, {"sha": "211c45e48fb70d2c4a216c6ae77b8854c4b810c5", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 54, "deletions": 33, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3770d3b7d86f1be758db337631be9b52530c173/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3770d3b7d86f1be758db337631be9b52530c173/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=a3770d3b7d86f1be758db337631be9b52530c173", "patch": "@@ -548,6 +548,15 @@ struct diagnose_tm\n   gimple stmt;\n };\n \n+/* Return true if T is a volatile variable of some kind.  */\n+\n+static bool\n+volatile_var_p (tree t)\n+{\n+  return (SSA_VAR_P (t)\n+\t  && TREE_THIS_VOLATILE (TREE_TYPE (t)));\n+}\n+\n /* Tree callback function for diagnose_tm pass.  */\n \n static tree\n@@ -556,13 +565,9 @@ diagnose_tm_1_op (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n {\n   struct walk_stmt_info *wi = (struct walk_stmt_info *) data;\n   struct diagnose_tm *d = (struct diagnose_tm *) wi->info;\n-  enum tree_code code = TREE_CODE (*tp);\n \n-  if ((code == VAR_DECL\n-       || code == RESULT_DECL\n-       || code == PARM_DECL)\n-      && d->block_flags & (DIAG_TM_SAFE | DIAG_TM_RELAXED)\n-      && TREE_THIS_VOLATILE (TREE_TYPE (*tp))\n+  if (volatile_var_p (*tp)\n+      && d->block_flags & DIAG_TM_SAFE\n       && !d->saw_volatile)\n     {\n       d->saw_volatile = 1;\n@@ -3782,40 +3787,56 @@ ipa_tm_scan_irr_block (basic_block bb)\n       gimple stmt = gsi_stmt (gsi);\n       switch (gimple_code (stmt))\n \t{\n+\tcase GIMPLE_ASSIGN:\n+\t  if (gimple_assign_single_p (stmt))\n+\t    {\n+\t      tree lhs = gimple_assign_lhs (stmt);\n+\t      tree rhs = gimple_assign_rhs1 (stmt);\n+\t      if (volatile_var_p (lhs) || volatile_var_p (rhs))\n+\t\treturn true;\n+\t    }\n+\t  break;\n+\n \tcase GIMPLE_CALL:\n-\t  if (is_tm_pure_call (stmt))\n-\t    break;\n+\t  {\n+\t    tree lhs = gimple_call_lhs (stmt);\n+\t    if (lhs && volatile_var_p (lhs))\n+\t      return true;\n \n-\t  fn = gimple_call_fn (stmt);\n+\t    if (is_tm_pure_call (stmt))\n+\t      break;\n \n-\t  /* Functions with the attribute are by definition irrevocable.  */\n-\t  if (is_tm_irrevocable (fn))\n-\t    return true;\n+\t    fn = gimple_call_fn (stmt);\n \n-\t  /* For direct function calls, go ahead and check for replacement\n-\t     functions, or transitive irrevocable functions.  For indirect\n-\t     functions, we'll ask the runtime.  */\n-\t  if (TREE_CODE (fn) == ADDR_EXPR)\n-\t    {\n-\t      struct tm_ipa_cg_data *d;\n-\t      struct cgraph_node *node;\n+\t    /* Functions with the attribute are by definition irrevocable.  */\n+\t    if (is_tm_irrevocable (fn))\n+\t      return true;\n \n-\t      fn = TREE_OPERAND (fn, 0);\n-\t      if (is_tm_ending_fndecl (fn))\n-\t\tbreak;\n-\t      if (find_tm_replacement_function (fn))\n-\t\tbreak;\n+\t    /* For direct function calls, go ahead and check for replacement\n+\t       functions, or transitive irrevocable functions.  For indirect\n+\t       functions, we'll ask the runtime.  */\n+\t    if (TREE_CODE (fn) == ADDR_EXPR)\n+\t      {\n+\t\tstruct tm_ipa_cg_data *d;\n+\t\tstruct cgraph_node *node;\n \n-\t      node = cgraph_get_node(fn);\n-\t      d = get_cg_data (&node, true);\n+\t\tfn = TREE_OPERAND (fn, 0);\n+\t\tif (is_tm_ending_fndecl (fn))\n+\t\t  break;\n+\t\tif (find_tm_replacement_function (fn))\n+\t\t  break;\n \n-\t      /* Return true if irrevocable, but above all, believe\n-\t\t the user.  */\n-\t      if (d->is_irrevocable\n-\t\t  && !is_tm_safe_or_pure (fn))\n-\t\treturn true;\n-\t    }\n-\t  break;\n+\t\tnode = cgraph_get_node(fn);\n+\t\td = get_cg_data (&node, true);\n+\n+\t\t/* Return true if irrevocable, but above all, believe\n+\t\t   the user.  */\n+\t\tif (d->is_irrevocable\n+\t\t    && !is_tm_safe_or_pure (fn))\n+\t\t  return true;\n+\t      }\n+\t    break;\n+\t  }\n \n \tcase GIMPLE_ASM:\n \t  /* ??? The Approved Method of indicating that an inline"}]}