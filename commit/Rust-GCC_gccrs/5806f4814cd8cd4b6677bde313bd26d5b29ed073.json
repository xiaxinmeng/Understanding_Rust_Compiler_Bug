{"sha": "5806f4814cd8cd4b6677bde313bd26d5b29ed073", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgwNmY0ODE0Y2Q4Y2Q0YjY2NzdiZGUzMTNiZDI2ZDViMjllZDA3Mw==", "commit": {"author": {"name": "Paulo Matos", "email": "pmatos@broadcom.com", "date": "2013-10-16T10:09:17Z"}, "committer": {"name": "Paulo Matos", "email": "pmatos@gcc.gnu.org", "date": "2013-10-16T10:09:17Z"}, "message": "tree-core.h (tree_code_name): Remove.\n\ngcc/\n\t* tree-core.h (tree_code_name): Remove.\n\t* tree.h (get_tree_code_name): New prototype.\n\t* tree.c (tree_code_name): Make static.\n\t(get_tree_code_name): New function.\n\t(dump_tree_statistics, tree_check_failed, tree_not_check_failed, \n\ttree_class_check_failed, tree_range_check_failed,\n\ttree_not_class_check_failed, omp_clause_check_failed,\n\ttree_contains_struct_check_failed, tree_operand_check_failed): Use new\n\twrapper get_tree_code_name instead of calling tree_code_name directly.\n\t* tree-vrp.c (dump_asserts_for): Likewise.\n\t* tree-dump.c (dequeue_and_dump): Likewise.\n\t* tree-pretty-print.c (do_niy, dump_generic_node): Likewise.\n\t* tree-pretty-print.h (pp_unsupported_tree): Likewise.\n\t* lto-streamer-out.c (lto_write_tree, DFS_write_tree): Likewise.\n\t* tree-ssa-dom.c (print_expr_hash_elt): Likewise.\n\t* gimple-pretty-print.c (dump_unary_rhs, dump_binary_rhs,\n\tdump_ternary_rhs, dump_gimple_assign, dump_gimple_cond,\n\tdump_gimple_omp_for): Likewise.\n\t* tree-vect-data-refs.c (vect_create_data_ref_ptr): Likewise.\n\t* tree-ssa-pre.c (print_pre_expr): Likewise.\n\t* ipa-prop.c (ipa_print_node_jump_functions_for_edge): Likewise.\n\t* print-tree.c (print_node_brief, print_node): Likewise.\n\t* gimple.c (gimple_check_failed): Likewise.\n\t* lto-streamer.c (lto_tag_name, print_lto_report): Likewise.\n\t* config/frv/frv.c (frv_init_cumulative_args): Likewise.\n\t* config/mep/mep.c (mep_validate_vliw): Likewise.\n\t* config/iq2000/iq2000.c (init_cumulative_args): Likewise.\n\t* config/rs6000/rs6000.c (init_cumulative_args): Likewise.\n\ngcc/cp/\n\t* error.c (code_to_string): Use new wrapper get_tree_code_name.\n\t* cxx-pretty-print.c (pp_cxx_assignment_operator): Likewise.\n\t* pt.c (tsubst): Likewise.\n\t* semantics.c (cxx_eval_constant_expression,\n\tpotential_constant_expression_1): Likewise.\n\t* mangle.c (MANGLE_TRACE_TREE, dump_substitution_candidates,\n\tadd_substitution, find_substitution): Likewise.\n\nFrom-SVN: r203695", "tree": {"sha": "18b9fdf2590d9183a3aedbda66687c9d2c9b31c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18b9fdf2590d9183a3aedbda66687c9d2c9b31c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5806f4814cd8cd4b6677bde313bd26d5b29ed073", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5806f4814cd8cd4b6677bde313bd26d5b29ed073", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5806f4814cd8cd4b6677bde313bd26d5b29ed073", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5806f4814cd8cd4b6677bde313bd26d5b29ed073/comments", "author": null, "committer": null, "parents": [{"sha": "82c9df56ca621a73781b266d02b589d68a2acf8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82c9df56ca621a73781b266d02b589d68a2acf8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82c9df56ca621a73781b266d02b589d68a2acf8d"}], "stats": {"total": 198, "additions": 125, "deletions": 73}, "files": [{"sha": "8fcc0b9f57169fe29abfad292edbe3a50c6f4eac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -1,3 +1,34 @@\n+2013-10-16  Paulo Matos  <pmatos@broadcom.com>\n+\n+\t* tree-core.h (tree_code_name): Remove.\n+\t* tree.h (get_tree_code_name): New prototype.\n+\t* tree.c (tree_code_name): Make static.\n+\t(get_tree_code_name): New function.\n+\t(dump_tree_statistics, tree_check_failed, tree_not_check_failed,\n+\ttree_class_check_failed, tree_range_check_failed,\n+\ttree_not_class_check_failed, omp_clause_check_failed,\n+\ttree_contains_struct_check_failed, tree_operand_check_failed): Use new\n+\twrapper get_tree_code_name instead of calling tree_code_name directly.\n+\t* tree-vrp.c (dump_asserts_for): Likewise.\n+\t* tree-dump.c (dequeue_and_dump): Likewise.\n+\t* tree-pretty-print.c (do_niy, dump_generic_node): Likewise.\n+\t* tree-pretty-print.h (pp_unsupported_tree): Likewise.\n+\t* lto-streamer-out.c (lto_write_tree, DFS_write_tree): Likewise.\n+\t* tree-ssa-dom.c (print_expr_hash_elt): Likewise.\n+\t* gimple-pretty-print.c (dump_unary_rhs, dump_binary_rhs,\n+\tdump_ternary_rhs, dump_gimple_assign, dump_gimple_cond,\n+\tdump_gimple_omp_for): Likewise.\n+\t* tree-vect-data-refs.c (vect_create_data_ref_ptr): Likewise.\n+\t* tree-ssa-pre.c (print_pre_expr): Likewise.\n+\t* ipa-prop.c (ipa_print_node_jump_functions_for_edge): Likewise.\n+\t* print-tree.c (print_node_brief, print_node): Likewise.\n+\t* gimple.c (gimple_check_failed): Likewise.\n+\t* lto-streamer.c (lto_tag_name, print_lto_report): Likewise.\n+\t* config/frv/frv.c (frv_init_cumulative_args): Likewise.\n+\t* config/mep/mep.c (mep_validate_vliw): Likewise.\n+\t* config/iq2000/iq2000.c (init_cumulative_args): Likewise.\n+\t* config/rs6000/rs6000.c (init_cumulative_args): Likewise.\n+\n 2013-10-16 Ganesh Gopalasubramanian  <Ganesh.Gopalasubramanian@amd.com>\n \n \t* config/i386/i386.c (ix86_option_override_internal): Enable FMA4"}, {"sha": "41ae2bbfff6a9b66140fe360984330c6acee1624", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -3094,7 +3094,7 @@ frv_init_cumulative_args (CUMULATIVE_ARGS *cum,\n \t{\n \t  tree ret_type = TREE_TYPE (fntype);\n \t  fprintf (stderr, \" return=%s,\",\n-\t\t   tree_code_name[ (int)TREE_CODE (ret_type) ]);\n+\t\t   get_tree_code_name ((int)TREE_CODE (ret_type)));\n \t}\n \n       if (libname && GET_CODE (libname) == SYMBOL_REF)"}, {"sha": "da6f757d6f9b1919ce17719d9a33cc31e4d3a26d", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -1104,8 +1104,8 @@ init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype,\n \t  tree ret_type = TREE_TYPE (fntype);\n \n \t  fprintf (stderr, \", fntype code = %s, ret code = %s\\n\",\n-\t\t   tree_code_name[(int)TREE_CODE (fntype)],\n-\t\t   tree_code_name[(int)TREE_CODE (ret_type)]);\n+\t\t   get_tree_code_name (TREE_CODE (fntype)),\n+\t\t   get_tree_code_name (TREE_CODE (ret_type)));\n \t}\n     }\n "}, {"sha": "d082070eef64eab442c6f536498838464870eb6a", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -3962,7 +3962,7 @@ mep_validate_vliw (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n       static int gave_array_note = 0;\n       static const char * given_type = NULL;\n  \n-      given_type = tree_code_name[TREE_CODE (*node)];\n+      given_type = get_tree_code_name (TREE_CODE (*node));\n       if (TREE_CODE (*node) == POINTER_TYPE)\n  \tgiven_type = \"pointers\";\n       if (TREE_CODE (*node) == ARRAY_TYPE)"}, {"sha": "1523816fe63cbb728fe456faf70e690ead789166", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -8334,7 +8334,7 @@ init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype,\n \t{\n \t  tree ret_type = TREE_TYPE (fntype);\n \t  fprintf (stderr, \" ret code = %s,\",\n-\t\t   tree_code_name[ (int)TREE_CODE (ret_type) ]);\n+\t\t   get_tree_code_name (TREE_CODE (ret_type)));\n \t}\n \n       if (cum->call_cookie & CALL_LONG)"}, {"sha": "3378d618e5310926ed2b3a6e112419220c73f319", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -1,3 +1,13 @@\n+2013-10-16  Paulo Matos  <pmatos@broadcom.com>\n+\n+\t* error.c (code_to_string): Use new wrapper get_tree_code_name.\n+\t* cxx-pretty-print.c (pp_cxx_assignment_operator): Likewise.\n+\t* pt.c (tsubst): Likewise.\n+\t* semantics.c (cxx_eval_constant_expression,\n+\tpotential_constant_expression_1): Likewise.\n+\t* mangle.c (MANGLE_TRACE_TREE, dump_substitution_candidates,\n+\tadd_substitution, find_substitution): Likewise.\n+\n 2013-10-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58707"}, {"sha": "cb97fb5d59ad9e6350fe265916efddbe6df8ab32", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -971,7 +971,7 @@ pp_cxx_assignment_operator (cxx_pretty_printer *pp, tree t)\n       break;\n \n     default:\n-      op = tree_code_name[TREE_CODE (t)];\n+      op = get_tree_code_name (TREE_CODE (t));\n       break;\n     }\n "}, {"sha": "0c3cead1b2721df42effcbdae618de61fa32884e", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -2852,7 +2852,7 @@ fndecl_to_string (tree fndecl, int verbose)\n static const char *\n code_to_string (enum tree_code c)\n {\n-  return tree_code_name [c];\n+  return get_tree_code_name (c);\n }\n \n const char *"}, {"sha": "202fafceb03b9483680ba5e7c2655ae0440df780", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -69,7 +69,7 @@ along with GCC; see the file COPYING3.  If not see\n   fprintf (stderr, \"  %-24s: %-24s\\n\", (FN), (INPUT))\n # define MANGLE_TRACE_TREE(FN, NODE) \\\n   fprintf (stderr, \"  %-24s: %-24s (%p)\\n\", \\\n-\t   (FN), tree_code_name[TREE_CODE (NODE)], (void *) (NODE))\n+\t   (FN), get_tree_code_name (TREE_CODE (NODE)), (void *) (NODE))\n #else\n # define MANGLE_TRACE(FN, INPUT)\n # define MANGLE_TRACE_TREE(FN, NODE)\n@@ -329,7 +329,7 @@ dump_substitution_candidates (void)\n \t   || CP_TYPE_CONST_P (el)))\n \tfprintf (stderr, \"CV-\");\n       fprintf (stderr, \"%s (%s at %p)\\n\",\n-\t       name, tree_code_name[TREE_CODE (el)], (void *) el);\n+\t       name, get_tree_code_name (TREE_CODE (el)), (void *) el);\n     }\n }\n \n@@ -379,13 +379,13 @@ add_substitution (tree node)\n \n   if (DEBUG_MANGLE)\n     fprintf (stderr, \"  ++ add_substitution (%s at %10p)\\n\",\n-\t     tree_code_name[TREE_CODE (node)], (void *) node);\n+\t     get_tree_code_name (TREE_CODE (node)), (void *) node);\n \n   /* Get the canonicalized substitution candidate for NODE.  */\n   c = canonicalize_for_substitution (node);\n   if (DEBUG_MANGLE && c != node)\n     fprintf (stderr, \"  ++ using candidate (%s at %10p)\\n\",\n-\t     tree_code_name[TREE_CODE (node)], (void *) node);\n+\t     get_tree_code_name (TREE_CODE (node)), (void *) node);\n   node = c;\n \n #if ENABLE_CHECKING\n@@ -513,7 +513,7 @@ find_substitution (tree node)\n \n   if (DEBUG_MANGLE)\n     fprintf (stderr, \"  ++ find_substitution (%s at %p)\\n\",\n-\t     tree_code_name[TREE_CODE (node)], (void *) node);\n+\t     get_tree_code_name (TREE_CODE (node)), (void *) node);\n \n   /* Obtain the canonicalized substitution representation for NODE.\n      This is what we'll compare against.  */"}, {"sha": "95d901c73854527ee5588358db675c452ebdcc2f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -12102,7 +12102,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       gcc_unreachable ();\n \n     default:\n-      sorry (\"use of %qs in template\", tree_code_name [(int) code]);\n+      sorry (\"use of %qs in template\", get_tree_code_name ((int) code));\n       return error_mark_node;\n     }\n }"}, {"sha": "41965b643b0a590be13328b14faeb21016ef31a3", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -9656,7 +9656,7 @@ cxx_eval_constant_expression (const constexpr_call *call, tree t,\n \n     default:\n       internal_error (\"unexpected expression %qE of kind %s\", t,\n-\t\t      tree_code_name[TREE_CODE (t)]);\n+\t\t      get_tree_code_name (TREE_CODE (t)));\n       *non_constant_p = true;\n       break;\n     }\n@@ -10417,7 +10417,7 @@ potential_constant_expression_1 (tree t, bool want_rval, tsubst_flags_t flags)\n       if (objc_is_property_ref (t))\n \treturn false;\n \n-      sorry (\"unexpected AST of kind %s\", tree_code_name[TREE_CODE (t)]);\n+      sorry (\"unexpected AST of kind %s\", get_tree_code_name (TREE_CODE (t)));\n       gcc_unreachable();\n       return false;\n     }"}, {"sha": "14fb1c8c26f9b12bea9f4bb70c11e82dd66824b7", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -312,7 +312,7 @@ dump_unary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n       else\n \t{\n \t  pp_left_bracket (buffer);\n-\t  pp_string (buffer, tree_code_name [rhs_code]);\n+\t  pp_string (buffer, get_tree_code_name (rhs_code));\n \t  pp_string (buffer, \"] \");\n \t}\n \n@@ -351,7 +351,7 @@ dump_binary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n     case VEC_PACK_FIX_TRUNC_EXPR:\n     case VEC_WIDEN_LSHIFT_HI_EXPR:\n     case VEC_WIDEN_LSHIFT_LO_EXPR:\n-      for (p = tree_code_name [(int) code]; *p; p++)\n+      for (p = get_tree_code_name (code); *p; p++)\n \tpp_character (buffer, TOUPPER (*p));\n       pp_string (buffer, \" <\");\n       dump_generic_node (buffer, gimple_assign_rhs1 (gs), spc, flags, false);\n@@ -397,7 +397,7 @@ dump_ternary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n     {\n     case WIDEN_MULT_PLUS_EXPR:\n     case WIDEN_MULT_MINUS_EXPR:\n-      for (p = tree_code_name [(int) code]; *p; p++)\n+      for (p = get_tree_code_name (code); *p; p++)\n \tpp_character (buffer, TOUPPER (*p));\n       pp_string (buffer, \" <\");\n       dump_generic_node (buffer, gimple_assign_rhs1 (gs), spc, flags, false);\n@@ -495,7 +495,7 @@ dump_gimple_assign (pretty_printer *buffer, gimple gs, int spc, int flags)\n \t}\n \n       dump_gimple_fmt (buffer, spc, flags, \"%G <%s, %T, %T, %T, %T>\", gs,\n-                       tree_code_name[gimple_assign_rhs_code (gs)],\n+\t\t       get_tree_code_name (gimple_assign_rhs_code (gs)),\n                        gimple_assign_lhs (gs), arg1, arg2, arg3);\n     }\n   else\n@@ -790,9 +790,9 @@ dump_gimple_cond (pretty_printer *buffer, gimple gs, int spc, int flags)\n {\n   if (flags & TDF_RAW)\n     dump_gimple_fmt (buffer, spc, flags, \"%G <%s, %T, %T, %T, %T>\", gs,\n-                   tree_code_name [gimple_cond_code (gs)],\n-                   gimple_cond_lhs (gs), gimple_cond_rhs (gs),\n-                   gimple_cond_true_label (gs), gimple_cond_false_label (gs));\n+\t\t     get_tree_code_name (gimple_cond_code (gs)),\n+\t\t     gimple_cond_lhs (gs), gimple_cond_rhs (gs),\n+\t\t     gimple_cond_true_label (gs), gimple_cond_false_label (gs));\n   else\n     {\n       if (!(flags & TDF_RHS_ONLY))\n@@ -1113,7 +1113,7 @@ dump_gimple_omp_for (pretty_printer *buffer, gimple gs, int spc, int flags)\n \t\t\t gimple_omp_for_index (gs, i),\n \t\t\t gimple_omp_for_initial (gs, i),\n \t\t\t gimple_omp_for_final (gs, i),\n-\t\t\t tree_code_name[gimple_omp_for_cond (gs, i)],\n+\t\t\t get_tree_code_name (gimple_omp_for_cond (gs, i)),\n \t\t\t gimple_omp_for_incr (gs, i));\n       dump_gimple_fmt (buffer, spc, flags, \"PRE_BODY <%S>%->\",\n \t\t       gimple_omp_for_pre_body (gs));"}, {"sha": "9bc62c0026b17f7f92469c4de5c1a9248e502c77", "filename": "gcc/gimple.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -1200,10 +1200,10 @@ gimple_check_failed (const_gimple gs, const char *file, int line,\n {\n   internal_error (\"gimple check: expected %s(%s), have %s(%s) in %s, at %s:%d\",\n       \t\t  gimple_code_name[code],\n-\t\t  tree_code_name[subcode],\n+\t\t  get_tree_code_name (subcode),\n \t\t  gimple_code_name[gimple_code (gs)],\n \t\t  gs->gsbase.subcode > 0\n-\t\t    ? tree_code_name[gs->gsbase.subcode]\n+\t\t    ? get_tree_code_name ((enum tree_code) gs->gsbase.subcode)\n \t\t    : \"\",\n \t\t  function, trim_filename (file), line);\n }"}, {"sha": "7ec3c49e42fee028af009c1aab45525d269533e4", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -248,8 +248,7 @@ ipa_print_node_jump_functions_for_edge (FILE *f, struct cgraph_edge *cs)\n \t  fprintf (f, \"PASS THROUGH: \");\n \t  fprintf (f, \"%d, op %s\",\n \t\t   jump_func->value.pass_through.formal_id,\n-\t\t   tree_code_name[(int)\n-\t\t\t\t  jump_func->value.pass_through.operation]);\n+\t\t   get_tree_code_name(jump_func->value.pass_through.operation));\n \t  if (jump_func->value.pass_through.operation != NOP_EXPR)\n \t    {\n \t      fprintf (f, \" \");"}, {"sha": "35ad1cf0c80b65c6e2bcfb52876533d5aa5b9755", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -367,7 +367,7 @@ lto_write_tree (struct output_block *ob, tree expr, bool ref_p)\n {\n   if (!lto_is_streamable (expr))\n     internal_error (\"tree code %qs is not supported in LTO streams\",\n-\t\t    tree_code_name[TREE_CODE (expr)]);\n+\t\t    get_tree_code_name (TREE_CODE (expr)));\n \n   /* Write the header, containing everything needed to materialize\n      EXPR on the reading side.  */\n@@ -1241,7 +1241,7 @@ DFS_write_tree (struct output_block *ob, sccs *from_state,\n \t\t  if (!lto_is_streamable (t))\n \t\t    internal_error (\"tree code %qs is not supported \"\n \t\t\t\t    \"in LTO streams\",\n-\t\t\t\t    tree_code_name[TREE_CODE (t)]);\n+\t\t\t\t    get_tree_code_name (TREE_CODE (t)));\n \n \t\t  gcc_checking_assert (!streamer_handle_as_builtin_p (t));\n "}, {"sha": "f1d3b69127d164108c25488040072bdab1931686", "filename": "gcc/lto-streamer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Flto-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Flto-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -54,7 +54,7 @@ lto_tag_name (enum LTO_tags tag)\n     {\n       /* For tags representing tree nodes, return the name of the\n \t associated tree code.  */\n-      return tree_code_name[lto_tag_to_tree_code (tag)];\n+      return get_tree_code_name (lto_tag_to_tree_code (tag));\n     }\n \n   if (lto_tag_is_gimple_code_p (tag))\n@@ -199,7 +199,7 @@ print_lto_report (const char *s)\n     if (lto_stats.num_trees[i])\n       fprintf (stderr, \"[%s] # of '%s' objects read: \"\n \t       HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\", s,\n-\t       tree_code_name[i], lto_stats.num_trees[i]);\n+\t       get_tree_code_name ((enum tree_code) i), lto_stats.num_trees[i]);\n \n   if (flag_lto)\n     {"}, {"sha": "2b9aa704becbb93d4cd1364916549ee1ef45dd97", "filename": "gcc/print-tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -71,7 +71,7 @@ print_node_brief (FILE *file, const char *prefix, const_tree node, int indent)\n      name if any.  */\n   if (indent > 0)\n     fprintf (file, \" \");\n-  fprintf (file, \"%s <%s\", prefix, tree_code_name[(int) TREE_CODE (node)]);\n+  fprintf (file, \"%s <%s\", prefix, get_tree_code_name (TREE_CODE (node)));\n   dump_addr (file, \" \", node);\n \n   if (tclass == tcc_declaration)\n@@ -247,7 +247,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n   indent_to (file, indent);\n \n   /* Print the slot this node is in, and its code, and address.  */\n-  fprintf (file, \"%s <%s\", prefix, tree_code_name[(int) code]);\n+  fprintf (file, \"%s <%s\", prefix, get_tree_code_name (code));\n   dump_addr (file, \" \", node);\n \n   /* Print the name, if any.  */"}, {"sha": "c7fc84f87ada7fd4a00934d6f5b9cd763d2f4189", "filename": "gcc/tree-core.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -1753,9 +1753,6 @@ extern const char *const tree_code_class_strings[];\n /* Number of argument-words in each kind of tree-node.  */\n extern const unsigned char tree_code_length[];\n \n-/* Names of tree components.  */\n-extern const char *const tree_code_name[];\n-\n /* Vector of all alias pairs for global symbols.  */\n extern GTY(()) vec<alias_pair, va_gc> *alias_pairs;\n "}, {"sha": "6b16caa9469fc06a8cbbde69bbf00735b5deb280", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -278,7 +278,7 @@ dequeue_and_dump (dump_info_p di)\n   if (dni->binfo_p)\n     code_name = \"binfo\";\n   else\n-    code_name = tree_code_name[(int) TREE_CODE (t)];\n+    code_name = get_tree_code_name (TREE_CODE (t));\n   fprintf (di->stream, \"%-16s \", code_name);\n   di->column = 25;\n "}, {"sha": "f8a0342f9441108e778b6473dbaa30988df30ce5", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -59,7 +59,7 @@ do_niy (pretty_printer *buffer, const_tree node)\n   int i, len;\n \n   pp_string (buffer, \"<<< Unknown tree: \");\n-  pp_string (buffer, tree_code_name[(int) TREE_CODE (node)]);\n+  pp_string (buffer, get_tree_code_name (TREE_CODE (node)));\n \n   if (EXPR_P (node))\n     {\n@@ -2569,7 +2569,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n     case VEC_WIDEN_LSHIFT_HI_EXPR:\n     case VEC_WIDEN_LSHIFT_LO_EXPR:\n       pp_space (buffer);\n-      for (str = tree_code_name [code]; *str; str++)\n+      for (str = get_tree_code_name (code); *str; str++)\n \tpp_character (buffer, TOUPPER (*str));\n       pp_string (buffer, \" < \");\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);"}, {"sha": "8754b0a219526355af3ca6cceb517f12f0c4564c", "filename": "gcc/tree-pretty-print.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Ftree-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Ftree-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.h?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #define pp_unsupported_tree(PP, T)                         \\\n   pp_verbatim (PP, \"#%qs not supported by %s#\", \\\n-               tree_code_name[(int) TREE_CODE (T)], __FUNCTION__)\n+\t       get_tree_code_name (TREE_CODE (T)), __FUNCTION__)\n \n #define pp_ti_abstract_origin(TI) ((tree *) (TI)->x_data)\n "}, {"sha": "b2c7e147ef67724c7c484ebd64ff6d33b9500c28", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -639,18 +639,18 @@ print_expr_hash_elt (FILE * stream, const struct expr_hash_elt *element)\n         break;\n \n       case EXPR_UNARY:\n-        fprintf (stream, \"%s \", tree_code_name[element->expr.ops.unary.op]);\n+\tfprintf (stream, \"%s \", get_tree_code_name (element->expr.ops.unary.op));\n         print_generic_expr (stream, element->expr.ops.unary.opnd, 0);\n         break;\n \n       case EXPR_BINARY:\n         print_generic_expr (stream, element->expr.ops.binary.opnd0, 0);\n-        fprintf (stream, \" %s \", tree_code_name[element->expr.ops.binary.op]);\n+\tfprintf (stream, \" %s \", get_tree_code_name (element->expr.ops.binary.op));\n         print_generic_expr (stream, element->expr.ops.binary.opnd1, 0);\n         break;\n \n       case EXPR_TERNARY:\n-        fprintf (stream, \" %s <\", tree_code_name[element->expr.ops.ternary.op]);\n+\tfprintf (stream, \" %s <\", get_tree_code_name (element->expr.ops.ternary.op));\n         print_generic_expr (stream, element->expr.ops.ternary.opnd0, 0);\n \tfputs (\", \", stream);\n         print_generic_expr (stream, element->expr.ops.ternary.opnd1, 0);"}, {"sha": "4774f39ae7cbe2144692d006cc8ff6f62a80c191", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -911,7 +911,7 @@ print_pre_expr (FILE *outfile, const pre_expr expr)\n       {\n \tunsigned int i;\n \tvn_nary_op_t nary = PRE_EXPR_NARY (expr);\n-\tfprintf (outfile, \"{%s,\", tree_code_name [nary->opcode]);\n+\tfprintf (outfile, \"{%s,\", get_tree_code_name (nary->opcode));\n \tfor (i = 0; i < nary->length; i++)\n \t  {\n \t    print_generic_expr (outfile, nary->op[i], 0);\n@@ -936,7 +936,7 @@ print_pre_expr (FILE *outfile, const pre_expr expr)\n \t    if (vro->opcode != SSA_NAME\n \t\t&& TREE_CODE_CLASS (vro->opcode) != tcc_declaration)\n \t      {\n-\t\tfprintf (outfile, \"%s\", tree_code_name [vro->opcode]);\n+\t\tfprintf (outfile, \"%s\", get_tree_code_name (vro->opcode));\n \t\tif (vro->op0)\n \t\t  {\n \t\t    fprintf (outfile, \"<\");"}, {"sha": "e87e774e5e45212510a7b5a1887efbd5cab6a7d8", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -3754,7 +3754,7 @@ vect_create_data_ref_ptr (gimple stmt, tree aggr_type, struct loop *at_loop,\n       tree dr_base_type = TREE_TYPE (DR_BASE_OBJECT (dr));\n       dump_printf_loc (MSG_NOTE, vect_location,\n                        \"create %s-pointer variable to type: \",\n-                       tree_code_name[(int) TREE_CODE (aggr_type)]);\n+\t\t       get_tree_code_name (TREE_CODE (aggr_type)));\n       dump_generic_expr (MSG_NOTE, TDF_SLIM, aggr_type);\n       if (TREE_CODE (dr_base_type) == ARRAY_TYPE)\n         dump_printf (MSG_NOTE, \"  vectorizing an array ref: \");"}, {"sha": "2bc15812e5a0a8d3d82589f4dff2862a4d047b74", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -4585,7 +4585,7 @@ dump_asserts_for (FILE *file, tree name)\n \t}\n       fprintf (file, \"\\n\\tPREDICATE: \");\n       print_generic_expr (file, name, 0);\n-      fprintf (file, \" %s \", tree_code_name[(int)loc->comp_code]);\n+      fprintf (file, \" %s \", get_tree_code_name (loc->comp_code));\n       print_generic_expr (file, loc->val, 0);\n       fprintf (file, \"\\n\\n\");\n       loc = loc->next;"}, {"sha": "f1dddb75de96874ad640cc9ba8da27cae807bf1b", "filename": "gcc/tree.c", "status": "modified", "additions": 39, "deletions": 26, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -91,7 +91,7 @@ const unsigned char tree_code_length[] = {\n #define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n #define END_OF_BASE_TREE_CODES \"@dummy\",\n \n-const char *const tree_code_name[] = {\n+static const char *const tree_code_name[] = {\n #include \"all-tree.def\"\n };\n \n@@ -9098,7 +9098,8 @@ dump_tree_statistics (void)\n       fprintf (stderr, \"Code                   Nodes\\n\");\n       fprintf (stderr, \"----------------------------\\n\");\n       for (i = 0; i < (int) MAX_TREE_CODES; i++)\n-\tfprintf (stderr, \"%-20s %7d\\n\", tree_code_name[i], tree_code_counts[i]);\n+\tfprintf (stderr, \"%-20s %7d\\n\", get_tree_code_name ((enum tree_code) i),\n+                 tree_code_counts[i]);\n       fprintf (stderr, \"----------------------------\\n\");\n       ssanames_print_statistics ();\n       phinodes_print_statistics ();\n@@ -9268,11 +9269,11 @@ tree_check_failed (const_tree node, const char *file,\n   va_list args;\n   const char *buffer;\n   unsigned length = 0;\n-  int code;\n+  enum tree_code code;\n \n   va_start (args, function);\n-  while ((code = va_arg (args, int)))\n-    length += 4 + strlen (tree_code_name[code]);\n+  while ((code = (enum tree_code) va_arg (args, int)))\n+    length += 4 + strlen (get_tree_code_name (code));\n   va_end (args);\n   if (length)\n     {\n@@ -9281,22 +9282,22 @@ tree_check_failed (const_tree node, const char *file,\n       length += strlen (\"expected \");\n       buffer = tmp = (char *) alloca (length);\n       length = 0;\n-      while ((code = va_arg (args, int)))\n+      while ((code = (enum tree_code) va_arg (args, int)))\n \t{\n \t  const char *prefix = length ? \" or \" : \"expected \";\n \n \t  strcpy (tmp + length, prefix);\n \t  length += strlen (prefix);\n-\t  strcpy (tmp + length, tree_code_name[code]);\n-\t  length += strlen (tree_code_name[code]);\n+\t  strcpy (tmp + length, get_tree_code_name (code));\n+\t  length += strlen (get_tree_code_name (code));\n \t}\n       va_end (args);\n     }\n   else\n     buffer = \"unexpected node\";\n \n   internal_error (\"tree check: %s, have %s in %s, at %s:%d\",\n-\t\t  buffer, tree_code_name[TREE_CODE (node)],\n+\t\t  buffer, get_tree_code_name (TREE_CODE (node)),\n \t\t  function, trim_filename (file), line);\n }\n \n@@ -9311,29 +9312,29 @@ tree_not_check_failed (const_tree node, const char *file,\n   va_list args;\n   char *buffer;\n   unsigned length = 0;\n-  int code;\n+  enum tree_code code;\n \n   va_start (args, function);\n-  while ((code = va_arg (args, int)))\n-    length += 4 + strlen (tree_code_name[code]);\n+  while ((code = (enum tree_code) va_arg (args, int)))\n+    length += 4 + strlen (get_tree_code_name (code));\n   va_end (args);\n   va_start (args, function);\n   buffer = (char *) alloca (length);\n   length = 0;\n-  while ((code = va_arg (args, int)))\n+  while ((code = (enum tree_code) va_arg (args, int)))\n     {\n       if (length)\n \t{\n \t  strcpy (buffer + length, \" or \");\n \t  length += 4;\n \t}\n-      strcpy (buffer + length, tree_code_name[code]);\n-      length += strlen (tree_code_name[code]);\n+      strcpy (buffer + length, get_tree_code_name (code));\n+      length += strlen (get_tree_code_name (code));\n     }\n   va_end (args);\n \n   internal_error (\"tree check: expected none of %s, have %s in %s, at %s:%d\",\n-\t\t  buffer, tree_code_name[TREE_CODE (node)],\n+\t\t  buffer, get_tree_code_name (TREE_CODE (node)),\n \t\t  function, trim_filename (file), line);\n }\n \n@@ -9348,7 +9349,7 @@ tree_class_check_failed (const_tree node, const enum tree_code_class cl,\n     (\"tree check: expected class %qs, have %qs (%s) in %s, at %s:%d\",\n      TREE_CODE_CLASS_STRING (cl),\n      TREE_CODE_CLASS_STRING (TREE_CODE_CLASS (TREE_CODE (node))),\n-     tree_code_name[TREE_CODE (node)], function, trim_filename (file), line);\n+     get_tree_code_name (TREE_CODE (node)), function, trim_filename (file), line);\n }\n \n /* Similar to tree_check_failed, except that instead of specifying a\n@@ -9364,7 +9365,7 @@ tree_range_check_failed (const_tree node, const char *file, int line,\n   unsigned int c;\n \n   for (c = c1; c <= c2; ++c)\n-    length += 4 + strlen (tree_code_name[c]);\n+    length += 4 + strlen (get_tree_code_name ((enum tree_code) c));\n \n   length += strlen (\"expected \");\n   buffer = (char *) alloca (length);\n@@ -9376,12 +9377,12 @@ tree_range_check_failed (const_tree node, const char *file, int line,\n \n       strcpy (buffer + length, prefix);\n       length += strlen (prefix);\n-      strcpy (buffer + length, tree_code_name[c]);\n-      length += strlen (tree_code_name[c]);\n+      strcpy (buffer + length, get_tree_code_name ((enum tree_code) c));\n+      length += strlen (get_tree_code_name ((enum tree_code) c));\n     }\n \n   internal_error (\"tree check: %s, have %s in %s, at %s:%d\",\n-\t\t  buffer, tree_code_name[TREE_CODE (node)],\n+\t\t  buffer, get_tree_code_name (TREE_CODE (node)),\n \t\t  function, trim_filename (file), line);\n }\n \n@@ -9397,7 +9398,7 @@ tree_not_class_check_failed (const_tree node, const enum tree_code_class cl,\n     (\"tree check: did not expect class %qs, have %qs (%s) in %s, at %s:%d\",\n      TREE_CODE_CLASS_STRING (cl),\n      TREE_CODE_CLASS_STRING (TREE_CODE_CLASS (TREE_CODE (node))),\n-     tree_code_name[TREE_CODE (node)], function, trim_filename (file), line);\n+     get_tree_code_name (TREE_CODE (node)), function, trim_filename (file), line);\n }\n \n \n@@ -9408,7 +9409,7 @@ omp_clause_check_failed (const_tree node, const char *file, int line,\n                          const char *function, enum omp_clause_code code)\n {\n   internal_error (\"tree check: expected omp_clause %s, have %s in %s, at %s:%d\",\n-\t\t  omp_clause_code_name[code], tree_code_name[TREE_CODE (node)],\n+\t\t  omp_clause_code_name[code], get_tree_code_name (TREE_CODE (node)),\n \t\t  function, trim_filename (file), line);\n }\n \n@@ -9469,7 +9470,7 @@ tree_contains_struct_check_failed (const_tree node,\n   internal_error\n     (\"tree check: expected tree that contains %qs structure, have %qs in %s, at %s:%d\",\n      TS_ENUM_NAME (en),\n-     tree_code_name[TREE_CODE (node)], function, trim_filename (file), line);\n+     get_tree_code_name (TREE_CODE (node)), function, trim_filename (file), line);\n }\n \n \n@@ -9492,10 +9493,10 @@ void\n tree_operand_check_failed (int idx, const_tree exp, const char *file,\n \t\t\t   int line, const char *function)\n {\n-  int code = TREE_CODE (exp);\n+  enum tree_code code = TREE_CODE (exp);\n   internal_error\n     (\"tree check: accessed operand %d of %s with %d operands in %s, at %s:%d\",\n-     idx + 1, tree_code_name[code], TREE_OPERAND_LENGTH (exp),\n+     idx + 1, get_tree_code_name (code), TREE_OPERAND_LENGTH (exp),\n      function, trim_filename (file), line);\n }\n \n@@ -12407,4 +12408,16 @@ using_eh_for_cleanups_p (void)\n   return using_eh_for_cleanups_flag;\n }\n \n+/* Wrapper for tree_code_name to ensure that tree code is valid */\n+const char *\n+get_tree_code_name (enum tree_code code)\n+{\n+  const char *invalid = \"<invalid tree code>\";\n+\n+  if (code >= MAX_TREE_CODES)\n+    return invalid;\n+\n+  return tree_code_name[code];\n+}\n+\n #include \"gt-tree.h\""}, {"sha": "2b6e762cbe8455c40c88173824c3b3ad9ed57279", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5806f4814cd8cd4b6677bde313bd26d5b29ed073/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5806f4814cd8cd4b6677bde313bd26d5b29ed073", "patch": "@@ -4593,6 +4593,8 @@ extern bool block_may_fallthru (const_tree);\n extern void using_eh_for_cleanups (void);\n extern bool using_eh_for_cleanups_p (void);\n \n+extern const char *get_tree_code_name (enum tree_code);\n+\n /* In tree-nested.c */\n extern tree build_addr (tree, tree);\n "}]}