{"sha": "3b3bd801520e707d113c0f81e028abae023c4d3a", "node_id": "C_kwDOANBUbNoAKDNiM2JkODAxNTIwZTcwN2QxMTNjMGY4MWUwMjhhYmFlMDIzYzRkM2E", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2021-12-29T07:10:46Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-10T08:19:30Z"}, "message": "[Ada] Optimize nonstandard boolean validity checking\n\nValidity checking of enumerations with nonstandard representation\nstarts by checking the value range, then calling _rep_to_pos to verify\nthat the value itself is valid. The value range check is thus\nredundant and inefficient: the _rep_to_pos call is normally inlined\nwhen optimizing for speed and the range check slows down the fast\npath; it is unnecesary and undesirable when optimizing for size, and\njust unnecessary when not optimizing. This patch thus drops the range\ncheck for nonstandard boolean types.\n\ngcc/ada/\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference) <Attribute_Valid>:\n\tDrop redundant range check for nonstandard booleans.", "tree": {"sha": "0f0f231dd2436103c1feda325aa43a39ddae2d14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f0f231dd2436103c1feda325aa43a39ddae2d14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b3bd801520e707d113c0f81e028abae023c4d3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b3bd801520e707d113c0f81e028abae023c4d3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b3bd801520e707d113c0f81e028abae023c4d3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b3bd801520e707d113c0f81e028abae023c4d3a/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf687b8085403b94209269e15491f286644ec10b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf687b8085403b94209269e15491f286644ec10b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf687b8085403b94209269e15491f286644ec10b"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "cc04351391190612c06a26ceebc858bf8a5f0821", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b3bd801520e707d113c0f81e028abae023c4d3a/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b3bd801520e707d113c0f81e028abae023c4d3a/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=3b3bd801520e707d113c0f81e028abae023c4d3a", "patch": "@@ -7281,7 +7281,11 @@ package body Exp_Attr is\n                       New_Occurrence_Of (Standard_False, Loc))),\n                 Right_Opnd => Make_Integer_Literal (Loc, 0));\n \n-            if Ptyp /= PBtyp\n+            --  Skip the range test for boolean types, as it buys us\n+            --  nothing. The function called above already fails for\n+            --  values different from both True and False.\n+\n+            if Ptyp /= PBtyp and then not Is_Boolean_Type (PBtyp)\n               and then\n                 (Type_Low_Bound (Ptyp) /= Type_Low_Bound (PBtyp)\n                   or else"}]}