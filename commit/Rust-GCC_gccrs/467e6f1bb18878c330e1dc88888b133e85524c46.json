{"sha": "467e6f1bb18878c330e1dc88888b133e85524c46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY3ZTZmMWJiMTg4NzhjMzMwZTFkYzg4ODg4YjEzM2U4NTUyNGM0Ng==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2017-12-27T11:47:45Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2017-12-27T11:47:45Z"}, "message": "aarch64-simd.md (aarch64_ld1x2<VQ:mode>): New.\n\ngcc/ChangeLog:\n\n2017-12-27  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* config/aarch64/aarch64-simd.md (aarch64_ld1x2<VQ:mode>): New.\n\t(aarch64_ld1x2<VDC:mode>): Likewise.\n\t(aarch64_simd_ld1<mode>_x2): Likewise.\n\t(aarch64_simd_ld1<mode>_x2): Likewise.\n\t* config/aarch64/arm_neon.h (vld1_u8_x2): New.\n\t(vld1_s8_x2): Likewise.\n\t(vld1_u16_x2): Likewise.\n\t(vld1_s16_x2): Likewise.\n\t(vld1_u32_x2): Likewise.\n\t(vld1_s32_x2): Likewise.\n\t(vld1_u64_x2): Likewise.\n\t(vld1_s64_x2): Likewise.\n\t(vld1_f16_x2): Likewise.\n\t(vld1_f32_x2): Likewise.\n\t(vld1_f64_x2): Likewise.\n\t(vld1_p8_x2): Likewise.\n\t(vld1_p16_x2): Likewise.\n\t(vld1_p64_x2): Likewise.\n\t(vld1q_u8_x2): Likewise.\n\t(vld1q_s8_x2): Likewise.\n\t(vld1q_u16_x2): Likewise.\n\t(vld1q_s16_x2): Likewise.\n\t(vld1q_u32_x2): Likewise.\n\t(vld1q_s32_x2): Likewise.\n\t(vld1q_u64_x2): Likewise.\n\t(vld1q_s64_x2): Likewise.\n\t(vld1q_f16_x2): Likewise.\n\t(vld1q_f32_x2): Likewise.\n\t(vld1q_f64_x2): Likewise.\n\t(vld1q_p8_x2): Likewise.\n\t(vld1q_p16_x2): Likewise.\n\t(vld1q_p64_x2): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2017-12-27  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vld1x2.c: New test.\n\nFrom-SVN: r256010", "tree": {"sha": "9c014f4b1566d20eeda07c8c550019e2ac7a0707", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c014f4b1566d20eeda07c8c550019e2ac7a0707"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/467e6f1bb18878c330e1dc88888b133e85524c46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467e6f1bb18878c330e1dc88888b133e85524c46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/467e6f1bb18878c330e1dc88888b133e85524c46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467e6f1bb18878c330e1dc88888b133e85524c46/comments", "author": null, "committer": null, "parents": [{"sha": "96863f32b5d83961fc1cb073707f0cf53a475639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96863f32b5d83961fc1cb073707f0cf53a475639", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96863f32b5d83961fc1cb073707f0cf53a475639"}], "stats": {"total": 500, "additions": 499, "deletions": 1}, "files": [{"sha": "4130edafea6be99304f45084a47a489c7be71f3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467e6f1bb18878c330e1dc88888b133e85524c46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467e6f1bb18878c330e1dc88888b133e85524c46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=467e6f1bb18878c330e1dc88888b133e85524c46", "patch": "@@ -1,3 +1,38 @@\n+2017-12-27  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_ld1x2<VQ:mode>): New.\n+\t(aarch64_ld1x2<VDC:mode>): Likewise.\n+\t(aarch64_simd_ld1<mode>_x2): Likewise.\n+\t(aarch64_simd_ld1<mode>_x2): Likewise.\n+\t* config/aarch64/arm_neon.h (vld1_u8_x2): New.\n+\t(vld1_s8_x2): Likewise.\n+\t(vld1_u16_x2): Likewise.\n+\t(vld1_s16_x2): Likewise.\n+\t(vld1_u32_x2): Likewise.\n+\t(vld1_s32_x2): Likewise.\n+\t(vld1_u64_x2): Likewise.\n+\t(vld1_s64_x2): Likewise.\n+\t(vld1_f16_x2): Likewise.\n+\t(vld1_f32_x2): Likewise.\n+\t(vld1_f64_x2): Likewise.\n+\t(vld1_p8_x2): Likewise.\n+\t(vld1_p16_x2): Likewise.\n+\t(vld1_p64_x2): Likewise.\n+\t(vld1q_u8_x2): Likewise.\n+\t(vld1q_s8_x2): Likewise.\n+\t(vld1q_u16_x2): Likewise.\n+\t(vld1q_s16_x2): Likewise.\n+\t(vld1q_u32_x2): Likewise.\n+\t(vld1q_s32_x2): Likewise.\n+\t(vld1q_u64_x2): Likewise.\n+\t(vld1q_s64_x2): Likewise.\n+\t(vld1q_f16_x2): Likewise.\n+\t(vld1q_f32_x2): Likewise.\n+\t(vld1q_f64_x2): Likewise.\n+\t(vld1q_p8_x2): Likewise.\n+\t(vld1q_p16_x2): Likewise.\n+\t(vld1q_p64_x2): Likewise.\n+\n 2017-12-27  Martin Liska  <mliska@suse.cz>\n \n \tPR tree-optimization/83552"}, {"sha": "94afff94f7ced98bdb3d5259105b97001bc23b7a", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467e6f1bb18878c330e1dc88888b133e85524c46/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467e6f1bb18878c330e1dc88888b133e85524c46/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=467e6f1bb18878c330e1dc88888b133e85524c46", "patch": "@@ -86,6 +86,10 @@\n   VAR1 (SETREGP, set_qregoi, 0, v2di)\n   VAR1 (SETREGP, set_qregci, 0, v2di)\n   VAR1 (SETREGP, set_qregxi, 0, v2di)\n+  /* Implemented by aarch64_ld1x2<VQ:mode>. */\n+  BUILTIN_VQ (LOADSTRUCT, ld1x2, 0)\n+  /* Implemented by aarch64_ld1x2<VDC:mode>. */\n+  BUILTIN_VDC (LOADSTRUCT, ld1x2, 0)\n   /* Implemented by aarch64_ld<VSTRUCT:nregs><VDC:mode>.  */\n   BUILTIN_VDC (LOADSTRUCT, ld2, 0)\n   BUILTIN_VDC (LOADSTRUCT, ld3, 0)\n@@ -571,4 +575,4 @@\n   BUILTIN_GPI (UNOP, fix_truncdf, 2)\n   BUILTIN_GPI_I16 (UNOPUS, fixuns_trunchf, 2)\n   BUILTIN_GPI (UNOPUS, fixuns_truncsf, 2)\n-  BUILTIN_GPI (UNOPUS, fixuns_truncdf, 2)\n\\ No newline at end of file\n+  BUILTIN_GPI (UNOPUS, fixuns_truncdf, 2)"}, {"sha": "84c4f8286c081deaa3e4bfa26de66abcb4495990", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467e6f1bb18878c330e1dc88888b133e85524c46/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467e6f1bb18878c330e1dc88888b133e85524c46/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=467e6f1bb18878c330e1dc88888b133e85524c46", "patch": "@@ -5296,6 +5296,33 @@\n   DONE;\n })\n \n+(define_expand \"aarch64_ld1x2<VQ:mode>\"\n+ [(match_operand:OI 0 \"register_operand\" \"=w\")\n+  (match_operand:DI 1 \"register_operand\" \"r\")\n+  (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+  \"TARGET_SIMD\"\n+{\n+  machine_mode mode = OImode;\n+  rtx mem = gen_rtx_MEM (mode, operands[1]);\n+\n+  emit_insn (gen_aarch64_simd_ld1<VQ:mode>_x2 (operands[0], mem));\n+  DONE;\n+})\n+\n+(define_expand \"aarch64_ld1x2<VDC:mode>\"\n+ [(match_operand:OI 0 \"register_operand\" \"=w\")\n+  (match_operand:DI 1 \"register_operand\" \"r\")\n+  (unspec:VDC [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+  \"TARGET_SIMD\"\n+{\n+  machine_mode mode = OImode;\n+  rtx mem = gen_rtx_MEM (mode, operands[1]);\n+\n+  emit_insn (gen_aarch64_simd_ld1<VDC:mode>_x2 (operands[0], mem));\n+  DONE;\n+})\n+\n+\n (define_expand \"aarch64_ld<VSTRUCT:nregs>_lane<VALLDIF:mode>\"\n   [(match_operand:VSTRUCT 0 \"register_operand\" \"=w\")\n \t(match_operand:DI 1 \"register_operand\" \"w\")\n@@ -5692,6 +5719,27 @@\n   [(set_attr \"type\" \"neon_load1_all_lanes\")]\n )\n \n+(define_insn \"aarch64_simd_ld1<mode>_x2\"\n+  [(set (match_operand:OI 0 \"register_operand\" \"=w\")\n+\t(unspec:OI [(match_operand:OI 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+\t\t    (unspec:VQ [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t\t   UNSPEC_LD1))]\n+  \"TARGET_SIMD\"\n+  \"ld1\\\\t{%S0.<Vtype> - %T0.<Vtype>}, %1\"\n+  [(set_attr \"type\" \"neon_load1_2reg<q>\")]\n+)\n+\n+(define_insn \"aarch64_simd_ld1<mode>_x2\"\n+  [(set (match_operand:OI 0 \"register_operand\" \"=w\")\n+\t(unspec:OI [(match_operand:OI 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+\t\t    (unspec:VDC [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t\t   UNSPEC_LD1))]\n+  \"TARGET_SIMD\"\n+  \"ld1\\\\t{%S0.<Vtype> - %T0.<Vtype>}, %1\"\n+  [(set_attr \"type\" \"neon_load1_2reg<q>\")]\n+)\n+\n+\n (define_insn \"aarch64_frecpe<mode>\"\n   [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n \t(unspec:VHSDF [(match_operand:VHSDF 1 \"register_operand\" \"w\")]"}, {"sha": "6d6ba4fae3e00eeee11511de3ca5f6658e7e77c0", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 336, "deletions": 0, "changes": 336, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467e6f1bb18878c330e1dc88888b133e85524c46/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467e6f1bb18878c330e1dc88888b133e85524c46/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=467e6f1bb18878c330e1dc88888b133e85524c46", "patch": "@@ -17228,6 +17228,342 @@ vld1q_u8 (const uint8_t *a)\n     __builtin_aarch64_ld1v16qi ((const __builtin_aarch64_simd_qi *) a);\n }\n \n+__extension__ extern __inline uint8x8x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_u8_x2 (const uint8_t *__a)\n+{\n+  uint8x8x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v8qi ((const __builtin_aarch64_simd_qi *) __a);\n+  ret.val[0] = (uint8x8_t) __builtin_aarch64_get_dregoiv8qi (__o, 0);\n+  ret.val[1] = (uint8x8_t) __builtin_aarch64_get_dregoiv8qi (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline int8x8x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_s8_x2 (const int8_t *__a)\n+{\n+  int8x8x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v8qi ((const __builtin_aarch64_simd_qi *) __a);\n+  ret.val[0] = (int8x8_t) __builtin_aarch64_get_dregoiv8qi (__o, 0);\n+  ret.val[1] = (int8x8_t) __builtin_aarch64_get_dregoiv8qi (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline uint16x4x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_u16_x2 (const uint16_t *__a)\n+{\n+  uint16x4x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v4hi ((const __builtin_aarch64_simd_hi *) __a);\n+  ret.val[0] = (uint16x4_t) __builtin_aarch64_get_dregoiv4hi (__o, 0);\n+  ret.val[1] = (uint16x4_t) __builtin_aarch64_get_dregoiv4hi (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline int16x4x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_s16_x2 (const int16_t *__a)\n+{\n+  int16x4x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v4hi ((const __builtin_aarch64_simd_hi *) __a);\n+  ret.val[0] = (int16x4_t) __builtin_aarch64_get_dregoiv4hi (__o, 0);\n+  ret.val[1] = (int16x4_t) __builtin_aarch64_get_dregoiv4hi (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline uint32x2x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_u32_x2 (const uint32_t *__a)\n+{\n+  uint32x2x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v2si ((const __builtin_aarch64_simd_si *) __a);\n+  ret.val[0] = (uint32x2_t) __builtin_aarch64_get_dregoiv2si (__o, 0);\n+  ret.val[1] = (uint32x2_t) __builtin_aarch64_get_dregoiv2si (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline int32x2x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_s32_x2 (const int32_t *__a)\n+{\n+  int32x2x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v2si ((const __builtin_aarch64_simd_si *) __a);\n+  ret.val[0] = (int32x2_t) __builtin_aarch64_get_dregoiv2si (__o, 0);\n+  ret.val[1] = (int32x2_t) __builtin_aarch64_get_dregoiv2si (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline uint64x1x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_u64_x2 (const uint64_t *__a)\n+{\n+  uint64x1x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2di ((const __builtin_aarch64_simd_di *) __a);\n+  ret.val[0] = (uint64x1_t) __builtin_aarch64_get_dregoidi (__o, 0);\n+  ret.val[1] = (uint64x1_t) __builtin_aarch64_get_dregoidi (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline int64x1x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_s64_x2 (const int64_t *__a)\n+{\n+  int64x1x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2di ((const __builtin_aarch64_simd_di *) __a);\n+  ret.val[0] = (int64x1_t) __builtin_aarch64_get_dregoidi (__o, 0);\n+  ret.val[1] = (int64x1_t) __builtin_aarch64_get_dregoidi (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline float16x4x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_f16_x2 (const float16_t *__a)\n+{\n+  float16x4x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v4hf ((const __builtin_aarch64_simd_hf *) __a);\n+  ret.val[0] = (float16x4_t) __builtin_aarch64_get_dregoiv4hf (__o, 0);\n+  ret.val[1] = (float16x4_t) __builtin_aarch64_get_dregoiv4hf (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline float32x2x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_f32_x2 (const float32_t *__a)\n+{\n+  float32x2x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v2sf ((const __builtin_aarch64_simd_sf *) __a);\n+  ret.val[0] = (float32x2_t) __builtin_aarch64_get_dregoiv2sf (__o, 0);\n+  ret.val[1] = (float32x2_t) __builtin_aarch64_get_dregoiv2sf (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline float64x1x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_f64_x2 (const float64_t *__a)\n+{\n+  float64x1x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2df ((const __builtin_aarch64_simd_df *) __a);\n+  ret.val[0] = (float64x1_t) {__builtin_aarch64_get_dregoidf (__o, 0)};\n+  ret.val[1] = (float64x1_t) {__builtin_aarch64_get_dregoidf (__o, 1)};\n+  return ret;\n+}\n+\n+__extension__ extern __inline poly8x8x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_p8_x2 (const poly8_t *__a)\n+{\n+  poly8x8x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v8qi ((const __builtin_aarch64_simd_qi *) __a);\n+  ret.val[0] = (poly8x8_t) __builtin_aarch64_get_dregoiv8qi (__o, 0);\n+  ret.val[1] = (poly8x8_t) __builtin_aarch64_get_dregoiv8qi (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline poly16x4x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_p16_x2 (const poly16_t *__a)\n+{\n+  poly16x4x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v4hi ((const __builtin_aarch64_simd_hi *) __a);\n+  ret.val[0] = (poly16x4_t) __builtin_aarch64_get_dregoiv4hi (__o, 0);\n+  ret.val[1] = (poly16x4_t) __builtin_aarch64_get_dregoiv4hi (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline poly64x1x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_p64_x2 (const poly64_t *__a)\n+{\n+  poly64x1x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2di ((const __builtin_aarch64_simd_di *) __a);\n+  ret.val[0] = (poly64x1_t) __builtin_aarch64_get_dregoidi (__o, 0);\n+  ret.val[1] = (poly64x1_t) __builtin_aarch64_get_dregoidi (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline uint8x16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_u8_x2 (const uint8_t *__a)\n+{\n+  uint8x16x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v16qi ((const __builtin_aarch64_simd_qi *) __a);\n+  ret.val[0] = (uint8x16_t) __builtin_aarch64_get_qregoiv16qi (__o, 0);\n+  ret.val[1] = (uint8x16_t) __builtin_aarch64_get_qregoiv16qi (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline int8x16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_s8_x2 (const int8_t *__a)\n+{\n+  int8x16x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v16qi ((const __builtin_aarch64_simd_qi *) __a);\n+  ret.val[0] = (int8x16_t) __builtin_aarch64_get_qregoiv16qi (__o, 0);\n+  ret.val[1] = (int8x16_t) __builtin_aarch64_get_qregoiv16qi (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline uint16x8x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_u16_x2 (const uint16_t *__a)\n+{\n+  uint16x8x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v8hi ((const __builtin_aarch64_simd_hi *) __a);\n+  ret.val[0] = (uint16x8_t) __builtin_aarch64_get_qregoiv8hi (__o, 0);\n+  ret.val[1] = (uint16x8_t) __builtin_aarch64_get_qregoiv8hi (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline int16x8x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_s16_x2 (const int16_t *__a)\n+{\n+  int16x8x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v8hi ((const __builtin_aarch64_simd_hi *) __a);\n+  ret.val[0] = (int16x8_t) __builtin_aarch64_get_qregoiv8hi (__o, 0);\n+  ret.val[1] = (int16x8_t) __builtin_aarch64_get_qregoiv8hi (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline uint32x4x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_u32_x2 (const uint32_t *__a)\n+{\n+  uint32x4x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v4si ((const __builtin_aarch64_simd_si *) __a);\n+  ret.val[0] = (uint32x4_t) __builtin_aarch64_get_qregoiv4si (__o, 0);\n+  ret.val[1] = (uint32x4_t) __builtin_aarch64_get_qregoiv4si (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline int32x4x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_s32_x2 (const int32_t *__a)\n+{\n+  int32x4x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v4si ((const __builtin_aarch64_simd_si *) __a);\n+  ret.val[0] = (int32x4_t) __builtin_aarch64_get_qregoiv4si (__o, 0);\n+  ret.val[1] = (int32x4_t) __builtin_aarch64_get_qregoiv4si (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline uint64x2x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_u64_x2 (const uint64_t *__a)\n+{\n+  uint64x2x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v2di ((const __builtin_aarch64_simd_di *) __a);\n+  ret.val[0] = (uint64x2_t) __builtin_aarch64_get_qregoiv2di (__o, 0);\n+  ret.val[1] = (uint64x2_t) __builtin_aarch64_get_qregoiv2di (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline int64x2x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_s64_x2 (const int64_t *__a)\n+{\n+  int64x2x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v2di ((const __builtin_aarch64_simd_di *) __a);\n+  ret.val[0] = (int64x2_t) __builtin_aarch64_get_qregoiv2di (__o, 0);\n+  ret.val[1] = (int64x2_t) __builtin_aarch64_get_qregoiv2di (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline float16x8x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_f16_x2 (const float16_t *__a)\n+{\n+  float16x8x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v8hf ((const __builtin_aarch64_simd_hf *) __a);\n+  ret.val[0] = (float16x8_t) __builtin_aarch64_get_qregoiv8hf (__o, 0);\n+  ret.val[1] = (float16x8_t) __builtin_aarch64_get_qregoiv8hf (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline float32x4x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_f32_x2 (const float32_t *__a)\n+{\n+  float32x4x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v4sf ((const __builtin_aarch64_simd_sf *) __a);\n+  ret.val[0] = (float32x4_t) __builtin_aarch64_get_qregoiv4sf (__o, 0);\n+  ret.val[1] = (float32x4_t) __builtin_aarch64_get_qregoiv4sf (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline float64x2x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_f64_x2 (const float64_t *__a)\n+{\n+  float64x2x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v2df ((const __builtin_aarch64_simd_df *) __a);\n+  ret.val[0] = (float64x2_t) __builtin_aarch64_get_qregoiv2df (__o, 0);\n+  ret.val[1] = (float64x2_t) __builtin_aarch64_get_qregoiv2df (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline poly8x16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_p8_x2 (const poly8_t *__a)\n+{\n+  poly8x16x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v16qi ((const __builtin_aarch64_simd_qi *) __a);\n+  ret.val[0] = (poly8x16_t) __builtin_aarch64_get_qregoiv16qi (__o, 0);\n+  ret.val[1] = (poly8x16_t) __builtin_aarch64_get_qregoiv16qi (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline poly16x8x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_p16_x2 (const poly16_t *__a)\n+{\n+  poly16x8x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v8hi ((const __builtin_aarch64_simd_hi *) __a);\n+  ret.val[0] = (poly16x8_t) __builtin_aarch64_get_qregoiv8hi (__o, 0);\n+  ret.val[1] = (poly16x8_t) __builtin_aarch64_get_qregoiv8hi (__o, 1);\n+  return ret;\n+}\n+\n+__extension__ extern __inline poly64x2x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_p64_x2 (const poly64_t *__a)\n+{\n+  poly64x2x2_t ret;\n+  __builtin_aarch64_simd_oi __o;\n+  __o = __builtin_aarch64_ld1x2v2di ((const __builtin_aarch64_simd_di *) __a);\n+  ret.val[0] = (poly64x2_t) __builtin_aarch64_get_qregoiv2di (__o, 0);\n+  ret.val[1] = (poly64x2_t) __builtin_aarch64_get_qregoiv2di (__o, 1);\n+  return ret;\n+}\n+\n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vld1q_u16 (const uint16_t *a)"}, {"sha": "53f61f105dd3769084f90d57ad8327743bb72dfe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467e6f1bb18878c330e1dc88888b133e85524c46/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467e6f1bb18878c330e1dc88888b133e85524c46/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=467e6f1bb18878c330e1dc88888b133e85524c46", "patch": "@@ -1,3 +1,7 @@\n+2017-12-27  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld1x2.c: New test.\n+\n 2017-12-27  Martin Liska  <mliska@suse.cz>\n \n \tPR tree-optimization/83552"}, {"sha": "0a43d0daf8c39949d447d29d7a5fa37a60b97134", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld1x2.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467e6f1bb18878c330e1dc88888b133e85524c46/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld1x2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467e6f1bb18878c330e1dc88888b133e85524c46/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld1x2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld1x2.c?ref=467e6f1bb18878c330e1dc88888b133e85524c46", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#include <arm_neon.h>\n+\n+extern void abort (void);\n+\n+#define TESTMETH(BASE, ELTS, SUFFIX)\t\\\n+int __attribute__ ((noinline))\t\t\t\\\n+test_vld##SUFFIX##_x2 ()\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  BASE##_t data[ELTS * 2];\t\t\t\\\n+  BASE##_t temp[ELTS * 2];\t\t\t\\\n+  BASE##x##ELTS##x##2##_t vectors;\t\t\\\n+  int i,j;\t\t\t\t\t\\\n+  for (i = 0; i < ELTS * 2; i++)\t\t\\\n+    data [i] = (BASE##_t) 2*i + 1;\t\t\\\n+  asm volatile (\"\" : : : \"memory\");\t\t\\\n+  vectors = vld1##SUFFIX##_x2 (data);\t\t\\\n+  vst1##SUFFIX (temp, vectors.val[0]);\t\t\\\n+  vst1##SUFFIX (&temp[ELTS], vectors.val[1]);\t\\\n+  asm volatile (\"\" : : : \"memory\");\t\t\\\n+  for (j = 0; j < ELTS * 2; j++)\t\t\\\n+    if (temp[j] != data[j])\t\t\t\\\n+      return 1;\t\t\t\t\t\\\n+  return 0;\t\t\t\t\t\\\n+}\n+\n+#define VARIANTS(VARIANT)\t\\\n+VARIANT (uint8, 8, _u8)\t\t\\\n+VARIANT (uint16, 4, _u16)\t\\\n+VARIANT (uint32, 2, _u32)\t\\\n+VARIANT (uint64, 1, _u64)\t\\\n+VARIANT (int8, 8, _s8)\t\t\\\n+VARIANT (int16, 4, _s16)\t\\\n+VARIANT (int32, 2, _s32)\t\\\n+VARIANT (int64, 1, _s64)\t\\\n+VARIANT (poly8, 8, _p8)\t\t\\\n+VARIANT (poly16, 4, _p16)\t\\\n+VARIANT (float16, 4, _f16)\t\\\n+VARIANT (float32, 2, _f32)\t\\\n+VARIANT (float64, 1, _f64)\t\\\n+VARIANT (uint8, 16, q_u8)\t\\\n+VARIANT (uint16, 8, q_u16)\t\\\n+VARIANT (uint32, 4, q_u32)\t\\\n+VARIANT (uint64, 2, q_u64)\t\\\n+VARIANT (int8, 16, q_s8)\t\\\n+VARIANT (int16, 8, q_s16)\t\\\n+VARIANT (int32, 4, q_s32)\t\\\n+VARIANT (int64, 2, q_s64)\t\\\n+VARIANT (poly8, 16, q_p8)\t\\\n+VARIANT (poly16, 8, q_p16)\t\\\n+VARIANT (float16, 8, q_f16)\t\\\n+VARIANT (float32, 4, q_f32)\t\\\n+VARIANT (float64, 2, q_f64)\n+\n+/* Tests of vld1_x2 and vld1q_x2.  */\n+VARIANTS (TESTMETH)\n+\n+#define CHECK(BASE, ELTS, SUFFIX)\t\\\n+  if (test_vld##SUFFIX##_x2 () != 0)\t\\\n+    abort ();\n+\n+int\n+main (int argc, char **argv)\n+{\n+  VARIANTS (CHECK)\n+\n+  return 0;\n+}\n+"}]}