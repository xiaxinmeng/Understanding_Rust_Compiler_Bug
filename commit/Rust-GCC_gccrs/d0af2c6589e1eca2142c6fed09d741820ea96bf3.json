{"sha": "d0af2c6589e1eca2142c6fed09d741820ea96bf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBhZjJjNjU4OWUxZWNhMjE0MmM2ZmVkMDlkNzQxODIwZWE5NmJmMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-12-16T18:24:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-12-16T18:24:55Z"}, "message": "genmatch.c (parser::parser): Initialize capture_ids.\n\n2014-12-16  Richard Biener  <rguenther@suse.de>\n\n\t* genmatch.c (parser::parser): Initialize capture_ids.\n\t(parser::parse_pattern): Properly allocate capture_ids before\n\tusing them.  Set capture_ids to zero when its lifetime is\n\tsupposed to finish.\n\t(parser::parse_simplify): Allocate capture_ids only if\n\trequired.\n\nFrom-SVN: r218786", "tree": {"sha": "11c0289ddf7315923f3d0a6c53633d94b5314718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11c0289ddf7315923f3d0a6c53633d94b5314718"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0af2c6589e1eca2142c6fed09d741820ea96bf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0af2c6589e1eca2142c6fed09d741820ea96bf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0af2c6589e1eca2142c6fed09d741820ea96bf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0af2c6589e1eca2142c6fed09d741820ea96bf3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e2ac29ecbf012b42442e3bf9fc143c8645ba13e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e2ac29ecbf012b42442e3bf9fc143c8645ba13e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e2ac29ecbf012b42442e3bf9fc143c8645ba13e"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "609b8d1c6d47fbd901a4fcb43c4b5d635b7ab09b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0af2c6589e1eca2142c6fed09d741820ea96bf3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0af2c6589e1eca2142c6fed09d741820ea96bf3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0af2c6589e1eca2142c6fed09d741820ea96bf3", "patch": "@@ -1,3 +1,12 @@\n+2014-12-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* genmatch.c (parser::parser): Initialize capture_ids.\n+\t(parser::parse_pattern): Properly allocate capture_ids before\n+\tusing them.  Set capture_ids to zero when its lifetime is\n+\tsupposed to finish.\n+\t(parser::parse_simplify): Allocate capture_ids only if\n+\trequired.\n+\n 2014-12-16  Michael Haubenwallner <michael.haubenwallner@ssi-schaefer.com>\n \n \tBoth config.h and system.h define ABI/API macros for system headers."}, {"sha": "70a5f60df72a46782dbe00fb70cc43ccff7d5d42", "filename": "gcc/genmatch.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0af2c6589e1eca2142c6fed09d741820ea96bf3/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0af2c6589e1eca2142c6fed09d741820ea96bf3/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=d0af2c6589e1eca2142c6fed09d741820ea96bf3", "patch": "@@ -3171,7 +3171,8 @@ parser::parse_simplify (source_location match_location,\n \t\t\texpr *result)\n {\n   /* Reset the capture map.  */\n-  capture_ids = new cid_map_t;\n+  if (!capture_ids)\n+    capture_ids = new cid_map_t;\n   /* Reset oper_lists and set.  */\n   hash_set <user_id *> olist;\n   oper_lists_set = &olist;\n@@ -3489,7 +3490,10 @@ parser::parse_pattern ()\n   const cpp_token *token = peek ();\n   const char *id = get_ident ();\n   if (strcmp (id, \"simplify\") == 0)\n-    parse_simplify (token->src_loc, simplifiers, NULL, NULL);\n+    {\n+      parse_simplify (token->src_loc, simplifiers, NULL, NULL);\n+      capture_ids = NULL;\n+    }\n   else if (strcmp (id, \"match\") == 0)\n     {\n       bool with_args = false;\n@@ -3514,6 +3518,7 @@ parser::parse_pattern ()\n       expr *e = NULL;\n       if (with_args)\n \t{\n+\t  capture_ids = new cid_map_t;\n \t  e = new expr (p);\n \t  while (peek ()->type == CPP_ATSIGN)\n \t    e->append_op (parse_capture (NULL));\n@@ -3525,6 +3530,7 @@ parser::parse_pattern ()\n \tfatal_at (token, \"non-matching number of match operands\");\n       p->nargs = e ? e->ops.length () : 0;\n       parse_simplify (token->src_loc, p->matchers, p, e);\n+      capture_ids = NULL;\n     }\n   else if (strcmp (id, \"for\") == 0)\n     parse_for (token->src_loc);\n@@ -3562,6 +3568,7 @@ parser::parser (cpp_reader *r_)\n   simplifiers = vNULL;\n   oper_lists_set = NULL;\n   oper_lists = vNULL;\n+  capture_ids = NULL;\n   user_predicates = vNULL;\n   parsing_match_operand = false;\n "}]}