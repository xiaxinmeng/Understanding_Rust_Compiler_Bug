{"sha": "da42ac7bc51006101e94711e6847f561d7b08005", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE0MmFjN2JjNTEwMDYxMDFlOTQ3MTFlNjg0N2Y1NjFkN2IwODAwNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-11-02T08:29:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-11-02T08:29:48Z"}, "message": "re PR tree-optimization/78035 (Inconsistency between address comparison and alias analysis)\n\n2016-11-02  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/78035\n\tPR tree-optimization/77964\n\t* gimple-pretty-print.c (pp_points_to_solution): Print\n\tvars_contains_interposable.\n\t* tree-ssa-alias.c: Include varasm.h.\n\t(ptrs_compare_unequal): Check vars_contains_interposable and\n\tdecl_binds_to_current_def_p.\n\t(dump_points_to_solution): Dump vars_contains_interposable.\n\t* tree-ssa-alias.h (struct pt_solution): Add vars_contains_interposable\n\tflag.\n\t* tree-ssa-structalias.c: Include varasm.h.\n\t(set_uids_in_ptset): Record whether vars contains a\n\tnot decl_binds_to_current_def_p variable in vars_contains_interposable.\n\t(ipa_escaped_pt): Update initializer.\n\n\t* gcc.target/i386/pr78035.c: New testcase.\n\nFrom-SVN: r241776", "tree": {"sha": "e8b272d2021353490d87fd01f485f66e27320dc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8b272d2021353490d87fd01f485f66e27320dc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da42ac7bc51006101e94711e6847f561d7b08005", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da42ac7bc51006101e94711e6847f561d7b08005", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da42ac7bc51006101e94711e6847f561d7b08005", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da42ac7bc51006101e94711e6847f561d7b08005/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3cea049a4fbfd0a81690d12d383d6a27246c98b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cea049a4fbfd0a81690d12d383d6a27246c98b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cea049a4fbfd0a81690d12d383d6a27246c98b7"}], "stats": {"total": 84, "additions": 79, "deletions": 5}, "files": [{"sha": "be6c059f26e0e41448e21fd00e43a9cb62a4e535", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da42ac7bc51006101e94711e6847f561d7b08005/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da42ac7bc51006101e94711e6847f561d7b08005/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da42ac7bc51006101e94711e6847f561d7b08005", "patch": "@@ -1,3 +1,20 @@\n+2016-11-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/78035\n+\tPR tree-optimization/77964\n+\t* gimple-pretty-print.c (pp_points_to_solution): Print\n+\tvars_contains_interposable.\n+\t* tree-ssa-alias.c: Include varasm.h.\n+\t(ptrs_compare_unequal): Check vars_contains_interposable and\n+\tdecl_binds_to_current_def_p.\n+\t(dump_points_to_solution): Dump vars_contains_interposable.\n+\t* tree-ssa-alias.h (struct pt_solution): Add vars_contains_interposable\n+\tflag.\n+\t* tree-ssa-structalias.c: Include varasm.h.\n+\t(set_uids_in_ptset): Record whether vars contains a\n+\tnot decl_binds_to_current_def_p variable in vars_contains_interposable.\n+\t(ipa_escaped_pt): Update initializer.\n+\n 2016-11-02  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/78047"}, {"sha": "f588f5e445edb22672b8e565cf7ebf1e472e18db", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da42ac7bc51006101e94711e6847f561d7b08005/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da42ac7bc51006101e94711e6847f561d7b08005/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=da42ac7bc51006101e94711e6847f561d7b08005", "patch": "@@ -728,6 +728,12 @@ pp_points_to_solution (pretty_printer *buffer, struct pt_solution *pt)\n \t    {\n \t      pp_string (buffer, comma);\n \t      pp_string (buffer, \"restrict\");\n+\t      comma = \", \";\n+\t    }\n+\t  if (pt->vars_contains_interposable)\n+\t    {\n+\t      pp_string (buffer, comma);\n+\t      pp_string (buffer, \"interposable\");\n \t    }\n \t  pp_string (buffer, \")\");\n \t}"}, {"sha": "6827c0090bcb00d1767215db6c096930895d5794", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da42ac7bc51006101e94711e6847f561d7b08005/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da42ac7bc51006101e94711e6847f561d7b08005/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da42ac7bc51006101e94711e6847f561d7b08005", "patch": "@@ -1,3 +1,9 @@\n+2016-11-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/78035\n+\tPR tree-optimization/77964\n+\t* gcc.target/i386/pr78035.c: New testcase.\n+\n 2016-11-02  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/vrp111.c: New testcase."}, {"sha": "2e673a8ce2d7c89b4fc626dd157c1532cfa1593c", "filename": "gcc/testsuite/gcc.target/i386/pr78035.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da42ac7bc51006101e94711e6847f561d7b08005/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78035.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da42ac7bc51006101e94711e6847f561d7b08005/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78035.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78035.c?ref=da42ac7bc51006101e94711e6847f561d7b08005", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+extern int a;\n+extern int b;\n+extern int c;\n+\n+int foo(int choose_a)\n+{\n+  int *p;\n+  if (choose_a)\n+    p = &a;\n+  else\n+    p = &b;\n+  return p != &c;\n+}\n+\n+int bar ()\n+{\n+  return &a != &c;\n+}\n+\n+/* We should not optimize away either comparison.  */\n+/* { dg-final { scan-assembler-times \"cmp\" 2 } } */"}, {"sha": "ebae6cfa6fe073f282de315f8ec41c3887364986", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da42ac7bc51006101e94711e6847f561d7b08005/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da42ac7bc51006101e94711e6847f561d7b08005/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=da42ac7bc51006101e94711e6847f561d7b08005", "patch": "@@ -32,12 +32,12 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pretty-print.h\"\n #include \"alias.h\"\n #include \"fold-const.h\"\n-\n #include \"langhooks.h\"\n #include \"dumpfile.h\"\n #include \"tree-eh.h\"\n #include \"tree-dfa.h\"\n #include \"ipa-reference.h\"\n+#include \"varasm.h\"\n \n /* Broad overview of how alias analysis on gimple works:\n \n@@ -373,14 +373,18 @@ ptrs_compare_unequal (tree ptr1, tree ptr2)\n       /* We may not use restrict to optimize pointer comparisons.\n          See PR71062.  So we have to assume that restrict-pointed-to\n \t may be in fact obj1.  */\n-      if (!pi || pi->pt.vars_contains_restrict)\n+      if (!pi\n+\t  || pi->pt.vars_contains_restrict\n+\t  || pi->pt.vars_contains_interposable)\n \treturn false;\n       if (VAR_P (obj1)\n \t  && (TREE_STATIC (obj1) || DECL_EXTERNAL (obj1)))\n \t{\n \t  varpool_node *node = varpool_node::get (obj1);\n \t  /* If obj1 may bind to NULL give up (see below).  */\n-\t  if (! node || ! node->nonzero_address ())\n+\t  if (! node\n+\t      || ! node->nonzero_address ()\n+\t      || ! decl_binds_to_current_def_p (obj1))\n \t    return false;\n \t}\n       return !pt_solution_includes (&pi->pt, obj1);\n@@ -553,7 +557,12 @@ dump_points_to_solution (FILE *file, struct pt_solution *pt)\n \t      comma = \", \";\n \t    }\n \t  if (pt->vars_contains_restrict)\n-\t    fprintf (file, \"%srestrict\", comma);\n+\t    {\n+\t      fprintf (file, \"%srestrict\", comma);\n+\t      comma = \", \";\n+\t    }\n+\t  if (pt->vars_contains_interposable)\n+\t    fprintf (file, \"%sinterposable\", comma);\n \t  fprintf (file, \")\");\n \t}\n     }"}, {"sha": "810d83c978e570ec359d7c859baa28ba04d3d6bc", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da42ac7bc51006101e94711e6847f561d7b08005/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da42ac7bc51006101e94711e6847f561d7b08005/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=da42ac7bc51006101e94711e6847f561d7b08005", "patch": "@@ -57,6 +57,8 @@ struct GTY(()) pt_solution\n   /* Nonzero if the vars bitmap includes a anonymous variable used to\n      represent storage pointed to by a restrict qualified pointer.  */\n   unsigned int vars_contains_restrict : 1;\n+  /* Nonzero if the vars bitmap includes an interposable variable.  */\n+  unsigned int vars_contains_interposable : 1;\n \n   /* Set of variables that this pointer may point to.  */\n   bitmap vars;"}, {"sha": "28803826b43fddb7661f68315f96de8d1a4604ad", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da42ac7bc51006101e94711e6847f561d7b08005/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da42ac7bc51006101e94711e6847f561d7b08005/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=da42ac7bc51006101e94711e6847f561d7b08005", "patch": "@@ -39,6 +39,8 @@\n #include \"tree-dfa.h\"\n #include \"params.h\"\n #include \"gimple-walk.h\"\n+#include \"varasm.h\"\n+\n \n /* The idea behind this analyzer is to generate set constraints from the\n    program, then solve the resulting constraints in order to generate the\n@@ -6360,6 +6362,13 @@ set_uids_in_ptset (bitmap into, bitmap from, struct pt_solution *pt,\n \t\t  && fndecl\n \t\t  && ! auto_var_in_fn_p (vi->decl, fndecl)))\n \t    pt->vars_contains_nonlocal = true;\n+\n+\t  /* If we have a variable that is interposable record that fact\n+\t     for pointer comparison simplification.  */\n+\t  if (VAR_P (vi->decl)\n+\t      && (TREE_STATIC (vi->decl) || DECL_EXTERNAL (vi->decl))\n+\t      && ! decl_binds_to_current_def_p (vi->decl))\n+\t    pt->vars_contains_interposable = true;\n \t}\n \n       else if (TREE_CODE (vi->decl) == FUNCTION_DECL\n@@ -7592,7 +7601,8 @@ make_pass_build_ealias (gcc::context *ctxt)\n \n /* IPA PTA solutions for ESCAPED.  */\n struct pt_solution ipa_escaped_pt\n-  = { true, false, false, false, false, false, false, false, false, NULL };\n+  = { true, false, false, false, false,\n+      false, false, false, false, false, NULL };\n \n /* Associate node with varinfo DATA. Worker for\n    cgraph_for_symbol_thunks_and_aliases.  */"}]}