{"sha": "58dec010560be6fc090a2b5a65e5b4349b88748b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThkZWMwMTA1NjBiZTZmYzA5MGEyYjVhNjVlNWI0MzQ5Yjg4NzQ4Yg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-29T12:52:58Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-29T12:52:58Z"}, "message": "PR c++/80891 (#3)\n\n\tPR c++/80891 (#3)\n\t* cp-tree.h (build_min_nt_call_vec): Declare.\n\t* decl.c (build_offset_ref_call_from_tree): Call it.\n\t* parser.c (cp_parser_postfix_expression): Likewise.\n\t* pt.c (tsubst_copy_and_build): Likewise.\n\t* semantics.c (finish_call_expr): Likewise.\n\t* tree.c (build_min_nt_loc): Keep unresolved lookups.\n\t(build_min): Likewise.\n\t(build_min_non_dep): Likewise.\n\t(build_min_non_dep_call_vec): Likewise.\n\t(build_min_nt_call_vec): New.\n\n\tPR c++/80891 (#3)\n\t* g++.dg/lookup/pr80891-3.C: New.\n\nFrom-SVN: r248571", "tree": {"sha": "7ce65cb184e57240d0c50d6d4d8a80f90da677f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ce65cb184e57240d0c50d6d4d8a80f90da677f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58dec010560be6fc090a2b5a65e5b4349b88748b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58dec010560be6fc090a2b5a65e5b4349b88748b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58dec010560be6fc090a2b5a65e5b4349b88748b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58dec010560be6fc090a2b5a65e5b4349b88748b/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "724e517a7df51aa4921704083ef78a7a41999198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/724e517a7df51aa4921704083ef78a7a41999198", "html_url": "https://github.com/Rust-GCC/gccrs/commit/724e517a7df51aa4921704083ef78a7a41999198"}], "stats": {"total": 92, "additions": 82, "deletions": 10}, "files": [{"sha": "67d86fa111445d7f36593d7155fa47c98ecd6126", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dec010560be6fc090a2b5a65e5b4349b88748b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dec010560be6fc090a2b5a65e5b4349b88748b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=58dec010560be6fc090a2b5a65e5b4349b88748b", "patch": "@@ -1,10 +1,24 @@\n-2017-05-26  Nathan Sidwell  <nathan@acm.org>\n+2017-05-29  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/80891 (#3)\n+\t* cp-tree.h (build_min_nt_call_vec): Declare.\n+\t* decl.c (build_offset_ref_call_from_tree): Call it.\n+\t* parser.c (cp_parser_postfix_expression): Likewise.\n+\t* pt.c (tsubst_copy_and_build): Likewise.\n+\t* semantics.c (finish_call_expr): Likewise.\n+\t* tree.c (build_min_nt_loc): Keep unresolved lookups.\n+\t(build_min): Likewise.\n+\t(build_min_non_dep): Likewise.\n+\t(build_min_non_dep_call_vec): Likewise.\n+\t(build_min_nt_call_vec): New.\n \n \tPR c++/80891 (#2)\n \t* tree.c (ovl_copy): Adjust assert, copy OVL_LOOKUP.\n \t(ovl_used): New.\n \t(lookup_keep): Call it.\n \n+2017-05-26  Nathan Sidwell  <nathan@acm.org>\n+\n \tImplement DR2061\n \t* name-lookup.c (push_inline_namespaces): New.\n \t(push_namespace): Look inside inline namespaces."}, {"sha": "f1df0bd8dd796dace8b616bb3f02e0a0d39d41aa", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dec010560be6fc090a2b5a65e5b4349b88748b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dec010560be6fc090a2b5a65e5b4349b88748b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=58dec010560be6fc090a2b5a65e5b4349b88748b", "patch": "@@ -6891,6 +6891,7 @@ extern tree build_min_nt_loc\t\t\t(location_t, enum tree_code,\n \t\t\t\t\t\t ...);\n extern tree build_min_non_dep\t\t\t(enum tree_code, tree, ...);\n extern tree build_min_non_dep_op_overload\t(enum tree_code, tree, tree, ...);\n+extern tree build_min_nt_call_vec (tree, vec<tree, va_gc> *);\n extern tree build_min_non_dep_call_vec\t\t(tree, tree, vec<tree, va_gc> *);\n extern vec<tree, va_gc>* vec_copy_and_insert    (vec<tree, va_gc>*, tree, unsigned);\n extern tree build_cplus_new\t\t\t(tree, tree, tsubst_flags_t);"}, {"sha": "a095901be0950c2e66e3b4dc93315284541d3491", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dec010560be6fc090a2b5a65e5b4349b88748b/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dec010560be6fc090a2b5a65e5b4349b88748b/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=58dec010560be6fc090a2b5a65e5b4349b88748b", "patch": "@@ -4891,7 +4891,7 @@ build_offset_ref_call_from_tree (tree fn, vec<tree, va_gc> **args,\n \t\t  || TREE_CODE (fn) == MEMBER_REF);\n       if (type_dependent_expression_p (fn)\n \t  || any_type_dependent_arguments_p (*args))\n-\treturn build_nt_call_vec (fn, *args);\n+\treturn build_min_nt_call_vec (fn, *args);\n \n       orig_args = make_tree_vector_copy (*args);\n "}, {"sha": "313eebbc3d5fecd2c8787facafb67f3ef291431a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dec010560be6fc090a2b5a65e5b4349b88748b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dec010560be6fc090a2b5a65e5b4349b88748b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=58dec010560be6fc090a2b5a65e5b4349b88748b", "patch": "@@ -6952,7 +6952,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t  {\n \t\t    maybe_generic_this_capture (instance, fn);\n \t\t    postfix_expression\n-\t\t      = build_nt_call_vec (postfix_expression, args);\n+\t\t      = build_min_nt_call_vec (postfix_expression, args);\n \t\t    release_tree_vector (args);\n \t\t    break;\n \t\t  }"}, {"sha": "9c423366102440840e71197842135d754a33b089", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dec010560be6fc090a2b5a65e5b4349b88748b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dec010560be6fc090a2b5a65e5b4349b88748b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=58dec010560be6fc090a2b5a65e5b4349b88748b", "patch": "@@ -17389,7 +17389,7 @@ tsubst_copy_and_build (tree t,\n \t\t\t&& TREE_CODE (fn) != FIELD_DECL)\n \t\t    || type_dependent_expression_p (fn)\n \t\t    || any_type_dependent_arguments_p (call_args)))\n-\t      ret = build_nt_call_vec (function, call_args);\n+\t      ret = build_min_nt_call_vec (function, call_args);\n \t    else if (!BASELINK_P (fn))\n \t      ret = finish_call_expr (function, &call_args,\n \t\t\t\t       /*disallow_virtual=*/false,"}, {"sha": "87b95345d5cb53f348af007204f51b531783c417", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dec010560be6fc090a2b5a65e5b4349b88748b/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dec010560be6fc090a2b5a65e5b4349b88748b/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=58dec010560be6fc090a2b5a65e5b4349b88748b", "patch": "@@ -2322,7 +2322,7 @@ finish_call_expr (tree fn, vec<tree, va_gc> **args, bool disallow_virtual,\n       if (type_dependent_expression_p (fn)\n \t  || any_type_dependent_arguments_p (*args))\n \t{\n-\t  result = build_nt_call_vec (fn, *args);\n+\t  result = build_min_nt_call_vec (fn, *args);\n \t  SET_EXPR_LOCATION (result, EXPR_LOC_OR_LOC (fn, input_location));\n \t  KOENIG_LOOKUP_P (result) = koenig_p;\n \t  if (is_overloaded_fn (fn))"}, {"sha": "37297d2a46542624db8e7c8b36a559a016ce04e8", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dec010560be6fc090a2b5a65e5b4349b88748b/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dec010560be6fc090a2b5a65e5b4349b88748b/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=58dec010560be6fc090a2b5a65e5b4349b88748b", "patch": "@@ -3216,13 +3216,14 @@ build_min_nt_loc (location_t loc, enum tree_code code, ...)\n     {\n       tree x = va_arg (p, tree);\n       TREE_OPERAND (t, i) = x;\n+      if (x && TREE_CODE (x) == OVERLOAD)\n+\tlookup_keep (x, true);\n     }\n \n   va_end (p);\n   return t;\n }\n \n-\n /* Similar to `build', but for template definitions.  */\n \n tree\n@@ -3245,8 +3246,13 @@ build_min (enum tree_code code, tree tt, ...)\n     {\n       tree x = va_arg (p, tree);\n       TREE_OPERAND (t, i) = x;\n-      if (x && !TYPE_P (x) && TREE_SIDE_EFFECTS (x))\n-\tTREE_SIDE_EFFECTS (t) = 1;\n+      if (x)\n+\t{\n+\t  if (!TYPE_P (x) && TREE_SIDE_EFFECTS (x))\n+\t    TREE_SIDE_EFFECTS (t) = 1;\n+\t  if (TREE_CODE (x) == OVERLOAD)\n+\t    lookup_keep (x, true);\n+\t}\n     }\n \n   va_end (p);\n@@ -3281,6 +3287,8 @@ build_min_non_dep (enum tree_code code, tree non_dep, ...)\n     {\n       tree x = va_arg (p, tree);\n       TREE_OPERAND (t, i) = x;\n+      if (x && TREE_CODE (x) == OVERLOAD)\n+\tlookup_keep (x, true);\n     }\n \n   if (code == COMPOUND_EXPR && TREE_CODE (non_dep) != COMPOUND_EXPR)\n@@ -3292,14 +3300,34 @@ build_min_non_dep (enum tree_code code, tree non_dep, ...)\n   return convert_from_reference (t);\n }\n \n-/* Similar to `build_nt_call_vec', but for template definitions of\n+/* Similar to build_min_nt, but call expressions  */\n+\n+tree\n+build_min_nt_call_vec (tree fn, vec<tree, va_gc> *args)\n+{\n+  tree ret, t;\n+  unsigned int ix;\n+\n+  ret = build_vl_exp (CALL_EXPR, vec_safe_length (args) + 3);\n+  CALL_EXPR_FN (ret) = fn;\n+  CALL_EXPR_STATIC_CHAIN (ret) = NULL_TREE;\n+  FOR_EACH_VEC_SAFE_ELT (args, ix, t)\n+    {\n+      CALL_EXPR_ARG (ret, ix) = t;\n+      if (TREE_CODE (t) == OVERLOAD)\n+\tlookup_keep (t, true);\n+    }\n+  return ret;\n+}\n+\n+/* Similar to `build_min_nt_call_vec', but for template definitions of\n    non-dependent expressions. NON_DEP is the non-dependent expression\n    that has been built.  */\n \n tree\n build_min_non_dep_call_vec (tree non_dep, tree fn, vec<tree, va_gc> *argvec)\n {\n-  tree t = build_nt_call_vec (fn, argvec);\n+  tree t = build_min_nt_call_vec (fn, argvec);\n   if (REFERENCE_REF_P (non_dep))\n     non_dep = TREE_OPERAND (non_dep, 0);\n   TREE_TYPE (t) = TREE_TYPE (non_dep);"}, {"sha": "d8603f8a8a3815ab2d345e39c693bd47420eae02", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dec010560be6fc090a2b5a65e5b4349b88748b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dec010560be6fc090a2b5a65e5b4349b88748b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58dec010560be6fc090a2b5a65e5b4349b88748b", "patch": "@@ -1,5 +1,8 @@\n 2017-05-29  Nathan Sidwell  <nathan@acm.org>\n \n+\tPR c++/80891 (#3)\n+\t* g++.dg/lookup/pr80891-3.C: New.\n+\n \tPR c++/80891 (#2)\n \t* g++.dg/lookup/pr80891-2.C: New.\n "}, {"sha": "e693a357c22f348fb4182bf85b4e861bbda1ecc7", "filename": "gcc/testsuite/g++.dg/lookup/pr80891-3.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dec010560be6fc090a2b5a65e5b4349b88748b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr80891-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dec010560be6fc090a2b5a65e5b4349b88748b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr80891-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr80891-3.C?ref=58dec010560be6fc090a2b5a65e5b4349b88748b", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/80891 part 3\n+// We were failing to mark OVERLOADS held in template definitions as\n+// immutable in non-call contexts.\n+\n+namespace std {\n+  int endl();\n+}\n+\n+using std::endl;\n+\n+template <class RealType> void test_spots(RealType)\n+{\n+  using namespace std;\n+  RealType a;\n+  a << endl;\n+}\n+\n+template <typename T>\n+void operator<< (T, int (&)());\n+\n+struct Q {};\n+void test_maintest_method()\n+{\n+  Q q;\n+  test_spots(q);\n+}"}]}