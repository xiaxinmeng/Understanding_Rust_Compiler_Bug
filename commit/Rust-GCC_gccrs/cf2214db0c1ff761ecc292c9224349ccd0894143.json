{"sha": "cf2214db0c1ff761ecc292c9224349ccd0894143", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YyMjE0ZGIwYzFmZjc2MWVjYzI5MmM5MjI0MzQ5Y2NkMDg5NDE0Mw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-09-22T18:36:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-09-22T18:36:38Z"}, "message": "std_limits.h (__glibcpp_f32_is_iec559, [...]): Remove.\n\n        * include/std/std_limits.h (__glibcpp_f32_is_iec559,\n        __glibcpp_f64_is_iec559, __glibcpp_f80_is_iec559,\n        __glibcpp_f96_is_iec559, __glibcpp_f128_is_iec559,\n        __glibcpp_float_is_iec559, __glibcpp_double_is_iec559,\n        __glibcpp_long_double_is_iec559): Remove.\n        (numeric_limits<float>::is_iec559): Use has_infinity & has_quiet_NaN.\n        (numeric_limits<double>, numeric_limits<long double>): Similarly.\n\nFrom-SVN: r57413", "tree": {"sha": "9780943ae080acb7fddf60104bae37bfd020a57d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9780943ae080acb7fddf60104bae37bfd020a57d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf2214db0c1ff761ecc292c9224349ccd0894143", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf2214db0c1ff761ecc292c9224349ccd0894143", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf2214db0c1ff761ecc292c9224349ccd0894143", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf2214db0c1ff761ecc292c9224349ccd0894143/comments", "author": null, "committer": null, "parents": [{"sha": "be71ea9dae496aca963ebafe2856528c0d9129cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be71ea9dae496aca963ebafe2856528c0d9129cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be71ea9dae496aca963ebafe2856528c0d9129cd"}], "stats": {"total": 169, "additions": 50, "deletions": 119}, "files": [{"sha": "97f149b5b81fbd8536ee410b0c6c316309804bf2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 47, "deletions": 39, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf2214db0c1ff761ecc292c9224349ccd0894143/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf2214db0c1ff761ecc292c9224349ccd0894143/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cf2214db0c1ff761ecc292c9224349ccd0894143", "patch": "@@ -11,6 +11,14 @@\n \t(numeric_limits<float>::round_style): Use round_to_nearest.\n \t(numeric_limits<double>, numeric_limits<long double>): Similarly.\n \n+\t* include/std/std_limits.h (__glibcpp_f32_is_iec559,\n+\t__glibcpp_f64_is_iec559, __glibcpp_f80_is_iec559,\n+\t__glibcpp_f96_is_iec559, __glibcpp_f128_is_iec559,\n+\t__glibcpp_float_is_iec559, __glibcpp_double_is_iec559,\n+\t__glibcpp_long_double_is_iec559): Remove.\n+\t(numeric_limits<float>::is_iec559): Use has_infinity & has_quiet_NaN.\n+\t(numeric_limits<double>, numeric_limits<long double>): Similarly.\n+\n 2002-09-18  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* testsuite/18_support/numeric_limits.cc (test_epsilon): New.\n@@ -21,14 +29,14 @@\n \n 2002-09-16  Benjamin Kosnik  <bkoz@redhat.com>\n \n-        * include/c_shadow: Remove.\n-        * include/bits/generic_shadow.h: Remove.\n-        * include/Makefile.am: Remove generic_shadow.h.\n-        * acinclude.m4: Remove c_shadow references.\n-        * aclocal.m4: Regenerate.\n-        * configure: Regenerate.\n-        * mkcshadow: Remove.\n-        * mkinclosure: Remove.\n+\t* include/c_shadow: Remove.\n+\t* include/bits/generic_shadow.h: Remove.\n+\t* include/Makefile.am: Remove generic_shadow.h.\n+\t* acinclude.m4: Remove c_shadow references.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t* mkcshadow: Remove.\n+\t* mkinclosure: Remove.\n \n 2002-09-16  Loren J. Rittle  <ljrittle@acm.org>\n \n@@ -129,8 +137,8 @@\n \n 2002-09-11  Paolo Carlini  <pcarlini@unitus.it>\n \n-        * include/bits/locale_facets.tcc (__convert_from_v):\n-        Use __uselocale instead of setlocale for glibc 2.3+.\n+\t* include/bits/locale_facets.tcc (__convert_from_v):\n+\tUse __uselocale instead of setlocale for glibc 2.3+.\n \n 2002-09-10  Benjamin Kosnik  <bkoz@redhat.com>\n \n@@ -240,7 +248,7 @@\n \tswitch to \"C\" locale and initialize using __ctype_{b,tolower,toupper}.\n \n 2002-09-05  Paolo Carlini  <pcarlini@unitus.it>\n-            Roland McGrath  <roland@redhat.com>\n+\t    Roland McGrath  <roland@redhat.com>\n \n \tPR libstdc++/7811\n \t* src/locale.cc (locale::locale(__s)): Use getenv instead\n@@ -589,7 +597,7 @@\n \tpunctuation.\n \n 2002-08-13  Jonathan Wakely  <jw@kayari.org>\n-            Phil Edwards  <pme@gcc.gnu.org>\n+\t    Phil Edwards  <pme@gcc.gnu.org>\n \n \t* docs/html/documentation.html:  Use HTML entities for punctuation.\n \n@@ -604,7 +612,7 @@\n \tre-wrap comment lines as necessary.\n \n 2002-08-08  Danny Smith  <dannysmith@users.sourceforge.net>\n-            Benjamin Kosnik  <bkoz@redhat.com>\n+\t    Benjamin Kosnik  <bkoz@redhat.com>\n \t\n \t* include/bits/istream.tcc (basic_istream::ignore): Use sbumpc,\n \tnot snextc.\n@@ -718,7 +726,7 @@\n \tGLIBCPP_3.1 to GLIBCPP_3.2.\n \n 2002-07-31  Benjamin Kosnik  <bkoz@redhat.com>\n-            Mark Mitchell  <mark@codesourcery.com>\n+\t    Mark Mitchell  <mark@codesourcery.com>\n \n \tPR libstdc++/7442\n \t* libsupc++/cxxabi.h (class __base_class_type_info::hwm_bit):\n@@ -768,7 +776,7 @@\n \t* docs/html/abi.txt: Update.\n \n 2002-07-30  Benjamin Kosnik  <bkoz@redhat.com>\n-            Gabriel Dos Reis  <gdr@nerim.net>\n+\t    Gabriel Dos Reis  <gdr@nerim.net>\n \n \t* include/bits/char_traits.h: Remove generic definitions.\n \t* include/bits/streambuf_iterator.h (istreambuf_iterator): Use\n@@ -1011,7 +1019,7 @@\n \t* testsuite/23_containers/deque_operators.cc: Add test02.\n \n 2002-07-04  Benjamin Kosnik  <bkoz@redhat.com>\n-            Jack Reeves  <jackw_reeves@hotmail.com>\n+\t    Jack Reeves  <jackw_reeves@hotmail.com>\n \n \t* include/std/std_streambuf.h (basic_streambuf::_M_buf): Change to\n \tsize_t, from int_type.\n@@ -1047,8 +1055,8 @@\n \t* testsuite/ext/hash_map.cc: New.\n \n 2002-07-03  Jack Reeves  <jackw_reeves@hotmail.com>\n-            Kenny Simpson  <theonetruekenny@yahoo.com>\n-            Phil Edwards  <pme@gcc.gnu.org>\n+\t    Kenny Simpson  <theonetruekenny@yahoo.com>\n+\t    Phil Edwards  <pme@gcc.gnu.org>\n \n \tPR libstdc++/3946\n \t* testsuite/20_util/auto_ptr.cc (test08):  New test.\n@@ -1361,7 +1369,7 @@\n \t* Makefile.in: Regenerated.\n \n 2002-06-11  J.T. Conklin  <jtc@acorntoolworks.com>\n-            Benjamin Kosnik  <bkoz@redhat.com>\n+\t    Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* configure.target: Set os_include_dir to config/os/qnx/qnx6.1\n \tunder *-qnx6.[12]*.\n@@ -1441,7 +1449,7 @@\n \tSearch correct multilib testsuite dir for libv3test.\n \n 2002-06-04  Paolo Carlini  <pcarlini@unitus.it>\n-            Gaby Dos Reis  <gdr@codesourcery.com>\n+\t    Gaby Dos Reis  <gdr@codesourcery.com>\n \n \t* include/bits/basic_string.tcc\n \t(basic_string::_S_construct(forward_iterator_tag):\n@@ -1557,7 +1565,7 @@\n \t* testsuite/22_locale/ctype_widen_wchar_t.cc: Same.\n \n 2002-05-26  Carlo Wood  <carlo@alinoe.com>\n-            Paolo Carlini  <pcarlini@unitus.it>\n+\t    Paolo Carlini  <pcarlini@unitus.it>\n \n \tPR libstdc++/6811\n \t* config/locale/ieee_1003.1-2001/codecvt_specializations.h\n@@ -1726,7 +1734,7 @@\n \t* testsuite/22_locale/ctype_scan_char.cc: New file.\n \n 2002-05-13  Paolo Carlini  <pcarlini@unitus.it>\n-            Jakub Jelinek  <jakub@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/22_locale/money_get_members_char.cc\n \t(test01, test02, test04): Use the de_DE@euro named locale\n@@ -1742,7 +1750,7 @@\n 2002-05-13  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* testsuite/22_locale/codecvt_members_char_char.cc\n-        (test03): Robustify wrt localedata.\n+\t(test03): Robustify wrt localedata.\n \t* testsuite/22_locale/codecvt_members_wchar_t_char.cc (test03): Likewise.\n \t* testsuite/22_locale/collate_members_char.cc (test04): Likewise.\n \t* testsuite/22_locale/collate_members_wchar_t.cc (test04): Likewise.\n@@ -1997,7 +2005,7 @@\n \t* include/ext/stl_hashtable.h: Import __iterator_category\n \n 2002-04-28  Paolo Carlini  <pcarlini@unitus.it>\n-            Peter Schmid  <schmid@snake.iap.physik.tu-darmstadt.de>\n+\t    Peter Schmid  <schmid@snake.iap.physik.tu-darmstadt.de>\n \n \t* testsuite/ext/hash_set.cc: New testfile.\n \n@@ -2340,10 +2348,10 @@\n \n 2002-04-03  Benjamin Kosnik  <bkoz@redhat.com>\n \n-        As per DR 184, libstdc++/3139\n-        * include/std/std_limits.h (__glibcpp_bool_digits): Change to 1.\n-        (numeric_limits<bool>::is_iec559): False.\n-        (numeric_limits<bool>::is_modulo): False.\n+\tAs per DR 184, libstdc++/3139\n+\t* include/std/std_limits.h (__glibcpp_bool_digits): Change to 1.\n+\t(numeric_limits<bool>::is_iec559): False.\n+\t(numeric_limits<bool>::is_modulo): False.\n \n \t* testsuite/27_io/ios_init.cc: Add instantiations.\n \n@@ -2367,8 +2375,8 @@\n \t* include/Makefile.in:  Regenerate.\n \n 2002-04-02  Paolo Carlini  <pcarlini@unitus.it>\n-            Nathan Myers  <ncm@cantrip.org>\n-            Philip Martin  <philip@codematters.co.uk>\n+\t    Nathan Myers  <ncm@cantrip.org>\n+\t    Philip Martin  <philip@codematters.co.uk>\n \n \t* include/bits/basic_string.h\n \t(replace(i1, i2, _CharT* k1, _CharT* k2),\n@@ -2469,7 +2477,7 @@\n \t(test02): New tests.\n \n 2002-03-28  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n-            Paolo Carlini  <pcarlini@unitus.it>\n+\t    Paolo Carlini  <pcarlini@unitus.it>\n \n \t* testsuite/22_locale/codecvt_members_unicode_wchar_t.cc\n \t(test01): Protect the test with _GLIBCPP_USE_WCHAR_T;\n@@ -2520,16 +2528,16 @@\n \t* include/Makefile.in: Regerate.\n \n 2002-03-25  Paolo Carlini <pcarlini@unitus.it>\n-            Richard Henderson  <rth@redhat.com>\n+\t    Richard Henderson  <rth@redhat.com>\n \n \t* testsuite/22_locale/codecvt_members_unicode_char.cc\n \t(test01, test02): make sure that the i_lit_base array\n \tis sufficiently aligned.\n \n 2002-03-25  Benjamin Kosnik  <bkoz@redhat.com>\n \n-        * config/os/newlib/bits/ctype_noninline.h (ctype::classic): Set to\n-        _ctype_.\n+\t* config/os/newlib/bits/ctype_noninline.h (ctype::classic): Set to\n+\t_ctype_.\n \n 2002-03-25  Paolo Carlini  <pcarlini@unitus.it>\n \n@@ -2541,14 +2549,14 @@\n \ttest against +-1.\n \n 2002-03-25  Benjamin Kosnik  <bkoz@redhat.com>\n-            Jakub Jelinek  <jakub@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/locale/gnu/messages_members.h: Correct conditional.\n \t* config/locale/gnu/messages_members.cc: Same.\n \t* config/locale/gnu/time_members.cc: Same.\n \n 2002-03-25  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n-            Paolo Carlini  <pcarlini@unitus.it>\n+\t    Paolo Carlini  <pcarlini@unitus.it>\n \n \t* testsuite/22_locale/codecvt_members_unicode_char.cc\n \t(test01, test02): Fix i_lit_base arrays, making them\n@@ -2590,7 +2598,7 @@\n \t* configure: Likewise.\n \n 2002-03-19  Paolo Carlini  <pcarlini@unitus.it>\n-            Ulrich Drepper  <drepper@redhat.com>\n+\t    Ulrich Drepper  <drepper@redhat.com>\n \n \t* src/locale-inst.cc (__convert_from_v): Add an additional\n \t__size parameter in the declarations.\n@@ -2692,7 +2700,7 @@\n \t* testsuite/thread/pthread4.cc: Lower nominal iteration counter.\n \n 2002-03-12  Benjamin Kosnik  <bkoz@redhat.com>\n-            Per Liboriussen  <liborius@stofanet.dk>\n+\t    Per Liboriussen  <liborius@stofanet.dk>\n \n \t* config/os/gnu-linux/bits/ctype_noninline.h: Cast to\n \tunsigned char.\n@@ -2764,7 +2772,7 @@\n \tRemove redundant variable.\n \n 2002-03-10  Ulrich Drepper  <drepper@redhat.com>\n-            Paolo Carlini  <pcarlini@unitus.it>\n+\t    Paolo Carlini  <pcarlini@unitus.it>\n \n \t* config/locale/generic/collate_members.cc\n \t(collate<char,wchar_t>::_M_compare_helper): normalize"}, {"sha": "bb71fb189505f24b9138a87405ca7f0246566029", "filename": "libstdc++-v3/include/std/std_limits.h", "status": "modified", "additions": 3, "deletions": 80, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf2214db0c1ff761ecc292c9224349ccd0894143/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf2214db0c1ff761ecc292c9224349ccd0894143/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h?ref=cf2214db0c1ff761ecc292c9224349ccd0894143", "patch": "@@ -150,34 +150,6 @@\n #define __glibcpp_u64_digits 64\n #define __glibcpp_u64_digits10 19\n \n-#if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n-#  define __glibcpp_f32_is_iec559  true\n-#endif\n-#ifndef __glibcpp_f32_is_iec559\n-#  define __glibcpp_f32_is_iec559 false\n-#endif \n-#if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n-#  define __glibcpp_f64_is_iec559 true\n-#endif\n-#ifndef __glibcpp_f64_is_iec559\n-#  define __glibcpp_f64_is_iec559 false\n-#endif \n-#if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n-#  define __glibcpp_f80_is_iec559 true\n-#endif\n-#ifndef __glibcpp_f80_is_iec559\n-#  define __glibcpp_f80_is_iec559 false\n-#endif \n-#if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n-#  define __glibcpp_f96_is_iec559 true\n-#endif\n-#if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n-#  define __glibcpp_f128_is_iec559 true\n-#endif\n-#ifndef __glibcpp_f128_is_iec559\n-#  define __glibcpp_f128_is_iec559 false\n-#endif\n-\n // bool-specific hooks:\n //     __glibcpp_bool_digits  __glibcpp_int_traps __glibcpp_long_traps\n \n@@ -497,16 +469,6 @@\n // float\n //\n \n-#if __FLOAT_BIT__ == 32\n-#  define __glibcpp_float_is_iec559 __glibcpp_f32_is_iec559\n-#elif __FLOAT_BIT__ == 64\n-#  define __glibcpp_float_is_iec559 __glibcpp_f64_is_iec559\n-#elif __FLOAT_BIT__ == 80\n-#  define __glibcpp_float_is_iec559 __glibcpp_f80_is_iec559\n-#else\n-// You must define these macros in the configuration file.\n-#endif\n-\n // Default values.  Should be overriden in configuration files if necessary.\n \n #ifndef __glibcpp_float_has_denorm_loss\n@@ -517,10 +479,6 @@\n #  define __glibcpp_float_is_bounded true\n #endif\n \n-#ifndef __glibcpp_float_is_iec559\n-#  define __glibcpp_float_is_iec559 false\n-#endif\n-\n #ifndef __glibcpp_float_is_modulo\n #  define __glibcpp_float_is_modulo false\n #endif\n@@ -535,26 +493,12 @@\n \n // double\n \n-#if __DOUBLE_BIT__ == 32\n-#  define __glibcpp_double_is_iec559 __glibcpp_f32_is_iec559\n-#elif __DOUBLE_BIT__ == 64\n-#  define __glibcpp_double_is_iec559 __glibcpp_f64_is_iec559\n-#elif __DOUBLE_BIT__ == 80\n-#  define __glibcpp_double_is_iec559 __glibcpp_f80_is_iec559\n-#else\n-// You must define these macros in the configuration file.\n-#endif\n-\n // Default values.  Should be overriden in configuration files if necessary.\n \n #ifndef __glibcpp_double_has_denorm_loss\n #  define __glibcpp_double_has_denorm_loss false\n #endif\n \n-#ifndef __glibcpp_double_is_iec559\n-#  define __glibcpp_double_is_iec559 false\n-#endif\n-\n #ifndef __glibcpp_double_is_bounded\n #  define __glibcpp_double_is_bounded true\n #endif\n@@ -573,30 +517,12 @@\n \n // long double\n \n-#if __LONG_DOUBLE_BIT__ == 32\n-#  define __glibcpp_long_double_is_iec559 __glibcpp_f32_is_iec559\n-#elif __LONG_DOUBLE_BIT__ == 64\n-#  define __glibcpp_long_double_is_iec559 __glibcpp_f64_is_iec559\n-#elif __LONG_DOUBLE_BIT__ == 80\n-#  define __glibcpp_long_double_is_iec559 __glibcpp_f80_is_iec559\n-#elif __LONG_DOUBLE_BIT__ == 96\n-#  define __glibcpp_long_double_is_iec559 __glibcpp_f96_is_iec559\n-#elif __LONG_DOUBLE_BIT__ == 128\n-#  define __glibcpp_long_double_is_iec559 __glibcpp_f128_is_iec559\n-#else\n-// You must define these macros in the configuration file.\n-#endif\n-\n // Default values.  Should be overriden in configuration files if necessary.\n \n #ifndef __glibcpp_long_double_has_denorm_loss\n #  define __glibcpp_long_double_has_denorm_loss false\n #endif\n \n-#ifndef __glibcpp_long_double_is_iec559\n-#  define __glibcpp_long_double_is_iec559 false\n-#endif\n-\n #ifndef __glibcpp_long_double_is_bounded\n #  define __glibcpp_long_double_is_bounded true\n #endif\n@@ -1502,7 +1428,7 @@ namespace std\n       static float denorm_min() throw()\n       { return __FLT_DENORM_MIN__; }\n \n-      static const bool is_iec559 = __glibcpp_float_is_iec559;\n+      static const bool is_iec559 = has_infinity && has_quiet_NaN;\n       static const bool is_bounded = __glibcpp_float_is_bounded;\n       static const bool is_modulo = __glibcpp_float_is_modulo;\n \n@@ -1512,7 +1438,6 @@ namespace std\n     };\n \n #undef __glibcpp_float_has_denorm_loss\n-#undef __glibcpp_float_is_iec559\n #undef __glibcpp_float_is_bounded\n #undef __glibcpp_float_is_modulo\n #undef __glibcpp_float_traps\n@@ -1562,7 +1487,7 @@ namespace std\n       static double denorm_min() throw()\n       { return __DBL_DENORM_MIN__; }\n \n-      static const bool is_iec559 = __glibcpp_double_is_iec559;\n+      static const bool is_iec559 = has_infinity && has_quiet_NaN;\n       static const bool is_bounded = __glibcpp_double_is_bounded;\n       static const bool is_modulo = __glibcpp_double_is_modulo;\n \n@@ -1572,7 +1497,6 @@ namespace std\n     };\n \n #undef __glibcpp_double_has_denorm_loss\n-#undef __glibcpp_double_is_iec559\n #undef __glibcpp_double_is_bounded\n #undef __glibcpp_double_is_modulo\n #undef __glibcpp_double_traps\n@@ -1624,7 +1548,7 @@ namespace std\n       static long double denorm_min() throw()\n       { return __LDBL_DENORM_MIN__; }\n \n-      static const bool is_iec559 = __glibcpp_long_double_is_iec559;\n+      static const bool is_iec559 = has_infinity && has_quiet_NaN;\n       static const bool is_bounded = __glibcpp_long_double_is_bounded;\n       static const bool is_modulo = __glibcpp_long_double_is_modulo;\n \n@@ -1634,7 +1558,6 @@ namespace std\n     };\n \n #undef __glibcpp_long_double_has_denorm_loss\n-#undef __glibcpp_long_double_is_iec559\n #undef __glibcpp_long_double_is_bounded\n #undef __glibcpp_long_double_is_modulo\n #undef __glibcpp_long_double_traps"}]}