{"sha": "5e0919f1eecbb00fdcf16ff7e064be122fd0bbfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUwOTE5ZjFlZWNiYjAwZmRjZjE2ZmY3ZTA2NGJlMTIyZmQwYmJmYw==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2013-04-03T20:24:07Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2013-04-03T20:24:07Z"}, "message": "hwint.c (sext_hwi, zext_hwi): New functions.\n\n2013-04-03  Kenneth Zadeck <zadeck@naturalbridge.com>\n\n\t* hwint.c (sext_hwi, zext_hwi): New functions.\n\t* hwint.h (HOST_BITS_PER_HALF_WIDE_INT, HOST_HALF_WIDE_INT,\n\tHOST_HALF_WIDE_INT_PRINT, HOST_HALF_WIDE_INT_PRINT_C,\n\tHOST_HALF_WIDE_INT_PRINT_DEC, HOST_HALF_WIDE_INT_PRINT_DEC_C,\n\tHOST_HALF_WIDE_INT_PRINT_UNSIGNED, HOST_HALF_WIDE_INT_PRINT_HEX,\n\tHOST_HALF_WIDE_INT_PRINT_HEX_PURE): New symbols.\n\t(sext_hwi, zext_hwi): New functions.\n\nFrom-SVN: r197456", "tree": {"sha": "98ffd8bc9a37f3b09621b894c7db0addd5423458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98ffd8bc9a37f3b09621b894c7db0addd5423458"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e0919f1eecbb00fdcf16ff7e064be122fd0bbfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e0919f1eecbb00fdcf16ff7e064be122fd0bbfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e0919f1eecbb00fdcf16ff7e064be122fd0bbfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e0919f1eecbb00fdcf16ff7e064be122fd0bbfc/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be672e08bbe0d9f210285ec6f3eccf4ff0469d0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be672e08bbe0d9f210285ec6f3eccf4ff0469d0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be672e08bbe0d9f210285ec6f3eccf4ff0469d0e"}], "stats": {"total": 114, "additions": 114, "deletions": 0}, "files": [{"sha": "fe2e6cd2e600ca68305115254ed7a22226518180", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0919f1eecbb00fdcf16ff7e064be122fd0bbfc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0919f1eecbb00fdcf16ff7e064be122fd0bbfc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e0919f1eecbb00fdcf16ff7e064be122fd0bbfc", "patch": "@@ -1,3 +1,13 @@\n+2013-04-03  Kenneth Zadeck <zadeck@naturalbridge.com>\n+\n+\t* hwint.c (sext_hwi, zext_hwi): New functions.\n+\t* hwint.h (HOST_BITS_PER_HALF_WIDE_INT, HOST_HALF_WIDE_INT,\n+\tHOST_HALF_WIDE_INT_PRINT, HOST_HALF_WIDE_INT_PRINT_C,\n+\tHOST_HALF_WIDE_INT_PRINT_DEC, HOST_HALF_WIDE_INT_PRINT_DEC_C,\n+\tHOST_HALF_WIDE_INT_PRINT_UNSIGNED, HOST_HALF_WIDE_INT_PRINT_HEX,\n+\tHOST_HALF_WIDE_INT_PRINT_HEX_PURE): New symbols.\n+\t(sext_hwi, zext_hwi): New functions.\n+\t\n 2013-04-03  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/56799"}, {"sha": "134fe1da2cce45964cbfc47a2f813ac0e30acdd7", "filename": "gcc/hwint.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0919f1eecbb00fdcf16ff7e064be122fd0bbfc/gcc%2Fhwint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0919f1eecbb00fdcf16ff7e064be122fd0bbfc/gcc%2Fhwint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.c?ref=5e0919f1eecbb00fdcf16ff7e064be122fd0bbfc", "patch": "@@ -204,3 +204,35 @@ least_common_multiple (HOST_WIDE_INT a, HOST_WIDE_INT b)\n {\n   return mul_hwi (abs_hwi (a) / gcd (a, b), abs_hwi (b));\n }\n+\n+#ifdef ENABLE_CHECKING\n+/* Sign extend SRC starting from PREC.  */\n+\n+HOST_WIDE_INT\n+sext_hwi (HOST_WIDE_INT src, unsigned int prec)\n+{\n+  gcc_checking_assert (prec <= HOST_BITS_PER_WIDE_INT);\n+\n+  if (prec == HOST_BITS_PER_WIDE_INT)\n+    return src;\n+  else\n+    {\n+      int shift = HOST_BITS_PER_WIDE_INT - prec;\n+      return (src << shift) >> shift;\n+    }\n+}\n+\n+/* Zero extend SRC starting from PREC.  */\n+\n+unsigned HOST_WIDE_INT\n+zext_hwi (unsigned HOST_WIDE_INT src, unsigned int prec)\n+{\n+  gcc_checking_assert (prec <= HOST_BITS_PER_WIDE_INT);\n+\n+  if (prec == HOST_BITS_PER_WIDE_INT)\n+    return src;\n+  else\n+    return src & (((HOST_WIDE_INT)1 << prec) - 1);\n+}\n+\n+#endif"}, {"sha": "dbf023975cb3a1e1b2c6a63745948cdb863a058b", "filename": "gcc/hwint.h", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0919f1eecbb00fdcf16ff7e064be122fd0bbfc/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0919f1eecbb00fdcf16ff7e064be122fd0bbfc/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=5e0919f1eecbb00fdcf16ff7e064be122fd0bbfc", "patch": "@@ -76,6 +76,40 @@ extern char sizeof_long_long_must_be_8[sizeof(long long) == 8 ? 1 : -1];\n # endif\n #endif\n \n+/* Print support for half a host wide int.  */\n+#define HOST_BITS_PER_HALF_WIDE_INT (HOST_BITS_PER_WIDE_INT / 2)\n+#if HOST_BITS_PER_HALF_WIDE_INT == HOST_BITS_PER_LONG\n+# define HOST_HALF_WIDE_INT long\n+# define HOST_HALF_WIDE_INT_PRINT HOST_LONG_FORMAT\n+# define HOST_HALF_WIDE_INT_PRINT_C \"L\"\n+# define HOST_HALF_WIDE_INT_PRINT_DEC \"%\" HOST_HALF_WIDE_INT_PRINT \"d\"\n+# define HOST_HALF_WIDE_INT_PRINT_DEC_C HOST_HALF_WIDE_INT_PRINT_DEC HOST_HALF_WIDE_INT_PRINT_C\n+# define HOST_HALF_WIDE_INT_PRINT_UNSIGNED \"%\" HOST_HALF_WIDE_INT_PRINT \"u\"\n+# define HOST_HALF_WIDE_INT_PRINT_HEX \"%#\" HOST_HALF_WIDE_INT_PRINT \"x\"\n+# define HOST_HALF_WIDE_INT_PRINT_HEX_PURE \"%\" HOST_HALF_WIDE_INT_PRINT \"x\"\n+#elif HOST_BITS_PER_HALF_WIDE_INT == HOST_BITS_PER_INT\n+# define HOST_HALF_WIDE_INT int\n+# define HOST_HALF_WIDE_INT_PRINT \"\"\n+# define HOST_HALF_WIDE_INT_PRINT_C \"\"\n+# define HOST_HALF_WIDE_INT_PRINT_DEC \"%\" HOST_HALF_WIDE_INT_PRINT \"d\"\n+# define HOST_HALF_WIDE_INT_PRINT_DEC_C HOST_HALF_WIDE_INT_PRINT_DEC HOST_HALF_WIDE_INT_PRINT_C\n+# define HOST_HALF_WIDE_INT_PRINT_UNSIGNED \"%\" HOST_HALF_WIDE_INT_PRINT \"u\"\n+# define HOST_HALF_WIDE_INT_PRINT_HEX \"%#\" HOST_HALF_WIDE_INT_PRINT \"x\"\n+# define HOST_HALF_WIDE_INT_PRINT_HEX_PURE \"%\" HOST_HALF_WIDE_INT_PRINT \"x\"\n+#elif HOST_BITS_PER_HALF_WIDE_INT == HOST_BITS_PER_SHORT\n+# define HOST_HALF_WIDE_INT short\n+# define HOST_HALF_WIDE_INT_PRINT \"\"\n+# define HOST_HALF_WIDE_INT_PRINT_C \"\"\n+# define HOST_HALF_WIDE_INT_PRINT_DEC \"%\" HOST_HALF_WIDE_INT_PRINT \"d\"\n+# define HOST_HALF_WIDE_INT_PRINT_DEC_C HOST_HALF_WIDE_INT_PRINT_DEC HOST_HALF_WIDE_INT_PRINT_C\n+# define HOST_HALF_WIDE_INT_PRINT_UNSIGNED \"%\" HOST_HALF_WIDE_INT_PRINT \"u\"\n+# define HOST_HALF_WIDE_INT_PRINT_HEX \"%#\" HOST_HALF_WIDE_INT_PRINT \"x\"\n+# define HOST_HALF_WIDE_INT_PRINT_HEX_PURE \"%\" HOST_HALF_WIDE_INT_PRINT \"x\"\n+#else\n+#error Please add support for HOST_HALF_WIDE_INT\n+#endif\n+\n+\n #define HOST_WIDE_INT_1 HOST_WIDE_INT_C(1)\n \n /* This is a magic identifier which allows GCC to figure out the type\n@@ -93,16 +127,22 @@ typedef HOST_WIDE_INT __gcc_host_wide_int__;\n # if HOST_BITS_PER_WIDE_INT == 64\n #  define HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n      \"0x%\" HOST_LONG_FORMAT \"x%016\" HOST_LONG_FORMAT \"x\"\n+#  define HOST_WIDE_INT_PRINT_PADDED_HEX \\\n+     \"%016\" HOST_LONG_FORMAT \"x\"\n # else\n #  define HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n      \"0x%\" HOST_LONG_FORMAT \"x%08\" HOST_LONG_FORMAT \"x\"\n+#  define HOST_WIDE_INT_PRINT_PADDED_HEX \\\n+     \"%08\" HOST_LONG_FORMAT \"x\"\n # endif\n #else\n # define HOST_WIDE_INT_PRINT HOST_LONG_LONG_FORMAT\n # define HOST_WIDE_INT_PRINT_C \"LL\"\n   /* We can assume that 'long long' is at least 64 bits.  */\n # define HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n     \"0x%\" HOST_LONG_LONG_FORMAT \"x%016\" HOST_LONG_LONG_FORMAT \"x\"\n+# define HOST_WIDE_INT_PRINT_PADDED_HEX \\\n+    \"%016\" HOST_LONG_LONG_FORMAT \"x\"\n #endif /* HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG */\n \n #define HOST_WIDE_INT_PRINT_DEC \"%\" HOST_WIDE_INT_PRINT \"d\"\n@@ -276,4 +316,36 @@ extern HOST_WIDE_INT pos_mul_hwi (HOST_WIDE_INT, HOST_WIDE_INT);\n extern HOST_WIDE_INT mul_hwi (HOST_WIDE_INT, HOST_WIDE_INT);\n extern HOST_WIDE_INT least_common_multiple (HOST_WIDE_INT, HOST_WIDE_INT);\n \n+/* Sign extend SRC starting from PREC.  */\n+\n+#ifdef ENABLE_CHECKING\n+extern HOST_WIDE_INT sext_hwi (HOST_WIDE_INT, unsigned int);\n+#else\n+static inline HOST_WIDE_INT\n+sext_hwi (HOST_WIDE_INT src, unsigned int prec)\n+{\n+  if (prec == HOST_BITS_PER_WIDE_INT)\n+    return src;\n+  else\n+    {\n+      int shift = HOST_BITS_PER_WIDE_INT - prec;\n+      return (src << shift) >> shift;\n+    }\n+}\n+#endif\n+\n+/* Zero extend SRC starting from PREC.  */\n+#ifdef ENABLE_CHECKING\n+extern unsigned HOST_WIDE_INT zext_hwi (unsigned HOST_WIDE_INT, unsigned int);\n+#else\n+static inline unsigned HOST_WIDE_INT\n+zext_hwi (unsigned HOST_WIDE_INT src, unsigned int prec)\n+{\n+  if (prec == HOST_BITS_PER_WIDE_INT)\n+    return src;\n+  else\n+    return src & (((HOST_WIDE_INT)1 << prec) - 1);\n+}\n+#endif\n+\n #endif /* ! GCC_HWINT_H */"}]}