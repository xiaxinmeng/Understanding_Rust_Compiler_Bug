{"sha": "7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q2MGJlOTRkNjEwY2Q1ZjE4YmMyYWU2NGU0ZTk3ZjIxMGM4NTM4Yg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-08-25T09:52:54Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-08-25T09:52:54Z"}, "message": "tree.h (build_int_cst): New, sign extended constant.\n\n\t* tree.h  (build_int_cst): New, sign extended constant.\n\t(build_int_cstu): New, zero extended constant.\n\t(build_int_cst_wide): Renamed from build_int_cst.\n\t* tree.c (build_int_cst, build_int_cstu): New.\n\t(build_int_cst_wide): Renamed from build_int_cst.\n\t(make_vector_type, build_common_tree_nodes,\n\tbuild_common_tree_nodes_2): Adjust build_int_cst calls.\n\t* builtins.c (expand_builtin_prefetch, expand_builtin_strstr,\n\texpand_builtin_strpbrk, expand_builtin_fputs,\n\tbuild_string_literal, expand_builtin_printf,\n\texpand_builtin_sprintf, fold_builtin_classify_type,\n\tfold_builtin_lround, fold_builtin_bitop, fold_builtin_isascii,\n\tfold_builtin_toascii, fold_builtin_isdigit,\n\tsimplify_builtin_strstr, simplify_builtin_strpbrk,\n\tfold_builtin_fputs, simplify_builtin_sprintf): Likewise.\n\t* c-common.c (start_fname_decls, fix_string_type, shorten_compare,\n\tDEF_ATTR_INT): Likewise.\n\t* c-decl.c (complete_array_type, check_bitfield_type_and_width):\n\tLikewise.\n\t* c-lex.c (interpret_integer, lex_charconst): Likewise.\n\t* c-parse.in (primary) <TYPES_COMPATIBLE_P> Likewise.\n\t* c-pretty-print.c (pp_c_integer_constant): Likewise.\n\t* c-typeck.c (really_start_incremental_init, push_init_level,\n\tset_nonincremental_init_from_string): Likewise.\n\t* calls.c (load_register_parameters): Likewise.\n\tconvert.c (convert_to_pointer): Likewise.\n\tcoverage.c (coverage_counter_alloc, tree_coverage_counter_ref,\n\tbuild_fn_info_type, build_fn_info_value, build_ctr_info_value,\n\tbuild_gcov_info): Likewise.\n\t* except.c (init_eh, assign_filter_values): Likewise.\n\t* expmed.c (store_fixed_bit_field, extract_bit_field,\n\textract_fixed_bit_field, extract_split_bit_field, expand_shift,\n\texpand_mult_const, expand_mult_highpart_adjust, extract_high_half,\n\texpand_sdiv_pow2, expand_divmod, make_tree): Likewise.\n\t* expr.c (convert_move, emit_group_load, emit_group_store,\n\texpand_assignment, store_constructor, store_field,\n\texpand_expr_real_1, reduce_to_bit_field_precision): Likewise.\n\tfold-const.c (force_fit_type, int_const_binop, fold_convert_const,\n\tinvert_truthvalue, optimize_bit_field_compare,\n\tdecode_field_reference, all_ones_mask_p, constant_boolean_node,\n\tfold_div_compare, fold, fold_read_from_constant_string,\n\tfold_negate_const, fold_abs_const, fold_not_const, round_up,\n\tround_down): Likewise.\n\t* function.c (assign_parm_setup_block): Likewise.\n\t* stmt.c (shift_return_value, expand_case, estimate_case_costs):\n\tLikewise.\n\t* stor-layout.c (layout_type, initialize_sizetypes,\n\tset_min_and_max_values_for_integral_type): Likewise.\n\t* tree-chrec.c (chrec_fold_multiply_poly_poly,\n\treset_evolution_in_loop): Likewise.\n\t* tree-chrec.h (build_polynomial_chrec): Likewise.\n\t* tree-complex.c (build_replicated_const): Likewise.\n\t* tree-eh.c (honor_protect_cleanup_actions,\n\tlower_try_finally_onedest, lower_try_finally_copy,\n\tlower_try_finally_switch): Likewise.\n\t* tree-mudflap.c (mf_build_string, mx_register_decls,\n\tmudflap_register_call, mudflap_enqueue_constant): Likewise.\n\t* tree-nested.c (get_trampoline_type, get_nl_goto_field): Likewise.\n\t* tree-pretty-print.c (dump_generic_node): Likewise.\n\t* tree-ssa-ccp.c (widen_bitfield, maybe_fold_offset_to_array_ref):\n\tLikewise.\n\t* tree-ssa-dom.c (simplify_rhs_and_lookup_avail_expr): Likewise.\n\t* tree-ssa-loop-niter.c (number_of_iterations_cond,\n\tloop_niter_by_eval, upper_bound_in_type, lower_bound_in_type):\n\tLikewise.\n\t* tree-ssa-loop-ivcanon.c (create_canonical_iv,\n\tcanonicalize_loop_induction_variables): Likewise.\n\t* tree-vectorizer.c (vect_create_index_for_array_ref,\n\tvect_transform_loop_bound, vect_compute_data_ref_alignment):\n\tLikewise.\n\n\t* config/alpha/alpha.c (alpha_initialize_trampoline, alpha_va_start,\n\talpha_gimplify_va_arg_1): Likewise.\n\t* config/arm/arm.c (arm_get_cookie_size): Likewise.\n\t* config/c4x/c4x.c (c4x_gimplify_va_arg_expr): Likewise.\n\t* config/i386/i386.c (ix86_va_start, ix86_gimplify_va_arg): Likewise.\n\t* config/ia64/ia64.c (ia64_gimplify_va_arg): Likewise.\n\t* config/mips/mips.c (mips_build_builtin_va_list, mips_va_start,\n\tmips_gimplify_va_arg_expr): Likewise.\n\t* config/pa/pa.c (hppa_gimplify_va_arg_expr): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_va_start, rs6000_gimplify_va_arg,\n\tadd_compiler_branch_island): Likewise.\n\t* config/s390/s390.c (s390_va_start): Likewise.\n\t* config/sh/sh.c (sh_va_start): Likewise.\n\t* config/stormy16/stormy16.c (xstormy16_expand_builtin_va_start):\n\tLikewise.\n\t* config/xtensa/xtensa.c (xtensa_va_start,\n\txtensa_gimplify_va_arg_expr): Likewise.\n\n\t* objc/objc-act.c (build_objc_string_object,\n\tbuild_objc_symtab_template, init_def_list, init_objc_symtab,\n\tinit_module_descriptor, generate_static_references,\n\tbuild_selector_translation_table, get_proto_encoding,\n\tbuild_typed_selector_reference, build_selector_reference,\n\tbuild_next_objc_exception_stuff,\n\tbuild_method_prototype_list_template, generate_descriptor_table,\n\tgenerate_protocols, build_protocol_initializer,\n\tbuild_ivar_list_template, build_method_list_template,\n\tbuild_ivar_list_initializer, generate_ivars_list,\n\tgenerate_dispatch_table, generate_protocol_list,\n\tbuild_category_initializer, build_shared_structure_initializer,\n\tgenerate_shared_structures, handle_impent,\n\tgenerate_objc_image_info): Likewise.\n\n2004-04-25  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* cfglayout.c (duplicate_insn_chain): Remove references to\n\tNOTE_INSN_LOOP_VTOP and NOTE_INSN_LOOP_CONT.\n\t* cfgloop.h (struct loop): Remove fields vtop, cont and cont_dominator.\n\t* cfgrtl.c (rtl_delete_block): Remove handling of NOTE_INSN_LOOP_CONT.\n\t* final.c (final_scan_insn): Remove references to NOTE_INSN_LOOP_VTOP\n\tand NOTE_INSN_LOOP_CONT.\n\t* insn-notes.def (NOTE_INSN_LOOP_VTOP, NOTE_INSN_LOOP_CONT): Remove.\n\t* jump.c (squeeze_notes): Remove references to NOTE_INSN_LOOP_VTOP\n\tand NOTE_INSN_LOOP_CONT.\n\t* loop.c (scan_loops, find_and_verify_loops, for_each_insn_in_loop,\n\tcheck_dbra_loop, loop_dump_aux): Remove references to removed notes\n\tand fields.\n\t* reorg.c (mostly_true_jump): Do not rely on NOTE_INSN_LOOP_VTOPs.\n\t* unroll.c (unroll_loop, copy_loop_body, loop_iterations): Remove\n\treferences to removed notes and fields.\n\t(subtract_reg_term, ujump_to_loop_cont): Remove.\n\nFrom-SVN: r86544", "tree": {"sha": "b5d8f16132872f7a863ddce55007c0a82239369a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5d8f16132872f7a863ddce55007c0a82239369a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/comments", "author": null, "committer": null, "parents": [{"sha": "5b292a4b0568b7b360fb092893496211f3a51126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b292a4b0568b7b360fb092893496211f3a51126", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b292a4b0568b7b360fb092893496211f3a51126"}], "stats": {"total": 1251, "additions": 705, "deletions": 546}, "files": [{"sha": "11a05c47da253294961f440e92ce684d4c399de5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -1,3 +1,109 @@\n+2004-08-25  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* tree.h  (build_int_cst): New, sign extended constant.\n+\t(build_int_cstu): New, zero extended constant.\n+\t(build_int_cst_wide): Renamed from build_int_cst.\n+\t* tree.c (build_int_cst, build_int_cstu): New.\n+\t(build_int_cst_wide): Renamed from build_int_cst.\n+\t(make_vector_type, build_common_tree_nodes,\n+\tbuild_common_tree_nodes_2): Adjust build_int_cst calls.\n+\t* builtins.c (expand_builtin_prefetch, expand_builtin_strstr,\n+\texpand_builtin_strpbrk, expand_builtin_fputs,\n+\tbuild_string_literal, expand_builtin_printf,\n+\texpand_builtin_sprintf, fold_builtin_classify_type,\n+\tfold_builtin_lround, fold_builtin_bitop, fold_builtin_isascii,\n+\tfold_builtin_toascii, fold_builtin_isdigit,\n+\tsimplify_builtin_strstr, simplify_builtin_strpbrk,\n+\tfold_builtin_fputs, simplify_builtin_sprintf): Likewise.\n+\t* c-common.c (start_fname_decls, fix_string_type, shorten_compare,\n+\tDEF_ATTR_INT): Likewise.\n+\t* c-decl.c (complete_array_type, check_bitfield_type_and_width):\n+\tLikewise.\n+\t* c-lex.c (interpret_integer, lex_charconst): Likewise.\n+\t* c-parse.in (primary) <TYPES_COMPATIBLE_P> Likewise.\n+\t* c-pretty-print.c (pp_c_integer_constant): Likewise.\n+\t* c-typeck.c (really_start_incremental_init, push_init_level,\n+\tset_nonincremental_init_from_string): Likewise.\n+\t* calls.c (load_register_parameters): Likewise.\n+\tconvert.c (convert_to_pointer): Likewise.\n+\tcoverage.c (coverage_counter_alloc, tree_coverage_counter_ref,\n+\tbuild_fn_info_type, build_fn_info_value, build_ctr_info_value,\n+\tbuild_gcov_info): Likewise.\n+\t* except.c (init_eh, assign_filter_values): Likewise.\n+\t* expmed.c (store_fixed_bit_field, extract_bit_field,\n+\textract_fixed_bit_field, extract_split_bit_field, expand_shift,\n+\texpand_mult_const, expand_mult_highpart_adjust, extract_high_half,\n+\texpand_sdiv_pow2, expand_divmod, make_tree): Likewise.\n+\t* expr.c (convert_move, emit_group_load, emit_group_store,\n+\texpand_assignment, store_constructor, store_field,\n+\texpand_expr_real_1, reduce_to_bit_field_precision): Likewise.\n+\tfold-const.c (force_fit_type, int_const_binop, fold_convert_const,\n+\tinvert_truthvalue, optimize_bit_field_compare,\n+\tdecode_field_reference, all_ones_mask_p, constant_boolean_node,\n+\tfold_div_compare, fold, fold_read_from_constant_string,\n+\tfold_negate_const, fold_abs_const, fold_not_const, round_up,\n+\tround_down): Likewise.\n+\t* function.c (assign_parm_setup_block): Likewise.\n+\t* stmt.c (shift_return_value, expand_case, estimate_case_costs):\n+\tLikewise.\n+\t* stor-layout.c (layout_type, initialize_sizetypes,\n+\tset_min_and_max_values_for_integral_type): Likewise.\n+\t* tree-chrec.c (chrec_fold_multiply_poly_poly,\n+\treset_evolution_in_loop): Likewise.\n+\t* tree-chrec.h (build_polynomial_chrec): Likewise.\n+\t* tree-complex.c (build_replicated_const): Likewise.\n+\t* tree-eh.c (honor_protect_cleanup_actions,\n+\tlower_try_finally_onedest, lower_try_finally_copy,\n+\tlower_try_finally_switch): Likewise.\n+\t* tree-mudflap.c (mf_build_string, mx_register_decls,\n+\tmudflap_register_call, mudflap_enqueue_constant): Likewise.\n+\t* tree-nested.c (get_trampoline_type, get_nl_goto_field): Likewise.\n+\t* tree-pretty-print.c (dump_generic_node): Likewise.\n+\t* tree-ssa-ccp.c (widen_bitfield, maybe_fold_offset_to_array_ref):\n+\tLikewise.\n+\t* tree-ssa-dom.c (simplify_rhs_and_lookup_avail_expr): Likewise.\n+\t* tree-ssa-loop-niter.c (number_of_iterations_cond,\n+\tloop_niter_by_eval, upper_bound_in_type, lower_bound_in_type):\n+\tLikewise.\n+\t* tree-ssa-loop-ivcanon.c (create_canonical_iv,\n+\tcanonicalize_loop_induction_variables): Likewise.\n+\t* tree-vectorizer.c (vect_create_index_for_array_ref,\n+\tvect_transform_loop_bound, vect_compute_data_ref_alignment):\n+\tLikewise.\n+\n+\t* config/alpha/alpha.c (alpha_initialize_trampoline, alpha_va_start,\n+\talpha_gimplify_va_arg_1): Likewise.\n+\t* config/arm/arm.c (arm_get_cookie_size): Likewise.\n+\t* config/c4x/c4x.c (c4x_gimplify_va_arg_expr): Likewise.\n+\t* config/i386/i386.c (ix86_va_start, ix86_gimplify_va_arg): Likewise.\n+\t* config/ia64/ia64.c (ia64_gimplify_va_arg): Likewise.\n+\t* config/mips/mips.c (mips_build_builtin_va_list, mips_va_start,\n+\tmips_gimplify_va_arg_expr): Likewise.\n+\t* config/pa/pa.c (hppa_gimplify_va_arg_expr): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_va_start, rs6000_gimplify_va_arg,\n+\tadd_compiler_branch_island): Likewise.\n+\t* config/s390/s390.c (s390_va_start): Likewise.\n+\t* config/sh/sh.c (sh_va_start): Likewise.\n+\t* config/stormy16/stormy16.c (xstormy16_expand_builtin_va_start):\n+\tLikewise.\n+\t* config/xtensa/xtensa.c (xtensa_va_start,\n+\txtensa_gimplify_va_arg_expr): Likewise.\n+\t\n+\t* objc/objc-act.c (build_objc_string_object,\n+\tbuild_objc_symtab_template, init_def_list, init_objc_symtab,\n+\tinit_module_descriptor, generate_static_references,\n+\tbuild_selector_translation_table, get_proto_encoding,\n+\tbuild_typed_selector_reference, build_selector_reference,\n+\tbuild_next_objc_exception_stuff,\n+\tbuild_method_prototype_list_template, generate_descriptor_table,\n+\tgenerate_protocols, build_protocol_initializer,\n+\tbuild_ivar_list_template, build_method_list_template,\n+\tbuild_ivar_list_initializer, generate_ivars_list,\n+\tgenerate_dispatch_table, generate_protocol_list,\n+\tbuild_category_initializer, build_shared_structure_initializer,\n+\tgenerate_shared_structures, handle_impent,\n+\tgenerate_objc_image_info): Likewise.\n+\n 2004-04-25  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* cfglayout.c (duplicate_insn_chain): Remove references to"}, {"sha": "e49c9ab4e469fafc7beb10266369c687e158451b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -1,6 +1,13 @@\n+2004-08-25  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cuintp.c (UI_To_gnu): Adjust build_int_cst calls.\n+\t* trans.c (Exception_Handler_to_gnu_sjlj, gnat_to_gnu): Likewise.\n+\t* utils.c (init_gigi_decls): Likewise.\n+\t* utils2.c (build_call_raise, build_allocator): Likewise.\n+\t\n 2004-08-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n-\t* ada/utils.c (gnat_init_decl_processing): Adjust\n+\t* utils.c (gnat_init_decl_processing): Adjust\n \tbuild_common_tree_nodes call.\n \n 2004-08-20  Nathan Sidwell  <nathan@codesourcery.com>"}, {"sha": "12eff09e840de3ca3d6acffdf6505872fd74c992", "filename": "gcc/ada/cuintp.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fada%2Fcuintp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fada%2Fcuintp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcuintp.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -63,9 +63,7 @@ UI_To_gnu (Uint Input, tree type)\n \n   if (Input <= Uint_Direct_Last)\n     gnu_ret = convert (type, build_int_cst (NULL_TREE,\n-\t\t\t\t\t    Input - Uint_Direct_Bias,\n-\t\t\t\t\t    Input < Uint_Direct_Bias\n-\t\t\t\t\t    ? -1 : 0));\n+\t\t\t\t\t    Input - Uint_Direct_Bias));\n   else\n     {\n       Int Idx =    Uints_Ptr[Input].Loc;\n@@ -76,29 +74,28 @@ UI_To_gnu (Uint Input, tree type)\n       tree comp_type\n \t= (TYPE_PRECISION (type) >= TYPE_PRECISION (integer_type_node)\n \t   ? type : integer_type_node);\n-      tree gnu_base = convert (comp_type, build_int_cst (NULL_TREE, Base, 0));\n+      tree gnu_base = convert (comp_type, build_int_cst (NULL_TREE, Base));\n \n       if (Length <= 0)\n \tabort ();\n \n-      gnu_ret = convert (comp_type, build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t   First, First < 0 ? -1 : 0));\n+      gnu_ret = convert (comp_type, build_int_cst (NULL_TREE, First));\n       if (First < 0)\n \tfor (Idx++, Length--; Length; Idx++, Length--)\n \t  gnu_ret = fold (build (MINUS_EXPR, comp_type,\n \t\t\t\t fold (build (MULT_EXPR, comp_type,\n \t\t\t\t\t      gnu_ret, gnu_base)),\n \t\t\t\t convert (comp_type,\n \t\t\t\t\t  build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t\t Udigits_Ptr[Idx], 0))));\n+\t\t\t\t\t\t\t Udigits_Ptr[Idx]))));\n       else\n \tfor (Idx++, Length--; Length; Idx++, Length--)\n \t  gnu_ret = fold (build (PLUS_EXPR, comp_type,\n \t\t\t\t fold (build (MULT_EXPR, comp_type,\n \t\t\t\t\t      gnu_ret, gnu_base)),\n \t\t\t\t convert (comp_type,\n \t\t\t\t\t  build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t\t Udigits_Ptr[Idx], 0))));\n+\t\t\t\t\t\t\t Udigits_Ptr[Idx]))));\n     }\n \n   gnu_ret = convert (type, gnu_ret);"}, {"sha": "d7b3b2364aaa9fd7de740044f60767ae55e9d326", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -2218,8 +2218,7 @@ Exception_Handler_to_gnu_sjlj (Node_Id gnat_node)\n \t\t  (TRUTH_ORIF_EXPR, integer_type_node,\n \t\t   build_binary_op (EQ_EXPR, integer_type_node, gnu_comp,\n \t\t\t\t    convert (TREE_TYPE (gnu_comp),\n-\t\t\t\t\t     build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t\t    'V', 0))),\n+\t\t\t\t\t     build_int_cst (NULL_TREE, 'V'))),\n \t\t   this_choice);\n \t    }\n \t}\n@@ -2507,7 +2506,7 @@ gnat_to_gnu (Node_Id gnat_node)\n       else\n \tgnu_result = convert (gnu_result_type,\n \t\t\t      build_int_cst (NULL_TREE,\n-\t\t\t\t\t     Char_Literal_Value (gnat_node), 0));\n+\t\t\t\t\t     Char_Literal_Value (gnat_node)));\n       break;\n \n     case N_Real_Literal:\n@@ -2623,8 +2622,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t\t     convert (TREE_TYPE (gnu_result_type),\n \t\t\t\t      build_int_cst\n \t\t\t\t      (NULL_TREE,\n-\t\t\t\t       Get_String_Char (gnat_string, i + 1),\n-\t\t\t\t       0)),\n+\t\t\t\t       Get_String_Char (gnat_string, i + 1))),\n \t\t\t   gnu_list);\n \n \t      gnu_idx = int_const_binop (PLUS_EXPR, gnu_idx, integer_one_node,"}, {"sha": "0cc6c987514acc999569060c7de5ffdf6119332b", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -580,7 +580,7 @@ init_gigi_decls (tree long_long_float_type, tree exception_type)\n   /* Make the types and functions used for exception processing.    */\n   jmpbuf_type\n     = build_array_type (gnat_type_for_mode (Pmode, 0),\n-\t\t\tbuild_index_type (build_int_cst (NULL_TREE, 5, 0)));\n+\t\t\tbuild_index_type (build_int_cst (NULL_TREE, 5)));\n   create_type_decl (get_identifier (\"JMPBUF_T\"), jmpbuf_type, NULL,\n \t\t    false, true, Empty);\n   jmpbuf_ptr_type = build_pointer_type (jmpbuf_type);"}, {"sha": "10da013f91e7bce2ac0c0b0f5c80ff6b45e31768", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -1444,13 +1444,13 @@ build_call_raise (int msg)\n \n   TREE_TYPE (filename)\n     = build_array_type (char_type_node,\n-\t\t\tbuild_index_type (build_int_cst (NULL_TREE, len, 0)));\n+\t\t\tbuild_index_type (build_int_cst (NULL_TREE, len)));\n \n   return\n     build_call_2_expr (fndecl,\n \t\t       build1 (ADDR_EXPR, build_pointer_type (char_type_node),\n \t\t\t       filename),\n-\t\t       build_int_cst (NULL_TREE, input_line, 0));\n+\t\t       build_int_cst (NULL_TREE, input_line));\n }\n \f\n /* Return a CONSTRUCTOR of TYPE whose list is LIST.  */\n@@ -1799,7 +1799,7 @@ build_allocator (tree type, tree init, tree result_type, Entity_Id gnat_proc,\n       /* If the size overflows, pass -1 so the allocator will raise\n \t storage error.  */\n       if (TREE_CODE (size) == INTEGER_CST && TREE_OVERFLOW (size))\n-\tsize = build_int_cst (ssizetype, -1, -1);\n+\tsize = build_int_cst (ssizetype, -1);\n \n       storage = build_call_alloc_dealloc (NULL_TREE, size,\n \t\t\t\t\t  TYPE_ALIGN (storage_type),\n@@ -1872,7 +1872,7 @@ build_allocator (tree type, tree init, tree result_type, Entity_Id gnat_proc,\n   /* If the size overflows, pass -1 so the allocator will raise\n      storage error.  */\n   if (TREE_CODE (size) == INTEGER_CST && TREE_OVERFLOW (size))\n-    size = build_int_cst (ssizetype, -1, -1);\n+    size = build_int_cst (ssizetype, -1);\n \n   /* If this is a type whose alignment is larger than the\n      biggest we support in normal alignment and this is in"}, {"sha": "9b4a88dcbd5cd7693f17ad5cbc2cf993d367d664", "filename": "gcc/builtins.c", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -903,12 +903,12 @@ expand_builtin_prefetch (tree arglist)\n       if (TREE_CHAIN (TREE_CHAIN (arglist)))\n \targ2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n       else\n-\targ2 = build_int_cst (NULL_TREE, 3, 0);\n+\targ2 = build_int_cst (NULL_TREE, 3);\n     }\n   else\n     {\n       arg1 = integer_zero_node;\n-      arg2 = build_int_cst (NULL_TREE, 3, 0);\n+      arg2 = build_int_cst (NULL_TREE, 3);\n     }\n \n   /* Argument 0 is an address.  */\n@@ -2491,7 +2491,7 @@ expand_builtin_strstr (tree arglist, rtx target, enum machine_mode mode)\n       /* New argument list transforming strstr(s1, s2) to\n \t strchr(s1, s2[0]).  */\n       arglist = build_tree_list (NULL_TREE,\n-\t\t\t\t build_int_cst (NULL_TREE, p2[0], 0));\n+\t\t\t\t build_int_cst (NULL_TREE, p2[0]));\n       arglist = tree_cons (NULL_TREE, s1, arglist);\n       return expand_expr (build_function_call_expr (fn, arglist),\n \t\t\t  target, mode, EXPAND_NORMAL);\n@@ -2648,7 +2648,7 @@ expand_builtin_strpbrk (tree arglist, rtx target, enum machine_mode mode)\n       /* New argument list transforming strpbrk(s1, s2) to\n \t strchr(s1, s2[0]).  */\n       arglist = build_tree_list (NULL_TREE,\n-\t\t\t\t build_int_cst (NULL_TREE, p2[0], 0));\n+\t\t\t\t build_int_cst (NULL_TREE, p2[0]));\n       arglist = tree_cons (NULL_TREE, s1, arglist);\n       return expand_expr (build_function_call_expr (fn, arglist),\n \t\t\t  target, mode, EXPAND_NORMAL);\n@@ -4679,7 +4679,7 @@ expand_builtin_fputs (tree arglist, rtx target, bool unlocked)\n \t    arglist = build_tree_list (NULL_TREE,\n \t\t\t\t       TREE_VALUE (TREE_CHAIN (arglist)));\n \t    arglist = tree_cons (NULL_TREE,\n-\t\t\t\t build_int_cst (NULL_TREE, p[0], 0),\n+\t\t\t\t build_int_cst (NULL_TREE, p[0]),\n \t\t\t\t arglist);\n \t    fn = fn_fputc;\n \t    break;\n@@ -4937,7 +4937,7 @@ build_string_literal (int len, const char *str)\n \n   t = build_string (len, str);\n   elem = build_type_variant (char_type_node, 1, 0);\n-  index = build_index_type (build_int_cst (NULL_TREE, len - 1, 0));\n+  index = build_index_type (build_int_cst (NULL_TREE, len - 1));\n   type = build_array_type (elem, index);\n   TREE_TYPE (t) = type;\n   TREE_CONSTANT (t) = 1;\n@@ -5023,7 +5023,7 @@ expand_builtin_printf (tree arglist, rtx target, enum machine_mode mode,\n \t  /* Given printf(\"c\"), (where c is any one character,)\n \t     convert \"c\"[0] to an int and pass that to the replacement\n \t     function.  */\n-\t  arg = build_int_cst (NULL_TREE, fmt_str[0], 0);\n+\t  arg = build_int_cst (NULL_TREE, fmt_str[0]);\n \t  arglist = build_tree_list (NULL_TREE, arg);\n \t  fn = fn_putchar;\n \t}\n@@ -5194,7 +5194,7 @@ expand_builtin_sprintf (tree arglist, rtx target, enum machine_mode mode)\n \t\t   const0_rtx, VOIDmode, EXPAND_NORMAL);\n       if (target == const0_rtx)\n \treturn const0_rtx;\n-      exp = build_int_cst (NULL_TREE, strlen (fmt_str), 0);\n+      exp = build_int_cst (NULL_TREE, strlen (fmt_str));\n       return expand_expr (exp, target, mode, EXPAND_NORMAL);\n     }\n   /* If the format is \"%s\", use strcpy if the result isn't used.  */\n@@ -6271,10 +6271,10 @@ static tree\n fold_builtin_classify_type (tree arglist)\n {\n   if (arglist == 0)\n-    return build_int_cst (NULL_TREE, no_type_class, 0);\n+    return build_int_cst (NULL_TREE, no_type_class);\n \n   return build_int_cst (NULL_TREE,\n-\t\t\ttype_to_class (TREE_TYPE (TREE_VALUE (arglist))), 0);\n+\t\t\ttype_to_class (TREE_TYPE (TREE_VALUE (arglist))));\n }\n \n /* Fold a call to __builtin_inf or __builtin_huge_val.  */\n@@ -6707,7 +6707,7 @@ fold_builtin_lround (tree exp)\n \n \t  real_round (&r, TYPE_MODE (ftype), &x);\n \t  REAL_VALUE_TO_INT (&lo, &hi, r);\n-\t  result = build_int_cst (NULL_TREE, lo, hi);\n+\t  result = build_int_cst_wide (NULL_TREE, lo, hi);\n \t  if (int_fits_type_p (result, itype))\n \t    return fold_convert (itype, result);\n \t}\n@@ -6816,7 +6816,7 @@ fold_builtin_bitop (tree exp)\n \t  abort();\n \t}\n \n-      return build_int_cst (TREE_TYPE (exp), result, 0);\n+      return build_int_cst (TREE_TYPE (exp), result);\n     }\n \n   return NULL_TREE;\n@@ -7573,8 +7573,7 @@ fold_builtin_isascii (tree arglist)\n \n       arg = build2 (BIT_AND_EXPR, integer_type_node, arg,\n \t\t    build_int_cst (NULL_TREE,\n-\t\t\t\t   ~ (unsigned HOST_WIDE_INT) 0x7f,\n-\t\t\t\t   ~ (HOST_WIDE_INT) 0));\n+\t\t\t\t   ~ (unsigned HOST_WIDE_INT) 0x7f));\n       arg = fold (build2 (EQ_EXPR, integer_type_node,\n \t\t\t  arg, integer_zero_node));\n \n@@ -7598,7 +7597,7 @@ fold_builtin_toascii (tree arglist)\n       tree arg = TREE_VALUE (arglist);\n \n       return fold (build2 (BIT_AND_EXPR, integer_type_node, arg,\n-\t\t\t   build_int_cst (NULL_TREE, 0x7f, 0)));\n+\t\t\t   build_int_cst (NULL_TREE, 0x7f)));\n     }\n }\n \n@@ -7616,9 +7615,9 @@ fold_builtin_isdigit (tree arglist)\n       tree arg = TREE_VALUE (arglist);\n       arg = fold_convert (unsigned_type_node, arg);\n       arg = build2 (MINUS_EXPR, unsigned_type_node, arg,\n-\t\t    build_int_cst (unsigned_type_node, TARGET_DIGIT0, 0));\n+\t\t    build_int_cst (unsigned_type_node, TARGET_DIGIT0));\n       arg = build2 (LE_EXPR, integer_type_node, arg,\n-\t\t    build_int_cst (unsigned_type_node, 9, 0));\n+\t\t    build_int_cst (unsigned_type_node, 9));\n       arg = fold (arg);\n       if (in_gimple_form && !TREE_CONSTANT (arg))\n         return NULL_TREE;\n@@ -8696,7 +8695,7 @@ simplify_builtin_strstr (tree arglist)\n       /* New argument list transforming strstr(s1, s2) to\n \t strchr(s1, s2[0]).  */\n       arglist = build_tree_list (NULL_TREE,\n-\t\t\t\t build_int_cst (NULL_TREE, p2[0], 0));\n+\t\t\t\t build_int_cst (NULL_TREE, p2[0]));\n       arglist = tree_cons (NULL_TREE, s1, arglist);\n       return build_function_call_expr (fn, arglist);\n     }\n@@ -8882,7 +8881,7 @@ simplify_builtin_strpbrk (tree arglist)\n       /* New argument list transforming strpbrk(s1, s2) to\n \t strchr(s1, s2[0]).  */\n       arglist = build_tree_list (NULL_TREE,\n-\t\t\t\t build_int_cst (NULL_TREE, p2[0], 0));\n+\t\t\t\t build_int_cst (NULL_TREE, p2[0]));\n       arglist = tree_cons (NULL_TREE, s1, arglist);\n       return build_function_call_expr (fn, arglist);\n     }\n@@ -9133,7 +9132,7 @@ fold_builtin_fputs (tree arglist, bool ignore, bool unlocked, tree len)\n \t    arglist = build_tree_list (NULL_TREE,\n \t\t\t\t       TREE_VALUE (TREE_CHAIN (arglist)));\n \t    arglist = tree_cons (NULL_TREE,\n-\t\t\t\t build_int_cst (NULL_TREE, p[0], 0),\n+\t\t\t\t build_int_cst (NULL_TREE, p[0]),\n \t\t\t\t arglist);\n \t    fn = fn_fputc;\n \t    break;\n@@ -9258,7 +9257,7 @@ simplify_builtin_sprintf (tree arglist, int ignored)\n       arglist = tree_cons (NULL_TREE, dest, arglist);\n       call = build_function_call_expr (fn, arglist);\n       if (!ignored)\n-\tretval = build_int_cst (NULL_TREE, strlen (fmt_str), 0);\n+\tretval = build_int_cst (NULL_TREE, strlen (fmt_str));\n     }\n \n   /* If the format is \"%s\", use strcpy if the result isn't used.  */"}, {"sha": "62d2231587f2bee8a90cc0807738b65864a89af1", "filename": "gcc/c-common.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -660,7 +660,7 @@ start_fname_decls (void)\n \n       if (decl)\n \t{\n-\t  saved = tree_cons (decl, build_int_cst (NULL_TREE, ix, 0), saved);\n+\t  saved = tree_cons (decl, build_int_cst (NULL_TREE, ix), saved);\n \t  *fname_vars[ix].decl = NULL_TREE;\n \t}\n     }\n@@ -851,7 +851,7 @@ fix_string_type (tree value)\n      For C++, this is the standard behavior.  */\n   if (flag_const_strings)\n     e_type = build_type_variant (e_type, 1, 0);\n-  i_type = build_index_type (build_int_cst (NULL_TREE, nchars - 1, 0));\n+  i_type = build_index_type (build_int_cst (NULL_TREE, nchars - 1));\n   TREE_TYPE (value) = build_array_type (e_type, i_type);\n \n   TREE_CONSTANT (value) = 1;\n@@ -1992,9 +1992,9 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n \t{\n \t  /* Convert primop1 to target type, but do not introduce\n \t     additional overflow.  We know primop1 is an int_cst.  */\n-\t  tree tmp = build_int_cst (*restype_ptr,\n-\t\t\t\t    TREE_INT_CST_LOW (primop1),\n-\t\t\t\t    TREE_INT_CST_HIGH (primop1));\n+\t  tree tmp = build_int_cst_wide (*restype_ptr,\n+\t\t\t\t\t TREE_INT_CST_LOW (primop1),\n+\t\t\t\t\t TREE_INT_CST_HIGH (primop1));\n \n \t  primop1 = force_fit_type (tmp, 0, TREE_OVERFLOW (primop1),\n \t\t\t\t    TREE_CONSTANT_OVERFLOW (primop1));\n@@ -3897,8 +3897,7 @@ c_init_attributes (void)\n #define DEF_ATTR_NULL_TREE(ENUM)\t\t\t\t\\\n   built_in_attributes[(int) ENUM] = NULL_TREE;\n #define DEF_ATTR_INT(ENUM, VALUE)\t\t\t\t\\\n-  built_in_attributes[(int) ENUM] = build_int_cst\t\t\\\n-\t(NULL_TREE, VALUE, VALUE < 0 ? -1 : 0);\n+  built_in_attributes[(int) ENUM] = build_int_cst (NULL_TREE, VALUE);\n #define DEF_ATTR_IDENT(ENUM, STRING)\t\t\t\t\\\n   built_in_attributes[(int) ENUM] = get_identifier (STRING);\n #define DEF_ATTR_TREE_LIST(ENUM, PURPOSE, VALUE, CHAIN)\t\\"}, {"sha": "e9a9036e5ee3a34a2634c5da20dee7f064780b31", "filename": "gcc/c-decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -3272,12 +3272,12 @@ complete_array_type (tree type, tree initial_value, int do_default)\n \t    = int_size_in_bytes (TREE_TYPE (TREE_TYPE (initial_value)));\n \t  maxindex = build_int_cst (NULL_TREE,\n \t\t\t\t    (TREE_STRING_LENGTH (initial_value)\n-\t\t\t\t     / eltsize) - 1, 0);\n+\t\t\t\t     / eltsize) - 1);\n \t}\n       else if (TREE_CODE (initial_value) == CONSTRUCTOR)\n \t{\n \t  tree elts = CONSTRUCTOR_ELTS (initial_value);\n-\t  maxindex = build_int_cst (NULL_TREE, -1, -1);\n+\t  maxindex = build_int_cst (NULL_TREE, -1);\n \t  for (; elts; elts = TREE_CHAIN (elts))\n \t    {\n \t      if (TREE_PURPOSE (elts))\n@@ -3294,14 +3294,14 @@ complete_array_type (tree type, tree initial_value, int do_default)\n \t    value = 1;\n \n \t  /* Prevent further error messages.  */\n-\t  maxindex = build_int_cst (NULL_TREE, 0, 0);\n+\t  maxindex = build_int_cst (NULL_TREE, 0);\n \t}\n     }\n \n   if (!maxindex)\n     {\n       if (do_default)\n-\tmaxindex = build_int_cst (NULL_TREE, 0, 0);\n+\tmaxindex = build_int_cst (NULL_TREE, 0);\n       value = 2;\n     }\n \n@@ -3412,7 +3412,7 @@ check_bitfield_type_and_width (tree *type, tree *width, const char *orig_name)\n     {\n       error (\"width of `%s' exceeds its type\", name);\n       w = max_width;\n-      *width = build_int_cst (NULL_TREE, w, 0);\n+      *width = build_int_cst (NULL_TREE, w);\n     }\n   else\n     w = tree_low_cst (*width, 1);"}, {"sha": "720519f52d5f1af4b589edd647acab66d7638097", "filename": "gcc/c-lex.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -588,11 +588,11 @@ interpret_integer (const cpp_token *token, unsigned int flags)\n     pedwarn (\"integer constant is too large for \\\"%s\\\" type\",\n \t     (flags & CPP_N_UNSIGNED) ? \"unsigned long\" : \"long\");\n \n-  value = build_int_cst (type, integer.low, integer.high);\n+  value = build_int_cst_wide (type, integer.low, integer.high);\n \n   /* Convert imaginary to a complex type.  */\n   if (flags & CPP_N_IMAGINARY)\n-    value = build_complex (NULL_TREE, build_int_cst (type, 0, 0), value);\n+    value = build_complex (NULL_TREE, build_int_cst (type, 0), value);\n \n   return value;\n }\n@@ -805,9 +805,9 @@ lex_charconst (const cpp_token *token)\n   /* Cast to cppchar_signed_t to get correct sign-extension of RESULT\n      before possibly widening to HOST_WIDE_INT for build_int_cst.  */\n   if (unsignedp || (cppchar_signed_t) result >= 0)\n-    value = build_int_cst (type, result, 0);\n+    value = build_int_cst_wide (type, result, 0);\n   else\n-    value = build_int_cst (type, (cppchar_signed_t) result, -1);\n+    value = build_int_cst_wide (type, (cppchar_signed_t) result, -1);\n \n   return value;\n }"}, {"sha": "16cbd228908cd7e3b928e060ee0a5d674f22b021", "filename": "gcc/c-parse.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -704,8 +704,8 @@ primary:\n \t\t  e2 = TYPE_MAIN_VARIANT (groktypename ($5));\n \n \t\t  $$.value = comptypes (e1, e2)\n-\t\t    ? build_int_cst (NULL_TREE, 1, 0)\n-\t\t    : build_int_cst (NULL_TREE, 0, 0);\n+\t\t    ? build_int_cst (NULL_TREE, 1)\n+\t\t    : build_int_cst (NULL_TREE, 0);\n \t\t  $$.original_code = ERROR_MARK;\n \t\t}\n \t| TYPES_COMPATIBLE_P '(' error ')'"}, {"sha": "43bc1deaec58b4a02bbef6a8a9967be95f29bf7b", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -786,9 +786,10 @@ pp_c_integer_constant (c_pretty_printer *pp, tree i)\n       if (tree_int_cst_sgn (i) < 0)\n         {\n           pp_c_char (pp, '-');\n-          i = build_int_cst (NULL_TREE,\n-\t\t\t     -TREE_INT_CST_LOW (i),\n-\t\t\t     ~TREE_INT_CST_HIGH (i) + !TREE_INT_CST_LOW (i));\n+          i = build_int_cst_wide (NULL_TREE,\n+\t\t\t\t  -TREE_INT_CST_LOW (i),\n+\t\t\t\t  ~TREE_INT_CST_HIGH (i)\n+\t\t\t\t  + !TREE_INT_CST_LOW (i));\n         }\n       sprintf (pp_buffer (pp)->digit_buffer,\n                HOST_WIDE_INT_PRINT_DOUBLE_HEX,"}, {"sha": "d71b99080acc39e49fbfc8f73ecb2f564dca6659", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -4484,14 +4484,14 @@ really_start_incremental_init (tree type)\n \t  /* Detect non-empty initializations of zero-length arrays.  */\n \t  if (constructor_max_index == NULL_TREE\n \t      && TYPE_SIZE (constructor_type))\n-\t    constructor_max_index = build_int_cst (NULL_TREE, -1, -1);\n+\t    constructor_max_index = build_int_cst (NULL_TREE, -1);\n \n \t  /* constructor_max_index needs to be an INTEGER_CST.  Attempts\n \t     to initialize VLAs will cause a proper error; avoid tree\n \t     checking errors as well by setting a safe value.  */\n \t  if (constructor_max_index\n \t      && TREE_CODE (constructor_max_index) != INTEGER_CST)\n-\t    constructor_max_index = build_int_cst (NULL_TREE, -1, -1);\n+\t    constructor_max_index = build_int_cst (NULL_TREE, -1);\n \n \t  constructor_index\n \t    = convert (bitsizetype,\n@@ -4506,8 +4506,7 @@ really_start_incremental_init (tree type)\n     {\n       /* Vectors are like simple fixed-size arrays.  */\n       constructor_max_index =\n-\tbuild_int_cst (NULL_TREE,\n-\t\t       TYPE_VECTOR_SUBPARTS (constructor_type) - 1, 0);\n+\tbuild_int_cst (NULL_TREE, TYPE_VECTOR_SUBPARTS (constructor_type) - 1);\n       constructor_index = convert (bitsizetype, bitsize_zero_node);\n       constructor_unfilled_index = constructor_index;\n     }\n@@ -4662,8 +4661,7 @@ push_init_level (int implicit)\n     {\n       /* Vectors are like simple fixed-size arrays.  */\n       constructor_max_index =\n-\tbuild_int_cst (NULL_TREE,\n-\t\t       TYPE_VECTOR_SUBPARTS (constructor_type) - 1, 0);\n+\tbuild_int_cst (NULL_TREE, TYPE_VECTOR_SUBPARTS (constructor_type) - 1);\n       constructor_index = convert (bitsizetype, integer_zero_node);\n       constructor_unfilled_index = constructor_index;\n     }\n@@ -4677,14 +4675,14 @@ push_init_level (int implicit)\n \t  /* Detect non-empty initializations of zero-length arrays.  */\n \t  if (constructor_max_index == NULL_TREE\n \t      && TYPE_SIZE (constructor_type))\n-\t    constructor_max_index = build_int_cst (NULL_TREE, -1, -1);\n+\t    constructor_max_index = build_int_cst (NULL_TREE, -1);\n \n \t  /* constructor_max_index needs to be an INTEGER_CST.  Attempts\n \t     to initialize VLAs will cause a proper error; avoid tree\n \t     checking errors as well by setting a safe value.  */\n \t  if (constructor_max_index\n \t      && TREE_CODE (constructor_max_index) != INTEGER_CST)\n-\t    constructor_max_index = build_int_cst (NULL_TREE, -1, -1);\n+\t    constructor_max_index = build_int_cst (NULL_TREE, -1);\n \n \t  constructor_index\n \t    = convert (bitsizetype,\n@@ -5408,7 +5406,7 @@ set_nonincremental_init_from_string (tree str)\n \t\t      << (bitpos - HOST_BITS_PER_WIDE_INT);\n \t}\n \n-      value = build_int_cst (type, val[1], val[0]);\n+      value = build_int_cst_wide (type, val[1], val[0]);\n       add_pending_init (purpose, value);\n     }\n "}, {"sha": "2e500bd004484caea98945e65d3b22ced2aafaf4", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -1505,8 +1505,7 @@ load_register_parameters (struct arg_data *args, int num_actuals,\n \t\t     seem worth generating rtl to say that.  */\n \t\t  reg = gen_rtx_REG (word_mode, REGNO (reg));\n \t\t  x = expand_shift (LSHIFT_EXPR, word_mode, reg,\n-\t\t\t\t    build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t   shift, 0),\n+\t\t\t\t    build_int_cst (NULL_TREE, shift),\n \t\t\t\t    reg, 1);\n \t\t  if (x != reg)\n \t\t    emit_move_insn (reg, x);\n@@ -1544,7 +1543,7 @@ load_register_parameters (struct arg_data *args, int num_actuals,\n \n \t\t  emit_move_insn (x, tem);\n \t\t  x = expand_shift (dir, word_mode, x,\n-\t\t\t\t    build_int_cst (NULL_TREE, shift, 0),\n+\t\t\t\t    build_int_cst (NULL_TREE, shift),\n \t\t\t\t    ri, 1);\n \t\t  if (x != ri)\n \t\t    emit_move_insn (ri, x);"}, {"sha": "c623e009fb102cde4c3991326cdee8280ba519a1", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -4925,7 +4925,7 @@ alpha_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt,\n       temp = expand_binop (DImode, sub_optab, fnaddr, temp, temp, 1,\n \t\t\t   OPTAB_WIDEN);\n       temp = expand_shift (RSHIFT_EXPR, Pmode, temp,\n-\t\t           build_int_cst (NULL_TREE, 2, 0), NULL_RTX, 1);\n+\t\t           build_int_cst (NULL_TREE, 2), NULL_RTX, 1);\n       temp = expand_and (SImode, gen_lowpart (SImode, temp),\n \t\t\t GEN_INT (0x3fff), 0);\n \n@@ -5379,12 +5379,12 @@ alpha_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n \n       t = make_tree (ptr_type_node, virtual_incoming_args_rtx);\n       t = build (PLUS_EXPR, ptr_type_node, t,\n-\t\t build_int_cst (NULL_TREE, offset, 0));\n+\t\t build_int_cst (NULL_TREE, offset));\n       t = build (MODIFY_EXPR, TREE_TYPE (base_field), base_field, t);\n       TREE_SIDE_EFFECTS (t) = 1;\n       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n-      t = build_int_cst (NULL_TREE, NUM_ARGS * UNITS_PER_WORD, 0);\n+      t = build_int_cst (NULL_TREE, NUM_ARGS * UNITS_PER_WORD);\n       t = build (MODIFY_EXPR, TREE_TYPE (offset_field), offset_field, t);\n       TREE_SIDE_EFFECTS (t) = 1;\n       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -5400,7 +5400,7 @@ alpha_gimplify_va_arg_1 (tree type, tree base, tree offset, tree *pre_p)\n      reserved for the registers.  */\n   if (targetm.calls.must_pass_in_stack (TYPE_MODE (type), type))\n     {\n-      t = build_int_cst (TREE_TYPE (offset), 6*8, 0);\n+      t = build_int_cst (TREE_TYPE (offset), 6*8);\n       t = build (MODIFY_EXPR, TREE_TYPE (offset), offset,\n \t\t build (MAX_EXPR, TREE_TYPE (offset), offset, t));\n       gimplify_and_add (t, pre_p);\n@@ -5429,7 +5429,7 @@ alpha_gimplify_va_arg_1 (tree type, tree base, tree offset, tree *pre_p)\n     {\n       tree fpaddend, cond, fourtyeight;\n \n-      fourtyeight = build_int_cst (TREE_TYPE (addend), 6*8, 0);\n+      fourtyeight = build_int_cst (TREE_TYPE (addend), 6*8);\n       fpaddend = fold (build (MINUS_EXPR, TREE_TYPE (addend),\n \t\t\t      addend, fourtyeight));\n       cond = fold (build (LT_EXPR, boolean_type_node, addend, fourtyeight));"}, {"sha": "9d9acb2d39f07279a7cc0014e5ca65f912321f06", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -14181,7 +14181,7 @@ arm_get_cookie_size (tree type)\n   if (!TARGET_AAPCS_BASED)\n     return default_cxx_get_cookie_size (type);\n \n-  size = build_int_cst (sizetype, 8, 0);\n+  size = build_int_cst (sizetype, 8);\n   return size;\n }\n "}, {"sha": "5437568f07d413410f4366fc19716342f87ca514", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -738,7 +738,7 @@ c4x_gimplify_va_arg_expr (tree valist, tree type,\n     type = build_pointer_type (type);\n \n   t = build (PREDECREMENT_EXPR, TREE_TYPE (valist), valist,\n-\t     build_int_cst (NULL_TREE, int_size_in_bytes (type), 0));\n+\t     build_int_cst (NULL_TREE, int_size_in_bytes (type)));\n   t = fold_convert (build_pointer_type (type), t);\n   t = build_fold_indirect_ref (t);\n "}, {"sha": "3e2eef70476849a24b2822a350d8b14e74a95649", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -3236,20 +3236,20 @@ ix86_va_start (tree valist, rtx nextarg)\n \t     (int) words, (int) n_gpr, (int) n_fpr);\n \n   t = build (MODIFY_EXPR, TREE_TYPE (gpr), gpr,\n-\t     build_int_cst (NULL_TREE, n_gpr * 8, 0));\n+\t     build_int_cst (NULL_TREE, n_gpr * 8));\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n   t = build (MODIFY_EXPR, TREE_TYPE (fpr), fpr,\n-\t     build_int_cst (NULL_TREE, n_fpr * 16 + 8*REGPARM_MAX, 0));\n+\t     build_int_cst (NULL_TREE, n_fpr * 16 + 8*REGPARM_MAX));\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n   /* Find the overflow area.  */\n   t = make_tree (TREE_TYPE (ovf), virtual_incoming_args_rtx);\n   if (words != 0)\n     t = build (PLUS_EXPR, TREE_TYPE (ovf), t,\n-\t       build_int_cst (NULL_TREE, words * UNITS_PER_WORD, 0));\n+\t       build_int_cst (NULL_TREE, words * UNITS_PER_WORD));\n   t = build (MODIFY_EXPR, TREE_TYPE (ovf), ovf, t);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -3369,7 +3369,7 @@ ix86_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n       if (needed_intregs)\n \t{\n \t  t = build_int_cst (TREE_TYPE (gpr),\n-\t\t\t     (REGPARM_MAX - needed_intregs + 1) * 8, 0);\n+\t\t\t     (REGPARM_MAX - needed_intregs + 1) * 8);\n \t  t = build2 (GE_EXPR, boolean_type_node, gpr, t);\n \t  t2 = build1 (GOTO_EXPR, void_type_node, lab_false);\n \t  t = build (COND_EXPR, void_type_node, t, t2, NULL_TREE);\n@@ -3379,7 +3379,7 @@ ix86_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n \t{\n \t  t = build_int_cst (TREE_TYPE (fpr),\n \t\t\t     (SSE_REGPARM_MAX - needed_sseregs + 1) * 16\n-\t\t\t     + REGPARM_MAX * 8, 0);\n+\t\t\t     + REGPARM_MAX * 8);\n \t  t = build2 (GE_EXPR, boolean_type_node, fpr, t);\n \t  t2 = build1 (GOTO_EXPR, void_type_node, lab_false);\n \t  t = build (COND_EXPR, void_type_node, t, t2, NULL_TREE);\n@@ -3450,14 +3450,14 @@ ix86_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n       if (needed_intregs)\n \t{\n \t  t = build2 (PLUS_EXPR, TREE_TYPE (gpr), gpr,\n-\t\t      build_int_cst (NULL_TREE, needed_intregs * 8, 0));\n+\t\t      build_int_cst (NULL_TREE, needed_intregs * 8));\n \t  t = build2 (MODIFY_EXPR, TREE_TYPE (gpr), gpr, t);\n \t  gimplify_and_add (t, pre_p);\n \t}\n       if (needed_sseregs)\n \t{\n \t  t = build2 (PLUS_EXPR, TREE_TYPE (fpr), fpr,\n-\t\t      build_int_cst (NULL_TREE, needed_sseregs * 16, 0));\n+\t\t      build_int_cst (NULL_TREE, needed_sseregs * 16));\n \t  t = build2 (MODIFY_EXPR, TREE_TYPE (fpr), fpr, t);\n \t  gimplify_and_add (t, pre_p);\n \t}\n@@ -3478,17 +3478,17 @@ ix86_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n     {\n       HOST_WIDE_INT align = FUNCTION_ARG_BOUNDARY (VOIDmode, type) / 8;\n       t = build (PLUS_EXPR, TREE_TYPE (ovf), ovf,\n-\t\t build_int_cst (NULL_TREE, align - 1, 0));\n+\t\t build_int_cst (NULL_TREE, align - 1));\n       t = build (BIT_AND_EXPR, TREE_TYPE (t), t,\n-\t\t build_int_cst (NULL_TREE, -align, -1));\n+\t\t build_int_cst (NULL_TREE, -align));\n     }\n   gimplify_expr (&t, pre_p, NULL, is_gimple_val, fb_rvalue);\n \n   t2 = build2 (MODIFY_EXPR, void_type_node, addr, t);\n   gimplify_and_add (t2, pre_p);\n \n   t = build2 (PLUS_EXPR, TREE_TYPE (t), t,\n-\t      build_int_cst (NULL_TREE, rsize * UNITS_PER_WORD, 0));\n+\t      build_int_cst (NULL_TREE, rsize * UNITS_PER_WORD));\n   t = build2 (MODIFY_EXPR, TREE_TYPE (ovf), ovf, t);\n   gimplify_and_add (t, pre_p);\n "}, {"sha": "1b9ac8ee963d9b263fcc7c48e509bd8c74fd0495", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -3400,9 +3400,9 @@ ia64_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n       ? int_size_in_bytes (type) > 8 : TYPE_ALIGN (type) > 8 * BITS_PER_UNIT)\n     {\n       tree t = build (PLUS_EXPR, TREE_TYPE (valist), valist,\n-\t\t      build_int_cst (NULL_TREE, 2 * UNITS_PER_WORD - 1, 0));\n+\t\t      build_int_cst (NULL_TREE, 2 * UNITS_PER_WORD - 1));\n       t = build (BIT_AND_EXPR, TREE_TYPE (t), t,\n-\t\t build_int_cst (NULL_TREE, -2 * UNITS_PER_WORD, -1));\n+\t\t build_int_cst (NULL_TREE, -2 * UNITS_PER_WORD));\n       t = build (MODIFY_EXPR, TREE_TYPE (valist), valist, t);\n       gimplify_and_add (t, pre_p);\n     }"}, {"sha": "07aa4e8428187f549272e66e524741bfafefa93d", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -3385,7 +3385,7 @@ mips_build_builtin_va_list (void)\n \t\t\t  unsigned_char_type_node);\n       /* Explicitly pad to the size of a pointer, so that -Wpadded won't\n \t warn on every user file.  */\n-      index = build_int_cst (NULL_TREE, GET_MODE_SIZE (ptr_mode) - 2 - 1, 0);\n+      index = build_int_cst (NULL_TREE, GET_MODE_SIZE (ptr_mode) - 2 - 1);\n       array = build_array_type (unsigned_char_type_node,\n \t\t\t        build_index_type (index));\n       f_res = build_decl (FIELD_DECL, get_identifier (\"__reserved\"), array);\n@@ -3470,7 +3470,7 @@ mips_va_start (tree valist, rtx nextarg)\n \t  if (cum->stack_words > 0)\n \t    t = build (PLUS_EXPR, TREE_TYPE (ovfl), t,\n \t\t       build_int_cst (NULL_TREE,\n-\t\t\t\t      cum->stack_words * UNITS_PER_WORD, 0));\n+\t\t\t\t      cum->stack_words * UNITS_PER_WORD));\n \t  t = build (MODIFY_EXPR, TREE_TYPE (ovfl), ovfl, t);\n  \t  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n@@ -3487,22 +3487,22 @@ mips_va_start (tree valist, rtx nextarg)\n \t  fpr_offset &= ~(UNITS_PER_FPVALUE - 1);\n \t  if (fpr_offset)\n \t    t = build (PLUS_EXPR, TREE_TYPE (ftop), t,\n-\t\t       build_int_cst (NULL_TREE, -fpr_offset, -1));\n+\t\t       build_int_cst (NULL_TREE, -fpr_offset));\n \t  t = build (MODIFY_EXPR, TREE_TYPE (ftop), ftop, t);\n \t  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n \t  /* Emit code to initialize GOFF, the offset from GTOP of the\n \t     next GPR argument.  */\n \t  t = build (MODIFY_EXPR, TREE_TYPE (goff), goff,\n-\t\t     build_int_cst (NULL_TREE, gpr_save_area_size, 0));\n+\t\t     build_int_cst (NULL_TREE, gpr_save_area_size));\n \t  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n \t  /* Likewise emit code to initialize FOFF, the offset from FTOP\n \t     of the next FPR argument.  */\n \t  fpr_save_area_size\n \t    = (MAX_ARGS_IN_REGISTERS - cum->num_fprs) * UNITS_PER_FPREG;\n \t  t = build (MODIFY_EXPR, TREE_TYPE (foff), foff,\n-\t\t     build_int_cst (NULL_TREE, fpr_save_area_size, 0));\n+\t\t     build_int_cst (NULL_TREE, fpr_save_area_size));\n \t  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \t}\n       else\n@@ -3626,7 +3626,7 @@ mips_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n \t    {\n \t      /* [1] Emit code for: off &= -rsize.\t*/\n \t      t = build (BIT_AND_EXPR, TREE_TYPE (off), off,\n-\t\t\t build_int_cst (NULL_TREE, -rsize, -1));\n+\t\t\t build_int_cst (NULL_TREE, -rsize));\n \t      t = build (MODIFY_EXPR, TREE_TYPE (off), off, t);\n \t      gimplify_and_add (t, pre_p);\n \t    }\n@@ -3640,7 +3640,7 @@ mips_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n       /* [5] Emit code for: off -= rsize.  We do this as a form of\n \t post-increment not available to C.  Also widen for the\n \t coming pointer arithmetic.  */\n-      t = fold_convert (TREE_TYPE (off), build_int_cst (NULL_TREE, rsize, 0));\n+      t = fold_convert (TREE_TYPE (off), build_int_cst (NULL_TREE, rsize));\n       t = build (POSTDECREMENT_EXPR, TREE_TYPE (off), off, t);\n       t = fold_convert (sizetype, t);\n       t = fold_convert (TREE_TYPE (top), t);\n@@ -3651,7 +3651,7 @@ mips_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n       if (BYTES_BIG_ENDIAN && rsize > size)\n \t{\n \t  u = fold_convert (TREE_TYPE (t), build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t\t  rsize - size, 0));\n+\t\t\t\t\t\t\t  rsize - size));\n \t  t = build (PLUS_EXPR, TREE_TYPE (t), t, u);\n \t}\n       COND_EXPR_THEN (addr) = t;\n@@ -3660,10 +3660,10 @@ mips_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n \t{\n \t  /* [9] Emit: ovfl += ((intptr_t) ovfl + osize - 1) & -osize.  */\n \t  u = fold_convert (TREE_TYPE (ovfl),\n-\t\t\t    build_int_cst (NULL_TREE, osize - 1, 0));\n+\t\t\t    build_int_cst (NULL_TREE, osize - 1));\n \t  t = build (PLUS_EXPR, TREE_TYPE (ovfl), ovfl, u);\n \t  u = fold_convert (TREE_TYPE (ovfl),\n-\t\t\t    build_int_cst (NULL_TREE, -osize, -1));\n+\t\t\t    build_int_cst (NULL_TREE, -osize));\n \t  t = build (BIT_AND_EXPR, TREE_TYPE (ovfl), t, u);\n \t  align = build (MODIFY_EXPR, TREE_TYPE (ovfl), ovfl, t);\n \t}\n@@ -3674,12 +3674,12 @@ mips_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n \t post-increment ovfl by osize.  On big-endian machines,\n \t the argument has OSIZE - SIZE bytes of leading padding.  */\n       u = fold_convert (TREE_TYPE (ovfl),\n-\t\t\tbuild_int_cst (NULL_TREE, osize, 0));\n+\t\t\tbuild_int_cst (NULL_TREE, osize));\n       t = build (POSTINCREMENT_EXPR, TREE_TYPE (ovfl), ovfl, u);\n       if (BYTES_BIG_ENDIAN && osize > size)\n \t{\n \t  u = fold_convert (TREE_TYPE (t),\n-\t\t\t    build_int_cst (NULL_TREE, osize - size, 0));\n+\t\t\t    build_int_cst (NULL_TREE, osize - size));\n \t  t = build (PLUS_EXPR, TREE_TYPE (t), t, u);\n \t}\n "}, {"sha": "0bc755a158a8e6e0091f6002db7b20c236cd01b2", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -6117,7 +6117,7 @@ hppa_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n \n       /* Copied from va-pa.h, but we probably don't need to align to\n \t word size, since we generate and preserve that invariant.  */\n-      u = build_int_cst (valist_type, (size > 4 ? -8 : -4), -1);\n+      u = build_int_cst (valist_type, (size > 4 ? -8 : -4));\n       t = build (BIT_AND_EXPR, valist_type, t, u);\n \n       t = build (MODIFY_EXPR, valist_type, valist, t);"}, {"sha": "fd95f0ba1670cb21fc3fe253e66ccb6c761fd868", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -5451,28 +5451,28 @@ rs6000_va_start (tree valist, rtx nextarg)\n \t     words, n_gpr, n_fpr);\n \n   t = build (MODIFY_EXPR, TREE_TYPE (gpr), gpr,\n-\t     build_int_cst (NULL_TREE, n_gpr, 0));\n+\t     build_int_cst (NULL_TREE, n_gpr));\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n   t = build (MODIFY_EXPR, TREE_TYPE (fpr), fpr,\n-\t     build_int_cst (NULL_TREE, n_fpr, 0));\n+\t     build_int_cst (NULL_TREE, n_fpr));\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n   /* Find the overflow area.  */\n   t = make_tree (TREE_TYPE (ovf), virtual_incoming_args_rtx);\n   if (words != 0)\n     t = build (PLUS_EXPR, TREE_TYPE (ovf), t,\n-\t       build_int_cst (NULL_TREE, words * UNITS_PER_WORD, 0));\n+\t       build_int_cst (NULL_TREE, words * UNITS_PER_WORD));\n   t = build (MODIFY_EXPR, TREE_TYPE (ovf), ovf, t);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n   /* Find the register save area.  */\n   t = make_tree (TREE_TYPE (sav), virtual_stack_vars_rtx);\n   t = build (PLUS_EXPR, TREE_TYPE (sav), t,\n-\t     build_int_cst (NULL_TREE, -RS6000_VARARGS_SIZE, -1));\n+\t     build_int_cst (NULL_TREE, -RS6000_VARARGS_SIZE));\n   t = build (MODIFY_EXPR, TREE_TYPE (sav), sav, t);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -5630,7 +5630,7 @@ rs6000_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n     {\n       t = build2 (PLUS_EXPR, TREE_TYPE (t), t, size_int (align - 1));\n       t = build2 (BIT_AND_EXPR, TREE_TYPE (t), t,\n-\t\t  build_int_cst (NULL_TREE, -align, -1));\n+\t\t  build_int_cst (NULL_TREE, -align));\n     }\n   gimplify_expr (&t, pre_p, NULL, is_gimple_val, fb_rvalue);\n \n@@ -16430,7 +16430,7 @@ static void\n add_compiler_branch_island (tree label_name, tree function_name, int line_number)\n {\n   tree branch_island = build_tree_list (function_name, label_name);\n-  TREE_TYPE (branch_island) = build_int_cst (NULL_TREE, line_number, 0);\n+  TREE_TYPE (branch_island) = build_int_cst (NULL_TREE, line_number);\n   TREE_CHAIN (branch_island) = branch_island_list;\n   branch_island_list = branch_island;\n }"}, {"sha": "f014282f0853c360fa2fe6cff2fe2a77e178d401", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -7050,12 +7050,12 @@ s390_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n   n_fpr = current_function_args_info.fprs;\n \n   t = build (MODIFY_EXPR, TREE_TYPE (gpr), gpr,\n-\t     build_int_cst (NULL_TREE, n_gpr, 0));\n+\t     build_int_cst (NULL_TREE, n_gpr));\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n   t = build (MODIFY_EXPR, TREE_TYPE (fpr), fpr,\n-\t     build_int_cst (NULL_TREE, n_fpr, 0));\n+\t     build_int_cst (NULL_TREE, n_fpr));\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n@@ -7068,7 +7068,7 @@ s390_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n     fprintf (stderr, \"va_start: n_gpr = %d, n_fpr = %d off %d\\n\",\n \t     (int)n_gpr, (int)n_fpr, off);\n \n-  t = build (PLUS_EXPR, TREE_TYPE (ovf), t, build_int_cst (NULL_TREE, off, 0));\n+  t = build (PLUS_EXPR, TREE_TYPE (ovf), t, build_int_cst (NULL_TREE, off));\n \n   t = build (MODIFY_EXPR, TREE_TYPE (ovf), ovf, t);\n   TREE_SIDE_EFFECTS (t) = 1;\n@@ -7080,10 +7080,10 @@ s390_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n     t = build (PLUS_EXPR, TREE_TYPE (sav), t,\n \t       build_int_cst (NULL_TREE,\n \t\t\t      -(RETURN_REGNUM - 2) * UNITS_PER_WORD\n-\t\t\t      - (TARGET_64BIT ? 4 : 2) * 8, -1));\n+\t\t\t      - (TARGET_64BIT ? 4 : 2) * 8));\n   else\n     t = build (PLUS_EXPR, TREE_TYPE (sav), t,\n-\t       build_int_cst (NULL_TREE, -RETURN_REGNUM * UNITS_PER_WORD, -1));\n+\t       build_int_cst (NULL_TREE, -RETURN_REGNUM * UNITS_PER_WORD));\n \n   t = build (MODIFY_EXPR, TREE_TYPE (sav), sav, t);\n   TREE_SIDE_EFFECTS (t) = 1;"}, {"sha": "31104e5fbe3b91b8eedfdca16389523af0ed9238", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -6342,7 +6342,7 @@ sh_va_start (tree valist, rtx nextarg)\n   else\n     nfp = 0;\n   u = fold (build (PLUS_EXPR, ptr_type_node, u,\n-\t\t   build_int_cst (NULL_TREE, UNITS_PER_WORD * nfp, 0)));\n+\t\t   build_int_cst (NULL_TREE, UNITS_PER_WORD * nfp)));\n   t = build (MODIFY_EXPR, ptr_type_node, next_fp_limit, u);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -6357,7 +6357,7 @@ sh_va_start (tree valist, rtx nextarg)\n   else\n     nint = 0;\n   u = fold (build (PLUS_EXPR, ptr_type_node, u,\n-\t\t   build_int_cst (NULL_TREE, UNITS_PER_WORD * nint, 0)));\n+\t\t   build_int_cst (NULL_TREE, UNITS_PER_WORD * nint)));\n   t = build (MODIFY_EXPR, ptr_type_node, next_o_limit, u);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);"}, {"sha": "b75703b73484757ac96dedad24243449b265eaef", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -1487,14 +1487,14 @@ xstormy16_expand_builtin_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n \n   t = make_tree (TREE_TYPE (base), virtual_incoming_args_rtx);\n   t = build (PLUS_EXPR, TREE_TYPE (base), t, \n-\t     build_int_cst (NULL_TREE, INCOMING_FRAME_SP_OFFSET, 0));\n+\t     build_int_cst (NULL_TREE, INCOMING_FRAME_SP_OFFSET));\n   t = build (MODIFY_EXPR, TREE_TYPE (base), base, t);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n   t = build (MODIFY_EXPR, TREE_TYPE (count), count, \n \t     build_int_cst (NULL_TREE,\n-\t\t\t    current_function_args_info * UNITS_PER_WORD, 0));\n+\t\t\t    current_function_args_info * UNITS_PER_WORD));\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n }"}, {"sha": "4d210e00a8d0d92cf961bec91d787eea469cca8b", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -2379,7 +2379,7 @@ xtensa_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n   /* Set the __va_stk member to ($arg_ptr - 32).  */\n   u = make_tree (ptr_type_node, virtual_incoming_args_rtx);\n   u = fold (build (PLUS_EXPR, ptr_type_node, u,\n-\t\t   build_int_cst (NULL_TREE, -32, -1)));\n+\t\t   build_int_cst (NULL_TREE, -32)));\n   t = build (MODIFY_EXPR, ptr_type_node, stk, u);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -2389,7 +2389,7 @@ xtensa_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n      alignment offset for __va_stk.  */\n   if (arg_words >= MAX_ARGS_IN_REGISTERS)\n     arg_words += 2;\n-  u = build_int_cst (NULL_TREE, arg_words * UNITS_PER_WORD, 0);\n+  u = build_int_cst (NULL_TREE, arg_words * UNITS_PER_WORD);\n   t = build (MODIFY_EXPR, integer_type_node, ndx, u);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -2456,9 +2456,9 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n       int align = TYPE_ALIGN (type) / BITS_PER_UNIT;\n \n       t = build (PLUS_EXPR, integer_type_node, orig_ndx,\n-\t\t build_int_cst (NULL_TREE, align - 1, 0));\n+\t\t build_int_cst (NULL_TREE, align - 1));\n       t = build (BIT_AND_EXPR, integer_type_node, t,\n-\t\t build_int_cst (NULL_TREE, -align, -1));\n+\t\t build_int_cst (NULL_TREE, -align));\n       t = build (MODIFY_EXPR, integer_type_node, orig_ndx, t);\n       gimplify_and_add (t, pre_p);\n     }\n@@ -2488,7 +2488,7 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n       lab_false = create_artificial_label ();\n       lab_over = create_artificial_label ();\n \n-      t = build_int_cst (NULL_TREE, MAX_ARGS_IN_REGISTERS * UNITS_PER_WORD, 0);\n+      t = build_int_cst (NULL_TREE, MAX_ARGS_IN_REGISTERS * UNITS_PER_WORD);\n       t = build (GT_EXPR, boolean_type_node, ndx, t);\n       t = build (COND_EXPR, void_type_node, t,\n \t\t build (GOTO_EXPR, void_type_node, lab_false),\n@@ -2518,7 +2518,7 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n \n   lab_false2 = create_artificial_label ();\n \n-  t = build_int_cst (NULL_TREE, MAX_ARGS_IN_REGISTERS * UNITS_PER_WORD, 0);\n+  t = build_int_cst (NULL_TREE, MAX_ARGS_IN_REGISTERS * UNITS_PER_WORD);\n   t = build (GT_EXPR, boolean_type_node, orig_ndx, t);\n   t = build (COND_EXPR, void_type_node, t,\n \t     build (GOTO_EXPR, void_type_node, lab_false2),"}, {"sha": "ceefbf2490670091d53fadcfee3169ec9dfb513a", "filename": "gcc/convert.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -43,7 +43,7 @@ convert_to_pointer (tree type, tree expr)\n {\n   if (integer_zerop (expr))\n     {\n-      expr = build_int_cst (type, 0, 0);\n+      expr = build_int_cst (type, 0);\n       return expr;\n     }\n "}, {"sha": "c8a962fc3da6b6a2a5b59606d853e14d243bae70", "filename": "gcc/coverage.c", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -378,7 +378,7 @@ coverage_counter_alloc (unsigned counter, unsigned num)\n \t will make any clever transformation on it.  */\n       char buf[20];\n       tree domain_tree\n-        = build_index_type (build_int_cst (NULL_TREE, 1000, 0)); /* replaced later */\n+        = build_index_type (build_int_cst (NULL_TREE, 1000)); /* replaced later */\n       tree gcov_type_array_type\n         = build_array_type (GCOV_TYPE_NODE, domain_tree);\n       tree_ctr_tables[counter]\n@@ -435,7 +435,7 @@ tree_coverage_counter_ref (unsigned counter, unsigned no)\n   /* \"no\" here is an array index, scaled to bytes later.  */\n   return build4 (ARRAY_REF, GCOV_TYPE_NODE, tree_ctr_tables[counter],\n \t\t fold_convert (domain_type,\n-\t\t\t       build_int_cst (NULL_TREE, no, 0)),\n+\t\t\t       build_int_cst (NULL_TREE, no)),\n \t\t TYPE_MIN_VALUE (domain_type),\n \t\t size_binop (EXACT_DIV_EXPR, TYPE_SIZE_UNIT (GCOV_TYPE_NODE),\n \t\t\t     size_int (TYPE_ALIGN_UNIT (GCOV_TYPE_NODE))));\n@@ -610,7 +610,7 @@ build_fn_info_type (unsigned int counters)\n   TREE_CHAIN (field) = fields;\n   fields = field;\n \n-  array_type = build_int_cst (NULL_TREE, counters - 1, 0);\n+  array_type = build_int_cst (NULL_TREE, counters - 1);\n   array_type = build_index_type (array_type);\n   array_type = build_array_type (unsigned_type_node, array_type);\n \n@@ -637,21 +637,21 @@ build_fn_info_value (const struct function_list *function, tree type)\n   tree array_value = NULL_TREE;\n \n   /* ident */\n-  value = tree_cons (fields, build_int_cst (unsigned_intSI_type_node,\n-\t\t\t\t\t    function->ident, 0), value);\n+  value = tree_cons (fields, build_int_cstu (unsigned_intSI_type_node,\n+\t\t\t\t\t     function->ident), value);\n   fields = TREE_CHAIN (fields);\n \n   /* checksum */\n-  value = tree_cons (fields, build_int_cst (unsigned_intSI_type_node,\n-\t\t\t\t\t    function->checksum, 0), value);\n+  value = tree_cons (fields, build_int_cstu (unsigned_intSI_type_node,\n+\t\t\t\t\t     function->checksum), value);\n   fields = TREE_CHAIN (fields);\n \n   /* counters */\n   for (ix = 0; ix != GCOV_COUNTERS; ix++)\n     if (prg_ctr_mask & (1 << ix))\n       {\n-\ttree counters = build_int_cst (unsigned_type_node,\n-\t\t\t\t       function->n_ctrs[ix], 0);\n+\ttree counters = build_int_cstu (unsigned_type_node,\n+\t\t\t\t\tfunction->n_ctrs[ix]);\n \n \tarray_value = tree_cons (NULL_TREE, counters, array_value);\n       }\n@@ -712,17 +712,17 @@ build_ctr_info_value (unsigned int counter, tree type)\n \n   /* counters */\n   value = tree_cons (fields,\n-\t\t     build_int_cst (unsigned_intSI_type_node,\n-\t\t\t\t    prg_n_ctrs[counter], 0),\n+\t\t     build_int_cstu (unsigned_intSI_type_node,\n+\t\t\t\t     prg_n_ctrs[counter]),\n \t\t     value);\n   fields = TREE_CHAIN (fields);\n \n   if (prg_n_ctrs[counter])\n     {\n       tree array_type;\n \n-      array_type = build_int_cst (unsigned_type_node,\n-\t\t\t\t  prg_n_ctrs[counter] - 1, 0);\n+      array_type = build_int_cstu (unsigned_type_node,\n+\t\t\t\t   prg_n_ctrs[counter] - 1);\n       array_type = build_index_type (array_type);\n       array_type = build_array_type (TREE_TYPE (TREE_TYPE (fields)),\n \t\t\t\t     array_type);\n@@ -789,8 +789,8 @@ build_gcov_info (void)\n   field = build_decl (FIELD_DECL, NULL_TREE, unsigned_intSI_type_node);\n   TREE_CHAIN (field) = fields;\n   fields = field;\n-  value = tree_cons (field, build_int_cst (unsigned_intSI_type_node,\n-\t\t\t\t\t   GCOV_VERSION, 0), value);\n+  value = tree_cons (field, build_int_cstu (unsigned_intSI_type_node,\n+\t\t\t\t\t    GCOV_VERSION), value);\n \n   /* next -- NULL */\n   field = build_decl (FIELD_DECL, NULL_TREE, build_pointer_type (const_type));\n@@ -802,8 +802,8 @@ build_gcov_info (void)\n   field = build_decl (FIELD_DECL, NULL_TREE, unsigned_intSI_type_node);\n   TREE_CHAIN (field) = fields;\n   fields = field;\n-  value = tree_cons (field, build_int_cst (unsigned_intSI_type_node,\n-\t\t\t\t\t   local_tick, 0), value);\n+  value = tree_cons (field, build_int_cstu (unsigned_intSI_type_node,\n+\t\t\t\t\t    local_tick), value);\n \n   /* Filename */\n   string_type = build_pointer_type (build_qualified_type (char_type_node,\n@@ -821,7 +821,7 @@ build_gcov_info (void)\n     free (filename);\n   TREE_TYPE (filename_string) = build_array_type\n     (char_type_node, build_index_type\n-     (build_int_cst (NULL_TREE, filename_len, 0)));\n+     (build_int_cst (NULL_TREE, filename_len)));\n   value = tree_cons (field, build1 (ADDR_EXPR, string_type, filename_string),\n \t\t     value);\n \n@@ -837,8 +837,7 @@ build_gcov_info (void)\n     {\n       tree array_type;\n \n-      array_type = build_index_type (build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t    n_fns - 1, 0));\n+      array_type = build_index_type (build_int_cst (NULL_TREE, n_fns - 1));\n       array_type = build_array_type (fn_info_type, array_type);\n \n       fn_info_value = build_constructor (array_type, nreverse (fn_info_value));\n@@ -852,7 +851,7 @@ build_gcov_info (void)\n   TREE_CHAIN (field) = fields;\n   fields = field;\n   value = tree_cons (field,\n-\t\t     build_int_cst (unsigned_type_node, n_fns, 0),\n+\t\t     build_int_cstu (unsigned_type_node, n_fns),\n \t\t     value);\n \n   /* fn_info table */\n@@ -866,13 +865,13 @@ build_gcov_info (void)\n   TREE_CHAIN (field) = fields;\n   fields = field;\n   value = tree_cons (field,\n-\t\t     build_int_cst (unsigned_type_node, prg_ctr_mask, 0),\n+\t\t     build_int_cstu (unsigned_type_node, prg_ctr_mask),\n \t\t     value);\n \n   /* counters */\n   ctr_info_type = build_ctr_info_type ();\n   ctr_info_ary_type = build_index_type (build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t       n_ctr_types, 0));\n+\t\t\t\t\t\t       n_ctr_types));\n   ctr_info_ary_type = build_array_type (ctr_info_type, ctr_info_ary_type);\n   for (ix = 0; ix != GCOV_COUNTERS; ix++)\n     if (prg_ctr_mask & (1 << ix))"}, {"sha": "fcb04047c64f07477502015a98d625b565e17994", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -1,3 +1,23 @@\n+2004-08-25  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\n+\t* call.c (convert_class_to_reference): Adjust build_int_cst calls.\n+\t(build_user_type_conversion_1, convert_like_real,\n+\tbuild_java_interface_fn_ref, build_special_member_call): Likewise.\n+\t* class.c (finish_struct_1, build_vtbl_initializer): Likewise.\n+\t* cp-gimplify.c (cp_gimplify_expr): Likewise.\n+\t* cvt.c (cp_convert_to_pointer): Likewise.\n+\t* decl.c (cxx_init_decl_processing, complete_array_type): Likewise.\n+\t* decl2.c (start_static_initialization_or_destruction,\n+\tgenerate_ctor_or_dtor_function): Likewise.\n+\t* except.c (build_throw): Likewise.\n+\t* mangle.c (write_integer_cst): Likewise.\n+\t* method.c (finish_thunk): Likewise.\n+\t* rtti.c (build_headof, get_tinfo_decl_dynamic,\n+\tbuild_dynamic_cast_1, ptr_initializer, ptm_initializer,\n+\tget_pseudo_ti_init): Likewise.\n+\t* search.c (get_dynamic_cast_base_type): Likewise.\n+\t\n 2004-08-25  Zack Weinberg  <zack@codesourcery.com>\n \n \t* class.c, search.c: Remove references to DWARF_DEBUG.\n@@ -6,10 +26,9 @@\n \n \t* repo.c (extract_string): Reset backquote after one character.\n \t(get_base_filename): Fix indentation.\n-\n 2004-08-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n-\t* cp/decl.c (cxx_init_decl_processing): Adjust\n+\t* decl.c (cxx_init_decl_processing): Adjust\n \tbuild_common_tree_nodes call.\n \n 2004-08-24  Nathan Sidwell  <nathan@codesourcery.com>"}, {"sha": "6ebe9e24e23e44591ca43d65a45624231f0ab4f0", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -919,7 +919,7 @@ convert_class_to_reference (tree t, tree s, tree expr)\n      error messages, which we should not issue now because we are just\n      trying to find a conversion operator.  Therefore, we use NULL,\n      cast to the appropriate type.  */\n-  arglist = build_int_cst (build_pointer_type (s), 0, 0);\n+  arglist = build_int_cst (build_pointer_type (s), 0);\n   arglist = build_tree_list (NULL_TREE, arglist);\n \n   reference_type = build_reference_type (t);\n@@ -2519,7 +2519,7 @@ build_user_type_conversion_1 (tree totype, tree expr, int flags)\n \n       ctors = BASELINK_FUNCTIONS (ctors);\n \n-      t = build_int_cst (build_pointer_type (totype), 0, 0);\n+      t = build_int_cst (build_pointer_type (totype), 0);\n       args = build_tree_list (NULL_TREE, expr);\n       /* We should never try to call the abstract or base constructor\n \t from here.  */\n@@ -4181,7 +4181,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \tif (DECL_CONSTRUCTOR_P (convfn))\n \t  {\n \t    tree t = build_int_cst (build_pointer_type (DECL_CONTEXT (convfn)),\n-\t\t\t\t    0, 0);\n+\t\t\t\t    0);\n \n \t    args = build_tree_list (NULL_TREE, expr);\n \t    if (DECL_HAS_IN_CHARGE_PARM_P (convfn)\n@@ -4959,7 +4959,7 @@ build_java_interface_fn_ref (tree fn, tree instance)\n         break;\n       i++;\n     }\n-  idx = build_int_cst (NULL_TREE, i, 0);\n+  idx = build_int_cst (NULL_TREE, i);\n \n   lookup_args = tree_cons (NULL_TREE, klass_ref, \n \t\t\t   tree_cons (NULL_TREE, iface_ref,\n@@ -5035,7 +5035,7 @@ build_special_member_call (tree instance, tree name, tree args,\n   /* Handle the special case where INSTANCE is NULL_TREE.  */\n   if (name == complete_ctor_identifier && !instance)\n     {\n-      instance = build_int_cst (build_pointer_type (class_type), 0, 0);\n+      instance = build_int_cst (build_pointer_type (class_type), 0);\n       instance = build1 (INDIRECT_REF, class_type, instance);\n     }\n   else"}, {"sha": "bd0d3f5523e01fc30a44e7289951c688aa3e758a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -5085,7 +5085,7 @@ finish_struct_1 (tree t)\n \t       thunk base function.  */\n \t    DECL_VINDEX (fndecl) = NULL_TREE;\n \t  else if (TREE_CODE (DECL_VINDEX (fndecl)) != INTEGER_CST)\n-\t    DECL_VINDEX (fndecl) = build_int_cst (NULL_TREE, vindex, 0);\n+\t    DECL_VINDEX (fndecl) = build_int_cst (NULL_TREE, vindex);\n \t}\n     }\n \n@@ -7279,7 +7279,7 @@ build_vtbl_initializer (tree binfo,\n   vid.generate_vcall_entries = true;\n   /* The first vbase or vcall offset is at index -3 in the vtable.  */\n   vid.index = build_int_cst (ssizetype,\n-\t\t\t     -3 * TARGET_VTABLE_DATA_ENTRY_DISTANCE, -1);\n+\t\t\t     -3 * TARGET_VTABLE_DATA_ENTRY_DISTANCE);\n \n   /* Add entries to the vtable for RTTI.  */\n   build_rtti_vtbl_entries (binfo, &vid);\n@@ -7405,7 +7405,7 @@ build_vtbl_initializer (tree binfo,\n \t      {\n \t\ttree fdesc = build2 (FDESC_EXPR, vfunc_ptr_type_node,\n \t\t\t\t     TREE_OPERAND (init, 0),\n-\t\t\t\t     build_int_cst (NULL_TREE, i, 0));\n+\t\t\t\t     build_int_cst (NULL_TREE, i));\n \t\tTREE_CONSTANT (fdesc) = 1;\n \t\tTREE_INVARIANT (fdesc) = 1;\n "}, {"sha": "d9fc928529c657d027a3496568f7cdfaac467d83", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -211,7 +211,7 @@ cp_gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p)\n \n     case EMPTY_CLASS_EXPR:\n       /* We create an INTEGER_CST with RECORD_TYPE and value zero.  */\n-      *expr_p = build_int_cst (TREE_TYPE (*expr_p), 0, 0);\n+      *expr_p = build_int_cst (TREE_TYPE (*expr_p), 0);\n       ret = GS_OK;\n       break;\n "}, {"sha": "ede4770cf042e4007aafb71bd5d6274417d9c0e5", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -264,12 +264,12 @@ cp_convert_to_pointer (tree type, tree expr, bool force)\n \t{\n \t  /* A NULL pointer-to-member is represented by -1, not by\n \t     zero.  */\n-\t  expr = build_int_cst (type, -1, -1);\n+\t  expr = build_int_cst (type, -1);\n \t  /* Fix up the representation of -1 if appropriate.  */\n \t  expr = force_fit_type (expr, 0, false, false);\n \t}\n       else\n-\texpr = build_int_cst (type, 0, 0);\n+\texpr = build_int_cst (type, 0);\n       \n       return expr;\n     }"}, {"sha": "05db490cffc64113a5b2a4cc949df7eacc43cdbf", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -2963,8 +2963,8 @@ cxx_init_decl_processing (void)\n   java_char_type_node = record_builtin_java_type (\"__java_char\", -16);\n   java_boolean_type_node = record_builtin_java_type (\"__java_boolean\", -1);\n \n-  integer_two_node = build_int_cst (NULL_TREE, 2, 0);\n-  integer_three_node = build_int_cst (NULL_TREE, 3, 0);\n+  integer_two_node = build_int_cst (NULL_TREE, 2);\n+  integer_three_node = build_int_cst (NULL_TREE, 3);\n \n   record_builtin_type (RID_BOOL, \"bool\", boolean_type_node);\n   truthvalue_type_node = boolean_type_node;\n@@ -5254,13 +5254,13 @@ complete_array_type (tree type, tree initial_value, int do_default)\n \t    = int_size_in_bytes (TREE_TYPE (TREE_TYPE (initial_value)));\n \t  maxindex = build_int_cst (NULL_TREE,\n \t\t\t\t    (TREE_STRING_LENGTH (initial_value)\n-\t\t\t\t     / eltsize) - 1, 0);\n+\t\t\t\t     / eltsize) - 1);\n \t}\n       else if (TREE_CODE (initial_value) == CONSTRUCTOR)\n \t{\n \t  tree elts = CONSTRUCTOR_ELTS (initial_value);\n \n-\t  maxindex = build_int_cst (ssizetype, -1, -1);\n+\t  maxindex = build_int_cst (ssizetype, -1);\n \t  for (; elts; elts = TREE_CHAIN (elts))\n \t    {\n \t      if (TREE_PURPOSE (elts))\n@@ -5278,14 +5278,14 @@ complete_array_type (tree type, tree initial_value, int do_default)\n \t    initial_value = NULL_TREE;\n \n \t  /* Prevent further error messages.  */\n-\t  maxindex = build_int_cst (NULL_TREE, 0, 0);\n+\t  maxindex = build_int_cst (NULL_TREE, 0);\n \t}\n     }\n \n   if (!maxindex)\n     {\n       if (do_default)\n-\tmaxindex = build_int_cst (NULL_TREE, 0, 0);\n+\tmaxindex = build_int_cst (NULL_TREE, 0);\n       value = 2;\n     }\n "}, {"sha": "cb9628ca5d7333aaa84ac673ac0752308c206aa2", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -2351,7 +2351,7 @@ start_static_initialization_or_destruction (tree decl, int initp)\n   guard_if_stmt = begin_if_stmt ();\n   cond = cp_build_binary_op (EQ_EXPR,\n \t\t\t     priority_decl,\n-\t\t\t     build_int_cst (NULL_TREE, priority, 0));\n+\t\t\t     build_int_cst (NULL_TREE, priority));\n   init_cond = initp ? integer_one_node : integer_zero_node;\n   init_cond = cp_build_binary_op (EQ_EXPR,\n \t\t\t\t  initialize_p_decl,\n@@ -2602,10 +2602,10 @@ generate_ctor_or_dtor_function (bool constructor_p, int priority,\n \t      body = start_objects (function_key, priority);\n \n \t    arguments = tree_cons (NULL_TREE,\n-\t\t\t\t   build_int_cst (NULL_TREE, priority, 0), \n+\t\t\t\t   build_int_cst (NULL_TREE, priority), \n \t\t\t\t   NULL_TREE);\n \t    arguments = tree_cons (NULL_TREE,\n-\t\t\t\t   build_int_cst (NULL_TREE, constructor_p, 0),\n+\t\t\t\t   build_int_cst (NULL_TREE, constructor_p),\n \t\t\t\t   arguments);\n \t    finish_expr_stmt (build_function_call (fndecl, arguments));\n \t  }"}, {"sha": "72ce2867d290f027256394b90979deb6b6d66a3b", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -721,7 +721,7 @@ build_throw (tree exp)\n \t  cleanup = build1 (ADDR_EXPR, cleanup_type, cleanup);\n \t}\n       else\n-\tcleanup = build_int_cst (cleanup_type, 0, 0);\n+\tcleanup = build_int_cst (cleanup_type, 0);\n \t\n       tmp = tree_cons (NULL_TREE, cleanup, NULL_TREE);\n       tmp = tree_cons (NULL_TREE, throw_type, tmp);"}, {"sha": "bdff9778daed183849fc596ff69f056d0ccbfed4", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -1183,9 +1183,9 @@ write_integer_cst (const tree cst)\n \t}\n       \n       type = c_common_signed_or_unsigned_type (1, TREE_TYPE (cst));\n-      base = build_int_cst (type, chunk, 0);\n-      n = build_int_cst (type,\n-\t\t\t TREE_INT_CST_LOW (cst), TREE_INT_CST_HIGH (cst));\n+      base = build_int_cstu (type, chunk);\n+      n = build_int_cst_wide (type,\n+\t\t\t      TREE_INT_CST_LOW (cst), TREE_INT_CST_HIGH (cst));\n \n       if (sign < 0)\n \t{"}, {"sha": "11107b1a077e7fd254ae3355b879ba9af585b255", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -179,9 +179,7 @@ void\n finish_thunk (tree thunk)\n {\n   tree function, name;\n-  tree fixed_offset = build_int_cst (ssizetype,\n-\t\t\t\t     THUNK_FIXED_OFFSET (thunk),\n-\t\t\t\t     THUNK_FIXED_OFFSET (thunk) < 0 ? -1 : 0);\n+  tree fixed_offset = build_int_cst (ssizetype, THUNK_FIXED_OFFSET (thunk));\n   tree virtual_offset = THUNK_VIRTUAL_OFFSET (thunk);\n \n   my_friendly_assert (!DECL_NAME (thunk) && DECL_THUNK_P (thunk), 20021127);"}, {"sha": "1bc3952b3d764bbdc023d750b0f432f55a455f3e", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -151,7 +151,7 @@ build_headof (tree exp)\n \n   /* The offset-to-top field is at index -2 from the vptr.  */\n   index = build_int_cst (NULL_TREE,\n-\t\t\t -2 * TARGET_VTABLE_DATA_ENTRY_DISTANCE, -1);\n+\t\t\t -2 * TARGET_VTABLE_DATA_ENTRY_DISTANCE);\n \n   offset = build_vtbl_ref (build_indirect_ref (exp, NULL), index);\n \n@@ -227,7 +227,7 @@ get_tinfo_decl_dynamic (tree exp)\n \n       /* The RTTI information is at index -1.  */\n       index = build_int_cst (NULL_TREE,\n-\t\t\t     -1 * TARGET_VTABLE_DATA_ENTRY_DISTANCE, -1);\n+\t\t\t     -1 * TARGET_VTABLE_DATA_ENTRY_DISTANCE);\n       t = build_vtbl_ref (exp, index);\n       t = convert (type_info_ptr_type, t);\n     }\n@@ -590,7 +590,7 @@ build_dynamic_cast_1 (tree type, tree expr)\n \t\t{\n \t\t  warning (\"dynamic_cast of `%#D' to `%#T' can never succeed\",\n \t\t\t      op, type);\n-\t\t  retval = build_int_cst (type, 0, 0); \n+\t\t  retval = build_int_cst (type, 0); \n \t\t  return retval;\n \t\t}\n \t    }\n@@ -879,7 +879,7 @@ ptr_initializer (tree desc, tree target)\n   \n   if (incomplete)\n     flags |= 8;\n-  init = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, flags, 0), init);\n+  init = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, flags), init);\n   init = tree_cons (NULL_TREE,\n                     get_tinfo_ptr (TYPE_MAIN_VARIANT (to)),\n                     init);\n@@ -909,7 +909,7 @@ ptm_initializer (tree desc, tree target)\n     flags |= 0x8;\n   if (!COMPLETE_TYPE_P (klass))\n     flags |= 0x10;\n-  init = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, flags, 0), init);\n+  init = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, flags), init);\n   init = tree_cons (NULL_TREE,\n \t\t    get_tinfo_ptr (TYPE_MAIN_VARIANT (to)),\n                     init);\n@@ -1090,10 +1090,9 @@ get_pseudo_ti_init (tree type, tree var_desc)\n               \n               /* Combine offset and flags into one field.  */\n               offset = cp_build_binary_op (LSHIFT_EXPR, offset,\n-\t\t\t\t\t   build_int_cst (NULL_TREE, 8, 0));\n+\t\t\t\t\t   build_int_cst (NULL_TREE, 8));\n               offset = cp_build_binary_op (BIT_IOR_EXPR, offset,\n-\t\t\t\t\t   build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t\t  flags, 0));\n+\t\t\t\t\t   build_int_cst (NULL_TREE, flags));\n               base_init = tree_cons (NULL_TREE, offset, base_init);\n               base_init = tree_cons (NULL_TREE, tinfo, base_init);\n               base_init = build_constructor (NULL_TREE, base_init);\n@@ -1103,11 +1102,11 @@ get_pseudo_ti_init (tree type, tree var_desc)\n \t  base_inits = tree_cons (NULL_TREE, base_inits, NULL_TREE);\n \t  /* Prepend the number of bases.  */\n \t  base_inits = tree_cons (NULL_TREE,\n-\t\t\t\t  build_int_cst (NULL_TREE, nbases, 0),\n+\t\t\t\t  build_int_cst (NULL_TREE, nbases),\n \t\t\t\t  base_inits);\n \t  /* Prepend the hint flags.  */\n \t  base_inits = tree_cons (NULL_TREE,\n-\t\t\t\t  build_int_cst (NULL_TREE, hint, 0),\n+\t\t\t\t  build_int_cst (NULL_TREE, hint),\n \t\t\t\t  base_inits);\n \n           return class_initializer (var_desc, type, base_inits);"}, {"sha": "4acd2d5a1cadc1c7e8a36727ea9932a71058cf93", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -347,7 +347,7 @@ get_dynamic_cast_base_type (tree subtype, tree target)\n   \n   if (!boff)\n     return offset;\n-  offset = build_int_cst (ssizetype, boff, -1);\n+  offset = build_int_cst (ssizetype, boff);\n   return offset;\n }\n "}, {"sha": "458b88c2af0fae86a45130e5e372f6e9e34095c3", "filename": "gcc/except.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -376,7 +376,7 @@ init_eh (void)\n \t\t\t integer_type_node);\n       DECL_FIELD_CONTEXT (f_cs) = sjlj_fc_type_node;\n \n-      tmp = build_index_type (build_int_cst (NULL_TREE, 4 - 1, 0));\n+      tmp = build_index_type (build_int_cst (NULL_TREE, 4 - 1));\n       tmp = build_array_type (lang_hooks.types.type_for_mode (word_mode, 1),\n \t\t\t      tmp);\n       f_data = build_decl (FIELD_DECL, get_identifier (\"__data\"), tmp);\n@@ -392,19 +392,17 @@ init_eh (void)\n \n #ifdef DONT_USE_BUILTIN_SETJMP\n #ifdef JMP_BUF_SIZE\n-      tmp = build_int_cst (NULL_TREE, JMP_BUF_SIZE - 1, 0);\n+      tmp = build_int_cst (NULL_TREE, JMP_BUF_SIZE - 1);\n #else\n       /* Should be large enough for most systems, if it is not,\n \t JMP_BUF_SIZE should be defined with the proper value.  It will\n \t also tend to be larger than necessary for most systems, a more\n \t optimal port will define JMP_BUF_SIZE.  */\n-      tmp = build_int_cst (NULL_TREE,\n-\t\t\t   FIRST_PSEUDO_REGISTER + 2 - 1, 0);\n+      tmp = build_int_cst (NULL_TREE, FIRST_PSEUDO_REGISTER + 2 - 1);\n #endif\n #else\n       /* builtin_setjmp takes a pointer to 5 words.  */\n-      tmp = build_int_cst (NULL_TREE,\n-\t\t\t   5 * BITS_PER_WORD / POINTER_SIZE - 1, 0);\n+      tmp = build_int_cst (NULL_TREE, 5 * BITS_PER_WORD / POINTER_SIZE - 1);\n #endif\n       tmp = build_index_type (tmp);\n       tmp = build_array_type (ptr_type_node, tmp);\n@@ -1416,7 +1414,7 @@ assign_filter_values (void)\n \t      for (;tp_node; tp_node = TREE_CHAIN (tp_node))\n \t\t{\n \t\t  int flt = add_ttypes_entry (ttypes, TREE_VALUE (tp_node));\n-\t\t  tree flt_node = build_int_cst (NULL_TREE, flt, 0);\n+\t\t  tree flt_node = build_int_cst (NULL_TREE, flt);\n \n \t\t  r->u.catch.filter_list\n \t\t    = tree_cons (NULL_TREE, flt_node, r->u.catch.filter_list);\n@@ -1427,7 +1425,7 @@ assign_filter_values (void)\n \t      /* Get a filter value for the NULL list also since it will need\n \t\t an action record anyway.  */\n \t      int flt = add_ttypes_entry (ttypes, NULL);\n-\t      tree flt_node = build_int_cst (NULL_TREE, flt, 0);\n+\t      tree flt_node = build_int_cst (NULL_TREE, flt);\n \n \t      r->u.catch.filter_list\n \t\t= tree_cons (NULL_TREE, flt_node, r->u.catch.filter_list);"}, {"sha": "034e49a293d99b85e002379d75b11710a9aefd16", "filename": "gcc/expmed.c", "status": "modified", "additions": 47, "deletions": 57, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -899,8 +899,7 @@ store_fixed_bit_field (rtx op0, unsigned HOST_WIDE_INT offset,\n \t\t\t      NULL_RTX, 1, OPTAB_LIB_WIDEN);\n       if (bitpos > 0)\n \tvalue = expand_shift (LSHIFT_EXPR, mode, value,\n-\t\t\t      build_int_cst (NULL_TREE,\n-\t\t\t\t\t     bitpos, 0), NULL_RTX, 1);\n+\t\t\t      build_int_cst (NULL_TREE, bitpos), NULL_RTX, 1);\n     }\n \n   /* Now clear the chosen bits in OP0,\n@@ -1329,13 +1328,11 @@ extract_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n       /* Signed bit field: sign-extend with two arithmetic shifts.  */\n       target = expand_shift (LSHIFT_EXPR, mode, target,\n \t\t\t     build_int_cst (NULL_TREE,\n-\t\t\t\t\t    GET_MODE_BITSIZE (mode) - bitsize,\n-\t\t\t\t\t    0),\n+\t\t\t\t\t    GET_MODE_BITSIZE (mode) - bitsize),\n \t\t\t     NULL_RTX, 0);\n       return expand_shift (RSHIFT_EXPR, mode, target,\n \t\t\t   build_int_cst (NULL_TREE,\n-\t\t\t\t\t  GET_MODE_BITSIZE (mode) - bitsize,\n-\t\t\t\t\t  0),\n+\t\t\t\t\t  GET_MODE_BITSIZE (mode) - bitsize),\n \t\t\t   NULL_RTX, 0);\n     }\n \n@@ -1740,7 +1737,7 @@ extract_fixed_bit_field (enum machine_mode tmode, rtx op0,\n \t{\n \t  /* If the field does not already start at the lsb,\n \t     shift it so it does.  */\n-\t  tree amount = build_int_cst (NULL_TREE, bitpos, 0);\n+\t  tree amount = build_int_cst (NULL_TREE, bitpos);\n \t  /* Maybe propagate the target for the shift.  */\n \t  /* But not if we will return it--could confuse integrate.c.  */\n \t  rtx subtarget = (target != 0 && REG_P (target) ? target : 0);\n@@ -1781,15 +1778,15 @@ extract_fixed_bit_field (enum machine_mode tmode, rtx op0,\n     {\n       tree amount\n \t= build_int_cst (NULL_TREE,\n-\t\t\t GET_MODE_BITSIZE (mode) - (bitsize + bitpos), 0);\n+\t\t\t GET_MODE_BITSIZE (mode) - (bitsize + bitpos));\n       /* Maybe propagate the target for the shift.  */\n       rtx subtarget = (target != 0 && REG_P (target) ? target : 0);\n       op0 = expand_shift (LSHIFT_EXPR, mode, op0, amount, subtarget, 1);\n     }\n \n   return expand_shift (RSHIFT_EXPR, mode, op0,\n \t\t       build_int_cst (NULL_TREE,\n-\t\t\t\t      GET_MODE_BITSIZE (mode) - bitsize, 0),\n+\t\t\t\t      GET_MODE_BITSIZE (mode) - bitsize),\n \t\t       target, 0);\n }\n \f\n@@ -1937,15 +1934,15 @@ extract_split_bit_field (rtx op0, unsigned HOST_WIDE_INT bitsize,\n \t{\n \t  if (bitsize != bitsdone)\n \t    part = expand_shift (LSHIFT_EXPR, word_mode, part,\n-\t\t\t\t build_int_cst (NULL_TREE,\n-\t\t\t\t\t\tbitsize - bitsdone, 0), 0, 1);\n+\t\t\t\t build_int_cst (NULL_TREE, bitsize - bitsdone),\n+\t\t\t\t 0, 1);\n \t}\n       else\n \t{\n \t  if (bitsdone != thissize)\n \t    part = expand_shift (LSHIFT_EXPR, word_mode, part,\n \t\t\t\t build_int_cst (NULL_TREE,\n-\t\t\t\t\t\tbitsdone - thissize, 0), 0, 1);\n+\t\t\t\t\t\tbitsdone - thissize), 0, 1);\n \t}\n \n       if (first)\n@@ -1964,12 +1961,11 @@ extract_split_bit_field (rtx op0, unsigned HOST_WIDE_INT bitsize,\n     return result;\n   /* Signed bit field: sign-extend with two arithmetic shifts.  */\n   result = expand_shift (LSHIFT_EXPR, word_mode, result,\n-\t\t\t build_int_cst (NULL_TREE,\n-\t\t\t\t\tBITS_PER_WORD - bitsize, 0),\n+\t\t\t build_int_cst (NULL_TREE, BITS_PER_WORD - bitsize),\n \t\t\t NULL_RTX, 0);\n   return expand_shift (RSHIFT_EXPR, word_mode, result,\n-\t\t       build_int_cst (NULL_TREE,\n-\t\t\t\t      BITS_PER_WORD - bitsize, 0), NULL_RTX, 0);\n+\t\t       build_int_cst (NULL_TREE, BITS_PER_WORD - bitsize),\n+\t\t       NULL_RTX, 0);\n }\n \f\n /* Add INC into TARGET.  */\n@@ -2088,7 +2084,7 @@ expand_shift (enum tree_code code, enum machine_mode mode, rtx shifted,\n \t      tree other_amount\n \t\t= fold (build2 (MINUS_EXPR, type, convert\n \t\t\t\t(type, build_int_cst\n-\t\t\t\t (NULL_TREE, GET_MODE_BITSIZE (mode), 0)),\n+\t\t\t\t (NULL_TREE, GET_MODE_BITSIZE (mode))),\n \t\t\t\tamount));\n \n \t      shifted = force_reg (mode, shifted);\n@@ -2558,14 +2554,14 @@ expand_mult_const (enum machine_mode mode, rtx op0, HOST_WIDE_INT val,\n \t{\n \tcase alg_shift:\n \t  accum = expand_shift (LSHIFT_EXPR, mode, accum,\n-\t\t\t\tbuild_int_cst (NULL_TREE, log, 0),\n+\t\t\t\tbuild_int_cst (NULL_TREE, log),\n \t\t\t\tNULL_RTX, 0);\n \t  val_so_far <<= log;\n \t  break;\n \n \tcase alg_add_t_m2:\n \t  tem = expand_shift (LSHIFT_EXPR, mode, op0,\n-\t\t\t      build_int_cst (NULL_TREE, log, 0),\n+\t\t\t      build_int_cst (NULL_TREE, log),\n \t\t\t      NULL_RTX, 0);\n \t  accum = force_operand (gen_rtx_PLUS (mode, accum, tem),\n \t\t\t\t add_target ? add_target : accum_target);\n@@ -2574,7 +2570,7 @@ expand_mult_const (enum machine_mode mode, rtx op0, HOST_WIDE_INT val,\n \n \tcase alg_sub_t_m2:\n \t  tem = expand_shift (LSHIFT_EXPR, mode, op0,\n-\t\t\t      build_int_cst (NULL_TREE, log, 0),\n+\t\t\t      build_int_cst (NULL_TREE, log),\n \t\t\t      NULL_RTX, 0);\n \t  accum = force_operand (gen_rtx_MINUS (mode, accum, tem),\n \t\t\t\t add_target ? add_target : accum_target);\n@@ -2583,7 +2579,7 @@ expand_mult_const (enum machine_mode mode, rtx op0, HOST_WIDE_INT val,\n \n \tcase alg_add_t2_m:\n \t  accum = expand_shift (LSHIFT_EXPR, mode, accum,\n-\t\t\t\tbuild_int_cst (NULL_TREE, log, 0),\n+\t\t\t\tbuild_int_cst (NULL_TREE, log),\n \t\t\t\tshift_subtarget,\n \t\t\t\t0);\n \t  accum = force_operand (gen_rtx_PLUS (mode, accum, op0),\n@@ -2593,7 +2589,7 @@ expand_mult_const (enum machine_mode mode, rtx op0, HOST_WIDE_INT val,\n \n \tcase alg_sub_t2_m:\n \t  accum = expand_shift (LSHIFT_EXPR, mode, accum,\n-\t\t\t\tbuild_int_cst (NULL_TREE, log, 0),\n+\t\t\t\tbuild_int_cst (NULL_TREE, log),\n \t\t\t\tshift_subtarget, 0);\n \t  accum = force_operand (gen_rtx_MINUS (mode, accum, op0),\n \t\t\t\t add_target ? add_target : accum_target);\n@@ -2602,7 +2598,7 @@ expand_mult_const (enum machine_mode mode, rtx op0, HOST_WIDE_INT val,\n \n \tcase alg_add_factor:\n \t  tem = expand_shift (LSHIFT_EXPR, mode, accum,\n-\t\t\t      build_int_cst (NULL_TREE, log, 0),\n+\t\t\t      build_int_cst (NULL_TREE, log),\n \t\t\t      NULL_RTX, 0);\n \t  accum = force_operand (gen_rtx_PLUS (mode, accum, tem),\n \t\t\t\t add_target ? add_target : accum_target);\n@@ -2611,7 +2607,7 @@ expand_mult_const (enum machine_mode mode, rtx op0, HOST_WIDE_INT val,\n \n \tcase alg_sub_factor:\n \t  tem = expand_shift (LSHIFT_EXPR, mode, accum,\n-\t\t\t      build_int_cst (NULL_TREE, log, 0),\n+\t\t\t      build_int_cst (NULL_TREE, log),\n \t\t\t      NULL_RTX, 0);\n \t  accum = force_operand (gen_rtx_MINUS (mode, tem, accum),\n \t\t\t\t (add_target\n@@ -2907,17 +2903,15 @@ expand_mult_highpart_adjust (enum machine_mode mode, rtx adj_operand, rtx op0,\n   enum rtx_code adj_code = unsignedp ? PLUS : MINUS;\n \n   tem = expand_shift (RSHIFT_EXPR, mode, op0,\n-\t\t      build_int_cst (NULL_TREE,\n-\t\t\t\t     GET_MODE_BITSIZE (mode) - 1, 0),\n+\t\t      build_int_cst (NULL_TREE, GET_MODE_BITSIZE (mode) - 1),\n \t\t      NULL_RTX, 0);\n   tem = expand_and (mode, tem, op1, NULL_RTX);\n   adj_operand\n     = force_operand (gen_rtx_fmt_ee (adj_code, mode, adj_operand, tem),\n \t\t     adj_operand);\n \n   tem = expand_shift (RSHIFT_EXPR, mode, op1,\n-\t\t      build_int_cst (NULL_TREE,\n-\t\t\t\t     GET_MODE_BITSIZE (mode) - 1, 0),\n+\t\t      build_int_cst (NULL_TREE, GET_MODE_BITSIZE (mode) - 1),\n \t\t      NULL_RTX, 0);\n   tem = expand_and (mode, tem, op0, NULL_RTX);\n   target = force_operand (gen_rtx_fmt_ee (adj_code, mode, adj_operand, tem),\n@@ -2938,8 +2932,7 @@ extract_high_half (enum machine_mode mode, rtx op)\n \n   wider_mode = GET_MODE_WIDER_MODE (mode);\n   op = expand_shift (RSHIFT_EXPR, wider_mode, op,\n-\t\t     build_int_cst (NULL_TREE,\n-\t\t\t\t    GET_MODE_BITSIZE (mode), 0), 0, 1);\n+\t\t     build_int_cst (NULL_TREE, GET_MODE_BITSIZE (mode)), 0, 1);\n   return convert_modes (mode, wider_mode, op, 0);\n }\n \n@@ -3202,7 +3195,7 @@ expand_sdiv_pow2 (enum machine_mode mode, rtx op0, HOST_WIDE_INT d)\n   int logd;\n \n   logd = floor_log2 (d);\n-  shift = build_int_cst (NULL_TREE, logd, 0);\n+  shift = build_int_cst (NULL_TREE, logd);\n \n   if (d == 2 && BRANCH_COST >= 1)\n     {\n@@ -3249,7 +3242,7 @@ expand_sdiv_pow2 (enum machine_mode mode, rtx op0, HOST_WIDE_INT d)\n \t\t\t     NULL_RTX, 0, OPTAB_LIB_WIDEN);\n       else\n \ttemp = expand_shift (RSHIFT_EXPR, mode, temp,\n-\t\t\t     build_int_cst (NULL_TREE, ushift, 0),\n+\t\t\t     build_int_cst (NULL_TREE, ushift),\n \t\t\t     NULL_RTX, 1);\n       temp = expand_binop (mode, add_optab, temp, op0, NULL_RTX,\n \t\t\t   0, OPTAB_LIB_WIDEN);\n@@ -3527,7 +3520,7 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t      }\n \t\t    quotient = expand_shift (RSHIFT_EXPR, compute_mode, op0,\n \t\t\t\t\t     build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t\t    pre_shift, 0),\n+\t\t\t\t\t\t\t    pre_shift),\n \t\t\t\t\t     tquotient, 1);\n \t\t  }\n \t\telse if (size <= HOST_BITS_PER_WIDE_INT)\n@@ -3585,15 +3578,14 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t\t\t\t\tNULL_RTX);\n \t\t\t    t3 = expand_shift\n \t\t\t      (RSHIFT_EXPR, compute_mode, t2,\n-\t\t\t       build_int_cst (NULL_TREE, 1, 0),\n+\t\t\t       build_int_cst (NULL_TREE, 1),\n \t\t\t       NULL_RTX,1);\n \t\t\t    t4 = force_operand (gen_rtx_PLUS (compute_mode,\n \t\t\t\t\t\t\t      t1, t3),\n \t\t\t\t\t\tNULL_RTX);\n \t\t\t    quotient = expand_shift\n \t\t\t      (RSHIFT_EXPR, compute_mode, t4,\n-\t\t\t       build_int_cst (NULL_TREE,\n-\t\t\t\t\t      post_shift - 1, 0),\n+\t\t\t       build_int_cst (NULL_TREE, post_shift - 1),\n \t\t\t       tquotient, 1);\n \t\t\t  }\n \t\t\telse\n@@ -3606,7 +3598,7 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \n \t\t\t    t1 = expand_shift\n \t\t\t      (RSHIFT_EXPR, compute_mode, op0,\n-\t\t\t       build_int_cst (NULL_TREE, pre_shift, 0),\n+\t\t\t       build_int_cst (NULL_TREE, pre_shift),\n \t\t\t       NULL_RTX, 1);\n \t\t\t    extra_cost\n \t\t\t      = (shift_cost[compute_mode][pre_shift]\n@@ -3618,8 +3610,7 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t\t      goto fail1;\n \t\t\t    quotient = expand_shift\n \t\t\t      (RSHIFT_EXPR, compute_mode, t2,\n-\t\t\t       build_int_cst (NULL_TREE,\n-\t\t\t\t\t      post_shift, 0),\n+\t\t\t       build_int_cst (NULL_TREE, post_shift),\n \t\t\t       tquotient, 1);\n \t\t\t  }\n \t\t      }\n@@ -3728,11 +3719,11 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t\t  goto fail1;\n \t\t\tt2 = expand_shift\n \t\t\t  (RSHIFT_EXPR, compute_mode, t1,\n-\t\t\t   build_int_cst (NULL_TREE, post_shift, 0),\n+\t\t\t   build_int_cst (NULL_TREE, post_shift),\n \t\t\t   NULL_RTX, 0);\n \t\t\tt3 = expand_shift\n \t\t\t  (RSHIFT_EXPR, compute_mode, op0,\n-\t\t\t   build_int_cst (NULL_TREE, size - 1, 0),\n+\t\t\t   build_int_cst (NULL_TREE, size - 1),\n \t\t\t   NULL_RTX, 0);\n \t\t\tif (d < 0)\n \t\t\t  quotient\n@@ -3767,11 +3758,11 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t\t\t\t    NULL_RTX);\n \t\t\tt3 = expand_shift\n \t\t\t  (RSHIFT_EXPR, compute_mode, t2,\n-\t\t\t   build_int_cst (NULL_TREE, post_shift, 0),\n+\t\t\t   build_int_cst (NULL_TREE, post_shift),\n \t\t\t   NULL_RTX, 0);\n \t\t\tt4 = expand_shift\n \t\t\t  (RSHIFT_EXPR, compute_mode, op0,\n-\t\t\t   build_int_cst (NULL_TREE, size - 1, 0),\n+\t\t\t   build_int_cst (NULL_TREE, size - 1),\n \t\t\t   NULL_RTX, 0);\n \t\t\tif (d < 0)\n \t\t\t  quotient\n@@ -3828,7 +3819,7 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t      }\n \t\t    quotient = expand_shift\n \t\t      (RSHIFT_EXPR, compute_mode, op0,\n-\t\t       build_int_cst (NULL_TREE, pre_shift, 0),\n+\t\t       build_int_cst (NULL_TREE, pre_shift),\n \t\t       tquotient, 0);\n \t\t  }\n \t\telse\n@@ -3845,7 +3836,7 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t      {\n \t\t\tt1 = expand_shift\n \t\t\t  (RSHIFT_EXPR, compute_mode, op0,\n-\t\t\t   build_int_cst (NULL_TREE, size - 1, 0),\n+\t\t\t   build_int_cst (NULL_TREE, size - 1),\n \t\t\t   NULL_RTX, 0);\n \t\t\tt2 = expand_binop (compute_mode, xor_optab, op0, t1,\n \t\t\t\t\t   NULL_RTX, 0, OPTAB_WIDEN);\n@@ -3859,7 +3850,7 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t\t  {\n \t\t\t    t4 = expand_shift\n \t\t\t      (RSHIFT_EXPR, compute_mode, t3,\n-\t\t\t       build_int_cst (NULL_TREE, post_shift, 0),\n+\t\t\t       build_int_cst (NULL_TREE, post_shift),\n \t\t\t       NULL_RTX, 1);\n \t\t\t    quotient = expand_binop (compute_mode, xor_optab,\n \t\t\t\t\t\t     t4, t1, tquotient, 0,\n@@ -3877,7 +3868,7 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t\t\t   0, OPTAB_WIDEN);\n \t\tnsign = expand_shift\n \t\t  (RSHIFT_EXPR, compute_mode, t2,\n-\t\t   build_int_cst (NULL_TREE, size - 1, 0),\n+\t\t   build_int_cst (NULL_TREE, size - 1),\n \t\t   NULL_RTX, 0);\n \t\tt3 = force_operand (gen_rtx_MINUS (compute_mode, t1, nsign),\n \t\t\t\t    NULL_RTX);\n@@ -3992,8 +3983,7 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\trtx t1, t2, t3;\n \t\tunsigned HOST_WIDE_INT d = INTVAL (op1);\n \t\tt1 = expand_shift (RSHIFT_EXPR, compute_mode, op0,\n-\t\t\t\t   build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t  floor_log2 (d), 0),\n+\t\t\t\t   build_int_cst (NULL_TREE, floor_log2 (d)),\n \t\t\t\t   tquotient, 1);\n \t\tt2 = expand_binop (compute_mode, and_optab, op0,\n \t\t\t\t   GEN_INT (d - 1),\n@@ -4091,8 +4081,7 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\trtx t1, t2, t3;\n \t\tunsigned HOST_WIDE_INT d = INTVAL (op1);\n \t\tt1 = expand_shift (RSHIFT_EXPR, compute_mode, op0,\n-\t\t\t\t   build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t  floor_log2 (d), 0),\n+\t\t\t\t   build_int_cst (NULL_TREE, floor_log2 (d)),\n \t\t\t\t   tquotient, 0);\n \t\tt2 = expand_binop (compute_mode, and_optab, op0,\n \t\t\t\t   GEN_INT (d - 1),\n@@ -4214,7 +4203,7 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t    pre_shift = floor_log2 (d & -d);\n \t    ml = invert_mod2n (d >> pre_shift, size);\n \t    t1 = expand_shift (RSHIFT_EXPR, compute_mode, op0,\n-\t\t\t       build_int_cst (NULL_TREE, pre_shift, 0),\n+\t\t\t       build_int_cst (NULL_TREE, pre_shift),\n \t\t\t       NULL_RTX, unsignedp);\n \t    quotient = expand_mult (compute_mode, t1,\n \t\t\t\t    gen_int_mode (ml, compute_mode),\n@@ -4249,7 +4238,7 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t      }\n \t    tem = plus_constant (op1, -1);\n \t    tem = expand_shift (RSHIFT_EXPR, compute_mode, tem,\n-\t\t\t\tbuild_int_cst (NULL_TREE, 1, 0),\n+\t\t\t\tbuild_int_cst (NULL_TREE, 1),\n \t\t\t\tNULL_RTX, 1);\n \t    do_cmp_and_jump (remainder, tem, LEU, compute_mode, label);\n \t    expand_inc (quotient, const1_rtx);\n@@ -4275,13 +4264,13 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t    abs_rem = expand_abs (compute_mode, remainder, NULL_RTX, 1, 0);\n \t    abs_op1 = expand_abs (compute_mode, op1, NULL_RTX, 1, 0);\n \t    tem = expand_shift (LSHIFT_EXPR, compute_mode, abs_rem,\n-\t\t\t\tbuild_int_cst (NULL_TREE, 1, 0),\n+\t\t\t\tbuild_int_cst (NULL_TREE, 1),\n \t\t\t\tNULL_RTX, 1);\n \t    do_cmp_and_jump (tem, abs_op1, LTU, compute_mode, label);\n \t    tem = expand_binop (compute_mode, xor_optab, op0, op1,\n \t\t\t\tNULL_RTX, 0, OPTAB_WIDEN);\n \t    mask = expand_shift (RSHIFT_EXPR, compute_mode, tem,\n-\t\t\t\t build_int_cst (NULL_TREE, size - 1, 0),\n+\t\t\t\t build_int_cst (NULL_TREE, size - 1),\n \t\t\t\t NULL_RTX, 0);\n \t    tem = expand_binop (compute_mode, xor_optab, mask, const1_rtx,\n \t\t\t\tNULL_RTX, 0, OPTAB_WIDEN);\n@@ -4434,14 +4423,15 @@ make_tree (tree type, rtx x)\n \t\t     < HOST_BITS_PER_WIDE_INT)))\n \t  hi = -1;\n       \n-\tt = build_int_cst (type, INTVAL (x), hi);\n+\tt = build_int_cst_wide (type, INTVAL (x), hi);\n \t\n \treturn t;\n       }\n       \n     case CONST_DOUBLE:\n       if (GET_MODE (x) == VOIDmode)\n-\tt = build_int_cst (type, CONST_DOUBLE_LOW (x), CONST_DOUBLE_HIGH (x));\n+\tt = build_int_cst_wide (type,\n+\t\t\t\tCONST_DOUBLE_LOW (x), CONST_DOUBLE_HIGH (x));\n       else\n \t{\n \t  REAL_VALUE_TYPE d;"}, {"sha": "b98986447f45cd9fc04944cbd2abd59af874784a", "filename": "gcc/expr.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -648,7 +648,7 @@ convert_move (rtx to, rtx from, int unsignedp)\n \t     Generate what we need with\tshifts.  */\n \t  shift_amount = build_int_cst (NULL_TREE,\n \t\t\t\t\tGET_MODE_BITSIZE (to_mode)\n-\t\t\t\t\t- GET_MODE_BITSIZE (from_mode), 0);\n+\t\t\t\t\t- GET_MODE_BITSIZE (from_mode));\n \t  from = gen_lowpart (to_mode, force_reg (from_mode, from));\n \t  tmp = expand_shift (LSHIFT_EXPR, to_mode, from, shift_amount,\n \t\t\t      to, unsignedp);\n@@ -1703,8 +1703,7 @@ emit_group_load (rtx dst, rtx orig_src, tree type ATTRIBUTE_UNUSED, int ssize)\n \n       if (shift)\n \ttmps[i] = expand_shift (LSHIFT_EXPR, mode, tmps[i],\n-\t\t\t\tbuild_int_cst (NULL_TREE,\n-\t\t\t\t\t       shift, 0), tmps[i], 0);\n+\t\t\t\tbuild_int_cst (NULL_TREE, shift), tmps[i], 0);\n     }\n \n   /* Copy the extracted pieces into the proper (probable) hard regs.  */\n@@ -1815,8 +1814,8 @@ emit_group_store (rtx orig_dst, rtx src, tree type ATTRIBUTE_UNUSED, int ssize)\n \t    {\n \t      int shift = (bytelen - (ssize - bytepos)) * BITS_PER_UNIT;\n \t      tmps[i] = expand_shift (RSHIFT_EXPR, mode, tmps[i],\n-\t\t\t\t      build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t     shift, 0), tmps[i], 0);\n+\t\t\t\t      build_int_cst (NULL_TREE, shift),\n+\t\t\t\t      tmps[i], 0);\n \t    }\n \t  bytelen = ssize - bytepos;\n \t}\n@@ -3642,7 +3641,7 @@ expand_assignment (tree to, tree from, int want_value)\n \t\t  binop = xor_optab;\n \t\t}\n \t      value = expand_shift (LSHIFT_EXPR, GET_MODE (str_rtx), value,\n-\t\t\t\t    build_int_cst (NULL_TREE,bitpos1, 0),\n+\t\t\t\t    build_int_cst (NULL_TREE, bitpos1),\n \t\t\t\t    NULL_RTX, 1);\n \t      result = expand_binop (GET_MODE (str_rtx), binop, str_rtx,\n \t\t\t\t     value, str_rtx, 1, OPTAB_WIDEN);\n@@ -4538,7 +4537,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\tvalue\n \t\t  = fold (build2 (LSHIFT_EXPR, type, value,\n \t\t\t\t  build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t BITS_PER_WORD - bitsize, 0)));\n+\t\t\t\t\t\t BITS_PER_WORD - bitsize)));\n \t      bitsize = BITS_PER_WORD;\n \t      mode = word_mode;\n \t    }\n@@ -5274,7 +5273,7 @@ store_field (rtx target, HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n \t\t\t\t   NULL_RTX);\n \n \t      count = build_int_cst (NULL_TREE,\n-\t\t\t\t     GET_MODE_BITSIZE (tmode) - bitsize, 0);\n+\t\t\t\t     GET_MODE_BITSIZE (tmode) - bitsize);\n \t      temp = expand_shift (LSHIFT_EXPR, tmode, temp, count, 0, 0);\n \t      return expand_shift (RSHIFT_EXPR, tmode, temp, count, 0, 0);\n \t    }\n@@ -6767,8 +6766,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t\t      {\n \t\t\ttree count\n \t\t\t  = build_int_cst (NULL_TREE,\n-\t\t\t\t\t   GET_MODE_BITSIZE (imode) - bitsize,\n-\t\t\t\t\t   0);\n+\t\t\t\t\t   GET_MODE_BITSIZE (imode) - bitsize);\n \n \t\t\top0 = expand_shift (LSHIFT_EXPR, imode, op0, count,\n \t\t\t\t\t    target, 0);\n@@ -8234,7 +8232,7 @@ reduce_to_bit_field_precision (rtx exp, rtx target, tree type)\n   else\n     {\n       tree count = build_int_cst (NULL_TREE,\n-\t\t\t\t  GET_MODE_BITSIZE (GET_MODE (exp)) - prec, 0);\n+\t\t\t\t  GET_MODE_BITSIZE (GET_MODE (exp)) - prec);\n       exp = expand_shift (LSHIFT_EXPR, GET_MODE (exp), exp, count, target, 0);\n       return expand_shift (RSHIFT_EXPR, GET_MODE (exp), exp, count, target, 0);\n     }"}, {"sha": "1c8c401d3a0eb98020ab5fd8431b7cfedce6f66a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 29, "deletions": 30, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -268,7 +268,7 @@ force_fit_type (tree t, int overflowable,\n   if (overflowed || overflowed_const\n       || low != TREE_INT_CST_LOW (t) || high != TREE_INT_CST_HIGH (t))\n     {\n-      t = build_int_cst (TREE_TYPE (t), low, high);\n+      t = build_int_cst_wide (TREE_TYPE (t), low, high);\n       \n       if (overflowed\n \t  || overflowable < 0\n@@ -1430,7 +1430,7 @@ int_const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n       abort ();\n     }\n \n-  t = build_int_cst (TREE_TYPE (arg1), low, hi);\n+  t = build_int_cst_wide (TREE_TYPE (arg1), low, hi);\n \n   if (notrunc)\n     {\n@@ -1793,8 +1793,8 @@ fold_convert_const (enum tree_code code, tree type, tree arg1)\n \n \t  /* Given an integer constant, make new constant with new type,\n \t     appropriately sign-extended or truncated.  */\n-\t  t = build_int_cst (type, TREE_INT_CST_LOW (arg1),\n-\t\t\t     TREE_INT_CST_HIGH (arg1));\n+\t  t = build_int_cst_wide (type, TREE_INT_CST_LOW (arg1),\n+\t\t\t\t  TREE_INT_CST_HIGH (arg1));\n \n \t  t = force_fit_type (t,\n \t\t\t      /* Don't set the overflow when\n@@ -1885,7 +1885,7 @@ fold_convert_const (enum tree_code code, tree type, tree arg1)\n \t  if (! overflow)\n \t    REAL_VALUE_TO_INT (&low, &high, r);\n \n-\t  t = build_int_cst (type, low, high);\n+\t  t = build_int_cst_wide (type, low, high);\n \n \t  t = force_fit_type (t, -1, overflow | TREE_OVERFLOW (arg1),\n \t\t\t      TREE_CONSTANT_OVERFLOW (arg1));\n@@ -2960,7 +2960,7 @@ invert_truthvalue (tree arg)\n     {\n     case INTEGER_CST:\n       return fold_convert (type,\n-\t\t\t   build_int_cst (NULL_TREE, integer_zerop (arg), 0));\n+\t\t\t   build_int_cst (NULL_TREE, integer_zerop (arg)));\n \n     case TRUTH_AND_EXPR:\n       return build2 (TRUTH_OR_EXPR, type,\n@@ -3195,7 +3195,7 @@ optimize_bit_field_compare (enum tree_code code, tree compare_type,\n     lbitpos = nbitsize - lbitsize - lbitpos;\n \n   /* Make the mask to be used against the extracted field.  */\n-  mask = build_int_cst (unsigned_type, ~0, ~0);\n+  mask = build_int_cst (unsigned_type, -1);\n   mask = force_fit_type (mask, 0, false, false);\n   mask = fold_convert (unsigned_type, mask);\n   mask = const_binop (LSHIFT_EXPR, mask, size_int (nbitsize - lbitsize), 0);\n@@ -3351,7 +3351,7 @@ decode_field_reference (tree exp, HOST_WIDE_INT *pbitsize,\n   unsigned_type = lang_hooks.types.type_for_size (*pbitsize, 1);\n   precision = TYPE_PRECISION (unsigned_type);\n \n-  mask = build_int_cst (unsigned_type, ~0, ~0);\n+  mask = build_int_cst (unsigned_type, -1);\n   mask = force_fit_type (mask, 0, false, false);\n   \n   mask = const_binop (LSHIFT_EXPR, mask, size_int (precision - *pbitsize), 0);\n@@ -3377,7 +3377,7 @@ all_ones_mask_p (tree mask, int size)\n   unsigned int precision = TYPE_PRECISION (type);\n   tree tmask;\n \n-  tmask = build_int_cst (lang_hooks.types.signed_type (type), ~0, ~0);\n+  tmask = build_int_cst (lang_hooks.types.signed_type (type), -1);\n   tmask = force_fit_type (tmask, 0, false, false);\n   \n   return\n@@ -5365,7 +5365,7 @@ constant_boolean_node (int value, tree type)\n     return lang_hooks.truthvalue_conversion (value ? integer_one_node\n \t\t\t\t\t\t   : integer_zero_node);\n   else\n-    return build_int_cst (type, value, 0);\n+    return build_int_cst (type, value);\n }\n \n /* Transform `a + (b ? x : y)' into `b ? (a + x) : (a + y)'.\n@@ -5698,7 +5698,7 @@ fold_div_compare (enum tree_code code, tree type, tree arg0, tree arg1)\n \t\t\t TREE_INT_CST_HIGH (arg01),\n \t\t\t TREE_INT_CST_LOW (arg1),\n \t\t\t TREE_INT_CST_HIGH (arg1), &lpart, &hpart);\n-  prod = build_int_cst (TREE_TYPE (arg00), lpart, hpart);\n+  prod = build_int_cst_wide (TREE_TYPE (arg00), lpart, hpart);\n   prod = force_fit_type (prod, -1, overflow, false);\n \n   if (TYPE_UNSIGNED (TREE_TYPE (arg0)))\n@@ -5712,7 +5712,7 @@ fold_div_compare (enum tree_code code, tree type, tree arg0, tree arg1)\n \t\t\t     TREE_INT_CST_LOW (tmp),\n \t\t\t     TREE_INT_CST_HIGH (tmp),\n \t\t\t     &lpart, &hpart);\n-      hi = build_int_cst (TREE_TYPE (arg00), lpart, hpart);\n+      hi = build_int_cst_wide (TREE_TYPE (arg00), lpart, hpart);\n       hi = force_fit_type (hi, -1, overflow | TREE_OVERFLOW (prod),\n \t\t\t   TREE_CONSTANT_OVERFLOW (prod));\n     }\n@@ -6620,7 +6620,7 @@ fold (tree expr)\n \t\t    {\n \t\t      alt0 = fold (build2 (MULT_EXPR, type, arg00,\n \t\t\t\t\t   build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t\t  int01 / int11, 0)));\n+\t\t\t\t\t\t\t  int01 / int11)));\n \t\t      alt1 = arg10;\n \t\t      same = arg11;\n \t\t    }\n@@ -7254,7 +7254,7 @@ fold (tree expr)\n       if (TREE_CODE (arg0) == BIT_NOT_EXPR\n \t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0))\n \t{\n-\t  t1 = build_int_cst (type, -1, -1);\n+\t  t1 = build_int_cst (type, -1);\n \t  t1 = force_fit_type (t1, 0, false, false);\n \t  return omit_one_operand (type, t1, arg1);\n \t}\n@@ -7263,7 +7263,7 @@ fold (tree expr)\n       if (TREE_CODE (arg1) == BIT_NOT_EXPR\n \t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0))\n \t{\n-\t  t1 = build_int_cst (type, -1, -1);\n+\t  t1 = build_int_cst (type, -1);\n \t  t1 = force_fit_type (t1, 0, false, false);\n \t  return omit_one_operand (type, t1, arg0);\n \t}\n@@ -7303,7 +7303,7 @@ fold (tree expr)\n       if (TREE_CODE (arg0) == BIT_NOT_EXPR\n \t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0))\n \t{\n-\t  t1 = build_int_cst (type, -1, -1);\n+\t  t1 = build_int_cst (type, -1);\n \t  t1 = force_fit_type (t1, 0, false, false);\n \t  return omit_one_operand (type, t1, arg1);\n \t}\n@@ -7312,7 +7312,7 @@ fold (tree expr)\n       if (TREE_CODE (arg1) == BIT_NOT_EXPR\n \t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0))\n \t{\n-\t  t1 = build_int_cst (type, -1, -1);\n+\t  t1 = build_int_cst (type, -1);\n \t  t1 = force_fit_type (t1, 0, false, false);\n \t  return omit_one_operand (type, t1, arg0);\n \t}\n@@ -7632,7 +7632,7 @@ fold (tree expr)\n \t      low = ((unsigned HOST_WIDE_INT) 1 << l) - 1;\n \t    }\n \n-\t  mask = build_int_cst (type, low, high);\n+\t  mask = build_int_cst_wide (type, low, high);\n \t  return fold (build2 (BIT_AND_EXPR, type,\n \t\t\t       fold_convert (type, arg0), mask));\n \t}\n@@ -7691,7 +7691,7 @@ fold (tree expr)\n       if (code == LROTATE_EXPR && TREE_CODE (arg1) == INTEGER_CST)\n \t{\n \t  tree tem = build_int_cst (NULL_TREE,\n-\t\t\t\t    GET_MODE_BITSIZE (TYPE_MODE (type)), 0);\n+\t\t\t\t    GET_MODE_BITSIZE (TYPE_MODE (type)));\n \t  tem = fold_convert (TREE_TYPE (arg1), tem);\n \t  tem = const_binop (MINUS_EXPR, tem, arg1, 0);\n \t  return fold (build2 (RROTATE_EXPR, type, arg0, tem));\n@@ -8109,8 +8109,7 @@ fold (tree expr)\n \t\treturn omit_one_operand (type, folded_compare, varop);\n \n \t      shift = build_int_cst (NULL_TREE,\n-\t\t\t\t     TYPE_PRECISION (TREE_TYPE (varop)) - size,\n-\t\t\t\t     0);\n+\t\t\t\t     TYPE_PRECISION (TREE_TYPE (varop)) - size);\n \t      shift = fold_convert (TREE_TYPE (varop), shift);\n \t      newconst = fold (build2 (LSHIFT_EXPR, TREE_TYPE (varop),\n \t\t\t\t       newconst, shift));\n@@ -10292,7 +10291,7 @@ fold_read_from_constant_string (tree exp)\n \treturn fold_convert (TREE_TYPE (exp),\n \t\t\t     build_int_cst (NULL_TREE,\n \t\t\t\t\t    (TREE_STRING_POINTER (string)\n-\t\t\t\t\t     [TREE_INT_CST_LOW (index)]), 0));\n+\t\t\t\t\t     [TREE_INT_CST_LOW (index)])));\n     }\n   return NULL;\n }\n@@ -10314,7 +10313,7 @@ fold_negate_const (tree arg0, tree type)\n       int overflow = neg_double (TREE_INT_CST_LOW (arg0),\n \t\t\t\t TREE_INT_CST_HIGH (arg0),\n \t\t\t\t &low, &high);\n-      t = build_int_cst (type, low, high);\n+      t = build_int_cst_wide (type, low, high);\n       t = force_fit_type (t, 1,\n \t\t\t  (overflow | TREE_OVERFLOW (arg0))\n \t\t\t  && !TYPE_UNSIGNED (type),\n@@ -10358,7 +10357,7 @@ fold_abs_const (tree arg0, tree type)\n \t  int overflow = neg_double (TREE_INT_CST_LOW (arg0),\n \t\t\t\t     TREE_INT_CST_HIGH (arg0),\n \t\t\t\t     &low, &high);\n-\t  t = build_int_cst (type, low, high);\n+\t  t = build_int_cst_wide (type, low, high);\n \t  t = force_fit_type (t, -1, overflow | TREE_OVERFLOW (arg0),\n \t\t\t      TREE_CONSTANT_OVERFLOW (arg0));\n \t  return t;\n@@ -10389,9 +10388,9 @@ fold_not_const (tree arg0, tree type)\n \n   if (TREE_CODE (arg0) == INTEGER_CST)\n     {\n-      t = build_int_cst (type,\n-\t\t\t ~ TREE_INT_CST_LOW (arg0),\n-\t\t\t ~ TREE_INT_CST_HIGH (arg0));\n+      t = build_int_cst_wide (type,\n+\t\t\t      ~ TREE_INT_CST_LOW (arg0),\n+\t\t\t      ~ TREE_INT_CST_HIGH (arg0));\n       t = force_fit_type (t, 0, TREE_OVERFLOW (arg0),\n \t\t\t  TREE_CONSTANT_OVERFLOW (arg0));\n     }\n@@ -10661,9 +10660,9 @@ round_up (tree value, int divisor)\n     {\n       tree t;\n       \n-      t = build_int_cst (TREE_TYPE (value), divisor - 1, 0);\n+      t = build_int_cst (TREE_TYPE (value), divisor - 1);\n       value = size_binop (PLUS_EXPR, value, t);\n-      t = build_int_cst (TREE_TYPE (value), -divisor, -1);\n+      t = build_int_cst (TREE_TYPE (value), -divisor);\n       value = size_binop (BIT_AND_EXPR, value, t);\n     }\n   else\n@@ -10708,7 +10707,7 @@ round_down (tree value, int divisor)\n     {\n       tree t;\n       \n-      t = build_int_cst (TREE_TYPE (value), -divisor, -1);\n+      t = build_int_cst (TREE_TYPE (value), -divisor);\n       value = size_binop (BIT_AND_EXPR, value, t);\n     }\n   else"}, {"sha": "0d2f8b6a1b7237dc35d1f0b3cec3ca5d6e39696b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -1,3 +1,20 @@\n+2004-08-25  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* trans-array.c (gfc_trans_array_constructor_value): Adjust\n+\tbuild_int_cst calls.\n+\t* trans-const.c (gfc_build_string_const, gfc_init_constants,\n+\tgfc_conv_mpz_to_tree, gfc_conv_constant_to_tree): Likewise.\n+\t* trans-decl.c (gfc_get_symbol_decl, build_entry_thunks,\n+\tgfc_trans_entry_master_switch): Likewise.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_ibits,\n+\tgfc_conv_intrinsic_len, prepare_arg_info): Likewise.\n+\t* trans-io.c (add_case, set_error_locus,\n+\ttransfer_namelist_element, transfer_expr): Likewise.\n+\t* trans-stmt.c (gfc_trans_label_assign, gfc_trans_pause,\n+\tgfc_trans_stop, gfc_trans_character_select): Likewise.\n+\t* trans-types.c (gfc_init_types, gfc_get_dtype): Likewise.\n+\t* trans.c (gfc_trans_runtime_check): Likewise.\n+\n 2004-08-24  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* trans-decl.c, trans-types.c: Add and remove blank lines as \n@@ -22,7 +39,7 @@\n \n 2004-08-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n-\t* fortran/f95-lang.c (gfc_init_decl_processing): Adjust\n+\t* f95-lang.c (gfc_init_decl_processing): Adjust\n \tbuild_common_tree_nodes call.\n \n 2004-08-24  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>"}, {"sha": "f79ab1e6a748a275cbee5e17ce9053d60cddfb68", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -796,7 +796,7 @@ gfc_trans_array_constructor_value (stmtblock_t * pblock, tree type,\n \t\t  p = p->next;\n \t\t}\n \n-\t      bound = build_int_cst (NULL_TREE, n - 1, 0);\n+\t      bound = build_int_cst (NULL_TREE, n - 1);\n               /* Create an array type to hold them.  */\n \t      tmptype = build_range_type (gfc_array_index_type,\n \t\t\t\t\t  gfc_index_zero_node, bound);\n@@ -821,7 +821,7 @@ gfc_trans_array_constructor_value (stmtblock_t * pblock, tree type,\n \t      init = gfc_build_addr_expr (NULL, init);\n \n \t      size = TREE_INT_CST_LOW (TYPE_SIZE_UNIT (type));\n-\t      bound = build_int_cst (NULL_TREE, n * size, 0);\n+\t      bound = build_int_cst (NULL_TREE, n * size);\n \t      tmp = gfc_chainon_list (NULL_TREE, tmp);\n \t      tmp = gfc_chainon_list (tmp, init);\n \t      tmp = gfc_chainon_list (tmp, bound);"}, {"sha": "2f485a75951f96e67ee72ede1625f3667d5ff4c2", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -82,7 +82,7 @@ gfc_build_string_const (int length, const char *s)\n   tree len;\n \n   str = build_string (length, s);\n-  len = build_int_cst (NULL_TREE, length, 0);\n+  len = build_int_cst (NULL_TREE, length);\n   TREE_TYPE (str) =\n     build_array_type (gfc_character1_type_node,\n \t\t      build_range_type (gfc_strlen_type_node,\n@@ -146,7 +146,7 @@ gfc_init_constants (void)\n   int n;\n \n   for (n = 0; n <= GFC_MAX_DIMENSIONS; n++)\n-    gfc_rank_cst[n] = build_int_cst (gfc_array_index_type, n, 0);\n+    gfc_rank_cst[n] = build_int_cst (gfc_array_index_type, n);\n \n   gfc_strconst_bounds = gfc_build_string_const (21, \"Array bound mismatch\");\n \n@@ -315,7 +315,7 @@ gfc_conv_constant_to_tree (gfc_expr * expr)\n       return gfc_conv_mpfr_to_tree (expr->value.real, expr->ts.kind);\n \n     case BT_LOGICAL:\n-      return build_int_cst (NULL_TREE, expr->value.logical, 0);\n+      return build_int_cst (NULL_TREE, expr->value.logical);\n \n     case BT_COMPLEX:\n       {"}, {"sha": "7188905881470e3d93f3611c0d531a0398f17e1a", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -790,7 +790,7 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n           ASSIGN_ADDR can not be used. Equal -1 means that ASSIGN_ADDR is the\n           target label's address. Other value is the length of format string\n           and ASSIGN_ADDR is the address of format string.  */\n-      DECL_INITIAL (length) = build_int_cst (NULL_TREE, -2, -1);\n+      DECL_INITIAL (length) = build_int_cst (NULL_TREE, -2);\n     }\n \n   if (sym->ts.type == BT_CHARACTER)\n@@ -1346,7 +1346,7 @@ build_entry_thunks (gfc_namespace * ns)\n       gfc_start_block (&body);\n \n       /* Pass extra parameter identifying this entry point.  */\n-      tmp = build_int_cst (gfc_array_index_type, el->id, 0);\n+      tmp = build_int_cst (gfc_array_index_type, el->id);\n       args = tree_cons (NULL_TREE, tmp, NULL_TREE);\n       string_args = NULL_TREE;\n \n@@ -2113,7 +2113,7 @@ gfc_trans_entry_master_switch (gfc_entry_list * el)\n       /* Add the case label.  */\n       label = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);\n       DECL_CONTEXT (label) = current_function_decl;\n-      val = build_int_cst (gfc_array_index_type, el->id, 0);\n+      val = build_int_cst (gfc_array_index_type, el->id);\n       tmp = build_v (CASE_LABEL_EXPR, val, NULL_TREE, label);\n       gfc_add_expr_to_block (&block, tmp);\n       "}, {"sha": "cfe305136f2edf0a9872891760962269efee96eb", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -1760,7 +1760,7 @@ gfc_conv_intrinsic_ibits (gfc_se * se, gfc_expr * expr)\n   arg2 = TREE_VALUE (arg2);\n   type = TREE_TYPE (arg);\n \n-  mask = build_int_cst (NULL_TREE, -1, ~(unsigned HOST_WIDE_INT) 0);\n+  mask = build_int_cst (NULL_TREE, -1);\n   mask = build (LSHIFT_EXPR, type, mask, arg3);\n   mask = build1 (BIT_NOT_EXPR, type, mask);\n \n@@ -1884,7 +1884,7 @@ gfc_conv_intrinsic_len (gfc_se * se, gfc_expr * expr)\n   switch (arg->expr_type)\n     {\n     case EXPR_CONSTANT:\n-      len = build_int_cst (NULL_TREE, arg->value.character.length, 0);\n+      len = build_int_cst (NULL_TREE, arg->value.character.length);\n       break;\n \n     default:\n@@ -2329,9 +2329,9 @@ void prepare_arg_info (gfc_se * se, gfc_expr * expr,\n \n    /* Caculate the numbers of bits of exponent, fraction and word  */\n    n = gfc_validate_kind (a1->ts.type, a1->ts.kind);\n-   tmp = build_int_cst (NULL_TREE, gfc_real_kinds[n].digits - 1, 0);\n+   tmp = build_int_cst (NULL_TREE, gfc_real_kinds[n].digits - 1);\n    rcs->fdigits = convert (masktype, tmp);\n-   wbits = build_int_cst (NULL_TREE, TYPE_PRECISION (rcs->type) - 1, 0);\n+   wbits = build_int_cst (NULL_TREE, TYPE_PRECISION (rcs->type) - 1);\n    wbits = convert (masktype, wbits);\n    rcs->edigits = fold (build (MINUS_EXPR, masktype, wbits, tmp));\n "}, {"sha": "3d04332bd3148b120ab703c1abf7f61f9203b038", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -451,7 +451,7 @@ add_case (int label_value, gfc_st_label * label, stmtblock_t * body)\n   if (label == NULL)\n     return;\t\t\t/* No label, no case */\n \n-  value = build_int_cst (NULL_TREE, label_value, 0);\n+  value = build_int_cst (NULL_TREE, label_value);\n \n   /* Make a backend label for this case.  */\n   tmp = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);\n@@ -524,7 +524,7 @@ set_error_locus (stmtblock_t * block, locus * where)\n   gfc_add_modify_expr (block, locus_file, tmp);\n \n   line = where->lb->linenum;\n-  gfc_add_modify_expr (block, locus_line, build_int_cst (NULL_TREE, line, 0));\n+  gfc_add_modify_expr (block, locus_line, build_int_cst (NULL_TREE, line));\n }\n \n \n@@ -896,7 +896,7 @@ transfer_namelist_element (stmtblock_t * block, gfc_typespec * ts, tree addr_exp\n   args = gfc_chainon_list (NULL_TREE, addr_expr);\n   args = gfc_chainon_list (args, string);\n   args = gfc_chainon_list (args, string_length);\n-  arg2 = build_int_cst (gfc_array_index_type, ts->kind, 0);\n+  arg2 = build_int_cst (gfc_array_index_type, ts->kind);\n   args = gfc_chainon_list (args,arg2);\n \n   switch (ts->type)\n@@ -1152,22 +1152,22 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr)\n   switch (ts->type)\n     {\n     case BT_INTEGER:\n-      arg2 = build_int_cst (NULL_TREE, kind, 0);\n+      arg2 = build_int_cst (NULL_TREE, kind);\n       function = iocall_x_integer;\n       break;\n \n     case BT_REAL:\n-      arg2 = build_int_cst (NULL_TREE, kind, 0);\n+      arg2 = build_int_cst (NULL_TREE, kind);\n       function = iocall_x_real;\n       break;\n \n     case BT_COMPLEX:\n-      arg2 = build_int_cst (NULL_TREE, kind, 0);\n+      arg2 = build_int_cst (NULL_TREE, kind);\n       function = iocall_x_complex;\n       break;\n \n     case BT_LOGICAL:\n-      arg2 = build_int_cst (NULL_TREE, kind, 0);\n+      arg2 = build_int_cst (NULL_TREE, kind);\n       function = iocall_x_logical;\n       break;\n "}, {"sha": "3b891072e1e81b9b172fb68a22991aea708c9cdc", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -113,7 +113,7 @@ gfc_trans_label_assign (gfc_code * code)\n     {\n       label_str = code->label->format->value.character.string;\n       label_len = code->label->format->value.character.length;\n-      len_tree = build_int_cst (NULL_TREE, label_len, 0);\n+      len_tree = build_int_cst (NULL_TREE, label_len);\n       label_tree = gfc_build_string_const (label_len + 1, label_str);\n       label_tree = gfc_build_addr_expr (pchar_type_node, label_tree);\n     }\n@@ -287,7 +287,7 @@ gfc_trans_pause (gfc_code * code)\n \n   if (code->expr == NULL)\n     {\n-      tmp = build_int_cst (gfc_int4_type_node, code->ext.stop_code, 0);\n+      tmp = build_int_cst (gfc_int4_type_node, code->ext.stop_code);\n       args = gfc_chainon_list (NULL_TREE, tmp);\n       fndecl = gfor_fndecl_pause_numeric;\n     }\n@@ -326,7 +326,7 @@ gfc_trans_stop (gfc_code * code)\n \n   if (code->expr == NULL)\n     {\n-      tmp = build_int_cst (gfc_int4_type_node, code->ext.stop_code, 0);\n+      tmp = build_int_cst (gfc_int4_type_node, code->ext.stop_code);\n       args = gfc_chainon_list (NULL_TREE, tmp);\n       fndecl = gfor_fndecl_stop_numeric;\n     }\n@@ -1100,7 +1100,7 @@ gfc_trans_character_select (gfc_code *code)\n     }\n \n   type = build_array_type (select_struct, build_index_type\n-\t\t\t   (build_int_cst (NULL_TREE, n - 1, 0)));\n+\t\t\t   (build_int_cst (NULL_TREE, n - 1)));\n \n   init = build1 (CONSTRUCTOR, type, nreverse(init));\n   TREE_CONSTANT (init) = 1;\n@@ -1118,7 +1118,7 @@ gfc_trans_character_select (gfc_code *code)\n   init = gfc_build_addr_expr (pvoid_type_node, init);\n   args = gfc_chainon_list (NULL_TREE, init);\n \n-  tmp = build_int_cst (NULL_TREE, n, 0);\n+  tmp = build_int_cst (NULL_TREE, n);\n   args = gfc_chainon_list (args, tmp);\n \n   tmp = gfc_build_addr_expr (pvoid_type_node, end_label);"}, {"sha": "6f963159a0af5906b15835b7c75de9d23a9634ba", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -168,13 +168,14 @@ gfc_init_types (void)\n       hi = 0;\n       lo = (~(unsigned HOST_WIDE_INT) 0) >> (sizeof (HOST_WIDE_INT) * 8 - n);\n     }\n-  gfc_max_array_element_size = build_int_cst (long_unsigned_type_node, lo, hi);\n+  gfc_max_array_element_size\n+    = build_int_cst_wide (long_unsigned_type_node, lo, hi);\n \n   size_type_node = gfc_array_index_type;\n   boolean_type_node = gfc_get_logical_type (gfc_default_logical_kind ());\n \n-  boolean_true_node = build_int_cst (boolean_type_node, 1, 0);\n-  boolean_false_node = build_int_cst (boolean_type_node, 0, 0);\n+  boolean_true_node = build_int_cst (boolean_type_node, 1);\n+  boolean_false_node = build_int_cst (boolean_type_node, 0);\n }\n \n /* Get a type node for an integer kind.  */\n@@ -597,11 +598,11 @@ gfc_get_dtype (tree type, int rank)\n \n       i += TREE_INT_CST_LOW (size) << GFC_DTYPE_SIZE_SHIFT;\n     }\n-  dtype = build_int_cst (gfc_array_index_type, i, 0);\n+  dtype = build_int_cst (gfc_array_index_type, i);\n \n   if (size && !INTEGER_CST_P (size))\n     {\n-      tmp = build_int_cst (gfc_array_index_type, GFC_DTYPE_SIZE_SHIFT, 0);\n+      tmp = build_int_cst (gfc_array_index_type, GFC_DTYPE_SIZE_SHIFT);\n       tmp  = fold (build (LSHIFT_EXPR, gfc_array_index_type, size, tmp));\n       dtype = fold (build (PLUS_EXPR, gfc_array_index_type, tmp, dtype));\n     }"}, {"sha": "16ef85cf7803af38bb03dd2703b5ba2dfbf1df23", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -365,7 +365,7 @@ gfc_trans_runtime_check (tree cond, tree msg, stmtblock_t * pblock)\n   tmp = gfc_build_addr_expr (pchar_type_node, gfc_strconst_current_filename);\n   args = gfc_chainon_list (args, tmp);\n \n-  tmp = build_int_cst (NULL_TREE, input_line, 0);\n+  tmp = build_int_cst (NULL_TREE, input_line);\n   args = gfc_chainon_list (args, tmp);\n \n   tmp = gfc_build_function_call (gfor_fndecl_runtime_error, args);"}, {"sha": "e4147c01237676f443fb793ab41e26e7471e303d", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -2616,7 +2616,7 @@ assign_parm_setup_block (tree parm, struct assign_parm_data_one *data)\n \t      rtx reg = gen_rtx_REG (word_mode, REGNO (data->entry_parm));\n \n \t      x = expand_shift (LSHIFT_EXPR, word_mode, reg,\n-\t\t\t\tbuild_int_cst (NULL_TREE, by, 0),\n+\t\t\t\tbuild_int_cst (NULL_TREE, by),\n \t\t\t\tNULL_RTX, 1);\n \t      tem = change_address (mem, word_mode, 0);\n \t      emit_move_insn (tem, x);"}, {"sha": "9dd0fa57507116e440e08caee867c19064347445", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -1,6 +1,28 @@\n+2004-08-25  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* boehm.c (get_boehm_type_descriptor):  Adjust build_int_cst calls.\n+\t* class.c (build_utf8_ref, build_static_field_ref,\n+\tmake_field_value, make_method_value, get_dispatch_table,\n+\tmake_class_data, emit_symbol_table, emit_catch_table): Likewise.\n+\t* constants.c (get_tag_node, build_ref_from_constant_pool,\n+\tbuild_constants_constructor): Likewise.\n+\t* decl.c (java_init_decl_processing): Likewise.\n+\t* expr.c (build_java_array_length_access, build_newarray,\n+\texpand_java_multianewarray, expand_java_pushc, expand_iinc,\n+\tbuild_java_binop, build_field_ref, expand_java_add_case,\n+\texpand_java_call, build_known_method_ref, build_invokevirtual,\n+\tbuild_invokeinterface, build_jni_stub): Likewise.\n+\t* java-gimplify.c (java_gimplify_new_array_init): Likewise.\n+\t* jcf-parse.c (get_constant): Likewise.\n+\t* lex.c (do_java_lex): Likewise.\n+\t* parse.y (patch_binop, patch_unaryop, patch_cast,\n+\tbuild_newarray_node, patch_newarray): Likewise.\n+\t* resource.c (compile_resource_data): Likewise.\n+\t* typeck.c (build_prim_array_type): Likewise.\n+\n 2004-08-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n-\t* java/decl.c (java_init_decl_processing): Adjust\n+\t* decl.c (java_init_decl_processing): Adjust\n \tinitialize_sizetypes call.\n \n 2004-08-23  Nathan Sidwell  <nathan@codesourcery.com>"}, {"sha": "8b545904447220cd128041df37bdc154574b3915", "filename": "gcc/java/boehm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Fboehm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Fboehm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fboehm.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -206,13 +206,13 @@ get_boehm_type_descriptor (tree type)\n \t  last_set_index >>= 1;\n \t  ++count;\n \t}\n-      value = build_int_cst (value_type, low, high);\n+      value = build_int_cst_wide (value_type, low, high);\n     }\n   else if (! pointer_after_end)\n     {\n       /* Bottom two bits for bitmap mark type are 01.  */\n       set_bit (&low, &high, 0);\n-      value = build_int_cst (value_type, low, high);\n+      value = build_int_cst_wide (value_type, low, high);\n     }\n   else\n     {\n@@ -223,7 +223,7 @@ get_boehm_type_descriptor (tree type)\n \t    | DS_PROC)\n \t Here DS_PROC == 2.  */\n     procedure_object_descriptor:\n-      value = build_int_cst (value_type, 2, 0);\n+      value = build_int_cst (value_type, 2);\n     }\n \n   return value;"}, {"sha": "d88fbb158091ad2ca1463d1ee7689c1cf1d01405", "filename": "gcc/java/class.c", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -880,8 +880,8 @@ build_utf8_ref (tree name)\n   FINISH_RECORD (ctype);\n   START_RECORD_CONSTRUCTOR (cinit, ctype);\n   name_hash = hashUtf8String (name_ptr, name_len) & 0xFFFF;\n-  PUSH_FIELD_VALUE (cinit, \"hash\", build_int_cst (NULL_TREE, name_hash, 0));\n-  PUSH_FIELD_VALUE (cinit, \"length\", build_int_cst (NULL_TREE, name_len, 0));\n+  PUSH_FIELD_VALUE (cinit, \"hash\", build_int_cst (NULL_TREE, name_hash));\n+  PUSH_FIELD_VALUE (cinit, \"length\", build_int_cst (NULL_TREE, name_len));\n   string = build_string (name_len, name_ptr);\n   TREE_TYPE (string) = str_type;\n   PUSH_FIELD_VALUE (cinit, \"data\", string);\n@@ -1082,7 +1082,7 @@ build_static_field_ref (tree fdecl)\n     {\n       tree table_index \n \t= build_int_cst (NULL_TREE, get_symbol_table_index \n-\t\t\t (fdecl, &TYPE_ATABLE_METHODS (output_class)), 0);\n+\t\t\t (fdecl, &TYPE_ATABLE_METHODS (output_class)));\n       tree field_address\n \t= build4 (ARRAY_REF, build_pointer_type (TREE_TYPE (fdecl)), \n \t\t  TYPE_ATABLE_DECL (output_class), table_index,\n@@ -1114,7 +1114,7 @@ build_static_field_ref (tree fdecl)\n \t}\n       field_index *= int_size_in_bytes (field_type_node);\n       ref = fold (build2 (PLUS_EXPR, field_ptr_type_node,\n-\t\t\t  ref, build_int_cst (NULL_TREE, field_index, 0)));\n+\t\t\t  ref, build_int_cst (NULL_TREE, field_index)));\n       ref = build1 (INDIRECT_REF, field_type_node, ref);\n       ref = build3 (COMPONENT_REF, field_info_union_node,\n \t\t    ref, lookup_field (&field_type_node, info_ident),\n@@ -1268,7 +1268,7 @@ make_field_value (tree fdecl)\n   if (! resolved)\n     flags |= 0x8000 /* FIELD_UNRESOLVED_FLAG */;\n \n-  PUSH_FIELD_VALUE (finit, \"accflags\", build_int_cst (NULL_TREE, flags, 0));\n+  PUSH_FIELD_VALUE (finit, \"accflags\", build_int_cst (NULL_TREE, flags));\n   PUSH_FIELD_VALUE (finit, \"bsize\", TYPE_SIZE_UNIT (TREE_TYPE (fdecl)));\n \n   PUSH_FIELD_VALUE\n@@ -1303,7 +1303,7 @@ make_method_value (tree mdecl)\n   /* For interfaces, the index field contains the dispatch index. */\n   if (CLASS_INTERFACE (TYPE_NAME (class_decl)))\n     index = build_int_cst (NULL_TREE,\n-\t\t\t   get_interface_method_index (mdecl, class_decl), 0);\n+\t\t\t   get_interface_method_index (mdecl, class_decl));\n   else if (!flag_indirect_dispatch && get_method_index (mdecl) != NULL_TREE)\n     index = get_method_index (mdecl);\n   else\n@@ -1326,7 +1326,7 @@ make_method_value (tree mdecl)\n \t\t\t(IDENTIFIER_POINTER(signature),\n \t\t\t IDENTIFIER_LENGTH(signature)))));\n   }\n-  PUSH_FIELD_VALUE (minit, \"accflags\", build_int_cst (NULL_TREE, accflags, 0));\n+  PUSH_FIELD_VALUE (minit, \"accflags\", build_int_cst (NULL_TREE, accflags));\n   PUSH_FIELD_VALUE (minit, \"index\", index);\n   PUSH_FIELD_VALUE (minit, \"ncode\", code);\n \n@@ -1439,7 +1439,7 @@ get_dispatch_table (tree type, tree this_class_addr)\n \t    for (j = 0; j < TARGET_VTABLE_USES_DESCRIPTORS; ++j)\n \t      {\n \t\ttree fdesc = build2 (FDESC_EXPR, nativecode_ptr_type_node, \n-\t\t\t\t     method, build_int_cst (NULL_TREE, j, 0));\n+\t\t\t\t     method, build_int_cst (NULL_TREE, j));\n \t\tTREE_CONSTANT (fdesc) = 1;\n \t\tTREE_INVARIANT (fdesc) = 1;\n \t        list = tree_cons (NULL_TREE, fdesc, list);\n@@ -1553,8 +1553,7 @@ make_class_data (tree type)\n   /** Offset from start of virtual function table declaration\n       to where objects actually point at, following new g++ ABI. */\n   tree dtable_start_offset = build_int_cst (NULL_TREE,\n-\t\t\t\t\t    2 * POINTER_SIZE / BITS_PER_UNIT,\n-\t\t\t\t\t    0);\n+\t\t\t\t\t    2 * POINTER_SIZE / BITS_PER_UNIT);\n \n   this_class_addr = build_class_ref (type);\n   decl = TREE_OPERAND (this_class_addr, 0);\n@@ -1668,7 +1667,7 @@ make_class_data (tree type)\n   else\n     {\n       int super_index = alloc_class_constant (super);\n-      super = build_int_cst (ptr_type_node, super_index, 0);\n+      super = build_int_cst (ptr_type_node, super_index);\n     }\n \n   /* Build and emit the array of implemented interfaces. */\n@@ -1697,7 +1696,7 @@ make_class_data (tree type)\n \t  else\n \t    {\n \t      int int_index = alloc_class_constant (iclass);\n-\t      index = build_int_cst (ptr_type_node, int_index, 0);\n+\t      index = build_int_cst (ptr_type_node, int_index);\n \t    }\n \t  init = tree_cons (NULL_TREE, index, init); \n \t}\n@@ -1743,15 +1742,15 @@ make_class_data (tree type)\n   PUSH_FIELD_VALUE (cons, \"name\", build_utf8_ref (DECL_NAME (type_decl)));\n   PUSH_FIELD_VALUE (cons, \"accflags\",\n \t\t    build_int_cst (NULL_TREE,\n-\t\t\t\t   get_access_flags_from_decl (type_decl), 0));\n+\t\t\t\t   get_access_flags_from_decl (type_decl)));\n \n   PUSH_FIELD_VALUE (cons, \"superclass\", \n \t\t    CLASS_INTERFACE (type_decl) ? null_pointer_node : super);\n   PUSH_FIELD_VALUE (cons, \"constants\", constant_pool_constructor);\n   PUSH_FIELD_VALUE (cons, \"methods\",\n \t\t    build1 (ADDR_EXPR, method_ptr_type_node, methods_decl));\n   PUSH_FIELD_VALUE (cons, \"method_count\",\n-\t\t    build_int_cst (NULL_TREE, method_count, 0));\n+\t\t    build_int_cst (NULL_TREE, method_count));\n \n   if (flag_indirect_dispatch)\n     PUSH_FIELD_VALUE (cons, \"vtable_method_count\", integer_minus_one_node);\n@@ -1763,9 +1762,9 @@ make_class_data (tree type)\n \t\t    : build1 (ADDR_EXPR, field_ptr_type_node, fields_decl));\n   PUSH_FIELD_VALUE (cons, \"size_in_bytes\", size_in_bytes (type));\n   PUSH_FIELD_VALUE (cons, \"field_count\",\n-\t\t    build_int_cst (NULL_TREE, field_count, 0));\n+\t\t    build_int_cst (NULL_TREE, field_count));\n   PUSH_FIELD_VALUE (cons, \"static_field_count\",\n-\t\t    build_int_cst (NULL_TREE, static_field_count, 0));\n+\t\t    build_int_cst (NULL_TREE, static_field_count));\n \n   if (flag_indirect_dispatch)\n     PUSH_FIELD_VALUE (cons, \"vtable\", null_pointer_node);\n@@ -1812,7 +1811,7 @@ make_class_data (tree type)\n   PUSH_FIELD_VALUE (cons, \"interfaces\", interfaces);\n   PUSH_FIELD_VALUE (cons, \"loader\", null_pointer_node);\n   PUSH_FIELD_VALUE (cons, \"interface_count\",\n-\t\t    build_int_cst (NULL_TREE, interface_len, 0));\n+\t\t    build_int_cst (NULL_TREE, interface_len));\n   PUSH_FIELD_VALUE (cons, \"state\", integer_zero_node);\n \n   PUSH_FIELD_VALUE (cons, \"thread\", null_pointer_node);\n@@ -2446,7 +2445,7 @@ emit_symbol_table (tree name, tree the_table, tree decl_list,\n      uninitialized static array of INDEX + 1 elements. The extra entry\n      is used by the runtime to track whether the table has been\n      initialized. */\n-  table_size = build_index_type (build_int_cst (NULL_TREE, index, 0));\n+  table_size = build_index_type (build_int_cst (NULL_TREE, index));\n   the_array_type = build_array_type (the_array_element_type, table_size);\n   the_table = build_decl (VAR_DECL, name, the_array_type);\n   TREE_STATIC (the_table) = 1;\n@@ -2487,7 +2486,7 @@ emit_catch_table (tree this_class)\n \t       TYPE_CATCH_CLASSES (this_class));\n   table_size = build_index_type\n     (build_int_cst (NULL_TREE,\n-\t\t    list_length (TYPE_CATCH_CLASSES (this_class)), 0));\n+\t\t    list_length (TYPE_CATCH_CLASSES (this_class))));\n   array_type \n     = build_array_type (TREE_TYPE (TREE_TYPE (TYPE_CTABLE_DECL (this_class))),\n \t\t\ttable_size);"}, {"sha": "a5d9622bdab3f36d34e9a31fc3803b3888f19ba1", "filename": "gcc/java/constants.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -324,7 +324,7 @@ get_tag_node (int tag)\n   /* A Cache for build_int_cst (CONSTANT_XXX, 0). */\n \n   if (tag_nodes[tag] == NULL_TREE)\n-    tag_nodes[tag] = build_int_cst (NULL_TREE, tag, 0);\n+    tag_nodes[tag] = build_int_cst (NULL_TREE, tag);\n   return tag_nodes[tag];\n }\n \n@@ -424,7 +424,7 @@ tree\n build_ref_from_constant_pool (int index)\n {\n   tree d = build_constant_data_ref ();\n-  tree i = build_int_cst (NULL_TREE, index, 0);\n+  tree i = build_int_cst (NULL_TREE, index);\n   return build4 (ARRAY_REF, TREE_TYPE (TREE_TYPE (d)), d, i,\n \t\t NULL_TREE, NULL_TREE);\n }\n@@ -453,7 +453,7 @@ build_constants_constructor (void)\n   if (outgoing_cpool->count > 0)\n     {\n       tree data_decl, tags_decl, tags_type;\n-      tree max_index = build_int_cst (sizetype, outgoing_cpool->count - 1, 0);\n+      tree max_index = build_int_cst (sizetype, outgoing_cpool->count - 1);\n       tree index_type = build_index_type (max_index);\n \n       /* Add dummy 0'th element of constant pool. */\n@@ -485,7 +485,7 @@ build_constants_constructor (void)\n     }\n   START_RECORD_CONSTRUCTOR (cons, constants_type_node);\n   PUSH_FIELD_VALUE (cons, \"size\",\n-\t\t    build_int_cst (NULL_TREE, outgoing_cpool->count, 0));\n+\t\t    build_int_cst (NULL_TREE, outgoing_cpool->count));\n   PUSH_FIELD_VALUE (cons, \"tags\", tags_value);\n   PUSH_FIELD_VALUE (cons, \"data\", data_value);\n   FINISH_RECORD_CONSTRUCTOR (cons);"}, {"sha": "f6c03a5bb7a24b2b3cf6a2fb82b47493ae0135c7", "filename": "gcc/java/decl.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -585,23 +585,22 @@ java_init_decl_processing (void)\n \n   /* Define these next since types below may used them.  */\n   integer_type_node = java_type_for_size (INT_TYPE_SIZE, 0);\n-  integer_zero_node = build_int_cst (NULL_TREE, 0, 0);\n-  integer_one_node = build_int_cst (NULL_TREE, 1, 0);\n-  integer_two_node = build_int_cst (NULL_TREE, 2, 0);\n-  integer_four_node = build_int_cst (NULL_TREE, 4, 0);\n-  integer_minus_one_node = build_int_cst (NULL_TREE, -1, -1);\n+  integer_zero_node = build_int_cst (NULL_TREE, 0);\n+  integer_one_node = build_int_cst (NULL_TREE, 1);\n+  integer_two_node = build_int_cst (NULL_TREE, 2);\n+  integer_four_node = build_int_cst (NULL_TREE, 4);\n+  integer_minus_one_node = build_int_cst (NULL_TREE, -1);\n \n   /* A few values used for range checking in the lexer.  */\n-  decimal_int_max = build_int_cst (unsigned_int_type_node, 0x80000000, 0);\n+  decimal_int_max = build_int_cstu (unsigned_int_type_node, 0x80000000);\n #if HOST_BITS_PER_WIDE_INT == 64\n-  decimal_long_max = build_int_cst (unsigned_long_type_node,\n-\t\t\t\t    0x8000000000000000LL, 0);\n-#else\n-#if HOST_BITS_PER_WIDE_INT == 32\n-  decimal_long_max = build_int_cst (unsigned_long_type_node, 0, 0x80000000);\n+  decimal_long_max = build_int_cstu (unsigned_long_type_node,\n+\t\t\t\t     0x8000000000000000LL);\n+#elif HOST_BITS_PER_WIDE_INT == 32\n+  decimal_long_max = build_int_cst_wide (unsigned_long_type_node,\n+\t\t\t\t\t 0, 0x80000000);\n #else\n  #error \"unsupported size\"\n-#endif\n #endif\n \n   size_zero_node = size_int (0);\n@@ -610,7 +609,7 @@ java_init_decl_processing (void)\n   bitsize_one_node = bitsize_int (1);\n   bitsize_unit_node = bitsize_int (BITS_PER_UNIT);\n \n-  long_zero_node = build_int_cst (long_type_node, 0, 0);\n+  long_zero_node = build_int_cst (long_type_node, 0);\n \n   void_type_node = make_node (VOID_TYPE);\n   pushdecl (build_decl (TYPE_DECL, get_identifier (\"void\"), void_type_node));\n@@ -620,7 +619,7 @@ java_init_decl_processing (void)\n   layout_type (t); /* Uses size_zero_node */\n   return_address_type_node = build_pointer_type (t);\n \n-  null_pointer_node = build_int_cst (ptr_type_node, 0, 0);\n+  null_pointer_node = build_int_cst (ptr_type_node, 0);\n \n #if 0\n   /* Make a type to be the domain of a few array types"}, {"sha": "33d3afdd3c03b51b6be6b1b696679dc522c1e8cb", "filename": "gcc/java/expr.c", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -698,7 +698,7 @@ build_java_array_length_access (tree node)\n \n   length = java_array_type_length (type);\n   if (length >= 0)\n-    return build_int_cst (NULL_TREE, length, 0);\n+    return build_int_cst (NULL_TREE, length);\n \n   node = build3 (COMPONENT_REF, int_type_node,\n \t\t build_java_indirect_ref (array_type, node,\n@@ -910,7 +910,7 @@ build_newarray (int atype_value, tree length)\n      and save the runtime some work. However, the bytecode generator\n      expects to find the type_code int here. */\n   if (flag_emit_class_files)\n-    type_arg = build_int_cst (NULL_TREE, atype_value, 0);\n+    type_arg = build_int_cst (NULL_TREE, atype_value);\n   else\n     type_arg = build_class_ref (prim_type);\n \n@@ -971,7 +971,7 @@ expand_java_multianewarray (tree class_type, int ndim)\n \t\t      build_address_of (soft_multianewarray_node),\n \t\t      tree_cons (NULL_TREE, build_class_ref (class_type),\n \t\t\t\t tree_cons (NULL_TREE, \n-\t\t\t\t\t    build_int_cst (NULL_TREE, ndim, 0),\n+\t\t\t\t\t    build_int_cst (NULL_TREE, ndim),\n \t\t\t\t\t    args)),\n \t\t      NULL_TREE));\n }\n@@ -1082,7 +1082,7 @@ expand_java_pushc (int ival, tree type)\n   if (type == ptr_type_node && ival == 0)\n     value = null_pointer_node;\n   else if (type == int_type_node || type == long_type_node)\n-    value = build_int_cst (type, ival, ival < 0 ? -1 : 0);\n+    value = build_int_cst (type, ival);\n   else if (type == float_type_node || type == double_type_node)\n     {\n       REAL_VALUE_TYPE x;\n@@ -1287,7 +1287,7 @@ expand_iinc (unsigned int local_var_index, int ival, int pc)\n \n   flush_quick_stack ();\n   local_var = find_local_variable (local_var_index, int_type_node, pc);\n-  constant_value = build_int_cst (NULL_TREE, ival, ival < 0 ? -1 : 0);\n+  constant_value = build_int_cst (NULL_TREE, ival);\n   res = fold (build2 (PLUS_EXPR, int_type_node, local_var, constant_value));\n   java_add_stmt (build2 (MODIFY_EXPR, TREE_TYPE (local_var), local_var, res));\n   update_aliases (local_var, local_var_index, pc);\n@@ -1358,7 +1358,7 @@ build_java_binop (enum tree_code op, tree type, tree arg1, tree arg2)\n     case LSHIFT_EXPR:\n     case RSHIFT_EXPR:\n       mask = build_int_cst (NULL_TREE,\n-\t\t\t    TYPE_PRECISION (TREE_TYPE (arg1)) - 1, 0);\n+\t\t\t    TYPE_PRECISION (TREE_TYPE (arg1)) - 1);\n       arg2 = fold (build2 (BIT_AND_EXPR, int_type_node, arg2, mask));\n       break;\n \n@@ -1539,8 +1539,7 @@ build_field_ref (tree self_value, tree self_class, tree name)\n \t{\n \t  tree otable_index\n \t    = build_int_cst (NULL_TREE, get_symbol_table_index \n-\t\t\t     (field_decl, &TYPE_OTABLE_METHODS (output_class)),\n-\t\t\t     0);\n+\t\t\t     (field_decl, &TYPE_OTABLE_METHODS (output_class)));\n \t  tree field_offset\n \t    = build4 (ARRAY_REF, integer_type_node,\n \t\t      TYPE_OTABLE_DECL (output_class), otable_index,\n@@ -1688,7 +1687,7 @@ expand_java_add_case (tree switch_expr, int match, int target_pc)\n {\n   tree value, x;\n \n-  value = build_int_cst (TREE_TYPE (switch_expr), match, match < 0 ? -1 : 0);\n+  value = build_int_cst (TREE_TYPE (switch_expr), match);\n   \n   x = build3 (CASE_LABEL_EXPR, void_type_node, value, NULL_TREE,\n \t      create_artificial_label ());\n@@ -1703,8 +1702,7 @@ static void\n expand_java_call (int target_pc, int return_address)\n {\n   tree target_label = lookup_label (target_pc);\n-  tree value = build_int_cst (NULL_TREE,\n-\t\t\t      return_address, return_address < 0 ? -1 : 0);\n+  tree value = build_int_cst (NULL_TREE, return_address);\n   push_value (value);\n   flush_quick_stack ();\n   expand_goto (target_label);\n@@ -1836,7 +1834,7 @@ build_known_method_ref (tree method, tree method_type ATTRIBUTE_UNUSED,\n \t{\n \t  tree table_index\n \t    = build_int_cst (NULL_TREE, get_symbol_table_index \n-\t\t\t     (method, &TYPE_ATABLE_METHODS (output_class)), 0);\n+\t\t\t     (method, &TYPE_ATABLE_METHODS (output_class)));\n \t  func = build4 (ARRAY_REF,  method_ptr_type_node, \n \t\t\t TYPE_ATABLE_DECL (output_class), table_index,\n \t\t\t NULL_TREE, NULL_TREE);\n@@ -1880,7 +1878,7 @@ build_known_method_ref (tree method, tree method_type ATTRIBUTE_UNUSED,\n \t}\n       method_index *= int_size_in_bytes (method_type_node);\n       ref = fold (build2 (PLUS_EXPR, method_ptr_type_node,\n-\t\t\t  ref, build_int_cst (NULL_TREE, method_index, 0)));\n+\t\t\t  ref, build_int_cst (NULL_TREE, method_index)));\n       ref = build1 (INDIRECT_REF, method_type_node, ref);\n       func = build3 (COMPONENT_REF, nativecode_ptr_type_node,\n \t\t     ref, lookup_field (&method_type_node, ncode_ident),\n@@ -1961,7 +1959,7 @@ build_invokevirtual (tree dtable, tree method)\n     {\n       otable_index \n \t= build_int_cst (NULL_TREE, get_symbol_table_index \n-\t\t\t (method, &TYPE_OTABLE_METHODS (output_class)), 0);\n+\t\t\t (method, &TYPE_OTABLE_METHODS (output_class)));\n       method_index = build4 (ARRAY_REF, integer_type_node, \n \t\t\t     TYPE_OTABLE_DECL (output_class), \n \t\t\t     otable_index, NULL_TREE, NULL_TREE);\n@@ -2021,14 +2019,14 @@ build_invokeinterface (tree dtable, tree method)\n     {\n       otable_index\n \t= build_int_cst (NULL_TREE, get_symbol_table_index \n-\t\t\t (method, &TYPE_OTABLE_METHODS (output_class)), 0);\n+\t\t\t (method, &TYPE_OTABLE_METHODS (output_class)));\n       idx = build4 (ARRAY_REF, integer_type_node,\n \t\t    TYPE_OTABLE_DECL (output_class), otable_index,\n \t\t    NULL_TREE, NULL_TREE);\n     }\n   else\n     idx = build_int_cst (NULL_TREE,\n-\t\t\t get_interface_method_index (method, interface), 0);\n+\t\t\t get_interface_method_index (method, interface));\n \n   lookup_arg = tree_cons (NULL_TREE, dtable,\n                           tree_cons (NULL_TREE, build_class_ref (interface),\n@@ -2282,7 +2280,7 @@ build_jni_stub (tree method)\n   /* We call _Jv_LookupJNIMethod to find the actual underlying\n      function pointer.  _Jv_LookupJNIMethod will throw the appropriate\n      exception if this function is not found at runtime.  */\n-  tem = build_tree_list (NULL_TREE, build_int_cst (NULL_TREE, args_size, 0));\n+  tem = build_tree_list (NULL_TREE, build_int_cst (NULL_TREE, args_size));\n   method_sig = build_java_signature (TREE_TYPE (method));\n   lookup_arg = tree_cons (NULL_TREE,\n                           build_utf8_ref (unmangle_classname"}, {"sha": "6632e934e8aa646eb5448449a136f5f9edb10eb9", "filename": "gcc/java/java-gimplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Fjava-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Fjava-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-gimplify.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -242,7 +242,7 @@ java_gimplify_new_array_init (tree exp)\n   tree data_field = lookup_field (&array_type, get_identifier (\"data\"));\n   tree element_type = TYPE_ARRAY_ELEMENT (array_type);\n   HOST_WIDE_INT ilength = java_array_type_length (array_type);\n-  tree length = build_int_cst (NULL_TREE, ilength, 0);\n+  tree length = build_int_cst (NULL_TREE, ilength);\n   tree init = TREE_OPERAND (exp, 0);\n   tree values = CONSTRUCTOR_ELTS (init);\n \n@@ -263,7 +263,7 @@ java_gimplify_new_array_init (tree exp)\n \t\t\t data_field, NULL_TREE);\n       tree assignment = build2 (MODIFY_EXPR, element_type,\n \t\t\t\tbuild4 (ARRAY_REF, element_type, lhs,\n-\t\t\t\t\tbuild_int_cst (NULL_TREE, index++, 0),\n+\t\t\t\t\tbuild_int_cst (NULL_TREE, index++),\n \t\t\t\t\tNULL_TREE, NULL_TREE),\n \t\t\t\tTREE_VALUE (values));\n       body = build2 (COMPOUND_EXPR, element_type, body, assignment);"}, {"sha": "bc733e84f53eb18d8562a99e6b8ef92eb76c6216", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -266,7 +266,7 @@ get_constant (JCF *jcf, int index)\n     case CONSTANT_Integer:\n       {\n \tjint num = JPOOL_INT(jcf, index);\n-\tvalue = build_int_cst (int_type_node, num, num < 0 ? -1 : 0);\n+\tvalue = build_int_cst (int_type_node, num);\n \tbreak;\n       }\n     case CONSTANT_Long:\n@@ -278,7 +278,7 @@ get_constant (JCF *jcf, int index)\n \tlshift_double (num, 0, 32, 64, &lo, &hi, 0);\n \tnum = JPOOL_UINT (jcf, index+1);\n \tadd_double (lo, hi, num, 0, &lo, &hi);\n-\tvalue = build_int_cst (long_type_node, lo, hi);\n+\tvalue = build_int_cst_wide (long_type_node, lo, hi);\n \tvalue = force_fit_type (value, 0, false, false);\n \tbreak;\n       }"}, {"sha": "aa3efcc06704512495bcc1eb143bdb32744ae619", "filename": "gcc/java/lex.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -1277,9 +1277,9 @@ do_java_lex (YYSTYPE *java_lval)\n #ifndef JC1_LITE\n       /* Range checking.  */\n       /* Temporarily set type to unsigned.  */\n-      value = build_int_cst (long_suffix\n-\t\t\t     ? unsigned_long_type_node\n-\t\t\t     : unsigned_int_type_node, low, high);\n+      value = build_int_cst_wide (long_suffix\n+\t\t\t\t  ? unsigned_long_type_node\n+\t\t\t\t  : unsigned_int_type_node, low, high);\n       SET_LVAL_NODE (value);\n \n       /* For base 10 numbers, only values up to the highest value\n@@ -1300,8 +1300,8 @@ do_java_lex (YYSTYPE *java_lval)\n \t}\n \n       /* Sign extend the value.  */\n-      value = build_int_cst (long_suffix ? long_type_node : int_type_node,\n-\t\t\t     low, high);\n+      value = build_int_cst_wide (long_suffix ? long_type_node : int_type_node,\n+\t\t\t\t  low, high);\n       value = force_fit_type (value, 0, false, false);\n \n       if (radix != 10)\n@@ -1340,7 +1340,7 @@ do_java_lex (YYSTYPE *java_lval)\n         char_lit = 0;\t\t/* We silently convert it to zero.  */\n \n       JAVA_LEX_CHAR_LIT (char_lit);\n-      SET_LVAL_NODE (build_int_cst (char_type_node, char_lit, 0));\n+      SET_LVAL_NODE (build_int_cst (char_type_node, char_lit));\n       return CHAR_LIT_TK;\n     }\n "}, {"sha": "499627152bca490d422a91d63fdf0334483bd003", "filename": "gcc/java/parse.y", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -13334,10 +13334,10 @@ patch_binop (tree node, tree wfl_op1, tree wfl_op2)\n       /* Shift int only up to 0x1f and long up to 0x3f */\n       if (prom_type == int_type_node)\n \top2 = fold (build2 (BIT_AND_EXPR, int_type_node, op2,\n-\t\t\t    build_int_cst (NULL_TREE, 0x1f, 0)));\n+\t\t\t    build_int_cst (NULL_TREE, 0x1f)));\n       else\n \top2 = fold (build2 (BIT_AND_EXPR, int_type_node, op2,\n-\t\t\t    build_int_cst (NULL_TREE, 0x3f, 0)));\n+\t\t\t    build_int_cst (NULL_TREE, 0x3f)));\n \n       /* The >>> operator is a >> operating on unsigned quantities */\n       if (code == URSHIFT_EXPR && ! flag_emit_class_files)\n@@ -14032,12 +14032,12 @@ patch_unaryop (tree node, tree wfl_op)\n \t     both operands, if really necessary */\n \t  if (JINTEGRAL_TYPE_P (op_type))\n \t    {\n-\t      value = build_int_cst (op_type, 1, 0);\n+\t      value = build_int_cst (op_type, 1);\n \t      TREE_TYPE (node) = op_type;\n \t    }\n \t  else\n \t    {\n-\t      value = build_int_cst (NULL_TREE, 1, 0);\n+\t      value = build_int_cst (NULL_TREE, 1);\n \t      TREE_TYPE (node) =\n \t\tbinary_numeric_promotion (op_type,\n \t\t\t\t\t  TREE_TYPE (value), &op, &value);\n@@ -14263,7 +14263,7 @@ patch_cast (tree node, tree wfl_op)\n static tree\n build_null_of_type (tree type)\n {\n-  tree node = build_int_cst (promote_type (type), 0, 0);\n+  tree node = build_int_cst (promote_type (type), 0);\n   return node;\n }\n \n@@ -14345,7 +14345,7 @@ build_newarray_node (tree type, tree dims, int extra_dims)\n {\n   tree node = build3 (NEW_ARRAY_EXPR, NULL_TREE, type,\n \t\t      nreverse (dims),\n-\t\t      build_int_cst (NULL_TREE, extra_dims, 0));\n+\t\t      build_int_cst (NULL_TREE, extra_dims));\n   return node;\n }\n \n@@ -14444,8 +14444,8 @@ patch_newarray (tree node)\n \t\t tree_cons (NULL_TREE,\n \t\t\t    build_class_ref (TREE_TYPE (array_type)),\n \t\t\t    tree_cons (NULL_TREE,\n-\t\t\t\t       build_int_cst (NULL_TREE,\n-\t\t\t\t\t\t      ndims, 0), dims )),\n+\t\t\t\t       build_int_cst (NULL_TREE, ndims),\n+\t\t\t\t       dims)),\n \t\t NULL_TREE);\n }\n "}, {"sha": "07786592915fa38a4ccf19fc01c492964da3caf0", "filename": "gcc/java/resource.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fresource.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -69,9 +69,9 @@ compile_resource_data (const char *name, const char *buffer, int length)\n   FINISH_RECORD (rtype);\n   START_RECORD_CONSTRUCTOR (rinit, rtype);\n   PUSH_FIELD_VALUE (rinit, \"name_length\", \n-\t\t    build_int_cst (NULL_TREE, strlen (name), 0));\n+\t\t    build_int_cst (NULL_TREE, strlen (name)));\n   PUSH_FIELD_VALUE (rinit, \"resource_length\", \n-\t\t    build_int_cst (NULL_TREE, length, 0));\n+\t\t    build_int_cst (NULL_TREE, length));\n   data = build_string (strlen(name) + length, buffer);\n   TREE_TYPE (data) = data_type;\n   PUSH_FIELD_VALUE (rinit, \"data\", data);"}, {"sha": "0c61174f251c21c4422908c52a314976f4661c93", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -357,8 +357,7 @@ build_prim_array_type (tree element_type, HOST_WIDE_INT length)\n \n   if (length != -1)\n     {\n-      tree max_index = build_int_cst (sizetype,\n-\t\t\t\t      length - 1, (0 == length ? -1 : 0));\n+      tree max_index = build_int_cst (sizetype, length - 1);\n       index = build_index_type (max_index);\n     }\n   return build_array_type (element_type, index);"}, {"sha": "bc5da033e2561cd300c3e31e7449d45fb90850ac", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -1404,7 +1404,7 @@ build_objc_string_object (tree string)\n     }\n   else\n     {\n-      initlist = build_tree_list (fields, build_int_cst (NULL_TREE, 0, 0));\n+      initlist = build_tree_list (fields, build_int_cst (NULL_TREE, 0));\n     }\n \n   fields = TREE_CHAIN (fields);\n@@ -1415,7 +1415,7 @@ build_objc_string_object (tree string)\n                  \n   fields = TREE_CHAIN (fields);\n   \n-  initlist = tree_cons (fields, build_int_cst (NULL_TREE, length, 0), initlist);\n+  initlist = tree_cons (fields, build_int_cst (NULL_TREE, length), initlist);\n   constructor = objc_build_constructor (constant_string_type,\n \t\t\t\t\tnreverse (initlist));\n \n@@ -1568,7 +1568,7 @@ build_objc_symtab_template (void)\n \t\t   (FIELD_DECL,\n \t\t    build_array_type\n \t\t    (ptr_type_node,\n-\t\t     build_index_type (build_int_cst (NULL_TREE, index, 0))),\n+\t\t     build_index_type (build_int_cst (NULL_TREE, index))),\n \t\t    \"defs\");\n       chainon (field_decl_chain, field_decl);\n     }\n@@ -1613,7 +1613,7 @@ init_def_list (tree type)\n       if (static_instances_decl)\n \texpr = build_unary_op (ADDR_EXPR, static_instances_decl, 0);\n       else\n-\texpr = build_int_cst (NULL_TREE, 0, 0);\n+\texpr = build_int_cst (NULL_TREE, 0);\n \n       initlist = tree_cons (NULL_TREE, expr, initlist);\n     }\n@@ -1630,12 +1630,12 @@ init_objc_symtab (tree type)\n \n   /* sel_ref_cnt = { ..., 5, ... } */\n \n-  initlist = build_tree_list (NULL_TREE, build_int_cst (NULL_TREE, 0, 0));\n+  initlist = build_tree_list (NULL_TREE, build_int_cst (NULL_TREE, 0));\n \n   /* refs = { ..., _OBJC_SELECTOR_TABLE, ... } */\n \n   if (flag_next_runtime || ! sel_ref_chain)\n-    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), initlist);\n+    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n   else\n     initlist = tree_cons (NULL_TREE,\n \t\t\t  build_unary_op (ADDR_EXPR,\n@@ -1644,11 +1644,11 @@ init_objc_symtab (tree type)\n \n   /* cls_def_cnt = { ..., 5, ... } */\n \n-  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, imp_count, 0), initlist);\n+  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, imp_count), initlist);\n \n   /* cat_def_cnt = { ..., 5, ... } */\n \n-  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, cat_count, 0), initlist);\n+  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, cat_count), initlist);\n \n   /* cls_def = { ..., { &Foo, &Bar, ...}, ... } */\n \n@@ -1749,7 +1749,7 @@ init_module_descriptor (tree type)\n \n   /* version = { 1, ... } */\n \n-  expr = build_int_cst (NULL_TREE, OBJC_VERSION, 0);\n+  expr = build_int_cst (NULL_TREE, OBJC_VERSION);\n   initlist = build_tree_list (NULL_TREE, expr);\n \n   /* size = { ..., sizeof (struct objc_module), ... } */\n@@ -1767,7 +1767,7 @@ init_module_descriptor (tree type)\n   if (UOBJC_SYMBOLS_decl)\n     expr = build_unary_op (ADDR_EXPR, UOBJC_SYMBOLS_decl, 0);\n   else\n-    expr = build_int_cst (NULL_TREE, 0, 0);\n+    expr = build_int_cst (NULL_TREE, 0);\n   initlist = tree_cons (NULL_TREE, expr, initlist);\n \n   return objc_build_constructor (type, nreverse (initlist));\n@@ -1974,15 +1974,15 @@ generate_static_references (void)\n \t}\n \n       /* Output {..., NULL}.  */\n-      initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), initlist);\n+      initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n \n       expr = objc_build_constructor (TREE_TYPE (decl), nreverse (initlist));\n       finish_decl (decl, expr, NULL_TREE);\n       decls\n \t= tree_cons (NULL_TREE, build_unary_op (ADDR_EXPR, decl, 1), decls);\n     }\n \n-  decls = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), decls);\n+  decls = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), decls);\n   ident = get_identifier (\"_OBJC_STATIC_INSTANCES\");\n   expr_decl = build_nt (ARRAY_REF, ident, NULL_TREE, NULL_TREE, NULL_TREE);\n   decl_spec = tree_cons (NULL_TREE, build_pointer_type (void_type_node),\n@@ -2177,7 +2177,7 @@ build_selector_translation_table (void)\n       DECL_EXTERNAL (UOBJC_SELECTOR_TABLE_decl) = 0;\n       TREE_STATIC (UOBJC_SELECTOR_TABLE_decl) = 1;\n       /* NULL terminate the list and fix the decl for output.  */\n-      initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), initlist);\n+      initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n       DECL_INITIAL (UOBJC_SELECTOR_TABLE_decl) = objc_ellipsis_node;\n       initlist = objc_build_constructor (TREE_TYPE (UOBJC_SELECTOR_TABLE_decl),\n \t\t\t\t\t nreverse (initlist));\n@@ -2203,7 +2203,7 @@ get_proto_encoding (tree proto)\n       return add_objc_string (encoding, meth_var_types);\n     }\n   else\n-    return build_int_cst (NULL_TREE, 0, 0);\n+    return build_int_cst (NULL_TREE, 0);\n }\n \n /* sel_ref_chain is a list whose \"value\" fields will be instances of\n@@ -2230,7 +2230,7 @@ build_typed_selector_reference (tree ident, tree prototype)\n  return_at_index:\n   expr = build_unary_op (ADDR_EXPR,\n \t\t\t build_array_ref (UOBJC_SELECTOR_TABLE_decl,\n-\t\t\t\t\t  build_int_cst (NULL_TREE, index, 0)),\n+\t\t\t\t\t  build_int_cst (NULL_TREE, index)),\n \t\t\t 1);\n   return build_c_cast (objc_selector_type, expr);\n }\n@@ -2248,7 +2248,7 @@ build_selector_reference (tree ident)\n \treturn (flag_next_runtime\n \t\t? TREE_PURPOSE (*chain)\n \t\t: build_array_ref (UOBJC_SELECTOR_TABLE_decl,\n-\t\t\t\t   build_int_cst (NULL_TREE, index, 0)));\n+\t\t\t\t   build_int_cst (NULL_TREE, index)));\n \n       index++;\n       chain = &TREE_CHAIN (*chain);\n@@ -2261,7 +2261,7 @@ build_selector_reference (tree ident)\n   return (flag_next_runtime\n \t  ? expr\n \t  : build_array_ref (UOBJC_SELECTOR_TABLE_decl,\n-\t\t\t     build_int_cst (NULL_TREE, index, 0)));\n+\t\t\t     build_int_cst (NULL_TREE, index)));\n }\n \n static GTY(()) int class_reference_idx;\n@@ -3249,15 +3249,15 @@ build_next_objc_exception_stuff (void)\n \n   /* int buf[_JBLEN]; */\n \n-  index = build_index_type (build_int_cst (NULL_TREE, _JBLEN - 1, 0));\n+  index = build_index_type (build_int_cst (NULL_TREE, _JBLEN - 1));\n   field_decl = create_builtin_decl (FIELD_DECL,\n \t\t\t\t    build_array_type (integer_type_node, index),\n \t\t\t\t    \"buf\");\n   field_decl_chain = field_decl;\n \n   /* void *pointers[4]; */\n \n-  index = build_index_type (build_int_cst (NULL_TREE, 4 - 1, 0));\n+  index = build_index_type (build_int_cst (NULL_TREE, 4 - 1));\n   field_decl = create_builtin_decl (FIELD_DECL,\n \t\t\t\t    build_array_type (ptr_type_node, index),\n \t\t\t\t    \"pointers\");\n@@ -3495,7 +3495,7 @@ build_method_prototype_list_template (tree list_type, int size)\n \n   decl_specs = build_tree_list (NULL_TREE, list_type);\n   field_decl = build_nt (ARRAY_REF, get_identifier (\"method_list\"),\n-\t\t\t build_int_cst (NULL_TREE, size, 0), NULL_TREE, NULL_TREE);\n+\t\t\t build_int_cst (NULL_TREE, size), NULL_TREE, NULL_TREE);\n   field_decl = grokfield (field_decl, decl_specs, NULL_TREE);\n   chainon (field_decl_chain, field_decl);\n \n@@ -3641,7 +3641,7 @@ generate_descriptor_table (tree type, const char *name, int size, tree list,\n \t\t     decl_specs, 1, NULL_TREE);\n   DECL_CONTEXT (decl) = NULL_TREE;\n \n-  initlist = build_tree_list (NULL_TREE, build_int_cst (NULL_TREE, size, 0));\n+  initlist = build_tree_list (NULL_TREE, build_int_cst (NULL_TREE, size));\n   initlist = tree_cons (NULL_TREE, list, initlist);\n \n   finish_decl (decl, objc_build_constructor (type, nreverse (initlist)),\n@@ -3851,7 +3851,7 @@ generate_protocols (void)\n \t  TREE_TYPE (refs_expr) = cast_type2;\n \t}\n       else\n-\trefs_expr = build_int_cst (NULL_TREE, 0, 0);\n+\trefs_expr = build_int_cst (NULL_TREE, 0);\n \n       /* UOBJC_INSTANCE_METHODS_decl/UOBJC_CLASS_METHODS_decl are set\n \t by generate_method_descriptors, which is called above.  */\n@@ -3884,21 +3884,21 @@ build_protocol_initializer (tree type, tree protocol_name,\n   /* Filling the \"isa\" in with one allows the runtime system to\n      detect that the version change...should remove before final release.  */\n \n-  expr = build_int_cst (cast_type, PROTOCOL_VERSION, 0);\n+  expr = build_int_cst (cast_type, PROTOCOL_VERSION);\n   initlist = tree_cons (NULL_TREE, expr, initlist);\n   initlist = tree_cons (NULL_TREE, protocol_name, initlist);\n   initlist = tree_cons (NULL_TREE, protocol_list, initlist);\n \n   if (!instance_methods)\n-    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), initlist);\n+    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n   else\n     {\n       expr = build_unary_op (ADDR_EXPR, instance_methods, 0);\n       initlist = tree_cons (NULL_TREE, expr, initlist);\n     }\n \n   if (!class_methods)\n-    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), initlist);\n+    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n   else\n     {\n       expr = build_unary_op (ADDR_EXPR, class_methods, 0);\n@@ -4391,7 +4391,7 @@ build_ivar_list_template (tree list_type, int size)\n \n   decl_specs = build_tree_list (NULL_TREE, list_type);\n   field_decl = build_nt (ARRAY_REF, get_identifier (\"ivar_list\"),\n-\t\t\t build_int_cst (NULL_TREE, size, 0), NULL_TREE, NULL_TREE);\n+\t\t\t build_int_cst (NULL_TREE, size), NULL_TREE, NULL_TREE);\n \n   field_decl = grokfield (field_decl, decl_specs, NULL_TREE);\n   chainon (field_decl_chain, field_decl);\n@@ -4439,7 +4439,7 @@ build_method_list_template (tree list_type, int size)\n \n   decl_specs = build_tree_list (NULL_TREE, list_type);\n   field_decl = build_nt (ARRAY_REF, get_identifier (\"method_list\"),\n-\t\t\t build_int_cst (NULL_TREE, size, 0), NULL_TREE, NULL_TREE);\n+\t\t\t build_int_cst (NULL_TREE, size), NULL_TREE, NULL_TREE);\n \n   field_decl = grokfield (field_decl, decl_specs, NULL_TREE);\n   chainon (field_decl_chain, field_decl);\n@@ -4466,7 +4466,7 @@ build_ivar_list_initializer (tree type, tree field_decl)\n \t\t\t  ivar);\n       else\n \t/* Unnamed bit-field ivar (yuck).  */\n-\tivar = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), ivar);\n+\tivar = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), ivar);\n \n       /* Set type.  */\n       encode_field_decl (field_decl,\n@@ -4509,7 +4509,7 @@ generate_ivars_list (tree type, const char *name, int size, tree list)\n   decl = start_decl (synth_id_with_class_suffix (name, objc_implementation_context),\n \t\t     decl_specs, 1, NULL_TREE);\n \n-  initlist = build_tree_list (NULL_TREE, build_int_cst (NULL_TREE, size, 0));\n+  initlist = build_tree_list (NULL_TREE, build_int_cst (NULL_TREE, size));\n   initlist = tree_cons (NULL_TREE, list, initlist);\n \n   finish_decl (decl,\n@@ -4684,8 +4684,8 @@ generate_dispatch_table (tree type, const char *name, int size, tree list)\n   decl = start_decl (synth_id_with_class_suffix (name, objc_implementation_context),\n \t\t     decl_specs, 1, NULL_TREE);\n \n-  initlist = build_tree_list (NULL_TREE, build_int_cst (NULL_TREE, 0, 0));\n-  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, size, 0), initlist);\n+  initlist = build_tree_list (NULL_TREE, build_int_cst (NULL_TREE, 0));\n+  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, size), initlist);\n   initlist = tree_cons (NULL_TREE, list, initlist);\n \n   finish_decl (decl,\n@@ -4817,9 +4817,9 @@ generate_protocol_list (tree i_or_p)\n       size++;\n \n   /* Build initializer.  */\n-  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), NULL_TREE);\n+  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), NULL_TREE);\n \n-  e = build_int_cst (cast_type, size, 0);\n+  e = build_int_cst (cast_type, size);\n   initlist = tree_cons (NULL_TREE, e, initlist);\n \n   for (lproto = plist; lproto; lproto = TREE_CHAIN (lproto))\n@@ -4845,18 +4845,18 @@ generate_protocol_list (tree i_or_p)\n     expr_decl = build_nt (ARRAY_REF,\n \t\t\t  synth_id_with_class_suffix (\"_OBJC_PROTOCOL_REFS\",\n \t\t\t\t\t\t      i_or_p),\n-\t\t\t  build_int_cst (NULL_TREE, size + 2, 0), NULL_TREE, NULL_TREE);\n+\t\t\t  build_int_cst (NULL_TREE, size + 2), NULL_TREE, NULL_TREE);\n   else if (TREE_CODE (i_or_p) == CLASS_INTERFACE_TYPE)\n     expr_decl = build_nt (ARRAY_REF,\n \t\t\t  synth_id_with_class_suffix (\"_OBJC_CLASS_PROTOCOLS\",\n \t\t\t\t\t\t      i_or_p),\n-\t\t\t  build_int_cst (NULL_TREE, size + 2, 0), NULL_TREE, NULL_TREE);\n+\t\t\t  build_int_cst (NULL_TREE, size + 2), NULL_TREE, NULL_TREE);\n   else if (TREE_CODE (i_or_p) == CATEGORY_INTERFACE_TYPE)\n     expr_decl\n       = build_nt (ARRAY_REF,\n \t\t  synth_id_with_class_suffix (\"_OBJC_CATEGORY_PROTOCOLS\",\n \t\t\t\t\t      i_or_p),\n-\t\t  build_int_cst (NULL_TREE, size + 2, 0), NULL_TREE, NULL_TREE);\n+\t\t  build_int_cst (NULL_TREE, size + 2), NULL_TREE, NULL_TREE);\n   else\n     abort ();\n \n@@ -4883,14 +4883,14 @@ build_category_initializer (tree type, tree cat_name, tree class_name,\n   initlist = tree_cons (NULL_TREE, class_name, initlist);\n \n   if (!instance_methods)\n-    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), initlist);\n+    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n   else\n     {\n       expr = build_unary_op (ADDR_EXPR, instance_methods, 0);\n       initlist = tree_cons (NULL_TREE, expr, initlist);\n     }\n   if (!class_methods)\n-    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), initlist);\n+    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n   else\n     {\n       expr = build_unary_op (ADDR_EXPR, class_methods, 0);\n@@ -4899,7 +4899,7 @@ build_category_initializer (tree type, tree cat_name, tree class_name,\n \n   /* protocol_list = */\n   if (!protocol_list)\n-     initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), initlist);\n+     initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n   else\n      {\n        tree cast_type2 = groktypename\n@@ -4958,17 +4958,17 @@ build_shared_structure_initializer (tree type, tree isa, tree super,\n   initlist = tree_cons (NULL_TREE, default_conversion (name), initlist);\n \n   /* version = */\n-  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), initlist);\n+  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n \n   /* info = */\n-  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, status, 0), initlist);\n+  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, status), initlist);\n \n   /* instance_size = */\n   initlist = tree_cons (NULL_TREE, size, initlist);\n \n   /* objc_ivar_list = */\n   if (!ivar_list)\n-    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), initlist);\n+    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n   else\n     {\n       expr = build_unary_op (ADDR_EXPR, ivar_list, 0);\n@@ -4977,7 +4977,7 @@ build_shared_structure_initializer (tree type, tree isa, tree super,\n \n   /* objc_method_list = */\n   if (!dispatch_table)\n-    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), initlist);\n+    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n   else\n     {\n       expr = build_unary_op (ADDR_EXPR, dispatch_table, 0);\n@@ -4986,22 +4986,22 @@ build_shared_structure_initializer (tree type, tree isa, tree super,\n \n   if (flag_next_runtime)\n     /* method_cache = */\n-    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), initlist);\n+    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n   else\n     {\n       /* dtable = */\n-      initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), initlist);\n+      initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n \n       /* subclass_list = */\n-      initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), initlist);\n+      initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n \n       /* sibling_class = */\n-      initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), initlist);\n+      initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n     }\n \n   /* protocol_list = */\n   if (! protocol_list)\n-    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), initlist);\n+    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n   else\n      {\n        tree cast_type2\n@@ -5020,10 +5020,10 @@ build_shared_structure_initializer (tree type, tree isa, tree super,\n \n   if (flag_next_runtime)\n     /* sel_id = NULL */\n-    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), initlist);\n+    initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n \n   /* gc_object_type = NULL */\n-  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0, 0), initlist);\n+  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 0), initlist);\n \n   return objc_build_constructor (type, nreverse (initlist));\n }\n@@ -5132,7 +5132,7 @@ generate_shared_structures (void)\n       super_expr = build_c_cast (cast_type, super_expr); /* cast! */\n     }\n   else\n-    super_expr = build_int_cst (NULL_TREE, 0, 0);\n+    super_expr = build_int_cst (NULL_TREE, 0);\n \n   root_expr = add_objc_string (my_root_id, class_names);\n   root_expr = build_c_cast (cast_type, root_expr); /* cast! */\n@@ -8989,7 +8989,7 @@ handle_impent (struct imp_entry *impent)\n     {\n       tree decl, init;\n \n-      init = build_int_cst (c_common_type_for_size (BITS_PER_WORD, 1), 0, 0);\n+      init = build_int_cst (c_common_type_for_size (BITS_PER_WORD, 1), 0);\n       decl = build_decl (VAR_DECL, get_identifier (string), TREE_TYPE (init));\n       TREE_PUBLIC (decl) = 1;\n       TREE_READONLY (decl) = 1;\n@@ -9019,13 +9019,13 @@ generate_objc_image_info (void)\n \t\t tree_cons (NULL_TREE,\n \t\t\t    build_array_type\n \t\t\t    (integer_type_node,\n-\t\t\t     build_index_type (build_int_cst (NULL_TREE, 1, 0))),\n+\t\t\t     build_index_type (build_int_cst (NULL_TREE, 1))),\n \t\t\t    sc_spec),\n \t\t 1,\n \t\t NULL_TREE);\n \n-  initlist = build_tree_list (NULL_TREE, build_int_cst (NULL_TREE, 0, 0));\n-  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 1, 0), initlist);\n+  initlist = build_tree_list (NULL_TREE, build_int_cst (NULL_TREE, 0));\n+  initlist = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, 1), initlist);\n   initlist = build_constructor (TREE_TYPE (decl), nreverse (initlist));\n \n   TREE_USED (decl) = DECL_IGNORED_P (decl) = DECL_ARTIFICIAL (decl) = 1;"}, {"sha": "02e6664b82c2f13b8300a51fa93b7032d2d4e129", "filename": "gcc/stmt.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -1546,7 +1546,7 @@ shift_return_value (rtx val)\n       if (shift > 0)\n \tval = expand_shift (LSHIFT_EXPR, GET_MODE (target),\n \t\t\t    gen_lowpart (GET_MODE (target), val),\n-\t\t\t    build_int_cst (NULL_TREE, shift, 0), target, 1);\n+\t\t\t    build_int_cst (NULL_TREE, shift), target, 1);\n     }\n   return val;\n }\n@@ -2554,8 +2554,9 @@ expand_case (tree exp)\n \t      if (TREE_CODE (index_expr) != INTEGER_CST)\n \t\t{\n \t\t  index_expr\n-\t\t    = build_int_cst (NULL_TREE, INTVAL (index),\n-\t\t\t\t   unsignedp || INTVAL (index) >= 0 ? 0 : -1);\n+\t\t    = build_int_cst_wide (NULL_TREE, INTVAL (index),\n+\t\t\t\t\t  unsignedp || INTVAL (index) >= 0\n+\t\t\t\t\t  ? 0 : -1);\n \t\t  index_expr = convert (index_type, index_expr);\n \t\t}\n \n@@ -2727,7 +2728,7 @@ estimate_case_costs (case_node_ptr node)\n {\n   tree min_ascii = integer_minus_one_node;\n   tree max_ascii = convert (TREE_TYPE (node->high),\n-\t\t\t    build_int_cst (NULL_TREE, 127, 0));\n+\t\t\t    build_int_cst (NULL_TREE, 127));\n   case_node_ptr n;\n   int i;\n "}, {"sha": "3141e7d1af5bcc00fcdfb5b1e22dc70dd6e1d10d", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -1534,7 +1534,7 @@ layout_type (tree type)\n     case VECTOR_TYPE:\n       {\n \tint nunits = TYPE_VECTOR_SUBPARTS (type);\n-\ttree nunits_tree = build_int_cst (NULL_TREE, nunits, 0);\n+\ttree nunits_tree = build_int_cst (NULL_TREE, nunits);\n \ttree innertype = TREE_TYPE (type);\n \n \tif (nunits & (nunits - 1))\n@@ -1856,14 +1856,14 @@ initialize_sizetypes (bool signed_p)\n   TYPE_USER_ALIGN (t) = 0;\n   TYPE_IS_SIZETYPE (t) = 1;\n   TYPE_UNSIGNED (t) = !signed_p;\n-  TYPE_SIZE (t) = build_int_cst (t, GET_MODE_BITSIZE (SImode), 0);\n-  TYPE_SIZE_UNIT (t) = build_int_cst (t, GET_MODE_SIZE (SImode), 0);\n+  TYPE_SIZE (t) = build_int_cst (t, GET_MODE_BITSIZE (SImode));\n+  TYPE_SIZE_UNIT (t) = build_int_cst (t, GET_MODE_SIZE (SImode));\n   TYPE_PRECISION (t) = GET_MODE_BITSIZE (SImode);\n-  TYPE_MIN_VALUE (t) = build_int_cst (t, 0, 0);\n+  TYPE_MIN_VALUE (t) = build_int_cst (t, 0);\n \n   /* 1000 avoids problems with possible overflow and is certainly\n      larger than any size value we'd want to be storing.  */\n-  TYPE_MAX_VALUE (t) = build_int_cst (t, 1000, 0);\n+  TYPE_MAX_VALUE (t) = build_int_cst (t, 1000);\n \n   sizetype = t;\n   bitsizetype = build_distinct_type_copy (t);\n@@ -1951,34 +1951,37 @@ set_min_and_max_values_for_integral_type (tree type,\n \n   if (is_unsigned)\n     {\n-      min_value = build_int_cst (type, 0, 0);\n+      min_value = build_int_cst (type, 0);\n       max_value\n-\t= build_int_cst (type, precision - HOST_BITS_PER_WIDE_INT >= 0\n-\t\t\t ? -1 : ((HOST_WIDE_INT) 1 << precision) - 1,\n-\t\t\t precision - HOST_BITS_PER_WIDE_INT > 0\n-\t\t\t ? ((unsigned HOST_WIDE_INT) ~0\n-\t\t\t    >> (HOST_BITS_PER_WIDE_INT\n-\t\t\t\t- (precision - HOST_BITS_PER_WIDE_INT)))\n-\t\t\t : 0);\n+\t= build_int_cst_wide (type, precision - HOST_BITS_PER_WIDE_INT >= 0\n+\t\t\t      ? -1\n+\t\t\t      : ((HOST_WIDE_INT) 1 << precision) - 1,\n+\t\t\t      precision - HOST_BITS_PER_WIDE_INT > 0\n+\t\t\t      ? ((unsigned HOST_WIDE_INT) ~0\n+\t\t\t\t >> (HOST_BITS_PER_WIDE_INT\n+\t\t\t\t     - (precision - HOST_BITS_PER_WIDE_INT)))\n+\t\t\t      : 0);\n     }\n   else\n     {\n       min_value\n-\t= build_int_cst (type,\n-\t\t\t (precision - HOST_BITS_PER_WIDE_INT > 0\n-\t\t\t  ? 0 : (HOST_WIDE_INT) (-1) << (precision - 1)),\n-\t\t\t (((HOST_WIDE_INT) (-1)\n-\t\t\t   << (precision - HOST_BITS_PER_WIDE_INT - 1 > 0\n-\t\t\t       ? precision - HOST_BITS_PER_WIDE_INT - 1\n-\t\t\t       : 0))));\n+\t= build_int_cst_wide (type,\n+\t\t\t      (precision - HOST_BITS_PER_WIDE_INT > 0\n+\t\t\t       ? 0\n+\t\t\t       : (HOST_WIDE_INT) (-1) << (precision - 1)),\n+\t\t\t      (((HOST_WIDE_INT) (-1)\n+\t\t\t\t<< (precision - HOST_BITS_PER_WIDE_INT - 1 > 0\n+\t\t\t\t    ? precision - HOST_BITS_PER_WIDE_INT - 1\n+\t\t\t\t    : 0))));\n       max_value\n-\t= build_int_cst (type,\n-\t\t\t (precision - HOST_BITS_PER_WIDE_INT > 0\n-\t\t\t  ? -1 : ((HOST_WIDE_INT) 1 << (precision - 1)) - 1),\n-\t\t\t (precision - HOST_BITS_PER_WIDE_INT - 1 > 0\n-\t\t\t  ? (((HOST_WIDE_INT) 1\n-\t\t\t      << (precision - HOST_BITS_PER_WIDE_INT - 1))) - 1\n-\t\t\t  : 0));\n+\t= build_int_cst_wide (type,\n+\t\t\t      (precision - HOST_BITS_PER_WIDE_INT > 0\n+\t\t\t       ? -1\n+\t\t\t       : ((HOST_WIDE_INT) 1 << (precision - 1)) - 1),\n+\t\t\t      (precision - HOST_BITS_PER_WIDE_INT - 1 > 0\n+\t\t\t       ? (((HOST_WIDE_INT) 1\n+\t\t\t\t   << (precision - HOST_BITS_PER_WIDE_INT - 1))) - 1\n+\t\t\t       : 0));\n     }\n \n   TYPE_MIN_VALUE (type) = min_value;"}, {"sha": "d4b8168c69d79e928e774cfba0dcbc75ab3616ee", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -218,7 +218,7 @@ chrec_fold_multiply_poly_poly (tree type,\n      \n      /* \"2*b*d\".  */\n      chrec_fold_multiply\n-     (type, build_int_cst (NULL_TREE, 2, 0),\n+     (type, build_int_cst (NULL_TREE, 2),\n       chrec_fold_multiply (type, CHREC_RIGHT (poly0), CHREC_RIGHT (poly1))));\n }\n \n@@ -645,7 +645,7 @@ reset_evolution_in_loop (unsigned loop_num,\n       && CHREC_VARIABLE (chrec) > loop_num)\n     return build \n       (TREE_CODE (chrec), \n-       build_int_cst (NULL_TREE, CHREC_VARIABLE (chrec), 0), \n+       build_int_cst (NULL_TREE, CHREC_VARIABLE (chrec)), \n        reset_evolution_in_loop (loop_num, CHREC_LEFT (chrec), new_evol), \n        reset_evolution_in_loop (loop_num, CHREC_RIGHT (chrec), new_evol));\n   "}, {"sha": "84eb13535850cdfef1edd22d5b5e309f36fe97c0", "filename": "gcc/tree-chrec.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-chrec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-chrec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.h?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -105,7 +105,7 @@ build_polynomial_chrec (unsigned loop_num,\n     return chrec_dont_know;\n \n   return build (POLYNOMIAL_CHREC, TREE_TYPE (left), \n-\t\tbuild_int_cst (NULL_TREE, loop_num, 0), left, right);\n+\t\tbuild_int_cst (NULL_TREE, loop_num), left, right);\n }\n \n \f"}, {"sha": "68302e87db9e3e399ef91479f945ff23da95808f", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -506,7 +506,7 @@ build_replicated_const (tree type, tree inner_type, HOST_WIDE_INT value)\n   else\n     abort ();\n \n-  ret = build_int_cst (type, low, high);\n+  ret = build_int_cst_wide (type, low, high);\n   return ret;\n }\n "}, {"sha": "6103aa69c17da136b72ceaafdf324e978e1def3b", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -833,7 +833,7 @@ honor_protect_cleanup_actions (struct leh_state *outer_state,\n \n       x = build1 (RESX_EXPR, void_type_node,\n \t\t  build_int_cst (NULL_TREE,\n-\t\t\t\t get_eh_region_number (tf->region), 0));\n+\t\t\t\t get_eh_region_number (tf->region)));\n       tsi_link_after (&i, x, TSI_CONTINUE_LINKING);\n     }\n \n@@ -940,7 +940,7 @@ lower_try_finally_onedest (struct leh_state *state, struct leh_tf_state *tf)\n \n       x = build1 (RESX_EXPR, void_type_node,\n \t\t  build_int_cst (NULL_TREE,\n-\t\t\t\t get_eh_region_number (tf->region), 0));\n+\t\t\t\t get_eh_region_number (tf->region)));\n       append_to_statement_list (x, tf->top_p);\n \n       return;\n@@ -1029,7 +1029,7 @@ lower_try_finally_copy (struct leh_state *state, struct leh_tf_state *tf)\n \n       x = build1 (RESX_EXPR, void_type_node,\n \t\t  build_int_cst (NULL_TREE,\n-\t\t\t\t get_eh_region_number (tf->region), 0));\n+\t\t\t\t get_eh_region_number (tf->region)));\n       append_to_statement_list (x, &new_stmt);\n     }\n \n@@ -1137,7 +1137,7 @@ lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)\n   if (tf->may_fallthru)\n     {\n       x = build (MODIFY_EXPR, void_type_node, finally_tmp,\n-\t\t build_int_cst (NULL_TREE, fallthru_index, 0));\n+\t\t build_int_cst (NULL_TREE, fallthru_index));\n       append_to_statement_list (x, tf->top_p);\n \n       if (tf->may_throw)\n@@ -1148,7 +1148,7 @@ lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)\n \n \n       last_case = build (CASE_LABEL_EXPR, void_type_node,\n-\t\t\t build_int_cst (NULL_TREE, fallthru_index, 0), NULL,\n+\t\t\t build_int_cst (NULL_TREE, fallthru_index), NULL,\n \t\t\t create_artificial_label ());\n       TREE_VEC_ELT (case_label_vec, last_case_index) = last_case;\n       last_case_index++;\n@@ -1167,11 +1167,11 @@ lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)\n       append_to_statement_list (x, tf->top_p);\n \n       x = build (MODIFY_EXPR, void_type_node, finally_tmp,\n-\t\t build_int_cst (NULL_TREE, eh_index, 0));\n+\t\t build_int_cst (NULL_TREE, eh_index));\n       append_to_statement_list (x, tf->top_p);\n \n       last_case = build (CASE_LABEL_EXPR, void_type_node,\n-\t\t\t build_int_cst (NULL_TREE, eh_index, 0), NULL,\n+\t\t\t build_int_cst (NULL_TREE, eh_index), NULL,\n \t\t\t create_artificial_label ());\n       TREE_VEC_ELT (case_label_vec, last_case_index) = last_case;\n       last_case_index++;\n@@ -1180,7 +1180,7 @@ lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)\n       append_to_statement_list (x, &switch_body);\n       x = build1 (RESX_EXPR, void_type_node,\n \t\t  build_int_cst (NULL_TREE,\n-\t\t\t\t get_eh_region_number (tf->region), 0));\n+\t\t\t\t get_eh_region_number (tf->region)));\n       append_to_statement_list (x, &switch_body);\n     }\n \n@@ -1202,14 +1202,14 @@ lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)\n       if (q->index < 0)\n \t{\n \t  mod = build (MODIFY_EXPR, void_type_node, finally_tmp,\n-\t\t       build_int_cst (NULL_TREE, return_index, 0));\n+\t\t       build_int_cst (NULL_TREE, return_index));\n \t  do_return_redirection (q, finally_label, mod, &return_val);\n \t  switch_id = return_index;\n \t}\n       else\n \t{\n \t  mod = build (MODIFY_EXPR, void_type_node, finally_tmp,\n-\t\t       build_int_cst (NULL_TREE, q->index, 0));\n+\t\t       build_int_cst (NULL_TREE, q->index));\n \t  do_goto_redirection (q, finally_label, mod);\n \t  switch_id = q->index;\n \t}\n@@ -1218,7 +1218,7 @@ lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)\n       if (!TREE_VEC_ELT (case_label_vec, case_index))\n \t{\n \t  last_case = build (CASE_LABEL_EXPR, void_type_node,\n-\t\t\t     build_int_cst (NULL_TREE, switch_id, 0), NULL,\n+\t\t\t     build_int_cst (NULL_TREE, switch_id), NULL,\n \t\t\t     create_artificial_label ());\n \t  TREE_VEC_ELT (case_label_vec, case_index) = last_case;\n "}, {"sha": "580d9ad3fa8c66f864cc8ecaf9fcc3a1b99e573a", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -77,7 +77,7 @@ mf_build_string (const char *string)\n   tree result = mf_mark (build_string (len + 1, string));\n \n   TREE_TYPE (result) = build_array_type\n-    (char_type_node, build_index_type (build_int_cst (NULL_TREE, len, 0)));\n+    (char_type_node, build_index_type (build_int_cst (NULL_TREE, len)));\n   TREE_CONSTANT (result) = 1;\n   TREE_INVARIANT (result) = 1;\n   TREE_READONLY (result) = 1;\n@@ -918,7 +918,7 @@ mx_register_decls (tree decl, tree *stmt_list)\n                                   size,\n                                   tree_cons (NULL_TREE,\n \t\t\t\t\t     /* __MF_TYPE_STACK */\n-                                             build_int_cst (NULL_TREE, 3, 0),\n+                                             build_int_cst (NULL_TREE, 3),\n                                              NULL_TREE)));\n           /* __mf_unregister (...) */\n           unregister_fncall = build_function_call_expr (mf_unregister_fndecl,\n@@ -936,7 +936,7 @@ mx_register_decls (tree decl, tree *stmt_list)\n                                   size,\n                                   tree_cons (NULL_TREE,\n \t\t\t\t\t     /* __MF_TYPE_STACK */\n-                                             build_int_cst (NULL_TREE, 3, 0),\n+                                             build_int_cst (NULL_TREE, 3),\n                                              tree_cons (NULL_TREE,\n                                                         variable_name,\n                                                         NULL_TREE))));\n@@ -1079,7 +1079,7 @@ mudflap_register_call (tree obj, tree object_size, tree varname)\n \n   args = tree_cons (NULL_TREE, varname, NULL_TREE);\n \n-  arg = build_int_cst (NULL_TREE, 4, 0); /* __MF_TYPE_STATIC */\n+  arg = build_int_cst (NULL_TREE, 4); /* __MF_TYPE_STATIC */\n   args = tree_cons (NULL_TREE, arg, args);\n \n   arg = convert (size_type_node, object_size);\n@@ -1161,7 +1161,7 @@ mudflap_enqueue_constant (tree obj)\n     return;\n \n   if (TREE_CODE (obj) == STRING_CST)\n-    object_size = build_int_cst (NULL_TREE, TREE_STRING_LENGTH (obj), 0);\n+    object_size = build_int_cst (NULL_TREE, TREE_STRING_LENGTH (obj));\n   else\n     object_size = size_in_bytes (TREE_TYPE (obj));\n "}, {"sha": "183d3aeb3458e803608025f7a95421d90f0363c8", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -405,7 +405,7 @@ get_trampoline_type (void)\n       align = STACK_BOUNDARY;\n     }\n \n-  t = build_index_type (build_int_cst (NULL_TREE, size - 1, 0));\n+  t = build_index_type (build_int_cst (NULL_TREE, size - 1));\n   t = build_array_type (char_type_node, t);\n   t = build_decl (FIELD_DECL, get_identifier (\"__data\"), t);\n   DECL_ALIGN (t) = align;\n@@ -489,7 +489,7 @@ get_nl_goto_field (struct nesting_info *info)\n       size = size + 1;\n \n       type = build_array_type\n-\t(type, build_index_type (build_int_cst (NULL_TREE, size, 0)));\n+\t(type, build_index_type (build_int_cst (NULL_TREE, size)));\n \n       field = make_node (FIELD_DECL);\n       DECL_NAME (field) = get_identifier (\"__nl_goto_buf\");"}, {"sha": "a00d7178a6aba6cdf225d753998d9c2abf5841e7", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -473,10 +473,10 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t  if (tree_int_cst_sgn (val) < 0)\n \t    {\n \t      pp_character (buffer, '-');\n-\t      val = build_int_cst (NULL_TREE,\n-\t\t\t\t   -TREE_INT_CST_LOW (val),\n-\t\t\t\t   ~TREE_INT_CST_HIGH (val)\n-\t\t\t\t   + !TREE_INT_CST_LOW (val));\n+\t      val = build_int_cst_wide (NULL_TREE,\n+\t\t\t\t\t-TREE_INT_CST_LOW (val),\n+\t\t\t\t\t~TREE_INT_CST_HIGH (val)\n+\t\t\t\t\t+ !TREE_INT_CST_LOW (val));\n \t    }\n \t  /* Would \"%x%0*x\" or \"%x%*0x\" get zero-padding on all\n \t     systems?  */"}, {"sha": "f8f2ba504bb045da79fbffccf4e1f09b1b162a0f", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -1150,7 +1150,7 @@ widen_bitfield (tree val, tree field, tree var)\n \n       wide_val = build (BIT_AND_EXPR, TREE_TYPE (var), val, \n \t\t\tfold_convert (TREE_TYPE (var),\n-\t\t\t\t      build_int_cst (NULL_TREE, mask, 0)));\n+\t\t\t\t      build_int_cst (NULL_TREE, mask)));\n     }\n   else\n     {\n@@ -1162,7 +1162,7 @@ widen_bitfield (tree val, tree field, tree var)\n \n       wide_val = build (BIT_IOR_EXPR, TREE_TYPE (var), val,\n \t\t\tfold_convert (TREE_TYPE (var),\n-\t\t\t\t      build_int_cst (NULL_TREE, mask, 0)));\n+\t\t\t\t      build_int_cst (NULL_TREE, mask)));\n     }\n \n   return fold (wide_val);\n@@ -1693,7 +1693,7 @@ maybe_fold_offset_to_array_ref (tree base, tree offset, tree orig_type)\n \t  || lrem || hrem)\n \treturn NULL_TREE;\n \n-      idx = build_int_cst (NULL_TREE, lquo, hquo);\n+      idx = build_int_cst_wide (NULL_TREE, lquo, hquo);\n     }\n \n   /* Assume the low bound is zero.  If there is a domain type, get the"}, {"sha": "fb66922cd8ea326b9b4f6a6b1ba24bcd5cfeceee", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -1795,7 +1795,7 @@ simplify_rhs_and_lookup_avail_expr (struct dom_walk_data *walk_data,\n \n \t  if (rhs_code == TRUNC_DIV_EXPR)\n \t    t = build (RSHIFT_EXPR, TREE_TYPE (op0), op0,\n-\t\t       build_int_cst (NULL_TREE, tree_log2 (op1), 0));\n+\t\t       build_int_cst (NULL_TREE, tree_log2 (op1)));\n \t  else\n \t    t = build (BIT_AND_EXPR, TREE_TYPE (op0), op0,\n \t\t       local_fold (build (MINUS_EXPR, TREE_TYPE (op1),"}, {"sha": "72718786a9df347160bf87f644d15bb4c6ddc05d", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -86,7 +86,7 @@ create_canonical_iv (struct loop *loop, edge exit, tree niter)\n   type = TREE_TYPE (niter);\n   niter = fold (build2 (PLUS_EXPR, type,\n \t\t\tniter,\n-\t\t\tbuild_int_cst (type, 1, 0)));\n+\t\t\tbuild_int_cst (type, 1)));\n   incr_at = bsi_last (in->src);\n   create_iv (niter,\n \t     fold_convert (type, integer_minus_one_node),\n@@ -96,7 +96,7 @@ create_canonical_iv (struct loop *loop, edge exit, tree niter)\n   cmp = (exit->flags & EDGE_TRUE_VALUE) ? EQ_EXPR : NE_EXPR;\n   COND_EXPR_COND (cond) = build2 (cmp, boolean_type_node,\n \t\t\t\t  var,\n-\t\t\t\t  build_int_cst (type, 0, 0));\n+\t\t\t\t  build_int_cst (type, 0));\n   modify_stmt (cond);\n }\n \n@@ -221,7 +221,7 @@ canonicalize_loop_induction_variables (struct loops *loops, struct loop *loop,\n \t we expect (i.e. it returns number of executions of the exit\n \t condition, not of the loop latch edge).  */\n       niter = fold (build2 (MINUS_EXPR, TREE_TYPE (niter), niter,\n-\t\t\t    build_int_cst (TREE_TYPE (niter), 1, 0)));\n+\t\t\t    build_int_cst (TREE_TYPE (niter), 1)));\n     }\n   else if (try_eval)\n     niter = find_loop_niter_by_eval (loop, &exit);"}, {"sha": "2a66a6b7bb3709fb4fbcd015306c8594c9277e3c", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -351,7 +351,7 @@ number_of_iterations_cond (tree type, tree base0, tree step0,\n \t (inverse(s/d) * (c/d)) mod (size of mode/d).  */\n       s = step0;\n       d = integer_one_node;\n-      bound = convert (niter_type, build_int_cst (NULL_TREE, ~0, ~0));\n+      bound = convert (niter_type, build_int_cst (NULL_TREE, -1));\n       while (1)\n \t{\n \t  tmp = EXEC_BINARY (BIT_AND_EXPR, niter_type, s,\n@@ -370,7 +370,7 @@ number_of_iterations_cond (tree type, tree base0, tree step0,\n       assumption = fold (build2 (FLOOR_MOD_EXPR, niter_type, base1, d));\n       assumption = fold (build2 (EQ_EXPR, boolean_type_node,\n \t\t\t\t assumption,\n-\t\t\t\t build_int_cst (niter_type, 0, 0)));\n+\t\t\t\t build_int_cst (niter_type, 0)));\n       assumptions = fold (build2 (TRUTH_AND_EXPR, boolean_type_node,\n \t\t\t\t  assumptions, assumption));\n \n@@ -884,7 +884,7 @@ loop_niter_by_eval (struct loop *loop, edge exit)\n \t    fprintf (dump_file,\n \t\t     \"Proved that loop %d iterates %d times using brute force.\\n\",\n \t\t     loop->num, i);\n-\t  return build_int_cst (unsigned_type_node, i, 0);\n+\t  return build_int_cst (unsigned_type_node, i);\n \t}\n \n       for (j = 0; j < 2; j++)\n@@ -1098,7 +1098,7 @@ upper_bound_in_type (tree outer, tree inner)\n \n   return convert (outer,\n \t\t  convert (inner,\n-\t\t\t   build_int_cst (NULL_TREE, lo, hi)));\n+\t\t\t   build_int_cst_wide (NULL_TREE, lo, hi)));\n }\n \n /* Returns the smallest value obtainable by casting something in INNER type to\n@@ -1125,7 +1125,7 @@ lower_bound_in_type (tree outer, tree inner)\n \n   return convert (outer,\n \t\t  convert (inner,\n-\t\t\t   build_int_cst (NULL_TREE, lo, hi)));\n+\t\t\t   build_int_cst_wide (NULL_TREE, lo, hi)));\n }\n \n /* Returns true if statement S1 dominates statement S2.  */"}, {"sha": "34fbb9fde798f2ba18fb8b4ddefd60f86fe2ace5", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -560,7 +560,7 @@ vect_create_index_for_array_ref (tree stmt, block_stmt_iterator *bsi)\n     abort ();\t\n #endif\n \n-  vf = build_int_cst (unsigned_type_node, vectorization_factor, 0);\n+  vf = build_int_cst (unsigned_type_node, vectorization_factor);\n \n   if (vect_debug_details (NULL))\n     {\n@@ -1457,7 +1457,7 @@ vect_transform_loop_bound (loop_vec_info loop_vinfo)\n \n   /* new loop exit test:  */\n   lb_type = TREE_TYPE (TREE_OPERAND (TREE_OPERAND (orig_cond_expr, 0), 1));\n-  new_loop_bound = build_int_cst (lb_type, old_N/vf, 0);\n+  new_loop_bound = build_int_cst (lb_type, old_N/vf);\n \n   if (exit_edge->flags & EDGE_TRUE_VALUE) /* 'then' edge exits the loop.  */\n     cond = build2 (GE_EXPR, boolean_type_node, indx_after_incr, new_loop_bound);\n@@ -2190,7 +2190,7 @@ vect_compute_data_ref_alignment (struct data_reference *dr,\n   tree base_decl = NULL_TREE;\n   tree bit_offset = size_zero_node;\n   tree offset = size_zero_node;\n-  tree unit_bits = build_int_cst (unsigned_type_node, BITS_PER_UNIT, 0);\n+  tree unit_bits = build_int_cst (unsigned_type_node, BITS_PER_UNIT);\n   tree nunits;\n   tree alignment;\n \n@@ -2294,10 +2294,10 @@ vect_compute_data_ref_alignment (struct data_reference *dr,\n \n   /* alignment required, in bytes: */\n   alignment = build_int_cst (unsigned_type_node, \n-\t\t\t\tTYPE_ALIGN (vectype)/BITS_PER_UNIT, 0);\n+\t\t\t     TYPE_ALIGN (vectype)/BITS_PER_UNIT);\n   /* bytes per scalar element: */\n   nunits = build_int_cst (unsigned_type_node, \n-\t\t\t\tGET_MODE_SIZE (TYPE_MODE (scalar_type)), 0);\n+\t\t\t  GET_MODE_SIZE (TYPE_MODE (scalar_type)));\n \n   /* misalign = (offset + (init-array_first_index)*nunits) % alignment  */\n   if (vect_debug_details (NULL))"}, {"sha": "d56be7c6eecdb4544e758eeb789c945a6458313f", "filename": "gcc/tree.c", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -428,11 +428,26 @@ copy_list (tree list)\n }\n \n \f\n+/* Create an INT_CST node with a LOW value sign extended.  */\n+\n+tree build_int_cst (tree type, HOST_WIDE_INT low)\n+{\n+  return build_int_cst_wide (type, low,\n+\t\t\t     low < 0 ? -1 : 0);\n+}\n+\n+/* Create an INT_CST node with a LOW value zero extended.  */\n+\n+tree build_int_cstu (tree type, unsigned HOST_WIDE_INT low)\n+{\n+  return build_int_cst_wide (type, low, 0);\n+}\n+\n /* Create an INT_CST node of TYPE and value HI:LOW.  If TYPE is NULL,\n    integer_type_node is used.  */\n \n tree\n-build_int_cst (tree type, unsigned HOST_WIDE_INT low, HOST_WIDE_INT hi)\n+build_int_cst_wide (tree type, unsigned HOST_WIDE_INT low, HOST_WIDE_INT hi)\n {\n   tree t;\n   int ix = -1;\n@@ -5328,7 +5343,7 @@ make_vector_type (tree innertype, int nunits, enum machine_mode mode)\n   layout_type (t);\n \n   {\n-    tree index = build_int_cst (NULL_TREE, nunits - 1, 0);\n+    tree index = build_int_cst (NULL_TREE, nunits - 1);\n     tree array = build_array_type (innertype, build_index_type (index));\n     tree rt = make_node (RECORD_TYPE);\n \n@@ -5405,7 +5420,7 @@ build_common_tree_nodes (bool signed_char, bool signed_sizetype)\n      boolean_type_node before calling build_common_tree_nodes_2.  */\n   boolean_type_node = make_unsigned_type (BOOL_TYPE_SIZE);\n   TREE_SET_CODE (boolean_type_node, BOOLEAN_TYPE);\n-  TYPE_MAX_VALUE (boolean_type_node) = build_int_cst (boolean_type_node, 1, 0);\n+  TYPE_MAX_VALUE (boolean_type_node) = build_int_cst (boolean_type_node, 1);\n   TYPE_PRECISION (boolean_type_node) = 1;\n \n   /* Fill in the rest of the sized types.  Reuse existing type nodes\n@@ -5434,9 +5449,9 @@ void\n build_common_tree_nodes_2 (int short_double)\n {\n   /* Define these next since types below may used them.  */\n-  integer_zero_node = build_int_cst (NULL_TREE, 0, 0);\n-  integer_one_node = build_int_cst (NULL_TREE, 1, 0);\n-  integer_minus_one_node = build_int_cst (NULL_TREE, -1, -1);\n+  integer_zero_node = build_int_cst (NULL_TREE, 0);\n+  integer_one_node = build_int_cst (NULL_TREE, 1);\n+  integer_minus_one_node = build_int_cst (NULL_TREE, -1);\n \n   size_zero_node = size_int (0);\n   size_one_node = size_int (1);\n@@ -5455,8 +5470,7 @@ build_common_tree_nodes_2 (int short_double)\n   TYPE_ALIGN (void_type_node) = BITS_PER_UNIT;\n   TYPE_USER_ALIGN (void_type_node) = 0;\n \n-  null_pointer_node = build_int_cst (build_pointer_type (void_type_node),\n-\t\t\t\t     0, 0);\n+  null_pointer_node = build_int_cst (build_pointer_type (void_type_node), 0);\n   layout_type (TREE_TYPE (null_pointer_node));\n \n   ptr_type_node = build_pointer_type (void_type_node);"}, {"sha": "0c26e883d6cde6ad473b1e47048daa9d274703be", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d60be94d610cd5f18bc2ae64e4e97f210c8538b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7d60be94d610cd5f18bc2ae64e4e97f210c8538b", "patch": "@@ -2749,7 +2749,9 @@ extern tree build4_stat (enum tree_code, tree, tree, tree, tree,\n \t\t\t tree MEM_STAT_DECL);\n #define build4(c,t1,t2,t3,t4,t5) build4_stat (c,t1,t2,t3,t4,t5 MEM_STAT_INFO)\n \n-extern tree build_int_cst (tree, unsigned HOST_WIDE_INT, HOST_WIDE_INT);\n+extern tree build_int_cst (tree, HOST_WIDE_INT);\n+extern tree build_int_cstu (tree, unsigned HOST_WIDE_INT);\n+extern tree build_int_cst_wide (tree, unsigned HOST_WIDE_INT, HOST_WIDE_INT);\n extern tree build_vector (tree, tree);\n extern tree build_constructor (tree, tree);\n extern tree build_real_from_int_cst (tree, tree);"}]}