{"sha": "d574c8aafea40bd8759cb09031ff0dc6c250d8cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU3NGM4YWFmZWE0MGJkODc1OWNiMDkwMzFmZjBkYzZjMjUwZDhjZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-01-09T13:18:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2020-01-09T13:18:20Z"}, "message": "libstdc++: Define memory resource key functions non-inline (PR93208)\n\nThis prevents the vtables and RTTI from being emitted in every object\nfile that uses memory_resource and monotonic_buffer_resource.\n\nObjects compiled by GCC 9.1 or 9.2 will contain inline definitions of\nthe destructors, vtable and RTTI, but this is harmless. The inline\ndefinitions have identical effects to the ones that are now defined in\nlibstdc++.so so it doesn't matter if the inline ones are used instead of\ncalling the symbols exported from the runtime library.\n\n\tPR libstdc++/93208\n\t* config/abi/pre/gnu.ver: Add new exports.\n\t* include/std/memory_resource (memory_resource::~memory_resource()):\n\tDo not define inline.\n\t(monotonic_buffer_resource::~monotonic_buffer_resource()): Likewise.\n\t* src/c++17/memory_resource.cc (memory_resource::~memory_resource()):\n\tDefine.\n\t(monotonic_buffer_resource::~monotonic_buffer_resource()): Define.\n\t* testsuite/20_util/monotonic_buffer_resource/93208.cc: New test.\n\nFrom-SVN: r280044", "tree": {"sha": "2a9d4cb5cda8c0decff5dad89ba215ee2a114fb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a9d4cb5cda8c0decff5dad89ba215ee2a114fb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d574c8aafea40bd8759cb09031ff0dc6c250d8cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d574c8aafea40bd8759cb09031ff0dc6c250d8cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d574c8aafea40bd8759cb09031ff0dc6c250d8cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d574c8aafea40bd8759cb09031ff0dc6c250d8cf/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27c5a1779badd02b337af5887e26b5420fbf71c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c5a1779badd02b337af5887e26b5420fbf71c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27c5a1779badd02b337af5887e26b5420fbf71c7"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "331d01ea0d081902dbb649799c21a38d1af0d8a2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d574c8aafea40bd8759cb09031ff0dc6c250d8cf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d574c8aafea40bd8759cb09031ff0dc6c250d8cf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d574c8aafea40bd8759cb09031ff0dc6c250d8cf", "patch": "@@ -1,3 +1,15 @@\n+2020-01-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/93208\n+\t* config/abi/pre/gnu.ver: Add new exports.\n+\t* include/std/memory_resource (memory_resource::~memory_resource()):\n+\tDo not define inline.\n+\t(monotonic_buffer_resource::~monotonic_buffer_resource()): Likewise.\n+\t* src/c++17/memory_resource.cc (memory_resource::~memory_resource()):\n+\tDefine.\n+\t(monotonic_buffer_resource::~monotonic_buffer_resource()): Define.\n+\t* testsuite/20_util/monotonic_buffer_resource/93208.cc: New test.\n+\n 2020-01-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/92124"}, {"sha": "edf4485e6079558d39fc3d48119405bb66f4bb0a", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d574c8aafea40bd8759cb09031ff0dc6c250d8cf/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d574c8aafea40bd8759cb09031ff0dc6c250d8cf/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=d574c8aafea40bd8759cb09031ff0dc6c250d8cf", "patch": "@@ -2291,6 +2291,12 @@ GLIBCXX_3.4.28 {\n     _ZNSt12__shared_ptrINSt10filesystem28recursive_directory_iterator10_Dir_stackELN9__gnu_cxx12_Lock_policyE[012]EEC2EOS5_;\n     _ZNSt12__shared_ptrINSt10filesystem7__cxx1128recursive_directory_iterator10_Dir_stackELN9__gnu_cxx12_Lock_policyE[012]EEC2EOS6_;\n \n+    # key functions, vtables and rtti for memory resources\n+    _ZNSt3pmr15memory_resourceD[0125]Ev;\n+    _ZT[ISV]NSt3pmr15memory_resourceE;\n+    _ZNSt3pmr25monotonic_buffer_resourceD[0125]Ev;\n+    _ZT[ISV]NSt3pmr25monotonic_buffer_resourceE;\n+\n } GLIBCXX_3.4.27;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "13be3e9dc7540e342d7126a9cc1d990290286366", "filename": "libstdc++-v3/include/std/memory_resource", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d574c8aafea40bd8759cb09031ff0dc6c250d8cf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d574c8aafea40bd8759cb09031ff0dc6c250d8cf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource?ref=d574c8aafea40bd8759cb09031ff0dc6c250d8cf", "patch": "@@ -88,7 +88,7 @@ namespace pmr\n   public:\n     memory_resource() = default;\n     memory_resource(const memory_resource&) = default;\n-    virtual ~memory_resource() = default;\n+    virtual ~memory_resource(); // key function\n \n     memory_resource& operator=(const memory_resource&) = default;\n \n@@ -600,7 +600,7 @@ namespace pmr\n \n     monotonic_buffer_resource(const monotonic_buffer_resource&) = delete;\n \n-    virtual ~monotonic_buffer_resource() { release(); }\n+    virtual ~monotonic_buffer_resource(); // key function\n \n     monotonic_buffer_resource&\n     operator=(const monotonic_buffer_resource&) = delete;"}, {"sha": "37386cdddfd95827561a85c4a6da9ffe0c800fd0", "filename": "libstdc++-v3/src/c++17/memory_resource.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d574c8aafea40bd8759cb09031ff0dc6c250d8cf/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d574c8aafea40bd8759cb09031ff0dc6c250d8cf/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc?ref=d574c8aafea40bd8759cb09031ff0dc6c250d8cf", "patch": "@@ -37,6 +37,10 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n namespace pmr\n {\n+  // This was defined inline in 9.1 and 9.2 so code compiled by those\n+  // versions will not use this symbol.\n+  memory_resource::~memory_resource() = default;\n+\n   namespace\n   {\n     class newdel_res_t final : public memory_resource\n@@ -167,6 +171,10 @@ namespace pmr\n \n   // Member functions for std::pmr::monotonic_buffer_resource\n \n+  // This was defined inline in 9.1 and 9.2 so code compiled by those\n+  // versions will not use this symbol.\n+  monotonic_buffer_resource::~monotonic_buffer_resource() { release(); }\n+\n   // Memory allocated by the upstream resource is managed in a linked list\n   // of _Chunk objects. A _Chunk object recording the size and alignment of\n   // the allocated block and a pointer to the previous chunk is placed"}, {"sha": "b0cfdbddad2b15bc933fc4a2aa469b9d5ce56e97", "filename": "libstdc++-v3/testsuite/20_util/monotonic_buffer_resource/93208.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d574c8aafea40bd8759cb09031ff0dc6c250d8cf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmonotonic_buffer_resource%2F93208.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d574c8aafea40bd8759cb09031ff0dc6c250d8cf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmonotonic_buffer_resource%2F93208.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmonotonic_buffer_resource%2F93208.cc?ref=d574c8aafea40bd8759cb09031ff0dc6c250d8cf", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+// { dg-final { scan-assembler-not \"_ZT\\[IS\\]NSt3pmr15memory_resourceE\" } }\n+// { dg-final { scan-assembler-not \"_ZT\\[IS\\]NSt3pmr25monotonic\\[a-z_\\]*E\" } }\n+\n+#include <memory_resource>\n+\n+void* f(int n)\n+{\n+  std::pmr::monotonic_buffer_resource res;\n+  return res.allocate(n);\n+}"}]}