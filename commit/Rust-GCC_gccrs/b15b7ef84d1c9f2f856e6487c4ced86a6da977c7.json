{"sha": "b15b7ef84d1c9f2f856e6487c4ced86a6da977c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE1YjdlZjg0ZDFjOWYyZjg1NmU2NDg3YzRjZWQ4NmE2ZGE5NzdjNw==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2008-11-21T12:07:43Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2008-11-21T12:07:43Z"}, "message": "Object.m (errno): Replaced by errno.h include.\n\n2008-11-21  Kai Tietz  <kai.tietz@onevision.com>\n\n        *  Object.m (errno): Replaced by errno.h include.\n        (compare): Cast self to id to prevent warning on comparison.\n        * objc/objc.h (BOOL): Prevent redeclaration of BOOL, if it is\n        already there.\n        * sendmsg.c (__objc_print_dtable_stats): Remove type warnings.\n        * thr-win32.c (__objc_thread_detach): Remove type warning.\n        (__objc_thread_id): Likewise.\n        * thr.c (__objc_thread_detach_functiont): Add __builtin_trap ()\n        for noreturn.\n\nFrom-SVN: r142087", "tree": {"sha": "c34afc739ede871b04ed0871c5f5da770d62d0a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c34afc739ede871b04ed0871c5f5da770d62d0a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b15b7ef84d1c9f2f856e6487c4ced86a6da977c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15b7ef84d1c9f2f856e6487c4ced86a6da977c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b15b7ef84d1c9f2f856e6487c4ced86a6da977c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15b7ef84d1c9f2f856e6487c4ced86a6da977c7/comments", "author": null, "committer": null, "parents": [{"sha": "6b96ae3a28f6dff08a946ae48b8c33aae529fee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b96ae3a28f6dff08a946ae48b8c33aae529fee3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b96ae3a28f6dff08a946ae48b8c33aae529fee3"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "a3330eefdcd4997f51b2cf40a7ee1180d0fd7b7d", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b7ef84d1c9f2f856e6487c4ced86a6da977c7/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b7ef84d1c9f2f856e6487c4ced86a6da977c7/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=b15b7ef84d1c9f2f856e6487c4ced86a6da977c7", "patch": "@@ -1,3 +1,15 @@\n+2008-11-21  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t*  Object.m (errno): Replaced by errno.h include.\n+\t(compare): Cast self to id to prevent warning on comparison.\n+\t* objc/objc.h (BOOL): Prevent redeclaration of BOOL, if it is\n+\talready there.\n+\t* sendmsg.c (__objc_print_dtable_stats): Remove type warnings.\n+\t* thr-win32.c (__objc_thread_detach): Remove type warning.\n+\t(__objc_thread_id): Likewise.\n+\t* thr.c (__objc_thread_detach_functiont): Add __builtin_trap ()\n+\tfor noreturn.\n+\n 2008-09-26  Peter O'Gorman  <pogma@thewrittenword.com>\n             Steve Ellcey  <sje@cup.hp.com>\n "}, {"sha": "38016085b4f56aeecfcc83e494016e8b1517ed4f", "filename": "libobjc/Object.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b7ef84d1c9f2f856e6487c4ced86a6da977c7/libobjc%2FObject.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b7ef84d1c9f2f856e6487c4ced86a6da977c7/libobjc%2FObject.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FObject.m?ref=b15b7ef84d1c9f2f856e6487c4ced86a6da977c7", "patch": "@@ -25,12 +25,11 @@\n    executable file might be covered by the GNU General Public License. */\n \n #include <stdarg.h>\n+#include <errno.h>\n #include \"objc/Object.h\"\n #include \"objc/Protocol.h\"\n #include \"objc/objc-api.h\"\n \n-extern int errno;\n-\n #define MAX_CLASS_NAME_LEN 256\n \n @implementation Object\n@@ -121,7 +120,7 @@ - (int)compare:(id)anotherObject;\n     return 0;\n   // Ordering objects by their address is pretty useless, \n   // so subclasses should override this is some useful way.\n-  else if (self > anotherObject)\n+  else if ((id)self > anotherObject)\n     return 1;\n   else \n     return -1;"}, {"sha": "cc822edf5d37c693c4eab075e80e80e727e9cfc6", "filename": "libobjc/objc/objc.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b7ef84d1c9f2f856e6487c4ced86a6da977c7/libobjc%2Fobjc%2Fobjc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b7ef84d1c9f2f856e6487c4ced86a6da977c7/libobjc%2Fobjc%2Fobjc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc.h?ref=b15b7ef84d1c9f2f856e6487c4ced86a6da977c7", "patch": "@@ -39,6 +39,7 @@ extern \"C\" {\n #ifdef __vxworks\n typedef int BOOL;\n #else\n+#undef BOOL\n typedef unsigned char  BOOL;\n #endif\n #define YES   (BOOL)1"}, {"sha": "42d3e02af9fc62c6c4060c00488893ee05b495c1", "filename": "libobjc/sendmsg.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b7ef84d1c9f2f856e6487c4ced86a6da977c7/libobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b7ef84d1c9f2f856e6487c4ced86a6da977c7/libobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsendmsg.c?ref=b15b7ef84d1c9f2f856e6487c4ced86a6da977c7", "patch": "@@ -687,14 +687,14 @@ __objc_print_dtable_stats ()\n #endif\n \n   printf (\"arrays: %d = %ld bytes\\n\", narrays, \n-\t  (long) (narrays * sizeof (struct sarray)));\n+\t  (long) ((size_t) narrays * sizeof (struct sarray)));\n   total += narrays * sizeof (struct sarray);\n   printf (\"buckets: %d = %ld bytes\\n\", nbuckets, \n-\t  (long) (nbuckets * sizeof (struct sbucket)));\n+\t  (long) ((size_t) nbuckets * sizeof (struct sbucket)));\n   total += nbuckets * sizeof (struct sbucket);\n \n   printf (\"idxtables: %d = %ld bytes\\n\",\n-\t  idxsize, (long) (idxsize * sizeof (void *)));\n+\t  idxsize, (long) ((size_t) idxsize * sizeof (void *)));\n   total += idxsize * sizeof (void *);\n   printf (\"-----------------------------------\\n\");\n   printf (\"total: %d bytes\\n\", total);"}, {"sha": "35a1c9e6833c4acf24578768dcec15def6534343", "filename": "libobjc/thr-win32.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b7ef84d1c9f2f856e6487c4ced86a6da977c7/libobjc%2Fthr-win32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b7ef84d1c9f2f856e6487c4ced86a6da977c7/libobjc%2Fthr-win32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fthr-win32.c?ref=b15b7ef84d1c9f2f856e6487c4ced86a6da977c7", "patch": "@@ -70,7 +70,7 @@ __objc_thread_detach(void (*func)(void *arg), void *arg)\n                                    arg, 0, &thread_id)))\n     thread_id = 0;\n   \n-  return (objc_thread_t)thread_id;\n+  return (objc_thread_t)(size_t) thread_id;\n }\n \n /* Set the current thread's priority. */\n@@ -151,7 +151,7 @@ __objc_thread_exit(void)\n objc_thread_t\n __objc_thread_id(void)\n {\n-  return (objc_thread_t)GetCurrentThreadId();\n+  return (objc_thread_t)(size_t) GetCurrentThreadId();\n }\n \n /* Sets the thread's local storage pointer. */"}, {"sha": "c70c5bf5a01c3733212ccaeddec703bb37aae1be", "filename": "libobjc/thr.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15b7ef84d1c9f2f856e6487c4ced86a6da977c7/libobjc%2Fthr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15b7ef84d1c9f2f856e6487c4ced86a6da977c7/libobjc%2Fthr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fthr.c?ref=b15b7ef84d1c9f2f856e6487c4ced86a6da977c7", "patch": "@@ -114,6 +114,9 @@ __objc_thread_detach_function (struct __objc_thread_start_state *istate)\n \n   /* Exit the thread */\n   objc_thread_exit ();\n+  \n+  /* Make sure compiler detects no return.  */\n+  __builtin_trap ();\n }\n \n /*"}]}