{"sha": "e70f01b561a3d65baba2c981a4e162967e41285f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcwZjAxYjU2MWEzZDY1YmFiYTJjOTgxYTRlMTYyOTY3ZTQxMjg1Zg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-09-23T07:55:57Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-09-23T07:55:57Z"}, "message": "re PR target/71652 (ICE in in ix86_target_macros_internal, at config/i386/i386-c.c:187)\n\nFix PR target/71652\n\n\tPR target/71652\n\t* config/i386/i386.c (ix86_option_override_internal): Change\n\tsignature and return false when there's an error related to\n\tarch string.\n\t(release_options_strings): New function.\n\t(ix86_valid_target_attribute_tree): Call the function.\n\t* gcc.target/i386/pr71652.c: New test.\n\t* gcc.target/i386/pr71652-2.c: New test.\n\t* gcc.target/i386/pr71652-3.c: New test.\n\nFrom-SVN: r240392", "tree": {"sha": "510a28f026e1bf9bedf58f6d652a13fe520e0929", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/510a28f026e1bf9bedf58f6d652a13fe520e0929"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e70f01b561a3d65baba2c981a4e162967e41285f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e70f01b561a3d65baba2c981a4e162967e41285f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e70f01b561a3d65baba2c981a4e162967e41285f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e70f01b561a3d65baba2c981a4e162967e41285f/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f2e81d0585673e93f4225599f190c6764ddb0fec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2e81d0585673e93f4225599f190c6764ddb0fec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2e81d0585673e93f4225599f190c6764ddb0fec"}], "stats": {"total": 125, "additions": 102, "deletions": 23}, "files": [{"sha": "d3ba1c2981040022b351f0f141c4a5a2769ba76a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e70f01b561a3d65baba2c981a4e162967e41285f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e70f01b561a3d65baba2c981a4e162967e41285f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e70f01b561a3d65baba2c981a4e162967e41285f", "patch": "@@ -1,3 +1,12 @@\n+2016-09-23  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/71652\n+\t* config/i386/i386.c (ix86_option_override_internal): Change\n+\tsignature and return false when there's an error related to\n+\tarch string.\n+\t(release_options_strings): New function.\n+\t(ix86_valid_target_attribute_tree): Call the function.\n+\n 2016-09-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* hsa-gen.c (hsa_op_immed::hsa_op_immed Use CONSTRUCTOR_NELTS (...)"}, {"sha": "2dcd5699a7021c8dee0ee1d52a7bdc7766b1092c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 47, "deletions": 23, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e70f01b561a3d65baba2c981a4e162967e41285f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e70f01b561a3d65baba2c981a4e162967e41285f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e70f01b561a3d65baba2c981a4e162967e41285f", "patch": "@@ -4731,9 +4731,10 @@ ix86_override_options_after_change (void)\n \n /* Override various settings based on options.  If MAIN_ARGS_P, the\n    options are from the command line, otherwise they are from\n-   attributes.  */\n+   attributes.  Return true if there's an error related to march\n+   option.  */\n \n-static void\n+static bool\n ix86_option_override_internal (bool main_args_p,\n \t\t\t       struct gcc_options *opts,\n \t\t\t       struct gcc_options *opts_set)\n@@ -5262,16 +5263,36 @@ ix86_option_override_internal (bool main_args_p,\n   for (i = 0; i < pta_size; i++)\n     if (! strcmp (opts->x_ix86_arch_string, processor_alias_table[i].name))\n       {\n+\tif (!strcmp (opts->x_ix86_arch_string, \"generic\"))\n+\t  {\n+\t    error (main_args_p\n+\t\t  ? \"%<generic%> CPU can be used only for %<-mtune=%> switch\"\n+\t\t  : \"%<generic%> CPU can be used only for \"\n+\t\t    \"%<target(\\\"tune=\\\")%> attribute\");\n+\t    return false;\n+\t  }\n+\telse if (!strcmp (opts->x_ix86_arch_string, \"intel\"))\n+\t  {\n+\t    error (main_args_p\n+\t\t  ? \"%<intel%> CPU can be used only for %<-mtune=%> switch\"\n+\t\t  : \"%<intel%> CPU can be used only for \"\n+\t\t    \"%<target(\\\"tune=\\\")%> attribute\");\n+\t    return false;\n+\t  }\n+\n+\tif (TARGET_64BIT_P (opts->x_ix86_isa_flags)\n+\t    && !(processor_alias_table[i].flags & PTA_64BIT))\n+\t  {\n+\t    error (\"CPU you selected does not support x86-64 \"\n+\t\t   \"instruction set\");\n+\t    return false;\n+\t  }\n+\n \tix86_schedule = processor_alias_table[i].schedule;\n \tix86_arch = processor_alias_table[i].processor;\n \t/* Default cpu tuning to the architecture.  */\n \tix86_tune = ix86_arch;\n \n-\tif (TARGET_64BIT_P (opts->x_ix86_isa_flags)\n-\t    && !(processor_alias_table[i].flags & PTA_64BIT))\n-\t  error (\"CPU you selected does not support x86-64 \"\n-\t\t \"instruction set\");\n-\n \tif (processor_alias_table[i].flags & PTA_MMX\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_MMX))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_MMX;\n@@ -5469,17 +5490,7 @@ ix86_option_override_internal (bool main_args_p,\n   if (TARGET_X32 && (ix86_isa_flags & OPTION_MASK_ISA_MPX))\n     error (\"Intel MPX does not support x32\");\n \n-  if (!strcmp (opts->x_ix86_arch_string, \"generic\"))\n-    error (main_args_p\n-\t   ? \"%<generic%> CPU can be used only for %<-mtune=%> switch\"\n-\t   : \"%<generic%> CPU can be used only for \"\n-\t     \"%<target(\\\"tune=\\\")%> attribute\");\n-  else if (!strcmp (opts->x_ix86_arch_string, \"intel\"))\n-    error (main_args_p\n-\t   ? \"%<intel%> CPU can be used only for %<-mtune=%> switch\"\n-\t   : \"%<intel%> CPU can be used only for \"\n-\t     \"%<target(\\\"tune=\\\")%> attribute\");\n-  else if (i == pta_size)\n+  if (i == pta_size)\n     {\n       error (main_args_p\n \t     ? \"bad value (%qs) for %<-march=%> switch\"\n@@ -6134,6 +6145,8 @@ ix86_option_override_internal (bool main_args_p,\n       ix86_parse_stringop_strategy_string (str, true);\n       free (str);\n     }\n+\n+  return true;\n }\n \n /* Implement the TARGET_OPTION_OVERRIDE hook.  */\n@@ -6728,6 +6741,15 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n   return ret;\n }\n \n+/* Release allocated strings.  */\n+static void\n+release_options_strings (char **option_strings)\n+{\n+  /* Free up memory allocated to hold the strings */\n+  for (unsigned i = 0; i < IX86_FUNCTION_SPECIFIC_MAX; i++)\n+    free (option_strings[i]);\n+}\n+\n /* Return a TARGET_OPTION_NODE tree of the target options listed or NULL.  */\n \n tree\n@@ -6742,7 +6764,6 @@ ix86_valid_target_attribute_tree (tree args,\n   int orig_arch_specified = ix86_arch_specified;\n   char *option_strings[IX86_FUNCTION_SPECIFIC_MAX] = { NULL, NULL };\n   tree t = NULL_TREE;\n-  int i;\n   struct cl_target_option *def\n     = TREE_TARGET_OPTION (target_option_default_node);\n   struct gcc_options enum_opts_set;\n@@ -6803,7 +6824,12 @@ ix86_valid_target_attribute_tree (tree args,\n \t}\n \n       /* Do any overrides, such as arch=xxx, or tune=xxx support.  */\n-      ix86_option_override_internal (false, opts, opts_set);\n+      bool r = ix86_option_override_internal (false, opts, opts_set);\n+      if (!r)\n+\t{\n+\t  release_options_strings (option_strings);\n+\t  return error_mark_node;\n+\t}\n \n       /* Add any builtin functions with the new isa if any.  */\n       ix86_add_new_builtins (opts->x_ix86_isa_flags);\n@@ -6816,9 +6842,7 @@ ix86_valid_target_attribute_tree (tree args,\n       opts->x_ix86_tune_string = orig_tune_string;\n       opts_set->x_ix86_fpmath = orig_fpmath_set;\n \n-      /* Free up memory allocated to hold the strings */\n-      for (i = 0; i < IX86_FUNCTION_SPECIFIC_MAX; i++)\n-\tfree (option_strings[i]);\n+      release_options_strings (option_strings);\n     }\n \n   return t;"}, {"sha": "6b6693efa943acc4e19042db8922c06077fbb477", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e70f01b561a3d65baba2c981a4e162967e41285f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e70f01b561a3d65baba2c981a4e162967e41285f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e70f01b561a3d65baba2c981a4e162967e41285f", "patch": "@@ -1,3 +1,9 @@\n+2016-09-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.target/i386/pr71652.c: New test.\n+\t* gcc.target/i386/pr71652-2.c: New test.\n+\t* gcc.target/i386/pr71652-3.c: New test.\n+\n 2016-09-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* lib/gcc-dg.exp (process-message): Support relative line number"}, {"sha": "6c8eaf18d6d81eb28e829ab9f40b8401e9d1fb5b", "filename": "gcc/testsuite/gcc.target/i386/pr71652-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e70f01b561a3d65baba2c981a4e162967e41285f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71652-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e70f01b561a3d65baba2c981a4e162967e41285f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71652-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71652-2.c?ref=e70f01b561a3d65baba2c981a4e162967e41285f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=intel\") /* { dg-error \"'intel' CPU can be used only for 'target\\\\(\\\"tune=\\\"\\\\)' attribute\" } */\n+\n+__attribute__((constructor)) void foo()\n+{\n+  asm (\"\");\n+}\n+\n+#pragma GCC pop_options\n+\n+int main() { return 0; }"}, {"sha": "ba99a3ea9d808912464c04f2516dc2c670afc87b", "filename": "gcc/testsuite/gcc.target/i386/pr71652-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e70f01b561a3d65baba2c981a4e162967e41285f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71652-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e70f01b561a3d65baba2c981a4e162967e41285f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71652-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71652-3.c?ref=e70f01b561a3d65baba2c981a4e162967e41285f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-march=haswell\" } */\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=geode\") /* { dg-error \"CPU you selected does not support x86-64 instruction set\" } */\n+\n+__attribute__((constructor)) void foo()\n+{\n+  asm (\"\");\n+}\n+\n+#pragma GCC pop_options\n+\n+int main() { return 0; }"}, {"sha": "a6b04db600c75482340b23419d016644b7a43a8a", "filename": "gcc/testsuite/gcc.target/i386/pr71652.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e70f01b561a3d65baba2c981a4e162967e41285f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71652.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e70f01b561a3d65baba2c981a4e162967e41285f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71652.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71652.c?ref=e70f01b561a3d65baba2c981a4e162967e41285f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=generic\") /* { dg-error \"'generic' CPU can be used only for 'target\\\\(\\\"tune=\\\"\\\\)' attribute\" } */\n+\n+__attribute__((constructor)) void foo()\n+{\n+  asm (\"\");\n+}\n+\n+#pragma GCC pop_options\n+\n+int main() { return 0; }"}]}