{"sha": "9b678d960153d0d2b24ad300a93018ad6e813eda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI2NzhkOTYwMTUzZDBkMmIyNGFkMzAwYTkzMDE4YWQ2ZTgxM2VkYQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2008-05-20T21:23:08Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2008-05-20T21:23:08Z"}, "message": "avr.h (machine_function): Add 'is_OS_main' field.\n\n\t* config/avr/avr.h (machine_function): Add 'is_OS_main' field.\n\t* config/avr/avr.c (avr_OS_main_function_p): Add new function.\n\t(avr_attribute_table): Add 'OS_main' function attribute.\n\t(avr_regs_to_save, expand_prologue, expand_epilogue): Handle\n\tfunctions with 'OS_main' attribute.\n\nFrom-SVN: r135681", "tree": {"sha": "d455bc879e35c4b2d758d86cf249ce5132469a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d455bc879e35c4b2d758d86cf249ce5132469a48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b678d960153d0d2b24ad300a93018ad6e813eda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b678d960153d0d2b24ad300a93018ad6e813eda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b678d960153d0d2b24ad300a93018ad6e813eda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b678d960153d0d2b24ad300a93018ad6e813eda/comments", "author": null, "committer": null, "parents": [{"sha": "ede2e423f8612d5a09c1d34cdf1c5f90763519ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede2e423f8612d5a09c1d34cdf1c5f90763519ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ede2e423f8612d5a09c1d34cdf1c5f90763519ba"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "676369520a83b35a263f4c1bc0c688a3e3d05d39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b678d960153d0d2b24ad300a93018ad6e813eda/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b678d960153d0d2b24ad300a93018ad6e813eda/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b678d960153d0d2b24ad300a93018ad6e813eda", "patch": "@@ -1,3 +1,11 @@\n+2008-05-20  Anatoly Sokolov <aesok@post.ru>\n+\n+\t* config/avr/avr.h (machine_function): Add 'is_OS_main' field.\n+\t* config/avr/avr.c (avr_OS_main_function_p): Add new function.\n+\t(avr_attribute_table): Add 'OS_main' function attribute.\n+\t(avr_regs_to_save, expand_prologue, expand_epilogue): Handle\n+\tfunctions with 'OS_main' attribute.\n+\n 2008-05-20  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/35204"}, {"sha": "1293a4b3463feb2cfd58a6320eb127c50e262560", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b678d960153d0d2b24ad300a93018ad6e813eda/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b678d960153d0d2b24ad300a93018ad6e813eda/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=9b678d960153d0d2b24ad300a93018ad6e813eda", "patch": "@@ -52,6 +52,7 @@ static int avr_naked_function_p (tree);\n static int interrupt_function_p (tree);\n static int signal_function_p (tree);\n static int avr_OS_task_function_p (tree);\n+static int avr_OS_main_function_p (tree);\n static int avr_regs_to_save (HARD_REG_SET *);\n static int sequent_regs_live (void);\n static const char *ptrreg_to_str (int);\n@@ -446,6 +447,19 @@ avr_OS_task_function_p (tree func)\n   return a != NULL_TREE;\n }\n \n+/* Return nonzero if FUNC is a OS_main function.  */\n+\n+static int\n+avr_OS_main_function_p (tree func)\n+{\n+  tree a;\n+\n+  gcc_assert (TREE_CODE (func) == FUNCTION_DECL);\n+  \n+  a = lookup_attribute (\"OS_main\", TYPE_ATTRIBUTES (TREE_TYPE (func)));\n+  return a != NULL_TREE;\n+}\n+\n /* Return the number of hard registers to push/pop in the prologue/epilogue\n    of the current function, and optionally store these registers in SET.  */\n \n@@ -464,9 +478,10 @@ avr_regs_to_save (HARD_REG_SET *set)\n   count = 0;\n \n   /* No need to save any registers if the function never returns or \n-     is have \"OS_task\" attribute.  */\n+     is have \"OS_task\" or \"OS_main\" attribute.  */\n   if (TREE_THIS_VOLATILE (current_function_decl)\n-      || cfun->machine->is_OS_task)\n+      || cfun->machine->is_OS_task\n+      || cfun->machine->is_OS_main)\n     return 0;\n \n   for (reg = 0; reg < 32; reg++)\n@@ -593,6 +608,7 @@ expand_prologue (void)\n   cfun->machine->is_interrupt = interrupt_function_p (current_function_decl);\n   cfun->machine->is_signal = signal_function_p (current_function_decl);\n   cfun->machine->is_OS_task = avr_OS_task_function_p (current_function_decl);\n+  cfun->machine->is_OS_main = avr_OS_main_function_p (current_function_decl);\n   \n   /* Prologue: naked.  */\n   if (cfun->machine->is_naked)\n@@ -606,6 +622,7 @@ expand_prologue (void)\n \t      && !cfun->machine->is_interrupt\n \t      && !cfun->machine->is_signal\n \t      && !cfun->machine->is_OS_task\n+\t      && !cfun->machine->is_OS_main\n \t      && live_seq);\n \n   if (cfun->machine->is_interrupt || cfun->machine->is_signal)\n@@ -675,7 +692,7 @@ expand_prologue (void)\n         }\n       if (frame_pointer_needed)\n         {\n-\t  if(!cfun->machine->is_OS_task)\n+\t  if (!(cfun->machine->is_OS_task || cfun->machine->is_OS_main))\n \t    {\n               /* Push frame pointer.  */\n \t      insn = emit_move_insn (pushword, frame_pointer_rtx);\n@@ -829,6 +846,7 @@ expand_epilogue (void)\n \t      && !cfun->machine->is_interrupt\n \t      && !cfun->machine->is_signal\n \t      && !cfun->machine->is_OS_task\n+\t      && !cfun->machine->is_OS_main\n \t      && live_seq);\n   \n   if (minimize && (frame_pointer_needed || live_seq > 4))\n@@ -891,7 +909,7 @@ expand_epilogue (void)\n                   emit_move_insn (stack_pointer_rtx, frame_pointer_rtx);\n                 }\n             }\n-\t  if(!cfun->machine->is_OS_task)\n+\t  if (!(cfun->machine->is_OS_task || cfun->machine->is_OS_main))\n \t    {\n               /* Restore previous frame_pointer.  */\n \t      emit_insn (gen_pophi (frame_pointer_rtx));\n@@ -4593,6 +4611,7 @@ const struct attribute_spec avr_attribute_table[] =\n   { \"interrupt\", 0, 0, true,  false, false,  avr_handle_fndecl_attribute },\n   { \"naked\",     0, 0, false, true,  true,   avr_handle_fntype_attribute },\n   { \"OS_task\",   0, 0, false, true,  true,   avr_handle_fntype_attribute },\n+  { \"OS_main\",   0, 0, false, true,  true,   avr_handle_fntype_attribute },\n   { NULL,        0, 0, false, false, false, NULL }\n };\n "}, {"sha": "4cd0f24517e7cca7d9b1867821ff0bcb5e527a0f", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b678d960153d0d2b24ad300a93018ad6e813eda/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b678d960153d0d2b24ad300a93018ad6e813eda/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=9b678d960153d0d2b24ad300a93018ad6e813eda", "patch": "@@ -1042,7 +1042,11 @@ struct machine_function GTY(())\n      as specified by the \"signal\" attribute.  */\n   int is_signal;\n   \n-  /* 'true' - if current function is a signal function \n+  /* 'true' - if current function is a 'task' function \n      as specified by the \"OS_task\" attribute.  */\n   int is_OS_task;\n+\n+  /* 'true' - if current function is a 'main' function \n+     as specified by the \"OS_main\" attribute.  */\n+  int is_OS_main;\n };"}]}