{"sha": "7c88e46a270212180767fc585dd190b7713702db", "node_id": "C_kwDOANBUbNoAKDdjODhlNDZhMjcwMjEyMTgwNzY3ZmM1ODVkZDE5MGI3NzEzNzAyZGI", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2022-03-03T22:35:31Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-16T08:42:03Z"}, "message": "[Ada] Implement component finalization ordering rules for type extensions\n\nFinalization of a record object is required to finalize any components\nthat have an access discriminant constrained by a per-object expression\nbefore other components. This includes the case of a type extension;\n\"early finalization\" components of the parent type are required to be\nfinalized before non-early-finalization extension components. This is\nimplemented in the extension type's finalization procedure by placing\nthe call to the parent type's finalization procedure between the\nfinalization of the \"early finalization\" extension components and the\nfinalization of the other extension components. Previously that call was\nexecuted after finalizing all of the extension conponents.\n\ngcc/ada/\n\n\t* exp_ch7.adb (Build_Finalize_Statements): Add Last_POC_Call\n\tvariable to keep track of the last \"early finalization\" call\n\tgenerated for type extension's finalization procedure. If\n\tnon-empty, then this will indicate the point at which to insert\n\tthe call to the parent type's finalization procedure. Modify\n\tnested function Process_Component_List_For_Finalize to set this\n\tvariable (and avoid setting it during a recursive call).  If\n\tLast_POC_Call is empty, then insert the parent finalization call\n\tbefore, rather than after, the finalization code for the\n\textension components.", "tree": {"sha": "8c8df550b477a71d7cbf40e3e36cef252824bcc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c8df550b477a71d7cbf40e3e36cef252824bcc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c88e46a270212180767fc585dd190b7713702db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c88e46a270212180767fc585dd190b7713702db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c88e46a270212180767fc585dd190b7713702db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c88e46a270212180767fc585dd190b7713702db/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "909ce3528c800676fbbebe1f9a0047d14378861e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/909ce3528c800676fbbebe1f9a0047d14378861e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/909ce3528c800676fbbebe1f9a0047d14378861e"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "ff7eefa66842096ba1c2c1a6d463fc9fba9f217b", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 47, "deletions": 5, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c88e46a270212180767fc585dd190b7713702db/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c88e46a270212180767fc585dd190b7713702db/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=7c88e46a270212180767fc585dd190b7713702db", "patch": "@@ -8273,19 +8273,23 @@ package body Exp_Ch7 is\n \n          Counter        : Nat := 0;\n          Finalizer_Data : Finalization_Exception_Data;\n+         Last_POC_Call  : Node_Id := Empty;\n \n          function Process_Component_List_For_Finalize\n-           (Comps : Node_Id) return List_Id;\n+           (Comps           : Node_Id;\n+            In_Variant_Part : Boolean := False) return List_Id;\n          --  Build all necessary finalization statements for a single component\n          --  list. The statements may include a jump circuitry if flag Is_Local\n-         --  is enabled.\n+         --  is enabled. In_Variant_Part indicates whether this is a recursive\n+         --  call.\n \n          -----------------------------------------\n          -- Process_Component_List_For_Finalize --\n          -----------------------------------------\n \n          function Process_Component_List_For_Finalize\n-           (Comps : Node_Id) return List_Id\n+           (Comps           : Node_Id;\n+            In_Variant_Part : Boolean := False) return List_Id\n          is\n             procedure Process_Component_For_Finalize\n               (Decl      : Node_Id;\n@@ -8467,7 +8471,8 @@ package body Exp_Ch7 is\n                            New_Copy_List (Discrete_Choices (Var)),\n                          Statements =>\n                            Process_Component_List_For_Finalize (\n-                             Component_List (Var))));\n+                             Component_List (Var),\n+                             In_Variant_Part => True)));\n \n                      Next_Non_Pragma (Var);\n                   end loop;\n@@ -8534,6 +8539,12 @@ package body Exp_Ch7 is\n                end loop;\n             end if;\n \n+            if not In_Variant_Part then\n+               Last_POC_Call := Last (Stmts);\n+               --  In the case of a type extension, the deep-finalize call\n+               --  for the _Parent component will be inserted here.\n+            end if;\n+\n             --  Process the rest of the components in reverse order\n \n             Decl := Last_Non_Pragma (Component_Items (Comps));\n@@ -8749,7 +8760,38 @@ package body Exp_Ch7 is\n                                     (Finalizer_Data))));\n                      end if;\n \n-                     Append_To (Bod_Stmts, Fin_Stmt);\n+                     --  The intended component finalization order is\n+                     --    1) POC components of extension\n+                     --    2) _Parent component\n+                     --    3) non-POC components of extension.\n+                     --\n+                     --  With this \"finalize the parent part in the middle\"\n+                     --  ordering, we can avoid the need for making two\n+                     --  calls to the parent's subprogram in the way that\n+                     --  is necessary for Init_Procs. This does have the\n+                     --  peculiar (but legal) consequence that the parent's\n+                     --  non-POC components are finalized before the\n+                     --  non-POC extension components. This violates the\n+                     --  usual \"finalize in reverse declaration order\"\n+                     --  principle, but that's ok (see Ada RM 7.6.1(9)).\n+                     --\n+                     --  Last_POC_Call should be non-empty if the extension\n+                     --  has at least one POC. Interactions with variant\n+                     --  parts are incorrectly ignored.\n+\n+                     if Present (Last_POC_Call) then\n+                        Insert_After (Last_POC_Call, Fin_Stmt);\n+                     else\n+                        --  At this point, we could look for the common case\n+                        --  where there are no POC components anywhere in\n+                        --  sight (inherited or not) and, in that common case,\n+                        --  call Append_To instead of Prepend_To. That would\n+                        --  result in finalizing the parent part after, rather\n+                        --  than before, the extension components. That might\n+                        --  be more intuitive (as discussed in preceding\n+                        --  comment), but it is not required.\n+                        Prepend_To (Bod_Stmts, Fin_Stmt);\n+                     end if;\n                   end if;\n                end if;\n             end;"}]}