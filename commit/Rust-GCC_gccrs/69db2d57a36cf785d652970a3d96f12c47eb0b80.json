{"sha": "69db2d57a36cf785d652970a3d96f12c47eb0b80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlkYjJkNTdhMzZjZjc4NWQ2NTI5NzBhM2Q5NmYxMmM0N2ViMGI4MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-09-09T13:07:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-09-09T13:07:10Z"}, "message": "asan.c (asan_emit_stack_protection): Use gen_int_mode instead of GEN_INT.\n\ngcc/\n\t* asan.c (asan_emit_stack_protection): Use gen_int_mode instead of\n\tGEN_INT.\n\t* builtins.c (expand_errno_check): Likewise.\n\t* dwarf2cfi.c (init_return_column_size): Likewise.\n\t* except.c (sjlj_mark_call_sites): Likewise.\n\t* expr.c (move_by_pieces_1, store_by_pieces_2): Likewise.\n\t* lra-constraints.c (emit_inc): Likewise.\n\t* ree.c (combine_set_extension): Likewise.\n\t* regmove.c (fixup_match_2): Likewise.\n\t* reload1.c (inc_for_reload): Likewise.\n\nFrom-SVN: r202394", "tree": {"sha": "fdde063e9a6ea15cd08c000aff12369fe5e168b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdde063e9a6ea15cd08c000aff12369fe5e168b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69db2d57a36cf785d652970a3d96f12c47eb0b80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69db2d57a36cf785d652970a3d96f12c47eb0b80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69db2d57a36cf785d652970a3d96f12c47eb0b80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69db2d57a36cf785d652970a3d96f12c47eb0b80/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "69a59f0fa9b65198e4c1f87265105d396a598ea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69a59f0fa9b65198e4c1f87265105d396a598ea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69a59f0fa9b65198e4c1f87265105d396a598ea5"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "dc7f1af7c1eb13cb431a54cc5186a59c7fe1a54e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69db2d57a36cf785d652970a3d96f12c47eb0b80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69db2d57a36cf785d652970a3d96f12c47eb0b80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69db2d57a36cf785d652970a3d96f12c47eb0b80", "patch": "@@ -1,3 +1,16 @@\n+2013-09-09  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* asan.c (asan_emit_stack_protection): Use gen_int_mode instead of\n+\tGEN_INT.\n+\t* builtins.c (expand_errno_check): Likewise.\n+\t* dwarf2cfi.c (init_return_column_size): Likewise.\n+\t* except.c (sjlj_mark_call_sites): Likewise.\n+\t* expr.c (move_by_pieces_1, store_by_pieces_2): Likewise.\n+\t* lra-constraints.c (emit_inc): Likewise.\n+\t* ree.c (combine_set_extension): Likewise.\n+\t* regmove.c (fixup_match_2): Likewise.\n+\t* reload1.c (inc_for_reload): Likewise.\n+\n 2013-09-09  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* combine.c (simplify_set, expand_field_assignment, extract_left_shift)"}, {"sha": "afe5260223282f2e4160a5542b3a4557bc36fba6", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69db2d57a36cf785d652970a3d96f12c47eb0b80/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69db2d57a36cf785d652970a3d96f12c47eb0b80/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=69db2d57a36cf785d652970a3d96f12c47eb0b80", "patch": "@@ -970,7 +970,7 @@ asan_emit_stack_protection (rtx base, HOST_WIDE_INT *offsets, tree *decls,\n \t\t       gen_int_mode (base_offset, Pmode),\n \t\t       NULL_RTX, 1, OPTAB_DIRECT);\n   mem = gen_rtx_MEM (ptr_mode, base);\n-  emit_move_insn (mem, GEN_INT (ASAN_STACK_FRAME_MAGIC));\n+  emit_move_insn (mem, gen_int_mode (ASAN_STACK_FRAME_MAGIC, ptr_mode));\n   mem = adjust_address (mem, VOIDmode, GET_MODE_SIZE (ptr_mode));\n   emit_move_insn (mem, expand_normal (str_cst));\n   shadow_base = expand_binop (Pmode, lshr_optab, base,"}, {"sha": "3cee9e9282d3d6e84f9c2116801010bd5fc62760", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69db2d57a36cf785d652970a3d96f12c47eb0b80/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69db2d57a36cf785d652970a3d96f12c47eb0b80/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=69db2d57a36cf785d652970a3d96f12c47eb0b80", "patch": "@@ -1967,7 +1967,8 @@ expand_errno_check (tree exp, rtx target)\n       rtx errno_rtx\n \t  = gen_rtx_MEM (word_mode, gen_rtx_SYMBOL_REF (Pmode, \"errno\"));\n #endif\n-      emit_move_insn (errno_rtx, GEN_INT (TARGET_EDOM));\n+      emit_move_insn (errno_rtx,\n+\t\t      gen_int_mode (TARGET_EDOM, GET_MODE (errno_rtx)));\n       emit_label (lab);\n       return;\n     }"}, {"sha": "12256bcec39bad0989e467248caf3cd0e657e9ff", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69db2d57a36cf785d652970a3d96f12c47eb0b80/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69db2d57a36cf785d652970a3d96f12c47eb0b80/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=69db2d57a36cf785d652970a3d96f12c47eb0b80", "patch": "@@ -246,7 +246,8 @@ init_return_column_size (enum machine_mode mode, rtx mem, unsigned int c)\n {\n   HOST_WIDE_INT offset = c * GET_MODE_SIZE (mode);\n   HOST_WIDE_INT size = GET_MODE_SIZE (Pmode);\n-  emit_move_insn (adjust_address (mem, mode, offset), GEN_INT (size));\n+  emit_move_insn (adjust_address (mem, mode, offset),\n+\t\t  gen_int_mode (size, mode));\n }\n \n /* Generate code to initialize the register size table.  */"}, {"sha": "c4ed944cf7addff288797e326b278f539e9317dd", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69db2d57a36cf785d652970a3d96f12c47eb0b80/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69db2d57a36cf785d652970a3d96f12c47eb0b80/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=69db2d57a36cf785d652970a3d96f12c47eb0b80", "patch": "@@ -1156,7 +1156,7 @@ sjlj_mark_call_sites (void)\n       start_sequence ();\n       mem = adjust_address (crtl->eh.sjlj_fc, TYPE_MODE (integer_type_node),\n \t\t\t    sjlj_fc_call_site_ofs);\n-      emit_move_insn (mem, GEN_INT (this_call_site));\n+      emit_move_insn (mem, gen_int_mode (this_call_site, GET_MODE (mem)));\n       p = get_insns ();\n       end_sequence ();\n "}, {"sha": "0887391ca38bf9340bf311412e45852cec098f60", "filename": "gcc/expr.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69db2d57a36cf785d652970a3d96f12c47eb0b80/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69db2d57a36cf785d652970a3d96f12c47eb0b80/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=69db2d57a36cf785d652970a3d96f12c47eb0b80", "patch": "@@ -1071,10 +1071,12 @@ move_by_pieces_1 (insn_gen_fn genfun, machine_mode mode,\n \n       if (HAVE_PRE_DECREMENT && data->explicit_inc_to < 0)\n \temit_insn (gen_add2_insn (data->to_addr,\n-\t\t\t\t  GEN_INT (-(HOST_WIDE_INT)size)));\n+\t\t\t\t  gen_int_mode (-(HOST_WIDE_INT) size,\n+\t\t\t\t\t\tGET_MODE (data->to_addr))));\n       if (HAVE_PRE_DECREMENT && data->explicit_inc_from < 0)\n \temit_insn (gen_add2_insn (data->from_addr,\n-\t\t\t\t  GEN_INT (-(HOST_WIDE_INT)size)));\n+\t\t\t\t  gen_int_mode (-(HOST_WIDE_INT) size,\n+\t\t\t\t\t\tGET_MODE (data->from_addr))));\n \n       if (data->to)\n \temit_insn ((*genfun) (to1, from1));\n@@ -1088,9 +1090,13 @@ move_by_pieces_1 (insn_gen_fn genfun, machine_mode mode,\n \t}\n \n       if (HAVE_POST_INCREMENT && data->explicit_inc_to > 0)\n-\temit_insn (gen_add2_insn (data->to_addr, GEN_INT (size)));\n+\temit_insn (gen_add2_insn (data->to_addr,\n+\t\t\t\t  gen_int_mode (size,\n+\t\t\t\t\t\tGET_MODE (data->to_addr))));\n       if (HAVE_POST_INCREMENT && data->explicit_inc_from > 0)\n-\temit_insn (gen_add2_insn (data->from_addr, GEN_INT (size)));\n+\temit_insn (gen_add2_insn (data->from_addr,\n+\t\t\t\t  gen_int_mode (size,\n+\t\t\t\t\t\tGET_MODE (data->from_addr))));\n \n       if (! data->reverse)\n \tdata->offset += size;\n@@ -2676,13 +2682,16 @@ store_by_pieces_2 (insn_gen_fn genfun, machine_mode mode,\n \n       if (HAVE_PRE_DECREMENT && data->explicit_inc_to < 0)\n \temit_insn (gen_add2_insn (data->to_addr,\n-\t\t\t\t  GEN_INT (-(HOST_WIDE_INT) size)));\n+\t\t\t\t  gen_int_mode (-(HOST_WIDE_INT) size,\n+\t\t\t\t\t\tGET_MODE (data->to_addr))));\n \n       cst = (*data->constfun) (data->constfundata, data->offset, mode);\n       emit_insn ((*genfun) (to1, cst));\n \n       if (HAVE_POST_INCREMENT && data->explicit_inc_to > 0)\n-\temit_insn (gen_add2_insn (data->to_addr, GEN_INT (size)));\n+\temit_insn (gen_add2_insn (data->to_addr,\n+\t\t\t\t  gen_int_mode (size,\n+\t\t\t\t\t\tGET_MODE (data->to_addr))));\n \n       if (! data->reverse)\n \tdata->offset += size;"}, {"sha": "4d59b5a6ff22861a07f8d1903b4b9467dc5f27e8", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69db2d57a36cf785d652970a3d96f12c47eb0b80/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69db2d57a36cf785d652970a3d96f12c47eb0b80/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=69db2d57a36cf785d652970a3d96f12c47eb0b80", "patch": "@@ -2837,7 +2837,9 @@ emit_inc (enum reg_class new_rclass, rtx in, rtx value, int inc_amount)\n       if (plus_p)\n \t{\n \t  if (CONST_INT_P (inc))\n-\t    emit_insn (gen_add2_insn (result, GEN_INT (-INTVAL (inc))));\n+\t    emit_insn (gen_add2_insn (result,\n+\t\t\t\t      gen_int_mode (-INTVAL (inc),\n+\t\t\t\t\t\t    GET_MODE (result))));\n \t  else\n \t    emit_insn (gen_sub2_insn (result, inc));\n \t}"}, {"sha": "541bdb5a131ec1130977f9c7d7229a2682f66f7b", "filename": "gcc/ree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69db2d57a36cf785d652970a3d96f12c47eb0b80/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69db2d57a36cf785d652970a3d96f12c47eb0b80/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=69db2d57a36cf785d652970a3d96f12c47eb0b80", "patch": "@@ -298,7 +298,8 @@ combine_set_extension (ext_cand *cand, rtx curr_insn, rtx *orig_set)\n \t     the source mode.  */\n \t  enum machine_mode src_mode = GET_MODE (SET_DEST (*orig_set));\n \t  rtx new_const_int\n-\t    = GEN_INT (INTVAL (orig_src) & GET_MODE_MASK (src_mode));\n+\t    = gen_int_mode (INTVAL (orig_src) & GET_MODE_MASK (src_mode),\n+\t\t\t    GET_MODE (new_reg));\n \t  new_set = gen_rtx_SET (VOIDmode, new_reg, new_const_int);\n \t}\n     }"}, {"sha": "e579a7a234d152a79d93dd7d89a9ac8f962ae52d", "filename": "gcc/regmove.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69db2d57a36cf785d652970a3d96f12c47eb0b80/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69db2d57a36cf785d652970a3d96f12c47eb0b80/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=69db2d57a36cf785d652970a3d96f12c47eb0b80", "patch": "@@ -786,7 +786,8 @@ fixup_match_2 (rtx insn, rtx dst, rtx src, rtx offset)\n \t{\n \t  HOST_WIDE_INT newconst\n \t    = INTVAL (offset) - INTVAL (XEXP (SET_SRC (pset), 1));\n-\t  rtx add = gen_add3_insn (dst, dst, GEN_INT (newconst));\n+\t  rtx add = gen_add3_insn (dst, dst,\n+\t\t\t\t   gen_int_mode (newconst, GET_MODE (dst)));\n \n \t  if (add && validate_change (insn, &PATTERN (insn), add, 0))\n \t    {"}, {"sha": "7a82c07ef214853d32943820d4139677473d486f", "filename": "gcc/reload1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69db2d57a36cf785d652970a3d96f12c47eb0b80/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69db2d57a36cf785d652970a3d96f12c47eb0b80/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=69db2d57a36cf785d652970a3d96f12c47eb0b80", "patch": "@@ -9157,7 +9157,9 @@ inc_for_reload (rtx reloadreg, rtx in, rtx value, int inc_amount)\n       emit_insn (gen_add2_insn (reloadreg, inc));\n       emit_insn (gen_move_insn (incloc, reloadreg));\n       if (CONST_INT_P (inc))\n-\temit_insn (gen_add2_insn (reloadreg, GEN_INT (-INTVAL (inc))));\n+\temit_insn (gen_add2_insn (reloadreg,\n+\t\t\t\t  gen_int_mode (-INTVAL (inc),\n+\t\t\t\t\t\tGET_MODE (reloadreg))));\n       else\n \temit_insn (gen_sub2_insn (reloadreg, inc));\n     }"}]}