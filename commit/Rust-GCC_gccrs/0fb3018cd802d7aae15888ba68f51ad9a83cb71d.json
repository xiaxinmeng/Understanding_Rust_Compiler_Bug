{"sha": "0fb3018cd802d7aae15888ba68f51ad9a83cb71d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZiMzAxOGNkODAyZDdhYWUxNTg4OGJhNjhmNTFhZDlhODNjYjcxZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-04-12T07:44:48Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-04-12T07:44:48Z"}, "message": "class.c (dfs_unshared_virtual_bases): New function.\n\ncp:\n\t* class.c (dfs_unshared_virtual_bases): New function.\n\t(mark_primary_bases): Call it.\n\t(check_bases): Ignore virtual bases when determining\n\tnearly-emptiness.\ntestsuite:\n\t* g++.old-deja/g++.abi/primary3.C (main): Correct expected layout.\n\t* g++.old-deja/g++.abi/crash1.C: New test.\n\nFrom-SVN: r41295", "tree": {"sha": "66c0685dcdf9b9573500425894dace9e9db6f15d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66c0685dcdf9b9573500425894dace9e9db6f15d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fb3018cd802d7aae15888ba68f51ad9a83cb71d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb3018cd802d7aae15888ba68f51ad9a83cb71d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fb3018cd802d7aae15888ba68f51ad9a83cb71d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb3018cd802d7aae15888ba68f51ad9a83cb71d/comments", "author": null, "committer": null, "parents": [{"sha": "bbb53468cc1f912add359fa97567f3b0b54476f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbb53468cc1f912add359fa97567f3b0b54476f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbb53468cc1f912add359fa97567f3b0b54476f8"}], "stats": {"total": 102, "additions": 86, "deletions": 16}, "files": [{"sha": "634c8cf0675ebd0adb9cb4d41d77ccc21455c1b4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb3018cd802d7aae15888ba68f51ad9a83cb71d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb3018cd802d7aae15888ba68f51ad9a83cb71d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0fb3018cd802d7aae15888ba68f51ad9a83cb71d", "patch": "@@ -1,3 +1,10 @@\n+2001-04-12  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* class.c (dfs_unshared_virtual_bases): New function.\n+\t(mark_primary_bases): Call it.\n+\t(check_bases): Ignore virtual bases when determining\n+\tnearly-emptiness.\n+\n 2001-04-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* method.c (make_thunk): Clear DECL_CLONED_FUNCTION."}, {"sha": "290dc214da481373551240c828c3c796d93e5a1f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 41, "deletions": 14, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb3018cd802d7aae15888ba68f51ad9a83cb71d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb3018cd802d7aae15888ba68f51ad9a83cb71d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=0fb3018cd802d7aae15888ba68f51ad9a83cb71d", "patch": "@@ -190,6 +190,7 @@ static void build_vcall_and_vbase_vtbl_entries PARAMS ((tree,\n \t\t\t\t\t\t\tvtbl_init_data *));\n static void force_canonical_binfo_r PARAMS ((tree, tree, tree, tree));\n static void force_canonical_binfo PARAMS ((tree, tree, tree, tree));\n+static tree dfs_unshared_virtual_bases PARAMS ((tree, void *));\n static void mark_primary_bases PARAMS ((tree));\n static tree mark_primary_virtual_base PARAMS ((tree, tree, tree));\n static void clone_constructors_and_destructors PARAMS ((tree));\n@@ -1596,12 +1597,12 @@ check_bases (t, cant_have_default_ctor_p, cant_have_const_ctor_p,\n {\n   int n_baseclasses;\n   int i;\n-  int seen_nearly_empty_base_p;\n+  int seen_non_virtual_nearly_empty_base_p;\n   tree binfos;\n \n   binfos = TYPE_BINFO_BASETYPES (t);\n   n_baseclasses = CLASSTYPE_N_BASECLASSES (t);\n-  seen_nearly_empty_base_p = 0;\n+  seen_non_virtual_nearly_empty_base_p = 0;\n \n   /* An aggregate cannot have baseclasses.  */\n   CLASSTYPE_NON_AGGREGATE (t) |= (n_baseclasses != 0);\n@@ -1662,19 +1663,23 @@ check_bases (t, cant_have_default_ctor_p, cant_have_const_ctor_p,\n                         basetype);\n \t}\n \n-      /* If the base class is not empty or nearly empty, then this\n-\t class cannot be nearly empty.  */\n-      if (!CLASSTYPE_NEARLY_EMPTY_P (basetype) && !is_empty_class (basetype))\n-\tCLASSTYPE_NEARLY_EMPTY_P (t) = 0;\n-      /* And if there is more than one nearly empty base, then the\n-\t derived class is not nearly empty either.  */\n-      else if (CLASSTYPE_NEARLY_EMPTY_P (basetype) \n-\t       && seen_nearly_empty_base_p)\n-\tCLASSTYPE_NEARLY_EMPTY_P (t) = 0;\n-      /* If this is the first nearly empty base class, then remember\n-\t that we saw it.  */\n+      if (TREE_VIA_VIRTUAL (base_binfo))\n+\t/* A virtual base does not effect nearly emptiness. */\n+\t;\n       else if (CLASSTYPE_NEARLY_EMPTY_P (basetype))\n-\tseen_nearly_empty_base_p = 1;\n+\t{\n+\t  if (seen_non_virtual_nearly_empty_base_p)\n+\t    /* And if there is more than one nearly empty base, then the\n+\t       derived class is not nearly empty either.  */\n+\t    CLASSTYPE_NEARLY_EMPTY_P (t) = 0;\n+\t  else\n+\t    /* Remember we've seen one. */\n+\t    seen_non_virtual_nearly_empty_base_p = 1;\n+\t}\n+      else if (!is_empty_class (basetype))\n+\t/* If the base class is not empty or nearly empty, then this\n+\t   class cannot be nearly empty.  */\n+\tCLASSTYPE_NEARLY_EMPTY_P (t) = 0;\n \n       /* A lot of properties from the bases also apply to the derived\n \t class.  */\n@@ -1814,6 +1819,23 @@ mark_primary_virtual_base (binfo, base_binfo, type)\n   return base_binfo;\n }\n \n+/* If BINFO is an unmarked virtual binfo for a class with a primary\n+   base, then BINFO has no primary base in this graph.  Called from\n+   mark_primary_bases. */\n+\n+static tree dfs_unshared_virtual_bases (binfo, data)\n+     tree binfo;\n+     void *data;\n+{\n+  if (TREE_VIA_VIRTUAL (binfo) && !BINFO_MARKED (binfo)\n+      && CLASSTYPE_HAS_PRIMARY_BASE_P (BINFO_TYPE (binfo)))\n+    BINFO_LOST_PRIMARY_P (binfo) = 1;\n+\n+  CLEAR_BINFO_MARKED (binfo);\n+  \n+  return NULL;\n+}\n+\n /* Set BINFO_PRIMARY_BASE_OF for all binfos in the hierarchy\n    dominated by TYPE that are primary bases.  */\n \n@@ -1839,7 +1861,12 @@ mark_primary_bases (type)\n \n       if (base_binfo)\n         BINFO_PRIMARY_BASE_OF (base_binfo) = binfo;\n+      SET_BINFO_MARKED (binfo);\n     }\n+  /* There could remain unshared virtual bases which were not visited\n+     in the inheritance graph walk. These bases will have lost their\n+     primary base (should they have one). We must now find them. */\n+  dfs_walk (TYPE_BINFO (type), dfs_unshared_virtual_bases, NULL, NULL);\n }\n \n /* Make the BINFO the primary base of T.  */"}, {"sha": "ea72f127ae1a7d546bd8e6e5d8ff59d136a9a4ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb3018cd802d7aae15888ba68f51ad9a83cb71d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb3018cd802d7aae15888ba68f51ad9a83cb71d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0fb3018cd802d7aae15888ba68f51ad9a83cb71d", "patch": "@@ -1,3 +1,8 @@\n+2001-04-12  Nathan Sidwell  <nathan@codesourcery.com>\n+\t\n+\t* g++.old-deja/g++.abi/primary3.C (main): Correct expected layout.\n+\t* g++.old-deja/g++.abi/crash1.C: New test.\n+\n 2001-04-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.other/crash40.C: New test."}, {"sha": "8526818c713af62eb05ac8c427cbdf3c13654098", "filename": "gcc/testsuite/g++.old-deja/g++.abi/crash1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb3018cd802d7aae15888ba68f51ad9a83cb71d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fcrash1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb3018cd802d7aae15888ba68f51ad9a83cb71d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fcrash1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fcrash1.C?ref=0fb3018cd802d7aae15888ba68f51ad9a83cb71d", "patch": "@@ -0,0 +1,21 @@\n+// Build don't link:\n+// \n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 11 Apr 2001 <nathan@codesourcery.com>\n+\n+// Bug 1944. We failed to calculate nearly emptiness properly, and\n+// lost primary too.\n+\n+struct A1 {};\n+struct A2 {};\n+\n+struct B1 : virtual A1 {};\n+struct B2 : virtual A2 {};\n+\n+struct C1 : virtual B2 {};\n+struct C2 : virtual B2 {};\n+\n+struct D1 : virtual C1, virtual C2 {};\n+struct D2 : virtual C2, virtual B1 {};\n+\n+struct E : virtual D1, virtual D2 {};"}, {"sha": "fbeb2b70b308d4d37f2b6327c32c4771bcad9247", "filename": "gcc/testsuite/g++.old-deja/g++.abi/primary3.C", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb3018cd802d7aae15888ba68f51ad9a83cb71d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fprimary3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb3018cd802d7aae15888ba68f51ad9a83cb71d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fprimary3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fprimary3.C?ref=0fb3018cd802d7aae15888ba68f51ad9a83cb71d", "patch": "@@ -21,14 +21,24 @@ int main ()\n   A *apd = &d;\n   B1 *b1pd = &d;\n   B2 *b2pd = &d;\n+  C *cpd = &d;\n   \n #if __GXX_ABI_VERSION >= 100\n   if (static_cast <void *> (apc) != static_cast <void *> (b1pc))\n     return 1;\n-  if (static_cast <void *> (apd) != static_cast <void *> (b1pd))\n+  if (static_cast <void *> (&c) != static_cast <void *> (b2pc))\n     return 2;\n-  if (static_cast <void *> (apd) != static_cast <void *> (&d))\n+  if (static_cast <void *> (b1pc) == static_cast <void *> (b2pc))\n     return 3;\n+  \n+  if (static_cast <void *> (apd) != static_cast <void *> (b1pd))\n+    return 11;\n+  if (static_cast <void *> (b2pd) != static_cast <void *> (&d))\n+    return 12;\n+  if (static_cast <void *> (b2pd) != static_cast <void *> (cpd))\n+    return 13;\n+  if (static_cast <void *> (b1pd) == static_cast <void *> (b2pd))\n+    return 14;\n #endif\n   return 0;\n }"}]}