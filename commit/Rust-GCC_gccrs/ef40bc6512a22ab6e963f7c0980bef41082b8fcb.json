{"sha": "ef40bc6512a22ab6e963f7c0980bef41082b8fcb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY0MGJjNjUxMmEyMmFiNmU5NjNmN2MwOTgwYmVmNDEwODJiOGZjYg==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@twcny.rr.com", "date": "2002-06-19T23:57:38Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2002-06-19T23:57:38Z"}, "message": "* configure.in: replace ${topsrcdir} with ${srcdir}\n\nFrom-SVN: r54810", "tree": {"sha": "9caa5557e15e29958c9df8231649135587fab443", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9caa5557e15e29958c9df8231649135587fab443"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef40bc6512a22ab6e963f7c0980bef41082b8fcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef40bc6512a22ab6e963f7c0980bef41082b8fcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef40bc6512a22ab6e963f7c0980bef41082b8fcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef40bc6512a22ab6e963f7c0980bef41082b8fcb/comments", "author": null, "committer": null, "parents": [{"sha": "7a0be4657d8d87889b8d971456d0a167b190f2f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a0be4657d8d87889b8d971456d0a167b190f2f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a0be4657d8d87889b8d971456d0a167b190f2f8"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "b945222449c6c4a37bde6d888a700d6910d789a0", "filename": "ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef40bc6512a22ab6e963f7c0980bef41082b8fcb/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef40bc6512a22ab6e963f7c0980bef41082b8fcb/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=ef40bc6512a22ab6e963f7c0980bef41082b8fcb", "patch": "@@ -1,5 +1,7 @@\n 2002-06-19  Nathanael Nerode  <neroden@twcny.rr.com>\n \n+\t* configure.in: replace ${topsrcdir} with ${srcdir}\n+\n \t* configure.in: Move definition of libstdcxx_flags\n \tright above usage, rather than waaay earlier.\n "}, {"sha": "80b72e8c5e1e27c6995290185429c076662ef439", "filename": "configure.in", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef40bc6512a22ab6e963f7c0980bef41082b8fcb/configure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef40bc6512a22ab6e963f7c0980bef41082b8fcb/configure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.in?ref=ef40bc6512a22ab6e963f7c0980bef41082b8fcb", "patch": "@@ -1446,7 +1446,7 @@ if test x${gxx_include_dir} = x; then\n   if test x${enable_version_specific_runtime_libs} = xyes; then\n     gxx_include_dir='${libsubdir}/include/g++'\n   else\n-    . ${topsrcdir}/config.if\n+    . ${srcdir}/config.if\n     gxx_include_dir='${prefix}/include/${libstdcxx_incdir}'\n   fi\n else\n@@ -1467,7 +1467,7 @@ case \" $skipdirs \" in\n    esac\n \n    # If we're not building GCC, don't discard standard headers.\n-   if test -d ${topsrcdir}/gcc; then\n+   if test -d ${srcdir}/gcc; then\n      FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -nostdinc'\n \n      if test \"${build}\" != \"${host}\"; then\n@@ -1513,7 +1513,7 @@ esac\n # the previously-installed cross compiler, so don't bother to add\n # flags for directories within the install tree of the compiler\n # being built; programs in there won't even run.\n-if test \"${build}\" = \"${host}\" && test -d ${topsrcdir}/gcc; then\n+if test \"${build}\" = \"${host}\" && test -d ${srcdir}/gcc; then\n   # Search for pre-installed headers if nothing else fits.\n   FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -B$(build_tooldir)/bin/ -B$(build_tooldir)/lib/ -isystem $(build_tooldir)/include'\n fi\n@@ -1527,7 +1527,7 @@ fi\n \n if test \"x${CC_FOR_TARGET+set}\" = xset; then\n   :\n-elif test -d ${topsrcdir}/gcc; then\n+elif test -d ${srcdir}/gcc; then\n   CC_FOR_TARGET='$$r/gcc/xgcc -B$$r/gcc/'\n elif test \"$host\" = \"$target\"; then\n   CC_FOR_TARGET='$(CC)'\n@@ -1543,7 +1543,7 @@ esac\n \n if test \"x${GCJ_FOR_TARGET+set}\" = xset; then\n   :\n-elif test -d ${topsrcdir}/gcc; then\n+elif test -d ${srcdir}/gcc; then\n   GCJ_FOR_TARGET='$$r/gcc/gcj -B$$r/gcc/'\n elif test \"$host\" = \"$target\"; then\n   GCJ_FOR_TARGET='gcj'\n@@ -1560,7 +1560,7 @@ libstdcxx_flags='`case $$dir in libstdc++-v3 | libjava) ;; *) test ! -f $$r/$(TA\n \n if test \"x${CXX_FOR_TARGET+set}\" = xset; then\n   :\n-elif test -d ${topsrcdir}/gcc; then\n+elif test -d ${srcdir}/gcc; then\n   # We add -shared-libgcc to CXX_FOR_TARGET whenever we use xgcc instead\n   # of g++ for linking C++ or Java, because g++ has -shared-libgcc by\n   # default whereas gcc does not."}]}