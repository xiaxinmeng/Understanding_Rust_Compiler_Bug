{"sha": "dc51dece7ae902317e9131e153ef53d7bc09c564", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM1MWRlY2U3YWU5MDIzMTdlOTEzMWUxNTNlZjUzZDdiYzA5YzU2NA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2019-02-07T07:50:42Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2019-02-07T07:50:42Z"}, "message": "[PR86218] handle ck_aggr in compare_ics in both and either conversion\n\nBecause of rank compares, and checks for ck_list, we know that if we\nsee user_conv_p or ck_list in ics1, we'll also see it in ics2.  This\nreasoning does not extend to ck_aggr, however, so we might have\nck_aggr conversions starting both ics1 and ics2, which we handle\ncorrectly, or either, which we likely handle by crashing on whatever\npath we take depending on whether ck_aggr is in ics1 or ics2.\n\nWe crash because, as we search the conversion sequences, we may very\nwell fail to find what we are looking for, and reach the end of the\nsequence, which is unexpected in all paths.\n\nThis patch arranges for us to take the same path when ck_aggr is in\nics2 only that we would if it was in ics1 (regardless of ics2), and it\ndeals with not finding the kind of conversion we look for there.\n\nI've changed the type of the literal constant in the testcase, so as\nto hopefully make it well-formed.  We'd fail to reject the narrowing\nconversion in the original testcase, but that's a separate bug.\n\n\nfor  gcc/cp/ChangeLog\n\n\tPR c++/86218\n\t* call.c (compare_ics): Deal with ck_aggr in either cs.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR c++/86218\n\t* g++.dg/cpp0x/pr86218.C: New.\n\nFrom-SVN: r268606", "tree": {"sha": "78f49ebb2065ad6209cb9a5f4a12ee47162ef1c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78f49ebb2065ad6209cb9a5f4a12ee47162ef1c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc51dece7ae902317e9131e153ef53d7bc09c564", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc51dece7ae902317e9131e153ef53d7bc09c564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc51dece7ae902317e9131e153ef53d7bc09c564", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc51dece7ae902317e9131e153ef53d7bc09c564/comments", "author": null, "committer": null, "parents": [{"sha": "18591d3ee7c0e22c3f81340fbc0a54d5fb6912ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18591d3ee7c0e22c3f81340fbc0a54d5fb6912ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18591d3ee7c0e22c3f81340fbc0a54d5fb6912ca"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "3cafaaad9336afbaca9134032b4b686ec4398d14", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc51dece7ae902317e9131e153ef53d7bc09c564/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc51dece7ae902317e9131e153ef53d7bc09c564/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dc51dece7ae902317e9131e153ef53d7bc09c564", "patch": "@@ -1,3 +1,8 @@\n+2019-02-07  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR c++/86218\n+\t* call.c (compare_ics): Deal with ck_aggr in either cs.\n+\n 2019-02-06  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/71302"}, {"sha": "e9c131dd66b4f6f2da3d58a036bb9e2d34652143", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc51dece7ae902317e9131e153ef53d7bc09c564/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc51dece7ae902317e9131e153ef53d7bc09c564/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=dc51dece7ae902317e9131e153ef53d7bc09c564", "patch": "@@ -10049,21 +10049,22 @@ compare_ics (conversion *ics1, conversion *ics2)\n      Specifically, we need to do the reference binding comparison at the\n      end of this function.  */\n \n-  if (ics1->user_conv_p || ics1->kind == ck_list || ics1->kind == ck_aggr)\n+  if (ics1->user_conv_p || ics1->kind == ck_list\n+      || ics1->kind == ck_aggr || ics2->kind == ck_aggr)\n     {\n       conversion *t1;\n       conversion *t2;\n \n-      for (t1 = ics1; t1->kind != ck_user; t1 = next_conversion (t1))\n+      for (t1 = ics1; t1 && t1->kind != ck_user; t1 = next_conversion (t1))\n \tif (t1->kind == ck_ambig || t1->kind == ck_aggr\n \t    || t1->kind == ck_list)\n \t  break;\n-      for (t2 = ics2; t2->kind != ck_user; t2 = next_conversion (t2))\n+      for (t2 = ics2; t2 && t2->kind != ck_user; t2 = next_conversion (t2))\n \tif (t2->kind == ck_ambig || t2->kind == ck_aggr\n \t    || t2->kind == ck_list)\n \t  break;\n \n-      if (t1->kind != t2->kind)\n+      if (!t1 || !t2 || t1->kind != t2->kind)\n \treturn 0;\n       else if (t1->kind == ck_user)\n \t{"}, {"sha": "152dce3fa8e54c76887a2d329351b47b3b3694b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc51dece7ae902317e9131e153ef53d7bc09c564/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc51dece7ae902317e9131e153ef53d7bc09c564/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dc51dece7ae902317e9131e153ef53d7bc09c564", "patch": "@@ -1,3 +1,8 @@\n+2019-02-07  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR c++/86218\n+\t* g++.dg/cpp0x/pr86218.C: New.\n+\n 2019-02-06  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/89225"}, {"sha": "9892ccde5be9c6beef1256fe9c2060919b7641fb", "filename": "gcc/testsuite/g++.dg/cpp0x/pr86218.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc51dece7ae902317e9131e153ef53d7bc09c564/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr86218.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc51dece7ae902317e9131e153ef53d7bc09c564/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr86218.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr86218.C?ref=dc51dece7ae902317e9131e153ef53d7bc09c564", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile { target c++11 } }\n+\n+template <int a>\n+void f (const char (&)[a]) { }\n+void f (int) { }\n+template <class...a>\n+void\n+g ()\n+{\n+  f ({2u});\n+}"}]}