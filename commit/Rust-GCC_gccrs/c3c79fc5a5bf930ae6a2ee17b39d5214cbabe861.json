{"sha": "c3c79fc5a5bf930ae6a2ee17b39d5214cbabe861", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNjNzlmYzVhNWJmOTMwYWU2YTJlZTE3YjM5ZDUyMTRjYmFiZTg2MQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-06-07T14:34:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-06-07T14:34:02Z"}, "message": "decl.c (java_init_decl_processing): Call build_common_nodes, build_common_nodes_2 at the beginning.\n\n2011-06-07  Richard Guenther  <rguenther@suse.de>\n\n\t* decl.c (java_init_decl_processing): Call build_common_nodes,\n\tbuild_common_nodes_2 at the beginning.  Remove then duplicate\n\tinitializations.\n\nFrom-SVN: r174747", "tree": {"sha": "e55d792d95d64cb1b5dd110c453a6833dcdc4518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e55d792d95d64cb1b5dd110c453a6833dcdc4518"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3c79fc5a5bf930ae6a2ee17b39d5214cbabe861", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3c79fc5a5bf930ae6a2ee17b39d5214cbabe861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3c79fc5a5bf930ae6a2ee17b39d5214cbabe861", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3c79fc5a5bf930ae6a2ee17b39d5214cbabe861/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28628ea69f5eea41ec4e678e7e66924a574943cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28628ea69f5eea41ec4e678e7e66924a574943cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28628ea69f5eea41ec4e678e7e66924a574943cb"}], "stats": {"total": 57, "additions": 19, "deletions": 38}, "files": [{"sha": "b88b71f9fb862d57599ed78e93b8ff27592b815c", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3c79fc5a5bf930ae6a2ee17b39d5214cbabe861/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3c79fc5a5bf930ae6a2ee17b39d5214cbabe861/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c3c79fc5a5bf930ae6a2ee17b39d5214cbabe861", "patch": "@@ -1,3 +1,9 @@\n+2011-06-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* decl.c (java_init_decl_processing): Call build_common_nodes,\n+\tbuild_common_nodes_2 at the beginning.  Remove then duplicate\n+\tinitializations.\n+\n 2011-06-07  Richard Guenther  <rguenther@suse.de>\n \n \t* decl.c (java_init_decl_processing): Properly initialize"}, {"sha": "e4a3db240d4f216b35b558ecedf9b8a57c321bfd", "filename": "gcc/java/decl.c", "status": "modified", "additions": 13, "deletions": 38, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3c79fc5a5bf930ae6a2ee17b39d5214cbabe861/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3c79fc5a5bf930ae6a2ee17b39d5214cbabe861/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=c3c79fc5a5bf930ae6a2ee17b39d5214cbabe861", "patch": "@@ -566,13 +566,17 @@ java_init_decl_processing (void)\n   pushlevel (0);\t/* make the binding_level structure for global names */\n   global_binding_level = current_binding_level;\n \n-  /* The code here must be similar to build_common_tree_nodes{,_2} in\n-     tree.c, especially as to the order of initializing common nodes.  */\n-  error_mark_node = make_node (ERROR_MARK);\n-  TREE_TYPE (error_mark_node) = error_mark_node;\n+  /* Build common tree nodes, Java has an unsigned char.  */\n+  build_common_tree_nodes (false);\n \n-  /* Create sizetype first - needed for other types. */\n-  initialize_sizetypes ();\n+  /* Build the rest of the common tree nodes.  */\n+  build_common_tree_nodes_2 (0);\n+\n+  /* ???  Now we continue and override some of the built types again\n+     with Java specific types.  As the above generated types are\n+     supposed to match the targets C ABI this isn't really the way\n+     to go and any Java specifics should _not_ use those global types\n+     if the Java ABI does not match the C one.  */\n \n   byte_type_node = make_signed_type (8);\n   pushdecl (build_decl (BUILTINS_LOCATION,\n@@ -604,18 +608,6 @@ java_init_decl_processing (void)\n \t\t\tTYPE_DECL, get_identifier (\"unsigned long\"),\n \t\t\tunsigned_long_type_node));\n \n-  /* This is not a java type, however tree-dfa requires a definition for\n-     size_type_node.  */\n-  if (strcmp (SIZE_TYPE, \"unsigned int\") == 0)\n-    size_type_node = make_unsigned_type (INT_TYPE_SIZE);\n-  else if (strcmp (SIZE_TYPE, \"long unsigned int\") == 0)\n-    size_type_node = make_unsigned_type (LONG_TYPE_SIZE);\n-  else if (strcmp (SIZE_TYPE, \"long long unsigned int\") == 0)\n-    size_type_node = make_unsigned_type (LONG_LONG_TYPE_SIZE);\n-  else\n-    gcc_unreachable ();\n-  set_sizetype (size_type_node);\n-\n   /* Define these next since types below may used them.  */\n   integer_type_node = java_type_for_size (INT_TYPE_SIZE, 0);\n   integer_zero_node = build_int_cst (NULL_TREE, 0);\n@@ -631,39 +623,22 @@ java_init_decl_processing (void)\n     = double_int_to_tree (unsigned_long_type_node,\n \t\t\t  double_int_setbit (double_int_zero, 64));\n \n-  size_zero_node = size_int (0);\n-  size_one_node = size_int (1);\n-  bitsize_zero_node = bitsize_int (0);\n-  bitsize_one_node = bitsize_int (1);\n-  bitsize_unit_node = bitsize_int (BITS_PER_UNIT);\n-\n   long_zero_node = build_int_cst (long_type_node, 0);\n \n-  void_type_node = make_node (VOID_TYPE);\n   pushdecl (build_decl (BUILTINS_LOCATION,\n \t\t\tTYPE_DECL, get_identifier (\"void\"), void_type_node));\n-  layout_type (void_type_node);\t/* Uses size_zero_node */\n-\n-  ptr_type_node = build_pointer_type (void_type_node);\n-  const_ptr_type_node\n-    = build_pointer_type (build_type_variant (void_type_node, 1, 0));\n \n   t = make_node (VOID_TYPE);\n   layout_type (t); /* Uses size_zero_node */\n   return_address_type_node = build_pointer_type (t);\n \n-  null_pointer_node = build_int_cst (ptr_type_node, 0);\n-\n-  char_type_node = make_node (INTEGER_TYPE);\n+  char_type_node = make_unsigned_type (16);\n   TYPE_STRING_FLAG (char_type_node) = 1;\n-  TYPE_PRECISION (char_type_node) = 16;\n-  fixup_unsigned_type (char_type_node);\n   pushdecl (build_decl (BUILTINS_LOCATION,\n \t\t\tTYPE_DECL, get_identifier (\"char\"), char_type_node));\n \n-  boolean_type_node = make_node (BOOLEAN_TYPE);\n-  TYPE_PRECISION (boolean_type_node) = 1;\n-  fixup_unsigned_type (boolean_type_node);\n+  boolean_type_node = make_unsigned_type (1);\n+  TREE_SET_CODE (boolean_type_node, BOOLEAN_TYPE);\n   pushdecl (build_decl (BUILTINS_LOCATION,\n \t\t\tTYPE_DECL, get_identifier (\"boolean\"),\n \t\t\tboolean_type_node));"}]}