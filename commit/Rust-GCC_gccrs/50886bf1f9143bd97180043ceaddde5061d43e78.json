{"sha": "50886bf1f9143bd97180043ceaddde5061d43e78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA4ODZiZjFmOTE0M2JkOTcxODAwNDNjZWFkZGRlNTA2MWQ0M2U3OA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-08-20T11:28:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-08-20T11:28:14Z"}, "message": "langhooks-def.h (lhd_tree_inlining_auto_var_in_fn_p): Remove.\n\n2007-08-20  Richard Guenther  <rguenther@suse.de>\n\n\t* langhooks-def.h (lhd_tree_inlining_auto_var_in_fn_p): Remove.\n\t(LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P): Likewise.\n\t(LANG_HOOKS_TREE_INLINING_INITIALIZER): Remove initializer for\n\tauto_var_in_fn_p langhook.\n\t* langhooks.c (lhd_tree_inlining_auto_var_in_fn_p): Rename and\n\tmove ...\n\t* tree.c (auto_var_in_fn_p): ... here.\n\t(find_var_from_fn): Call auto_var_in_fn_p directly.\n\t* langhooks.h (lang_hooks_for_tree_inlining): Remove\n\tauto_var_in_fn_p langhook.\n\t* tree-inline.c (remap_decls): Call auto_var_in_fn_p directly.\n\t(copy_body_r): Likewise.\n\t(self_inlining_addr_expr): Likewise.\n\t* tree.h (auto_var_in_fn_p): Declare.\n\n\tcp/\n\t* cp-objcp-common.h (LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P):\n\tRemove.\n\t* cp-tree.h (cp_auto_var_in_fn_p): Remove.\n\t(nonstatic_local_decl_p): Likewise.\n\t* tree.c (cp_auto_var_in_fn_p): Remove.\n\t* decl.c (nonstatic_local_decl_p): Remove.\n\nFrom-SVN: r127643", "tree": {"sha": "7a357b039785ec8b4512742e9512b49128d47deb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a357b039785ec8b4512742e9512b49128d47deb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50886bf1f9143bd97180043ceaddde5061d43e78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50886bf1f9143bd97180043ceaddde5061d43e78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50886bf1f9143bd97180043ceaddde5061d43e78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50886bf1f9143bd97180043ceaddde5061d43e78/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "145881069e8d5a19e131b5c1922bdb2e27b708da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/145881069e8d5a19e131b5c1922bdb2e27b708da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/145881069e8d5a19e131b5c1922bdb2e27b708da"}], "stats": {"total": 96, "additions": 45, "deletions": 51}, "files": [{"sha": "aa6c0084e2e770a8f606ac3f9fd4c3e72e66f23e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50886bf1f9143bd97180043ceaddde5061d43e78", "patch": "@@ -1,3 +1,20 @@\n+2007-08-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* langhooks-def.h (lhd_tree_inlining_auto_var_in_fn_p): Remove.\n+\t(LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P): Likewise.\n+\t(LANG_HOOKS_TREE_INLINING_INITIALIZER): Remove initializer for\n+\tauto_var_in_fn_p langhook.\n+\t* langhooks.c (lhd_tree_inlining_auto_var_in_fn_p): Rename and\n+\tmove ...\n+\t* tree.c (auto_var_in_fn_p): ... here.\n+\t(find_var_from_fn): Call auto_var_in_fn_p directly.\n+\t* langhooks.h (lang_hooks_for_tree_inlining): Remove\n+\tauto_var_in_fn_p langhook.\n+\t* tree-inline.c (remap_decls): Call auto_var_in_fn_p directly.\n+\t(copy_body_r): Likewise.\n+\t(self_inlining_addr_expr): Likewise.\n+\t* tree.h (auto_var_in_fn_p): Declare.\n+\n 2007-08-20  Richard Guenther  <rguenther@suse.de>\n \n \t* tree.c (WALK_SUBTREE): Call walk_tree_1."}, {"sha": "432b5b2e5e6067c80124006c4890b98d382fe4cd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=50886bf1f9143bd97180043ceaddde5061d43e78", "patch": "@@ -1,3 +1,12 @@\n+2007-08-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* cp-objcp-common.h (LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P):\n+\tRemove.\n+\t* cp-tree.h (cp_auto_var_in_fn_p): Remove.\n+\t(nonstatic_local_decl_p): Likewise.\n+\t* tree.c (cp_auto_var_in_fn_p): Remove.\n+\t* decl.c (nonstatic_local_decl_p): Remove.\n+\n 2007-08-20  Richard Guenther  <rguenther@suse.de>\n \n \t* cp-objcp-common.h (LANG_HOOKS_TREE_INLINING_WALK_SUBTREES):"}, {"sha": "e67b847f4216142fd765ce816593a2965b34dbdf", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=50886bf1f9143bd97180043ceaddde5061d43e78", "patch": "@@ -107,9 +107,6 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n #undef LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN\n #define LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN \\\n   cp_cannot_inline_tree_fn\n-#undef LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P\n-#define LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P \\\n-  cp_auto_var_in_fn_p\n #undef LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P\n #define LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P cp_var_mod_type_p\n #undef LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN"}, {"sha": "c715cd7a03592c5295fdc28a0471fb55a51fd87c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=50886bf1f9143bd97180043ceaddde5061d43e78", "patch": "@@ -4251,7 +4251,6 @@ extern tree maybe_push_decl\t\t\t(tree);\n extern tree force_target_expr\t\t\t(tree, tree);\n extern tree build_target_expr_with_type\t\t(tree, tree);\n extern int local_variable_p\t\t\t(const_tree);\n-extern int nonstatic_local_decl_p\t\t(const_tree);\n extern tree register_dtor_fn\t\t\t(tree);\n extern tmpl_spec_kind current_tmpl_spec_kind\t(int);\n extern tree cp_fname_init\t\t\t(const char *, tree *);\n@@ -4741,7 +4740,6 @@ extern tree cp_walk_subtrees (tree*, int*, walk_tree_fn,\n #define cp_walk_tree_without_duplicates(a,b,c) \\\n \twalk_tree_without_duplicates_1 (a, b, c, cp_walk_subtrees)\n extern int cp_cannot_inline_tree_fn\t\t(tree*);\n-extern int cp_auto_var_in_fn_p\t\t\t(const_tree, const_tree);\n extern tree fold_if_not_in_template\t\t(tree);\n extern tree rvalue\t\t\t\t(tree);\n extern tree convert_bitfield_to_declared_type   (tree);"}, {"sha": "ef67bc5fd97f52dadd6260c06f6cdb9cbf562d3c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=50886bf1f9143bd97180043ceaddde5061d43e78", "patch": "@@ -8976,18 +8976,6 @@ local_variable_p (const_tree t)\n   return 0;\n }\n \n-/* Returns nonzero if T is an automatic local variable or a label.\n-   (These are the declarations that need to be remapped when the code\n-   containing them is duplicated.)  */\n-\n-int\n-nonstatic_local_decl_p (const_tree t)\n-{\n-  return ((local_variable_p (t) && !TREE_STATIC (t))\n-\t  || TREE_CODE (t) == LABEL_DECL\n-\t  || TREE_CODE (t) == RESULT_DECL);\n-}\n-\n /* Like local_variable_p, but suitable for use as a tree-walking\n    function.  */\n "}, {"sha": "9c80fba30d60201e9fe11f0e46c7dce2c4a1e2df", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=50886bf1f9143bd97180043ceaddde5061d43e78", "patch": "@@ -2450,16 +2450,6 @@ cp_cannot_inline_tree_fn (tree* fnp)\n   return 0;\n }\n \n-/* Determine whether VAR is a declaration of an automatic variable in\n-   function FN.  */\n-\n-int\n-cp_auto_var_in_fn_p (const_tree var, const_tree fn)\n-{\n-  return (DECL_P (var) && DECL_CONTEXT (var) == fn\n-\t  && nonstatic_local_decl_p (var));\n-}\n-\n /* Like save_expr, but for C++.  */\n \n tree"}, {"sha": "862ea183686b71a3988d5a21cdac02942871cc74", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=50886bf1f9143bd97180043ceaddde5061d43e78", "patch": "@@ -70,7 +70,6 @@ extern tree lhd_builtin_function (tree decl);\n /* Declarations of default tree inlining hooks.  */\n extern int lhd_tree_inlining_cannot_inline_tree_fn (tree *);\n extern int lhd_tree_inlining_disregard_inline_limits (const_tree);\n-extern int lhd_tree_inlining_auto_var_in_fn_p (const_tree, const_tree);\n extern void lhd_initialize_diagnostics (struct diagnostic_context *);\n extern tree lhd_callgraph_analyze_expr (tree *, int *, tree);\n \n@@ -137,15 +136,12 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n   lhd_tree_inlining_cannot_inline_tree_fn\n #define LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS \\\n   lhd_tree_inlining_disregard_inline_limits\n-#define LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P \\\n-  lhd_tree_inlining_auto_var_in_fn_p\n #define LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P \\\n   hook_bool_tree_tree_false\n \n #define LANG_HOOKS_TREE_INLINING_INITIALIZER { \\\n   LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN, \\\n   LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS, \\\n-  LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P, \\\n   LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P, \\\n }\n "}, {"sha": "2a731b7cba96e0b19f9b85f684daed62bd0479f3", "filename": "gcc/langhooks.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=50886bf1f9143bd97180043ceaddde5061d43e78", "patch": "@@ -303,19 +303,6 @@ lhd_tree_inlining_disregard_inline_limits (const_tree fn)\n   return 0;\n }\n \n-/* lang_hooks.tree_inlining.auto_var_in_fn_p is called to determine\n-   whether VT is an automatic variable defined in function FT.  */\n-\n-int\n-lhd_tree_inlining_auto_var_in_fn_p (const_tree var, const_tree fn)\n-{\n-  return (DECL_P (var) && DECL_CONTEXT (var) == fn\n-\t  && (((TREE_CODE (var) == VAR_DECL || TREE_CODE (var) == PARM_DECL)\n-\t       && ! TREE_STATIC (var))\n-\t      || TREE_CODE (var) == LABEL_DECL\n-\t      || TREE_CODE (var) == RESULT_DECL));\n-}\n-\n /* lang_hooks.tree_dump.dump_tree:  Dump language-specific parts of tree\n    nodes.  Returns nonzero if it does not want the usual dumping of the\n    second argument.  */"}, {"sha": "0032e5558958074621cacc1d84bd1a57170b67db", "filename": "gcc/langhooks.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=50886bf1f9143bd97180043ceaddde5061d43e78", "patch": "@@ -37,7 +37,6 @@ struct lang_hooks_for_tree_inlining\n {\n   int (*cannot_inline_tree_fn) (tree *);\n   int (*disregard_inline_limits) (const_tree);\n-  int (*auto_var_in_fn_p) (const_tree, const_tree);\n   bool (*var_mod_type_p) (tree, tree);\n };\n "}, {"sha": "80a18837dded2c43d523ae2f0fc57b4fc45043b1", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=50886bf1f9143bd97180043ceaddde5061d43e78", "patch": "@@ -428,7 +428,7 @@ remap_decls (tree decls, copy_body_data *id)\n       /* We can not chain the local static declarations into the unexpanded_var_list\n          as we can't duplicate them or break one decl rule.  Go ahead and link\n          them into unexpanded_var_list.  */\n-      if (!lang_hooks.tree_inlining.auto_var_in_fn_p (old_var, id->src_fn)\n+      if (!auto_var_in_fn_p (old_var, id->src_fn)\n \t  && !DECL_EXTERNAL (old_var))\n \t{\n \t  cfun->unexpanded_var_list = tree_cons (NULL_TREE, old_var,\n@@ -586,7 +586,7 @@ copy_body_r (tree *tp, int *walk_subtrees, void *data)\n      variables.  We don't want to copy static variables; there's only\n      one of those, no matter how many times we inline the containing\n      function.  Similarly for globals from an outer function.  */\n-  else if (lang_hooks.tree_inlining.auto_var_in_fn_p (*tp, fn))\n+  else if (auto_var_in_fn_p (*tp, fn))\n     {\n       tree new_decl;\n \n@@ -641,8 +641,7 @@ copy_body_r (tree *tp, int *walk_subtrees, void *data)\n \t discarding.  */\n       if (TREE_CODE (*tp) == GIMPLE_MODIFY_STMT\n \t  && GIMPLE_STMT_OPERAND (*tp, 0) == GIMPLE_STMT_OPERAND (*tp, 1)\n-\t  && (lang_hooks.tree_inlining.auto_var_in_fn_p\n-\t      (GIMPLE_STMT_OPERAND (*tp, 0), fn)))\n+\t  && (auto_var_in_fn_p (GIMPLE_STMT_OPERAND (*tp, 0), fn)))\n \t{\n \t  /* Some assignments VAR = VAR; don't generate any rtl code\n \t     and thus don't count as variable modification.  Avoid\n@@ -1268,7 +1267,7 @@ self_inlining_addr_expr (tree value, tree fn)\n \n   var = get_base_address (TREE_OPERAND (value, 0));\n \n-  return var && lang_hooks.tree_inlining.auto_var_in_fn_p (var, fn);\n+  return var && auto_var_in_fn_p (var, fn);\n }\n \n static void"}, {"sha": "ce4ee5d263f0a314bb8ef271575ed62d04c64ffd", "filename": "gcc/tree.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=50886bf1f9143bd97180043ceaddde5061d43e78", "patch": "@@ -6354,6 +6354,19 @@ get_type_static_bounds (const_tree type, mpz_t min, mpz_t max)\n     }\n }\n \n+/* auto_var_in_fn_p is called to determine whether VAR is an automatic\n+   variable defined in function FN.  */\n+\n+bool\n+auto_var_in_fn_p (tree var, tree fn)\n+{\n+  return (DECL_P (var) && DECL_CONTEXT (var) == fn\n+\t  && (((TREE_CODE (var) == VAR_DECL || TREE_CODE (var) == PARM_DECL)\n+\t       && ! TREE_STATIC (var))\n+\t      || TREE_CODE (var) == LABEL_DECL\n+\t      || TREE_CODE (var) == RESULT_DECL));\n+}\n+\n /* Subprogram of following function.  Called by walk_tree.\n \n    Return *TP if it is an automatic variable or parameter of the\n@@ -6368,7 +6381,7 @@ find_var_from_fn (tree *tp, int *walk_subtrees, void *data)\n     *walk_subtrees = 0;\n \n   else if (DECL_P (*tp)\n-\t   && lang_hooks.tree_inlining.auto_var_in_fn_p (*tp, fn))\n+\t   && auto_var_in_fn_p (*tp, fn))\n     return *tp;\n \n   return NULL_TREE;"}, {"sha": "18cef504e72128a8f0e9a5e1c02093a110f9c132", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50886bf1f9143bd97180043ceaddde5061d43e78/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=50886bf1f9143bd97180043ceaddde5061d43e78", "patch": "@@ -4610,6 +4610,7 @@ extern bool empty_body_p (tree);\n extern tree call_expr_arg (tree, int);\n extern tree *call_expr_argp (tree, int);\n extern tree call_expr_arglist (tree);\n+extern bool auto_var_in_fn_p (tree, tree);\n \f\n /* In stmt.c */\n "}]}