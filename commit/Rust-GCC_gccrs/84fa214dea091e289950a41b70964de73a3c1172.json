{"sha": "84fa214dea091e289950a41b70964de73a3c1172", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRmYTIxNGRlYTA5MWUyODk5NTBhNDFiNzA5NjRkZTczYTNjMTE3Mg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-11-21T18:58:49Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-11-21T18:58:49Z"}, "message": "Add quotes for constexpr keyword.\n\n2017-11-21  Martin Liska  <mliska@suse.cz>\n\n\t* class.c (finalize_literal_type_property): Add quotes for\n\tconstexpr keyword.\n\t(explain_non_literal_class): Likewise.\n\t* constexpr.c (ensure_literal_type_for_constexpr_object): Likewise.\n\t(is_valid_constexpr_fn): Likewise.\n\t(check_constexpr_ctor_body): Likewise.\n\t(register_constexpr_fundef): Likewise.\n\t(explain_invalid_constexpr_fn): Likewise.\n\t(cxx_eval_builtin_function_call): Likewise.\n\t(cxx_eval_call_expression): Likewise.\n\t(cxx_eval_loop_expr): Likewise.\n\t(potential_constant_expression_1): Likewise.\n\t* decl.c (check_previous_goto_1): Likewise.\n\t(check_goto): Likewise.\n\t(grokfndecl): Likewise.\n\t(grokdeclarator): Likewise.\n\t* error.c (maybe_print_constexpr_context): Likewise.\n\t* method.c (process_subob_fn): Likewise.\n\t(defaulted_late_check): Likewise.\n\t* parser.c (cp_parser_compound_statement): Likewise.\n2017-11-21  Martin Liska  <mliska@suse.cz>\n\n\t* g++.dg/cpp0x/constexpr-48089.C: Add quotes for constexpr\n\tkeyword; add dg-message for 'in .constexpr. expansion of '.\n\t* g++.dg/cpp0x/constexpr-50060.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-60049.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-70323.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-70323a.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-cast.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-diag3.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-ex1.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-generated1.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-ice16.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-ice5.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-incomplete2.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-neg1.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-recursion.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-shift1.C: Likewise.\n\t* g++.dg/cpp1y/constexpr-70265-1.C: Likewise.\n\t* g++.dg/cpp1y/constexpr-70265-2.C: Likewise.\n\t* g++.dg/cpp1y/constexpr-79655.C: Likewise.\n\t* g++.dg/cpp1y/constexpr-new.C: Likewise.\n\t* g++.dg/cpp1y/constexpr-return2.C: Likewise.\n\t* g++.dg/cpp1y/constexpr-shift1.C: Likewise.\n\t* g++.dg/cpp1y/constexpr-throw.C: Likewise.\n\t* g++.dg/cpp1z/constexpr-lambda6.C: Likewise.\n\t* g++.dg/ext/constexpr-vla1.C: Likewise.\n\t* g++.dg/ext/constexpr-vla2.C: Likewise.\n\t* g++.dg/ext/constexpr-vla3.C: Likewise.\n\t* g++.dg/cpp0x/static_assert10.C: Likewise.\n\t* g++.dg/cpp1y/pr63996.C: Likewise.\n\t* g++.dg/cpp1y/pr68180.C: Likewise.\n\t* g++.dg/cpp1y/pr77830.C: Likewise.\n\t* g++.dg/ubsan/pr63956.C: Likewise.\n\nFrom-SVN: r255025", "tree": {"sha": "f8fd9613d4d6845a439630a400e2ba440a186d11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8fd9613d4d6845a439630a400e2ba440a186d11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84fa214dea091e289950a41b70964de73a3c1172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84fa214dea091e289950a41b70964de73a3c1172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84fa214dea091e289950a41b70964de73a3c1172", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84fa214dea091e289950a41b70964de73a3c1172/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc3605f174962ccf6bfd537065c304d0c4270663", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc3605f174962ccf6bfd537065c304d0c4270663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc3605f174962ccf6bfd537065c304d0c4270663"}], "stats": {"total": 274, "additions": 166, "deletions": 108}, "files": [{"sha": "42252bf20cdf0e683f87126114e40905e0e0cc71", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -1,3 +1,26 @@\n+2017-11-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* class.c (finalize_literal_type_property): Add quotes for\n+\tconstexpr keyword.\n+\t(explain_non_literal_class): Likewise.\n+\t* constexpr.c (ensure_literal_type_for_constexpr_object): Likewise.\n+\t(is_valid_constexpr_fn): Likewise.\n+\t(check_constexpr_ctor_body): Likewise.\n+\t(register_constexpr_fundef): Likewise.\n+\t(explain_invalid_constexpr_fn): Likewise.\n+\t(cxx_eval_builtin_function_call): Likewise.\n+\t(cxx_eval_call_expression): Likewise.\n+\t(cxx_eval_loop_expr): Likewise.\n+\t(potential_constant_expression_1): Likewise.\n+\t* decl.c (check_previous_goto_1): Likewise.\n+\t(check_goto): Likewise.\n+\t(grokfndecl): Likewise.\n+\t(grokdeclarator): Likewise.\n+\t* error.c (maybe_print_constexpr_context): Likewise.\n+\t* method.c (process_subob_fn): Likewise.\n+\t(defaulted_late_check): Likewise.\n+\t* parser.c (cp_parser_compound_statement): Likewise.\n+\n 2017-11-21  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* constexpr.c (cxx_eval_constant_expression,"}, {"sha": "529f37f24eefb49a578d0d69273f75e27a39f4ff", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -5368,7 +5368,7 @@ finalize_literal_type_property (tree t)\n \t  DECL_DECLARED_CONSTEXPR_P (fn) = false;\n \t  if (!DECL_GENERATED_P (fn)\n \t      && pedwarn (DECL_SOURCE_LOCATION (fn), OPT_Wpedantic,\n-\t\t\t  \"enclosing class of constexpr non-static member \"\n+\t\t\t  \"enclosing class of %<constexpr%> non-static member \"\n \t\t\t  \"function %q+#D is not a literal type\", fn))\n \t    explain_non_literal_class (t);\n \t}\n@@ -5406,7 +5406,7 @@ explain_non_literal_class (tree t)\n     {\n       inform (UNKNOWN_LOCATION,\n \t      \"  %q+T is not an aggregate, does not have a trivial \"\n-\t      \"default constructor, and has no constexpr constructor that \"\n+\t      \"default constructor, and has no %<constexpr%> constructor that \"\n \t      \"is not a copy or move constructor\", t);\n       if (type_has_non_user_provided_default_constructor (t))\n \t/* Note that we can't simply call locate_ctor because when the"}, {"sha": "92f51910cb5e7188e0291e1f933ab46822117a5b", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -94,8 +94,8 @@ ensure_literal_type_for_constexpr_object (tree decl)\n \t{\n \t  if (DECL_DECLARED_CONSTEXPR_P (decl))\n \t    {\n-\t      error (\"the type %qT of constexpr variable %qD is not literal\",\n-\t\t     type, decl);\n+\t      error (\"the type %qT of %<constexpr%> variable %qD \"\n+\t\t     \"is not literal\", type, decl);\n \t      explain_non_literal_class (type);\n \t    }\n \t  else\n@@ -177,7 +177,7 @@ is_valid_constexpr_fn (tree fun, bool complain)\n     {\n       ret = false;\n       if (complain)\n-\terror (\"inherited constructor %qD is not constexpr\",\n+\terror (\"inherited constructor %qD is not %<constexpr%>\",\n \t       DECL_INHERITED_CTOR (fun));\n     }\n   else\n@@ -189,7 +189,7 @@ is_valid_constexpr_fn (tree fun, bool complain)\n \t    ret = false;\n \t    if (complain)\n \t      {\n-\t\terror (\"invalid type for parameter %d of constexpr \"\n+\t\terror (\"invalid type for parameter %d of %<constexpr%> \"\n \t\t       \"function %q+#D\", DECL_PARM_INDEX (parm), fun);\n \t\texplain_non_literal_class (TREE_TYPE (parm));\n \t      }\n@@ -201,7 +201,7 @@ is_valid_constexpr_fn (tree fun, bool complain)\n       ret = false;\n       if (complain)\n \tinform (DECL_SOURCE_LOCATION (fun),\n-\t\t\"lambdas are implicitly constexpr only in C++17 and later\");\n+\t\t\"lambdas are implicitly %<constexpr%> only in C++17 and later\");\n     }\n   else if (!DECL_CONSTRUCTOR_P (fun))\n     {\n@@ -211,7 +211,7 @@ is_valid_constexpr_fn (tree fun, bool complain)\n \t  ret = false;\n \t  if (complain)\n \t    {\n-\t      error (\"invalid return type %qT of constexpr function %q+D\",\n+\t      error (\"invalid return type %qT of %<constexpr%> function %q+D\",\n \t\t     rettype, fun);\n \t      explain_non_literal_class (rettype);\n \t    }\n@@ -225,7 +225,7 @@ is_valid_constexpr_fn (tree fun, bool complain)\n \t  ret = false;\n \t  if (complain\n \t      && pedwarn (DECL_SOURCE_LOCATION (fun), OPT_Wpedantic,\n-\t\t\t  \"enclosing class of constexpr non-static member \"\n+\t\t\t  \"enclosing class of %<constexpr%> non-static member \"\n \t\t\t  \"function %q+#D is not a literal type\", fun))\n \t    explain_non_literal_class (DECL_CONTEXT (fun));\n \t}\n@@ -494,7 +494,7 @@ check_constexpr_ctor_body (tree last, tree list, bool complain)\n   if (!ok)\n     {\n       if (complain)\n-\terror (\"constexpr constructor does not have empty body\");\n+\terror (\"%<constexpr%> constructor does not have empty body\");\n       DECL_DECLARED_CONSTEXPR_P (current_function_decl) = false;\n     }\n   return ok;\n@@ -845,7 +845,8 @@ register_constexpr_fundef (tree fun, tree body)\n   if (massaged == NULL_TREE || massaged == error_mark_node)\n     {\n       if (!DECL_CONSTRUCTOR_P (fun))\n-\terror (\"body of constexpr function %qD not a return-statement\", fun);\n+\terror (\"body of %<constexpr%> function %qD not a return-statement\",\n+\t       fun);\n       return NULL;\n     }\n \n@@ -905,7 +906,7 @@ explain_invalid_constexpr_fn (tree fun)\n \t input_location set to our caller's location.  */\n       input_location = DECL_SOURCE_LOCATION (fun);\n       inform (input_location,\n-\t      \"%qD is not usable as a constexpr function because:\", fun);\n+\t      \"%qD is not usable as a %<constexpr%> function because:\", fun);\n     }\n   /* First check the declaration.  */\n   if (is_valid_constexpr_fn (fun, true))\n@@ -1194,7 +1195,7 @@ cxx_eval_builtin_function_call (const constexpr_ctx *ctx, tree t, tree fun,\n \t     comes from cp_maybe_instrument_return.  */\n \t  if (DECL_FUNCTION_CODE (fun) == BUILT_IN_UNREACHABLE\n \t      && EXPR_LOCATION (t) == BUILTINS_LOCATION)\n-\t    error (\"constexpr call flows off the end of the function\");\n+\t    error (\"%<constexpr%> call flows off the end of the function\");\n \t  else\n \t    {\n \t      new_call = build_call_array_loc (EXPR_LOCATION (t), TREE_TYPE (t),\n@@ -1465,7 +1466,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n   if (TREE_CODE (fun) != FUNCTION_DECL)\n     {\n       if (!ctx->quiet && !*non_constant_p)\n-\terror_at (loc, \"expression %qE does not designate a constexpr \"\n+\terror_at (loc, \"expression %qE does not designate a %<constexpr%> \"\n \t\t  \"function\", fun);\n       *non_constant_p = true;\n       return t;\n@@ -1484,7 +1485,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n       if (!ctx->quiet)\n \t{\n \t  if (!lambda_static_thunk_p (fun))\n-\t    error_at (loc, \"call to non-constexpr function %qD\", fun);\n+\t    error_at (loc, \"call to non-%<constexpr%> function %qD\", fun);\n \t  explain_invalid_constexpr_fn (fun);\n \t}\n       *non_constant_p = true;\n@@ -1618,7 +1619,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n   if (!depth_ok)\n     {\n       if (!ctx->quiet)\n-\terror (\"constexpr evaluation depth exceeds maximum of %d (use \"\n+\terror (\"%<constexpr%> evaluation depth exceeds maximum of %d (use \"\n \t       \"-fconstexpr-depth= to increase the maximum)\",\n \t       max_constexpr_depth);\n       *non_constant_p = true;\n@@ -1701,7 +1702,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t      if (result == NULL_TREE && !*non_constant_p)\n \t\t{\n \t\t  if (!ctx->quiet)\n-\t\t    error (\"constexpr call flows off the end \"\n+\t\t    error (\"%<constexpr%> call flows off the end \"\n \t\t\t   \"of the function\");\n \t\t  *non_constant_p = true;\n \t\t}\n@@ -3886,7 +3887,7 @@ cxx_eval_loop_expr (const constexpr_ctx *ctx, tree t,\n \t{\n \t  if (!ctx->quiet)\n \t    error_at (EXPR_LOC_OR_LOC (t, input_location),\n-\t\t      \"constexpr loop iteration count exceeds limit of %d \"\n+\t\t      \"%<constexpr%> loop iteration count exceeds limit of %d \"\n \t\t      \"(use -fconstexpr-loop-limit= to increase the limit)\",\n \t\t      constexpr_loop_limit);\n \t  *non_constant_p = true;\n@@ -5256,7 +5257,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t\t  {\n \t\t    if (flags & tf_error)\n \t\t      {\n-\t\t\terror_at (loc, \"call to non-constexpr function %qD\",\n+\t\t\terror_at (loc, \"call to non-%<constexpr%> function %qD\",\n \t\t\t\t  fun);\n \t\t\texplain_invalid_constexpr_fn (fun);\n \t\t      }"}, {"sha": "a7cb61506eef2cf21f2d2f0563cbddd22461b2cb", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -3315,7 +3315,7 @@ check_goto (tree decl)\n       else if (ent->in_transaction_scope)\n \tinform (input_location, \"  enters synchronized or atomic statement\");\n       else if (ent->in_constexpr_if)\n-\tinform (input_location, \"  enters constexpr if statement\");\n+\tinform (input_location, \"  enters %<constexpr%> if statement\");\n     }\n \n   if (ent->in_omp_scope)\n@@ -8606,7 +8606,7 @@ grokfndecl (tree ctype,\n       if (inlinep & 1)\n \terror (\"cannot declare %<::main%> to be inline\");\n       if (inlinep & 2)\n-\terror (\"cannot declare %<::main%> to be constexpr\");\n+\terror (\"cannot declare %<::main%> to be %<constexpr%>\");\n       if (!publicp)\n \terror (\"cannot declare %<::main%> to be static\");\n       inlinep = 0;\n@@ -12050,7 +12050,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t   unqualified_id);\n \t\telse if (constexpr_p && !initialized)\n \t\t  {\n-\t\t    error (\"constexpr static data member %qD must have an \"\n+\t\t    error (\"%<constexpr%> static data member %qD must have an \"\n \t\t\t   \"initializer\", decl);\n \t\t    constexpr_p = false;\n \t\t  }\n@@ -12278,8 +12278,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t  }\n \telse if (constexpr_p && DECL_EXTERNAL (decl))\n \t  {\n-\t    error (\"declaration of constexpr variable %qD is not a definition\",\n-\t\t   decl);\n+\t    error (\"declaration of %<constexpr%> variable %qD \"\n+\t\t   \"is not a definition\", decl);\n \t    constexpr_p = false;\n \t  }\n "}, {"sha": "6d1f3da74e2eff5722a2dcd0a9df0d921f427aa7", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -3588,11 +3588,11 @@ maybe_print_constexpr_context (diagnostic_context *context)\n       const char *s = expr_as_string (t, 0);\n       if (context->show_column)\n \tpp_verbatim (context->printer,\n-\t\t     _(\"%r%s:%d:%d:%R   in constexpr expansion of %qs\"),\n+\t\t     _(\"%r%s:%d:%d:%R   in %<constexpr%> expansion of %qs\"),\n \t\t     \"locus\", xloc.file, xloc.line, xloc.column, s);\n       else\n \tpp_verbatim (context->printer,\n-\t\t     _(\"%r%s:%d:%R   in constexpr expansion of %qs\"),\n+\t\t     _(\"%r%s:%d:%R   in %<constexpr%> expansion of %qs\"),\n \t\t     \"locus\", xloc.file, xloc.line, s);\n       pp_newline (context->printer);\n     }"}, {"sha": "534aaa32fd5c9703129a70c2ba4e44c533e6273f", "filename": "gcc/cp/method.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -1293,7 +1293,7 @@ process_subob_fn (tree fn, tree *spec_p, bool *trivial_p,\n       if (diag)\n \t{\n \t  inform (DECL_SOURCE_LOCATION (fn),\n-\t\t  \"defaulted constructor calls non-constexpr %qD\", fn);\n+\t\t  \"defaulted constructor calls non-%<constexpr%> %qD\", fn);\n \t  explain_invalid_constexpr_fn (fn);\n \t}\n     }\n@@ -2257,8 +2257,8 @@ defaulted_late_check (tree fn)\n       if (!CLASSTYPE_TEMPLATE_INSTANTIATION (ctx))\n \t{\n \t  error (\"explicitly defaulted function %q+D cannot be declared \"\n-\t\t \"as constexpr because the implicit declaration is not \"\n-\t\t \"constexpr:\", fn);\n+\t\t \"as %<constexpr%> because the implicit declaration is not \"\n+\t\t \"%<constexpr%>:\", fn);\n \t  explain_implicit_non_constexpr (fn);\n \t}\n       DECL_DECLARED_CONSTEXPR_P (fn) = false;"}, {"sha": "1ad351cdbd7fa22ed4de19b2b6308c9a067beaa2", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -11295,7 +11295,7 @@ cp_parser_compound_statement (cp_parser *parser, tree in_statement_expr,\n   if (DECL_DECLARED_CONSTEXPR_P (current_function_decl)\n       && !function_body && cxx_dialect < cxx14)\n     pedwarn (input_location, OPT_Wpedantic,\n-\t     \"compound-statement in constexpr function\");\n+\t     \"compound-statement in %<constexpr%> function\");\n   /* Begin the compound-statement.  */\n   compound_stmt = begin_compound_stmt (bcs_flags);\n   /* If the next keyword is `__label__' we have a label declaration.  */"}, {"sha": "42282509f300ce1275b058be3d0ee5d250345902", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -1,3 +1,38 @@\n+2017-11-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* g++.dg/cpp0x/constexpr-48089.C: Add quotes for constexpr\n+\tkeyword; add dg-message for 'in .constexpr. expansion of '.\n+\t* g++.dg/cpp0x/constexpr-50060.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-60049.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-70323.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-70323a.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-cast.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-diag3.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-ex1.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-generated1.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-ice16.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-ice5.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-incomplete2.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-neg1.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-recursion.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-shift1.C: Likewise.\n+\t* g++.dg/cpp1y/constexpr-70265-1.C: Likewise.\n+\t* g++.dg/cpp1y/constexpr-70265-2.C: Likewise.\n+\t* g++.dg/cpp1y/constexpr-79655.C: Likewise.\n+\t* g++.dg/cpp1y/constexpr-new.C: Likewise.\n+\t* g++.dg/cpp1y/constexpr-return2.C: Likewise.\n+\t* g++.dg/cpp1y/constexpr-shift1.C: Likewise.\n+\t* g++.dg/cpp1y/constexpr-throw.C: Likewise.\n+\t* g++.dg/cpp1z/constexpr-lambda6.C: Likewise.\n+\t* g++.dg/ext/constexpr-vla1.C: Likewise.\n+\t* g++.dg/ext/constexpr-vla2.C: Likewise.\n+\t* g++.dg/ext/constexpr-vla3.C: Likewise.\n+\t* g++.dg/cpp0x/static_assert10.C: Likewise.\n+\t* g++.dg/cpp1y/pr63996.C: Likewise.\n+\t* g++.dg/cpp1y/pr68180.C: Likewise.\n+\t* g++.dg/cpp1y/pr77830.C: Likewise.\n+\t* g++.dg/ubsan/pr63956.C: Likewise.\n+\n 2017-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/83045"}, {"sha": "4574eb83ff765ebb632b226239240a45527cad12", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-48089.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-48089.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-48089.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-48089.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -14,7 +14,7 @@ struct s {\n   int v;\n };\n \n-constexpr s bang;\t\t// { dg-error \"\" }\n+constexpr s bang;\t\t// { dg-error \"|\" }\n \n struct R {\n   int i,j;"}, {"sha": "d99142882419eeb05d487f83469a292c127b3473", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-50060.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-50060.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-50060.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-50060.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -17,5 +17,5 @@ struct T\n   int y;\n };\n \n-static_assert (S (6.5).x == 0.8125, \"\");\t// { dg-error \"non-constant condition for static assertion|in constexpr expansion\" \"\" { target { ! c++14 } } }\n+static_assert (S (6.5).x == 0.8125, \"\");\t// { dg-error \"non-constant condition for static assertion|in .constexpr. expansion\" \"\" { target { ! c++14 } } }\n static_assert (T (6.5).x == 0.8125, \"\");\t// { dg-error \"non-constant condition for static assertion|called in a constant expression\" \"\" { target { ! c++14 } } }"}, {"sha": "172963f1fc4ab12f8e3a4fbe8e41b3f7be42d0d5", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-60049.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-60049.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-60049.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-60049.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -11,11 +11,11 @@ constexpr int f5 (int n) { return 1 >> n; }   // { dg-error \"shift expression\" }\n \n constexpr int X = __CHAR_BIT__ * sizeof (int) + 1;\n \n-constexpr int x1 = f1 (X);\n-constexpr int x2 = f2 (-1);\n-constexpr int x3 = f3 (-1);\n-constexpr int x4 = f4 (X);\n-constexpr int x5 = f5 (-1);\n+constexpr int x1 = f1 (X);    // { dg-message \"in .constexpr. expansion of\" }\n+constexpr int x2 = f2 (-1);   // { dg-message \"in .constexpr. expansion of\" }\n+constexpr int x3 = f3 (-1);   // { dg-message \"in .constexpr. expansion of\" }\n+constexpr int x4 = f4 (X);    // { dg-message \"in .constexpr. expansion of\" }\n+constexpr int x5 = f5 (-1);   // { dg-message \"in .constexpr. expansion of\" }\n \n constexpr int y1 =  1 << X;   // { dg-error \"shift expression\" }\n constexpr int y2 =  1 << -1;  // { dg-error \"shift expression\" }"}, {"sha": "272a225d967e1e73aa0f9d4d2307e2ad3a5abada", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-70323.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70323.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70323.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70323.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -4,7 +4,7 @@\n constexpr int overflow_if_0 (int i) { return __INT_MAX__ + !i; }\n constexpr int overflow_if_1 (int i) { return __INT_MAX__ + i; }\n \n-constexpr bool i0_0 = overflow_if_0 (0);   // { dg-error \"overflow in constant expression\" }\n+constexpr bool i0_0 = overflow_if_0 (0);   // { dg-error \"overflow in constant expression|in .constexpr. expansion of \" }\n constexpr bool i0_1 = overflow_if_0 (1);\n constexpr bool i1_0 = overflow_if_1 (0);\n-constexpr bool i1_1 = overflow_if_1 (1);   // { dg-error \"overflow in constant expression\" }\n+constexpr bool i1_1 = overflow_if_1 (1);   // { dg-error \"overflow in constant expression|in .constexpr. expansion of \" }"}, {"sha": "1990ab6be2d81f0cceb29090265a335822160417", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-70323a.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70323a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70323a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-70323a.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -5,7 +5,7 @@\n constexpr int overflow_if_0 (int i) { return __INT_MAX__ + !i; }\n constexpr int overflow_if_1 (int i) { return __INT_MAX__ + i; }\n \n-constexpr bool i0_0 = overflow_if_0 (0);   // { dg-error \"overflow in constant expression\" }\n+constexpr bool i0_0 = overflow_if_0 (0);   // { dg-error \"overflow in constant expression|in .constexpr. expansion of\" }\n constexpr bool i0_1 = overflow_if_0 (1);\n constexpr bool i1_0 = overflow_if_1 (0);\n-constexpr bool i1_1 = overflow_if_1 (1);   // { dg-error \"overflow in constant expression\" }\n+constexpr bool i1_1 = overflow_if_1 (1);   // { dg-error \"overflow in constant expression|in .constexpr. expansion of\" }"}, {"sha": "1ed01c88ff59898d30e2f34436e2393ecda40761", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-cast.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-cast.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-cast.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-cast.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -21,4 +21,4 @@ constexpr bool f ()\n #endif\n }\n \n-constexpr bool b = f<int>();   // { dg-error \"not a constant expression\" }\n+constexpr bool b = f<int>();   // { dg-error \"not a constant expression|in .constexpr. expansion of \" }"}, {"sha": "fc5a721085333cfb9d0fd480521a38cf602c678f", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-diag3.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag3.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -13,7 +13,7 @@ int main()\n \n // --------------------\n \n-struct complex \t\t\t// { dg-message \"no constexpr constructor\" }\n+struct complex \t\t\t// { dg-message \"no .constexpr. constructor\" }\n {\n   complex(double r, double i) : re(r), im(i) { }\n   constexpr double real() const { return re; } // { dg-error \"not a literal type\" \"\" { target c++11_only } }\n@@ -25,19 +25,19 @@ private:\n };\n \n constexpr complex co1(0, 1);\t   // { dg-error \"not literal\" }\n-constexpr double dd2 = co1.real(); // { dg-error \"\" }\n+constexpr double dd2 = co1.real(); // { dg-error \"|in .constexpr. expansion of \" }\n \n // --------------------\n \n-struct base\t\t       // { dg-message \"no constexpr constructor\" }\n+struct base\t\t       // { dg-message \"no .constexpr. constructor\" }\n {\n   int _M_i;\n   base() : _M_i(5) { }\n };\n \n struct derived : public base\t// { dg-message \"base class\" }\n {\n-  constexpr derived(): base() { } // { dg-error \"non-constexpr function\" }\n+  constexpr derived(): base() { } // { dg-error \"non-.constexpr. function\" }\n };\n \n constexpr derived obj;\t\t// { dg-error \"not literal\" }\n@@ -48,7 +48,7 @@ struct Def\n {\n   int _M_i;\t\t\t// { dg-message \"does not initialize\" }\n \n-  constexpr Def() = default;\t// { dg-error \"implicit declaration is not constexpr\" }\n+  constexpr Def() = default;\t// { dg-error \"implicit declaration is not .constexpr.\" }\n };\n \n constexpr Def defobj;\t\t// { dg-error \"uninitialized\" }"}, {"sha": "e5e58bddab0b2fa8a37cd0395cb853a957250518", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ex1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex1.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -54,7 +54,7 @@ constexpr complex I(0, 1);  // OK -- literal complex\n \n \n // 2 invoked with non-const args\n-double x5 = 1.0;\t       // { dg-message \"not declared .constexpr\" }\n+double x5 = 1.0;\t       // { dg-message \"not declared .constexpr.\" }\n constexpr complex unit(x5, 0);\t// { dg-error \"x5|argument\" } error: x5 non-constant\n const complex one(x5, 0);   // OK, \u2018\u2018ordinary const\u2019\u2019 -- dynamic\n                            //   initialization\n@@ -87,7 +87,7 @@ struct resource {\n   }\n };\n constexpr resource f(resource d)\n-{ return d; }                  // { dg-error \"non-constexpr\" }\n-constexpr resource d = f(9);   // { dg-message \"constexpr\" }\n+{ return d; }                  // { dg-error \"non-.constexpr.\" }\n+constexpr resource d = f(9);   // { dg-message \".constexpr.\" }\n \n // 4.4 floating-point constant expressions"}, {"sha": "4b0d68bf6613c577842e66df38147f35e6c91274", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-generated1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-generated1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-generated1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-generated1.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -9,7 +9,7 @@ int g();\n \n // We should complain about this.\n template<> constexpr int A<int>::f()\n-{ return g(); }\t\t\t// { dg-error \"non-constexpr\" }\n+{ return g(); }\t\t\t// { dg-error \"non-.constexpr.\" }\n \n // But not about this.\n struct B"}, {"sha": "112415b655bfaa3e57606c22cb3ce02f2ed9513b", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ice16.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice16.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -6,9 +6,9 @@\n struct Foo {\n     constexpr Foo(const unsigned i) : val(i) {}\n     constexpr Foo operator-(const Foo &rhs) const {\n-      return assert(val >= rhs.val), Foo(val - rhs.val); // { dg-error \"call to non-constexpr\" }\n+      return assert(val >= rhs.val), Foo(val - rhs.val); // { dg-error \"call to non-.constexpr.\" }\n     }\n     unsigned val;\n };\n \n-constexpr Foo foo(Foo(1) - Foo(2));\n+constexpr Foo foo(Foo(1) - Foo(2)); // { dg-message \"in .constexpr. expansion of \" }"}, {"sha": "51b328e2598098f6d330e96751674920426ec8fb", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ice5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice5.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -9,5 +9,5 @@ struct A\n struct B\n {\n   A a[1];\n-  constexpr B() : a() {} // { dg-error \"non-constant|non-constexpr\" }\n+  constexpr B() : a() {} // { dg-error \"non-constant|non-.constexpr.\" }\n };"}, {"sha": "a04f1d51d22c7666312fd1d87497cf6dea74879b", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-incomplete2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-incomplete2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-incomplete2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-incomplete2.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -28,4 +28,4 @@ struct D\n   C<D> c;\n };\n \n-constexpr D d {};\t\t// { dg-error \"non-constexpr function\" }\n+constexpr D d {};\t\t// { dg-error \"non-.constexpr. function\" }"}, {"sha": "336699292a2eb4193b71c14c21725d7bc0bf0bfa", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-neg1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-neg1.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -5,7 +5,7 @@\n constexpr int square(int x);\t// { dg-message \"never defined\" }\n \n // error: pixel is a type\n-constexpr struct pixel {        // { dg-error \"constexpr\" }\n+constexpr struct pixel {        // { dg-error \".constexpr.\" }\n   int x;\n   int y;\n   // OK: declaration\n@@ -18,7 +18,7 @@ constexpr pixel::pixel(int a)\n \n // error: square not defined, so small(2) not constant (5.19), so constexpr\n // not satisfied\n-constexpr pixel small(2);\t// { dg-message \"in constexpr expansion\" }\n+constexpr pixel small(2);\t// { dg-message \"in .constexpr. expansion of \" }\n \n // error: not for parameters\n int next(constexpr int x) {\t// { dg-error \"parameter\" }\n@@ -40,7 +40,7 @@ constexpr int g(int x, int n) {\n   int r = 1;\n   while (--n > 0) r *= x;\n   return r;\n-} // { dg-error \"body of constexpr function\" \"\" { target c++11_only } }\n+} // { dg-error \"body of .constexpr. function\" \"\" { target c++11_only } }\n \n class debug_flag {\n public:"}, {"sha": "8c4201e1ec2e3d1b16279a2fd77e1dadf6c22d19", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-recursion.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-recursion.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-recursion.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-recursion.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -2,5 +2,5 @@\n // { dg-do compile { target c++11 } }\n // { dg-options \"-fconstexpr-depth=5\" }\n // { dg-prune-output \"in constexpr expansion\" }\n-constexpr int f (int i) { return f (i-1); }\n-constexpr int i = f(42);\t// { dg-error \"constexpr evaluation depth\" }\n+constexpr int f (int i) { return f (i-1); } // { dg-message \"in .constexpr. expansion of \" }\n+constexpr int i = f(42);\t// { dg-error \".constexpr. evaluation depth|in .constexpr. expansion of \" }"}, {"sha": "4abd9e0cfb6bf6e15a49971f6959e906bcab3828", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-shift1.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-shift1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-shift1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-shift1.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -6,31 +6,31 @@ fn1 (int i, int j)\n   return i << j; // { dg-error \"is negative\" }\n }\n \n-constexpr int i1 = fn1 (1, -1);\n+constexpr int i1 = fn1 (1, -1); // { dg-message \"in .constexpr. expansion of \" }\n \n constexpr int\n fn2 (int i, int j)\n {\n   return i << j; // { dg-error \"is >= than the precision of the left operand\" }\n }\n \n-constexpr int i2 = fn2 (1, 200);\n+constexpr int i2 = fn2 (1, 200); // { dg-message \"in .constexpr. expansion of \" }\n \n constexpr int\n fn3 (int i, int j)\n {\n   return i << j; // { dg-error \"is negative\" }\n }\n \n-constexpr int i3 = fn3 (-1, 2);\n+constexpr int i3 = fn3 (-1, 2); // { dg-message \"in .constexpr. expansion of \" }\n \n constexpr int\n fn4 (int i, int j)\n {\n   return i << j; // { dg-error \"overflows\" }\n }\n \n-constexpr int i4 = fn4 (__INT_MAX__, 2);\n+constexpr int i4 = fn4 (__INT_MAX__, 2); // { dg-message \"in .constexpr. expansion of \" }\n \n constexpr int\n fn5 (int i, int j)\n@@ -46,15 +46,15 @@ fn6 (unsigned int i, unsigned int j)\n   return i << j; // { dg-error \"is >= than the precision of the left operand\" }\n }\n \n-constexpr int i6 = fn6 (1, -1);\n+constexpr int i6 = fn6 (1, -1); // { dg-message \"in .constexpr. expansion of \" }\n \n constexpr int\n fn7 (int i, int j)\n {\n   return i >> j; // { dg-error \"is negative\" }\n }\n \n-constexpr int i7 = fn7 (1, -1);\n+constexpr int i7 = fn7 (1, -1); // { dg-message \"in .constexpr. expansion of \" }\n \n constexpr int\n fn8 (int i, int j)\n@@ -70,4 +70,4 @@ fn9 (int i, int j)\n   return i >> j;  // { dg-error \"is >= than the precision of the left operand\" }\n }\n \n-constexpr int i9 = fn9 (1, 200);\n+constexpr int i9 = fn9 (1, 200); // { dg-message \"in .constexpr. expansion of \" }"}, {"sha": "5ff085487cc552aa86745624f42f07482bbb0f0d", "filename": "gcc/testsuite/g++.dg/cpp0x/static_assert10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert10.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -4,6 +4,6 @@\n template<typename T> bool foo(T)\n {\n   int i;\n-  static_assert(foo(i), \"Error\"); // { dg-error \"non-constant condition|not usable|non-constexpr\" }\n+  static_assert(foo(i), \"Error\"); // { dg-error \"non-constant condition|not usable|non-.constexpr.\" }\n   return true;\n }"}, {"sha": "902fe1defbdcefc00fc52c4357fea3fcbbd8b200", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-70265-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-70265-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-70265-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-70265-1.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -10,4 +10,4 @@ foo (int p)\n   return t;\n }\n \n-static_assert (foo (1) == 0, \"\");  // { dg-error \"non-constant\" }\n+static_assert (foo (1) == 0, \"\");  // { dg-error \"non-constant|in .constexpr. expansion of \" }"}, {"sha": "895870effe11759db3eee867cc695d8fb8108abf", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-70265-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-70265-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-70265-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-70265-2.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -10,4 +10,4 @@ foo (int p)\n   return t;\n }\n \n-static_assert (foo (1) == 0, \"\");  // { dg-error \"non-constant\" }\n+static_assert (foo (1) == 0, \"\");  // { dg-error \"non-constant|in .constexpr. expansion of \" }"}, {"sha": "cc9ce6c505ea5ee6fd29f40aae9c9496062c9ca4", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-79655.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-79655.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-79655.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-79655.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -9,10 +9,10 @@ foo (int x, int y)\n   return a[y];\n }\n \n-constexpr int b = foo (0, -1);\t// { dg-error \"is outside the bounds\" }\n-constexpr int c = foo (0, 6);\t// { dg-error \"is outside the bounds\" }\n-constexpr int d = foo (6, 0);\t// { dg-error \"is outside the bounds\" }\n-constexpr int e = foo (-1, 0);\t// { dg-error \"is outside the bounds\" }\n+constexpr int b = foo (0, -1);\t// { dg-error \"is outside the bounds|in .constexpr. expansion of \" }\n+constexpr int c = foo (0, 6);\t// { dg-error \"is outside the bounds|in .constexpr. expansion of \" }\n+constexpr int d = foo (6, 0);\t// { dg-error \"is outside the bounds|in .constexpr. expansion of \" }\n+constexpr int e = foo (-1, 0);\t// { dg-error \"is outside the bounds|in .constexpr. expansion of \" }\n static_assert (foo (5, 5) == 0, \"\");\n static_assert (foo (4, 5) == 6, \"\");\n static_assert (foo (5, 4) == 5, \"\");"}, {"sha": "9e300b9a8669ec745541b30626cdab15c7ab32b5", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-new.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-new.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-new.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-new.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -4,8 +4,8 @@ constexpr int *f4(bool b) {\n   if (b) {\n     return nullptr;\n   } else {\n-    return new int{42}; // { dg-error \"call to non-constexpr\" }\n+    return new int{42}; // { dg-error \"call to non-.constexpr.\" }\n   }\n }\n static_assert(f4(true) == nullptr, \"\");\n-static_assert(f4(false) == nullptr, \"\"); // { dg-error \"non-constant condition\" }\n+static_assert(f4(false) == nullptr, \"\"); // { dg-error \"non-.constant. condition|\" }"}, {"sha": "cb0185414afedc332241cb206afd6c05f699f478", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-return2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-return2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-return2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-return2.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -5,4 +5,4 @@ constexpr int f (int i)\n {\n }\n \n-constexpr int i = f(42);\t// { dg-error \"flows off the end\" }\n+constexpr int i = f(42);\t// { dg-error \"flows off the end|in .constexpr. expansion of \" }"}, {"sha": "d63c954f42f7c3ce2115a8677dcdda909bd1eb00", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-shift1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-shift1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-shift1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-shift1.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -5,5 +5,5 @@ constexpr __PTRDIFF_TYPE__ bar (int a)\n {\n   return ((__PTRDIFF_TYPE__) &p) << a; // { dg-error \"is not a constant expression\" }\n }\n-constexpr __PTRDIFF_TYPE__ r = bar (2);\n+constexpr __PTRDIFF_TYPE__ r = bar (2); // { dg-message \"in .constexpr. expansion of\" }\n constexpr __PTRDIFF_TYPE__ s = bar (0); // { dg-error \"conversion from pointer\" }"}, {"sha": "3bbc8ac1b888f3e962fbe27e01837403047ad2f6", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-throw.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-throw.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-throw.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-throw.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -31,4 +31,4 @@ constexpr int fun(int n) {\n }\n \n static_assert(fun(0), \"\");\n-static_assert(fun(1), \"\"); // { dg-error \"non-constant\" }\n+static_assert(fun(1), \"\"); // { dg-error \"non-constant|in .constexpr. expansion of\" }"}, {"sha": "2e8cab58a7a0c3c0f9cab66afc2d527a0813cc7f", "filename": "gcc/testsuite/g++.dg/cpp1y/pr63996.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr63996.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr63996.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr63996.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -7,5 +7,4 @@ foo (int i)\n   int a[i] = { }; // { dg-error \"forbids variable length\" }\n }\n \n-constexpr int j = foo (1); // { dg-error \"flows off the end\" }\n-\n+constexpr int j = foo (1); // { dg-error \"flows off the end|in .constexpr. expansion of\" }"}, {"sha": "9e6e5e984f9977ff53b4f7456a7823ee0cc5fb5e", "filename": "gcc/testsuite/g++.dg/cpp1y/pr68180.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr68180.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr68180.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr68180.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -11,6 +11,6 @@ constexpr float32x4_t fill(float x) {\n }\n \n float32x4_t foo(float32x4_t x) {\n-  constexpr float32x4_t v = fill(1.f); // { dg-error \"not a constant\" }\n+  constexpr float32x4_t v = fill(1.f); // { dg-error \"not a constant||in .constexpr. expansion of \" }\n   return x+v;\n }"}, {"sha": "6fcb1ba8847049921e4b5184cec6c6a22d261f8e", "filename": "gcc/testsuite/g++.dg/cpp1y/pr77830.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr77830.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr77830.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr77830.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -23,12 +23,12 @@ bar (T... a)\n   const char *s[]{a...};\n   P<sizeof...(a)> p{};\n   for (auto i = 0; i < sizeof...(a); ++i)\n-    p.foo (s[i], i);\n+    p.foo (s[i], i); // { dg-message \"in .constexpr. expansion of \" }\n   return p;\n }\n \n int\n main ()\n {\n-  constexpr auto a = bar (\"\", \"\");\t// { dg-error \"outside the bounds of array type\" }\n+  constexpr auto a = bar (\"\", \"\");\t// { dg-error \"outside the bounds of array type|in .constexpr. expansion of \" }\n }"}, {"sha": "cd7c5b9f3efc39f7eef43b2d25cb83acf611e94e", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda6.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -24,6 +24,6 @@ int main()\n   // expression.\n   auto two = monoid(2);\n   if (!(two() == 2)) __builtin_abort(); // OK, not a constant expression.\n-  static_assert(add(one)(one)() == two()); // { dg-error \"\" } two() is not a constant expression\n+  static_assert(add(one)(one)() == two()); // { dg-error \"|in .constexpr. expansion of \" } two() is not a constant expression\n   static_assert(add(one)(one)() == monoid(2)()); // OK\n }"}, {"sha": "aff1d21a4b7badbe288fd42576e93b13946e472b", "filename": "gcc/testsuite/g++.dg/ext/constexpr-vla1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla1.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -27,4 +27,4 @@ fn_not_ok (int n)\n }\n \n constexpr int n1 = fn_ok (3);\n-constexpr int n2 = fn_not_ok (3); // { dg-error \"array subscript\" }\n+constexpr int n2 = fn_not_ok (3); // { dg-error \"array subscript|in .constexpr. expansion of \" }"}, {"sha": "d4ea7c58c0d8d051adbbeca8b3545158ca26747e", "filename": "gcc/testsuite/g++.dg/ext/constexpr-vla2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla2.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -5,7 +5,7 @@ constexpr int\n fn_bad (int n)\n {\n   __extension__ int a [n] = { 0 };\n-  int z = a [0] + (n ? fn_bad (n - 1) : 0);\n+  int z = a [0] + (n ? fn_bad (n - 1) : 0); // { dg-message \"in .constexpr. expansion of \" } \n   return z;\n }\n \n@@ -18,4 +18,4 @@ fn_ok (int n)\n }\n \n constexpr int i1 = fn_ok (3);\n-constexpr int i2 = fn_bad (3); // { dg-error \"array subscript\" }\n+constexpr int i2 = fn_bad (3); // { dg-error \"array subscript|in .constexpr. expansion of \" }"}, {"sha": "538b576a8255cf3bb84e94d7c4df89e20aa4e114", "filename": "gcc/testsuite/g++.dg/ext/constexpr-vla3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla3.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -11,4 +11,4 @@ foo (int n)\n   return z;\n }\n \n-constexpr int n = foo (3); // { dg-error \"array subscript\" }\n+constexpr int n = foo (3); // { dg-error \"array subscript|in .constexpr. expansion of \" }"}, {"sha": "34b5dd71ec2d142393db869a485015283468bf8d", "filename": "gcc/testsuite/g++.dg/ubsan/pr63956.C", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr63956.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fa214dea091e289950a41b70964de73a3c1172/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr63956.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr63956.C?ref=84fa214dea091e289950a41b70964de73a3c1172", "patch": "@@ -17,11 +17,11 @@ fn1 (int a, int b)\n }\n \n constexpr int i1 = fn1 (5, 3);\n-constexpr int i2 = fn1 (5, -2); // { dg-message \"in constexpr expansion\" }\n-constexpr int i3 = fn1 (5, sizeof (int) * __CHAR_BIT__); // { dg-message \"in constexpr expansion\" }\n-constexpr int i4 = fn1 (5, 256); // { dg-message \"in constexpr expansion\" }\n+constexpr int i2 = fn1 (5, -2); // { dg-message \"in .constexpr. expansion\" }\n+constexpr int i3 = fn1 (5, sizeof (int) * __CHAR_BIT__); // { dg-message \"in .constexpr. expansion\" }\n+constexpr int i4 = fn1 (5, 256); // { dg-message \"in .constexpr. expansion\" }\n constexpr int i5 = fn1 (5, 2);\n-constexpr int i6 = fn1 (-2, 4); // { dg-message \"in constexpr expansion\" }\n+constexpr int i6 = fn1 (-2, 4); // { dg-message \"in .constexpr. expansion\" }\n constexpr int i7 = fn1 (0, 2);\n \n SA (i1 == 40);\n@@ -40,9 +40,9 @@ fn2 (int a, int b)\n }\n \n constexpr int j1 = fn2 (4, 1);\n-constexpr int j2 = fn2 (4, -1); // { dg-message \"in constexpr expansion\" }\n-constexpr int j3 = fn2 (10, sizeof (int) * __CHAR_BIT__); // { dg-message \"in constexpr expansion\" }\n-constexpr int j4 = fn2 (1, 256); // { dg-message \"in constexpr expansion\" }\n+constexpr int j2 = fn2 (4, -1); // { dg-message \"in .constexpr. expansion\" }\n+constexpr int j3 = fn2 (10, sizeof (int) * __CHAR_BIT__); // { dg-message \"in .constexpr. expansion\" }\n+constexpr int j4 = fn2 (1, 256); // { dg-message \"in .constexpr. expansion\" }\n constexpr int j5 = fn2 (5, 2);\n constexpr int j6 = fn2 (-2, 4);\n constexpr int j7 = fn2 (0, 4);\n@@ -60,8 +60,8 @@ fn3 (int a, int b)\n }\n \n constexpr int k1 = fn3 (8, 4);\n-constexpr int k2 = fn3 (7, 0); // { dg-message \"in constexpr expansion\" }\n-constexpr int k3 = fn3 (INT_MIN, -1); // { dg-error \"overflow in constant expression\" }\n+constexpr int k2 = fn3 (7, 0); // { dg-message \"in .constexpr. expansion\" }\n+constexpr int k3 = fn3 (INT_MIN, -1); // { dg-error \"overflow in constant expression|in .constexpr. expansion of \" }\n \n SA (k1 == 2);\n \n@@ -74,7 +74,7 @@ fn4 (float a, float b)\n }\n \n constexpr float l1 = fn4 (5.0, 3.0);\n-constexpr float l2 = fn4 (7.0, 0.0); // { dg-message \"in constexpr expansion\" }\n+constexpr float l2 = fn4 (7.0, 0.0); // { dg-message \"in .constexpr. expansion\" }\n \n constexpr int\n fn5 (const int *a, int b)\n@@ -86,7 +86,7 @@ fn5 (const int *a, int b)\n \n constexpr int m1[4] = { 1, 2, 3, 4 };\n constexpr int m2 = fn5 (m1, 3);\n-constexpr int m3 = fn5 (m1, 4); // { dg-error \"array subscript\" }\n+constexpr int m3 = fn5 (m1, 4); // { dg-error \"array subscript|in .constexpr. expansion of \" }\n \n constexpr int\n fn6 (const int &a, int b)\n@@ -106,7 +106,7 @@ fn7 (const int *a, int b)\n \n constexpr int n1 = 7;\n constexpr int n2 = fn7 (&n1, 5);\n-constexpr int n3 = fn7 ((const int *) 0, 8);  // { dg-error \"null pointer\" }\n+constexpr int n3 = fn7 ((const int *) 0, 8);  // { dg-error \"null pointer|in .constexpr. expansion of \" }\n \n constexpr int\n fn8 (int i)\n@@ -116,7 +116,7 @@ fn8 (int i)\n }\n \n constexpr int o1 = fn8 (9);\n-constexpr int o2 = fn8 (10); // { dg-error \"array subscript\" }\n+constexpr int o2 = fn8 (10); // { dg-error \"array subscript|in .constexpr. expansion of \" }\n \n constexpr int\n fn9 (int a, int b)\n@@ -127,10 +127,10 @@ fn9 (int a, int b)\n }\n \n constexpr int p1 = fn9 (42, 7);\n-constexpr int p2 = fn9 (__INT_MAX__, 1); // { dg-error \"overflow in constant expression\" }\n+constexpr int p2 = fn9 (__INT_MAX__, 1); // { dg-error \"overflow in constant expression|in .constexpr. expansion of \" }\n constexpr int p3 = fn9 (__INT_MAX__, -1);\n constexpr int p4 = fn9 (INT_MIN, 1);\n-constexpr int p5 = fn9 (INT_MIN, -1); // { dg-error \"overflow in constant expression\" }\n+constexpr int p5 = fn9 (INT_MIN, -1); // { dg-error \"overflow in constant expression|in .constexpr. expansion of \" }\n \n SA (p1 == 49);\n SA (p3 == __INT_MAX__ - 1);\n@@ -145,8 +145,8 @@ fn10 (int a, int b)\n }\n \n constexpr int q1 = fn10 (10, 10);\n-constexpr int q2 = fn10 (__INT_MAX__, 2); // { dg-error \"overflow in constant expression\" }\n-constexpr int q3 = fn10 (INT_MIN, 2); // { dg-error \"overflow in constant expression\" }\n+constexpr int q2 = fn10 (__INT_MAX__, 2); // { dg-error \"overflow in constant expression|in .constexpr. expansion of \" }\n+constexpr int q3 = fn10 (INT_MIN, 2); // { dg-error \"overflow in constant expression|in .constexpr. expansion of \" }\n constexpr int q4 = fn10 (-1, -1);\n \n SA (q1 == 100);\n@@ -162,7 +162,7 @@ fn11 (double d)\n }\n \n constexpr int r1 = fn11 (3.4);\n-constexpr int r2 = fn11 (__builtin_inf ()); // { dg-error \"overflow in constant expression\" }\n+constexpr int r2 = fn11 (__builtin_inf ()); // { dg-error \"overflow in constant expression|in .constexpr. expansion of \" }\n \n constexpr int\n fn12 (int i)\n@@ -173,6 +173,6 @@ fn12 (int i)\n }\n \n constexpr int s1 = fn12 (1);\n-constexpr int s2 = fn12 (42);\n+constexpr int s2 = fn12 (42); // { dg-message \"in .constexpr. expansion of \" }\n \n SA (s1 == 11);"}]}