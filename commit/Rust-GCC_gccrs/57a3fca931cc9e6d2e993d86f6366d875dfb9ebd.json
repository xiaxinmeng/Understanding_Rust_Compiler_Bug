{"sha": "57a3fca931cc9e6d2e993d86f6366d875dfb9ebd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdhM2ZjYTkzMWNjOWU2ZDJlOTkzZDg2ZjYzNjZkODc1ZGZiOWViZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-06T08:27:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-06T08:27:42Z"}, "message": "[multiple changes]\n\n2011-09-06  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch7.adb, g-comlin.adb: Minor reformatting.\n\n2011-09-06  Steve Baird  <baird@adacore.com>\n\n\t* exp_ch4.adb (Expand_Allocator_Expression): Look through\n\tderived subprograms in checking for presence of an\n\tExtra_Accessibility_Of_Result formal parameter.\n\t* exp_ch6.adb (Expand_Call): Look through derived subprograms in\n\tchecking for presence of an Extra_Accessibility_Of_Result formal\n\tparameter.\n\t(Expand_Call.Add_Actual_Parameter): Fix a bug in the\n\tcase where the Parameter_Associatiations attribute is already set,\n\tbut set to an empty list.\n\t(Needs_Result_Accessibility_Level):\n\tUnconditionally return False. This is a temporary\n\tchange, disabling the Extra_Accessibility_Of_Result\n\tmechanism.\n\t(Expand_Simple_Function_Return): Check for\n\tExtra_Accessibility_Of_Result parameter's presence instead of\n\ttesting Ada_Version when generating a runtime accessibility\n\tcheck which makes use of the parameter.\n\nFrom-SVN: r178571", "tree": {"sha": "d57415deba478b529682df5010306caf0e0b0a0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d57415deba478b529682df5010306caf0e0b0a0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57a3fca931cc9e6d2e993d86f6366d875dfb9ebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a3fca931cc9e6d2e993d86f6366d875dfb9ebd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57a3fca931cc9e6d2e993d86f6366d875dfb9ebd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a3fca931cc9e6d2e993d86f6366d875dfb9ebd/comments", "author": null, "committer": null, "parents": [{"sha": "eaed0c37779f8cf403921cda1f63d14c1f14a914", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaed0c37779f8cf403921cda1f63d14c1f14a914", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaed0c37779f8cf403921cda1f63d14c1f14a914"}], "stats": {"total": 181, "additions": 119, "deletions": 62}, "files": [{"sha": "9b2c1bcc631488f22b3957b911fba15eddfc675e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a3fca931cc9e6d2e993d86f6366d875dfb9ebd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a3fca931cc9e6d2e993d86f6366d875dfb9ebd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=57a3fca931cc9e6d2e993d86f6366d875dfb9ebd", "patch": "@@ -1,3 +1,27 @@\n+2011-09-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch7.adb, g-comlin.adb: Minor reformatting.\n+\n+2011-09-06  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Allocator_Expression): Look through\n+\tderived subprograms in checking for presence of an\n+\tExtra_Accessibility_Of_Result formal parameter.\n+\t* exp_ch6.adb (Expand_Call): Look through derived subprograms in\n+\tchecking for presence of an Extra_Accessibility_Of_Result formal\n+\tparameter.\n+\t(Expand_Call.Add_Actual_Parameter): Fix a bug in the\n+\tcase where the Parameter_Associatiations attribute is already set,\n+\tbut set to an empty list.\n+\t(Needs_Result_Accessibility_Level):\n+\tUnconditionally return False. This is a temporary\n+\tchange, disabling the Extra_Accessibility_Of_Result\n+\tmechanism.\n+\t(Expand_Simple_Function_Return): Check for\n+\tExtra_Accessibility_Of_Result parameter's presence instead of\n+\ttesting Ada_Version when generating a runtime accessibility\n+\tcheck which makes use of the parameter.\n+\n 2011-09-06  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch4.adb (Expand_N_Case_Expression): Actions created for the"}, {"sha": "aef54a60ec27a7be63aef1f3d835c8aabacca8b7", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a3fca931cc9e6d2e993d86f6366d875dfb9ebd/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a3fca931cc9e6d2e993d86f6366d875dfb9ebd/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=57a3fca931cc9e6d2e993d86f6366d875dfb9ebd", "patch": "@@ -783,6 +783,8 @@ package body Exp_Ch4 is\n                Subp := Entity (Name (Exp));\n             end if;\n \n+            Subp := Ultimate_Alias (Subp);\n+\n             if Present (Extra_Accessibility_Of_Result (Subp)) then\n                Add_Extra_Actual_To_Call\n                  (Subprogram_Call => Exp,"}, {"sha": "014318d5ff8d63a09861b158128c41e80afec05c", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a3fca931cc9e6d2e993d86f6366d875dfb9ebd/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a3fca931cc9e6d2e993d86f6366d875dfb9ebd/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=57a3fca931cc9e6d2e993d86f6366d875dfb9ebd", "patch": "@@ -1847,8 +1847,10 @@ package body Exp_Ch6 is\n             if No (Prev) then\n                if No (Parameter_Associations (Call_Node)) then\n                   Set_Parameter_Associations (Call_Node, New_List);\n-                  Append (Insert_Param, Parameter_Associations (Call_Node));\n                end if;\n+\n+               Append (Insert_Param, Parameter_Associations (Call_Node));\n+\n             else\n                Insert_After (Prev, Insert_Param);\n             end if;\n@@ -2754,7 +2756,8 @@ package body Exp_Ch6 is\n       --  passed in to it, then pass it in.\n \n       if Ekind_In (Subp, E_Function, E_Operator, E_Subprogram_Type)\n-         and then Present (Extra_Accessibility_Of_Result (Subp))\n+        and then\n+          Present (Extra_Accessibility_Of_Result (Ultimate_Alias (Subp)))\n       then\n          declare\n             Ancestor : Node_Id := Parent (Call_Node);\n@@ -2763,15 +2766,19 @@ package body Exp_Ch6 is\n \n          begin\n             --  Unimplemented: if Subp returns an anonymous access type, then\n+\n             --    a) if the call is the operand of an explict conversion, then\n             --       the target type of the conversion (a named access type)\n             --       determines the accessibility level pass in;\n+\n             --    b) if the call defines an access discriminant of an object\n             --       (e.g., the discriminant of an object being created by an\n             --       allocator, or the discriminant of a function result),\n             --       then the accessibility level to pass in is that of the\n             --       discriminated object being initialized).\n \n+            --  ???\n+\n             while Nkind (Ancestor) = N_Qualified_Expression\n             loop\n                Ancestor := Parent (Ancestor);\n@@ -2851,7 +2858,9 @@ package body Exp_Ch6 is\n                              Scope_Depth (Current_Scope) + 1);\n                end if;\n \n-               Add_Extra_Actual (Level, Extra_Accessibility_Of_Result (Subp));\n+               Add_Extra_Actual\n+                 (Level,\n+                  Extra_Accessibility_Of_Result (Ultimate_Alias (Subp)));\n             end if;\n          end;\n       end if;\n@@ -6742,7 +6751,7 @@ package body Exp_Ch6 is\n       --  ensure that the function result does not outlive an\n       --  object designated by one of it discriminants.\n \n-      if Ada_Version >= Ada_2012\n+      if Present (Extra_Accessibility_Of_Result (Scope_Id))\n         and then Has_Unconstrained_Access_Discriminants (R_Type)\n       then\n          declare\n@@ -8320,6 +8329,9 @@ package body Exp_Ch6 is\n          return False;\n       end Has_Unconstrained_Access_Discriminant_Component;\n \n+      Feature_Disabled : constant Boolean := True;\n+      --  Temporary\n+\n    --  Start of processing for Needs_Result_Accessibility_Level\n \n    begin\n@@ -8328,6 +8340,9 @@ package body Exp_Ch6 is\n       if not Present (Func_Typ) then\n          return False;\n \n+      elsif Feature_Disabled then\n+         return False;\n+\n       --  False if not a function, also handle enum-lit renames case\n \n       elsif Func_Typ = Standard_Void_Type"}, {"sha": "84ae17c975eeea81cf961426858fd9f7016af0d3", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a3fca931cc9e6d2e993d86f6366d875dfb9ebd/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a3fca931cc9e6d2e993d86f6366d875dfb9ebd/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=57a3fca931cc9e6d2e993d86f6366d875dfb9ebd", "patch": "@@ -1807,10 +1807,10 @@ package body Exp_Ch7 is\n                             (Available_View (Designated_Type (Obj_Typ)))\n                  and then Present (Expr)\n                  and then\n-                     (Is_Null_Access_BIP_Func_Call (Expr)\n-                   or else\n-                     (Is_Non_BIP_Func_Call (Expr)\n-                        and then not Is_Related_To_Func_Return (Obj_Id)))\n+                   (Is_Null_Access_BIP_Func_Call (Expr)\n+                     or else\n+                       (Is_Non_BIP_Func_Call (Expr)\n+                         and then not Is_Related_To_Func_Return (Obj_Id)))\n                then\n                   Processing_Actions (Has_No_Init => True);\n \n@@ -7035,17 +7035,14 @@ package body Exp_Ch7 is\n \n       function Alignment_Of (Typ : Entity_Id) return Node_Id;\n       --  Subsidiary routine, generate the following attribute reference:\n-      --\n       --    Typ'Alignment\n \n       function Size_Of (Typ : Entity_Id) return Node_Id;\n       --  Subsidiary routine, generate the following attribute reference:\n-      --\n       --    Typ'Size / Storage_Unit\n \n       function Double_Size_Of (Typ : Entity_Id) return Node_Id;\n       --  Subsidiary routine, generate the following expression:\n-      --\n       --    2 * Typ'Size / Storage_Unit\n \n       ------------------"}, {"sha": "07b01632f99dc922a1f356d8886362bd78e117e6", "filename": "gcc/ada/g-comlin.adb", "status": "modified", "additions": 70, "deletions": 51, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a3fca931cc9e6d2e993d86f6366d875dfb9ebd/gcc%2Fada%2Fg-comlin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a3fca931cc9e6d2e993d86f6366d875dfb9ebd/gcc%2Fada%2Fg-comlin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.adb?ref=57a3fca931cc9e6d2e993d86f6366d875dfb9ebd", "patch": "@@ -119,9 +119,9 @@ package body GNAT.Command_Line is\n      (Config : in out Command_Line_Configuration;\n       Switch : Switch_Definition);\n    procedure Add\n-     (Def : in out Alias_Definitions_List;\n-      Alias  : Alias_Definition);\n-   --  Add a new element to Def.\n+     (Def   : in out Alias_Definitions_List;\n+      Alias : Alias_Definition);\n+   --  Add a new element to Def\n \n    procedure Initialize_Switch_Def\n      (Def         : out Switch_Definition;\n@@ -226,9 +226,8 @@ package body GNAT.Command_Line is\n          for J in S'Range loop\n             if S (J) in 'A' .. 'Z' then\n                S (J) := Character'Val\n-                         (Character'Pos (S (J)) +\n-                          Character'Pos ('a')   -\n-                          Character'Pos ('A'));\n+                          (Character'Pos (S (J)) +\n+                            (Character'Pos ('a') - Character'Pos ('A')));\n             end if;\n          end loop;\n       end if;\n@@ -277,7 +276,8 @@ package body GNAT.Command_Line is\n          --  go to the next level.\n \n          elsif Is_Directory\n-           (It.Dir_Name (1 .. It.Levels (Current).Name_Last) & S (1 .. Last))\n+                 (It.Dir_Name (1 .. It.Levels (Current).Name_Last) &\n+                    S (1 .. Last))\n              and then S (1 .. Last) /= \".\"\n              and then S (1 .. Last) /= \"..\"\n          then\n@@ -402,6 +402,7 @@ package body GNAT.Command_Line is\n             loop\n                Parser.Current_Argument := Parser.Current_Argument + 1;\n             end loop;\n+\n          else\n             return String'(1 .. 0 => ' ');\n          end if;\n@@ -533,8 +534,8 @@ package body GNAT.Command_Line is\n             Length := Length + 1;\n          end loop;\n \n-         --  Length now marks the separator after the current switch\n-         --  Last will mark the last character of the name of the switch\n+         --  Length now marks the separator after the current switch. Last will\n+         --  mark the last character of the name of the switch.\n \n          if Length = Index + 1 then\n             P := Parameter_None;\n@@ -584,7 +585,7 @@ package body GNAT.Command_Line is\n \n       --  If we have finished parsing the current command line item (there\n       --  might be multiple switches in a single item), then go to the next\n-      --  element\n+      --  element.\n \n       if Parser.Current_Argument > Parser.Arg_Count\n         or else (Parser.Current_Index >\n@@ -615,7 +616,7 @@ package body GNAT.Command_Line is\n \n                --  If it isn't a switch, return it immediately. We also know it\n                --  isn't the parameter to a previous switch, since that has\n-               --  already been handled\n+               --  already been handled.\n \n                if Switches (Switches'First) = '*' then\n                   Set_Parameter\n@@ -754,6 +755,7 @@ package body GNAT.Command_Line is\n                         First   => End_Index + 2,\n                         Last    => Arg'Last);\n                      Dummy := Goto_Next_Argument_In_Section (Parser);\n+\n                   else\n                      Parser.Current_Index := End_Index + 1;\n                      raise Invalid_Parameter;\n@@ -993,9 +995,9 @@ package body GNAT.Command_Line is\n       Parser.Stop_At_First    := Stop_At_First_Non_Switch;\n       Parser.Section          := (others => 1);\n \n-      --  If we are using sections, we have to preprocess the command line\n-      --  to delimit them. A section can be repeated, so we just give each\n-      --  item on the command line a section number\n+      --  If we are using sections, we have to preprocess the command line to\n+      --  delimit them. A section can be repeated, so we just give each item\n+      --  on the command line a section number\n \n       Section_Num   := 1;\n       Section_Index := Section_Delimiters'First;\n@@ -1014,8 +1016,8 @@ package body GNAT.Command_Line is\n             if Argument (Parser, Index)(1) = Parser.Switch_Character\n               and then\n                 Argument (Parser, Index) = Parser.Switch_Character &\n-                                        Section_Delimiters\n-                                          (Section_Index .. Last - 1)\n+                                             Section_Delimiters\n+                                               (Section_Index .. Last - 1)\n             then\n                Parser.Section (Index) := 0;\n                Delimiter_Found := True;\n@@ -1164,8 +1166,8 @@ package body GNAT.Command_Line is\n    ----------\n \n    procedure Free (Parser : in out Opt_Parser) is\n-      procedure Unchecked_Free is new Ada.Unchecked_Deallocation\n-        (Opt_Parser_Data, Opt_Parser);\n+      procedure Unchecked_Free is new\n+        Ada.Unchecked_Deallocation (Opt_Parser_Data, Opt_Parser);\n    begin\n       if Parser /= null\n         and then Parser /= Command_Line_Parser\n@@ -1217,11 +1219,13 @@ package body GNAT.Command_Line is\n    -- Add --\n    ---------\n \n-   procedure Add (Config : in out Command_Line_Configuration;\n-                  Switch : Switch_Definition)\n+   procedure Add\n+     (Config : in out Command_Line_Configuration;\n+      Switch : Switch_Definition)\n    is\n       procedure Unchecked_Free is new Ada.Unchecked_Deallocation\n         (Switch_Definitions, Switch_Definitions_List);\n+\n       Tmp : Switch_Definitions_List;\n \n    begin\n@@ -1253,8 +1257,10 @@ package body GNAT.Command_Line is\n    procedure Add (Def : in out Alias_Definitions_List;\n                   Alias : Alias_Definition)\n    is\n-      procedure Unchecked_Free is new Ada.Unchecked_Deallocation\n-        (Alias_Definitions, Alias_Definitions_List);\n+      procedure Unchecked_Free is new\n+        Ada.Unchecked_Deallocation\n+          (Alias_Definitions, Alias_Definitions_List);\n+\n       Tmp : Alias_Definitions_List := Def;\n \n    begin\n@@ -1433,7 +1439,7 @@ package body GNAT.Command_Line is\n             if (Section = \"\" and then Config.Switches (J).Section = null)\n               or else\n                 (Config.Switches (J).Section /= null\n-                 and then Config.Switches (J).Section.all = Section)\n+                  and then Config.Switches (J).Section.all = Section)\n             then\n                exit when Config.Switches (J).Switch /= null\n                  and then not Callback (Config.Switches (J).Switch.all, J);\n@@ -1475,6 +1481,7 @@ package body GNAT.Command_Line is\n          else\n             Append (Ret, \" \" & S);\n          end if;\n+\n          return True;\n       end Add_Switch;\n \n@@ -1768,12 +1775,12 @@ package body GNAT.Command_Line is\n       function Is_In_Config\n         (Config_Switch : String; Index : Integer) return Boolean;\n       --  If Switch is the same as Config_Switch, run the callback and sets\n-      --  Found_In_Config to True\n+      --  Found_In_Config to True.\n \n       function Starts_With\n         (Config_Switch : String; Index : Integer) return Boolean;\n       --  if Switch starts with Config_Switch, sets Found_In_Config to True.\n-      --  The return value is for the Foreach_Switch iterator\n+      --  The return value is for the Foreach_Switch iterator.\n \n       --------------------\n       -- Group_Analysis --\n@@ -1832,9 +1839,7 @@ package body GNAT.Command_Line is\n                   end loop;\n                end if;\n \n-               if not Require_Parameter (Switch)\n-                 or else Last >= Param\n-               then\n+               if not Require_Parameter (Switch) or else Last >= Param then\n                   if Idx = Group'First\n                     and then Last = Group'Last\n                     and then Last < Param\n@@ -1860,6 +1865,7 @@ package body GNAT.Command_Line is\n                         Section,\n                         Prefix & Group (Idx .. Param - 1),\n                         Group (Param .. Last));\n+\n                   else\n                      For_Each_Simple_Switch\n                        (Config, Section, Prefix & Group (Idx .. Last), \"\");\n@@ -1881,7 +1887,6 @@ package body GNAT.Command_Line is\n          Idx := Group'First;\n          while Idx <= Group'Last loop\n             Found := False;\n-\n             Foreach (Config, Section);\n \n             if not Found then\n@@ -1960,7 +1965,8 @@ package body GNAT.Command_Line is\n          Decompose_Switch (Config_Switch, P, Last);\n \n          if Looking_At\n-           (Switch, Switch'First, Config_Switch (Config_Switch'First .. Last))\n+              (Switch, Switch'First,\n+               Config_Switch (Config_Switch'First .. Last))\n          then\n             --  Set first char of Param, and last char of Switch\n \n@@ -2546,7 +2552,9 @@ package body GNAT.Command_Line is\n             if Result (C) /= null\n               and then Compatible_Parameter (Params (C))\n               and then Looking_At\n-                (Result (C).all, Result (C)'First, Cmd.Config.Prefixes (P).all)\n+                         (Result (C).all,\n+                          Result (C)'First,\n+                          Cmd.Config.Prefixes (P).all)\n             then\n                --  If we are still in the same section, group the switches\n \n@@ -2589,8 +2597,8 @@ package body GNAT.Command_Line is\n                   Group :=\n                     Ada.Strings.Unbounded.To_Unbounded_String\n                       (Result (C)\n-                       (Result (C)'First + Cmd.Config.Prefixes (P)'Length ..\n-                            Result (C)'Last));\n+                         (Result (C)'First + Cmd.Config.Prefixes (P)'Length ..\n+                          Result (C)'Last));\n                   First := C;\n                end if;\n             end if;\n@@ -2642,8 +2650,8 @@ package body GNAT.Command_Line is\n                if Result (E) /= null\n                  and then\n                    (Params (E) = null\n-                    or else Params (E) (Params (E)'First + 1\n-                                            .. Params (E)'Last) = Param)\n+                     or else Params (E) (Params (E)'First + 1 ..\n+                                         Params (E)'Last) = Param)\n                  and then Result (E).all = Switch\n                then\n                   return;\n@@ -2866,16 +2874,19 @@ package body GNAT.Command_Line is\n \n    function Is_New_Section    (Iter : Command_Line_Iterator) return Boolean is\n       Section : constant String := Current_Section (Iter);\n+\n    begin\n       if Iter.Sections = null then\n          return False;\n+\n       elsif Iter.Current = Iter.Sections'First\n         or else Iter.Sections (Iter.Current - 1) = null\n       then\n          return Section /= \"\";\n-      end if;\n \n-      return Section /= Iter.Sections (Iter.Current - 1).all;\n+      else\n+         return Section /= Iter.Sections (Iter.Current - 1).all;\n+      end if;\n    end Is_New_Section;\n \n    ---------------------\n@@ -2933,12 +2944,11 @@ package body GNAT.Command_Line is\n          return \"\";\n \n       else\n+         --  Return result, skipping separator\n+\n          declare\n             P : constant String := Iter.Params (Iter.Current).all;\n-\n          begin\n-            --  Skip separator\n-\n             return P (P'First + 1 .. P'Last);\n          end;\n       end if;\n@@ -2972,10 +2982,14 @@ package body GNAT.Command_Line is\n    ----------\n \n    procedure Free (Config : in out Command_Line_Configuration) is\n-      procedure Unchecked_Free is new Ada.Unchecked_Deallocation\n-        (Switch_Definitions, Switch_Definitions_List);\n-      procedure Unchecked_Free is new Ada.Unchecked_Deallocation\n-        (Alias_Definitions, Alias_Definitions_List);\n+      procedure Unchecked_Free is new\n+        Ada.Unchecked_Deallocation\n+          (Switch_Definitions, Switch_Definitions_List);\n+\n+      procedure Unchecked_Free is new\n+        Ada.Unchecked_Deallocation\n+          (Alias_Definitions, Alias_Definitions_List);\n+\n    begin\n       if Config /= null then\n          Free (Config.Prefixes);\n@@ -2990,6 +3004,7 @@ package body GNAT.Command_Line is\n                Free (Config.Aliases (A).Expansion);\n                Free (Config.Aliases (A).Section);\n             end loop;\n+\n             Unchecked_Free (Config.Aliases);\n          end if;\n \n@@ -3040,6 +3055,7 @@ package body GNAT.Command_Line is\n       Free (Config.Usage);\n       Free (Config.Help);\n       Free (Config.Help_Msg);\n+\n       Config.Usage    := new String'(Usage);\n       Config.Help     := new String'(Help);\n       Config.Help_Msg := new String'(Help_Msg);\n@@ -3070,6 +3086,7 @@ package body GNAT.Command_Line is\n \n       procedure Display_Section_Help (Section : String) is\n          Max_Len : Natural := 0;\n+\n       begin\n          --  ??? Special display for \"*\"\n \n@@ -3100,7 +3117,8 @@ package body GNAT.Command_Line is\n          for S in Config.Switches'Range loop\n             declare\n                N : constant String :=\n-                 Switch_Name (Config.Switches (S), Section);\n+                     Switch_Name (Config.Switches (S), Section);\n+\n             begin\n                if N /= \"\" then\n                   Put (\" \");\n@@ -3176,9 +3194,7 @@ package body GNAT.Command_Line is\n          if (Section = \"\" and then Def.Section = null)\n            or else (Def.Section /= null and then Def.Section.all = Section)\n          then\n-            if Def.Switch /= null\n-              and then Def.Switch.all = \"*\"\n-            then\n+            if Def.Switch /= null and then Def.Switch.all = \"*\" then\n                return \"[any switch]\";\n             end if;\n \n@@ -3229,8 +3245,10 @@ package body GNAT.Command_Line is\n \n       if Config.Help_Msg /= null and then Config.Help_Msg.all /= \"\" then\n          Put_Line (Config.Help_Msg.all);\n+\n       else\n          Display_Section_Help (\"\");\n+\n          if Config.Sections /= null and then Config.Switches /= null then\n             for S in Config.Sections'Range loop\n                Display_Section_Help (Config.Sections (S).all);\n@@ -3395,13 +3413,15 @@ package body GNAT.Command_Line is\n \n          elsif C /= ASCII.NUL then\n             if Full_Switch (Parser) = \"h\"\n-              or else Full_Switch (Parser) = \"-help\"\n+                 or else\n+               Full_Switch (Parser) = \"-help\"\n             then\n                Display_Help (Config);\n                raise Exit_From_Command_Line;\n             end if;\n \n             --  Do switch expansion if needed\n+\n             For_Each_Simple\n               (Config,\n                Section   => Section_Name.all,\n@@ -3482,8 +3502,7 @@ package body GNAT.Command_Line is\n       Start (Line, Iter, Expanded => Expanded);\n       while Has_More (Iter) loop\n          if Is_New_Section (Iter) then\n-            Args (Count) := new String'\n-              (Switch_Char & Current_Section (Iter));\n+            Args (Count) := new String'(Switch_Char & Current_Section (Iter));\n             Count := Count + 1;\n          end if;\n "}]}