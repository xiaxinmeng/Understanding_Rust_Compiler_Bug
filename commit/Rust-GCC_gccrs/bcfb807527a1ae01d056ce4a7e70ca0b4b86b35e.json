{"sha": "bcfb807527a1ae01d056ce4a7e70ca0b4b86b35e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNmYjgwNzUyN2ExYWUwMWQwNTZjZTRhN2U3MGNhMGI0Yjg2YjM1ZQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-09-04T01:53:01Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-09-04T01:53:01Z"}, "message": "re PR rtl-optimization/11700 ([M68K] ICE in subreg_hard_regno)\n\n\n\tPR optimization/11700.\n\t* simplify-rtx.c (simplify_subreg): Check that the subreg offset\n\tof a hard register is representable before trying to simplify it\n\tusing subreg_hard_regno.\n\n\t* gcc.c-torture/compile/20030903-1.c: New test case.\n\nFrom-SVN: r71046", "tree": {"sha": "6141bc0566ce12f77e9b89892e9124b9e2a30347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6141bc0566ce12f77e9b89892e9124b9e2a30347"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcfb807527a1ae01d056ce4a7e70ca0b4b86b35e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcfb807527a1ae01d056ce4a7e70ca0b4b86b35e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcfb807527a1ae01d056ce4a7e70ca0b4b86b35e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcfb807527a1ae01d056ce4a7e70ca0b4b86b35e/comments", "author": null, "committer": null, "parents": [{"sha": "2a3ef884df38aba49d59970c91da8a8471dd2ff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a3ef884df38aba49d59970c91da8a8471dd2ff8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a3ef884df38aba49d59970c91da8a8471dd2ff8"}], "stats": {"total": 53, "additions": 50, "deletions": 3}, "files": [{"sha": "d432719285392de9bcf3ccaa1c25979817f38761", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfb807527a1ae01d056ce4a7e70ca0b4b86b35e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfb807527a1ae01d056ce4a7e70ca0b4b86b35e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcfb807527a1ae01d056ce4a7e70ca0b4b86b35e", "patch": "@@ -1,3 +1,10 @@\n+2003-09-03  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR optimization/11700.\n+\t* simplify-rtx.c (simplify_subreg): Check that the subreg offset\n+\tof a hard register is representable before trying to simplify it\n+\tusing subreg_hard_regno.\n+\n 2003-09-04  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* configure.in (gcc_cv_ld_hidden): Disable unless using GNU ld."}, {"sha": "6ace34809111ee82d07169c6b64e816c94ccb2d4", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfb807527a1ae01d056ce4a7e70ca0b4b86b35e/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfb807527a1ae01d056ce4a7e70ca0b4b86b35e/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=bcfb807527a1ae01d056ce4a7e70ca0b4b86b35e", "patch": "@@ -3017,10 +3017,12 @@ simplify_subreg (enum machine_mode outermode, rtx op,\n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n       && REGNO (op) != ARG_POINTER_REGNUM\n #endif\n-      && REGNO (op) != STACK_POINTER_REGNUM)\n+      && REGNO (op) != STACK_POINTER_REGNUM\n+      && subreg_offset_representable_p (REGNO (op), innermode,\n+\t\t\t\t\tbyte, outermode))\n     {\n-      int final_regno = subreg_hard_regno (gen_rtx_SUBREG (outermode, op, byte),\n-\t\t\t\t\t   0);\n+      rtx tem = gen_rtx_SUBREG (outermode, op, byte);\n+      int final_regno = subreg_hard_regno (tem, 0);\n \n       /* ??? We do allow it if the current REG is not valid for\n \t its mode.  This is a kludge to work around how float/complex"}, {"sha": "d417f839c701493d39a33fe704150a798038fedd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfb807527a1ae01d056ce4a7e70ca0b4b86b35e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfb807527a1ae01d056ce4a7e70ca0b4b86b35e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bcfb807527a1ae01d056ce4a7e70ca0b4b86b35e", "patch": "@@ -1,3 +1,8 @@\n+2003-09-03  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR optimization/11700.\n+\t* gcc.c-torture/compile/20030903-1.c: New test case.\n+\n 2003-09-03  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/12053"}, {"sha": "fa4d30db6c0f75f0e51cd0130f5c759f01a47a86", "filename": "gcc/testsuite/gcc.c-torture/compile/20030903-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcfb807527a1ae01d056ce4a7e70ca0b4b86b35e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030903-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcfb807527a1ae01d056ce4a7e70ca0b4b86b35e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030903-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20030903-1.c?ref=bcfb807527a1ae01d056ce4a7e70ca0b4b86b35e", "patch": "@@ -0,0 +1,33 @@\n+/* Derived from PR optimization/11700.  */\n+/* The compiler used to ICE during reload for m68k targets.  */\n+\n+void check_complex (__complex__ double, __complex__ double,\n+                    __complex__ double, __complex__ int);\n+void check_float (double, double, double, int);\n+extern double _Complex conj (double _Complex);\n+extern double carg (double _Complex __z);\n+\n+static double minus_zero;\n+\n+void\n+conj_test (void)\n+{\n+  check_complex (conj (({ __complex__ double __retval;\n+\t\t\t  __real__ __retval = (0.0);\n+\t\t\t  __imag__ __retval = (0.0);\n+\t\t\t  __retval; })),\n+\t\t ({ __complex__ double __retval;\n+\t\t    __real__ __retval = (0.0);\n+\t\t    __imag__ __retval = (minus_zero);\n+\t\t    __retval; }), 0, 0);\n+}\n+\n+void\n+carg_test (void)\n+{\n+  check_float (carg (({ __complex__ double __retval;\n+\t\t\t__real__ __retval = (2.0);\n+\t\t\t__imag__ __retval = (0);\n+\t\t\t__retval; })), 0, 0, 0);\n+}\n+"}]}