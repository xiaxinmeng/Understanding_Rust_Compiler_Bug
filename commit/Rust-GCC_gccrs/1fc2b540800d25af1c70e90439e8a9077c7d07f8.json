{"sha": "1fc2b540800d25af1c70e90439e8a9077c7d07f8", "node_id": "C_kwDOANBUbNoAKDFmYzJiNTQwODAwZDI1YWYxYzcwZTkwNDM5ZThhOTA3N2M3ZDA3Zjg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-25T17:00:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-25T17:00:21Z"}, "message": "Merge #892\n\n892: Remove bad assertion when resolving segments r=philberty a=philberty\n\nWhen resolving segments in a path generics ones can match types in othe\r\nimpl blocks which will not be compiled yet so this assertion is bad.\r\n\r\nFixes #862\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "88328f8b601a74c4b87fa6409a8284365f3d0071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88328f8b601a74c4b87fa6409a8284365f3d0071"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fc2b540800d25af1c70e90439e8a9077c7d07f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh8CylCRBK7hj4Ov3rIwAAN/UIAF69Kub3NpdAWu1YwTc13dYf\nr6rI0DzHEcSdevm2/UcEkdJckeS5pL2qQO/rR8iUiIcK5WjLTILh9zRSsysB5TpB\nIgNcc55a4XSLUC9rkHRTcq9ScM4tQt0vpESNTILXZ0OmWjL/GebaWRCAKiQZbEb9\n8olzZR/uqDxFbkZD6cg/1CXCi1U63cvYnG585AwUcrOLimhR3SWbAjplQZN43Vlu\ntmQ3uXUbdx1N87uFfqvs6CGNDDVYYo4JUuIGjB94Cv2RdtS9Leea3BmmmSenbbBA\nI3I1MeWmZvodE3/l6lblv7LGweq15L51pdYgeuAm170NHNzcl69TGfJKLCO5Jfs=\n=uq1g\n-----END PGP SIGNATURE-----\n", "payload": "tree 88328f8b601a74c4b87fa6409a8284365f3d0071\nparent 5f2973fe0e322380bd5f3f4ea35b657efbf86efa\nparent 234816ac9d919505f2ddf2cdf9e83a10de7e3ced\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1643130021 +0000\ncommitter GitHub <noreply@github.com> 1643130021 +0000\n\nMerge #892\n\n892: Remove bad assertion when resolving segments r=philberty a=philberty\n\nWhen resolving segments in a path generics ones can match types in othe\r\nimpl blocks which will not be compiled yet so this assertion is bad.\r\n\r\nFixes #862\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fc2b540800d25af1c70e90439e8a9077c7d07f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fc2b540800d25af1c70e90439e8a9077c7d07f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fc2b540800d25af1c70e90439e8a9077c7d07f8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f2973fe0e322380bd5f3f4ea35b657efbf86efa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2973fe0e322380bd5f3f4ea35b657efbf86efa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f2973fe0e322380bd5f3f4ea35b657efbf86efa"}, {"sha": "234816ac9d919505f2ddf2cdf9e83a10de7e3ced", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/234816ac9d919505f2ddf2cdf9e83a10de7e3ced", "html_url": "https://github.com/Rust-GCC/gccrs/commit/234816ac9d919505f2ddf2cdf9e83a10de7e3ced"}], "stats": {"total": 78, "additions": 76, "deletions": 2}, "files": [{"sha": "50d660c7c9ea6077c4843615728f9edd246abf10", "filename": "gcc/rust/typecheck/rust-hir-path-probe.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc2b540800d25af1c70e90439e8a9077c7d07f8/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc2b540800d25af1c70e90439e8a9077c7d07f8/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h?ref=1fc2b540800d25af1c70e90439e8a9077c7d07f8", "patch": "@@ -280,8 +280,8 @@ class PathProbeType : public TypeCheckBase\n     current_impl = impl;\n     HirId impl_ty_id = impl->get_type ()->get_mappings ().get_hirid ();\n     TyTy::BaseType *impl_block_ty = nullptr;\n-    bool ok = context->lookup_type (impl_ty_id, &impl_block_ty);\n-    rust_assert (ok);\n+    if (!context->lookup_type (impl_ty_id, &impl_block_ty))\n+      return;\n \n     if (!receiver->can_eq (impl_block_ty, false))\n       return;"}, {"sha": "c1a4609ba86666b63674734455d0736804567fa9", "filename": "gcc/testsuite/rust/compile/torture/issue-862.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fc2b540800d25af1c70e90439e8a9077c7d07f8/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-862.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fc2b540800d25af1c70e90439e8a9077c7d07f8/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-862.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-862.rs?ref=1fc2b540800d25af1c70e90439e8a9077c7d07f8", "patch": "@@ -0,0 +1,74 @@\n+// { dg-additional-options \"-w\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"deref\"]\n+pub trait Deref {\n+    type Target;\n+\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+impl<T> Deref for &T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        unsafe {\n+            let a = \"imm_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        *self\n+    }\n+}\n+\n+impl<T> Deref for &mut T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        unsafe {\n+            let a = \"mut_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        *self\n+    }\n+}\n+\n+struct Foo<T>(T);\n+impl<T> Deref for Foo<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &Self::Target {\n+        unsafe {\n+            let a = \"foo_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        &self.0\n+    }\n+}\n+\n+struct Bar(i32);\n+impl Bar {\n+    fn cake(self) -> i32 {\n+        self.0 + 1\n+    }\n+}\n+\n+pub fn main() {\n+    let foo: Foo<Bar> = Foo(Bar(123));\n+    let bar: Bar = *foo;\n+\n+    let cake_result: i32 = foo.cake();\n+}"}]}