{"sha": "8efae6bbfa04f662589bbfc64dbbe68935f973d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVmYWU2YmJmYTA0ZjY2MjU4OWJiZmM2NGRiYmU2ODkzNWY5NzNkMg==", "commit": {"author": {"name": "Roman Kennke", "email": "roman@kennke.org", "date": "2005-04-25T19:36:43Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-25T19:36:43Z"}, "message": "2005-04-25  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/basic/BasicScrollBarUI.java\n\t(initDefaults): Initialize thumb*Color fields correctly.\n\n2005-04-25  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/text/GapContent.java:\n\tAdded API comments.\n\n2005-04-25  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/metal/MetalBorders.java:\n\tAdded inner class ScrollPaneBorder.\n\t* javax/swing/plaf/metal/MetalLookAndFeel.java\n\t(initComponentDefaults): Added default for \"ScrollPane.border\"\n\tto use the new ScrollPaneBorder.\n\n2005-04-25  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/text/AbstractDocument.java:\n\tAdded FIXME comments. This class still has to be\n\timplemented thread-safe.\n\n2005-04-25  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/tree/DefaultTreeSelectionModel.java\n\t(DefaultTreeSelectionModel): Initialize listenerList here.\n\n2005-04-25  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/metal/MetalTextFieldUI.java\n\t(createUI): Return one instance per Component instead of a\n\tshared instance.\n\n2005-04-25  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/text/Document.java:\n\tAdded API documentation comments.\n\n2005-04-25  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/text/AbstractDocument.java\n\t(getDocumentProperties): Implemented.\n\t(setDocumentProperties): Implemented.\n\t(getProperty): Implemented.\n\t(putProperty): Implemented.\n\n2005-04-25  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/BoxLayout\n\t(preferredLayoutSize): Fixed computation so that it correctly\n\tadds the top and bottom insets of the container.\n\n2005-04-25  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/basic/BasicMenuItemUI.java\n\t(paintText): Make use of the 'selectionForeground' UI default\n\tfor text painting.\n\n2005-04-25  Roman Kennke  <roman@kennke.org>\n\n\t* javax/swing/plaf/basic/BasicLookAndFeel.java\n\t(initSystemColorDefaults): Modified colors to match the\n\tBasicLookAndFeel in the reference implementation.\n\t(initComponentDefaults): Likewise.\n\nFrom-SVN: r98733", "tree": {"sha": "6a73f30784c260b998e5fb2e421b3c002d8ff608", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a73f30784c260b998e5fb2e421b3c002d8ff608"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8efae6bbfa04f662589bbfc64dbbe68935f973d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8efae6bbfa04f662589bbfc64dbbe68935f973d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8efae6bbfa04f662589bbfc64dbbe68935f973d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8efae6bbfa04f662589bbfc64dbbe68935f973d2/comments", "author": null, "committer": null, "parents": [{"sha": "9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f62c3e3ed53732a8fe755ad5109c1a6ed25bb0c"}], "stats": {"total": 843, "additions": 652, "deletions": 191}, "files": [{"sha": "c43b743d4d073a2e0d9a1a65d6882637d5bfd131", "filename": "libjava/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8efae6bbfa04f662589bbfc64dbbe68935f973d2", "patch": "@@ -1,3 +1,70 @@\n+2005-04-25  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/basic/BasicScrollBarUI.java\n+\t(initDefaults): Initialize thumb*Color fields correctly.\n+\n+2005-04-25  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/text/GapContent.java:\n+\tAdded API comments.\n+\n+2005-04-25  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/metal/MetalBorders.java:\n+\tAdded inner class ScrollPaneBorder.\n+\t* javax/swing/plaf/metal/MetalLookAndFeel.java\n+\t(initComponentDefaults): Added default for \"ScrollPane.border\"\n+\tto use the new ScrollPaneBorder.\n+\n+2005-04-25  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/text/AbstractDocument.java:\n+\tAdded FIXME comments. This class still has to be\n+\timplemented thread-safe.\n+\n+2005-04-25  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/tree/DefaultTreeSelectionModel.java\n+\t(DefaultTreeSelectionModel): Initialize listenerList here.\n+\n+2005-04-25  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/metal/MetalTextFieldUI.java\n+\t(createUI): Return one instance per Component instead of a\n+\tshared instance.\n+\n+2005-04-25  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/text/Document.java:\n+\tAdded API documentation comments.\n+\n+2005-04-25  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/text/AbstractDocument.java\n+\t(getDocumentProperties): Implemented.\n+\t(setDocumentProperties): Implemented.\n+\t(getProperty): Implemented.\n+\t(putProperty): Implemented.\n+\n+2005-04-25  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/BoxLayout\n+\t(preferredLayoutSize): Fixed computation so that it correctly\n+\tadds the top and bottom insets of the container.\n+\n+2005-04-25  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/basic/BasicMenuItemUI.java\n+\t(paintText): Make use of the 'selectionForeground' UI default\n+\tfor text painting.\n+\n+2005-04-25  Roman Kennke  <roman@kennke.org>\n+\n+\t* javax/swing/plaf/basic/BasicLookAndFeel.java\n+\t(initSystemColorDefaults): Modified colors to match the\n+\tBasicLookAndFeel in the reference implementation.\n+\t(initComponentDefaults): Likewise.\n+\n 2005-04-25  Tom Tromey  <tromey@redhat.com>\n \n \t* include/jni.h (_Jv_va_list): Removed."}, {"sha": "1edffe199737225defc1ac7c85ffbe1fc2fabb73", "filename": "libjava/javax/swing/BoxLayout.java", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2FBoxLayout.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2FBoxLayout.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FBoxLayout.java?ref=8efae6bbfa04f662589bbfc64dbbe68935f973d2", "patch": "@@ -148,13 +148,14 @@ public Dimension preferredLayoutSize(Container parent)\n       throw new AWTError(\"invalid parent\");\n \n     Insets insets = parent.getInsets();\n-    int x = insets.left + insets.right;\n-    int y = insets.bottom + insets.top;\n+    int x = 0;\n+    int y = 0;\n \n     Component[] children = parent.getComponents();\n \n     if (isHorizontalIn(parent))\n       {        \n+        x = insets.left + insets.right;\n         // sum up preferred widths of components, find maximum of preferred\n         // heights\n         for (int index = 0; index < children.length; index++)\n@@ -164,9 +165,11 @@ public Dimension preferredLayoutSize(Container parent)\n             x += sz.width;\n             y = Math.max(y, sz.height);\n           }\n+        y += insets.bottom + insets.top;\n       } \n     else \n       {        \n+        y = insets.top + insets.bottom;\n         // sum up preferred heights of components, find maximum of\n         //  preferred widths\n         for (int index = 0; index < children.length; index++)\n@@ -176,8 +179,9 @@ public Dimension preferredLayoutSize(Container parent)\n             y += sz.height;\n             x = Math.max(x, sz.width);\n           }\n+        x += insets.left + insets.right;\n       }\n-    \n+\n     return new Dimension(x, y);\n   }\n "}, {"sha": "958ce277dbc241080320a365f7e612d5232af34b", "filename": "libjava/javax/swing/plaf/basic/BasicLookAndFeel.java", "status": "modified", "additions": 226, "deletions": 173, "changes": 399, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicLookAndFeel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicLookAndFeel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicLookAndFeel.java?ref=8efae6bbfa04f662589bbfc64dbbe68935f973d2", "patch": "@@ -159,34 +159,39 @@ protected void initClassDefaults(UIDefaults defaults)\n    */\n   protected void initSystemColorDefaults(UIDefaults defaults)\n   {\n+    Color highLight = new Color(249, 247, 246);\n+    Color light = new Color(239, 235, 231);\n+    Color shadow = new Color(139, 136, 134);\n+    Color darkShadow = new Color(16, 16, 16);\n+\n     Object[] uiDefaults;\n     uiDefaults = new Object[] {\n       \"activeCaption\", new ColorUIResource(0, 0, 128),\n       \"activeCaptionBorder\", new ColorUIResource(Color.lightGray),\n       \"activeCaptionText\", new ColorUIResource(Color.white),\n-      \"control\", new ColorUIResource(Color.lightGray),\n-      \"controlDkShadow\", new ColorUIResource(Color.black),\n-      \"controlHighlight\", new ColorUIResource(Color.lightGray),\n-      \"controlLtHighlight\", new ColorUIResource(Color.white),\n-      \"controlShadow\", new ColorUIResource(Color.gray),\n-      \"controlText\", new ColorUIResource(Color.black),\n+      \"control\", new ColorUIResource(light),\n+      \"controlDkShadow\", new ColorUIResource(shadow),\n+      \"controlHighlight\", new ColorUIResource(highLight),\n+      \"controlLtHighlight\", new ColorUIResource(highLight),\n+      \"controlShadow\", new ColorUIResource(shadow),\n+      \"controlText\", new ColorUIResource(darkShadow),\n       \"desktop\", new ColorUIResource(0, 92, 92),\n       \"inactiveCaption\", new ColorUIResource(Color.gray),\n       \"inactiveCaptionBorder\", new ColorUIResource(Color.lightGray),\n       \"inactiveCaptionText\", new ColorUIResource(Color.lightGray),\n-      \"info\", new ColorUIResource(Color.white),\n-      \"infoText\", new ColorUIResource(Color.black),\n-      \"menu\", new ColorUIResource(Color.lightGray),\n-      \"menuText\", new ColorUIResource(Color.black),\n-      \"scrollbar\", new ColorUIResource(224, 224, 224),\n-      \"text\", new ColorUIResource(Color.lightGray),\n-      \"textHighlight\", new ColorUIResource(0, 0, 128),\n+      \"info\", new ColorUIResource(light),\n+      \"infoText\", new ColorUIResource(darkShadow),\n+      \"menu\", new ColorUIResource(light),\n+      \"menuText\", new ColorUIResource(darkShadow),\n+      \"scrollbar\", new ColorUIResource(light),\n+      \"text\", new ColorUIResource(Color.white),\n+      \"textHighlight\", new ColorUIResource(Color.black),\n       \"textHighlightText\", new ColorUIResource(Color.white),\n       \"textInactiveText\", new ColorUIResource(Color.gray),\n       \"textText\", new ColorUIResource(Color.black),\n-      \"window\", new ColorUIResource(Color.white),\n+      \"window\", new ColorUIResource(light),\n       \"windowBorder\", new ColorUIResource(Color.black),\n-      \"windowText\", new ColorUIResource(Color.black)\n+      \"windowText\", new ColorUIResource(darkShadow)\n     };\n     defaults.putDefaults(uiDefaults);\n   }\n@@ -232,18 +237,16 @@ protected void initComponentDefaults(UIDefaults defaults)\n   {\n     Object[] uiDefaults;\n     \n-    // The default Look and Feel happens to use these three purple shades\n-    // extensively.\n-    Color lightPurple = new Color(0xCC, 0xCC, 0xFF);\n-    Color midPurple = new Color(0x99, 0x99, 0xCC);\n-    Color darkPurple = new Color(0x66, 0x66, 0x99);\n-\n+    Color highLight = new Color(249, 247, 246);\n+    Color light = new Color(239, 235, 231);\n+    Color shadow = new Color(139, 136, 134);\n+    Color darkShadow = new Color(16, 16, 16);\n+    \n     uiDefaults = new Object[] {\n \n       \"AbstractUndoableEdit.undoText\", \"Undo\",\n       \"AbstractUndoableEdit.redoText\", \"Redo\",\n-\n-      \"Button.background\", new ColorUIResource(Color.lightGray),\n+      \"Button.background\", new ColorUIResource(light),\n       \"Button.border\",\n       new UIDefaults.LazyValue() \n       {\n@@ -252,55 +255,52 @@ public Object createValue(UIDefaults table)\n           return BasicBorders.getButtonBorder();\n         }\n       },\n-      \"Button.darkShadow\", new ColorUIResource(Color.darkGray),\n+      \"Button.darkShadow\", new ColorUIResource(shadow),\n       \"Button.focusInputMap\", new UIDefaults.LazyInputMap(new Object[] {\n         \"SPACE\",  \"pressed\",\n         \"released SPACE\", \"released\"\n       }),\n-      \"Button.focus\", midPurple,\n       \"Button.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"Button.foreground\", new ColorUIResource(Color.black),\n-      \"Button.highlight\", new ColorUIResource(Color.white),\n-      \"Button.light\", new ColorUIResource(Color.lightGray.brighter()),\n+      \"Button.foreground\", new ColorUIResource(darkShadow),\n+      \"Button.highlight\", new ColorUIResource(highLight),\n+      \"Button.light\", new ColorUIResource(highLight),\n       \"Button.margin\", new InsetsUIResource(2, 2, 2, 2),\n-      \"Button.shadow\", new ColorUIResource(Color.gray),\n+      \"Button.shadow\", new ColorUIResource(shadow),\n       \"Button.textIconGap\", new Integer(4),\n       \"Button.textShiftOffset\", new Integer(0),\n-      \"CheckBox.background\", new ColorUIResource(Color.lightGray),\n+      \"CheckBox.background\", new ColorUIResource(light),\n       \"CheckBox.border\", new BorderUIResource.CompoundBorderUIResource(null,\n                                                                        null),\n-      \"CheckBox.darkShadow\", new ColorUIResource(Color.darkGray),\n       \"CheckBox.focusInputMap\", new UIDefaults.LazyInputMap(new Object[] {\n         \"SPACE\",  \"pressed\",\n         \"released SPACE\", \"released\"\n       }),\n       \"CheckBox.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"CheckBox.foreground\", new ColorUIResource(Color.black),\n-      \"CheckBox.highlight\", new ColorUIResource(Color.white),\n+      \"CheckBox.foreground\", new ColorUIResource(darkShadow),\n       \"CheckBox.icon\", BasicIconFactory.getCheckBoxIcon(),\n-      \"CheckBox.light\", new ColorUIResource(Color.lightGray.brighter()),\n       \"CheckBox.margin\",new InsetsUIResource(2, 2, 2, 2),\n-      \"CheckBox.shadow\", new ColorUIResource(Color.gray),\n       \"CheckBox.textIconGap\", new Integer(4),\n       \"CheckBox.textShiftOffset\", new Integer(0),\n       \"CheckBoxMenuItem.acceleratorFont\", new FontUIResource(\"Dialog\",\n                                                              Font.PLAIN, 12),\n-      \"CheckBoxMenuItem.acceleratorForeground\", new ColorUIResource(Color.black),\n-      \"CheckBoxMenuItem.acceleratorSelectionForeground\", new ColorUIResource(Color.white),\n+      \"CheckBoxMenuItem.acceleratorForeground\",\n+      new ColorUIResource(darkShadow),\n+      \"CheckBoxMenuItem.acceleratorSelectionForeground\",\n+      new ColorUIResource(Color.white),\n       \"CheckBoxMenuItem.arrowIcon\", BasicIconFactory.getMenuItemArrowIcon(),\n-      \"CheckBoxMenuItem.background\", new ColorUIResource(Color.lightGray),\n+      \"CheckBoxMenuItem.background\", new ColorUIResource(light),\n       \"CheckBoxMenuItem.border\", new BasicBorders.MarginBorder(),\n       \"CheckBoxMenuItem.borderPainted\", Boolean.FALSE,\n       \"CheckBoxMenuItem.checkIcon\", BasicIconFactory.getCheckBoxMenuItemIcon(),\n       \"CheckBoxMenuItem.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"CheckBoxMenuItem.foreground\", new ColorUIResource(Color.black),\n+      \"CheckBoxMenuItem.foreground\", new ColorUIResource(darkShadow),\n       \"CheckBoxMenuItem.margin\", new InsetsUIResource(2, 2, 2, 2),\n-      \"CheckBoxMenuItem.selectionBackground\", new ColorUIResource(lightPurple),\n-      \"CheckBoxMenuItem.selectionForeground\", new ColorUIResource(Color.black),\n-      \"ColorChooser.background\", new ColorUIResource(Color.lightGray),\n+      \"CheckBoxMenuItem.selectionBackground\", new ColorUIResource(Color.black),\n+      \"CheckBoxMenuItem.selectionForeground\", new ColorUIResource(Color.white),\n+      \"ColorChooser.background\", new ColorUIResource(light),\n       \"ColorChooser.cancelText\", \"Cancel\",\n       \"ColorChooser.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"ColorChooser.foreground\", new ColorUIResource(Color.black),\n+      \"ColorChooser.foreground\", new ColorUIResource(darkShadow),\n       \"ColorChooser.hsbBlueText\", \"B\",\n       \"ColorChooser.hsbBrightnessText\", \"B\",\n       \"ColorChooser.hsbGreenText\", \"G\",\n@@ -319,7 +319,7 @@ public Object createValue(UIDefaults table)\n       \"ColorChooser.rgbRedMnemonic\", new Integer(82),\n       \"ColorChooser.rgbRedText\", \"Red\",\n       \"ColorChooser.sampleText\", \"Sample Text  Sample Text\",\n-      \"ColorChooser.swatchesDefaultRecentColor\", new ColorUIResource(Color.lightGray),\n+      \"ColorChooser.swatchesDefaultRecentColor\", new ColorUIResource(light),\n       \"ColorChooser.swatchesNameText\", \"Swatches\",\n       \"ColorChooser.swatchesRecentSwatchSize\", new Dimension(10, 10),\n       \"ColorChooser.swatchesRecentText\", \"Recent:\",\n@@ -331,13 +331,17 @@ public Object createValue(UIDefaults table)\n         \"HOME\",  \"homePassThrough\",\n         \"END\",  \"endPassThrough\"\n       }),\n-      \"ComboBox.background\", new ColorUIResource(Color.white),\n-      \"ComboBox.disabledBackground\", new ColorUIResource(Color.lightGray),\n+      \"ComboBox.background\", new ColorUIResource(light),\n+      \"ComboBox.buttonBackground\", new ColorUIResource(light),\n+      \"ComboBox.buttonDarkShadow\", new ColorUIResource(shadow),\n+      \"ComboBox.buttonHighlight\", new ColorUIResource(highLight),\n+      \"ComboBox.buttonShadow\", new ColorUIResource(shadow),\n+      \"ComboBox.disabledBackground\", new ColorUIResource(light),\n       \"ComboBox.disabledForeground\", new ColorUIResource(Color.gray),\n       \"ComboBox.font\", new FontUIResource(\"SansSerif\", Font.PLAIN, 12),\n       \"ComboBox.foreground\", new ColorUIResource(Color.black),\n-      \"ComboBox.selectionBackground\", new ColorUIResource(lightPurple),\n-      \"ComboBox.selectionForeground\", new ColorUIResource(Color.black),\n+      \"ComboBox.selectionBackground\", new ColorUIResource(Color.black),\n+      \"ComboBox.selectionForeground\", new ColorUIResource(Color.white),\n       \"Desktop.ancestorInputMap\", new UIDefaults.LazyInputMap(new Object[] {\n         \"KP_LEFT\", \"left\",\n         \"KP_RIGHT\", \"right\",\n@@ -359,13 +363,13 @@ public Object createValue(UIDefaults table)\n         \"ctrl F10\", \"maximize\",\n         \"ctrl alt shift F6\",\"selectPreviousFrame\"\n       }),\n-      \"Desktop.background\", new ColorUIResource(175, 163, 236),\n+      \"Desktop.background\", new ColorUIResource(0, 92, 92),\n       \"DesktopIcon.border\", new BorderUIResource.CompoundBorderUIResource(null,\n                                                                           null),\n       \"EditorPane.background\", new ColorUIResource(Color.white),\n       \"EditorPane.border\", new BasicBorders.MarginBorder(),\n       \"EditorPane.caretBlinkRate\", new Integer(500),\n-      \"EditorPane.caretForeground\", new ColorUIResource(Color.red),\n+      \"EditorPane.caretForeground\", new ColorUIResource(Color.black),\n       \"EditorPane.font\", new FontUIResource(\"Serif\", Font.PLAIN, 12),\n       \"EditorPane.foreground\", new ColorUIResource(Color.black),\n       \"EditorPane.inactiveForeground\", new ColorUIResource(Color.gray),\n@@ -384,7 +388,7 @@ public Object createValue(UIDefaults table)\n                                                              0), \"insert-tab\")\n           },\n       \"EditorPane.margin\", new InsetsUIResource(3, 3, 3, 3),\n-      \"EditorPane.selectionBackground\", new ColorUIResource(Color.lightGray),\n+      \"EditorPane.selectionBackground\", new ColorUIResource(Color.black),\n       \"EditorPane.selectionForeground\", new ColorUIResource(Color.white),\n       \"FileChooser.acceptAllFileFilterText\", \"All Files (*.*)\",\n       \"FileChooser.ancestorInputMap\", new UIDefaults.LazyInputMap(new Object[] {\n@@ -430,18 +434,33 @@ public Object createValue(UIDefaults table)\n       // XXX Don't use gif\n       \"FileView.hardDriveIcon\", new IconUIResource(new ImageIcon(\"icons/HardDrive.gif\")),\n       \"FocusManagerClassName\", \"TODO\",\n+      \"FormattedTextField.background\", new ColorUIResource(light),\n+      \"FormattedTextField.caretForeground\", new ColorUIResource(Color.black),\n+      \"FormattedTextField.foreground\", new ColorUIResource(Color.black),\n+      \"FormattedTextField.inactiveBackground\", new ColorUIResource(light),\n+      \"FormattedTextField.inactiveForeground\", new ColorUIResource(Color.gray),\n+      \"FormattedTextField.selectionBackground\",\n+      new ColorUIResource(Color.black),\n+      \"FormattedTextField.selectionForeground\",\n+      new ColorUIResource(Color.white),\n       \"FormView.resetButtonText\", \"Reset\",\n       \"FormView.submitButtonText\", \"Submit Query\",\n-      \"InternalFrame.activeTitleBackground\", new ColorUIResource(162, 167, 241),\n-      \"InternalFrame.activeTitleForeground\", new ColorUIResource(Color.black),\n-      \"InternalFrame.border\", new BorderUIResource.CompoundBorderUIResource(null,\n-                                                                            null),\n+      \"InternalFrame.activeTitleBackground\", new ColorUIResource(0, 0, 128),\n+      \"InternalFrame.activeTitleForeground\", new ColorUIResource(Color.white),\n+      \"InternalFrame.border\",\n+      new BorderUIResource.CompoundBorderUIResource(null, null),\n+      \"InternalFrame.borderColor\", new ColorUIResource(light),\n+      \"InternalFrame.borderDarkShadow\", new ColorUIResource(shadow),\n+      \"InternalFrame.borderHighlight\", new ColorUIResource(highLight),\n+      \"InternalFrame.borderLight\", new ColorUIResource(light),\n+      \"InternalFrame.borderShadow\", new ColorUIResource(shadow),\n       \"InternalFrame.closeIcon\", BasicIconFactory.createEmptyFrameIcon(),\n       // XXX Don't use gif\n       \"InternalFrame.icon\", new IconUIResource(new ImageIcon(\"icons/JavaCup.gif\")),\n       \"InternalFrame.iconifyIcon\", BasicIconFactory.createEmptyFrameIcon(),\n-      \"InternalFrame.inactiveTitleBackground\", new ColorUIResource(Color.lightGray),\n-      \"InternalFrame.inactiveTitleForeground\", new ColorUIResource(Color.black),\n+      \"InternalFrame.inactiveTitleBackground\", new ColorUIResource(Color.gray),\n+      \"InternalFrame.inactiveTitleForeground\",\n+      new ColorUIResource(Color.lightGray),\n       \"InternalFrame.maximizeIcon\", BasicIconFactory.createEmptyFrameIcon(),\n       \"InternalFrame.minimizeIcon\", BasicIconFactory.createEmptyFrameIcon(),\n       \"InternalFrame.titleFont\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n@@ -450,12 +469,12 @@ public Object createValue(UIDefaults table)\n         \"ctrl SPACE\",  \"showSystemMenu\",\n         \"ESCAPE\",  \"showSystemMenu\"\n       },\n-      \"Label.background\", new ColorUIResource(Color.lightGray),\n+      \"Label.background\", new ColorUIResource(light),\n       \"Label.disabledForeground\", new ColorUIResource(Color.white),\n-      \"Label.disabledShadow\", new ColorUIResource(Color.gray),\n+      \"Label.disabledShadow\", new ColorUIResource(shadow),\n       \"Label.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"Label.foreground\", new ColorUIResource(Color.black),\n-      \"List.background\", new ColorUIResource(Color.white),\n+      \"Label.foreground\", new ColorUIResource(darkShadow),\n+      \"List.background\", new ColorUIResource(light),\n       \"List.border\", new BasicBorders.MarginBorder(),\n       \"List.focusInputMap\", new UIDefaults.LazyInputMap(new Object[] {\n         \"PAGE_UP\", \"scrollUp\",\n@@ -477,20 +496,20 @@ public Object createValue(UIDefaults table)\n         \"shift PAGE_UP\",\"scrollUpExtendSelection\",\n         \"KP_DOWN\", \"selectNextRow\"\n       }),\n-      \"List.foreground\", new ColorUIResource(Color.black),\n-      \"List.selectionBackground\", new ColorUIResource(0xCC, 0xCC, 0xFF),\n-      \"List.selectionForeground\", new ColorUIResource(Color.black),\n+      \"List.foreground\", new ColorUIResource(darkShadow),\n+      \"List.selectionBackground\", new ColorUIResource(Color.black),\n+      \"List.selectionForeground\", new ColorUIResource(Color.white),\n       \"Menu.acceleratorFont\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"Menu.acceleratorForeground\", new ColorUIResource(Color.black),\n+      \"Menu.acceleratorForeground\", new ColorUIResource(darkShadow),\n       \"Menu.acceleratorSelectionForeground\", new ColorUIResource(Color.white),\n       \"Menu.arrowIcon\", BasicIconFactory.getMenuArrowIcon(),\n-      \"Menu.background\", new ColorUIResource(Color.lightGray),\n+      \"Menu.background\", new ColorUIResource(light),\n       \"Menu.border\", new BasicBorders.MarginBorder(),\n       \"Menu.borderPainted\", Boolean.FALSE,\n       \"Menu.checkIcon\", BasicIconFactory.getMenuItemCheckIcon(),\n       \"Menu.consumesTabs\", Boolean.TRUE,\n       \"Menu.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"Menu.foreground\", new ColorUIResource(Color.black),\n+      \"Menu.foreground\", new ColorUIResource(darkShadow),\n       \"Menu.margin\", new InsetsUIResource(2, 2, 2, 2),\n       \"Menu.selectedWindowInputMapBindings\", new Object[] {\n         \"ESCAPE\", \"cancel\",\n@@ -505,115 +524,130 @@ public Object createValue(UIDefaults table)\n         \"ENTER\", \"return\",\n         \"SPACE\", \"return\"\n       },\n-      \"Menu.selectionBackground\", new ColorUIResource(lightPurple),\n-      \"Menu.selectionForeground\", new ColorUIResource(Color.black),\n-      \"MenuBar.background\", new ColorUIResource(Color.lightGray),\n+      \"Menu.selectionBackground\", new ColorUIResource(Color.black),\n+      \"Menu.selectionForeground\", new ColorUIResource(Color.white),\n+      \"MenuBar.background\", new ColorUIResource(light),\n       \"MenuBar.border\", new BasicBorders.MenuBarBorder(null, null),\n       \"MenuBar.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"MenuBar.foreground\", new ColorUIResource(Color.black),\n+      \"MenuBar.foreground\", new ColorUIResource(darkShadow),\n+      \"MenuBar.highlight\", new ColorUIResource(highLight),\n+      \"MenuBar.shadow\", new ColorUIResource(shadow),\n       \"MenuBar.windowBindings\", new Object[] {\n         \"F10\", \"takeFocus\"\n       },\n       \"MenuItem.acceleratorDelimiter\", \"-\",\n       \"MenuItem.acceleratorFont\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"MenuItem.acceleratorForeground\", new ColorUIResource(Color.black),\n-      \"MenuItem.acceleratorSelectionForeground\", new ColorUIResource(Color.white),\n+      \"MenuItem.acceleratorForeground\", new ColorUIResource(darkShadow),\n+      \"MenuItem.acceleratorSelectionForeground\",\n+      new ColorUIResource(Color.white),\n       \"MenuItem.arrowIcon\", BasicIconFactory.getMenuItemArrowIcon(),\n-      \"MenuItem.background\", new ColorUIResource(Color.lightGray),\n+      \"MenuItem.background\", new ColorUIResource(light),\n       \"MenuItem.border\", new BasicBorders.MarginBorder(),\n       \"MenuItem.borderPainted\", Boolean.FALSE,\n       \"MenuItem.checkIcon\", BasicIconFactory.getMenuItemCheckIcon(),\n       \"MenuItem.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"MenuItem.foreground\", new ColorUIResource(Color.black),\n+      \"MenuItem.foreground\", new ColorUIResource(darkShadow),\n       \"MenuItem.margin\", new InsetsUIResource(2, 2, 2, 2),\n-      \"MenuItem.selectionBackground\", new ColorUIResource(lightPurple),\n-      \"MenuItem.selectionForeground\", new ColorUIResource(Color.black),\n-      \"OptionPane.background\", new ColorUIResource(Color.lightGray),\n-      \"OptionPane.border\", new BorderUIResource.EmptyBorderUIResource(0, 0, 0, 0),\n-      \"OptionPane.buttonAreaBorder\", new BorderUIResource.EmptyBorderUIResource(0, 0, 0, 0),\n+      \"MenuItem.selectionBackground\", new ColorUIResource(Color.black),\n+      \"MenuItem.selectionForeground\", new ColorUIResource(Color.white),\n+      \"OptionPane.background\", new ColorUIResource(light),\n+      \"OptionPane.border\",\n+      new BorderUIResource.EmptyBorderUIResource(0, 0, 0, 0),\n+      \"OptionPane.buttonAreaBorder\",\n+      new BorderUIResource.EmptyBorderUIResource(0, 0, 0, 0),\n       \"OptionPane.cancelButtonText\", \"Cancel\",\n       // XXX Don't use gif\n-      \"OptionPane.errorIcon\", new IconUIResource(new ImageIcon(\"icons/Error.gif\")),\n+      \"OptionPane.errorIcon\",\n+      new IconUIResource(new ImageIcon(\"icons/Error.gif\")),\n       \"OptionPane.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"OptionPane.foreground\", new ColorUIResource(Color.black),\n+      \"OptionPane.foreground\", new ColorUIResource(darkShadow),\n       // XXX Don't use gif\n-      \"OptionPane.informationIcon\", new IconUIResource(new ImageIcon(\"icons/Inform.gif\")),\n-      \"OptionPane.messageAreaBorder\", new BorderUIResource.EmptyBorderUIResource(0, 0, 0, 0),\n-      \"OptionPane.messageForeground\", new ColorUIResource(Color.black),\n+      \"OptionPane.informationIcon\",\n+      new IconUIResource(new ImageIcon(\"icons/Inform.gif\")),\n+      \"OptionPane.messageAreaBorder\",\n+      new BorderUIResource.EmptyBorderUIResource(0, 0, 0, 0),\n+      \"OptionPane.messageForeground\", new ColorUIResource(darkShadow),\n       \"OptionPane.minimumSize\", new DimensionUIResource(262, 90),\n       \"OptionPane.noButtonText\", \"No\",\n       \"OptionPane.okButtonText\", \"OK\",\n       // XXX Don't use gif\n-      \"OptionPane.questionIcon\", new IconUIResource(new ImageIcon(\"icons/Question.gif\")),\n+      \"OptionPane.questionIcon\",\n+      new IconUIResource(new ImageIcon(\"icons/Question.gif\")),\n       // XXX Don't use gif\n-      \"OptionPane.warningIcon\", new IconUIResource(new ImageIcon(\"icons/Warn.gif\")),\n+      \"OptionPane.warningIcon\",\n+      new IconUIResource(new ImageIcon(\"icons/Warn.gif\")),\n       \"OptionPane.windowBindings\", new Object[] {\n         \"ESCAPE\",  \"close\"\n       },\n       \"OptionPane.yesButtonText\", \"Yes\",\n-      \"Panel.background\", new ColorUIResource(Color.lightGray),\n+      \"Panel.background\", new ColorUIResource(light),\n       \"Panel.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n       \"Panel.foreground\", new ColorUIResource(Color.black),\n-      \"PasswordField.background\", new ColorUIResource(Color.white),\n+      \"PasswordField.background\", new ColorUIResource(light),\n       \"PasswordField.border\", new BasicBorders.FieldBorder(null, null,\n                                                            null, null),\n       \"PasswordField.caretBlinkRate\", new Integer(500),\n       \"PasswordField.caretForeground\", new ColorUIResource(Color.black),\n       \"PasswordField.font\", new FontUIResource(\"MonoSpaced\", Font.PLAIN, 12),\n       \"PasswordField.foreground\", new ColorUIResource(Color.black),\n+      \"PasswordField.inactiveBackground\", new ColorUIResource(light),\n       \"PasswordField.inactiveForeground\", new ColorUIResource(Color.gray),\n       \"PasswordField.keyBindings\", new JTextComponent.KeyBinding[] {\n         new JTextComponent.KeyBinding(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,\n                                                              0),\n                                       \"notify-field-accept\")},\n       \"PasswordField.margin\", new InsetsUIResource(0, 0, 0, 0),\n-      \"PasswordField.selectionBackground\", new ColorUIResource(lightPurple),\n-      \"PasswordField.selectionForeground\", new ColorUIResource(Color.black),\n-      \"PopupMenu.background\", new ColorUIResource(Color.lightGray),\n+      \"PasswordField.selectionBackground\", new ColorUIResource(Color.black),\n+      \"PasswordField.selectionForeground\", new ColorUIResource(Color.white),\n+      \"PopupMenu.background\", new ColorUIResource(light),\n       \"PopupMenu.border\", new BorderUIResource.BevelBorderUIResource(0),\n       \"PopupMenu.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"PopupMenu.foreground\", new ColorUIResource(Color.black),\n-      \"ProgressBar.background\", new ColorUIResource(Color.lightGray),\n+      \"PopupMenu.foreground\", new ColorUIResource(darkShadow),\n+      \"ProgressBar.background\", new ColorUIResource(light),\n       \"ProgressBar.border\", new BorderUIResource.LineBorderUIResource(Color.darkGray),\n       \"ProgressBar.cellLength\", new Integer(1),\n       \"ProgressBar.cellSpacing\", new Integer(0),\n       \"ProgressBar.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"ProgressBar.foreground\", new ColorUIResource(midPurple),\n-      \"ProgressBar.selectionBackground\", new ColorUIResource(lightPurple),\n-      \"ProgressBar.selectionForeground\", new ColorUIResource(Color.lightGray),\n+      \"ProgressBar.foreground\", new ColorUIResource(Color.black),\n+      \"ProgressBar.selectionBackground\", new ColorUIResource(Color.black),\n+      \"ProgressBar.selectionForeground\", new ColorUIResource(light),\n       \"ProgressBar.repaintInterval\", new Integer(250),\n       \"ProgressBar.cycleTime\", new Integer(6000),\n-      \"RadioButton.background\", new ColorUIResource(Color.lightGray),\n+      \"RadioButton.background\", new ColorUIResource(light),\n       \"RadioButton.border\", new BorderUIResource.CompoundBorderUIResource(null,\n                                                                           null),\n-      \"RadioButton.darkShadow\", new ColorUIResource(Color.darkGray),\n+      \"RadioButton.darkShadow\", new ColorUIResource(shadow),\n       \"RadioButton.focusInputMap\", new UIDefaults.LazyInputMap(new Object[] {\n         \"SPACE\",  \"pressed\",\n         \"released SPACE\", \"released\"\n       }),\n       \"RadioButton.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"RadioButton.foreground\", new ColorUIResource(Color.black),\n-      \"RadioButton.highlight\", new ColorUIResource(Color.white),\n+      \"RadioButton.foreground\", new ColorUIResource(darkShadow),\n+      \"RadioButton.highlight\", new ColorUIResource(highLight),\n       \"RadioButton.icon\", BasicIconFactory.getRadioButtonIcon(),\n-      \"RadioButton.light\", new ColorUIResource(Color.lightGray.brighter()),\n+      \"RadioButton.light\", new ColorUIResource(highLight),\n       \"RadioButton.margin\", new InsetsUIResource(2, 2, 2, 2),\n-      \"RadioButton.shadow\", new ColorUIResource(Color.gray),\n+      \"RadioButton.shadow\", new ColorUIResource(shadow),\n       \"RadioButton.textIconGap\", new Integer(4),\n       \"RadioButton.textShiftOffset\", new Integer(0),\n-      \"RadioButtonMenuItem.acceleratorFont\", new FontUIResource(\"Dialog\",\n-                                                                Font.PLAIN, 12),\n-      \"RadioButtonMenuItem.acceleratorForeground\", new ColorUIResource(Color.black),\n-      \"RadioButtonMenuItem.acceleratorSelectionForeground\", new ColorUIResource(Color.white),\n+      \"RadioButtonMenuItem.acceleratorFont\",\n+      new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n+      \"RadioButtonMenuItem.acceleratorForeground\",\n+      new ColorUIResource(darkShadow),\n+      \"RadioButtonMenuItem.acceleratorSelectionForeground\",\n+      new ColorUIResource(Color.white),\n       \"RadioButtonMenuItem.arrowIcon\", BasicIconFactory.getMenuItemArrowIcon(),\n-      \"RadioButtonMenuItem.background\", new ColorUIResource(Color.lightGray),\n+      \"RadioButtonMenuItem.background\", new ColorUIResource(light),\n       \"RadioButtonMenuItem.border\", new BasicBorders.MarginBorder(),\n       \"RadioButtonMenuItem.borderPainted\", Boolean.FALSE,\n       \"RadioButtonMenuItem.checkIcon\", BasicIconFactory.getRadioButtonMenuItemIcon(),\n       \"RadioButtonMenuItem.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"RadioButtonMenuItem.foreground\", new ColorUIResource(Color.black),\n+      \"RadioButtonMenuItem.foreground\", new ColorUIResource(darkShadow),\n       \"RadioButtonMenuItem.margin\", new InsetsUIResource(2, 2, 2, 2),\n-      \"RadioButtonMenuItem.selectionBackground\", new ColorUIResource(lightPurple),\n-      \"RadioButtonMenuItem.selectionForeground\", new ColorUIResource(Color.black),\n+      \"RadioButtonMenuItem.selectionBackground\",\n+      new ColorUIResource(Color.black),\n+      \"RadioButtonMenuItem.selectionForeground\",\n+      new ColorUIResource(Color.white),\n       \"RootPane.defaultButtonWindowKeyBindings\", new Object[] {\n         \"ENTER\",  \"press\",\n         \"released ENTER\", \"release\",\n@@ -635,15 +669,15 @@ public Object createValue(UIDefaults table)\n         \"DOWN\",  \"positiveUnitIncrement\",\n         \"KP_RIGHT\", \"negativeUnitIncrement\"\n       }),\n-      \"ScrollBar.foreground\", new ColorUIResource(Color.lightGray),\n+      \"ScrollBar.foreground\", new ColorUIResource(light),\n       \"ScrollBar.maximumThumbSize\", new DimensionUIResource(4096, 4096),\n       \"ScrollBar.minimumThumbSize\", new DimensionUIResource(8, 8),\n-      \"ScrollBar.thumb\", new ColorUIResource(Color.lightGray),\n-      \"ScrollBar.thumbDarkShadow\", new ColorUIResource(Color.black),\n-      \"ScrollBar.thumbHighlight\", new ColorUIResource(Color.white),\n-      \"ScrollBar.thumbLightShadow\", new ColorUIResource(Color.gray),\n-      \"ScrollBar.track\", new ColorUIResource(224, 224, 224),\n-      \"ScrollBar.trackHighlight\", new ColorUIResource(Color.black),\n+      \"ScrollBar.thumb\", new ColorUIResource(light),\n+      \"ScrollBar.thumbDarkShadow\", new ColorUIResource(shadow),\n+      \"ScrollBar.thumbHighlight\", new ColorUIResource(highLight),\n+      \"ScrollBar.thumbShadow\", new ColorUIResource(shadow),\n+      \"ScrollBar.track\", new ColorUIResource(light),\n+      \"ScrollBar.trackHighlight\", new ColorUIResource(shadow),\n       \"ScrollPane.ancestorInputMap\", new UIDefaults.LazyInputMap(new Object[] {\n         \"PAGE_UP\", \"scrollUp\",\n         \"KP_LEFT\", \"unitScrollLeft\",\n@@ -660,16 +694,16 @@ public Object createValue(UIDefaults table)\n         \"KP_UP\", \"unitScrollUp\",\n         \"KP_DOWN\", \"unitScrollDown\"\n       }),\n-      \"ScrollPane.background\", new ColorUIResource(Color.lightGray),\n+      \"ScrollPane.background\", new ColorUIResource(light),\n       \"ScrollPane.border\", new BorderUIResource.EtchedBorderUIResource(),\n       \"ScrollPane.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"ScrollPane.foreground\", new ColorUIResource(Color.black),\n-      \"Separator.background\", new ColorUIResource(Color.white),\n-      \"Separator.foreground\", new ColorUIResource(Color.gray),\n-      \"Separator.highlight\", new ColorUIResource(Color.white),\n-      \"Separator.shadow\", new ColorUIResource(Color.gray),\n-      \"Slider.background\", new ColorUIResource(Color.lightGray),\n-      \"Slider.focus\", new ColorUIResource(Color.black),\n+      \"ScrollPane.foreground\", new ColorUIResource(darkShadow),\n+      \"Separator.background\", new ColorUIResource(highLight),\n+      \"Separator.foreground\", new ColorUIResource(shadow),\n+      \"Separator.highlight\", new ColorUIResource(highLight),\n+      \"Separator.shadow\", new ColorUIResource(shadow),\n+      \"Slider.background\", new ColorUIResource(light),\n+      \"Slider.focus\", new ColorUIResource(shadow),\n       \"Slider.focusInputMap\", new UIDefaults.LazyInputMap(new Object[] {\n         \"PAGE_UP\", \"positiveBlockIncrement\",\n         \"PAGE_DOWN\", \"negativeBlockIncrement\",\n@@ -685,12 +719,14 @@ public Object createValue(UIDefaults table)\n         \"KP_RIGHT\", \"positiveUnitIncrement\"\n       }),\n       \"Slider.focusInsets\", new InsetsUIResource(2, 2, 2, 2),\n-      \"Slider.foreground\", new ColorUIResource(Color.lightGray),\n-      \"Slider.highlight\", new ColorUIResource(Color.white),\n-      \"Slider.shadow\", new ColorUIResource(Color.gray),\n+      \"Slider.foreground\", new ColorUIResource(light),\n+      \"Slider.highlight\", new ColorUIResource(highLight),\n+      \"Slider.shadow\", new ColorUIResource(shadow),\n       \"Slider.thumbHeight\", new Integer(20),\n       \"Slider.thumbWidth\", new Integer(10),\n       \"Slider.tickHeight\", new Integer(12),\n+      \"Spinner.background\", new ColorUIResource(light),\n+      \"Spinner.foreground\", new ColorUIResource(light),\n       \"SplitPane.ancestorInputMap\", new UIDefaults.LazyInputMap(new Object[] {\n         \"F6\",  \"toggleFocus\",\n         \"F8\",  \"startResize\",\n@@ -705,21 +741,22 @@ public Object createValue(UIDefaults table)\n         \"DOWN\",  \"positiveIncrement\",\n         \"KP_RIGHT\", \"positiveIncrement\"\n       }),\n-      \"SplitPane.background\", new ColorUIResource(Color.lightGray),\n+      \"SplitPane.background\", new ColorUIResource(light),\n       \"SplitPane.border\", new BasicBorders.SplitPaneBorder(null, null),\n+      \"SplitPane.darkShadow\", new ColorUIResource(shadow),\n       \"SplitPane.dividerSize\", new Integer(10),\n-      \"SplitPane.highlight\", new ColorUIResource(Color.white),\n-      \"SplitPane.shadow\", new ColorUIResource(Color.gray),\n+      \"SplitPane.highlight\", new ColorUIResource(highLight),\n+      \"SplitPane.shadow\", new ColorUIResource(shadow),\n       \"TabbedPane.ancestorInputMap\", new UIDefaults.LazyInputMap(new Object[] {\n         \"ctrl PAGE_DOWN\",\"navigatePageDown\",\n         \"ctrl PAGE_UP\", \"navigatePageUp\",\n         \"ctrl UP\", \"requestFocus\",\n         \"ctrl KP_UP\", \"requestFocus\"\n       }),\n-      \"TabbedPane.background\", new ColorUIResource(Color.LIGHT_GRAY),\n+      \"TabbedPane.background\", new ColorUIResource(light),\n       \"TabbedPane.contentBorderInsets\", new InsetsUIResource(2, 2, 3, 3),\n-      \"TabbedPane.darkShadow\", new ColorUIResource(Color.darkGray),\n-      \"TabbedPane.focus\", new ColorUIResource(Color.black),\n+      \"TabbedPane.darkShadow\", new ColorUIResource(shadow),\n+      \"TabbedPane.focus\", new ColorUIResource(darkShadow),\n       \"TabbedPane.focusInputMap\", new UIDefaults.LazyInputMap(new Object[] {\n         \"LEFT\",  \"navigateLeft\",\n         \"KP_UP\", \"navigateUp\",\n@@ -733,11 +770,11 @@ public Object createValue(UIDefaults table)\n         \"DOWN\",  \"navigateDown\"\n       }),\n       \"TabbedPane.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"TabbedPane.foreground\", new ColorUIResource(Color.black),\n-      \"TabbedPane.highlight\", new ColorUIResource(Color.lightGray),\n-      \"TabbedPane.lightHighlight\", new ColorUIResource(Color.white),\n+      \"TabbedPane.foreground\", new ColorUIResource(darkShadow),\n+      \"TabbedPane.highlight\", new ColorUIResource(highLight),\n+      \"TabbedPane.light\", new ColorUIResource(highLight),\n       \"TabbedPane.selectedTabPadInsets\", new InsetsUIResource(2, 2, 2, 1),\n-      \"TabbedPane.shadow\", new ColorUIResource(Color.gray),\n+      \"TabbedPane.shadow\", new ColorUIResource(shadow),\n       \"TabbedPane.tabbedPaneTabAreaInsets\", new InsetsUIResource(3, 2, 1, 2),\n       \"TabbedPane.tabbedPaneTabInsets\", new InsetsUIResource(1, 4, 1, 4),\n       \"TabbedPane.tabbedPaneContentBorderInsets\", new InsetsUIResource(3, 2, 1, 2),\n@@ -784,21 +821,22 @@ public Object createValue(UIDefaults table)\n         \"ctrl PAGE_DOWN\", \"scrollRightChangeSelection\",\n         \"PAGE_UP\",   \"scrollUpChangeSelection\"\n       }),\n-      \"Table.background\", new ColorUIResource(Color.white),\n-      \"Table.focusCellBackground\", new ColorUIResource(Color.white),\n-      \"Table.focusCellForeground\", new ColorUIResource(Color.black),\n-      \"Table.focusCellHighlightBorder\", new BorderUIResource.LineBorderUIResource(Color.white),\n+      \"Table.background\", new ColorUIResource(light),\n+      \"Table.focusCellBackground\", new ColorUIResource(light),\n+      \"Table.focusCellForeground\", new ColorUIResource(darkShadow),\n+      \"Table.focusCellHighlightBorder\",\n+      new BorderUIResource.LineBorderUIResource(Color.white),\n       \"Table.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"Table.foreground\", new ColorUIResource(Color.black),\n+      \"Table.foreground\", new ColorUIResource(darkShadow),\n       \"Table.gridColor\", new ColorUIResource(Color.gray),\n       \"Table.scrollPaneBorder\", new BorderUIResource.BevelBorderUIResource(0),\n-      \"Table.selectionBackground\", new ColorUIResource(lightPurple),\n-      \"Table.selectionForeground\", new ColorUIResource(Color.black),\n-      \"TableHeader.background\", new ColorUIResource(Color.lightGray),\n+      \"Table.selectionBackground\", new ColorUIResource(Color.black),\n+      \"Table.selectionForeground\", new ColorUIResource(Color.white),\n+      \"TableHeader.background\", new ColorUIResource(light),\n       \"TableHeader.cellBorder\", new BorderUIResource.BevelBorderUIResource(0),\n       \"TableHeader.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"TableHeader.foreground\", new ColorUIResource(Color.black),\n-      \"TextArea.background\", new ColorUIResource(Color.white),\n+      \"TableHeader.foreground\", new ColorUIResource(darkShadow),\n+      \"TextArea.background\", new ColorUIResource(light),\n       \"TextArea.border\", new BasicBorders.MarginBorder(),\n       \"TextArea.caretBlinkRate\", new Integer(500),\n       \"TextArea.caretForeground\", new ColorUIResource(Color.black),\n@@ -820,15 +858,20 @@ public Object createValue(UIDefaults table)\n                                                              0), \"insert-tab\")\n           },\n       \"TextArea.margin\", new InsetsUIResource(0, 0, 0, 0),\n-      \"TextArea.selectionBackground\", new ColorUIResource(lightPurple),\n-      \"TextArea.selectionForeground\", new ColorUIResource(Color.black),\n-      \"TextField.background\", new ColorUIResource(Color.white),\n+      \"TextArea.selectionBackground\", new ColorUIResource(Color.black),\n+      \"TextArea.selectionForeground\", new ColorUIResource(Color.white),\n+      \"TextField.background\", new ColorUIResource(light),\n       \"TextField.border\", new BasicBorders.FieldBorder(null, null, null, null),\n       \"TextField.caretBlinkRate\", new Integer(500),\n       \"TextField.caretForeground\", new ColorUIResource(Color.black),\n+      \"TextField.darkShadow\", new ColorUIResource(shadow),\n       \"TextField.font\", new FontUIResource(\"SansSerif\", Font.PLAIN, 12),\n       \"TextField.foreground\", new ColorUIResource(Color.black),\n+      \"TextField.highlight\", new ColorUIResource(highLight),\n+      \"TextField.inactiveBackground\", new ColorUIResource(light),\n       \"TextField.inactiveForeground\", new ColorUIResource(Color.gray),\n+      \"TextField.light\", new ColorUIResource(highLight),\n+      \"TextField.highlight\", new ColorUIResource(light),\n       \"TextField.keyBindings\", new JTextComponent.KeyBinding[] {\n         new JTextComponent.KeyBinding(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,\n                                                              0),\n@@ -841,8 +884,8 @@ public Object createValue(UIDefaults table)\n \t\t\t\t\t\t\t     \"selection-forward\"),\n           },\n       \"TextField.margin\", new InsetsUIResource(0, 0, 0, 0),\n-      \"TextField.selectionBackground\", new ColorUIResource(lightPurple),\n-      \"TextField.selectionForeground\", new ColorUIResource(Color.black),\n+      \"TextField.selectionBackground\", new ColorUIResource(Color.black),\n+      \"TextField.selectionForeground\", new ColorUIResource(Color.white),\n       \"TextPane.background\", new ColorUIResource(Color.white),\n       \"TextPane.border\", new BasicBorders.MarginBorder(),\n       \"TextPane.caretBlinkRate\", new Integer(500),\n@@ -865,20 +908,25 @@ public Object createValue(UIDefaults table)\n                                                              0), \"insert-tab\")\n           },\n       \"TextPane.margin\", new InsetsUIResource(3, 3, 3, 3),\n-      \"TextPane.selectionBackground\", new ColorUIResource(Color.lightGray),\n+      \"TextPane.selectionBackground\", new ColorUIResource(Color.black),\n       \"TextPane.selectionForeground\", new ColorUIResource(Color.white),\n       \"TitledBorder.border\", new BorderUIResource.EtchedBorderUIResource(),\n       \"TitledBorder.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"TitledBorder.titleColor\", new ColorUIResource(Color.black),\n-      \"ToggleButton.background\", new ColorUIResource(Color.lightGray),\n-      \"ToggleButton.border\", new BorderUIResource.CompoundBorderUIResource(null, null),\n+      \"TitledBorder.titleColor\", new ColorUIResource(darkShadow),\n+      \"ToggleButton.background\", new ColorUIResource(light),\n+      \"ToggleButton.border\",\n+      new BorderUIResource.CompoundBorderUIResource(null, null),\n+      \"ToggleButton.darkShadow\", new ColorUIResource(shadow),\n       \"ToggleButton.focusInputMap\", new UIDefaults.LazyInputMap(new Object[] {\n         \"SPACE\",  \"pressed\",\n         \"released SPACE\", \"released\"\n       }),\n       \"ToggleButton.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"ToggleButton.foreground\", new ColorUIResource(Color.black),\n+      \"ToggleButton.foreground\", new ColorUIResource(darkShadow),\n+      \"ToggleButton.highlight\", new ColorUIResource(highLight),\n+      \"ToggleButton.light\", new ColorUIResource(light),\n       \"ToggleButton.margin\", new InsetsUIResource(2, 14, 2, 14),\n+      \"ToggleButton.shadow\", new ColorUIResource(shadow),\n       \"ToggleButton.textIconGap\", new Integer(4),\n       \"ToggleButton.textShiftOffset\", new Integer(0),\n       \"ToolBar.ancestorInputMap\", new UIDefaults.LazyInputMap(new Object[] {\n@@ -891,23 +939,27 @@ public Object createValue(UIDefaults table)\n         \"RIGHT\", \"navigateRight\",\n         \"KP_RIGHT\", \"navigateRight\"\n       }),\n-      \"ToolBar.background\", new ColorUIResource(Color.lightGray),\n+      \"ToolBar.background\", new ColorUIResource(light),\n       \"ToolBar.border\", new BorderUIResource.EtchedBorderUIResource(),\n-      \"ToolBar.dockingBackground\", new ColorUIResource(Color.lightGray),\n-      \"ToolBar.dockingForeground\", new ColorUIResource(11, 30, 143),\n-      \"ToolBar.floatingBackground\", new ColorUIResource(Color.lightGray),\n-      \"ToolBar.floatingForeground\", new ColorUIResource(113, 171, 212),\n+      \"ToolBar.darkShadow\", new ColorUIResource(shadow),\n+      \"ToolBar.dockingBackground\", new ColorUIResource(light),\n+      \"ToolBar.dockingForeground\", new ColorUIResource(Color.red),\n+      \"ToolBar.floatingBackground\", new ColorUIResource(light),\n+      \"ToolBar.floatingForeground\", new ColorUIResource(Color.darkGray),\n       \"ToolBar.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n-      \"ToolBar.foreground\", new ColorUIResource(Color.black),\n+      \"ToolBar.foreground\", new ColorUIResource(darkShadow),\n+      \"ToolBar.highlight\", new ColorUIResource(highLight),\n+      \"ToolBar.light\", new ColorUIResource(highLight),\n       \"ToolBar.separatorSize\", new DimensionUIResource(20, 20),\n-      \"ToolTip.background\", new ColorUIResource(122, 178, 241),\n+      \"ToolBar.shadow\", new ColorUIResource(shadow),\n+      \"ToolTip.background\", new ColorUIResource(light),\n       \"ToolTip.border\", new BorderUIResource.LineBorderUIResource(Color.lightGray),\n       \"ToolTip.font\", new FontUIResource(\"SansSerif\", Font.PLAIN, 12),\n-      \"ToolTip.foreground\", new ColorUIResource(Color.black),\n+      \"ToolTip.foreground\", new ColorUIResource(darkShadow),\n       \"Tree.ancestorInputMap\", new UIDefaults.LazyInputMap(new Object[] {\n         \"ESCAPE\", \"cancel\"\n       }),\n-      \"Tree.background\", new ColorUIResource(Color.white),\n+      \"Tree.background\", new ColorUIResource(light),\n       \"Tree.changeSelectionWithFocus\", Boolean.TRUE,\n       \"Tree.closedIcon\", new IconUIResource(new ImageIcon(\"icons/TreeClosed.png\")),\n       \"Tree.collapsedIcon\", new IconUIResource(new ImageIcon(\"icons/TreeCollapsed.png\")),\n@@ -967,13 +1019,14 @@ public Object createValue(UIDefaults table)\n       \"Tree.rightChildIndent\", new Integer(13),\n       \"Tree.rowHeight\", new Integer(16),\n       \"Tree.scrollsOnExpand\", Boolean.TRUE,\n-      \"Tree.selectionBackground\", new ColorUIResource(lightPurple),\n+      \"Tree.selectionBackground\", new ColorUIResource(Color.black),\n       \"Tree.selectionBorderColor\", new ColorUIResource(Color.black),\n-      \"Tree.selectionForeground\", new ColorUIResource(Color.black),\n-      \"Tree.textBackground\", new ColorUIResource(Color.lightGray),\n+      \"Tree.selectionForeground\", new ColorUIResource(Color.white),\n+      \"Tree.textBackground\", new ColorUIResource(Color.white),\n       \"Tree.textForeground\", new ColorUIResource(Color.black),\n-      \"Viewport.background\", new ColorUIResource(Color.lightGray),\n-      \"Viewport.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12),\n+      \"Viewport.background\", new ColorUIResource(light),\n+      \"Viewport.foreground\", new ColorUIResource(Color.black),\n+      \"Viewport.font\", new FontUIResource(\"Dialog\", Font.PLAIN, 12)\n     };\n     defaults.putDefaults(uiDefaults);\n   }"}, {"sha": "50af23ac64178900fcc1b5d882628652327e17a1", "filename": "libjava/javax/swing/plaf/basic/BasicMenuItemUI.java", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicMenuItemUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicMenuItemUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicMenuItemUI.java?ref=8efae6bbfa04f662589bbfc64dbbe68935f973d2", "patch": "@@ -605,7 +605,17 @@ protected void paintText(Graphics g, JMenuItem menuItem, Rectangle textRect,\n     if (text != null && ! text.equals(\"\"))\n       {\n \tif (menuItem.isEnabled())\n-\t  g.setColor(menuItem.getForeground());\n+          {\n+            /* Menu item is considered to be highlighted when it is selected.\n+               It is considered to be selected if menu item is inside some menu\n+               and is armed or if it is both armed and pressed */\n+            if (menuItem.getModel().isArmed()\n+                && (menuItem.getParent() instanceof MenuElement\n+                    || menuItem.getModel().isPressed()))\n+              g.setColor(selectionForeground);\n+            else\n+              g.setColor(menuItem.getForeground());\n+          }\n \telse\n \t  // FIXME: should fix this to use 'disabledForeground', but its\n \t  // default value in BasicLookAndFeel is null.\t  "}, {"sha": "7e06067fa49154e74056c827b12aaa6e48d8ca7e", "filename": "libjava/javax/swing/plaf/basic/BasicScrollBarUI.java", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicScrollBarUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicScrollBarUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicScrollBarUI.java?ref=8efae6bbfa04f662589bbfc64dbbe68935f973d2", "patch": "@@ -818,6 +818,11 @@ protected void installDefaults()\n     scrollbar.setBorder(defaults.getBorder(\"ScrollBar.border\"));\n     scrollbar.setOpaque(true);\n \n+    thumbColor = defaults.getColor(\"ScrollBar.thumb\");\n+    thumbDarkShadowColor = defaults.getColor(\"ScrollBar.thumbDarkShadow\");\n+    thumbHighlightColor = defaults.getColor(\"ScrollBar.thumbHighlight\");\n+    thumbLightShadowColor = defaults.getColor(\"ScrollBar.thumbShadow\");\n+\n     maximumThumbSize = defaults.getDimension(\"ScrollBar.maximumThumbSize\");\n     minimumThumbSize = defaults.getDimension(\"ScrollBar.minimumThumbSize\");\n   }"}, {"sha": "d5b467fa22f21975e34a334ae5c2e2f2c311ed3b", "filename": "libjava/javax/swing/plaf/metal/MetalBorders.java", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalBorders.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalBorders.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalBorders.java?ref=8efae6bbfa04f662589bbfc64dbbe68935f973d2", "patch": "@@ -183,6 +183,82 @@ public Insets getBorderInsets(Component c, Insets newInsets)\n     }\n   }\n \n+  /**\n+   * A border for JScrollPanes.\n+   */\n+  public static class ScrollPaneBorder\n+    extends AbstractBorder\n+    implements UIResource\n+  {\n+    /** The border insets. */\n+    private static Insets insets = new Insets(1, 1, 2, 2);\n+    \n+    /**\n+     * Constructs a new ScrollPaneBorder.\n+     */\n+    public ScrollPaneBorder()\n+    {\n+    }\n+    \n+    /**\n+     * Returns the insets of the border for the Component <code>c</code>.\n+     *\n+     * @param c the Component for which we return the border insets\n+     */\n+    public Insets getBorderInsets(Component c)\n+    {\n+      return insets;\n+    }\n+\n+    /**\n+     * Paints the border.\n+     *\n+     * @param c the Component for which the border is painted\n+     * @param g the Graphics context\n+     * @param x the X coordinate of the upper left corner of the border\n+     * @param y the Y coordinate of the upper left corner of the border\n+     * @param w the width of the border\n+     * @param h the height of the border\n+     */\n+    public void paintBorder(Component c, Graphics g, int x, int y,\n+                            int w, int h)\n+    {\n+      Color darkShadow = MetalLookAndFeel.getControlDarkShadow();\n+      Color shadow = MetalLookAndFeel.getControlShadow();\n+      Color light = MetalLookAndFeel.getWhite();\n+      Color middle = MetalLookAndFeel.getControl();\n+\n+      // paint top border line\n+      g.setColor(darkShadow);\n+      g.drawLine(x, y, x + w - 2, y);\n+\n+      // paint left border line\n+      g.drawLine(x, y, x, y + h - 2);\n+ \n+      // paint right inner border line\n+      g.drawLine(x + w - 2, y, x + w - 2, y + h + 1);\n+\n+      // paint bottom inner border line\n+      g.drawLine(x + 2, y + h - 2, x + w - 2, y + h - 2);\n+\n+      // draw right outer border line\n+      g.setColor(light);\n+      g.drawLine(x + w - 1, y, x + w - 1, y + h - 1);\n+\n+      // draw bottom outer border line\n+      g.drawLine(x, y + h - 1, x + w - 1, y + h - 1);\n+\n+      // paint the lighter points\n+      g.setColor(middle);\n+      g.drawLine(x + w - 1, y, x + w - 1, y);\n+      g.drawLine(x + w - 2, y + 2, x + w - 2, y + 2);\n+      g.drawLine(x, y + h - 1, x, y + h - 1);\n+      g.drawLine(x + 1, y + h - 2, x + 1, y + h - 2);\n+\n+    }\n+    \n+  }\n+  \n   /**\n    * This border is used in Toolbar buttons as inner border.\n    */"}, {"sha": "edeff18247a38aa0b749e65ed2d29f29d57a3754", "filename": "libjava/javax/swing/plaf/metal/MetalLookAndFeel.java", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalLookAndFeel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalLookAndFeel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalLookAndFeel.java?ref=8efae6bbfa04f662589bbfc64dbbe68935f973d2", "patch": "@@ -474,6 +474,7 @@ protected void initComponentDefaults(UIDefaults defaults)\n       \"Slider.background\", new ColorUIResource(getControl()),\n       \"OptionPane.background\", new ColorUIResource(getControl()),\n       \"ProgressBar.background\", new ColorUIResource(getControl()),\n+      \"ScrollPane.border\", new MetalBorders.ScrollPaneBorder(),\n       \"TabbedPane.background\", new ColorUIResource(getControl()),\n       \"Label.background\", new ColorUIResource(getControl()),\n       \"Label.font\", getControlTextFont(),"}, {"sha": "d2e9ea529da1b63c50296bf70efe4d2cf2514345", "filename": "libjava/javax/swing/plaf/metal/MetalTextFieldUI.java", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalTextFieldUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalTextFieldUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fmetal%2FMetalTextFieldUI.java?ref=8efae6bbfa04f662589bbfc64dbbe68935f973d2", "patch": "@@ -38,6 +38,8 @@\n \n package javax.swing.plaf.metal;\n \n+import java.util.HashMap;\n+\n import javax.swing.JComponent;\n import javax.swing.plaf.ComponentUI;\n import javax.swing.plaf.basic.BasicTextFieldUI;\n@@ -46,9 +48,8 @@\n   extends BasicTextFieldUI\n {\n \n-  // FIXME: maybe replace by a Map of instances when this becomes stateful\n-  /** The shared UI instance for MetalTextFieldUIs */\n-  private static MetalTextFieldUI instance = null;\n+  /** The UI instances for MetalTextFieldUIs */\n+  private static HashMap instances = null;\n \n   /**\n    * Constructs a new instance of MetalTextFieldUI.\n@@ -67,8 +68,19 @@ public MetalTextFieldUI()\n    */\n   public static ComponentUI createUI(JComponent component)\n   {\n-    if (instance == null)\n-      instance = new MetalTextFieldUI();\n+    if (instances == null)\n+      instances = new HashMap();\n+\n+    Object o = instances.get(component);\n+    MetalTextFieldUI instance;\n+    if (o == null)\n+      {\n+\tinstance = new MetalTextFieldUI();\n+\tinstances.put(component, instance);\n+      }\n+    else\n+      instance = (MetalTextFieldUI) o;\n+\n     return instance;\n   }\n }"}, {"sha": "29be0ad065ec61558285e67cfba039f786305518", "filename": "libjava/javax/swing/text/AbstractDocument.java", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Ftext%2FAbstractDocument.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Ftext%2FAbstractDocument.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2FAbstractDocument.java?ref=8efae6bbfa04f662589bbfc64dbbe68935f973d2", "patch": "@@ -43,6 +43,7 @@\n import java.util.Dictionary;\n import java.util.Enumeration;\n import java.util.EventListener;\n+import java.util.Hashtable;\n import java.util.Vector;\n \n import javax.swing.event.DocumentEvent;\n@@ -71,7 +72,10 @@\n   Content content;\n   AttributeContext context;\n   DocumentFilter documentFilter;\n-  \n+\n+  /** The documents properties. */\n+  Dictionary properties;\n+\n   protected EventListenerList listenerList = new EventListenerList();\n \n   protected AbstractDocument(Content doc)\n@@ -175,7 +179,11 @@ protected Thread getCurrentWriter()\n \n   public Dictionary getDocumentProperties()\n   {\n-    return null;\n+    // FIXME: make me thread-safe\n+    if (properties == null)\n+      properties = new Hashtable();\n+\n+    return properties;\n   }\n \n   public Position getEndPosition()\n@@ -201,7 +209,12 @@ public EventListener[] getListeners(Class listenerType)\n \n   public Object getProperty(Object key)\n   {\n-    return null;\n+    // FIXME: make me thread-safe\n+    Object value = null;\n+    if (properties != null)\n+      value = properties.get(key);\n+\n+    return value;\n   }\n \n   public Element[] getRootElements()\n@@ -258,6 +271,11 @@ protected void postRemoveUpdate(DefaultDocumentEvent chng)\n \n   public void putProperty(Object key, Object value)\n   {\n+    // FIXME: make me thread-safe\n+    if (properties == null)\n+      properties = new Hashtable();\n+\n+    properties.put(key, value);\n   }\n \n   public void readLock()\n@@ -366,6 +384,8 @@ public void setAsynchronousLoadPriority(int p)\n \n   public void setDocumentProperties(Dictionary x)\n   {\n+    // FIXME: make me thread-safe\n+    properties = x;\n   }\n \n   protected void writeLock()"}, {"sha": "31aded6584caec9e7a633e91af67926aa8cf51e4", "filename": "libjava/javax/swing/text/Document.java", "status": "modified", "additions": 135, "deletions": 1, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Ftext%2FDocument.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Ftext%2FDocument.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2FDocument.java?ref=8efae6bbfa04f662589bbfc64dbbe68935f973d2", "patch": "@@ -40,48 +40,182 @@\n import javax.swing.event.DocumentListener;\n import javax.swing.event.UndoableEditListener;\n \n-\n+/**\n+ * A Document is the model that backs up all text components in Swing.\n+ * This interface supports different kinds of implementations, from\n+ * simple plain text model up to complex styled HTML or RTF models.\n+ */\n public interface Document\n {\n+  /**\n+   * The key for the property that describes the source of a document.\n+   */\n   String StreamDescriptionProperty = \"stream\";\n+\n+  /**\n+   * The key for the property that is the title of a document.\n+   */\n   String TitleProperty = \"title\";\n \n+  /**\n+   * Adds a {@link DocumentListener} to this document.\n+   *\n+   * @param listener the DocumentListener to add\n+   */\n   void addDocumentListener(DocumentListener listener);\n \n+  /**\n+   * Adds an {@link UndoableEditListener} to this document.\n+   *\n+   * @param listener the UndoableEditListener to add\n+   */\n   void addUndoableEditListener(UndoableEditListener listener);\n \n+  /**\n+   * Creates a mark in the character content at the specified offset.\n+   *\n+   * @param offs the offset where to place the mark\n+   *\n+   * @return the created Position object\n+   *\n+   * @throws BadLocationException of the specified offset is not a valid\n+   *         position in the documents content\n+   */\n   Position createPosition(int offs)\n     throws BadLocationException;\n \n+  /**\n+   * Returns the default root element. Views should be using this element\n+   * unless other mechanisms for assigning views to element structure is\n+   * provided.\n+   *\n+   * @return the default root element\n+   */\n   Element getDefaultRootElement();\n \n+  /**\n+   * Returns the position that marks the end of the document.\n+   *\n+   * @return the position that marks the end of the document\n+   */\n   Position getEndPosition();\n \n+  /**\n+   * Returns the length of the document content.\n+   *\n+   * @return the length of the document content\n+   */\n   int getLength();\n \n+  /**\n+   * Returns a document property with the specified key.\n+   *\n+   * @param key the (non-null) key for the property to fetch\n+   *\n+   * @return the property for <code>key</code> or null if no such property\n+   *         is stored\n+   */\n   Object getProperty(Object key);\n \n+  /**\n+   * Returns the root elements of the document content.\n+   *\n+   * @return the root elements of the document content\n+   */\n   Element[] getRootElements();\n \n+  /**\n+   * Returns the position that marks the beginning of the document\n+   * content.\n+   *\n+   * @return the start position\n+   */\n   Position getStartPosition();\n \n+  /**\n+   * Returns the textual content starting at <code>offset</code> with\n+   * a length of <code>length</code>.\n+   *\n+   * @param offset the beginning of the text fragment to fetch\n+   * @param length the length of the text fragment to fetch\n+   *\n+   * @return the text fragment starting at <code>offset</code> with\n+   *         a length of <code>length</code>\n+   *\n+   * @throws BadLocationException if <code>offset</code> or <code>length</code>\n+   *         are no valid locations in the document content\n+   */\n   String getText(int offset, int length)\n     throws BadLocationException;\n \n+  /**\n+   * Fetch the textual content starting at <code>offset</code> with\n+   * a length of <code>length</code> and store it in <code>txt</code>.\n+   *\n+   * @param offset the beginning of the text fragment to fetch\n+   * @param length the length of the text fragment to fetch\n+   * @param txt the Segment where to store the text fragment\n+   *\n+   * @throws BadLocationException if <code>offset</code> or <code>length</code>\n+   *         are no valid locations in the document content\n+   */\n   void getText(int offset, int length, Segment txt)\n     throws BadLocationException;\n \n+  /**\n+   * Inserts a piece of text with an AttributeSet at the specified\n+   * <code>offset</code>.\n+   *\n+   * @param offset the location where to insert the content\n+   * @param str the textual content to insert\n+   * @param a the Attributes associated with the piece of text\n+   *\n+   * @throws BadLocationException if <code>offset</code>\n+   *         is not a valid location in the document content\n+   */\n   void insertString(int offset, String str, AttributeSet a)\n     throws BadLocationException;\n \n+  /**\n+   * Sets a document property.\n+   *\n+   * @param key the key of the property\n+   * @param value the value of the property\n+   */\n   void putProperty(Object key, Object value);\n \n+  /**\n+   * Removes a piece of content.\n+   *\n+   * @param offs the location of the fragment to remove\n+   * @param len the length of the fragment to remove\n+   *\n+   * @throws BadLocationException if <code>offs</code> or <code>len</code>\n+   *         are no valid locations in the document content\n+   */\n   void remove(int offs, int len)\n     throws BadLocationException;\n \n+  /**\n+   * Removes a DocumentListener from this Document.\n+   *\n+   * @param listener the DocumentListener to remove\n+   */\n   void removeDocumentListener(DocumentListener listener);\n \n+  /**\n+   * Removes an UndoableEditListener from this Document.\n+   *\n+   * @param listener the UndoableEditListener to remove\n+   */\n   void removeUndoableEditListener(UndoableEditListener listener);\n \n+  /**\n+   * This allows the Document to be rendered safely. It is made sure that\n+   * the Runnable can read the document without any changes while reading.\n+   * The Runnable is not allowed to change the Document itself.\n+   *\n+   * @param r the Runnable that renders the Document\n+   */\n   void render(Runnable r);\n }"}, {"sha": "ea088dd2adea2b0ef8676e03a4609a53ebcdb38c", "filename": "libjava/javax/swing/text/GapContent.java", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Ftext%2FGapContent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Ftext%2FGapContent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2FGapContent.java?ref=8efae6bbfa04f662589bbfc64dbbe68935f973d2", "patch": "@@ -44,23 +44,51 @@\n // lets just use a stringbuffer instead.\n import javax.swing.undo.UndoableEdit;\n \n+/**\n+ * This implementation of {@link AbstractDocument.Content} uses a gapped\n+ * buffer. This takes advantage of the fact that text area content is\n+ * mostly inserted sequentially. The buffer is a char array that maintains\n+ * a gap at the current insertion point. If characters a inserted at\n+ * gap boundaries, the cost is minimal (simple array access). The array only\n+ * has to be shifted around when the insertion point moves (then the gap also\n+ * moves and one array copy is necessary) or when the gap is filled up and\n+ * the buffer has to be enlarged.\n+ */\n public class GapContent\n   implements AbstractDocument.Content, Serializable\n {\n   private static final long serialVersionUID = 8374645204155842629L;\n     \n   StringBuffer buf = new StringBuffer();\n \n+  /**\n+   * Creates a new GapContent object.\n+   */\n   public GapContent()\n   {\n     this(10);\n   }\n \n+  /**\n+   * Creates a new GapContent object with a specified initial size.\n+   *\n+   * @param size the initial size of the buffer\n+   */\n   public GapContent(int size)\n   {\n     buf.append(\"\\n\");\n   }\n \n+  /**\n+   * Creates and returns a mark at the specified position.\n+   *\n+   * @param offset the position at which to create the mark\n+   *\n+   * @return the create Position object for the mark\n+   *\n+   * @throws BadLocationException if the offset is not a valid position in\n+   *         the buffer\n+   */\n   public Position createPosition(final int offset) throws BadLocationException\n   {\n     return new Position()\n@@ -74,30 +102,78 @@ public int getOffset()\n       };\n   }\n \n+  /**\n+   * Returns the length of the content.\n+   *\n+   * @return the length of the content\n+   */\n   public int length()\n   {\n     return buf.length();\n   }\n \n+  /**\n+   * Inserts a string at the specified position.\n+   *\n+   * @param where the position where the string is inserted\n+   * @param str the string that is to be inserted\n+   *\n+   * @return an UndoableEdit object (currently not supported, so\n+   *         <code>null</code> is returned)\n+   *\n+   * @throws BadLocationException if <code>where</code> is not a valid location\n+   *         in the buffer\n+   */\n   public UndoableEdit insertString(int where, String str)\n     throws BadLocationException\n   {\n     buf.insert(where, str);\n     return null;\n   }\n \n+  /**\n+   * Removes a piece of content at th specified position.\n+   *\n+   * @param where the position where the content is to be removed\n+   * @param nitems number of characters to be removed\n+   *\n+   * @return an UndoableEdit object (currently not supported, so\n+   *         <code>null</code> is returned)\n+   *\n+   * @throws BadLocationException if <code>where</code> is not a valid location\n+   *         in the buffer\n+   */\n   public UndoableEdit remove(int where, int nitems)\n     throws BadLocationException\n   {\n     buf.delete(where, where + nitems);\n     return null;\n   }\n \n+  /**\n+   * Returns a piece of content as String.\n+   *\n+   * @param where the start location of the fragment\n+   * @param len the length of the fragment\n+   *\n+   * @throws BadLocationException if <code>where</code> or\n+   *         <code>where + len</code> are no valid locations in the buffer\n+   */\n   public String getString(int where, int len) throws BadLocationException\n   {\n     return buf.substring(where, where+len);\n   }\n \n+  /**\n+   * Fetches a piece of content and stores it in a {@link Segment} object.\n+   *\n+   * @param where the start location of the fragment\n+   * @param len the length of the fragment\n+   * @param txt the Segment object to store the fragment in\n+   *\n+   * @throws BadLocationException if <code>where</code> or\n+   *         <code>where + len</code> are no valid locations in the buffer\n+   */\n   public void getChars(int where, int len, Segment txt)\n     throws BadLocationException\n   {"}, {"sha": "e9019b1a929514cc77e00bfca9d35163f260813f", "filename": "libjava/javax/swing/text/StyleConstants.java", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Ftext%2FStyleConstants.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Ftext%2FStyleConstants.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2FStyleConstants.java?ref=8efae6bbfa04f662589bbfc64dbbe68935f973d2", "patch": "@@ -1,5 +1,5 @@\n /* StyleConstants.java --\n-   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -83,8 +83,10 @@\n   public static final Object ResolveAttribute = new StyleConstants(\"resolver\");\n \n   String keyname;\n-  \n-  private StyleConstants(String k) \n+\n+  // Package-private to avoid accessor constructor for use by\n+  // subclasses.\n+  StyleConstants(String k) \n   {\n     keyname = k;\n   }"}, {"sha": "77cc0dd5d43806da7fcd279c24b1870ecd177e3d", "filename": "libjava/javax/swing/tree/DefaultTreeSelectionModel.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Ftree%2FDefaultTreeSelectionModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efae6bbfa04f662589bbfc64dbbe68935f973d2/libjava%2Fjavax%2Fswing%2Ftree%2FDefaultTreeSelectionModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftree%2FDefaultTreeSelectionModel.java?ref=8efae6bbfa04f662589bbfc64dbbe68935f973d2", "patch": "@@ -117,6 +117,7 @@\n   public DefaultTreeSelectionModel()\n   {\n     setSelectionMode(DISCONTIGUOUS_TREE_SELECTION);\n+    listenerList = new EventListenerList();\n   }\n \n   /**\n@@ -230,9 +231,9 @@ public int getSelectionMode()\n    *\n    * @param path the path to set as selection\n    */\n-  public void setSelectionPath(TreePath value0)\n+  public void setSelectionPath(TreePath path)\n   {\n-    // TODO\n+    selection = new TreePath[] { path };\n   }\n \n   /**"}]}