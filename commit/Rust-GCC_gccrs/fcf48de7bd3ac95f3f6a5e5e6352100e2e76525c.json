{"sha": "fcf48de7bd3ac95f3f6a5e5e6352100e2e76525c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNmNDhkZTdiZDNhYzk1ZjNmNmE1ZTVlNjM1MjEwMGUyZTc2NTI1Yw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@airs.com", "date": "2005-05-17T12:50:32Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2005-05-17T12:50:32Z"}, "message": "read-rtl.c (struct macro_traverse_data): Add unknown_mode_attr field.\n\n\t* read-rtl.c (struct macro_traverse_data): Add unknown_mode_attr\n\tfield.\n\t(mode_attr_index): Remove check for defined attribute.  Remove\n\tinfile parameter.  Change all callers.\n\t(apply_mode_maps): Add unknown parameter.  Change caller.  Always\n\treturn after finding attribute.\n\t(apply_macro_to_rtx): Add unknown_mode_attr parameter.  Change\n\tcallers.\n\t(apply_macro_traverse): Set mtd->unknown_mode_attr.\n\t(read_rtx): Use mtd.unknown_mode_attr to check for an undefined\n\tattribute used for a mode.\n\nFrom-SVN: r99829", "tree": {"sha": "73bc75bf40118c932a0fb3ae32d92888355b743e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73bc75bf40118c932a0fb3ae32d92888355b743e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcf48de7bd3ac95f3f6a5e5e6352100e2e76525c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcf48de7bd3ac95f3f6a5e5e6352100e2e76525c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcf48de7bd3ac95f3f6a5e5e6352100e2e76525c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcf48de7bd3ac95f3f6a5e5e6352100e2e76525c/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c2a63a3ed84d53381fdfb8fe8b9a5cec2ff9bcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c2a63a3ed84d53381fdfb8fe8b9a5cec2ff9bcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c2a63a3ed84d53381fdfb8fe8b9a5cec2ff9bcd"}], "stats": {"total": 86, "additions": 56, "deletions": 30}, "files": [{"sha": "57444760cb9a860ce99153d0b9956e4ad17b67ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcf48de7bd3ac95f3f6a5e5e6352100e2e76525c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcf48de7bd3ac95f3f6a5e5e6352100e2e76525c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fcf48de7bd3ac95f3f6a5e5e6352100e2e76525c", "patch": "@@ -1,3 +1,17 @@\n+2005-05-17  Ian Lance Taylor  <ian@airs.com>\n+\n+\t* read-rtl.c (struct macro_traverse_data): Add unknown_mode_attr\n+\tfield.\n+\t(mode_attr_index): Remove check for defined attribute.  Remove\n+\tinfile parameter.  Change all callers.\n+\t(apply_mode_maps): Add unknown parameter.  Change caller.  Always\n+\treturn after finding attribute.\n+\t(apply_macro_to_rtx): Add unknown_mode_attr parameter.  Change\n+\tcallers.\n+\t(apply_macro_traverse): Set mtd->unknown_mode_attr.\n+\t(read_rtx): Use mtd.unknown_mode_attr to check for an undefined\n+\tattribute used for a mode.\n+\n 2005-05-17  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* tree-ssa-math-opts.c: New file."}, {"sha": "4fbfda0f1c37828b29c82939c7d2e6c549521112", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 42, "deletions": 30, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcf48de7bd3ac95f3f6a5e5e6352100e2e76525c/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcf48de7bd3ac95f3f6a5e5e6352100e2e76525c/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=fcf48de7bd3ac95f3f6a5e5e6352100e2e76525c", "patch": "@@ -96,6 +96,8 @@ struct macro_traverse_data {\n   struct map_value *mode_maps;\n   /* Input file.  */\n   FILE *infile;\n+  /* The last unknown attribute used as a mode.  */\n+  const char *unknown_mode_attr;\n };\n \n /* If CODE is the number of a code macro, return a real rtx code that\n@@ -114,7 +116,7 @@ static bool uses_code_macro_p (rtx, int);\n static void apply_code_macro (rtx, int);\n static const char *apply_macro_to_string (const char *, struct mapping *, int);\n static rtx apply_macro_to_rtx (rtx, struct mapping *, int,\n-\t\t\t       struct map_value *, FILE *);\n+\t\t\t       struct map_value *, FILE *, const char **);\n static bool uses_macro_p (rtx, struct mapping *);\n static const char *add_condition_to_string (const char *, const char *);\n static void add_condition_to_rtx (rtx, const char *);\n@@ -311,31 +313,16 @@ map_attr_string (const char *p, struct mapping *macro, int value)\n    apply_macro_to_rtx.  */\n \n static unsigned int\n-mode_attr_index (struct map_value **mode_maps, const char *string,\n-\t\t FILE *infile)\n+mode_attr_index (struct map_value **mode_maps, const char *string)\n {\n   char *p;\n-  char *attr;\n   struct map_value *mv;\n \n   /* Copy the attribute string into permanent storage, without the\n      angle brackets around it.  */\n   obstack_grow (&string_obstack, string + 1, strlen (string) - 2);\n   p = (char *) obstack_finish (&string_obstack);\n \n-  /* Make sure the attribute is defined as either a code attribute or\n-     a mode attribute.  */\n-  attr = strchr (p, ':');\n-  if (attr == 0)\n-    attr = p;\n-  else\n-    ++attr;\n-\n-  if (!htab_find (modes.attrs, &attr) && !htab_find (codes.attrs, &attr))\n-    fatal_with_file_and_line (infile,\n-\t\t\t      \"undefined attribute '%s' used for mode\",\n-\t\t\t      p);\n-\n   mv = XNEW (struct map_value);\n   mv->number = *mode_maps == 0 ? 0 : (*mode_maps)->number + 1;\n   mv->string = p;\n@@ -348,11 +335,16 @@ mode_attr_index (struct map_value **mode_maps, const char *string,\n   return MAX_MACHINE_MODE + htab_elements (modes.macros) + mv->number;\n }\n \n-/* Apply MODE_MAPS to the top level of X.  */\n+/* Apply MODE_MAPS to the top level of X, expanding cases where an\n+   attribute is used for a mode.  MACRO is the current macro we are\n+   expanding, and VALUE is the value to which we are expanding it.\n+   INFILE is used for error messages.  This sets *UNKNOWN to true if\n+   we find a mode attribute which has not yet been defined, and does\n+   not change it otherwise.  */\n \n static void\n apply_mode_maps (rtx x, struct map_value *mode_maps, struct mapping *macro,\n-\t\t int value, FILE *infile)\n+\t\t int value, FILE *infile, const char **unknown)\n {\n   unsigned int offset;\n   int indx;\n@@ -371,10 +363,10 @@ apply_mode_maps (rtx x, struct map_value *mode_maps, struct mapping *macro,\n \n \t  v = map_attr_string (pm->string, macro, value);\n \t  if (v)\n-\t    {\n-\t      PUT_MODE (x, find_mode (v->string, infile));\n-\t      return;\n-\t    }\n+\t    PUT_MODE (x, find_mode (v->string, infile));\n+\t  else\n+\t    *unknown = pm->string;\n+\t  return;\n \t}\n     }\n }\n@@ -420,11 +412,15 @@ apply_macro_to_string (const char *string, struct mapping *macro, int value)\n }\n \n /* Return a copy of ORIGINAL in which all uses of MACRO have been\n-   replaced by VALUE.  */\n+   replaced by VALUE.  MODE_MAPS holds information about attribute\n+   strings used for modes.  INFILE is used for error messages.  This\n+   sets *UNKNOWN_MODE_ATTR to the value of an unknown mode attribute,\n+   and does not change it otherwise.  */\n \n static rtx\n apply_macro_to_rtx (rtx original, struct mapping *macro, int value,\n-\t\t    struct map_value *mode_maps, FILE *infile)\n+\t\t    struct map_value *mode_maps, FILE *infile,\n+\t\t    const char **unknown_mode_attr)\n {\n   struct macro_group *group;\n   const char *format_ptr;\n@@ -446,7 +442,7 @@ apply_macro_to_rtx (rtx original, struct mapping *macro, int value,\n     group->apply_macro (x, value);\n \n   if (mode_maps)\n-    apply_mode_maps (x, mode_maps, macro, value, infile);\n+    apply_mode_maps (x, mode_maps, macro, value, infile, unknown_mode_attr);\n \n   /* Change each string and recursively change each rtx.  */\n   format_ptr = GET_RTX_FORMAT (bellwether_code);\n@@ -464,7 +460,8 @@ apply_macro_to_rtx (rtx original, struct mapping *macro, int value,\n \n       case 'e':\n \tXEXP (x, i) = apply_macro_to_rtx (XEXP (x, i), macro, value,\n-\t\t\t\t\t  mode_maps, infile);\n+\t\t\t\t\t  mode_maps, infile,\n+\t\t\t\t\t  unknown_mode_attr);\n \tbreak;\n \n       case 'V':\n@@ -475,7 +472,8 @@ apply_macro_to_rtx (rtx original, struct mapping *macro, int value,\n \t    for (j = 0; j < XVECLEN (x, i); j++)\n \t      XVECEXP (x, i, j) = apply_macro_to_rtx (XVECEXP (original, i, j),\n \t\t\t\t\t\t      macro, value, mode_maps,\n-\t\t\t\t\t\t      infile);\n+\t\t\t\t\t\t      infile,\n+\t\t\t\t\t\t      unknown_mode_attr);\n \t  }\n \tbreak;\n \n@@ -581,11 +579,20 @@ apply_macro_traverse (void **slot, void *data)\n   for (elem = mtd->queue; elem != 0; elem = XEXP (elem, 1))\n     if (uses_macro_p (XEXP (elem, 0), macro))\n       {\n+\t/* For each macro we expand, we set UNKNOWN_MODE_ATTR to NULL.\n+\t   If apply_macro_rtx finds an unknown attribute for a mode,\n+\t   it will set it to the attribute.  We want to know whether\n+\t   the attribute is unknown after we have expanded all\n+\t   possible macros, so setting it to NULL here gives us the\n+\t   right result when the hash table traversal is complete.  */\n+\tmtd->unknown_mode_attr = NULL;\n+\n \toriginal = XEXP (elem, 0);\n \tfor (v = macro->values; v != 0; v = v->next)\n \t  {\n \t    x = apply_macro_to_rtx (original, macro, v->number,\n-\t\t\t\t    mtd->mode_maps, mtd->infile);\n+\t\t\t\t    mtd->mode_maps, mtd->infile,\n+\t\t\t\t    &mtd->unknown_mode_attr);\n \t    add_condition_to_rtx (x, v->string);\n \t    if (v != macro->values)\n \t      {\n@@ -1362,8 +1369,13 @@ read_rtx (FILE *infile, rtx *x, int *lineno)\n       mtd.queue = queue_next;\n       mtd.mode_maps = mode_maps;\n       mtd.infile = infile;\n+      mtd.unknown_mode_attr = mode_maps ? mode_maps->string : NULL;\n       htab_traverse (modes.macros, apply_macro_traverse, &mtd);\n       htab_traverse (codes.macros, apply_macro_traverse, &mtd);\n+      if (mtd.unknown_mode_attr)\n+\tfatal_with_file_and_line (infile,\n+\t\t\t\t  \"undefined attribute '%s' used for mode\",\n+\t\t\t\t  mtd.unknown_mode_attr);\n     }\n \n   *x = XEXP (queue_next, 0);\n@@ -1457,7 +1469,7 @@ read_rtx_1 (FILE *infile, struct map_value **mode_maps)\n       if (tmp_char[0] != '<' || tmp_char[strlen (tmp_char) - 1] != '>')\n \tmode = find_macro (&modes, tmp_char, infile);\n       else\n-\tmode = mode_attr_index (mode_maps, tmp_char, infile);\n+\tmode = mode_attr_index (mode_maps, tmp_char);\n       PUT_MODE (return_rtx, mode);\n       if (GET_MODE (return_rtx) != mode)\n \tfatal_with_file_and_line (infile, \"mode too large\");"}]}