{"sha": "38d2336a2356074209d055098c7646cc30eb43df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhkMjMzNmEyMzU2MDc0MjA5ZDA1NTA5OGM3NjQ2Y2MzMGViNDNkZg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-04-22T16:01:29Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-04-22T16:01:29Z"}, "message": "Makefile.in: Update dependencies.\n\n2009-04-22  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\t* Makefile.in: Update dependencies.\n\t* errors.c (warning): Remove unused parameter 'opt'. Returns\n\t'void'.\n\t* errors.h: Remove bogus comment about compatibility.\n\t(warning): Update declaration.\n\t* genautomata.c: Update all calls to warning.\n\t* gimple.c: Do not include errors.h. Include toplev.h.\n\t* tree-ssa-structalias.c: Do not include errors.h.\n\t* omega.c: Likewise.\n\t* tree-ssa-reassoc.c: Likewise.\n\t* config/spu/spu-c.c: Likewise.\n\t* config/spu/t-spu-elf: Update dependencies.\n\nFrom-SVN: r146594", "tree": {"sha": "d587aea0284879b9e223bbb698dfdcaff883189d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d587aea0284879b9e223bbb698dfdcaff883189d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38d2336a2356074209d055098c7646cc30eb43df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38d2336a2356074209d055098c7646cc30eb43df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38d2336a2356074209d055098c7646cc30eb43df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38d2336a2356074209d055098c7646cc30eb43df/comments", "author": null, "committer": null, "parents": [{"sha": "7a29c1adc71d0f5817d9f893c138a236fc615a3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a29c1adc71d0f5817d9f893c138a236fc615a3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a29c1adc71d0f5817d9f893c138a236fc615a3e"}], "stats": {"total": 75, "additions": 39, "deletions": 36}, "files": [{"sha": "4218dca0d2af57ee6ff0413de1c679babc16b9fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38d2336a2356074209d055098c7646cc30eb43df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38d2336a2356074209d055098c7646cc30eb43df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38d2336a2356074209d055098c7646cc30eb43df", "patch": "@@ -1,3 +1,18 @@\n+2009-04-22  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* Makefile.in: Update dependencies.\n+\t* errors.c (warning): Remove unused parameter 'opt'. Returns\n+\t'void'.\n+\t* errors.h: Remove bogus comment about compatibility.\n+\t(warning): Update declaration.\n+\t* genautomata.c: Update all calls to warning.\n+\t* gimple.c: Do not include errors.h. Include toplev.h.\n+\t* tree-ssa-structalias.c: Do not include errors.h.\n+\t* omega.c: Likewise.\n+\t* tree-ssa-reassoc.c: Likewise.\n+\t* config/spu/spu-c.c: Likewise.\n+\t* config/spu/t-spu-elf: Update dependencies.\n+\n 2009-04-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/39824"}, {"sha": "743cf1043633a9bcc759eddaa6d7ec3c2f7d3d0c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38d2336a2356074209d055098c7646cc30eb43df/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38d2336a2356074209d055098c7646cc30eb43df/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=38d2336a2356074209d055098c7646cc30eb43df", "patch": "@@ -2344,8 +2344,7 @@ tree-browser.o : tree-browser.c tree-browser.def $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TREE_INLINE_H) $(DIAGNOSTIC_H) $(HASHTAB_H) \\\n    $(TM_H) coretypes.h\n omega.o : omega.c omega.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   errors.h $(GGC_H) $(TREE_H) $(DIAGNOSTIC_H) varray.h $(TREE_PASS_H) \\\n-   $(PARAMS_H)\n+   $(GGC_H) $(TREE_H) $(DIAGNOSTIC_H) varray.h $(TREE_PASS_H) $(PARAMS_H)\n tree-chrec.o: tree-chrec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(GGC_H) $(TREE_H) $(REAL_H) $(SCEV_H) $(TREE_PASS_H) $(PARAMS_H) \\\n    $(DIAGNOSTIC_H) $(CFGLOOP_H) $(TREE_FLOW_H)\n@@ -2411,7 +2410,7 @@ tree-object-size.o: tree-object-size.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(TOPLEV_H) $(DIAGNOSTIC_H) $(TREE_FLOW_H) \\\n    $(TREE_PASS_H) tree-ssa-propagate.h\n gimple.o : gimple.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n-   $(GGC_H) $(GIMPLE_H) $(GIMPLE_H) $(DIAGNOSTIC_H) gt-gimple.h \\\n+   $(GGC_H) $(GIMPLE_H) $(TOPLEV_H) $(DIAGNOSTIC_H) gt-gimple.h \\\n    $(TREE_FLOW_H) value-prof.h $(FLAGS_H)\n gimple-pretty-print.o : gimple-pretty-print.c $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(DIAGNOSTIC_H) $(REAL_H) $(HASHTAB_H) $(TREE_FLOW_H) \\\n@@ -2475,7 +2474,7 @@ passes.o : passes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    gt-passes.h $(DF_H) $(PREDICT_H)\n \n plugin.o : plugin.c $(PLUGIN_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   errors.h $(TOPLEV_H) $(TREE_H) $(TREE_PASS_H) intl.h\n+   $(TOPLEV_H) $(TREE_H) $(TREE_PASS_H) intl.h\n \n plugin-version.o : plugin-version.c $(SYSTEM_H) gcc-plugin.h configargs.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) \\\n@@ -2924,7 +2923,7 @@ ira-build.o: ira-build.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(PARAMS_H) $(DF_H) sparseset.h $(IRA_INT_H)\n ira-costs.o: ira-costs.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TARGET_H) $(RTL_H) insn-config.h $(RECOG_H) \\\n-   $(REGS_H) hard-reg-set.h $(FLAGS_H) errors.h \\\n+   $(REGS_H) hard-reg-set.h $(FLAGS_H) \\\n    $(EXPR_H) $(BASIC_BLOCK_H) $(TM_P_H) \\\n    $(IRA_INT_H)\n ira-conflicts.o: ira-conflicts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\"}, {"sha": "6e37fc532ea3429e838a542aa7cf27f667e83219", "filename": "gcc/config/spu/spu-c.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38d2336a2356074209d055098c7646cc30eb43df/gcc%2Fconfig%2Fspu%2Fspu-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38d2336a2356074209d055098c7646cc30eb43df/gcc%2Fconfig%2Fspu%2Fspu-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-c.c?ref=38d2336a2356074209d055098c7646cc30eb43df", "patch": "@@ -25,7 +25,6 @@\n #include \"function.h\"\n #include \"rtl.h\"\n #include \"expr.h\"\n-#include \"errors.h\"\n #include \"tm_p.h\"\n #include \"langhooks.h\"\n #include \"insn-config.h\""}, {"sha": "97341327501b86448f2431c2f9ea79707a0d50f3", "filename": "gcc/config/spu/t-spu-elf", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38d2336a2356074209d055098c7646cc30eb43df/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38d2336a2356074209d055098c7646cc30eb43df/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Ft-spu-elf?ref=38d2336a2356074209d055098c7646cc30eb43df", "patch": "@@ -93,6 +93,6 @@ spu-c.o: $(srcdir)/config/spu/spu-c.c \\\n     $(srcdir)/config/spu/spu-builtins.h \\\n     $(srcdir)/config/spu/spu-builtins.def \\\n     $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(CPPLIB_H) \\\n-    $(TM_P_H) c-pragma.h errors.h coretypes.h $(TM_H) insn-codes.h\n+    $(TM_P_H) c-pragma.h coretypes.h $(TM_H) insn-codes.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/config/spu/spu-c.c\n "}, {"sha": "d89e14d94d688333cba1eecb823ae81f993573f6", "filename": "gcc/errors.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38d2336a2356074209d055098c7646cc30eb43df/gcc%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38d2336a2356074209d055098c7646cc30eb43df/gcc%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ferrors.c?ref=38d2336a2356074209d055098c7646cc30eb43df", "patch": "@@ -40,8 +40,8 @@ int have_error = 0;\n \n /* Print a warning message - output produced, but there may be problems.  */\n \n-bool\n-warning (int opt ATTRIBUTE_UNUSED, const char *format, ...)\n+void\n+warning (const char *format, ...)\n {\n   va_list ap;\n \n@@ -50,7 +50,6 @@ warning (int opt ATTRIBUTE_UNUSED, const char *format, ...)\n   vfprintf (stderr, format, ap);\n   va_end (ap);\n   fputc('\\n', stderr);\n-  return true;\n }\n \n "}, {"sha": "c66054368dae1f1778b1f6a61f69ec319bcd074a", "filename": "gcc/errors.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38d2336a2356074209d055098c7646cc30eb43df/gcc%2Ferrors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38d2336a2356074209d055098c7646cc30eb43df/gcc%2Ferrors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ferrors.h?ref=38d2336a2356074209d055098c7646cc30eb43df", "patch": "@@ -29,11 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_ERRORS_H\n #define GCC_ERRORS_H\n \n-/* The first parameter is for compatibility with the non-generator\n-   version of warning().  For those, you'd pass an OPT_W* value from\n-   options.h, but in generator programs it has no effect, so it's OK\n-   to just pass zero for calls from generator-only files.  */\n-extern bool warning (int, const char *, ...) ATTRIBUTE_PRINTF_2 ATTRIBUTE_COLD;\n+extern void warning (const char *, ...) ATTRIBUTE_PRINTF_1 ATTRIBUTE_COLD;\n extern void error (const char *, ...) ATTRIBUTE_PRINTF_1 ATTRIBUTE_COLD;\n extern void fatal (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_PRINTF_1 ATTRIBUTE_COLD;\n extern void internal_error (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_PRINTF_1 ATTRIBUTE_COLD;"}, {"sha": "e78eea2c258564506a91962f8804f95bef935ac2", "filename": "gcc/genautomata.c", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38d2336a2356074209d055098c7646cc30eb43df/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38d2336a2356074209d055098c7646cc30eb43df/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=38d2336a2356074209d055098c7646cc30eb43df", "patch": "@@ -2314,8 +2314,7 @@ add_presence_absence (unit_set_el_t dest_list,\n \t\t\t  no_error_flag = 0;\n \t\t\t}\n \t\t      else\n-\t\t\twarning\n-\t\t\t  (0, \"unit `%s' excludes and requires presence of `%s'\",\n+\t\t\twarning (\"unit `%s' excludes and requires presence of `%s'\",\n \t\t\t   dst->unit_decl->name, unit->name);\n \t\t    }\n \t\t}\n@@ -2328,15 +2327,13 @@ add_presence_absence (unit_set_el_t dest_list,\n \t\t  {\n \t\t    if (!w_flag)\n \t\t      {\n-\t\t\terror\n-\t\t\t  (\"unit `%s' requires absence and presence of `%s'\",\n-\t\t\t   dst->unit_decl->name, unit->name);\n+\t\t\terror (\"unit `%s' requires absence and presence of `%s'\",\n+\t\t\t       dst->unit_decl->name, unit->name);\n \t\t\tno_error_flag = 0;\n \t\t      }\n \t\t    else\n-\t\t      warning\n-\t\t\t(0, \"unit `%s' requires absence and presence of `%s'\",\n-\t\t\t dst->unit_decl->name, unit->name);\n+\t\t      warning (\"unit `%s' requires absence and presence of `%s'\",\n+\t\t\t       dst->unit_decl->name, unit->name);\n \t\t  }\n \t    if (no_error_flag)\n \t      {\n@@ -2402,7 +2399,7 @@ insert_bypass (struct bypass_decl *bypass)\n \t\t  error (\"the same bypass `%s - %s' is already defined\",\n \t\t\t bypass->out_insn_name, bypass->in_insn_name);\n \t\telse\n-\t\t  warning (0, \"the same bypass `%s - %s' is already defined\",\n+\t\t  warning (\"the same bypass `%s - %s' is already defined\",\n \t\t\t   bypass->out_insn_name, bypass->in_insn_name);\n \t      }\n \t    else if (!w_flag)\n@@ -2411,7 +2408,7 @@ insert_bypass (struct bypass_decl *bypass)\n \t\t     bypass->bypass_guard_name);\n \t    else\n \t      warning\n-\t\t(0, \"the same bypass `%s - %s' (guard %s) is already defined\",\n+\t\t(\"the same bypass `%s - %s' (guard %s) is already defined\",\n \t\t bypass->out_insn_name, bypass->in_insn_name,\n \t\t bypass->bypass_guard_name);\n \t    return;\n@@ -2465,7 +2462,7 @@ process_decls (void)\n \t\terror (\"repeated declaration of automaton `%s'\",\n \t\t       DECL_AUTOMATON (decl)->name);\n \t      else\n-\t\twarning (0, \"repeated declaration of automaton `%s'\",\n+\t\twarning (\"repeated declaration of automaton `%s'\",\n \t\t\t DECL_AUTOMATON (decl)->name);\n \t    }\n \t}\n@@ -2664,7 +2661,7 @@ check_automaton_usage (void)\n \t  if (!w_flag)\n \t    error (\"automaton `%s' is not used\", DECL_AUTOMATON (decl)->name);\n \t  else\n-\t    warning (0, \"automaton `%s' is not used\",\n+\t    warning (\"automaton `%s' is not used\",\n \t\t     DECL_AUTOMATON (decl)->name);\n \t}\n     }\n@@ -2778,14 +2775,14 @@ check_usage (void)\n \t  if (!w_flag)\n \t    error (\"unit `%s' is not used\", DECL_UNIT (decl)->name);\n \t  else\n-\t    warning (0, \"unit `%s' is not used\", DECL_UNIT (decl)->name);\n+\t    warning (\"unit `%s' is not used\", DECL_UNIT (decl)->name);\n \t}\n       else if (decl->mode == dm_reserv && !DECL_RESERV (decl)->reserv_is_used)\n \t{\n \t  if (!w_flag)\n \t    error (\"reservation `%s' is not used\", DECL_RESERV (decl)->name);\n \t  else\n-\t    warning (0, \"reservation `%s' is not used\", DECL_RESERV (decl)->name);\n+\t    warning (\"reservation `%s' is not used\", DECL_RESERV (decl)->name);\n \t}\n     }\n }\n@@ -9234,18 +9231,17 @@ check_automata_insn_issues (void)\n \t\t\t   automaton->corresponding_automaton_decl->name,\n \t\t\t   reserv_ainsn->insn_reserv_decl->name);\n \t\t  else\n-\t\t    warning\n-\t\t      (0, \"Automaton `%s': Insn `%s' will never be issued\",\n-\t\t       automaton->corresponding_automaton_decl->name,\n-\t\t       reserv_ainsn->insn_reserv_decl->name);\n+\t\t    warning (\"Automaton `%s': Insn `%s' will never be issued\",\n+\t\t\t     automaton->corresponding_automaton_decl->name,\n+\t\t\t     reserv_ainsn->insn_reserv_decl->name);\n \t\t}\n \t      else\n \t\t{\n \t\t  if (!w_flag)\n \t\t    error (\"Insn `%s' will never be issued\",\n \t\t\t   reserv_ainsn->insn_reserv_decl->name);\n \t\t  else\n-\t\t    warning (0, \"Insn `%s' will never be issued\",\n+\t\t    warning (\"Insn `%s' will never be issued\",\n \t\t\t     reserv_ainsn->insn_reserv_decl->name);\n \t\t}\n \t  }"}, {"sha": "db7f872b5cc4cc262b7c71f2ef39d685e503c4bf", "filename": "gcc/gimple.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38d2336a2356074209d055098c7646cc30eb43df/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38d2336a2356074209d055098c7646cc30eb43df/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=38d2336a2356074209d055098c7646cc30eb43df", "patch": "@@ -25,10 +25,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"ggc.h\"\n-#include \"errors.h\"\n #include \"hard-reg-set.h\"\n #include \"basic-block.h\"\n #include \"gimple.h\"\n+#include \"toplev.h\"\n #include \"diagnostic.h\"\n #include \"tree-flow.h\"\n #include \"value-prof.h\""}, {"sha": "1a8b37f0909e9302f99afb53262e152509386696", "filename": "gcc/omega.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38d2336a2356074209d055098c7646cc30eb43df/gcc%2Fomega.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38d2336a2356074209d055098c7646cc30eb43df/gcc%2Fomega.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomega.c?ref=38d2336a2356074209d055098c7646cc30eb43df", "patch": "@@ -35,7 +35,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n-#include \"errors.h\"\n #include \"ggc.h\"\n #include \"tree.h\"\n #include \"diagnostic.h\""}]}