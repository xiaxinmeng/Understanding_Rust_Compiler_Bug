{"sha": "a055f99f15139fb20de4d19434402954a3a22651", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA1NWY5OWYxNTEzOWZiMjBkZTRkMTk0MzQ0MDI5NTRhM2EyMjY1MQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-06-20T12:47:04Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-06-20T12:47:04Z"}, "message": "i386.md (*jcc_fused_1): Handle all valid compare operators for \"test\" insn.\n\n\t* config/i386/i386.md (*jcc_fused_1): Handle all valid compare\n\toperators for \"test\" insn.  Macroize insn using SWI mode macro.\n\t(*jcc_fused_2): Ditto.\n\t(*jcc_fused_3): Macroize insn using SWI mode macro.\n\t(*jcc_fused_4): Ditto.\n\nFrom-SVN: r136988", "tree": {"sha": "edf996728615e85e9bb210c5d12f3635fda018a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edf996728615e85e9bb210c5d12f3635fda018a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a055f99f15139fb20de4d19434402954a3a22651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a055f99f15139fb20de4d19434402954a3a22651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a055f99f15139fb20de4d19434402954a3a22651", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a055f99f15139fb20de4d19434402954a3a22651/comments", "author": null, "committer": null, "parents": [{"sha": "a7849637b61378d568b5ab225daafb458df492bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7849637b61378d568b5ab225daafb458df492bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7849637b61378d568b5ab225daafb458df492bc"}], "stats": {"total": 93, "additions": 62, "deletions": 31}, "files": [{"sha": "3edbc56c8dd44babfd7de9934d338d5527c7cfe6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a055f99f15139fb20de4d19434402954a3a22651/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a055f99f15139fb20de4d19434402954a3a22651/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a055f99f15139fb20de4d19434402954a3a22651", "patch": "@@ -1,12 +1,19 @@\n+2008-06-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*jcc_fused_1): Handle all valid compare\n+\toperators for \"test\" insn.  Macroize insn using SWI mode macro.\n+\t(*jcc_fused_2): Ditto.\n+\t(*jcc_fused_3): Macroize insn using SWI mode macro.\n+\t(*jcc_fused_4): Ditto.\n+\n 2008-06-20  Bernhard Fischer  <aldot@gcc.gnu.org>\n \n-        * tree-ssa-pre.c: Fix typo in comment.\n-        (init_antic, fini_antic): Add explicit funtions for\n-        initializing and deinitializing ANTIC and AVAIL sets.\n-        (create_expression_by_pieces): Fix typo in comment.\n-        Remove redundant set of new_stuff and use NULL_TREE instead of\n-        NULL.\n-        (execute_pre): Eventually dump details about ANTIC_IN.\n+\t* tree-ssa-pre.c: Fix typo in comment.\n+\t(init_antic, fini_antic): Add explicit funtions for\n+\tinitializing and deinitializing ANTIC and AVAIL sets.\n+\t(create_expression_by_pieces): Fix typo in comment.\n+\tRemove redundant set of new_stuff and use NULL_TREE instead of NULL.\n+\t(execute_pre): Eventually dump details about ANTIC_IN.\n \n 2008-06-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n "}, {"sha": "b6b19a1a734037a622e0fc4afb839934850869e5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 48, "deletions": 24, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a055f99f15139fb20de4d19434402954a3a22651/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a055f99f15139fb20de4d19434402954a3a22651/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a055f99f15139fb20de4d19434402954a3a22651", "patch": "@@ -14038,45 +14038,69 @@\n \n (define_insn \"*jcc_fused_1\"\n   [(set (pc)\n-\t(if_then_else (match_operator 1 \"ix86_comparison_uns_operator\"\n-\t\t\t[(match_operand:SI 2 \"nonimmediate_operand\" \"r,m,r\")\n-\t\t\t (match_operand:SI 3 \"general_operand\" \"ri,r,m\")])\n+\t(if_then_else (match_operator 1 \"comparison_operator\"\n+\t\t\t[(match_operand:SWI 2 \"register_operand\" \"<r>\")\n+\t\t\t (match_operand:SWI 3 \"const0_operand\" \"n\")])\n \t (label_ref (match_operand 0 \"\" \"\"))\n \t (pc)))]\n-  \"TARGET_FUSE_CMP_AND_BRANCH && !TARGET_64BIT\n-   && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n+  \"TARGET_FUSE_CMP_AND_BRANCH && !TARGET_64BIT\"\n {\n-  if (REG_P (operands[2])\n-      && operands[3] == CONST0_RTX (GET_MODE (operands[3])))\n-    output_asm_insn (\"test{l}\\t%2, %2\", operands);\n-  else\n-    output_asm_insn (\"cmp{l}\\t{%3, %2|%2, %3}\",operands);\n-\n-  return \"%+j%E1\\t%l0\\t\" ASM_COMMENT_START \" fused\";\n+  return \"test{<imodesuffix>}\\t%2, %2\\n\\t\"\n+\t \"%+j%E1\\t%l0\\t\" ASM_COMMENT_START \" fused\";\n }\n   [(set_attr \"type\" \"multi\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*jcc_fused_2\"\n   [(set (pc)\n-\t(if_then_else (match_operator 1 \"ix86_comparison_uns_operator\"\n-\t\t\t[(match_operand:SI 2 \"nonimmediate_operand\" \"r,m,r\")\n-\t\t\t (match_operand:SI 3 \"general_operand\" \"ri,r,m\")])\n+\t(if_then_else (match_operator 1 \"comparison_operator\"\n+\t\t\t[(match_operand:SWI 2 \"register_operand\" \"<r>\")\n+\t\t\t (match_operand:SWI 3 \"const0_operand\" \"n\")])\n \t (pc)\n \t (label_ref (match_operand 0 \"\" \"\"))))]\n+  \"TARGET_FUSE_CMP_AND_BRANCH && !TARGET_64BIT\"\n+{\n+  return \"test{<imodesuffix>}\\t%2, %2\\n\\t\"\n+\t \"%+j%e1\\t%l0\\t\" ASM_COMMENT_START \" fused\";\n+}\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*jcc_fused_3\"\n+  [(set (pc)\n+\t(if_then_else\n+\t  (match_operator 1 \"ix86_comparison_uns_operator\"\n+\t    [(match_operand:SWI 2 \"nonimmediate_operand\" \"<r>,m,<r>\")\n+\t     (match_operand:SWI 3 \"<general_operand>\" \"<r><i>,<r>,m\")])\n+\t (label_ref (match_operand 0 \"\" \"\"))\n+\t (pc)))]\n   \"TARGET_FUSE_CMP_AND_BRANCH && !TARGET_64BIT\n-   && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n+   && !(MEM_P (operands[2])\n+\t&& (MEM_P (operands[3]) || CONST_INT_P (operands[3])))\"\n {\n-  if (REG_P (operands[2])\n-      && operands[3] == CONST0_RTX (GET_MODE (operands[3])))\n-    output_asm_insn (\"test{l}\\t%2, %2\", operands);\n-  else\n-    output_asm_insn (\"cmp{l}\\t{%3, %2|%2, %3}\",operands);\n+  return \"cmp{<imodesuffix>}\\t{%3, %2|%2, %3}\\n\\t\"\n+\t \"%+j%E1\\t%l0\\t\" ASM_COMMENT_START \" fused\";\n+}\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-  return \"%+j%e1\\t%l0\\t\" ASM_COMMENT_START \" fused\";\n+(define_insn \"*jcc_fused_4\"\n+  [(set (pc)\n+\t(if_then_else\n+\t  (match_operator 1 \"ix86_comparison_uns_operator\"\n+\t    [(match_operand:SWI 2 \"nonimmediate_operand\" \"<r>,m,<r>\")\n+\t     (match_operand:SWI 3 \"<general_operand>\" \"<r><i>,<r>,m\")])\n+\t (pc)\n+\t (label_ref (match_operand 0 \"\" \"\"))))]\n+  \"TARGET_FUSE_CMP_AND_BRANCH && !TARGET_64BIT\n+   && !(MEM_P (operands[2])\n+\t&& (MEM_P (operands[3]) || CONST_INT_P (operands[3])))\"\n+{\n+  return \"cmp{<imodesuffix>}\\t{%3, %2|%2, %3}\\n\\t\"\n+\t \"%+j%e1\\t%l0\\t\" ASM_COMMENT_START \" fused\";\n }\n   [(set_attr \"type\" \"multi\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n ;; In general it is not safe to assume too much about CCmode registers,\n ;; so simplify-rtx stops when it sees a second one.  Under certain"}]}