{"sha": "708c0910a8f5bf48ec9ad54456dca3fc73360631", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA4YzA5MTBhOGY1YmY0OGVjOWFkNTQ0NTZkY2EzZmM3MzM2MDYzMQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2016-03-01T09:26:20Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-03-01T09:26:20Z"}, "message": "S/390: Use define_subst for the setmem patterns.\n\nWhile trying to get rid of the Y constraint in the setmem patterns I\nnoticed that for these patterns it isn't even a problem since these\nalways only use the constraint with a Pmode match_operand.  But while\nbeing at it I've tried to fold some of the patterns a bit.\n\ngcc/ChangeLog:\n\n2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/constraints.md (\"jm8\"): New constraint.\n\t* config/s390/predicates.md (\"const_int_8bitset_operand\"): New predicate.\n\t* config/s390/s390.md (\"*setmem_long\", \"*setmem_long_and\"): Merge\n\tinto ...\n\t(\"*setmem_long<setmem_and>\"): New pattern.\n\t(\"*setmem_long_31z\", \"*setmem_long_and_31z\"): Merge\n\tinto ...\n\t(\"*setmem_long_31z<setmem_and>\"): New pattern.\n\t* config/s390/subst.md (\"setmem_31z_subst\", \"setmem_and_subst\"):\n\tNew substitution rules with the required attributes.\n\nFrom-SVN: r233848", "tree": {"sha": "283552d6e89f7c36ca91a7a959821bd47df1b32e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/283552d6e89f7c36ca91a7a959821bd47df1b32e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/708c0910a8f5bf48ec9ad54456dca3fc73360631", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/708c0910a8f5bf48ec9ad54456dca3fc73360631", "html_url": "https://github.com/Rust-GCC/gccrs/commit/708c0910a8f5bf48ec9ad54456dca3fc73360631", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/708c0910a8f5bf48ec9ad54456dca3fc73360631/comments", "author": null, "committer": null, "parents": [{"sha": "674a959cd5eac469b63f9e64ab5d11890750451f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/674a959cd5eac469b63f9e64ab5d11890750451f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/674a959cd5eac469b63f9e64ab5d11890750451f"}], "stats": {"total": 84, "additions": 51, "deletions": 33}, "files": [{"sha": "6c35f0e72628ec42965a75e7e018b37408c9b347", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/708c0910a8f5bf48ec9ad54456dca3fc73360631/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/708c0910a8f5bf48ec9ad54456dca3fc73360631/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=708c0910a8f5bf48ec9ad54456dca3fc73360631", "patch": "@@ -1,3 +1,16 @@\n+2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/constraints.md (\"jm8\"): New constraint.\n+\t* config/s390/predicates.md (\"const_int_8bitset_operand\"): New predicate.\n+\t* config/s390/s390.md (\"*setmem_long\", \"*setmem_long_and\"): Merge\n+\tinto ...\n+\t(\"*setmem_long<setmem_and>\"): New pattern.\n+\t(\"*setmem_long_31z\", \"*setmem_long_and_31z\"): Merge\n+\tinto ...\n+\t(\"*setmem_long_31z<setmem_and>\"): New pattern.\n+\t* config/s390/subst.md (\"setmem_31z_subst\", \"setmem_and_subst\"):\n+\tNew substitution rules with the required attributes.\n+\n 2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/subst.md (DSI_VI): New mode iterator."}, {"sha": "6eeaa987ca713a832ced51e8772affe82ed8c7b7", "filename": "gcc/config/s390/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/708c0910a8f5bf48ec9ad54456dca3fc73360631/gcc%2Fconfig%2Fs390%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/708c0910a8f5bf48ec9ad54456dca3fc73360631/gcc%2Fconfig%2Fs390%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fconstraints.md?ref=708c0910a8f5bf48ec9ad54456dca3fc73360631", "patch": "@@ -37,6 +37,7 @@\n ;;         jKK: constant vector with all elements having the same value and\n ;;              matching K constraint\n ;;         jm6: An integer operand with the lowest order 6 bits all ones.\n+;;         jm8: An integer operand with the lowest order 8 bits all ones.\n ;;    t -- Access registers 36 and 37.\n ;;    v -- Vector registers v0-v31.\n ;;    C -- A signed 8-bit constant (-128..127)\n@@ -420,6 +421,10 @@\n   \"@internal An integer operand with the lowest order 6 bits all ones.\"\n   (match_operand 0 \"const_int_6bitset_operand\"))\n \n+(define_constraint \"jm8\"\n+  \"@internal An integer operand with the lowest order 8 bits all ones.\"\n+  (match_operand 0 \"const_int_8bitset_operand\"))\n+\n ;;\n ;; Memory constraints follow.\n ;;"}, {"sha": "fbff24d3e559c22b7d982e7eb082c35a311a2cc6", "filename": "gcc/config/s390/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/708c0910a8f5bf48ec9ad54456dca3fc73360631/gcc%2Fconfig%2Fs390%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/708c0910a8f5bf48ec9ad54456dca3fc73360631/gcc%2Fconfig%2Fs390%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fpredicates.md?ref=708c0910a8f5bf48ec9ad54456dca3fc73360631", "patch": "@@ -119,6 +119,12 @@\n (define_predicate \"const_int_6bitset_operand\"\n  (and (match_code \"const_int\")\n       (match_test \"(INTVAL (op) & 63) == 63\")))\n+\n+; An integer operand with the lowest order 8 bits all ones.\n+(define_predicate \"const_int_8bitset_operand\"\n+ (and (match_code \"const_int\")\n+      (match_test \"(INTVAL (op) & 255) == 255\")))\n+\n (define_predicate \"nonzero_shift_count_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 1, GET_MODE_BITSIZE (mode) - 1)\")))"}, {"sha": "d085fa1fbd157a04ad134d839116d18c926ad0fd", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/708c0910a8f5bf48ec9ad54456dca3fc73360631/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/708c0910a8f5bf48ec9ad54456dca3fc73360631/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=708c0910a8f5bf48ec9ad54456dca3fc73360631", "patch": "@@ -3323,7 +3323,7 @@\n \n ; Patterns for 31 bit + Esa and 64 bit + Zarch.\n \n-(define_insn \"*setmem_long\"\n+(define_insn \"*setmem_long<setmem_and>\"\n   [(clobber (match_operand:<DBL> 0 \"register_operand\" \"=d\"))\n    (set (mem:BLK (subreg:P (match_operand:<DBL> 3 \"register_operand\" \"0\") 0))\n         (unspec:BLK [(match_operand:P 2 \"shift_count_or_setmem_operand\" \"Y\")\n@@ -3336,26 +3336,10 @@\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"vs\")])\n \n-(define_insn \"*setmem_long_and\"\n-  [(clobber (match_operand:<DBL> 0 \"register_operand\" \"=d\"))\n-   (set (mem:BLK (subreg:P (match_operand:<DBL> 3 \"register_operand\" \"0\") 0))\n-        (unspec:BLK [(and:P\n-\t\t      (match_operand:P 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t\t      (match_operand:P 4 \"const_int_operand\"             \"n\"))\n-\t\t    (subreg:P (match_dup 3) <modesize>)]\n-\t\t    UNSPEC_REPLICATE_BYTE))\n-   (use (match_operand:<DBL> 1 \"register_operand\" \"d\"))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"(TARGET_64BIT || !TARGET_ZARCH) &&\n-   (INTVAL (operands[4]) & 255) == 255\"\n-  \"mvcle\\t%0,%1,%Y2\\;jo\\t.-4\"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"vs\")])\n-\n ; Variants for 31 bit + Zarch, necessary because of the odd in-register offsets\n ; of the SImode subregs.\n \n-(define_insn \"*setmem_long_31z\"\n+(define_insn \"*setmem_long_31z<setmem_and>\"\n   [(clobber (match_operand:TI 0 \"register_operand\" \"=d\"))\n    (set (mem:BLK (subreg:SI (match_operand:TI 3 \"register_operand\" \"0\") 4))\n         (unspec:BLK [(match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n@@ -3367,21 +3351,6 @@\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"vs\")])\n \n-(define_insn \"*setmem_long_and_31z\"\n-  [(clobber (match_operand:TI 0 \"register_operand\" \"=d\"))\n-   (set (mem:BLK (subreg:SI (match_operand:TI 3 \"register_operand\" \"0\") 4))\n-        (unspec:BLK [(and:SI\n-\t\t      (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t\t      (match_operand:SI 4 \"const_int_operand\"             \"n\"))\n-\t\t    (subreg:SI (match_dup 3) 12)] UNSPEC_REPLICATE_BYTE))\n-   (use (match_operand:TI 1 \"register_operand\" \"d\"))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"(!TARGET_64BIT && TARGET_ZARCH) &&\n-   (INTVAL (operands[4]) & 255) == 255\"\n-  \"mvcle\\t%0,%1,%Y2\\;jo\\t.-4\"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"vs\")])\n-\n ;\n ; cmpmemM instruction pattern(s).\n ;"}, {"sha": "886d4201fe7bcfa464cab8afccec4f4106dfb800", "filename": "gcc/config/s390/subst.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/708c0910a8f5bf48ec9ad54456dca3fc73360631/gcc%2Fconfig%2Fs390%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/708c0910a8f5bf48ec9ad54456dca3fc73360631/gcc%2Fconfig%2Fs390%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fsubst.md?ref=708c0910a8f5bf48ec9ad54456dca3fc73360631", "patch": "@@ -120,3 +120,28 @@\n    (clobber (match_scratch:DSI 0 \"=d,d\"))])\n \n (define_subst_attr \"cconly\" \"cconly_subst\" \"\" \"_cconly\")\n+\n+\n+;; setmem substitution patterns\n+\n+; Add an AND operation on the padding byte operand.  Only the lowest 8\n+; bit are used and the rest is ignored.\n+(define_subst \"setmem_and_subst\"\n+  [(clobber (match_operand:TDI                  0 \"register_operand\" \"\"))\n+   (set (mem:BLK (subreg:DSI (match_operand:TDI 1 \"register_operand\" \"\") 0))\n+        (unspec:BLK [(match_operand:DSI         2 \"shift_count_or_setmem_operand\" \"\")\n+\t\t     (match_operand:DSI         3 \"register_operand\" \"\")]\n+\t\t     UNSPEC_REPLICATE_BYTE))\n+   (use (match_operand:TDI                      4 \"register_operand\" \"\"))\n+   (clobber (reg:CC CC_REGNUM))]\n+\"\"\n+  [(clobber (match_dup 0))\n+   (set (mem:BLK (subreg:DSI (match_dup 1) 0))\n+\t(unspec:BLK [(and:DSI (match_dup 2)\n+\t\t\t      (match_operand:DSI 5 \"const_int_8bitset_operand\" \"jm8\"))\n+\t\t     (match_dup 3)]\n+\t\t    UNSPEC_REPLICATE_BYTE))\n+   (use (match_dup 4))\n+   (clobber (reg:CC CC_REGNUM))])\n+\n+(define_subst_attr \"setmem_and\"      \"setmem_and_subst\" \"\" \"_and\")"}]}