{"sha": "6c6dd4bd12c4b6a99bce85f9873d95c0d5859522", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM2ZGQ0YmQxMmM0YjZhOTliY2U4NWY5ODczZDk1YzBkNTg1OTUyMg==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2004-07-13T17:22:41Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-07-13T17:22:41Z"}, "message": "s390.c (s390_gimplify_va_arg): Use size_int instead of build_int_2.\n\n\t* config/s390/s390.c (s390_gimplify_va_arg): Use size_int instead\n\tof build_int_2.  Convert both operands of PLUS_EXPR and MULT_EXPR\n\tto the same type.\n\nFrom-SVN: r84632", "tree": {"sha": "26701e8a793d3508e143d9b0f7b2852fb80e7e71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26701e8a793d3508e143d9b0f7b2852fb80e7e71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c6dd4bd12c4b6a99bce85f9873d95c0d5859522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6dd4bd12c4b6a99bce85f9873d95c0d5859522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c6dd4bd12c4b6a99bce85f9873d95c0d5859522", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6dd4bd12c4b6a99bce85f9873d95c0d5859522/comments", "author": null, "committer": null, "parents": [{"sha": "27605cbe23b16fc978ec153a8cfd9f414b005ffd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27605cbe23b16fc978ec153a8cfd9f414b005ffd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27605cbe23b16fc978ec153a8cfd9f414b005ffd"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "ca219cb4234ef02ec3613371814eb8429b7d9041", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6dd4bd12c4b6a99bce85f9873d95c0d5859522/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6dd4bd12c4b6a99bce85f9873d95c0d5859522/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c6dd4bd12c4b6a99bce85f9873d95c0d5859522", "patch": "@@ -1,3 +1,9 @@\n+2004-07-13  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_gimplify_va_arg): Use size_int instead\n+\tof build_int_2.  Convert both operands of PLUS_EXPR and MULT_EXPR\n+\tto the same type.\n+\n 2004-07-13  Per Bothner  <per@bothner.com>\n \n \t* collect2.c (main):  Handle --no-demangle and --demangle flags."}, {"sha": "58424a4131543535514b8869c364043b3e3222ba", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c6dd4bd12c4b6a99bce85f9873d95c0d5859522/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c6dd4bd12c4b6a99bce85f9873d95c0d5859522/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=6c6dd4bd12c4b6a99bce85f9873d95c0d5859522", "patch": "@@ -6716,21 +6716,17 @@ s390_gimplify_va_arg (tree valist, tree type, tree *pre_p,\n   lab_over = create_artificial_label ();\n   addr = create_tmp_var (ptr_type_node, \"addr\");\n \n-  t = build_int_2 (max_reg, 0);\n-  TREE_TYPE (t) = TREE_TYPE (reg);\n+  t = fold_convert (TREE_TYPE (reg), size_int (max_reg));\n   t = build2 (GT_EXPR, boolean_type_node, reg, t);\n   u = build1 (GOTO_EXPR, void_type_node, lab_false);\n   t = build3 (COND_EXPR, void_type_node, t, u, NULL_TREE);\n   gimplify_and_add (t, pre_p);\n \n-  if (sav_ofs)\n-    t = build2 (PLUS_EXPR, ptr_type_node, sav, build_int_2 (sav_ofs, 0));\n-  else\n-    t = sav;\n-\n-  u = build2 (MULT_EXPR, long_integer_type_node,\n-\t      reg, build_int_2 (sav_scale, 0));\n-  t = build2 (PLUS_EXPR, ptr_type_node, t, u);\n+  t = build2 (PLUS_EXPR, ptr_type_node, sav, \n+\t      fold_convert (ptr_type_node, size_int (sav_ofs)));\n+  u = build2 (MULT_EXPR, TREE_TYPE (reg), reg, \n+\t      fold_convert (TREE_TYPE (reg), size_int (sav_scale)));\n+  t = build2 (PLUS_EXPR, ptr_type_node, t, fold_convert (ptr_type_node, u));\n \n   t = build2 (MODIFY_EXPR, void_type_node, addr, t);\n   gimplify_and_add (t, pre_p);\n@@ -6746,16 +6742,17 @@ s390_gimplify_va_arg (tree valist, tree type, tree *pre_p,\n \n   t = ovf;\n   if (size < UNITS_PER_WORD)\n-    t = build2 (PLUS_EXPR, TREE_TYPE (t), t, \n-\t\tbuild_int_2 (UNITS_PER_WORD - size, 0));\n+    t = build2 (PLUS_EXPR, ptr_type_node, t, \n+\t\tfold_convert (ptr_type_node, size_int (UNITS_PER_WORD - size)));\n \n   gimplify_expr (&t, pre_p, NULL, is_gimple_val, fb_rvalue);\n \n   u = build2 (MODIFY_EXPR, void_type_node, addr, t);\n   gimplify_and_add (u, pre_p);\n \n-  t = build2 (PLUS_EXPR, TREE_TYPE (t), t, build_int_2 (size, 0));\n-  t = build2 (MODIFY_EXPR, TREE_TYPE (ovf), ovf, t);\n+  t = build2 (PLUS_EXPR, ptr_type_node, t, \n+\t      fold_convert (ptr_type_node, size_int (size)));\n+  t = build2 (MODIFY_EXPR, ptr_type_node, ovf, t);\n   gimplify_and_add (t, pre_p);\n \n   t = build1 (LABEL_EXPR, void_type_node, lab_over);\n@@ -6765,7 +6762,7 @@ s390_gimplify_va_arg (tree valist, tree type, tree *pre_p,\n   /* Increment register save count.  */\n \n   u = build2 (PREINCREMENT_EXPR, TREE_TYPE (reg), reg,\n-\t      build_int_2 (n_reg, 0));\n+\t      fold_convert (TREE_TYPE (reg), size_int (n_reg)));\n   gimplify_and_add (u, pre_p);\n \n   if (indirect_p)"}]}