{"sha": "0fbefa25b3f928d97fb7fd61f1448a55e5ec612d", "node_id": "C_kwDOANBUbNoAKDBmYmVmYTI1YjNmOTI4ZDk3ZmI3ZmQ2MWYxNDQ4YTU1ZTVlYzYxMmQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-06T00:16:32Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-06T00:16:32Z"}, "message": "Daily bump.", "tree": {"sha": "cff22c560a425dada29270768508c10dacb07497", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cff22c560a425dada29270768508c10dacb07497"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fbefa25b3f928d97fb7fd61f1448a55e5ec612d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fbefa25b3f928d97fb7fd61f1448a55e5ec612d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fbefa25b3f928d97fb7fd61f1448a55e5ec612d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fbefa25b3f928d97fb7fd61f1448a55e5ec612d/comments", "author": null, "committer": null, "parents": [{"sha": "4ec62dbafe0cb3b79cc635dfb964ef6a7ccc2d40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ec62dbafe0cb3b79cc635dfb964ef6a7ccc2d40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ec62dbafe0cb3b79cc635dfb964ef6a7ccc2d40"}], "stats": {"total": 642, "additions": 641, "deletions": 1}, "files": [{"sha": "367fb60c1a25770d88a0e9beb87c2e25945ce167", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fbefa25b3f928d97fb7fd61f1448a55e5ec612d/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fbefa25b3f928d97fb7fd61f1448a55e5ec612d/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=0fbefa25b3f928d97fb7fd61f1448a55e5ec612d", "patch": "@@ -1,3 +1,7 @@\n+2022-01-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* MAINTAINERS: Add DCO entry.  Sort that list.\n+\n 2022-01-04  Gaius Mulley  <gaiusmod2@gmail.com>\n \n \t* MAINTAINERS: Change of email address in both DCO and"}, {"sha": "b9d9521b544a2cf55078db1ea2cfe64099169e1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fbefa25b3f928d97fb7fd61f1448a55e5ec612d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fbefa25b3f928d97fb7fd61f1448a55e5ec612d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fbefa25b3f928d97fb7fd61f1448a55e5ec612d", "patch": "@@ -1,3 +1,86 @@\n+2022-01-05  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR target/103622\n+\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n+\tSkip over instances with undefined function types.\n+\n+2022-01-05  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/103910\n+\t* config/i386/i386.h (x86_mfence): Mark with GTY.\n+\n+2022-01-05  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/103861\n+\t* config/i386/mmx.md (VI_16_32): New mode iterator.\n+\t(VI1_16_32): Ditto.\n+\t(mmxvecsize): Handle V2QI mode.\n+\t(<smaxmin:code><mode>3): Rename from <smaxmin:code>v4qi3.\n+\tUse VI1_16_32 mode iterator.\n+\t(<umaxmin:code><mode>3): Rename from <umaxmin:code>v4qi3.\n+\tUse VI1_16_32 mode iterator.\n+\t(abs<mode>2): Use VI_16_32 mode iterator.\n+\t(uavgv2qi3_ceil): New insn pattern.\n+\n+2022-01-05  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gimple-ssa-warn-access.cc (pass_waccess::maybe_warn_memmodel): Use\n+\t%qs to avoid -Wformat-diag.\n+\n+2022-01-05  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/103915\n+\t* config/i386/mmx.md (one_cmplv2qi2): Change\n+\talternatives 1,2 type from sselog to sselog1.\n+\n+2022-01-05  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/103905\n+\t* config/i386/i386-expand.c (expand_vec_perm_pshufb): Fix number of\n+\tnarrow mode remapped elements for !one_operand_p case.\n+\n+2022-01-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103816\n+\t* tree-vect-data-refs.c (vect_analyze_group_access_1): Also\n+\tcheck DR_GROUP_GAP compute for overflow and representability.\n+\n+2022-01-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/103691\n+\t* gimple-fold.c (fold_stmt_1): Don't call maybe_fold_reference\n+\tfor DEBUG stmts with ADDR_EXPR gimple_debug_bind_get_value,\n+\tit can do unwanted rhs folding like &a[0] into &2.0 etc.\n+\n+2022-01-05  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR ipa/102059\n+\t* config/rs6000/rs6000.c (TARGET_NEED_IPA_FN_TARGET_INFO): New macro.\n+\t(TARGET_UPDATE_IPA_FN_TARGET_INFO): Likewise.\n+\t(rs6000_need_ipa_fn_target_info): New function.\n+\t(rs6000_update_ipa_fn_target_info): Likewise.\n+\t(rs6000_can_inline_p): Adjust for ipa function summary target info.\n+\t* config/rs6000/rs6000.h (RS6000_FN_TARGET_INFO_HTM): New macro.\n+\t* ipa-fnsummary.c (ipa_dump_fn_summary): Adjust for ipa function\n+\tsummary target info.\n+\t(analyze_function_body): Adjust for ipa function summary target info\n+\tand call hook rs6000_need_ipa_fn_target_info and\n+\trs6000_update_ipa_fn_target_info.\n+\t(ipa_merge_fn_summary_after_inlining): Adjust for ipa function summary\n+\ttarget info.\n+\t(inline_read_section): Likewise.\n+\t(ipa_fn_summary_write): Likewise.\n+\t* ipa-fnsummary.h (ipa_fn_summary::target_info): New member.\n+\t* doc/tm.texi: Regenerate.\n+\t* doc/tm.texi.in (TARGET_UPDATE_IPA_FN_TARGET_INFO): Document new hook.\n+\t(TARGET_NEED_IPA_FN_TARGET_INFO): Likewise.\n+\t* target.def (update_ipa_fn_target_info): New hook.\n+\t(need_ipa_fn_target_info): Likewise.\n+\t* targhooks.c (default_need_ipa_fn_target_info): New function.\n+\t(default_update_ipa_fn_target_info): Likewise.\n+\t* targhooks.h (default_update_ipa_fn_target_info): New declare.\n+\t(default_need_ipa_fn_target_info): Likewise.\n+\n 2022-01-04  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/99612"}, {"sha": "a8c88384614fa38ad188bd4d1f77e7220b18687a", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fbefa25b3f928d97fb7fd61f1448a55e5ec612d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fbefa25b3f928d97fb7fd61f1448a55e5ec612d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=0fbefa25b3f928d97fb7fd61f1448a55e5ec612d", "patch": "@@ -1 +1 @@\n-20220105\n+20220106"}, {"sha": "f45cc81f41dc8506dfb5722f177d785e9e54b266", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 338, "deletions": 0, "changes": 338, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fbefa25b3f928d97fb7fd61f1448a55e5ec612d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fbefa25b3f928d97fb7fd61f1448a55e5ec612d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0fbefa25b3f928d97fb7fd61f1448a55e5ec612d", "patch": "@@ -1,3 +1,341 @@\n+2022-01-05  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch5.adb (Finish_Binding_Object_Declaration): Fix a bug\n+\tthat was introduced in the previous commit.  The previous\n+\tversion initialized a Boolean constant Declare_Copy before the\n+\tvariable Decl had been initialized properly.\n+\n+2022-01-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Adjust_External_Name_Case): Use membership test.\n+\n+2022-01-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb (Make_Controlling_Function_Wrappers): For\n+\tGNATprove build the wrapper as an expression function.\n+\n+2022-01-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.ads (Make_Controlling_Function_Wrappers): Move\n+\tdeclaration from body to spec, so it can be called by\n+\tSPARK-specific expansion.\n+\t* exp_ch3.adb (Make_Controlling_Function_Wrappers): Likewise.\n+\t* exp_spark.adb (SPARK_Freeze_Type): Enable expansion of\n+\twrappers for function with controlling result types.\n+\n+2022-01-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_dbug.adb, sem_dim.adb: Replace Add_Str_To_Name_Buffer with\n+\tAdd_Char_To_Name_Buffer.\n+\n+2022-01-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* gnatls.adb (Gnatls): Use Name_Find function.\n+\t* targparm.adb (Get_Target_Parameters): Likewise.\n+\n+2022-01-05  Bob Duff  <duff@adacore.com>\n+\n+\t* repinfo.adb (List_Entities): The code was assuming that if we\n+\tencounter a package in the current scope, then it must be\n+\ta (physically) nested package.  That was wrong, because it could\n+\tbe a child package.  Avoid recursing into child packages; they\n+\thave not been annotated with representation information, and\n+\t-gnatR2 queries that information.\n+\n+2022-01-05  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* libgnat/s-sopco3.ads, libgnat/s-sopco3.adb: Remove.\n+\t* libgnat/s-sopco4.ads, libgnat/s-sopco4.adb: Remove.\n+\t* libgnat/s-sopco5.ads, libgnat/s-sopco5.adb: Remove.\n+\t* libgnat/s-strops.ads, libgnat/s-strops.adb: Remove.\n+\t* Makefile.rtl (ADA_EXCLUDE_SRCS): Remove occurences of removed\n+\tunits.\n+\t* gcc-interface/Make-lang.in (ada/sdefault.o): Remove\n+\tdependencies on removed units.\n+\t(GNATBIND_OBJS): Remove occurences of removed units.\n+\n+2022-01-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Dcheck_Function): Remove extra whitespace.\n+\t* libgnarl/s-taskin.adb (Initialize_ATCB): Likewise.\n+\n+2022-01-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb (Build_Array_VS_Func): Remove explicit \"IN\" in\n+\tspec of the generated array validation function; it was\n+\tredundant, just like it would be in a user-written code.\n+\n+2022-01-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_Ne): Fix whitespace.\n+\t* sem_dim.adb (Expand_Put_Call_With_Symbol): Likewise.\n+\t(Reduce): Likewise.\n+\n+2022-01-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_aggr.adb (Two_Pass_Aggregate_Expansion): Fix whitespace.\n+\t* libgnat/a-cofuve.ads (Add): Likewise.\n+\t* sem_ch3.adb (Build_Access_Subprogram_Wrapper): Likewise.\n+\n+2022-01-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb (Make_Eq_Body, Make_Neq_Body,\n+\tMake_Predefined_Primitive_Eq_Spec,\n+\tMake_Predefined_Primitive_Specs): Fix whitespace.\n+\n+2022-01-05  Etienne Servais  <servais@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Component_Declaration): Rework condition\n+\tto build subtypes.\n+\t(Analyze_Object_Declaration): Likewise.\n+\t(Should_Build_Subtype): New.\n+\n+2022-01-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-arit128.adb: Mark in SPARK.\n+\t* libgnat/s-arit128.ads: Add functional contracts.\n+\n+2022-01-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (String_From_Numeric_Literal): Simplify using\n+\tmembership tests and ranges; fix whitespace.\n+\n+2022-01-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-expint.ads: Mark in SPARK. Adapt to change to\n+\tpackage.\n+\t* libgnat/s-explli.ads: Likewise.\n+\t* libgnat/s-expllli.ads: Likewise.\n+\t* libgnat/s-expont.adb: Add lemmas and ghost code.\n+\t* libgnat/s-expont.ads: Add functional contract.\n+\n+2022-01-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_disp.adb (Gen_Parameters_Profile): Remove redundant guard.\n+\n+2022-01-05  Claire Dross  <dross@adacore.com>\n+\n+\t* libgnat/s-valuti.ads (Starts_As_Exponent_Format_Ghost): Ghost\n+\tfunction to determine if a string is recognized as something\n+\twhich might be an exponent.\n+\t(Is_Opt_Exponent_Format_Ghost): Ghost function to determine if a\n+\tstring has the correct format for an optional exponent.\n+\t(Scan_Exponent): Use ghost functions to factorize contracts.\n+\n+2022-01-05  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_util.ads (Get_Current_Value_Condition): Belt: Add a\n+\tpostcondition that Val /= Var.\n+\t* sem_util.adb (Known_Null): Suspenders: Raise Program_Error if\n+\tGet_Current_Value_Condition returned the same value. This will\n+\tbe enabled even without assertions, because infinite recursion\n+\tis a nuisance -- better to crash if this bug ever occurs.\n+\n+2022-01-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb (Make_Null_Procedure_Specs): Simplify by reusing\n+\tCopy_Subprogram_Spec.\n+\t* sem_util.ads (Copy_Subprogram_Spec): Add New_Sloc parameter.\n+\t* sem_util.adb (Copy_Subprogram_Spec): Pass New_Sloc to\n+\tNew_Copy_Tree.\n+\n+2022-01-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-exnint.ads: Mark in SPARK. Adapt to change to\n+\tpackage.\n+\t* libgnat/s-exnlli.ads: Likewise.\n+\t* libgnat/s-exnllli.ads: Likewise.\n+\t* libgnat/s-exponn.adb: Add lemmas and ghost code. Secial case\n+\tvalue zero as Left or Right to simplify proof.\n+\t* libgnat/s-exponn.ads: Transform the generic function into a\n+\tgeneric package with a function inside. Add a functional\n+\tcontract.\n+\n+2022-01-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch12.adb (Instantiate_Formal_Subprogram): Remove redundant\n+\tcall to Set_Defining_Unit_Name; a similar call is done few lines\n+\tbelow.\n+\n+2022-01-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb (Make_Controlling_Function_Wrappers): Create\n+\tdistinct copies of parameter lists for spec and body with\n+\tCopy_Parameter_List; cleanup.\n+\t(Make_Null_Procedure_Specs): Fix style in comments; remove a\n+\tpotentially unnecessary initialization of a local variable.\n+\n+2022-01-05  Bob Duff  <duff@adacore.com>\n+\n+\t* einfo-utils.ads, einfo-utils.adb (Renamed_Entity Alias):\n+\tChange Node_Id to Entity_Id.\n+\n+2022-01-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch12.ads (Build_Function_Wrapper, Build_Operator_Wrapper):\n+\tRemove unreferenced spec.\n+\t* sem_ch12.adb (Build_Function_Wrapper, Build_Operator_Wrapper):\n+\tRemove dead bodies.\n+\n+2022-01-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-aridou.adb: Apply replacement.\n+\n+2022-01-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-aridou.adb (Lemma_Word_Commutation): Fix for\n+\tinstances with other values of Single_Size.\n+\n+2022-01-05  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst (Compiler_Unit)\n+\t(Compiler_Unit_Warning): Remove.\n+\t* gnat-style.texi, gnat_rm.texi, gnat_ugn.texi: Regenerate.\n+\t* libgnat/g-dynhta.ads: Add comment indicating this unit is\n+\tbuilt during stage1.\n+\t* libgnat/g-dyntab.ads: Likewise.\n+\t* libgnat/g-graphs.ads: Likewise.\n+\t* libgnat/g-lists.ads: Likewise.\n+\t* libgnat/g-sets.ads: Likewise.\n+\t* libgnat/gnat.ads: Likewise.\n+\t* libgnat/s-pehage.ads: Likewise.\n+\t* libgnat/s-resfil.ads: Likewise.\n+\t* libgnat/s-rident.ads: Likewise.\n+\t* libgnat/s-utf_32.ads: Likewise.\n+\t* errout.ads: Update comment.\n+\t* opt.ads (Opt): Remove Compiler_Unit.\n+\t* par-ch5.adb (All_Pragmas): Remove call to Check_Compiler_Unit.\n+\t* sem_prag.adb (Analyze_Pragma): Likewise.\n+\t* sem_ch4.adb (Non_Static_Choice_Error, Analyze_If_Expression)\n+\t(Analyze_Set_Membership, Record_Interp): Likewise.\n+\t* sem_ch11.adb (Analyze_Raise_Expression): Likewise.\n+\t* sem_ch6.adb: Remove Restric package reference.\n+\t(Analyze_Extended_Return_Statement): Remove call to\n+\tCheck_Compiler_Unit.\n+\t* par-prag.adb (Process_Restrictions_Or_Restriction_Warnings):\n+\tRemove handling of Pragma_Compiler_Unit[_Warning}.\n+\t* restrict.adb (Check_Compiler_Unit): Remove both.\n+\t* restrict.ads: Likewise.\n+\t* snames.ads-tmpl (Pragma_Id): Remove\n+\tPragma_Compiler_Unit[_Warning].\n+\t* libgnat/a-assert.ads: Remove pragma Compiler_Unit_Warning.\n+\t* libgnat/a-chlat1.ads: Likewise.\n+\t* libgnat/a-elchha.adb: Likewise.\n+\t* libgnat/a-elchha.ads: Likewise.\n+\t* libgnat/a-ioexce.ads: Likewise.\n+\t* libgnat/a-strhas.ads: Likewise.\n+\t* libgnat/g-byorma.adb: Likewise.\n+\t* libgnat/g-byorma.ads: Likewise.\n+\t* libgnat/g-dyntab.adb: Likewise.\n+\t* libgnat/g-heasor.ads: Likewise.\n+\t* libgnat/g-hesora.adb: Likewise.\n+\t* libgnat/g-hesora.ads: Likewise.\n+\t* libgnat/g-htable.adb: Likewise.\n+\t* libgnat/g-htable.ads: Likewise.\n+\t* libgnat/g-spchge.adb: Likewise.\n+\t* libgnat/g-spchge.ads: Likewise.\n+\t* libgnat/g-speche.adb: Likewise.\n+\t* libgnat/g-speche.ads: Likewise.\n+\t* libgnat/g-table.ads: Likewise.\n+\t* libgnat/g-u3spch.adb: Likewise.\n+\t* libgnat/g-u3spch.ads: Likewise.\n+\t* libgnat/interfac.ads: Likewise.\n+\t* libgnat/s-addope.adb: Likewise.\n+\t* libgnat/s-addope.ads: Likewise.\n+\t* libgnat/s-assert.adb: Likewise.\n+\t* libgnat/s-assert.ads: Likewise.\n+\t* libgnat/s-bitops.adb: Likewise.\n+\t* libgnat/s-bitops.ads: Likewise.\n+\t* libgnat/s-carun8.adb: Likewise.\n+\t* libgnat/s-carun8.ads: Likewise.\n+\t* libgnat/s-casuti.adb: Likewise.\n+\t* libgnat/s-casuti.ads: Likewise.\n+\t* libgnat/s-conca2.adb: Likewise.\n+\t* libgnat/s-conca2.ads: Likewise.\n+\t* libgnat/s-conca3.adb: Likewise.\n+\t* libgnat/s-conca3.ads: Likewise.\n+\t* libgnat/s-conca4.adb: Likewise.\n+\t* libgnat/s-conca4.ads: Likewise.\n+\t* libgnat/s-conca5.adb: Likewise.\n+\t* libgnat/s-conca5.ads: Likewise.\n+\t* libgnat/s-conca6.adb: Likewise.\n+\t* libgnat/s-conca6.ads: Likewise.\n+\t* libgnat/s-conca7.adb: Likewise.\n+\t* libgnat/s-conca7.ads: Likewise.\n+\t* libgnat/s-conca8.adb: Likewise.\n+\t* libgnat/s-conca8.ads: Likewise.\n+\t* libgnat/s-conca9.adb: Likewise.\n+\t* libgnat/s-conca9.ads: Likewise.\n+\t* libgnat/s-crc32.adb: Likewise.\n+\t* libgnat/s-crc32.ads: Likewise.\n+\t* libgnat/s-crtl.ads: Likewise.\n+\t* libgnat/s-excdeb.adb: Likewise.\n+\t* libgnat/s-excdeb.ads: Likewise.\n+\t* libgnat/s-except.ads: Likewise.\n+\t* libgnat/s-exctab.adb: Likewise.\n+\t* libgnat/s-exctab.ads: Likewise.\n+\t* libgnat/s-finmas.ads: Likewise.\n+\t* libgnat/s-htable.adb: Likewise.\n+\t* libgnat/s-htable.ads: Likewise.\n+\t* libgnat/s-mastop.adb: Likewise.\n+\t* libgnat/s-mastop.ads: Likewise.\n+\t* libgnat/s-memory.adb: Likewise.\n+\t* libgnat/s-memory.ads: Likewise.\n+\t* libgnat/s-os_lib.ads: Likewise.\n+\t* libgnat/s-parame.adb: Likewise.\n+\t* libgnat/s-parame.ads: Likewise.\n+\t* libgnat/s-parame__posix2008.ads: Likewise.\n+\t* libgnat/s-purexc.ads: Likewise.\n+\t* libgnat/s-resfil.adb: Likewise.\n+\t* libgnat/s-restri.adb: Likewise.\n+\t* libgnat/s-restri.ads: Likewise.\n+\t* libgnat/s-secsta.adb: Likewise.\n+\t* libgnat/s-secsta.ads: Likewise.\n+\t* libgnat/s-soflin.adb: Likewise.\n+\t* libgnat/s-soflin.ads: Likewise.\n+\t* libgnat/s-sopco3.adb: Likewise.\n+\t* libgnat/s-sopco3.ads: Likewise.\n+\t* libgnat/s-sopco4.adb: Likewise.\n+\t* libgnat/s-sopco4.ads: Likewise.\n+\t* libgnat/s-sopco5.adb: Likewise.\n+\t* libgnat/s-sopco5.ads: Likewise.\n+\t* libgnat/s-spsufi.ads: Likewise.\n+\t* libgnat/s-stache.adb: Likewise.\n+\t* libgnat/s-stache.ads: Likewise.\n+\t* libgnat/s-stalib.adb: Likewise.\n+\t* libgnat/s-stalib.ads: Likewise.\n+\t* libgnat/s-stoele.adb: Likewise.\n+\t* libgnat/s-stoele.ads: Likewise.\n+\t* libgnat/s-strcom.adb: Likewise.\n+\t* libgnat/s-strcom.ads: Likewise.\n+\t* libgnat/s-strhas.adb: Likewise.\n+\t* libgnat/s-string.adb: Likewise.\n+\t* libgnat/s-string.ads: Likewise.\n+\t* libgnat/s-strops.adb: Likewise.\n+\t* libgnat/s-strops.ads: Likewise.\n+\t* libgnat/s-ststop.adb: Likewise.\n+\t* libgnat/s-ststop.ads: Likewise.\n+\t* libgnat/s-traceb.adb: Likewise.\n+\t* libgnat/s-traceb.ads: Likewise.\n+\t* libgnat/s-traent.adb: Likewise.\n+\t* libgnat/s-traent.ads: Likewise.\n+\t* libgnat/s-utf_32.adb: Likewise.\n+\t* libgnat/s-unstyp.ads: Likewise.\n+\t* libgnat/s-wchcnv.adb: Likewise.\n+\t* libgnat/s-wchcnv.ads: Likewise.\n+\t* libgnat/s-wchcon.adb: Likewise.\n+\t* libgnat/s-wchcon.ads: Likewise.\n+\t* libgnat/s-wchjis.adb: Likewise.\n+\t* libgnat/s-wchjis.ads: Likewise.\n+\n+2022-01-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* osint.adb (File_Names_Equal): Declare To_Lower locally.\n+\t* osint.ads (Null_FD): New.\n+\t* fmap.adb, sinput-l.adb, targparm.adb: Adapt to changes above.\n+\t* switch-b.adb (Scan_Debug_Switches): Use Is_Regular_File to\n+\tsimplify the bootstrap dependencies.\n+\n 2022-01-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gnat_ugn.texi: Bump @copying's copyright year."}, {"sha": "98f4d98518330ad2f78a09c3df280f22a67dc1c8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fbefa25b3f928d97fb7fd61f1448a55e5ec612d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fbefa25b3f928d97fb7fd61f1448a55e5ec612d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0fbefa25b3f928d97fb7fd61f1448a55e5ec612d", "patch": "@@ -1,3 +1,12 @@\n+2022-01-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* pt.c (instantiate_class_template_1): Process attribute((used)) set\n+\tin class's context.\n+\n+2022-01-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* init.c (build_new_1): Check complain before alignment warning.\n+\n 2022-01-04  Jason Merrill  <jason@redhat.com>\n \n \t* cp-tree.h (class releasing_vec): Add begin/end fns."}, {"sha": "f40f8a0191c6e7c9ab161d1860111cd32a2eb5b9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fbefa25b3f928d97fb7fd61f1448a55e5ec612d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fbefa25b3f928d97fb7fd61f1448a55e5ec612d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0fbefa25b3f928d97fb7fd61f1448a55e5ec612d", "patch": "@@ -1,3 +1,12 @@\n+2022-01-05  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR fortran/103258\n+\t* decl.c (gfc_match_char_spec): Suppress errors around call\n+\tto gfc_reduce_init_expr.\n+\t* error.c (gfc_query_suppress_errors): New.\n+\t* gfortran.h (gfc_query_suppress_errors): Declare.\n+\t* symbol.c (gfc_set_default_type): Check gfc_query_suppress_errors.\n+\n 2022-01-03  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR fortran/103390"}, {"sha": "a6d13d0238348b76a51ec8fdf6f7eee1f4b583d2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fbefa25b3f928d97fb7fd61f1448a55e5ec612d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fbefa25b3f928d97fb7fd61f1448a55e5ec612d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0fbefa25b3f928d97fb7fd61f1448a55e5ec612d", "patch": "@@ -1,3 +1,61 @@\n+2022-01-05  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/103861\n+\t* gcc.target/i386/pr103861-3.c: New test.\n+\t* g++.dg/vect/slp-pr98855.cc (dg-final): Check that\n+\tno vectorization using SLP was performed.\n+\n+2022-01-05  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/103915\n+\t* gcc.target/i386/pr103915.c: New test.\n+\n+2022-01-05  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/103905\n+\t* gcc.target/i386/pr103905.c: New test.\n+\n+2022-01-05  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR fortran/103258\n+\t* gfortran.dg/pr103258.f90: New.\n+\n+2022-01-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/template/attr-used.C: New.\n+\n+2022-01-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/diagnostic/recur-align.C: New.\n+\n+2022-01-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103816\n+\t* gcc.dg/torture/pr103816.c: New testcase.\n+\n+2022-01-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/103691\n+\t* gfortran.dg/pr103691.f90: New test.\n+\n+2022-01-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/103895\n+\t* gcc.target/i386/pr103895.c: Add -msse2 to dg-options.\n+\n+2022-01-05  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR ipa/102059\n+\t* gcc.dg/lto/pr102059-1_0.c: New test.\n+\t* gcc.dg/lto/pr102059-1_1.c: New test.\n+\t* gcc.dg/lto/pr102059-1_2.c: New test.\n+\t* gcc.dg/lto/pr102059-2_0.c: New test.\n+\t* gcc.dg/lto/pr102059-2_1.c: New test.\n+\t* gcc.dg/lto/pr102059-2_2.c: New test.\n+\t* gcc.target/powerpc/pr102059-1.c: New test.\n+\t* gcc.target/powerpc/pr102059-2.c: New test.\n+\t* gcc.target/powerpc/pr102059-3.c: New test.\n+\n 2022-01-04  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/99612"}, {"sha": "6a89059b12f201540af2214d5f4a424fc2946385", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fbefa25b3f928d97fb7fd61f1448a55e5ec612d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fbefa25b3f928d97fb7fd61f1448a55e5ec612d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0fbefa25b3f928d97fb7fd61f1448a55e5ec612d", "patch": "@@ -1,3 +1,142 @@\n+2022-01-05  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/68303\n+\t* include/bits/hashtable_policy.h\n+\t(_Hashtable_hash_traits<_Hash>): New.\n+\t(_Hash_code_base<>::_M_hash_code(const _Hash_node_value<>&)): New.\n+\t(_Hashtable_base<>::_M_key_equals): New.\n+\t(_Hashtable_base<>::_M_equals): Use latter.\n+\t(_Hashtable_base<>::_M_key_equals_tr): New.\n+\t(_Hashtable_base<>::_M_equals_tr): Use latter.\n+\t* include/bits/hashtable.h\n+\t(_Hashtable<>::__small_size_threshold()): New, use _Hashtable_hash_traits.\n+\t(_Hashtable<>::find): Loop through elements to look for key if size is lower\n+\tthan __small_size_threshold().\n+\t(_Hashtable<>::_M_emplace(true_type, _Args&&...)): Likewise.\n+\t(_Hashtable<>::_M_insert_unique(_Kt&&, _Args&&, const _NodeGenerator&)): Likewise.\n+\t(_Hashtable<>::_M_compute_hash_code(const_iterator, const key_type&)): New.\n+\t(_Hashtable<>::_M_emplace(const_iterator, false_type, _Args&&...)): Use latter.\n+\t(_Hashtable<>::_M_find_before_node(const key_type&)): New.\n+\t(_Hashtable<>::_M_erase(true_type, const key_type&)): Use latter.\n+\t(_Hashtable<>::_M_erase(false_type, const key_type&)): Likewise.\n+\t* src/c++11/hashtable_c++0x.cc: Include <bits/functional_hash.h>.\n+\t* testsuite/util/testsuite_performance.h\n+\t(report_performance): Use 9 width to display memory.\n+\t* testsuite/performance/23_containers/insert_erase/unordered_small_size.cc:\n+\tNew performance test case.\n+\n+2022-01-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103919\n+\t* include/bits/basic_string.h (basic_string(const T&, size_t, size_t)):\n+\tRelax constraints on string_view parameter.\n+\t* include/bits/cow_string.h (basic_string(const T&, size_t, size_t)):\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/cons/char/103919.cc: New test.\n+\n+2022-01-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.30): Export new symbol for\n+\tARM EABI.\n+\t* include/bits/c++config (_GLIBCXX23_CONSTEXPR): Define.\n+\t* include/std/version (__cpp_lib_constexpr_typeinfo): Define.\n+\t* libsupc++/tinfo.cc: Add #error to ensure non-inline definition\n+\tis emitted.\n+\t(type_info::__equal): Define alias symbol.\n+\t* libsupc++/typeinfo (type_info::before): Combine different\n+\timplementations into one.\n+\t(type_info::operator==): Likewise. Use address equality for\n+\tconstant evaluation. Call __equal for targets that require the\n+\tdefinition to be non-inline.\n+\t* testsuite/18_support/type_info/constexpr.cc: New test.\n+\n+2022-01-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++11/cxx11-ios_failure.cc (io_error_category): Define\n+\tclass and virtual functions as 'final'.\n+\t(io_category_instance): Use constinit union to make the object\n+\timmortal.\n+\t* src/c++11/future.cc (future_error_category): Define class and\n+\tvirtual functions as 'final'.\n+\t(future_category_instance): Use constinit union.\n+\n+2022-01-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* python/libstdcxx/v6/printers.py (StdErrorCodePrinter): Strip\n+\tversioned namespace from the type name that is printed.\n+\n+2022-01-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* python/libstdcxx/v6/printers.py (StdRegexStatePrinter): New\n+\tprinter for std::regex NFA states.\n+\n+2022-01-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/23_containers/forward_list/operations/1.cc: Fill in\n+\tplaceholders in comments.\n+\t* testsuite/23_containers/forward_list/operations/2.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/operations/3.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/operations/4.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/operations/5.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/operations/6.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/operations/7.cc:\n+\tLikewise.\n+\n+2022-01-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103848\n+\t* include/bits/stl_deque.h (operator-): Do not use 0 as null\n+\tpointer constant.\n+\n+2022-01-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/alloc_traits.h (allocator_traits<allocator<void>>):\n+\tUse std::_Construct for construct.\n+\n+2022-01-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103877\n+\t* doc/xml/faq.xml: Add '-x c++' to preprocessor command.\n+\t* doc/html/faq.html: Regenerate.\n+\n+2022-01-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/regex.h (__regex_algo_impl): Change __policy and\n+\t__match_mode template parameters to be function parameters.\n+\t(regex_match, regex_search): Pass policy and match mode as\n+\tfunction arguments.\n+\t* include/bits/regex.tcc (__regex_algo_impl): Change template\n+\tparameters to function parameters.\n+\t* include/bits/regex_compiler.h (_RegexTranslatorBase): Use\n+\t'if constexpr' for conditions using template parameters.\n+\t(_RegexTranslator): Likewise.\n+\t* include/bits/regex_executor.tcc (_Executor::_M_handle_accept):\n+\tLikewise.\n+\t* testsuite/util/testsuite_regex.h (regex_match_debug)\n+\t(regex_search_debug): Move template arguments to function\n+\targuments.\n+\n+2022-01-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/util/testsuite_regex.h (regex_match_debug): Compare\n+\tresults even if the match failed.\n+\n+2022-01-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/regex_compiler.tcc: Adjust all calls to\n+\t__throw_regex_error.\n+\t* include/bits/regex_error.h (__throw_regex_error): Add noreturn\n+\tattribute.\n+\t* include/bits/regex_scanner.tcc: Likewise.\n+\t* src/c++11/regex.cc (desc): New helper function.\n+\t(regex_error::regex_error(error_type)): Use desc to get a string\n+\tcorresponding to the error code.\n+\n \f\n Copyright (C) 2022 Free Software Foundation, Inc.\n "}]}