{"sha": "de8ea9631cf1709077dab89c903d713a1d5c9bd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU4ZWE5NjMxY2YxNzA5MDc3ZGFiODljOTAzZDcxM2ExZDVjOWJkNw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-26T17:38:23Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-26T17:38:23Z"}, "message": "sel-sched-ir.h: Make ilist_t work on insn_t rather than rtx\n\ngcc/\n\t* sel-sched-ir.h (ilist_t): Redefine this typedef in terms of\n\tilist_t, not _xlist_t;\n\t(ILIST_INSN): Define in terms of new union field \"insn\".\n\t(ILIST_NEXT): Define in terms of _LIST_NEXT rather than\n\t_XLIST_NEXT.\n\t(struct _list_node): Add new field \"insn\" to the union, of type\n\tinsn_t.\n\t(ilist_add): Replace macro with an inline function, requiring an\n\tinsn_t.\n\t(ilist_remove): Define this macro directly in terms of\n\t_list_remove, rather than indirectly via _xlist_remove.\n\t(ilist_clear): Likewise, in terms of _list_clear rather than\n\t_xlist_clear.\n\t(ilist_is_in_p): Replace macro with an inline function, requiring\n\tan insn_t.\n\t(_list_iter_cond_insn): New function.\n\t(ilist_iter_remove): Define this macro directly in terms of\n\t_list_iter_remove, rather than indirectly via _xlist_iter_remove.\n\t(ilist_iterator): Define directly in terms of _list_iterator\n\trather than indirectly through _xlist_iterator.\n\t(FOR_EACH_INSN): Define in terms of _list_iter_cond_insn rather\n\tthan in terms of _FOR_EACH_X.\n\t(FOR_EACH_INSN_1): Likewise.\n\nFrom-SVN: r214527", "tree": {"sha": "3cd2355108309f8f4132894e442ce97c8f9c6aa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cd2355108309f8f4132894e442ce97c8f9c6aa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de8ea9631cf1709077dab89c903d713a1d5c9bd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de8ea9631cf1709077dab89c903d713a1d5c9bd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de8ea9631cf1709077dab89c903d713a1d5c9bd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de8ea9631cf1709077dab89c903d713a1d5c9bd7/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c218f6e89d7bee930ad705642cf069262432990a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c218f6e89d7bee930ad705642cf069262432990a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c218f6e89d7bee930ad705642cf069262432990a"}], "stats": {"total": 82, "additions": 70, "deletions": 12}, "files": [{"sha": "4e0162038d97e463c7282a3d2d59ca5e2905484e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8ea9631cf1709077dab89c903d713a1d5c9bd7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8ea9631cf1709077dab89c903d713a1d5c9bd7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de8ea9631cf1709077dab89c903d713a1d5c9bd7", "patch": "@@ -1,3 +1,29 @@\n+2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* sel-sched-ir.h (ilist_t): Redefine this typedef in terms of\n+\tilist_t, not _xlist_t;\n+\t(ILIST_INSN): Define in terms of new union field \"insn\".\n+\t(ILIST_NEXT): Define in terms of _LIST_NEXT rather than\n+\t_XLIST_NEXT.\n+\t(struct _list_node): Add new field \"insn\" to the union, of type\n+\tinsn_t.\n+\t(ilist_add): Replace macro with an inline function, requiring an\n+\tinsn_t.\n+\t(ilist_remove): Define this macro directly in terms of\n+\t_list_remove, rather than indirectly via _xlist_remove.\n+\t(ilist_clear): Likewise, in terms of _list_clear rather than\n+\t_xlist_clear.\n+\t(ilist_is_in_p): Replace macro with an inline function, requiring\n+\tan insn_t.\n+\t(_list_iter_cond_insn): New function.\n+\t(ilist_iter_remove): Define this macro directly in terms of\n+\t_list_iter_remove, rather than indirectly via _xlist_iter_remove.\n+\t(ilist_iterator): Define directly in terms of _list_iterator\n+\trather than indirectly through _xlist_iterator.\n+\t(FOR_EACH_INSN): Define in terms of _list_iter_cond_insn rather\n+\tthan in terms of _FOR_EACH_X.\n+\t(FOR_EACH_INSN_1): Likewise.\n+\n 2014-08-26  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR target/60606"}, {"sha": "abff203e2d56bd1188601372eca5b3cde4af327e", "filename": "gcc/sel-sched-ir.h", "status": "modified", "additions": 44, "deletions": 12, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8ea9631cf1709077dab89c903d713a1d5c9bd7/gcc%2Fsel-sched-ir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8ea9631cf1709077dab89c903d713a1d5c9bd7/gcc%2Fsel-sched-ir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.h?ref=de8ea9631cf1709077dab89c903d713a1d5c9bd7", "patch": "@@ -63,9 +63,9 @@ typedef _list_t _xlist_t;\n typedef rtx insn_t;\n \n /* List of insns.  */\n-typedef _xlist_t ilist_t;\n-#define ILIST_INSN(L) (_XLIST_X (L))\n-#define ILIST_NEXT(L) (_XLIST_NEXT (L))\n+typedef _list_t ilist_t;\n+#define ILIST_INSN(L) ((L)->u.insn)\n+#define ILIST_NEXT(L) (_LIST_NEXT (L))\n \n /* This lists possible transformations that done locally, i.e. in\n    moveup_expr.  */\n@@ -353,6 +353,7 @@ struct _list_node\n   union\n   {\n     rtx x;\n+    insn_t insn;\n     struct _bnd bnd;\n     expr_def expr;\n     struct _fence fence;\n@@ -511,17 +512,48 @@ typedef _list_iterator _xlist_iterator;\n #define _FOR_EACH_X_1(X, I, LP) _FOR_EACH_1 (x, (X), (I), (LP))\n \f\n \n-/* ilist_t functions.  Instruction lists are simply RTX lists.  */\n+/* ilist_t functions.  */\n \n-#define ilist_add(LP, INSN) (_xlist_add ((LP), (INSN)))\n-#define ilist_remove(LP) (_xlist_remove (LP))\n-#define ilist_clear(LP) (_xlist_clear (LP))\n-#define ilist_is_in_p(L, INSN) (_xlist_is_in_p ((L), (INSN)))\n-#define ilist_iter_remove(IP) (_xlist_iter_remove (IP))\n+static inline void\n+ilist_add (ilist_t *lp, insn_t insn)\n+{\n+  _list_add (lp);\n+  ILIST_INSN (*lp) = insn;\n+}\n+#define ilist_remove(LP) (_list_remove (LP))\n+#define ilist_clear(LP) (_list_clear (LP))\n+\n+static inline bool\n+ilist_is_in_p (ilist_t l, insn_t insn)\n+{\n+  while (l)\n+    {\n+      if (ILIST_INSN (l) == insn)\n+        return true;\n+      l = ILIST_NEXT (l);\n+    }\n+\n+  return false;\n+}\n+\n+/* Used through _FOR_EACH.  */\n+static inline bool\n+_list_iter_cond_insn (ilist_t l, insn_t *ip)\n+{\n+  if (l)\n+    {\n+      *ip = ILIST_INSN (l);\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n+#define ilist_iter_remove(IP) (_list_iter_remove (IP))\n \n-typedef _xlist_iterator ilist_iterator;\n-#define FOR_EACH_INSN(INSN, I, L) _FOR_EACH_X (INSN, I, L)\n-#define FOR_EACH_INSN_1(INSN, I, LP) _FOR_EACH_X_1 (INSN, I, LP)\n+typedef _list_iterator ilist_iterator;\n+#define FOR_EACH_INSN(INSN, I, L) _FOR_EACH (insn, (INSN), (I), (L))\n+#define FOR_EACH_INSN_1(INSN, I, LP) _FOR_EACH_1 (insn, (INSN), (I), (LP))\n \f\n \n /* Av set iterators.  */"}]}