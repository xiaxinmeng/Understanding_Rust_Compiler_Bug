{"sha": "f63ba78ce6d50bf627dd18018179eb03bf89716f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYzYmE3OGNlNmQ1MGJmNjI3ZGQxODAxODE3OWViMDNiZjg5NzE2Zg==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2016-07-14T02:14:56Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2016-07-14T02:14:56Z"}, "message": "Some fixes for profile test cases for autofdo\n\nThis fixes some basic issues with the profile test cases with autofdo.\n\n- Disable checking for value transformations that autofdo does not\n  support.\n- Disable checking for fixed hit counts which autofdo does not support\n- Enable dumping of afdo log file and check right log file.\n- Increase run time of test cases to 1M iterations because autofdo needs\n  a few samples to make sense of a program. The test case don't run\n  noticeable slower with that.\n\nThere are still failures unfortunately, especially the indirect call\ntransformations do not trigger because autofdo thinks they are not hot.\nThis can be addressed later.\n\ngcc/testsuite/:\n\n2016-07-13  Andi Kleen  <ak@linux.intel.com>\n\n\t* g++.dg/tree-prof/indir-call-prof.C: Basic fixes for autofdo.\n\t* g++.dg/tree-prof/morefunc.C: Dito.\n\t* g++.dg/tree-prof/pr35545.C: Dito.\n\t* g++.dg/tree-prof/reorder.C: Dito.\n\t* gcc.dg/tree-prof/20050826-2.c: Dito.\n\t* gcc.dg/tree-prof/cmpsf-1.c: Dito.\n\t* gcc.dg/tree-prof/cold_partition_label.c: Dito.\n\t* gcc.dg/tree-prof/ic-misattribution-1.c: Dito.\n\t* gcc.dg/tree-prof/indir-call-prof.c: Dito.\n\t* gcc.dg/tree-prof/inliner-1.c: Dito.\n\t* gcc.dg/tree-prof/merge_block.c: Dito.\n\t* gcc.dg/tree-prof/stringop-1.c: Dito.\n\t* gcc.dg/tree-prof/stringop-2.c: Dito.\n\t* gcc.dg/tree-prof/switch-case-1.c: Dito.\n\t* gcc.dg/tree-prof/switch-case-2.c: Dito.\n\t* gcc.dg/tree-prof/time-profiler-1.c: Dito.\n\t* gcc.dg/tree-prof/time-profiler-2.c: Dito.\n\t* gcc.dg/tree-prof/update-loopch.c: Dito.\n\t* gcc.dg/tree-prof/val-prof-1.c: Dito.\n\t* gcc.dg/tree-prof/val-prof-2.c: Dito.\n\t* gcc.dg/tree-prof/val-prof-3.c: Dito.\n\t* gcc.dg/tree-prof/val-prof-4.c: Dito.\n\t* gcc.dg/tree-prof/val-prof-5.c: Dito.\n\t* gcc.dg/tree-prof/val-prof-6.c: Dito.\n\t* gcc.dg/tree-prof/val-prof-7.c: Dito.\n\nFrom-SVN: r238325", "tree": {"sha": "62208794e755b01b924cbb8ee0bed81d89f9c85e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62208794e755b01b924cbb8ee0bed81d89f9c85e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f63ba78ce6d50bf627dd18018179eb03bf89716f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f63ba78ce6d50bf627dd18018179eb03bf89716f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f63ba78ce6d50bf627dd18018179eb03bf89716f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f63ba78ce6d50bf627dd18018179eb03bf89716f/comments", "author": null, "committer": null, "parents": [{"sha": "f4d5a23df819ce72740971e0cc301396691da954", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4d5a23df819ce72740971e0cc301396691da954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4d5a23df819ce72740971e0cc301396691da954"}], "stats": {"total": 162, "additions": 106, "deletions": 56}, "files": [{"sha": "6119421f7b43c93fbc74a1e696d1383150c4624c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -1,3 +1,31 @@\n+2016-07-13  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* g++.dg/tree-prof/indir-call-prof.C: Basic fixes for autofdo.\n+\t* g++.dg/tree-prof/morefunc.C: Dito.\n+\t* g++.dg/tree-prof/pr35545.C: Dito.\n+\t* g++.dg/tree-prof/reorder.C: Dito.\n+\t* gcc.dg/tree-prof/20050826-2.c: Dito.\n+\t* gcc.dg/tree-prof/cmpsf-1.c: Dito.\n+\t* gcc.dg/tree-prof/cold_partition_label.c: Dito.\n+\t* gcc.dg/tree-prof/ic-misattribution-1.c: Dito.\n+\t* gcc.dg/tree-prof/indir-call-prof.c: Dito.\n+\t* gcc.dg/tree-prof/inliner-1.c: Dito.\n+\t* gcc.dg/tree-prof/merge_block.c: Dito.\n+\t* gcc.dg/tree-prof/stringop-1.c: Dito.\n+\t* gcc.dg/tree-prof/stringop-2.c: Dito.\n+\t* gcc.dg/tree-prof/switch-case-1.c: Dito.\n+\t* gcc.dg/tree-prof/switch-case-2.c: Dito.\n+\t* gcc.dg/tree-prof/time-profiler-1.c: Dito.\n+\t* gcc.dg/tree-prof/time-profiler-2.c: Dito.\n+\t* gcc.dg/tree-prof/update-loopch.c: Dito.\n+\t* gcc.dg/tree-prof/val-prof-1.c: Dito.\n+\t* gcc.dg/tree-prof/val-prof-2.c: Dito.\n+\t* gcc.dg/tree-prof/val-prof-3.c: Dito.\n+\t* gcc.dg/tree-prof/val-prof-4.c: Dito.\n+\t* gcc.dg/tree-prof/val-prof-5.c: Dito.\n+\t* gcc.dg/tree-prof/val-prof-6.c: Dito.\n+\t* gcc.dg/tree-prof/val-prof-7.c: Dito.\n+\n 2016-07-13  Andi Kleen  <ak@linux.intel.com>\n \n \t* lib/profopt.exp (profopt-execute): Remove .imports files."}, {"sha": "3134c3c06437df56ef6d880791f926170d59e84c", "filename": "gcc/testsuite/g++.dg/tree-prof/indir-call-prof.C", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Findir-call-prof.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Findir-call-prof.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Findir-call-prof.C?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-O2 -fdump-tree-optimized -fdump-ipa-profile\" } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -fdump-ipa-profile -fdump-ipa-afdo\" } */\n \n struct A {\n   A () {}\n@@ -24,14 +24,20 @@ main (void)\n   \n   A* p;\n \n-  p = (A *)wrap ((void *)&a);\n-  p->AA ();\n+  int i;\n \n-  p = (B *)wrap ((void *)&b);\n-  p->AA ();\n+  for (i = 0; i < 1000000; i++)\n+    {\n+      p = (A *)wrap ((void *)&a);\n+      p->AA ();\n+\n+      p = (B *)wrap ((void *)&b);\n+      p->AA ();\n+    }\n   \n   return 0;\n }\n \n-/* { dg-final-use { scan-ipa-dump \"Indirect call -> direct call.* AA transformation on insn\" \"profile\" } } */\n-/* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Indirect call -> direct call.* AA transformation on insn\" \"profile\" } } */\n+/* { dg-final-use-autofdo { scan-ipa-dump \"Indirect call -> direct call.* AA transformation on insn\" \"afdo\" } } */\n+/* { dg-final-use-not-autofdo { scan-tree-dump-not \"Invalid sum\" \"optimized\" } } */"}, {"sha": "2e3fc1147583692f575e34c9a4120e51c8dbd94c", "filename": "gcc/testsuite/g++.dg/tree-prof/morefunc.C", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fmorefunc.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fmorefunc.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fmorefunc.C?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-O2 -fno-devirtualize --param=profile-func-internal-id=0 -fdump-ipa-profile -Wno-attributes -Wno-coverage-mismatch\" } */\n+/* { dg-options \"-O2 -fno-devirtualize --param=profile-func-internal-id=0 -fdump-ipa-profile -fdump-ipa-afdo -Wno-attributes -Wno-coverage-mismatch\" } */\n #include \"reorder_class1.h\"\n #include \"reorder_class2.h\"\n \n@@ -28,7 +28,7 @@ static __attribute__((always_inline))\n void test2 (B *tc)\n {\n   int i;\n-  for (i = 0; i < 1000; i++)\n+  for (i = 0; i < 1000000; i++)\n      g += tc->foo();\n }\n \n@@ -51,4 +51,5 @@ int main()\n \n }\n \n-/* { dg-final-use { scan-ipa-dump-times \"Indirect call -> direct call\" 2 \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Indirect call -> direct call\" 2 \"profile\" } } */\n+/* { dg-final-use-autofdo { scan-ipa-dump-times \"Indirect call -> direct call\" 2 \"afdo\" } } */"}, {"sha": "e1bd047c8324a65cf94c56bea920345c262a9778", "filename": "gcc/testsuite/g++.dg/tree-prof/pr35545.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fpr35545.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fpr35545.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fpr35545.C?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -27,7 +27,7 @@ int main()\n \n   A* ap = 0;\n \n-  for (i = 0; i < 10000; i++)\n+  for (i = 0; i < 1000000; i++)\n   {\n \n      if (i%7==0)"}, {"sha": "6b3bad1f54d9e73ced3e756feded82f85f3c0cf4", "filename": "gcc/testsuite/g++.dg/tree-prof/reorder.C", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Freorder.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Freorder.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Freorder.C?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-O2 -fno-devirtualize --param=profile-func-internal-id=0 -fdump-ipa-profile -Wno-coverage-mismatch -Wno-attributes\" } */\n+/* { dg-options \"-O2 -fno-devirtualize --param=profile-func-internal-id=0 -fdump-ipa-profile -fdump-ipa-afdo -Wno-coverage-mismatch -Wno-attributes\" } */\n \n #ifdef _PROFILE_USE\n #include \"reorder_class1.h\"\n@@ -13,7 +13,7 @@ static __attribute__((always_inline))\n void test1 (A *tc)\n {\n   int i;\n-  for (i = 0; i < 1000; i++)\n+  for (i = 0; i < 1000000; i++)\n      g += tc->foo(); \n    if (g<100) g++;\n }\n@@ -22,7 +22,7 @@ static __attribute__((always_inline))\n void test2 (B *tc)\n {\n   int i;\n-  for (i = 0; i < 1000; i++)\n+  for (i = 0; i < 1000000; i++)\n      g += tc->foo();\n }\n \n@@ -44,4 +44,5 @@ int main()\n   test_b(bp);\n }\n \n-/* { dg-final-use { scan-ipa-dump-times \"Indirect call -> direct call\" 2 \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Indirect call -> direct call\" 2 \"profile\" } } */\n+/* { dg-final-use-autofdo { scan-ipa-dump-times \"Indirect call -> direct call\" 2 \"afdo\" } } */"}, {"sha": "f0febbdffa28d0f75ddc550d5a615e621f28ac94", "filename": "gcc/testsuite/gcc.dg/tree-prof/20050826-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2F20050826-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2F20050826-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2F20050826-2.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -72,4 +72,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"dom2\"} } */\n+/* { dg-final-use-not-autofdo { scan-tree-dump-not \"Invalid sum\" \"dom2\"} } */"}, {"sha": "16adb92e1ca13e8e7a2145500d1f984712ac6e23", "filename": "gcc/testsuite/gcc.dg/tree-prof/cmpsf-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fcmpsf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fcmpsf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fcmpsf-1.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -181,4 +181,4 @@ main (void)\n   exit (0);\n }\n \n-/* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"dom2\"} } */\n+/* { dg-final-use-not-autofdo { scan-tree-dump-not \"Invalid sum\" \"dom2\"} } */"}, {"sha": "6214e3629f254c0963528ec8aedf02e09c88b34a", "filename": "gcc/testsuite/gcc.dg/tree-prof/cold_partition_label.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fcold_partition_label.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fcold_partition_label.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fcold_partition_label.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -29,9 +29,11 @@ foo (int path)\n int\n main (int argc, char *argv[])\n {\n+  int i;\n   buf_hot =  \"hello\";\n   buf_cold = \"world\";\n-  foo (argc);\n+  for (i = 0; i < 1000000; i++)\n+    foo (argc);\n   return 0;\n }\n "}, {"sha": "3979b17b1568420e565c8fee4044c51dc1020624", "filename": "gcc/testsuite/gcc.dg/tree-prof/ic-misattribution-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fic-misattribution-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fic-misattribution-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fic-misattribution-1.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -15,4 +15,4 @@ caller(void (*func) (void))\n   func ();\n }\n \n-/* { dg-final-use { scan-ipa-dump \"hist->count 1 hist->all 1\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"hist->count 1 hist->all 1\" \"profile\" } } */"}, {"sha": "53063c3e7fa619d1f3e02f8dafba8970dd53d2a9", "filename": "gcc/testsuite/gcc.dg/tree-prof/indir-call-prof.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Findir-call-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Findir-call-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Findir-call-prof.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-O2 -fdump-tree-optimized -fdump-ipa-profile\" } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -fdump-ipa-profile -fdump-ipa-afdo\" } */\n \n static int a1 (void)\n {\n@@ -28,7 +28,7 @@ main (void)\n   int (*p) (void);\n   int  i;\n \n-  for (i = 0; i < 10; i ++)\n+  for (i = 0; i < 10000000; i ++)\n     {\n \tsetp (&p, i);\n \tp ();\n@@ -37,5 +37,6 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final-use { scan-ipa-dump \"Indirect call -> direct call.* a1 transformation on insn\" \"profile\"} } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Indirect call -> direct call.* a1 transformation on insn\" \"profile\"} } */\n+/* { dg-final-use-autofdo { scan-ipa-dump \"Indirect call -> direct call.* a1 transformation on insn\" \"afdo\"} } */\n /* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\"} } */"}, {"sha": "8d1481bfeb7882b7125865fdf143ae8b5c3ba081", "filename": "gcc/testsuite/gcc.dg/tree-prof/inliner-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Finliner-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Finliner-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Finliner-1.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -25,7 +25,7 @@ int\n main ()\n {\n   int i;\n-  for (i = 0; i < 100; i++)\n+  for (i = 0; i < 1000000; i++)\n     {\n       if (a)\n         cold_function ();"}, {"sha": "5da5ddff6a0073251cc43e0da91d382b1fdb162b", "filename": "gcc/testsuite/gcc.dg/tree-prof/merge_block.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fmerge_block.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fmerge_block.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fmerge_block.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -14,7 +14,7 @@ main ()\n {\n   int i;\n   /* The loop will be optimized away after ipa-inline.  */\n-  for (i = 0; i < 1000; i++)\n+  for (i = 0; i < 1000000; i++)\n     t ();\n   return 0;\n }"}, {"sha": "6f8908a3431803cecb5e7380f9874c23c14c6fa3", "filename": "gcc/testsuite/gcc.dg/tree-prof/stringop-1.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fstringop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fstringop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fstringop-1.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -14,8 +14,9 @@ main()\n     }\n    return 0;\n }\n-/* { dg-final-use { scan-ipa-dump \"Single value 4 stringop\" \"profile\"} } */\n+/* autofdo doesn't support value profiling for now: */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 4 stringop\" \"profile\"} } */\n /* Really this ought to simplify into assignment, but we are not there yet.  */\n /* a[0] = b[0] is what we fold the resulting memcpy into.  */\n-/* { dg-final-use { scan-tree-dump \" = MEM.*&b\" \"optimized\"} } */\n-/* { dg-final-use { scan-tree-dump \"MEM.*&a\\\\\\] = \" \"optimized\"} } */\n+/* { dg-final-use-not-autofdo { scan-tree-dump \" = MEM.*&b\" \"optimized\"} } */\n+/* { dg-final-use-not-autofdo { scan-tree-dump \"MEM.*&a\\\\\\] = \" \"optimized\"} } */"}, {"sha": "330b159b7fceff9836999353e31545d67ba7f6e3", "filename": "gcc/testsuite/gcc.dg/tree-prof/stringop-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fstringop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fstringop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fstringop-2.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -19,6 +19,7 @@ main()\n     }\n    return 0;\n }\n-/* { dg-final-use { scan-ipa-dump \"Single value 4 stringop\" \"profile\"} } */\n+/* autofdo doesn't support value profiling for now: */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 4 stringop\" \"profile\"} } */\n /* The versioned memset of size 4 should be optimized to an assignment.  */\n-/* { dg-final-use { scan-tree-dump \"MEM\\\\\\[\\\\(void .\\\\)&a\\\\\\] = 168430090\" \"optimized\"} } */\n+/* { dg-final-use-not-autofdo { scan-tree-dump \"MEM\\\\\\[\\\\(void .\\\\)&a\\\\\\] = 168430090\" \"optimized\"} } */"}, {"sha": "6a9af083a9a22dfa356b06636cba9cfeff8a4b2c", "filename": "gcc/testsuite/gcc.dg/tree-prof/switch-case-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fswitch-case-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fswitch-case-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fswitch-case-1.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -35,5 +35,6 @@ int main ()\n    foo ((i * i) % 5);\n  return 0;\n }\n-/* { dg-final-use { scan-rtl-dump-times \";; basic block\\[^\\\\n\\]*count 4000\" 2 \"expand\"} } */\n-/* { dg-final-use { scan-rtl-dump-times \";; basic block\\[^\\\\n\\]*count 2000\" 1 \"expand\"} } */\n+/* autofdo cannot do that precise execution numbers */\n+/* { dg-final-use-not-autofdo { scan-rtl-dump-times \";; basic block\\[^\\\\n\\]*count 4000\" 2 \"expand\"} } */\n+/* { dg-final-use-not-autofdo { scan-rtl-dump-times \";; basic block\\[^\\\\n\\]*count 2000\" 1 \"expand\"} } */"}, {"sha": "cfedc9c6b765594a9b63454acdbb88a37a8c127f", "filename": "gcc/testsuite/gcc.dg/tree-prof/switch-case-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fswitch-case-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fswitch-case-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fswitch-case-2.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -35,5 +35,6 @@ int main ()\n    foo ((i * i) % 5);\n  return 0;\n }\n-/* { dg-final-use { scan-rtl-dump-times \";; basic block\\[^\\\\n\\]*count 4000\" 2 \"expand\"} } */\n-/* { dg-final-use { scan-rtl-dump-times \";; basic block\\[^\\\\n\\]*count 2000\" 1 \"expand\"} } */\n+/* autofdo cannot do that precise execution numbers: */\n+/* { dg-final-use-not-autofdo { scan-rtl-dump-times \";; basic block\\[^\\\\n\\]*count 4000\" 2 \"expand\"} } */\n+/* { dg-final-use-not-autofdo { scan-rtl-dump-times \";; basic block\\[^\\\\n\\]*count 2000\" 1 \"expand\"} } */"}, {"sha": "455f923f3f40533fb37b9d11d03b1966f2d50782", "filename": "gcc/testsuite/gcc.dg/tree-prof/time-profiler-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Ftime-profiler-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Ftime-profiler-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Ftime-profiler-1.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -16,6 +16,6 @@ int main ()\n {\n   return foo ();\n }\n-/* { dg-final-use { scan-ipa-dump-times \"Read tp_first_run: 0\" 1 \"profile\"} } */\n-/* { dg-final-use { scan-ipa-dump-times \"Read tp_first_run: 1\" 1 \"profile\"} } */\n-/* { dg-final-use { scan-ipa-dump-times \"Read tp_first_run: 2\" 1 \"profile\"} } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Read tp_first_run: 0\" 1 \"profile\"} } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Read tp_first_run: 1\" 1 \"profile\"} } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Read tp_first_run: 2\" 1 \"profile\"} } */"}, {"sha": "e6eaeb9981016f0a417d317e5a956b7cd6df396c", "filename": "gcc/testsuite/gcc.dg/tree-prof/time-profiler-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Ftime-profiler-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Ftime-profiler-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Ftime-profiler-2.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -43,7 +43,7 @@ int main ()\n \n   return r;\n }\n-/* { dg-final-use { scan-ipa-dump-times \"Read tp_first_run: 0\" 2 \"profile\"} } */\n-/* { dg-final-use { scan-ipa-dump-times \"Read tp_first_run: 1\" 1 \"profile\"} } */\n-/* { dg-final-use { scan-ipa-dump-times \"Read tp_first_run: 2\" 1 \"profile\"} } */\n-/* { dg-final-use { scan-ipa-dump-times \"Read tp_first_run: 3\" 1 \"profile\"} } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Read tp_first_run: 0\" 2 \"profile\"} } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Read tp_first_run: 1\" 1 \"profile\"} } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Read tp_first_run: 2\" 1 \"profile\"} } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Read tp_first_run: 3\" 1 \"profile\"} } */"}, {"sha": "242fa524ee689a33754370a40c19d82fd64f13ea", "filename": "gcc/testsuite/gcc.dg/tree-prof/update-loopch.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fupdate-loopch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fupdate-loopch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fupdate-loopch.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -14,8 +14,9 @@ main ()\n /* Loop header copying will peel away the initial conditional, so the loop body\n    is once reached directly from entry point of function, rest via loopback\n    edge.  */\n-/* { dg-final-use { scan-ipa-dump \"loop depth 1, count 33334\" \"profile\"} } */\n-/* { dg-final-use { scan-tree-dump \"loop depth 1, count 33333\" \"optimized\"} } */\n-/* { dg-final-use { scan-tree-dump-not \"loop depth 1, count 33332\" \"optimized\"} } */\n-/* { dg-final-use { scan-tree-dump \"Removing basic block\" \"optimized\"} } */\n+/* autofdo cannot do that precise counts */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"loop depth 1, count 33334\" \"profile\"} } */\n+/* { dg-final-use-not-autofdo { scan-tree-dump \"loop depth 1, count 33333\" \"optimized\"} } */\n+/* { dg-final-use-not-autofdo { scan-tree-dump-not \"loop depth 1, count 33332\" \"optimized\"} } */\n+/* { dg-final-use-not-autofdo { scan-tree-dump \"Removing basic block\" \"optimized\"} } */\n /* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\"} } */"}, {"sha": "35e0f908f24402d079eabb42b5d3ec3ca03ecf48", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-1.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -16,6 +16,7 @@ main ()\n     }\n   return 0;\n }\n-/* { dg-final-use { scan-ipa-dump \"Div.mod by constant n_\\[0-9\\]*=257 transformation on insn\" \"profile\"} } */\n-/* { dg-final-use { scan-tree-dump \"if \\\\(n_\\[0-9\\]* != 257\\\\)\" \"optimized\"} } */\n+/* autofdo does not do value profiling so far */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Div.mod by constant n_\\[0-9\\]*=257 transformation on insn\" \"profile\"} } */\n+/* { dg-final-use-not-autofdo { scan-tree-dump \"if \\\\(n_\\[0-9\\]* != 257\\\\)\" \"optimized\"} } */\n /* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\"} } */"}, {"sha": "ad78043ddd6dd3c8b9c40bd3c19db2d52491726e", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-2.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -24,8 +24,9 @@ main ()\n     }\n   return 0;\n }\n-/* { dg-final-use { scan-ipa-dump \"Mod power of 2 transformation on insn\" \"profile\" } } */\n+/* autofdo does not do value profiling so far */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Mod power of 2 transformation on insn\" \"profile\" } } */\n /* This is part of code checking that n is power of 2, so we are sure that the transformation\n    didn't get optimized out.  */\n-/* { dg-final-use { scan-tree-dump \"n_\\[0-9\\]* \\\\+ (4294967295|0x0*ffffffff)\" \"optimized\"} } */\n+/* { dg-final-use-not-autofdo { scan-tree-dump \"n_\\[0-9\\]* \\\\+ (4294967295|0x0*ffffffff)\" \"optimized\"} } */\n /* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\"} } */"}, {"sha": "366ada1fa227ac8794205503e9d4c8cb738ccc81", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-3.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-3.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -24,8 +24,9 @@ main ()\n     }\n   return 0;\n }\n-/* { dg-final-use { scan-ipa-dump \"Mod subtract transformation on insn\" \"profile\" } } */\n+/* autofdo does not do value profiling so far */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Mod subtract transformation on insn\" \"profile\" } } */\n /* This is part of code checking that n is greater than the divisor so we are sure that it\n    didn't get optimized out.  */\n-/* { dg-final-use { scan-tree-dump \"if \\\\(_\\[0-9\\]* \\\\< n_\\[0-9\\]*\" \"optimized\"} } */\n+/* { dg-final-use-not-autofdo { scan-tree-dump \"if \\\\(_\\[0-9\\]* \\\\< n_\\[0-9\\]*\" \"optimized\"} } */\n /* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\"} } */"}, {"sha": "374428e720efffbf2a673b11910bbff1984d8e80", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-4.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -24,8 +24,9 @@ main ()\n     }\n   return 0;\n }\n-/* { dg-final-use { scan-ipa-dump \"Mod subtract transformation on insn\" \"profile\" } } */\n+/* autofdo does not do value profiling so far */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Mod subtract transformation on insn\" \"profile\" } } */\n /* This is part of code checking that n is greater than the divisor so we are sure that it\n    didn't get optimized out.  */\n-/* { dg-final-use { scan-tree-dump \"if \\\\(n_\\[0-9\\]* \\\\>\" \"optimized\"} } */\n+/* { dg-final-use-not-autofdo { scan-tree-dump \"if \\\\(n_\\[0-9\\]* \\\\>\" \"optimized\"} } */\n /* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\"} } */"}, {"sha": "caf97ce4f878e87a2cc1f5dc76adff9c1ca19fc6", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-5.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-5.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -12,5 +12,6 @@ main()\n \t\t\ta[i]/=b;\n \treturn 0;\n }\n-/* { dg-final-use { scan-ipa-dump \"Div.mod by constant b.*=997 transformation on insn\" \"profile\" } } */\n+/* autofdo does not do value profiling so far */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Div.mod by constant b.*=997 transformation on insn\" \"profile\" } } */\n /* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\"} } */"}, {"sha": "597efa6ad70bc3545b5dc165c9aa98427fda2926", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-6.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-6.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -15,5 +15,6 @@ main()\n     t(i);\n   return 0;\n }\n-/* { dg-final-use { scan-tree-dump \"Average value sum:499500\" \"optimized\"} } */\n-/* { dg-final-use { scan-tree-dump \"IOR value\" \"optimized\"} } */\n+/* autofdo does not do value profiling so far */\n+/* { dg-final-use-not-autofdo { scan-tree-dump \"Average value sum:499500\" \"optimized\"} } */\n+/* { dg-final-use-not-autofdo { scan-tree-dump \"IOR value\" \"optimized\"} } */"}, {"sha": "9765b997effaad1825644f5e5f73895a79ca9cfc", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63ba78ce6d50bf627dd18018179eb03bf89716f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-7.c?ref=f63ba78ce6d50bf627dd18018179eb03bf89716f", "patch": "@@ -22,4 +22,4 @@ int main() {\n   return 0;\n }\n \n-/* { dg-final-use { scan-ipa-dump \"Single value 8 stringop transformation on bzero\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 8 stringop transformation on bzero\" \"profile\" } } */"}]}