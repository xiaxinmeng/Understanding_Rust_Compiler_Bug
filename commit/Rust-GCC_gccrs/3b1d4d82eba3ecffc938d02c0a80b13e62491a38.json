{"sha": "3b1d4d82eba3ecffc938d02c0a80b13e62491a38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IxZDRkODJlYmEzZWNmZmM5MzhkMDJjMGE4MGIxM2U2MjQ5MWEzOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-23T14:57:33Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-23T14:57:33Z"}, "message": "[multiple changes]\n\n2013-04-23  Yannick Moy  <moy@adacore.com>\n\n\t* einfo.ads: Minor typo fix.\n\t* sem_ch13.adb (Build_Predicate_Functions): Reject cases where\n\tStatic_Predicate is applied to a non-scalar or non-static type.\n\t* sem_prag.adb: Minor typo fix.\n\n2013-04-23  Doug Rupp  <rupp@adacore.com>\n\n\t* init.c (GNAT$STOP) [VMS]: New function.\n\n2013-04-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb: Add exp_pakd to context.\n\t(Constrain_Component_Type): If the component of the parent is\n\tpacked, and the record subtype being built is already frozen,\n\tas is the case for an itype, the component type itself will not\n\tbe frozen, and the packed array type for it must be constructed\n\texplicitly.\n\n2013-04-23  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-socket.adb, g-socket.ads (Set_Close_On_Exec): New subprogram.\n\nFrom-SVN: r198196", "tree": {"sha": "cf957920073a82d1d9d8fea9f696b60da3b436c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf957920073a82d1d9d8fea9f696b60da3b436c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b1d4d82eba3ecffc938d02c0a80b13e62491a38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b1d4d82eba3ecffc938d02c0a80b13e62491a38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b1d4d82eba3ecffc938d02c0a80b13e62491a38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b1d4d82eba3ecffc938d02c0a80b13e62491a38/comments", "author": null, "committer": null, "parents": [{"sha": "6577bef9b85e7a26f4059ec86bced1651ef2046e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6577bef9b85e7a26f4059ec86bced1651ef2046e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6577bef9b85e7a26f4059ec86bced1651ef2046e"}], "stats": {"total": 151, "additions": 130, "deletions": 21}, "files": [{"sha": "b5d5e82bf6932404dcb33ab7a2d0e0f57afc9384", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1d4d82eba3ecffc938d02c0a80b13e62491a38/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1d4d82eba3ecffc938d02c0a80b13e62491a38/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3b1d4d82eba3ecffc938d02c0a80b13e62491a38", "patch": "@@ -1,3 +1,27 @@\n+2013-04-23  Yannick Moy  <moy@adacore.com>\n+\n+\t* einfo.ads: Minor typo fix.\n+\t* sem_ch13.adb (Build_Predicate_Functions): Reject cases where\n+\tStatic_Predicate is applied to a non-scalar or non-static type.\n+\t* sem_prag.adb: Minor typo fix.\n+\n+2013-04-23  Doug Rupp  <rupp@adacore.com>\n+\n+\t* init.c (GNAT$STOP) [VMS]: New function.\n+\n+2013-04-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb: Add exp_pakd to context.\n+\t(Constrain_Component_Type): If the component of the parent is\n+\tpacked, and the record subtype being built is already frozen,\n+\tas is the case for an itype, the component type itself will not\n+\tbe frozen, and the packed array type for it must be constructed\n+\texplicitly.\n+\n+2013-04-23  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-socket.adb, g-socket.ads (Set_Close_On_Exec): New subprogram.\n+\n 2013-04-23  Yannick Moy  <moy@adacore.com>\n \n \t* err_vars.ads (Error_Msg_Qual_Level): Set variable to zero"}, {"sha": "16624d2d88d45873f7e980160afb3e1d43c7258f", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1d4d82eba3ecffc938d02c0a80b13e62491a38/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1d4d82eba3ecffc938d02c0a80b13e62491a38/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=3b1d4d82eba3ecffc938d02c0a80b13e62491a38", "patch": "@@ -2544,7 +2544,7 @@ package Einfo is\n --       entirely synthesized, by looking at the bounds, and the immediate\n --       subtype parent. However, this method does not work for some Itypes\n --       that have no parent set (and the only way to find the immediate\n---       subtype parent is to go through the tree). For now, this flay is set\n+--       subtype parent is to go through the tree). For now, this flag is set\n --       conservatively, i.e. if it is set then for sure the subtype is non-\n --       static, but if it is not set, then the type may or may not be static.\n --       Thus the test for a static subtype is that this flag is clear AND that"}, {"sha": "04a4b86c692fa99b3d6e9629b92915aa2afba166", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1d4d82eba3ecffc938d02c0a80b13e62491a38/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1d4d82eba3ecffc938d02c0a80b13e62491a38/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=3b1d4d82eba3ecffc938d02c0a80b13e62491a38", "patch": "@@ -2211,6 +2211,24 @@ package body GNAT.Sockets is\n       Insert_Socket_In_Set (Item.Set'Access, C.int (Socket));\n    end Set;\n \n+   -----------------------\n+   -- Set_Close_On_Exec --\n+   -----------------------\n+\n+   procedure Set_Close_On_Exec\n+     (Socket        : Socket_Type;\n+      Close_On_Exec : Boolean;\n+      Status        : out Boolean)\n+   is\n+      function C_Set_Close_On_Exec\n+        (Socket : Socket_Type; Close_On_Exec : C.int)\n+         return C.int;\n+      pragma Import (C, C_Set_Close_On_Exec, \"__gnat_set_close_on_exec\");\n+\n+   begin\n+      Status := C_Set_Close_On_Exec (Socket, Boolean'Pos (Close_On_Exec)) = 0;\n+   end Set_Close_On_Exec;\n+\n    ----------------------\n    -- Set_Forced_Flags --\n    ----------------------"}, {"sha": "c543707097a9b434109dc9ce34ebc4569654e4c3", "filename": "gcc/ada/g-socket.ads", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1d4d82eba3ecffc938d02c0a80b13e62491a38/gcc%2Fada%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1d4d82eba3ecffc938d02c0a80b13e62491a38/gcc%2Fada%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.ads?ref=3b1d4d82eba3ecffc938d02c0a80b13e62491a38", "patch": "@@ -979,6 +979,17 @@ package GNAT.Sockets is\n    --  socket. Count is set to the count of transmitted stream elements. Flags\n    --  allow control over transmission.\n \n+   procedure Set_Close_On_Exec\n+     (Socket        : Socket_Type;\n+      Close_On_Exec : Boolean;\n+      Status        : out Boolean);\n+   --  When Close_On_Exec is True, mark Socket to be closed automatically when\n+   --  a new program is executed by the calling process (i.e. prevent Socket\n+   --  from being inherited by child processes). When Close_On_Exec is False,\n+   --  mark Socket to not be closed on exec (i.e. allow it to be inherited).\n+   --  Status is False if the operation could not be performed, or is not\n+   --  supported on the target platform.\n+\n    procedure Set_Socket_Option\n      (Socket : Socket_Type;\n       Level  : Level_Type := Socket_Level;"}, {"sha": "68b4035ea208df81dc996b17e9add00e86d444d9", "filename": "gcc/ada/init.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1d4d82eba3ecffc938d02c0a80b13e62491a38/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1d4d82eba3ecffc938d02c0a80b13e62491a38/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=3b1d4d82eba3ecffc938d02c0a80b13e62491a38", "patch": "@@ -1286,6 +1286,22 @@ __gnat_handle_vms_condition (int *sigargs, void *mechargs)\n   Raise_From_Signal_Handler (exception, msg);\n }\n \n+#if defined (IN_RTS) && defined (__IA64)\n+/* Called only from adasigio.b32.  This is a band aid to avoid going\n+   through the VMS signal handling code which results in a 0x8000 per\n+   handled exception memory leak in P2 space (see VMS source listing\n+   sys/lis/exception.lis) due to the allocation of working space that\n+   is expected to be deallocated upon return from the condition handler,\n+   which doesn't return in GNAT compiled code.  */\n+void\n+GNAT$STOP (int *sigargs)\n+{\n+   /* Note that there are no mechargs. We rely on the fact that condtions\n+      raised from DEClib I/O do not require an \"adjust\".  */\n+   __gnat_handle_vms_condition (sigargs, 0);\n+}\n+#endif\n+\n void\n __gnat_install_handler (void)\n {"}, {"sha": "f5c03f262143281d2b8e56c278d3555c83165856", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 43, "deletions": 17, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1d4d82eba3ecffc938d02c0a80b13e62491a38/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1d4d82eba3ecffc938d02c0a80b13e62491a38/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=3b1d4d82eba3ecffc938d02c0a80b13e62491a38", "patch": "@@ -980,7 +980,7 @@ package body Sem_Ch13 is\n             --  Perform analysis of the External_Name or Link_Name aspects\n \n             procedure Analyze_Aspect_Implicit_Dereference;\n-            --  Perform  analysis of the Implicit_Dereference aspects\n+            --  Perform analysis of the Implicit_Dereference aspects\n \n             procedure Make_Aitem_Pragma\n               (Pragma_Argument_Associations : List_Id;\n@@ -1082,8 +1082,8 @@ package body Sem_Ch13 is\n                      Pragma_Argument_Associations,\n                    Pragma_Identifier =>\n                      Make_Identifier (Sloc (Id), Pragma_Name),\n-                     Class_Present     => Class_Present (Aspect),\n-                     Split_PPC         => Split_PPC (Aspect));\n+                   Class_Present     => Class_Present (Aspect),\n+                   Split_PPC         => Split_PPC (Aspect));\n \n                --  Set additional semantic fields\n \n@@ -5707,7 +5707,7 @@ package body Sem_Ch13 is\n    -- Build_Predicate_Functions --\n    -------------------------------\n \n-   --  The procedures that are constructed here has the form:\n+   --  The procedures that are constructed here have the form:\n \n    --    function typPredicate (Ixxx : typ) return Boolean is\n    --    begin\n@@ -5725,8 +5725,8 @@ package body Sem_Ch13 is\n    --  use this function even if checks are off, e.g. for membership tests.\n \n    --  If the expression has at least one Raise_Expression, then we also build\n-   --  the typPredicateM version of the function, in which any occurence of a\n-   --  Raise_Expressioon is converted to \"return False\".\n+   --  the typPredicateM version of the function, in which any occurrence of a\n+   --  Raise_Expression is converted to \"return False\".\n \n    procedure Build_Predicate_Functions (Typ : Entity_Id; N : Node_Id) is\n       Loc : constant Source_Ptr := Sloc (Typ);\n@@ -6216,22 +6216,48 @@ package body Sem_Ch13 is\n \n          --  Deal with static predicate case\n \n-         if Ekind_In (Typ, E_Enumeration_Subtype,\n-                           E_Modular_Integer_Subtype,\n-                           E_Signed_Integer_Subtype)\n+         --  ??? We don't currently deal with real types\n+         --  ??? Why requiring that Typ is static?\n+\n+         if Ekind (Typ) in Discrete_Kind\n            and then Is_Static_Subtype (Typ)\n            and then not Dynamic_Predicate_Present\n          then\n-            Build_Static_Predicate (Typ, Expr, Object_Name);\n+            --  Only build the predicate for subtypes\n \n-            if Present (Static_Predicate_Present)\n-              and No (Static_Predicate (Typ))\n+            if Ekind_In (Typ, E_Enumeration_Subtype,\n+                              E_Modular_Integer_Subtype,\n+                              E_Signed_Integer_Subtype)\n             then\n-               Error_Msg_F\n-                 (\"expression does not have required form for \"\n-                  & \"static predicate\",\n-                  Next (First (Pragma_Argument_Associations\n-                                (Static_Predicate_Present))));\n+               Build_Static_Predicate (Typ, Expr, Object_Name);\n+\n+               if Present (Static_Predicate_Present)\n+                 and No (Static_Predicate (Typ))\n+               then\n+                  Error_Msg_F\n+                    (\"expression does not have required form for \"\n+                     & \"static predicate\",\n+                     Next (First (Pragma_Argument_Associations\n+                                   (Static_Predicate_Present))));\n+               end if;\n+            end if;\n+\n+         --  If a Static_Predicate applies on other types, that's an error:\n+         --  either the type is scalar but non-static, or it's not even a\n+         --  scalar type. We do not issue an error on generated types, as these\n+         --  would be duplicates of the same error on a source type.\n+\n+         elsif Present (Static_Predicate_Present)\n+           and then Comes_From_Source (Typ)\n+         then\n+            if Is_Scalar_Type (Typ) then\n+               Error_Msg_FE\n+                 (\"static predicate not allowed for non-static type&\",\n+                  Typ, Typ);\n+            else\n+               Error_Msg_FE\n+                 (\"static predicate not allowed for non-scalar type&\",\n+                  Typ, Typ);\n             end if;\n          end if;\n       end if;"}, {"sha": "0e8e213ad0eeb97ce9209e70231a5beb98335bfc", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1d4d82eba3ecffc938d02c0a80b13e62491a38/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1d4d82eba3ecffc938d02c0a80b13e62491a38/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=3b1d4d82eba3ecffc938d02c0a80b13e62491a38", "patch": "@@ -35,6 +35,7 @@ with Exp_Ch3;  use Exp_Ch3;\n with Exp_Ch9;  use Exp_Ch9;\n with Exp_Disp; use Exp_Disp;\n with Exp_Dist; use Exp_Dist;\n+with Exp_Pakd; use Exp_Pakd;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n with Fname;    use Fname;\n@@ -11113,6 +11114,7 @@ package body Sem_Ch3 is\n    is\n       Loc         : constant Source_Ptr := Sloc (Constrained_Typ);\n       Compon_Type : constant Entity_Id := Etype (Comp);\n+      Array_Comp  : Node_Id;\n \n       function Build_Constrained_Array_Type\n         (Old_Type : Entity_Id) return Entity_Id;\n@@ -11510,7 +11512,19 @@ package body Sem_Ch3 is\n          return Compon_Type;\n \n       elsif Is_Array_Type (Compon_Type) then\n-         return Build_Constrained_Array_Type (Compon_Type);\n+         Array_Comp := Build_Constrained_Array_Type (Compon_Type);\n+\n+         --  If the component of the parent is packed, and the record type is\n+         --  already frozen, as is the case for an itype, the component type\n+         --  itself will not be frozen, and the packed array type for it must\n+         --  be constructed explicitly.\n+\n+         if Is_Packed (Compon_Type)\n+           and then Is_Frozen (Current_Scope)\n+         then\n+            Create_Packed_Array_Type (Array_Comp);\n+         end if;\n+         return Array_Comp;\n \n       elsif Has_Discriminants (Compon_Type) then\n          return Build_Constrained_Discriminated_Type (Compon_Type);"}, {"sha": "6a6d342682c9e1afb3b72edf73615c121310af00", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b1d4d82eba3ecffc938d02c0a80b13e62491a38/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b1d4d82eba3ecffc938d02c0a80b13e62491a38/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=3b1d4d82eba3ecffc938d02c0a80b13e62491a38", "patch": "@@ -8121,8 +8121,8 @@ package body Sem_Prag is\n             --  Set Check_On to indicate check status\n \n             --  If this comes from an aspect, we have already taken care of\n-            --  the policy active when the aspect was analyzed, and Is_Ignore\n-            --  is set appriately already.\n+            --  the policy active when the aspect was analyzed, and Is_Ignored\n+            --  is set appropriately already.\n \n             if From_Aspect_Specification (N) then\n                Check_On := not Is_Ignored (N);"}]}