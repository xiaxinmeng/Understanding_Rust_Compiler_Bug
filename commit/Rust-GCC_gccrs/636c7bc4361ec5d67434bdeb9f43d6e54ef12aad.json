{"sha": "636c7bc4361ec5d67434bdeb9f43d6e54ef12aad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM2YzdiYzQzNjFlYzVkNjc0MzRiZGViOWY0M2Q2ZTU0ZWYxMmFhZA==", "commit": {"author": {"name": "Josef Zlomek", "email": "zlomekj@suse.cz", "date": "2004-01-29T08:26:24Z"}, "committer": {"name": "Josef Zlomek", "email": "zlomek@gcc.gnu.org", "date": "2004-01-29T08:26:24Z"}, "message": "dwarf2out.c (struct die_struct): Added field decl_id.\n\n\t* dwarf2out.c (struct die_struct): Added field decl_id.\n\t(decl_die_table): Changed to hash table.\n\t(decl_die_table_allocated): Deleted.\n\t(decl_die_table_in_use): Deleted.\n\t(DECL_DIE_TABLE_INCREMENT): Deleted.\n\t(decl_die_table_hash): New function.\n\t(decl_die_table_eq): New function.\n\t(lookup_decl_die): Lookup in a hash table.\n\t(equate_decl_number_to_die): Insert into a hash table.\n\t(dwarf2out_init): Init hash table decl_die_table.\n\nFrom-SVN: r76853", "tree": {"sha": "ee31d7aec32371addb0e2a2d383bf1cadf8dbc73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee31d7aec32371addb0e2a2d383bf1cadf8dbc73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/636c7bc4361ec5d67434bdeb9f43d6e54ef12aad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/636c7bc4361ec5d67434bdeb9f43d6e54ef12aad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/636c7bc4361ec5d67434bdeb9f43d6e54ef12aad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/636c7bc4361ec5d67434bdeb9f43d6e54ef12aad/comments", "author": null, "committer": null, "parents": [{"sha": "4e44c1ef05495c25b59a2c2779e843c80c23b606", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e44c1ef05495c25b59a2c2779e843c80c23b606", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e44c1ef05495c25b59a2c2779e843c80c23b606"}], "stats": {"total": 83, "additions": 42, "deletions": 41}, "files": [{"sha": "aaf39f6ed9650578948ee186bba3c0c9b86242ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/636c7bc4361ec5d67434bdeb9f43d6e54ef12aad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/636c7bc4361ec5d67434bdeb9f43d6e54ef12aad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=636c7bc4361ec5d67434bdeb9f43d6e54ef12aad", "patch": "@@ -1,3 +1,16 @@\n+2005-01-29  Josef Zlomek  <zlomekj@suse.cz>\n+\n+\t* dwarf2out.c (struct die_struct): Added field decl_id.\n+\t(decl_die_table): Changed to hash table.\n+\t(decl_die_table_allocated): Deleted.\n+\t(decl_die_table_in_use): Deleted.\n+\t(DECL_DIE_TABLE_INCREMENT): Deleted.\n+\t(decl_die_table_hash): New function.\n+\t(decl_die_table_eq): New function.\n+\t(lookup_decl_die): Lookup in a hash table.\n+\t(equate_decl_number_to_die): Insert into a hash table.\n+\t(dwarf2out_init): Init hash table decl_die_table.\n+\n 2004-01-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR optimization/13424"}, {"sha": "c40df28f438aea4ad5237b8d81ed1837720f5368", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 29, "deletions": 41, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/636c7bc4361ec5d67434bdeb9f43d6e54ef12aad/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/636c7bc4361ec5d67434bdeb9f43d6e54ef12aad/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=636c7bc4361ec5d67434bdeb9f43d6e54ef12aad", "patch": "@@ -3354,6 +3354,7 @@ typedef struct die_struct GTY(())\n   dw_offset die_offset;\n   unsigned long die_abbrev;\n   int die_mark;\n+  unsigned int decl_id;\n }\n die_node;\n \n@@ -3471,20 +3472,9 @@ static GTY(()) varray_type file_table;\n static GTY(()) varray_type file_table_emitted;\n static GTY(()) size_t file_table_last_lookup_index;\n \n-/* A pointer to the base of a table of references to DIE's that describe\n-   declarations.  The table is indexed by DECL_UID() which is a unique\n-   number identifying each decl.  */\n-static GTY((length (\"decl_die_table_allocated\"))) dw_die_ref *decl_die_table;\n-\n-/* Number of elements currently allocated for the decl_die_table.  */\n-static GTY(()) unsigned decl_die_table_allocated;\n-\n-/* Number of elements in decl_die_table currently in use.  */\n-static GTY(()) unsigned decl_die_table_in_use;\n-\n-/* Size (in elements) of increments by which we may expand the\n-   decl_die_table.  */\n-#define DECL_DIE_TABLE_INCREMENT 256\n+/* A hash table of references to DIE's that describe declarations.\n+   The key is a DECL_UID() which is a unique number identifying each decl.  */\n+static GTY ((param_is (struct die_struct))) htab_t decl_die_table;\n \n /* A pointer to the base of a list of references to DIE's that\n    are uniquely identified by their tag, presence/absence of\n@@ -3657,6 +3647,8 @@ static void add_child_die (dw_die_ref, dw_die_ref);\n static dw_die_ref new_die (enum dwarf_tag, dw_die_ref, tree);\n static dw_die_ref lookup_type_die (tree);\n static void equate_type_number_to_die (tree, dw_die_ref);\n+static hashval_t decl_die_table_hash (const void *);\n+static int decl_die_table_eq (const void *, const void *);\n static dw_die_ref lookup_decl_die (tree);\n static void equate_decl_number_to_die (tree, dw_die_ref);\n static void print_spaces (FILE *);\n@@ -5212,14 +5204,28 @@ equate_type_number_to_die (tree type, dw_die_ref type_die)\n   TYPE_SYMTAB_DIE (type) = type_die;\n }\n \n+/* Returns a hash value for X (which really is a die_struct).  */\n+\n+static hashval_t\n+decl_die_table_hash (const void *x)\n+{\n+  return (hashval_t) ((const dw_die_ref) x)->decl_id;\n+}\n+\n+/* Return nonzero if decl_id of die_struct X is the same as UID of decl *Y.  */\n+\n+static int\n+decl_die_table_eq (const void *x, const void *y)\n+{\n+  return (((const dw_die_ref) x)->decl_id == DECL_UID ((const tree) y));\n+}\n+\n /* Return the DIE associated with a given declaration.  */\n \n static inline dw_die_ref\n lookup_decl_die (tree decl)\n {\n-  unsigned decl_id = DECL_UID (decl);\n-\n-  return (decl_id < decl_die_table_in_use ? decl_die_table[decl_id] : NULL);\n+  return htab_find_with_hash (decl_die_table, decl, DECL_UID (decl));\n }\n \n /* Equate a DIE to a particular declaration.  */\n@@ -5228,27 +5234,11 @@ static void\n equate_decl_number_to_die (tree decl, dw_die_ref decl_die)\n {\n   unsigned int decl_id = DECL_UID (decl);\n-  unsigned int num_allocated;\n-\n-  if (decl_id >= decl_die_table_allocated)\n-    {\n-      num_allocated\n-\t= ((decl_id + 1 + DECL_DIE_TABLE_INCREMENT - 1)\n-\t   / DECL_DIE_TABLE_INCREMENT)\n-\t  * DECL_DIE_TABLE_INCREMENT;\n-\n-      decl_die_table = ggc_realloc (decl_die_table,\n-\t\t\t\t    sizeof (dw_die_ref) * num_allocated);\n-\n-      memset (&decl_die_table[decl_die_table_allocated], 0,\n-\t     (num_allocated - decl_die_table_allocated) * sizeof (dw_die_ref));\n-      decl_die_table_allocated = num_allocated;\n-    }\n-\n-  if (decl_id >= decl_die_table_in_use)\n-    decl_die_table_in_use = (decl_id + 1);\n+  void **slot;\n \n-  decl_die_table[decl_id] = decl_die;\n+  slot = htab_find_slot_with_hash (decl_die_table, decl, decl_id, INSERT);\n+  *slot = decl_die;\n+  decl_die->decl_id = decl_id;\n }\n \f\n /* Keep track of the number of spaces used to indent the\n@@ -12716,10 +12706,8 @@ dwarf2out_init (const char *filename ATTRIBUTE_UNUSED)\n   init_file_table ();\n \n   /* Allocate the initial hunk of the decl_die_table.  */\n-  decl_die_table = ggc_alloc_cleared (DECL_DIE_TABLE_INCREMENT\n-\t\t\t\t      * sizeof (dw_die_ref));\n-  decl_die_table_allocated = DECL_DIE_TABLE_INCREMENT;\n-  decl_die_table_in_use = 0;\n+  decl_die_table = htab_create_ggc (10, decl_die_table_hash,\n+\t\t\t\t    decl_die_table_eq, NULL);\n \n   /* Allocate the initial hunk of the decl_scope_table.  */\n   VARRAY_TREE_INIT (decl_scope_table, 256, \"decl_scope_table\");"}]}