{"sha": "d5a294199d4adc3665c0a6a2aef5d5c764a2e132", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVhMjk0MTk5ZDRhZGMzNjY1YzBhNmEyYWVmNWQ1Yzc2NGEyZTEzMg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-09-09T10:15:46Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-09-09T10:15:46Z"}, "message": "[AArch64] PR 61749: Do not ICE in lane intrinsics when passed non-constant lane number\n\n\tPR target/61749\n\t* config/aarch64/aarch64-builtins.c (aarch64_types_quadop_qualifiers):\n\tUse qualifier_immediate for last operand.  Rename to...\n\t(aarch64_types_ternop_lane_qualifiers): ... This.\n\t(TYPES_QUADOP): Rename to...\n\t(TYPES_TERNOP_LANE): ... This.\n\t(aarch64_simd_expand_args): Return const0_rtx when encountering user\n\terror.  Change return of 0 to return of NULL_RTX.\n\t(aarch64_crc32_expand_builtin): Likewise.\n\t(aarch64_expand_builtin): Return NULL_RTX instead of 0.\n\tICE when expanding unknown builtin.\n\t* config/aarch64/aarch64-simd-builtins.def (sqdmlal_lane): Use\n\tTERNOP_LANE qualifiers.\n\t(sqdmlsl_lane): Likewise.\n\t(sqdmlal_laneq): Likewise.\n\t(sqdmlsl_laneq): Likewise.\n\t(sqdmlal2_lane): Likewise.\n\t(sqdmlsl2_lane): Likewise.\n\t(sqdmlal2_laneq): Likewise.\n\t(sqdmlsl2_laneq): Likewise.\n\n\t* gcc.target/aarch64/vqdml_lane_intrinsics-bad_1.c: New test.\n\nFrom-SVN: r215046", "tree": {"sha": "c7e00df039fd76f0ae84f9e088479c31e51876e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7e00df039fd76f0ae84f9e088479c31e51876e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5a294199d4adc3665c0a6a2aef5d5c764a2e132", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5a294199d4adc3665c0a6a2aef5d5c764a2e132", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5a294199d4adc3665c0a6a2aef5d5c764a2e132", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5a294199d4adc3665c0a6a2aef5d5c764a2e132/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b250f296e980554b46952a1f1a51ad57d12dc88c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b250f296e980554b46952a1f1a51ad57d12dc88c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b250f296e980554b46952a1f1a51ad57d12dc88c"}], "stats": {"total": 116, "additions": 101, "deletions": 15}, "files": [{"sha": "9a22220ee475c0044297a2d0482d189054369ba6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a294199d4adc3665c0a6a2aef5d5c764a2e132/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a294199d4adc3665c0a6a2aef5d5c764a2e132/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5a294199d4adc3665c0a6a2aef5d5c764a2e132", "patch": "@@ -1,3 +1,26 @@\n+2014-09-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/61749\n+\t* config/aarch64/aarch64-builtins.c (aarch64_types_quadop_qualifiers):\n+\tUse qualifier_immediate for last operand.  Rename to...\n+\t(aarch64_types_ternop_lane_qualifiers): ... This.\n+\t(TYPES_QUADOP): Rename to...\n+\t(TYPES_TERNOP_LANE): ... This.\n+\t(aarch64_simd_expand_args): Return const0_rtx when encountering user\n+\terror.  Change return of 0 to return of NULL_RTX.\n+\t(aarch64_crc32_expand_builtin): Likewise.\n+\t(aarch64_expand_builtin): Return NULL_RTX instead of 0.\n+\tICE when expanding unknown builtin.\n+\t* config/aarch64/aarch64-simd-builtins.def (sqdmlal_lane): Use\n+\tTERNOP_LANE qualifiers.\n+\t(sqdmlsl_lane): Likewise.\n+\t(sqdmlal_laneq): Likewise.\n+\t(sqdmlsl_laneq): Likewise.\n+\t(sqdmlal2_lane): Likewise.\n+\t(sqdmlsl2_lane): Likewise.\n+\t(sqdmlal2_laneq): Likewise.\n+\t(sqdmlsl2_laneq): Likewise.\n+\n 2014-09-09  Nick Clifton  <nickc@redhat.com>\n \n \t* doc/invoke.texi (Optimization Options): Add missing @gol to the"}, {"sha": "0fc6ef491f2e55d57ef8452de77c29fafa3eaa83", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a294199d4adc3665c0a6a2aef5d5c764a2e132/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a294199d4adc3665c0a6a2aef5d5c764a2e132/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=d5a294199d4adc3665c0a6a2aef5d5c764a2e132", "patch": "@@ -175,10 +175,10 @@ aarch64_types_ternopu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define TYPES_TERNOPU (aarch64_types_ternopu_qualifiers)\n \n static enum aarch64_type_qualifiers\n-aarch64_types_quadop_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+aarch64_types_ternop_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_none, qualifier_none,\n-      qualifier_none, qualifier_none };\n-#define TYPES_QUADOP (aarch64_types_quadop_qualifiers)\n+      qualifier_none, qualifier_immediate };\n+#define TYPES_TERNOP_LANE (aarch64_types_ternop_lane_qualifiers)\n \n static enum aarch64_type_qualifiers\n aarch64_types_getlane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n@@ -901,8 +901,11 @@ aarch64_simd_expand_args (rtx target, int icode, int have_retval,\n \t    case SIMD_ARG_CONSTANT:\n \t      if (!(*insn_data[icode].operand[argc + have_retval].predicate)\n \t\t  (op[argc], mode[argc]))\n+\t      {\n \t\terror_at (EXPR_LOCATION (exp), \"incompatible type for argument %d, \"\n \t\t       \"expected %<const int%>\", argc + 1);\n+\t\treturn const0_rtx;\n+\t      }\n \t      break;\n \n \t    case SIMD_ARG_STOP:\n@@ -967,7 +970,7 @@ aarch64_simd_expand_args (rtx target, int icode, int have_retval,\n       }\n \n   if (!pat)\n-    return 0;\n+    return NULL_RTX;\n \n   emit_insn (pat);\n \n@@ -1058,8 +1061,9 @@ aarch64_crc32_expand_builtin (int fcode, tree exp, rtx target)\n     op1 = copy_to_mode_reg (mode1, op1);\n \n   pat = GEN_FCN (icode) (target, op0, op1);\n-  if (! pat)\n-    return 0;\n+  if (!pat)\n+    return NULL_RTX;\n+\n   emit_insn (pat);\n   return target;\n }\n@@ -1111,7 +1115,7 @@ aarch64_expand_builtin (tree exp,\n   else if (fcode >= AARCH64_CRC32_BUILTIN_BASE && fcode <= AARCH64_CRC32_BUILTIN_MAX)\n     return aarch64_crc32_expand_builtin (fcode, exp, target);\n \n-  return NULL_RTX;\n+  gcc_unreachable ();\n }\n \n tree"}, {"sha": "e7b2df42da3c6296c08eafca6d9cbc3248b5b036", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a294199d4adc3665c0a6a2aef5d5c764a2e132/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a294199d4adc3665c0a6a2aef5d5c764a2e132/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=d5a294199d4adc3665c0a6a2aef5d5c764a2e132", "patch": "@@ -157,16 +157,16 @@\n   BUILTIN_VSDQ_I (UNOP, sqabs, 0)\n   BUILTIN_VSDQ_I (UNOP, sqneg, 0)\n \n-  BUILTIN_VSD_HSI (QUADOP, sqdmlal_lane, 0)\n-  BUILTIN_VSD_HSI (QUADOP, sqdmlsl_lane, 0)\n-  BUILTIN_VSD_HSI (QUADOP, sqdmlal_laneq, 0)\n-  BUILTIN_VSD_HSI (QUADOP, sqdmlsl_laneq, 0)\n+  BUILTIN_VSD_HSI (TERNOP_LANE, sqdmlal_lane, 0)\n+  BUILTIN_VSD_HSI (TERNOP_LANE, sqdmlsl_lane, 0)\n+  BUILTIN_VSD_HSI (TERNOP_LANE, sqdmlal_laneq, 0)\n+  BUILTIN_VSD_HSI (TERNOP_LANE, sqdmlsl_laneq, 0)\n   BUILTIN_VQ_HSI (TERNOP, sqdmlal2, 0)\n   BUILTIN_VQ_HSI (TERNOP, sqdmlsl2, 0)\n-  BUILTIN_VQ_HSI (QUADOP, sqdmlal2_lane, 0)\n-  BUILTIN_VQ_HSI (QUADOP, sqdmlsl2_lane, 0)\n-  BUILTIN_VQ_HSI (QUADOP, sqdmlal2_laneq, 0)\n-  BUILTIN_VQ_HSI (QUADOP, sqdmlsl2_laneq, 0)\n+  BUILTIN_VQ_HSI (TERNOP_LANE, sqdmlal2_lane, 0)\n+  BUILTIN_VQ_HSI (TERNOP_LANE, sqdmlsl2_lane, 0)\n+  BUILTIN_VQ_HSI (TERNOP_LANE, sqdmlal2_laneq, 0)\n+  BUILTIN_VQ_HSI (TERNOP_LANE, sqdmlsl2_laneq, 0)\n   BUILTIN_VQ_HSI (TERNOP, sqdmlal2_n, 0)\n   BUILTIN_VQ_HSI (TERNOP, sqdmlsl2_n, 0)\n   /* Implemented by aarch64_sqdml<SBINQOPS:as>l<mode>.  */"}, {"sha": "81d4f311fdd3470f7f15f327aade6cd7d4da6f39", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a294199d4adc3665c0a6a2aef5d5c764a2e132/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a294199d4adc3665c0a6a2aef5d5c764a2e132/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d5a294199d4adc3665c0a6a2aef5d5c764a2e132", "patch": "@@ -1,3 +1,8 @@\n+2014-09-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/61749\n+\t* gcc.target/aarch64/vqdml_lane_intrinsics-bad_1.c: New test.\n+\n 2014-09-09  Zhenqiang Chen  <zhenqiang.chen@arm.com>\n \n \t* gcc.target/arm/split-live-ranges-for-shrink-wrap.c: New test."}, {"sha": "314a6245856cb82cf2c417341de203ec32bf7ba3", "filename": "gcc/testsuite/gcc.target/aarch64/vqdml_lane_intrinsics-bad_1.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a294199d4adc3665c0a6a2aef5d5c764a2e132/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvqdml_lane_intrinsics-bad_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a294199d4adc3665c0a6a2aef5d5c764a2e132/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvqdml_lane_intrinsics-bad_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvqdml_lane_intrinsics-bad_1.c?ref=d5a294199d4adc3665c0a6a2aef5d5c764a2e132", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int16x4_t b, int16x4_t c, int d)\n+{\n+  return vqdmlal_lane_s16 (a, b, c, d);\n+}\n+\n+int32x4_t\n+foo1 (int32x4_t a, int16x4_t b, int16x8_t c, int d)\n+{\n+  return vqdmlal_laneq_s16 (a, b, c, d);\n+}\n+\n+int32x4_t\n+foo2 (int32x4_t a, int16x4_t b, int16x4_t c, int d)\n+{\n+  return vqdmlsl_lane_s16 (a, b, c, d);\n+}\n+\n+int32x4_t\n+foo3 (int32x4_t a, int16x4_t b, int16x8_t c, int d)\n+{\n+  return vqdmlsl_laneq_s16 (a, b, c, d);\n+}\n+\n+int32x4_t\n+foo4 (int32x4_t a, int16x8_t b, int16x4_t c, int d)\n+{\n+  return vqdmlal_high_lane_s16 (a, b, c, d);\n+}\n+\n+int32x4_t\n+foo5 (int32x4_t a, int16x8_t b, int16x4_t c, int d)\n+{\n+  return vqdmlsl_high_lane_s16 (a, b, c, d);\n+}\n+\n+int32x4_t\n+foo6 (int32x4_t a, int16x8_t b, int16x8_t c, int d)\n+{\n+  return vqdmlal_high_laneq_s16 (a, b, c, d);\n+}\n+\n+int32x4_t\n+foo7 (int32x4_t a, int16x8_t b, int16x8_t c, int d)\n+{\n+  return vqdmlsl_high_laneq_s16 (a, b, c, d);\n+}\n+\n+\n+/* { dg-excess-errors \"incompatible type for argument\" } */"}]}