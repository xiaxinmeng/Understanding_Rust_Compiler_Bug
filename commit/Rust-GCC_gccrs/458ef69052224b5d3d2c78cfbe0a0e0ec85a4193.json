{"sha": "458ef69052224b5d3d2c78cfbe0a0e0ec85a4193", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU4ZWY2OTA1MjIyNGI1ZDNkMmM3OGNmYmUwYTBlMGVjODVhNDE5Mw==", "commit": {"author": {"name": "Tim Shen", "email": "timshen@google.com", "date": "2016-12-06T11:26:48Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2016-12-06T11:26:48Z"}, "message": "enable_special_members.h: Make _Enable_default_constructor constexpr.\n\n\t* include/bits/enable_special_members.h: Make\n\t_Enable_default_constructor constexpr.\n\t* include/std/variant (variant::emplace, variant::swap, std::swap,\n\tstd::hash): Sfinae on emplace and std::swap; handle __poison_hash bases\n\tof duplicated types.\n\t* testsuite/20_util/variant/compile.cc: Add tests.\n\t* testsuite/20_util/variant/hash.cc: Add tests.\n\nFrom-SVN: r243294", "tree": {"sha": "c652adea01f85d2e42973e02cf87c3dcb4147671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c652adea01f85d2e42973e02cf87c3dcb4147671"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/458ef69052224b5d3d2c78cfbe0a0e0ec85a4193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/458ef69052224b5d3d2c78cfbe0a0e0ec85a4193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/458ef69052224b5d3d2c78cfbe0a0e0ec85a4193", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/458ef69052224b5d3d2c78cfbe0a0e0ec85a4193/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9189f55908d6655e63fff8d9b9f87ec83d4891e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9189f55908d6655e63fff8d9b9f87ec83d4891e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9189f55908d6655e63fff8d9b9f87ec83d4891e1"}], "stats": {"total": 149, "additions": 114, "deletions": 35}, "files": [{"sha": "cdad9728b41ac4cc0804d1507edd1127a0c9a3a1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458ef69052224b5d3d2c78cfbe0a0e0ec85a4193/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458ef69052224b5d3d2c78cfbe0a0e0ec85a4193/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=458ef69052224b5d3d2c78cfbe0a0e0ec85a4193", "patch": "@@ -1,3 +1,11 @@\n+2016-12-07  Tim Shen  <timshen@google.com>\n+\n+\t* include/bits/enable_special_members.h: Make\n+\t_Enable_default_constructor constexpr.\n+\t* include/std/variant (variant::emplace, variant::swap, std::swap,\n+\tstd::hash): Sfinae on emplace and std::swap; handle __poison_hash bases\n+\tof duplicated types.\n+\n 2016-12-07  Tim Shen  <timshen@google.com>\n \n \t* include/std/variant (std::get, operator==): Implement constexpr"}, {"sha": "4f4477bfb33ffb9866101a29efa7fd4f4b3fb9a5", "filename": "libstdc++-v3/include/bits/enable_special_members.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458ef69052224b5d3d2c78cfbe0a0e0ec85a4193/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fenable_special_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458ef69052224b5d3d2c78cfbe0a0e0ec85a4193/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fenable_special_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fenable_special_members.h?ref=458ef69052224b5d3d2c78cfbe0a0e0ec85a4193", "patch": "@@ -38,7 +38,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   struct _Enable_default_constructor_tag\n   {\n-    explicit _Enable_default_constructor_tag() = default;\n+    explicit constexpr _Enable_default_constructor_tag() = default;\n   };\n \n /**\n@@ -118,7 +118,8 @@ template<typename _Tag>\n     operator=(_Enable_default_constructor&&) noexcept = default;\n \n     // Can be used in other ctors.\n-    explicit _Enable_default_constructor(_Enable_default_constructor_tag) { }\n+    constexpr explicit\n+    _Enable_default_constructor(_Enable_default_constructor_tag) { }\n   };\n \n template<typename _Tag>"}, {"sha": "fa1e6548e49183f91e2472ce9c406f7f4fa99fc4", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 60, "deletions": 29, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458ef69052224b5d3d2c78cfbe0a0e0ec85a4193/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458ef69052224b5d3d2c78cfbe0a0e0ec85a4193/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=458ef69052224b5d3d2c78cfbe0a0e0ec85a4193", "patch": "@@ -330,14 +330,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ }\n \n       template<size_t... __indices>\n-\tconstexpr void _M_destroy_impl(std::index_sequence<__indices...>)\n+\tconstexpr void _M_reset_impl(std::index_sequence<__indices...>)\n \t{\n \t  if (_M_index != variant_npos)\n \t    _S_vtable<__indices...>[_M_index](*this);\n \t}\n \n+      void _M_reset()\n+      {\n+\t_M_reset_impl(std::index_sequence_for<_Types...>{});\n+\t_M_index = variant_npos;\n+      }\n+\n       ~_Variant_storage()\n-      { _M_destroy_impl(std::index_sequence_for<_Types...>{}); }\n+      { _M_reset(); }\n \n       _Variadic_union<_Types...> _M_u;\n       size_t _M_index;\n@@ -354,6 +360,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_index(_Np)\n \t{ }\n \n+      void _M_reset()\n+      { _M_index = variant_npos; }\n+\n       _Variadic_union<_Types...> _M_u;\n       size_t _M_index;\n     };\n@@ -436,6 +445,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n+      void _M_destructive_move(_Variant_base&& __rhs)\n+      {\n+\tthis->~_Variant_base();\n+\t__try\n+\t  {\n+\t    ::new (this) _Variant_base(std::move(__rhs));\n+\t  }\n+\t__catch (...)\n+\t  {\n+\t    this->_M_index = variant_npos;\n+\t    __throw_exception_again;\n+\t  }\n+      }\n+\n       _Variant_base&\n       operator=(_Variant_base&& __rhs)\n       noexcept(__and_<is_nothrow_move_constructible<_Types>...,\n@@ -453,16 +476,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n \telse\n \t  {\n-\t    this->~_Variant_base();\n-\t    __try\n-\t      {\n-\t\t::new (this) _Variant_base(std::move(__rhs));\n-\t      }\n-\t    __catch (...)\n-\t      {\n-\t\tthis->_M_index = variant_npos;\n-\t\t__throw_exception_again;\n-\t      }\n+\t    _M_destructive_move(std::move(__rhs));\n \t  }\n \treturn *this;\n       }\n@@ -682,6 +696,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     };\n \n+  template<size_t _Np, typename _Tp>\n+    struct _Base_dedup : public _Tp { };\n+\n+  template<typename _Variant, typename __indices>\n+    struct _Variant_hash_base;\n+\n+  template<typename... _Types, size_t... __indices>\n+    struct _Variant_hash_base<variant<_Types...>,\n+\t\t\t      std::index_sequence<__indices...>>\n+    : _Base_dedup<__indices, __poison_hash<remove_const_t<_Types>>>... { };\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __variant\n } // namespace __detail\n@@ -858,8 +883,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return false; }\n \n   template<typename... _Types>\n-    inline enable_if_t<__and_<is_move_constructible<_Types>...,\n-\t\t\t      is_swappable<_Types>...>::value>\n+    inline enable_if_t<(is_move_constructible_v<_Types> && ...)\n+\t\t\t&& (is_swappable_v<_Types> && ...)>\n     swap(variant<_Types...>& __lhs, variant<_Types...>& __rhs)\n     noexcept(noexcept(__lhs.swap(__rhs)))\n     { __lhs.swap(__rhs); }\n@@ -1028,25 +1053,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Tp, typename... _Args>\n-\tvoid emplace(_Args&&... __args)\n+\tenable_if_t<is_constructible_v<_Tp, _Args...> && __exactly_once<_Tp>>\n+\templace(_Args&&... __args)\n \t{\n-\t  static_assert(__exactly_once<_Tp>,\n-\t\t\t\"T should occur for exactly once in alternatives\");\n \t  this->emplace<__index_of<_Tp>>(std::forward<_Args>(__args)...);\n \t  __glibcxx_assert(holds_alternative<_Tp>(*this));\n \t}\n \n       template<typename _Tp, typename _Up, typename... _Args>\n-\tvoid emplace(initializer_list<_Up> __il, _Args&&... __args)\n+\tenable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>\n+\t\t    && __exactly_once<_Tp>>\n+\templace(initializer_list<_Up> __il, _Args&&... __args)\n \t{\n-\t  static_assert(__exactly_once<_Tp>,\n-\t\t\t\"T should occur for exactly once in alternatives\");\n \t  this->emplace<__index_of<_Tp>>(__il, std::forward<_Args>(__args)...);\n \t  __glibcxx_assert(holds_alternative<_Tp>(*this));\n \t}\n \n       template<size_t _Np, typename... _Args>\n-\tvoid emplace(_Args&&... __args)\n+\tenable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,\n+\t\t\t\t       _Args...>>\n+\templace(_Args&&... __args)\n \t{\n \t  static_assert(_Np < sizeof...(_Types),\n \t\t\t\"The index should be in [0, number of alternatives)\");\n@@ -1065,7 +1091,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<size_t _Np, typename _Up, typename... _Args>\n-\tvoid emplace(initializer_list<_Up> __il, _Args&&... __args)\n+\tenable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,\n+\t\t\t\t       initializer_list<_Up>&, _Args...>>\n+\templace(initializer_list<_Up> __il, _Args&&... __args)\n \t{\n \t  static_assert(_Np < sizeof...(_Types),\n \t\t\t\"The index should be in [0, number of alternatives)\");\n@@ -1092,7 +1120,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       swap(variant& __rhs)\n       noexcept(__and_<__is_nothrow_swappable<_Types>...>::value\n-\t       && is_nothrow_move_assignable_v<variant>)\n+\t       && is_nothrow_move_constructible_v<variant>)\n       {\n \tif (this->index() == __rhs.index())\n \t  {\n@@ -1107,17 +1135,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n \telse if (!this->_M_valid())\n \t  {\n-\t    *this = std::move(__rhs);\n+\t    this->_M_destructive_move(std::move(__rhs));\n+\t    __rhs._M_reset();\n \t  }\n \telse if (!__rhs._M_valid())\n \t  {\n-\t    __rhs = std::move(*this);\n+\t    __rhs._M_destructive_move(std::move(*this));\n+\t    this->_M_reset();\n \t  }\n \telse\n \t  {\n \t    auto __tmp = std::move(__rhs);\n-\t    __rhs = std::move(*this);\n-\t    *this = std::move(__tmp);\n+\t    __rhs._M_destructive_move(std::move(*this));\n+\t    this->_M_destructive_move(std::move(__tmp));\n \t  }\n       }\n \n@@ -1253,14 +1283,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename... _Types>\n     struct hash<variant<_Types...>>\n-    : private __poison_hash<remove_const_t<_Types>>...\n+    : private __detail::__variant::_Variant_hash_base<\n+\tvariant<_Types...>, std::index_sequence_for<_Types...>>\n     {\n       using result_type = size_t;\n       using argument_type = variant<_Types...>;\n \n       size_t\n       operator()(const variant<_Types...>& __t) const\n-      noexcept((... && noexcept(hash<decay_t<_Types>>{}(std::declval<_Types>()))))\n+      noexcept((is_nothrow_callable_v<hash<decay_t<_Types>>(_Types)> && ...))\n       {\n \tif (!__t.valueless_by_exception())\n \t  {"}, {"sha": "087a17cb9525e81ea31fe4de65220e93079f3b67", "filename": "libstdc++-v3/testsuite/20_util/variant/compile.cc", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458ef69052224b5d3d2c78cfbe0a0e0ec85a4193/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458ef69052224b5d3d2c78cfbe0a0e0ec85a4193/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc?ref=458ef69052224b5d3d2c78cfbe0a0e0ec85a4193", "patch": "@@ -51,6 +51,15 @@ struct DefaultNoexcept\n   DefaultNoexcept& operator=(DefaultNoexcept&&) noexcept = default;\n };\n \n+struct MoveCtorOnly\n+{\n+  MoveCtorOnly() noexcept = delete;\n+  MoveCtorOnly(const DefaultNoexcept&) noexcept = delete;\n+  MoveCtorOnly(DefaultNoexcept&&) noexcept { }\n+  MoveCtorOnly& operator=(const DefaultNoexcept&) noexcept = delete;\n+  MoveCtorOnly& operator=(DefaultNoexcept&&) noexcept = delete;\n+};\n+\n struct nonliteral\n {\n   nonliteral() { }\n@@ -237,9 +246,9 @@ static_assert( !std::is_swappable_v<variant<D, int>> );\n \n void test_swap()\n {\n-  variant<int, string> a, b;\n-  a.swap(b);\n-  swap(a, b);\n+  static_assert(is_swappable_v<variant<int, string>>, \"\");\n+  static_assert(is_swappable_v<variant<MoveCtorOnly>>, \"\");\n+  static_assert(!is_swappable_v<variant<AllDeleted>>, \"\");\n }\n \n void test_visit()\n@@ -385,11 +394,37 @@ void test_adl()\n    variant<X> v4{in_place_type<X>, il, x};\n }\n \n-void test_variant_alternative() {\n+void test_variant_alternative()\n+{\n   static_assert(is_same_v<variant_alternative_t<0, variant<int, string>>, int>, \"\");\n   static_assert(is_same_v<variant_alternative_t<1, variant<int, string>>, string>, \"\");\n \n   static_assert(is_same_v<variant_alternative_t<0, const variant<int>>, const int>, \"\");\n   static_assert(is_same_v<variant_alternative_t<0, volatile variant<int>>, volatile int>, \"\");\n   static_assert(is_same_v<variant_alternative_t<0, const volatile variant<int>>, const volatile int>, \"\");\n }\n+\n+template<typename V, typename T>\n+  constexpr auto has_type_emplace(int) -> decltype((declval<V>().template emplace<T>(), true))\n+  { return true; };\n+\n+template<typename V, typename T>\n+  constexpr bool has_type_emplace(...)\n+  { return false; };\n+\n+template<typename V, size_t N>\n+  constexpr auto has_index_emplace(int) -> decltype((declval<V>().template emplace<N>(), true))\n+  { return true; };\n+\n+template<typename V, size_t T>\n+  constexpr bool has_index_emplace(...)\n+  { return false; };\n+\n+void test_emplace()\n+{\n+  static_assert(has_type_emplace<variant<int>, int>(0), \"\");\n+  static_assert(!has_type_emplace<variant<long>, int>(0), \"\");\n+  static_assert(has_index_emplace<variant<int>, 0>(0), \"\");\n+  static_assert(!has_type_emplace<variant<AllDeleted>, AllDeleted>(0), \"\");\n+  static_assert(!has_index_emplace<variant<AllDeleted>, 0>(0), \"\");\n+}"}, {"sha": "64d053f712e7a4c8d1143f2b1fc4223f76b72be8", "filename": "libstdc++-v3/testsuite/20_util/variant/hash.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/458ef69052224b5d3d2c78cfbe0a0e0ec85a4193/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fhash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/458ef69052224b5d3d2c78cfbe0a0e0ec85a4193/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fhash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fhash.cc?ref=458ef69052224b5d3d2c78cfbe0a0e0ec85a4193", "patch": "@@ -29,6 +29,10 @@ template<class T>\n auto f(...) -> decltype(std::false_type());\n \n static_assert(!decltype(f<S>(0))::value, \"\");\n+static_assert(!decltype(f<std::variant<S>>(0))::value, \"\");\n+static_assert(!decltype(f<std::variant<S, S>>(0))::value, \"\");\n+static_assert(decltype(f<std::variant<int>>(0))::value, \"\");\n+static_assert(decltype(f<std::variant<int, int>>(0))::value, \"\");\n \n int main()\n {"}]}