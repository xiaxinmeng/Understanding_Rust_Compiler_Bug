{"sha": "d1a73b0baead836a8d813a6a63459ef87a270bba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFhNzNiMGJhZWFkODM2YThkODEzYTZhNjM0NTllZjg3YTI3MGJiYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-03-17T18:56:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-03-17T18:56:22Z"}, "message": "PR c++/78345 - ICE initializing array from lambda.\n\n\t* init.c (build_aggr_init): Check array initializer.\n\t(build_vec_init): Check the type of a CONSTRUCTOR.\n\nFrom-SVN: r246244", "tree": {"sha": "ae76f8effa7e1594edcee55fbfb2ef0d08794b32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae76f8effa7e1594edcee55fbfb2ef0d08794b32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1a73b0baead836a8d813a6a63459ef87a270bba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a73b0baead836a8d813a6a63459ef87a270bba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1a73b0baead836a8d813a6a63459ef87a270bba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a73b0baead836a8d813a6a63459ef87a270bba/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b82a32c3e673743f6bbb911efb8be77a7bb1255", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b82a32c3e673743f6bbb911efb8be77a7bb1255", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b82a32c3e673743f6bbb911efb8be77a7bb1255"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "7d2a56a0df818d13b625feeb01a0dd4d791fe4b2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a73b0baead836a8d813a6a63459ef87a270bba/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a73b0baead836a8d813a6a63459ef87a270bba/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d1a73b0baead836a8d813a6a63459ef87a270bba", "patch": "@@ -1,5 +1,9 @@\n 2017-03-17  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/78345 - ICE initializing array from lambda.\n+\t* init.c (build_aggr_init): Check array initializer.\n+\t(build_vec_init): Check the type of a CONSTRUCTOR.\n+\n \tPR c++/80073 - C++17 ICE with virtual base.\n \t* decl.c (xref_basetypes): Also check for indirect vbases.\n "}, {"sha": "ebb1245d9c298a1b41bc02d69cd077c9a3a2352c", "filename": "gcc/cp/init.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a73b0baead836a8d813a6a63459ef87a270bba/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a73b0baead836a8d813a6a63459ef87a270bba/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=d1a73b0baead836a8d813a6a63459ef87a270bba", "patch": "@@ -1617,6 +1617,10 @@ build_aggr_init (tree exp, tree init, int flags, tsubst_flags_t complain)\n   if (init == error_mark_node)\n     return error_mark_node;\n \n+  location_t init_loc = (init\n+\t\t\t ? EXPR_LOC_OR_LOC (init, input_location)\n+\t\t\t : location_of (exp));\n+\n   TREE_READONLY (exp) = 0;\n   TREE_THIS_VOLATILE (exp) = 0;\n \n@@ -1656,6 +1660,16 @@ build_aggr_init (tree exp, tree init, int flags, tsubst_flags_t complain)\n \t    TREE_TYPE (init) = cv_unqualified (itype);\n \t  from_array = (itype && same_type_p (TREE_TYPE (init),\n \t\t\t\t\t      TREE_TYPE (exp)));\n+\n+\t  if (init && !from_array\n+\t      && !BRACE_ENCLOSED_INITIALIZER_P (init))\n+\t    {\n+\t      if (complain & tf_error)\n+\t\tpermerror (init_loc, \"array must be initialized \"\n+\t\t\t   \"with a brace-enclosed initializer\");\n+\t      else\n+\t\treturn error_mark_node;\n+\t    }\n \t}\n \n       stmt_expr = build_vec_init (exp, NULL_TREE, init,\n@@ -3945,6 +3959,9 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t  ? vec_copy_assign_is_trivial (inner_elt_type, init)\n \t  : !TYPE_NEEDS_CONSTRUCTING (type))\n       && ((TREE_CODE (init) == CONSTRUCTOR\n+\t   && (BRACE_ENCLOSED_INITIALIZER_P (init)\n+\t       || (same_type_ignoring_top_level_qualifiers_p\n+\t\t   (atype, TREE_TYPE (init))))\n \t   /* Don't do this if the CONSTRUCTOR might contain something\n \t      that might throw and require us to clean up.  */\n \t   && (vec_safe_is_empty (CONSTRUCTOR_ELTS (init))"}, {"sha": "27fec1307c3311e7c7ba6c874b42de13153367e1", "filename": "gcc/testsuite/g++.dg/init/array48.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a73b0baead836a8d813a6a63459ef87a270bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray48.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a73b0baead836a8d813a6a63459ef87a270bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray48.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray48.C?ref=d1a73b0baead836a8d813a6a63459ef87a270bba", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/78345\n+// { dg-do compile { target c++11 } }\n+\n+struct A\n+{\n+  const int i;\n+} a[1] = []{};\t\t\t// { dg-error \"array.*init\" }"}, {"sha": "e08c26f56744558e033f5e0f56dc6457b42482d0", "filename": "gcc/testsuite/g++.dg/torture/pr70499.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1a73b0baead836a8d813a6a63459ef87a270bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr70499.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1a73b0baead836a8d813a6a63459ef87a270bba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr70499.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr70499.C?ref=d1a73b0baead836a8d813a6a63459ef87a270bba", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-additional-options \"-w -Wno-psabi\" }\n+// { dg-additional-options \"-w -fpermissive -Wno-psabi\" }\n // { dg-additional-options \"-mavx\" { target x86_64-*-* i?86-*-* } }\n \n typedef double __m256d __attribute__ ((__vector_size__ (32), __may_alias__));"}]}