{"sha": "99da3840a2f4aa9fbda8bce8837fb65b6182d1a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlkYTM4NDBhMmY0YWE5ZmJkYThiY2U4ODM3ZmI2NWI2MTgyZDFhMg==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2010-09-09T17:09:37Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2010-09-09T17:09:37Z"}, "message": "trans-array.c (gfc_get_array_ref_dim): New function.\n\n2010-09-09  Mikael Morin  <mikael@gcc.gnu.org>\n\n\t* trans-array.c (gfc_get_array_ref_dim): New function.\n\t(gfc_trans_create_temp_array): Reconstruct array\n\tbounds from loop bounds. Use array bounds instead of loop bounds.\n\nFrom-SVN: r164112", "tree": {"sha": "30094860769a4977ea0e795329ba7284d3612083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30094860769a4977ea0e795329ba7284d3612083"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99da3840a2f4aa9fbda8bce8837fb65b6182d1a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99da3840a2f4aa9fbda8bce8837fb65b6182d1a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99da3840a2f4aa9fbda8bce8837fb65b6182d1a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99da3840a2f4aa9fbda8bce8837fb65b6182d1a2/comments", "author": null, "committer": null, "parents": [{"sha": "54e34c358acefd04573881cb5db372423c1e8e9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e34c358acefd04573881cb5db372423c1e8e9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54e34c358acefd04573881cb5db372423c1e8e9d"}], "stats": {"total": 74, "additions": 59, "deletions": 15}, "files": [{"sha": "5e3def2dd4acabef2f72b1ad8afbd88d932dc8a1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99da3840a2f4aa9fbda8bce8837fb65b6182d1a2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99da3840a2f4aa9fbda8bce8837fb65b6182d1a2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=99da3840a2f4aa9fbda8bce8837fb65b6182d1a2", "patch": "@@ -1,3 +1,9 @@\n+2010-09-09  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* trans-array.c (gfc_get_array_ref_dim): New function.\n+\t(gfc_trans_create_temp_array): Reconstruct array\n+\tbounds from loop bounds. Use array bounds instead of loop bounds.\n+\n 2010-09-09  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* trans-array.c (gfc_set_loop_bounds_from_array_spec):"}, {"sha": "43cc8c464c6341f86749b5ae25808bae80d16f9a", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 53, "deletions": 15, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99da3840a2f4aa9fbda8bce8837fb65b6182d1a2/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99da3840a2f4aa9fbda8bce8837fb65b6182d1a2/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=99da3840a2f4aa9fbda8bce8837fb65b6182d1a2", "patch": "@@ -713,6 +713,28 @@ gfc_trans_allocate_array_storage (stmtblock_t * pre, stmtblock_t * post,\n }\n \n \n+/* Get the array reference dimension corresponding to the given loop dimension.\n+   It is different from the true array dimension given by the dim array in\n+   the case of a partial array reference\n+   It is different from the loop dimension in the case of a transposed array.\n+   */\n+\n+static int\n+get_array_ref_dim (gfc_ss_info *info, int loop_dim)\n+{\n+  int n, array_dim, array_ref_dim;\n+\n+  array_ref_dim = 0;\n+  array_dim = info->dim[loop_dim];\n+\n+  for (n = 0; n < info->dimen; n++)\n+    if (n != loop_dim && info->dim[n] < array_dim)\n+      array_ref_dim++;\n+\n+  return array_ref_dim;\n+}\n+\n+\n /* Generate code to create and initialize the descriptor for a temporary\n    array.  This is used for both temporaries needed by the scalarizer, and\n    functions returning arrays.  Adjusts the loop variables to be\n@@ -733,15 +755,18 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n \t\t\t     tree eltype, tree initial, bool dynamic,\n \t\t\t     bool dealloc, bool callee_alloc, locus * where)\n {\n+  tree from[GFC_MAX_DIMENSIONS], to[GFC_MAX_DIMENSIONS];\n   tree type;\n   tree desc;\n   tree tmp;\n   tree size;\n   tree nelem;\n   tree cond;\n   tree or_expr;\n-  int n;\n-  int dim;\n+  int n, dim, tmp_dim;\n+\n+  memset (from, 0, sizeof (from));\n+  memset (to, 0, sizeof (to));\n \n   gcc_assert (info->dimen > 0);\n   gcc_assert (loop->dimen == info->dimen);\n@@ -750,16 +775,29 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n     gfc_warning (\"Creating array temporary at %L\", where);\n \n   /* Set the lower bound to zero.  */\n-  for (dim = 0; dim < info->dimen; dim++)\n+  for (n = 0; n < loop->dimen; n++)\n     {\n-      n = loop->order[dim];\n+      dim = info->dim[n];\n+\n       /* Callee allocated arrays may not have a known bound yet.  */\n       if (loop->to[n])\n-\tloop->to[n] = gfc_evaluate_now (fold_build2_loc (input_location,\n-\t\t\t\t\tMINUS_EXPR, gfc_array_index_type,\n-\t\t\t\t\tloop->to[n], loop->from[n]), pre);\n+\tloop->to[n] = gfc_evaluate_now (\n+\t\t\tfold_build2_loc (input_location, MINUS_EXPR,\n+\t\t\t\t\t gfc_array_index_type,\n+\t\t\t\t\t loop->to[n], loop->from[n]),\n+\t\t\tpre);\n       loop->from[n] = gfc_index_zero_node;\n \n+      /* We are constructing the temporary's descriptor based on the loop\n+\t dimensions. As the dimensions may be accessed in arbitrary order\n+\t (think of transpose) the size taken from the n'th loop may not map\n+\t to the n'th dimension of the array. We need to reconstruct loop infos\n+\t in the right order before using it to set the descriptor\n+\t bounds.  */\n+      tmp_dim = get_array_ref_dim (info, n);\n+      from[tmp_dim] = loop->from[n];\n+      to[tmp_dim] = loop->to[n];\n+\n       info->delta[dim] = gfc_index_zero_node;\n       info->start[dim] = gfc_index_zero_node;\n       info->end[dim] = gfc_index_zero_node;\n@@ -768,7 +806,7 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n \n   /* Initialize the descriptor.  */\n   type =\n-    gfc_get_array_type_bounds (eltype, info->dimen, 0, loop->from, loop->to, 1,\n+    gfc_get_array_type_bounds (eltype, info->dimen, 0, from, to, 1,\n \t\t\t       GFC_ARRAY_UNKNOWN, true);\n   desc = gfc_create_var (type, \"atmp\");\n   GFC_DECL_PACKED_ARRAY (desc) = 1;\n@@ -814,23 +852,23 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n \t     of the descriptor fields.  */\n \t  tmp = fold_build2_loc (input_location,\n \t\tMINUS_EXPR, gfc_array_index_type,\n-\t\tgfc_conv_descriptor_ubound_get (desc, gfc_rank_cst[dim]),\n-\t\tgfc_conv_descriptor_lbound_get (desc, gfc_rank_cst[dim]));\n+\t\tgfc_conv_descriptor_ubound_get (desc, gfc_rank_cst[n]),\n+\t\tgfc_conv_descriptor_lbound_get (desc, gfc_rank_cst[n]));\n \t  loop->to[n] = tmp;\n \t  continue;\n \t}\n \t\n       /* Store the stride and bound components in the descriptor.  */\n-      gfc_conv_descriptor_stride_set (pre, desc, gfc_rank_cst[dim], size);\n+      gfc_conv_descriptor_stride_set (pre, desc, gfc_rank_cst[n], size);\n \n-      gfc_conv_descriptor_lbound_set (pre, desc, gfc_rank_cst[dim],\n+      gfc_conv_descriptor_lbound_set (pre, desc, gfc_rank_cst[n],\n \t\t\t\t      gfc_index_zero_node);\n \n-      gfc_conv_descriptor_ubound_set (pre, desc, gfc_rank_cst[dim],\n-\t\t\t\t      loop->to[n]);\n+      gfc_conv_descriptor_ubound_set (pre, desc, gfc_rank_cst[n],\n+\t\t\t\t      to[n]);\n \n       tmp = fold_build2_loc (input_location, PLUS_EXPR, gfc_array_index_type,\n-\t\t\t     loop->to[n], gfc_index_one_node);\n+\t\t\t     to[n], gfc_index_one_node);\n \n       /* Check whether the size for this dimension is negative.  */\n       cond = fold_build2_loc (input_location, LE_EXPR, boolean_type_node, tmp,"}]}