{"sha": "72580319c22c1b44c6c6284a65ef021a20d7b8c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI1ODAzMTljMjJjMWI0NGM2YzYyODRhNjVlZjAyMWEyMGQ3YjhjMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-10-24T10:05:23Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-10-24T10:05:23Z"}, "message": "tree-ssa-alias.c (nonaliasing_component_refs_p): Rename into...\n\n\t* tree-ssa-alias.c (nonaliasing_component_refs_p): Rename into...\n\t(aliasing_component_refs_p): ...this.  Return true if there is no\n\tcommon base and the base access types have the same alias set.\n\t(indirect_ref_may_alias_decl_p): Adjust for above renaming.\n\t(indirect_refs_may_alias_p): Likewise.\n\nFrom-SVN: r153523", "tree": {"sha": "274d1ff40fd3b113e22615886844c614648aead5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/274d1ff40fd3b113e22615886844c614648aead5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72580319c22c1b44c6c6284a65ef021a20d7b8c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72580319c22c1b44c6c6284a65ef021a20d7b8c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72580319c22c1b44c6c6284a65ef021a20d7b8c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72580319c22c1b44c6c6284a65ef021a20d7b8c2/comments", "author": null, "committer": null, "parents": [{"sha": "26d8af3556969fc8eeda5adfe314553484ad9751", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d8af3556969fc8eeda5adfe314553484ad9751", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26d8af3556969fc8eeda5adfe314553484ad9751"}], "stats": {"total": 74, "additions": 59, "deletions": 15}, "files": [{"sha": "933b664d4b0b104f1ddbb9f8e4b83be358581ae8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72580319c22c1b44c6c6284a65ef021a20d7b8c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72580319c22c1b44c6c6284a65ef021a20d7b8c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72580319c22c1b44c6c6284a65ef021a20d7b8c2", "patch": "@@ -1,3 +1,11 @@\n+2009-10-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-ssa-alias.c (nonaliasing_component_refs_p): Rename into...\n+\t(aliasing_component_refs_p): ...this.  Return true if there is no\n+\tcommon base and the base access types have the same alias set.\n+\t(indirect_ref_may_alias_decl_p): Adjust for above renaming.\n+\t(indirect_refs_may_alias_p): Likewise.\n+\n 2009-10-23  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/40033"}, {"sha": "481a82e6c786de1fcdfc81304655b89fcabeeaff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72580319c22c1b44c6c6284a65ef021a20d7b8c2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72580319c22c1b44c6c6284a65ef021a20d7b8c2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72580319c22c1b44c6c6284a65ef021a20d7b8c2", "patch": "@@ -1,3 +1,7 @@\n+2009-10-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt4.adb: New test.\n+\n 2009-10-23  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/40033"}, {"sha": "caa5ab3a6cb37b631c157f635d06d9429d89e17d", "filename": "gcc/testsuite/gnat.dg/opt4.adb", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72580319c22c1b44c6c6284a65ef021a20d7b8c2/gcc%2Ftestsuite%2Fgnat.dg%2Fopt4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72580319c22c1b44c6c6284a65ef021a20d7b8c2/gcc%2Ftestsuite%2Fgnat.dg%2Fopt4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt4.adb?ref=72580319c22c1b44c6c6284a65ef021a20d7b8c2", "patch": "@@ -0,0 +1,22 @@\n+-- { dg-do run }\n+-- { dg-options \"-O2\" }\n+\n+procedure Opt4 is\n+\n+  type Rec (D : Natural) is record\n+    S : String (1..D);\n+  end record;\n+\n+  procedure Test (R : Rec) is\n+  begin\n+    if R.D /= 9 then\n+      raise Program_Error;\n+    end if;\n+  end;\n+\n+  R : Rec(9);\n+\n+begin\n+  R := (9, \"123456789\");\n+  Test (R);\n+end;"}, {"sha": "ba5cbbc9488b087ad15b86dc60726ccbd5f01138", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72580319c22c1b44c6c6284a65ef021a20d7b8c2/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72580319c22c1b44c6c6284a65ef021a20d7b8c2/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=72580319c22c1b44c6c6284a65ef021a20d7b8c2", "patch": "@@ -553,10 +553,10 @@ same_type_for_tbaa (tree type1, tree type2)\n    on an indirect reference may alias.  */\n \n static bool\n-nonaliasing_component_refs_p (tree ref1, tree type1,\n-\t\t\t      HOST_WIDE_INT offset1, HOST_WIDE_INT max_size1,\n-\t\t\t      tree ref2, tree type2,\n-\t\t\t      HOST_WIDE_INT offset2, HOST_WIDE_INT max_size2)\n+aliasing_component_refs_p (tree ref1, tree type1,\n+\t\t\t   HOST_WIDE_INT offset1, HOST_WIDE_INT max_size1,\n+\t\t\t   tree ref2, tree type2,\n+\t\t\t   HOST_WIDE_INT offset2, HOST_WIDE_INT max_size2)\n {\n   /* If one reference is a component references through pointers try to find a\n      common base and apply offset based disambiguation.  This handles\n@@ -600,9 +600,19 @@ nonaliasing_component_refs_p (tree ref1, tree type1,\n       offset1 -= offadj;\n       return ranges_overlap_p (offset1, max_size1, offset2, max_size2);\n     }\n-  /* If we have two type access paths B1.path1 and B2.path2 they may\n-     only alias if either B1 is in B2.path2 or B2 is in B1.path1.  */\n-  return false;\n+\n+  /* We haven't found any common base to apply offset-based disambiguation.\n+     There are two cases:\n+       1. The base access types have the same alias set.  This can happen\n+\t  in Ada when a function with an unconstrained parameter passed by\n+\t  reference is called on a constrained object and inlined: the types\n+\t  have the same alias set but aren't equivalent.  The references may\n+\t  alias in this case.\n+       2. The base access types don't have the same alias set, i.e. one set\n+\t  is a subset of the other.  We have proved that B1 is not in the\n+\t  access path B2.path and that B2 is not in the access path B1.path\n+\t  so the references may not alias.  */\n+  return get_alias_set (type1) == get_alias_set (type2);\n }\n \n /* Return true if two memory references based on the variables BASE1\n@@ -681,10 +691,10 @@ indirect_ref_may_alias_decl_p (tree ref1, tree ptr1,\n   if (ref1 && ref2\n       && handled_component_p (ref1)\n       && handled_component_p (ref2))\n-    return nonaliasing_component_refs_p (ref1, TREE_TYPE (TREE_TYPE (ptr1)),\n-\t\t\t\t\t offset1, max_size1,\n-\t\t\t\t\t ref2, TREE_TYPE (base2),\n-\t\t\t\t\t offset2, max_size2);\n+    return aliasing_component_refs_p (ref1, TREE_TYPE (TREE_TYPE (ptr1)),\n+\t\t\t\t      offset1, max_size1,\n+\t\t\t\t      ref2, TREE_TYPE (base2),\n+\t\t\t\t      offset2, max_size2);\n \n   return true;\n }\n@@ -742,10 +752,10 @@ indirect_refs_may_alias_p (tree ref1, tree ptr1,\n   if (ref1 && ref2\n       && handled_component_p (ref1)\n       && handled_component_p (ref2))\n-    return nonaliasing_component_refs_p (ref1, TREE_TYPE (TREE_TYPE (ptr1)),\n-\t\t\t\t\t offset1, max_size1,\n-\t\t\t\t\t ref2, TREE_TYPE (TREE_TYPE (ptr2)),\n-\t\t\t\t\t offset2, max_size2);\n+    return aliasing_component_refs_p (ref1, TREE_TYPE (TREE_TYPE (ptr1)),\n+\t\t\t\t      offset1, max_size1,\n+\t\t\t\t      ref2, TREE_TYPE (TREE_TYPE (ptr2)),\n+\t\t\t\t      offset2, max_size2);\n \n   return true;\n }"}]}