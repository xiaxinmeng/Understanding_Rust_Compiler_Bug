{"sha": "d0b961b802dd7d9d555ff4515835a479329326e9", "node_id": "C_kwDOANBUbNoAKGQwYjk2MWI4MDJkZDdkOWQ1NTVmZjQ1MTU4MzVhNDc5MzI5MzI2ZTk", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-28T08:06:12Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2023-04-04T07:01:21Z"}, "message": "tree-optimization/109304 - properly handle instrumented aliases\n\nWhen adjusting calls to reflect instrumentation we failed to handle\ncalls to aliases since they appear to have no body.  Instead resort\nto symtab node availability.  The patch also avoids touching\ninternal function calls in a more obvious way (builtins might\nhave a body available).\n\nprofiledbootstrap & regtest running on x86_64-unknown-linux-gnu.\n\nHonza - does this look OK?\n\n\tPR tree-optimization/109304\n\t* tree-profile.cc (tree_profiling): Use symtab node\n\tavailability to decide whether to skip adjusting calls.\n\tDo not adjust calls to internal functions.\n\n\t* gcc.dg/pr109304.c: New testcase.", "tree": {"sha": "283e029ba5921fde7ad6cf760cc5bb5d1cd84aa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/283e029ba5921fde7ad6cf760cc5bb5d1cd84aa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0b961b802dd7d9d555ff4515835a479329326e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b961b802dd7d9d555ff4515835a479329326e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b961b802dd7d9d555ff4515835a479329326e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b961b802dd7d9d555ff4515835a479329326e9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d634e6088f139ee700d79ec73b1ad6436096a6ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d634e6088f139ee700d79ec73b1ad6436096a6ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d634e6088f139ee700d79ec73b1ad6436096a6ff"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "d435b04d4d5711e48598c0ffdf11fdd3983e48e9", "filename": "gcc/testsuite/gcc.dg/pr109304.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b961b802dd7d9d555ff4515835a479329326e9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr109304.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b961b802dd7d9d555ff4515835a479329326e9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr109304.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr109304.c?ref=d0b961b802dd7d9d555ff4515835a479329326e9", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-profiling \"-fprofile-generate\" } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-options \"-O3 -fprofile-generate -fPIC -fno-semantic-interposition\" } */\n+\n+int PyUnicode_FindChar_i;\n+int PyUnicode_FindChar()\n+{\n+  while (PyUnicode_FindChar_i)\n+    if (PyUnicode_FindChar())\n+      break;\n+}"}, {"sha": "da300d5f9e8d0a625fcbb24a9290b9c3063e4a53", "filename": "gcc/tree-profile.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b961b802dd7d9d555ff4515835a479329326e9/gcc%2Ftree-profile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b961b802dd7d9d555ff4515835a479329326e9/gcc%2Ftree-profile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.cc?ref=d0b961b802dd7d9d555ff4515835a479329326e9", "patch": "@@ -808,7 +808,7 @@ tree_profiling (void)\n       {\n \tif (!gimple_has_body_p (node->decl)\n \t    || !(!node->clone_of\n-\t    || node->decl != node->clone_of->decl))\n+\t\t || node->decl != node->clone_of->decl))\n \t  continue;\n \n \t/* Don't profile functions produced for builtin stuff.  */\n@@ -842,12 +842,15 @@ tree_profiling (void)\n \t    for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t      {\n \t\tgcall *call = dyn_cast <gcall *> (gsi_stmt (gsi));\n-\t\tif (!call)\n+\t\tif (!call || gimple_call_internal_p (call))\n \t\t  continue;\n \n \t\t/* We do not clear pure/const on decls without body.  */\n \t\ttree fndecl = gimple_call_fndecl (call);\n-\t\tif (fndecl && !gimple_has_body_p (fndecl))\n+\t\tcgraph_node *callee;\n+\t\tif (fndecl\n+\t\t    && (callee = cgraph_node::get (fndecl))\n+\t\t    && callee->get_availability (node) == AVAIL_NOT_AVAILABLE)\n \t\t  continue;\n \n \t\t/* Drop the const attribute from the call type (the pure"}]}