{"sha": "18f429e29ca809340f044625c0b767beec38fba4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThmNDI5ZTI5Y2E4MDkzNDBmMDQ0NjI1YzBiNzY3YmVlYzM4ZmJhNA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2013-11-14T19:39:38Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2013-11-14T19:39:38Z"}, "message": "gimplify-be.h: New file.\n\n\n\n\t* gimplify-be.h:  New file.  Add prototypes.\n\t* gimplify.h: Don't include gimple.h.\n\t(struct gimplify_hasher, struct gimplify_ctx, is_gimple_sizepos,\n\tgimplify_hasher::hash, gimplify_hasher::equal): Relocate from gimple.h.\n\t* gimple.h (struct gimplify_hasher, gimplify_hasher::hash,\n\tgimplify_hasher::equal, struct gimplify_ctx, is_gimple_sizepos): Move\n\tto gimplify.h.\n\t(enum gsi_iterator_update): Move to gimple-iterator.h.\n\t* gimple-iterator.h (enum gsi_iterator_update): Relocate from gimple.h.\n\t* gimplify-be.c: New File.\n\t(force_gimple_operand_1, force_gimple_operand,\n\tforce_gimple_operand_gsi_1, force_gimple_operand_gsi): Relocate from\n\tgimplify.c.\n\t* gimplify.c (force_gimple_operand_1, force_gimple_operand,\n\tforce_gimple_operand_gsi_1, force_gimple_operand_gsi): Move to\n\tgimplify-be.c.\n\t* Makefile.in (OBJS): Add gimplify-be.o\n\t* asan.c: Include only gimplify.h, gimplify-be.h, and/or gimple.h as\n\trequired.\n\t* cfgloopmanip.c: Likewise.\n\t* cgraphunit.c: Likewise.\n\t* cilk-common.c: Likewise.\n\t* fold-const.c: Likewise.\n\t* function.c: Likewise.\n\t* gimple-expr.c: Likewise.\n\t* gimple-fold.c: Likewise.\n\t* gimple-ssa-strength-reduction.c: Likewise.\n\t* gimple.c: Likewise.\n\t* graphite-clast-to-gimple.c: Likewise.\n\t* graphite-sese-to-poly.c: Likewise.\n\t* ipa-prop.c: Likewise.\n\t* ipa-split.c: Likewise.\n\t* ipa.c: Likewise.\n\t* langhooks.c: Likewise.\n\t* omp-low.c: Likewise.\n\t* sese.c: Likewise.\n\t* stor-layout.c: Likewise.\n\t* targhooks.c: Likewise.\n\t* trans-mem.c: Likewise.\n\t* tree-affine.c: Likewise.\n\t* tree-cfg.c: Likewise.\n\t* tree-cfgcleanup.c: Likewise.\n\t* tree-complex.c: Likewise.\n\t* tree-if-conv.c: Likewise.\n\t* tree-inline.c: Likewise.\n\t* tree-loop-distribution.c: Likewise.\n\t* tree-nested.c: Likewise.\n\t* tree-parloops.c: Likewise.\n\t* tree-predcom.c: Likewise.\n\t* tree-profile.c: Likewise.\n\t* tree-scalar-evolution.c: Likewise.\n\t* tree-sra.c: Likewise.\n\t* tree-ssa-address.c: Likewise.\n\t* tree-ssa-ccp.c: Likewise.\n\t* tree-ssa-dce.c: Likewise.\n\t* tree-ssa-forwprop.c: Likewise.\n\t* tree-ssa-ifcombine.c: Likewise.\n\t* tree-ssa-loop-im.c: Likewise.\n\t* tree-ssa-loop-ivopts.c: Likewise.\n\t* tree-ssa-loop-manip.c: Likewise.\n\t* tree-ssa-loop-niter.c: Likewise.\n\t* tree-ssa-loop-prefetch.c: Likewise.\n\t* tree-ssa-loop-unswitch.c: Likewise.\n\t* tree-ssa-math-opts.c: Likewise.\n\t* tree-ssa-phiopt.c: Likewise.\n\t* tree-ssa-phiprop.c: Likewise.\n\t* tree-ssa-pre.c: Likewise.\n\t* tree-ssa-propagate.c: Likewise.\n\t* tree-ssa-reassoc.c: Likewise.\n\t* tree-ssa-sccvn.c: Likewise.\n\t* tree-ssa-strlen.c: Likewise.\n\t* tree-ssa.c: Likewise.\n\t* tree-switch-conversion.c: Likewise.\n\t* tree-tailcall.c: Likewise.\n\t* tree-vect-data-refs.c: Likewise.\n\t* tree-vect-generic.c: Likewise.\n\t* tree-vect-loop-manip.c: Likewise.\n\t* tree-vect-loop.c: Likewise.\n\t* tree-vect-patterns.c: Likewise.\n\t* tree-vect-stmts.c: Likewise.\n\t* tree.c: Likewise.\n\t* tsan.c: Likewise.\n\t* value-prof.c: Likewise.\n\t* config/aarch64/aarch64.c: Likewise.\n\t* config/alpha/alpha.c: Likewise.\n\t* config/darwin.c: Likewise.\n\t* config/i386/i386.c: Likewise.\n\t* config/ia64/ia64.c: Likewise.\n\t* config/mep/mep.c: Likewise.\n\t* config/mips/mips.c: Likewise.\n\t* config/rs6000/rs6000.c: Likewise.\n\t* config/s390/s390.c: Likewise.\n\t* config/sh/sh.c: Likewise.\n\t* config/sparc/sparc.c: Likewise.\n\t* config/spu/spu.c: Likewise.\n\t* config/stormy16/stormy16.c: Likewise.\n\t* config/tilegx/tilegx.c: Likewise.\n\t* config/tilepro/tilepro.c: Likewise.\n\t* config/xtensa/xtensa.c: Likewise.\n\n\t* c/c-typeck.c: Include only gimplify.h and gimple.h as needed.\n\t* c-family/c-common.c: Likewise.\n\t* c-family/c-gimplify.c: Likewise.\n\t* c-family/cilk.c: Likewise.\n\n\t* cp/class.c: Include only gimplify.h and gimple.h as needed.\n\t* cp/cp-gimplify.c: Likewise.\n\t* cp/error.c: Likewise.\n\t* cp/init.c: Likewise.\n\t* cp/optimize.c: Likewise.\n\t* cp/pt.c: Likewise.\n\t* cp/semantics.c: Likewise.\n\t* cp/tree.c: Likewise.\n\t* cp/vtable-class-hierarchy.c: Likewise.\n\n\t* fortran/trans-expr.c: Include only gimplify.h and gimple.h as needed.\n\t* fortran/trans-openmp.c: Likewise.\n\n\t* go/go-lang.c: Include only gimplify.h and gimple.h as needed.\n\n\t* java/java-gimplify.c: Include only gimplify.h and gimple.h as needed.\n\n\t* objc/objc-act.c: Include only gimplify.h and gimple.h as needed.\n\nFrom-SVN: r204812", "tree": {"sha": "c74c4d1bb5473fdc2c9d6c2a6ad1153f0c1c25de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c74c4d1bb5473fdc2c9d6c2a6ad1153f0c1c25de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18f429e29ca809340f044625c0b767beec38fba4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18f429e29ca809340f044625c0b767beec38fba4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18f429e29ca809340f044625c0b767beec38fba4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18f429e29ca809340f044625c0b767beec38fba4/comments", "author": null, "committer": null, "parents": [{"sha": "6495f8e61f6bd2eb279d1df529cdbbac1cc12214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6495f8e61f6bd2eb279d1df529cdbbac1cc12214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6495f8e61f6bd2eb279d1df529cdbbac1cc12214"}], "stats": {"total": 1191, "additions": 756, "deletions": 435}, "files": [{"sha": "e6f7a6d77139c87ef4547d1f90daee8ff4e4420d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -1,3 +1,106 @@\n+2013-11-14  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimplify-me.h:  New file.  Add prototypes.\n+\t* gimplify.h: Don't include gimple.h.\n+\t(struct gimplify_hasher, struct gimplify_ctx, is_gimple_sizepos):\n+\tRelocate from gimple.h.\n+\t* gimple.h (struct gimplify_hasher, struct gimplify_ctx,\n+\tis_gimple_sizepos): Move to gimplify.h.\n+\t(gimplify_hasher::hash, gimplify_hasher::equal): Move to gimplify.c.\n+\t(enum gsi_iterator_update): Move to gimple-iterator.h.\n+\t* gimple-iterator.h (enum gsi_iterator_update): Relocate from gimple.h.\n+\t* gimplify-me.c: New File.\n+\t(force_gimple_operand_1, force_gimple_operand,\n+\tforce_gimple_operand_gsi_1, force_gimple_operand_gsi,\n+\tgimple_regimplify_operands): Relocate from gimplify.c.\n+\t* gimplify.c (force_gimple_operand_1, force_gimple_operand,\n+\tforce_gimple_operand_gsi_1, force_gimple_operand_gsi,\n+\tgimple_regimplify_operands): Move to gimplify-me.c.\n+\t(gimplify_hasher::hash, gimplify_hasher::equal): Relocate from gimple.h.\n+\t* Makefile.in (OBJS): Add gimplify-me.o\n+\t* asan.c: Include only gimplify.h, gimplify-me.h, and/or gimple.h as\n+\trequired.\n+\t* cfgloopmanip.c: Likewise.\n+\t* cgraphunit.c: Likewise.\n+\t* cilk-common.c: Likewise.\n+\t* fold-const.c: Likewise.\n+\t* function.c: Likewise.\n+\t* gimple-expr.c: Likewise.\n+\t* gimple-fold.c: Likewise.\n+\t* gimple-ssa-strength-reduction.c: Likewise.\n+\t* gimple.c: Likewise.\n+\t* graphite-clast-to-gimple.c: Likewise.\n+\t* graphite-sese-to-poly.c: Likewise.\n+\t* ipa-prop.c: Likewise.\n+\t* ipa-split.c: Likewise.\n+\t* ipa.c: Likewise.\n+\t* langhooks.c: Likewise.\n+\t* omp-low.c: Likewise.\n+\t* sese.c: Likewise.\n+\t* stor-layout.c: Likewise.\n+\t* targhooks.c: Likewise.\n+\t* trans-mem.c: Likewise.\n+\t* tree-affine.c: Likewise.\n+\t* tree-cfg.c: Likewise.\n+\t* tree-cfgcleanup.c: Likewise.\n+\t* tree-complex.c: Likewise.\n+\t* tree-if-conv.c: Likewise.\n+\t* tree-inline.c: Likewise.\n+\t* tree-loop-distribution.c: Likewise.\n+\t* tree-nested.c: Likewise.\n+\t* tree-parloops.c: Likewise.\n+\t* tree-predcom.c: Likewise.\n+\t* tree-profile.c: Likewise.\n+\t* tree-scalar-evolution.c: Likewise.\n+\t* tree-sra.c: Likewise.\n+\t* tree-ssa-address.c: Likewise.\n+\t* tree-ssa-ccp.c: Likewise.\n+\t* tree-ssa-dce.c: Likewise.\n+\t* tree-ssa-forwprop.c: Likewise.\n+\t* tree-ssa-ifcombine.c: Likewise.\n+\t* tree-ssa-loop-im.c: Likewise.\n+\t* tree-ssa-loop-ivopts.c: Likewise.\n+\t* tree-ssa-loop-manip.c: Likewise.\n+\t* tree-ssa-loop-niter.c: Likewise.\n+\t* tree-ssa-loop-prefetch.c: Likewise.\n+\t* tree-ssa-loop-unswitch.c: Likewise.\n+\t* tree-ssa-math-opts.c: Likewise.\n+\t* tree-ssa-phiopt.c: Likewise.\n+\t* tree-ssa-phiprop.c: Likewise.\n+\t* tree-ssa-pre.c: Likewise.\n+\t* tree-ssa-propagate.c: Likewise.\n+\t* tree-ssa-reassoc.c: Likewise.\n+\t* tree-ssa-sccvn.c: Likewise.\n+\t* tree-ssa-strlen.c: Likewise.\n+\t* tree-ssa.c: Likewise.\n+\t* tree-switch-conversion.c: Likewise.\n+\t* tree-tailcall.c: Likewise.\n+\t* tree-vect-data-refs.c: Likewise.\n+\t* tree-vect-generic.c: Likewise.\n+\t* tree-vect-loop-manip.c: Likewise.\n+\t* tree-vect-loop.c: Likewise.\n+\t* tree-vect-patterns.c: Likewise.\n+\t* tree-vect-stmts.c: Likewise.\n+\t* tree.c: Likewise.\n+\t* tsan.c: Likewise.\n+\t* value-prof.c: Likewise.\n+\t* config/aarch64/aarch64.c: Likewise.\n+\t* config/alpha/alpha.c: Likewise.\n+\t* config/darwin.c: Likewise.\n+\t* config/i386/i386.c: Likewise.\n+\t* config/ia64/ia64.c: Likewise.\n+\t* config/mep/mep.c: Likewise.\n+\t* config/mips/mips.c: Likewise.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\t* config/s390/s390.c: Likewise.\n+\t* config/sh/sh.c: Likewise.\n+\t* config/sparc/sparc.c: Likewise.\n+\t* config/spu/spu.c: Likewise.\n+\t* config/stormy16/stormy16.c: Likewise.\n+\t* config/tilegx/tilegx.c: Likewise.\n+\t* config/tilepro/tilepro.c: Likewise.\n+\t* config/xtensa/xtensa.c: Likewise.\n+\n 2013-11-14  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* config/arc/arc.md (doloop_begin_i): Remove extra alignment;"}, {"sha": "806b6caa8ceb9f75005f3d48fe1a1bdec4fb9f94", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -1242,6 +1242,7 @@ OBJS = \\\n \tgimple-streamer-out.o \\\n \tgimple-walk.o \\\n \tgimplify.o \\\n+\tgimplify-me.o \\\n \tgodump.o \\\n \tgraph.o \\\n \tgraphds.o \\"}, {"sha": "2a1dceba9584e5d87d2feb4fcfb62cfb08d8c472", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n #include \"tree-iterator.h\""}, {"sha": "9deab9e7f58287caa5162731701a34a37e179b0a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -1,3 +1,9 @@\n+2013-11-14  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* c-common.c: Likewise.\n+\t* c-gimplify.c: Likewise.\n+\t* cilk.c: Likewise.\n+\n 2013-11-13  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-common.h (enum rid): Add RID_AUTO_TYPE.\n@@ -6,11 +12,11 @@\n \n 2013-11-12  Andrew MacLeod  <amacleod@redhat.com>\n \n-\t* c-family/c-common.c: Include gimplify.h.\n-\t* c-family/c-gimplify.c: Likewise.\n-\t* c-family/cilk.c: Likewise.\n-\t* c-family/c-omp.c: Include gimple-expr.h instead of gimple.h.\n-\t* c-family/c-ubsan.c: Don't include gimple.h.\n+\t* c-common.c: Include gimplify.h.\n+\t* c-gimplify.c: Likewise.\n+\t* cilk.c: Likewise.\n+\t* c-omp.c: Include gimple-expr.h instead of gimple.h.\n+\t* c-ubsan.c: Don't include gimple.h.\n \n 2013-11-12  Joseph Myers  <joseph@codesourcery.com>\n "}, {"sha": "7955bb1bb155080aaaca044b3262911ec634d614", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"cgraph.h\"\n #include \"target-def.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n \n cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */"}, {"sha": "d3c304e11371fcaf9e10f9e99dd3ca0d63a98600", "filename": "gcc/c-family/c-gimplify.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fc-family%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fc-family%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-gimplify.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"c-common.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"tree-inline.h\"\n #include \"diagnostic-core.h\""}, {"sha": "165348f124cfacb7ed5b5026a8715995b39d6d52", "filename": "gcc/c-family/cilk.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fc-family%2Fcilk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fc-family%2Fcilk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fcilk.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"langhooks.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"tree-iterator.h\"\n #include \"tree-inline.h\""}, {"sha": "6d390095fdee5bb54875960d40bb926c88489d8d", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -1,3 +1,7 @@\n+2013-11-14  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* c-typeck.c: Include only gimplify.h and gimple.h as needed.\n+\n 2013-11-13  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-tree.h (c_typespec_keyword): Add cts_auto_type.\n@@ -16,7 +20,7 @@\n \n 2013-11-12  Andrew MacLeod  <amacleod@redhat.com>\n \n-\t* c/c-typeck.c: Include gimplify.h.\n+\t* c-typeck.c: Include gimplify.h.\n \n 2013-11-12  Joseph Myers  <joseph@codesourcery.com>\n "}, {"sha": "a9c9e6eb02aaf3103bb1a21c6f631bb13a5c2b73", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"tree-iterator.h\"\n #include \"bitmap.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"tree-inline.h\"\n #include \"omp-low.h\""}, {"sha": "0fc6552746bf9601d7ee0c6cc18f509b22dfda5c", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -25,8 +25,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"cfgloop.h\"\n #include \"tree.h\"\n-#include \"gimplify.h\"\n+#include \"gimple.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"tree-ssa-loop-manip.h\"\n #include \"dumpfile.h\"\n "}, {"sha": "8ab274b5640659d933b108beb06385318ad5e8a7", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -164,8 +164,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"output.h\"\n #include \"rtl.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-into-ssa.h\""}, {"sha": "8e070a3a32dd18fbc6579eea7b2e324d984c653e", "filename": "gcc/cilk-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcilk-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcilk-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcilk-common.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"optabs.h\"\n #include \"recog.h\"\n #include \"tree-iterator.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"cilk.h\"\n "}, {"sha": "cfda95e04916dddfce966fcd93b8304e01bc00fe", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -42,6 +42,7 @@\n #include \"recog.h\"\n #include \"langhooks.h\"\n #include \"diagnostic-core.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"optabs.h\"\n #include \"dwarf2.h\""}, {"sha": "cc455e206f19f191998bf525b322fe8a08f8d529", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -48,6 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"debug.h\"\n #include \"langhooks.h\"\n #include \"splay-tree.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-ssanames.h\""}, {"sha": "3a5287fe744a5dcaaf911984295ea6ae30fb242a", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"debug.h\"\n #include \"obstack.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"lto-streamer.h\"\n "}, {"sha": "d581b969b0b4b9b72ae0647fd0632773c68c4bfd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"reload.h\"\n #include \"cgraph.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"dwarf2.h\"\n #include \"df.h\""}, {"sha": "e6bd96df881b9bbcaa12a8b54266ff45f4551f60", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"hash-table.h\"\n #include \"langhooks.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"intl.h\"\n #include \"df.h\""}, {"sha": "489bef9c2d3dcf4bfdce4b72efe39e7499412c42", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target-def.h\"\n #include \"langhooks.h\"\n #include \"df.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"opts.h\"\n #include \"dumpfile.h\""}, {"sha": "b2fd57bb5ffacfdd86926a2988235b29e53bdbc7", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"common/common-target.h\"\n #include \"langhooks.h\"\n #include \"sched-int.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"bitmap.h\"\n #include \"diagnostic.h\""}, {"sha": "539dc56153dabf3c9114be85a3857918cb23915d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -51,6 +51,7 @@\n #include \"reload.h\"\n #include \"cfgloop.h\"\n #include \"sched-int.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n #include \"gimple-walk.h\""}, {"sha": "ed8eefa31f7a767740ce950da796debc10ec2fd5", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"debug.h\"\n #include \"langhooks.h\"\n #include \"optabs.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"df.h\"\n #include \"params.h\""}, {"sha": "b812b8c584bc31ea3ea776819e8b6791ad041cbb", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -48,6 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"sched-int.h\"\n #include \"params.h\"\n #include \"ggc.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"cfgloop.h\"\n #include \"alloc-pool.h\""}, {"sha": "e72ee3f6b671c30799cc1c8e6b470e4c11b754f5", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"common/common-target.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"langhooks.h\"\n #include \"reload.h\""}, {"sha": "e344b73fce68f60c84f667570223471b4f4861b1", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -45,6 +45,7 @@\n #include \"sched-int.h\"\n #include \"params.h\"\n #include \"machmode.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"tm-constrs.h\"\n #include \"ddg.h\""}, {"sha": "3a08534be517023c34014e55a4c143d3fc1f6515", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -43,6 +43,7 @@\n #include \"target-def.h\"\n #include \"tm_p.h\"\n #include \"langhooks.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"df.h\"\n #include \"reload.h\""}, {"sha": "bf13d11b8201769b68258c98881fab216955b762", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -40,6 +40,7 @@\n #include \"dwarf2.h\"\n #include \"timevar.h\"\n #include \"tree.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"cfgloop.h\"\n #include \"tilegx-builtins.h\""}, {"sha": "d497f64125f55cbf3685fbefb1684f1a0427d029", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -41,6 +41,7 @@\n #include \"dwarf2.h\"\n #include \"timevar.h\"\n #include \"tree.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"cfgloop.h\"\n #include \"tilepro-builtins.h\""}, {"sha": "6385c5df555174bfad4195ff3a298467346c1ed5", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"langhooks.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"df.h\"\n "}, {"sha": "54e424f1678a3459bfbf67542ccb3ebeb7859867", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -1,17 +1,29 @@\n+2013-11-14  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* class.c: Include only gimplify.h and gimple.h as needed.\n+\t* cp-gimplify.c: Likewise.\n+\t* error.c: Likewise.\n+\t* init.c: Likewise.\n+\t* optimize.c: Likewise.\n+\t* pt.c: Likewise.\n+\t* semantics.c: Likewise.\n+\t* tree.c: Likewise.\n+\t* vtable-class-hierarchy.c: Likewise.\n+\n 2013-11-12  Andrew MacLeod <amacleod@redhat.com>\n \n-\t* cp/class.c: Include gimplify.h.\n-\t* cp/cp-gimplify.c: Likewise.\n-\t* cp/error.c: Likewise.\n-\t* cp/init.c: Likewise.\n-\t* cp/optimize.c: Likewise.\n-\t* cp/pt.c: Likewise.\n-\t* cp/semantics.c: Likewise.\n-\t* cp/tree.c: Likewise.\n-\t* cp/vtable-class-hierarchy.c: Likewise.\n-\t* cp/decl2.c: Don't include gimple.h.\n-\t* cp/except.c: Likewise.\n-\t* cp/method.c: Include pointer-set.h instead of gimple.h.\n+\t* class.c: Include gimplify.h.\n+\t* cp-gimplify.c: Likewise.\n+\t* error.c: Likewise.\n+\t* init.c: Likewise.\n+\t* optimize.c: Likewise.\n+\t* pt.c: Likewise.\n+\t* semantics.c: Likewise.\n+\t* tree.c: Likewise.\n+\t* vtable-class-hierarchy.c: Likewise.\n+\t* decl2.c: Don't include gimple.h.\n+\t* except.c: Likewise.\n+\t* method.c: Include pointer-set.h instead of gimple.h.\n \n 2013-11-12  Adam Butcher  <adam@jessamine.co.uk>\n "}, {"sha": "1df16d4ef8c6c436fc813425beae0febebeaffc5", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"splay-tree.h\"\n #include \"pointer-set.h\"\n #include \"hash-table.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n \n /* The number of nested classes being processed.  If we are not in the"}, {"sha": "c464719ad4235a894174b6ff74684aa3e397d25e", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cp-tree.h\"\n #include \"c-family/c-common.h\"\n #include \"tree-iterator.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"hashtab.h\"\n #include \"pointer-set.h\""}, {"sha": "5f997c3ed2924a04617a01af167ba068c4b226de", "filename": "gcc/cp/error.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -33,7 +33,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pointer-set.h\"\n #include \"c-family/c-objc.h\"\n #include \"ubsan.h\"\n-#include \"gimplify.h\"\n \n #include <new>                    // For placement-new.\n "}, {"sha": "fde2314e32658969c55819513b9dc64db9be925d", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cp-tree.h\"\n #include \"flags.h\"\n #include \"target.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n \n static bool begin_init_stmts (tree *, tree *);"}, {"sha": "c4ee8484bb95ab7197c0e6c69b59300e7e2e24c3", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -34,7 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"diagnostic-core.h\"\n #include \"dumpfile.h\"\n-#include \"gimplify.h\"\n+#include \"gimple.h\"\n #include \"tree-iterator.h\"\n #include \"cgraph.h\"\n "}, {"sha": "b80591d473612e1e056bdf24a036b93bff371665", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"timevar.h\"\n #include \"tree-iterator.h\"\n #include \"type-utils.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n \n /* The type of functions taking a tree, and some additional data, and"}, {"sha": "81394faa62671bf9bc24b4deabaa172cd89e8225", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-iterator.h\"\n #include \"vec.h\"\n #include \"target.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"bitmap.h\"\n #include \"hash-table.h\""}, {"sha": "d7af1d3a5510be4e1638efd1068450cadefd01e0", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"convert.h\"\n #include \"cgraph.h\"\n #include \"splay-tree.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"hash-table.h\"\n "}, {"sha": "5e78ec9d3a75e16c0cb87d5b12215b00bc7b7159", "filename": "gcc/cp/vtable-class-hierarchy.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcp%2Fvtable-class-hierarchy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fcp%2Fvtable-class-hierarchy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fvtable-class-hierarchy.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -118,6 +118,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"tree-iterator.h\"\n #include \"vtable-verify.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n \n static int num_calls_to_regset = 0;"}, {"sha": "5ca76912ca1dcee587ba5e424b81d18756e7b580", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -57,6 +57,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hash-table.h\"\n #include \"langhooks.h\"\n #include \"md5.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"tree-dfa.h\"\n "}, {"sha": "e6c6244e745d8b1dce08939a1e3fe84591ebb857", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -1,11 +1,16 @@\n+2013-11-14  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* trans-expr.c: Include only gimplify.h and gimple.h as needed.\n+\t* trans-openmp.c: Likewise.\n+\n 2013-11-12  Andrew MacLeod  <amacleod@redhat.com>\n \n-\t* fortran/f95-lang.c: Don't include gimple.h.\n-\t* fortran/trans-array.c: Include gimple-expr.h instead of gimple.h.\n-\t* fortran/trans.c: Likewise.\n-\t* fortran/trans-decl.c: Likewise.\n-\t* fortran/trans-expr.c: Include gimplify.h.\n-\t* fortran/trans-openmp.c: Likewise.\n+\t* f95-lang.c: Don't include gimple.h.\n+\t* trans-array.c: Include gimple-expr.h instead of gimple.h.\n+\t* trans.c: Likewise.\n+\t* trans-decl.c: Likewise.\n+\t* trans-expr.c: Include gimplify.h.\n+\t* trans-openmp.c: Likewise.\n \n 2013-11-07  Janus Weil  <janus@gcc.gnu.org>\n "}, {"sha": "b932fa4d715c5308888403ca87f411ba00667175", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Only for gfc_trans_assign and gfc_trans_pointer_assign.  */\n #include \"trans-stmt.h\"\n #include \"dependency.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n \n "}, {"sha": "13c87058ddd605dd482ab5da127669cd310a765e", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\t/* For create_tmp_var_raw.  */\n #include \"diagnostic-core.h\"\t/* For internal_error.  */\n #include \"gfortran.h\""}, {"sha": "eddffdbb9555de7ed119295e8812cb11845af0cb", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -55,6 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"target.h\"\n #include \"common/common-target.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"tree-pass.h\"\n #include \"predict.h\""}, {"sha": "9156f952784e9750aee22027744652696cca48f3", "filename": "gcc/gimple-expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgimple-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgimple-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-expr.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"demangle.h\"\n #include \"gimple-ssa.h\""}, {"sha": "62c555093596f6ed9254902bd5aa13c89fe7ad77", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"dumpfile.h\"\n #include \"bitmap.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\""}, {"sha": "24045f5248741f642f982b5010ced5faf0cbcd4b", "filename": "gcc/gimple-iterator.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgimple-iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgimple-iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-iterator.h?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -35,6 +35,16 @@ typedef struct gimple_stmt_iterator_d\n   basic_block bb;\n } gimple_stmt_iterator;\n  \n+enum gsi_iterator_update\n+{\n+  GSI_NEW_STMT,\t\t/* Only valid when single statement is added, move\n+\t\t\t   iterator to it.  */\n+  GSI_SAME_STMT,\t/* Leave the iterator at the same statement.  */\n+  GSI_CONTINUE_LINKING\t/* Move iterator to whatever position is suitable\n+\t\t\t   for linking other statements in the same\n+\t\t\t   direction.  */\n+};\n+\n extern void gsi_insert_seq_before_without_update (gimple_stmt_iterator *,\n \t\t\t\t\t\t  gimple_seq,\n \t\t\t\t\t\t  enum gsi_iterator_update);"}, {"sha": "6de20e396155876424d4c3b263ebbfce65a7a514", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -37,8 +37,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n-#include \"gimplify.h\"\n+#include \"gimple.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"basic-block.h\"\n #include \"tree-pass.h\"\n #include \"cfgloop.h\""}, {"sha": "ff798ff42b23aba3a8dde9a4c732bf9cbda5c80a", "filename": "gcc/gimple.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"gimple-iterator.h\"\n #include \"gimple-walk.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"diagnostic.h\"\n #include \"value-prof.h\""}, {"sha": "6a0c39b7fce089044edc7e12eafd1694e995bfda", "filename": "gcc/gimple.h", "status": "modified", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -847,85 +847,6 @@ typedef struct gimple_temp_hash_elt\n   tree temp;  /* Value */\n } elt_t;\n \n-/* Gimplify hashtable helper.  */\n-\n-struct gimplify_hasher : typed_free_remove <elt_t>\n-{\n-  typedef elt_t value_type;\n-  typedef elt_t compare_type;\n-  static inline hashval_t hash (const value_type *);\n-  static inline bool equal (const value_type *, const compare_type *);\n-};\n-\n-inline hashval_t\n-gimplify_hasher::hash (const value_type *p)\n-{\n-  tree t = p->val;\n-  return iterative_hash_expr (t, 0);\n-}\n-\n-inline bool\n-gimplify_hasher::equal (const value_type *p1, const compare_type *p2)\n-{\n-  tree t1 = p1->val;\n-  tree t2 = p2->val;\n-  enum tree_code code = TREE_CODE (t1);\n-\n-  if (TREE_CODE (t2) != code\n-      || TREE_TYPE (t1) != TREE_TYPE (t2))\n-    return false;\n-\n-  if (!operand_equal_p (t1, t2, 0))\n-    return false;\n-\n-#ifdef ENABLE_CHECKING\n-  /* Only allow them to compare equal if they also hash equal; otherwise\n-     results are nondeterminate, and we fail bootstrap comparison.  */\n-  gcc_assert (hash (p1) == hash (p2));\n-#endif\n-\n-  return true;\n-}\n-\n-struct gimplify_ctx\n-{\n-  struct gimplify_ctx *prev_context;\n-\n-  vec<gimple> bind_expr_stack;\n-  tree temps;\n-  gimple_seq conditional_cleanups;\n-  tree exit_label;\n-  tree return_temp;\n-\n-  vec<tree> case_labels;\n-  /* The formal temporary table.  Should this be persistent?  */\n-  hash_table <gimplify_hasher> temp_htab;\n-\n-  int conditions;\n-  bool save_stack;\n-  bool into_ssa;\n-  bool allow_rhs_cond_expr;\n-  bool in_cleanup_point_expr;\n-};\n-\n-/* Return true if gimplify_one_sizepos doesn't need to gimplify\n-   expr (when in TYPE_SIZE{,_UNIT} and similar type/decl size/bitsize\n-   fields).  */\n-static inline bool\n-is_gimple_sizepos (tree expr)\n-{\n-  /* gimplify_one_sizepos doesn't need to do anything if the value isn't there,\n-     is constant, or contains A PLACEHOLDER_EXPR.  We also don't want to do\n-     anything if it's already a VAR_DECL.  If it's a VAR_DECL from another\n-     function, the gimplifier will want to replace it with a new variable,\n-     but that will cause problems if this type is from outside the function.\n-     It's OK to have that here.  */\n-  return (expr == NULL_TREE\n-\t  || TREE_CONSTANT (expr)\n-\t  || TREE_CODE (expr) == VAR_DECL\n-\t  || CONTAINS_PLACEHOLDER_P (expr));\n-}                                        \n-\n /* Get the number of the next statement uid to be allocated.  */\n static inline unsigned int\n gimple_stmt_max_uid (struct function *fn)\n@@ -948,7 +869,6 @@ inc_gimple_stmt_max_uid (struct function *fn)\n }\n \n /* Miscellaneous helpers.  */\n-struct gimplify_omp_ctx;\n extern tree canonicalize_cond_expr_cond (tree);\n extern void dump_decl_set (FILE *, bitmap);\n extern bool nonfreeing_call_p (gimple);\n@@ -5202,16 +5122,6 @@ gimple_expr_type (const_gimple stmt)\n     return void_type_node;\n }\n \n-enum gsi_iterator_update\n-{\n-  GSI_NEW_STMT,\t\t/* Only valid when single statement is added, move\n-\t\t\t   iterator to it.  */\n-  GSI_SAME_STMT,\t/* Leave the iterator at the same statement.  */\n-  GSI_CONTINUE_LINKING\t/* Move iterator to whatever position is suitable\n-\t\t\t   for linking other statements in the same\n-\t\t\t   direction.  */\n-};\n-\n gimple gimple_call_copy_skip_args (gimple, bitmap);\n \n /* Enum and arrays used for allocation stats.  Keep in sync with"}, {"sha": "c4818fab75601b14c507580424437e2018297c58", "filename": "gcc/gimplify-me.c", "status": "added", "additions": 317, "deletions": 0, "changes": 317, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgimplify-me.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgimplify-me.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify-me.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -0,0 +1,317 @@\n+/* Tree lowering to gimple for middle end use only.  \n+   This converts the GENERIC functions-as-trees tree representation into\n+   the GIMPLE form.\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+   Major work done by Sebastian Pop <s.pop@laposte.net>,\n+   Diego Novillo <dnovillo@redhat.com> and Jason Merrill <jason@redhat.com>.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tree.h\"\n+#include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimplify.h\"\n+#include \"gimplify-me.h\"\n+#include \"gimple-ssa.h\"\n+#include \"tree-ssanames.h\"\n+\n+\n+/* Expand EXPR to list of gimple statements STMTS.  GIMPLE_TEST_F specifies\n+   the predicate that will hold for the result.  If VAR is not NULL, make the\n+   base variable of the final destination be VAR if suitable.  */\n+\n+tree\n+force_gimple_operand_1 (tree expr, gimple_seq *stmts,\n+\t\t\tgimple_predicate gimple_test_f, tree var)\n+{\n+  enum gimplify_status ret;\n+  struct gimplify_ctx gctx;\n+  location_t saved_location;\n+\n+  *stmts = NULL;\n+\n+  /* gimple_test_f might be more strict than is_gimple_val, make\n+     sure we pass both.  Just checking gimple_test_f doesn't work\n+     because most gimple predicates do not work recursively.  */\n+  if (is_gimple_val (expr)\n+      && (*gimple_test_f) (expr))\n+    return expr;\n+\n+  push_gimplify_context (&gctx);\n+  gimplify_ctxp->into_ssa = gimple_in_ssa_p (cfun);\n+  gimplify_ctxp->allow_rhs_cond_expr = true;\n+  saved_location = input_location;\n+  input_location = UNKNOWN_LOCATION;\n+\n+  if (var)\n+    {\n+      if (gimplify_ctxp->into_ssa\n+\t  && is_gimple_reg (var))\n+\tvar = make_ssa_name (var, NULL);\n+      expr = build2 (MODIFY_EXPR, TREE_TYPE (var), var, expr);\n+    }\n+\n+  if (TREE_CODE (expr) != MODIFY_EXPR\n+      && TREE_TYPE (expr) == void_type_node)\n+    {\n+      gimplify_and_add (expr, stmts);\n+      expr = NULL_TREE;\n+    }\n+  else\n+    {\n+      ret = gimplify_expr (&expr, stmts, NULL, gimple_test_f, fb_rvalue);\n+      gcc_assert (ret != GS_ERROR);\n+    }\n+\n+  input_location = saved_location;\n+  pop_gimplify_context (NULL);\n+\n+  return expr;\n+}\n+\n+/* Expand EXPR to list of gimple statements STMTS.  If SIMPLE is true,\n+   force the result to be either ssa_name or an invariant, otherwise\n+   just force it to be a rhs expression.  If VAR is not NULL, make the\n+   base variable of the final destination be VAR if suitable.  */\n+\n+tree\n+force_gimple_operand (tree expr, gimple_seq *stmts, bool simple, tree var)\n+{\n+  return force_gimple_operand_1 (expr, stmts,\n+\t\t\t\t simple ? is_gimple_val : is_gimple_reg_rhs,\n+\t\t\t\t var);\n+}\n+\n+/* Invoke force_gimple_operand_1 for EXPR with parameters GIMPLE_TEST_F\n+   and VAR.  If some statements are produced, emits them at GSI.\n+   If BEFORE is true.  the statements are appended before GSI, otherwise\n+   they are appended after it.  M specifies the way GSI moves after\n+   insertion (GSI_SAME_STMT or GSI_CONTINUE_LINKING are the usual values).  */\n+\n+tree\n+force_gimple_operand_gsi_1 (gimple_stmt_iterator *gsi, tree expr,\n+\t\t\t    gimple_predicate gimple_test_f,\n+\t\t\t    tree var, bool before,\n+\t\t\t    enum gsi_iterator_update m)\n+{\n+  gimple_seq stmts;\n+\n+  expr = force_gimple_operand_1 (expr, &stmts, gimple_test_f, var);\n+\n+  if (!gimple_seq_empty_p (stmts))\n+    {\n+      if (before)\n+\tgsi_insert_seq_before (gsi, stmts, m);\n+      else\n+\tgsi_insert_seq_after (gsi, stmts, m);\n+    }\n+\n+  return expr;\n+}\n+\n+/* Invoke force_gimple_operand_1 for EXPR with parameter VAR.\n+   If SIMPLE is true, force the result to be either ssa_name or an invariant,\n+   otherwise just force it to be a rhs expression.  If some statements are\n+   produced, emits them at GSI.  If BEFORE is true, the statements are\n+   appended before GSI, otherwise they are appended after it.  M specifies\n+   the way GSI moves after insertion (GSI_SAME_STMT or GSI_CONTINUE_LINKING\n+   are the usual values).  */\n+\n+tree\n+force_gimple_operand_gsi (gimple_stmt_iterator *gsi, tree expr,\n+\t\t\t  bool simple_p, tree var, bool before,\n+\t\t\t  enum gsi_iterator_update m)\n+{\n+  return force_gimple_operand_gsi_1 (gsi, expr,\n+\t\t\t\t     simple_p\n+\t\t\t\t     ? is_gimple_val : is_gimple_reg_rhs,\n+\t\t\t\t     var, before, m);\n+}\n+\n+/* Some transformations like inlining may invalidate the GIMPLE form\n+   for operands.  This function traverses all the operands in STMT and\n+   gimplifies anything that is not a valid gimple operand.  Any new\n+   GIMPLE statements are inserted before *GSI_P.  */\n+\n+void\n+gimple_regimplify_operands (gimple stmt, gimple_stmt_iterator *gsi_p)\n+{\n+  size_t i, num_ops;\n+  tree lhs;\n+  gimple_seq pre = NULL;\n+  gimple post_stmt = NULL;\n+  struct gimplify_ctx gctx;\n+\n+  push_gimplify_context (&gctx);\n+  gimplify_ctxp->into_ssa = gimple_in_ssa_p (cfun);\n+\n+  switch (gimple_code (stmt))\n+    {\n+    case GIMPLE_COND:\n+      gimplify_expr (gimple_cond_lhs_ptr (stmt), &pre, NULL,\n+\t\t     is_gimple_val, fb_rvalue);\n+      gimplify_expr (gimple_cond_rhs_ptr (stmt), &pre, NULL,\n+\t\t     is_gimple_val, fb_rvalue);\n+      break;\n+    case GIMPLE_SWITCH:\n+      gimplify_expr (gimple_switch_index_ptr (stmt), &pre, NULL,\n+\t\t     is_gimple_val, fb_rvalue);\n+      break;\n+    case GIMPLE_OMP_ATOMIC_LOAD:\n+      gimplify_expr (gimple_omp_atomic_load_rhs_ptr (stmt), &pre, NULL,\n+\t\t     is_gimple_val, fb_rvalue);\n+      break;\n+    case GIMPLE_ASM:\n+      {\n+\tsize_t i, noutputs = gimple_asm_noutputs (stmt);\n+\tconst char *constraint, **oconstraints;\n+\tbool allows_mem, allows_reg, is_inout;\n+\n+\toconstraints\n+\t  = (const char **) alloca ((noutputs) * sizeof (const char *));\n+\tfor (i = 0; i < noutputs; i++)\n+\t  {\n+\t    tree op = gimple_asm_output_op (stmt, i);\n+\t    constraint = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (op)));\n+\t    oconstraints[i] = constraint;\n+\t    parse_output_constraint (&constraint, i, 0, 0, &allows_mem,\n+\t\t\t\t     &allows_reg, &is_inout);\n+\t    gimplify_expr (&TREE_VALUE (op), &pre, NULL,\n+\t\t\t   is_inout ? is_gimple_min_lval : is_gimple_lvalue,\n+\t\t\t   fb_lvalue | fb_mayfail);\n+\t  }\n+\tfor (i = 0; i < gimple_asm_ninputs (stmt); i++)\n+\t  {\n+\t    tree op = gimple_asm_input_op (stmt, i);\n+\t    constraint = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (op)));\n+\t    parse_input_constraint (&constraint, 0, 0, noutputs, 0,\n+\t\t\t\t    oconstraints, &allows_mem, &allows_reg);\n+\t    if (TREE_ADDRESSABLE (TREE_TYPE (TREE_VALUE (op))) && allows_mem)\n+\t      allows_reg = 0;\n+\t    if (!allows_reg && allows_mem)\n+\t      gimplify_expr (&TREE_VALUE (op), &pre, NULL,\n+\t\t\t     is_gimple_lvalue, fb_lvalue | fb_mayfail);\n+\t    else\n+\t      gimplify_expr (&TREE_VALUE (op), &pre, NULL,\n+\t\t\t     is_gimple_asm_val, fb_rvalue);\n+\t  }\n+      }\n+      break;\n+    default:\n+      /* NOTE: We start gimplifying operands from last to first to\n+\t make sure that side-effects on the RHS of calls, assignments\n+\t and ASMs are executed before the LHS.  The ordering is not\n+\t important for other statements.  */\n+      num_ops = gimple_num_ops (stmt);\n+      for (i = num_ops; i > 0; i--)\n+\t{\n+\t  tree op = gimple_op (stmt, i - 1);\n+\t  if (op == NULL_TREE)\n+\t    continue;\n+\t  if (i == 1 && (is_gimple_call (stmt) || is_gimple_assign (stmt)))\n+\t    gimplify_expr (&op, &pre, NULL, is_gimple_lvalue, fb_lvalue);\n+\t  else if (i == 2\n+\t\t   && is_gimple_assign (stmt)\n+\t\t   && num_ops == 2\n+\t\t   && get_gimple_rhs_class (gimple_expr_code (stmt))\n+\t\t      == GIMPLE_SINGLE_RHS)\n+\t    gimplify_expr (&op, &pre, NULL,\n+\t\t\t   rhs_predicate_for (gimple_assign_lhs (stmt)),\n+\t\t\t   fb_rvalue);\n+\t  else if (i == 2 && is_gimple_call (stmt))\n+\t    {\n+\t      if (TREE_CODE (op) == FUNCTION_DECL)\n+\t\tcontinue;\n+\t      gimplify_expr (&op, &pre, NULL, is_gimple_call_addr, fb_rvalue);\n+\t    }\n+\t  else\n+\t    gimplify_expr (&op, &pre, NULL, is_gimple_val, fb_rvalue);\n+\t  gimple_set_op (stmt, i - 1, op);\n+\t}\n+\n+      lhs = gimple_get_lhs (stmt);\n+      /* If the LHS changed it in a way that requires a simple RHS,\n+\t create temporary.  */\n+      if (lhs && !is_gimple_reg (lhs))\n+\t{\n+\t  bool need_temp = false;\n+\n+\t  if (is_gimple_assign (stmt)\n+\t      && num_ops == 2\n+\t      && get_gimple_rhs_class (gimple_expr_code (stmt))\n+\t\t == GIMPLE_SINGLE_RHS)\n+\t    gimplify_expr (gimple_assign_rhs1_ptr (stmt), &pre, NULL,\n+\t\t\t   rhs_predicate_for (gimple_assign_lhs (stmt)),\n+\t\t\t   fb_rvalue);\n+\t  else if (is_gimple_reg (lhs))\n+\t    {\n+\t      if (is_gimple_reg_type (TREE_TYPE (lhs)))\n+\t\t{\n+\t\t  if (is_gimple_call (stmt))\n+\t\t    {\n+\t\t      i = gimple_call_flags (stmt);\n+\t\t      if ((i & ECF_LOOPING_CONST_OR_PURE)\n+\t\t\t  || !(i & (ECF_CONST | ECF_PURE)))\n+\t\t\tneed_temp = true;\n+\t\t    }\n+\t\t  if (stmt_can_throw_internal (stmt))\n+\t\t    need_temp = true;\n+\t\t}\n+\t    }\n+\t  else\n+\t    {\n+\t      if (is_gimple_reg_type (TREE_TYPE (lhs)))\n+\t\tneed_temp = true;\n+\t      else if (TYPE_MODE (TREE_TYPE (lhs)) != BLKmode)\n+\t\t{\n+\t\t  if (is_gimple_call (stmt))\n+\t\t    {\n+\t\t      tree fndecl = gimple_call_fndecl (stmt);\n+\n+\t\t      if (!aggregate_value_p (TREE_TYPE (lhs), fndecl)\n+\t\t\t  && !(fndecl && DECL_RESULT (fndecl)\n+\t\t\t       && DECL_BY_REFERENCE (DECL_RESULT (fndecl))))\n+\t\t\tneed_temp = true;\n+\t\t    }\n+\t\t  else\n+\t\t    need_temp = true;\n+\t\t}\n+\t    }\n+\t  if (need_temp)\n+\t    {\n+\t      tree temp = create_tmp_reg (TREE_TYPE (lhs), NULL);\n+\t      if (gimple_in_ssa_p (cfun))\n+\t\ttemp = make_ssa_name (temp, NULL);\n+\t      gimple_set_lhs (stmt, temp);\n+\t      post_stmt = gimple_build_assign (lhs, temp);\n+\t    }\n+\t}\n+      break;\n+    }\n+\n+  if (!gimple_seq_empty_p (pre))\n+    gsi_insert_seq_before (gsi_p, pre, GSI_SAME_STMT);\n+  if (post_stmt)\n+    gsi_insert_after (gsi_p, post_stmt, GSI_NEW_STMT);\n+\n+  pop_gimplify_context (NULL);\n+}\n+\n+"}, {"sha": "a995af1d30ec9fae97b3f71263564b43fa5d65d1", "filename": "gcc/gimplify-me.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgimplify-me.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgimplify-me.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify-me.h?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -0,0 +1,37 @@\n+/* Header file for middle end gimplification.\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_GIMPLIFY_ME_H\n+#define GCC_GIMPLIFY_ME_H\n+\n+/* Validation of GIMPLE expressions.  Note that these predicates only check\n+ *    the basic form of the expression, they don't recurse to make sure that\n+ *       underlying nodes are also of the right form.  */\n+typedef bool (*gimple_predicate)(tree);\n+\n+extern tree force_gimple_operand_1 (tree, gimple_seq *, gimple_predicate, tree);\n+extern tree force_gimple_operand (tree, gimple_seq *, bool, tree);\n+extern tree force_gimple_operand_gsi_1 (gimple_stmt_iterator *, tree,\n+\t\t\t\t\tgimple_predicate, tree,\n+\t\t\t\t\tbool, enum gsi_iterator_update);\n+extern tree force_gimple_operand_gsi (gimple_stmt_iterator *, tree, bool, tree,\n+\t\t\t\t      bool, enum gsi_iterator_update);\n+extern void gimple_regimplify_operands (gimple, gimple_stmt_iterator *);\n+\n+#endif /* GCC_GIMPLIFY_ME_H */"}, {"sha": "4e6f44898bacd4eef8a29cf01ad56f0a620404df", "filename": "gcc/gimplify.c", "status": "modified", "additions": 32, "deletions": 293, "changes": 325, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -23,8 +23,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tm.h\"\n #include \"tree.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n #include \"tree-iterator.h\"\n@@ -37,24 +37,15 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-cfg.h\"\n #include \"tree-ssanames.h\"\n #include \"tree-ssa.h\"\n-#include \"timevar.h\"\n-#include \"hashtab.h\"\n-#include \"flags.h\"\n-#include \"function.h\"\n-#include \"ggc.h\"\n #include \"diagnostic-core.h\"\n #include \"target.h\"\n-#include \"pointer-set.h\"\n #include \"splay-tree.h\"\n-#include \"vec.h\"\n #include \"omp-low.h\"\n #include \"gimple-low.h\"\n #include \"cilk.h\"\n \n #include \"langhooks-def.h\"\t/* FIXME: for lhd_set_decl_assembler_name */\n #include \"tree-pass.h\"\t\t/* FIXME: only for PROP_gimple_any */\n-#include \"expr.h\"\n-#include \"tm_p.h\"\n \n enum gimplify_omp_var_data\n {\n@@ -102,7 +93,7 @@ struct gimplify_omp_ctx\n   bool combined_loop;\n };\n \n-static struct gimplify_ctx *gimplify_ctxp;\n+struct gimplify_ctx *gimplify_ctxp;\n static struct gimplify_omp_ctx *gimplify_omp_ctxp;\n \n \n@@ -3393,7 +3384,7 @@ gimplify_init_ctor_eval (tree object, vec<constructor_elt, va_gc> *elts,\n \n /* Return the appropriate RHS predicate for this LHS.  */\n \n-static gimple_predicate\n+gimple_predicate\n rhs_predicate_for (tree lhs)\n {\n   if (is_gimple_reg (lhs))\n@@ -8590,287 +8581,6 @@ gimplify_function_tree (tree fndecl)\n   pop_cfun ();\n }\n \n-/* Some transformations like inlining may invalidate the GIMPLE form\n-   for operands.  This function traverses all the operands in STMT and\n-   gimplifies anything that is not a valid gimple operand.  Any new\n-   GIMPLE statements are inserted before *GSI_P.  */\n-\n-void\n-gimple_regimplify_operands (gimple stmt, gimple_stmt_iterator *gsi_p)\n-{\n-  size_t i, num_ops;\n-  tree lhs;\n-  gimple_seq pre = NULL;\n-  gimple post_stmt = NULL;\n-  struct gimplify_ctx gctx;\n-\n-  push_gimplify_context (&gctx);\n-  gimplify_ctxp->into_ssa = gimple_in_ssa_p (cfun);\n-\n-  switch (gimple_code (stmt))\n-    {\n-    case GIMPLE_COND:\n-      gimplify_expr (gimple_cond_lhs_ptr (stmt), &pre, NULL,\n-\t\t     is_gimple_val, fb_rvalue);\n-      gimplify_expr (gimple_cond_rhs_ptr (stmt), &pre, NULL,\n-\t\t     is_gimple_val, fb_rvalue);\n-      break;\n-    case GIMPLE_SWITCH:\n-      gimplify_expr (gimple_switch_index_ptr (stmt), &pre, NULL,\n-\t\t     is_gimple_val, fb_rvalue);\n-      break;\n-    case GIMPLE_OMP_ATOMIC_LOAD:\n-      gimplify_expr (gimple_omp_atomic_load_rhs_ptr (stmt), &pre, NULL,\n-\t\t     is_gimple_val, fb_rvalue);\n-      break;\n-    case GIMPLE_ASM:\n-      {\n-\tsize_t i, noutputs = gimple_asm_noutputs (stmt);\n-\tconst char *constraint, **oconstraints;\n-\tbool allows_mem, allows_reg, is_inout;\n-\n-\toconstraints\n-\t  = (const char **) alloca ((noutputs) * sizeof (const char *));\n-\tfor (i = 0; i < noutputs; i++)\n-\t  {\n-\t    tree op = gimple_asm_output_op (stmt, i);\n-\t    constraint = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (op)));\n-\t    oconstraints[i] = constraint;\n-\t    parse_output_constraint (&constraint, i, 0, 0, &allows_mem,\n-\t\t\t\t     &allows_reg, &is_inout);\n-\t    gimplify_expr (&TREE_VALUE (op), &pre, NULL,\n-\t\t\t   is_inout ? is_gimple_min_lval : is_gimple_lvalue,\n-\t\t\t   fb_lvalue | fb_mayfail);\n-\t  }\n-\tfor (i = 0; i < gimple_asm_ninputs (stmt); i++)\n-\t  {\n-\t    tree op = gimple_asm_input_op (stmt, i);\n-\t    constraint = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (op)));\n-\t    parse_input_constraint (&constraint, 0, 0, noutputs, 0,\n-\t\t\t\t    oconstraints, &allows_mem, &allows_reg);\n-\t    if (TREE_ADDRESSABLE (TREE_TYPE (TREE_VALUE (op))) && allows_mem)\n-\t      allows_reg = 0;\n-\t    if (!allows_reg && allows_mem)\n-\t      gimplify_expr (&TREE_VALUE (op), &pre, NULL,\n-\t\t\t     is_gimple_lvalue, fb_lvalue | fb_mayfail);\n-\t    else\n-\t      gimplify_expr (&TREE_VALUE (op), &pre, NULL,\n-\t\t\t     is_gimple_asm_val, fb_rvalue);\n-\t  }\n-      }\n-      break;\n-    default:\n-      /* NOTE: We start gimplifying operands from last to first to\n-\t make sure that side-effects on the RHS of calls, assignments\n-\t and ASMs are executed before the LHS.  The ordering is not\n-\t important for other statements.  */\n-      num_ops = gimple_num_ops (stmt);\n-      for (i = num_ops; i > 0; i--)\n-\t{\n-\t  tree op = gimple_op (stmt, i - 1);\n-\t  if (op == NULL_TREE)\n-\t    continue;\n-\t  if (i == 1 && (is_gimple_call (stmt) || is_gimple_assign (stmt)))\n-\t    gimplify_expr (&op, &pre, NULL, is_gimple_lvalue, fb_lvalue);\n-\t  else if (i == 2\n-\t\t   && is_gimple_assign (stmt)\n-\t\t   && num_ops == 2\n-\t\t   && get_gimple_rhs_class (gimple_expr_code (stmt))\n-\t\t      == GIMPLE_SINGLE_RHS)\n-\t    gimplify_expr (&op, &pre, NULL,\n-\t\t\t   rhs_predicate_for (gimple_assign_lhs (stmt)),\n-\t\t\t   fb_rvalue);\n-\t  else if (i == 2 && is_gimple_call (stmt))\n-\t    {\n-\t      if (TREE_CODE (op) == FUNCTION_DECL)\n-\t\tcontinue;\n-\t      gimplify_expr (&op, &pre, NULL, is_gimple_call_addr, fb_rvalue);\n-\t    }\n-\t  else\n-\t    gimplify_expr (&op, &pre, NULL, is_gimple_val, fb_rvalue);\n-\t  gimple_set_op (stmt, i - 1, op);\n-\t}\n-\n-      lhs = gimple_get_lhs (stmt);\n-      /* If the LHS changed it in a way that requires a simple RHS,\n-\t create temporary.  */\n-      if (lhs && !is_gimple_reg (lhs))\n-\t{\n-\t  bool need_temp = false;\n-\n-\t  if (is_gimple_assign (stmt)\n-\t      && num_ops == 2\n-\t      && get_gimple_rhs_class (gimple_expr_code (stmt))\n-\t\t == GIMPLE_SINGLE_RHS)\n-\t    gimplify_expr (gimple_assign_rhs1_ptr (stmt), &pre, NULL,\n-\t\t\t   rhs_predicate_for (gimple_assign_lhs (stmt)),\n-\t\t\t   fb_rvalue);\n-\t  else if (is_gimple_reg (lhs))\n-\t    {\n-\t      if (is_gimple_reg_type (TREE_TYPE (lhs)))\n-\t\t{\n-\t\t  if (is_gimple_call (stmt))\n-\t\t    {\n-\t\t      i = gimple_call_flags (stmt);\n-\t\t      if ((i & ECF_LOOPING_CONST_OR_PURE)\n-\t\t\t  || !(i & (ECF_CONST | ECF_PURE)))\n-\t\t\tneed_temp = true;\n-\t\t    }\n-\t\t  if (stmt_can_throw_internal (stmt))\n-\t\t    need_temp = true;\n-\t\t}\n-\t    }\n-\t  else\n-\t    {\n-\t      if (is_gimple_reg_type (TREE_TYPE (lhs)))\n-\t\tneed_temp = true;\n-\t      else if (TYPE_MODE (TREE_TYPE (lhs)) != BLKmode)\n-\t\t{\n-\t\t  if (is_gimple_call (stmt))\n-\t\t    {\n-\t\t      tree fndecl = gimple_call_fndecl (stmt);\n-\n-\t\t      if (!aggregate_value_p (TREE_TYPE (lhs), fndecl)\n-\t\t\t  && !(fndecl && DECL_RESULT (fndecl)\n-\t\t\t       && DECL_BY_REFERENCE (DECL_RESULT (fndecl))))\n-\t\t\tneed_temp = true;\n-\t\t    }\n-\t\t  else\n-\t\t    need_temp = true;\n-\t\t}\n-\t    }\n-\t  if (need_temp)\n-\t    {\n-\t      tree temp = create_tmp_reg (TREE_TYPE (lhs), NULL);\n-\t      if (gimple_in_ssa_p (cfun))\n-\t\ttemp = make_ssa_name (temp, NULL);\n-\t      gimple_set_lhs (stmt, temp);\n-\t      post_stmt = gimple_build_assign (lhs, temp);\n-\t    }\n-\t}\n-      break;\n-    }\n-\n-  if (!gimple_seq_empty_p (pre))\n-    gsi_insert_seq_before (gsi_p, pre, GSI_SAME_STMT);\n-  if (post_stmt)\n-    gsi_insert_after (gsi_p, post_stmt, GSI_NEW_STMT);\n-\n-  pop_gimplify_context (NULL);\n-}\n-\n-/* Expand EXPR to list of gimple statements STMTS.  GIMPLE_TEST_F specifies\n-   the predicate that will hold for the result.  If VAR is not NULL, make the\n-   base variable of the final destination be VAR if suitable.  */\n-\n-tree\n-force_gimple_operand_1 (tree expr, gimple_seq *stmts,\n-\t\t\tgimple_predicate gimple_test_f, tree var)\n-{\n-  enum gimplify_status ret;\n-  struct gimplify_ctx gctx;\n-  location_t saved_location;\n-\n-  *stmts = NULL;\n-\n-  /* gimple_test_f might be more strict than is_gimple_val, make\n-     sure we pass both.  Just checking gimple_test_f doesn't work\n-     because most gimple predicates do not work recursively.  */\n-  if (is_gimple_val (expr)\n-      && (*gimple_test_f) (expr))\n-    return expr;\n-\n-  push_gimplify_context (&gctx);\n-  gimplify_ctxp->into_ssa = gimple_in_ssa_p (cfun);\n-  gimplify_ctxp->allow_rhs_cond_expr = true;\n-  saved_location = input_location;\n-  input_location = UNKNOWN_LOCATION;\n-\n-  if (var)\n-    {\n-      if (gimplify_ctxp->into_ssa\n-\t  && is_gimple_reg (var))\n-\tvar = make_ssa_name (var, NULL);\n-      expr = build2 (MODIFY_EXPR, TREE_TYPE (var), var, expr);\n-    }\n-\n-  if (TREE_CODE (expr) != MODIFY_EXPR\n-      && TREE_TYPE (expr) == void_type_node)\n-    {\n-      gimplify_and_add (expr, stmts);\n-      expr = NULL_TREE;\n-    }\n-  else\n-    {\n-      ret = gimplify_expr (&expr, stmts, NULL, gimple_test_f, fb_rvalue);\n-      gcc_assert (ret != GS_ERROR);\n-    }\n-\n-  input_location = saved_location;\n-  pop_gimplify_context (NULL);\n-\n-  return expr;\n-}\n-\n-/* Expand EXPR to list of gimple statements STMTS.  If SIMPLE is true,\n-   force the result to be either ssa_name or an invariant, otherwise\n-   just force it to be a rhs expression.  If VAR is not NULL, make the\n-   base variable of the final destination be VAR if suitable.  */\n-\n-tree\n-force_gimple_operand (tree expr, gimple_seq *stmts, bool simple, tree var)\n-{\n-  return force_gimple_operand_1 (expr, stmts,\n-\t\t\t\t simple ? is_gimple_val : is_gimple_reg_rhs,\n-\t\t\t\t var);\n-}\n-\n-/* Invoke force_gimple_operand_1 for EXPR with parameters GIMPLE_TEST_F\n-   and VAR.  If some statements are produced, emits them at GSI.\n-   If BEFORE is true.  the statements are appended before GSI, otherwise\n-   they are appended after it.  M specifies the way GSI moves after\n-   insertion (GSI_SAME_STMT or GSI_CONTINUE_LINKING are the usual values).  */\n-\n-tree\n-force_gimple_operand_gsi_1 (gimple_stmt_iterator *gsi, tree expr,\n-\t\t\t    gimple_predicate gimple_test_f,\n-\t\t\t    tree var, bool before,\n-\t\t\t    enum gsi_iterator_update m)\n-{\n-  gimple_seq stmts;\n-\n-  expr = force_gimple_operand_1 (expr, &stmts, gimple_test_f, var);\n-\n-  if (!gimple_seq_empty_p (stmts))\n-    {\n-      if (before)\n-\tgsi_insert_seq_before (gsi, stmts, m);\n-      else\n-\tgsi_insert_seq_after (gsi, stmts, m);\n-    }\n-\n-  return expr;\n-}\n-\n-/* Invoke force_gimple_operand_1 for EXPR with parameter VAR.\n-   If SIMPLE is true, force the result to be either ssa_name or an invariant,\n-   otherwise just force it to be a rhs expression.  If some statements are\n-   produced, emits them at GSI.  If BEFORE is true, the statements are\n-   appended before GSI, otherwise they are appended after it.  M specifies\n-   the way GSI moves after insertion (GSI_SAME_STMT or GSI_CONTINUE_LINKING\n-   are the usual values).  */\n-\n-tree\n-force_gimple_operand_gsi (gimple_stmt_iterator *gsi, tree expr,\n-\t\t\t  bool simple_p, tree var, bool before,\n-\t\t\t  enum gsi_iterator_update m)\n-{\n-  return force_gimple_operand_gsi_1 (gsi, expr,\n-\t\t\t\t     simple_p\n-\t\t\t\t     ? is_gimple_val : is_gimple_reg_rhs,\n-\t\t\t\t     var, before, m);\n-}\n-\n /* Return a dummy expression of type TYPE in order to keep going after an\n    error.  */\n \n@@ -8991,3 +8701,32 @@ gimplify_assign (tree dst, tree src, gimple_seq *seq_p)\n   return gimple_seq_last_stmt (*seq_p);\n }\n \n+inline hashval_t\n+gimplify_hasher::hash (const value_type *p)\n+{\n+  tree t = p->val;\n+  return iterative_hash_expr (t, 0);\n+}\n+\n+inline bool\n+gimplify_hasher::equal (const value_type *p1, const compare_type *p2)\n+{\n+  tree t1 = p1->val;\n+  tree t2 = p2->val;\n+  enum tree_code code = TREE_CODE (t1);\n+\n+  if (TREE_CODE (t2) != code\n+      || TREE_TYPE (t1) != TREE_TYPE (t2))\n+    return false;\n+\n+  if (!operand_equal_p (t1, t2, 0))\n+    return false;\n+\n+#ifdef ENABLE_CHECKING\n+  /* Only allow them to compare equal if they also hash equal; otherwise\n+     results are nondeterminate, and we fail bootstrap comparison.  */\n+  gcc_assert (hash (p1) == hash (p2));\n+#endif\n+\n+  return true;\n+}"}, {"sha": "3f7e1b327a9661a6a9cc0500d5078944e6da1b26", "filename": "gcc/gimplify.h", "status": "modified", "additions": 51, "deletions": 11, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgimplify.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgimplify.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.h?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -20,8 +20,6 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_GIMPLIFY_H\n #define GCC_GIMPLIFY_H\n \n-#include \"gimple.h\"\n-\n /* Validation of GIMPLE expressions.  Note that these predicates only check\n    the basic form of the expression, they don't recurse to make sure that\n    underlying nodes are also of the right form.  */\n@@ -50,7 +48,38 @@ enum gimplify_status {\n   GS_OK\t\t= 0,\t/* We did something, maybe more to do.  */\n   GS_ALL_DONE\t= 1\t/* The expression is fully gimplified.  */\n };\n+/* Gimplify hashtable helper.  */\n+\n+struct gimplify_hasher : typed_free_remove <elt_t>\n+{\n+  typedef elt_t value_type;\n+  typedef elt_t compare_type;\n+  static inline hashval_t hash (const value_type *);\n+  static inline bool equal (const value_type *, const compare_type *);\n+};\n+\n+struct gimplify_ctx\n+{\n+  struct gimplify_ctx *prev_context;\n+\n+  vec<gimple> bind_expr_stack;\n+  tree temps;\n+  gimple_seq conditional_cleanups;\n+  tree exit_label;\n+  tree return_temp;\n+\n+  vec<tree> case_labels;\n+  /* The formal temporary table.  Should this be persistent?  */\n+  hash_table <gimplify_hasher> temp_htab;\n+\n+  int conditions;\n+  bool save_stack;\n+  bool into_ssa;\n+  bool allow_rhs_cond_expr;\n+  bool in_cleanup_point_expr;\n+};\n \n+extern struct gimplify_ctx *gimplify_ctxp;\n extern void push_gimplify_context (struct gimplify_ctx *);\n extern void pop_gimplify_context (gimple);\n extern gimple gimple_current_bind_expr (void);\n@@ -67,6 +96,7 @@ extern tree build_and_jump (tree *);\n extern enum gimplify_status gimplify_self_mod_expr (tree *, gimple_seq *,\n \t\t\t\t\t\t    gimple_seq *, bool, tree);\n extern tree gimple_boolify (tree);\n+extern gimple_predicate rhs_predicate_for (tree);\n extern bool gimplify_stmt (tree *, gimple_seq *);\n extern void omp_firstprivatize_variable (struct gimplify_omp_ctx *, tree);\n extern enum gimplify_status gimplify_expr (tree *, gimple_seq *, gimple_seq *,\n@@ -76,17 +106,27 @@ extern void gimplify_type_sizes (tree, gimple_seq *);\n extern void gimplify_one_sizepos (tree *, gimple_seq *);\n extern gimple gimplify_body (tree, bool);\n extern void gimplify_function_tree (tree);\n-extern void gimple_regimplify_operands (gimple, gimple_stmt_iterator *);\n-extern tree force_gimple_operand_1 (tree, gimple_seq *, gimple_predicate, tree);\n-extern tree force_gimple_operand (tree, gimple_seq *, bool, tree);\n-extern tree force_gimple_operand_gsi_1 (gimple_stmt_iterator *, tree,\n-\t\t\t\t\tgimple_predicate, tree,\n-\t\t\t\t\tbool, enum gsi_iterator_update);\n-extern tree force_gimple_operand_gsi (gimple_stmt_iterator *, tree, bool, tree,\n-\t\t\t\t      bool, enum gsi_iterator_update);\n-\n extern enum gimplify_status gimplify_va_arg_expr (tree *, gimple_seq *,\n \t\t\t\t\t\t  gimple_seq *);\n gimple gimplify_assign (tree, tree, gimple_seq *);\n \n+/* Return true if gimplify_one_sizepos doesn't need to gimplify\n+   expr (when in TYPE_SIZE{,_UNIT} and similar type/decl size/bitsize\n+   fields).  */\n+\n+static inline bool\n+is_gimple_sizepos (tree expr)\n+{\n+  /* gimplify_one_sizepos doesn't need to do anything if the value isn't there,\n+     is constant, or contains A PLACEHOLDER_EXPR.  We also don't want to do\n+     anything if it's already a VAR_DECL.  If it's a VAR_DECL from another\n+     function, the gimplifier will want to replace it with a new variable,\n+     but that will cause problems if this type is from outside the function.\n+     It's OK to have that here.  */\n+  return (expr == NULL_TREE\n+\t  || TREE_CONSTANT (expr)\n+\t  || TREE_CODE (expr) == VAR_DECL\n+\t  || CONTAINS_PLACEHOLDER_P (expr));\n+}                                        \n+\n #endif /* GCC_GIMPLIFY_H */"}, {"sha": "54d9f3bf9b4fe40251849011a7a1e167cf6dcabf", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -1,6 +1,10 @@\n+2013-11-14  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* go-lang.c: Include only gimplify.h and gimple.h as needed.\n+\n 2013-11-12  Andrew MacLeod  <amacleod@redhat.com>\n \n-\t* go/go-lang.c: Include gimplify.h.\n+\t* go-lang.c: Include gimplify.h.\n \n 2013-11-06  Ian Lance Taylor  <iant@google.com>\n "}, {"sha": "aa1d80b5be2bc498ac6567f1b118a053976c471c", "filename": "gcc/go/go-lang.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgo%2Fgo-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgo%2Fgo-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-lang.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"opts.h\"\n #include \"tree.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"ggc.h\"\n #include \"toplev.h\""}, {"sha": "44aecfbebf6a440b7b8325fa89c3e781399fa4b8", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -36,8 +36,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"diagnostic-core.h\"\n #include \"tree.h\"\n-#include \"gimplify.h\"\n+#include \"gimple.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-ssa-loop-manip.h\"\n #include \"tree-ssa-loop.h\""}, {"sha": "a07e047832e34e48cac5e7347865e79c2999f9b8", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -34,8 +34,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n-#include \"gimplify.h\"\n+#include \"gimple.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "eb464e4d51ea2a516448a342fbaa7a8616d4fb25", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -21,8 +21,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-walk.h\"\n #include \"langhooks.h\"\n #include \"ggc.h\""}, {"sha": "e55b3f59dbcc4d0463b45c6164027a9ee005448b", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -78,8 +78,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-walk.h\"\n #include \"target.h\"\n #include \"ipa-prop.h\""}, {"sha": "f43986214d1d202af570743a3a8989a93c36241f", "filename": "gcc/ipa.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"cgraph.h\"\n #include \"tree-pass.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"ggc.h\"\n #include \"flags.h\""}, {"sha": "a474ccc0d7f2e5bff427fd2e852177451b353b35", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -1,6 +1,10 @@\n+2013-11-14  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* java-gimplify.c: Include only gimplify.h and gimple.h as needed.\n+\n 2013-11-12  Andrew MacLeod  <amacleod@redhat.com>\n \n-\t* java/java-gimplify.c: Include gimplify.h.\n+\t* java-gimplify.c: Include gimplify.h.\n \n 2013-11-07  Jeff Law  <law@redhat.com>\n "}, {"sha": "f2d0460ae31ace6848d4d386d692a2025633379c", "filename": "gcc/java/java-gimplify.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fjava%2Fjava-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fjava%2Fjava-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-gimplify.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -27,6 +27,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"tree.h\"\n #include \"java-tree.h\"\n #include \"dumpfile.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n \n static tree java_gimplify_block (tree);"}, {"sha": "ec0dd4d75ee367683bb9c6b3fcf256f08acff7d5", "filename": "gcc/langhooks.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"toplev.h\"\n #include \"tree.h\"\n #include \"tree-inline.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"rtl.h\"\n #include \"insn-config.h\""}, {"sha": "8777efba1521e8e38a75889191892acf9c0feabf", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -1,6 +1,10 @@\n+2013-11-14  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* objc-act.c: Include only gimplify.h and gimple.h as needed.\n+\n 2013-11-12  Andrew MacLeod  <amacleod@redhat.com>\n \n-\t* objc/objc-act.c: Include gimplify.h.\n+\t* objc-act.c: Include gimplify.h.\n \n 2013-11-07  Andrew MacLeod  <amacleod@redhat.com>\n "}, {"sha": "9a640a3edd3641bf29f92f1cfac8d9505770fbb7", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -60,6 +60,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pretty-print.h\"\n \n /* For enum gimplify_status */\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n \n /* For encode_method_prototype().  */"}, {"sha": "5be9ff8ec406227f3f43516b65e7d41ae398b132", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -27,8 +27,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"rtl.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-walk.h\"\n #include \"tree-iterator.h\"\n #include \"tree-inline.h\""}, {"sha": "d05b14afbb80d387dea9ce4d80c48e157f9cfdd4", "filename": "gcc/sese.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -25,8 +25,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hash-table.h\"\n #include \"tree.h\"\n #include \"tree-pretty-print.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "264c33e3a0b7ad6f40571460ea1a4b994a4805da", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"tree-inline.h\"\n #include \"tree-dump.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n \n /* Data type for the expressions representing sizes of data types."}, {"sha": "55ab7d07b6704ecfa6fdaceb0422102a9c13a5f7", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -68,6 +68,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"recog.h\"\n #include \"intl.h\"\n #include \"opts.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"tree-ssanames.h\"\n #include \"tree-ssa-alias.h\""}, {"sha": "b56ff73508130b1fc18f5614de9fc139ed0215e0", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -22,8 +22,10 @@\n #include \"coretypes.h\"\n #include \"hash-table.h\"\n #include \"tree.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-walk.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\""}, {"sha": "d6d5686ef159a72ad4e1902bf7927a2e0c733431", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pretty-print.h\"\n #include \"pointer-set.h\"\n #include \"tree-affine.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"flags.h\"\n #include \"dumpfile.h\""}, {"sha": "d7f62125e4a5f42886dcc0d4fa767735ccb460ef", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -30,8 +30,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"ggc.h\"\n #include \"gimple-pretty-print.h\"\n-#include \"gimplify.h\"\n+#include \"gimple.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-walk.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\""}, {"sha": "e864eed94f8bfef52851a7fec3f88d082e06859e", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"ggc.h\"\n #include \"langhooks.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\""}, {"sha": "130674e673f56125baba1b7131fa86e2c6cfee83", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -23,8 +23,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"flags.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "81403f25aa09da5b9c1017b2e770c7385f60f2af", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -88,8 +88,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "fb9d2c41eb3ec7875cf703a87b339adc32ec080d", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -34,8 +34,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"tree-iterator.h\"\n #include \"intl.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-walk.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\""}, {"sha": "331af04b5feaf5f1ccba7547d933fbb76c477b52", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -45,8 +45,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n-#include \"gimplify.h\"\n+#include \"gimple.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "9b4493bade0152fc971968fe6507083ed0249f14", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -26,6 +26,7 @@\n #include \"function.h\"\n #include \"tree-dump.h\"\n #include \"tree-inline.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n #include \"gimple-walk.h\""}, {"sha": "867992b6bb94f50b3f1e005b2afbc400b8d46a91", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -23,8 +23,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-walk.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\""}, {"sha": "77a15ab5523ff6272123a4a26dd7b747509c2994", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -191,8 +191,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"tm_p.h\"\n #include \"cfgloop.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "f3f97b2e0dc0b5667740cb04dc770eae325192b5", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -34,8 +34,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-core.h\"\n #include \"coverage.h\"\n #include \"tree.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-cfg.h\""}, {"sha": "115683de833654eb1db4aa999a54d396b7e7e8d7", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -259,8 +259,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"hash-table.h\"\n #include \"gimple-pretty-print.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "d97af132d39c5007db9278224d0dd0bfeea01bc1", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -78,8 +78,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"alloc-pool.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-walk.h\"\n #include \"bitmap.h\"\n #include \"gimple-ssa.h\""}, {"sha": "cf245675796b66685212ed86e1c82b45ca61cf06", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -28,7 +28,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"tree-pretty-print.h\"\n-#include \"gimplify.h\"\n+#include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"tree-ssanames.h\"\n #include \"tree-ssa-loop-ivopts.h\"\n #include \"tree-dfa.h\""}, {"sha": "50006abdc052253ce8e30023bf9db32efdc5d756", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -119,6 +119,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"function.h\"\n #include \"gimple-pretty-print.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\""}, {"sha": "d138f92f195c6a4236f7c37a057db0ea695c88f9", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"gimple-pretty-print.h\"\n #include \"basic-block.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\""}, {"sha": "ce9c0114f82f5b8bb188857091c0980d3a0f1d61", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -25,8 +25,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "d3bb5b246cdefd4298af0068b44cedfdae09b615", "filename": "gcc/tree-ssa-ifcombine.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-ifcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-ifcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -29,8 +29,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"basic-block.h\"\n #include \"tree-pretty-print.h\"\n-#include \"gimplify.h\"\n+#include \"gimple.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "ad34d76e84082dce1e8ddbaa59992c29737d26c8", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -25,8 +25,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "6d5eeb5de99a8983796cffc191dfee88e2b39c8b", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -69,8 +69,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-cfg.h\""}, {"sha": "ae51ee66f07b3864d5cc70ddb4c91ba7b13197a7", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -24,8 +24,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "547185694fb2f3501088205812f8ffb4f6b2e15b", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"intl.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\""}, {"sha": "0939541746e68719c1149f7984aaf2d0491ee94b", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -25,8 +25,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"tree-pretty-print.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-ssa-loop-ivopts.h\"\n #include \"tree-ssa-loop-manip.h\""}, {"sha": "236b89b8a128473be9ffca88cd9c5d9831f0343e", "filename": "gcc/tree-ssa-loop-unswitch.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-loop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-loop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-unswitch.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\""}, {"sha": "ca3596c8a0e6510d95a852d4847c35a717a62b9b", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -90,8 +90,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"flags.h\"\n #include \"tree.h\"\n-#include \"gimplify.h\"\n+#include \"gimple.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "7f4a3fddb8073cd739214b6bc3a0e66f5adf053f", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -27,8 +27,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "070b8ed3f0bf773dd8c126d04be9a5b2d6f25106", "filename": "gcc/tree-ssa-phiprop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-phiprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-phiprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\""}, {"sha": "7052d94e49a46878d32c01f0f6d3a6c29061c074", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -27,8 +27,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"tree-inline.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "078b04afdbce7da5b6e2c466a5ccc6a44b31f209", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -30,6 +30,7 @@\n #include \"gimple-pretty-print.h\"\n #include \"dumpfile.h\"\n #include \"sbitmap.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\""}, {"sha": "4d0e5e4aa4722d00cdd711a760d50ca09fe826cf", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -29,8 +29,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"tree-inline.h\"\n-#include \"gimplify.h\"\n+#include \"gimple.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "1be324e8d5da1292dde6d1ad0bf4bb3693009319", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"tree-inline.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\""}, {"sha": "cfd7b00c6a8ddd09a483636568568d43a49372d0", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -24,8 +24,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"hash-table.h\"\n #include \"bitmap.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "f16e77b53f5a63494fce78031210d2022837ddb2", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"gimple-pretty-print.h\"\n #include \"pointer-set.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n #include \"gimple-walk.h\""}, {"sha": "9d5734a54531005a4808bb1ad7bfec6b318c4e02", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -31,8 +31,10 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"flags.h\"\n #include \"tree.h\"\n #include \"basic-block.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-cfg.h\""}, {"sha": "185bf165149e9ab4743af09a9c45cb9121278ad6", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -25,8 +25,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"function.h\"\n-#include \"gimplify.h\"\n+#include \"gimple.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "1e5ee3dd07b06d00f61de0f97a9a30f198afcdb7", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -30,8 +30,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "0fcc4ea94a2ab64f671f55ac3079659d7cd09e69", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -23,8 +23,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"tm.h\"\n #include \"langhooks.h\"\n-#include \"gimplify.h\"\n+#include \"gimple.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-ssanames.h\""}, {"sha": "46e9df5da0df7ecbc65be99850baa54f295e1249", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -28,8 +28,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "491d8c6a3db81349cc686b43212e047dac65eca1", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -28,8 +28,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\""}, {"sha": "11f7beed3a096422e741e590962cccc042ddb05f", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\""}, {"sha": "54d821af9c0fe492d3a2ca152142273f5b0b4252", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -29,8 +29,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\"\n #include \"tree-phinodes.h\""}, {"sha": "97c9c8ac37d0b84cb4ab46937a4424e9d7c6ffd5", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"bitmap.h\"\n #include \"gimple.h\"\n #include \"gimple-iterator.h\"\n+#include \"gimplify.h\"\n #include \"gimple-ssa.h\"\n #include \"cgraph.h\"\n #include \"tree-phinodes.h\""}, {"sha": "544d535f0cf218584fa2b101ef0ee98d0f7031e2", "filename": "gcc/tsan.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"tm.h\"\n #include \"basic-block.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n #include \"function.h\""}, {"sha": "719cf9a59f0f9bf3642cc86916038452efc159f2", "filename": "gcc/value-prof.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f429e29ca809340f044625c0b767beec38fba4/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=18f429e29ca809340f044625c0b767beec38fba4", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"optabs.h\"\n #include \"regs.h\"\n #include \"ggc.h\"\n+#include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n #include \"gimple-ssa.h\""}]}