{"sha": "6999afe1b9fd5fe6babd4139b34ed9bbaacaeebb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk5OWFmZTFiOWZkNWZlNmJhYmQ0MTM5YjM0ZWQ5YmJhYWNhZWViYg==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2008-07-10T17:00:37Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2008-07-10T17:00:37Z"}, "message": "tree-ssa-pre.c (create_expression_by_pieces): Add fold_convert calls.\n\n2008-07-10  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-ssa-pre.c (create_expression_by_pieces): Add fold_convert\n\tcalls.\n\t(eliminate): Ditto.\n\t(execute_pre): Call loop_optimizer_finalize in early exit.\n\nFrom-SVN: r137696", "tree": {"sha": "115ad1079ac95e8735bc871fabcffc31f00dee96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/115ad1079ac95e8735bc871fabcffc31f00dee96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6999afe1b9fd5fe6babd4139b34ed9bbaacaeebb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6999afe1b9fd5fe6babd4139b34ed9bbaacaeebb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6999afe1b9fd5fe6babd4139b34ed9bbaacaeebb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6999afe1b9fd5fe6babd4139b34ed9bbaacaeebb/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b826efd98620ba65956843f515fb1698ea6feecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b826efd98620ba65956843f515fb1698ea6feecf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b826efd98620ba65956843f515fb1698ea6feecf"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "860ef8ba286b8d12376c2a94c991e431e9cf5378", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6999afe1b9fd5fe6babd4139b34ed9bbaacaeebb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6999afe1b9fd5fe6babd4139b34ed9bbaacaeebb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6999afe1b9fd5fe6babd4139b34ed9bbaacaeebb", "patch": "@@ -1,3 +1,10 @@\n+2008-07-10  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-ssa-pre.c (create_expression_by_pieces): Add fold_convert\n+\tcalls.\n+\t(eliminate): Ditto.\n+\t(execute_pre): Call loop_optimizer_finalize in early exit.\n+\n 2008-07-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/36790"}, {"sha": "ecaf54c942d6e92008182d277407b6c969b53eb7", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6999afe1b9fd5fe6babd4139b34ed9bbaacaeebb/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6999afe1b9fd5fe6babd4139b34ed9bbaacaeebb/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=6999afe1b9fd5fe6babd4139b34ed9bbaacaeebb", "patch": "@@ -2448,10 +2448,10 @@ create_component_ref_by_pieces (basic_block block, vn_reference_t ref,\n \t    if (!genop1)\n \t      return NULL_TREE;\n \t    genop1 = fold_convert (build_pointer_type (currop->type),\n-\t\tgenop1);\n+\t\t\t\t   genop1);\n \n \t    folded = fold_build1 (currop->opcode, currop->type,\n-\t\tgenop1);\n+\t\t\t\t  genop1);\n \t    return folded;\n \t  }\n       }\n@@ -2694,10 +2694,15 @@ create_expression_by_pieces (basic_block block, pre_expr expr, tree stmts,\n \t\t\t\t\t\t\t stmts, domstmt);\n \t      if (!genop1 || !genop2)\n \t\treturn NULL_TREE;\n+\t      genop1 = fold_convert (TREE_TYPE (nary->op[0]),\n+\t\t\t\t     genop1);\n \t      /* Ensure op2 is a sizetype for POINTER_PLUS_EXPR.  It\n \t\t may be a constant with the wrong type.  */\n \t      if (nary->opcode == POINTER_PLUS_EXPR)\n \t\tgenop2 = fold_convert (sizetype, genop2);\n+\t      else\n+\t\tgenop2 = fold_convert (TREE_TYPE (nary->op[0]), genop2);\n+\t      \n \t      folded = fold_build2 (nary->opcode, nary->type,\n \t\t\t\t    genop1, genop2);\n \t    }\n@@ -2709,6 +2714,8 @@ create_expression_by_pieces (basic_block block, pre_expr expr, tree stmts,\n \t\t\t\t\t\t\t stmts, domstmt);\n \t      if (!genop1)\n \t\treturn NULL_TREE;\n+\t      genop1 = fold_convert (TREE_TYPE (nary->op[0]), genop1);\n+\n \t      folded = fold_build1 (nary->opcode, nary->type,\n \t\t\t\t    genop1);\n \t    }\n@@ -3818,11 +3825,13 @@ eliminate (void)\n \t\t  else\n \t\t    gcc_unreachable ();\n \t\t}\n+\n \t      /* If there is no existing leader but SCCVN knows this\n \t\t value is constant, use that constant.  */\n \t      if (!sprime && is_gimple_min_invariant (VN_INFO (lhs)->valnum))\n \t\t{\n-\t\t  sprime = VN_INFO (lhs)->valnum;\n+\t\t  sprime = fold_convert (TREE_TYPE (lhs),\n+\t\t\t\t\t VN_INFO (lhs)->valnum);\n \n \t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t    {\n@@ -4171,7 +4180,11 @@ execute_pre (bool do_fre)\n   if (!run_scc_vn (do_fre))\n     {\n       if (!do_fre)\n-\tremove_dead_inserted_code ();\n+\t{\n+\t  remove_dead_inserted_code ();\n+\t  loop_optimizer_finalize ();\n+\t}\n+      \n       return 0;\n     }\n   init_pre (do_fre);"}]}