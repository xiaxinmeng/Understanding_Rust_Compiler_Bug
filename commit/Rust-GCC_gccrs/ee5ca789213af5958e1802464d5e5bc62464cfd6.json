{"sha": "ee5ca789213af5958e1802464d5e5bc62464cfd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU1Y2E3ODkyMTNhZjU5NThlMTgwMjQ2NGQ1ZTViYzYyNDY0Y2ZkNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2007-10-01T20:49:39Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2007-10-01T20:49:39Z"}, "message": "valarray-inst.cc, [...]: Fix comment typos.\n\n\t* src/valarray-inst.cc, include/ext/atomicity.h,\n\tinclude/ext/concurrence.h, include/bits/basic_string.h,\n\tinclude/bits/fstream.tcc, include/ext/vstring.h: Fix comment typos.\n\nFrom-SVN: r128915", "tree": {"sha": "3d49f9ee75cf137181d13bddef4eb0c33c90c1a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d49f9ee75cf137181d13bddef4eb0c33c90c1a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee5ca789213af5958e1802464d5e5bc62464cfd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee5ca789213af5958e1802464d5e5bc62464cfd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee5ca789213af5958e1802464d5e5bc62464cfd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee5ca789213af5958e1802464d5e5bc62464cfd6/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b54a3bb1b5b1e00eda626c006a2e36202f8eae3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b54a3bb1b5b1e00eda626c006a2e36202f8eae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b54a3bb1b5b1e00eda626c006a2e36202f8eae3"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "5ace7b1618d0008cd578d06ca315112f99c41ef9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5ca789213af5958e1802464d5e5bc62464cfd6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5ca789213af5958e1802464d5e5bc62464cfd6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ee5ca789213af5958e1802464d5e5bc62464cfd6", "patch": "@@ -1,3 +1,9 @@\n+2007-09-30  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* src/valarray-inst.cc, include/ext/atomicity.h,\n+\tinclude/ext/concurrence.h, include/bits/basic_string.h,\n+\tinclude/bits/fstream.tcc, include/ext/vstring.h: Fix comment typos.\n+\n 2007-09-29  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* docs/html/test.html, docs/html/ext/mt_allocator.html,"}, {"sha": "1f36d1e9f44b33d1398fc24581ca5d39c73ba176", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5ca789213af5958e1802464d5e5bc62464cfd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5ca789213af5958e1802464d5e5bc62464cfd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=ee5ca789213af5958e1802464d5e5bc62464cfd6", "patch": "@@ -1686,7 +1686,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       /**\n        *  @brief  Find position of a character of C substring.\n        *  @param s  String containing characters to locate.\n-       *  @param pos  Index of character to search from (default 0).\n+       *  @param pos  Index of character to search from.\n        *  @param n  Number of characters from s to search for.\n        *  @return  Index of first occurrence.\n        *\n@@ -1747,7 +1747,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       /**\n        *  @brief  Find last position of a character of C substring.\n        *  @param s  C string containing characters to locate.\n-       *  @param pos  Index of character to search back from (default end).\n+       *  @param pos  Index of character to search back from.\n        *  @param n  Number of characters from s to search for.\n        *  @return  Index of last occurrence.\n        *\n@@ -1778,7 +1778,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       /**\n        *  @brief  Find last position of a character.\n        *  @param c  Character to locate.\n-       *  @param pos  Index of character to search back from (default 0).\n+       *  @param pos  Index of character to search back from (default end).\n        *  @return  Index of last occurrence.\n        *\n        *  Starting from @a pos, searches backward for @a c within this string.\n@@ -1808,7 +1808,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       /**\n        *  @brief  Find position of a character not in C substring.\n        *  @param s  C string containing characters to avoid.\n-       *  @param pos  Index of character to search from (default 0).\n+       *  @param pos  Index of character to search from.\n        *  @param n  Number of characters from s to consider.\n        *  @return  Index of first occurrence.\n        *\n@@ -1853,8 +1853,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       /**\n        *  @brief  Find last position of a character not in string.\n        *  @param str  String containing characters to avoid.\n-       *  @param pos  Index of character to search from (default 0).\n-       *  @return  Index of first occurrence.\n+       *  @param pos  Index of character to search back from (default end).\n+       *  @return  Index of last occurrence.\n        *\n        *  Starting from @a pos, searches backward for a character not\n        *  contained in @a str within this string.  If found, returns the index\n@@ -1867,9 +1867,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       /**\n        *  @brief  Find last position of a character not in C substring.\n        *  @param s  C string containing characters to avoid.\n-       *  @param pos  Index of character to search from (default 0).\n+       *  @param pos  Index of character to search back from.\n        *  @param n  Number of characters from s to consider.\n-       *  @return  Index of first occurrence.\n+       *  @return  Index of last occurrence.\n        *\n        *  Starting from @a pos, searches backward for a character not\n        *  contained in the first @a n characters of @a s within this string.\n@@ -1880,10 +1880,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       find_last_not_of(const _CharT* __s, size_type __pos,\n \t\t       size_type __n) const;\n       /**\n-       *  @brief  Find position of a character not in C string.\n+       *  @brief  Find last position of a character not in C string.\n        *  @param s  C string containing characters to avoid.\n-       *  @param pos  Index of character to search from (default 0).\n-       *  @return  Index of first occurrence.\n+       *  @param pos  Index of character to search back from (default end).\n+       *  @return  Index of last occurrence.\n        *\n        *  Starting from @a pos, searches backward for a character not\n        *  contained in @a s within this string.  If found, returns the index\n@@ -1899,8 +1899,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       /**\n        *  @brief  Find last position of a different character.\n        *  @param c  Character to avoid.\n-       *  @param pos  Index of character to search from (default 0).\n-       *  @return  Index of first occurrence.\n+       *  @param pos  Index of character to search back from (default end).\n+       *  @return  Index of last occurrence.\n        *\n        *  Starting from @a pos, searches backward for a character other than\n        *  @a c within this string.  If found, returns the index where it was"}, {"sha": "1ef7af50e447bf271ca9699aff1e87b157103b44", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5ca789213af5958e1802464d5e5bc62464cfd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5ca789213af5958e1802464d5e5bc62464cfd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=ee5ca789213af5958e1802464d5e5bc62464cfd6", "patch": "@@ -212,7 +212,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       const bool __testin = _M_mode & ios_base::in;\n       if (__testin && !_M_writing)\n \t{\n-\t  // Check for pback madness, and if so swich back to the\n+\t  // Check for pback madness, and if so switch back to the\n \t  // normal buffers and jet outta here before expensive\n \t  // fileops happen...\n \t  _M_destroy_pback();"}, {"sha": "05bac1f46d40ed380cf4159ea03ec35f1e428457", "filename": "libstdc++-v3/include/ext/atomicity.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5ca789213af5958e1802464d5e5bc62464cfd6/libstdc%2B%2B-v3%2Finclude%2Fext%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5ca789213af5958e1802464d5e5bc62464cfd6/libstdc%2B%2B-v3%2Finclude%2Fext%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fatomicity.h?ref=ee5ca789213af5958e1802464d5e5bc62464cfd6", "patch": "@@ -42,7 +42,7 @@\n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   // Functions for portable atomic access.\n-  // To abstract locking primatives across all thread policies, use:\n+  // To abstract locking primitives across all thread policies, use:\n   // __exchange_and_add_dispatch\n   // __atomic_add_dispatch\n #ifdef _GLIBCXX_ATOMIC_BUILTINS"}, {"sha": "3556acfd3a43090c3d64eee983360d4b1d424ea4", "filename": "libstdc++-v3/include/ext/concurrence.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5ca789213af5958e1802464d5e5bc62464cfd6/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5ca789213af5958e1802464d5e5bc62464cfd6/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fconcurrence.h?ref=ee5ca789213af5958e1802464d5e5bc62464cfd6", "patch": "@@ -45,7 +45,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   // Available locking policies:\n   // _S_single    single-threaded code that doesn't need to be locked.\n   // _S_mutex     multi-threaded code that requires additional support\n-  //              from gthr.h or abstraction layers in concurrance.h.\n+  //              from gthr.h or abstraction layers in concurrence.h.\n   // _S_atomic    multi-threaded code using atomic operations.\n   enum _Lock_policy { _S_single, _S_mutex, _S_atomic }; \n "}, {"sha": "b20faa8f98763f4cc632f3fb7de98339dbeb4a63", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5ca789213af5958e1802464d5e5bc62464cfd6/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5ca789213af5958e1802464d5e5bc62464cfd6/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=ee5ca789213af5958e1802464d5e5bc62464cfd6", "patch": "@@ -1407,7 +1407,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       /**\n        *  @brief  Find position of a character of C substring.\n        *  @param s  String containing characters to locate.\n-       *  @param pos  Index of character to search from (default 0).\n+       *  @param pos  Index of character to search from.\n        *  @param n  Number of characters from s to search for.\n        *  @return  Index of first occurrence.\n        *\n@@ -1468,7 +1468,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       /**\n        *  @brief  Find last position of a character of C substring.\n        *  @param s  C string containing characters to locate.\n-       *  @param pos  Index of character to search back from (default end).\n+       *  @param pos  Index of character to search back from.\n        *  @param n  Number of characters from s to search for.\n        *  @return  Index of last occurrence.\n        *\n@@ -1499,7 +1499,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       /**\n        *  @brief  Find last position of a character.\n        *  @param c  Character to locate.\n-       *  @param pos  Index of character to search back from (default 0).\n+       *  @param pos  Index of character to search back from (default end).\n        *  @return  Index of last occurrence.\n        *\n        *  Starting from @a pos, searches backward for @a c within this string.\n@@ -1529,7 +1529,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       /**\n        *  @brief  Find position of a character not in C substring.\n        *  @param s  C string containing characters to avoid.\n-       *  @param pos  Index of character to search from (default 0).\n+       *  @param pos  Index of character to search from.\n        *  @param n  Number of characters from s to consider.\n        *  @return  Index of first occurrence.\n        *\n@@ -1574,8 +1574,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       /**\n        *  @brief  Find last position of a character not in string.\n        *  @param str  String containing characters to avoid.\n-       *  @param pos  Index of character to search from (default 0).\n-       *  @return  Index of first occurrence.\n+       *  @param pos  Index of character to search back from (default end).\n+       *  @return  Index of last occurrence.\n        *\n        *  Starting from @a pos, searches backward for a character not\n        *  contained in @a str within this string.  If found, returns the index\n@@ -1589,9 +1589,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       /**\n        *  @brief  Find last position of a character not in C substring.\n        *  @param s  C string containing characters to avoid.\n-       *  @param pos  Index of character to search from (default 0).\n+       *  @param pos  Index of character to search back from.\n        *  @param n  Number of characters from s to consider.\n-       *  @return  Index of first occurrence.\n+       *  @return  Index of last occurrence.\n        *\n        *  Starting from @a pos, searches backward for a character not\n        *  contained in the first @a n characters of @a s within this string.\n@@ -1602,10 +1602,10 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       find_last_not_of(const _CharT* __s, size_type __pos,\n \t\t       size_type __n) const;\n       /**\n-       *  @brief  Find position of a character not in C string.\n+       *  @brief  Find last position of a character not in C string.\n        *  @param s  C string containing characters to avoid.\n-       *  @param pos  Index of character to search from (default 0).\n-       *  @return  Index of first occurrence.\n+       *  @param pos  Index of character to search back from (default end).\n+       *  @return  Index of last occurrence.\n        *\n        *  Starting from @a pos, searches backward for a character not\n        *  contained in @a s within this string.  If found, returns the index\n@@ -1621,8 +1621,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       /**\n        *  @brief  Find last position of a different character.\n        *  @param c  Character to avoid.\n-       *  @param pos  Index of character to search from (default 0).\n-       *  @return  Index of first occurrence.\n+       *  @param pos  Index of character to search back from (default end).\n+       *  @return  Index of last occurrence.\n        *\n        *  Starting from @a pos, searches backward for a character other than\n        *  @a c within this string.  If found, returns the index where it was"}, {"sha": "f60ff9176c4f48e6b1dd452893ef87a6313fda48", "filename": "libstdc++-v3/src/valarray-inst.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5ca789213af5958e1802464d5e5bc62464cfd6/libstdc%2B%2B-v3%2Fsrc%2Fvalarray-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5ca789213af5958e1802464d5e5bc62464cfd6/libstdc%2B%2B-v3%2Fsrc%2Fvalarray-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fvalarray-inst.cc?ref=ee5ca789213af5958e1802464d5e5bc62464cfd6", "patch": "@@ -69,7 +69,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   __gslice_to_index(size_t __o, const valarray<size_t>& __l,\n                     const valarray<size_t>& __s, valarray<size_t>& __i)\n   {\n-    // There are as much as dimensions as there are strides.\n+    // There are as many dimensions as there are strides.\n     const size_t __n = __l.size();\n \n     // Holds current multi-index as we go through the gslice for the"}]}