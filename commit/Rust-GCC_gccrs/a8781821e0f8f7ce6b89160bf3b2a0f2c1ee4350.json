{"sha": "a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg3ODE4MjFlMGY4ZjdjZTZiODkxNjBiZjNiMmEwZjJjMWVlNDM1MA==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-06-19T19:55:33Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-06-19T19:55:33Z"}, "message": "target.def (output_ident): New hook.\n\ngcc/\n\t* target.def (output_ident): New hook.\n\t* targhooks.h (default_asm_output_ident_directive): Add prototype.\n\t* varasm.c (assemble_asm): Only prefix a tab if the string does not\n\talready start with one.\n\t(default_asm_output_ident_directive): New function to emit\n\t.ident as a top-level asm node while parsing, or directly to\n\tasm_out_file after parsing.\n\t* toplev.c (compile_file): Print a GCC .ident with\n\ttargetm.asm_out.output_ident.\n\t* doc/tm.texi.in (ASM_OUTPUT_IDENT): Remove documentation for macro.\n\t(TARGET_ASM_OUTPUT_IDENT): Add @hook for this.\n\t* doc/tm.texi: Update.\n\n\t* config/elfos.h (ASM_OUTPUT_IDENT, IDENT_ASM_OP): Remove.\n\t(TARGET_ASM_OUTPUT_IDENT): Define.\n\t* config/i386/djgpp.h (IDENT_ASM_OP): Remove.\n\t* config/i386/gas.h (ASM_OUTPUT_IDENT): Remove.\n\t* config/arm/aout.h (ASM_OUTPUT_IDENT): Remove.\n\t* config/sparc/sparc.h (IDENT_ASM_OP): Remove.\n\t(TARGET_ASM_OUTPUT_IDENT): Define.\n\t* config/picochip/picochip.h (IDENT_ASM_OP): Remove.\n\t(TARGET_ASM_OUTPUT_IDENT): Define.\n\n\t* config/cris/cris-protos.h (cris_asm_output_ident): Add prototype.\n\t* config/cris/cris.c (cris_asm_output_ident): New function.\n\t* config/cris/cris.h (ASM_OUTPUT_IDENT, IDENT_ASM_OP): Remove.\n\n\t* config/microblaze/microblaze-protos.h (microblaze_asm_output_ident):\n\tAdd prototype.\n\t* config/microblaze/microblaze.c: Include cgraph.h for add_asm_node.\n\t(microblaze_asm_output_ident): Rewrite to work similar to\n\tdefault_asm_output_ident_directive for front-end .idents.\n\t* config/microblaze/microblaze.h (ASM_OUTPUT_IDENT): Remove.\n\t(TARGET_ASM_OUTPUT_IDENT): Define.\n\n\t* config/mips/mips.h (ASM_OUTPUT_IDENT): Remove.\n\t* config/mips/sde.h (IDENT_ASM_OP, ASM_OUTPUT_IDENT): Remove.\n\n\t* config/rx/rx.c: Include cgraph.h for add_asm_node.\n\t(rx_asm_output_ident): New function, similar to\n\tdefault_asm_output_ident_directive, but handle AS100 syntax also, so\n\tthat #ident also works for rx in AS100 syntax.\n\t(TARGET_ASM_OUTPUT_IDENT): Define.\n\t* config/rx/rx.h (IDENT_ASM_OP): Remove.\n\n\t* Makefile.in: Fix dependencies for c-family/c-lex.o.\n\nc-family/\n\t* c-lex.c: Do not include output.h.\n\t(cb_ident): Try to put out .ident with targetm.asm_out.output_ident.\n\tRemove uses of ASM_OUTPUT_IDENT.\n\nada/\n\t* gcc-interface/trans.c: Include target.h.\n\t(gigi): Try to put out .ident with targetm.asm_out.output_ident.\n\tRemove uses of ASM_OUTPUT_IDENT.\n\t* gcc-interface/Make-lang.in: Fix dependencies.\n\nFrom-SVN: r188791", "tree": {"sha": "fca433b11c05a5a771c4a816fb110130e6e63fcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fca433b11c05a5a771c4a816fb110130e6e63fcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/comments", "author": null, "committer": null, "parents": [{"sha": "e42d5b2d0ea214f6f52a77693327b2a12ad8dc38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e42d5b2d0ea214f6f52a77693327b2a12ad8dc38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e42d5b2d0ea214f6f52a77693327b2a12ad8dc38"}], "stats": {"total": 260, "additions": 173, "deletions": 87}, "files": [{"sha": "35db0820bb465bf0e3a4287e52d4492ec2fad932", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -1,3 +1,52 @@\n+2012-06-19  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* target.def (output_ident): New hook.\n+\t* targhooks.h (default_asm_output_ident_directive): Add prototype.\n+\t* varasm.c (assemble_asm): Only prefix a tab if the string does not\n+\talready start with one.\n+\t(default_asm_output_ident_directive): New function to emit\n+\t.ident as a top-level asm node while parsing, or directly to\n+\tasm_out_file after parsing.\n+\t* toplev.c (compile_file): Print a GCC .ident with\n+\ttargetm.asm_out.output_ident.\n+\t* doc/tm.texi.in (ASM_OUTPUT_IDENT): Remove documentation for macro.\n+\t(TARGET_ASM_OUTPUT_IDENT): Add @hook for this.\n+\t* doc/tm.texi: Update.\n+\n+\t* config/elfos.h (ASM_OUTPUT_IDENT, IDENT_ASM_OP): Remove.\n+\t(TARGET_ASM_OUTPUT_IDENT): Define.\n+\t* config/i386/djgpp.h (IDENT_ASM_OP): Remove.\n+\t* config/i386/gas.h (ASM_OUTPUT_IDENT): Remove.\n+\t* config/arm/aout.h (ASM_OUTPUT_IDENT): Remove.\n+\t* config/sparc/sparc.h (IDENT_ASM_OP): Remove.\n+\t(TARGET_ASM_OUTPUT_IDENT): Define.\n+\t* config/picochip/picochip.h (IDENT_ASM_OP): Remove.\n+\t(TARGET_ASM_OUTPUT_IDENT): Define.\n+\n+\t* config/cris/cris-protos.h (cris_asm_output_ident): Add prototype.\n+\t* config/cris/cris.c (cris_asm_output_ident): New function.\n+\t* config/cris/cris.h (ASM_OUTPUT_IDENT, IDENT_ASM_OP): Remove.\n+\n+\t* config/microblaze/microblaze-protos.h (microblaze_asm_output_ident):\n+\tAdd prototype.\n+\t* config/microblaze/microblaze.c: Include cgraph.h for add_asm_node.\n+\t(microblaze_asm_output_ident): Rewrite to work similar to\n+\tdefault_asm_output_ident_directive for front-end .idents.\n+\t* config/microblaze/microblaze.h (ASM_OUTPUT_IDENT): Remove.\n+\t(TARGET_ASM_OUTPUT_IDENT): Define.\n+\n+\t* config/mips/mips.h (ASM_OUTPUT_IDENT): Remove.\n+\t* config/mips/sde.h (IDENT_ASM_OP, ASM_OUTPUT_IDENT): Remove.\n+\n+\t* config/rx/rx.c: Include cgraph.h for add_asm_node.\n+\t(rx_asm_output_ident): New function, similar to\n+\tdefault_asm_output_ident_directive, but handle AS100 syntax also, so\n+\tthat #ident also works for rx in AS100 syntax.\n+\t(TARGET_ASM_OUTPUT_IDENT): Define.\n+\t* config/rx/rx.h (IDENT_ASM_OP): Remove.\n+\n+\t* Makefile.in: Fix dependencies for c-family/c-lex.o.\n+\n 2012-06-19  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (FIST_ROUNDING): New int iterator."}, {"sha": "585acbdf1f3de0e4d091ed202e24ee81e17a6fc1", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -2019,7 +2019,7 @@ c-family/c-gimplify.o : c-family/c-gimplify.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H)\n \n c-family/c-lex.o : c-family/c-lex.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(TM_H) $(TREE_H) $(FIXED_VALUE_H) debug.h $(C_COMMON_H) $(SPLAY_TREE_H) \\\n-\t$(C_PRAGMA_H) $(INPUT_H) intl.h $(FLAGS_H) output.h \\\n+\t$(C_PRAGMA_H) $(INPUT_H) intl.h $(FLAGS_H) \\\n \t$(CPPLIB_H) $(TARGET_H) $(TIMEVAR_H)\n \n c-family/c-omp.o : c-family/c-omp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\"}, {"sha": "c56d5c9b54935d616714c361e8d173aff5f22c9b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -1,3 +1,10 @@\n+2012-06-19  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* gcc-interface/trans.c: Include target.h.\n+\t(gigi): Try to put out .ident with targetm.asm_out.output_ident.\n+\tRemove uses of ASM_OUTPUT_IDENT.\n+\t* gcc-interface/Make-lang.in: Fix dependencies.\n+\n 2012-06-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/53592"}, {"sha": "c9ddd9bfc4d344c44f88d5ef50a1fd9a1a04dfb1", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -1014,7 +1014,7 @@ ada/targtyps.o : ada/gcc-interface/targtyps.c $(CONFIG_H) $(SYSTEM_H) \\\n \n ada/trans.o : ada/gcc-interface/trans.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(FLAGS_H) output.h tree-iterator.h $(GIMPLE_H) \\\n-   $(BITMAP_H) $(CGRAPH_H) ada/gcc-interface/ada.h ada/adadecode.h \\\n+   $(BITMAP_H) $(CGRAPH_H) $(TARGET_H) ada/gcc-interface/ada.h ada/adadecode.h \\\n    ada/types.h ada/atree.h ada/elists.h ada/namet.h ada/nlists.h ada/snames.h \\\n    ada/stringt.h ada/uintp.h ada/urealp.h ada/fe.h ada/sinfo.h ada/einfo.h \\\n    ada/gcc-interface/gadaint.h $(ADA_TREE_H) ada/gcc-interface/gigi.h \\"}, {"sha": "27750a6e4a486c5837f5bd1a1857b0e9d5b1974e", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -36,6 +36,7 @@\n #include \"gimple.h\"\n #include \"bitmap.h\"\n #include \"cgraph.h\"\n+#include \"target.h\"\n \n #include \"ada.h\"\n #include \"adadecode.h\"\n@@ -647,12 +648,9 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n   VEC_safe_push (tree, gc, gnu_program_error_label_stack, NULL_TREE);\n \n   /* Process any Pragma Ident for the main unit.  */\n-#ifdef ASM_OUTPUT_IDENT\n   if (Present (Ident_String (Main_Unit)))\n-    ASM_OUTPUT_IDENT\n-      (asm_out_file,\n-       TREE_STRING_POINTER (gnat_to_gnu (Ident_String (Main_Unit))));\n-#endif\n+    targetm.asm_out.output_ident\n+      (TREE_STRING_POINTER (gnat_to_gnu (Ident_String (Main_Unit))));\n \n   /* If we are using the GCC exception mechanism, let GCC know.  */\n   if (Exception_Mechanism == Back_End_Exceptions)"}, {"sha": "15e8f386a1f7d1c216fce2347206566f67be6304", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -1,3 +1,9 @@\n+2012-06-19  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* c-lex.c: Do not include output.h.\n+\t(cb_ident): Try to put out .ident with targetm.asm_out.output_ident.\n+\tRemove uses of ASM_OUTPUT_IDENT.\n+\n 2012-06-15  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/51033"}, {"sha": "de9fa698edc49ad6874d61bd9383264b31ca91f1", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -26,7 +26,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"tree.h\"\n #include \"input.h\"\n-#include \"output.h\" /* for asm_out_file */\n #include \"c-common.h\"\n #include \"flags.h\"\n #include \"timevar.h\"\n@@ -165,18 +164,16 @@ cb_ident (cpp_reader * ARG_UNUSED (pfile),\n \t  unsigned int ARG_UNUSED (line),\n \t  const cpp_string * ARG_UNUSED (str))\n {\n-#ifdef ASM_OUTPUT_IDENT\n   if (!flag_no_ident)\n     {\n       /* Convert escapes in the string.  */\n       cpp_string cstr = { 0, 0 };\n       if (cpp_interpret_string (pfile, str, 1, &cstr, CPP_STRING))\n \t{\n-\t  ASM_OUTPUT_IDENT (asm_out_file, (const char *) cstr.text);\n+\t  targetm.asm_out.output_ident ((const char *) cstr.text);\n \t  free (CONST_CAST (unsigned char *, cstr.text));\n \t}\n     }\n-#endif\n }\n \n /* Called at the start of every non-empty line.  TOKEN is the first"}, {"sha": "c60adb9a3294fd0fb47419862d7d124b24c9102a", "filename": "gcc/config/arm/aout.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Farm%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Farm%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faout.h?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -366,12 +366,6 @@\n   asm_output_aligned_bss (STREAM, DECL, NAME, SIZE, ALIGN)\n #endif\n \n-/* Output a #ident directive.  */\n-#ifndef ASM_OUTPUT_IDENT\n-#define ASM_OUTPUT_IDENT(STREAM,STRING)  \\\n-  asm_fprintf (STREAM, \"%@ - - - ident %s\\n\", STRING)\n-#endif\n-     \n #ifndef ASM_COMMENT_START\n #define ASM_COMMENT_START \t\"@\"\n #endif"}, {"sha": "d08dac5dab0aa8d35ac37458b103dcf9cb532ae4", "filename": "gcc/config/cris/cris-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-protos.h?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -52,6 +52,7 @@ extern void cris_order_for_addsi3 (rtx *, int);\n extern void cris_emit_trap_for_misalignment (rtx);\n #endif /* RTX_CODE */\n extern void cris_asm_output_label_ref (FILE *, char *);\n+extern void cris_asm_output_ident (const char *);\n extern void cris_expand_prologue (void);\n extern void cris_expand_epilogue (void);\n extern void cris_expand_return (bool);"}, {"sha": "a5a342720bbcbb7ddf9f517d7ff9e6919bd10004", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -2467,6 +2467,22 @@ cris_legitimate_pic_operand (rtx x)\n   return cris_valid_pic_const (x, true);\n }\n \n+/* Queue an .ident string in the queue of top-level asm statements.\n+   If the front-end is done, we must be being called from toplev.c.\n+   In that case, do nothing.  */\n+void \n+cris_asm_output_ident (const char *string)\n+{\n+  const char *section_asm_op;\n+  int size;\n+  char *buf;\n+\n+  if (cgraph_state != CGRAPH_STATE_PARSING)\n+    return;\n+\n+  default_asm_output_ident_directive (string);\n+}\n+\n /* The ASM_OUTPUT_CASE_END worker.  */\n \n void\n@@ -2517,6 +2533,10 @@ cris_asm_output_case_end (FILE *stream, int num, rtx table)\n static void\n cris_option_override (void)\n {\n+  /* We don't want an .ident for gcc.\n+     It isn't really clear anymore why not.  */\n+  flag_no_gcc_ident = true;\n+\n   if (cris_max_stackframe_str)\n     {\n       cris_max_stackframe = atoi (cris_max_stackframe_str);"}, {"sha": "b0bc57f7c0fecc83b0ccc6be18240529e93bf774", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -842,12 +842,11 @@ enum cris_pic_symbol_type\n /* Node: File Framework */\n \n /* We don't want an .ident for gcc.  To avoid that but still support\n-   #ident, we override ASM_OUTPUT_IDENT and, since the gcc .ident is its\n-   only use besides ASM_OUTPUT_IDENT, undef IDENT_ASM_OP from elfos.h.  */\n-#undef IDENT_ASM_OP\n-#undef ASM_OUTPUT_IDENT\n-#define ASM_OUTPUT_IDENT(FILE, NAME) \\\n-  fprintf (FILE, \"%s\\\"%s\\\"\\n\", \"\\t.ident\\t\", NAME);\n+   #ident, we override TARGET_ASM_OUTPUT_IDENT and, since the gcc .ident\n+   is its only use besides front-end .ident directives, we return if\n+   the state if the cgraph is not CGRAPH_STATE_PARSING.  */\n+#undef TARGET_ASM_OUTPUT_IDENT\n+#define TARGET_ASM_OUTPUT_IDENT cris_asm_output_ident\n \n #define ASM_APP_ON \"#APP\\n\"\n "}, {"sha": "4c748835da3c24660dffc6e97bbb10a7e2efbe97", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -83,10 +83,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /* Output #ident as a .ident.  */\n \n-#define ASM_OUTPUT_IDENT(FILE, NAME) \\\n-  fprintf (FILE, \"%s\\\"%s\\\"\\n\", IDENT_ASM_OP, NAME);\n-\n-#define IDENT_ASM_OP \"\\t.ident\\t\"\n+#undef TARGET_ASM_OUTPUT_IDENT\n+#define TARGET_ASM_OUTPUT_IDENT default_asm_output_ident_directive\n \n #undef  SET_ASM_OP\n #define SET_ASM_OP\t\"\\t.set\\t\""}, {"sha": "b2efb34354530da7aeec56999bd6d0d694b1cc6a", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -31,10 +31,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef DATA_SECTION_ASM_OP\n #define DATA_SECTION_ASM_OP \"\\t.section .data\"\n \n-/* Define the name of the .ident op.  */\n-#undef IDENT_ASM_OP\n-#define IDENT_ASM_OP \"\\t.ident\\t\"\n-\n /* Enable alias attribute support.  */\n #ifndef SET_ASM_OP\n #define SET_ASM_OP \"\\t.set\\t\""}, {"sha": "bb5877ff4bbaa98270f646abde5f0a4e31da2197", "filename": "gcc/config/i386/gas.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fi386%2Fgas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fi386%2Fgas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgas.h?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -47,7 +47,8 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Output #ident as a .ident.  */\n \n-#define ASM_OUTPUT_IDENT(FILE, NAME) fprintf (FILE, \"\\t.ident \\\"%s\\\"\\n\", NAME);\n+#undef TARGET_ASM_OUTPUT_IDENT\n+#define TARGET_ASM_OUTPUT_IDENT default_asm_output_ident_directive\n \n /* In the past there was confusion as to what the argument to .align was\n    in GAS.  For the last several years the rule has been this: for a.out"}, {"sha": "8673e49fb0c22d60e95a8b105eae7dad6898426a", "filename": "gcc/config/microblaze/microblaze-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -48,7 +48,7 @@ extern int microblaze_regno_ok_for_base_p (int, int);\n extern HOST_WIDE_INT microblaze_initial_elimination_offset (int, int);\n extern void microblaze_declare_object (FILE *, const char *, const char *,\n    const char *, int);\n-extern void microblaze_asm_output_ident (FILE *, const char *);\n+extern void microblaze_asm_output_ident (const char *);\n #endif  /* RTX_CODE */\n \n /* Declare functions in microblaze-c.c.  */"}, {"sha": "31248a0b5593730f3727e5719da986b82dcaa167", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -47,6 +47,7 @@\n #include \"df.h\"\n #include \"optabs.h\"\n #include \"diagnostic-core.h\"\n+#include \"cgraph.h\"\n \n #define MICROBLAZE_VERSION_COMPARE(VA,VB) strcasecmp (VA, VB)\n \n@@ -2736,16 +2737,28 @@ microblaze_return_addr (int count, rtx frame ATTRIBUTE_UNUSED)\n \t\t       GEN_INT (8));\n }\n \n-/* Put string into .sdata2 if below threashold.  */\n+/* Queue an .ident string in the queue of top-level asm statements.\n+   If the string size is below the threshold, put it into .sdata2.\n+   If the front-end is done, we must be being called from toplev.c.\n+   In that case, do nothing.  */\n void \n-microblaze_asm_output_ident (FILE *file ATTRIBUTE_UNUSED, const char *string)\n+microblaze_asm_output_ident (const char *string)\n {\n-  int size = strlen (string) + 1;\n+  const char *section_asm_op;\n+  int size;\n+  char *buf;\n+\n+  if (cgraph_state != CGRAPH_STATE_PARSING)\n+    return;\n+\n+  size = strlen (string) + 1;\n   if (size <= microblaze_section_threshold)\n-    switch_to_section (sdata2_section);\n+    section_asm_op = SDATA2_SECTION_ASM_OP;\n   else\n-    switch_to_section (readonly_data_section);\n-  assemble_string (string, size);\n+    section_asm_op = READONLY_DATA_SECTION_ASM_OP;\n+\n+  buf = ACONCAT ((section_asm_op, \"\\n\\t.ascii \\\"\", string, \"\\\\0\\\"\\n\", NULL));\n+  add_asm_node (build_string (strlen (buf), buf));\n }\n \n static void"}, {"sha": "783d1e09cb18961a371946202d530b258f625f6c", "filename": "gcc/config/microblaze/microblaze.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -696,8 +696,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASCII_DATA_ASM_OP\t\t\"\\t.ascii\\t\"\n #define STRING_ASM_OP\t\t\t\"\\t.asciz\\t\"\n \n-#define ASM_OUTPUT_IDENT(FILE, STRING)\t\t\t\t\t\\\n-  microblaze_asm_output_ident (FILE, STRING)\n+#undef TARGET_ASM_OUTPUT_IDENT\n+#define TARGET_ASM_OUTPUT_IDENT microblaze_asm_output_ident\n \n /* Default to -G 8 */\n #ifndef MICROBLAZE_DEFAULT_GVALUE"}, {"sha": "97f38b2c49b8cc129988e594c741c0b9aec75b71", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -2674,15 +2674,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef ASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII mips_output_ascii\n \n-/* Output #ident as a in the read-only data section.  */\n-#undef  ASM_OUTPUT_IDENT\n-#define ASM_OUTPUT_IDENT(FILE, STRING)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  const char *p = STRING;\t\t\t\t\t\t\\\n-  int size = strlen (p) + 1;\t\t\t\t\t\t\\\n-  switch_to_section (readonly_data_section);\t\t\t\t\\\n-  assemble_string (p, size);\t\t\t\t\t\t\\\n-}\n \f\n /* Default to -G 8 */\n #ifndef MIPS_DEFAULT_GVALUE"}, {"sha": "0fada904e8a7b18c851d9e6141d5ed62ff88e78a", "filename": "gcc/config/mips/sde.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fmips%2Fsde.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fmips%2Fsde.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsde.h?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -97,17 +97,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Use periods rather than dollar signs in special g++ assembler names.  */\n #define NO_DOLLAR_IN_LABEL\n \n-/* Attach a special .ident directive to the end of the file to identify\n-   the version of GCC which compiled this code.  */\n-#undef IDENT_ASM_OP\n-#define IDENT_ASM_OP \"\\t.ident\\t\"\n-\n-/* Output #ident string into the ELF .comment section, so it doesn't\n-   form part of the load image, and so that it can be stripped.  */\n-#undef ASM_OUTPUT_IDENT\n-#define ASM_OUTPUT_IDENT(STREAM, STRING) \\\n-  fprintf (STREAM, \"%s\\\"%s\\\"\\n\", IDENT_ASM_OP, STRING);\n-\n /* Currently we don't support 128bit long doubles, so for now we force\n    n32 to be 64bit.  */\n #undef LONG_DOUBLE_TYPE_SIZE"}, {"sha": "f13efc9c4a6d14d0996c68699be50b1a8be935b8", "filename": "gcc/config/picochip/picochip.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.h?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -488,7 +488,8 @@ do {                                                                         \\\n #define ASM_APP_ON \"// High-level ASM start\\n\"\n #define ASM_APP_OFF \"// High-level ASM end\\n\"\n \n-#define ASM_OUTPUT_IDENT(STREAM,STRING) fprintf(STREAM, \".ident %s\\n\", STRING)\n+#undef TARGET_ASM_OUTPUT_IDENT\n+#define TARGET_ASM_OUTPUT_IDENT default_asm_output_ident_directive\n \n /* Output of Data  */\n "}, {"sha": "08b998e2a46c76fc4f76cff82ae03b71cfbda72d", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -52,6 +52,7 @@\n #include \"target-def.h\"\n #include \"langhooks.h\"\n #include \"opts.h\"\n+#include \"cgraph.h\"\n \n static unsigned int rx_gp_base_regnum_val = INVALID_REGNUM;\n static unsigned int rx_pid_base_regnum_val = INVALID_REGNUM;"}, {"sha": "065079fbbbdc7ead3381cba6ff4d1b4c9b5b3f50", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -602,10 +602,6 @@ typedef unsigned int CUMULATIVE_ARGS;\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n-#undef  IDENT_ASM_OP\n-#define IDENT_ASM_OP  (TARGET_AS100_SYNTAX \\\n-\t\t       ? \"\\t.END\\t; Built by: \": \"\\t.ident\\t\")\n-\n /* For PIC put jump tables into the text section so that the offsets that\n    they contain are always computed between two same-section symbols.  */\n #define JUMP_TABLES_IN_TEXT_SECTION\t(TARGET_PID || flag_pic)"}, {"sha": "81bcce8b6637f97f138a5eca164f7780b61300a8", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -1709,12 +1709,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n     ASM_OUTPUT_ALIGNED_LOCAL (FILE, NAME, SIZE, ALIGN);\t\t\\\n   } while (0)\n \n-#define IDENT_ASM_OP \"\\t.ident\\t\"\n-\n /* Output #ident as a .ident.  */\n \n-#define ASM_OUTPUT_IDENT(FILE, NAME) \\\n-  fprintf (FILE, \"%s\\\"%s\\\"\\n\", IDENT_ASM_OP, NAME);\n+#undef TARGET_ASM_OUTPUT_IDENT\n+#define TARGET_ASM_OUTPUT_IDENT default_asm_output_ident_directive\n \n /* Prettify the assembly.  */\n "}, {"sha": "8399b71ce10144c1162ba2cc335dd5b729f55f39", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -7392,6 +7392,10 @@ Output COFF information or DWARF debugging information which indicates that file\n  This target hook need not be defined if the standard form of output for the file format in use is appropriate.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_ASM_OUTPUT_IDENT (const char *@var{name})\n+Output a string based on @var{name}, suitable for the @samp{#ident}  directive, or the equivalent directive or pragma in non-C-family languages.  If this hook is not defined, nothing is output for the @samp{#ident}  directive.\n+@end deftypefn\n+\n @defmac OUTPUT_QUOTED_STRING (@var{stream}, @var{string})\n A C statement to output the string @var{string} to the stdio stream\n @var{stream}.  If you do not call the function @code{output_quoted_string}\n@@ -7400,12 +7404,6 @@ the assembler source.  So you can use it to canonicalize the format\n of the filename using this macro.\n @end defmac\n \n-@defmac ASM_OUTPUT_IDENT (@var{stream}, @var{string})\n-A C statement to output something to the assembler file to handle a\n-@samp{#ident} directive containing the text @var{string}.  If this\n-macro is not defined, nothing is output for a @samp{#ident} directive.\n-@end defmac\n-\n @deftypefn {Target Hook} void TARGET_ASM_NAMED_SECTION (const char *@var{name}, unsigned int @var{flags}, tree @var{decl})\n Output assembly directives to switch to section @var{name}.  The section\n should have attributes as specified by @var{flags}, which is a bit mask"}, {"sha": "9c76449c755c0179a9d293c26ea41a77c34ea20c", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -7302,6 +7302,8 @@ for the file format in use is appropriate.\n \n @hook TARGET_ASM_OUTPUT_SOURCE_FILENAME\n \n+@hook TARGET_ASM_OUTPUT_IDENT\n+\n @defmac OUTPUT_QUOTED_STRING (@var{stream}, @var{string})\n A C statement to output the string @var{string} to the stdio stream\n @var{stream}.  If you do not call the function @code{output_quoted_string}\n@@ -7310,12 +7312,6 @@ the assembler source.  So you can use it to canonicalize the format\n of the filename using this macro.\n @end defmac\n \n-@defmac ASM_OUTPUT_IDENT (@var{stream}, @var{string})\n-A C statement to output something to the assembler file to handle a\n-@samp{#ident} directive containing the text @var{string}.  If this\n-macro is not defined, nothing is output for a @samp{#ident} directive.\n-@end defmac\n-\n @hook TARGET_ASM_NAMED_SECTION\n Output assembly directives to switch to section @var{name}.  The section\n should have attributes as specified by @var{flags}, which is a bit mask"}, {"sha": "051579ffabeb63dbed4089e7201cd755505f08ee", "filename": "gcc/target.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -427,6 +427,15 @@ DEFHOOK\n  void, (rtx x),\n  default_asm_output_anchor)\n \n+DEFHOOK\n+(output_ident,\n+ \"Output a string based on @var{name}, suitable for the @samp{#ident} \\\n+ directive, or the equivalent directive or pragma in non-C-family languages. \\\n+ If this hook is not defined, nothing is output for the @samp{#ident} \\\n+ directive.\",\n+ void, (const char *name),\n+ hook_void_constcharptr)\n+\n /* Output a DTP-relative reference to a TLS symbol.  */\n DEFHOOK\n (output_dwarf_dtprel,"}, {"sha": "da80fdf82c2442d97634e07c302db104dd303997", "filename": "gcc/targhooks.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -178,3 +178,6 @@ extern enum machine_mode default_get_reg_raw_mode(int);\n \n extern void *default_get_pch_validity (size_t *);\n extern const char *default_pch_valid_p (const void *, size_t);\n+\n+extern void default_asm_output_ident_directive (const char*);\n+"}, {"sha": "9776ff5208a778bb2c12d5ebcb4233eae04ffcaa", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -647,17 +647,17 @@ compile_file (void)\n   /* Attach a special .ident directive to the end of the file to identify\n      the version of GCC which compiled this code.  The format of the .ident\n      string is patterned after the ones produced by native SVR4 compilers.  */\n-#ifdef IDENT_ASM_OP\n   if (!flag_no_ident)\n     {\n       const char *pkg_version = \"(GNU) \";\n+      char *ident_str;\n \n       if (strcmp (\"(GCC) \", pkgversion_string))\n \tpkg_version = pkgversion_string;\n-      fprintf (asm_out_file, \"%s\\\"GCC: %s%s\\\"\\n\",\n-\t       IDENT_ASM_OP, pkg_version, version_string);\n+\n+      ident_str = ACONCAT ((\"GCC: \", pkg_version, version_string, NULL));\n+      targetm.asm_out.output_ident (ident_str);\n     }\n-#endif\n \n   /* Invoke registered plugin callbacks.  */\n   invoke_plugin_callbacks (PLUGIN_FINISH_UNIT, NULL);"}, {"sha": "439b29ea24c470123cf73f65d1d14c2b95b3722a", "filename": "gcc/varasm.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=a8781821e0f8f7ce6b89160bf3b2a0f2c1ee4350", "patch": "@@ -1363,12 +1363,14 @@ make_decl_rtl_for_debug (tree decl)\n void\n assemble_asm (tree string)\n {\n+  const char *p;\n   app_enable ();\n \n   if (TREE_CODE (string) == ADDR_EXPR)\n     string = TREE_OPERAND (string, 0);\n \n-  fprintf (asm_out_file, \"\\t%s\\n\", TREE_STRING_POINTER (string));\n+  p = TREE_STRING_POINTER (string);\n+  fprintf (asm_out_file, \"%s%s\\n\", p[0] == '\\t' ? \"\" : \"\\t\", p);\n }\n \n /* Write the address of the entity given by SYMBOL to SEC.  */\n@@ -7411,4 +7413,27 @@ default_elf_fini_array_asm_out_destructor (rtx symbol, int priority)\n   assemble_addr_to_section (symbol, sec);\n }\n \n+/* Default TARGET_ASM_OUTPUT_IDENT hook.\n+\n+   This is a bit of a cheat.  The real default is a no-op, but this\n+   hook is the default for all targets with a .ident directive.  */\n+\n+void\n+default_asm_output_ident_directive (const char *ident_str)\n+{\n+  const char *ident_asm_op = \"\\t.ident\\t\";\n+\n+  /* If we are still in the front end, do not write out the string\n+     to asm_out_file.  Instead, add a fake top-level asm statement.\n+     This allows the front ends to use this hook without actually\n+     writing to asm_out_file, to handle #ident or Pragma Ident.  */\n+  if (cgraph_state == CGRAPH_STATE_PARSING)\n+    {\n+      char *buf = ACONCAT ((ident_asm_op, \"\\\"\", ident_str, \"\\\"\\n\", NULL));\n+      add_asm_node (build_string (strlen (buf), buf));\n+    }\n+  else\n+    fprintf (asm_out_file, \"%s\\\"%s\\\"\\n\", ident_asm_op, ident_str);\n+}\n+\n #include \"gt-varasm.h\""}]}