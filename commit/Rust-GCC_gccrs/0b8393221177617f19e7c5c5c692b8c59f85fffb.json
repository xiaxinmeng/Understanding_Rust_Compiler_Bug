{"sha": "0b8393221177617f19e7c5c5c692b8c59f85fffb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI4MzkzMjIxMTc3NjE3ZjE5ZTdjNWM1YzY5MmI4YzU5Zjg1ZmZmYg==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2020-03-06T18:29:02Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2020-03-06T18:29:02Z"}, "message": "[AArch64] Use intrinsics for widening multiplies (PR91598)\n\nInline assembler instructions don't have latency info and the scheduler does\nnot attempt to schedule them at all - it does not even honor latencies of\nasm source operands.  As a result, SIMD intrinsics which are implemented using\ninline assembler perform very poorly, particularly on in-order cores.\nAdd new patterns and intrinsics for widening multiplies, which results in a\n63% speedup for the example in the PR, thus fixing the reported regression.\n\n    gcc/\n\tPR target/91598\n\t* config/aarch64/aarch64-builtins.c (TYPES_TERNOPU_LANE): Add define.\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_vec_<su>mult_lane<Qlane>): Add new insn for widening lane mul.\n\t(aarch64_vec_<su>mlal_lane<Qlane>): Likewise.\n\t* config/aarch64/aarch64-simd-builtins.def: Add intrinsics.\n\t* config/aarch64/arm_neon.h:\n\t(vmlal_lane_s16): Expand using intrinsics rather than inline asm.\n\t(vmlal_lane_u16): Likewise.\n\t(vmlal_lane_s32): Likewise.\n\t(vmlal_lane_u32): Likewise.\n\t(vmlal_laneq_s16): Likewise.\n\t(vmlal_laneq_u16): Likewise.\n\t(vmlal_laneq_s32): Likewise.\n\t(vmlal_laneq_u32): Likewise.\n\t(vmull_lane_s16): Likewise.\n\t(vmull_lane_u16): Likewise.\n\t(vmull_lane_s32): Likewise.\n\t(vmull_lane_u32): Likewise.\n\t(vmull_laneq_s16): Likewise.\n\t(vmull_laneq_u16): Likewise.\n\t(vmull_laneq_s32): Likewise.\n\t(vmull_laneq_u32): Likewise.\n\t* config/aarch64/iterators.md (Vcondtype): New iterator for lane mul.\n\t(Qlane): Likewise.", "tree": {"sha": "f6035c29b0c16c3c2ce9c4a0511327622bf47bd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6035c29b0c16c3c2ce9c4a0511327622bf47bd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b8393221177617f19e7c5c5c692b8c59f85fffb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8393221177617f19e7c5c5c692b8c59f85fffb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b8393221177617f19e7c5c5c692b8c59f85fffb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8393221177617f19e7c5c5c692b8c59f85fffb/comments", "author": null, "committer": null, "parents": [{"sha": "3e5c062e96c11a6eaef1cbf94b5992391a850dbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e5c062e96c11a6eaef1cbf94b5992391a850dbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e5c062e96c11a6eaef1cbf94b5992391a850dbf"}], "stats": {"total": 385, "additions": 185, "deletions": 200}, "files": [{"sha": "2bc6f39b01407444784ba1feca2b078ef4e72899", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8393221177617f19e7c5c5c692b8c59f85fffb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8393221177617f19e7c5c5c692b8c59f85fffb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b8393221177617f19e7c5c5c692b8c59f85fffb", "patch": "@@ -1,3 +1,31 @@\n+2020-03-06  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR target/91598\n+\t* config/aarch64/aarch64-builtins.c (TYPES_TERNOPU_LANE): Add define.\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_vec_<su>mult_lane<Qlane>): Add new insn for widening lane mul.\n+\t(aarch64_vec_<su>mlal_lane<Qlane>): Likewise.\n+\t* config/aarch64/aarch64-simd-builtins.def: Add intrinsics.\n+\t* config/aarch64/arm_neon.h:\n+\t(vmlal_lane_s16): Expand using intrinsics rather than inline asm.\n+\t(vmlal_lane_u16): Likewise.\n+\t(vmlal_lane_s32): Likewise.\n+\t(vmlal_lane_u32): Likewise.\n+\t(vmlal_laneq_s16): Likewise.\n+\t(vmlal_laneq_u16): Likewise.\n+\t(vmlal_laneq_s32): Likewise.\n+\t(vmlal_laneq_u32): Likewise.\n+\t(vmull_lane_s16): Likewise.\n+\t(vmull_lane_u16): Likewise.\n+\t(vmull_lane_s32): Likewise.\n+\t(vmull_lane_u32): Likewise.\n+\t(vmull_laneq_s16): Likewise.\n+\t(vmull_laneq_u16): Likewise.\n+\t(vmull_laneq_s32): Likewise.\n+\t(vmull_laneq_u32): Likewise.\n+\t* config/aarch64/iterators.md (Vcondtype): New iterator for lane mul.\n+\t(Qlane): Likewise.\n+\n 2020-03-06  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* aarch64/aarch64-simd.md (aarch64_mla_elt<mode>): Correct lane syntax."}, {"sha": "5744e68ea08722dcc387254f44408eb0fd3ffe6e", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8393221177617f19e7c5c5c692b8c59f85fffb/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8393221177617f19e7c5c5c692b8c59f85fffb/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=0b8393221177617f19e7c5c5c692b8c59f85fffb", "patch": "@@ -175,6 +175,11 @@ aarch64_types_ternopu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n       qualifier_unsigned, qualifier_unsigned };\n #define TYPES_TERNOPU (aarch64_types_ternopu_qualifiers)\n static enum aarch64_type_qualifiers\n+aarch64_types_ternopu_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned,\n+      qualifier_unsigned, qualifier_lane_index };\n+#define TYPES_TERNOPU_LANE (aarch64_types_ternopu_lane_qualifiers)\n+static enum aarch64_type_qualifiers\n aarch64_types_ternopu_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_unsigned, qualifier_unsigned,\n       qualifier_unsigned, qualifier_immediate };"}, {"sha": "332a0b6b1eae00d1656be27da4bfd349ad449f7c", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8393221177617f19e7c5c5c692b8c59f85fffb/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8393221177617f19e7c5c5c692b8c59f85fffb/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=0b8393221177617f19e7c5c5c692b8c59f85fffb", "patch": "@@ -191,6 +191,15 @@\n   BUILTIN_VQW (BINOP, vec_widen_smult_hi_, 10)\n   BUILTIN_VQW (BINOPU, vec_widen_umult_hi_, 10)\n \n+  BUILTIN_VD_HSI (TERNOP_LANE, vec_smult_lane_, 0)\n+  BUILTIN_VD_HSI (QUADOP_LANE, vec_smlal_lane_, 0)\n+  BUILTIN_VD_HSI (TERNOP_LANE, vec_smult_laneq_, 0)\n+  BUILTIN_VD_HSI (QUADOP_LANE, vec_smlal_laneq_, 0)\n+  BUILTIN_VD_HSI (TERNOPU_LANE, vec_umult_lane_, 0)\n+  BUILTIN_VD_HSI (QUADOPU_LANE, vec_umlal_lane_, 0)\n+  BUILTIN_VD_HSI (TERNOPU_LANE, vec_umult_laneq_, 0)\n+  BUILTIN_VD_HSI (QUADOPU_LANE, vec_umlal_laneq_, 0)\n+\n   BUILTIN_VSD_HSI (BINOP, sqdmull, 0)\n   BUILTIN_VSD_HSI (TERNOP_LANE, sqdmull_lane, 0)\n   BUILTIN_VSD_HSI (TERNOP_LANE, sqdmull_laneq, 0)"}, {"sha": "24a11fb50403423c63a36797d796fdc78326acda", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8393221177617f19e7c5c5c692b8c59f85fffb/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8393221177617f19e7c5c5c692b8c59f85fffb/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=0b8393221177617f19e7c5c5c692b8c59f85fffb", "patch": "@@ -1892,6 +1892,46 @@\n  }\n )\n \n+;; vmull_lane_s16 intrinsics\n+(define_insn \"aarch64_vec_<su>mult_lane<Qlane>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+\t(mult:<VWIDE>\n+\t  (ANY_EXTEND:<VWIDE>\n+\t    (match_operand:<VCOND> 1 \"register_operand\" \"w\"))\n+\t  (ANY_EXTEND:<VWIDE>\n+\t    (vec_duplicate:<VCOND>\n+\t      (vec_select:<VEL>\n+\t\t(match_operand:VDQHS 2 \"register_operand\" \"<vwx>\")\n+\t\t(parallel [(match_operand:SI 3 \"immediate_operand\" \"i\")]))))))]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[3] = aarch64_endian_lane_rtx (<MODE>mode, INTVAL (operands[3]));\n+    return \"<su>mull\\\\t%0.<Vwtype>, %1.<Vcondtype>, %2.<Vetype>[%3]\";\n+  }\n+  [(set_attr \"type\" \"neon_mul_<Vetype>_scalar_long\")]\n+)\n+\n+;; vmlal_lane_s16 intrinsics\n+(define_insn \"aarch64_vec_<su>mlal_lane<Qlane>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+\t(plus:<VWIDE>\n+\t  (mult:<VWIDE>\n+\t    (ANY_EXTEND:<VWIDE>\n+\t      (match_operand:<VCOND> 2 \"register_operand\" \"w\"))\n+\t    (ANY_EXTEND:<VWIDE>\n+\t      (vec_duplicate:<VCOND>\n+\t\t(vec_select:<VEL>\n+\t\t  (match_operand:VDQHS 3 \"register_operand\" \"<vwx>\")\n+\t\t  (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])))))\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[4] = aarch64_endian_lane_rtx (<MODE>mode, INTVAL (operands[4]));\n+    return \"<su>mlal\\\\t%0.<Vwtype>, %2.<Vcondtype>, %3.<Vetype>[%4]\";\n+  }\n+  [(set_attr \"type\" \"neon_mla_<Vetype>_scalar_long\")]\n+)\n+\n ;; FP vector operations.\n ;; AArch64 AdvSIMD supports single-precision (32-bit) and \n ;; double-precision (64-bit) floating-point data types and arithmetic as"}, {"sha": "50f8b23bc17b0de59a9b418d77cf247c80934f95", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 96, "deletions": 200, "changes": 296, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8393221177617f19e7c5c5c692b8c59f85fffb/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8393221177617f19e7c5c5c692b8c59f85fffb/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=0b8393221177617f19e7c5c5c692b8c59f85fffb", "patch": "@@ -7700,117 +7700,61 @@ vmlal_high_u32 (uint64x2_t __a, uint32x4_t __b, uint32x4_t __c)\n   return __result;\n }\n \n-#define vmlal_lane_s16(a, b, c, d)                                      \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int16x4_t c_ = (c);                                              \\\n-       int16x4_t b_ = (b);                                              \\\n-       int32x4_t a_ = (a);                                              \\\n-       int32x4_t result;                                                \\\n-       __asm__ (\"smlal %0.4s,%2.4h,%3.h[%4]\"                            \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmlal_lane_s16 (int32x4_t __acc, int16x4_t __a, int16x4_t __b, const int __c)\n+{\n+  return __builtin_aarch64_vec_smlal_lane_v4hi (__acc, __a, __b, __c);\n+}\n \n-#define vmlal_lane_s32(a, b, c, d)                                      \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int32x2_t c_ = (c);                                              \\\n-       int32x2_t b_ = (b);                                              \\\n-       int64x2_t a_ = (a);                                              \\\n-       int64x2_t result;                                                \\\n-       __asm__ (\"smlal %0.2d,%2.2s,%3.s[%4]\"                            \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmlal_lane_s32 (int64x2_t __acc, int32x2_t __a, int32x2_t __b, const int __c)\n+{\n+  return __builtin_aarch64_vec_smlal_lane_v2si (__acc, __a, __b, __c);\n+}\n \n-#define vmlal_lane_u16(a, b, c, d)                                      \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint16x4_t c_ = (c);                                             \\\n-       uint16x4_t b_ = (b);                                             \\\n-       uint32x4_t a_ = (a);                                             \\\n-       uint32x4_t result;                                               \\\n-       __asm__ (\"umlal %0.4s,%2.4h,%3.h[%4]\"                            \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmlal_lane_u16 (uint32x4_t __acc, uint16x4_t __a, uint16x4_t __b, const int __c)\n+{\n+  return __builtin_aarch64_vec_umlal_lane_v4hi_uuuus (__acc, __a, __b, __c);\n+}\n \n-#define vmlal_lane_u32(a, b, c, d)                                      \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint32x2_t c_ = (c);                                             \\\n-       uint32x2_t b_ = (b);                                             \\\n-       uint64x2_t a_ = (a);                                             \\\n-       uint64x2_t result;                                               \\\n-       __asm__ (\"umlal %0.2d, %2.2s, %3.s[%4]\"                          \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmlal_lane_u32 (uint64x2_t __acc, uint32x2_t __a, uint32x2_t __b, const int __c)\n+{\n+  return __builtin_aarch64_vec_umlal_lane_v2si_uuuus (__acc, __a, __b, __c);\n+}\n \n-#define vmlal_laneq_s16(a, b, c, d)                                     \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int16x8_t c_ = (c);                                              \\\n-       int16x4_t b_ = (b);                                              \\\n-       int32x4_t a_ = (a);                                              \\\n-       int32x4_t result;                                                \\\n-       __asm__ (\"smlal %0.4s, %2.4h, %3.h[%4]\"                          \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmlal_laneq_s16 (int32x4_t __acc, int16x4_t __a, int16x8_t __b, const int __c)\n+{\n+  return __builtin_aarch64_vec_smlal_laneq_v4hi (__acc, __a, __b, __c);\n+}\n \n-#define vmlal_laneq_s32(a, b, c, d)                                     \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int32x4_t c_ = (c);                                              \\\n-       int32x2_t b_ = (b);                                              \\\n-       int64x2_t a_ = (a);                                              \\\n-       int64x2_t result;                                                \\\n-       __asm__ (\"smlal %0.2d, %2.2s, %3.s[%4]\"                          \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmlal_laneq_s32 (int64x2_t __acc, int32x2_t __a, int32x4_t __b, const int __c)\n+{\n+  return __builtin_aarch64_vec_smlal_laneq_v2si (__acc, __a, __b, __c);\n+}\n \n-#define vmlal_laneq_u16(a, b, c, d)                                     \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint16x8_t c_ = (c);                                             \\\n-       uint16x4_t b_ = (b);                                             \\\n-       uint32x4_t a_ = (a);                                             \\\n-       uint32x4_t result;                                               \\\n-       __asm__ (\"umlal %0.4s, %2.4h, %3.h[%4]\"                          \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"x\"(c_), \"i\"(d)                     \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmlal_laneq_u16 (uint32x4_t __acc, uint16x4_t __a, uint16x8_t __b, const int __c)\n+{\n+  return __builtin_aarch64_vec_umlal_laneq_v4hi_uuuus (__acc, __a, __b, __c);\n+}\n \n-#define vmlal_laneq_u32(a, b, c, d)                                     \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint32x4_t c_ = (c);                                             \\\n-       uint32x2_t b_ = (b);                                             \\\n-       uint64x2_t a_ = (a);                                             \\\n-       uint64x2_t result;                                               \\\n-       __asm__ (\"umlal %0.2d, %2.2s, %3.s[%4]\"                          \\\n-                : \"=w\"(result)                                          \\\n-                : \"0\"(a_), \"w\"(b_), \"w\"(c_), \"i\"(d)                     \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmlal_laneq_u32 (uint64x2_t __acc, uint32x2_t __a, uint32x4_t __b, const int __c)\n+{\n+  return __builtin_aarch64_vec_umlal_laneq_v2si_uuuus (__acc, __a, __b, __c);\n+}\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n@@ -9289,109 +9233,61 @@ vmull_high_u32 (uint32x4_t __a, uint32x4_t __b)\n   return __builtin_aarch64_vec_widen_umult_hi_v4si_uuu (__a, __b);\n }\n \n-#define vmull_lane_s16(a, b, c)                                         \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int16x4_t b_ = (b);                                              \\\n-       int16x4_t a_ = (a);                                              \\\n-       int32x4_t result;                                                \\\n-       __asm__ (\"smull %0.4s,%1.4h,%2.h[%3]\"                            \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"x\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmull_lane_s16 (int16x4_t __a, int16x4_t __b, const int __c)\n+{\n+  return __builtin_aarch64_vec_smult_lane_v4hi (__a, __b, __c);\n+}\n \n-#define vmull_lane_s32(a, b, c)                                         \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int32x2_t b_ = (b);                                              \\\n-       int32x2_t a_ = (a);                                              \\\n-       int64x2_t result;                                                \\\n-       __asm__ (\"smull %0.2d,%1.2s,%2.s[%3]\"                            \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmull_lane_s32 (int32x2_t __a, int32x2_t __b, const int __c)\n+{\n+  return __builtin_aarch64_vec_smult_lane_v2si (__a, __b, __c);\n+}\n \n-#define vmull_lane_u16(a, b, c)                                         \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint16x4_t b_ = (b);                                             \\\n-       uint16x4_t a_ = (a);                                             \\\n-       uint32x4_t result;                                               \\\n-       __asm__ (\"umull %0.4s,%1.4h,%2.h[%3]\"                            \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"x\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmull_lane_u16 (uint16x4_t __a, uint16x4_t __b, const int __c)\n+{\n+  return __builtin_aarch64_vec_umult_lane_v4hi_uuus (__a, __b, __c);\n+}\n \n-#define vmull_lane_u32(a, b, c)                                         \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint32x2_t b_ = (b);                                             \\\n-       uint32x2_t a_ = (a);                                             \\\n-       uint64x2_t result;                                               \\\n-       __asm__ (\"umull %0.2d, %1.2s, %2.s[%3]\"                          \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmull_lane_u32 (uint32x2_t __a, uint32x2_t __b, const int __c)\n+{\n+  return __builtin_aarch64_vec_umult_lane_v2si_uuus (__a, __b, __c);\n+}\n \n-#define vmull_laneq_s16(a, b, c)                                        \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int16x8_t b_ = (b);                                              \\\n-       int16x4_t a_ = (a);                                              \\\n-       int32x4_t result;                                                \\\n-       __asm__ (\"smull %0.4s, %1.4h, %2.h[%3]\"                          \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"x\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmull_laneq_s16 (int16x4_t __a, int16x8_t __b, const int __c)\n+{\n+  return __builtin_aarch64_vec_smult_laneq_v4hi (__a, __b, __c);\n+}\n \n-#define vmull_laneq_s32(a, b, c)                                        \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int32x4_t b_ = (b);                                              \\\n-       int32x2_t a_ = (a);                                              \\\n-       int64x2_t result;                                                \\\n-       __asm__ (\"smull %0.2d, %1.2s, %2.s[%3]\"                          \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmull_laneq_s32 (int32x2_t __a, int32x4_t __b, const int __c)\n+{\n+  return __builtin_aarch64_vec_smult_laneq_v2si (__a, __b, __c);\n+}\n \n-#define vmull_laneq_u16(a, b, c)                                        \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint16x8_t b_ = (b);                                             \\\n-       uint16x4_t a_ = (a);                                             \\\n-       uint32x4_t result;                                               \\\n-       __asm__ (\"umull %0.4s, %1.4h, %2.h[%3]\"                          \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"x\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmull_laneq_u16 (uint16x4_t __a, uint16x8_t __b, const int __c)\n+{\n+  return __builtin_aarch64_vec_umult_laneq_v4hi_uuus (__a, __b, __c);\n+}\n \n-#define vmull_laneq_u32(a, b, c)                                        \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint32x4_t b_ = (b);                                             \\\n-       uint32x2_t a_ = (a);                                             \\\n-       uint64x2_t result;                                               \\\n-       __asm__ (\"umull %0.2d, %1.2s, %2.s[%3]\"                          \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"w\"(b_), \"i\"(c)                              \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vmull_laneq_u32 (uint32x2_t __a, uint32x4_t __b, const int __c)\n+{\n+  return __builtin_aarch64_vec_umult_laneq_v2si_uuus (__a, __b, __c);\n+}\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))"}, {"sha": "95fa3e4baa10209d9436a52e1d74818c6730300a", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8393221177617f19e7c5c5c692b8c59f85fffb/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8393221177617f19e7c5c5c692b8c59f85fffb/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=0b8393221177617f19e7c5c5c692b8c59f85fffb", "patch": "@@ -986,6 +986,13 @@\n \t\t\t (V4SF \"4s\") (V2DF \"2d\")\n \t\t\t (V4HF \"4h\") (V8HF \"8h\")])\n \n+;; Map mode to type used in widening multiplies.\n+(define_mode_attr Vcondtype [(V4HI \"4h\") (V8HI \"4h\") (V2SI \"2s\") (V4SI \"2s\")])\n+\n+;; Map lane mode to name\n+(define_mode_attr Qlane [(V4HI \"_v4hi\") (V8HI  \"q_v4hi\")\n+\t\t\t (V2SI \"_v2si\") (V4SI  \"q_v2si\")])\n+\n (define_mode_attr Vrevsuff [(V4HI \"16\") (V8HI \"16\") (V2SI \"32\")\n                             (V4SI \"32\") (V2DI \"64\")])\n "}]}