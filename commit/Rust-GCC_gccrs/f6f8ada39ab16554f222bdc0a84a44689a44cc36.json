{"sha": "f6f8ada39ab16554f222bdc0a84a44689a44cc36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZmOGFkYTM5YWIxNjU1NGYyMjJiZGMwYTg0YTQ0Njg5YTQ0Y2MzNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-02-17T20:47:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-02-17T20:47:52Z"}, "message": "re PR c/3444 (Test fails (cast))\n\n\tPR c/3444:\n\t* c-typeck.c (build_binary_op) [BIT_XOR_EXPR]: Remove explicit\n\tshortening.\n\n\t* typeck.c (build_binary_op) [BIT_XOR_EXPR]: Remove explicit\n\tshortening.\n\n\t* gcc.c-torture/execute/20020216-1.c: New test.\n\nFrom-SVN: r49825", "tree": {"sha": "e63131501800d2d5c6229c295178c7ab46ee91c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e63131501800d2d5c6229c295178c7ab46ee91c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6f8ada39ab16554f222bdc0a84a44689a44cc36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6f8ada39ab16554f222bdc0a84a44689a44cc36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6f8ada39ab16554f222bdc0a84a44689a44cc36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6f8ada39ab16554f222bdc0a84a44689a44cc36/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e16b32fc251052029bcccd99f6e90a52028b3af6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e16b32fc251052029bcccd99f6e90a52028b3af6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e16b32fc251052029bcccd99f6e90a52028b3af6"}], "stats": {"total": 87, "additions": 39, "deletions": 48}, "files": [{"sha": "700f7a479adaa87e3ad20d8fdcaf2480da17c3d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f8ada39ab16554f222bdc0a84a44689a44cc36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f8ada39ab16554f222bdc0a84a44689a44cc36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6f8ada39ab16554f222bdc0a84a44689a44cc36", "patch": "@@ -1,3 +1,9 @@\n+2002-02-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/3444:\n+\t* c-typeck.c (build_binary_op) [BIT_XOR_EXPR]: Remove explicit\n+\tshortening.\n+\n 2002-02-17  Philipp Thomas  <pthomas@suse.de>\n \n \t* config/cris/cris.h: Undefine STARTFILE_SPEC and"}, {"sha": "dd8abdd11f75181e787a39176daa99e72dc901b5", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f8ada39ab16554f222bdc0a84a44689a44cc36/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f8ada39ab16554f222bdc0a84a44689a44cc36/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=f6f8ada39ab16554f222bdc0a84a44689a44cc36", "patch": "@@ -2060,29 +2060,6 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n     case BIT_XOR_EXPR:\n       if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n \tshorten = -1;\n-      /* If one operand is a constant, and the other is a short type\n-\t that has been converted to an int,\n-\t really do the work in the short type and then convert the\n-\t result to int.  If we are lucky, the constant will be 0 or 1\n-\t in the short type, making the entire operation go away.  */\n-      if (TREE_CODE (op0) == INTEGER_CST\n-\t  && TREE_CODE (op1) == NOP_EXPR\n-\t  && TYPE_PRECISION (type1) > TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (op1, 0)))\n-\t  && TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (op1, 0))))\n-\t{\n-\t  final_type = result_type;\n-\t  op1 = TREE_OPERAND (op1, 0);\n-\t  result_type = TREE_TYPE (op1);\n-\t}\n-      if (TREE_CODE (op1) == INTEGER_CST\n-\t  && TREE_CODE (op0) == NOP_EXPR\n-\t  && TYPE_PRECISION (type0) > TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (op0, 0)))\n-\t  && TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (op0, 0))))\n-\t{\n-\t  final_type = result_type;\n-\t  op0 = TREE_OPERAND (op0, 0);\n-\t  result_type = TREE_TYPE (op0);\n-\t}\n       break;\n \n     case TRUNC_MOD_EXPR:"}, {"sha": "872ad4f4113e1ba38f2e08aa2488b7baa3fa22fa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f8ada39ab16554f222bdc0a84a44689a44cc36/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f8ada39ab16554f222bdc0a84a44689a44cc36/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f6f8ada39ab16554f222bdc0a84a44689a44cc36", "patch": "@@ -1,3 +1,8 @@\n+2002-02-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* typeck.c (build_binary_op) [BIT_XOR_EXPR]: Remove explicit\n+\tshortening.\n+\n 2002-02-15  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* decl.c (grokdeclarator): Set typedef_decl for all TYPE_DECLs,"}, {"sha": "62d17a8cfd94e7fbecb71f4776ba80dcbda25471", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f8ada39ab16554f222bdc0a84a44689a44cc36/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f8ada39ab16554f222bdc0a84a44689a44cc36/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f6f8ada39ab16554f222bdc0a84a44689a44cc36", "patch": "@@ -3514,31 +3514,6 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n     case BIT_XOR_EXPR:\n       if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n \tshorten = -1;\n-      /* If one operand is a constant, and the other is a short type\n-\t that has been converted to an int,\n-\t really do the work in the short type and then convert the\n-\t result to int.  If we are lucky, the constant will be 0 or 1\n-\t in the short type, making the entire operation go away.  */\n-      if (TREE_CODE (op0) == INTEGER_CST\n-\t  && TREE_CODE (op1) == NOP_EXPR\n-\t  && (TYPE_PRECISION (type1)\n-\t      > TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (op1, 0))))\n-\t  && TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (op1, 0))))\n-\t{\n-\t  final_type = result_type;\n-\t  op1 = TREE_OPERAND (op1, 0);\n-\t  result_type = TREE_TYPE (op1);\n-\t}\n-      if (TREE_CODE (op1) == INTEGER_CST\n-\t  && TREE_CODE (op0) == NOP_EXPR\n-\t  && (TYPE_PRECISION (type0)\n-\t      > TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (op0, 0))))\n-\t  && TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (op0, 0))))\n-\t{\n-\t  final_type = result_type;\n-\t  op0 = TREE_OPERAND (op0, 0);\n-\t  result_type = TREE_TYPE (op0);\n-\t}\n       break;\n \n     case TRUNC_MOD_EXPR:"}, {"sha": "1e1538de6f6340cb5b6d0299402e3cab17819b8d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f8ada39ab16554f222bdc0a84a44689a44cc36/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f8ada39ab16554f222bdc0a84a44689a44cc36/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f6f8ada39ab16554f222bdc0a84a44689a44cc36", "patch": "@@ -1,3 +1,7 @@\n+2002-02-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/execute/20020216-1.c: New test.\n+\n 2002-02-16  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* gcc.dg/decl-1.c: Update, new test."}, {"sha": "bf62de568e44228404e1d44f12f454a8c7cacbb6", "filename": "gcc/testsuite/gcc.c-torture/execute/20020216-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6f8ada39ab16554f222bdc0a84a44689a44cc36/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020216-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6f8ada39ab16554f222bdc0a84a44689a44cc36/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020216-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020216-1.c?ref=f6f8ada39ab16554f222bdc0a84a44689a44cc36", "patch": "@@ -0,0 +1,24 @@\n+/* PR c/3444\n+   This used to fail because bitwise xor was improperly computed in char type\n+   and sign extended to int type.  */\n+\n+extern void abort ();\n+extern void exit (int);\n+\n+signed char c = (signed char) 0xffffffff;\n+\n+int foo (void)\n+{\n+  return (unsigned short) c ^ (signed char) 0x99999999;\n+}\n+\n+int main (void)\n+{\n+  if ((unsigned char) -1 != 0xff\n+      || sizeof (short) != 2\n+      || sizeof (int) != 4)\n+    exit (0);\n+  if (foo () != (int) 0xffff0066)\n+    abort ();\n+  exit (0);\n+}"}]}