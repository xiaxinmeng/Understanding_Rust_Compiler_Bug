{"sha": "3cf0ca233fabc18547767ded4e4361bd632f6461", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NmMGNhMjMzZmFiYzE4NTQ3NzY3ZGVkNGU0MzYxYmQ2MzJmNjQ2MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-04-07T21:47:31Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-04-07T21:47:31Z"}, "message": "tree.c (build_aggr_init_expr): Always return error_mark_node on abstract violation.\n\n\t* tree.c (build_aggr_init_expr): Always return error_mark_node\n\ton abstract violation.\n\nFrom-SVN: r172144", "tree": {"sha": "feca1380847aef1a3dff2bc4c9389d96c59d59ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/feca1380847aef1a3dff2bc4c9389d96c59d59ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cf0ca233fabc18547767ded4e4361bd632f6461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cf0ca233fabc18547767ded4e4361bd632f6461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cf0ca233fabc18547767ded4e4361bd632f6461", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cf0ca233fabc18547767ded4e4361bd632f6461/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "362115a9125a17809f4b7c9c37afccc9029ed733", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/362115a9125a17809f4b7c9c37afccc9029ed733", "html_url": "https://github.com/Rust-GCC/gccrs/commit/362115a9125a17809f4b7c9c37afccc9029ed733"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "0d9251ce6897d955ed8428b127f406cb795969fc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cf0ca233fabc18547767ded4e4361bd632f6461/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cf0ca233fabc18547767ded4e4361bd632f6461/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3cf0ca233fabc18547767ded4e4361bd632f6461", "patch": "@@ -1,5 +1,8 @@\n 2011-04-07  Jason Merrill  <jason@redhat.com>\n \n+\t* tree.c (build_aggr_init_expr): Always return error_mark_node\n+\ton abstract violation.\n+\n \tPR c++/48450\n \t* tree.c (build_cplus_new, build_aggr_init_expr): Take complain.\n \t(bot_manip): Adjust."}, {"sha": "014986dc3188d014d472b35e689c6b5981a2721a", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cf0ca233fabc18547767ded4e4361bd632f6461/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cf0ca233fabc18547767ded4e4361bd632f6461/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=3cf0ca233fabc18547767ded4e4361bd632f6461", "patch": "@@ -382,8 +382,7 @@ build_aggr_init_expr (tree type, tree init, tsubst_flags_t complain)\n \n   /* Make sure that we're not trying to create an instance of an\n      abstract class.  */\n-  if (abstract_virtuals_error_sfinae (NULL_TREE, type, complain)\n-      && !(complain & tf_error))\n+  if (abstract_virtuals_error_sfinae (NULL_TREE, type, complain))\n     return error_mark_node;\n \n   if (TREE_CODE (init) == CALL_EXPR)"}]}