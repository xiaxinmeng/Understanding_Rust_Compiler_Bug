{"sha": "e7176f75d6b2dd56059dad5920c770dade79df95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcxNzZmNzVkNmIyZGQ1NjA1OWRhZDU5MjBjNzcwZGFkZTc5ZGY5NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-10-13T17:19:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-10-13T17:19:12Z"}, "message": "re PR target/82274 (__builtin_mul_overflow fails to detect overflow for int64_t when compiled with -m32)\n\n\tPR target/82274\n\t* internal-fn.c (expand_mul_overflow): If both operands have\n\tthe same highpart of -1 or 0 and the topmost bit of lowpart\n\tis different, overflow is if res <= 0 rather than res < 0.\n\n\t* libgcc2.c (__mulvDI3): If both operands have\n\tthe same highpart of -1 and the topmost bit of lowpart is 0,\n\tmultiplication overflows even if both lowparts are 0.\n\n\t* gcc.dg/pr82274-1.c: New test.\n\t* gcc.dg/pr82274-2.c: New test.\n\nFrom-SVN: r253734", "tree": {"sha": "7ac0495b4cd1c60e5a022d19c0de3ce667bdd725", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ac0495b4cd1c60e5a022d19c0de3ce667bdd725"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7176f75d6b2dd56059dad5920c770dade79df95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7176f75d6b2dd56059dad5920c770dade79df95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7176f75d6b2dd56059dad5920c770dade79df95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7176f75d6b2dd56059dad5920c770dade79df95/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8de7190350263d381df5c12cfbbfb4191b8d3973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de7190350263d381df5c12cfbbfb4191b8d3973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8de7190350263d381df5c12cfbbfb4191b8d3973"}], "stats": {"total": 71, "additions": 67, "deletions": 4}, "files": [{"sha": "b593718fa6ff1ffa2ea2a87af15b2e16e082423b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7176f75d6b2dd56059dad5920c770dade79df95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7176f75d6b2dd56059dad5920c770dade79df95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7176f75d6b2dd56059dad5920c770dade79df95", "patch": "@@ -1,3 +1,10 @@\n+2017-10-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/82274\n+\t* internal-fn.c (expand_mul_overflow): If both operands have\n+\tthe same highpart of -1 or 0 and the topmost bit of lowpart\n+\tis different, overflow is if res <= 0 rather than res < 0.\n+\n 2017-10-13  Pat Haugen  <pthaugen@us.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_builtin_vectorization_cost): Remove"}, {"sha": "ce9e8bb75e988b502714e335bd13293f4fbdc060", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7176f75d6b2dd56059dad5920c770dade79df95/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7176f75d6b2dd56059dad5920c770dade79df95/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=e7176f75d6b2dd56059dad5920c770dade79df95", "patch": "@@ -1770,16 +1770,16 @@ expand_mul_overflow (location_t loc, tree lhs, tree arg0, tree arg1,\n \t\t}\n \n \t      /* At this point hipart{0,1} are both in [-1, 0].  If they are\n-\t\t the same, overflow happened if res is negative, if they are\n-\t\t different, overflow happened if res is positive.  */\n+\t\t the same, overflow happened if res is non-positive, if they\n+\t\t are different, overflow happened if res is positive.  */\n \t      if (op0_sign != 1 && op1_sign != 1 && op0_sign != op1_sign)\n \t\temit_jump (hipart_different);\n \t      else if (op0_sign == 1 || op1_sign == 1)\n \t\tdo_compare_rtx_and_jump (hipart0, hipart1, NE, true, hmode,\n \t\t\t\t\t NULL_RTX, NULL, hipart_different,\n \t\t\t\t\t profile_probability::even ());\n \n-\t      do_compare_rtx_and_jump (res, const0_rtx, LT, false, mode,\n+\t      do_compare_rtx_and_jump (res, const0_rtx, LE, false, mode,\n \t\t\t\t       NULL_RTX, NULL, do_error,\n \t\t\t\t       profile_probability::very_unlikely ());\n \t      emit_jump (done_label);"}, {"sha": "d23143ad4964d5edfe4cf2fa48484fdbf3ebedf3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7176f75d6b2dd56059dad5920c770dade79df95/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7176f75d6b2dd56059dad5920c770dade79df95/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e7176f75d6b2dd56059dad5920c770dade79df95", "patch": "@@ -1,3 +1,9 @@\n+2017-10-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/82274\n+\t* gcc.dg/pr82274-1.c: New test.\n+\t* gcc.dg/pr82274-2.c: New test.\n+\n 2017-10-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/80873"}, {"sha": "f96b7338fc47ec13660383eb0d6dff4d1f7948cf", "filename": "gcc/testsuite/gcc.dg/pr82274-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7176f75d6b2dd56059dad5920c770dade79df95/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82274-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7176f75d6b2dd56059dad5920c770dade79df95/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82274-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82274-1.c?ref=e7176f75d6b2dd56059dad5920c770dade79df95", "patch": "@@ -0,0 +1,16 @@\n+/* PR target/82274 */\n+/* { dg-do run } */\n+/* { dg-shouldfail \"trapv\" } */\n+/* { dg-options \"-ftrapv\" } */\n+\n+int\n+main ()\n+{\n+#ifdef __SIZEOF_INT128__\n+  volatile __int128 m = -(((__int128) 1) << (__CHAR_BIT__ * __SIZEOF_INT128__ / 2));\n+#else\n+  volatile long long m = -(1LL << (__CHAR_BIT__ * __SIZEOF_LONG_LONG__ / 2));\n+#endif\n+  m = m * m;\n+  return 0;\n+}"}, {"sha": "a9643b5a923d454a2c7b224f351a208fde3bd802", "filename": "gcc/testsuite/gcc.dg/pr82274-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7176f75d6b2dd56059dad5920c770dade79df95/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82274-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7176f75d6b2dd56059dad5920c770dade79df95/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82274-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82274-2.c?ref=e7176f75d6b2dd56059dad5920c770dade79df95", "patch": "@@ -0,0 +1,26 @@\n+/* PR target/82274 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+main ()\n+{\n+#ifdef __SIZEOF_INT128__\n+  __int128 m = -(((__int128) 1) << (__CHAR_BIT__ * __SIZEOF_INT128__ / 2));\n+  volatile __int128 mv = m;\n+  __int128 r;\n+#else\n+  long long m = -(1LL << (__CHAR_BIT__ * __SIZEOF_LONG_LONG__ / 2));\n+  volatile long long mv = m;\n+  long long r;\n+#endif\n+  if (!__builtin_mul_overflow (mv, mv, &r))\n+    __builtin_abort ();\n+  if (!__builtin_mul_overflow_p (mv, mv, r))\n+    __builtin_abort ();\n+  if (!__builtin_mul_overflow (m, m, &r))\n+    __builtin_abort ();\n+  if (!__builtin_mul_overflow_p (m, m, r))\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "2360b75ac8d13f42c17ac3ab97755cc1e03ca699", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7176f75d6b2dd56059dad5920c770dade79df95/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7176f75d6b2dd56059dad5920c770dade79df95/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=e7176f75d6b2dd56059dad5920c770dade79df95", "patch": "@@ -1,3 +1,10 @@\n+2017-10-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/82274\n+\t* libgcc2.c (__mulvDI3): If both operands have\n+\tthe same highpart of -1 and the topmost bit of lowpart is 0,\n+\tmultiplication overflows even if both lowparts are 0.\n+\n 2017-09-28  James Bowman  <james.bowman@ftdichip.com>\n \n \t* config/ft32/crti-hw.S: Add watchdog vector, FT930 IRQ support."}, {"sha": "83f865a04dba41dadebcd23d3a957b9dff656801", "filename": "libgcc/libgcc2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7176f75d6b2dd56059dad5920c770dade79df95/libgcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7176f75d6b2dd56059dad5920c770dade79df95/libgcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc2.c?ref=e7176f75d6b2dd56059dad5920c770dade79df95", "patch": "@@ -375,7 +375,8 @@ __mulvDI3 (DWtype u, DWtype v)\n \t\t}\n \t      else\n \t\t{\n-\t\t  if (uu.s.high == (Wtype) -1 && vv.s.high == (Wtype) - 1)\n+\t\t  if ((uu.s.high & vv.s.high) == (Wtype) -1\n+\t\t      && (uu.s.low | vv.s.low) != 0)\n \t\t    {\n \t\t      DWunion ww = {.ll = (UDWtype) (UWtype) uu.s.low\n \t\t\t\t    * (UDWtype) (UWtype) vv.s.low};"}]}