{"sha": "410c2fbabecdcb3d9420565583e690deb36e31c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEwYzJmYmFiZWNkY2IzZDk0MjA1NjU1ODNlNjkwZGViMzZlMzFjMw==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@scf.usc.edu", "date": "1998-05-26T23:54:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-05-26T23:54:23Z"}, "message": "pt.c (process_template_parm): Accept TYPENAME_TYPE nodes.\n\n\t* pt.c (process_template_parm): Accept TYPENAME_TYPE nodes.\n\t(convert_nontype_argument): Handle cases when nontype template\n\tparameters become classes after substitution.\n\nFrom-SVN: r20084", "tree": {"sha": "85912eb632acb6f881772512229ee37ae5b5ded8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85912eb632acb6f881772512229ee37ae5b5ded8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/410c2fbabecdcb3d9420565583e690deb36e31c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410c2fbabecdcb3d9420565583e690deb36e31c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410c2fbabecdcb3d9420565583e690deb36e31c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410c2fbabecdcb3d9420565583e690deb36e31c3/comments", "author": null, "committer": null, "parents": [{"sha": "8da801cf85dfcafdba58a78881117617def25af8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da801cf85dfcafdba58a78881117617def25af8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8da801cf85dfcafdba58a78881117617def25af8"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "2097bbf7d756f9496f1b7d7aeddf2db382364ed5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410c2fbabecdcb3d9420565583e690deb36e31c3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410c2fbabecdcb3d9420565583e690deb36e31c3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=410c2fbabecdcb3d9420565583e690deb36e31c3", "patch": "@@ -1,3 +1,9 @@\n+1998-05-26  Kriang Lerdsuwanakij  <lerdsuwa@scf.usc.edu>\n+\n+\t* pt.c (process_template_parm): Accept TYPENAME_TYPE nodes.\n+\t(convert_nontype_argument): Handle cases when nontype template\n+\tparameters become classes after substitution.\n+\n 1998-05-26  Mark Mitchell  <mark@markmitchell.com>\n \n \t* friend.c (is_friend): Use comptypes, rather than == to compare"}, {"sha": "509aa15a3d3a1b4bf5d0e4dc025c3a49fae9c79f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410c2fbabecdcb3d9420565583e690deb36e31c3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410c2fbabecdcb3d9420565583e690deb36e31c3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=410c2fbabecdcb3d9420565583e690deb36e31c3", "patch": "@@ -1382,7 +1382,8 @@ process_template_parm (list, next)\n       /* A template parameter is not modifiable.  */\n       TREE_READONLY (parm) = 1;\n       if (IS_AGGR_TYPE (TREE_TYPE (parm))\n-\t  && TREE_CODE (TREE_TYPE (parm)) != TEMPLATE_TYPE_PARM)\n+\t  && TREE_CODE (TREE_TYPE (parm)) != TEMPLATE_TYPE_PARM\n+\t  && TREE_CODE (TREE_TYPE (parm)) != TYPENAME_TYPE)\n \t{\n \t  cp_error (\"`%#T' is not a valid type for a template constant parameter\",\n \t\t    TREE_TYPE (parm));\n@@ -2232,7 +2233,13 @@ convert_nontype_argument (type, expr)\n \ttree fns;\n \ttree fn;\n \n-\tmy_friendly_assert (TYPE_PTRMEMFUNC_P (type), 0);\n+\tif (!TYPE_PTRMEMFUNC_P (type))\n+\t  /* This handles templates like\n+\t       template<class T, T t> void f();\n+\t     when T is substituted with any class.  The second template\n+\t     parameter becomes invalid and the template candidate is\n+\t     rejected.  */\n+\t  return error_mark_node;\n \n \t/* For a non-type template-parameter of type pointer to member\n \t   function, no conversions apply.  If the template-argument"}]}