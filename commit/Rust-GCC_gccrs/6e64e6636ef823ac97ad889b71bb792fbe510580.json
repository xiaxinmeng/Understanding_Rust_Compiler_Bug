{"sha": "6e64e6636ef823ac97ad889b71bb792fbe510580", "node_id": "C_kwDOANBUbNoAKDZlNjRlNjYzNmVmODIzYWM5N2FkODg5YjcxYmI3OTJmYmU1MTA1ODA", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-11T10:39:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-11T10:39:24Z"}, "message": "Merge #1008 #1009\n\n1008: Add const_ptr lang item mappings r=philberty a=philberty\n\nIn order to support slices, we need to be able to parse and contain\r\nmappings for the const_ptr lang item. We do not need to do any\r\nspecial handling of this lang item yet but this adds the mappings\r\nso when we hit it we do not output an unknown lang item error.\r\n\r\nAddresses #849 \n\n1009: Add missing type resolution to slices and arrays r=philberty a=philberty\n\nThis adds in the missing type resolution for slices and generic slices\r\nand arrays. Since Arrays and Slices are both covariant types just like\r\nreferences and pointers for example they need to handle recursive\r\nsubstitutions where their element type might be a generic type\r\nthat can bind substitution parameters such as functions and ADT's.\r\n\r\nAddresses #849 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "db037a7c8b9ae6870c6b7582bdddf022615d1921", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db037a7c8b9ae6870c6b7582bdddf022615d1921"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e64e6636ef823ac97ad889b71bb792fbe510580", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiKybcCRBK7hj4Ov3rIwAA2McIAJpcomNNGjVJ7ct69iQrmMte\nFow0O7deBeiv8t+sSepTjTFY2OuMBhKhnglvqWsg43dWDKL5f+7Wi8c4shm3RKgb\n/efBUNJ20NJapRUXL0lulNZyPzV53f2t3zwwN99VdTdW0ZwSTQILx1GwHI2Xkhbh\nkxJu2IiJrTZqVkSewmAOlNZlagNV6/HZ+0Wst8VjicCNT4fD3i3E56nicVlN9zE2\nWR46aC3FB7va4CO9hd4bxg28G5cSgIlUlg0P3BY4sNSOHscHk5LiUB+ieHkjaRJg\nTu/5BfQ4P4+gVVKDloYwwaOekKfowGkIGx/nmkgDlInvIrNDzZrdhkIJjKPv8oo=\n=wg47\n-----END PGP SIGNATURE-----\n", "payload": "tree db037a7c8b9ae6870c6b7582bdddf022615d1921\nparent dbe59a3198495c760c019369c9a272fb63059e51\nparent a1b065050ba0e19f42d11046e70b1edae33f71e8\nparent 894e9d29adadc13e9841f43df32a07939480846d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1646995164 +0000\ncommitter GitHub <noreply@github.com> 1646995164 +0000\n\nMerge #1008 #1009\n\n1008: Add const_ptr lang item mappings r=philberty a=philberty\n\nIn order to support slices, we need to be able to parse and contain\r\nmappings for the const_ptr lang item. We do not need to do any\r\nspecial handling of this lang item yet but this adds the mappings\r\nso when we hit it we do not output an unknown lang item error.\r\n\r\nAddresses #849 \n\n1009: Add missing type resolution to slices and arrays r=philberty a=philberty\n\nThis adds in the missing type resolution for slices and generic slices\r\nand arrays. Since Arrays and Slices are both covariant types just like\r\nreferences and pointers for example they need to handle recursive\r\nsubstitutions where their element type might be a generic type\r\nthat can bind substitution parameters such as functions and ADT's.\r\n\r\nAddresses #849 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e64e6636ef823ac97ad889b71bb792fbe510580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e64e6636ef823ac97ad889b71bb792fbe510580", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e64e6636ef823ac97ad889b71bb792fbe510580/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbe59a3198495c760c019369c9a272fb63059e51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe59a3198495c760c019369c9a272fb63059e51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbe59a3198495c760c019369c9a272fb63059e51"}, {"sha": "a1b065050ba0e19f42d11046e70b1edae33f71e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1b065050ba0e19f42d11046e70b1edae33f71e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1b065050ba0e19f42d11046e70b1edae33f71e8"}, {"sha": "894e9d29adadc13e9841f43df32a07939480846d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894e9d29adadc13e9841f43df32a07939480846d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/894e9d29adadc13e9841f43df32a07939480846d"}], "stats": {"total": 75, "additions": 71, "deletions": 4}, "files": [{"sha": "39bb9d2f8992b33d5d0c4de6ba0804764b4379c8", "filename": "gcc/rust/hir/tree/rust-hir-type.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e64e6636ef823ac97ad889b71bb792fbe510580/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e64e6636ef823ac97ad889b71bb792fbe510580/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h?ref=6e64e6636ef823ac97ad889b71bb792fbe510580", "patch": "@@ -668,6 +668,8 @@ class SliceType : public TypeNoBounds\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRTypeVisitor &vis) override;\n \n+  std::unique_ptr<Type> &get_element_type () { return elem_type; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "6c6546babe6e7c9b8df2da560921bc19432f5027", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e64e6636ef823ac97ad889b71bb792fbe510580/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e64e6636ef823ac97ad889b71bb792fbe510580/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc?ref=6e64e6636ef823ac97ad889b71bb792fbe510580", "patch": "@@ -600,5 +600,15 @@ TypeCheckType::visit (HIR::ArrayType &type)\n \t\t\t\t    TyTy::TyVar (base->get_ref ()));\n }\n \n+void\n+TypeCheckType::visit (HIR::SliceType &type)\n+{\n+  TyTy::BaseType *base\n+    = TypeCheckType::Resolve (type.get_element_type ().get ());\n+  translated\n+    = new TyTy::SliceType (type.get_mappings ().get_hirid (), type.get_locus (),\n+\t\t\t   TyTy::TyVar (base->get_ref ()));\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "e03756237ac53c4e26d9405a4751c66301d992ae", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e64e6636ef823ac97ad889b71bb792fbe510580/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e64e6636ef823ac97ad889b71bb792fbe510580/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=6e64e6636ef823ac97ad889b71bb792fbe510580", "patch": "@@ -120,6 +120,8 @@ class TypeCheckType : public TypeCheckBase\n \n   void visit (HIR::ArrayType &type) override;\n \n+  void visit (HIR::SliceType &type) override;\n+\n   void visit (HIR::ReferenceType &type) override\n   {\n     TyTy::BaseType *base\n@@ -347,8 +349,8 @@ class ResolveWhereClauseItem : public TypeCheckBase\n     binding->inherit_bounds (specified_bounds);\n \n     // When we apply these bounds we must lookup which type this binding\n-    // resolves to, as this is the type which will be used during resolution of\n-    // the block.\n+    // resolves to, as this is the type which will be used during resolution\n+    // of the block.\n     NodeId ast_node_id = binding_type_path->get_mappings ().get_nodeid ();\n \n     // then lookup the reference_node_id"}, {"sha": "5f1781635cce97193dcf98fe2e42e36dce7b8721", "filename": "gcc/rust/typecheck/rust-substitution-mapper.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e64e6636ef823ac97ad889b71bb792fbe510580/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e64e6636ef823ac97ad889b71bb792fbe510580/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h?ref=6e64e6636ef823ac97ad889b71bb792fbe510580", "patch": "@@ -221,11 +221,19 @@ class SubstMapperInternal : public TyTy::TyVisitor\n     resolved = type.handle_substitions (mappings);\n   }\n \n+  void visit (TyTy::ArrayType &type) override\n+  {\n+    resolved = type.handle_substitions (mappings);\n+  }\n+\n+  void visit (TyTy::SliceType &type) override\n+  {\n+    resolved = type.handle_substitions (mappings);\n+  }\n+\n   // nothing to do for these\n   void visit (TyTy::InferType &) override { gcc_unreachable (); }\n   void visit (TyTy::FnPtr &) override { gcc_unreachable (); }\n-  void visit (TyTy::ArrayType &) override { gcc_unreachable (); }\n-  void visit (TyTy::SliceType &) override { gcc_unreachable (); }\n   void visit (TyTy::BoolType &) override { gcc_unreachable (); }\n   void visit (TyTy::IntType &) override { gcc_unreachable (); }\n   void visit (TyTy::UintType &) override { gcc_unreachable (); }"}, {"sha": "8d5cc5e511a216d5d080d709fc41207f992dad7e", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e64e6636ef823ac97ad889b71bb792fbe510580/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e64e6636ef823ac97ad889b71bb792fbe510580/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=6e64e6636ef823ac97ad889b71bb792fbe510580", "patch": "@@ -1508,6 +1508,22 @@ ArrayType::clone () const\n \t\t\telement_type, get_combined_refs ());\n }\n \n+ArrayType *\n+ArrayType::handle_substitions (SubstitutionArgumentMappings mappings)\n+{\n+  auto mappings_table = Analysis::Mappings::get ();\n+\n+  ArrayType *ref = static_cast<ArrayType *> (clone ());\n+  ref->set_ty_ref (mappings_table->get_next_hir_id ());\n+\n+  // might be &T or &ADT so this needs to be recursive\n+  auto base = ref->get_element_type ();\n+  BaseType *concrete = Resolver::SubstMapperInternal::Resolve (base, mappings);\n+  ref->element_type = TyVar (concrete->get_ty_ref ());\n+\n+  return ref;\n+}\n+\n void\n SliceType::accept_vis (TyVisitor &vis)\n {\n@@ -1581,6 +1597,22 @@ SliceType::clone () const\n \t\t\tget_combined_refs ());\n }\n \n+SliceType *\n+SliceType::handle_substitions (SubstitutionArgumentMappings mappings)\n+{\n+  auto mappings_table = Analysis::Mappings::get ();\n+\n+  SliceType *ref = static_cast<SliceType *> (clone ());\n+  ref->set_ty_ref (mappings_table->get_next_hir_id ());\n+\n+  // might be &T or &ADT so this needs to be recursive\n+  auto base = ref->get_element_type ();\n+  BaseType *concrete = Resolver::SubstMapperInternal::Resolve (base, mappings);\n+  ref->element_type = TyVar (concrete->get_ty_ref ());\n+\n+  return ref;\n+}\n+\n void\n BoolType::accept_vis (TyVisitor &vis)\n {"}, {"sha": "82262abab0926de36dbc1abee1abf08b64df6cbb", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e64e6636ef823ac97ad889b71bb792fbe510580/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e64e6636ef823ac97ad889b71bb792fbe510580/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=6e64e6636ef823ac97ad889b71bb792fbe510580", "patch": "@@ -1665,6 +1665,8 @@ class ArrayType : public BaseType\n \n   HIR::Expr &get_capacity_expr () const { return capacity_expr; }\n \n+  ArrayType *handle_substitions (SubstitutionArgumentMappings mappings);\n+\n private:\n   TyVar element_type;\n   HIR::Expr &capacity_expr;\n@@ -1710,6 +1712,8 @@ class SliceType : public BaseType\n     return get_element_type ()->is_concrete ();\n   }\n \n+  SliceType *handle_substitions (SubstitutionArgumentMappings mappings);\n+\n private:\n   TyVar element_type;\n };"}, {"sha": "d2765bf201ea064f68d390dc95c37a002fac9617", "filename": "gcc/rust/util/rust-lang-item.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e64e6636ef823ac97ad889b71bb792fbe510580/gcc%2Frust%2Futil%2Frust-lang-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e64e6636ef823ac97ad889b71bb792fbe510580/gcc%2Frust%2Futil%2Frust-lang-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-lang-item.h?ref=6e64e6636ef823ac97ad889b71bb792fbe510580", "patch": "@@ -68,6 +68,9 @@ class RustLangItem\n     RANGE_INCLUSIVE,\n     RANGE_TO_INCLUSIVE,\n \n+    // https://github.com/rust-lang/rust/blob/master/library/core/src/ptr/const_ptr.rs\n+    CONST_PTR,\n+\n     UNKNOWN,\n   };\n \n@@ -201,6 +204,10 @@ class RustLangItem\n       {\n \treturn ItemType::RANGE_TO_INCLUSIVE;\n       }\n+    else if (item.compare (\"const_ptr\") == 0)\n+      {\n+\treturn ItemType::CONST_PTR;\n+      }\n \n     return ItemType::UNKNOWN;\n   }\n@@ -273,6 +280,8 @@ class RustLangItem\n \treturn \"RangeInclusive\";\n       case RANGE_TO_INCLUSIVE:\n \treturn \"RangeToInclusive\";\n+      case CONST_PTR:\n+\treturn \"const_ptr\";\n \n       case UNKNOWN:\n \treturn \"<UNKNOWN>\";"}]}