{"sha": "d8279b12d83ba68920170178d186b8feaf43945f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgyNzliMTJkODNiYTY4OTIwMTcwMTc4ZDE4NmI4ZmVhZjQzOTQ1Zg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-04-17T13:33:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-04-17T13:33:41Z"}, "message": "tree-flow.h (array_at_struct_end_p): Move declaration ...\n\n2012-04-17  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-flow.h (array_at_struct_end_p): Move declaration ...\n\t* tree.h (array_at_struct_end_p): ... here.\n\t* tree-ssa-loop-niter.c (array_at_struct_end_p): Move ...\n\t* expr.c (array_at_struct_end_p): ... here.  Rewrite.\n\nFrom-SVN: r186527", "tree": {"sha": "6270e0e0ea62af5d1c4e2f324991ab27ce6e48b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6270e0e0ea62af5d1c4e2f324991ab27ce6e48b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8279b12d83ba68920170178d186b8feaf43945f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8279b12d83ba68920170178d186b8feaf43945f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8279b12d83ba68920170178d186b8feaf43945f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8279b12d83ba68920170178d186b8feaf43945f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5c20c556bdb6bac0df8df2218ab5d4920b07137", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c20c556bdb6bac0df8df2218ab5d4920b07137", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5c20c556bdb6bac0df8df2218ab5d4920b07137"}], "stats": {"total": 88, "additions": 46, "deletions": 42}, "files": [{"sha": "6ee7c12440aec0680e21df779f52671c08e134a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8279b12d83ba68920170178d186b8feaf43945f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8279b12d83ba68920170178d186b8feaf43945f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8279b12d83ba68920170178d186b8feaf43945f", "patch": "@@ -1,3 +1,10 @@\n+2012-04-17  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-flow.h (array_at_struct_end_p): Move declaration ...\n+\t* tree.h (array_at_struct_end_p): ... here.\n+\t* tree-ssa-loop-niter.c (array_at_struct_end_p): Move ...\n+\t* expr.c (array_at_struct_end_p): ... here.  Rewrite.\n+\n 2012-04-17  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* stmt.c (cost_table_, use_cost_table, cost_table_initialize,"}, {"sha": "479dacf7f7a23467eaf15f51cba7a2e98e8b0aa2", "filename": "gcc/expr.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8279b12d83ba68920170178d186b8feaf43945f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8279b12d83ba68920170178d186b8feaf43945f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d8279b12d83ba68920170178d186b8feaf43945f", "patch": "@@ -6778,6 +6778,43 @@ array_ref_low_bound (tree exp)\n   return build_int_cst (TREE_TYPE (TREE_OPERAND (exp, 1)), 0);\n }\n \n+/* Returns true if REF is an array reference to an array at the end of\n+   a structure.  If this is the case, the array may be allocated larger\n+   than its upper bound implies.  */\n+\n+bool\n+array_at_struct_end_p (tree ref)\n+{\n+  if (TREE_CODE (ref) != ARRAY_REF\n+      && TREE_CODE (ref) != ARRAY_RANGE_REF)\n+    return false;\n+\n+  while (handled_component_p (ref))\n+    {\n+      /* If the reference chain contains a component reference to a\n+         non-union type and there follows another field the reference\n+\t is not at the end of a structure.  */\n+      if (TREE_CODE (ref) == COMPONENT_REF\n+\t  && TREE_CODE (TREE_TYPE (TREE_OPERAND (ref, 0))) == RECORD_TYPE)\n+\t{\n+\t  tree nextf = DECL_CHAIN (TREE_OPERAND (ref, 1));\n+\t  while (nextf && TREE_CODE (nextf) != FIELD_DECL)\n+\t    nextf = DECL_CHAIN (nextf);\n+\t  if (nextf)\n+\t    return false;\n+\t}\n+\n+      ref = TREE_OPERAND (ref, 0);\n+    }\n+\n+  /* If the reference is based on a declared entity, the size of the array\n+     is constrained by its given domain.  */\n+  if (DECL_P (ref))\n+    return false;\n+\n+  return true;\n+}\n+\n /* Return a tree representing the upper bound of the array mentioned in\n    EXP, an ARRAY_REF or an ARRAY_RANGE_REF.  */\n "}, {"sha": "241ee0545f501c90bde5cfe4ef9196c4370650c9", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8279b12d83ba68920170178d186b8feaf43945f/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8279b12d83ba68920170178d186b8feaf43945f/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=d8279b12d83ba68920170178d186b8feaf43945f", "patch": "@@ -686,7 +686,6 @@ tree find_loop_niter (struct loop *, edge *);\n tree loop_niter_by_eval (struct loop *, edge);\n tree find_loop_niter_by_eval (struct loop *, edge *);\n void estimate_numbers_of_iterations (bool);\n-bool array_at_struct_end_p (tree);\n bool scev_probably_wraps_p (tree, tree, gimple, struct loop *, bool);\n bool convert_affine_scev (struct loop *, tree, tree *, tree *, gimple, bool);\n "}, {"sha": "82251219665f19ecfa3d020be602a738db4dc39b", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8279b12d83ba68920170178d186b8feaf43945f/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8279b12d83ba68920170178d186b8feaf43945f/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=d8279b12d83ba68920170178d186b8feaf43945f", "patch": "@@ -2640,47 +2640,6 @@ record_nonwrapping_iv (struct loop *loop, tree base, tree step, gimple stmt,\n   record_estimate (loop, niter_bound, max, stmt, false, realistic, upper);\n }\n \n-/* Returns true if REF is a reference to an array at the end of a dynamically\n-   allocated structure.  If this is the case, the array may be allocated larger\n-   than its upper bound implies.  */\n-\n-bool\n-array_at_struct_end_p (tree ref)\n-{\n-  tree base = get_base_address (ref);\n-  tree parent, field;\n-\n-  /* Unless the reference is through a pointer, the size of the array matches\n-     its declaration.  */\n-  if (!base || (!INDIRECT_REF_P (base) && TREE_CODE (base) != MEM_REF))\n-    return false;\n-\n-  for (;handled_component_p (ref); ref = parent)\n-    {\n-      parent = TREE_OPERAND (ref, 0);\n-\n-      if (TREE_CODE (ref) == COMPONENT_REF)\n-\t{\n-\t  /* All fields of a union are at its end.  */\n-\t  if (TREE_CODE (TREE_TYPE (parent)) == UNION_TYPE)\n-\t    continue;\n-\n-\t  /* Unless the field is at the end of the struct, we are done.  */\n-\t  field = TREE_OPERAND (ref, 1);\n-\t  if (DECL_CHAIN (field))\n-\t    return false;\n-\t}\n-\n-      /* The other options are ARRAY_REF, ARRAY_RANGE_REF, VIEW_CONVERT_EXPR.\n-\t In all these cases, we might be accessing the last element, and\n-\t although in practice this will probably never happen, it is legal for\n-\t the indices of this last element to exceed the bounds of the array.\n-\t Therefore, continue checking.  */\n-    }\n-\n-  return true;\n-}\n-\n /* Determine information about number of iterations a LOOP from the index\n    IDX of a data reference accessed in STMT.  RELIABLE is true if STMT is\n    guaranteed to be executed in every iteration of LOOP.  Callback for"}, {"sha": "6bfc29eb15eb7d3ba71d1e702a92bfa7148c2df0", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8279b12d83ba68920170178d186b8feaf43945f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8279b12d83ba68920170178d186b8feaf43945f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d8279b12d83ba68920170178d186b8feaf43945f", "patch": "@@ -5068,6 +5068,8 @@ extern bool contains_packed_reference (const_tree exp);\n \n extern tree array_ref_element_size (tree);\n \n+bool array_at_struct_end_p (tree);\n+\n /* Return a tree representing the lower bound of the array mentioned in\n    EXP, an ARRAY_REF or an ARRAY_RANGE_REF.  */\n "}]}