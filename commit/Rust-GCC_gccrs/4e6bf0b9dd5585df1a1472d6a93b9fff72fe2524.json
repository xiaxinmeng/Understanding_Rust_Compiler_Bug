{"sha": "4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524", "node_id": "C_kwDOANBUbNoAKDRlNmJmMGI5ZGQ1NTg1ZGYxYTE0NzJkNmE5M2I5ZmZmNzJmZTI1MjQ", "commit": {"author": {"name": "Martin Uecker", "email": "uecker@gcc.gnu.org", "date": "2021-11-17T13:20:59Z"}, "committer": {"name": "Martin Uecker", "email": "muecker@gwdg.de", "date": "2021-11-17T13:29:50Z"}, "message": "Fix ICE when mixing VLAs and statement expressions [PR91038]\n\nWhen returning VM-types from statement expressions, this can\nlead to an ICE when declarations from the statement expression\nare referred to later. Most of these issues can be addressed by\ngimplifying the base expression earlier in gimplify_compound_lval.\nAnother issue is fixed by wrapping the pointer expression in\npointer_int_sum. This fixes PR91038 and some of the test cases\nfrom PR29970 (structs with VLA members need further work).\n\ngcc/\n\tPR c/91038\n\tPR c/29970\n\t* gimplify.c (gimplify_var_or_parm_decl): Update comment.\n\t(gimplify_compound_lval): Gimplify base expression first.\n\t(gimplify_target_expr): Add comment.\n\ngcc/c-family/\n\tPR c/91038\n\tPR c/29970\n\t* c-common.c (pointer_int_sum): Make sure pointer expressions\n\tare evaluated first when the size expression depends on for\n\tvariably-modified types.\n\ngcc/testsuite/\n\tPR c/91038\n\tPR c/29970\n\t* gcc.dg/vla-stexp-3.c: New test.\n\t* gcc.dg/vla-stexp-4.c: New test.\n\t* gcc.dg/vla-stexp-5.c: New test.\n\t* gcc.dg/vla-stexp-6.c: New test.\n\t* gcc.dg/vla-stexp-7.c: New test.\n\t* gcc.dg/vla-stexp-8.c: New test.\n\t* gcc.dg/vla-stexp-9.c: New test.", "tree": {"sha": "dfc6be0b46a1b565c69dd1ddfd094b834465e9f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfc6be0b46a1b565c69dd1ddfd094b834465e9f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524/comments", "author": null, "committer": {"login": "uecker", "id": 2036635, "node_id": "MDQ6VXNlcjIwMzY2MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/2036635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uecker", "html_url": "https://github.com/uecker", "followers_url": "https://api.github.com/users/uecker/followers", "following_url": "https://api.github.com/users/uecker/following{/other_user}", "gists_url": "https://api.github.com/users/uecker/gists{/gist_id}", "starred_url": "https://api.github.com/users/uecker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uecker/subscriptions", "organizations_url": "https://api.github.com/users/uecker/orgs", "repos_url": "https://api.github.com/users/uecker/repos", "events_url": "https://api.github.com/users/uecker/events{/privacy}", "received_events_url": "https://api.github.com/users/uecker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "077425c890927eefacb765ab5236060de9859e82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/077425c890927eefacb765ab5236060de9859e82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/077425c890927eefacb765ab5236060de9859e82"}], "stats": {"total": 466, "additions": 422, "deletions": 44}, "files": [{"sha": "ca7d69c4f7634616d07b1af8ea04691497b8d54b", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524", "patch": "@@ -3306,7 +3306,19 @@ pointer_int_sum (location_t loc, enum tree_code resultcode,\n \t\t\t\t TREE_TYPE (result_type)))\n     size_exp = integer_one_node;\n   else\n-    size_exp = size_in_bytes_loc (loc, TREE_TYPE (result_type));\n+    {\n+      size_exp = size_in_bytes_loc (loc, TREE_TYPE (result_type));\n+      /* Wrap the pointer expression in a SAVE_EXPR to make sure it\n+\t is evaluated first when the size expression may depend\n+\t on it for VM types.  */\n+      if (TREE_SIDE_EFFECTS (size_exp)\n+\t  && TREE_SIDE_EFFECTS (ptrop)\n+\t  && variably_modified_type_p (TREE_TYPE (ptrop), NULL))\n+\t{\n+\t  ptrop = save_expr (ptrop);\n+\t  size_exp = build2 (COMPOUND_EXPR, TREE_TYPE (intop), ptrop, size_exp);\n+\t}\n+    }\n \n   /* We are manipulating pointer values, so we don't need to warn\n      about relying on undefined signed overflow.  We disable the"}, {"sha": "467b1357e85ff961745c9b628c636b503b7ed953", "filename": "gcc/gimplify.c", "status": "modified", "additions": 36, "deletions": 43, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524", "patch": "@@ -2964,7 +2964,9 @@ gimplify_var_or_parm_decl (tree *expr_p)\n      declaration, for which we've already issued an error.  It would\n      be really nice if the front end wouldn't leak these at all.\n      Currently the only known culprit is C++ destructors, as seen\n-     in g++.old-deja/g++.jason/binding.C.  */\n+     in g++.old-deja/g++.jason/binding.C.\n+     Another possible culpit are size expressions for variably modified\n+     types which are lost in the FE or not gimplified correctly.  */\n   if (VAR_P (decl)\n       && !DECL_SEEN_IN_BIND_EXPR_P (decl)\n       && !TREE_STATIC (decl) && !DECL_EXTERNAL (decl)\n@@ -3109,16 +3111,22 @@ gimplify_compound_lval (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n      expression until we deal with any variable bounds, sizes, or\n      positions in order to deal with PLACEHOLDER_EXPRs.\n \n-     So we do this in three steps.  First we deal with the annotations\n-     for any variables in the components, then we gimplify the base,\n-     then we gimplify any indices, from left to right.  */\n+     The base expression may contain a statement expression that\n+     has declarations used in size expressions, so has to be\n+     gimplified before gimplifying the size expressions.\n+\n+     So we do this in three steps.  First we deal with variable\n+     bounds, sizes, and positions, then we gimplify the base,\n+     then we deal with the annotations for any variables in the\n+     components and any indices, from left to right.  */\n+\n   for (i = expr_stack.length () - 1; i >= 0; i--)\n     {\n       tree t = expr_stack[i];\n \n       if (TREE_CODE (t) == ARRAY_REF || TREE_CODE (t) == ARRAY_RANGE_REF)\n \t{\n-\t  /* Gimplify the low bound and element type size and put them into\n+\t  /* Deal with the low bound and element type size and put them into\n \t     the ARRAY_REF.  If these values are set, they have already been\n \t     gimplified.  */\n \t  if (TREE_OPERAND (t, 2) == NULL_TREE)\n@@ -3127,18 +3135,8 @@ gimplify_compound_lval (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t      if (!is_gimple_min_invariant (low))\n \t\t{\n \t\t  TREE_OPERAND (t, 2) = low;\n-\t\t  tret = gimplify_expr (&TREE_OPERAND (t, 2), pre_p,\n-\t\t\t\t\tpost_p, is_gimple_reg,\n-\t\t\t\t\tfb_rvalue);\n-\t\t  ret = MIN (ret, tret);\n \t\t}\n \t    }\n-\t  else\n-\t    {\n-\t      tret = gimplify_expr (&TREE_OPERAND (t, 2), pre_p, post_p,\n-\t\t\t\t    is_gimple_reg, fb_rvalue);\n-\t      ret = MIN (ret, tret);\n-\t    }\n \n \t  if (TREE_OPERAND (t, 3) == NULL_TREE)\n \t    {\n@@ -3155,18 +3153,8 @@ gimplify_compound_lval (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\t\t\t\t      elmt_size, factor);\n \n \t\t  TREE_OPERAND (t, 3) = elmt_size;\n-\t\t  tret = gimplify_expr (&TREE_OPERAND (t, 3), pre_p,\n-\t\t\t\t\tpost_p, is_gimple_reg,\n-\t\t\t\t\tfb_rvalue);\n-\t\t  ret = MIN (ret, tret);\n \t\t}\n \t    }\n-\t  else\n-\t    {\n-\t      tret = gimplify_expr (&TREE_OPERAND (t, 3), pre_p, post_p,\n-\t\t\t\t    is_gimple_reg, fb_rvalue);\n-\t      ret = MIN (ret, tret);\n-\t    }\n \t}\n       else if (TREE_CODE (t) == COMPONENT_REF)\n \t{\n@@ -3186,18 +3174,8 @@ gimplify_compound_lval (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\t\t\t\t   offset, factor);\n \n \t\t  TREE_OPERAND (t, 2) = offset;\n-\t\t  tret = gimplify_expr (&TREE_OPERAND (t, 2), pre_p,\n-\t\t\t\t\tpost_p, is_gimple_reg,\n-\t\t\t\t\tfb_rvalue);\n-\t\t  ret = MIN (ret, tret);\n \t\t}\n \t    }\n-\t  else\n-\t    {\n-\t      tret = gimplify_expr (&TREE_OPERAND (t, 2), pre_p, post_p,\n-\t\t\t\t    is_gimple_reg, fb_rvalue);\n-\t      ret = MIN (ret, tret);\n-\t    }\n \t}\n     }\n \n@@ -3208,21 +3186,34 @@ gimplify_compound_lval (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\t\tfallback | fb_lvalue);\n   ret = MIN (ret, tret);\n \n-  /* And finally, the indices and operands of ARRAY_REF.  During this\n-     loop we also remove any useless conversions.  */\n+  /* Step 3: gimplify size expressions and the indices and operands of\n+     ARRAY_REF.  During this loop we also remove any useless conversions.  */\n+\n   for (; expr_stack.length () > 0; )\n     {\n       tree t = expr_stack.pop ();\n \n       if (TREE_CODE (t) == ARRAY_REF || TREE_CODE (t) == ARRAY_RANGE_REF)\n \t{\n+\t  /* Gimplify the low bound and element type size. */\n+\t  tret = gimplify_expr (&TREE_OPERAND (t, 2), pre_p, post_p,\n+\t\t\t\tis_gimple_reg, fb_rvalue);\n+\t  ret = MIN (ret, tret);\n+\n+\t  tret = gimplify_expr (&TREE_OPERAND (t, 3), pre_p, post_p,\n+\t\t\t\tis_gimple_reg, fb_rvalue);\n+\t  ret = MIN (ret, tret);\n+\n \t  /* Gimplify the dimension.  */\n-\t  if (!is_gimple_min_invariant (TREE_OPERAND (t, 1)))\n-\t    {\n-\t      tret = gimplify_expr (&TREE_OPERAND (t, 1), pre_p, post_p,\n-\t\t\t\t    is_gimple_val, fb_rvalue);\n-\t      ret = MIN (ret, tret);\n-\t    }\n+\t  tret = gimplify_expr (&TREE_OPERAND (t, 1), pre_p, post_p,\n+\t\t\t\tis_gimple_val, fb_rvalue);\n+\t  ret = MIN (ret, tret);\n+\t}\n+      else if (TREE_CODE (t) == COMPONENT_REF)\n+\t{\n+\t  tret = gimplify_expr (&TREE_OPERAND (t, 2), pre_p, post_p,\n+\t\t\t\tis_gimple_reg, fb_rvalue);\n+\t  ret = MIN (ret, tret);\n \t}\n \n       STRIP_USELESS_TYPE_CONVERSION (TREE_OPERAND (t, 0));\n@@ -6927,6 +6918,8 @@ gimplify_target_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t{\n \t  if (!TYPE_SIZES_GIMPLIFIED (TREE_TYPE (temp)))\n \t    gimplify_type_sizes (TREE_TYPE (temp), pre_p);\n+\t  /* FIXME: this is correct only when the size of the type does\n+\t     not depend on expressions evaluated in init.  */\n \t  gimplify_vla_decl (temp, pre_p);\n \t}\n       else"}, {"sha": "e663de1cd722b3a450bbe570907c071dc0bd5e77", "filename": "gcc/testsuite/gcc.dg/vla-stexp-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-3.c?ref=4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524", "patch": "@@ -0,0 +1,11 @@\n+/* PR91038 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+\n+void bar(void)\n+{\n+\t({ int N = 2; int (*x)[9][N] = 0; x; })[1];\n+\t({ int N = 2; int (*x)[9][N] = 0; x; })[0];\t// should not ice\n+}\n+"}, {"sha": "612b5a802fc54c2a74b15e20c379007e06c3e927", "filename": "gcc/testsuite/gcc.dg/vla-stexp-4.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-4.c?ref=4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524", "patch": "@@ -0,0 +1,94 @@\n+/* PR29970, PR91038 */\n+/* { dg-do run } */\n+/* { dg-options \"-O0 -Wunused-variable\" } */\n+\n+int foo3b(void)   // should not return 0\n+{\n+        int n = 0;\n+        return sizeof *({ n = 10; int x[n]; &x; });\n+}\n+\n+int foo4(void)   // should not ICE\n+{\n+        return (*({\n+                        int n = 20;\n+                        char (*x)[n][n] = __builtin_malloc(n * n);\n+                        (*x)[12][1] = 1;\n+                        x;\n+                }))[12][1];\n+}\n+\n+int foo5(void)   // should return 1, returns 0\n+{\n+        int n = 0;\n+        return (*({\n+                        n = 20;\n+                        char (*x)[n][n] = __builtin_malloc(n * n);\n+                        (*x)[12][1] = 1;\n+                        (*x)[0][1] = 0;\n+                        x;\n+                }))[12][1];\n+}\n+\n+int foo5c(void)   // should return 400 \n+{\n+        int n = 0;\n+        return sizeof(*({\n+                        n = 20;\n+                        char (*x)[n][n] = __builtin_malloc(n * n);\n+                        (*x)[12][1] = 1;\n+                        (*x)[0][1] = 0;\n+                        x;\n+                }));\n+}\n+\n+int foo5b(void)   // should return 1, returns 0\n+{\n+\tint n = 0;\t\t\t/* { dg-warning \"unused variable\" } */\n+        return (*({\n+                        int n = 20;\n+                        char (*x)[n][n] = __builtin_malloc(n * n);\n+                        (*x)[12][1] = 1;\n+                        (*x)[0][1] = 0;\n+                        x;\n+                }))[12][1];\n+}\n+\n+int foo5a(void)   // should return 1, returns 0\n+{\n+        return (*({\n+                        int n = 20;\n+                        char (*x)[n][n] = __builtin_malloc(n * n);\n+                        (*x)[12][1] = 1;\n+                        (*x)[0][1] = 0;\n+                        x;\n+                }))[12][1];\n+}\n+\n+\n+\n+\n+int main()\n+{\n+\tif (sizeof(int[10]) != foo3b())\n+\t\t__builtin_abort();\n+\n+\tif (1 != foo4())\n+\t\t__builtin_abort();\n+\n+\tif (400 != foo5c())\n+\t\t__builtin_abort();\n+\n+\tif (1 != foo5a())\n+\t\t__builtin_abort();\n+\n+\tif (1 != foo5b()) // -O0\n+\t\t__builtin_abort();\n+\n+\tif (1 != foo5())\n+\t\t__builtin_abort();\n+\n+\treturn 0;\n+}\n+\n+"}, {"sha": "d6a7f2b34b82a6220f41a9b132792e2773f7235b", "filename": "gcc/testsuite/gcc.dg/vla-stexp-5.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-5.c?ref=4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524", "patch": "@@ -0,0 +1,30 @@\n+/* PR29970 */\n+/* { dg-do run } */\n+/* { dg-options \"-Wunused-variable\" } */\n+\n+\n+\n+\n+int foo2a(void)   // should not ICE\n+{\n+        return ({ int n = 20; struct { int x[n];} x; x.x[12] = 1; sizeof(x); });\n+}\n+\n+\n+int foo2b(void)   // should not ICE\n+{\n+        return sizeof *({ int n = 20; struct { int x[n];} x; x.x[12] = 1; &x; });\n+}\n+\n+int main()\n+{\n+\tif (sizeof(struct { int x[20]; }) != foo2a())\n+\t\t__builtin_abort();\n+\n+\tif (sizeof(struct { int x[20]; }) != foo2b())\n+\t\t__builtin_abort();\n+\n+\treturn 0;\n+}\n+\n+"}, {"sha": "3d96d38898bbd5b6ae0c4c2186e9867abd20e4bc", "filename": "gcc/testsuite/gcc.dg/vla-stexp-6.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-6.c?ref=4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524", "patch": "@@ -0,0 +1,94 @@\n+/* PR29970, PR91038 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -Wunused-variable\" } */\n+\n+int foo3b(void)   // should not return 0\n+{\n+        int n = 0;\n+        return sizeof *({ n = 10; int x[n]; &x; });\n+}\n+\n+int foo4(void)   // should not ICE\n+{\n+        return (*({\n+                        int n = 20;\n+                        char (*x)[n][n] = __builtin_malloc(n * n);\n+                        (*x)[12][1] = 1;\n+                        x;\n+                }))[12][1];\n+}\n+\n+int foo5(void)   // should return 1, returns 0\n+{\n+        int n = 0;\n+        return (*({\n+                        n = 20;\n+                        char (*x)[n][n] = __builtin_malloc(n * n);\n+                        (*x)[12][1] = 1;\n+                        (*x)[0][1] = 0;\n+                        x;\n+                }))[12][1];\n+}\n+\n+int foo5c(void)   // should return 400 \n+{\n+        int n = 0;\n+        return sizeof(*({\n+                        n = 20;\n+                        char (*x)[n][n] = __builtin_malloc(n * n);\n+                        (*x)[12][1] = 1;\n+                        (*x)[0][1] = 0;\n+                        x;\n+                }));\n+}\n+\n+int foo5b(void)   // should return 1, returns 0\n+{\n+\tint n = 0;\t/* { dg-warning \"unused variable\" } */\n+        return (*({\n+                        int n = 20;\n+                        char (*x)[n][n] = __builtin_malloc(n * n);\n+                        (*x)[12][1] = 1;\n+                        (*x)[0][1] = 0;\n+                        x;\n+                }))[12][1];\n+}\n+\n+int foo5a(void)   // should return 1, returns 0\n+{\n+        return (*({\n+                        int n = 20;\n+                        char (*x)[n][n] = __builtin_malloc(n * n);\n+                        (*x)[12][1] = 1;\n+                        (*x)[0][1] = 0;\n+                        x;\n+                }))[12][1];\n+}\n+\n+\n+\n+\n+int main()\n+{\n+\tif (sizeof(int[10]) != foo3b())\n+\t\t__builtin_abort();\n+\n+\tif (1 != foo4())\n+\t\t__builtin_abort();\n+\n+\tif (400 != foo5c())\n+\t\t__builtin_abort();\n+\n+\tif (1 != foo5a())\n+\t\t__builtin_abort();\n+\n+\tif (1 != foo5b()) // -O0\n+\t\t__builtin_abort();\n+\n+\tif (1 != foo5())\n+\t\t__builtin_abort();\n+\n+\treturn 0;\n+}\n+\n+"}, {"sha": "3091b9184c21fc757302cec531462ab15bb6441f", "filename": "gcc/testsuite/gcc.dg/vla-stexp-7.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-7.c?ref=4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524", "patch": "@@ -0,0 +1,44 @@\n+/* PR91038 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -Wunused-variable\" } */\n+\n+\n+#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))\n+\n+struct lbm {\n+\n+\tint D;\n+\tconst int* DQ;\n+\n+} D2Q9 = { 2,\n+\t(const int*)&(const int[9][2]){\n+\t\t{ 0, 0 },\n+\t\t{ 1, 0 }, { 0, 1 }, { -1, 0 }, { 0, -1 },\n+\t\t{ 1, 1 }, { -1, 1 }, { -1, -1 }, { 1, -1 },\n+\t}\n+};\n+\n+void zouhe_left(void)\n+{\n+\t__auto_type xx = (*({ int N = 2; struct lbm __x = D2Q9; ((const int(*)[9][N])__x.DQ); }));\n+\n+\tif (1 != xx[1][0])\n+\t\t__builtin_abort();\n+\n+\tif (2 != ARRAY_SIZE(xx[1]))\n+\t\t__builtin_abort();\n+\n+\tif (1 != (*({ int N = 2; struct lbm __x = D2Q9; ((const int(*)[9][N])__x.DQ); }))[1][0])\n+\t\t__builtin_abort();\n+\n+\tif (2 != ARRAY_SIZE(*({ int N = 2; struct lbm __x = D2Q9; ((const int(*)[9][N])__x.DQ); })[1]))\n+\t\t__builtin_abort();\n+}\n+\n+int main()\n+{\n+\tzouhe_left();\n+\treturn 0;\n+}\n+\n+"}, {"sha": "5b475eb6cf2061ba2edbe7f2e51995c444f84267", "filename": "gcc/testsuite/gcc.dg/vla-stexp-8.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-8.c?ref=4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524", "patch": "@@ -0,0 +1,47 @@\n+/* PR29970, PR91038 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wunused-variable\" } */\n+\n+\n+int foo0(void)\n+{\n+\tint c = *(*(*({ int n = 10; int (*x)[n][n] = __builtin_malloc(sizeof *x); x; }) + 5) + 5);\n+\treturn c;\n+}\n+\n+int foo1(void)\n+{\n+\tint c = *(5 + *(5 + *({ int n = 10; int (*x)[n][n] = __builtin_malloc(sizeof *x); x; })));\n+\treturn c;\n+}\n+\n+int bar2(void)\n+{\n+\tint c = (*({ int n = 10; struct { int y[n]; int z; }* x = __builtin_malloc(sizeof *x); x; })).z;\n+\treturn c;\n+}\n+\n+int bar3(void)\n+{\n+\tint n = 2;\t/* { dg-warning \"unused variable\" } */\n+\tint c = (*({ int n = 3; \t/* { dg-warning \"unused variable\" } */\n+\t\t({ int n = 10; int (*x)[n][n] = __builtin_malloc(sizeof *x); x; }); }))[5][5];\n+\treturn c;\n+}\n+\n+int bar3b(void)\n+{\n+\tint n = 2;\t/* { dg-warning \"unused variable\" } */\n+\tint c = (*({ int n = 3; \t/* { dg-warning \"unused variable\" } */\n+\t\t({ int n = 10; int (*x)[n][n] = __builtin_malloc(sizeof *x); x; }); }))[0][0];\n+\treturn c;\n+}\n+\n+int bar4(void)\n+{\n+\tint n = 2;\t/* { dg-warning \"unused variable\" } */\n+\tint c = *(5 + *( 5 + *({ int n = 3;\t/* { dg-warning \"unused variable\" } */\n+\t\t({ int n = 10; int (*x)[n][n] = __builtin_malloc(sizeof *x); x; }); })));\n+\treturn c;\n+}\n+"}, {"sha": "3593a790785bbfefc44145a44448601b9f898c98", "filename": "gcc/testsuite/gcc.dg/vla-stexp-9.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-stexp-9.c?ref=4e6bf0b9dd5585df1a1472d6a93b9fff72fe2524", "patch": "@@ -0,0 +1,53 @@\n+/* PR91038 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -Wunused-variable\" } */\n+\n+\n+\n+void foo(void)\n+{\n+\tif (2 * sizeof(int) != sizeof((*({ int N = 2; int (*x)[9][N] = 0; x; })[1])))\n+\t\t__builtin_abort();\n+}\n+\n+void bar(void)\n+{\n+\tif (2 * sizeof(int) != sizeof((*({ int N = 2; int (*x)[9][N] = 0; x; })[0])))\n+\t\t__builtin_abort();\n+}\n+\n+void bar0(void)\n+{\n+\tif (2 * 9 *  sizeof(int) != sizeof((*({ int N = 2; int (*x)[9][N] = 0; x; }))))\n+\t\t__builtin_abort();\n+}\n+\n+void bar11(void)\n+{\n+\tsizeof(*((*({ int N = 2; int (*x)[9][N] = 0; x; }) + 0)));\n+}\n+\n+void bar12(void)\n+{\n+\tif (2 * sizeof(int) != sizeof(*((*({ int N = 2; int (*x)[9][N] = 0; x; })    ))))\n+\t\t__builtin_abort();\n+}\n+\n+void bar1(void)\n+{\n+\tif (2 * sizeof(int) != sizeof(*((*({ int N = 2; int (*x)[9][N] = 0; x; }) + 0))))\n+\t\t__builtin_abort();\n+}\n+\n+\n+\n+\n+int main()\n+{\n+\tfoo();\n+\tbar0();\n+\tbar12();\n+\tbar1();\n+\tbar();\n+}\n+"}]}