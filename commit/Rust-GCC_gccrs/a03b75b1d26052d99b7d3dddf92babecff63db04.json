{"sha": "a03b75b1d26052d99b7d3dddf92babecff63db04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAzYjc1YjFkMjYwNTJkOTliN2QzZGRkZjkyYmFiZWNmZjYzZGIwNA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-08-15T22:55:47Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-08-15T22:55:47Z"}, "message": "invoke.texi (SH options): Document missing processor variant options.\n\ngcc/\n\t* doc/invoke.texi (SH options): Document missing processor variant\n\toptions.  Remove references to Hitachi.  Undocument deprecated mspace\n\toption.\n\nFrom-SVN: r214050", "tree": {"sha": "f461cfd0b2066deea4292a289f1ff1c36b84bae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f461cfd0b2066deea4292a289f1ff1c36b84bae4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a03b75b1d26052d99b7d3dddf92babecff63db04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a03b75b1d26052d99b7d3dddf92babecff63db04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a03b75b1d26052d99b7d3dddf92babecff63db04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a03b75b1d26052d99b7d3dddf92babecff63db04/comments", "author": null, "committer": null, "parents": [{"sha": "2b14490e737ecc16e2411d466afd21ac95b3bc05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b14490e737ecc16e2411d466afd21ac95b3bc05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b14490e737ecc16e2411d466afd21ac95b3bc05"}], "stats": {"total": 113, "additions": 102, "deletions": 11}, "files": [{"sha": "0e6a9294f50d1829fe2871cac57520738ac180a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a03b75b1d26052d99b7d3dddf92babecff63db04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a03b75b1d26052d99b7d3dddf92babecff63db04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a03b75b1d26052d99b7d3dddf92babecff63db04", "patch": "@@ -1,3 +1,9 @@\n+2014-08-15  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* doc/invoke.texi (SH options): Document missing processor variant\n+\toptions.  Remove references to Hitachi.  Undocument deprecated mspace\n+\toption.\n+\n 2014-08-15  Jason Merrill  <jason@redhat.com>\n \n \t* tree.c (type_hash_canon): Uncomment assert."}, {"sha": "637426141ab95bc6575e747f4fcd7c7b92b87b3f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 96, "deletions": 11, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a03b75b1d26052d99b7d3dddf92babecff63db04/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a03b75b1d26052d99b7d3dddf92babecff63db04/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a03b75b1d26052d99b7d3dddf92babecff63db04", "patch": "@@ -20704,6 +20704,72 @@ single-precision mode by default.\n @opindex m4\n Generate code for the SH4.\n \n+@item -m4-100\n+@opindex m4-100\n+Generate code for SH4-100.\n+\n+@item -m4-100-nofpu\n+@opindex m4-100-nofpu\n+Generate code for SH4-100 in such a way that the\n+floating-point unit is not used.\n+\n+@item -m4-100-single\n+@opindex m4-100-single\n+Generate code for SH4-100 assuming the floating-point unit is in\n+single-precision mode by default.\n+\n+@item -m4-100-single-only\n+@opindex m4-100-single-only\n+Generate code for SH4-100 in such a way that no double-precision\n+floating-point operations are used.\n+\n+@item -m4-200\n+@opindex m4-200\n+Generate code for SH4-200.\n+\n+@item -m4-200-nofpu\n+@opindex m4-200-nofpu\n+Generate code for SH4-200 without in such a way that the\n+floating-point unit is not used.\n+\n+@item -m4-200-single\n+@opindex m4-200-single\n+Generate code for SH4-200 assuming the floating-point unit is in\n+single-precision mode by default.\n+\n+@item -m4-200-single-only\n+@opindex m4-200-single-only\n+Generate code for SH4-200 in such a way that no double-precision\n+floating-point operations are used.\n+\n+@item -m4-300\n+@opindex m4-300\n+Generate code for SH4-300.\n+\n+@item -m4-300-nofpu\n+@opindex m4-300-nofpu\n+Generate code for SH4-300 without in such a way that the\n+floating-point unit is not used.\n+\n+@item -m4-300-single\n+@opindex m4-300-single\n+Generate code for SH4-300 in such a way that no double-precision\n+floating-point operations are used.\n+\n+@item -m4-300-single-only\n+@opindex m4-300-single-only\n+Generate code for SH4-300 in such a way that no double-precision\n+floating-point operations are used.\n+\n+@item -m4-340\n+@opindex m4-340\n+Generate code for SH4-340 (no MMU, no FPU).\n+\n+@item -m4-500\n+@opindex m4-500\n+Generate code for SH4-500 (no FPU).  Passes @option{-isa=sh4-nofpu} to the\n+assembler.\n+\n @item -m4a-nofpu\n @opindex m4a-nofpu\n Generate code for the SH4al-dsp, or for a SH4a in such a way that the\n@@ -20729,6 +20795,33 @@ Same as @option{-m4a-nofpu}, except that it implicitly passes\n @option{-dsp} to the assembler.  GCC doesn't generate any DSP\n instructions at the moment.\n \n+@item -m5-32media\n+@opindex m5-32media\n+Generate 32-bit code for SHmedia.\n+\n+@item -m5-32media-nofpu\n+@opindex m5-32media-nofpu\n+Generate 32-bit code for SHmedia in such a way that the\n+floating-point unit is not used.\n+\n+@item -m5-64media\n+@opindex m5-64media\n+Generate 64-bit code for SHmedia.\n+\n+@item -m5-64media-nofpu\n+@opindex m5-64media-nofpu\n+Generate 64-bit code for SHmedia in such a way that the\n+floating-point unit is not used.\n+\n+@item -m5-compact\n+@opindex m5-compact\n+Generate code for SHcompact.\n+\n+@item -m5-compact-nofpu\n+@opindex m5-compact-nofpu\n+Generate code for SHcompact in such a way that the\n+floating-point unit is not used.\n+\n @item -mb\n @opindex mb\n Compile code for the processor in big-endian mode.\n@@ -20762,24 +20855,20 @@ Enable the use of bit manipulation instructions on SH2A.\n Enable the use of the instruction @code{fmovd}.  Check @option{-mdalign} for\n alignment constraints.\n \n-@item -mhitachi\n-@opindex mhitachi\n-Comply with the calling conventions defined by Renesas.\n-\n @item -mrenesas\n-@opindex mhitachi\n+@opindex mrenesas\n Comply with the calling conventions defined by Renesas.\n \n @item -mno-renesas\n-@opindex mhitachi\n+@opindex mno-renesas\n Comply with the calling conventions defined for GCC before the Renesas\n conventions were available.  This option is the default for all\n targets of the SH toolchain.\n \n @item -mnomacsave\n @opindex mnomacsave\n Mark the @code{MAC} register as call-clobbered, even if\n-@option{-mhitachi} is given.\n+@option{-mrenesas} is given.\n \n @item -mieee\n @itemx -mno-ieee\n@@ -20885,10 +20974,6 @@ that are implied by the @code{tas.b} instruction.  On multi-core SH4A\n processors the @code{tas.b} instruction must be used with caution since it\n can result in data corruption for certain cache configurations.\n \n-@item -mspace\n-@opindex mspace\n-Optimize for space instead of speed.  Implied by @option{-Os}.\n-\n @item -mprefergot\n @opindex mprefergot\n When generating position-independent code, emit function calls using"}]}