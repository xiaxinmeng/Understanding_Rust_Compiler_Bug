{"sha": "95f2389a7d909045ccbe7475945f823eabf91a03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVmMjM4OWE3ZDkwOTA0NWNjYmU3NDc1OTQ1ZjgyM2VhYmY5MWEwMw==", "commit": {"author": {"name": "Walter Lee", "email": "walt@tilera.com", "date": "2012-03-07T17:58:52Z"}, "committer": {"name": "Walter Lee", "email": "walt@gcc.gnu.org", "date": "2012-03-07T17:58:52Z"}, "message": "Fix an unwinding bug for functions with dynamic stack frames.\n\n\t* config/tilegx/tilegx.c (tilegx_expand_prologue): Don't generate\n\tREG_CFA_* notes for the stack pointer.\n\t(tilegx_expand_epilogue): Restore stack pointer by adjusting it by\n\tEH_RETURN_STACKADJ_RTX.\n\t* config/tilepro/tilepro.c (tilepro_expand_prologue): Don't\n\tgenerate REG_CFA_* notes for the stack pointer.\n\t(tilepro_expand_epilogue): Restore stack pointer by adjusting it\n\tby EH_RETURN_STACKADJ_RTX.\n\nFrom-SVN: r185070", "tree": {"sha": "1f246a231a409cfe684156447a6b6c50bd088cf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f246a231a409cfe684156447a6b6c50bd088cf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95f2389a7d909045ccbe7475945f823eabf91a03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95f2389a7d909045ccbe7475945f823eabf91a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95f2389a7d909045ccbe7475945f823eabf91a03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95f2389a7d909045ccbe7475945f823eabf91a03/comments", "author": {"login": "walt-tilera", "id": 6602917, "node_id": "MDQ6VXNlcjY2MDI5MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6602917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/walt-tilera", "html_url": "https://github.com/walt-tilera", "followers_url": "https://api.github.com/users/walt-tilera/followers", "following_url": "https://api.github.com/users/walt-tilera/following{/other_user}", "gists_url": "https://api.github.com/users/walt-tilera/gists{/gist_id}", "starred_url": "https://api.github.com/users/walt-tilera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/walt-tilera/subscriptions", "organizations_url": "https://api.github.com/users/walt-tilera/orgs", "repos_url": "https://api.github.com/users/walt-tilera/repos", "events_url": "https://api.github.com/users/walt-tilera/events{/privacy}", "received_events_url": "https://api.github.com/users/walt-tilera/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5869104b39a940b7845b3546c510cad63cd791a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5869104b39a940b7845b3546c510cad63cd791a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5869104b39a940b7845b3546c510cad63cd791a2"}], "stats": {"total": 65, "additions": 35, "deletions": 30}, "files": [{"sha": "055832b510311cd2bd9370b0a145f5aa01c174e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f2389a7d909045ccbe7475945f823eabf91a03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f2389a7d909045ccbe7475945f823eabf91a03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95f2389a7d909045ccbe7475945f823eabf91a03", "patch": "@@ -1,3 +1,14 @@\n+2012-03-07  Walter Lee  <walt@tilera.com>\n+\n+\t* config/tilegx/tilegx.c (tilegx_expand_prologue): Don't generate\n+\tREG_CFA_* notes for the stack pointer.\n+\t(tilegx_expand_epilogue): Restore stack pointer by adjusting it by\n+\tEH_RETURN_STACKADJ_RTX.\n+\t* config/tilepro/tilepro.c (tilepro_expand_prologue): Don't\n+\tgenerate REG_CFA_* notes for the stack pointer.\n+\t(tilepro_expand_epilogue): Restore stack pointer by adjusting it\n+\tby EH_RETURN_STACKADJ_RTX.\n+\n 2012-03-07  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* doc/invoke.texi (AVR Built-in Macros): Correct condition for"}, {"sha": "217682eaa66140bffbbdc0dde150a570f979777e", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f2389a7d909045ccbe7475945f823eabf91a03/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f2389a7d909045ccbe7475945f823eabf91a03/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=95f2389a7d909045ccbe7475945f823eabf91a03", "patch": "@@ -3881,9 +3881,8 @@ tilegx_expand_prologue (void)\n     {\n       /* Copy the old stack pointer aside so we can save it later.  */\n       sp_copy_regno = next_scratch_regno--;\n-      insn = FRP (emit_move_insn (gen_rtx_REG (Pmode, sp_copy_regno),\n-\t\t\t\t  stack_pointer_rtx));\n-      add_reg_note (insn, REG_CFA_REGISTER, NULL_RTX);\n+      emit_move_insn (gen_rtx_REG (Pmode, sp_copy_regno),\n+\t\t      stack_pointer_rtx);\n     }\n \n   if (tilegx_current_function_is_leaf ())\n@@ -3925,8 +3924,8 @@ tilegx_expand_prologue (void)\n \t}\n \n       /* Save our frame pointer for backtrace chaining.  */\n-      FRP (frame_emit_store (sp_copy_regno, STACK_POINTER_REGNUM,\n-\t\t\t     chain_addr, cfa, cfa_offset));\n+      emit_insn (gen_movdi (gen_frame_mem (DImode, chain_addr),\n+\t\t\t    gen_rtx_REG (DImode, sp_copy_regno)));\n     }\n \n   /* Compute where to start storing registers we need to save.  */\n@@ -4067,16 +4066,7 @@ tilegx_expand_epilogue (bool sibcall_p)\n \n   emit_insn (gen_blockage ());\n \n-  if (crtl->calls_eh_return)\n-    {\n-      rtx r = compute_frame_addr (-total_size + UNITS_PER_WORD,\n-\t\t\t\t  &next_scratch_regno);\n-      insn = emit_move_insn (gen_lowpart (DImode, stack_pointer_rtx),\n-\t\t\t     gen_frame_mem (DImode, r));\n-      RTX_FRAME_RELATED_P (insn) = 1;\n-      REG_NOTES (insn) = cfa_restores;\n-    }\n-  else if (frame_pointer_needed)\n+  if (frame_pointer_needed)\n     {\n       /* Restore the old stack pointer by copying from the frame\n          pointer.  */\n@@ -4100,6 +4090,16 @@ tilegx_expand_epilogue (bool sibcall_p)\n \t\t\t     cfa_restores);\n     }\n \n+  if (crtl->calls_eh_return)\n+    {\n+      if (TARGET_32BIT)\n+\temit_insn (gen_sp_adjust_32bit (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t\t\tEH_RETURN_STACKADJ_RTX));\n+      else\n+\temit_insn (gen_sp_adjust (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t\t  EH_RETURN_STACKADJ_RTX));\n+    }\n+\n   /* Restore the old frame pointer.  */\n   if (frame_pointer_needed)\n     {"}, {"sha": "011ac083addc115e0f15555e90dfb99b9c72da58", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f2389a7d909045ccbe7475945f823eabf91a03/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f2389a7d909045ccbe7475945f823eabf91a03/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=95f2389a7d909045ccbe7475945f823eabf91a03", "patch": "@@ -3556,9 +3556,8 @@ tilepro_expand_prologue (void)\n     {\n       /* Copy the old stack pointer aside so we can save it later.  */\n       sp_copy_regno = next_scratch_regno--;\n-      insn = FRP (emit_move_insn (gen_rtx_REG (Pmode, sp_copy_regno),\n-\t\t\t\t  stack_pointer_rtx));\n-      add_reg_note (insn, REG_CFA_REGISTER, NULL_RTX);\n+      emit_move_insn (gen_rtx_REG (Pmode, sp_copy_regno),\n+\t\t      stack_pointer_rtx);\n     }\n \n   if (tilepro_current_function_is_leaf ())\n@@ -3600,8 +3599,8 @@ tilepro_expand_prologue (void)\n \t}\n \n       /* Save our frame pointer for backtrace chaining.  */\n-      FRP (frame_emit_store (sp_copy_regno, STACK_POINTER_REGNUM,\n-\t\t\t     chain_addr, cfa, cfa_offset));\n+      emit_insn (gen_movsi (gen_frame_mem (SImode, chain_addr),\n+\t\t\t    gen_rtx_REG (SImode, sp_copy_regno)));\n     }\n \n   /* Compute where to start storing registers we need to save.  */\n@@ -3742,16 +3741,7 @@ tilepro_expand_epilogue (bool sibcall_p)\n \n   emit_insn (gen_blockage ());\n \n-  if (crtl->calls_eh_return)\n-    {\n-      rtx r = compute_frame_addr (-total_size + UNITS_PER_WORD,\n-\t\t\t\t  &next_scratch_regno);\n-      insn = emit_move_insn (gen_rtx_REG (Pmode, STACK_POINTER_REGNUM),\n-\t\t\t     gen_frame_mem (Pmode, r));\n-      RTX_FRAME_RELATED_P (insn) = 1;\n-      REG_NOTES (insn) = cfa_restores;\n-    }\n-  else if (frame_pointer_needed)\n+  if (frame_pointer_needed)\n     {\n       /* Restore the old stack pointer by copying from the frame\n          pointer.  */\n@@ -3767,6 +3757,10 @@ tilepro_expand_epilogue (bool sibcall_p)\n \t\t\t     cfa_restores);\n     }\n \n+  if (crtl->calls_eh_return)\n+    emit_insn (gen_sp_adjust (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t      EH_RETURN_STACKADJ_RTX));\n+\n   /* Restore the old frame pointer.  */\n   if (frame_pointer_needed)\n     {"}]}