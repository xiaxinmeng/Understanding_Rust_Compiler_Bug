{"sha": "a39ed81b8a0b46320a7c6ece3f7ad4c3f8519609", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM5ZWQ4MWI4YTBiNDYzMjBhN2M2ZWNlM2Y3YWQ0YzNmODUxOTYwOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-23T07:59:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-23T07:59:57Z"}, "message": "rs6000: Fix C++14 vs. C++17 ABI bug on powerpc64le [PR94707]\n\nAs mentioned in the PR and on IRC, the recently added struct-layout-1.exp\nnew tests FAIL on powerpc64le-linux (among other targets).\nFAIL: tmpdir-g++.dg-struct-layout-1/t032 cp_compat_x_tst.o-cp_compat_y_tst.o execute\nFAIL: tmpdir-g++.dg-struct-layout-1/t058 cp_compat_x_tst.o-cp_compat_y_tst.o execute\nFAIL: tmpdir-g++.dg-struct-layout-1/t059 cp_compat_x_tst.o-cp_compat_y_tst.o execute\nin particular.  The problem is that the presence or absence of the C++17\nartificial empty base fields, which have non-zero TYPE_SIZE, but zero\nDECL_SIZE, change the ABI decisions, if it is present (-std=c++17), the type\nmight not be considered homogeneous, while if it is absent (-std=c++14), it\ncan be.\n\nThe following patch fixes that and emits a -Wpsabi inform; perhaps more\noften than it could, because the fact that rs6000_discover_homogeneous_aggregate\nreturns true when it didn't in in GCC 7/8/9 with -std=c++17 doesn't still\nmean it will make a different ABI decision, but the warning triggered only\non the test I've changed (the struct-layout-1.exp tests use -w -Wno-psabi\nalready).\n\n2020-04-23  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/94707\n\t* config/rs6000/rs6000-call.c (rs6000_aggregate_candidate): Add\n\tcxx17_empty_base_seen argument.  Pass it to recursive calls.\n\tIgnore cxx17_empty_base_field_p fields after setting\n\t*cxx17_empty_base_seen to true.\n\t(rs6000_discover_homogeneous_aggregate): Adjust\n\trs6000_aggregate_candidate caller.  With -Wpsabi, diagnose homogeneous\n\taggregates with C++17 empty base fields.\n\n\t* g++.dg/tree-ssa/pr27830.C: Use -Wpsabi -w for -std=c++17 and higher.", "tree": {"sha": "aba814967463c0754dc4a2574277ff2ea015ab61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aba814967463c0754dc4a2574277ff2ea015ab61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a39ed81b8a0b46320a7c6ece3f7ad4c3f8519609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a39ed81b8a0b46320a7c6ece3f7ad4c3f8519609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a39ed81b8a0b46320a7c6ece3f7ad4c3f8519609", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a39ed81b8a0b46320a7c6ece3f7ad4c3f8519609/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2a71816b4949225498bec37e947293aa7f5841b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a71816b4949225498bec37e947293aa7f5841b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2a71816b4949225498bec37e947293aa7f5841b"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "93c3076eb86e3d3f0fa81cdc3c18eec4b96b1d08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39ed81b8a0b46320a7c6ece3f7ad4c3f8519609/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39ed81b8a0b46320a7c6ece3f7ad4c3f8519609/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a39ed81b8a0b46320a7c6ece3f7ad4c3f8519609", "patch": "@@ -1,5 +1,18 @@\n 2020-04-23  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/94707\n+\t* config/rs6000/rs6000-call.c (rs6000_aggregate_candidate): Add\n+\tcxx17_empty_base_seen argument.  Pass it to recursive calls.\n+\tIgnore cxx17_empty_base_field_p fields after setting\n+\t*cxx17_empty_base_seen to true.\n+\t(rs6000_discover_homogeneous_aggregate): Adjust\n+\trs6000_aggregate_candidate caller.  With -Wpsabi, diagnose homogeneous\n+\taggregates with C++17 empty base fields.\n+\n+\tPR c/94705\n+\t* attribs.c (decl_attribute): Don't diagnose attribute exclusions\n+\tif last_decl is error_mark_node or has such a TREE_TYPE.\n+\n \tPR c/94705\n \t* attribs.c (decl_attribute): Don't diagnose attribute exclusions\n \tif last_decl is error_mark_node or has such a TREE_TYPE."}, {"sha": "a9ae7ab70ca3235651aaeaf8631f2ebdf832b490", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39ed81b8a0b46320a7c6ece3f7ad4c3f8519609/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39ed81b8a0b46320a7c6ece3f7ad4c3f8519609/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=a39ed81b8a0b46320a7c6ece3f7ad4c3f8519609", "patch": "@@ -5528,7 +5528,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n    sub-tree.  */\n \n static int\n-rs6000_aggregate_candidate (const_tree type, machine_mode *modep)\n+rs6000_aggregate_candidate (const_tree type, machine_mode *modep,\n+\t\t\t    bool *cxx17_empty_base_seen)\n {\n   machine_mode mode;\n   HOST_WIDE_INT size;\n@@ -5598,7 +5599,8 @@ rs6000_aggregate_candidate (const_tree type, machine_mode *modep)\n \t    || TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n \t  return -1;\n \n-\tcount = rs6000_aggregate_candidate (TREE_TYPE (type), modep);\n+\tcount = rs6000_aggregate_candidate (TREE_TYPE (type), modep,\n+\t\t\t\t\t    cxx17_empty_base_seen);\n \tif (count == -1\n \t    || !index\n \t    || !TYPE_MAX_VALUE (index)\n@@ -5636,7 +5638,14 @@ rs6000_aggregate_candidate (const_tree type, machine_mode *modep)\n \t    if (TREE_CODE (field) != FIELD_DECL)\n \t      continue;\n \n-\t    sub_count = rs6000_aggregate_candidate (TREE_TYPE (field), modep);\n+\t    if (cxx17_empty_base_field_p (field))\n+\t      {\n+\t\t*cxx17_empty_base_seen = true;\n+\t\tcontinue;\n+\t      }\n+\n+\t    sub_count = rs6000_aggregate_candidate (TREE_TYPE (field), modep,\n+\t\t\t\t\t\t    cxx17_empty_base_seen);\n \t    if (sub_count < 0)\n \t      return -1;\n \t    count += sub_count;\n@@ -5669,7 +5678,8 @@ rs6000_aggregate_candidate (const_tree type, machine_mode *modep)\n \t    if (TREE_CODE (field) != FIELD_DECL)\n \t      continue;\n \n-\t    sub_count = rs6000_aggregate_candidate (TREE_TYPE (field), modep);\n+\t    sub_count = rs6000_aggregate_candidate (TREE_TYPE (field), modep,\n+\t\t\t\t\t\t    cxx17_empty_base_seen);\n \t    if (sub_count < 0)\n \t      return -1;\n \t    count = count > sub_count ? count : sub_count;\n@@ -5710,7 +5720,9 @@ rs6000_discover_homogeneous_aggregate (machine_mode mode, const_tree type,\n       && AGGREGATE_TYPE_P (type))\n     {\n       machine_mode field_mode = VOIDmode;\n-      int field_count = rs6000_aggregate_candidate (type, &field_mode);\n+      bool cxx17_empty_base_seen = false;\n+      int field_count = rs6000_aggregate_candidate (type, &field_mode,\n+\t\t\t\t\t\t    &cxx17_empty_base_seen);\n \n       if (field_count > 0)\n \t{\n@@ -5725,6 +5737,18 @@ rs6000_discover_homogeneous_aggregate (machine_mode mode, const_tree type,\n \t\t*elt_mode = field_mode;\n \t      if (n_elts)\n \t\t*n_elts = field_count;\n+\t      if (cxx17_empty_base_seen && warn_psabi)\n+\t\t{\n+\t\t  static const_tree last_reported_type;\n+\t\t  if (type != last_reported_type)\n+\t\t    {\n+\t\t      inform (input_location,\n+\t\t\t      \"parameter passing for argument of type %qT \"\n+\t\t\t      \"when C++17 is enabled changed to match C++14 \"\n+\t\t\t      \"in GCC 10.1\", type);\n+\t\t      last_reported_type = type;\n+\t\t    }\n+\t\t}\n \t      return true;\n \t    }\n \t}"}, {"sha": "245c1512c76f260d380dec7f4f1a548f9269a216", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39ed81b8a0b46320a7c6ece3f7ad4c3f8519609/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39ed81b8a0b46320a7c6ece3f7ad4c3f8519609/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a39ed81b8a0b46320a7c6ece3f7ad4c3f8519609", "patch": "@@ -1,5 +1,8 @@\n 2020-04-23  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/94707\n+\t* g++.dg/tree-ssa/pr27830.C: Use -Wpsabi -w for -std=c++17 and higher.\n+\n \tPR c/94705\n \t* gcc.dg/pr94705.c: New test.\n "}, {"sha": "551ebc428cd71c01ad4caaec4b15fa66273d7708", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr27830.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39ed81b8a0b46320a7c6ece3f7ad4c3f8519609/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr27830.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39ed81b8a0b46320a7c6ece3f7ad4c3f8519609/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr27830.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr27830.C?ref=a39ed81b8a0b46320a7c6ece3f7ad4c3f8519609", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O\" } */\n+/* Ignore ABI warnings for C++17 and later.  */\n+/* { dg-additional-options \"-Wno-psabi -w\" { target c++17 } } */\n \n struct gc{};\n struct transform:public gc"}]}