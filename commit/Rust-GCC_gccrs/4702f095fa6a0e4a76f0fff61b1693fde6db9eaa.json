{"sha": "4702f095fa6a0e4a76f0fff61b1693fde6db9eaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcwMmYwOTVmYTZhMGU0YTc2ZjBmZmY2MWIxNjkzZmRlNmRiOWVhYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-05-23T00:05:24Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-05-23T00:05:24Z"}, "message": "[multiple changes]\n\n2011-05-22  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* testsuite/20_util/bind/cv_quals_2.cc: New.\n\n2011-05-22  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/49058\n\t* include/std/functional (_Bind<_Functor(_Bound_args...)>::\n\toperator()(_Args&&...)): Don't cv qualify _Functor directly\n\tin the default template argument, SFINAE doesn't apply when\n\tthe functor has no arguments.\n\t* testsuite/20_util/bind/49058_1.cc: New.\n\t* testsuite/20_util/bind/49058_2.cc: Likewise.\n\nFrom-SVN: r174048", "tree": {"sha": "1d62082ba3adf689c24eec5ec21b2555eb5f0c96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d62082ba3adf689c24eec5ec21b2555eb5f0c96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4702f095fa6a0e4a76f0fff61b1693fde6db9eaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4702f095fa6a0e4a76f0fff61b1693fde6db9eaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4702f095fa6a0e4a76f0fff61b1693fde6db9eaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4702f095fa6a0e4a76f0fff61b1693fde6db9eaa/comments", "author": null, "committer": null, "parents": [{"sha": "29cedf8ef3b3fd547d778738157a6bdbc3a7b78a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29cedf8ef3b3fd547d778738157a6bdbc3a7b78a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29cedf8ef3b3fd547d778738157a6bdbc3a7b78a"}], "stats": {"total": 134, "additions": 131, "deletions": 3}, "files": [{"sha": "f922fc59cf7dc596c58edf84908c465ec84e6718", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4702f095fa6a0e4a76f0fff61b1693fde6db9eaa/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4702f095fa6a0e4a76f0fff61b1693fde6db9eaa/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4702f095fa6a0e4a76f0fff61b1693fde6db9eaa", "patch": "@@ -1,3 +1,17 @@\n+2011-05-22  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* testsuite/20_util/bind/cv_quals_2.cc: New.\n+\n+2011-05-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/49058\n+\t* include/std/functional (_Bind<_Functor(_Bound_args...)>::\n+\toperator()(_Args&&...)): Don't cv qualify _Functor directly\n+\tin the default template argument, SFINAE doesn't apply when\n+\tthe functor has no arguments.\n+\t* testsuite/20_util/bind/49058_1.cc: New.\n+\t* testsuite/20_util/bind/49058_2.cc: Likewise.\n+\n 2011-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/unique_ptr.h: Use noexcept per the FDIS."}, {"sha": "0126510ce24f4b6533e76c6cd84cea90397813f6", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4702f095fa6a0e4a76f0fff61b1693fde6db9eaa/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4702f095fa6a0e4a76f0fff61b1693fde6db9eaa/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=4702f095fa6a0e4a76f0fff61b1693fde6db9eaa", "patch": "@@ -1210,7 +1210,8 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n \n       // Call as const\n       template<typename... _Args, typename _Result\n-\t= decltype( std::declval<const _Functor>()(\n+\t= decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),\n+\t\t       typename add_const<_Functor>::type>::type>()(\n \t      _Mu<_Bound_args>()( std::declval<const _Bound_args&>(),\n \t\t\t\t  std::declval<tuple<_Args...>&>() )... ) )>\n \t_Result\n@@ -1223,7 +1224,8 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n \n       // Call as volatile\n       template<typename... _Args, typename _Result\n-\t= decltype( std::declval<volatile _Functor>()(\n+\t= decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),\n+                       typename add_volatile<_Functor>::type>::type>()(\n \t      _Mu<_Bound_args>()( std::declval<volatile _Bound_args&>(),\n \t\t\t\t  std::declval<tuple<_Args...>&>() )... ) )>\n \t_Result\n@@ -1236,7 +1238,8 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n \n       // Call as const volatile\n       template<typename... _Args, typename _Result\n-\t= decltype( std::declval<const volatile _Functor>()(\n+\t= decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),\n+                       typename add_cv<_Functor>::type>::type>()(\n \t      _Mu<_Bound_args>()( std::declval<const volatile _Bound_args&>(),\n \t\t\t\t  std::declval<tuple<_Args...>&>() )... ) )>\n \t_Result"}, {"sha": "fb34e087885957e721a4234880df1ca4ba322557", "filename": "libstdc++-v3/testsuite/20_util/bind/49058_1.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4702f095fa6a0e4a76f0fff61b1693fde6db9eaa/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2F49058_1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4702f095fa6a0e4a76f0fff61b1693fde6db9eaa/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2F49058_1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2F49058_1.cc?ref=4702f095fa6a0e4a76f0fff61b1693fde6db9eaa", "patch": "@@ -0,0 +1,34 @@\n+// { dg-options \"-pedantic -std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <functional>\n+\n+// PR libstdc++/49058\n+\n+struct F\n+{\n+  void\n+  operator()();\n+};\n+\n+void f()\n+{\n+  std::bind( F() );\n+}"}, {"sha": "fc9d9a254fd69738d188c9fa486dad4fa9835d64", "filename": "libstdc++-v3/testsuite/20_util/bind/49058_2.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4702f095fa6a0e4a76f0fff61b1693fde6db9eaa/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2F49058_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4702f095fa6a0e4a76f0fff61b1693fde6db9eaa/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2F49058_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2F49058_2.cc?ref=4702f095fa6a0e4a76f0fff61b1693fde6db9eaa", "patch": "@@ -0,0 +1,28 @@\n+// { dg-options \"-pedantic -std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <functional>\n+\n+// PR libstdc++/49058\n+\n+void f()\n+{\n+  std::bind( []{} );\n+}"}, {"sha": "067d862b47f4e753cb706e5f6d4c783ac1aafd88", "filename": "libstdc++-v3/testsuite/20_util/bind/cv_quals_2.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4702f095fa6a0e4a76f0fff61b1693fde6db9eaa/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fcv_quals_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4702f095fa6a0e4a76f0fff61b1693fde6db9eaa/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fcv_quals_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fcv_quals_2.cc?ref=4702f095fa6a0e4a76f0fff61b1693fde6db9eaa", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+struct X\n+{\n+  int operator()() const { return 0; }\n+  int operator()() volatile { return 1; }\n+  int operator()() const volatile { return 2; }\n+  void operator()() { };\n+};\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const auto b0 = std::bind(X());\n+  VERIFY( b0() == 0 );\n+\n+  volatile auto b1 = std::bind(X());\n+  VERIFY( b1() == 1 );\n+\n+  const volatile auto b2 = std::bind(X());\n+  VERIFY( b2() == 2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}