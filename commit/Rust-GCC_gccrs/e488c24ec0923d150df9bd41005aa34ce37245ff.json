{"sha": "e488c24ec0923d150df9bd41005aa34ce37245ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ4OGMyNGVjMDkyM2QxNTBkZjliZDQxMDA1YWEzNGNlMzcyNDVmZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-04-07T14:35:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-04-07T14:35:18Z"}, "message": "re PR debug/65678 (internal compiler error: in gen_rtx_SUBREG, at emit-rtl.c:909)\n\n\tPR debug/65678\n\t* valtrack.c (debug_lowpart_subreg): New function.\n\t(dead_debug_insert_temp): Use it.\n\n\t* g++.dg/debug/pr65678.C: New test.\n\nFrom-SVN: r221900", "tree": {"sha": "c20ea6a4b859dab7e1af67d49463182dcfc7732d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c20ea6a4b859dab7e1af67d49463182dcfc7732d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e488c24ec0923d150df9bd41005aa34ce37245ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e488c24ec0923d150df9bd41005aa34ce37245ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e488c24ec0923d150df9bd41005aa34ce37245ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e488c24ec0923d150df9bd41005aa34ce37245ff/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dcc72b9e73852d9e3b5f40c6dc51da12c444d699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcc72b9e73852d9e3b5f40c6dc51da12c444d699", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcc72b9e73852d9e3b5f40c6dc51da12c444d699"}], "stats": {"total": 73, "additions": 66, "deletions": 7}, "files": [{"sha": "d4bf73ad9a7d6cb2726ab792d699e7fd48e16a12", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e488c24ec0923d150df9bd41005aa34ce37245ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e488c24ec0923d150df9bd41005aa34ce37245ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e488c24ec0923d150df9bd41005aa34ce37245ff", "patch": "@@ -1,5 +1,9 @@\n 2015-04-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/65678\n+\t* valtrack.c (debug_lowpart_subreg): New function.\n+\t(dead_debug_insert_temp): Use it.\n+\n \tPR middle-end/65680\n \t* expr.c (get_inner_reference): Handle bit_offset that doesn't fit\n \tinto signed HOST_WIDE_INT the same as negative bit_offset."}, {"sha": "6d8ce3700e0486bfc2f17adebb7967bfb020d526", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e488c24ec0923d150df9bd41005aa34ce37245ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e488c24ec0923d150df9bd41005aa34ce37245ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e488c24ec0923d150df9bd41005aa34ce37245ff", "patch": "@@ -1,5 +1,8 @@\n 2015-04-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/65678\n+\t* g++.dg/debug/pr65678.C: New test.\n+\n \tPR middle-end/65680\n \t* gcc.c-torture/compile/pr65680.c: New test.\n "}, {"sha": "d99c73bf1bc129adc6998ef62cca5beed33fa7f3", "filename": "gcc/testsuite/g++.dg/debug/pr65678.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e488c24ec0923d150df9bd41005aa34ce37245ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr65678.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e488c24ec0923d150df9bd41005aa34ce37245ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr65678.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr65678.C?ref=e488c24ec0923d150df9bd41005aa34ce37245ff", "patch": "@@ -0,0 +1,35 @@\n+// PR debug/65678\n+// { dg-do compile }\n+\n+long long v;\n+\n+static int\n+bar (double x)\n+{\n+#if __SIZEOF_DOUBLE__ == __SIZEOF_LONG_LONG__\n+  __builtin_memmove (&v, &x, sizeof v);\n+#else\n+  (void) x;\n+  v = 0;\n+#endif\n+  return v;\n+}\n+\n+struct A\n+{\n+  A (double x) : a (bar (x)) {}\n+  int m1 ();\n+  int m2 () { int b = a; return b; }\n+  int a;\n+};\n+\n+void foo ();\n+\n+void\n+baz (double x)\n+{\n+  int c = A (x).m2 ();\n+  int d = A (x).m1 ();\n+  if (d)\n+    foo ();\n+}"}, {"sha": "3dfb8a97aeaa1c3d0051abd56cdb6758aa7556dc", "filename": "gcc/valtrack.c", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e488c24ec0923d150df9bd41005aa34ce37245ff/gcc%2Fvaltrack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e488c24ec0923d150df9bd41005aa34ce37245ff/gcc%2Fvaltrack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvaltrack.c?ref=e488c24ec0923d150df9bd41005aa34ce37245ff", "patch": "@@ -534,6 +534,22 @@ dead_debug_add (struct dead_debug_local *debug, df_ref use, unsigned int uregno)\n   bitmap_set_bit (debug->used, uregno);\n }\n \n+/* Like lowpart_subreg, but if a subreg is not valid for machine, force\n+   it anyway - for use in debug insns.  */\n+\n+static rtx\n+debug_lowpart_subreg (machine_mode outer_mode, rtx expr,\n+\t\t      machine_mode inner_mode)\n+{\n+  if (inner_mode == VOIDmode)\n+    inner_mode = GET_MODE (expr);\n+  int offset = subreg_lowpart_offset (outer_mode, inner_mode);\n+  rtx ret = simplify_gen_subreg (outer_mode, expr, inner_mode, offset);\n+  if (ret)\n+    return ret;\n+  return gen_rtx_raw_SUBREG (outer_mode, expr, offset);\n+}\n+\n /* If UREGNO is referenced by any entry in DEBUG, emit a debug insn\n    before or after INSN (depending on WHERE), that binds a (possibly\n    global) debug temp to the widest-mode use of UREGNO, if WHERE is\n@@ -662,9 +678,9 @@ dead_debug_insert_temp (struct dead_debug_local *debug, unsigned int uregno,\n \t  /* Ok, it's the same (hardware) REG, but with a different\n \t     mode, so SUBREG it.  */\n \t  else\n-\t    breg = lowpart_subreg (GET_MODE (reg),\n-\t\t\t\t   cleanup_auto_inc_dec (src, VOIDmode),\n-\t\t\t\t   GET_MODE (dest));\n+\t    breg = debug_lowpart_subreg (GET_MODE (reg),\n+\t\t\t\t\t cleanup_auto_inc_dec (src, VOIDmode),\n+\t\t\t\t\t GET_MODE (dest));\n \t}\n       else if (GET_CODE (dest) == SUBREG)\n \t{\n@@ -684,9 +700,9 @@ dead_debug_insert_temp (struct dead_debug_local *debug, unsigned int uregno,\n \t    breg = NULL;\n \t  /* Yay, we can use SRC, just adjust its mode.  */\n \t  else\n-\t    breg = lowpart_subreg (GET_MODE (reg),\n-\t\t\t\t   cleanup_auto_inc_dec (src, VOIDmode),\n-\t\t\t\t   GET_MODE (dest));\n+\t    breg = debug_lowpart_subreg (GET_MODE (reg),\n+\t\t\t\t\t cleanup_auto_inc_dec (src, VOIDmode),\n+\t\t\t\t\t GET_MODE (dest));\n \t}\n       /* Oh well, we're out of luck.  */\n       else\n@@ -740,7 +756,8 @@ dead_debug_insert_temp (struct dead_debug_local *debug, unsigned int uregno,\n \t*DF_REF_REAL_LOC (cur->use) = dval;\n       else\n \t*DF_REF_REAL_LOC (cur->use)\n-\t  = gen_lowpart_SUBREG (GET_MODE (*DF_REF_REAL_LOC (cur->use)), dval);\n+\t  = debug_lowpart_subreg (GET_MODE (*DF_REF_REAL_LOC (cur->use)), dval,\n+\t\t\t\t  GET_MODE (dval));\n       /* ??? Should we simplify subreg of subreg?  */\n       bitmap_set_bit (debug->to_rescan, INSN_UID (DF_REF_INSN (cur->use)));\n       uses = cur->next;"}]}