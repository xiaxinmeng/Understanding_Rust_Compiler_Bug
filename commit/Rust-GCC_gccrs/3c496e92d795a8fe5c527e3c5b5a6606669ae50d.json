{"sha": "3c496e92d795a8fe5c527e3c5b5a6606669ae50d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M0OTZlOTJkNzk1YThmZTVjNTI3ZTNjNWI1YTY2MDY2NjlhZTUwZA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-08-24T17:02:18Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-08-24T17:02:18Z"}, "message": "nvptx: Add a __PTX_SM__ predefined macro based on target ISA.\n\nThis patch adds a __PTX_SM__ predefined macro to the nvptx backend that\nallows code to check the compute model being targeted by the compiler.\nThis is equivalent to the __CUDA_ARCH__ macro defined by CUDA's nvcc\ncompiler, but to avoid causing problems for source code that checks\nfor that compiler, this macro uses GCC's nomenclature; it's easy\nenough for users to \"#define __CUDA_ARCH__ __PTX_SM__\".\n\nWhat might have been a four line patch is actually a little more\ncomplicated, as this patch takes the opportunity to upgrade the\nnvptx backend to use the now preferred nvptx-c.c idiom.\n\n2021-08-24  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Tom de Vries  <tdevries@suse.de>\n\ngcc/ChangeLog\n\t* config.gcc (nvptx-*-*): Define {c,c++}_target_objs.\n\t* config/nvptx/nvptx-protos.h (nvptx_cpu_cpp_builtins): Prototype.\n\t* config/nvptx/nvptx.h (TARGET_CPU_CPP_BUILTINS): Implement with\n\ta call to the new nvptx_cpu_cpp_builtins function in nvptx-c.c.\n\t* config/nvptx/t-nvptx (nvptx-c.o): New rule.\n\t* config/nvptx/nvptx-c.c: New source file.\n\t(nvptx_cpu_cpp_builtins): Move implementation here.", "tree": {"sha": "7e8fd24555d97b4e0f13a42aca74f9e5050d57f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e8fd24555d97b4e0f13a42aca74f9e5050d57f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c496e92d795a8fe5c527e3c5b5a6606669ae50d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c496e92d795a8fe5c527e3c5b5a6606669ae50d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c496e92d795a8fe5c527e3c5b5a6606669ae50d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c496e92d795a8fe5c527e3c5b5a6606669ae50d/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "820f0940d7ace1306430a9dcf1bd9577508a7a7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/820f0940d7ace1306430a9dcf1bd9577508a7a7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/820f0940d7ace1306430a9dcf1bd9577508a7a7e"}], "stats": {"total": 66, "additions": 55, "deletions": 11}, "files": [{"sha": "0ff5cac1594dc5c820dc459da0fc5e5a993378ed", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c496e92d795a8fe5c527e3c5b5a6606669ae50d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c496e92d795a8fe5c527e3c5b5a6606669ae50d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=3c496e92d795a8fe5c527e3c5b5a6606669ae50d", "patch": "@@ -468,6 +468,8 @@ nios2-*-*)\n \t;;\n nvptx-*-*)\n \tcpu_type=nvptx\n+\tc_target_objs=\"nvptx-c.o\"\n+\tcxx_target_objs=\"nvptx-c.o\"\n \t;;\n or1k*-*-*)\n \tcpu_type=or1k"}, {"sha": "72594a82e38f59a024837eb84fc7d80db863c48d", "filename": "gcc/config/nvptx/nvptx-c.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c496e92d795a8fe5c527e3c5b5a6606669ae50d/gcc%2Fconfig%2Fnvptx%2Fnvptx-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c496e92d795a8fe5c527e3c5b5a6606669ae50d/gcc%2Fconfig%2Fnvptx%2Fnvptx-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-c.c?ref=3c496e92d795a8fe5c527e3c5b5a6606669ae50d", "patch": "@@ -0,0 +1,47 @@\n+/* Subroutines for the C front end on the NVPTX architecture.\n+ * Copyright (C) 2021 Free Software Foundation, Inc.\n+ *\n+ * This file is part of GCC.\n+ *\n+ * GCC is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published\n+ * by the Free Software Foundation; either version 3, or (at your\n+ * option) any later version.\n+ *\n+ * GCC is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with GCC; see the file COPYING3.  If not see\n+ * <http://www.gnu.org/licenses/>.  */\n+\n+#define IN_TARGET_CODE 1\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"target.h\"\n+#include \"c-family/c-common.h\"\n+#include \"memmodel.h\"\n+#include \"tm_p.h\"\n+#include \"c-family/c-pragma.h\"\n+\n+/* Function to tell the preprocessor about the defines for the target.  */\n+void\n+nvptx_cpu_cpp_builtins (void)\n+{\n+  cpp_assert (parse_in, \"machine=nvptx\");\n+  cpp_assert (parse_in, \"cpu=nvptx\");\n+  cpp_define (parse_in, \"__nvptx__\");\n+  if (TARGET_SOFT_STACK)\n+    cpp_define (parse_in, \"__nvptx_softstack__\");\n+  if (TARGET_UNIFORM_SIMT)\n+    cpp_define (parse_in,\"__nvptx_unisimt__\");\n+  if (TARGET_SM35)\n+    cpp_define (parse_in, \"__PTX_SM__=350\");\n+  else\n+    cpp_define (parse_in,\"__PTX_SM__=300\");\n+}\n+"}, {"sha": "b29ddc9d6b8f876338f7162c21f0b6114c188440", "filename": "gcc/config/nvptx/nvptx-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c496e92d795a8fe5c527e3c5b5a6606669ae50d/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c496e92d795a8fe5c527e3c5b5a6606669ae50d/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h?ref=3c496e92d795a8fe5c527e3c5b5a6606669ae50d", "patch": "@@ -40,6 +40,7 @@ extern void nvptx_output_aligned_decl (FILE *file, const char *name,\n extern void nvptx_function_end (FILE *);\n extern void nvptx_output_skip (FILE *, unsigned HOST_WIDE_INT);\n extern void nvptx_output_ascii (FILE *, const char *, unsigned HOST_WIDE_INT);\n+extern void nvptx_cpu_cpp_builtins (void);\n extern void nvptx_register_pragmas (void);\n extern unsigned int nvptx_data_alignment (const_tree, unsigned int);\n "}, {"sha": "d367174f597afe31b6c6d695b197e313144194bd", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c496e92d795a8fe5c527e3c5b5a6606669ae50d/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c496e92d795a8fe5c527e3c5b5a6606669ae50d/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=3c496e92d795a8fe5c527e3c5b5a6606669ae50d", "patch": "@@ -34,17 +34,7 @@\n    nvptx-as.  */\n #define ASM_SPEC \"%{misa=*:-m %*; :-m sm_35}\"\n \n-#define TARGET_CPU_CPP_BUILTINS()\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      builtin_assert (\"machine=nvptx\");\t\t\\\n-      builtin_assert (\"cpu=nvptx\");\t\t\\\n-      builtin_define (\"__nvptx__\");\t\t\\\n-      if (TARGET_SOFT_STACK)\t\t\t\\\n-        builtin_define (\"__nvptx_softstack__\");\t\\\n-      if (TARGET_UNIFORM_SIMT)\t\t\t\\\n-        builtin_define (\"__nvptx_unisimt__\");\t\\\n-    } while (0)\n+#define TARGET_CPU_CPP_BUILTINS() nvptx_cpu_cpp_builtins ()\n \n /* Avoid the default in ../../gcc.c, which adds \"-pthread\", which is not\n    supported for nvptx.  */"}, {"sha": "d33bacd785d95a4ac5e364992078b051144f4ccd", "filename": "gcc/config/nvptx/t-nvptx", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c496e92d795a8fe5c527e3c5b5a6606669ae50d/gcc%2Fconfig%2Fnvptx%2Ft-nvptx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c496e92d795a8fe5c527e3c5b5a6606669ae50d/gcc%2Fconfig%2Fnvptx%2Ft-nvptx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Ft-nvptx?ref=3c496e92d795a8fe5c527e3c5b5a6606669ae50d", "patch": "@@ -1,3 +1,7 @@\n+nvptx-c.o: $(srcdir)/config/nvptx/nvptx-c.c\n+\t$(COMPILE) $<\n+\t$(POSTCOMPILE)\n+\n CFLAGS-mkoffload.o += $(DRIVER_DEFINES) \\\n \t-DGCC_INSTALL_NAME=\\\"$(GCC_INSTALL_NAME)\\\"\n mkoffload.o: $(srcdir)/config/nvptx/mkoffload.c"}]}