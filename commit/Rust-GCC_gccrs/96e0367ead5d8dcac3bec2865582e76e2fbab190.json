{"sha": "96e0367ead5d8dcac3bec2865582e76e2fbab190", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZlMDM2N2VhZDVkOGRjYWMzYmVjMjg2NTU4MmU3NmUyZmJhYjE5MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-11-17T14:07:58Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-11-17T14:07:58Z"}, "message": "PR libstdc++/83025 fix constraints for path overloads in <fstream>\n\n\tPR libstdc++/83025\n\t* include/std/fstream (basic_filebuf::_If_path): Move to\n\tnamespace-scope and rename to _If_fs_path.\n\t(basic_filebuf::open): Use new name.\n\t(basic_ifstream(_Path, ios::openmode))\n\t(basic_ifstream::open(_Path, ios::openmode))\n\t(basic_ofstream(_Path, ios::openmode))\n\t(basic_ofstream::open(_Path, ios::openmode))\n\t(basic_fstream(_Path, ios::openmode))\n\t(basic_fstream::open(_Path, ios::openmode)): Use _If_fs_path.\n\t* testsuite/27_io/basic_filebuf/open/char/path.cc: Test with filename\n\tas non-const char*.\n\t* testsuite/27_io/basic_fstream/cons/char/path.cc: Likewise.\n\t* testsuite/27_io/basic_fstream/open/char/path.cc: Likewise.\n\t* testsuite/27_io/basic_ifstream/cons/char/path.cc: Likewise.\n\t* testsuite/27_io/basic_ifstream/open/char/path.cc: Likewise.\n\t* testsuite/27_io/basic_ofstream/cons/char/path.cc: Likewise.\n\t* testsuite/27_io/basic_ofstream/open/char/path.cc: Likewise.\n\nFrom-SVN: r254871", "tree": {"sha": "7206a6f455f377e8e51d9d7466c82d36a3e08a50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7206a6f455f377e8e51d9d7466c82d36a3e08a50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96e0367ead5d8dcac3bec2865582e76e2fbab190", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e0367ead5d8dcac3bec2865582e76e2fbab190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96e0367ead5d8dcac3bec2865582e76e2fbab190", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e0367ead5d8dcac3bec2865582e76e2fbab190/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "610f66a3d14e56dee60cd542579ffbf14f803d80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/610f66a3d14e56dee60cd542579ffbf14f803d80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/610f66a3d14e56dee60cd542579ffbf14f803d80"}], "stats": {"total": 117, "additions": 91, "deletions": 26}, "files": [{"sha": "3755ce6c53ab6132c85875933ffb70f22fed46f2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e0367ead5d8dcac3bec2865582e76e2fbab190/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e0367ead5d8dcac3bec2865582e76e2fbab190/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=96e0367ead5d8dcac3bec2865582e76e2fbab190", "patch": "@@ -1,3 +1,25 @@\n+2017-11-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/83025\n+\t* include/std/fstream (basic_filebuf::_If_path): Move to\n+\tnamespace-scope and rename to _If_fs_path.\n+\t(basic_filebuf::open): Use new name.\n+\t(basic_ifstream(_Path, ios::openmode))\n+\t(basic_ifstream::open(_Path, ios::openmode))\n+\t(basic_ofstream(_Path, ios::openmode))\n+\t(basic_ofstream::open(_Path, ios::openmode))\n+\t(basic_fstream(_Path, ios::openmode))\n+\t(basic_fstream::open(_Path, ios::openmode)): Use _If_fs_path.\n+\t* testsuite/27_io/basic_filebuf/open/char/path.cc: Test with filename\n+\tas non-const char*.\n+\t* testsuite/27_io/basic_fstream/cons/char/path.cc: Likewise.\n+\t* testsuite/27_io/basic_fstream/open/char/path.cc: Likewise.\n+\t* testsuite/27_io/basic_ifstream/cons/char/path.cc: Likewise.\n+\t* testsuite/27_io/basic_ifstream/open/char/path.cc: Likewise.\n+\t* testsuite/27_io/basic_ofstream/cons/char/path.cc: Likewise.\n+\t* testsuite/27_io/basic_ofstream/open/char/path.cc: Likewise.\n+\n+\n 2017-11-17  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* include/bits/vector.tcc (vector::_M_realloc_insert): Cache old"}, {"sha": "503bdd617215c4effc137107f287321d45591ee1", "filename": "libstdc++-v3/include/std/fstream", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e0367ead5d8dcac3bec2865582e76e2fbab190/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e0367ead5d8dcac3bec2865582e76e2fbab190/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream?ref=96e0367ead5d8dcac3bec2865582e76e2fbab190", "patch": "@@ -48,6 +48,14 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+#if __cplusplus >= 201703L\n+  // Enable if _Path is a filesystem::path or experimental::filesystem::path\n+  template<typename _Path, typename _Result = _Path, typename _Path2\n+\t   = decltype(std::declval<_Path&>().make_preferred().filename())>\n+    using _If_fs_path = enable_if_t<is_same_v<_Path, _Path2>, _Result>;\n+#endif // C++17\n+\n+\n   // [27.8.1.1] template class basic_filebuf\n   /**\n    *  @brief  The actual work of input and output (for files).\n@@ -216,12 +224,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n       }\n \n-#if __cplusplus >= 201703L\n-      template<typename _Path, typename _Result = _Path, typename _Path2\n-\t       = decltype(std::declval<_Path&>().make_preferred().native())>\n-\tusing _If_path = enable_if_t<is_same_v<_Path, _Path2>, _Result>;\n-#endif // C++17\n-\n     public:\n       // Constructors/destructor:\n       /**\n@@ -321,7 +323,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @return  @c this on success, NULL on failure\n        */\n       template<typename _Path>\n-\t_If_path<_Path, __filebuf_type*>\n+\t_If_fs_path<_Path, __filebuf_type*>\n \topen(const _Path& __s, ios_base::openmode __mode)\n \t{ return open(__s.c_str(), __mode); }\n #endif // C++17\n@@ -540,8 +542,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  @c ios_base::in is automatically included in @a __mode.\n        */\n-      template<typename _Path, typename = _Require<\n-\t  is_constructible<__filebuf_type, const _Path&, ios_base::openmode>>>\n+      template<typename _Path, typename _Require = _If_fs_path<_Path>>\n \tbasic_ifstream(const _Path& __s,\n \t\t       ios_base::openmode __mode = ios_base::in)\n \t: basic_ifstream(__s.c_str(), __mode)\n@@ -661,9 +662,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  fails, @c failbit is set in the stream's error state.\n        */\n       template<typename _Path>\n-\tauto\n+\t_If_fs_path<_Path, void>\n \topen(const _Path& __s, ios_base::openmode __mode = ios_base::in)\n-\t-> decltype((void)_M_filebuf.open(__s, __mode))\n \t{ open(__s.c_str(), __mode); }\n #endif // C++17\n #endif // C++11\n@@ -768,8 +768,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  @c ios_base::out is automatically included in @a __mode.\n        */\n-      template<typename _Path, typename = _Require<\n-\t  is_constructible<__filebuf_type, const _Path&, ios_base::openmode>>>\n+      template<typename _Path, typename _Require = _If_fs_path<_Path>>\n \tbasic_ofstream(const _Path& __s,\n \t\t       ios_base::openmode __mode = ios_base::out)\n \t: basic_ofstream(__s.c_str(), __mode)\n@@ -889,9 +888,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  function fails, @c failbit is set in the stream's error state.\n        */\n       template<typename _Path>\n-\tauto\n+\t_If_fs_path<_Path, void>\n \topen(const _Path& __s, ios_base::openmode __mode = ios_base::out)\n-\t-> decltype((void)_M_filebuf.open(__s, __mode))\n \t{ open(__s.c_str(), __mode); }\n #endif // C++17\n #endif // C++11\n@@ -992,8 +990,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @param  __s  filesystem::path specifying the filename.\n        *  @param  __mode  Open file in specified mode (see std::ios_base).\n        */\n-      template<typename _Path, typename = _Require<\n-\t  is_constructible<__filebuf_type, const _Path&, ios_base::openmode>>>\n+      template<typename _Path, typename _Require = _If_fs_path<_Path>>\n \tbasic_fstream(const _Path& __s,\n \t\t      ios_base::openmode __mode = ios_base::in | ios_base::out)\n \t: basic_fstream(__s.c_str(), __mode)\n@@ -1115,10 +1112,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  function fails, @c failbit is set in the stream's error state.\n        */\n       template<typename _Path>\n-\tauto\n+\t_If_fs_path<_Path, void>\n \topen(const _Path& __s,\n \t     ios_base::openmode __mode = ios_base::in | ios_base::out)\n-\t-> decltype((void)_M_filebuf.open(__s, __mode))\n \t{ open(__s.c_str(), __mode); }\n #endif // C++17\n #endif // C++11"}, {"sha": "51f0839394bcf5f738664340145cf96b60b2b8b8", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/open/char/path.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e0367ead5d8dcac3bec2865582e76e2fbab190/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e0367ead5d8dcac3bec2865582e76e2fbab190/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2Fpath.cc?ref=96e0367ead5d8dcac3bec2865582e76e2fbab190", "patch": "@@ -24,7 +24,8 @@\n #include <filesystem>\n #include <testsuite_hooks.h>\n \n-const std::filesystem::path filename = \"filebuf_members-1.tst\";\n+char cstr[] = \"filebuf_members-1.tst\";\n+const std::filesystem::path filename = cstr;\n \n void\n test01()\n@@ -34,6 +35,13 @@ test01()\n   VERIFY( fb.is_open() );\n }\n \n+void\n+test02() // compile-only\n+{\n+  std::filebuf fb;\n+  fb.open(cstr, std::ios::in);\t// PR libstdc++/83025\n+}\n+\n int\n main()\n {"}, {"sha": "079ebe2d04ef2f7cfa89169764620f46abedd939", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/cons/char/path.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e0367ead5d8dcac3bec2865582e76e2fbab190/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2Fchar%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e0367ead5d8dcac3bec2865582e76e2fbab190/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2Fchar%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fcons%2Fchar%2Fpath.cc?ref=96e0367ead5d8dcac3bec2865582e76e2fbab190", "patch": "@@ -40,10 +40,14 @@ test02()\n   VERIFY( f.is_open() );\n }\n \n+using std::is_constructible_v;\n+// PR libstdc++/83025\n+static_assert(is_constructible_v<std::fstream, char*>);\n+static_assert(is_constructible_v<std::fstream, char*, std::ios::openmode>);\n+\n int\n main()\n {\n   test01();\n   test02();\n-  return 0;\n }"}, {"sha": "297c8973ca1e7e2dd1279b0e20d21dcf8284224f", "filename": "libstdc++-v3/testsuite/27_io/basic_fstream/open/char/path.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e0367ead5d8dcac3bec2865582e76e2fbab190/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fopen%2Fchar%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e0367ead5d8dcac3bec2865582e76e2fbab190/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fopen%2Fchar%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_fstream%2Fopen%2Fchar%2Fpath.cc?ref=96e0367ead5d8dcac3bec2865582e76e2fbab190", "patch": "@@ -24,7 +24,8 @@\n #include <filesystem>\n #include <testsuite_hooks.h>\n \n-const std::filesystem::path filename = \"ofstream_members-1.tst\";\n+char cstr[] = \"filebuf_members-1.tst\";\n+const std::filesystem::path filename = cstr;\n \n void\n test01()\n@@ -42,6 +43,14 @@ test02()\n   VERIFY( f.is_open() );\n }\n \n+void\n+test03() // compile-only\n+{\n+  std::fstream f;\n+  f.open(cstr);\t\t\t\t    // PR libstdc++/83025\n+  f.open(cstr, std::ios::in|std::ios::out); // PR libstdc++/83025\n+}\n+\n int\n main()\n {"}, {"sha": "4265149752b2d22161dc5bd40fc57e6a7a6eff44", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/cons/char/path.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e0367ead5d8dcac3bec2865582e76e2fbab190/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2Fchar%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e0367ead5d8dcac3bec2865582e76e2fbab190/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2Fchar%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fcons%2Fchar%2Fpath.cc?ref=96e0367ead5d8dcac3bec2865582e76e2fbab190", "patch": "@@ -40,10 +40,14 @@ test02()\n   VERIFY( f.is_open() );\n }\n \n+using std::is_constructible_v;\n+// PR libstdc++/83025\n+static_assert(is_constructible_v<std::fstream, char*>);\n+static_assert(is_constructible_v<std::fstream, char*, std::ios::openmode>);\n+\n int\n main()\n {\n   test01();\n   test02();\n-  return 0;\n }"}, {"sha": "49b8c1e4dc4ce0674cc9dd28129a16743ade67c7", "filename": "libstdc++-v3/testsuite/27_io/basic_ifstream/open/char/path.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e0367ead5d8dcac3bec2865582e76e2fbab190/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fopen%2Fchar%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e0367ead5d8dcac3bec2865582e76e2fbab190/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fopen%2Fchar%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ifstream%2Fopen%2Fchar%2Fpath.cc?ref=96e0367ead5d8dcac3bec2865582e76e2fbab190", "patch": "@@ -24,7 +24,8 @@\n #include <filesystem>\n #include <testsuite_hooks.h>\n \n-const std::filesystem::path filename = \"ifstream_members-1.tst\";\n+char cstr[] = \"filebuf_members-1.tst\";\n+const std::filesystem::path filename = cstr;\n \n void\n test01()\n@@ -42,6 +43,14 @@ test02()\n   VERIFY( f.is_open() );\n }\n \n+void\n+test03() // compile-only\n+{\n+  std::ifstream f;\n+  f.open(cstr);\t\t      // PR libstdc++/83025\n+  f.open(cstr, std::ios::in); // PR libstdc++/83025\n+}\n+\n int\n main()\n {"}, {"sha": "da88ff979c4d9e2019ab6ffb2a2a107cb7278b4d", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/cons/char/path.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e0367ead5d8dcac3bec2865582e76e2fbab190/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fchar%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e0367ead5d8dcac3bec2865582e76e2fbab190/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fchar%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fcons%2Fchar%2Fpath.cc?ref=96e0367ead5d8dcac3bec2865582e76e2fbab190", "patch": "@@ -40,6 +40,11 @@ test02()\n   VERIFY( f.is_open() );\n }\n \n+using std::is_constructible_v;\n+// PR libstdc++/83025\n+static_assert(is_constructible_v<std::fstream, char*>);\n+static_assert(is_constructible_v<std::fstream, char*, std::ios::openmode>);\n+\n int\n main()\n {"}, {"sha": "4bbace2c679ba6520871010ea36c01e56bab2b82", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/open/char/path.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e0367ead5d8dcac3bec2865582e76e2fbab190/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fchar%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e0367ead5d8dcac3bec2865582e76e2fbab190/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fchar%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fchar%2Fpath.cc?ref=96e0367ead5d8dcac3bec2865582e76e2fbab190", "patch": "@@ -24,7 +24,8 @@\n #include <filesystem>\n #include <testsuite_hooks.h>\n \n-const std::filesystem::path filename = \"ofstream_members-1.tst\";\n+char cstr[] = \"filebuf_members-1.tst\";\n+const std::filesystem::path filename = cstr;\n \n void\n test01()\n@@ -42,10 +43,17 @@ test02()\n   VERIFY( f.is_open() );\n }\n \n+void\n+test03() // compile-only\n+{\n+  std::ofstream f;\n+  f.open(cstr);\t\t\t// PR libstdc++/83025\n+  f.open(cstr, std::ios::out);\t// PR libstdc++/83025\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n-  return 0;\n }"}]}