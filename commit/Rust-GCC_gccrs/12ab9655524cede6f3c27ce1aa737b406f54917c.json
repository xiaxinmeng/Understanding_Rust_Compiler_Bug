{"sha": "12ab9655524cede6f3c27ce1aa737b406f54917c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJhYjk2NTU1MjRjZWRlNmYzYzI3Y2UxYWE3MzdiNDA2ZjU0OTE3Yw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-01-29T00:28:09Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-01-29T00:28:09Z"}, "message": "compiler: Correct initialization order determination.\n\nFrom-SVN: r195526", "tree": {"sha": "3116a655f079f6c96c8bc21c712270ddc3f3cf5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3116a655f079f6c96c8bc21c712270ddc3f3cf5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12ab9655524cede6f3c27ce1aa737b406f54917c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12ab9655524cede6f3c27ce1aa737b406f54917c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12ab9655524cede6f3c27ce1aa737b406f54917c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12ab9655524cede6f3c27ce1aa737b406f54917c/comments", "author": null, "committer": null, "parents": [{"sha": "670c28f56201211c011c7bd7e633db4d2eb4bce1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/670c28f56201211c011c7bd7e633db4d2eb4bce1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/670c28f56201211c011c7bd7e633db4d2eb4bce1"}], "stats": {"total": 83, "additions": 53, "deletions": 30}, "files": [{"sha": "af178de5c4eaf3f762f5a2257435d641ba53b25c", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ab9655524cede6f3c27ce1aa737b406f54917c/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ab9655524cede6f3c27ce1aa737b406f54917c/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=12ab9655524cede6f3c27ce1aa737b406f54917c", "patch": "@@ -983,6 +983,11 @@ class Temporary_reference_expression : public Expression\n       statement_(statement), is_lvalue_(false)\n   { }\n \n+  // The temporary that this expression refers to.\n+  Temporary_statement*\n+  statement() const\n+  { return this->statement_; }\n+\n   // Indicate that this reference appears on the left hand side of an\n   // assignment statement.\n   void"}, {"sha": "b9840451955e4ec3279a6b1f4d50ef0710f4ef2d", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 43, "deletions": 30, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ab9655524cede6f3c27ce1aa737b406f54917c/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ab9655524cede6f3c27ce1aa737b406f54917c/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=12ab9655524cede6f3c27ce1aa737b406f54917c", "patch": "@@ -499,7 +499,7 @@ class Find_var : public Traverse\n   // A hash table we use to avoid looping.  The index is the name of a\n   // named object.  We only look through objects defined in this\n   // package.\n-  typedef Unordered_set(std::string) Seen_objects;\n+  typedef Unordered_set(const void*) Seen_objects;\n \n   Find_var(Named_object* var, Seen_objects* seen_objects)\n     : Traverse(traverse_expressions),\n@@ -547,7 +547,7 @@ Find_var::expression(Expression** pexpr)\n \t  if (init != NULL)\n \t    {\n \t      std::pair<Seen_objects::iterator, bool> ins =\n-\t\tthis->seen_objects_->insert(v->name());\n+\t\tthis->seen_objects_->insert(v);\n \t      if (ins.second)\n \t\t{\n \t\t  // This is the first time we have seen this name.\n@@ -568,7 +568,7 @@ Find_var::expression(Expression** pexpr)\n       if (f->is_function() && f->package() == NULL)\n \t{\n \t  std::pair<Seen_objects::iterator, bool> ins =\n-\t    this->seen_objects_->insert(f->name());\n+\t    this->seen_objects_->insert(f);\n \t  if (ins.second)\n \t    {\n \t      // This is the first time we have seen this name.\n@@ -578,6 +578,25 @@ Find_var::expression(Expression** pexpr)\n \t}\n     }\n \n+  Temporary_reference_expression* tre = e->temporary_reference_expression();\n+  if (tre != NULL)\n+    {\n+      Temporary_statement* ts = tre->statement();\n+      Expression* init = ts->init();\n+      if (init != NULL)\n+\t{\n+\t  std::pair<Seen_objects::iterator, bool> ins =\n+\t    this->seen_objects_->insert(ts);\n+\t  if (ins.second)\n+\t    {\n+\t      // This is the first time we have seen this temporary\n+\t      // statement.\n+\t      if (Expression::traverse(&init, this) == TRAVERSE_EXIT)\n+\t\treturn TRAVERSE_EXIT;\n+\t    }\n+\t}\n+    }\n+\n   return TRAVERSE_CONTINUE;\n }\n \n@@ -613,11 +632,11 @@ class Var_init\n {\n  public:\n   Var_init()\n-    : var_(NULL), init_(NULL_TREE), waiting_(0)\n+    : var_(NULL), init_(NULL_TREE)\n   { }\n \n   Var_init(Named_object* var, tree init)\n-    : var_(var), init_(init), waiting_(0)\n+    : var_(var), init_(init)\n   { }\n \n   // Return the variable.\n@@ -630,24 +649,11 @@ class Var_init\n   init() const\n   { return this->init_; }\n \n-  // Return the number of variables waiting for this one to be\n-  // initialized.\n-  size_t\n-  waiting() const\n-  { return this->waiting_; }\n-\n-  // Increment the number waiting.\n-  void\n-  increment_waiting()\n-  { ++this->waiting_; }\n-\n  private:\n   // The variable being initialized.\n   Named_object* var_;\n   // The initialization expression to run.\n   tree init_;\n-  // The number of variables which are waiting for this one.\n-  size_t waiting_;\n };\n \n typedef std::list<Var_init> Var_inits;\n@@ -660,6 +666,10 @@ typedef std::list<Var_init> Var_inits;\n static void\n sort_var_inits(Gogo* gogo, Var_inits* var_inits)\n {\n+  typedef std::pair<Named_object*, Named_object*> No_no;\n+  typedef std::map<No_no, bool> Cache;\n+  Cache cache;\n+\n   Var_inits ready;\n   while (!var_inits->empty())\n     {\n@@ -670,23 +680,30 @@ sort_var_inits(Gogo* gogo, Var_inits* var_inits)\n       Named_object* dep = gogo->var_depends_on(var->var_value());\n \n       // Start walking through the list to see which variables VAR\n-      // needs to wait for.  We can skip P1->WAITING variables--that\n-      // is the number we've already checked.\n+      // needs to wait for.\n       Var_inits::iterator p2 = p1;\n       ++p2;\n-      for (size_t i = p1->waiting(); i > 0; --i)\n-\t++p2;\n \n       for (; p2 != var_inits->end(); ++p2)\n \t{\n \t  Named_object* p2var = p2->var();\n-\t  if (expression_requires(init, preinit, dep, p2var))\n+\t  No_no key(var, p2var);\n+\t  std::pair<Cache::iterator, bool> ins =\n+\t    cache.insert(std::make_pair(key, false));\n+\t  if (ins.second)\n+\t    ins.first->second = expression_requires(init, preinit, dep, p2var);\n+\t  if (ins.first->second)\n \t    {\n \t      // Check for cycles.\n-\t      if (expression_requires(p2var->var_value()->init(),\n+\t      key = std::make_pair(p2var, var);\n+\t      ins = cache.insert(std::make_pair(key, false));\n+\t      if (ins.second)\n+\t\tins.first->second =\n+\t\t  expression_requires(p2var->var_value()->init(),\n \t\t\t\t      p2var->var_value()->preinit(),\n \t\t\t\t      gogo->var_depends_on(p2var->var_value()),\n-\t\t\t\t      var))\n+\t\t\t\t      var);\n+\t      if (ins.first->second)\n \t\t{\n \t\t  error_at(var->location(),\n \t\t\t   (\"initialization expressions for %qs and \"\n@@ -700,12 +717,8 @@ sort_var_inits(Gogo* gogo, Var_inits* var_inits)\n \t      else\n \t\t{\n \t\t  // We can't emit P1 until P2 is emitted.  Move P1.\n-\t\t  // Note that the WAITING loop always executes at\n-\t\t  // least once, which is what we want.\n-\t\t  p2->increment_waiting();\n \t\t  Var_inits::iterator p3 = p2;\n-\t\t  for (size_t i = p2->waiting(); i > 0; --i)\n-\t\t    ++p3;\n+\t\t  ++p3;\n \t\t  var_inits->splice(p3, *var_inits, p1);\n \t\t}\n \t      break;"}, {"sha": "c5995710792df8feb007c6fd10b3cc7877cfee73", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ab9655524cede6f3c27ce1aa737b406f54917c/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ab9655524cede6f3c27ce1aa737b406f54917c/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=12ab9655524cede6f3c27ce1aa737b406f54917c", "patch": "@@ -490,6 +490,11 @@ class Temporary_statement : public Statement\n   Type*\n   type() const;\n \n+  // Return the initializer if there is one.\n+  Expression*\n+  init() const\n+  { return this->init_; }\n+\n   // Note that it is OK for this statement to set hidden fields.\n   void\n   set_hidden_fields_are_ok()"}]}