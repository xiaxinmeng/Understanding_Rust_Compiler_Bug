{"sha": "5d382ed61b571550179b016b5809790613cda1a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQzODJlZDYxYjU3MTU1MDE3OWIwMTZiNTgwOTc5MDYxM2NkYTFhMQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2016-11-22T16:06:46Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2016-11-22T16:06:46Z"}, "message": "re PR fortran/78443 ([OOP] Incorrect behavior with non_overridable keyword)\n\n2016-11-22  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/78443\n\t* class.c (add_proc_comp): Add a vtype component for non-overridable\n\tprocedures that are overriding.\n\n2016-11-22  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/78443\n\t* gfortran.dg/typebound_proc_35.f90: New test case.\n\nFrom-SVN: r242703", "tree": {"sha": "e93506d4e21d5bf6271660e2a14b14206d1f01d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e93506d4e21d5bf6271660e2a14b14206d1f01d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d382ed61b571550179b016b5809790613cda1a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d382ed61b571550179b016b5809790613cda1a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d382ed61b571550179b016b5809790613cda1a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d382ed61b571550179b016b5809790613cda1a1/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fa33072bf8192708e9d674db57f13de0b746078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fa33072bf8192708e9d674db57f13de0b746078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fa33072bf8192708e9d674db57f13de0b746078"}], "stats": {"total": 101, "additions": 100, "deletions": 1}, "files": [{"sha": "48c533d1eaf4606502a5f8e632012f1afe76614f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d382ed61b571550179b016b5809790613cda1a1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d382ed61b571550179b016b5809790613cda1a1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5d382ed61b571550179b016b5809790613cda1a1", "patch": "@@ -1,3 +1,9 @@\n+2016-11-22  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/78443\n+\t* class.c (add_proc_comp): Add a vtype component for non-overridable\n+\tprocedures that are overriding.\n+\n 2016-11-20  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/69741"}, {"sha": "ba965c96114c46f5f755b5082f6ceb4a00e683b5", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d382ed61b571550179b016b5809790613cda1a1/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d382ed61b571550179b016b5809790613cda1a1/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=5d382ed61b571550179b016b5809790613cda1a1", "patch": "@@ -751,7 +751,7 @@ add_proc_comp (gfc_symbol *vtype, const char *name, gfc_typebound_proc *tb)\n {\n   gfc_component *c;\n \n-  if (tb->non_overridable)\n+  if (tb->non_overridable && !tb->overridden)\n     return;\n \n   c = gfc_find_component (vtype, name, true, true, NULL);"}, {"sha": "b125a5518a97f3635d7f7074fed321f6ca11f478", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d382ed61b571550179b016b5809790613cda1a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d382ed61b571550179b016b5809790613cda1a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d382ed61b571550179b016b5809790613cda1a1", "patch": "@@ -1,3 +1,8 @@\n+2016-11-22  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/78443\n+\t* gfortran.dg/typebound_proc_35.f90: New test case.\n+\n 2016-11-22  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* gcc.c-torture/execute/pr30778.c (memset): Use size_t for 3rd"}, {"sha": "18b1ed98668ec00daa4666f232acd8234ed3d455", "filename": "gcc/testsuite/gfortran.dg/typebound_proc_35.f90", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d382ed61b571550179b016b5809790613cda1a1/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_35.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d382ed61b571550179b016b5809790613cda1a1/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_35.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_35.f90?ref=5d382ed61b571550179b016b5809790613cda1a1", "patch": "@@ -0,0 +1,88 @@\n+! { dg-do run }\n+!\n+! PR 78443: [OOP] Incorrect behavior with non_overridable keyword\n+!\n+! Contributed by federico <perini@wisc.edu>\n+\n+module types\n+    implicit none\n+\n+\n+    ! Abstract parent class and its child type\n+    type, abstract :: P1\n+    contains\n+        procedure :: test => test1\n+        procedure (square_interface), deferred :: square\n+    endtype\n+\n+    ! Deferred procedure interface\n+    abstract interface\n+        function square_interface( this, x ) result( y )\n+           import P1\n+           class(P1) :: this\n+           real :: x, y\n+        end function square_interface\n+    end interface\n+\n+    type, extends(P1) :: C1\n+    contains\n+       procedure, non_overridable :: square => C1_square\n+    endtype\n+\n+    ! Non-abstract parent class and its child type\n+    type :: P2\n+    contains\n+        procedure :: test => test2\n+        procedure :: square => P2_square\n+    endtype\n+\n+    type, extends(P2) :: C2\n+    contains\n+       procedure, non_overridable :: square => C2_square\n+    endtype\n+\n+contains\n+\n+    real function test1( this, x )\n+        class(P1) :: this\n+        real :: x\n+        test1 = this % square( x )\n+    end function\n+\n+    real function test2( this, x )\n+        class(P2) :: this\n+        real :: x\n+        test2 = this % square( x )\n+    end function\n+\n+    function P2_square( this, x ) result( y )\n+       class(P2) :: this\n+       real :: x, y\n+       y = -100.      ! dummy\n+    end function\n+\n+    function C1_square( this, x ) result( y )\n+       class(C1) :: this\n+       real :: x, y\n+       y = x**2\n+    end function\n+\n+    function C2_square( this, x ) result( y )\n+       class(C2) :: this\n+       real :: x, y\n+       y = x**2\n+    end function\n+\n+end module\n+\n+program main\n+    use types\n+    implicit none\n+    type(P2) :: t1\n+    type(C2) :: t2\n+    type(C1) :: t3\n+\n+    if ( t1 % test( 2. ) /= -100.) call abort()\n+    if ( t2 % test( 2. ) /= 4.) call abort()\n+    if ( t3 % test( 2. ) /= 4.) call abort()\n+end program"}]}