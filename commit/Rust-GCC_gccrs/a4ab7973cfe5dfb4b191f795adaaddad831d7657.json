{"sha": "a4ab7973cfe5dfb4b191f795adaaddad831d7657", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRhYjc5NzNjZmU1ZGZiNGIxOTFmNzk1YWRhYWRkYWQ4MzFkNzY1Nw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2004-11-20T20:31:52Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-11-20T20:31:52Z"}, "message": "c-typeck.c (build_array_ref): Don't check for index == 0.\n\n\t* c-typeck.c (build_array_ref): Don't check for index == 0.  Make\n\tchecks for neither argument being an array or pointer (swapping\n\tthe arguments if necessary), the array argument being a pointer to\n\tor array of functions and for -Wchar-subscripts warnings upfront.\n\ntestsuite:\n\t* gcc.dg/Wchar-subscripts-1.c, gcc.dg/array-8.c: New tests.\n\t* gcc.dg/pointer-arith-1.c, gcc.dg/pointer-arith-2.c,\n\tgcc.dg/pointer-arith-3.c, gcc.dg/pointer-arith-4.c: Update\n\texpected diagnostics.\n\nFrom-SVN: r90969", "tree": {"sha": "744160b47cb98a4ccacd021c089dc864bfb2cedd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/744160b47cb98a4ccacd021c089dc864bfb2cedd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4ab7973cfe5dfb4b191f795adaaddad831d7657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4ab7973cfe5dfb4b191f795adaaddad831d7657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4ab7973cfe5dfb4b191f795adaaddad831d7657", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4ab7973cfe5dfb4b191f795adaaddad831d7657/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40806b8b8f7a4d2ba6b926300f6a0dbcf862eb9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40806b8b8f7a4d2ba6b926300f6a0dbcf862eb9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40806b8b8f7a4d2ba6b926300f6a0dbcf862eb9d"}], "stats": {"total": 223, "additions": 154, "deletions": 69}, "files": [{"sha": "7601d20309d500e62cde600bdcc6e9370de7eedc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ab7973cfe5dfb4b191f795adaaddad831d7657/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ab7973cfe5dfb4b191f795adaaddad831d7657/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4ab7973cfe5dfb4b191f795adaaddad831d7657", "patch": "@@ -1,3 +1,10 @@\n+2004-11-20  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* c-typeck.c (build_array_ref): Don't check for index == 0.  Make\n+\tchecks for neither argument being an array or pointer (swapping\n+\tthe arguments if necessary), the array argument being a pointer to\n+\tor array of functions and for -Wchar-subscripts warnings upfront.\n+\n 2004-11-20  Jeff Law  <law@redhat.com>\n \n \t* regrename.c (copyprop_hardreg_forward): Only search for a"}, {"sha": "c5401042b66b61bf983bb3e2dc4ed2bcf50d0b7e", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 54, "deletions": 61, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ab7973cfe5dfb4b191f795adaaddad831d7657/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ab7973cfe5dfb4b191f795adaaddad831d7657/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=a4ab7973cfe5dfb4b191f795adaaddad831d7657", "patch": "@@ -1594,39 +1594,58 @@ build_indirect_ref (tree ptr, const char *errorstring)\n tree\n build_array_ref (tree array, tree index)\n {\n-  if (index == 0)\n-    {\n-      error (\"subscript missing in array reference\");\n-      return error_mark_node;\n-    }\n-\n+  bool swapped = false;\n   if (TREE_TYPE (array) == error_mark_node\n       || TREE_TYPE (index) == error_mark_node)\n     return error_mark_node;\n \n-  if (TREE_CODE (TREE_TYPE (array)) == ARRAY_TYPE)\n+  if (TREE_CODE (TREE_TYPE (array)) != ARRAY_TYPE\n+      && TREE_CODE (TREE_TYPE (array)) != POINTER_TYPE)\n     {\n-      tree rval, type;\n-\n-      /* Subscripting with type char is likely to lose\n-\t on a machine where chars are signed.\n-\t So warn on any machine, but optionally.\n-\t Don't warn for unsigned char since that type is safe.\n-\t Don't warn for signed char because anyone who uses that\n-\t must have done so deliberately.  */\n-      if (warn_char_subscripts\n-\t  && TYPE_MAIN_VARIANT (TREE_TYPE (index)) == char_type_node)\n-\twarning (\"array subscript has type %<char%>\");\n-\n-      /* Apply default promotions *after* noticing character types.  */\n-      index = default_conversion (index);\n-\n-      /* Require integer *after* promotion, for sake of enums.  */\n-      if (TREE_CODE (TREE_TYPE (index)) != INTEGER_TYPE)\n+      tree temp;\n+      if (TREE_CODE (TREE_TYPE (index)) != ARRAY_TYPE\n+\t  && TREE_CODE (TREE_TYPE (index)) != POINTER_TYPE)\n \t{\n-\t  error (\"array subscript is not an integer\");\n+\t  error (\"subscripted value is neither array nor pointer\");\n \t  return error_mark_node;\n \t}\n+      temp = array;\n+      array = index;\n+      index = temp;\n+      swapped = true;\n+    }\n+\n+  if (!INTEGRAL_TYPE_P (TREE_TYPE (index)))\n+    {\n+      error (\"array subscript is not an integer\");\n+      return error_mark_node;\n+    }\n+\n+  if (TREE_CODE (TREE_TYPE (TREE_TYPE (array))) == FUNCTION_TYPE)\n+    {\n+      error (\"subscripted value is pointer to function\");\n+      return error_mark_node;\n+    }\n+\n+  /* Subscripting with type char is likely to lose on a machine where\n+     chars are signed.  So warn on any machine, but optionally.  Don't\n+     warn for unsigned char since that type is safe.  Don't warn for\n+     signed char because anyone who uses that must have done so\n+     deliberately.  ??? Existing practice has also been to warn only\n+     when the char index is syntactically the index, not for\n+     char[array].  */\n+  if (warn_char_subscripts && !swapped\n+      && TYPE_MAIN_VARIANT (TREE_TYPE (index)) == char_type_node)\n+    warning (\"array subscript has type %<char%>\");\n+\n+  /* Apply default promotions *after* noticing character types.  */\n+  index = default_conversion (index);\n+\n+  gcc_assert (TREE_CODE (TREE_TYPE (index)) == INTEGER_TYPE);\n+\n+  if (TREE_CODE (TREE_TYPE (array)) == ARRAY_TYPE)\n+    {\n+      tree rval, type;\n \n       /* An array that is indexed by a non-constant\n \t cannot be stored in a register; we must be able to do\n@@ -1681,45 +1700,19 @@ build_array_ref (tree array, tree index)\n \t    | TREE_THIS_VOLATILE (array));\n       return require_complete_type (fold (rval));\n     }\n+  else\n+    {\n+      tree ar = default_conversion (array);\n \n-  {\n-    tree ar = default_conversion (array);\n-    tree ind = default_conversion (index);\n-\n-    /* Do the same warning check as above, but only on the part that's\n-       syntactically the index and only if it is also semantically\n-       the index.  */\n-    if (warn_char_subscripts\n-\t&& TREE_CODE (TREE_TYPE (index)) == INTEGER_TYPE\n-\t&& TYPE_MAIN_VARIANT (TREE_TYPE (index)) == char_type_node)\n-      warning (\"subscript has type %<char%>\");\n-\n-    /* Put the integer in IND to simplify error checking.  */\n-    if (TREE_CODE (TREE_TYPE (ar)) == INTEGER_TYPE)\n-      {\n-\ttree temp = ar;\n-\tar = ind;\n-\tind = temp;\n-      }\n-\n-    if (ar == error_mark_node)\n-      return ar;\n+      if (ar == error_mark_node)\n+\treturn ar;\n \n-    if (TREE_CODE (TREE_TYPE (ar)) != POINTER_TYPE\n-\t|| TREE_CODE (TREE_TYPE (TREE_TYPE (ar))) == FUNCTION_TYPE)\n-      {\n-\terror (\"subscripted value is neither array nor pointer\");\n-\treturn error_mark_node;\n-      }\n-    if (TREE_CODE (TREE_TYPE (ind)) != INTEGER_TYPE)\n-      {\n-\terror (\"array subscript is not an integer\");\n-\treturn error_mark_node;\n-      }\n+      gcc_assert (TREE_CODE (TREE_TYPE (ar)) == POINTER_TYPE);\n+      gcc_assert (TREE_CODE (TREE_TYPE (TREE_TYPE (ar))) != FUNCTION_TYPE);\n \n-    return build_indirect_ref (build_binary_op (PLUS_EXPR, ar, ind, 0),\n-\t\t\t       \"array indexing\");\n-  }\n+      return build_indirect_ref (build_binary_op (PLUS_EXPR, ar, index, 0),\n+\t\t\t\t \"array indexing\");\n+    }\n }\n \f\n /* Build an external reference to identifier ID.  FUN indicates"}, {"sha": "ef3ca31020f855d4e95cc01db2dbb6082bf73144", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ab7973cfe5dfb4b191f795adaaddad831d7657/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ab7973cfe5dfb4b191f795adaaddad831d7657/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a4ab7973cfe5dfb4b191f795adaaddad831d7657", "patch": "@@ -1,3 +1,10 @@\n+2004-11-20  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/Wchar-subscripts-1.c, gcc.dg/array-8.c: New tests.\n+\t* gcc.dg/pointer-arith-1.c, gcc.dg/pointer-arith-2.c,\n+\tgcc.dg/pointer-arith-3.c, gcc.dg/pointer-arith-4.c: Update\n+\texpected diagnostics.\n+\n 2004-11-20  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR target/18580"}, {"sha": "d1efd25026b450b3c7e4d73ff9360b429de7034d", "filename": "gcc/testsuite/gcc.dg/Wchar-subscripts-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ab7973cfe5dfb4b191f795adaaddad831d7657/gcc%2Ftestsuite%2Fgcc.dg%2FWchar-subscripts-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ab7973cfe5dfb4b191f795adaaddad831d7657/gcc%2Ftestsuite%2Fgcc.dg%2FWchar-subscripts-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWchar-subscripts-1.c?ref=a4ab7973cfe5dfb4b191f795adaaddad831d7657", "patch": "@@ -0,0 +1,29 @@\n+/* Test -Wchar-subscripts.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wchar-subscripts\" } */\n+\n+extern int a[];\n+int *p;\n+char c;\n+signed char sc;\n+unsigned char uc;\n+\n+void\n+f (void)\n+{\n+  a[sc];\n+  a[uc];\n+  sc[a];\n+  uc[a];\n+  p[sc];\n+  p[uc];\n+  sc[p];\n+  uc[p];\n+  a[c]; /* { dg-warning \"warning: array subscript has type 'char'\" } */\n+  p[c]; /* { dg-warning \"warning: array subscript has type 'char'\" } */\n+  /* -Wchar-subscripts does not warn if the char is not syntactically\n+      the subscript.  */\n+  c[a];\n+  c[p];\n+}"}, {"sha": "6d0a211461bdc8206b4edcca0ce6efb95cb58f0e", "filename": "gcc/testsuite/gcc.dg/array-8.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ab7973cfe5dfb4b191f795adaaddad831d7657/gcc%2Ftestsuite%2Fgcc.dg%2Farray-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ab7973cfe5dfb4b191f795adaaddad831d7657/gcc%2Ftestsuite%2Fgcc.dg%2Farray-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-8.c?ref=a4ab7973cfe5dfb4b191f795adaaddad831d7657", "patch": "@@ -0,0 +1,49 @@\n+/* Test diagnostics for array references.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89\" } */\n+\n+struct s { char c[1]; };\n+struct s f (void);\n+_Bool b;\n+char c;\n+enum e { E } e;\n+extern int a[];\n+int *p;\n+void *pv;\n+void (*fp)(void);\n+struct si *sip;\n+\n+void\n+g (void)\n+{\n+  a[b];\n+  a[c];\n+  a[e];\n+  p[b];\n+  p[c];\n+  p[e];\n+  b[a];\n+  c[a];\n+  e[a];\n+  b[p];\n+  c[p];\n+  e[p];\n+  /* These two should be treated the same.  In particular, a \"neither\n+     array nor pointer\" bogus warning used to be given for the\n+     second.  */\n+  f().c[0];\n+  0[f().c];\n+  /* Various invalid cases.  */\n+  c[c]; /* { dg-error \"error: subscripted value is neither array nor pointer\" } */\n+  p[1.0]; /* { dg-error \"error: array subscript is not an integer\" } */\n+  1.0[a]; /* { dg-error \"error: array subscript is not an integer\" } */\n+  fp[0]; /* { dg-error \"error: subscripted value is pointer to function\" } */\n+  0[fp]; /* { dg-error \"error: subscripted value is pointer to function\" } */\n+  pv[0]; /* { dg-warning \"warning: dereferencing 'void \\\\*' pointer\" } */\n+  0[pv]; /* { dg-warning \"warning: dereferencing 'void \\\\*' pointer\" } */\n+  sip[0]; /* { dg-error \"error: invalid use of undefined type 'struct si'\" } */\n+  /* { dg-error \"error: dereferencing pointer to incomplete type\" \"\" { target *-*-* } 45 } */\n+  0[sip]; /* { dg-error \"error: invalid use of undefined type 'struct si'\" } */\n+  /* { dg-error \"error: dereferencing pointer to incomplete type\" \"\" { target *-*-* } 47 } */\n+}"}, {"sha": "3bf78873e8fe85397df777706d6c0be62b9d3783", "filename": "gcc/testsuite/gcc.dg/pointer-arith-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ab7973cfe5dfb4b191f795adaaddad831d7657/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ab7973cfe5dfb4b191f795adaaddad831d7657/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-1.c?ref=a4ab7973cfe5dfb4b191f795adaaddad831d7657", "patch": "@@ -32,8 +32,8 @@ g (void)\n   f -= 1;\n   p[0]; /* { dg-warning \"warning: dereferencing 'void \\\\*' pointer\" } */\n   0[p]; /* { dg-warning \"warning: dereferencing 'void \\\\*' pointer\" } */\n-  f[0]; /* { dg-error \"error: subscripted value is neither array nor pointer\" } */\n-  0[f]; /* { dg-error \"error: subscripted value is neither array nor pointer\" } */\n+  f[0]; /* { dg-error \"error: subscripted value is pointer to function\" } */\n+  0[f]; /* { dg-error \"error: subscripted value is pointer to function\" } */\n   p - p;\n   f - f;\n }"}, {"sha": "fde01e102d7ccb0110fee71dbec1d91625aa8f20", "filename": "gcc/testsuite/gcc.dg/pointer-arith-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ab7973cfe5dfb4b191f795adaaddad831d7657/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ab7973cfe5dfb4b191f795adaaddad831d7657/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-2.c?ref=a4ab7973cfe5dfb4b191f795adaaddad831d7657", "patch": "@@ -34,8 +34,8 @@ g (void)\n   /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" \"array 1\" { target *-*-* } 33 } */\n   0[p]; /* { dg-warning \"warning: dereferencing 'void \\\\*' pointer\" } */\n   /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" \"array 1\" { target *-*-* } 35 } */\n-  f[0]; /* { dg-error \"error: subscripted value is neither array nor pointer\" } */\n-  0[f]; /* { dg-error \"error: subscripted value is neither array nor pointer\" } */\n+  f[0]; /* { dg-error \"error: subscripted value is pointer to function\" } */\n+  0[f]; /* { dg-error \"error: subscripted value is pointer to function\" } */\n   p - p; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in subtraction\" } */\n   f - f; /* { dg-warning \"warning: pointer to a function used in subtraction\" } */\n }"}, {"sha": "f23f677c8b81c58ba1090b4f8845d619ccc7d9f6", "filename": "gcc/testsuite/gcc.dg/pointer-arith-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ab7973cfe5dfb4b191f795adaaddad831d7657/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ab7973cfe5dfb4b191f795adaaddad831d7657/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-3.c?ref=a4ab7973cfe5dfb4b191f795adaaddad831d7657", "patch": "@@ -34,8 +34,8 @@ g (void)\n   /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" \"array 1\" { target *-*-* } 33 } */\n   0[p]; /* { dg-warning \"warning: dereferencing 'void \\\\*' pointer\" } */\n   /* { dg-warning \"warning: pointer of type 'void \\\\*' used in arithmetic\" \"array 1\" { target *-*-* } 35 } */\n-  f[0]; /* { dg-error \"error: subscripted value is neither array nor pointer\" } */\n-  0[f]; /* { dg-error \"error: subscripted value is neither array nor pointer\" } */\n+  f[0]; /* { dg-error \"error: subscripted value is pointer to function\" } */\n+  0[f]; /* { dg-error \"error: subscripted value is pointer to function\" } */\n   p - p; /* { dg-warning \"warning: pointer of type 'void \\\\*' used in subtraction\" } */\n   f - f; /* { dg-warning \"warning: pointer to a function used in subtraction\" } */\n }"}, {"sha": "b17f9d7a335cf7fb7cff2af2cf4bf129041acb89", "filename": "gcc/testsuite/gcc.dg/pointer-arith-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4ab7973cfe5dfb4b191f795adaaddad831d7657/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4ab7973cfe5dfb4b191f795adaaddad831d7657/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpointer-arith-4.c?ref=a4ab7973cfe5dfb4b191f795adaaddad831d7657", "patch": "@@ -34,8 +34,8 @@ g (void)\n   /* { dg-error \"error: pointer of type 'void \\\\*' used in arithmetic\" \"array 1\" { target *-*-* } 33 } */\n   0[p]; /* { dg-warning \"warning: dereferencing 'void \\\\*' pointer\" } */\n   /* { dg-error \"error: pointer of type 'void \\\\*' used in arithmetic\" \"array 1\" { target *-*-* } 35 } */\n-  f[0]; /* { dg-error \"error: subscripted value is neither array nor pointer\" } */\n-  0[f]; /* { dg-error \"error: subscripted value is neither array nor pointer\" } */\n+  f[0]; /* { dg-error \"error: subscripted value is pointer to function\" } */\n+  0[f]; /* { dg-error \"error: subscripted value is pointer to function\" } */\n   p - p; /* { dg-error \"error: pointer of type 'void \\\\*' used in subtraction\" } */\n   f - f; /* { dg-error \"error: pointer to a function used in subtraction\" } */\n }"}]}