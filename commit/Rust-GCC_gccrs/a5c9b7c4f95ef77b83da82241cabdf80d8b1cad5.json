{"sha": "a5c9b7c4f95ef77b83da82241cabdf80d8b1cad5", "node_id": "C_kwDOANBUbNoAKGE1YzliN2M0Zjk1ZWY3N2I4M2RhODIyNDFjYWJkZjgwZDhiMWNhZDU", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-03-09T09:25:11Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-03-09T09:26:15Z"}, "message": "Fortran: Fix CLASS handling in SIZEOF intrinsic\n\ngcc/fortran/ChangeLog:\n\n\t* trans-intrinsic.cc (gfc_conv_intrinsic_sizeof): Fix CLASS handling.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/sizeof_6.f90: New test.", "tree": {"sha": "bf5e62152bd6dd894307bc36bd874961ded5e5f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf5e62152bd6dd894307bc36bd874961ded5e5f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5c9b7c4f95ef77b83da82241cabdf80d8b1cad5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5c9b7c4f95ef77b83da82241cabdf80d8b1cad5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5c9b7c4f95ef77b83da82241cabdf80d8b1cad5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5c9b7c4f95ef77b83da82241cabdf80d8b1cad5/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d76511138dc816ef66fd16f71531f48c37dac3b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d76511138dc816ef66fd16f71531f48c37dac3b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d76511138dc816ef66fd16f71531f48c37dac3b4"}], "stats": {"total": 453, "additions": 446, "deletions": 7}, "files": [{"sha": "2249723540d11b96d3aa6dd82148c365e516fac9", "filename": "gcc/fortran/trans-intrinsic.cc", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5c9b7c4f95ef77b83da82241cabdf80d8b1cad5/gcc%2Ffortran%2Ftrans-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5c9b7c4f95ef77b83da82241cabdf80d8b1cad5/gcc%2Ffortran%2Ftrans-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.cc?ref=a5c9b7c4f95ef77b83da82241cabdf80d8b1cad5", "patch": "@@ -8099,12 +8099,14 @@ gfc_conv_intrinsic_sizeof (gfc_se *se, gfc_expr *expr)\n \t class object.  The class object may be a non-pointer object, e.g.\n \t located on the stack, or a memory location pointed to, e.g. a\n \t parameter, i.e., an indirect_ref.  */\n-      if (arg->rank < 0\n-\t  || (arg->rank > 0 && !VAR_P (argse.expr)\n-\t      && ((INDIRECT_REF_P (TREE_OPERAND (argse.expr, 0))\n-\t\t   && GFC_DECL_CLASS (TREE_OPERAND (\n-\t\t\t\t\tTREE_OPERAND (argse.expr, 0), 0)))\n-\t\t  || GFC_DECL_CLASS (TREE_OPERAND (argse.expr, 0)))))\n+      if (POINTER_TYPE_P (TREE_TYPE (argse.expr))\n+\t  && GFC_CLASS_TYPE_P (TREE_TYPE (TREE_TYPE (argse.expr))))\n+\tbyte_size\n+\t  = gfc_class_vtab_size_get (build_fold_indirect_ref (argse.expr));\n+      else if (GFC_CLASS_TYPE_P (TREE_TYPE (argse.expr)))\n+\tbyte_size = gfc_class_vtab_size_get (argse.expr);\n+      else if (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (argse.expr))\n+\t       && TREE_CODE (argse.expr) == COMPONENT_REF)\n \tbyte_size = gfc_class_vtab_size_get (TREE_OPERAND (argse.expr, 0));\n       else if (arg->rank > 0\n \t       || (arg->rank == 0\n@@ -8114,7 +8116,7 @@ gfc_conv_intrinsic_sizeof (gfc_se *se, gfc_expr *expr)\n \tbyte_size = gfc_class_vtab_size_get (\n \t      GFC_DECL_SAVED_DESCRIPTOR (arg->symtree->n.sym->backend_decl));\n       else\n-\tbyte_size = gfc_class_vtab_size_get (argse.expr);\n+\tgcc_unreachable ();\n     }\n   else\n     {"}, {"sha": "21b57350dc3fa1a2ead432f2448a5acc029eb4b6", "filename": "gcc/testsuite/gfortran.dg/sizeof_6.f90", "status": "added", "additions": 437, "deletions": 0, "changes": 437, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5c9b7c4f95ef77b83da82241cabdf80d8b1cad5/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5c9b7c4f95ef77b83da82241cabdf80d8b1cad5/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsizeof_6.f90?ref=a5c9b7c4f95ef77b83da82241cabdf80d8b1cad5", "patch": "@@ -0,0 +1,437 @@\n+! { dg-do run }\n+!\n+! Check that sizeof is properly handled\n+!\n+use iso_c_binding\n+implicit none (type, external)\n+\n+type t\n+  integer, allocatable :: a(:,:,:), aa\n+  integer :: b(5), c\n+end type t\n+\n+type t2\n+   class(t), allocatable :: d(:,:), e\n+end type t2\n+\n+type, extends(t2) :: t2e\n+  integer :: q(7), z\n+end type t2e\n+\n+type t3\n+   class(t2), allocatable :: ct2, ct2a(:,:,:)\n+   type(t2), allocatable :: tt2, tt2a(:,:,:)\n+   integer, allocatable :: ii, iia(:,:,:)\n+end type t3\n+\n+type(t3) :: var, vara(5)\n+type(t3), allocatable :: avar, avara(:)\n+class(t3), allocatable :: cvar, cvara(:)\n+type(t2), allocatable :: ax, axa(:,:,:)\n+class(t2), allocatable :: cx, cxa(:,:,:)\n+\n+integer(c_size_t) :: n\n+\n+allocate (t3 :: avar, avara(5))\n+allocate (t3 :: cvar, cvara(5))\n+\n+n = sizeof(var)\n+\n+! Assume alignment plays no tricks and system has 32bit/64bit.\n+! If needed change\n+if (n /= 376 .and. n /= 200) error stop\n+\n+if (n /= sizeof(avar)) error stop\n+if (n /= sizeof(cvar)) error stop\n+if (n * 5 /= sizeof(vara)) error stop\n+if (n * 5 /= sizeof(avara)) error stop\n+if (n * 5 /= sizeof(cvara)) error stop\n+\n+if (n /= sz_ar(var,var,var,var)) error stop\n+if (n /= sz_s(var,var)) error stop\n+if (n /= sz_t3(var,var,var,var)) error stop\n+if (n /= sz_ar(avar,avar,avar,avar)) error stop\n+if (n /= sz_s(avar,avar)) error stop\n+if (n /= sz_t3(avar,avar,avar,avar)) error stop\n+if (n /= sz_t3_at(avar,avar)) error stop\n+if (n /= sz_ar(cvar,cvar,cvar,cvar)) error stop\n+if (n /= sz_s(cvar,cvar)) error stop\n+if (n /= sz_t3(cvar,cvar,cvar,cvar)) error stop\n+if (n /= sz_t3_a(cvar,cvar)) error stop\n+\n+if (n*5 /= sz_ar(vara,vara,vara,vara)) error stop\n+if (n*5 /= sz_r1(vara,vara,vara,vara)) error stop\n+if (n*5 /= sz_t3(vara,vara,vara,vara)) error stop\n+if (n*5 /= sz_ar(avara,avara,avara,avara)) error stop\n+if (n*5 /= sz_r1(avara,avara,avara,avara)) error stop\n+if (n*5 /= sz_t3(avara,avara,avara,avara)) error stop\n+if (n*5 /= sz_t3_at(avara,avara)) error stop\n+if (n*5 /= sz_ar(cvara,cvara,cvara,cvara)) error stop\n+if (n*5 /= sz_r1(cvara,cvara,cvara,cvara)) error stop\n+if (n*5 /= sz_t3(cvara,cvara,cvara,cvara)) error stop\n+if (n*5 /= sz_t3_a(cvara,cvara)) error stop\n+\n+allocate (var%ct2, var%ct2a(5,4,2), var%tt2, var%tt2a(5,4,2), var%ii, var%iia(5,3,2))\n+allocate (avar%ct2, avar%ct2a(5,4,2), avar%tt2, avar%tt2a(5,4,2), avar%ii, avar%iia(5,3,2))\n+allocate (cvar%ct2, cvar%ct2a(5,4,2), cvar%tt2, cvar%tt2a(5,4,2), cvar%ii, cvar%iia(5,3,2))\n+allocate (vara(1)%ct2, vara(1)%ct2a(5,4,2), vara(1)%tt2, vara(1)%tt2a(5,4,2), vara(1)%ii, vara(1)%iia(5,3,2))\n+allocate (avara(1)%ct2, avara(1)%ct2a(5,4,2), avara(1)%tt2, avara(1)%tt2a(5,4,2), avara(1)%ii, avara(1)%iia(5,3,2))\n+allocate (cvara(1)%ct2, cvara(1)%ct2a(5,4,2), cvara(1)%tt2, cvara(1)%tt2a(5,4,2), cvara(1)%ii, cvara(1)%iia(5,3,2))\n+allocate (ax, axa(5,4,2), cx, cxa(5,4,2))\n+\n+! Should be still be the same\n+if (n /= sizeof(avar)) error stop\n+if (n /= sizeof(cvar)) error stop\n+if (n * 5 /= sizeof(vara)) error stop\n+if (n * 5 /= sizeof(avara)) error stop\n+if (n * 5 /= sizeof(cvara)) error stop\n+\n+if (n /= sz_ar(var,var,var,var)) error stop\n+if (n /= sz_s(var,var)) error stop\n+if (n /= sz_t3(var,var,var,var)) error stop\n+if (n /= sz_ar(avar,avar,avar,avar)) error stop\n+if (n /= sz_s(avar,avar)) error stop\n+if (n /= sz_t3(avar,avar,avar,avar)) error stop\n+if (n /= sz_t3_at(avar,avar)) error stop\n+if (n /= sz_ar(cvar,cvar,cvar,cvar)) error stop\n+if (n /= sz_s(cvar,cvar)) error stop\n+if (n /= sz_t3(cvar,cvar,cvar,cvar)) error stop\n+if (n /= sz_t3_a(cvar,cvar)) error stop\n+\n+if (n*5 /= sz_ar(vara,vara,vara,vara)) error stop\n+if (n*5 /= sz_r1(vara,vara,vara,vara)) error stop\n+if (n*5 /= sz_t3(vara,vara,vara,vara)) error stop\n+if (n*5 /= sz_ar(avara,avara,avara,avara)) error stop\n+if (n*5 /= sz_r1(avara,avara,avara,avara)) error stop\n+if (n*5 /= sz_t3(avara,avara,avara,avara)) error stop\n+if (n*5 /= sz_t3_at(avara,avara)) error stop\n+if (n*5 /= sz_ar(cvara,cvara,cvara,cvara)) error stop\n+if (n*5 /= sz_r1(cvara,cvara,cvara,cvara)) error stop\n+if (n*5 /= sz_t3(cvara,cvara,cvara,cvara)) error stop\n+if (n*5 /= sz_t3_a(cvara,cvara)) error stop\n+\n+! This one did segfault before in gfc_conv_intrinsic_sizeof\n+n = sizeof(var%ct2)\n+if (n /= 112 .and. n /= 60) error stop\n+if (n /= sizeof (var%tt2)) error stop\n+if (n /= sizeof (avar%ct2)) error stop\n+if (n /= sizeof (avar%tt2)) error stop\n+if (n /= sizeof (cvar%ct2)) error stop\n+if (n /= sizeof (cvar%tt2)) error stop\n+if (n /= sizeof (vara(1)%tt2)) error stop\n+if (n /= sizeof (avara(1)%ct2)) error stop\n+if (n /= sizeof (avara(1)%tt2)) error stop\n+if (n /= sizeof (cvara(1)%ct2)) error stop\n+if (n /= sizeof (cvara(1)%tt2)) error stop\n+\n+if (n /= sizeof (ax)) error stop\n+if (n /= sizeof (cx)) error stop\n+\n+if (n /= sz_ar(var%ct2,var%ct2,var%ct2,var%ct2)) error stop\n+if (n /= sz_s(var%ct2,var%ct2)) error stop\n+if (n /= sz_t2(var%ct2,var%ct2,var%ct2,var%ct2,.false.)) error stop\n+if (n /= sz_t2_a(var%ct2,var%ct2)) error stop\n+if (n /= sz_ar(var%tt2,var%tt2,var%tt2,var%tt2)) error stop\n+if (n /= sz_s(var%tt2,var%tt2)) error stop\n+if (n /= sz_t2(var%tt2,var%tt2,var%tt2,var%tt2,.false.)) error stop\n+if (n /= sz_t2_at(var%tt2,var%tt2)) error stop\n+\n+if (n*5*4*2 /= sizeof (var%tt2a)) error stop\n+if (n*5*4*2 /= sizeof (avar%ct2a)) error stop\n+if (n*5*4*2 /= sizeof (avar%tt2a)) error stop\n+if (n*5*4*2 /= sizeof (cvar%ct2a)) error stop\n+if (n*5*4*2 /= sizeof (cvar%tt2a)) error stop\n+if (n*5*4*2 /= sizeof (vara(1)%tt2a)) error stop\n+if (n*5*4*2 /= sizeof (avara(1)%ct2a)) error stop\n+if (n*5*4*2 /= sizeof (avara(1)%tt2a)) error stop\n+if (n*5*4*2 /= sizeof (cvara(1)%ct2a)) error stop\n+if (n*5*4*2 /= sizeof (cvara(1)%tt2a)) error stop\n+\n+if (n*5*4*2 /= sizeof (axa)) error stop\n+if (n*5*4*2 /= sizeof (cxa)) error stop\n+\n+if (n*5*4*2 /= sz_ar(var%ct2a,var%ct2a,var%ct2a,var%ct2a)) error stop\n+if (n*5*4*2 /= sz_r3(var%ct2a,var%ct2a,var%ct2a,var%ct2a)) error stop\n+if (n*5*4*2 /= sz_t2(var%ct2a,var%ct2a,var%ct2a,var%ct2a,.false.)) error stop\n+if (n*5*4*2 /= sz_t2_a(var%ct2a,var%ct2a)) error stop\n+if (n*5*4*2 /= sz_ar(var%tt2a,var%tt2a,var%tt2a,var%tt2a)) error stop\n+if (n*5*4*2 /= sz_r3(var%tt2a,var%tt2a,var%tt2a,var%tt2a)) error stop\n+if (n*5*4*2 /= sz_t2(var%tt2a,var%tt2a,var%tt2a,var%tt2a,.false.)) error stop\n+if (n*5*4*2 /= sz_t2_at(var%tt2a,var%tt2a)) error stop\n+\n+n = sizeof(var%ii)\n+if (n /= 4) error stop\n+if (n /= sizeof (var%ii)) error stop\n+if (n /= sizeof (avar%ii)) error stop\n+if (n /= sizeof (avar%ii)) error stop\n+if (n /= sizeof (cvar%ii)) error stop\n+if (n /= sizeof (cvar%ii)) error stop\n+if (n /= sizeof (vara(1)%ii)) error stop\n+if (n /= sizeof (avara(1)%ii)) error stop\n+if (n /= sizeof (avara(1)%ii)) error stop\n+if (n /= sizeof (cvara(1)%ii)) error stop\n+if (n /= sizeof (cvara(1)%ii)) error stop\n+\n+if (n*5*3*2 /= sizeof (var%iia)) error stop\n+if (n*5*3*2 /= sizeof (avar%iia)) error stop\n+if (n*5*3*2 /= sizeof (avar%iia)) error stop\n+if (n*5*3*2 /= sizeof (cvar%iia)) error stop\n+if (n*5*3*2 /= sizeof (cvar%iia)) error stop\n+if (n*5*3*2 /= sizeof (vara(1)%iia)) error stop\n+if (n*5*3*2 /= sizeof (avara(1)%iia)) error stop\n+if (n*5*3*2 /= sizeof (avara(1)%iia)) error stop\n+if (n*5*3*2 /= sizeof (cvara(1)%iia)) error stop\n+if (n*5*3*2 /= sizeof (cvara(1)%iia)) error stop\n+\n+deallocate (var%ct2, var%ct2a, var%tt2, var%tt2a, var%ii, var%iia)\n+deallocate (avar%ct2, avar%ct2a, avar%tt2, avar%tt2a, avar%ii, avar%iia)\n+deallocate (cvar%ct2, cvar%ct2a, cvar%tt2, cvar%tt2a, cvar%ii, cvar%iia)\n+deallocate (vara(1)%ct2, vara(1)%ct2a, vara(1)%tt2, vara(1)%tt2a, vara(1)%ii, vara(1)%iia)\n+deallocate (avara(1)%ct2, avara(1)%ct2a, avara(1)%tt2, avara(1)%tt2a, avara(1)%ii, avara(1)%iia)\n+deallocate (cvara(1)%ct2, cvara(1)%ct2a, cvara(1)%tt2, cvara(1)%tt2a, cvara(1)%ii, cvara(1)%iia)\n+deallocate (ax, axa, cx, cxa)\n+\n+allocate (t2e :: var%ct2, var%ct2a(5,4,2))\n+allocate (t2e :: avar%ct2, avar%ct2a(5,4,2))\n+allocate (t2e :: cvar%ct2, cvar%ct2a(5,4,2))\n+allocate (t2e :: vara(1)%ct2, vara(1)%ct2a(5,4,2))\n+allocate (t2e :: avara(1)%ct2, avara(1)%ct2a(5,4,2))\n+allocate (t2e :: cvara(1)%ct2, cvara(1)%ct2a(5,4,2))\n+allocate (t2e :: cx, cxa(5,4,2))\n+\n+n = sizeof(cx)\n+if (n /= 144 .and. n /= 92) error stop\n+if (n /= sizeof(var%ct2)) error stop\n+if (n /= sizeof(avar%ct2)) error stop\n+if (n /= sizeof(cvar%ct2)) error stop\n+if (n /= sizeof(vara(1)%ct2)) error stop\n+if (n /= sizeof(avara(1)%ct2)) error stop\n+if (n /= sizeof(cvara(1)%ct2)) error stop\n+if (n*5*4*2 /= sizeof(cxa)) error stop\n+if (n*5*4*2 /= sizeof(var%ct2a)) error stop\n+if (n*5*4*2 /= sizeof(avar%ct2a)) error stop\n+if (n*5*4*2 /= sizeof(cvar%ct2a)) error stop\n+if (n*5*4*2 /= sizeof(vara(1)%ct2a)) error stop\n+if (n*5*4*2 /= sizeof(avara(1)%ct2a)) error stop\n+if (n*5*4*2 /= sizeof(cvara(1)%ct2a)) error stop\n+\n+! FAILS as declare not dynamic type arrives for TYPE(*),dimension(..)\n+! -> FIXME, PR fortran/104844  (trice)\n+!if (n /= sz_ar(var%ct2,var%ct2,var%ct2,var%ct2)) error stop  ! FIXME\n+if (n /= sz_s(var%ct2,var%ct2)) error stop\n+if (n /= sz_t2(var%ct2,var%ct2,var%ct2,var%ct2,.true.)) error stop\n+if (n /= sz_t2_a(var%ct2,var%ct2)) error stop\n+!if (n*5*4*2 /= sz_ar(var%ct2a,var%ct2a,var%ct2a,var%ct2a)) error stop ! FIXME\n+!if (n*5*4*2 /= sz_r3(var%ct2a,var%ct2a,var%ct2a,var%ct2a)) error stop ! FIXME\n+if (n*5*4*2 /= sz_t2(var%ct2a,var%ct2a,var%ct2a,var%ct2a,.true.)) error stop\n+if (n*5*4*2 /= sz_t2_a(var%ct2a,var%ct2a)) error stop\n+\n+allocate (t :: var%ct2%d(3,2), var%ct2a(5,4,2)%d(3,2))\n+allocate (t :: avar%ct2%d(3,2), avar%ct2a(5,4,2)%d(3,2))\n+allocate (t :: cvar%ct2%d(3,2), cvar%ct2a(5,4,2)%d(3,2))\n+allocate (t :: vara(1)%ct2%d(3,2), vara(1)%ct2a(5,4,2)%d(3,2))\n+allocate (t :: avara(1)%ct2%d(3,2), avara(1)%ct2a(5,4,2)%d(3,2))\n+allocate (t :: cvara(1)%ct2%d(3,2), cvara(1)%ct2a(5,4,2)%d(3,2))\n+allocate (t :: cx%d(3,2), cxa(5,4,2)%d(3,2))\n+\n+allocate (t :: var%ct2%e, var%ct2a(5,4,2)%e)\n+allocate (t :: avar%ct2%e, avar%ct2a(5,4,2)%e)\n+allocate (t :: cvar%ct2%e, cvar%ct2a(5,4,2)%e)\n+allocate (t :: vara(1)%ct2%e, vara(1)%ct2a(5,4,2)%e)\n+allocate (t :: avara(1)%ct2%e, avara(1)%ct2a(5,4,2)%e)\n+allocate (t :: cvara(1)%ct2%e, cvara(1)%ct2a(5,4,2)%e)\n+allocate (t :: cx%e, cxa(5,4,2)%e)\n+\n+n = sizeof(cx%e)\n+if (n /= 144 .and. n /= 88) error stop\n+if (n /= sizeof(var%ct2%e)) error stop\n+if (n /= sizeof(var%ct2a(5,4,2)%e)) error stop\n+if (n /= sizeof(avar%ct2%e)) error stop\n+if (n /= sizeof(avar%ct2a(5,4,2)%e)) error stop\n+if (n /= sizeof(cvar%ct2%e)) error stop\n+if (n /= sizeof(cvar%ct2a(5,4,2)%e)) error stop\n+if (n /= sizeof(avara(1)%ct2%e)) error stop\n+if (n /= sizeof(avara(1)%ct2a(5,4,2)%e)) error stop\n+if (n /= sizeof(cvara(1)%ct2%e)) error stop\n+if (n /= sizeof(cvara(1)%ct2a(5,4,2)%e)) error stop\n+\n+if (n /= sz_ar(var%ct2%e,var%ct2a(5,3,2)%e,cvar%ct2%e,cvar%ct2a(5,3,2)%e)) error stop\n+if (n /= sz_s(var%ct2%e,var%ct2a(5,3,2)%e)) error stop\n+if (n /= sz_t(var%ct2%e,var%ct2a(5,3,2)%e,cvar%ct2%e,cvar%ct2a(5,3,2)%e)) error stop\n+if (n /= sz_t_a(var%ct2%e,var%ct2a(5,3,2)%e)) error stop\n+\n+! FIXME - all of the following fail as size(... % ct2a(5,3,2) % d) == 0 instead of 6\n+! See PR fortran/104845\n+!if (n*3*2 /= sz_ar(var%ct2%d,var%ct2a(5,3,2)%d,cvar%ct2%d,cvar%ct2a(5,3,2)%d)) error stop\n+!if (n*3*2 /= sz_r2(var%ct2%d,var%ct2a(5,3,2)%d,cvar%ct2%d,cvar%ct2a(5,3,2)%d)) error stop\n+!if (n*3*2 /= sz_t(var%ct2%d,var%ct2a(5,3,2)%d,cvar%ct2%d,cvar%ct2a(5,3,2)%d)) error stop\n+!if (n*3*2 /= sz_t_a(var%ct2%d,var%ct2a(5,3,2)%d)) error stop\n+\n+if (n*3*2 /= sizeof(var%ct2%d)) error stop\n+if (n*3*2 /= sizeof(var%ct2a(5,4,2)%d)) error stop\n+if (n*3*2 /= sizeof(avar%ct2%d)) error stop\n+if (n*3*2 /= sizeof(avar%ct2a(5,4,2)%d)) error stop\n+if (n*3*2 /= sizeof(cvar%ct2%d)) error stop\n+if (n*3*2 /= sizeof(cvar%ct2a(5,4,2)%d)) error stop\n+if (n*3*2 /= sizeof(avara(1)%ct2%d)) error stop\n+if (n*3*2 /= sizeof(avara(1)%ct2a(5,4,2)%d)) error stop\n+if (n*3*2 /= sizeof(cvara(1)%ct2%d)) error stop\n+if (n*3*2 /= sizeof(cvara(1)%ct2a(5,4,2)%d)) error stop\n+\n+deallocate (var%ct2, var%ct2a)\n+deallocate (avar%ct2, avar%ct2a)\n+deallocate (cvar%ct2, cvar%ct2a)\n+deallocate (cx, cxa)\n+\n+deallocate (avar, avara)\n+deallocate (cvar, cvara)\n+\n+contains\n+  integer(c_size_t) function sz_ar (a, b, c, d) result(res)\n+    type(*) :: a(..), c(..)\n+    class(*) :: b(..), d(..)\n+    optional :: c, d\n+    res = sizeof(a)\n+    if (sizeof(b) /= res) error stop\n+    if (sizeof(c) /= res) error stop\n+    if (sizeof(d) /= res) error stop\n+  end\n+  integer(c_size_t) function sz_ar_a (a, b) result(res)\n+    class(*), allocatable :: a(..), b(..)\n+    optional :: b\n+    res = sizeof(a)\n+    if (sizeof(b) /= res) error stop\n+  end\n+  integer(c_size_t) function sz_s (a, b) result(res)\n+    class(*) :: a, b\n+    optional :: b\n+    res = sizeof(a)\n+    if (sizeof(b) /= res) error stop\n+  end\n+  integer(c_size_t) function sz_s_a (a, b) result(res)\n+    class(*), allocatable :: a, b\n+    optional :: b\n+    res = sizeof(a)\n+    if (sizeof(b) /= res) error stop\n+  end\n+  integer(c_size_t) function sz_r1 (a, b, c, d) result(res)\n+    type(*) :: a(:), c(:)\n+    class(*) :: b(:), d(:)\n+    optional :: c, d\n+    res = sizeof(a)\n+    if (sizeof(b) /= res) error stop\n+    if (sizeof(c) /= res) error stop\n+    if (sizeof(d) /= res) error stop\n+  end\n+  integer(c_size_t) function sz_r1_a (a, b) result(res)\n+    class(*), allocatable :: a(:), b(:)\n+    optional :: b\n+    res = sizeof(a)\n+    if (sizeof(b) /= res) error stop\n+  end\n+  integer(c_size_t) function sz_r2 (a, b, c, d) result(res)\n+    type(*) :: a(:,:), c(:,:)\n+    class(*) :: b(:,:), d(:,:)\n+    optional :: c, d\n+    res = sizeof(a)\n+    if (sizeof(b) /= res) error stop\n+    if (sizeof(c) /= res) error stop\n+    if (sizeof(d) /= res) error stop\n+  end\n+  integer(c_size_t) function sz_r2_a (a, b) result(res)\n+    class(*), allocatable :: a(:,:), b(:,:)\n+    optional :: b\n+    res = sizeof(a)\n+    if (sizeof(b) /= res) error stop\n+  end\n+  integer(c_size_t) function sz_r3 (a, b, c, d) result(res)\n+    type(*) :: a(:,:,:), c(:,:,:)\n+    class(*) :: b(:,:,:), d(:,:,:)\n+    optional :: c, d\n+    res = sizeof(a)\n+    if (sizeof(b) /= res) error stop\n+    if (sizeof(c) /= res) error stop\n+    if (sizeof(d) /= res) error stop\n+  end\n+  integer(c_size_t) function sz_r3_a (a, b) result(res)\n+    class(*), allocatable :: a(:,:,:), b(:,:,:)\n+    optional :: b\n+    res = sizeof(a)\n+    if (sizeof(b) /= res) error stop\n+  end\n+  integer(c_size_t) function sz_t (a, b, c, d) result(res)\n+    type(t) :: a(..), c(..)\n+    class(t) :: b(..), d(..)\n+    optional :: c, d\n+\n+    res = sizeof(b)\n+    if (sizeof(d) /= sizeof(b)) error stop\n+    if (sizeof(a) /= sizeof(c)) error stop\n+    if (sizeof(a) /= res) error stop\n+  end\n+  integer(c_size_t) function sz_t_a (a, b) result(res)\n+    class(t), allocatable :: a(..), b(..)\n+    optional :: b\n+\n+    res = sizeof(b)\n+    if (sizeof(b) /= sizeof(a)) error stop\n+  end\n+  integer(c_size_t) function sz_t_at (a, b) result(res)\n+    type(t), allocatable :: a(..), b(..)\n+    optional :: b\n+\n+    res = sizeof(b)\n+    if (sizeof(b) /= sizeof(a)) error stop\n+  end\n+  integer(c_size_t) function sz_t2 (a, b, c, d, extends) result(res)\n+    type(t2) :: a(..), c(..)\n+    class(t2) :: b(..), d(..)\n+    optional :: c, d\n+    logical, value :: extends\n+\n+    res = sizeof(b)\n+    if (sizeof(d) /= sizeof(b)) error stop\n+    if (sizeof(a) /= sizeof(c)) error stop\n+    if (.not.extends) then\n+      if (sizeof(a) /= res) error stop\n+    else\n+      ! Here, extension has extra elements\n+      if (sizeof(a) >= res) error stop\n+    end if\n+  end\n+  integer(c_size_t) function sz_t2_a (a, b) result(res)\n+    class(t2), allocatable :: a(..), b(..)\n+    optional :: b\n+\n+    res = sizeof(b)\n+    if (sizeof(b) /= sizeof(a)) error stop\n+  end\n+  integer(c_size_t) function sz_t2_at (a, b) result(res)\n+    type(t2), allocatable :: a(..), b(..)\n+    optional :: b\n+\n+    res = sizeof(b)\n+    if (sizeof(b) /= sizeof(a)) error stop\n+  end\n+  integer(c_size_t) function sz_t3 (a, b, c, d) result(res)\n+    type(t3) :: a(..), c(..)\n+    class(t3) :: b(..), d(..)\n+    optional :: c, d\n+    res = sizeof(b)\n+    if (sizeof(d) /= sizeof(b)) error stop\n+    if (sizeof(a) /= sizeof(c)) error stop\n+    if (sizeof(a) /= res) error stop\n+  end\n+  integer(c_size_t) function sz_t3_a (a, b) result(res)\n+    class(t3), allocatable :: a(..), b(..)\n+    optional :: b\n+    res = sizeof(b)\n+    if (sizeof(a) /= sizeof(b)) error stop\n+  end\n+  integer(c_size_t) function sz_t3_at (a, b) result(res)\n+    type(t3), allocatable :: a(..), b(..)\n+    optional :: b\n+    res = sizeof(b)\n+    if (sizeof(a) /= sizeof(b)) error stop\n+  end\n+end"}]}