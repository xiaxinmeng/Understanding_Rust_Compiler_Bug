{"sha": "ad9fc55abd20a1501ab649693818a93b1538f375", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ5ZmM1NWFiZDIwYTE1MDFhYjY0OTY5MzgxOGE5M2IxNTM4ZjM3NQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-05-08T12:50:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-05-08T12:50:18Z"}, "message": "fold-const.c (fold_binary_loc): Fold (X * CST1) & CST2 to zero or to (X * CST1) & CST2' when...\n\n2012-05-08  Richard Guenther  <rguenther@suse.de>\n\n\t* fold-const.c (fold_binary_loc): Fold (X * CST1) & CST2\n\tto zero or to (X * CST1) & CST2' when CST1 has trailing zeros.\n\n\t* gcc.dg/fold-bitand-4.c: New testcase.\n\nFrom-SVN: r187280", "tree": {"sha": "1fdd185372150a013ed29ccd9e618fe1a9495380", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fdd185372150a013ed29ccd9e618fe1a9495380"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad9fc55abd20a1501ab649693818a93b1538f375", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad9fc55abd20a1501ab649693818a93b1538f375", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad9fc55abd20a1501ab649693818a93b1538f375", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad9fc55abd20a1501ab649693818a93b1538f375/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "04d170d214ae0a801ccfc4f66bf11531d19e75a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d170d214ae0a801ccfc4f66bf11531d19e75a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04d170d214ae0a801ccfc4f66bf11531d19e75a8"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "b71e988e1003a5681e8e2c17f59d774f78db2a98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9fc55abd20a1501ab649693818a93b1538f375/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9fc55abd20a1501ab649693818a93b1538f375/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad9fc55abd20a1501ab649693818a93b1538f375", "patch": "@@ -1,3 +1,8 @@\n+2012-05-08  Richard Guenther  <rguenther@suse.de>\n+\n+\t* fold-const.c (fold_binary_loc): Fold (X * CST1) & CST2\n+\tto zero or to (X * CST1) & CST2' when CST1 has trailing zeros.\n+\n 2012-05-08  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* Makefile.in (TEXI_GCC_FILES): Add avr-mmcu.texi."}, {"sha": "5bb75d490d9845e172c5c28a70d18c8fdf446817", "filename": "gcc/fold-const.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9fc55abd20a1501ab649693818a93b1538f375/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9fc55abd20a1501ab649693818a93b1538f375/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ad9fc55abd20a1501ab649693818a93b1538f375", "patch": "@@ -11449,6 +11449,30 @@ fold_binary_loc (location_t loc,\n \t    return fold_convert_loc (loc, type, arg0);\n \t}\n \n+      /* Fold (X * CST1) & CST2 to zero if we can, or drop known zero\n+         bits from CST2.  */\n+      if (TREE_CODE (arg1) == INTEGER_CST\n+\t  && TREE_CODE (arg0) == MULT_EXPR\n+\t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n+\t{\n+\t  int arg1tz\n+\t    = double_int_ctz (tree_to_double_int (TREE_OPERAND (arg0, 1)));\n+\t  if (arg1tz > 0)\n+\t    {\n+\t      double_int arg1mask, masked;\n+\t      arg1mask = double_int_not (double_int_mask (arg1tz));\n+\t      arg1mask = double_int_ext (arg1mask, TYPE_PRECISION (type),\n+\t\t\t\t\t TYPE_UNSIGNED (type));\n+\t      masked = double_int_and (arg1mask, tree_to_double_int (arg1));\n+\t      if (double_int_zero_p (masked))\n+\t\treturn omit_two_operands_loc (loc, type, build_zero_cst (type),\n+\t\t\t\t\t      arg0, arg1);\n+\t      else if (!double_int_equal_p (masked, tree_to_double_int (arg1)))\n+\t\treturn fold_build2_loc (loc, code, type, op0,\n+\t\t\t\t\tdouble_int_to_tree (type, masked));\n+\t    }\n+\t}\n+\n       /* For constants M and N, if M == (1LL << cst) - 1 && (N & M) == M,\n \t ((A & N) + B) & M -> (A + B) & M\n \t Similarly if (N & M) == 0,"}, {"sha": "ca4bcf89c6e4ffacac5b35eb2ebb6689f959aa7c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9fc55abd20a1501ab649693818a93b1538f375/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9fc55abd20a1501ab649693818a93b1538f375/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad9fc55abd20a1501ab649693818a93b1538f375", "patch": "@@ -1,3 +1,7 @@\n+2012-05-08  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/fold-bitand-4.c: New testcase.\n+\n 2012-05-08  Dehao Chen  <dehao@google.com>\n \n \t* gcc.dg/predict-1.c: Check if LOOP_IV_COMPARE static predict"}, {"sha": "dba83615dfe73e8cc3d6cb78e6e1cade02bf81d8", "filename": "gcc/testsuite/gcc.dg/fold-bitand-4.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad9fc55abd20a1501ab649693818a93b1538f375/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bitand-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad9fc55abd20a1501ab649693818a93b1538f375/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bitand-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bitand-4.c?ref=ad9fc55abd20a1501ab649693818a93b1538f375", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-original\" } */\n+\n+int foo (int i)\n+{\n+  return (i * 8) & 5;\n+}\n+\n+unsigned bar (unsigned i)\n+{\n+  return (i * 6) & 5;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\\\\\&\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\\\& 4;\" 1 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */"}]}