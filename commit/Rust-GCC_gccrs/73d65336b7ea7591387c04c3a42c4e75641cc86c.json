{"sha": "73d65336b7ea7591387c04c3a42c4e75641cc86c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNkNjUzMzZiN2VhNzU5MTM4N2MwNGMzYTQyYzRlNzU2NDFjYzg2Yw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@cygnus.co.uk", "date": "1999-11-19T11:36:25Z"}, "committer": {"name": "Bernd Schmidt", "email": "crux@gcc.gnu.org", "date": "1999-11-19T11:36:25Z"}, "message": "addr_affects_sp_p now unconditional\n\nFrom-SVN: r30586", "tree": {"sha": "222549fdc1f1ee5bfaed9e88103cd3f015bdc6ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/222549fdc1f1ee5bfaed9e88103cd3f015bdc6ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73d65336b7ea7591387c04c3a42c4e75641cc86c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d65336b7ea7591387c04c3a42c4e75641cc86c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73d65336b7ea7591387c04c3a42c4e75641cc86c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d65336b7ea7591387c04c3a42c4e75641cc86c/comments", "author": null, "committer": null, "parents": [{"sha": "96e7ae40d8b639b1f257162a414c729f75e9c035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e7ae40d8b639b1f257162a414c729f75e9c035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96e7ae40d8b639b1f257162a414c729f75e9c035"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "a8aa1d7d6f486f27433f71b85561a128173572ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d65336b7ea7591387c04c3a42c4e75641cc86c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d65336b7ea7591387c04c3a42c4e75641cc86c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73d65336b7ea7591387c04c3a42c4e75641cc86c", "patch": "@@ -1,3 +1,9 @@\n+1999-11-19  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\t* cse.c (addr_affects_sp): No longer conditional on AUTO_INC_DEC.\n+\t(invalidate_skipped_set): Call it unconditionally.\n+\t(cse_set_around_loop): Likewise.\n+\n Fri Nov 18 13:39:22 CET 1999  Jam Hubicka  <hubicka@freesoft.cz>\n \t* i386.h (struct_processor_costs): New fileds int_load, int_store, fp_move,\n \tfp_load and fp_store"}, {"sha": "6962c0f3f100942ee564d169d12c33c170456256", "filename": "gcc/cse.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d65336b7ea7591387c04c3a42c4e75641cc86c/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d65336b7ea7591387c04c3a42c4e75641cc86c/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=73d65336b7ea7591387c04c3a42c4e75641cc86c", "patch": "@@ -680,9 +680,7 @@ static void record_jump_equiv\tPROTO((rtx, int));\n static void record_jump_cond\tPROTO((enum rtx_code, enum machine_mode,\n \t\t\t\t       rtx, rtx, int));\n static void cse_insn\t\tPROTO((rtx, rtx));\n-#ifdef AUTO_INC_DEC\n static int addr_affects_sp_p\tPROTO((rtx));\n-#endif\n static void invalidate_from_clobbers PROTO((rtx));\n static rtx cse_process_notes\tPROTO((rtx, rtx));\n static void cse_around_loop\tPROTO((rtx));\n@@ -5924,8 +5922,6 @@ invalidate_memory ()\n       }\n }\n \n-#ifdef AUTO_INC_DEC\n-\n /* If ADDR is an address that implicitly affects the stack pointer, return\n    1 and update the register tables to show the effect.  Else, return 0.  */\n \n@@ -5950,7 +5946,6 @@ addr_affects_sp_p (addr)\n \n   return 0;\n }\n-#endif\n \n /* Perform invalidation on the basis of everything about an insn\n    except for invalidating the actual places that are SET in it.\n@@ -6175,9 +6170,7 @@ invalidate_skipped_set (dest, set, data)\n   enum rtx_code code = GET_CODE (dest);\n \n   if (code == MEM\n-#ifdef AUTO_INC_DEC\n       && ! addr_affects_sp_p (dest)\t/* If this is not a stack push ... */\n-#endif\n       /* There are times when an address can appear varying and be a PLUS\n \t during this scan when it would be a fixed address were we to know\n \t the proper equivalences.  So invalidate all memory if there is\n@@ -6350,10 +6343,8 @@ cse_set_around_loop (x, insn, loop_start)\n \t    }\n     }\n \n-#ifdef AUTO_INC_DEC\n   /* Deal with the destination of X affecting the stack pointer.  */\n   addr_affects_sp_p (SET_DEST (x));\n-#endif\n \n   /* See comment on similar code in cse_insn for explanation of these\n      tests.  */"}]}