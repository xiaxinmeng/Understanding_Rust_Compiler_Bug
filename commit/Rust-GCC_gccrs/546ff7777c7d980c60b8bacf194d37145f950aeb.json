{"sha": "546ff7777c7d980c60b8bacf194d37145f950aeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ2ZmY3Nzc3YzdkOTgwYzYwYjhiYWNmMTk0ZDM3MTQ1Zjk1MGFlYg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2003-02-10T06:16:53Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2003-02-10T06:16:53Z"}, "message": "calls.c (try_to_integrate): Tidy stack_usage_map access.\n\n\t* calls.c (try_to_integrate): Tidy stack_usage_map access.\n\t(emit_library_call_value_1): Likewise.\tFormatting.\n\t(store_one_arg): Likewise.\n\nFrom-SVN: r62622", "tree": {"sha": "bfb3ef814276bfc2fba2a12c40942b1b606a89ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfb3ef814276bfc2fba2a12c40942b1b606a89ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/546ff7777c7d980c60b8bacf194d37145f950aeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/546ff7777c7d980c60b8bacf194d37145f950aeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/546ff7777c7d980c60b8bacf194d37145f950aeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/546ff7777c7d980c60b8bacf194d37145f950aeb/comments", "author": null, "committer": null, "parents": [{"sha": "626098f9b9c148257d077ce829f243045e345d3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/626098f9b9c148257d077ce829f243045e345d3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/626098f9b9c148257d077ce829f243045e345d3b"}], "stats": {"total": 56, "additions": 33, "deletions": 23}, "files": [{"sha": "8cdbe9217a7455de2f2158af2d126203916c586b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/546ff7777c7d980c60b8bacf194d37145f950aeb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/546ff7777c7d980c60b8bacf194d37145f950aeb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=546ff7777c7d980c60b8bacf194d37145f950aeb", "patch": "@@ -1,3 +1,9 @@\n+2003-02-10  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* calls.c (try_to_integrate): Tidy stack_usage_map access.\n+\t(emit_library_call_value_1): Likewise.\tFormatting.\n+\t(store_one_arg): Likewise.\n+\n 2003-02-09  Nick Clifton  <nickc@redhat.com>\n             Aldy Hernandez  <aldyh@redhat.com>\n "}, {"sha": "6bec3df19a0863095ff7bc8b467550302da1e171", "filename": "gcc/calls.c", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/546ff7777c7d980c60b8bacf194d37145f950aeb/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/546ff7777c7d980c60b8bacf194d37145f950aeb/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=546ff7777c7d980c60b8bacf194d37145f950aeb", "patch": "@@ -1834,9 +1834,11 @@ try_to_integrate (fndecl, actparms, target, ignore, type, structure_value_addr)\n \t     the stack before executing the inlined function if it\n \t     makes any calls.  */\n \n-\t  for (i = reg_parm_stack_space - 1; i >= 0; i--)\n-\t    if (i < highest_outgoing_arg_in_use && stack_usage_map[i] != 0)\n-\t      break;\n+\t  i = reg_parm_stack_space;\n+\t  if (i > highest_outgoing_arg_in_use)\n+\t    i = highest_outgoing_arg_in_use;\n+\t  while (--i >= 0 && stack_usage_map[i] == 0)\n+\t    ;\n \n \t  if (stack_arg_under_construction || i >= 0)\n \t    {\n@@ -3727,12 +3729,12 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n \t    {\n \t      tree type = (*lang_hooks.types.type_for_mode) (mode, 0);\n \n-\t      slot = gen_rtx_MEM (mode,\n-\t\t\t\t  expand_expr (build1 (ADDR_EXPR,\n-\t\t\t\t\t\t       build_pointer_type\n-\t\t\t\t\t\t       (type),\n-\t\t\t\t\t\t       make_tree (type, val)),\n-\t\t\t\t\t       NULL_RTX, VOIDmode, 0));\n+\t      slot\n+\t\t= gen_rtx_MEM (mode,\n+\t\t\t       expand_expr (build1 (ADDR_EXPR,\n+\t\t\t\t\t\t    build_pointer_type (type),\n+\t\t\t\t\t\t    make_tree (type, val)),\n+\t\t\t\t\t    NULL_RTX, VOIDmode, 0));\n \t    }\n \n \t  call_fusage = gen_rtx_EXPR_LIST (VOIDmode,\n@@ -3923,14 +3925,15 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n \t      upper_bound = lower_bound + argvec[argnum].size.constant;\n #endif\n \n-\t      for (i = lower_bound; i < upper_bound; i++)\n-\t\tif (stack_usage_map[i]\n-\t\t    /* Don't store things in the fixed argument area at this\n-\t\t       point; it has already been saved.  */\n-\t\t    && i > reg_parm_stack_space)\n-\t\t  break;\n+\t      i = lower_bound;\n+\t      /* Don't worry about things in the fixed argument area;\n+\t\t it has already been saved.  */\n+\t      if (i < reg_parm_stack_space)\n+\t\ti = reg_parm_stack_space;\n+\t      while (i < upper_bound && stack_usage_map[i] == 0)\n+\t\ti++;\n \n-\t      if (i != upper_bound)\n+\t      if (i < upper_bound)\n \t\t{\n \t\t  /* We need to make a save area.  See what mode we can make\n \t\t     it.  */\n@@ -4301,14 +4304,15 @@ store_one_arg (arg, argblock, flags, variable_size, reg_parm_stack_space)\n \t  upper_bound = lower_bound + arg->size.constant;\n #endif\n \n-\t  for (i = lower_bound; i < upper_bound; i++)\n-\t    if (stack_usage_map[i]\n-\t\t/* Don't store things in the fixed argument area at this point;\n-\t\t   it has already been saved.  */\n-\t\t&& i > reg_parm_stack_space)\n-\t      break;\n+\t  i = lower_bound;\n+\t  /* Don't worry about things in the fixed argument area;\n+\t     it has already been saved.  */\n+\t  if (i < reg_parm_stack_space)\n+\t    i = reg_parm_stack_space;\n+\t  while (i < upper_bound && stack_usage_map[i] == 0)\n+\t    i++;\n \n-\t  if (i != upper_bound)\n+\t  if (i < upper_bound)\n \t    {\n \t      /* We need to make a save area.  See what mode we can make it.  */\n \t      enum machine_mode save_mode"}]}