{"sha": "0646d8a3789b8fdc74c0172cf0738393d96c2b45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY0NmQ4YTM3ODliOGZkYzc0YzAxNzJjZjA3MzgzOTNkOTZjMmI0NQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-08-23T16:16:41Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-08-23T16:16:41Z"}, "message": "system_error: New file.\n\n2007-08-23  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/system_error: New file.\n\t* src/system_error.cc: New file.\n\t* src/Makefile.am (sources): Add.\n\t* src/Makefile.in: Regenerate.\t\n\t* include/Makefile.am (std_headers): Add system_error.\n\t* include/Makefile.in: Regenerate.\n\t* acinclude.m4 (GLIBCXX_CHECK_SYSTEM_ERROR): New.\n\t* configure.ac: Call it.\n\t* config.h.in: Regenerate.\n\t* include/bits/functional_hash.h: Add hash<error_code>.\n \t* include/std/ostream: Add inserters for error_code.\n\t\n\t* docs/doxygen/user.cfg.in: Add system_error.\n\n\t* config/abi/pre/gnu.ver(GLIBCXX_3.4.10): Add new symbols.\n\n\t* testsuite/19_diagnostics/error_code: New.\n\t* testsuite/19_diagnostics/error_code/cons: Same.\n\t* testsuite/19_diagnostics/error_code/cons/1.cc: Same.\n\t* testsuite/19_diagnostics/error_code/operators: Same.\n\t* testsuite/19_diagnostics/error_code/operators/bool.cc: Same.\n\t* testsuite/19_diagnostics/error_code/operators/bool_neg.cc: Same.\n\t* testsuite/19_diagnostics/error_code/operators/equal.cc: Same.\n\t* testsuite/19_diagnostics/error_code/operators/not_equal.cc: Same.\n\t* testsuite/19_diagnostics/error_category: Same.\n\t* testsuite/19_diagnostics/error_category/cons: Same.\n\t* testsuite/19_diagnostics/error_category/cons/copy_neg.cc: Same.\n\t* testsuite/19_diagnostics/error_category/cons/default.cc: Same.\n\t* testsuite/19_diagnostics/error_category/operators: Same.\n\t* testsuite/19_diagnostics/error_category/operators/equal.cc: Same.\n\t* testsuite/19_diagnostics/error_category/operators/not_equal.cc: Same.\n\t* testsuite/19_diagnostics/headers/system_error: Same.\n\t* testsuite/19_diagnostics/headers/system_error/\n\ttypes_std_c++0x.cc: Same.\n\t* testsuite/19_diagnostics/headers/system_error/std_c++0x_neg.cc: Same.\n\t* testsuite/19_diagnostics/system_error: Same.\n\t* testsuite/19_diagnostics/system_error/\n\tcons_virtual_derivation.cc: Same.\n\t* testsuite/19_diagnostics/system_error/cons-1.cc: Same.\n\t* testsuite/19_diagnostics/system_error/what-1.cc: Same.\n\t* testsuite/19_diagnostics/system_error/what-2.cc: Same.\n\t* testsuite/19_diagnostics/system_error/what-big.cc: Same.\n\t* testsuite/19_diagnostics/system_error/what-3.cc: Same.\n\t* testsuite/19_diagnostics/system_error/what-4.cc: Same.\n\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n\terror_code.cc: Same.\n\t* testsuite/27_io/basic_ostream/inserters_other/char/\n\terror_code.cc: Same.\n\t* testsuite/tr1/6_containers/hash/operators: New.\n\t* testsuite/tr1/6_containers/hash/operators/size_t.cc: Same.\n\t\n\t* testsuite/23_containers/hash: Move...\n\t* testsuite/20_util/hash: ... here.\n\t* testsuite/20_util/hash/operators: New.\n\t* testsuite/20_util/hash/operators/size_t.cc: New.\n\n\t* testsuite/20_util/function_objects/bad_function_call: Move...\n\t* testsuite/20_util/bad_function_call: ...here.\n\nFrom-SVN: r127744", "tree": {"sha": "052c96d0ba7b75a0ffafb1f29e3a27f720931357", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/052c96d0ba7b75a0ffafb1f29e3a27f720931357"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0646d8a3789b8fdc74c0172cf0738393d96c2b45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0646d8a3789b8fdc74c0172cf0738393d96c2b45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0646d8a3789b8fdc74c0172cf0738393d96c2b45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0646d8a3789b8fdc74c0172cf0738393d96c2b45/comments", "author": null, "committer": null, "parents": [{"sha": "586de2189808556ae88977242de6ef5cf6ea39fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/586de2189808556ae88977242de6ef5cf6ea39fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/586de2189808556ae88977242de6ef5cf6ea39fd"}], "stats": {"total": 2054, "additions": 2022, "deletions": 32}, "files": [{"sha": "148f2edd1d376fe046b7193e05c7197036b5786b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -1,3 +1,64 @@\n+2007-08-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/system_error: New file.\n+\t* src/system_error.cc: New file.\n+\t* src/Makefile.am (sources): Add.\n+\t* src/Makefile.in: Regenerate.\t\n+\t* include/Makefile.am (std_headers): Add system_error.\n+\t* include/Makefile.in: Regenerate.\n+\t* acinclude.m4 (GLIBCXX_CHECK_SYSTEM_ERROR): New.\n+\t* configure.ac: Call it.\n+\t* config.h.in: Regenerate.\n+\t* include/bits/functional_hash.h: Add hash<error_code>.\n+ \t* include/std/ostream: Add inserters for error_code.\n+\t\n+\t* docs/doxygen/user.cfg.in: Add system_error.\n+\n+\t* config/abi/pre/gnu.ver(GLIBCXX_3.4.10): Add new symbols.\n+\n+\t* testsuite/19_diagnostics/error_code: New.\n+\t* testsuite/19_diagnostics/error_code/cons: Same.\n+\t* testsuite/19_diagnostics/error_code/cons/1.cc: Same.\n+\t* testsuite/19_diagnostics/error_code/operators: Same.\n+\t* testsuite/19_diagnostics/error_code/operators/bool.cc: Same.\n+\t* testsuite/19_diagnostics/error_code/operators/bool_neg.cc: Same.\n+\t* testsuite/19_diagnostics/error_code/operators/equal.cc: Same.\n+\t* testsuite/19_diagnostics/error_code/operators/not_equal.cc: Same.\n+\t* testsuite/19_diagnostics/error_category: Same.\n+\t* testsuite/19_diagnostics/error_category/cons: Same.\n+\t* testsuite/19_diagnostics/error_category/cons/copy_neg.cc: Same.\n+\t* testsuite/19_diagnostics/error_category/cons/default.cc: Same.\n+\t* testsuite/19_diagnostics/error_category/operators: Same.\n+\t* testsuite/19_diagnostics/error_category/operators/equal.cc: Same.\n+\t* testsuite/19_diagnostics/error_category/operators/not_equal.cc: Same.\n+\t* testsuite/19_diagnostics/headers/system_error: Same.\n+\t* testsuite/19_diagnostics/headers/system_error/\n+\ttypes_std_c++0x.cc: Same.\n+\t* testsuite/19_diagnostics/headers/system_error/std_c++0x_neg.cc: Same.\n+\t* testsuite/19_diagnostics/system_error: Same.\n+\t* testsuite/19_diagnostics/system_error/\n+\tcons_virtual_derivation.cc: Same.\n+\t* testsuite/19_diagnostics/system_error/cons-1.cc: Same.\n+\t* testsuite/19_diagnostics/system_error/what-1.cc: Same.\n+\t* testsuite/19_diagnostics/system_error/what-2.cc: Same.\n+\t* testsuite/19_diagnostics/system_error/what-big.cc: Same.\n+\t* testsuite/19_diagnostics/system_error/what-3.cc: Same.\n+\t* testsuite/19_diagnostics/system_error/what-4.cc: Same.\n+\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n+\terror_code.cc: Same.\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/\n+\terror_code.cc: Same.\n+\t* testsuite/tr1/6_containers/hash/operators: New.\n+\t* testsuite/tr1/6_containers/hash/operators/size_t.cc: Same.\n+\t\n+\t* testsuite/23_containers/hash: Move...\n+\t* testsuite/20_util/hash: ... here.\n+\t* testsuite/20_util/hash/operators: New.\n+\t* testsuite/20_util/hash/operators/size_t.cc: New.\n+\n+\t* testsuite/20_util/function_objects/bad_function_call: Move...\n+\t* testsuite/20_util/bad_function_call: ...here.\n+\t\n 2007-08-21  Benjamin Kosnik  <bkoz@montsouris.artheist.org>\n \n \t* include/Makefile.am (install-data-local): Remove pch-install rules."}, {"sha": "012d363f1122a488daa43b9b08d7767925efefd5", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -1257,6 +1257,42 @@ AC_DEFUN([GLIBCXX_CHECK_RANDOM_TR1], [\n \n ])\n \n+dnl\n+dnl Check whether macros, etc are present for <system_error>\n+dnl\n+AC_DEFUN([GLIBCXX_CHECK_SYSTEM_ERROR], [\n+\n+  AC_MSG_CHECKING([for EOWNERDEAD])\n+  AC_CACHE_VAL(ac_system_error1, [\n+  AC_TRY_COMPILE([#include <errno.h>], [ int i = EOWNERDEAD; ],\n+             [ac_system_error1=yes], [ac_system_error1=no])\n+  ])\n+  AC_MSG_RESULT($ac_system_error1)\n+  if test x\"$ac_system_error1\" = x\"yes\"; then\n+    AC_DEFINE(HAVE_EOWNERDEAD, 1, [Define if EOWNERDEAD exists.])\n+  fi\n+\n+  AC_MSG_CHECKING([for ENOTRECOVERABLE])\n+  AC_CACHE_VAL(ac_system_error2, [\n+  AC_TRY_COMPILE([#include <errno.h>], [ int i = ENOTRECOVERABLE; ],\n+             [ac_system_error2=yes], [ac_system_error2=no])\n+  ])\n+  AC_MSG_RESULT($ac_system_error2)\n+  if test x\"$ac_system_error2\" = x\"yes\"; then\n+    AC_DEFINE(HAVE_ENOTRECOVERABLE, 1, [Define if ENOTRECOVERABLE exists.])\n+  fi\n+\n+  AC_MSG_CHECKING([for sys_nerr])\n+  AC_CACHE_VAL(ac_system_error3, [\n+  AC_TRY_COMPILE([#include <errno.h> ], [ int i = sys_nerr; ],\n+             [ac_system_error3=yes], [ac_system_error3=no])\n+  ])\n+  AC_MSG_RESULT($ac_system_error3)\n+  if test x\"$ac_system_error3\" = x\"yes\"; then\n+    AC_DEFINE(HAVE_SYS_NERR, 1, [Define if sys_nerr exists.])\n+  fi\n+])\n+\n dnl\n dnl Check for what type of C headers to use.\n dnl"}, {"sha": "0efa0915a5664aa68d23c69441ef48683d63c3df", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -63,6 +63,12 @@\n /* Define to 1 if you have the <endian.h> header file. */\n #undef HAVE_ENDIAN_H\n \n+/* Define if ENOTRECOVERABLE exists. */\n+#undef HAVE_ENOTRECOVERABLE\n+\n+/* Define if EOWNERDEAD exists. */\n+#undef HAVE_EOWNERDEAD\n+\n /* Define to 1 if you have the `expf' function. */\n #undef HAVE_EXPF\n \n@@ -331,6 +337,9 @@\n /* Define to 1 if you have the <sys/machine.h> header file. */\n #undef HAVE_SYS_MACHINE_H\n \n+/* Define if sys_nerr exists. */\n+#undef HAVE_SYS_NERR\n+\n /* Define to 1 if you have the <sys/param.h> header file. */\n #undef HAVE_SYS_PARAM_H\n "}, {"sha": "059d20a19e99348309741abfdbf543952b18eeef", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -447,7 +447,14 @@ GLIBCXX_3.4 {\n     _ZTVNSt6locale5facetE;\n     _ZTVS[a-z];\n     _ZTVSt[0-9][A-Za-z]*;\n-    _ZTVSt[0-9][0-9][A-Za-z]*;\n+#   _ZTVSt[0-9][0-9][A-Za-z]*;\n+    _ZTVSt[0-9][0-9][A-Z]*;\n+    _ZTVSt[0-9][0-9][a-d]*;\n+    _ZTVSt[0-9][0-9][f-r]*;\n+    _ZTVSt[0-9][0-9][t-z]*;\n+    _ZTVSt[0-9][0-9]e[^r]*;\n+    _ZTVSt[0-9][0-9]s[^y]*;\n+\n     _ZTVSt11__timepunctI[cw]E;\n     _ZTVSt23__codecvt_abstract_baseI[cw]c11__mbstate_tE;\n     _ZTVSt21__ctype_abstract_baseI[cw]E;\n@@ -459,14 +466,23 @@ GLIBCXX_3.4 {\n \n     # typeinfo structure\n     _ZTIS[a-z];\n-    _ZTINSt8ios_base7failureE;\n-    _ZTINSt6locale5facetE;\n     _ZTISt[0-9][A-Za-z]*;\n-    _ZTISt[0-9][0-9][A-Za-z]*;\n+#   _ZTISt[0-9][0-9][A-Za-z]*;\n+    _ZTISt[0-9][0-9][A-Z]*;\n+    _ZTISt[0-9][0-9][a-d]*;\n+    _ZTISt[0-9][0-9][f-r]*;\n+    _ZTISt[0-9][0-9][t-z]*;\n+    _ZTISt[0-9][0-9]e[^r]*;\n+    _ZTISt[0-9][0-9]s[^y]*;\n     _ZTISt11__timepunctI[cw]E;\n     _ZTISt10__num_base;\n     _ZTISt21__ctype_abstract_baseI[cw]E;\n     _ZTISt23__codecvt_abstract_baseI[cw]c11__mbstate_tE;\n+#    _ZTISt16__numpunct_cacheI[cw]E;\n+#    _ZTISt17__timepunct_cacheI[cw]E;\n+#    _ZTISt18__moneypunct_cacheI[cw]Lb?EE;\n+    _ZTINSt8ios_base7failureE;\n+    _ZTINSt6locale5facetE;\n     _ZTIN9__gnu_cxx18stdio_sync_filebufI[cw]St11char_traitsI[cw]EEE;\n     _ZTIN9__gnu_cxx13stdio_filebufI[cw]St11char_traitsI[cw]EEE;\n \n@@ -475,7 +491,14 @@ GLIBCXX_3.4 {\n     _ZTSNSt6locale5facetE;\n     _ZTSS[a-z];\n     _ZTSSt[0-9][A-Za-z]*;\n-    _ZTSSt[0-9][0-9][A-Za-z]*;\n+#    _ZTSSt[0-9][0-9][A-Za-z]*;\n+    _ZTSSt[0-9][0-9][A-Z]*;\n+    _ZTSSt[0-9][0-9][a-d]*;\n+    _ZTSSt[0-9][0-9][f-r]*;\n+    _ZTSSt[0-9][0-9][t-z]*;\n+    _ZTSSt[0-9][0-9]e[^r]*;\n+    _ZTSSt[0-9][0-9]s[^y]*;\n+\n     _ZTSSt11__timepunctI[cw]E;\n     _ZTSSt10__num_base;\n     _ZTSSt21__ctype_abstract_baseI[cw]E;\n@@ -719,6 +742,18 @@ GLIBCXX_3.4.10 {\n \n     _ZNK11__gnu_debug16_Error_formatter17_M_get_max_lengthEv;\n \n+    # system_error\n+    _ZSt15system_category;\n+\n+    _ZTISt14error_category;\n+    _ZTSSt14error_category;\n+    _ZTVSt14error_category;\n+\n+    _ZTSSt12system_error;\n+    _ZTISt12system_error;\n+    _ZTVSt12system_error;\n+    _ZNSt12system_errorD*Ev;\n+\n } GLIBCXX_3.4.9;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "a41f4f881a859749fae87a5dcd2e5835f3db3b68", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 199, "deletions": 3, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -13792,7 +13792,7 @@ _ACEOF\n \n \n \n-# Check for compiler support that doesn't require linking.\n+# Enable compiler support that doesn't require linking.\n \n   echo \"$as_me:$LINENO: checking for exception model to use\" >&5\n echo $ECHO_N \"checking for exception model to use... $ECHO_C\" >&6\n@@ -13956,7 +13956,7 @@ echo \"${ECHO_T}$enable_libstdcxx_pch\" >&6\n \n \n \n-# Enable all the variable C++ runtime options.\n+# Enable all the variable C++ runtime options that doesn't require linking.\n \n   echo \"$as_me:$LINENO: checking for underlying I/O to use\" >&5\n echo $ECHO_N \"checking for underlying I/O to use... $ECHO_C\" >&6\n@@ -16530,6 +16530,202 @@ _ACEOF\n   fi\n \n \n+# Checks for operating systems support that don't require linking.\n+\n+\n+  echo \"$as_me:$LINENO: checking for EOWNERDEAD\" >&5\n+echo $ECHO_N \"checking for EOWNERDEAD... $ECHO_C\" >&6\n+  if test \"${ac_system_error1+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <errno.h>\n+int\n+main ()\n+{\n+ int i = EOWNERDEAD;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_system_error1=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_system_error1=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+\n+  echo \"$as_me:$LINENO: result: $ac_system_error1\" >&5\n+echo \"${ECHO_T}$ac_system_error1\" >&6\n+  if test x\"$ac_system_error1\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_EOWNERDEAD 1\n+_ACEOF\n+\n+  fi\n+\n+  echo \"$as_me:$LINENO: checking for ENOTRECOVERABLE\" >&5\n+echo $ECHO_N \"checking for ENOTRECOVERABLE... $ECHO_C\" >&6\n+  if test \"${ac_system_error2+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <errno.h>\n+int\n+main ()\n+{\n+ int i = ENOTRECOVERABLE;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_system_error2=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_system_error2=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+\n+  echo \"$as_me:$LINENO: result: $ac_system_error2\" >&5\n+echo \"${ECHO_T}$ac_system_error2\" >&6\n+  if test x\"$ac_system_error2\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_ENOTRECOVERABLE 1\n+_ACEOF\n+\n+  fi\n+\n+  echo \"$as_me:$LINENO: checking for sys_nerr\" >&5\n+echo $ECHO_N \"checking for sys_nerr... $ECHO_C\" >&6\n+  if test \"${ac_system_error3+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <errno.h>\n+int\n+main ()\n+{\n+ int i = sys_nerr;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_system_error3=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_system_error3=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+\n+  echo \"$as_me:$LINENO: result: $ac_system_error3\" >&5\n+echo \"${ECHO_T}$ac_system_error3\" >&6\n+  if test x\"$ac_system_error3\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_SYS_NERR 1\n+_ACEOF\n+\n+  fi\n+\n+\n # No surprises, no surprises...\n \n   echo \"$as_me:$LINENO: checking for thread model used by GCC\" >&5\n@@ -16571,7 +16767,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n \n   # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 16574 \"configure\"\n+#line 16770 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int."}, {"sha": "4ad8d0ebfad2f480f624ae725d9f7c6367826de1", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -92,11 +92,11 @@ AC_SUBST(enable_static)\n ## than just ignoring the results.  Faster /and/ more correct, win win.\n GLIBCXX_ENABLE_HOSTED\n \n-# Check for compiler support that doesn't require linking.\n+# Enable compiler support that doesn't require linking.\n GLIBCXX_ENABLE_SJLJ_EXCEPTIONS\n GLIBCXX_ENABLE_PCH($is_hosted)\n \n-# Enable all the variable C++ runtime options.  \n+# Enable all the variable C++ runtime options that doesn't require linking.\n GLIBCXX_ENABLE_CSTDIO\n GLIBCXX_ENABLE_CLOCALE\n GLIBCXX_ENABLE_ALLOCATOR\n@@ -110,6 +110,9 @@ GLIBCXX_ENABLE_DEBUG([no])\n GLIBCXX_ENABLE_CXX_FLAGS\n GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING([no])\n \n+# Checks for operating systems support that don't require linking.\n+GLIBCXX_CHECK_SYSTEM_ERROR\n+\n # No surprises, no surprises...\n GLIBCXX_ENABLE_THREADS\n GLIBCXX_ENABLE_ATOMIC_BUILTINS"}, {"sha": "1484c78f68f88ef11ebfe8356e0adb6470ca1f25", "filename": "libstdc++-v3/docs/doxygen/user.cfg.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -532,6 +532,7 @@ INPUT                  = @srcdir@/docs/doxygen/doxygroups.cc \\\n                          include/stdexcept \\\n                          include/streambuf \\\n                          include/string \\\n+                         include/system_error \\\n                          include/tuple \\\n                          include/type_traits \\\n                          include/unordered_map \\"}, {"sha": "c51128bd9af4fae892e6386fcebc957c90fdbf05", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -58,6 +58,7 @@ std_headers = \\\n \t${std_srcdir}/stdexcept \\\n \t${std_srcdir}/streambuf \\\n \t${std_srcdir}/string \\\n+\t${std_srcdir}/system_error \\\n \t${std_srcdir}/tuple \\\n \t${std_srcdir}/type_traits \\\n \t${std_srcdir}/unordered_map \\"}, {"sha": "f6e69b0e85b017c7de6363412199a96e5693e4a9", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -303,6 +303,7 @@ std_headers = \\\n \t${std_srcdir}/stdexcept \\\n \t${std_srcdir}/streambuf \\\n \t${std_srcdir}/string \\\n+\t${std_srcdir}/system_error \\\n \t${std_srcdir}/tuple \\\n \t${std_srcdir}/type_traits \\\n \t${std_srcdir}/unordered_map \\"}, {"sha": "d5658fe4c50e56aa37ae25ff77957c9ec5e410f2", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -59,5 +59,21 @@\n #  undef _GLIBCXX_INCLUDE_AS_CXX0X\n #endif\n \n+#include <system_error>\n+\n+namespace std\n+{\n+  template<>\n+    struct hash<error_code> : public unary_function<error_code, size_t>\n+    {      \n+      size_t\n+      operator()(error_code __e) const\n+      { \n+\tconst char* __p = reinterpret_cast<const char*>(&__e);\n+\treturn _Fnv_hash<>::hash(__p, sizeof(__e));\n+      }\n+    };\n+}\n+\n #endif // _FUNCTIONAL_HASH_H\n "}, {"sha": "67dcc555cffbca256bf978e5d22d5c1b73b679ff", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -45,6 +45,10 @@\n #include <ios>\n #include <bits/ostream_insert.h>\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <system_error>\n+#endif\n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // [27.6.2.1] Template class basic_ostream\n@@ -531,6 +535,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     { return (__out << reinterpret_cast<const char*>(__s)); }\n   //@}\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _CharT, typename _Traits>\n+    inline basic_ostream<_CharT, _Traits>&\n+    operator<<(basic_ostream<_CharT, _Traits>& __out, const error_code& __e)\n+{ return (__out << __e.category().name().c_str() << ':' << __e.value()); }\n+#endif\n+\n   // [27.6.2.7] standard basic_ostream manipulators\n   /**\n    *  @brief  Write a newline and flush the stream."}, {"sha": "3f13622b485d284dc50df0e6e752483c2213af1c", "filename": "libstdc++-v3/include/std/system_error", "status": "added", "additions": 244, "deletions": 0, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,244 @@\n+// <system_error> -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/system_error\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_SYSTEM_ERROR\n+#define _GLIBCXX_SYSTEM_ERROR 1\n+\n+#pragma GCC system_header\n+\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+# include <c++0x_warning.h>\n+#endif\n+\n+#include <bits/c++config.h>\n+#include <cerrno>\n+#include <iosfwd>\n+#include <stdexcept>\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  class system_error;\n+  class error_code;\n+  class error_category;\n+\n+  extern const error_category& system_category;\n+\n+  enum posix_errno\n+    {\n+      address_family_not_supported = \t\tEAFNOSUPPORT,\n+      address_in_use = \t\t\t\tEADDRINUSE,\n+      address_not_available = \t\t\tEADDRNOTAVAIL,\n+      already_connected = \t\t\tEISCONN,\n+      argument_list_too_long = \t\t\tE2BIG,\n+      argument_out_of_domain = \t\t\tEDOM,\n+      bad_address = \t\t\t\tEFAULT,\n+      bad_file_descriptor = \t\t\tEBADF,\n+      bad_message = \t\t\t\tEBADMSG,\n+      broken_pipe = \t\t\t\tEPIPE,\n+      connection_aborted = \t\t\tECONNABORTED,\n+      connection_already_in_progress = \t\tEALREADY,\n+      connection_refused = \t\t\tECONNREFUSED,\n+      connection_reset = \t\t\tECONNRESET,\n+      cross_device_link = \t\t\tEXDEV,\n+      destination_address_required = \t\tEDESTADDRREQ,\n+      device_or_resource_busy = \t\tEBUSY,\n+      directory_not_empty = \t\t\tENOTEMPTY,\n+      executable_format_error = \t\tENOEXEC,\n+      file_exists = \t       \t\t\tEEXIST,\n+      file_too_large = \t\t\t\tEFBIG,\n+      filename_too_long = \t\t\tENAMETOOLONG,\n+      function_not_supported = \t\t\tENOSYS,\n+      host_unreachable = \t\t\tEHOSTUNREACH,\n+      identifier_removed = \t\t\tEIDRM,\n+      illegal_byte_sequence = \t\t\tEILSEQ,\n+      inappropriate_io_control_operation = \tENOTTY,\n+      interrupted = \t\t\t\tEINTR,\n+      invalid_argument = \t\t\tEINVAL,\n+      invalid_seek = \t\t\t\tESPIPE,\n+      io_error = \t\t\t\tEIO,\n+      is_a_directory = \t\t\t\tEISDIR,\n+      message_size = \t\t\t\tEMSGSIZE,\n+      network_down = \t\t\t\tENETDOWN,\n+      network_reset = \t\t\t\tENETRESET,\n+      network_unreachable = \t\t\tENETUNREACH,\n+      no_buffer_space = \t\t\tENOBUFS,\n+      no_child_process = \t\t\tECHILD,\n+      no_link = \t\t\t\tENOLINK,\n+      no_lock_available = \t\t\tENOLCK,\n+      no_message_available = \t\t\tENODATA, \n+      no_message = \t\t\t\tENOMSG, \n+      no_protocol_option = \t\t\tENOPROTOOPT,\n+      no_space_on_device = \t\t\tENOSPC,\n+      no_stream_resources = \t\t\tENOSR,\n+      no_such_device_or_address = \t\tENXIO,\n+      no_such_device = \t\t\t\tENODEV,\n+      no_such_file_or_directory = \t\tENOENT,\n+      no_such_process = \t\t\tESRCH,\n+      not_a_directory = \t\t\tENOTDIR,\n+      not_a_socket = \t\t\t\tENOTSOCK,\n+      not_a_stream = \t\t\t\tENOSTR,\n+      not_connected = \t\t\t\tENOTCONN,\n+      not_enough_memory = \t\t\tENOMEM,\n+      not_supported = \t\t\t\tENOTSUP,\n+      operation_canceled = \t\t\tECANCELED,\n+      operation_in_progress = \t\t\tEINPROGRESS,\n+      operation_not_permitted = \t\tEPERM,\n+      operation_not_supported = \t\tEOPNOTSUPP,\n+      operation_would_block = \t\t\tEWOULDBLOCK,\n+#ifdef _GLIBCXX_HAVE_EOWNERDEAD\n+      owner_dead = \t\t\t\tEOWNERDEAD,\n+#endif\n+      permission_denied = \t\t\tEACCES,\n+      protocol_error = \t\t\t\tEPROTO,\n+      protocol_not_supported = \t\t\tEPROTONOSUPPORT,\n+      read_only_file_system = \t\t\tEROFS,\n+      resource_deadlock_would_occur = \t\tEDEADLK,\n+      resource_unavailable_try_again = \t\tEAGAIN,\n+      result_out_of_range = \t\t\tERANGE,\n+#ifdef _GLIBCXX_HAVE_ENOTRECOVERABLE\n+      state_not_recoverable = \t\t\tENOTRECOVERABLE,\n+#endif\n+      stream_timeout = \t\t\t\tETIME,\n+      text_file_busy = \t\t\t\tETXTBSY,\n+      timed_out = \t\t\t\tETIMEDOUT,\n+      too_many_files_open_in_system = \t\tENFILE,\n+      too_many_files_open = \t\t\tEMFILE,\n+      too_many_links = \t\t\t\tEMLINK,\n+      too_many_synbolic_link_levels = \t\tELOOP,\n+      value_too_large = \t\t\tEOVERFLOW,\n+      wrong_protocol_type = \t\t\tEPROTOTYPE,\n+      no_posix_equivalent = 1L << 16\n+    };\n+\n+  struct error_category\n+  {\n+    error_category() { }\n+\n+    bool \n+    operator==(const error_category& __other) const\n+    { return this == &__other; }\n+\n+    bool \n+    operator!=(const error_category& __other) const\n+    { return this != &__other; }\n+\n+    virtual posix_errno \n+    posix(int __v) const = 0;\n+\n+    virtual const string& \n+    name() const = 0;\n+\n+  private:\n+    error_category(const error_category&);\n+\n+    error_category& \n+    operator=(const error_category&);\n+  };\n+\n+  struct error_code\n+  {\n+    error_code() throw()\n+    : _M_value(0), _M_cat(&system_category) { }\n+\n+    error_code(int __v, const error_category& __cat) throw()\n+    : _M_value(__v), _M_cat(&__cat) { }\n+\n+    error_code(posix_errno __v)\n+    : _M_value(__v), _M_cat(&system_category) { }\n+\n+    void \n+    assign(int __v, const error_category& __cat) throw()\n+    {\n+      _M_value = __v;\n+      _M_cat = &__cat; \n+    }\n+\n+    void \n+    clear() throw()\n+    { \n+      _M_value = 0;\n+      _M_cat = &system_category;\n+   } \n+\n+    int\n+    value() const throw() { return _M_value; }\n+      \n+    const error_category&  \n+    category() const { return *_M_cat; }\n+\n+    posix_errno            \n+    posix() const throw() { return this->category().posix(_M_value); }\n+\n+    // Safe bool idiom.\n+    // explicit operator bool() const throw()\n+    // { return _M_value != 0; }\n+    typedef void (*__bool_type)();\n+\n+    static void __not_bool_type() { }\n+\n+    operator __bool_type() const throw()\n+    { return _M_value != 0 ? &__not_bool_type : false; }\n+\n+    bool operator==(const error_code& __other) const\n+    { return value() == __other.value() && category() == __other.category(); }\n+\n+    bool operator!=(const error_code& __other) const\n+    { return !(this == &__other); }\n+\n+  private:\n+    int            \t\t_M_value;\n+    const error_category* \t_M_cat;\n+  };\n+\n+  class system_error : public std::runtime_error\n+  {\n+  private:\n+    error_code \t_M_code;\n+\n+  public:\n+    system_error(const string& __what, error_code __ec = error_code())\n+    : runtime_error(__what), _M_code(__ec) { }\n+\n+    system_error(const string& __what, int __v, const error_category& __ecat)\n+    : runtime_error(__what), _M_code(error_code(__v, __ecat)) { }\n+\n+    virtual ~system_error() throw();\n+\n+    const error_code& \n+    code() const throw() { return _M_code; }\n+  };\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif \n+"}, {"sha": "cd2aad64b65f2dac944ee2a409bd0519f6ecef59", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -152,6 +152,7 @@ sources = \\\n \tlocalename.cc \\\n \tstdexcept.cc \\\n \tstrstream.cc \\\n+\tsystem_error.cc \\\n \ttree.cc \\\n \tallocator-inst.cc \\\n \tconcept-inst.cc \\\n@@ -204,6 +205,12 @@ concept-inst.lo: concept-inst.cc\n concept-inst.o: concept-inst.cc\n \t$(CXXCOMPILE) -D_GLIBCXX_CONCEPT_CHECKS -fimplicit-templates -c $<\n \n+# Use special rules for the C++0x sources so that the proper flags are passed.\n+system_error.lo: system_error.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+system_error.o: system_error.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n if GLIBCXX_LDBL_COMPAT\n # Use special rules for compatibility-ldbl.cc compilation, as we need to\n # pass -mlong-double-64."}, {"sha": "184b903b6e9090e8e67e57ba423cd58de813354e", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -72,12 +72,12 @@ am__libstdc___la_SOURCES_DIST = bitmap_allocator.cc pool_allocator.cc \\\n \tctype.cc debug.cc debug_list.cc functexcept.cc globals_io.cc \\\n \tios.cc ios_failure.cc ios_init.cc ios_locale.cc limits.cc \\\n \tlist.cc locale.cc locale_init.cc locale_facets.cc \\\n-\tlocalename.cc stdexcept.cc strstream.cc tree.cc \\\n-\tallocator-inst.cc concept-inst.cc fstream-inst.cc ext-inst.cc \\\n-\tios-inst.cc iostream-inst.cc istream-inst.cc istream.cc \\\n-\tlocale-inst.cc misc-inst.cc ostream-inst.cc sstream-inst.cc \\\n-\tstreambuf-inst.cc streambuf.cc string-inst.cc valarray-inst.cc \\\n-\twlocale-inst.cc wstring-inst.cc atomicity.cc \\\n+\tlocalename.cc stdexcept.cc strstream.cc system_error.cc \\\n+\ttree.cc allocator-inst.cc concept-inst.cc fstream-inst.cc \\\n+\text-inst.cc ios-inst.cc iostream-inst.cc istream-inst.cc \\\n+\tistream.cc locale-inst.cc misc-inst.cc ostream-inst.cc \\\n+\tsstream-inst.cc streambuf-inst.cc streambuf.cc string-inst.cc \\\n+\tvalarray-inst.cc wlocale-inst.cc wstring-inst.cc atomicity.cc \\\n \tcodecvt_members.cc collate_members.cc ctype_members.cc \\\n \tmessages_members.cc monetary_members.cc numeric_members.cc \\\n \ttime_members.cc basic_file.cc c++locale.cc \\\n@@ -92,13 +92,13 @@ am__objects_4 = bitmap_allocator.lo pool_allocator.lo mt_allocator.lo \\\n \tdebug_list.lo functexcept.lo globals_io.lo ios.lo \\\n \tios_failure.lo ios_init.lo ios_locale.lo limits.lo list.lo \\\n \tlocale.lo locale_init.lo locale_facets.lo localename.lo \\\n-\tstdexcept.lo strstream.lo tree.lo allocator-inst.lo \\\n-\tconcept-inst.lo fstream-inst.lo ext-inst.lo ios-inst.lo \\\n-\tiostream-inst.lo istream-inst.lo istream.lo locale-inst.lo \\\n-\tmisc-inst.lo ostream-inst.lo sstream-inst.lo streambuf-inst.lo \\\n-\tstreambuf.lo string-inst.lo valarray-inst.lo wlocale-inst.lo \\\n-\twstring-inst.lo $(am__objects_1) $(am__objects_2) \\\n-\t$(am__objects_3)\n+\tstdexcept.lo strstream.lo system_error.lo tree.lo \\\n+\tallocator-inst.lo concept-inst.lo fstream-inst.lo ext-inst.lo \\\n+\tios-inst.lo iostream-inst.lo istream-inst.lo istream.lo \\\n+\tlocale-inst.lo misc-inst.lo ostream-inst.lo sstream-inst.lo \\\n+\tstreambuf-inst.lo streambuf.lo string-inst.lo valarray-inst.lo \\\n+\twlocale-inst.lo wstring-inst.lo $(am__objects_1) \\\n+\t$(am__objects_2) $(am__objects_3)\n am_libstdc___la_OBJECTS = $(am__objects_4)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)\n@@ -378,6 +378,7 @@ sources = \\\n \tlocalename.cc \\\n \tstdexcept.cc \\\n \tstrstream.cc \\\n+\tsystem_error.cc \\\n \ttree.cc \\\n \tallocator-inst.cc \\\n \tconcept-inst.cc \\\n@@ -786,6 +787,12 @@ concept-inst.lo: concept-inst.cc\n concept-inst.o: concept-inst.cc\n \t$(CXXCOMPILE) -D_GLIBCXX_CONCEPT_CHECKS -fimplicit-templates -c $<\n \n+# Use special rules for the C++0x sources so that the proper flags are passed.\n+system_error.lo: system_error.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+system_error.o: system_error.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n # Use special rules for compatibility-ldbl.cc compilation, as we need to\n # pass -mlong-double-64.\n @GLIBCXX_LDBL_COMPAT_TRUE@compatibility-ldbl.lo: compatibility-ldbl.cc"}, {"sha": "191625435ebf9f7f3d5e9abb16cc42c5ccbb8e08", "filename": "libstdc++-v3/src/system_error.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fsystem_error.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,71 @@\n+// <system_error> implementation file\n+\n+// Copyright (C) 2007\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstring>\n+#include <system_error>\n+#include <bits/functexcept.h>\n+#include <limits>\n+\n+namespace\n+{\n+  struct gnu_error_category : public std::error_category\n+  {\n+    virtual const std::string& \n+    name() const \n+    { \n+      static const std::string category(\"GNU\");\n+      return category;\n+    }\n+\n+    virtual std::posix_errno \n+    posix(int __v) const\n+    {\n+#ifdef _GLIBCXX_HAVE_SYS_NERR\n+      const int last_errorno = sys_nerr;\n+#else\n+      const int last_errorno = std::numeric_limits<int>::max();\n+#endif\n+      if (__v > 0 && __v <= last_errorno)\n+\treturn std::posix_errno(__v);\n+      else\n+\treturn std::no_posix_equivalent;\n+    }\n+  };\n+\n+  const gnu_error_category gnu_category;\n+}\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  const error_category& system_category = gnu_category;\n+\n+  system_error::~system_error() throw() { }\n+\n+_GLIBCXX_END_NAMESPACE"}, {"sha": "4a3d3ded4aa6bc3aa6ab81347af7ba0c7a4f7a69", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_category/cons/copy_neg.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fcopy_neg.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2007-08-22 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+namespace __gnu_test\n+{\n+  struct test_category : public std::error_category\n+  { \n+    virtual std::posix_errno \n+    posix(int __v) const\n+    { return std::posix_errno(__v); }\n+\n+    virtual const std::string& \n+    name() const \n+    { \n+      static std::string s(\"__gnu_test::test_category\");\n+      return s;\n+    }\n+  };\n+}\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_test::test_category c1;\n+  __gnu_test::test_category c2(c1); \n+\n+  return 0;\n+}\n+\n+// { dg-error \"is private\" \"\" { target *-*-* } 162 }\n+// { dg-error \"within this context\" \"\" { target *-*-* } 29 }\n+// { dg-error \"first required here\" \"\" { target *-*-* } 48 }\n+// { dg-excess-errors \"copy constructor\" }"}, {"sha": "ae4f5b33bee15b7eec9accee77653e96f664bffb", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_category/cons/default.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Fcons%2Fdefault.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,61 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2007-08-22 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+namespace __gnu_test\n+{\n+  struct test_category : public std::error_category\n+  { \n+    virtual std::posix_errno \n+    posix(int __v) const\n+    { return std::posix_errno(__v); }\n+\n+    virtual const std::string& \n+    name() const \n+    { \n+      static std::string s(\"__gnu_test::test_category\");\n+      return s;\n+    }\n+  };\n+\n+  struct test_derived_category : public test_category\n+  { \n+    virtual const std::string& \n+    name() const \n+    { \n+      static std::string s(\"__gnu_test::test_derived_category\");\n+      return s;\n+    }\n+  };\n+}\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  // 1\n+  __gnu_test::test_category c1;\n+  __gnu_test::test_derived_category c2;\n+\n+  return 0;\n+}"}, {"sha": "4d5b4cd80ba019c1b8c7524cab4f54fba8914d98", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_category/operators/equal.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Foperators%2Fequal.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,62 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2007-08-22 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+namespace __gnu_test\n+{\n+  struct test_category : public std::error_category\n+  { \n+    virtual std::posix_errno \n+    posix(int __v) const\n+    { return std::posix_errno(__v); }\n+\n+    virtual const std::string& \n+    name() const \n+    { \n+      static std::string s(\"__gnu_test::test_category\");\n+      return s;\n+    }\n+  };\n+\n+  struct test_derived_category : public test_category\n+  { \n+    virtual const std::string& \n+    name() const \n+    { \n+      static std::string s(\"__gnu_test::test_derived_category\");\n+      return s;\n+    }\n+  };\n+}\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_test::test_category c1;\n+  __gnu_test::test_derived_category c2;\n+  VERIFY( c1 == c1 );\n+  VERIFY( !(c1 == c2) );\n+\n+  return 0;\n+}"}, {"sha": "7d5f8d3021d1e0428e713dda4503bdd1b6ff1c88", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_category/operators/not_equal.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Foperators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Foperators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_category%2Foperators%2Fnot_equal.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,62 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2007-08-22 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+namespace __gnu_test\n+{\n+  struct test_category : public std::error_category\n+  { \n+    virtual std::posix_errno \n+    posix(int __v) const\n+    { return std::posix_errno(__v); }\n+\n+    virtual const std::string& \n+    name() const \n+    { \n+      static std::string s(\"__gnu_test::test_category\");\n+      return s;\n+    }\n+  };\n+\n+  struct test_derived_category : public test_category\n+  { \n+    virtual const std::string& \n+    name() const \n+    { \n+      static std::string s(\"__gnu_test::test_derived_category\");\n+      return s;\n+    }\n+  };\n+}\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_test::test_category c1;\n+  __gnu_test::test_derived_category c2;\n+  VERIFY( !(c1 != c1) );\n+  VERIFY( c1 != c2 );\n+\n+  return 0;\n+}"}, {"sha": "8732e2891dc9f373b422c2f3e501eb1d4210c6b3", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/cons/1.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,63 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2007-08-22 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+namespace __gnu_test\n+{\n+  struct test_category : public std::error_category\n+  { \n+    virtual std::posix_errno \n+    posix(int __v) const\n+    { return std::posix_errno(__v); }\n+\n+    virtual const std::string& \n+    name() const \n+    { \n+      static std::string s(\"__gnu_test::test_category\");\n+      return s;\n+    }\n+  };\n+}\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  // 1\n+  std::error_code e1;\n+  VERIFY( e1.value() == 0 );\n+  VERIFY( e1.category() == std::system_category );\n+\n+  // 2\n+  const __gnu_test::test_category cat;\n+  std::error_code e2(e1.value(), cat);\n+  VERIFY( e2.value() == e1.value() );\n+  VERIFY( e2.category() == cat );\n+\n+  // 3\n+  std::error_code e3(std::operation_not_supported);\n+  VERIFY( e3.value() == int(std::operation_not_supported) );\n+  VERIFY( e3.category() == std::system_category );\n+\n+  return 0;\n+}"}, {"sha": "f4cd48cc6bda0d6c746e830a19f4493f650de155", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/operators/bool.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2007-08-22 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+// unspecified bool operator positive tests\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  bool b;\n+\n+  // 1\n+  std::error_code e1;\n+  if (e1)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  // 2\n+  std::error_code e2(std::operation_not_supported);\n+  if (e2)\n+    {\n+      VERIFY( true );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "3bf89ba7357046a7bdb2737c359d290d8de914d4", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/operators/bool_neg.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fbool_neg.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,34 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2007-08-22 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  std::error_code e;\n+  int i = e; \n+\n+  return 0;\n+}\n+\n+// { dg-error \"invalid conversion\" \"\" { target *-*-* } 29 }"}, {"sha": "e94c52adbb59a9f790efe422f74c89bb2ad68c23", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/operators/equal.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fequal.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,58 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2007-08-22 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+namespace __gnu_test\n+{\n+  struct test_category : public std::error_category\n+  { \n+    virtual std::posix_errno \n+    posix(int __v) const\n+    { return std::posix_errno(__v); }\n+\n+    virtual const std::string& \n+    name() const \n+    { \n+      static std::string s(\"__gnu_test::test_category\");\n+      return s;\n+    }\n+  };\n+}\n+\n+// unspecified bool operator positive tests\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::error_code e1;\n+  std::error_code e2(std::operation_not_supported);\n+\n+  VERIFY( e1 == e1 );\n+  VERIFY( !(e1 == e2) );\n+\n+  const __gnu_test::test_category cat;\n+  std::error_code e3(e2.value(), cat);\n+  VERIFY( !(e2 == e3) );\n+\n+  return 0;\n+}"}, {"sha": "de487ee98a9654af36ea098d538c9080a2ef2c1f", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/operators/not_equal.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Foperators%2Fnot_equal.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,58 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2007-08-22 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+namespace __gnu_test\n+{\n+  struct test_category : public std::error_category\n+  { \n+    virtual std::posix_errno \n+    posix(int __v) const\n+    { return std::posix_errno(__v); }\n+\n+    virtual const std::string& \n+    name() const \n+    { \n+      static std::string s(\"__gnu_test::test_category\");\n+      return s;\n+    }\n+  };\n+}\n+\n+// unspecified bool operator positive tests\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::error_code e1;\n+  std::error_code e2(std::operation_not_supported);\n+\n+  VERIFY( !(e1 != e1) );\n+  VERIFY( e1 != e2 );\n+\n+  const __gnu_test::test_category cat;\n+  std::error_code e3(e2.value(), cat);\n+  VERIFY( e2 != e3 );\n+\n+  return 0;\n+}"}, {"sha": "fc04cf55fb99d9ece26bef3d0b21374573790b8c", "filename": "libstdc++-v3/testsuite/19_diagnostics/headers/system_error/std_c++0x_neg.cc", "status": "renamed", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Fstd_c%2B%2B0x_neg.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -1,4 +1,3 @@\n-// { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n \n // Copyright (C) 2007 Free Software Foundation, Inc.\n@@ -8,17 +7,20 @@\n // terms of the GNU General Public License as published by the\n // Free Software Foundation; either version 2, or (at your option)\n // any later version.\n-//\n+\n // This library is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n-// Boston, MA 02110-1301, USA.\n \n-#include <functional>\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <system_error>  // { dg-excess-errors \"In file included from\" }\n+\n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 36 } \n+\n+\n \n-template class std::hash<bool>;", "previous_filename": "libstdc++-v3/testsuite/23_containers/hash/requirements/explicit_instantiation.cc"}, {"sha": "44d253c1391fdc63a246839f13f7e906864f964c", "filename": "libstdc++-v3/testsuite/19_diagnostics/headers/system_error/types_std_c++0x.cc", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fheaders%2Fsystem_error%2Ftypes_std_c%2B%2B0x.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,119 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <system_error>\n+\n+namespace gnu\n+{\n+  using std::system_error;\n+  using std::error_code;\n+  using std::error_category;\n+  using std::system_category;\n+\n+  using std::posix_errno;\n+  using std::address_family_not_supported;\n+  using std::address_in_use;\n+  using std::address_not_available;\n+  using std::already_connected;\n+  using std::argument_list_too_long;\n+  using std::argument_out_of_domain;\n+  using std:: bad_address;\n+  using std::bad_file_descriptor;\n+  using std::bad_message;\n+  using std::broken_pipe;\n+  using std::connection_aborted;\n+  using std::connection_already_in_progress; \n+  using std::connection_refused; \n+  using std::connection_reset; \n+  using std::cross_device_link; \n+  using std::destination_address_required;\n+  using std::device_or_resource_busy;\n+  using std::directory_not_empty; \n+  using std::executable_format_error;\n+  using std::file_exists;\n+  using std::file_too_large; \t\n+  using std::filename_too_long;\n+  using std::function_not_supported; \n+  using std::host_unreachable; \n+  using std::identifier_removed;\n+  using std::illegal_byte_sequence; \n+  using std::inappropriate_io_control_operation; \n+  using std::interrupted; \n+  using std::invalid_argument;\n+  using std::invalid_seek; \n+  using std::io_error; \n+  using std::is_a_directory; \n+  using std::message_size; \n+  using std::network_down; \n+  using std::network_reset;\n+  using std::network_unreachable; \n+  using std::no_buffer_space; \n+  using std::no_child_process;\n+  using std::no_link; \n+  using std::no_lock_available; \n+  using std::no_message_available; \n+  using std::no_message; \n+  using std::no_posix_equivalent; \n+  using std::no_protocol_option; \n+  using std::no_space_on_device;\n+  using std::no_stream_resources; \n+  using std::no_such_device_or_address; \n+  using std::no_such_device; \t\n+  using std::no_such_file_or_directory; \n+  using std::no_such_process; \t\n+  using std::not_a_directory; \n+  using std::not_a_socket; \n+  using std::not_a_stream; \n+  using std::not_connected; \n+  using std::not_enough_memory;\n+  using std::not_supported;\n+  using std::operation_canceled;\n+  using std::operation_in_progress;\n+  using std::operation_not_permitted;\n+  using std::operation_not_supported;\n+  using std::operation_would_block;\n+\n+#ifdef _GLIBCXX_HAVE_EOWNERDEAD\n+  using std::owner_dead; \n+#endif\n+\n+  using std::permission_denied;\n+  using std::protocol_error; \n+  using std::protocol_not_supported;\n+  using std::read_only_file_system; \n+  using std::resource_deadlock_would_occur;\n+  using std::resource_unavailable_try_again; \n+  using std::result_out_of_range;\n+\n+#ifdef _GLIBCXX_HAVE_ENOTRECOVERABLE\n+  using std::state_not_recoverable; \n+#endif\n+\n+  using std::stream_timeout; \n+  using std::text_file_busy; \n+  using std::timed_out; \n+  using std::too_many_files_open_in_system; \n+  using std::too_many_files_open; \n+  using std::too_many_links; \t\n+  using std::too_many_synbolic_link_levels; \n+  using std::value_too_large; \n+  using std::wrong_protocol_type;\n+}"}, {"sha": "5348e5b15c6b46d9deedddf1af68033d5ed1fad7", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/cons-1.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons-1.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2007-06-05 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstring>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const std::string s(\"too late: boulangerie out of pain au raisin\");\n+  const std::error_code e(std::operation_not_supported);\n+\n+  // 1\n+  {\n+    std::system_error err1(s, e);\n+    VERIFY( err1.code() == e ); \n+    VERIFY( std::strcmp(err1.runtime_error::what(), s.c_str()) == 0 );\n+  }\n+\n+  // 2\n+  {\n+    std::system_error err2(s, 95, std::system_category);\n+    VERIFY( err2.code() == std::error_code(95, std::system_category) ); \n+    VERIFY( std::strcmp(err2.runtime_error::what(), s.c_str()) == 0 );\n+  }\n+\n+  return 0;\n+}"}, {"sha": "09ba2fd13e4e7a182e2437d50a281bd09c2518d0", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/cons_virtual_derivation.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons_virtual_derivation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons_virtual_derivation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons_virtual_derivation.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do run { xfail *-*-* } }\n+// 2007-05-29 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <system_error>\n+#include <testsuite_api.h>\n+\n+int main()\n+{\n+  typedef std::system_error test_type;\n+  __gnu_test::diamond_derivation<test_type, false>::test();\n+  return 0;\n+}"}, {"sha": "c178e542a3cc0141f2aab8894d25bac33444d403", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/what-1.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-1.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,59 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2007\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 19.1 Exception classes\n+\n+#include <string>\n+#include <system_error>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/1972\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::string s(\"lack of sunlight, no water error\");\n+\n+  // 1\n+  std::system_error obj1 = std::system_error(s);\n+\n+  // 2\n+  std::system_error obj2(s);\n+\n+  VERIFY( std::strcmp(obj1.what(), s.data()) == 0 );\n+  VERIFY( std::strcmp(obj2.what(), s.data()) == 0 );\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::string s(\"lack of sunlight error\");\n+  std::system_error x(s);\n+  \n+  VERIFY( std::strcmp(x.what(), s.data()) == 0 );\n+}\n+\n+int main(void)\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "eb8e14c9cc1e02a453fd9ad421c6d3ddd14f16d0", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/what-2.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-2.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2007\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 19.1 Exception classes\n+\n+#include <string>\n+#include <system_error>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/2089\n+class fuzzy_logic : public std::system_error\n+{\n+public:\n+  fuzzy_logic() : std::system_error(\"whoa\") { }\n+};\n+\n+void test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+  try\n+    { throw fuzzy_logic(); }\n+  catch(const fuzzy_logic& obj)\n+    { VERIFY( std::strcmp(\"whoa\", obj.what()) == 0 ); }\n+  catch(...)\n+    { VERIFY( false ); }\n+}\n+\n+int main(void)\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "23d99a87d94732e117641715e4b1b188bded17de", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/what-3.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-3.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,69 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2007\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <string>\n+#include <system_error>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+// test copy ctors, assignment operators, and persistence of member string data\n+// libstdc++/1972\n+// via Greg Bumgardner <bumgard@roguewave.com>\n+void allocate_on_stack(void) \n+{\n+  const size_t num = 512;\n+  __extension__ char array[num];\n+  for (size_t i = 0; i < num; i++) \n+    array[i]=0;\n+}\n+\n+void test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const std::string s(\"CA ISO emergency once again:immediate power down\");\n+  const char* strlit1 = \"wish I lived in Palo Alto\";\n+  const char* strlit2 = \"...or Santa Barbara\";\n+  std::system_error obj1(s);\n+  \n+  // block 01\n+  {\n+    const std::string s2(strlit1);\n+    std::system_error obj2(s2);\n+    obj1 = obj2;\n+  }\n+  allocate_on_stack();\n+  VERIFY( std::strcmp(strlit1, obj1.what()) == 0 ); \n+\n+  // block 02\n+  {\n+    const std::string s3(strlit2);\n+    std::system_error obj3 = std::system_error(s3);\n+    obj1 = obj3;\n+  }\n+  allocate_on_stack();     \n+  VERIFY( std::strcmp(strlit2, obj1.what()) == 0 ); \n+}\n+\n+int main(void)\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "e6df84f6007b814d761c99f5003785f8173ded26", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/what-4.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-4.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2007\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 19.1 Exception classes\n+\n+#include <cstring>\n+#include <string>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+// Make sure each invocation of what() doesn't grow the message.\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::string s(\"after nine thirty, this request cannot be met\");\n+\n+  std::system_error obj = std::system_error(s, std::invalid_argument);\n+  std::string s1(obj.what());\n+  std::string s2(obj.what());\n+  VERIFY( s1 == s2 );\n+}\n+\n+int main(void)\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "765bcbf19fef176247fec01447a9298a34bca07a", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/what-big.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-big.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-big.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fwhat-big.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstring>\n+#include <string>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+// Can construct and return 10k character error string.\n+void test01()\n+{\n+  typedef std::system_error test_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  const std::string xxx(10000, 'x');\n+  test_type t(xxx);\n+  VERIFY( std::strcmp(t.what(), xxx.c_str()) == 0 );\n+}\n+\n+int main(void)\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6cc46c02a517cb27803c092fa227a656452c1504", "filename": "libstdc++-v3/testsuite/20_util/bad_function_call/cons_virtual_derivation.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbad_function_call%2Fcons_virtual_derivation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbad_function_call%2Fcons_virtual_derivation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbad_function_call%2Fcons_virtual_derivation.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "previous_filename": "libstdc++-v3/testsuite/20_util/function_objects/bad_function_call/cons_virtual_derivation.cc"}, {"sha": "89e82cd4a9079c4011769771f2cdba0caa359376", "filename": "libstdc++-v3/testsuite/20_util/hash/operators/size_t.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Foperators%2Fsize_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Foperators%2Fsize_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Foperators%2Fsize_t.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2007-08-20  <benjamin@redhat.com>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <functional>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+  void\n+  do_test()\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    typedef T \t\t\t\tvalue_type;\n+    typedef std::hash<value_type> \thash_type;\n+    using std::size_t;\n+\n+    value_type v; // default initialized is fine, same value all that matters.\n+    hash_type h1;\n+    size_t r1 = size_t(h1(v));\n+    \n+    hash_type h2;\n+    size_t r2 = size_t(h2(v));\n+\n+    VERIFY( r1 == r2 );\n+  }\n+  \n+void test01()\n+{\n+  do_test<std::error_code>();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7b82eeeab2f8f0cc5731c0cecec7fb94975690d1", "filename": "libstdc++-v3/testsuite/20_util/hash/requirements/explicit_instantiation.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Frequirements%2Fexplicit_instantiation.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <functional>\n+#include <string>\n+#include <system_error>\n+\n+// Verify that we can instantiate hash for every required type.\n+template class std::hash<bool>;\n+template class std::hash<char>;\n+template class std::hash<signed char>;\n+template class std::hash<unsigned char>;\n+template class std::hash<short>;\n+template class std::hash<int>;\n+template class std::hash<long>;\n+template class std::hash<unsigned short>;\n+template class std::hash<unsigned int>;\n+template class std::hash<unsigned long>;\n+template class std::hash<float>;\n+template class std::hash<double>;\n+template class std::hash<long double>;\n+template class std::hash<void*>;\n+template class std::hash<std::string>;\n+template class std::hash<std::error_code>;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+template class std::hash<wchar_t>;\n+template class std::hash<std::wstring>;\n+#endif\n+"}, {"sha": "3cac92847e826a9c6907b8dc8481048835387c11", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/error_code.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Ferror_code.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Ferror_code.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Ferror_code.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,74 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ostream>\n+#include <sstream>\n+#include <system_error>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+//   Effects: os << ec.category().name() << ':' << ec.value();\n+void test()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  char buf[64];\n+  error_code e1;\n+  error_code e2(bad_address);\n+  string s, s1, s2;\n+\n+  {\n+    ostringstream ostr;\n+    ostr << e1 << endl;\n+    s1 = ostr.str();\n+\n+    if (ostr.rdstate() & ios_base::eofbit) \n+      test = false;\n+  }\n+  VERIFY( test );\n+  VERIFY( find(s1.begin(), s1.end(), ':') != s1.end() );\n+\n+  sprintf(buf, \"%i\", e1.value());\n+  s = buf;\n+  VERIFY( s1.find(s) != string::npos);\n+\n+  {\n+    ostringstream ostr;\n+    ostr << e2 << endl;\n+    s2 = ostr.str();\n+\n+    if (ostr.rdstate() & ios_base::eofbit) \n+      test = false;\n+  }\n+  VERIFY( test );\n+  VERIFY( find(s2.begin(), s2.end(), ':') != s2.end() );\n+\n+  sprintf(buf, \"%i\", e2.value());\n+  s = buf;\n+  VERIFY( s2.find(s) != string::npos);\n+}\n+\n+int \n+main()\n+{\n+  test(); \n+  return 0;\n+}"}, {"sha": "a83c9cbb71d47022def0152c7fcac0f73fa1ad08", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/error_code.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Ferror_code.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Ferror_code.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Ferror_code.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,75 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ostream>\n+#include <sstream>\n+#include <system_error>\n+#include <algorithm>\n+#include <wchar.h>\n+#include <testsuite_hooks.h>\n+\n+//   Effects: os << ec.category().name() << ':' << ec.value();\n+void test()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  wchar_t buf[64];\n+  error_code e1;\n+  error_code e2(bad_address);\n+  wstring s, s1, s2;\n+\n+  {\n+    wostringstream ostr;\n+    ostr << e1 << endl;\n+    s1 = ostr.str();\n+\n+    if (ostr.rdstate() & ios_base::eofbit) \n+      test = false;\n+  }\n+  VERIFY( test );\n+  VERIFY( find(s1.begin(), s1.end(), L':') != s1.end() );\n+\n+  swprintf(buf, 64, L\"%i\", e1.value());\n+  s = buf;\n+  VERIFY( s1.find(s) != string::npos);\n+\n+  {\n+    wostringstream ostr;\n+    ostr << e2 << endl;\n+    s2 = ostr.str();\n+\n+    if (ostr.rdstate() & ios_base::eofbit) \n+      test = false;\n+  }\n+  VERIFY( test );\n+  VERIFY( find(s2.begin(), s2.end(), L':') != s2.end() );\n+\n+  swprintf(buf, 64, L\"%i\", e2.value());\n+  s = buf;\n+  VERIFY( s2.find(s) != string::npos);\n+}\n+\n+int \n+main()\n+{\n+  test(); \n+  return 0;\n+}"}, {"sha": "067a9f51da0c0ccb697c456621943589bfe9c3b8", "filename": "libstdc++-v3/testsuite/tr1/6_containers/hash/operators/size_t.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fhash%2Foperators%2Fsize_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0646d8a3789b8fdc74c0172cf0738393d96c2b45/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fhash%2Foperators%2Fsize_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Fhash%2Foperators%2Fsize_t.cc?ref=0646d8a3789b8fdc74c0172cf0738393d96c2b45", "patch": "@@ -0,0 +1,75 @@\n+// 2007-08-20  <benjamin@redhat.com>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.3.3 Class template hash\n+\n+#include <tr1/functional>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+  void\n+  do_test()\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    typedef T \t\t\t\tvalue_type;\n+    typedef std::tr1::hash<value_type> \thash_type;\n+    using std::size_t;\n+\n+    value_type v; // default initialized is fine, same value all that matters.\n+    hash_type h1;\n+    size_t r1 = size_t(h1(v));\n+    \n+    hash_type h2;\n+    size_t r2 = size_t(h2(v));\n+\n+    VERIFY( r1 == r2 );\n+  }\n+  \n+void test01()\n+{\n+  do_test<bool>();\n+  do_test<char>();\n+  do_test<signed char>();\n+  do_test<unsigned char>();\n+  do_test<short>();\n+  do_test<int>();\n+  do_test<long>();\n+  do_test<unsigned short>();\n+  do_test<unsigned int>();\n+  do_test<unsigned long>();\n+  do_test<int*>();\n+  do_test<std::string>();\n+  do_test<float>();\n+  do_test<double>();\n+  do_test<long double>();\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  do_test<wchar_t>();\n+  do_test<std::wstring>();\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}