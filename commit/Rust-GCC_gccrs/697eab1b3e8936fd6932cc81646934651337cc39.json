{"sha": "697eab1b3e8936fd6932cc81646934651337cc39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk3ZWFiMWIzZTg5MzZmZDY5MzJjYzgxNjQ2OTM0NjUxMzM3Y2MzOQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-29T06:59:04Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-29T07:00:00Z"}, "message": "git_commit: fix duplicite email address.\n\nThe patch is about to handle situations like seen\nin 3ea6977d0f1813d982743a09660eec1760e981ec.\n\ncontrib/ChangeLog:\n\n\t* gcc-changelog/git_commit.py: Properly\n\thandle duplicite authors.\n\t* gcc-changelog/test_email.py: New test.\n\t* gcc-changelog/test_patches.txt: New patch.", "tree": {"sha": "207339fcfca49954db759792ff2ccdc718afb8c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/207339fcfca49954db759792ff2ccdc718afb8c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/697eab1b3e8936fd6932cc81646934651337cc39", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl7Qsv0ACgkQTcGC3A+n\nN4Uqgwf+KL8I1MXYPVwHD6uUS5CLgKnNJxMfvaIlXK9mwxZ/iSB8NH9oFyy6i4JW\ngn5NjIXjL1CZvuzUJmfU548/kLGuO7yLjzvkDTrkSbH334YFCHX9Dotg8YzDcAQa\nLpwXatezzsSxUvjmVIrrIll3sXcNLsktOqNop0VuqMLXtVuZn9Whx451P2fHykSw\nLA5g5Dx4H+jEDOjXK96gH8wnkaDmBG956teTM6kb0Bsr0xXgAAKRmXDjOomSoVna\nyO/Vo28GjLJNLqps0Oag42WZ+Za7teuecYZG9pbWOs2k+aUsy0jv+vFgdQRM6sCk\n+zsSzTGpUV+gsAXEKfF1uwrRpqXy/w==\n=BcQd\n-----END PGP SIGNATURE-----", "payload": "tree 207339fcfca49954db759792ff2ccdc718afb8c5\nparent 53ffb43a79780b6e33e1816831724c0fb3d2fa32\nauthor Martin Liska <mliska@suse.cz> 1590735544 +0200\ncommitter Martin Liska <mliska@suse.cz> 1590735600 +0200\n\ngit_commit: fix duplicite email address.\n\nThe patch is about to handle situations like seen\nin 3ea6977d0f1813d982743a09660eec1760e981ec.\n\ncontrib/ChangeLog:\n\n\t* gcc-changelog/git_commit.py: Properly\n\thandle duplicite authors.\n\t* gcc-changelog/test_email.py: New test.\n\t* gcc-changelog/test_patches.txt: New patch.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697eab1b3e8936fd6932cc81646934651337cc39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/697eab1b3e8936fd6932cc81646934651337cc39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697eab1b3e8936fd6932cc81646934651337cc39/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53ffb43a79780b6e33e1816831724c0fb3d2fa32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53ffb43a79780b6e33e1816831724c0fb3d2fa32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53ffb43a79780b6e33e1816831724c0fb3d2fa32"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "084e83c18ccc17b2e5c8c631ebb9e2f151b368e9", "filename": "contrib/gcc-changelog/git_commit.py", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697eab1b3e8936fd6932cc81646934651337cc39/contrib%2Fgcc-changelog%2Fgit_commit.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697eab1b3e8936fd6932cc81646934651337cc39/contrib%2Fgcc-changelog%2Fgit_commit.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Fgit_commit.py?ref=697eab1b3e8936fd6932cc81646934651337cc39", "patch": "@@ -232,6 +232,12 @@ def authors(self):\n     def is_empty(self):\n         return not self.lines and self.prs == self.initial_prs\n \n+    def contains_author(self, author):\n+        for author_lines in self.author_lines:\n+            if author_lines[0] == author:\n+                return True\n+        return False\n+\n \n class GitCommit:\n     def __init__(self, hexsha, date, author, body, modified_files,\n@@ -408,7 +414,7 @@ def parse_changelog(self):\n                         self.changelog_entries.append(last_entry)\n                         will_deduce = True\n                 elif author_tuple:\n-                    if author_tuple not in last_entry.author_lines:\n+                    if not last_entry.contains_author(author_tuple[0]):\n                         last_entry.author_lines.append(author_tuple)\n                     continue\n "}, {"sha": "e73b3626473b4682c68960942b58c2b9762c984a", "filename": "contrib/gcc-changelog/test_email.py", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697eab1b3e8936fd6932cc81646934651337cc39/contrib%2Fgcc-changelog%2Ftest_email.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697eab1b3e8936fd6932cc81646934651337cc39/contrib%2Fgcc-changelog%2Ftest_email.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Ftest_email.py?ref=697eab1b3e8936fd6932cc81646934651337cc39", "patch": "@@ -18,11 +18,11 @@\n \n import os\n import tempfile\n-import unidiff\n import unittest\n \n from git_email import GitEmail\n \n+import unidiff\n \n script_path = os.path.dirname(os.path.realpath(__file__))\n \n@@ -305,3 +305,10 @@ def test_renamed_file(self):\n         email = self.from_patch_glob(\n             '0001-Ada-Add-support-for-XDR-streaming-in-the-default-run.patch')\n         assert not email.errors\n+\n+    def test_duplicite_author_lines(self):\n+        email = self.from_patch_glob('0001-Fortran-type-is-real-kind-1.patch')\n+        assert (email.changelog_entries[0].author_lines[0][0]\n+                == 'Steven G. Kargl  <kargl@gcc.gnu.org>')\n+        assert (email.changelog_entries[0].author_lines[1][0]\n+                == 'Mark Eggleston  <markeggleston@gcc.gnu.org>')"}, {"sha": "76037c33f93859e422aa209aa3bddec2371d7f4b", "filename": "contrib/gcc-changelog/test_patches.txt", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697eab1b3e8936fd6932cc81646934651337cc39/contrib%2Fgcc-changelog%2Ftest_patches.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697eab1b3e8936fd6932cc81646934651337cc39/contrib%2Fgcc-changelog%2Ftest_patches.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Ftest_patches.txt?ref=697eab1b3e8936fd6932cc81646934651337cc39", "patch": "@@ -2893,4 +2893,55 @@ index 9e0263b431d..37f3d030e3f 100644\n +\n -- \n 2.20.1\n+=== 0001-Fortran-type-is-real-kind-1.patch ===\n+From 3ea6977d0f1813d982743a09660eec1760e981ec Mon Sep 17 00:00:00 2001\n+From: Mark Eggleston <markeggleston@gcc.gnu.org>\n+Date: Wed, 1 Apr 2020 09:52:41 +0100\n+Subject: [PATCH] Fortran  : \"type is( real(kind(1.)) )\" spurious syntax error\n+ PR94397\n+\n+Based on a patch in the comments of the PR. That patch fixed this\n+problem but caused the test cases for PR93484 to fail. It has been\n+changed to reduce initialisation expressions if the expression is\n+not EXPR_VARIABLE and not EXPR_CONSTANT.\n+\n+2020-05-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+gcc/fortran/\n+\n+\tPR fortran/94397\n+\t* match.c (gfc_match_type_spec): New variable ok initialised\n+\tto true. Set ok with the return value of gfc_reduce_init_expr\n+\tcalled only if the expression is not EXPR_CONSTANT and is not\n+\tEXPR_VARIABLE. Add !ok to the check for type not being integer\n+\tor the rank being greater than zero.\n+\n+2020-05-28  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+gcc/testsuite/\n+\n+\tPR fortran/94397\n+\t* gfortran.dg/pr94397.F90: New test.\n+---\n+ gcc/fortran/match.c                   |  5 ++++-\n+ gcc/testsuite/gfortran.dg/pr94397.F90 | 26 ++++++++++++++++++++++++++\n+ 2 files changed, 30 insertions(+), 1 deletion(-)\n+ create mode 100644 gcc/testsuite/gfortran.dg/pr94397.F90\n \n+diff --git a/gcc/fortran/match.c b/gcc/fortran/match.c\n+index 8ae34a94a95..82d2b5087e5 100644\n+--- a/gcc/fortran/match.c\n++++ b/gcc/fortran/match.c\n+@@ -1 +1,2 @@\n+ \n++\n+diff --git a/gcc/testsuite/gfortran.dg/pr94397.F90 b/gcc/testsuite/gfortran.dg/pr94397.F90\n+new file mode 100644\n+index 00000000000..fda10c1a88b\n+--- /dev/null\n++++ b/gcc/testsuite/gfortran.dg/pr94397.F90\n+@@ -0,0 +1 @@\n++\n+-- \n+2.26.2"}]}