{"sha": "d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBiZjkyMWY2YTBiOGZmZGFkNzRmYTVlYjVkZGYyZTcwYTlhY2ZkNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-01-18T10:07:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-01-18T10:07:27Z"}, "message": "re PR tree-optimization/86214 (Strongly increased stack usage)\n\n\tPR tree-optimization/86214\n\t* tree-inline.h (struct copy_body_data): Add\n\tadd_clobbers_to_eh_landing_pads member.\n\t* tree-inline.c (add_clobbers_to_eh_landing_pad): New function.\n\t(copy_edges_for_bb): Call it if EH edge destination is <\n\tid->add_clobbers_to_eh_landing_pads.  Fix a comment typo.\n\t(expand_call_inline): Set id->add_clobbers_to_eh_landing_pads\n\tif flag_stack_reuse != SR_NONE and clear it afterwards.\n\n\t* g++.dg/opt/pr86214-1.C: New test.\n\t* g++.dg/opt/pr86214-2.C: New test.\n\nFrom-SVN: r268067", "tree": {"sha": "34400b335f0a502e54d5e3b06e3a7fe5a68a72e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34400b335f0a502e54d5e3b06e3a7fe5a68a72e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6616a31808d9f97b6dbca5f7cba4f61825e7289b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6616a31808d9f97b6dbca5f7cba4f61825e7289b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6616a31808d9f97b6dbca5f7cba4f61825e7289b"}], "stats": {"total": 132, "additions": 129, "deletions": 3}, "files": [{"sha": "a16deb681537ec392445630e42d779c3b08e214e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6", "patch": "@@ -1,3 +1,14 @@\n+2019-01-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/86214\n+\t* tree-inline.h (struct copy_body_data): Add\n+\tadd_clobbers_to_eh_landing_pads member.\n+\t* tree-inline.c (add_clobbers_to_eh_landing_pad): New function.\n+\t(copy_edges_for_bb): Call it if EH edge destination is <\n+\tid->add_clobbers_to_eh_landing_pads.  Fix a comment typo.\n+\t(expand_call_inline): Set id->add_clobbers_to_eh_landing_pads\n+\tif flag_stack_reuse != SR_NONE and clear it afterwards.\n+\n 2019-01-18  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \tPR target/85596"}, {"sha": "400e98348305785fd39a57598be57d786280f577", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6", "patch": "@@ -1,3 +1,9 @@\n+2019-01-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/86214\n+\t* g++.dg/opt/pr86214-1.C: New test.\n+\t* g++.dg/opt/pr86214-2.C: New test.\n+\n 2019-01-18  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/arm/pr77904.c: Add dg-warning for sp clobber."}, {"sha": "25ead65f441e50aa0d642bb545128f4ae50832ae", "filename": "gcc/testsuite/g++.dg/opt/pr86214-1.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr86214-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr86214-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr86214-1.C?ref=d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6", "patch": "@@ -0,0 +1,30 @@\n+// PR tree-optimization/86214\n+// { dg-do compile }\n+// { dg-options \"-O2 -Wstack-usage=15000\" }\n+\n+typedef __SIZE_TYPE__ size_t;\n+struct A { A (); ~A (); int a; void qux (const char *); };\n+int bar (char *);\n+\n+static inline A\n+foo ()\n+{\n+  char b[8192];\n+  int x = bar (b);\n+  A s;\n+  if (x > 0 && (size_t) x < sizeof b)\n+    s.qux (b);\n+  return s;\n+}\n+\n+void\n+baz ()\t// { dg-bogus \"stack usage is\" }\n+{\n+  A a;\n+  char c[1024];\n+  bar (c);\n+  foo (); foo (); foo (); foo (); foo ();\n+  foo (); foo (); foo (); foo (); foo ();\n+  foo (); foo (); foo (); foo (); foo ();\n+  foo (); foo (); foo (); foo (); foo ();\n+}"}, {"sha": "77e362159b2d4a384fa24ea243366edfb5c21cb0", "filename": "gcc/testsuite/g++.dg/opt/pr86214-2.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr86214-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr86214-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr86214-2.C?ref=d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6", "patch": "@@ -0,0 +1,28 @@\n+// PR tree-optimization/86214\n+// { dg-do compile }\n+// { dg-options \"-O2 -Wstack-usage=15000\" }\n+\n+typedef __SIZE_TYPE__ size_t;\n+struct A { A (); ~A (); int a; void qux (const char *); };\n+int bar (char *);\n+\n+static inline __attribute__((always_inline)) A\n+foo ()\n+{\n+  char b[8192];\n+  int x = bar (b);\n+  A s;\n+  if (x > 0 && (size_t) x < sizeof b)\n+    s.qux (b);\n+  return s;\n+}\n+\n+void\n+baz ()\t// { dg-bogus \"stack usage is\" }\n+{\n+  A a;\n+  foo (); foo (); foo (); foo (); foo ();\n+  foo (); foo (); foo (); foo (); foo ();\n+  foo (); foo (); foo (); foo (); foo ();\n+  foo (); foo (); foo (); foo (); foo ();\n+}"}, {"sha": "29f119ade774a6c8ace921d3256834f66665ad7b", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6", "patch": "@@ -2190,6 +2190,40 @@ update_ssa_across_abnormal_edges (basic_block bb, basic_block ret_bb,\n       }\n }\n \n+/* Insert clobbers for automatic variables of inlined ID->src_fn\n+   function at the start of basic block BB.  */\n+\n+static void\n+add_clobbers_to_eh_landing_pad (basic_block bb, copy_body_data *id)\n+{\n+  tree var;\n+  unsigned int i;\n+  FOR_EACH_VEC_SAFE_ELT (id->src_cfun->local_decls, i, var)\n+    if (VAR_P (var)\n+\t&& !DECL_HARD_REGISTER (var)\n+\t&& !TREE_THIS_VOLATILE (var)\n+\t&& !DECL_HAS_VALUE_EXPR_P (var)\n+\t&& !is_gimple_reg (var)\n+\t&& auto_var_in_fn_p (var, id->src_fn))\n+      {\n+\ttree *t = id->decl_map->get (var);\n+\tif (!t)\n+\t  continue;\n+\ttree new_var = *t;\n+\tif (VAR_P (new_var)\n+\t    && !DECL_HARD_REGISTER (new_var)\n+\t    && !TREE_THIS_VOLATILE (new_var)\n+\t    && !DECL_HAS_VALUE_EXPR_P (new_var)\n+\t    && !is_gimple_reg (new_var)\n+\t    && auto_var_in_fn_p (new_var, id->dst_fn))\n+\t  {\n+\t    gimple_stmt_iterator gsi = gsi_after_labels (bb);\n+\t    tree clobber = build_clobber (TREE_TYPE (new_var));\n+\t    gimple *clobber_stmt = gimple_build_assign (new_var, clobber);\n+\t    gsi_insert_before (&gsi, clobber_stmt, GSI_NEW_STMT);\n+\t  }\n+      }\n+}\n \n /* Copy edges from BB into its copy constructed earlier, scale profile\n    accordingly.  Edges will be taken care of later.  Assume aux\n@@ -2232,7 +2266,7 @@ copy_edges_for_bb (basic_block bb, profile_count num, profile_count den,\n   if (bb->index == ENTRY_BLOCK || bb->index == EXIT_BLOCK)\n     return false;\n \n-  /* When doing function splitting, we must decreate count of the return block\n+  /* When doing function splitting, we must decrease count of the return block\n      which was previously reachable by block we did not copy.  */\n   if (single_succ_p (bb) && single_succ_edge (bb)->dest->index == EXIT_BLOCK)\n     FOR_EACH_EDGE (old_edge, ei, bb->preds)\n@@ -2317,8 +2351,16 @@ copy_edges_for_bb (basic_block bb, profile_count num, profile_count den,\n \t      e->probability = old_edge->probability;\n \t    \n           FOR_EACH_EDGE (e, ei, copy_stmt_bb->succs)\n-\t    if ((e->flags & EDGE_EH) && !e->probability.initialized_p ())\n-\t      e->probability = profile_probability::never ();\n+\t    if (e->flags & EDGE_EH)\n+\t      {\n+\t\tif (!e->probability.initialized_p ())\n+\t\t  e->probability = profile_probability::never ();\n+\t\tif (e->dest->index < id->add_clobbers_to_eh_landing_pads)\n+\t\t  {\n+\t\t    add_clobbers_to_eh_landing_pad (e->dest, id);\n+\t\t    id->add_clobbers_to_eh_landing_pads = 0;\n+\t\t  }\n+\t      }\n         }\n \n \n@@ -4565,6 +4607,8 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n   id->decl_map = new hash_map<tree, tree>;\n   dst = id->debug_map;\n   id->debug_map = NULL;\n+  if (flag_stack_reuse != SR_NONE)\n+    id->add_clobbers_to_eh_landing_pads = last_basic_block_for_fn (cfun);\n \n   /* Record the function we are about to inline.  */\n   id->src_fn = fn;\n@@ -4872,6 +4916,7 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n     }\n \n   id->assign_stmts.release ();\n+  id->add_clobbers_to_eh_landing_pads = 0;\n \n   /* Output the inlining info for this abstract function, since it has been\n      inlined.  If we don't do this now, we can lose the information about the"}, {"sha": "11f596e3a740e2f3a13c1dbb091ad16b22435410", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=d0bf921f6a0b8ffdad74fa5eb5ddf2e70a9acfd6", "patch": "@@ -155,6 +155,12 @@ struct copy_body_data\n   /* A list of addressable local variables remapped into the caller\n      when inlining a call within an OpenMP SIMD-on-SIMT loop.  */\n   vec<tree> *dst_simt_vars;\n+\n+  /* If clobbers for local variables from the inline function\n+     that need to live in memory should be added to EH landing pads\n+     outside of the inlined function, this should be the number\n+     of basic blocks in the caller before inlining.  Zero otherwise.  */\n+  int add_clobbers_to_eh_landing_pads;\n };\n \n /* Weights of constructions for estimate_num_insns.  */"}]}