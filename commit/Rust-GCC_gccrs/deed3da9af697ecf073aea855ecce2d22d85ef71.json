{"sha": "deed3da9af697ecf073aea855ecce2d22d85ef71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVlZDNkYTlhZjY5N2VjZjA3M2FlYTg1NWVjY2UyZDIyZDg1ZWY3MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-04-12T18:09:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-04-12T18:09:47Z"}, "message": "re PR tree-optimization/79390 (10% performance drop in SciMark2 LU after r242550)\n\n\tPR tree-optimization/79390\n\t* optabs.c (emit_conditional_move): If the preferred op2/op3 operand\n\torder does not result in usable sequence, retry with reversed operand\n\torder.\n\n\t* gcc.target/i386/pr70465-2.c: Xfail the scan-assembler-not test.\n\nFrom-SVN: r246882", "tree": {"sha": "aa6adfa7b5640797147ae3695682ee34d546528a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa6adfa7b5640797147ae3695682ee34d546528a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/deed3da9af697ecf073aea855ecce2d22d85ef71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deed3da9af697ecf073aea855ecce2d22d85ef71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deed3da9af697ecf073aea855ecce2d22d85ef71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deed3da9af697ecf073aea855ecce2d22d85ef71/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b96a3e11572287992923065def1d64e8a2240f9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b96a3e11572287992923065def1d64e8a2240f9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b96a3e11572287992923065def1d64e8a2240f9b"}], "stats": {"total": 90, "additions": 59, "deletions": 31}, "files": [{"sha": "fd40a2a2f97d7824dd95c79f042662844813044c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deed3da9af697ecf073aea855ecce2d22d85ef71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deed3da9af697ecf073aea855ecce2d22d85ef71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=deed3da9af697ecf073aea855ecce2d22d85ef71", "patch": "@@ -1,5 +1,10 @@\n 2017-04-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/79390\n+\t* optabs.c (emit_conditional_move): If the preferred op2/op3 operand\n+\torder does not result in usable sequence, retry with reversed operand\n+\torder.\n+\n \tPR sanitizer/80403\n \tPR sanitizer/80404\n \tPR sanitizer/80405"}, {"sha": "48e37f8bb40fe717487b36c11707da2c4652d20c", "filename": "gcc/optabs.c", "status": "modified", "additions": 50, "deletions": 30, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deed3da9af697ecf073aea855ecce2d22d85ef71/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deed3da9af697ecf073aea855ecce2d22d85ef71/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=deed3da9af697ecf073aea855ecce2d22d85ef71", "patch": "@@ -4258,12 +4258,15 @@ emit_conditional_move (rtx target, enum rtx_code code, rtx op0, rtx op1,\n   if (cmode == VOIDmode)\n     cmode = GET_MODE (op0);\n \n+  enum rtx_code orig_code = code;\n+  bool swapped = false;\n   if (swap_commutative_operands_p (op2, op3)\n       && ((reversed = reversed_comparison_code_parts (code, op0, op1, NULL))\n           != UNKNOWN))\n     {\n       std::swap (op2, op3);\n       code = reversed;\n+      swapped = true;\n     }\n \n   if (mode == VOIDmode)\n@@ -4272,45 +4275,62 @@ emit_conditional_move (rtx target, enum rtx_code code, rtx op0, rtx op1,\n   icode = direct_optab_handler (movcc_optab, mode);\n \n   if (icode == CODE_FOR_nothing)\n-    return 0;\n+    return NULL_RTX;\n \n   if (!target)\n     target = gen_reg_rtx (mode);\n \n-  code = unsignedp ? unsigned_condition (code) : code;\n-  comparison = simplify_gen_relational (code, VOIDmode, cmode, op0, op1);\n-\n-  /* We can get const0_rtx or const_true_rtx in some circumstances.  Just\n-     return NULL and let the caller figure out how best to deal with this\n-     situation.  */\n-  if (!COMPARISON_P (comparison))\n-    return NULL_RTX;\n-\n-  saved_pending_stack_adjust save;\n-  save_pending_stack_adjust (&save);\n-  last = get_last_insn ();\n-  do_pending_stack_adjust ();\n-  prepare_cmp_insn (XEXP (comparison, 0), XEXP (comparison, 1),\n-\t\t    GET_CODE (comparison), NULL_RTX, unsignedp, OPTAB_WIDEN,\n-\t\t    &comparison, &cmode);\n-  if (comparison)\n+  for (int pass = 0; ; pass++)\n     {\n-      struct expand_operand ops[4];\n+      code = unsignedp ? unsigned_condition (code) : code;\n+      comparison = simplify_gen_relational (code, VOIDmode, cmode, op0, op1);\n \n-      create_output_operand (&ops[0], target, mode);\n-      create_fixed_operand (&ops[1], comparison);\n-      create_input_operand (&ops[2], op2, mode);\n-      create_input_operand (&ops[3], op3, mode);\n-      if (maybe_expand_insn (icode, 4, ops))\n+      /* We can get const0_rtx or const_true_rtx in some circumstances.  Just\n+\t punt and let the caller figure out how best to deal with this\n+\t situation.  */\n+      if (COMPARISON_P (comparison))\n \t{\n-\t  if (ops[0].value != target)\n-\t    convert_move (target, ops[0].value, false);\n-\t  return target;\n+\t  saved_pending_stack_adjust save;\n+\t  save_pending_stack_adjust (&save);\n+\t  last = get_last_insn ();\n+\t  do_pending_stack_adjust ();\n+\t  prepare_cmp_insn (XEXP (comparison, 0), XEXP (comparison, 1),\n+\t\t\t    GET_CODE (comparison), NULL_RTX, unsignedp,\n+\t\t\t    OPTAB_WIDEN, &comparison, &cmode);\n+\t  if (comparison)\n+\t    {\n+\t      struct expand_operand ops[4];\n+\n+\t      create_output_operand (&ops[0], target, mode);\n+\t      create_fixed_operand (&ops[1], comparison);\n+\t      create_input_operand (&ops[2], op2, mode);\n+\t      create_input_operand (&ops[3], op3, mode);\n+\t      if (maybe_expand_insn (icode, 4, ops))\n+\t\t{\n+\t\t  if (ops[0].value != target)\n+\t\t    convert_move (target, ops[0].value, false);\n+\t\t  return target;\n+\t\t}\n+\t    }\n+\t  delete_insns_since (last);\n+\t  restore_pending_stack_adjust (&save);\n \t}\n+\n+      if (pass == 1)\n+\treturn NULL_RTX;\n+\n+      /* If the preferred op2/op3 order is not usable, retry with other\n+\t operand order, perhaps it will expand successfully.  */\n+      if (swapped)\n+\tcode = orig_code;\n+      else if ((reversed = reversed_comparison_code_parts (orig_code, op0, op1,\n+\t\t\t\t\t\t\t   NULL))\n+\t       != UNKNOWN)\n+\tcode = reversed;\n+      else\n+\treturn NULL_RTX;\n+      std::swap (op2, op3);\n     }\n-  delete_insns_since (last);\n-  restore_pending_stack_adjust (&save);\n-  return NULL_RTX;\n }\n \n "}, {"sha": "b1594f22791507308e2150096f3749d291b488f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deed3da9af697ecf073aea855ecce2d22d85ef71/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deed3da9af697ecf073aea855ecce2d22d85ef71/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=deed3da9af697ecf073aea855ecce2d22d85ef71", "patch": "@@ -1,5 +1,8 @@\n 2017-04-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/79390\n+\t* gcc.target/i386/pr70465-2.c: Xfail the scan-assembler-not test.\n+\n \tPR sanitizer/80403\n \tPR sanitizer/80404\n \tPR sanitizer/80405"}, {"sha": "d60386d39ce639297ea93becfa480c046901a7aa", "filename": "gcc/testsuite/gcc.target/i386/pr70465-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deed3da9af697ecf073aea855ecce2d22d85ef71/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70465-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deed3da9af697ecf073aea855ecce2d22d85ef71/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70465-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70465-2.c?ref=deed3da9af697ecf073aea855ecce2d22d85ef71", "patch": "@@ -1,7 +1,7 @@\n /* PR target/70465 */\n /* { dg-do compile } */\n /* { dg-options \"-Ofast -mfpmath=387 -fomit-frame-pointer\" } */\n-/* { dg-final { scan-assembler-not \"fxch\\t%st.1\" } } */\n+/* { dg-final { scan-assembler-not \"fxch\\t%st.1\" { xfail *-*-* } } } */\n \n extern float d[1024];\n "}]}