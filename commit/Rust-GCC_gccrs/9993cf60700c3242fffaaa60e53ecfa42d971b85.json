{"sha": "9993cf60700c3242fffaaa60e53ecfa42d971b85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk5M2NmNjA3MDBjMzI0MmZmZmFhYTYwZTUzZWNmYTQyZDk3MWI4NQ==", "commit": {"author": {"name": "Joel Sherrill", "email": "joel@gcc.gnu.org", "date": "2011-02-08T19:19:01Z"}, "committer": {"name": "Joel Sherrill", "email": "joel@gcc.gnu.org", "date": "2011-02-08T19:19:01Z"}, "message": "ffi.c: Add RTEMS support for cache flushing.\n\n2011-02-07  Joel Sherrill <joel.sherrill@oarcorp.com>\n\n\t* libffi/src/m68k/ffi.c: Add RTEMS support for cache flushing.\n\tHandle case when CPU variant does not have long double support.\n\t* libffi/src/m68k/sysv.S: Add support for mc68000, Coldfire,\n\tand cores with soft floating point.\n\nFrom-SVN: r169938", "tree": {"sha": "720a5e2be6e9d3b7feb5562d579672dea14fb590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/720a5e2be6e9d3b7feb5562d579672dea14fb590"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9993cf60700c3242fffaaa60e53ecfa42d971b85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9993cf60700c3242fffaaa60e53ecfa42d971b85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9993cf60700c3242fffaaa60e53ecfa42d971b85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9993cf60700c3242fffaaa60e53ecfa42d971b85/comments", "author": null, "committer": null, "parents": [{"sha": "899fb23dc0a29755ea65c940113d8117e326bd20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/899fb23dc0a29755ea65c940113d8117e326bd20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/899fb23dc0a29755ea65c940113d8117e326bd20"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "0d4df1e235f1a7d97637bc048fad5db170d77a60", "filename": "libffi/src/m68k/ffi.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9993cf60700c3242fffaaa60e53ecfa42d971b85/libffi%2Fsrc%2Fm68k%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9993cf60700c3242fffaaa60e53ecfa42d971b85/libffi%2Fsrc%2Fm68k%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fm68k%2Fffi.c?ref=9993cf60700c3242fffaaa60e53ecfa42d971b85", "patch": "@@ -9,8 +9,12 @@\n \n #include <stdlib.h>\n #include <unistd.h>\n+#ifdef __rtems__\n+void rtems_cache_flush_multiple_data_lines( const void *, size_t );\n+#else\n #include <sys/syscall.h>\n #include <asm/cachectl.h>\n+#endif\n \n void ffi_call_SYSV (extended_cif *,\n \t\t    unsigned, unsigned,\n@@ -144,9 +148,11 @@ ffi_prep_cif_machdep (ffi_cif *cif)\n       cif->flags = CIF_FLAGS_DOUBLE;\n       break;\n \n+#if (FFI_TYPE_LONGDOUBLE != FFI_TYPE_DOUBLE)\n     case FFI_TYPE_LONGDOUBLE:\n       cif->flags = CIF_FLAGS_LDOUBLE;\n       break;\n+#endif\n \n     case FFI_TYPE_POINTER:\n       cif->flags = CIF_FLAGS_POINTER;\n@@ -266,8 +272,12 @@ ffi_prep_closure_loc (ffi_closure* closure,\n   else\n     *(void **)(closure->tramp + 8) = ffi_closure_SYSV;\n \n+#ifdef __rtems__\n+  rtems_cache_flush_multiple_data_lines( codeloc, FFI_TRAMPOLINE_SIZE );\n+#else\n   syscall(SYS_cacheflush, codeloc, FLUSH_SCOPE_LINE,\n \t  FLUSH_CACHE_BOTH, FFI_TRAMPOLINE_SIZE);\n+#endif\n \n   closure->cif  = cif;\n   closure->user_data = user_data;"}, {"sha": "c782f5192c9b5088405b1925c4c9f73f5adc9482", "filename": "libffi/src/m68k/sysv.S", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9993cf60700c3242fffaaa60e53ecfa42d971b85/libffi%2Fsrc%2Fm68k%2Fsysv.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9993cf60700c3242fffaaa60e53ecfa42d971b85/libffi%2Fsrc%2Fm68k%2Fsysv.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fm68k%2Fsysv.S?ref=9993cf60700c3242fffaaa60e53ecfa42d971b85", "patch": "@@ -1,4 +1,5 @@\n /* -----------------------------------------------------------------------\n+\t\n    sysv.S - Copyright (c) 1998 Andreas Schwab\n \t    Copyright (c) 2008 Red Hat, Inc. \n    \n@@ -85,7 +86,12 @@ ffi_call_SYSV:\n \tmove.l\t16(%fp),%d2\n \n \t| If the return value pointer is NULL, assume no return value.\n+\t| NOTE: On the mc68000, tst on an address register is not supported.\n+#if defined(__mc68000__) && !defined(__mcoldfire__)\n+\tcmp.w\t#0, %a1\n+#else\n \ttst.l\t%a1\n+#endif\n \tjbeq\tnoretval\n \n \tbtst\t#0,%d2\n@@ -103,19 +109,34 @@ retlongint:\n retfloat:\n \tbtst\t#2,%d2\n \tjbeq\tretdouble\n+#if defined(__MC68881__)\n \tfmove.s\t%fp0,(%a1)\n+#else\n+\tmove.l\t%d0,(%a1)\n+#endif\n \tjbra\tepilogue\n \n retdouble:\n \tbtst\t#3,%d2\n \tjbeq\tretlongdouble\n+#if defined(__MC68881__)\n \tfmove.d\t%fp0,(%a1)\n+#else\n+\tmove.l\t%d0,(%a1)+\n+\tmove.l\t%d1,(%a1)\n+#endif\n \tjbra\tepilogue\n \n retlongdouble:\n \tbtst\t#4,%d2\n \tjbeq\tretpointer\n+#if defined(__MC68881__)\n \tfmove.x\t%fp0,(%a1)\n+#else\n+\tmove.l\t%d0,(%a1)+\n+\tmove.l\t%d1,(%a1)+\n+\tmove.l\t%d2,(%a1)\n+#endif\n \tjbra\tepilogue\n \n retpointer:\n@@ -178,16 +199,31 @@ ffi_closure_SYSV:\n \tmove.l\t(%a0),%d1\n \tjra\t.Lcls_epilogue\n .Lcls_ret_float:\n+#if defined(__MC68881__)\n \tfmove.s\t(%a0),%fp0\n+#else\n+\tmove.l\t(%a0),%d0\n+#endif\n \tjra\t.Lcls_epilogue\n 1:\n \tlsr.l\t#2,%d0\n \tjne\t1f\n \tjcs\t.Lcls_ret_ldouble\n+#if defined(__MC68881__)\n \tfmove.d\t(%a0),%fp0\n+#else\n+\tmove.l\t(%a0)+,%d0\n+\tmove.l\t(%a0),%d1\n+#endif\n \tjra\t.Lcls_epilogue\n .Lcls_ret_ldouble:\n+#if defined(__MC68881__)\n \tfmove.x\t(%a0),%fp0\n+#else\n+\tmove.l\t(%a0)+,%d0\n+\tmove.l\t(%a0)+,%d1\n+\tmove.l\t(%a0),%d2\n+#endif\n \tjra\t.Lcls_epilogue\n 1:\n \tlsr.l\t#2,%d0"}]}