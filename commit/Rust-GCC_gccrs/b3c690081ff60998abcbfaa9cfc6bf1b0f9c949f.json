{"sha": "b3c690081ff60998abcbfaa9cfc6bf1b0f9c949f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNjNjkwMDgxZmY2MDk5OGFiY2JmYWE5Y2ZjNmJmMWIwZjljOTQ5Zg==", "commit": {"author": {"name": "Philip Herron", "email": "phil@nebuloninc.com", "date": "2020-05-16T20:05:45Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T19:13:04Z"}, "message": "Do inferencing on Expressions needs type match checking", "tree": {"sha": "0efd47f62c138976a848c328140b876c0516648a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0efd47f62c138976a848c328140b876c0516648a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3c690081ff60998abcbfaa9cfc6bf1b0f9c949f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3c690081ff60998abcbfaa9cfc6bf1b0f9c949f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3c690081ff60998abcbfaa9cfc6bf1b0f9c949f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3c690081ff60998abcbfaa9cfc6bf1b0f9c949f/comments", "author": null, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70f49c655b0fe99c744cd9cc4ab2b84ccc14c7f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f49c655b0fe99c744cd9cc4ab2b84ccc14c7f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70f49c655b0fe99c744cd9cc4ab2b84ccc14c7f0"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "1c0fad1c5ece6a49ddc7687a7cd4b334505d943a", "filename": "gcc/rust/analysis/rust-resolution.cc", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3c690081ff60998abcbfaa9cfc6bf1b0f9c949f/gcc%2Frust%2Fanalysis%2Frust-resolution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3c690081ff60998abcbfaa9cfc6bf1b0f9c949f/gcc%2Frust%2Fanalysis%2Frust-resolution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-resolution.cc?ref=b3c690081ff60998abcbfaa9cfc6bf1b0f9c949f", "patch": "@@ -67,15 +67,11 @@ TypeResolution::go ()\n \n void\n TypeResolution::visit (AST::Token &tok)\n-{\n-  printf (\"TOKEN: %s\\n\", tok.as_string ().c_str ());\n-}\n+{}\n \n void\n TypeResolution::visit (AST::DelimTokenTree &delim_tok_tree)\n-{\n-  printf (\"DelimTokenTree: %s\\n\", delim_tok_tree.as_string ().c_str ());\n-}\n+{}\n \n void\n TypeResolution::visit (AST::AttrInputMetaItemContainer &input)\n@@ -84,7 +80,15 @@ TypeResolution::visit (AST::AttrInputMetaItemContainer &input)\n void\n TypeResolution::visit (AST::IdentifierExpr &ident_expr)\n {\n-  printf (\"IdentifierExpr %s\\n\", ident_expr.as_string ().c_str ());\n+  AST::Type *type = NULL;\n+  bool ok = scope.Lookup (ident_expr.ident, &type);\n+  if (!ok)\n+    {\n+      rust_error_at (ident_expr.locus, \"unknown identifier\");\n+      return;\n+    }\n+\n+  typeBuffer.push_back (type);\n }\n \n void\n@@ -216,9 +220,32 @@ TypeResolution::visit (AST::NegationExpr &expr)\n void\n TypeResolution::visit (AST::ArithmeticOrLogicalExpr &expr)\n {\n-  printf (\"ArithmeticOrLogicalExpr: %s\\n\", expr.as_string ().c_str ());\n+  size_t before;\n+  before = typeBuffer.size ();\n   expr.visit_lhs (*this);\n+  if (typeBuffer.size () <= before)\n+    {\n+      rust_error_at (expr.locus, \"unable to determine lhs type\");\n+      return;\n+    }\n+\n+  auto lhsType = typeBuffer.back ();\n+  typeBuffer.pop_back ();\n+\n+  before = typeBuffer.size ();\n   expr.visit_rhs (*this);\n+  if (typeBuffer.size () <= before)\n+    {\n+      rust_error_at (expr.locus, \"unable to determine rhs type\");\n+      return;\n+    }\n+\n+  auto rhsType = typeBuffer.back ();\n+  // not poping because we will be checking they match and the\n+  // scope will require knowledge of the type\n+\n+  // do the lhsType and the rhsType match\n+  // TODO\n }\n \n void"}]}