{"sha": "d9fa599dc7584d89e758a09a3d68982f12d8751c", "node_id": "C_kwDOANBUbNoAKGQ5ZmE1OTlkYzc1ODRkODllNzU4YTA5YTNkNjg5ODJmMTJkODc1MWM", "commit": {"author": {"name": "Sam Feifer", "email": "sfeifer@redhat.com", "date": "2022-07-09T16:08:01Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2022-07-09T16:08:01Z"}, "message": "[PATCH] match.pd: Add new bitwise arithmetic pattern [PR98304]\n\n\tPR tree-optimization/98304\n\ngcc:\n\n\t* match.pd (n - (((n > C1) ? n : C1) & -C2)): New simplification.\n\ngcc/testsuite:\n\n\t* gcc.c-torture/execute/pr98304-2.c: New test.\n\t* gcc.dg/pr98304-1.c: New test.", "tree": {"sha": "ff71ed921050fc43db5734a79c56ddbf972c6951", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff71ed921050fc43db5734a79c56ddbf972c6951"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9fa599dc7584d89e758a09a3d68982f12d8751c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9fa599dc7584d89e758a09a3d68982f12d8751c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9fa599dc7584d89e758a09a3d68982f12d8751c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9fa599dc7584d89e758a09a3d68982f12d8751c/comments", "author": {"login": "sfeifer", "id": 64805811, "node_id": "MDQ6VXNlcjY0ODA1ODEx", "avatar_url": "https://avatars.githubusercontent.com/u/64805811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfeifer", "html_url": "https://github.com/sfeifer", "followers_url": "https://api.github.com/users/sfeifer/followers", "following_url": "https://api.github.com/users/sfeifer/following{/other_user}", "gists_url": "https://api.github.com/users/sfeifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfeifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfeifer/subscriptions", "organizations_url": "https://api.github.com/users/sfeifer/orgs", "repos_url": "https://api.github.com/users/sfeifer/repos", "events_url": "https://api.github.com/users/sfeifer/events{/privacy}", "received_events_url": "https://api.github.com/users/sfeifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46dc26fdfbf3e64f82188e21aa6a13ec23108e8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46dc26fdfbf3e64f82188e21aa6a13ec23108e8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46dc26fdfbf3e64f82188e21aa6a13ec23108e8e"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "8bbc0dbd5cd31692f242274089a51fe56cb93fdd", "filename": "gcc/match.pd", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9fa599dc7584d89e758a09a3d68982f12d8751c/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9fa599dc7584d89e758a09a3d68982f12d8751c/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=d9fa599dc7584d89e758a09a3d68982f12d8751c", "patch": "@@ -8026,3 +8026,15 @@ and,\n (match (bitwise_induction_p @0 @2 @3)\n  (bit_not\n   (nop_convert1? (bit_xor@0 (convert2? (lshift integer_onep@1 @2)) @3))))\n+\n+/* n - (((n > C1) ? n : C1) & -C2) ->  n & C1 for unsigned case.\n+   n - (((n > C1) ? n : C1) & -C2) ->  (n <= C1) ? n : (n & C1) for signed case.  */\n+(simplify\n+  (minus @0 (bit_and (max @0 INTEGER_CST@1) INTEGER_CST@2))\n+  (with { auto i = wi::neg (wi::to_wide (@2)); }\n+  /* Check if -C2 is a power of 2 and C1 = -C2 - 1.  */\n+    (if (wi::popcount (i) == 1\n+         && (wi::to_wide (@1)) == (i - 1))\n+      (if (TYPE_UNSIGNED (TREE_TYPE (@0)))\n+        (bit_and @0 @1)\n+      (cond (le @0 @1) @0 (bit_and @0 @1))))))"}, {"sha": "114c612db3baffabd1acd101f7ecc361bd3b57d4", "filename": "gcc/testsuite/gcc.c-torture/execute/pr98304-2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9fa599dc7584d89e758a09a3d68982f12d8751c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr98304-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9fa599dc7584d89e758a09a3d68982f12d8751c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr98304-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr98304-2.c?ref=d9fa599dc7584d89e758a09a3d68982f12d8751c", "patch": "@@ -0,0 +1,37 @@\n+/* PR tree-optimization/98304 */\n+\n+#include \"../../gcc.dg/pr98304-1.c\"\n+\n+/* Runtime tests.  */\n+int main() {\n+\n+    /* Signed tests.  */\n+    if (foo(-42) != -42\n+        || foo(0) != 0\n+        || foo(63) != 63\n+        || foo(64) != 0\n+        || foo(65) != 1\n+        || foo(99) != 35) {\n+            __builtin_abort();\n+        }\n+    \n+    /* Unsigned tests.  */\n+    if (bar(42) != 42\n+        || bar(0) != 0\n+        || bar(63) != 63\n+        || bar(64) != 0\n+        || bar(65) != 1\n+        || bar(99) != 35) {\n+            __builtin_abort();\n+        }\n+\n+    /* Should not simplify.  */\n+    if (corge(13) != 13\n+        || thud(13) != 13\n+        || qux(13) != 13\n+        || quux(13) != 13) {\n+            __builtin_abort();\n+        }\n+\n+    return 0;\n+}"}, {"sha": "dce54ddffe8020b0d358c6cb933a89707088da23", "filename": "gcc/testsuite/gcc.dg/pr98304-1.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9fa599dc7584d89e758a09a3d68982f12d8751c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98304-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9fa599dc7584d89e758a09a3d68982f12d8751c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98304-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98304-1.c?ref=d9fa599dc7584d89e758a09a3d68982f12d8751c", "patch": "@@ -0,0 +1,57 @@\n+/* PR tree-optimization/98304 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+/* Signed test function.  */\n+__attribute__((noipa)) int foo(int n) {\n+    return n - (((n > 63) ? n : 63) & -64);\n+}\n+\n+/* Unsigned test function.  */\n+__attribute__((noipa)) unsigned int bar(unsigned int n) {\n+    return n - (((n > 63) ? n : 63) & -64);\n+}\n+\n+/* Different power of 2.  */\n+__attribute__((noipa)) int goo(int n) {\n+    return n - (((n > 31) ? n : 31) & -32);\n+}\n+\n+/* Commutative property (should be identical to foo)  */\n+__attribute__((noipa)) int baz(int n) {\n+    return n - (((64 > n) ? 63 : n) & -64);\n+}\n+\n+/* < instead of >.  */\n+__attribute__((noipa)) int fred(int n) {\n+    return n - (((63 < n) ? n : 63) & -64);\n+}\n+\n+/* Constant is not a power of 2 so should not simplify.  */\n+__attribute__((noipa)) int qux(int n) {\n+    return n - (((n > 62) ? n : 62) & -63);\n+}\n+\n+/* Constant is not a power of 2 so should not simplify.  */\n+__attribute__((noipa)) unsigned int quux(unsigned int n) {\n+    return n - (((n > 62) ? n : 62) & -63);\n+}\n+\n+/* Constant is a variable so should not simplify.  */\n+__attribute__((noipa)) int waldo(int n, int x) {\n+    return n - (((n > 63) ? n : 63) & x);\n+}\n+\n+/* Difference between constants is not -1.  */\n+__attribute__((noipa)) int corge(int n) {\n+    return n - (((n > 1) ? n : 1) & -64);\n+}\n+\n+/* Difference between constants is not -1.  */\n+__attribute__((noipa)) unsigned int thud(unsigned int n)\n+{\n+    return n - (((n > 1) ? n : 1) & -64);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \" - \" 5 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" <= \" 4 \"optimized\" } } */"}]}