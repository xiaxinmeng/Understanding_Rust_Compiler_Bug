{"sha": "bb072d1c1716ecb6cd99f43a5dbc4855931302d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIwNzJkMWMxNzE2ZWNiNmNkOTlmNDNhNWRiYzQ4NTU5MzEzMDJkMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-06T12:40:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-06T12:40:07Z"}, "message": "[multiple changes]\n\n2016-07-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_aggr.adb Remove with and use clauses for Exp_Ch11 and Inline.\n\t(Initialize_Array_Component): Protect the initialization\n\tstatements in an abort defer / undefer block when the associated\n\tcomponent is controlled.\n\t(Initialize_Record_Component): Protect the initialization statements\n\tin an abort defer / undefer block when the associated component is\n\tcontrolled.\n\t(Process_Transient_Component_Completion): Use Build_Abort_Undefer_Block\n\tto create an abort defer / undefer block.\n\t* exp_ch3.adb Remove with and use clauses for Exp_ch11 and Inline.\n\t(Default_Initialize_Object): Use Build_Abort_Undefer_Block to\n\tcreate an abort defer / undefer block.\n\t* exp_ch5.adb (Expand_N_Assignment_Statement): Mark an abort\n\tdefer / undefer block as such.\n\t* exp_ch9.adb (Find_Enclosing_Context): Do not consider an abort\n\tdefer / undefer block as a suitable context for an activation\n\tchain or a master.\n\t* exp_util.adb Add with and use clauses for Exp_Ch11.\n\t(Build_Abort_Undefer_Block): New routine.\n\t* exp_util.ads (Build_Abort_Undefer_Block): New routine.\n\t* sinfo.adb (Is_Abort_Block): New routine.\n\t(Set_Is_Abort_Block): New routine.\n\t* sinfo.ads New attribute Is_Abort_Block along with occurrences\n\tin nodes.\n\t(Is_Abort_Block): New routine along with pragma Inline.\n\t(Set_Is_Abort_Block): New routine along with pragma Inline.\n\n2016-07-06  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_ch4.adb (Analyze_One_Call): Add a conditional to handle\n\tdisambiguation.\n\nFrom-SVN: r238045", "tree": {"sha": "620ce7d743d7bff057b8ab91942a5638a830c51b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/620ce7d743d7bff057b8ab91942a5638a830c51b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb072d1c1716ecb6cd99f43a5dbc4855931302d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb072d1c1716ecb6cd99f43a5dbc4855931302d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb072d1c1716ecb6cd99f43a5dbc4855931302d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/comments", "author": null, "committer": null, "parents": [{"sha": "937e96763e42c48c29e3a5edf2eea3fb2c59fb27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/937e96763e42c48c29e3a5edf2eea3fb2c59fb27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/937e96763e42c48c29e3a5edf2eea3fb2c59fb27"}], "stats": {"total": 449, "additions": 360, "deletions": 89}, "files": [{"sha": "764ba8d63e72cb16f5538b439f63409f4801b3e8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bb072d1c1716ecb6cd99f43a5dbc4855931302d3", "patch": "@@ -1,3 +1,37 @@\n+2016-07-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_aggr.adb Remove with and use clauses for Exp_Ch11 and Inline.\n+\t(Initialize_Array_Component): Protect the initialization\n+\tstatements in an abort defer / undefer block when the associated\n+\tcomponent is controlled.\n+\t(Initialize_Record_Component): Protect the initialization statements\n+\tin an abort defer / undefer block when the associated component is\n+\tcontrolled.\n+\t(Process_Transient_Component_Completion): Use Build_Abort_Undefer_Block\n+\tto create an abort defer / undefer block.\n+\t* exp_ch3.adb Remove with and use clauses for Exp_ch11 and Inline.\n+\t(Default_Initialize_Object): Use Build_Abort_Undefer_Block to\n+\tcreate an abort defer / undefer block.\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): Mark an abort\n+\tdefer / undefer block as such.\n+\t* exp_ch9.adb (Find_Enclosing_Context): Do not consider an abort\n+\tdefer / undefer block as a suitable context for an activation\n+\tchain or a master.\n+\t* exp_util.adb Add with and use clauses for Exp_Ch11.\n+\t(Build_Abort_Undefer_Block): New routine.\n+\t* exp_util.ads (Build_Abort_Undefer_Block): New routine.\n+\t* sinfo.adb (Is_Abort_Block): New routine.\n+\t(Set_Is_Abort_Block): New routine.\n+\t* sinfo.ads New attribute Is_Abort_Block along with occurrences\n+\tin nodes.\n+\t(Is_Abort_Block): New routine along with pragma Inline.\n+\t(Set_Is_Abort_Block): New routine along with pragma Inline.\n+\n+2016-07-06  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_One_Call): Add a conditional to handle\n+\tdisambiguation.\n+\n 2016-07-06  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* einfo.adb Flag252 is now used as Is_Finalized_Transient. Flag295"}, {"sha": "33374d358828320fb160cd0b33e67666944b3989", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 141, "deletions": 43, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=bb072d1c1716ecb6cd99f43a5dbc4855931302d3", "patch": "@@ -35,12 +35,10 @@ with Exp_Ch3;  use Exp_Ch3;\n with Exp_Ch6;  use Exp_Ch6;\n with Exp_Ch7;  use Exp_Ch7;\n with Exp_Ch9;  use Exp_Ch9;\n-with Exp_Ch11; use Exp_Ch11;\n with Exp_Disp; use Exp_Disp;\n with Exp_Tss;  use Exp_Tss;\n with Fname;    use Fname;\n with Freeze;   use Freeze;\n-with Inline;   use Inline;\n with Itypes;   use Itypes;\n with Lib;      use Lib;\n with Namet;    use Namet;\n@@ -1121,10 +1119,39 @@ package body Exp_Aggr is\n             Init_Expr : Node_Id;\n             Stmts     : List_Id)\n          is\n+            Exceptions_OK : constant Boolean :=\n+                              not Restriction_Active\n+                                    (No_Exception_Propagation);\n+\n+            Finalization_OK : constant Boolean :=\n+                                Present (Comp_Typ)\n+                                  and then Needs_Finalization (Comp_Typ);\n+\n             Full_Typ  : constant Entity_Id := Underlying_Type (Comp_Typ);\n+            Blk_Stmts : List_Id;\n             Init_Stmt : Node_Id;\n \n          begin\n+            --  Protect the initialization statements from aborts. Generate:\n+\n+            --    Abort_Defer;\n+\n+            if Finalization_OK and Abort_Allowed then\n+               if Exceptions_OK then\n+                  Blk_Stmts := New_List;\n+               else\n+                  Blk_Stmts := Stmts;\n+               end if;\n+\n+               Append_To (Blk_Stmts, Build_Runtime_Call (Loc, RE_Abort_Defer));\n+\n+            --  Otherwise aborts are not allowed. All generated code is added\n+            --  directly to the input list.\n+\n+            else\n+               Blk_Stmts := Stmts;\n+            end if;\n+\n             --  Initialize the array element. Generate:\n \n             --    Arr_Comp := Init_Expr;\n@@ -1148,18 +1175,15 @@ package body Exp_Aggr is\n             --       Arr_Comp := Init_Expr;\n             --    end;\n \n-            if Present (Comp_Typ)\n-              and then Needs_Finalization (Comp_Typ)\n-              and then Is_Array_Type (Comp_Typ)\n-            then\n+            if Finalization_OK and then Is_Array_Type (Comp_Typ) then\n                Init_Stmt :=\n                  Make_Block_Statement (Loc,\n                    Handled_Statement_Sequence =>\n                      Make_Handled_Sequence_Of_Statements (Loc,\n                        Statements => New_List (Init_Stmt)));\n             end if;\n \n-            Append_To (Stmts, Init_Stmt);\n+            Append_To (Blk_Stmts, Init_Stmt);\n \n             --  Adjust the tag due to a possible view conversion. Generate:\n \n@@ -1169,7 +1193,7 @@ package body Exp_Aggr is\n               and then Present (Comp_Typ)\n               and then Is_Tagged_Type (Comp_Typ)\n             then\n-               Append_To (Stmts,\n+               Append_To (Blk_Stmts,\n                  Make_OK_Assignment_Statement (Loc,\n                    Name       =>\n                      Make_Selected_Component (Loc,\n@@ -1191,19 +1215,54 @@ package body Exp_Aggr is\n \n             --    [Deep_]Adjust (Arr_Comp);\n \n-            if Present (Comp_Typ)\n-              and then Needs_Finalization (Comp_Typ)\n+            if Finalization_OK\n               and then not Is_Limited_Type (Comp_Typ)\n               and then not\n                 (Is_Array_Type (Comp_Typ)\n                   and then Is_Controlled (Component_Type (Comp_Typ))\n                   and then Nkind (Expr) = N_Aggregate)\n             then\n-               Append_To (Stmts,\n+               Append_To (Blk_Stmts,\n                  Make_Adjust_Call\n                    (Obj_Ref => New_Copy_Tree (Arr_Comp),\n                     Typ     => Comp_Typ));\n             end if;\n+\n+            --  Complete the protection of the initialization statements\n+\n+            if Finalization_OK and Abort_Allowed then\n+\n+               --  Wrap the initialization statements in a block to catch a\n+               --  potential exception. Generate:\n+\n+               --    begin\n+               --       Abort_Defer;\n+               --       Arr_Comp := Init_Expr;\n+               --       Arr_Comp._tag := Full_TypP;\n+               --       [Deep_]Adjust (Arr_Comp);\n+               --    at end\n+               --       Abort_Undefer_Direct;\n+               --    end;\n+\n+               if Exceptions_OK then\n+                  Append_To (Stmts,\n+                    Build_Abort_Undefer_Block (Loc,\n+                      Stmts   => Blk_Stmts,\n+                      Context => N));\n+\n+               --  Otherwise exceptions are not propagated. Generate:\n+\n+               --    Abort_Defer;\n+               --    Arr_Comp := Init_Expr;\n+               --    Arr_Comp._tag := Full_TypP;\n+               --    [Deep_]Adjust (Arr_Comp);\n+               --    Abort_Undefer;\n+\n+               else\n+                  Append_To (Blk_Stmts,\n+                    Build_Runtime_Call (Loc, RE_Abort_Undefer));\n+               end if;\n+            end if;\n          end Initialize_Array_Component;\n \n          -------------------------------------\n@@ -2772,10 +2831,36 @@ package body Exp_Aggr is\n          Init_Expr : Node_Id;\n          Stmts     : List_Id)\n       is\n+         Exceptions_OK : constant Boolean :=\n+                           not Restriction_Active (No_Exception_Propagation);\n+\n+         Finalization_OK : constant Boolean := Needs_Finalization (Comp_Typ);\n+\n          Full_Typ  : constant Entity_Id := Underlying_Type (Comp_Typ);\n+         Blk_Stmts : List_Id;\n          Init_Stmt : Node_Id;\n \n       begin\n+         --  Protect the initialization statements from aborts. Generate:\n+\n+         --    Abort_Defer;\n+\n+         if Finalization_OK and Abort_Allowed then\n+            if Exceptions_OK then\n+               Blk_Stmts := New_List;\n+            else\n+               Blk_Stmts := Stmts;\n+            end if;\n+\n+            Append_To (Blk_Stmts, Build_Runtime_Call (Loc, RE_Abort_Defer));\n+\n+         --  Otherwise aborts are not allowed. All generated code is added\n+         --  directly to the input list.\n+\n+         else\n+            Blk_Stmts := Stmts;\n+         end if;\n+\n          --  Initialize the record component. Generate:\n \n          --    Rec_Comp := Init_Expr;\n@@ -2789,14 +2874,14 @@ package body Exp_Aggr is\n              Expression => Init_Expr);\n          Set_No_Ctrl_Actions (Init_Stmt);\n \n-         Append_To (Stmts, Init_Stmt);\n+         Append_To (Blk_Stmts, Init_Stmt);\n \n          --  Adjust the tag due to a possible view conversion. Generate:\n \n          --    Rec_Comp._tag := Full_TypeP;\n \n          if Tagged_Type_Expansion and then Is_Tagged_Type (Comp_Typ) then\n-            Append_To (Stmts,\n+            Append_To (Blk_Stmts,\n               Make_OK_Assignment_Statement (Loc,\n                 Name       =>\n                   Make_Selected_Component (Loc,\n@@ -2816,14 +2901,48 @@ package body Exp_Aggr is\n \n          --    [Deep_]Adjust (Rec_Comp);\n \n-         if Needs_Finalization (Comp_Typ)\n-           and then not Is_Limited_Type (Comp_Typ)\n-         then\n-            Append_To (Stmts,\n+         if Finalization_OK and then not Is_Limited_Type (Comp_Typ) then\n+            Append_To (Blk_Stmts,\n               Make_Adjust_Call\n                 (Obj_Ref => New_Copy_Tree (Rec_Comp),\n                  Typ     => Comp_Typ));\n          end if;\n+\n+         --  Complete the protection of the initialization statements\n+\n+         if Finalization_OK and Abort_Allowed then\n+\n+            --  Wrap the initialization statements in a block to catch a\n+            --  potential exception. Generate:\n+\n+            --    begin\n+            --       Abort_Defer;\n+            --       Rec_Comp := Init_Expr;\n+            --       Rec_Comp._tag := Full_TypP;\n+            --       [Deep_]Adjust (Rec_Comp);\n+            --    at end\n+            --       Abort_Undefer_Direct;\n+            --    end;\n+\n+            if Exceptions_OK then\n+               Append_To (Stmts,\n+                 Build_Abort_Undefer_Block (Loc,\n+                   Stmts   => Blk_Stmts,\n+                   Context => N));\n+\n+            --  Otherwise exceptions are not propagated. Generate:\n+\n+            --    Abort_Defer;\n+            --    Rec_Comp := Init_Expr;\n+            --    Rec_Comp._tag := Full_TypP;\n+            --    [Deep_]Adjust (Rec_Comp);\n+            --    Abort_Undefer;\n+\n+            else\n+               Append_To (Blk_Stmts,\n+                 Build_Runtime_Call (Loc, RE_Abort_Undefer));\n+            end if;\n+         end if;\n       end Initialize_Record_Component;\n \n       -------------------------\n@@ -7804,43 +7923,22 @@ package body Exp_Aggr is\n       --       Hook := null;\n       --       [Deep_]Finalize (Res.all);\n       --    at end\n-      --       Abort_Undefer;\n+      --       Abort_Undefer_Direct;\n       --    end;\n \n       elsif Abort_Allowed then\n          Abort_Only : declare\n             Blk_Stmts : constant List_Id := New_List;\n \n-            AUD     : Entity_Id;\n-            Blk     : Node_Id;\n-            Blk_HSS : Node_Id;\n-            Blk_Id  : Entity_Id;\n-\n          begin\n             Append_To (Blk_Stmts, Build_Runtime_Call (Loc, RE_Abort_Defer));\n             Append_To (Blk_Stmts, Hook_Clear);\n             Append_To (Blk_Stmts, Fin_Call);\n \n-            AUD := RTE (RE_Abort_Undefer_Direct);\n-\n-            Blk_HSS :=\n-              Make_Handled_Sequence_Of_Statements (Loc,\n-                Statements  => Blk_Stmts,\n-                At_End_Proc => New_Occurrence_Of (AUD, Loc));\n-\n-            Blk :=\n-              Make_Block_Statement (Loc,\n-                Handled_Statement_Sequence => Blk_HSS);\n-\n-            Add_Block_Identifier (Blk, Blk_Id);\n-            Expand_At_End_Handler (Blk_HSS, Blk_Id);\n-\n-            --  Present the Abort_Undefer_Direct function to the back end so\n-            --  that it can inline the call to the function.\n-\n-            Add_Inlined_Body (AUD, Aggr);\n-\n-            Append_To (Stmts, Blk);\n+            Append_To (Stmts,\n+              Build_Abort_Undefer_Block (Loc,\n+                Stmts   => Blk_Stmts,\n+                Context => Aggr));\n          end Abort_Only;\n \n       --  Otherwise generate:"}, {"sha": "6f7ae0a002b6fed6035c9c4e4b59306d3e29415e", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 10, "deletions": 32, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=bb072d1c1716ecb6cd99f43a5dbc4855931302d3", "patch": "@@ -34,7 +34,6 @@ with Exp_Ch4;  use Exp_Ch4;\n with Exp_Ch6;  use Exp_Ch6;\n with Exp_Ch7;  use Exp_Ch7;\n with Exp_Ch9;  use Exp_Ch9;\n-with Exp_Ch11; use Exp_Ch11;\n with Exp_Dbug; use Exp_Dbug;\n with Exp_Disp; use Exp_Disp;\n with Exp_Dist; use Exp_Dist;\n@@ -44,7 +43,6 @@ with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n with Freeze;   use Freeze;\n with Ghost;    use Ghost;\n-with Inline;   use Inline;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n@@ -5519,16 +5517,12 @@ package body Exp_Ch3 is\n          Exceptions_OK : constant Boolean :=\n                            not Restriction_Active (No_Exception_Propagation);\n \n-         Abrt_Blk    : Node_Id;\n-         Abrt_Blk_Id : Entity_Id;\n-         Abrt_HSS    : Node_Id;\n-         Aggr_Init   : Node_Id;\n-         AUD         : Entity_Id;\n-         Comp_Init   : List_Id := No_List;\n-         Fin_Call    : Node_Id;\n-         Init_Stmts  : List_Id := No_List;\n-         Obj_Init    : Node_Id := Empty;\n-         Obj_Ref     : Node_Id;\n+         Aggr_Init  : Node_Id;\n+         Comp_Init  : List_Id := No_List;\n+         Fin_Call   : Node_Id;\n+         Init_Stmts : List_Id := No_List;\n+         Obj_Init   : Node_Id := Empty;\n+         Obj_Ref    : Node_Id;\n \n       --  Start of processing for Default_Initialize_Object\n \n@@ -5726,26 +5720,10 @@ package body Exp_Ch3 is\n             --    end;\n \n             if Exceptions_OK then\n-               AUD := RTE (RE_Abort_Undefer_Direct);\n-\n-               Abrt_HSS :=\n-                 Make_Handled_Sequence_Of_Statements (Loc,\n-                   Statements  => Init_Stmts,\n-                   At_End_Proc => New_Occurrence_Of (AUD, Loc));\n-\n-               Abrt_Blk :=\n-                 Make_Block_Statement (Loc,\n-                   Handled_Statement_Sequence => Abrt_HSS);\n-\n-               Add_Block_Identifier  (Abrt_Blk, Abrt_Blk_Id);\n-               Expand_At_End_Handler (Abrt_HSS, Abrt_Blk_Id);\n-\n-               --  Present the Abort_Undefer_Direct function to the backend so\n-               --  that it can inline the call to the function.\n-\n-               Add_Inlined_Body (AUD, N);\n-\n-               Init_Stmts := New_List (Abrt_Blk);\n+               Init_Stmts := New_List (\n+                 Build_Abort_Undefer_Block (Loc,\n+                   Stmts   => Init_Stmts,\n+                   Context => N));\n \n             --  Otherwise exceptions are not propagated. Generate:\n "}, {"sha": "77342299e82dc68e1e5ebaa32ef8a6192212552e", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=bb072d1c1716ecb6cd99f43a5dbc4855931302d3", "patch": "@@ -2371,6 +2371,8 @@ package body Exp_Ch5 is\n                   AUD : constant Entity_Id := RTE (RE_Abort_Undefer_Direct);\n \n                begin\n+                  Set_Is_Abort_Block (N);\n+\n                   Set_Scope (Blk, Current_Scope);\n                   Set_Etype (Blk, Standard_Void_Type);\n                   Set_Identifier (N, New_Occurrence_Of (Blk, Sloc (N)));"}, {"sha": "9591e19f2d338b844341df71e4be195c9f706514", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=bb072d1c1716ecb6cd99f43a5dbc4855931302d3", "patch": "@@ -13217,17 +13217,30 @@ package body Exp_Ch9 is\n       --  package or return statement.\n \n       Context := Parent (N);\n-      while not Nkind_In (Context, N_Block_Statement,\n-                                   N_Entry_Body,\n-                                   N_Extended_Return_Statement,\n-                                   N_Package_Body,\n-                                   N_Package_Declaration,\n-                                   N_Subprogram_Body,\n-                                   N_Task_Body)\n-      loop\n+      while Present (Context) loop\n+         if Nkind_In (Context, N_Entry_Body,\n+                               N_Extended_Return_Statement,\n+                               N_Package_Body,\n+                               N_Package_Declaration,\n+                               N_Subprogram_Body,\n+                               N_Task_Body)\n+         then\n+            exit;\n+\n+         --  Do not consider block created to protect a list of statements with\n+         --  an Abort_Defer / Abort_Undefer_Direct pair.\n+\n+         elsif Nkind (Context) = N_Block_Statement\n+           and then not Is_Abort_Block (Context)\n+         then\n+            exit;\n+         end if;\n+\n          Context := Parent (Context);\n       end loop;\n \n+      pragma Assert (Present (Context));\n+\n       --  Extract the constituents of the context\n \n       if Nkind (Context) = N_Extended_Return_Statement then\n@@ -13258,8 +13271,6 @@ package body Exp_Ch9 is\n          end if;\n \n       else\n-         Context_Decls := Declarations (Context);\n-\n          if Nkind (Context) = N_Block_Statement then\n             Context_Id := Entity (Identifier (Context));\n \n@@ -13283,9 +13294,10 @@ package body Exp_Ch9 is\n          else\n             raise Program_Error;\n          end if;\n+\n+         Context_Decls := Declarations (Context);\n       end if;\n \n-      pragma Assert (Present (Context));\n       pragma Assert (Present (Context_Id));\n       pragma Assert (Present (Context_Decls));\n    end Find_Enclosing_Context;"}, {"sha": "6d6d7546597d8db490df7f1f2217e0b8da4ac3a8", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=bb072d1c1716ecb6cd99f43a5dbc4855931302d3", "patch": "@@ -34,6 +34,7 @@ with Errout;   use Errout;\n with Exp_Aggr; use Exp_Aggr;\n with Exp_Ch6;  use Exp_Ch6;\n with Exp_Ch7;  use Exp_Ch7;\n+with Exp_Ch11; use Exp_Ch11;\n with Ghost;    use Ghost;\n with Inline;   use Inline;\n with Itypes;   use Itypes;\n@@ -724,7 +725,7 @@ package body Exp_Util is\n          --  For deallocation of class-wide types we obtain the value of\n          --  alignment from the Type Specific Record of the deallocated object.\n          --  This is needed because the frontend expansion of class-wide types\n-         --  into equivalent types confuses the backend.\n+         --  into equivalent types confuses the back end.\n \n          else\n             --  Generate:\n@@ -930,6 +931,59 @@ package body Exp_Util is\n       end;\n    end Build_Allocate_Deallocate_Proc;\n \n+   -------------------------------\n+   -- Build_Abort_Undefer_Block --\n+   -------------------------------\n+\n+   function Build_Abort_Undefer_Block\n+     (Loc     : Source_Ptr;\n+      Stmts   : List_Id;\n+      Context : Node_Id) return Node_Id\n+   is\n+      Exceptions_OK : constant Boolean :=\n+                        not Restriction_Active (No_Exception_Propagation);\n+\n+      AUD    : Entity_Id;\n+      Blk    : Node_Id;\n+      Blk_Id : Entity_Id;\n+      HSS    : Node_Id;\n+\n+   begin\n+      --  The block should be generated only when undeferring abort in the\n+      --  context of a potential exception.\n+\n+      pragma Assert (Abort_Allowed and Exceptions_OK);\n+\n+      --  Generate:\n+      --    begin\n+      --       <Stmts>\n+      --    at end\n+      --       Abort_Undefer_Direct;\n+      --    end;\n+\n+      AUD := RTE (RE_Abort_Undefer_Direct);\n+\n+      HSS :=\n+        Make_Handled_Sequence_Of_Statements (Loc,\n+          Statements  => Stmts,\n+          At_End_Proc => New_Occurrence_Of (AUD, Loc));\n+\n+      Blk :=\n+        Make_Block_Statement (Loc,\n+          Handled_Statement_Sequence => HSS);\n+      Set_Is_Abort_Block (Blk);\n+\n+      Add_Block_Identifier  (Blk, Blk_Id);\n+      Expand_At_End_Handler (HSS, Blk_Id);\n+\n+      --  Present the Abort_Undefer_Direct function to the back end to inline\n+      --  the call to the routine.\n+\n+      Add_Inlined_Body (AUD, Context);\n+\n+      return Blk;\n+   end Build_Abort_Undefer_Block;\n+\n    --------------------------\n    -- Build_Procedure_Form --\n    --------------------------\n@@ -2441,7 +2495,7 @@ package body Exp_Util is\n       --  If the type of the expression is an internally generated type it\n       --  may not be necessary to create a new subtype. However there are two\n       --  exceptions: references to the current instances, and aliased array\n-      --  object declarations for which the backend needs to create a template.\n+      --  object declarations for which the back end has to create a template.\n \n       elsif Is_Constrained (Exp_Typ)\n         and then not Is_Class_Wide_Type (Unc_Type)\n@@ -9227,7 +9281,7 @@ package body Exp_Util is\n       --  Note on checks that could raise Constraint_Error. Strictly, if we\n       --  take advantage of 11.6, these checks do not count as side effects.\n       --  However, we would prefer to consider that they are side effects,\n-      --  since the backend CSE does not work very well on expressions which\n+      --  since the back end CSE does not work very well on expressions which\n       --  can raise Constraint_Error. On the other hand if we don't consider\n       --  them to be side effect free, then we get some awkward expansions\n       --  in -gnato mode, resulting in code insertions at a point where we"}, {"sha": "b82d40869b187a8be37fac0417d086ca04ad903c", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=bb072d1c1716ecb6cd99f43a5dbc4855931302d3", "patch": "@@ -238,6 +238,15 @@ package Exp_Util is\n    --  must be a free statement. If flag Is_Allocate is set, the generated\n    --  routine is allocate, deallocate otherwise.\n \n+   function Build_Abort_Undefer_Block\n+     (Loc     : Source_Ptr;\n+      Stmts   : List_Id;\n+      Context : Node_Id) return Node_Id;\n+   --  Wrap statements Stmts in a block where the AT END handler contains a\n+   --  call to Abort_Undefer_Direct. Context is the node which prompted the\n+   --  inlining of the abort undefer routine. Note that this routine does\n+   --  not install a call to Abort_Defer.\n+\n    procedure Build_Procedure_Form (N : Node_Id);\n    --  Create a procedure declaration which emulates the behavior of a function\n    --  that returns an array type, for C-compatible generation."}, {"sha": "5bbc1a34d17e93a3d6d302d5a3ee2413de9658f8", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=bb072d1c1716ecb6cd99f43a5dbc4855931302d3", "patch": "@@ -3480,6 +3480,61 @@ package body Sem_Ch4 is\n                   Next_Actual (Actual);\n                   Next_Formal (Formal);\n \n+               --  In a complex case where an enclosing generic and a nested\n+               --  generic package, both declared with partially parameterized\n+               --  formal subprograms with the same names, are instantiated\n+               --  with the same type, the types of the actual parameter and\n+               --  that of the formal may appear incompatible at first sight.\n+\n+               --   generic\n+               --      type Outer_T is private;\n+               --      with function Func (Formal : Outer_T)\n+               --                         return ... is <>;\n+\n+               --   package Outer_Gen is\n+               --      generic\n+               --         type Inner_T is private;\n+               --         with function Func (Formal : Inner_T)   --  (1)\n+               --                            return ... is <>;\n+\n+               --      package Inner_Gen is\n+               --         function Inner_Func (Formal : Inner_T)  --  (2)\n+               --                             return ... is (Func (Formal));\n+               --      end Inner_Gen;\n+               --   end Outer_Generic;\n+\n+               --   package Outer_Inst is new Outer_Gen (Actual_T);\n+               --   package Inner_Inst is new Outer_Inst.Inner_Gen (Actual_T);\n+\n+               --  In the example above, the type of parameter\n+               --  Inner_Func.Formal at (2) is incompatible with the type of\n+               --  Func.Formal at (1) in the context of instantiations\n+               --  Outer_Inst and Inner_Inst. In reality both types are\n+               --  generic actual subtypes renaming base type Actual_T as\n+               --  part of the generic prologues for the instantiations.\n+\n+               --  Recognize this case and add a type conversion to allow\n+               --  this kind of generic actual subtype conformance. Note that\n+               --  this is done only when the call is non-overloaded because\n+               --  the resolution mechanism already has the means to\n+               --  disambiguate similar cases.\n+\n+               elsif not Is_Overloaded (Name (N))\n+                 and then Is_Type (Etype (Actual))\n+                 and then Is_Type (Etype (Formal))\n+                 and then Is_Generic_Actual_Type (Etype (Actual))\n+                 and then Is_Generic_Actual_Type (Etype (Formal))\n+                 and then Base_Type (Etype (Actual)) =\n+                          Base_Type (Etype (Formal))\n+               then\n+                  Rewrite (Actual,\n+                    Convert_To (Etype (Formal), Relocate_Node (Actual)));\n+                  Analyze_And_Resolve (Actual, Etype (Formal));\n+                  Next_Actual (Actual);\n+                  Next_Formal (Formal);\n+\n+               --  Handle failed type check\n+\n                else\n                   if Debug_Flag_E then\n                      Write_Str (\" type checking fails in call \");"}, {"sha": "9738101d86c751c5cc96ff5f4641887e05021d1e", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=bb072d1c1716ecb6cd99f43a5dbc4855931302d3", "patch": "@@ -1752,6 +1752,14 @@ package body Sinfo is\n       return Uint3 (N);\n    end Intval;\n \n+   function Is_Abort_Block\n+     (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Block_Statement);\n+      return Flag4 (N);\n+   end Is_Abort_Block;\n+\n    function Is_Accessibility_Actual\n      (N : Node_Id) return Boolean is\n    begin\n@@ -5015,6 +5023,14 @@ package body Sinfo is\n       Set_Uint3 (N, Val);\n    end Set_Intval;\n \n+   procedure Set_Is_Abort_Block\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Block_Statement);\n+      Set_Flag4 (N, Val);\n+   end Set_Is_Abort_Block;\n+\n    procedure Set_Is_Accessibility_Actual\n       (N : Node_Id; Val : Boolean := True) is\n    begin"}, {"sha": "01d9be531d3684da7fac85d992b930d76ffb0b44", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb072d1c1716ecb6cd99f43a5dbc4855931302d3/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=bb072d1c1716ecb6cd99f43a5dbc4855931302d3", "patch": "@@ -1535,6 +1535,10 @@ package Sinfo is\n    --    to the node for the spec of the instance, inserted as part of the\n    --    semantic processing for instantiations in Sem_Ch12.\n \n+   --  Is_Abort_Block (Flag4-Sem)\n+   --    Present in N_Block_Statement nodes. True if the block protects a list\n+   --    of statements with an Abort_Defer / Abort_Undefer_Direct pair.\n+\n    --  Is_Accessibility_Actual (Flag13-Sem)\n    --    Present in N_Parameter_Association nodes. True if the parameter is\n    --    an extra actual that carries the accessibility level of the actual\n@@ -4937,6 +4941,7 @@ package Sinfo is\n       --  Declarations (List2) (set to No_List if no DECLARE part)\n       --  Handled_Statement_Sequence (Node4)\n       --  Cleanup_Actions (List5-Sem)\n+      --  Is_Abort_Block (Flag4-Sem)\n       --  Is_Task_Master (Flag5-Sem)\n       --  Activation_Chain_Entity (Node3-Sem)\n       --  Has_Created_Identifier (Flag15)\n@@ -9331,6 +9336,9 @@ package Sinfo is\n    function Intval\n      (N : Node_Id) return Uint;       -- Uint3\n \n+   function Is_Abort_Block\n+     (N : Node_Id) return Boolean;    -- Flag4\n+\n    function Is_Accessibility_Actual\n      (N : Node_Id) return Boolean;    -- Flag13\n \n@@ -10375,6 +10383,9 @@ package Sinfo is\n    procedure Set_Intval\n      (N : Node_Id; Val : Uint);               -- Uint3\n \n+   procedure Set_Is_Abort_Block\n+     (N : Node_Id; Val : Boolean := True);    -- Flag4\n+\n    procedure Set_Is_Accessibility_Actual\n      (N : Node_Id; Val : Boolean := True);    -- Flag13\n \n@@ -12819,6 +12830,7 @@ package Sinfo is\n    pragma Inline (Instance_Spec);\n    pragma Inline (Intval);\n    pragma Inline (Iterator_Specification);\n+   pragma Inline (Is_Abort_Block);\n    pragma Inline (Is_Accessibility_Actual);\n    pragma Inline (Is_Analyzed_Pragma);\n    pragma Inline (Is_Asynchronous_Call_Block);\n@@ -13162,6 +13174,7 @@ package Sinfo is\n    pragma Inline (Set_Interface_List);\n    pragma Inline (Set_Interface_Present);\n    pragma Inline (Set_Intval);\n+   pragma Inline (Set_Is_Abort_Block);\n    pragma Inline (Set_Is_Accessibility_Actual);\n    pragma Inline (Set_Is_Analyzed_Pragma);\n    pragma Inline (Set_Is_Asynchronous_Call_Block);"}]}