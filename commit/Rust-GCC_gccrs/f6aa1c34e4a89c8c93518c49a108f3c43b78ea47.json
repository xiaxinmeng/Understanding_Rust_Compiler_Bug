{"sha": "f6aa1c34e4a89c8c93518c49a108f3c43b78ea47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZhYTFjMzRlNGE4OWM4YzkzNTE4YzQ5YTEwOGYzYzQzYjc4ZWE0Nw==", "commit": {"author": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2021-07-02T14:48:26Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2021-07-02T14:48:26Z"}, "message": "Fix m32r target specific fallout from recent int->bool changes\n\ngcc/ChangeLog\n\n\t* config/m32r/m32r-protos.h (call_operand): Adjust return type.\n\t(small_data_operand, memreg_operand, small_insn_p): Likewise.\n\t* config/m32r/m32r.c (call_operand): Adjust return type.\n\t(small_data_operand, memreg_operand): Likewise.", "tree": {"sha": "6811fb4516e8567984d32e07d5c5ea5860b3951e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6811fb4516e8567984d32e07d5c5ea5860b3951e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6aa1c34e4a89c8c93518c49a108f3c43b78ea47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6aa1c34e4a89c8c93518c49a108f3c43b78ea47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6aa1c34e4a89c8c93518c49a108f3c43b78ea47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6aa1c34e4a89c8c93518c49a108f3c43b78ea47/comments", "author": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef9cc434a476954b5ef3493955d4e668338990c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef9cc434a476954b5ef3493955d4e668338990c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef9cc434a476954b5ef3493955d4e668338990c2"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "82b2c701be0a60c9ab3bc1c4e9f25237225948d6", "filename": "gcc/config/m32r/m32r-protos.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6aa1c34e4a89c8c93518c49a108f3c43b78ea47/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6aa1c34e4a89c8c93518c49a108f3c43b78ea47/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h?ref=f6aa1c34e4a89c8c93518c49a108f3c43b78ea47", "patch": "@@ -49,13 +49,13 @@ extern rtx    m32r_return_addr (int);\n extern rtx    m32r_function_symbol (const char *);\n \n #ifdef HAVE_MACHINE_MODES\n-extern int    call_operand (rtx, machine_mode);\n-extern int    small_data_operand (rtx, machine_mode);\n+extern bool    call_operand (rtx, machine_mode);\n+extern bool    small_data_operand (rtx, machine_mode);\n extern int    addr24_operand (rtx, machine_mode);\n extern int    addr32_operand (rtx, machine_mode);\n extern int    call26_operand (rtx, machine_mode);\n-extern int    memreg_operand (rtx, machine_mode);\n-extern int    small_insn_p (rtx, machine_mode);\n+extern bool    memreg_operand (rtx, machine_mode);\n+extern bool    small_insn_p (rtx, machine_mode);\n \n #endif /* HAVE_MACHINE_MODES */\n "}, {"sha": "1aaba94bb5c53a3bdddb72f632d2c0175f2f1a2e", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6aa1c34e4a89c8c93518c49a108f3c43b78ea47/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6aa1c34e4a89c8c93518c49a108f3c43b78ea47/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=f6aa1c34e4a89c8c93518c49a108f3c43b78ea47", "patch": "@@ -532,7 +532,7 @@ m32r_init_expanders (void)\n      to make it easy to experiment.  */\n }\n \f\n-int\n+bool\n call_operand (rtx op, machine_mode mode)\n {\n   if (!MEM_P (op))\n@@ -543,7 +543,7 @@ call_operand (rtx op, machine_mode mode)\n \n /* Return 1 if OP is a reference to an object in .sdata/.sbss.  */\n \n-int\n+bool\n small_data_operand (rtx op, machine_mode mode ATTRIBUTE_UNUSED)\n {\n   if (! TARGET_SDATA_USE)\n@@ -674,7 +674,7 @@ easy_df_const (rtx op)\n /* Return 1 if OP is (mem (reg ...)).\n    This is used in insn length calcs.  */\n \n-int\n+bool\n memreg_operand (rtx op, machine_mode mode ATTRIBUTE_UNUSED)\n {\n   return MEM_P (op) && REG_P (XEXP (op, 0));"}]}