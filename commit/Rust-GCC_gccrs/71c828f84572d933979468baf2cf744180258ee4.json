{"sha": "71c828f84572d933979468baf2cf744180258ee4", "node_id": "C_kwDOANBUbNoAKDcxYzgyOGY4NDU3MmQ5MzM5Nzk0NjhiYWYyY2Y3NDQxODAyNThlZTQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-23T12:28:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-23T22:22:37Z"}, "message": "libstdc++: Fix std::is_nothrow_invocable_r for uncopyable prvalues [PR91456]\n\nThis is the last missing piece of PR 91456.\n\nThis also removes the only use of the C++11 version of\nstd::is_nothrow_invocable, which was just renamed to\n__is_nothrow_invocable_lib. We can remove that now.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/91456\n\t* include/std/type_traits (__is_nothrow_invocable_lib): Remove.\n\t(__is_invocable_impl::__nothrow_type): New member type which\n\tchecks if the conversion can throw.\n\t(__is_nt_invocable_impl): Replace class template with alias\n\ttemplate to __is_nt_invocable_impl::__nothrow_type.\n\t* testsuite/20_util/is_nothrow_invocable/91456.cc: New test.\n\t* testsuite/20_util/is_nothrow_convertible/value.cc: Remove\n\tmacro used by value_ext.cc test.\n\t* testsuite/20_util/is_nothrow_convertible/value_ext.cc: Remove\n\ttest for non-standard __is_nothrow_invocable_lib trait.", "tree": {"sha": "08321da54ffa1e2566dbdc0c578d8cdcfbb59f51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08321da54ffa1e2566dbdc0c578d8cdcfbb59f51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71c828f84572d933979468baf2cf744180258ee4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71c828f84572d933979468baf2cf744180258ee4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71c828f84572d933979468baf2cf744180258ee4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71c828f84572d933979468baf2cf744180258ee4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d88319de4165cd58764f0611df03179d6ce4d160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88319de4165cd58764f0611df03179d6ce4d160", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d88319de4165cd58764f0611df03179d6ce4d160"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "7c635313a956a1388363e4d9e297cacb076f88bc", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c828f84572d933979468baf2cf744180258ee4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c828f84572d933979468baf2cf744180258ee4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=71c828f84572d933979468baf2cf744180258ee4", "patch": "@@ -1451,12 +1451,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n #pragma GCC diagnostic pop\n \n-  // is_nothrow_convertible for C++11\n-  template<typename _From, typename _To>\n-    struct __is_nothrow_convertible_lib\n-    : public __is_nt_convertible_helper<_From, _To>::type\n-    { };\n-\n #if __cplusplus > 201703L\n #define __cpp_lib_is_nothrow_convertible 201806L\n   /// is_nothrow_convertible\n@@ -2825,15 +2819,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // The primary template is used for invalid INVOKE expressions.\n   template<typename _Result, typename _Ret,\n \t   bool = is_void<_Ret>::value, typename = void>\n-    struct __is_invocable_impl : false_type { };\n+    struct __is_invocable_impl\n+    : false_type\n+    {\n+      using __nothrow_type = false_type; // For is_nothrow_invocable_r\n+    };\n \n   // Used for valid INVOKE and INVOKE<void> expressions.\n   template<typename _Result, typename _Ret>\n     struct __is_invocable_impl<_Result, _Ret,\n \t\t\t       /* is_void<_Ret> = */ true,\n \t\t\t       __void_t<typename _Result::type>>\n     : true_type\n-    { };\n+    {\n+      using __nothrow_type = true_type; // For is_nothrow_invocable_r\n+    };\n \n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Wctor-dtor-privacy\"\n@@ -2845,23 +2845,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n     private:\n       // The type of the INVOKE expression.\n-      // Unlike declval, this doesn't add_rvalue_reference.\n-      static typename _Result::type _S_get();\n+      // Unlike declval, this doesn't add_rvalue_reference, so it respects\n+      // guaranteed copy elision.\n+      static typename _Result::type _S_get() noexcept;\n \n       template<typename _Tp>\n-\tstatic void _S_conv(_Tp);\n+\tstatic void _S_conv(_Tp) noexcept;\n \n       // This overload is viable if INVOKE(f, args...) can convert to _Tp.\n-      template<typename _Tp, typename = decltype(_S_conv<_Tp>(_S_get()))>\n-\tstatic true_type\n+      template<typename _Tp, bool _Check_Noex = false,\n+\t       typename = decltype(_S_conv<_Tp>(_S_get())),\n+\t       bool _Noex = noexcept(_S_conv<_Tp>(_S_get()))>\n+\tstatic __bool_constant<_Check_Noex ? _Noex : true>\n \t_S_test(int);\n \n-      template<typename _Tp>\n+      template<typename _Tp, bool = false>\n \tstatic false_type\n \t_S_test(...);\n \n     public:\n+      // For is_invocable_r\n       using type = decltype(_S_test<_Ret>(1));\n+\n+      // For is_nothrow_invocable_r\n+      using __nothrow_type = decltype(_S_test<_Ret, true>(1));\n     };\n #pragma GCC diagnostic pop\n \n@@ -2992,15 +2999,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   /// @cond undocumented\n-  template<typename _Result, typename _Ret, typename = void>\n-    struct __is_nt_invocable_impl : false_type { };\n-\n   template<typename _Result, typename _Ret>\n-    struct __is_nt_invocable_impl<_Result, _Ret,\n-\t\t\t\t  __void_t<typename _Result::type>>\n-    : __or_<is_void<_Ret>,\n-\t    __is_nothrow_convertible_lib<typename _Result::type, _Ret>>::type\n-    { };\n+    using __is_nt_invocable_impl\n+      = typename __is_invocable_impl<_Result, _Ret>::__nothrow_type;\n   /// @endcond\n \n   /// std::is_nothrow_invocable_r"}, {"sha": "a2686285052a7f59612733550c428fb56ff369ec", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_convertible/value.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c828f84572d933979468baf2cf744180258ee4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_convertible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c828f84572d933979468baf2cf744180258ee4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_convertible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_convertible%2Fvalue.cc?ref=71c828f84572d933979468baf2cf744180258ee4", "patch": "@@ -21,9 +21,7 @@\n #include <type_traits>\n #include <testsuite_tr1.h>\n \n-#ifndef IS_NT_CONVERTIBLE_DEFINED\n using std::is_nothrow_convertible;\n-#endif\n \n void test01()\n {"}, {"sha": "abbbd1aade48ec78cbee8d8757fbe7c407889fa4", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_invocable/91456.cc", "status": "renamed", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71c828f84572d933979468baf2cf744180258ee4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2F91456.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71c828f84572d933979468baf2cf744180258ee4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2F91456.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2F91456.cc?ref=71c828f84572d933979468baf2cf744180258ee4", "patch": "@@ -15,14 +15,21 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-do compile { target c++11 } }\n+// { dg-do compile { target c++17 } }\n+\n+// PR 91456\n+// std::function and std::is_invocable_r do not understand guaranteed elision\n \n #include <type_traits>\n \n-// Test the non-standard __is_nothrow_convertible_lib trait\n+#include <functional>\n \n-template<typename From, typename To>\n-  using is_nothrow_convertible = std::__is_nothrow_convertible_lib<From, To>;\n+struct Immovable {\n+  Immovable() = default;\n+  Immovable(const Immovable&) = delete;\n+  Immovable& operator=(const Immovable&) = delete;\n+};\n \n-#define IS_NT_CONVERTIBLE_DEFINED\n-#include \"value.cc\"\n+static_assert(std::is_nothrow_invocable_r_v<Immovable, Immovable(*)() noexcept>);\n+static_assert(std::is_nothrow_invocable_r_v<const Immovable, Immovable(*)() noexcept>);\n+static_assert(std::is_nothrow_invocable_r_v<Immovable, const Immovable(*)() noexcept>);", "previous_filename": "libstdc++-v3/testsuite/20_util/is_nothrow_convertible/value_ext.cc"}]}