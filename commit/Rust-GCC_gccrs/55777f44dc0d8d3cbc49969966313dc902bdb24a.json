{"sha": "55777f44dc0d8d3cbc49969966313dc902bdb24a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU3NzdmNDRkYzBkOGQzY2JjNDk5Njk5NjYzMTNkYzkwMmJkYjI0YQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-01-23T13:50:10Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-01-23T13:50:10Z"}, "message": "2004-01-23  Michael Koch  <konqueror@gmx.de>\n\n\t* java/io/FileDescriptor.java\n\t(sync): Moved around, added javadoc.\n\t(valid): Likewise.\n\t(open): Likewise.\n\t(write): Likewise.\n\t(close): Likewise.\n\t(setLength): Likewise.\n\t(seek): Likewise.\n\t(getLength): Likewise.\n\t(getFilePointer): Likewise.\n\t(read): Likewise.\n\t(available): Likewise.\n\t(finalize): Likewise.\n\nFrom-SVN: r76419", "tree": {"sha": "7df2c88dc90475080d05651a00f63cec85ba3236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7df2c88dc90475080d05651a00f63cec85ba3236"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55777f44dc0d8d3cbc49969966313dc902bdb24a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55777f44dc0d8d3cbc49969966313dc902bdb24a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55777f44dc0d8d3cbc49969966313dc902bdb24a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55777f44dc0d8d3cbc49969966313dc902bdb24a/comments", "author": null, "committer": null, "parents": [{"sha": "72613dfaa22b438aa161bad3a92e87984148ae0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72613dfaa22b438aa161bad3a92e87984148ae0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72613dfaa22b438aa161bad3a92e87984148ae0d"}], "stats": {"total": 123, "additions": 95, "deletions": 28}, "files": [{"sha": "4aba02a19d83466d1347bad75f76a98c2f2ff9af", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55777f44dc0d8d3cbc49969966313dc902bdb24a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55777f44dc0d8d3cbc49969966313dc902bdb24a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=55777f44dc0d8d3cbc49969966313dc902bdb24a", "patch": "@@ -1,3 +1,19 @@\n+2004-01-23  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/io/FileDescriptor.java\n+\t(sync): Moved around, added javadoc.\n+\t(valid): Likewise.\n+\t(open): Likewise.\n+\t(write): Likewise.\n+\t(close): Likewise.\n+\t(setLength): Likewise.\n+\t(seek): Likewise.\n+\t(getLength): Likewise.\n+\t(getFilePointer): Likewise.\n+\t(read): Likewise.\n+\t(available): Likewise.\n+\t(finalize): Likewise.\n+\n 2004-01-23  Michael Koch  <konqueror@gmx.de>\n \n \t* javax/swing/AbstractAction.java: Reformated."}, {"sha": "b713e1bf6884baea7720212345d99dafabfec89e", "filename": "libjava/java/io/FileDescriptor.java", "status": "modified", "additions": 79, "deletions": 28, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55777f44dc0d8d3cbc49969966313dc902bdb24a/libjava%2Fjava%2Fio%2FFileDescriptor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55777f44dc0d8d3cbc49969966313dc902bdb24a/libjava%2Fjava%2Fio%2FFileDescriptor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileDescriptor.java?ref=55777f44dc0d8d3cbc49969966313dc902bdb24a", "patch": "@@ -85,9 +85,6 @@\n       init();\n     }\n \n-  public native void sync () throws SyncFailedException;\n-  public native boolean valid ();\n-\n   // These are WHENCE values for seek.\n   static final int SET = 0;\n   static final int CUR = 1;\n@@ -127,31 +124,6 @@ public FileDescriptor()\n     fd = open (path, mode);\n   }\n \n-  native int open (String path, int mode) throws FileNotFoundException;\n-  native void write (int b) throws IOException;\n-  native void write (byte[] b, int offset, int len)\n-    throws IOException, NullPointerException, IndexOutOfBoundsException;\n-  native void close () throws IOException;\n-  native void setLength (long pos) throws IOException;\n-  // EOF_TRUNC is true if a request to seek past the end of file\n-  // should actually stop at the end of file.  If false, then a seek\n-  // past the end is ok (and if a subsequent write occurs the file\n-  // will grow).\n-  native int seek (long pos, int whence, boolean eof_trunc) throws IOException;\n-  native long getLength () throws IOException;\n-  native long getFilePointer () throws IOException;\n-  native int read () throws IOException;\n-  native int read (byte[] bytes, int offset, int len) throws IOException;\n-  native int available () throws IOException;\n-\n-\n-  // When collected, close.\n-  protected void finalize () throws Throwable\n-  {\n-    if (valid ())\n-      close ();\n-  }\n-\n   // Attach to an already-opened file.  This is not private because we\n   // need access to it from other packages, for instance java.net.\n   // Ordinarily that wouldn't work, either, but in our case we know\n@@ -162,5 +134,84 @@ protected void finalize () throws Throwable\n     fd = desc;\n   }\n \n+  /**\n+   * This method forces all data that has not yet been physically written to\n+   * the underlying storage medium associated with this \n+   * <code>FileDescriptor</code>\n+   * to be written out.  This method will not return until all data has\n+   * been fully written to the underlying device.  If the device does not\n+   * support this functionality or if an error occurs, then an exception\n+   * will be thrown.\n+   */\n+  public native void sync() throws SyncFailedException;\n+\n+  /**\n+   * This methods tests whether or not this object represents a valid open\n+   * native file handle.\n+   *\n+   * @return <code>true</code> if this object represents a valid \n+   * native file handle, <code>false</code> otherwise\n+   */\n+  public native boolean valid();\n+\n+  /**\n+   * Opens the specified file in the specified mode.  This can be done\n+   * in one of the specified modes:\n+   * <ul>\n+   * <li>r - Read Only\n+   * <li>rw - Read / Write\n+   * <li>ra - Read / Write - append to end of file\n+   * <li>rws - Read / Write - synchronous writes of data/metadata\n+   * <li>rwd - Read / Write - synchronous writes of data.\n+   *\n+   * @param path Name of the file to open\n+   * @param mode Mode to open\n+   *\n+   * @exception IOException If an error occurs.\n+   */\n+  native int open(String path, int mode) throws FileNotFoundException;\n+\n+  /**\n+   * Close the file descriptor.\n+   */\n+  native void close() throws IOException;\n \n+  /**\n+   * Write oe byte of data.\n+   */\n+  native void write(int b) throws IOException;\n+\n+  /**\n+   * Write data.\n+   */\n+  native void write(byte[] b, int offset, int len)\n+    throws IOException, NullPointerException, IndexOutOfBoundsException;\n+\n+  /**\n+   * Read one byte of data.\n+   */\n+  native int read() throws IOException;\n+\n+  /**\n+   * Read data.\n+   */\n+  native int read(byte[] bytes, int offset, int len) throws IOException;\n+  native int available() throws IOException;\n+\n+  // EOF_TRUNC is true if a request to seek past the end of file\n+  // should actually stop at the end of file.  If false, then a seek\n+  // past the end is ok (and if a subsequent write occurs the file\n+  // will grow).\n+  native int seek(long pos, int whence, boolean eof_trunc) throws IOException;\n+\n+  native long getFilePointer() throws IOException;\n+  native long getLength() throws IOException;\n+  native void setLength(long pos) throws IOException;\n+\n+  // When collected, close.\n+  protected void finalize() throws Throwable\n+  {\n+    if (valid())\n+      close();\n+  }\n }"}]}