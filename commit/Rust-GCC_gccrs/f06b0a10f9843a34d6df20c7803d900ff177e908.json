{"sha": "f06b0a10f9843a34d6df20c7803d900ff177e908", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA2YjBhMTBmOTg0M2EzNGQ2ZGYyMGM3ODAzZDkwMGZmMTc3ZTkwOA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2007-04-22T00:51:38Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2007-04-22T00:51:38Z"}, "message": "predict.c: Include pointer-set.h.\n\n\t* predict.c: Include pointer-set.h.\n\t(bb_predictions): New variable.\n\t(tree_predicted_by_p, tree_predict_edge,\n\tremove_predictions_associated_with_edge): Use bb_predictions map\n\tinstead of bb->predictions.\n\t(clear_bb_predictions, assert_is_empty): New functions.\n\t(combine_predictions_for_bb): Use bb_predictions map.  Call\n\tclear_bb_predictions.\n\t(tree_estimate_probability): Create and free bb_predictions map.\n\t* Makefile.in (predict.o): Add pointer-set.h dependency.\n\t* basic-block.h (struct basic_block_def): Remove predictions\n\tfield.\n\t* cfgrtl.c (rtl_verify_flow_info_1): Do not check bb->predictions.\n\nFrom-SVN: r124032", "tree": {"sha": "343ac747a37ed1b76579c673bbf2348482cacc21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/343ac747a37ed1b76579c673bbf2348482cacc21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f06b0a10f9843a34d6df20c7803d900ff177e908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f06b0a10f9843a34d6df20c7803d900ff177e908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f06b0a10f9843a34d6df20c7803d900ff177e908", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f06b0a10f9843a34d6df20c7803d900ff177e908/comments", "author": null, "committer": null, "parents": [{"sha": "e919dfe284cd927fd0c1f0c9dea2570093e5280b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e919dfe284cd927fd0c1f0c9dea2570093e5280b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e919dfe284cd927fd0c1f0c9dea2570093e5280b"}], "stats": {"total": 173, "additions": 127, "deletions": 46}, "files": [{"sha": "08f990c887e3f6916f9d13371c8e1516eb731424", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06b0a10f9843a34d6df20c7803d900ff177e908/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06b0a10f9843a34d6df20c7803d900ff177e908/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f06b0a10f9843a34d6df20c7803d900ff177e908", "patch": "@@ -1,3 +1,19 @@\n+2007-04-21  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\t* predict.c: Include pointer-set.h.\n+\t(bb_predictions): New variable.\n+\t(tree_predicted_by_p, tree_predict_edge,\n+\tremove_predictions_associated_with_edge): Use bb_predictions map\n+\tinstead of bb->predictions.\n+\t(clear_bb_predictions, assert_is_empty): New functions.\n+\t(combine_predictions_for_bb): Use bb_predictions map.  Call\n+\tclear_bb_predictions.\n+\t(tree_estimate_probability): Create and free bb_predictions map.\n+\t* Makefile.in (predict.o): Add pointer-set.h dependency.\n+\t* basic-block.h (struct basic_block_def): Remove predictions\n+\tfield.\n+\t* cfgrtl.c (rtl_verify_flow_info_1): Do not check bb->predictions.\n+\n 2007-04-21  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR target/31480"}, {"sha": "0be0d75f60a7a7328caea8d21c1ead82e0419fde", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06b0a10f9843a34d6df20c7803d900ff177e908/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06b0a10f9843a34d6df20c7803d900ff177e908/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f06b0a10f9843a34d6df20c7803d900ff177e908", "patch": "@@ -2685,7 +2685,7 @@ predict.o: predict.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    hard-reg-set.h output.h toplev.h $(RECOG_H) $(FUNCTION_H) except.h \\\n    $(TM_P_H) $(PREDICT_H) sreal.h $(PARAMS_H) $(TARGET_H) $(CFGLOOP_H) \\\n    $(COVERAGE_H) $(SCEV_H) $(GGC_H) predict.def $(TIMEVAR_H) $(TREE_DUMP_H) \\\n-   $(TREE_FLOW_H) tree-pass.h $(EXPR_H)\n+   $(TREE_FLOW_H) tree-pass.h $(EXPR_H) pointer-set.h\n lists.o: lists.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) toplev.h \\\n    $(RTL_H) $(GGC_H) gt-lists.h\n bb-reorder.o : bb-reorder.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\"}, {"sha": "34ef10476c908eade2f4853ea5d52e81165ad685", "filename": "gcc/basic-block.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06b0a10f9843a34d6df20c7803d900ff177e908/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06b0a10f9843a34d6df20c7803d900ff177e908/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=f06b0a10f9843a34d6df20c7803d900ff177e908", "patch": "@@ -240,9 +240,6 @@ struct basic_block_def GTY((chain_next (\"%h.next_bb\"), chain_prev (\"%h.prev_bb\")\n   /* Chain of PHI nodes for this block.  */\n   tree phi_nodes;\n \n-  /* A list of predictions.  */\n-  struct edge_prediction *predictions;\n-\n   /* Expected number of executions: calculated in profile.c.  */\n   gcov_type count;\n "}, {"sha": "20b946d8b49ec7ec66d662dc27bc6881af136110", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06b0a10f9843a34d6df20c7803d900ff177e908/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06b0a10f9843a34d6df20c7803d900ff177e908/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=f06b0a10f9843a34d6df20c7803d900ff177e908", "patch": "@@ -1716,12 +1716,6 @@ rtl_verify_flow_info_1 (void)\n \t\t   bb->index);\n \t    err = 1;\n \t  }\n-\n-      if (bb->predictions)\n-\t{\n-\t  error (\"bb prediction set for block %d, but it is not used in RTL land\", bb->index);\n-\t  err = 1;\n-\t}\n     }\n \n   /* Now check the basic blocks (boundaries etc.) */"}, {"sha": "c51c80809c8a67a15ee8c9bc3f7559e71eed7bf0", "filename": "gcc/predict.c", "status": "modified", "additions": 110, "deletions": 36, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06b0a10f9843a34d6df20c7803d900ff177e908/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06b0a10f9843a34d6df20c7803d900ff177e908/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=f06b0a10f9843a34d6df20c7803d900ff177e908", "patch": "@@ -60,6 +60,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"timevar.h\"\n #include \"tree-scalar-evolution.h\"\n #include \"cfgloop.h\"\n+#include \"pointer-set.h\"\n \n /* real constants: 0, 1, 1-1/REG_BR_PROB_BASE, REG_BR_PROB_BASE,\n \t\t   1/REG_BR_PROB_BASE, 0.5, BB_FREQ_MAX.  */\n@@ -174,14 +175,24 @@ rtl_predicted_by_p (basic_block bb, enum br_predictor predictor)\n   return false;\n }\n \n+/* This map contains for a basic block the list of predictions for the\n+   outgoing edges.  */\n+\n+static struct pointer_map_t *bb_predictions;\n+\n /* Return true if the one of outgoing edges is already predicted by\n    PREDICTOR.  */\n \n bool\n tree_predicted_by_p (basic_block bb, enum br_predictor predictor)\n {\n   struct edge_prediction *i;\n-  for (i = bb->predictions; i; i = i->ep_next)\n+  void **preds = pointer_map_contains (bb_predictions, bb);\n+\n+  if (!preds)\n+    return false;\n+  \n+  for (i = *preds; i; i = i->ep_next)\n     if (i->ep_predictor == predictor)\n       return true;\n   return false;\n@@ -283,10 +294,11 @@ tree_predict_edge (edge e, enum br_predictor predictor, int probability)\n   if ((e->src != ENTRY_BLOCK_PTR && EDGE_COUNT (e->src->succs) > 1)\n       && flag_guess_branch_prob && optimize)\n     {\n-      struct edge_prediction *i = ggc_alloc (sizeof (struct edge_prediction));\n+      struct edge_prediction *i = XNEW (struct edge_prediction);\n+      void **preds = pointer_map_insert (bb_predictions, e->src);\n \n-      i->ep_next = e->src->predictions;\n-      e->src->predictions = i;\n+      i->ep_next = *preds;\n+      *preds = i;\n       i->ep_probability = probability;\n       i->ep_predictor = predictor;\n       i->ep_edge = e;\n@@ -298,19 +310,51 @@ tree_predict_edge (edge e, enum br_predictor predictor, int probability)\n void\n remove_predictions_associated_with_edge (edge e)\n {\n-  if (e->src->predictions)\n+  void **preds;\n+  \n+  if (!bb_predictions)\n+    return;\n+\n+  preds = pointer_map_contains (bb_predictions, e->src);\n+\n+  if (preds)\n     {\n-      struct edge_prediction **prediction = &e->src->predictions;\n+      struct edge_prediction **prediction = (struct edge_prediction **) preds;\n+      struct edge_prediction *next;\n+\n       while (*prediction)\n \t{\n \t  if ((*prediction)->ep_edge == e)\n-\t    *prediction = (*prediction)->ep_next;\n+\t    {\n+\t      next = (*prediction)->ep_next;\n+\t      free (*prediction);\n+\t      *prediction = next;\n+\t    }\n \t  else\n \t    prediction = &((*prediction)->ep_next);\n \t}\n     }\n }\n \n+/* Clears the list of predictions stored for BB.  */\n+\n+static void\n+clear_bb_predictions (basic_block bb)\n+{\n+  void **preds = pointer_map_contains (bb_predictions, bb);\n+  struct edge_prediction *pred, *next;\n+\n+  if (!preds)\n+    return;\n+\n+  for (pred = *preds; pred; pred = next)\n+    {\n+      next = pred->ep_next;\n+      free (pred);\n+    }\n+  *preds = NULL;\n+}\n+\n /* Return true when we can store prediction on insn INSN.\n    At the moment we represent predictions only on conditional\n    jumps, not at computed jump or other complicated cases.  */\n@@ -538,6 +582,7 @@ combine_predictions_for_bb (basic_block bb)\n   int nedges = 0;\n   edge e, first = NULL, second = NULL;\n   edge_iterator ei;\n+  void **preds;\n \n   FOR_EACH_EDGE (e, ei, bb->succs)\n     if (!(e->flags & (EDGE_EH | EDGE_FAKE)))\n@@ -559,7 +604,7 @@ combine_predictions_for_bb (basic_block bb)\n     {\n       if (!bb->count)\n \tset_even_probabilities (bb);\n-      bb->predictions = NULL;\n+      clear_bb_predictions (bb);\n       if (dump_file)\n \tfprintf (dump_file, \"%i edges in bb %i predicted to even probabilities\\n\",\n \t\t nedges, bb->index);\n@@ -569,31 +614,36 @@ combine_predictions_for_bb (basic_block bb)\n   if (dump_file)\n     fprintf (dump_file, \"Predictions for bb %i\\n\", bb->index);\n \n-  /* We implement \"first match\" heuristics and use probability guessed\n-     by predictor with smallest index.  */\n-  for (pred = bb->predictions; pred; pred = pred->ep_next)\n+  preds = pointer_map_contains (bb_predictions, bb);\n+  if (preds)\n     {\n-      int predictor = pred->ep_predictor;\n-      int probability = pred->ep_probability;\n+      /* We implement \"first match\" heuristics and use probability guessed\n+\t by predictor with smallest index.  */\n+      for (pred = *preds; pred; pred = pred->ep_next)\n+\t{\n+\t  int predictor = pred->ep_predictor;\n+\t  int probability = pred->ep_probability;\n \n-      if (pred->ep_edge != first)\n-\tprobability = REG_BR_PROB_BASE - probability;\n+\t  if (pred->ep_edge != first)\n+\t    probability = REG_BR_PROB_BASE - probability;\n \n-      found = true;\n-      if (best_predictor > predictor)\n-\tbest_probability = probability, best_predictor = predictor;\n+\t  found = true;\n+\t  if (best_predictor > predictor)\n+\t    best_probability = probability, best_predictor = predictor;\n \n-      d = (combined_probability * probability\n-\t   + (REG_BR_PROB_BASE - combined_probability)\n-\t   * (REG_BR_PROB_BASE - probability));\n+\t  d = (combined_probability * probability\n+\t       + (REG_BR_PROB_BASE - combined_probability)\n+\t       * (REG_BR_PROB_BASE - probability));\n \n-      /* Use FP math to avoid overflows of 32bit integers.  */\n-      if (d == 0)\n-\t/* If one probability is 0% and one 100%, avoid division by zero.  */\n-\tcombined_probability = REG_BR_PROB_BASE / 2;\n-      else\n-\tcombined_probability = (((double) combined_probability) * probability\n-\t\t\t\t* REG_BR_PROB_BASE / d + 0.5);\n+\t  /* Use FP math to avoid overflows of 32bit integers.  */\n+\t  if (d == 0)\n+\t    /* If one probability is 0% and one 100%, avoid division by zero.  */\n+\t    combined_probability = REG_BR_PROB_BASE / 2;\n+\t  else\n+\t    combined_probability = (((double) combined_probability)\n+\t\t\t\t    * probability\n+\t\t    \t\t    * REG_BR_PROB_BASE / d + 0.5);\n+\t}\n     }\n \n   /* Decide which heuristic to use.  In case we didn't match anything,\n@@ -617,17 +667,20 @@ combine_predictions_for_bb (basic_block bb)\n     combined_probability = best_probability;\n   dump_prediction (dump_file, PRED_COMBINED, combined_probability, bb, true);\n \n-  for (pred = bb->predictions; pred; pred = pred->ep_next)\n+  if (preds)\n     {\n-      int predictor = pred->ep_predictor;\n-      int probability = pred->ep_probability;\n+      for (pred = *preds; pred; pred = pred->ep_next)\n+\t{\n+\t  int predictor = pred->ep_predictor;\n+\t  int probability = pred->ep_probability;\n \n-      if (pred->ep_edge != EDGE_SUCC (bb, 0))\n-\tprobability = REG_BR_PROB_BASE - probability;\n-      dump_prediction (dump_file, predictor, probability, bb,\n-\t\t       !first_match || best_predictor == predictor);\n+\t  if (pred->ep_edge != EDGE_SUCC (bb, 0))\n+\t    probability = REG_BR_PROB_BASE - probability;\n+\t  dump_prediction (dump_file, predictor, probability, bb,\n+\t\t\t   !first_match || best_predictor == predictor);\n+\t}\n     }\n-  bb->predictions = NULL;\n+  clear_bb_predictions (bb);\n \n   if (!bb->count)\n     {\n@@ -1278,6 +1331,20 @@ call_expr:;\n   free (heads);\n }\n \n+#ifdef ENABLE_CHECKING\n+\n+/* Callback for pointer_map_traverse, asserts that the pointer map is\n+   empty.  */\n+\n+static bool\n+assert_is_empty (void *key ATTRIBUTE_UNUSED, void **value,\n+\t\t void *data ATTRIBUTE_UNUSED)\n+{\n+  gcc_assert (!*value);\n+  return false;\n+}\n+#endif\n+\n /* Predict branch probabilities and estimate profile of the tree CFG.  */\n static unsigned int\n tree_estimate_probability (void)\n@@ -1295,6 +1362,7 @@ tree_estimate_probability (void)\n   create_preheaders (CP_SIMPLE_PREHEADERS);\n   calculate_dominance_info (CDI_POST_DOMINATORS);\n \n+  bb_predictions = pointer_map_create ();\n   tree_bb_level_predictions ();\n \n   mark_irreducible_loops ();\n@@ -1383,6 +1451,12 @@ tree_estimate_probability (void)\n   FOR_EACH_BB (bb)\n     combine_predictions_for_bb (bb);\n \n+#ifdef ENABLE_CHECKING\n+  pointer_map_traverse (bb_predictions, assert_is_empty, NULL);\n+#endif\n+  pointer_map_destroy (bb_predictions);\n+  bb_predictions = NULL;\n+\n   strip_builtin_expect ();\n   estimate_bb_frequencies ();\n   free_dominance_info (CDI_POST_DOMINATORS);"}]}