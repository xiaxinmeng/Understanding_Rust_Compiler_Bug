{"sha": "a38b05ecd22d53cf98712c26a4fc739b99422a6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM4YjA1ZWNkMjJkNTNjZjk4NzEyYzI2YTRmYzczOWI5OTQyMmE2Yw==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2008-07-02T22:19:08Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2008-07-02T22:19:08Z"}, "message": "cdce3.C: Test long double math functions for large_long_double target only.\n\n\t* g++.dg/cdce3.C: Test long double math functions for\n\tlarge_long_double target only.  Skip pow10 and exp10\n\tfunctions for *-*-darwin*.\n\nFrom-SVN: r137394", "tree": {"sha": "1f6a0f6089c75181d943c965286e72df5738f10a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f6a0f6089c75181d943c965286e72df5738f10a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a38b05ecd22d53cf98712c26a4fc739b99422a6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a38b05ecd22d53cf98712c26a4fc739b99422a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a38b05ecd22d53cf98712c26a4fc739b99422a6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a38b05ecd22d53cf98712c26a4fc739b99422a6c/comments", "author": null, "committer": null, "parents": [{"sha": "1935a7ef95adf2732a465ad8e7a041620132723e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1935a7ef95adf2732a465ad8e7a041620132723e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1935a7ef95adf2732a465ad8e7a041620132723e"}], "stats": {"total": 80, "additions": 59, "deletions": 21}, "files": [{"sha": "d7ef19ff58b7bff5151a5247d95e633b3e315df8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a38b05ecd22d53cf98712c26a4fc739b99422a6c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a38b05ecd22d53cf98712c26a4fc739b99422a6c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a38b05ecd22d53cf98712c26a4fc739b99422a6c", "patch": "@@ -1,3 +1,9 @@\n+2008-07-02  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* g++.dg/cdce3.C: Test long double math functions for\n+\tlarge_long_double target only.  Skip pow10 and exp10\n+\tfunctions for *-*-darwin*.\n+\n 2008-07-02  Janus Weil  <janus@gcc.gnu.org>\n \t    Tobias Burnus  <burnus@net-b.de>\n "}, {"sha": "19f7f0b295ae75f702e601a5c02504be2249194f", "filename": "gcc/testsuite/g++.dg/cdce3.C", "status": "modified", "additions": 53, "deletions": 21, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a38b05ecd22d53cf98712c26a4fc739b99422a6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcdce3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a38b05ecd22d53cf98712c26a4fc739b99422a6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcdce3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcdce3.C?ref=a38b05ecd22d53cf98712c26a4fc739b99422a6c", "patch": "@@ -1,31 +1,48 @@\n-/* { dg-do  run { target { ! \"*-*-darwin*\" } } } */\n-/* { dg-options \"-O2 -fmath-errno -fdump-tree-cdce-details  -lm\" } */\n-/* { dg-final { scan-tree-dump  \"cdce3.C:68: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n-/* { dg-final { scan-tree-dump  \"cdce3.C:69: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n-/* { dg-final { scan-tree-dump  \"cdce3.C:70: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n-/* { dg-final { scan-tree-dump  \"cdce3.C:71: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n-/* { dg-final { scan-tree-dump  \"cdce3.C:72: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n-/* { dg-final { scan-tree-dump  \"cdce3.C:73: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n-/* { dg-final { scan-tree-dump  \"cdce3.C:74: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n-/* { dg-final { scan-tree-dump  \"cdce3.C:75: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n-/* { dg-final { scan-tree-dump  \"cdce3.C:76: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n-/* { dg-final { scan-tree-dump  \"cdce3.C:77: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n-/* { dg-final { scan-tree-dump  \"cdce3.C:78: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n-/* { dg-final { scan-tree-dump  \"cdce3.C:79: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n-/* { dg-final { scan-tree-dump  \"cdce3.C:80: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n-/* { dg-final { scan-tree-dump  \"cdce3.C:81: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n-/* { dg-final { scan-tree-dump  \"cdce3.C:82: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n-/* { dg-final { scan-tree-dump  \"cdce3.C:83: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fmath-errno -fdump-tree-cdce-details -DNO_GNU_EXTENSION -lm\" { target \"*-*-darwin*\" } } */\n+/* { dg-options \"-O2 -fmath-errno -fdump-tree-cdce-details  -lm\" { target { {! \"*-*-darwin*\" } && large_long_double } } }*/\n+/* { dg-options \"-O2 -fmath-errno -fdump-tree-cdce-details -DNO_LONG_DOUBLE -lm\" { target {! large_long_double } } } */\n+/* { dg-final { scan-tree-dump  \"cdce3.C:89: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" { target {! \"*-*-darwin*\" } } } }*/\n+/* { dg-final { scan-tree-dump  \"cdce3.C:90: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" { target {! \"*-*-darwin*\" } } } }*/\n+/* { dg-final { scan-tree-dump  \"cdce3.C:92: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n+/* { dg-final { scan-tree-dump  \"cdce3.C:93: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n+/* { dg-final { scan-tree-dump  \"cdce3.C:94: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n+/* { dg-final { scan-tree-dump  \"cdce3.C:95: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n+/* { dg-final { scan-tree-dump  \"cdce3.C:96: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n+/* { dg-final { scan-tree-dump  \"cdce3.C:97: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n+/* { dg-final { scan-tree-dump  \"cdce3.C:98: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n+/* { dg-final { scan-tree-dump  \"cdce3.C:99: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n+/* { dg-final { scan-tree-dump  \"cdce3.C:100: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n+/* { dg-final { scan-tree-dump  \"cdce3.C:101: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n+/* { dg-final { scan-tree-dump  \"cdce3.C:102: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n+/* { dg-final { scan-tree-dump  \"cdce3.C:103: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n+/* { dg-final { scan-tree-dump  \"cdce3.C:104: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n+/* { dg-final { scan-tree-dump  \"cdce3.C:105: note: function call is shrink-wrapped into error conditions\\.\" \"cdce\" } }*/\n /* { dg-final { cleanup-tree-dump \"cdce\" } } */\n #include <stdlib.h>\n #include <math.h>\n #ifdef DEBUG\n #include <stdio.h>\n #endif\n #include <errno.h>\n-typedef long double ldouble; \n typedef void (*FP) (int xp);\n #define NI __attribute__((noinline))\n+\n+#if defined(NO_LONG_DOUBLE)\n+double result;\n+\n+#define DEF_MATH_FUNC(prefix, name) NI void prefix##name##f (int x) \\\n+{ \\\n+  float yy = name##f ((float) x); \\\n+  STORE_RESULT; \\\n+} \\\n+NI void prefix##name (int x) \\\n+{ \\\n+  double yy = name ((double)x); \\\n+  STORE_RESULT; \\\n+}\n+#else\n+typedef long double ldouble; \n ldouble result;\n \n #define DEF_MATH_FUNC(prefix, name) NI void prefix##name##f (int x) \\\n@@ -42,12 +59,15 @@ NI void prefix##name##l (int x) \\\n { \\\n   ldouble yy = name##l ((ldouble)x); \\\n   STORE_RESULT; \\\n-} \n+}\n+#endif\n \n #undef STORE_RESULT\n #define STORE_RESULT result = yy\n+#if !defined(NO_GNU_EXTENSION)\n DEF_MATH_FUNC (m,pow10)\n DEF_MATH_FUNC (m,exp10)\n+#endif\n DEF_MATH_FUNC (m,exp2)\n DEF_MATH_FUNC (m,exp)\n DEF_MATH_FUNC (m,expm1)\n@@ -65,8 +85,10 @@ DEF_MATH_FUNC (m,sqrt)\n \n #undef STORE_RESULT\n #define STORE_RESULT\n+#if !defined(NO_GNU_EXTENSION)\n DEF_MATH_FUNC (o,pow10)\n DEF_MATH_FUNC (o,exp10)\n+#endif\n DEF_MATH_FUNC (o,exp2)\n DEF_MATH_FUNC (o,exp)\n DEF_MATH_FUNC (o,expm1)\n@@ -82,9 +104,14 @@ DEF_MATH_FUNC (o,log10)\n DEF_MATH_FUNC (o,log1p)\n DEF_MATH_FUNC (o,sqrt)\n \n+#if defined(NO_LONG_DOUBLE)\n+#define INIT_MATH_FUNC(prefix, name, lb, ub) { prefix##name##f, #name \"f\", 0, 0, lb, ub }, \\\n+{ prefix##name, #name, 0, 0, lb, ub },\n+#else\n #define INIT_MATH_FUNC(prefix, name, lb, ub) { prefix##name##f, #name \"f\", 0, 0, lb, ub }, \\\n { prefix##name, #name, 0, 0, lb, ub }, \\\n { prefix##name##l, #name \"l\" , 0, 0, lb, ub }, \n+#endif\n \n struct MathFuncInfo\n {\n@@ -95,8 +122,10 @@ struct MathFuncInfo\n   bool has_lb;\n   bool has_ub;\n } math_func_arr[] = { \n+#if !defined(NO_GNU_EXTENSION)\n   INIT_MATH_FUNC (m,pow10, false, true)\n   INIT_MATH_FUNC (m,exp10, false, true)\n+#endif\n   INIT_MATH_FUNC (m,exp2, false, true)\n   INIT_MATH_FUNC (m,expm1, false, true)\n   INIT_MATH_FUNC (m,exp, false, true)\n@@ -114,8 +143,11 @@ struct MathFuncInfo\n   { 0, 0,  0, 0, 0, 0} };\n \n MathFuncInfo opt_math_func_arr[] = \n-{ INIT_MATH_FUNC (o,pow10, false, true)\n+{\n+#if !defined(NO_GNU_EXTENSION)\n+  INIT_MATH_FUNC (o,pow10, false, true)\n   INIT_MATH_FUNC (o,exp10, false, true)\n+#endif\n   INIT_MATH_FUNC (o,exp2, false, true)\n   INIT_MATH_FUNC (o,expm1, false, true)\n   INIT_MATH_FUNC (o,exp, false, true)"}]}