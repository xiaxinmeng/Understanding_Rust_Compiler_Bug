{"sha": "6c1db78eca5e8594a6d7f0b85362ac31cdc3d155", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMxZGI3OGVjYTVlODU5NGE2ZDdmMGI4NTM2MmFjMzFjZGMzZDE1NQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-04-25T10:12:01Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-04-25T10:12:01Z"}, "message": "re PR c/52085 (incomplete enum not completed correctly if packed was used)\n\n\tPR c/52085\n\t* c-decl.c (finish_enum): Copy over TYPE_ALIGN.  Also check for \"mode\"\n\tattribute.\n\n\t* gcc.dg/enum-incomplete-2.c: New test.\n\t* gcc.dg/enum-mode-1.c: New test.\n\nFrom-SVN: r222440", "tree": {"sha": "b741b6d5a143c86b8739b94b471710bc0857833a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b741b6d5a143c86b8739b94b471710bc0857833a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c1db78eca5e8594a6d7f0b85362ac31cdc3d155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1db78eca5e8594a6d7f0b85362ac31cdc3d155", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c1db78eca5e8594a6d7f0b85362ac31cdc3d155", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1db78eca5e8594a6d7f0b85362ac31cdc3d155/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5962171edd2b172e59a33cb7ecdc899995b988ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5962171edd2b172e59a33cb7ecdc899995b988ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5962171edd2b172e59a33cb7ecdc899995b988ba"}], "stats": {"total": 69, "additions": 67, "deletions": 2}, "files": [{"sha": "938262a93f7074ddafea4af5f66ad9b540a855ec", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1db78eca5e8594a6d7f0b85362ac31cdc3d155/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1db78eca5e8594a6d7f0b85362ac31cdc3d155/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=6c1db78eca5e8594a6d7f0b85362ac31cdc3d155", "patch": "@@ -1,3 +1,9 @@\n+2015-04-25  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/52085\n+\t* c-decl.c (finish_enum): Copy over TYPE_ALIGN.  Also check for \"mode\"\n+\tattribute.\n+\n 2015-04-23  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/65345"}, {"sha": "4f6761d23928025039209f246fb1963734cdd66f", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1db78eca5e8594a6d7f0b85362ac31cdc3d155/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1db78eca5e8594a6d7f0b85362ac31cdc3d155/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=6c1db78eca5e8594a6d7f0b85362ac31cdc3d155", "patch": "@@ -8010,11 +8010,13 @@ finish_enum (tree enumtype, tree values, tree attributes)\n   TYPE_MIN_VALUE (enumtype) = TYPE_MIN_VALUE (tem);\n   TYPE_MAX_VALUE (enumtype) = TYPE_MAX_VALUE (tem);\n   TYPE_UNSIGNED (enumtype) = TYPE_UNSIGNED (tem);\n+  TYPE_ALIGN (enumtype) = TYPE_ALIGN (tem);\n   TYPE_SIZE (enumtype) = 0;\n \n-  /* If the precision of the type was specific with an attribute and it\n+  /* If the precision of the type was specified with an attribute and it\n      was too small, give an error.  Otherwise, use it.  */\n-  if (TYPE_PRECISION (enumtype))\n+  if (TYPE_PRECISION (enumtype)\n+      && lookup_attribute (\"mode\", attributes))\n     {\n       if (precision > TYPE_PRECISION (enumtype))\n \terror (\"specified mode too small for enumeral values\");"}, {"sha": "18a56e868dfc81b6f24a06471ae23723725a244a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1db78eca5e8594a6d7f0b85362ac31cdc3d155/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1db78eca5e8594a6d7f0b85362ac31cdc3d155/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c1db78eca5e8594a6d7f0b85362ac31cdc3d155", "patch": "@@ -1,3 +1,9 @@\n+2015-04-25  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/52085\n+\t* gcc.dg/enum-incomplete-2.c: New test.\n+\t* gcc.dg/enum-mode-1.c: New test.\n+\n 2015-04-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/65849"}, {"sha": "59705514cccb67386648c67ae6c9b2cb5cc84b6f", "filename": "gcc/testsuite/gcc.dg/enum-incomplete-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1db78eca5e8594a6d7f0b85362ac31cdc3d155/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-incomplete-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1db78eca5e8594a6d7f0b85362ac31cdc3d155/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-incomplete-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-incomplete-2.c?ref=6c1db78eca5e8594a6d7f0b85362ac31cdc3d155", "patch": "@@ -0,0 +1,41 @@\n+/* PR c/52085 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+#define SA(X) _Static_assert((X),#X)\n+\n+enum e1;\n+enum e1 { A } __attribute__ ((__packed__));\n+enum e2 { B } __attribute__ ((__packed__));\n+SA (sizeof (enum e1) == sizeof (enum e2));\n+SA (_Alignof (enum e1) == _Alignof (enum e2));\n+\n+enum e3;\n+enum e3 { C = 256 } __attribute__ ((__packed__));\n+enum e4 { D = 256 } __attribute__ ((__packed__));\n+SA (sizeof (enum e3) == sizeof (enum e4));\n+SA (_Alignof (enum e3) == _Alignof (enum e4));\n+\n+enum e5;\n+enum e5 { E = __INT_MAX__ } __attribute__ ((__packed__));\n+enum e6 { F = __INT_MAX__ } __attribute__ ((__packed__));\n+SA (sizeof (enum e5) == sizeof (enum e6));\n+SA (_Alignof (enum e5) == _Alignof (enum e6));\n+\n+enum e7;\n+enum e7 { G } __attribute__ ((__mode__(__byte__)));\n+enum e8 { H } __attribute__ ((__mode__(__byte__)));\n+SA (sizeof (enum e7) == sizeof (enum e8));\n+SA (_Alignof (enum e7) == _Alignof (enum e8));\n+\n+enum e9;\n+enum e9 { I } __attribute__ ((__packed__, __mode__(__byte__)));\n+enum e10 { J } __attribute__ ((__packed__, __mode__(__byte__)));\n+SA (sizeof (enum e9) == sizeof (enum e10));\n+SA (_Alignof (enum e9) == _Alignof (enum e10));\n+\n+enum e11;\n+enum e11 { K } __attribute__ ((__mode__(__word__)));\n+enum e12 { L } __attribute__ ((__mode__(__word__)));\n+SA (sizeof (enum e11) == sizeof (enum e12));\n+SA (_Alignof (enum e11) == _Alignof (enum e12));"}, {"sha": "a701123c728b734b89aeb2930aa4637fc32b58bd", "filename": "gcc/testsuite/gcc.dg/enum-mode-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1db78eca5e8594a6d7f0b85362ac31cdc3d155/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-mode-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1db78eca5e8594a6d7f0b85362ac31cdc3d155/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-mode-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fenum-mode-1.c?ref=6c1db78eca5e8594a6d7f0b85362ac31cdc3d155", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+\n+enum e1 { A = 256 } __attribute__((__mode__(__byte__))); /* { dg-error \"specified mode too small for enumeral values\" } */\n+enum e2 { B = 256 } __attribute__((__packed__, __mode__(__byte__))); /* { dg-error \"specified mode too small for enumeral values\" } */\n+\n+enum e3 { C = __INT_MAX__ } __attribute__((__mode__(__QI__))); /* { dg-error \"specified mode too small for enumeral values\" } */\n+enum e4 { D = __INT_MAX__ } __attribute__((__packed__, __mode__(__QI__))); /* { dg-error \"specified mode too small for enumeral values\" } */\n+\n+enum e5 { E = __INT_MAX__ } __attribute__((__mode__(__HI__))); /* { dg-error \"specified mode too small for enumeral values\" } */\n+enum e6 { F = __INT_MAX__ } __attribute__((__packed__, __mode__(__HI__))); /* { dg-error \"specified mode too small for enumeral values\" } */"}]}