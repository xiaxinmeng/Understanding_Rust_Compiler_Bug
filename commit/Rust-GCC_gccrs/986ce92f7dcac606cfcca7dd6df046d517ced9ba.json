{"sha": "986ce92f7dcac606cfcca7dd6df046d517ced9ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg2Y2U5MmY3ZGNhYzYwNmNmY2NhN2RkNmRmMDQ2ZDUxN2NlZDliYQ==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2012-01-23T19:55:35Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2012-01-23T19:55:35Z"}, "message": "re PR target/51900 (const variable initialization always zero)\n\n\tPR target/51900\n\t* config/i386/predicates.md (symbolic_operand): Allow\n\tUNSPEC_PCREL as PIC expression for lea.\n\t* config/i386/winnt.c (i386_pe_binds_local_p): Reworked.\n\t* config/i386/i386.c (ix86_delegitimize_address): Handle\n\tUNSPEC_PCREL for none-MEM, too.\n\nFrom-SVN: r183450", "tree": {"sha": "cec9b202b1fa45f9d2268d51754db993c9a87235", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cec9b202b1fa45f9d2268d51754db993c9a87235"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/986ce92f7dcac606cfcca7dd6df046d517ced9ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/986ce92f7dcac606cfcca7dd6df046d517ced9ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/986ce92f7dcac606cfcca7dd6df046d517ced9ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/986ce92f7dcac606cfcca7dd6df046d517ced9ba/comments", "author": null, "committer": null, "parents": [{"sha": "135b6fa4d23fc35b68055a8f1717a0fbf4b7a86c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/135b6fa4d23fc35b68055a8f1717a0fbf4b7a86c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/135b6fa4d23fc35b68055a8f1717a0fbf4b7a86c"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "82b574a950d8c2a2f140754fccf74b7f44e66a7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/986ce92f7dcac606cfcca7dd6df046d517ced9ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/986ce92f7dcac606cfcca7dd6df046d517ced9ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=986ce92f7dcac606cfcca7dd6df046d517ced9ba", "patch": "@@ -1,3 +1,12 @@\n+2012-01-23  Kai Tietz  <ktietz@redhat.com>\n+\n+\tPR target/51900\n+\t* config/i386/predicates.md (symbolic_operand): Allow\n+\tUNSPEC_PCREL as PIC expression for lea.\n+\t* config/i386/winnt.c (i386_pe_binds_local_p): Reworked.\n+\t* config/i386/i386.c (ix86_delegitimize_address): Handle\n+\tUNSPEC_PCREL for none-MEM, too.\n+\n 2012-01-23  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* trans-mem.c (ipa_tm_create_version): Set externally_visible."}, {"sha": "a50d8712ecbe0c7a0ef774fce8bcb568c3e2732a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/986ce92f7dcac606cfcca7dd6df046d517ced9ba/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/986ce92f7dcac606cfcca7dd6df046d517ced9ba/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=986ce92f7dcac606cfcca7dd6df046d517ced9ba", "patch": "@@ -13231,10 +13231,10 @@ ix86_delegitimize_address (rtx x)\n \t  || GET_CODE (XEXP (x, 0)) != UNSPEC\n \t  || (XINT (XEXP (x, 0), 1) != UNSPEC_GOTPCREL\n \t      && XINT (XEXP (x, 0), 1) != UNSPEC_PCREL)\n-\t  || !MEM_P (orig_x))\n+\t  || (!MEM_P (orig_x) && XINT (XEXP (x, 0), 1) != UNSPEC_PCREL))\n \treturn ix86_delegitimize_tls_address (orig_x);\n       x = XVECEXP (XEXP (x, 0), 0, 0);\n-      if (GET_MODE (orig_x) != GET_MODE (x))\n+      if (GET_MODE (orig_x) != GET_MODE (x) && MEM_P (orig_x))\n \t{\n \t  x = simplify_gen_subreg (GET_MODE (orig_x), x,\n \t\t\t\t   GET_MODE (x), 0);"}, {"sha": "32f73dacdd8da5c267cb0ef062ecabdbb18505d4", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/986ce92f7dcac606cfcca7dd6df046d517ced9ba/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/986ce92f7dcac606cfcca7dd6df046d517ced9ba/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=986ce92f7dcac606cfcca7dd6df046d517ced9ba", "patch": "@@ -410,6 +410,7 @@\n \t  || (GET_CODE (op) == UNSPEC\n \t      && (XINT (op, 1) == UNSPEC_GOT\n \t\t  || XINT (op, 1) == UNSPEC_GOTOFF\n+\t\t  || XINT (op, 1) == UNSPEC_PCREL\n \t\t  || XINT (op, 1) == UNSPEC_GOTPCREL)))\n \treturn true;\n       if (GET_CODE (op) != PLUS"}, {"sha": "79cbb6b4a2823471f46cbd9eb7c86e05eef981d7", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/986ce92f7dcac606cfcca7dd6df046d517ced9ba/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/986ce92f7dcac606cfcca7dd6df046d517ced9ba/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=986ce92f7dcac606cfcca7dd6df046d517ced9ba", "patch": "@@ -350,21 +350,22 @@ i386_pe_encode_section_info (tree decl, rtx rtl, int first)\n   SYMBOL_REF_FLAGS (symbol) = flags;\n }\n \n+\n bool\n i386_pe_binds_local_p (const_tree exp)\n {\n-  /* PE does not do dynamic binding.  Indeed, the only kind of\n-     non-local reference comes from a dllimport'd symbol.  */\n   if ((TREE_CODE (exp) == VAR_DECL || TREE_CODE (exp) == FUNCTION_DECL)\n       && DECL_DLLIMPORT_P (exp))\n     return false;\n \n-  /* Or a weak one, now that they are supported.  */\n-  if ((TREE_CODE (exp) == VAR_DECL || TREE_CODE (exp) == FUNCTION_DECL)\n-      && DECL_WEAK (exp))\n-    return false;\n-\n-  return true;\n+  /* External public symbols, which aren't weakref-s,\n+     have local-binding for PE targets.  */\n+  if (DECL_P (exp)\n+      && !lookup_attribute (\"weakref\", DECL_ATTRIBUTES (exp))\n+      && TREE_PUBLIC (exp)\n+      && DECL_EXTERNAL (exp))\n+    return true;\n+  return default_binds_local_p_1 (exp, 0);\n }\n \n /* Also strip the fastcall prefix and stdcall suffix.  */"}]}