{"sha": "a011cd929d0a2b08b0e523e23523a567061c8da7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAxMWNkOTI5ZDBhMmIwOGIwZTUyM2UyMzUyM2E1NjcwNjFjOGRhNw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2016-02-08T15:36:16Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2016-02-08T15:36:16Z"}, "message": "Remove -fshort-double\n\n\tPR target/60410\n\t* tree.c (build_common_tree_nodes): Remove short_double argument.\n\tAll callers changed.\n\t* tree.h (build_common_tree_nodes): Adjust declaration.\n\t* doc/invoke.texi (-fshort-double): Remove documentation.\n\t* config/mips/t-img-elf (MULTILIB_OPTIONS, MULTILIB_DIRNAMES,\n\tMULTILIB_EXCEPTIONS): Remove -fshort-double variant.\n\t* lto-wrapper.c (merge_and_complain, append_compiler_options,\n\tappend_linker_options): Don't handle OPT_fshort_double.\n\t\nc-family/\n\tPR target/60410\n\t* c.opt (fshort-double): Remove.\n\ntestsuite/\n\tPR target/60410\n\t* gcc.dg/lto/pr55113_0.c: Remove test.\n\nFrom-SVN: r233218", "tree": {"sha": "4d1efbb39a9d10966c886dd48774317c71f0032a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d1efbb39a9d10966c886dd48774317c71f0032a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a011cd929d0a2b08b0e523e23523a567061c8da7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a011cd929d0a2b08b0e523e23523a567061c8da7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a011cd929d0a2b08b0e523e23523a567061c8da7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a011cd929d0a2b08b0e523e23523a567061c8da7/comments", "author": null, "committer": null, "parents": [{"sha": "c0328be344ba97895486bb1d5486ecb94c8d2d26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0328be344ba97895486bb1d5486ecb94c8d2d26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0328be344ba97895486bb1d5486ecb94c8d2d26"}], "stats": {"total": 88, "additions": 34, "deletions": 54}, "files": [{"sha": "e5e85f3ce94dfd808d48223e4fc113acf1ad3558", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a011cd929d0a2b08b0e523e23523a567061c8da7", "patch": "@@ -11,6 +11,16 @@\n \n 2016-02-08  Bernd Schmidt  <bschmidt@redhat.com>\n \n+\tPR target/60410\n+\t* tree.c (build_common_tree_nodes): Remove short_double argument.\n+\tAll callers changed.\n+\t* tree.h (build_common_tree_nodes): Adjust declaration.\n+\t* doc/invoke.texi (-fshort-double): Remove documentation.\n+\t* config/mips/t-img-elf (MULTILIB_OPTIONS, MULTILIB_DIRNAMES,\n+\tMULTILIB_EXCEPTIONS): Remove -fshort-double variant.\n+\t* lto-wrapper.c (merge_and_complain, append_compiler_options)\n+\t(append_linker_options): Don't handle OPT_fshort_double.\n+\n \tPR rtl-optimization/68730\n \t* lra-remat.c (insn_to_cand_activation): New static variable.\n \t(lra_remat): Allocate and free it."}, {"sha": "75e467bf7422f8bf697ed19675ca65e3212054ef", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=a011cd929d0a2b08b0e523e23523a567061c8da7", "patch": "@@ -355,7 +355,7 @@ gnat_init (void)\n {\n   /* Do little here, most of the standard declarations are set up after the\n      front-end has been run.  Use the same `char' as C for Interfaces.C.  */\n-  build_common_tree_nodes (flag_signed_char, false);\n+  build_common_tree_nodes (flag_signed_char);\n \n   /* In Ada, we use an unsigned 8-bit type for the default boolean type.  */\n   boolean_type_node = make_unsigned_type (8);"}, {"sha": "745ce8e6c3236cf3a1b61b5fa4e25de0b31c219d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a011cd929d0a2b08b0e523e23523a567061c8da7", "patch": "@@ -1,3 +1,8 @@\n+2016-02-08  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR target/60410\n+\t* c.opt (fshort-double): Remove.\n+\n 2016-02-05  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/69662"}, {"sha": "3d84316cd12d46a1c63d99fc686f96ca801464e9", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=a011cd929d0a2b08b0e523e23523a567061c8da7", "patch": "@@ -5237,7 +5237,7 @@ c_common_nodes_and_builtins (void)\n   tree va_list_arg_type_node;\n   int i;\n \n-  build_common_tree_nodes (flag_signed_char, flag_short_double);\n+  build_common_tree_nodes (flag_signed_char);\n \n   /* Define `int' and `char' first so that dbx will output them first.  */\n   record_builtin_type (RID_INT, NULL, integer_type_node);"}, {"sha": "b4ec3b8c0564c9c99f3acc5d6256366a9e5674c5", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=a011cd929d0a2b08b0e523e23523a567061c8da7", "patch": "@@ -1439,10 +1439,6 @@ frtti\n C++ ObjC++ Optimization Var(flag_rtti) Init(1)\n Generate run time type descriptor information.\n \n-fshort-double\n-C ObjC C++ ObjC++ LTO Optimization Var(flag_short_double)\n-Use the same size for double as for float.\n-\n fshort-enums\n C ObjC C++ ObjC++ LTO Optimization Var(flag_short_enums)\n Use the narrowest integer type possible for enumeration types."}, {"sha": "8c2285330e472e56299e774b62d0aa7539002cd8", "filename": "gcc/config/mips/t-img-elf", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Fconfig%2Fmips%2Ft-img-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Fconfig%2Fmips%2Ft-img-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-img-elf?ref=a011cd929d0a2b08b0e523e23523a567061c8da7", "patch": "@@ -20,19 +20,14 @@\n # A multilib for mips32r6+LE\n # A multilib for mips64r6\n # A multilib for mips64r6+LE\n-# A multilib for mips32r6+LE+singlefloat+shortdouble\n \n-MULTILIB_OPTIONS = mips64r6 mabi=64 EL msoft-float/msingle-float fshort-double\n-MULTILIB_DIRNAMES = mips64r6 64 el sof sgl short\n+MULTILIB_OPTIONS = mips64r6 mabi=64 EL msoft-float/msingle-float\n+MULTILIB_DIRNAMES = mips64r6 64 el sof sgl\n MULTILIB_MATCHES = EL=mel EB=meb\n \n # Don't build 64r6 with single-float\n MULTILIB_EXCEPTIONS += mips64r6/*msingle-float*\n-MULTILIB_EXCEPTIONS += mips64r6/*fshort-double*\n \n MULTILIB_EXCEPTIONS += mabi=64*\n MULTILIB_EXCEPTIONS += msingle-float*\n MULTILIB_EXCEPTIONS += *msingle-float\n-MULTILIB_EXCEPTIONS += fshort-double\n-MULTILIB_EXCEPTIONS += EL/fshort-double\n-MULTILIB_EXCEPTIONS += *msoft-float/fshort-double"}, {"sha": "666d976f7c4474e4b601834cea4e76bf5ad19b7e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a011cd929d0a2b08b0e523e23523a567061c8da7", "patch": "@@ -489,8 +489,7 @@ Objective-C and Objective-C++ Dialects}.\n -fpcc-struct-return  -fpic  -fPIC -fpie -fPIE -fno-plt @gol\n -fno-jump-tables @gol\n -frecord-gcc-switches @gol\n--freg-struct-return  -fshort-enums @gol\n--fshort-double  -fshort-wchar @gol\n+-freg-struct-return  -fshort-enums  -fshort-wchar @gol\n -fverbose-asm  -fpack-struct[=@var{n}]  @gol\n -fleading-underscore  -ftls-model=@var{model} @gol\n -fstack-reuse=@var{reuse_level} @gol\n@@ -11109,14 +11108,6 @@ is equivalent to the smallest integer type that has enough room.\n code that is not binary compatible with code generated without that switch.\n Use it to conform to a non-default application binary interface.\n \n-@item -fshort-double\n-@opindex fshort-double\n-Use the same size for @code{double} as for @code{float}.\n-\n-@strong{Warning:} the @option{-fshort-double} switch causes GCC to generate\n-code that is not binary compatible with code generated without that switch.\n-Use it to conform to a non-default application binary interface.\n-\n @item -fshort-wchar\n @opindex fshort-wchar\n Override the underlying type for @code{wchar_t} to be @code{short"}, {"sha": "b89a291e7615c6b5b576a6fbd2a7fe518b226186", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=a011cd929d0a2b08b0e523e23523a567061c8da7", "patch": "@@ -491,9 +491,8 @@ gfc_init_decl_processing (void)\n   global_binding_level = current_binding_level;\n \n   /* Build common tree nodes. char_type_node is unsigned because we\n-     only use it for actual characters, not for INTEGER(1). Also, we\n-     want double_type_node to actually have double precision.  */\n-  build_common_tree_nodes (false, false);\n+     only use it for actual characters, not for INTEGER(1).  */\n+  build_common_tree_nodes (false);\n \n   void_list_node = build_tree_list (NULL_TREE, void_type_node);\n "}, {"sha": "9c95c8e0bb16462a314f9bad7a1c34229858cdb7", "filename": "gcc/go/go-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Fgo%2Fgo-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Fgo%2Fgo-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-lang.c?ref=a011cd929d0a2b08b0e523e23523a567061c8da7", "patch": "@@ -89,7 +89,7 @@ static const char *go_relative_import_path = NULL;\n static bool\n go_langhook_init (void)\n {\n-  build_common_tree_nodes (false, false);\n+  build_common_tree_nodes (false);\n \n   /* I don't know why this has to be done explicitly.  */\n   void_list_node = build_tree_list (NULL_TREE, void_type_node);"}, {"sha": "93304daea0076ffc05a88ace09b03087d8866928", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=a011cd929d0a2b08b0e523e23523a567061c8da7", "patch": "@@ -565,7 +565,7 @@ java_init_decl_processing (void)\n   global_binding_level = current_binding_level;\n \n   /* Build common tree nodes, Java has an unsigned char.  */\n-  build_common_tree_nodes (false, false);\n+  build_common_tree_nodes (false);\n \n   /* ???  Now we continue and override some of the built types again\n      with Java specific types.  As the above generated types are"}, {"sha": "6a337a030e03a936f07723dc4491f7713900c0d7", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=a011cd929d0a2b08b0e523e23523a567061c8da7", "patch": "@@ -308,7 +308,6 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n \n \tcase OPT_freg_struct_return:\n \tcase OPT_fpcc_struct_return:\n-\tcase OPT_fshort_double:\n \t  for (j = 0; j < *decoded_options_count; ++j)\n \t    if ((*decoded_options)[j].opt_index == foption->opt_index)\n \t      break;\n@@ -511,7 +510,6 @@ append_compiler_options (obstack *argv_obstack, struct cl_decoded_option *opts,\n \tcase OPT_fgnu_tm:\n \tcase OPT_freg_struct_return:\n \tcase OPT_fpcc_struct_return:\n-\tcase OPT_fshort_double:\n \tcase OPT_ffp_contract_:\n \tcase OPT_fmath_errno:\n \tcase OPT_fsigned_zeros:\n@@ -569,7 +567,6 @@ append_linker_options (obstack *argv_obstack, struct cl_decoded_option *opts,\n \n \tcase OPT_freg_struct_return:\n \tcase OPT_fpcc_struct_return:\n-\tcase OPT_fshort_double:\n \t  /* Ignore these, they are determined by the input files.\n \t     ???  We fail to diagnose a possible mismatch here.  */\n \t  continue;"}, {"sha": "691e9e2090521a3a1d7ff0ec750cb85d4c673fd5", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=a011cd929d0a2b08b0e523e23523a567061c8da7", "patch": "@@ -1246,7 +1246,7 @@ lto_init (void)\n   flag_generate_lto = (flag_wpa != NULL);\n \n   /* Create the basic integer types.  */\n-  build_common_tree_nodes (flag_signed_char, flag_short_double);\n+  build_common_tree_nodes (flag_signed_char);\n \n   /* The global tree for the main identifier is filled in by\n      language-specific front-end initialization that is not run in the"}, {"sha": "be3f5ec54070c5068c3ae37046524a08703bffd0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a011cd929d0a2b08b0e523e23523a567061c8da7", "patch": "@@ -1,3 +1,8 @@\n+2016-02-08  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR target/60410\n+\t* gcc.dg/lto/pr55113_0.c: Remove test.\n+\n 2016-02-08  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/69719"}, {"sha": "59e944c318d2698f0db340430b4a354a18c95407", "filename": "gcc/testsuite/gcc.dg/lto/pr55113_0.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0328be344ba97895486bb1d5486ecb94c8d2d26/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr55113_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0328be344ba97895486bb1d5486ecb94c8d2d26/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr55113_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr55113_0.c?ref=c0328be344ba97895486bb1d5486ecb94c8d2d26", "patch": "@@ -1,13 +0,0 @@\n-/* PR 55113 */\n-/* { dg-lto-do link } */\n-/* { dg-lto-options { { -flto -fshort-double -O0 } } }*/\n-/* { dg-skip-if \"PR60410\" { i?86-*-* x86_64-*-* } } */\n-\n-int \n-main(void)\n-{\n-  float a = 1.0;\n-  float b = 2.0;\n-  double f = a + b * 1e-12;\n-  return (int)f - 1;\n-}"}, {"sha": "1d14583a9583eea8bbb94d5c786ad4493871c1f0", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a011cd929d0a2b08b0e523e23523a567061c8da7", "patch": "@@ -10036,12 +10036,10 @@ build_atomic_base (tree type, unsigned int align)\n }\n \n /* Create nodes for all integer types (and error_mark_node) using the sizes\n-   of C datatypes.  SIGNED_CHAR specifies whether char is signed,\n-   SHORT_DOUBLE specifies whether double should be of the same precision\n-   as float.  */\n+   of C datatypes.  SIGNED_CHAR specifies whether char is signed.  */\n \n void\n-build_common_tree_nodes (bool signed_char, bool short_double)\n+build_common_tree_nodes (bool signed_char)\n {\n   int i;\n \n@@ -10202,10 +10200,7 @@ build_common_tree_nodes (bool signed_char, bool short_double)\n   layout_type (float_type_node);\n \n   double_type_node = make_node (REAL_TYPE);\n-  if (short_double)\n-    TYPE_PRECISION (double_type_node) = FLOAT_TYPE_SIZE;\n-  else\n-    TYPE_PRECISION (double_type_node) = DOUBLE_TYPE_SIZE;\n+  TYPE_PRECISION (double_type_node) = DOUBLE_TYPE_SIZE;\n   layout_type (double_type_node);\n \n   long_double_type_node = make_node (REAL_TYPE);"}, {"sha": "544a6a163dfc146e631e7734e673b5dd60750593", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a011cd929d0a2b08b0e523e23523a567061c8da7/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a011cd929d0a2b08b0e523e23523a567061c8da7", "patch": "@@ -4763,7 +4763,7 @@ extern tree reconstruct_complex_type (tree, tree);\n extern int real_onep (const_tree);\n extern int real_minus_onep (const_tree);\n extern void init_ttree (void);\n-extern void build_common_tree_nodes (bool, bool);\n+extern void build_common_tree_nodes (bool);\n extern void build_common_builtin_nodes (void);\n extern tree build_nonstandard_integer_type (unsigned HOST_WIDE_INT, int);\n extern tree build_nonstandard_boolean_type (unsigned HOST_WIDE_INT);"}]}