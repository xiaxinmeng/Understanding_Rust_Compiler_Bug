{"sha": "554846f3b75d52bae87a1d076950eccf34846f4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU0ODQ2ZjNiNzVkNTJiYWU4N2ExZDA3Njk1MGVjY2YzNDg0NmY0Yg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-08-14T08:37:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T08:37:51Z"}, "message": "comperr.adb: Fix problem with suppressing warning messages from gigi\n\n2007-08-14  Robert Dewar  <dewar@adacore.com>\n\n\t* comperr.adb: Fix problem with suppressing warning messages from gigi\n\n\t* erroutc.ads, erroutc.adb, errout.ads, \n\terrout.adb (Write_Eol): Remove trailing spaces before writing the line\n\t(Write_Eol_Keep_Blanks): New procedure to write a line, including\n\tpossible trailing spaces.\n\t(Output_Source_Line): Call Write_Eol_Keep_Blanks to output a source line\n\tFix problem with suppressing warning messages from back end\n\tImprove handling of deleted warnings\n\n\t* gnat1drv.adb: \n\tFix problem with suppressing warning messages from back end\n\tHandle setting of Static_Dispatch_Tables flag.\n\n\t* prepcomp.adb: \n\tFix problem with suppressing warning messages from back end\n\n\t* exp_intr.adb: Improve handling of deleted warnings\n\nFrom-SVN: r127413", "tree": {"sha": "eb32487d160f5457a47e310d937e95ab6a78e61e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb32487d160f5457a47e310d937e95ab6a78e61e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/554846f3b75d52bae87a1d076950eccf34846f4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/554846f3b75d52bae87a1d076950eccf34846f4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/554846f3b75d52bae87a1d076950eccf34846f4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/554846f3b75d52bae87a1d076950eccf34846f4b/comments", "author": null, "committer": null, "parents": [{"sha": "8133b9d1470963fdcb4a59de87da8fdd7126ccd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8133b9d1470963fdcb4a59de87da8fdd7126ccd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8133b9d1470963fdcb4a59de87da8fdd7126ccd3"}], "stats": {"total": 201, "additions": 141, "deletions": 60}, "files": [{"sha": "3a23a92e7787e777561ee0d270cf10a4b294dc50", "filename": "gcc/ada/comperr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554846f3b75d52bae87a1d076950eccf34846f4b/gcc%2Fada%2Fcomperr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554846f3b75d52bae87a1d076950eccf34846f4b/gcc%2Fada%2Fcomperr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcomperr.adb?ref=554846f3b75d52bae87a1d076950eccf34846f4b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -120,7 +120,7 @@ package body Comperr is\n       --  Debug flag K disables this behavior (useful for debugging)\n \n       if Serious_Errors_Detected /= 0 and then not Debug_Flag_K then\n-         Errout.Finalize;\n+         Errout.Finalize (Last_Call => True);\n          Errout.Output_Messages;\n \n          Set_Standard_Error;"}, {"sha": "704f22197301c0a02e39b87256b4b5dd0bb558f5", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554846f3b75d52bae87a1d076950eccf34846f4b/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554846f3b75d52bae87a1d076950eccf34846f4b/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=554846f3b75d52bae87a1d076950eccf34846f4b", "patch": "@@ -204,7 +204,14 @@ package Errout is\n    --\n    --      By convention, the # insertion character is only used at the end of\n    --      an error message, so the above strings only appear as the last\n-   --      characters of an error message.\n+   --      characters of an error message. The only exceptions to this rule\n+   --      are that an RM reference may follow in the form (RM .....) and a\n+   --      right parenthesis may immediately follow the #. In the case of\n+   --      continued messages, # can only appear at the end of a group of\n+   --      continuation messsages, except that \\\\ messages which always start\n+   --      a new line end the sequence from the point of view of this rule.\n+   --      The idea is that for any use of -gnatj, it will still be the case\n+   --      that a location reference appears only at the end of a line.\n \n    --    Insertion character } (Right brace: insert type reference)\n    --      The character } is replaced by a string describing the type\n@@ -244,8 +251,9 @@ package Errout is\n    --      the message unconditional which means that it is output even if it\n    --      would normally be suppressed. See section above for a description\n    --      of the cases in which messages are normally suppressed. Note that\n-   --      warnings are never suppressed, so the use of the ! character in a\n-   --      warning message is never useful.\n+   --      in the case of warnings, the meaning is that the warning should not\n+   --      be removed in dead code (that's the only time that the use of !\n+   --      has any effect for a warning).\n    --\n    --      Note: the presence of ! is ignored in continuation messages (i.e.\n    --      messages starting with the \\ insertion character). The effect of the\n@@ -456,6 +464,10 @@ package Errout is\n    --  used for keywords (actually the first compilation unit keyword) in the\n    --  source file.\n \n+   --  Note: a special exception is that RM is never treated as a keyword\n+   --  but instead is copied literally into the message, this avoids the\n+   --  need for writing 'R'M for all reference manual quotes.\n+\n    --  In the case of names, the default mode for the error text processor\n    --  is to surround the name by quotation marks automatically. The case\n    --  used for the identifier names is taken from the source program where\n@@ -560,18 +572,23 @@ package Errout is\n    --  Initializes for output of error messages. Must be called for each\n    --  source file before using any of the other routines in the package.\n \n-   procedure Finalize;\n+   procedure Finalize (Last_Call : Boolean);\n    --  Finalize processing of error message list. Includes processing for\n    --  duplicated error messages, and other similar final adjustment of the\n    --  list of error messages. Note that this procedure must be called before\n    --  calling Compilation_Errors to determine if there were any errors. It\n-   --  is perfectly fine to call Finalize more than once. Indeed this can\n-   --  make good sense. For example, do some processing that may generate\n-   --  messages. Call Finalize to eliminate duplicates and remove deleted\n-   --  warnings. Test for compilation errors using Compilation_Errors, then\n-   --  generate some more errors/warnings, call Finalize again to make sure\n-   --  that all duplicates in these new messages are dealt with, then finally\n-   --  call Output_Messages to output the final list of messages.\n+   --  is perfectly fine to call Finalize more than once, providing that the\n+   --  parameter Last_Call is set False for every call except the last call.\n+\n+   --  This multiple call capability is used to do some processing that may\n+   --  generate messages. Call Finalize to eliminate duplicates and remove\n+   --  deleted warnings. Test for compilation errors using Compilation_Errors,\n+   --  then generate some more errors/warnings, call Finalize again to make\n+   --  sure that all duplicates in these new messages are dealt with, then\n+   --  finally call Output_Messages to output the final list of messages. The\n+   --  argument Last_Call must be set False on all calls except the last call,\n+   --  and must be set True on the last call (a value of True activates some\n+   --  processing that must only be done after all messages are posted).\n \n    procedure Output_Messages;\n    --  Output list of messages, including messages giving number of detected\n@@ -676,10 +693,14 @@ package Errout is\n \n    procedure Remove_Warning_Messages (N : Node_Id);\n    --  Remove any warning messages corresponding to the Sloc of N or any\n-   --  of its descendent nodes. No effect if no such warnings.\n+   --  of its descendent nodes. No effect if no such warnings. Note that\n+   --  style messages (identified by the fact that they start with \"(style)\"\n+   --  are not removed by this call. Basically the idea behind this procedure\n+   --  is to remove warnings about execution conditions from known dead code.\n \n    procedure Remove_Warning_Messages (L : List_Id);\n-   --  Remove warnings on all elements of a list\n+   --  Remove warnings on all elements of a list (Calls Remove_Warning_Messages\n+   --  on each element of the list, see above).\n \n    procedure Set_Ignore_Errors (To : Boolean);\n    --  Following a call to this procedure with To=True, all error calls are\n@@ -696,7 +717,10 @@ package Errout is\n    --  Called in response to a pragma Warnings (On) to record the source\n    --  location from which warnings are to be turned back on.\n \n-   procedure Set_Specific_Warning_Off (Loc : Source_Ptr; Msg : String)\n+   procedure Set_Specific_Warning_Off\n+     (Loc    : Source_Ptr;\n+      Msg    : String;\n+      Config : Boolean)\n      renames Erroutc.Set_Specific_Warning_Off;\n    --  This is called in response to the two argument form of pragma Warnings\n    --  where the first argument is OFF, and the second argument is the prefix"}, {"sha": "6f928b02c28aeb0f8660c4c34c8861c585921a5f", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554846f3b75d52bae87a1d076950eccf34846f4b/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554846f3b75d52bae87a1d076950eccf34846f4b/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=554846f3b75d52bae87a1d076950eccf34846f4b", "patch": "@@ -924,10 +924,19 @@ package body Erroutc is\n          J := J + 1;\n       end loop;\n \n-      Set_Casing (Keyword_Casing (Flag_Source), All_Lower_Case);\n-      Set_Msg_Quote;\n-      Set_Msg_Name_Buffer;\n-      Set_Msg_Quote;\n+      --  Here is where we make the special exception for RM\n+\n+      if Name_Len = 2 and then Name_Buffer (1 .. 2) = \"RM\" then\n+         Set_Msg_Name_Buffer;\n+\n+      --  Not RM: case appropriately and add surrounding quotes\n+\n+      else\n+         Set_Casing (Keyword_Casing (Flag_Source), All_Lower_Case);\n+         Set_Msg_Quote;\n+         Set_Msg_Name_Buffer;\n+         Set_Msg_Quote;\n+      end if;\n    end Set_Msg_Insertion_Reserved_Word;\n \n    -------------------------------------\n@@ -1038,7 +1047,11 @@ package body Erroutc is\n    -- Set_Specific_Warning_Off --\n    ------------------------------\n \n-   procedure Set_Specific_Warning_Off (Loc : Source_Ptr; Msg : String) is\n+   procedure Set_Specific_Warning_Off\n+     (Loc    : Source_Ptr;\n+      Msg    : String;\n+      Config : Boolean)\n+   is\n       pragma Assert (Msg'First = 1);\n \n       Pattern : String  := Msg;\n@@ -1063,17 +1076,17 @@ package body Erroutc is\n          Star_End := False;\n       end if;\n \n-      Specific_Warnings.Increment_Last;\n-      Specific_Warnings.Table (Specific_Warnings.Last) :=\n-        (Start      => Loc,\n-         Msg        => new String'(Msg),\n-         Pattern    => new String'(Pattern (1 .. Patlen)),\n-         Patlen     => Patlen,\n-         Stop       => Source_Last (Current_Source_File),\n-         Open       => True,\n-         Used       => False,\n-         Star_Start => Star_Start,\n-         Star_End   => Star_End);\n+      Specific_Warnings.Append\n+        ((Start      => Loc,\n+          Msg        => new String'(Msg),\n+          Pattern    => new String'(Pattern (1 .. Patlen)),\n+          Patlen     => Patlen,\n+          Stop       => Source_Last (Current_Source_File),\n+          Open       => True,\n+          Used       => False,\n+          Star_Start => Star_Start,\n+          Star_End   => Star_End,\n+          Config     => Config));\n    end Set_Specific_Warning_Off;\n \n    -----------------------------\n@@ -1099,6 +1112,11 @@ package body Erroutc is\n                SWE.Stop := Loc;\n                SWE.Open := False;\n                Err := False;\n+\n+               --  If a config pragma is specifically cancelled, consider\n+               --  that it is no longer active as a configuration pragma.\n+\n+               SWE.Config := False;\n                return;\n             end if;\n          end;\n@@ -1218,7 +1236,7 @@ package body Erroutc is\n          declare\n             SWE : Specific_Warning_Entry renames Specific_Warnings.Table (J);\n          begin\n-            if SWE.Start /= No_Location then\n+            if not SWE.Config then\n                if SWE.Open then\n                   Eproc.all\n                     (\"?pragma Warnings Off with no matching Warnings On\",\n@@ -1265,11 +1283,14 @@ package body Erroutc is\n             SWE : Specific_Warning_Entry renames Specific_Warnings.Table (J);\n \n          begin\n-            --  See if location is in range\n+            --  Pragma applies if it is a configuration pragma, or if the\n+            --  location is in range of a specific non-configuration pragma.\n \n-            if SWE.Start = No_Location\n+            if SWE.Config\n               or else (SWE.Start <= Loc and then Loc <= SWE.Stop)\n             then\n+               --  Check if message matches, dealing with * patterns\n+\n                Patlen     := SWE.Patlen;\n                Pattern    := SWE.Pattern;\n                Star_Start := SWE.Star_Start;"}, {"sha": "998eb8e48462aa354ec998a0e79765b2eb31637d", "filename": "gcc/ada/erroutc.ads", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554846f3b75d52bae87a1d076950eccf34846f4b/gcc%2Fada%2Ferroutc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554846f3b75d52bae87a1d076950eccf34846f4b/gcc%2Fada%2Ferroutc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.ads?ref=554846f3b75d52bae87a1d076950eccf34846f4b", "patch": "@@ -263,8 +263,7 @@ package Erroutc is\n       Start : Source_Ptr;\n       Stop  : Source_Ptr;\n       --  Starting and ending source pointers for the range. These are always\n-      --  from the same source file. Start is set to No_Location for the case\n-      --  of a configuration pragma.\n+      --  from the same source file.\n \n       Msg : String_Ptr;\n       --  Message from pragma Warnings (Off, string)\n@@ -277,7 +276,7 @@ package Erroutc is\n       --  Length of pattern string (excluding initial/final asterisks)\n \n       Open : Boolean;\n-      --  Set to True if OFF has been encountered with no matchin ON\n+      --  Set to True if OFF has been encountered with no matching ON\n \n       Used : Boolean;\n       --  Set to True if entry has been used to suppress a warning\n@@ -288,6 +287,10 @@ package Erroutc is\n       Star_End : Boolean;\n       --  True if given pattern had * at end\n \n+      Config : Boolean;\n+      --  True if pragma is configuration pragma (in which case no matching\n+      --  Off pragma is required, and it is not required that a specific\n+      --  warning be suppressed).\n    end record;\n \n    package Specific_Warnings is new Table.Table (\n@@ -298,6 +301,23 @@ package Erroutc is\n      Table_Increment      => 200,\n      Table_Name           => \"Specific_Warnings\");\n \n+   --  Note on handling configuration case versus specific case. A complication\n+   --  arises from this example:\n+\n+   --     pragma Warnings (Off, \"not referenced*\");\n+   --     procedure Mumble (X : Integer) is\n+   --     pragma Warnings (On, \"not referenced*\");\n+   --     begin\n+   --        null;\n+   --     end Mumble;\n+\n+   --  The trouble is that the first pragma is technically a configuration\n+   --  pragma, and yet it is clearly being used in the context of thinking\n+   --  of it as a specific case. To deal with this, what we do is that the\n+   --  On entry can match a configuration pragma from the same file, and if\n+   --  we find such an On entry, we cancel the indication of it being the\n+   --  configuration case. This seems to handle all cases we run into ok.\n+\n    -----------------\n    -- Subprograms --\n    -----------------\n@@ -430,23 +450,28 @@ package Erroutc is\n    --  the input value of E was either already No_Error_Msg, or was the\n    --  last non-deleted message.\n \n-   procedure Set_Specific_Warning_Off (Loc : Source_Ptr; Msg : String);\n+   procedure Set_Specific_Warning_Off\n+     (Loc    : Source_Ptr;\n+      Msg    : String;\n+      Config : Boolean);\n    --  This is called in response to the two argument form of pragma Warnings\n-   --  where the first argument is OFF, and the second argument is the prefix\n-   --  of a specific warning to be suppressed. The first argument is the start\n-   --  of the suppression range, and the second argument is the string from\n-   --  the pragma. Loc is set to No_Location for the configuration pragma case.\n+   --  where the first argument is OFF, and the second argument is a string\n+   --  which identifies a specific warning to be suppressed. The first argument\n+   --  is the start of the suppression range, and the second argument is the\n+   --  string from the pragma. Loc is the location of the pragma (which is the\n+   --  start of the range to suppress). Config is True for the configuration\n+   --  pragma case (where there is no requirement for a matching OFF pragma).\n \n    procedure Set_Specific_Warning_On\n      (Loc : Source_Ptr;\n       Msg : String;\n       Err : out Boolean);\n    --  This is called in response to the two argument form of pragma Warnings\n-   --  where the first argument is ON, and the second argument is the prefix\n-   --  of a specific warning to be suppressed. The first argument is the end\n-   --  of the suppression range, and the second argument is the string from\n-   --  the pragma. Err is set to True on return to report the error of no\n-   --  matching Warnings Off pragma preceding this one.\n+   --  where the first argument is ON, and the second argument is a string\n+   --  which identifies a specific warning to be suppressed. The first argument\n+   --  is the end of the suppression range, and the second argument is the\n+   --  string from the pragma. Err is set to True on return to report the error\n+   --  of no matching Warnings Off pragma preceding this one.\n \n    procedure Set_Warnings_Mode_Off (Loc : Source_Ptr);\n    --  Called in response to a pragma Warnings (Off) to record the source"}, {"sha": "dc36f4cc8f1acfc458b9a24e322317f8a2999af9", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554846f3b75d52bae87a1d076950eccf34846f4b/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554846f3b75d52bae87a1d076950eccf34846f4b/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=554846f3b75d52bae87a1d076950eccf34846f4b", "patch": "@@ -770,7 +770,7 @@ package body Exp_Intr is\n \n    begin\n       if No_Pool_Assigned (Rtyp) then\n-         Error_Msg_N (\"?deallocation from empty storage pool\", N);\n+         Error_Msg_N (\"?deallocation from empty storage pool!\", N);\n       end if;\n \n       --  Nothing to do if we know the argument is null"}, {"sha": "1ae9d2ea2b985b8160356d3c7078e4f22ff957fb", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554846f3b75d52bae87a1d076950eccf34846f4b/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554846f3b75d52bae87a1d076950eccf34846f4b/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=554846f3b75d52bae87a1d076950eccf34846f4b", "patch": "@@ -171,7 +171,7 @@ procedure Gnat1drv is\n            and then not Source_File_Is_Subunit (Src_Ind)\n            and then not Source_File_Is_No_Body (Src_Ind)\n          then\n-            Errout.Finalize;\n+            Errout.Finalize (Last_Call => False);\n \n             Error_Msg_Unit_1 := Sname;\n \n@@ -338,6 +338,16 @@ begin\n          List_Representation_Info_Mechanisms := True;\n       end if;\n \n+      --  Disable static allocation of dispatch tables if -gnatd.t or if layout\n+      --  is enabled. The front end's layout phase currently treats types that\n+      --  have discriminant-dependent arrays as not being static even when a\n+      --  discriminant constraint on the type is static, and this leads to\n+      --  problems with subtypes of type Ada.Tags.Dispatch_Table_Wrapper. ???\n+\n+      if Debug_Flag_Dot_T or else Frontend_Layout_On_Target then\n+         Static_Dispatch_Tables := False;\n+      end if;\n+\n       --  Output copyright notice if full list mode unless we have a list\n       --  file, in which case we defer this so that it is output in the file\n \n@@ -417,7 +427,7 @@ begin\n       --  Exit with errors if the main source could not be parsed\n \n       if Sinput.Main_Source_File = No_Source_File then\n-         Errout.Finalize;\n+         Errout.Finalize (Last_Call => True);\n          Errout.Output_Messages;\n          Exit_Program (E_Errors);\n       end if;\n@@ -428,7 +438,7 @@ begin\n \n       --  Exit if compilation errors detected\n \n-      Errout.Finalize;\n+      Errout.Finalize (Last_Call => False);\n \n       if Compilation_Errors then\n          Treepr.Tree_Dump;\n@@ -443,6 +453,7 @@ begin\n             Tree_Gen;\n          end if;\n \n+         Errout.Finalize (Last_Call => True);\n          Exit_Program (E_Errors);\n       end if;\n \n@@ -466,7 +477,7 @@ begin\n \n       if Original_Operating_Mode = Check_Syntax then\n          Treepr.Tree_Dump;\n-         Errout.Finalize;\n+         Errout.Finalize (Last_Call => True);\n          Errout.Output_Messages;\n          Tree_Gen;\n          Namet.Finalize;\n@@ -612,7 +623,7 @@ begin\n          Write_Eol;\n \n          Sem_Ch13.Validate_Unchecked_Conversions;\n-         Errout.Finalize;\n+         Errout.Finalize (Last_Call => True);\n          Errout.Output_Messages;\n          Treepr.Tree_Dump;\n          Tree_Gen;\n@@ -644,7 +655,7 @@ begin\n                    or else Targparm.VM_Target /= No_VM)\n       then\n          Sem_Ch13.Validate_Unchecked_Conversions;\n-         Errout.Finalize;\n+         Errout.Finalize (Last_Call => True);\n          Errout.Output_Messages;\n          Write_ALI (Object => False);\n          Tree_Dump;\n@@ -700,7 +711,7 @@ begin\n       --  indicating that elaboration is required, and also to back annotate\n       --  representation information for List_Rep_Info.\n \n-      Errout.Finalize;\n+      Errout.Finalize (Last_Call => True);\n       Errout.Output_Messages;\n       List_Rep_Info;\n \n@@ -758,7 +769,7 @@ begin\n \n exception\n    when Unrecoverable_Error =>\n-      Errout.Finalize;\n+      Errout.Finalize (Last_Call => True);\n       Errout.Output_Messages;\n \n       Set_Standard_Error;"}, {"sha": "41350b0d4107df49ffcd2cbe3a9307654eb49bb0", "filename": "gcc/ada/prepcomp.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554846f3b75d52bae87a1d076950eccf34846f4b/gcc%2Fada%2Fprepcomp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554846f3b75d52bae87a1d076950eccf34846f4b/gcc%2Fada%2Fprepcomp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprepcomp.adb?ref=554846f3b75d52bae87a1d076950eccf34846f4b", "patch": "@@ -41,7 +41,7 @@ with Types;    use Types;\n package body Prepcomp is\n \n    No_Preprocessing : Boolean := True;\n-   --  Set to True if there is at least one source that needs to be\n+   --  Set to False if there is at least one source that needs to be\n    --  preprocessed.\n \n    Source_Index_Of_Preproc_Data_File : Source_File_Index := No_Source_File;\n@@ -560,7 +560,7 @@ package body Prepcomp is\n       --  Fail if there were errors in the preprocessing data file\n \n       if Total_Errors_Detected > T then\n-         Errout.Finalize;\n+         Errout.Finalize (Last_Call => True);\n          Errout.Output_Messages;\n          Fail (\"errors found in preprocessing data file \"\"\",\n                Get_Name_String (N),\n@@ -687,7 +687,7 @@ package body Prepcomp is\n             --  Fail if errors were found while processing the definition file\n \n             if T /= Total_Errors_Detected then\n-               Errout.Finalize;\n+               Errout.Finalize (Last_Call => True);\n                Errout.Output_Messages;\n                Fail (\"errors found in definition file \"\"\",\n                      Get_Name_String (N),"}]}