{"sha": "10b8fa2ed23366f5a9224a050db24b5f9d1236ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBiOGZhMmVkMjMzNjZmNWE5MjI0YTA1MGRiMjRiNWY5ZDEyMzZhYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-09-23T16:08:16Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-09-23T16:08:16Z"}, "message": "tree.h (int_bit_position): Turn into inline function; implement using wide int.\n\n\t* tree.h (int_bit_position): Turn into inline function;\n\timplement using wide int.\n\t* tree.c (int_bit_position): Remove.\n\nFrom-SVN: r215518", "tree": {"sha": "edac9be42c0dfb8002518876a201a76bdd0d3e7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edac9be42c0dfb8002518876a201a76bdd0d3e7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10b8fa2ed23366f5a9224a050db24b5f9d1236ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b8fa2ed23366f5a9224a050db24b5f9d1236ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10b8fa2ed23366f5a9224a050db24b5f9d1236ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b8fa2ed23366f5a9224a050db24b5f9d1236ab/comments", "author": null, "committer": null, "parents": [{"sha": "54f9184b594d38d288471029277733a0c3374a65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54f9184b594d38d288471029277733a0c3374a65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54f9184b594d38d288471029277733a0c3374a65"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "a8bff8f5acd860d123f338776913e800ff901f8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10b8fa2ed23366f5a9224a050db24b5f9d1236ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10b8fa2ed23366f5a9224a050db24b5f9d1236ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10b8fa2ed23366f5a9224a050db24b5f9d1236ab", "patch": "@@ -1,3 +1,9 @@\n+2014-09-23  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree.h (int_bit_position): Turn into inline function;\n+\timplement using wide int.\n+\t* tree.c (int_bit_position): Remove.\n+\n 2014-09-23  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR bootstrap/63280"}, {"sha": "5f3371790514fbf8bf92734ae08e525057a71a52", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10b8fa2ed23366f5a9224a050db24b5f9d1236ab/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10b8fa2ed23366f5a9224a050db24b5f9d1236ab/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=10b8fa2ed23366f5a9224a050db24b5f9d1236ab", "patch": "@@ -2831,16 +2831,6 @@ bit_position (const_tree field)\n   return bit_from_pos (DECL_FIELD_OFFSET (field),\n \t\t       DECL_FIELD_BIT_OFFSET (field));\n }\n-\n-/* Likewise, but return as an integer.  It must be representable in\n-   that way (since it could be a signed value, we don't have the\n-   option of returning -1 like int_size_in_byte can.  */\n-\n-HOST_WIDE_INT\n-int_bit_position (const_tree field)\n-{\n-  return tree_to_shwi (bit_position (field));\n-}\n \f\n /* Return the byte position of FIELD, in bytes from the start of the record.\n    This is a tree of type sizetype.  */"}, {"sha": "14086f005391e1acce4c80442e1451e21b96d694", "filename": "gcc/tree.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10b8fa2ed23366f5a9224a050db24b5f9d1236ab/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10b8fa2ed23366f5a9224a050db24b5f9d1236ab/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=10b8fa2ed23366f5a9224a050db24b5f9d1236ab", "patch": "@@ -3877,7 +3877,6 @@ extern tree size_in_bytes (const_tree);\n extern HOST_WIDE_INT int_size_in_bytes (const_tree);\n extern HOST_WIDE_INT max_int_size_in_bytes (const_tree);\n extern tree bit_position (const_tree);\n-extern HOST_WIDE_INT int_bit_position (const_tree);\n extern tree byte_position (const_tree);\n extern HOST_WIDE_INT int_byte_position (const_tree);\n \n@@ -4797,4 +4796,14 @@ extern tree get_inner_reference (tree, HOST_WIDE_INT *, HOST_WIDE_INT *,\n    EXP, an ARRAY_REF or an ARRAY_RANGE_REF.  */\n extern tree array_ref_low_bound (tree);\n \n+/* Like bit_position, but return as an integer.  It must be representable in\n+   that way (since it could be a signed value, we don't have the\n+   option of returning -1 like int_size_in_byte can.  */\n+\n+inline HOST_WIDE_INT\n+int_bit_position (const_tree field)\n+{ \n+  return (wi::lshift (wi::to_offset (DECL_FIELD_OFFSET (field)), BITS_PER_UNIT_LOG)\n+\t  + wi::to_offset (DECL_FIELD_BIT_OFFSET (field))).to_shwi ();\n+}\n #endif  /* GCC_TREE_H  */"}]}