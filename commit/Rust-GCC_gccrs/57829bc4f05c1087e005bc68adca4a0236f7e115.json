{"sha": "57829bc4f05c1087e005bc68adca4a0236f7e115", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc4MjliYzRmMDVjMTA4N2UwMDViYzY4YWRjYTRhMDIzNmY3ZTExNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-12-20T02:08:57Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-12-20T02:08:57Z"}, "message": "defaults.h (ASM_OUTPUT_INTERNAL_LABEL): New macro.\n\n\t* defaults.h (ASM_OUTPUT_INTERNAL_LABEL): New macro.\n\t* output.h (assemble_name_raw): Declare it.\n\t* system.h (ASM_OUTPUT_INTERNAL_LABEL): Do not poison it.\n\t* varasm.c (assemble_name_raw): New function.\n\t(assemble_name): Use it.\n\t(default_internal_label): Likewise.\n\t* config/darwin.c (darwin_asm_output_dwarf_delta): Likewise.\n\t* doc/tm.texi (ASM_OUTPUT_INTERNAL_LABEL): Document.\n\nFrom-SVN: r92401", "tree": {"sha": "6a891da2171d58c01e8dad91fed721c57e1daab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a891da2171d58c01e8dad91fed721c57e1daab7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57829bc4f05c1087e005bc68adca4a0236f7e115", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57829bc4f05c1087e005bc68adca4a0236f7e115", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57829bc4f05c1087e005bc68adca4a0236f7e115", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57829bc4f05c1087e005bc68adca4a0236f7e115/comments", "author": null, "committer": null, "parents": [{"sha": "49a1b20cb3cc550523866f263da2613872aaa183", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49a1b20cb3cc550523866f263da2613872aaa183", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49a1b20cb3cc550523866f263da2613872aaa183"}], "stats": {"total": 79, "additions": 61, "deletions": 18}, "files": [{"sha": "b77cbbf8fc9d4f7101d25833ad87e6f10c32680c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57829bc4f05c1087e005bc68adca4a0236f7e115/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57829bc4f05c1087e005bc68adca4a0236f7e115/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57829bc4f05c1087e005bc68adca4a0236f7e115", "patch": "@@ -1,3 +1,14 @@\n+2004-12-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* defaults.h (ASM_OUTPUT_INTERNAL_LABEL): New macro.\n+\t* output.h (assemble_name_raw): Declare it.\n+\t* system.h (ASM_OUTPUT_INTERNAL_LABEL): Do not poison it.\n+\t* varasm.c (assemble_name_raw): New function.\n+\t(assemble_name): Use it.\n+\t(default_internal_label): Likewise.\n+\t* config/darwin.c (darwin_asm_output_dwarf_delta): Likewise.\n+\t* doc/tm.texi (ASM_OUTPUT_INTERNAL_LABEL): Document.\n+\n 2004-12-19  Richard Henderson  <rth@redhat.com>\n \n \tPR 18067"}, {"sha": "ad3981e920022a378a07b3282a658057f1723d96", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57829bc4f05c1087e005bc68adca4a0236f7e115/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57829bc4f05c1087e005bc68adca4a0236f7e115/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=57829bc4f05c1087e005bc68adca4a0236f7e115", "patch": "@@ -1367,9 +1367,9 @@ darwin_asm_output_dwarf_delta (FILE *file, int size ATTRIBUTE_UNUSED,\n     fprintf (file, \"\\t.set L$set$%d,\", darwin_dwarf_label_counter);\n   else\n     fprintf (file, \"\\t%s\\t\", \".long\");\n-  assemble_name (file, lab1);\n+  assemble_name_raw (file, lab1);\n   fprintf (file, \"-\");\n-  assemble_name (file, lab2);\n+  assemble_name_raw (file, lab2);\n   if (islocaldiff)\n     fprintf (file, \"\\n\\t.long L$set$%d\", darwin_dwarf_label_counter++);\n }"}, {"sha": "236ed90dee0184248843c58a485bb50888c8f5e9", "filename": "gcc/defaults.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57829bc4f05c1087e005bc68adca4a0236f7e115/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57829bc4f05c1087e005bc68adca4a0236f7e115/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=57829bc4f05c1087e005bc68adca4a0236f7e115", "patch": "@@ -145,6 +145,15 @@ do { fputs (integer_asm_op (POINTER_SIZE / BITS_PER_UNIT, TRUE), FILE); \\\n   do { assemble_name ((FILE), (NAME)); fputs (\":\\n\", (FILE)); } while (0)\n #endif\n \n+/* Output the definition of a compiler-generated label named NAME.  */\n+#ifndef ASM_OUTPUT_INTERNAL_LABEL\n+#define ASM_OUTPUT_INTERNAL_LABEL(FILE,NAME)\t\\\n+  do {\t\t\t\t\t\t\\\n+    assemble_name_raw ((FILE), (NAME));\t\t\\\n+    fputs (\":\\n\", (FILE));\t\t\t\\\n+  } while (0)\n+#endif\n+\n /* This is how to output a reference to a user-level label named NAME.  */\n \n #ifndef ASM_OUTPUT_LABELREF"}, {"sha": "e33844237b4535c9e1f6b7dc36082e49ecb83061", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57829bc4f05c1087e005bc68adca4a0236f7e115/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57829bc4f05c1087e005bc68adca4a0236f7e115/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=57829bc4f05c1087e005bc68adca4a0236f7e115", "patch": "@@ -6669,6 +6669,14 @@ assembler syntax for defining the name, and a newline.  A default\n definition of this macro is provided which is correct for most systems.\n @end defmac\n \n+@findex assemble_name_raw\n+@defmac ASM_OUTPUT_INTERNAL_LABEL (@var{stream}, @var{name})\n+Identical to @code{ASM_OUTPUT_lABEL}, except that @var{name} is known\n+to refer to a compiler-generated label.  The default definition uses\n+@code{assemble_name_raw}, which is like @code{assemble_name} except\n+that it is more efficient.\n+@end defmac\n+\n @defmac SIZE_ASM_OP\n A C string containing the appropriate assembler directive to specify the\n size of a symbol, without any arguments.  On systems that use ELF, the"}, {"sha": "b014b2321f484ee5450986fa5bb31b3bbf2489bf", "filename": "gcc/output.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57829bc4f05c1087e005bc68adca4a0236f7e115/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57829bc4f05c1087e005bc68adca4a0236f7e115/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=57829bc4f05c1087e005bc68adca4a0236f7e115", "patch": "@@ -291,11 +291,16 @@ extern void assemble_external_libcall (rtx);\n /* Assemble a label named NAME.  */\n extern void assemble_label (const char *);\n \n-/* Output to FILE a reference to the assembler name of a C-level name NAME.\n-   If NAME starts with a *, the rest of NAME is output verbatim.\n-   Otherwise NAME is transformed in an implementation-defined way\n-   (usually by the addition of an underscore).\n-   Many macros in the tm file are defined to call this function.  */\n+/* Output to FILE (an assembly file) a reference to NAME.  If NAME\n+   starts with a *, the rest of NAME is output verbatim.  Otherwise\n+   NAME is transformed in a target-specific way (usually by the\n+   addition of an underscore).  */\n+extern void assemble_name_raw (FILE *, const char *);\n+\n+/* Like assemble_name_raw, but should be used when NAME might refer to\n+   an entity that is also represented as a tree (like a function or\n+   variable).  If NAME does refer to such an entity, that entity will\n+   be marked as referenced.  */\n extern void assemble_name (FILE *, const char *);\n \n /* Return the assembler directive for creating a given kind of integer"}, {"sha": "e5ed12212efc2e243787d4c2e740e4635b8077e0", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57829bc4f05c1087e005bc68adca4a0236f7e115/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57829bc4f05c1087e005bc68adca4a0236f7e115/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=57829bc4f05c1087e005bc68adca4a0236f7e115", "patch": "@@ -631,7 +631,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tBLOCK_PROFILER BLOCK_PROFILER_CODE FUNCTION_BLOCK_PROFILER\t   \\\n \tFUNCTION_BLOCK_PROFILER_EXIT MACHINE_STATE_SAVE\t\t\t   \\\n \tMACHINE_STATE_RESTORE SCCS_DIRECTIVE SECTION_ASM_OP\t\t   \\\n-\tASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL ASM_OUTPUT_INTERNAL_LABEL \\\n+\tASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL \\\n \tOBJC_PROLOGUE ALLOCATE_TRAMPOLINE HANDLE_PRAGMA ROUND_TYPE_SIZE\t   \\\n \tROUND_TYPE_SIZE_UNIT CONST_SECTION_ASM_OP CRT_GET_RFIB_TEXT\t   \\\n \tDBX_LBRAC_FIRST DBX_OUTPUT_ENUM DBX_OUTPUT_SOURCE_FILENAME\t   \\"}, {"sha": "79503d194d183ec97ded4cdcaebf61e7e50a28b1", "filename": "gcc/varasm.c", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57829bc4f05c1087e005bc68adca4a0236f7e115/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57829bc4f05c1087e005bc68adca4a0236f7e115/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=57829bc4f05c1087e005bc68adca4a0236f7e115", "patch": "@@ -1889,11 +1889,24 @@ mark_decl_referenced (tree decl)\n      which do not need to be marked.  */\n }\n \n-/* Output to FILE a reference to the assembler name of a C-level name NAME.\n-   If NAME starts with a *, the rest of NAME is output verbatim.\n-   Otherwise NAME is transformed in an implementation-defined way\n-   (usually by the addition of an underscore).\n-   Many macros in the tm file are defined to call this function.  */\n+/* Output to FILE (an assembly file) a reference to NAME.  If NAME\n+   starts with a *, the rest of NAME is output verbatim.  Otherwise\n+   NAME is transformed in a target-specific way (usually by the\n+   addition of an underscore).  */\n+\n+void\n+assemble_name_raw (FILE *file, const char *name)\n+{\n+  if (name[0] == '*')\n+    fputs (&name[1], file);\n+  else\n+    ASM_OUTPUT_LABELREF (file, name);\n+}\n+\n+/* Like assemble_name_raw, but should be used when NAME might refer to\n+   an entity that is also represented as a tree (like a function or\n+   variable).  If NAME does refer to such an entity, that entity will\n+   be marked as referenced.  */\n \n void\n assemble_name (FILE *file, const char *name)\n@@ -1907,10 +1920,7 @@ assemble_name (FILE *file, const char *name)\n   if (id)\n     mark_referenced (id);\n \n-  if (name[0] == '*')\n-    fputs (&name[1], file);\n-  else\n-    ASM_OUTPUT_LABELREF (file, name);\n+  assemble_name_raw (file, name);\n }\n \n /* Allocate SIZE bytes writable static space with a gensym name\n@@ -5204,7 +5214,7 @@ default_internal_label (FILE *stream, const char *prefix,\n {\n   char *const buf = alloca (40 + strlen (prefix));\n   ASM_GENERATE_INTERNAL_LABEL (buf, prefix, labelno);\n-  ASM_OUTPUT_LABEL (stream, buf);\n+  ASM_OUTPUT_INTERNAL_LABEL (stream, buf);\n }\n \n /* This is the default behavior at the beginning of a file.  It's"}]}