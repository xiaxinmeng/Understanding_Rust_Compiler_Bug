{"sha": "01aef5ad76b8314af7406d515aa36e9e1eefa1b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFhZWY1YWQ3NmI4MzE0YWY3NDA2ZDUxNWFhMzZlOWUxZWVmYTFiNg==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2008-07-31T11:04:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-07-31T11:04:10Z"}, "message": "exp_attr.adb (Enclosing_Object): New function local to handling of access attributes...\n\n2008-07-31  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_attr.adb (Enclosing_Object): New function local to handling of\n\taccess attributes,\n\tfor retrieving the innermost enclosing object prefix of a compound name.\n\t(Expand_N_Attribute_Reference, N_Attribute_Access): In the case where an\n\tAccess attribute has a prefix that is a dereference of an access\n\tparameter (or the prefix is a subcomponent selected from such a\n\tdereference), apply an accessibility check to the access parameter.\n\tReplaces code that rewrote the prefix as a type conversion (and that\n\tdidn't handle subcomponent cases).\n\tAlso, this is now only applied in the case of 'Access.\n\t\n\t* exp_ch6.adb (Expand_Call): Add handling for the case of an access\n\tdiscriminant passed as an actual to an access formal, passing the\n\tObject_Access_Level of the object containing the access discriminant.\n\nFrom-SVN: r138388", "tree": {"sha": "a7da433816d4b3f46e8dfc4ed89205d226a52326", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7da433816d4b3f46e8dfc4ed89205d226a52326"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01aef5ad76b8314af7406d515aa36e9e1eefa1b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01aef5ad76b8314af7406d515aa36e9e1eefa1b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01aef5ad76b8314af7406d515aa36e9e1eefa1b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01aef5ad76b8314af7406d515aa36e9e1eefa1b6/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d06f67ee225537cf9984b384dbe116830730705", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d06f67ee225537cf9984b384dbe116830730705", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d06f67ee225537cf9984b384dbe116830730705"}], "stats": {"total": 142, "additions": 90, "deletions": 52}, "files": [{"sha": "6ad556852808f9af15ac931ea726df50a04510e1", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 49, "deletions": 25, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01aef5ad76b8314af7406d515aa36e9e1eefa1b6/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01aef5ad76b8314af7406d515aa36e9e1eefa1b6/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=01aef5ad76b8314af7406d515aa36e9e1eefa1b6", "patch": "@@ -651,6 +651,37 @@ package body Exp_Attr is\n             Btyp_DDT   : constant Entity_Id := Directly_Designated_Type (Btyp);\n             Ref_Object : constant Node_Id := Get_Referenced_Object (Pref);\n \n+            function Enclosing_Object (N : Node_Id) return Node_Id;\n+            --  If N denotes a compound name (selected component, indexed\n+            --  component, or slice), returns the name of the outermost\n+            --  such enclosing object. Otherwise returns N. If the object\n+            --  is a renaming, then the renamed object is returned.\n+\n+            ----------------------\n+            -- Enclosing_Object --\n+            ----------------------\n+\n+            function Enclosing_Object (N : Node_Id) return Node_Id is\n+               Obj_Name : Node_Id;\n+\n+            begin\n+               Obj_Name := N;\n+               while Nkind_In (Obj_Name, N_Selected_Component,\n+                                         N_Indexed_Component,\n+                                         N_Slice)\n+               loop\n+                  Obj_Name := Prefix (Obj_Name);\n+               end loop;\n+\n+               return Get_Referenced_Object (Obj_Name);\n+            end Enclosing_Object;\n+\n+            --  Local declarations\n+\n+            Enc_Object : constant Node_Id := Enclosing_Object (Ref_Object);\n+\n+         --  Start of processing for Access_Cases\n+\n          begin\n             --  In order to improve the text of error messages, the designated\n             --  type of access-to-subprogram itypes is set by the semantics as\n@@ -800,35 +831,28 @@ package body Exp_Attr is\n                end;\n \n             --  If the prefix of an Access attribute is a dereference of an\n-            --  access parameter (or a renaming of such a dereference) and\n-            --  the context is a general access type (but not an anonymous\n-            --  access type), then rewrite the attribute as a conversion of\n-            --  the access parameter to the context access type. This will\n-            --  result in an accessibility check being performed, if needed.\n-\n-            --    (X.all'Access => Acc_Type (X))\n-\n-            --  Note: Limit the expansion of an attribute applied to a\n-            --  dereference of an access parameter so that it's only done\n-            --  for 'Access. This fixes a problem with 'Unrestricted_Access\n-            --  that leads to errors in the case where the attribute type\n-            --  is access-to-variable and the access parameter is\n-            --  access-to-constant. The conversion is only done to get\n-            --  accessibility checks, so it makes sense to limit it to\n-            --  'Access.\n-\n-            elsif Nkind (Ref_Object) = N_Explicit_Dereference\n-              and then Is_Entity_Name (Prefix (Ref_Object))\n+            --  access parameter (or a renaming of such a dereference, or a\n+            --  subcomponent of such a dereference) and the context is a\n+            --  general access type (but not an anonymous access type), then\n+            --  apply an accessibility check to the access parameter. We used\n+            --  to rewrite the access parameter as a type conversion, but that\n+            --  could only be done if the immediate prefix of the Access\n+            --  attribute was the dereference, and didn't handle cases where\n+            --  the attribute is applied to a subcomponent of the dereference,\n+            --  since there's generally no available, appropriate access type\n+            --  to convert to in that case.\n+\n+            elsif Id = Attribute_Access\n+              and then Nkind (Enc_Object) = N_Explicit_Dereference\n+              and then Is_Entity_Name (Prefix (Enc_Object))\n               and then Ekind (Btyp) = E_General_Access_Type\n-              and then Ekind (Entity (Prefix (Ref_Object))) in Formal_Kind\n-              and then Ekind (Etype (Entity (Prefix (Ref_Object))))\n+              and then Ekind (Entity (Prefix (Enc_Object))) in Formal_Kind\n+              and then Ekind (Etype (Entity (Prefix (Enc_Object))))\n                          = E_Anonymous_Access_Type\n               and then Present (Extra_Accessibility\n-                                (Entity (Prefix (Ref_Object))))\n+                                (Entity (Prefix (Enc_Object))))\n             then\n-               Rewrite (N,\n-                 Convert_To (Typ, New_Copy_Tree (Prefix (Ref_Object))));\n-               Analyze_And_Resolve (N, Typ);\n+               Apply_Accessibility_Check (Prefix (Enc_Object), Typ);\n \n             --  Ada 2005 (AI-251): If the designated type is an interface we\n             --  add an implicit conversion to force the displacement of the"}, {"sha": "d1d43cf39748b7583ed4a02ed08fbd25737d5400", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 41, "deletions": 27, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01aef5ad76b8314af7406d515aa36e9e1eefa1b6/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01aef5ad76b8314af7406d515aa36e9e1eefa1b6/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=01aef5ad76b8314af7406d515aa36e9e1eefa1b6", "patch": "@@ -1,4 +1,4 @@\n------------------------------------------------------------------------------\n+------------------------------------------------------------------------------\n --                                                                          --\n --                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n@@ -2070,16 +2070,16 @@ package body Exp_Ch6 is\n             if Ekind (Etype (Prev)) in Private_Kind\n               and then not Has_Discriminants (Base_Type (Etype (Prev)))\n             then\n-               Add_Extra_Actual (\n-                 New_Occurrence_Of (Standard_False, Loc),\n-                 Extra_Constrained (Formal));\n+               Add_Extra_Actual\n+                 (New_Occurrence_Of (Standard_False, Loc),\n+                  Extra_Constrained (Formal));\n \n             elsif Is_Constrained (Etype (Formal))\n               or else not Has_Discriminants (Etype (Prev))\n             then\n-               Add_Extra_Actual (\n-                 New_Occurrence_Of (Standard_True, Loc),\n-                 Extra_Constrained (Formal));\n+               Add_Extra_Actual\n+                 (New_Occurrence_Of (Standard_True, Loc),\n+                  Extra_Constrained (Formal));\n \n             --  Do not produce extra actuals for Unchecked_Union parameters.\n             --  Jump directly to the end of the loop.\n@@ -2220,7 +2220,7 @@ package body Exp_Ch6 is\n                      else\n                         Add_Extra_Actual\n                           (Make_Integer_Literal (Loc,\n-                           Intval => Scope_Depth (Standard_Standard)),\n+                             Intval => Scope_Depth (Standard_Standard)),\n                            Extra_Accessibility (Formal));\n                      end if;\n                   end;\n@@ -2231,11 +2231,25 @@ package body Exp_Ch6 is\n                else\n                   Add_Extra_Actual\n                     (Make_Integer_Literal (Loc,\n-                     Intval => Type_Access_Level (Etype (Prev_Orig))),\n+                       Intval => Type_Access_Level (Etype (Prev_Orig))),\n                      Extra_Accessibility (Formal));\n                end if;\n \n-            --  All cases other than thunks\n+            --  If the actual is an access discriminant, then pass the level\n+            --  of the enclosing object (RM05-3.10.2(12.4/2)).\n+\n+            elsif Nkind (Prev_Orig) = N_Selected_Component\n+              and then Ekind (Entity (Selector_Name (Prev_Orig))) =\n+                                                       E_Discriminant\n+              and then Ekind (Etype (Entity (Selector_Name (Prev_Orig)))) =\n+                                                       E_Anonymous_Access_Type\n+            then\n+               Add_Extra_Actual\n+                 (Make_Integer_Literal (Loc,\n+                    Intval => Object_Access_Level (Prefix (Prev_Orig))),\n+                  Extra_Accessibility (Formal));\n+\n+            --  All other cases\n \n             else\n                case Nkind (Prev_Orig) is\n@@ -2246,20 +2260,20 @@ package body Exp_Ch6 is\n                         --  For X'Access, pass on the level of the prefix X\n \n                         when Attribute_Access =>\n-                           Add_Extra_Actual (\n-                             Make_Integer_Literal (Loc,\n-                               Intval =>\n-                                 Object_Access_Level (Prefix (Prev_Orig))),\n-                             Extra_Accessibility (Formal));\n+                           Add_Extra_Actual\n+                             (Make_Integer_Literal (Loc,\n+                                Intval =>\n+                                  Object_Access_Level (Prefix (Prev_Orig))),\n+                              Extra_Accessibility (Formal));\n \n                         --  Treat the unchecked attributes as library-level\n \n                         when Attribute_Unchecked_Access |\n                            Attribute_Unrestricted_Access =>\n-                           Add_Extra_Actual (\n-                             Make_Integer_Literal (Loc,\n-                               Intval => Scope_Depth (Standard_Standard)),\n-                             Extra_Accessibility (Formal));\n+                           Add_Extra_Actual\n+                             (Make_Integer_Literal (Loc,\n+                                Intval => Scope_Depth (Standard_Standard)),\n+                              Extra_Accessibility (Formal));\n \n                         --  No other cases of attributes returning access\n                         --  values that can be passed to access parameters\n@@ -2274,19 +2288,19 @@ package body Exp_Ch6 is\n                   --  current scope level.\n \n                   when N_Allocator =>\n-                     Add_Extra_Actual (\n-                       Make_Integer_Literal (Loc,\n-                        Scope_Depth (Current_Scope) + 1),\n-                       Extra_Accessibility (Formal));\n+                     Add_Extra_Actual\n+                       (Make_Integer_Literal (Loc,\n+                          Intval => Scope_Depth (Current_Scope) + 1),\n+                        Extra_Accessibility (Formal));\n \n                   --  For other cases we simply pass the level of the\n                   --  actual's access type.\n \n                   when others =>\n-                     Add_Extra_Actual (\n-                       Make_Integer_Literal (Loc,\n-                         Intval => Type_Access_Level (Etype (Prev_Orig))),\n-                       Extra_Accessibility (Formal));\n+                     Add_Extra_Actual\n+                       (Make_Integer_Literal (Loc,\n+                          Intval => Type_Access_Level (Etype (Prev_Orig))),\n+                        Extra_Accessibility (Formal));\n \n                end case;\n             end if;"}]}