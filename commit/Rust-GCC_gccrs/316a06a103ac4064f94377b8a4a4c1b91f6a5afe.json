{"sha": "316a06a103ac4064f94377b8a4a4c1b91f6a5afe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE2YTA2YTEwM2FjNDA2NGY5NDM3N2I4YTRhNGMxYjkxZjZhNWFmZQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-10-20T21:19:29Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-10-20T21:19:29Z"}, "message": "jvspec.c (lang_specific_driver): Recognize -MF and -MT.\n\n\t* jvspec.c (lang_specific_driver): Recognize -MF and -MT.\n\t* lang-specs.h: Added %{MA}, %{MF*}, %{MT*}.\n\t* lang-options.h: Added -MA, -MT, -MF..\n\t* lang.c (lang_decode_option): Recognize -MA, -MT, -MF.\n\t(DEPEND_TARGET_SET): New macro.\n\t(DEPEND_FILE_ALREADY_SET): Likewise.\n\t(init_parse): Handle new flags.\n\t* jcf.h (jcf_dependency_print_dummies): Declare.\n\t* Make-lang.in (s-java): Added mkdeps.o.\n\t* Makefile.in (BACKEND): Added mkdeps.o.\n\t(../gcjh$(exeext)): Added mkdeps.o.\n\t(../jcf-dump$(exeext)): Added mkdeps.o.\n\t* jcf-depend.c: Include mkdeps.h.\n\t(struct entry, dependencies, targets, MAX_OUTPUT_COLUMNS,\n\tadd_entry): Removed.\n\t(jcf_dependency_reset): Rewrote.\n\t(dependencies): New global.\n\t(jcf_dependency_set_target): Rewrote.\n\t(jcf_dependency_add_target): Likewise.\n\t(jcf_dependency_add_file): Likewise.\n\t(munge): Removed.\n\t(print_ents): Removed.\n\t(jcf_dependency_write): Rewrote.\n\t(print_dummies): New global.\n\t(jcf_dependency_print_dummies): New function\n\t(jcf_dependency_write): Call deps_dummy_targets if required.\n\nFrom-SVN: r36981", "tree": {"sha": "4eede965e0e3fec6ff244f7ac3b8432688b7e248", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4eede965e0e3fec6ff244f7ac3b8432688b7e248"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/316a06a103ac4064f94377b8a4a4c1b91f6a5afe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/316a06a103ac4064f94377b8a4a4c1b91f6a5afe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/316a06a103ac4064f94377b8a4a4c1b91f6a5afe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/316a06a103ac4064f94377b8a4a4c1b91f6a5afe/comments", "author": null, "committer": null, "parents": [{"sha": "3f568531d04baeb2dc6a3eaf3e18d5a219c3e841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f568531d04baeb2dc6a3eaf3e18d5a219c3e841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f568531d04baeb2dc6a3eaf3e18d5a219c3e841"}], "stats": {"total": 345, "additions": 144, "deletions": 201}, "files": [{"sha": "d34b9600505e836357265febb519633b5b389c7e", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a06a103ac4064f94377b8a4a4c1b91f6a5afe/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a06a103ac4064f94377b8a4a4c1b91f6a5afe/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=316a06a103ac4064f94377b8a4a4c1b91f6a5afe", "patch": "@@ -1,3 +1,39 @@\n+2000-10-16  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* jvspec.c (lang_specific_driver): Recognize -MF and -MT.\n+\t* lang-specs.h: Added %{MA}, %{MF*}, %{MT*}.\n+\t* lang-options.h: Added -MA, -MT, -MF..\n+\t* lang.c (lang_decode_option): Recognize -MA, -MT, -MF.\n+\t(DEPEND_TARGET_SET): New macro.\n+\t(DEPEND_FILE_ALREADY_SET): Likewise.\n+\t(init_parse): Handle new flags.\n+\t* jcf.h (jcf_dependency_print_dummies): Declare.\n+\t* Make-lang.in (s-java): Added mkdeps.o.\n+\t* Makefile.in (BACKEND): Added mkdeps.o.\n+\t(../gcjh$(exeext)): Added mkdeps.o.\n+\t(../jcf-dump$(exeext)): Added mkdeps.o.\n+\t* jcf-depend.c: Include mkdeps.h.\n+\t(struct entry, dependencies, targets, MAX_OUTPUT_COLUMNS,\n+\tadd_entry): Removed.\n+\t(jcf_dependency_reset): Rewrote.\n+\t(dependencies): New global.\n+\t(jcf_dependency_set_target): Rewrote.\n+\t(jcf_dependency_add_target): Likewise.\n+\t(jcf_dependency_add_file): Likewise.\n+\t(munge): Removed.\n+\t(print_ents): Removed.\n+\t(jcf_dependency_write): Rewrote.\n+\t(print_dummies): New global.\n+\t(jcf_dependency_print_dummies): New function\n+\t(jcf_dependency_write): Call deps_dummy_targets if required.\n+\n+2000-10-12  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* lex.c (java_new_lexer): Initialize new fields.\n+\t(java_read_char): Swap bytes if required.\n+\t* lex.h (java_lexer): New fields read_anything and byte_swap.\n+\tMade out_buffer unsigned.\n+\n 2000-10-18  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* gjavah.c (add_class_decl): Removed unused variables `tname',"}, {"sha": "5429f127d1cce13edb088e41d347437aa7d15769", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a06a103ac4064f94377b8a4a4c1b91f6a5afe/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a06a103ac4064f94377b8a4a4c1b91f6a5afe/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=316a06a103ac4064f94377b8a4a4c1b91f6a5afe", "patch": "@@ -141,7 +141,7 @@ JCF_DUMP_SOURCES = $(srcdir)/java/jcf-dump.c $(srcdir)/java/jcf-io.c \\\n \n jc1$(exeext) gcjh$(exeext) jv-scan$(exeext) jcf-dump$(exeext): s-java\n \n-s-java: $(P) $(JAVA_SRCS) $(LIBDEPS) $(BACKEND) \\\n+s-java: $(P) $(JAVA_SRCS) $(LIBDEPS) $(BACKEND) mkdeps.o \\\n \t$(GCJH_SOURCES) $(LIBDEPS) $(TREE_H) \\\n \t$(JV_SCAN_SOURCES) $(BACKEND) $(LIBDEPS) \\\n \t$(JCF_DUMP_SOURCES)"}, {"sha": "8b57cbe830af868a655c9339906a5727610f0683", "filename": "gcc/java/Makefile.in", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a06a103ac4064f94377b8a4a4c1b91f6a5afe/gcc%2Fjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a06a103ac4064f94377b8a4a4c1b91f6a5afe/gcc%2Fjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMakefile.in?ref=316a06a103ac4064f94377b8a4a4c1b91f6a5afe", "patch": "@@ -181,7 +181,7 @@ JAVA_OBJS = parse.o class.o decl.o expr.o constants.o lang.o typeck.o \\\n JAVA_OBJS_LITE = parse-scan.o jv-scan.o\n \n # Language-independent object files.\n-BACKEND = ../toplev.o ../libbackend.a\n+BACKEND = ../toplev.o ../mkdeps.o ../libbackend.a\n \n compiler: ../jc1$(exeext) ../jv-scan$(exeext)\n ../jc1$(exeext): $(P) $(JAVA_OBJS) $(BACKEND) $(LIBDEPS)\n@@ -192,18 +192,20 @@ compiler: ../jc1$(exeext) ../jv-scan$(exeext)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(JAVA_OBJS_LITE) ../version.o $(LIBS)\n \n ../jcf-dump$(exeext): jcf-dump.o jcf-io.o jcf-depend.o jcf-path.o \\\n-\t\tzextract.o ../version.o $(LIBDEPS)\n+\t\tzextract.o ../version.o ../mkdeps.o $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ jcf-dump.o jcf-io.o \\\n-\t  jcf-depend.o jcf-path.o zextract.o ../errors.o ../version.o $(LIBS)\n+\t  jcf-depend.o jcf-path.o zextract.o ../errors.o ../version.o \\\n+\t  ../mkdeps.o $(LIBS)\n \n # Dependencies here must be kept in sync with dependencies in Make-lang.in.\n ../jvgenmain$(exeext):  jvgenmain.o mangle.o $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ jvgenmain.o mangle.o $(LIBS)\n \n ../gcjh$(exeext): gjavah.o jcf-io.o jcf-depend.o jcf-path.o \\\n-\t\tzextract.o ../version.o $(LIBDEPS)\n+\t\tzextract.o ../version.o ../mkdeps.o $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ gjavah.o jcf-io.o \\\n-\t  jcf-depend.o jcf-path.o zextract.o ../errors.o ../version.o $(LIBS)\n+\t  jcf-depend.o jcf-path.o zextract.o ../errors.o ../version.o \\\n+\t  ../mkdeps.o $(LIBS)\n \n Makefile: $(srcdir)/Makefile.in $(srcdir)/../configure\n \tcd ..; $(SHELL) config.status"}, {"sha": "501e239b9aeb740d43275eb6c2b39da3dd9c5b00", "filename": "gcc/java/jcf-depend.c", "status": "modified", "additions": 32, "deletions": 165, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a06a103ac4064f94377b8a4a4c1b91f6a5afe/gcc%2Fjava%2Fjcf-depend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a06a103ac4064f94377b8a4a4c1b91f6a5afe/gcc%2Fjava%2Fjcf-depend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-depend.c?ref=316a06a103ac4064f94377b8a4a4c1b91f6a5afe", "patch": "@@ -25,116 +25,64 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n #include \"config.h\"\n #include \"system.h\"\n+#include \"mkdeps.h\"\n \n #include <assert.h>\n \n #include \"jcf.h\"\n \n \f\n \n-/* We keep a linked list of all the files we've already read.  */\n-struct entry\n-{\n-  char *file;\n-  struct entry *next;\n-};\n-\n-static void free_entry PARAMS ((struct entry **));\n-static void add_entry PARAMS ((struct entry **, const char *));\n-static const char *munge PARAMS ((const char *));\n-static int print_ents PARAMS ((struct entry *, int));\n-\n-/* List of files.  */\n-static struct entry *dependencies = NULL;\n-\n-/* Name of targets.  We support multiple targets when writing .class\n-   files.  */\n-static struct entry *targets = NULL;\n-\n-/* Number of columns in output.  */\n-#define MAX_OUTPUT_COLUMNS 72\n+/* The dependency structure used for this invocation.  */\n+struct deps *dependencies;\n \n /* The output file, or NULL if we aren't doing dependency tracking.  */\n static FILE *dep_out = NULL;\n \n /* Nonzero if system files should be added.  */\n static int system_files;\n \n-\f\n-\n-/* Helper to free an entry list.  */\n-static void\n-free_entry (entp)\n-     struct entry **entp;\n-{\n-  struct entry *ent, *next;\n-\n-  for (ent = *entp; ent != NULL; ent = next)\n-    {\n-      next = ent->next;\n-      free (ent->file);\n-      free (ent);\n-    }\n-  *entp = NULL;\n-}\n-\n-/* Helper to add to the end of the entry list.  */\n-static void\n-add_entry (entp, name)\n-     struct entry **entp;\n-     const char *name;\n-{\n-  struct entry *ent, *last;\n-\n-  for (last = ent = *entp; ent != NULL; last = ent, ent = ent->next)\n-    if (! strcmp (ent->file, name))\n-      return;\n-\n-  ent = (struct entry *) xmalloc (sizeof (struct entry));\n-  ent->file = xstrdup (name);\n-  ent->next = NULL;\n+/* Nonzero if we are dumping out dummy dependencies.  */\n+static int print_dummies;\n \n-  if (last == NULL)\n-    {\n-      /* This is only true the first time through, when the entry list\n-\t is empty.  */\n-      *entp = ent;\n-    }     \n-  else\n-    last->next = ent;\n-}\n+\f\n \n /* Call this to reset the dependency module.  This is required if\n    multiple dependency files are being generated from a single tool\n-   invocation.  */\n+   invocation.  FIXME: we should change our API or just completely use\n+   the one in mkdeps.h.  */\n void\n jcf_dependency_reset ()\n {\n-  free_entry (&dependencies);\n-  free_entry (&targets);\n-\n   if (dep_out != NULL)\n     {\n       if (dep_out != stdout)\n \tfclose (dep_out);\n       dep_out = NULL;\n     }\n+\n+  if (dependencies != NULL)\n+    {\n+      deps_free (dependencies);\n+      dependencies = NULL;\n+    }\n }\n \n void\n jcf_dependency_set_target (name)\n      const char *name;\n {\n-  free_entry (&targets);\n-  if (name != NULL)\n-    add_entry (&targets, name);\n+  /* We just handle this the same as an `add_target'.  */\n+  if (dependencies != NULL && name != NULL)\n+    deps_add_target (dependencies, name);\n }\n \n void\n jcf_dependency_add_target (name)\n      const char *name;\n {\n-  add_entry (&targets, name);\n+  if (dependencies != NULL)\n+    deps_add_target (dependencies, name);\n }\n \n void\n@@ -155,122 +103,41 @@ jcf_dependency_add_file (filename, system_p)\n      const char *filename;\n      int system_p;\n {\n+  if (! dependencies)\n+    return;\n+\n   /* Just omit system files.  */\n   if (system_p && ! system_files)\n     return;\n \n-  add_entry (&dependencies, filename);\n+  deps_add_dep (dependencies, filename);\n }\n \n void\n jcf_dependency_init (system_p)\n      int system_p;\n {\n+  assert (! dependencies);\n   system_files = system_p;\n+  dependencies = deps_init ();\n }\n \n-/* FIXME: this is taken almost directly from cccp.c.  Such duplication\n-   is bad.  */\n-static const char *\n-munge (filename)\n-     const char *filename;\n-{\n-  static char *buffer = NULL;\n-  static int buflen = 0;\n-\n-  int len = 2 * strlen (filename) + 1;\n-  const char *p;\n-  char *dst;\n-\n-  if (buflen < len)\n-    {\n-      buflen = len;\n-      buffer = xrealloc (buffer, buflen);\n-    }\n-\n-  dst = buffer;\n-  for (p = filename; *p; ++p)\n-    {\n-      switch (*p)\n-\t{\n-\tcase ' ':\n-\tcase '\\t':\n-\t  {\n-\t    /* GNU make uses a weird quoting scheme for white space.\n-\t       A space or tab preceded by 2N+1 backslashes represents\n-\t       N backslashes followed by space; a space or tab\n-\t       preceded by 2N backslashes represents N backslashes at\n-\t       the end of a file name; and backslashes in other\n-\t       contexts should not be doubled.  */\n-\t    const char *q;\n-\t    for (q = p - 1; filename < q && q[-1] == '\\\\';  q--)\n-\t      *dst++ = '\\\\';\n-\t  }\n-\t  *dst++ = '\\\\';\n-\t  goto ordinary_char;\n-\n-\tcase '$':\n-\t  *dst++ = '$';\n-\t  /* Fall through.  This can mishandle things like \"$(\" but\n-\t     there's no easy fix.  */\n-\tdefault:\n-\tordinary_char:\n-\t  /* This can mishandle characters in the string \"\\0\\n%*?[\\\\~\";\n-\t     exactly which chars are mishandled depends on the `make' version.\n-\t     We know of no portable solution for this;\n-\t     even GNU make 3.76.1 doesn't solve the problem entirely.\n-\t     (Also, '\\0' is mishandled due to our calling conventions.)  */\n-\t  *dst++ = *p;\n-\t  break;\n-\t}\n-    }\n-\n-  *dst++ = '\\0';\n-  return buffer;\n-}\n-\n-/* Helper to print list of files.  */\n-static int\n-print_ents (ent, column)\n-     struct entry *ent;\n-     int column;\n+void\n+jcf_dependency_print_dummies ()\n {\n-  int first = 1;\n-\n-  for (; ent != NULL; ent = ent->next)\n-    {\n-      const char *depname = munge (ent->file);\n-      int len = strlen (depname);\n-\n-      if (column + len + 2 > MAX_OUTPUT_COLUMNS)\n-\t{\n-\t  fprintf (dep_out, \" \\\\\\n \");\n-\t  column = 1;\n-\t}\n-\n-      if (! first)\n-\tfputs (\" \", dep_out);\n-      fputs (depname, dep_out);\n-      first = 0;\n-      column += len + 1;\n-    }\n-\n-  return column;\n+  print_dummies = 1;\n }\n \n void\n jcf_dependency_write ()\n {\n-  int column = 0;\n-\n   if (! dep_out)\n     return;\n \n-  assert (targets);\n-  column = print_ents (targets, 0);\n-  fputs (\" : \", dep_out);\n+  assert (dependencies);\n \n-  print_ents (dependencies, column);\n-  fputs (\"\\n\", dep_out);\n+  deps_write (dependencies, dep_out, 72);\n+  if (print_dummies)\n+    deps_dummy_targets (dependencies, dep_out);\n   fflush (dep_out);\n }"}, {"sha": "eaeb90547192b8d6d5718e06ca0f0f6721575ddf", "filename": "gcc/java/jcf.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a06a103ac4064f94377b8a4a4c1b91f6a5afe/gcc%2Fjava%2Fjcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a06a103ac4064f94377b8a4a4c1b91f6a5afe/gcc%2Fjava%2Fjcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf.h?ref=316a06a103ac4064f94377b8a4a4c1b91f6a5afe", "patch": "@@ -264,6 +264,7 @@ extern void jcf_dependency_set_dep_file PARAMS ((const char *));\n extern void jcf_dependency_add_file PARAMS ((const char *, int));\n extern void jcf_dependency_write PARAMS ((void));\n extern void jcf_dependency_init PARAMS ((int));\n+extern void jcf_dependency_print_dummies PARAMS ((void));\n \n /* Declarations for path handling code.  */\n extern void jcf_path_init PARAMS ((void));"}, {"sha": "730337a4fe9d18bac55d4362f9babc223bf7c201", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a06a103ac4064f94377b8a4a4c1b91f6a5afe/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a06a103ac4064f94377b8a4a4c1b91f6a5afe/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=316a06a103ac4064f94377b8a4a4c1b91f6a5afe", "patch": "@@ -262,9 +262,11 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n \t    saw_g = 1;\n \t  else if (argv[i][1] == 'O')\n \t    saw_O = 1;\n-\t  else if (((argv[i][2] == '\\0'\n-\t\t     && (char *)strchr (\"bBVDUoeTuIYmLiA\", argv[i][1]) != NULL)\n-\t\t    || strcmp (argv[i], \"-Tdata\") == 0))\n+\t  else if ((argv[i][2] == '\\0'\n+\t\t    && (char *)strchr (\"bBVDUoeTuIYmLiA\", argv[i][1]) != NULL)\n+\t\t   || strcmp (argv[i], \"-Tdata\") == 0\n+\t\t   || strcmp (argv[i], \"-MT\") == 0\n+\t\t   || strcmp (argv[i], \"-MF\") == 0)\n \t    {\n \t      if (strcmp (argv[i], \"-o\") == 0)\n \t\tsaw_o = 1;"}, {"sha": "3d4ec6da416f267cf03372d66c2acfd8eb303888", "filename": "gcc/java/lang-options.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a06a103ac4064f94377b8a4a4c1b91f6a5afe/gcc%2Fjava%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a06a103ac4064f94377b8a4a4c1b91f6a5afe/gcc%2Fjava%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang-options.h?ref=316a06a103ac4064f94377b8a4a4c1b91f6a5afe", "patch": "@@ -41,6 +41,9 @@ DEFINE_LANG_NAME (\"Java\")\n   { \"-MMD\", \"Print dependencies to FILE.d\" },\n   { \"-M\", \"Print dependencies to stdout\" },\n   { \"-MM\", \"Print dependencies to stdout\" },\n+  { \"-MA\", \"Print dummy rules for included files\" },\n+  { \"-MF\", \"Print dependencies to FILE\" },\n+  { \"-MT\", \"Use TARGET as name of target in dependency file\" },\n #endif /* ! USE_CPPLIB */\n   { \"--classpath\", \"Set class path and suppress system path\" },\n   { \"--CLASSPATH\", \"Set class path\" },"}, {"sha": "d7cc59b65d5a5a7f37b2b97577505c980462f584", "filename": "gcc/java/lang-specs.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a06a103ac4064f94377b8a4a4c1b91f6a5afe/gcc%2Fjava%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a06a103ac4064f94377b8a4a4c1b91f6a5afe/gcc%2Fjava%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang-specs.h?ref=316a06a103ac4064f94377b8a4a4c1b91f6a5afe", "patch": "@@ -32,6 +32,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n   {\"@java\",\n    \"%{fjni:%{femit-class-files:%e-fjni and -femit-class-files are incompatible}}\\\n     %{fjni:%{femit-class-file:%e-fjni and -femit-class-file are incompatible}}\\\n-    %{!E:jc1 %i %(jc1) %(cc1_options) %{+e*} %{I*} %{MD} %{MMD} %{M} %{MM}\\\n+    %{!E:jc1 %i %(jc1) %(cc1_options) %{+e*} %{I*}\\\n+             %{MD} %{MMD} %{M} %{MM} %{MA} %{MT*} %{MF*}\\\n              %{!fsyntax-only:%(invoke_as)}}\"},\n "}, {"sha": "8065fc767fe4a41dfff925d1f4cccbcea6d6ebd0", "filename": "gcc/java/lang.c", "status": "modified", "additions": 57, "deletions": 26, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/316a06a103ac4064f94377b8a4a4c1b91f6a5afe/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/316a06a103ac4064f94377b8a4a4c1b91f6a5afe/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=316a06a103ac4064f94377b8a4a4c1b91f6a5afe", "patch": "@@ -159,6 +159,8 @@ static int dependency_tracking = 0;\n /* Flag values for DEPENDENCY_TRACKING.  */\n #define DEPEND_SET_FILE 1\n #define DEPEND_ENABLE   2\n+#define DEPEND_TARGET_SET 4\n+#define DEPEND_FILE_ALREADY_SET 8\n \n /*\n  * process java-specific compiler command-line options\n@@ -316,6 +318,23 @@ lang_decode_option (argc, argv)\n       dependency_tracking |= DEPEND_ENABLE;\n       return 1;\n     }\n+  else if (strcmp (p, \"-MA\") == 0)\n+    {\n+      jcf_dependency_print_dummies ();\n+      return 1;\n+    }\n+  else if (strcmp (p, \"-MT\") == 0)\n+    {\n+      jcf_dependency_set_target (argv[1]);\n+      dependency_tracking |= DEPEND_TARGET_SET;\n+      return 2;\n+    }\n+  else if (strcmp (p, \"-MF\") == 0)\n+    {\n+      jcf_dependency_set_dep_file (argv[1]);\n+      dependency_tracking |= DEPEND_FILE_ALREADY_SET;\n+      return 2;\n+    }\n \n   return 0;\n }\n@@ -342,36 +361,48 @@ init_parse (filename)\n       if (dependency_tracking)\n \t{\n \t  char *dot;\n-\t  dot = strrchr (filename, '.');\n-\t  if (dot == NULL)\n-\t    error (\"couldn't determine target name for dependency tracking\");\n-\t  else\n+\n+\t  /* If the target is set and the output filename is set, then\n+\t     there's no processing to do here.  Otherwise we must\n+\t     compute one or the other.  */\n+\t  if (! ((dependency_tracking & DEPEND_TARGET_SET)\n+\t\t && (dependency_tracking & DEPEND_FILE_ALREADY_SET)))\n \t    {\n-\t      char *buf = (char *) xmalloc (dot - filename +\n-\t\t\t\t\t    3 + sizeof (OBJECT_SUFFIX));\n-\t      strncpy (buf, filename, dot - filename);\n-\n-\t      /* If emitting class files, we might have multiple\n-\t\t targets.  The class generation code takes care of\n-\t\t registering them.  Otherwise we compute the target\n-\t\t name here.  */\n-\t      if (flag_emit_class_files)\n-\t\tjcf_dependency_set_target (NULL);\n+\t      dot = strrchr (filename, '.');\n+\t      if (dot == NULL)\n+\t\terror (\"couldn't determine target name for dependency tracking\");\n \t      else\n \t\t{\n-\t\t  strcpy (buf + (dot - filename), OBJECT_SUFFIX);\n-\t\t  jcf_dependency_set_target (buf);\n-\t\t}\n-\n-\t      if ((dependency_tracking & DEPEND_SET_FILE))\n-\t\t{\n-\t\t  strcpy (buf + (dot - filename), \".d\");\n-\t\t  jcf_dependency_set_dep_file (buf);\n+\t\t  char *buf = (char *) xmalloc (dot - filename +\n+\t\t\t\t\t\t3 + sizeof (OBJECT_SUFFIX));\n+\t\t  strncpy (buf, filename, dot - filename);\n+\n+\t\t  /* If emitting class files, we might have multiple\n+\t\t     targets.  The class generation code takes care of\n+\t\t     registering them.  Otherwise we compute the\n+\t\t     target name here.  */\n+\t\t  if ((dependency_tracking & DEPEND_TARGET_SET))\n+\t\t    ; /* Nothing.  */\n+\t\t  else if (flag_emit_class_files)\n+\t\t    jcf_dependency_set_target (NULL);\n+\t\t  else\n+\t\t    {\n+\t\t      strcpy (buf + (dot - filename), OBJECT_SUFFIX);\n+\t\t      jcf_dependency_set_target (buf);\n+\t\t    }\n+\n+\t\t  if ((dependency_tracking & DEPEND_FILE_ALREADY_SET))\n+\t\t    ; /* Nothing.  */\n+\t\t  else if ((dependency_tracking & DEPEND_SET_FILE))\n+\t\t    {\n+\t\t      strcpy (buf + (dot - filename), \".d\");\n+\t\t      jcf_dependency_set_dep_file (buf);\n+\t\t    }\n+\t\t  else\n+\t\t    jcf_dependency_set_dep_file (\"-\");\n+\n+\t\t  free (buf);\n \t\t}\n-\t      else\n-\t\tjcf_dependency_set_dep_file (\"-\");\n-\n-\t      free (buf);\n \t    }\n \t}\n     }"}]}