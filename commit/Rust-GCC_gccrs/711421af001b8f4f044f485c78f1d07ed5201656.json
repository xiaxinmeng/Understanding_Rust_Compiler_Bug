{"sha": "711421af001b8f4f044f485c78f1d07ed5201656", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzExNDIxYWYwMDFiOGY0ZjA0NGY0ODVjNzhmMWQwN2VkNTIwMTY1Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-14T22:24:37Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-15T13:35:52Z"}, "message": "PR tree-optimization/93247 - ICE in get_load_store_type\n\nMy earlier update_epilogue_loop_vinfo patch introduced an ICE on these\ntests for AVX512.  If we use pattern stmts, STMT_VINFO_GATHER_SCATTER_P\nis valid for both the original stmt and the pattern stmt, but\nSTMT_VINFO_MEMORY_ACCESS_TYPE is valid only for the latter.\n\n2020-01-15  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR tree-optimization/93247\n\t* tree-vect-loop.c (update_epilogue_loop_vinfo): Check the access\n\ttype of the stmt that we're going to vectorize.\n\ngcc/testsuite/\n\tPR tree-optimization/93247\n\t* gcc.dg/vect/pr93247-1.c: New test.\n\t* gcc.dg/vect/pr93247-2.c: Likewise.", "tree": {"sha": "271bfca9486b6342280c64fc2722995777fff410", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/271bfca9486b6342280c64fc2722995777fff410"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/711421af001b8f4f044f485c78f1d07ed5201656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/711421af001b8f4f044f485c78f1d07ed5201656", "html_url": "https://github.com/Rust-GCC/gccrs/commit/711421af001b8f4f044f485c78f1d07ed5201656", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/711421af001b8f4f044f485c78f1d07ed5201656/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86c3a7d891f9f175d09d61f5ce163c6dc5ce681f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86c3a7d891f9f175d09d61f5ce163c6dc5ce681f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86c3a7d891f9f175d09d61f5ce163c6dc5ce681f"}], "stats": {"total": 76, "additions": 75, "deletions": 1}, "files": [{"sha": "3099ec4143cd451841b4403e76c352637048aa02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/711421af001b8f4f044f485c78f1d07ed5201656/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/711421af001b8f4f044f485c78f1d07ed5201656/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=711421af001b8f4f044f485c78f1d07ed5201656", "patch": "@@ -1,3 +1,9 @@\n+2020-01-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/93247\n+\t* tree-vect-loop.c (update_epilogue_loop_vinfo): Check the access\n+\ttype of the stmt that we're going to vectorize.\n+\n 2020-01-15  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-slp.c (vectorize_slp_instance_root_stmt): Use a"}, {"sha": "0f0f177871989a968342316f50212824335c79d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/711421af001b8f4f044f485c78f1d07ed5201656/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/711421af001b8f4f044f485c78f1d07ed5201656/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=711421af001b8f4f044f485c78f1d07ed5201656", "patch": "@@ -1,3 +1,9 @@\n+2020-01-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/93247\n+\t* gcc.dg/vect/pr93247-1.c: New test.\n+\t* gcc.dg/vect/pr93247-2.c: Likewise.\n+\n 2020-01-15  Martin Sebor  <msebor@redhat.com>\n \n \t* gcc.dg/Wstringop-overflow-17.c: Tweak test to avoid unrelated"}, {"sha": "a3087b81d674aff9c6258953a0fdf72275e20122", "filename": "gcc/testsuite/gcc.dg/vect/pr93247-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/711421af001b8f4f044f485c78f1d07ed5201656/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr93247-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/711421af001b8f4f044f485c78f1d07ed5201656/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr93247-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr93247-1.c?ref=711421af001b8f4f044f485c78f1d07ed5201656", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=skylake\" { target x86_64-*-* i?86-*-* } } */\n+\n+typedef struct {\n+  unsigned num;\n+} VEC_tree_base;\n+\n+enum {\n+  LTO_DECL_STREAM_NAMESPACE_DECL,\n+  LTO_DECL_STREAM_LABEL_DECL,\n+  LTO_N_DECL_STREAMS\n+};\n+\n+struct lto_tree_ref_encoder {\n+  VEC_tree_base *trees;\n+} typedef *lto_out_decl_state_ptr;\n+\n+typedef struct {\n+  lto_out_decl_state_ptr vec[1];\n+} VEC_lto_out_decl_state_ptr_base;\n+\n+VEC_lto_out_decl_state_ptr_base *a;\n+int f;\n+long g;\n+int\n+fn1(struct lto_tree_ref_encoder *p1) {\n+  int i;\n+  long b;\n+  i = 0;\n+  for (; i < LTO_N_DECL_STREAMS; i++) {\n+    struct lto_tree_ref_encoder c = *p1;\n+    int d;\n+    VEC_tree_base *e = c.trees;\n+    d = e ? e->num : 0;\n+    b += d;\n+  }\n+  return b;\n+}\n+int\n+fn2() {\n+  lto_out_decl_state_ptr h;\n+  struct lto_tree_ref_encoder j;\n+  unsigned k;\n+  for (; k < f; k++) {\n+    h = a->vec[k];\n+    j = *h;\n+    g += fn1(&j);\n+  }\n+}"}, {"sha": "e229e15d87a7dfbbc9aa9f4dba1971597bf4850a", "filename": "gcc/testsuite/gcc.dg/vect/pr93247-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/711421af001b8f4f044f485c78f1d07ed5201656/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr93247-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/711421af001b8f4f044f485c78f1d07ed5201656/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr93247-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr93247-2.c?ref=711421af001b8f4f044f485c78f1d07ed5201656", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=skylake-avx512\" { target x86_64-*-* i?86-*-* } } */\n+\n+int\n+foo (int *a, double *b, int *c)\n+{\n+  int f, g = 0;\n+  for (f = 0; f < 100; f++)\n+    if (b[f] && c[a[f]])\n+      g++;\n+  return g;\n+}"}, {"sha": "8e318a037a7cd4a3253cab6fd5e7e4051c2afe01", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/711421af001b8f4f044f485c78f1d07ed5201656/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/711421af001b8f4f044f485c78f1d07ed5201656/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=711421af001b8f4f044f485c78f1d07ed5201656", "patch": "@@ -8452,7 +8452,8 @@ update_epilogue_loop_vinfo (class loop *epilogue, tree advance)\n \t updated offset we set using ADVANCE.  Instead we have to make sure the\n \t reference in the data references point to the corresponding copy of\n \t the original in the epilogue.  */\n-      if (STMT_VINFO_MEMORY_ACCESS_TYPE (stmt_vinfo) == VMAT_GATHER_SCATTER)\n+      if (STMT_VINFO_MEMORY_ACCESS_TYPE (vect_stmt_to_vectorize (stmt_vinfo))\n+\t  == VMAT_GATHER_SCATTER)\n \t{\n \t  DR_REF (dr)\n \t    = simplify_replace_tree (DR_REF (dr), NULL_TREE, NULL_TREE,"}]}