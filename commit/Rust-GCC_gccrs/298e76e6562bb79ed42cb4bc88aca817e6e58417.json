{"sha": "298e76e6562bb79ed42cb4bc88aca817e6e58417", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk4ZTc2ZTY1NjJiYjc5ZWQ0MmNiNGJjODhhY2E4MTdlNmU1ODQxNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-07T15:00:39Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-07T15:00:39Z"}, "message": "gimple-isel: Check whether IFN_VCONDEQ is supported [PR98560]\n\nThis patch follows on from the previous one for the PR and\nmakes sure that we can handle == as well as <.  Previously\nwe assumed without checking that IFN_VCONDEQ was available\nif IFN_VCOND or IFN_VCONDU wasn't.\n\nThe patch also fixes the definition of the IFN_VCOND* functions.\nThe optabs are convert optabs in which the first mode is the\ndata mode and the second mode is the comparison or mask mode.\n\ngcc/\n\tPR tree-optimization/98560\n\t* internal-fn.def (IFN_VCONDU, IFN_VCONDEQ): Use type vec_cond.\n\t* internal-fn.c (vec_cond_mask_direct): Get the data mode from\n\targument 1.\n\t(vec_cond_direct): Likewise argument 2.\n\t(vec_condu_direct, vec_condeq_direct): Delete.\n\t(expand_vect_cond_optab_fn): Rename to...\n\t(expand_vec_cond_optab_fn): ...this, replacing old macro.\n\t(expand_vec_condu_optab_fn, expand_vec_condeq_optab_fn): Delete.\n\t(expand_vect_cond_mask_optab_fn): Rename to...\n\t(expand_vec_cond_mask_optab_fn): ...this, replacing old macro.\n\t(direct_vec_cond_mask_optab_supported_p): Treat the optab as a\n\tconvert optab.\n\t(direct_vec_cond_optab_supported_p): Likewise.\n\t(direct_vec_condu_optab_supported_p): Delete.\n\t(direct_vec_condeq_optab_supported_p): Delete.\n\t* gimple-isel.cc: Include internal-fn.h.\n\t(gimple_expand_vec_cond_expr): Check that IFN_VCONDEQ is supported\n\tbefore using it.\n\ngcc/testsuite/\n\tPR tree-optimization/98560\n\t* gcc.dg/vect/pr98560-2.c: New test.", "tree": {"sha": "f9abd4374bb6e5a20b0aa856cbe21740bccdbb85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9abd4374bb6e5a20b0aa856cbe21740bccdbb85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/298e76e6562bb79ed42cb4bc88aca817e6e58417", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298e76e6562bb79ed42cb4bc88aca817e6e58417", "html_url": "https://github.com/Rust-GCC/gccrs/commit/298e76e6562bb79ed42cb4bc88aca817e6e58417", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/298e76e6562bb79ed42cb4bc88aca817e6e58417/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78595e918ee168f595d16268073a3754c64d67fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78595e918ee168f595d16268073a3754c64d67fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78595e918ee168f595d16268073a3754c64d67fe"}], "stats": {"total": 49, "additions": 30, "deletions": 19}, "files": [{"sha": "2c78a08d3f18b8a47a20af099695d734eedcbd22", "filename": "gcc/gimple-isel.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/298e76e6562bb79ed42cb4bc88aca817e6e58417/gcc%2Fgimple-isel.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/298e76e6562bb79ed42cb4bc88aca817e6e58417/gcc%2Fgimple-isel.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-isel.cc?ref=298e76e6562bb79ed42cb4bc88aca817e6e58417", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"memmodel.h\"\n #include \"optabs.h\"\n #include \"gimple-fold.h\"\n+#include \"internal-fn.h\"\n \n /* Expand all ARRAY_REF(VIEW_CONVERT_EXPR) gimple assignments into calls to\n    internal function based on vector type of selected expansion.\n@@ -250,7 +251,10 @@ gimple_expand_vec_cond_expr (gimple_stmt_iterator *gsi,\n \t     Try changing it to NE_EXPR.  */\n \t  tcode = NE_EXPR;\n \t}\n-      if (tcode == EQ_EXPR || tcode == NE_EXPR)\n+      if ((tcode == EQ_EXPR || tcode == NE_EXPR)\n+\t  && direct_internal_fn_supported_p (IFN_VCONDEQ, TREE_TYPE (lhs),\n+\t\t\t\t\t     TREE_TYPE (op0a),\n+\t\t\t\t\t     OPTIMIZE_FOR_BOTH))\n \t{\n \t  tree tcode_tree = build_int_cst (integer_type_node, tcode);\n \t  return gimple_build_call_internal (IFN_VCONDEQ, 5, op0a, op0b, op1,"}, {"sha": "dd7173126fbb99be398cb0c760ab5ebc1a576335", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/298e76e6562bb79ed42cb4bc88aca817e6e58417/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/298e76e6562bb79ed42cb4bc88aca817e6e58417/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=298e76e6562bb79ed42cb4bc88aca817e6e58417", "patch": "@@ -110,10 +110,8 @@ init_internal_fns ()\n #define mask_store_direct { 3, 2, false }\n #define store_lanes_direct { 0, 0, false }\n #define mask_store_lanes_direct { 0, 0, false }\n-#define vec_cond_mask_direct { 0, 0, false }\n-#define vec_cond_direct { 0, 0, false }\n-#define vec_condu_direct { 0, 0, false }\n-#define vec_condeq_direct { 0, 0, false }\n+#define vec_cond_mask_direct { 1, 0, false }\n+#define vec_cond_direct { 2, 0, false }\n #define scatter_store_direct { 3, 1, false }\n #define len_store_direct { 3, 3, false }\n #define vec_set_direct { 3, 3, false }\n@@ -2766,7 +2764,7 @@ expand_partial_store_optab_fn (internal_fn, gcall *stmt, convert_optab optab)\n    The expansion of STMT happens based on OPTAB table associated.  */\n \n static void\n-expand_vect_cond_optab_fn (internal_fn, gcall *stmt, convert_optab optab)\n+expand_vec_cond_optab_fn (internal_fn, gcall *stmt, convert_optab optab)\n {\n   class expand_operand ops[6];\n   insn_code icode;\n@@ -2802,15 +2800,11 @@ expand_vect_cond_optab_fn (internal_fn, gcall *stmt, convert_optab optab)\n     emit_move_insn (target, ops[0].value);\n }\n \n-#define expand_vec_cond_optab_fn expand_vect_cond_optab_fn\n-#define expand_vec_condu_optab_fn expand_vect_cond_optab_fn\n-#define expand_vec_condeq_optab_fn expand_vect_cond_optab_fn\n-\n /* Expand VCOND_MASK optab internal function.\n    The expansion of STMT happens based on OPTAB table associated.  */\n \n static void\n-expand_vect_cond_mask_optab_fn (internal_fn, gcall *stmt, convert_optab optab)\n+expand_vec_cond_mask_optab_fn (internal_fn, gcall *stmt, convert_optab optab)\n {\n   class expand_operand ops[4];\n \n@@ -2844,8 +2838,6 @@ expand_vect_cond_mask_optab_fn (internal_fn, gcall *stmt, convert_optab optab)\n     emit_move_insn (target, ops[0].value);\n }\n \n-#define expand_vec_cond_mask_optab_fn expand_vect_cond_mask_optab_fn\n-\n /* Expand VEC_SET internal functions.  */\n \n static void\n@@ -3570,10 +3562,8 @@ multi_vector_optab_supported_p (convert_optab optab, tree_pair types,\n #define direct_mask_store_optab_supported_p convert_optab_supported_p\n #define direct_store_lanes_optab_supported_p multi_vector_optab_supported_p\n #define direct_mask_store_lanes_optab_supported_p multi_vector_optab_supported_p\n-#define direct_vec_cond_mask_optab_supported_p multi_vector_optab_supported_p\n-#define direct_vec_cond_optab_supported_p multi_vector_optab_supported_p\n-#define direct_vec_condu_optab_supported_p multi_vector_optab_supported_p\n-#define direct_vec_condeq_optab_supported_p multi_vector_optab_supported_p\n+#define direct_vec_cond_mask_optab_supported_p convert_optab_supported_p\n+#define direct_vec_cond_optab_supported_p convert_optab_supported_p\n #define direct_scatter_store_optab_supported_p convert_optab_supported_p\n #define direct_len_store_optab_supported_p direct_optab_supported_p\n #define direct_while_optab_supported_p convert_optab_supported_p"}, {"sha": "19016ce109f30f54f545162c2947a3bdca9ef02c", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/298e76e6562bb79ed42cb4bc88aca817e6e58417/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/298e76e6562bb79ed42cb4bc88aca817e6e58417/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=298e76e6562bb79ed42cb4bc88aca817e6e58417", "patch": "@@ -141,8 +141,8 @@ DEF_INTERNAL_OPTAB_FN (MASK_STORE_LANES, 0,\n \t\t       vec_mask_store_lanes, mask_store_lanes)\n \n DEF_INTERNAL_OPTAB_FN (VCOND, 0, vcond, vec_cond)\n-DEF_INTERNAL_OPTAB_FN (VCONDU, 0, vcondu, vec_condu)\n-DEF_INTERNAL_OPTAB_FN (VCONDEQ, 0, vcondeq, vec_condeq)\n+DEF_INTERNAL_OPTAB_FN (VCONDU, 0, vcondu, vec_cond)\n+DEF_INTERNAL_OPTAB_FN (VCONDEQ, 0, vcondeq, vec_cond)\n DEF_INTERNAL_OPTAB_FN (VCOND_MASK, 0, vcond_mask, vec_cond_mask)\n \n DEF_INTERNAL_OPTAB_FN (VEC_SET, 0, vec_set, vec_set)"}, {"sha": "7759a5e820266a09b5ee2ffa9565457f887758a6", "filename": "gcc/testsuite/gcc.dg/vect/pr98560-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/298e76e6562bb79ed42cb4bc88aca817e6e58417/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr98560-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/298e76e6562bb79ed42cb4bc88aca817e6e58417/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr98560-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr98560-2.c?ref=298e76e6562bb79ed42cb4bc88aca817e6e58417", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3 -fno-tree-vrp -fno-tree-fre -fno-tree-pre -fno-code-hoisting -fvect-cost-model=dynamic\" } */\n+/* { dg-additional-options \"-msve-vector-bits=128\" { target aarch64_sve } } */\n+\n+#include <stdint.h>\n+\n+void\n+f (uint16_t *restrict dst, uint32_t *restrict src1, float *restrict src2)\n+{\n+  int i = 0;\n+  for (int j = 0; j < 4; ++j)\n+    {\n+      uint16_t tmp = src1[i] >> 1;\n+      dst[i] = (uint16_t) (src2[i] == 0 && i < 4 ? tmp : 1);\n+      i += 1;\n+    }\n+}"}]}