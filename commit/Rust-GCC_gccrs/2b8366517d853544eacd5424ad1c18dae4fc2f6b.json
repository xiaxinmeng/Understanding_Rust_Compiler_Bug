{"sha": "2b8366517d853544eacd5424ad1c18dae4fc2f6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI4MzY2NTE3ZDg1MzU0NGVhY2Q1NDI0YWQxYzE4ZGFlNGZjMmY2Yg==", "commit": {"author": {"name": "Eli Zaretskii", "email": "eliz@gnu.org", "date": "2005-05-15T16:35:44Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2005-05-15T16:35:44Z"}, "message": "pexecute.txh: Enclose multi-word data types in @deftypefn in braces.\n\n2005-05-15  Eli Zaretskii  <eliz@gnu.org>\n\n\t* pexecute.txh: Enclose multi-word data types in @deftypefn in\n\tbraces.  Minor wording fixes.  Use --- for em-dash.  Use\n\t@enumerate in enumerated lists.\n\nFrom-SVN: r99728", "tree": {"sha": "699da14fcb5fe25bb052a8a67adc3ec4eb25c992", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/699da14fcb5fe25bb052a8a67adc3ec4eb25c992"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b8366517d853544eacd5424ad1c18dae4fc2f6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8366517d853544eacd5424ad1c18dae4fc2f6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b8366517d853544eacd5424ad1c18dae4fc2f6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b8366517d853544eacd5424ad1c18dae4fc2f6b/comments", "author": {"login": "Eli-Zaretskii", "id": 20908835, "node_id": "MDQ6VXNlcjIwOTA4ODM1", "avatar_url": "https://avatars.githubusercontent.com/u/20908835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eli-Zaretskii", "html_url": "https://github.com/Eli-Zaretskii", "followers_url": "https://api.github.com/users/Eli-Zaretskii/followers", "following_url": "https://api.github.com/users/Eli-Zaretskii/following{/other_user}", "gists_url": "https://api.github.com/users/Eli-Zaretskii/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eli-Zaretskii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eli-Zaretskii/subscriptions", "organizations_url": "https://api.github.com/users/Eli-Zaretskii/orgs", "repos_url": "https://api.github.com/users/Eli-Zaretskii/repos", "events_url": "https://api.github.com/users/Eli-Zaretskii/events{/privacy}", "received_events_url": "https://api.github.com/users/Eli-Zaretskii/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7672ae20826b2b3921d93be1a6bd5e932c52cd25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7672ae20826b2b3921d93be1a6bd5e932c52cd25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7672ae20826b2b3921d93be1a6bd5e932c52cd25"}], "stats": {"total": 110, "additions": 65, "deletions": 45}, "files": [{"sha": "054a4502c9dbc3f4d76aad7e20bd8e099189dc46", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 34, "deletions": 28, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8366517d853544eacd5424ad1c18dae4fc2f6b/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8366517d853544eacd5424ad1c18dae4fc2f6b/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=2b8366517d853544eacd5424ad1c18dae4fc2f6b", "patch": "@@ -1,3 +1,9 @@\n+2005-05-15  Eli Zaretskii  <eliz@gnu.org>\n+\n+\t* pexecute.txh: Enclose multi-word data types in @deftypefn in\n+\tbraces.  Minor wording fixes.  Use --- for em-dash.  Use\n+\t@enumerate in enumerated lists.\n+\n 2005-05-11  Eli Zaretskii  <eliz@gnu.org>\n \n \t* pex-djgpp.c: Include string.h, fcntl.h, unistd.h, and\n@@ -47,7 +53,7 @@\n 2005-04-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* fopen_unlocked.c (unlock_std_streams): New.\n-\t\n+\n \t* functions.texi: Regenerate.\n \n 2005-04-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n@@ -66,19 +72,19 @@\n \t* lbasename.c: Likewise.\n \t* spaces.c: Likewise.\n \t* xatexit.c:Likewise.\n-\t* configure.ac:  Do check declarations for basename, ffs, asprintf \n+\t* configure.ac:  Do check declarations for basename, ffs, asprintf\n \tand vasprintf for real.\n \t* configure: Regenerate.\n \n 2005-04-13  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n-\t* argv.c (dupargv): Allocate space of argv[argc], not \n+\t* argv.c (dupargv): Allocate space of argv[argc], not\n \tsizeof(char *) of that amount.  Cast result to char *.\n \n 2005-04-12  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* regex.c (wcs_re_match_2_internal, byte_re_match_2_internal):\n-\tReplace not with negate. \n+\tReplace not with negate.\n \n 2005-04-12  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n@@ -152,27 +158,27 @@\n \t* configure: Rebuild.\n \n 2005-03-28  Mark Kettenis  <kettenis@gnu.org>\n-\t\n+\n \t* unlink-if-ordinary.c: Include <sys/types.h>.\n \n 2005-03-27  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tConvert libiberty to use ISO C prototype style 7/n.\n \t* regex.c (PARAMS): Remove definition.\n \t(PREFIX): Unconditionaly define using ISO C ## operator.\n-\t(init_syntax_once, extract_number, extract_number_and_incr, \n+\t(init_syntax_once, extract_number, extract_number_and_incr,\n \tprint_fastmap, print_partial_compiled_pattern,\n-\tprint_compiled_pattern, print_double_string, printchar, \n+\tprint_compiled_pattern, print_double_string, printchar,\n \tconvert_mbs_to_wcs, re_set_syntax, regex_grow_registers,\n \tregex_compile, store_op1, store_op2, insert_op1, insert_op2,\n-\tat_begline_loc_p, at_endline_p, group_in_compile_stack, \n-\tinsert_space, wcs_compile_range, byte_compile_range, \n-\ttruncate_wchar, re_compile_fastmap, re_compile_fastmap, \n-\tre_set_registers, re_search, re_search_2, re_search_3, re_match, \n+\tat_begline_loc_p, at_endline_p, group_in_compile_stack,\n+\tinsert_space, wcs_compile_range, byte_compile_range,\n+\ttruncate_wchar, re_compile_fastmap, re_compile_fastmap,\n+\tre_set_registers, re_search, re_search_2, re_search_3, re_match,\n \tre_match_2, count_mbs_length, wcs_re_match_2_internal,\n \tbyte_re_match_2_internal, group_match_null_string_p,\n \talt_match_null_string_p, common_op_match_null_string_p,\n-\tbcmp_translate, re_compile_pattern, re_comp, re_exec, regcomp, \n+\tbcmp_translate, re_compile_pattern, re_comp, re_exec, regcomp,\n \tregexec, regerror, regfree): Use ISO C prototype style.\n \t* partition.c: (elem_compare): Likewise.\n \t* cp-demangle.c (print_usage): Likewise.\n@@ -181,21 +187,21 @@\n \n \tConvert libiberty to use ISO C prototype style 5/n.\n \t* random.c (srandom, initstate, setstate, random): Use ISO C\n-\tprototypes. \n+\tprototypes.\n \t* putenv.c (putenv): Likewise.\n \t* physmem.c (physmem_available, physmem_total, main): Likewise.\n \t* pex-win32.c (fix_argv, pexecute, pwait): Likewise.\n \t* pex-unix.c (pexecute, pwait): Likewise.\n \t* pex-msdos.c (pexecute, pwait): Likewise.\n \t* pex-djgpp.c (pexecute, pwait): Likewise.\n-\t* partition.c (partition_new, partition_delete, partition_union) \n+\t* partition.c (partition_new, partition_delete, partition_union)\n \t(elem_compare, partition_print): Likewise.\n-\t* obstack.c (_obstack_begin, _obstack_begin_1, _obstack_newchunk, \n-\t_obstack_allocated_p, _obstack_free, obstack_free, \n+\t* obstack.c (_obstack_begin, _obstack_begin_1, _obstack_newchunk,\n+\t_obstack_allocated_p, _obstack_free, obstack_free,\n \t_obstack_memory_used, print_and_abort, obstack_next_free,\n \tobstack_object_size, obstack_base): Likewise.  Remove codes\n \tpredicated on !defined(__STDC__).\n-\t* objalloc.c (objalloc_create, _objalloc_alloc, objalloc_free, \n+\t* objalloc.c (objalloc_create, _objalloc_alloc, objalloc_free,\n \tobjalloc_free_block): Use ISO C prototypes.\n \t* mkstemps.c (mkstemps): Likewise.\n \t* memset.c (memset): Likewise.\n@@ -205,16 +211,16 @@\n \t* setenv.c (setenv, unsetenv): Likewise.\n \t* sigsetmask.c (sigsetmask): Likewise.\n \t* snprintf.c (snprintf): Likewise.\n-\t* sort.c (sort_pointers, xmalloc): Likewise. \n+\t* sort.c (sort_pointers, xmalloc): Likewise.\n \t* spaces.c (spaces): Likewise.\n-\t* splay-tree.c (splay_tree_delete_helper, \n-\tsplay_tree_splay_helper, splay_tree_splay, \n+\t* splay-tree.c (splay_tree_delete_helper,\n+\tsplay_tree_splay_helper, splay_tree_splay,\n \tsplay_tree_foreach_helper, splay_tree_xmalloc_allocate,\n-\tsplay_tree_new, splay_tree_xmalloc_allocate, \n+\tsplay_tree_new, splay_tree_xmalloc_allocate,\n \tsplay_tree_new_with_allocator, splay_tree_delete,\n-\tsplay_tree_insert, splay_tree_remove, splay_tree_lookup, \n-\tsplay_tree_max, splay_tree_min, splay_tree_predecessor, \n-\tsplay_tree_successor, splay_tree_foreach, \n+\tsplay_tree_insert, splay_tree_remove, splay_tree_lookup,\n+\tsplay_tree_max, splay_tree_min, splay_tree_predecessor,\n+\tsplay_tree_successor, splay_tree_foreach,\n \tsplay_tree_compare_ints, splay_tree_compare_pointers): Likewise.\n \t* stpcpy.c (stpcpy): Likewise.\n \t* stpncpy.c (stpncpy): Likewise.\n@@ -225,19 +231,19 @@\n 2005-03-27  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tConvert libiberty to use ISO C prototype style 6/n.\n-\t* strerror.c (init_error_tables, errno_max, strerror, strerrno, \n+\t* strerror.c (init_error_tables, errno_max, strerror, strerrno,\n \tstrtoerrno, main): Use ISO C prototype style.\n \t* strncasecmp.c (strncasecmp): Likewise.\n \t* strncmp.c (strncmp): Likewise.\n \t* strndup.c (strndup): Likewise.\n \t* strrchr.c (strrchr): Likewise.\n-\t* strsignal.c (init_signal_tables, signo_max, strsignal, \n+\t* strsignal.c (init_signal_tables, signo_max, strsignal,\n \tstrsigno, strtosigno, psignal, main): Likewise.\n \t* strstr.c (strstr): Likewise.\n \t* strtod.c (strtod, atof): Likewise.\n \t* strtol.c (strtol): Likewise.\n \t* strtoul.c (strtoul): Likewise.\n-\t* ternary.c (ternary_insert, ternary_cleanup, ternary_search, \n+\t* ternary.c (ternary_insert, ternary_cleanup, ternary_search,\n \tternary_recursivesearch): Likewise.\n \t* tmpnam.c (tmpnam): Likewise.\n \t* unlink-if-ordinary.c (unlink_if_ordinary): Likewise.\n@@ -250,7 +256,7 @@\n \t* waitpid.c (waitpid): Likewise.\n \t* xatexit.c (xatexit, xatexit_cleanup): Likewise.\n \t* xexit.c (xexit): Likewise.\n-\t* xmalloc.c (xmalloc_set_program_name, xmalloc_failed, xmalloc, \n+\t* xmalloc.c (xmalloc_set_program_name, xmalloc_failed, xmalloc,\n \txcalloc, xrealloc): Likewise.\n \t* xmemdup.c (xmemdup): Likewise.\n \t* xstrdup.c (xstrdup): Likewise."}, {"sha": "461ff33d018c7ea52ce94933ad81a4fc28f24412", "filename": "libiberty/pexecute.txh", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b8366517d853544eacd5424ad1c18dae4fc2f6b/libiberty%2Fpexecute.txh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b8366517d853544eacd5424ad1c18dae4fc2f6b/libiberty%2Fpexecute.txh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpexecute.txh?ref=2b8366517d853544eacd5424ad1c18dae4fc2f6b", "patch": "@@ -1,4 +1,4 @@\n-@deftypefn Extension struct pex_obj *pex_init (int @var{flags}, const char *@var{pname}, const char *@var{tempbase})\n+@deftypefn Extension {struct pex_obj *} pex_init (int @var{flags}, const char *@var{pname}, const char *@var{tempbase})\n \n Prepare to execute one or more programs, with standard output of each\n program fed to standard input of the next.  This is a system\n@@ -29,7 +29,7 @@ temporary files; it may be @code{NULL} to use a randomly chosen name.\n \n @end deftypefn\n \n-@deftypefn Extension const char *pex_run (struct pex_obj *@var{obj}, int @var{flags}, const char *@var{executable}, char * const *@var{argv}, const char *@var{outname}, const char *@var{errname}, int *@var{err})\n+@deftypefn Extension {const char *} pex_run (struct pex_obj *@var{obj}, int @var{flags}, const char *@var{executable}, char * const *@var{argv}, const char *@var{outname}, const char *@var{errname}, int *@var{err})\n \n Execute one program in a pipeline.  On success this returns\n @code{NULL}.  On failure it returns an error message, a statically\n@@ -46,8 +46,8 @@ allocated string.\n This must be set on the last program in the pipeline.  In particular,\n it should be set when executing a single program.  The standard output\n of the program will be sent to @var{outname}, or, if @var{outname} is\n-@code{NULL}, to the standard output of the calling program.  This\n-should not be set if you want to call @code{pex_read_output}\n+@code{NULL}, to the standard output of the calling program.  Do @emph{not}\n+set this bit if you want to call @code{pex_read_output}\n (described below).  After a call to @code{pex_run} with this bit set,\n @var{pex_run} may no longer be called with the same @var{obj}.\n \n@@ -71,7 +71,7 @@ Send the program's standard error to standard output, if possible.\n The standard input (output) of the program should be read (written) in\n binary mode rather than text mode.  These flags are ignored on systems\n which do not distinguish binary mode and text mode, such as Unix.  For\n-proper behavior these flags should match appropriately--a call to\n+proper behavior these flags should match appropriately---a call to\n @code{pex_run} using @code{PEX_BINARY_OUTPUT} should be followed by a\n call using @code{PEX_BINARY_INPUT}.\n @end table\n@@ -81,42 +81,55 @@ arguments to pass to the program; normally @code{@var{argv}[0]} will\n be a copy of @var{executable}.\n \n @var{outname} is used to set the name of the file to use for standard\n-output.  There are two cases in which no output file will be used: 1)\n+output.  There are two cases in which no output file will be used:\n+\n+@enumerate\n+@item\n if @code{PEX_LAST} is not set in @var{flags}, and @code{PEX_USE_PIPES}\n-was set in the call to @code{pex_init}, and the system supports pipes;\n-2) if @code{PEX_LAST} is set in @var{flags}, and @var{outname} is\n-@code{NULL}.  Otherwise the code will use a file to hold standard\n+was set in the call to @code{pex_init}, and the system supports pipes\n+\n+@item\n+if @code{PEX_LAST} is set in @var{flags}, and @var{outname} is\n+@code{NULL}\n+@end enumerate\n+\n+@noindent\n+Otherwise the code will use a file to hold standard\n output.  If @code{PEX_LAST} is not set, this file is considered to be\n a temporary file, and it will be removed when no longer needed, unless\n @code{PEX_SAVE_TEMPS} was set in the call to @code{pex_init}.\n \n There are two cases to consider when setting the name of the file to\n hold standard output.\n \n-First case: @code{PEX_SUFFIX} is set in @var{flags}.  In this case\n+@enumerate\n+@item\n+@code{PEX_SUFFIX} is set in @var{flags}.  In this case\n @var{outname} may not be @code{NULL}.  If the @var{tempbase} parameter\n to @code{pex_init} was not @code{NULL}, then the output file name is\n the concatenation of @var{tempbase} and @var{outname}.  If\n @var{tempbase} was @code{NULL}, then the output file name is a random\n file name ending in @var{outname}.\n \n-Second case: @code{PEX_SUFFIX} was not set in @var{flags}.  In this\n+@item\n+@code{PEX_SUFFIX} was not set in @var{flags}.  In this\n case, if @var{outname} is not @code{NULL}, it is used as the output\n file name.  If @var{outname} is @code{NULL}, and @var{tempbase} was\n not NULL, the output file name is randomly chosen using\n @var{tempbase}.  Otherwise the output file name is chosen completely\n at random.\n+@end enumerate\n \n @var{errname} is the file name to use for standard error output.  If\n-it is @code{NULL}, standard error is the same as the caller.\n+it is @code{NULL}, standard error is the same as the caller's.\n Otherwise, standard error is written to the named file.\n \n On an error return, the code sets @code{*@var{err}} to an @code{errno}\n value, or to 0 if there is no relevant @code{errno}.\n \n @end deftypefn\n \n-@deftypefn Extension FILE * pex_read_output (struct pex_obj *@var{obj}, int @var{binary})\n+@deftypefn Extension {FILE *} pex_read_output (struct pex_obj *@var{obj}, int @var{binary})\n \n Returns a @code{FILE} pointer which may be used to read the standard\n output of the last program in the pipeline.  When this is used,\n@@ -145,7 +158,8 @@ results will be placed into @var{vector}.  The results are in the\n order of the calls to @code{pex_run}.  Returns 0 on error, 1 on\n success.\n \n-@code{struct pex_time} has the following fields: @code{user_seconds},\n+@code{struct pex_time} has the following fields of the type\n+@code{unsigned long}: @code{user_seconds},\n @code{user_microseconds}, @code{system_seconds},\n @code{system_microseconds}.  On systems which do not support reporting\n process times, all the fields will be set to @code{0}.\n@@ -158,14 +172,14 @@ Clean up and free all data associated with @var{obj}.\n \n @end deftypefn\n \n-@deftypefn Extension const char *pex_one (int @var{flags}, const char *@var{executable}, char * const *@var{argv}, const char *@var{pname}, const char *@var{outname}, const char *@var{errname}, int *@var{status}, int *@var{err})\n+@deftypefn Extension {const char *} pex_one (int @var{flags}, const char *@var{executable}, char * const *@var{argv}, const char *@var{pname}, const char *@var{outname}, const char *@var{errname}, int *@var{status}, int *@var{err})\n \n-An interface to @code{pex_init} to permit the easy execution of a\n+An interface to permit the easy execution of a\n single program.  The return value and most of the parameters are as\n for a call to @code{pex_run}.  @var{flags} is restricted to a\n combination of @code{PEX_SEARCH}, @code{PEX_STDERR_TO_STDOUT}, and\n @code{PEX_BINARY_OUTPUT}.  @var{outname} is interpreted as if\n-@code{PEX_LAST} were set.  On a successful return, *@var{status} will\n+@code{PEX_LAST} were set.  On a successful return, @code{*@var{status}} will\n be set to the exit status of the program.\n \n @end deftypefn"}]}