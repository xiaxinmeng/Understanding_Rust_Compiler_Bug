{"sha": "64f5d139b90646f4852d167c859f6678fc74a244", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRmNWQxMzliOTA2NDZmNDg1MmQxNjdjODU5ZjY2NzhmYzc0YTI0NA==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2016-06-14T12:37:54Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-14T12:37:54Z"}, "message": "sem_attr.adb (Analyze_Attribute_Old_Result): Adding assertion.\n\n2016-06-14  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute_Old_Result): Adding assertion.\n\t(Analyze_Attribute [Attribute_Old]): Generating C handle\n\tanalysis of 'old in inlined postconditions.\n\t(Analyze_Attribute [Attribute_Result]): Generating C handle analysis\n\tof 'result in inlined postconditions.\n\t* exp_attr.adb (Expand_N_Attribute_Reference [Attribute_Old]):\n\tGenerating C handle expansion of 'old in inlined postconditions.\n\t* inline.adb (Declare_Postconditions_Result): New subprogram.\n\t* sem_ch12.adb (Copy_Generic_Node): Copy pragmas generated from\n\taspects when generating C code since pre/post conditions are\n\tinlined and the frontend inlining relies on this routine to\n\tperform inlining.\n\t* exp_ch6.adb (Inlined_Subprogram): Replace Generate_C_Code\n\tby Modify_Tree_For_C.\n\t* exp_unst.adb (Visit_Node): Searching for up-level references\n\tskip entities defined in inlined subprograms.\n\nFrom-SVN: r237437", "tree": {"sha": "eb700e1338bceabade0d1558530388a890e27c95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb700e1338bceabade0d1558530388a890e27c95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64f5d139b90646f4852d167c859f6678fc74a244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64f5d139b90646f4852d167c859f6678fc74a244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64f5d139b90646f4852d167c859f6678fc74a244", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64f5d139b90646f4852d167c859f6678fc74a244/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a527952159edc4505c450047b57256d9c7d89d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a527952159edc4505c450047b57256d9c7d89d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a527952159edc4505c450047b57256d9c7d89d7"}], "stats": {"total": 175, "additions": 162, "deletions": 13}, "files": [{"sha": "e0af917758d53634b50dd0f0df5eb6b69df9cd17", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f5d139b90646f4852d167c859f6678fc74a244/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f5d139b90646f4852d167c859f6678fc74a244/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=64f5d139b90646f4852d167c859f6678fc74a244", "patch": "@@ -1,3 +1,22 @@\n+2016-06-14  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute_Old_Result): Adding assertion.\n+\t(Analyze_Attribute [Attribute_Old]): Generating C handle\n+\tanalysis of 'old in inlined postconditions.\n+\t(Analyze_Attribute [Attribute_Result]): Generating C handle analysis\n+\tof 'result in inlined postconditions.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference [Attribute_Old]):\n+\tGenerating C handle expansion of 'old in inlined postconditions.\n+\t* inline.adb (Declare_Postconditions_Result): New subprogram.\n+\t* sem_ch12.adb (Copy_Generic_Node): Copy pragmas generated from\n+\taspects when generating C code since pre/post conditions are\n+\tinlined and the frontend inlining relies on this routine to\n+\tperform inlining.\n+\t* exp_ch6.adb (Inlined_Subprogram): Replace Generate_C_Code\n+\tby Modify_Tree_For_C.\n+\t* exp_unst.adb (Visit_Node): Searching for up-level references\n+\tskip entities defined in inlined subprograms.\n+\n 2016-06-14  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch7.adb, sem_ch12.adb, freeze.adb, lib-xref.ads, exp_ch3.adb:"}, {"sha": "4907c66d9e99d2c0063980288c658854c98745ef", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 53, "deletions": 7, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f5d139b90646f4852d167c859f6678fc74a244/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f5d139b90646f4852d167c859f6678fc74a244/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=64f5d139b90646f4852d167c859f6678fc74a244", "patch": "@@ -4357,10 +4357,24 @@ package body Exp_Attr is\n          Typ     : constant Entity_Id := Etype (N);\n          CW_Temp : Entity_Id;\n          CW_Typ  : Entity_Id;\n+         Ins_Nod : Node_Id;\n          Subp    : Node_Id;\n          Temp    : Entity_Id;\n \n       begin\n+         --  Generating C code we don't need to expand this attribute when\n+         --  we are analyzing the internally built nested postconditions\n+         --  procedure since it will be expanded inline (and later it will\n+         --  be removed by Expand_N_Subprogram_Body). It this expansion is\n+         --  performed in such case then the compiler generates unreferenced\n+         --  extra temporaries.\n+\n+         if Modify_Tree_For_C\n+           and then Chars (Current_Scope) = Name_uPostconditions\n+         then\n+            return;\n+         end if;\n+\n          --  Climb the parent chain looking for subprogram _Postconditions\n \n          Subp := N;\n@@ -4381,9 +4395,11 @@ package body Exp_Attr is\n          end loop;\n \n          --  'Old can only appear in a postcondition, the generated body of\n-         --  _Postconditions must be in the tree.\n+         --  _Postconditions must be in the tree (or inlined if we are\n+         --  generating C code).\n \n-         pragma Assert (Present (Subp));\n+         pragma Assert (Present (Subp)\n+           or else (Modify_Tree_For_C and then In_Inlined_Body));\n \n          Temp := Make_Temporary (Loc, 'T', Pref);\n \n@@ -4397,7 +4413,35 @@ package body Exp_Attr is\n          --  resides as this ensures that the object will be analyzed in the\n          --  proper context.\n \n-         Push_Scope (Scope (Defining_Entity (Subp)));\n+         if Present (Subp) then\n+            Push_Scope (Scope (Defining_Entity (Subp)));\n+\n+         --  No need to push the scope when generating C code since the\n+         --  _Postcondition procedure has been inlined.\n+\n+         else pragma Assert (Modify_Tree_For_C);\n+            pragma Assert (In_Inlined_Body);\n+            null;\n+         end if;\n+\n+         --  Locate the insertion place of the internal temporary that saves\n+         --  the 'Old value.\n+\n+         if Present (Subp) then\n+            Ins_Nod := Subp;\n+\n+         --  Generating C, the postcondition procedure has been inlined and the\n+         --  temporary is added before the first declaration of the enclosing\n+         --  subprogram.\n+\n+         else pragma Assert (Modify_Tree_For_C);\n+            Ins_Nod := N;\n+            while Nkind (Ins_Nod) /= N_Subprogram_Body loop\n+               Ins_Nod := Parent (Ins_Nod);\n+            end loop;\n+\n+            Ins_Nod := First (Declarations (Ins_Nod));\n+         end if;\n \n          --  Preserve the tag of the prefix by offering a specific view of the\n          --  class-wide version of the prefix.\n@@ -4410,7 +4454,7 @@ package body Exp_Attr is\n             CW_Temp := Make_Temporary (Loc, 'T');\n             CW_Typ  := Class_Wide_Type (Typ);\n \n-            Insert_Before_And_Analyze (Subp,\n+            Insert_Before_And_Analyze (Ins_Nod,\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => CW_Temp,\n                 Constant_Present    => True,\n@@ -4421,7 +4465,7 @@ package body Exp_Attr is\n             --  Generate:\n             --    Temp : Typ renames Typ (CW_Temp);\n \n-            Insert_Before_And_Analyze (Subp,\n+            Insert_Before_And_Analyze (Ins_Nod,\n               Make_Object_Renaming_Declaration (Loc,\n                 Defining_Identifier => Temp,\n                 Subtype_Mark        => New_Occurrence_Of (Typ, Loc),\n@@ -4434,15 +4478,17 @@ package body Exp_Attr is\n             --  Generate:\n             --    Temp : constant Typ := Pref;\n \n-            Insert_Before_And_Analyze (Subp,\n+            Insert_Before_And_Analyze (Ins_Nod,\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => Temp,\n                 Constant_Present    => True,\n                 Object_Definition   => New_Occurrence_Of (Typ, Loc),\n                 Expression          => Relocate_Node (Pref)));\n          end if;\n \n-         Pop_Scope;\n+         if Present (Subp) then\n+            Pop_Scope;\n+         end if;\n \n          --  Ensure that the prefix of attribute 'Old is valid. The check must\n          --  be inserted after the expansion of the attribute has taken place"}, {"sha": "f481fa954dfdf46829965511674dfe6ddf12331b", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f5d139b90646f4852d167c859f6678fc74a244/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f5d139b90646f4852d167c859f6678fc74a244/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=64f5d139b90646f4852d167c859f6678fc74a244", "patch": "@@ -3919,7 +3919,7 @@ package body Exp_Ch6 is\n \n                   --  Inline calls to _postconditions when generating C code\n \n-                  elsif Generate_C_Code\n+                  elsif Modify_Tree_For_C\n                     and then In_Same_Extended_Unit (Sloc (Bod), Loc)\n                     and then Chars (Name (N)) = Name_uPostconditions\n                   then"}, {"sha": "a3e433fedb8f4b46ecaad0ae18b47840a555fedb", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f5d139b90646f4852d167c859f6678fc74a244/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f5d139b90646f4852d167c859f6678fc74a244/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=64f5d139b90646f4852d167c859f6678fc74a244", "patch": "@@ -636,6 +636,10 @@ package body Exp_Unst is\n \n                if not Is_Library_Level_Entity (Ent)\n                  and then Scope_Within_Or_Same (Scope (Ent), Subp)\n+\n+                  --  Skip entities defined in inlined subprograms\n+\n+                 and then Chars (Enclosing_Subprogram (Ent)) /= Name_uParent\n                  and then\n \n                    --  Constants and variables are interesting"}, {"sha": "8b0e331e884176d4d862ae14793f235db4043c69", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f5d139b90646f4852d167c859f6678fc74a244/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f5d139b90646f4852d167c859f6678fc74a244/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=64f5d139b90646f4852d167c859f6678fc74a244", "patch": "@@ -2269,6 +2269,10 @@ package body Inline is\n       --  If the type returned by the function is unconstrained and the call\n       --  can be inlined, special processing is required.\n \n+      procedure Declare_Postconditions_Result;\n+      --  When generating C code, declare _Result, which may be used in the\n+      --  inlined _Postconditions procedure to verify the return value.\n+\n       procedure Make_Exit_Label;\n       --  Build declaration for exit label to be used in Return statements,\n       --  sets Exit_Lab (the label node) and Lab_Decl (corresponding implicit\n@@ -2305,6 +2309,45 @@ package body Inline is\n       function Formal_Is_Used_Once (Formal : Entity_Id) return Boolean;\n       --  Determine whether a formal parameter is used only once in Orig_Bod\n \n+      -----------------------------------\n+      -- Declare_Postconditions_Result --\n+      -----------------------------------\n+\n+      procedure Declare_Postconditions_Result is\n+         Enclosing_Subp : constant Entity_Id := Scope (Subp);\n+\n+      begin\n+         pragma Assert\n+           (Modify_Tree_For_C\n+             and then Is_Subprogram (Enclosing_Subp)\n+             and then Present (Postconditions_Proc (Enclosing_Subp)));\n+\n+         if Ekind (Enclosing_Subp) = E_Function then\n+            if Nkind (First (Parameter_Associations (N)))\n+              in N_Numeric_Or_String_Literal\n+            then\n+               Append_To (Declarations (Blk),\n+                 Make_Object_Declaration (Loc,\n+                   Defining_Identifier =>\n+                     Make_Defining_Identifier (Loc, Name_uResult),\n+                   Constant_Present    => True,\n+                   Object_Definition   =>\n+                     New_Occurrence_Of (Etype (Enclosing_Subp), Loc),\n+                   Expression          =>\n+                     New_Copy_Tree (First (Parameter_Associations (N)))));\n+            else\n+               Append_To (Declarations (Blk),\n+                 Make_Object_Renaming_Declaration (Loc,\n+                   Defining_Identifier =>\n+                     Make_Defining_Identifier (Loc, Name_uResult),\n+                   Subtype_Mark        =>\n+                     New_Occurrence_Of (Etype (Enclosing_Subp), Loc),\n+                   Name                =>\n+                     New_Copy_Tree (First (Parameter_Associations (N)))));\n+            end if;\n+         end if;\n+      end Declare_Postconditions_Result;\n+\n       ---------------------\n       -- Make_Exit_Label --\n       ---------------------\n@@ -2834,6 +2877,16 @@ package body Inline is\n                Set_Declarations (Blk, New_List);\n             end if;\n \n+            --  When generating C code, declare _Result, which may be used to\n+            --  verify the return value.\n+\n+            if Modify_Tree_For_C\n+              and then Nkind (N) = N_Procedure_Call_Statement\n+              and then Chars (Name (N)) = Name_uPostconditions\n+            then\n+               Declare_Postconditions_Result;\n+            end if;\n+\n             --  For the unconstrained case, capture the name of the local\n             --  variable that holds the result. This must be the first\n             --  declaration in the block, because its bounds cannot depend"}, {"sha": "a0740f0d3e7bf4ae2a3153e17ef7de795592adb3", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f5d139b90646f4852d167c859f6678fc74a244/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f5d139b90646f4852d167c859f6678fc74a244/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=64f5d139b90646f4852d167c859f6678fc74a244", "patch": "@@ -1379,10 +1379,13 @@ package body Sem_Attr is\n          --  Hence, in this context, the spec_id of _postconditions is the\n          --  enclosing scope.\n \n-         if Generate_C_Code\n+         if Modify_Tree_For_C\n            and then Chars (Spec_Id) = Name_uParent\n            and then Chars (Scope (Spec_Id)) = Name_uPostconditions\n          then\n+            --  This situation occurs only when preanalyzing the inlined body\n+            pragma Assert (not Full_Analysis);\n+\n             Spec_Id := Scope (Spec_Id);\n             pragma Assert (Is_Inlined (Spec_Id));\n          end if;\n@@ -4886,7 +4889,16 @@ package body Sem_Attr is\n          --  the case, then the aspect or pragma is illegal. Return as analysis\n          --  cannot be carried out.\n \n-         if not Legal then\n+         --  The exception to this rule is when generating C since in this case\n+         --  postconditions are inlined.\n+\n+         if No (Spec_Id)\n+           and then Modify_Tree_For_C\n+           and then In_Inlined_Body\n+         then\n+            Spec_Id := Entity (P);\n+\n+         elsif not Legal then\n             return;\n          end if;\n \n@@ -5297,7 +5309,16 @@ package body Sem_Attr is\n          --  the case, then the aspect or pragma is illegal. Return as analysis\n          --  cannot be carried out.\n \n-         if not Legal then\n+         --  The exception to this rule is when generating C since in this case\n+         --  postconditions are inlined.\n+\n+         if No (Spec_Id)\n+           and then Modify_Tree_For_C\n+           and then In_Inlined_Body\n+         then\n+            Spec_Id := Entity (P);\n+\n+         elsif not Legal then\n             return;\n          end if;\n "}, {"sha": "78c161f0ab0e01f576183dab5c24930900d25689", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64f5d139b90646f4852d167c859f6678fc74a244/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64f5d139b90646f4852d167c859f6678fc74a244/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=64f5d139b90646f4852d167c859f6678fc74a244", "patch": "@@ -513,7 +513,7 @@ package body Sem_Ch12 is\n    --  If the generic is a local entity and the corresponding body has not\n    --  been seen yet, flag enclosing packages to indicate that it will be\n    --  elaborated after the generic body. Subprograms declared in the same\n-   --  package cannot be inlined by the front-end because front-end inlining\n+   --  package cannot be inlined by the front end because front-end inlining\n    --  requires a strict linear order of elaboration.\n \n    function Check_Hidden_Primitives (Assoc_List : List_Id) return Elist_Id;\n@@ -7667,7 +7667,13 @@ package body Sem_Ch12 is\n          --  not carry any semantic information, plus they will be regenerated\n          --  in the instance.\n \n-         elsif From_Aspect_Specification (N) then\n+         --  However, generating C we need to copy them since postconditions\n+         --  are inlined by the front end, and the front-end inlining machinery\n+         --  relies on this routine to perform inlining.\n+\n+         elsif From_Aspect_Specification (N)\n+           and then not Modify_Tree_For_C\n+         then\n             New_N := Make_Null_Statement (Sloc (N));\n \n          else"}]}