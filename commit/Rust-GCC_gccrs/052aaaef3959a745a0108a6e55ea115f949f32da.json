{"sha": "052aaaef3959a745a0108a6e55ea115f949f32da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUyYWFhZWYzOTU5YTc0NWEwMTA4YTZlNTVlYTExNWY5NDlmMzJkYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-04-30T02:20:02Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-04-30T02:20:02Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r861", "tree": {"sha": "50806af20ec98ce72f6a89f1a74f9b157a3e13c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50806af20ec98ce72f6a89f1a74f9b157a3e13c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/052aaaef3959a745a0108a6e55ea115f949f32da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/052aaaef3959a745a0108a6e55ea115f949f32da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/052aaaef3959a745a0108a6e55ea115f949f32da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/052aaaef3959a745a0108a6e55ea115f949f32da/comments", "author": null, "committer": null, "parents": [{"sha": "3c1aa9830fd8346d733d3bcb0b7723090802f097", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c1aa9830fd8346d733d3bcb0b7723090802f097", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c1aa9830fd8346d733d3bcb0b7723090802f097"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "315798072298e97a135b4b5281fd367a77dac924", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052aaaef3959a745a0108a6e55ea115f949f32da/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052aaaef3959a745a0108a6e55ea115f949f32da/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=052aaaef3959a745a0108a6e55ea115f949f32da", "patch": "@@ -96,6 +96,9 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n+/* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n+char **insn_name_ptr = 0;\n+\n extern void free ();\n extern rtx read_rtx ();\n \n@@ -724,6 +727,7 @@ check_attr_test (exp, is_const)\n \t{\n \t  /* These cases are valid for constant attributes, but can't be\n \t     simplified.  */\n+\t  exp = copy_rtx (exp);\n \t  RTX_UNCHANGING_P (exp) = 1;\n \t  break;\n \t}\n@@ -1028,8 +1032,8 @@ make_canonical (attr, exp)\n     case SYMBOL_REF:\n       if (!attr->is_const || RTX_UNCHANGING_P (exp))\n \tbreak;\n-      RTX_UNCHANGING_P (exp) = 1;\n       exp = convert_const_symbol_ref (exp, attr);\n+      RTX_UNCHANGING_P (exp) = 1;\n       check_attr_value (exp, attr);\n       /* Goto COND case since this is now a COND.  Note that while the\n          new expression is rescanned, all symbol_ref notes are mared as\n@@ -1951,13 +1955,20 @@ evaluate_eq_attr (exp, value, insn_code, insn_index)\n   else\n     abort ();\n \n-  /* If uses an address, must return original expression.  */\n+  /* If uses an address, must return original expression.  But set the\n+     RTX_UNCHANGING_P bit so we don't try to simplify it again.  */\n \n   address_used = 0;\n   walk_attr_value (newexp);\n \n   if (address_used)\n-    return exp;\n+    {\n+      if (! RTX_UNCHANGING_P (exp))\n+\texp = copy_rtx (exp);\n+\n+      RTX_UNCHANGING_P (exp) = 1;\n+      return exp;\n+    }\n   else\n     return newexp;\n }\n@@ -2388,8 +2399,11 @@ simplify_test_exp (exp, insn_code, insn_index)\n   /* We have already simplified this expression.  Simplifying it again\n      won't buy anything unless we weren't given a valid insn code\n      to process (i.e., we are canonicalizing something.).  */\n-  if (insn_code != -2)\n-    RTX_UNCHANGING_P (newexp) = 1;\n+  if (insn_code != -2 && ! RTX_UNCHANGING_P (newexp))\n+    {\n+      newexp = copy_rtx (newexp);\n+      RTX_UNCHANGING_P (newexp) = 1;\n+    }\n \n   return newexp;\n }"}]}