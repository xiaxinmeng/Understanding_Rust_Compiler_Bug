{"sha": "3244472df9f0cfbb7eb7385025a718170b521606", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI0NDQ3MmRmOWYwY2ZiYjdlYjczODUwMjVhNzE4MTcwYjUyMTYwNg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2000-12-16T10:41:56Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-12-16T10:41:56Z"}, "message": "tradcpp.c: T_WARNING: New.\n\n        * tradcpp.c: T_WARNING: New.\n        (do_warning): New function.\n        (finclude): Skip past the newline and increase the line number\n        before calling output_line_command.\n        (do_line): Skip the new line after output_line_command.  Don't\n        pre-decrement the line number.\n\nFrom-SVN: r38305", "tree": {"sha": "88301127c9de210ab9b98ed3c914dc678eb99bf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88301127c9de210ab9b98ed3c914dc678eb99bf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3244472df9f0cfbb7eb7385025a718170b521606", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3244472df9f0cfbb7eb7385025a718170b521606", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3244472df9f0cfbb7eb7385025a718170b521606", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3244472df9f0cfbb7eb7385025a718170b521606/comments", "author": null, "committer": null, "parents": [{"sha": "c978ecd3edd812e5177d3f364e22409b96b608bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c978ecd3edd812e5177d3f364e22409b96b608bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c978ecd3edd812e5177d3f364e22409b96b608bc"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "5d5829766f360ebc6c72f63a6804dcdb1bc320d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3244472df9f0cfbb7eb7385025a718170b521606/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3244472df9f0cfbb7eb7385025a718170b521606/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3244472df9f0cfbb7eb7385025a718170b521606", "patch": "@@ -1,3 +1,12 @@\n+2000-12-16  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * tradcpp.c: T_WARNING: New.\n+        (do_warning): New function.\n+        (finclude): Skip past the newline and increase the line number\n+        before calling output_line_command.\n+        (do_line): Skip the new line after output_line_command.  Don't  \n+        pre-decrement the line number.   \n+\n 2000-12-15  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c (cpp_options): Pass -fno-operator-names."}, {"sha": "bb9724915d96c2167bc5bc972043a9c04e773635", "filename": "gcc/tradcpp.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3244472df9f0cfbb7eb7385025a718170b521606/gcc%2Ftradcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3244472df9f0cfbb7eb7385025a718170b521606/gcc%2Ftradcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.c?ref=3244472df9f0cfbb7eb7385025a718170b521606", "patch": "@@ -221,9 +221,10 @@ enum node_type {\n  T_ELSE,\t/* `#else' */\n  T_ELIF,\t/* `#elif' */\n  T_UNDEF,\t/* `#undef' */\n- T_ERROR,\t/* `#error' */\n  T_LINE,\t/* `#line' */\n  T_ENDIF,\t/* `#endif' */\n+ T_ERROR,\t/* `#error' */\n+ T_WARNING,\t/* `#warning' */\n  T_ASSERT,\t/* `#assert' */\n  T_UNASSERT,\t/* `#unassert' */\n  T_SPECLINE,\t/* special symbol `__LINE__' */\n@@ -329,6 +330,7 @@ struct arglist {\n \n static void do_define\tPARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n static void do_error\tPARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n+static void do_warning\tPARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n static void do_line\tPARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n static void do_include\tPARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n static void do_undef\tPARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n@@ -418,9 +420,10 @@ struct directive directive_table[] = {\n   {  4, do_else,    \"else\",    T_ELSE    },\n   {  6, do_ifndef,  \"ifndef\",  T_IFNDEF  },\n   {  5, do_undef,   \"undef\",   T_UNDEF   },\n-  {  5, do_error,   \"error\",   T_ERROR   },\n   {  4, do_line,    \"line\",    T_LINE    },\n   {  4, do_elif,    \"elif\",    T_ELIF    },\n+  {  5, do_error,   \"error\",   T_ERROR   },\n+  {  7, do_warning, \"warning\", T_WARNING },\n   {  6, do_assert,  \"assert\",  T_ASSERT  },\n   {  8, do_unassert,\"unassert\",T_UNASSERT},\n   {  -1, 0, \"\", T_UNUSED},\n@@ -2473,6 +2476,8 @@ finclude (f, fname, op)\n   output_line_command (fp, op, 0, enter_file);\n   rescan (op, 0);\n   indepth--;\n+  instack[indepth].lineno++;\n+  instack[indepth].bufp++;\t/* Skip the new line.  */\n   output_line_command (&instack[indepth], op, 0, leave_file);\n   free (fp->buf);\n   return;\n@@ -2931,19 +2936,12 @@ do_line (buf, limit, op)\n   /* The Newline at the end of this line remains to be processed.\n      To put the next line at the specified line number,\n      we must store a line number now that is one less.  */\n-  new_lineno = atoi ((const char *)bp) - 1;\n+  new_lineno = atoi ((const char *)bp);\n \n   /* skip over the line number.  */\n   while (ISDIGIT (*bp))\n     bp++;\n \n-#if 0 /* #line 10\"foo.c\" is supposed to be allowed.  */\n-  if (*bp && !is_space (*bp)) {\n-    error (\"invalid format #line command\");\n-    return;\n-  }\n-#endif\n-\n   SKIP_WHITE_SPACE (bp);\n \n   if (*bp == '\\\"') {\n@@ -3009,6 +3007,7 @@ do_line (buf, limit, op)\n \n   ip->lineno = new_lineno;\n   output_line_command (ip, op, 0, file_change);\n+  ip->bufp++;\t\t\t/* Skip the new line.  */\n   check_expand (op, ip->length - (ip->bufp - ip->buf));\n }\n \n@@ -3198,6 +3197,16 @@ do_error (buf, limit, op)\n   error (\"#error%.*s\", (int) (limit - buf), buf);\n }\n \n+/* Handle a #warning directive.  */\n+static void\n+do_warning (buf, limit, op)\n+     U_CHAR *buf;\n+     U_CHAR *limit;\n+     FILE_BUF *op ATTRIBUTE_UNUSED;\n+{\n+  warning (\"#warning%.*s\", (int) (limit - buf), buf);\n+}\n+\n /* Handle a #assert directive.  */\n static void\n do_assert (buf, limit, op)"}]}