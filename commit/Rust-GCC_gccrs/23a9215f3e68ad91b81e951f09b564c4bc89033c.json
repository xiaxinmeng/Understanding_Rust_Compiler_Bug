{"sha": "23a9215f3e68ad91b81e951f09b564c4bc89033c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNhOTIxNWYzZTY4YWQ5MWI4MWU5NTFmMDliNTY0YzRiYzg5MDMzYw==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2020-07-02T12:01:18Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-16T07:34:55Z"}, "message": "[Ada] Assorted style cleanups\n\ngcc/ada/\n\n\t* checks.adb, exp_aggr.adb, exp_attr.adb, exp_ch6.adb,\n\tfreeze.adb, sem_aggr.adb, sem_attr.adb, sem_ch13.adb,\n\tsem_ch13.ads, sem_ch6.adb, sem_eval.adb, sem_util.adb: Fix style\n\tand typos.", "tree": {"sha": "07fdc471b4db1f794f4b6197ce5a79414309c3ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07fdc471b4db1f794f4b6197ce5a79414309c3ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23a9215f3e68ad91b81e951f09b564c4bc89033c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23a9215f3e68ad91b81e951f09b564c4bc89033c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23a9215f3e68ad91b81e951f09b564c4bc89033c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23a9215f3e68ad91b81e951f09b564c4bc89033c/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b97cbeed9e4538c22f2c1d2bef8429f494735b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b97cbeed9e4538c22f2c1d2bef8429f494735b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b97cbeed9e4538c22f2c1d2bef8429f494735b2"}], "stats": {"total": 57, "additions": 27, "deletions": 30}, "files": [{"sha": "4eebfd7b7cb05ce965fdb9893ffd1255fe8bac40", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=23a9215f3e68ad91b81e951f09b564c4bc89033c", "patch": "@@ -3590,7 +3590,7 @@ package body Checks is\n \n       elsif Is_Scalar_Type (Target_Type) then\n          declare\n-            Conv_OK  : constant Boolean := Conversion_OK (N);\n+            Conv_OK : constant Boolean := Conversion_OK (N);\n             --  If the Conversion_OK flag on the type conversion is set and no\n             --  floating-point type is involved in the type conversion then\n             --  fixed-point values must be read as integral values."}, {"sha": "ea95cb6554625dfa340df8ea9d1a0f1fe22eafbb", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=23a9215f3e68ad91b81e951f09b564c4bc89033c", "patch": "@@ -6376,7 +6376,7 @@ package body Exp_Aggr is\n \n       Convert_To_Positional (N);\n \n-      --  if the result is no longer an aggregate (e.g. it may be a string\n+      --  If the result is no longer an aggregate (e.g. it may be a string\n       --  literal, or a temporary which has the needed value), then we are\n       --  done, since there is no longer a nested aggregate.\n \n@@ -8165,7 +8165,7 @@ package body Exp_Aggr is\n             Convert_To_Assignments (N, Typ);\n \n          --  In all other cases, build a proper aggregate to be handled by\n-         --  the back-end\n+         --  the back-end.\n \n          else\n             Build_Back_End_Aggregate;"}, {"sha": "827704bdb67627a9fd8548c307ff65a9f1327a9c", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=23a9215f3e68ad91b81e951f09b564c4bc89033c", "patch": "@@ -1806,9 +1806,9 @@ package body Exp_Attr is\n    ----------------------------------\n \n    procedure Expand_N_Attribute_Reference (N : Node_Id) is\n-      Loc   : constant Source_Ptr   := Sloc (N);\n-      Pref  : constant Node_Id      := Prefix (N);\n-      Exprs : constant List_Id      := Expressions (N);\n+      Loc   : constant Source_Ptr := Sloc (N);\n+      Pref  : constant Node_Id    := Prefix (N);\n+      Exprs : constant List_Id    := Expressions (N);\n \n       function Get_Integer_Type (Typ : Entity_Id) return Entity_Id;\n       --  Return a small integer type appropriate for the enumeration type\n@@ -1950,10 +1950,10 @@ package body Exp_Attr is\n          Analyze (N);\n       end Rewrite_Attribute_Proc_Call;\n \n-      Typ   : constant Entity_Id    := Etype (N);\n-      Btyp  : constant Entity_Id    := Base_Type (Typ);\n-      Ptyp  : constant Entity_Id    := Etype (Pref);\n-      Id    : constant Attribute_Id := Get_Attribute_Id (Attribute_Name (N));\n+      Typ  : constant Entity_Id    := Etype (N);\n+      Btyp : constant Entity_Id    := Base_Type (Typ);\n+      Ptyp : constant Entity_Id    := Etype (Pref);\n+      Id   : constant Attribute_Id := Get_Attribute_Id (Attribute_Name (N));\n \n    --  Start of processing for Expand_N_Attribute_Reference\n "}, {"sha": "0ad59e8e0106b2d2e9593fd235c12c49730c3586", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=23a9215f3e68ad91b81e951f09b564c4bc89033c", "patch": "@@ -2682,22 +2682,22 @@ package body Exp_Ch6 is\n                                 | N_Function_Call\n                                 | N_Procedure_Call_Statement);\n \n-      --  Check that this is not the call in the body of the wrapper.\n+      --  Check that this is not the call in the body of the wrapper\n \n       if Must_Rewrite_Indirect_Call\n         and then (not Is_Overloadable (Current_Scope)\n              or else not Is_Access_Subprogram_Wrapper (Current_Scope))\n       then\n          declare\n-            Loc : constant Source_Ptr := Sloc (N);\n-            Wrapper : constant Entity_Id :=\n+            Loc      : constant Source_Ptr := Sloc (N);\n+            Wrapper  : constant Entity_Id :=\n               Access_Subprogram_Wrapper (Etype (Name (N)));\n             Ptr      : constant Node_Id   := Prefix (Name (N));\n             Ptr_Type : constant Entity_Id := Etype (Ptr);\n             Typ      : constant Entity_Id := Etype (N);\n \n             New_N    : Node_Id;\n-            Parms    : List_Id   := Parameter_Associations (N);\n+            Parms    : List_Id := Parameter_Associations (N);\n             Ptr_Act  : Node_Id;\n \n          begin\n@@ -2735,7 +2735,7 @@ package body Exp_Ch6 is\n \n             if Nkind (N) = N_Procedure_Call_Statement then\n                New_N := Make_Procedure_Call_Statement (Loc,\n-                  Name  => New_Occurrence_Of (Wrapper, Loc),\n+                  Name => New_Occurrence_Of (Wrapper, Loc),\n                   Parameter_Associations => Parms);\n             else\n                New_N := Make_Function_Call (Loc,\n@@ -2927,7 +2927,7 @@ package body Exp_Ch6 is\n             if Has_Invariants (Curr_Typ)\n               and then Present (Invariant_Procedure (Curr_Typ))\n             then\n-               --  Verify the invariate of the current type. Generate:\n+               --  Verify the invariant of the current type. Generate:\n \n                --    <Curr_Typ>Invariant (Curr_Typ (Arg));\n \n@@ -3405,8 +3405,7 @@ package body Exp_Ch6 is\n          end;\n       end if;\n \n-      --  if this is a call to a predicate function, try to constant\n-      --  fold it.\n+      --  If this is a call to a predicate function, try to constant fold it\n \n       if Nkind (Call_Node) = N_Function_Call\n         and then Is_Entity_Name (Name (Call_Node))\n@@ -4516,7 +4515,7 @@ package body Exp_Ch6 is\n       end if;\n \n       --  Ada 2005 (AI-251): If some formal is a class-wide interface, expand\n-      --  it to point to the correct secondary virtual table\n+      --  it to point to the correct secondary virtual table.\n \n       if Nkind (Call_Node) in N_Subprogram_Call\n         and then CW_Interface_Formals_Present\n@@ -4932,7 +4931,7 @@ package body Exp_Ch6 is\n          --  A call to a null procedure is replaced by a null statement, but we\n          --  are not allowed to ignore possible side effects of the call, so we\n          --  make sure that actuals are evaluated.\n-         --  We also suppress this optimization for GNATCoverage.\n+         --  We also suppress this optimization for GNATcoverage.\n \n          elsif Is_Null_Procedure (Subp)\n            and then not Opt.Suppress_Control_Flow_Optimizations"}, {"sha": "67cda8f768a7b2c864e0db0c3efc75ed959c448b", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=23a9215f3e68ad91b81e951f09b564c4bc89033c", "patch": "@@ -636,7 +636,7 @@ package body Freeze is\n \n          --  If Rep_Clauses are to be ignored, remove address clause from\n          --  list attached to entity, because it may be illegal for gigi,\n-         --  for example by breaking order of elaboration..\n+         --  for example by breaking order of elaboration.\n \n          if Ignore_Rep_Clauses then\n             declare"}, {"sha": "e5b18d2e5e749dbb5bcd1d0dbccc82761ceb6b43", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=23a9215f3e68ad91b81e951f09b564c4bc89033c", "patch": "@@ -3967,7 +3967,7 @@ package body Sem_Aggr is\n \n                         --  Copy the expression so that it is resolved\n                         --  independently for each component, This is needed\n-                        --  for accessibility checks on compoents of anonymous\n+                        --  for accessibility checks on components of anonymous\n                         --  access types, even in compile_only mode.\n \n                         if not Inside_A_Generic then"}, {"sha": "5e5c3df80bfd8137c41f25aca69c9f3539242dd6", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=23a9215f3e68ad91b81e951f09b564c4bc89033c", "patch": "@@ -6871,7 +6871,7 @@ package body Sem_Attr is\n             end if;\n \n             --  Verify the consistency of types when the current component is\n-            --  part of a miltiple component update.\n+            --  part of a multiple component update.\n \n             --    Comp_1 | ... | Comp_N => <value>\n \n@@ -7315,7 +7315,7 @@ package body Sem_Attr is\n    --------------------\n \n    procedure Eval_Attribute (N : Node_Id) is\n-      Loc   : constant Source_Ptr   := Sloc (N);\n+      Loc : constant Source_Ptr := Sloc (N);\n \n       C_Type : constant Entity_Id := Etype (N);\n       --  The type imposed by the context"}, {"sha": "ce058ddc90a439679db56491db54165135e97e9b", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=23a9215f3e68ad91b81e951f09b564c4bc89033c", "patch": "@@ -10030,7 +10030,7 @@ package body Sem_Ch13 is\n                end if;\n             end;\n \n-            --  within a generic unit, prevent a double analysis of the body\n+            --  Within a generic unit, prevent a double analysis of the body\n             --  which will not be marked analyzed yet. This will happen when\n             --  the freeze node is created during the preanalysis of an\n             --  expression function."}, {"sha": "7d9f38d87e9ef13e72484833972b764946384b76", "filename": "gcc/ada/sem_ch13.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fsem_ch13.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fsem_ch13.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.ads?ref=23a9215f3e68ad91b81e951f09b564c4bc89033c", "patch": "@@ -181,7 +181,7 @@ package Sem_Ch13 is\n    --  is the pragma or representation clause itself, used for placing error\n    --  messages if the item is too late.\n    --\n-   --  Fonly is a flag that causes only the freezing rule (para 9) to be\n+   --  FOnly is a flag that causes only the freezing rule (para 9) to be\n    --  applied, and the tests of para 10 are skipped. This is appropriate for\n    --  both subtype related attributes (Alignment and Size) and for stream\n    --  attributes, which, although certainly not subtype related attributes,"}, {"sha": "84474117f0980332f7c3f1fb6b54626d1fe547d1", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=23a9215f3e68ad91b81e951f09b564c4bc89033c", "patch": "@@ -306,8 +306,6 @@ package body Sem_Ch6 is\n       --  If the expression is a completion, Prev is the entity whose\n       --  declaration is completed. Def_Id is needed to analyze the spec.\n \n-   --  Start of processing for Analyze_Expression_Function\n-\n    begin\n       --  This is one of the occasions on which we transform the tree during\n       --  semantic analysis. If this is a completion, transform the expression"}, {"sha": "12f2822f06b3224cc56e9838aac1f9d9b22c3120", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=23a9215f3e68ad91b81e951f09b564c4bc89033c", "patch": "@@ -3231,7 +3231,7 @@ package body Sem_Eval is\n    -- Eval_Op_Not --\n    -----------------\n \n-   --  The not operation is a static functions, so the result is potentially\n+   --  The not operation is a static function, so the result is potentially\n    --  static if the operand is potentially static (RM 4.9(7), 4.9(20)).\n \n    procedure Eval_Op_Not (N : Node_Id) is"}, {"sha": "5890b0eee1c9d47f5942ee53c290259eca7ca869", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23a9215f3e68ad91b81e951f09b564c4bc89033c/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=23a9215f3e68ad91b81e951f09b564c4bc89033c", "patch": "@@ -19256,7 +19256,7 @@ package body Sem_Util is\n \n    function Is_True (U : Uint) return Boolean is\n    begin\n-      return (U /= 0);\n+      return U /= 0;\n    end Is_True;\n \n    --------------------------------------"}]}