{"sha": "0e05c303e5c3c7882d5e36a4d5b66f0563ae6478", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUwNWMzMDNlNWMzYzc4ODJkNWUzNmE0ZDViNjZmMDU2M2FlNjQ3OA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2014-09-16T21:40:28Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2014-09-16T21:40:28Z"}, "message": "PR libfortran/62768 Handle filenames with embedded null characters.\n\ntestsuite ChangeLog:\n\n2014-09-17  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR libfortran/62768\n\t* gfortran.dg/filename_null.f90: New test.\n\nlibgfortran ChangeLog:\n\n2014-09-17  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR libfortran/62768\n\t* io/io.h (gfc_unit): Store C string for the filename.\n\t* io/close.c (st_close): Use gfc_unit.filename.\n\t* io/inquire.c (inquire_via_unit): Likewise.\n\t* io/open.c (new_unit): Likewise.\n\t(already_open): Likewise, unlink file before freeing filename.\n\t* io/unit.c (init_units): Likewise.\n\t(close_unit_1): Likewise.\n\t(filename_from_unit): Likewise.\n\t* io/unix.c (compare_file_filename): Likewise.\n\t(find_file0): Likewise.\n\t(delete_file): Likewise.\n\nFrom-SVN: r215307", "tree": {"sha": "34b3e91356fc23c2feb76d92e78fad28bd83a126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34b3e91356fc23c2feb76d92e78fad28bd83a126"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478/comments", "author": null, "committer": null, "parents": [{"sha": "7425e424b5222704558591fc6cf26eaa57fb81de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7425e424b5222704558591fc6cf26eaa57fb81de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7425e424b5222704558591fc6cf26eaa57fb81de"}], "stats": {"total": 107, "additions": 61, "deletions": 46}, "files": [{"sha": "507022cdfea7654ee67b11d563ca0f9c82e4ea2a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e05c303e5c3c7882d5e36a4d5b66f0563ae6478", "patch": "@@ -1,3 +1,8 @@\n+2014-09-17  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/62768\n+\t* gfortran.dg/filename_null.f90: New test.\n+\n 2014-09-16  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.dg/pg-override.c: Fix a typo."}, {"sha": "f24d2438dafb55b0407c18a89dc5f1969198167e", "filename": "gcc/testsuite/gfortran.dg/filename_null.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478/gcc%2Ftestsuite%2Fgfortran.dg%2Ffilename_null.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478/gcc%2Ftestsuite%2Fgfortran.dg%2Ffilename_null.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffilename_null.f90?ref=0e05c303e5c3c7882d5e36a4d5b66f0563ae6478", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do run }\n+! PR 62768\n+! Filenames with embedded NULL characters are truncated, make sure\n+! inquire reports the correct truncated name.\n+program filename_null\n+  implicit none\n+  character(len=15), parameter :: s = \"hello\" // achar(0) // \"world\", &\n+       s2 = \"hello\"\n+  character(len=15) :: r\n+  logical :: l\n+  open(10, file=s)\n+  inquire(unit=10, name=r)\n+  if (r /= s2) call abort()\n+  inquire(file=s2, exist=l)\n+  if (.not. l) call abort()\n+  close(10, status=\"delete\")\n+end program filename_null"}, {"sha": "fde3965e5eb064c9b84405ade9bc3d80d8341678", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=0e05c303e5c3c7882d5e36a4d5b66f0563ae6478", "patch": "@@ -1,3 +1,18 @@\n+2014-09-17  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/62768\n+\t* io/io.h (gfc_unit): Store C string for the filename.\n+\t* io/close.c (st_close): Use gfc_unit.filename.\n+\t* io/inquire.c (inquire_via_unit): Likewise.\n+\t* io/open.c (new_unit): Likewise.\n+\t(already_open): Likewise, unlink file before freeing filename.\n+\t* io/unit.c (init_units): Likewise.\n+\t(close_unit_1): Likewise.\n+\t(filename_from_unit): Likewise.\n+\t* io/unix.c (compare_file_filename): Likewise.\n+\t(find_file0): Likewise.\n+\t(delete_file): Likewise.\n+\n 2014-09-10  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* io/transfer.c (read_block_form): Fix pad status check (found by"}, {"sha": "d0d49f697c4f5bbb9945001b77c1520b7563c157", "filename": "libgfortran/io/close.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478/libgfortran%2Fio%2Fclose.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478/libgfortran%2Fio%2Fclose.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fclose.c?ref=0e05c303e5c3c7882d5e36a4d5b66f0563ae6478", "patch": "@@ -72,7 +72,7 @@ st_close (st_parameter_close *clp)\n \t    generate_error (&clp->common, LIBERROR_BAD_OPTION,\n \t\t\t    \"Can't KEEP a scratch file on CLOSE\");\n #if !HAVE_UNLINK_OPEN_FILE\n-\t  path = fc_strdup (u->file, u->file_len);\n+\t  path = strdup (u->filename);\n #endif\n \t}\n       else\n@@ -82,7 +82,7 @@ st_close (st_parameter_close *clp)\n #if HAVE_UNLINK_OPEN_FILE\n \t      delete_file (u);\n #else\n-\t      path = fc_strdup (u->file, u->file_len);\n+\t      path = strdup (u->filename);\n #endif\n             }\n \t}"}, {"sha": "4d03161cbf89fb1b87ec20b813816337d7fed288", "filename": "libgfortran/io/inquire.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478/libgfortran%2Fio%2Finquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478/libgfortran%2Fio%2Finquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Finquire.c?ref=0e05c303e5c3c7882d5e36a4d5b66f0563ae6478", "patch": "@@ -80,10 +80,10 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n \t\tmemset (&iqp->name[tmplen], ' ', iqp->name_len - tmplen);\n \t    }\n \t  else /* If ttyname does not work, go with the default.  */\n-\t    fstrcpy (iqp->name, iqp->name_len, u->file, u->file_len);\n+\t    cf_strcpy (iqp->name, iqp->name_len, u->filename);\n \t}\n       else\n-\tfstrcpy (iqp->name, iqp->name_len, u->file, u->file_len);\n+\tcf_strcpy (iqp->name, iqp->name_len, u->filename);\n #elif defined __MINGW32__\n       if (u->unit_number == options.stdin_unit)\n \tfstrcpy (iqp->name, iqp->name_len, \"CONIN$\", sizeof(\"CONIN$\"));"}, {"sha": "1e0d092976de3db723368fd51f556f20e86624f1", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=0e05c303e5c3c7882d5e36a4d5b66f0563ae6478", "patch": "@@ -567,8 +567,9 @@ typedef struct gfc_unit\n   array_loop_spec *ls;\n   int rank;\n \n-  int file_len;\n-  char *file;\n+  /* Name of the file at the time OPEN was executed, as a\n+     null-terminated C string.  */\n+  char *filename;\n \n   /* The format hash table.  */\n   struct format_hash_entry format_hash_table[FORMAT_HASH_SIZE];"}, {"sha": "67fa9ac11aa79319aa44f9b1192088493515156b", "filename": "libgfortran/io/open.c", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478/libgfortran%2Fio%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478/libgfortran%2Fio%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fopen.c?ref=0e05c303e5c3c7882d5e36a4d5b66f0563ae6478", "patch": "@@ -541,7 +541,6 @@ new_unit (st_parameter_open *opp, gfc_unit *u, unit_flags * flags)\n \n   /* Create the unit structure.  */\n \n-  u->file = xmalloc (opp->file_len);\n   if (u->unit_number != opp->common.unit)\n     internal_error (&opp->common, \"Unit number changed\");\n   u->s = s;\n@@ -618,8 +617,7 @@ new_unit (st_parameter_open *opp, gfc_unit *u, unit_flags * flags)\n       u->strm_pos = stell (u->s) + 1;\n     }\n \n-  memmove (u->file, opp->file, opp->file_len);\n-  u->file_len = opp->file_len;\n+  u->filename = fc_strdup (opp->file, opp->file_len);\n \n   /* Curiously, the standard requires that the\n      position specifier be ignored for new files so a newly connected\n@@ -685,20 +683,13 @@ already_open (st_parameter_open *opp, gfc_unit * u, unit_flags * flags)\n \t}\n \n       u->s = NULL;\n-      free (u->file);\n-      u->file = NULL;\n-      u->file_len = 0;\n-\n+ \n #if !HAVE_UNLINK_OPEN_FILE\n-      char *path = NULL;\n-      if (u->file && u->flags.status == STATUS_SCRATCH)\n-\tpath = fc_strdup (u->file, u->file_len);\n-      if (path != NULL)\n-\t{\n-\t  unlink (path);\n-\t  free (path);\n-\t}\n+      if (u->filename && u->flags.status == STATUS_SCRATCH)\n+\tunlink (u->filename);\n #endif\n+     free (u->filename);\n+     u->filename = NULL;\n \n       u = new_unit (opp, u, flags);\n       if (u != NULL)"}, {"sha": "5cc51b56766fe58c6fe3eae642a189ae589acabe", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=0e05c303e5c3c7882d5e36a4d5b66f0563ae6478", "patch": "@@ -587,9 +587,7 @@ init_units (void)\n       u->recl = options.default_recl;\n       u->endfile = NO_ENDFILE;\n \n-      u->file_len = strlen (stdin_name);\n-      u->file = xmalloc (u->file_len);\n-      memmove (u->file, stdin_name, u->file_len);\n+      u->filename = strdup (stdin_name);\n \n       fbuf_init (u, 0);\n     \n@@ -618,9 +616,7 @@ init_units (void)\n       u->recl = options.default_recl;\n       u->endfile = AT_ENDFILE;\n     \n-      u->file_len = strlen (stdout_name);\n-      u->file = xmalloc (u->file_len);\n-      memmove (u->file, stdout_name, u->file_len);\n+      u->filename = strdup (stdout_name);\n       \n       fbuf_init (u, 0);\n \n@@ -648,9 +644,7 @@ init_units (void)\n       u->recl = options.default_recl;\n       u->endfile = AT_ENDFILE;\n \n-      u->file_len = strlen (stderr_name);\n-      u->file = xmalloc (u->file_len);\n-      memmove (u->file, stderr_name, u->file_len);\n+      u->filename = strdup (stderr_name);\n       \n       fbuf_init (u, 256);  /* 256 bytes should be enough, probably not doing\n                               any kind of exotic formatting to stderr.  */\n@@ -689,9 +683,8 @@ close_unit_1 (gfc_unit *u, int locked)\n \n   delete_unit (u);\n \n-  free (u->file);\n-  u->file = NULL;\n-  u->file_len = 0;\n+  free (u->filename);\n+  u->filename = NULL;\n \n   free_format_hash_table (u);  \n   fbuf_destroy (u);\n@@ -804,7 +797,7 @@ filename_from_unit (int n)\n \n   /* Get the filename.  */\n   if (u != NULL)\n-    return fc_strdup (u->file, u->file_len);\n+    return strdup (u->filename);\n   else\n     return (char *) NULL;\n }"}, {"sha": "d30c6e5e33a64d1d7735218d6066e1e3ff9d145a", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e05c303e5c3c7882d5e36a4d5b66f0563ae6478/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=0e05c303e5c3c7882d5e36a4d5b66f0563ae6478", "patch": "@@ -1525,11 +1525,7 @@ compare_file_filename (gfc_unit *u, const char *name, int len)\n       goto done;\n     }\n # endif\n-\n-  if (len != u->file_len)\n-    ret = 0;\n-  else\n-    ret = (memcmp(path, u->file, len) == 0);\n+  ret = (strcmp(path, u->filename) == 0);\n #endif\n  done:\n   free (path);\n@@ -1541,8 +1537,8 @@ compare_file_filename (gfc_unit *u, const char *name, int len)\n # define FIND_FILE0_DECL struct stat *st\n # define FIND_FILE0_ARGS st\n #else\n-# define FIND_FILE0_DECL uint64_t id, const char *file, gfc_charlen_type file_len\n-# define FIND_FILE0_ARGS id, file, file_len\n+# define FIND_FILE0_DECL uint64_t id, const char *path\n+# define FIND_FILE0_ARGS id, path\n #endif\n \n /* find_file0()-- Recursive work function for find_file() */\n@@ -1574,7 +1570,7 @@ find_file0 (gfc_unit *u, FIND_FILE0_DECL)\n     }\n   else\n # endif\n-    if (compare_string (u->file_len, u->file, file_len, file) == 0)\n+    if (strcmp (u->filename, path) == 0)\n       return u;\n #endif\n \n@@ -1718,10 +1714,7 @@ flush_all_units (void)\n int\n delete_file (gfc_unit * u)\n {\n-  char *path = fc_strdup (u->file, u->file_len);\n-  int err = unlink (path);\n-  free (path);\n-  return err;\n+  return unlink (u->filename);\n }\n \n "}]}