{"sha": "c3217dac82e78ecc5e3e428e8c14bab9047e2105", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMyMTdkYWM4MmU3OGVjYzVlM2U0MjhlOGMxNGJhYjkwNDdlMjEwNQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-12-09T17:20:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-12-09T17:20:41Z"}, "message": "sem_prag.adb: Processing for new pragma Complete_Representation (Analyze_Pragma...\n\n2005-12-05  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb: Processing for new pragma Complete_Representation\n\t(Analyze_Pragma, case Debug): Implement two argument form.\n\n\t* par-prag.adb: Entry for new pragma Complete_Representation\n\t(Prag, case Debug): Recognize two argument form of pragma Debug\n\tNew interface for Set_Style_Check_Options.\n\n\t* sem_ch13.adb: Implement new pragma Complete_Representation.\n\n\t* snames.adb, snames.ads, snames.h: Entry for new pragma\n\tComplete_Representation.\n\nFrom-SVN: r108299", "tree": {"sha": "21428c113344d95601e83f6467ff99bcce3dbd88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21428c113344d95601e83f6467ff99bcce3dbd88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3217dac82e78ecc5e3e428e8c14bab9047e2105", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3217dac82e78ecc5e3e428e8c14bab9047e2105", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3217dac82e78ecc5e3e428e8c14bab9047e2105", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3217dac82e78ecc5e3e428e8c14bab9047e2105/comments", "author": null, "committer": null, "parents": [{"sha": "6677e9d9d3ebf59127fa58d9935613ad9a46a2b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6677e9d9d3ebf59127fa58d9935613ad9a46a2b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6677e9d9d3ebf59127fa58d9935613ad9a46a2b8"}], "stats": {"total": 1356, "additions": 717, "deletions": 639}, "files": [{"sha": "7489d9decc0e1768fdfb1812199248d5616938d3", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3217dac82e78ecc5e3e428e8c14bab9047e2105/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3217dac82e78ecc5e3e428e8c14bab9047e2105/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=c3217dac82e78ecc5e3e428e8c14bab9047e2105", "patch": "@@ -329,27 +329,34 @@ begin\n       --  semantically we treat it as a procedure call (which has exactly the\n       --  same syntactic form, so that's why we can get away with this!)\n \n-      when Pragma_Debug =>\n-         Check_Arg_Count (1);\n-         Check_No_Identifier (Arg1);\n+      when Pragma_Debug => Debug : declare\n+         Expr : Node_Id;\n \n-         declare\n-            Expr : constant Node_Id := New_Copy (Expression (Arg1));\n+      begin\n+         if Arg_Count = 2 then\n+            Check_No_Identifier (Arg1);\n+            Check_No_Identifier (Arg2);\n+            Expr := New_Copy (Expression (Arg2));\n \n-         begin\n-            if Nkind (Expr) /= N_Indexed_Component\n-              and then Nkind (Expr) /= N_Function_Call\n-              and then Nkind (Expr) /= N_Identifier\n-              and then Nkind (Expr) /= N_Selected_Component\n-            then\n-               Error_Msg\n-                 (\"argument of pragma% is not procedure call\", Sloc (Expr));\n-               raise Error_Resync;\n-            else\n-               Set_Debug_Statement\n-                 (Pragma_Node, P_Statement_Name (Expr));\n-            end if;\n-         end;\n+         else\n+            Check_Arg_Count (1);\n+            Check_No_Identifier (Arg1);\n+            Expr := New_Copy (Expression (Arg1));\n+         end if;\n+\n+         if Nkind (Expr) /= N_Indexed_Component\n+           and then Nkind (Expr) /= N_Function_Call\n+           and then Nkind (Expr) /= N_Identifier\n+           and then Nkind (Expr) /= N_Selected_Component\n+         then\n+            Error_Msg\n+              (\"argument of pragma% is not procedure call\", Sloc (Expr));\n+            raise Error_Resync;\n+         else\n+            Set_Debug_Statement\n+              (Pragma_Node, P_Statement_Name (Expr));\n+         end if;\n+      end Debug;\n \n       -------------------------------\n       -- Extensions_Allowed (GNAT) --\n@@ -929,7 +936,7 @@ begin\n \n                   if not OK then\n                      Error_Msg\n-                       (\"invalid style check option\",\n+                       (Style_Msg_Buf (1 .. Style_Msg_Len),\n                         Sloc (Expression (Arg1)) + Source_Ptr (Ptr));\n                      raise Error_Resync;\n                   end if;\n@@ -1013,6 +1020,7 @@ begin\n            Pragma_C_Pass_By_Copy               |\n            Pragma_Comment                      |\n            Pragma_Common_Object                |\n+           Pragma_Complete_Representation      |\n            Pragma_Complex_Representation       |\n            Pragma_Component_Alignment          |\n            Pragma_Controlled                   |"}, {"sha": "a1e0dffe4d42b9038a4a3261475093b9d9a832e4", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3217dac82e78ecc5e3e428e8c14bab9047e2105/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3217dac82e78ecc5e3e428e8c14bab9047e2105/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=c3217dac82e78ecc5e3e428e8c14bab9047e2105", "patch": "@@ -1731,6 +1731,9 @@ package body Sem_Ch13 is\n       Ccount : Natural := 0;\n       --  Number of component clauses in record rep clause\n \n+      CR_Pragma : Node_Id := Empty;\n+      --  Points to N_Pragma node if Complete_Representation pragma present\n+\n    begin\n       Find_Type (Ident);\n       Rectype := Entity (Ident);\n@@ -1893,11 +1896,17 @@ package body Sem_Ch13 is\n \n       while Present (CC) loop\n \n-         --  If pragma, just analyze it\n+         --  Pragma\n \n          if Nkind (CC) = N_Pragma then\n             Analyze (CC);\n \n+            --  The only pragma of interest is Complete_Representation\n+\n+            if Chars (CC) = Name_Complete_Representation then\n+               CR_Pragma := CC;\n+            end if;\n+\n          --  Processing for real component clause\n \n          else\n@@ -2271,9 +2280,7 @@ package body Sem_Ch13 is\n             if Ekind (Comp) = E_Component\n               or else Ekind (Comp) = E_Discriminant\n             then\n-               if No (Component_Clause (Comp)) then\n-                  return;\n-               end if;\n+               exit when No (Component_Clause (Comp));\n             end if;\n \n             Next_Entity (Comp);\n@@ -2282,7 +2289,28 @@ package body Sem_Ch13 is\n          --  If we fall out of loop, all components have component clauses\n          --  and so we can set the size to the maximum value.\n \n-         Set_RM_Size (Rectype, Hbit + 1);\n+         if No (Comp) then\n+            Set_RM_Size (Rectype, Hbit + 1);\n+         end if;\n+      end if;\n+\n+      --  Check missing components if Complete_Representation pragma appeared\n+\n+      if Present (CR_Pragma) then\n+         Comp := First_Entity (Rectype);\n+         while Present (Comp) loop\n+            if Ekind (Comp) = E_Component\n+                 or else\n+               Ekind (Comp) = E_Discriminant\n+            then\n+               if No (Component_Clause (Comp)) then\n+                  Error_Msg_NE\n+                    (\"missing component clause for &\", CR_Pragma, Comp);\n+               end if;\n+            end if;\n+\n+            Next_Entity (Comp);\n+         end loop;\n       end if;\n    end Analyze_Record_Representation_Clause;\n \n@@ -2571,7 +2599,6 @@ package body Sem_Ch13 is\n                Check_Expr_Constants (Prefix (Nod));\n \n             when N_Attribute_Reference =>\n-\n                if Attribute_Name (Nod) = Name_Address\n                    or else\n                   Attribute_Name (Nod) = Name_Access"}, {"sha": "1610c2848a7a10f68f563b5f27b49d3732b8aa67", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 50, "deletions": 11, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3217dac82e78ecc5e3e428e8c14bab9047e2105/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3217dac82e78ecc5e3e428e8c14bab9047e2105/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=c3217dac82e78ecc5e3e428e8c14bab9047e2105", "patch": "@@ -4967,6 +4967,21 @@ package body Sem_Prag is\n             end if;\n          end Compile_Time_Warning;\n \n+         -----------------------------\n+         -- Complete_Representation --\n+         -----------------------------\n+\n+         --  pragma Complete_Representation;\n+\n+         when Pragma_Complete_Representation =>\n+            GNAT_Pragma;\n+            Check_Arg_Count (0);\n+\n+            if Nkind (Parent (N)) /= N_Record_Representation_Clause then\n+               Error_Pragma\n+                 (\"pragma & must appear within record representation clause\");\n+            end if;\n+\n          ----------------------------\n          -- Complex_Representation --\n          ----------------------------\n@@ -5573,18 +5588,39 @@ package body Sem_Prag is\n          -- Debug --\n          -----------\n \n-         --  pragma Debug (PROCEDURE_CALL_STATEMENT);\n+         --  pragma Debug ([boolean_EXPRESSION,] PROCEDURE_CALL_STATEMENT);\n+\n+         when Pragma_Debug => Debug : declare\n+               Cond : Node_Id;\n \n-         when Pragma_Debug => Debug : begin\n+         begin\n             GNAT_Pragma;\n \n-            --  Rewrite into a conditional with a static condition\n+            Cond :=\n+              New_Occurrence_Of\n+                (Boolean_Literals (Debug_Pragmas_Enabled and Expander_Active),\n+                 Loc);\n+\n+            if Arg_Count = 2 then\n+               Cond :=\n+                 Make_And_Then (Loc,\n+                   Left_Opnd   => Relocate_Node (Cond),\n+                   Right_Opnd  => Expression (Arg1));\n+            end if;\n+\n+            --  Rewrite into a conditional with an appropriate condition. We\n+            --  wrap the procedure call in a block so that overhead from e.g.\n+            --  use of the secondary stack does not generate execution overhead\n+            --  for suppressed conditions.\n \n             Rewrite (N, Make_Implicit_If_Statement (N,\n-              Condition => New_Occurrence_Of (Boolean_Literals (\n-                Debug_Pragmas_Enabled and Expander_Active), Loc),\n-              Then_Statements => New_List (\n-                Relocate_Node (Debug_Statement (N)))));\n+              Condition => Cond,\n+                 Then_Statements => New_List (\n+                   Make_Block_Statement (Loc,\n+                     Handled_Statement_Sequence =>\n+                       Make_Handled_Sequence_Of_Statements (Loc,\n+                         Statements => New_List (\n+                           Relocate_Node (Debug_Statement (N))))))));\n             Analyze (N);\n          end Debug;\n \n@@ -9587,17 +9623,20 @@ package body Sem_Prag is\n                         exit when not In_Character_Range (C);\n                         Options (J) := Get_Character (C);\n \n+                        --  If at end of string, set options. As per discussion\n+                        --  above, no need to check for errors, since we issued\n+                        --  them in the parser.\n+\n                         if J = Slen then\n                            Set_Style_Check_Options (Options);\n                            exit;\n-                        else\n-                           J := J + 1;\n                         end if;\n+\n+                        J := J + 1;\n                      end loop;\n                   end;\n \n                elsif Nkind (A) = N_Identifier then\n-\n                   if Chars (A) = Name_All_Checks then\n                      Set_Default_Style_Check_Options;\n \n@@ -9606,7 +9645,6 @@ package body Sem_Prag is\n \n                   elsif Chars (A) = Name_Off then\n                      Style_Check := False;\n-\n                   end if;\n                end if;\n             end if;\n@@ -10664,6 +10702,7 @@ package body Sem_Prag is\n       Pragma_Comment                      =>  0,\n       Pragma_Common_Object                => -1,\n       Pragma_Compile_Time_Warning         => -1,\n+      Pragma_Complete_Representation      =>  0,\n       Pragma_Complex_Representation       =>  0,\n       Pragma_Component_Alignment          => -1,\n       Pragma_Controlled                   =>  0,"}, {"sha": "cd7ae14248f746dd9c647cf3d13e751bfd48b584", "filename": "gcc/ada/snames.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3217dac82e78ecc5e3e428e8c14bab9047e2105/gcc%2Fada%2Fsnames.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3217dac82e78ecc5e3e428e8c14bab9047e2105/gcc%2Fada%2Fsnames.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb?ref=c3217dac82e78ecc5e3e428e8c14bab9047e2105", "patch": "@@ -229,6 +229,7 @@ package body Snames is\n      \"attach_handler#\" &\n      \"comment#\" &\n      \"common_object#\" &\n+     \"complete_representation#\" &\n      \"complex_representation#\" &\n      \"controlled#\" &\n      \"convention#\" &"}, {"sha": "972250202448940d415d54c944cb217a1bb8b59e", "filename": "gcc/ada/snames.ads", "status": "modified", "additions": 513, "deletions": 511, "changes": 1024, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3217dac82e78ecc5e3e428e8c14bab9047e2105/gcc%2Fada%2Fsnames.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3217dac82e78ecc5e3e428e8c14bab9047e2105/gcc%2Fada%2Fsnames.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads?ref=c3217dac82e78ecc5e3e428e8c14bab9047e2105", "patch": "@@ -402,73 +402,74 @@ package Snames is\n    Name_Attach_Handler                 : constant Name_Id := N + 169;\n    Name_Comment                        : constant Name_Id := N + 170; -- GNAT\n    Name_Common_Object                  : constant Name_Id := N + 171; -- GNAT\n-   Name_Complex_Representation         : constant Name_Id := N + 172; -- GNAT\n-   Name_Controlled                     : constant Name_Id := N + 173;\n-   Name_Convention                     : constant Name_Id := N + 174;\n-   Name_CPP_Class                      : constant Name_Id := N + 175; -- GNAT\n-   Name_CPP_Constructor                : constant Name_Id := N + 176; -- GNAT\n-   Name_CPP_Virtual                    : constant Name_Id := N + 177; -- GNAT\n-   Name_CPP_Vtable                     : constant Name_Id := N + 178; -- GNAT\n-   Name_Debug                          : constant Name_Id := N + 179; -- GNAT\n-   Name_Elaborate                      : constant Name_Id := N + 180; -- Ada 83\n-   Name_Elaborate_All                  : constant Name_Id := N + 181;\n-   Name_Elaborate_Body                 : constant Name_Id := N + 182;\n-   Name_Export                         : constant Name_Id := N + 183;\n-   Name_Export_Exception               : constant Name_Id := N + 184; -- VMS\n-   Name_Export_Function                : constant Name_Id := N + 185; -- GNAT\n-   Name_Export_Object                  : constant Name_Id := N + 186; -- GNAT\n-   Name_Export_Procedure               : constant Name_Id := N + 187; -- GNAT\n-   Name_Export_Value                   : constant Name_Id := N + 188; -- GNAT\n-   Name_Export_Valued_Procedure        : constant Name_Id := N + 189; -- GNAT\n-   Name_External                       : constant Name_Id := N + 190; -- GNAT\n-   Name_Finalize_Storage_Only          : constant Name_Id := N + 191; -- GNAT\n-   Name_Ident                          : constant Name_Id := N + 192; -- VMS\n-   Name_Import                         : constant Name_Id := N + 193;\n-   Name_Import_Exception               : constant Name_Id := N + 194; -- VMS\n-   Name_Import_Function                : constant Name_Id := N + 195; -- GNAT\n-   Name_Import_Object                  : constant Name_Id := N + 196; -- GNAT\n-   Name_Import_Procedure               : constant Name_Id := N + 197; -- GNAT\n-   Name_Import_Valued_Procedure        : constant Name_Id := N + 198; -- GNAT\n-   Name_Inline                         : constant Name_Id := N + 199;\n-   Name_Inline_Always                  : constant Name_Id := N + 200; -- GNAT\n-   Name_Inline_Generic                 : constant Name_Id := N + 201; -- GNAT\n-   Name_Inspection_Point               : constant Name_Id := N + 202;\n-   Name_Interface_Name                 : constant Name_Id := N + 203; -- GNAT\n-   Name_Interrupt_Handler              : constant Name_Id := N + 204;\n-   Name_Interrupt_Priority             : constant Name_Id := N + 205;\n-   Name_Java_Constructor               : constant Name_Id := N + 206; -- GNAT\n-   Name_Java_Interface                 : constant Name_Id := N + 207; -- GNAT\n-   Name_Keep_Names                     : constant Name_Id := N + 208; -- GNAT\n-   Name_Link_With                      : constant Name_Id := N + 209; -- GNAT\n-   Name_Linker_Alias                   : constant Name_Id := N + 210; -- GNAT\n-   Name_Linker_Constructor             : constant Name_Id := N + 211; -- GNAT\n-   Name_Linker_Destructor              : constant Name_Id := N + 212; -- GNAT\n-   Name_Linker_Options                 : constant Name_Id := N + 213;\n-   Name_Linker_Section                 : constant Name_Id := N + 214; -- GNAT\n-   Name_List                           : constant Name_Id := N + 215;\n-   Name_Machine_Attribute              : constant Name_Id := N + 216; -- GNAT\n-   Name_Main                           : constant Name_Id := N + 217; -- GNAT\n-   Name_Main_Storage                   : constant Name_Id := N + 218; -- GNAT\n-   Name_Memory_Size                    : constant Name_Id := N + 219; -- Ada 83\n-   Name_No_Return                      : constant Name_Id := N + 220; -- GNAT\n-   Name_Obsolescent                    : constant Name_Id := N + 221; -- GNAT\n-   Name_Optimize                       : constant Name_Id := N + 222;\n-   Name_Optional_Overriding            : constant Name_Id := N + 223; -- Ada 05\n-   Name_Pack                           : constant Name_Id := N + 224;\n-   Name_Page                           : constant Name_Id := N + 225;\n-   Name_Passive                        : constant Name_Id := N + 226; -- GNAT\n-   Name_Preelaborate                   : constant Name_Id := N + 227;\n-   Name_Preelaborate_05                : constant Name_Id := N + 228; -- GNAT\n-   Name_Priority                       : constant Name_Id := N + 229;\n-   Name_Psect_Object                   : constant Name_Id := N + 230; -- VMS\n-   Name_Pure                           : constant Name_Id := N + 231;\n-   Name_Pure_05                        : constant Name_Id := N + 232; -- GNAT\n-   Name_Pure_Function                  : constant Name_Id := N + 233; -- GNAT\n-   Name_Remote_Call_Interface          : constant Name_Id := N + 234;\n-   Name_Remote_Types                   : constant Name_Id := N + 235;\n-   Name_Share_Generic                  : constant Name_Id := N + 236; -- GNAT\n-   Name_Shared                         : constant Name_Id := N + 237; -- Ada 83\n-   Name_Shared_Passive                 : constant Name_Id := N + 238;\n+   Name_Complete_Representation        : constant Name_Id := N + 172; -- GNAT\n+   Name_Complex_Representation         : constant Name_Id := N + 173; -- GNAT\n+   Name_Controlled                     : constant Name_Id := N + 174;\n+   Name_Convention                     : constant Name_Id := N + 175;\n+   Name_CPP_Class                      : constant Name_Id := N + 176; -- GNAT\n+   Name_CPP_Constructor                : constant Name_Id := N + 177; -- GNAT\n+   Name_CPP_Virtual                    : constant Name_Id := N + 178; -- GNAT\n+   Name_CPP_Vtable                     : constant Name_Id := N + 179; -- GNAT\n+   Name_Debug                          : constant Name_Id := N + 180; -- GNAT\n+   Name_Elaborate                      : constant Name_Id := N + 181; -- Ada 83\n+   Name_Elaborate_All                  : constant Name_Id := N + 182;\n+   Name_Elaborate_Body                 : constant Name_Id := N + 183;\n+   Name_Export                         : constant Name_Id := N + 184;\n+   Name_Export_Exception               : constant Name_Id := N + 185; -- VMS\n+   Name_Export_Function                : constant Name_Id := N + 186; -- GNAT\n+   Name_Export_Object                  : constant Name_Id := N + 187; -- GNAT\n+   Name_Export_Procedure               : constant Name_Id := N + 188; -- GNAT\n+   Name_Export_Value                   : constant Name_Id := N + 189; -- GNAT\n+   Name_Export_Valued_Procedure        : constant Name_Id := N + 190; -- GNAT\n+   Name_External                       : constant Name_Id := N + 191; -- GNAT\n+   Name_Finalize_Storage_Only          : constant Name_Id := N + 192; -- GNAT\n+   Name_Ident                          : constant Name_Id := N + 193; -- VMS\n+   Name_Import                         : constant Name_Id := N + 194;\n+   Name_Import_Exception               : constant Name_Id := N + 195; -- VMS\n+   Name_Import_Function                : constant Name_Id := N + 196; -- GNAT\n+   Name_Import_Object                  : constant Name_Id := N + 197; -- GNAT\n+   Name_Import_Procedure               : constant Name_Id := N + 198; -- GNAT\n+   Name_Import_Valued_Procedure        : constant Name_Id := N + 199; -- GNAT\n+   Name_Inline                         : constant Name_Id := N + 200;\n+   Name_Inline_Always                  : constant Name_Id := N + 201; -- GNAT\n+   Name_Inline_Generic                 : constant Name_Id := N + 202; -- GNAT\n+   Name_Inspection_Point               : constant Name_Id := N + 203;\n+   Name_Interface_Name                 : constant Name_Id := N + 204; -- GNAT\n+   Name_Interrupt_Handler              : constant Name_Id := N + 205;\n+   Name_Interrupt_Priority             : constant Name_Id := N + 206;\n+   Name_Java_Constructor               : constant Name_Id := N + 207; -- GNAT\n+   Name_Java_Interface                 : constant Name_Id := N + 208; -- GNAT\n+   Name_Keep_Names                     : constant Name_Id := N + 209; -- GNAT\n+   Name_Link_With                      : constant Name_Id := N + 210; -- GNAT\n+   Name_Linker_Alias                   : constant Name_Id := N + 211; -- GNAT\n+   Name_Linker_Constructor             : constant Name_Id := N + 212; -- GNAT\n+   Name_Linker_Destructor              : constant Name_Id := N + 213; -- GNAT\n+   Name_Linker_Options                 : constant Name_Id := N + 214;\n+   Name_Linker_Section                 : constant Name_Id := N + 215; -- GNAT\n+   Name_List                           : constant Name_Id := N + 216;\n+   Name_Machine_Attribute              : constant Name_Id := N + 217; -- GNAT\n+   Name_Main                           : constant Name_Id := N + 218; -- GNAT\n+   Name_Main_Storage                   : constant Name_Id := N + 219; -- GNAT\n+   Name_Memory_Size                    : constant Name_Id := N + 220; -- Ada 83\n+   Name_No_Return                      : constant Name_Id := N + 221; -- GNAT\n+   Name_Obsolescent                    : constant Name_Id := N + 222; -- GNAT\n+   Name_Optimize                       : constant Name_Id := N + 223;\n+   Name_Optional_Overriding            : constant Name_Id := N + 224; -- Ada 05\n+   Name_Pack                           : constant Name_Id := N + 225;\n+   Name_Page                           : constant Name_Id := N + 226;\n+   Name_Passive                        : constant Name_Id := N + 227; -- GNAT\n+   Name_Preelaborate                   : constant Name_Id := N + 228;\n+   Name_Preelaborate_05                : constant Name_Id := N + 229; -- GNAT\n+   Name_Priority                       : constant Name_Id := N + 230;\n+   Name_Psect_Object                   : constant Name_Id := N + 231; -- VMS\n+   Name_Pure                           : constant Name_Id := N + 232;\n+   Name_Pure_05                        : constant Name_Id := N + 233; -- GNAT\n+   Name_Pure_Function                  : constant Name_Id := N + 234; -- GNAT\n+   Name_Remote_Call_Interface          : constant Name_Id := N + 235;\n+   Name_Remote_Types                   : constant Name_Id := N + 236;\n+   Name_Share_Generic                  : constant Name_Id := N + 237; -- GNAT\n+   Name_Shared                         : constant Name_Id := N + 238; -- Ada 83\n+   Name_Shared_Passive                 : constant Name_Id := N + 239;\n \n    --  Note: Storage_Size is not in this list because its name matches the\n    --  name of the corresponding attribute. However, it is included in the\n@@ -478,27 +479,27 @@ package Snames is\n    --  Note: Storage_Unit is also omitted from the list because of a clash\n    --  with an attribute name, and is treated similarly.\n \n-   Name_Source_Reference               : constant Name_Id := N + 239; -- GNAT\n-   Name_Stream_Convert                 : constant Name_Id := N + 240; -- GNAT\n-   Name_Subtitle                       : constant Name_Id := N + 241; -- GNAT\n-   Name_Suppress_All                   : constant Name_Id := N + 242; -- GNAT\n-   Name_Suppress_Debug_Info            : constant Name_Id := N + 243; -- GNAT\n-   Name_Suppress_Initialization        : constant Name_Id := N + 244; -- GNAT\n-   Name_System_Name                    : constant Name_Id := N + 245; -- Ada 83\n-   Name_Task_Info                      : constant Name_Id := N + 246; -- GNAT\n-   Name_Task_Name                      : constant Name_Id := N + 247; -- GNAT\n-   Name_Task_Storage                   : constant Name_Id := N + 248; -- VMS\n-   Name_Thread_Body                    : constant Name_Id := N + 249; -- GNAT\n-   Name_Time_Slice                     : constant Name_Id := N + 250; -- GNAT\n-   Name_Title                          : constant Name_Id := N + 251; -- GNAT\n-   Name_Unchecked_Union                : constant Name_Id := N + 252; -- GNAT\n-   Name_Unimplemented_Unit             : constant Name_Id := N + 253; -- GNAT\n-   Name_Unreferenced                   : constant Name_Id := N + 254; -- GNAT\n-   Name_Unreserve_All_Interrupts       : constant Name_Id := N + 255; -- GNAT\n-   Name_Volatile                       : constant Name_Id := N + 256;\n-   Name_Volatile_Components            : constant Name_Id := N + 257;\n-   Name_Weak_External                  : constant Name_Id := N + 258; -- GNAT\n-   Last_Pragma_Name                    : constant Name_Id := N + 258;\n+   Name_Source_Reference               : constant Name_Id := N + 240; -- GNAT\n+   Name_Stream_Convert                 : constant Name_Id := N + 241; -- GNAT\n+   Name_Subtitle                       : constant Name_Id := N + 242; -- GNAT\n+   Name_Suppress_All                   : constant Name_Id := N + 243; -- GNAT\n+   Name_Suppress_Debug_Info            : constant Name_Id := N + 244; -- GNAT\n+   Name_Suppress_Initialization        : constant Name_Id := N + 245; -- GNAT\n+   Name_System_Name                    : constant Name_Id := N + 246; -- Ada 83\n+   Name_Task_Info                      : constant Name_Id := N + 247; -- GNAT\n+   Name_Task_Name                      : constant Name_Id := N + 248; -- GNAT\n+   Name_Task_Storage                   : constant Name_Id := N + 249; -- VMS\n+   Name_Thread_Body                    : constant Name_Id := N + 250; -- GNAT\n+   Name_Time_Slice                     : constant Name_Id := N + 251; -- GNAT\n+   Name_Title                          : constant Name_Id := N + 252; -- GNAT\n+   Name_Unchecked_Union                : constant Name_Id := N + 253; -- GNAT\n+   Name_Unimplemented_Unit             : constant Name_Id := N + 254; -- GNAT\n+   Name_Unreferenced                   : constant Name_Id := N + 255; -- GNAT\n+   Name_Unreserve_All_Interrupts       : constant Name_Id := N + 256; -- GNAT\n+   Name_Volatile                       : constant Name_Id := N + 257;\n+   Name_Volatile_Components            : constant Name_Id := N + 258;\n+   Name_Weak_External                  : constant Name_Id := N + 259; -- GNAT\n+   Last_Pragma_Name                    : constant Name_Id := N + 259;\n \n    --  Language convention names for pragma Convention/Export/Import/Interface\n    --  Note that Name_C is not included in this list, since it was already\n@@ -509,114 +510,114 @@ package Snames is\n    --  Entry and Protected, this is because these conventions cannot be\n    --  specified by a pragma.\n \n-   First_Convention_Name               : constant Name_Id := N + 259;\n-   Name_Ada                            : constant Name_Id := N + 259;\n-   Name_Assembler                      : constant Name_Id := N + 260;\n-   Name_COBOL                          : constant Name_Id := N + 261;\n-   Name_CPP                            : constant Name_Id := N + 262;\n-   Name_Fortran                        : constant Name_Id := N + 263;\n-   Name_Intrinsic                      : constant Name_Id := N + 264;\n-   Name_Java                           : constant Name_Id := N + 265;\n-   Name_Stdcall                        : constant Name_Id := N + 266;\n-   Name_Stubbed                        : constant Name_Id := N + 267;\n-   Last_Convention_Name                : constant Name_Id := N + 267;\n+   First_Convention_Name               : constant Name_Id := N + 260;\n+   Name_Ada                            : constant Name_Id := N + 260;\n+   Name_Assembler                      : constant Name_Id := N + 261;\n+   Name_COBOL                          : constant Name_Id := N + 262;\n+   Name_CPP                            : constant Name_Id := N + 263;\n+   Name_Fortran                        : constant Name_Id := N + 264;\n+   Name_Intrinsic                      : constant Name_Id := N + 265;\n+   Name_Java                           : constant Name_Id := N + 266;\n+   Name_Stdcall                        : constant Name_Id := N + 267;\n+   Name_Stubbed                        : constant Name_Id := N + 268;\n+   Last_Convention_Name                : constant Name_Id := N + 268;\n \n    --  The following names are preset as synonyms for Assembler\n \n-   Name_Asm                            : constant Name_Id := N + 268;\n-   Name_Assembly                       : constant Name_Id := N + 269;\n+   Name_Asm                            : constant Name_Id := N + 269;\n+   Name_Assembly                       : constant Name_Id := N + 270;\n \n    --  The following names are preset as synonyms for C\n \n-   Name_Default                        : constant Name_Id := N + 270;\n+   Name_Default                        : constant Name_Id := N + 271;\n    --  Name_Exernal (previously defined as pragma)\n \n    --  The following names are present as synonyms for Stdcall\n \n-   Name_DLL                            : constant Name_Id := N + 271;\n-   Name_Win32                          : constant Name_Id := N + 272;\n+   Name_DLL                            : constant Name_Id := N + 272;\n+   Name_Win32                          : constant Name_Id := N + 273;\n \n    --  Other special names used in processing pragmas\n \n-   Name_As_Is                          : constant Name_Id := N + 273;\n-   Name_Attribute_Name                 : constant Name_Id := N + 274;\n-   Name_Body_File_Name                 : constant Name_Id := N + 275;\n-   Name_Boolean_Entry_Barriers         : constant Name_Id := N + 276;\n-   Name_Check                          : constant Name_Id := N + 277;\n-   Name_Casing                         : constant Name_Id := N + 278;\n-   Name_Code                           : constant Name_Id := N + 279;\n-   Name_Component                      : constant Name_Id := N + 280;\n-   Name_Component_Size_4               : constant Name_Id := N + 281;\n-   Name_Copy                           : constant Name_Id := N + 282;\n-   Name_D_Float                        : constant Name_Id := N + 283;\n-   Name_Descriptor                     : constant Name_Id := N + 284;\n-   Name_Dot_Replacement                : constant Name_Id := N + 285;\n-   Name_Dynamic                        : constant Name_Id := N + 286;\n-   Name_Entity                         : constant Name_Id := N + 287;\n-   Name_Entry_Count                    : constant Name_Id := N + 288;\n-   Name_External_Name                  : constant Name_Id := N + 289;\n-   Name_First_Optional_Parameter       : constant Name_Id := N + 290;\n-   Name_Form                           : constant Name_Id := N + 291;\n-   Name_G_Float                        : constant Name_Id := N + 292;\n-   Name_Gcc                            : constant Name_Id := N + 293;\n-   Name_Gnat                           : constant Name_Id := N + 294;\n-   Name_GPL                            : constant Name_Id := N + 295;\n-   Name_IEEE_Float                     : constant Name_Id := N + 296;\n-   Name_Ignore                         : constant Name_Id := N + 297;\n-   Name_Info                           : constant Name_Id := N + 298;\n-   Name_Internal                       : constant Name_Id := N + 299;\n-   Name_Link_Name                      : constant Name_Id := N + 300;\n-   Name_Lowercase                      : constant Name_Id := N + 301;\n-   Name_Max_Entry_Queue_Depth          : constant Name_Id := N + 302;\n-   Name_Max_Entry_Queue_Length         : constant Name_Id := N + 303;\n-   Name_Max_Size                       : constant Name_Id := N + 304;\n-   Name_Mechanism                      : constant Name_Id := N + 305;\n-   Name_Message                        : constant Name_Id := N + 306;\n-   Name_Mixedcase                      : constant Name_Id := N + 307;\n-   Name_Modified_GPL                   : constant Name_Id := N + 308;\n-   Name_Name                           : constant Name_Id := N + 309;\n-   Name_NCA                            : constant Name_Id := N + 310;\n-   Name_No                             : constant Name_Id := N + 311;\n-   Name_No_Dependence                  : constant Name_Id := N + 312;\n-   Name_No_Dynamic_Attachment          : constant Name_Id := N + 313;\n-   Name_No_Dynamic_Interrupts          : constant Name_Id := N + 314;\n-   Name_No_Requeue                     : constant Name_Id := N + 315;\n-   Name_No_Requeue_Statements          : constant Name_Id := N + 316;\n-   Name_No_Task_Attributes             : constant Name_Id := N + 317;\n-   Name_No_Task_Attributes_Package     : constant Name_Id := N + 318;\n-   Name_On                             : constant Name_Id := N + 319;\n-   Name_Parameter_Types                : constant Name_Id := N + 320;\n-   Name_Reference                      : constant Name_Id := N + 321;\n-   Name_Restricted                     : constant Name_Id := N + 322;\n-   Name_Result_Mechanism               : constant Name_Id := N + 323;\n-   Name_Result_Type                    : constant Name_Id := N + 324;\n-   Name_Runtime                        : constant Name_Id := N + 325;\n-   Name_SB                             : constant Name_Id := N + 326;\n-   Name_Secondary_Stack_Size           : constant Name_Id := N + 327;\n-   Name_Section                        : constant Name_Id := N + 328;\n-   Name_Semaphore                      : constant Name_Id := N + 329;\n-   Name_Simple_Barriers                : constant Name_Id := N + 330;\n-   Name_Spec_File_Name                 : constant Name_Id := N + 331;\n-   Name_State                          : constant Name_Id := N + 332;\n-   Name_Static                         : constant Name_Id := N + 333;\n-   Name_Stack_Size                     : constant Name_Id := N + 334;\n-   Name_Subunit_File_Name              : constant Name_Id := N + 335;\n-   Name_Task_Stack_Size_Default        : constant Name_Id := N + 336;\n-   Name_Task_Type                      : constant Name_Id := N + 337;\n-   Name_Time_Slicing_Enabled           : constant Name_Id := N + 338;\n-   Name_Top_Guard                      : constant Name_Id := N + 339;\n-   Name_UBA                            : constant Name_Id := N + 340;\n-   Name_UBS                            : constant Name_Id := N + 341;\n-   Name_UBSB                           : constant Name_Id := N + 342;\n-   Name_Unit_Name                      : constant Name_Id := N + 343;\n-   Name_Unknown                        : constant Name_Id := N + 344;\n-   Name_Unrestricted                   : constant Name_Id := N + 345;\n-   Name_Uppercase                      : constant Name_Id := N + 346;\n-   Name_User                           : constant Name_Id := N + 347;\n-   Name_VAX_Float                      : constant Name_Id := N + 348;\n-   Name_VMS                            : constant Name_Id := N + 349;\n-   Name_Vtable_Ptr                     : constant Name_Id := N + 350;\n-   Name_Working_Storage                : constant Name_Id := N + 351;\n+   Name_As_Is                          : constant Name_Id := N + 274;\n+   Name_Attribute_Name                 : constant Name_Id := N + 275;\n+   Name_Body_File_Name                 : constant Name_Id := N + 276;\n+   Name_Boolean_Entry_Barriers         : constant Name_Id := N + 277;\n+   Name_Check                          : constant Name_Id := N + 278;\n+   Name_Casing                         : constant Name_Id := N + 279;\n+   Name_Code                           : constant Name_Id := N + 280;\n+   Name_Component                      : constant Name_Id := N + 281;\n+   Name_Component_Size_4               : constant Name_Id := N + 282;\n+   Name_Copy                           : constant Name_Id := N + 283;\n+   Name_D_Float                        : constant Name_Id := N + 284;\n+   Name_Descriptor                     : constant Name_Id := N + 285;\n+   Name_Dot_Replacement                : constant Name_Id := N + 286;\n+   Name_Dynamic                        : constant Name_Id := N + 287;\n+   Name_Entity                         : constant Name_Id := N + 288;\n+   Name_Entry_Count                    : constant Name_Id := N + 289;\n+   Name_External_Name                  : constant Name_Id := N + 290;\n+   Name_First_Optional_Parameter       : constant Name_Id := N + 291;\n+   Name_Form                           : constant Name_Id := N + 292;\n+   Name_G_Float                        : constant Name_Id := N + 293;\n+   Name_Gcc                            : constant Name_Id := N + 294;\n+   Name_Gnat                           : constant Name_Id := N + 295;\n+   Name_GPL                            : constant Name_Id := N + 296;\n+   Name_IEEE_Float                     : constant Name_Id := N + 297;\n+   Name_Ignore                         : constant Name_Id := N + 298;\n+   Name_Info                           : constant Name_Id := N + 299;\n+   Name_Internal                       : constant Name_Id := N + 300;\n+   Name_Link_Name                      : constant Name_Id := N + 301;\n+   Name_Lowercase                      : constant Name_Id := N + 302;\n+   Name_Max_Entry_Queue_Depth          : constant Name_Id := N + 303;\n+   Name_Max_Entry_Queue_Length         : constant Name_Id := N + 304;\n+   Name_Max_Size                       : constant Name_Id := N + 305;\n+   Name_Mechanism                      : constant Name_Id := N + 306;\n+   Name_Message                        : constant Name_Id := N + 307;\n+   Name_Mixedcase                      : constant Name_Id := N + 308;\n+   Name_Modified_GPL                   : constant Name_Id := N + 309;\n+   Name_Name                           : constant Name_Id := N + 310;\n+   Name_NCA                            : constant Name_Id := N + 311;\n+   Name_No                             : constant Name_Id := N + 312;\n+   Name_No_Dependence                  : constant Name_Id := N + 313;\n+   Name_No_Dynamic_Attachment          : constant Name_Id := N + 314;\n+   Name_No_Dynamic_Interrupts          : constant Name_Id := N + 315;\n+   Name_No_Requeue                     : constant Name_Id := N + 316;\n+   Name_No_Requeue_Statements          : constant Name_Id := N + 317;\n+   Name_No_Task_Attributes             : constant Name_Id := N + 318;\n+   Name_No_Task_Attributes_Package     : constant Name_Id := N + 319;\n+   Name_On                             : constant Name_Id := N + 320;\n+   Name_Parameter_Types                : constant Name_Id := N + 321;\n+   Name_Reference                      : constant Name_Id := N + 322;\n+   Name_Restricted                     : constant Name_Id := N + 323;\n+   Name_Result_Mechanism               : constant Name_Id := N + 324;\n+   Name_Result_Type                    : constant Name_Id := N + 325;\n+   Name_Runtime                        : constant Name_Id := N + 326;\n+   Name_SB                             : constant Name_Id := N + 327;\n+   Name_Secondary_Stack_Size           : constant Name_Id := N + 328;\n+   Name_Section                        : constant Name_Id := N + 329;\n+   Name_Semaphore                      : constant Name_Id := N + 330;\n+   Name_Simple_Barriers                : constant Name_Id := N + 331;\n+   Name_Spec_File_Name                 : constant Name_Id := N + 332;\n+   Name_State                          : constant Name_Id := N + 333;\n+   Name_Static                         : constant Name_Id := N + 334;\n+   Name_Stack_Size                     : constant Name_Id := N + 335;\n+   Name_Subunit_File_Name              : constant Name_Id := N + 336;\n+   Name_Task_Stack_Size_Default        : constant Name_Id := N + 337;\n+   Name_Task_Type                      : constant Name_Id := N + 338;\n+   Name_Time_Slicing_Enabled           : constant Name_Id := N + 339;\n+   Name_Top_Guard                      : constant Name_Id := N + 340;\n+   Name_UBA                            : constant Name_Id := N + 341;\n+   Name_UBS                            : constant Name_Id := N + 342;\n+   Name_UBSB                           : constant Name_Id := N + 343;\n+   Name_Unit_Name                      : constant Name_Id := N + 344;\n+   Name_Unknown                        : constant Name_Id := N + 345;\n+   Name_Unrestricted                   : constant Name_Id := N + 346;\n+   Name_Uppercase                      : constant Name_Id := N + 347;\n+   Name_User                           : constant Name_Id := N + 348;\n+   Name_VAX_Float                      : constant Name_Id := N + 349;\n+   Name_VMS                            : constant Name_Id := N + 350;\n+   Name_Vtable_Ptr                     : constant Name_Id := N + 351;\n+   Name_Working_Storage                : constant Name_Id := N + 352;\n \n    --  Names of recognized attributes. The entries with the comment \"Ada 83\"\n    --  are attributes that are defined in Ada 83, but not in Ada 95. These\n@@ -630,409 +631,409 @@ package Snames is\n    --  The entries marked VMS are recognized only in OpenVMS implementations\n    --  of GNAT, and are treated as illegal in all other contexts.\n \n-   First_Attribute_Name                : constant Name_Id := N + 352;\n-   Name_Abort_Signal                   : constant Name_Id := N + 352; -- GNAT\n-   Name_Access                         : constant Name_Id := N + 353;\n-   Name_Address                        : constant Name_Id := N + 354;\n-   Name_Address_Size                   : constant Name_Id := N + 355; -- GNAT\n-   Name_Aft                            : constant Name_Id := N + 356;\n-   Name_Alignment                      : constant Name_Id := N + 357;\n-   Name_Asm_Input                      : constant Name_Id := N + 358; -- GNAT\n-   Name_Asm_Output                     : constant Name_Id := N + 359; -- GNAT\n-   Name_AST_Entry                      : constant Name_Id := N + 360; -- VMS\n-   Name_Bit                            : constant Name_Id := N + 361; -- GNAT\n-   Name_Bit_Order                      : constant Name_Id := N + 362;\n-   Name_Bit_Position                   : constant Name_Id := N + 363; -- GNAT\n-   Name_Body_Version                   : constant Name_Id := N + 364;\n-   Name_Callable                       : constant Name_Id := N + 365;\n-   Name_Caller                         : constant Name_Id := N + 366;\n-   Name_Code_Address                   : constant Name_Id := N + 367; -- GNAT\n-   Name_Component_Size                 : constant Name_Id := N + 368;\n-   Name_Compose                        : constant Name_Id := N + 369;\n-   Name_Constrained                    : constant Name_Id := N + 370;\n-   Name_Count                          : constant Name_Id := N + 371;\n-   Name_Default_Bit_Order              : constant Name_Id := N + 372; -- GNAT\n-   Name_Definite                       : constant Name_Id := N + 373;\n-   Name_Delta                          : constant Name_Id := N + 374;\n-   Name_Denorm                         : constant Name_Id := N + 375;\n-   Name_Digits                         : constant Name_Id := N + 376;\n-   Name_Elaborated                     : constant Name_Id := N + 377; -- GNAT\n-   Name_Emax                           : constant Name_Id := N + 378; -- Ada 83\n-   Name_Enum_Rep                       : constant Name_Id := N + 379; -- GNAT\n-   Name_Epsilon                        : constant Name_Id := N + 380; -- Ada 83\n-   Name_Exponent                       : constant Name_Id := N + 381;\n-   Name_External_Tag                   : constant Name_Id := N + 382;\n-   Name_First                          : constant Name_Id := N + 383;\n-   Name_First_Bit                      : constant Name_Id := N + 384;\n-   Name_Fixed_Value                    : constant Name_Id := N + 385; -- GNAT\n-   Name_Fore                           : constant Name_Id := N + 386;\n-   Name_Has_Access_Values              : constant Name_Id := N + 387; -- GNAT\n-   Name_Has_Discriminants              : constant Name_Id := N + 388; -- GNAT\n-   Name_Identity                       : constant Name_Id := N + 389;\n-   Name_Img                            : constant Name_Id := N + 390; -- GNAT\n-   Name_Integer_Value                  : constant Name_Id := N + 391; -- GNAT\n-   Name_Large                          : constant Name_Id := N + 392; -- Ada 83\n-   Name_Last                           : constant Name_Id := N + 393;\n-   Name_Last_Bit                       : constant Name_Id := N + 394;\n-   Name_Leading_Part                   : constant Name_Id := N + 395;\n-   Name_Length                         : constant Name_Id := N + 396;\n-   Name_Machine_Emax                   : constant Name_Id := N + 397;\n-   Name_Machine_Emin                   : constant Name_Id := N + 398;\n-   Name_Machine_Mantissa               : constant Name_Id := N + 399;\n-   Name_Machine_Overflows              : constant Name_Id := N + 400;\n-   Name_Machine_Radix                  : constant Name_Id := N + 401;\n-   Name_Machine_Rounding               : constant Name_Id := N + 402; -- Ada 05\n-   Name_Machine_Rounds                 : constant Name_Id := N + 403;\n-   Name_Machine_Size                   : constant Name_Id := N + 404; -- GNAT\n-   Name_Mantissa                       : constant Name_Id := N + 405; -- Ada 83\n-   Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + 406;\n-   Name_Maximum_Alignment              : constant Name_Id := N + 407; -- GNAT\n-   Name_Mechanism_Code                 : constant Name_Id := N + 408; -- GNAT\n-   Name_Mod                            : constant Name_Id := N + 409;\n-   Name_Model_Emin                     : constant Name_Id := N + 410;\n-   Name_Model_Epsilon                  : constant Name_Id := N + 411;\n-   Name_Model_Mantissa                 : constant Name_Id := N + 412;\n-   Name_Model_Small                    : constant Name_Id := N + 413;\n-   Name_Modulus                        : constant Name_Id := N + 414;\n-   Name_Null_Parameter                 : constant Name_Id := N + 415; -- GNAT\n-   Name_Object_Size                    : constant Name_Id := N + 416; -- GNAT\n-   Name_Partition_ID                   : constant Name_Id := N + 417;\n-   Name_Passed_By_Reference            : constant Name_Id := N + 418; -- GNAT\n-   Name_Pool_Address                   : constant Name_Id := N + 419;\n-   Name_Pos                            : constant Name_Id := N + 420;\n-   Name_Position                       : constant Name_Id := N + 421;\n-   Name_Range                          : constant Name_Id := N + 422;\n-   Name_Range_Length                   : constant Name_Id := N + 423; -- GNAT\n-   Name_Round                          : constant Name_Id := N + 424;\n-   Name_Safe_Emax                      : constant Name_Id := N + 425; -- Ada 83\n-   Name_Safe_First                     : constant Name_Id := N + 426;\n-   Name_Safe_Large                     : constant Name_Id := N + 427; -- Ada 83\n-   Name_Safe_Last                      : constant Name_Id := N + 428;\n-   Name_Safe_Small                     : constant Name_Id := N + 429; -- Ada 83\n-   Name_Scale                          : constant Name_Id := N + 430;\n-   Name_Scaling                        : constant Name_Id := N + 431;\n-   Name_Signed_Zeros                   : constant Name_Id := N + 432;\n-   Name_Size                           : constant Name_Id := N + 433;\n-   Name_Small                          : constant Name_Id := N + 434;\n-   Name_Storage_Size                   : constant Name_Id := N + 435;\n-   Name_Storage_Unit                   : constant Name_Id := N + 436; -- GNAT\n-   Name_Stream_Size                    : constant Name_Id := N + 437; -- Ada 05\n-   Name_Tag                            : constant Name_Id := N + 438;\n-   Name_Target_Name                    : constant Name_Id := N + 439; -- GNAT\n-   Name_Terminated                     : constant Name_Id := N + 440;\n-   Name_To_Address                     : constant Name_Id := N + 441; -- GNAT\n-   Name_Type_Class                     : constant Name_Id := N + 442; -- GNAT\n-   Name_UET_Address                    : constant Name_Id := N + 443; -- GNAT\n-   Name_Unbiased_Rounding              : constant Name_Id := N + 444;\n-   Name_Unchecked_Access               : constant Name_Id := N + 445;\n-   Name_Unconstrained_Array            : constant Name_Id := N + 446;\n-   Name_Universal_Literal_String       : constant Name_Id := N + 447; -- GNAT\n-   Name_Unrestricted_Access            : constant Name_Id := N + 448; -- GNAT\n-   Name_VADS_Size                      : constant Name_Id := N + 449; -- GNAT\n-   Name_Val                            : constant Name_Id := N + 450;\n-   Name_Valid                          : constant Name_Id := N + 451;\n-   Name_Value_Size                     : constant Name_Id := N + 452; -- GNAT\n-   Name_Version                        : constant Name_Id := N + 453;\n-   Name_Wchar_T_Size                   : constant Name_Id := N + 454; -- GNAT\n-   Name_Wide_Wide_Width                : constant Name_Id := N + 455; -- Ada 05\n-   Name_Wide_Width                     : constant Name_Id := N + 456;\n-   Name_Width                          : constant Name_Id := N + 457;\n-   Name_Word_Size                      : constant Name_Id := N + 458; -- GNAT\n+   First_Attribute_Name                : constant Name_Id := N + 353;\n+   Name_Abort_Signal                   : constant Name_Id := N + 353; -- GNAT\n+   Name_Access                         : constant Name_Id := N + 354;\n+   Name_Address                        : constant Name_Id := N + 355;\n+   Name_Address_Size                   : constant Name_Id := N + 356; -- GNAT\n+   Name_Aft                            : constant Name_Id := N + 357;\n+   Name_Alignment                      : constant Name_Id := N + 358;\n+   Name_Asm_Input                      : constant Name_Id := N + 359; -- GNAT\n+   Name_Asm_Output                     : constant Name_Id := N + 360; -- GNAT\n+   Name_AST_Entry                      : constant Name_Id := N + 361; -- VMS\n+   Name_Bit                            : constant Name_Id := N + 362; -- GNAT\n+   Name_Bit_Order                      : constant Name_Id := N + 363;\n+   Name_Bit_Position                   : constant Name_Id := N + 364; -- GNAT\n+   Name_Body_Version                   : constant Name_Id := N + 365;\n+   Name_Callable                       : constant Name_Id := N + 366;\n+   Name_Caller                         : constant Name_Id := N + 367;\n+   Name_Code_Address                   : constant Name_Id := N + 368; -- GNAT\n+   Name_Component_Size                 : constant Name_Id := N + 369;\n+   Name_Compose                        : constant Name_Id := N + 370;\n+   Name_Constrained                    : constant Name_Id := N + 371;\n+   Name_Count                          : constant Name_Id := N + 372;\n+   Name_Default_Bit_Order              : constant Name_Id := N + 373; -- GNAT\n+   Name_Definite                       : constant Name_Id := N + 374;\n+   Name_Delta                          : constant Name_Id := N + 375;\n+   Name_Denorm                         : constant Name_Id := N + 376;\n+   Name_Digits                         : constant Name_Id := N + 377;\n+   Name_Elaborated                     : constant Name_Id := N + 378; -- GNAT\n+   Name_Emax                           : constant Name_Id := N + 379; -- Ada 83\n+   Name_Enum_Rep                       : constant Name_Id := N + 380; -- GNAT\n+   Name_Epsilon                        : constant Name_Id := N + 381; -- Ada 83\n+   Name_Exponent                       : constant Name_Id := N + 382;\n+   Name_External_Tag                   : constant Name_Id := N + 383;\n+   Name_First                          : constant Name_Id := N + 384;\n+   Name_First_Bit                      : constant Name_Id := N + 385;\n+   Name_Fixed_Value                    : constant Name_Id := N + 386; -- GNAT\n+   Name_Fore                           : constant Name_Id := N + 387;\n+   Name_Has_Access_Values              : constant Name_Id := N + 388; -- GNAT\n+   Name_Has_Discriminants              : constant Name_Id := N + 389; -- GNAT\n+   Name_Identity                       : constant Name_Id := N + 390;\n+   Name_Img                            : constant Name_Id := N + 391; -- GNAT\n+   Name_Integer_Value                  : constant Name_Id := N + 392; -- GNAT\n+   Name_Large                          : constant Name_Id := N + 393; -- Ada 83\n+   Name_Last                           : constant Name_Id := N + 394;\n+   Name_Last_Bit                       : constant Name_Id := N + 395;\n+   Name_Leading_Part                   : constant Name_Id := N + 396;\n+   Name_Length                         : constant Name_Id := N + 397;\n+   Name_Machine_Emax                   : constant Name_Id := N + 398;\n+   Name_Machine_Emin                   : constant Name_Id := N + 399;\n+   Name_Machine_Mantissa               : constant Name_Id := N + 400;\n+   Name_Machine_Overflows              : constant Name_Id := N + 401;\n+   Name_Machine_Radix                  : constant Name_Id := N + 402;\n+   Name_Machine_Rounding               : constant Name_Id := N + 403; -- Ada 05\n+   Name_Machine_Rounds                 : constant Name_Id := N + 404;\n+   Name_Machine_Size                   : constant Name_Id := N + 405; -- GNAT\n+   Name_Mantissa                       : constant Name_Id := N + 406; -- Ada 83\n+   Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + 407;\n+   Name_Maximum_Alignment              : constant Name_Id := N + 408; -- GNAT\n+   Name_Mechanism_Code                 : constant Name_Id := N + 409; -- GNAT\n+   Name_Mod                            : constant Name_Id := N + 410;\n+   Name_Model_Emin                     : constant Name_Id := N + 411;\n+   Name_Model_Epsilon                  : constant Name_Id := N + 412;\n+   Name_Model_Mantissa                 : constant Name_Id := N + 413;\n+   Name_Model_Small                    : constant Name_Id := N + 414;\n+   Name_Modulus                        : constant Name_Id := N + 415;\n+   Name_Null_Parameter                 : constant Name_Id := N + 416; -- GNAT\n+   Name_Object_Size                    : constant Name_Id := N + 417; -- GNAT\n+   Name_Partition_ID                   : constant Name_Id := N + 418;\n+   Name_Passed_By_Reference            : constant Name_Id := N + 419; -- GNAT\n+   Name_Pool_Address                   : constant Name_Id := N + 420;\n+   Name_Pos                            : constant Name_Id := N + 421;\n+   Name_Position                       : constant Name_Id := N + 422;\n+   Name_Range                          : constant Name_Id := N + 423;\n+   Name_Range_Length                   : constant Name_Id := N + 424; -- GNAT\n+   Name_Round                          : constant Name_Id := N + 425;\n+   Name_Safe_Emax                      : constant Name_Id := N + 426; -- Ada 83\n+   Name_Safe_First                     : constant Name_Id := N + 427;\n+   Name_Safe_Large                     : constant Name_Id := N + 428; -- Ada 83\n+   Name_Safe_Last                      : constant Name_Id := N + 429;\n+   Name_Safe_Small                     : constant Name_Id := N + 430; -- Ada 83\n+   Name_Scale                          : constant Name_Id := N + 431;\n+   Name_Scaling                        : constant Name_Id := N + 432;\n+   Name_Signed_Zeros                   : constant Name_Id := N + 433;\n+   Name_Size                           : constant Name_Id := N + 434;\n+   Name_Small                          : constant Name_Id := N + 435;\n+   Name_Storage_Size                   : constant Name_Id := N + 436;\n+   Name_Storage_Unit                   : constant Name_Id := N + 437; -- GNAT\n+   Name_Stream_Size                    : constant Name_Id := N + 438; -- Ada 05\n+   Name_Tag                            : constant Name_Id := N + 439;\n+   Name_Target_Name                    : constant Name_Id := N + 440; -- GNAT\n+   Name_Terminated                     : constant Name_Id := N + 441;\n+   Name_To_Address                     : constant Name_Id := N + 442; -- GNAT\n+   Name_Type_Class                     : constant Name_Id := N + 443; -- GNAT\n+   Name_UET_Address                    : constant Name_Id := N + 444; -- GNAT\n+   Name_Unbiased_Rounding              : constant Name_Id := N + 445;\n+   Name_Unchecked_Access               : constant Name_Id := N + 446;\n+   Name_Unconstrained_Array            : constant Name_Id := N + 447;\n+   Name_Universal_Literal_String       : constant Name_Id := N + 448; -- GNAT\n+   Name_Unrestricted_Access            : constant Name_Id := N + 449; -- GNAT\n+   Name_VADS_Size                      : constant Name_Id := N + 450; -- GNAT\n+   Name_Val                            : constant Name_Id := N + 451;\n+   Name_Valid                          : constant Name_Id := N + 452;\n+   Name_Value_Size                     : constant Name_Id := N + 453; -- GNAT\n+   Name_Version                        : constant Name_Id := N + 454;\n+   Name_Wchar_T_Size                   : constant Name_Id := N + 455; -- GNAT\n+   Name_Wide_Wide_Width                : constant Name_Id := N + 456; -- Ada 05\n+   Name_Wide_Width                     : constant Name_Id := N + 457;\n+   Name_Width                          : constant Name_Id := N + 458;\n+   Name_Word_Size                      : constant Name_Id := N + 459; -- GNAT\n \n    --  Attributes that designate attributes returning renamable functions,\n    --  i.e. functions that return other than a universal value and that\n    --  have non-universal arguments.\n \n-   First_Renamable_Function_Attribute  : constant Name_Id := N + 459;\n-   Name_Adjacent                       : constant Name_Id := N + 459;\n-   Name_Ceiling                        : constant Name_Id := N + 460;\n-   Name_Copy_Sign                      : constant Name_Id := N + 461;\n-   Name_Floor                          : constant Name_Id := N + 462;\n-   Name_Fraction                       : constant Name_Id := N + 463;\n-   Name_Image                          : constant Name_Id := N + 464;\n-   Name_Input                          : constant Name_Id := N + 465;\n-   Name_Machine                        : constant Name_Id := N + 466;\n-   Name_Max                            : constant Name_Id := N + 467;\n-   Name_Min                            : constant Name_Id := N + 468;\n-   Name_Model                          : constant Name_Id := N + 469;\n-   Name_Pred                           : constant Name_Id := N + 470;\n-   Name_Remainder                      : constant Name_Id := N + 471;\n-   Name_Rounding                       : constant Name_Id := N + 472;\n-   Name_Succ                           : constant Name_Id := N + 473;\n-   Name_Truncation                     : constant Name_Id := N + 474;\n-   Name_Value                          : constant Name_Id := N + 475;\n-   Name_Wide_Image                     : constant Name_Id := N + 476;\n-   Name_Wide_Wide_Image                : constant Name_Id := N + 477;\n-   Name_Wide_Value                     : constant Name_Id := N + 478;\n-   Name_Wide_Wide_Value                : constant Name_Id := N + 479;\n-   Last_Renamable_Function_Attribute   : constant Name_Id := N + 479;\n+   First_Renamable_Function_Attribute  : constant Name_Id := N + 460;\n+   Name_Adjacent                       : constant Name_Id := N + 460;\n+   Name_Ceiling                        : constant Name_Id := N + 461;\n+   Name_Copy_Sign                      : constant Name_Id := N + 462;\n+   Name_Floor                          : constant Name_Id := N + 463;\n+   Name_Fraction                       : constant Name_Id := N + 464;\n+   Name_Image                          : constant Name_Id := N + 465;\n+   Name_Input                          : constant Name_Id := N + 466;\n+   Name_Machine                        : constant Name_Id := N + 467;\n+   Name_Max                            : constant Name_Id := N + 468;\n+   Name_Min                            : constant Name_Id := N + 469;\n+   Name_Model                          : constant Name_Id := N + 470;\n+   Name_Pred                           : constant Name_Id := N + 471;\n+   Name_Remainder                      : constant Name_Id := N + 472;\n+   Name_Rounding                       : constant Name_Id := N + 473;\n+   Name_Succ                           : constant Name_Id := N + 474;\n+   Name_Truncation                     : constant Name_Id := N + 475;\n+   Name_Value                          : constant Name_Id := N + 476;\n+   Name_Wide_Image                     : constant Name_Id := N + 477;\n+   Name_Wide_Wide_Image                : constant Name_Id := N + 478;\n+   Name_Wide_Value                     : constant Name_Id := N + 479;\n+   Name_Wide_Wide_Value                : constant Name_Id := N + 480;\n+   Last_Renamable_Function_Attribute   : constant Name_Id := N + 480;\n \n    --  Attributes that designate procedures\n \n-   First_Procedure_Attribute           : constant Name_Id := N + 480;\n-   Name_Output                         : constant Name_Id := N + 480;\n-   Name_Read                           : constant Name_Id := N + 481;\n-   Name_Write                          : constant Name_Id := N + 482;\n-   Last_Procedure_Attribute            : constant Name_Id := N + 482;\n+   First_Procedure_Attribute           : constant Name_Id := N + 481;\n+   Name_Output                         : constant Name_Id := N + 481;\n+   Name_Read                           : constant Name_Id := N + 482;\n+   Name_Write                          : constant Name_Id := N + 483;\n+   Last_Procedure_Attribute            : constant Name_Id := N + 483;\n \n    --  Remaining attributes are ones that return entities\n \n-   First_Entity_Attribute_Name         : constant Name_Id := N + 483;\n-   Name_Elab_Body                      : constant Name_Id := N + 483; -- GNAT\n-   Name_Elab_Spec                      : constant Name_Id := N + 484; -- GNAT\n-   Name_Storage_Pool                   : constant Name_Id := N + 485;\n+   First_Entity_Attribute_Name         : constant Name_Id := N + 484;\n+   Name_Elab_Body                      : constant Name_Id := N + 484; -- GNAT\n+   Name_Elab_Spec                      : constant Name_Id := N + 485; -- GNAT\n+   Name_Storage_Pool                   : constant Name_Id := N + 486;\n \n    --  These attributes are the ones that return types\n \n-   First_Type_Attribute_Name           : constant Name_Id := N + 486;\n-   Name_Base                           : constant Name_Id := N + 486;\n-   Name_Class                          : constant Name_Id := N + 487;\n-   Last_Type_Attribute_Name            : constant Name_Id := N + 487;\n-   Last_Entity_Attribute_Name          : constant Name_Id := N + 487;\n-   Last_Attribute_Name                 : constant Name_Id := N + 487;\n+   First_Type_Attribute_Name           : constant Name_Id := N + 487;\n+   Name_Base                           : constant Name_Id := N + 487;\n+   Name_Class                          : constant Name_Id := N + 488;\n+   Last_Type_Attribute_Name            : constant Name_Id := N + 488;\n+   Last_Entity_Attribute_Name          : constant Name_Id := N + 488;\n+   Last_Attribute_Name                 : constant Name_Id := N + 488;\n \n    --  Names of recognized locking policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. C for Ceiling_Locking). If new policy names are added,\n    --  the first character must be distinct.\n \n-   First_Locking_Policy_Name           : constant Name_Id := N + 488;\n-   Name_Ceiling_Locking                : constant Name_Id := N + 488;\n-   Name_Inheritance_Locking            : constant Name_Id := N + 489;\n-   Last_Locking_Policy_Name            : constant Name_Id := N + 489;\n+   First_Locking_Policy_Name           : constant Name_Id := N + 489;\n+   Name_Ceiling_Locking                : constant Name_Id := N + 489;\n+   Name_Inheritance_Locking            : constant Name_Id := N + 490;\n+   Last_Locking_Policy_Name            : constant Name_Id := N + 490;\n \n    --  Names of recognized queuing policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. F for FIFO_Queuing). If new policy names are added,\n    --  the first character must be distinct.\n \n-   First_Queuing_Policy_Name           : constant Name_Id := N + 490;\n-   Name_FIFO_Queuing                   : constant Name_Id := N + 490;\n-   Name_Priority_Queuing               : constant Name_Id := N + 491;\n-   Last_Queuing_Policy_Name            : constant Name_Id := N + 491;\n+   First_Queuing_Policy_Name           : constant Name_Id := N + 491;\n+   Name_FIFO_Queuing                   : constant Name_Id := N + 491;\n+   Name_Priority_Queuing               : constant Name_Id := N + 492;\n+   Last_Queuing_Policy_Name            : constant Name_Id := N + 492;\n \n    --  Names of recognized task dispatching policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. F for FIFO_WIthinn_Priorities). If new policy names\n    --  are added, the first character must be distinct.\n \n-   First_Task_Dispatching_Policy_Name  : constant Name_Id := N + 492;\n-   Name_FIFO_Within_Priorities         : constant Name_Id := N + 492;\n-   Last_Task_Dispatching_Policy_Name   : constant Name_Id := N + 492;\n+   First_Task_Dispatching_Policy_Name  : constant Name_Id := N + 493;\n+   Name_FIFO_Within_Priorities         : constant Name_Id := N + 493;\n+   Last_Task_Dispatching_Policy_Name   : constant Name_Id := N + 493;\n \n    --  Names of recognized checks for pragma Suppress\n \n-   First_Check_Name                    : constant Name_Id := N + 493;\n-   Name_Access_Check                   : constant Name_Id := N + 493;\n-   Name_Accessibility_Check            : constant Name_Id := N + 494;\n-   Name_Discriminant_Check             : constant Name_Id := N + 495;\n-   Name_Division_Check                 : constant Name_Id := N + 496;\n-   Name_Elaboration_Check              : constant Name_Id := N + 497;\n-   Name_Index_Check                    : constant Name_Id := N + 498;\n-   Name_Length_Check                   : constant Name_Id := N + 499;\n-   Name_Overflow_Check                 : constant Name_Id := N + 500;\n-   Name_Range_Check                    : constant Name_Id := N + 501;\n-   Name_Storage_Check                  : constant Name_Id := N + 502;\n-   Name_Tag_Check                      : constant Name_Id := N + 503;\n-   Name_All_Checks                     : constant Name_Id := N + 504;\n-   Last_Check_Name                     : constant Name_Id := N + 504;\n+   First_Check_Name                    : constant Name_Id := N + 494;\n+   Name_Access_Check                   : constant Name_Id := N + 494;\n+   Name_Accessibility_Check            : constant Name_Id := N + 495;\n+   Name_Discriminant_Check             : constant Name_Id := N + 496;\n+   Name_Division_Check                 : constant Name_Id := N + 497;\n+   Name_Elaboration_Check              : constant Name_Id := N + 498;\n+   Name_Index_Check                    : constant Name_Id := N + 499;\n+   Name_Length_Check                   : constant Name_Id := N + 500;\n+   Name_Overflow_Check                 : constant Name_Id := N + 501;\n+   Name_Range_Check                    : constant Name_Id := N + 502;\n+   Name_Storage_Check                  : constant Name_Id := N + 503;\n+   Name_Tag_Check                      : constant Name_Id := N + 504;\n+   Name_All_Checks                     : constant Name_Id := N + 505;\n+   Last_Check_Name                     : constant Name_Id := N + 505;\n \n    --  Names corresponding to reserved keywords, excluding those already\n    --  declared in the attribute list (Access, Delta, Digits, Mod, Range).\n \n-   Name_Abort                          : constant Name_Id := N + 505;\n-   Name_Abs                            : constant Name_Id := N + 506;\n-   Name_Accept                         : constant Name_Id := N + 507;\n-   Name_And                            : constant Name_Id := N + 508;\n-   Name_All                            : constant Name_Id := N + 509;\n-   Name_Array                          : constant Name_Id := N + 510;\n-   Name_At                             : constant Name_Id := N + 511;\n-   Name_Begin                          : constant Name_Id := N + 512;\n-   Name_Body                           : constant Name_Id := N + 513;\n-   Name_Case                           : constant Name_Id := N + 514;\n-   Name_Constant                       : constant Name_Id := N + 515;\n-   Name_Declare                        : constant Name_Id := N + 516;\n-   Name_Delay                          : constant Name_Id := N + 517;\n-   Name_Do                             : constant Name_Id := N + 518;\n-   Name_Else                           : constant Name_Id := N + 519;\n-   Name_Elsif                          : constant Name_Id := N + 520;\n-   Name_End                            : constant Name_Id := N + 521;\n-   Name_Entry                          : constant Name_Id := N + 522;\n-   Name_Exception                      : constant Name_Id := N + 523;\n-   Name_Exit                           : constant Name_Id := N + 524;\n-   Name_For                            : constant Name_Id := N + 525;\n-   Name_Function                       : constant Name_Id := N + 526;\n-   Name_Generic                        : constant Name_Id := N + 527;\n-   Name_Goto                           : constant Name_Id := N + 528;\n-   Name_If                             : constant Name_Id := N + 529;\n-   Name_In                             : constant Name_Id := N + 530;\n-   Name_Is                             : constant Name_Id := N + 531;\n-   Name_Limited                        : constant Name_Id := N + 532;\n-   Name_Loop                           : constant Name_Id := N + 533;\n-   Name_New                            : constant Name_Id := N + 534;\n-   Name_Not                            : constant Name_Id := N + 535;\n-   Name_Null                           : constant Name_Id := N + 536;\n-   Name_Of                             : constant Name_Id := N + 537;\n-   Name_Or                             : constant Name_Id := N + 538;\n-   Name_Others                         : constant Name_Id := N + 539;\n-   Name_Out                            : constant Name_Id := N + 540;\n-   Name_Package                        : constant Name_Id := N + 541;\n-   Name_Pragma                         : constant Name_Id := N + 542;\n-   Name_Private                        : constant Name_Id := N + 543;\n-   Name_Procedure                      : constant Name_Id := N + 544;\n-   Name_Raise                          : constant Name_Id := N + 545;\n-   Name_Record                         : constant Name_Id := N + 546;\n-   Name_Rem                            : constant Name_Id := N + 547;\n-   Name_Renames                        : constant Name_Id := N + 548;\n-   Name_Return                         : constant Name_Id := N + 549;\n-   Name_Reverse                        : constant Name_Id := N + 550;\n-   Name_Select                         : constant Name_Id := N + 551;\n-   Name_Separate                       : constant Name_Id := N + 552;\n-   Name_Subtype                        : constant Name_Id := N + 553;\n-   Name_Task                           : constant Name_Id := N + 554;\n-   Name_Terminate                      : constant Name_Id := N + 555;\n-   Name_Then                           : constant Name_Id := N + 556;\n-   Name_Type                           : constant Name_Id := N + 557;\n-   Name_Use                            : constant Name_Id := N + 558;\n-   Name_When                           : constant Name_Id := N + 559;\n-   Name_While                          : constant Name_Id := N + 560;\n-   Name_With                           : constant Name_Id := N + 561;\n-   Name_Xor                            : constant Name_Id := N + 562;\n+   Name_Abort                          : constant Name_Id := N + 506;\n+   Name_Abs                            : constant Name_Id := N + 507;\n+   Name_Accept                         : constant Name_Id := N + 508;\n+   Name_And                            : constant Name_Id := N + 509;\n+   Name_All                            : constant Name_Id := N + 510;\n+   Name_Array                          : constant Name_Id := N + 511;\n+   Name_At                             : constant Name_Id := N + 512;\n+   Name_Begin                          : constant Name_Id := N + 513;\n+   Name_Body                           : constant Name_Id := N + 514;\n+   Name_Case                           : constant Name_Id := N + 515;\n+   Name_Constant                       : constant Name_Id := N + 516;\n+   Name_Declare                        : constant Name_Id := N + 517;\n+   Name_Delay                          : constant Name_Id := N + 518;\n+   Name_Do                             : constant Name_Id := N + 519;\n+   Name_Else                           : constant Name_Id := N + 520;\n+   Name_Elsif                          : constant Name_Id := N + 521;\n+   Name_End                            : constant Name_Id := N + 522;\n+   Name_Entry                          : constant Name_Id := N + 523;\n+   Name_Exception                      : constant Name_Id := N + 524;\n+   Name_Exit                           : constant Name_Id := N + 525;\n+   Name_For                            : constant Name_Id := N + 526;\n+   Name_Function                       : constant Name_Id := N + 527;\n+   Name_Generic                        : constant Name_Id := N + 528;\n+   Name_Goto                           : constant Name_Id := N + 529;\n+   Name_If                             : constant Name_Id := N + 530;\n+   Name_In                             : constant Name_Id := N + 531;\n+   Name_Is                             : constant Name_Id := N + 532;\n+   Name_Limited                        : constant Name_Id := N + 533;\n+   Name_Loop                           : constant Name_Id := N + 534;\n+   Name_New                            : constant Name_Id := N + 535;\n+   Name_Not                            : constant Name_Id := N + 536;\n+   Name_Null                           : constant Name_Id := N + 537;\n+   Name_Of                             : constant Name_Id := N + 538;\n+   Name_Or                             : constant Name_Id := N + 539;\n+   Name_Others                         : constant Name_Id := N + 540;\n+   Name_Out                            : constant Name_Id := N + 541;\n+   Name_Package                        : constant Name_Id := N + 542;\n+   Name_Pragma                         : constant Name_Id := N + 543;\n+   Name_Private                        : constant Name_Id := N + 544;\n+   Name_Procedure                      : constant Name_Id := N + 545;\n+   Name_Raise                          : constant Name_Id := N + 546;\n+   Name_Record                         : constant Name_Id := N + 547;\n+   Name_Rem                            : constant Name_Id := N + 548;\n+   Name_Renames                        : constant Name_Id := N + 549;\n+   Name_Return                         : constant Name_Id := N + 550;\n+   Name_Reverse                        : constant Name_Id := N + 551;\n+   Name_Select                         : constant Name_Id := N + 552;\n+   Name_Separate                       : constant Name_Id := N + 553;\n+   Name_Subtype                        : constant Name_Id := N + 554;\n+   Name_Task                           : constant Name_Id := N + 555;\n+   Name_Terminate                      : constant Name_Id := N + 556;\n+   Name_Then                           : constant Name_Id := N + 557;\n+   Name_Type                           : constant Name_Id := N + 558;\n+   Name_Use                            : constant Name_Id := N + 559;\n+   Name_When                           : constant Name_Id := N + 560;\n+   Name_While                          : constant Name_Id := N + 561;\n+   Name_With                           : constant Name_Id := N + 562;\n+   Name_Xor                            : constant Name_Id := N + 563;\n \n    --  Names of intrinsic subprograms\n \n    --  Note: Asm is missing from this list, since Asm is a legitimate\n    --  convention name. So is To_Adress, which is a GNAT attribute.\n \n-   First_Intrinsic_Name                 : constant Name_Id := N + 563;\n-   Name_Divide                          : constant Name_Id := N + 563;\n-   Name_Enclosing_Entity                : constant Name_Id := N + 564;\n-   Name_Exception_Information           : constant Name_Id := N + 565;\n-   Name_Exception_Message               : constant Name_Id := N + 566;\n-   Name_Exception_Name                  : constant Name_Id := N + 567;\n-   Name_File                            : constant Name_Id := N + 568;\n-   Name_Generic_Dispatching_Constructor : constant Name_Id := N + 569;\n-   Name_Import_Address                  : constant Name_Id := N + 570;\n-   Name_Import_Largest_Value            : constant Name_Id := N + 571;\n-   Name_Import_Value                    : constant Name_Id := N + 572;\n-   Name_Is_Negative                     : constant Name_Id := N + 573;\n-   Name_Line                            : constant Name_Id := N + 574;\n-   Name_Rotate_Left                     : constant Name_Id := N + 575;\n-   Name_Rotate_Right                    : constant Name_Id := N + 576;\n-   Name_Shift_Left                      : constant Name_Id := N + 577;\n-   Name_Shift_Right                     : constant Name_Id := N + 578;\n-   Name_Shift_Right_Arithmetic          : constant Name_Id := N + 579;\n-   Name_Source_Location                 : constant Name_Id := N + 580;\n-   Name_Unchecked_Conversion            : constant Name_Id := N + 581;\n-   Name_Unchecked_Deallocation          : constant Name_Id := N + 582;\n-   Name_To_Pointer                      : constant Name_Id := N + 583;\n-   Last_Intrinsic_Name                  : constant Name_Id := N + 583;\n+   First_Intrinsic_Name                 : constant Name_Id := N + 564;\n+   Name_Divide                          : constant Name_Id := N + 564;\n+   Name_Enclosing_Entity                : constant Name_Id := N + 565;\n+   Name_Exception_Information           : constant Name_Id := N + 566;\n+   Name_Exception_Message               : constant Name_Id := N + 567;\n+   Name_Exception_Name                  : constant Name_Id := N + 568;\n+   Name_File                            : constant Name_Id := N + 569;\n+   Name_Generic_Dispatching_Constructor : constant Name_Id := N + 570;\n+   Name_Import_Address                  : constant Name_Id := N + 571;\n+   Name_Import_Largest_Value            : constant Name_Id := N + 572;\n+   Name_Import_Value                    : constant Name_Id := N + 573;\n+   Name_Is_Negative                     : constant Name_Id := N + 574;\n+   Name_Line                            : constant Name_Id := N + 575;\n+   Name_Rotate_Left                     : constant Name_Id := N + 576;\n+   Name_Rotate_Right                    : constant Name_Id := N + 577;\n+   Name_Shift_Left                      : constant Name_Id := N + 578;\n+   Name_Shift_Right                     : constant Name_Id := N + 579;\n+   Name_Shift_Right_Arithmetic          : constant Name_Id := N + 580;\n+   Name_Source_Location                 : constant Name_Id := N + 581;\n+   Name_Unchecked_Conversion            : constant Name_Id := N + 582;\n+   Name_Unchecked_Deallocation          : constant Name_Id := N + 583;\n+   Name_To_Pointer                      : constant Name_Id := N + 584;\n+   Last_Intrinsic_Name                  : constant Name_Id := N + 584;\n \n    --  Names used in processing intrinsic calls\n \n-   Name_Free                           : constant Name_Id := N + 584;\n+   Name_Free                           : constant Name_Id := N + 585;\n \n    --  Reserved words used only in Ada 95\n \n-   First_95_Reserved_Word              : constant Name_Id := N + 585;\n-   Name_Abstract                       : constant Name_Id := N + 585;\n-   Name_Aliased                        : constant Name_Id := N + 586;\n-   Name_Protected                      : constant Name_Id := N + 587;\n-   Name_Until                          : constant Name_Id := N + 588;\n-   Name_Requeue                        : constant Name_Id := N + 589;\n-   Name_Tagged                         : constant Name_Id := N + 590;\n-   Last_95_Reserved_Word               : constant Name_Id := N + 590;\n+   First_95_Reserved_Word              : constant Name_Id := N + 586;\n+   Name_Abstract                       : constant Name_Id := N + 586;\n+   Name_Aliased                        : constant Name_Id := N + 587;\n+   Name_Protected                      : constant Name_Id := N + 588;\n+   Name_Until                          : constant Name_Id := N + 589;\n+   Name_Requeue                        : constant Name_Id := N + 590;\n+   Name_Tagged                         : constant Name_Id := N + 591;\n+   Last_95_Reserved_Word               : constant Name_Id := N + 591;\n \n    subtype Ada_95_Reserved_Words is\n      Name_Id range First_95_Reserved_Word .. Last_95_Reserved_Word;\n \n    --  Miscellaneous names used in semantic checking\n \n-   Name_Raise_Exception                : constant Name_Id := N + 591;\n+   Name_Raise_Exception                : constant Name_Id := N + 592;\n \n    --  Additional reserved words and identifiers used in GNAT Project Files\n    --  Note that Name_External is already previously declared\n \n-   Name_Ada_Roots                      : constant Name_Id := N + 592;\n-   Name_Binder                         : constant Name_Id := N + 593;\n-   Name_Binder_Driver                  : constant Name_Id := N + 594;\n-   Name_Body_Suffix                    : constant Name_Id := N + 595;\n-   Name_Builder                        : constant Name_Id := N + 596;\n-   Name_Compiler                       : constant Name_Id := N + 597;\n-   Name_Compiler_Driver                : constant Name_Id := N + 598;\n-   Name_Compiler_Kind                  : constant Name_Id := N + 599;\n-   Name_Compute_Dependency             : constant Name_Id := N + 600;\n-   Name_Cross_Reference                : constant Name_Id := N + 601;\n-   Name_Default_Linker                 : constant Name_Id := N + 602;\n-   Name_Default_Switches               : constant Name_Id := N + 603;\n-   Name_Dependency_Option              : constant Name_Id := N + 604;\n-   Name_Exec_Dir                       : constant Name_Id := N + 605;\n-   Name_Executable                     : constant Name_Id := N + 606;\n-   Name_Executable_Suffix              : constant Name_Id := N + 607;\n-   Name_Extends                        : constant Name_Id := N + 608;\n-   Name_Externally_Built               : constant Name_Id := N + 609;\n-   Name_Finder                         : constant Name_Id := N + 610;\n-   Name_Global_Configuration_Pragmas   : constant Name_Id := N + 611;\n-   Name_Gnatls                         : constant Name_Id := N + 612;\n-   Name_Gnatstub                       : constant Name_Id := N + 613;\n-   Name_Implementation                 : constant Name_Id := N + 614;\n-   Name_Implementation_Exceptions      : constant Name_Id := N + 615;\n-   Name_Implementation_Suffix          : constant Name_Id := N + 616;\n-   Name_Include_Option                 : constant Name_Id := N + 617;\n-   Name_Language_Processing            : constant Name_Id := N + 618;\n-   Name_Languages                      : constant Name_Id := N + 619;\n-   Name_Library_Ali_Dir                : constant Name_Id := N + 620;\n-   Name_Library_Dir                    : constant Name_Id := N + 621;\n-   Name_Library_Auto_Init              : constant Name_Id := N + 622;\n-   Name_Library_GCC                    : constant Name_Id := N + 623;\n-   Name_Library_Interface              : constant Name_Id := N + 624;\n-   Name_Library_Kind                   : constant Name_Id := N + 625;\n-   Name_Library_Name                   : constant Name_Id := N + 626;\n-   Name_Library_Options                : constant Name_Id := N + 627;\n-   Name_Library_Reference_Symbol_File  : constant Name_Id := N + 628;\n-   Name_Library_Src_Dir                : constant Name_Id := N + 629;\n-   Name_Library_Symbol_File            : constant Name_Id := N + 630;\n-   Name_Library_Symbol_Policy          : constant Name_Id := N + 631;\n-   Name_Library_Version                : constant Name_Id := N + 632;\n-   Name_Linker                         : constant Name_Id := N + 633;\n-   Name_Local_Configuration_Pragmas    : constant Name_Id := N + 634;\n-   Name_Locally_Removed_Files          : constant Name_Id := N + 635;\n-   Name_Metrics                        : constant Name_Id := N + 636;\n-   Name_Naming                         : constant Name_Id := N + 637;\n-   Name_Object_Dir                     : constant Name_Id := N + 638;\n-   Name_Pretty_Printer                 : constant Name_Id := N + 639;\n-   Name_Project                        : constant Name_Id := N + 640;\n-   Name_Separate_Suffix                : constant Name_Id := N + 641;\n-   Name_Source_Dirs                    : constant Name_Id := N + 642;\n-   Name_Source_Files                   : constant Name_Id := N + 643;\n-   Name_Source_List_File               : constant Name_Id := N + 644;\n-   Name_Spec                           : constant Name_Id := N + 645;\n-   Name_Spec_Suffix                    : constant Name_Id := N + 646;\n-   Name_Specification                  : constant Name_Id := N + 647;\n-   Name_Specification_Exceptions       : constant Name_Id := N + 648;\n-   Name_Specification_Suffix           : constant Name_Id := N + 649;\n-   Name_Switches                       : constant Name_Id := N + 650;\n+   Name_Ada_Roots                      : constant Name_Id := N + 593;\n+   Name_Binder                         : constant Name_Id := N + 594;\n+   Name_Binder_Driver                  : constant Name_Id := N + 595;\n+   Name_Body_Suffix                    : constant Name_Id := N + 596;\n+   Name_Builder                        : constant Name_Id := N + 597;\n+   Name_Compiler                       : constant Name_Id := N + 598;\n+   Name_Compiler_Driver                : constant Name_Id := N + 599;\n+   Name_Compiler_Kind                  : constant Name_Id := N + 600;\n+   Name_Compute_Dependency             : constant Name_Id := N + 601;\n+   Name_Cross_Reference                : constant Name_Id := N + 602;\n+   Name_Default_Linker                 : constant Name_Id := N + 603;\n+   Name_Default_Switches               : constant Name_Id := N + 604;\n+   Name_Dependency_Option              : constant Name_Id := N + 605;\n+   Name_Exec_Dir                       : constant Name_Id := N + 606;\n+   Name_Executable                     : constant Name_Id := N + 607;\n+   Name_Executable_Suffix              : constant Name_Id := N + 608;\n+   Name_Extends                        : constant Name_Id := N + 609;\n+   Name_Externally_Built               : constant Name_Id := N + 610;\n+   Name_Finder                         : constant Name_Id := N + 611;\n+   Name_Global_Configuration_Pragmas   : constant Name_Id := N + 612;\n+   Name_Gnatls                         : constant Name_Id := N + 613;\n+   Name_Gnatstub                       : constant Name_Id := N + 614;\n+   Name_Implementation                 : constant Name_Id := N + 615;\n+   Name_Implementation_Exceptions      : constant Name_Id := N + 616;\n+   Name_Implementation_Suffix          : constant Name_Id := N + 617;\n+   Name_Include_Option                 : constant Name_Id := N + 618;\n+   Name_Language_Processing            : constant Name_Id := N + 619;\n+   Name_Languages                      : constant Name_Id := N + 620;\n+   Name_Library_Ali_Dir                : constant Name_Id := N + 621;\n+   Name_Library_Dir                    : constant Name_Id := N + 622;\n+   Name_Library_Auto_Init              : constant Name_Id := N + 623;\n+   Name_Library_GCC                    : constant Name_Id := N + 624;\n+   Name_Library_Interface              : constant Name_Id := N + 625;\n+   Name_Library_Kind                   : constant Name_Id := N + 626;\n+   Name_Library_Name                   : constant Name_Id := N + 627;\n+   Name_Library_Options                : constant Name_Id := N + 628;\n+   Name_Library_Reference_Symbol_File  : constant Name_Id := N + 629;\n+   Name_Library_Src_Dir                : constant Name_Id := N + 630;\n+   Name_Library_Symbol_File            : constant Name_Id := N + 631;\n+   Name_Library_Symbol_Policy          : constant Name_Id := N + 632;\n+   Name_Library_Version                : constant Name_Id := N + 633;\n+   Name_Linker                         : constant Name_Id := N + 634;\n+   Name_Local_Configuration_Pragmas    : constant Name_Id := N + 635;\n+   Name_Locally_Removed_Files          : constant Name_Id := N + 636;\n+   Name_Metrics                        : constant Name_Id := N + 637;\n+   Name_Naming                         : constant Name_Id := N + 638;\n+   Name_Object_Dir                     : constant Name_Id := N + 639;\n+   Name_Pretty_Printer                 : constant Name_Id := N + 640;\n+   Name_Project                        : constant Name_Id := N + 641;\n+   Name_Separate_Suffix                : constant Name_Id := N + 642;\n+   Name_Source_Dirs                    : constant Name_Id := N + 643;\n+   Name_Source_Files                   : constant Name_Id := N + 644;\n+   Name_Source_List_File               : constant Name_Id := N + 645;\n+   Name_Spec                           : constant Name_Id := N + 646;\n+   Name_Spec_Suffix                    : constant Name_Id := N + 647;\n+   Name_Specification                  : constant Name_Id := N + 648;\n+   Name_Specification_Exceptions       : constant Name_Id := N + 649;\n+   Name_Specification_Suffix           : constant Name_Id := N + 650;\n+   Name_Switches                       : constant Name_Id := N + 651;\n \n    --  Other miscellaneous names used in front end\n \n-   Name_Unaligned_Valid                : constant Name_Id := N + 651;\n+   Name_Unaligned_Valid                : constant Name_Id := N + 652;\n \n    --  ----------------------------------------------------------------\n-   First_2005_Reserved_Word            : constant Name_Id := N + 652;\n-   Name_Interface                      : constant Name_Id := N + 652;\n-   Name_Overriding                     : constant Name_Id := N + 653;\n-   Name_Synchronized                   : constant Name_Id := N + 654;\n-   Last_2005_Reserved_Word             : constant Name_Id := N + 654;\n+   First_2005_Reserved_Word            : constant Name_Id := N + 653;\n+   Name_Interface                      : constant Name_Id := N + 653;\n+   Name_Overriding                     : constant Name_Id := N + 654;\n+   Name_Synchronized                   : constant Name_Id := N + 655;\n+   Last_2005_Reserved_Word             : constant Name_Id := N + 655;\n \n    subtype Ada_2005_Reserved_Words is\n      Name_Id range First_2005_Reserved_Word .. Last_2005_Reserved_Word;\n \n    --  Mark last defined name for consistency check in Snames body\n \n-   Last_Predefined_Name                : constant Name_Id := N + 654;\n+   Last_Predefined_Name                : constant Name_Id := N + 655;\n \n    subtype Any_Operator_Name is Name_Id range\n      First_Operator_Name .. Last_Operator_Name;\n@@ -1303,6 +1304,7 @@ package Snames is\n       Pragma_Attach_Handler,\n       Pragma_Comment,\n       Pragma_Common_Object,\n+      Pragma_Complete_Representation,\n       Pragma_Complex_Representation,\n       Pragma_Controlled,\n       Pragma_Convention,"}, {"sha": "d16232e435ae9dd0e2d0de5f75d4650b146069b5", "filename": "gcc/ada/snames.h", "status": "modified", "additions": 92, "deletions": 91, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3217dac82e78ecc5e3e428e8c14bab9047e2105/gcc%2Fada%2Fsnames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3217dac82e78ecc5e3e428e8c14bab9047e2105/gcc%2Fada%2Fsnames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.h?ref=c3217dac82e78ecc5e3e428e8c14bab9047e2105", "patch": "@@ -270,96 +270,97 @@ extern unsigned char Get_Pragma_Id (int);\n #define  Pragma_Attach_Handler                55\n #define  Pragma_Comment                       56\n #define  Pragma_Common_Object                 57\n-#define  Pragma_Complex_Representation        58\n-#define  Pragma_Controlled                    59\n-#define  Pragma_Convention                    60\n-#define  Pragma_CPP_Class                     61\n-#define  Pragma_CPP_Constructor               62\n-#define  Pragma_CPP_Virtual                   63\n-#define  Pragma_CPP_Vtable                    64\n-#define  Pragma_Debug                         65\n-#define  Pragma_Elaborate                     66\n-#define  Pragma_Elaborate_All                 67\n-#define  Pragma_Elaborate_Body                68\n-#define  Pragma_Export                        69\n-#define  Pragma_Export_Exception              70\n-#define  Pragma_Export_Function               71\n-#define  Pragma_Export_Object                 72\n-#define  Pragma_Export_Procedure              73\n-#define  Pragma_Export_Value                  74\n-#define  Pragma_Export_Valued_Procedure       75\n-#define  Pragma_External                      76\n-#define  Pragma_Finalize_Storage_Only         77\n-#define  Pragma_Ident                         78\n-#define  Pragma_Import                        79\n-#define  Pragma_Import_Exception              80\n-#define  Pragma_Import_Function               81\n-#define  Pragma_Import_Object                 82\n-#define  Pragma_Import_Procedure              83\n-#define  Pragma_Import_Valued_Procedure       84\n-#define  Pragma_Inline                        85\n-#define  Pragma_Inline_Always                 86\n-#define  Pragma_Inline_Generic                87\n-#define  Pragma_Inspection_Point              88\n-#define  Pragma_Interface_Name                89\n-#define  Pragma_Interrupt_Handler             90\n-#define  Pragma_Interrupt_Priority            91\n-#define  Pragma_Java_Constructor              92\n-#define  Pragma_Java_Interface                93\n-#define  Pragma_Keep_Names                    94\n-#define  Pragma_Link_With                     95\n-#define  Pragma_Linker_Alias                  96\n-#define  Pragma_Linker_Constructor            97\n-#define  Pragma_Linker_Destructor             98\n-#define  Pragma_Linker_Options                99\n-#define  Pragma_Linker_Section                100\n-#define  Pragma_List                          101\n-#define  Pragma_Machine_Attribute             102\n-#define  Pragma_Main                          103\n-#define  Pragma_Main_Storage                  104\n-#define  Pragma_Memory_Size                   105\n-#define  Pragma_No_Return                     106\n-#define  Pragma_Obsolescent                   107\n-#define  Pragma_Optimize                      108\n-#define  Pragma_Optional_Overriding           109\n-#define  Pragma_Pack                          110\n-#define  Pragma_Page                          111\n-#define  Pragma_Passive                       112\n-#define  Pragma_Preelaborate                  113\n-#define  Pragma_Preelaborate_05               114\n-#define  Pragma_Priority                      115\n-#define  Pragma_Psect_Object                  116\n-#define  Pragma_Pure                          117\n-#define  Pragma_Pure_05                       118\n-#define  Pragma_Pure_Function                 119\n-#define  Pragma_Remote_Call_Interface         120\n-#define  Pragma_Remote_Types                  121\n-#define  Pragma_Share_Generic                 122\n-#define  Pragma_Shared                        123\n-#define  Pragma_Shared_Passive                124\n-#define  Pragma_Source_Reference              125\n-#define  Pragma_Stream_Convert                126\n-#define  Pragma_Subtitle                      127\n-#define  Pragma_Suppress_All                  128\n-#define  Pragma_Suppress_Debug_Info           129\n-#define  Pragma_Suppress_Initialization       130\n-#define  Pragma_System_Name                   131\n-#define  Pragma_Task_Info                     132\n-#define  Pragma_Task_Name                     133\n-#define  Pragma_Task_Storage                  134\n-#define  Pragma_Thread_Body                   135\n-#define  Pragma_Time_Slice                    136\n-#define  Pragma_Title                         137\n-#define  Pragma_Unchecked_Union               138\n-#define  Pragma_Unimplemented_Unit            139\n-#define  Pragma_Unreferenced                  140\n-#define  Pragma_Unreserve_All_Interrupts      141\n-#define  Pragma_Volatile                      142\n-#define  Pragma_Volatile_Components           143\n-#define  Pragma_Weak_External                 144\n-#define  Pragma_AST_Entry                     145\n-#define  Pragma_Interface                     146\n-#define  Pragma_Storage_Size                  147\n-#define  Pragma_Storage_Unit                  148\n+#define  Pragma_Complete_Representation       58\n+#define  Pragma_Complex_Representation        59\n+#define  Pragma_Controlled                    60\n+#define  Pragma_Convention                    61\n+#define  Pragma_CPP_Class                     62\n+#define  Pragma_CPP_Constructor               63\n+#define  Pragma_CPP_Virtual                   64\n+#define  Pragma_CPP_Vtable                    65\n+#define  Pragma_Debug                         66\n+#define  Pragma_Elaborate                     67\n+#define  Pragma_Elaborate_All                 68\n+#define  Pragma_Elaborate_Body                69\n+#define  Pragma_Export                        70\n+#define  Pragma_Export_Exception              71\n+#define  Pragma_Export_Function               72\n+#define  Pragma_Export_Object                 73\n+#define  Pragma_Export_Procedure              74\n+#define  Pragma_Export_Value                  75\n+#define  Pragma_Export_Valued_Procedure       76\n+#define  Pragma_External                      77\n+#define  Pragma_Finalize_Storage_Only         78\n+#define  Pragma_Ident                         79\n+#define  Pragma_Import                        80\n+#define  Pragma_Import_Exception              81\n+#define  Pragma_Import_Function               82\n+#define  Pragma_Import_Object                 83\n+#define  Pragma_Import_Procedure              84\n+#define  Pragma_Import_Valued_Procedure       85\n+#define  Pragma_Inline                        86\n+#define  Pragma_Inline_Always                 87\n+#define  Pragma_Inline_Generic                88\n+#define  Pragma_Inspection_Point              89\n+#define  Pragma_Interface_Name                90\n+#define  Pragma_Interrupt_Handler             91\n+#define  Pragma_Interrupt_Priority            92\n+#define  Pragma_Java_Constructor              93\n+#define  Pragma_Java_Interface                94\n+#define  Pragma_Keep_Names                    95\n+#define  Pragma_Link_With                     96\n+#define  Pragma_Linker_Alias                  97\n+#define  Pragma_Linker_Constructor            98\n+#define  Pragma_Linker_Destructor             99\n+#define  Pragma_Linker_Options                100\n+#define  Pragma_Linker_Section                101\n+#define  Pragma_List                          102\n+#define  Pragma_Machine_Attribute             103\n+#define  Pragma_Main                          104\n+#define  Pragma_Main_Storage                  105\n+#define  Pragma_Memory_Size                   106\n+#define  Pragma_No_Return                     107\n+#define  Pragma_Obsolescent                   108\n+#define  Pragma_Optimize                      109\n+#define  Pragma_Optional_Overriding           110\n+#define  Pragma_Pack                          111\n+#define  Pragma_Page                          112\n+#define  Pragma_Passive                       113\n+#define  Pragma_Preelaborate                  114\n+#define  Pragma_Preelaborate_05               115\n+#define  Pragma_Priority                      116\n+#define  Pragma_Psect_Object                  117\n+#define  Pragma_Pure                          118\n+#define  Pragma_Pure_05                       119\n+#define  Pragma_Pure_Function                 120\n+#define  Pragma_Remote_Call_Interface         121\n+#define  Pragma_Remote_Types                  122\n+#define  Pragma_Share_Generic                 123\n+#define  Pragma_Shared                        124\n+#define  Pragma_Shared_Passive                125\n+#define  Pragma_Source_Reference              126\n+#define  Pragma_Stream_Convert                127\n+#define  Pragma_Subtitle                      128\n+#define  Pragma_Suppress_All                  129\n+#define  Pragma_Suppress_Debug_Info           130\n+#define  Pragma_Suppress_Initialization       131\n+#define  Pragma_System_Name                   132\n+#define  Pragma_Task_Info                     133\n+#define  Pragma_Task_Name                     134\n+#define  Pragma_Task_Storage                  135\n+#define  Pragma_Thread_Body                   136\n+#define  Pragma_Time_Slice                    137\n+#define  Pragma_Title                         138\n+#define  Pragma_Unchecked_Union               139\n+#define  Pragma_Unimplemented_Unit            140\n+#define  Pragma_Unreferenced                  141\n+#define  Pragma_Unreserve_All_Interrupts      142\n+#define  Pragma_Volatile                      143\n+#define  Pragma_Volatile_Components           144\n+#define  Pragma_Weak_External                 145\n+#define  Pragma_AST_Entry                     146\n+#define  Pragma_Interface                     147\n+#define  Pragma_Storage_Size                  148\n+#define  Pragma_Storage_Unit                  149\n \n /* End of snames.h (C version of Snames package spec) */"}]}