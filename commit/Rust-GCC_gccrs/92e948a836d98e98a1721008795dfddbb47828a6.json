{"sha": "92e948a836d98e98a1721008795dfddbb47828a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJlOTQ4YTgzNmQ5OGU5OGExNzIxMDA4Nzk1ZGZkZGJiNDc4MjhhNg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-05-26T17:38:51Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-05-26T17:38:51Z"}, "message": "make TS_BLOCK a substructure of TS_BASE\n\nmake TS_BLOCK a substructure of TS_BASE\ngcc/\n\t* tree.c (initialize_tree_contains_struct): Mark TS_BLOCK as\n\tTS_BASE instead of TS_COMMON.\n\t(find_decls_types_r): Check for TS_TYPED structure before looking at\n\tTREE_TYPE.\n\t* tree.h (struct tree_block): Inherit from tree_base, not tree_common.\n\tAdd chain field.\n\t(BLOCK_CHAIN): Use new chain field.\n\ngcc/c-family/\n\t* c-common.c (warning_candidate_p): Check for BLOCKs.\n\ngcc/java/\n\t* decl.c (poplevel): Don't access TREE_TYPE of BLOCKs.\n\t* expr.c (build_jni_stub): Likewise.\n\nFrom-SVN: r174300", "tree": {"sha": "d221c28a4588d4ee669bca17061040874f839eab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d221c28a4588d4ee669bca17061040874f839eab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92e948a836d98e98a1721008795dfddbb47828a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e948a836d98e98a1721008795dfddbb47828a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92e948a836d98e98a1721008795dfddbb47828a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e948a836d98e98a1721008795dfddbb47828a6/comments", "author": null, "committer": null, "parents": [{"sha": "d74be3171290547f3311f959351e0c3afe7dcd21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74be3171290547f3311f959351e0c3afe7dcd21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d74be3171290547f3311f959351e0c3afe7dcd21"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "eb152d6bf21da38c8093e5f1b9d1a2ff60c67c0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e948a836d98e98a1721008795dfddbb47828a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e948a836d98e98a1721008795dfddbb47828a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92e948a836d98e98a1721008795dfddbb47828a6", "patch": "@@ -1,3 +1,13 @@\n+2011-05-26  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* tree.c (initialize_tree_contains_struct): Mark TS_BLOCK as\n+\tTS_BASE instead of TS_COMMON.\n+\t(find_decls_types_r): Check for TS_TYPED structure before looking at\n+\tTREE_TYPE.\n+\t* tree.h (struct tree_block): Inherit from tree_base, not tree_common.\n+\tAdd chain field.\n+\t(BLOCK_CHAIN): Use new chain field.\n+\n 2011-05-26  Pat Haugen <pthaugen@us.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_register_move_cost): Make LR/CTR"}, {"sha": "f15bd2f9f4bf08f15a3ab0783178e2312fd0e4fa", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e948a836d98e98a1721008795dfddbb47828a6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e948a836d98e98a1721008795dfddbb47828a6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=92e948a836d98e98a1721008795dfddbb47828a6", "patch": "@@ -1,3 +1,7 @@\n+2011-05-26  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* c-common.c (warning_candidate_p): Check for BLOCKs.\n+\n 2011-05-26  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* c-common.h (struct c_common_identifier): Inherit from tree_typed,"}, {"sha": "fa7ebc5d30d7ba2e5aca15d1829284bc1ae086fc", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e948a836d98e98a1721008795dfddbb47828a6/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e948a836d98e98a1721008795dfddbb47828a6/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=92e948a836d98e98a1721008795dfddbb47828a6", "patch": "@@ -2367,6 +2367,9 @@ warning_candidate_p (tree x)\n   if (DECL_P (x) && DECL_ARTIFICIAL (x))\n     return 0;\n \n+  if (TREE_CODE (x) == BLOCK)\n+    return 0;\n+\n   /* VOID_TYPE_P (TREE_TYPE (x)) is workaround for cp/tree.c\n      (lvalue_p) crash on TRY/CATCH. */\n   if (TREE_TYPE (x) == NULL_TREE || VOID_TYPE_P (TREE_TYPE (x)))"}, {"sha": "62add859dd71939dc83a7191fced7bc78a482928", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e948a836d98e98a1721008795dfddbb47828a6/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e948a836d98e98a1721008795dfddbb47828a6/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=92e948a836d98e98a1721008795dfddbb47828a6", "patch": "@@ -1,3 +1,8 @@\n+2011-05-26  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* decl.c (poplevel): Don't access TREE_TYPE of BLOCKs.\n+\t* expr.c (build_jni_stub): Likewise.\n+\n 2011-05-24  Joseph Myers  <joseph@codesourcery.com>\n \n \t* Make-lang.in ($(XGCJ)$(exeext)): Use libcommon-target.a instead"}, {"sha": "e95813680881bb31917567d2718d0a3857c6b5ff", "filename": "gcc/java/decl.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e948a836d98e98a1721008795dfddbb47828a6/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e948a836d98e98a1721008795dfddbb47828a6/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=92e948a836d98e98a1721008795dfddbb47828a6", "patch": "@@ -1425,10 +1425,7 @@ poplevel (int keep, int reverse, int functionbody)\n \n   block = 0;\n   if (keep || functionbody)\n-    {\n-      block = make_node (BLOCK);\n-      TREE_TYPE (block) = void_type_node;\n-    }\n+    block = make_node (BLOCK);\n \n   if (current_binding_level->exception_range)\n     expand_end_java_handler (current_binding_level->exception_range);\n@@ -1456,7 +1453,7 @@ poplevel (int keep, int reverse, int functionbody)\n \t    }\n \t  *var = NULL;\n \t    \n-\t  bind = build3 (BIND_EXPR, TREE_TYPE (block), BLOCK_VARS (block), \n+\t  bind = build3 (BIND_EXPR, void_type_node, BLOCK_VARS (block), \n \t\t\t BLOCK_EXPR_BODY (block), block);\n \t  BIND_EXPR_BODY (bind) = current_binding_level->stmts;\n \t  "}, {"sha": "b9293e0ca4e98ec84c152e57ae7e7645161a6332", "filename": "gcc/java/expr.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e948a836d98e98a1721008795dfddbb47828a6/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e948a836d98e98a1721008795dfddbb47828a6/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=92e948a836d98e98a1721008795dfddbb47828a6", "patch": "@@ -2649,7 +2649,6 @@ build_jni_stub (tree method)\n   method_args = DECL_ARGUMENTS (method);\n   block = build_block (env_var, NULL_TREE, method_args, NULL_TREE);\n   TREE_SIDE_EFFECTS (block) = 1;\n-  TREE_TYPE (block) = TREE_TYPE (TREE_TYPE (method));\n \n   /* Compute the local `env' by calling _Jv_GetJNIEnvNewFrame.  */\n   body = build2 (MODIFY_EXPR, ptr_type_node, env_var,"}, {"sha": "178873c84773edb124fd2b9058dacda49c484841", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e948a836d98e98a1721008795dfddbb47828a6/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e948a836d98e98a1721008795dfddbb47828a6/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=92e948a836d98e98a1721008795dfddbb47828a6", "patch": "@@ -368,6 +368,7 @@ initialize_tree_contains_struct (void)\n       switch (ts_code)\n \t{\n \tcase TS_TYPED:\n+\tcase TS_BLOCK:\n \t  MARK_TS_BASE (code);\n \t  break;\n \n@@ -389,7 +390,6 @@ initialize_tree_contains_struct (void)\n \tcase TS_TYPE_COMMON:\n \tcase TS_LIST:\n \tcase TS_VEC:\n-\tcase TS_BLOCK:\n \tcase TS_BINFO:\n \tcase TS_STATEMENT_LIST:\n \tcase TS_OMP_CLAUSE:\n@@ -4892,7 +4892,8 @@ find_decls_types_r (tree *tp, int *ws, void *data)\n       fld_worklist_push (BLOCK_ABSTRACT_ORIGIN (t), fld);\n     }\n \n-  if (TREE_CODE (t) != IDENTIFIER_NODE)\n+  if (TREE_CODE (t) != IDENTIFIER_NODE\n+      && CODE_CONTAINS_STRUCT (TREE_CODE (t), TS_TYPED))\n     fld_worklist_push (TREE_TYPE (t), fld);\n \n   return NULL_TREE;"}, {"sha": "e214b12aac7a654908f67a38b30988e639623c00", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e948a836d98e98a1721008795dfddbb47828a6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e948a836d98e98a1721008795dfddbb47828a6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=92e948a836d98e98a1721008795dfddbb47828a6", "patch": "@@ -2051,9 +2051,7 @@ struct GTY(()) tree_omp_clause {\n   VEC_index (tree, BLOCK_NONLOCALIZED_VARS (NODE), N)\n #define BLOCK_SUBBLOCKS(NODE) (BLOCK_CHECK (NODE)->block.subblocks)\n #define BLOCK_SUPERCONTEXT(NODE) (BLOCK_CHECK (NODE)->block.supercontext)\n-/* Note: when changing this, make sure to find the places\n-   that use chainon or nreverse.  */\n-#define BLOCK_CHAIN(NODE) TREE_CHAIN (BLOCK_CHECK (NODE))\n+#define BLOCK_CHAIN(NODE) (BLOCK_CHECK (NODE)->block.chain)\n #define BLOCK_ABSTRACT_ORIGIN(NODE) (BLOCK_CHECK (NODE)->block.abstract_origin)\n #define BLOCK_ABSTRACT(NODE) (BLOCK_CHECK (NODE)->block.abstract_flag)\n \n@@ -2094,7 +2092,8 @@ struct GTY(()) tree_omp_clause {\n #define BLOCK_SOURCE_LOCATION(NODE) (BLOCK_CHECK (NODE)->block.locus)\n \n struct GTY(()) tree_block {\n-  struct tree_common common;\n+  struct tree_base base;\n+  tree chain;\n \n   unsigned abstract_flag : 1;\n   unsigned block_num : 31;"}]}