{"sha": "fb7bc7fb8a42a1c87c51240388ba3100ec097ad3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI3YmM3ZmI4YTQyYTFjODdjNTEyNDAzODhiYTMxMDBlYzA5N2FkMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-29T01:47:24Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-29T01:47:24Z"}, "message": "v850.c (TARGET_PROMOTE_PROTOTYPES): New.\n\n\t* config/v850/v850.c (TARGET_PROMOTE_PROTOTYPES): New.\n\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n\t(TARGET_RETURN_IN_MEMORY): Likewise.\n\t(TARGET_SETUP_INCOMING_VARARGS): Likewise.\n\t(v850_return_in_memory): Likewise.\n\t(v850_setup_incoming_varargs): Likewise.\n\t* config/v850/v850.h (PROMOTE_PROTOTYPES): Remove.\n\t(SETUP_INCOMING_VARARGS): Likewise.\n\t(RETURN_IN_MEMORY): Likewise.\n\t(STRUCT_VALUE): Likewise.\n\nFrom-SVN: r76831", "tree": {"sha": "649a31561c8b966a2898994f71390a2e593fdbf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/649a31561c8b966a2898994f71390a2e593fdbf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb7bc7fb8a42a1c87c51240388ba3100ec097ad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb7bc7fb8a42a1c87c51240388ba3100ec097ad3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb7bc7fb8a42a1c87c51240388ba3100ec097ad3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb7bc7fb8a42a1c87c51240388ba3100ec097ad3/comments", "author": null, "committer": null, "parents": [{"sha": "0fd818e75b938916df5a3202341c7f8fe30ca28a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd818e75b938916df5a3202341c7f8fe30ca28a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fd818e75b938916df5a3202341c7f8fe30ca28a"}], "stats": {"total": 70, "additions": 51, "deletions": 19}, "files": [{"sha": "5c3f403be5e6f4d2e15c4e0afb08ae16a3dd0e46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7bc7fb8a42a1c87c51240388ba3100ec097ad3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7bc7fb8a42a1c87c51240388ba3100ec097ad3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb7bc7fb8a42a1c87c51240388ba3100ec097ad3", "patch": "@@ -1,3 +1,16 @@\n+2004-01-28  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/v850/v850.c (TARGET_PROMOTE_PROTOTYPES): New.\n+\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n+\t(TARGET_RETURN_IN_MEMORY): Likewise.\n+\t(TARGET_SETUP_INCOMING_VARARGS): Likewise.\n+\t(v850_return_in_memory): Likewise.\n+\t(v850_setup_incoming_varargs): Likewise.\n+\t* config/v850/v850.h (PROMOTE_PROTOTYPES): Remove.\n+\t(SETUP_INCOMING_VARARGS): Likewise.\n+\t(RETURN_IN_MEMORY): Likewise.\n+\t(STRUCT_VALUE): Likewise.\n+\n 2004-01-28  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/fr30/fr30.c (TARGET_PROMOTE_PROTOTYPES): New."}, {"sha": "103534798bcb22b9d22d9fb1dfd2f64ee69cb4a7", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7bc7fb8a42a1c87c51240388ba3100ec097ad3/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7bc7fb8a42a1c87c51240388ba3100ec097ad3/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=fb7bc7fb8a42a1c87c51240388ba3100ec097ad3", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for NEC V850 series\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n    Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n@@ -64,6 +64,9 @@ static void v850_insert_attributes   (tree, tree *);\n static void v850_select_section (tree, int, unsigned HOST_WIDE_INT);\n static void v850_encode_data_area    (tree, rtx);\n static void v850_encode_section_info (tree, rtx, int);\n+static bool v850_return_in_memory    (tree, tree);\n+static void v850_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t\t tree, int *, int);\n \n /* Information about the various small memory areas.  */\n struct small_memory_info small_memory[ (int)SMALL_MEMORY_max ] =\n@@ -116,6 +119,17 @@ static int v850_interrupt_p = FALSE;\n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG v850_reorg\n \n+#undef TARGET_PROMOTE_PROTOTYPES\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+\n+#undef TARGET_STRUCT_VALUE_RTX\n+#define TARGET_STRUCT_VALUE_RTX hook_rtx_tree_int_null\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY v850_return_in_memory\n+\n+#undef TARGET_SETUP_INCOMING_VARARGS\n+#define TARGET_SETUP_INCOMING_VARARGS v850_setup_incoming_varargs\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Sometimes certain combinations of command options do not make\n@@ -3397,3 +3411,24 @@ v850_select_section (tree exp,\n   else\n     readonly_data_section ();\n }\n+\f\n+/* Worker function for TARGET_RETURN_IN_MEMORY.  */\n+\n+static bool\n+v850_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+{\n+  /* Return values > 8 bytes in length in memory.  */\n+  return int_size_in_bytes (type) > 8 || TYPE_MODE (type) == BLKmode;\n+}\n+\f\n+/* Worker function for TARGET_SETUP_INCOMING_VARARGS.  */\n+\n+static void\n+v850_setup_incoming_varargs (CUMULATIVE_ARGS *ca,\n+\t\t\t     enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t     tree type ATTRIBUTE_UNUSED,\n+\t\t\t     int *pretend_arg_size ATTRIBUTE_UNUSED,\n+\t\t\t     int second_time ATTRIBUTE_UNUSED)\n+{\n+  ca->anonymous_args = (!TARGET_GHS ? 1 : 0);\n+}"}, {"sha": "4233d7258d05f75572b2bb772d0c844f3edebf4a", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb7bc7fb8a42a1c87c51240388ba3100ec097ad3/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb7bc7fb8a42a1c87c51240388ba3100ec097ad3/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=fb7bc7fb8a42a1c87c51240388ba3100ec097ad3", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler. NEC V850 series\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n    Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n@@ -124,7 +124,7 @@ extern int target_flags;\n      as GHS.  We don't have enough documentation on their conventions\n      to be compatible.\n \n-     * Tests of SETUP_INCOMING_VARARGS need to be made runtime checks\n+     * Tests of TARGET_SETUP_INCOMING_VARARGS need to be made runtime checks\n      since it depends on TARGET_GHS.  */\n #define TARGET_GHS (target_flags & MASK_GHS)\n  \n@@ -707,9 +707,6 @@ enum reg_class\n     abort ();\t\t\t\t\t\t\t\t\\\n }\n \n-/* A guess for the V850.  */\n-#define PROMOTE_PROTOTYPES 1\n-\n /* Keep the stack pointer constant throughout the function.  */\n #define ACCUMULATE_OUTGOING_ARGS 1\n \n@@ -776,10 +773,6 @@ struct cum_arg { int nbytes; int anonymous_args; };\n    space allocated by the caller.  */\n #define OUTGOING_REG_PARM_STACK_SPACE\n \n-/* Do any setup necessary for varargs/stdargs functions.  */\n-#define SETUP_INCOMING_VARARGS(CUM, MODE, TYPE, PAS, SECOND) \\\n-  (CUM).anonymous_args = (!TARGET_GHS ? 1 : 0);\n-\n /* Implement `va_arg'.  */\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n   v850_va_arg (valist, type)\n@@ -812,16 +805,7 @@ struct cum_arg { int nbytes; int anonymous_args; };\n \n #define FUNCTION_VALUE_REGNO_P(N) ((N) == 10)\n \n-/* Return values > 8 bytes in length in memory.  */\n #define DEFAULT_PCC_STRUCT_RETURN 0\n-#define RETURN_IN_MEMORY(TYPE)  \\\n-  (int_size_in_bytes (TYPE) > 8 || TYPE_MODE (TYPE) == BLKmode)\n-\n-/* Register in which address to store a structure value\n-   is passed to a function.  On the V850 it's passed as\n-   the first parameter.  */\n-\n-#define STRUCT_VALUE 0\n \n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in"}]}