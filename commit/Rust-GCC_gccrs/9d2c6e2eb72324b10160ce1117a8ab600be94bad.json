{"sha": "9d2c6e2eb72324b10160ce1117a8ab600be94bad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQyYzZlMmViNzIzMjRiMTAxNjBjZTExMTdhOGFiNjAwYmU5NGJhZA==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim.kuvyrkov@linaro.org", "date": "2017-06-16T09:30:43Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2017-06-16T09:30:43Z"}, "message": "Add prefetch configuration to aarch64 backend.\n\n\t* config/aarch64/aarch64-protos.h (struct cpu_prefetch_tune):\n\tNew tune structure.\n\t(struct tune_params): Use cpu_prefetch_tune instead of cache_line_size.\n\t[Unrelated to main purpose of the patch] Place the pointer field last\n\tto enable type checking errors when tune structure are wrongly merged.\n\t* config/aarch64/aarch64.c (generic_prefetch_tune,)\n\t(exynosm1_prefetch_tune, qdf24xx_prefetch_tune,)\n\t(thunderx2t99_prefetch_tune): New tune constants.\n\t(tune_params *_tunings): Update all tunings (no functional change).\n\t(aarch64_override_options_internal): Set PARAM_SIMULTANEOUS_PREFETCHES,\n\tPARAM_L1_CACHE_SIZE, PARAM_L1_CACHE_LINE_SIZE, and PARAM_L2_CACHE_SIZE\n\tfrom tunings structures.\n\nChange-Id: I1ddbac1863dcf078a2e5b14dd904debc76a7da94\n\nFrom-SVN: r249240", "tree": {"sha": "f1b7174e6289a48cb0e9b65a00ac1eca952bec5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1b7174e6289a48cb0e9b65a00ac1eca952bec5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d2c6e2eb72324b10160ce1117a8ab600be94bad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2c6e2eb72324b10160ce1117a8ab600be94bad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d2c6e2eb72324b10160ce1117a8ab600be94bad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2c6e2eb72324b10160ce1117a8ab600be94bad/comments", "author": {"login": "maxim-kuvyrkov", "id": 12545699, "node_id": "MDQ6VXNlcjEyNTQ1Njk5", "avatar_url": "https://avatars.githubusercontent.com/u/12545699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxim-kuvyrkov", "html_url": "https://github.com/maxim-kuvyrkov", "followers_url": "https://api.github.com/users/maxim-kuvyrkov/followers", "following_url": "https://api.github.com/users/maxim-kuvyrkov/following{/other_user}", "gists_url": "https://api.github.com/users/maxim-kuvyrkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxim-kuvyrkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxim-kuvyrkov/subscriptions", "organizations_url": "https://api.github.com/users/maxim-kuvyrkov/orgs", "repos_url": "https://api.github.com/users/maxim-kuvyrkov/repos", "events_url": "https://api.github.com/users/maxim-kuvyrkov/events{/privacy}", "received_events_url": "https://api.github.com/users/maxim-kuvyrkov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b783399af92647bd0765b9d51afab04dea31344b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b783399af92647bd0765b9d51afab04dea31344b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b783399af92647bd0765b9d51afab04dea31344b"}], "stats": {"total": 133, "additions": 105, "deletions": 28}, "files": [{"sha": "a78e7363a69b844bd05270ff2e8a44b3b0fbc8c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2c6e2eb72324b10160ce1117a8ab600be94bad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2c6e2eb72324b10160ce1117a8ab600be94bad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d2c6e2eb72324b10160ce1117a8ab600be94bad", "patch": "@@ -1,3 +1,18 @@\n+2017-06-16  Maxim Kuvyrkov  <maxim.kuvyrkov@linaro.org>\n+\n+        * config/aarch64/aarch64-protos.h (struct cpu_prefetch_tune):\n+        New tune structure.\n+        (struct tune_params): Use cpu_prefetch_tune instead of cache_line_size.\n+        [Unrelated to main purpose of the patch] Place the pointer field last\n+        to enable type checking errors when tune structure are wrongly merged.\n+        * config/aarch64/aarch64.c (generic_prefetch_tune,)\n+        (exynosm1_prefetch_tune, qdf24xx_prefetch_tune,)\n+        (thunderx2t99_prefetch_tune): New tune constants.\n+        (tune_params *_tunings): Update all tunings (no functional change).\n+        (aarch64_override_options_internal): Set PARAM_SIMULTANEOUS_PREFETCHES,\n+        PARAM_L1_CACHE_SIZE, PARAM_L1_CACHE_LINE_SIZE, and PARAM_L2_CACHE_SIZE\n+        from tunings structures.\n+\n 2017-06-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/81094"}, {"sha": "bb06139c4bb647c8bc98418fef3891561419431e", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2c6e2eb72324b10160ce1117a8ab600be94bad/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2c6e2eb72324b10160ce1117a8ab600be94bad/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=9d2c6e2eb72324b10160ce1117a8ab600be94bad", "patch": "@@ -203,6 +203,15 @@ struct cpu_approx_modes\n   const unsigned int recip_sqrt;\t/* Reciprocal square root.  */\n };\n \n+/* Cache prefetch settings for prefetch-loop-arrays.  */\n+struct cpu_prefetch_tune\n+{\n+  const int num_slots;\n+  const int l1_cache_size;\n+  const int l1_cache_line_size;\n+  const int l2_cache_size;\n+};\n+\n struct tune_params\n {\n   const struct cpu_cost_table *insn_extra_cost;\n@@ -224,9 +233,6 @@ struct tune_params\n   int min_div_recip_mul_df;\n   /* Value for aarch64_case_values_threshold; or 0 for the default.  */\n   unsigned int max_case_values;\n-  /* Value for PARAM_L1_CACHE_LINE_SIZE; or 0 to use the default.  */\n-  unsigned int cache_line_size;\n-\n /* An enum specifying how to take into account CPU autoprefetch capabilities\n    during instruction scheduling:\n    - AUTOPREFETCHER_OFF: Do not take autoprefetch capabilities into account.\n@@ -244,6 +250,10 @@ struct tune_params\n   } autoprefetcher_model;\n \n   unsigned int extra_tuning_flags;\n+\n+  /* Place prefetch struct pointer at the end to enable type checking\n+     errors when tune_params misses elements (e.g., from erroneous merges).  */\n+  const struct cpu_prefetch_tune *prefetch;\n };\n \n #define AARCH64_FUSION_PAIR(x, name) \\"}, {"sha": "e3296c0570f3919ca81d5c32e6e0f76074966caf", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 77, "deletions": 25, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2c6e2eb72324b10160ce1117a8ab600be94bad/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2c6e2eb72324b10160ce1117a8ab600be94bad/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=9d2c6e2eb72324b10160ce1117a8ab600be94bad", "patch": "@@ -526,6 +526,39 @@ static const cpu_approx_modes xgene1_approx_modes =\n   AARCH64_APPROX_ALL\t/* recip_sqrt  */\n };\n \n+/* Generic prefetch settings (which disable prefetch).  */\n+static const cpu_prefetch_tune generic_prefetch_tune =\n+{\n+  0,\t\t\t/* num_slots  */\n+  -1,\t\t\t/* l1_cache_size  */\n+  -1,\t\t\t/* l1_cache_line_size  */\n+  -1\t\t\t/* l2_cache_size  */\n+};\n+\n+static const cpu_prefetch_tune exynosm1_prefetch_tune =\n+{\n+  0,\t\t\t/* num_slots  */\n+  -1,\t\t\t/* l1_cache_size  */\n+  64,\t\t\t/* l1_cache_line_size  */\n+  -1\t\t\t/* l2_cache_size  */\n+};\n+\n+static const cpu_prefetch_tune qdf24xx_prefetch_tune =\n+{\n+  0,\t\t\t/* num_slots  */\n+  -1,\t\t\t/* l1_cache_size  */\n+  64,\t\t\t/* l1_cache_line_size  */\n+  -1\t\t\t/* l2_cache_size  */\n+};\n+\n+static const cpu_prefetch_tune thunderx2t99_prefetch_tune =\n+{\n+  0,\t\t\t/* num_slots  */\n+  -1,\t\t\t/* l1_cache_size  */\n+  64,\t\t\t/* l1_cache_line_size  */\n+  -1\t\t\t/* l2_cache_size  */\n+};\n+\n static const struct tune_params generic_tunings =\n {\n   &cortexa57_extra_costs,\n@@ -546,9 +579,9 @@ static const struct tune_params generic_tunings =\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n   0,\t/* max_case_values.  */\n-  0,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_NONE),\t/* tune_flags.  */\n+  &generic_prefetch_tune\n };\n \n static const struct tune_params cortexa35_tunings =\n@@ -572,9 +605,9 @@ static const struct tune_params cortexa35_tunings =\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n   0,\t/* max_case_values.  */\n-  0,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_NONE),\t/* tune_flags.  */\n+  &generic_prefetch_tune\n };\n \n static const struct tune_params cortexa53_tunings =\n@@ -598,9 +631,9 @@ static const struct tune_params cortexa53_tunings =\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n   0,\t/* max_case_values.  */\n-  0,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_NONE),\t/* tune_flags.  */\n+  &generic_prefetch_tune\n };\n \n static const struct tune_params cortexa57_tunings =\n@@ -624,9 +657,9 @@ static const struct tune_params cortexa57_tunings =\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n   0,\t/* max_case_values.  */\n-  0,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_RENAME_FMA_REGS)\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_RENAME_FMA_REGS),\t/* tune_flags.  */\n+  &generic_prefetch_tune\n };\n \n static const struct tune_params cortexa72_tunings =\n@@ -650,9 +683,9 @@ static const struct tune_params cortexa72_tunings =\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n   0,\t/* max_case_values.  */\n-  0,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_NONE),\t/* tune_flags.  */\n+  &generic_prefetch_tune\n };\n \n static const struct tune_params cortexa73_tunings =\n@@ -676,11 +709,13 @@ static const struct tune_params cortexa73_tunings =\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n   0,\t/* max_case_values.  */\n-  0,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_NONE),\t/* tune_flags.  */\n+  &generic_prefetch_tune\n };\n \n+\n+\n static const struct tune_params exynosm1_tunings =\n {\n   &exynosm1_extra_costs,\n@@ -701,9 +736,9 @@ static const struct tune_params exynosm1_tunings =\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n   48,\t/* max_case_values.  */\n-  64,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_WEAK, /* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_NONE) /* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_NONE), /* tune_flags.  */\n+  &exynosm1_prefetch_tune\n };\n \n static const struct tune_params thunderx_tunings =\n@@ -726,9 +761,9 @@ static const struct tune_params thunderx_tunings =\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n   0,\t/* max_case_values.  */\n-  0,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_OFF,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_SLOW_UNALIGNED_LDPW)\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_SLOW_UNALIGNED_LDPW),\t/* tune_flags.  */\n+  &generic_prefetch_tune\n };\n \n static const struct tune_params xgene1_tunings =\n@@ -751,9 +786,9 @@ static const struct tune_params xgene1_tunings =\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n   0,\t/* max_case_values.  */\n-  0,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_OFF,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_NONE),\t/* tune_flags.  */\n+  &generic_prefetch_tune\n };\n \n static const struct tune_params qdf24xx_tunings =\n@@ -777,9 +812,9 @@ static const struct tune_params qdf24xx_tunings =\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n   0,\t/* max_case_values.  */\n-  64,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_STRONG,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_NONE)\t\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_NONE),\t\t/* tune_flags.  */\n+  &qdf24xx_prefetch_tune\n };\n \n static const struct tune_params thunderx2t99_tunings =\n@@ -802,9 +837,9 @@ static const struct tune_params thunderx2t99_tunings =\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n   0,\t/* max_case_values.  */\n-  64,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_OFF,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_NONE),\t/* tune_flags.  */\n+  &thunderx2t99_prefetch_tune\n };\n \n /* Support for fine-grained override of the tuning structures.  */\n@@ -8747,10 +8782,27 @@ aarch64_override_options_internal (struct gcc_options *opts)\n \t\t\t opts->x_param_values,\n \t\t\t global_options_set.x_param_values);\n \n-  /* Set the L1 cache line size.  */\n-  if (selected_cpu->tune->cache_line_size != 0)\n+  /* Set up parameters to be used in prefetching algorithm.  Do not\n+     override the defaults unless we are tuning for a core we have\n+     researched values for.  */\n+  if (aarch64_tune_params.prefetch->num_slots > 0)\n+    maybe_set_param_value (PARAM_SIMULTANEOUS_PREFETCHES,\n+\t\t\t   aarch64_tune_params.prefetch->num_slots,\n+\t\t\t   opts->x_param_values,\n+\t\t\t   global_options_set.x_param_values);\n+  if (aarch64_tune_params.prefetch->l1_cache_size >= 0)\n+    maybe_set_param_value (PARAM_L1_CACHE_SIZE,\n+\t\t\t   aarch64_tune_params.prefetch->l1_cache_size,\n+\t\t\t   opts->x_param_values,\n+\t\t\t   global_options_set.x_param_values);\n+  if (aarch64_tune_params.prefetch->l1_cache_line_size >= 0)\n     maybe_set_param_value (PARAM_L1_CACHE_LINE_SIZE,\n-\t\t\t   selected_cpu->tune->cache_line_size,\n+\t\t\t   aarch64_tune_params.prefetch->l1_cache_line_size,\n+\t\t\t   opts->x_param_values,\n+\t\t\t   global_options_set.x_param_values);\n+  if (aarch64_tune_params.prefetch->l2_cache_size >= 0)\n+    maybe_set_param_value (PARAM_L2_CACHE_SIZE,\n+\t\t\t   aarch64_tune_params.prefetch->l2_cache_size,\n \t\t\t   opts->x_param_values,\n \t\t\t   global_options_set.x_param_values);\n "}]}