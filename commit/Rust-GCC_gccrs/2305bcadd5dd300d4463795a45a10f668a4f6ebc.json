{"sha": "2305bcadd5dd300d4463795a45a10f668a4f6ebc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMwNWJjYWRkNWRkMzAwZDQ0NjM3OTVhNDVhMTBmNjY4YTRmNmViYw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-05-11T21:50:11Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-05-11T21:50:11Z"}, "message": "(store_fixed_bit_field): Delete code to handle MODE_FLOAT values here.\n\n(store_fixed_bit_field): Delete code to handle\nMODE_FLOAT values here.\n(store_bit_field): Put it here instead.\n\nFrom-SVN: r7279", "tree": {"sha": "354005203f6e35c76c9e39ddabfdd7981bb440b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/354005203f6e35c76c9e39ddabfdd7981bb440b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2305bcadd5dd300d4463795a45a10f668a4f6ebc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2305bcadd5dd300d4463795a45a10f668a4f6ebc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2305bcadd5dd300d4463795a45a10f668a4f6ebc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2305bcadd5dd300d4463795a45a10f668a4f6ebc/comments", "author": null, "committer": null, "parents": [{"sha": "7b3ab05e789445ae6b21463ec01cc2d77bd21171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3ab05e789445ae6b21463ec01cc2d77bd21171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b3ab05e789445ae6b21463ec01cc2d77bd21171"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "85cf0dec5200ee0553aa7266007a826807412618", "filename": "gcc/expmed.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2305bcadd5dd300d4463795a45a10f668a4f6ebc/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2305bcadd5dd300d4463795a45a10f668a4f6ebc/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=2305bcadd5dd300d4463795a45a10f668a4f6ebc", "patch": "@@ -350,6 +350,17 @@ store_bit_field (str_rtx, bitsize, bitnum, fieldmode, value, align, total_size)\n       op0 = protect_from_queue (op0, 1);\n     }\n \n+  /* If VALUE is a floating-point mode, access it as an integer of the\n+     corresponding size.  This can occur on a machine with 64 bit registers\n+     that uses SFmode for float.  This can also occur for unaligned float\n+     structure fields.  */\n+  if (GET_MODE_CLASS (GET_MODE (value)) == MODE_FLOAT)\n+    {\n+      if (GET_CODE (value) != REG)\n+\tvalue = copy_to_reg (value);\n+      value = gen_rtx (SUBREG, word_mode, value, 0);\n+    }\n+\n   /* Now OFFSET is nonzero only if OP0 is memory\n      and is therefore always measured in bytes.  */\n \n@@ -520,17 +531,6 @@ store_fixed_bit_field (op0, offset, bitsize, bitpos, value, struct_align)\n   int all_zero = 0;\n   int all_one = 0;\n \n-  /* If VALUE is a floating-point mode, access it as an integer of the\n-     corresponding size.  This can occur on a machine with 64 bit registers\n-     that uses SFmode for float.  This can also occur for unaligned float\n-     structure fields.  */\n-  if (GET_MODE_CLASS (GET_MODE (value)) == MODE_FLOAT)\n-    {\n-      if (GET_CODE (value) != REG)\n-\tvalue = copy_to_reg (value);\n-      value = gen_rtx (SUBREG, word_mode, value, 0);\n-    }\n-\n   /* There is a case not handled here:\n      a structure with a known alignment of just a halfword\n      and a field split across two aligned halfwords within the structure."}]}