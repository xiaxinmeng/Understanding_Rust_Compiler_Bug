{"sha": "daa762f01d8cf932484b7df122a5e872439bc92c", "node_id": "C_kwDOANBUbNoAKGRhYTc2MmYwMWQ4Y2Y5MzI0ODRiN2RmMTIyYTVlODcyNDM5YmM5MmM", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-09-28T21:26:20Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-09-28T21:26:20Z"}, "message": "c++: ttp matching with constrained auto parm [PR99909]\n\nHere, when unifying TT with S, processing_template_decl is unset, and\nthis foils the dependence checks in do_auto_deduction for avoiding\nchecking constraints on an auto when the initializer is dependent.\n\nThis patch fixes this by making sure processing_template_decl is set\naround the call to unify from coerce_template_template_parms; this seems\nsensible because we're unifying one set of template parameters with\nanother, so we're dealing with templated trees throughout.\n\n\tPR c++/99909\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (coerce_template_template_parms): Keep\n\tprocessing_template_decl set around the call to unify as well.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-ttp3.C: New test.", "tree": {"sha": "063ac2526b95709c1d3f05da5c45acba98d6f260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/063ac2526b95709c1d3f05da5c45acba98d6f260"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daa762f01d8cf932484b7df122a5e872439bc92c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daa762f01d8cf932484b7df122a5e872439bc92c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daa762f01d8cf932484b7df122a5e872439bc92c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daa762f01d8cf932484b7df122a5e872439bc92c/comments", "author": null, "committer": null, "parents": [{"sha": "2fcfc7d66862c67677f0e1c46391292d5a21a567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fcfc7d66862c67677f0e1c46391292d5a21a567", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fcfc7d66862c67677f0e1c46391292d5a21a567"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "1dcdffe322a16334565ca19136fd483619162274", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa762f01d8cf932484b7df122a5e872439bc92c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa762f01d8cf932484b7df122a5e872439bc92c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=daa762f01d8cf932484b7df122a5e872439bc92c", "patch": "@@ -7994,12 +7994,12 @@ coerce_template_template_parms (tree parm_parms,\n       /* So coerce P's args to apply to A's parms, and then deduce between A's\n \t args and the converted args.  If that succeeds, A is at least as\n \t specialized as P, so they match.*/\n+      processing_template_decl_sentinel ptds (/*reset*/false);\n+      ++processing_template_decl;\n       tree pargs = template_parms_level_to_args (parm_parms);\n       pargs = add_outermost_template_args (outer_args, pargs);\n-      ++processing_template_decl;\n       pargs = coerce_template_parms (arg_parms, pargs, NULL_TREE, tf_none,\n \t\t\t\t     /*require_all*/true, /*use_default*/true);\n-      --processing_template_decl;\n       if (pargs != error_mark_node)\n \t{\n \t  tree targs = make_tree_vec (nargs);"}, {"sha": "11b629392cfec792eb015740e451f24e01818ee9", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-ttp3.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa762f01d8cf932484b7df122a5e872439bc92c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ttp3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa762f01d8cf932484b7df122a5e872439bc92c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ttp3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ttp3.C?ref=daa762f01d8cf932484b7df122a5e872439bc92c", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/99909\n+// { dg-do compile { target c++20 } }\n+\n+template<class T> constexpr bool always_true = true;\n+template<class T> concept C = always_true<T>;\n+\n+template<C auto> struct S;\n+\n+template<template<auto> class TT> void f() { }\n+\n+template void f<S>();"}]}