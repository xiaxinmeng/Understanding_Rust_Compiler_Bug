{"sha": "22d67c60fa3b3fec0891c03693dbdd86f8389815", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJkNjdjNjBmYTNiM2ZlYzA4OTFjMDM2OTNkYmRkODZmODM4OTgxNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-07-16T15:38:59Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-07-16T15:38:59Z"}, "message": "PR libstdc++/28277 (partial: valarray bits)\n\n2006-07-16  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/28277 (partial: valarray bits)\n\t* include/std/std_valarray.h (valarray<>::shift(int),\n\tvalarray<>::cshift(int)): Avoid __builtin_alloca with no limit,\n\tdo the work in place.\n\t* testsuite/26_numerics/valarray/28277.cc: New.\n\nFrom-SVN: r115501", "tree": {"sha": "70986ec4894ffbf4f16a13ba7ddf34c97a72dfd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70986ec4894ffbf4f16a13ba7ddf34c97a72dfd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22d67c60fa3b3fec0891c03693dbdd86f8389815", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d67c60fa3b3fec0891c03693dbdd86f8389815", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d67c60fa3b3fec0891c03693dbdd86f8389815", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d67c60fa3b3fec0891c03693dbdd86f8389815/comments", "author": null, "committer": null, "parents": [{"sha": "d9f392cf044aea472234cd09ebd86d3a4eccf4be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f392cf044aea472234cd09ebd86d3a4eccf4be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9f392cf044aea472234cd09ebd86d3a4eccf4be"}], "stats": {"total": 115, "additions": 91, "deletions": 24}, "files": [{"sha": "541c6c020b1322354d56018a970c633960951552", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d67c60fa3b3fec0891c03693dbdd86f8389815/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d67c60fa3b3fec0891c03693dbdd86f8389815/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=22d67c60fa3b3fec0891c03693dbdd86f8389815", "patch": "@@ -1,3 +1,11 @@\n+2006-07-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/28277 (partial: valarray bits)\n+\t* include/std/std_valarray.h (valarray<>::shift(int),\n+\tvalarray<>::cshift(int)): Avoid __builtin_alloca with no limit,\n+\tdo the work in place.\n+\t* testsuite/26_numerics/valarray/28277.cc: New.\n+\n 2006-07-15  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/28277 (partial: ostream bits 1)"}, {"sha": "47b00a520bc4166d386c25c1ad7cb582ae4c9545", "filename": "libstdc++-v3/include/std/std_valarray.h", "status": "modified", "additions": 39, "deletions": 24, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d67c60fa3b3fec0891c03693dbdd86f8389815/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_valarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d67c60fa3b3fec0891c03693dbdd86f8389815/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_valarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_valarray.h?ref=22d67c60fa3b3fec0891c03693dbdd86f8389815", "patch": "@@ -778,63 +778,78 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return std::__valarray_sum(_M_data, _M_data + _M_size);\n     }\n \n-  template <class _Tp>\n+  template<class _Tp>\n      inline valarray<_Tp>\n      valarray<_Tp>::shift(int __n) const\n      {\n-       _Tp* const __a = static_cast<_Tp*>\n-         (__builtin_alloca(sizeof(_Tp) * _M_size));\n+       valarray<_Tp> __ret;\n+       _Tp* __restrict__ __tmp_M_data =\n+\t std::__valarray_get_storage<_Tp>(_M_size);\n+\n        if (__n == 0)                          // no shift\n-         std::__valarray_copy_construct(_M_data, _M_data + _M_size, __a);\n+         std::__valarray_copy_construct(_M_data, _M_data + _M_size,\n+\t\t\t\t\t__tmp_M_data);\n        else if (__n > 0)         // __n > 0: shift left\n          {                 \n            if (size_t(__n) > _M_size)\n-             std::__valarray_default_construct(__a, __a + __n);\n+             std::__valarray_default_construct(__tmp_M_data,\n+\t\t\t\t\t       __tmp_M_data + __n);\n            else\n              {\n                std::__valarray_copy_construct(_M_data + __n,\n-\t\t\t\t\t      _M_data + _M_size, __a);\n-               std::__valarray_default_construct(__a + _M_size -__n,\n-\t\t\t\t\t\t __a + _M_size);\n+\t\t\t\t\t      _M_data + _M_size,\n+\t\t\t\t\t      __tmp_M_data);\n+               std::__valarray_default_construct(__tmp_M_data + _M_size - __n,\n+\t\t\t\t\t\t __tmp_M_data + _M_size);\n              }\n          }\n        else                        // __n < 0: shift right\n          {                          \n-           std::__valarray_copy_construct (_M_data, _M_data + _M_size + __n,\n-\t\t\t\t\t   __a - __n);\n-           std::__valarray_default_construct(__a, __a - __n);\n+           std::__valarray_copy_construct(_M_data, _M_data + _M_size + __n,\n+\t\t\t\t\t  __tmp_M_data - __n);\n+           std::__valarray_default_construct(__tmp_M_data,\n+\t\t\t\t\t     __tmp_M_data - __n);\n          }\n-       return valarray<_Tp>(__a, _M_size);\n+\n+       __ret._M_size = _M_size;\n+       __ret._M_data = __tmp_M_data;\n+       return __ret;\n      }\n \n-  template <class _Tp>\n+  template<class _Tp>\n      inline valarray<_Tp>\n-     valarray<_Tp>::cshift (int __n) const\n+     valarray<_Tp>::cshift(int __n) const\n      {\n-       _Tp* const __a = static_cast<_Tp*>\n-         (__builtin_alloca (sizeof(_Tp) * _M_size));\n+       valarray<_Tp> __ret;\n+       _Tp* __restrict__ __tmp_M_data =\n+\t std::__valarray_get_storage<_Tp>(_M_size);\n+\n        if (__n == 0)               // no cshift\n-         std::__valarray_copy_construct(_M_data, _M_data + _M_size, __a);\n+         std::__valarray_copy_construct(_M_data, _M_data + _M_size,\n+\t\t\t\t\t__tmp_M_data);\n        else if (__n > 0)           // cshift left\n          {               \n            std::__valarray_copy_construct(_M_data, _M_data + __n,\n-\t\t\t\t\t  __a + _M_size - __n);\n+\t\t\t\t\t  __tmp_M_data + _M_size - __n);\n            std::__valarray_copy_construct(_M_data + __n, _M_data + _M_size,\n-\t\t\t\t\t  __a);\n+\t\t\t\t\t  __tmp_M_data);\n          }\n        else                        // cshift right\n          {                       \n            std::__valarray_copy_construct\n-             (_M_data + _M_size + __n, _M_data + _M_size, __a);\n+             (_M_data + _M_size + __n, _M_data + _M_size, __tmp_M_data);\n            std::__valarray_copy_construct\n-             (_M_data, _M_data + _M_size+__n, __a - __n);\n+             (_M_data, _M_data + _M_size + __n, __tmp_M_data - __n);\n          }\n-       return valarray<_Tp>(__a, _M_size);\n+\n+       __ret._M_size = _M_size;\n+       __ret._M_data = __tmp_M_data;\n+       return __ret;\n      }\n \n-  template <class _Tp>\n+  template<class _Tp>\n     inline void\n-    valarray<_Tp>::resize (size_t __n, _Tp __c)\n+    valarray<_Tp>::resize(size_t __n, _Tp __c)\n     {\n       // This complication is so to make valarray<valarray<T> > work\n       // even though it is not required by the standard.  Nobody should"}, {"sha": "52f4c714085c0416e81ff4186399db636a8dddb0", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/28277.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22d67c60fa3b3fec0891c03693dbdd86f8389815/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2F28277.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22d67c60fa3b3fec0891c03693dbdd86f8389815/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2F28277.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2F28277.cc?ref=22d67c60fa3b3fec0891c03693dbdd86f8389815", "patch": "@@ -0,0 +1,44 @@\n+// 2006-07-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <valarray>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/28277\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const std::valarray<int> v1(1, 5000000);\n+\n+  const std::valarray<int> v2 = v1.shift(1);\n+  VERIFY( v2.size() == v1.size() );\n+  VERIFY( v2[v1.size() - 1] == 0 );\n+\n+  const std::valarray<int> v3 = v2.cshift(-1);\n+  VERIFY( v3.size() == v2.size() );\n+  VERIFY( v3[0] == 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}