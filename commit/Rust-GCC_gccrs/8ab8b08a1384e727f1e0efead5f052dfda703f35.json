{"sha": "8ab8b08a1384e727f1e0efead5f052dfda703f35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFiOGIwOGExMzg0ZTcyN2YxZTBlZmVhZDVmMDUyZGZkYTcwM2YzNQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-12-21T21:09:17Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-12-21T21:09:17Z"}, "message": "re PR fortran/69121 (IEEE_SCALB is not generic)\n\n2018-12-21  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/69121\n\t* ieee/ieee_arithmetic.F90: Provide missing interfaces for IEEE_SCALB.\n\n2018-12-21  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/69121\n\t* gfortran.dg/ieee/ieee_9.f90: New test.\n\nFrom-SVN: r267343", "tree": {"sha": "8cdea604544a9c90796000edc51b2434e4cc0a77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cdea604544a9c90796000edc51b2434e4cc0a77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ab8b08a1384e727f1e0efead5f052dfda703f35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab8b08a1384e727f1e0efead5f052dfda703f35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ab8b08a1384e727f1e0efead5f052dfda703f35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab8b08a1384e727f1e0efead5f052dfda703f35/comments", "author": null, "committer": null, "parents": [{"sha": "4cd3e7df0b7dc202d10ed7935918f1194adfc514", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cd3e7df0b7dc202d10ed7935918f1194adfc514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cd3e7df0b7dc202d10ed7935918f1194adfc514"}], "stats": {"total": 235, "additions": 224, "deletions": 11}, "files": [{"sha": "1dd460aa17217184defe7b0347908b82a3a558f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab8b08a1384e727f1e0efead5f052dfda703f35/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab8b08a1384e727f1e0efead5f052dfda703f35/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ab8b08a1384e727f1e0efead5f052dfda703f35", "patch": "@@ -1,3 +1,8 @@\n+2018-12-21  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/69121\n+\t* gfortran.dg/ieee/ieee_9.f90: New test.\n+\n 2018-12-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/86524"}, {"sha": "e62503de8f521435dcd57daca7df184bf83e60e3", "filename": "gcc/testsuite/gfortran.dg/ieee/ieee_9.f90", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab8b08a1384e727f1e0efead5f052dfda703f35/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fieee_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab8b08a1384e727f1e0efead5f052dfda703f35/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fieee_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fieee_9.f90?ref=8ab8b08a1384e727f1e0efead5f052dfda703f35", "patch": "@@ -0,0 +1,70 @@\n+! { dg-do run }\n+program foo\n+   use ieee_arithmetic\n+   use iso_fortran_env\n+   integer i, p\n+   real x\n+   x = 4\n+   i = 4\n+\n+   if (int8 > 0) then\n+      if (real32 > 0) then\n+         p = int(ieee_scalb(real(x, real32), int(i, int8)))\n+         if (p /= 64) stop 1\n+      endif\n+      if (real64 > 0) then\n+         p = int(ieee_scalb(real(x, real64), int(i, int8)))\n+         if (p /= 64) stop 2\n+      endif\n+      if (real128 > 0) then\n+         p = int(ieee_scalb(real(x, real128), int(i, int8)))\n+         if (p /= 64) stop 3\n+      end if\n+   end if\n+\n+   if (int16 > 0) then\n+      if (real32 > 0) then\n+         p = int(ieee_scalb(real(x, real32), int(i, int16)))\n+         if (p /= 64) stop 4\n+      endif\n+      if (real64 > 0) then\n+         p = int(ieee_scalb(real(x, real64), int(i, int16)))\n+         if (p /= 64) stop 5\n+      endif\n+      if (real128 > 0) then\n+         p = int(ieee_scalb(real(x, real128), int(i, int16)))\n+         if (p /= 64) stop 6\n+      end if\n+   end if\n+\n+   if (int32 > 0) then\n+      if (real32 > 0) then\n+         p = int(ieee_scalb(real(x, real32), int(i, int32)))\n+         if (p /= 64) stop 7\n+      endif\n+      if (real64 > 0) then\n+         p = int(ieee_scalb(real(x, real64), int(i, int32)))\n+         if (p /= 64) stop 8\n+      endif\n+      if (real128 > 0) then\n+         p = int(ieee_scalb(real(x, real128), int(i, int32)))\n+         if (p /= 64) stop 9\n+      end if\n+   end if\n+\n+   if (int64 > 0) then\n+      if (real32 > 0) then\n+         p = int(ieee_scalb(real(x, real32), int(i, int64)))\n+         if (p /= 64) stop 10\n+      endif\n+      if (real64 > 0) then\n+         p = int(ieee_scalb(real(x, real64), int(i, int64)))\n+         if (p /= 64) stop 11\n+      endif\n+      if (real128 > 0) then\n+         p = int(ieee_scalb(real(x, real128), int(i, int64)))\n+         if (p /= 64) stop 12\n+      end if\n+   end if\n+\n+end program foo"}, {"sha": "03efb11a29df4f32c0a0e7b690871e4ad29223f3", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab8b08a1384e727f1e0efead5f052dfda703f35/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab8b08a1384e727f1e0efead5f052dfda703f35/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=8ab8b08a1384e727f1e0efead5f052dfda703f35", "patch": "@@ -1,6 +1,11 @@\n+2018-12-21  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/69121\n+\t* ieee/ieee_arithmetic.F90: Provide missing interfaces for IEEE_SCALB.\n+\n 2018-12-20  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n-\t* libgfortran/ieee/ieee_arithmetic.F90: Re-organize file to \n+\t* ieee/ieee_arithmetic.F90: Re-organize file to \n \teliminate #ifdef ... #endif.  No functional change.\n \n 2018-12-09  Thomas Koenig  <tkoenig@gcc.gnu.org>"}, {"sha": "09375605d5b18de8553a42ab876d733845b02ab5", "filename": "libgfortran/ieee/ieee_arithmetic.F90", "status": "modified", "additions": 143, "deletions": 10, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab8b08a1384e727f1e0efead5f052dfda703f35/libgfortran%2Fieee%2Fieee_arithmetic.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab8b08a1384e727f1e0efead5f052dfda703f35/libgfortran%2Fieee%2Fieee_arithmetic.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fieee%2Fieee_arithmetic.F90?ref=8ab8b08a1384e727f1e0efead5f052dfda703f35", "patch": "@@ -532,37 +532,170 @@ module IEEE_ARITHMETIC\n   ! IEEE_SCALB\n \n   interface\n-    elemental real(kind=4) function _gfortran_ieee_scalb_4 (X, I)\n+#ifdef HAVE_GFC_INTEGER_16\n+#ifdef HAVE_GFC_REAL_16\n+    elemental real(kind=16) function _gfortran_ieee_scalb_16_16 (X, I)\n+      real(kind=16), intent(in) :: X\n+      integer(kind=16), intent(in) :: I\n+    end function\n+#endif\n+#ifdef HAVE_GFC_REAL_10\n+    elemental real(kind=10) function _gfortran_ieee_scalb_10_16 (X, I)\n+      real(kind=10), intent(in) :: X\n+      integer(kind=16), intent(in) :: I\n+    end function\n+#endif\n+    elemental real(kind=8) function _gfortran_ieee_scalb_8_16 (X, I)\n+      real(kind=8), intent(in) :: X\n+      integer(kind=16), intent(in) :: I\n+    end function\n+    elemental real(kind=4) function _gfortran_ieee_scalb_4_16 (X, I)\n       real(kind=4), intent(in) :: X\n-      integer, intent(in) :: I\n+      integer(kind=16), intent(in) :: I\n     end function\n-    elemental real(kind=8) function _gfortran_ieee_scalb_8 (X, I)\n+#endif\n+\n+#ifdef HAVE_GFC_INTEGER_8\n+#ifdef HAVE_GFC_REAL_16\n+    elemental real(kind=16) function _gfortran_ieee_scalb_16_8 (X, I)\n+      real(kind=16), intent(in) :: X\n+      integer(kind=8), intent(in) :: I\n+    end function\n+#endif\n+#ifdef HAVE_GFC_REAL_10\n+    elemental real(kind=10) function _gfortran_ieee_scalb_10_8 (X, I)\n+      real(kind=10), intent(in) :: X\n+      integer(kind=8), intent(in) :: I\n+    end function\n+#endif\n+    elemental real(kind=8) function _gfortran_ieee_scalb_8_8 (X, I)\n       real(kind=8), intent(in) :: X\n-      integer, intent(in) :: I\n+      integer(kind=8), intent(in) :: I\n+    end function\n+    elemental real(kind=4) function _gfortran_ieee_scalb_4_8 (X, I)\n+      real(kind=4), intent(in) :: X\n+      integer(kind=8), intent(in) :: I\n+    end function\n+#endif\n+\n+#ifdef HAVE_GFC_INTEGER_2\n+#ifdef HAVE_GFC_REAL_16\n+    elemental real(kind=16) function _gfortran_ieee_scalb_16_2 (X, I)\n+      real(kind=16), intent(in) :: X\n+      integer(kind=2), intent(in) :: I\n     end function\n+#endif\n #ifdef HAVE_GFC_REAL_10\n-    elemental real(kind=10) function _gfortran_ieee_scalb_10 (X, I)\n+    elemental real(kind=10) function _gfortran_ieee_scalb_10_2 (X, I)\n       real(kind=10), intent(in) :: X\n-      integer, intent(in) :: I\n+      integer(kind=2), intent(in) :: I\n+    end function\n+#endif\n+    elemental real(kind=8) function _gfortran_ieee_scalb_8_2 (X, I)\n+      real(kind=8), intent(in) :: X\n+      integer(kind=2), intent(in) :: I\n+    end function\n+    elemental real(kind=4) function _gfortran_ieee_scalb_4_2 (X, I)\n+      real(kind=4), intent(in) :: X\n+      integer(kind=2), intent(in) :: I\n+    end function\n+#endif\n+\n+#ifdef HAVE_GFC_INTEGER_1\n+#ifdef HAVE_GFC_REAL_16\n+    elemental real(kind=16) function _gfortran_ieee_scalb_16_1 (X, I)\n+      real(kind=16), intent(in) :: X\n+      integer(kind=1), intent(in) :: I\n     end function\n #endif\n+#ifdef HAVE_GFC_REAL_10\n+    elemental real(kind=10) function _gfortran_ieee_scalb_10_1 (X, I)\n+      real(kind=10), intent(in) :: X\n+      integer(kind=1), intent(in) :: I\n+    end function\n+#endif\n+    elemental real(kind=8) function _gfortran_ieee_scalb_8_1 (X, I)\n+      real(kind=8), intent(in) :: X\n+      integer(kind=1), intent(in) :: I\n+    end function\n+    elemental real(kind=4) function _gfortran_ieee_scalb_4_1 (X, I)\n+      real(kind=4), intent(in) :: X\n+      integer(kind=1), intent(in) :: I\n+    end function\n+#endif\n+\n #ifdef HAVE_GFC_REAL_16\n-    elemental real(kind=16) function _gfortran_ieee_scalb_16 (X, I)\n+    elemental real(kind=16) function _gfortran_ieee_scalb_16_4 (X, I)\n       real(kind=16), intent(in) :: X\n       integer, intent(in) :: I\n     end function\n #endif\n+#ifdef HAVE_GFC_REAL_10\n+    elemental real(kind=10) function _gfortran_ieee_scalb_10_4 (X, I)\n+      real(kind=10), intent(in) :: X\n+      integer, intent(in) :: I\n+    end function\n+#endif\n+    elemental real(kind=8) function _gfortran_ieee_scalb_8_4 (X, I)\n+      real(kind=8), intent(in) :: X\n+      integer, intent(in) :: I\n+    end function\n+    elemental real(kind=4) function _gfortran_ieee_scalb_4_4 (X, I)\n+      real(kind=4), intent(in) :: X\n+      integer, intent(in) :: I\n+    end function\n   end interface\n \n   interface IEEE_SCALB\n     procedure &\n+#ifdef HAVE_GFC_INTEGER_16\n+#ifdef HAVE_GFC_REAL_16\n+    _gfortran_ieee_scalb_16_16, &\n+#endif\n+#ifdef HAVE_GFC_REAL_10\n+    _gfortran_ieee_scalb_10_16, &\n+#endif\n+    _gfortran_ieee_scalb_8_16, &\n+    _gfortran_ieee_scalb_4_16, &\n+#endif\n+#ifdef HAVE_GFC_INTEGER_8\n+#ifdef HAVE_GFC_REAL_16\n+    _gfortran_ieee_scalb_16_8, &\n+#endif\n+#ifdef HAVE_GFC_REAL_10\n+    _gfortran_ieee_scalb_10_8, &\n+#endif\n+    _gfortran_ieee_scalb_8_8, &\n+    _gfortran_ieee_scalb_4_8, &\n+#endif\n+#ifdef HAVE_GFC_INTEGER_2\n+#ifdef HAVE_GFC_REAL_16\n+    _gfortran_ieee_scalb_16_2, &\n+#endif\n+#ifdef HAVE_GFC_REAL_10\n+    _gfortran_ieee_scalb_10_2, &\n+#endif\n+    _gfortran_ieee_scalb_8_2, &\n+    _gfortran_ieee_scalb_4_2, &\n+#endif\n+#ifdef HAVE_GFC_INTEGER_1\n+#ifdef HAVE_GFC_REAL_16\n+    _gfortran_ieee_scalb_16_1, &\n+#endif\n+#ifdef HAVE_GFC_REAL_10\n+    _gfortran_ieee_scalb_10_1, &\n+#endif\n+    _gfortran_ieee_scalb_8_1, &\n+    _gfortran_ieee_scalb_4_1, &\n+#endif\n #ifdef HAVE_GFC_REAL_16\n-      _gfortran_ieee_scalb_16, &\n+    _gfortran_ieee_scalb_16_4, &\n #endif\n #ifdef HAVE_GFC_REAL_10\n-      _gfortran_ieee_scalb_10, &\n+    _gfortran_ieee_scalb_10_4, &\n #endif\n-      _gfortran_ieee_scalb_8, _gfortran_ieee_scalb_4\n+      _gfortran_ieee_scalb_8_4, &\n+      _gfortran_ieee_scalb_4_4\n   end interface\n   public :: IEEE_SCALB\n "}]}