{"sha": "8fc021c0988113e1fcc5ec026f2382b074894e95", "node_id": "C_kwDOANBUbNoAKDhmYzAyMWMwOTg4MTEzZTFmY2M1ZWMwMjZmMjM4MmIwNzQ4OTRlOTU", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-03-16T13:42:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-17T08:25:40Z"}, "message": "[Ada] Fix documentation of using attribute Loop_Entry in pragmas\n\nAttribute Loop_Entry was initially only allowed to appear in pragmas\nLoop_Variant and Loop_Invariant. Then it was also allowed to appear in\npragmas Assert, Assert_And_Cut and Assume, but this change was not\nreflected in the GNAT RM.\n\ngcc/ada/\n\n\t* doc/gnat_rm/implementation_defined_attributes.rst\n\t(Loop_Entry): Mention pragmas Assert, Assert_And_Cut and Assume;\n\trefill.\n\t* gnat_rm.texi: Regenerate.", "tree": {"sha": "b83e004d792eb1eba5a7559918c2ba7b89b90b1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b83e004d792eb1eba5a7559918c2ba7b89b90b1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fc021c0988113e1fcc5ec026f2382b074894e95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc021c0988113e1fcc5ec026f2382b074894e95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fc021c0988113e1fcc5ec026f2382b074894e95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc021c0988113e1fcc5ec026f2382b074894e95/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cff43618e6f300915ff9061608a974728315146", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cff43618e6f300915ff9061608a974728315146", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cff43618e6f300915ff9061608a974728315146"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "1b4f4fe5704e879743f2d81c9d08089ff35fb0c3", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_attributes.rst", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc021c0988113e1fcc5ec026f2382b074894e95/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc021c0988113e1fcc5ec026f2382b074894e95/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_attributes.rst?ref=8fc021c0988113e1fcc5ec026f2382b074894e95", "patch": "@@ -629,10 +629,13 @@ to the value an expression had upon entry to the subprogram. The\n relevant loop is either identified by the given loop name, or it is the\n innermost enclosing loop when no loop name is given.\n \n-A ``Loop_Entry`` attribute can only occur within a\n-``Loop_Variant`` or ``Loop_Invariant`` pragma. A common use of\n-``Loop_Entry`` is to compare the current value of objects with their\n-initial value at loop entry, in a ``Loop_Invariant`` pragma.\n+A ``Loop_Entry`` attribute can only occur within an ``Assert``,\n+``Assert_And_Cut``, ``Assume``, ``Loop_Variant`` or ``Loop_Invariant`` pragma.\n+In addition, such a pragma must be one of the items in the sequence\n+of statements of a loop body, or nested inside block statements that\n+appear in the sequence of statements of a loop body.\n+A common use of ``Loop_Entry`` is to compare the current value of objects with\n+their initial value at loop entry, in a ``Loop_Invariant`` pragma.\n \n The effect of using ``X'Loop_Entry`` is the same as declaring\n a constant initialized with the initial value of ``X`` at loop"}, {"sha": "7e9a7ecffecedabd85e66f47073cd03b148c7a8a", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc021c0988113e1fcc5ec026f2382b074894e95/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc021c0988113e1fcc5ec026f2382b074894e95/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=8fc021c0988113e1fcc5ec026f2382b074894e95", "patch": "@@ -11028,10 +11028,13 @@ to the value an expression had upon entry to the subprogram. The\n relevant loop is either identified by the given loop name, or it is the\n innermost enclosing loop when no loop name is given.\n \n-A @code{Loop_Entry} attribute can only occur within a\n-@code{Loop_Variant} or @code{Loop_Invariant} pragma. A common use of\n-@code{Loop_Entry} is to compare the current value of objects with their\n-initial value at loop entry, in a @code{Loop_Invariant} pragma.\n+A @code{Loop_Entry} attribute can only occur within an @code{Assert},\n+@code{Assert_And_Cut}, @code{Assume}, @code{Loop_Variant} or @code{Loop_Invariant} pragma.\n+In addition, such a pragma must be one of the items in the sequence\n+of statements of a loop body, or nested inside block statements that\n+appear in the sequence of statements of a loop body.\n+A common use of @code{Loop_Entry} is to compare the current value of objects with\n+their initial value at loop entry, in a @code{Loop_Invariant} pragma.\n \n The effect of using @code{X'Loop_Entry} is the same as declaring\n a constant initialized with the initial value of @code{X} at loop"}]}