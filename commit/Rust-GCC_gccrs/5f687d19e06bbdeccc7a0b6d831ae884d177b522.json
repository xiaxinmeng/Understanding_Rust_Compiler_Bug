{"sha": "5f687d19e06bbdeccc7a0b6d831ae884d177b522", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY2ODdkMTllMDZiYmRlY2NjN2EwYjZkODMxYWU4ODRkMTc3YjUyMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2006-10-29T11:00:08Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2006-10-29T11:00:08Z"}, "message": "mips.c (mips_classify_symbol): Test DECL_WEAK as well as TREE_PUBLIC when deciding whether to return...\n\ngcc/\n\t* config/mips/mips.c (mips_classify_symbol): Test DECL_WEAK as well\n\tas TREE_PUBLIC when deciding whether to return SYMBOL_GOT_GLOBAL.\n\nFrom-SVN: r118137", "tree": {"sha": "5bad4102c289292464c6c20e2b0dd7f332628659", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bad4102c289292464c6c20e2b0dd7f332628659"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f687d19e06bbdeccc7a0b6d831ae884d177b522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f687d19e06bbdeccc7a0b6d831ae884d177b522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f687d19e06bbdeccc7a0b6d831ae884d177b522", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f687d19e06bbdeccc7a0b6d831ae884d177b522/comments", "author": null, "committer": null, "parents": [{"sha": "a8db47cb5889a381d0a40c903243a9945299fbb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8db47cb5889a381d0a40c903243a9945299fbb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8db47cb5889a381d0a40c903243a9945299fbb9"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "20b251ce597cb831b07c36fa40b3611c6d441a8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f687d19e06bbdeccc7a0b6d831ae884d177b522/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f687d19e06bbdeccc7a0b6d831ae884d177b522/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f687d19e06bbdeccc7a0b6d831ae884d177b522", "patch": "@@ -1,3 +1,8 @@\n+2006-10-29  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/mips/mips.c (mips_classify_symbol): Test DECL_WEAK as well\n+\tas TREE_PUBLIC when deciding whether to return SYMBOL_GOT_GLOBAL.\n+\n 2006-10-29  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* config/darwin.c, config/darwin.opt, config/ia64/itanium1.md,"}, {"sha": "5fe1b505cb7e776745eeb70417f873d0774e5b8b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f687d19e06bbdeccc7a0b6d831ae884d177b522/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f687d19e06bbdeccc7a0b6d831ae884d177b522/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=5f687d19e06bbdeccc7a0b6d831ae884d177b522", "patch": "@@ -1198,6 +1198,8 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n static enum mips_symbol_type\n mips_classify_symbol (rtx x)\n {\n+  tree decl;\n+\n   if (GET_CODE (x) == LABEL_REF)\n     {\n       if (TARGET_MIPS16)\n@@ -1229,7 +1231,8 @@ mips_classify_symbol (rtx x)\n \n   if (TARGET_ABICALLS)\n     {\n-      if (SYMBOL_REF_DECL (x) == 0)\n+      decl = SYMBOL_REF_DECL (x);\n+      if (decl == 0)\n \t{\n \t  if (!SYMBOL_REF_LOCAL_P (x))\n \t    return SYMBOL_GOT_GLOBAL;\n@@ -1257,11 +1260,15 @@ mips_classify_symbol (rtx x)\n \n \t     In the third case we have more freedom since both forms of\n \t     access will work for any kind of symbol.  However, there seems\n-\t     little point in doing things differently.  */\n-\t  if (DECL_P (SYMBOL_REF_DECL (x))\n-\t      && TREE_PUBLIC (SYMBOL_REF_DECL (x))\n-\t      && !(TARGET_ABSOLUTE_ABICALLS\n-\t\t   && targetm.binds_local_p (SYMBOL_REF_DECL (x))))\n+\t     little point in doing things differently.\n+\n+\t     Note that weakref symbols are not TREE_PUBLIC, but their\n+\t     targets are global or weak symbols.  Relocations in the\n+\t     object file will be against the target symbol, so it's\n+\t     that symbol's binding that matters here.  */\n+\t  if (DECL_P (decl)\n+\t      && (TREE_PUBLIC (decl) || DECL_WEAK (decl))\n+\t      && !(TARGET_ABSOLUTE_ABICALLS && targetm.binds_local_p (decl)))\n \t    return SYMBOL_GOT_GLOBAL;\n \t}\n "}]}