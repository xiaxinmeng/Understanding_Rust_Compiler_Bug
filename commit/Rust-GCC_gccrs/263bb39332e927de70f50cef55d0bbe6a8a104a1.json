{"sha": "263bb39332e927de70f50cef55d0bbe6a8a104a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYzYmIzOTMzMmU5MjdkZTcwZjUwY2VmNTVkMGJiZTZhOGExMDRhMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-06-26T11:49:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-16T07:31:26Z"}, "message": "[Ada] Reduce use of primary stack on string concatenation\n\ngcc/ada/\n\n\t* exp_ch4.adb (Expand_Concatenate): Allocate result of string\n\tconcatenation on secondary stack when relevant.", "tree": {"sha": "cd1e94d9c4a6c4554d45d5e2741e03bbbee5a5ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd1e94d9c4a6c4554d45d5e2741e03bbbee5a5ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/263bb39332e927de70f50cef55d0bbe6a8a104a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/263bb39332e927de70f50cef55d0bbe6a8a104a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/263bb39332e927de70f50cef55d0bbe6a8a104a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/263bb39332e927de70f50cef55d0bbe6a8a104a1/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a121d54f7b59cbb424f707acd587adba4ad265d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a121d54f7b59cbb424f707acd587adba4ad265d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a121d54f7b59cbb424f707acd587adba4ad265d4"}], "stats": {"total": 114, "additions": 91, "deletions": 23}, "files": [{"sha": "6622a16c9834ded35b59d90d6335c2cbb54563b4", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 91, "deletions": 23, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263bb39332e927de70f50cef55d0bbe6a8a104a1/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263bb39332e927de70f50cef55d0bbe6a8a104a1/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=263bb39332e927de70f50cef55d0bbe6a8a104a1", "patch": "@@ -2963,12 +2963,13 @@ package body Exp_Ch4 is\n \n       --  Local Declarations\n \n-      Opnd_Typ : Entity_Id;\n-      Ent      : Entity_Id;\n-      Len      : Uint;\n-      J        : Nat;\n-      Clen     : Node_Id;\n-      Set      : Boolean;\n+      Opnd_Typ   : Entity_Id;\n+      Subtyp_Ind : Entity_Id;\n+      Ent        : Entity_Id;\n+      Len        : Uint;\n+      J          : Nat;\n+      Clen       : Node_Id;\n+      Set        : Boolean;\n \n    --  Start of processing for Expand_Concatenate\n \n@@ -3441,28 +3442,95 @@ package body Exp_Ch4 is\n       --  Initialize_Scalars is enabled. Also since this is the actual result\n       --  entity, we make sure we have debug information for the result.\n \n+      Subtyp_Ind :=\n+        Make_Subtype_Indication (Loc,\n+          Subtype_Mark => New_Occurrence_Of (Atyp, Loc),\n+          Constraint   =>\n+            Make_Index_Or_Discriminant_Constraint (Loc,\n+              Constraints => New_List (\n+                Make_Range (Loc,\n+                  Low_Bound  => Low_Bound,\n+                  High_Bound => High_Bound))));\n+\n       Ent := Make_Temporary (Loc, 'S');\n       Set_Is_Internal       (Ent);\n       Set_Debug_Info_Needed (Ent);\n \n-      --  If the bound is statically known to be out of range, we do not want\n-      --  to abort, we want a warning and a runtime constraint error. Note that\n-      --  we have arranged that the result will not be treated as a static\n-      --  constant, so we won't get an illegality during this insertion.\n+      --  If we are concatenating strings and the current scope already uses\n+      --  the secondary stack, allocate the resulting string also on the\n+      --  secondary stack to avoid putting too much pressure on the primary\n+      --  stack.\n+      --  Don't do this if -gnatd.h is set, as this will break the wrapping of\n+      --  Cnode in an Expression_With_Actions, see Expand_N_Op_Concat.\n \n-      Insert_Action (Cnode,\n-        Make_Object_Declaration (Loc,\n-          Defining_Identifier => Ent,\n-          Object_Definition   =>\n-            Make_Subtype_Indication (Loc,\n-              Subtype_Mark => New_Occurrence_Of (Atyp, Loc),\n-              Constraint   =>\n-                Make_Index_Or_Discriminant_Constraint (Loc,\n-                  Constraints => New_List (\n-                    Make_Range (Loc,\n-                      Low_Bound  => Low_Bound,\n-                      High_Bound => High_Bound))))),\n-        Suppress => All_Checks);\n+      if Atyp = Standard_String\n+        and then Uses_Sec_Stack (Current_Scope)\n+        and then RTE_Available (RE_SS_Pool)\n+        and then not Debug_Flag_Dot_H\n+      then\n+         --  Generate:\n+         --     subtype Axx is ...;\n+         --     type Ayy is access Axx;\n+         --     Rxx : Ayy := new <subtype> [storage_pool = ss_pool];\n+         --     Sxx : <subtype> renames Rxx.all;\n+\n+         declare\n+            Alloc   : Node_Id;\n+            ConstrT : constant Entity_Id := Make_Temporary (Loc, 'A');\n+            Acc_Typ : constant Entity_Id := Make_Temporary (Loc, 'A');\n+            Temp    : Entity_Id;\n+\n+         begin\n+            Insert_Action (Cnode,\n+              Make_Subtype_Declaration (Loc,\n+                Defining_Identifier => ConstrT,\n+                Subtype_Indication  => Subtyp_Ind),\n+              Suppress => All_Checks);\n+            Freeze_Itype (ConstrT, Cnode);\n+\n+            Insert_Action (Cnode,\n+              Make_Full_Type_Declaration (Loc,\n+                Defining_Identifier => Acc_Typ,\n+                Type_Definition     =>\n+                  Make_Access_To_Object_Definition (Loc,\n+                    Subtype_Indication => New_Occurrence_Of (ConstrT, Loc))),\n+              Suppress => All_Checks);\n+            Alloc :=\n+              Make_Allocator (Loc,\n+                Expression => New_Occurrence_Of (ConstrT, Loc));\n+            Set_Storage_Pool (Alloc, RTE (RE_SS_Pool));\n+            Set_Procedure_To_Call (Alloc, RTE (RE_SS_Allocate));\n+\n+            Temp := Make_Temporary (Loc, 'R', Alloc);\n+            Insert_Action (Cnode,\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier => Temp,\n+                Object_Definition   => New_Occurrence_Of (Acc_Typ, Loc),\n+                Expression          => Alloc),\n+              Suppress => All_Checks);\n+\n+            Insert_Action (Cnode,\n+              Make_Object_Renaming_Declaration (Loc,\n+                Defining_Identifier => Ent,\n+                Subtype_Mark        => New_Occurrence_Of (ConstrT, Loc),\n+                Name                =>\n+                  Make_Explicit_Dereference (Loc,\n+                    Prefix => New_Occurrence_Of (Temp, Loc))),\n+              Suppress => All_Checks);\n+         end;\n+      else\n+         --  If the bound is statically known to be out of range, we do not\n+         --  want to abort, we want a warning and a runtime constraint error.\n+         --  Note that we have arranged that the result will not be treated as\n+         --  a static constant, so we won't get an illegality during this\n+         --  insertion.\n+\n+         Insert_Action (Cnode,\n+           Make_Object_Declaration (Loc,\n+             Defining_Identifier => Ent,\n+             Object_Definition   => Subtyp_Ind),\n+           Suppress => All_Checks);\n+      end if;\n \n       --  If the result of the concatenation appears as the initializing\n       --  expression of an object declaration, we can just rename the"}]}