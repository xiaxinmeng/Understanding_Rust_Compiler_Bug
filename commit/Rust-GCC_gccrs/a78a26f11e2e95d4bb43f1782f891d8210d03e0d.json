{"sha": "a78a26f11e2e95d4bb43f1782f891d8210d03e0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc4YTI2ZjExZTJlOTVkNGJiNDNmMTc4MmY4OTFkODIxMGQwM2UwZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-06-01T12:39:32Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-06-01T12:39:32Z"}, "message": "Change use to type-based pool allocator in cselib.c.\n\n\t* cselib.c (new_elt_list):Use new type-based pool allocator.\n\t(new_elt_loc_list) Likewise.\n\t(unchain_one_elt_list) Likewise.\n\t(unchain_one_elt_loc_list) Likewise.\n\t(unchain_one_value) Likewise.\n\t(new_cselib_val) Likewise.\n\t(cselib_init) Likewise.\n\t(cselib_finish) Likewise.\n\nFrom-SVN: r223952", "tree": {"sha": "4922b6bf881981c194eb73f9f372392f87c87165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4922b6bf881981c194eb73f9f372392f87c87165"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a78a26f11e2e95d4bb43f1782f891d8210d03e0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a78a26f11e2e95d4bb43f1782f891d8210d03e0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a78a26f11e2e95d4bb43f1782f891d8210d03e0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "533ab6c4c88206b3ea5fadca9894ddd3c8113ac8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/533ab6c4c88206b3ea5fadca9894ddd3c8113ac8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/533ab6c4c88206b3ea5fadca9894ddd3c8113ac8"}], "stats": {"total": 114, "additions": 89, "deletions": 25}, "files": [{"sha": "e3723ecdf901eb420d6c90f8f83963b39b95488c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a78a26f11e2e95d4bb43f1782f891d8210d03e0d", "patch": "@@ -1,3 +1,14 @@\n+2015-06-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* cselib.c (new_elt_list):Use new type-based pool allocator.\n+\t(new_elt_loc_list) Likewise.\n+\t(unchain_one_elt_list) Likewise.\n+\t(unchain_one_elt_loc_list) Likewise.\n+\t(unchain_one_value) Likewise.\n+\t(new_cselib_val) Likewise.\n+\t(cselib_init) Likewise.\n+\t(cselib_finish) Likewise.\n+\n 2015-06-01  Martin Liska  <mliska@suse.cz>\n \n \t* config/sh/sh.c (add_constant):Use new type-based pool allocator."}, {"sha": "ea539c5e5800c14e50f2040ab98ef97d496cf285", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=a78a26f11e2e95d4bb43f1782f891d8210d03e0d", "patch": "@@ -53,6 +53,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"regs.h\"\n #include \"diagnostic-core.h\"\n+#include \"alloc-pool.h\"\n #include \"cselib.h\"\n #include \"hash-map.h\"\n #include \"langhooks.h\""}, {"sha": "fc2ed31d0bf03f46116a9c41aae7999b18a0ec94", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=a78a26f11e2e95d4bb43f1782f891d8210d03e0d", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"recog.h\"\n #include \"diagnostic-core.h\"\n+#include \"alloc-pool.h\"\n #include \"cselib.h\"\n #include \"params.h\"\n #include \"tm_p.h\""}, {"sha": "41ca20124edd418f59a6a458ebee7085338f9f83", "filename": "gcc/cprop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/gcc%2Fcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/gcc%2Fcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcprop.c?ref=a78a26f11e2e95d4bb43f1782f891d8210d03e0d", "patch": "@@ -63,6 +63,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"expr.h\"\n #include \"except.h\"\n #include \"params.h\"\n+#include \"alloc-pool.h\"\n #include \"cselib.h\"\n #include \"intl.h\"\n #include \"obstack.h\""}, {"sha": "624d0a9724e1904e5abe42e1fd08288d4235249d", "filename": "gcc/cselib.c", "status": "modified", "additions": 39, "deletions": 24, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=a78a26f11e2e95d4bb43f1782f891d8210d03e0d", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n #include \"hash-table.h\"\n #include \"dumpfile.h\"\n+#include \"alloc-pool.h\"\n #include \"cselib.h\"\n #include \"predict.h\"\n #include \"basic-block.h\"\n@@ -56,9 +57,25 @@ along with GCC; see the file COPYING3.  If not see\n #include \"bitmap.h\"\n \n /* A list of cselib_val structures.  */\n-struct elt_list {\n-    struct elt_list *next;\n-    cselib_val *elt;\n+struct elt_list\n+{\n+  struct elt_list *next;\n+  cselib_val *elt;\n+\n+  /* Pool allocation new operator.  */\n+  inline void *operator new (size_t)\n+  {\n+    return pool.allocate ();\n+  }\n+\n+  /* Delete operator utilizing pool allocation.  */\n+  inline void operator delete (void *ptr)\n+  {\n+    pool.remove ((elt_list *) ptr);\n+  }\n+\n+  /* Memory allocation pool.  */\n+  static pool_allocator<elt_list> pool;\n };\n \n static bool cselib_record_memory;\n@@ -260,7 +277,13 @@ static unsigned int cfa_base_preserved_regno = INVALID_REGNUM;\n    May or may not contain the useless values - the list is compacted\n    each time memory is invalidated.  */\n static cselib_val *first_containing_mem = &dummy_val;\n-static alloc_pool elt_loc_list_pool, elt_list_pool, cselib_val_pool, value_pool;\n+\n+pool_allocator<elt_list> elt_list::pool (\"elt_list\", 10);\n+pool_allocator<elt_loc_list> elt_loc_list::pool (\"elt_loc_list\", 10);\n+pool_allocator<cselib_val> cselib_val::pool (\"cselib_val_list\", 10);\n+\n+static pool_allocator<rtx_def> value_pool (\"value\", 100, RTX_CODE_SIZE (VALUE),\n+\t\t\t\t\t   true);\n \n /* If nonnull, cselib will call this function before freeing useless\n    VALUEs.  A VALUE is deemed useless if its \"locs\" field is null.  */\n@@ -288,8 +311,7 @@ void (*cselib_record_sets_hook) (rtx_insn *insn, struct cselib_set *sets,\n static inline struct elt_list *\n new_elt_list (struct elt_list *next, cselib_val *elt)\n {\n-  struct elt_list *el;\n-  el = (struct elt_list *) pool_alloc (elt_list_pool);\n+  elt_list *el = new elt_list ();\n   el->next = next;\n   el->elt = elt;\n   return el;\n@@ -373,14 +395,14 @@ new_elt_loc_list (cselib_val *val, rtx loc)\n \t}\n \n       /* Chain LOC back to VAL.  */\n-      el = (struct elt_loc_list *) pool_alloc (elt_loc_list_pool);\n+      el = new elt_loc_list;\n       el->loc = val->val_rtx;\n       el->setting_insn = cselib_current_insn;\n       el->next = NULL;\n       CSELIB_VAL_PTR (loc)->locs = el;\n     }\n \n-  el = (struct elt_loc_list *) pool_alloc (elt_loc_list_pool);\n+  el = new elt_loc_list;\n   el->loc = loc;\n   el->setting_insn = cselib_current_insn;\n   el->next = next;\n@@ -420,7 +442,7 @@ unchain_one_elt_list (struct elt_list **pl)\n   struct elt_list *l = *pl;\n \n   *pl = l->next;\n-  pool_free (elt_list_pool, l);\n+  delete l;\n }\n \n /* Likewise for elt_loc_lists.  */\n@@ -431,7 +453,7 @@ unchain_one_elt_loc_list (struct elt_loc_list **pl)\n   struct elt_loc_list *l = *pl;\n \n   *pl = l->next;\n-  pool_free (elt_loc_list_pool, l);\n+  delete l;\n }\n \n /* Likewise for cselib_vals.  This also frees the addr_list associated with\n@@ -443,7 +465,7 @@ unchain_one_value (cselib_val *v)\n   while (v->addr_list)\n     unchain_one_elt_list (&v->addr_list);\n \n-  pool_free (cselib_val_pool, v);\n+  delete v;\n }\n \n /* Remove all entries from the hash table.  Also used during\n@@ -1306,7 +1328,7 @@ cselib_hash_rtx (rtx x, int create, machine_mode memmode)\n static inline cselib_val *\n new_cselib_val (unsigned int hash, machine_mode mode, rtx x)\n {\n-  cselib_val *e = (cselib_val *) pool_alloc (cselib_val_pool);\n+  cselib_val *e = new cselib_val;\n \n   gcc_assert (hash);\n   gcc_assert (next_uid);\n@@ -1318,7 +1340,7 @@ new_cselib_val (unsigned int hash, machine_mode mode, rtx x)\n      precisely when we can have VALUE RTXen (when cselib is active)\n      so we don't need to put them in garbage collected memory.\n      ??? Why should a VALUE be an RTX in the first place?  */\n-  e->val_rtx = (rtx) pool_alloc (value_pool);\n+  e->val_rtx = value_pool.allocate ();\n   memset (e->val_rtx, 0, RTX_HDR_SIZE);\n   PUT_CODE (e->val_rtx, VALUE);\n   PUT_MODE (e->val_rtx, mode);\n@@ -2729,13 +2751,6 @@ cselib_process_insn (rtx_insn *insn)\n void\n cselib_init (int record_what)\n {\n-  elt_list_pool = create_alloc_pool (\"elt_list\",\n-\t\t\t\t     sizeof (struct elt_list), 10);\n-  elt_loc_list_pool = create_alloc_pool (\"elt_loc_list\",\n-\t\t\t\t         sizeof (struct elt_loc_list), 10);\n-  cselib_val_pool = create_alloc_pool (\"cselib_val_list\",\n-\t\t\t\t       sizeof (cselib_val), 10);\n-  value_pool = create_alloc_pool (\"value\", RTX_CODE_SIZE (VALUE), 100);\n   cselib_record_memory = record_what & CSELIB_RECORD_MEMORY;\n   cselib_preserve_constants = record_what & CSELIB_PRESERVE_CONSTANTS;\n   cselib_any_perm_equivs = false;\n@@ -2777,10 +2792,10 @@ cselib_finish (void)\n   cselib_any_perm_equivs = false;\n   cfa_base_preserved_val = NULL;\n   cfa_base_preserved_regno = INVALID_REGNUM;\n-  free_alloc_pool (elt_list_pool);\n-  free_alloc_pool (elt_loc_list_pool);\n-  free_alloc_pool (cselib_val_pool);\n-  free_alloc_pool (value_pool);\n+  elt_list::pool.release ();\n+  elt_loc_list::pool.release ();\n+  cselib_val::pool.release ();\n+  value_pool.release ();\n   cselib_clear_table ();\n   delete cselib_hash_table;\n   cselib_hash_table = NULL;"}, {"sha": "cdd06ad952a96ba964084e20d97761de4e14a32c", "filename": "gcc/cselib.h", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/gcc%2Fcselib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/gcc%2Fcselib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.h?ref=a78a26f11e2e95d4bb43f1782f891d8210d03e0d", "patch": "@@ -21,7 +21,8 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_CSELIB_H\n \n /* Describe a value.  */\n-struct cselib_val {\n+struct cselib_val\n+{\n   /* The hash value.  */\n   unsigned int hash;\n \n@@ -40,6 +41,21 @@ struct cselib_val {\n   struct elt_list *addr_list;\n \n   struct cselib_val *next_containing_mem;\n+\n+  /* Pool allocation new operator.  */\n+  inline void *operator new (size_t)\n+  {\n+    return pool.allocate ();\n+  }\n+\n+  /* Delete operator utilizing pool allocation.  */\n+  inline void operator delete (void *ptr)\n+  {\n+    pool.remove ((cselib_val *) ptr);\n+  }\n+\n+  /* Memory allocation pool.  */\n+  static pool_allocator<cselib_val> pool;\n };\n \n /* A list of rtl expressions that hold the same value.  */\n@@ -50,6 +66,21 @@ struct elt_loc_list {\n   rtx loc;\n   /* The insn that made the equivalence.  */\n   rtx_insn *setting_insn;\n+\n+  /* Pool allocation new operator.  */\n+  inline void *operator new (size_t)\n+  {\n+    return pool.allocate ();\n+  }\n+\n+  /* Delete operator utilizing pool allocation.  */\n+  inline void operator delete (void *ptr)\n+  {\n+    pool.remove ((elt_loc_list *) ptr);\n+  }\n+\n+  /* Memory allocation pool.  */\n+  static pool_allocator<elt_loc_list> pool;\n };\n \n /* Describe a single set that is part of an insn.  */"}, {"sha": "28476fb41a6072cb880a7864d5f98d4590d6f2f0", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=a78a26f11e2e95d4bb43f1782f891d8210d03e0d", "patch": "@@ -180,6 +180,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"except.h\"\n #include \"ggc.h\"\n #include \"params.h\"\n+#include \"alloc-pool.h\"\n #include \"cselib.h\"\n #include \"intl.h\"\n #include \"obstack.h\""}, {"sha": "06c49739ba7ca32b563d0db9bec9ee61d840ee60", "filename": "gcc/postreload.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=a78a26f11e2e95d4bb43f1782f891d8210d03e0d", "patch": "@@ -63,6 +63,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"reload.h\"\n #include \"recog.h\"\n+#include \"alloc-pool.h\"\n #include \"cselib.h\"\n #include \"diagnostic-core.h\"\n #include \"except.h\""}, {"sha": "5e8838ae4cdb61370faca76895c6d235e0474b64", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=a78a26f11e2e95d4bb43f1782f891d8210d03e0d", "patch": "@@ -52,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"diagnostic.h\"\n #include \"tree-pretty-print.h\"\n+#include \"alloc-pool.h\"\n #include \"cselib.h\"\n #include \"dumpfile.h\"\t/* for dump_flags */\n #include \"dwarf2out.h\""}, {"sha": "943fdd00ba277baea2ac2fa74bb0a360f713a706", "filename": "gcc/sel-sched-dump.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/gcc%2Fsel-sched-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a78a26f11e2e95d4bb43f1782f891d8210d03e0d/gcc%2Fsel-sched-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-dump.c?ref=a78a26f11e2e95d4bb43f1782f891d8210d03e0d", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"insn-config.h\"\n #include \"insn-attr.h\"\n #include \"params.h\"\n+#include \"alloc-pool.h\"\n #include \"cselib.h\"\n #include \"target.h\"\n "}]}