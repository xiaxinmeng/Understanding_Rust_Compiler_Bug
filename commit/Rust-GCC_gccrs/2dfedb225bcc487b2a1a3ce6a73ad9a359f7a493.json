{"sha": "2dfedb225bcc487b2a1a3ce6a73ad9a359f7a493", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRmZWRiMjI1YmNjNDg3YjJhMWEzY2U2YTczYWQ5YTM1OWY3YTQ5Mw==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2005-11-15T17:34:11Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2005-11-15T17:34:11Z"}, "message": "[multiple changes]\n\n2005-11-15  Andrew Haley  <aph@redhat.com>\n\n        * Merge from Classpath head:\n\n   2005-09-16  Andrew Haley  <aph@redhat.com>\n   \n           * java/io/ObjectStreamClass.java (findAccessibleMethod): Allow\n           protected readResolve().  Rewrite accessibility check.\n   \n   2005-07-07  Jeroen Frijters  <jeroen@frijters.net>\n   \n           * java/io/ObjectStreamClass.java\n           (findAccessibleMethod): Added code to make method accessible.\n   \n   2005-07-03  Daniel Bonniot  <bonniot@users.sf.net>\n   \n           * java/io/ObjectStreamClass.java (inSamePackage): New private method.\n           (findAccessibleMethod): Likewise.\n           (cacheMethods): Lookup readResolve and writeReplace using the new\n           findAccessibleMethod().\n\nFrom-SVN: r107029", "tree": {"sha": "ba3472b781df2a031293e8710ab24a47403dabba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba3472b781df2a031293e8710ab24a47403dabba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dfedb225bcc487b2a1a3ce6a73ad9a359f7a493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dfedb225bcc487b2a1a3ce6a73ad9a359f7a493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dfedb225bcc487b2a1a3ce6a73ad9a359f7a493", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dfedb225bcc487b2a1a3ce6a73ad9a359f7a493/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ec0b2e592ff9e94001f834c1d967a08fab8c6e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec0b2e592ff9e94001f834c1d967a08fab8c6e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ec0b2e592ff9e94001f834c1d967a08fab8c6e9"}], "stats": {"total": 77, "additions": 73, "deletions": 4}, "files": [{"sha": "82b091b9153f276eb67c98a79b68aa6265dc39e2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dfedb225bcc487b2a1a3ce6a73ad9a359f7a493/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dfedb225bcc487b2a1a3ce6a73ad9a359f7a493/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2dfedb225bcc487b2a1a3ce6a73ad9a359f7a493", "patch": "@@ -1,3 +1,24 @@\n+2005-11-15  Andrew Haley  <aph@redhat.com>\n+\n+\t* Merge from Classpath head:\n+\n+   2005-09-16  Andrew Haley  <aph@redhat.com>\n+   \n+           * java/io/ObjectStreamClass.java (findAccessibleMethod): Allow\n+           protected readResolve().  Rewrite accessibility check.\n+   \n+   2005-07-07  Jeroen Frijters  <jeroen@frijters.net>\n+   \n+           * java/io/ObjectStreamClass.java\n+           (findAccessibleMethod): Added code to make method accessible.\n+   \n+   2005-07-03  Daniel Bonniot  <bonniot@users.sf.net>\n+   \n+           * java/io/ObjectStreamClass.java (inSamePackage): New private method.\n+           (findAccessibleMethod): Likewise.\n+           (cacheMethods): Lookup readResolve and writeReplace using the new\n+           findAccessibleMethod().\n+   \n 2005-11-14  Mohan Embar  <gnustuff@thisiscool.com>\n \n \t* java/net/natVMNetworkInterfaceWin32.cc: Include"}, {"sha": "975dbfc66d00d7c4517204f0c59c47193435c28d", "filename": "libjava/java/io/ObjectStreamClass.java", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dfedb225bcc487b2a1a3ce6a73ad9a359f7a493/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dfedb225bcc487b2a1a3ce6a73ad9a359f7a493/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamClass.java?ref=2dfedb225bcc487b2a1a3ce6a73ad9a359f7a493", "patch": "@@ -486,19 +486,67 @@ private Method findMethod(Method[] methods, String name, Class[] params,\n     return null;\n   }\n \n+  private static boolean inSamePackage(Class c1, Class c2)\n+  {\n+    String name1 = c1.getName();\n+    String name2 = c2.getName();\n+\n+    int id1 = name1.lastIndexOf('.');\n+    int id2 = name2.lastIndexOf('.');\n+\n+    // Handle the default package\n+    if (id1 == -1 || id2 == -1)\n+      return id1 == id2;\n+\n+    String package1 = name1.substring(0, id1);\n+    String package2 = name2.substring(0, id2);\n+\n+    return package1.equals(package2);\n+  }\n+\n+  final static Class[] noArgs = new Class[0];\n+\n+  private static Method findAccessibleMethod(String name, Class from)\n+  {\n+    for (Class c = from; c != null; c = c.getSuperclass())\n+      {\n+\ttry\n+\t  {\n+\t    Method res = c.getDeclaredMethod(name, noArgs);\n+\t    int mods = res.getModifiers();\n+\t    \n+\t    if (c == from  \n+\t\t|| Modifier.isProtected(mods)\n+\t\t|| Modifier.isPublic(mods)\n+\t\t|| (! Modifier.isPrivate(mods) && inSamePackage(c, from)))\n+\t      {\n+\t\tAccessController.doPrivileged(new SetAccessibleAction(res));\n+\t\treturn res;\n+\t      }\n+\t  }\n+\tcatch (NoSuchMethodException e)\n+\t  {\n+\t  }\n+      }\n+\n+    return null;\n+  }\n+\n   private void cacheMethods()\n   {\n     Method[] methods = forClass().getDeclaredMethods();\n+\n     readObjectMethod = findMethod(methods, \"readObject\",\n \t\t\t\t  new Class[] { ObjectInputStream.class },\n \t\t\t\t  Void.TYPE, true);\n     writeObjectMethod = findMethod(methods, \"writeObject\",\n                                    new Class[] { ObjectOutputStream.class },\n                                    Void.TYPE, true);\n-    readResolveMethod = findMethod(methods, \"readResolve\",\n-\t\t\t\t   new Class[0], Object.class, false);\n-    writeReplaceMethod = findMethod(methods, \"writeReplace\",\n-                                    new Class[0], Object.class, false);\n+\n+    // readResolve and writeReplace can be in parent classes, as long as they\n+    // are accessible from this class.\n+    readResolveMethod = findAccessibleMethod(\"readResolve\", forClass());\n+    writeReplaceMethod = findAccessibleMethod(\"writeReplace\", forClass());\n   }\n \n   private ObjectStreamClass(Class cl)"}]}