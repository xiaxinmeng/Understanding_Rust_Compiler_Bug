{"sha": "6d1e1a26d9b19fcdc8a8586f56df904a3a8e4730", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQxZTFhMjZkOWIxOWZjZGM4YTg1ODZmNTZkZjkwNGEzYThlNDczMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2010-08-14T19:59:13Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-08-14T19:59:13Z"}, "message": "re PR target/43358 (IRA: internal compiler error: in pool_free, at alloc-pool.c:335)\n\ngcc/\n\tPR rtl-optimization/43358\n\t* ira-lives.c (process_single_reg_class_operands): Adjust the costs\n\tof a single hard register, using simplify_subreg_regno to decide\n\twhat that register should be.\n\nFrom-SVN: r163249", "tree": {"sha": "e4d87023973b6ea8dcdaaaed7bf74737c0d3fd59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4d87023973b6ea8dcdaaaed7bf74737c0d3fd59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d1e1a26d9b19fcdc8a8586f56df904a3a8e4730", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d1e1a26d9b19fcdc8a8586f56df904a3a8e4730", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d1e1a26d9b19fcdc8a8586f56df904a3a8e4730", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d1e1a26d9b19fcdc8a8586f56df904a3a8e4730/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73a949c0ba62310e9068fd3c89fc74672f85d282", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a949c0ba62310e9068fd3c89fc74672f85d282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a949c0ba62310e9068fd3c89fc74672f85d282"}], "stats": {"total": 63, "additions": 42, "deletions": 21}, "files": [{"sha": "3987c900f2efe76c4f2d686fa9328ceef952c626", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d1e1a26d9b19fcdc8a8586f56df904a3a8e4730/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d1e1a26d9b19fcdc8a8586f56df904a3a8e4730/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d1e1a26d9b19fcdc8a8586f56df904a3a8e4730", "patch": "@@ -1,3 +1,10 @@\n+2010-08-14  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR rtl-optimization/43358\n+\t* ira-lives.c (process_single_reg_class_operands): Adjust the costs\n+\tof a single hard register, using simplify_subreg_regno to decide\n+\twhat that register should be.\n+\n 2010-08-14  Mingjie Xing  <mingjie.xing@gmail.com>\n \n \t* config/mips/mips.c (CODE_FOR_loongson_pmullh): Define."}, {"sha": "b1896981c29c017c46b6b9fceb879a13f5974233", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d1e1a26d9b19fcdc8a8586f56df904a3a8e4730/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d1e1a26d9b19fcdc8a8586f56df904a3a8e4730/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=6d1e1a26d9b19fcdc8a8586f56df904a3a8e4730", "patch": "@@ -897,7 +897,7 @@ ira_implicitly_set_insn_hard_regs (HARD_REG_SET *set)\n static void\n process_single_reg_class_operands (bool in_p, int freq)\n {\n-  int i, regno, cost;\n+  int i, regno;\n   unsigned int px;\n   enum reg_class cl;\n   rtx operand;\n@@ -924,32 +924,46 @@ process_single_reg_class_operands (bool in_p, int freq)\n       if (REG_P (operand)\n \t  && (regno = REGNO (operand)) >= FIRST_PSEUDO_REGISTER)\n \t{\n-\t  enum machine_mode mode;\n \t  enum reg_class cover_class;\n \n \t  operand_a = ira_curr_regno_allocno_map[regno];\n-\t  mode = ALLOCNO_MODE (operand_a);\n \t  cover_class = ALLOCNO_COVER_CLASS (operand_a);\n \t  if (ira_class_subset_p[cl][cover_class]\n-\t      && ira_class_hard_regs_num[cl] != 0\n-\t      && (ira_class_hard_reg_index[cover_class]\n-\t\t  [ira_class_hard_regs[cl][0]]) >= 0\n-\t      && reg_class_size[cl] <= (unsigned) CLASS_MAX_NREGS (cl, mode))\n+\t      && ira_class_hard_regs_num[cl] != 0)\n \t    {\n-\t      int i, size;\n-\t      cost\n-\t\t= (freq\n-\t\t   * (in_p\n-\t\t      ? ira_get_register_move_cost (mode, cover_class, cl)\n-\t\t      : ira_get_register_move_cost (mode, cl, cover_class)));\n-\t      ira_allocate_and_set_costs\n-\t\t(&ALLOCNO_CONFLICT_HARD_REG_COSTS (operand_a), cover_class, 0);\n-\t      size = ira_reg_class_nregs[cover_class][mode];\n-\t      for (i = 0; i < size; i++)\n-\t        ALLOCNO_CONFLICT_HARD_REG_COSTS (operand_a)\n-\t\t  [ira_class_hard_reg_index\n-\t\t   [cover_class][ira_class_hard_regs[cl][i]]]\n-\t\t  -= cost;\n+\t      /* View the desired allocation of OPERAND as:\n+\n+\t\t    (REG:YMODE YREGNO),\n+\n+\t\t a simplification of:\n+\n+\t\t    (subreg:YMODE (reg:XMODE XREGNO) OFFSET).  */\n+\t      enum machine_mode ymode, xmode;\n+\t      int xregno, yregno;\n+\t      HOST_WIDE_INT offset;\n+\n+\t      xmode = recog_data.operand_mode[i];\n+\t      xregno = ira_class_hard_regs[cl][0];\n+\t      ymode = ALLOCNO_MODE (operand_a);\n+\t      offset = subreg_lowpart_offset (ymode, xmode);\n+\t      yregno = simplify_subreg_regno (xregno, xmode, offset, ymode);\n+\t      if (yregno >= 0\n+\t\t  && ira_class_hard_reg_index[cover_class][yregno] >= 0)\n+\t\t{\n+\t\t  int cost;\n+\n+\t\t  ira_allocate_and_set_costs\n+\t\t    (&ALLOCNO_CONFLICT_HARD_REG_COSTS (operand_a),\n+\t\t     cover_class, 0);\n+\t\t  cost\n+\t\t    = (freq\n+\t\t       * (in_p\n+\t\t\t  ? ira_get_register_move_cost (xmode, cover_class, cl)\n+\t\t\t  : ira_get_register_move_cost (xmode, cl,\n+\t\t\t\t\t\t\tcover_class)));\n+\t\t  ALLOCNO_CONFLICT_HARD_REG_COSTS (operand_a)\n+\t\t    [ira_class_hard_reg_index[cover_class][yregno]] -= cost;\n+\t\t}\n \t    }\n \t}\n "}]}