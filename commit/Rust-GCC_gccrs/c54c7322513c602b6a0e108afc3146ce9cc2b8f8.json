{"sha": "c54c7322513c602b6a0e108afc3146ce9cc2b8f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU0YzczMjI1MTNjNjAyYjZhMGUxMDhhZmMzMTQ2Y2U5Y2MyYjhmOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-05-05T12:09:00Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-05-05T12:09:00Z"}, "message": "config.gcc (arm*-wince-pe*, [...]): Add arm/pe.opt to $extra_options.\n\n\t* config.gcc (arm*-wince-pe*, arm-*-pe*, strongarm-*-pe): Add\n\tarm/pe.opt to $extra_options.\n\t* config/arm/arm.h (target_flags, target_fpu_name, target_fpe_name)\n\t(target_float_abi_name, target_float_switch, target_abi_name)\n\t(ARM_FLAG_APCS_FRAME, ARM_FLAG_POKE, ARM_FLAG_FPE, ARM_FLAG_APCS_STACK)\n\t(ARM_FLAG_APCS_FLOAT, ARM_FLAG_APCS_REENT, ARM_FLAG_BIG_END)\n\t(ARM_FLAG_INTERWORK, ARM_FLAG_LITTLE_WORDS, ARM_FLAG_NO_SCHED_PRO)\n\t(ARM_FLAG_ABORT_NORETURN, ARM_FLAG_SINGLE_PIC_BASE)\n\t(ARM_FLAG_LONG_CALLS, ARM_FLAG_THUMB, THUMB_FLAG_BACKTRACE)\n\t(THUMB_FLAG_LEAF_BACKTRACE, THUMB_FLAG_CALLEE_SUPER_INTERWORKING)\n\t(THUMB_FLAG_CALLER_SUPER_INTERWORKING, CIRRUS_FIX_INVALID_INSNS)\n\t(TARGET_APCS_FRAME, TARGET_POKE_FUNCTION_NAME, TARGET_FPE)\n\t(TARGET_APCS_STACK, TARGET_APCS_FLOAT, TARGET_APCS_REENT)\n\t(TARGET_BIG_END, TARGET_INTERWORK, TARGET_LITTLE_WORDS)\n\t(TARGET_NO_SCHED_PRO, TARGET_ABORT_NORETURN, TARGET_SINGLE_PIC_BASE)\n\t(TARGET_LONG_CALLS, TARGET_THUMB, TARGET_CALLER_INTERWORKING)\n\t(TARGET_CIRRUS_FIX_INVALID_INSNS, SUBTARGET_SWITCHES, TARGET_SWITCHES)\n\t(TARGET_OPTIONS, arm_cpu_select, arm_select,  structure_size_string)\n\t(arm_pic_register_string): Delete.\n\t(TARGET_BACKTRACE): Redefine using TARGET_TPCS_LEAF_FRAME and\n\tTARGET_TPCS_FRAME.\n\t(TARGET_DEFAULT, CONDITIONAL_REGISTER_USAGE): Update mask names.\n\t* config/arm/coff.h (TARGET_DEFAULT): Likewise.\n\t* config/arm/elf.h (TARGET_DEFAULT): Likewise.\n\t* config/arm/netbsd-elf.h (TARGET_DEFAULT): Likewise.\n\t* config/arm/netbsd.h (TARGET_DEFAULT): Likewise.\n\t* config/arm/semi.h (TARGET_DEFAULT): Likewise.\n\t* config/arm/uclinux-elf.h (TARGET_DEFAULT): Likewise.\n\t* config/arm/wince-pe.h (TARGET_DEFAULT): Likewise.\n\t* config/arm/pe.h (TARGET_DEFAULT): Likewise.\n\t(TARGET_FLAG_NOP_FUN, TARGET_NOP_FUN_DLLIMPORT): Delete.\n\t(SUBTARGET_SWITCHES): Delete.\n\t* config/arm/arm.c (target_float_switch): Delete.\n\t(arm_cpu_select): Moved from config/arm/arm.h.\n\t(target_fpu_name, target_fpe_name, target_float_abi_name)\n\t(target_abi_name, structure_size_string, arm_pic_register_string)\n\t(arm_select): Make static.\n\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n\t(arm_handle_option): New function.\n\t(arm_override_options): Update target_flags checks for new mask names.\n\tRemove target_float_switch code.\n\t(arm_expand_prologue, thumb_expand_prologue): Check\n\t!TARGET_SCHED_PROLOG instead of TARGET_NO_SCHED_PRO.\n\t* config/arm/arm.opt, config/arm/pe.opt: New files.\n\nFrom-SVN: r99265", "tree": {"sha": "baa293f2612c142432f9a1de744c07d0a973643a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baa293f2612c142432f9a1de744c07d0a973643a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c54c7322513c602b6a0e108afc3146ce9cc2b8f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54c7322513c602b6a0e108afc3146ce9cc2b8f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c54c7322513c602b6a0e108afc3146ce9cc2b8f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/comments", "author": null, "committer": null, "parents": [{"sha": "5e16a15b83603fd187a881509eb20531fcbb264c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e16a15b83603fd187a881509eb20531fcbb264c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e16a15b83603fd187a881509eb20531fcbb264c"}], "stats": {"total": 604, "additions": 327, "deletions": 277}, "files": [{"sha": "00f8a892fbeb4ea0d5daf5618b08c5250ac11d0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c54c7322513c602b6a0e108afc3146ce9cc2b8f8", "patch": "@@ -1,3 +1,50 @@\n+2005-05-05  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config.gcc (arm*-wince-pe*, arm-*-pe*, strongarm-*-pe): Add\n+\tarm/pe.opt to $extra_options.\n+\t* config/arm/arm.h (target_flags, target_fpu_name, target_fpe_name)\n+\t(target_float_abi_name, target_float_switch, target_abi_name)\n+\t(ARM_FLAG_APCS_FRAME, ARM_FLAG_POKE, ARM_FLAG_FPE, ARM_FLAG_APCS_STACK)\n+\t(ARM_FLAG_APCS_FLOAT, ARM_FLAG_APCS_REENT, ARM_FLAG_BIG_END)\n+\t(ARM_FLAG_INTERWORK, ARM_FLAG_LITTLE_WORDS, ARM_FLAG_NO_SCHED_PRO)\n+\t(ARM_FLAG_ABORT_NORETURN, ARM_FLAG_SINGLE_PIC_BASE)\n+\t(ARM_FLAG_LONG_CALLS, ARM_FLAG_THUMB, THUMB_FLAG_BACKTRACE)\n+\t(THUMB_FLAG_LEAF_BACKTRACE, THUMB_FLAG_CALLEE_SUPER_INTERWORKING)\n+\t(THUMB_FLAG_CALLER_SUPER_INTERWORKING, CIRRUS_FIX_INVALID_INSNS)\n+\t(TARGET_APCS_FRAME, TARGET_POKE_FUNCTION_NAME, TARGET_FPE)\n+\t(TARGET_APCS_STACK, TARGET_APCS_FLOAT, TARGET_APCS_REENT)\n+\t(TARGET_BIG_END, TARGET_INTERWORK, TARGET_LITTLE_WORDS)\n+\t(TARGET_NO_SCHED_PRO, TARGET_ABORT_NORETURN, TARGET_SINGLE_PIC_BASE)\n+\t(TARGET_LONG_CALLS, TARGET_THUMB, TARGET_CALLER_INTERWORKING)\n+\t(TARGET_CIRRUS_FIX_INVALID_INSNS, SUBTARGET_SWITCHES, TARGET_SWITCHES)\n+\t(TARGET_OPTIONS, arm_cpu_select, arm_select,  structure_size_string)\n+\t(arm_pic_register_string): Delete.\n+\t(TARGET_BACKTRACE): Redefine using TARGET_TPCS_LEAF_FRAME and\n+\tTARGET_TPCS_FRAME.\n+\t(TARGET_DEFAULT, CONDITIONAL_REGISTER_USAGE): Update mask names.\n+\t* config/arm/coff.h (TARGET_DEFAULT): Likewise.\n+\t* config/arm/elf.h (TARGET_DEFAULT): Likewise.\n+\t* config/arm/netbsd-elf.h (TARGET_DEFAULT): Likewise.\n+\t* config/arm/netbsd.h (TARGET_DEFAULT): Likewise.\n+\t* config/arm/semi.h (TARGET_DEFAULT): Likewise.\n+\t* config/arm/uclinux-elf.h (TARGET_DEFAULT): Likewise.\n+\t* config/arm/wince-pe.h (TARGET_DEFAULT): Likewise.\n+\t* config/arm/pe.h (TARGET_DEFAULT): Likewise.\n+\t(TARGET_FLAG_NOP_FUN, TARGET_NOP_FUN_DLLIMPORT): Delete.\n+\t(SUBTARGET_SWITCHES): Delete.\n+\t* config/arm/arm.c (target_float_switch): Delete.\n+\t(arm_cpu_select): Moved from config/arm/arm.h.\n+\t(target_fpu_name, target_fpe_name, target_float_abi_name)\n+\t(target_abi_name, structure_size_string, arm_pic_register_string)\n+\t(arm_select): Make static.\n+\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n+\t(arm_handle_option): New function.\n+\t(arm_override_options): Update target_flags checks for new mask names.\n+\tRemove target_float_switch code.\n+\t(arm_expand_prologue, thumb_expand_prologue): Check\n+\t!TARGET_SCHED_PROLOG instead of TARGET_NO_SCHED_PRO.\n+\t* config/arm/arm.opt, config/arm/pe.opt: New files.\n+\n 2005-05-05  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* config/arc/arc.c (get_arc_condition_code): Use gcc_assert &"}, {"sha": "7a2960458ccf9ef0deb9e5a83ba08330dd2fd2a6", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=c54c7322513c602b6a0e108afc3146ce9cc2b8f8", "patch": "@@ -715,11 +715,13 @@ arm*-*-elf | ep9312-*-elf)\n arm*-wince-pe*)\n \ttm_file=\"arm/semi.h arm/aout.h arm/arm.h arm/coff.h dbxcoff.h arm/pe.h arm/wince-pe.h\"\n \ttmake_file=\"arm/t-arm arm/t-wince-pe\"\n+\textra_options=\"${extra_options} arm/pe.opt\"\n \textra_objs=\"pe.o\"\n \t;;\n arm-*-pe*)\n \ttm_file=\"arm/semi.h arm/aout.h arm/arm.h arm/coff.h dbxcoff.h arm/pe.h\"\n \ttmake_file=\"arm/t-arm arm/t-pe\"\n+\textra_options=\"${extra_options} arm/pe.opt\"\n \textra_objs=\"pe.o\"\n \t;;\n arm*-*-kaos*)\n@@ -2113,6 +2115,7 @@ strongarm-*-pe)\n \tout_file=arm/arm.c\n \tmd_file=arm/arm.md\n \textra_modes=arm/arm-modes.def\n+\textra_options=\"${extra_options} arm/pe.opt\"\n \textra_objs=pe.o\n \tuse_fixproto=yes\n \t;;"}, {"sha": "4a71420144af04b60e48cc98edbc6e60bb9b0cc8", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 88, "deletions": 30, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c54c7322513c602b6a0e108afc3146ce9cc2b8f8", "patch": "@@ -181,6 +181,7 @@ static void arm_cxx_determine_class_data_visibility (tree);\n static bool arm_cxx_class_data_always_comdat (void);\n static bool arm_cxx_use_aeabi_atexit (void);\n static void arm_init_libfuncs (void);\n+static bool arm_handle_option (size_t, const char *, int);\n static unsigned HOST_WIDE_INT arm_shift_truncation_mask (enum machine_mode);\n \f\n /* Initialize the GCC target structure.  */\n@@ -221,6 +222,11 @@ static unsigned HOST_WIDE_INT arm_shift_truncation_mask (enum machine_mode);\n #undef  TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE arm_output_function_epilogue\n \n+#undef  TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT | MASK_SCHED_PROLOG)\n+#undef  TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION arm_handle_option\n+\n #undef  TARGET_COMP_TYPE_ATTRIBUTES\n #define TARGET_COMP_TYPE_ATTRIBUTES arm_comp_type_attributes\n \n@@ -368,22 +374,19 @@ enum float_abi_type arm_float_abi;\n enum arm_abi_type arm_abi;\n \n /* Set by the -mfpu=... option.  */\n-const char * target_fpu_name = NULL;\n+static const char * target_fpu_name = NULL;\n \n /* Set by the -mfpe=... option.  */\n-const char * target_fpe_name = NULL;\n+static const char * target_fpe_name = NULL;\n \n /* Set by the -mfloat-abi=... option.  */\n-const char * target_float_abi_name = NULL;\n-\n-/* Set by the legacy -mhard-float and -msoft-float options.  */\n-const char * target_float_switch = NULL;\n+static const char * target_float_abi_name = NULL;\n \n /* Set by the -mabi=... option.  */\n-const char * target_abi_name = NULL;\n+static const char * target_abi_name = NULL;\n \n /* Used to parse -mstructure_size_boundary command line option.  */\n-const char * structure_size_string = NULL;\n+static const char * structure_size_string = NULL;\n int    arm_structure_size_boundary = DEFAULT_STRUCTURE_SIZE_BOUNDARY;\n \n /* Used for Thumb call_via trampolines.  */\n@@ -494,7 +497,7 @@ int arm_cpp_interwork = 0;\n enum machine_mode output_memory_reference_mode;\n \n /* The register number to be used for the PIC offset register.  */\n-const char * arm_pic_register_string = NULL;\n+static const char * arm_pic_register_string = NULL;\n int arm_pic_register = INVALID_REGNUM;\n \n /* Set to 1 when a return insn is output, this means that the epilogue\n@@ -574,11 +577,18 @@ static const struct processors all_architectures[] =\n   {NULL, arm_none, NULL, 0 , NULL}\n };\n \n+struct arm_cpu_select\n+{\n+  const char *              string;\n+  const char *              name;\n+  const struct processors * processors;\n+};\n+\n /* This is a magic structure.  The 'string' field is magically filled in\n    with a pointer to the value specified by the user on the command line\n    assuming that the user has specified such a value.  */\n \n-struct arm_cpu_select arm_select[] =\n+static struct arm_cpu_select arm_select[] =\n {\n   /* string\t  name            processors  */\n   { NULL,\t\"-mcpu=\",\tall_cores  },\n@@ -779,6 +789,63 @@ arm_init_libfuncs (void)\n   set_optab_libfunc (umod_optab, SImode, NULL);\n }\n \n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+arm_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+{\n+  switch (code)\n+    {\n+    case OPT_mabi_:\n+      target_abi_name = arg;\n+      return true;\n+\n+    case OPT_march_:\n+      arm_select[1].string = arg;\n+      return true;\n+\n+    case OPT_mcpu_:\n+      arm_select[0].string = arg;\n+      return true;\n+\n+    case OPT_mfloat_abi_:\n+      target_float_abi_name = arg;\n+      return true;\n+\n+    case OPT_mfp_:\n+    case OPT_mfpe_:\n+      target_fpe_name = arg;\n+      return true;\n+\n+    case OPT_mfpu_:\n+      target_fpu_name = arg;\n+      return true;\n+\n+    case OPT_mhard_float:\n+      target_float_abi_name = \"hard\";\n+      return true;\n+\n+    case OPT_mpic_register_:\n+      arm_pic_register_string = arg;\n+      return true;\n+\n+    case OPT_msoft_float:\n+      target_float_abi_name = \"soft\";\n+      return true;\n+\n+    case OPT_mstructure_size_boundary_:\n+      structure_size_string = arg;\n+      return true;\n+\n+    case OPT_mtune_:\n+      arm_select[2].string = arg;\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n /* Fix up any incompatible options that the user has specified.\n    This has now turned into a maze.  */\n void\n@@ -938,25 +1005,24 @@ arm_override_options (void)\n   if (TARGET_INTERWORK && !(insn_flags & FL_THUMB))\n     {\n       warning (0, \"target CPU does not support interworking\" );\n-      target_flags &= ~ARM_FLAG_INTERWORK;\n+      target_flags &= ~MASK_INTERWORK;\n     }\n \n   if (TARGET_THUMB && !(insn_flags & FL_THUMB))\n     {\n       warning (0, \"target CPU does not support THUMB instructions\");\n-      target_flags &= ~ARM_FLAG_THUMB;\n+      target_flags &= ~MASK_THUMB;\n     }\n \n   if (TARGET_APCS_FRAME && TARGET_THUMB)\n     {\n       /* warning (0, \"ignoring -mapcs-frame because -mthumb was used\"); */\n-      target_flags &= ~ARM_FLAG_APCS_FRAME;\n+      target_flags &= ~MASK_APCS_FRAME;\n     }\n \n   /* TARGET_BACKTRACE calls leaf_function_p, which causes a crash if done\n      from here where no function is being compiled currently.  */\n-  if ((target_flags & (THUMB_FLAG_LEAF_BACKTRACE | THUMB_FLAG_BACKTRACE))\n-      && TARGET_ARM)\n+  if ((TARGET_TPCS_FRAME || TARGET_TPCS_LEAF_FRAME) && TARGET_ARM)\n     warning (0, \"enabling backtrace support is only meaningful when compiling for the Thumb\");\n \n   if (TARGET_ARM && TARGET_CALLEE_INTERWORKING)\n@@ -968,11 +1034,11 @@ arm_override_options (void)\n   if (TARGET_APCS_STACK && !TARGET_APCS_FRAME)\n     {\n       warning (0, \"-mapcs-stack-check incompatible with -mno-apcs-frame\");\n-      target_flags |= ARM_FLAG_APCS_FRAME;\n+      target_flags |= MASK_APCS_FRAME;\n     }\n \n   if (TARGET_POKE_FUNCTION_NAME)\n-    target_flags |= ARM_FLAG_APCS_FRAME;\n+    target_flags |= MASK_APCS_FRAME;\n \n   if (TARGET_APCS_REENT && flag_pic)\n     error (\"-fpic and -mapcs-reent are incompatible\");\n@@ -985,7 +1051,7 @@ arm_override_options (void)\n   if (TARGET_ARM\n       && write_symbols != NO_DEBUG\n       && !TARGET_APCS_FRAME\n-      && (TARGET_DEFAULT & ARM_FLAG_APCS_FRAME))\n+      && (TARGET_DEFAULT & MASK_APCS_FRAME))\n     warning (0, \"-g with -mno-apcs-frame may not give sensible debugging\");\n \n   /* If stack checking is disabled, we can use r10 as the PIC register,\n@@ -1022,7 +1088,7 @@ arm_override_options (void)\n     arm_cpp_interwork = 1;\n \n   if (arm_arch5)\n-    target_flags &= ~ARM_FLAG_INTERWORK;\n+    target_flags &= ~MASK_INTERWORK;\n \n   if (target_abi_name)\n     {\n@@ -1114,14 +1180,6 @@ arm_override_options (void)\n \terror (\"invalid floating point abi: -mfloat-abi=%s\",\n \t       target_float_abi_name);\n     }\n-  else if (target_float_switch)\n-    {\n-      /* This is a bit of a hack to avoid needing target flags for these.  */\n-      if (target_float_switch[0] == 'h')\n-\tarm_float_abi = ARM_FLOAT_ABI_HARD;\n-      else\n-\tarm_float_abi = ARM_FLOAT_ABI_SOFT;\n-    }\n   else\n     arm_float_abi = TARGET_DEFAULT_FLOAT_ABI;\n \n@@ -10350,7 +10408,7 @@ arm_expand_prologue (void)\n   /* If we are profiling, make sure no instructions are scheduled before\n      the call to mcount.  Similarly if the user has requested no\n      scheduling in the prolog.  */\n-  if (current_function_profile || TARGET_NO_SCHED_PRO)\n+  if (current_function_profile || !TARGET_SCHED_PROLOG)\n     emit_insn (gen_blockage ());\n \n   /* If the link register is being kept alive, with the return address in it,\n@@ -13171,7 +13229,7 @@ thumb_expand_prologue (void)\n \t\t\t\t  hard_frame_pointer_rtx));\n     }\n \n-  if (current_function_profile || TARGET_NO_SCHED_PRO)\n+  if (current_function_profile || !TARGET_SCHED_PROLOG)\n     emit_insn (gen_blockage ());\n \n   cfun->machine->lr_save_eliminated = !thumb_force_lr_save ();\n@@ -13220,7 +13278,7 @@ thumb_expand_epilogue (void)\n      the stack adjustment will not be deleted.  */\n   emit_insn (gen_prologue_use (stack_pointer_rtx));\n \n-  if (current_function_profile || TARGET_NO_SCHED_PRO)\n+  if (current_function_profile || !TARGET_SCHED_PROLOG)\n     emit_insn (gen_blockage ());\n \n   /* Emit a clobber for each insn that will be restored in the epilogue,"}, {"sha": "1e5a972b40f7260fc3a96d5c5d26efa85e83c300", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 5, "deletions": 224, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=c54c7322513c602b6a0e108afc3146ce9cc2b8f8", "patch": "@@ -117,18 +117,6 @@ extern arm_cc arm_current_cc;\n extern int arm_target_label;\n extern int arm_ccfsm_state;\n extern GTY(()) rtx arm_target_insn;\n-/* Run-time compilation parameters selecting different hardware subsets.  */\n-extern int target_flags;\n-/* The floating point mode.  */\n-extern const char *target_fpu_name;\n-/* For backwards compatibility.  */\n-extern const char *target_fpe_name;\n-/* Whether to use floating point hardware.  */\n-extern const char *target_float_abi_name;\n-/* For -m{soft,hard}-float.  */\n-extern const char *target_float_switch;\n-/* Which ABI to use.  */\n-extern const char *target_abi_name;\n /* Define the information needed to generate branch insns.  This is\n    stored from the compare operation.  */\n extern GTY(()) rtx arm_compare_op0;\n@@ -184,89 +172,6 @@ extern GTY(()) rtx aof_pic_label;\n #define TARGET_VERSION fputs (\" (ARM/generic)\", stderr);\n #endif\n \n-/* Nonzero if the function prologue (and epilogue) should obey\n-   the ARM Procedure Call Standard.  */\n-#define ARM_FLAG_APCS_FRAME\t(1 << 0)\n-\n-/* Nonzero if the function prologue should output the function name to enable\n-   the post mortem debugger to print a backtrace (very useful on RISCOS,\n-   unused on RISCiX).  Specifying this flag also enables\n-   -fno-omit-frame-pointer.\n-   XXX Must still be implemented in the prologue.  */\n-#define ARM_FLAG_POKE\t\t(1 << 1)\n-\n-/* Nonzero if floating point instructions are emulated by the FPE, in which\n-   case instruction scheduling becomes very uninteresting.  */\n-#define ARM_FLAG_FPE\t\t(1 << 2)\n-\n-/* FLAG 0x0008 now spare (used to be apcs-32 selection).  */\n-\n-/* Nonzero if stack checking should be performed on entry to each function\n-   which allocates temporary variables on the stack.  */\n-#define ARM_FLAG_APCS_STACK\t(1 << 4)\n-\n-/* Nonzero if floating point parameters should be passed to functions in\n-   floating point registers.  */\n-#define ARM_FLAG_APCS_FLOAT\t(1 << 5)\n-\n-/* Nonzero if re-entrant, position independent code should be generated.\n-   This is equivalent to -fpic.  */\n-#define ARM_FLAG_APCS_REENT\t(1 << 6)\n-\n-  /* FLAG 0x0080 now spare (used to be alignment traps).  */\n-  /* FLAG (1 << 8) is now spare (used to be soft-float).  */\n-\n-/* Nonzero if we should compile with BYTES_BIG_ENDIAN set to 1.  */\n-#define ARM_FLAG_BIG_END\t(1 << 9)\n-\n-/* Nonzero if we should compile for Thumb interworking.  */\n-#define ARM_FLAG_INTERWORK\t(1 << 10)\n-\n-/* Nonzero if we should have little-endian words even when compiling for\n-   big-endian (for backwards compatibility with older versions of GCC).  */\n-#define ARM_FLAG_LITTLE_WORDS\t(1 << 11)\n-\n-/* Nonzero if we need to protect the prolog from scheduling */\n-#define ARM_FLAG_NO_SCHED_PRO\t(1 << 12)\n-\n-/* Nonzero if a call to abort should be generated if a noreturn\n-   function tries to return.  */\n-#define ARM_FLAG_ABORT_NORETURN\t(1 << 13)\n-\n-/* Nonzero if function prologues should not load the PIC register.  */\n-#define ARM_FLAG_SINGLE_PIC_BASE (1 << 14)\n-\n-/* Nonzero if all call instructions should be indirect.  */\n-#define ARM_FLAG_LONG_CALLS\t(1 << 15)\n-\n-/* Nonzero means that the target ISA is the THUMB, not the ARM.  */\n-#define ARM_FLAG_THUMB          (1 << 16)\n-\n-/* Set if a TPCS style stack frame should be generated, for non-leaf\n-   functions, even if they do not need one.  */\n-#define THUMB_FLAG_BACKTRACE\t(1 << 17)\n-\n-/* Set if a TPCS style stack frame should be generated, for leaf\n-   functions, even if they do not need one.  */\n-#define THUMB_FLAG_LEAF_BACKTRACE    \t\t(1 << 18)\n-\n-/* Set if externally visible functions should assume that they\n-   might be called in ARM mode, from a non-thumb aware code.  */\n-#define THUMB_FLAG_CALLEE_SUPER_INTERWORKING\t(1 << 19)\n-\n-/* Set if calls via function pointers should assume that their\n-   destination is non-Thumb aware.  */\n-#define THUMB_FLAG_CALLER_SUPER_INTERWORKING\t(1 << 20)\n-\n-/* Fix invalid Cirrus instruction combinations by inserting NOPs.  */\n-#define CIRRUS_FIX_INVALID_INSNS (1 << 21)\n-\n-#define TARGET_APCS_FRAME\t\t(target_flags & ARM_FLAG_APCS_FRAME)\n-#define TARGET_POKE_FUNCTION_NAME\t(target_flags & ARM_FLAG_POKE)\n-#define TARGET_FPE\t\t\t(target_flags & ARM_FLAG_FPE)\n-#define TARGET_APCS_STACK\t\t(target_flags & ARM_FLAG_APCS_STACK)\n-#define TARGET_APCS_FLOAT\t\t(target_flags & ARM_FLAG_APCS_FLOAT)\n-#define TARGET_APCS_REENT\t\t(target_flags & ARM_FLAG_APCS_REENT)\n #define TARGET_SOFT_FLOAT\t\t(arm_float_abi == ARM_FLOAT_ABI_SOFT)\n /* Use hardware floating point instructions. */\n #define TARGET_HARD_FLOAT\t\t(arm_float_abi != ARM_FLOAT_ABI_SOFT)\n@@ -278,22 +183,11 @@ extern GTY(()) rtx aof_pic_label;\n #define TARGET_IWMMXT\t\t\t(arm_arch_iwmmxt)\n #define TARGET_REALLY_IWMMXT\t\t(TARGET_IWMMXT && TARGET_ARM)\n #define TARGET_IWMMXT_ABI (TARGET_ARM && arm_abi == ARM_ABI_IWMMXT)\n-#define TARGET_BIG_END\t\t\t(target_flags & ARM_FLAG_BIG_END)\n-#define TARGET_INTERWORK\t\t(target_flags & ARM_FLAG_INTERWORK)\n-#define TARGET_LITTLE_WORDS\t\t(target_flags & ARM_FLAG_LITTLE_WORDS)\n-#define TARGET_NO_SCHED_PRO\t\t(target_flags & ARM_FLAG_NO_SCHED_PRO)\n-#define TARGET_ABORT_NORETURN\t\t(target_flags & ARM_FLAG_ABORT_NORETURN)\n-#define TARGET_SINGLE_PIC_BASE\t\t(target_flags & ARM_FLAG_SINGLE_PIC_BASE)\n-#define TARGET_LONG_CALLS\t\t(target_flags & ARM_FLAG_LONG_CALLS)\n-#define TARGET_THUMB                    (target_flags & ARM_FLAG_THUMB)\n #define TARGET_ARM                      (! TARGET_THUMB)\n #define TARGET_EITHER\t\t\t1 /* (TARGET_ARM | TARGET_THUMB) */\n-#define TARGET_CALLEE_INTERWORKING\t(target_flags & THUMB_FLAG_CALLEE_SUPER_INTERWORKING)\n-#define TARGET_CALLER_INTERWORKING\t(target_flags & THUMB_FLAG_CALLER_SUPER_INTERWORKING)\n-#define TARGET_BACKTRACE\t        (leaf_function_p ()\t      \t\t\t\\\n-\t\t\t\t         ? (target_flags & THUMB_FLAG_LEAF_BACKTRACE)\t\\\n-\t\t\t\t         : (target_flags & THUMB_FLAG_BACKTRACE))\n-#define TARGET_CIRRUS_FIX_INVALID_INSNS\t(target_flags & CIRRUS_FIX_INVALID_INSNS)\n+#define TARGET_BACKTRACE\t        (leaf_function_p () \\\n+\t\t\t\t         ? TARGET_TPCS_LEAF_FRAME \\\n+\t\t\t\t         : TARGET_TPCS_FRAME)\n #define TARGET_LDRD\t\t\t(arm_arch5e && ARM_DOUBLEWORD_ALIGN)\n #define TARGET_AAPCS_BASED \\\n     (arm_abi != ARM_ABI_APCS && arm_abi != ARM_ABI_ATPCS)\n@@ -306,100 +200,6 @@ extern GTY(()) rtx aof_pic_label;\n #define TARGET_BPABI false\n #endif\n \n-/* SUBTARGET_SWITCHES is used to add flags on a per-config basis.  */\n-#ifndef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES\n-#endif\n-\n-#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  {\"apcs\",\t\t\tARM_FLAG_APCS_FRAME, \"\" },\t\t\\\n-  {\"apcs-frame\",\t\tARM_FLAG_APCS_FRAME,\t\t\t\\\n-   N_(\"Generate APCS conformant stack frames\") },\t\t\t\\\n-  {\"no-apcs-frame\",\t       -ARM_FLAG_APCS_FRAME, \"\" },\t\t\\\n-  {\"poke-function-name\",\tARM_FLAG_POKE,\t\t\t\t\\\n-   N_(\"Store function names in object code\") },\t\t\t\t\\\n-  {\"no-poke-function-name\",    -ARM_FLAG_POKE, \"\" },\t\t\t\\\n-  {\"fpe\",\t\t\tARM_FLAG_FPE,  \"\" },\t\t\t\\\n-  {\"apcs-stack-check\",\t\tARM_FLAG_APCS_STACK, \"\" },\t\t\\\n-  {\"no-apcs-stack-check\",      -ARM_FLAG_APCS_STACK, \"\" },\t\t\\\n-  {\"apcs-float\",\t\tARM_FLAG_APCS_FLOAT,\t\t\t\\\n-   N_(\"Pass FP arguments in FP registers\") },\t\t\t\t\\\n-  {\"no-apcs-float\",\t       -ARM_FLAG_APCS_FLOAT, \"\" },\t\t\\\n-  {\"apcs-reentrant\",\t\tARM_FLAG_APCS_REENT,\t\t\t\\\n-   N_(\"Generate re-entrant, PIC code\") },\t\t\t\t\\\n-  {\"no-apcs-reentrant\",\t       -ARM_FLAG_APCS_REENT, \"\" },\t\t\\\n-  {\"big-endian\",\t\tARM_FLAG_BIG_END,\t\t\t\\\n-   N_(\"Assume target CPU is configured as big endian\") },\t\t\\\n-  {\"little-endian\",\t       -ARM_FLAG_BIG_END,\t\t\t\\\n-   N_(\"Assume target CPU is configured as little endian\") },\t\t\\\n-  {\"words-little-endian\",       ARM_FLAG_LITTLE_WORDS,\t\t\t\\\n-   N_(\"Assume big endian bytes, little endian words\") },\t\t\\\n-  {\"thumb-interwork\",\t\tARM_FLAG_INTERWORK,\t\t\t\\\n-   N_(\"Support calls between Thumb and ARM instruction sets\") },\t\\\n-  {\"no-thumb-interwork\",       -ARM_FLAG_INTERWORK, \"\" },\t\t\\\n-  {\"abort-on-noreturn\",         ARM_FLAG_ABORT_NORETURN,\t\t\\\n-   N_(\"Generate a call to abort if a noreturn function returns\")},\t\\\n-  {\"no-abort-on-noreturn\",     -ARM_FLAG_ABORT_NORETURN, \"\" },\t\t\\\n-  {\"no-sched-prolog\",           ARM_FLAG_NO_SCHED_PRO,\t\t\t\\\n-   N_(\"Do not move instructions into a function's prologue\") },\t\t\\\n-  {\"sched-prolog\",             -ARM_FLAG_NO_SCHED_PRO, \"\" },\t\t\\\n-  {\"single-pic-base\",\t\tARM_FLAG_SINGLE_PIC_BASE,\t\t\\\n-   N_(\"Do not load the PIC register in function prologues\") },\t\t\\\n-  {\"no-single-pic-base\",       -ARM_FLAG_SINGLE_PIC_BASE, \"\" },\t\t\\\n-  {\"long-calls\",\t\tARM_FLAG_LONG_CALLS,\t\t\t\\\n-   N_(\"Generate call insns as indirect calls, if necessary\") },\t\t\\\n-  {\"no-long-calls\",\t       -ARM_FLAG_LONG_CALLS, \"\" },\t\t\\\n-  {\"thumb\",                     ARM_FLAG_THUMB,\t\t\t\t\\\n-   N_(\"Compile for the Thumb not the ARM\") },\t\t\t\t\\\n-  {\"no-thumb\",                 -ARM_FLAG_THUMB, \"\" },\t\t\t\\\n-  {\"arm\",                      -ARM_FLAG_THUMB, \"\" },\t\t\t\\\n-  {\"tpcs-frame\",\t\t    THUMB_FLAG_BACKTRACE,\t\t\\\n-   N_(\"Thumb: Generate (non-leaf) stack frames even if not needed\") },\t   \\\n-  {\"no-tpcs-frame\",                -THUMB_FLAG_BACKTRACE, \"\" },\t\t   \\\n-  {\"tpcs-leaf-frame\",\t  \t    THUMB_FLAG_LEAF_BACKTRACE,\t\t   \\\n-   N_(\"Thumb: Generate (leaf) stack frames even if not needed\") },\t   \\\n-  {\"no-tpcs-leaf-frame\",           -THUMB_FLAG_LEAF_BACKTRACE, \"\" },\t   \\\n-  {\"callee-super-interworking\",\t    THUMB_FLAG_CALLEE_SUPER_INTERWORKING,  \\\n-   N_(\"Thumb: Assume non-static functions may be called from ARM code\") }, \\\n-  {\"no-callee-super-interworking\", -THUMB_FLAG_CALLEE_SUPER_INTERWORKING,  \\\n-     \"\" },\t\t\t\t\t\t\t\t   \\\n-  {\"caller-super-interworking\",\t    THUMB_FLAG_CALLER_SUPER_INTERWORKING,  \\\n-   N_(\"Thumb: Assume function pointers may go to non-Thumb aware code\") }, \\\n-  {\"no-caller-super-interworking\", -THUMB_FLAG_CALLER_SUPER_INTERWORKING,  \\\n-   \"\" },\t\t\t\t\t\t\t\t   \\\n-  {\"cirrus-fix-invalid-insns\",      CIRRUS_FIX_INVALID_INSNS,\t\t   \\\n-   N_(\"Cirrus: Place NOPs to avoid invalid instruction combinations\") },   \\\n-  {\"no-cirrus-fix-invalid-insns\",  -CIRRUS_FIX_INVALID_INSNS,\t\t   \\\n-   N_(\"Cirrus: Do not break up invalid instruction combinations with NOPs\") },\\\n-  SUBTARGET_SWITCHES\t\t\t\t\t\t\t   \\\n-  {\"\",\t\t\t\tTARGET_DEFAULT, \"\" }\t\t\t   \\\n-}\n-\n-#define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  {\"cpu=\",  & arm_select[0].string,\t\t\t\t\t\\\n-   N_(\"Specify the name of the target CPU\"), 0},\t\t\t\\\n-  {\"arch=\", & arm_select[1].string,\t\t\t\t\t\\\n-   N_(\"Specify the name of the target architecture\"), 0},\t\t\\\n-  {\"tune=\", & arm_select[2].string, \"\", 0},\t\t\t\t\\\n-  {\"fpe=\",  & target_fpe_name, \"\", 0},\t\t\t\t\t\\\n-  {\"fp=\",  & target_fpe_name, \"\", 0},\t\t\t\t\t\\\n-  {\"fpu=\",  & target_fpu_name,\t\t\t\t\t\t\\\n-   N_(\"Specify the name of the target floating point hardware/format\"), 0}, \\\n-  {\"float-abi=\", & target_float_abi_name,\t\t\t\t\\\n-   N_(\"Specify if floating point hardware should be used\"), 0},\t\t\\\n-  {\"structure-size-boundary=\", & structure_size_string,\t\t\t\\\n-   N_(\"Specify the minimum bit alignment of structures\"), 0},\t\t\\\n-  {\"pic-register=\", & arm_pic_register_string,\t\t\t\t\\\n-   N_(\"Specify the register to be used for PIC addressing\"), 0},\t\\\n-  {\"abi=\", &target_abi_name, N_(\"Specify an ABI\"), 0},\t\t\t\\\n-  {\"soft-float\", &target_float_switch,\t\t\t\t\t\\\n-   N_(\"Alias for -mfloat-abi=soft\"), \"s\"},\t\t\t\t\\\n-  {\"hard-float\", &target_float_switch,\t\t\t\t\t\\\n-   N_(\"Alias for -mfloat-abi=hard\"), \"h\"}\t\t\t\t\\\n-}\n-\n /* Support for a compile-time default CPU, et cetera.  The rules are:\n    --with-arch is ignored if -march or -mcpu are specified.\n    --with-cpu is ignored if -march or -mcpu are specified, and is overridden\n@@ -419,18 +219,6 @@ extern GTY(()) rtx aof_pic_label;\n   {\"fpu\", \"%{!mfpu=*:-mfpu=%(VALUE)}\"}, \\\n   {\"abi\", \"%{!mabi=*:-mabi=%(VALUE)}\"},\n \n-struct arm_cpu_select\n-{\n-  const char *              string;\n-  const char *              name;\n-  const struct processors * processors;\n-};\n-\n-/* This is a magic array.  If the user specifies a command line switch\n-   which matches one of the entries in TARGET_OPTIONS then the corresponding\n-   string pointer will be set to the value specified by the user.  */\n-extern struct arm_cpu_select arm_select[];\n-\n /* Which floating point model to use.  */\n enum arm_fp_model\n {\n@@ -550,7 +338,7 @@ extern int arm_tune_wbuf;\n extern int arm_cpp_interwork;\n \n #ifndef TARGET_DEFAULT\n-#define TARGET_DEFAULT  (ARM_FLAG_APCS_FRAME)\n+#define TARGET_DEFAULT  (MASK_APCS_FRAME)\n #endif\n \n /* The frame pointer register used in gcc has nothing to do with debugging;\n@@ -698,9 +486,6 @@ extern int arm_structure_size_boundary;\n #define DEFAULT_STRUCTURE_SIZE_BOUNDARY 32\n #endif\n \n-/* Used when parsing command line option -mstructure_size_boundary.  */\n-extern const char * structure_size_string;\n-\n /* Nonzero if move instructions will actually fail to work\n    when given unaligned data.  */\n #define STRICT_ALIGNMENT 1\n@@ -927,8 +712,7 @@ extern const char * structure_size_string;\n      is an easy way of ensuring that it remains valid for all\t\\\n      calls.  */\t\t\t\t\t\t\t\\\n   if (TARGET_APCS_FRAME || TARGET_CALLER_INTERWORKING\t\t\\\n-      || (target_flags & (THUMB_FLAG_LEAF_BACKTRACE\t\t\\\n-\t\t\t  | THUMB_FLAG_BACKTRACE)))\t\t\\\n+      || TARGET_TPCS_FRAME || TARGET_TPCS_LEAF_FRAME)\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       fixed_regs[ARM_HARD_FRAME_POINTER_REGNUM] = 1;\t\t\\\n       call_used_regs[ARM_HARD_FRAME_POINTER_REGNUM] = 1;\t\\\n@@ -2401,9 +2185,6 @@ do {\t\t\t\t\t\t\t\\\n    using sb (r9) all the time.  */\n extern int arm_pic_register;\n \n-/* Used when parsing command line option -mpic-register=.  */\n-extern const char * arm_pic_register_string;\n-\n /* The register number of the register used to address a table of static\n    data addresses in memory.  */\n #define PIC_OFFSET_TABLE_REGNUM arm_pic_register"}, {"sha": "28bec490e3872cbeb797c34ccd0239a878e505f9", "filename": "gcc/config/arm/arm.opt", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=c54c7322513c602b6a0e108afc3146ce9cc2b8f8", "patch": "@@ -0,0 +1,151 @@\n+; Options for the ARM port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+mabi=\n+Target RejectNegative Joined\n+Specify an ABI\n+\n+mabort-on-noreturn\n+Target Report Mask(ABORT_NORETURN)\n+Generate a call to abort if a noreturn function returns\n+\n+mapcs\n+Target RejectNegative Mask(APCS_FRAME) MaskExists Undocumented\n+\n+mapcs-float\n+Target Report Mask(APCS_FLOAT)\n+Pass FP arguments in FP registers\n+\n+mapcs-frame\n+Target Report Mask(APCS_FRAME)\n+Generate APCS conformant stack frames\n+\n+mapcs-reentrant\n+Target Report Mask(APCS_REENT)\n+Generate re-entrant, PIC code\n+\n+mapcs-stack-check\n+Target Report Mask(APCS_STACK) Undocumented\n+\n+march=\n+Target RejectNegative Joined\n+Specify the name of the target architecture\n+\n+marm\n+Target RejectNegative InverseMask(THUMB) Undocumented\n+\n+mbig-endian\n+Target Report RejectNegative Mask(BIG_END)\n+Assume target CPU is configured as big endian\n+\n+mcallee-super-interworking\n+Target Report Mask(CALLEE_INTERWORKING)\n+Thumb: Assume non-static functions may be called from ARM code\n+\n+mcaller-super-interworking\n+Target Report Mask(CALLER_INTERWORKING)\n+Thumb: Assume function pointers may go to non-Thumb aware code\n+\n+mcirrus-fix-invalid-insns\n+Target Report Mask(CIRRUS_FIX_INVALID_INSNS)\n+Cirrus: Place NOPs to avoid invalid instruction combinations\n+\n+mcpu=\n+Target RejectNegative Joined\n+Specify the name of the target CPU\n+\n+mfloat-abi=\n+Target RejectNegative Joined\n+Specify if floating point hardware should be used\n+\n+mfp=\n+Target RejectNegative Joined Undocumented\n+\n+;; Now ignored.\n+mfpe\n+Target RejectNegative Mask(FPE) Undocumented\n+\n+mfpe=\n+Target RejectNegative Joined Undocumented\n+\n+mfpu=\n+Target RejectNegative Joined\n+Specify the name of the target floating point hardware/format\n+\n+mhard-float\n+Target RejectNegative\n+Alias for -mfloat-abi=hard\n+\n+mlittle-endian\n+Target Report RejectNegative InverseMask(BIG_END)\n+Assume target CPU is configured as little endian\n+\n+mlong-calls\n+Target Report Mask(LONG_CALLS)\n+Generate call insns as indirect calls, if necessary\n+\n+mpic-register=\n+Target RejectNegative Joined\n+Specify the register to be used for PIC addressing\n+\n+mpoke-function-name\n+Target Report Mask(POKE_FUNCTION_NAME)\n+Store function names in object code\n+\n+msched-prolog\n+Target Report Mask(SCHED_PROLOG)\n+Permit scheduling of a function's prologue sequence\n+\n+msingle-pic-base\n+Target Report Mask(SINGLE_PIC_BASE)\n+Do not load the PIC register in function prologues\n+\n+msoft-float\n+Target RejectNegative\n+Alias for -mfloat-abi=soft\n+\n+mstructure-size-boundary=\n+Target RejectNegative Joined\n+Specify the minimum bit alignment of structures\n+\n+mthumb\n+Target Report Mask(THUMB)\n+Compile for the Thumb not the ARM\n+\n+mthumb-interwork\n+Target Report Mask(INTERWORK)\n+Support calls between Thumb and ARM instruction sets\n+\n+mtpcs-frame\n+Target Report Mask(TPCS_FRAME)\n+Thumb: Generate (non-leaf) stack frames even if not needed\n+\n+mtpcs-leaf-frame\n+Target Report Mask(TPCS_LEAF_FRAME)\n+Thumb: Generate (leaf) stack frames even if not needed\n+\n+mtune=\n+Target RejectNegative Joined\n+Tune code for the given processor\n+\n+mwords-little-endian\n+Target Report RejectNegative Mask(LITTLE_WORDS)\n+Assume big endian bytes, little endian words"}, {"sha": "7a910987ec8ac160369b6323e4df0e40bb92d3ce", "filename": "gcc/config/arm/coff.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcoff.h?ref=c54c7322513c602b6a0e108afc3146ce9cc2b8f8", "patch": "@@ -34,7 +34,7 @@\n #define TARGET_DEFAULT_FLOAT_ABI ARM_FLOAT_ABI_SOFT\n \n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT (ARM_FLAG_APCS_FRAME)\n+#define TARGET_DEFAULT (MASK_APCS_FRAME)\n \n #ifndef MULTILIB_DEFAULTS\n #define MULTILIB_DEFAULTS \\"}, {"sha": "56f8422ee503629eb0b0f41ae3f84db2e39ba9b8", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=c54c7322513c602b6a0e108afc3146ce9cc2b8f8", "patch": "@@ -108,7 +108,7 @@\n #endif\n \n #ifndef TARGET_DEFAULT\n-#define TARGET_DEFAULT (ARM_FLAG_APCS_FRAME)\n+#define TARGET_DEFAULT (MASK_APCS_FRAME)\n #endif\n \n #ifndef MULTILIB_DEFAULTS"}, {"sha": "a33079b64f5f8bfacc33fc4dc65dfdaa87625d7a", "filename": "gcc/config/arm/netbsd-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h?ref=c54c7322513c602b6a0e108afc3146ce9cc2b8f8", "patch": "@@ -35,7 +35,7 @@\n /* Default it to use ATPCS with soft-VFP.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT\t\t\t\\\n-  (ARM_FLAG_APCS_FRAME\t\t\t\\\n+  (MASK_APCS_FRAME\t\t\t\\\n    | TARGET_ENDIAN_DEFAULT)\n \n #undef ARM_DEFAULT_ABI"}, {"sha": "1d67c75130e2606c73d6c49c1a50e0b25c47fb01", "filename": "gcc/config/arm/netbsd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd.h?ref=c54c7322513c602b6a0e108afc3146ce9cc2b8f8", "patch": "@@ -36,7 +36,7 @@\n #define SUBTARGET_CPU_DEFAULT TARGET_CPU_arm6\n \n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (ARM_FLAG_APCS_FRAME)\n+#define TARGET_DEFAULT (MASK_APCS_FRAME)\n \n /* Some defines for CPP.\n    arm32 is the NetBSD port name, so we always define arm32 and __arm32__.  */\n@@ -58,7 +58,7 @@\n %(cpp_cpu_arch) %(cpp_float) %(cpp_endian) %(netbsd_cpp_spec) \\\n \"\n \n-/* Because TARGET_DEFAULT sets ARM_FLAG_SOFT_FLOAT */\n+/* Because TARGET_DEFAULT sets MASK_SOFT_FLOAT */\n #undef CPP_FLOAT_DEFAULT_SPEC\n #define CPP_FLOAT_DEFAULT_SPEC \"-D__SOFTFP__\"\n "}, {"sha": "465789ff34b899027d9a0c7f76c09cfa582ac977", "filename": "gcc/config/arm/pe.h", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Fpe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Fpe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.h?ref=c54c7322513c602b6a0e108afc3146ce9cc2b8f8", "patch": "@@ -45,22 +45,8 @@\n #undef  SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC \"-D__pe__\"\n \n-\n-/* Experimental addition for pr 7885.\n-   Ignore dllimport for functions.  */\n-#define TARGET_FLAG_NOP_FUN\t(1 << 24)\n-\n-#undef  TARGET_NOP_FUN_DLLIMPORT\n-#define TARGET_NOP_FUN_DLLIMPORT (target_flags & TARGET_FLAG_NOP_FUN)\n-\n-#undef  SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES\t\t\t\t\t\\\n-{ \"nop-fun-dllimport\",\t\t  TARGET_FLAG_NOP_FUN,\t\t\\\n-  N_(\"Ignore dllimport attribute for functions\") },\t\t\\\n-{ \"no-nop-fun-dllimport\",\t- TARGET_FLAG_NOP_FUN, \"\" },\n-\n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT\t(TARGET_FLAG_NOP_FUN)\n+#define TARGET_DEFAULT\t(MASK_NOP_FUN_DLLIMPORT)\n \n #undef  MULTILIB_DEFAULTS\n #define MULTILIB_DEFAULTS \\"}, {"sha": "05ec5941e3bd5b76ed090ab87ac779e6eae7a6bf", "filename": "gcc/config/arm/pe.opt", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Fpe.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Fpe.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.opt?ref=c54c7322513c602b6a0e108afc3146ce9cc2b8f8", "patch": "@@ -0,0 +1,24 @@\n+; PE-specific options for the ARM port\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+mnop-fun-dllimport\n+Target Report Mask(NOP_FUN_DLLIMPORT)\n+Ignore dllimport attribute for functions"}, {"sha": "4c73f0a9b7c8716480855bd1eead0d75d703e82e", "filename": "gcc/config/arm/semi.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Fsemi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Fsemi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsemi.h?ref=c54c7322513c602b6a0e108afc3146ce9cc2b8f8", "patch": "@@ -43,7 +43,7 @@\n #endif\n \n #ifndef TARGET_DEFAULT\n-#define TARGET_DEFAULT (ARM_FLAG_APCS_FRAME)\n+#define TARGET_DEFAULT (MASK_APCS_FRAME)\n #endif\n \n #ifndef SUBTARGET_EXTRA_SPECS"}, {"sha": "fbeb756e3671a4395207ba4773652b3ba62ab62f", "filename": "gcc/config/arm/uclinux-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Fuclinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Fuclinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fuclinux-elf.h?ref=c54c7322513c602b6a0e108afc3146ce9cc2b8f8", "patch": "@@ -27,4 +27,4 @@\n #define TARGET_VERSION fputs (\" (ARM/ELF ucLinux)\", stderr);\n \n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT (ARM_FLAG_SINGLE_PIC_BASE)\n+#define TARGET_DEFAULT (MASK_SINGLE_PIC_BASE)"}, {"sha": "9f17d7380ba73da223281f1b2116412535034bc3", "filename": "gcc/config/arm/wince-pe.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Fwince-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54c7322513c602b6a0e108afc3146ce9cc2b8f8/gcc%2Fconfig%2Farm%2Fwince-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fwince-pe.h?ref=c54c7322513c602b6a0e108afc3146ce9cc2b8f8", "patch": "@@ -20,7 +20,7 @@\n    Boston, MA 02111-1307, USA.  */\n \n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT\t(TARGET_FLAG_NOP_FUN)\n+#define TARGET_DEFAULT\t(MASK_NOP_FUN_DLLIMPORT)\n \n #undef  MULTILIB_DEFAULTS\n #define MULTILIB_DEFAULTS \\"}]}