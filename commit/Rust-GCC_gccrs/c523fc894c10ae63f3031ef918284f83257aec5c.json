{"sha": "c523fc894c10ae63f3031ef918284f83257aec5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUyM2ZjODk0YzEwYWU2M2YzMDMxZWY5MTgyODRmODMyNTdhZWM1Yw==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@linaro.org", "date": "2012-06-27T14:19:17Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2012-06-27T14:19:17Z"}, "message": "re PR c++/51033 (generic vector subscript and shuffle support was not added to C++)\n\n\n2012-06-27  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n\n\tPR C++/51033\n\t* semantics.c (constexpr_call): Fix typo in comment.\n\t(cxx_eval_vec_perm_expr): New.\n\t(cxx_eval_constant_expression): Fold VEC_PERM_EXPRs.\n\n2012-06-27  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n\n\tPR c++/51033.\n\t* g++.dg/torture/vshuf-16.inc: New test.\n\t* g++.dg/torture/vshuf-2.inc: New test.\n\t* g++.dg/torture/vshuf-4.inc: New test.\n\t* g++.dg/torture/vshuf-8.inc: New test.\n\t* g++.dg/torture/vshuf-main.inc: New test.\n\t* g++.dg/torture/vshuf-v16hi.C: New test.\n\t* g++.dg/torture/vshuf-v16qi.C: New test.\n\t* g++.dg/torture/vshuf-v2df.C: New test.\n\t* g++.dg/torture/vshuf-v2di.C: New test.\n\t* g++.dg/torture/vshuf-v2sf.C: New test.\n\t* g++.dg/torture/vshuf-v2si.C: New test.\n\t* g++.dg/torture/vshuf-v4df.C: New test.\n\t* g++.dg/torture/vshuf-v4di.C: New test.\n\t* g++.dg/torture/vshuf-v4sf.C: New test.\n\t* g++.dg/torture/vshuf-v4si.C: New test.\n\t* g++.dg/torture/vshuf-v8hi.C: New test.\n\t* g++.dg/torture/vshuf-v8qi.C: New test.\n\t* g++.dg/torture/vshuf-v8si.C: New test.\n\nFrom-SVN: r189017", "tree": {"sha": "a263f4992ee59205aa9468f5ba98228a005a7c59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a263f4992ee59205aa9468f5ba98228a005a7c59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c523fc894c10ae63f3031ef918284f83257aec5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c523fc894c10ae63f3031ef918284f83257aec5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c523fc894c10ae63f3031ef918284f83257aec5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c523fc894c10ae63f3031ef918284f83257aec5c/comments", "author": null, "committer": null, "parents": [{"sha": "6f3a2e239041e4daa5279631b70932c6d5e72ed6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f3a2e239041e4daa5279631b70932c6d5e72ed6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f3a2e239041e4daa5279631b70932c6d5e72ed6"}], "stats": {"total": 531, "additions": 530, "deletions": 1}, "files": [{"sha": "4dbe915b73e0b44a1d04f4d035bd89eb7a32e59f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -1,3 +1,10 @@\n+2012-06-27  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n+\n+\tPR C++/51033\n+\t* semantics.c (constexpr_call): Fix typo in comment.\n+\t(cxx_eval_vec_perm_expr): New.\n+\t(cxx_eval_constant_expression): Fold VEC_PERM_EXPRs.\n+\n 2012-06-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR c++/53752"}, {"sha": "d45a6e2cb10dcdc69cc29f05008072154adeaf14", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -6209,7 +6209,7 @@ explain_invalid_constexpr_fn (tree fun)\n typedef struct GTY(()) constexpr_call {\n   /* Description of the constexpr function definition.  */\n   constexpr_fundef *fundef;\n-  /* Parameter bindings enironment.  A TREE_LIST where each TREE_PURPOSE\n+  /* Parameter bindings environment.  A TREE_LIST where each TREE_PURPOSE\n      is a parameter _DECL and the TREE_VALUE is the value of the parameter.\n      Note: This arrangement is made to accomodate the use of\n      iterative_hash_template_arg (see pt.c).  If you change this\n@@ -6233,6 +6233,9 @@ static GTY ((param_is (constexpr_call))) htab_t constexpr_call_table;\n \n static tree cxx_eval_constant_expression (const constexpr_call *, tree,\n \t\t\t\t\t  bool, bool, bool *);\n+static tree cxx_eval_vec_perm_expr (const constexpr_call *, tree, bool, bool,\n+\t\t\t\t    bool *);\n+\n \n /* Compute a hash value for a constexpr call representation.  */\n \n@@ -7495,6 +7498,39 @@ non_const_var_error (tree r)\n     }\n }\n \n+/* Evaluate VEC_PERM_EXPR (v1, v2, mask).  */\n+static tree\n+cxx_eval_vec_perm_expr (const constexpr_call *call, tree t, \n+\t\t\tbool allow_non_constant, bool addr,\n+\t\t\tbool * non_constant_p)\n+{\n+  int i;\n+  tree args[3];\n+  tree val;\n+  tree elttype = TREE_TYPE (t);\n+\n+  for (i = 0; i < 3; i++)\n+    {\n+      args[i] = cxx_eval_constant_expression (call, TREE_OPERAND (t, i),\n+\t\t\t\t\t      allow_non_constant, addr,\n+\t\t\t\t\t      non_constant_p);\n+      if (*non_constant_p)\n+      \tgoto fail;\n+    }\n+\n+  gcc_assert (TREE_CODE (TREE_TYPE (args[0])) == VECTOR_TYPE);\n+  gcc_assert (TREE_CODE (TREE_TYPE (args[1])) == VECTOR_TYPE);\n+  gcc_assert (TREE_CODE (TREE_TYPE (args[2])) == VECTOR_TYPE);\n+\n+  val = fold_ternary_loc (EXPR_LOCATION (t), VEC_PERM_EXPR, elttype, \n+\t\t\t  args[0], args[1], args[2]);\n+  if (val != NULL_TREE)\n+    return val;\n+\n+ fail:\n+  return t;\n+}\n+\n /* Attempt to reduce the expression T to a constant value.\n    On failure, issue diagnostic and return error_mark_node.  */\n /* FIXME unify with c_fully_fold */\n@@ -7773,6 +7809,11 @@ cxx_eval_constant_expression (const constexpr_call *call, tree t,\n \t\t\t     non_constant_p);\n       break;\n \n+    case VEC_PERM_EXPR:\n+      r = cxx_eval_vec_perm_expr (call, t, allow_non_constant, addr,\n+\t\t\t\t  non_constant_p);\n+      break;\n+\n     case CONVERT_EXPR:\n     case VIEW_CONVERT_EXPR:\n     case NOP_EXPR:"}, {"sha": "b65c2df82389b83c0cd930ca46193bd8eda69124", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -1,3 +1,25 @@\n+2012-06-27  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n+\n+\tPR c++/51033.\n+\t* g++.dg/torture/vshuf-16.inc: New test.\n+\t* g++.dg/torture/vshuf-2.inc: New test.\n+\t* g++.dg/torture/vshuf-4.inc: New test.\n+\t* g++.dg/torture/vshuf-8.inc: New test.\n+\t* g++.dg/torture/vshuf-main.inc: New test.\n+\t* g++.dg/torture/vshuf-v16hi.C: New test.\n+\t* g++.dg/torture/vshuf-v16qi.C: New test.\n+\t* g++.dg/torture/vshuf-v2df.C: New test.\n+\t* g++.dg/torture/vshuf-v2di.C: New test.\n+\t* g++.dg/torture/vshuf-v2sf.C: New test.\n+\t* g++.dg/torture/vshuf-v2si.C: New test.\n+\t* g++.dg/torture/vshuf-v4df.C: New test.\n+\t* g++.dg/torture/vshuf-v4di.C: New test.\n+\t* g++.dg/torture/vshuf-v4sf.C: New test.\n+\t* g++.dg/torture/vshuf-v4si.C: New test.\n+\t* g++.dg/torture/vshuf-v8hi.C: New test.\n+\t* g++.dg/torture/vshuf-v8qi.C: New test.\n+\t* g++.dg/torture/vshuf-v8si.C: New test.\n+\n 2012-06-27  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/53676"}, {"sha": "7507305e31eac656c1ccd59c3c2807d2dbb81cd9", "filename": "gcc/testsuite/g++.dg/torture/vshuf-16.inc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-16.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-16.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-16.inc?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -0,0 +1,50 @@\n+/* Test fragment for vectors with 16 elements.  */\n+\n+#ifndef UNSUPPORTED\n+\n+constexpr V in1[] = { { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t\t      { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t\t      { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t\t      { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t\t      { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }};\n+\n+\n+\n+\n+\n+constexpr VI mask1[] = { { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, },\n+\t\t\t { 0x10, 0x21, 0x32, 0x43, 0x54, 0x65, 0x76, 0x87, \n+\t\t\t   0x98, 0xa9, 0xba, 0xcb, 0xdc, 0xed, 0xfe, 0xff }\t,\n+\t\t\t { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 },\n+\t\t\t { 0, 2, 4, 6, 8, 10, 12, 14, 1, 3, 5, 7, 9, 11, 13, 15 },\n+\t\t\t { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 }};\n+\n+constexpr V out1[] = { { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t\t       { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },\n+\t\t       { 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 },\n+\t\t       { 1, 3, 5, 7, 9, 11, 13, 15, 2, 4, 6, 8, 10, 12, 14, 16 },\n+\t\t       { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 }, \n+};\n+\n+constexpr V in2[] = { { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 },\n+\t\t      { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 },\n+\t\t      { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 },\n+\t\t      { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 },\n+\t\t      { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }};\n+\n+\n+constexpr V in3 =  { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 };\n+\n+constexpr VI mask2[] = { { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 },\n+\t\t\t{ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 },\n+\t\t\t{ 7, 6, 5, 4, 16, 17, 18, 19, 31, 30, 29, 28, 3, 2, 1, 0 },\n+\t\t\t{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },\n+\t\t\t{ 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63 }};\n+constexpr V out2[] = {   { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 },\n+\t\t\t   { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 },\n+\t\t\t   { 17, 16, 15, 14, 30, 31, 32, 33, 45, 44, 43, 42, 13, 12, 11, 10 },\n+\t\t\t   { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },\n+\t\t\t   { 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45 },\n+};\n+\n+#endif"}, {"sha": "68055835c1cddf97a9b265e94e8d5581039075c6", "filename": "gcc/testsuite/g++.dg/torture/vshuf-2.inc", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-2.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-2.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-2.inc?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -0,0 +1,22 @@\n+/* Test fragment for vectors of 2 elements.  */\n+\n+#ifndef UNSUPPORTED\n+\n+constexpr V in1[] = { { A, B}, {A, B}, { A, B},\n+\t    \t      { A, B}, {X, Y}, { X, Y}};\n+constexpr VI mask1[] = { {0, 1}, {(unsigned)-16, 1}, {1, 0},\n+\t     \t         {0, 0}, {  1, 1}, {1, 0}};\n+constexpr V out1[] = { {A, B}, {A, B}, {B, A},\n+\t    \t       {A, A}, {Y, Y}, {Y, X}};\n+\t    \t  \n+constexpr V in2[] = { { A, B}, {A, B}, {A, B}, {A, B},\n+\t    \t      { A, B}, {A, B}, {A, B}};\n+constexpr V in3 = {X, Y};\n+constexpr VI mask2[] = { {0, 1}, {2, 3}, {0, 2}, {2, 1},\n+\t     \t         {3, 0}, {0, 0}, {3, 3}};\n+\n+constexpr V out2[] = { {A, B}, {X, Y}, {A, X}, {X, B},\n+\t    \t       {Y, A}, {A, A}, {Y, Y}};\n+\n+\n+#endif"}, {"sha": "2a18812e1e7d1895d486a234e35193ddcd15b9a2", "filename": "gcc/testsuite/g++.dg/torture/vshuf-4.inc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-4.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-4.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-4.inc?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -0,0 +1,25 @@\n+/* Test fragment for vectors of 4 elements.  */\n+\n+#ifndef UNSUPPORTED\n+\n+constexpr V in1[] = { {A, B, C, D}, {A, B, C, D}, {A, B, C, D}, {A, B, C, D},\n+\t\t     {A, B, C, D}, {W, X, Y, Z}, {W, X, Y, Z}, {W, X, Y, Z}};\n+\n+constexpr VI mask1[] = { {0, 1, 2, 3}, {0+1*4, 1+2*4, 2+3*4, 3+4*4}, {3, 2, 1, 0},\n+\t\t\t {0, 3, 2, 1}, {0, 2, 1, 3}, {3, 1, 2, 0}, {0, 0, 0, 0},\n+\t\t\t {1, 2, 1, 2}};\n+\n+constexpr V out1[] = { { A, B, C, D}, {A, B, C, D}, {D, C, B, A}, {A, D, C, B},\n+\t\t       { A, C, B, D}, {Z, X, Y, W}, {W, W, W, W}, {X, Y, X, Y}};\n+\n+\n+constexpr V in2[] = { {A, B, C, D}, {A, B, C, D}, {A, B, C, D}, {A, B, C, D},\n+\t\t      {A, B, C, D}, {A, B, C, D}};\n+constexpr V in3 = {W, X, Y, Z};\n+constexpr VI mask2[] = { {0, 1, 2, 3}, {4, 5, 6, 7}, {0, 4, 1, 5}, {0, 7, 4, 3},\n+\t\t\t {0, 0, 0, 0}, {7, 7, 7, 7}};\n+constexpr V out2[] = { {A, B, C, D}, {W, X, Y, Z}, {A, W, B, X}, {A, Z, W, D},\n+\t\t       {A, A, A, A}, {Z, Z, Z, Z}};\n+\n+\n+#endif"}, {"sha": "177e9f1665be27030964880e0b59418b9dcd2b21", "filename": "gcc/testsuite/g++.dg/torture/vshuf-8.inc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-8.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-8.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-8.inc?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -0,0 +1,56 @@\n+/* Test fragment for vectors of 8 elements.  */\n+\n+#ifndef UNSUPPORTED\n+\n+constexpr V in1[] = { { A1, B1, C1, D1, E1, F1, G1, H1 },\n+\t\t      { A1, B1, C1, D1, E1, F1, G1, H1 },\n+\t\t      { A1, B1, C1, D1, E1, F1, G1, H1 },\n+\t\t      { A1, B1, C1, D1, E1, F1, G1, H1 },\n+\t\t      { A1, B1, C1, D1, E1, F1, G1, H1 },\n+\t\t      { A2, B2, C2, D2, E2, F2, G2, H2 },\n+\t\t      { A2, B2, C2, D2, E2, F2, G2, H2 },\n+\t\t      { A2, B2, C2, D2, E2, F2, G2, H2 }};\n+\n+constexpr VI mask1[] = { {  0,  1,  2,  3,  4,  5,  6,  7 },\n+\t\t       { 0x10, 0x21, 0x32, 0x43, 0x54, 0x65, 0x76, 0x87 },\n+\t\t       {  7,  6,  5,  4,  3,  2,  1,  0 },\n+\t\t       {  7,  0,  5,  3,  2,  4,  1,  6 },\n+\t\t       {  0,  2,  1,  3,  4,  6,  5,  7 },\n+\t\t       {  3,  1,  2,  0,  7,  5,  6,  4 },\n+\t\t       { 0, 0, 0, 0 },\n+\t\t       {  1,  6,  1,  6,  1,  6,  1,  6 }};\n+\n+constexpr V out1[] =   { { A1, B1, C1, D1, E1, F1, G1, H1 },\n+\t\t\t { A1, B1, C1, D1, E1, F1, G1, H1 },\n+\t\t\t { H1, G1, F1, E1, D1, C1, B1, A1 },\n+\t\t\t { H1, A1, F1, D1, C1, E1, B1, G1 },\n+\t\t\t { A1, C1, B1, D1, E1, G1, F1, H1 },\n+\t\t\t { D2, B2, C2, A2, H2, F2, G2, E2 },\n+\t\t\t { A2, A2, A2, A2, A2, A2, A2, A2 },\n+\t\t\t { B2, G2, B2, G2, B2, G2, B2, G2 }};\n+\n+constexpr V in2 [] = {     { A1, B1, C1, D1, E1, F1, G1, H1 },\n+\t\t\t   { A1, B1, C1, D1, E1, F1, G1, H1 },\n+\t\t\t   { A1, B1, C1, D1, E1, F1, G1, H1 },\n+\t\t\t   { A1, B1, C1, D1, E1, F1, G1, H1 },\n+\t\t\t   { A1, B1, C1, D1, E1, F1, G1, H1 },\n+\t\t\t   { A1, B1, C1, D1, E1, F1, G1, H1 }};\n+\n+\n+constexpr V in3 = { A2, B2, C2, D2, E2, F2, G2, H2};\n+\n+constexpr VI mask2[] = { { 0, 1, 2, 3, 4, 5, 6, 7 },\n+\t\t       {  8,  9, 10, 11, 12, 13, 14, 15 },\n+\t\t       {  0,  8,  1,  9,  2, 10,  3, 11 },\n+\t\t       {  0, 15,  4, 11, 12,  3,  7,  8 },\n+\t\t       {  0,  0,  0,  0,  0,  0,  0,  0 },\n+\t\t       { 0x1e, 0x2e, 0x3e, 0x4e, 0x5e, 0x6e, 0x7e, 0x8e }};\n+\n+constexpr V out2[] = { { A1, B1, C1, D1, E1, F1, G1, H1 },\n+\t\t       { A2, B2, C2, D2, E2, F2, G2, H2 },\n+\t\t       { A1, A2, B1, B2, C1, C2, D1, D2 },\n+\t\t       { A1, H2, E1, D2, E2, D1, H1, A2 },\n+\t\t       { A1, A1, A1, A1, A1, A1, A1, A1 }, \n+\t\t       { G2, G2, G2, G2, G2, G2, G2, G2 }};\n+\n+#endif"}, {"sha": "6c2310a4b856665dc95bac87e28bdc11b29cf2d7", "filename": "gcc/testsuite/g++.dg/torture/vshuf-main.inc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-main.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-main.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-main.inc?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -0,0 +1,29 @@\n+/* Driver fragment for __builtin_shuffle of any vector shape.  */\n+\n+// { dg-options \"-std=c++11\" }\n+// { dg-do run }\n+\n+extern \"C\" void abort(void);\n+\n+int main()\n+{\n+#ifndef UNSUPPORTED\n+  int i;\n+\n+  for (i = 0; i < sizeof(in1)/sizeof(in1[0]); ++i)\n+    {\n+      V r = __builtin_shuffle(in1[i], mask1[i]);\n+      if (__builtin_memcmp(&r, &out1[i], sizeof(V)) != 0)\n+\tabort();\n+    }\n+\n+  for (i = 0; i < sizeof(in2)/sizeof(in2[0]); ++i)\n+    {\n+      V r = __builtin_shuffle(in2[i], in3, mask2[i]);\n+      if (__builtin_memcmp(&r, &out2[i], sizeof(V)) != 0)\n+\tabort();\n+    }\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "6277068b859579bf698ca7e33bf4c140b0895cb5", "filename": "gcc/testsuite/g++.dg/torture/vshuf-v16hi.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v16hi.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v16hi.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v16hi.C?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -0,0 +1,8 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-do run }\n+\n+typedef unsigned short V __attribute__((vector_size(32)));\n+typedef V VI;\n+\n+#include \"vshuf-16.inc\"\n+#include \"vshuf-main.inc\""}, {"sha": "56801177583bb7fe4d78bc21a1ff2d3da19e7821", "filename": "gcc/testsuite/g++.dg/torture/vshuf-v16qi.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v16qi.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v16qi.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v16qi.C?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -0,0 +1,8 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-do run }\n+\n+typedef unsigned char V __attribute__((vector_size(16)));\n+typedef V VI;\n+\n+#include \"vshuf-16.inc\"\n+#include \"vshuf-main.inc\""}, {"sha": "ba45078ea13341f8e9d3a65bbfd4c0bf45ac4cca", "filename": "gcc/testsuite/g++.dg/torture/vshuf-v2df.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v2df.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v2df.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v2df.C?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -0,0 +1,17 @@\n+// { dg-options \"-std=c++11\" }\n+// // { dg-do run }\n+#if __SIZEOF_DOUBLE__ == 8 && __SIZEOF_LONG_LONG__ == 8\n+typedef double V __attribute__((vector_size(16)));\n+typedef unsigned long long VI __attribute__((vector_size(16)));\n+#else\n+#define UNSUPPORTED\n+#endif\n+\n+#define A\t0.69314718055994530942\n+#define B\t2.7182818284590452354\n+\n+#define X\t3.14159265358979323846\n+#define Y\t1.41421356237309504880\n+\n+#include \"vshuf-2.inc\"\n+#include \"vshuf-main.inc\""}, {"sha": "a4272842a365af645f81ea2ba2741ea676463c88", "filename": "gcc/testsuite/g++.dg/torture/vshuf-v2di.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v2di.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v2di.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v2di.C?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -0,0 +1,18 @@\n+// { dg-options \"-std=c++11\" }\n+// // { dg-do run }\n+\n+#if __SIZEOF_LONG_LONG__ == 8\n+typedef unsigned long long V __attribute__((vector_size(16)));\n+typedef V VI;\n+#else\n+#define UNSUPPORTED\n+#endif\n+\n+#define A\t0x1112131415161718\n+#define B\t0x2122232425262728\n+\n+#define X\t0xc1c2c3c4c5c6c7c8\n+#define Y\t0xd1d2d3d4d5d6d7d8\n+\n+#include \"vshuf-2.inc\"\n+#include \"vshuf-main.inc\""}, {"sha": "dd229bac0c3d4b9c04f8f9b06c1960e342f75d8a", "filename": "gcc/testsuite/g++.dg/torture/vshuf-v2sf.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v2sf.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v2sf.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v2sf.C?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -0,0 +1,23 @@\n+// { dg-options \"-std=c++11\" }\n+// // { dg-do run }\n+#if __SIZEOF_FLOAT__ == 4\n+typedef float V __attribute__((vector_size(8)));\n+# if __SIZEOF_INT__ == 4\n+typedef unsigned int VI __attribute__((vector_size(8)));\n+# elif __SIZEOF_LONG__ == 4\n+typedef unsigned long VI __attribute__((vector_size(8)));\n+# else\n+#  define UNSUPPORTED\n+# endif\n+#else\n+# define UNSUPPORTED\n+#endif\n+\n+#define A\t0.69314718055994530942f\n+#define B\t2.7182818284590452354f\n+\n+#define X\t3.14159265358979323846f\n+#define Y\t1.41421356237309504880f\n+\n+#include \"vshuf-2.inc\"\n+#include \"vshuf-main.inc\""}, {"sha": "2670855e09204e4e98411a475847f41015b68360", "filename": "gcc/testsuite/g++.dg/torture/vshuf-v2si.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v2si.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v2si.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v2si.C?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -0,0 +1,20 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-do run }\n+#if __SIZEOF_INT__ == 4\n+typedef unsigned int V __attribute__((vector_size(8)));\n+typedef V VI;\n+#elif __SIZEOF_LONG__ == 4\n+typedef unsigned long V __attribute__((vector_size(8)));\n+typedef V VI;\n+#else\n+#define UNSUPPORTED\n+#endif\n+\n+#define A\t0x11121314\n+#define B\t0x21222324\n+\n+#define X\t0xd1d2d3d4\n+#define Y\t0xe1e2e3e4\n+\n+#include \"vshuf-2.inc\"\n+#include \"vshuf-main.inc\""}, {"sha": "e26f2c9b30d450c209b3984cc2bbe5ba56273695", "filename": "gcc/testsuite/g++.dg/torture/vshuf-v4df.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v4df.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v4df.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v4df.C?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -0,0 +1,22 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-do run }\n+\n+#if __SIZEOF_DOUBLE__ == 8 && __SIZEOF_LONG_LONG__ == 8\n+typedef double V __attribute__((vector_size(32)));\n+typedef unsigned long long VI __attribute__((vector_size(32)));\n+#else\n+#define UNSUPPORTED\n+#endif\n+\n+#define A\t0.69314718055994530942\n+#define B\t2.7182818284590452354\n+#define C\t2.30258509299404568402\n+#define D\t1.4426950408889634074\n+\n+#define W\t0.31830988618379067154\n+#define X\t3.14159265358979323846\n+#define Y\t1.41421356237309504880\n+#define Z\t0.70710678118654752440\n+\n+#include \"vshuf-4.inc\"\n+#include \"vshuf-main.inc\""}, {"sha": "42cf60cfb31ff4231829e7f4f06761dea3181b75", "filename": "gcc/testsuite/g++.dg/torture/vshuf-v4di.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v4di.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v4di.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v4di.C?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -0,0 +1,22 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-do run }\n+\n+#if __SIZEOF_LONG_LONG__ == 8\n+typedef unsigned long long V __attribute__((vector_size(32)));\n+typedef V VI;\n+#else\n+#define UNSUPPORTED\n+#endif\n+\n+#define A\t0x1112131415161718\n+#define B\t0x2122232425262728\n+#define C\t0x3132333435363738\n+#define D\t0x4142434445464748\n+\n+#define W\t0xc1c2c3c4c5c6c7c8\n+#define X\t0xd1d2d3d4d5d6d7d8\n+#define Y\t0xe1e2e3e4e5e6e7e8\n+#define Z\t0xf1f2f3f4f5f6f7f8\n+\n+#include \"vshuf-4.inc\"\n+#include \"vshuf-main.inc\""}, {"sha": "c7d58434409728fdd49e48d9606d79f7581f03db", "filename": "gcc/testsuite/g++.dg/torture/vshuf-v4sf.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v4sf.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v4sf.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v4sf.C?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-do run }\n+\n+\n+#if __SIZEOF_FLOAT__ == 4\n+typedef float V __attribute__((vector_size(16)));\n+# if __SIZEOF_INT__ == 4\n+typedef unsigned int VI __attribute__((vector_size(16)));\n+# elif __SIZEOF_LONG__ == 4\n+typedef unsigned long VI __attribute__((vector_size(16)));\n+# else\n+#  define UNSUPPORTED\n+# endif\n+#else\n+# define UNSUPPORTED\n+#endif\n+\n+#define A\t0.69314718055994530942f\n+#define B\t2.7182818284590452354f\n+#define C\t2.30258509299404568402f\n+#define D\t1.4426950408889634074f\n+\n+#define W\t0.31830988618379067154f\n+#define X\t3.14159265358979323846f\n+#define Y\t1.41421356237309504880f\n+#define Z\t0.70710678118654752440f\n+\n+#include \"vshuf-4.inc\"\n+#include \"vshuf-main.inc\""}, {"sha": "af37de78ba8d9651f240da891cf649c4b70331f3", "filename": "gcc/testsuite/g++.dg/torture/vshuf-v4si.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v4si.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v4si.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v4si.C?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-do run }\n+\n+#if __SIZEOF_INT__ == 4\n+typedef unsigned int V __attribute__((vector_size(16)));\n+typedef V VI;\n+#elif __SIZEOF_LONG__ == 4\n+typedef unsigned long V __attribute__((vector_size(16)));\n+typedef V VI;\n+#else\n+# define UNSUPPORTED\n+#endif\n+\n+#define A\t0x11121314\n+#define B\t0x21222324\n+#define C\t0x31323334\n+#define D\t0x41424344\n+\n+#define W\t0xc1c2c3c4\n+#define X\t0xd1d2d3d4\n+#define Y\t0xe1e2e3e4\n+#define Z\t0xf1f2f3f4\n+\n+#include \"vshuf-4.inc\"\n+#include \"vshuf-main.inc\""}, {"sha": "33b20c68a87b36929fd573913807ff94fee8c157", "filename": "gcc/testsuite/g++.dg/torture/vshuf-v8hi.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v8hi.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v8hi.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v8hi.C?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -0,0 +1,26 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-do run }\n+\n+typedef unsigned short V __attribute__((vector_size(16)));\n+typedef V VI;\n+\n+#define A1\t0x1112\n+#define B1\t0x2122\n+#define C1\t0x3132\n+#define D1\t0x4142\n+#define E1\t0x5152\n+#define F1\t0x6162\n+#define G1\t0x7172\n+#define H1\t0x8182\n+\n+#define A2\t0x9192\n+#define B2\t0xa1a2\n+#define C2\t0xb1b2\n+#define D2\t0xc1c2\n+#define E2\t0xd1d2\n+#define F2\t0xe1e2\n+#define G2\t0xf1f2\n+#define H2\t0x0102\n+\n+#include \"vshuf-8.inc\"\n+#include \"vshuf-main.inc\""}, {"sha": "868150963a6072fe3350385600eea57fb62746bc", "filename": "gcc/testsuite/g++.dg/torture/vshuf-v8qi.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v8qi.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v8qi.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v8qi.C?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -0,0 +1,26 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-do run }\n+\n+typedef unsigned char V __attribute__((vector_size(8)));\n+typedef V VI;\n+\n+#define A1\t0x11\n+#define B1\t0x12\n+#define C1\t0x13\n+#define D1\t0x14\n+#define E1\t0x15\n+#define F1\t0x16\n+#define G1\t0x17\n+#define H1\t0x18\n+\n+#define A2\t0xf1\n+#define B2\t0xf2\n+#define C2\t0xf3\n+#define D2\t0xf4\n+#define E2\t0xf5\n+#define F2\t0xf6\n+#define G2\t0xf7\n+#define H2\t0xf8\n+\n+#include \"vshuf-8.inc\"\n+#include \"vshuf-main.inc\""}, {"sha": "8583aa201335505a9adef0e23c9d8364f37f1b48", "filename": "gcc/testsuite/g++.dg/torture/vshuf-v8si.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v8si.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c523fc894c10ae63f3031ef918284f83257aec5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v8si.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fvshuf-v8si.C?ref=c523fc894c10ae63f3031ef918284f83257aec5c", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-do run }\n+\n+#if __SIZEOF_INT__ == 4\n+typedef unsigned int V __attribute__((vector_size(32)));\n+typedef V VI;\n+#elif __SIZEOF_LONG__ == 4\n+typedef unsigned long V __attribute__((vector_size(32)));\n+typedef V VI;\n+#else\n+# define UNSUPPORTED\n+#endif\n+\n+#define A1\t0x11121314\n+#define B1\t0x21222324\n+#define C1\t0x31323334\n+#define D1\t0x41424344\n+#define E1\t0x51525354\n+#define F1\t0x61626364\n+#define G1\t0x71727374\n+#define H1\t0x81828384\n+\n+#define A2\t0x91929394\n+#define B2\t0xa1a2a3a4\n+#define C2\t0xb1b2b3b4\n+#define D2\t0xc1c2c3c4\n+#define E2\t0xd1d2d3d4\n+#define F2\t0xe1e2e3e4\n+#define G2\t0xf1f2f3f4\n+#define H2\t0x01020304\n+\n+#include \"vshuf-8.inc\"\n+#include \"vshuf-main.inc\""}]}