{"sha": "bbbe4e7bf7238db3f5f37febee19b354dfe6a330", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJiZTRlN2JmNzIzOGRiM2Y1ZjM3ZmViZWUxOWIzNTRkZmU2YTMzMA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2006-02-08T08:13:20Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2006-02-08T08:13:20Z"}, "message": "passes.c (register_one_dump_file): Accept the current properties instead of pass number.\n\n2006-02-08  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* passes.c (register_one_dump_file): Accept the current properties\n\tinstead of pass number.  Adjust call to dump_register.  Remove\n\tduplicated code.\n\t(register_dump_files): Now a wrapper around...\n\t(register_dump_files_1): ... this one.  Do not modify the pass\n\tstructure.\n\t(next_pass_1): Cosmetic fix.\n\t(execute_todo): Keep second parameter only.  Use curr_properties instead\n\tof fetching it from the pass structure.  Check and set last_verified.\n\t(execute_one_pass): Handle TODO_set_props.  Use curr_properties\n\tinstead of fetching it from the pass structure.  Fix calls to\n\texecute_todo.  Update curr_properties and initialize .vcg RTL dump\n\tafter running the pass.  Reset last_verified.\n\t* tree-dump.c (dump_files): Renumber consecutively.  Put .cgraph dump\n\tat the beginning.\n\t(FIRST_AUTO_NUMBERED_DUMP): New.\n\t(dump_register): Remove \"num\" parameter, assign it within the\n\tfunction.\n\t(get_dump_file_name): Modify template for dumps.\n\t* tree-dump.h (dump_register): Adjust prototype.\n\t* tree-pass.h (enum tree_dump_index): Move cgraph at the beginning.\n\t(PROP_trees): Add PROP_gimple_lomp.\n\t(TODO_set_props): New.\n        * gimple-low.c (pass_lower_cf): Do not destroy PROP_gimple_lcf.\n        * tree-eh.c (pass_lower_eh): Do not destroy PROP_gimple_leh.\n        * cfgexpand.c (pass_expand): Destroy PROP_trees.\n\ngcc/testsuite:\n2006-02-08  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* lib/gcc-dg.exp (cleanup-rtl-dump, cleanup-tree-dump,\n\tcleanup-ipa-dump): Update dump file glob patterns.\n\t* lib/scantree.exp (scan-tree-dump, scan-tree-dump-times,\n\tscan-tree-dump-not, scan-tree-dump-dem): Likewise.\n\t* lib/scanipa.exp (scan-ipa-dump, scan-ipa-dump-times,\n\tscan-ipa-dump-not, scan-ipa-dump-dem): Likewise.\n\n\t* lib/scanrtl.exp: New.\n\t* lib/gcc-dg.exp: Load it.\n\t* objc.dg/stubify-2.m: Use scan-rtl-dump-not.\n\nFrom-SVN: r110742", "tree": {"sha": "b4486762445408b8e8b311f02bd5109a18afaffb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4486762445408b8e8b311f02bd5109a18afaffb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbbe4e7bf7238db3f5f37febee19b354dfe6a330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbbe4e7bf7238db3f5f37febee19b354dfe6a330", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbbe4e7bf7238db3f5f37febee19b354dfe6a330", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fbf2ca7bb768e02cb29495016550e1559bc7a09f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf2ca7bb768e02cb29495016550e1559bc7a09f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbf2ca7bb768e02cb29495016550e1559bc7a09f"}], "stats": {"total": 289, "additions": 177, "deletions": 112}, "files": [{"sha": "65180f3219c50384bf598b1278a527f5edd6fc00", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbbe4e7bf7238db3f5f37febee19b354dfe6a330", "patch": "@@ -1,3 +1,33 @@\n+2006-02-08  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* passes.c (register_one_dump_file): Accept the current properties\n+\tinstead of pass number.  Adjust call to dump_register.  Remove\n+\tduplicated code.\n+\t(register_dump_files): Now a wrapper around...\n+\t(register_dump_files_1): ... this one.  Do not modify the pass\n+\tstructure.\n+\t(next_pass_1): Cosmetic fix.\n+\t(execute_todo): Keep second parameter only.  Use curr_properties instead\n+\tof fetching it from the pass structure.  Check and set last_verified.\n+\t(execute_one_pass): Handle TODO_set_props.  Use curr_properties\n+\tinstead of fetching it from the pass structure.  Fix calls to\n+\texecute_todo.  Update curr_properties and initialize .vcg RTL dump\n+\tafter running the pass.  Reset last_verified.\n+\t* tree-dump.c (dump_files): Renumber consecutively.  Put .cgraph dump\n+\tat the beginning.\n+\t(FIRST_AUTO_NUMBERED_DUMP): New.\n+\t(dump_register): Remove \"num\" parameter, assign it within the\n+\tfunction.\n+\t(get_dump_file_name): Modify template for dumps.\n+\t* tree-dump.h (dump_register): Adjust prototype.\n+\t* tree-pass.h (enum tree_dump_index): Move cgraph at the beginning.\n+\t(PROP_trees): Add PROP_gimple_lomp.\n+\t(TODO_set_props): New.\n+\t* gimple-low.c (pass_lower_cf): Do not destroy PROP_gimple_lcf.\n+\t* tree-eh.c (pass_lower_eh): Do not destroy PROP_gimple_leh.\n+\t* cfgexpand.c (pass_expand): Destroy PROP_trees.\n+\n+\n 2006-02-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config.gcc (sparc-*-linux*): Add sparc/t-linux to tmake_file."}, {"sha": "c0bf209d9d8f321b52990b2d210e5d18495e4685", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=bbbe4e7bf7238db3f5f37febee19b354dfe6a330", "patch": "@@ -1699,7 +1699,7 @@ struct tree_opt_pass pass_expand =\n   /* ??? If TER is enabled, we actually receive GENERIC.  */\n   PROP_gimple_leh | PROP_cfg,           /* properties_required */\n   PROP_rtl,                             /* properties_provided */\n-  PROP_gimple_leh,\t\t\t/* properties_destroyed */\n+  PROP_trees,\t\t\t\t/* properties_destroyed */\n   0,                                    /* todo_flags_start */\n   TODO_dump_func,                       /* todo_flags_finish */\n   'r'\t\t\t\t\t/* letter */"}, {"sha": "69f9894a747f6356212dce7ee2dcb154d0eece60", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=bbbe4e7bf7238db3f5f37febee19b354dfe6a330", "patch": "@@ -131,7 +131,7 @@ struct tree_opt_pass pass_lower_cf =\n   0,\t\t\t\t\t/* tv_id */\n   PROP_gimple_any,\t\t\t/* properties_required */\n   PROP_gimple_lcf,\t\t\t/* properties_provided */\n-  PROP_gimple_any,\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func,\t\t\t/* todo_flags_finish */\n   0\t\t\t\t\t/* letter */"}, {"sha": "5e026957307d261a6ce7065be5562e58cc86e32c", "filename": "gcc/passes.c", "status": "modified", "additions": 85, "deletions": 74, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=bbbe4e7bf7238db3f5f37febee19b354dfe6a330", "patch": "@@ -304,10 +304,12 @@ struct tree_opt_pass *all_passes, *all_ipa_passes, *all_lowering_passes;\n    enabled or not.  */\n \n static void\n-register_one_dump_file (struct tree_opt_pass *pass, bool ipa, int n)\n+register_one_dump_file (struct tree_opt_pass *pass, bool ipa, int properties)\n {\n   char *dot_name, *flag_name, *glob_name;\n+  const char *prefix;\n   char num[10];\n+  int flags;\n \n   /* See below in next_pass_1.  */\n   num[0] = '\\0';\n@@ -317,52 +319,34 @@ register_one_dump_file (struct tree_opt_pass *pass, bool ipa, int n)\n \n   dot_name = concat (\".\", pass->name, num, NULL);\n   if (ipa)\n-    {\n-      flag_name = concat (\"ipa-\", pass->name, num, NULL);\n-      glob_name = concat (\"ipa-\", pass->name, NULL);\n-      /* First IPA dump is cgraph that is dumped via separate channels.  */\n-      pass->static_pass_number = dump_register (dot_name, flag_name, glob_name,\n-                                                TDF_IPA, n + 1, 0);\n-    }\n-  else if (pass->properties_provided & PROP_trees)\n-    {\n-      flag_name = concat (\"tree-\", pass->name, num, NULL);\n-      glob_name = concat (\"tree-\", pass->name, NULL);\n-      pass->static_pass_number = dump_register (dot_name, flag_name, glob_name,\n-                                                TDF_TREE, n + TDI_tree_all, 0);\n-    }\n+    prefix = \"ipa-\", flags = TDF_IPA;\n+  else if (properties & PROP_trees)\n+    prefix = \"tree-\", flags = TDF_TREE;\n   else\n-    {\n-      flag_name = concat (\"rtl-\", pass->name, num, NULL);\n-      glob_name = concat (\"rtl-\", pass->name, NULL);\n-      pass->static_pass_number = dump_register (dot_name, flag_name, glob_name,\n-                                                TDF_RTL, n, pass->letter);\n-    }\n+    prefix = \"rtl-\", flags = TDF_RTL;\n+\n+  flag_name = concat (prefix, pass->name, num, NULL);\n+  glob_name = concat (prefix, pass->name, NULL);\n+  pass->static_pass_number = dump_register (dot_name, flag_name, glob_name,\n+                                            flags, pass->letter);\n }\n \n+/* Recursive worker function for register_dump_files.  */\n+\n static int \n-register_dump_files (struct tree_opt_pass *pass, bool ipa, int properties)\n+register_dump_files_1 (struct tree_opt_pass *pass, bool ipa, int properties)\n {\n-  static int n = 0;\n   do\n     {\n-      int new_properties;\n-      int pass_number;\n+      int new_properties = (properties | pass->properties_provided)\n+\t\t\t   & ~pass->properties_destroyed;\n \n-      pass->properties_required = properties;\n-      new_properties =\n-        (properties | pass->properties_provided) & ~pass->properties_destroyed;\n-\n-      /* Reset the counter when we reach RTL-based passes.  */\n-      if ((new_properties ^ pass->properties_required) & PROP_rtl)\n-        n = 0;\n-\n-      pass_number = n;\n       if (pass->name)\n-        n++;\n+        register_one_dump_file (pass, ipa, new_properties);\n \n       if (pass->sub)\n-        new_properties = register_dump_files (pass->sub, false, new_properties);\n+        new_properties = register_dump_files_1 (pass->sub, false,\n+\t\t\t\t\t\tnew_properties);\n \n       /* If we have a gate, combine the properties that we could have with\n          and without the pass being examined.  */\n@@ -371,24 +355,32 @@ register_dump_files (struct tree_opt_pass *pass, bool ipa, int properties)\n       else\n         properties = new_properties;\n \n-      pass->properties_provided = properties;\n-      if (pass->name)\n-        register_one_dump_file (pass, ipa, pass_number);\n-\n       pass = pass->next;\n     }\n   while (pass);\n \n   return properties;\n }\n \n+/* Register the dump files for the pipeline starting at PASS.  IPA is\n+   true if the pass is inter-procedural, and PROPERTIES reflects the\n+   properties that are guarenteed to be available at the beginning of\n+   the pipeline.  */\n+\n+static void \n+register_dump_files (struct tree_opt_pass *pass, bool ipa, int properties)\n+{\n+  pass->properties_required |= properties;\n+  pass->todo_flags_start |= TODO_set_props;\n+  register_dump_files_1 (pass, ipa, properties);\n+}\n+\n /* Add a pass to the pass list. Duplicate the pass if it's already\n    in the list.  */\n \n static struct tree_opt_pass **\n next_pass_1 (struct tree_opt_pass **list, struct tree_opt_pass *pass)\n {\n-\n   /* A nonzero static_pass_number indicates that the\n      pass is already in the list.  */\n   if (pass->static_pass_number)\n@@ -699,23 +691,32 @@ init_optimization_passes (void)\n #undef NEXT_PASS\n \n   /* Register the passes with the tree dump code.  */\n-  register_dump_files (all_ipa_passes, true, PROP_gimple_leh | PROP_cfg);\n+  register_dump_files (all_ipa_passes, true,\n+\t\t       PROP_gimple_any | PROP_gimple_lcf | PROP_gimple_leh\n+\t\t       | PROP_cfg);\n   register_dump_files (all_lowering_passes, false, PROP_gimple_any);\n-  register_dump_files (all_passes, false, PROP_gimple_leh | PROP_cfg);\n+  register_dump_files (all_passes, false,\n+\t\t       PROP_gimple_any | PROP_gimple_lcf | PROP_gimple_leh\n+\t\t       | PROP_cfg);\n }\n \n static unsigned int last_verified;\n+static unsigned int curr_properties;\n+\n static void\n-execute_todo (struct tree_opt_pass *pass, unsigned int flags, bool use_required)\n+execute_todo (unsigned int flags)\n {\n-  int properties \n-    = use_required ? pass->properties_required : pass->properties_provided;\n-\n #if defined ENABLE_CHECKING\n   if (need_ssa_update_p ())\n     gcc_assert (flags & TODO_update_ssa_any);\n #endif\n \n+  if (curr_properties & PROP_ssa)\n+    flags |= TODO_verify_ssa;\n+  flags &= ~last_verified;\n+  if (!flags)\n+    return;\n+\n   /* Always cleanup the CFG before doing anything else.  */\n   if (flags & TODO_cleanup_cfg)\n     {\n@@ -738,6 +739,7 @@ execute_todo (struct tree_opt_pass *pass, unsigned int flags, bool use_required)\n     {\n       unsigned update_flags = flags & TODO_update_ssa_any;\n       update_ssa (update_flags);\n+      last_verified &= ~TODO_verify_ssa;\n     }\n \n   if (flags & TODO_remove_unused_locals)\n@@ -746,19 +748,19 @@ execute_todo (struct tree_opt_pass *pass, unsigned int flags, bool use_required)\n   if ((flags & TODO_dump_func)\n       && dump_file && current_function_decl)\n     {\n-      if (properties & PROP_trees)\n+      if (curr_properties & PROP_trees)\n         dump_function_to_file (current_function_decl,\n                                dump_file, dump_flags);\n       else\n \t{\n \t  if (dump_flags & TDF_SLIM)\n \t    print_rtl_slim_with_bb (dump_file, get_insns (), dump_flags);\n-\t  else if (properties & PROP_cfg)\n+\t  else if (curr_properties & PROP_cfg)\n \t    print_rtl_with_bb (dump_file, get_insns ());\n           else\n \t    print_rtl (dump_file, get_insns ());\n \n-\t  if (properties & PROP_cfg\n+\t  if (curr_properties & PROP_cfg\n \t      && graph_dump_format != no_graph\n \t      && (dump_flags & TDF_GRAPH))\n \t    print_rtl_graph_with_bb (dump_file_name, get_insns ());\n@@ -783,8 +785,7 @@ execute_todo (struct tree_opt_pass *pass, unsigned int flags, bool use_required)\n     }\n \n #if defined ENABLE_CHECKING\n-  if ((pass->properties_required & PROP_ssa)\n-      && !(pass->properties_destroyed & PROP_ssa))\n+  if (flags & TODO_verify_ssa)\n     verify_ssa (true);\n   if (flags & TODO_verify_flow)\n     verify_flow_info ();\n@@ -793,30 +794,36 @@ execute_todo (struct tree_opt_pass *pass, unsigned int flags, bool use_required)\n   if (flags & TODO_verify_loops)\n     verify_loop_closed_ssa ();\n #endif\n+\n+  last_verified = flags & TODO_verify_all;\n }\n \n static bool\n execute_one_pass (struct tree_opt_pass *pass)\n {\n-  unsigned int todo; \n+  bool initializing_dump;\n \n   /* See if we're supposed to run this pass.  */\n   if (pass->gate && !pass->gate ())\n     return false;\n \n+  if (pass->todo_flags_start & TODO_set_props)\n+    curr_properties = pass->properties_required;\n+\n   /* Note that the folders should only create gimple expressions.\n      This is a hack until the new folder is ready.  */\n-  in_gimple_form = (pass->properties_provided & PROP_trees) != 0;\n+  in_gimple_form = (curr_properties & PROP_trees) != 0;\n \n   /* Run pre-pass verification.  */\n-  todo = pass->todo_flags_start & ~last_verified;\n-  if (todo)\n-    execute_todo (pass, todo, true);\n+  execute_todo (pass->todo_flags_start);\n+\n+  gcc_assert ((curr_properties & pass->properties_required)\n+\t      == pass->properties_required);\n \n   /* If a dump file name is present, open it if enabled.  */\n   if (pass->static_pass_number != -1)\n     {\n-      bool initializing_dump = !dump_initialized_p (pass->static_pass_number);\n+      initializing_dump = !dump_initialized_p (pass->static_pass_number);\n       dump_file_name = get_dump_file_name (pass->static_pass_number);\n       dump_file = dump_begin (pass->static_pass_number, &dump_flags);\n       if (dump_file && current_function_decl)\n@@ -832,36 +839,40 @@ execute_one_pass (struct tree_opt_pass *pass)\n \t     ? \" (unlikely executed)\"\n \t     : \"\");\n \t}\n-\n-      if (initializing_dump\n-\t  && dump_file\n-\t  && graph_dump_format != no_graph\n-\t  && (pass->properties_provided & (PROP_cfg | PROP_rtl))\n-\t      == (PROP_cfg | PROP_rtl))\n-\t{\n-\t  get_dump_file_info (pass->static_pass_number)->flags |= TDF_GRAPH;\n-\t  dump_flags |= TDF_GRAPH;\n-\t  clean_graph_dump_file (dump_file_name);\n-\t}\n     }\n+  else\n+    initializing_dump = false;\n \n   /* If a timevar is present, start it.  */\n   if (pass->tv_id)\n     timevar_push (pass->tv_id);\n \n   /* Do it!  */\n   if (pass->execute)\n-    pass->execute ();\n+    {\n+      pass->execute ();\n+      last_verified = 0;\n+    }\n \n   /* Stop timevar.  */\n   if (pass->tv_id)\n     timevar_pop (pass->tv_id);\n \n+  curr_properties = (curr_properties | pass->properties_provided)\n+\t\t    & ~pass->properties_destroyed;\n+\n+  if (initializing_dump\n+      && dump_file\n+      && graph_dump_format != no_graph\n+      && (curr_properties & (PROP_cfg | PROP_rtl)) == (PROP_cfg | PROP_rtl))\n+    {\n+      get_dump_file_info (pass->static_pass_number)->flags |= TDF_GRAPH;\n+      dump_flags |= TDF_GRAPH;\n+      clean_graph_dump_file (dump_file_name);\n+    }\n+\n   /* Run post-pass cleanup and verification.  */\n-  todo = pass->todo_flags_finish;\n-  last_verified = todo & TODO_verify_all;\n-  if (todo)\n-    execute_todo (pass, todo, false);\n+  execute_todo (pass->todo_flags_finish);\n \n   /* Flush and close dump file.  */\n   if (dump_file_name)"}, {"sha": "1211596cb86f564f2d444cc3a2a32ca549d3a7d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bbbe4e7bf7238db3f5f37febee19b354dfe6a330", "patch": "@@ -1,3 +1,16 @@\n+2006-02-08  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* lib/gcc-dg.exp (cleanup-rtl-dump, cleanup-tree-dump,\n+\tcleanup-ipa-dump): Update dump file glob patterns.\n+\t* lib/scantree.exp (scan-tree-dump, scan-tree-dump-times,\n+\tscan-tree-dump-not, scan-tree-dump-dem): Likewise.\n+\t* lib/scanipa.exp (scan-ipa-dump, scan-ipa-dump-times,\n+\tscan-ipa-dump-not, scan-ipa-dump-dem): Likewise.\n+\n+\t* lib/scanrtl.exp: New.\n+\t* lib/gcc-dg.exp: Load it.\n+\t* objc.dg/stubify-2.m: Use scan-rtl-dump-not.\n+\n 2006-02-07  Janis Johnson  <janis187@us.ibm.com>\n \n \tPR testsuite/26159"}, {"sha": "2b668eb8e3ab5a2b4917d5c2e2b1c2591fd227c8", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=bbbe4e7bf7238db3f5f37febee19b354dfe6a330", "patch": "@@ -1,4 +1,5 @@\n-#   Copyright (C) 1997, 1999, 2000, 2003, 2004, 2005 Free Software Foundation, Inc.\n+#   Copyright (C) 1997, 1999, 2000, 2003, 2004, 2005, 2006\n+#   Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -19,6 +20,7 @@ load_lib file-format.exp\n load_lib target-supports.exp\n load_lib target-supports-dg.exp\n load_lib scanasm.exp\n+load_lib scanrtl.exp\n load_lib scantree.exp\n load_lib scanipa.exp\n load_lib prune.exp\n@@ -344,21 +346,21 @@ proc cleanup-repo-files { } {\n #\n # SUFFIX is the filename suffix pattern.\n proc cleanup-rtl-dump { suffix } {\n-  cleanup-dump \"\\[0-9\\]\\*.$suffix\"\n+  cleanup-dump \"\\[0-9\\]\\[0-9\\]\\[0-9\\]r.$suffix\"\n }\n \n # Remove a specific tree dump file for the current test.\n #\n # SUFFIX is the tree dump file suffix pattern.\n proc cleanup-tree-dump { suffix } {\n-  cleanup-dump \"t\\[0-9\\]\\*.$suffix\"\n+  cleanup-dump \"\\[0-9\\]\\[0-9\\]\\[0-9\\]t.$suffix\"\n }\n \n # Remove a specific ipa dump file for the current test.\n #\n # SUFFIX is the ipa dump file suffix pattern.\n proc cleanup-ipa-dump { suffix } {\n-  cleanup-dump \"i\\[0-9\\]\\*.$suffix\"\n+  cleanup-dump \"\\[0-9\\]\\[0-9\\]\\[0-9\\]i.$suffix\"\n }\n \n # Remove all dump files with the provided suffix."}, {"sha": "9ca6e2c2f94b94845859dcdc1cbadee2251df0d7", "filename": "gcc/testsuite/lib/scanipa.exp", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Ftestsuite%2Flib%2Fscanipa.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Ftestsuite%2Flib%2Fscanipa.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscanipa.exp?ref=bbbe4e7bf7238db3f5f37febee19b354dfe6a330", "patch": "@@ -36,9 +36,9 @@ proc scan-ipa-dump { args } {\n \treturn\n     }\n     if { [llength $args] >= 3 } {\n-\tscan-dump \"ipa\" [lindex $args 0] \"i\\[0-9\\]\\*.[lindex $args 1]\" [lindex $args 2]\n+\tscan-dump \"ipa\" [lindex $args 0] \"\\[0-9\\]\\[0-9\\]\\[0-9\\]i.[lindex $args 1]\" [lindex $args 2]\n     } else {\n-\tscan-dump \"ipa\" [lindex $args 0] \"i\\[0-9\\]\\*.[lindex $args 1]\"\n+\tscan-dump \"ipa\" [lindex $args 0] \"\\[0-9\\]\\[0-9\\]\\[0-9\\]i.[lindex $args 1]\"\n     }\n }\n \n@@ -59,10 +59,10 @@ proc scan-ipa-dump-times { args } {\n     }\n     if { [llength $args] >= 4 } {\n \tscan-dump-times \"ipa\" [lindex $args 0] [lindex $args 1] \\\n-\t\t\t\"i\\[0-9\\]\\*.[lindex $args 2]\" [lindex $args 3]\n+\t\t\t\"\\[0-9\\]\\[0-9\\]\\[0-9\\]i.[lindex $args 2]\" [lindex $args 3]\n     } else {\n \tscan-dump-times \"ipa\" [lindex $args 0] [lindex $args 1] \\\n-\t\t\t\"i\\[0-9\\]\\*.[lindex $args 2]\"\n+\t\t\t\"\\[0-9\\]\\[0-9\\]\\[0-9\\]i.[lindex $args 2]\"\n     }\n }\n \n@@ -83,10 +83,10 @@ proc scan-ipa-dump-not { args } {\n     }\n     if { [llength $args] >= 3 } {\n \tscan-dump-not \"ipa\" [lindex $args 0] \\\n-\t\t      \"i\\[0-9\\]\\*.[lindex $args 1]\" [lindex $args 2]\n+\t\t      \"\\[0-9\\]\\[0-9\\]\\[0-9\\]i.[lindex $args 1]\" [lindex $args 2]\n     } else {\n \tscan-dump-not \"ipa\" [lindex $args 0] \\\n-\t\t      \"i\\[0-9\\]\\*.[lindex $args 1]\"\n+\t\t      \"\\[0-9\\]\\[0-9\\]\\[0-9\\]i.[lindex $args 1]\"\n     }\n }\n \n@@ -108,10 +108,10 @@ proc scan-ipa-dump-dem { args } {\n     }\n     if { [llength $args] >= 3 } {\n \tscan-dump-dem \"ipa\" [lindex $args 0] \\\n-\t\t      \"i\\[0-9\\]\\*.[lindex $args 1]\" [lindex $args 2]\n+\t\t      \"\\[0-9\\]\\[0-9\\]\\[0-9\\]i.[lindex $args 1]\" [lindex $args 2]\n     } else {\n \tscan-dump-dem \"ipa\" [lindex $args 0] \\\n-\t\t      \"i\\[0-9\\]\\*.[lindex $args 1]\"\n+\t\t      \"\\[0-9\\]\\[0-9\\]\\[0-9\\]i.[lindex $args 1]\"\n     }\n }\n \n@@ -132,10 +132,10 @@ proc scan-ipa-dump-dem-not { args } {\n     }\n     if { [llength $args] >= 3 } {\n \tscan-dump-dem-not \"ipa\" [lindex $args 0] \\\n-\t\t\t  \"i\\[0-9\\]\\*.[lindex $args 1]\" \\\n+\t\t\t  \"\\[0-9\\]\\[0-9\\]\\[0-9\\]i.[lindex $args 1]\" \\\n \t\t\t  [lindex $args 2]\n     } else {\n \tscan-dump-dem-not \"ipa\" [lindex $args 0] \\\n-\t\t\t  \"i\\[0-9\\]\\*.[lindex $args 1]\"\n+\t\t\t  \"\\[0-9\\]\\[0-9\\]\\[0-9\\]i.[lindex $args 1]\"\n     }\n }"}, {"sha": "a77ab9f20610af11983cc9c8c5e31c499917f123", "filename": "gcc/testsuite/objc.dg/stubify-2.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-2.m?ref=bbbe4e7bf7238db3f5f37febee19b354dfe6a330", "patch": "@@ -28,4 +28,4 @@ - (void)willEndCloseSheet:(void *)sheet returnCode:(int)returnCode contextInfo:(\n \n /* Any symbol_ref of an un-stubified objc_msgSend is an error; look\n    for \"objc_msgSend\" in quotes, without the $stub suffix.  */\n-/* { dg-final { scan-file-not stubify-2.m.08.jump \"symbol_ref.*\\\"objc_msgSend\\\"\" } } */\n+/* { dg-final { scan-rtl-dump-not \"symbol_ref.*\\\"objc_msgSend\\\"\" \"jump\" } } */"}, {"sha": "49862ed24e9066f381f1b4778b17bf0e8f63a2da", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=bbbe4e7bf7238db3f5f37febee19b354dfe6a330", "patch": "@@ -721,22 +721,23 @@ dump_node (tree t, int flags, FILE *stream)\n \f\n \n /* Table of tree dump switches. This must be consistent with the\n-   TREE_DUMP_INDEX enumeration in tree.h */\n+   TREE_DUMP_INDEX enumeration in tree.h.  */\n static struct dump_file_info dump_files[TDI_end] =\n {\n   {NULL, NULL, NULL, 0, 0, 0, 0},\n-  {\".tu\", \"translation-unit\", NULL, TDF_TREE, 0, 0, 0},\n-  {\".class\", \"class-hierarchy\", NULL, TDF_TREE, 0, 1, 0},\n-  {\".original\", \"tree-original\", NULL, TDF_TREE, 0, 2, 0},\n-  {\".gimple\", \"tree-gimple\", NULL, TDF_TREE, 0, 3, 0},\n-  {\".nested\", \"tree-nested\", NULL, TDF_TREE, 0, 4, 0},\n-  {\".inlined\", \"tree-inlined\", NULL, TDF_TREE, 0, 5, 0},\n-  {\".vcg\", \"tree-vcg\", NULL, TDF_TREE, 0, 6, 0},\n+  {\".cgraph\", \"ipa-cgraph\", NULL, TDF_IPA, 0,  0, 0},\n+  {\".tu\", \"translation-unit\", NULL, TDF_TREE, 0, 1, 0},\n+  {\".class\", \"class-hierarchy\", NULL, TDF_TREE, 0, 2, 0},\n+  {\".original\", \"tree-original\", NULL, TDF_TREE, 0, 3, 0},\n+  {\".gimple\", \"tree-gimple\", NULL, TDF_TREE, 0, 4, 0},\n+  {\".nested\", \"tree-nested\", NULL, TDF_TREE, 0, 5, 0},\n+  {\".inlined\", \"tree-inlined\", NULL, TDF_TREE, 0, 6, 0},\n+  {\".vcg\", \"tree-vcg\", NULL, TDF_TREE, 0, 7, 0},\n+#define FIRST_AUTO_NUMBERED_DUMP 8\n+\n   {NULL, \"tree-all\", NULL, TDF_TREE, 0, 0, 0},\n   {NULL, \"rtl-all\", NULL, TDF_RTL, 0, 0, 0},\n   {NULL, \"ipa-all\", NULL, TDF_IPA, 0, 0, 0},\n-\n-  { \".cgraph\", \"ipa-cgraph\", NULL,\tTDF_IPA, 0,  0, 0},\n };\n \n /* Dynamically registered tree dump files and switches.  */\n@@ -772,8 +773,11 @@ static const struct dump_option_value_info dump_options[] =\n \n unsigned int\n dump_register (const char *suffix, const char *swtch, const char *glob,\n-\t       int flags, unsigned int num, int letter)\n+\t       int flags, int letter)\n {\n+  static int next_dump = FIRST_AUTO_NUMBERED_DUMP;\n+  int num = next_dump++;\n+\n   size_t this = extra_dump_files_in_use++;\n \n   if (this >= extra_dump_files_alloced)\n@@ -819,7 +823,7 @@ get_dump_file_info (enum tree_dump_index phase)\n char *\n get_dump_file_name (enum tree_dump_index phase)\n {\n-  char dump_id[7];\n+  char dump_id[10];\n   struct dump_file_info *dfi;\n \n   if (phase == TDI_none)\n@@ -833,15 +837,15 @@ get_dump_file_name (enum tree_dump_index phase)\n     dump_id[0] = '\\0';\n   else\n     {\n-      const char *template;\n+      char suffix;\n       if (dfi->flags & TDF_TREE)\n-\ttemplate = \".t%02d\";\n+\tsuffix = 't';\n       else if (dfi->flags & TDF_IPA)\n-\ttemplate = \".i%02d\";\n+\tsuffix = 'i';\n       else\n-\ttemplate = \".%02d\";\n+\tsuffix = 'r';\n \n-      if (snprintf (dump_id, sizeof (dump_id), template, dfi->num) < 0)\n+      if (snprintf (dump_id, sizeof (dump_id), \".%03d%c\", dfi->num, suffix) < 0)\n \tdump_id[0] = '\\0';\n     }\n "}, {"sha": "398faf5a43736a7f15359fff2d4db4f4b9431b4a", "filename": "gcc/tree-dump.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Ftree-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Ftree-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.h?ref=bbbe4e7bf7238db3f5f37febee19b354dfe6a330", "patch": "@@ -95,6 +95,7 @@ extern void debug_function (tree, int);\n extern int dump_flag (dump_info_p, int, tree);\n \n extern unsigned int dump_register (const char *, const char *, const char *, \n-\t\t\t\t   int, unsigned int, int);\n+\t\t\t\t   int, int);\n+\n \n #endif /* ! GCC_TREE_DUMP_H */"}, {"sha": "85379e63d8bb4318a8e95ebe63f6ecbf50fbc0e7", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=bbbe4e7bf7238db3f5f37febee19b354dfe6a330", "patch": "@@ -1700,7 +1700,7 @@ struct tree_opt_pass pass_lower_eh =\n   TV_TREE_EH,\t\t\t\t/* tv_id */\n   PROP_gimple_lcf,\t\t\t/* properties_required */\n   PROP_gimple_leh,\t\t\t/* properties_provided */\n-  PROP_gimple_lcf,\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_dump_func,\t\t\t/* todo_flags_finish */\n   0\t\t\t\t\t/* letter */"}, {"sha": "5d49b6c75695715323f46752b87b8f7ef113fdae", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbbe4e7bf7238db3f5f37febee19b354dfe6a330/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=bbbe4e7bf7238db3f5f37febee19b354dfe6a330", "patch": "@@ -30,6 +30,7 @@ Boston, MA 02110-1301, USA.  */\n enum tree_dump_index\n {\n   TDI_none,\t\t\t/* No dump */\n+  TDI_cgraph,                   /* dump function call graph.  */\n   TDI_tu,\t\t\t/* dump the whole translation unit.  */\n   TDI_class,\t\t\t/* dump class hierarchy.  */\n   TDI_original,\t\t\t/* dump each function before optimizing it */\n@@ -43,7 +44,6 @@ enum tree_dump_index\n   TDI_rtl_all,                  /* enable all the RTL dumps.  */\n   TDI_ipa_all,                  /* enable all the IPA dumps.  */\n \n-  TDI_cgraph,                   /* dump function call graph.  */\n   TDI_end\n };\n \n@@ -154,7 +154,7 @@ struct dump_file_info\n #define PROP_gimple_lomp\t(1 << 10)\t/* lowered OpenMP directives */\n \n #define PROP_trees \\\n-  (PROP_gimple_any | PROP_gimple_lcf | PROP_gimple_leh)\n+  (PROP_gimple_any | PROP_gimple_lcf | PROP_gimple_leh | PROP_gimple_lomp)\n \n /* To-do flags.  */\n #define TODO_dump_func\t\t\t(1 << 0)\n@@ -208,6 +208,10 @@ struct dump_file_info\n    the memory footprint for VAR_DECLs.  */\n #define TODO_remove_unused_locals\t(1 << 11)\n \n+/* Internally used for the first in a sequence of passes.  It is set\n+   for the passes that are handed to register_dump_files.  */\n+#define TODO_set_props\t\t\t(1 << 12)\n+\n #define TODO_update_ssa_any\t\t\\\n     (TODO_update_ssa\t\t\t\\\n      | TODO_update_ssa_no_phi\t\t\\"}]}