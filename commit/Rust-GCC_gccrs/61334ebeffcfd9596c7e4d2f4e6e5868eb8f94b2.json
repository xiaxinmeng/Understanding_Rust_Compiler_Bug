{"sha": "61334ebeffcfd9596c7e4d2f4e6e5868eb8f94b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEzMzRlYmVmZmNmZDk1OTZjN2U0ZDJmNGU2ZTU4NjhlYjhmOTRiMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-01-27T00:38:07Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-01-27T00:38:07Z"}, "message": "alpha.c (alpha_sa_mask): Mark RA for unicos here too.\n\n        * config/alpha/alpha.c (alpha_sa_mask): Mark RA for unicos here too.\n        (alpha_sa_size): Use alpha_sa_mask to compute size of saved regs.\n\nFrom-SVN: r49256", "tree": {"sha": "d01c1bf0bf61fe3ffafb91528002d0c0ac29761b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d01c1bf0bf61fe3ffafb91528002d0c0ac29761b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61334ebeffcfd9596c7e4d2f4e6e5868eb8f94b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61334ebeffcfd9596c7e4d2f4e6e5868eb8f94b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61334ebeffcfd9596c7e4d2f4e6e5868eb8f94b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61334ebeffcfd9596c7e4d2f4e6e5868eb8f94b2/comments", "author": null, "committer": null, "parents": [{"sha": "1d788fb6847e47ae3e3a3c9a0a4aef4b2f8c6947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d788fb6847e47ae3e3a3c9a0a4aef4b2f8c6947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d788fb6847e47ae3e3a3c9a0a4aef4b2f8c6947"}], "stats": {"total": 82, "additions": 36, "deletions": 46}, "files": [{"sha": "b6a374cdf9eb0445d07f995a7200b3f751c6b2bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61334ebeffcfd9596c7e4d2f4e6e5868eb8f94b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61334ebeffcfd9596c7e4d2f4e6e5868eb8f94b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61334ebeffcfd9596c7e4d2f4e6e5868eb8f94b2", "patch": "@@ -1,3 +1,8 @@\n+2002-01-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (alpha_sa_mask): Mark RA for unicos here too.\n+\t(alpha_sa_size): Use alpha_sa_mask to compute size of saved regs.\n+\n 2002-01-26  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.md: Remove bit extraction patterns that"}, {"sha": "0a1be015c3aaae48a177381fcf861ab312a558ff", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 31, "deletions": 46, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61334ebeffcfd9596c7e4d2f4e6e5868eb8f94b2/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61334ebeffcfd9596c7e4d2f4e6e5868eb8f94b2/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=61334ebeffcfd9596c7e4d2f4e6e5868eb8f94b2", "patch": "@@ -5890,14 +5890,11 @@ alpha_sa_mask (imaskP, fmaskP)\n \t    }\n \t}\n      \n-      if (!TARGET_ABI_UNICOSMK)\n-\t{\n-\t  /* If any register spilled, then spill the return address also.  */\n-\t  /* ??? This is required by the Digital stack unwind specification\n-\t     and isn't needed if we're doing Dwarf2 unwinding.  */\n-\t  if (imask || fmask || alpha_ra_ever_killed ())\n-\t    imask |= (1L << REG_RA);\n-\t}\n+      /* If any register spilled, then spill the return address also.  */\n+      /* ??? This is required by the Digital stack unwind specification\n+\t and isn't needed if we're doing Dwarf2 unwinding.  */\n+      if (imask || fmask || alpha_ra_ever_killed ())\n+\timask |= (1L << REG_RA);\n     }\n \n   *imaskP = imask;\n@@ -5907,34 +5904,23 @@ alpha_sa_mask (imaskP, fmaskP)\n int\n alpha_sa_size ()\n {\n+  unsigned long mask[2];\n   int sa_size = 0;\n-  int i;\n+  int i, j;\n \n-#ifdef ASM_OUTPUT_MI_THUNK\n-  if (current_function_is_thunk)\n-    sa_size = 0;\n+  alpha_sa_mask (&mask[0], &mask[1]);\n+\n+  if (TARGET_ABI_UNICOSMK)\n+    {\n+      if (mask[0] || mask[1])\n+\tsa_size = 14;\n+    }\n   else\n-#endif\n     {\n-      if (TARGET_ABI_UNICOSMK)\n-\t{\n-\t  for (i = 9; i < 15 && sa_size == 0; i++)\n-\t    if (! fixed_regs[i] && ! call_used_regs[i]\n-\t\t&& regs_ever_live[i])\n-\t      sa_size = 14;\n-\t  for (i = 32 + 2; i < 32 + 10 && sa_size == 0; i++)\n-\t    if (! fixed_regs[i] && ! call_used_regs[i]\n-\t\t&& regs_ever_live[i])\n-\t      sa_size = 14;\n-\t}\n-      else\n-\t{\n-\t  /* One for every register we have to save.  */\n-\t  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\t    if (! fixed_regs[i] && ! call_used_regs[i]\n-\t        && regs_ever_live[i] && i != REG_RA)\n-\t      sa_size++;\n-\t}\n+      for (j = 0; j < 2; ++j)\n+\tfor (i = 0; i < 32; ++i)\n+\t  if ((mask[j] >> i) & 1)\n+\t    sa_size++;\n     }\n \n   if (TARGET_ABI_UNICOSMK)\n@@ -5945,14 +5931,13 @@ alpha_sa_size ()\n \t use alloca and have not determined that we need a frame for other\n \t reasons.  */\n \n-      alpha_is_stack_procedure = sa_size != 0\n-\t\t\t\t|| alpha_ra_ever_killed ()\n-\t\t\t\t|| get_frame_size() != 0\n-\t\t\t\t|| current_function_outgoing_args_size\n-\t\t\t\t|| current_function_varargs\n-\t\t\t\t|| current_function_stdarg\n-\t\t\t\t|| current_function_calls_alloca\n-\t\t\t\t|| frame_pointer_needed;\n+      alpha_is_stack_procedure = (sa_size\n+\t\t\t\t  || get_frame_size() != 0\n+\t\t\t\t  || current_function_outgoing_args_size\n+\t\t\t\t  || current_function_varargs\n+\t\t\t\t  || current_function_stdarg\n+\t\t\t\t  || current_function_calls_alloca\n+\t\t\t\t  || frame_pointer_needed);\n \n       /* Always reserve space for saving callee-saved registers if we\n \t need a frame as required by the calling convention.  */\n@@ -5964,7 +5949,12 @@ alpha_sa_size ()\n       /* Start by assuming we can use a register procedure if we don't\n \t make any calls (REG_RA not used) or need to save any\n \t registers and a stack procedure if we do.  */\n-      alpha_is_stack_procedure = sa_size != 0 || alpha_ra_ever_killed ();\n+      alpha_is_stack_procedure = ((mask[0] >> REG_RA) & 1);\n+\n+      /* Don't reserve space for saving RA yet.  Do that later after we've\n+\t made the final decision on stack procedure vs register procedure.  */\n+      if (alpha_is_stack_procedure)\n+\tsa_size--;\n \n       /* Decide whether to refer to objects off our PV via FP or PV.\n \t If we need FP for something else or if we receive a nonlocal\n@@ -5998,11 +5988,6 @@ alpha_sa_size ()\n     }\n   else\n     {\n-      /* If some registers were saved but not RA, RA must also be saved,\n-\t so leave space for it.  */\n-      if (!TARGET_ABI_UNICOSMK && (sa_size != 0 || alpha_ra_ever_killed ()))\n-\tsa_size++;\n-\n       /* Our size must be even (multiple of 16 bytes).  */\n       if (sa_size & 1)\n \tsa_size++;"}]}