{"sha": "72124f487ccb5c8065dd5f7b8fba254600b7e611", "node_id": "C_kwDOANBUbNoAKDcyMTI0ZjQ4N2NjYjVjODA2NWRkNWY3YjhmYmEyNTQ2MDBiN2U2MTE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-24T09:12:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-24T09:12:25Z"}, "message": "c++: extern thread_local declarations in constexpr [PR104994]\n\nC++14 to C++20 apparently should allow extern thread_local declarations in\nconstexpr functions, however useless they are there (because accessing\nsuch vars is not valid in a constant expression, perhaps sizeof/decltype).\nP2242 changed that for C++23 to passing through declaration but\nhttps://cplusplus.github.io/CWG/issues/2552.html\nhas been filed for it yesterday.\n\nThe following patch implements the proposed wording of CWG 2552 in addition\nto fixing the C++14 - C++20 handling bug.\nIf you'd like instead to keep the current pedantic C++23 wording for now,\nthat would mean taking out the first hunk (cxx_eval_constant_expression) and\ng++.dg/cpp23/constexpr-nonlit2.C hunk.\n\n2022-03-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/104994\n\t* constexpr.cc (cxx_eval_constant_expression): Don't diagnose passing\n\tthrough extern thread_local declarations.  Change wording from\n\tdeclaration to definition.\n\t(potential_constant_expression_1): Don't diagnose extern thread_local\n\tdeclarations.  Change wording from declared to defined.\n\t* decl.cc (start_decl): Likewise.\n\n\t* g++.dg/diagnostic/constexpr1.C: Change expected diagnostic wording\n\tfrom declared to defined.\n\t* g++.dg/cpp23/constexpr-nonlit1.C: Likewise.\n\t(garply): Change dg-error into dg-bogus.\n\t* g++.dg/cpp23/constexpr-nonlit2.C: Change expected diagnostic wording\n\tfrom declaration to definition.\n\t* g++.dg/cpp23/constexpr-nonlit6.C: Change expected diagnostic wording\n\tfrom declared to defined.\n\t* g++.dg/cpp23/constexpr-nonlit7.C: New test.\n\t* g++.dg/cpp2a/constexpr-try5.C: Change expected diagnostic wording\n\tfrom declared to defined.\n\t* g++.dg/cpp2a/consteval3.C: Likewise.", "tree": {"sha": "8de82fe3cbd553d06bbcba957c4685e2a51f5a3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8de82fe3cbd553d06bbcba957c4685e2a51f5a3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72124f487ccb5c8065dd5f7b8fba254600b7e611", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72124f487ccb5c8065dd5f7b8fba254600b7e611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72124f487ccb5c8065dd5f7b8fba254600b7e611", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72124f487ccb5c8065dd5f7b8fba254600b7e611/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "497bde3ab92b2c292f78672db341bbb7cc1bcf1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/497bde3ab92b2c292f78672db341bbb7cc1bcf1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/497bde3ab92b2c292f78672db341bbb7cc1bcf1f"}], "stats": {"total": 67, "additions": 37, "deletions": 30}, "files": [{"sha": "ce4ef8edfacbe2e86e0ef3850e8f26ffecada04b", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72124f487ccb5c8065dd5f7b8fba254600b7e611/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72124f487ccb5c8065dd5f7b8fba254600b7e611/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=72124f487ccb5c8065dd5f7b8fba254600b7e611", "patch": "@@ -6723,17 +6723,18 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t  }\n \n \tif (VAR_P (r)\n-\t    && (TREE_STATIC (r) || CP_DECL_THREAD_LOCAL_P (r))\n+\t    && (TREE_STATIC (r)\n+\t\t|| (CP_DECL_THREAD_LOCAL_P (r) && !DECL_REALLY_EXTERN (r)))\n \t    /* Allow __FUNCTION__ etc.  */\n \t    && !DECL_ARTIFICIAL (r))\n \t  {\n \t    if (!ctx->quiet)\n \t      {\n \t\tif (CP_DECL_THREAD_LOCAL_P (r))\n-\t\t  error_at (loc, \"control passes through declaration of %qD \"\n+\t\t  error_at (loc, \"control passes through definition of %qD \"\n \t\t\t\t \"with thread storage duration\", r);\n \t\telse\n-\t\t  error_at (loc, \"control passes through declaration of %qD \"\n+\t\t  error_at (loc, \"control passes through definition of %qD \"\n \t\t\t\t \"with static storage duration\", r);\n \t      }\n \t    *non_constant_p = true;\n@@ -9188,17 +9189,17 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n       tmp = DECL_EXPR_DECL (t);\n       if (VAR_P (tmp) && !DECL_ARTIFICIAL (tmp))\n \t{\n-\t  if (CP_DECL_THREAD_LOCAL_P (tmp))\n+\t  if (CP_DECL_THREAD_LOCAL_P (tmp) && !DECL_REALLY_EXTERN (tmp))\n \t    {\n \t      if (flags & tf_error)\n-\t\terror_at (DECL_SOURCE_LOCATION (tmp), \"%qD declared \"\n+\t\terror_at (DECL_SOURCE_LOCATION (tmp), \"%qD defined \"\n \t\t\t  \"%<thread_local%> in %<constexpr%> context\", tmp);\n \t      return false;\n \t    }\n \t  else if (TREE_STATIC (tmp))\n \t    {\n \t      if (flags & tf_error)\n-\t\terror_at (DECL_SOURCE_LOCATION (tmp), \"%qD declared \"\n+\t\terror_at (DECL_SOURCE_LOCATION (tmp), \"%qD defined \"\n \t\t\t  \"%<static%> in %<constexpr%> context\", tmp);\n \t      return false;\n \t    }"}, {"sha": "68741bbf5d2af69be5c26d822f989362be678e32", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72124f487ccb5c8065dd5f7b8fba254600b7e611/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72124f487ccb5c8065dd5f7b8fba254600b7e611/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=72124f487ccb5c8065dd5f7b8fba254600b7e611", "patch": "@@ -5774,15 +5774,15 @@ start_decl (const cp_declarator *declarator,\n       && cxx_dialect < cxx23)\n     {\n       bool ok = false;\n-      if (CP_DECL_THREAD_LOCAL_P (decl))\n+      if (CP_DECL_THREAD_LOCAL_P (decl) && !DECL_REALLY_EXTERN (decl))\n \terror_at (DECL_SOURCE_LOCATION (decl),\n-\t\t  \"%qD declared %<thread_local%> in %qs function only \"\n+\t\t  \"%qD defined %<thread_local%> in %qs function only \"\n \t\t  \"available with %<-std=c++2b%> or %<-std=gnu++2b%>\", decl,\n \t\t  DECL_IMMEDIATE_FUNCTION_P (current_function_decl)\n \t\t  ? \"consteval\" : \"constexpr\");\n       else if (TREE_STATIC (decl))\n \terror_at (DECL_SOURCE_LOCATION (decl),\n-\t\t  \"%qD declared %<static%> in %qs function only available \"\n+\t\t  \"%qD defined %<static%> in %qs function only available \"\n \t\t  \"with %<-std=c++2b%> or %<-std=gnu++2b%>\", decl,\n \t\t  DECL_IMMEDIATE_FUNCTION_P (current_function_decl)\n \t\t  ? \"consteval\" : \"constexpr\");"}, {"sha": "c60fb8cdbd8aec78db26573c9dceb5192a1a6750", "filename": "gcc/testsuite/g++.dg/cpp23/constexpr-nonlit1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72124f487ccb5c8065dd5f7b8fba254600b7e611/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72124f487ccb5c8065dd5f7b8fba254600b7e611/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit1.C?ref=72124f487ccb5c8065dd5f7b8fba254600b7e611", "patch": "@@ -23,7 +23,7 @@ baz (int x)\n {\n   if (!x)\n     return 1;\n-  static int a;\t// { dg-error \"'a' declared 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+  static int a;\t// { dg-error \"'a' defined 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n   return ++a;\t// { dg-error \"uninitialized variable 'a' in 'constexpr' function\" \"\" { target c++17_down } .-1 }\n }\n \n@@ -32,7 +32,7 @@ qux (int x)\n {\n   if (!x)\n     return 1;\n-  thread_local int a;\t// { dg-error \"'a' declared 'thread_local' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+  thread_local int a;\t// { dg-error \"'a' defined 'thread_local' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n   return ++a;\t// { dg-error \"uninitialized variable 'a' in 'constexpr' function\" \"\" { target c++17_down } .-1 }\n }\n \n@@ -41,7 +41,7 @@ garply (int x)\n {\n   if (!x)\n     return 1;\n-  extern thread_local int a;\t// { dg-error \"'a' declared 'thread_local' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+  extern thread_local int a;\t// { dg-bogus \"'thread_local' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n   return ++a;\n }\n "}, {"sha": "b01f728291d25414dfdf68dd86104d29ac15ce68", "filename": "gcc/testsuite/g++.dg/cpp23/constexpr-nonlit2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72124f487ccb5c8065dd5f7b8fba254600b7e611/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72124f487ccb5c8065dd5f7b8fba254600b7e611/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit2.C?ref=72124f487ccb5c8065dd5f7b8fba254600b7e611", "patch": "@@ -24,7 +24,7 @@ baz (int x)\n {\n   if (!x)\n     return 1;\n-  static int a;\t\t// { dg-error \"control passes through declaration of 'a' with static storage duration\" }\n+  static int a;\t\t// { dg-error \"control passes through definition of 'a' with static storage duration\" }\n   return ++a;\n }\n \n@@ -33,7 +33,7 @@ qux (int x)\n {\n   if (!x)\n     return 1;\n-  thread_local int a;\t// { dg-error \"control passes through declaration of 'a' with thread storage duration\" }\n+  thread_local int a;\t// { dg-error \"control passes through definition of 'a' with thread storage duration\" }\n   return ++a;\n }\n "}, {"sha": "fbeb83075b05be95bac3772a4e96ca3d48f7ed37", "filename": "gcc/testsuite/g++.dg/cpp23/constexpr-nonlit6.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72124f487ccb5c8065dd5f7b8fba254600b7e611/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72124f487ccb5c8065dd5f7b8fba254600b7e611/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit6.C?ref=72124f487ccb5c8065dd5f7b8fba254600b7e611", "patch": "@@ -13,13 +13,13 @@ lab:\n constexpr int\n bar ()\n {\n-  static int a;\t\t// { dg-error \"'a' declared 'static' in 'constexpr' context\" }\n+  static int a;\t\t// { dg-error \"'a' defined 'static' in 'constexpr' context\" }\n   return ++a;\n }\n \n constexpr int\n baz (int x)\n {\n-  thread_local int a;\t// { dg-error \"'a' declared 'thread_local' in 'constexpr' context\" }\n+  thread_local int a;\t// { dg-error \"'a' defined 'thread_local' in 'constexpr' context\" }\n   return ++a;\n }"}, {"sha": "06125756f25c315b47d7b40d60d4220f7588022e", "filename": "gcc/testsuite/g++.dg/cpp23/constexpr-nonlit7.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72124f487ccb5c8065dd5f7b8fba254600b7e611/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72124f487ccb5c8065dd5f7b8fba254600b7e611/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit7.C?ref=72124f487ccb5c8065dd5f7b8fba254600b7e611", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/104994\n+// CWG2552\n+// { dg-do compile { target c++14 } }\n+\n+constexpr bool foo () { extern thread_local int t; return true; }\n+static constexpr bool a = foo ();"}, {"sha": "8346386866847b12ef49e1e3ba591cd1c860a2c6", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval3.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72124f487ccb5c8065dd5f7b8fba254600b7e611/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72124f487ccb5c8065dd5f7b8fba254600b7e611/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval3.C?ref=72124f487ccb5c8065dd5f7b8fba254600b7e611", "patch": "@@ -56,8 +56,8 @@ template consteval float f12 (float x); // { dg-error \"explicit instantiation sh\n consteval int\n f13 (int x)\n {\n-  static int a = 5;\t\t// { dg-error \"'a' declared 'static' in 'consteval' function only available with\" \"\" { target c++20_only } }\n-\t\t\t\t// { dg-error \"'a' declared 'static' in 'constexpr' context\" \"\" { target c++23 } .-1 }\n-  thread_local int b = 6;\t// { dg-error \"'b' declared 'thread_local' in 'consteval' function only available with\" \"\" { target c++20_only } }\n+  static int a = 5;\t\t// { dg-error \"'a' defined 'static' in 'consteval' function only available with\" \"\" { target c++20_only } }\n+\t\t\t\t// { dg-error \"'a' defined 'static' in 'constexpr' context\" \"\" { target c++23 } .-1 }\n+  thread_local int b = 6;\t// { dg-error \"'b' defined 'thread_local' in 'consteval' function only available with\" \"\" { target c++20_only } }\n   return x;\n }"}, {"sha": "216634dc56c3014d130f594506dfd6a5d43ec9ab", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-try5.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72124f487ccb5c8065dd5f7b8fba254600b7e611/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72124f487ccb5c8065dd5f7b8fba254600b7e611/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try5.C?ref=72124f487ccb5c8065dd5f7b8fba254600b7e611", "patch": "@@ -5,14 +5,14 @@\n constexpr int foo ()\n try {\t\t\t// { dg-warning \"function-try-block body of 'constexpr' function only available with\" \"\" { target c++17_down } }\n   int a;\t\t// { dg-error \"uninitialized variable 'a' in 'constexpr' function\" \"\" { target c++17_down } }\n-  static double b = 1.0;// { dg-error \"'b' declared 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n-\t\t\t// { dg-error \"'b' declared 'static' in 'constexpr' context\" \"\" { target c++23 } .-1 }\n+  static double b = 1.0;// { dg-error \"'b' defined 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+\t\t\t// { dg-error \"'b' defined 'static' in 'constexpr' context\" \"\" { target c++23 } .-1 }\n   goto l;\t\t// { dg-error \"'goto' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n   l:;\n   return 0;\n } catch (...) {\n   long int c;\t\t// { dg-error \"uninitialized variable 'c' in 'constexpr' function\" \"\" { target c++17_down } }\n-  static float d = 2.0f;// { dg-error \"'d' declared 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+  static float d = 2.0f;// { dg-error \"'d' defined 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n   goto l2;\t\t// { dg-error \"'goto' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n   l2:;\n   return -1;\n@@ -21,20 +21,20 @@ try {\t\t\t// { dg-warning \"function-try-block body of 'constexpr' function only av\n constexpr int bar ()\n {\n   int a;\t\t// { dg-error \"uninitialized variable 'a' in 'constexpr' function\" \"\" { target c++17_down } }\n-  static long double b = 3.0;// { dg-error \"'b' declared 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n-\t\t\t// { dg-error \"'b' declared 'static' in 'constexpr' context\" \"\" { target c++23 } .-1 }\n+  static long double b = 3.0;// { dg-error \"'b' defined 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+\t\t\t// { dg-error \"'b' defined 'static' in 'constexpr' context\" \"\" { target c++23 } .-1 }\n   goto l;\t\t// { dg-error \"'goto' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n   l:;\n   try {\t\t\t// { dg-warning \"'try' in 'constexpr' function only available with\" \"\" { target c++17_down } }\n     short c;\t\t// { dg-error \"uninitialized variable 'c' in 'constexpr' function\" \"\" { target c++17_down } }\n-    static float d;\t// { dg-error \"'d' declared 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+    static float d;\t// { dg-error \"'d' defined 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n \t\t\t// { dg-error \"uninitialized variable 'd' in 'constexpr' function\" \"\" { target c++17_down } .-1 }\n     goto l2;\t\t// { dg-error \"'goto' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n     l2:;\n     return 0;\n   } catch (int) {\n     char e;\t\t// { dg-error \"uninitialized variable 'e' in 'constexpr' function\" \"\" { target c++17_down } }\n-    static int f = 5;\t// { dg-error \"'f' declared 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+    static int f = 5;\t// { dg-error \"'f' defined 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n     goto l3;\t\t// { dg-error \"'goto' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n     l3:;\n     return 1;"}, {"sha": "c962a60c847be805670ab0c518f646c5e0b14232", "filename": "gcc/testsuite/g++.dg/diagnostic/constexpr1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72124f487ccb5c8065dd5f7b8fba254600b7e611/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fconstexpr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72124f487ccb5c8065dd5f7b8fba254600b7e611/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fconstexpr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fconstexpr1.C?ref=72124f487ccb5c8065dd5f7b8fba254600b7e611", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile { target c++11 } }\n \n-constexpr int foo() { thread_local int i __attribute__((unused)) {}; return 1; }  // { dg-error \"40:.i. declared .thread_local.\" \"\" { target c++20_down } }\n-// { dg-error \"40:.i. declared .thread_local. in .constexpr. context\" \"\" { target c++23 } .-1 }\n+constexpr int foo() { thread_local int i __attribute__((unused)) {}; return 1; }  // { dg-error \"40:.i. defined .thread_local.\" \"\" { target c++20_down } }\n+// { dg-error \"40:.i. defined .thread_local. in .constexpr. context\" \"\" { target c++23 } .-1 }\n \n-constexpr int bar() { static int i __attribute__((unused)) {}; return 1; }  // { dg-error \"34:.i. declared .static.\" \"\" { target c++20_down } }\n-// { dg-error \"34:.i. declared .static. in .constexpr. context\" \"\" { target c++23 } .-1 }\n+constexpr int bar() { static int i __attribute__((unused)) {}; return 1; }  // { dg-error \"34:.i. defined .static.\" \"\" { target c++20_down } }\n+// { dg-error \"34:.i. defined .static. in .constexpr. context\" \"\" { target c++23 } .-1 }"}]}