{"sha": "63a3341a9d1f760b1761b365f57a27523bfb548b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNhMzM0MWE5ZDFmNzYwYjE3NjFiMzY1ZjU3YTI3NTIzYmZiNTQ4Yg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-08-08T23:22:51Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-08-08T23:22:51Z"}, "message": "re PR fortran/37011 (F2003, type extension: multiple inheritence not rejected)\n\n2008-08-09  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/37011\n\t* symbol.c (gfc_add_extension): New function.\n\t* decl.c (gfc_get_type_attr_spec): Call it.\n\t(gfc_match_derived_decl): Set symbol extension attribute from\n\tattr.extension.\n\t* gfortran.h : Add prototype for gfc_add_extension.\n\nFrom-SVN: r138891", "tree": {"sha": "86bf411a254c10887ecbc94dc8b2b49fdd4b8a9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86bf411a254c10887ecbc94dc8b2b49fdd4b8a9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63a3341a9d1f760b1761b365f57a27523bfb548b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63a3341a9d1f760b1761b365f57a27523bfb548b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63a3341a9d1f760b1761b365f57a27523bfb548b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63a3341a9d1f760b1761b365f57a27523bfb548b/comments", "author": null, "committer": null, "parents": [{"sha": "e73f7547c50e91654c691a620a949085645c4e51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73f7547c50e91654c691a620a949085645c4e51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e73f7547c50e91654c691a620a949085645c4e51"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "ca2c2cde770bc424dc0e09798b0275657ef51692", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a3341a9d1f760b1761b365f57a27523bfb548b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a3341a9d1f760b1761b365f57a27523bfb548b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=63a3341a9d1f760b1761b365f57a27523bfb548b", "patch": "@@ -1,3 +1,12 @@\n+2008-08-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/37011\n+\t* symbol.c (gfc_add_extension): New function.\n+\t* decl.c (gfc_get_type_attr_spec): Call it.\n+\t(gfc_match_derived_decl): Set symbol extension attribute from\n+\tattr.extension.\n+\t* gfortran.h : Add prototype for gfc_add_extension.\n+\n 2008-08-08  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 28875"}, {"sha": "12497808a4ea9811679b954487583956139d237a", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a3341a9d1f760b1761b365f57a27523bfb548b/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a3341a9d1f760b1761b365f57a27523bfb548b/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=63a3341a9d1f760b1761b365f57a27523bfb548b", "patch": "@@ -6340,8 +6340,7 @@ gfc_get_type_attr_spec (symbol_attribute *attr, char *name)\n     }\n   else if (name && gfc_match(\" , extends ( %n )\", name) == MATCH_YES)\n     {\n-      if (gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: derived type \"\n-\t    \"extended at %C\") == FAILURE)\n+      if (gfc_add_extension (attr, &gfc_current_locus) == FAILURE)\n \treturn MATCH_ERROR;\n     }\n   else\n@@ -6385,7 +6384,9 @@ gfc_match_derived_decl (void)\n \tseen_attr = true;\n     } while (is_type_attr_spec == MATCH_YES);\n \n-  /* Deal with derived type extensions.  */\n+  /* Deal with derived type extensions.  The extension attribute has\n+     been added to 'attr' but now the parent type must be found and\n+     checked.  */\n   if (parent[0])\n     extended = check_extended_derived_type (parent);\n \n@@ -6457,7 +6458,7 @@ gfc_match_derived_decl (void)\n \n       /* Add the extended derived type as the first component.  */\n       gfc_add_component (sym, parent, &p);\n-      sym->attr.extension = 1;\n+      sym->attr.extension = attr.extension;\n       extended->refs++;\n       gfc_set_sym_referenced (extended);\n "}, {"sha": "ccd2c0305caccf2f137b5b78b8b7c158ff198a45", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a3341a9d1f760b1761b365f57a27523bfb548b/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a3341a9d1f760b1761b365f57a27523bfb548b/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=63a3341a9d1f760b1761b365f57a27523bfb548b", "patch": "@@ -2170,7 +2170,8 @@ gfc_try gfc_add_volatile (symbol_attribute *, const char *, locus *);\n gfc_try gfc_add_proc (symbol_attribute *attr, const char *name, locus *where);\n \n gfc_try gfc_add_access (symbol_attribute *, gfc_access, const char *, locus *);\n-gfc_try gfc_add_is_bind_c(symbol_attribute *, const char *, locus *, int);\n+gfc_try gfc_add_is_bind_c (symbol_attribute *, const char *, locus *, int);\n+gfc_try gfc_add_extension (symbol_attribute *, locus *);\n gfc_try gfc_add_value (symbol_attribute *, const char *, locus *);\n gfc_try gfc_add_flavor (symbol_attribute *, sym_flavor, const char *, locus *);\n gfc_try gfc_add_entry (symbol_attribute *, const char *, locus *);"}, {"sha": "6b64bcf4353c8a922c8d88ce2634216c4897aa0b", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a3341a9d1f760b1761b365f57a27523bfb548b/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a3341a9d1f760b1761b365f57a27523bfb548b/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=63a3341a9d1f760b1761b365f57a27523bfb548b", "patch": "@@ -1468,6 +1468,27 @@ gfc_add_is_bind_c (symbol_attribute *attr, const char *name, locus *where,\n }\n \n \n+/* Set the extension field for the given symbol_attribute.  */\n+\n+gfc_try\n+gfc_add_extension (symbol_attribute *attr, locus *where)\n+{\n+  if (where == NULL)\n+    where = &gfc_current_locus;\n+\n+  if (attr->extension)\n+    gfc_error_now (\"Duplicate EXTENDS attribute specified at %L\", where);\n+  else\n+    attr->extension = 1;\n+\n+  if (gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: EXTENDS at %L\", where)\n+\t== FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n gfc_try\n gfc_add_explicit_interface (gfc_symbol *sym, ifsrc source,\n \t\t\t    gfc_formal_arglist * formal, locus *where)"}]}