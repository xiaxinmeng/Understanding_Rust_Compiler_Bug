{"sha": "4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk4OWU4OGEzZjUwZDY2ZGM4MDVkOTg0ZjFjNWIyZTlhNWY2Y2YzMQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2005-12-08T08:56:24Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2005-12-08T08:56:24Z"}, "message": "re PR target/25268 (ICE on lshrdi3_31 pattern)\n\n2005-12-08  Andreas Krebbel  <krebbel1@de.ibm.com>\n            Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/25268\n\t* config/s390/s390.c (s390_decompose_shift_count): Remove BITS\n\targument.  Don't drop outer ANDs.\n\t(s390_extra_constraint_str, print_shift_count_operand): Adjust callers.\n\t* config/s390/s390-protos.h (s390_decompose_shift_count): Adjust\n\tprototype.\n\t* config/s390/predicates.md (setmem_operand): Remove.\n\t(shift_count_operand): Rename to...\n\t(shift_count_or_setmem_operand): ... this.  Adjust\n\ts390_decompose_shift_count caller.\n\t* config/s390/s390.md (<shift>di3_31_and, <shift>di3_64_and,\n\tashrdi3_cc_31_and, ashrdi3_cconly_31_and, ashrdi3_31_and,\n\tashrdi3_cc_64_and, ashrdi3_cconly_64_and, ashrdi3_64_and,\n\t<shift>si3_and, ashrsi3_cc_and, ashrsi3_cconly_and, ashrsi3_and,\n\trotl<mode>3_and, setmem_long_and): New insns.\n\t(<shift>di3_31, <shift>di3_64, ashrdi3_cc_31, ashrdi3_cconly_31,\n\tashrdi3_31, ashrdi3_cc_64, ashrdi3_cconly_64, ashrdi3_64,\n\t<shift>si3, ashrsi3_cc, ashrsi3_cconly, ashrsi3, rotl<mode>3,\n\t<shift>di3, ashrdi3): Use shift_count_or_setmem_operand instead\n\tof shift_count_operand.\n\t(setmem_long): Use shift_count_or_setmem_operand instead of\n\tsetmem_operand.\n\n2005-12-08  Andreas Krebbel  <krebbel1@de.ibm.com>\n            Jakub Jelinek  <jakub@redhat.com>\n\n        PR target/25268\n\t* gcc.c-torture/compile/20051207-1.c: New test.\n\n\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r108220", "tree": {"sha": "9a825017d201445a54a621d6af003c271f921dcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a825017d201445a54a621d6af003c271f921dcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31/comments", "author": null, "committer": null, "parents": [{"sha": "820715b8d29fcb3dd4b3a45815c96091bd3613da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/820715b8d29fcb3dd4b3a45815c96091bd3613da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/820715b8d29fcb3dd4b3a45815c96091bd3613da"}], "stats": {"total": 299, "additions": 233, "deletions": 66}, "files": [{"sha": "6113f4590f08b04b19c11795bb8c7e3844ffeed2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31", "patch": "@@ -1,3 +1,29 @@\n+2005-12-08  Andreas Krebbel  <krebbel1@de.ibm.com>\n+            Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/25268\n+\t* config/s390/s390.c (s390_decompose_shift_count): Remove BITS\n+\targument.  Don't drop outer ANDs.\n+\t(s390_extra_constraint_str, print_shift_count_operand): Adjust callers.\n+\t* config/s390/s390-protos.h (s390_decompose_shift_count): Adjust\n+\tprototype.\n+\t* config/s390/predicates.md (setmem_operand): Remove.\n+\t(shift_count_operand): Rename to...\n+\t(shift_count_or_setmem_operand): ... this.  Adjust\n+\ts390_decompose_shift_count caller.\n+\t* config/s390/s390.md (<shift>di3_31_and, <shift>di3_64_and,\n+\tashrdi3_cc_31_and, ashrdi3_cconly_31_and, ashrdi3_31_and,\n+\tashrdi3_cc_64_and, ashrdi3_cconly_64_and, ashrdi3_64_and,\n+\t<shift>si3_and, ashrsi3_cc_and, ashrsi3_cconly_and, ashrsi3_and,\n+\trotl<mode>3_and, setmem_long_and): New insns.\n+\t(<shift>di3_31, <shift>di3_64, ashrdi3_cc_31, ashrdi3_cconly_31,\n+\tashrdi3_31, ashrdi3_cc_64, ashrdi3_cconly_64, ashrdi3_64,\n+\t<shift>si3, ashrsi3_cc, ashrsi3_cconly, ashrsi3, rotl<mode>3,\n+\t<shift>di3, ashrdi3): Use shift_count_or_setmem_operand instead\n+\tof shift_count_operand.\n+\t(setmem_long): Use shift_count_or_setmem_operand instead of\n+\tsetmem_operand.\n+\n 2005-12-08  Daniel Jacobowitz  <dan@codesourcery.com>  \n \t    Andreas Tobler  <a.tobler@schweiz.ch>\n "}, {"sha": "de6e796318dc2a0ff2e40bc69425b82fa59fc100", "filename": "gcc/config/s390/predicates.md", "status": "modified", "additions": 4, "deletions": 30, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31/gcc%2Fconfig%2Fs390%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31/gcc%2Fconfig%2Fs390%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fpredicates.md?ref=4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31", "patch": "@@ -75,42 +75,16 @@\n        (and (match_test \"mode == Pmode\")\n \t    (match_test \"!legitimate_la_operand_p (op)\"))))\n \n-;; Return true if OP is a valid operand for setmem.\n+;; Return true if OP is a valid operand as shift count or setmem.\n \n-(define_predicate \"setmem_operand\"\n+(define_predicate \"shift_count_or_setmem_operand\"\n   (match_code \"reg, subreg, plus, const_int\")\n {\n   HOST_WIDE_INT offset;\n   rtx base;\n \n-  /* Extract base register and offset.  Use 8 significant bits.  */\n-  if (!s390_decompose_shift_count (op, &base, &offset, 8))\n-    return false;\n-\n-  /* Don't allow any non-base hard registers.  Doing so without\n-     confusing reload and/or regrename would be tricky, and doesn't\n-     buy us much anyway.  */\n-  if (base && REGNO (base) < FIRST_PSEUDO_REGISTER && !ADDR_REG_P (base))\n-    return false;\n-\n-  /* Unfortunately we have to reject constants that are invalid\n-     for an address, or else reload will get confused.  */\n-  if (!DISP_IN_RANGE (offset))\n-    return false;\n-\n-  return true;\n-})\n-\n-;; Return true if OP is a valid shift count operand.\n-\n-(define_predicate \"shift_count_operand\"\n-  (match_code \"reg, subreg, plus, const_int, and\")\n-{\n-  HOST_WIDE_INT offset;\n-  rtx base;\n-\n-  /* Extract base register and offset.  Use 6 significant bits.  */\n-  if (!s390_decompose_shift_count (op, &base, &offset, 6))\n+  /* Extract base register and offset.  */\n+  if (!s390_decompose_shift_count (op, &base, &offset))\n     return false;\n \n   /* Don't allow any non-base hard registers.  Doing so without"}, {"sha": "710f4e750a5a6c4868208b5981685f89b188cf51", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31", "patch": "@@ -100,7 +100,7 @@ extern rtx s390_load_got (void);\n extern rtx s390_get_thread_pointer (void);\n extern void s390_emit_tpf_eh_return (rtx);\n extern bool s390_legitimate_address_without_index_p (rtx);\n-extern bool s390_decompose_shift_count (rtx, rtx *, HOST_WIDE_INT *, int);\n+extern bool s390_decompose_shift_count (rtx, rtx *, HOST_WIDE_INT *);\n extern int s390_branch_condition_mask (rtx);\n \n #endif /* RTX_CODE */"}, {"sha": "941e6f2f517fc88615f561174819fc69d37b3582", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31", "patch": "@@ -1729,28 +1729,13 @@ s390_decompose_address (rtx addr, struct s390_address *out)\n /* Decompose a RTL expression OP for a shift count into its components,\n    and return the base register in BASE and the offset in OFFSET.\n \n-   If BITS is non-zero, the expression is used in a context where only\n-   that number to low-order bits is significant.  We then allow OP to\n-   contain and outer AND that does not affect significant bits.  If BITS\n-   is zero, we allow OP to contain any outer AND with a constant.\n-\n    Return true if OP is a valid shift count, false if not.  */\n \n bool\n-s390_decompose_shift_count (rtx op, rtx *base, HOST_WIDE_INT *offset, int bits)\n+s390_decompose_shift_count (rtx op, rtx *base, HOST_WIDE_INT *offset)\n {\n   HOST_WIDE_INT off = 0;\n \n-  /* Drop outer ANDs.  */\n-  if (GET_CODE (op) == AND && GET_CODE (XEXP (op, 1)) == CONST_INT)\n-    {\n-      HOST_WIDE_INT mask = ((HOST_WIDE_INT)1 << bits) - 1;\n-      if ((INTVAL (XEXP (op, 1)) & mask) != mask)\n-\treturn false;\n-\n-      op = XEXP (op, 0);\n-    }\n-\n   /* We can have an integer constant, an address register,\n      or a sum of the two.  */\n   if (GET_CODE (op) == CONST_INT)\n@@ -1910,7 +1895,7 @@ s390_extra_constraint_str (rtx op, int c, const char * str)\n     case 'Y':\n       /* Simply check for the basic form of a shift count.  Reload will\n \t take care of making sure we have a proper base register.  */\n-      if (!s390_decompose_shift_count (op, NULL, NULL, 0))\n+      if (!s390_decompose_shift_count (op, NULL, NULL))\n \treturn 0;\n       break;\n \n@@ -4284,7 +4269,7 @@ print_shift_count_operand (FILE *file, rtx op)\n   rtx base;\n \n   /* Extract base register and offset.  */\n-  if (!s390_decompose_shift_count (op, &base, &offset, 0))\n+  if (!s390_decompose_shift_count (op, &base, &offset))\n     gcc_unreachable ();\n \n   /* Sanity check.  */"}, {"sha": "c9ce6fd10dd1610a9beb25483aad52b98e92bf57", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 186, "deletions": 17, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31", "patch": "@@ -2222,7 +2222,7 @@\n   [(parallel\n     [(clobber (match_dup 1))\n      (set (match_operand:BLK 0 \"memory_operand\" \"\")\n-          (match_operand 2 \"setmem_operand\" \"\"))\n+          (match_operand 2 \"shift_count_or_setmem_operand\" \"\"))\n      (use (match_operand 1 \"general_operand\" \"\"))\n      (use (match_dup 3))\n      (clobber (reg:CC CC_REGNUM))])]\n@@ -2248,7 +2248,7 @@\n (define_insn \"*setmem_long\"\n   [(clobber (match_operand:<DBL> 0 \"register_operand\" \"=d\"))\n    (set (mem:BLK (subreg:P (match_operand:<DBL> 3 \"register_operand\" \"0\") 0))\n-        (match_operand 2 \"setmem_operand\" \"Y\"))\n+        (match_operand 2 \"shift_count_or_setmem_operand\" \"Y\"))\n    (use (match_dup 3))\n    (use (match_operand:<DBL> 1 \"register_operand\" \"d\"))\n    (clobber (reg:CC CC_REGNUM))]\n@@ -2257,6 +2257,18 @@\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"vs\")])\n \n+(define_insn \"*setmem_long_and\"\n+  [(clobber (match_operand:<DBL> 0 \"register_operand\" \"=d\"))\n+   (set (mem:BLK (subreg:P (match_operand:<DBL> 3 \"register_operand\" \"0\") 0))\n+        (and (match_operand 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t     (match_operand 4 \"const_int_operand\"             \"n\")))\n+   (use (match_dup 3))\n+   (use (match_operand:<DBL> 1 \"register_operand\" \"d\"))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"(INTVAL (operands[4]) & 255) == 255\"\n+  \"mvcle\\t%0,%1,%Y2\\;jo\\t.-4\"\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"vs\")])\n ;\n ; cmpmemM instruction pattern(s).\n ;\n@@ -6263,12 +6275,22 @@\n (define_insn \"rotl<mode>3\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n \t(rotate:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t\t    (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n+\t\t    (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")))]\n   \"TARGET_CPU_ZARCH\"\n   \"rll<g>\\t%0,%1,%Y2\"\n   [(set_attr \"op_type\"  \"RSE\")\n    (set_attr \"atype\"    \"reg\")])\n \n+(define_insn \"*rotl<mode>3_and\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(rotate:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n+\t\t    (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t\t    (match_operand:SI 3 \"const_int_operand\"   \"n\"))))]\n+  \"TARGET_CPU_ZARCH && (INTVAL (operands[3]) & 63) == 63\"\n+  \"rll<g>\\t%0,%1,%Y2\"\n+  [(set_attr \"op_type\"  \"RSE\")\n+   (set_attr \"atype\"    \"reg\")])\n+\n \n ;;\n ;;- Shift instructions.\n@@ -6281,14 +6303,14 @@\n (define_expand \"<shift>di3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (SHIFT:DI (match_operand:DI 1 \"register_operand\" \"\")\n-                  (match_operand:SI 2 \"shift_count_operand\" \"\")))]\n+                  (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"\")))]\n   \"\"\n   \"\")\n \n (define_insn \"*<shift>di3_31\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (SHIFT:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-                  (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n+                  (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")))]\n   \"!TARGET_64BIT\"\n   \"s<lr>dl\\t%0,%Y2\"\n   [(set_attr \"op_type\"  \"RS\")\n@@ -6297,12 +6319,32 @@\n (define_insn \"*<shift>di3_64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (SHIFT:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-                  (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n+                  (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")))]\n   \"TARGET_64BIT\"\n   \"s<lr>lg\\t%0,%1,%Y2\"\n   [(set_attr \"op_type\"  \"RSE\")\n    (set_attr \"atype\"    \"reg\")])\n \n+(define_insn \"*<shift>di3_31_and\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (SHIFT:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+                  (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t\t  (match_operand:SI 3 \"const_int_operand\"   \"n\"))))]\n+  \"!TARGET_64BIT && (INTVAL (operands[3]) & 63) == 63\"\n+  \"s<lr>dl\\t%0,%Y2\"\n+  [(set_attr \"op_type\"  \"RS\")\n+   (set_attr \"atype\"    \"reg\")])\n+\n+(define_insn \"*<shift>di3_64_and\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (SHIFT:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+                  (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t\t  (match_operand:SI 3 \"const_int_operand\"   \"n\"))))]\n+  \"TARGET_64BIT && (INTVAL (operands[3]) & 63) == 63\"\n+  \"s<lr>lg\\t%0,%1,%Y2\"\n+  [(set_attr \"op_type\"  \"RSE\")\n+   (set_attr \"atype\"    \"reg\")])\n+\n ;\n ; ashrdi3 instruction pattern(s).\n ;\n@@ -6311,15 +6353,15 @@\n   [(parallel\n     [(set (match_operand:DI 0 \"register_operand\" \"\")\n           (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n-                       (match_operand:SI 2 \"shift_count_operand\" \"\")))\n+                       (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"\")))\n      (clobber (reg:CC CC_REGNUM))])]\n   \"\"\n   \"\")\n \n (define_insn \"*ashrdi3_cc_31\"\n   [(set (reg CC_REGNUM)\n         (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-                              (match_operand:SI 2 \"shift_count_operand\" \"Y\"))\n+                              (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\"))\n                  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (ashiftrt:DI (match_dup 1) (match_dup 2)))]\n@@ -6331,7 +6373,7 @@\n (define_insn \"*ashrdi3_cconly_31\"\n   [(set (reg CC_REGNUM)\n         (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-                              (match_operand:SI 2 \"shift_count_operand\" \"Y\"))\n+                              (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\"))\n                  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=d\"))]\n   \"!TARGET_64BIT && s390_match_ccmode(insn, CCSmode)\"\n@@ -6342,7 +6384,7 @@\n (define_insn \"*ashrdi3_31\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-                     (match_operand:SI 2 \"shift_count_operand\" \"Y\")))\n+                     (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"!TARGET_64BIT\"\n   \"srda\\t%0,%Y2\"\n@@ -6352,7 +6394,7 @@\n (define_insn \"*ashrdi3_cc_64\"\n   [(set (reg CC_REGNUM)\n         (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-                              (match_operand:SI 2 \"shift_count_operand\" \"Y\"))\n+                              (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\"))\n                  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (ashiftrt:DI (match_dup 1) (match_dup 2)))]\n@@ -6364,7 +6406,7 @@\n (define_insn \"*ashrdi3_cconly_64\"\n   [(set (reg CC_REGNUM)\n         (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-                              (match_operand:SI 2 \"shift_count_operand\" \"Y\"))\n+                              (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\"))\n                  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=d\"))]\n   \"s390_match_ccmode(insn, CCSmode) && TARGET_64BIT\"\n@@ -6375,35 +6417,123 @@\n (define_insn \"*ashrdi3_64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n         (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n-                     (match_operand:SI 2 \"shift_count_operand\" \"Y\")))\n+                     (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_64BIT\"\n   \"srag\\t%0,%1,%Y2\"\n   [(set_attr \"op_type\"  \"RSE\")\n    (set_attr \"atype\"    \"reg\")])\n \n \n+; shift pattern with implicit ANDs\n+\n+(define_insn \"*ashrdi3_cc_31_and\"\n+  [(set (reg CC_REGNUM)\n+        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+                              (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t\t\t      (match_operand:SI 3 \"const_int_operand\"   \"n\")))\n+\t\t (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (ashiftrt:DI (match_dup 1) (and:SI (match_dup 2) (match_dup 3))))]\n+  \"!TARGET_64BIT && s390_match_ccmode(insn, CCSmode)\n+   && (INTVAL (operands[3]) & 63) == 63\"\n+  \"srda\\t%0,%Y2\"\n+  [(set_attr \"op_type\"  \"RS\")\n+   (set_attr \"atype\"    \"reg\")])\n+\n+(define_insn \"*ashrdi3_cconly_31_and\"\n+  [(set (reg CC_REGNUM)\n+        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+                              (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t\t\t      (match_operand:SI 3 \"const_int_operand\"   \"n\")))\n+                 (const_int 0)))\n+   (clobber (match_scratch:DI 0 \"=d\"))]\n+  \"!TARGET_64BIT && s390_match_ccmode(insn, CCSmode)\n+   && (INTVAL (operands[3]) & 63) == 63\"\n+  \"srda\\t%0,%Y2\"\n+  [(set_attr \"op_type\"  \"RS\")\n+   (set_attr \"atype\"    \"reg\")])\n+\n+(define_insn \"*ashrdi3_31_and\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+                     (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t\t     (match_operand:SI 3 \"const_int_operand\"   \"n\"))))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"!TARGET_64BIT && (INTVAL (operands[3]) & 63) == 63\"\n+  \"srda\\t%0,%Y2\"\n+  [(set_attr \"op_type\"  \"RS\")\n+   (set_attr \"atype\"    \"reg\")])\n+\n+(define_insn \"*ashrdi3_cc_64_and\"\n+  [(set (reg CC_REGNUM)\n+        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+                              (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t\t\t      (match_operand:SI 3 \"const_int_operand\"   \"n\")))\n+\t\t (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (ashiftrt:DI (match_dup 1) (and:SI (match_dup 2) (match_dup 3))))]\n+  \"TARGET_64BIT && s390_match_ccmode(insn, CCSmode)\n+   && (INTVAL (operands[3]) & 63) == 63\"\n+  \"srag\\t%0,%1,%Y2\"\n+  [(set_attr \"op_type\"  \"RSE\")\n+   (set_attr \"atype\"    \"reg\")])\n+\n+(define_insn \"*ashrdi3_cconly_64_and\"\n+  [(set (reg CC_REGNUM)\n+        (compare (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+                              (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t\t\t      (match_operand:SI 3 \"const_int_operand\"   \"n\")))\n+                 (const_int 0)))\n+   (clobber (match_scratch:DI 0 \"=d\"))]\n+  \"TARGET_64BIT && s390_match_ccmode(insn, CCSmode)\n+   && (INTVAL (operands[3]) & 63) == 63\"\n+  \"srag\\t%0,%1,%Y2\"\n+  [(set_attr \"op_type\"  \"RSE\")\n+   (set_attr \"atype\"    \"reg\")])\n+\n+(define_insn \"*ashrdi3_64_and\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+        (ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"d\")\n+                     (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t\t     (match_operand:SI 3 \"const_int_operand\"   \"n\"))))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_64BIT && (INTVAL (operands[3]) & 63) == 63\"\n+  \"srag\\t%0,%1,%Y2\"\n+  [(set_attr \"op_type\"  \"RSE\")\n+   (set_attr \"atype\"    \"reg\")])\n+\n ;\n ; (ashl|lshr)si3 instruction pattern(s).\n ;\n \n (define_insn \"<shift>si3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (SHIFT:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-                  (match_operand:SI 2 \"shift_count_operand\" \"Y\")))]\n+                  (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")))]\n   \"\"\n   \"s<lr>l\\t%0,%Y2\"\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")])\n \n+(define_insn \"*<shift>si3_and\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (SHIFT:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+                  (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t\t  (match_operand:SI 3 \"const_int_operand\"   \"n\"))))]\n+  \"(INTVAL (operands[3]) & 63) == 63\"\n+  \"s<lr>l\\t%0,%Y2\"\n+  [(set_attr \"op_type\"  \"RS\")\n+   (set_attr \"atype\"    \"reg\")])\n+\n ;\n ; ashrsi3 instruction pattern(s).\n ;\n \n (define_insn \"*ashrsi3_cc\"\n   [(set (reg CC_REGNUM)\n         (compare (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-                              (match_operand:SI 2 \"shift_count_operand\" \"Y\"))\n+                              (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\"))\n                  (const_int 0)))\n    (set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (ashiftrt:SI (match_dup 1) (match_dup 2)))]\n@@ -6416,7 +6546,7 @@\n (define_insn \"*ashrsi3_cconly\"\n   [(set (reg CC_REGNUM)\n         (compare (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-                              (match_operand:SI 2 \"shift_count_operand\" \"Y\"))\n+                              (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\"))\n                  (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=d\"))]\n   \"s390_match_ccmode(insn, CCSmode)\"\n@@ -6427,13 +6557,52 @@\n (define_insn \"ashrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n         (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-                     (match_operand:SI 2 \"shift_count_operand\" \"Y\")))\n+                     (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"\"\n   \"sra\\t%0,%Y2\"\n   [(set_attr \"op_type\"  \"RS\")\n    (set_attr \"atype\"    \"reg\")])\n \n+; with implicit ANDs\n+\n+(define_insn \"*ashrsi3_cc_and\"\n+  [(set (reg CC_REGNUM)\n+        (compare (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+                              (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t\t\t      (match_operand:SI 3 \"const_int_operand\"   \"n\")))\n+                 (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (ashiftrt:SI (match_dup 1) (and:SI (match_dup 2) (match_dup 3))))]\n+  \"s390_match_ccmode(insn, CCSmode) && (INTVAL (operands[3]) & 63) == 63\"\n+  \"sra\\t%0,%Y2\"\n+  [(set_attr \"op_type\"  \"RS\")\n+   (set_attr \"atype\"    \"reg\")])\n+\n+\n+(define_insn \"*ashrsi3_cconly_and\"\n+  [(set (reg CC_REGNUM)\n+        (compare (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+                              (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t\t\t      (match_operand:SI 3 \"const_int_operand\"   \"n\")))\n+                 (const_int 0)))\n+   (clobber (match_scratch:SI 0 \"=d\"))]\n+  \"s390_match_ccmode(insn, CCSmode) && (INTVAL (operands[3]) & 63) == 63\"\n+  \"sra\\t%0,%Y2\"\n+  [(set_attr \"op_type\"  \"RS\")\n+   (set_attr \"atype\"    \"reg\")])\n+\n+(define_insn \"*ashrsi3_and\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+        (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+                     (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n+\t\t\t     (match_operand:SI 3 \"const_int_operand\"   \"n\"))))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"(INTVAL (operands[3]) & 63) == 63\"\n+  \"sra\\t%0,%Y2\"\n+  [(set_attr \"op_type\"  \"RS\")\n+   (set_attr \"atype\"    \"reg\")])\n+\n \n ;;\n ;; Branch instruction patterns."}, {"sha": "dfe9d4ded8946902d09844ec47ed2212dd4cff4e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31", "patch": "@@ -1,3 +1,9 @@\n+2005-12-08  Andreas Krebbel  <krebbel1@de.ibm.com>\n+            Jakub Jelinek  <jakub@redhat.com>\n+\n+        PR target/25268\n+\t* gcc.c-torture/compile/20051207-1.c: New test.\n+\n 2005-12-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* g++.dg/other/i386-1.C, gcc.c-torture/execute/990413-2.x,"}, {"sha": "9baa63b94b30a4a58e22fcea274ce91a7a63e0f3", "filename": "gcc/testsuite/gcc.c-torture/compile/20051207-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20051207-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20051207-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20051207-1.c?ref=4989e88a3f50d66dc805d984f1c5b2e9a5f6cf31", "patch": "@@ -0,0 +1,7 @@\n+/* PR target/25268 */\n+\n+long long\n+foo (long long x, int y)\n+{\n+  return x << ((y + 1) & 63);\n+}"}]}