{"sha": "104f8784d2e90e6f6da405a8071a59ede65b411a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA0Zjg3ODRkMmU5MGU2ZjZkYTQwNWE4MDcxYTU5ZWRlNjViNDExYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2005-07-24T21:38:02Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2005-07-24T21:38:02Z"}, "message": "c-common.c (check_missing_format_attribute): New.\n\n\t* c-common.c (check_missing_format_attribute): New.\n\t* c-common.h (check_missing_format_attribute): Likewise.\n\t* c-typeck.c (convert_for_assignment): Use it.\n\ncp:\n\t* call.c (convert_for_arg_passing): Check function pointers when\n\t-Wmissing-format-attribute is activated.\n\t* typeck.c (convert_for_assignment): Likewise.\n\ntestsuite:\n\t* g++.dg/warn/miss-format-1.C, g++.dg/warn/miss-format-2.C,\n\tg++.dg/warn/miss-format-3.C, g++.dg/warn/miss-format-4.C,\n\tg++.dg/warn/miss-format-5.C, g++.dg/warn/miss-format-6.C: New.\n\nFrom-SVN: r102338", "tree": {"sha": "082c7830d8aa5ffdf45a79a0fea424679a91db14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/082c7830d8aa5ffdf45a79a0fea424679a91db14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/104f8784d2e90e6f6da405a8071a59ede65b411a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/104f8784d2e90e6f6da405a8071a59ede65b411a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/104f8784d2e90e6f6da405a8071a59ede65b411a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/104f8784d2e90e6f6da405a8071a59ede65b411a/comments", "author": null, "committer": null, "parents": [{"sha": "1b8452d093bd8c1642cda1c3369b9f3d7009fe6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b8452d093bd8c1642cda1c3369b9f3d7009fe6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b8452d093bd8c1642cda1c3369b9f3d7009fe6f"}], "stats": {"total": 334, "additions": 290, "deletions": 44}, "files": [{"sha": "42c8c2e32cd0d5866137a9f809f42e764d5dd3ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=104f8784d2e90e6f6da405a8071a59ede65b411a", "patch": "@@ -1,3 +1,9 @@\n+2005-07-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-common.c (check_missing_format_attribute): New.\n+\t* c-common.h (check_missing_format_attribute): Likewise.\n+\t* c-typeck.c (convert_for_assignment): Use it.\n+\n 2005-07-24  Andreas Schwab  <schwab@suse.de>\n \n \t* config/m68k/m68k.md (\"extendqidi2\"): When source is an address"}, {"sha": "10350f3751d1cc207f10c38f6adc642163d16cd8", "filename": "gcc/c-common.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=104f8784d2e90e6f6da405a8071a59ede65b411a", "patch": "@@ -6208,4 +6208,30 @@ same_scalar_type_ignoring_signedness (tree t1, tree t2)\n     == lang_hooks.types.signed_type (t2);\n }\n \n+/* Check for missing format attributes on function pointers.  LTYPE is\n+   the new type or left-hand side type.  RTYPE is the old type or\n+   right-hand side type.  Returns TRUE if LTYPE is missing the desired\n+   attribute.  */\n+\n+bool\n+check_missing_format_attribute (tree ltype, tree rtype)\n+{\n+  tree const ttr = TREE_TYPE (rtype), ttl = TREE_TYPE (ltype);\n+  tree ra;\n+\n+  for (ra = TYPE_ATTRIBUTES (ttr); ra; ra = TREE_CHAIN (ra))\n+    if (is_attribute_p (\"format\", TREE_PURPOSE (ra)))\n+      break;\n+  if (ra)\n+    {\n+      tree la;\n+      for (la = TYPE_ATTRIBUTES (ttl); la; la = TREE_CHAIN (la))\n+\tif (is_attribute_p (\"format\", TREE_PURPOSE (la)))\n+\t  break;\n+      return !la;\n+    }\n+  else\n+    return false;\n+}\n+\n #include \"gt-c-common.h\""}, {"sha": "4e8485a061af38fa25d4d84a88777cddb7c6b0eb", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=104f8784d2e90e6f6da405a8071a59ede65b411a", "patch": "@@ -925,6 +925,7 @@ extern void init_pp_output (FILE *);\n extern void preprocess_file (cpp_reader *);\n extern void pp_file_change (const struct line_map *);\n extern void pp_dir_change (cpp_reader *, const char *);\n+extern bool check_missing_format_attribute (tree, tree);\n \n /* In order for the format checking to accept the C frontend\n    diagnostic framework extensions, you must include this file before"}, {"sha": "7e98384ce280d3c7ee18d620717f812a3feaf404", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 29, "deletions": 44, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=104f8784d2e90e6f6da405a8071a59ede65b411a", "patch": "@@ -3802,51 +3802,36 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n \n       /* Check if the right-hand side has a format attribute but the\n \t left-hand side doesn't.  */\n-      if (warn_missing_format_attribute)\n+      if (warn_missing_format_attribute\n+\t  && check_missing_format_attribute (type, rhstype))\n         {\n-\t  tree rattrs = TYPE_ATTRIBUTES (ttr), ra;\n-\t  for (ra = rattrs; ra; ra = TREE_CHAIN (ra))\n-\t    {\n-\t      if (is_attribute_p (\"format\", TREE_PURPOSE (ra)))\n-\t\tbreak;\n-\t    }\n-\t  if (ra)\n-\t    {\n-\t      tree lattrs = TYPE_ATTRIBUTES (ttl), la;\n-\t      for (la = lattrs; la; la = TREE_CHAIN (la))\n-\t      {\n-\t\tif (is_attribute_p (\"format\", TREE_PURPOSE (la)))\n-\t\t  break;\n-\t      }\n-\t      if (!la)\n-\t\tswitch (errtype)\n-\t\t  {\n-\t\t  case ic_argpass:\n-\t\t  case ic_argpass_nonproto:\n-\t\t    warning (OPT_Wmissing_format_attribute,\n-\t\t\t     \"argument %d of %qE might be \"\n-\t\t\t     \"a candidate for a format attribute\",\n-\t\t\t     parmnum, rname);\n-\t\t    break;\n-\t\t  case ic_assign:\n-\t\t    warning (OPT_Wmissing_format_attribute,\n-\t\t\t     \"assignment left-hand side might be \"\n-\t\t\t     \"a candidate for a format attribute\");\n-\t\t    break;\n-\t\t  case ic_init:\n-\t\t    warning (OPT_Wmissing_format_attribute,\n-\t\t\t     \"initialization left-hand side might be \"\n-\t\t\t     \"a candidate for a format attribute\");\n-\t\t    break;\n-\t\t  case ic_return:\n-\t\t    warning (OPT_Wmissing_format_attribute,\n-\t\t\t     \"return type might be \"\n-\t\t\t     \"a candidate for a format attribute\");\n-\t\t    break;\n-\t\t  default:\n-\t\t    gcc_unreachable ();\n-\t\t  }\n-\t    }\n+\t  switch (errtype)\n+\t  {\n+\t  case ic_argpass:\n+\t  case ic_argpass_nonproto:\n+\t    warning (OPT_Wmissing_format_attribute,\n+\t\t     \"argument %d of %qE might be \"\n+\t\t     \"a candidate for a format attribute\",\n+\t\t     parmnum, rname);\n+\t    break;\n+\t  case ic_assign:\n+\t    warning (OPT_Wmissing_format_attribute,\n+\t\t     \"assignment left-hand side might be \"\n+\t\t     \"a candidate for a format attribute\");\n+\t    break;\n+\t  case ic_init:\n+\t    warning (OPT_Wmissing_format_attribute,\n+\t\t     \"initialization left-hand side might be \"\n+\t\t     \"a candidate for a format attribute\");\n+\t    break;\n+\t  case ic_return:\n+\t    warning (OPT_Wmissing_format_attribute,\n+\t\t     \"return type might be \"\n+\t\t     \"a candidate for a format attribute\");\n+\t    break;\n+\t  default:\n+\t    gcc_unreachable ();\n+\t  }\n \t}\n       \n       /* Any non-function converts to a [const][volatile] void *"}, {"sha": "003fbab4ee3f71cdcfc3b8d0fa9ded2008c2f7cc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=104f8784d2e90e6f6da405a8071a59ede65b411a", "patch": "@@ -1,3 +1,9 @@\n+2005-07-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* call.c (convert_for_arg_passing): Check function pointers when\n+\t-Wmissing-format-attribute is activated.\n+\t* typeck.c (convert_for_assignment): Likewise.\n+\n 2005-07-22  Manfred Hollstein  <mh@suse.com>\n \n \t* parser.c (cp_parser_declaration): Fix unitialised warnings."}, {"sha": "609fe45a382be0c02317d3f597f9ad610cabd127", "filename": "gcc/cp/call.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=104f8784d2e90e6f6da405a8071a59ede65b411a", "patch": "@@ -4601,6 +4601,17 @@ convert_for_arg_passing (tree type, tree val)\n \t   && INT_CST_LT_UNSIGNED (TYPE_SIZE (type),\n \t\t\t\t   TYPE_SIZE (integer_type_node)))\n     val = perform_integral_promotions (val);\n+  if (warn_missing_format_attribute)\n+    {\n+      tree rhstype = TREE_TYPE (val);\n+      const enum tree_code coder = TREE_CODE (rhstype);\n+      const enum tree_code codel = TREE_CODE (type);\n+      if ((codel == POINTER_TYPE || codel == REFERENCE_TYPE)\n+\t  && coder == codel\n+\t  && check_missing_format_attribute (type, rhstype))\n+\twarning (OPT_Wmissing_format_attribute,\n+\t\t \"argument of function call might be a candidate for a format attribute\");\n+    }\n   return val;\n }\n "}, {"sha": "62f52973ebae5cda394853ec28c8e8da2d20bfdf", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=104f8784d2e90e6f6da405a8071a59ede65b411a", "patch": "@@ -5948,6 +5948,17 @@ convert_for_assignment (tree type, tree rhs,\n \t  return error_mark_node;\n \t}\n     }\n+  if (warn_missing_format_attribute)\n+    {\n+      const enum tree_code codel = TREE_CODE (type);\n+      if ((codel == POINTER_TYPE || codel == REFERENCE_TYPE)\n+\t  && coder == codel\n+\t  && check_missing_format_attribute (type, rhstype))\n+\twarning (OPT_Wmissing_format_attribute,\n+\t\t \"%s might be a candidate for a format attribute\",\n+\t\t errtype);\n+    }\n+  \n   return perform_implicit_conversion (strip_top_quals (type), rhs);\n }\n "}, {"sha": "19d3975053054b5544f5663593944d1f569f433a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=104f8784d2e90e6f6da405a8071a59ede65b411a", "patch": "@@ -1,3 +1,9 @@\n+2005-07-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* g++.dg/warn/miss-format-1.C, g++.dg/warn/miss-format-2.C,\n+\tg++.dg/warn/miss-format-3.C, g++.dg/warn/miss-format-4.C,\n+\tg++.dg/warn/miss-format-5.C, g++.dg/warn/miss-format-6.C: New.\n+\n 2005-07-23  Jerry DeLisle  <jvdelisle@verizon.net>\n \n         * gfortran.fortran-torture/execute/nan_inf_fmt.f90: Revise test to"}, {"sha": "f69e18fb0a66104b4704dead80a0d9cf795b3649", "filename": "gcc/testsuite/g++.dg/warn/miss-format-1.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-1.C?ref=104f8784d2e90e6f6da405a8071a59ede65b411a", "patch": "@@ -0,0 +1,40 @@\n+/* Test for warnings for missing format attributes.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wmissing-format-attribute\" } */\n+\n+#include <stdio.h>\n+#include <stdarg.h>\n+\n+void\n+foo (const char *fmt, ...)\n+{\n+  va_list ap;\n+  va_start (ap, fmt);\n+  vprintf (fmt, ap); /* { dg-warning \"candidate\" \"printf attribute warning\" } */\n+  va_end (ap);\n+}\n+\n+void\n+bar (const char *fmt, ...)\n+{\n+  va_list ap;\n+  va_start (ap, fmt);\n+  vscanf (fmt, ap); /* { dg-warning \"candidate\" \"scanf attribute warning\" } */\n+  va_end (ap);\n+}\n+\n+__attribute__((__format__(__printf__, 1, 2))) void\n+foo2 (const char *fmt, ...)\n+{\n+  va_list ap;\n+  va_start (ap, fmt);\n+  vprintf (fmt, ap);\n+  va_end (ap);\n+}\n+\n+void\n+vfoo (const char *fmt, va_list arg)\n+{\n+  vprintf (fmt, arg); /* { dg-warning \"candidate\" \"printf attribute warning 2\" } */\n+}"}, {"sha": "bd7f11ba8e2b9fce2999caaad1d9b638f1a3c304", "filename": "gcc/testsuite/g++.dg/warn/miss-format-2.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-2.C?ref=104f8784d2e90e6f6da405a8071a59ede65b411a", "patch": "@@ -0,0 +1,17 @@\n+/* Test for warnings for missing format attributes.  Don't warn if no\n+   relevant parameters for a format attribute; see c/1017.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wmissing-format-attribute\" } */\n+\n+#include <stdio.h>\n+#include <stdarg.h>\n+\n+void\n+foo (int i, ...)\n+{\n+  va_list ap;\n+  va_start (ap, i);\n+  vprintf (\"Foo %s bar %s\", ap); /* { dg-bogus \"candidate\" \"bogus printf attribute warning\" } */\n+  va_end (ap);\n+}"}, {"sha": "0f61400b1b74c0a21e5350d52536385f1e294f12", "filename": "gcc/testsuite/g++.dg/warn/miss-format-3.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-3.C?ref=104f8784d2e90e6f6da405a8071a59ede65b411a", "patch": "@@ -0,0 +1,26 @@\n+/* Test warnings for missing format attributes on function pointers.  */\n+/* Origin: Kaveh Ghazi <ghazi@caip.rutgers.edu> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wmissing-format-attribute\" } */\n+\n+#include <stdarg.h>\n+\n+typedef void (*noattr_t) (const char *, ...);\n+typedef noattr_t __attribute__ ((__format__(__printf__, 1, 2))) attr_t;\n+\n+typedef void (*vnoattr_t) (const char *, va_list);\n+typedef vnoattr_t __attribute__ ((__format__(__printf__, 1, 0))) vattr_t;\n+\n+void\n+foo1 (noattr_t na, attr_t a, vnoattr_t vna, vattr_t va)\n+{\n+  noattr_t na1 = na;\n+  noattr_t na2 = a; /* { dg-warning \"candidate\" \"initialization warning\" } */\n+  attr_t a1 = na;\n+  attr_t a2 = a;\n+  \n+  vnoattr_t vna1 = vna;\n+  vnoattr_t vna2 = va; /* { dg-warning \"candidate\" \"initialization warning\" } */\n+  vattr_t va1 = vna;\n+  vattr_t va2 = va;\n+}"}, {"sha": "1a89abd5a39cd0d9a319381411890805dd94242c", "filename": "gcc/testsuite/g++.dg/warn/miss-format-4.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-4.C?ref=104f8784d2e90e6f6da405a8071a59ede65b411a", "patch": "@@ -0,0 +1,32 @@\n+/* Test warnings for missing format attributes on function pointers.  */\n+/* Origin: Kaveh Ghazi <ghazi@caip.rutgers.edu> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wmissing-format-attribute\" } */\n+\n+#include <stdarg.h>\n+\n+typedef void (*noattr_t) (const char *, ...);\n+typedef noattr_t __attribute__ ((__format__(__printf__, 1, 2))) attr_t;\n+\n+typedef void (*vnoattr_t) (const char *, va_list);\n+typedef vnoattr_t __attribute__ ((__format__(__printf__, 1, 0))) vattr_t;\n+\n+void\n+foo1 (noattr_t na, attr_t a, vnoattr_t vna, vattr_t va)\n+{\n+  noattr_t na1, na2;\n+  attr_t a1, a2;\n+  \n+  vnoattr_t vna1, vna2;\n+  vattr_t va1, va2;\n+\n+  na1 = na;\n+  na2 = a; /* { dg-warning \"candidate\" \"assignment warning\" } */\n+  a1 = na;\n+  a2 = a;\n+  \n+  vna1 = vna;\n+  vna2 = va; /* { dg-warning \"candidate\" \"assignment warning\" } */\n+  va1 = vna;\n+  va1 = va;\n+}"}, {"sha": "452e812aeb696ea85e38ca16a2d73a37e6137670", "filename": "gcc/testsuite/g++.dg/warn/miss-format-5.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-5.C?ref=104f8784d2e90e6f6da405a8071a59ede65b411a", "patch": "@@ -0,0 +1,48 @@\n+/* Test warnings for missing format attributes on function pointers.  */\n+/* Origin: Kaveh Ghazi <ghazi@caip.rutgers.edu> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wmissing-format-attribute\" } */\n+\n+#include <stdarg.h>\n+\n+typedef void (*noattr_t) (const char *, ...);\n+typedef noattr_t __attribute__ ((__format__(__printf__, 1, 2))) attr_t;\n+\n+typedef void (*vnoattr_t) (const char *, va_list);\n+typedef vnoattr_t __attribute__ ((__format__(__printf__, 1, 0))) vattr_t;\n+\n+noattr_t\n+foo1 (noattr_t na, attr_t a, int i)\n+{\n+  if (i)\n+    return na;\n+  else\n+    return a; /* { dg-warning \"candidate\" \"return type warning\" } */\n+}\n+\n+attr_t\n+foo2 (noattr_t na, attr_t a, int i)\n+{\n+  if (i)\n+    return na;\n+  else\n+    return a;\n+}\n+\n+vnoattr_t\n+foo3 (vnoattr_t vna, vattr_t va, int i)\n+{\n+  if (i)\n+    return vna;\n+  else\n+    return va; /* { dg-warning \"candidate\" \"return type warning\" } */\n+}\n+\n+vattr_t\n+foo4 (vnoattr_t vna, vattr_t va, int i)\n+{\n+  if (i)\n+    return vna;\n+  else\n+    return va;\n+}"}, {"sha": "f38e4ca128e1b9ea78d7eb92a4c4fbbec90e989d", "filename": "gcc/testsuite/g++.dg/warn/miss-format-6.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/104f8784d2e90e6f6da405a8071a59ede65b411a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-6.C?ref=104f8784d2e90e6f6da405a8071a59ede65b411a", "patch": "@@ -0,0 +1,31 @@\n+/* Test warnings for missing format attributes on function pointers.  */\n+/* Origin: Kaveh Ghazi <ghazi@caip.rutgers.edu> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wmissing-format-attribute\" } */\n+\n+#include <stdarg.h>\n+\n+typedef void (*noattr_t) (const char *, ...);\n+typedef noattr_t __attribute__ ((__format__(__printf__, 1, 2))) attr_t;\n+\n+typedef void (*vnoattr_t) (const char *, va_list);\n+typedef vnoattr_t __attribute__ ((__format__(__printf__, 1, 0))) vattr_t;\n+\n+extern void foo1 (noattr_t);\n+extern void foo2 (attr_t);\n+extern void foo3 (vnoattr_t);\n+extern void foo4 (vattr_t);\n+\n+void\n+foo (noattr_t na, attr_t a, vnoattr_t vna, vattr_t va)\n+{\n+  foo1 (na);\n+  foo1 (a); /* { dg-warning \"candidate\" \"parameter passing warning\" } */\n+  foo2 (na);\n+  foo2 (a);\n+  \n+  foo3 (vna);\n+  foo3 (va); /* { dg-warning \"candidate\" \"parameter passing warning\" } */\n+  foo4 (vna);\n+  foo4 (va);\n+}"}]}