{"sha": "965514bd92689acdf4d64d47c9905099a1c7b829", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY1NTE0YmQ5MjY4OWFjZGY0ZDY0ZDQ3Yzk5MDUwOTlhMWM3YjgyOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-01-16T18:53:51Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-01-16T18:53:51Z"}, "message": "re PR target/13608 (Incorrect code with -O3 -ffast-math)\n\n\n\t* i386.md (load_tp_di): Fix pasto.\n\n\tPR opt/13608\n\t* i386.c (ix86_compute_frame_layout): Fix for alloca on leaf function.\n\n\t* c-pretty-print.c (pp_c_type_cast, pp_c_abstract_declarator,\n\tpp_c_character_constant, pp_c_floating_constant,\n\tpp_c_additive_expression, pp_c_shift_expression,\n\tpp_c_equality_expression, pp_c_and_expression,\n\tpp_c_exclusive_or_expression, pp_c_inclusive_or_expression,\n\tpp_c_logical_and_expression): Remove inline modifier.\n\t* dwarf2out.c (get_AT): Likewise.\n\t* et-forest.c (et_splay): Likewise.\n\t* ra.h (ra_alloc, ra_calloc): Likewise\n\n\t* mangle.c (write_mangled_name): Remove inline modifier.\n\nFrom-SVN: r75988", "tree": {"sha": "1d4f7d52236263c5808407e61f046c99351cdf1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d4f7d52236263c5808407e61f046c99351cdf1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/965514bd92689acdf4d64d47c9905099a1c7b829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/965514bd92689acdf4d64d47c9905099a1c7b829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/965514bd92689acdf4d64d47c9905099a1c7b829", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/965514bd92689acdf4d64d47c9905099a1c7b829/comments", "author": null, "committer": null, "parents": [{"sha": "71bbcf4d56ce5fb369d879702932b88447053be9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71bbcf4d56ce5fb369d879702932b88447053be9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71bbcf4d56ce5fb369d879702932b88447053be9"}], "stats": {"total": 67, "additions": 46, "deletions": 21}, "files": [{"sha": "522fb913f5ab2c49c504503e8db7b6b4e3143e92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965514bd92689acdf4d64d47c9905099a1c7b829/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965514bd92689acdf4d64d47c9905099a1c7b829/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=965514bd92689acdf4d64d47c9905099a1c7b829", "patch": "@@ -1,3 +1,20 @@\n+2004-01-16  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (load_tp_di): Fix pasto.\n+\n+\tPR opt/13608\n+\t* i386.c (ix86_compute_frame_layout): Fix for alloca on leaf function.\n+\n+\t* c-pretty-print.c (pp_c_type_cast, pp_c_abstract_declarator,\n+\tpp_c_character_constant, pp_c_floating_constant,\n+\tpp_c_additive_expression, pp_c_shift_expression,\n+\tpp_c_equality_expression, pp_c_and_expression,\n+\tpp_c_exclusive_or_expression, pp_c_inclusive_or_expression,\n+\tpp_c_logical_and_expression): Remove inline modifier.\n+\t* dwarf2out.c (get_AT): Likewise.\n+\t* et-forest.c (et_splay): Likewise.\n+\t* ra.h (ra_alloc, ra_calloc): Likewise\n+\n 2004-01-16  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/frv/frv-protos.h: Fix comment formatting."}, {"sha": "2083db1a6edc1633b8f0541c589af1bc7bfb79ed", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965514bd92689acdf4d64d47c9905099a1c7b829/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965514bd92689acdf4d64d47c9905099a1c7b829/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=965514bd92689acdf4d64d47c9905099a1c7b829", "patch": "@@ -157,7 +157,7 @@ pp_c_cv_qualifier (c_pretty_printer *pp, const char *cv)\n \n /* Pretty-print T using the type-cast notation '( type-name )'.  */\n \n-static inline void\n+static void\n pp_c_type_cast (c_pretty_printer *pp, tree t)\n {\n   pp_c_left_paren (pp);\n@@ -417,7 +417,7 @@ pp_c_parameter_type_list (c_pretty_printer *pp, tree t)\n       pointer\n       pointer(opt) direct-abstract-declarator  */\n \n-static inline void\n+static void\n pp_c_abstract_declarator (c_pretty_printer *pp, tree t)\n {\n   if (TREE_CODE (t) == POINTER_TYPE)\n@@ -768,7 +768,7 @@ pp_c_integer_constant (c_pretty_printer *pp, tree i)\n \n /* Print out a CHARACTER literal.  */\n \n-static inline void\n+static void\n pp_c_character_constant (c_pretty_printer *pp, tree c)\n {\n   tree type = TREE_TYPE (c);\n@@ -843,7 +843,7 @@ pp_c_enumeration_constant (c_pretty_printer *pp, tree e)\n \n /* Print out a REAL value as a decimal-floating-constant.  */\n \n-static inline void\n+static void\n pp_c_floating_constant (c_pretty_printer *pp, tree r)\n {\n   real_to_decimal (pp_buffer (pp)->digit_buffer, &TREE_REAL_CST (r),\n@@ -1402,7 +1402,7 @@ pp_c_multiplicative_expression (c_pretty_printer *pp, tree e)\n       additive-expression + multiplicative-expression\n       additive-expression - multiplicative-expression   */\n \n-static inline void\n+static void\n pp_c_additive_expression (c_pretty_printer *pp, tree e)\n {\n   enum tree_code code = TREE_CODE (e);\n@@ -1431,7 +1431,7 @@ pp_c_additive_expression (c_pretty_printer *pp, tree e)\n       shift-expression << additive-expression\n       shift-expression >> additive-expression   */\n \n-static inline void\n+static void\n pp_c_shift_expression (c_pretty_printer *pp, tree e)\n {\n   enum tree_code code = TREE_CODE (e);\n@@ -1493,7 +1493,7 @@ pp_c_relational_expression (c_pretty_printer *pp, tree e)\n       equality-expression == relational-expression\n       equality-equality != relational-expression  */\n \n-static inline void\n+static void\n pp_c_equality_expression (c_pretty_printer *pp, tree e)\n {\n   enum tree_code code = TREE_CODE (e);\n@@ -1518,7 +1518,7 @@ pp_c_equality_expression (c_pretty_printer *pp, tree e)\n       equality-expression\n       AND-expression & equality-equality   */\n \n-static inline void\n+static void\n pp_c_and_expression (c_pretty_printer *pp, tree e)\n {\n   if (TREE_CODE (e) == BIT_AND_EXPR)\n@@ -1537,7 +1537,7 @@ pp_c_and_expression (c_pretty_printer *pp, tree e)\n      AND-expression\n      exclusive-OR-expression ^ AND-expression  */\n \n-static inline void\n+static void\n pp_c_exclusive_or_expression (c_pretty_printer *pp, tree e)\n {\n   if (TREE_CODE (e) == BIT_XOR_EXPR)\n@@ -1556,7 +1556,7 @@ pp_c_exclusive_or_expression (c_pretty_printer *pp, tree e)\n      exclusive-OR-expression\n      inclusive-OR-expression | exclusive-OR-expression  */\n \n-static inline void\n+static void\n pp_c_inclusive_or_expression (c_pretty_printer *pp, tree e)\n {\n   if (TREE_CODE (e) == BIT_IOR_EXPR)\n@@ -1575,7 +1575,7 @@ pp_c_inclusive_or_expression (c_pretty_printer *pp, tree e)\n       inclusive-OR-expression\n       logical-AND-expression && inclusive-OR-expression  */\n \n-static inline void\n+static void\n pp_c_logical_and_expression (c_pretty_printer *pp, tree e)\n {\n   if (TREE_CODE (e) == TRUTH_ANDIF_EXPR)"}, {"sha": "b7c7008e6836f38e51b26e4502a0c1b5d507e29b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965514bd92689acdf4d64d47c9905099a1c7b829/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965514bd92689acdf4d64d47c9905099a1c7b829/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=965514bd92689acdf4d64d47c9905099a1c7b829", "patch": "@@ -5029,8 +5029,12 @@ ix86_compute_frame_layout (struct ix86_frame *frame)\n   offset += size;\n \n   /* Add outgoing arguments area.  Can be skipped if we eliminated\n-     all the function calls as dead code.  */\n-  if (ACCUMULATE_OUTGOING_ARGS && !current_function_is_leaf)\n+     all the function calls as dead code.\n+     Skipping is however impossible when function calls alloca.  Alloca\n+     expander assumes that last current_function_outgoing_args_size\n+     of stack frame are unused.  */\n+  if (ACCUMULATE_OUTGOING_ARGS\n+      && (!current_function_is_leaf || current_function_calls_alloca))\n     {\n       offset += current_function_outgoing_args_size;\n       frame->outgoing_arguments_size = current_function_outgoing_args_size;"}, {"sha": "72dff86297d74e17fd9c3c8a0e1213ac38203679", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965514bd92689acdf4d64d47c9905099a1c7b829/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965514bd92689acdf4d64d47c9905099a1c7b829/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=965514bd92689acdf4d64d47c9905099a1c7b829", "patch": "@@ -14260,7 +14260,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI [(const_int 0)] UNSPEC_TP))]\n   \"TARGET_64BIT\"\n-  \"mov{l}\\t{%%fs:0, %0|%0, QWORD PTR %%fs:0}\"\n+  \"mov{q}\\t{%%fs:0, %0|%0, QWORD PTR %%fs:0}\"\n   [(set_attr \"type\" \"imov\")\n    (set_attr \"modrm\" \"0\")\n    (set_attr \"length\" \"7\")"}, {"sha": "c773f165dcc28f712c8bb02661abaf6f163d6918", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965514bd92689acdf4d64d47c9905099a1c7b829/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965514bd92689acdf4d64d47c9905099a1c7b829/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=965514bd92689acdf4d64d47c9905099a1c7b829", "patch": "@@ -1,3 +1,7 @@\n+2004-01-16  Jan Hubicka  <jh@suse.cz>\n+\n+\t* mangle.c (write_mangled_name): Remove inline modifier.\n+\n 2004-01-16  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/13178"}, {"sha": "a1810d3e72f7636a40e2088b1ee8f90c10509ea7", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965514bd92689acdf4d64d47c9905099a1c7b829/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965514bd92689acdf4d64d47c9905099a1c7b829/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=965514bd92689acdf4d64d47c9905099a1c7b829", "patch": "@@ -608,7 +608,7 @@ find_substitution (tree node)\n   \n   <mangled-name>      ::= _Z <encoding>  */\n \n-static inline void\n+static void\n write_mangled_name (const tree decl, bool top_level)\n {\n   MANGLE_TRACE_TREE (\"mangled-name\", decl);"}, {"sha": "77d5fd2bfb8ba4219ceb7c2dcb2a439918593b8a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965514bd92689acdf4d64d47c9905099a1c7b829/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965514bd92689acdf4d64d47c9905099a1c7b829/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=965514bd92689acdf4d64d47c9905099a1c7b829", "patch": "@@ -4870,7 +4870,7 @@ AT_lbl (dw_attr_ref a)\n \n /* Get the attribute of type attr_kind.  */\n \n-static inline dw_attr_ref\n+static dw_attr_ref\n get_AT (dw_die_ref die, enum dwarf_attribute attr_kind)\n {\n   dw_attr_ref a;"}, {"sha": "dfc05a34d0e11981149e0a80fdce0d238cc2c6ff", "filename": "gcc/et-forest.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965514bd92689acdf4d64d47c9905099a1c7b829/gcc%2Fet-forest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965514bd92689acdf4d64d47c9905099a1c7b829/gcc%2Fet-forest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fet-forest.c?ref=965514bd92689acdf4d64d47c9905099a1c7b829", "patch": "@@ -312,7 +312,7 @@ check_path_after (struct et_occ *occ)\n \n /* Splay the occurence OCC to the root of the tree.  */\n \n-static inline void\n+static void\n et_splay (struct et_occ *occ)\n {\n   struct et_occ *f, *gf, *ggf;"}, {"sha": "d55c1c77732d90c43ae4f3142fa07351ce13cf80", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965514bd92689acdf4d64d47c9905099a1c7b829/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965514bd92689acdf4d64d47c9905099a1c7b829/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=965514bd92689acdf4d64d47c9905099a1c7b829", "patch": "@@ -732,7 +732,7 @@ actual_hazard_this_instance (int unit, int instance, rtx insn, int clock, int co\n    at time CLOCK.  The scheduler using only DFA description should\n    never use the following function.  */\n \n-HAIFA_INLINE static void\n+static void\n schedule_unit (int unit, rtx insn, int clock)\n {\n   int i;\n@@ -764,7 +764,7 @@ schedule_unit (int unit, rtx insn, int clock)\n    was COST.  The scheduler using only DFA description should never\n    use the following function.  */\n \n-HAIFA_INLINE static int\n+static int\n actual_hazard (int unit, rtx insn, int clock, int cost)\n {\n   int i;"}, {"sha": "a746d91a55967a59c93b56f12e588860fad3b5c8", "filename": "gcc/ra.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/965514bd92689acdf4d64d47c9905099a1c7b829/gcc%2Fra.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/965514bd92689acdf4d64d47c9905099a1c7b829/gcc%2Fra.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra.h?ref=965514bd92689acdf4d64d47c9905099a1c7b829", "patch": "@@ -569,8 +569,8 @@ extern int flag_ra_spill_every_use;\n /* Nonzero to output all notes in the debug dumps.  */\n extern int flag_ra_dump_notes;\n \n-extern inline void * ra_alloc (size_t);\n-extern inline void * ra_calloc (size_t);\n+extern void * ra_alloc (size_t);\n+extern void * ra_calloc (size_t);\n extern int hard_regs_count (HARD_REG_SET);\n extern rtx ra_emit_move_insn (rtx, rtx);\n extern void ra_debug_msg (unsigned int, const char *, ...) ATTRIBUTE_PRINTF_2;"}]}