{"sha": "10bcde0da9e8682baf0bb75430b101a2a38ffa07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBiY2RlMGRhOWU4NjgyYmFmMGJiNzU0MzBiMTAxYTJhMzhmZmEwNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-27T17:05:04Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-27T17:05:04Z"}, "message": "(debug_reload): New function to print reload info set up by\nfind_reloads.\n\nFrom-SVN: r8348", "tree": {"sha": "f10c008c04441ab82467987daf41aeb6b114da27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f10c008c04441ab82467987daf41aeb6b114da27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10bcde0da9e8682baf0bb75430b101a2a38ffa07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10bcde0da9e8682baf0bb75430b101a2a38ffa07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10bcde0da9e8682baf0bb75430b101a2a38ffa07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10bcde0da9e8682baf0bb75430b101a2a38ffa07/comments", "author": null, "committer": null, "parents": [{"sha": "eae89e04000779e2623c4687fefade24337bc1bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae89e04000779e2623c4687fefade24337bc1bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eae89e04000779e2623c4687fefade24337bc1bf"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "aed06e44ddfc9196b195295e48050a34f2cc6a1a", "filename": "gcc/reload.c", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bcde0da9e8682baf0bb75430b101a2a38ffa07/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bcde0da9e8682baf0bb75430b101a2a38ffa07/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=10bcde0da9e8682baf0bb75430b101a2a38ffa07", "patch": "@@ -86,6 +86,7 @@ a register with any other reload.  */\n \n #define REG_OK_STRICT\n \n+#include <stdio.h>\n #include \"config.h\"\n #include \"rtl.h\"\n #include \"insn-config.h\"\n@@ -5670,3 +5671,110 @@ regno_clobbered_p (regno, insn)\n \n   return 0;\n }\n+\n+static char *reload_when_needed_name[] =\n+{\n+  \"RELOAD_FOR_INPUT\", \n+  \"RELOAD_FOR_OUTPUT\", \n+  \"RELOAD_FOR_INSN\",\n+  \"RELOAD_FOR_INPUT_ADDRESS\", \n+  \"RELOAD_FOR_OUTPUT_ADDRESS\",\n+  \"RELOAD_FOR_OPERAND_ADDRESS\", \n+  \"RELOAD_FOR_OPADDR_ADDR\",\n+  \"RELOAD_OTHER\", \n+  \"RELOAD_FOR_OTHER_ADDRESS\"\n+};\n+\n+static char *reg_class_names[] = REG_CLASS_NAMES;\n+\n+/* This function is used to print the variables set by 'find_reloads' */\n+\n+void\n+debug_reload()\n+{\n+  int r;\n+\n+  fprintf (stderr, \"\\nn_reloads = %d\\n\", n_reloads);\n+\n+  for (r = 0; r < n_reloads; r++)\n+    {\n+      fprintf (stderr, \"\\nRELOAD %d\\n\", r);\n+\n+      if (reload_in[r])\n+\t{\n+\t  fprintf (stderr, \"\\nreload_in (%s) = \", mode_name[reload_inmode[r]]);\n+\t  debug_rtx (reload_in[r]);\n+\t}\n+\n+      if (reload_out[r])\n+\t{\n+\t  fprintf (stderr, \"\\nreload_out (%s) = \", mode_name[reload_outmode[r]]);\n+\t  debug_rtx (reload_out[r]);\n+\t}\n+\n+      fprintf (stderr, \"%s, \", reg_class_names[(int) reload_reg_class[r]]);\n+\n+      fprintf (stderr, \"%s (opnum = %d)\", reload_when_needed_name[(int)reload_when_needed[r]],\n+\t       reload_opnum[r]);\n+\n+      if (reload_optional[r])\n+\tfprintf (stderr, \", optional\");\n+\n+      if (reload_in[r])\n+\tfprintf (stderr, \", inc by %d\\n\", reload_inc[r]);\n+\n+      if (reload_nocombine[r])\n+\tfprintf (stderr, \", can combine\", reload_nocombine[r]);\n+\n+      if (reload_secondary_p[r])\n+\tfprintf (stderr, \", secondary_reload_p\");\n+\n+      if (reload_in_reg[r])\n+\t{\n+\t  fprintf (stderr, \"\\nreload_in_reg:\\t\\t\\t\");\n+\t  debug_rtx (reload_in_reg[r]);\n+\t}\n+\n+      if (reload_reg_rtx[r])\n+\t{\n+\t  fprintf (stderr, \"\\nreload_reg_rtx:\\t\\t\\t\");\n+\t  debug_rtx (reload_reg_rtx[r]);\n+\t}\n+\n+      if (reload_secondary_in_reload[r] != -1)\n+\t{\n+\t  fprintf (stderr, \"\\nsecondary_in_reload = \");\n+\t  fprintf (stderr, \"%d \", reload_secondary_in_reload[r]);\n+\t}\n+\n+      if (reload_secondary_out_reload[r] != -1)\n+\t{\n+\t  if (reload_secondary_in_reload[r] != -1)\n+\t    fprintf (stderr, \", secondary_out_reload = \");\n+\t  else\n+\t    fprintf (stderr, \"\\nsecondary_out_reload = \");\n+\n+\t  fprintf (stderr, \"%d\", reload_secondary_out_reload[r]);\n+\t}\n+\n+\n+      if (reload_secondary_in_icode[r] != CODE_FOR_nothing)\n+\t{\n+\t  fprintf (stderr, \"\\nsecondary_in_icode = \");\n+\t  fprintf (stderr, \"%s\", insn_name[r]);\n+\t}\n+\n+      if (reload_secondary_out_icode[r] != CODE_FOR_nothing)\n+\t{\n+\t  if (reload_secondary_in_icode[r] != CODE_FOR_nothing)\n+\t    fprintf (stderr, \", secondary_out_icode = \");\n+\t  else\n+\t    fprintf (stderr, \"\\nsecondary_out_icode = \");\n+\n+\t  fprintf (stderr, \"%s \", insn_name[r]);\n+\t}\n+      fprintf (stderr, \"\\n\");\n+    }\n+\n+  fprintf (stderr, \"\\n\");\n+}"}]}