{"sha": "3e2481e9141d2a6da579816c3edba5e64b746824", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UyNDgxZTkxNDFkMmE2ZGE1Nzk4MTZjM2VkYmE1ZTY0Yjc0NjgyNA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-06-23T23:45:23Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-06-23T23:45:23Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1250", "tree": {"sha": "ed3dc3576849bdf0be61ac304a10844f0c06b658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed3dc3576849bdf0be61ac304a10844f0c06b658"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e2481e9141d2a6da579816c3edba5e64b746824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e2481e9141d2a6da579816c3edba5e64b746824", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e2481e9141d2a6da579816c3edba5e64b746824", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e2481e9141d2a6da579816c3edba5e64b746824/comments", "author": null, "committer": null, "parents": [{"sha": "c5791d701066e7b858f4fe56aa408edd35296218", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5791d701066e7b858f4fe56aa408edd35296218", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5791d701066e7b858f4fe56aa408edd35296218"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "fd69b1823e1abf24c9f3175bd4c53fae68a0afab", "filename": "gcc/function.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2481e9141d2a6da579816c3edba5e64b746824/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2481e9141d2a6da579816c3edba5e64b746824/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=3e2481e9141d2a6da579816c3edba5e64b746824", "patch": "@@ -3697,8 +3697,10 @@ expand_function_start (subr, parms_have_cleanups)\n   /* If function gets a static chain arg, store it in the stack frame.\n      Do this first, so it gets the first stack slot offset.  */\n   if (current_function_needs_context)\n-    emit_move_insn (assign_stack_local (Pmode, GET_MODE_SIZE (Pmode), 0),\n-\t\t    static_chain_incoming_rtx);\n+    {\n+      last_ptr = assign_stack_local (Pmode, GET_MODE_SIZE (Pmode), 0);\n+      emit_move_insn (last_ptr, static_chain_incoming_rtx);\n+    }\n \n   /* If the parameters of this function need cleaning up, get a label\n      for the beginning of the code which executes those cleanups.  This must\n@@ -3814,7 +3816,10 @@ expand_function_start (subr, parms_have_cleanups)\n \n   /* Fetch static chain values for containing functions.  */\n   tem = decl_function_context (current_function_decl);\n-  if (tem)\n+  /* If not doing stupid register allocation, then start off with the static\n+     chain pointer in a pseudo register.  Otherwise, we use the stack\n+     address that was generated above.  */\n+  if (tem && ! obey_regdecls)\n     last_ptr = copy_to_reg (static_chain_incoming_rtx);\n   context_display = 0;\n   while (tem)"}]}