{"sha": "5c96a03732c08e298766858d9167a4c91aae0ab7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM5NmEwMzczMmMwOGUyOTg3NjY4NThkOTE2N2E0YzkxYWFlMGFiNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-22T08:20:24Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-22T08:20:24Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1233", "tree": {"sha": "2e847ae2ed7611f3d265782b957a91e5942e418f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e847ae2ed7611f3d265782b957a91e5942e418f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c96a03732c08e298766858d9167a4c91aae0ab7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c96a03732c08e298766858d9167a4c91aae0ab7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c96a03732c08e298766858d9167a4c91aae0ab7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c96a03732c08e298766858d9167a4c91aae0ab7/comments", "author": null, "committer": null, "parents": [{"sha": "5352b11a957b76eb6292bf20b9f4d4ab6a8e2e4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5352b11a957b76eb6292bf20b9f4d4ab6a8e2e4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5352b11a957b76eb6292bf20b9f4d4ab6a8e2e4e"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "2afc3c47ff69b5ca921afbabe0f45516d2aeca6f", "filename": "gcc/ginclude/va-sparc.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c96a03732c08e298766858d9167a4c91aae0ab7/gcc%2Fginclude%2Fva-sparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c96a03732c08e298766858d9167a4c91aae0ab7/gcc%2Fginclude%2Fva-sparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-sparc.h?ref=5c96a03732c08e298766858d9167a4c91aae0ab7", "patch": "@@ -48,17 +48,19 @@ typedef void * __va___list;\n    passed by invisible reference.  ??? RECORD_TYPE args passed\n    in the stack are made to be word-aligned; for an aggregate that is\n    not word-aligned, we advance the pointer to the first non-reg slot.  */\n+/* We don't declare the union member `d' to have type TYPE\n+   because that would lose in C++ if TYPE has a constructor.  */\n #define va_arg(pvar,TYPE)\t\t\t\t\t\\\n __extension__\t\t\t\t\t\t\t\\\n ({ TYPE __va_temp;\t\t\t\t\t\t\\\n    ((__builtin_classify_type (__va_temp) >= 12)\t\t\t\\\n     ? ((pvar) += __va_rounded_size (TYPE *),\t\t\t\\\n        **(TYPE **) ((pvar) - __va_rounded_size (TYPE *)))\t\\\n     : __va_rounded_size (TYPE) == 8\t\t\t\t\\\n-    ? ({ union {TYPE d; int i[2];} u;\t\t\t\t\\\n-\t u.i[0] = ((int *) (pvar))[0];\t\t\t\t\\\n-\t u.i[1] = ((int *) (pvar))[1];\t\t\t\t\\\n+    ? ({ union {char __d[sizeof (TYPE)]; int __i[2];} __u;\t\\\n+\t __u.__i[0] = ((int *) (pvar))[0];\t\t\t\\\n+\t __u.__i[1] = ((int *) (pvar))[1];\t\t\t\\\n \t (pvar) += 8;\t\t\t\t\t\t\\\n-\t u.d; })\t\t\t\t\t\t\\\n+\t *(TYPE *)__u.__d; })\t\t\t\t\t\\\n     : ((pvar) += __va_rounded_size (TYPE),\t\t\t\\\n        *((TYPE *) ((pvar) - __va_rounded_size (TYPE)))));})"}]}