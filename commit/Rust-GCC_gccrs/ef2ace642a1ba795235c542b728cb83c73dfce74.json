{"sha": "ef2ace642a1ba795235c542b728cb83c73dfce74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYyYWNlNjQyYTFiYTc5NTIzNWM1NDJiNzI4Y2I4M2M3M2RmY2U3NA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-10T00:16:53Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-10T00:16:53Z"}, "message": "Daily bump.", "tree": {"sha": "554426d1a1017b0c9c278b8366c81b9025133b94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/554426d1a1017b0c9c278b8366c81b9025133b94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef2ace642a1ba795235c542b728cb83c73dfce74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef2ace642a1ba795235c542b728cb83c73dfce74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef2ace642a1ba795235c542b728cb83c73dfce74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef2ace642a1ba795235c542b728cb83c73dfce74/comments", "author": null, "committer": null, "parents": [{"sha": "506f337ad2d75c0feceaaf28fd4997c157979956", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/506f337ad2d75c0feceaaf28fd4997c157979956", "html_url": "https://github.com/Rust-GCC/gccrs/commit/506f337ad2d75c0feceaaf28fd4997c157979956"}], "stats": {"total": 438, "additions": 437, "deletions": 1}, "files": [{"sha": "c1520f2489fc8b0ac10aaa53e9caf8544e9f4536", "filename": "ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2ace642a1ba795235c542b728cb83c73dfce74/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2ace642a1ba795235c542b728cb83c73dfce74/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=ef2ace642a1ba795235c542b728cb83c73dfce74", "patch": "@@ -1,3 +1,9 @@\n+2021-07-09  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* configure: Regenerate.\n+\t* configure.ac: Adjust cases for which it is necessary to\n+\tinclude the Darwin host config fragment.\n+\n 2021-07-06  Gaius Mulley  <gaius.mulley@southwales.ac.uk>\n \n \t* MAINTAINERS: Add myself for write after approval and DCO."}, {"sha": "19fb8d1275260c46fca1df8fe0d7f4bed41225a0", "filename": "config/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2ace642a1ba795235c542b728cb83c73dfce74/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2ace642a1ba795235c542b728cb83c73dfce74/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=ef2ace642a1ba795235c542b728cb83c73dfce74", "patch": "@@ -1,3 +1,8 @@\n+2021-07-09  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* mh-darwin: Make this specific to handling the\n+\tmdynamic-no-pic case.\n+\n 2021-06-14  Michael Forney  <mforney@mforney.org>\n \n \t* gettext.m4 (AM_GNU_GETTEXT): Skip checks for the internal"}, {"sha": "6e6aaf0c8914e799e1744f69237bad13705e6772", "filename": "gcc/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2ace642a1ba795235c542b728cb83c73dfce74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2ace642a1ba795235c542b728cb83c73dfce74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef2ace642a1ba795235c542b728cb83c73dfce74", "patch": "@@ -1,3 +1,67 @@\n+2021-07-09  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*divmodsi4_const): Optimize SImode\n+\tdivmod of a constant numerator with new define_insn_and_split.\n+\n+2021-07-09  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/100152\n+\t* config/i386/i386-expand.c (ix86_expand_call): If a call is\n+\tto a non-local-binding, or local but to a public symbol, then\n+\tassume that it might be indirected via the lazy symbol binder.\n+\tMark R10 and R10 as clobbered in that case.\n+\n+2021-07-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/101377\n+\t* gcc.c (ASM_DEBUG_DWARF_OPTION): Set again to --gdwarf2 in\n+\tthe case where HAVE_AS_WORKING_DWARF_N_FLAG is not defined\n+\tand HAVE_LD_BROKEN_PE_DWARF5 is defined.\n+\n+2021-07-09  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*udivmodsi4_pow2_zext_1): Limit the\n+\tlog2 range of operands[3] to [1,31].\n+\t(*udivmodsi4_pow2_zext_2): Ditto.  Correct insn RTX pattern.\n+\n+2021-07-09  Sergei Trofimovich  <siarheit@google.com>\n+\n+\t* doc/md.texi: Don't split @smallexample in multiple @groups.\n+\n+2021-07-09  Sergei Trofimovich  <siarheit@google.com>\n+\n+\t* doc/md.texi: Add missing 'see' word.\n+\n+2021-07-09  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* tree-ssa-phiopt.c (phiopt_early_allow): Change arguments\n+\tto take sequence and gimple_match_op.  Accept the case where\n+\top is a SSA_NAME and one statement in the sequence.\n+\tAlso allow constants.\n+\t(gimple_simplify_phiopt): Always pass a sequence to resimplify.\n+\tUpdate call to phiopt_early_allow.  Discard the sequence if not\n+\tused.\n+\n+2021-07-09  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\tPR target/100760\n+\tPR target/100761\n+\tPR target/100762\n+\t* config/mips/mips.c (mips_const_insns): Use MSA_SUPPORTED_MODE_P\n+\tinstead of ISA_HAS_MSA.\n+\t(mips_expand_vec_unpack): Likewise.\n+\t(mips_expand_vector_init): Likewise.\n+\n+2021-07-09  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/rs6000/vsx.md (mods_<mode>): Rename to...\n+\t(mod<mode>3): ... this.\n+\t(modu_<mode>): Rename to...\n+\t(umod<mode>3): ... this.\n+\t* config/rs6000/rs6000-builtin.def (MODS_V2DI, MODS_V4SI, MODU_V2DI,\n+\tMODU_V4SI): Adjust.\n+\n 2021-07-08  Jeff Law  <jeffreyalaw@gmail.com>\n \n \t* config/h8300/shiftrotate.md (variable shifts): Expose condition"}, {"sha": "1d7b87f419047f87bd177f250bb048aad44b26aa", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2ace642a1ba795235c542b728cb83c73dfce74/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2ace642a1ba795235c542b728cb83c73dfce74/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ef2ace642a1ba795235c542b728cb83c73dfce74", "patch": "@@ -1 +1 @@\n-20210709\n+20210710"}, {"sha": "9b5629c2cf735c3c840d1a76937bfc380db3e85e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 251, "deletions": 0, "changes": 251, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2ace642a1ba795235c542b728cb83c73dfce74/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2ace642a1ba795235c542b728cb83c73dfce74/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ef2ace642a1ba795235c542b728cb83c73dfce74", "patch": "@@ -1,3 +1,254 @@\n+2021-07-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (finish_subprog_decl): Remove obsolete line.\n+\n+2021-07-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_put_image.adb (Make_Put_Image_Name): Fix style.\n+\t(Image_Should_Call_Put_Image): Likewise.\n+\t(Build_Image_Call): Likewise.\n+\n+2021-07-09  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* par-ch6.adb (Contains_Import_Aspect): New function.\n+\t(P_Subprogram): Acknowledge `Import` aspects.\n+\n+2021-07-09  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_put_image.adb (Make_Component_Attributes): Use\n+\tImplementation_Base_Type to get the parent type. Otherwise,\n+\tParent_Type_Decl is actually an internally generated subtype\n+\tdeclaration, so we blow up on\n+\tType_Definition (Parent_Type_Decl).\n+\n+2021-07-09  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* gsocket.h: Include net/if.h to get IF_NAMESIZE constant.\n+\t* s-oscons-tmplt.c: Define IPV6_FLOWINFO for Linux.\n+\n+2021-07-09  Steve Baird  <baird@adacore.com>\n+\n+\t* libgnat/a-cdlili.adb: Reimplement\n+\tAda.Containers.Doubly_Linked_Lists.Generic_Sorting.Sort using\n+\tMergesort instead of the previous Quicksort variant.\n+\n+2021-07-09  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch6.adb (Is_Build_In_Place_Function_Call): Add check to\n+\tverify the Selector_Name of Exp_Node has been analyzed before\n+\tobtaining its entity.\n+\n+2021-07-09  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* libgnarl/s-osinte__vxworks.ads: Fix typo (\"release\" =>\n+\t\"releases\") plus comment reformatting.\n+\t* libgnat/s-os_lib.ads: In a comment, fix typo (\"indended\" =>\n+\t\"intended\"), add a hyphen and semicolon, plus reformatting. In\n+\tcomment for subtype time_t, fix typo (\"effect\" => \"affect\"), add\n+\thyphens, plus reformatting.\n+\t* libgnat/s-parame.ads, libgnat/s-parame__ae653.ads,\n+\tlibgnat/s-parame__hpux.ads: Remove period from one-line comment.\n+\n+2021-07-09  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_General_Case_Statement): Add new function\n+\tElse_Statements to handle the case of invalid data analogously\n+\tto how it is handled when casing on a discrete value.\n+\t* sem_case.adb (Has_Static_Discriminant_Constraint): A new\n+\tBoolean-valued function.\n+\t(Composite_Case_Ops.Scalar_Part_Count): Include discriminants\n+\twhen traversing components.\n+\t(Composite_Case_Ops.Choice_Analysis.Traverse_Discrete_Parts):\n+\tInclude discriminants when traversing components; the component\n+\trange for a constrained discriminant is a single value.\n+\t(Composite_Case_Ops.Choice_Analysis.Parse_Choice): Eliminate\n+\tDone variable and modify how Next_Part is computed so that it is\n+\talways correct (as opposed to being incorrect when Done is\n+\tTrue).  This includes changes in Update_Result (a local\n+\tprocedure).  Add new local procedure\n+\tUpdate_Result_For_Box_Component and call it not just for box\n+\tcomponents but also for \"missing\" components (components\n+\tassociated with an inactive variant).\n+\t(Check_Choices.Check_Composite_Case_Selector.Check_Component_Subtype):\n+\tInstead of disallowing all discriminated component types, allow\n+\tthose that are unconstrained or statically constrained. Check\n+\tdiscriminant subtypes along with other component subtypes.\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Update\n+\tdocumentation to reflect current implementation status.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2021-07-09  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Pragma_Inline): Correctly use\n+\tCorresponding_Spec_Of_Stub when dealing subprogram body stubs.\n+\n+2021-07-09  Doug Rupp  <rupp@adacore.com>\n+\n+\t* Makefile.rtl: Add translations for s-parame__posix2008.ads\n+\t* libgnarl/s-linux.ads: Import System.Parameters.\n+\t(time_t): Declare using System.Parameters.time_t_bits.\n+\t* libgnarl/s-linux__alpha.ads: Likewise.\n+\t* libgnarl/s-linux__android.ads: Likewise.\n+\t* libgnarl/s-linux__hppa.ads: Likewise.\n+\t* libgnarl/s-linux__mips.ads: Likewise.\n+\t* libgnarl/s-linux__riscv.ads: Likewise.\n+\t* libgnarl/s-linux__sparc.ads: Likewise.\n+\t* libgnarl/s-linux__x32.ads: Likewise.\n+\t* libgnarl/s-qnx.ads: Likewise.\n+\t* libgnarl/s-osinte__aix.ads: Likewise.\n+\t* libgnarl/s-osinte__android.ads: Likewise.\n+\t* libgnarl/s-osinte__darwin.ads: Likewise.\n+\t* libgnarl/s-osinte__dragonfly.ads: Likewise.\n+\t* libgnarl/s-osinte__freebsd.ads: Likewise.\n+\t* libgnarl/s-osinte__gnu.ads: Likewise.\n+\t* libgnarl/s-osinte__hpux-dce.ads: Likewise.\n+\t* libgnarl/s-osinte__hpux.ads: Likewise.\n+\t* libgnarl/s-osinte__kfreebsd-gnu.ads: Likewise.\n+\t* libgnarl/s-osinte__lynxos178e.ads: Likewise.\n+\t* libgnarl/s-osinte__qnx.ads: Likewise.\n+\t* libgnarl/s-osinte__rtems.ads: Likewise.\n+\t* libgnarl/s-osinte__solaris.ads: Likewise.\n+\t* libgnarl/s-osinte__vxworks.ads: Likewise.\n+\t* libgnat/g-sothco.ads: Likewise.\n+\t* libgnat/s-osprim__darwin.adb: Likewise.\n+\t* libgnat/s-osprim__posix.adb: Likewise.\n+\t* libgnat/s-osprim__posix2008.adb: Likewise.\n+\t* libgnat/s-osprim__rtems.adb: Likewise.\n+\t* libgnat/s-osprim__x32.adb: Likewise.\n+\t* libgnarl/s-osinte__linux.ads: use type System.Linux.time_t.\n+\t* libgnat/s-os_lib.ads (time_t): Declare as subtype of\n+\tLong_Long_Integer.\n+\t* libgnat/s-parame.ads (time_t_bits): New constant.\n+\t* libgnat/s-parame__ae653.ads (time_t_bits): Likewise.\n+\t* libgnat/s-parame__hpux.ads (time_t_bits): Likewise.\n+\t* libgnat/s-parame__vxworks.ads (time_t_bits): Likewise.\n+\t* libgnat/s-parame__posix2008.ads: New file for 64 bit time_t.\n+\n+2021-07-09  Bob Duff  <duff@adacore.com>\n+\n+\t* comperr.adb (Compiler_Abort): Print source file name.\n+\n+2021-07-09  Joffrey Huguet  <huguet@adacore.com>\n+\n+\t* libgnat/a-strunb.ads, libgnat/a-strunb__shared.ads: Fix layout\n+\tin contracts.\n+\n+2021-07-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* repinfo.ads (JSON output format): Document adjusted key name.\n+\t* repinfo.adb (List_Record_Layout): Use Original_Record_Component\n+\tif the normalized position of the component is not known.\n+\t(List_Structural_Record_Layout): Rename Outer_Ent parameter into\n+\tExt_End and add Ext_Level parameter. In an extension, if the parent\n+\tsubtype has static discriminants, call List_Record_Layout on it.\n+\tOutput \"parent_\" prefixes before \"variant\" according to Ext_Level.\n+\tAdjust recursive calls throughout the procedure.\n+\n+2021-07-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_util.ads (Map_Types): Fix typo.\n+\n+2021-07-09  Fedor Rybin  <frybin@adacore.com>\n+\n+\t* krunch.adb: Add safeguards against index range violations.\n+\n+2021-07-09  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-strfix.adb: Take advantage of extended returns.\n+\n+2021-07-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_attributes.rst\n+\t(Scalar_Storage_Order): Add paragraph about representation\n+\tchanges.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2021-07-09  Frederic Konrad  <konrad@adacore.com>\n+\n+\t* Makefile.rtl (LIBGNAT_TARGET_PAIRS) <aarch64*-*-rtems*>: Use\n+\tthe wraplf variant of Aux_Long_Long_Float.\n+\n+2021-07-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Expression_Function): Initialize Orig_N\n+\tand Typ variables.\n+\n+2021-07-09  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch13.adb (Resolve_Aspect_Expressions): Use the same\n+\tprocessing for Predicate, Static_Predicate and\n+\tDynamic_Predicate. Do not build the predicate function spec.\n+\tUpdate comments.\n+\t(Resolve_Name): Only reset Entity when necessary to avoid\n+\tspurious visibility errors.\n+\t(Check_Aspect_At_End_Of_Declarations): Handle consistently all\n+\tPredicate aspects.\n+\t* sem_ch3.adb (Analyze_Subtype_Declaration): Fix handling of\n+\tprivate types with predicates.\n+\n+2021-07-09  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_util.ads (Type_Access_Level): Add new optional parameter\n+\tAssoc_Ent.\n+\t* sem_util.adb (Accessibility_Level): Treat access discriminants\n+\tthe same as components when the restriction\n+\tNo_Dynamic_Accessibility_Checks is enabled.\n+\t(Deepest_Type_Access_Level): Remove exception for\n+\tDebug_Flag_Underscore_B when returning the result of\n+\tType_Access_Level in the case where\n+\tNo_Dynamic_Accessibility_Checks is active.\n+\t(Function_Call_Or_Allocator_Level): Correctly calculate the\n+\tlevel of Expr based on its containing subprogram instead of\n+\tusing Current_Subprogram.\n+\t* sem_res.adb (Valid_Conversion): Add actual for new parameter\n+\tAssoc_Ent in call to Type_Access_Level, and add test of\n+\tNo_Dynamic_Accessibility_Checks_Enabled to ensure that static\n+\taccessibility checks are performed for all anonymous access type\n+\tconversions.\n+\n+2021-07-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_dbug.ads: Update documentation of various items.\n+\n+2021-07-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Expression_Function): Reorder code.\n+\n+2021-07-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Expression_Function): Reorder code.\n+\n+2021-07-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Expression_Function): Add variable to\n+\tavoid repeated calls to Etype.\n+\n+2021-07-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Expression_Function): Fix comment.\n+\n+2021-07-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Expression_Function): Use Orig_N variable\n+\tinstead of repeated calls to Original_Node.\n+\n+2021-07-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Expression_Function): Change types local\n+\tvariables from Entity_Id to Node_Id.\n+\n+2021-07-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Expression_Function): A local Expr\n+\tconstant was shadowing a global constant with the same name and\n+\tthe same value.\n+\n+2021-07-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Preanalyze_And_Resolve): Only call\n+\tSet_Must_Not_Freeze when it is necessary to restore the previous\n+\tvalue.\n+\n 2021-07-08  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* sem_ch5.adb (Analyze_Assignment): Clear Current_Assignment at"}, {"sha": "351476da0195c5ecd278d54cf40f7c5278e93ca2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2ace642a1ba795235c542b728cb83c73dfce74/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2ace642a1ba795235c542b728cb83c73dfce74/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ef2ace642a1ba795235c542b728cb83c73dfce74", "patch": "@@ -1,3 +1,45 @@\n+2021-07-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/101098\n+\t* decl.c (function_requirements_equivalent_p): Only compare\n+\ttrailing requirements on a specialization.\n+\n+2021-07-09  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* coroutines.cc (build_actor_fn): Move common code to\n+\tact_des_fn.\n+\t(build_destroy_fn): Likewise.\n+\t(act_des_fn): Build the void return here.  Ensure that the\n+\tsource location matches the original function.\n+\n+2021-07-09  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* coroutines.cc\n+\t(coro_rewrite_function_body): Connect the replacement\n+\tfunction block to the block nest correctly.\n+\n+2021-07-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101181\n+\t* constraint.cc (tsubst_requires_expr): Pass complain/in_decl to\n+\tadd_extra_args.\n+\t* cp-tree.h (add_extra_args): Add complain/in_decl parameters.\n+\t* pt.c (build_extra_args): Make a copy of args.\n+\t(add_extra_args): Add complain/in_decl parameters.  Enable the\n+\tcode for handling the case where the extra arguments are\n+\tdependent.\n+\t(tsubst_pack_expansion): Pass complain/in_decl to\n+\tadd_extra_args.\n+\t(tsubst_template_args): Handle missing template arguments.\n+\t(tsubst_expr) <case IF_STMT>: Pass complain/in_decl to\n+\tadd_extra_args.\n+\n+2021-07-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101247\n+\t* pt.c (any_template_parm_r) <case TEMPLATE_DECL>: Just walk the\n+\tDECL_CONTEXT.\n+\n 2021-07-08  Martin Sebor  <msebor@redhat.com>\n \n \tPR bootstrap/101372"}, {"sha": "9d203f5f960725c3b0e0a08221bd0ea3b3154029", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2ace642a1ba795235c542b728cb83c73dfce74/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2ace642a1ba795235c542b728cb83c73dfce74/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef2ace642a1ba795235c542b728cb83c73dfce74", "patch": "@@ -1,3 +1,61 @@\n+2021-07-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/101098\n+\t* g++.dg/concepts/explicit-spec1.C: New test.\n+\n+2021-07-09  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/divmod-9.c: New test case.\n+\n+2021-07-09  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\tPR testsuite/101269\n+\t* gcc.dg/debug/btf/btf-datasec-1.c: Force -msdata=none with ilp32 for\n+\tpowerpc based targets.\n+\n+2021-07-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101181\n+\t* g++.dg/cpp2a/concepts-requires26.C: New test.\n+\t* g++.dg/cpp2a/lambda-uneval16.C: New test.\n+\n+2021-07-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/101247\n+\t* g++.dg/cpp2a/concepts-memtmpl4.C: Uncomment the commented out\n+\texample, which we now handle correctly.\n+\t* g++.dg/cpp2a/concepts-memtmpl5.C: New test.\n+\t* g++.dg/cpp2a/concepts-memtmpl5a.C: New test.\n+\n+2021-07-09  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\t* gcc.target/mips/cfgcleanup-jalr2.c: Remove -fno-inline and add\n+\t  __attribute__((noinline)).\n+\t* gcc.target/mips/cfgcleanup-jalr3.c: Likewise.\n+\n+2021-07-09  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\tPR target/100760\n+\tPR target/100761\n+\tPR target/100762\n+\t* gcc.target/mips/pr100760.c: New test.\n+\t* gcc.target/mips/pr100761.c: New test.\n+\t* gcc.target/mips/pr100762.c: New test.\n+\n+2021-07-09  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/mod-vectorize.c: New test.\n+\n+2021-07-09  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/div-vectorize-1.c: New test.\n+\n+2021-07-09  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/mul-vectorize-1.c: New test.\n+\t* gcc.target/powerpc/mul-vectorize-2.c: New test.\n+\n 2021-07-08  Martin Sebor  <msebor@redhat.com>\n \n \t* gcc.dg/Wstringop-overflow-43.c: Remove an xfail."}, {"sha": "fa5f6748fea2b64c9bc53f736a28de3c28d52c67", "filename": "libffi/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2ace642a1ba795235c542b728cb83c73dfce74/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2ace642a1ba795235c542b728cb83c73dfce74/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=ef2ace642a1ba795235c542b728cb83c73dfce74", "patch": "@@ -1,3 +1,8 @@\n+2021-07-09  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR libffi/101336\n+\t* configure.host: Always check __x86_64__ for x86 hosts.\n+\n 2021-06-16  Jakub Jelinek  <jakub@redhat.com>\n \n \t* src/x86/ffi64.c (classify_argument): For FFI_TYPE_STRUCT set words"}, {"sha": "baa4ed84bcacb52dfea094d48136290d20210531", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2ace642a1ba795235c542b728cb83c73dfce74/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2ace642a1ba795235c542b728cb83c73dfce74/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ef2ace642a1ba795235c542b728cb83c73dfce74", "patch": "@@ -1,3 +1,8 @@\n+2021-07-09  Matheus Castanho  <msc@linux.ibm.com>\n+\n+\t* include/std/mutex (__lock_impl): Check\n+\t_GLIBCXX_HAS_GTHREADS before using __gthread_yield.\n+\n 2021-07-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/101271"}]}