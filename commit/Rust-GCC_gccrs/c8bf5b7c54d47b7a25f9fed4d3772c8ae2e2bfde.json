{"sha": "c8bf5b7c54d47b7a25f9fed4d3772c8ae2e2bfde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhiZjViN2M1NGQ0N2I3YTI1ZjlmZWQ0ZDM3NzJjOGFlMmUyYmZkZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-10-30T22:22:38Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-10-30T22:22:38Z"}, "message": "tuple_iterate.h (tuple_size<tuple<> >::value): Provide definition.\n\n2006-10-30  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/tuple_iterate.h (tuple_size<tuple<> >::value): Provide\n\tdefinition.\n\t* include/tr1/functional (is_bind_expression<>::value,\n\tis_placeholder<>::value, + various partial specializations): Likewise.\n\t* include/tr1/array (tuple_size<array<> >::value): Likewise.\n\nFrom-SVN: r118203", "tree": {"sha": "a04b7c494980daf1e707842254071519f28eb9a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a04b7c494980daf1e707842254071519f28eb9a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8bf5b7c54d47b7a25f9fed4d3772c8ae2e2bfde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8bf5b7c54d47b7a25f9fed4d3772c8ae2e2bfde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8bf5b7c54d47b7a25f9fed4d3772c8ae2e2bfde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8bf5b7c54d47b7a25f9fed4d3772c8ae2e2bfde/comments", "author": null, "committer": null, "parents": [{"sha": "771e6d83c98294c36cc189e7912b53a6658f5438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/771e6d83c98294c36cc189e7912b53a6658f5438", "html_url": "https://github.com/Rust-GCC/gccrs/commit/771e6d83c98294c36cc189e7912b53a6658f5438"}], "stats": {"total": 57, "additions": 39, "deletions": 18}, "files": [{"sha": "21f803052f382456b319f47b39b34a74c989777c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bf5b7c54d47b7a25f9fed4d3772c8ae2e2bfde/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bf5b7c54d47b7a25f9fed4d3772c8ae2e2bfde/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c8bf5b7c54d47b7a25f9fed4d3772c8ae2e2bfde", "patch": "@@ -1,3 +1,11 @@\n+2006-10-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/tuple_iterate.h (tuple_size<tuple<> >::value): Provide\n+\tdefinition.\n+\t* include/tr1/functional (is_bind_expression<>::value,\n+\tis_placeholder<>::value, + various partial specializations): Likewise.\n+\t* include/tr1/array (tuple_size<array<> >::value): Likewise.\n+\n 2006-10-30  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/tr1/6_containers/array/capacity/max_size.cc: Actually"}, {"sha": "1afd7db04a42a99db109c6d2fd97a4e3c7f832f0", "filename": "libstdc++-v3/include/tr1/array", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bf5b7c54d47b7a25f9fed4d3772c8ae2e2bfde/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bf5b7c54d47b7a25f9fed4d3772c8ae2e2bfde/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray?ref=c8bf5b7c54d47b7a25f9fed4d3772c8ae2e2bfde", "patch": "@@ -243,6 +243,9 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     struct tuple_size<array<_Tp, _Nm> >\n     { static const int value = _Nm; };\n \n+  template<typename _Tp, std::size_t _Nm>\n+    const int tuple_size<array<_Tp, _Nm> >::value;\n+\n   template<int _Int, typename _Tp, std::size_t _Nm>\n     struct tuple_element<_Int, array<_Tp, _Nm> >\n     { typedef _Tp type; };"}, {"sha": "44d91542cbb068fda6f0549dede8397c667c72c3", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bf5b7c54d47b7a25f9fed4d3772c8ae2e2bfde/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bf5b7c54d47b7a25f9fed4d3772c8ae2e2bfde/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=c8bf5b7c54d47b7a25f9fed4d3772c8ae2e2bfde", "patch": "@@ -514,19 +514,21 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    */\n   template<typename _Tp>\n     struct is_bind_expression\n-    {\n-      static const bool value = false;\n-    };\n+    { static const bool value = false; };\n+\n+  template<typename _Tp>\n+    const bool is_bind_expression<_Tp>::value;\n \n   /**\n    *  @brief Determines if the given type _Tp is a placeholder in a\n    *  bind() expression and, if so, which placeholder it is. [TR1 3.6.2]\n    */\n   template<typename _Tp>\n     struct is_placeholder\n-    {\n-      static const int value = 0;\n-    };\n+    { static const int value = 0; };\n+\n+  template<typename _Tp>\n+    const int is_placeholder<_Tp>::value;\n \n   /**\n    *  @if maint\n@@ -543,9 +545,10 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    */\n   template<int _Num>\n     struct is_placeholder<_Placeholder<_Num> >\n-    {\n-      static const int value = _Num;\n-    };\n+    { static const int value = _Num; };\n+\n+  template<int _Num>\n+    const int is_placeholder<_Placeholder<_Num> >::value;\n \n   /**\n    *  @if maint\n@@ -714,21 +717,23 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    *  @endif\n    */\n    template<typename _Signature>\n-    struct is_bind_expression<_Bind<_Signature> >\n-    {\n-      static const bool value = true;\n-    };\n+     struct is_bind_expression<_Bind<_Signature> >\n+     { static const bool value = true; };\n+\n+   template<typename _Signature>\n+     const bool is_bind_expression<_Bind<_Signature> >::value;\n \n   /**\n    *  @if maint\n    *  Class template _Bind_result is always a bind expression.\n    *  @endif\n    */\n    template<typename _Result, typename _Signature>\n-   struct is_bind_expression<_Bind_result<_Result, _Signature> >\n-    {\n-      static const bool value = true;\n-    };\n+     struct is_bind_expression<_Bind_result<_Result, _Signature> >\n+     { static const bool value = true; };\n+\n+   template<typename _Result, typename _Signature>\n+     const bool is_bind_expression<_Bind_result<_Result, _Signature> >::value;\n \n   /**\n    *  @brief Exception class thrown when class template function's"}, {"sha": "da6166e725d72f86a288bc613ec3c518c30ffb56", "filename": "libstdc++-v3/include/tr1/tuple_iterate.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8bf5b7c54d47b7a25f9fed4d3772c8ae2e2bfde/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple_iterate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8bf5b7c54d47b7a25f9fed4d3772c8ae2e2bfde/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple_iterate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple_iterate.h?ref=c8bf5b7c54d47b7a25f9fed4d3772c8ae2e2bfde", "patch": "@@ -1,6 +1,6 @@\n // class template tuple -*- C++ -*-\n \n-// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,6 +39,11 @@ template<_GLIBCXX_TEMPLATE_PARAMS>\n   struct tuple_size<tuple<_GLIBCXX_TEMPLATE_ARGS> >\n   { static const int value = _GLIBCXX_NUM_ARGS; };\n \n+#if _GLIBCXX_NUM_ARGS > 0\n+template<_GLIBCXX_TEMPLATE_PARAMS>\n+  const int tuple_size<tuple<_GLIBCXX_TEMPLATE_ARGS> >::value;\n+#endif\n+\n template<_GLIBCXX_TEMPLATE_PARAMS>\n #ifdef _GLIBCXX_LAST_INCLUDE\n   class tuple"}]}