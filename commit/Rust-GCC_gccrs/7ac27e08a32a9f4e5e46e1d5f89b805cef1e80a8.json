{"sha": "7ac27e08a32a9f4e5e46e1d5f89b805cef1e80a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FjMjdlMDhhMzJhOWY0ZTVlNDZlMWQ1Zjg5YjgwNWNlZjFlODBhOA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-02-13T01:54:07Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-02-13T01:54:07Z"}, "message": "acconfig.h: New file.\n\n\t* acconfig.h: New file.  Add uintptr_t.\n\t* config.in: Regenerated.\n\nFrom-SVN: r62811", "tree": {"sha": "87c3a1f61fcefa19c6a902a99c14d711e7798c29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87c3a1f61fcefa19c6a902a99c14d711e7798c29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ac27e08a32a9f4e5e46e1d5f89b805cef1e80a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac27e08a32a9f4e5e46e1d5f89b805cef1e80a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ac27e08a32a9f4e5e46e1d5f89b805cef1e80a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ac27e08a32a9f4e5e46e1d5f89b805cef1e80a8/comments", "author": null, "committer": null, "parents": [{"sha": "19a7414eb4622d2f26a20daca2efe3a666a706d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19a7414eb4622d2f26a20daca2efe3a666a706d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19a7414eb4622d2f26a20daca2efe3a666a706d6"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "46db19689c56ba23e203b057732b1e00bbd32de2", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac27e08a32a9f4e5e46e1d5f89b805cef1e80a8/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac27e08a32a9f4e5e46e1d5f89b805cef1e80a8/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=7ac27e08a32a9f4e5e46e1d5f89b805cef1e80a8", "patch": "@@ -1,3 +1,8 @@\n+2003-02-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* acconfig.h: New file.  Add uintptr_t.\n+\t* config.in: Regenerated.\n+\n 2003-02-04  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* libiberty.texi: Update to GFDL 1.2."}, {"sha": "364cb41da7cb382a3e34987f7a5e22d3aa0245ad", "filename": "libiberty/acconfig.h", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac27e08a32a9f4e5e46e1d5f89b805cef1e80a8/libiberty%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac27e08a32a9f4e5e46e1d5f89b805cef1e80a8/libiberty%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Facconfig.h?ref=7ac27e08a32a9f4e5e46e1d5f89b805cef1e80a8", "patch": "@@ -0,0 +1,3 @@\n+/* Define to `unsigned long' if <sys/types.h> doesn't define.  */\n+#undef uintptr_t\n+"}, {"sha": "43adcfd8ab5111c6904394874a3a94bbb2a2556a", "filename": "libiberty/config.in", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ac27e08a32a9f4e5e46e1d5f89b805cef1e80a8/libiberty%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ac27e08a32a9f4e5e46e1d5f89b805cef1e80a8/libiberty%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig.in?ref=7ac27e08a32a9f4e5e46e1d5f89b805cef1e80a8", "patch": "@@ -1,4 +1,4 @@\n-/* config.in.  Generated automatically from configure.in by autoheader 2.13.  */\n+/* config.in.  Generated automatically from configure.in by autoheader.  */\n \n /* Define to empty if the keyword does not work.  */\n #undef const\n@@ -15,6 +15,9 @@\n /* Define as __inline if that's what the C compiler calls it.  */\n #undef inline\n \n+/* Define if your C compiler doesn't accept -c and -o together.  */\n+#undef NO_MINUS_C_MINUS_O\n+\n /* Define to `int' if <sys/types.h> doesn't define.  */\n #undef pid_t\n \n@@ -30,6 +33,9 @@\n /* Define vfork as fork if vfork does not work.  */\n #undef vfork\n \n+/* Define to `unsigned long' if <sys/types.h> doesn't define.  */\n+#undef uintptr_t\n+\n /* Define if you have the _doprnt function.  */\n #undef HAVE__DOPRNT\n "}]}