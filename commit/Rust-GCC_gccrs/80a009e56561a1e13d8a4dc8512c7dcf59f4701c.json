{"sha": "80a009e56561a1e13d8a4dc8512c7dcf59f4701c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBhMDA5ZTU2NTYxYTFlMTNkOGE0ZGM4NTEyYzdkY2Y1OWY0NzAxYw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2012-05-29T19:29:29Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2012-05-29T19:29:29Z"}, "message": "2012-05-29  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_tempbuf.h (__uninitialized_construct_buf)\n\t(__uninitialized_construct_buf_dispatch<>::__ucr): Fix to work\n\twith iterator returning rvalue.\n\t* testsuite/25_algorithms/stable_sort/3.cc: New.\n\nFrom-SVN: r187985", "tree": {"sha": "20cc48a0922808ae480fbbbb9538bf415ad69ca0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20cc48a0922808ae480fbbbb9538bf415ad69ca0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80a009e56561a1e13d8a4dc8512c7dcf59f4701c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80a009e56561a1e13d8a4dc8512c7dcf59f4701c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80a009e56561a1e13d8a4dc8512c7dcf59f4701c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80a009e56561a1e13d8a4dc8512c7dcf59f4701c/comments", "author": null, "committer": null, "parents": [{"sha": "678abdd924dc88e2c202c9059fe1b502d876cd1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/678abdd924dc88e2c202c9059fe1b502d876cd1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/678abdd924dc88e2c202c9059fe1b502d876cd1b"}], "stats": {"total": 88, "additions": 68, "deletions": 20}, "files": [{"sha": "bd704eaa56471c2dd008cc5793f2c4ce4801b65b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80a009e56561a1e13d8a4dc8512c7dcf59f4701c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80a009e56561a1e13d8a4dc8512c7dcf59f4701c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=80a009e56561a1e13d8a4dc8512c7dcf59f4701c", "patch": "@@ -1,3 +1,10 @@\n+2012-05-29  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_tempbuf.h (__uninitialized_construct_buf)\n+\t(__uninitialized_construct_buf_dispatch<>::__ucr): Fix to work\n+\twith iterator returning rvalue.\n+\t* testsuite/25_algorithms/stable_sort/3.cc: New.\n+\n 2012-05-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/53503"}, {"sha": "03d977f03742f86a6721c4c8459b062148ae0e18", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80a009e56561a1e13d8a4dc8512c7dcf59f4701c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80a009e56561a1e13d8a4dc8512c7dcf59f4701c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=80a009e56561a1e13d8a4dc8512c7dcf59f4701c", "patch": "@@ -1,7 +1,7 @@\n // Temporary buffer implementation -*- C++ -*-\n \n // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n-// 2010, 2011\n+// 2010, 2011, 2012\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -182,25 +182,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<bool>\n     struct __uninitialized_construct_buf_dispatch\n     {\n-      template<typename _ForwardIterator, typename _Tp>\n+      template<typename _Pointer, typename _ForwardIterator>\n         static void\n-        __ucr(_ForwardIterator __first, _ForwardIterator __last,\n-\t      _Tp& __value)\n+        __ucr(_Pointer __first, _Pointer __last,\n+\t      _ForwardIterator __seed)\n         {\n \t  if(__first == __last)\n \t    return;\n \n-\t  _ForwardIterator __cur = __first;\n+\t  _Pointer __cur = __first;\n \t  __try\n \t    {\n \t      std::_Construct(std::__addressof(*__first),\n-\t\t\t      _GLIBCXX_MOVE(__value));\n-\t      _ForwardIterator __prev = __cur;\n+\t\t\t      _GLIBCXX_MOVE(*__seed));\n+\t      _Pointer __prev = __cur;\n \t      ++__cur;\n \t      for(; __cur != __last; ++__cur, ++__prev)\n \t\tstd::_Construct(std::__addressof(*__cur),\n \t\t\t\t_GLIBCXX_MOVE(*__prev));\n-\t      __value = _GLIBCXX_MOVE(*__prev);\n+\t      *__seed = _GLIBCXX_MOVE(*__prev);\n \t    }\n \t  __catch(...)\n \t    {\n@@ -213,33 +213,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<>\n     struct __uninitialized_construct_buf_dispatch<true>\n     {\n-      template<typename _ForwardIterator, typename _Tp>\n+      template<typename _Pointer, typename _ForwardIterator>\n         static void\n-        __ucr(_ForwardIterator, _ForwardIterator, _Tp&) { }\n+        __ucr(_Pointer, _Pointer, _ForwardIterator) { }\n     };\n \n   // Constructs objects in the range [first, last).\n   // Note that while these new objects will take valid values,\n   // their exact value is not defined. In particular they may\n   // be 'moved from'.\n   //\n-  // While __value may altered during this algorithm, it will have\n+  // While *__seed may be altered during this algorithm, it will have\n   // the same value when the algorithm finishes, unless one of the\n   // constructions throws.\n   //\n-  // Requirements: _ForwardIterator::value_type(_Tp&&) is valid.\n-  template<typename _ForwardIterator, typename _Tp>\n+  // Requirements: _Pointer::value_type(_Tp&&) is valid.\n+  template<typename _Pointer, typename _ForwardIterator>\n     inline void\n-    __uninitialized_construct_buf(_ForwardIterator __first,\n-\t\t\t\t  _ForwardIterator __last,\n-\t\t\t\t  _Tp& __value)\n+    __uninitialized_construct_buf(_Pointer __first, _Pointer __last,\n+\t\t\t\t  _ForwardIterator __seed)\n     {\n-      typedef typename std::iterator_traits<_ForwardIterator>::value_type\n+      typedef typename std::iterator_traits<_Pointer>::value_type\n \t_ValueType;\n \n       std::__uninitialized_construct_buf_dispatch<\n         __has_trivial_constructor(_ValueType)>::\n-\t  __ucr(__first, __last, __value);\n+\t  __ucr(__first, __last, __seed);\n     }\n \n   template<typename _ForwardIterator, typename _Tp>\n@@ -254,9 +253,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t    value_type>(_M_original_len));\n \t  _M_buffer = __p.first;\n \t  _M_len = __p.second;\n-\t  if(_M_buffer)\n+\t  if (_M_buffer)\n \t    std::__uninitialized_construct_buf(_M_buffer, _M_buffer + _M_len,\n-\t\t\t\t\t       *__first);\n+\t\t\t\t\t       __first);\n \t}\n       __catch(...)\n \t{"}, {"sha": "31834d94e952ce9920b250c79c03b22ec431f658", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_sort/3.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80a009e56561a1e13d8a4dc8512c7dcf59f4701c/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80a009e56561a1e13d8a4dc8512c7dcf59f4701c/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F3.cc?ref=80a009e56561a1e13d8a4dc8512c7dcf59f4701c", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 25.3.1.2 [lib.stable.sort]\n+\n+#include <vector>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+void \n+test1()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<bool> bools;\n+  bools.push_back(true);\n+  bools.push_back(false);\n+  bools.push_back(true);\n+  bools.push_back(false);\n+  std::stable_sort(bools.begin(), bools.end());\n+  VERIFY( !bools[0] && !bools[1] && bools[2] && bools[3] );\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+}"}]}