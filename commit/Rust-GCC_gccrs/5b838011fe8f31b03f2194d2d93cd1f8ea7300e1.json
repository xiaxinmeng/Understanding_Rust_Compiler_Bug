{"sha": "5b838011fe8f31b03f2194d2d93cd1f8ea7300e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI4MzgwMTFmZThmMzFiMDNmMjE5NGQyZDkzY2QxZjhlYTczMDBlMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-08-02T17:22:01Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-08-02T17:22:01Z"}, "message": "(alpha_builtin_saveregs): If -fcheck-memory-usage, set rights of saved\nregisters.\n\nFrom-SVN: r14620", "tree": {"sha": "2910b4babab06ef8ba96370223f69ab61e47eef5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2910b4babab06ef8ba96370223f69ab61e47eef5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b838011fe8f31b03f2194d2d93cd1f8ea7300e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b838011fe8f31b03f2194d2d93cd1f8ea7300e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b838011fe8f31b03f2194d2d93cd1f8ea7300e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b838011fe8f31b03f2194d2d93cd1f8ea7300e1/comments", "author": null, "committer": null, "parents": [{"sha": "7c6d41201350820950728973099f783e1976b444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c6d41201350820950728973099f783e1976b444", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c6d41201350820950728973099f783e1976b444"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "de66e1dc28785118af4da6f6e523d7a9e7abd08b", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b838011fe8f31b03f2194d2d93cd1f8ea7300e1/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b838011fe8f31b03f2194d2d93cd1f8ea7300e1/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=5b838011fe8f31b03f2194d2d93cd1f8ea7300e1", "patch": "@@ -1536,7 +1536,7 @@ struct rtx_def *\n alpha_builtin_saveregs (arglist)\n      tree arglist;\n {\n-  rtx block, addr, argsize;\n+  rtx block, addr, dest, argsize;\n   tree fntype = TREE_TYPE (current_function_decl);\n   int stdarg = (TYPE_ARG_TYPES (fntype) != 0\n \t\t&& (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n@@ -1591,14 +1591,28 @@ alpha_builtin_saveregs (arglist)\n       /* Store the address of the first integer register in the __base\n \t member.  */\n \n-      emit_move_insn (change_address (block, ptr_mode, XEXP (block, 0)), addr);\n+      dest = change_address (block, ptr_mode, XEXP (block, 0));\n+      emit_move_insn (dest, addr);\n \n+      if (flag_check_memory_usage)\n+\temit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3, dest,\n+\t\t\t   ptr_mode, GEN_INT (GET_MODE_SIZE (ptr_mode)),\n+\t\t\t   TYPE_MODE (sizetype),\n+\t\t\t   GEN_INT (MEMORY_USE_RW), QImode);\n+  \n       /* Store the argsize as the __va_offset member.  */\n-      emit_move_insn\n-\t(change_address (block, TYPE_MODE (integer_type_node),\n-\t\t\t plus_constant (XEXP (block, 0),\n-\t\t\t\t\tPOINTER_SIZE/BITS_PER_UNIT)),\n-\t argsize);\n+      dest = change_address (block, TYPE_MODE (integer_type_node),\n+\t\t\t     plus_constant (XEXP (block, 0),\n+\t\t\t\t\t    POINTER_SIZE/BITS_PER_UNIT));\n+      emit_move_insn (dest, argsize);\n+\n+      if (flag_check_memory_usage)\n+\temit_library_call (chkr_set_right_libfunc, 1, VOIDmode, 3, dest,\n+\t\t\t   ptr_mode,\n+\t\t\t   GEN_INT (GET_MODE_SIZE\n+\t\t\t\t    (TYPE_MODE (integer_type_node))),\n+\t\t\t   TYPE_MODE (sizetype),\n+\t\t\t   GEN_INT (MEMORY_USE_RW), QImode);\n \n       /* Return the address of the va_list constructor, but don't put it in a\n \t register.  Doing so would fail when not optimizing and produce worse"}]}