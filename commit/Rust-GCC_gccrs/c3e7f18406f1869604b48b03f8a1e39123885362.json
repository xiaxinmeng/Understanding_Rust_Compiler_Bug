{"sha": "c3e7f18406f1869604b48b03f8a1e39123885362", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNlN2YxODQwNmYxODY5NjA0YjQ4YjAzZjhhMWUzOTEyMzg4NTM2Mg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-10-09T02:30:10Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-10-09T02:30:10Z"}, "message": "acconfig.h: Add _GLIBCXX_USE___CXA_ATEXIT.\n\n\n2004-10-08  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* acconfig.h: Add _GLIBCXX_USE___CXA_ATEXIT.\n\t* acinclude.m4 (GLIBCXX_ENABLE_CXA_ATEXIT): New.\n\t* configure.ac: Call GLIBCXX_ENABLE_CXA_EXIT.\n\t* configure: Regenerate.\n\t* src/mt_allocator.cc (__pool::~__pool): Make conditional on\n\t_GLIBCXX_USE___CXA_ATEXIT macro.\n\t* docs/html/ext/mt_allocator.html: Add note about deallocation.\n\t* testsuite/ext/mt_allocator/deallocate_local-2.cc: Guard checks\n\twith _GLIBCXX_USE___CXA_ATEXIT.\n\t* testsuite/ext/mt_allocator/deallocate_global_thread-3.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_global_thread-1.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_global-4.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_global-2.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_local_thread-3.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_local_thread-1.cc: Same.\n\t* testsuite/ext/mt_allocator/deallocate_local-4.cc: Same.\n\nFrom-SVN: r88809", "tree": {"sha": "8e3e1d2f5f372fc6e36fa64ac8ac0238e33b9d75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e3e1d2f5f372fc6e36fa64ac8ac0238e33b9d75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3e7f18406f1869604b48b03f8a1e39123885362", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3e7f18406f1869604b48b03f8a1e39123885362", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3e7f18406f1869604b48b03f8a1e39123885362", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3e7f18406f1869604b48b03f8a1e39123885362/comments", "author": null, "committer": null, "parents": [{"sha": "a5df984b5fa512505401a4563ccb266289087f79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5df984b5fa512505401a4563ccb266289087f79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5df984b5fa512505401a4563ccb266289087f79"}], "stats": {"total": 118, "additions": 108, "deletions": 10}, "files": [{"sha": "615d83f51d7a1a0901397a9f38bb17bb5d5d348c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c3e7f18406f1869604b48b03f8a1e39123885362", "patch": "@@ -1,3 +1,22 @@\n+2004-10-08  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* acconfig.h: Add _GLIBCXX_USE___CXA_ATEXIT.\n+\t* acinclude.m4 (GLIBCXX_ENABLE_CXA_ATEXIT): New.\n+\t* configure.ac: Call GLIBCXX_ENABLE_CXA_EXIT.\n+\t* configure: Regenerate.\n+\t* src/mt_allocator.cc (__pool::~__pool): Make conditional on\n+\t_GLIBCXX_USE___CXA_ATEXIT macro.\n+\t* docs/html/ext/mt_allocator.html: Add note about deallocation.\n+\t* testsuite/ext/mt_allocator/deallocate_local-2.cc: Guard checks\n+\twith _GLIBCXX_USE___CXA_ATEXIT.\n+\t* testsuite/ext/mt_allocator/deallocate_global_thread-3.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_global_thread-1.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_global-4.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_global-2.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_local_thread-3.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_local_thread-1.cc: Same.\n+\t* testsuite/ext/mt_allocator/deallocate_local-4.cc: Same.\n+\t\n 2004-10-07  Phil Edwards  <phil@codesourcery.com>\n \n \t* testsuite/lib/libstdc++.exp:  Update list of undefined functions."}, {"sha": "6a2ba98887d001cd58e5ace43a5bf515bb025792", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=c3e7f18406f1869604b48b03f8a1e39123885362", "patch": "@@ -28,6 +28,9 @@\n // Define to use concept checking code from the boost libraries.\n #undef _GLIBCXX_CONCEPT_CHECKS\n \n+// Define to use __cxa_atexit.\n+#undef _GLIBCXX_USE___CXA_ATEXIT\n+\n // Define to use symbol versioning in the shared library.\n #undef _GLIBCXX_SYMVER\n "}, {"sha": "f45845a7249a446ef94c28eb2bd8caad5bbda65f", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=c3e7f18406f1869604b48b03f8a1e39123885362", "patch": "@@ -611,6 +611,21 @@ AC_DEFUN([GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING], [\n   fi\n ])\n \n+dnl\n+dnl Check for --enable-__cxa_atexit\n+dnl\n+dnl --enable-__cxa_atexit defines _GLIBCXX_USE___CXA_ATEXIT\n+dnl --disable-__cxa_atexit doesn't define _GLIBCXX_USE___CXA_ATEXIT\n+dnl  +  Usage:  GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING[(DEFAULT)]\n+dnl       Where DEFAULT is either `yes' or `no'.\n+dnl\n+AC_DEFUN([GLIBCXX_ENABLE_CXA_ATEXIT], [\n+  GLIBCXX_ENABLE(__cxa_atexit,$1,,\n+                 [Define if __cxa_atexit is to be used instead of atexit.])\n+  if test $enable___cxa_atexit = yes; then\n+    AC_DEFINE(_GLIBCXX_USE___CXA_ATEXIT)\n+  fi\n+])\n \n dnl\n dnl Does any necessary configuration of the testsuite directory.  Generates"}, {"sha": "be444e501870ccacb97bc51f7ed797f721237992", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=c3e7f18406f1869604b48b03f8a1e39123885362", "patch": "@@ -29,6 +29,9 @@\n // Define to use concept checking code from the boost libraries.\n #undef _GLIBCXX_CONCEPT_CHECKS\n \n+// Define to use __cxa_atexit.\n+#undef _GLIBCXX_USE___CXA_ATEXIT\n+\n // Define to use symbol versioning in the shared library.\n #undef _GLIBCXX_SYMVER\n "}, {"sha": "530efa0c646ef049aff71fc654816e76fbae1a35", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=c3e7f18406f1869604b48b03f8a1e39123885362", "patch": "@@ -856,6 +856,8 @@ Optional Features:\n   --enable-sjlj-exceptions\n                           force use of builtin_setjmp for exceptions\n                           [default=auto]\n+  --enable-__cxa_atexit   Define if __cxa_atexit is to be used instead of\n+                          atexit. [default=no]\n   --enable-libstdcxx-pch  build pre-compiled libstdc++ headers\n                           [default=$is_hosted]\n   --enable-cstdio=PACKAGE use target-specific I/O package\n@@ -4397,7 +4399,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 4400 \"configure\"' > conftest.$ac_ext\n+  echo '#line 4402 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -5018,7 +5020,7 @@ fi;\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 5021 \"configure\"\n+#line 5023 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -5074,6 +5076,29 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n echo \"${ECHO_T}$ac_exception_model_name\" >&6\n \n \n+   # Check whether --enable-__cxa_atexit or --disable-__cxa_atexit was given.\n+if test \"${enable___cxa_atexit+set}\" = set; then\n+  enableval=\"$enable___cxa_atexit\"\n+\n+      case \"$enableval\" in\n+       yes|no) ;;\n+       *) { { echo \"$as_me:$LINENO: error: Argument to enable/disable __cxa_atexit must be yes or no\" >&5\n+echo \"$as_me: error: Argument to enable/disable __cxa_atexit must be yes or no\" >&2;}\n+   { (exit 1); exit 1; }; } ;;\n+      esac\n+\n+else\n+  enable___cxa_atexit=no\n+fi;\n+\n+  if test $enable___cxa_atexit = yes; then\n+    cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_USE___CXA_ATEXIT 1\n+_ACEOF\n+\n+  fi\n+\n+\n   echo \"$as_me:$LINENO: checking for enabled PCH\" >&5\n echo $ECHO_N \"checking for enabled PCH... $ECHO_C\" >&6\n    # Check whether --enable-libstdcxx-pch or --disable-libstdcxx-pch was given."}, {"sha": "9978891ff9b028d3d49af37e2b1aaa952895332f", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=c3e7f18406f1869604b48b03f8a1e39123885362", "patch": "@@ -78,6 +78,7 @@ GLIBCXX_ENABLE_HOSTED\n \n # Check for support bits and g++ features that don't require linking.\n GLIBCXX_ENABLE_SJLJ_EXCEPTIONS\n+GLIBCXX_ENABLE_CXA_ATEXIT([no])\n GLIBCXX_ENABLE_PCH($is_hosted)\n \n # Enable all the variable C++ runtime options.  "}, {"sha": "f2f8348ca25959b7d86e3fa7d3d15ea73db5356d", "filename": "libstdc++-v3/docs/html/ext/mt_allocator.html", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fmt_allocator.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fmt_allocator.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fmt_allocator.html?ref=c3e7f18406f1869604b48b03f8a1e39123885362", "patch": "@@ -265,14 +265,26 @@ <h3 class=\"left\">\n     I.e. _S_bin[ n ].free[ n ] = 0;\n </p>\n <p>\n-  - Initialize the mutex of each bin_record:\n-    The bin_record-&gt;mutex is used to protect the global freelist. This concept\n-    of a global freelist is explained in more detail in the section\n-    \"A multi threaded example\", but basically this mutex is locked whenever \n-    a block of memory is retrieved or returned to the global freelist for this\n-    specific bin. This only occurs when a number of blocks are grabbed from the\n-    global list to a thread specific list or when a thread decides to return \n-    some blocks to the global freelist.\n+  - Initialize the mutex of each bin_record: The bin_record-&gt;mutex\n+    is used to protect the global freelist. This concept of a global\n+    freelist is explained in more detail in the section \"A multi\n+    threaded example\", but basically this mutex is locked whenever a\n+    block of memory is retrieved or returned to the global freelist\n+    for this specific bin. This only occurs when a number of blocks\n+    are grabbed from the global list to a thread specific list or when\n+    a thread decides to return some blocks to the global freelist.\n+</p>\n+\n+<p> Notes about deallocation. On systems with the function\n+<code>__cxa_atexit</code>, the allocator will free all memory\n+allocated before program termination. However, because this relies on\n+the precise and exactly-conforming ordering of static destructors,\n+including those of a static local <code>__pool</code> object, it is\n+not available on systems that don't have the necessary underlying\n+support. On those systems, memory debugging programs like valgrind or\n+purify may notice leaks: sorry about this inconvenience. However, most\n+operating systems actually reclaim this memory at program termination\n+anyway.\n </p>\n \n <h3 class=\"left\">"}, {"sha": "7c3f5a4fa64da305b7d082c7dae9420ffa328684", "filename": "libstdc++-v3/src/mt_allocator.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmt_allocator.cc?ref=c3e7f18406f1869604b48b03f8a1e39123885362", "patch": "@@ -48,6 +48,7 @@ namespace __gnu_cxx\n {\n   __pool<false>::~__pool()\n   {\n+#ifdef _GLIBCXX_USE___CXA_ATEXIT\n     if (_M_init && !_M_options._M_force_new)\n       {\n \tfor (size_t __n = 0; __n < _M_bin_size; ++__n)\n@@ -65,6 +66,7 @@ namespace __gnu_cxx\n \tdelete _M_bin;\n \tdelete _M_binmap;\n       }\n+#endif\n   }\n \n   void\n@@ -174,6 +176,7 @@ namespace __gnu_cxx\n #ifdef __GTHREADS\n   __pool<true>::~__pool()\n   {\n+#ifdef _GLIBCXX_USE___CXA_ATEXIT\n     if (_M_init && !_M_options._M_force_new)\n       {\n \tif (__gthread_active_p())\n@@ -213,6 +216,7 @@ namespace __gnu_cxx\n \tdelete _M_bin;\n \tdelete _M_binmap;\n       }\n+#endif\n   }\n \n   void"}, {"sha": "01baada54708b1cf50b183bef1d9937fc34f0f29", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global-2.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-2.cc?ref=c3e7f18406f1869604b48b03f8a1e39123885362", "patch": "@@ -31,8 +31,10 @@ struct count_check\n   count_check() {}\n   ~count_check()\n   {\n+#ifdef _GLIBCXX_USE___CXA_ATEXIT\n     if (count != 0)\n       throw std::exception();\n+#endif\n   }\n };\n  "}, {"sha": "3d5b96233f5f6692b0c099ba9f2570f6866fec7b", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global-4.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-4.cc?ref=c3e7f18406f1869604b48b03f8a1e39123885362", "patch": "@@ -31,8 +31,10 @@ struct count_check\n   count_check() {}\n   ~count_check()\n   {\n+#ifdef _GLIBCXX_USE___CXA_ATEXIT\n     if (count != 0)\n       throw std::runtime_error(\"count isn't zero\");\n+#endif\n   }\n };\n  "}, {"sha": "3ec3abcd6b673bcd16778e96638aea50202570a9", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global_thread-1.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-1.cc?ref=c3e7f18406f1869604b48b03f8a1e39123885362", "patch": "@@ -31,8 +31,10 @@ struct count_check\n   count_check() {}\n   ~count_check()\n   {\n+#ifdef _GLIBCXX_USE___CXA_ATEXIT\n     if (count != 0)\n       throw std::runtime_error(\"count isn't zero\");\n+#endif\n   }\n };\n  "}, {"sha": "398ef31d39d3c6f3e04c958de6a01f5cded360ff", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global_thread-3.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-3.cc?ref=c3e7f18406f1869604b48b03f8a1e39123885362", "patch": "@@ -31,8 +31,10 @@ struct count_check\n   count_check() {}\n   ~count_check()\n   {\n+#ifdef _GLIBCXX_USE___CXA_ATEXIT\n     if (count != 0)\n       throw std::runtime_error(\"count isn't zero\");\n+#endif\n   }\n };\n  "}, {"sha": "b8e2784f484d82ea3bc4b659d7b0f7490c77efa5", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local-2.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-2.cc?ref=c3e7f18406f1869604b48b03f8a1e39123885362", "patch": "@@ -31,8 +31,10 @@ struct count_check\n   count_check() {}\n   ~count_check()\n   {\n+#ifdef _GLIBCXX_USE___CXA_ATEXIT\n     if (count != 0)\n       throw std::runtime_error(\"count isn't zero\");\n+#endif\n   }\n };\n  "}, {"sha": "1df7fb500cd63abfc91817b3cd289d809c859b30", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local-4.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-4.cc?ref=c3e7f18406f1869604b48b03f8a1e39123885362", "patch": "@@ -31,8 +31,10 @@ struct count_check\n   count_check() {}\n   ~count_check()\n   {\n+#ifdef _GLIBCXX_USE___CXA_ATEXIT\n     if (count != 0)\n       throw std::runtime_error(\"count isn't zero\");\n+#endif\n   }\n };\n  "}, {"sha": "2191264e9424f5dd03f636c85c0df14395f8135d", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local_thread-1.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-1.cc?ref=c3e7f18406f1869604b48b03f8a1e39123885362", "patch": "@@ -31,8 +31,10 @@ struct count_check\n   count_check() {}\n   ~count_check()\n   {\n+#ifdef _GLIBCXX_USE___CXA_ATEXIT\n     if (count != 0)\n       throw std::runtime_error(\"count isn't zero\");\n+#endif\n   }\n };\n  "}, {"sha": "6094a718a0edd3284d5be3262c1644659e2a3c8a", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local_thread-3.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3e7f18406f1869604b48b03f8a1e39123885362/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-3.cc?ref=c3e7f18406f1869604b48b03f8a1e39123885362", "patch": "@@ -31,8 +31,10 @@ struct count_check\n   count_check() {}\n   ~count_check()\n   {\n+#ifdef _GLIBCXX_USE___CXA_ATEXIT\n     if (count != 0)\n       throw std::runtime_error(\"count isn't zero\");\n+#endif\n   }\n };\n  "}]}