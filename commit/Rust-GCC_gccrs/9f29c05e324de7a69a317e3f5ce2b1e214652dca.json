{"sha": "9f29c05e324de7a69a317e3f5ce2b1e214652dca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYyOWMwNWUzMjRkZTdhNjlhMzE3ZTNmNWNlMmIxZTIxNDY1MmRjYQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-11-20T06:43:13Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-11-20T06:43:13Z"}, "message": "re PR fortran/42104 ([F03] runtime segfault with procedure pointer component)\n\n2009-11-20  Paul Thomas  <pault@gcc.gnu.org>\n\t    Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/42104\n\t* trans-expr.c (gfc_conv_procedure_call): If procedure pointer\n\tcomponent call, use the component's 'always_explicit' attr\n\tfor array arguments.\n\n2009-11-20  Paul Thomas  <pault@gcc.gnu.org>\n\t    Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/42104\n\t* gfortran.dg/proc_ptr_comp_23.f90 : New test.\n\n\nCo-Authored-By: Janus Weil <janus@gcc.gnu.org>\n\nFrom-SVN: r154358", "tree": {"sha": "66857d87ffdd09bd92c2983332200a1706be64a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66857d87ffdd09bd92c2983332200a1706be64a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f29c05e324de7a69a317e3f5ce2b1e214652dca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f29c05e324de7a69a317e3f5ce2b1e214652dca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f29c05e324de7a69a317e3f5ce2b1e214652dca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f29c05e324de7a69a317e3f5ce2b1e214652dca/comments", "author": null, "committer": null, "parents": [{"sha": "5cd25f0725e01635bd3f8da6ae91d41670e18a1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cd25f0725e01635bd3f8da6ae91d41670e18a1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cd25f0725e01635bd3f8da6ae91d41670e18a1f"}], "stats": {"total": 92, "additions": 91, "deletions": 1}, "files": [{"sha": "1d28abfebd44f8cde1aa98a2d64b9179256f102c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f29c05e324de7a69a317e3f5ce2b1e214652dca/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f29c05e324de7a69a317e3f5ce2b1e214652dca/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9f29c05e324de7a69a317e3f5ce2b1e214652dca", "patch": "@@ -1,3 +1,11 @@\n+2009-11-20  Paul Thomas  <pault@gcc.gnu.org>\n+\t    Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/42104\n+\t* trans-expr.c (gfc_conv_procedure_call): If procedure pointer\n+\tcomponent call, use the component's 'always_explicit' attr\n+\tfor array arguments.\n+\n 2009-11-19  Janus Weil  <janus@gcc.gnu.org>\n \n \t* trans-expr.c (conv_isocbinding_procedure): New function."}, {"sha": "6646b266a6d09cc11592d6d0d1afbb232c41aedd", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f29c05e324de7a69a317e3f5ce2b1e214652dca/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f29c05e324de7a69a317e3f5ce2b1e214652dca/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=9f29c05e324de7a69a317e3f5ce2b1e214652dca", "patch": "@@ -2979,7 +2979,10 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t      f = (fsym != NULL)\n \t\t  && !(fsym->attr.pointer || fsym->attr.allocatable)\n \t\t  && fsym->as->type != AS_ASSUMED_SHAPE;\n-\t      f = f || !sym->attr.always_explicit;\n+\t      if (comp)\n+\t\tf = f || !comp->attr.always_explicit;\n+\t      else\n+\t\tf = f || !sym->attr.always_explicit;\n \n \t      if (e->expr_type == EXPR_VARIABLE\n \t\t    && is_subref_array (e))"}, {"sha": "fdc14b95b5dfe435a1b0584e34ebf6abac97e8ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f29c05e324de7a69a317e3f5ce2b1e214652dca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f29c05e324de7a69a317e3f5ce2b1e214652dca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f29c05e324de7a69a317e3f5ce2b1e214652dca", "patch": "@@ -1,3 +1,9 @@\n+2009-11-20  Paul Thomas  <pault@gcc.gnu.org>\n+\t    Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/42104\n+\t* gfortran.dg/proc_ptr_comp_23.f90 : New test.\n+\n 2009-11-19  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/42115"}, {"sha": "270d2c4ff4626b03503a105609cf0045c40c331c", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_23.f90", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f29c05e324de7a69a317e3f5ce2b1e214652dca/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_23.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f29c05e324de7a69a317e3f5ce2b1e214652dca/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_23.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_23.f90?ref=9f29c05e324de7a69a317e3f5ce2b1e214652dca", "patch": "@@ -0,0 +1,73 @@\n+! { dg-do run }\n+! Tests the fix for PR42104 in which the call to the procedure pointer\n+! component caused an ICE because the \"always_implicit flag was not used\n+! to force the passing of a descriptor for the array argument.\n+!\n+! Contributed by Martien Hulsen <m.a.hulsen@tue.nl>\n+!\n+module poisson_functions_m\n+\n+  implicit none\n+\n+contains\n+ \n+  function func ( nr, x )\n+    integer, intent(in) :: nr\n+    real, intent(in), dimension(:) :: x\n+    real :: func\n+\n+    real :: pi \n+\n+    pi = 4 * atan(1.)\n+\n+    select case(nr)\n+      case(1)\n+        func = 0\n+      case(2)\n+        func = 1\n+      case(3)\n+        func = 1 + cos(pi*x(1))*cos(pi*x(2))\n+      case default\n+        write(*,'(/a,i0/)') 'Error func: wrong function number: ', nr\n+        stop\n+    end select\n+\n+  end function func \n+\n+end module poisson_functions_m\n+ \n+module element_defs_m\n+\n+  implicit none\n+\n+  abstract interface \n+    function dummyfunc ( nr, x )\n+      integer, intent(in) :: nr\n+      real, intent(in), dimension(:) :: x\n+      real :: dummyfunc\n+    end function dummyfunc\n+  end interface \n+\n+  type function_p\n+    procedure(dummyfunc), nopass, pointer :: p => null()\n+  end type function_p\n+\n+end module element_defs_m\n+\n+program t\n+\n+use poisson_functions_m\n+use element_defs_m\n+\n+procedure(dummyfunc), pointer :: p => null()\n+type(function_p) :: funcp\n+\n+p => func\n+funcp%p => func\n+\n+print *, func(nr=3,x=(/0.1,0.1/))\n+print *, p(nr=3,x=(/0.1,0.1/))\n+print *, funcp%p(nr=3,x=(/0.1,0.1/))\n+\n+end program t\n+! { dg-final { cleanup-modules \"poisson_functions_m element_defs_m\" }}"}]}