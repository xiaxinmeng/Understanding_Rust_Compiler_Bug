{"sha": "48f8d1d48f2c7c2bc724dee979bcf56957f233cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhmOGQxZDQ4ZjJjN2MyYmM3MjRkZWU5NzliY2Y1Njk1N2YyMzNjYg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-13T12:48:57Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-14T08:36:19Z"}, "message": "aarch64: Reimplememnt vmovn/vmovl intrinsics with builtins instead\n\nTurns out __builtin_convertvector is not as good a fit for the widening\nand narrowing intrinsics as I had hoped.\nDuring the veclower phase we lower most of it to bitfield operations and\nhope DCE cleans it back up into\nvector pack/unpack and extend operations. I received reports that in\nmore complex cases GCC fails to do that\nand we're left with many vector extract operations that clutter the\noutput.\n\nI think veclower can be improved on that front, but for GCC 10 I'd like\nto just implement these builtins\nwith a good old RTL builtin rather than inline asm.\n\ngcc/\n\t* config/aarch64/aarch64-simd.md (aarch64_<su>xtl<mode>):\n\tDefine.\n\t(aarch64_xtn<mode>): Likewise.\n\t* config/aarch64/aarch64-simd-builtins.def (sxtl, uxtl, xtn):\n\tDefine\n\tbuiltins.\n\t* config/aarch64/arm_neon.h (vmovl_s8): Reimplement using\n\tbuiltin.\n\t(vmovl_s16): Likewise.\n\t(vmovl_s32): Likewise.\n\t(vmovl_u8): Likewise.\n\t(vmovl_u16): Likewise.\n\t(vmovl_u32): Likewise.\n\t(vmovn_s16): Likewise.\n\t(vmovn_s32): Likewise.\n\t(vmovn_s64): Likewise.\n\t(vmovn_u16): Likewise.\n\t(vmovn_u32): Likewise.\n\t(vmovn_u64): Likewise.", "tree": {"sha": "d1996f8ec847cae706cacb82558ed745f9f8b713", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1996f8ec847cae706cacb82558ed745f9f8b713"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48f8d1d48f2c7c2bc724dee979bcf56957f233cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f8d1d48f2c7c2bc724dee979bcf56957f233cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48f8d1d48f2c7c2bc724dee979bcf56957f233cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f8d1d48f2c7c2bc724dee979bcf56957f233cb/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52cd1cd1b67b10a6d58612bafaded6e8e3a303a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52cd1cd1b67b10a6d58612bafaded6e8e3a303a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52cd1cd1b67b10a6d58612bafaded6e8e3a303a1"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "f56e59cf6721229cf84d76f14def9472bc13ba42", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f8d1d48f2c7c2bc724dee979bcf56957f233cb/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f8d1d48f2c7c2bc724dee979bcf56957f233cb/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=48f8d1d48f2c7c2bc724dee979bcf56957f233cb", "patch": "@@ -171,6 +171,13 @@\n   BUILTIN_VQN (TERNOP, raddhn2, 0, NONE)\n   BUILTIN_VQN (TERNOP, rsubhn2, 0, NONE)\n \n+  /* Implemented by aarch64_<us>xtl<mode>.  */\n+  BUILTIN_VQN (UNOP, sxtl, 0, NONE)\n+  BUILTIN_VQN (UNOPU, uxtl, 0, NONE)\n+\n+  /* Implemented by aarch64_xtn<mode>.  */\n+  BUILTIN_VQN (UNOP, xtn, 0, NONE)\n+\n   BUILTIN_VSQN_HSDI (UNOPUS, sqmovun, 0, ALL)\n   /* Implemented by aarch64_<sur>qmovn<mode>.  */\n   BUILTIN_VSQN_HSDI (UNOP, sqmovn, 0, ALL)"}, {"sha": "4b869ded918fd91ffd41e6ba068239a752b331e5", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f8d1d48f2c7c2bc724dee979bcf56957f233cb/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f8d1d48f2c7c2bc724dee979bcf56957f233cb/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=48f8d1d48f2c7c2bc724dee979bcf56957f233cb", "patch": "@@ -7301,6 +7301,20 @@\n   [(set_attr \"type\" \"neon_shift_imm_long\")]\n )\n \n+(define_expand \"aarch64_<su>xtl<mode>\"\n+  [(set (match_operand:VQN 0 \"register_operand\" \"=w\")\n+\t(ANY_EXTEND:VQN (match_operand:<VNARROWQ> 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD\"\n+  \"\"\n+)\n+\n+(define_expand \"aarch64_xtn<mode>\"\n+  [(set (match_operand:<VNARROWQ> 0 \"register_operand\" \"=w\")\n+\t(truncate:<VNARROWQ> (match_operand:VQN 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD\"\n+  \"\"\n+)\n+\n ;; Truncate a 128-bit integer vector to a 64-bit vector.\n (define_insn \"trunc<mode><Vnarrowq>2\"\n   [(set (match_operand:<VNARROWQ> 0 \"register_operand\" \"=w\")"}, {"sha": "46331ae6f953ba27e39b0d426bc30c5c78af9a06", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f8d1d48f2c7c2bc724dee979bcf56957f233cb/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f8d1d48f2c7c2bc724dee979bcf56957f233cb/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=48f8d1d48f2c7c2bc724dee979bcf56957f233cb", "patch": "@@ -8709,42 +8709,42 @@ __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovl_s8 (int8x8_t __a)\n {\n-  return __builtin_convertvector (__a, int16x8_t);\n+  return __builtin_aarch64_sxtlv8hi (__a);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovl_s16 (int16x4_t __a)\n {\n-  return __builtin_convertvector (__a, int32x4_t);\n+  return __builtin_aarch64_sxtlv4si (__a);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovl_s32 (int32x2_t __a)\n {\n-  return __builtin_convertvector (__a, int64x2_t);\n+  return __builtin_aarch64_sxtlv2di (__a);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovl_u8 (uint8x8_t __a)\n {\n-  return __builtin_convertvector (__a, uint16x8_t);\n+  return __builtin_aarch64_uxtlv8hi_uu (__a);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovl_u16 (uint16x4_t __a)\n {\n-  return __builtin_convertvector (__a, uint32x4_t);\n+  return __builtin_aarch64_uxtlv4si_uu (__a);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovl_u32 (uint32x2_t __a)\n {\n-  return __builtin_convertvector (__a, uint64x2_t);\n+  return __builtin_aarch64_uxtlv2di_uu (__a);\n }\n \n __extension__ extern __inline int8x16_t\n@@ -8796,42 +8796,42 @@ __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_s16 (int16x8_t __a)\n {\n-  return __builtin_convertvector (__a, int8x8_t);\n+  return __builtin_aarch64_xtnv8hi (__a);\n }\n \n __extension__ extern __inline int16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_s32 (int32x4_t __a)\n {\n-  return __builtin_convertvector (__a, int16x4_t);\n+  return __builtin_aarch64_xtnv4si (__a);\n }\n \n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_s64 (int64x2_t __a)\n {\n-  return __builtin_convertvector (__a, int32x2_t);\n+  return __builtin_aarch64_xtnv2di (__a);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_u16 (uint16x8_t __a)\n {\n-  return __builtin_convertvector (__a, uint8x8_t);\n+  return (uint8x8_t)__builtin_aarch64_xtnv8hi ((int16x8_t) __a);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_u32 (uint32x4_t __a)\n {\n-  return __builtin_convertvector (__a, uint16x4_t);\n+  return (uint16x4_t) __builtin_aarch64_xtnv4si ((int32x4_t )__a);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_u64 (uint64x2_t __a)\n {\n-  return __builtin_convertvector (__a, uint32x2_t);\n+  return (uint32x2_t) __builtin_aarch64_xtnv2di ((int64x2_t) __a);\n }\n \n #define vmull_high_lane_s16(a, b, c)                                    \\"}]}