{"sha": "8cb6400cdaea428d965f6a22b39e4b7d2acff880", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNiNjQwMGNkYWVhNDI4ZDk2NWY2YTIyYjM5ZTRiN2QyYWNmZjg4MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-04-12T17:59:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-04-12T17:59:57Z"}, "message": "Makefile.in (insn-emit.o): Depend on $(INTEGRATE_H).\n\ngcc/\n\t* Makefile.in (insn-emit.o): Depend on $(INTEGRATE_H).\n\t* genemit.c (main): Emit #include \"integrate.h\".\n\t* config/mips/mips-protos.h (SYMBOL_HALF): New mips_symbol_type.\n\t(LOADGP_RTP): New mips_loadgp_style.\n\t* config/mips/mips.h: Include config/vxworks-dummy.h.\n\t(TARGET_RTP_PIC): New macro.\n\t(TARGET_USE_GOT): Return true for TARGET_RTP_PIC.\n\t(TARGET_USE_PIC_FN_ADDR_REG): Return true for TARGET_VXWORKS_RTP.\n\t(ASM_OUTPUT_ADDR_DIFF_ELT): Emit function-relative case tables\n\tfor TARGET_RTP_PIC.\n\t* config/mips/vxworks.h (SUBTARGET_ASM_SPEC): Define.  Pass down\n\t-mvxworks-pic when using -mrtp and a PIC option.\n\t* config/mips/mips.c (mips_classify_symbol): Return SYMBOL_GOT_DISP\n\tfor RTP PIC.\n\t(mips_symbolic_constant_p, mips_symbolic_address_p)\n\t(mips_symbol_insns): Handle SYMBOL_HALF.\n\t(override_options): Warn about -G and -mrtp being used together.\n\tInitialize mips_lo_relocs[SYMBOL_HALF].\n\t(mips_current_loadgp_style): Return LOADGP_RTP for RTP PIC.\n\t(mips_emit_loadgp): Handle LOADGP_RTP.\n\t(mips_in_small_data_p): Return false for TARGET_VXWORKS_RTP.\n\t* config/mips/mips.md (loadgp_rtp): New insn and splitter.\n\t(tablejump): Handle function-relative case table entries if\n\tTARGET_RTP_PIC.\n\t* config/mips/predicates.md (symbol_ref_operand): New predicate.\n\nFrom-SVN: r123757", "tree": {"sha": "905585bca2c720af915424497af8aba3029dbcbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/905585bca2c720af915424497af8aba3029dbcbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cb6400cdaea428d965f6a22b39e4b7d2acff880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cb6400cdaea428d965f6a22b39e4b7d2acff880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cb6400cdaea428d965f6a22b39e4b7d2acff880", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cb6400cdaea428d965f6a22b39e4b7d2acff880/comments", "author": null, "committer": null, "parents": [{"sha": "f28d806256a9b8741f42997649561121cff6ba23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f28d806256a9b8741f42997649561121cff6ba23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f28d806256a9b8741f42997649561121cff6ba23"}], "stats": {"total": 141, "additions": 128, "deletions": 13}, "files": [{"sha": "1003b0fb2e2cda6de45d7d0c33fc3b602032720f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6400cdaea428d965f6a22b39e4b7d2acff880/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6400cdaea428d965f6a22b39e4b7d2acff880/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8cb6400cdaea428d965f6a22b39e4b7d2acff880", "patch": "@@ -1,3 +1,31 @@\n+2007-04-12  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* Makefile.in (insn-emit.o): Depend on $(INTEGRATE_H).\n+\t* genemit.c (main): Emit #include \"integrate.h\".\n+\t* config/mips/mips-protos.h (SYMBOL_HALF): New mips_symbol_type.\n+\t(LOADGP_RTP): New mips_loadgp_style.\n+\t* config/mips/mips.h: Include config/vxworks-dummy.h.\n+\t(TARGET_RTP_PIC): New macro.\n+\t(TARGET_USE_GOT): Return true for TARGET_RTP_PIC.\n+\t(TARGET_USE_PIC_FN_ADDR_REG): Return true for TARGET_VXWORKS_RTP.\n+\t(ASM_OUTPUT_ADDR_DIFF_ELT): Emit function-relative case tables\n+\tfor TARGET_RTP_PIC.\n+\t* config/mips/vxworks.h (SUBTARGET_ASM_SPEC): Define.  Pass down\n+\t-mvxworks-pic when using -mrtp and a PIC option.\n+\t* config/mips/mips.c (mips_classify_symbol): Return SYMBOL_GOT_DISP\n+\tfor RTP PIC.\n+\t(mips_symbolic_constant_p, mips_symbolic_address_p)\n+\t(mips_symbol_insns): Handle SYMBOL_HALF.\n+\t(override_options): Warn about -G and -mrtp being used together.\n+\tInitialize mips_lo_relocs[SYMBOL_HALF].\n+\t(mips_current_loadgp_style): Return LOADGP_RTP for RTP PIC.\n+\t(mips_emit_loadgp): Handle LOADGP_RTP.\n+\t(mips_in_small_data_p): Return false for TARGET_VXWORKS_RTP.\n+\t* config/mips/mips.md (loadgp_rtp): New insn and splitter.\n+\t(tablejump): Handle function-relative case table entries if\n+\tTARGET_RTP_PIC.\n+\t* config/mips/predicates.md (symbol_ref_operand): New predicate.\n+\n 2007-04-12  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/mips/mips.md (load_call<mode>): Allow any general register."}, {"sha": "9d9146ea66f49112344cfdd85ec699adb25999d6", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6400cdaea428d965f6a22b39e4b7d2acff880/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6400cdaea428d965f6a22b39e4b7d2acff880/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=8cb6400cdaea428d965f6a22b39e4b7d2acff880", "patch": "@@ -2847,7 +2847,7 @@ insn-automata.o : insn-automata.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n insn-emit.o : insn-emit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t\\\n   $(RTL_H) $(EXPR_H) $(REAL_H) output.h insn-config.h $(OPTABS_H)\t\\\n   reload.h $(RECOG_H) toplev.h $(FUNCTION_H) $(FLAGS_H) hard-reg-set.h\t\\\n-  $(RESOURCE_H) $(TM_P_H) $(BASIC_BLOCK_H) tm-constrs.h\n+  $(RESOURCE_H) $(TM_P_H) $(BASIC_BLOCK_H) $(INTEGRATE_H) tm-constrs.h\n insn-extract.o : insn-extract.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n   $(TM_H) $(RTL_H) toplev.h insn-config.h $(RECOG_H)\n insn-modes.o : insn-modes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t$(TM_H) \\"}, {"sha": "94fe227d190c05348166421631c66eabb91601d0", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6400cdaea428d965f6a22b39e4b7d2acff880/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6400cdaea428d965f6a22b39e4b7d2acff880/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=8cb6400cdaea428d965f6a22b39e4b7d2acff880", "patch": "@@ -82,7 +82,11 @@ Boston, MA 02110-1301, USA.  */\n \n    SYMBOL_64_LOW\n        For a 64-bit symbolic address X, this is the value of\n-       (%hi(X) << 16) + %lo(X).  */\n+       (%hi(X) << 16) + %lo(X).\n+\n+   SYMBOL_HALF\n+       An UNSPEC wrapper around any kind of address.  It represents the\n+       low 16 bits of that address.  */\n enum mips_symbol_type {\n   SYMBOL_GENERAL,\n   SYMBOL_SMALL_DATA,\n@@ -101,9 +105,10 @@ enum mips_symbol_type {\n   SYMBOL_TPREL,\n   SYMBOL_64_HIGH,\n   SYMBOL_64_MID,\n-  SYMBOL_64_LOW\n+  SYMBOL_64_LOW,\n+  SYMBOL_HALF\n };\n-#define NUM_SYMBOL_TYPES (SYMBOL_64_LOW + 1)\n+#define NUM_SYMBOL_TYPES (SYMBOL_HALF + 1)\n \n /* Identifiers a style of $gp initialization sequence.\n \n@@ -119,12 +124,16 @@ enum mips_symbol_type {\n \tby .cpsetup).\n \n    LOADGP_ABSOLUTE\n-\tThe GNU absolute sequence, as generated by loadgp_absolute.  */\n+\tThe GNU absolute sequence, as generated by loadgp_absolute.\n+\n+   LOADGP_RTP\n+\tThe VxWorks RTP PIC sequence, as generated by loadgp_rtp.  */\n enum mips_loadgp_style {\n   LOADGP_NONE,\n   LOADGP_OLDABI,\n   LOADGP_NEWABI,\n-  LOADGP_ABSOLUTE\n+  LOADGP_ABSOLUTE,\n+  LOADGP_RTP\n };\n \n extern bool mips_symbolic_constant_p (rtx, enum mips_symbol_type *);"}, {"sha": "b67210934ae2a15d9e470b5464acbb2413b9c417", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6400cdaea428d965f6a22b39e4b7d2acff880/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6400cdaea428d965f6a22b39e4b7d2acff880/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=8cb6400cdaea428d965f6a22b39e4b7d2acff880", "patch": "@@ -1245,6 +1245,9 @@ mips_symbol_binds_local_p (rtx x)\n static enum mips_symbol_type\n mips_classify_symbol (rtx x)\n {\n+  if (TARGET_RTP_PIC)\n+    return SYMBOL_GOT_DISP;\n+\n   if (GET_CODE (x) == LABEL_REF)\n     {\n       if (TARGET_MIPS16)\n@@ -1385,6 +1388,7 @@ mips_symbolic_constant_p (rtx x, enum mips_symbol_type *symbol_type)\n     case SYMBOL_TPREL:\n     case SYMBOL_GOTTPREL:\n     case SYMBOL_TLS:\n+    case SYMBOL_HALF:\n       return false;\n     }\n   gcc_unreachable ();\n@@ -1484,6 +1488,7 @@ mips_symbolic_address_p (enum mips_symbol_type symbol_type,\n     case SYMBOL_64_HIGH:\n     case SYMBOL_64_MID:\n     case SYMBOL_64_LOW:\n+    case SYMBOL_HALF:\n       return true;\n     }\n   gcc_unreachable ();\n@@ -1630,6 +1635,7 @@ mips_symbol_insns (enum mips_symbol_type type)\n       return (ABI_HAS_64BIT_SYMBOLS ? 6 : 2);\n \n     case SYMBOL_SMALL_DATA:\n+    case SYMBOL_HALF:\n       return 1;\n \n     case SYMBOL_CONSTANT_POOL:\n@@ -4886,6 +4892,9 @@ override_options (void)\n \twarning (0, \"%<-G%> is incompatible with %<-mabicalls%>\");\n     }\n \n+  if (TARGET_VXWORKS_RTP && mips_section_threshold > 0)\n+    warning (0, \"-G and -mrtp are incompatible\");\n+\n   /* mips_split_addresses is a half-way house between explicit\n      relocations and the traditional assembler macros.  It can\n      split absolute 32-bit symbolic constants into a high/lo_sum\n@@ -5192,6 +5201,8 @@ override_options (void)\n   mips_hi_relocs[SYMBOL_TPREL] = \"%tprel_hi(\";\n   mips_lo_relocs[SYMBOL_TPREL] = \"%tprel_lo(\";\n \n+  mips_lo_relocs[SYMBOL_HALF] = \"%half(\";\n+\n   /* We don't have a thread pointer access instruction on MIPS16, or\n      appropriate TLS relocations.  */\n   if (TARGET_MIPS16)\n@@ -6573,6 +6584,9 @@ mips_current_loadgp_style (void)\n   if (!TARGET_USE_GOT || cfun->machine->global_pointer == 0)\n     return LOADGP_NONE;\n \n+  if (TARGET_RTP_PIC)\n+    return LOADGP_RTP;\n+\n   if (TARGET_ABSOLUTE_ABICALLS)\n     return LOADGP_ABSOLUTE;\n \n@@ -6589,7 +6603,7 @@ static GTY(()) rtx mips_gnu_local_gp;\n static void\n mips_emit_loadgp (void)\n {\n-  rtx addr, offset, incoming_address;\n+  rtx addr, offset, incoming_address, base, index;\n \n   switch (mips_current_loadgp_style ())\n     {\n@@ -6611,6 +6625,14 @@ mips_emit_loadgp (void)\n \temit_insn (gen_loadgp_blockage ());\n       break;\n \n+    case LOADGP_RTP:\n+      base = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (VXWORKS_GOTT_BASE));\n+      index = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (VXWORKS_GOTT_INDEX));\n+      emit_insn (gen_loadgp_rtp (base, index));\n+      if (!TARGET_EXPLICIT_RELOCS)\n+\temit_insn (gen_loadgp_blockage ());\n+      break;\n+\n     default:\n       break;\n     }\n@@ -7313,9 +7335,9 @@ mips_in_small_data_p (tree decl)\n   if (TREE_CODE (decl) == STRING_CST || TREE_CODE (decl) == FUNCTION_DECL)\n     return false;\n \n-  /* We don't yet generate small-data references for -mabicalls.  See related\n-     -G handling in override_options.  */\n-  if (TARGET_ABICALLS)\n+  /* We don't yet generate small-data references for -mabicalls or\n+     VxWorks RTP code.  See the related -G handling in override_options.  */\n+  if (TARGET_ABICALLS || TARGET_VXWORKS_RTP)\n     return false;\n \n   if (TREE_CODE (decl) == VAR_DECL && DECL_SECTION_NAME (decl) != 0)"}, {"sha": "6cf42a7249f8a29185bd9d8c8a2bc85f04965ed8", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6400cdaea428d965f6a22b39e4b7d2acff880/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6400cdaea428d965f6a22b39e4b7d2acff880/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=8cb6400cdaea428d965f6a22b39e4b7d2acff880", "patch": "@@ -24,6 +24,8 @@ the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n Boston, MA 02110-1301, USA.  */\n \n \n+#include \"config/vxworks-dummy.h\"\n+\n /* MIPS external variables defined in mips.c.  */\n \n /* Which processor to schedule for.  Since there is no difference between\n@@ -143,6 +145,9 @@ extern const struct mips_rtx_cost_data *mips_cost;\n \f\n /* Run-time compilation parameters selecting different hardware subsets.  */\n \n+/* True if we are generating position-independent VxWorks RTP code.  */\n+#define TARGET_RTP_PIC (TARGET_VXWORKS_RTP && flag_pic)\n+\n /* True if the call patterns should be split into a jalr followed by\n    an instruction to restore $gp.  It is only safe to split the load\n    from the call when every use of $gp is explicit.  */\n@@ -178,16 +183,17 @@ extern const struct mips_rtx_cost_data *mips_cost;\n   (!TARGET_MIPS16 && (!TARGET_USE_GOT || TARGET_EXPLICIT_RELOCS))\n \n /* True if we need to use a global offset table to access some symbols.  */\n-#define TARGET_USE_GOT TARGET_ABICALLS\n+#define TARGET_USE_GOT (TARGET_ABICALLS || TARGET_RTP_PIC)\n \n /* True if TARGET_USE_GOT and if $gp is a call-clobbered register.  */\n #define TARGET_CALL_CLOBBERED_GP (TARGET_ABICALLS && TARGET_OLDABI)\n \n /* True if TARGET_USE_GOT and if $gp is a call-saved register.  */\n #define TARGET_CALL_SAVED_GP (TARGET_USE_GOT && !TARGET_CALL_CLOBBERED_GP)\n \n-/* True if indirect calls must use register class PIC_FN_ADDR_REG.  */\n-#define TARGET_USE_PIC_FN_ADDR_REG TARGET_ABICALLS\n+/* True if indirect calls must use register class PIC_FN_ADDR_REG.\n+   This is true for both the PIC and non-PIC VxWorks RTP modes.  */\n+#define TARGET_USE_PIC_FN_ADDR_REG (TARGET_ABICALLS || TARGET_VXWORKS_RTP)\n \n /* True if .gpword or .gpdword should be used for switch tables.\n \n@@ -2578,6 +2584,16 @@ do {\t\t\t\t\t\t\t\t\t\\\n     fprintf (STREAM, \"\\t%s\\t%sL%d\\n\",\t\t\t\t\t\\\n \t     ptr_mode == DImode ? \".gpdword\" : \".gpword\",\t\t\\\n \t     LOCAL_LABEL_PREFIX, VALUE);\t\t\t\t\\\n+  else if (TARGET_RTP_PIC)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      /* Make the entry relative to the start of the function.  */\t\\\n+      rtx fnsym = XEXP (DECL_RTL (current_function_decl), 0);\t\t\\\n+      fprintf (STREAM, \"\\t%s\\t%sL%d-\",\t\t\t\t\t\\\n+\t       Pmode == DImode ? \".dword\" : \".word\",\t\t\t\\\n+\t       LOCAL_LABEL_PREFIX, VALUE);\t\t\t\t\\\n+      assemble_name (STREAM, XSTR (fnsym, 0));\t\t\t\t\\\n+      fprintf (STREAM, \"\\n\");\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     fprintf (STREAM, \"\\t%s\\t%sL%d\\n\",\t\t\t\t\t\\\n \t     ptr_mode == DImode ? \".dword\" : \".word\",\t\t\t\\"}, {"sha": "2178481808d1d6c98b751a69fa259d21e1d96123", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6400cdaea428d965f6a22b39e4b7d2acff880/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6400cdaea428d965f6a22b39e4b7d2acff880/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=8cb6400cdaea428d965f6a22b39e4b7d2acff880", "patch": "@@ -4125,6 +4125,30 @@\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"0\")])\n \n+;; Initialize $gp for RTP PIC.  Operand 0 is the __GOTT_BASE__ symbol\n+;; and operand 1 is the __GOTT_INDEX__ symbol.\n+(define_insn \"loadgp_rtp\"\n+  [(unspec_volatile [(match_operand 0 \"symbol_ref_operand\")\n+\t\t     (match_operand 1 \"symbol_ref_operand\")] UNSPEC_LOADGP)]\n+  \"mips_current_loadgp_style () == LOADGP_RTP\"\n+  \"#\"\n+  [(set_attr \"length\" \"12\")])\n+\n+(define_split\n+  [(unspec_volatile [(match_operand:P 0 \"symbol_ref_operand\")\n+\t\t     (match_operand:P 1 \"symbol_ref_operand\")] UNSPEC_LOADGP)]\n+  \"mips_current_loadgp_style () == LOADGP_RTP\"\n+  [(set (match_dup 2) (high:P (match_dup 3)))\n+   (set (match_dup 2) (unspec:P [(match_dup 2)\n+\t\t\t\t (match_dup 3)] UNSPEC_LOAD_GOT))\n+   (set (match_dup 2) (unspec:P [(match_dup 2)\n+\t\t\t\t (match_dup 4)] UNSPEC_LOAD_GOT))]\n+{\n+  operands[2] = pic_offset_table_rtx;\n+  operands[3] = mips_unspec_address (operands[0], SYMBOL_GENERAL);\n+  operands[4] = mips_unspec_address (operands[1], SYMBOL_HALF);\n+})\n+\n ;; Emit a .cprestore directive, which normally expands to a single store\n ;; instruction.  Note that we continue to use .cprestore for explicit reloc\n ;; code so that jals inside inline asms will work correctly.\n@@ -4931,6 +4955,15 @@\n   else if (TARGET_GPWORD)\n     operands[0] = expand_binop (Pmode, add_optab, operands[0],\n \t\t\t\tpic_offset_table_rtx, 0, 0, OPTAB_WIDEN);\n+  else if (TARGET_RTP_PIC)\n+    {\n+      /* When generating RTP PIC, we use case table entries that are relative\n+\t to the start of the function.  Add the function's address to the\n+\t value we loaded.  */\n+      rtx start = get_hard_reg_initial_val (Pmode, PIC_FUNCTION_ADDR_REGNUM);\n+      operands[0] = expand_binop (ptr_mode, add_optab, operands[0],\n+\t\t\t\t  start, 0, 0, OPTAB_WIDEN);\n+    }\n \n   if (Pmode == SImode)\n     emit_jump_insn (gen_tablejumpsi (operands[0], operands[1]));"}, {"sha": "16035c8cb2b1949404c3234f995a5d3917172c88", "filename": "gcc/config/mips/predicates.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6400cdaea428d965f6a22b39e4b7d2acff880/gcc%2Fconfig%2Fmips%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6400cdaea428d965f6a22b39e4b7d2acff880/gcc%2Fconfig%2Fmips%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fpredicates.md?ref=8cb6400cdaea428d965f6a22b39e4b7d2acff880", "patch": "@@ -251,6 +251,9 @@\n   return mips_symbolic_constant_p (op, &type) && type == SYMBOL_GOT_PAGE_OFST;\n })\n \n+(define_predicate \"symbol_ref_operand\"\n+  (match_code \"symbol_ref\"))\n+\n (define_predicate \"stack_operand\"\n   (and (match_code \"mem\")\n        (match_test \"mips_stack_address_p (XEXP (op, 0), GET_MODE (op))\")))"}, {"sha": "5b6b026e9c4579e5626ffcab7cb2a3e42464a75f", "filename": "gcc/config/mips/vxworks.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6400cdaea428d965f6a22b39e4b7d2acff880/gcc%2Fconfig%2Fmips%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6400cdaea428d965f6a22b39e4b7d2acff880/gcc%2Fconfig%2Fmips%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fvxworks.h?ref=8cb6400cdaea428d965f6a22b39e4b7d2acff880", "patch": "@@ -86,3 +86,6 @@ VXWORKS_LINK_SPEC\n /* No _mcount profiling on VxWorks.  */\n #undef FUNCTION_PROFILER\n #define FUNCTION_PROFILER VXWORKS_FUNCTION_PROFILER\n+\n+#undef SUBTARGET_ASM_SPEC\n+#define SUBTARGET_ASM_SPEC \"%{mrtp:%{fPIC|fpic:-mvxworks-pic}}\""}, {"sha": "64fb312f609cc85964a0df8f5e6322159e157727", "filename": "gcc/genemit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6400cdaea428d965f6a22b39e4b7d2acff880/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6400cdaea428d965f6a22b39e4b7d2acff880/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=8cb6400cdaea428d965f6a22b39e4b7d2acff880", "patch": "@@ -857,6 +857,7 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"#include \\\"tm-constrs.h\\\"\\n\");\n   printf (\"#include \\\"ggc.h\\\"\\n\\n\");\n   printf (\"#include \\\"basic-block.h\\\"\\n\\n\");\n+  printf (\"#include \\\"integrate.h\\\"\\n\\n\");\n   printf (\"#define FAIL return (end_sequence (), _val)\\n\");\n   printf (\"#define DONE return (_val = get_insns (), end_sequence (), _val)\\n\\n\");\n "}]}