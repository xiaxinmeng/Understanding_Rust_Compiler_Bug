{"sha": "f767bd6ef95d99b443f02cdb6f388c457cc105ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc2N2JkNmVmOTVkOTliNDQzZjAyY2RiNmYzODhjNDU3Y2MxMDVlZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-09T19:06:16Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-09T19:06:16Z"}, "message": "Initial revision\n\nFrom-SVN: r7009", "tree": {"sha": "efc6a98b771f84c6be299979c25a289653002b6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efc6a98b771f84c6be299979c25a289653002b6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f767bd6ef95d99b443f02cdb6f388c457cc105ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f767bd6ef95d99b443f02cdb6f388c457cc105ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f767bd6ef95d99b443f02cdb6f388c457cc105ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f767bd6ef95d99b443f02cdb6f388c457cc105ee/comments", "author": null, "committer": null, "parents": [{"sha": "c5df463e3b500fcee1b350d64b7405298f571bd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5df463e3b500fcee1b350d64b7405298f571bd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5df463e3b500fcee1b350d64b7405298f571bd4"}], "stats": {"total": 167, "additions": 167, "deletions": 0}, "files": [{"sha": "686cee029ab64e76edb990f288082199d0d3e1dd", "filename": "gcc/config/m68k/next21.h", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f767bd6ef95d99b443f02cdb6f388c457cc105ee/gcc%2Fconfig%2Fm68k%2Fnext21.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f767bd6ef95d99b443f02cdb6f388c457cc105ee/gcc%2Fconfig%2Fm68k%2Fnext21.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnext21.h?ref=f767bd6ef95d99b443f02cdb6f388c457cc105ee", "patch": "@@ -0,0 +1,103 @@\n+/* Target definitions for GNU compiler for mc680x0 running NeXTSTEP 2.1\n+   Copyright (C) 1989, 90, 91, 92, 93, 1994 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* Changed for NeXTStep2.1, Ch. Kranz, 2/94, 3/94 */\n+\n+#include \"m68k/next.h\"\n+#include \"nextstep21.h\"\n+\n+/* for #include <mach.h> in libgcc2.c */\n+#define NeXTStep21\t\n+\n+#undef\tASM_OUTPUT_DOUBLE\n+#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n+ do { if (REAL_VALUE_ISINF (VALUE))\t\t\t\t\t\\\n+        {\t\t\t\t\t\t\t\t\\\n+          if (REAL_VALUE_NEGATIVE (VALUE))\t\t\t\t\\\n+            fprintf (FILE, \"#0r-99e999\");\t\t\t\t\\\n+          else\t\t\t\t\t\t\t\t\\\n+            fprintf (FILE, \"#0r99e999\");\t\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+        { char dstr[30];\t\t\t\t\t\t\\\n+          REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\t\\\n+          fprintf (FILE, \"\\t.double 0r%s\\n\", dstr);\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n+    } while (0)\n+\n+/* This is how to output an assembler line defining a `float' constant.  */\n+#undef\tASM_OUTPUT_FLOAT\n+#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\t\\\n+ do { if (REAL_VALUE_ISINF (VALUE))\t\t\t\t\t\\\n+        {\t\t\t\t\t\t\t\t\\\n+          if (REAL_VALUE_NEGATIVE (VALUE))\t\t\t\t\\\n+            fprintf (FILE, \"\\t.single 0r-99e999\\n\");\t\t\t\\\n+          else\t\t\t\t\t\t\t\t\\\n+            fprintf (FILE, \"\\t.single 0r99e999\\n\");\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+        { char dstr[30];\t\t\t\t\t\t\\\n+          REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\t\\\n+          fprintf (FILE, \"\\t.single 0r%s\\n\", dstr);\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n+    } while (0)\n+\n+/* called from m68k.c line 1881 */\n+#undef\tASM_OUTPUT_FLOAT_OPERAND\n+#define ASM_OUTPUT_FLOAT_OPERAND(CODE,FILE,VALUE)\t\t\\\n+  do{ \t\t\t\t\t\t\t\t\\\n+      if (CODE != 'f')\t\t\t\t\t\t\\\n+        {\t\t\t\t\t\t\t\\\n+          long l;\t\t\t\t\t\t\\\n+          REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n+          if (sizeof (int) == sizeof (long))\t\t\t\\\n+            asm_fprintf ((FILE), \"%I0x%x\", l);\t\t\t\\\n+          else\t\t\t\t\t\t\t\\\n+            asm_fprintf ((FILE), \"%I0x%lx\", l);\t\t\t\\\n+        }\t\t\t\t\t\t\t\\\n+      else if (REAL_VALUE_ISINF (VALUE))\t\t\t\\\n+        {\t\t\t\t\t\t\t\\\n+          if (REAL_VALUE_NEGATIVE (VALUE))\t\t\t\\\n+            fprintf (FILE, \"#0r-99e999\");\t\t\t\\\n+          else\t\t\t\t\t\t\t\\\n+            fprintf (FILE, \"#0r99e999\");\t\t\t\\\n+        }\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+        { char dstr[30];\t\t\t\t\t\\\n+          REAL_VALUE_TO_DECIMAL ((VALUE), \"%.9g\", dstr);\t\\\n+          fprintf (FILE, \"#0r%s\", dstr);\t\t\t\\\n+        }\t\t\t\t\t\t\t\\\n+    } while (0)\n+\n+#undef\tASM_OUTPUT_DOUBLE_OPERAND\n+#define ASM_OUTPUT_DOUBLE_OPERAND(FILE,VALUE)\t\t\t\t\\\n+ do { if (REAL_VALUE_ISINF (VALUE))\t\t\t\t\t\\\n+        {\t\t\t\t\t\t\t\t\\\n+          if (REAL_VALUE_NEGATIVE (VALUE))\t\t\t\t\\\n+            fprintf (FILE, \"#0r-99e999\");\t\t\t\t\\\n+          else\t\t\t\t\t\t\t\t\\\n+            fprintf (FILE, \"#0r99e999\");\t\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+       { char dstr[30];\t\t\t\t\t\t\t\\\n+          REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20g\", dstr);\t\t\\\n+          fprintf (FILE, \"#0r%s\", dstr);\t\t\t\t\\\n+       }\t\t\t\t\t\t\t\t\\\n+    } while (0)\n+"}, {"sha": "14229a5ce68bd25b16dde6990ef684cc4d738c34", "filename": "gcc/config/nextstep21.h", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f767bd6ef95d99b443f02cdb6f388c457cc105ee/gcc%2Fconfig%2Fnextstep21.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f767bd6ef95d99b443f02cdb6f388c457cc105ee/gcc%2Fconfig%2Fnextstep21.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep21.h?ref=f767bd6ef95d99b443f02cdb6f388c457cc105ee", "patch": "@@ -0,0 +1,64 @@\n+/* nextstep.h -- operating system specific defines to be used when\n+   targeting GCC for NeXTSTEP.\n+   Copyright (C) 1989, 1990, 1991, 1992, 1993 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+\n+/* changed for NeXTStep 2.1, Ch. Kranz, 2/94, 3/94 */\n+#include \"nextstep.h\"\n+\n+/* set flag_gnu_linker=0, use collect2 for linking */\n+#undef USE_COLLECT2\n+#define USE_COLLECT2\n+\n+/* use this until a newer gdb for NeXTStep21 is availible */\n+#define DEFAULT_GDB_EXTENSIONS 0\n+\n+/* we need the call to __main to start all global destructors and constructors\n+   correctly, so undef INIT_SECTION_ASM_OP, (see libgcc2.c line 1965) \n+   and define INVOKE_main */\n+#undef\tINIT_SECTION_ASM_OP\n+#define INVOKE__main\n+\n+/* We call the global destructors, constructors from __main */\n+#undef\tASM_OUTPUT_CONSTRUCTOR\n+#undef\tASM_OUTPUT_DESTRUCTOR\n+\n+#undef ASM_FILE_END\n+#define ASM_FILE_END(FILE)\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    extern char *language_string;\t\t\t\t\\\n+      if (strcmp (language_string, \"GNU C++\") == 0)\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tASM_OUTPUT_ALIGN (FILE, 1);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  } while (0) \n+/* deleted: destructor_section ();\t\t\t\t\\ */\n+/* deleted: constructor_section ();\t\t\t\t\\ */\n+\n+/* Ensure correct alignment of bss data.  */\n+/* ASM_OUTPUT_ALIGNED_LOCAL not needed */\n+/* need ASM_OUTPUT_LOCAL instead for old NeXT-as */\n+/* look in varasm.c, line 1062 and 1476 */\n+#undef\tASM_OUTPUT_ALIGNED_LOCAL\n+#undef ASM_OUTPUT_LOCAL\n+#define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n+( fputs (\".lcomm \", (FILE)),\t\t\t\\\n+  assemble_name ((FILE), (NAME)),\t\t\\\n+  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+"}]}