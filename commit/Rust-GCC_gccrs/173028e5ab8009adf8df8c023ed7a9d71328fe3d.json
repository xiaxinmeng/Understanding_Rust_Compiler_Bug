{"sha": "173028e5ab8009adf8df8c023ed7a9d71328fe3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTczMDI4ZTVhYjgwMDlhZGY4ZGY4YzAyM2VkN2E5ZDcxMzI4ZmUzZA==", "commit": {"author": {"name": "Andrew Cagney", "email": "ac131313@redhat.com", "date": "2002-03-26T15:36:37Z"}, "committer": {"name": "Andrew Cagney", "email": "cagney@gcc.gnu.org", "date": "2002-03-26T15:36:37Z"}, "message": "Add -Wswitch-enum.  Document.\n\nFix PR c/5044.\n\nFrom-SVN: r51386", "tree": {"sha": "94846cf8b81e58eaebeff467b95dc20837930bef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94846cf8b81e58eaebeff467b95dc20837930bef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/173028e5ab8009adf8df8c023ed7a9d71328fe3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/173028e5ab8009adf8df8c023ed7a9d71328fe3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/173028e5ab8009adf8df8c023ed7a9d71328fe3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/173028e5ab8009adf8df8c023ed7a9d71328fe3d/comments", "author": null, "committer": null, "parents": [{"sha": "e14365a7382302adc4144d493bbbb28275e467fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14365a7382302adc4144d493bbbb28275e467fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e14365a7382302adc4144d493bbbb28275e467fc"}], "stats": {"total": 119, "additions": 113, "deletions": 6}, "files": [{"sha": "3af3e3b3a64cc433ea1f10491b0dda6c8e90c032", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173028e5ab8009adf8df8c023ed7a9d71328fe3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173028e5ab8009adf8df8c023ed7a9d71328fe3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=173028e5ab8009adf8df8c023ed7a9d71328fe3d", "patch": "@@ -1,3 +1,15 @@\n+2002-03-26  Andrew Cagney  <ac131313@redhat.com>\n+\n+\t* doc/invoke.texi (Option Summary): Mention -Wswitch-enum.\n+\t(Warning Options): Document -Wswitch-enum.\n+\t* toplev.c (W_options): Add -Wswitch-enum.  Update comment on\n+\t-Wswitch.\n+\t(warn_switch_enum): Define variables.\n+\t* flags.h (warn_switch_enum): Declare variables.\n+\t* stmt.c (expand_end_case_type): When warn_switch_enum /\n+\t-Wswitch-enum, perform switch checks.\n+\tFix PR c/5044.\n+\t\n 2002-03-26  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.md (reload_mulsi3, reload_mulsi_compare0, reload_muladdsi)"}, {"sha": "8f51f2959826081406180b9515f3327269d31749", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173028e5ab8009adf8df8c023ed7a9d71328fe3d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173028e5ab8009adf8df8c023ed7a9d71328fe3d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=173028e5ab8009adf8df8c023ed7a9d71328fe3d", "patch": "@@ -228,8 +228,8 @@ in the following sections.\n -Wno-import  -Wpacked  -Wpadded @gol\n -Wparentheses  -Wpointer-arith  -Wredundant-decls @gol\n -Wreturn-type  -Wsequence-point  -Wshadow @gol\n--Wsign-compare  -Wswitch  -Wswitch-default  -Wsystem-headers @gol\n--Wtrigraphs  -Wundef  -Wuninitialized @gol\n+-Wsign-compare  -Wswitch  -Wswitch-default -Wswitch-enum @gol\n+-Wsystem-headers -Wtrigraphs  -Wundef  -Wuninitialized @gol\n -Wunknown-pragmas  -Wunreachable-code @gol\n -Wunused  -Wunused-function  -Wunused-label  -Wunused-parameter @gol\n -Wunused-value  -Wunused-variable  -Wwrite-strings}\n@@ -2039,6 +2039,13 @@ provoke warnings when this option is used.\n Warn whenever a @code{switch} statement does not have a @code{default}\n case.\n \n+@item -Wswitch-enum\n+@opindex Wswitch-enum\n+Warn whenever a @code{switch} statement has an index of enumeral type\n+and lacks a @code{case} for one or more of the named codes of that\n+enumeration.  @code{case} labels outside the enumeration range also\n+provoke warnings when this option is used.\n+\n @item -Wtrigraphs\n @opindex Wtrigraphs\n Warn if any trigraphs are encountered that might change the meaning of"}, {"sha": "68c8ade99eed0d5f679d70630c4928dbf05d0381", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173028e5ab8009adf8df8c023ed7a9d71328fe3d/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173028e5ab8009adf8df8c023ed7a9d71328fe3d/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=173028e5ab8009adf8df8c023ed7a9d71328fe3d", "patch": "@@ -1,3 +1,8 @@\n+Tue Mar 26 10:30:05 2002  Andrew Cagney  <ac131313@redhat.com>\n+\n+\t* invoke.texi (Warning Options): Mention -Wswitch-enum.\n+\tFix PR c/5044.\n+\n Tue Mar 26 07:30:51 2002  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* com.c (LANG_HOOKS_MARK_TREE): Redefine."}, {"sha": "479ff2f2e897f26d6b384dbc7e1b65b9a1cb7100", "filename": "gcc/f/invoke.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173028e5ab8009adf8df8c023ed7a9d71328fe3d/gcc%2Ff%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173028e5ab8009adf8df8c023ed7a9d71328fe3d/gcc%2Ff%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Finvoke.texi?ref=173028e5ab8009adf8df8c023ed7a9d71328fe3d", "patch": "@@ -1359,6 +1359,9 @@ Some of these have no effect when compiling programs written in Fortran:\n @cindex -Wswitch-default option\n @cindex options, -Wswitch-default\n @item -Wswitch-default\n+@cindex -Wswitch-enum option\n+@cindex options, -Wswitch-enum\n+@item -Wswitch-enum\n @cindex -Wtraditional option\n @cindex options, -Wtraditional\n @item -Wtraditional"}, {"sha": "b9fca23d29cc62603f0be88648bdf64a8cc6d91d", "filename": "gcc/flags.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173028e5ab8009adf8df8c023ed7a9d71328fe3d/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173028e5ab8009adf8df8c023ed7a9d71328fe3d/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=173028e5ab8009adf8df8c023ed7a9d71328fe3d", "patch": "@@ -135,6 +135,11 @@ extern int warn_switch;\n \n extern int warn_switch_default;\n \n+/* Warn if a switch on an enum fails to have a case for every enum\n+   value (regardless of the presence or otherwise of a default case).  */\n+\n+extern int warn_switch_enum;\n+\n /* Nonzero means warn about function definitions that default the return type\n    or that use a null return and have a return-type other than void.  */\n "}, {"sha": "fcda52d53249d4664c4e23726567f254e182f0ce", "filename": "gcc/stmt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173028e5ab8009adf8df8c023ed7a9d71328fe3d/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173028e5ab8009adf8df8c023ed7a9d71328fe3d/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=173028e5ab8009adf8df8c023ed7a9d71328fe3d", "patch": "@@ -5280,10 +5280,10 @@ expand_end_case_type (orig_index, orig_type)\n     {\n       /* If the switch expression was an enumerated type, check that\n \t exactly all enumeration literals are covered by the cases.\n-\t The check is made -Wswitch was specified and there is no\n-\t default case.  */\n-\n-      if ((warn_switch && !thiscase->data.case_stmt.default_label)\n+\t The check is made when -Wswitch was specified and there is no\n+\t default case, or when -Wswitch-enum was specified.  */\n+      if (((warn_switch && !thiscase->data.case_stmt.default_label)\n+\t   || warn_switch_enum)\n \t  && TREE_CODE (orig_type) == ENUMERAL_TYPE\n \t  && TREE_CODE (index_expr) != INTEGER_CST)\n \tcheck_for_full_enumeration_handling (orig_type);"}, {"sha": "684ee9d8ec0d3247bf4fea41076aceca906fceb7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173028e5ab8009adf8df8c023ed7a9d71328fe3d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173028e5ab8009adf8df8c023ed7a9d71328fe3d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=173028e5ab8009adf8df8c023ed7a9d71328fe3d", "patch": "@@ -1,3 +1,8 @@\n+2002-03-26  Andrew Cagney  <ac131313@redhat.com>\n+\n+\t* gcc.dg/Wswitch-enum.c: New test.\n+\tFix PR c/5044.\n+\n 2002-03-26  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.c-torture/execute/20020307-2.c (main): Pass a variable sized"}, {"sha": "00e4b552f834aeb2a8cf61d337e7ec3aafa6d453", "filename": "gcc/testsuite/gcc.dg/Wswitch-enum.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173028e5ab8009adf8df8c023ed7a9d71328fe3d/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173028e5ab8009adf8df8c023ed7a9d71328fe3d/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum.c?ref=173028e5ab8009adf8df8c023ed7a9d71328fe3d", "patch": "@@ -0,0 +1,63 @@\n+/* PR c/5044 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wswitch-enum\" } */\n+\n+enum e { e1, e2 };\n+\n+int\n+foo (int i, int j, enum e ei, enum e ej, enum e ek, enum e el,\n+     enum e em, enum e en, enum e eo, enum e ep)\n+{\n+  switch (i)\n+    {\n+    case 1: return 1;\n+    case 2: return 2;\n+    }\n+  switch (j)\n+    {\n+    case 3: return 4;\n+    case 4: return 3;\n+    default: break;\n+    }\n+  switch (ei)\n+    { /* { dg-warning \"enumeration value `e1' not handled in switch\" \"enum e1\" } */\n+    } /* { dg-warning \"enumeration value `e2' not handled in switch\" \"enum e2\" { target *-*-* } 23 } */\n+  switch (ej)\n+    { /* { dg-warning \"enumeration value `e1' not handled in switch\" \"enum e1\" { target *-*-* } 28 } */\n+    default: break;\n+    } /* { dg-warning \"enumeration value `e2' not handled in switch\" \"enum e2\" } */\n+  switch (ek)\n+    {\n+    case e1: return 1;\n+    } /* { dg-warning \"enumeration value `e2' not handled in switch\" \"enum e2\" } */\n+  switch (el)\n+    {\n+    case e1: return 1;\n+    default: break;\n+    }  /* { dg-warning \"enumeration value `e2' not handled in switch\" \"enum e2\" } */\n+  switch (em)\n+    {\n+    case e1: return 1;\n+    case e2: return 2;\n+    }\n+  switch (en)\n+    {\n+    case e1: return 1;\n+    case e2: return 2;\n+    default: break;\n+    }\n+  switch (eo)\n+    {\n+    case e1: return 1;\n+    case e2: return 2;\n+    case 3: return 3;\n+    } /* { dg-warning \"case value `3' not in enumerated type `e'\" \"excess 3\" } */\n+  switch (ep)\n+    {\n+    case e1: return 1;\n+    case e2: return 2;\n+    case 3: return 3;\n+    default: break;\n+    } /* { dg-warning \"case value `3' not in enumerated type `e'\" \"excess 3\" } */\n+  return 0;\n+}"}, {"sha": "7268b5aa787480c54bd43ac5199d44a308c3c3b9", "filename": "gcc/toplev.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173028e5ab8009adf8df8c023ed7a9d71328fe3d/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173028e5ab8009adf8df8c023ed7a9d71328fe3d/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=173028e5ab8009adf8df8c023ed7a9d71328fe3d", "patch": "@@ -1401,6 +1401,11 @@ int warn_switch;\n \n int warn_switch_default;\n \n+/* Warn if a switch on an enum fails to have a case for every enum\n+   value (regardless of the presence or otherwise of a default case).  */\n+\n+int warn_switch_enum;\n+\n /* Nonzero means warn about function definitions that default the return type\n    or that use a null return and have a return-type other than void.  */\n \n@@ -1473,6 +1478,8 @@ static const lang_independent_options W_options[] =\n    N_(\"Warn about enumerated switches, with no default, missing a case\") },\n   {\"switch-default\", &warn_switch_default, 1,\n    N_(\"Warn about enumerated switches missing a default case\") },\n+  {\"switch-enum\", &warn_switch_enum, 1,\n+   N_(\"Warn about all enumerated switches missing a specific case\") },\n   {\"aggregate-return\", &warn_aggregate_return, 1,\n    N_(\"Warn about returning structures, unions or arrays\") },\n   {\"cast-align\", &warn_cast_align, 1,"}]}