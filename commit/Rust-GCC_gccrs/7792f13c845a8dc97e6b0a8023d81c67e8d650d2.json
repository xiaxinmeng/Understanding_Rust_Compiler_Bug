{"sha": "7792f13c845a8dc97e6b0a8023d81c67e8d650d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc5MmYxM2M4NDVhOGRjOTdlNmIwYTgwMjNkODFjNjdlOGQ2NTBkMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-06-21T17:03:58Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-06-21T17:03:58Z"}, "message": "cfgrtl.c (fixup_reorder_chain): Do not emit NOPs in DECL_IGNORED_P functions.\n\n\t* cfgrtl.c (fixup_reorder_chain): Do not emit NOPs in DECL_IGNORED_P\n\tfunctions.\n\t(rtl_merge_blocks): Likewise.  Do not emit a NOP if the location of\n\tthe edge can be forwarded.\n\t(cfg_layout_merge_blocks): Likewise.\n\nFrom-SVN: r261856", "tree": {"sha": "1d15d6a55f847cb610cc2b68f62fcd4598119be3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d15d6a55f847cb610cc2b68f62fcd4598119be3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7792f13c845a8dc97e6b0a8023d81c67e8d650d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7792f13c845a8dc97e6b0a8023d81c67e8d650d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7792f13c845a8dc97e6b0a8023d81c67e8d650d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7792f13c845a8dc97e6b0a8023d81c67e8d650d2/comments", "author": null, "committer": null, "parents": [{"sha": "56b97603ec286907d09f0c38322931c04f4b78e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b97603ec286907d09f0c38322931c04f4b78e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b97603ec286907d09f0c38322931c04f4b78e5"}], "stats": {"total": 50, "additions": 33, "deletions": 17}, "files": [{"sha": "902f8df8b58e5c5f49051f7ad8f909458e0b75d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7792f13c845a8dc97e6b0a8023d81c67e8d650d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7792f13c845a8dc97e6b0a8023d81c67e8d650d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7792f13c845a8dc97e6b0a8023d81c67e8d650d2", "patch": "@@ -1,3 +1,11 @@\n+2018-06-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* cfgrtl.c (fixup_reorder_chain): Do not emit NOPs in DECL_IGNORED_P\n+\tfunctions.\n+\t(rtl_merge_blocks): Likewise.  Do not emit a NOP if the location of\n+\tthe edge can be forwarded.\n+\t(cfg_layout_merge_blocks): Likewise.\n+\n 2018-06-21  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* except.c (finish_eh_generation): Commit edge insertions only after"}, {"sha": "3b1931daeba540ab616b2f18ddea9cb636b4970c", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7792f13c845a8dc97e6b0a8023d81c67e8d650d2/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7792f13c845a8dc97e6b0a8023d81c67e8d650d2/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=7792f13c845a8dc97e6b0a8023d81c67e8d650d2", "patch": "@@ -813,10 +813,14 @@ emit_nop_for_unique_locus_between (basic_block a, basic_block b)\n static void\n rtl_merge_blocks (basic_block a, basic_block b)\n {\n+  /* If B is a forwarder block whose outgoing edge has no location, we'll\n+     propagate the locus of the edge between A and B onto it.  */\n+  const bool forward_edge_locus\n+    = (b->flags & BB_FORWARDER_BLOCK) != 0\n+      && LOCATION_LOCUS (EDGE_SUCC (b, 0)->goto_locus) == UNKNOWN_LOCATION;\n   rtx_insn *b_head = BB_HEAD (b), *b_end = BB_END (b), *a_end = BB_END (a);\n   rtx_insn *del_first = NULL, *del_last = NULL;\n   rtx_insn *b_debug_start = b_end, *b_debug_end = b_end;\n-  bool forwarder_p = (b->flags & BB_FORWARDER_BLOCK) != 0;\n   int b_empty = 0;\n \n   if (dump_file)\n@@ -887,9 +891,11 @@ rtl_merge_blocks (basic_block a, basic_block b)\n   BB_HEAD (b) = b_empty ? NULL : b_head;\n   delete_insn_chain (del_first, del_last, true);\n \n-  /* When not optimizing and the edge is the only place in RTL which holds\n-     some unique locus, emit a nop with that locus in between.  */\n-  if (!optimize)\n+  /* If not optimizing, preserve the locus of the single edge between\n+     blocks A and B if necessary by emitting a nop.  */\n+  if (!optimize\n+      && !forward_edge_locus\n+      && !DECL_IGNORED_P (current_function_decl))\n     {\n       emit_nop_for_unique_locus_between (a, b);\n       a_end = BB_END (a);\n@@ -918,9 +924,7 @@ rtl_merge_blocks (basic_block a, basic_block b)\n \n   df_bb_delete (b->index);\n \n-  /* If B was a forwarder block, propagate the locus on the edge.  */\n-  if (forwarder_p\n-      && LOCATION_LOCUS (EDGE_SUCC (b, 0)->goto_locus) == UNKNOWN_LOCATION)\n+  if (forward_edge_locus)\n     EDGE_SUCC (b, 0)->goto_locus = EDGE_SUCC (a, 0)->goto_locus;\n \n   if (dump_file)\n@@ -3916,9 +3920,9 @@ fixup_reorder_chain (void)\n \tforce_nonfallthru (e);\n     }\n \n-  /* Ensure goto_locus from edges has some instructions with that locus\n-     in RTL.  */\n-  if (!optimize)\n+  /* Ensure goto_locus from edges has some instructions with that locus in RTL\n+     when not optimizing.  */\n+  if (!optimize && !DECL_IGNORED_P (current_function_decl))\n     FOR_EACH_BB_FN (bb, cfun)\n       {\n         edge e;\n@@ -4605,7 +4609,11 @@ cfg_layout_can_merge_blocks_p (basic_block a, basic_block b)\n static void\n cfg_layout_merge_blocks (basic_block a, basic_block b)\n {\n-  bool forwarder_p = (b->flags & BB_FORWARDER_BLOCK) != 0;\n+  /* If B is a forwarder block whose outgoing edge has no location, we'll\n+     propagate the locus of the edge between A and B onto it.  */\n+  const bool forward_edge_locus\n+    = (b->flags & BB_FORWARDER_BLOCK) != 0\n+      && LOCATION_LOCUS (EDGE_SUCC (b, 0)->goto_locus) == UNKNOWN_LOCATION;\n   rtx_insn *insn;\n \n   gcc_checking_assert (cfg_layout_can_merge_blocks_p (a, b));\n@@ -4626,9 +4634,11 @@ cfg_layout_merge_blocks (basic_block a, basic_block b)\n     try_redirect_by_replacing_jump (EDGE_SUCC (a, 0), b, true);\n   gcc_assert (!JUMP_P (BB_END (a)));\n \n-  /* When not optimizing and the edge is the only place in RTL which holds\n-     some unique locus, emit a nop with that locus in between.  */\n-  if (!optimize)\n+  /* If not optimizing, preserve the locus of the single edge between\n+     blocks A and B if necessary by emitting a nop.  */\n+  if (!optimize\n+      && !forward_edge_locus\n+      && !DECL_IGNORED_P (current_function_decl))\n     emit_nop_for_unique_locus_between (a, b);\n \n   /* Move things from b->footer after a->footer.  */\n@@ -4695,9 +4705,7 @@ cfg_layout_merge_blocks (basic_block a, basic_block b)\n \n   df_bb_delete (b->index);\n \n-  /* If B was a forwarder block, propagate the locus on the edge.  */\n-  if (forwarder_p\n-      && LOCATION_LOCUS (EDGE_SUCC (b, 0)->goto_locus) == UNKNOWN_LOCATION)\n+  if (forward_edge_locus)\n     EDGE_SUCC (b, 0)->goto_locus = EDGE_SUCC (a, 0)->goto_locus;\n \n   if (dump_file)"}]}