{"sha": "45a75fd3d31265e43aa3ce7a5e851083d534b00b", "node_id": "C_kwDOANBUbNoAKDQ1YTc1ZmQzZDMxMjY1ZTQzYWEzY2U3YTVlODUxMDgzZDUzNGIwMGI", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-01T02:26:41Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-01T02:26:41Z"}, "message": "analyzer: fix ICE on bind/connect with a constant fd [PR107928]\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/107928\n\t* sm-fd.cc (fd_state_machine::on_bind): Handle m_constant_fd in\n\tthe \"success\" outcome.\n\t(fd_state_machine::on_connect): Likewise.\n\t* sm-fd.dot: Add \"constant_fd\" state and its transitions.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/107928\n\t* gcc.dg/analyzer/fd-bind-pr107928.c: New test.\n\t* gcc.dg/analyzer/fd-connect-pr107928.c: New test.\n\t* gcc.dg/analyzer/fd-stream-socket-active-open.c\n\t(test_active_open_from_connect_constant): New, adapted from\n\ttest_active_open_from_connect.\n\t* gcc.dg/analyzer/fd-stream-socket-passive-open.c\n\t(test_passive_open_from_bind_constant): New, adapted from\n\ttest_passive_open_from_bind.\n\t(test_passive_open_from_listen_constant): New, adapted from\n\ttest_passive_open_from_listen.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "022f97d866b6572a14df3c63f6690870cd13c399", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/022f97d866b6572a14df3c63f6690870cd13c399"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45a75fd3d31265e43aa3ce7a5e851083d534b00b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45a75fd3d31265e43aa3ce7a5e851083d534b00b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45a75fd3d31265e43aa3ce7a5e851083d534b00b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45a75fd3d31265e43aa3ce7a5e851083d534b00b/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d68cba5eb20442f8075b8f92d1b20a00022852f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d68cba5eb20442f8075b8f92d1b20a00022852f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d68cba5eb20442f8075b8f92d1b20a00022852f"}], "stats": {"total": 161, "additions": 159, "deletions": 2}, "files": [{"sha": "799847cb8e865cc5a610e92fbc9ad80e6622d309", "filename": "gcc/analyzer/sm-fd.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a75fd3d31265e43aa3ce7a5e851083d534b00b/gcc%2Fanalyzer%2Fsm-fd.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a75fd3d31265e43aa3ce7a5e851083d534b00b/gcc%2Fanalyzer%2Fsm-fd.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-fd.cc?ref=45a75fd3d31265e43aa3ce7a5e851083d534b00b", "patch": "@@ -1861,7 +1861,8 @@ fd_state_machine::on_bind (const call_details &cd,\n \tnext_state = m_bound_datagram_socket;\n       else if (old_state == m_new_unknown_socket)\n \tnext_state = m_bound_unknown_socket;\n-      else if (old_state == m_start)\n+      else if (old_state == m_start\n+\t       || old_state == m_constant_fd)\n \tnext_state = m_bound_unknown_socket;\n       else if (old_state == m_stop)\n \tnext_state = m_stop;\n@@ -2116,7 +2117,8 @@ fd_state_machine::on_connect (const call_details &cd,\n \tnext_state = m_new_datagram_socket;\n       else if (old_state == m_new_unknown_socket)\n \tnext_state = m_stop;\n-      else if (old_state == m_start)\n+      else if (old_state == m_start\n+\t       || old_state == m_constant_fd)\n \tnext_state = m_stop;\n       else if (old_state == m_stop)\n \tnext_state = m_stop;"}, {"sha": "d7676b1f77927ebe7dd781e36dc6c9c91fac111c", "filename": "gcc/analyzer/sm-fd.dot", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a75fd3d31265e43aa3ce7a5e851083d534b00b/gcc%2Fanalyzer%2Fsm-fd.dot", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a75fd3d31265e43aa3ce7a5e851083d534b00b/gcc%2Fanalyzer%2Fsm-fd.dot", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-fd.dot?ref=45a75fd3d31265e43aa3ce7a5e851083d534b00b", "patch": "@@ -27,6 +27,9 @@ digraph \"fd\" {\n   /* Start state.  */\n   start;\n \n+  /* State for a constant file descriptor (>= 0).  */\n+  constant_fd;\n+\n   /* States representing a file descriptor that hasn't yet been\n     checked for validity after opening, for three different\n     access modes.  */\n@@ -129,6 +132,7 @@ digraph \"fd\" {\n \n   /* On \"bind\".  */\n   start -> bound_unknown_socket [label=\"when 'bind(X, ...)' succeeds\"];\n+  constant_fd -> bound_unknown_socket [label=\"when 'bind(X, ...)' succeeds\"];\n   new_stream_socket -> bound_stream_socket [label=\"when 'bind(X, ...)' succeeds\"];\n   new_datagram_socket -> bound_datagram_socket [label=\"when 'bind(X, ...)' succeeds\"];\n   new_unknown_socket -> bound_unknown_socket [label=\"when 'bind(X, ...)' succeeds\"];\n@@ -140,12 +144,14 @@ digraph \"fd\" {\n \n   /* On \"accept\".  */\n   start -> connected_stream_socket [label=\"when 'accept(OTHER, ...)' succeeds on a listening_stream_socket\"];\n+  constant_fd -> connected_stream_socket [label=\"when 'accept(OTHER, ...)' succeeds on a listening_stream_socket\"];\n \n   /* On \"connect\".  */\n   new_stream_socket -> connected_stream_socket [label=\"when 'connect(X, ...)' succeeds\"];\n   new_datagram_socket -> new_datagram_socket [label=\"when 'connect(X, ...)' succeeds\"];\n   new_unknown_socket -> stop [label=\"when 'connect(X, ...)' succeeds\"];\n   start -> stop [label=\"when 'connect(X, ...)' succeeds\"];\n+  constant_fd -> stop [label=\"when 'connect(X, ...)' succeeds\"];\n \n   /* on_condition.  */\n   unchecked_read_write -> valid_read_write [label=\"on 'X >= 0'\"];"}, {"sha": "acc1a1df8e04a66594916b09adc83ff306f451ef", "filename": "gcc/testsuite/gcc.dg/analyzer/fd-bind-pr107928.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a75fd3d31265e43aa3ce7a5e851083d534b00b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-bind-pr107928.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a75fd3d31265e43aa3ce7a5e851083d534b00b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-bind-pr107928.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-bind-pr107928.c?ref=45a75fd3d31265e43aa3ce7a5e851083d534b00b", "patch": "@@ -0,0 +1,10 @@\n+struct sa {};\n+\n+int\n+bind (int, struct sa *, int);\n+\n+int\n+foo (struct sa sa)\n+{\n+  return bind (1, &sa, sizeof sa);\n+}"}, {"sha": "f3bdc87c210a7154778557611bfbe3e84b194497", "filename": "gcc/testsuite/gcc.dg/analyzer/fd-connect-pr107928.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a75fd3d31265e43aa3ce7a5e851083d534b00b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-connect-pr107928.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a75fd3d31265e43aa3ce7a5e851083d534b00b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-connect-pr107928.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-connect-pr107928.c?ref=45a75fd3d31265e43aa3ce7a5e851083d534b00b", "patch": "@@ -0,0 +1,10 @@\n+struct sa {};\n+\n+int\n+connect (int, struct sa *, int);\n+\n+int\n+foo (struct sa sa)\n+{\n+  return connect (1, &sa, sizeof sa);\n+}"}, {"sha": "89ea82e59c9baf63045b57f0a2d385243ebab01a", "filename": "gcc/testsuite/gcc.dg/analyzer/fd-stream-socket-active-open.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a75fd3d31265e43aa3ce7a5e851083d534b00b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-stream-socket-active-open.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a75fd3d31265e43aa3ce7a5e851083d534b00b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-stream-socket-active-open.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-stream-socket-active-open.c?ref=45a75fd3d31265e43aa3ce7a5e851083d534b00b", "patch": "@@ -74,3 +74,34 @@ void test_active_open_from_connect (int fd, const char *sockname, void *buf)\n   close (fd);\n   __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-stop'\" } */\n }\n+\n+void test_active_open_from_connect_constant (const char *sockname, void *buf)\n+{\n+  const int fd = 42;\n+  __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-constant'\" } */\n+\n+  struct sockaddr_un addr;\n+  memset (&addr, 0, sizeof (addr));\n+  addr.sun_family = AF_UNIX;\n+  strncpy (addr.sun_path, sockname, sizeof(addr.sun_path) - 1);\n+\n+  errno = 0;\n+  if (connect (fd, (struct sockaddr *)&addr, sizeof (addr)) == -1)\n+    {\n+      __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-constant'\" } */\n+      __analyzer_eval (errno > 0); /* { dg-warning \"TRUE\" } */\n+      close (fd);\n+      __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-closed'\" } */\n+      return;\n+    }\n+\n+  __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-stop'\" } */\n+  __analyzer_eval (errno == 0); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (fd >= 0); /* { dg-warning \"TRUE\" } */\n+\n+  write (fd, \"hello\", 6);\n+  read (fd, buf, 100);\n+\n+  close (fd);\n+  __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-stop'\" } */\n+}"}, {"sha": "8af52904d7e6d84edb0463b7cadc4245071e2eed", "filename": "gcc/testsuite/gcc.dg/analyzer/fd-stream-socket-passive-open.c", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a75fd3d31265e43aa3ce7a5e851083d534b00b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-stream-socket-passive-open.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a75fd3d31265e43aa3ce7a5e851083d534b00b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-stream-socket-passive-open.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-stream-socket-passive-open.c?ref=45a75fd3d31265e43aa3ce7a5e851083d534b00b", "patch": "@@ -129,6 +129,62 @@ void test_passive_open_from_bind (int fd, const char *sockname, void *buf)\n   __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-closed'\" } */\n }\n \n+void test_passive_open_from_bind_constant (const char *sockname, void *buf)\n+{\n+  const int fd = 42;\n+  struct sockaddr_un addr;\n+  int afd;\n+  __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-constant'\" } */\n+  memset (&addr, 0, sizeof (addr));\n+  addr.sun_family = AF_UNIX;\n+  strncpy (addr.sun_path, sockname, sizeof(addr.sun_path) - 1);\n+  errno = 0;\n+  if (bind (fd, (struct sockaddr *)&addr, sizeof (addr)) == -1)\n+    {\n+      __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-constant'\" } */\n+      __analyzer_eval (errno > 0); /* { dg-warning \"TRUE\" } */\n+      close (fd);\n+      __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-closed'\" } */\n+      return;\n+    }\n+  __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-bound-unknown-socket'\" } */\n+  __analyzer_eval (errno == 0); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (fd >= 0); /* { dg-warning \"TRUE\" } */\n+  if (listen (fd, 5) == -1)\n+    {\n+      __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-bound-unknown-socket'\" } */\n+      __analyzer_eval (errno > 0); /* { dg-warning \"TRUE\" } */\n+      close (fd);\n+      __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-closed'\" } */\n+      return;\n+    }\n+  __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-listening-stream-socket'\" } */\n+  __analyzer_eval (errno == 0); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (fd >= 0); /* { dg-warning \"TRUE\" } */\n+  afd = accept (fd, NULL, NULL);\n+  if (afd == -1)\n+    {\n+      __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-listening-stream-socket'\" } */\n+      __analyzer_eval (errno > 0); /* { dg-warning \"TRUE\" } */\n+      close (fd);\n+      __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-closed'\" } */\n+      return;\n+    }\n+  __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-listening-stream-socket'\" } */\n+  __analyzer_dump_state (\"file-descriptor\", afd); /* { dg-warning \"state: 'fd-connected-stream-socket'\" } */\n+  __analyzer_eval (errno == 0); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (fd >= 0); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (afd >= 0); /* { dg-warning \"TRUE\" } */\n+\n+  write (afd, \"hello\", 6);  \n+  read (afd, buf, 100);\n+\n+  close (afd);\n+  close (fd);\n+  __analyzer_dump_state (\"file-descriptor\", afd); /* { dg-warning \"state: 'fd-closed'\" } */\n+  __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-closed'\" } */\n+}\n+\n void test_passive_open_from_listen (int fd, void *buf)\n {\n   int afd;\n@@ -169,6 +225,48 @@ void test_passive_open_from_listen (int fd, void *buf)\n   __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-closed'\" } */\n }\n \n+\n+void test_passive_open_from_listen_constant (void *buf)\n+{\n+  const int fd = 42;\n+  int afd;\n+  errno = 0;\n+  __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-constant'\" } */\n+  if (listen (fd, 5) == -1)\n+    {\n+      __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-constant'\" } */\n+      __analyzer_eval (errno > 0); /* { dg-warning \"TRUE\" } */\n+      close (fd);\n+      __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-closed'\" } */\n+      return;\n+    }\n+  __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-listening-stream-socket'\" } */\n+  __analyzer_eval (errno == 0); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (fd >= 0); /* { dg-warning \"TRUE\" } */\n+  afd = accept (fd, NULL, NULL);\n+  if (afd == -1)\n+    {\n+      __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-listening-stream-socket'\" } */\n+      __analyzer_eval (errno > 0); /* { dg-warning \"TRUE\" } */\n+      close (fd);\n+      __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-closed'\" } */\n+      return;\n+    }\n+  __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-listening-stream-socket'\" } */\n+  __analyzer_dump_state (\"file-descriptor\", afd); /* { dg-warning \"state: 'fd-connected-stream-socket'\" } */\n+  __analyzer_eval (errno == 0); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (fd >= 0); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (afd >= 0); /* { dg-warning \"TRUE\" } */\n+\n+  write (afd, \"hello\", 6);\n+  read (afd, buf, 100);\n+\n+  close (afd);\n+  close (fd);\n+  __analyzer_dump_state (\"file-descriptor\", afd); /* { dg-warning \"state: 'fd-closed'\" } */\n+  __analyzer_dump_state (\"file-descriptor\", fd); /* { dg-warning \"state: 'fd-closed'\" } */\n+}\n+\n void test_passive_open_from_accept (int fd, void *buf)\n {\n   int afd;"}]}