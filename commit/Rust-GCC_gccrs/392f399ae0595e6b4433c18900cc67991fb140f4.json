{"sha": "392f399ae0595e6b4433c18900cc67991fb140f4", "node_id": "C_kwDOANBUbNoAKDM5MmYzOTlhZTA1OTVlNmI0NDMzYzE4OTAwY2M2Nzk5MWZiMTQwZjQ", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2023-03-01T05:17:48Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2023-03-01T05:17:48Z"}, "message": "rs6000: Allow powerpc64 to be unset for implicit 64 bit [PR108240]\n\nBefore r13-4894, if 64 bit is explicitly specified, option\npowerpc64 is explicitly enabled too; while if 64 bit is\nimplicitly enabled and there is no explicit setting for\noption powerpc64, option powerpc64 is eventually enabled\nor not would rely on the default value of the used cpu.\nIt's initially set as the setting for 64 bit, but later if\nthe used cpu doesn't have powerpc64 supported by default,\nit gets cleared.\n\nTo keep it consistent with before (also the relevant error/\nwarning messages), this patch is to allow that powerpc64\ncan be unset if 64 bit is enabled implicitly, and only stop\nit from being unset if 64 bit is enabled explicitly.\n\nNote that since the behaviors are different for implicit\nand explicit 64 bit, I failed to construct one solid test\ncase since it becomes fragile once RUNTESTFLAGS specifying\n-m64 explicitly.\n\n\tPR target/108240\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000.cc (rs6000_option_override_internal): Allow\n\timplicit powerpc64 setting to be unset if 64 bit is enabled implicitly.", "tree": {"sha": "22b09321cfeb5b2ce4721d272f2d7a57d5e27a27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22b09321cfeb5b2ce4721d272f2d7a57d5e27a27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/392f399ae0595e6b4433c18900cc67991fb140f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392f399ae0595e6b4433c18900cc67991fb140f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/392f399ae0595e6b4433c18900cc67991fb140f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/392f399ae0595e6b4433c18900cc67991fb140f4/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6622f7e8b896071cc554774171353cc82a4a3a5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6622f7e8b896071cc554774171353cc82a4a3a5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6622f7e8b896071cc554774171353cc82a4a3a5f"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "8e0b0d022db2f63b70fcc95776308558115c98f7", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/392f399ae0595e6b4433c18900cc67991fb140f4/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/392f399ae0595e6b4433c18900cc67991fb140f4/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=392f399ae0595e6b4433c18900cc67991fb140f4", "patch": "@@ -3662,14 +3662,17 @@ rs6000_option_override_internal (bool global_init_p)\n \n   /* Without option powerpc64 specified explicitly, we need to ensure\n      powerpc64 always enabled for 64 bit here, otherwise some following\n-     checks can use unexpected TARGET_POWERPC64 value.  Meanwhile, we\n-     need to ensure set_masks doesn't have OPTION_MASK_POWERPC64 on,\n-     otherwise later processing can clear it.  */\n+     checks can use unexpected TARGET_POWERPC64 value.  */\n   if (!(rs6000_isa_flags_explicit & OPTION_MASK_POWERPC64)\n       && TARGET_64BIT)\n     {\n       rs6000_isa_flags |= OPTION_MASK_POWERPC64;\n-      set_masks &= ~OPTION_MASK_POWERPC64;\n+      /* Need to stop powerpc64 from being unset in later processing,\n+\t so clear it in set_masks.  But as PR108240 shows, to keep it\n+\t consistent with before, we want to make this only if 64 bit\n+\t is enabled explicitly.  This is a hack, revisit this later.  */\n+      if (rs6000_isa_flags_explicit & OPTION_MASK_64BIT)\n+\tset_masks &= ~OPTION_MASK_POWERPC64;\n     }\n \n   /* Process the -mcpu=<xxx> and -mtune=<xxx> argument.  If the user changed"}]}