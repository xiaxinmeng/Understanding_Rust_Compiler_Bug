{"sha": "22a812674cef168628bcf4760ef8faba4bb4cdb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJhODEyNjc0Y2VmMTY4NjI4YmNmNDc2MGVmOGZhYmE0YmI0Y2RiMA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2008-04-24T13:24:11Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2008-04-24T13:24:11Z"}, "message": "trans.c (Attribute_to_gnu): Length\n\n2008-04-24  Olivier Hainque  <hainque@adacore.com>\n\n        ada/\n        * trans.c (Attribute_to_gnu) <case Attr_Length>: Length\n        * computation\n        doesn't require signed arithmetic anymore.\n\n        testsuite/\n        * gnat.dg/concat_length.adb: New test.\n\nFrom-SVN: r134627", "tree": {"sha": "d4a267737cd34ccd9e86c61ac0f728f30d7635cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4a267737cd34ccd9e86c61ac0f728f30d7635cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22a812674cef168628bcf4760ef8faba4bb4cdb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22a812674cef168628bcf4760ef8faba4bb4cdb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22a812674cef168628bcf4760ef8faba4bb4cdb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22a812674cef168628bcf4760ef8faba4bb4cdb0/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e80d7580e746c0d984bf35968b97b7b88f328e00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e80d7580e746c0d984bf35968b97b7b88f328e00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e80d7580e746c0d984bf35968b97b7b88f328e00"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "a29ffde444815ee7534c6cb4cb6793414b2188c4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a812674cef168628bcf4760ef8faba4bb4cdb0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a812674cef168628bcf4760ef8faba4bb4cdb0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=22a812674cef168628bcf4760ef8faba4bb4cdb0", "patch": "@@ -1,3 +1,8 @@\n+2008-04-24  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* trans.c (Attribute_to_gnu) <case Attr_Length>: Length computation\n+\tdoesn't require signed arithmetic anymore.\n+\n 2008-04-23  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* trans.c (Attribute_to_gnu): Don't set TREE_INVARIANT."}, {"sha": "07bdc69a4e4a0c317ea31e08d85dd3f831dc1c47", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a812674cef168628bcf4760ef8faba4bb4cdb0/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a812674cef168628bcf4760ef8faba4bb4cdb0/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=22a812674cef168628bcf4760ef8faba4bb4cdb0", "patch": "@@ -1234,9 +1234,16 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t      }\n \t    else\n \t      {\n-\t\ttree gnu_compute_type\n-\t\t  = signed_or_unsigned_type_for\n-\t\t      (0, get_base_type (gnu_result_type));\n+\t\t/* We used to compute the length as max (hb - lb + 1, 0),\n+\t\t   which could overflow for some cases of empty arrays, e.g.\n+\t\t   when lb == index_type'first.  We now compute the length as\n+\t\t   (hb < lb) ? 0 : hb - lb + 1, which would only overflow in\n+\t\t   much rarer cases, for extremely large arrays we expect\n+\t\t   never to encounter in practice.  In addition, the former\n+\t\t   computation required the use of potentially constraining\n+\t\t   signed arithmetic while the latter doesn't.  */\n+\t\t\n+\t\ttree gnu_compute_type = get_base_type (gnu_result_type);\n \n \t\ttree index_type\n \t\t  = TYPE_INDEX_TYPE (TYPE_DOMAIN (gnu_type));\n@@ -1245,14 +1252,6 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t\ttree hb\n \t\t  = convert (gnu_compute_type, TYPE_MAX_VALUE (index_type));\n \t\t\n-\t\t/* We used to compute the length as max (hb - lb + 1, 0),\n-\t\t   which could overflow for some cases of empty arrays, e.g.\n-\t\t   when lb == index_type'first.\n-\n-\t\t   We now compute it as (hb < lb) ? 0 : hb - lb + 1, which\n-\t\t   could overflow as well, but only for extremely large arrays\n-\t\t   which we expect never to encounter in practice.  */\n-\n \t\tgnu_result\n \t\t  = build3\n \t\t    (COND_EXPR, gnu_compute_type,"}, {"sha": "38e76fef8e65cfd3c13dd79b3f5bd56abcbceeb0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a812674cef168628bcf4760ef8faba4bb4cdb0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a812674cef168628bcf4760ef8faba4bb4cdb0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=22a812674cef168628bcf4760ef8faba4bb4cdb0", "patch": "@@ -1,3 +1,7 @@\n+2008-04-24  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gnat.dg/concat_length.adb: New test.\n+\n 2008-04-24  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/35982"}, {"sha": "fe482d98d0a38da2c2a0d11d4e8b81945c9c5bcf", "filename": "gcc/testsuite/gnat.dg/concat_length.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22a812674cef168628bcf4760ef8faba4bb4cdb0/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat_length.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22a812674cef168628bcf4760ef8faba4bb4cdb0/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat_length.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fconcat_length.adb?ref=22a812674cef168628bcf4760ef8faba4bb4cdb0", "patch": "@@ -0,0 +1,15 @@\n+-- { dg-do run }\n+\n+procedure Concat_Length is\n+  type Byte is mod 256;\n+  for Byte'Size use 8;\n+  type Block is array(Byte range <>) of Integer;\n+\n+  C0: Block(1..7) := (others => 0);\n+  C1: Block(8..255) := (others => 0);\n+  C2: Block := C0 & C1;\n+begin\n+   if C2'Length /= 255 then\n+      raise Program_Error;\n+   end if;\n+end;"}]}