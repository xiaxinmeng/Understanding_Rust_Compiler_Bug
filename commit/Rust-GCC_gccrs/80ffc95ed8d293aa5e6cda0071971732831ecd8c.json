{"sha": "80ffc95ed8d293aa5e6cda0071971732831ecd8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBmZmM5NWVkOGQyOTNhYTVlNmNkYTAwNzE5NzE3MzI4MzFlY2Q4Yw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2001-11-03T16:38:52Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-11-03T16:38:52Z"}, "message": "linux-aout.h: Fix comment formatting.\n\n\t* config/sparc/linux-aout.h: Fix comment formatting.\n\t* config/sparc/linux.h: Likewise.\n\t* config/sparc/linux64.h: Likewise.\n\t* config/sparc/lynx.h: Likewise.\n\t* config/sparc/pbd.h: Likewise.\n\t* config/sparc/sol2-sld-64.h: Likewise.\n\t* config/sparc/sol2.h: Likewise.\n\t* config/sparc/sparc.c: Likewise.\n\t* config/sparc/sparc.h: Likewise.\n\t* config/sparc/sparc.md: Likewise.\n\t* config/sparc/sunos4.h: Likewise.\n\t* config/sparc/vxsim.h: Likewise.\n\t* config/sparc/vxsparc.h: Likewise.\n\t* config/sparc/vxsparc64.h: Likewise.\n\nFrom-SVN: r46737", "tree": {"sha": "04f17f8ca9751d0713f5c875c91a33cbbe60bd36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04f17f8ca9751d0713f5c875c91a33cbbe60bd36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80ffc95ed8d293aa5e6cda0071971732831ecd8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ffc95ed8d293aa5e6cda0071971732831ecd8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80ffc95ed8d293aa5e6cda0071971732831ecd8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80ffc95ed8d293aa5e6cda0071971732831ecd8c/comments", "author": null, "committer": null, "parents": [{"sha": "a79e3a45914de8e9cae70b753a5b1f4cd871fc9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a79e3a45914de8e9cae70b753a5b1f4cd871fc9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a79e3a45914de8e9cae70b753a5b1f4cd871fc9c"}], "stats": {"total": 145, "additions": 81, "deletions": 64}, "files": [{"sha": "6bc29c93965cdf475ea23503bd1f391f3b3413fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80ffc95ed8d293aa5e6cda0071971732831ecd8c", "patch": "@@ -1,3 +1,20 @@\n+2001-11-03  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/sparc/linux-aout.h: Fix comment formatting.\n+\t* config/sparc/linux.h: Likewise.\n+\t* config/sparc/linux64.h: Likewise.\n+\t* config/sparc/lynx.h: Likewise.\n+\t* config/sparc/pbd.h: Likewise.\n+\t* config/sparc/sol2-sld-64.h: Likewise.\n+\t* config/sparc/sol2.h: Likewise.\n+\t* config/sparc/sparc.c: Likewise.\n+\t* config/sparc/sparc.h: Likewise.\n+\t* config/sparc/sparc.md: Likewise.\n+\t* config/sparc/sunos4.h: Likewise.\n+\t* config/sparc/vxsim.h: Likewise.\n+\t* config/sparc/vxsparc.h: Likewise.\n+\t* config/sparc/vxsparc64.h: Likewise.\n+\n Sat Nov  3 10:37:56 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* cselib.c (cselib_subst_to_values, case CONST_DOUBLE): Remove"}, {"sha": "ee5af67f5f6b011a79f808d84918605012320ccf", "filename": "gcc/config/sparc/linux-aout.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Flinux-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Flinux-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux-aout.h?ref=80ffc95ed8d293aa5e6cda0071971732831ecd8c", "patch": "@@ -22,18 +22,18 @@ Boston, MA 02111-1307, USA.  */\n #include <aoutos.h>\n #include <sparc/sparc.h>\n \n-/* Don't assume anything about the header files. */\n+/* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n /* GNU/Linux uses ctype from glibc.a. I am not sure how complete it is.\n-   For now, we play safe. It may change later. */\n+   For now, we play safe. It may change later.  */\n \n #if 0\n #undef MULTIBYTE_CHARS\n #define MULTIBYTE_CHARS 1\n #endif\n \n-/* We need that too. */\n+/* We need that too.  */\n #define HANDLE_SYSV_PRAGMA\n \n #undef MD_EXEC_PREFIX\n@@ -93,7 +93,7 @@ Boston, MA 02111-1307, USA.  */\n #define LINK_SPEC\t\"-m sparclinux\"\n \n /* The sun bundled assembler doesn't accept -Yd, (and neither does gas).\n-   It's safe to pass -s always, even if -g is not used. */\n+   It's safe to pass -s always, even if -g is not used.  */\n #undef ASM_SPEC\n #define ASM_SPEC \\\n   \"%{V} %{v:%{!V:-V}} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s %{fpic:-K PIC} %{fPIC:-K PIC}\""}, {"sha": "1dd341a082e495a45b0755af0c72d33f9233582d", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=80ffc95ed8d293aa5e6cda0071971732831ecd8c", "patch": "@@ -21,11 +21,11 @@ Boston, MA 02111-1307, USA.  */\n \n #define LINUX_DEFAULT_ELF\n \n-/* Don't assume anything about the header files. */\n+/* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n /* GNU/Linux uses ctype from glibc.a. I am not sure how complete it is.\n-   For now, we play safe. It may change later. */\n+   For now, we play safe. It may change later.  */\n \n #if 0\n #undef MULTIBYTE_CHARS\n@@ -43,7 +43,7 @@ Boston, MA 02111-1307, USA.  */\n /* Provide a STARTFILE_SPEC appropriate for GNU/Linux.  Here we add\n    the GNU/Linux magical crtbegin.o file (see crtstuff.c) which\n    provides part of the support for getting C++ file-scope static\n-   object constructed before entering `main'. */\n+   object constructed before entering `main'.  */\n    \n #undef  STARTFILE_SPEC\n #define STARTFILE_SPEC \\\n@@ -61,7 +61,7 @@ Boston, MA 02111-1307, USA.  */\n #define ENDFILE_SPEC \\\n   \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n \n-/* This is for -profile to use -lc_p instead of -lc. */\n+/* This is for -profile to use -lc_p instead of -lc.  */\n #undef\tCC1_SPEC\n #define\tCC1_SPEC \"%{profile:-p} \\\n %{sun4:} %{target:} \\\n@@ -146,7 +146,7 @@ Boston, MA 02111-1307, USA.  */\n    When the -shared link option is used a final link is not being\n    done.  */\n \n-/* If ELF is the default format, we should not use /lib/elf. */\n+/* If ELF is the default format, we should not use /lib/elf.  */\n \n #undef  LINK_SPEC\n #ifdef USE_GNULIBC_1\n@@ -179,7 +179,7 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n /* The sun bundled assembler doesn't accept -Yd, (and neither does gas).\n-   It's safe to pass -s always, even if -g is not used. */\n+   It's safe to pass -s always, even if -g is not used.  */\n #undef ASM_SPEC\n #define ASM_SPEC \\\n   \"%{V} %{v:%{!V:-V}} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s %{fpic:-K PIC} \\"}, {"sha": "d227081dc2417f97e3eb849393407564e7adaa07", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=80ffc95ed8d293aa5e6cda0071971732831ecd8c", "patch": "@@ -23,7 +23,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define LINUX_DEFAULT_ELF\n \n-/* Don't assume anything about the header files. */\n+/* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n #include <sparc/sysv4.h>\n@@ -56,7 +56,7 @@ Boston, MA 02111-1307, USA.  */\n /* Provide a STARTFILE_SPEC appropriate for GNU/Linux.  Here we add\n    the GNU/Linux magical crtbegin.o file (see crtstuff.c) which\n    provides part of the support for getting C++ file-scope static\n-   object constructed before entering `main'. */\n+   object constructed before entering `main'.  */\n    \n #undef  STARTFILE_SPEC\n \n@@ -196,7 +196,7 @@ Boston, MA 02111-1307, USA.  */\n    When the -shared link option is used a final link is not being\n    done.  */\n \n-/* If ELF is the default format, we should not use /lib/elf. */\n+/* If ELF is the default format, we should not use /lib/elf.  */\n \n #ifdef SPARC_BI_ARCH\n \n@@ -290,7 +290,7 @@ Boston, MA 02111-1307, USA.  */\n #endif /* !SPARC_BI_ARCH */\n \n /* The sun bundled assembler doesn't accept -Yd, (and neither does gas).\n-   It's safe to pass -s always, even if -g is not used. */\n+   It's safe to pass -s always, even if -g is not used.  */\n #undef ASM_SPEC\n #define ASM_SPEC \"\\\n %{V} \\"}, {"sha": "bcbf61fda902d3f4dd357f53eb113997c922fe33", "filename": "gcc/config/sparc/lynx.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flynx.h?ref=80ffc95ed8d293aa5e6cda0071971732831ecd8c", "patch": "@@ -45,7 +45,7 @@ Boston, MA 02111-1307, USA.  */\n #undef LINK_SPEC\n \n /* Sparc version of libc.a has references to libm.a (printf calls pow for\n-   instance), so we must always link both. */\n+   instance), so we must always link both.  */\n \n #undef LIB_SPEC\n #define LIB_SPEC \"%{mthreads:-L/lib/thread/}  \\"}, {"sha": "db6075ea395a53115e54267dac0808782b0dea18", "filename": "gcc/config/sparc/pbd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Fpbd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Fpbd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fpbd.h?ref=80ffc95ed8d293aa5e6cda0071971732831ecd8c", "patch": "@@ -77,7 +77,7 @@ Boston, MA 02111-1307, USA.  */\n /* similar to default, but allows for the table defined by ld with gcc.ifile. \n    nptrs is always 0.  So we need to instead check that __DTOR_LIST__[1] != 0.\n    The old check is left in so that the same macro can be used if and when  \n-   a future version of gas does support section directives. */\n+   a future version of gas does support section directives.  */\n \n #define DO_GLOBAL_DTORS_BODY {int nptrs = *(int *)__DTOR_LIST__; int i; \\\n   if (nptrs == -1 || (__DTOR_LIST__[0] == 0 && __DTOR_LIST__[1] != 0))  \\\n@@ -102,7 +102,7 @@ Boston, MA 02111-1307, USA.  */\n   }\n  */\n \n-/* The prefix to add to user-visible assembler symbols. */\n+/* The prefix to add to user-visible assembler symbols.  */\n \n #undef USER_LABEL_PREFIX\n #define USER_LABEL_PREFIX \"\""}, {"sha": "8433cfc2a92d1da87f12db65679761bfd9ebf8a7", "filename": "gcc/config/sparc/sol2-sld-64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h?ref=80ffc95ed8d293aa5e6cda0071971732831ecd8c", "patch": "@@ -55,7 +55,7 @@\n #endif\n \n /* The sun bundled assembler doesn't accept -Yd, (and neither does gas).\n-   It's safe to pass -s always, even if -g is not used. */\n+   It's safe to pass -s always, even if -g is not used.  */\n #undef ASM_SPEC\n #define ASM_SPEC \"\\\n %{v:-V} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s \\"}, {"sha": "4f0cef8461eadd6899ae4102f1c5634542f1dec8", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=80ffc95ed8d293aa5e6cda0071971732831ecd8c", "patch": "@@ -53,7 +53,7 @@ Boston, MA 02111-1307, USA.  */\n \"\n \n /* The sun bundled assembler doesn't accept -Yd, (and neither does gas).\n-   It's safe to pass -s always, even if -g is not used. */\n+   It's safe to pass -s always, even if -g is not used.  */\n #undef ASM_SPEC\n #define ASM_SPEC \"\\\n %{v:-V} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s \\\n@@ -79,7 +79,7 @@ Boston, MA 02111-1307, USA.  */\n \"\n \n /* However it appears that Solaris 2.0 uses the same reg numbering as\n-   the old BSD-style system did. */\n+   the old BSD-style system did.  */\n \n #undef DBX_REGISTER_NUMBER\n /* Same as sparc.h */\n@@ -91,7 +91,7 @@ Boston, MA 02111-1307, USA.  */\n #undef PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n \n-/* The Solaris 2 assembler uses .skip, not .zero, so put this back. */\n+/* The Solaris 2 assembler uses .skip, not .zero, so put this back.  */\n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n   fprintf (FILE, \"\\t.skip %u\\n\", (SIZE))"}, {"sha": "4741cfb05fb7fbcc0ae185a6582068ac3d32d69b", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=80ffc95ed8d293aa5e6cda0071971732831ecd8c", "patch": "@@ -282,7 +282,7 @@ sparc_override_options ()\n     /* TI ultrasparc I, II, IIi */\n     { \"ultrasparc\", PROCESSOR_ULTRASPARC, MASK_ISA, MASK_V9\n     /* Although insns using %y are deprecated, it is a clear win on current\n-       ultrasparcs. */\n+       ultrasparcs.  */\n     \t\t\t\t\t\t    |MASK_DEPRECATED_V8_INSNS},\n     { 0, 0, 0, 0 }\n   };\n@@ -907,7 +907,7 @@ cc_arithopn (op, mode)\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   /* XOR is not here because combine canonicalizes (xor (not ...) ...)\n-     and (xor ... (not ...)) to (not (xor ...)).   */\n+     and (xor ... (not ...)) to (not (xor ...)).  */\n   return (GET_CODE (op) == AND\n \t  || GET_CODE (op) == IOR);\n }\n@@ -1339,7 +1339,7 @@ sparc_emit_set_const32 (op0, op1)\n }\n \n \f\n-/* Sparc-v9 code-model support. */\n+/* Sparc-v9 code-model support.  */\n void\n sparc_emit_set_symbolic_const64 (op0, op1, temp1)\n      rtx op0;\n@@ -1603,7 +1603,7 @@ sparc_emit_set_const64_quick2 (op0, temp, high_bits, low_immediate, shift_count)\n       temp2 = temp;\n     }\n \n-  /* Now shift it up into place. */\n+  /* Now shift it up into place.  */\n   emit_insn (gen_rtx_SET (VOIDmode, op0,\n \t\t\t  gen_rtx_ASHIFT (DImode, temp2,\n \t\t\t\t\t  GEN_INT (shift_count))));\n@@ -1718,11 +1718,11 @@ sparc_emit_set_const64_longway (op0, temp, high_bits, low_bits)\n       if (low3 != const0_rtx)\n \temit_insn (gen_rtx_SET (VOIDmode, op0,\n \t\t\t\tgen_rtx_IOR (DImode, op0, low3)));\n-      /* phew... */\n+      /* phew...  */\n     }\n }\n \n-/* Analyze a 64-bit constant for certain properties. */\n+/* Analyze a 64-bit constant for certain properties.  */\n static void analyze_64bit_constant\n \tPARAMS ((unsigned HOST_WIDE_INT,\n \t       unsigned HOST_WIDE_INT,\n@@ -2116,7 +2116,7 @@ sparc_emit_set_const64 (op0, op1)\n       return;\n     }\n \n-  /* The easiest way when all else fails, is full decomposition. */\n+  /* The easiest way when all else fails, is full decomposition.  */\n #if 0\n   printf (\"sparc_emit_set_const64: Hard constant [%08lx%08lx] neg[%08lx%08lx]\\n\",\n \t  high_bits, low_bits, ~high_bits, ~low_bits);\n@@ -4680,7 +4680,7 @@ function_arg_pass_by_reference (cum, mode, type, named)\n   else\n     {\n       return ((type && TREE_CODE (type) == ARRAY_TYPE)\n-\t      /* Consider complex values as aggregates, so care for TCmode. */\n+\t      /* Consider complex values as aggregates, so care for TCmode.  */\n \t      || GET_MODE_SIZE (mode) > 16\n \t      || (type && AGGREGATE_TYPE_P (type)\n \t\t  && int_size_in_bytes (type) > 16));\n@@ -6847,7 +6847,7 @@ sparc_flat_function_prologue (file, size)\n }\n \f\n /* Do any necessary cleanup after a function to restore stack, frame,\n-   and regs. */\n+   and regs.  */\n \n static void\n sparc_flat_function_epilogue (file, size)\n@@ -7131,7 +7131,7 @@ hypersparc_adjust_cost (insn, link, dep_insn, cost)\n \t{\n \tcase TYPE_STORE:\n \tcase TYPE_FPSTORE:\n-\t  /* Get the delay iff the address of the store is the dependence. */\n+\t  /* Get the delay iff the address of the store is the dependence.  */\n \t  if (GET_CODE (pat) != SET || GET_CODE (dep_pat) != SET)\n \t    return cost;\n \n@@ -7173,7 +7173,7 @@ hypersparc_adjust_cost (insn, link, dep_insn, cost)\n \tbreak;\n \n     case REG_DEP_ANTI:\n-      /* Anti-dependencies only penalize the fpu unit. */\n+      /* Anti-dependencies only penalize the fpu unit.  */\n       if (insn_type == TYPE_IALU || insn_type == TYPE_SHIFT)\n         return 0;\n       break;\n@@ -7290,7 +7290,7 @@ ultrasparc_adjust_cost (insn, link, dep_insn, cost)\n \t  if (dep_type == TYPE_IALU\n \t      && cost < 2)\n \t    return 2;\n-\t  /* Otherwise check as for integer conditional moves. */\n+\t  /* Otherwise check as for integer conditional moves.  */\n \n \tcase TYPE_CMOVE:\n \t  /* Conditional moves involving integer registers wait until\n@@ -7307,7 +7307,7 @@ ultrasparc_adjust_cost (insn, link, dep_insn, cost)\n       break;\n \n     case REG_DEP_ANTI:\n-      /* Divide and square root lock destination registers for full latency. */\n+      /* Divide and square root lock destination registers for full latency.  */\n       if (! SLOW_FP (dep_type))\n \treturn 0;\n       break;\n@@ -8149,7 +8149,7 @@ set_extends (insn)\n \n   switch (GET_CODE (SET_SRC (pat)))\n     {\n-      /* Load and some shift instructions zero extend. */\n+      /* Load and some shift instructions zero extend.  */\n     case MEM:\n     case ZERO_EXTEND:\n       /* sethi clears the high bits */\n@@ -8191,7 +8191,7 @@ set_extends (insn)\n     case ASHIFT:\n     case LSHIFTRT:\n       return GET_MODE (SET_SRC (pat)) == SImode;\n-      /* Positive integers leave the high bits zero. */\n+      /* Positive integers leave the high bits zero.  */\n     case CONST_DOUBLE:\n       return ! (CONST_DOUBLE_LOW (SET_SRC (pat)) & 0x80000000);\n     case CONST_INT:\n@@ -8206,7 +8206,7 @@ set_extends (insn)\n     }\n }\n \n-/* We _ought_ to have only one kind per function, but... */\n+/* We _ought_ to have only one kind per function, but...  */\n static rtx sparc_addr_diff_list;\n static rtx sparc_addr_list;\n \n@@ -8402,7 +8402,7 @@ sparc_v8plus_shift (operands, insn, opcode)\n }\n \n \n-/* Return 1 if DEST and SRC reference only global and in registers. */\n+/* Return 1 if DEST and SRC reference only global and in registers.  */\n \n int\n sparc_return_peephole_ok (dest, src)"}, {"sha": "09a2943d40c674c688c35b29fcc574e74758aeb0", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=80ffc95ed8d293aa5e6cda0071971732831ecd8c", "patch": "@@ -1359,7 +1359,7 @@ enum reg_class { NO_REGS, FPCC_REGS, I64_REGS, GENERAL_REGS, FP_REGS,\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n-/* Give names of register classes as strings for dump file.   */\n+/* Give names of register classes as strings for dump file.  */\n \n #define REG_CLASS_NAMES \\\n   { \"NO_REGS\", \"FPCC_REGS\", \"I64_REGS\", \"GENERAL_REGS\", \"FP_REGS\",\t\\\n@@ -1448,7 +1448,7 @@ extern const char leaf_reg_remap[];\n    .md file for v8 and v9.\n    'd' and 'b' are used for single and double precision VIS operations,\n    if TARGET_VIS.\n-   'h' is used for V8+ 64 bit global and out registers. */\n+   'h' is used for V8+ 64 bit global and out registers.  */\n \n #define REG_CLASS_FROM_LETTER(C)\t\t\\\n (TARGET_V9\t\t\t\t\t\\\n@@ -1655,7 +1655,7 @@ extern const char leaf_reg_remap[];\n /* When a parameter is passed in a register, stack space is still\n    allocated for it.\n    !v9: All 6 possible integer registers have backing store allocated.\n-   v9: Only space for the arguments passed is allocated. */\n+   v9: Only space for the arguments passed is allocated.  */\n /* ??? Ideally, we'd use zero here (as the minimum), but zero has special\n    meaning to the backend.  Further, we need to be able to detect if a\n    varargs/unprototyped function is called, as they may want to spill more\n@@ -1698,7 +1698,7 @@ extern const char leaf_reg_remap[];\n    ? (TARGET_FPU && FLOAT_MODE_P (MODE) ? 32 : 8)\t\t\\\n    : 8)\n \n-/* ??? FIXME -- seems wrong for v9 structure passing... */\n+/* ??? FIXME -- seems wrong for v9 structure passing...  */\n #define BASE_INCOMING_ARG_REG(MODE)\t\t\t\t\\\n   (TARGET_ARCH64\t\t\t\t\t\t\\\n    ? (TARGET_FPU && FLOAT_MODE_P (MODE) ? 32\t\t\t\\\n@@ -2023,7 +2023,7 @@ LFLGNN\"ID\":\"\t\t\t\t\t\\\n    We use some combination of instructions to produce the\n    proper condition codes, but some flag combinations can not\n    be generated in this way. If this happens an unimplemented\n-   instruction will be executed to abort the program. */\n+   instruction will be executed to abort the program.  */\n \n #if TARGET_ARCH32\n \n@@ -2182,7 +2182,7 @@ LFLGRET\"ID\":\\n\\\n #define RETURN_ADDR_IN_PREVIOUS_FRAME\n \n /* This is the offset of the return address to the true next instruction to be\n-   executed for the current function. */\n+   executed for the current function.  */\n #define RETURN_ADDR_OFFSET \\\n   (8 + 4 * (! TARGET_ARCH64 && current_function_returns_struct))\n \n@@ -2431,7 +2431,7 @@ LFLGRET\"ID\":\\n\\\n \t\t of a movtf pattern are both MEMs with\t\\\n \t\t REG+REG address, then only one of them\t\\\n \t\t gets converted to an offsetable\t\\\n-\t\t address. */\t\t\t\t\\\n+\t\t address.  */\t\t\t\t\\\n  \t       && (MODE != TFmode\t\t\t\\\n \t\t   || (TARGET_FPU && TARGET_ARCH64\t\\\n \t\t       && TARGET_V9\t\t\t\\\n@@ -2441,7 +2441,7 @@ LFLGRET\"ID\":\\n\\\n \t\t because then mem_min_alignment is\t\\\n \t\t likely to be zero after reload and the \\\n \t\t forced split would lack a matching\t\\\n-\t\t splitter pattern. */\t\t\t\\\n+\t\t splitter pattern.  */\t\t\t\\\n \t       && (TARGET_ARCH64 || optimize\t\t\\\n \t\t   || (MODE != DFmode\t\t\t\\\n \t\t       && MODE != DImode)))\t\t\\\n@@ -2451,7 +2451,7 @@ LFLGRET\"ID\":\\n\\\n       else if (RTX_OK_FOR_BASE_P (op1))\t\t\t\\\n \t{\t\t\t\t\t\t\\\n \t  if ((RTX_OK_FOR_INDEX_P (op0)\t\t\t\\\n- \t      /* See the previous comment. */\t\t\\\n+ \t      /* See the previous comment.  */\t\t\\\n  \t       && (MODE != TFmode\t\t\t\\\n \t\t  || (TARGET_FPU && TARGET_ARCH64\t\\\n \t\t      && TARGET_V9\t\t\t\\\n@@ -2495,7 +2495,7 @@ LFLGRET\"ID\":\\n\\\n \t  && CONSTANT_P (op1)\t\t\t\t\\\n \t  /* We can't allow TFmode, because an offset\t\\\n \t     greater than or equal to the alignment (8)\t\\\n-\t     may cause the LO_SUM to overflow if !v9. */\\\n+\t     may cause the LO_SUM to overflow if !v9.  */\\\n \t  && (MODE != TFmode || TARGET_V9))\t\t\\\n \tgoto ADDR;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n@@ -2604,15 +2604,15 @@ do {                                                                    \\\n (! TARGET_PTR64 ? SImode : flag_pic ? SImode : TARGET_CM_MEDLOW ? SImode : DImode)\n #else\n /* If assembler does not have working .subsection -1, we use DImode for pic, as otherwise\n-   we have to sign extend which slows things down. */\n+   we have to sign extend which slows things down.  */\n #define CASE_VECTOR_MODE \\\n (! TARGET_PTR64 ? SImode : flag_pic ? DImode : TARGET_CM_MEDLOW ? SImode : DImode)\n #endif\n \n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n    table.\n-   Do not define this if the table should contain absolute addresses. */\n+   Do not define this if the table should contain absolute addresses.  */\n /* #define CASE_VECTOR_PC_RELATIVE 1 */\n \n /* Specify the tree operation to be used to convert reals to integers.  */\n@@ -2663,7 +2663,7 @@ do {                                                                    \\\n #define PROMOTE_PROTOTYPES (TARGET_ARCH32)\n \n /* Define this to be nonzero if shift instructions ignore all but the low-order\n-   few bits. */\n+   few bits.  */\n #define SHIFT_COUNT_TRUNCATED 1\n \n /* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n@@ -2903,7 +2903,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_BYTE_OP\t\"\\t.byte\\t\"\n #define ASM_FLOAT\t\".single\"\n #define ASM_DOUBLE\t\".double\"\n-#define ASM_LONGDOUBLE\t\".xxx\"\t\t/* ??? Not known (or used yet). */\n+#define ASM_LONGDOUBLE\t\".xxx\"\t\t/* ??? Not known (or used yet).  */\n \n /* Output before read-only data.  */\n \n@@ -2973,7 +2973,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\\\n   do { fputs (\"\\t.global \", FILE); assemble_name (FILE, NAME); fputs (\"\\n\", FILE);} while (0)\n \n-/* The prefix to add to user-visible assembler symbols. */\n+/* The prefix to add to user-visible assembler symbols.  */\n \n #define USER_LABEL_PREFIX \"_\"\n "}, {"sha": "56fc2ae12a07e0874b495c1361345befc5125a10", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=80ffc95ed8d293aa5e6cda0071971732831ecd8c", "patch": "@@ -2152,7 +2152,7 @@\n \t}\n     }\n \n-  /* This makes sure we will not get rematched due to splittage. */\n+  /* This makes sure we will not get rematched due to splittage.  */\n   if (! CONSTANT_P (operands[1]) || input_operand (operands[1], HImode))\n     ;\n   else if (CONSTANT_P (operands[1])\n@@ -2250,7 +2250,7 @@\n     operands[1] = validize_mem (force_const_mem (GET_MODE (operands[0]),\n \t\t\t\t\t\t operands[1]));\n \n-  /* This makes sure we will not get rematched due to splittage. */\n+  /* This makes sure we will not get rematched due to splittage.  */\n   if (! CONSTANT_P (operands[1]) || input_operand (operands[1], SImode))\n     ;\n   else if (CONSTANT_P (operands[1])\n@@ -2428,7 +2428,7 @@\n     operands[1] = validize_mem (force_const_mem (GET_MODE (operands[0]),\n \t\t\t\t\t\t operands[1]));\n \n-  /* This makes sure we will not get rematched due to splittage. */\n+  /* This makes sure we will not get rematched due to splittage.  */\n   if (! CONSTANT_P (operands[1]) || input_operand (operands[1], DImode))\n     ;\n   else if (TARGET_ARCH64\n@@ -3560,7 +3560,7 @@\n   \"\"\n   \"\n {\n-  /* Force TFmode constants into memory. */\n+  /* Force TFmode constants into memory.  */\n   if (GET_CODE (operands[0]) == REG\n       && CONSTANT_P (operands[1]))\n     {\n@@ -3578,7 +3578,7 @@\n     }\n \n   /* Handle MEM cases first, note that only v9 guarentees\n-     full 16-byte alignment for quads. */\n+     full 16-byte alignment for quads.  */\n   if (GET_CODE (operands[0]) == MEM)\n     {\n       if (register_operand (operands[1], TFmode)"}, {"sha": "07939f07e4f61fccb702dee1a29361e7ae045416", "filename": "gcc/config/sparc/sunos4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Fsunos4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Fsunos4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsunos4.h?ref=80ffc95ed8d293aa5e6cda0071971732831ecd8c", "patch": "@@ -49,7 +49,7 @@ Boston, MA 02111-1307, USA.  */\n \t       : \"r\" (ms_flags), \"r\" (ms_saveret));\n \n /* SunOS has on_exit instead of atexit.  */\n-/* The man page says it returns int. */\n+/* The man page says it returns int.  */\n extern int on_exit PARAMS ((void *, void *));\n #define ON_EXIT(FUNC) on_exit ((FUNC), 0)\n #define NEED_ATEXIT"}, {"sha": "d6768a91cdae7a6820aeb34501d113efc930b455", "filename": "gcc/config/sparc/vxsim.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Fvxsim.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Fvxsim.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvxsim.h?ref=80ffc95ed8d293aa5e6cda0071971732831ecd8c", "patch": "@@ -34,14 +34,14 @@ Boston, MA 02111-1307, USA.  */\n #define CC1_SPEC \"-fno-builtin %{sun4:} %{target:}\"\n \n /* The sun bundled assembler doesn't accept -Yd, (and neither does gas).\n-   It's safe to pass -s always, even if -g is not used. */\n+   It's safe to pass -s always, even if -g is not used.  */\n #undef ASM_SPEC\n #define ASM_SPEC \\\n   \"%{V} %{v:%{!V:-V}} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s \\\n    %{fpic:-K PIC} %{fPIC:-K PIC}\"\n \n /* However it appears that Solaris 2.0 uses the same reg numbering as\n-   the old BSD-style system did. */\n+   the old BSD-style system did.  */\n \n #undef DBX_REGISTER_NUMBER\n /* Same as sparc.h */\n@@ -52,7 +52,7 @@ Boston, MA 02111-1307, USA.  */\n #undef PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n \n-/* The Solaris 2 assembler uses .skip, not .zero, so put this back. */\n+/* The Solaris 2 assembler uses .skip, not .zero, so put this back.  */\n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n   fprintf (FILE, \"\\t.skip %u\\n\", (SIZE))"}, {"sha": "1b5a70a39204867c0c18c3ce66cf4e137efd2fbc", "filename": "gcc/config/sparc/vxsparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Fvxsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Fvxsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvxsparc.h?ref=80ffc95ed8d293aa5e6cda0071971732831ecd8c", "patch": "@@ -27,7 +27,7 @@ Boston, MA 02111-1307, USA.  */\n #undef LIB_SPEC\n #define LIB_SPEC \"\"\n \n-/* Provide required defaults for linker -e. */\n+/* Provide required defaults for linker -e.  */\n #undef LINK_SPEC\n #define LINK_SPEC \"%{!nostdlib:%{!r*:%{!e*:-e start}}}\"\n "}, {"sha": "5a4cd0c6ec08038dc35552cec26108163e595262", "filename": "gcc/config/sparc/vxsparc64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Fvxsparc64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80ffc95ed8d293aa5e6cda0071971732831ecd8c/gcc%2Fconfig%2Fsparc%2Fvxsparc64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvxsparc64.h?ref=80ffc95ed8d293aa5e6cda0071971732831ecd8c", "patch": "@@ -39,7 +39,7 @@ Boston, MA 02111-1307, USA.  */\n /* We need to prohibit dots in constructor labels so that we can build a\n    table of { string, address } entries for each non-static name in a\n    program.  The address, being of the form &name, it cannot contain a dot or\n-   C will try to parse it as a &struct.field phrase. */\n+   C will try to parse it as a &struct.field phrase.  */\n #undef NO_DOLLAR_IN_LABEL\n #undef DOLLARS_IN_IDENTIFIERS\n #define DOLLARS_IN_IDENTIFIERS 1"}]}