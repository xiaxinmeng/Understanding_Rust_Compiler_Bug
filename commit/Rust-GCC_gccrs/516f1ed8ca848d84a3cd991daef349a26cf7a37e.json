{"sha": "516f1ed8ca848d84a3cd991daef349a26cf7a37e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE2ZjFlZDhjYTg0OGQ4NGEzY2Q5OTFkYWVmMzQ5YTI2Y2Y3YTM3ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-03-22T07:00:08Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-03-22T07:00:08Z"}, "message": "default.exp: New file.\n\n\t* testsuite/config/default.exp: New file.\n\t* testsuite/lib/libgomp.exp: New file.\n\t* testsuite/lib/libgomp.dg (load_gcc_lib, libgomp_init,\n\tlibgomp_target_compile, libgomp_option_help, libgomp_option_proc,\n\tload_lib *, load_gcc_lib *): Move to libgomp.exp.\n\t(libgomp_load): Remove.\n\t* testsuite/lib/libgomp.exp (libgomp_init): Compute\n\talways_ld_library_path, not ld_library_path.  Set additional_flags\n\tto -march=i486 for ilp32 x86_64-*-* and i386-*-* targets.\n\t(target_compile): Do not call libgomp_init.  Append lang_library_path\n\tand lang_link_flags to options.\n\t* testsuite/libgomp.c/c.exp: Set DEFAULT_FLAGS to -O2.  Set\n\tld_library_path from always_ld_library_path.  Set LD_LIBRARY_PATH\n\there.\n\t* testsuite/libgomp.c++/c++.exp: Set ld_library_path from\n\talways_ld_library_path.  Set LD_LIBRARY_PATH here.\n\t* testsuite/libgomp.fortran/fortran.exp: Ditto.\n\t* testsuite/libgomp.c/atomic-1.c: Set dg-options to\n\t\"-O2 -march=pentium\" for ilp32 x86 targets. Simplify check for\n\tCX8 flag.\n\t* testsuite/libgomp.c/atomic-2.c: Set dg-options to \"-O2 -mcx16\" for\n\tlp64 x86 targets. Do not check for SSE3 bit. Do not define bit_SSE3.\n\t* testsuite/libgomp.c/pr29947-1.c: Remove default dg-options.\n\t* testsuite/libgomp.c/pr29947-1.c: Ditto.\n\t* testsuite/libgomp.c/atomic-10.c: Ditto.\n\nFrom-SVN: r123125", "tree": {"sha": "e28cf23cafe55f19b81d3ceb6bbb675b5d939270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e28cf23cafe55f19b81d3ceb6bbb675b5d939270"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/516f1ed8ca848d84a3cd991daef349a26cf7a37e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/516f1ed8ca848d84a3cd991daef349a26cf7a37e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/516f1ed8ca848d84a3cd991daef349a26cf7a37e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/516f1ed8ca848d84a3cd991daef349a26cf7a37e/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e4c6dc5b92081004ecabe34f4e76c2a1e97cdce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e4c6dc5b92081004ecabe34f4e76c2a1e97cdce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e4c6dc5b92081004ecabe34f4e76c2a1e97cdce"}], "stats": {"total": 489, "additions": 258, "deletions": 231}, "files": [{"sha": "a6f7032de78503c74ad4f554da7be6ec4c9f350e", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=516f1ed8ca848d84a3cd991daef349a26cf7a37e", "patch": "@@ -1,3 +1,31 @@\n+2007-03-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* testsuite/config/default.exp: New file.\n+\t* testsuite/lib/libgomp.exp: New file.\n+\t* testsuite/lib/libgomp.dg (load_gcc_lib, libgomp_init,\n+\tlibgomp_target_compile, libgomp_option_help, libgomp_option_proc,\n+\tload_lib *, load_gcc_lib *): Move to libgomp.exp.\n+\t(libgomp_load): Remove.\n+\t* testsuite/lib/libgomp.exp (libgomp_init): Compute\n+\talways_ld_library_path, not ld_library_path.  Set additional_flags\n+\tto -march=i486 for ilp32 x86_64-*-* and i386-*-* targets.\n+\t(target_compile): Do not call libgomp_init.  Append lang_library_path\n+\tand lang_link_flags to options.\n+\t* testsuite/libgomp.c/c.exp: Set DEFAULT_FLAGS to -O2.  Set\n+\tld_library_path from always_ld_library_path.  Set LD_LIBRARY_PATH\n+\there.\n+\t* testsuite/libgomp.c++/c++.exp: Set ld_library_path from\n+\talways_ld_library_path.  Set LD_LIBRARY_PATH here.\n+\t* testsuite/libgomp.fortran/fortran.exp: Ditto.\n+\t* testsuite/libgomp.c/atomic-1.c: Set dg-options to\n+\t\"-O2 -march=pentium\" for ilp32 x86 targets. Simplify check for\n+\tCX8 flag.\n+\t* testsuite/libgomp.c/atomic-2.c: Set dg-options to \"-O2 -mcx16\" for\n+\tlp64 x86 targets. Do not check for SSE3 bit. Do not define bit_SSE3.\n+\t* testsuite/libgomp.c/pr29947-1.c: Remove default dg-options.\n+\t* testsuite/libgomp.c/pr29947-1.c: Ditto.\n+\t* testsuite/libgomp.c/atomic-10.c: Ditto.\n+\n 2007-03-21  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libgomp.fortran/appendix-a/a.22.8.f90: Add"}, {"sha": "3f54559e3053cd364347d53c5203316025329a1a", "filename": "libgomp/testsuite/config/default.exp", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Fconfig%2Fdefault.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Fconfig%2Fdefault.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Fconfig%2Fdefault.exp?ref=516f1ed8ca848d84a3cd991daef349a26cf7a37e", "patch": "@@ -0,0 +1,17 @@\n+#   Copyright (C) 1997 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  \n+\n+load_lib \"standard.exp\""}, {"sha": "ebf78e17e6d8db2ca4c1697dcf468c209b2aaeee", "filename": "libgomp/testsuite/lib/libgomp-dg.exp", "status": "modified", "additions": 0, "deletions": 218, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Flib%2Flibgomp-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Flib%2Flibgomp-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp-dg.exp?ref=516f1ed8ca848d84a3cd991daef349a26cf7a37e", "patch": "@@ -1,221 +1,3 @@\n-# Damn dejagnu for not having proper library search paths for load_lib.\n-# We have to explicitly load everything that gcc-dg.exp wants to load.\n-\n-proc load_gcc_lib { filename } {\n-    global srcdir loaded_libs\n-\n-    load_file $srcdir/../../gcc/testsuite/lib/$filename\n-    set loaded_libs($filename) \"\"\n-}\n-\n-load_lib dg.exp\n-load_gcc_lib file-format.exp\n-load_gcc_lib target-supports.exp\n-load_gcc_lib target-supports-dg.exp\n-load_gcc_lib scanasm.exp\n-load_gcc_lib scandump.exp\n-load_gcc_lib scanrtl.exp\n-load_gcc_lib scantree.exp\n-load_gcc_lib scanipa.exp\n-load_gcc_lib prune.exp\n-load_gcc_lib target-libpath.exp\n-load_gcc_lib wrapper.exp\n-load_gcc_lib gcc-defs.exp\n-load_gcc_lib gcc-dg.exp\n-load_gcc_lib gfortran-dg.exp\n-\n-set dg-do-what-default run\n-\n-#\n-# GCC_UNDER_TEST is the compiler under test.\n-#\n-\n-set libgomp_compile_options \"\"\n-\n-#\n-# libgomp_init -- This gets run more than it should be....\n-#\n-\n-if [info exists TOOL_OPTIONS] {\n-    set multilibs [get_multilibs $TOOL_OPTIONS]\n-} else {\n-    set multilibs [get_multilibs]\n-}\n-\n-proc libgomp_init { args } {\n-    global srcdir blddir objdir tool_root_dir\n-    global libgomp_initialized\n-    global tmpdir\n-    global gluefile wrap_flags\n-    global ALWAYS_CFLAGS\n-    global CFLAGS\n-    global TOOL_EXECUTABLE TOOL_OPTIONS\n-    global GCC_UNDER_TEST\n-    global TESTING_IN_BUILD_TREE\n-    global target_triplet\n-    global ld_library_path\n-    global lang_test_file\n-    global lang_library_path\n-    global lang_link_flags\n-\n-    set blddir [lookfor_file [get_multilibs] libgomp]\n-\n-    # We set LC_ALL and LANG to C so that we get the same error\n-    # messages as expected.\n-    setenv LC_ALL C\n-    setenv LANG C\n-\n-    if ![info exists GCC_UNDER_TEST] then {\n-\tif [info exists TOOL_EXECUTABLE] {\n-\t    set GCC_UNDER_TEST $TOOL_EXECUTABLE\n-\t} else {\n-\t    set GCC_UNDER_TEST \"[find_gcc]\"\n-\t}\n-    }\n-\n-    if ![info exists tmpdir] {\n-\tset tmpdir \"/tmp\"\n-    }\n-\n-    if [info exists gluefile] {\n-\tunset gluefile\n-    }\n-\n-    if {![info exists CFLAGS]} {\n-\tset CFLAGS \"\"\n-    }\n-\n-    # Locate libgcc.a so we don't need to account for different values of\n-    # SHLIB_EXT on different platforms\n-    set gccdir [lookfor_file $tool_root_dir gcc/libgcc.a]\n-    if {$gccdir != \"\"} {\n-        set gccdir [file dirname $gccdir]\n-    }\n-\n-    # Compute what needs to be put into LD_LIBRARY_PATH\n-    set ld_library_path \".:${blddir}/.libs\"\n-\n-    if { [info exists lang_test_file] && [file exists \"${blddir}/\"] } {\n-\tappend ld_library_path \":${blddir}/${lang_library_path}\"\n-    }\n-\n-    # Compute what needs to be added to the existing LD_LIBRARY_PATH.\n-    if {$gccdir != \"\"} {\n-\tappend ld_library_path \":${gccdir}\"\n-\tset compiler [lindex $GCC_UNDER_TEST 0]\n-\n-\tif { [is_remote host] == 0 && [which $compiler] != 0 } {\n-\t  foreach i \"[exec $compiler --print-multi-lib]\" {\n-\t    set mldir \"\"\n-\t    regexp -- \"\\[a-z0-9=_/\\.-\\]*;\" $i mldir\n-\t    set mldir [string trimright $mldir \"\\;@\"]\n-\t    if { \"$mldir\" == \".\" } {\n-\t      continue\n-\t    }\n-\t    if { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.so.*]] >= 1 } {\n-\t      append ld_library_path \":${gccdir}/${mldir}\"\n-\t    }\n-\t  }\n-\t}\n-    }\n-    set_ld_library_path_env_vars\n-\n-    set ALWAYS_CFLAGS \"\"\n-    lappend ALWAYS_CFLAGS \"additional_flags=-B${blddir}/\"\n-    lappend ALWAYS_CFLAGS \"additional_flags=-I${blddir}\"\n-    lappend ALWAYS_CFLAGS \"additional_flags=-I${srcdir}/..\"\n-    lappend ALWAYS_CFLAGS \"ldflags=-L${blddir}/.libs -lgomp\"\n-    if { [info exists lang_test_file] && [file exists \"${blddir}/\"] } {\n-\tlappend ALWAYS_CFLAGS \"ldflags=-L${blddir}/${lang_library_path} ${lang_link_flags}\"\n-    }\n-\n-    # We use atomic operations in the testcases to validate results.\n-    if [istarget i?86-*-*] {\n-\tlappend ALWAYS_CFLAGS \"additional_flags=-march=i486\"\n-    }\n-    if [istarget sparc*-*-*] {\n-\tlappend ALWAYS_CFLAGS \"additional_flags=-mcpu=v9\"\n-    }\n-\n-    if [info exists TOOL_OPTIONS] {\n-\tlappend ALWAYS_CFLAGS \"additional_flags=$TOOL_OPTIONS\"\n-    }\n-\n-    # Make sure that lines are not wrapped.  That can confuse the\n-    # error-message parsing machinery.\n-    lappend ALWAYS_CFLAGS \"additional_flags=-fmessage-length=0\"\n-\n-    # And, gee, turn on OpenMP.\n-    lappend ALWAYS_CFLAGS \"additional_flags=-fopenmp\"\n-}\n-\n-#\n-# libgomp_target_compile -- compile a source file\n-#\n-\n-proc libgomp_target_compile { source dest type options } {\n-    global tmpdir\n-    global libgomp_compile_options\n-    global gluefile wrap_flags\n-    global ALWAYS_CFLAGS\n-    global GCC_UNDER_TEST\n-\n-    libgomp_init\n-\n-    if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n-\tlappend options \"libs=${gluefile}\"\n-\tlappend options \"ldflags=${wrap_flags}\"\n-    }\n-\n-    lappend options \"additional_flags=[libio_include_flags]\"\n-    lappend options \"compiler=$GCC_UNDER_TEST\"\n-\n-    set options [concat $libgomp_compile_options $options]\n-\n-    set options [concat \"$ALWAYS_CFLAGS\" $options]\n-\n-    set options [dg-additional-files-options $options $source]\n-\n-    set result [target_compile $source $dest $type $options]\n-\n-    return $result\n-}\n-\n-# ??? The same as in standard.exp.  Why doesn't anyone else have to \n-# define this?\n-\n-proc libgomp_load { program args } {\n-    if { [llength $args] > 0 } {\n-        set program_args [lindex $args 0]\n-    } else {\n-        set program_args \"\"\n-    }\n-\n-    if { [llength $args] > 1 } {\n-        set input_file [lindex $args 1]\n-    } else {\n-        set input_file \"\"\n-    }\n-    return [remote_load target $program $program_args $input_file]\n-}\n-\n-proc libgomp_option_help { } {\n-    send_user \" --additional_options,OPTIONS\\t\\tUse OPTIONS to compile the testcase files. OPTIONS should be comma-separated.\\n\"\n-}\n-\n-proc libgomp_option_proc { option } {\n-    if [regexp \"^--additional_options,\" $option] {\n-\tglobal libgomp_compile_options\n-\tregsub \"--additional_options,\" $option \"\" option\n-\tforeach x [split $option \",\"] {\n-\t    lappend libgomp_compile_options \"additional_flags=$x\"\n-\t}\n-\treturn 1\n-    } else {\n-\treturn 0\n-    }\n-}\n-\n proc libgomp-dg-test { prog do_what extra_tool_flags } {\n     return [gcc-dg-test-1 libgomp_target_compile $prog $do_what $extra_tool_flags]\n }"}, {"sha": "98c07aaba3181c568fc27fe3117dcf64c8e68843", "filename": "libgomp/testsuite/lib/libgomp.exp", "status": "added", "additions": 197, "deletions": 0, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp?ref=516f1ed8ca848d84a3cd991daef349a26cf7a37e", "patch": "@@ -0,0 +1,197 @@\n+# Damn dejagnu for not having proper library search paths for load_lib.\n+# We have to explicitly load everything that gcc-dg.exp wants to load.\n+\n+proc load_gcc_lib { filename } {\n+    global srcdir loaded_libs\n+\n+    load_file $srcdir/../../gcc/testsuite/lib/$filename\n+    set loaded_libs($filename) \"\"\n+}\n+\n+load_lib dg.exp\n+load_gcc_lib file-format.exp\n+load_gcc_lib target-supports.exp\n+load_gcc_lib target-supports-dg.exp\n+load_gcc_lib scanasm.exp\n+load_gcc_lib scandump.exp\n+load_gcc_lib scanrtl.exp\n+load_gcc_lib scantree.exp\n+load_gcc_lib scanipa.exp\n+load_gcc_lib prune.exp\n+load_gcc_lib target-libpath.exp\n+load_gcc_lib wrapper.exp\n+load_gcc_lib gcc-defs.exp\n+load_gcc_lib gcc-dg.exp\n+load_gcc_lib gfortran-dg.exp\n+\n+set dg-do-what-default run\n+\n+#\n+# GCC_UNDER_TEST is the compiler under test.\n+#\n+\n+set libgomp_compile_options \"\"\n+\n+#\n+# libgomp_init\n+#\n+\n+if [info exists TOOL_OPTIONS] {\n+    set multilibs [get_multilibs $TOOL_OPTIONS]\n+} else {\n+    set multilibs [get_multilibs]\n+}\n+\n+proc libgomp_init { args } {\n+    global srcdir blddir objdir tool_root_dir\n+    global libgomp_initialized\n+    global tmpdir\n+    global blddir\n+    global gluefile wrap_flags\n+    global ALWAYS_CFLAGS\n+    global CFLAGS\n+    global TOOL_EXECUTABLE TOOL_OPTIONS\n+    global GCC_UNDER_TEST\n+    global TESTING_IN_BUILD_TREE\n+    global target_triplet\n+    global always_ld_library_path\n+\n+    set blddir [lookfor_file [get_multilibs] libgomp]\n+\n+    # We set LC_ALL and LANG to C so that we get the same error\n+    # messages as expected.\n+    setenv LC_ALL C\n+    setenv LANG C\n+\n+    if ![info exists GCC_UNDER_TEST] then {\n+\tif [info exists TOOL_EXECUTABLE] {\n+\t    set GCC_UNDER_TEST $TOOL_EXECUTABLE\n+\t} else {\n+\t    set GCC_UNDER_TEST \"[find_gcc]\"\n+\t}\n+    }\n+\n+    if ![info exists tmpdir] {\n+\tset tmpdir \"/tmp\"\n+    }\n+\n+    if [info exists gluefile] {\n+\tunset gluefile\n+    }\n+\n+    if {![info exists CFLAGS]} {\n+\tset CFLAGS \"\"\n+    }\n+\n+    # Locate libgcc.a so we don't need to account for different values of\n+    # SHLIB_EXT on different platforms\n+    set gccdir [lookfor_file $tool_root_dir gcc/libgcc.a]\n+    if {$gccdir != \"\"} {\n+        set gccdir [file dirname $gccdir]\n+    }\n+\n+    # Compute what needs to be put into LD_LIBRARY_PATH\n+    set always_ld_library_path \".:${blddir}/.libs\"\n+\n+    # Compute what needs to be added to the existing LD_LIBRARY_PATH.\n+    if {$gccdir != \"\"} {\n+\tappend always_ld_library_path \":${gccdir}\"\n+\tset compiler [lindex $GCC_UNDER_TEST 0]\n+\n+\tif { [is_remote host] == 0 && [which $compiler] != 0 } {\n+\t  foreach i \"[exec $compiler --print-multi-lib]\" {\n+\t    set mldir \"\"\n+\t    regexp -- \"\\[a-z0-9=_/\\.-\\]*;\" $i mldir\n+\t    set mldir [string trimright $mldir \"\\;@\"]\n+\t    if { \"$mldir\" == \".\" } {\n+\t      continue\n+\t    }\n+\t    if { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.so.*]] >= 1 } {\n+\t      append always_ld_library_path \":${gccdir}/${mldir}\"\n+\t    }\n+\t  }\n+\t}\n+    }\n+\n+    set ALWAYS_CFLAGS \"\"\n+    lappend ALWAYS_CFLAGS \"additional_flags=-B${blddir}/\"\n+    lappend ALWAYS_CFLAGS \"additional_flags=-I${blddir}\"\n+    lappend ALWAYS_CFLAGS \"additional_flags=-I${srcdir}/..\"\n+    lappend ALWAYS_CFLAGS \"ldflags=-L${blddir}/.libs -lgomp\"\n+\n+    # We use atomic operations in the testcases to validate results.\n+    if { ([istarget i?86-*-*] || [istarget x86_64-*-*])\n+\t && [check_effective_target_ilp32] } {\n+\tlappend ALWAYS_CFLAGS \"additional_flags=-march=i486\"\n+    }\n+    if [istarget sparc*-*-*] {\n+\tlappend ALWAYS_CFLAGS \"additional_flags=-mcpu=v9\"\n+    }\n+\n+    if [info exists TOOL_OPTIONS] {\n+\tlappend ALWAYS_CFLAGS \"additional_flags=$TOOL_OPTIONS\"\n+    }\n+\n+    # Make sure that lines are not wrapped.  That can confuse the\n+    # error-message parsing machinery.\n+    lappend ALWAYS_CFLAGS \"additional_flags=-fmessage-length=0\"\n+\n+    # And, gee, turn on OpenMP.\n+    lappend ALWAYS_CFLAGS \"additional_flags=-fopenmp\"\n+}\n+\n+#\n+# libgomp_target_compile -- compile a source file\n+#\n+\n+proc libgomp_target_compile { source dest type options } {\n+    global blddir\n+    global libgomp_compile_options\n+    global gluefile wrap_flags\n+    global ALWAYS_CFLAGS\n+    global GCC_UNDER_TEST\n+    global lang_test_file\n+    global lang_library_path\n+    global lang_link_flags\n+\n+    if { [info exists lang_test_file] && [file exists \"${blddir}/\"] } {\n+\tlappend options \"ldflags=-L${blddir}/${lang_library_path} ${lang_link_flags}\"\n+    }\n+\n+    if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n+\tlappend options \"libs=${gluefile}\"\n+\tlappend options \"ldflags=${wrap_flags}\"\n+    }\n+\n+    lappend options \"additional_flags=[libio_include_flags]\"\n+    lappend options \"compiler=$GCC_UNDER_TEST\"\n+\n+    set options [concat $libgomp_compile_options $options]\n+\n+    if [info exists ALWAYS_CFLAGS] {\n+\tset options [concat \"$ALWAYS_CFLAGS\" $options]\n+    }\n+\n+    set options [dg-additional-files-options $options $source]\n+\n+    set result [target_compile $source $dest $type $options]\n+\n+    return $result\n+}\n+\n+proc libgomp_option_help { } {\n+    send_user \" --additional_options,OPTIONS\\t\\tUse OPTIONS to compile the testcase files. OPTIONS should be comma-separated.\\n\"\n+}\n+\n+proc libgomp_option_proc { option } {\n+    if [regexp \"^--additional_options,\" $option] {\n+\tglobal libgomp_compile_options\n+\tregsub \"--additional_options,\" $option \"\" option\n+\tforeach x [split $option \",\"] {\n+\t    lappend libgomp_compile_options \"additional_flags=$x\"\n+\t}\n+\treturn 1\n+    } else {\n+\treturn 0\n+    }\n+}"}, {"sha": "0bc657e2125cbf867b39f85b513d990121df5120", "filename": "libgomp/testsuite/libgomp.c++/c++.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fc%2B%2B.exp?ref=516f1ed8ca848d84a3cd991daef349a26cf7a37e", "patch": "@@ -12,6 +12,9 @@ if [file exists \"${blddir}/${lang_test_file}\"] {\n     # Gather a list of all tests.\n     set tests [lsort [glob -nocomplain $srcdir/$subdir/*.C]]\n \n+    set ld_library_path [concat $always_ld_library_path \":${blddir}/${lang_library_path}\"]\n+    set_ld_library_path_env_vars\n+\n     # Main loop.\n     gfortran-dg-runtest $tests \"\"\n }"}, {"sha": "dfbcf851c44ce1adb1269fa91d6f703edf4a345e", "filename": "libgomp/testsuite/libgomp.c/atomic-1.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Flibgomp.c%2Fatomic-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Flibgomp.c%2Fatomic-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fatomic-1.c?ref=516f1ed8ca848d84a3cd991daef349a26cf7a37e", "patch": "@@ -1,7 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fopenmp\" } */\n-/* { dg-options \"-O2 -fopenmp -march=pentium\" { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O2 -fopenmp\" { target lp64 } } */\n+/* { dg-options \"-O2 -march=pentium\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n \n #ifdef __i386__\n #include \"../../../gcc/testsuite/gcc.dg/i386-cpuid.h\"\n@@ -47,7 +45,7 @@ main (void)\n \n   cpu_facilities = i386_cpuid ();\n \n-  if ((cpu_facilities & bit_CX8) == 0)\n+  if (!(cpu_facilities & bit_CX8))\n     return 0;\n #endif\n "}, {"sha": "58edeed6c36e7a3c6a0b641e2580f084eea1ac44", "filename": "libgomp/testsuite/libgomp.c/atomic-10.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Flibgomp.c%2Fatomic-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Flibgomp.c%2Fatomic-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fatomic-10.c?ref=516f1ed8ca848d84a3cd991daef349a26cf7a37e", "patch": "@@ -1,5 +1,4 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fopenmp\" } */\n \n extern void abort (void);\n int x1, x2, x3, x4, x5;"}, {"sha": "50529ebe67528dfcd7482f4db7bf2a8657c28392", "filename": "libgomp/testsuite/libgomp.c/atomic-2.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Flibgomp.c%2Fatomic-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Flibgomp.c%2Fatomic-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fatomic-2.c?ref=516f1ed8ca848d84a3cd991daef349a26cf7a37e", "patch": "@@ -1,7 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fopenmp\" } */\n-/* { dg-options \"-O2 -fopenmp -march=nocona\" { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O2 -fopenmp\" { target ilp32 } } */\n+/* { dg-options \"-O2 -mcx16\" { target { { i?86-*-* x86_64-*-* } && lp64 } } } */\n \n double d = 1.5;\n long double ld = 3;\n@@ -22,12 +20,11 @@ int\n main (void)\n {\n #ifdef __x86_64__\n-# define bit_SSE3 (1 << 0)\n # define bit_CX16 (1 << 13)\n   unsigned int ax, bx, cx, dx;\n   __asm__ (\"cpuid\" : \"=a\" (ax), \"=b\" (bx), \"=c\" (cx), \"=d\" (dx)\n            : \"0\" (1) : \"cc\");\n-  if ((cx & (bit_SSE3 | bit_CX16)) != (bit_SSE3 | bit_CX16))\n+  if (!(cx & bit_CX16))\n     return 0;\n #endif\n   test ();"}, {"sha": "9eaab6252c35893a0ca47d1458656db0d4d802ad", "filename": "libgomp/testsuite/libgomp.c/c.exp", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Flibgomp.c%2Fc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Flibgomp.c%2Fc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fc.exp?ref=516f1ed8ca848d84a3cd991daef349a26cf7a37e", "patch": "@@ -8,7 +8,7 @@ load_lib libgomp-dg.exp\n \n # If a testcase doesn't have special options, use these.\n if ![info exists DEFAULT_CFLAGS] then {\n-    set DEFAULT_CFLAGS \"-O2 -fopenmp\"\n+    set DEFAULT_CFLAGS \"-O2\"\n }\n \n # Initialize dg.\n@@ -17,6 +17,9 @@ dg-init\n # Gather a list of all tests.\n set tests [lsort [find $srcdir/$subdir *.c]]\n \n+set ld_library_path $always_ld_library_path\n+set_ld_library_path_env_vars\n+\n # Main loop.\n dg-runtest $tests \"\" $DEFAULT_CFLAGS\n "}, {"sha": "509c6322982bb07b5201177cb2aead825d2fff65", "filename": "libgomp/testsuite/libgomp.c/pr29947-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr29947-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr29947-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr29947-1.c?ref=516f1ed8ca848d84a3cd991daef349a26cf7a37e", "patch": "@@ -1,5 +1,5 @@\n /* PR libgomp/29947 */\n-/* { dg-options \"-O2 -fopenmp\" } */\n+\n /* { dg-do run } */\n \n extern void abort (void);"}, {"sha": "09749831173580839ff1cccc9e79a9c4c30872a1", "filename": "libgomp/testsuite/libgomp.c/pr29947-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr29947-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr29947-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr29947-2.c?ref=516f1ed8ca848d84a3cd991daef349a26cf7a37e", "patch": "@@ -1,5 +1,5 @@\n /* PR libgomp/29947 */\n-/* { dg-options \"-O2 -fopenmp\" } */\n+\n /* { dg-do run } */\n \n extern void abort (void);"}, {"sha": "a28133a7a7fe75a01b931383b5b05cb79e265f6b", "filename": "libgomp/testsuite/libgomp.fortran/fortran.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516f1ed8ca848d84a3cd991daef349a26cf7a37e/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp?ref=516f1ed8ca848d84a3cd991daef349a26cf7a37e", "patch": "@@ -12,6 +12,9 @@ if [file exists \"${blddir}/${lang_test_file}\"] {\n     # Gather a list of all tests.\n     set tests [lsort [find $srcdir/$subdir *.\\[fF\\]{,90,95,03}]]\n \n+    set ld_library_path [concat $always_ld_library_path \":${blddir}/${lang_library_path}\"]\n+    set_ld_library_path_env_vars\n+\n     # Main loop.\n     gfortran-dg-runtest $tests \"\"\n }"}]}