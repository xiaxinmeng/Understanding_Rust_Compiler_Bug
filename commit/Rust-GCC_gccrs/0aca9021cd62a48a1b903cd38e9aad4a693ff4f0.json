{"sha": "0aca9021cd62a48a1b903cd38e9aad4a693ff4f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFjYTkwMjFjZDYyYTQ4YTFiOTAzY2QzOGU5YWFkNGE2OTNmZjRmMA==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2005-08-13T20:52:01Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2005-08-13T20:52:01Z"}, "message": "Add missing docs for feature added by Richard Henderson.\n\n* doc/cpp.texi (__SSP__, __SSP_ALL__): Document.\n* doc/invoke.texi (-Wstack-protector, -fstack-protector,\n-fstack-protector-all, --param ssp-buffer-size): Document.\n(-Wvariadic-macros): Alphabetize.\n(-fsched-stalled-insns-dep): Add missing 'f'.\n\nFrom-SVN: r103057", "tree": {"sha": "43fcacb2f18c92b8397198436e18dc3b8b7f137b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43fcacb2f18c92b8397198436e18dc3b8b7f137b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0aca9021cd62a48a1b903cd38e9aad4a693ff4f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aca9021cd62a48a1b903cd38e9aad4a693ff4f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aca9021cd62a48a1b903cd38e9aad4a693ff4f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aca9021cd62a48a1b903cd38e9aad4a693ff4f0/comments", "author": null, "committer": null, "parents": [{"sha": "3256a76e621b4fd466ea9da5ce8de9a24a66aa0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3256a76e621b4fd466ea9da5ce8de9a24a66aa0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3256a76e621b4fd466ea9da5ce8de9a24a66aa0c"}], "stats": {"total": 47, "additions": 43, "deletions": 4}, "files": [{"sha": "f6243ce294cc1e99b86a117ddad9c6d1571bc96b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aca9021cd62a48a1b903cd38e9aad4a693ff4f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aca9021cd62a48a1b903cd38e9aad4a693ff4f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0aca9021cd62a48a1b903cd38e9aad4a693ff4f0", "patch": "@@ -1,3 +1,11 @@\n+2005-08-13  James E Wilson  <wilson@specifix.com>\n+\n+\t* doc/cpp.texi (__SSP__, __SSP_ALL__): Document.\n+\t* doc/invoke.texi (-Wstack-protector, -fstack-protector,\n+\t-fstack-protector-all, --param ssp-buffer-size): Document.\n+\t(-Wvariadic-macros): Alphabetize.\n+\t(-fsched-stalled-insns-dep): Add missing 'f'.\n+\n 2005-08-13  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.h (EXTRA_CONSTRAINT): Add 'a' for indexed"}, {"sha": "f5f29a6397b26a09581ec2af0c8eb01a7198cd87", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aca9021cd62a48a1b903cd38e9aad4a693ff4f0/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aca9021cd62a48a1b903cd38e9aad4a693ff4f0/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=0aca9021cd62a48a1b903cd38e9aad4a693ff4f0", "patch": "@@ -2117,6 +2117,15 @@ macro to determine which runtime (NeXT or GNU) is being used.\n These macros are defined, with value 1, if (and only if) the compilation\n is for a target where @code{long int} and pointer both use 64-bits and\n @code{int} uses 32-bit.\n+\n+@item __SSP__\n+This macro is defined, with value 1, when @option{-fstack-protector} is in\n+use.\n+\n+@item __SSP_ALL__\n+This macro is defined, with value 2, when @option{-fstack-protector-all} is\n+in use.\n+\n @end table\n \n @node System-specific Predefined Macros"}, {"sha": "643805c136e380c7117a8ae4adec2cd6334c7878", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aca9021cd62a48a1b903cd38e9aad4a693ff4f0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aca9021cd62a48a1b903cd38e9aad4a693ff4f0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0aca9021cd62a48a1b903cd38e9aad4a693ff4f0", "patch": "@@ -238,13 +238,14 @@ Objective-C and Objective-C++ Dialects}.\n -Wparentheses  -Wpointer-arith  -Wno-pointer-to-int-cast @gol\n -Wredundant-decls @gol\n -Wreturn-type  -Wsequence-point  -Wshadow @gol\n--Wsign-compare  -Wstrict-aliasing -Wstrict-aliasing=2 @gol\n+-Wsign-compare  -Wstack-protector @gol\n+-Wstrict-aliasing -Wstrict-aliasing=2 @gol\n -Wswitch  -Wswitch-default  -Wswitch-enum @gol\n -Wsystem-headers  -Wtrigraphs  -Wundef  -Wuninitialized @gol\n -Wunknown-pragmas  -Wno-pragmas -Wunreachable-code @gol\n -Wunused  -Wunused-function  -Wunused-label  -Wunused-parameter @gol\n--Wunused-value  -Wunused-variable  -Wwrite-strings @gol\n--Wvariadic-macros}\n+-Wunused-value  -Wunused-variable  -Wvariadic-macros @gol\n+-Wwrite-strings}\n \n @item C-only Warning Options\n @gccoptlist{-Wbad-function-cast  -Wmissing-declarations @gol\n@@ -322,10 +323,11 @@ Objective-C and Objective-C++ Dialects}.\n -frounding-math -fschedule-insns  -fschedule-insns2 @gol\n -fno-sched-interblock  -fno-sched-spec  -fsched-spec-load @gol\n -fsched-spec-load-dangerous  @gol\n--fsched-stalled-insns=@var{n} -sched-stalled-insns-dep=@var{n} @gol\n+-fsched-stalled-insns=@var{n} -fsched-stalled-insns-dep=@var{n} @gol\n -fsched2-use-superblocks @gol\n -fsched2-use-traces -freschedule-modulo-scheduled-loops @gol\n -fsignaling-nans -fsingle-precision-constant  @gol\n+-fstack-protector  -fstack-protector-all @gol\n -fstrength-reduce  -fstrict-aliasing  -ftracer  -fthread-jumps @gol\n -funroll-all-loops  -funroll-loops  -fpeel-loops @gol\n -fsplit-ivs-in-unroller -funswitch-loops @gol\n@@ -3362,6 +3364,11 @@ This option is only supported for C and Objective-C@.\n @item -Werror\n @opindex Werror\n Make all warnings into errors.\n+\n+@item -Wstack-protector\n+This option is only active when @option{-fstack-protector} is active.  It\n+warns about functions that will not be protected against stack smashing.\n+\n @end table\n \n @node Debugging Options\n@@ -5628,6 +5635,17 @@ threading.\n When performing branch target register load optimization, don't reuse\n branch target registers in within any basic block.\n \n+@item -fstack-protector\n+Emit extra code to check for buffer overflows, such as stack smashing\n+attacks.  This is done by adding a guard variable to functions with\n+vulnerable objects.  This includes functions that call alloca, and\n+functions with buffers larger than 8 bytes.  The guards are initialized\n+when a function is entered and then checked when the function exits.\n+If a guard check fails, an error message is printed and the program exits.\n+\n+@item -fstack-protector-all\n+Like @option{-fstack-protector} except that all functions are protected.\n+\n @item --param @var{name}=@var{value}\n @opindex param\n In some places, GCC uses various constants to control the amount of\n@@ -6003,6 +6021,10 @@ than the number of virtual symbols to be updated, then the incremental\n SSA updater switches to a full update for those symbols.  The default\n ratio is 3.\n \n+@item ssp-buffer-size\n+The minimum size of buffers (i.e. arrays) that will receive stack smashing\n+protection when @option{-fstack-protection} is used.\n+\n @end table\n @end table\n "}]}