{"sha": "743d4d827b8c8215adbe130592e84861c9d4a758", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQzZDRkODI3YjhjODIxNWFkYmUxMzA1OTJlODQ4NjFjOWQ0YTc1OA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2020-01-13T13:37:23Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2020-01-13T13:40:23Z"}, "message": "contrib: Add script to help with customizing a git checkout for use with GCC\n\nThis patch is intended to help with folks setting up a git work\nenvironment for use with GCC following the transition to git.  It\ncurrently does a couple of things.\n\n1) Add an alias 'svn-rev' to git so that you can look up a legacy\ncommit by its svn revision number.  This enables you to type\n\tgit svn-rev 1234\nand git will show the commit log entry relating to SVN r1234.\n\n2) Sets up tracking information for the user's personal area in\nthe git repo.  It tries to figure out some sensible answers to the\ndata it needs, but allows the user to override the values.  It then\ncreates the fetch and push entries that are needed for tracking the\nextra refs. This implements one part of the recommendations that I've\nproposed in svnwrite.html for dealing with private branches.\n\nIt should be possible to run the script more than once and for it to\nDTRT.  If you change your answers the configuration should be\ncorrectly updated.\n\n2020-01-13  Richard Earnshaw  <rearnsha@arm.com>\n\n    * gcc-git-customization: New file.", "tree": {"sha": "5eb51b408387cb86eb88fe4ea89266518e988c6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5eb51b408387cb86eb88fe4ea89266518e988c6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/743d4d827b8c8215adbe130592e84861c9d4a758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/743d4d827b8c8215adbe130592e84861c9d4a758", "html_url": "https://github.com/Rust-GCC/gccrs/commit/743d4d827b8c8215adbe130592e84861c9d4a758", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/743d4d827b8c8215adbe130592e84861c9d4a758/comments", "author": null, "committer": null, "parents": [{"sha": "12122f94b4dadcc096c97da13afbcbd13764e6e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12122f94b4dadcc096c97da13afbcbd13764e6e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12122f94b4dadcc096c97da13afbcbd13764e6e3"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "ddaff4fc6d8b44e89488e3f896cd47c97ff52999", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/743d4d827b8c8215adbe130592e84861c9d4a758/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/743d4d827b8c8215adbe130592e84861c9d4a758/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=743d4d827b8c8215adbe130592e84861c9d4a758", "patch": "@@ -1,3 +1,7 @@\n+2010-01-13  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* gcc-git-customization.sh: New file.\n+\n 2020-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* update-copyright.py: Add Mentor Graphics Corporation and Yoshinori"}, {"sha": "169c3a4d35607d9a49a824ec7eb208036e0c0678", "filename": "contrib/gcc-git-customization.sh", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/743d4d827b8c8215adbe130592e84861c9d4a758/contrib%2Fgcc-git-customization.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/743d4d827b8c8215adbe130592e84861c9d4a758/contrib%2Fgcc-git-customization.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-git-customization.sh?ref=743d4d827b8c8215adbe130592e84861c9d4a758", "patch": "@@ -0,0 +1,69 @@\n+#!/bin/sh\n+\n+# Script to add some local git customizations suitable for working\n+# with the GCC git repository\n+\n+ask () {\n+    question=$1\n+    default=$2\n+    var=$3\n+    echo -n $question \"[\"$default\"]? \"\n+    read answer\n+    if [ \"x$answer\" = \"x\" ]\n+    then\n+\teval $var=$default\n+    else\n+\teval $var=$answer\n+    fi\n+}\n+\n+# Add a git command to find the git commit equivalent to legacy SVN revision NNN\n+git config alias.svn-rev '!f() { rev=$1; shift; git log --all --grep=\"From-SVN: r\\\\?$rev\\\\b\" \"${@}\"; } ; f'\n+\n+# Make diff on MD files uses \"(define\" as a function marker.\n+# Use this in conjunction with a .gitattributes file containing\n+# *.md    diff=md\n+git config diff.md.xfuncname '^\\(define.*$'\n+\n+upstream=`git config --get \"gcc-config.upstream\"`\n+if [ \"x$upstream\" = \"x\" ]\n+then\n+    upstream=\"origin\"\n+fi\n+ask \"Local name for upstream repository\" \"origin\" upstream\n+git config \"gcc-config.upstream\" \"$upstream\"\n+\n+remote_id=`git config --get \"gcc-config.user\"`\n+if [ \"x$remote_id\" = \"x\" ]\n+then\n+    # See if the url specifies the remote user name.\n+    url=`git config --get \"remote.$upstream.url\"`\n+    if [ \"x$url\" = \"x\" ]\n+    then\n+\t# This is a pure guess, but for many people it might be OK.\n+\tremote_id=`whoami`\n+    else\n+\tremote_id=`echo $url | sed -r \"s|^.*ssh://(.+)@gcc.gnu.org.*$|\\1|\"`\n+\tif [ x$remote_id = x$url ]\n+\tthen\n+\t    remote_id=`whoami`\n+\tfi\n+    fi\n+fi\n+ask \"Account name on gcc.gnu.org\" $remote_id remote_id\n+git config \"gcc-config.user\" \"$remote_id\"\n+\n+old_pfx=`git config --get \"gcc-config.userpfx\"`\n+if [ \"x$old_pfx\" = \"x\" ]\n+then\n+    old_pfx=\"me\"\n+fi\n+echo \"Local branch prefix for personal branches you want to share\"\n+echo \"(local branches starting <prefix>/ can be pushed directly to your\"\n+ask \"personal area on the gcc server)\" $old_pfx new_pfx\n+git config \"gcc-config.userpfx\" \"$new_pfx\"\n+\n+echo \"Setting up tracking for personal namespace $remote_id in remotes/$upstream/${new_pfx}\"\n+git config --replace-all \"remote.${upstream}.fetch\" \"+refs/users/${remote_id}/heads/*:refs/remotes/${upstream}/${new_pfx}/*\" \":refs/remotes/${upstream}/${old_pfx}/\"\n+git config --replace-all \"remote.${upstream}.fetch\" \"+refs/users/${remote_id}/tags/*:refs/tags/${new_pfx}/*\" \":refs/tags/${old_pfx}/\"\n+git config --replace-all \"remote.${upstream}.push\" \"refs/heads/${new_pfx}/*:refs/users/${remote_id}/heads/*\" \"^\\+?refs/heads/${old_pfx}/\""}]}