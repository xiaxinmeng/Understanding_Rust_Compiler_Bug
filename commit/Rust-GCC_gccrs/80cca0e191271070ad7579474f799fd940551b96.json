{"sha": "80cca0e191271070ad7579474f799fd940551b96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBjY2EwZTE5MTI3MTA3MGFkNzU3OTQ3NGY3OTlmZDk0MDU1MWI5Ng==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-13T00:17:33Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-13T00:17:33Z"}, "message": "svr3.h (ASM_FILE_START): Wrap if-clause in squigly brackets.\n\n\t* svr3.h (ASM_FILE_START): Wrap if-clause in squigly brackets.\n\n\t* recog.c (memory_address_p): Mark parameter with ATTRIBUTE_UNUSED.\n\n\t* regclass.c (choose_hard_reg_mode): Likewise.\n\n\t* reload.c (find_valid_class, strict_memory_address_p): Likewise.\n\n\t* reorg.c (optimize_skip): Wrap prototype in macro conditionals.\n\nFrom-SVN: r31364", "tree": {"sha": "63fabd998fbe20363b0555c19b75c5f872e3a60d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63fabd998fbe20363b0555c19b75c5f872e3a60d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80cca0e191271070ad7579474f799fd940551b96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80cca0e191271070ad7579474f799fd940551b96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80cca0e191271070ad7579474f799fd940551b96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80cca0e191271070ad7579474f799fd940551b96/comments", "author": null, "committer": null, "parents": [{"sha": "07c88314a39910d41df1407040bb20022e815a0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c88314a39910d41df1407040bb20022e815a0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07c88314a39910d41df1407040bb20022e815a0d"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "0279b585e1b06535c37414a4af51b309dd960c76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cca0e191271070ad7579474f799fd940551b96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cca0e191271070ad7579474f799fd940551b96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80cca0e191271070ad7579474f799fd940551b96", "patch": "@@ -1,3 +1,15 @@\n+2000-01-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* svr3.h (ASM_FILE_START): Wrap if-clause in squigly brackets.\n+\n+\t* recog.c (memory_address_p): Mark parameter with ATTRIBUTE_UNUSED.\n+\n+\t* regclass.c (choose_hard_reg_mode): Likewise.\n+\n+\t* reload.c (find_valid_class, strict_memory_address_p): Likewise.\n+\n+\t* reorg.c (optimize_skip): Wrap prototype in macro conditionals.\n+\n 2000-01-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* c-common.c: PROTO -> PARAMS."}, {"sha": "e97bab7ac395576b2971c2db0173b51410a0f1e4", "filename": "gcc/config/svr3.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cca0e191271070ad7579474f799fd940551b96/gcc%2Fconfig%2Fsvr3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cca0e191271070ad7579474f799fd940551b96/gcc%2Fconfig%2Fsvr3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr3.h?ref=80cca0e191271070ad7579474f799fd940551b96", "patch": "@@ -61,7 +61,7 @@ Boston, MA 02111-1307, USA.\n #undef ASM_FILE_START\n #define ASM_FILE_START(FILE)\t\t\t\t\t\\\n   do { output_file_directive ((FILE), main_input_filename);\t\\\n-       if (optimize) ASM_FILE_START_1 (FILE);\t\t\t\\\n+       if (optimize) { ASM_FILE_START_1 (FILE); }\t\t\\\n      } while (0)\n \n /* By default, do nothing: a few machines support .optim, but not most.  */"}, {"sha": "9f8baa1cc72103182c7c9d29aecdf2b76bcbe3c0", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cca0e191271070ad7579474f799fd940551b96/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cca0e191271070ad7579474f799fd940551b96/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=80cca0e191271070ad7579474f799fd940551b96", "patch": "@@ -1230,7 +1230,7 @@ pop_operand (op, mode)\n \n int\n memory_address_p (mode, addr)\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n      register rtx addr;\n {\n   if (GET_CODE (addr) == ADDRESSOF)"}, {"sha": "12938ebb9b69245ce0ebc4e92c94ad9f15c35ff1", "filename": "gcc/regclass.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cca0e191271070ad7579474f799fd940551b96/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cca0e191271070ad7579474f799fd940551b96/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=80cca0e191271070ad7579474f799fd940551b96", "patch": "@@ -553,7 +553,7 @@ memory_move_secondary_cost (mode, class, in)\n \n enum machine_mode\n choose_hard_reg_mode (regno, nregs)\n-     int regno;\n+     int regno ATTRIBUTE_UNUSED;\n      int nregs;\n {\n   enum machine_mode found_mode = VOIDmode, mode;"}, {"sha": "db21e3e57bb1650659ab2a106f788318aee346aa", "filename": "gcc/reload.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cca0e191271070ad7579474f799fd940551b96/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cca0e191271070ad7579474f799fd940551b96/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=80cca0e191271070ad7579474f799fd940551b96", "patch": "@@ -652,7 +652,7 @@ clear_secondary_mem ()\n \n static enum reg_class\n find_valid_class (m1, n)\n-     enum machine_mode  m1;\n+     enum machine_mode m1 ATTRIBUTE_UNUSED;\n      int n;\n {\n   int class;\n@@ -1975,7 +1975,7 @@ hard_reg_set_here_p (beg_regno, end_regno, x)\n \n int\n strict_memory_address_p (mode, addr)\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n      register rtx addr;\n {\n   GO_IF_LEGITIMATE_ADDRESS (mode, addr, win);"}, {"sha": "ece6e962493bd2074f375cf5f613bc8b292c66b1", "filename": "gcc/reorg.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cca0e191271070ad7579474f799fd940551b96/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cca0e191271070ad7579474f799fd940551b96/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=80cca0e191271070ad7579474f799fd940551b96", "patch": "@@ -188,7 +188,9 @@ static rtx add_to_delay_list\t\tPROTO((rtx, rtx));\n static rtx delete_from_delay_slot\tPROTO((rtx));\n static void delete_scheduled_jump\tPROTO((rtx));\n static void note_delay_statistics\tPROTO((int, int));\n+#if defined(ANNUL_IFFALSE_SLOTS) || defined(ANNUL_IFTRUE_SLOTS)\n static rtx optimize_skip\t\tPROTO((rtx));\n+#endif\n static int get_jump_flags\t\tPROTO((rtx, rtx));\n static int rare_destination\t\tPROTO((rtx));\n static int mostly_true_jump\t\tPROTO((rtx, rtx));"}]}