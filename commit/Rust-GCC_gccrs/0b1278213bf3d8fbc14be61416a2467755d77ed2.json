{"sha": "0b1278213bf3d8fbc14be61416a2467755d77ed2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIxMjc4MjEzYmYzZDhmYmMxNGJlNjE0MTZhMjQ2Nzc1NWQ3N2VkMg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-04T19:41:50Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-04T19:41:50Z"}, "message": "(convert_to_real): Convert complex to real.\n\n(convert_to_integer): Likewise.\n(convert_to_complex): New function.\n\nFrom-SVN: r3639", "tree": {"sha": "1396953bff690257dd47bbfaee1b0d5513f7a778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1396953bff690257dd47bbfaee1b0d5513f7a778"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b1278213bf3d8fbc14be61416a2467755d77ed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1278213bf3d8fbc14be61416a2467755d77ed2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b1278213bf3d8fbc14be61416a2467755d77ed2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1278213bf3d8fbc14be61416a2467755d77ed2/comments", "author": null, "committer": null, "parents": [{"sha": "766f6c304d4173d2b279d29dd096e8aec4fbacc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/766f6c304d4173d2b279d29dd096e8aec4fbacc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/766f6c304d4173d2b279d29dd096e8aec4fbacc8"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "f4e6efa88d56658a9cff92d685412296c4f643a8", "filename": "gcc/convert.c", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1278213bf3d8fbc14be61416a2467755d77ed2/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1278213bf3d8fbc14be61416a2467755d77ed2/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=0b1278213bf3d8fbc14be61416a2467755d77ed2", "patch": "@@ -86,6 +86,10 @@ convert_to_real (type, expr)\n   if (form == INTEGER_TYPE || form == ENUMERAL_TYPE)\n     return build1 (FLOAT_EXPR, type, expr);\n \n+  if (form == COMPLEX_TYPE)\n+    return convert (type, fold (build1 (REALPART_EXPR,\n+\t\t\t\t\tTREE_TYPE (TREE_TYPE (expr)), expr)));\n+\n   if (form == POINTER_TYPE)\n     error (\"pointer value used where a floating point value was expected\");\n   else\n@@ -360,6 +364,10 @@ convert_to_integer (type, expr)\n   if (form == REAL_TYPE)\n     return build1 (FIX_TRUNC_EXPR, type, expr);\n \n+  if (form == COMPLEX_TYPE)\n+    return convert (type, fold (build1 (REALPART_EXPR,\n+\t\t\t\t\tTREE_TYPE (TREE_TYPE (expr)), expr)));\n+\n   error (\"aggregate value used where an integer was expected\");\n \n   {\n@@ -368,3 +376,50 @@ convert_to_integer (type, expr)\n     return tem;\n   }\n }\n+\n+/* Convert EXPR to the complex type TYPE in the usual ways.  */\n+\n+tree\n+convert_to_complex (type, expr)\n+     tree type, expr;\n+{\n+  register enum tree_code form = TREE_CODE (TREE_TYPE (expr));\n+  tree subtype = TREE_TYPE (type);\n+  \n+  if (form == REAL_TYPE || form == INTEGER_TYPE || form == ENUMERAL_TYPE)\n+    {\n+      expr = convert (subtype, expr);\n+      return build (COMPLEX_EXPR, type, expr,\n+\t\t    convert (subtype, integer_zero_node));\n+    }\n+\n+  if (form == COMPLEX_TYPE)\n+    {\n+      if (comptypes (TREE_TYPE (type), TREE_TYPE (TREE_TYPE (expr))))\n+\treturn expr;\n+      else if (TREE_CODE (expr) == COMPLEX_EXPR)\n+\treturn fold (build (COMPLEX_EXPR,\n+\t\t\t    type,\n+\t\t\t    convert (subtype, TREE_OPERAND (expr, 0)),\n+\t\t\t    convert (subtype, TREE_OPERAND (expr, 1))));\n+      else\n+\t{\n+\t  expr = save_expr (expr);\n+\t  return fold (build (COMPLEX_EXPR,\n+\t\t\t      type,\n+\t\t\t      convert (subtype,\n+\t\t\t\t       build_unary_op (REALPART_EXPR, expr, 1)),\n+\t\t\t      convert (subtype,\n+\t\t\t\t       build_unary_op (IMAGPART_EXPR, expr, 1))));\n+\t}\n+    }\n+\n+  if (form == POINTER_TYPE)\n+    error (\"pointer value used where a complex was expected\");\n+  else\n+    error (\"aggregate value used where a complex was expected\");\n+  \n+  return build (COMPLEX_EXPR, type,\n+\t\tconvert (subtype, integer_zero_node),\n+\t\tconvert (subtype, integer_zero_node));\n+}"}]}