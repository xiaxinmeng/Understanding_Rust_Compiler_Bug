{"sha": "bcd49eb7a878144a4990385d764e2cbfafc1016a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNkNDllYjdhODc4MTQ0YTQ5OTAzODVkNzY0ZTJjYmZhZmMxMDE2YQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-05-01T23:43:28Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-05-01T23:43:28Z"}, "message": "(combine_instrutions): Set subst_prev_insn to zero.\n\n(try_combine, undo_all): Likewise.\n(get_last_value): Return zero if subst_prev_insn set.\n\nFrom-SVN: r9559", "tree": {"sha": "2b54ab1a4e06bf7c0ac2f7d56205c6d4bd37e4f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b54ab1a4e06bf7c0ac2f7d56205c6d4bd37e4f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcd49eb7a878144a4990385d764e2cbfafc1016a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcd49eb7a878144a4990385d764e2cbfafc1016a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcd49eb7a878144a4990385d764e2cbfafc1016a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcd49eb7a878144a4990385d764e2cbfafc1016a/comments", "author": null, "committer": null, "parents": [{"sha": "474281900548189362ca6c5bf20d2a345e5bc6bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/474281900548189362ca6c5bf20d2a345e5bc6bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/474281900548189362ca6c5bf20d2a345e5bc6bf"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "229479fd14514df2e26a6104a30d028738989716", "filename": "gcc/combine.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcd49eb7a878144a4990385d764e2cbfafc1016a/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcd49eb7a878144a4990385d764e2cbfafc1016a/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=bcd49eb7a878144a4990385d764e2cbfafc1016a", "patch": "@@ -518,6 +518,10 @@ combine_instructions (f, nregs)\n \n   label_tick = 1;\n \n+  /* We need to initialize it here, because record_dead_and_set_regs may call\n+     get_last_value.  */\n+  subst_prev_insn = NULL_RTX;\n+\n   setup_incoming_promotions ();\n \n   for (insn = f, i = 0; insn; insn = NEXT_INSN (insn))\n@@ -2337,6 +2341,10 @@ try_combine (i3, i2, i1)\n \n   combine_successes++;\n \n+  /* Clear this here, so that subsequent get_last_value calls are not\n+     affected.  */\n+  subst_prev_insn = NULL_RTX;\n+\n   if (added_links_insn\n       && (newi2pat == 0 || INSN_CUID (added_links_insn) < INSN_CUID (i2))\n       && INSN_CUID (added_links_insn) < INSN_CUID (i3))\n@@ -2364,6 +2372,10 @@ undo_all ()\n \n   obfree (undobuf.storage);\n   undobuf.num_undo = 0;\n+\n+  /* Clear this here, so that subsequent get_last_value calls are not\n+     affected.  */\n+  subst_prev_insn = NULL_RTX;\n }\n \f\n /* Find the innermost point within the rtx at LOC, possibly LOC itself,\n@@ -9965,10 +9977,15 @@ get_last_value (x)\n      This does not work if there exists an instruction which is temporarily\n      not on the insn chain.  */\n \n-  if (INSN_CUID (reg_last_set[regno]) >= subst_low_cuid && ! subst_prev_insn)\n+  if (INSN_CUID (reg_last_set[regno]) >= subst_low_cuid)\n     {\n       rtx insn, set;\n \n+      /* We can not do anything useful in this case, because there is\n+\t an instruction which is not on the insn chain.  */\n+      if (subst_prev_insn)\n+\treturn 0;\n+\n       /* Skip over USE insns.  They are not useful here, and they may have\n \t been made by combine, in which case they do not have a INSN_CUID\n \t value.  We can't use prev_real_insn, because that would incorrectly"}]}