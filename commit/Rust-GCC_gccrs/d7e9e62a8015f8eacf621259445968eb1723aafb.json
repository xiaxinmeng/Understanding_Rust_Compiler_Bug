{"sha": "d7e9e62a8015f8eacf621259445968eb1723aafb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdlOWU2MmE4MDE1ZjhlYWNmNjIxMjU5NDQ1OTY4ZWIxNzIzYWFmYg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-09-23T10:54:07Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-09-23T10:54:07Z"}, "message": "* cfgexpand.c, config/s390/tpf-eh.c: Fix comment typos.\n\nFrom-SVN: r87939", "tree": {"sha": "44b339990540efd8ebf3e786fad5287ca0287c58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44b339990540efd8ebf3e786fad5287ca0287c58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7e9e62a8015f8eacf621259445968eb1723aafb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7e9e62a8015f8eacf621259445968eb1723aafb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7e9e62a8015f8eacf621259445968eb1723aafb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7e9e62a8015f8eacf621259445968eb1723aafb/comments", "author": null, "committer": null, "parents": [{"sha": "98d6e9afea98c81a0cb3fa9e1d5622d474dd52e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98d6e9afea98c81a0cb3fa9e1d5622d474dd52e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98d6e9afea98c81a0cb3fa9e1d5622d474dd52e1"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "704bcaf5bc080ccf4d7094ad42677f1b7d7376f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7e9e62a8015f8eacf621259445968eb1723aafb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7e9e62a8015f8eacf621259445968eb1723aafb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7e9e62a8015f8eacf621259445968eb1723aafb", "patch": "@@ -1,3 +1,7 @@\n+2004-09-23  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* cfgexpand.c, config/s390/tpf-eh.c: Fix comment typos.\n+\n 2004-09-22  Eric Christopher  <echristo@redhat.com>\n \n \t* builtins.c (simplify_builtin_va_start): Remove."}, {"sha": "5d6c56e9bbbaaf3b3b1de46be0f82fea4cf9234e", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7e9e62a8015f8eacf621259445968eb1723aafb/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7e9e62a8015f8eacf621259445968eb1723aafb/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=d7e9e62a8015f8eacf621259445968eb1723aafb", "patch": "@@ -41,8 +41,8 @@ Boston, MA 02111-1307, USA.  */\n /* Verify that there is exactly single jump instruction since last and attach\n    REG_BR_PROB note specifying probability.\n    ??? We really ought to pass the probability down to RTL expanders and let it\n-   re-distribute it when the conditional expands into multiple coniditionals.\n-   This is however dificult to do.  */\n+   re-distribute it when the conditional expands into multiple conditionals.\n+   This is however difficult to do.  */\n static void\n add_reg_br_prob_note (FILE *dump_file, rtx last, int probability)\n {"}, {"sha": "788857da26f72cf8f5615e4c1a96fead70d73078", "filename": "gcc/config/s390/tpf-eh.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7e9e62a8015f8eacf621259445968eb1723aafb/gcc%2Fconfig%2Fs390%2Ftpf-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7e9e62a8015f8eacf621259445968eb1723aafb/gcc%2Fconfig%2Fs390%2Ftpf-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ftpf-eh.c?ref=d7e9e62a8015f8eacf621259445968eb1723aafb", "patch": "@@ -64,7 +64,7 @@ unsigned int __isPATrange(void *addr)\n /* Function Name: __tpf_eh_return\n    Parameters passed into it: Destination address to jump to.\n    Return Value: Converted Destination address if a Pat Stub exists.\n-   Description: This function swaps the uwinding return address\n+   Description: This function swaps the unwinding return address\n       with the cp stub code.  The original target return address is\n       then stored into the tpf return address field.  The cp stub\n       code is searched for by climbing back up the stack and\n@@ -158,7 +158,7 @@ void *__tpf_eh_return (void *target)\n                      the exception handling unwinder so that it can \n                      actually do the \"leap\" shift out the low order \n                      bit designated to determine if we are in 64BIT mode.\n-                     This is nececcary for CTOA stubs.\n+                     This is necessary for CTOA stubs.\n                      Otherwise we leap one byte past where we want to \n                      go to in the TPF pat stub linkage code.  */\n                   shifter = *((unsigned long int *) "}]}