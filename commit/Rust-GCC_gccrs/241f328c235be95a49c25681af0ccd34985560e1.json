{"sha": "241f328c235be95a49c25681af0ccd34985560e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQxZjMyOGMyMzViZTk1YTQ5YzI1NjgxYWYwY2NkMzQ5ODU1NjBlMQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2017-04-25T12:55:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T12:55:11Z"}, "message": "sem_ch6.adb (Analyze_Expression_Function): If expression function is completion and return type is an access type do not...\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Expression_Function): If expression function\n\tis completion and return type is an access type do not freeze\n\tdesignated type: this will be done in the process of freezing\n\tthe expression if needed.\n\t(Freeze_Expr_Types): Check whether type is complete before\n\tcreating freeze node, to provide a better error message if\n\treference is premature.\n\t* sem_ch13.adb (Check_Indexing_Functions): Ignore inherited\n\tfunctions created by type derivations.\n\nFrom-SVN: r247217", "tree": {"sha": "8860275e8bae54d1d275bb2ba9be887583b2cf42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8860275e8bae54d1d275bb2ba9be887583b2cf42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/241f328c235be95a49c25681af0ccd34985560e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/241f328c235be95a49c25681af0ccd34985560e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/241f328c235be95a49c25681af0ccd34985560e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/241f328c235be95a49c25681af0ccd34985560e1/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cccb761bc29d4c32a24c79d68ef9ac76308d54fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cccb761bc29d4c32a24c79d68ef9ac76308d54fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cccb761bc29d4c32a24c79d68ef9ac76308d54fc"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "da7cb6f00ffdfdcc0bbbaabc43d33dfe6521c03b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241f328c235be95a49c25681af0ccd34985560e1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241f328c235be95a49c25681af0ccd34985560e1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=241f328c235be95a49c25681af0ccd34985560e1", "patch": "@@ -1,3 +1,15 @@\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Expression_Function): If expression function\n+\tis completion and return type is an access type do not freeze\n+\tdesignated type: this will be done in the process of freezing\n+\tthe expression if needed.\n+\t(Freeze_Expr_Types): Check whether type is complete before\n+\tcreating freeze node, to provide a better error message if\n+\treference is premature.\n+\t* sem_ch13.adb (Check_Indexing_Functions): Ignore inherited\n+\tfunctions created by type derivations.\n+\n 2017-04-25  Pascal Obry  <obry@adacore.com>\n \n \t* g-sercom.ads: Add simple usage of GNAT.Serial_Communication."}, {"sha": "16a586b34222cd502b8259441ca339f409488610", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241f328c235be95a49c25681af0ccd34985560e1/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241f328c235be95a49c25681af0ccd34985560e1/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=241f328c235be95a49c25681af0ccd34985560e1", "patch": "@@ -4374,7 +4374,15 @@ package body Sem_Ch13 is\n                   --  subprogram itself.\n \n                   if Is_Overloadable (It.Nam) then\n-                     Check_One_Function (It.Nam);\n+\n+                     --  Ignore homonyms that may come from derived types\n+                     --  in the context.\n+\n+                     if not Comes_From_Source (It.Nam) then\n+                        null;\n+                     else\n+                        Check_One_Function (It.Nam);\n+                     end if;\n                   end if;\n \n                   Get_Next_Interp (I, It);"}, {"sha": "e8f29df64b0ca6a2b1f6c225510bdf63ed605908", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241f328c235be95a49c25681af0ccd34985560e1/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241f328c235be95a49c25681af0ccd34985560e1/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=241f328c235be95a49c25681af0ccd34985560e1", "patch": "@@ -403,10 +403,6 @@ package body Sem_Ch6 is\n             end if;\n          end if;\n \n-         if Is_Access_Type (Etype (Prev)) then\n-            Freeze_Before (N, Designated_Type (Etype (Prev)));\n-         end if;\n-\n          --  For navigation purposes, indicate that the function is a body\n \n          Generate_Reference (Prev, Defining_Entity (N), 'b', Force => True);\n@@ -3089,7 +3085,27 @@ package body Sem_Ch6 is\n                elsif Ekind_In (Entity (Node), E_Component,\n                                               E_Discriminant)\n                then\n-                  Freeze_Before (N, Scope (Entity (Node)));\n+                  declare\n+                     Rec : constant Entity_Id := Scope (Entity (Node));\n+                  begin\n+\n+                     --  Check that the enclosing record type can be frozen.\n+                     --  This provides a better error message than generating\n+                     --  primitives whose compilation fails much later.\n+                     --  Refine the error message if possible.\n+\n+                     Check_Fully_Declared (Rec, Node);\n+\n+                     if Error_Posted (Node) then\n+                        if Has_Private_Component (Rec) then\n+                           Error_Msg_NE (\"\\type& has private component\",\n+                             Node, Rec);\n+                        end if;\n+\n+                     else\n+                        Freeze_Before (N, Rec);\n+                     end if;\n+                  end;\n                end if;\n             end if;\n "}]}