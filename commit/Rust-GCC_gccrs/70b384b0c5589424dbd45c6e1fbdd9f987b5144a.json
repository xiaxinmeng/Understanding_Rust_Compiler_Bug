{"sha": "70b384b0c5589424dbd45c6e1fbdd9f987b5144a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBiMzg0YjBjNTU4OTQyNGRiZDQ1YzZlMWZiZGQ5Zjk4N2I1MTQ0YQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-01-12T02:32:39Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-01-12T02:32:39Z"}, "message": "com.c (ffecom_convert_narrow_, [...]): Convert to ISO C style function definitions.\n\n\t* com.c (ffecom_convert_narrow_, ffecom_convert_widen_,\n\tpushdecl_top_level, storedecls, convert, delete_block,\n\tinsert_block, ffe_init, ffe_mark_addressable, poplevel,\n\tffe_print_identifier, pushdecl, pushlevel, set_block,\n\tffe_signed_or_unsigned_type, ffe_signed_type,\n\tffe_truthvalue_conversion, ffe_type_for_mode, ffe_type_for_size,\n\tffe_unsigned_type, append_include_chain, open_include_file,\n\tread_filename_string, read_name_map): Convert to ISO C style function\n\tdefinitions.\n\t* parse.c (ffe_parse_file): Likewise.\n\t* top.c (ffe_is_digit_string_): Likewise.\n\nFrom-SVN: r61219", "tree": {"sha": "ec3b99b3bf3534801ef39a4e8d5e10536ba9671e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec3b99b3bf3534801ef39a4e8d5e10536ba9671e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70b384b0c5589424dbd45c6e1fbdd9f987b5144a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b384b0c5589424dbd45c6e1fbdd9f987b5144a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70b384b0c5589424dbd45c6e1fbdd9f987b5144a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b384b0c5589424dbd45c6e1fbdd9f987b5144a/comments", "author": null, "committer": null, "parents": [{"sha": "0a2f0c5497342d01717c93db97aeb5318c3ec42c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a2f0c5497342d01717c93db97aeb5318c3ec42c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a2f0c5497342d01717c93db97aeb5318c3ec42c"}], "stats": {"total": 102, "additions": 40, "deletions": 62}, "files": [{"sha": "4e649c0b04ea70e93a2dfb4ac3c3b3a9b27ff0dd", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b384b0c5589424dbd45c6e1fbdd9f987b5144a/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b384b0c5589424dbd45c6e1fbdd9f987b5144a/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=70b384b0c5589424dbd45c6e1fbdd9f987b5144a", "patch": "@@ -1,3 +1,17 @@\n+Sat Jan 11 21:31:10 2003  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* com.c (ffecom_convert_narrow_, ffecom_convert_widen_,\n+\tpushdecl_top_level, storedecls, convert, delete_block,\n+\tinsert_block, ffe_init, ffe_mark_addressable, poplevel,\n+\tffe_print_identifier, pushdecl, pushlevel, set_block,\n+\tffe_signed_or_unsigned_type, ffe_signed_type,\n+\tffe_truthvalue_conversion, ffe_type_for_mode, ffe_type_for_size,\n+\tffe_unsigned_type, append_include_chain, open_include_file,\n+\tread_filename_string, read_name_map): Convert to ISO C style function\n+\tdefinitions.\n+\t* parse.c (ffe_parse_file): Likewise.\n+\t* top.c (ffe_is_digit_string_): Likewise.\n+\n 2003-01-09  Christian Cornelssen  <ccorn@cs.tu-berlin.de>\n \n \t* Make-lang.in (f77.install-common, f77.install-info,"}, {"sha": "4598b4ff94e6e78e1af90eb1d2160f288cf1aed3", "filename": "gcc/f/com.c", "status": "modified", "additions": 24, "deletions": 57, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b384b0c5589424dbd45c6e1fbdd9f987b5144a/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b384b0c5589424dbd45c6e1fbdd9f987b5144a/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=70b384b0c5589424dbd45c6e1fbdd9f987b5144a", "patch": "@@ -1109,8 +1109,7 @@ ffecom_convert_to_complex_ (tree type, tree expr)\n /* Like gcc's convert(), but crashes if widening might happen.  */\n \n static tree\n-ffecom_convert_narrow_ (type, expr)\n-     tree type, expr;\n+ffecom_convert_narrow_ (tree type, tree expr)\n {\n   register tree e = expr;\n   register enum tree_code code = TREE_CODE (type);\n@@ -1180,8 +1179,7 @@ ffecom_convert_narrow_ (type, expr)\n /* Like gcc's convert(), but crashes if narrowing might happen.  */\n \n static tree\n-ffecom_convert_widen_ (type, expr)\n-     tree type, expr;\n+ffecom_convert_widen_ (tree type, tree expr)\n {\n   register tree e = expr;\n   register enum tree_code code = TREE_CODE (type);\n@@ -13751,8 +13749,7 @@ push_parm_decl (tree parm)\n /* Like pushdecl, only it places X in GLOBAL_BINDING_LEVEL, if appropriate.  */\n \n static tree\n-pushdecl_top_level (x)\n-     tree x;\n+pushdecl_top_level (tree x)\n {\n   register tree t;\n   register struct f_binding_level *b = current_binding_level;\n@@ -13771,8 +13768,7 @@ pushdecl_top_level (x)\n    after they are modified in the light of any missing parameters.  */\n \n static tree\n-storedecls (decls)\n-     tree decls;\n+storedecls (tree decls)\n {\n   return current_binding_level->names = decls;\n }\n@@ -13936,8 +13932,7 @@ start_function (tree name, tree type, int nested, int public)\n /* Here are the public functions the GNU back end needs.  */\n \n tree\n-convert (type, expr)\n-     tree type, expr;\n+convert (tree type, tree expr)\n {\n   register tree e = expr;\n   register enum tree_code code = TREE_CODE (type);\n@@ -14008,8 +14003,7 @@ ffecom_init_decl_processing ()\n    so that the block can be reinserted where appropriate.  */\n \n static void\n-delete_block (block)\n-     tree block;\n+delete_block (tree block)\n {\n   tree t;\n   if (current_binding_level->blocks == block)\n@@ -14028,8 +14022,7 @@ delete_block (block)\n }\n \n void\n-insert_block (block)\n-     tree block;\n+insert_block (tree block)\n {\n   TREE_USED (block) = 1;\n   current_binding_level->blocks\n@@ -14123,8 +14116,7 @@ const char *const tree_code_name[] = {\n #undef DEFTREECODE\n \n static const char *\n-ffe_init (filename)\n-     const char *filename;\n+ffe_init (const char *filename)\n {\n   /* Open input file.  */\n   if (filename == 0 || !strcmp (filename, \"-\"))\n@@ -14183,8 +14175,7 @@ ffe_init_options ()\n }\n \n static bool\n-ffe_mark_addressable (exp)\n-     tree exp;\n+ffe_mark_addressable (tree exp)\n {\n   register tree x = exp;\n   while (1)\n@@ -14254,10 +14245,7 @@ ffe_mark_addressable (exp)\n    them into the BLOCK.  */\n \n tree\n-poplevel (keep, reverse, functionbody)\n-     int keep;\n-     int reverse;\n-     int functionbody;\n+poplevel (int keep, int reverse, int functionbody)\n {\n   register tree link;\n   /* The chain of decls was accumulated in reverse order.\n@@ -14393,10 +14381,7 @@ poplevel (keep, reverse, functionbody)\n }\n \n static void\n-ffe_print_identifier (file, node, indent)\n-     FILE *file;\n-     tree node;\n-     int indent;\n+ffe_print_identifier (FILE *file, tree node, int indent)\n {\n   print_node (file, \"global\", IDENTIFIER_GLOBAL_VALUE (node), indent + 4);\n   print_node (file, \"local\", IDENTIFIER_LOCAL_VALUE (node), indent + 4);\n@@ -14411,8 +14396,7 @@ ffe_print_identifier (file, node, indent)\n    to agree with what X says.  */\n \n tree\n-pushdecl (x)\n-     tree x;\n+pushdecl (tree x)\n {\n   register tree t;\n   register tree name = DECL_NAME (x);\n@@ -14545,8 +14529,7 @@ kept_level_p ()\n    not for that of tags.  */\n \n void\n-pushlevel (tag_transparent)\n-     int tag_transparent;\n+pushlevel (int tag_transparent)\n {\n   register struct f_binding_level *newlevel = NULL_BINDING_LEVEL;\n \n@@ -14581,8 +14564,7 @@ pushlevel (tag_transparent)\n    (the one we are currently in).  */\n \n void\n-set_block (block)\n-     register tree block;\n+set_block (tree block)\n {\n   current_binding_level->this_block = block;\n   current_binding_level->names = chainon (current_binding_level->names,\n@@ -14592,9 +14574,7 @@ set_block (block)\n }\n \n static tree\n-ffe_signed_or_unsigned_type (unsignedp, type)\n-     int unsignedp;\n-     tree type;\n+ffe_signed_or_unsigned_type (int unsignedp, tree type)\n {\n   tree type2;\n \n@@ -14620,8 +14600,7 @@ ffe_signed_or_unsigned_type (unsignedp, type)\n }\n \n static tree\n-ffe_signed_type (type)\n-     tree type;\n+ffe_signed_type (tree type)\n {\n   tree type1 = TYPE_MAIN_VARIANT (type);\n   ffeinfoKindtype kt;\n@@ -14675,8 +14654,7 @@ ffe_signed_type (type)\n    The resulting type should always be `integer_type_node'.  */\n \n static tree\n-ffe_truthvalue_conversion (expr)\n-     tree expr;\n+ffe_truthvalue_conversion (tree expr)\n {\n   if (TREE_CODE (expr) == ERROR_MARK)\n     return expr;\n@@ -14854,9 +14832,7 @@ ffe_truthvalue_conversion (expr)\n }\n \n static tree\n-ffe_type_for_mode (mode, unsignedp)\n-     enum machine_mode mode;\n-     int unsignedp;\n+ffe_type_for_mode (enum machine_mode mode, int unsignedp)\n {\n   int i;\n   int j;\n@@ -14914,9 +14890,7 @@ ffe_type_for_mode (mode, unsignedp)\n }\n \n static tree\n-ffe_type_for_size (bits, unsignedp)\n-     unsigned bits;\n-     int unsignedp;\n+ffe_type_for_size (unsigned bits, int unsignedp)\n {\n   ffeinfoKindtype kt;\n   tree type_node;\n@@ -14950,8 +14924,7 @@ ffe_type_for_size (bits, unsignedp)\n }\n \n static tree\n-ffe_unsigned_type (type)\n-     tree type;\n+ffe_unsigned_type (tree type)\n {\n   tree type1 = TYPE_MAIN_VARIANT (type);\n   ffeinfoKindtype kt;\n@@ -15091,8 +15064,7 @@ static struct file_name_map *read_name_map (const char *dirname);\n    FIRST is the beginning of the chain to append, and LAST is the end.  */\n \n static void\n-append_include_chain (first, last)\n-     struct file_name_list *first, *last;\n+append_include_chain (struct file_name_list *first, struct file_name_list *last)\n {\n   struct file_name_list *dir;\n \n@@ -15122,9 +15094,7 @@ append_include_chain (first, last)\n    read_name_map.  */\n \n static FILE *\n-open_include_file (filename, searchptr)\n-     char *filename;\n-     struct file_name_list *searchptr;\n+open_include_file (char *filename, struct file_name_list *searchptr)\n {\n   register struct file_name_map *map;\n   register char *from;\n@@ -15261,9 +15231,7 @@ print_containing_files (ffebadSeverity sev)\n    file.  */\n \n static char *\n-read_filename_string (ch, f)\n-     int ch;\n-     FILE *f;\n+read_filename_string (int ch, FILE *f)\n {\n   char *alloc, *set;\n   int len;\n@@ -15292,8 +15260,7 @@ read_filename_string (ch, f)\n /* Read the file name map file for DIRNAME.  */\n \n static struct file_name_map *\n-read_name_map (dirname)\n-     const char *dirname;\n+read_name_map (const char *dirname)\n {\n   /* This structure holds a linked list of file name maps, one per\n      directory.  */"}, {"sha": "e21dcce87b20dcb12146802c45a4fcbb742ca33c", "filename": "gcc/f/parse.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b384b0c5589424dbd45c6e1fbdd9f987b5144a/gcc%2Ff%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b384b0c5589424dbd45c6e1fbdd9f987b5144a/gcc%2Ff%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fparse.c?ref=70b384b0c5589424dbd45c6e1fbdd9f987b5144a", "patch": "@@ -29,8 +29,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n extern FILE *finput;\n \n void\n-ffe_parse_file (set_yydebug)\n-     int set_yydebug ATTRIBUTE_UNUSED;\n+ffe_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n {\n   ffewhereFile wf;\n "}, {"sha": "8cf217ed42a43a3a936fa344e7f9f4c1c6baa2c7", "filename": "gcc/f/top.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b384b0c5589424dbd45c6e1fbdd9f987b5144a/gcc%2Ff%2Ftop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b384b0c5589424dbd45c6e1fbdd9f987b5144a/gcc%2Ff%2Ftop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftop.c?ref=70b384b0c5589424dbd45c6e1fbdd9f987b5144a", "patch": "@@ -157,9 +157,7 @@ ffe_is_digit_string_ (char *s)\n    recognized and handled.  */\n \n int\n-ffe_decode_option (argc, argv)\n-     int argc ATTRIBUTE_UNUSED;\n-     char **argv;\n+ffe_decode_option (int argc ATTRIBUTE_UNUSED, char **argv)\n {\n   char *opt = argv[0];\n   if (opt[0] != '-')"}]}