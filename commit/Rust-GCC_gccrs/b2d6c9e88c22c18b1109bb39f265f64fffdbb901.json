{"sha": "b2d6c9e88c22c18b1109bb39f265f64fffdbb901", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJkNmM5ZTg4YzIyYzE4YjExMDliYjM5ZjI2NWY2NGZmZmRiYjkwMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-02-20T22:41:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-02-20T22:41:26Z"}, "message": "re PR tree-optimization/88074 (g++ hangs on math expression)\n\n\tPR middle-end/88074\n\tPR middle-end/89415\n\t* toplev.c (do_compile): Double the emin/emax exponents to workaround\n\tbuggy mpc_norm.\n\n\t* gcc.dg/pr88074-2.c: New test.\n\nFrom-SVN: r269055", "tree": {"sha": "bcb70f7063bd66f7d8aa1217e5cf490b3555fb64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcb70f7063bd66f7d8aa1217e5cf490b3555fb64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2d6c9e88c22c18b1109bb39f265f64fffdbb901", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2d6c9e88c22c18b1109bb39f265f64fffdbb901", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2d6c9e88c22c18b1109bb39f265f64fffdbb901", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2d6c9e88c22c18b1109bb39f265f64fffdbb901/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5a32f1ae9300e3fa4c4d8d59bc178aec6600c19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5a32f1ae9300e3fa4c4d8d59bc178aec6600c19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5a32f1ae9300e3fa4c4d8d59bc178aec6600c19"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "1babbc7c036964cc3a679e763f00f8ef56d7e4e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2d6c9e88c22c18b1109bb39f265f64fffdbb901/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2d6c9e88c22c18b1109bb39f265f64fffdbb901/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2d6c9e88c22c18b1109bb39f265f64fffdbb901", "patch": "@@ -1,3 +1,10 @@\n+2019-02-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/88074\n+\tPR middle-end/89415\n+\t* toplev.c (do_compile): Double the emin/emax exponents to workaround\n+\tbuggy mpc_norm.\n+\n 2019-02-20  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/89397"}, {"sha": "b5e800c68e1c09e99abc9b4d4e09549a9fe4695b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2d6c9e88c22c18b1109bb39f265f64fffdbb901/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2d6c9e88c22c18b1109bb39f265f64fffdbb901/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2d6c9e88c22c18b1109bb39f265f64fffdbb901", "patch": "@@ -1,5 +1,9 @@\n 2019-02-20  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/88074\n+\tPR middle-end/89415\n+\t* gcc.dg/pr88074-2.c: New test.\n+\n \tPR c++/89336\n \t* g++.dg/cpp1y/constexpr-89336-3.C: New test.\n "}, {"sha": "a93c19dccce6de9493f728cf6a8a66c51c81c6a5", "filename": "gcc/testsuite/gcc.dg/pr88074-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2d6c9e88c22c18b1109bb39f265f64fffdbb901/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88074-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2d6c9e88c22c18b1109bb39f265f64fffdbb901/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88074-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88074-2.c?ref=b2d6c9e88c22c18b1109bb39f265f64fffdbb901", "patch": "@@ -0,0 +1,17 @@\n+/* PR middle-end/88074 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-add-options float128 } */\n+/* { dg-require-effective-target float128 } */\n+/* { dg-final { scan-tree-dump-not \"link_error \" \"optimized\" } } */\n+\n+extern void link_error (void);\n+int\n+main ()\n+{\n+  if (((__FLT128_MAX__ * 0.5 + __FLT128_MAX__ * 0.5i)\n+       / (__FLT128_MAX__ * 0.25 + __FLT128_MAX__ * 0.25i))\n+      != (_Complex _Float128) 2)\n+    link_error ();\n+  return 0;\n+}"}, {"sha": "d3719fff443565bb95ceb80968b23c5ca6fd5557", "filename": "gcc/toplev.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2d6c9e88c22c18b1109bb39f265f64fffdbb901/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2d6c9e88c22c18b1109bb39f265f64fffdbb901/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=b2d6c9e88c22c18b1109bb39f265f64fffdbb901", "patch": "@@ -2173,8 +2173,12 @@ do_compile ()\n \t\t  max_exp = fmt->emax;\n \t      }\n \t  }\n-      if (mpfr_set_emin (min_exp)\n-\t  || mpfr_set_emax (max_exp))\n+      /* E.g. mpc_norm assumes it can square a number without bothering with\n+\t with range scaling, so until that is fixed, double the minimum\n+\t and maximum exponents, plus add some buffer for arithmetics\n+\t on the squared numbers.  */\n+      if (mpfr_set_emin (2 * (min_exp - 1))\n+\t  || mpfr_set_emax (2 * (max_exp + 1)))\n \tsorry (\"mpfr not configured to handle all float modes\");\n \n       /* Set up the back-end if requested.  */"}]}