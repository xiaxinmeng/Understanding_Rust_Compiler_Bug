{"sha": "99fa3f5eddb9b963d43c55444705af6c2e3daf4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlmYTNmNWVkZGI5Yjk2M2Q0M2M1NTQ0NDcwNWFmNmMyZTNkYWY0YQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-10-31T20:49:01Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-10-31T20:49:01Z"}, "message": "std_complex.h (norm): Forward declare.\n\n\t* include/bits/std_complex.h (norm): Forward declare.\n\t(complex<>): Comment out friend declaration of conj<>.\n\t(conj<>): Comment out specialization.\n\t(exp, log, log10): Define primary templates.\n\n\t* src/complex.cc (exp<>, log<>, log10<>): Comment out\n\tspecializations.\n\nFrom-SVN: r37165", "tree": {"sha": "0e7cb90e92b3c86d56a1db06106d5ddad0a56cac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e7cb90e92b3c86d56a1db06106d5ddad0a56cac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99fa3f5eddb9b963d43c55444705af6c2e3daf4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99fa3f5eddb9b963d43c55444705af6c2e3daf4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99fa3f5eddb9b963d43c55444705af6c2e3daf4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99fa3f5eddb9b963d43c55444705af6c2e3daf4a/comments", "author": null, "committer": null, "parents": [{"sha": "93cc1c6995b0d7d39eb865d7d2f3de6082bdf35d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93cc1c6995b0d7d39eb865d7d2f3de6082bdf35d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93cc1c6995b0d7d39eb865d7d2f3de6082bdf35d"}], "stats": {"total": 97, "additions": 57, "deletions": 40}, "files": [{"sha": "3d373ed00dcf88ceda3547b2dee90f43c64ddab4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99fa3f5eddb9b963d43c55444705af6c2e3daf4a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99fa3f5eddb9b963d43c55444705af6c2e3daf4a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=99fa3f5eddb9b963d43c55444705af6c2e3daf4a", "patch": "@@ -1,3 +1,13 @@\n+2000-10-31  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* include/bits/std_complex.h (norm): Forward declare.\n+\t(complex<>): Comment out friend declaration of conj<>.\n+\t(conj<>): Comment out specialization.\n+\t(exp, log, log10): Define primary templates.\n+\n+\t* src/complex.cc (exp<>, log<>, log10<>): Comment out\n+\tspecializations. \n+\n 2000-10-31  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* include/bits/std_complex.h: Remove duplicate definition of conj."}, {"sha": "f82deb7b21955b7727b0b0ec0944c9306be89ad2", "filename": "libstdc++-v3/include/bits/std_complex.h", "status": "modified", "additions": 35, "deletions": 28, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99fa3f5eddb9b963d43c55444705af6c2e3daf4a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99fa3f5eddb9b963d43c55444705af6c2e3daf4a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h?ref=99fa3f5eddb9b963d43c55444705af6c2e3daf4a", "patch": "@@ -51,6 +51,7 @@ namespace std\n \n   template<typename _Tp> _Tp abs(const complex<_Tp>&);\n   template<typename _Tp>  _Tp arg(const complex<_Tp>&);\n+  template<typename _Tp> _Tp norm(const complex<_Tp>&);\n \n   template<typename _Tp> complex<_Tp> conj(const complex<_Tp>&);\n   template<typename _Tp> complex<_Tp> polar(const _Tp&, const _Tp&);\n@@ -177,7 +178,8 @@ namespace std\n     friend class complex<long double>;\n \n     // friend float abs<>(const complex<float>&);\n-    friend complex<float> conj<>(const complex<float>&);\n+    //friend complex<float> conj<>(const complex<float>&);\n+\n     friend complex<float> cos<>(const complex<float>&);\n     friend complex<float> cosh<>(const complex<float>&);\n     friend complex<float> exp<>(const complex<float>&);\n@@ -251,7 +253,7 @@ namespace std\n     friend class complex<long double>;\n \n     // friend double abs<>(const complex<double>&);\n-    friend complex<double> conj<>(const complex<double>&);\n+    // friend complex<double> conj<>(const complex<double>&);\n     friend complex<double> cos<>(const complex<double>&);\n     friend complex<double> cosh<>(const complex<double>&);\n     friend complex<double> exp<>(const complex<double>&);\n@@ -326,7 +328,7 @@ namespace std\n     friend class complex<double>;\n \n     // friend long double abs<>(const complex<long double>&);\n-    friend complex<long double> conj<>(const complex<long double>&);\n+    //friend complex<long double> conj<>(const complex<long double>&);\n     friend complex<long double> cos<>(const complex<long double>&);\n     friend complex<long double> cosh<>(const complex<long double>&);\n     friend complex<long double> exp<>(const complex<long double>&);\n@@ -939,35 +941,40 @@ namespace std\n     polar(const _Tp& __rho, const _Tp& __theta)\n     { return complex<_Tp>(__rho * cos(__theta), __rho * sin(__theta)); }\n \n-  // 26.2.7/6\n+//    // We use here a few more specializations.\n+//    template<>\n+//      inline complex<float>\n+//      conj(const complex<float> &__x)\n+//  #ifdef _GLIBCPP_BUGGY_FLOAT_COMPLEX\n+//      {\n+//        complex<float> __tmpf(~__x._M_value);\n+//        return __tmpf;\n+//      }\n+//  #else\n+//    { return complex<float>(~__x._M_value); }\n+//  #endif\n+\n+//    template<>\n+//      inline complex<double>\n+//      conj(const complex<double> &__x)\n+//      {  return complex<double> (~__x._M_value); }\n+\n+  // Transcendentals:\n   template<typename _Tp>\n     inline complex<_Tp>\n-    conj(const complex<_Tp>& __z)\n-    { return complex<_Tp>(__z.real(), -__z.imag()); }\n-\n-  // We use here a few more specializations.\n-  template<>\n-    inline complex<float>\n-    conj(const complex<float> &__x)\n-#ifdef _GLIBCPP_BUGGY_FLOAT_COMPLEX\n-    {\n-      complex<float> __tmpf(~__x._M_value);\n-      return __tmpf;\n-    }\n-#else\n-  { return complex<float>(~__x._M_value); }\n-#endif\n-\n-  template<>\n-    inline complex<double>\n-    conj(const complex<double> &__x)\n-    {  return complex<double> (~__x._M_value); }\n+    exp(const complex<_Tp>& __z)\n+    { return polar(exp(__z.real()), __z.imag()); }\n \n-  template<>\n-    inline complex<long double>\n-    conj(const complex<long double> &__x)\n-    { return complex<long double> (~__x._M_value); }\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    log(const complex<_Tp>& __z)\n+    { return complex<_Tp>(log(abs(__z)), arg(__z)); }\n \n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    log10(const complex<_Tp>& __z)\n+    { return log(__z) / log(_Tp(10.0)); }\n+  \n } // namespace std\n \n #endif\t/* _CPP_COMPLEX */"}, {"sha": "381f73c40a57e178481a53d3cea3606fbbd37578", "filename": "libstdc++-v3/src/complex.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99fa3f5eddb9b963d43c55444705af6c2e3daf4a/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99fa3f5eddb9b963d43c55444705af6c2e3daf4a/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc?ref=99fa3f5eddb9b963d43c55444705af6c2e3daf4a", "patch": "@@ -86,20 +86,20 @@ namespace std\n   cosh(const complex<FLT>& __x)\n   { return complex<FLT>(ccosh(__x._M_value)); }\n \n-  template<>\n-  complex<FLT>\n-  exp(const complex<FLT>& __x)\n-  { return complex<FLT>(cexp(__x._M_value)); }\n+//    template<>\n+//    complex<FLT>\n+//    exp(const complex<FLT>& __x)\n+//    { return complex<FLT>(cexp(__x._M_value)); }\n \n-  template<>\n-  complex<FLT>\n-  log(const complex<FLT>& __x)\n-  { return complex<FLT>(c_log(__x._M_value)); }\n+//    template<>\n+//    complex<FLT>\n+//    log(const complex<FLT>& __x)\n+//    { return complex<FLT>(c_log(__x._M_value)); }\n \n-  template<>\n-  complex<FLT>\n-  log10(const complex<FLT>& __x)\n-  { return complex<FLT>(clog10(__x._M_value)); }\n+//    template<>\n+//    complex<FLT>\n+//    log10(const complex<FLT>& __x)\n+//    { return complex<FLT>(clog10(__x._M_value)); }\n   \n   template<>\n   complex<FLT>"}]}