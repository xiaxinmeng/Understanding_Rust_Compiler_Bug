{"sha": "a852d50fb4f376a7bd79a9b05025dbc5590da378", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg1MmQ1MGZiNGYzNzZhN2JkNzlhOWIwNTAyNWRiYzU1OTBkYTM3OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2002-01-30T20:45:18Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2002-01-30T20:45:18Z"}, "message": "ostream_inserter_arith.cc (test03): Better fix for 32/64 bit architectures...\n\n2002-01-30  Paolo Carlini  <pcarlini@unitus.it>\n\n        * testsuite/27_io/ostream_inserter_arith.cc (test03):\n        Better fix for 32/64 bit architectures, avoiding the\n        implicit assumption that CHAR_BIT == 8.\n\nFrom-SVN: r49342", "tree": {"sha": "c598a1ec2be2ee465607317edd905738e5ed8e44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c598a1ec2be2ee465607317edd905738e5ed8e44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a852d50fb4f376a7bd79a9b05025dbc5590da378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a852d50fb4f376a7bd79a9b05025dbc5590da378", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a852d50fb4f376a7bd79a9b05025dbc5590da378", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a852d50fb4f376a7bd79a9b05025dbc5590da378/comments", "author": null, "committer": null, "parents": [{"sha": "5748ebeb998a01e22e9e2ee1e649f46c42e6bece", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5748ebeb998a01e22e9e2ee1e649f46c42e6bece", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5748ebeb998a01e22e9e2ee1e649f46c42e6bece"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "05ff24c8b55498573229318354fb56f926924222", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a852d50fb4f376a7bd79a9b05025dbc5590da378/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a852d50fb4f376a7bd79a9b05025dbc5590da378/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a852d50fb4f376a7bd79a9b05025dbc5590da378", "patch": "@@ -1,3 +1,9 @@\n+2002-01-30  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* testsuite/27_io/ostream_inserter_arith.cc (test03):\n+\tBetter fix for 32/64 bit architectures, avoiding the\n+\timplicit assumption that CHAR_BIT == 8.\n+\n 2002-01-28  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* Makefile.am (doxygen, doxygen-maint, doxygen-man):  Tweak targets."}, {"sha": "0025425a4f667b64524d03aa9880513e151a535c", "filename": "libstdc++-v3/testsuite/27_io/ostream_inserter_arith.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a852d50fb4f376a7bd79a9b05025dbc5590da378/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a852d50fb4f376a7bd79a9b05025dbc5590da378/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc?ref=a852d50fb4f376a7bd79a9b05025dbc5590da378", "patch": "@@ -312,26 +312,26 @@ test03()\n   ostream o(&strbuf);\n \n   o << oct << s << ' ' << hex << s;\n-  if (sizeof(short) == 2)\n+  if (numeric_limits<short>::digits + 1 == 16)\n     VERIFY( strbuf.str() == \"177777 ffff\" );\n-  else // sizeof(short) == 4\n+  else\n     VERIFY( strbuf.str() == \"37777777777 ffffffff\" );\n   strbuf.str(str_blank);\n \n   o << oct << i << ' ' << hex << i;\n-  if (sizeof(int) == 2)\n+  if (numeric_limits<int>::digits + 1 == 16)\n     VERIFY( strbuf.str() == \"177777 ffff\" );\n-  else if (sizeof(int) == 4)\n+  else if (numeric_limits<int>::digits + 1 == 32)\n     VERIFY( strbuf.str() == \"37777777777 ffffffff\" );\n-  else // sizeof(int) == 8\n+  else\n     VERIFY( strbuf.str() == \"1777777777777777777777 \"\n \t    \"ffffffffffffffff\" );\n   strbuf.str(str_blank);\n \n   o << oct << l << ' ' << hex << l;\n-  if (sizeof(long) == 4)\n+  if (numeric_limits<long>::digits + 1 == 32)\n     VERIFY( strbuf.str() == \"37777777777 ffffffff\" );\n-  else // sizeof(long) == 8\n+  else\n     VERIFY( strbuf.str() == \"1777777777777777777777 \"\n \t    \"ffffffffffffffff\" );\n   strbuf.str(str_blank);"}]}