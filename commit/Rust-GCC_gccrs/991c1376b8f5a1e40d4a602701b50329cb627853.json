{"sha": "991c1376b8f5a1e40d4a602701b50329cb627853", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkxYzEzNzZiOGY1YTFlNDBkNGE2MDI3MDFiNTAzMjljYjYyNzg1Mw==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-02-10T16:34:23Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-02-10T16:34:23Z"}, "message": "gcc.target/cris/pr93372-2.c, -5.c, -8.c: New tests.\n\n* gcc.target/cris/pr93372-2.c, gcc.target/cris/pr93372-5.c,\ngcc.target/cris/pr93372-8.c: New tests.\n\nThese tests fails miserably both at being an example of cc0\neliminating compare instructions, and post-cc0-CRIS at showing a\nsignificant improvement.  They're here to track suboptimal\ncomparison code for CRIS.", "tree": {"sha": "bfa18c10c896591c1dfd7b24baa5fcccf40cb157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfa18c10c896591c1dfd7b24baa5fcccf40cb157"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/991c1376b8f5a1e40d4a602701b50329cb627853", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991c1376b8f5a1e40d4a602701b50329cb627853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/991c1376b8f5a1e40d4a602701b50329cb627853", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991c1376b8f5a1e40d4a602701b50329cb627853/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d12f1b914cc10d8d28f8838eb9d9fc33114ef0db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d12f1b914cc10d8d28f8838eb9d9fc33114ef0db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d12f1b914cc10d8d28f8838eb9d9fc33114ef0db"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "d2fd6aaf9089be2d7b45ecfb8e2753e0201596ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991c1376b8f5a1e40d4a602701b50329cb627853/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991c1376b8f5a1e40d4a602701b50329cb627853/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=991c1376b8f5a1e40d4a602701b50329cb627853", "patch": "@@ -3,6 +3,8 @@\n \t* gcc.target/cris/cris.exp (check_effective_target_cc0): New.\n \n \t* gcc.target/cris/pr93372-1.c: New test.\n+\t* gcc.target/cris/pr93372-2.c, gcc.target/cris/pr93372-5.c,\n+\tgcc.target/cris/pr93372-8.c: New tests.\n \n 2020-02-10  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "912069c018d5d6ed1d00152062e313d0b9d09e89", "filename": "gcc/testsuite/gcc.target/cris/pr93372-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991c1376b8f5a1e40d4a602701b50329cb627853/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991c1376b8f5a1e40d4a602701b50329cb627853/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-2.c?ref=991c1376b8f5a1e40d4a602701b50329cb627853", "patch": "@@ -0,0 +1,19 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-not \"\\tnot\" { xfail cc0 } } } */\n+/* { dg-final { scan-assembler-not \"\\tlsr\" { xfail cc0 } } } */\n+\n+int f(int a, int b, int *d)\n+{\n+  int c = a - b;\n+\n+  /* Whoops!  We get a cmp.d with the original operands here. */\n+  *d = (c == 0);\n+\n+  /* Whoops!  While we don't get a test.d for the result here for cc0,\n+     we get a sequence of insns: a move, a \"not\" and a shift of the\n+     subtraction-result, where a simple \"spl\" would have done. */\n+  return c >= 0;\n+}"}, {"sha": "351764c6c0634a1a2698f75ee1d092794382998d", "filename": "gcc/testsuite/gcc.target/cris/pr93372-5.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991c1376b8f5a1e40d4a602701b50329cb627853/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991c1376b8f5a1e40d4a602701b50329cb627853/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-5.c?ref=991c1376b8f5a1e40d4a602701b50329cb627853", "patch": "@@ -0,0 +1,19 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest|\\tor\" { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-not \"\\tnot\" { xfail cc0 } } } */\n+/* { dg-final { scan-assembler-not \"\\tlsr\" { xfail cc0 } } } */\n+\n+int f(long long int a, long long int b, int *d)\n+{\n+  long long int c = a - b;\n+\n+  *d = (c == 0LL);\n+\n+  /* See pr93372-2.c; we have the same problem for DImode, but it's\n+     worsened by the generic double-word \"optimizations\"; or:ing\n+     together the DI parts and then testing the result for the equality\n+     test.  */\n+  return c >= 0LL;\n+}"}, {"sha": "95abc4b6b31ecff9bb503e9376ee4ce2e37ac0cc", "filename": "gcc/testsuite/gcc.target/cris/pr93372-8.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991c1376b8f5a1e40d4a602701b50329cb627853/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991c1376b8f5a1e40d4a602701b50329cb627853/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-8.c?ref=991c1376b8f5a1e40d4a602701b50329cb627853", "patch": "@@ -0,0 +1,16 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* See pr93372-5.c regarding the xfails.  */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest|\\tor\" { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-not \"\\tnot\" { xfail cc0 } } } */\n+/* { dg-final { scan-assembler-not \"\\tlsr\" { xfail cc0 } } } */\n+\n+int f(long long int a, long long int b, int *d)\n+{\n+  long long int c = a + b;\n+\n+  *d = (c == 0);\n+\n+  return c >= 0;\n+}"}]}