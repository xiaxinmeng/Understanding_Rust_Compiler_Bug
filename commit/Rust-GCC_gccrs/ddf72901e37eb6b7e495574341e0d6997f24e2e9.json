{"sha": "ddf72901e37eb6b7e495574341e0d6997f24e2e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRmNzI5MDFlMzdlYjZiN2U0OTU1NzQzNDFlMGQ2OTk3ZjI0ZTJlOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-08-23T18:33:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-08-23T18:33:47Z"}, "message": "* decl.c (compute_array_index_type): Use type_dependent_expression_p.\n\nFrom-SVN: r190626", "tree": {"sha": "8317d88ca69462083d7b8acd83f53474603500d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8317d88ca69462083d7b8acd83f53474603500d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddf72901e37eb6b7e495574341e0d6997f24e2e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf72901e37eb6b7e495574341e0d6997f24e2e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddf72901e37eb6b7e495574341e0d6997f24e2e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf72901e37eb6b7e495574341e0d6997f24e2e9/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "545ca0f2785bd261c13392cb6191640282a73ee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/545ca0f2785bd261c13392cb6191640282a73ee9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/545ca0f2785bd261c13392cb6191640282a73ee9"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "0c8911180aa4a30ef124f204d54c3ac194538dc9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf72901e37eb6b7e495574341e0d6997f24e2e9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf72901e37eb6b7e495574341e0d6997f24e2e9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ddf72901e37eb6b7e495574341e0d6997f24e2e9", "patch": "@@ -1,3 +1,7 @@\n+2012-08-23  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (compute_array_index_type): Use type_dependent_expression_p.\n+\n 2012-08-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/20420"}, {"sha": "a787ec1047b78eae19bd485b0303e5a99e69007a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf72901e37eb6b7e495574341e0d6997f24e2e9/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf72901e37eb6b7e495574341e0d6997f24e2e9/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ddf72901e37eb6b7e495574341e0d6997f24e2e9", "patch": "@@ -5775,10 +5775,10 @@ extern linkage_kind decl_linkage\t\t(tree);\n extern duration_kind decl_storage_duration\t(tree);\n extern tree cp_walk_subtrees (tree*, int*, walk_tree_fn,\n \t\t\t      void*, struct pointer_set_t*);\n-#define cp_walk_tree(a,b,c,d) \\\n-\twalk_tree_1 (a, b, c, d, cp_walk_subtrees)\n-#define cp_walk_tree_without_duplicates(a,b,c) \\\n-\twalk_tree_without_duplicates_1 (a, b, c, cp_walk_subtrees)\n+#define cp_walk_tree(tp,func,data,pset) \\\n+\twalk_tree_1 (tp, func, data, pset, cp_walk_subtrees)\n+#define cp_walk_tree_without_duplicates(tp,func,data) \\\n+\twalk_tree_without_duplicates_1 (tp, func, data, cp_walk_subtrees)\n extern tree fold_if_not_in_template\t\t(tree);\n extern tree rvalue\t\t\t\t(tree);\n extern tree convert_bitfield_to_declared_type   (tree);"}, {"sha": "4b2958c5eee29e5a38bb31dab9b4620892ae85b6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf72901e37eb6b7e495574341e0d6997f24e2e9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf72901e37eb6b7e495574341e0d6997f24e2e9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ddf72901e37eb6b7e495574341e0d6997f24e2e9", "patch": "@@ -7916,18 +7916,17 @@ stabilize_vla_size (tree size)\n tree\n compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n {\n-  tree type;\n   tree itype;\n   tree osize = size;\n   tree abi_1_itype = NULL_TREE;\n \n   if (error_operand_p (size))\n     return error_mark_node;\n \n-  type = TREE_TYPE (size);\n-  /* type_dependent_expression_p? */\n-  if (!dependent_type_p (type))\n+  if (!type_dependent_expression_p (size))\n     {\n+      tree type = TREE_TYPE (size);\n+\n       mark_rvalue_use (size);\n \n       if (cxx_dialect < cxx0x && TREE_CODE (size) == NOP_EXPR\n@@ -7989,7 +7988,7 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n   /* We can only call value_dependent_expression_p on integral constant\n      expressions; treat non-constant expressions as dependent, too.  */\n   if (processing_template_decl\n-      && (dependent_type_p (type)\n+      && (type_dependent_expression_p (size)\n \t  || !TREE_CONSTANT (size) || value_dependent_expression_p (size)))\n     {\n       /* We cannot do any checking for a SIZE that isn't known to be"}]}