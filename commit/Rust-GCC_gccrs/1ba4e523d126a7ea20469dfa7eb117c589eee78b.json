{"sha": "1ba4e523d126a7ea20469dfa7eb117c589eee78b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJhNGU1MjNkMTI2YTdlYTIwNDY5ZGZhN2ViMTE3YzU4OWVlZTc4Yg==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2008-06-20T03:26:10Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2008-06-20T03:26:10Z"}, "message": "rtl.texi: Updated subreg section.\n\n2008-06-19  Kenneth Zadeck <zadeck@naturalbridge.com>\n\n\t* doc/rtl.texi: Updated subreg section.\n\nFrom-SVN: r136978", "tree": {"sha": "42578d9b497c052e78d5c25ea5293f1782deb546", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42578d9b497c052e78d5c25ea5293f1782deb546"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ba4e523d126a7ea20469dfa7eb117c589eee78b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ba4e523d126a7ea20469dfa7eb117c589eee78b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ba4e523d126a7ea20469dfa7eb117c589eee78b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ba4e523d126a7ea20469dfa7eb117c589eee78b/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2368a460c8d49c4d9aa1aab2b79d6727d19f5b2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2368a460c8d49c4d9aa1aab2b79d6727d19f5b2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2368a460c8d49c4d9aa1aab2b79d6727d19f5b2c"}], "stats": {"total": 83, "additions": 67, "deletions": 16}, "files": [{"sha": "78a136dd5b782331734a609287cc222b2189f194", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ba4e523d126a7ea20469dfa7eb117c589eee78b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ba4e523d126a7ea20469dfa7eb117c589eee78b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ba4e523d126a7ea20469dfa7eb117c589eee78b", "patch": "@@ -1,3 +1,7 @@\n+2008-06-19  Kenneth Zadeck <zadeck@naturalbridge.com>\n+\n+\t* doc/rtl.texi: Updated subreg section.\n+\t\n 2008-06-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/36523"}, {"sha": "2d95256f8b28215206befe30094708519189dca6", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 63, "deletions": 16, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ba4e523d126a7ea20469dfa7eb117c589eee78b/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ba4e523d126a7ea20469dfa7eb117c589eee78b/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=1ba4e523d126a7ea20469dfa7eb117c589eee78b", "patch": "@@ -1747,12 +1747,45 @@ mode other than its natural one, or to refer to one register of\n a multi-part @code{reg} that actually refers to several registers.\n \n Each pseudo register has a natural mode.  If it is necessary to\n-operate on it in a different mode, the pseudo register must be\n+operate on it in a different mode, the register must be\n enclosed in a @code{subreg}.  \n \n+There are currently three supported types for the first operand of a\n+@code{subreg}:\n+@itemize\n+@item pseudo registers\n+This is the most common case.  Most @code{subreg}s have pseudo\n+@code{reg}s as their first operand.\n+\n+@item mem\n+@code{subreg}s of @code{mem} were common in earlier versions of GCC and\n+are still supported.  During the reload pass these are replaced by plain\n+@code{mem}s.  On machines that do not do instruction scheduling, use of\n+@code{subreg}s of @code{mem} are still used, but this is no longer\n+recommended.  Such @code{subreg}s are considered to be\n+@code{register_operand}s rather than @code{memory_operand}s before and\n+during reload.  Because of this, the scheduling passes cannot properly\n+schedule instructions with @code{subreg}s of @code{mem}, so for machines\n+that do scheduling, @code{subreg}s of @code{mem} should never be used.\n+To support this, the combine and recog passes have explicit code to\n+inhibit the creation of @code{subreg}s of @code{mem} when\n+@code{INSN_SCHEDULING} is defined.\n+\n+The use of @code{subreg}s of @code{mem} after the reload pass is an area\n+that is not well understood and should be avoided.  There is still some\n+code in the compiler to support this, but this code has possibly rotted.\n+This use of @code{subreg}s is discouraged and will most likely not be\n+supported in the future.\n+\n+@item hard registers\n It is seldom necessary to wrap hard registers in @code{subreg}s; such\n registers would normally reduce to a single @code{reg} rtx.  This use of\n-@code{subregs} is discouraged and may not be supported in the future.\n+@code{subreg}s is discouraged and may not be supported in the future.\n+\n+@end itemize\n+\n+@code{subreg}s of @code{subreg}s are not supported.  Using\n+@code{simplify_gen_subreg} is the recommended way to avoid this problem.\n \n @code{subreg}s come in two distinct flavors, each having its own\n usage and rules:\n@@ -1768,10 +1801,26 @@ GET_MODE_SIZE (@var{m1}) > GET_MODE_SIZE (@var{m2})\n @end smallexample\n \n Paradoxical @code{subreg}s can be used as both lvalues and rvalues.\n+When used as an lvalue, the low-order bits of the source value\n+are stored in @var{reg} and the high-order bits are discarded.\n When used as an rvalue, the low-order bits of the @code{subreg} are\n-taken from @var{reg} while the high-order bits are left undefined.\n-When used as an lvalue, the low-order bits of the source value are\n-stored in @var{reg} and the high-order bits are discarded.\n+taken from @var{reg} while the high-order bits may or may not be\n+defined.  \n+\n+The high-order bits of rvalues are in the following circumstances:\n+\n+@itemize\n+@item @code{subreg}s of @code{mem}\n+When @var{m2} is smaller than a word, the macro @code{LOAD_EXTEND_OP},\n+can control how the high-order bits are defined.\n+\n+@item @code{subreg} of @code{reg}s\n+The upper bits are defined when @code{SUBREG_PROMOTED_VAR_P} is true.\n+@code{SUBREG_PROMOTED_UNSIGNED_P} describes what the upper bits hold.\n+Such subregs usually represent local variables, register variables\n+and parameter pseudo variables that have been promoted to a wider mode.\n+\n+@end itemize\n \n @var{bytenum} is always zero for a paradoxical @code{subreg}, even on\n big-endian targets.\n@@ -1789,18 +1838,19 @@ stores the lower 2 bytes of @var{y} in @var{x} and discards the upper\n (set @var{z} (subreg:SI (reg:HI @var{x}) 0))\n @end smallexample\n \n-would set the lower two bytes of @var{z} to @var{y} and set the upper two\n-bytes to an unknown value.\n+would set the lower two bytes of @var{z} to @var{y} and set the upper\n+two bytes to an unknown value assuming @code{SUBREG_PROMOTED_VAR_P} is\n+false.\n \n @item Normal subregs \n When @var{m1} is at least as narrow as @var{m2} the @code{subreg}\n expression is called @dfn{normal}.\n \n-Normal @code{subreg}s restrict consideration to certain bits of @var{reg}.\n-There are two cases.  If @var{m1} is smaller than a word, the\n-@code{subreg} refers to the least-significant part (or @dfn{lowpart})\n-of one word of @var{reg}.  If @var{m1} is word-sized or greater, the\n-@code{subreg} refers to one or more complete words.\n+Normal @code{subreg}s restrict consideration to certain bits of\n+@var{reg}.  There are two cases.  If @var{m1} is smaller than a word,\n+the @code{subreg} refers to the least-significant part (or\n+@dfn{lowpart}) of one word of @var{reg}.  If @var{m1} is word-sized or\n+greater, the @code{subreg} refers to one or more complete words.\n \n When used as an lvalue, @code{subreg} is a word-based accessor.\n Storing to a @code{subreg} modifies all the words of @var{reg} that\n@@ -1917,11 +1967,8 @@ The first operand of a @code{subreg} expression is customarily accessed\n with the @code{SUBREG_REG} macro and the second operand is customarily\n accessed with the @code{SUBREG_BYTE} macro.\n \n-@code{subreg}s of @code{subreg}s are not supported.  Using\n-@code{simplify_gen_subreg} is the recommended way to avoid this problem.\n-\n It has been several years since a platform in which\n-@code{BYTES_BIG_ENDIAN} was not equal to @code{WORDS_BIG_ENDIAN} has\n+@code{BYTES_BIG_ENDIAN} not equal to @code{WORDS_BIG_ENDIAN} has\n been tested.  Anyone wishing to support such a platform in the future\n may be confronted with code rot.\n "}]}