{"sha": "385a9348eb92bdbee1052c83f62fd7db8887916d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg1YTkzNDhlYjkyYmRiZWUxMDUyYzgzZjYyZmQ3ZGI4ODg3OTE2ZA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-06-04T12:20:40Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-06-04T12:20:40Z"}, "message": "builtins.c (dconstpi, dconste): New mathematical constants.\n\n\n\t* builtins.c (dconstpi, dconste): New mathematical constants.\n\t(init_builtin_dconsts): New function to initialize dconstpi\n\tand dconste.\n\t(fold_builtin): Optimize exp(1.0) = e.  Evaluate exp(x) at\n\tcompile time with -ffast-math when x is an integer constant.\n\tOptimize tan(0.0) = 0.0.  Optimize atan(0.0) = 0.0,\n\tatan(1.0) = pi/4 and tan(atan(x)) = x with -ffast-math.\n\n\t* gcc.dg/builtins-2.c: Add tests for tan(atan(x)).\n\t* gcc.dg/builtins-3.c: Add tests for tan(0.0) and atan(0.0).\n\t* gcc.dg/builtins-7.c: Add tests for tan(atan(x)) == x.\n\t* gcc.dg/builtins-17.c: New test case.\n\t* gcc.dg/i386-387-4.c: New test case.\n\t* gcc.c-torture/execute/ieee/mzero4.c: New test case.\n\nFrom-SVN: r67438", "tree": {"sha": "0fff82636598319f282b94c466d49daa131c721d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fff82636598319f282b94c466d49daa131c721d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/385a9348eb92bdbee1052c83f62fd7db8887916d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/385a9348eb92bdbee1052c83f62fd7db8887916d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/385a9348eb92bdbee1052c83f62fd7db8887916d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/385a9348eb92bdbee1052c83f62fd7db8887916d/comments", "author": null, "committer": null, "parents": [{"sha": "8c6a82695b85f8ed74cdc67f2cf74c5a62d0d91d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c6a82695b85f8ed74cdc67f2cf74c5a62d0d91d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c6a82695b85f8ed74cdc67f2cf74c5a62d0d91d"}], "stats": {"total": 260, "additions": 258, "deletions": 2}, "files": [{"sha": "d61d60c86ee703575560398de3203d8e9bbe9302", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385a9348eb92bdbee1052c83f62fd7db8887916d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385a9348eb92bdbee1052c83f62fd7db8887916d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=385a9348eb92bdbee1052c83f62fd7db8887916d", "patch": "@@ -1,3 +1,13 @@\n+2003-06-04  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.c (dconstpi, dconste): New mathematical constants.\n+\t(init_builtin_dconsts): New function to initialize dconstpi\n+\tand dconste.\n+\t(fold_builtin): Optimize exp(1.0) = e.  Evaluate exp(x) at\n+\tcompile time with -ffast-math when x is an integer constant.\n+\tOptimize tan(0.0) = 0.0.  Optimize atan(0.0) = 0.0,\n+\tatan(1.0) = pi/4 and tan(atan(x)) = x with -ffast-math.\n+\n 2003-06-04  Roger Sayle  <roger@eyesopen.com>\n \n \t* calls.c (expand_call): Avoid calling pure or const functions"}, {"sha": "b227ffbcd2c527699b1656cf7e4ce50569169bdc", "filename": "gcc/builtins.c", "status": "modified", "additions": 104, "deletions": 2, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385a9348eb92bdbee1052c83f62fd7db8887916d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385a9348eb92bdbee1052c83f62fd7db8887916d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=385a9348eb92bdbee1052c83f62fd7db8887916d", "patch": "@@ -79,6 +79,11 @@ tree built_in_decls[(int) END_BUILTINS];\n    required to implement the function call in all cases.  */\n tree implicit_built_in_decls[(int) END_BUILTINS];\n \n+/* Trigonometric and mathematical constants used in builtin folding.  */\n+static bool builtin_dconsts_init = 0;\n+static REAL_VALUE_TYPE dconstpi;\n+static REAL_VALUE_TYPE dconste;\n+\n static int get_pointer_alignment\tPARAMS ((tree, unsigned int));\n static tree c_strlen\t\t\tPARAMS ((tree));\n static const char *c_getstr\t\tPARAMS ((tree));\n@@ -171,7 +176,22 @@ static tree fold_trunc_transparent_mathfn PARAMS ((tree));\n static bool readonly_data_expr\t\tPARAMS ((tree));\n static rtx expand_builtin_fabs\t\tPARAMS ((tree, rtx, rtx));\n static rtx expand_builtin_cabs\t\tPARAMS ((tree, rtx));\n+static void init_builtin_dconsts\tPARAMS ((void));\n+\n+/* Initialize mathematical constants for constant folding builtins.\n+   These constants need to be given to atleast 160 bits precision.  */\n \n+static void\n+init_builtin_dconsts ()\n+{\n+  real_from_string (&dconstpi,\n+    \"3.1415926535897932384626433832795028841971693993751058209749445923078\");\n+  real_from_string (&dconste,\n+    \"2.7182818284590452353602874713526624977572470936999595749669676277241\");\n+\n+  builtin_dconsts_init = true;\n+}\n+  \n /* Return the alignment in bits of EXP, a pointer valued expression.\n    But don't return more than MAX_ALIGN no matter what.\n    The alignment returned is, by default, the alignment of the thing that\n@@ -5213,7 +5233,7 @@ fold_builtin (exp)\n \n \t  /* Optimize sin(0.0) = 0.0.  */\n \t  if (real_zerop (arg))\n-\t    return build_real (type, dconst0);\n+\t    return arg;\n \t}\n       break;\n \n@@ -5242,6 +5262,41 @@ fold_builtin (exp)\n \t  if (real_zerop (arg))\n \t    return build_real (type, dconst1);\n \n+\t  /* Optimize exp(1.0) = e.  */\n+\t  if (real_onep (arg))\n+\t    {\n+\t      REAL_VALUE_TYPE cst;\n+\n+\t      if (! builtin_dconsts_init)\n+\t\tinit_builtin_dconsts ();\n+\t      real_convert (&cst, TYPE_MODE (type), &dconste);\n+\t      return build_real (type, cst);\n+\t    }\n+\n+\t  /* Attempt to evaluate exp at compile-time.  */\n+\t  if (flag_unsafe_math_optimizations\n+\t      && TREE_CODE (arg) == REAL_CST\n+\t      && ! TREE_CONSTANT_OVERFLOW (arg))\n+\t    {\n+\t      REAL_VALUE_TYPE cint;\n+\t      REAL_VALUE_TYPE c;\n+\t      HOST_WIDE_INT n;\n+\n+\t      c = TREE_REAL_CST (arg);\n+\t      n = real_to_integer (&c);\n+\t      real_from_integer (&cint, VOIDmode, n,\n+\t\t\t\t n < 0 ? -1 : 0, 0);\n+\t      if (real_identical (&c, &cint))\n+\t\t{\n+\t\t  REAL_VALUE_TYPE x;\n+\n+\t\t  if (! builtin_dconsts_init)\n+\t\t    init_builtin_dconsts ();\n+\t\t  real_powi (&x, TYPE_MODE (type), &dconste, n);\n+\t\t  return build_real (type, x);\n+\t\t}\n+\t    }\n+\n \t  /* Optimize exp(log(x)) = x.  */\n \t  fcode = builtin_mathfn_code (arg);\n \t  if (flag_unsafe_math_optimizations\n@@ -5301,6 +5356,53 @@ fold_builtin (exp)\n \t}\n       break;\n \n+    case BUILT_IN_TAN:\n+    case BUILT_IN_TANF:\n+    case BUILT_IN_TANL:\n+      if (validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n+\t{\n+\t  enum built_in_function fcode;\n+\t  tree arg = TREE_VALUE (arglist);\n+\n+\t  /* Optimize tan(0.0) = 0.0.  */\n+\t  if (real_zerop (arg))\n+\t    return arg;\n+\n+\t  /* Optimize tan(atan(x)) = x.  */\n+\t  fcode = builtin_mathfn_code (arg);\n+\t  if (flag_unsafe_math_optimizations\n+\t      && (fcode == BUILT_IN_ATAN\n+\t\t  || fcode == BUILT_IN_ATANF\n+\t\t  || fcode == BUILT_IN_ATANL))\n+\t    return TREE_VALUE (TREE_OPERAND (arg, 1));\n+\t}\n+      break;\n+\n+    case BUILT_IN_ATAN:\n+    case BUILT_IN_ATANF:\n+    case BUILT_IN_ATANL:\n+      if (validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n+\t{\n+\t  tree arg = TREE_VALUE (arglist);\n+\n+\t  /* Optimize atan(0.0) = 0.0.  */\n+\t  if (real_zerop (arg))\n+\t    return arg;\n+\n+\t  /* Optimize atan(1.0) = pi/4.  */\n+\t  if (real_onep (arg))\n+\t    {\n+\t      REAL_VALUE_TYPE cst;\n+\n+\t      if (! builtin_dconsts_init)\n+\t\tinit_builtin_dconsts ();\n+\t      real_convert (&cst, TYPE_MODE (type), &dconstpi);\n+\t      cst.exp -= 2;\n+\t      return build_real (type, cst);\n+\t    }\n+\t}\n+      break;\n+\n     case BUILT_IN_POW:\n     case BUILT_IN_POWF:\n     case BUILT_IN_POWL:\n@@ -5387,7 +5489,7 @@ fold_builtin (exp)\n \t\t  REAL_VALUE_TYPE cint;\n \t\t  HOST_WIDE_INT n;\n \n-\t\t  n = real_to_integer(&c);\n+\t\t  n = real_to_integer (&c);\n \t\t  real_from_integer (&cint, VOIDmode, n,\n \t\t\t\t     n < 0 ? -1 : 0, 0);\n \t\t  if (real_identical (&c, &cint))"}, {"sha": "e6e4169382d4f42bb2ab42057e7f128a32e4098f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385a9348eb92bdbee1052c83f62fd7db8887916d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385a9348eb92bdbee1052c83f62fd7db8887916d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=385a9348eb92bdbee1052c83f62fd7db8887916d", "patch": "@@ -1,3 +1,12 @@\n+2003-06-04  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/builtins-2.c: Add tests for tan(atan(x)).\n+\t* gcc.dg/builtins-3.c: Add tests for tan(0.0) and atan(0.0).\n+\t* gcc.dg/builtins-7.c: Add tests for tan(atan(x)) == x.\n+\t* gcc.dg/builtins-17.c: New test case.\n+\t* gcc.dg/i386-387-4.c: New test case.\n+\t* gcc.c-torture/execute/ieee/mzero4.c: New test case.\n+\n 2003-06-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.dg/ultrasp9.c: New test."}, {"sha": "0ede7ec959870754c934a519ed25d0a6c57fc712", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/mzero4.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385a9348eb92bdbee1052c83f62fd7db8887916d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fmzero4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385a9348eb92bdbee1052c83f62fd7db8887916d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fmzero4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fmzero4.c?ref=385a9348eb92bdbee1052c83f62fd7db8887916d", "patch": "@@ -0,0 +1,58 @@\n+/* Copyright (C) 2003  Free Software Foundation.\n+   by Roger Sayle <roger@eyesopen.com>, derived from mzero3.c\n+\n+   Constant folding of sin(-0.0), tan(-0.0) and atan(-0.0) should\n+   all return -0.0, for both double and float forms.  */\n+\n+void abort (void);\n+typedef __SIZE_TYPE__ size_t;\n+extern int memcmp (const void *, const void *, size_t);\n+\n+double sin (double);\n+double tan (double);\n+double atan (double);\n+\n+float sinf (float);\n+float tanf (float);\n+float atanf (float);\n+\n+void expectd (double, double);\n+void expectf (float, float);\n+\n+void\n+expectd (double value, double expected)\n+{\n+  if (value != expected\n+      || memcmp ((void *)&value, (void *) &expected, sizeof (double)) != 0)\n+    abort ();\n+}\n+\n+void\n+expectf (float value, float expected)\n+{\n+  if (value != expected\n+      || memcmp ((void *)&value, (void *) &expected, sizeof (float)) != 0)\n+    abort ();\n+}\n+\n+int main ()\n+{\n+  expectd (sin (0.0), 0.0);\n+  expectd (tan (0.0), 0.0);\n+  expectd (atan (0.0), 0.0);\n+\n+  expectd (sin (-0.0), -0.0);\n+  expectd (tan (-0.0), -0.0);\n+  expectd (atan (-0.0), -0.0);\n+\n+  expectf (sinf (0.0f), 0.0f);\n+  expectf (tanf (0.0f), 0.0f);\n+  expectf (atanf (0.0f), 0.0f);\n+\n+  expectf (sinf (-0.0f), -0.0f);\n+  expectf (tanf (-0.0f), -0.0f);\n+  expectf (atanf (-0.0f), -0.0f);\n+\n+  return 0;\n+}\n+"}, {"sha": "f33512cb9168b9370d4dea66475619357e5ee2c3", "filename": "gcc/testsuite/gcc.dg/builtins-17.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385a9348eb92bdbee1052c83f62fd7db8887916d/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385a9348eb92bdbee1052c83f62fd7db8887916d/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-17.c?ref=385a9348eb92bdbee1052c83f62fd7db8887916d", "patch": "@@ -0,0 +1,29 @@\n+/* Copyright (C) 2003 Free Software Foundation.\n+\n+   Check that constant folding of built-in math functions doesn't\n+   break anything and produces the expected results.\n+\n+   Written by Roger Sayle, 25th May 2003.  */\n+\n+/* { dg-do link } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+extern void link_error(void);\n+\n+extern double exp(double);\n+\n+\n+int main()\n+{\n+  if (exp (1.0) < 2.71 || exp (1.0) > 2.72)\n+    link_error ();\n+  if (exp (2.0) < 7.38 || exp (2.0) > 7.39)\n+    link_error ();\n+  if (exp (-2.0) < 0.13 || exp (-2.0) > 0.14)\n+    link_error ();\n+  if (atan (1.0) < 0.78 || atan (1.0) > 0.79)\n+    link_error ();\n+\n+  return 0;\n+}\n+"}, {"sha": "ebd054f229a0ed94bf79a7685e6be8996a47abbf", "filename": "gcc/testsuite/gcc.dg/builtins-2.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385a9348eb92bdbee1052c83f62fd7db8887916d/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385a9348eb92bdbee1052c83f62fd7db8887916d/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-2.c?ref=385a9348eb92bdbee1052c83f62fd7db8887916d", "patch": "@@ -53,6 +53,11 @@ double test9(double x)\n   return fabs(exp(x));\n }\n \n+double test10(double x)\n+{\n+  return tan(atan(x));\n+}\n+\n float test1f(float x)\n {\n   return logf(expf(x));\n@@ -98,6 +103,11 @@ float test9f(float x)\n   return fabsf(expf(x));\n }\n \n+float test10f(float x)\n+{\n+  return tanf(atanf(x));\n+}\n+\n long double test1l(long double x)\n {\n   return logl(expl(x));\n@@ -143,4 +153,8 @@ long double test9l(long double x)\n   return fabsl(expl(x));\n }\n \n+long double test10l(long double x)\n+{\n+  return tanl(atanl(x));\n+}\n "}, {"sha": "4bab231a57138c69e2922e84e926db8c419bbf15", "filename": "gcc/testsuite/gcc.dg/builtins-3.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385a9348eb92bdbee1052c83f62fd7db8887916d/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385a9348eb92bdbee1052c83f62fd7db8887916d/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-3.c?ref=385a9348eb92bdbee1052c83f62fd7db8887916d", "patch": "@@ -30,6 +30,12 @@ int main()\n   if (cos (0.0) != 1.0)\n     link_error ();\n \n+  if (tan (0.0) != 0.0)\n+    link_error ();\n+\n+  if (atan (0.0) != 0.0)\n+    link_error ();\n+\n \n   if (sqrtf (0.0f) != 0.0f)\n     link_error ();\n@@ -49,6 +55,11 @@ int main()\n   if (cosf (0.0f) != 1.0f)\n     link_error ();\n \n+  if (tanf (0.0f) != 0.0f)\n+    link_error ();\n+\n+  if (atanf (0.0f) != 0.0f)\n+    link_error ();\n \n   if (sqrtl (0.0l) != 0.0l)\n     link_error ();\n@@ -68,6 +79,12 @@ int main()\n   if (cosl (0.0l) != 1.0l)\n     link_error ();\n \n+  if (tanl (0.0l) != 0.0l)\n+    link_error ();\n+\n+  if (atanl (0.0) != 0.0l)\n+    link_error ();\n+\n   return 0;\n }\n "}, {"sha": "87995a4d3a0da8ff76a93778cfedebe775a88540", "filename": "gcc/testsuite/gcc.dg/builtins-7.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385a9348eb92bdbee1052c83f62fd7db8887916d/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385a9348eb92bdbee1052c83f62fd7db8887916d/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-7.c?ref=385a9348eb92bdbee1052c83f62fd7db8887916d", "patch": "@@ -14,18 +14,24 @@ void test(double x)\n {\n   if (pow (x, 1.0) != x)\n     link_error ();\n+  if (tan (atan (x)) != x)\n+    link_error ();\n }\n \n void testf(float x)\n {\n   if (powf (x, 1.0f) != x)\n     link_error ();\n+  if (tanf (atanf (x)) != x)\n+    link_error ();\n }\n \n void testl(long double x)\n {\n   if (powl (x, 1.0l) != x)\n     link_error ();\n+  if (tanl (atanl (x)) != x)\n+    link_error ();\n }\n \n int main()"}, {"sha": "809ab823660a16fd761aac97d8dbbcbd8faec2cc", "filename": "gcc/testsuite/gcc.dg/i386-387-4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385a9348eb92bdbee1052c83f62fd7db8887916d/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385a9348eb92bdbee1052c83f62fd7db8887916d/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-4.c?ref=385a9348eb92bdbee1052c83f62fd7db8887916d", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target \"i?86-*-*\" } } */\n+/* { dg-options \"-O2 -march=i686\" } */\n+/* { dg-final { scan-assembler \"fldpi\" } } */\n+\n+long double atanl (long double);\n+\n+long double pi()\n+{\n+  return 4.0 * atanl (1.0);\n+}\n+"}]}