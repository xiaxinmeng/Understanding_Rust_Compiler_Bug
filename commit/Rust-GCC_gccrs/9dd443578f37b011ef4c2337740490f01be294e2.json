{"sha": "9dd443578f37b011ef4c2337740490f01be294e2", "node_id": "C_kwDOANBUbNoAKDlkZDQ0MzU3OGYzN2IwMTFlZjRjMjMzNzc0MDQ5MGYwMWJlMjk0ZTI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-22T00:16:26Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-22T00:16:26Z"}, "message": "Daily bump.", "tree": {"sha": "79eef2282c1456f1ab7ffc8a16b9ffe916c9b1fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79eef2282c1456f1ab7ffc8a16b9ffe916c9b1fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dd443578f37b011ef4c2337740490f01be294e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd443578f37b011ef4c2337740490f01be294e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dd443578f37b011ef4c2337740490f01be294e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd443578f37b011ef4c2337740490f01be294e2/comments", "author": null, "committer": null, "parents": [{"sha": "f9063d12633c62a089115df032a19295854d8b06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9063d12633c62a089115df032a19295854d8b06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9063d12633c62a089115df032a19295854d8b06"}], "stats": {"total": 411, "additions": 410, "deletions": 1}, "files": [{"sha": "6b2a322fbc22793d8b06c6b083670ca9855824ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd443578f37b011ef4c2337740490f01be294e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd443578f37b011ef4c2337740490f01be294e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9dd443578f37b011ef4c2337740490f01be294e2", "patch": "@@ -1,3 +1,194 @@\n+2022-01-21  Michael Meissner  <meissner@the-meissners.org>\n+\n+\tPR target/104136\n+\t* config/rs6000/rs6000-protos.h (prefixed_xxsplti_p): Delete.\n+\t* config/rs6000/rs6000.cc (prefixed_xxsplti_p): Delete.\n+\t* config/rs6000/rs6000.md (prefixed attribute): Delete section\n+\tthat sets the prefixed attribute for xxspltiw, xxspltidp, and\n+\txxsplti32dx instructions.\n+\t(movsf_hardfloat): Explicitly set the prefixed attribute\n+\twhen xxspltiw and xxspltidp instructions are generated.\n+\t(mov<mode>_hardfloat32): Likewise.\n+\t(mov<mode>_hardfloat64): Likewise.\n+\t* config/rs6000/vsx.md (vsx_mov<mode>_64bit): Explicitly set the\n+\tprefixed attribute for xxspltiw and xxspltidp instructions.\n+\t(vsx_mov<mode>_32bit): Likewise.\n+\n+2022-01-21  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/104170\n+\t* common/config/i386/i386-common.cc (ix86_supports_split_stack):\n+\tReturn true only on glibc.\n+\t* config/i386/gnu-user-common.h (STACK_CHECK_STATIC_BUILTIN):\n+\tRevert commit c163647ffbc.\n+\t* config/i386/gnu.h (TARGET_LIBC_PROVIDES_SSP): Likewise.\n+\n+2022-01-21  S\u00f6ren Tempel  <soeren@soeren-tempel.net>\n+\n+\t* common/config/s390/s390-common.cc (s390_supports_split_stack):\n+\tOnly support split-stack on glibc targets.\n+\t* config/i386/gnu-user-common.h (STACK_CHECK_STATIC_BUILTIN): Ditto.\n+\t* config/i386/gnu.h (defined): Ditto.\n+\n+2022-01-21  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-overload.def (VEC_SLDW): Add instances for\n+\tvector float and vector double.\n+\n+2022-01-21  Bill Seurer  <seurer@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000.cc (rs6000_get_function_versions_dispatcher):\n+\tFix mention of ifunc in string.\n+\n+2022-01-21  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR middle-end/104140\n+\t* tree-ssa-math-opts.cc (convert_mult_to_highpart): Check that the\n+\toperands of the widening multiplication are either both signed or\n+\tboth unsigned, and abort the conversion if mismatched.\n+\t* doc/generic.texi (WIDEN_MULT_EXPR): Describe expression node.\n+\t(MULT_HIGHPART_EXPR): Clarify that operands must have the same\n+\tsignedness.\n+\t* tree.def (MULT_HIGHPART_EXPR): Document both operands must have\n+\tinteger types with the same precision and signedness.\n+\t(WIDEN_MULT_EXPR): Document that operands must have integer types\n+\twith the same precision, but possibly differing signedness.\n+\t* config/riscv/riscv-c.cc (riscv_cpu_cpp_builtins): Defend against\n+\triscv_current_subset_list returning a NULL pointer (empty list).\n+\n+2022-01-21  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/103676\n+\t* ira.h (struct target_ira): Add member\n+\tx_ira_exclude_class_mode_regs.\n+\t(ira_exclude_class_mode_regs): New macro.\n+\t* lra.h (lra_create_new_reg): Add arg exclude_start_hard_regs and\n+\tmove from here ...\n+\t* lra-int.h: ... to here.\n+\t(lra_create_new_reg_with_unique_value): Add arg\n+\texclude_start_hard_regs.\n+\t(class lra_reg): Add member exclude_start_hard_regs.\n+\t* lra-assigns.cc (find_hard_regno_for_1): Setup\n+\timpossible_start_hard_regs from exclude_start_hard_regs.\n+\t* lra-constraints.cc (get_reload_reg): Add arg exclude_start_hard_regs and pass\n+\tit lra_create_new_reg[_with_unique_value].\n+\t(match_reload): Ditto.\n+\t(check_and_process_move): Pass NULL\n+\texclude_start_hard_regs to lra_create_new_reg_with_unique_value.\n+\t(goal_alt_exclude_start_hard_regs): New static variable.\n+\t(process_addr_reg, simplify_operand_subreg): Pass NULL\n+\texclude_start_hard_regs to lra_create_new_reg_with_unique_value\n+\tand get_reload_reg.\n+\t(process_alt_operands): Setup goal_alt_exclude_start_hard_regs.\n+\tUse this_alternative_exclude_start_hard_regs additionally to find\n+\twinning operand alternative.\n+\t(base_to_reg, base_plus_disp_to_reg, index_part_to_reg): Pass NULL\n+\texclude_start_hard_regs to lra_create_new_reg.\n+\t(process_address_1, emit_inc): Ditto.\n+\t(curr_insn_transform): Pass exclude_start_hard_regs value to\n+\tlra_create_new_reg, get_reload_reg, match_reload.\n+\t(inherit_reload_reg, split_reg): Pass NULL exclude_start_hard_regs\n+\tto lra_create_new_reg.\n+\t(process_invariant_for_inheritance): Ditto.\n+\t* lra-remat.cc (update_scratch_ops): Ditto.\n+\t* lra.cc (lra_create_new_reg_with_unique_value): Add arg\n+\texclude_start_hard_regs.  Setup the corresponding member of\n+\tlra reg info.\n+\t(lra_create_new_reg): Add arg exclude_start_hard_regs and pass it\n+\tto lra_create_new_reg_with_unique_value.\n+\t(initialize_lra_reg_info_element): Initialize member\n+\texclude_start_hard_regs.\n+\t(get_scratch_reg): Pass NULL to lra_create_new_reg.\n+\t* ira.cc (setup_prohibited_class_mode_regs): Rename to\n+\tsetup_prohibited_and_exclude_class_mode_regs and calculate\n+\tira_exclude_class_mode_regs.\n+\n+2022-01-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* configure.ac: Detect ld_is_mold and use it for\n+\tcomdat_group=yes and gcc_cv_ld_hidden=yes.\n+\t* configure: Regenerate.\n+\n+2022-01-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100089\n+\t* tree-vect-slp.cc (vect_slp_region): Reject BB vectorization\n+\tof if-converted loops with unvectorized COND_EXPRs for\n+\tall but the unlimited cost models.\n+\n+2022-01-21  Ard Biesheuvel  <ardb@kernel.org>\n+\n+\t* config/arm/arm-opts.h (enum stack_protector_guard): New.\n+\t* config/arm/arm-protos.h (arm_stack_protect_tls_canary_mem):\n+\tNew.\n+\t* config/arm/arm.cc (TARGET_STACK_PROTECT_GUARD): Define.\n+\t(arm_option_override_internal): Handle and put in error checks.\n+\tfor stack protector guard options.\n+\t(arm_option_reconfigure_globals): Likewise.\n+\t(arm_stack_protect_tls_canary_mem): New.\n+\t(arm_stack_protect_guard): New.\n+\t* config/arm/arm.md (stack_protect_set): New.\n+\t(stack_protect_set_tls): Likewise.\n+\t(stack_protect_test): Likewise.\n+\t(stack_protect_test_tls): Likewise.\n+\t(reload_tp_hard): Likewise.\n+\t* config/arm/arm.opt (-mstack-protector-guard): New\n+\t(-mstack-protector-guard-offset): New.\n+\t* doc/invoke.texi: Document new options.\n+\n+2022-01-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104156\n+\t* tree-ssa-loop-unswitch.cc (tree_unswitch_outer_loop):\n+\tCollect and reset debug stmts with out-of-loop uses when\n+\thoisting guards.\n+\t(find_loop_guard): Adjust.\n+\t(empty_bb_without_guard_p): Likewise.  Ignore debug stmts.\n+\t(used_outside_loop_p): Push debug uses to a vector of\n+\tdebug stmts to reset.\n+\t(hoist_guard): Adjust -fopt-info category.\n+\n+2022-01-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104152\n+\t* tree-vect-slp.cc (vect_build_slp_tree_2): Add missing\n+\tcan_duplicate_and_interleave_p check.\n+\n+2022-01-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimple-ssa-warn-access.cc (pass_waccess::warn_invalid_pointer):\n+\tAvoid passing var to warning_at when the format string doesn't\n+\trefer to it.\n+\n+2022-01-21  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/103721\n+\t* gimple-range-path.cc\n+\t(path_range_query::relations_may_be_invalidated): New.\n+\t(path_range_query::compute_ranges_in_block): Reset relations if\n+\tthey may be invalidated.\n+\t(path_range_query::maybe_register_phi_relation): Exit if relations\n+\tmay be invalidated on incoming edge.\n+\t(path_range_query::compute_phi_relations): Pass incoming PHI edge\n+\tto maybe_register_phi_relation.\n+\t* gimple-range-path.h (relations_may_be_invalidated): New.\n+\t(maybe_register_phi_relation): Pass edge instead of tree.\n+\t* tree-ssa-threadbackward.cc (back_threader::back_threader):\n+\tMark DFS edges.\n+\t* value-relation.cc (path_oracle::path_oracle): Call\n+\tmark_dfs_back_edges.\n+\t(path_oracle::register_relation): Add SSA names to m_registered\n+\tbitmap.\n+\t(path_oracle::reset_path): Clear m_registered bitmap.\n+\t* value-relation.h (path_oracle::set_root_oracle): New.\n+\n+2022-01-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/102478\n+\t* optabs.cc (prepare_cmp_insn): If !can_create_pseudo_p (), don't\n+\tforce_reg constants and for -fnon-call-exceptions fail if copy_to_reg\n+\twould be needed.\n+\n 2022-01-20  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/100786"}, {"sha": "972df32b1f66a0c4af6d3b9efd59f89291c000e1", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd443578f37b011ef4c2337740490f01be294e2/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd443578f37b011ef4c2337740490f01be294e2/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=9dd443578f37b011ef4c2337740490f01be294e2", "patch": "@@ -1 +1 @@\n-20220121\n+20220122"}, {"sha": "5595c8d01edbdc1085ac4683730f61143132ec1b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd443578f37b011ef4c2337740490f01be294e2/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd443578f37b011ef4c2337740490f01be294e2/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9dd443578f37b011ef4c2337740490f01be294e2", "patch": "@@ -1,3 +1,15 @@\n+2022-01-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/104148\n+\t* c-common.h (check_function_arguments_recurse): Add for_format\n+\targ.\n+\t* c-common.cc (check_function_nonnull): Pass false to\n+\tcheck_function_arguments_recurse's last argument.\n+\t(check_function_arguments_recurse): Add for_format argument,\n+\tif true, don't stop on warning_suppressed_p.\n+\t* c-format.cc (check_format_info): Pass true to\n+\tcheck_function_arguments_recurse's last argument.\n+\n 2022-01-19  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-common.cc (c_common_c_tests): Rename to..."}, {"sha": "4b49a675de7a611cac6ccb06e75863702f45f12c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd443578f37b011ef4c2337740490f01be294e2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd443578f37b011ef4c2337740490f01be294e2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9dd443578f37b011ef4c2337740490f01be294e2", "patch": "@@ -1,3 +1,29 @@\n+2022-01-21  Jason Merrill  <jason@redhat.com>\n+\n+\t* semantics.cc (find_failing_clause): Return expr if not\n+\tdecomposable.\n+\t(finish_static_assert): Show constant values in failing\n+\tcomparison.\n+\n+2022-01-21  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/104084\n+\tPR c++/20040\n+\t* init.cc (build_new_1): Only pull out TARGET_EXPR_INITIAL if\n+\talloc_expr is a TARGET_EXPR.\n+\n+2022-01-21  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/101715\n+\t* tree.cc (fixup_deferred_exception_variants): Remove duplicate\n+\tvariants after parsing the exception specifications.\n+\n+2022-01-21  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/104139\n+\tPR c++/103681\n+\t* class.cc (end_of_class): Use base_binfo.\n+\n 2022-01-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/101405"}, {"sha": "580c7734f8c369aa6f637a9b75533cdc58f74ebc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd443578f37b011ef4c2337740490f01be294e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd443578f37b011ef4c2337740490f01be294e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9dd443578f37b011ef4c2337740490f01be294e2", "patch": "@@ -1,3 +1,90 @@\n+2022-01-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/104148\n+\t* c-c++-common/Wformat-pr104148.c: New test.\n+\n+2022-01-21  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/template/explicit-args6.C: Add expected message.\n+\n+2022-01-21  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/104084\n+\tPR c++/20040\n+\t* g++.dg/init/new50.C: New test.\n+\n+2022-01-21  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-4.c: Add two test variants.  Adjust\n+\tassembler counts.\n+\n+2022-01-21  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR middle-end/104140\n+\t* gcc.target/riscv/pr104140.c: New test case.\n+\n+2022-01-21  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/103676\n+\t* g++.target/arm/pr103676.C: New.\n+\n+2022-01-21  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/101715\n+\t* g++.dg/cpp0x/noexcept72.C: New test.\n+\t* g++.dg/cpp0x/noexcept73.C: New test.\n+\n+2022-01-21  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/104139\n+\tPR c++/103681\n+\t* g++.dg/abi/no_unique_address2.C: Adjust to detect this on x86-64.\n+\n+2022-01-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR sanitizer/99673\n+\t* gcc.dg/asan/pr99673.c: New testcase.\n+\n+2022-01-21  Ard Biesheuvel  <ardb@kernel.org>\n+\n+\t* gcc.target/arm/stack-protector-7.c: New test.\n+\t* gcc.target/arm/stack-protector-8.c: New test.\n+\n+2022-01-21  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* gcc.target/aarch64/spellcheck_1.c: Adjust tests for new output.\n+\t* gcc.target/aarch64/spellcheck_2.c: Likewise.\n+\t* gcc.target/aarch64/spellcheck_3.c: Likewise.\n+\t* gcc.target/aarch64/spellcheck_7.c: Likewise.\n+\n+2022-01-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104156\n+\t* gcc.dg/loop-unswitch-6.c: New testcase.\n+\n+2022-01-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104152\n+\t* gcc.dg/vect/pr104152.c: New testcase.\n+\n+2022-01-21  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/pr103721-2.c: New test.\n+\t* gcc.dg/pr103721.c: New test.\n+\n+2022-01-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/102478\n+\t* gcc.dg/pr102478.c: New test.\n+\n+2022-01-21  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* gcc.target/mips/fix-r4000-2.c: Update expected output.\n+\t* gcc.target/mips/fix-r4000-3.c: Update expected output.  Add\n+\t-fexpensive-optimizations for consistency in output.\n+\t* gcc.target/mips/fix-r4000-7.c: Update expected output.\n+\t* gcc.target/mips/fix-r4000-8.c: Update expected output.\n+\n 2022-01-20  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/94362"}, {"sha": "efa609fd6ccae9d92fc1b6e578a1bdf3ce0b9706", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd443578f37b011ef4c2337740490f01be294e2/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd443578f37b011ef4c2337740490f01be294e2/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=9dd443578f37b011ef4c2337740490f01be294e2", "patch": "@@ -1,3 +1,21 @@\n+2022-01-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-gwv-1.c: Strengthen.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-gwv-2.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-gwv-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-v-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-v-2.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-2.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-wv-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-v-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-w-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-wv-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-gwv-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-v-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-w-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-wv-1.c: Likewise.\n+\n 2022-01-19  Marcel Vollweiler  <marcel@codesourcery.com>\n \n \t* config/gcn/icv-device.c: Make GOMP_DEVICE_NUM_VAR public (remove"}, {"sha": "04e5e696e40a15d3cc272929ba617dd81555c86e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd443578f37b011ef4c2337740490f01be294e2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd443578f37b011ef4c2337740490f01be294e2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9dd443578f37b011ef4c2337740490f01be294e2", "patch": "@@ -1,3 +1,78 @@\n+2022-01-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/shared_ptr/cons/array.cc: Fix comment.\n+\n+2022-01-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/87193\n+\tPR libstdc++/104019\n+\t* include/bits/alloc_traits.h (__cpp_lib_allocator_traits_is_always_equal):\n+\tDefine as type long.\n+\t* include/bits/allocator.h (__cpp_lib_incomplete_container_elements):\n+\tLikewise.\n+\t* include/bits/basic_string.h (__cpp_lib_string_udls): Likewise.\n+\t* include/bits/chrono.h (__cpp_lib_chrono): Likewise.\n+\t(__cpp_lib_chrono_udls): Likewise.\n+\t* include/bits/move.h (__cpp_lib_addressof_constexpr): Likewise.\n+\t* include/bits/node_handle.h (__cpp_lib_node_extract): Likewise.\n+\t* include/bits/range_access.h (__cpp_lib_nonmember_container_access):\n+\tLikewise.\n+\t* include/bits/shared_ptr.h (__cpp_lib_enable_shared_from_this):\n+\tLikewise.\n+\t* include/bits/stl_algo.h (__cpp_lib_clamp): Likewise.\n+\t(__cpp_lib_sample): Likewise.\n+\t* include/bits/stl_algobase.h (__cpp_lib_robust_nonmodifying_seq_ops):\n+\tLikewise.\n+\t* include/bits/stl_function.h (__cpp_lib_transparent_operators):\n+\tLikewise.\n+\t* include/bits/stl_iterator.h (__cpp_lib_make_reverse_iterator):\n+\tLikewise.\n+\t* include/bits/stl_map.h (__cpp_lib_map_try_emplace):\n+\tLikewise.\n+\t* include/bits/stl_tree.h (__cpp_lib_generic_associative_lookup):\n+\tLikewise.\n+\t* include/bits/unique_ptr.h (__cpp_lib_make_unique):\n+\tLikewise.\n+\t* include/bits/unordered_map.h (__cpp_lib_unordered_map_try_emplace):\n+\tLikewise.\n+\t* include/c_global/cmath (__cpp_lib_hypot): Likewise.\n+\t* include/c_global/cstddef (__cpp_lib_byte): Likewise.\n+\t* include/std/atomic (__cpp_lib_atomic_is_always_lock_free):\n+\tLikewise.\n+\t* include/std/complex (__cpp_lib_complex_udls): Likewise.\n+\t* include/std/filesystem (__cpp_lib_filesystem): Likewise.\n+\t* include/std/functional (__cpp_lib_not_fn): Likewise.\n+\t(__cpp_lib_boyer_moore_searcher): Likewise.\n+\t* include/std/iomanip (__cpp_lib_quoted_string_io): Likewise.\n+\t* include/std/mutex (__cpp_lib_scoped_lock): Likewise.\n+\t* include/std/numeric (__cpp_lib_gcd_lcm): Likewise.\n+\t(__cpp_lib_gcd, __cpp_lib_lcm): Likewise.\n+\t* include/std/tuple (__cpp_lib_apply): Likewise.\n+\t(__cpp_lib_make_from_tuple): Likewise.\n+\t* include/std/type_traits (__cpp_lib_integral_constant_callable)\n+\t(__cpp_lib_bool_constant, __cpp_lib_logical_traits)\n+\t(__cpp_lib_is_null_pointer, __cpp_lib_transformation_trait_aliases)\n+\t(__cpp_lib_result_of_sfinae, __cpp_lib_void_t)\n+\t(__cpp_lib_is_swappable, __cpp_lib_is_invocable)\n+\t(__cpp_lib_has_unique_object_representations)\n+\t(__cpp_lib_is_aggregate): Likewise.\n+\t* include/std/version: Likewise.\n+\t* libsupc++/new (__cpp_lib_launder): Likewise.\n+\n+2022-01-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/version (__cpp_lib_shared_ptr_arrays): Fix\n+\tcondition for C++17 definition.\n+\n+2022-01-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/shared_ptr_atomic.h (_Sp_atomic::_Atomic_count):\n+\tAdd constexpr.\n+\t(_Sp_atomic::_M_ptr): Add default member-initializer.\n+\t* testsuite/20_util/shared_ptr/atomic/atomic_shared_ptr.cc:\n+\tCheck constant initialization.\n+\t* testsuite/20_util/weak_ptr/atomic_weak_ptr.cc: Likewise.\n+\n 2022-01-20  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* src/c++11/cxx11-ios_failure.cc (__constinit): Define as"}]}