{"sha": "56da7207c1b5d008ead2df641f3008c25568f3ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZkYTcyMDdjMWI1ZDAwOGVhZDJkZjY0MWYzMDA4YzI1NTY4ZjNjYQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-08-02T04:18:16Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-08-02T04:18:16Z"}, "message": "c-common.c (c_common_init): -Wtraditional also implies -Wlong-long.\n\n\t* c-common.c (c_common_init): -Wtraditional also implies -Wlong-long.\n\t* cppinit.c (cpp_post_options): Likewise.\n\n\t* cppexp.c (cpp_classify_number): Suppress -Wtraditional\n\twarning about 'LL' suffix (but not 'ULL' etc) when\n\t-Wno-long-long is in effect.\n\n\t* cppmacro.c (_cpp_builtin_macro_text) [BT_TIME, BT_DATE]:\n\tCheck for failing time()/localtime(), issue a warning, and\n\tmake __TIME__ and __DATE__ expand to fallback strings.\n\n\t* doc/cpp.texi, doc/extend.texi: Document behavior of __DATE__\n\tand __TIME__ when the date and time cannot be determined.\n\nFrom-SVN: r55969", "tree": {"sha": "c63ec9dce2bc93a6a52925534a75b6d065be7679", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c63ec9dce2bc93a6a52925534a75b6d065be7679"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56da7207c1b5d008ead2df641f3008c25568f3ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56da7207c1b5d008ead2df641f3008c25568f3ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56da7207c1b5d008ead2df641f3008c25568f3ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56da7207c1b5d008ead2df641f3008c25568f3ca/comments", "author": null, "committer": null, "parents": [{"sha": "88c3865996f3be69203664a3889ec54bbeeb8c04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88c3865996f3be69203664a3889ec54bbeeb8c04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88c3865996f3be69203664a3889ec54bbeeb8c04"}], "stats": {"total": 101, "additions": 77, "deletions": 24}, "files": [{"sha": "d0c32e545c20f48368d5dbde44122e0bc870bc07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56da7207c1b5d008ead2df641f3008c25568f3ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56da7207c1b5d008ead2df641f3008c25568f3ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56da7207c1b5d008ead2df641f3008c25568f3ca", "patch": "@@ -1,3 +1,19 @@\n+2002-08-01  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* c-common.c (c_common_init): -Wtraditional also implies -Wlong-long.\n+\t* cppinit.c (cpp_post_options): Likewise.\n+\n+\t* cppexp.c (cpp_classify_number): Suppress -Wtraditional\n+\twarning about 'LL' suffix (but not 'ULL' etc) when\n+\t-Wno-long-long is in effect.\n+\n+\t* cppmacro.c (_cpp_builtin_macro_text) [BT_TIME, BT_DATE]:\n+\tCheck for failing time()/localtime(), issue a warning, and\n+\tmake __TIME__ and __DATE__ expand to fallback strings.\n+\n+\t* doc/cpp.texi, doc/extend.texi: Document behavior of __DATE__\n+\tand __TIME__ when the date and time cannot be determined.\n+\n 2002-08-02  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/rs6000/rs6000.c (output_cbranch): Hint differently for power4.\n@@ -48,7 +64,7 @@\n \n 2002-08-01  Richard Henderson  <rth@redhat.com>\n \n-\t* toplev.c (parse_options_and_default_flags): Don't set \n+\t* toplev.c (parse_options_and_default_flags): Don't set\n \tflag_reorder_blocks for -Os.\n \n \t* config/avr/avr.c (avr_optimization_options): Remove."}, {"sha": "363e72f949d6943fc71dd7799d4b99bec2f13475", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56da7207c1b5d008ead2df641f3008c25568f3ca/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56da7207c1b5d008ead2df641f3008c25568f3ca/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=56da7207c1b5d008ead2df641f3008c25568f3ca", "patch": "@@ -4945,8 +4945,9 @@ c_common_init (filename)\n   options->stdc_0_in_system_headers = STDC_0_IN_SYSTEM_HEADERS;\n \n   /* We want -Wno-long-long to override -pedantic -std=non-c99\n-     whatever the ordering.  */\n-  options->warn_long_long = warn_long_long && !flag_isoc99 && pedantic;\n+     and/or -Wtraditional, whatever the ordering.  */\n+  options->warn_long_long\n+    = warn_long_long && ((!flag_isoc99 && pedantic) || warn_traditional);\n \n   /* Register preprocessor built-ins before calls to\n      cpp_main_file.  */"}, {"sha": "a3ef96538ef03e8bebafea535c97dc3ddd3f75c4", "filename": "gcc/cppexp.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56da7207c1b5d008ead2df641f3008c25568f3ca/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56da7207c1b5d008ead2df641f3008c25568f3ca/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=56da7207c1b5d008ead2df641f3008c25568f3ca", "patch": "@@ -270,13 +270,18 @@ cpp_classify_number (pfile, token)\n \t  return CPP_N_INVALID;\n \t}\n \n-      /* Traditional C only accepted the 'L' suffix.  */\n-      if (result != CPP_N_SMALL && result != CPP_N_MEDIUM\n-\t  && CPP_WTRADITIONAL (pfile)\n-\t  && ! cpp_sys_macro_p (pfile))\n-\tcpp_error (pfile, DL_WARNING,\n-\t\t   \"traditional C rejects the \\\"%.*s\\\" suffix\",\n-\t\t   (int) (limit - str), str);\n+      /* Traditional C only accepted the 'L' suffix.\n+         Suppress warning about 'LL' with -Wno-long-long.  */\n+      if (CPP_WTRADITIONAL (pfile) && ! cpp_sys_macro_p (pfile))\n+\t{\n+\t  int u_or_i = (result & (CPP_N_UNSIGNED|CPP_N_IMAGINARY));\n+\t  int large = (result & CPP_N_WIDTH) == CPP_N_LARGE;\n+\n+\t  if (u_or_i || (large && CPP_OPTION (pfile, warn_long_long)))\n+\t    cpp_error (pfile, DL_WARNING,\n+\t\t       \"traditional C rejects the \\\"%.*s\\\" suffix\",\n+\t\t       (int) (limit - str), str);\n+\t}\n \n       if ((result & CPP_N_WIDTH) == CPP_N_LARGE\n \t  && ! CPP_OPTION (pfile, c99)"}, {"sha": "03f04c1a5d680279f1b86330667fc26937c7374f", "filename": "gcc/cppinit.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56da7207c1b5d008ead2df641f3008c25568f3ca/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56da7207c1b5d008ead2df641f3008c25568f3ca/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=56da7207c1b5d008ead2df641f3008c25568f3ca", "patch": "@@ -1787,8 +1787,9 @@ cpp_post_options (pfile)\n \n   /* The compiler front ends override this, but I think this is the\n      appropriate setting for the library.  */\n-  CPP_OPTION (pfile, warn_long_long) = (CPP_OPTION (pfile, pedantic)\n-\t\t\t\t\t&& !CPP_OPTION (pfile, c99));\n+  CPP_OPTION (pfile, warn_long_long)\n+     = ((CPP_OPTION (pfile, pedantic) && !CPP_OPTION (pfile, c99))\n+\t|| CPP_OPTION (pfile, warn_traditional));\n \n   /* Permanently disable macro expansion if we are rescanning\n      preprocessed text.  Read preprocesed source in ISO mode.  */"}, {"sha": "f0986b353cba4303dc7a9edb3a156ecd9e59774d", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56da7207c1b5d008ead2df641f3008c25568f3ca/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56da7207c1b5d008ead2df641f3008c25568f3ca/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=56da7207c1b5d008ead2df641f3008c25568f3ca", "patch": "@@ -207,17 +207,37 @@ _cpp_builtin_macro_text (pfile, node)\n \t     storage.  We only do this once, and don't generate them\n \t     at init time, because time() and localtime() are very\n \t     slow on some systems.  */\n-\t  time_t tt = time (NULL);\n-\t  struct tm *tb = localtime (&tt);\n-\n-\t  pfile->date = _cpp_unaligned_alloc (pfile,\n-\t\t\t\t\t      sizeof (\"\\\"Oct 11 1347\\\"\"));\n-\t  sprintf ((char *) pfile->date, \"\\\"%s %2d %4d\\\"\",\n-\t\t   monthnames[tb->tm_mon], tb->tm_mday, tb->tm_year + 1900);\n-\n-\t  pfile->time = _cpp_unaligned_alloc (pfile, sizeof (\"\\\"12:34:56\\\"\"));\n-\t  sprintf ((char *) pfile->time, \"\\\"%02d:%02d:%02d\\\"\",\n-\t\t   tb->tm_hour, tb->tm_min, tb->tm_sec);\n+\t  time_t tt;\n+\t  struct tm *tb = NULL;\n+\n+\t  /* (time_t) -1 is a legitimate value for \"number of seconds\n+\t     since the Epoch\", so we have to do a little dance to\n+\t     distinguish that from a genuine error.  */\n+\t  errno = 0;\n+\t  tt = time(NULL);\n+\t  if (tt != (time_t)-1 || errno == 0)\n+\t    tb = localtime (&tt);\n+\n+\t  if (tb)\n+\t    {\n+\t      pfile->date = _cpp_unaligned_alloc (pfile,\n+\t\t\t\t\t\t  sizeof (\"\\\"Oct 11 1347\\\"\"));\n+\t      sprintf ((char *) pfile->date, \"\\\"%s %2d %4d\\\"\",\n+\t\t       monthnames[tb->tm_mon], tb->tm_mday, tb->tm_year + 1900);\n+\n+\t      pfile->time = _cpp_unaligned_alloc (pfile,\n+\t\t\t\t\t\t  sizeof (\"\\\"12:34:56\\\"\"));\n+\t      sprintf ((char *) pfile->time, \"\\\"%02d:%02d:%02d\\\"\",\n+\t\t       tb->tm_hour, tb->tm_min, tb->tm_sec);\n+\t    }\n+\t  else\n+\t    {\n+\t      cpp_errno (pfile, DL_WARNING,\n+\t\t\t \"could not determine date and time\");\n+\t\t\n+\t      pfile->date = U\"\\\"??? ?? ????\\\"\";\n+\t      pfile->time = U\"\\\"??:??:??\\\"\";\n+\t    }\n \t}\n \n       if (node->value.builtin == BT_DATE)"}, {"sha": "73785c13794a2b3bb90cb1d0eeb022ed3cd54d72", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56da7207c1b5d008ead2df641f3008c25568f3ca/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56da7207c1b5d008ead2df641f3008c25568f3ca/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=56da7207c1b5d008ead2df641f3008c25568f3ca", "patch": "@@ -1780,11 +1780,19 @@ the preprocessor is being run.  The string constant contains eleven\n characters and looks like @code{@w{\"Feb 12 1996\"}}.  If the day of the\n month is less than 10, it is padded with a space on the left.\n \n+If GCC cannot determine the current date, it will emit a warning message\n+(once per compilation) and @code{__DATE__} will expand to\n+@code{@w{\"??? ?? ????\"}}.\n+\n @item __TIME__\n This macro expands to a string constant that describes the time at\n which the preprocessor is being run.  The string constant contains\n eight characters and looks like @code{\"23:59:01\"}.\n \n+If GCC cannot determine the current time, it will emit a warning message\n+(once per compilation) and @code{__TIME__} will expand to\n+@code{\"??:??:??\"}.\n+\n @item __STDC__\n In normal operation, this macro expands to the constant 1, to signify\n that this compiler conforms to ISO Standard C@.  If GNU CPP is used with"}, {"sha": "70afc3b8ffab58c188b4aa689b462a49360989b8", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56da7207c1b5d008ead2df641f3008c25568f3ca/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56da7207c1b5d008ead2df641f3008c25568f3ca/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=56da7207c1b5d008ead2df641f3008c25568f3ca", "patch": "@@ -366,7 +366,9 @@ directive (6.10.6).}\n @cite{The definitions for @code{__DATE__} and @code{__TIME__} when\n respectively, the date and time of translation are not available (6.10.8).}\n \n-GCC assumes that the date and time is always available.\n+If the date and time are not available, @code{__DATE__} expands to\n+@code{@w{\"??? ?? ????\"}} and @code{__TIME__} expands to\n+@code{\"??:??:??\"}.\n \n @end itemize\n "}]}