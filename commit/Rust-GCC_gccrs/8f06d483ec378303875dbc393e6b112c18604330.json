{"sha": "8f06d483ec378303875dbc393e6b112c18604330", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYwNmQ0ODNlYzM3ODMwMzg3NWRiYzM5M2U2YjExMmMxODYwNDMzMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-08-21T18:49:49Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-08-21T18:49:49Z"}, "message": "rtl.h (INSN_ANNULLED_BRANCH_P): Only allow JUMP_INSN.\n\n        * rtl.h (INSN_ANNULLED_BRANCH_P): Only allow JUMP_INSN.\n        * dwarf2cfi.c (scan_trace): Test JUMP_P before INSN_ANNULLED_BRANCH_P.\n        * resource.c (next_insn_no_annul): Likewise.\n        (mark_set_resources): Likewise.\n        * reorg.c (delete_from_delay_slot): Likewise.\n        (dbr_schedule, redundant_insn, try_merge_delay_insns): Likewise.\n        (get_branch_condition): Test pc_rtx and LABEL_REF before dereferencing.\n\nFrom-SVN: r177944", "tree": {"sha": "4e15d94c44bd213a7d4ff4743130d7878d558fb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e15d94c44bd213a7d4ff4743130d7878d558fb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f06d483ec378303875dbc393e6b112c18604330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f06d483ec378303875dbc393e6b112c18604330", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f06d483ec378303875dbc393e6b112c18604330", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f06d483ec378303875dbc393e6b112c18604330/comments", "author": null, "committer": null, "parents": [{"sha": "b2f7ebc1455ce53ec4d048b85e2fc7d1a94c9e5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2f7ebc1455ce53ec4d048b85e2fc7d1a94c9e5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2f7ebc1455ce53ec4d048b85e2fc7d1a94c9e5f"}], "stats": {"total": 78, "additions": 53, "deletions": 25}, "files": [{"sha": "4cf9a5f95f249a95fb61a0373154e39f76896be5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f06d483ec378303875dbc393e6b112c18604330/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f06d483ec378303875dbc393e6b112c18604330/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f06d483ec378303875dbc393e6b112c18604330", "patch": "@@ -1,3 +1,13 @@\n+2011-08-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* rtl.h (INSN_ANNULLED_BRANCH_P): Only allow JUMP_INSN.\n+\t* dwarf2cfi.c (scan_trace): Test JUMP_P before INSN_ANNULLED_BRANCH_P.\n+\t* resource.c (next_insn_no_annul): Likewise.\n+\t(mark_set_resources): Likewise.\n+\t* reorg.c (delete_from_delay_slot): Likewise.\n+\t(dbr_schedule, redundant_insn, try_merge_delay_insns): Likewise.\n+\t(get_branch_condition): Test pc_rtx and LABEL_REF before dereferencing.\n+\n 2011-08-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (any_div): Remove."}, {"sha": "30e95017014c455ee3f82a992b217f245068d230", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f06d483ec378303875dbc393e6b112c18604330/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f06d483ec378303875dbc393e6b112c18604330/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=8f06d483ec378303875dbc393e6b112c18604330", "patch": "@@ -2427,7 +2427,7 @@ scan_trace (dw_trace_info *trace)\n \t    notice_eh_throw (control);\n \t  dwarf2out_flush_queued_reg_saves ();\n \n-\t  if (INSN_ANNULLED_BRANCH_P (control))\n+\t  if (JUMP_P (control) && INSN_ANNULLED_BRANCH_P (control))\n \t    {\n \t      /* ??? Hopefully multiple delay slots are not annulled.  */\n \t      gcc_assert (n == 2);"}, {"sha": "cf5e7e1b8684b8a3abdf7677ec2f42292b373295", "filename": "gcc/reorg.c", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f06d483ec378303875dbc393e6b112c18604330/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f06d483ec378303875dbc393e6b112c18604330/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=8f06d483ec378303875dbc393e6b112c18604330", "patch": "@@ -667,7 +667,7 @@ delete_from_delay_slot (rtx insn)\n      annul flag.  */\n   if (delay_list)\n     trial = emit_delay_sequence (trial, delay_list, XVECLEN (seq, 0) - 2);\n-  else if (INSN_P (trial))\n+  else if (JUMP_P (trial))\n     INSN_ANNULLED_BRANCH_P (trial) = 0;\n \n   INSN_FROM_TARGET_P (insn) = 0;\n@@ -1060,13 +1060,15 @@ get_branch_condition (rtx insn, rtx target)\n     return const_true_rtx;\n \n   else if (GET_CODE (src) == IF_THEN_ELSE\n-\t   && XEXP (XEXP (src, 1), 0) == target\n-\t   && XEXP (src, 2) == pc_rtx)\n+\t   && XEXP (src, 2) == pc_rtx\n+\t   && GET_CODE (XEXP (src, 1)) == LABEL_REF\n+\t   && XEXP (XEXP (src, 1), 0) == target)\n     return XEXP (src, 0);\n \n   else if (GET_CODE (src) == IF_THEN_ELSE\n-\t   && XEXP (XEXP (src, 2), 0) == target\n-\t   && XEXP (src, 1) == pc_rtx)\n+\t   && XEXP (src, 1) == pc_rtx\n+\t   && GET_CODE (XEXP (src, 2)) == LABEL_REF\n+\t   && XEXP (XEXP (src, 2), 0) == target)\n     {\n       enum rtx_code rev;\n       rev = reversed_comparison_code (XEXP (src, 0), insn);\n@@ -1433,7 +1435,7 @@ try_merge_delay_insns (rtx insn, rtx thread)\n {\n   rtx trial, next_trial;\n   rtx delay_insn = XVECEXP (PATTERN (insn), 0, 0);\n-  int annul_p = INSN_ANNULLED_BRANCH_P (delay_insn);\n+  int annul_p = JUMP_P (delay_insn) && INSN_ANNULLED_BRANCH_P (delay_insn);\n   int slot_number = 1;\n   int num_slots = XVECLEN (PATTERN (insn), 0);\n   rtx next_to_match = XVECEXP (PATTERN (insn), 0, slot_number);\n@@ -1517,7 +1519,8 @@ try_merge_delay_insns (rtx insn, rtx thread)\n   if (slot_number != num_slots\n       && trial && NONJUMP_INSN_P (trial)\n       && GET_CODE (PATTERN (trial)) == SEQUENCE\n-      && ! INSN_ANNULLED_BRANCH_P (XVECEXP (PATTERN (trial), 0, 0)))\n+      && !(JUMP_P (XVECEXP (PATTERN (trial), 0, 0))\n+           && INSN_ANNULLED_BRANCH_P (XVECEXP (PATTERN (trial), 0, 0))))\n     {\n       rtx pat = PATTERN (trial);\n       rtx filled_insn = XVECEXP (pat, 0, 0);\n@@ -1756,24 +1759,30 @@ redundant_insn (rtx insn, rtx target, rtx delay_list)\n \n       if (GET_CODE (pat) == SEQUENCE)\n \t{\n+\t  bool annul_p = false;\n+          rtx control = XVECEXP (pat, 0, 0);\n+\n \t  /* If this is a CALL_INSN and its delay slots, it is hard to track\n \t     the resource needs properly, so give up.  */\n-\t  if (CALL_P (XVECEXP (pat, 0, 0)))\n+\t  if (CALL_P (control))\n \t    return 0;\n \n \t  /* If this is an INSN or JUMP_INSN with delayed effects, it\n \t     is hard to track the resource needs properly, so give up.  */\n \n #ifdef INSN_SETS_ARE_DELAYED\n-\t  if (INSN_SETS_ARE_DELAYED (XVECEXP (pat, 0, 0)))\n+\t  if (INSN_SETS_ARE_DELAYED (control))\n \t    return 0;\n #endif\n \n #ifdef INSN_REFERENCES_ARE_DELAYED\n-\t  if (INSN_REFERENCES_ARE_DELAYED (XVECEXP (pat, 0, 0)))\n+\t  if (INSN_REFERENCES_ARE_DELAYED (control))\n \t    return 0;\n #endif\n \n+\t  if (JUMP_P (control))\n+\t    annul_p = INSN_ANNULLED_BRANCH_P (control);\n+\n \t  /* See if any of the insns in the delay slot match, updating\n \t     resource requirements as we go.  */\n \t  for (i = XVECLEN (pat, 0) - 1; i > 0; i--)\n@@ -1783,8 +1792,7 @@ redundant_insn (rtx insn, rtx target, rtx delay_list)\n \t      /* If an insn will be annulled if the branch is false, it isn't\n \t\t considered as a possible duplicate insn.  */\n \t      if (rtx_equal_p (PATTERN (candidate), ipat)\n-\t\t  && ! (INSN_ANNULLED_BRANCH_P (XVECEXP (pat, 0, 0))\n-\t\t\t&& INSN_FROM_TARGET_P (candidate)))\n+\t\t  && ! (annul_p && INSN_FROM_TARGET_P (candidate)))\n \t\t{\n \t\t  /* Show that this insn will be used in the sequel.  */\n \t\t  INSN_FROM_TARGET_P (candidate) = 0;\n@@ -1793,15 +1801,14 @@ redundant_insn (rtx insn, rtx target, rtx delay_list)\n \n \t      /* Unless this is an annulled insn from the target of a branch,\n \t\t we must stop if it sets anything needed or set by INSN.  */\n-\t      if ((! INSN_ANNULLED_BRANCH_P (XVECEXP (pat, 0, 0))\n-\t\t   || ! INSN_FROM_TARGET_P (candidate))\n+\t      if ((!annul_p || !INSN_FROM_TARGET_P (candidate))\n \t\t  && insn_sets_resource_p (candidate, &needed, true))\n \t\treturn 0;\n \t    }\n \n \t  /* If the insn requiring the delay slot conflicts with INSN, we\n \t     must stop.  */\n-\t  if (insn_sets_resource_p (XVECEXP (pat, 0, 0), &needed, true))\n+\t  if (insn_sets_resource_p (control, &needed, true))\n \t    return 0;\n \t}\n       else\n@@ -3867,7 +3874,8 @@ dbr_schedule (rtx first)\n     {\n       rtx target;\n \n-      INSN_ANNULLED_BRANCH_P (insn) = 0;\n+      if (JUMP_P (insn))\n+        INSN_ANNULLED_BRANCH_P (insn) = 0;\n       INSN_FROM_TARGET_P (insn) = 0;\n \n       /* Skip vector tables.  We can't get attributes for them.  */\n@@ -3977,10 +3985,12 @@ dbr_schedule (rtx first)\n \t    {\n \t      if (GET_CODE (PATTERN (insn)) == SEQUENCE)\n \t\t{\n+                  rtx control;\n \t\t  j = XVECLEN (PATTERN (insn), 0) - 1;\n \t\t  if (j > MAX_DELAY_HISTOGRAM)\n \t\t    j = MAX_DELAY_HISTOGRAM;\n-\t\t  if (INSN_ANNULLED_BRANCH_P (XVECEXP (PATTERN (insn), 0, 0)))\n+                  control = XVECEXP (PATTERN (insn), 0, 0);\n+\t\t  if (JUMP_P (control) && INSN_ANNULLED_BRANCH_P (control))\n \t\t    total_annul_slots[j]++;\n \t\t  else\n \t\t    total_delay_slots[j]++;"}, {"sha": "ae541fea9519ea525eed9a08c33c4048614632ad", "filename": "gcc/resource.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f06d483ec378303875dbc393e6b112c18604330/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f06d483ec378303875dbc393e6b112c18604330/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=8f06d483ec378303875dbc393e6b112c18604330", "patch": "@@ -171,7 +171,7 @@ next_insn_no_annul (rtx insn)\n     {\n       /* If INSN is an annulled branch, skip any insns from the target\n \t of the branch.  */\n-      if (INSN_P (insn)\n+      if (JUMP_P (insn)\n \t  && INSN_ANNULLED_BRANCH_P (insn)\n \t  && NEXT_INSN (PREV_INSN (insn)) != insn)\n \t{\n@@ -710,10 +710,18 @@ mark_set_resources (rtx x, struct resources *res, int in_dest,\n       return;\n \n     case SEQUENCE:\n-      for (i = 0; i < XVECLEN (x, 0); i++)\n-\tif (! (INSN_ANNULLED_BRANCH_P (XVECEXP (x, 0, 0))\n-\t       && INSN_FROM_TARGET_P (XVECEXP (x, 0, i))))\n-\t  mark_set_resources (XVECEXP (x, 0, i), res, 0, mark_type);\n+      {\n+        rtx control = XVECEXP (x, 0, 0);\n+        bool annul_p = JUMP_P (control) && INSN_ANNULLED_BRANCH_P (control);\n+\n+        mark_set_resources (control, res, 0, mark_type);\n+        for (i = XVECLEN (x, 0) - 1; i >= 0; --i)\n+\t  {\n+\t    rtx elt = XVECEXP (x, 0, i);\n+\t    if (!annul_p && INSN_FROM_TARGET_P (elt))\n+\t      mark_set_resources (elt, res, 0, mark_type);\n+\t  }\n+      }\n       return;\n \n     case POST_INC:"}, {"sha": "e8aa7aba002441a040679417bd6206ff86753a01", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f06d483ec378303875dbc393e6b112c18604330/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f06d483ec378303875dbc393e6b112c18604330/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=8f06d483ec378303875dbc393e6b112c18604330", "patch": "@@ -278,7 +278,7 @@ struct GTY((chain_next (\"RTX_NEXT (&%h)\"),\n      constants pool.\n      1 in a CALL_INSN logically equivalent to ECF_CONST and TREE_READONLY.\n      1 in a NOTE, or EXPR_LIST for a const call.\n-     1 in a JUMP_INSN, CALL_INSN, or INSN of an annulling branch.  */\n+     1 in a JUMP_INSN of an annulling branch.  */\n   unsigned int unchanging : 1;\n   /* 1 in a MEM or ASM_OPERANDS expression if the memory reference is volatile.\n      1 in an INSN, CALL_INSN, JUMP_INSN, CODE_LABEL, BARRIER, or NOTE\n@@ -834,7 +834,7 @@ extern void rtl_check_failed_flag (const char *, const_rtx, const char *,\n \n /* 1 if RTX is a jump_insn, call_insn, or insn that is an annulling branch.  */\n #define INSN_ANNULLED_BRANCH_P(RTX)\t\t\t\t\t\\\n-  (RTL_FLAG_CHECK3(\"INSN_ANNULLED_BRANCH_P\", (RTX), JUMP_INSN, CALL_INSN, INSN)->unchanging)\n+  (RTL_FLAG_CHECK1(\"INSN_ANNULLED_BRANCH_P\", (RTX), JUMP_INSN)->unchanging)\n \n /* 1 if RTX is an insn in a delay slot and is from the target of the branch.\n    If the branch insn has INSN_ANNULLED_BRANCH_P set, this insn should only be"}]}