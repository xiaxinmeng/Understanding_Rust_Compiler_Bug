{"sha": "201d49e91faff2a580e7e3efdf2458e5fe5a5bf9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAxZDQ5ZTkxZmFmZjJhNTgwZTdlM2VmZGYyNDU4ZTVmZTVhNWJmOQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2016-03-05T05:30:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-03-05T05:30:10Z"}, "message": "re PR rtl-optimization/69941 (bogus zero_extend transformation in postreload on aarch64)\n\n\tPR rtl-optimization/69941\n\t* postreload.c (reload_combine_recognize_pattern): Ensure all uses of\n\tthe reg share its mode.\n\n\tPR rtl-optimization/69941\n\t* gcc.dg/torture/pr69941.c: New test.\n\nFrom-SVN: r234001", "tree": {"sha": "de4b34ff716b008178e64a4f61f2f16beb5e517d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de4b34ff716b008178e64a4f61f2f16beb5e517d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/201d49e91faff2a580e7e3efdf2458e5fe5a5bf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/201d49e91faff2a580e7e3efdf2458e5fe5a5bf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/201d49e91faff2a580e7e3efdf2458e5fe5a5bf9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/201d49e91faff2a580e7e3efdf2458e5fe5a5bf9/comments", "author": null, "committer": null, "parents": [{"sha": "29b9828fa425602f306d28b7ede79b4b0ac2e6f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29b9828fa425602f306d28b7ede79b4b0ac2e6f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29b9828fa425602f306d28b7ede79b4b0ac2e6f7"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "d5fd0d390b3ac18bf4d90dcd011b6156510fe62b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201d49e91faff2a580e7e3efdf2458e5fe5a5bf9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201d49e91faff2a580e7e3efdf2458e5fe5a5bf9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=201d49e91faff2a580e7e3efdf2458e5fe5a5bf9", "patch": "@@ -1,3 +1,9 @@\n+2016-03-04  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR rtl-optimization/69941\n+\t* postreload.c (reload_combine_recognize_pattern): Ensure all uses of\n+\tthe reg share its mode.\n+\n 2016-03-04  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/69196"}, {"sha": "61c1ce8028e3d8e6cab44f8f36be31fdc8a58f71", "filename": "gcc/postreload.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201d49e91faff2a580e7e3efdf2458e5fe5a5bf9/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201d49e91faff2a580e7e3efdf2458e5fe5a5bf9/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=201d49e91faff2a580e7e3efdf2458e5fe5a5bf9", "patch": "@@ -1057,7 +1057,6 @@ static bool\n reload_combine_recognize_pattern (rtx_insn *insn)\n {\n   rtx set, reg, src;\n-  unsigned int regno;\n \n   set = single_set (insn);\n   if (set == NULL_RTX)\n@@ -1068,7 +1067,20 @@ reload_combine_recognize_pattern (rtx_insn *insn)\n   if (!REG_P (reg) || REG_NREGS (reg) != 1)\n     return false;\n \n-  regno = REGNO (reg);\n+  unsigned int regno = REGNO (reg);\n+  machine_mode mode = GET_MODE (reg);\n+\n+  if (reg_state[regno].use_index < 0\n+      || reg_state[regno].use_index >= RELOAD_COMBINE_MAX_USES)\n+    return false;\n+\n+  for (int i = reg_state[regno].use_index;\n+       i < RELOAD_COMBINE_MAX_USES; i++)\n+    {\n+      struct reg_use *use = reg_state[regno].reg_use + i;\n+      if (GET_MODE (*use->usep) != mode)\n+\treturn false;\n+    }\n \n   /* Look for (set (REGX) (CONST_INT))\n      (set (REGX) (PLUS (REGX) (REGY)))\n@@ -1090,8 +1102,6 @@ reload_combine_recognize_pattern (rtx_insn *insn)\n       && REG_P (XEXP (src, 1))\n       && rtx_equal_p (XEXP (src, 0), reg)\n       && !rtx_equal_p (XEXP (src, 1), reg)\n-      && reg_state[regno].use_index >= 0\n-      && reg_state[regno].use_index < RELOAD_COMBINE_MAX_USES\n       && last_label_ruid < reg_state[regno].use_ruid)\n     {\n       rtx base = XEXP (src, 1);"}, {"sha": "d412efdd0572df6974d880613f33008d8ea5e2ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201d49e91faff2a580e7e3efdf2458e5fe5a5bf9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201d49e91faff2a580e7e3efdf2458e5fe5a5bf9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=201d49e91faff2a580e7e3efdf2458e5fe5a5bf9", "patch": "@@ -1,5 +1,8 @@\n 2016-03-04  Bernd Schmidt  <bschmidt@redhat.com>\n \n+\tPR rtl-optimization/69941\n+\t* gcc.dg/torture/pr69941.c: New test.\n+\n \tPR c/69824\n \t* gcc.dg/pr69824.c: New test.\n "}, {"sha": "f15d41a819f3c77adce8247aaa721679b45b91fd", "filename": "gcc/testsuite/gcc.dg/torture/pr69941.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/201d49e91faff2a580e7e3efdf2458e5fe5a5bf9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69941.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/201d49e91faff2a580e7e3efdf2458e5fe5a5bf9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69941.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69941.c?ref=201d49e91faff2a580e7e3efdf2458e5fe5a5bf9", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+ \n+int a = 0;\n+int b = 0;\n+int c = 0;\n+int e = 0;\n+int f = 0;\n+int *g = &e;\n+ \n+int fn1() { return b ? a : b; }\n+ \n+int main() {\n+  int h = fn1() <= 0x8000000000000000ULL; // h = 1;\n+ \n+  int k = f; // k = 0;\n+ \n+  long i = h ? k : k / h; // i = 0;\n+ \n+  long l = (unsigned short)(i - 0x1800); // l = 0xe800\n+ \n+  i = l ? l : c; // i = 0xe800;\n+ \n+  *g = i; // *g = 0xe800; e = 0xe800;\n+ \n+  unsigned char result = e >> 9; // result = 0x74;\n+\n+  if ((int)result != 0x74)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}