{"sha": "0c1b0a23f1fe7db6a2e391b7cb78cff900377772", "node_id": "C_kwDOANBUbNoAKDBjMWIwYTIzZjFmZTdkYjZhMmUzOTFiN2NiNzhjZmY5MDAzNzc3NzI", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wilco.dijkstra@arm.com", "date": "2022-11-23T17:27:19Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco.dijkstra@arm.com", "date": "2022-11-24T13:30:04Z"}, "message": "AArch64: Add fma_reassoc_width [PR107413]\n\nAdd a reassocation width for FMA in per-CPU tuning structures. Keep\nthe existing setting of 1 for cores with 2 FMA pipes (this disables\nreassociation), and use 4 for cores with 4 FMA pipes.  This improves\nSPECFP2017 on Neoverse V1 by ~1.5%.\n\ngcc/\n\tPR tree-optimization/107413\n\t* config/aarch64/aarch64.cc (struct tune_params): Add\n\tfma_reassoc_width to all CPU tuning structures.\n\t(aarch64_reassociation_width): Use fma_reassoc_width.\n\t* config/aarch64/aarch64-protos.h (struct tune_params): Add\n\tfma_reassoc_width.", "tree": {"sha": "3635f99729a30103f7954badb0a4a127ac77e6b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3635f99729a30103f7954badb0a4a127ac77e6b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c1b0a23f1fe7db6a2e391b7cb78cff900377772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c1b0a23f1fe7db6a2e391b7cb78cff900377772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c1b0a23f1fe7db6a2e391b7cb78cff900377772", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c1b0a23f1fe7db6a2e391b7cb78cff900377772/comments", "author": {"login": "Wilco1", "id": 58446312, "node_id": "MDQ6VXNlcjU4NDQ2MzEy", "avatar_url": "https://avatars.githubusercontent.com/u/58446312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wilco1", "html_url": "https://github.com/Wilco1", "followers_url": "https://api.github.com/users/Wilco1/followers", "following_url": "https://api.github.com/users/Wilco1/following{/other_user}", "gists_url": "https://api.github.com/users/Wilco1/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wilco1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wilco1/subscriptions", "organizations_url": "https://api.github.com/users/Wilco1/orgs", "repos_url": "https://api.github.com/users/Wilco1/repos", "events_url": "https://api.github.com/users/Wilco1/events{/privacy}", "received_events_url": "https://api.github.com/users/Wilco1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Wilco1", "id": 58446312, "node_id": "MDQ6VXNlcjU4NDQ2MzEy", "avatar_url": "https://avatars.githubusercontent.com/u/58446312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wilco1", "html_url": "https://github.com/Wilco1", "followers_url": "https://api.github.com/users/Wilco1/followers", "following_url": "https://api.github.com/users/Wilco1/following{/other_user}", "gists_url": "https://api.github.com/users/Wilco1/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wilco1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wilco1/subscriptions", "organizations_url": "https://api.github.com/users/Wilco1/orgs", "repos_url": "https://api.github.com/users/Wilco1/repos", "events_url": "https://api.github.com/users/Wilco1/events{/privacy}", "received_events_url": "https://api.github.com/users/Wilco1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "138ee8f7453ffdd6856caf35cf32be6661086a54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138ee8f7453ffdd6856caf35cf32be6661086a54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/138ee8f7453ffdd6856caf35cf32be6661086a54"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "4be93c93c26e091f878bc8e4cf06e90888405fb2", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c1b0a23f1fe7db6a2e391b7cb78cff900377772/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c1b0a23f1fe7db6a2e391b7cb78cff900377772/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=0c1b0a23f1fe7db6a2e391b7cb78cff900377772", "patch": "@@ -540,6 +540,7 @@ struct tune_params\n   const char *loop_align;\n   int int_reassoc_width;\n   int fp_reassoc_width;\n+  int fma_reassoc_width;\n   int vec_reassoc_width;\n   int min_div_recip_mul_sf;\n   int min_div_recip_mul_df;"}, {"sha": "15d478c77ceb2d6c52a70b6ffd8fdadcfa8deba0", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c1b0a23f1fe7db6a2e391b7cb78cff900377772/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c1b0a23f1fe7db6a2e391b7cb78cff900377772/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=0c1b0a23f1fe7db6a2e391b7cb78cff900377772", "patch": "@@ -1346,6 +1346,7 @@ static const struct tune_params generic_tunings =\n   \"8\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -1382,6 +1383,7 @@ static const struct tune_params cortexa35_tunings =\n   \"8\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -1415,6 +1417,7 @@ static const struct tune_params cortexa53_tunings =\n   \"8\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -1448,6 +1451,7 @@ static const struct tune_params cortexa57_tunings =\n   \"8\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -1481,6 +1485,7 @@ static const struct tune_params cortexa72_tunings =\n   \"8\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -1514,6 +1519,7 @@ static const struct tune_params cortexa73_tunings =\n   \"8\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -1548,6 +1554,7 @@ static const struct tune_params exynosm1_tunings =\n   \"4\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -1580,6 +1587,7 @@ static const struct tune_params thunderxt88_tunings =\n   \"8\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -1612,6 +1620,7 @@ static const struct tune_params thunderx_tunings =\n   \"8\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -1646,6 +1655,7 @@ static const struct tune_params tsv110_tunings =\n   \"8\",  /* loop_align.  */\n   2,    /* int_reassoc_width.  */\n   4,    /* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   1,    /* vec_reassoc_width.  */\n   2,    /* min_div_recip_mul_sf.  */\n   2,    /* min_div_recip_mul_df.  */\n@@ -1678,6 +1688,7 @@ static const struct tune_params xgene1_tunings =\n   \"16\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -1710,6 +1721,7 @@ static const struct tune_params emag_tunings =\n   \"16\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -1743,6 +1755,7 @@ static const struct tune_params qdf24xx_tunings =\n   \"16\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -1778,6 +1791,7 @@ static const struct tune_params saphira_tunings =\n   \"16\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -1811,6 +1825,7 @@ static const struct tune_params thunderx2t99_tunings =\n   \"16\",\t/* loop_align.  */\n   3,\t/* int_reassoc_width.  */\n   2,\t/* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   2,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -1844,6 +1859,7 @@ static const struct tune_params thunderx3t110_tunings =\n   \"16\",\t/* loop_align.  */\n   3,\t/* int_reassoc_width.  */\n   2,\t/* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   2,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -1876,6 +1892,7 @@ static const struct tune_params neoversen1_tunings =\n   \"32:16\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   2,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -1912,6 +1929,7 @@ static const struct tune_params ampere1_tunings =\n   \"32:16\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   2,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -1949,6 +1967,7 @@ static const struct tune_params ampere1a_tunings =\n   \"32:16\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   2,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -2126,6 +2145,7 @@ static const struct tune_params neoversev1_tunings =\n   \"32:16\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n+  4,\t/* fma_reassoc_width.  */\n   2,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -2263,6 +2283,7 @@ static const struct tune_params neoverse512tvb_tunings =\n   \"32:16\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n+  4,\t/* fma_reassoc_width.  */\n   2,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -2451,6 +2472,7 @@ static const struct tune_params neoversen2_tunings =\n   \"32:16\",\t/* loop_align.  */\n   2,\t/* int_reassoc_width.  */\n   4,\t/* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   2,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -2640,6 +2662,7 @@ static const struct tune_params neoversev2_tunings =\n   \"32:16\",\t/* loop_align.  */\n   3,\t/* int_reassoc_width.  */\n   6,\t/* fp_reassoc_width.  */\n+  4,\t/* fma_reassoc_width.  */\n   3,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -2675,6 +2698,7 @@ static const struct tune_params a64fx_tunings =\n   \"32\",\t/* loop_align.  */\n   4,\t/* int_reassoc_width.  */\n   2,\t/* fp_reassoc_width.  */\n+  1,\t/* fma_reassoc_width.  */\n   2,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n@@ -3387,9 +3411,15 @@ aarch64_reassociation_width (unsigned opc, machine_mode mode)\n     return aarch64_tune_params.vec_reassoc_width;\n   if (INTEGRAL_MODE_P (mode))\n     return aarch64_tune_params.int_reassoc_width;\n-  /* Avoid reassociating floating point addition so we emit more FMAs.  */\n-  if (FLOAT_MODE_P (mode) && opc != PLUS_EXPR)\n-    return aarch64_tune_params.fp_reassoc_width;\n+  /* Reassociation reduces the number of FMAs which may result in worse\n+     performance.  Use a per-CPU setting for FMA reassociation which allows\n+     narrow CPUs with few FP pipes to switch it off (value of 1), and wider\n+     CPUs with many FP pipes to enable reassociation.\n+     Since the reassociation pass doesn't understand FMA at all, assume\n+     that any FP addition might turn into FMA.  */\n+  if (FLOAT_MODE_P (mode))\n+    return opc == PLUS_EXPR ? aarch64_tune_params.fma_reassoc_width\n+\t\t\t    : aarch64_tune_params.fp_reassoc_width;\n   return 1;\n }\n "}]}