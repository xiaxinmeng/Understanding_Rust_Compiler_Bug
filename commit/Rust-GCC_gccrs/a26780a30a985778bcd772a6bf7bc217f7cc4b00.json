{"sha": "a26780a30a985778bcd772a6bf7bc217f7cc4b00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI2NzgwYTMwYTk4NTc3OGJjZDc3MmE2YmY3YmMyMTdmN2NjNGIwMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-04-11T13:17:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-04-11T13:17:54Z"}, "message": "re PR c++/23055 (overload resolution does not find templated function (zero -> pointer))\n\n\tPR c++/23055\n\t* pt.c (uses_deducible_template_parms): New.\n\t(deducible_array_bound, deducible_expression): New.\n\t(deducible_template_args): New.\n\t(unify_one_argument): Call uses_deducible_template_parms.\n\nFrom-SVN: r197790", "tree": {"sha": "9fda50c9999e171eb1f653158f73481fa4b9c423", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fda50c9999e171eb1f653158f73481fa4b9c423"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a26780a30a985778bcd772a6bf7bc217f7cc4b00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a26780a30a985778bcd772a6bf7bc217f7cc4b00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a26780a30a985778bcd772a6bf7bc217f7cc4b00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a26780a30a985778bcd772a6bf7bc217f7cc4b00/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "752b81d9c7c4bd1ee5136874ae0852a0127cc373", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/752b81d9c7c4bd1ee5136874ae0852a0127cc373", "html_url": "https://github.com/Rust-GCC/gccrs/commit/752b81d9c7c4bd1ee5136874ae0852a0127cc373"}], "stats": {"total": 160, "additions": 158, "deletions": 2}, "files": [{"sha": "f1cf2ce40c6b6b48b9fbdc759be53aa96e98b702", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26780a30a985778bcd772a6bf7bc217f7cc4b00/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26780a30a985778bcd772a6bf7bc217f7cc4b00/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a26780a30a985778bcd772a6bf7bc217f7cc4b00", "patch": "@@ -1,3 +1,11 @@\n+2013-04-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/23055\n+\t* pt.c (uses_deducible_template_parms): New.\n+\t(deducible_array_bound, deducible_expression): New.\n+\t(deducible_template_args): New.\n+\t(unify_one_argument): Call uses_deducible_template_parms.\n+\n 2013-04-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/56913"}, {"sha": "5bb0cc03b9f1151436ab0b931e7d9ec32de98ba3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 141, "deletions": 1, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26780a30a985778bcd772a6bf7bc217f7cc4b00/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26780a30a985778bcd772a6bf7bc217f7cc4b00/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a26780a30a985778bcd772a6bf7bc217f7cc4b00", "patch": "@@ -15357,6 +15357,135 @@ check_non_deducible_conversion (tree parm, tree arg, int strict,\n     return unify_arg_conversion (explain_p, parm, type, arg);\n }\n \n+static bool uses_deducible_template_parms (tree type);\n+\n+/* Returns true iff the expression EXPR is one from which a template\n+   argument can be deduced.  In other words, if it's an undecorated\n+   use of a template non-type parameter.  */\n+\n+static bool\n+deducible_expression (tree expr)\n+{\n+  return (TREE_CODE (expr) == TEMPLATE_PARM_INDEX);\n+}\n+\n+/* Returns true iff the array domain DOMAIN uses a template parameter in a\n+   deducible way; that is, if it has a max value of <PARM> - 1.  */\n+\n+static bool\n+deducible_array_bound (tree domain)\n+{\n+  if (domain == NULL_TREE)\n+    return false;\n+\n+  tree max = TYPE_MAX_VALUE (domain);\n+  if (TREE_CODE (max) != MINUS_EXPR)\n+    return false;\n+\n+  return deducible_expression (TREE_OPERAND (max, 0));\n+}\n+\n+/* Returns true iff the template arguments ARGS use a template parameter\n+   in a deducible way.  */\n+\n+static bool\n+deducible_template_args (tree args)\n+{\n+  for (int i = 0; i < TREE_VEC_LENGTH (args); ++i)\n+    {\n+      bool deducible;\n+      tree elt = TREE_VEC_ELT (args, i);\n+      if (ARGUMENT_PACK_P (elt))\n+\tdeducible = deducible_template_args (ARGUMENT_PACK_ARGS (elt));\n+      else\n+\t{\n+\t  if (PACK_EXPANSION_P (elt))\n+\t    elt = PACK_EXPANSION_PATTERN (elt);\n+\t  if (TREE_CODE (elt) == TEMPLATE_TEMPLATE_PARM)\n+\t    deducible = true;\n+\t  else if (TYPE_P (elt))\n+\t    deducible = uses_deducible_template_parms (elt);\n+\t  else\n+\t    deducible = deducible_expression (elt);\n+\t}\n+      if (deducible)\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n+/* Returns true iff TYPE contains any deducible references to template\n+   parameters, as per 14.8.2.5.  */\n+\n+static bool\n+uses_deducible_template_parms (tree type)\n+{\n+  if (PACK_EXPANSION_P (type))\n+    type = PACK_EXPANSION_PATTERN (type);\n+\n+  /* T\n+     cv-list T\n+     TT<T>\n+     TT<i>\n+     TT<> */\n+  if (TREE_CODE (type) == TEMPLATE_TYPE_PARM\n+      || TREE_CODE (type) == BOUND_TEMPLATE_TEMPLATE_PARM)\n+    return true;\n+\n+  /* T*\n+     T&\n+     T&&  */\n+  if (POINTER_TYPE_P (type))\n+    return uses_deducible_template_parms (TREE_TYPE (type));\n+\n+  /* T[integer-constant ]\n+     type [i]  */\n+  if (TREE_CODE (type) == ARRAY_TYPE)\n+    return (uses_deducible_template_parms (TREE_TYPE (type))\n+\t    || deducible_array_bound (TYPE_DOMAIN (type)));\n+\n+  /* T type ::*\n+     type T::*\n+     T T::*\n+     T (type ::*)()\n+     type (T::*)()\n+     type (type ::*)(T)\n+     type (T::*)(T)\n+     T (type ::*)(T)\n+     T (T::*)()\n+     T (T::*)(T) */\n+  if (TYPE_PTRMEM_P (type))\n+    return (uses_deducible_template_parms (TYPE_PTRMEM_CLASS_TYPE (type))\n+\t    || (uses_deducible_template_parms\n+\t\t(TYPE_PTRMEM_POINTED_TO_TYPE (type))));\n+\n+  /* template-name <T> (where template-name refers to a class template)\n+     template-name <i> (where template-name refers to a class template) */\n+  if (CLASS_TYPE_P (type)\n+      && CLASSTYPE_TEMPLATE_INFO (type)\n+      && PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (type)))\n+    return deducible_template_args (INNERMOST_TEMPLATE_ARGS\n+\t\t\t\t    (CLASSTYPE_TI_ARGS (type)));\n+\n+  /* type (T)\n+     T()\n+     T(T)  */\n+  if (TREE_CODE (type) == FUNCTION_TYPE\n+      || TREE_CODE (type) == METHOD_TYPE)\n+    {\n+      if (uses_deducible_template_parms (TREE_TYPE (type)))\n+\treturn true;\n+      tree parm = TYPE_ARG_TYPES (type);\n+      if (TREE_CODE (type) == METHOD_TYPE)\n+\tparm = TREE_CHAIN (parm);\n+      for (; parm; parm = TREE_CHAIN (parm))\n+\tif (uses_deducible_template_parms (TREE_VALUE (parm)))\n+\t  return true;\n+    }\n+\n+  return false;\n+}\n+\n /* Subroutine of type_unification_real and unify_pack_expansion to\n    handle unification of a single P/A pair.  Parameters are as\n    for those functions.  */\n@@ -15376,10 +15505,21 @@ unify_one_argument (tree tparms, tree targs, tree parm, tree arg,\n        template args from other function args.  */\n     return unify_success (explain_p);\n \n-  /* FIXME uses_deducible_template_parms */\n+  /* Implicit conversions (Clause 4) will be performed on a function\n+     argument to convert it to the type of the corresponding function\n+     parameter if the parameter type contains no template-parameters that\n+     participate in template argument deduction.  */\n   if (TYPE_P (parm) && !uses_template_parms (parm))\n+    /* For function parameters that contain no template-parameters at all,\n+       we have historically checked for convertibility in order to shortcut\n+       consideration of this candidate.  */\n     return check_non_deducible_conversion (parm, arg, strict, flags,\n \t\t\t\t\t   explain_p);\n+  else if (strict == DEDUCE_CALL\n+\t   && TYPE_P (parm) && !uses_deducible_template_parms (parm))\n+    /* For function parameters with only non-deducible template parameters,\n+       just return.  */\n+    return unify_success (explain_p);\n \n   switch (strict)\n     {"}, {"sha": "421352489041c6d69a6d759bfdf52b063b479c6d", "filename": "gcc/testsuite/g++.dg/template/non-deducible1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26780a30a985778bcd772a6bf7bc217f7cc4b00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-deducible1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26780a30a985778bcd772a6bf7bc217f7cc4b00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-deducible1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-deducible1.C?ref=a26780a30a985778bcd772a6bf7bc217f7cc4b00", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/23055\n+\n+template <class> struct S { typedef int type; };\n+\n+template <class T>\n+int foo(T, typename S<T>::type * ret);\n+\n+int j = foo(1, 0);"}, {"sha": "f3994083ebec13087912495fe43058a082cec1b4", "filename": "gcc/testsuite/g++.dg/template/nontype25.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a26780a30a985778bcd772a6bf7bc217f7cc4b00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a26780a30a985778bcd772a6bf7bc217f7cc4b00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype25.C?ref=a26780a30a985778bcd772a6bf7bc217f7cc4b00", "patch": "@@ -7,7 +7,7 @@ template<const A* a> class C {};\n template<const B* b> class D {};\n template<B* b> class E {};\n \n-template<const B* b> void f(D<b> &, C<static_cast<const A*>(b)> &) {} // { dg-error \"\" \"\" { target c++98 } }\n+template<const B* b> void f(D<b> &, C<static_cast<const A*>(b)> &) {} // { dg-error \"\" \"\" }\n template<const B* b> void g(D<b> &, E<const_cast<B*>(b)> &) {} // { dg-error \"\" \"\" { target c++98 } }\n \n B b;"}]}