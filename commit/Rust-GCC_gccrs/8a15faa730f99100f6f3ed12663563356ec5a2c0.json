{"sha": "8a15faa730f99100f6f3ed12663563356ec5a2c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGExNWZhYTczMGY5OTEwMGY2ZjNlZDEyNjYzNTYzMzU2ZWM1YTJjMA==", "commit": {"author": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2020-05-15T02:03:24Z"}, "committer": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2020-05-15T02:06:50Z"}, "message": "Fold (add -1; zero_ext; add +1) operations to zero_ext when not overflow(PR37451, PR61837)\n\nThis \"subtract/extend/add\" existed for a long time and still annoying us\n(PR37451, part of PR61837) when converting from 32bits to 64bits, as the ctr\nregister is used as 64bits on powerpc64, Andraw Pinski had a patch but\ncaused some issue and reverted by Joseph S. Myers(PR37451, PR37782).\n\nAndraw:\nhttp://gcc.gnu.org/ml/gcc-patches/2008-09/msg01070.html\nhttp://gcc.gnu.org/ml/gcc-patches/2008-10/msg01321.html\nJoseph:\nhttps://gcc.gnu.org/legacy-ml/gcc-patches/2011-11/msg02405.html\n\nWe still can do the simplification from \"subtract/zero_ext/add\" to \"zero_ext\"\nwhen loop iterations is known to be LT than MODE_MAX (only do simplify\nwhen counter+0x1 NOT overflow).\n\nBootstrap and regression tested pass on Power8-LE.\n\ngcc/ChangeLog\n\n\t2020-05-15  Xiong Hu Luo  <luoxhu@linux.ibm.com>\n\n\tPR rtl-optimization/37451, part of PR target/61837\n\t* loop-doloop.c (doloop_simplify_count): New function.  Simplify\n\t(add -1; zero_ext; add +1) to zero_ext when not wrapping.\n\t(doloop_modify): Call doloop_simplify_count.\n\ngcc/testsuite/ChangeLog\n\n\t2020-05-15  Xiong Hu Luo  <luoxhu@linux.ibm.com>\n\n\tPR rtl-optimization/37451, part of PR target/61837\n\t* gcc.target/powerpc/doloop-2.c: New test.", "tree": {"sha": "534a282a2cf01a9b3f1dca437eb0480bfa5aefd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/534a282a2cf01a9b3f1dca437eb0480bfa5aefd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a15faa730f99100f6f3ed12663563356ec5a2c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a15faa730f99100f6f3ed12663563356ec5a2c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a15faa730f99100f6f3ed12663563356ec5a2c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a15faa730f99100f6f3ed12663563356ec5a2c0/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98aad12cd2e618286a36fed9bc870f19bdbc0f07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98aad12cd2e618286a36fed9bc870f19bdbc0f07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98aad12cd2e618286a36fed9bc870f19bdbc0f07"}], "stats": {"total": 79, "additions": 78, "deletions": 1}, "files": [{"sha": "c7b080f7c11bf61e2aa29a83a034941ee29e934e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a15faa730f99100f6f3ed12663563356ec5a2c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a15faa730f99100f6f3ed12663563356ec5a2c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a15faa730f99100f6f3ed12663563356ec5a2c0", "patch": "@@ -1,3 +1,10 @@\n+2020-05-14  Xiong Hu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR rtl-optimization/37451, part of PR target/61837\n+\t* loop-doloop.c (doloop_simplify_count): New function.  Simplify\n+\t(add -1; zero_ext; add +1) to zero_ext when not wrapping.\n+\t(doloop_modify): Call doloop_simplify_count.\n+\n 2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR jit/94778"}, {"sha": "02282d45bd545cbd3b207ec2b637196d226b9dfc", "filename": "gcc/loop-doloop.c", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a15faa730f99100f6f3ed12663563356ec5a2c0/gcc%2Floop-doloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a15faa730f99100f6f3ed12663563356ec5a2c0/gcc%2Floop-doloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-doloop.c?ref=8a15faa730f99100f6f3ed12663563356ec5a2c0", "patch": "@@ -397,6 +397,42 @@ add_test (rtx cond, edge *e, basic_block dest)\n   return true;\n }\n \n+/* Fold (add -1; zero_ext; add +1) operations to zero_ext if not wrapping. i.e:\n+\n+   73: r145:SI=r123:DI#0-0x1\n+   74: r144:DI=zero_extend (r145:SI)\n+   75: r143:DI=r144:DI+0x1\n+   ...\n+   31: r135:CC=cmp (r123:DI,0)\n+   72: {pc={(r143:DI!=0x1)?L70:pc};r143:DI=r143:DI-0x1;...}\n+\n+   r123:DI#0-0x1 is param count derived from loop->niter_expr equal to number of\n+   loop iterations, if loop iterations expression doesn't overflow, then\n+   (zero_extend (r123:DI#0-1))+1 can be simplified to zero_extend.  */\n+\n+static rtx\n+doloop_simplify_count (class loop *loop, scalar_int_mode mode, rtx count)\n+{\n+  widest_int iterations;\n+  if (GET_CODE (count) == ZERO_EXTEND)\n+    {\n+      rtx extop0 = XEXP (count, 0);\n+      if (GET_CODE (extop0) == PLUS)\n+\t{\n+\t  rtx addop0 = XEXP (extop0, 0);\n+\t  rtx addop1 = XEXP (extop0, 1);\n+\n+\t  if (get_max_loop_iterations (loop, &iterations)\n+\t      && wi::ltu_p (iterations, GET_MODE_MASK (GET_MODE (addop0)))\n+\t      && addop1 == constm1_rtx)\n+\t    return simplify_gen_unary (ZERO_EXTEND, mode, addop0,\n+\t\t\t\t       GET_MODE (addop0));\n+\t}\n+    }\n+\n+  return simplify_gen_binary (PLUS, mode, count, const1_rtx);\n+}\n+\n /* Modify the loop to use the low-overhead looping insn where LOOP\n    describes the loop, DESC describes the number of iterations of the\n    loop, and DOLOOP_INSN is the low-overhead looping insn to emit at the\n@@ -477,7 +513,7 @@ doloop_modify (class loop *loop, class niter_desc *desc,\n     }\n \n   if (increment_count)\n-    count = simplify_gen_binary (PLUS, mode, count, const1_rtx);\n+    count = doloop_simplify_count (loop, mode, count);\n \n   /* Insert initialization of the count register into the loop header.  */\n   start_sequence ();"}, {"sha": "e2ee69f9b47698a510898b76d8587ad3ac10ef94", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a15faa730f99100f6f3ed12663563356ec5a2c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a15faa730f99100f6f3ed12663563356ec5a2c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a15faa730f99100f6f3ed12663563356ec5a2c0", "patch": "@@ -1,3 +1,8 @@\n+2020-05-14  Xiong Hu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR rtl-optimization/37451, part of PR target/61837\n+\t* gcc.target/powerpc/doloop-2.c: New test.\n+\n 2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR jit/94778"}, {"sha": "3199fe56d35a3297a0f4b401e37542cff9f0f8a8", "filename": "gcc/testsuite/gcc.target/powerpc/doloop-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a15faa730f99100f6f3ed12663563356ec5a2c0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdoloop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a15faa730f99100f6f3ed12663563356ec5a2c0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdoloop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdoloop-2.c?ref=8a15faa730f99100f6f3ed12663563356ec5a2c0", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-unroll-loops\" } */\n+\n+unsigned int\n+foo1 (unsigned int l, int *a)\n+{\n+  unsigned int i;\n+  for(i = 0;i < l; i++)\n+    a[i] = i;\n+  return l;\n+}\n+\n+int\n+foo2 (int l, int *a)\n+{\n+  int i;\n+  for(i = 0;i < l; i++)\n+    a[i] = i;\n+  return l;\n+}\n+\n+/* The place where we were getting an extra -1 is when converting from 32bits\n+   to 64bits as the ctr register is used as 64bits on powerpc64.  We should be\n+   able to do this loop without \"add -1/zero_ext/add 1\" to the l to get the\n+   number of iterations of this loop still doing a do-loop.  */\n+\n+/* { dg-final { scan-assembler-not {(?n)\\maddi .*,.*,-1$} } } */\n+/* { dg-final { scan-assembler-times \"bdnz\" 2 } } */\n+/* { dg-final { scan-assembler-times \"mtctr\" 2 } } */"}]}