{"sha": "a1ac80507d37425ef84fa68431bb2c63d6b27fef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFhYzgwNTA3ZDM3NDI1ZWY4NGZhNjg0MzFiYjJjNjNkNmIyN2ZlZg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-02-04T13:53:56Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-02-04T13:53:56Z"}, "message": "[AArch64] Use std::swap instead of manually swapping in aarch64-ldpstp.md\n\n\t* config/aarch64/aarch64-ldpstp.md: Use std::swap instead of\n\tmanual swaps in all peepholes.\n\nFrom-SVN: r220403", "tree": {"sha": "7041efec9b37a932620bd30c24cd98a0ca8d8fbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7041efec9b37a932620bd30c24cd98a0ca8d8fbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1ac80507d37425ef84fa68431bb2c63d6b27fef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ac80507d37425ef84fa68431bb2c63d6b27fef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1ac80507d37425ef84fa68431bb2c63d6b27fef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ac80507d37425ef84fa68431bb2c63d6b27fef/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb5c6c29bd43d21f7ab86d53605bc728c5fb5374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb5c6c29bd43d21f7ab86d53605bc728c5fb5374", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb5c6c29bd43d21f7ab86d53605bc728c5fb5374"}], "stats": {"total": 173, "additions": 53, "deletions": 120}, "files": [{"sha": "d63c59cacbeecd31ea870de32f4f3fde3991ddd8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ac80507d37425ef84fa68431bb2c63d6b27fef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ac80507d37425ef84fa68431bb2c63d6b27fef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1ac80507d37425ef84fa68431bb2c63d6b27fef", "patch": "@@ -1,3 +1,8 @@\n+2015-02-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-ldpstp.md: Use std::swap instead of\n+\tmanual swaps in all peepholes.\n+\n 2015-02-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_evpc_ext): Use std::swap instead"}, {"sha": "8d6d88259d5931a38b152791bc1a7f5e2681b2f5", "filename": "gcc/config/aarch64/aarch64-ldpstp.md", "status": "modified", "additions": 48, "deletions": 120, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ac80507d37425ef84fa68431bb2c63d6b27fef/gcc%2Fconfig%2Faarch64%2Faarch64-ldpstp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ac80507d37425ef84fa68431bb2c63d6b27fef/gcc%2Fconfig%2Faarch64%2Faarch64-ldpstp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-ldpstp.md?ref=a1ac80507d37425ef84fa68431bb2c63d6b27fef", "patch": "@@ -27,18 +27,14 @@\n   [(parallel [(set (match_dup 0) (match_dup 1))\n \t      (set (match_dup 2) (match_dup 3))])]\n {\n-  rtx base, offset_1, offset_2, tmp;\n+  rtx base, offset_1, offset_2;\n \n   extract_base_offset_in_addr (operands[1], &base, &offset_1);\n   extract_base_offset_in_addr (operands[3], &base, &offset_2);\n   if (INTVAL (offset_1) > INTVAL (offset_2))\n     {\n-      tmp = operands[0];\n-      operands[0] = operands[2];\n-      operands[2] = tmp;\n-      tmp = operands[1];\n-      operands[1] = operands[3];\n-      operands[3] = tmp;\n+      std::swap (operands[0], operands[2]);\n+      std::swap (operands[1], operands[3]);\n     }\n })\n \n@@ -51,18 +47,14 @@\n   [(parallel [(set (match_dup 0) (match_dup 1))\n \t      (set (match_dup 2) (match_dup 3))])]\n {\n-  rtx base, offset_1, offset_2, tmp;\n+  rtx base, offset_1, offset_2;\n \n   extract_base_offset_in_addr (operands[0], &base, &offset_1);\n   extract_base_offset_in_addr (operands[2], &base, &offset_2);\n   if (INTVAL (offset_1) > INTVAL (offset_2))\n     {\n-      tmp = operands[0];\n-      operands[0] = operands[2];\n-      operands[2] = tmp;\n-      tmp = operands[1];\n-      operands[1] = operands[3];\n-      operands[3] = tmp;\n+      std::swap (operands[0], operands[2]);\n+      std::swap (operands[1], operands[3]);\n     }\n })\n \n@@ -75,18 +67,14 @@\n   [(parallel [(set (match_dup 0) (match_dup 1))\n \t      (set (match_dup 2) (match_dup 3))])]\n {\n-  rtx base, offset_1, offset_2, tmp;\n+  rtx base, offset_1, offset_2;\n \n   extract_base_offset_in_addr (operands[1], &base, &offset_1);\n   extract_base_offset_in_addr (operands[3], &base, &offset_2);\n   if (INTVAL (offset_1) > INTVAL (offset_2))\n     {\n-      tmp = operands[0];\n-      operands[0] = operands[2];\n-      operands[2] = tmp;\n-      tmp = operands[1];\n-      operands[1] = operands[3];\n-      operands[3] = tmp;\n+      std::swap (operands[0], operands[2]);\n+      std::swap (operands[1], operands[3]);\n     }\n })\n \n@@ -99,18 +87,14 @@\n   [(parallel [(set (match_dup 0) (match_dup 1))\n \t      (set (match_dup 2) (match_dup 3))])]\n {\n-  rtx base, offset_1, offset_2, tmp;\n+  rtx base, offset_1, offset_2;\n \n   extract_base_offset_in_addr (operands[0], &base, &offset_1);\n   extract_base_offset_in_addr (operands[2], &base, &offset_2);\n   if (INTVAL (offset_1) > INTVAL (offset_2))\n     {\n-      tmp = operands[0];\n-      operands[0] = operands[2];\n-      operands[2] = tmp;\n-      tmp = operands[1];\n-      operands[1] = operands[3];\n-      operands[3] = tmp;\n+      std::swap (operands[0], operands[2]);\n+      std::swap (operands[1], operands[3]);\n     }\n })\n \n@@ -125,18 +109,14 @@\n   [(parallel [(set (match_dup 0) (sign_extend:DI (match_dup 1)))\n \t      (set (match_dup 2) (sign_extend:DI (match_dup 3)))])]\n {\n-  rtx base, offset_1, offset_2, tmp;\n+  rtx base, offset_1, offset_2;\n \n   extract_base_offset_in_addr (operands[1], &base, &offset_1);\n   extract_base_offset_in_addr (operands[3], &base, &offset_2);\n   if (INTVAL (offset_1) > INTVAL (offset_2))\n     {\n-      tmp = operands[0];\n-      operands[0] = operands[2];\n-      operands[2] = tmp;\n-      tmp = operands[1];\n-      operands[1] = operands[3];\n-      operands[3] = tmp;\n+      std::swap (operands[0], operands[2]);\n+      std::swap (operands[1], operands[3]);\n     }\n })\n \n@@ -149,18 +129,14 @@\n   [(parallel [(set (match_dup 0) (zero_extend:DI (match_dup 1)))\n \t      (set (match_dup 2) (zero_extend:DI (match_dup 3)))])]\n {\n-  rtx base, offset_1, offset_2, tmp;\n+  rtx base, offset_1, offset_2;\n \n   extract_base_offset_in_addr (operands[1], &base, &offset_1);\n   extract_base_offset_in_addr (operands[3], &base, &offset_2);\n   if (INTVAL (offset_1) > INTVAL (offset_2))\n     {\n-      tmp = operands[0];\n-      operands[0] = operands[2];\n-      operands[2] = tmp;\n-      tmp = operands[1];\n-      operands[1] = operands[3];\n-      operands[3] = tmp;\n+      std::swap (operands[0], operands[2]);\n+      std::swap (operands[1], operands[3]);\n     }\n })\n \n@@ -183,24 +159,16 @@\n   \"aarch64_operands_adjust_ok_for_ldpstp (operands, true, <MODE>mode)\"\n   [(const_int 0)]\n {\n-  rtx base, offset_1, offset_2, tmp;\n+  rtx base, offset_1, offset_2;\n \n   extract_base_offset_in_addr (operands[1], &base, &offset_1);\n   extract_base_offset_in_addr (operands[3], &base, &offset_2);\n   if (INTVAL (offset_1) > INTVAL (offset_2))\n     {\n-      tmp = operands[0];\n-      operands[0] = operands[6];\n-      operands[6] = tmp;\n-      tmp = operands[1];\n-      operands[1] = operands[7];\n-      operands[7] = tmp;\n-      tmp = operands[2];\n-      operands[2] = operands[4];\n-      operands[4] = tmp;\n-      tmp = operands[3];\n-      operands[3] = operands[5];\n-      operands[5] = tmp;\n+      std::swap (operands[0], operands[6]);\n+      std::swap (operands[1], operands[7]);\n+      std::swap (operands[2], operands[4]);\n+      std::swap (operands[3], operands[5]);\n     }\n \n   if (aarch64_gen_adjusted_ldpstp (operands, true, <MODE>mode, UNKNOWN))\n@@ -223,24 +191,16 @@\n   \"aarch64_operands_adjust_ok_for_ldpstp (operands, true, <MODE>mode)\"\n   [(const_int 0)]\n {\n-  rtx base, offset_1, offset_2, tmp;\n+  rtx base, offset_1, offset_2;\n \n   extract_base_offset_in_addr (operands[1], &base, &offset_1);\n   extract_base_offset_in_addr (operands[3], &base, &offset_2);\n   if (INTVAL (offset_1) > INTVAL (offset_2))\n     {\n-      tmp = operands[0];\n-      operands[0] = operands[6];\n-      operands[6] = tmp;\n-      tmp = operands[1];\n-      operands[1] = operands[7];\n-      operands[7] = tmp;\n-      tmp = operands[2];\n-      operands[2] = operands[4];\n-      operands[4] = tmp;\n-      tmp = operands[3];\n-      operands[3] = operands[5];\n-      operands[5] = tmp;\n+      std::swap (operands[0], operands[6]);\n+      std::swap (operands[1], operands[7]);\n+      std::swap (operands[2], operands[4]);\n+      std::swap (operands[3], operands[5]);\n     }\n \n   if (aarch64_gen_adjusted_ldpstp (operands, true, <MODE>mode, UNKNOWN))\n@@ -263,24 +223,16 @@\n   \"aarch64_operands_adjust_ok_for_ldpstp (operands, true, SImode)\"\n   [(const_int 0)]\n {\n-  rtx base, offset_1, offset_2, tmp;\n+  rtx base, offset_1, offset_2;\n \n   extract_base_offset_in_addr (operands[1], &base, &offset_1);\n   extract_base_offset_in_addr (operands[3], &base, &offset_2);\n   if (INTVAL (offset_1) > INTVAL (offset_2))\n     {\n-      tmp = operands[0];\n-      operands[0] = operands[6];\n-      operands[6] = tmp;\n-      tmp = operands[1];\n-      operands[1] = operands[7];\n-      operands[7] = tmp;\n-      tmp = operands[2];\n-      operands[2] = operands[4];\n-      operands[4] = tmp;\n-      tmp = operands[3];\n-      operands[3] = operands[5];\n-      operands[5] = tmp;\n+      std::swap (operands[0], operands[6]);\n+      std::swap (operands[1], operands[7]);\n+      std::swap (operands[2], operands[4]);\n+      std::swap (operands[3], operands[5]);\n     }\n \n   if (aarch64_gen_adjusted_ldpstp (operands, true, SImode, SIGN_EXTEND))\n@@ -303,24 +255,16 @@\n   \"aarch64_operands_adjust_ok_for_ldpstp (operands, true, SImode)\"\n   [(const_int 0)]\n {\n-  rtx base, offset_1, offset_2, tmp;\n+  rtx base, offset_1, offset_2;\n \n   extract_base_offset_in_addr (operands[1], &base, &offset_1);\n   extract_base_offset_in_addr (operands[3], &base, &offset_2);\n   if (INTVAL (offset_1) > INTVAL (offset_2))\n     {\n-      tmp = operands[0];\n-      operands[0] = operands[6];\n-      operands[6] = tmp;\n-      tmp = operands[1];\n-      operands[1] = operands[7];\n-      operands[7] = tmp;\n-      tmp = operands[2];\n-      operands[2] = operands[4];\n-      operands[4] = tmp;\n-      tmp = operands[3];\n-      operands[3] = operands[5];\n-      operands[5] = tmp;\n+      std::swap (operands[0], operands[6]);\n+      std::swap (operands[1], operands[7]);\n+      std::swap (operands[2], operands[4]);\n+      std::swap (operands[3], operands[5]);\n     }\n \n   if (aarch64_gen_adjusted_ldpstp (operands, true, SImode, ZERO_EXTEND))\n@@ -343,24 +287,16 @@\n   \"aarch64_operands_adjust_ok_for_ldpstp (operands, false, <MODE>mode)\"\n   [(const_int 0)]\n {\n-  rtx base, offset_1, offset_2, tmp;\n+  rtx base, offset_1, offset_2;\n \n   extract_base_offset_in_addr (operands[0], &base, &offset_1);\n   extract_base_offset_in_addr (operands[2], &base, &offset_2);\n   if (INTVAL (offset_1) > INTVAL (offset_2))\n     {\n-      tmp = operands[0];\n-      operands[0] = operands[6];\n-      operands[6] = tmp;\n-      tmp = operands[1];\n-      operands[1] = operands[7];\n-      operands[7] = tmp;\n-      tmp = operands[2];\n-      operands[2] = operands[4];\n-      operands[4] = tmp;\n-      tmp = operands[3];\n-      operands[3] = operands[5];\n-      operands[5] = tmp;\n+      std::swap (operands[0], operands[6]);\n+      std::swap (operands[1], operands[7]);\n+      std::swap (operands[2], operands[4]);\n+      std::swap (operands[3], operands[5]);\n     }\n \n   if (aarch64_gen_adjusted_ldpstp (operands, false, <MODE>mode, UNKNOWN))\n@@ -383,24 +319,16 @@\n   \"aarch64_operands_adjust_ok_for_ldpstp (operands, false, <MODE>mode)\"\n   [(const_int 0)]\n {\n-  rtx base, offset_1, offset_2, tmp;\n+  rtx base, offset_1, offset_2;\n \n   extract_base_offset_in_addr (operands[0], &base, &offset_1);\n   extract_base_offset_in_addr (operands[2], &base, &offset_2);\n   if (INTVAL (offset_1) > INTVAL (offset_2))\n     {\n-      tmp = operands[0];\n-      operands[0] = operands[6];\n-      operands[6] = tmp;\n-      tmp = operands[1];\n-      operands[1] = operands[7];\n-      operands[7] = tmp;\n-      tmp = operands[2];\n-      operands[2] = operands[4];\n-      operands[4] = tmp;\n-      tmp = operands[3];\n-      operands[3] = operands[5];\n-      operands[5] = tmp;\n+      std::swap (operands[0], operands[6]);\n+      std::swap (operands[1], operands[7]);\n+      std::swap (operands[2], operands[4]);\n+      std::swap (operands[3], operands[5]);\n     }\n \n   if (aarch64_gen_adjusted_ldpstp (operands, false, <MODE>mode, UNKNOWN))"}]}