{"sha": "f64e0c029c452c9fc508adebf18d0ceb3ffdc066", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY0ZTBjMDI5YzQ1MmM5ZmM1MDhhZGViZjE4ZDBjZWIzZmZkYzA2Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-10-25T17:23:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-10-25T17:23:44Z"}, "message": "constexpr.c (maybe_constant_init): Pull out TARGET_EXPR_INITIAL.\n\n\t* constexpr.c (maybe_constant_init): Pull out TARGET_EXPR_INITIAL.\n\n\t(cxx_eval_outermost_constant_expr): Don't return a CONSTRUCTOR\n\twith CONSTRUCTOR_NO_IMPLICIT_ZERO.\n\t(cxx_eval_call_expression): Clear CONSTRUCTOR_NO_IMPLICIT_ZERO.\n\nFrom-SVN: r241531", "tree": {"sha": "aadf065579df3086e8a1c0647f565aec732d4588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aadf065579df3086e8a1c0647f565aec732d4588"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f64e0c029c452c9fc508adebf18d0ceb3ffdc066", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64e0c029c452c9fc508adebf18d0ceb3ffdc066", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f64e0c029c452c9fc508adebf18d0ceb3ffdc066", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64e0c029c452c9fc508adebf18d0ceb3ffdc066/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90e261e494a5f1fda83b815f513c5621fa5f8c83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e261e494a5f1fda83b815f513c5621fa5f8c83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90e261e494a5f1fda83b815f513c5621fa5f8c83"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "1276d13ad701f19b195a8dc29ae24cb332429f2d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64e0c029c452c9fc508adebf18d0ceb3ffdc066/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64e0c029c452c9fc508adebf18d0ceb3ffdc066/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f64e0c029c452c9fc508adebf18d0ceb3ffdc066", "patch": "@@ -1,3 +1,10 @@\n+2016-10-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.c (maybe_constant_init): Pull out TARGET_EXPR_INITIAL.\n+\t(cxx_eval_outermost_constant_expr): Don't return a CONSTRUCTOR\n+\twith CONSTRUCTOR_NO_IMPLICIT_ZERO.\n+\t(cxx_eval_call_expression): Clear CONSTRUCTOR_NO_IMPLICIT_ZERO.\n+\n 2016-10-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parser.c (cp_parser_postfix_expression): Adding missing break;."}, {"sha": "1ebd647e7d1c5a0a975e859c8f661771cc4c9e17", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64e0c029c452c9fc508adebf18d0ceb3ffdc066/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64e0c029c452c9fc508adebf18d0ceb3ffdc066/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=f64e0c029c452c9fc508adebf18d0ceb3ffdc066", "patch": "@@ -1665,6 +1665,10 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \tentry->result = result;\n     }\n \n+  /* The result of a constexpr function must be completely initialized.  */\n+  if (TREE_CODE (result) == CONSTRUCTOR)\n+    CONSTRUCTOR_NO_IMPLICIT_ZERO (result) = false;\n+\n   pop_cx_call_context ();\n   return unshare_constructor (result);\n }\n@@ -4483,6 +4487,16 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,\n       non_constant_p = true;\n     }\n \n+  if (TREE_CODE (r) == CONSTRUCTOR\n+      && CONSTRUCTOR_NO_IMPLICIT_ZERO (r))\n+    {\n+      if (!allow_non_constant)\n+\terror (\"%qE is not a constant expression because it refers to \"\n+\t       \"an incompletely initialized variable\", t);\n+      TREE_CONSTANT (r) = false;\n+      non_constant_p = true;\n+    }\n+\n   /* Technically we should check this for all subexpressions, but that\n      runs into problems with our internal representation of pointer\n      subtraction and the 5.19 rules are still in flux.  */\n@@ -4781,6 +4795,8 @@ maybe_constant_init (tree t, tree decl)\n     t = TREE_OPERAND (t, 0);\n   if (TREE_CODE (t) == INIT_EXPR)\n     t = TREE_OPERAND (t, 1);\n+  if (TREE_CODE (t) == TARGET_EXPR)\n+    t = TARGET_EXPR_INITIAL (t);\n   if (!potential_nondependent_static_init_expression (t))\n     /* Don't try to evaluate it.  */;\n   else"}, {"sha": "4faa8cfd108c89ade9cef39dac7f99cca673830c", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-static12.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64e0c029c452c9fc508adebf18d0ceb3ffdc066/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-static12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64e0c029c452c9fc508adebf18d0ceb3ffdc066/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-static12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-static12.C?ref=f64e0c029c452c9fc508adebf18d0ceb3ffdc066", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-final { scan-assembler-not \"_ZNSt10unique_ptrC1Ei\" } }\n+\n+namespace std {\n+  struct unique_ptr {\n+    constexpr unique_ptr(int) : p() { }\n+    ~unique_ptr() { }\n+    void* p;\n+  };\n+}\n+\n+void f()\n+{\n+  static std::unique_ptr p(1);\n+}\n+\n+int main()\n+{\n+  f();\n+}"}]}