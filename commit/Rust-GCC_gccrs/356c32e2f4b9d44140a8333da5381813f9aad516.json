{"sha": "356c32e2f4b9d44140a8333da5381813f9aad516", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU2YzMyZTJmNGI5ZDQ0MTQwYTgzMzNkYTUzODE4MTNmOWFhZDUxNg==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-08-14T15:05:42Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2015-08-14T15:05:42Z"}, "message": "re PR target/67143 (ICE (could not split insn) on aarch64-linux-gnu)\n\ngcc/\n2015-08-14  Matthew Wahab  <matthew.wahab@arm.com>\n\n\tPR target/67143\n\t* config/aarch64/atomics.md (atomic_<optab><mode>): Replace\n\t'lconst_atomic' with 'const_atomic'.\n\t(atomic_fetch_<optab><mode>): Likewise.\n\t(atomic_<optab>_fetch<mode>): Likewise.\n\t* config/aarch64/iterators.md (lconst-atomic): Move below\n\t'const_atomic'.\n\t(const_atomic): New.\n\ngcc/testsuite/\n2015-08-14  Matthew Wahab  <matthew.wahab@arm.com>\n\t    Matthias Klose  <doko@debian.org>\n\n\tPR target/67143\n\t* gcc.c-torture/compile/pr67143.c: New\n\t* gcc.target/aarch64/atomic-op-imm.c\n\t(atomic_fetch_add_negative_RELAXED): New.\n\t(atomic_fetch_sub_negative_ACQUIRE): New.\n\n\nCo-Authored-By: Matthias Klose <doko@debian.org>\n\nFrom-SVN: r226895", "tree": {"sha": "973bc4d5a6378f40868d026a02ff8f75bd705c87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/973bc4d5a6378f40868d026a02ff8f75bd705c87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/356c32e2f4b9d44140a8333da5381813f9aad516", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/356c32e2f4b9d44140a8333da5381813f9aad516", "html_url": "https://github.com/Rust-GCC/gccrs/commit/356c32e2f4b9d44140a8333da5381813f9aad516", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/356c32e2f4b9d44140a8333da5381813f9aad516/comments", "author": null, "committer": null, "parents": [{"sha": "2548a4d6ba4d54393ae7947a7a8c9070d9c7e113", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2548a4d6ba4d54393ae7947a7a8c9070d9c7e113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2548a4d6ba4d54393ae7947a7a8c9070d9c7e113"}], "stats": {"total": 74, "additions": 67, "deletions": 7}, "files": [{"sha": "afade5dfea4bc946be0bb5a3c9e50ac494f3320f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356c32e2f4b9d44140a8333da5381813f9aad516/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356c32e2f4b9d44140a8333da5381813f9aad516/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=356c32e2f4b9d44140a8333da5381813f9aad516", "patch": "@@ -1,3 +1,14 @@\n+2015-08-14  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\tPR target/67143\n+\t* config/aarch64/atomics.md (atomic_<optab><mode>): Replace\n+\t'lconst_atomic' with 'const_atomic'.\n+\t(atomic_fetch_<optab><mode>): Likewise.\n+\t(atomic_<optab>_fetch<mode>): Likewise.\n+\t* config/aarch64/iterators.md (lconst-atomic): Move below\n+\t'const_atomic'.\n+\t(const_atomic): New.\n+\n 2015-08-14  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Bernd Schmidt  <bernds@codesourcery.com>\n "}, {"sha": "65d2cc911be244e6bdd79767d841b827455c449b", "filename": "gcc/config/aarch64/atomics.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356c32e2f4b9d44140a8333da5381813f9aad516/gcc%2Fconfig%2Faarch64%2Fatomics.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356c32e2f4b9d44140a8333da5381813f9aad516/gcc%2Fconfig%2Faarch64%2Fatomics.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fatomics.md?ref=356c32e2f4b9d44140a8333da5381813f9aad516", "patch": "@@ -171,7 +171,7 @@\n   [(set (match_operand:ALLI 0 \"aarch64_sync_memory_operand\" \"+Q\")\n     (unspec_volatile:ALLI\n       [(atomic_op:ALLI (match_dup 0)\n-\t(match_operand:ALLI 1 \"<atomic_op_operand>\" \"r<lconst_atomic>\"))\n+\t(match_operand:ALLI 1 \"<atomic_op_operand>\" \"r<const_atomic>\"))\n        (match_operand:SI 2 \"const_int_operand\")]\t\t;; model\n       UNSPECV_ATOMIC_OP))\n        (clobber (reg:CC CC_REGNUM))\n@@ -216,7 +216,7 @@\n    (set (match_dup 1)\n     (unspec_volatile:ALLI\n       [(atomic_op:ALLI (match_dup 1)\n-\t(match_operand:ALLI 2 \"<atomic_op_operand>\" \"r<lconst_atomic>\"))\n+\t(match_operand:ALLI 2 \"<atomic_op_operand>\" \"r<const_atomic>\"))\n        (match_operand:SI 3 \"const_int_operand\")]\t\t;; model\n       UNSPECV_ATOMIC_OP))\n    (clobber (reg:CC CC_REGNUM))\n@@ -261,7 +261,7 @@\n   [(set (match_operand:ALLI 0 \"register_operand\" \"=&r\")\n     (atomic_op:ALLI\n       (match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"+Q\")\n-      (match_operand:ALLI 2 \"<atomic_op_operand>\" \"r<lconst_atomic>\")))\n+      (match_operand:ALLI 2 \"<atomic_op_operand>\" \"r<const_atomic>\")))\n    (set (match_dup 1)\n     (unspec_volatile:ALLI\n       [(match_dup 1) (match_dup 2)"}, {"sha": "b8a45d1d6ed8bbcfcb9a2b37edd0e24ba171649f", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356c32e2f4b9d44140a8333da5381813f9aad516/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356c32e2f4b9d44140a8333da5381813f9aad516/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=356c32e2f4b9d44140a8333da5381813f9aad516", "patch": "@@ -345,9 +345,6 @@\n ;; Attribute to describe constants acceptable in logical operations\n (define_mode_attr lconst [(SI \"K\") (DI \"L\")])\n \n-;; Attribute to describe constants acceptable in atomic logical operations\n-(define_mode_attr lconst_atomic [(QI \"K\") (HI \"K\") (SI \"K\") (DI \"L\")])\n-\n ;; Map a mode to a specific constraint character.\n (define_mode_attr cmode [(QI \"q\") (HI \"h\") (SI \"s\") (DI \"d\")])\n \n@@ -843,6 +840,16 @@\n    (plus \"aarch64_plus_operand\")\n    (minus \"aarch64_plus_operand\")])\n \n+;; Constants acceptable for atomic operations.\n+;; This definition must appear in this file before the iterators it refers to.\n+(define_code_attr const_atomic\n+ [(plus \"IJ\") (minus \"IJ\")\n+  (xor \"<lconst_atomic>\") (ior \"<lconst_atomic>\")\n+  (and \"<lconst_atomic>\")])\n+\n+;; Attribute to describe constants acceptable in atomic logical operations\n+(define_mode_attr lconst_atomic [(QI \"K\") (HI \"K\") (SI \"K\") (DI \"L\")])\n+\n ;; -------------------------------------------------------------------\n ;; Int Iterators.\n ;; -------------------------------------------------------------------"}, {"sha": "9a4cd14860feb3be8cf3f2d3acc224dbcbf20773", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356c32e2f4b9d44140a8333da5381813f9aad516/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356c32e2f4b9d44140a8333da5381813f9aad516/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=356c32e2f4b9d44140a8333da5381813f9aad516", "patch": "@@ -1,3 +1,12 @@\n+2015-08-14  Matthew Wahab  <matthew.wahab@arm.com>\n+\t    Matthias Klose  <doko@debian.org>\n+\n+\tPR target/67143\n+\t* gcc.c-torture/compile/pr67143.c: New\n+\t* gcc.target/aarch64/atomic-op-imm.c\n+\t(atomic_fetch_add_negative_RELAXED): New.\n+\t(atomic_fetch_sub_negative_ACQUIRE): New.\n+\n 2015-08-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/target_attr_5.c: Add static modifier to bar."}, {"sha": "62c4186fc71fd5fd17689a9512a89ad01ae68952", "filename": "gcc/testsuite/gcc.c-torture/compile/pr67143.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356c32e2f4b9d44140a8333da5381813f9aad516/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr67143.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356c32e2f4b9d44140a8333da5381813f9aad516/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr67143.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr67143.c?ref=356c32e2f4b9d44140a8333da5381813f9aad516", "patch": "@@ -0,0 +1,21 @@\n+long a, c;\n+int b;\n+int d;\n+void ut_dbg_assertion_failed() __attribute__((noreturn));\n+long dict_index_is_spatial(int *);\n+void btr_block_get_func(char *);\n+long btr_page_get_level_low(unsigned char *);\n+void btr_validate_level(long p1) {\n+  unsigned char *e;\n+  while (p1 != btr_page_get_level_low(e)) {\n+    if (__builtin_expect(b, 0))\n+      ut_dbg_assertion_failed();\n+    if (dict_index_is_spatial(&d))\n+      while (c != 5535) {\n+        __sync_add_and_fetch(&a, 536870912);\n+        btr_block_get_func(\"\");\n+      }\n+  }\n+  for (long i; i; ++i)\n+    btr_validate_level(-i);\n+}"}, {"sha": "47d7a96aa12668455fcf5c95ad847b3f61393543", "filename": "gcc/testsuite/gcc.target/aarch64/atomic-op-imm.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356c32e2f4b9d44140a8333da5381813f9aad516/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-imm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356c32e2f4b9d44140a8333da5381813f9aad516/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-imm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic-op-imm.c?ref=356c32e2f4b9d44140a8333da5381813f9aad516", "patch": "@@ -15,6 +15,18 @@ atomic_fetch_sub_ACQUIRE ()\n   return __atomic_fetch_sub (&v, 4096, __ATOMIC_ACQUIRE);\n }\n \n+int\n+atomic_fetch_add_negative_RELAXED ()\n+{\n+  return __atomic_fetch_add (&v, -4096, __ATOMIC_RELAXED);\n+}\n+\n+int\n+atomic_fetch_sub_negative_ACQUIRE ()\n+{\n+  return __atomic_fetch_sub (&v, -4096, __ATOMIC_ACQUIRE);\n+}\n+\n int\n atomic_fetch_and_SEQ_CST ()\n {\n@@ -75,4 +87,4 @@ atomic_or_fetch_CONSUME ()\n   return __atomic_or_fetch (&v, 4096, __ATOMIC_CONSUME);\n }\n \n-/* { dg-final { scan-assembler-times \"\\tw\\[0-9\\]+, w\\[0-9\\]+, #*4096\" 12 } } */\n+/* { dg-final { scan-assembler-times \"\\tw\\[0-9\\]+, w\\[0-9\\]+, #*4096\" 14 } } */"}]}