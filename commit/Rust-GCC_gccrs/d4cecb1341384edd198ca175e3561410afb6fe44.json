{"sha": "d4cecb1341384edd198ca175e3561410afb6fe44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRjZWNiMTM0MTM4NGVkZDE5OGNhMTc1ZTM1NjE0MTBhZmI2ZmU0NA==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gmx.de", "date": "2015-05-27T08:48:51Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2015-05-27T08:48:51Z"}, "message": "trans-stmt.c (gfc_trans_allocate): Add missing location information for e3rhs.\n\ngcc/fortran/ChangeLog:\n\n2015-05-27  Andre Vehreschild  <vehre@gmx.de>\n\n\t* trans-stmt.c (gfc_trans_allocate): Add missing location\n\tinformation for e3rhs.\n\ngcc/testsuite/ChangeLog:\n\n2015-05-27  Andre Vehreschild  <vehre@gmx.de>\n\n\t* gfortran.dg/allocate_with_source_5.f90: Correct errorneous\n\tsemantic.\n\t* gfortran.dg/allocate_with_source_6.f90: New test.\n\nFrom-SVN: r223738", "tree": {"sha": "101902d8c62b4c315316bf2f38163574deedbad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/101902d8c62b4c315316bf2f38163574deedbad6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4cecb1341384edd198ca175e3561410afb6fe44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4cecb1341384edd198ca175e3561410afb6fe44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4cecb1341384edd198ca175e3561410afb6fe44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4cecb1341384edd198ca175e3561410afb6fe44/comments", "author": {"login": "vehre", "id": 4761547, "node_id": "MDQ6VXNlcjQ3NjE1NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4761547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vehre", "html_url": "https://github.com/vehre", "followers_url": "https://api.github.com/users/vehre/followers", "following_url": "https://api.github.com/users/vehre/following{/other_user}", "gists_url": "https://api.github.com/users/vehre/gists{/gist_id}", "starred_url": "https://api.github.com/users/vehre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vehre/subscriptions", "organizations_url": "https://api.github.com/users/vehre/orgs", "repos_url": "https://api.github.com/users/vehre/repos", "events_url": "https://api.github.com/users/vehre/events{/privacy}", "received_events_url": "https://api.github.com/users/vehre/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1716efeb6d3e9097e75143d9ef98f504856fd34d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1716efeb6d3e9097e75143d9ef98f504856fd34d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1716efeb6d3e9097e75143d9ef98f504856fd34d"}], "stats": {"total": 177, "additions": 176, "deletions": 1}, "files": [{"sha": "6be535f49482406769331339382cd903604de9cf", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4cecb1341384edd198ca175e3561410afb6fe44/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4cecb1341384edd198ca175e3561410afb6fe44/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d4cecb1341384edd198ca175e3561410afb6fe44", "patch": "@@ -1,3 +1,9 @@\n+2015-05-27  Andre Vehreschild  <vehre@gmx.de>\n+\n+\tPR fortran/65548\n+\t* trans-stmt.c (gfc_trans_allocate): Add missing location\n+\tinformation for e3rhs.\n+\n 2015-05-26  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/66082"}, {"sha": "81943b0142acdf63a64c040365605f58bc6b3fcd", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4cecb1341384edd198ca175e3561410afb6fe44/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4cecb1341384edd198ca175e3561410afb6fe44/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=d4cecb1341384edd198ca175e3561410afb6fe44", "patch": "@@ -5362,6 +5362,7 @@ gfc_trans_allocate (gfc_code * code)\n \t\t bug.  */\n \t      newsym->n.sym->attr.referenced = 1;\n \t      e3rhs->expr_type = EXPR_VARIABLE;\n+\t      e3rhs->where = code->expr3->where;\n \t      /* Set the symbols type, upto it was BT_UNKNOWN.  */\n \t      newsym->n.sym->ts = e3rhs->ts;\n \t      /* Check whether the expr3 is array valued.  */"}, {"sha": "e19504ee21371d98d07dd5e50559ba629914976d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4cecb1341384edd198ca175e3561410afb6fe44/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4cecb1341384edd198ca175e3561410afb6fe44/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d4cecb1341384edd198ca175e3561410afb6fe44", "patch": "@@ -1,3 +1,10 @@\n+2015-05-27  Andre Vehreschild  <vehre@gmx.de>\n+\n+\tPR fortran/65548\n+\t* gfortran.dg/allocate_with_source_5.f90: Correct errorneous\n+\tsemantic.\n+\t* gfortran.dg/allocate_with_source_6.f90: New test.\n+\n 2015-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/atomic7_1.adb: New test."}, {"sha": "e18d6426e517cd5480b1f160636bdf0bf3402aba", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4cecb1341384edd198ca175e3561410afb6fe44/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4cecb1341384edd198ca175e3561410afb6fe44/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_5.f90?ref=d4cecb1341384edd198ca175e3561410afb6fe44", "patch": "@@ -146,7 +146,7 @@ program test\n   if (any(abs(phs%m_in - [42.0, 42.0]) > 1E-6)) call abort()\n \n   o%n = 2\n-  allocate (o%val(2,4))\n+  allocate (o%val(0:1,4))\n   call o%make()\n \n   o2%n = 3"}, {"sha": "7f2473aafd92f21ad76394e9320beaacfaebd30a", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_6.f90", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4cecb1341384edd198ca175e3561410afb6fe44/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4cecb1341384edd198ca175e3561410afb6fe44/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_6.f90?ref=d4cecb1341384edd198ca175e3561410afb6fe44", "patch": "@@ -0,0 +1,161 @@\n+! { dg-do  run }\n+! { dg-options \"-fbounds-check\" }\n+!\n+! Contributed by Juergen Reuter\n+! Check that pr65548 is fixed and that the ICE is gone, when bounds-check\n+! is requested.\n+!\n+\n+module selectors\n+  type :: selector_t\n+     integer, dimension(:), allocatable :: map\n+     real, dimension(:), allocatable :: weight\n+   contains\n+     procedure :: init => selector_init\n+   end type selector_t\n+\n+contains\n+\n+  subroutine selector_init (selector, weight)\n+    class(selector_t), intent(out) :: selector\n+    real, dimension(:), intent(in) :: weight\n+    real :: s\n+    integer :: n, i\n+    logical, dimension(:), allocatable :: mask\n+    s = sum (weight)\n+    allocate (mask (size (weight)), source = weight /= 0)\n+    n = count (mask)\n+    if (n > 0) then\n+       allocate (selector%map (n), &\n+            source = pack ([(i, i = 1, size (weight))], mask))\n+       allocate (selector%weight (n), &\n+            source = pack (weight / s, mask))\n+    else\n+       allocate (selector%map (1), source = 1)\n+       allocate (selector%weight (1), source = 0.)\n+    end if\n+  end subroutine selector_init\n+\n+end module selectors\n+\n+module phs_base\n+  type :: flavor_t\n+  contains\n+     procedure :: get_mass => flavor_get_mass\n+  end type flavor_t\n+\n+  type :: phs_config_t\n+     integer :: n_in = 0\n+     type(flavor_t), dimension(:,:), allocatable :: flv\n+  end type phs_config_t\n+\n+  type :: phs_t\n+     class(phs_config_t), pointer :: config => null ()\n+     real, dimension(:), allocatable :: m_in\n+  end type phs_t\n+\n+contains\n+\n+  elemental function flavor_get_mass (flv) result (mass)\n+    real :: mass\n+    class(flavor_t), intent(in) :: flv\n+    mass = 42.0\n+  end function flavor_get_mass\n+\n+  subroutine phs_base_init (phs, phs_config)\n+    class(phs_t), intent(out) :: phs\n+    class(phs_config_t), intent(in), target :: phs_config\n+    phs%config => phs_config\n+    allocate (phs%m_in  (phs%config%n_in), &\n+         source = phs_config%flv(:phs_config%n_in, 1)%get_mass ())\n+  end subroutine phs_base_init\n+\n+end module phs_base\n+\n+module foo\n+  type :: t\n+     integer :: n\n+     real, dimension(:,:), allocatable :: val\n+   contains\n+     procedure :: make => t_make\n+     generic :: get_int => get_int_array, get_int_element\n+     procedure :: get_int_array => t_get_int_array\n+     procedure :: get_int_element => t_get_int_element\n+  end type t\n+\n+contains\n+\n+  subroutine t_make (this)\n+    class(t), intent(inout) :: this\n+    real, dimension(:), allocatable :: int\n+    allocate (int (0:this%n-1), source=this%get_int())\n+  end subroutine t_make\n+\n+  pure function t_get_int_array (this) result (array)\n+    class(t), intent(in) :: this\n+    real, dimension(this%n) :: array\n+    array = this%val (0:this%n-1, 4)\n+  end function t_get_int_array\n+\n+  pure function t_get_int_element (this, set) result (element)\n+    class(t), intent(in) :: this\n+    integer, intent(in) :: set\n+    real :: element\n+    element = this%val (set, 4)\n+  end function t_get_int_element\n+end module foo\n+module foo2\n+  type :: t2\n+     integer :: n\n+     character(32), dimension(:), allocatable :: md5\n+   contains\n+     procedure :: init => t2_init\n+  end type t2\n+\n+contains\n+\n+  subroutine t2_init (this)\n+    class(t2), intent(inout) :: this\n+    character(32), dimension(:), allocatable :: md5\n+    allocate (md5 (this%n), source=this%md5)\n+    if (md5(1) /= \"tst                             \") call abort()\n+    if (md5(2) /= \"                                \") call abort()\n+    if (md5(3) /= \"fooblabar                       \") call abort()\n+  end subroutine t2_init\n+end module foo2\n+\n+program test\n+  use selectors\n+  use phs_base\n+  use foo\n+  use foo2\n+\n+  type(selector_t) :: sel\n+  type(phs_t) :: phs\n+  type(phs_config_t) :: phs_config\n+  type(t) :: o\n+  type(t2) :: o2\n+\n+  call sel%init([2., 0., 3., 0., 4.])\n+\n+  if (any(sel%map /= [1, 3, 5])) call abort()\n+  if (any(abs(sel%weight - [2., 3., 4.] / 9.) > 1E-6)) call abort()\n+\n+  phs_config%n_in = 2\n+  allocate (phs_config%flv (phs_config%n_in, 1))\n+  call phs_base_init (phs, phs_config)\n+\n+  if (any(abs(phs%m_in - [42.0, 42.0]) > 1E-6)) call abort()\n+\n+  o%n = 2\n+  allocate (o%val(0:1,4))\n+  call o%make()\n+\n+  o2%n = 3\n+  allocate(o2%md5(o2%n))\n+  o2%md5(1) = \"tst\"\n+  o2%md5(2) = \"\"\n+  o2%md5(3) = \"fooblabar\"\n+  call o2%init()\n+end program test\n+"}]}