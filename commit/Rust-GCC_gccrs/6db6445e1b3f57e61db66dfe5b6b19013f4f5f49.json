{"sha": "6db6445e1b3f57e61db66dfe5b6b19013f4f5f49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRiNjQ0NWUxYjNmNTdlNjFkYjY2ZGZlNWI2YjE5MDEzZjRmNWY0OQ==", "commit": {"author": {"name": "Xuepeng Guo", "email": "xuepeng.guo@intel.com", "date": "2018-11-05T09:51:09Z"}, "committer": {"name": "Xuepeng Guo", "email": "xguo@gcc.gnu.org", "date": "2018-11-05T09:51:09Z"}, "message": "re PR target/87853 (_mm_cmpgt_epi8 broken with -funsigned-char)\n\n2018-11-05  Xuepeng Guo  <xuepeng.guo@intel.com>\n\n\tPR target/87853\n\t* config/i386/emmintrin.h (__v16qs): New to cope with option\n\t-funsigned-char.\n\t(_mm_cmpeq_epi8): Replace __v16qi with __v16qs.\n\t(_mm_cmplt_epi8): Likewise.\n\t(_mm_cmpgt_epi8): Likewise.\n\nFrom-SVN: r265792", "tree": {"sha": "cf68c9869522a6b03ae39baf53a11db95ee7c70a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf68c9869522a6b03ae39baf53a11db95ee7c70a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6db6445e1b3f57e61db66dfe5b6b19013f4f5f49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db6445e1b3f57e61db66dfe5b6b19013f4f5f49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6db6445e1b3f57e61db66dfe5b6b19013f4f5f49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db6445e1b3f57e61db66dfe5b6b19013f4f5f49/comments", "author": null, "committer": null, "parents": [{"sha": "692e7e54e095f281b9d6663434dd11d6caaa3d9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/692e7e54e095f281b9d6663434dd11d6caaa3d9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/692e7e54e095f281b9d6663434dd11d6caaa3d9b"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "f1a9d11f0e1840de850fadf43c341fba2c686575", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db6445e1b3f57e61db66dfe5b6b19013f4f5f49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db6445e1b3f57e61db66dfe5b6b19013f4f5f49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6db6445e1b3f57e61db66dfe5b6b19013f4f5f49", "patch": "@@ -1,3 +1,12 @@\n+2018-11-05  Xuepeng Guo  <xuepeng.guo@intel.com>\n+\n+\tPR target/87853\n+\t* config/i386/emmintrin.h (__v16qs): New to cope with option\n+\t-funsigned-char.\n+\t(_mm_cmpeq_epi8): Replace __v16qi with __v16qs.\n+\t(_mm_cmplt_epi8): Likewise.\n+\t(_mm_cmpgt_epi8): Likewise.\n+\n 2018-11-05  Richard Biener  <rguenther@suse.de>\n \n \tPR rtl-optimization/87852"}, {"sha": "3c1f04b60956b8bcafce4e0edc8045a432b8f52d", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db6445e1b3f57e61db66dfe5b6b19013f4f5f49/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db6445e1b3f57e61db66dfe5b6b19013f4f5f49/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=6db6445e1b3f57e61db66dfe5b6b19013f4f5f49", "patch": "@@ -45,6 +45,7 @@ typedef unsigned int __v4su __attribute__ ((__vector_size__ (16)));\n typedef short __v8hi __attribute__ ((__vector_size__ (16)));\n typedef unsigned short __v8hu __attribute__ ((__vector_size__ (16)));\n typedef char __v16qi __attribute__ ((__vector_size__ (16)));\n+typedef signed char __v16qs __attribute__ ((__vector_size__ (16)));\n typedef unsigned char __v16qu __attribute__ ((__vector_size__ (16)));\n \n /* The Intel API is flexible enough that we must allow aliasing with other\n@@ -1295,7 +1296,7 @@ _mm_xor_si128 (__m128i __A, __m128i __B)\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpeq_epi8 (__m128i __A, __m128i __B)\n {\n-  return (__m128i) ((__v16qi)__A == (__v16qi)__B);\n+  return (__m128i) ((__v16qs)__A == (__v16qs)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1313,7 +1314,7 @@ _mm_cmpeq_epi32 (__m128i __A, __m128i __B)\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmplt_epi8 (__m128i __A, __m128i __B)\n {\n-  return (__m128i) ((__v16qi)__A < (__v16qi)__B);\n+  return (__m128i) ((__v16qs)__A < (__v16qs)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1331,7 +1332,7 @@ _mm_cmplt_epi32 (__m128i __A, __m128i __B)\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cmpgt_epi8 (__m128i __A, __m128i __B)\n {\n-  return (__m128i) ((__v16qi)__A > (__v16qi)__B);\n+  return (__m128i) ((__v16qs)__A > (__v16qs)__B);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}]}