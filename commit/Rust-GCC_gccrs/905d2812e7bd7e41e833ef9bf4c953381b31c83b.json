{"sha": "905d2812e7bd7e41e833ef9bf4c953381b31c83b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA1ZDI4MTJlN2JkN2U0MWU4MzNlZjliZjRjOTUzMzgxYjMxYzgzYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-01-26T19:39:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-01-26T19:39:40Z"}, "message": "re PR c++/68727 (invalid offsetof expressions accepted)\n\n\tPR c++/68727\n\t* cp-tree.def (OFFSETOF_EXPR): Bump number of operands to 2.\n\t* cp-tree.h (finish_offsetof): Add OBJECT_PTR argument.\n\t* parser.c (cp_parser_builtin_offsetof): Pass result of\n\tbuild_static_cast of null_pointer_node to finish_offsetof.\n\t* semantics.c (finish_offsetof): Add OBJECT_PTR argument, use\n\tit for -Winvalid-offsetof pedwarn instead of trying to guess\n\toriginal offsetof type from EXPR.  Save OBJECT_PTR as a new\n\tsecond operand to OFFSETOF_EXPR.\n\t* pt.c (tsubst_copy_and_build) <case OFFSETOF_EXPR>: Adjust\n\tfinish_offsetof caller, pass the second operand of OFFSETOF_EXPR\n\tas OBJECT_PTR.\n\n\t* g++.dg/other/offsetof8.C: Add expected error.\n\t* g++.dg/other/offsetof9.C: New test.\n\nFrom-SVN: r244949", "tree": {"sha": "156a3b12a0ead50dbb85377ac732b5a2b10a9341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/156a3b12a0ead50dbb85377ac732b5a2b10a9341"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/905d2812e7bd7e41e833ef9bf4c953381b31c83b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/905d2812e7bd7e41e833ef9bf4c953381b31c83b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/905d2812e7bd7e41e833ef9bf4c953381b31c83b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/905d2812e7bd7e41e833ef9bf4c953381b31c83b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c1cadde1cbd95e051885c3c9c5794a8d8c64e27a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1cadde1cbd95e051885c3c9c5794a8d8c64e27a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1cadde1cbd95e051885c3c9c5794a8d8c64e27a"}], "stats": {"total": 90, "additions": 66, "deletions": 24}, "files": [{"sha": "443df6980eaa485bb919d72198cddd68f1d2defe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905d2812e7bd7e41e833ef9bf4c953381b31c83b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905d2812e7bd7e41e833ef9bf4c953381b31c83b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=905d2812e7bd7e41e833ef9bf4c953381b31c83b", "patch": "@@ -1,3 +1,18 @@\n+2017-01-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/68727\n+\t* cp-tree.def (OFFSETOF_EXPR): Bump number of operands to 2.\n+\t* cp-tree.h (finish_offsetof): Add OBJECT_PTR argument.\n+\t* parser.c (cp_parser_builtin_offsetof): Pass result of\n+\tbuild_static_cast of null_pointer_node to finish_offsetof.\n+\t* semantics.c (finish_offsetof): Add OBJECT_PTR argument, use\n+\tit for -Winvalid-offsetof pedwarn instead of trying to guess\n+\toriginal offsetof type from EXPR.  Save OBJECT_PTR as a new\n+\tsecond operand to OFFSETOF_EXPR.\n+\t* pt.c (tsubst_copy_and_build) <case OFFSETOF_EXPR>: Adjust\n+\tfinish_offsetof caller, pass the second operand of OFFSETOF_EXPR\n+\tas OBJECT_PTR.\n+\n 2017-01-26  Jason Merrill  <jason@redhat.com>\n \n \t* name-lookup.c (parse_using_directive): Deprecate strong using."}, {"sha": "c51c5c1dc21a3719e65ffa6c0e52baeebe80a42d", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905d2812e7bd7e41e833ef9bf4c953381b31c83b/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905d2812e7bd7e41e833ef9bf4c953381b31c83b/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=905d2812e7bd7e41e833ef9bf4c953381b31c83b", "patch": "@@ -333,7 +333,7 @@ DEFTREECODE (EXPR_STMT, \"expr_stmt\", tcc_expression, 1)\n DEFTREECODE (TAG_DEFN, \"tag_defn\", tcc_expression, 0)\n \n /* Represents an 'offsetof' expression during template expansion.  */\n-DEFTREECODE (OFFSETOF_EXPR, \"offsetof_expr\", tcc_expression, 1)\n+DEFTREECODE (OFFSETOF_EXPR, \"offsetof_expr\", tcc_expression, 2)\n \n /* Represents an '__builtin_addressof' expression during template\n    expansion.  This is similar to ADDR_EXPR, but it doesn't invoke"}, {"sha": "f91b83027aa24be60fccf4da5b641b1005236715", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905d2812e7bd7e41e833ef9bf4c953381b31c83b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905d2812e7bd7e41e833ef9bf4c953381b31c83b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=905d2812e7bd7e41e833ef9bf4c953381b31c83b", "patch": "@@ -6487,7 +6487,7 @@ extern tree finish_underlying_type\t        (tree);\n extern tree calculate_bases                     (tree);\n extern tree finish_bases                        (tree, bool);\n extern tree calculate_direct_bases              (tree);\n-extern tree finish_offsetof\t\t\t(tree, location_t);\n+extern tree finish_offsetof\t\t\t(tree, tree, location_t);\n extern void finish_decl_cleanup\t\t\t(tree, tree);\n extern void finish_eh_cleanup\t\t\t(tree);\n extern void emit_associated_thunks\t\t(tree);"}, {"sha": "9a61eb1604bc387665e384baf9c898f89203ed58", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905d2812e7bd7e41e833ef9bf4c953381b31c83b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905d2812e7bd7e41e833ef9bf4c953381b31c83b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=905d2812e7bd7e41e833ef9bf4c953381b31c83b", "patch": "@@ -9498,11 +9498,12 @@ cp_parser_builtin_offsetof (cp_parser *parser)\n   token = cp_lexer_peek_token (parser->lexer);\n \n   /* Build the (type *)null that begins the traditional offsetof macro.  */\n-  expr = build_static_cast (build_pointer_type (type), null_pointer_node,\n-                            tf_warning_or_error);\n+  tree object_ptr\n+    = build_static_cast (build_pointer_type (type), null_pointer_node,\n+\t\t\t tf_warning_or_error);\n \n   /* Parse the offsetof-member-designator.  We begin as if we saw \"expr->\".  */\n-  expr = cp_parser_postfix_dot_deref_expression (parser, CPP_DEREF, expr,\n+  expr = cp_parser_postfix_dot_deref_expression (parser, CPP_DEREF, object_ptr,\n \t\t\t\t\t\t true, &dummy, token->location);\n   while (true)\n     {\n@@ -9554,7 +9555,7 @@ cp_parser_builtin_offsetof (cp_parser *parser)\n   loc = make_location (loc, start_loc, finish_loc);\n   /* The result will be an INTEGER_CST, so we need to explicitly\n      preserve the location.  */\n-  expr = cp_expr (finish_offsetof (expr, loc), loc);\n+  expr = cp_expr (finish_offsetof (object_ptr, expr, loc), loc);\n \n  failure:\n   parser->integral_constant_expression_p = save_ice_p;"}, {"sha": "57334b4c44e112bb20977af4da2a147a3095606f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905d2812e7bd7e41e833ef9bf4c953381b31c83b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905d2812e7bd7e41e833ef9bf4c953381b31c83b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=905d2812e7bd7e41e833ef9bf4c953381b31c83b", "patch": "@@ -17707,8 +17707,15 @@ tsubst_copy_and_build (tree t,\n       }\n \n     case OFFSETOF_EXPR:\n-      RETURN (finish_offsetof (RECUR (TREE_OPERAND (t, 0)),\n-\t\t\t       EXPR_LOCATION (t)));\n+      {\n+\ttree object_ptr\n+\t  = tsubst_copy_and_build (TREE_OPERAND (t, 1), args, complain,\n+\t\t\t\t   in_decl, /*function_p=*/false,\n+\t\t\t\t   /*integral_constant_expression_p=*/false);\n+\tRETURN (finish_offsetof (object_ptr,\n+\t\t\t\t RECUR (TREE_OPERAND (t, 0)),\n+\t\t\t\t EXPR_LOCATION (t)));\n+      }\n \n     case ADDRESSOF_EXPR:\n       RETURN (cp_build_addressof (EXPR_LOCATION (t),"}, {"sha": "6d5ea955db37eea1b785b8335872bf3804f1913e", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905d2812e7bd7e41e833ef9bf4c953381b31c83b/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905d2812e7bd7e41e833ef9bf4c953381b31c83b/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=905d2812e7bd7e41e833ef9bf4c953381b31c83b", "patch": "@@ -3995,13 +3995,13 @@ finish_bases (tree type, bool direct)\n    fold_offsetof.  */\n \n tree\n-finish_offsetof (tree expr, location_t loc)\n+finish_offsetof (tree object_ptr, tree expr, location_t loc)\n {\n   /* If we're processing a template, we can't finish the semantics yet.\n      Otherwise we can fold the entire expression now.  */\n   if (processing_template_decl)\n     {\n-      expr = build1 (OFFSETOF_EXPR, size_type_node, expr);\n+      expr = build2 (OFFSETOF_EXPR, size_type_node, expr, object_ptr);\n       SET_EXPR_LOCATION (expr, loc);\n       return expr;\n     }\n@@ -4031,19 +4031,15 @@ finish_offsetof (tree expr, location_t loc)\n     }\n   if (REFERENCE_REF_P (expr))\n     expr = TREE_OPERAND (expr, 0);\n-  if (TREE_CODE (expr) == COMPONENT_REF)\n-    {\n-      tree object = TREE_OPERAND (expr, 0);\n-      if (!complete_type_or_else (TREE_TYPE (object), object))\n-\treturn error_mark_node;\n-      if (warn_invalid_offsetof\n-\t  && CLASS_TYPE_P (TREE_TYPE (object))\n-\t  && CLASSTYPE_NON_STD_LAYOUT (TREE_TYPE (object))\n-\t  && cp_unevaluated_operand == 0)\n-\tpedwarn (loc, OPT_Winvalid_offsetof,\n-\t\t \"offsetof within non-standard-layout type %qT is undefined\",\n-\t\t TREE_TYPE (object));\n-    }\n+  if (!complete_type_or_else (TREE_TYPE (TREE_TYPE (object_ptr)), object_ptr))\n+    return error_mark_node;\n+  if (warn_invalid_offsetof\n+      && CLASS_TYPE_P (TREE_TYPE (TREE_TYPE (object_ptr)))\n+      && CLASSTYPE_NON_STD_LAYOUT (TREE_TYPE (TREE_TYPE (object_ptr)))\n+      && cp_unevaluated_operand == 0)\n+    pedwarn (loc, OPT_Winvalid_offsetof,\n+\t     \"offsetof within non-standard-layout type %qT is undefined\",\n+\t     TREE_TYPE (TREE_TYPE (object_ptr)));\n   return fold_offsetof (expr);\n }\n "}, {"sha": "61551d119cad4549054423d1287d388fa3070e8e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905d2812e7bd7e41e833ef9bf4c953381b31c83b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905d2812e7bd7e41e833ef9bf4c953381b31c83b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=905d2812e7bd7e41e833ef9bf4c953381b31c83b", "patch": "@@ -1,3 +1,9 @@\n+2017-01-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/68727\n+\t* g++.dg/other/offsetof8.C: Add expected error.\n+\t* g++.dg/other/offsetof9.C: New test.\n+\n 2017-01-26  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* g++.dg/opt/declone3.C: Require LTO."}, {"sha": "0668199b3669c494927714d794460a65f8c49ef2", "filename": "gcc/testsuite/g++.dg/other/offsetof8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905d2812e7bd7e41e833ef9bf4c953381b31c83b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905d2812e7bd7e41e833ef9bf4c953381b31c83b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof8.C?ref=905d2812e7bd7e41e833ef9bf4c953381b31c83b", "patch": "@@ -9,4 +9,4 @@ struct B: virtual A { };\n int a[]  = {\n   !&((B*)0)->i,    // { dg-error \"invalid access to non-static data member\" }\n   __builtin_offsetof (B, i)   // { dg-error \"invalid access to non-static\" }\n-};\n+};\t\t\t      // { dg-error \"offsetof within non-standard-layout type\" \"\" { target *-*-* } .-1 }"}, {"sha": "bd80fa5e2cf0663f3a2a501d50e6fddae31c5995", "filename": "gcc/testsuite/g++.dg/other/offsetof9.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905d2812e7bd7e41e833ef9bf4c953381b31c83b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905d2812e7bd7e41e833ef9bf4c953381b31c83b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foffsetof9.C?ref=905d2812e7bd7e41e833ef9bf4c953381b31c83b", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/68727\n+// { dg-do compile }\n+// { dg-options \"-Winvalid-offsetof\" }\n+\n+struct A { int i; };\n+struct B : virtual A { };\n+__SIZE_TYPE__ s = __builtin_offsetof (B, A::i);\t// { dg-warning \"offsetof within non-standard-layout type\" }\n+\n+template <typename T>\n+__SIZE_TYPE__\n+foo ()\n+{\n+  return __builtin_offsetof (T, A::i)\t\t// { dg-warning \"offsetof within non-standard-layout type\" }\n+\t + __builtin_offsetof (B, A::i);\t// { dg-warning \"offsetof within non-standard-layout type\" }\n+}\n+\n+__SIZE_TYPE__ t = foo<B> ();"}]}