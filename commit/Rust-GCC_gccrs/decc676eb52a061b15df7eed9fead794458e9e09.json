{"sha": "decc676eb52a061b15df7eed9fead794458e9e09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVjYzY3NmViNTJhMDYxYjE1ZGY3ZWVkOWZlYWQ3OTQ0NThlOWUwOQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2013-03-13T18:09:10Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2013-03-13T18:09:10Z"}, "message": "re PR target/49880 (SuperH: ICE when -m4 is used with -mdiv=call-div1)\n\n\tPR target/49880\n\t* config/sh/sh.opt (FPU_SINGLE_ONLY): New mask.\n\t(musermode): Convert to Var(TARGET_USERMODE).\n\t* config/sh/sh.h (SELECT_SH2A_SINGLE_ONLY, SELECT_SH4_SINGLE_ONLY,\n\tMASK_ARCH): Add MASK_FPU_SINGLE_ONLY.\n\t* config/sh/sh.c (sh_option_override): Use\n\tTARGET_FPU_DOUBLE || TARGET_FPU_SINGLE_ONLY for call-fp case.\n\t* config/sh/sh.md (udivsi3_i1, divsi3_i1): Remove ! TARGET_SH4\n\tcondition.\n\t(udivsi3_i4, divsi3_i4): Use TARGET_FPU_DOUBLE condition instead of\n\tTARGET_SH4.\n\t(udivsi3_i4_single, divsi3_i4_single): Use\n\tTARGET_FPU_SINGLE_ONLY || TARGET_FPU_DOUBLE instead of TARGET_HARD_SH4.\n\n\tPR target/49880\n\t* config/sh/lib1funcs.S (sdivsi3_i4, udivsi3_i4): Enable for SH2A.\n\t(sdivsi3, udivsi3): Remove SH4 check and always compile these functions.\n\n\tPR target/49880\n\t* gcc.target/sh/pr49880-1.c: New.\n\t* gcc.target/sh/pr49880-2.c: New.\n\t* gcc.target/sh/pr49880-3.c: New.\n\t* gcc.target/sh/pr49880-4.c: New.\n\t* gcc.target/sh/pr49880-5.c: New.\n\nFrom-SVN: r196636", "tree": {"sha": "f74de87ca2e71aa3f530e74fa71a89a4e333a087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f74de87ca2e71aa3f530e74fa71a89a4e333a087"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/decc676eb52a061b15df7eed9fead794458e9e09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/decc676eb52a061b15df7eed9fead794458e9e09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/decc676eb52a061b15df7eed9fead794458e9e09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/decc676eb52a061b15df7eed9fead794458e9e09/comments", "author": null, "committer": null, "parents": [{"sha": "f4b719c71872d8c37a0f0d9e2598b3a3c3848196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4b719c71872d8c37a0f0d9e2598b3a3c3848196", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4b719c71872d8c37a0f0d9e2598b3a3c3848196"}], "stats": {"total": 183, "additions": 161, "deletions": 22}, "files": [{"sha": "e2cd655971acb9940ff86a81f6e2994ab382abbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=decc676eb52a061b15df7eed9fead794458e9e09", "patch": "@@ -1,3 +1,19 @@\n+2013-03-13  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/49880\n+\t* config/sh/sh.opt (FPU_SINGLE_ONLY): New mask.\n+\t(musermode): Convert to Var(TARGET_USERMODE).\n+\t* config/sh/sh.h (SELECT_SH2A_SINGLE_ONLY, SELECT_SH4_SINGLE_ONLY,\n+\tMASK_ARCH): Add MASK_FPU_SINGLE_ONLY.\n+\t* config/sh/sh.c (sh_option_override): Use\n+\tTARGET_FPU_DOUBLE || TARGET_FPU_SINGLE_ONLY for call-fp case.\n+\t* config/sh/sh.md (udivsi3_i1, divsi3_i1): Remove ! TARGET_SH4\n+\tcondition.\n+\t(udivsi3_i4, divsi3_i4): Use TARGET_FPU_DOUBLE condition instead of\n+\tTARGET_SH4.\n+\t(udivsi3_i4_single, divsi3_i4_single): Use\n+\tTARGET_FPU_SINGLE_ONLY || TARGET_FPU_DOUBLE instead of TARGET_HARD_SH4.\n+\n 2013-03-13  Dave Korn  <dave.korn.cygwin@....>\n \n \t* config/i386/cygwin.h (SHARED_LIBGCC_SPEC): Make shared libgcc the"}, {"sha": "44e1e4ce30efe6232620f4f4fef6fa4c60bc7597", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=decc676eb52a061b15df7eed9fead794458e9e09", "patch": "@@ -816,8 +816,7 @@ sh_option_override (void)\n       if (! strcmp (sh_div_str, \"call-div1\"))\n \tsh_div_strategy = SH_DIV_CALL_DIV1;\n       else if (! strcmp (sh_div_str, \"call-fp\")\n-\t       && (TARGET_FPU_DOUBLE\n-\t\t   || (TARGET_HARD_SH4 && TARGET_SH2E)\n+\t       && (TARGET_FPU_DOUBLE || TARGET_FPU_SINGLE_ONLY\n \t\t   || (TARGET_SHCOMPACT && TARGET_FPU_ANY)))\n \tsh_div_strategy = SH_DIV_CALL_FP;\n       else if (! strcmp (sh_div_str, \"call-table\") && TARGET_DYNSHIFT)"}, {"sha": "3744f980fe75c88bc7e75a4e61bba265b40b8548", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=decc676eb52a061b15df7eed9fead794458e9e09", "patch": "@@ -138,14 +138,16 @@ extern int code_for_indirect_jump_scratch;\n \t\t\t\t  | MASK_SH2 | MASK_SH1)\n #define SELECT_SH2A_NOFPU\t (MASK_HARD_SH2A | MASK_SH2 | MASK_SH1)\n #define SELECT_SH2A_SINGLE_ONLY  (MASK_SH_E | MASK_HARD_SH2A | MASK_SH2 \\\n-\t\t\t\t  | MASK_SH1 | MASK_FPU_SINGLE)\n+\t\t\t\t  | MASK_SH1 | MASK_FPU_SINGLE \\\n+\t\t\t\t  | MASK_FPU_SINGLE_ONLY)\n #define SELECT_SH2A_SINGLE\t (MASK_SH_E | MASK_HARD_SH2A \\\n \t\t\t\t  | MASK_FPU_SINGLE | MASK_HARD_SH2A_DOUBLE \\\n \t\t\t\t  | MASK_SH2 | MASK_SH1)\n #define SELECT_SH3\t\t (MASK_SH3 | SELECT_SH2)\n #define SELECT_SH3E\t\t (MASK_SH_E | MASK_FPU_SINGLE | SELECT_SH3)\n #define SELECT_SH4_NOFPU\t (MASK_HARD_SH4 | SELECT_SH3)\n-#define SELECT_SH4_SINGLE_ONLY\t (MASK_HARD_SH4 | SELECT_SH3E)\n+#define SELECT_SH4_SINGLE_ONLY\t (MASK_HARD_SH4 | SELECT_SH3E \\\n+\t\t\t\t  | MASK_FPU_SINGLE_ONLY)\n #define SELECT_SH4\t\t (MASK_SH4 | MASK_SH_E | MASK_HARD_SH4 \\\n \t\t\t\t  | SELECT_SH3)\n #define SELECT_SH4_SINGLE\t (MASK_FPU_SINGLE | SELECT_SH4)\n@@ -212,7 +214,8 @@ extern int code_for_indirect_jump_scratch;\n /* Reset all target-selection flags.  */\n #define MASK_ARCH (MASK_SH1 | MASK_SH2 | MASK_SH3 | MASK_SH_E | MASK_SH4 \\\n \t\t   | MASK_HARD_SH2A | MASK_HARD_SH2A_DOUBLE | MASK_SH4A \\\n-\t\t   | MASK_HARD_SH4 | MASK_FPU_SINGLE | MASK_SH5)\n+\t\t   | MASK_HARD_SH4 | MASK_FPU_SINGLE | MASK_SH5 \\\n+\t\t   | MASK_FPU_SINGLE_ONLY)\n \n /* This defaults us to big-endian.  */\n #ifndef TARGET_ENDIAN_DEFAULT"}, {"sha": "42ef5e142d80b9110ff374351790942a66e27fb6", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=decc676eb52a061b15df7eed9fead794458e9e09", "patch": "@@ -2154,7 +2154,7 @@\n    (clobber (reg:SI PR_REG))\n    (clobber (reg:SI R4_REG))\n    (use (match_operand:SI 1 \"arith_reg_operand\" \"r\"))]\n-  \"TARGET_SH1 && (! TARGET_SH4 || TARGET_DIVIDE_CALL_DIV1)\"\n+  \"TARGET_SH1 && TARGET_DIVIDE_CALL_DIV1\"\n   \"jsr\t@%1%#\"\n   [(set_attr \"type\" \"sfunc\")\n    (set_attr \"needs_delay_slot\" \"yes\")])\n@@ -2217,7 +2217,7 @@\n    (clobber (reg:SI R5_REG))\n    (use (reg:PSI FPSCR_REG))\n    (use (match_operand:SI 1 \"arith_reg_operand\" \"r\"))]\n-  \"TARGET_SH4 && ! TARGET_FPU_SINGLE\"\n+  \"TARGET_FPU_DOUBLE && ! TARGET_FPU_SINGLE\"\n   \"jsr\t@%1%#\"\n   [(set_attr \"type\" \"sfunc\")\n    (set_attr \"fp_mode\" \"double\")\n@@ -2236,7 +2236,8 @@\n    (clobber (reg:SI R4_REG))\n    (clobber (reg:SI R5_REG))\n    (use (match_operand:SI 1 \"arith_reg_operand\" \"r\"))]\n-  \"(TARGET_HARD_SH4 || TARGET_SHCOMPACT) && TARGET_FPU_SINGLE\"\n+  \"(TARGET_FPU_SINGLE_ONLY || TARGET_FPU_DOUBLE || TARGET_SHCOMPACT)\n+   && TARGET_FPU_SINGLE\"\n   \"jsr\t@%1%#\"\n   [(set_attr \"type\" \"sfunc\")\n    (set_attr \"needs_delay_slot\" \"yes\")])\n@@ -2358,7 +2359,7 @@\n    (clobber (reg:SI R2_REG))\n    (clobber (reg:SI R3_REG))\n    (use (match_operand:SI 1 \"arith_reg_operand\" \"r\"))]\n-  \"TARGET_SH1 && (! TARGET_SH4 || TARGET_DIVIDE_CALL_DIV1)\"\n+  \"TARGET_SH1 && TARGET_DIVIDE_CALL_DIV1\"\n   \"jsr\t@%1%#\"\n   [(set_attr \"type\" \"sfunc\")\n    (set_attr \"needs_delay_slot\" \"yes\")])\n@@ -2487,7 +2488,7 @@\n    (clobber (reg:DF DR2_REG))\n    (use (reg:PSI FPSCR_REG))\n    (use (match_operand:SI 1 \"arith_reg_operand\" \"r\"))]\n-  \"TARGET_SH4 && ! TARGET_FPU_SINGLE\"\n+  \"TARGET_FPU_DOUBLE && ! TARGET_FPU_SINGLE\"\n   \"jsr\t@%1%#\"\n   [(set_attr \"type\" \"sfunc\")\n    (set_attr \"fp_mode\" \"double\")\n@@ -2501,7 +2502,8 @@\n    (clobber (reg:DF DR2_REG))\n    (clobber (reg:SI R2_REG))\n    (use (match_operand:SI 1 \"arith_reg_operand\" \"r\"))]\n-  \"(TARGET_HARD_SH4 || TARGET_SHCOMPACT) && TARGET_FPU_SINGLE\"\n+  \"(TARGET_FPU_SINGLE_ONLY || TARGET_FPU_DOUBLE || TARGET_SHCOMPACT)\n+   && TARGET_FPU_SINGLE\"\n   \"jsr\t@%1%#\"\n   [(set_attr \"type\" \"sfunc\")\n    (set_attr \"needs_delay_slot\" \"yes\")])"}, {"sha": "c314e144c21d0256452140f86748ff8769230f64", "filename": "gcc/config/sh/sh.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2Fconfig%2Fsh%2Fsh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2Fconfig%2Fsh%2Fsh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.opt?ref=decc676eb52a061b15df7eed9fead794458e9e09", "patch": "@@ -24,6 +24,10 @@ Mask(SH_E)\n ;; Set if the default precision of th FPU is single.\n Mask(FPU_SINGLE)\n \n+;; Set if the a double-precision FPU is present but is restricted to\n+;; single precision usage only.\n+Mask(FPU_SINGLE_ONLY)\n+\n ;; Set if we should generate code using type 2A insns.\n Mask(HARD_SH2A)\n \n@@ -339,7 +343,7 @@ Target RejectNegative Joined UInteger Var(sh_multcost) Init(-1)\n Cost to assume for a multiply insn\n \n musermode\n-Target Report RejectNegative Mask(USERMODE)\n+Target Report RejectNegative Var(TARGET_USERMODE)\n Don't generate privileged-mode only code; implies -mno-inline-ic_invalidate if the inline code would not work in user mode.\n \n ;; We might want to enable this by default for TARGET_HARD_SH4, because"}, {"sha": "231ceb5bd0ac2ecf607159888bda75c7a84b8326", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=decc676eb52a061b15df7eed9fead794458e9e09", "patch": "@@ -1,3 +1,12 @@\n+2013-03-13  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/49880\n+\t* gcc.target/sh/pr49880-1.c: New.\n+\t* gcc.target/sh/pr49880-2.c: New.\n+\t* gcc.target/sh/pr49880-3.c: New.\n+\t* gcc.target/sh/pr49880-4.c: New.\n+\t* gcc.target/sh/pr49880-5.c: New.\n+\n 2013-03-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/cpp0x/alias-decl-32.C: Remove redundant bits."}, {"sha": "e19f1bf38a1f628a822264c01c093ba51214269c", "filename": "gcc/testsuite/gcc.target/sh/pr49880-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-1.c?ref=decc676eb52a061b15df7eed9fead794458e9e09", "patch": "@@ -0,0 +1,22 @@\n+/* Check that the option -mdiv=call-div1 works.  */\n+/* { dg-do link { target \"sh*-*-*\" } } */\n+/* { dg-options \"-mdiv=call-div1\" }  */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n+\n+int\n+test00 (int a, int b)\n+{\n+  return a / b;\n+}\n+\n+unsigned int\n+test01 (unsigned int a, unsigned b)\n+{\n+  return a / b;\n+}\n+\n+int\n+main (int argc, char** argv)\n+{\n+  return test00 (argc, 123) + test01 (argc, 123);\n+}"}, {"sha": "eef832e30db5af3753042a5598c8ba2c2f92424b", "filename": "gcc/testsuite/gcc.target/sh/pr49880-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-2.c?ref=decc676eb52a061b15df7eed9fead794458e9e09", "patch": "@@ -0,0 +1,22 @@\n+/* Check that the option -mdiv=call-fp works.  */\n+/* { dg-do link { target \"sh*-*-*\" } } */\n+/* { dg-options \"-mdiv=call-fp\" }  */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n+\n+int\n+test00 (int a, int b)\n+{\n+  return a / b;\n+}\n+\n+unsigned int\n+test01 (unsigned int a, unsigned b)\n+{\n+  return a / b;\n+}\n+\n+int\n+main (int argc, char** argv)\n+{\n+  return test00 (argc, 123) + test01 (argc, 123);\n+}"}, {"sha": "80a7df548a899a413740064abe7517f8a1d19613", "filename": "gcc/testsuite/gcc.target/sh/pr49880-3.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-3.c?ref=decc676eb52a061b15df7eed9fead794458e9e09", "patch": "@@ -0,0 +1,22 @@\n+/* Check that the option -mdiv=call-table works.  */\n+/* { dg-do link { target \"sh*-*-*\" } } */\n+/* { dg-options \"-mdiv=call-table\" }  */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n+\n+int\n+test00 (int a, int b)\n+{\n+  return a / b;\n+}\n+\n+unsigned int\n+test01 (unsigned int a, unsigned b)\n+{\n+  return a / b;\n+}\n+\n+int\n+main (int argc, char** argv)\n+{\n+  return test00 (argc, 123) + test01 (argc, 123);\n+}"}, {"sha": "998a8b69fdd9779e980887158955738c2384715b", "filename": "gcc/testsuite/gcc.target/sh/pr49880-4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-4.c?ref=decc676eb52a061b15df7eed9fead794458e9e09", "patch": "@@ -0,0 +1,19 @@\n+/* Check that the option -mdiv=call-fp does not produce calls to the\n+   library function that uses FPU to implement integer division if FPU insns\n+   are not supported or are disabled.  */\n+/* { dg-do compile { target \"sh*-*-*\" } }  */\n+/* { dg-options \"-mdiv=call-fp\" }  */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\"} { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" } }  */\n+/* { dg-final { scan-assembler-not \"sdivsi3_i4\\n|udivsi3_i4\\n\" } }  */\n+\n+int\n+test00 (int a, int b)\n+{\n+  return a / b;\n+}\n+\n+unsigned int\n+test01 (unsigned int a, unsigned b)\n+{\n+  return a / b;\n+}"}, {"sha": "09e99a85f63901d7b09a0b1d18cbcad1d9d6f23d", "filename": "gcc/testsuite/gcc.target/sh/pr49880-5.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decc676eb52a061b15df7eed9fead794458e9e09/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-5.c?ref=decc676eb52a061b15df7eed9fead794458e9e09", "patch": "@@ -0,0 +1,19 @@\n+/* Check that the option -mdiv=call-fp results in the corresponding library\n+   function calls on targets that have a double precision FPU.  */\n+/* { dg-do compile { target \"sh*-*-*\" } }  */\n+/* { dg-options \"-mdiv=call-fp\" }  */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\"} { \"-m2a\" \"-m4\" \"-m4a\" \"*single-only\" } }  */\n+/* { dg-final { scan-assembler \"sdivsi3_i4\\n\" } }  */\n+/* { dg-final { scan-assembler \"udivsi3_i4\\n\" } }  */\n+\n+int\n+test00 (int a, int b)\n+{\n+  return a / b;\n+}\n+\n+unsigned int\n+test01 (unsigned int a, unsigned b)\n+{\n+  return a / b;\n+}"}, {"sha": "61f5cc07694a15e03969546e0fb585be00772801", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decc676eb52a061b15df7eed9fead794458e9e09/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decc676eb52a061b15df7eed9fead794458e9e09/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=decc676eb52a061b15df7eed9fead794458e9e09", "patch": "@@ -1,3 +1,9 @@\n+2013-03-13  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/49880\n+\t* config/sh/lib1funcs.S (sdivsi3_i4, udivsi3_i4): Enable for SH2A.\n+\t(sdivsi3, udivsi3): Remove SH4 check and always compile these functions.\n+\n 2013-03-07  Sriraman Tallam  <tmsriram@google.com>\n \n \t* config/i386/cpuinfo.c (get_intel_cpu): Fix cpuid codes for"}, {"sha": "5f0bbff264f4a04e04e1cf57be63c8a92e20628e", "filename": "libgcc/config/sh/lib1funcs.S", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/decc676eb52a061b15df7eed9fead794458e9e09/libgcc%2Fconfig%2Fsh%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/decc676eb52a061b15df7eed9fead794458e9e09/libgcc%2Fconfig%2Fsh%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Flib1funcs.S?ref=decc676eb52a061b15df7eed9fead794458e9e09", "patch": "@@ -1006,7 +1006,7 @@ hiset:\tsts\tmacl,r0\t\t! r0 = bb*dd\n #ifdef L_sdivsi3_i4\n \t.title \"SH DIVIDE\"\n !! 4 byte integer Divide code for the Renesas SH\n-#ifdef __SH4__\n+#if defined (__SH4__) || defined (__SH2A__)\n !! args in r4 and r5, result in fpul, clobber dr0, dr2\n \n \t.global\tGLOBAL(sdivsi3_i4)\n@@ -1021,7 +1021,7 @@ GLOBAL(sdivsi3_i4):\n \tftrc dr0,fpul\n \n \tENDFUNC(GLOBAL(sdivsi3_i4))\n-#elif defined(__SH4_SINGLE__) || defined(__SH4_SINGLE_ONLY__) || (defined (__SH5__) && ! defined __SH4_NOFPU__)\n+#elif defined (__SH2A_SINGLE__) || defined (__SH2A_SINGLE_ONLY__) || defined(__SH4_SINGLE__) || defined(__SH4_SINGLE_ONLY__) || (defined (__SH5__) && ! defined __SH4_NOFPU__)\n !! args in r4 and r5, result in fpul, clobber r2, dr0, dr2\n \n #if ! __SH5__ || __SH5__ == 32\n@@ -1046,13 +1046,12 @@ GLOBAL(sdivsi3_i4):\n \n \tENDFUNC(GLOBAL(sdivsi3_i4))\n #endif /* ! __SH5__ || __SH5__ == 32 */\n-#endif /* ! __SH4__ */\n+#endif /* ! __SH4__ || __SH2A__  */\n #endif\n \n #ifdef L_sdivsi3\n /* __SH4_SINGLE_ONLY__ keeps this part for link compatibility with\n    sh2e/sh3e code.  */\n-#if (! defined(__SH4__) && ! defined (__SH4_SINGLE__)) || defined (__linux__)\n !!\n !! Steve Chamberlain\n !! sac@cygnus.com\n@@ -1369,13 +1368,12 @@ div0:\trts\n \n \tENDFUNC(GLOBAL(sdivsi3))\n #endif /* ! __SHMEDIA__ */\n-#endif /* ! __SH4__ */\n #endif\n #ifdef L_udivsi3_i4\n \n \t.title \"SH DIVIDE\"\n !! 4 byte integer Divide code for the Renesas SH\n-#ifdef __SH4__\n+#if defined (__SH4__) || defined (__SH2A__)\n !! args in r4 and r5, result in fpul, clobber r0, r1, r4, r5, dr0, dr2, dr4,\n !! and t bit\n \n@@ -1417,7 +1415,7 @@ L1:\n \t.double 2147483648\n \n \tENDFUNC(GLOBAL(udivsi3_i4))\n-#elif defined (__SH5__) && ! defined (__SH4_NOFPU__)\n+#elif defined (__SH5__) && ! defined (__SH4_NOFPU__) && ! defined (__SH2A_NOFPU__)\n #if ! __SH5__ || __SH5__ == 32\n !! args in r4 and r5, result in fpul, clobber r20, r21, dr0, fr33\n \t.mode\tSHmedia\n@@ -1438,7 +1436,7 @@ GLOBAL(udivsi3_i4):\n \n \tENDFUNC(GLOBAL(udivsi3_i4))\n #endif /* ! __SH5__ || __SH5__ == 32 */\n-#elif defined(__SH4_SINGLE__) || defined(__SH4_SINGLE_ONLY__)\n+#elif defined (__SH2A_SINGLE__) || defined (__SH2A_SINGLE_ONLY__) || defined(__SH4_SINGLE__) || defined(__SH4_SINGLE_ONLY__)\n !! args in r4 and r5, result in fpul, clobber r0, r1, r4, r5, dr0, dr2, dr4\n \n \t.global\tGLOBAL(udivsi3_i4)\n@@ -1493,7 +1491,6 @@ L1:\n #ifdef L_udivsi3\n /* __SH4_SINGLE_ONLY__ keeps this part for link compatibility with\n    sh2e/sh3e code.  */\n-#if (! defined(__SH4__) && ! defined (__SH4_SINGLE__)) || defined (__linux__)\n \n !! args in r4 and r5, result in r0, clobbers r4, pr, and t bit\n \t.global\tGLOBAL(udivsi3)\n@@ -1688,7 +1685,6 @@ LOCAL(large_divisor):\n \n \tENDFUNC(GLOBAL(udivsi3))\n #endif /* ! __SHMEDIA__ */\n-#endif /* __SH4__ */\n #endif /* L_udivsi3 */\n \n #ifdef L_udivdi3"}]}