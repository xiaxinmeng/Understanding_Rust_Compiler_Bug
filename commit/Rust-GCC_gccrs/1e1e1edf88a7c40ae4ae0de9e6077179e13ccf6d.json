{"sha": "1e1e1edf88a7c40ae4ae0de9e6077179e13ccf6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUxZTFlZGY4OGE3YzQwYWU0YWUwZGU5ZTYwNzcxNzllMTNjY2Y2ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-29T07:48:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-29T08:40:03Z"}, "message": "More BB vectorization tweaks\n\nThis tweaks the op build from splats to allow loads marked as not\nvectorizable.  It also amends some dump prints with the address of\nthe SLP node or the instance to better be able to debug things.\n\n2020-10-29  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-slp.c (vect_build_slp_tree_2): Allow splatting\n\tnot vectorizable loads.\n\t(vect_build_slp_instance): Amend dumping with address.\n\t(vect_slp_convert_to_external): Likewise.\n\n\t* gcc.dg/vect/bb-slp-pr65935.c: Adjust.", "tree": {"sha": "156f01b46b988b5ea74141953e597dbffd5183f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/156f01b46b988b5ea74141953e597dbffd5183f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e1e1edf88a7c40ae4ae0de9e6077179e13ccf6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e1e1edf88a7c40ae4ae0de9e6077179e13ccf6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e1e1edf88a7c40ae4ae0de9e6077179e13ccf6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e1e1edf88a7c40ae4ae0de9e6077179e13ccf6d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0162d00d12be24ee3f02ce876adafeaa91c6f7f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0162d00d12be24ee3f02ce876adafeaa91c6f7f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0162d00d12be24ee3f02ce876adafeaa91c6f7f9"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "c262d731150ccb0953fce77e70cc2ad2f92f049e", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-pr65935.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e1e1edf88a7c40ae4ae0de9e6077179e13ccf6d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr65935.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e1e1edf88a7c40ae4ae0de9e6077179e13ccf6d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr65935.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr65935.c?ref=1e1e1edf88a7c40ae4ae0de9e6077179e13ccf6d", "patch": "@@ -60,6 +60,7 @@ int main()\n /* We should also be able to use 2-lane SLP to initialize the real and\n    imaginary components in the first loop of main.  */\n /* { dg-final { scan-tree-dump-times \"optimized: basic block\" 10 \"slp1\" } } */\n-/* We should see the s->phase[dir] operand and only that operand built\n+/* We should see the s->phase[dir] operand splatted and no other operand built\n    from scalars.  See PR97334.  */\n-/* { dg-final { scan-tree-dump-times \"Building vector operands from scalars\" 1 \"slp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Using a splat\" 1 \"slp1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Building vector operands from scalars\" 0 \"slp1\" } } */"}, {"sha": "0a7b8e616320b8eb01cf88042f49d702741aa798", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e1e1edf88a7c40ae4ae0de9e6077179e13ccf6d/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e1e1edf88a7c40ae4ae0de9e6077179e13ccf6d/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=1e1e1edf88a7c40ae4ae0de9e6077179e13ccf6d", "patch": "@@ -1627,8 +1627,10 @@ vect_build_slp_tree_2 (vec_info *vinfo, slp_tree node,\n \t      break;\n \t  if (j == group_size\n \t      /* But avoid doing this for loads where we may be\n-\t\t able to CSE things.  */\n-\t      && !gimple_vuse (first_def->stmt))\n+\t\t able to CSE things, unless the stmt is not\n+\t\t vectorizable.  */\n+\t      && (!STMT_VINFO_VECTORIZABLE (first_def)\n+\t\t  || !gimple_vuse (first_def->stmt)))\n \t    {\n \t      if (dump_enabled_p ())\n \t\tdump_printf_loc (MSG_NOTE, vect_location,\n@@ -2379,7 +2381,7 @@ vect_build_slp_instance (vec_info *vinfo,\n \t  if (dump_enabled_p ())\n \t    {\n \t      dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t       \"Final SLP tree for instance:\\n\");\n+\t\t\t       \"Final SLP tree for instance %p:\\n\", new_instance);\n \t      vect_print_slp_graph (MSG_NOTE, vect_location,\n \t\t\t\t    SLP_INSTANCE_TREE (new_instance));\n \t    }\n@@ -3402,7 +3404,7 @@ vect_slp_convert_to_external (vec_info *vinfo, slp_tree node,\n \n   if (dump_enabled_p ())\n     dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t     \"Building vector operands from scalars instead\\n\");\n+\t\t     \"Building vector operands of %p from scalars instead\\n\", node);\n \n   /* Don't remove and free the child nodes here, since they could be\n      referenced by other structures.  The analysis and scheduling phases"}]}