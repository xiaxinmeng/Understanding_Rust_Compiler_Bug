{"sha": "3ebb5ca6cc306dd91af6fd129033971a47da6c8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ViYjVjYTZjYzMwNmRkOTFhZjZmZDEyOTAzMzk3MWE0N2RhNmM4Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-01-04T23:22:31Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-01-04T23:22:31Z"}, "message": "re PR tree-optimization/47056 (10 Ada ACATS tests fail to link with undefined reference on ia64-linux)\n\n\tPR tree-optimization/47056\n\t* cgraphbuild.c (mark_address): Remove ATTRIBUTE_UNUSED markers.\n\t(mark_load): Likewise.  Handle FUNCTION_DECL specially.\n\t(mark_store): Likewise.  Pass STMT to ipa_record_reference.\n\nFrom-SVN: r168493", "tree": {"sha": "43ec5b0dbace605297b2fc9ace2c7aace41aeef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43ec5b0dbace605297b2fc9ace2c7aace41aeef2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ebb5ca6cc306dd91af6fd129033971a47da6c8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebb5ca6cc306dd91af6fd129033971a47da6c8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ebb5ca6cc306dd91af6fd129033971a47da6c8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebb5ca6cc306dd91af6fd129033971a47da6c8c/comments", "author": null, "committer": null, "parents": [{"sha": "c5a62c6fde09060ca31dc302807d1f49fb95eacf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5a62c6fde09060ca31dc302807d1f49fb95eacf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5a62c6fde09060ca31dc302807d1f49fb95eacf"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "01412bd09614389b69a035716b4177f02af5779d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebb5ca6cc306dd91af6fd129033971a47da6c8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebb5ca6cc306dd91af6fd129033971a47da6c8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ebb5ca6cc306dd91af6fd129033971a47da6c8c", "patch": "@@ -1,3 +1,10 @@\n+2011-01-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/47056\n+\t* cgraphbuild.c (mark_address): Remove ATTRIBUTE_UNUSED markers.\n+\t(mark_load): Likewise.  Handle FUNCTION_DECL specially.\n+\t(mark_store): Likewise.  Pass STMT to ipa_record_reference.\n+\n 2011-01-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* dwarf2out.c (rtl_for_decl_init): Strip no-op conversions off the"}, {"sha": "7bfeac78581d97f96f5a5a749b03989c12f65fd2", "filename": "gcc/cgraphbuild.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebb5ca6cc306dd91af6fd129033971a47da6c8c/gcc%2Fcgraphbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebb5ca6cc306dd91af6fd129033971a47da6c8c/gcc%2Fcgraphbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphbuild.c?ref=3ebb5ca6cc306dd91af6fd129033971a47da6c8c", "patch": "@@ -234,8 +234,7 @@ compute_call_stmt_bb_frequency (tree decl, basic_block bb)\n /* Mark address taken in STMT.  */\n \n static bool\n-mark_address (gimple stmt ATTRIBUTE_UNUSED, tree addr,\n-\t      void *data ATTRIBUTE_UNUSED)\n+mark_address (gimple stmt, tree addr, void *data)\n {\n   addr = get_base_address (addr);\n   if (TREE_CODE (addr) == FUNCTION_DECL)\n@@ -268,12 +267,21 @@ mark_address (gimple stmt ATTRIBUTE_UNUSED, tree addr,\n /* Mark load of T.  */\n \n static bool\n-mark_load (gimple stmt ATTRIBUTE_UNUSED, tree t,\n-\t   void *data ATTRIBUTE_UNUSED)\n+mark_load (gimple stmt, tree t, void *data)\n {\n   t = get_base_address (t);\n-  if (t && TREE_CODE (t) == VAR_DECL\n-      && (TREE_STATIC (t) || DECL_EXTERNAL (t)))\n+  if (t && TREE_CODE (t) == FUNCTION_DECL)\n+    {\n+      /* ??? This can happen on platforms with descriptors when these are\n+\t directly manipulated in the code.  Pretend that it's an address.  */\n+      struct cgraph_node *node = cgraph_node (t);\n+      cgraph_mark_address_taken_node (node);\n+      ipa_record_reference ((struct cgraph_node *)data, NULL,\n+\t\t\t    node, NULL,\n+\t\t\t    IPA_REF_ADDR, stmt);\n+    }\n+  else if (t && TREE_CODE (t) == VAR_DECL\n+\t   && (TREE_STATIC (t) || DECL_EXTERNAL (t)))\n     {\n       struct varpool_node *vnode = varpool_node (t);\n       int walk_subtrees;\n@@ -293,8 +301,7 @@ mark_load (gimple stmt ATTRIBUTE_UNUSED, tree t,\n /* Mark store of T.  */\n \n static bool\n-mark_store (gimple stmt ATTRIBUTE_UNUSED, tree t,\n-\t    void *data ATTRIBUTE_UNUSED)\n+mark_store (gimple stmt, tree t, void *data)\n {\n   t = get_base_address (t);\n   if (t && TREE_CODE (t) == VAR_DECL\n@@ -310,7 +317,7 @@ mark_store (gimple stmt ATTRIBUTE_UNUSED, tree t,\n \tvnode = vnode->extra_name;\n       ipa_record_reference ((struct cgraph_node *)data, NULL,\n \t\t\t    NULL, vnode,\n-\t\t\t    IPA_REF_STORE, NULL);\n+\t\t\t    IPA_REF_STORE, stmt);\n      }\n   return false;\n }"}]}