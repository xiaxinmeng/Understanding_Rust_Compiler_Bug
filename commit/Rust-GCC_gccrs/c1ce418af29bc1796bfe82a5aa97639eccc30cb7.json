{"sha": "c1ce418af29bc1796bfe82a5aa97639eccc30cb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFjZTQxOGFmMjliYzE3OTZiZmU4MmE1YWE5NzYzOWVjY2MzMGNiNw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-08T20:45:25Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-08T20:45:25Z"}, "message": "libstdc++: Simplify copy-pasted algorithms in <ranges>\n\nThe <ranges> header currently copies some simple algorithms from\n<bits/ranges_algo.h>, which was originally done in order to avoid a\ncircular dependency with the header.  This is no longer an issue since\nthe latter header now includes <bits/ranges_util.h> instead of all of\n<ranges>.\n\nThis means we could now just include <bits/ranges_algo.h> and remove the\ncopied algorithms, but that'd increase the size of <ranges> by ~10%.\nAnd we can't use the corresponding STL-style algorithms here because\nthey assume input iterators are copyable.  So this patch instead\nsimplifies these copied algorithms, removing their constraints and\nunused parameters, and keeps them around.  In a subsequent patch we're\ngoing to copy (a simplified version of) ranges::find into <ranges> as\nwell.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (__detail::find_if): Simplify.\n\t(__detail::find_if_not): Likewise.\n\t(__detail::min): Remove.\n\t(__detail::mismatch): Simplify.\n\t(take_view::size): Use std::min instead of __detail::min.", "tree": {"sha": "8e83c28f2641e404759d09fe0f54438f7c6ec275", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e83c28f2641e404759d09fe0f54438f7c6ec275"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1ce418af29bc1796bfe82a5aa97639eccc30cb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1ce418af29bc1796bfe82a5aa97639eccc30cb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1ce418af29bc1796bfe82a5aa97639eccc30cb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1ce418af29bc1796bfe82a5aa97639eccc30cb7/comments", "author": null, "committer": null, "parents": [{"sha": "c7fe68f3652ceefaf297611d1e64c8d9da43ad93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7fe68f3652ceefaf297611d1e64c8d9da43ad93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7fe68f3652ceefaf297611d1e64c8d9da43ad93"}], "stats": {"total": 59, "additions": 17, "deletions": 42}, "files": [{"sha": "9077271e4e6c70a3b2c3630d7155e22b1d01d1b3", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 17, "deletions": 42, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ce418af29bc1796bfe82a5aa97639eccc30cb7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ce418af29bc1796bfe82a5aa97639eccc30cb7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=c1ce418af29bc1796bfe82a5aa97639eccc30cb7", "patch": "@@ -978,65 +978,40 @@ namespace views::__adaptor\n       using all_t = decltype(all(std::declval<_Range>()));\n   } // namespace views\n \n-  // XXX: the following algos are copied from ranges_algo.h to avoid a circular\n-  // dependency with that header.\n+  // The following simple algos are transcribed from ranges_algo.h to avoid\n+  // having to include that entire header.\n   namespace __detail\n   {\n-    template<input_iterator _Iter, sentinel_for<_Iter> _Sent,\n-\t     typename _Proj = identity,\n-\t     indirect_unary_predicate<projected<_Iter, _Proj>> _Pred>\n+    template<typename _Iter, typename _Sent, typename _Pred>\n       constexpr _Iter\n-      find_if(_Iter __first, _Sent __last, _Pred __pred, _Proj __proj = {})\n+      find_if(_Iter __first, _Sent __last, _Pred __pred)\n       {\n \twhile (__first != __last\n-\t    && !(bool)std::__invoke(__pred, std::__invoke(__proj, *__first)))\n+\t       && !(bool)std::__invoke(__pred, *__first))\n \t  ++__first;\n \treturn __first;\n       }\n \n-    template<input_iterator _Iter, sentinel_for<_Iter> _Sent,\n-\t     typename _Proj = identity,\n-\t     indirect_unary_predicate<projected<_Iter, _Proj>> _Pred>\n+    template<typename _Iter, typename _Sent, typename _Pred>\n       constexpr _Iter\n-      find_if_not(_Iter __first, _Sent __last, _Pred __pred, _Proj __proj = {})\n+      find_if_not(_Iter __first, _Sent __last, _Pred __pred)\n       {\n \twhile (__first != __last\n-\t    && (bool)std::__invoke(__pred, std::__invoke(__proj, *__first)))\n+\t       && (bool)std::__invoke(__pred, *__first))\n \t  ++__first;\n \treturn __first;\n       }\n \n-    template<typename _Tp, typename _Proj = identity,\n-\t     indirect_strict_weak_order<projected<const _Tp*, _Proj>>\n-\t       _Comp = ranges::less>\n-      constexpr const _Tp&\n-      min(const _Tp& __a, const _Tp& __b, _Comp __comp = {}, _Proj __proj = {})\n-      {\n-\tif (std::__invoke(std::move(__comp),\n-\t\t\t  std::__invoke(__proj, __b),\n-\t\t\t  std::__invoke(__proj, __a)))\n-\t  return __b;\n-\telse\n-\t  return __a;\n-      }\n-\n-    template<input_iterator _Iter1, sentinel_for<_Iter1> _Sent1,\n-\t     input_iterator _Iter2, sentinel_for<_Iter2> _Sent2,\n-\t     typename _Pred = ranges::equal_to,\n-\t     typename _Proj1 = identity, typename _Proj2 = identity>\n-      requires indirectly_comparable<_Iter1, _Iter2, _Pred, _Proj1, _Proj2>\n+    template<typename _Iter1, typename _Sent1, typename _Iter2, typename _Sent2>\n       constexpr pair<_Iter1, _Iter2>\n-      mismatch(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2,\n-\t       _Pred __pred = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {})\n+      mismatch(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2)\n       {\n \twhile (__first1 != __last1 && __first2 != __last2\n-\t       && (bool)std::__invoke(__pred,\n-\t\t\t\t      std::__invoke(__proj1, *__first1),\n-\t\t\t\t      std::__invoke(__proj2, *__first2)))\n-\t{\n-\t  ++__first1;\n-\t  ++__first2;\n-\t}\n+\t       && (bool)ranges::equal_to{}(*__first1, *__first2))\n+\t  {\n+\t    ++__first1;\n+\t    ++__first2;\n+\t  }\n \treturn { std::move(__first1), std::move(__first2) };\n       }\n   } // namespace __detail\n@@ -1847,14 +1822,14 @@ namespace views::__adaptor\n       size() requires sized_range<_Vp>\n       {\n \tauto __n = ranges::size(_M_base);\n-\treturn __detail::min(__n, static_cast<decltype(__n)>(_M_count));\n+\treturn std::min(__n, static_cast<decltype(__n)>(_M_count));\n       }\n \n       constexpr auto\n       size() const requires sized_range<const _Vp>\n       {\n \tauto __n = ranges::size(_M_base);\n-\treturn __detail::min(__n, static_cast<decltype(__n)>(_M_count));\n+\treturn std::min(__n, static_cast<decltype(__n)>(_M_count));\n       }\n     };\n "}]}