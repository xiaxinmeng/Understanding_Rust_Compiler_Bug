{"sha": "c54859d3c9355d07c5e4d30bb4301a32f7bd6fb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU0ODU5ZDNjOTM1NWQwN2M1ZTRkMzBiYjQzMDFhMzJmN2JkNmZiNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-09-28T07:39:30Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-09-28T07:39:30Z"}, "message": "mips.c (mips_constant_info): Add reloc field.\n\n\t* config/mips/mips.c (mips_constant_info): Add reloc field.\n\t(mips_classify_constant): Initialize it.  Always set SYMBOL to the\n\tunderlying symbol, not to an unspec.\n\t(mips_delegitimize_address, print_operand): Clean up accordingly.\n\nFrom-SVN: r71877", "tree": {"sha": "bb144e2756bda7fc8fd26b7330923991f2ac90b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb144e2756bda7fc8fd26b7330923991f2ac90b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c54859d3c9355d07c5e4d30bb4301a32f7bd6fb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54859d3c9355d07c5e4d30bb4301a32f7bd6fb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c54859d3c9355d07c5e4d30bb4301a32f7bd6fb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54859d3c9355d07c5e4d30bb4301a32f7bd6fb7/comments", "author": null, "committer": null, "parents": [{"sha": "d34053edb70f0c7c64b3b5ce3aee717b2f11cea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34053edb70f0c7c64b3b5ce3aee717b2f11cea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d34053edb70f0c7c64b3b5ce3aee717b2f11cea5"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "1965f1b518dc79ca8c5efc5e74e3259c43ef8e1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54859d3c9355d07c5e4d30bb4301a32f7bd6fb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54859d3c9355d07c5e4d30bb4301a32f7bd6fb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c54859d3c9355d07c5e4d30bb4301a32f7bd6fb7", "patch": "@@ -1,3 +1,10 @@\n+2003-09-28  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.c (mips_constant_info): Add reloc field.\n+\t(mips_classify_constant): Initialize it.  Always set SYMBOL to the\n+\tunderlying symbol, not to an unspec.\n+\t(mips_delegitimize_address, print_operand): Clean up accordingly.\n+\n 2003-09-28  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips-protos.h (mips16_gp_pseudo_reg): Remove."}, {"sha": "7fcab39b367b2f7c63207c0b805e6b7a4cabf189", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54859d3c9355d07c5e4d30bb4301a32f7bd6fb7/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54859d3c9355d07c5e4d30bb4301a32f7bd6fb7/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c54859d3c9355d07c5e4d30bb4301a32f7bd6fb7", "patch": "@@ -351,14 +351,15 @@ struct mips_arg_info\n    CONSTANT_GP\n        No fields are valid.\n \n-   CONSTANT_RELOC\n-       SYMBOL is the relocation UNSPEC and OFFSET is the offset applied\n-       to the symbol.\n-\n    CONSTANT_SYMBOLIC\n-       SYMBOL is the referenced symbol and OFFSET is the constant offset.  */\n+       SYMBOL is the referenced symbol and OFFSET is the constant offset.\n+\n+   CONSTANT_RELOC\n+       SYMBOL and OFFSET are the same as for CONSTANT_SYMBOLIC.  RELOC is\n+       the relocation number.  */\n struct mips_constant_info\n {\n+  int reloc;\n   rtx symbol;\n   HOST_WIDE_INT offset;\n };\n@@ -828,8 +829,11 @@ mips_reloc_offset_ok_p (int reloc, HOST_WIDE_INT offset)\n static enum mips_constant_type\n mips_classify_constant (struct mips_constant_info *info, rtx x)\n {\n+  enum mips_constant_type type;\n+\n+  type = CONSTANT_SYMBOLIC;\n   info->offset = 0;\n-  info->symbol = x;\n+\n   if (GET_CODE (x) == CONST)\n     {\n       x = XEXP (x, 0);\n@@ -842,14 +846,21 @@ mips_classify_constant (struct mips_constant_info *info, rtx x)\n \t  info->offset += INTVAL (XEXP (x, 1));\n \t  x = XEXP (x, 0);\n \t}\n-      info->symbol = x;\n \n       if (GET_CODE (x) == UNSPEC\n \t  && mips_reloc_offset_ok_p (XINT (x, 1), info->offset))\n-\treturn CONSTANT_RELOC;\n+\t{\n+\t  info->reloc = XINT (x, 1);\n+\t  x = XVECEXP (x, 0, 0);\n+\t  type = CONSTANT_RELOC;\n+\t}\n     }\n+\n   if (GET_CODE (x) == SYMBOL_REF || GET_CODE (x) == LABEL_REF)\n-    return CONSTANT_SYMBOLIC;\n+    {\n+      info->symbol = x;\n+      return type;\n+    }\n   return CONSTANT_NONE;\n }\n \n@@ -1989,15 +2000,15 @@ mips_delegitimize_address (rtx x)\n   if (GET_CODE (x) == MEM\n       && GET_CODE (XEXP (x, 0)) == PLUS\n       && mips_classify_constant (&c, XEXP (XEXP (x, 0), 1)) == CONSTANT_RELOC\n-      && mips_classify_symbol (XVECEXP (c.symbol, 0, 0)) == SYMBOL_GOT_GLOBAL)\n-    return XVECEXP (c.symbol, 0, 0);\n+      && mips_classify_symbol (c.symbol) == SYMBOL_GOT_GLOBAL)\n+    return c.symbol;\n \n   if (GET_CODE (x) == PLUS\n       && (XEXP (x, 0) == pic_offset_table_rtx\n \t  || XEXP (x, 0) == cfun->machine->mips16_gp_pseudo_rtx)\n       && mips_classify_constant (&c, XEXP (x, 1)) == CONSTANT_RELOC\n-      && mips_classify_symbol (XVECEXP (c.symbol, 0, 0)) == SYMBOL_SMALL_DATA)\n-    return plus_constant (XVECEXP (c.symbol, 0, 0), c.offset);\n+      && mips_classify_symbol (c.symbol) == SYMBOL_SMALL_DATA)\n+    return plus_constant (c.symbol, c.offset);\n \n   return x;\n }\n@@ -5434,10 +5445,9 @@ print_operand (FILE *file, rtx op, int letter)\n \tbreak;\n \n       case CONSTANT_RELOC:\n-\treloc = mips_reloc_string (XINT (c.symbol, 1));\n+\treloc = mips_reloc_string (c.reloc);\n \tfputs (reloc, file);\n-\toutput_addr_const (file, plus_constant (XVECEXP (c.symbol, 0, 0),\n-\t\t\t\t\t\tc.offset));\n+\toutput_addr_const (file, plus_constant (c.symbol, c.offset));\n \twhile (*reloc != 0)\n \t  if (*reloc++ == '(')\n \t    fputc (')', file);"}]}