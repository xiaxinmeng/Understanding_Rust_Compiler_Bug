{"sha": "1d11f7ce7081fc9e28ac0a66c6b3f6b7950971d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQxMWY3Y2U3MDgxZmM5ZTI4YWMwYTY2YzZiM2Y2Yjc5NTA5NzFkNg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-02-26T18:03:51Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-02-26T18:03:51Z"}, "message": "S/390: PR69709 Fix risbg splitter\n\nThis fixes a wrong code generation problem with the splitters introduced\nwith that patch: https://gcc.gnu.org/ml/gcc-patches/2015-07/msg01840.html\n\nThe target operand is used as temporary.  This fails if it matches the\nsource of the left shift which is read after writing the temporary.\n\nThanks to Dominik for debugging it and thanks to Richard for the fix!\n\nBootstrapped and regtested on s390x with-arch=z13.\n\nBye,\n\n-Andreas-\n\ngcc/ChangeLog:\n\n2016-02-26  Richard Henderson  <rth@redhat.com>\n\n\tPR target/69709\n\t* config/s390/s390.md (risbg and risbgn splitters): Allocate new\n\tpseudo in case the target rtx matches the source of the left\n\tshift.\n\ngcc/testsuite/ChangeLog:\n\n2016-02-26  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\tPR target/69709\n\t* gcc.target/s390/pr69709.c: New test.\n\nFrom-SVN: r233752", "tree": {"sha": "9bc7b45d701ee6fee291c17fa3c83a83afa07473", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bc7b45d701ee6fee291c17fa3c83a83afa07473"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d11f7ce7081fc9e28ac0a66c6b3f6b7950971d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d11f7ce7081fc9e28ac0a66c6b3f6b7950971d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d11f7ce7081fc9e28ac0a66c6b3f6b7950971d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d11f7ce7081fc9e28ac0a66c6b3f6b7950971d6/comments", "author": null, "committer": null, "parents": [{"sha": "27d39ae1cca01885262fa267879f341c473110e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d39ae1cca01885262fa267879f341c473110e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27d39ae1cca01885262fa267879f341c473110e3"}], "stats": {"total": 75, "additions": 71, "deletions": 4}, "files": [{"sha": "2668f2e7c694d01fb025a7d109a2e6d7ec040732", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d11f7ce7081fc9e28ac0a66c6b3f6b7950971d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d11f7ce7081fc9e28ac0a66c6b3f6b7950971d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d11f7ce7081fc9e28ac0a66c6b3f6b7950971d6", "patch": "@@ -1,3 +1,10 @@\n+2016-02-26  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/69709\n+\t* config/s390/s390.md (risbg and risbgn splitters): Allocate new\n+\tpseudo in case the target rtx matches the source of the left\n+\tshift.\n+\n 2016-02-26  Martin Jambor  <mjambor@suse.cz>\n \n \tPR hsa/69568"}, {"sha": "8f92018f0b0586318c247ef2df500c811fbdcb64", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d11f7ce7081fc9e28ac0a66c6b3f6b7950971d6/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d11f7ce7081fc9e28ac0a66c6b3f6b7950971d6/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=1d11f7ce7081fc9e28ac0a66c6b3f6b7950971d6", "patch": "@@ -3876,13 +3876,21 @@\n \t\t (ashift:GPR (match_operand:GPR 3 \"nonimmediate_operand\" \"\")\n \t\t\t     (match_operand:GPR 4 \"nonzero_shift_count_operand\" \"\"))))]\n   \"TARGET_ZEC12 && UINTVAL (operands[2]) + UINTVAL (operands[4]) >= <bitsize>\"\n-  [(set (match_dup 0)\n+  [(set (match_dup 6)\n \t(lshiftrt:GPR (match_dup 1) (match_dup 2)))\n    (set (match_dup 0)\n-\t(ior:GPR (and:GPR (match_dup 0) (match_dup 5))\n+\t(ior:GPR (and:GPR (match_dup 6) (match_dup 5))\n \t\t (ashift:GPR (match_dup 3) (match_dup 4))))]\n {\n   operands[5] = GEN_INT ((1UL << UINTVAL (operands[4])) - 1);\n+  if (rtx_equal_p (operands[0], operands[3]))\n+    {\n+      if (!can_create_pseudo_p ())\n+\tFAIL;\n+      operands[6] = gen_reg_rtx (<MODE>mode);\n+    }\n+  else\n+    operands[6] = operands[0];\n })\n \n (define_split\n@@ -3894,15 +3902,23 @@\n \t\t\t       (match_operand:GPR 4 \"nonzero_shift_count_operand\" \"\"))))\n      (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_Z10 && !TARGET_ZEC12 && UINTVAL (operands[2]) + UINTVAL (operands[4]) >= <bitsize>\"\n-  [(set (match_dup 0)\n+  [(set (match_dup 6)\n \t(lshiftrt:GPR (match_dup 1) (match_dup 2)))\n    (parallel\n     [(set (match_dup 0)\n-\t  (ior:GPR (and:GPR (match_dup 0) (match_dup 5))\n+\t  (ior:GPR (and:GPR (match_dup 6) (match_dup 5))\n \t\t   (ashift:GPR (match_dup 3) (match_dup 4))))\n      (clobber (reg:CC CC_REGNUM))])]\n {\n   operands[5] = GEN_INT ((1UL << UINTVAL (operands[4])) - 1);\n+  if (rtx_equal_p (operands[0], operands[3]))\n+    {\n+      if (!can_create_pseudo_p ())\n+\tFAIL;\n+      operands[6] = gen_reg_rtx (<MODE>mode);\n+    }\n+  else\n+    operands[6] = operands[0];\n })\n \n (define_insn \"*r<noxa>sbg_<mode>_noshift\""}, {"sha": "a70a06970bc665928eb39b822507e162c8d7ad0d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d11f7ce7081fc9e28ac0a66c6b3f6b7950971d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d11f7ce7081fc9e28ac0a66c6b3f6b7950971d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d11f7ce7081fc9e28ac0a66c6b3f6b7950971d6", "patch": "@@ -1,3 +1,8 @@\n+2016-02-26  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\tPR target/69709\n+\t* gcc.target/s390/pr69709.c: New test.\n+\n 2016-02-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/69245"}, {"sha": "e9aa024521d5ba6ad206231cad9e4f7303e39f8c", "filename": "gcc/testsuite/gcc.target/s390/pr69709.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d11f7ce7081fc9e28ac0a66c6b3f6b7950971d6/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr69709.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d11f7ce7081fc9e28ac0a66c6b3f6b7950971d6/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr69709.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr69709.c?ref=1d11f7ce7081fc9e28ac0a66c6b3f6b7950971d6", "patch": "@@ -0,0 +1,39 @@\n+/* PR69709 This testcase used to fail due to a broken risbg\n+   splitter.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -march=z10\" } */\n+\n+\n+typedef struct\n+{\n+  unsigned int sig[2];\n+}\n+val_t;\n+\n+unsigned int __attribute__ ((noinline))\n+div_significands (const val_t * a)\n+{\n+  val_t u = *a;\n+  int bit = 64;\n+  unsigned int r;\n+  do\n+    {\n+      u.sig[1] = (u.sig[1] << 1) | (u.sig[0] >> 31);\n+      u.sig[0] = 42;\n+\n+      if (bit == 64)\n+\tr = u.sig[1];\n+    }\n+  while (--bit >= 0);\n+  return r;\n+}\n+\n+int\n+main (void)\n+{\n+  val_t a = { { 0x1, 0x1 } };\n+  if (div_significands (&a) != 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}