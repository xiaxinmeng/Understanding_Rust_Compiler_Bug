{"sha": "d97d1726450be2730e9dab700a0ffddd838a6753", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk3ZDE3MjY0NTBiZTI3MzBlOWRhYjcwMGEwZmZkZGQ4MzhhNjc1Mw==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2006-02-15T09:45:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:45:00Z"}, "message": "sem_ch9.adb (Analyze_Protected_Type, [...]): Check that if this is the full-declaration associated with a private...\n\n2006-02-13  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch9.adb (Analyze_Protected_Type, Analyze_Task_Type): Check that\n\tif this is the full-declaration associated with a private declaration\n\tthat implement interfaces, then the private type declaration must be\n\tlimited.\n\t(Analyze_Single_Protected, Analyze_Single_Task): Do not mark the object\n\tas aliased. The use of the 'access attribute is not available for such\n\tobject (for this purpose the object should be explicitly marked as\n\taliased, but being an anonymous type this is not possible).\n\nFrom-SVN: r111094", "tree": {"sha": "90881b527ff74f29dc63f194427a3d96b36d1497", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90881b527ff74f29dc63f194427a3d96b36d1497"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d97d1726450be2730e9dab700a0ffddd838a6753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97d1726450be2730e9dab700a0ffddd838a6753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d97d1726450be2730e9dab700a0ffddd838a6753", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97d1726450be2730e9dab700a0ffddd838a6753/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cdc8c54cf73e3b3d5cd5d3431a76a0fbd1c42908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc8c54cf73e3b3d5cd5d3431a76a0fbd1c42908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdc8c54cf73e3b3d5cd5d3431a76a0fbd1c42908"}], "stats": {"total": 299, "additions": 171, "deletions": 128}, "files": [{"sha": "1ce2efdbf79c53c69b2a827646834906c6ff6dd0", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 171, "deletions": 128, "changes": 299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97d1726450be2730e9dab700a0ffddd838a6753/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97d1726450be2730e9dab700a0ffddd838a6753/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=d97d1726450be2730e9dab700a0ffddd838a6753", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -70,16 +70,16 @@ package body Sem_Ch9 is\n \n    procedure Check_Overriding_Indicator (Def : Node_Id);\n    --  Ada 2005 (AI-397): Check the overriding indicator of entries and\n-   --  subprograms of protected or task types. Def is the definition of\n-   --  the protected or task type.\n+   --  subprograms of protected or task types. Def is the definition of the\n+   --  protected or task type.\n \n    function Find_Concurrent_Spec (Body_Id : Entity_Id) return Entity_Id;\n    --  Find entity in corresponding task or protected declaration. Use full\n    --  view if first declaration was for an incomplete type.\n \n    procedure Install_Declarations (Spec : Entity_Id);\n-   --  Utility to make visible in corresponding body the entities defined\n-   --  in task, protected type declaration, or entry declaration.\n+   --  Utility to make visible in corresponding body the entities defined in\n+   --  task, protected type declaration, or entry declaration.\n \n    -----------------------------\n    -- Analyze_Abort_Statement --\n@@ -162,9 +162,9 @@ package body Sem_Ch9 is\n       -----------------------\n \n       function Actual_Index_Type (E : Entity_Id) return Entity_Id;\n-      --  If the bounds of an entry family depend on task discriminants,\n-      --  create a new index type where a discriminant is replaced by the\n-      --  local variable that renames it in the task body.\n+      --  If the bounds of an entry family depend on task discriminants, create\n+      --  a new index type where a discriminant is replaced by the local\n+      --  variable that renames it in the task body.\n \n       function Actual_Index_Type (E : Entity_Id) return Entity_Id is\n          Typ   : constant Entity_Id := Entry_Index_Type (E);\n@@ -183,13 +183,11 @@ package body Sem_Ch9 is\n          function Actual_Discriminant_Ref (Bound : Node_Id) return Node_Id is\n             Typ : constant Entity_Id := Etype (Bound);\n             Ref : Node_Id;\n-\n          begin\n             if not Is_Entity_Name (Bound)\n               or else Ekind (Entity (Bound)) /= E_Discriminant\n             then\n                return Bound;\n-\n             else\n                Ref := Make_Identifier (Sloc (N), Chars (Entity (Bound)));\n                Analyze (Ref);\n@@ -272,9 +270,9 @@ package body Sem_Ch9 is\n          End_Scope;\n       end if;\n \n-      --  We set the default expressions processed flag because we don't\n-      --  need default expression functions. This is really more like a\n-      --  body entity than a spec entity anyway.\n+      --  We set the default expressions processed flag because we don't need\n+      --  default expression functions. This is really more like body entity\n+      --  than a spec entity anyway.\n \n       Set_Default_Expressions_Processed (Accept_Id);\n \n@@ -300,8 +298,8 @@ package body Sem_Ch9 is\n          Style.Check_Identifier (Nam, Entry_Nam);\n       end if;\n \n-      --  Verify that the entry is not hidden by a procedure declared in\n-      --  the current block (pathological but possible).\n+      --  Verify that the entry is not hidden by a procedure declared in the\n+      --  current block (pathological but possible).\n \n       if Current_Scope /= Task_Nam then\n          declare\n@@ -365,12 +363,11 @@ package body Sem_Ch9 is\n          Error_Msg_N (\"invalid entry index in accept for simple entry\", N);\n       end if;\n \n-      --  If label declarations present, analyze them. They are declared\n-      --  in the enclosing task, but their enclosing scope is the entry itself,\n-      --  so that goto's to the label are recognized as local to the accept.\n+      --  If label declarations present, analyze them. They are declared in the\n+      --  enclosing task, but their enclosing scope is the entry itself, so\n+      --  that goto's to the label are recognized as local to the accept.\n \n       if Present (Declarations (N)) then\n-\n          declare\n             Decl : Node_Id;\n             Id   : Entity_Id;\n@@ -390,25 +387,25 @@ package body Sem_Ch9 is\n          end;\n       end if;\n \n-      --  If statements are present, they must be analyzed in the context\n-      --  of the entry, so that references to formals are correctly resolved.\n-      --  We also have to add the declarations that are required by the\n-      --  expansion of the accept statement in this case if expansion active.\n+      --  If statements are present, they must be analyzed in the context of\n+      --  the entry, so that references to formals are correctly resolved. We\n+      --  also have to add the declarations that are required by the expansion\n+      --  of the accept statement in this case if expansion active.\n \n-      --  In the case of a select alternative of a selective accept,\n-      --  the expander references the address declaration even if there\n-      --  is no statement list.\n+      --  In the case of a select alternative of a selective accept, the\n+      --  expander references the address declaration even if there is no\n+      --  statement list.\n \n       --  We also need to create the renaming declarations for the local\n-      --  variables that will replace references to the formals within\n-      --  the accept.\n+      --  variables that will replace references to the formals within the\n+      --  accept statement.\n \n       Exp_Ch9.Expand_Accept_Declarations (N, Entry_Nam);\n \n       --  Set Never_Set_In_Source and clear Is_True_Constant/Current_Value\n       --  fields on all entry formals (this loop ignores all other entities).\n-      --  Reset Set_Referenced and Has_Pragma_Unreferenced as well, so that\n-      --  we can post accurate warnings on each accept statement for the same\n+      --  Reset Set_Referenced and Has_Pragma_Unreferenced as well, so that we\n+      --  can post accurate warnings on each accept statement for the same\n       --  entry.\n \n       E := First_Entity (Entry_Nam);\n@@ -462,12 +459,12 @@ package body Sem_Ch9 is\n \n          Analyze (Trigger);\n \n-         --  The trigger is a dispatching procedure. Postpone the analysis\n-         --  of the triggering and abortable statements until the expansion\n-         --  of this asynchronous select in Expand_N_Asynchronous_Select.\n-         --  This action is required since the code replication in Expand-\n-         --  _N_Asynchronous_Select of an already analyzed statement list\n-         --  causes Gigi aborts.\n+         --  The trigger is a dispatching procedure. Postpone the analysis of\n+         --  the triggering and abortable statements until the expansion of\n+         --  this asynchronous select in Expand_N_Asynchronous_Select. This\n+         --  action is required since otherwise we would get a gigi abort from\n+         --  the code replication in Expand_N_Asynchronous_Select of an already\n+         --  analyzed statement list.\n \n          if Expander_Active\n            and then Nkind (Trigger) = N_Procedure_Call_Statement\n@@ -540,7 +537,7 @@ package body Sem_Ch9 is\n       then\n          Expr := Expression (Delay_Statement (N));\n \n-         --  defer full analysis until the statement is expanded, to insure\n+         --  Defer full analysis until the statement is expanded, to insure\n          --  that generated code does not move past the guard. The delay\n          --  expression is only evaluated if the guard is open.\n \n@@ -668,13 +665,13 @@ package body Sem_Ch9 is\n                        (Entry_Index_Specification (Formals)));\n \n                else\n-                  --  The elaboration of the entry body does not recompute\n-                  --  the bounds of the index, which may have side effects.\n-                  --  Inherit the bounds from the entry declaration. This\n-                  --  is critical if the entry has a per-object constraint.\n-                  --  If a bound is given by a discriminant, it must be\n-                  --  reanalyzed in order to capture the discriminal of the\n-                  --  current entry, rather than that of the protected type.\n+                  --  The elaboration of the entry body does not recompute the\n+                  --  bounds of the index, which may have side effects. Inherit\n+                  --  the bounds from the entry declaration. This is critical\n+                  --  if the entry has a per-object constraint. If a bound is\n+                  --  given by a discriminant, it must be reanalyzed in order\n+                  --  to capture the discriminal of the current entry, rather\n+                  --  than that of the protected type.\n \n                   declare\n                      Index_Spec : constant Node_Id :=\n@@ -692,8 +689,8 @@ package body Sem_Ch9 is\n                         Set_Etype (Def, Empty);\n                         Set_Analyzed (Def, False);\n \n-                        --  Keep the original subtree to ensure tree is\n-                        --  properly formed (e.g. for ASIS use)\n+                        --  Keep the original subtree to ensure a properly\n+                        --  formed tree (e.g. for ASIS use).\n \n                         Rewrite\n                           (Discrete_Subtype_Definition (Index_Spec), Def);\n@@ -781,8 +778,8 @@ package body Sem_Ch9 is\n       --  formals (see exp_ch9.Add_Formal_Renamings).\n \n       declare\n-         E1  : Entity_Id;\n-         E2  : Entity_Id;\n+         E1 : Entity_Id;\n+         E2 : Entity_Id;\n \n       begin\n          E1 := First_Entity (Entry_Name);\n@@ -793,9 +790,9 @@ package body Sem_Ch9 is\n                Next_Entity (E2);\n             end loop;\n \n-            --  If no matching body entity, then we already had\n-            --  a detected error of some kind, so just forget\n-            --  about worrying about these warnings.\n+            --  If no matching body entity, then we already had a detected\n+            --  error of some kind, so just forget about worrying about these\n+            --  warnings.\n \n             if No (E2) then\n                goto Continue;\n@@ -836,7 +833,6 @@ package body Sem_Ch9 is\n       then\n          End_Scope;\n       end if;\n-\n    end Analyze_Entry_Body;\n \n    ------------------------------------\n@@ -937,15 +933,15 @@ package body Sem_Ch9 is\n    -- Analyze_Entry_Index_Specification --\n    ---------------------------------------\n \n-   --  The defining_Identifier of the entry index specification is local\n-   --  to the entry body, but must be available in the entry barrier,\n-   --  which is evaluated outside of the entry body. The index is eventually\n-   --  renamed as a run-time object, so is visibility is strictly a front-end\n-   --  concern. In order to make it available to the barrier, we create\n-   --  an additional scope, as for a loop, whose only declaration is the\n-   --  index name. This loop is not attached to the tree and does not appear\n-   --  as an entity local to the protected type, so its existence need only\n-   --  be knwown to routines that process entry families.\n+   --  The Defining_Identifier of the entry index specification is local to the\n+   --  entry body, but it must be available in the entry barrier which is\n+   --  evaluated outside of the entry body. The index is eventually renamed as\n+   --  a run-time object, so is visibility is strictly a front-end concern. In\n+   --  order to make it available to the barrier, we create an additional\n+   --  scope, as for a loop, whose only declaration is the index name. This\n+   --  loop is not attached to the tree and does not appear as an entity local\n+   --  to the protected type, so its existence need only be knwown to routines\n+   --  that process entry families.\n \n    procedure Analyze_Entry_Index_Specification (N : Node_Id) is\n       Iden    : constant Node_Id   := Defining_Identifier (N);\n@@ -980,8 +976,8 @@ package body Sem_Ch9 is\n    ----------------------------\n \n    procedure Analyze_Protected_Body (N : Node_Id) is\n-      Body_Id   : constant Entity_Id := Defining_Identifier (N);\n-      Last_E    : Entity_Id;\n+      Body_Id : constant Entity_Id := Defining_Identifier (N);\n+      Last_E  : Entity_Id;\n \n       Spec_Id : Entity_Id;\n       --  This is initially the entity of the protected object or protected\n@@ -1038,9 +1034,9 @@ package body Sem_Ch9 is\n \n       Analyze_Declarations (Declarations (N));\n \n-      --  For visibility purposes, all entities in the body are private.\n-      --  Set First_Private_Entity accordingly, if there was no private\n-      --  part in the protected declaration.\n+      --  For visibility purposes, all entities in the body are private. Set\n+      --  First_Private_Entity accordingly, if there was no private part in the\n+      --  protected declaration.\n \n       if No (First_Private_Entity (Spec_Id)) then\n          if Present (Last_E) then\n@@ -1076,7 +1072,6 @@ package body Sem_Ch9 is\n \n          if Present (L) then\n             Set_First_Private_Entity (Current_Scope, Next_Entity (L));\n-\n          else\n             Set_First_Private_Entity (Current_Scope,\n               First_Entity (Current_Scope));\n@@ -1155,9 +1150,8 @@ package body Sem_Ch9 is\n                              Iface, Iface_Typ);\n \n             else\n-               --  Ada 2005 (AI-251): \"The declaration of a specific\n-               --  descendant of an interface type freezes the interface\n-               --  type\" RM 13.14\n+               --  Ada 2005 (AI-251): \"The declaration of a specific descendant\n+               --  of an interface type freezes the interface type\" RM 13.14.\n \n                Freeze_Before (N, Etype (Iface));\n \n@@ -1182,13 +1176,42 @@ package body Sem_Ch9 is\n \n             Next (Iface);\n          end loop;\n+\n+         --  If this is the full-declaration associated with a private\n+         --  declaration that implement interfaces, then the private type\n+         --  declaration must be limited.\n+\n+         if Has_Private_Declaration (T) then\n+            declare\n+               E : Entity_Id;\n+\n+            begin\n+               E := First_Entity (Scope (T));\n+               loop\n+                  pragma Assert (Present (E));\n+\n+                  if Is_Type (E) and then Present (Full_View (E)) then\n+                     exit when Full_View (E) = T;\n+                  end if;\n+\n+                  Next_Entity (E);\n+               end loop;\n+\n+               if not Is_Limited_Record (E) then\n+                  Error_Msg_Sloc := Sloc (E);\n+                  Error_Msg_N\n+                    (\"(Ada 2005) private type declaration # must be limited\",\n+                     T);\n+               end if;\n+            end;\n+         end if;\n       end if;\n \n       if Present (Discriminant_Specifications (N)) then\n          if Has_Discriminants (T) then\n \n             --  Install discriminants. Also, verify conformance of\n-            --  discriminants of previous and current view.  ???\n+            --  discriminants of previous and current view. ???\n \n             Install_Declarations (T);\n          else\n@@ -1215,8 +1238,8 @@ package body Sem_Ch9 is\n          Set_Has_Controlled_Component (T, True);\n       end if;\n \n-      --  The Ekind of components is E_Void during analysis to detect\n-      --  illegal uses. Now it can be set correctly.\n+      --  The Ekind of components is E_Void during analysis to detect illegal\n+      --  uses. Now it can be set correctly.\n \n       E := First_Entity (Current_Scope);\n       while Present (E) loop\n@@ -1284,8 +1307,8 @@ package body Sem_Ch9 is\n          Entry_Name := Selector_Name (Entry_Name);\n       end if;\n \n-      --  If an explicit target object is given then we have to check\n-      --  the restrictions of 9.5.4(6).\n+      --  If an explicit target object is given then we have to check the\n+      --  restrictions of 9.5.4(6).\n \n       if Present (Target_Obj) then\n \n@@ -1306,10 +1329,10 @@ package body Sem_Ch9 is\n \n          pragma Assert (Present (Outer_Ent));\n \n-         --  Check that the accessibility level of the target object\n-         --  is not greater or equal to the outermost enclosing accept\n-         --  statement (or entry body) unless it is a parameter of the\n-         --  innermost enclosing accept statement (or entry body).\n+         --  Check that the accessibility level of the target object is not\n+         --  greater or equal to the outermost enclosing accept statement (or\n+         --  entry body) unless it is a parameter of the innermost enclosing\n+         --  accept statement (or entry body).\n \n          if Object_Access_Level (Target_Obj) >= Scope_Depth (Outer_Ent)\n            and then\n@@ -1361,8 +1384,8 @@ package body Sem_Ch9 is\n \n       --  Non-overloaded cases\n \n-      --  For the case of a reference to an element of an entry family,\n-      --  the Entry_Name is an indexed component.\n+      --  For the case of a reference to an element of an entry family, the\n+      --  Entry_Name is an indexed component.\n \n       elsif Nkind (Entry_Name) = N_Indexed_Component then\n \n@@ -1382,9 +1405,9 @@ package body Sem_Ch9 is\n          end if;\n \n       --  If we had a requeue of the form REQUEUE A (B), then the parser\n-      --  accepted it (because it could have been a requeue on an entry\n-      --  index. If A turns out not to be an entry family, then the analysis\n-      --  of A (B) turned it into a function call.\n+      --  accepted it (because it could have been a requeue on an entry index.\n+      --  If A turns out not to be an entry family, then the analysis of A (B)\n+      --  turned it into a function call.\n \n       elsif Nkind (Entry_Name) = N_Function_Call then\n          Error_Msg_N\n@@ -1424,13 +1447,13 @@ package body Sem_Ch9 is\n                Ent := First_Formal (Enclosing);\n                while Present (Ent) loop\n \n-                  --  For OUT or IN OUT parameter, the effect of the requeue\n-                  --  is to assign the parameter a value on exit from the\n-                  --  requeued body, so we can set it as source assigned.\n-                  --  We also clear the Is_True_Constant indication. We do\n-                  --  not need to clear Current_Value, since the effect of\n-                  --  the requeue is to perform an unconditional goto so\n-                  --  that any further references will not occur anyway.\n+                  --  For OUT or IN OUT parameter, the effect of the requeue is\n+                  --  to assign the parameter a value on exit from the requeued\n+                  --  body, so we can set it as source assigned. We also clear\n+                  --  the Is_True_Constant indication. We do not need to clear\n+                  --  Current_Value, since the effect of the requeue is to\n+                  --  perform an unconditional goto so that any further\n+                  --  references will not occur anyway.\n \n                   if Ekind (Ent) = E_Out_Parameter\n                        or else\n@@ -1441,8 +1464,8 @@ package body Sem_Ch9 is\n                   end if;\n \n                   --  For all parameters, the requeue acts as a reference,\n-                  --  since the value of the parameter is passed to the\n-                  --  new entry, so we want to suppress unreferenced warnings.\n+                  --  since the value of the parameter is passed to the new\n+                  --  entry, so we want to suppress unreferenced warnings.\n \n                   Set_Referenced (Ent);\n                   Next_Formal (Ent);\n@@ -1588,8 +1611,8 @@ package body Sem_Ch9 is\n       Generate_Definition (Id);\n       Tasking_Used := True;\n \n-      --  The node is rewritten as a protected type declaration,\n-      --  in exact analogy with what is done with single tasks.\n+      --  The node is rewritten as a protected type declaration, in exact\n+      --  analogy with what is done with single tasks.\n \n       T :=\n         Make_Defining_Identifier (Sloc (Id),\n@@ -1601,21 +1624,17 @@ package body Sem_Ch9 is\n          Protected_Definition => Relocate_Node (Protected_Definition (N)),\n          Interface_List       => Interface_List (N));\n \n-      --  Ada 2005 (AI-399): Mark the object as aliased. Required to use\n-      --  the attribute 'access\n-\n       O_Decl :=\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => O_Name,\n-          Aliased_Present     => Ada_Version >= Ada_05,\n           Object_Definition   => Make_Identifier (Loc,  Chars (T)));\n \n       Rewrite (N, T_Decl);\n       Insert_After (N, O_Decl);\n       Mark_Rewrite_Insertion (O_Decl);\n \n-      --  Enter names of type and object before analysis, because the name\n-      --  of the object may be used in its own body.\n+      --  Enter names of type and object before analysis, because the name of\n+      --  the object may be used in its own body.\n \n       Enter_Name (T);\n       Set_Ekind (T, E_Protected_Type);\n@@ -1625,9 +1644,9 @@ package body Sem_Ch9 is\n       Set_Ekind (O_Name, E_Variable);\n       Set_Etype (O_Name, T);\n \n-      --  Instead of calling Analyze on the new node,  call directly\n-      --  the proper analysis procedure. Otherwise the node would be\n-      --  expanded twice, with disastrous result.\n+      --  Instead of calling Analyze on the new node, call the proper analysis\n+      --  procedure directly. Otherwise the node would be expanded twice, with\n+      --  disastrous result.\n \n       Analyze_Protected_Type (N);\n    end Analyze_Single_Protected;\n@@ -1648,8 +1667,8 @@ package body Sem_Ch9 is\n       Generate_Definition (Id);\n       Tasking_Used := True;\n \n-      --  The node is rewritten as a task type declaration,  followed\n-      --  by an object declaration of that anonymous task type.\n+      --  The node is rewritten as a task type declaration, followed by an\n+      --  object declaration of that anonymous task type.\n \n       T :=\n         Make_Defining_Identifier (Sloc (Id),\n@@ -1661,21 +1680,17 @@ package body Sem_Ch9 is\n           Task_Definition     => Relocate_Node (Task_Definition (N)),\n           Interface_List      => Interface_List (N));\n \n-      --  Ada 2005 (AI-399): Mark the object as aliased. Required to use\n-      --  the attribute 'access\n-\n       O_Decl :=\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => O_Name,\n-          Aliased_Present     => Ada_Version >= Ada_05,\n           Object_Definition   => Make_Identifier (Loc, Chars (T)));\n \n       Rewrite (N, T_Decl);\n       Insert_After (N, O_Decl);\n       Mark_Rewrite_Insertion (O_Decl);\n \n-      --  Enter names of type and object before analysis, because the name\n-      --  of the object may be used in its own body.\n+      --  Enter names of type and object before analysis, because the name of\n+      --  the object may be used in its own body.\n \n       Enter_Name (T);\n       Set_Ekind (T, E_Task_Type);\n@@ -1685,9 +1700,9 @@ package body Sem_Ch9 is\n       Set_Ekind (O_Name, E_Variable);\n       Set_Etype (O_Name, T);\n \n-      --  Instead of calling Analyze on the new node,  call directly\n-      --  the proper analysis procedure. Otherwise the node would be\n-      --  expanded twice, with disastrous result.\n+      --  Instead of calling Analyze on the new node, call the proper analysis\n+      --  procedure directly. Otherwise the node would be expanded twice, with\n+      --  disastrous result.\n \n       Analyze_Task_Type (N);\n    end Analyze_Single_Task;\n@@ -1701,14 +1716,14 @@ package body Sem_Ch9 is\n       Last_E  : Entity_Id;\n \n       Spec_Id : Entity_Id;\n-      --  This is initially the entity of the task or task type involved,\n-      --  but is replaced by the task type always in the case of a single\n-      --  task declaration, since this is the proper scope to be used.\n+      --  This is initially the entity of the task or task type involved, but\n+      --  is replaced by the task type always in the case of a single task\n+      --  declaration, since this is the proper scope to be used.\n \n       Ref_Id : Entity_Id;\n-      --  This is the entity of the task or task type, and is the entity\n-      --  used for cross-reference purposes (it differs from Spec_Id in\n-      --  the case of a single task, since Spec_Id is set to the task type)\n+      --  This is the entity of the task or task type, and is the entity used\n+      --  for cross-reference purposes (it differs from Spec_Id in the case of\n+      --  a single task, since Spec_Id is set to the task type)\n \n    begin\n       Tasking_Used := True;\n@@ -1765,9 +1780,9 @@ package body Sem_Ch9 is\n \n       Analyze_Declarations (Declarations (N));\n \n-      --  For visibility purposes, all entities in the body are private.\n-      --  Set First_Private_Entity accordingly, if there was no private\n-      --  part in the protected declaration.\n+      --  For visibility purposes, all entities in the body are private. Set\n+      --  First_Private_Entity accordingly, if there was no private part in the\n+      --  protected declaration.\n \n       if No (First_Private_Entity (Spec_Id)) then\n          if Present (Last_E) then\n@@ -1909,6 +1924,35 @@ package body Sem_Ch9 is\n \n             Next (Iface);\n          end loop;\n+\n+         --  If this is the full-declaration associated with a private\n+         --  declaration that implement interfaces, then the private\n+         --  type declaration must be limited.\n+\n+         if Has_Private_Declaration (T) then\n+            declare\n+               E : Entity_Id;\n+\n+            begin\n+               E := First_Entity (Scope (T));\n+               loop\n+                  pragma Assert (Present (E));\n+\n+                  if Is_Type (E) and then Present (Full_View (E)) then\n+                     exit when Full_View (E) = T;\n+                  end if;\n+\n+                  Next_Entity (E);\n+               end loop;\n+\n+               if not Is_Limited_Record (E) then\n+                  Error_Msg_Sloc := Sloc (E);\n+                  Error_Msg_N\n+                    (\"(Ada 2005) private type declaration # must be limited\",\n+                     T);\n+               end if;\n+            end;\n+         end if;\n       end if;\n \n       if Present (Discriminant_Specifications (N)) then\n@@ -2338,9 +2382,9 @@ package body Sem_Ch9 is\n             Next (Decl);\n          end loop;\n \n-      --  The protected or task type is not implementing an interface,\n-      --  we need to check for the presence of \"overriding\" entries or\n-      --  subprograms and flag them as erroneous.\n+      --  The protected or task type is not implementing an interface, we need\n+      --  to check for the presence of \"overriding\" entries or subprograms and\n+      --  flag them as erroneous.\n \n       else\n          Decl := First (Vis_Decls);\n@@ -2388,7 +2432,6 @@ package body Sem_Ch9 is\n    procedure Install_Declarations (Spec : Entity_Id) is\n       E    : Entity_Id;\n       Prev : Entity_Id;\n-\n    begin\n       E := First_Entity (Spec);\n       while Present (E) loop"}]}