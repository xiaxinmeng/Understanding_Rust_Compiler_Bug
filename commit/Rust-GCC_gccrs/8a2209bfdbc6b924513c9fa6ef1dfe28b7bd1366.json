{"sha": "8a2209bfdbc6b924513c9fa6ef1dfe28b7bd1366", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGEyMjA5YmZkYmM2YjkyNDUxM2M5ZmE2ZWYxZGZlMjhiN2JkMTM2Ng==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2005-08-18T16:42:25Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2005-08-18T16:42:25Z"}, "message": "sh.c (sh_gimplify_va_arg_expr): Loop to substitute a RECORD_TYPE record with the type of its only member.\n\n\t* sh.c (sh_gimplify_va_arg_expr): Loop to substitute a RECORD_TYPE\n\trecord with the type of its only member.\n\nFrom-SVN: r103254", "tree": {"sha": "126ac22eefdcfbbcbf1a06b8c653104b52bf281e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/126ac22eefdcfbbcbf1a06b8c653104b52bf281e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a2209bfdbc6b924513c9fa6ef1dfe28b7bd1366", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a2209bfdbc6b924513c9fa6ef1dfe28b7bd1366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a2209bfdbc6b924513c9fa6ef1dfe28b7bd1366", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a2209bfdbc6b924513c9fa6ef1dfe28b7bd1366/comments", "author": null, "committer": null, "parents": [{"sha": "1e24ce8318a4c3bd747d76a5178e0a807b31d2ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e24ce8318a4c3bd747d76a5178e0a807b31d2ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e24ce8318a4c3bd747d76a5178e0a807b31d2ed"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "65af73ff27b9a97fcfac2a46b01e69ee2d94a03b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a2209bfdbc6b924513c9fa6ef1dfe28b7bd1366/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a2209bfdbc6b924513c9fa6ef1dfe28b7bd1366/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a2209bfdbc6b924513c9fa6ef1dfe28b7bd1366", "patch": "@@ -1,3 +1,8 @@\n+2005-08-18  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\t* sh.c (sh_gimplify_va_arg_expr): Loop to substitute a RECORD_TYPE\n+\trecord with the type of its only member.\n+\n 2005-08-18  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.md (ltu<mode>_compare): Convert to\n@@ -81,6 +86,9 @@\n \n 2005-08-17  J\"orn Rennecke <joern.rennecke@st.com>\n \n+\t* sh.c (sh_gimplify_va_arg_expr): Don't substitute a RECORD_TYPE\n+\trecord with the type of its only member if the modes don't match.\n+\n \t* varasm.c (decode_reg_name): Skip empty additional register names.\n \n 2005-08-16  Zdenek Dvorak  <dvorakz@suse.cz>"}, {"sha": "ed132f6c82dae258e08d5ad29ef05f0327760171", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a2209bfdbc6b924513c9fa6ef1dfe28b7bd1366/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a2209bfdbc6b924513c9fa6ef1dfe28b7bd1366/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=8a2209bfdbc6b924513c9fa6ef1dfe28b7bd1366", "patch": "@@ -6678,20 +6678,24 @@ sh_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n       /* Structures with a single member with a distinct mode are passed\n \t like their member.  This is relevant if the latter has a REAL_TYPE\n \t or COMPLEX_TYPE type.  */\n-      if (TREE_CODE (type) == RECORD_TYPE\n-\t  && TYPE_FIELDS (type)\n-\t  && TREE_CODE (TYPE_FIELDS (type)) == FIELD_DECL\n-\t  && (TREE_CODE (TREE_TYPE (TYPE_FIELDS (type))) == REAL_TYPE\n-\t      || TREE_CODE (TREE_TYPE (TYPE_FIELDS (type))) == COMPLEX_TYPE)\n-          && TREE_CHAIN (TYPE_FIELDS (type)) == NULL_TREE)\n+      while (TREE_CODE (type) == RECORD_TYPE\n+\t     && TYPE_FIELDS (type)\n+\t     && TREE_CODE (TYPE_FIELDS (type)) == FIELD_DECL\n+\t     && (TREE_CODE (TREE_TYPE (TYPE_FIELDS (type))) == REAL_TYPE\n+\t\t || TREE_CODE (TREE_TYPE (TYPE_FIELDS (type))) == COMPLEX_TYPE\n+\t\t || TREE_CODE (TREE_TYPE (TYPE_FIELDS (type))) == RECORD_TYPE)\n+             && TREE_CHAIN (TYPE_FIELDS (type)) == NULL_TREE)\n \t{\n \t  tree field_type = TREE_TYPE (TYPE_FIELDS (type));\n \n \t  if (TYPE_MODE (type) == TYPE_MODE (field_type))\n \t    type = field_type;\n \t  else\n-\t    gcc_assert (TYPE_ALIGN (type)\n-\t\t\t< GET_MODE_ALIGNMENT (TYPE_MODE (field_type)));\n+\t    {\n+\t      gcc_assert (TYPE_ALIGN (type)\n+\t\t\t  < GET_MODE_ALIGNMENT (TYPE_MODE (field_type)));\n+\t    break;\n+\t    }\n \t}\n \n       if (TARGET_SH4)"}]}