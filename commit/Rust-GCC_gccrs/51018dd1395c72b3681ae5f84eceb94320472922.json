{"sha": "51018dd1395c72b3681ae5f84eceb94320472922", "node_id": "C_kwDOANBUbNoAKDUxMDE4ZGQxMzk1YzcyYjM2ODFhZTVmODRlY2ViOTQzMjA0NzI5MjI", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-09-27T20:01:10Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-09-27T20:01:10Z"}, "message": "c++: deduction guides and ttp rewriting [PR102479]\n\nThe problem here is ultimately that rewrite_tparm_list when rewriting a\nTEMPLATE_TEMPLATE_PARM introduces a tree cycle in the rewritten\nttp that structural_comptypes can't cope with.  In particular the\nDECL_TEMPLATE_PARMS of a ttp's TEMPLATE_DECL normally captures an empty\nparameter list at its own level (and so the TEMPLATE_DECL doesn't appear\nin its own DECL_TEMPLATE_PARMS), but rewrite_tparm_list ends up giving\nit a complete parameter list.  In the new testcase below, this causes\ninfinite recursion from structural_comptypes when comparing Tmpl<char>\nwith Tmpl<long> (where both 'Tmpl's are rewritten ttps).\n\nThis patch fixes this by making rewrite_template_parm give a rewritten\ntemplate template parm an empty parameter list at its own level, thereby\navoiding the tree cycle.  Testing the alias CTAD case revealed that\nwe're not setting current_template_parms in alias_ctad_tweaks, which\nthis patch also fixes.\n\n\tPR c++/102479\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (rewrite_template_parm): Handle single-level tsubst_args.\n\tAvoid a tree cycle when assigning the DECL_TEMPLATE_PARMS for a\n\trewritten ttp.\n\t(alias_ctad_tweaks): Set current_template_parms accordingly.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/class-deduction12.C: Also test alias CTAD in the\n\tsame way.\n\t* g++.dg/cpp1z/class-deduction99.C: New test.", "tree": {"sha": "7715eb2e871b7c6b827dd40b6c66728e489942aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7715eb2e871b7c6b827dd40b6c66728e489942aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51018dd1395c72b3681ae5f84eceb94320472922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51018dd1395c72b3681ae5f84eceb94320472922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51018dd1395c72b3681ae5f84eceb94320472922", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51018dd1395c72b3681ae5f84eceb94320472922/comments", "author": null, "committer": null, "parents": [{"sha": "83668368607ac70dcce466a54673bbf88d0ab2da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83668368607ac70dcce466a54673bbf88d0ab2da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83668368607ac70dcce466a54673bbf88d0ab2da"}], "stats": {"total": 61, "additions": 58, "deletions": 3}, "files": [{"sha": "41fa7ed5e43e820b0aacdc52af48a18860d15972", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51018dd1395c72b3681ae5f84eceb94320472922/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51018dd1395c72b3681ae5f84eceb94320472922/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=51018dd1395c72b3681ae5f84eceb94320472922", "patch": "@@ -28754,7 +28754,7 @@ rewrite_template_parm (tree olddecl, unsigned index, unsigned level,\n \t  const int depth = TMPL_ARGS_DEPTH (tsubst_args);\n \t  tree ttargs = make_tree_vec (depth + 1);\n \t  for (int i = 0; i < depth; ++i)\n-\t    TREE_VEC_ELT (ttargs, i) = TREE_VEC_ELT (tsubst_args, i);\n+\t    TREE_VEC_ELT (ttargs, i) = TMPL_ARGS_LEVEL (tsubst_args, i + 1);\n \t  TREE_VEC_ELT (ttargs, depth)\n \t    = template_parms_level_to_args (ttparms);\n \t  // Substitute ttargs into ttparms to fix references to\n@@ -28767,8 +28767,17 @@ rewrite_template_parm (tree olddecl, unsigned index, unsigned level,\n \t  ttparms = tsubst_template_parms_level (ttparms, ttargs,\n \t\t\t\t\t\t complain);\n \t  // Finally, tack the adjusted parms onto tparms.\n-\t  ttparms = tree_cons (size_int (depth), ttparms,\n-\t\t\t       current_template_parms);\n+\t  ttparms = tree_cons (size_int (level + 1), ttparms,\n+\t\t\t       copy_node (current_template_parms));\n+\t  // As with all template template parms, the parameter list captured\n+\t  // by this template template parm that corresponds to its own level\n+\t  // should be empty.  This avoids infinite recursion when structurally\n+\t  // comparing two such rewritten template template parms (PR102479).\n+\t  gcc_assert (!TREE_VEC_LENGTH\n+\t\t      (TREE_VALUE (TREE_CHAIN (DECL_TEMPLATE_PARMS (olddecl)))));\n+\t  gcc_assert (TMPL_PARMS_DEPTH (TREE_CHAIN (ttparms)) == level);\n+\t  TREE_VALUE (TREE_CHAIN (ttparms)) = make_tree_vec (0);\n+\t  // All done.\n \t  DECL_TEMPLATE_PARMS (newdecl) = ttparms;\n \t}\n     }\n@@ -29266,6 +29275,11 @@ alias_ctad_tweaks (tree tmpl, tree uguides)\n \t      ++ndlen;\n \t  tree gtparms = make_tree_vec (natparms + ndlen);\n \n+\t  /* Set current_template_parms as in build_deduction_guide.  */\n+\t  auto ctp = make_temp_override (current_template_parms);\n+\t  current_template_parms = copy_node (DECL_TEMPLATE_PARMS (tmpl));\n+\t  TREE_VALUE (current_template_parms) = gtparms;\n+\n \t  /* First copy over the parms of A.  */\n \t  for (j = 0; j < natparms; ++j)\n \t    TREE_VEC_ELT (gtparms, j) = TREE_VEC_ELT (atparms, j);"}, {"sha": "f0d7ea0e16bb516c6d71ad46eb8bacce1c986de9", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction12.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51018dd1395c72b3681ae5f84eceb94320472922/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51018dd1395c72b3681ae5f84eceb94320472922/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction12.C?ref=51018dd1395c72b3681ae5f84eceb94320472922", "patch": "@@ -15,3 +15,9 @@ A a(&i,2,B<42>());\n template <class,class> class same;\n template <class T> class same<T,T> {};\n same<decltype(a), A<int*>> s;\n+\n+#if __cpp_deduction_guides >= 201907\n+template <class T> using C = A<const T*>;\n+\n+same<decltype(C(&i, 2, B<42>())), A<const int*>> t;\n+#endif"}, {"sha": "6daa4b7c55cc808c29add492d5725861905af65e", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction99.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51018dd1395c72b3681ae5f84eceb94320472922/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction99.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51018dd1395c72b3681ae5f84eceb94320472922/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction99.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction99.C?ref=51018dd1395c72b3681ae5f84eceb94320472922", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/102479\n+// { dg-do compile { target c++17 } }\n+\n+template<class T> struct A;\n+\n+template<class T>\n+struct tuple {\n+  tuple(T);\n+\n+  template<template<class> class Tmpl>\n+  tuple(Tmpl<T>);\n+\n+  template<template<class> class Tmpl, typename A<Tmpl<char>>::type = 0>\n+  tuple(Tmpl<T>);\n+\n+  template<template<class> class Tmpl, typename A<Tmpl<long>>::type = 0>\n+  tuple(Tmpl<T>);\n+};\n+\n+template<class T> struct B { };\n+\n+using ty1 = tuple<int>;\n+using ty1 = decltype(tuple(0));\n+using ty1 = decltype(tuple(B<int>{}));\n+\n+#if __cpp_deduction_guides >= 201907\n+template<class T> using const_tuple = tuple<const T>;\n+\n+using ty2 = const_tuple<int>;\n+using ty2 = decltype(const_tuple(0));\n+using ty2 = decltype(const_tuple(B<const int>{}));\n+\n+using ty3 = const_tuple<B<int>>;\n+using ty3 = decltype(const_tuple(B<int>{}));\n+#endif"}]}