{"sha": "d44963af3cca13f72aa04415e380750d1ba3fc78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ0OTYzYWYzY2NhMTNmNzJhYTA0NDE1ZTM4MDc1MGQxYmEzZmM3OA==", "commit": {"author": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2006-11-21T20:35:57Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2006-11-21T20:35:57Z"}, "message": "decLibrary.c (__dec_type_swap): Add prototype.\n\ndecnumber/\n\t* decLibrary.c (__dec_type_swap): Add prototype.\n\t(__dfp_enable_traps, dfp_raise): Delete.\ngcc/\n\t* config/dfp-bit.h (CONTEXT_TRAPS, CONTEXT_ERRORS, DFP_RAISE): Delete.\n\t* config/dfp-bit.c (dfp_unary_op, dfp_binary_op, dfp_compare_op,\n\tDFP_TO_DFP, INT_TO_DFP, BFP_TO_DFP): Remove calls to DFP_RAISE.\ntestsuite/\n\t* gcc.dg/dfp/snan.c: Delete.\n\nFrom-SVN: r119068", "tree": {"sha": "4948a3e9be46d72766ccdee0bb2914089d321323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4948a3e9be46d72766ccdee0bb2914089d321323"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d44963af3cca13f72aa04415e380750d1ba3fc78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d44963af3cca13f72aa04415e380750d1ba3fc78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d44963af3cca13f72aa04415e380750d1ba3fc78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d44963af3cca13f72aa04415e380750d1ba3fc78/comments", "author": null, "committer": null, "parents": [{"sha": "0e07f2003e0398e554d1f7ee4b58f3946fb9fbb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e07f2003e0398e554d1f7ee4b58f3946fb9fbb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e07f2003e0398e554d1f7ee4b58f3946fb9fbb7"}], "stats": {"total": 79, "additions": 13, "deletions": 66}, "files": [{"sha": "74c98548750ba0931bc3881d1dc18fa7053ee5c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d44963af3cca13f72aa04415e380750d1ba3fc78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d44963af3cca13f72aa04415e380750d1ba3fc78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d44963af3cca13f72aa04415e380750d1ba3fc78", "patch": "@@ -1,5 +1,9 @@\n 2006-11-21  Janis Johnson  <janis187@us.ibm.com>\n \n+\t* config/dfp-bit.h (CONTEXT_TRAPS, CONTEXT_ERRORS, DFP_RAISE): Delete.\n+\t* config/dfp-bit.c (dfp_unary_op, dfp_binary_op, dfp_compare_op,\n+\tDFP_TO_DFP, INT_TO_DFP, BFP_TO_DFP): Remove calls to DFP_RAISE.\n+\n \t* config/dfp-bit.c (dfp_binary_func): Fix typedef.\n \n 2006-11-21  Douglas Gregor <doug.gregor@gmail.com>"}, {"sha": "fafe7dc1a2dcb2293d512853b9169fd6d21b2e01", "filename": "gcc/config/dfp-bit.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d44963af3cca13f72aa04415e380750d1ba3fc78/gcc%2Fconfig%2Fdfp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d44963af3cca13f72aa04415e380750d1ba3fc78/gcc%2Fconfig%2Fdfp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdfp-bit.c?ref=d44963af3cca13f72aa04415e380750d1ba3fc78", "patch": "@@ -88,9 +88,6 @@ dfp_unary_op (dfp_unary_func op, DFP_C_TYPE arg)\n   /* Perform the operation.  */\n   op (&res, &arg1, &context);\n \n-  if (CONTEXT_TRAPS && CONTEXT_ERRORS (context))\n-    DFP_RAISE (0);\n-\n   TO_ENCODED (&encoded_result, &res, &context);\n   IEEE_TO_HOST (encoded_result, &result);\n   return result;\n@@ -118,9 +115,6 @@ dfp_binary_op (dfp_binary_func op, DFP_C_TYPE arg_a, DFP_C_TYPE arg_b)\n   /* Perform the operation.  */\n   op (&res, &arg1, &arg2, &context);\n \n-  if (CONTEXT_TRAPS && CONTEXT_ERRORS (context))\n-    DFP_RAISE (0);\n-\n   TO_ENCODED (&encoded_result, &res, &context);\n   IEEE_TO_HOST (encoded_result, &result);\n   return result;\n@@ -148,9 +142,6 @@ dfp_compare_op (dfp_binary_func op, DFP_C_TYPE arg_a, DFP_C_TYPE arg_b)\n   /* Perform the comparison.  */\n   op (&res, &arg1, &arg2, &context);\n \n-  if (CONTEXT_TRAPS && CONTEXT_ERRORS (context))\n-    DFP_RAISE (0);\n-\n   if (decNumberIsNegative (&res))\n     result = -1;\n   else if (decNumberIsZero (&res))\n@@ -379,8 +370,6 @@ DFP_TO_DFP (DFP_C_TYPE f_from)\n   HOST_TO_IEEE (f_from, &s_from);\n   TO_INTERNAL (&s_from, &d);\n   TO_ENCODED_TO (&s_to, &d, &context);\n-  if (CONTEXT_TRAPS && (context.status & DEC_Inexact) != 0)\n-    DFP_RAISE (DEC_Inexact);\n \n   IEEE_TO_HOST_TO (s_to, &f_to);\n   return f_to;\n@@ -469,8 +458,6 @@ INT_TO_DFP (INT_TYPE i)\n   /* Convert from the floating point string to a decimal* type.  */\n   FROM_STRING (&s, buf, &context);\n   IEEE_TO_HOST (s, &f);\n-  if (CONTEXT_TRAPS && (context.status & DEC_Inexact) != 0)\n-    DFP_RAISE (DEC_Inexact);\n   return f;\n }\n #endif\n@@ -519,8 +506,6 @@ BFP_TO_DFP (BFP_TYPE x)\n   /* Convert from the floating point string to a decimal* type.  */\n   FROM_STRING (&s, buf, &context);\n   IEEE_TO_HOST (s, &f);\n-  if (CONTEXT_TRAPS && (context.status & DEC_Inexact) != 0)\n-    DFP_RAISE (DEC_Inexact);\n   return f;\n }\n #endif"}, {"sha": "dfad7d308b13efb56743b441111cb067cba7f7e9", "filename": "gcc/config/dfp-bit.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d44963af3cca13f72aa04415e380750d1ba3fc78/gcc%2Fconfig%2Fdfp-bit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d44963af3cca13f72aa04415e380750d1ba3fc78/gcc%2Fconfig%2Fdfp-bit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdfp-bit.h?ref=d44963af3cca13f72aa04415e380750d1ba3fc78", "patch": "@@ -118,12 +118,6 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n extern enum rounding\t__decGetRound (void);\n #define CONTEXT_ROUND\t__decGetRound ()\n \n-extern int __dfp_traps;\n-#define CONTEXT_TRAPS\t__dfp_traps\n-#define CONTEXT_ERRORS(context)\tcontext.status & DEC_Errors\n-extern void __dfp_raise (int);\n-#define DFP_RAISE(A)\t__dfp_raise(A)\n-\n /* Conversions between different decimal float types use WIDTH_TO to\n    determine additional macros to define.  */\n "}, {"sha": "fc8a3ed5bf1680525f4418ab4f4730a6c787f433", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d44963af3cca13f72aa04415e380750d1ba3fc78/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d44963af3cca13f72aa04415e380750d1ba3fc78/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d44963af3cca13f72aa04415e380750d1ba3fc78", "patch": "@@ -1,4 +1,8 @@\n-2006-11-21      Douglas Gregor <doug.gregor@gmail.com>\n+2006-11-21  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* gcc.dg/dfp/snan.c: Delete.\n+\n+2006-11-21  Douglas Gregor  <doug.gregor@gmail.com>\n \n         * g++.dg/cpp0x/static_assert1.C: New.\n         * g++.dg/cpp0x/static_assert2.C: New."}, {"sha": "efc6e70ee83bb631e37823dbd1ea8b7ad164ed9b", "filename": "gcc/testsuite/gcc.dg/dfp/snan.c", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e07f2003e0398e554d1f7ee4b58f3946fb9fbb7/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fsnan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e07f2003e0398e554d1f7ee4b58f3946fb9fbb7/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fsnan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fsnan.c?ref=0e07f2003e0398e554d1f7ee4b58f3946fb9fbb7", "patch": "@@ -1,28 +0,0 @@\n-/* { dg-options \"\" } */\n-\n-/* FIXME: this test needs to be conditional to systems with POSIX signals.  */\n-\n-#include <signal.h>\n-\n-extern void exit(int status);\n-extern void abort(void);\n-\n-void go_quietly (int arg)\n-{\n-  exit (0);\n-}\n-\n-int main()\n-{\n-  _Decimal32 d = 1.5df;\n-\n-  /* Enable signaling NaNs using a scaffolding libgcc function.  */\n-  __dfp_enable_traps ();\n-  signal (SIGFPE, go_quietly);\n-\n-  d = d / 0.0df;\n-\n-  /* Never reached.  */\n-  abort ();\n-  return 0;\n-}"}, {"sha": "0068a92bfade1f69915cedc315dc84ea85bcf462", "filename": "libdecnumber/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d44963af3cca13f72aa04415e380750d1ba3fc78/libdecnumber%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d44963af3cca13f72aa04415e380750d1ba3fc78/libdecnumber%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FChangeLog?ref=d44963af3cca13f72aa04415e380750d1ba3fc78", "patch": "@@ -1,5 +1,8 @@\n 2006-11-21  Janis Johnson  <janis187@us.ibm.com>\n \n+\t* decLibrary.c (__dec_type_swap): Add prototype.\n+\t(__dfp_enable_traps, dfp_raise): Delete.\n+\n \t* Makefile.in: Don't include decRound in library used by compiler.\n \n 2006-10-10  Brooks Moses  <bmoses@stanford.edu> "}, {"sha": "f757ffa67d0ff05519fdcb44eb65627b7033f0e7", "filename": "libdecnumber/decLibrary.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d44963af3cca13f72aa04415e380750d1ba3fc78/libdecnumber%2FdecLibrary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d44963af3cca13f72aa04415e380750d1ba3fc78/libdecnumber%2FdecLibrary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FdecLibrary.c?ref=d44963af3cca13f72aa04415e380750d1ba3fc78", "patch": "@@ -31,8 +31,7 @@ void __host_to_ieee_128 (_Decimal128, decimal128 *);\n extern int isinfd32 (_Decimal32);\n extern int isinfd64 (_Decimal64);\n extern int isinfd128 (_Decimal128);\n-extern void __dfp_enable_traps (void);\n-extern void __dfp_raise (int exception __attribute__ ((unused)));\n+uint32_t __dec_byte_swap (uint32_t);\n \n int\n isinfd32 (_Decimal32 arg)\n@@ -67,20 +66,6 @@ isinfd128 (_Decimal128 arg)\n   return (decNumberIsInfinite (&dn));\n }\n \n-int __dfp_traps;\n-\n-void\n-__dfp_enable_traps (void)\n-{\n-  __dfp_traps = 1;\n-}\n-\n-void\n-__dfp_raise (int exception __attribute__ ((unused)))\n-{\n-  raise (SIGFPE);\n-}\n-\n uint32_t\n __dec_byte_swap (uint32_t in)\n {"}]}