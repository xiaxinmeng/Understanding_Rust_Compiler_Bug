{"sha": "f56013e5416cfddd5078e49df50f2a2db187392a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU2MDEzZTU0MTZjZmRkZDUwNzhlNDlkZjUwZjJhMmRiMTg3MzkyYQ==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2016-12-19T20:08:31Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2016-12-19T20:08:31Z"}, "message": "cpp.texi: Clean up anachronistic C99 references and remove discussion of very old GCC...\n\n2016-12-19  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/cpp.texi: Clean up anachronistic C99 references and remove \n\tdiscussion of very old GCC versions.\n\t(Differences from previous versions): Delete entire section.\n\nFrom-SVN: r243810", "tree": {"sha": "90aae957b85b6f84d5ccf0b51791358e220441a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90aae957b85b6f84d5ccf0b51791358e220441a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f56013e5416cfddd5078e49df50f2a2db187392a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f56013e5416cfddd5078e49df50f2a2db187392a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f56013e5416cfddd5078e49df50f2a2db187392a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f56013e5416cfddd5078e49df50f2a2db187392a/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e51f5a55fbc88e2839a7710247ec6b3ddd76937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e51f5a55fbc88e2839a7710247ec6b3ddd76937", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e51f5a55fbc88e2839a7710247ec6b3ddd76937"}], "stats": {"total": 271, "additions": 52, "deletions": 219}, "files": [{"sha": "69ef89b0e30fb3d861208e08a22cf46301702f3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56013e5416cfddd5078e49df50f2a2db187392a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56013e5416cfddd5078e49df50f2a2db187392a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f56013e5416cfddd5078e49df50f2a2db187392a", "patch": "@@ -1,3 +1,9 @@\n+2016-12-19  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/cpp.texi: Clean up anachronistic C99 references and remove \n+\tdiscussion of very old GCC versions.\n+\t(Differences from previous versions): Delete entire section.\n+\n 2016-12-19  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add handling for"}, {"sha": "7348448f497268eef4da49e7164cd640f8b3ffd2", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 46, "deletions": 219, "changes": 265, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f56013e5416cfddd5078e49df50f2a2db187392a/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f56013e5416cfddd5078e49df50f2a2db187392a/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=f56013e5416cfddd5078e49df50f2a2db187392a", "patch": "@@ -163,7 +163,6 @@ Implementation Details\n * Implementation-defined behavior::\n * Implementation limits::\n * Obsolete Features::\n-* Differences from previous versions::\n \n Obsolete Features\n \n@@ -523,8 +522,8 @@ with an optional period, a required decimal digit, and then continue\n with any sequence of letters, digits, underscores, periods, and\n exponents.  Exponents are the two-character sequences @samp{e+},\n @samp{e-}, @samp{E+}, @samp{E-}, @samp{p+}, @samp{p-}, @samp{P+}, and\n-@samp{P-}.  (The exponents that begin with @samp{p} or @samp{P} are new\n-to C99.  They are used for hexadecimal floating-point constants.)\n+@samp{P-}.  (The exponents that begin with @samp{p} or @samp{P} are \n+used for hexadecimal floating-point constants.)\n \n The purpose of this unusual definition is to isolate the preprocessor\n from the full complexity of numeric constants.  It does not have to\n@@ -562,10 +561,8 @@ closing quote or angle bracket.  The preprocessor looks for the header\n file in different places depending on which form you use.  @xref{Include\n Operation}.\n \n-No string literal may extend past the end of a line.  Older versions\n-of GCC accepted multi-line string constants.  You may use continued\n-lines instead, or string constant concatenation.  @xref{Differences\n-from previous versions}.\n+No string literal may extend past the end of a line.  You may use continued\n+lines instead, or string constant concatenation.\n \n @cindex punctuators\n @cindex digraphs\n@@ -1754,39 +1751,23 @@ eprintf (\"success!\\n\")\n The above explanation is ambiguous about the case where the only macro\n parameter is a variable arguments parameter, as it is meaningless to\n try to distinguish whether no argument at all is an empty argument or\n-a missing argument.  In this case the C99 standard is clear that the\n-comma must remain, however the existing GCC extension used to swallow\n-the comma.  So CPP retains the comma when conforming to a specific C\n-standard, and drops it otherwise.\n+a missing argument.  \n+CPP retains the comma when conforming to a specific C\n+standard.  Otherwise the comma is dropped as an extension to the standard.\n \n-C99 mandates that the only place the identifier @code{@w{__VA_ARGS__}}\n+The C standard \n+mandates that the only place the identifier @code{@w{__VA_ARGS__}}\n can appear is in the replacement list of a variadic macro.  It may not\n be used as a macro name, macro argument name, or within a different type\n of macro.  It may also be forbidden in open text; the standard is\n ambiguous.  We recommend you avoid using it except for its defined\n purpose.\n \n-Variadic macros are a new feature in C99.  GNU CPP has supported them\n-for a long time, but only with a named variable argument\n-(@samp{args@dots{}}, not @samp{@dots{}} and @code{@w{__VA_ARGS__}}).  If you are\n-concerned with portability to previous versions of GCC, you should use\n-only named variable arguments.  On the other hand, if you are concerned\n-with portability to other conforming implementations of C99, you should\n-use only @code{@w{__VA_ARGS__}}.\n-\n-Previous versions of CPP implemented the comma-deletion extension\n-much more generally.  We have restricted it in this release to minimize\n-the differences from C99.  To get the same effect with both this and\n-previous versions of GCC, the token preceding the special @samp{##} must\n-be a comma, and there must be white space between that comma and\n-whatever comes immediately before it:\n-\n-@smallexample\n-#define eprintf(format, args@dots{}) fprintf (stderr, format , ##args)\n-@end smallexample\n-\n-@noindent\n-@xref{Differences from previous versions}, for the gory details.\n+Variadic macros became a standard part of the C language with C99.  \n+GNU CPP previously supported them\n+with a named variable argument\n+(@samp{args@dots{}}, not @samp{@dots{}} and @code{@w{__VA_ARGS__}}), which\n+is still supported for backward compatibility.\n \n @node Predefined Macros\n @section Predefined Macros\n@@ -1854,7 +1835,7 @@ processing moves to the line after the @samp{#include}).\n A @samp{#line} directive changes @code{__LINE__}, and may change\n @code{__FILE__} as well.  @xref{Line Control}.\n \n-C99 introduces @code{__func__}, and GCC has provided @code{__FUNCTION__}\n+C99 introduced @code{__func__}, and GCC has provided @code{__FUNCTION__}\n for a long time.  Both of these are strings containing the name of the\n current function (there are slight semantic differences; see the GCC\n manual).  Neither of them is a macro; the preprocessor does not know the\n@@ -1971,14 +1952,11 @@ The GNU Fortran compiler defines this.\n These macros are defined by all GNU compilers that use the C\n preprocessor: C, C++, Objective-C and Fortran.  Their values are the major\n version, minor version, and patch level of the compiler, as integer\n-constants.  For example, GCC 3.2.1 will define @code{__GNUC__} to 3,\n-@code{__GNUC_MINOR__} to 2, and @code{__GNUC_PATCHLEVEL__} to 1.  These\n+constants.  For example, GCC version @var{x}.@var{y}.@var{z}\n+defines @code{__GNUC__} to @var{x}, @code{__GNUC_MINOR__} to @var{y},\n+and @code{__GNUC_PATCHLEVEL__} to @var{z}.  These\n macros are also defined if you invoke the preprocessor directly.\n \n-@code{__GNUC_PATCHLEVEL__} is new to GCC 3.0; it is also present in the\n-widely-used development snapshots leading up to 3.0 (which identify\n-themselves as GCC 2.96 or 2.97, depending on which snapshot you have).\n-\n If all you need to know is whether or not your program is being compiled\n by GCC, or a non-GCC compiler that claims to accept the GNU C dialects,\n you can simply test @code{__GNUC__}.  If you need to write code\n@@ -2021,9 +1999,8 @@ testing @code{@w{(__GNUC__ && __cplusplus)}}.\n GCC defines this macro if and only if the @option{-ansi} switch, or a\n @option{-std} switch specifying strict conformance to some version of ISO C\n or ISO C++, was specified when GCC was invoked.  It is defined to @samp{1}.\n-This macro exists primarily to direct GNU libc's header files to\n-restrict their definitions to the minimal set found in the 1989 C\n-standard.\n+This macro exists primarily to direct GNU libc's header files to use only\n+definitions found in standard C.\n \n @item __BASE_FILE__\n This macro expands to the name of the main input file, in the form\n@@ -2071,17 +2048,13 @@ definitions of any functions declared @code{extern inline}.\n \n @item __GNUC_STDC_INLINE__\n GCC defines this macro if functions declared @code{inline} will be\n-handled according to the ISO C99 standard.  Object files will contain\n+handled according to the ISO C99 or later standards.  Object files will contain\n externally visible definitions of all functions declared @code{extern\n inline}.  They will not contain definitions of any functions declared\n @code{inline} without @code{extern}.\n \n If this macro is defined, GCC supports the @code{gnu_inline} function\n-attribute as a way to always get the gnu90 behavior.  Support for\n-this and @code{__GNUC_GNU_INLINE__} was added in GCC 4.1.3.  If\n-neither macro is defined, an older version of GCC is being used:\n-@code{inline} functions will be compiled in gnu90 mode, and the\n-@code{gnu_inline} function attribute will not be recognized.\n+attribute as a way to always get the gnu90 behavior.\n \n @item __CHAR_UNSIGNED__\n GCC defines this macro if and only if the data type @code{char} is\n@@ -2600,18 +2573,8 @@ preprocessor will only complain if the definitions do not match.\n \n Occasionally it is convenient to use preprocessor directives within\n the arguments of a macro.  The C and C++ standards declare that\n-behavior in these cases is undefined.\n-\n-Versions of CPP prior to 3.2 would reject such constructs with an\n-error message.  This was the only syntactic difference between normal\n-functions and function-like macros, so it seemed attractive to remove\n-this limitation, and people would often be surprised that they could\n-not use macros in this way.  Moreover, sometimes people would use\n-conditional compilation in the argument list to a normal library\n-function like @samp{printf}, only to find that after a library upgrade\n-@samp{printf} had changed to be a function-like macro, and their code\n-would no longer compile.  So from version 3.2 we changed CPP to\n-successfully process arbitrary directives within macro arguments in\n+behavior in these cases is undefined.  GNU CPP\n+processes arbitrary directives within macro arguments in\n exactly the same way as it would have processed the directive were the\n function-like macro invocation not present.\n \n@@ -3128,9 +3091,6 @@ course, you can only use this to exclude code, not type definitions or\n other preprocessing directives, and you can only do it if the code\n remains syntactically valid when it is not to be used.\n \n-GCC version 3 eliminates this kind of never-executed code even when\n-not optimizing.  Older versions did it only when optimizing.\n-\n @menu\n * Conditional Uses::\n * Conditional Syntax::\n@@ -3560,10 +3520,6 @@ file it specifies, until something else happens to change that.\n constant: backslash escapes are interpreted.  This is different from\n @samp{#include}.\n \n-Previous versions of CPP did not interpret escapes in @samp{#line};\n-we have changed it because the standard requires they be interpreted,\n-and most other compilers do.\n-\n @item #line @var{anything else}\n @var{anything else} is checked for macro calls, which are expanded.\n The result should match one of the above two forms.\n@@ -3572,60 +3528,21 @@ The result should match one of the above two forms.\n @samp{#line} directives alter the results of the @code{__FILE__} and\n @code{__LINE__} predefined macros from that point on.  @xref{Standard\n Predefined Macros}.  They do not have any effect on @samp{#include}'s\n-idea of the directory containing the current file.  This is a change\n-from GCC 2.95.  Previously, a file reading\n-\n-@smallexample\n-#line 1 \"../src/gram.y\"\n-#include \"gram.h\"\n-@end smallexample\n-\n-would search for @file{gram.h} in @file{../src}, then the @option{-I}\n-chain; the directory containing the physical source file would not be\n-searched.  In GCC 3.0 and later, the @samp{#include} is not affected by\n-the presence of a @samp{#line} referring to a different directory.\n-\n-We made this change because the old behavior caused problems when\n-generated source files were transported between machines.  For instance,\n-it is common practice to ship generated parsers with a source release,\n-so that people building the distribution do not need to have yacc or\n-Bison installed.  These files frequently have @samp{#line} directives\n-referring to the directory tree of the system where the distribution was\n-created.  If GCC tries to search for headers in those directories, the\n-build is likely to fail.\n-\n-The new behavior can cause failures too, if the generated file is not\n-in the same directory as its source and it attempts to include a header\n-which would be visible searching from the directory containing the\n-source file.  However, this problem is easily solved with an additional\n-@option{-I} switch on the command line.  The failures caused by the old\n-semantics could sometimes be corrected only by editing the generated\n-files, which is difficult and error-prone.\n+idea of the directory containing the current file.\n \n @node Pragmas\n @chapter Pragmas\n \n The @samp{#pragma} directive is the method specified by the C standard\n for providing additional information to the compiler, beyond what is\n-conveyed in the language itself.  Three forms of this directive\n-(commonly known as @dfn{pragmas}) are specified by the 1999 C standard.\n-A C compiler is free to attach any meaning it likes to other pragmas.\n-\n-GCC has historically preferred to use extensions to the syntax of the\n-language, such as @code{__attribute__}, for this purpose.  However, GCC\n-does define a few pragmas of its own.  These mostly have effects on the\n-entire translation unit or source file.\n-\n-In GCC version 3, all GNU-defined, supported pragmas have been given a\n-@code{GCC} prefix.  This is in line with the @code{STDC} prefix on all\n-pragmas defined by C99.  For backward compatibility, pragmas which were\n-recognized by previous versions are still recognized without the\n-@code{GCC} prefix, but that usage is deprecated.  Some older pragmas are\n-deprecated in their entirety.  They are not recognized with the\n-@code{GCC} prefix.  @xref{Obsolete Features}.\n+conveyed in the language itself.  The forms of this directive\n+(commonly known as @dfn{pragmas}) specified by C standard are prefixed with \n+@code{STDC}.  A C compiler is free to attach any meaning it likes to other \n+pragmas.  All GNU-defined, supported pragmas have been given a\n+@code{GCC} prefix.\n \n @cindex @code{_Pragma}\n-C99 introduces the @code{@w{_Pragma}} operator.  This feature addresses a\n+C99 introduced the @code{@w{_Pragma}} operator.  This feature addresses a\n major problem with @samp{#pragma}: being a directive, it cannot be\n produced as the result of macro expansion.  @code{@w{_Pragma}} is an\n operator, much like @code{sizeof} or @code{defined}, and can be embedded\n@@ -3772,7 +3689,7 @@ to become a single space, with the exception that the first token on a\n non-directive line is preceded with sufficient spaces that it appears in\n the same column in the preprocessed output that it appeared in the\n original source file.  This is so the output is easy to read.\n-@xref{Differences from previous versions}.  CPP does not insert any\n+CPP does not insert any\n whitespace where there was none in the original source, except where\n necessary to prevent an accidental token paste.\n \n@@ -3829,16 +3746,18 @@ the directive name.\n @chapter Traditional Mode\n \n Traditional (pre-standard) C preprocessing is rather different from\n-the preprocessing specified by the standard.  When GCC is given the\n+the preprocessing specified by the standard.  When the preprocessor \n+is invoked with the \n @option{-traditional-cpp} option, it attempts to emulate a traditional\n-preprocessor.\n+preprocessor.  \n \n-GCC versions 3.2 and later only support traditional mode semantics in\n-the preprocessor, and not in the compiler front ends.  This chapter\n-outlines the traditional preprocessor semantics we implemented.\n+This mode is not useful for compiling C code with GCC, \n+but is intended for use with non-C preprocessing applications.  Thus\n+traditional mode semantics are supported only when invoking\n+the preprocessor explicitly, and not in the compiler front ends.\n \n The implementation does not correspond precisely to the behavior of\n-earlier versions of GCC, nor to any true traditional preprocessor.\n+early pre-standard versions of GCC, nor to any true traditional preprocessor.\n After all, inconsistencies among traditional implementations were a\n major motivation for C standardization.  However, we intend that it\n should be compatible with true traditional preprocessors in all ways\n@@ -4105,14 +4024,12 @@ affects its user-visible behavior.  You should try to avoid undue\n reliance on behavior described here, as it is possible that it will\n change subtly in future implementations.\n \n-Also documented here are obsolete features and changes from previous\n-versions of CPP@.\n+Also documented here are obsolete features still supported by CPP@.\n \n @menu\n * Implementation-defined behavior::\n * Implementation limits::\n * Obsolete Features::\n-* Differences from previous versions::\n @end menu\n \n @node Implementation-defined behavior\n@@ -4139,9 +4056,9 @@ be controlled using the @option{-fexec-charset} and\n @anchor{Identifier characters}\n \n The C and C++ standards allow identifiers to be composed of @samp{_}\n-and the alphanumeric characters.  C++ and C99 also allow universal\n-character names, and C99 further permits implementation-defined\n-characters.\n+and the alphanumeric characters.  C++ also allows universal character\n+names.  C99 and later C standards permit both universal character\n+names and implementation-defined characters.\n \n GCC allows the @samp{$} character in identifiers as an extension for\n most targets.  This is true regardless of the @option{std=} switch,\n@@ -4174,8 +4091,8 @@ at a time, shifting the previous value left by the number of bits per\n target character, and then or-ing in the bit-pattern of the new\n character truncated to the width of a target character.  The final\n bit-pattern is given type @code{int}, and is therefore signed,\n-regardless of whether single characters are signed or not (a slight\n-change from versions 3.1 and earlier of GCC)@.  If there are more\n+regardless of whether single characters are signed or not.\n+If there are more\n characters in the constant than would fit in the target @code{int} the\n compiler issues a warning, and the excess leading characters are\n ignored.\n@@ -4363,96 +4280,6 @@ no effect.\n You can also make or cancel assertions using command-line options.\n @xref{Invocation}.\n \n-@node Differences from previous versions\n-@section Differences from previous versions\n-@cindex differences from previous versions\n-\n-This section details behavior which has changed from previous versions\n-of CPP@.  We do not plan to change it again in the near future, but\n-we do not promise not to, either.\n-\n-The ``previous versions'' discussed here are 2.95 and before.  The\n-behavior of GCC 3.0 is mostly the same as the behavior of the widely\n-used 2.96 and 2.97 development snapshots.  Where there are differences,\n-they generally represent bugs in the snapshots.\n-\n-@itemize @bullet\n-\n-@item -I- deprecated\n-\n-This option has been deprecated in 4.0.  @option{-iquote} is meant to\n-replace the need for this option.\n-\n-@item Order of evaluation of @samp{#} and @samp{##} operators\n-\n-The standard does not specify the order of evaluation of a chain of\n-@samp{##} operators, nor whether @samp{#} is evaluated before, after, or\n-at the same time as @samp{##}.  You should therefore not write any code\n-which depends on any specific ordering.  It is possible to guarantee an\n-ordering, if you need one, by suitable use of nested macros.\n-\n-An example of where this might matter is pasting the arguments @samp{1},\n-@samp{e} and @samp{-2}.  This would be fine for left-to-right pasting,\n-but right-to-left pasting would produce an invalid token @samp{e-2}.\n-\n-GCC 3.0 evaluates @samp{#} and @samp{##} at the same time and strictly\n-left to right.  Older versions evaluated all @samp{#} operators first,\n-then all @samp{##} operators, in an unreliable order.\n-\n-@item The form of whitespace between tokens in preprocessor output\n-\n-@xref{Preprocessor Output}, for the current textual format.  This is\n-also the format used by stringification.  Normally, the preprocessor\n-communicates tokens directly to the compiler's parser, and whitespace\n-does not come up at all.\n-\n-Older versions of GCC preserved all whitespace provided by the user and\n-inserted lots more whitespace of their own, because they could not\n-accurately predict when extra spaces were needed to prevent accidental\n-token pasting.\n-\n-@item Optional argument when invoking rest argument macros\n-\n-As an extension, GCC permits you to omit the variable arguments entirely\n-when you use a variable argument macro.  This is forbidden by the 1999 C\n-standard, and will provoke a pedantic warning with GCC 3.0.  Previous\n-versions accepted it silently.\n-\n-@item @samp{##} swallowing preceding text in rest argument macros\n-\n-Formerly, in a macro expansion, if @samp{##} appeared before a variable\n-arguments parameter, and the set of tokens specified for that argument\n-in the macro invocation was empty, previous versions of CPP would\n-back up and remove the preceding sequence of non-whitespace characters\n-(@strong{not} the preceding token).  This extension is in direct\n-conflict with the 1999 C standard and has been drastically pared back.\n-\n-In the current version of the preprocessor, if @samp{##} appears between\n-a comma and a variable arguments parameter, and the variable argument is\n-omitted entirely, the comma will be removed from the expansion.  If the\n-variable argument is empty, or the token before @samp{##} is not a\n-comma, then @samp{##} behaves as a normal token paste.\n-\n-@item @samp{#line} and @samp{#include}\n-\n-The @samp{#line} directive used to change GCC's notion of the\n-``directory containing the current file'', used by @samp{#include} with\n-a double-quoted header file name.  In 3.0 and later, it does not.\n-@xref{Line Control}, for further explanation.\n-\n-@item Syntax of @samp{#line}\n-\n-In GCC 2.95 and previous, the string constant argument to @samp{#line}\n-was treated the same way as the argument to @samp{#include}: backslash\n-escapes were not honored, and the string ended at the second @samp{\"}.\n-This is not compliant with the C standard.  In GCC 3.0, an attempt was\n-made to correct the behavior, so that the string was treated as a real\n-string constant, but it turned out to be buggy.  In 3.1, the bugs have\n-been fixed.  (We are not fixing the bugs in 3.0 because they affect\n-relatively few people and the fix is quite invasive.)\n-\n-@end itemize\n-\n @node Invocation\n @chapter Invocation\n @cindex invocation"}]}