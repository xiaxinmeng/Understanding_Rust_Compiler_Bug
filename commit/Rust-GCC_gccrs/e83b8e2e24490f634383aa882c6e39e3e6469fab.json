{"sha": "e83b8e2e24490f634383aa882c6e39e3e6469fab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgzYjhlMmUyNDQ5MGY2MzQzODNhYTg4MmM2ZTM5ZTNlNjQ2OWZhYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-01-09T18:25:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-01-09T18:25:19Z"}, "message": "re PR target/58115 (testcase gcc.target/i386/intrinsics_4.c failure)\n\n\tPR target/58115\n\t* tree-core.h (struct target_globals): New forward declaration.\n\t(struct tree_target_option): Add globals field.\n\t* tree.h (TREE_TARGET_GLOBALS): Define.\n\t(prepare_target_option_nodes_for_pch): New prototype.\n\t* target-globals.h (struct target_globals): Define even if\n\t!SWITCHABLE_TARGET.\n\t* tree.c (prepare_target_option_node_for_pch,\n\tprepare_target_option_nodes_for_pch): New functions.\n\t* config/i386/i386.h (SWITCHABLE_TARGET): Define.\n\t* config/i386/i386.c: Include target-globals.h.\n\t(ix86_set_current_function): Instead of doing target_reinit\n\tunconditionally, use save_target_globals_default_opts and\n\trestore_target_globals.\nc-family/\n\t* c-pch.c (c_common_write_pch): Call\n\tprepare_target_option_nodes_for_pch.\n\nFrom-SVN: r206478", "tree": {"sha": "37c967d0243784a67a421818ebbbd738909d5f3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37c967d0243784a67a421818ebbbd738909d5f3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e83b8e2e24490f634383aa882c6e39e3e6469fab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e83b8e2e24490f634383aa882c6e39e3e6469fab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e83b8e2e24490f634383aa882c6e39e3e6469fab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e83b8e2e24490f634383aa882c6e39e3e6469fab/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b5f58ba3318e02aeaa60864fe9ae112f41b6d497", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5f58ba3318e02aeaa60864fe9ae112f41b6d497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5f58ba3318e02aeaa60864fe9ae112f41b6d497"}], "stats": {"total": 86, "additions": 80, "deletions": 6}, "files": [{"sha": "dd9f87579d32777ad679df3fddc1778777cae83e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83b8e2e24490f634383aa882c6e39e3e6469fab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83b8e2e24490f634383aa882c6e39e3e6469fab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e83b8e2e24490f634383aa882c6e39e3e6469fab", "patch": "@@ -1,3 +1,20 @@\n+2014-01-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/58115\n+\t* tree-core.h (struct target_globals): New forward declaration.\n+\t(struct tree_target_option): Add globals field.\n+\t* tree.h (TREE_TARGET_GLOBALS): Define.\n+\t(prepare_target_option_nodes_for_pch): New prototype.\n+\t* target-globals.h (struct target_globals): Define even if\n+\t!SWITCHABLE_TARGET.\n+\t* tree.c (prepare_target_option_node_for_pch,\n+\tprepare_target_option_nodes_for_pch): New functions.\n+\t* config/i386/i386.h (SWITCHABLE_TARGET): Define.\n+\t* config/i386/i386.c: Include target-globals.h.\n+\t(ix86_set_current_function): Instead of doing target_reinit\n+\tunconditionally, use save_target_globals_default_opts and\n+\trestore_target_globals.\n+\n 2014-01-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/59715"}, {"sha": "d9b69b32c4191f2233dfa5a2c96d82a6b7cf25ff", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83b8e2e24490f634383aa882c6e39e3e6469fab/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83b8e2e24490f634383aa882c6e39e3e6469fab/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e83b8e2e24490f634383aa882c6e39e3e6469fab", "patch": "@@ -1,3 +1,9 @@\n+2014-01-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/58115\n+\t* c-pch.c (c_common_write_pch): Call\n+\tprepare_target_option_nodes_for_pch.\n+\n 2014-01-02  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tUpdate copyright years"}, {"sha": "93609b610ff12e7a79cd71ca1c67b6c7d436ee4e", "filename": "gcc/c-family/c-pch.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83b8e2e24490f634383aa882c6e39e3e6469fab/gcc%2Fc-family%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83b8e2e24490f634383aa882c6e39e3e6469fab/gcc%2Fc-family%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pch.c?ref=e83b8e2e24490f634383aa882c6e39e3e6469fab", "patch": "@@ -180,6 +180,8 @@ c_common_write_pch (void)\n \n   (*debug_hooks->handle_pch) (1);\n \n+  prepare_target_option_nodes_for_pch ();\n+\n   cpp_write_pch_deps (parse_in, pch_outfile);\n \n   gt_pch_save (pch_outfile);"}, {"sha": "52ad5c13ae3b0c23f6ae5e7ce7d12995b6e91ada", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83b8e2e24490f634383aa882c6e39e3e6469fab/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83b8e2e24490f634383aa882c6e39e3e6469fab/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e83b8e2e24490f634383aa882c6e39e3e6469fab", "patch": "@@ -80,6 +80,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"context.h\"\n #include \"pass_manager.h\"\n+#include \"target-globals.h\"\n \n static rtx legitimize_dllimport_symbol (rtx, bool);\n static rtx legitimize_pe_coff_extern_decl (rtx, bool);\n@@ -4868,16 +4869,25 @@ ix86_set_current_function (tree fndecl)\n \t{\n \t  cl_target_option_restore (&global_options,\n \t\t\t\t    TREE_TARGET_OPTION (new_tree));\n-\t  target_reinit ();\n+\t  if (TREE_TARGET_GLOBALS (new_tree))\n+\t    restore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n+\t  else\n+\t    TREE_TARGET_GLOBALS (new_tree)\n+\t      = save_target_globals_default_opts ();\n \t}\n \n       else if (old_tree)\n \t{\n-\t  struct cl_target_option *def\n-\t    = TREE_TARGET_OPTION (target_option_current_node);\n-\n-\t  cl_target_option_restore (&global_options, def);\n-\t  target_reinit ();\n+\t  new_tree = target_option_current_node;\n+\t  cl_target_option_restore (&global_options,\n+\t\t\t\t    TREE_TARGET_OPTION (new_tree));\n+\t  if (TREE_TARGET_GLOBALS (new_tree))\n+\t    restore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n+\t  else if (new_tree == target_option_default_node)\n+\t    restore_target_globals (&default_target_globals);\n+\t  else\n+\t    TREE_TARGET_GLOBALS (new_tree)\n+\t      = save_target_globals_default_opts ();\n \t}\n     }\n }"}, {"sha": "27151f60ffab2f60ca662879d71909ffa18775a7", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83b8e2e24490f634383aa882c6e39e3e6469fab/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83b8e2e24490f634383aa882c6e39e3e6469fab/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e83b8e2e24490f634383aa882c6e39e3e6469fab", "patch": "@@ -2510,6 +2510,9 @@ extern void debug_dispatch_window (int);\n #define IX86_HLE_ACQUIRE (1 << 16)\n #define IX86_HLE_RELEASE (1 << 17)\n \n+/* For switching between functions with different target attributes.  */\n+#define SWITCHABLE_TARGET 1\n+\n /*\n Local variables:\n version-control: t"}, {"sha": "cc7eeff1d211b8fea37b4060d1cafffc856a50d6", "filename": "gcc/target-globals.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83b8e2e24490f634383aa882c6e39e3e6469fab/gcc%2Ftarget-globals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83b8e2e24490f634383aa882c6e39e3e6469fab/gcc%2Ftarget-globals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.h?ref=e83b8e2e24490f634383aa882c6e39e3e6469fab", "patch": "@@ -37,6 +37,7 @@ extern struct target_builtins *this_target_builtins;\n extern struct target_gcse *this_target_gcse;\n extern struct target_bb_reorder *this_target_bb_reorder;\n extern struct target_lower_subreg *this_target_lower_subreg;\n+#endif\n \n struct GTY(()) target_globals {\n   struct target_flag_state *GTY((skip)) flag_state;\n@@ -57,6 +58,7 @@ struct GTY(()) target_globals {\n   struct target_lower_subreg *GTY((skip)) lower_subreg;\n };\n \n+#if SWITCHABLE_TARGET\n extern struct target_globals default_target_globals;\n \n extern struct target_globals *save_target_globals (void);"}, {"sha": "e548a0dd37d167a1663c90b6de3f85bd80f2f77e", "filename": "gcc/tree-core.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83b8e2e24490f634383aa882c6e39e3e6469fab/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83b8e2e24490f634383aa882c6e39e3e6469fab/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=e83b8e2e24490f634383aa882c6e39e3e6469fab", "patch": "@@ -1557,11 +1557,18 @@ struct GTY(()) tree_optimization_option {\n   struct target_optabs *GTY ((skip)) base_optabs;\n };\n \n+/* Forward declaration, defined in target-globals.h.  */\n+\n+struct GTY(()) target_globals;\n+\n /* Target options used by a function.  */\n \n struct GTY(()) tree_target_option {\n   struct tree_common common;\n \n+  /* Target globals for the corresponding target option.  */\n+  struct target_globals *globals;\n+\n   /* The optimization options used by the user.  */\n   struct cl_target_option opts;\n };"}, {"sha": "37a7ed4b3a0bdc9200049b1090b1f1a09ac78835", "filename": "gcc/tree.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83b8e2e24490f634383aa882c6e39e3e6469fab/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83b8e2e24490f634383aa882c6e39e3e6469fab/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=e83b8e2e24490f634383aa882c6e39e3e6469fab", "patch": "@@ -11527,6 +11527,28 @@ build_target_option_node (struct gcc_options *opts)\n   return t;\n }\n \n+/* Reset TREE_TARGET_GLOBALS cache for TARGET_OPTION_NODE.\n+   Called through htab_traverse.  */\n+\n+static int\n+prepare_target_option_node_for_pch (void **slot, void *)\n+{\n+  tree node = (tree) *slot;\n+  if (TREE_CODE (node) == TARGET_OPTION_NODE)\n+    TREE_TARGET_GLOBALS (node) = NULL;\n+  return 1;\n+}\n+\n+/* Clear TREE_TARGET_GLOBALS of all TARGET_OPTION_NODE trees,\n+   so that they aren't saved during PCH writing.  */\n+\n+void\n+prepare_target_option_nodes_for_pch (void)\n+{\n+  htab_traverse (cl_option_hash_table, prepare_target_option_node_for_pch,\n+\t\t NULL);\n+}\n+\n /* Determine the \"ultimate origin\" of a block.  The block may be an inlined\n    instance of an inlined instance of a block which is local to an inline\n    function, so we have to trace all of the way back through the origin chain"}, {"sha": "8006b5ad29411cc5ada1f0c3105b3f3ec4333ebe", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e83b8e2e24490f634383aa882c6e39e3e6469fab/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e83b8e2e24490f634383aa882c6e39e3e6469fab/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=e83b8e2e24490f634383aa882c6e39e3e6469fab", "patch": "@@ -2695,9 +2695,14 @@ extern tree build_optimization_node (struct gcc_options *opts);\n #define TREE_TARGET_OPTION(NODE) \\\n   (&TARGET_OPTION_NODE_CHECK (NODE)->target_option.opts)\n \n+#define TREE_TARGET_GLOBALS(NODE) \\\n+  (TARGET_OPTION_NODE_CHECK (NODE)->target_option.globals)\n+\n /* Return a tree node that encapsulates the target options in OPTS.  */\n extern tree build_target_option_node (struct gcc_options *opts);\n \n+extern void prepare_target_option_nodes_for_pch (void);\n+\n #if defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 2007)\n \n inline tree"}]}