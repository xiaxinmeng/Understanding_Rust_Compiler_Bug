{"sha": "b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZlNmE0ZTM4MDRmYzE0MmE4YzEzMGNkMjE4OWYyNDYxYzk0MDNmZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T08:56:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T08:56:41Z"}, "message": "[multiple changes]\n\n2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_attr.adb, sem_ch5.adb: Minor reformatting.\n\n2017-04-25  Bob Duff  <duff@adacore.com>\n\n\t* types.ads: Minor: Fix '???' comment.\n\t* sem_ch8.adb: Minor comment fix.\n\n2017-04-25  Bob Duff  <duff@adacore.com>\n\n\t* sem_prag.adb: Remove suspicious uses of Name_Buf.\n\t* stringt.ads, stringt.adb, exp_dbug.adb, sem_dim.adb: Remove\n\tAdd_String_To_Name_Buffer, to avoid using the global Name_Buf.\n\tAdd String_To_Name with no side effects.\n\n2017-04-25  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Declarations): Add\n\tadditional condition for edge case.\n\n2017-04-25  Bob Duff  <duff@adacore.com>\n\n\t* par-ch2.adb, scans.ads, scn.adb: Do not give an error for\n\treserved words inside pragmas. This is necessary to allow the\n\tpragma name Interface to be used in pragma Ignore_Pragma.\n\t* par.adb: Minor comment fix.\n\n2017-04-25  Javier Miranda  <miranda@adacore.com>\n\n\t* a-tags.ads, a-tags.adb (Type_Is_Abstract): Renamed as Is_Abstract.\n\t* rtsfind.ads (RE_Type_Is_Abstract): Renamed as Is_Abstract.\n\t* exp_disp.adb (Make_DT): Update occurrences of RE_Type_Is_Abstract.\n\t* exp_intr.adb (Expand_Dispatching_Constructor_Call): Update\n\toccurrences of RE_Type_Is_Abstract\n\n2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_util.adb (Build_Chain): Account for ancestor\n\tsubtypes while traversing the derivation chain.\n\nFrom-SVN: r247150", "tree": {"sha": "f760767dba4ad37e4f3a5347e4b00c17d4b5f0c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f760767dba4ad37e4f3a5347e4b00c17d4b5f0c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/comments", "author": null, "committer": null, "parents": [{"sha": "f8a219349a28d326ca09932040eec82c9fd841c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8a219349a28d326ca09932040eec82c9fd841c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8a219349a28d326ca09932040eec82c9fd841c4"}], "stats": {"total": 352, "additions": 207, "deletions": 145}, "files": [{"sha": "e9ef0397efae4bcb01c38670ef62d1d0cf4a5b72", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -1,3 +1,44 @@\n+2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_attr.adb, sem_ch5.adb: Minor reformatting.\n+\n+2017-04-25  Bob Duff  <duff@adacore.com>\n+\n+\t* types.ads: Minor: Fix '???' comment.\n+\t* sem_ch8.adb: Minor comment fix.\n+\n+2017-04-25  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_prag.adb: Remove suspicious uses of Name_Buf.\n+\t* stringt.ads, stringt.adb, exp_dbug.adb, sem_dim.adb: Remove\n+\tAdd_String_To_Name_Buffer, to avoid using the global Name_Buf.\n+\tAdd String_To_Name with no side effects.\n+\n+2017-04-25  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Declarations): Add\n+\tadditional condition for edge case.\n+\n+2017-04-25  Bob Duff  <duff@adacore.com>\n+\n+\t* par-ch2.adb, scans.ads, scn.adb: Do not give an error for\n+\treserved words inside pragmas. This is necessary to allow the\n+\tpragma name Interface to be used in pragma Ignore_Pragma.\n+\t* par.adb: Minor comment fix.\n+\n+2017-04-25  Javier Miranda  <miranda@adacore.com>\n+\n+\t* a-tags.ads, a-tags.adb (Type_Is_Abstract): Renamed as Is_Abstract.\n+\t* rtsfind.ads (RE_Type_Is_Abstract): Renamed as Is_Abstract.\n+\t* exp_disp.adb (Make_DT): Update occurrences of RE_Type_Is_Abstract.\n+\t* exp_intr.adb (Expand_Dispatching_Constructor_Call): Update\n+\toccurrences of RE_Type_Is_Abstract\n+\n+2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_util.adb (Build_Chain): Account for ancestor\n+\tsubtypes while traversing the derivation chain.\n+\n 2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_attr.adb: minor reformatting."}, {"sha": "95bc2087df3793b7b008f0272b185390aaf74f40", "filename": "gcc/ada/a-tags.adb", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fa-tags.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fa-tags.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.adb?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -177,6 +177,24 @@ package body Ada.Tags is\n       return To_Address (TSD.External_Tag);\n    end Get_External_Tag;\n \n+   -----------------\n+   -- Is_Abstract --\n+   -----------------\n+\n+   function Is_Abstract (T : Tag) return Boolean is\n+      TSD_Ptr : Addr_Ptr;\n+      TSD     : Type_Specific_Data_Ptr;\n+\n+   begin\n+      if T = No_Tag then\n+         raise Tag_Error;\n+      end if;\n+\n+      TSD_Ptr := To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n+      TSD     := To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n+      return TSD.Is_Abstract;\n+   end Is_Abstract;\n+\n    -------------------\n    -- Is_Primary_DT --\n    -------------------\n@@ -1023,24 +1041,6 @@ package body Ada.Tags is\n       SSD (T).SSD_Table (Position).Kind := Value;\n    end Set_Prim_Op_Kind;\n \n-   ----------------------\n-   -- Type_Is_Abstract --\n-   ----------------------\n-\n-   function Type_Is_Abstract (T : Tag) return Boolean is\n-      TSD_Ptr : Addr_Ptr;\n-      TSD     : Type_Specific_Data_Ptr;\n-\n-   begin\n-      if T = No_Tag then\n-         raise Tag_Error;\n-      end if;\n-\n-      TSD_Ptr := To_Addr_Ptr (To_Address (T) - DT_Typeinfo_Ptr_Size);\n-      TSD     := To_Type_Specific_Data_Ptr (TSD_Ptr.all);\n-      return TSD.Type_Is_Abstract;\n-   end Type_Is_Abstract;\n-\n    --------------------\n    -- Unregister_Tag --\n    --------------------"}, {"sha": "7397de573243f5ac3cd72d07b944c882d242be8a", "filename": "gcc/ada/a-tags.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fa-tags.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fa-tags.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.ads?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -45,7 +45,7 @@\n --  time (in terms of source lines executed):\n \n --    Expanded_Name, Wide_Expanded_Name, Wide_Wide_Expanded_Name, External_Tag,\n---    Is_Descendant_At_Same_Level, Parent_Tag, Type_Is_Abstract\n+--    Is_Abstract, Is_Descendant_At_Same_Level, Parent_Tag,\n --    Descendant_Tag (when used with a library-level tagged type),\n --    Internal_Tag (when used with a library-level tagged type).\n \n@@ -105,8 +105,8 @@ package Ada.Tags is\n    function Interface_Ancestor_Tags (T : Tag) return Tag_Array;\n    pragma Ada_05 (Interface_Ancestor_Tags);\n \n-   function Type_Is_Abstract (T : Tag) return Boolean;\n-   pragma Ada_2012 (Type_Is_Abstract);\n+   function Is_Abstract (T : Tag) return Boolean;\n+   pragma Ada_2012 (Is_Abstract);\n \n    Tag_Error : exception;\n \n@@ -138,7 +138,7 @@ private\n    --                                    +-------------------+\n    --                                    |   transportable   |\n    --                                    +-------------------+\n-   --                                    |  type_is_abstract |\n+   --                                    |    is_abstract    |\n    --                                    +-------------------+\n    --                                    | needs finalization|\n    --                                    +-------------------+\n@@ -318,7 +318,7 @@ private\n       --  for being used in remote calls as actuals for classwide formals or as\n       --  return values for classwide functions.\n \n-      Type_Is_Abstract : Boolean;\n+      Is_Abstract : Boolean;\n       --  True if the type is abstract (Ada 2012: AI05-0173)\n \n       Needs_Finalization : Boolean;"}, {"sha": "c617e88d5bd94bffe6ca43ff9e6237e50accee4d", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -800,7 +800,7 @@ package body Exp_Dbug is\n         and then No (Address_Clause (E))\n         and then not Has_Suffix\n       then\n-         Add_String_To_Name_Buffer (Strval (Interface_Name (E)));\n+         Append (Global_Name_Buffer, Strval (Interface_Name (E)));\n \n       --  All other cases besides the interface name case\n "}, {"sha": "65eb632845728c4be4d22b0aa76dc9a9f9f74a59", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -4833,7 +4833,7 @@ package body Exp_Disp is\n       --            External_Tag       => Cstring_Ptr!(Exname'Address))\n       --            HT_Link            => HT_Link'Address,\n       --            Transportable      => <<boolean-value>>,\n-      --            Type_Is_Abstract   => <<boolean-value>>,\n+      --            Is_Abstract        => <<boolean-value>>,\n       --            Needs_Finalization => <<boolean-value>>,\n       --            [ Size_Func         => Size_Prim'Access, ]\n       --            [ Interfaces_Table  => <<access-value>>, ]\n@@ -5113,16 +5113,16 @@ package body Exp_Disp is\n             New_Occurrence_Of (Transportable, Loc));\n       end;\n \n-      --  Type_Is_Abstract (Ada 2012: AI05-0173). This functionality is\n-      --  not available in the HIE runtime.\n+      --  Is_Abstract (Ada 2012: AI05-0173). This functionality is not\n+      --  available in the HIE runtime.\n \n-      if RTE_Record_Component_Available (RE_Type_Is_Abstract) then\n+      if RTE_Record_Component_Available (RE_Is_Abstract) then\n          declare\n-            Type_Is_Abstract : Entity_Id;\n+            Is_Abstract : Entity_Id;\n          begin\n-            Type_Is_Abstract := Boolean_Literals (Is_Abstract_Type (Typ));\n+            Is_Abstract := Boolean_Literals (Is_Abstract_Type (Typ));\n             Append_To (TSD_Aggr_List,\n-              New_Occurrence_Of (Type_Is_Abstract, Loc));\n+              New_Occurrence_Of (Is_Abstract, Loc));\n          end;\n       end if;\n "}, {"sha": "4363c75a1909aeefd05811f95bfec9df926a02b0", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -400,7 +400,7 @@ package body Exp_Intr is\n         Make_Implicit_If_Statement (N,\n           Condition       => Make_Function_Call (Loc,\n              Name                   =>\n-               New_Occurrence_Of (RTE (RE_Type_Is_Abstract), Loc),\n+               New_Occurrence_Of (RTE (RE_Is_Abstract), Loc),\n              Parameter_Associations => New_List (New_Copy_Tree (Tag_Arg))),\n \n           Then_Statements => New_List ("}, {"sha": "638f57417e00f0e95cb6cac4c527d2bf4469a7f6", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -8230,17 +8230,45 @@ package body Exp_Util is\n \n          Curr_Typ := Deriv_Typ;\n          loop\n-            --  Work with the view which contains the discriminants and stored\n-            --  constraints.\n+            --  Handle the case where the current type is a record which\n+            --  derives from a subtype.\n+\n+            --    subtype Sub_Typ is Par_Typ ...\n+            --    type Deriv_Typ is Sub_Typ ...\n+\n+            if Ekind (Curr_Typ) = E_Record_Type\n+              and then Present (Parent_Subtype (Curr_Typ))\n+            then\n+               Anc_Typ := Parent_Subtype (Curr_Typ);\n+\n+            --  Handle the case where the current type is a record subtype of\n+            --  another subtype.\n+\n+            --    subtype Sub_Typ1 is Par_Typ ...\n+            --    subtype Sub_Typ2 is Sub_Typ1 ...\n+\n+            elsif Ekind (Curr_Typ) = E_Record_Subtype\n+              and then Present (Cloned_Subtype (Curr_Typ))\n+            then\n+               Anc_Typ := Cloned_Subtype (Curr_Typ);\n+\n+            --  Otherwise use the direct parent type\n \n-            Anc_Typ := Discriminated_View (Base_Type (Etype (Curr_Typ)));\n+            else\n+               Anc_Typ := Etype (Curr_Typ);\n+            end if;\n \n-            --  Use the first subtype when dealing with base types\n+            --  Use the first subtype when dealing with itypes\n \n             if Is_Itype (Anc_Typ) then\n                Anc_Typ := First_Subtype (Anc_Typ);\n             end if;\n \n+            --  Work with the view which contains the discriminants and stored\n+            --  constraints.\n+\n+            Anc_Typ := Discriminated_View (Anc_Typ);\n+\n             --  Stop the climb when either the parent type has been reached or\n             --  there are no more ancestors left to examine.\n "}, {"sha": "cd79ac3de293a78919ac465b403483d0666fd302", "filename": "gcc/ada/par-ch2.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fpar-ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fpar-ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch2.adb?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -268,6 +268,7 @@ package body Ch2 is\n    --  Start of processing for P_Pragma\n \n    begin\n+      Inside_Pragma := True;\n       Prag_Node := New_Node (N_Pragma, Token_Ptr);\n       Scan; -- past PRAGMA\n       Prag_Name := Token_Name;\n@@ -362,9 +363,10 @@ package body Ch2 is\n \n       Semicolon_Loc := Token_Ptr;\n \n-      --  Cancel indication of being within Depends pragm. Can be done\n-      --  unconditionally, since quicker than doing a test.\n+      --  Cancel indication of being within a pragma or in particular a Depends\n+      --  pragma.\n \n+      Inside_Pragma  := False;\n       Inside_Depends := False;\n \n       --  Now we have two tasks left, we need to scan out the semicolon\n@@ -388,12 +390,11 @@ package body Ch2 is\n          Skip_Pragma_Semicolon;\n          return Par.Prag (Prag_Node, Semicolon_Loc);\n       end if;\n-\n    exception\n       when Error_Resync =>\n          Resync_Past_Semicolon;\n+         Inside_Pragma := False;\n          return Error;\n-\n    end P_Pragma;\n \n    --  This routine is called if a pragma is encountered in an inappropriate"}, {"sha": "26730d497e66c9863474be2133ffc6cd16cdb156", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -70,8 +70,8 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n    --  Par.Ch5.Get_Loop_Block_Name).\n \n    Inside_Record_Definition : Boolean := False;\n-   --  Flag set True within a record definition. Used to control warning\n-   --  for redefinition of standard entities (not issued for field names).\n+   --  True within a record definition. Used to control warning for\n+   --  redefinition of standard entities (not issued for field names).\n \n    --------------------\n    -- Error Recovery --"}, {"sha": "cf53e6742d345f194879b2ac77d6a5074569131f", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -637,6 +637,7 @@ package Rtsfind is\n      RE_Interface_Data,                  -- Ada.Tags\n      RE_Interface_Data_Element,          -- Ada.Tags\n      RE_Interface_Tag,                   -- Ada.Tags\n+     RE_Is_Abstract,                     -- Ada.Tags\n      RE_IW_Membership,                   -- Ada.Tags\n      RE_Max_Predef_Prims,                -- Ada.Tags\n      RE_Needs_Finalization,              -- Ada.Tags\n@@ -668,7 +669,6 @@ package Rtsfind is\n      RE_Signature,                       -- Ada.Tags\n      RE_SSD,                             -- Ada.Tags\n      RE_TSD,                             -- Ada.Tags\n-     RE_Type_Is_Abstract,                -- Ada.Tags\n      RE_Type_Specific_Data,              -- Ada.Tags\n      RE_Register_Interface_Offset,       -- Ada.Tags\n      RE_Register_Tag,                    -- Ada.Tags\n@@ -1870,6 +1870,7 @@ package Rtsfind is\n      RE_Interface_Data                   => Ada_Tags,\n      RE_Interface_Data_Element           => Ada_Tags,\n      RE_Interface_Tag                    => Ada_Tags,\n+     RE_Is_Abstract                      => Ada_Tags,\n      RE_IW_Membership                    => Ada_Tags,\n      RE_Max_Predef_Prims                 => Ada_Tags,\n      RE_Needs_Finalization               => Ada_Tags,\n@@ -1901,7 +1902,6 @@ package Rtsfind is\n      RE_Signature                        => Ada_Tags,\n      RE_SSD                              => Ada_Tags,\n      RE_TSD                              => Ada_Tags,\n-     RE_Type_Is_Abstract                 => Ada_Tags,\n      RE_Type_Specific_Data               => Ada_Tags,\n      RE_Register_Interface_Offset        => Ada_Tags,\n      RE_Register_Tag                     => Ada_Tags,"}, {"sha": "a8972bed4f53e0de06d8f4d9d09d22abb64e1c4c", "filename": "gcc/ada/scans.ads", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fscans.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fscans.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.ads?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -484,9 +484,13 @@ package Scans is\n    --  Is it really right for this to be a Name rather than a String, what\n    --  about the case of Wide_Wide_Characters???\n \n+   Inside_Pragma : Boolean := False;\n+   --  True within a pragma. Used to avoid complaining about reserved words\n+   --  within pragmas (see Scan_Reserved_Identifier).\n+\n    Inside_Depends : Boolean := False;\n-   --  Flag set True for parsing the argument of a Depends pragma or aspect\n-   --  (used to allow/require non-standard style rules for =>+ with -gnatyt).\n+   --  True while parsing the argument of a Depends pragma or aspect (used to\n+   --  allow/require non-standard style rules for =>+ with -gnatyt).\n \n    Inside_If_Expression : Nat := 0;\n    --  This is a counter that is set non-zero while scanning out an if"}, {"sha": "643fde9b4c20866e1cda86ff5464d74a431e238d", "filename": "gcc/ada/scn.adb", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fscn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fscn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscn.adb?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -255,9 +255,7 @@ package body Scn is\n \n       --  Clear flags for reserved words used as identifiers\n \n-      for J in Token_Type loop\n-         Used_As_Identifier (J) := False;\n-      end loop;\n+      Used_As_Identifier := (others => False);\n    end Initialize_Scanner;\n \n    ---------------\n@@ -380,8 +378,8 @@ package body Scn is\n    ------------------------------\n \n    procedure Scan_Reserved_Identifier (Force_Msg : Boolean) is\n-      Token_Chars : constant String := Token_Type'Image (Token);\n-\n+      Token_Chars : String := Token_Type'Image (Token);\n+      Len         : Natural := 0;\n    begin\n       --  AI12-0125 : '@' denotes the target_name, i.e. serves as an\n       --  abbreviation for the LHS of an assignment.\n@@ -394,16 +392,24 @@ package body Scn is\n       --  We have in Token_Chars the image of the Token name, i.e. Tok_xxx.\n       --  This code extracts the xxx and makes an identifier out of it.\n \n-      Name_Len := 0;\n-\n       for J in 5 .. Token_Chars'Length loop\n-         Name_Len := Name_Len + 1;\n-         Name_Buffer (Name_Len) := Fold_Lower (Token_Chars (J));\n+         Len := Len + 1;\n+         Token_Chars (Len) := Fold_Lower (Token_Chars (J));\n       end loop;\n \n-      Token_Name := Name_Find;\n+      Token_Name := Name_Find (Token_Chars (1 .. Len));\n \n-      if not Used_As_Identifier (Token) or else Force_Msg then\n+      --  If Inside_Pragma is True, we don't give an error. This is to allow\n+      --  things like \"pragma Ignore_Pragma (Interface)\", where \"Interface\" is\n+      --  a reserved word. There is no danger of missing errors, because any\n+      --  misuse must have been preceded by an illegal declaration. For\n+      --  example, in \"pragma Pack (Begin);\", either Begin is not declared,\n+      --  which is an error, or it is declared, which will be an error on that\n+      --  declaration.\n+\n+      if (not Used_As_Identifier (Token) or else Force_Msg)\n+        and then not Inside_Pragma\n+      then\n          Error_Msg_Name_1 := Token_Name;\n          Error_Msg_SC (\"reserved word* cannot be used as identifier!\");\n          Used_As_Identifier (Token) := True;"}, {"sha": "1d25da729ba0e1bade8e93dfe414447ac38d6dcb", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -10522,10 +10522,10 @@ package body Sem_Attr is\n                --  also be accessibility checks on those, this is where the\n                --  checks can eventually be centralized ???\n \n-               if Ekind_In (Btyp, E_Access_Subprogram_Type,\n-                                  E_Anonymous_Access_Subprogram_Type,\n-                                  E_Access_Protected_Subprogram_Type,\n-                                  E_Anonymous_Access_Protected_Subprogram_Type)\n+               if Ekind_In (Btyp, E_Access_Protected_Subprogram_Type,\n+                                  E_Access_Subprogram_Type,\n+                                  E_Anonymous_Access_Protected_Subprogram_Type,\n+                                  E_Anonymous_Access_Subprogram_Type)\n                then\n                   --  Deal with convention mismatch\n \n@@ -10545,9 +10545,10 @@ package body Sem_Attr is\n                                     Entity (Name (Parent (N)));\n                         begin\n                            if Convention (Subp) = Convention_Intrinsic then\n-                              Error_Msg_FE (\"?subprogram and its formal \"\n-                              & \"access parameters have convention Intrinsic\",\n-                                Parent (N), Subp);\n+                              Error_Msg_FE\n+                                (\"?subprogram and its formal access \"\n+                                 & \"parameters have convention Intrinsic\",\n+                                 Parent (N), Subp);\n                               Error_Msg_N\n                                 (\"actual cannot be access attribute\", N);\n                            end if;"}, {"sha": "0c4d2301a3cbf7226a4e5b05a7ededbe21699108", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -2646,6 +2646,8 @@ package body Sem_Ch3 is\n               and then Was_Expression_Function (Next_Decl)\n               and then not Is_Compilation_Unit (Current_Scope)\n               and then not Is_Generic_Instance (Current_Scope)\n+              and then not In_Package_Body\n+                             (Enclosing_Lib_Unit_Entity (Current_Scope))\n             then\n                --  Loop through all entities in the current scope to identify\n                --  an instance of the edge case outlined above and ignore"}, {"sha": "46281ec97c22796a3c838952ff600894a1d799ac", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -100,11 +100,13 @@ package body Sem_Ch5 is\n    --  Ghost mode.\n \n    procedure Analyze_Assignment (N : Node_Id) is\n-      Lhs                : constant Node_Id := Name (N);\n-      Rhs                : constant Node_Id := Expression (N);\n-      T1                 : Entity_Id;\n-      T2                 : Entity_Id;\n-      Decl               : Node_Id;\n+      Lhs : constant Node_Id := Name (N);\n+      Rhs : constant Node_Id := Expression (N);\n+\n+      Decl : Node_Id;\n+      T1   : Entity_Id;\n+      T2   : Entity_Id;\n+\n       Save_Full_Analysis : Boolean;\n \n       procedure Diagnose_Non_Variable_Lhs (N : Node_Id);\n@@ -312,11 +314,12 @@ package body Sem_Ch5 is\n       Analyze (Rhs);\n \n       --  Ensure that we never do an assignment on a variable marked as\n-      --  as Safe_To_Reevaluate.\n+      --  Is_Safe_To_Reevaluate.\n \n-      pragma Assert (not Is_Entity_Name (Lhs)\n-        or else Ekind (Entity (Lhs)) /= E_Variable\n-        or else not Is_Safe_To_Reevaluate (Entity (Lhs)));\n+      pragma Assert\n+        (not Is_Entity_Name (Lhs)\n+          or else Ekind (Entity (Lhs)) /= E_Variable\n+          or else not Is_Safe_To_Reevaluate (Entity (Lhs)));\n \n       --  Start type analysis for assignment\n \n@@ -3558,8 +3561,8 @@ package body Sem_Ch5 is\n    ------------------------\n \n    procedure Analyze_Statements (L : List_Id) is\n-      S   : Node_Id;\n       Lab : Entity_Id;\n+      S   : Node_Id;\n \n    begin\n       --  The labels declared in the statement list are reachable from"}, {"sha": "2fc7322fcb1369bb94c22aa59d7eb66ceed1f8bd", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -3776,7 +3776,7 @@ package body Sem_Ch8 is\n       end if;\n \n       --  If the Used_Operations list is already initialized, the clause has\n-      --  been analyzed previously, and it is begin reinstalled, for example\n+      --  been analyzed previously, and it is being reinstalled, for example\n       --  when the clause appears in a package spec and we are compiling the\n       --  corresponding package body. In that case, make the entities on the\n       --  existing list use_visible, and mark the corresponding types In_Use."}, {"sha": "d2edeebaede8ec271bf00b0c5b9f9964eb3c05d4", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -2521,8 +2521,9 @@ package body Sem_Dim is\n             Add_Str_To_Name_Buffer (\"has dimension \");\n          end if;\n \n-         Add_String_To_Name_Buffer\n-           (From_Dim_To_Str_Of_Dim_Symbols (Dims_Of_N, System, True));\n+         Append\n+           (Global_Name_Buffer,\n+            From_Dim_To_Str_Of_Dim_Symbols (Dims_Of_N, System, True));\n \n       --  N is dimensionless\n \n@@ -2562,12 +2563,12 @@ package body Sem_Dim is\n \n       Name_Len := 0;\n \n-      Add_String_To_Name_Buffer (String_From_Numeric_Literal (N));\n+      Append (Global_Name_Buffer, String_From_Numeric_Literal (N));\n \n       --  Insert a blank between the literal and the symbol\n \n       Add_Str_To_Name_Buffer (\" \");\n-      Add_String_To_Name_Buffer (Symbol_Of (Typ));\n+      Append (Global_Name_Buffer, Symbol_Of (Typ));\n \n       Error_Msg_Name_1 := Name_Find;\n       Error_Msg_N (\"assumed to be%%??\", N);"}, {"sha": "a03582738b187ab45ab5cb69139b0fa6f0ee9231", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 10, "deletions": 41, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -5941,9 +5941,7 @@ package body Sem_Prag is\n \n       procedure Check_Optional_Identifier (Arg : Node_Id; Id : String) is\n       begin\n-         Name_Buffer (1 .. Id'Length) := Id;\n-         Name_Len := Id'Length;\n-         Check_Optional_Identifier (Arg, Name_Find);\n+         Check_Optional_Identifier (Arg, Name_Find (Id));\n       end Check_Optional_Identifier;\n \n       -------------------------------------\n@@ -8300,8 +8298,7 @@ package body Sem_Prag is\n          Nam  : Name_Id;\n \n       begin\n-         String_To_Name_Buffer (Strval (Expression (Arg3)));\n-         Nam := Name_Find;\n+         Nam := String_To_Name (Strval (Expression (Arg3)));\n \n          Elmt := First_Elmt (Predefined_Float_Types);\n          while Present (Elmt) and then Chars (Node (Elmt)) /= Nam loop\n@@ -9223,8 +9220,7 @@ package body Sem_Prag is\n \n             begin\n                if Prag_Id = Pragma_Import then\n-                  String_To_Name_Buffer (Strval (Expr_Value_S (Ext_Nam)));\n-                  Nam := Name_Find;\n+                  Nam := String_To_Name (Strval (Expr_Value_S (Ext_Nam)));\n                   E   := Entity_Id (Get_Name_Table_Int (Nam));\n \n                   if Nam /= Chars (Subprogram_Def)\n@@ -10273,31 +10269,17 @@ package body Sem_Prag is\n          --    No_Dependence => Ada.Execution_Time.Group_Budget\n          --    No_Dependence => Ada.Execution_Time.Timers\n \n-         --  ??? The use of Name_Buffer here is suspicious. The names should\n-         --  be registered in snames.ads-tmpl and used to build the qualified\n-         --  names of units.\n-\n          if Ada_Version >= Ada_2005 then\n-            Name_Buffer (1 .. 3) := \"ada\";\n-            Name_Len := 3;\n-\n-            Pref_Id := Make_Identifier (Loc, Name_Find);\n-\n-            Name_Buffer (1 .. 14) := \"execution_time\";\n-            Name_Len := 14;\n-\n-            Sel_Id := Make_Identifier (Loc, Name_Find);\n+            Pref_Id := Make_Identifier (Loc, Name_Find (\"ada\"));\n+            Sel_Id  := Make_Identifier (Loc, Name_Find (\"execution_time\"));\n \n             Pref :=\n               Make_Selected_Component\n                 (Sloc          => Loc,\n                  Prefix        => Pref_Id,\n                  Selector_Name => Sel_Id);\n \n-            Name_Buffer (1 .. 13) := \"group_budgets\";\n-            Name_Len := 13;\n-\n-            Sel_Id := Make_Identifier (Loc, Name_Find);\n+            Sel_Id := Make_Identifier (Loc, Name_Find (\"group_budgets\"));\n \n             Nod :=\n               Make_Selected_Component\n@@ -10310,10 +10292,7 @@ package body Sem_Prag is\n                Warn    => Treat_Restrictions_As_Warnings,\n                Profile => Ravenscar);\n \n-            Name_Buffer (1 .. 6) := \"timers\";\n-            Name_Len := 6;\n-\n-            Sel_Id := Make_Identifier (Loc, Name_Find);\n+            Sel_Id := Make_Identifier (Loc, Name_Find (\"timers\"));\n \n             Nod :=\n               Make_Selected_Component\n@@ -10332,26 +10311,16 @@ package body Sem_Prag is\n          --    No_Dependence => System.Multiprocessors.Dispatching_Domains\n \n          if Ada_Version >= Ada_2012 then\n-            Name_Buffer (1 .. 6) := \"system\";\n-            Name_Len := 6;\n-\n-            Pref_Id := Make_Identifier (Loc, Name_Find);\n-\n-            Name_Buffer (1 .. 15) := \"multiprocessors\";\n-            Name_Len := 15;\n-\n-            Sel_Id := Make_Identifier (Loc, Name_Find);\n+            Pref_Id := Make_Identifier (Loc, Name_Find (\"system\"));\n+            Sel_Id  := Make_Identifier (Loc, Name_Find (\"multiprocessors\"));\n \n             Pref :=\n               Make_Selected_Component\n                 (Sloc          => Loc,\n                  Prefix        => Pref_Id,\n                  Selector_Name => Sel_Id);\n \n-            Name_Buffer (1 .. 19) := \"dispatching_domains\";\n-            Name_Len := 19;\n-\n-            Sel_Id := Make_Identifier (Loc, Name_Find);\n+            Sel_Id := Make_Identifier (Loc, Name_Find (\"dispatching_domains\"));\n \n             Nod :=\n               Make_Selected_Component"}, {"sha": "5070b1fab2838ad05e35353390794412d8e1a336", "filename": "gcc/ada/stringt.adb", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fstringt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fstringt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstringt.adb?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -75,14 +75,9 @@ package body Stringt is\n    --  Release to get a snapshot of the tables and to restore them to their\n    --  previous situation.\n \n-   -------------------------------\n-   -- Add_String_To_Name_Buffer --\n-   -------------------------------\n-\n-   procedure Add_String_To_Name_Buffer (S : String_Id) is\n-   begin\n-      Append (Global_Name_Buffer, S);\n-   end Add_String_To_Name_Buffer;\n+   ------------\n+   -- Append --\n+   ------------\n \n    procedure Append (Buf : in out Bounded_String; S : String_Id) is\n    begin\n@@ -324,6 +319,17 @@ package body Stringt is\n       return Strings.Table (Id).Length;\n    end String_Length;\n \n+   --------------------\n+   -- String_To_Name --\n+   --------------------\n+\n+   function String_To_Name (S : String_Id) return Name_Id is\n+      Buf : Bounded_String;\n+   begin\n+      Append (Buf, S);\n+      return Name_Find (Buf);\n+   end String_To_Name;\n+\n    ---------------------------\n    -- String_To_Name_Buffer --\n    ---------------------------"}, {"sha": "b057586b6ea6518edc5ee5c81e77fb4613103b80", "filename": "gcc/ada/stringt.ads", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fstringt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Fstringt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstringt.ads?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -47,9 +47,9 @@ package Stringt is\n --  is implemented in the scanner.\n \n --  There is no guarantee that hashing is used in the implementation, although\n---  it maybe. This means that the caller cannot count on having the same Id\n+--  it may be. This means that the caller cannot count on having the same Id\n --  value for two identical strings stored separately and also cannot count on\n---  the two Id values being different.\n+--  the two such Id values being different.\n \n    Null_String_Id : String_Id;\n    --  Gets set to a null string with length zero\n@@ -119,18 +119,18 @@ package Stringt is\n    function String_Equal (L, R : String_Id) return Boolean;\n    --  Determines if two string literals represent the same string\n \n-   procedure String_To_Name_Buffer (S : String_Id);\n-   --  Place characters of given string in Name_Buffer, setting Name_Len.\n-   --  Error if any characters are out of Character range. Does not attempt\n-   --  to do any encoding of any characters.\n+   function String_To_Name (S : String_Id) return Name_Id;\n+   --  Convert String_Id to Name_Id\n \n    procedure Append (Buf : in out Bounded_String; S : String_Id);\n    --  Append characters of given string to Buf. Error if any characters are\n-   --  out of Character range. Does not attempt to do any encoding of any\n+   --  out of Character range. Does not attempt to do any encoding of\n    --  characters.\n \n-   procedure Add_String_To_Name_Buffer (S : String_Id);\n-   --  Same as Append (Global_Name_Buffer, S)\n+   procedure String_To_Name_Buffer (S : String_Id);\n+   --  Place characters of given string in Name_Buffer, setting Name_Len.\n+   --  Error if any characters are out of Character range. Does not attempt\n+   --  to do any encoding of any characters.\n \n    function String_Chars_Address return System.Address;\n    --  Return address of String_Chars table (used by Back_End call to Gigi)"}, {"sha": "8df9ff17a536baef01fa0aeddc847f6962d0611f", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e6a4e3804fc142a8c130cd2189f2461c9403ff/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=b6e6a4e3804fc142a8c130cd2189f2461c9403ff", "patch": "@@ -256,6 +256,11 @@ package Types is\n    --    Universal integers (type Uint)\n    --    Universal reals (type Ureal)\n \n+   --  These types are represented as integer indices into various tables.\n+   --  However, they should be treated as private, except in a few documented\n+   --  cases. In particular it is never appropriate to perform arithmetic\n+   --  operations using these types.\n+\n    --  In most contexts, the strongly typed interface determines which of these\n    --  types is present. However, there are some situations (involving untyped\n    --  traversals of the tree), where it is convenient to be easily able to\n@@ -486,11 +491,6 @@ package Types is\n    --  String_Id values are used to identify entries in the strings table. They\n    --  are subscripts into the Strings table defined in package Stringt.\n \n-   --  Note that with only a few exceptions, which are clearly documented, the\n-   --  type String_Id should be regarded as a private type. In particular it is\n-   --  never appropriate to perform arithmetic operations using this type.\n-   --  Doesn't this also apply to all other *_Id types???\n-\n    type String_Id is range Strings_Low_Bound .. Strings_High_Bound;\n    --  Type used to identify entries in the strings table\n "}]}