{"sha": "dea78431676f0104f5467788e8e78fc05c3ab981", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVhNzg0MzE2NzZmMDEwNGY1NDY3Nzg4ZThlNzhmYzA1YzNhYjk4MQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2019-07-18T00:38:45Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2019-07-18T00:38:45Z"}, "message": "-Wmissing-attributes: check that we avoid duplicates and false positives\n\nThe initial patch for PR 81824 fixed various possibilities of\n-Wmissing-attributes reporting duplicates and false positives.  The\ntest that avoided them was a little obscure, though, so this patch\nrewrites it into a more self-evident form.\n\nThe patch also adds a testcase that already passed, but that\nexplicitly covers some of the possibilities of reporting duplicates\nand false positives that preexisting tests did not cover.\n\n\nfor  gcc/ChangeLog\n\n\tPR middle-end/81824\n\t* attribs.c (decls_mismatched_attributes): Simplify the logic\n\tthat avoids duplicates and false positives.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR middle-end/81824\n\t* g++.dg/Wmissing-attributes-1.C: New.  Some of its fragments\n\tare from Martin Sebor.\n\nFrom-SVN: r273563", "tree": {"sha": "b343f18a6534f518028fdf53783d6d934389ab2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b343f18a6534f518028fdf53783d6d934389ab2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dea78431676f0104f5467788e8e78fc05c3ab981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea78431676f0104f5467788e8e78fc05c3ab981", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dea78431676f0104f5467788e8e78fc05c3ab981", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea78431676f0104f5467788e8e78fc05c3ab981/comments", "author": null, "committer": null, "parents": [{"sha": "8ea3c020a234e25d4a976e69902208f744c0819c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ea3c020a234e25d4a976e69902208f744c0819c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ea3c020a234e25d4a976e69902208f744c0819c"}], "stats": {"total": 92, "additions": 88, "deletions": 4}, "files": [{"sha": "e2da4ba370ae06aa8fbadbaede851c66c56c9a29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea78431676f0104f5467788e8e78fc05c3ab981/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea78431676f0104f5467788e8e78fc05c3ab981/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dea78431676f0104f5467788e8e78fc05c3ab981", "patch": "@@ -1,3 +1,9 @@\n+2019-07-17  Alexandre Oliva <oliva@adacore.com>\n+\n+\tPR middle-end/81824\n+\t* attribs.c (decls_mismatched_attributes): Simplify the logic\n+\tthat avoids duplicates and false positives.\n+\n 2019-07-17  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/pa.c (pa_som_asm_init_sections): Don't force all constant"}, {"sha": "f4777c6a823364fc37b6f2cdc922f1b6e3e8334b", "filename": "gcc/attribs.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea78431676f0104f5467788e8e78fc05c3ab981/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea78431676f0104f5467788e8e78fc05c3ab981/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=dea78431676f0104f5467788e8e78fc05c3ab981", "patch": "@@ -1931,22 +1931,28 @@ decls_mismatched_attributes (tree tmpl, tree decl, tree attrlist,\n \t  if (!has_attribute (tmpls[j], tmpl_attrs[j], blacklist[i]))\n \t    continue;\n \n+\t  bool found = false;\n \t  unsigned kmax = 1 + !!decl_attrs[1];\n \t  for (unsigned k = 0; k != kmax; ++k)\n \t    {\n \t      if (has_attribute (decls[k], decl_attrs[k], blacklist[i]))\n-\t\tbreak;\n-\n-\t      if (!k && kmax > 1)\n-\t\tcontinue;\n+\t\t{\n+\t\t  found = true;\n+\t\t  break;\n+\t\t}\n+\t    }\n \n+\t  if (!found)\n+\t    {\n \t      if (nattrs)\n \t\tpp_string (attrstr, \", \");\n \t      pp_begin_quote (attrstr, pp_show_color (global_dc->printer));\n \t      pp_string (attrstr, blacklist[i]);\n \t      pp_end_quote (attrstr, pp_show_color (global_dc->printer));\n \t      ++nattrs;\n \t    }\n+\n+\t  break;\n \t}\n     }\n "}, {"sha": "69e82b59a9e1cbc061f6089f7c8bcf626c06b46e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea78431676f0104f5467788e8e78fc05c3ab981/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea78431676f0104f5467788e8e78fc05c3ab981/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dea78431676f0104f5467788e8e78fc05c3ab981", "patch": "@@ -1,3 +1,9 @@\n+2019-07-17  Alexandre Oliva <oliva@adacore.com>\n+\n+\tPR middle-end/81824\n+\t* g++.dg/Wmissing-attributes-1.C: New.  Some of its fragments\n+\tare from Martin Sebor.\n+\n 2019-07-17  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/90455"}, {"sha": "972e68305bb902388d5265f4f55165e9137889a3", "filename": "gcc/testsuite/g++.dg/Wmissing-attributes-1.C", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea78431676f0104f5467788e8e78fc05c3ab981/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWmissing-attributes-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea78431676f0104f5467788e8e78fc05c3ab981/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWmissing-attributes-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWmissing-attributes-1.C?ref=dea78431676f0104f5467788e8e78fc05c3ab981", "patch": "@@ -0,0 +1,66 @@\n+// { dg-do compile }\n+// { dg-options \"-Wmissing-attributes\" }\n+\n+#define ATTR(list)   __attribute__ (list)\n+\n+/* Type attributes are normally absent in template functions, and the\n+   mere presence of any such attribute used to cause the\n+   -Wmissing-attributes checks, that checked for attributes typically\n+   associated with functions rather than types, to report any missing\n+   attributes twice: once for the specialization attribute list, once\n+   for its type attribute list.\n+\n+   This test uses both decl and type attributes to exercise the code\n+   that avoids reporting duplicates, in ways that failed in the past\n+   but that were not covered in other tests.  */\n+typedef void* ATTR ((alloc_size (1))) f_type (int);\n+\n+template <class T>\n+f_type\n+ATTR ((malloc))\n+missing_malloc;            // { dg-message \"missing primary template attribute .malloc.\" }\n+\n+template <>\n+f_type\n+missing_malloc<char>;      // { dg-warning \"explicit specialization .\\[^\\n\\r\\]+. may be missing attributes\" }\n+\n+\n+/* Check that even an attribute that appears in both lists (decl and\n+   type) in a template declaration is reported as missing only\n+   once.  */\n+\n+template <class T>\n+f_type\n+ATTR ((alloc_size (1))) // In both attr lists, decl's and type's.\n+missing_alloc_size;            // { dg-message \"missing primary template attribute .alloc_size.\" }\n+\n+template <>\n+void *\n+missing_alloc_size<char>(int); // { dg-warning \"explicit specialization .\\[^\\n\\r\\]+. may be missing attributes\" }\n+\n+\n+/* Check that even an attribute that appears in both lists (decl and\n+   type) is not reported as missing if it's present only in the type\n+   list.  */\n+\n+template <class T>\n+f_type\n+ATTR ((alloc_size (1))) // In both attr lists, decl's and type's.\n+missing_nothing;\n+\n+template <>\n+f_type\n+missing_nothing<char>;\n+\n+\n+/* For completeness, check that a type attribute is matched by a decl\n+   attribute in the specialization.  */\n+\n+template <class T>\n+f_type\n+missing_nothing2;\n+\n+template <>\n+void *\n+ATTR ((alloc_size (1)))\n+missing_nothing2<char>(int);"}]}