{"sha": "e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU0Yzc0NzE4MTllZThkYzllNGJhMGFkYTFkYjI0MmJkNWJkNjhlZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-11-26T19:21:16Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-11-26T19:21:16Z"}, "message": "target.h (struct gcc_target): New field 'dwarf_handle_frame_unspec'.\n\n\t* target.h (struct gcc_target): New field 'dwarf_handle_frame_unspec'.\n\t* target_def.h (TARGET_DWARF_HANDLE_FRAME_UNSPEC): Define to 0.\n\t(TARGET_INITIALIZER): Add TARGET_DWARF_HANDLE_FRAME_UNSPEC.\n\t* dwarf2out.c (dwarf2out_frame_debug_expr): Allow REG->REG move\n\tto a fixed reg if the source is the Return Address register.\n\tImplement new Rule 15.\n\t* doc/tm.texi (Frame Layout): Document TARGET_DWARF_HANDLE_FRAME_UNSPEC.\n\t* config/sparc/sparc.c (TARGET_DWARF_HANDLE_FRAME_UNSPEC): Define to\n\tsparc_dwarf_handle_frame_unspec.\n\t(gen_save_register_window): New function.\n\t(emit_stack_pointer_increment): Rename into gen_stack_pointer_inc.\n\t(emit_stack_pointer_decrement): Rename into gen_stack_pointer_dec.\n\t(expand_prologue): Adjust calls to emit_stack_pointer_{in,de}crement.\n\tSet RTX_FRAME_RELATED_P on the appropriate insns and members of insns.\n\t(sparc_asm_function_prologue): Do not emit call frame debugging info.\n\t(emit_and_preserve): Adjust calls to emit_stack_pointer_{in,de}crement.\n\t(sparc_expand_epilogue): Likewise.\n\t(sparc_dwarf_handle_frame_unspec): New function.\n\t* config/sparc/sparc.md (save_register_window): Remove.\n\t(save_register_windowdi): Rewrite modelled on the callframe debug info.\n\t(save_register_windowsi): Likewise.\n\nFrom-SVN: r91346", "tree": {"sha": "c465f270ce510064453ef668b699763e5cde22f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c465f270ce510064453ef668b699763e5cde22f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "077094ace3c976aafd620af5f4291389e0b4e0e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/077094ace3c976aafd620af5f4291389e0b4e0e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/077094ace3c976aafd620af5f4291389e0b4e0e4"}], "stats": {"total": 240, "additions": 159, "deletions": 81}, "files": [{"sha": "0ac278bfb69a37db9799de312c2840a243bc82c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed", "patch": "@@ -1,3 +1,27 @@\n+2004-11-26  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* target.h (struct gcc_target): New field 'dwarf_handle_frame_unspec'.\n+\t* target_def.h (TARGET_DWARF_HANDLE_FRAME_UNSPEC): Define to 0.\n+\t(TARGET_INITIALIZER): Add TARGET_DWARF_HANDLE_FRAME_UNSPEC.\n+\t* dwarf2out.c (dwarf2out_frame_debug_expr): Allow REG->REG move\n+\tto a fixed reg if the source is the Return Address register.\n+\tImplement new Rule 15.\n+\t* doc/tm.texi (Frame Layout): Document TARGET_DWARF_HANDLE_FRAME_UNSPEC.\n+\t* config/sparc/sparc.c (TARGET_DWARF_HANDLE_FRAME_UNSPEC): Define to\n+\tsparc_dwarf_handle_frame_unspec.\n+\t(gen_save_register_window): New function.\n+\t(emit_stack_pointer_increment): Rename into gen_stack_pointer_inc.\n+\t(emit_stack_pointer_decrement): Rename into gen_stack_pointer_dec.\n+\t(expand_prologue): Adjust calls to emit_stack_pointer_{in,de}crement.\n+\tSet RTX_FRAME_RELATED_P on the appropriate insns and members of insns.\n+\t(sparc_asm_function_prologue): Do not emit call frame debugging info.\n+\t(emit_and_preserve): Adjust calls to emit_stack_pointer_{in,de}crement.\n+\t(sparc_expand_epilogue): Likewise.\n+\t(sparc_dwarf_handle_frame_unspec): New function.\n+\t* config/sparc/sparc.md (save_register_window): Remove.\n+\t(save_register_windowdi): Rewrite modelled on the callframe debug info.\n+\t(save_register_windowsi): Likewise.\n+\n 2004-11-26  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/frv/frv-protos.h: Guard ifcvt functions declarations with"}, {"sha": "b13f820b0a1666a358555843e5393e4e2aa98f1f", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 69, "deletions": 49, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed", "patch": "@@ -356,6 +356,7 @@ static tree sparc_gimplify_va_arg (tree, tree, tree *, tree *);\n static bool sparc_vector_mode_supported_p (enum machine_mode);\n static bool sparc_pass_by_reference (CUMULATIVE_ARGS *,\n \t\t\t\t     enum machine_mode, tree, bool);\n+static void sparc_dwarf_handle_frame_unspec (const char *, rtx, int);\n #ifdef SUBTARGET_ATTRIBUTE_TABLE\n const struct attribute_spec sparc_attribute_table[];\n #endif\n@@ -480,6 +481,9 @@ enum processor_type sparc_cpu;\n #undef TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P sparc_vector_mode_supported_p\n \n+#undef TARGET_DWARF_HANDLE_FRAME_UNSPEC\n+#define TARGET_DWARF_HANDLE_FRAME_UNSPEC sparc_dwarf_handle_frame_unspec\n+\n #ifdef SUBTARGET_INSERT_ATTRIBUTES\n #undef TARGET_INSERT_ATTRIBUTES\n #define TARGET_INSERT_ATTRIBUTES SUBTARGET_INSERT_ATTRIBUTES\n@@ -4478,26 +4482,37 @@ emit_restore_regs (void)\n   save_or_restore_regs (32, TARGET_V9 ? 96 : 64, base, offset, SORR_RESTORE);\n }\n \n-/* Emit an increment for the stack pointer.  */\n+/* Generate a save_register_window insn.  */\n \n-static void\n-emit_stack_pointer_increment (rtx increment)\n+static rtx\n+gen_save_register_window (rtx increment)\n {\n   if (TARGET_ARCH64)\n-    emit_insn (gen_adddi3 (stack_pointer_rtx, stack_pointer_rtx, increment));\n+    return gen_save_register_windowdi (increment);\n   else\n-    emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx, increment));\n+    return gen_save_register_windowsi (increment);\n }\n \n-/* Emit a decrement for the stack pointer.  */\n+/* Generate an increment for the stack pointer.  */\n \n-static void\n-emit_stack_pointer_decrement (rtx decrement)\n+static rtx\n+gen_stack_pointer_inc (rtx increment)\n {\n   if (TARGET_ARCH64)\n-    emit_insn (gen_subdi3 (stack_pointer_rtx, stack_pointer_rtx, decrement));\n+    return gen_adddi3 (stack_pointer_rtx, stack_pointer_rtx, increment);\n   else\n-    emit_insn (gen_subsi3 (stack_pointer_rtx, stack_pointer_rtx, decrement));\n+    return gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx, increment);\n+}\n+\n+/* Generate a decrement for the stack pointer.  */\n+\n+static rtx\n+gen_stack_pointer_dec (rtx decrement)\n+{\n+  if (TARGET_ARCH64)\n+    return gen_subdi3 (stack_pointer_rtx, stack_pointer_rtx, decrement);\n+  else\n+    return gen_subsi3 (stack_pointer_rtx, stack_pointer_rtx, decrement);\n }\n \n /* Expand the function prologue.  The prologue is responsible for reserving\n@@ -4507,6 +4522,9 @@ emit_stack_pointer_decrement (rtx decrement)\n void\n sparc_expand_prologue (void)\n {\n+  rtx insn;\n+  int i;\n+\n   /* Compute a snapshot of current_function_uses_only_leaf_regs.  Relying\n      on the final value of the flag means deferring the prologue/epilogue\n      expansion until just before the second scheduling pass, which is too\n@@ -4556,34 +4574,48 @@ sparc_expand_prologue (void)\n   else if (sparc_leaf_function_p)\n     {\n       if (actual_fsize <= 4096)\n-\temit_stack_pointer_increment (GEN_INT (- actual_fsize));\n+\tinsn = emit_insn (gen_stack_pointer_inc (GEN_INT (-actual_fsize)));\n       else if (actual_fsize <= 8192)\n \t{\n-\t  emit_stack_pointer_increment (GEN_INT (-4096));\n-\t  emit_stack_pointer_increment (GEN_INT (4096 - actual_fsize));\n+\t  insn = emit_insn (gen_stack_pointer_inc (GEN_INT (-4096)));\n+\t  /* %sp is still the CFA register.  */\n+\t  RTX_FRAME_RELATED_P (insn) = 1;\n+\t  insn\n+\t    = emit_insn (gen_stack_pointer_inc (GEN_INT (4096-actual_fsize)));\n \t}\n       else\n \t{\n \t  rtx reg = gen_rtx_REG (Pmode, 1);\n \t  emit_move_insn (reg, GEN_INT (-actual_fsize));\n-\t  emit_stack_pointer_increment (reg);\n+\t  insn = emit_insn (gen_stack_pointer_inc (reg));\n+\t  REG_NOTES (insn) =\n+\t    gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,\n+\t\t\t       PATTERN (gen_stack_pointer_inc (GEN_INT (-actual_fsize))),\n+\t\t\t       REG_NOTES (insn));\n \t}\n+\n+      RTX_FRAME_RELATED_P (insn) = 1;\n     }\n   else\n     {\n       if (actual_fsize <= 4096)\n-        emit_insn (gen_save_register_window (GEN_INT (-actual_fsize)));\n+\tinsn = emit_insn (gen_save_register_window (GEN_INT (-actual_fsize)));\n       else if (actual_fsize <= 8192)\n \t{\n-\t  emit_insn (gen_save_register_window (GEN_INT (-4096)));\n-\t  emit_stack_pointer_increment (GEN_INT (4096 - actual_fsize));\n+\t  insn = emit_insn (gen_save_register_window (GEN_INT (-4096)));\n+\t  /* %sp is not the CFA register anymore.  */\n+\t  emit_insn (gen_stack_pointer_inc (GEN_INT (4096-actual_fsize)));\n \t}\n       else\n \t{\n \t  rtx reg = gen_rtx_REG (Pmode, 1);\n \t  emit_move_insn (reg, GEN_INT (-actual_fsize));\n-\t  emit_insn (gen_save_register_window (reg));\n+\t  insn = emit_insn (gen_save_register_window (reg));\n \t}\n+\n+      RTX_FRAME_RELATED_P (insn) = 1;\n+      for (i=0; i < XVECLEN (PATTERN (insn), 0); i++)\n+        RTX_FRAME_RELATED_P (XVECEXP (PATTERN (insn), 0, i)) = 1;\n     }\n \n   /* Call-saved registers are saved just above the outgoing argument area.  */\n@@ -4596,8 +4628,7 @@ sparc_expand_prologue (void)\n }\n  \n /* This function generates the assembly code for function entry, which boils\n-   down to emitting the necessary .register directives.  It also informs the\n-   DWARF-2 back-end on the layout of the frame.\n+   down to emitting the necessary .register directives.\n \n    ??? Historical cruft: \"On SPARC, move-double insns between fpu and cpu need\n    an 8-byte block of memory.  If any fpu reg is used in the function, we\n@@ -4612,29 +4643,6 @@ sparc_asm_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n     abort();\n \n   sparc_output_scratch_registers (file);\n-\n-  if (dwarf2out_do_frame () && actual_fsize)\n-    {\n-      char *label = dwarf2out_cfi_label ();\n-\n-      /* The canonical frame address refers to the top of the frame.  */\n-      dwarf2out_def_cfa (label,\n-\t\t\t sparc_leaf_function_p\n-\t\t\t ? STACK_POINTER_REGNUM\n-\t\t\t : HARD_FRAME_POINTER_REGNUM,\n-\t\t\t frame_base_offset);\n-\n-      if (! sparc_leaf_function_p)\n-\t{\n-\t  /* Note the register window save.  This tells the unwinder that\n-\t     it needs to restore the window registers from the previous\n-\t     frame's window save area at 0(cfa).  */\n-\t  dwarf2out_window_save (label);\n-\n-\t  /* The return address (-8) is now in %i7.  */\n-\t  dwarf2out_return_reg (label, 31);\n-\t}\n-    }\n }\n \n /* Expand the function epilogue, either normal or part of a sibcall.\n@@ -4651,17 +4659,17 @@ sparc_expand_epilogue (void)\n   else if (sparc_leaf_function_p)\n     {\n       if (actual_fsize <= 4096)\n-\temit_stack_pointer_decrement (GEN_INT (- actual_fsize));\n+\temit_insn (gen_stack_pointer_dec (GEN_INT (- actual_fsize)));\n       else if (actual_fsize <= 8192)\n \t{\n-\t  emit_stack_pointer_decrement (GEN_INT (-4096));\n-\t  emit_stack_pointer_decrement (GEN_INT (4096 - actual_fsize));\n+\t  emit_insn (gen_stack_pointer_dec (GEN_INT (-4096)));\n+\t  emit_insn (gen_stack_pointer_dec (GEN_INT (4096 - actual_fsize)));\n \t}\n       else\n \t{\n \t  rtx reg = gen_rtx_REG (Pmode, 1);\n \t  emit_move_insn (reg, GEN_INT (-actual_fsize));\n-\t  emit_stack_pointer_decrement (reg);\n+\t  emit_insn (gen_stack_pointer_dec (reg));\n \t}\n     }\n }\n@@ -8886,11 +8894,11 @@ emit_and_preserve (rtx seq, rtx reg)\n   rtx slot = gen_rtx_MEM (word_mode,\n \t\t\t  plus_constant (stack_pointer_rtx, SPARC_STACK_BIAS));\n \n-  emit_stack_pointer_decrement (GEN_INT (STACK_BOUNDARY/BITS_PER_UNIT));\n+  emit_insn (gen_stack_pointer_dec (GEN_INT (STACK_BOUNDARY/BITS_PER_UNIT)));\n   emit_insn (gen_rtx_SET (VOIDmode, slot, reg));\n   emit_insn (seq);\n   emit_insn (gen_rtx_SET (VOIDmode, reg, slot));\n-  emit_stack_pointer_increment (GEN_INT (STACK_BOUNDARY/BITS_PER_UNIT));\n+  emit_insn (gen_stack_pointer_inc (GEN_INT (STACK_BOUNDARY/BITS_PER_UNIT)));\n }\n \n /* Output the assembler code for a thunk function.  THUNK_DECL is the\n@@ -9153,6 +9161,18 @@ get_some_local_dynamic_name_1 (rtx *px, void *data ATTRIBUTE_UNUSED)\n   return 0;\n }\n \n+/* Handle the TARGET_DWARF_HANDLE_FRAME_UNSPEC hook.\n+   This is called from dwarf2out.c to emit call frame instructions\n+   for frame-related insns containing UNSPECs and UNSPEC_VOLATILEs. */\n+static void\n+sparc_dwarf_handle_frame_unspec (const char *label,\n+\t\t\t\t rtx pattern ATTRIBUTE_UNUSED,\n+\t\t\t\t int index ATTRIBUTE_UNUSED)\n+{\n+  gcc_assert (index == UNSPECV_SAVEW);\n+  dwarf2out_window_save (label);\n+}\n+\n /* This is called from dwarf2out.c via ASM_OUTPUT_DWARF_DTPREL.\n    We need to emit DTP-relative relocations.  */\n "}, {"sha": "44879c0302496e80f142f4936c28c9eaec076ebe", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 22, "deletions": 30, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed", "patch": "@@ -7713,39 +7713,31 @@\n   DONE;\n })\n \n-(define_expand \"save_register_window\"\n-  [(use (match_operand 0 \"arith_operand\" \"\"))]\n-  \"\"\n-{\n-  rtvec vec;\n-\n-  vec = gen_rtvec (2,\n-\t\t   gen_rtx_SET (VOIDmode,\n-\t\t\t\tstack_pointer_rtx,\n-\t\t\t\tgen_rtx_PLUS (Pmode,\n-\t\t\t\t\t      hard_frame_pointer_rtx,\n-\t\t\t\t\t      operands[0])),\n-\t\t   gen_rtx_UNSPEC_VOLATILE (VOIDmode,\n-\t\t\t\t\t    gen_rtvec (1, const0_rtx),\n-\t\t\t\t\t    UNSPECV_SAVEW));\n-\n-  emit_insn (gen_rtx_PARALLEL (VOIDmode, vec));\n-  DONE;\n-})\n-\n-(define_insn \"*save_register_windowsi\"\n-  [(set (reg:SI 14) (plus:SI (reg:SI 30)\n-\t\t\t     (match_operand:SI 0 \"arith_operand\" \"rI\")))\n-   (unspec_volatile [(const_int 0)] UNSPECV_SAVEW)]\n-  \"! TARGET_ARCH64\"\n+;; The \"save register window\" insn is modelled as follows so that the DWARF-2\n+;; backend automatically emits the required call frame debugging information\n+;; while it is parsing it.  Therefore, the pattern should not be modified\n+;; without first studying the impact of the changes on the debug info.\n+;; [(set (%fp) (%sp))\n+;;  (set (%sp) (unspec_volatile [(%sp) (-frame_size)] UNSPECV_SAVEW))\n+;;  (set (%i7) (%o7))]\n+\n+(define_insn \"save_register_windowdi\"\n+  [(set (reg:DI 30) (reg:DI 14))\n+   (set (reg:DI 14) (unspec_volatile [(reg:DI 14)\n+\t\t\t\t      (match_operand:DI 0 \"arith_operand\" \"rI\")]\n+\t\t\t\t     UNSPECV_SAVEW))\n+   (set (reg:DI 31) (reg:DI 15))]\n+  \"TARGET_ARCH64\"\n   \"save\\t%%sp, %0, %%sp\"\n   [(set_attr \"type\" \"savew\")])\n \n-(define_insn \"*save_register_windowdi\"\n-  [(set (reg:DI 14) (plus:DI (reg:DI 30)\n-\t\t\t     (match_operand:DI 0 \"arith_operand\" \"rI\")))\n-   (unspec_volatile [(const_int 0)] UNSPECV_SAVEW)]\n-  \"TARGET_ARCH64\"\n+(define_insn \"save_register_windowsi\"\n+  [(set (reg:SI 30) (reg:SI 14))\n+   (set (reg:SI 14) (unspec_volatile [(reg:SI 14)\n+\t\t\t\t      (match_operand:SI 0 \"arith_operand\" \"rI\")]\n+\t\t\t\t     UNSPECV_SAVEW))\n+   (set (reg:SI 31) (reg:SI 15))]\n+  \"!TARGET_ARCH64\"\n   \"save\\t%%sp, %0, %%sp\"\n   [(set_attr \"type\" \"savew\")])\n "}, {"sha": "5a044a5a13da99482ef39964bdd66cd98fe16e6a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed", "patch": "@@ -3005,6 +3005,22 @@ someone decided it was a good idea to use that register number to\n terminate the stack backtrace.  New ports should avoid this.\n @end defmac\n \n+@deftypefn {Target Hook} void TARGET_DWARF_HANDLE_FRAME_UNSPEC (const char *@var{label}, rtx @var{pattern}, int @var{index})\n+This target hook allows the backend to emit frame-related insns that\n+contain UNSPECs or UNSPEC_VOLATILEs.  The DWARF 2 call frame debugging\n+info engine will invoke it on insns of the form\n+@smallexample\n+(set (reg) (unspec [...] UNSPEC_INDEX))\n+@end smallexample\n+and\n+@smallexample\n+(set (reg) (unspec_volatile [...] UNSPECV_INDEX)).\n+@end smallexample\n+to let the backend emit the call frame instructions.  @var{label} is\n+the CFI label attached to the insn, @var{pattern} is the pattern of\n+the insn and @var{index} is @code{UNSPEC_INDEX} or @code{UNSPECV_INDEX}.\n+@end deftypefn\n+\n @defmac INCOMING_FRAME_SP_OFFSET\n A C expression whose value is an integer giving the offset, in bytes,\n from the value of the stack pointer register to the top of the stack"}, {"sha": "96351c4c0bad4183f75d95b011243f7c5be05ab7", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed", "patch": "@@ -1441,7 +1441,11 @@ static dw_cfa_location cfa_temp;\n   (set (mem (postinc <reg1>:cfa_temp <const_int>)) <reg2>)\n   effects: cfa.reg = <reg1>\n \t   cfa.base_offset = -cfa_temp.offset\n-\t   cfa_temp.offset -= mode_size(mem)  */\n+\t   cfa_temp.offset -= mode_size(mem)\n+\n+\ufffd Rule 15:\n+\ufffd (set <reg> {unspec, unspec_volatile})\n+\ufffd effects: target-dependent  */\n \n static void\n dwarf2out_frame_debug_expr (rtx expr, const char *label)\n@@ -1505,7 +1509,10 @@ dwarf2out_frame_debug_expr (rtx expr, const char *label)\n \t    {\n \t      /* Saving a register in a register.  */\n \t      gcc_assert (call_used_regs [REGNO (dest)]\n-\t\t\t  && !fixed_regs [REGNO (dest)]);\n+\t\t\t  && (!fixed_regs [REGNO (dest)]\n+\t\t\t      /* For the SPARC and its register window.  */\n+\t\t\t      || DWARF_FRAME_REGNUM (REGNO (src))\n+\t\t\t\t   == DWARF_FRAME_RETURN_COLUMN));\n \t      queue_reg_save (label, src, dest, 0);\n \t    }\n \t  break;\n@@ -1632,6 +1639,13 @@ dwarf2out_frame_debug_expr (rtx expr, const char *label)\n \tcase HIGH:\n \t  break;\n \n+\t  /* Rule 15 */\n+\tcase UNSPEC:\n+\tcase UNSPEC_VOLATILE:\n+\t  gcc_assert (targetm.dwarf_handle_frame_unspec);\n+\t  targetm.dwarf_handle_frame_unspec (label, expr, XINT (src, 1));\n+\t  break;\n+\n \tdefault:\n \t  gcc_unreachable ();\n \t}"}, {"sha": "344f74c1faaea4243857c04300df814b438ebce9", "filename": "gcc/target-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed", "patch": "@@ -381,6 +381,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n #define TARGET_DWARF_CALLING_CONVENTION hook_int_tree_0\n \n+#define TARGET_DWARF_HANDLE_FRAME_UNSPEC 0\n+\n #define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_false\n #define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_false\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_false\n@@ -525,6 +527,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_BUILTIN_SETJMP_FRAME_VALUE,\t\t\\\n   TARGET_MD_ASM_CLOBBERS,\t\t\t\\\n   TARGET_DWARF_CALLING_CONVENTION,              \\\n+  TARGET_DWARF_HANDLE_FRAME_UNSPEC,\t\t\\\n   TARGET_CALLS,\t\t\t\t\t\\\n   TARGET_CXX,\t\t\t\t\t\\\n   TARGET_HAVE_NAMED_SECTIONS,\t\t\t\\"}, {"sha": "4927d2bab4bcdaa63147226ba608412db503c856", "filename": "gcc/target.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=e54c7471819ee8dc9e4ba0ada1db242bd5bd68ed", "patch": "@@ -495,6 +495,15 @@ struct gcc_target\n      the function is being declared as an int.  */\n   int (* dwarf_calling_convention) (tree);\n \n+  /* This target hook allows the backend to emit frame-related insns that\n+     contain UNSPECs or UNSPEC_VOLATILEs.  The call frame debugging info\n+     engine will invoke it on insns of the form\n+       (set (reg) (unspec [...] UNSPEC_INDEX))\n+     and\n+       (set (reg) (unspec_volatile [...] UNSPECV_INDEX))\n+     to let the backend emit the call frame instructions.  */\n+  void (* dwarf_handle_frame_unspec) (const char *, rtx, int);\n+\n   /* Functions relating to calls - argument passing, returns, etc.  */\n   struct calls {\n     bool (*promote_function_args) (tree fntype);"}]}