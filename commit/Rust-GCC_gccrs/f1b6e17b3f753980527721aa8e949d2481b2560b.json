{"sha": "f1b6e17b3f753980527721aa8e949d2481b2560b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFiNmUxN2IzZjc1Mzk4MDUyNzcyMWFhOGU5NDlkMjQ4MWIyNTYwYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-06T05:16:13Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-12-08T18:22:12Z"}, "message": "compiler: use correct location for iota errors\n\nAlso check for valid array length when reducing len/cap to a constant.\n\nFor golang/go#8183\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/275654", "tree": {"sha": "1d9071fcfcbf9832e58b86f14812d4d017cdb654", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d9071fcfcbf9832e58b86f14812d4d017cdb654"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1b6e17b3f753980527721aa8e949d2481b2560b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1b6e17b3f753980527721aa8e949d2481b2560b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1b6e17b3f753980527721aa8e949d2481b2560b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1b6e17b3f753980527721aa8e949d2481b2560b/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f41dd93ade24f22f8cd1863129ab20c821000134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f41dd93ade24f22f8cd1863129ab20c821000134", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f41dd93ade24f22f8cd1863129ab20c821000134"}], "stats": {"total": 110, "additions": 99, "deletions": 11}, "files": [{"sha": "619f1c001f08cf9448e63ab7b154b5efbe55f096", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1b6e17b3f753980527721aa8e949d2481b2560b/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1b6e17b3f753980527721aa8e949d2481b2560b/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=f1b6e17b3f753980527721aa8e949d2481b2560b", "patch": "@@ -1,4 +1,4 @@\n-3363fc239f642d3c3fb9a138d2833985d85dc083\n+f4069d94a25893afc9f2fcf641359366f3ede017\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "79ed44510a9a9ff75572ec998cf4649557c498f5", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 82, "deletions": 9, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1b6e17b3f753980527721aa8e949d2481b2560b/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1b6e17b3f753980527721aa8e949d2481b2560b/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=f1b6e17b3f753980527721aa8e949d2481b2560b", "patch": "@@ -59,6 +59,67 @@ Expression::traverse_subexpressions(Traverse* traverse)\n   return this->do_traverse(traverse);\n }\n \n+// A traversal used to set the location of subexpressions.\n+\n+class Set_location : public Traverse\n+{\n+ public:\n+  Set_location(Location loc)\n+    : Traverse(traverse_expressions),\n+      loc_(loc)\n+  { }\n+\n+  int\n+  expression(Expression** pexpr);\n+\n+ private:\n+  Location loc_;\n+};\n+\n+// Set the location of an expression.\n+\n+int\n+Set_location::expression(Expression** pexpr)\n+{\n+  // Some expressions are shared or don't have an independent\n+  // location, so we shouldn't change their location.  This is the set\n+  // of expressions for which do_copy is just \"return this\" or\n+  // otherwise does not pass down the location.\n+  switch ((*pexpr)->classification())\n+    {\n+    case Expression::EXPRESSION_ERROR:\n+    case Expression::EXPRESSION_VAR_REFERENCE:\n+    case Expression::EXPRESSION_ENCLOSED_VAR_REFERENCE:\n+    case Expression::EXPRESSION_STRING:\n+    case Expression::EXPRESSION_FUNC_DESCRIPTOR:\n+    case Expression::EXPRESSION_TYPE:\n+    case Expression::EXPRESSION_BOOLEAN:\n+    case Expression::EXPRESSION_CONST_REFERENCE:\n+    case Expression::EXPRESSION_NIL:\n+    case Expression::EXPRESSION_TYPE_DESCRIPTOR:\n+    case Expression::EXPRESSION_GC_SYMBOL:\n+    case Expression::EXPRESSION_PTRMASK_SYMBOL:\n+    case Expression::EXPRESSION_TYPE_INFO:\n+    case Expression::EXPRESSION_STRUCT_FIELD_OFFSET:\n+      return TRAVERSE_CONTINUE;\n+    default:\n+      break;\n+    }\n+\n+  (*pexpr)->location_ = this->loc_;\n+  return TRAVERSE_CONTINUE;\n+}\n+\n+// Set the location of an expression and its subexpressions.\n+\n+void\n+Expression::set_location(Location loc)\n+{\n+  this->location_ = loc;\n+  Set_location sl(loc);\n+  this->traverse_subexpressions(&sl);\n+}\n+\n // Default implementation for do_traverse for child classes.\n \n int\n@@ -9389,6 +9450,8 @@ Builtin_call_expression::do_is_constant() const\n \tif (arg == NULL)\n \t  return false;\n \tType* arg_type = arg->type();\n+\tif (arg_type->is_error())\n+\t  return true;\n \n \tif (arg_type->points_to() != NULL\n \t    && arg_type->points_to()->array_type() != NULL\n@@ -9460,6 +9523,8 @@ Builtin_call_expression::do_numeric_constant_value(Numeric_constant* nc) const\n       if (arg == NULL)\n \treturn false;\n       Type* arg_type = arg->type();\n+      if (arg_type->is_error())\n+\treturn false;\n \n       if (this->code_ == BUILTIN_LEN && arg_type->is_string_type())\n \t{\n@@ -9482,17 +9547,25 @@ Builtin_call_expression::do_numeric_constant_value(Numeric_constant* nc) const\n \t{\n \t  if (this->seen_)\n \t    return false;\n-\t  Expression* e = arg_type->array_type()->length();\n-\t  this->seen_ = true;\n-\t  bool r = e->numeric_constant_value(nc);\n-\t  this->seen_ = false;\n-\t  if (r)\n+\n+\t  // We may be replacing this expression with a constant\n+\t  // during lowering, so verify the type to report any errors.\n+\t  // It's OK to verify an array type more than once.\n+\t  arg_type->verify();\n+\t  if (!arg_type->is_error())\n \t    {\n-\t      if (!nc->set_type(Type::lookup_integer_type(\"int\"), false,\n-\t\t\t\tthis->location()))\n-\t\tr = false;\n+\t      Expression* e = arg_type->array_type()->length();\n+\t      this->seen_ = true;\n+\t      bool r = e->numeric_constant_value(nc);\n+\t      this->seen_ = false;\n+\t      if (r)\n+\t\t{\n+\t\t  if (!nc->set_type(Type::lookup_integer_type(\"int\"), false,\n+\t\t\t\t    this->location()))\n+\t\t    r = false;\n+\t\t}\n+\t      return r;\n \t    }\n-\t  return r;\n \t}\n     }\n   else if (this->code_ == BUILTIN_SIZEOF"}, {"sha": "712f6870211088f4fd275a560a1776285fdc01b8", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1b6e17b3f753980527721aa8e949d2481b2560b/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1b6e17b3f753980527721aa8e949d2481b2560b/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=f1b6e17b3f753980527721aa8e949d2481b2560b", "patch": "@@ -549,6 +549,16 @@ class Expression\n   location() const\n   { return this->location_; }\n \n+  // Set the location of an expression and all its subexpressions.\n+  // This is used for const declarations where the expression is\n+  // copied from an earlier declaration.\n+  void\n+  set_location(Location loc);\n+\n+  // For set_location.  This should really be a local class in\n+  // Expression, but it needs types defined in gogo.h.\n+  friend class Set_location;\n+\n   // Return whether this is a constant expression.\n   bool\n   is_constant() const"}, {"sha": "a4740cfad0e302a961498e8066739cfdd3c5bc12", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1b6e17b3f753980527721aa8e949d2481b2560b/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1b6e17b3f753980527721aa8e949d2481b2560b/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=f1b6e17b3f753980527721aa8e949d2481b2560b", "patch": "@@ -1442,6 +1442,7 @@ Parse::const_decl()\n void\n Parse::const_spec(int iota, Type** last_type, Expression_list** last_expr_list)\n {\n+  Location loc = this->location();\n   Typed_identifier_list til;\n   this->identifier_list(&til);\n \n@@ -1466,7 +1467,11 @@ Parse::const_spec(int iota, Type** last_type, Expression_list** last_expr_list)\n       for (Expression_list::const_iterator p = (*last_expr_list)->begin();\n \t   p != (*last_expr_list)->end();\n \t   ++p)\n-\texpr_list->push_back((*p)->copy());\n+\t{\n+\t  Expression* copy = (*p)->copy();\n+\t  copy->set_location(loc);\n+\t  expr_list->push_back(copy);\n+\t}\n     }\n   else\n     {"}]}