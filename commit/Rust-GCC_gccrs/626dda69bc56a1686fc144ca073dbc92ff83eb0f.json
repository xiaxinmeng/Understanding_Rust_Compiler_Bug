{"sha": "626dda69bc56a1686fc144ca073dbc92ff83eb0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI2ZGRhNjliYzU2YTE2ODZmYzE0NGNhMDczZGJjOTJmZjgzZWIwZg==", "commit": {"author": {"name": "Chris Fairles", "email": "cfairles@gcc.gnu.org", "date": "2009-02-13T23:08:50Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-02-13T23:08:50Z"}, "message": "thread (_Impl_base): Move _M_id out and into ...\n\n2009-02-13  Chris Fairles  <cfairles@gcc.gnu.org>\n\t    Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/thread (_Impl_base): Move _M_id out and into ...\n\t(thread): ...here. Call _M_make_routine in body of constructors.\n\tAdjust data member usage to reflect changes.\n\t(_M_make_routine): From _M_make_shared_data.\n\t(_M_start_thread): Add __shared_base_type argument.\n\t* src/thread.cc: Fixups for above.\n\t* config/abi/pre/gnu.ver: Adjust exports.\n\t* testsuite/30_threads/thread/native_handle/typesizes.cc: Enable.\n\t* testsuite/30_threads/thread/cons/assign_neg.cc: Adjust line numbers.\n\t* testsuite/30_threads/thread/cons/copy_neg.cc: Same.\n\n\nCo-Authored-By: Benjamin Kosnik <bkoz@redhat.com>\n\nFrom-SVN: r144171", "tree": {"sha": "6e674392fa11494d375b32c8b0725a6b0d0cc32d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e674392fa11494d375b32c8b0725a6b0d0cc32d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/626dda69bc56a1686fc144ca073dbc92ff83eb0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/626dda69bc56a1686fc144ca073dbc92ff83eb0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/626dda69bc56a1686fc144ca073dbc92ff83eb0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/626dda69bc56a1686fc144ca073dbc92ff83eb0f/comments", "author": null, "committer": null, "parents": [{"sha": "2d05f84dc4adbeb3881a7d7b27b65520aef8bb5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d05f84dc4adbeb3881a7d7b27b65520aef8bb5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d05f84dc4adbeb3881a7d7b27b65520aef8bb5c"}], "stats": {"total": 95, "additions": 49, "deletions": 46}, "files": [{"sha": "c8d9d410926d2d78571dfaee7aa9d049e8c19837", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/626dda69bc56a1686fc144ca073dbc92ff83eb0f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/626dda69bc56a1686fc144ca073dbc92ff83eb0f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=626dda69bc56a1686fc144ca073dbc92ff83eb0f", "patch": "@@ -1,3 +1,17 @@\n+2009-02-13  Chris Fairles  <cfairles@gcc.gnu.org>\n+\t    Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/thread (_Impl_base): Move _M_id out and into ...\n+\t(thread): ...here. Call _M_make_routine in body of constructors.\n+\tAdjust data member usage to reflect changes.\n+\t(_M_make_routine): From _M_make_shared_data.\n+\t(_M_start_thread): Add __shared_base_type argument.\n+\t* src/thread.cc: Fixups for above.\n+\t* config/abi/pre/gnu.ver: Adjust exports.\n+\t* testsuite/30_threads/thread/native_handle/typesizes.cc: Enable.\n+\t* testsuite/30_threads/thread/cons/assign_neg.cc: Adjust line numbers.\n+\t* testsuite/30_threads/thread/cons/copy_neg.cc: Same.\n+\n 2009-02-12  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/util/thread/all.h (compare_type_to_native_type_sizes): To..."}, {"sha": "f5e6d2fbca628fbfc923ee9f49cfe8bf6050d20c", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/626dda69bc56a1686fc144ca073dbc92ff83eb0f/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/626dda69bc56a1686fc144ca073dbc92ff83eb0f/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=626dda69bc56a1686fc144ca073dbc92ff83eb0f", "patch": "@@ -897,9 +897,9 @@ GLIBCXX_3.4.11 {\n     _ZNSt22condition_variable_anyD2Ev;\n \n     # thread\n-    _ZNSt6thread15_M_start_threadEv;\n     _ZNSt6thread4joinEv;\n     _ZNSt6thread6detachEv;\n+    _ZNSt6thread15_M_start_threadESt10shared_ptrINS_10_Impl_baseEE;\n \n     # system_error\n     _ZSt15system_category;"}, {"sha": "8cd0e3a230f26be24bbd644ebfb09b9f85db6dba", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 20, "deletions": 30, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/626dda69bc56a1686fc144ca073dbc92ff83eb0f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/626dda69bc56a1686fc144ca073dbc92ff83eb0f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=626dda69bc56a1686fc144ca073dbc92ff83eb0f", "patch": "@@ -57,14 +57,14 @@ namespace std\n   class thread\n   {\n   public:\n-    typedef __gthread_t\t \t\tnative_handle_type;\n+    typedef __gthread_t\t\t\tnative_handle_type;\n     struct _Impl_base;\n     typedef shared_ptr<_Impl_base>\t__shared_base_type;\n \n     /// thread::id\n     class id\n     {\n-      native_handle_type \t_M_thread;\n+      native_handle_type\t_M_thread;\n \n     public:\n       id() : _M_thread() { }\n@@ -88,35 +88,31 @@ namespace std\n \toperator<<(basic_ostream<_CharT, _Traits>&& __out, thread::id __id);\n     };\n \n+    // Simple base type that the templatized, derived class containing\n+    // an abitrary functor can be converted to and called.\n     struct _Impl_base\n     {\n-      id\t\t\t_M_id;\n-\t__shared_base_type\t_M_this_ptr;\n-\n-      _Impl_base() = default;\n+      __shared_base_type\t_M_this_ptr;\n \n       virtual ~_Impl_base() = default;\n \n-      virtual void \n-      _M_run() = 0;\n+      virtual void _M_run() = 0;\n     };\n \n     template<typename _Callable>\n-      class _Impl : public _Impl_base\n+      struct _Impl : public _Impl_base\n       {\n-\t_Callable \t\t_M_func;\n+\t_Callable\t\t_M_func;\n \n-      public:\n \t_Impl(_Callable&& __f) : _M_func(std::forward<_Callable>(__f))\n \t{ }\n \n-\tvoid \n+\tvoid\n \t_M_run() { _M_func(); }\n       };\n \n   private:\n-    // NB: Store the base type here.\n-    __shared_base_type \t\t_M_data;\n+    id\t\t\t\t_M_id;\n \n   public:\n     thread() = default;\n@@ -127,13 +123,11 @@ namespace std\n \n     template<typename _Callable>\n       explicit thread(_Callable __f)\n-      : _M_data(_M_make_shared_data<_Callable>(__f))\n-      { _M_start_thread(); }\n+      { _M_start_thread(_M_make_routine<_Callable>(__f)); }\n \n     template<typename _Callable, typename... _Args>\n       thread(_Callable&& __f, _Args&&... __args)\n-      : _M_data(_M_make_shared_data(std::bind(__f, __args...)))\n-      { _M_start_thread(); }\n+      { _M_start_thread(_M_make_routine(std::bind(__f, __args...))); }\n \n     ~thread()\n     {\n@@ -153,11 +147,11 @@ namespace std\n \n     void\n     swap(thread&& __t)\n-    { std::swap(_M_data, __t._M_data); }\n+    { std::swap(_M_id, __t._M_id); }\n \n     bool\n     joinable() const\n-    { return _M_data; }\n+    { return !(_M_id == id()); }\n \n     void\n     join();\n@@ -167,34 +161,30 @@ namespace std\n \n     thread::id\n     get_id() const\n-    {\n-      if (_M_data)\n-\treturn thread::id(_M_data->_M_id._M_thread);\n-      else\n-\treturn thread::id();\n-    }\n+    { return _M_id; }\n \n     /** @pre thread is joinable\n      */\n     native_handle_type\n     native_handle()\n-    { return _M_data->_M_id._M_thread; }\n+    { return _M_id._M_thread; }\n \n     // Returns a value that hints at the number of hardware thread contexts.\n     static unsigned int\n     hardware_concurrency()\n     { return 0; }\n \n   private:\n+    void\n+    _M_start_thread(__shared_base_type);\n+\n     template<typename _Callable>\n       shared_ptr<_Impl<_Callable>>\n-      _M_make_shared_data(_Callable&& __f)\n+      _M_make_routine(_Callable&& __f)\n       {\n \t// Create and allocate full data structure, not base.\n \treturn make_shared<_Impl<_Callable>>(std::forward<_Callable>(__f));\n       }\n-\n-    void _M_start_thread();\n   };\n \n   inline void"}, {"sha": "ad399254fba149beb5b43f92d77f508967e3e2a3", "filename": "libstdc++-v3/src/thread.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/626dda69bc56a1686fc144ca073dbc92ff83eb0f/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/626dda69bc56a1686fc144ca073dbc92ff83eb0f/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc?ref=626dda69bc56a1686fc144ca073dbc92ff83eb0f", "patch": "@@ -61,41 +61,41 @@ namespace std\n   {\n     int __e = EINVAL;\n \n-    if (_M_data)\n+    if (_M_id != id())\n     {\n       void* __r = 0;\n-      __e = __gthread_join(_M_data->_M_id._M_thread, &__r);\n+      __e = __gthread_join(_M_id._M_thread, &__r);\n     }\n \n     if (__e)\n       __throw_system_error(__e);\n \n-    _M_data.reset();\n+    _M_id = id();\n   }\n \n   void\n   thread::detach()\n   {\n     int __e = EINVAL;\n \n-    if (_M_data)\n-      __e = __gthread_detach(_M_data->_M_id._M_thread);\n+    if (_M_id != id())\n+      __e = __gthread_detach(_M_id._M_thread);\n \n     if (__e)\n       __throw_system_error(__e);\n \n-    _M_data.reset();\n+    _M_id = id();\n   }\n \n   void\n-  thread::_M_start_thread()\n+  thread::_M_start_thread(__shared_base_type __b)\n   {\n-    _M_data->_M_this_ptr = _M_data;\n-    int __e = __gthread_create(&_M_data->_M_id._M_thread,\n-\t\t\t       &execute_native_thread_routine, _M_data.get());\n+    __b->_M_this_ptr = __b;\n+    int __e = __gthread_create(&_M_id._M_thread,\n+\t\t\t       &execute_native_thread_routine, __b.get());\n     if (__e)\n     {\n-      _M_data->_M_this_ptr.reset();\n+      __b->_M_this_ptr.reset();\n       __throw_system_error(__e);\n     }\n   }"}, {"sha": "12a2d550df7fdffe8868477b36c1c8d6800f6af7", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/626dda69bc56a1686fc144ca073dbc92ff83eb0f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/626dda69bc56a1686fc144ca073dbc92ff83eb0f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fassign_neg.cc?ref=626dda69bc56a1686fc144ca073dbc92ff83eb0f", "patch": "@@ -33,4 +33,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 32 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 144 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 138 }"}, {"sha": "d94b92bec125664e41a6d053daaa996de6a154cd", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/626dda69bc56a1686fc144ca073dbc92ff83eb0f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/626dda69bc56a1686fc144ca073dbc92ff83eb0f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fcopy_neg.cc?ref=626dda69bc56a1686fc144ca073dbc92ff83eb0f", "patch": "@@ -32,5 +32,5 @@ void test01()\n }\n \n // { dg-error \"here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 123 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 119 }\n // { dg-excess-errors \"In file included from\" }"}, {"sha": "6f3f650df4357a8776d1c6a09cd3beaa34a096f6", "filename": "libstdc++-v3/testsuite/30_threads/thread/native_handle/typesizes.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/626dda69bc56a1686fc144ca073dbc92ff83eb0f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/626dda69bc56a1686fc144ca073dbc92ff83eb0f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fnative_handle%2Ftypesizes.cc?ref=626dda69bc56a1686fc144ca073dbc92ff83eb0f", "patch": "@@ -29,7 +29,6 @@\n int main()\n {\n   typedef std::thread test_type;\n-  // XX disable for now\n-  //__gnu_test::compare_type_to_native_type<test_type>();\n+  __gnu_test::compare_type_to_native_type<test_type>();\n   return 0;\n }"}]}