{"sha": "385e8144121c9dfc0f8eb1a096db3e68183246bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg1ZTgxNDQxMjFjOWRmYzBmOGViMWEwOTZkYjNlNjgxODMyNDZiYg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-04-06T17:58:50Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-04-06T17:58:50Z"}, "message": "re PR fortran/18918 (Eventually support Fortran 2008's coarrays [co-arrays])\n\n2010-04-06  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/18918\n        * iso-fortran-env.def: Add the integer parameters\n        * atomic_int_kind,\n        atomic_logical_kind, iostat_inquire_internal_unit, stat_locked,\n        stat_locked_other_image, stat_stopped_image and stat_unlocked of\n        Fortran 2008.\n        * intrinsic.texi (iso_fortran_env): Ditto.\n        * libgfortran.h (libgfortran_stat_codes): New enum.\n        * module.c (use_iso_fortran_env_module): Honour -std= when\n        * loading\n        constants from the intrinsic module.\n\n2010-04-06  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/18918\n        * gfortran.dg/iso_fortran_env_5.f90: New test.\n        * gfortran.dg/iso_fortran_env_6.f90: New test.\n\nFrom-SVN: r158011", "tree": {"sha": "97587fcc9510fd4259031a04b6099613e4e70766", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97587fcc9510fd4259031a04b6099613e4e70766"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/385e8144121c9dfc0f8eb1a096db3e68183246bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/385e8144121c9dfc0f8eb1a096db3e68183246bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/385e8144121c9dfc0f8eb1a096db3e68183246bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/385e8144121c9dfc0f8eb1a096db3e68183246bb/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0a4a61c3de7ac131afc0014c6a8970ca6dcdeca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a4a61c3de7ac131afc0014c6a8970ca6dcdeca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0a4a61c3de7ac131afc0014c6a8970ca6dcdeca"}], "stats": {"total": 158, "additions": 151, "deletions": 7}, "files": [{"sha": "f68a6cafdd91f322e83f40212889b890f524b531", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385e8144121c9dfc0f8eb1a096db3e68183246bb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385e8144121c9dfc0f8eb1a096db3e68183246bb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=385e8144121c9dfc0f8eb1a096db3e68183246bb", "patch": "@@ -1,3 +1,15 @@\n+2010-04-06  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/18918\n+\t* iso-fortran-env.def: Add the integer parameters atomic_int_kind,\n+\tatomic_logical_kind, iostat_inquire_internal_unit, stat_locked,\n+\tstat_locked_other_image, stat_stopped_image and stat_unlocked of\n+\tFortran 2008.\n+\t* intrinsic.texi (iso_fortran_env): Ditto.\n+\t* libgfortran.h (libgfortran_stat_codes): New enum.\n+\t* module.c (use_iso_fortran_env_module): Honour -std= when loading\n+\tconstants from the intrinsic module.\n+\n 2010-04-06  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/39997"}, {"sha": "4439464c40107d8bffcd172151bcfd6c3106d553", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385e8144121c9dfc0f8eb1a096db3e68183246bb/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385e8144121c9dfc0f8eb1a096db3e68183246bb/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=385e8144121c9dfc0f8eb1a096db3e68183246bb", "patch": "@@ -11281,14 +11281,21 @@ Fortran 95 elemental function: @ref{IEOR}\n @section @code{ISO_FORTRAN_ENV}\n @table @asis\n @item @emph{Standard}:\n-Fortran 2003 and later; @code{INT8}, @code{INT16}, @code{INT32}, @code{INT64},\n-@code{REAL32}, @code{REAL64}, @code{REAL128} are Fortran 2008 or later\n+Fortran 2003 and later, except when otherwise noted\n @end table\n \n The @code{ISO_FORTRAN_ENV} module provides the following scalar default-integer\n named constants:\n \n @table @asis\n+@item @code{ATOMIC_INT_KIND}:\n+Default-kind integer constant to be used as kind parameter when defining\n+integer variables used in atomic operations. (Fortran 2008 or later.)\n+\n+@item @code{ATOMIC_LOGICAL_KIND}:\n+Default-kind integer constant to be used as kind parameter when defining\n+logical variables used in atomic operations. (Fortran 2008 or later.)\n+\n @item @code{CHARACTER_STORAGE_SIZE}:\n Size in bits of the character storage unit.\n \n@@ -11302,10 +11309,10 @@ Size in bits of the file-storage unit.\n Identifies the preconnected unit identified by the asterisk\n (@code{*}) in @code{READ} statement.\n \n-@item @code{INT8}, @code{INT16}, @code{INT32}, @code{INT64}\n+@item @code{INT8}, @code{INT16}, @code{INT32}, @code{INT64}:\n Kind type parameters to specify an INTEGER type with a storage\n size of 16, 32, and 64 bits. It is negative if a target platform\n-does not support the particular kind.\n+does not support the particular kind. (Fortran 2008 or later.)\n \n @item @code{IOSTAT_END}:\n The value assigned to the variable passed to the IOSTAT= specifier of\n@@ -11315,17 +11322,41 @@ an input/output statement if an end-of-file condition occurred.\n The value assigned to the variable passed to the IOSTAT= specifier of\n an input/output statement if an end-of-record condition occurred.\n \n+@item @code{IOSTAT_INQUIRE_INTERNAL_UNIT}:\n+Scalar default-integer constant, used by @code{INQUIRE} for the\n+IOSTAT= specifier to denote an that a unit number identifies an\n+internal unit. (Fortran 2008 or later.)\n+\n @item @code{NUMERIC_STORAGE_SIZE}:\n The size in bits of the numeric storage unit.\n \n @item @code{OUTPUT_UNIT}:\n Identifies the preconnected unit identified by the asterisk\n (@code{*}) in @code{WRITE} statement.\n \n-@item @code{REAL32}, @code{REAL64}, @code{REAL128}\n+@item @code{REAL32}, @code{REAL64}, @code{REAL128}:\n Kind type parameters to specify a REAL type with a storage\n size of 32, 64, and 128 bits. It is negative if a target platform\n-does not support the particular kind.\n+does not support the particular kind. (Fortran 2008 or later.)\n+\n+@item @code{STAT_LOCKED}:\n+Scalar default-integer constant used as STAT= return value by @code{LOCK} to\n+denote that the lock variable is locked by the executing image. (Fortran 2008\n+or later.)\n+\n+@item @code{STAT_LOCKED_OTHER_IMAGE}:\n+Scalar default-integer constant used as STAT= return value by @code{UNLOCK} to\n+denote that the lock variable is locked by another image. (Fortran 2008 or\n+later.)\n+\n+@item @code{STAT_STOPPED_IMAGE}:\n+Positive, scalar default-integer constant used as STAT= return value if the\n+argument in the statement requires synchronisation with an image, which has\n+initiated the termination of the execution. (Fortran 2008 or later.)\n+\n+@item @code{STAT_UNLOCKED}:\n+Scalar default-integer constant used as STAT= return value by @code{UNLOCK} to\n+denote that the lock variable is unlocked. (Fortran 2008 or later.)\n @end table\n \n "}, {"sha": "6c009f1c8fd0d9d87ec318c2b2e231cdf451f61a", "filename": "gcc/fortran/iso-fortran-env.def", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385e8144121c9dfc0f8eb1a096db3e68183246bb/gcc%2Ffortran%2Fiso-fortran-env.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385e8144121c9dfc0f8eb1a096db3e68183246bb/gcc%2Ffortran%2Fiso-fortran-env.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fiso-fortran-env.def?ref=385e8144121c9dfc0f8eb1a096db3e68183246bb", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2006, 2007, 2008 Free Software Foundation, Inc.\n+/* Copyright (C) 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -25,6 +25,10 @@ along with GCC; see the file COPYING3.  If not see\n      -- the value it has\n      -- the standard that supports this type  */ \n \n+NAMED_INTCST (ISOFORTRANENV_FILE_ATOMIC_INT_KIND, \"atomic_int_kind\", \\\n+              gfc_default_integer_kind, GFC_STD_F2008)\n+NAMED_INTCST (ISOFORTRANENV_FILE_ATOMIC_LOGICAL_KIND, \"atomic_logical_kind\", \\\n+              gfc_default_logical_kind, GFC_STD_F2008)\n NAMED_INTCST (ISOFORTRANENV_CHARACTER_STORAGE_SIZE, \"character_storage_size\", \\\n               gfc_character_storage_size, GFC_STD_F2003)\n NAMED_INTCST (ISOFORTRANENV_ERROR_UNIT, \"error_unit\", GFC_STDERR_UNIT_NUMBER, \\\n@@ -45,6 +49,9 @@ NAMED_INTCST (ISOFORTRANENV_IOSTAT_END, \"iostat_end\", LIBERROR_END, \\\n               GFC_STD_F2003)\n NAMED_INTCST (ISOFORTRANENV_IOSTAT_EOR, \"iostat_eor\", LIBERROR_EOR, \\\n               GFC_STD_F2003)\n+NAMED_INTCST (ISOFORTRANENV_IOSTAT_INQUIRE_INTERNAL_UNIT, \\\n+              \"iostat_inquire_internal_unit\", GFC_INQUIRE_INTERNAL_UNIT, \\\n+              GFC_STD_F2008)\n NAMED_INTCST (ISOFORTRANENV_NUMERIC_STORAGE_SIZE, \"numeric_storage_size\", \\\n               gfc_numeric_storage_size, GFC_STD_F2003)\n NAMED_INTCST (ISOFORTRANENV_OUTPUT_UNIT, \"output_unit\", GFC_STDOUT_UNIT_NUMBER, \\\n@@ -55,3 +62,13 @@ NAMED_INTCST (ISOFORTRANENV_REAL64, \"real64\", \\\n               gfc_get_real_kind_from_width_isofortranenv (64), GFC_STD_F2008)\n NAMED_INTCST (ISOFORTRANENV_REAL128, \"real128\", \\\n               gfc_get_real_kind_from_width_isofortranenv (128), GFC_STD_F2008)\n+NAMED_INTCST (ISOFORTRANENV_FILE_STAT_LOCKED, \"stat_locked\", \\\n+              GFC_STAT_LOCKED, GFC_STD_F2008)\n+NAMED_INTCST (ISOFORTRANENV_FILE_STAT_LOCKED_OTHER_IMAGE, \\\n+              \"stat_locked_other_image\", \\\n+\t      GFC_STAT_LOCKED_OTHER_IMAGE, GFC_STD_F2008)\n+NAMED_INTCST (ISOFORTRANENV_FILE_STAT_STOPPED_IMAGE, \"stat_stopped_image\", \\\n+              GFC_STAT_STOPPED_IMAGE, GFC_STD_F2008)\n+NAMED_INTCST (ISOFORTRANENV_FILE_STAT_UNLOCKED, \"stat_unlocked\", \\\n+              GFC_STAT_UNLOCKED, GFC_STD_F2008)\n+"}, {"sha": "85bd43df98c047a2a0a6c967baab9b517a044101", "filename": "gcc/fortran/libgfortran.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385e8144121c9dfc0f8eb1a096db3e68183246bb/gcc%2Ffortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385e8144121c9dfc0f8eb1a096db3e68183246bb/gcc%2Ffortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flibgfortran.h?ref=385e8144121c9dfc0f8eb1a096db3e68183246bb", "patch": "@@ -96,6 +96,15 @@ typedef enum\n }\n libgfortran_error_codes;\n \n+typedef enum\n+{\n+  GFC_STAT_UNLOCKED = 0,\n+  GFC_STAT_LOCKED,\n+  GFC_STAT_LOCKED_OTHER_IMAGE,\n+  GFC_STAT_STOPPED_IMAGE,\n+  GFC_INQUIRE_INTERNAL_UNIT  /* Must be different from STAT_STOPPED_IMAGE.  */\n+}\n+libgfortran_stat_codes;\n \n /* Default unit number for preconnected standard input and output.  */\n #define GFC_STDIN_UNIT_NUMBER 5"}, {"sha": "666fd84240ba849f8f2a1c21b559b77bc88e4b4f", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385e8144121c9dfc0f8eb1a096db3e68183246bb/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385e8144121c9dfc0f8eb1a096db3e68183246bb/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=385e8144121c9dfc0f8eb1a096db3e68183246bb", "patch": "@@ -5401,6 +5401,11 @@ use_iso_fortran_env_module (void)\n \t\t\t   gfc_option.flag_default_integer\n \t\t\t     ? \"-fdefault-integer-8\" : \"-fdefault-real-8\");\n \n+        if (gfc_notify_std (symbol[i].standard, \"The symbol '%s', referrenced \"\n+\t\t\t    \"at %C, is not in the selected standard\",\n+\t\t\t    symbol[i].name) == FAILURE)\n+\t  continue;\n+\n \tcreate_int_parameter (u->local_name[0] ? u->local_name\n \t\t\t\t\t       : symbol[i].name,\n \t\t\t      symbol[i].value, mod, INTMOD_ISO_FORTRAN_ENV,\n@@ -5411,6 +5416,10 @@ use_iso_fortran_env_module (void)\n       for (i = 0; symbol[i].name; i++)\n \t{\n \t  local_name = NULL;\n+\n+\t  if ((gfc_option.allow_std & symbol[i].standard) == 0)\n+\t    break;\n+\n \t  for (u = gfc_rename_list; u; u = u->next)\n \t    {\n \t      if (strcmp (symbol[i].name, u->use_name) == 0)"}, {"sha": "4053293bb45a8f2940531c37db32cd7014d4cedc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385e8144121c9dfc0f8eb1a096db3e68183246bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385e8144121c9dfc0f8eb1a096db3e68183246bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=385e8144121c9dfc0f8eb1a096db3e68183246bb", "patch": "@@ -1,3 +1,9 @@\n+2010-04-06  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/18918\n+\t* gfortran.dg/iso_fortran_env_5.f90: New test.\n+\t* gfortran.dg/iso_fortran_env_6.f90: New test.\n+\n 2010-04-06  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/39997"}, {"sha": "92c2e40dea5a6439246071a919abea3a6e18a778", "filename": "gcc/testsuite/gfortran.dg/iso_fortran_env_5.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385e8144121c9dfc0f8eb1a096db3e68183246bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385e8144121c9dfc0f8eb1a096db3e68183246bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_5.f90?ref=385e8144121c9dfc0f8eb1a096db3e68183246bb", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-original\" }\n+!\n+! Check for new F2008 integer constants, needed for\n+! coarray support (cf. PR fortran/18918)\n+!\n+\n+USE iso_fortran_env\n+implicit none\n+integer :: i\n+integer(kind=ATOMIC_INT_KIND) :: atomic_int\n+logical(kind=ATOMIC_LOGICAL_KIND) :: atomic_bool\n+\n+i = 0\n+if (IOSTAT_INQUIRE_INTERNAL_UNIT <= 0) call abort()\n+if (IOSTAT_INQUIRE_INTERNAL_UNIT == STAT_STOPPED_IMAGE) call abort()\n+if (STAT_STOPPED_IMAGE <= 0) call abort()\n+\n+if ((STAT_LOCKED_OTHER_IMAGE == STAT_LOCKED) &\n+    .or.(STAT_LOCKED_OTHER_IMAGE == STAT_UNLOCKED)) call abort()\n+if (STAT_LOCKED == STAT_UNLOCKED) call abort()\n+\n+end\n+\n+! { dg-final { scan-tree-dump-times \"abort\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }\n+"}, {"sha": "951e1384f94e6021b0dfb6d1ecb6441226ac1020", "filename": "gcc/testsuite/gfortran.dg/iso_fortran_env_6.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385e8144121c9dfc0f8eb1a096db3e68183246bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385e8144121c9dfc0f8eb1a096db3e68183246bb/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fiso_fortran_env_6.f90?ref=385e8144121c9dfc0f8eb1a096db3e68183246bb", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+!\n+! Check for new F2008 integer constants, needed for\n+! coarray support (cf. PR fortran/18918)\n+!\n+\n+USE iso_fortran_env\n+implicit none\n+integer(kind=ATOMIC_INT_KIND) :: atomic_int ! { dg-error \"has no IMPLICIT type\" }\n+logical(kind=ATOMIC_LOGICAL_KIND) :: atomic_bool ! { dg-error \"has no IMPLICIT type\" }\n+\n+if (IOSTAT_INQUIRE_INTERNAL_UNIT <= 0) call abort() ! { dg-error \"has no IMPLICIT type\" }\n+print *,STAT_STOPPED_IMAGE ! { dg-error \"has no IMPLICIT type\" }\n+print *, STAT_LOCKED_OTHER_IMAGE ! { dg-error \"has no IMPLICIT type\" }\n+print *, STAT_LOCKED ! { dg-error \"has no IMPLICIT type\" }\n+print *, STAT_UNLOCKED ! { dg-error \"has no IMPLICIT type\" }\n+end\n+\n+module m\n+USE iso_fortran_env, only: ATOMIC_INT_KIND ! { dg-error \"is not in the selected standard\" }\n+implicit none\n+end module m\n+\n+module m2\n+USE iso_fortran_env, only: foo => STAT_UNLOCKED ! { dg-error \"is not in the selected standard\" }\n+implicit none\n+end module m2\n+\n+module m3\n+USE iso_fortran_env, foo => IOSTAT_INQUIRE_INTERNAL_UNIT ! { dg-error \"not found\" }\n+implicit none\n+end module m3"}]}