{"sha": "3cec07d501b9e0b836c8a7e9d709e7764aacf4e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NlYzA3ZDUwMWI5ZTBiODM2YzhhN2U5ZDcwOWU3NzY0YWFjZjRlNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-02-03T00:42:48Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-02-03T00:42:48Z"}, "message": "(hash_delete): Step through the hash nodes versus using hash_next to\nincrease efficiency.\n\nFrom-SVN: r13593", "tree": {"sha": "845c31cfe2b7f3e331d782706f0d8c0ce1e43d80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/845c31cfe2b7f3e331d782706f0d8c0ce1e43d80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cec07d501b9e0b836c8a7e9d709e7764aacf4e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cec07d501b9e0b836c8a7e9d709e7764aacf4e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cec07d501b9e0b836c8a7e9d709e7764aacf4e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cec07d501b9e0b836c8a7e9d709e7764aacf4e6/comments", "author": null, "committer": null, "parents": [{"sha": "eb0bc1e9b443cc206bff8d9a7d14c3fd38aca3b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb0bc1e9b443cc206bff8d9a7d14c3fd38aca3b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb0bc1e9b443cc206bff8d9a7d14c3fd38aca3b1"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "7534330fa1c786fc425f6c68d3c650f00a1e7092", "filename": "gcc/objc/hash.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cec07d501b9e0b836c8a7e9d709e7764aacf4e6/gcc%2Fobjc%2Fhash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cec07d501b9e0b836c8a7e9d709e7764aacf4e6/gcc%2Fobjc%2Fhash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fhash.c?ref=3cec07d501b9e0b836c8a7e9d709e7764aacf4e6", "patch": "@@ -1,5 +1,5 @@\n /* Hash tables for Objective C internal structures\n-   Copyright (C) 1993, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1996, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -80,11 +80,24 @@ void\n hash_delete (cache_ptr cache)\n {\n   node_ptr node;\n-\n+  node_ptr next_node;\n+  unsigned int i;\n \n   /* Purge all key/value pairs from the table.  */\n-  while ((node = hash_next (cache, NULL)))\n-    hash_remove (cache, node->key);\n+  /* Step through the nodes one by one and remove every node WITHOUT\n+     using hash_next. this makes hash_delete much more efficient. */\n+  for (i = 0;i < cache->size;i++) {\n+    if ((node = cache->node_table[i])) {\n+      /* an entry in the hash table has been found, now step through the\n+\t nodes next in the list and free them. */\n+      while ((next_node = node->next)) {\n+\thash_remove (cache,node->key);\n+\tnode = next_node;\n+      }\n+\n+      hash_remove (cache,node->key);\n+    }\n+  }\n \n   /* Release the array of nodes and the cache itself.  */\n   objc_free(cache->node_table);\n@@ -242,7 +255,7 @@ hash_value_for_key (cache_ptr cache, const void *key)\n     do {\n       if ((*cache->compare_func)(node->key, key)) {\n         retval = node->value;\n-\tbreak;\n+              break;\n       } else\n         node = node->next;\n     } while (!retval && node);"}]}