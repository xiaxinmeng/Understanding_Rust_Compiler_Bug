{"sha": "7393fa8b1d21eeeb37e59ff8efaebf178fd891e5", "node_id": "C_kwDOANBUbNoAKDczOTNmYThiMWQyMWVlZWIzN2U1OWZmOGVmYWViZjE3OGZkODkxZTU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-28T15:32:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-28T15:33:33Z"}, "message": "libstdc++: Implement std::byteswap for C++23\n\nThis patch attempts to implement P1272R4 (except for the std::bit_cast\nchanges in there which seem quite unrelated to this and will need to be\nfixed on the compiler side).\nWhile at least for GCC __builtin_bswap{16,32,64,128} should work fine\nin constant expressions, I wonder about other compilers, so I'm using\na fallback implementation for constexpr evaluation always.\nIf you think that is unnecessary, I can drop the\n__cpp_if_consteval >= 202106L &&\nif !consteval\n  {\nand\n  }\nand reformat.\nThe fallback implementation is an attempt to make it work even for integral\ntypes that don't have number of bytes divisible by 2 or when __CHAR_BIT__\nis e.g. 16.\n\n2021-11-28  Jakub Jelinek  <jakub@redhat.com>\n\n\t* include/std/bit (__cpp_lib_byteswap, byteswap): Define.\n\t* include/std/version (__cpp_lib_byteswap): Define.\n\t* testsuite/26_numerics/bit/bit.byteswap/byteswap.cc: New test.\n\t* testsuite/26_numerics/bit/bit.byteswap/version.cc: New test.", "tree": {"sha": "e9783e8c9b7f6b196d9548b10793d0d9c88f83db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9783e8c9b7f6b196d9548b10793d0d9c88f83db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7393fa8b1d21eeeb37e59ff8efaebf178fd891e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7393fa8b1d21eeeb37e59ff8efaebf178fd891e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7393fa8b1d21eeeb37e59ff8efaebf178fd891e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7393fa8b1d21eeeb37e59ff8efaebf178fd891e5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a66c4909fd175ba429f39a3ca30be39ea02ae64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a66c4909fd175ba429f39a3ca30be39ea02ae64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a66c4909fd175ba429f39a3ca30be39ea02ae64"}], "stats": {"total": 189, "additions": 189, "deletions": 0}, "files": [{"sha": "18ce5ca220c1194d9b6980a09c3a2d34928817fa", "filename": "libstdc++-v3/include/std/bit", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7393fa8b1d21eeeb37e59ff8efaebf178fd891e5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7393fa8b1d21eeeb37e59ff8efaebf178fd891e5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit?ref=7393fa8b1d21eeeb37e59ff8efaebf178fd891e5", "patch": "@@ -78,6 +78,55 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n #endif\n \n+#if __cplusplus > 202002L\n+#define __cpp_lib_byteswap 202110L\n+\n+  /// Reverse order of bytes in the object representation of `value`.\n+  template<typename _Tp>\n+    constexpr enable_if_t<is_integral<_Tp>::value, _Tp>\n+    byteswap(_Tp __value) noexcept\n+    {\n+      if constexpr (sizeof(_Tp) == 1)\n+\treturn __value;\n+#if __cpp_if_consteval >= 202106L && __CHAR_BIT__ == 8\n+      if !consteval\n+\t{\n+\t  if constexpr (sizeof(_Tp) == 2)\n+\t    return __builtin_bswap16(__value);\n+\t  if constexpr (sizeof(_Tp) == 4)\n+\t    return __builtin_bswap32(__value);\n+\t  if constexpr (sizeof(_Tp) == 8)\n+\t    return __builtin_bswap64(__value);\n+\t  if constexpr (sizeof(_Tp) == 16)\n+#if __has_builtin(__builtin_bswap128)\n+\t    return __builtin_bswap128(__value);\n+#else\n+\t    return (__builtin_bswap64(__value >> 64)\n+\t\t    | (static_cast<_Tp>(__builtin_bswap64(__value)) << 64));\n+#endif\n+\t}\n+#endif\n+\n+      // Fallback implementation that handles even __int24 etc.\n+      using _Up = typename __make_unsigned<__remove_cv_t<_Tp>>::__type;\n+      size_t __diff = __CHAR_BIT__ * (sizeof(_Tp) - 1);\n+      _Up __mask1 = static_cast<unsigned char>(~0);\n+      _Up __mask2 = __mask1 << __diff;\n+      _Up __val = __value;\n+      for (size_t __i = 0; __i < sizeof(_Tp) / 2; ++__i)\n+\t{\n+\t  _Up __byte1 = __val & __mask1;\n+\t  _Up __byte2 = __val & __mask2;\n+\t  __val = (__val ^ __byte1 ^ __byte2\n+\t\t   ^ (__byte1 << __diff) ^ (__byte2 >> __diff));\n+\t  __mask1 <<= __CHAR_BIT__;\n+\t  __mask2 >>= __CHAR_BIT__;\n+\t  __diff -= 2 * __CHAR_BIT__;\n+\t}\n+      return __val;\n+    }\n+#endif\n+\n   /// @cond undoc\n \n   template<typename _Tp>"}, {"sha": "2d4e9bf4eeed09f0aba367c260d02674a354c70a", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7393fa8b1d21eeeb37e59ff8efaebf178fd891e5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7393fa8b1d21eeeb37e59ff8efaebf178fd891e5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=7393fa8b1d21eeeb37e59ff8efaebf178fd891e5", "patch": "@@ -294,6 +294,7 @@\n #if __cplusplus > 202002L\n // c++2b\n #define __cpp_lib_adaptor_iterator_pair_constructor 202106L\n+#define __cpp_lib_byteswap 202110L\n #define __cpp_lib_invoke_r 202106L\n #define __cpp_lib_is_scoped_enum 202011L\n #if __cpp_lib_concepts"}, {"sha": "f447af020e6539bfc5537c7405a298ae52145c08", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.byteswap/byteswap.cc", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7393fa8b1d21eeeb37e59ff8efaebf178fd891e5/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.byteswap%2Fbyteswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7393fa8b1d21eeeb37e59ff8efaebf178fd891e5/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.byteswap%2Fbyteswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.byteswap%2Fbyteswap.cc?ref=7393fa8b1d21eeeb37e59ff8efaebf178fd891e5", "patch": "@@ -0,0 +1,112 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2b\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <bit>\n+\n+#ifndef __cpp_lib_byteswap\n+# error \"Feature-test macro for byteswap missing in <bit>\"\n+#elif __cpp_lib_byteswap != 202110L\n+# error \"Feature-test macro for byteswap has wrong value in <bit>\"\n+#endif\n+\n+#include <cstdint>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  static_assert( std::byteswap<int8_t>(0x12) == 0x12 );\n+  static_assert( std::byteswap<int16_t>(0x1234) == 0x3412 );\n+  static_assert( std::byteswap<int32_t>(0x12345678) == 0x78563412 );\n+  static_assert( std::byteswap<int64_t>(0x123456789abcdef0)\n+\t\t == static_cast<int64_t>(0xf0debc9a78563412) );\n+  static_assert( std::byteswap<uint8_t>(0x21) == 0x21 );\n+  static_assert( std::byteswap<uint16_t>(0x4321) == 0x2143 );\n+  static_assert( std::byteswap<uint32_t>(0x87654321) == 0x21436587 );\n+  static_assert( std::byteswap<uint64_t>(0xfedcba9876543210)\n+\t\t == static_cast<uint64_t>(0x1032547698badcfe) );\n+#if !defined(__STRICT_ANSI__) && defined __SIZEOF_INT128__\n+  constexpr __int128_t c1 = (static_cast<__int128_t>(0x0102030405060708) << 64\n+\t\t\t     | 0x090a0b0c0d0e0f10);\n+  constexpr __int128_t c2 = (static_cast<__int128_t>(0x100f0e0d0c0b0a09) << 64\n+\t\t\t     | 0x0807060504030201);\n+  constexpr __int128_t c3 = (static_cast<__int128_t>(0xf1e2d3c4b5a69788) << 64\n+\t\t\t     | 0x796a5b4c3d2e1f10);\n+  constexpr __int128_t c4 = (static_cast<__int128_t>(0x101f2e3d4c5b6a79) << 64\n+\t\t\t     | 0x8897a6b5c4d3e2f1);\n+  static_assert( std::byteswap(c1) == c2 );\n+  static_assert( std::byteswap(static_cast<__uint128_t>(c1))\n+\t\t == static_cast<__uint128_t>(c2) );\n+  static_assert( std::byteswap(c3) == c4 );\n+#endif\n+  static_assert( std::byteswap<const uint32_t>(0xdeadbeef) == 0xefbeadde );\n+  static_assert( std::byteswap<volatile uint32_t>(0xdeadbeef) == 0xefbeadde );\n+  static_assert( std::byteswap<int32_t>(0xdeadbeef)\n+\t\t == static_cast<int32_t>(0xefbeadde) );\n+}\n+\n+void\n+test02()\n+{\n+  volatile int8_t a = 0x12;\n+  volatile int16_t b = 0x1234;\n+  volatile int32_t c = 0x12345678;\n+  volatile int64_t d = 0x123456789abcdef0;\n+  volatile uint8_t e = 0x21;\n+  volatile uint16_t f = 0x4321;\n+  volatile uint32_t g = 0x87654321;\n+  volatile uint64_t h = 0xfedcba9876543210;\n+  VERIFY ( std::byteswap<int8_t>(a) == 0x12 );\n+  VERIFY ( std::byteswap<int16_t>(b) == 0x3412 );\n+  VERIFY ( std::byteswap(c) == 0x78563412 );\n+  VERIFY ( std::byteswap(d) == 0xf0debc9a78563412 );\n+  VERIFY ( std::byteswap<uint8_t>(e) == 0x21 );\n+  VERIFY ( std::byteswap<uint16_t>(f) == 0x2143 );\n+  VERIFY ( std::byteswap(g) == 0x21436587 );\n+  VERIFY ( std::byteswap(h) == 0x1032547698badcfe );\n+  VERIFY ( std::byteswap(std::byteswap<int8_t>(a)) == a );\n+  VERIFY ( std::byteswap(std::byteswap<int16_t>(b)) == b );\n+  VERIFY ( std::byteswap(std::byteswap(c)) == c );\n+  VERIFY ( std::byteswap(std::byteswap(d)) == d );\n+  VERIFY ( std::byteswap(std::byteswap<uint8_t>(e)) == e );\n+  VERIFY ( std::byteswap(std::byteswap<uint16_t>(f)) == f );\n+  VERIFY ( std::byteswap(std::byteswap(g)) == g );\n+  VERIFY ( std::byteswap(std::byteswap(h)) == h );\n+#if !defined(__STRICT_ANSI__) && defined __SIZEOF_INT128__\n+  volatile __int128_t c1 = (static_cast<__int128_t>(0x0102030405060708) << 64\n+\t\t\t    | 0x090a0b0c0d0e0f10);\n+  volatile __int128_t c2 = (static_cast<__int128_t>(0x100f0e0d0c0b0a09) << 64\n+\t\t\t    | 0x0807060504030201);\n+  VERIFY ( std::byteswap(c1) == c2 );\n+  VERIFY ( std::byteswap<__uint128_t>(c1) == static_cast<__uint128_t>(c2) );\n+  VERIFY ( std::byteswap(std::byteswap(c1)) == c1 );\n+  VERIFY ( std::byteswap(std::byteswap<__uint128_t>(c2))\n+\t   == static_cast<__uint128_t>(c2) );\n+#endif\n+  VERIFY ( std::byteswap<const uint32_t>(0xdeadbeef) == 0xefbeadde );\n+  VERIFY ( std::byteswap<volatile uint32_t>(0xdeadbeef) == 0xefbeadde );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "e380d7baf4506886189c4a81ba3f36578560ada0", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.byteswap/version.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7393fa8b1d21eeeb37e59ff8efaebf178fd891e5/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.byteswap%2Fversion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7393fa8b1d21eeeb37e59ff8efaebf178fd891e5/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.byteswap%2Fversion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.byteswap%2Fversion.cc?ref=7393fa8b1d21eeeb37e59ff8efaebf178fd891e5", "patch": "@@ -0,0 +1,27 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2b\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_byteswap\n+# error \"Feature-test macro for bit_cast missing in <version>\"\n+#elif __cpp_lib_byteswap != 202110L\n+# error \"Feature-test macro for byteswap has wrong value in <version>\"\n+#endif"}]}