{"sha": "5f1989e65d23624efdbf26bde56f375e3caa6a22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYxOTg5ZTY1ZDIzNjI0ZWZkYmYyNmJkZTU2ZjM3NWUzY2FhNmEyMg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-07-04T01:55:50Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-07-04T01:55:50Z"}, "message": "c-aux-info.c: Include toplev.h after c-tree.h.\n\ngcc:\n\t* c-aux-info.c: Include toplev.h after c-tree.h.\n\t* c-common.c: Likewise.\n\t(GCC_DIAG_STYLE): Undef.\n\t* c-semantics.c (GCC_DIAG_STYLE): Define.\n\t* c-tree.h (GCC_DIAG_STYLE): Likewise.\n\t* diagnostic.h (inform): Move prototype to toplev.h.\n\t* jump.c: Include diagnostic.h before toplev.h.\n\t* toplev.h (GCC_DIAG_STYLE, ATTRIBUTE_GCC_DIAG): Define.\n\t(warning, error, fatal_error, pedwarn, sorry, inform,\n\terror_for_asm, warning_for_asm): Mark with ATTRIBUTE_GCC_CXXDIAG.\n\ncp:\n\t* cp-tree.h (GCC_DIAG_STYLE, ATTRIBUTE_GCC_CXXDIAG): Define.\n\t(cp_error_at, cp_warning_at, cp_pedwarn_at): Mark with\n\tATTRIBUTE_GCC_CXXDIAG.\n\nFrom-SVN: r68910", "tree": {"sha": "d40d3df53a09947e306cecdd4c52164ae5ff60fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d40d3df53a09947e306cecdd4c52164ae5ff60fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f1989e65d23624efdbf26bde56f375e3caa6a22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1989e65d23624efdbf26bde56f375e3caa6a22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f1989e65d23624efdbf26bde56f375e3caa6a22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1989e65d23624efdbf26bde56f375e3caa6a22/comments", "author": null, "committer": null, "parents": [{"sha": "54c378f0438b6a1d718ef626389fff2ca91a0f9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c378f0438b6a1d718ef626389fff2ca91a0f9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54c378f0438b6a1d718ef626389fff2ca91a0f9f"}], "stats": {"total": 88, "additions": 70, "deletions": 18}, "files": [{"sha": "b9d07ecfb424192c03a42738821c3ebea606a6f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1989e65d23624efdbf26bde56f375e3caa6a22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1989e65d23624efdbf26bde56f375e3caa6a22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f1989e65d23624efdbf26bde56f375e3caa6a22", "patch": "@@ -1,3 +1,16 @@\n+2003-07-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-aux-info.c: Include toplev.h after c-tree.h.\n+\t* c-common.c: Likewise.\n+\t(GCC_DIAG_STYLE): Undef.\n+\t* c-semantics.c (GCC_DIAG_STYLE): Define.\n+\t* c-tree.h (GCC_DIAG_STYLE): Likewise.\n+\t* diagnostic.h (inform): Move prototype to toplev.h.\n+\t* jump.c: Include diagnostic.h before toplev.h.\n+\t* toplev.h (GCC_DIAG_STYLE, ATTRIBUTE_GCC_DIAG): Define.\n+\t(warning, error, fatal_error, pedwarn, sorry, inform,\n+\terror_for_asm, warning_for_asm): Mark with ATTRIBUTE_GCC_CXXDIAG.\n+\n 2003-07-03  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* cfglayout.c (cfg_layout_duplicate_bb): Do not update frequencies"}, {"sha": "e785ade2239c7971abdddd2fa51dbaa0d3b9fb50", "filename": "gcc/c-aux-info.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1989e65d23624efdbf26bde56f375e3caa6a22/gcc%2Fc-aux-info.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1989e65d23624efdbf26bde56f375e3caa6a22/gcc%2Fc-aux-info.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-aux-info.c?ref=5f1989e65d23624efdbf26bde56f375e3caa6a22", "patch": "@@ -26,10 +26,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n-#include \"toplev.h\"\n #include \"flags.h\"\n #include \"tree.h\"\n #include \"c-tree.h\"\n+#include \"toplev.h\"\n \n enum formals_style_enum {\n   ansi,"}, {"sha": "6513ca81c0de8cdae3b4697ddf93c1f70b2fd562", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1989e65d23624efdbf26bde56f375e3caa6a22/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1989e65d23624efdbf26bde56f375e3caa6a22/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=5f1989e65d23624efdbf26bde56f375e3caa6a22", "patch": "@@ -26,7 +26,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"intl.h\"\n #include \"tree.h\"\n #include \"flags.h\"\n-#include \"toplev.h\"\n #include \"output.h\"\n #include \"c-pragma.h\"\n #include \"rtl.h\"\n@@ -42,6 +41,11 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"langhooks.h\"\n #include \"tree-inline.h\"\n #include \"c-tree.h\"\n+/* In order to ensure we use a common subset of valid specifiers\n+   (between the various C family frontends) in this file, we restrict\n+   ourselves to the generic specifier set.  */\n+#undef GCC_DIAG_STYLE\n+#include \"toplev.h\"\n \n cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n "}, {"sha": "4e27bec22b27f01d267def14e49e57f4e45f09ad", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1989e65d23624efdbf26bde56f375e3caa6a22/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1989e65d23624efdbf26bde56f375e3caa6a22/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=5f1989e65d23624efdbf26bde56f375e3caa6a22", "patch": "@@ -31,6 +31,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"varray.h\"\n #include \"c-common.h\"\n #include \"except.h\"\n+/* In order for the format checking to accept the C frontend\n+   diagnostic framework extensions, you must define this token before\n+   including toplev.h.  */\n+#define GCC_DIAG_STYLE __gcc_cdiag__\n #include \"toplev.h\"\n #include \"flags.h\"\n #include \"ggc.h\""}, {"sha": "593877aee7337d466598f537383654b8306486ca", "filename": "gcc/c-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1989e65d23624efdbf26bde56f375e3caa6a22/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1989e65d23624efdbf26bde56f375e3caa6a22/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=5f1989e65d23624efdbf26bde56f375e3caa6a22", "patch": "@@ -305,4 +305,9 @@ extern void c_finish_incomplete_decl (tree);\n extern GTY(()) tree static_ctors;\n extern GTY(()) tree static_dtors;\n \n+/* In order for the format checking to accept the C frontend\n+   diagnostic framework extensions, you must include this file before\n+   toplev.h, not after.  */\n+#define GCC_DIAG_STYLE __gcc_cdiag__\n+\n #endif /* ! GCC_C_TREE_H */"}, {"sha": "ba6abbe154eab9ea4d79d3e0f460ab1d11b0be0d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1989e65d23624efdbf26bde56f375e3caa6a22/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1989e65d23624efdbf26bde56f375e3caa6a22/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5f1989e65d23624efdbf26bde56f375e3caa6a22", "patch": "@@ -1,3 +1,9 @@\n+2003-07-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cp-tree.h (GCC_DIAG_STYLE, ATTRIBUTE_GCC_CXXDIAG): Define.\n+\t(cp_error_at, cp_warning_at, cp_pedwarn_at): Mark with\n+\tATTRIBUTE_GCC_CXXDIAG.\n+\n 2003-07-03  Mark Mitchell  <mark@codesourcery.com>\n \n \t* call.c (build_scoped_method_call): Use convert_to_void."}, {"sha": "16200156cf318f4b82bb1a277095f18c54c2f926", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1989e65d23624efdbf26bde56f375e3caa6a22/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1989e65d23624efdbf26bde56f375e3caa6a22/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5f1989e65d23624efdbf26bde56f375e3caa6a22", "patch": "@@ -3802,10 +3802,6 @@ extern tree set_guard (tree);\n extern void prepare_assemble_variable (tree);\n extern void lower_function (tree);\n \n-extern void cp_error_at\t\t(const char *msgid, ...);\n-extern void cp_warning_at\t(const char *msgid, ...);\n-extern void cp_pedwarn_at\t(const char *msgid, ...);\n-\n /* XXX Not i18n clean.  */\n #define cp_deprecated(STR)\t\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n@@ -4344,4 +4340,18 @@ extern bool cp_dump_tree                         (void *, tree);\n \n /* -- end of C++ */\n \n+/* In order for the format checking to accept the C++ frontend\n+   diagnostic framework extensions, you must include this file before\n+   toplev.h, not after.  */\n+#define GCC_DIAG_STYLE __gcc_cxxdiag__\n+#if GCC_VERSION >= 3004\n+#define ATTRIBUTE_GCC_CXXDIAG(m, n) __attribute__ ((__format__ (GCC_DIAG_STYLE, m, n))) ATTRIBUTE_NONNULL(m)\n+#else\n+#define ATTRIBUTE_GCC_CXXDIAG(m, n) ATTRIBUTE_NONNULL(m)\n+#endif\n+\n+extern void cp_error_at\t\t(const char *, ...) ATTRIBUTE_GCC_CXXDIAG(1, 2);\n+extern void cp_warning_at\t(const char *, ...) ATTRIBUTE_GCC_CXXDIAG(1, 2);\n+extern void cp_pedwarn_at\t(const char *, ...) ATTRIBUTE_GCC_CXXDIAG(1, 2);\n+\n #endif /* ! GCC_CP_TREE_H */"}, {"sha": "73a3bd90cca85a36e7922bf602bdf87526b6c1a7", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1989e65d23624efdbf26bde56f375e3caa6a22/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1989e65d23624efdbf26bde56f375e3caa6a22/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=5f1989e65d23624efdbf26bde56f375e3caa6a22", "patch": "@@ -325,6 +325,5 @@ extern void output_printf (output_buffer *, const char *, ...)\n extern void output_verbatim (output_buffer *, const char *, ...);\n extern void verbatim (const char *, ...);\n extern char *file_name_as_prefix (const char *);\n-extern void inform (const char *, ...);\n \n #endif /* ! GCC_DIAGNOSTIC_H */"}, {"sha": "02a5cc72e17ff33c5877787afd66db3a13f7bcb5", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1989e65d23624efdbf26bde56f375e3caa6a22/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1989e65d23624efdbf26bde56f375e3caa6a22/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=5f1989e65d23624efdbf26bde56f375e3caa6a22", "patch": "@@ -50,11 +50,11 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"expr.h\"\n #include \"real.h\"\n #include \"except.h\"\n+#include \"diagnostic.h\"\n #include \"toplev.h\"\n #include \"reload.h\"\n #include \"predict.h\"\n #include \"timevar.h\"\n-#include \"diagnostic.h\"\n \n /* Optimize jump y; x: ... y: jumpif... x?\n    Don't know if it is worth bothering with.  */"}, {"sha": "0be768f18bad27e6cf63485ce887f960704ddcd2", "filename": "gcc/toplev.h", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1989e65d23624efdbf26bde56f375e3caa6a22/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1989e65d23624efdbf26bde56f375e3caa6a22/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=5f1989e65d23624efdbf26bde56f375e3caa6a22", "patch": "@@ -31,8 +31,6 @@ extern int read_integral_parameter\t(const char *, const char *,\n \t\t\t\t\t const int);\n extern void strip_off_ending\t\t(char *, int);\n extern const char *trim_filename\t(const char *);\n-extern void internal_error\t\t(const char *, ...)\n-     ATTRIBUTE_NORETURN;\n extern void _fatal_insn_not_found\t(struct rtx_def *,\n   \t\t\t\t\t const char *, int,\n \t\t\t\t\t const char *)\n@@ -48,15 +46,28 @@ extern void _fatal_insn\t\t\t(const char *,\n #define fatal_insn_not_found(insn) \\\n \t_fatal_insn_not_found (insn, __FILE__, __LINE__, __FUNCTION__)\n \n+/* If we haven't already defined a frontend specific diagnostics\n+   style, use the generic one.  */\n+#ifndef GCC_DIAG_STYLE\n+#define GCC_DIAG_STYLE __gcc_diag__\n+#endif\n /* None of these functions are suitable for ATTRIBUTE_PRINTF, because\n    each language front end can extend them with its own set of format\n-   specifiers.  */\n-extern void warning\t\t\t(const char *, ...);\n-extern void error\t\t\t(const char *, ...);\n-extern void fatal_error\t\t\t(const char *, ...)\n+   specifiers.  We must use custom format checks.  */\n+#if GCC_VERSION >= 3004\n+#define ATTRIBUTE_GCC_DIAG(m, n) __attribute__ ((__format__ (GCC_DIAG_STYLE, m, n))) ATTRIBUTE_NONNULL(m)\n+#else\n+#define ATTRIBUTE_GCC_DIAG(m, n) ATTRIBUTE_NONNULL(m)\n+#endif\n+extern void internal_error\t\t(const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n      ATTRIBUTE_NORETURN;\n-extern void pedwarn\t\t\t(const char *, ...);\n-extern void sorry\t\t\t(const char *, ...);\n+extern void warning\t\t\t(const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+extern void error\t\t\t(const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+extern void fatal_error\t\t\t(const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n+     ATTRIBUTE_NORETURN;\n+extern void pedwarn\t\t\t(const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+extern void sorry\t\t\t(const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+extern void inform                      (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n \n extern void rest_of_decl_compilation\t(union tree_node *,\n \t\t\t\t\t const char *, int, int);\n@@ -73,9 +84,9 @@ extern void error_with_decl\t\t(union tree_node *,\n extern void announce_function\t\t(union tree_node *);\n \n extern void error_for_asm\t\t(struct rtx_def *,\n-\t\t\t\t\t const char *, ...);\n+\t\t\t\t\t const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n extern void warning_for_asm\t\t(struct rtx_def *,\n-\t\t\t\t\t const char *, ...);\n+\t\t\t\t\t const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n extern void warn_deprecated_use\t\t(union tree_node *);\n \n extern void output_clean_symbol_name    (FILE *, const char *);"}]}