{"sha": "2f22e8d396d6626e3e9791db224e28ab32964cc1", "node_id": "C_kwDOANBUbNoAKDJmMjJlOGQzOTZkNjYyNmUzZTk3OTFkYjIyNGUyOGFiMzI5NjRjYzE", "commit": {"author": {"name": "Etienne Servais", "email": "servais@adacore.com", "date": "2021-09-20T09:15:36Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-05T08:20:05Z"}, "message": "[Ada] Forbids use of Compile_Time_(Error|Warning) as configuration pragma\n\ngcc/ada/\n\n\t* sem_prag.adb (Analyze_Pragma): Forbid use of\n\tCompile_Time_(Error|Warning) as configuration pragma.\n\t* doc/gnat_ugn/the_gnat_compilation_model.rst:\n\tCompile_Time_(Error|Warning) and Compiler_Unit(_Warning) are not\n\tconfiguration pragmas and shall not be listed as such.  The\n\tfollowing pragmas are either obsolete or undocumented:\n\tNo_Run_Time, Propagate_Exceptions, Rational, Ravenscar,\n\tRestricted_Run_Time, Short_Descriptors, Universal_Data.  Fix\n\tsome typos (notably on Restriction_Warnings).\n\t* doc/gnat_rm/implementation_defined_pragmas.rst: Move\n\tRename_Pragma documentation to alphabetical order.\n\t* gnat_rm.texi, gnat_ugn.texi: Regenerate.", "tree": {"sha": "525b97c45982f244f93e69a1b6700cd92f9f2bec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/525b97c45982f244f93e69a1b6700cd92f9f2bec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f22e8d396d6626e3e9791db224e28ab32964cc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f22e8d396d6626e3e9791db224e28ab32964cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f22e8d396d6626e3e9791db224e28ab32964cc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f22e8d396d6626e3e9791db224e28ab32964cc1/comments", "author": {"login": "vser1", "id": 8308457, "node_id": "MDQ6VXNlcjgzMDg0NTc=", "avatar_url": "https://avatars.githubusercontent.com/u/8308457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vser1", "html_url": "https://github.com/vser1", "followers_url": "https://api.github.com/users/vser1/followers", "following_url": "https://api.github.com/users/vser1/following{/other_user}", "gists_url": "https://api.github.com/users/vser1/gists{/gist_id}", "starred_url": "https://api.github.com/users/vser1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vser1/subscriptions", "organizations_url": "https://api.github.com/users/vser1/orgs", "repos_url": "https://api.github.com/users/vser1/repos", "events_url": "https://api.github.com/users/vser1/events{/privacy}", "received_events_url": "https://api.github.com/users/vser1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3915b90ea98ded75ee0b0227d0771d2e12f592a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3915b90ea98ded75ee0b0227d0771d2e12f592a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3915b90ea98ded75ee0b0227d0771d2e12f592a"}], "stats": {"total": 272, "additions": 130, "deletions": 142}, "files": [{"sha": "0375982be611ecc2f8baf783f85816519d3541ee", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f22e8d396d6626e3e9791db224e28ab32964cc1/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f22e8d396d6626e3e9791db224e28ab32964cc1/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=2f22e8d396d6626e3e9791db224e28ab32964cc1", "patch": "@@ -4916,43 +4916,6 @@ aspects, but is prepared to ignore the pragmas. The assertion\n policy that controls this pragma is ``Post'Class``, not\n ``Post_Class``.\n \n-Pragma Rename_Pragma\n-============================\n-.. index:: Pragmas, synonyms\n-\n-Syntax:\n-\n-\n-::\n-\n-  pragma Rename_Pragma (\n-           [New_Name =>] IDENTIFIER,\n-           [Renamed  =>] pragma_IDENTIFIER);\n-\n-This pragma provides a mechanism for supplying new names for existing\n-pragmas. The ``New_Name`` identifier can subsequently be used as a synonym for\n-the Renamed pragma. For example, suppose you have code that was originally\n-developed on a compiler that supports Inline_Only as an implementation defined\n-pragma. And suppose the semantics of pragma Inline_Only are identical to (or at\n-least very similar to) the GNAT implementation defined pragma\n-Inline_Always. You could globally replace Inline_Only with Inline_Always.\n-\n-However, to avoid that source modification, you could instead add a\n-configuration pragma:\n-\n-.. code-block:: ada\n-\n-  pragma Rename_Pragma (\n-           New_Name => Inline_Only,\n-           Renamed  => Inline_Always);\n-\n-\n-Then GNAT will treat \"pragma Inline_Only ...\" as if you had written\n-\"pragma Inline_Always ...\".\n-\n-Pragma Inline_Only will not necessarily mean the same thing as the other Ada\n-compiler; it's up to you to make sure the semantics are close enough.\n-\n Pragma Pre\n ==========\n .. index:: Pre\n@@ -5737,6 +5700,43 @@ In the generic unit, the formal type is subject to all restrictions\n pertaining to remote access to class-wide types. At instantiation, the\n actual type must be a remote access to class-wide type.\n \n+Pragma Rename_Pragma\n+============================\n+.. index:: Pragmas, synonyms\n+\n+Syntax:\n+\n+\n+::\n+\n+  pragma Rename_Pragma (\n+           [New_Name =>] IDENTIFIER,\n+           [Renamed  =>] pragma_IDENTIFIER);\n+\n+This pragma provides a mechanism for supplying new names for existing\n+pragmas. The ``New_Name`` identifier can subsequently be used as a synonym for\n+the Renamed pragma. For example, suppose you have code that was originally\n+developed on a compiler that supports Inline_Only as an implementation defined\n+pragma. And suppose the semantics of pragma Inline_Only are identical to (or at\n+least very similar to) the GNAT implementation defined pragma\n+Inline_Always. You could globally replace Inline_Only with Inline_Always.\n+\n+However, to avoid that source modification, you could instead add a\n+configuration pragma:\n+\n+.. code-block:: ada\n+\n+  pragma Rename_Pragma (\n+           New_Name => Inline_Only,\n+           Renamed  => Inline_Always);\n+\n+\n+Then GNAT will treat \"pragma Inline_Only ...\" as if you had written\n+\"pragma Inline_Always ...\".\n+\n+Pragma Inline_Only will not necessarily mean the same thing as the other Ada\n+compiler; it's up to you to make sure the semantics are close enough.\n+\n Pragma Restricted_Run_Time\n ==========================\n "}, {"sha": "4a3b84d754da2ca27b92f63979cf25956f3b8122", "filename": "gcc/ada/doc/gnat_ugn/the_gnat_compilation_model.rst", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f22e8d396d6626e3e9791db224e28ab32964cc1/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f22e8d396d6626e3e9791db224e28ab32964cc1/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst?ref=2f22e8d396d6626e3e9791db224e28ab32964cc1", "patch": "@@ -1409,16 +1409,12 @@ recognized by GNAT::\n      Check_Float_Overflow\n      Check_Name\n      Check_Policy\n-     Compile_Time_Error\n-     Compile_Time_Warning\n-     Compiler_Unit\n-     Compiler_Unit_Warning\n      Component_Alignment\n      Convention_Identifier\n      Debug_Policy\n-     Detect_Blocking\n      Default_Scalar_Storage_Order\n      Default_Storage_Pool\n+     Detect_Blocking\n      Disable_Atomic_Synchronization\n      Discard_Names\n      Elaboration_Checks\n@@ -1437,7 +1433,6 @@ recognized by GNAT::\n      Locking_Policy\n      No_Component_Reordering\n      No_Heap_Finalization\n-     No_Run_Time\n      No_Strict_Aliasing\n      Normalize_Scalars\n      Optimize_Alignment\n@@ -1449,17 +1444,12 @@ recognized by GNAT::\n      Priority_Specific_Dispatching\n      Profile\n      Profile_Warnings\n-     Propagate_Exceptions\n      Queuing_Policy\n-     Rational\n-     Ravenscar\n      Rename_Pragma\n-     Restricted_Run_Time\n      Restrictions\n-     Restrictions_Warnings\n+     Restriction_Warnings\n      Reviewable\n      Short_Circuit_And_Or\n-     Short_Descriptors\n      Source_File_Name\n      Source_File_Name_Project\n      SPARK_Mode\n@@ -1468,7 +1458,6 @@ recognized by GNAT::\n      Suppress_Exception_Locations\n      Task_Dispatching_Policy\n      Unevaluated_Use_Of_Old\n-     Universal_Data\n      Unsuppress\n      Use_VADS_Size\n      Validity_Checks\n@@ -1514,7 +1503,7 @@ only to the unit in which the pragma appears, and not to any other units.\n The exception is No_Elaboration_Code which always applies to the entire\n object file from a compilation, i.e. to the body, spec, and all subunits.\n This restriction can be specified in a configuration pragma file, or it\n-can be on the body and/or the spec (in eithe case it applies to all the\n+can be on the body and/or the spec (in either case it applies to all the\n relevant units). It can appear on a subunit only if it has previously\n appeared in the body of spec.\n \n@@ -4823,7 +4812,7 @@ GNAT and Other Compilation Models\n =================================\n \n This section compares the GNAT model with the approaches taken in\n-other environents, first the C/C++ model and then the mechanism that\n+other environments, first the C/C++ model and then the mechanism that\n has been used in other Ada systems, in particular those traditionally\n used for Ada 83.\n "}, {"sha": "9d28f4af719739fdac7d0833bf1daaf77bfa182e", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 74, "deletions": 74, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f22e8d396d6626e3e9791db224e28ab32964cc1/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f22e8d396d6626e3e9791db224e28ab32964cc1/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=2f22e8d396d6626e3e9791db224e28ab32964cc1", "patch": "@@ -224,7 +224,6 @@ Implementation Defined Pragmas\n * Pragma Post:: \n * Pragma Postcondition:: \n * Pragma Post_Class:: \n-* Pragma Rename_Pragma:: \n * Pragma Pre:: \n * Pragma Precondition:: \n * Pragma Predicate:: \n@@ -247,6 +246,7 @@ Implementation Defined Pragmas\n * Pragma Refined_State:: \n * Pragma Relative_Deadline:: \n * Pragma Remote_Access_Type:: \n+* Pragma Rename_Pragma:: \n * Pragma Restricted_Run_Time:: \n * Pragma Restriction_Warnings:: \n * Pragma Reviewable:: \n@@ -1305,7 +1305,6 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Post:: \n * Pragma Postcondition:: \n * Pragma Post_Class:: \n-* Pragma Rename_Pragma:: \n * Pragma Pre:: \n * Pragma Precondition:: \n * Pragma Predicate:: \n@@ -1328,6 +1327,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Refined_State:: \n * Pragma Relative_Deadline:: \n * Pragma Remote_Access_Type:: \n+* Pragma Rename_Pragma:: \n * Pragma Restricted_Run_Time:: \n * Pragma Restriction_Warnings:: \n * Pragma Reviewable:: \n@@ -6352,7 +6352,7 @@ use of the pragma identifier @code{Check}. Historically, pragma\n Ada 2012, and has been retained in its original form for\n compatibility purposes.\n \n-@node Pragma Post_Class,Pragma Rename_Pragma,Pragma Postcondition,Implementation Defined Pragmas\n+@node Pragma Post_Class,Pragma Pre,Pragma Postcondition,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-post-class}@anchor{b9}\n @section Pragma Post_Class\n \n@@ -6387,47 +6387,8 @@ aspects, but is prepared to ignore the pragmas. The assertion\n policy that controls this pragma is @code{Post'Class}, not\n @code{Post_Class}.\n \n-@node Pragma Rename_Pragma,Pragma Pre,Pragma Post_Class,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas pragma-rename-pragma}@anchor{ba}\n-@section Pragma Rename_Pragma\n-\n-\n-@geindex Pragmas\n-@geindex synonyms\n-\n-Syntax:\n-\n-@example\n-pragma Rename_Pragma (\n-         [New_Name =>] IDENTIFIER,\n-         [Renamed  =>] pragma_IDENTIFIER);\n-@end example\n-\n-This pragma provides a mechanism for supplying new names for existing\n-pragmas. The @code{New_Name} identifier can subsequently be used as a synonym for\n-the Renamed pragma. For example, suppose you have code that was originally\n-developed on a compiler that supports Inline_Only as an implementation defined\n-pragma. And suppose the semantics of pragma Inline_Only are identical to (or at\n-least very similar to) the GNAT implementation defined pragma\n-Inline_Always. You could globally replace Inline_Only with Inline_Always.\n-\n-However, to avoid that source modification, you could instead add a\n-configuration pragma:\n-\n-@example\n-pragma Rename_Pragma (\n-         New_Name => Inline_Only,\n-         Renamed  => Inline_Always);\n-@end example\n-\n-Then GNAT will treat \u201cpragma Inline_Only \u2026\u201d as if you had written\n-\u201cpragma Inline_Always \u2026\u201d.\n-\n-Pragma Inline_Only will not necessarily mean the same thing as the other Ada\n-compiler; it\u2019s up to you to make sure the semantics are close enough.\n-\n-@node Pragma Pre,Pragma Precondition,Pragma Rename_Pragma,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas pragma-pre}@anchor{bb}\n+@node Pragma Pre,Pragma Precondition,Pragma Post_Class,Implementation Defined Pragmas\n+@anchor{gnat_rm/implementation_defined_pragmas pragma-pre}@anchor{ba}\n @section Pragma Pre\n \n \n@@ -6452,7 +6413,7 @@ appear at the start of the declarations in a subprogram body\n (preceded only by other pragmas).\n \n @node Pragma Precondition,Pragma Predicate,Pragma Pre,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas pragma-precondition}@anchor{bc}\n+@anchor{gnat_rm/implementation_defined_pragmas pragma-precondition}@anchor{bb}\n @section Pragma Precondition\n \n \n@@ -6511,7 +6472,7 @@ Ada 2012, and has been retained in its original form for\n compatibility purposes.\n \n @node Pragma Predicate,Pragma Predicate_Failure,Pragma Precondition,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas id30}@anchor{bd}@anchor{gnat_rm/implementation_defined_pragmas pragma-predicate}@anchor{be}\n+@anchor{gnat_rm/implementation_defined_pragmas id30}@anchor{bc}@anchor{gnat_rm/implementation_defined_pragmas pragma-predicate}@anchor{bd}\n @section Pragma Predicate\n \n \n@@ -6565,7 +6526,7 @@ defined for subtype B). When following this approach, the\n use of predicates should be avoided.\n \n @node Pragma Predicate_Failure,Pragma Preelaborable_Initialization,Pragma Predicate,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas pragma-predicate-failure}@anchor{bf}\n+@anchor{gnat_rm/implementation_defined_pragmas pragma-predicate-failure}@anchor{be}\n @section Pragma Predicate_Failure\n \n \n@@ -6582,7 +6543,7 @@ the language-defined\n @code{Predicate_Failure} aspect, and shares its restrictions and semantics.\n \n @node Pragma Preelaborable_Initialization,Pragma Prefix_Exception_Messages,Pragma Predicate_Failure,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas pragma-preelaborable-initialization}@anchor{c0}\n+@anchor{gnat_rm/implementation_defined_pragmas pragma-preelaborable-initialization}@anchor{bf}\n @section Pragma Preelaborable_Initialization\n \n \n@@ -6597,7 +6558,7 @@ versions of Ada as an implementation-defined pragma.\n See Ada 2012 Reference Manual for details.\n \n @node Pragma Prefix_Exception_Messages,Pragma Pre_Class,Pragma Preelaborable_Initialization,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas pragma-prefix-exception-messages}@anchor{c1}\n+@anchor{gnat_rm/implementation_defined_pragmas pragma-prefix-exception-messages}@anchor{c0}\n @section Pragma Prefix_Exception_Messages\n \n \n@@ -6628,7 +6589,7 @@ prefixing in this case, you can always call\n @code{GNAT.Source_Info.Enclosing_Entity} and prepend the string manually.\n \n @node Pragma Pre_Class,Pragma Priority_Specific_Dispatching,Pragma Prefix_Exception_Messages,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas pragma-pre-class}@anchor{c2}\n+@anchor{gnat_rm/implementation_defined_pragmas pragma-pre-class}@anchor{c1}\n @section Pragma Pre_Class\n \n \n@@ -6663,7 +6624,7 @@ policy that controls this pragma is @code{Pre'Class}, not\n @code{Pre_Class}.\n \n @node Pragma Priority_Specific_Dispatching,Pragma Profile,Pragma Pre_Class,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas pragma-priority-specific-dispatching}@anchor{c3}\n+@anchor{gnat_rm/implementation_defined_pragmas pragma-priority-specific-dispatching}@anchor{c2}\n @section Pragma Priority_Specific_Dispatching\n \n \n@@ -6687,7 +6648,7 @@ versions of Ada as an implementation-defined pragma.\n See Ada 2012 Reference Manual for details.\n \n @node Pragma Profile,Pragma Profile_Warnings,Pragma Priority_Specific_Dispatching,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas pragma-profile}@anchor{c4}\n+@anchor{gnat_rm/implementation_defined_pragmas pragma-profile}@anchor{c3}\n @section Pragma Profile\n \n \n@@ -6966,7 +6927,7 @@ conforming Ada constructs.  The profile enables the following three pragmas:\n @end itemize\n \n @node Pragma Profile_Warnings,Pragma Propagate_Exceptions,Pragma Profile,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas pragma-profile-warnings}@anchor{c5}\n+@anchor{gnat_rm/implementation_defined_pragmas pragma-profile-warnings}@anchor{c4}\n @section Pragma Profile_Warnings\n \n \n@@ -6984,7 +6945,7 @@ violations of the profile generate warning messages instead\n of error messages.\n \n @node Pragma Propagate_Exceptions,Pragma Provide_Shift_Operators,Pragma Profile_Warnings,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas pragma-propagate-exceptions}@anchor{c6}\n+@anchor{gnat_rm/implementation_defined_pragmas pragma-propagate-exceptions}@anchor{c5}\n @section Pragma Propagate_Exceptions\n \n \n@@ -7003,7 +6964,7 @@ purposes. It used to be used in connection with optimization of\n a now-obsolete mechanism for implementation of exceptions.\n \n @node Pragma Provide_Shift_Operators,Pragma Psect_Object,Pragma Propagate_Exceptions,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas pragma-provide-shift-operators}@anchor{c7}\n+@anchor{gnat_rm/implementation_defined_pragmas pragma-provide-shift-operators}@anchor{c6}\n @section Pragma Provide_Shift_Operators\n \n \n@@ -7023,7 +6984,7 @@ including the function declarations for these five operators, together\n with the pragma Import (Intrinsic, \u2026) statements.\n \n @node Pragma Psect_Object,Pragma Pure_Function,Pragma Provide_Shift_Operators,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas pragma-psect-object}@anchor{c8}\n+@anchor{gnat_rm/implementation_defined_pragmas pragma-psect-object}@anchor{c7}\n @section Pragma Psect_Object\n \n \n@@ -7043,7 +7004,7 @@ EXTERNAL_SYMBOL ::=\n This pragma is identical in effect to pragma @code{Common_Object}.\n \n @node Pragma Pure_Function,Pragma Rational,Pragma Psect_Object,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas id31}@anchor{c9}@anchor{gnat_rm/implementation_defined_pragmas pragma-pure-function}@anchor{ca}\n+@anchor{gnat_rm/implementation_defined_pragmas id31}@anchor{c8}@anchor{gnat_rm/implementation_defined_pragmas pragma-pure-function}@anchor{c9}\n @section Pragma Pure_Function\n \n \n@@ -7105,7 +7066,7 @@ unit is not a Pure unit in the categorization sense. So for example, a function\n thus marked is free to @code{with} non-pure units.\n \n @node Pragma Rational,Pragma Ravenscar,Pragma Pure_Function,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas pragma-rational}@anchor{cb}\n+@anchor{gnat_rm/implementation_defined_pragmas pragma-rational}@anchor{ca}\n @section Pragma Rational\n \n \n@@ -7123,7 +7084,7 @@ pragma Profile (Rational);\n @end example\n \n @node Pragma Ravenscar,Pragma Refined_Depends,Pragma Rational,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas pragma-ravenscar}@anchor{cc}\n+@anchor{gnat_rm/implementation_defined_pragmas pragma-ravenscar}@anchor{cb}\n @section Pragma Ravenscar\n \n \n@@ -7143,7 +7104,7 @@ pragma Profile (Ravenscar);\n which is the preferred method of setting the @code{Ravenscar} profile.\n \n @node Pragma Refined_Depends,Pragma Refined_Global,Pragma Ravenscar,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas id32}@anchor{cd}@anchor{gnat_rm/implementation_defined_pragmas pragma-refined-depends}@anchor{ce}\n+@anchor{gnat_rm/implementation_defined_pragmas id32}@anchor{cc}@anchor{gnat_rm/implementation_defined_pragmas pragma-refined-depends}@anchor{cd}\n @section Pragma Refined_Depends\n \n \n@@ -7176,7 +7137,7 @@ For the semantics of this pragma, see the entry for aspect @code{Refined_Depends\n the SPARK 2014 Reference Manual, section 6.1.5.\n \n @node Pragma Refined_Global,Pragma Refined_Post,Pragma Refined_Depends,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas id33}@anchor{cf}@anchor{gnat_rm/implementation_defined_pragmas pragma-refined-global}@anchor{d0}\n+@anchor{gnat_rm/implementation_defined_pragmas id33}@anchor{ce}@anchor{gnat_rm/implementation_defined_pragmas pragma-refined-global}@anchor{cf}\n @section Pragma Refined_Global\n \n \n@@ -7201,7 +7162,7 @@ For the semantics of this pragma, see the entry for aspect @code{Refined_Global}\n the SPARK 2014 Reference Manual, section 6.1.4.\n \n @node Pragma Refined_Post,Pragma Refined_State,Pragma Refined_Global,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas id34}@anchor{d1}@anchor{gnat_rm/implementation_defined_pragmas pragma-refined-post}@anchor{d2}\n+@anchor{gnat_rm/implementation_defined_pragmas id34}@anchor{d0}@anchor{gnat_rm/implementation_defined_pragmas pragma-refined-post}@anchor{d1}\n @section Pragma Refined_Post\n \n \n@@ -7215,7 +7176,7 @@ For the semantics of this pragma, see the entry for aspect @code{Refined_Post} i\n the SPARK 2014 Reference Manual, section 7.2.7.\n \n @node Pragma Refined_State,Pragma Relative_Deadline,Pragma Refined_Post,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas id35}@anchor{d3}@anchor{gnat_rm/implementation_defined_pragmas pragma-refined-state}@anchor{d4}\n+@anchor{gnat_rm/implementation_defined_pragmas id35}@anchor{d2}@anchor{gnat_rm/implementation_defined_pragmas pragma-refined-state}@anchor{d3}\n @section Pragma Refined_State\n \n \n@@ -7241,7 +7202,7 @@ For the semantics of this pragma, see the entry for aspect @code{Refined_State}\n the SPARK 2014 Reference Manual, section 7.2.2.\n \n @node Pragma Relative_Deadline,Pragma Remote_Access_Type,Pragma Refined_State,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas pragma-relative-deadline}@anchor{d5}\n+@anchor{gnat_rm/implementation_defined_pragmas pragma-relative-deadline}@anchor{d4}\n @section Pragma Relative_Deadline\n \n \n@@ -7255,8 +7216,8 @@ This pragma is standard in Ada 2005, but is available in all earlier\n versions of Ada as an implementation-defined pragma.\n See Ada 2012 Reference Manual for details.\n \n-@node Pragma Remote_Access_Type,Pragma Restricted_Run_Time,Pragma Relative_Deadline,Implementation Defined Pragmas\n-@anchor{gnat_rm/implementation_defined_pragmas id36}@anchor{d6}@anchor{gnat_rm/implementation_defined_pragmas pragma-remote-access-type}@anchor{d7}\n+@node Pragma Remote_Access_Type,Pragma Rename_Pragma,Pragma Relative_Deadline,Implementation Defined Pragmas\n+@anchor{gnat_rm/implementation_defined_pragmas id36}@anchor{d5}@anchor{gnat_rm/implementation_defined_pragmas pragma-remote-access-type}@anchor{d6}\n @section Pragma Remote_Access_Type\n \n \n@@ -7281,7 +7242,46 @@ In the generic unit, the formal type is subject to all restrictions\n pertaining to remote access to class-wide types. At instantiation, the\n actual type must be a remote access to class-wide type.\n \n-@node Pragma Restricted_Run_Time,Pragma Restriction_Warnings,Pragma Remote_Access_Type,Implementation Defined Pragmas\n+@node Pragma Rename_Pragma,Pragma Restricted_Run_Time,Pragma Remote_Access_Type,Implementation Defined Pragmas\n+@anchor{gnat_rm/implementation_defined_pragmas pragma-rename-pragma}@anchor{d7}\n+@section Pragma Rename_Pragma\n+\n+\n+@geindex Pragmas\n+@geindex synonyms\n+\n+Syntax:\n+\n+@example\n+pragma Rename_Pragma (\n+         [New_Name =>] IDENTIFIER,\n+         [Renamed  =>] pragma_IDENTIFIER);\n+@end example\n+\n+This pragma provides a mechanism for supplying new names for existing\n+pragmas. The @code{New_Name} identifier can subsequently be used as a synonym for\n+the Renamed pragma. For example, suppose you have code that was originally\n+developed on a compiler that supports Inline_Only as an implementation defined\n+pragma. And suppose the semantics of pragma Inline_Only are identical to (or at\n+least very similar to) the GNAT implementation defined pragma\n+Inline_Always. You could globally replace Inline_Only with Inline_Always.\n+\n+However, to avoid that source modification, you could instead add a\n+configuration pragma:\n+\n+@example\n+pragma Rename_Pragma (\n+         New_Name => Inline_Only,\n+         Renamed  => Inline_Always);\n+@end example\n+\n+Then GNAT will treat \u201cpragma Inline_Only \u2026\u201d as if you had written\n+\u201cpragma Inline_Always \u2026\u201d.\n+\n+Pragma Inline_Only will not necessarily mean the same thing as the other Ada\n+compiler; it\u2019s up to you to make sure the semantics are close enough.\n+\n+@node Pragma Restricted_Run_Time,Pragma Restriction_Warnings,Pragma Rename_Pragma,Implementation Defined Pragmas\n @anchor{gnat_rm/implementation_defined_pragmas pragma-restricted-run-time}@anchor{d8}\n @section Pragma Restricted_Run_Time\n \n@@ -9888,7 +9888,7 @@ This boolean aspect is equivalent to @ref{b6,,pragma Persistent_BSS}.\n \n @geindex Predicate\n \n-This aspect is equivalent to @ref{be,,pragma Predicate}. It is thus\n+This aspect is equivalent to @ref{bd,,pragma Predicate}. It is thus\n similar to the language defined aspects @code{Dynamic_Predicate}\n and @code{Static_Predicate} except that whether the resulting\n predicate is static or dynamic is controlled by the form of the\n@@ -9902,7 +9902,7 @@ expression. It is also separately controllable using pragma\n \n @geindex Pure_Function\n \n-This boolean aspect is equivalent to @ref{ca,,pragma Pure_Function}.\n+This boolean aspect is equivalent to @ref{c9,,pragma Pure_Function}.\n \n @node Aspect Refined_Depends,Aspect Refined_Global,Aspect Pure_Function,Implementation Defined Aspects\n @anchor{gnat_rm/implementation_defined_aspects aspect-refined-depends}@anchor{147}\n@@ -9911,7 +9911,7 @@ This boolean aspect is equivalent to @ref{ca,,pragma Pure_Function}.\n \n @geindex Refined_Depends\n \n-This aspect is equivalent to @ref{ce,,pragma Refined_Depends}.\n+This aspect is equivalent to @ref{cd,,pragma Refined_Depends}.\n \n @node Aspect Refined_Global,Aspect Refined_Post,Aspect Refined_Depends,Implementation Defined Aspects\n @anchor{gnat_rm/implementation_defined_aspects aspect-refined-global}@anchor{148}\n@@ -9920,7 +9920,7 @@ This aspect is equivalent to @ref{ce,,pragma Refined_Depends}.\n \n @geindex Refined_Global\n \n-This aspect is equivalent to @ref{d0,,pragma Refined_Global}.\n+This aspect is equivalent to @ref{cf,,pragma Refined_Global}.\n \n @node Aspect Refined_Post,Aspect Refined_State,Aspect Refined_Global,Implementation Defined Aspects\n @anchor{gnat_rm/implementation_defined_aspects aspect-refined-post}@anchor{149}\n@@ -9929,7 +9929,7 @@ This aspect is equivalent to @ref{d0,,pragma Refined_Global}.\n \n @geindex Refined_Post\n \n-This aspect is equivalent to @ref{d2,,pragma Refined_Post}.\n+This aspect is equivalent to @ref{d1,,pragma Refined_Post}.\n \n @node Aspect Refined_State,Aspect Relaxed_Initialization,Aspect Refined_Post,Implementation Defined Aspects\n @anchor{gnat_rm/implementation_defined_aspects aspect-refined-state}@anchor{14a}\n@@ -9938,7 +9938,7 @@ This aspect is equivalent to @ref{d2,,pragma Refined_Post}.\n \n @geindex Refined_State\n \n-This aspect is equivalent to @ref{d4,,pragma Refined_State}.\n+This aspect is equivalent to @ref{d3,,pragma Refined_State}.\n \n @node Aspect Relaxed_Initialization,Aspect Remote_Access_Type,Aspect Refined_State,Implementation Defined Aspects\n @anchor{gnat_rm/implementation_defined_aspects aspect-relaxed-initialization}@anchor{14b}\n@@ -9957,7 +9957,7 @@ Manual, section 6.10.\n \n @geindex Remote_Access_Type\n \n-This aspect is equivalent to @ref{d7,,pragma Remote_Access_Type}.\n+This aspect is equivalent to @ref{d6,,pragma Remote_Access_Type}.\n \n @node Aspect Secondary_Stack_Size,Aspect Scalar_Storage_Order,Aspect Remote_Access_Type,Implementation Defined Aspects\n @anchor{gnat_rm/implementation_defined_aspects aspect-secondary-stack-size}@anchor{14d}"}, {"sha": "28f2f19290ab2a24b5906f17b758fb9e2cf5aeed", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f22e8d396d6626e3e9791db224e28ab32964cc1/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f22e8d396d6626e3e9791db224e28ab32964cc1/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=2f22e8d396d6626e3e9791db224e28ab32964cc1", "patch": "@@ -2814,16 +2814,12 @@ C_Pass_By_Copy\n Check_Float_Overflow\n Check_Name\n Check_Policy\n-Compile_Time_Error\n-Compile_Time_Warning\n-Compiler_Unit\n-Compiler_Unit_Warning\n Component_Alignment\n Convention_Identifier\n Debug_Policy\n-Detect_Blocking\n Default_Scalar_Storage_Order\n Default_Storage_Pool\n+Detect_Blocking\n Disable_Atomic_Synchronization\n Discard_Names\n Elaboration_Checks\n@@ -2842,7 +2838,6 @@ License\n Locking_Policy\n No_Component_Reordering\n No_Heap_Finalization\n-No_Run_Time\n No_Strict_Aliasing\n Normalize_Scalars\n Optimize_Alignment\n@@ -2854,17 +2849,12 @@ Prefix_Exception_Messages\n Priority_Specific_Dispatching\n Profile\n Profile_Warnings\n-Propagate_Exceptions\n Queuing_Policy\n-Rational\n-Ravenscar\n Rename_Pragma\n-Restricted_Run_Time\n Restrictions\n-Restrictions_Warnings\n+Restriction_Warnings\n Reviewable\n Short_Circuit_And_Or\n-Short_Descriptors\n Source_File_Name\n Source_File_Name_Project\n SPARK_Mode\n@@ -2873,7 +2863,6 @@ Suppress\n Suppress_Exception_Locations\n Task_Dispatching_Policy\n Unevaluated_Use_Of_Old\n-Universal_Data\n Unsuppress\n Use_VADS_Size\n Validity_Checks\n@@ -2925,7 +2914,7 @@ only to the unit in which the pragma appears, and not to any other units.\n The exception is No_Elaboration_Code which always applies to the entire\n object file from a compilation, i.e. to the body, spec, and all subunits.\n This restriction can be specified in a configuration pragma file, or it\n-can be on the body and/or the spec (in eithe case it applies to all the\n+can be on the body and/or the spec (in either case it applies to all the\n relevant units). It can appear on a subunit only if it has previously\n appeared in the body of spec.\n \n@@ -6771,7 +6760,7 @@ call subprograms, reference objects, and constants.\n \n \n This section compares the GNAT model with the approaches taken in\n-other environents, first the C/C++ model and then the mechanism that\n+other environments, first the C/C++ model and then the mechanism that\n has been used in other Ada systems, in particular those traditionally\n used for Ada 83.\n \n@@ -29204,8 +29193,8 @@ to permit their use in free software.\n \n @printindex ge\n \n-@anchor{gnat_ugn/gnat_utility_programs switches-related-to-project-files}@w{                              }\n @anchor{cf}@w{                              }\n+@anchor{gnat_ugn/gnat_utility_programs switches-related-to-project-files}@w{                              }\n \n @c %**end of body\n @bye"}, {"sha": "0163ff94d422935df62d3c5abeaa4a8e1f8866cc", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f22e8d396d6626e3e9791db224e28ab32964cc1/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f22e8d396d6626e3e9791db224e28ab32964cc1/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=2f22e8d396d6626e3e9791db224e28ab32964cc1", "patch": "@@ -14206,6 +14206,16 @@ package body Sem_Prag is\n \n          when Pragma_Compile_Time_Error | Pragma_Compile_Time_Warning =>\n             GNAT_Pragma;\n+\n+            --  These pragmas rely on the context. In adc files they raise\n+            --  Constraint_Error. Ban them from use as configuration pragmas\n+            --  even in cases where such a use could work.\n+\n+            if Is_Configuration_Pragma then\n+               Error_Pragma\n+                  (\"pragma% is not allowed as a configuration pragma\");\n+            end if;\n+\n             Process_Compile_Time_Warning_Or_Error;\n \n          ---------------------------"}]}