{"sha": "c19ec8f909f15a7a58ae4252c30ee859da533f84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE5ZWM4ZjkwOWYxNWE3YTU4YWU0MjUyYzMwZWU4NTlkYTUzM2Y4NA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2003-10-24T17:30:34Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2003-10-24T17:30:34Z"}, "message": "s390.c (load_multiple_operation): Allow both SImode and DImode if word_mode is DImode.\n\n\t* config/s390/s390.c (load_multiple_operation): Allow both SImode\n\tand DImode if word_mode is DImode.\n\t(store_multiple_operation): Likewise.\n\t* config/s390/s390.md (\"load_multiple\", \"store_multiple\"): Likewise.\n\t(\"*load_multiple_di\"): Allow only if word_mode == DImode.\n\t(\"movqi\"): Use LLGC whenever TARGET_ZARCH.\n\t(\"fix_truncdfsi2\"): Fix incorrect temporary size.\n\t(\"fix_truncsfsi2\"): Likewise.\n\t(\"*bras_r\", \"*brasl_r\", \"*basr_r\"): Remove predicate and constraint\n\tstring for function return value operand.\n\t(\"*bras_tls\", \"*brasl_tls\", \"*basr_tls\"): Likewise.\n\nFrom-SVN: r72901", "tree": {"sha": "33a47265c731a0af537f80ca725c3cd3c758837e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33a47265c731a0af537f80ca725c3cd3c758837e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c19ec8f909f15a7a58ae4252c30ee859da533f84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19ec8f909f15a7a58ae4252c30ee859da533f84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c19ec8f909f15a7a58ae4252c30ee859da533f84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19ec8f909f15a7a58ae4252c30ee859da533f84/comments", "author": null, "committer": null, "parents": [{"sha": "88682ff62d51b96c6278e30862068780f5eb6f1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88682ff62d51b96c6278e30862068780f5eb6f1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88682ff62d51b96c6278e30862068780f5eb6f1d"}], "stats": {"total": 80, "additions": 52, "deletions": 28}, "files": [{"sha": "e790c9339fb38bf5d19f670e5b3dc8ba1f28c578", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19ec8f909f15a7a58ae4252c30ee859da533f84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19ec8f909f15a7a58ae4252c30ee859da533f84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c19ec8f909f15a7a58ae4252c30ee859da533f84", "patch": "@@ -1,3 +1,17 @@\n+2003-10-24  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390.c (load_multiple_operation): Allow both SImode\n+\tand DImode if word_mode is DImode.\n+\t(store_multiple_operation): Likewise.\n+\t* config/s390/s390.md (\"load_multiple\", \"store_multiple\"): Likewise.\n+\t(\"*load_multiple_di\"): Allow only if word_mode == DImode.\n+\t(\"movqi\"): Use LLGC whenever TARGET_ZARCH.\n+\t(\"fix_truncdfsi2\"): Fix incorrect temporary size.\n+\t(\"fix_truncsfsi2\"): Likewise.\n+\t(\"*bras_r\", \"*brasl_r\", \"*basr_r\"): Remove predicate and constraint\n+\tstring for function return value operand.\n+\t(\"*bras_tls\", \"*brasl_tls\", \"*basr_tls\"): Likewise.\n+\n 2003-10-24  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* c-parse.in (array_declarator): Use expr_no_commas."}, {"sha": "63c2208fbebdbf5510e6654fe173f0dcd4951612", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19ec8f909f15a7a58ae4252c30ee859da533f84/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19ec8f909f15a7a58ae4252c30ee859da533f84/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=c19ec8f909f15a7a58ae4252c30ee859da533f84", "patch": "@@ -1555,6 +1555,7 @@ tls_symbolic_operand (register rtx op)\n int\n load_multiple_operation (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n+  enum machine_mode elt_mode;\n   int count = XVECLEN (op, 0);\n   unsigned int dest_regno;\n   rtx src_addr;\n@@ -1570,6 +1571,7 @@ load_multiple_operation (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n \n   dest_regno = REGNO (SET_DEST (XVECEXP (op, 0, 0)));\n   src_addr = XEXP (SET_SRC (XVECEXP (op, 0, 0)), 0);\n+  elt_mode = GET_MODE (SET_DEST (XVECEXP (op, 0, 0)));\n \n   /* Check, is base, or base + displacement.  */\n \n@@ -1594,15 +1596,15 @@ load_multiple_operation (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n \n       if (GET_CODE (elt) != SET\n \t  || GET_CODE (SET_DEST (elt)) != REG\n-\t  || GET_MODE (SET_DEST (elt)) != Pmode\n+\t  || GET_MODE (SET_DEST (elt)) != elt_mode\n \t  || REGNO (SET_DEST (elt)) != dest_regno + i\n \t  || GET_CODE (SET_SRC (elt)) != MEM\n-\t  || GET_MODE (SET_SRC (elt)) != Pmode\n+\t  || GET_MODE (SET_SRC (elt)) != elt_mode\n \t  || GET_CODE (XEXP (SET_SRC (elt), 0)) != PLUS\n \t  || ! rtx_equal_p (XEXP (XEXP (SET_SRC (elt), 0), 0), src_addr)\n \t  || GET_CODE (XEXP (XEXP (SET_SRC (elt), 0), 1)) != CONST_INT\n \t  || INTVAL (XEXP (XEXP (SET_SRC (elt), 0), 1))\n-\t     != off + i * UNITS_PER_WORD)\n+\t     != off + i * GET_MODE_SIZE (elt_mode))\n \treturn 0;\n     }\n \n@@ -1617,6 +1619,7 @@ load_multiple_operation (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n int\n store_multiple_operation (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n+  enum machine_mode elt_mode;\n   int count = XVECLEN (op, 0);\n   unsigned int src_regno;\n   rtx dest_addr;\n@@ -1631,6 +1634,7 @@ store_multiple_operation (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n \n   src_regno = REGNO (SET_SRC (XVECEXP (op, 0, 0)));\n   dest_addr = XEXP (SET_DEST (XVECEXP (op, 0, 0)), 0);\n+  elt_mode = GET_MODE (SET_SRC (XVECEXP (op, 0, 0)));\n \n   /* Check, is base, or base + displacement.  */\n \n@@ -1655,15 +1659,15 @@ store_multiple_operation (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n \n       if (GET_CODE (elt) != SET\n \t  || GET_CODE (SET_SRC (elt)) != REG\n-\t  || GET_MODE (SET_SRC (elt)) != Pmode\n+\t  || GET_MODE (SET_SRC (elt)) != elt_mode\n \t  || REGNO (SET_SRC (elt)) != src_regno + i\n \t  || GET_CODE (SET_DEST (elt)) != MEM\n-\t  || GET_MODE (SET_DEST (elt)) != Pmode\n+\t  || GET_MODE (SET_DEST (elt)) != elt_mode\n \t  || GET_CODE (XEXP (SET_DEST (elt), 0)) != PLUS\n \t  || ! rtx_equal_p (XEXP (XEXP (SET_DEST (elt), 0), 0), dest_addr)\n \t  || GET_CODE (XEXP (XEXP (SET_DEST (elt), 0), 1)) != CONST_INT\n \t  || INTVAL (XEXP (XEXP (SET_DEST (elt), 0), 1))\n-\t     != off + i * UNITS_PER_WORD)\n+\t     != off + i * GET_MODE_SIZE (elt_mode))\n \treturn 0;\n     }\n   return 1;"}, {"sha": "7cf926e5cae46a030ea1124b0a456be9225cd48f", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19ec8f909f15a7a58ae4252c30ee859da533f84/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19ec8f909f15a7a58ae4252c30ee859da533f84/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=c19ec8f909f15a7a58ae4252c30ee859da533f84", "patch": "@@ -1356,14 +1356,14 @@\n         (match_operand:QI 1 \"general_operand\" \"\"))]\n   \"\"\n {\n-  /* On 64-bit, zero-extending from memory to register\n+  /* On z/Architecture, zero-extending from memory to register\n      is just as fast as a QImode load.  */\n-  if (TARGET_64BIT && optimize && !no_new_pseudos\n+  if (TARGET_ZARCH && optimize && !no_new_pseudos\n       && register_operand (operands[0], VOIDmode)\n       && memory_operand (operands[1], VOIDmode))\n     {\n-      rtx tmp = gen_reg_rtx (DImode);\n-      rtx ext = gen_rtx_ZERO_EXTEND (DImode, operands[1]);\n+      rtx tmp = gen_reg_rtx (word_mode);\n+      rtx ext = gen_rtx_ZERO_EXTEND (word_mode, operands[1]);\n       emit_insn (gen_rtx_SET (VOIDmode, tmp, ext));\n       operands[1] = gen_lowpart (QImode, tmp);\n     }\n@@ -1587,6 +1587,7 @@\n \t\t     (use (match_operand 2 \"\" \"\"))])]\n   \"\"\n {\n+  enum machine_mode mode;\n   int regno;\n   int count;\n   rtx from;\n@@ -1604,6 +1605,9 @@\n \n   count = INTVAL (operands[2]);\n   regno = REGNO (operands[0]);\n+  mode = GET_MODE (operands[0]);\n+  if (mode != SImode && mode != word_mode)\n+    FAIL;\n \n   operands[3] = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (count));\n   if (no_new_pseudos)\n@@ -1634,17 +1638,16 @@\n \n   for (i = 0; i < count; i++)\n     XVECEXP (operands[3], 0, i)\n-      = gen_rtx_SET (VOIDmode, gen_rtx_REG (Pmode, regno + i),\n-\t\t     change_address (operands[1], Pmode,\n-\t\t\t\t     plus_constant (from,\n-\t\t\t\t\t\t    off + i * UNITS_PER_WORD)));\n+      = gen_rtx_SET (VOIDmode, gen_rtx_REG (mode, regno + i),\n+\t\t     change_address (operands[1], mode,\n+\t\t       plus_constant (from, off + i * GET_MODE_SIZE (mode))));\n })\n \n (define_insn \"*load_multiple_di\"\n   [(match_parallel 0 \"load_multiple_operation\"\n \t\t   [(set (match_operand:DI 1 \"register_operand\" \"=r\")\n \t\t\t (match_operand:DI 2 \"s_operand\" \"QS\"))])]\n-  \"\"\n+  \"word_mode == DImode\"\n {\n   int words = XVECLEN (operands[0], 0);\n   operands[0] = gen_rtx_REG (DImode, REGNO (operands[1]) + words - 1);\n@@ -1676,6 +1679,7 @@\n \t\t     (use (match_operand 2 \"\" \"\"))])]\n   \"\"\n {\n+  enum machine_mode mode;\n   int regno;\n   int count;\n   rtx to;\n@@ -1693,6 +1697,9 @@\n \n   count = INTVAL (operands[2]);\n   regno = REGNO (operands[1]);\n+  mode = GET_MODE (operands[1]);\n+  if (mode != SImode && mode != word_mode)\n+    FAIL;\n \n   operands[3] = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (count));\n \n@@ -1725,17 +1732,16 @@\n   for (i = 0; i < count; i++)\n     XVECEXP (operands[3], 0, i)\n       = gen_rtx_SET (VOIDmode,\n-\t\t     change_address (operands[0], Pmode,\n-\t\t\t\t     plus_constant (to,\n-\t\t\t\t\t\t    off + i * UNITS_PER_WORD)),\n-\t\t     gen_rtx_REG (Pmode, regno + i));\n+\t\t     change_address (operands[0], mode,\n+\t\t       plus_constant (to, off + i * GET_MODE_SIZE (mode))),\n+\t\t     gen_rtx_REG (mode, regno + i));\n })\n \n (define_insn \"*store_multiple_di\"\n   [(match_parallel 0 \"store_multiple_operation\"\n \t\t   [(set (match_operand:DI 1 \"s_operand\" \"=QS\")\n \t\t\t (match_operand:DI 2 \"register_operand\" \"r\"))])]\n-  \"\"\n+  \"word_mode == DImode\"\n {\n   int words = XVECLEN (operands[0], 0);\n   operands[0] = gen_rtx_REG (DImode, REGNO (operands[2]) + words - 1);\n@@ -2781,7 +2787,7 @@\n     {\n       /* This is the algorithm from POP chapter A.5.7.2.  */\n \n-      rtx temp   = assign_stack_local (BLKmode, 2 * UNITS_PER_WORD, BITS_PER_WORD);\n+      rtx temp   = assign_stack_local (BLKmode, 8, BITS_PER_WORD);\n       rtx two31r = s390_gen_rtx_const_DI (0x4f000000, 0x08000000);\n       rtx two32  = s390_gen_rtx_const_DI (0x4e000001, 0x00000000);\n \n@@ -2981,7 +2987,7 @@\n     {\n       /* This is the algorithm from POP chapter A.5.7.1.  */\n \n-      rtx temp  = assign_stack_local (BLKmode, 2 * UNITS_PER_WORD, BITS_PER_WORD);\n+      rtx temp  = assign_stack_local (BLKmode, 8, BITS_PER_WORD);\n       rtx two31 = s390_gen_rtx_const_DI (0x4e000000, 0x80000000);\n \n       emit_insn (gen_floatsidf2_ibm (operands[0], operands[1], two31, temp));\n@@ -7036,7 +7042,7 @@\n   \"\")\n \n (define_insn \"*bras_r\"\n-  [(set (match_operand 0 \"register_operand\" \"=df\")\n+  [(set (match_operand 0 \"\" \"\")\n         (call (mem:QI (match_operand 1 \"bras_sym_operand\" \"X\"))\n               (match_operand:SI 2 \"const_int_operand\" \"n\")))\n    (clobber (match_operand 3 \"register_operand\" \"=r\"))]\n@@ -7046,7 +7052,7 @@\n    (set_attr \"type\"    \"jsr\")])\n \n (define_insn \"*brasl_r\"\n-  [(set (match_operand 0 \"register_operand\" \"=df\")\n+  [(set (match_operand 0 \"\" \"\")\n         (call (mem:QI (match_operand 1 \"bras_sym_operand\" \"X\"))\n               (match_operand 2 \"const_int_operand\" \"n\")))\n    (clobber (match_operand 3 \"register_operand\" \"=r\"))]\n@@ -7056,7 +7062,7 @@\n    (set_attr \"type\"    \"jsr\")])\n \n (define_insn \"*basr_r\"\n-  [(set (match_operand 0 \"register_operand\" \"=df\")\n+  [(set (match_operand 0 \"\" \"\")\n         (call (mem:QI (match_operand 1 \"address_operand\" \"U\"))\n               (match_operand 2 \"const_int_operand\" \"n\")))\n    (clobber (match_operand 3 \"register_operand\" \"=r\"))]\n@@ -7190,7 +7196,7 @@\n   \"\")\n \n (define_insn \"*bras_tls\"\n-  [(set (match_operand 0 \"register_operand\" \"=df\")\n+  [(set (match_operand 0 \"\" \"\")\n         (call (mem:QI (match_operand 1 \"bras_sym_operand\" \"X\"))\n               (match_operand 2 \"const_int_operand\" \"n\")))\n    (clobber (match_operand 3 \"register_operand\" \"=r\"))\n@@ -7201,7 +7207,7 @@\n    (set_attr \"type\"    \"jsr\")])\n \n (define_insn \"*brasl_tls\"\n-  [(set (match_operand 0 \"register_operand\" \"=df\")\n+  [(set (match_operand 0 \"\" \"\")\n         (call (mem:QI (match_operand 1 \"bras_sym_operand\" \"X\"))\n               (match_operand 2 \"const_int_operand\" \"n\")))\n    (clobber (match_operand 3 \"register_operand\" \"=r\"))\n@@ -7212,7 +7218,7 @@\n    (set_attr \"type\"    \"jsr\")])\n \n (define_insn \"*basr_tls\"\n-  [(set (match_operand 0 \"register_operand\" \"=df\")\n+  [(set (match_operand 0 \"\" \"\")\n         (call (mem:QI (match_operand 1 \"address_operand\" \"U\"))\n               (match_operand 2 \"const_int_operand\" \"n\")))\n    (clobber (match_operand 3 \"register_operand\" \"=r\"))"}]}