{"sha": "79221839a3c9c0e8a4cf5ea130bcf24062ee3995", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkyMjE4MzlhM2M5YzBlOGE0Y2Y1ZWExMzBiY2YyNDA2MmVlMzk5NQ==", "commit": {"author": {"name": "Teresa Johnson", "email": "tejohnson@google.com", "date": "2013-10-03T05:06:05Z"}, "committer": {"name": "Teresa Johnson", "email": "tejohnson@gcc.gnu.org", "date": "2013-10-03T05:06:05Z"}, "message": "predict.c (probably_never_executed): New function.\n\n2013-10-02  Teresa Johnson  <tejohnson@google.com>\n\n\t* predict.c (probably_never_executed): New function.\n\t(probably_never_executed_bb_p): Invoke probably_never_executed.\n\t(probably_never_executed_edge_p): Ditto.\n\t* bb-reorder.c (find_rarely_executed_basic_blocks_and_crossing_edges):\n\tTreat profile insanities conservatively.\n\nFrom-SVN: r203152", "tree": {"sha": "d85c8dce4505e035ecaa38597a50dd80df80808e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d85c8dce4505e035ecaa38597a50dd80df80808e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79221839a3c9c0e8a4cf5ea130bcf24062ee3995", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79221839a3c9c0e8a4cf5ea130bcf24062ee3995", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79221839a3c9c0e8a4cf5ea130bcf24062ee3995", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79221839a3c9c0e8a4cf5ea130bcf24062ee3995/comments", "author": {"login": "teresajohnson", "id": 20446403, "node_id": "MDQ6VXNlcjIwNDQ2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/20446403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teresajohnson", "html_url": "https://github.com/teresajohnson", "followers_url": "https://api.github.com/users/teresajohnson/followers", "following_url": "https://api.github.com/users/teresajohnson/following{/other_user}", "gists_url": "https://api.github.com/users/teresajohnson/gists{/gist_id}", "starred_url": "https://api.github.com/users/teresajohnson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teresajohnson/subscriptions", "organizations_url": "https://api.github.com/users/teresajohnson/orgs", "repos_url": "https://api.github.com/users/teresajohnson/repos", "events_url": "https://api.github.com/users/teresajohnson/events{/privacy}", "received_events_url": "https://api.github.com/users/teresajohnson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "697786593677771f060fdb99dc1114d7bb48f372", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697786593677771f060fdb99dc1114d7bb48f372", "html_url": "https://github.com/Rust-GCC/gccrs/commit/697786593677771f060fdb99dc1114d7bb48f372"}], "stats": {"total": 57, "additions": 43, "deletions": 14}, "files": [{"sha": "1a3aff53ed51ed42319f146d6ee846a9c1092f0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79221839a3c9c0e8a4cf5ea130bcf24062ee3995/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79221839a3c9c0e8a4cf5ea130bcf24062ee3995/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79221839a3c9c0e8a4cf5ea130bcf24062ee3995", "patch": "@@ -1,3 +1,11 @@\n+2013-10-02  Teresa Johnson  <tejohnson@google.com>\n+\n+\t* predict.c (probably_never_executed): New function.\n+\t(probably_never_executed_bb_p): Invoke probably_never_executed.\n+\t(probably_never_executed_edge_p): Ditto.\n+\t* bb-reorder.c (find_rarely_executed_basic_blocks_and_crossing_edges):\n+\tTreat profile insanities conservatively.\n+\n 2013-10-02  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config.gcc (hppa*64*-*-linux*): Don't add pa/t-linux to tmake_file."}, {"sha": "c5a42d359dcf40e35a76729a8e5e680057b256e5", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79221839a3c9c0e8a4cf5ea130bcf24062ee3995/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79221839a3c9c0e8a4cf5ea130bcf24062ee3995/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=79221839a3c9c0e8a4cf5ea130bcf24062ee3995", "patch": "@@ -1564,7 +1564,23 @@ find_rarely_executed_basic_blocks_and_crossing_edges (void)\n   /* Mark which partition (hot/cold) each basic block belongs in.  */\n   FOR_EACH_BB (bb)\n     {\n+      bool cold_bb = false;\n+\n       if (probably_never_executed_bb_p (cfun, bb))\n+        {\n+          /* Handle profile insanities created by upstream optimizations\n+             by also checking the incoming edge weights. If there is a non-cold\n+             incoming edge, conservatively prevent this block from being split\n+             into the cold section.  */\n+          cold_bb = true;\n+          FOR_EACH_EDGE (e, ei, bb->preds)\n+            if (!probably_never_executed_edge_p (cfun, e))\n+              {\n+                cold_bb = false;\n+                break;\n+              }\n+        }\n+      if (cold_bb)\n         {\n           BB_SET_PARTITION (bb, BB_COLD_PARTITION);\n           cold_bb_count++;"}, {"sha": "2909117ef6bd16a2f1b625f9c37b8e9f97a5004e", "filename": "gcc/predict.c", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79221839a3c9c0e8a4cf5ea130bcf24062ee3995/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79221839a3c9c0e8a4cf5ea130bcf24062ee3995/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=79221839a3c9c0e8a4cf5ea130bcf24062ee3995", "patch": "@@ -226,23 +226,26 @@ maybe_hot_edge_p (edge e)\n }\n \n \n-/* Return true in case BB is probably never executed.  */\n \n-bool\n-probably_never_executed_bb_p (struct function *fun, const_basic_block bb)\n+/* Return true if profile COUNT and FREQUENCY, or function FUN static\n+   node frequency reflects never being executed.  */\n+   \n+static bool\n+probably_never_executed (struct function *fun,\n+                         gcov_type count, int frequency)\n {\n   gcc_checking_assert (fun);\n   if (profile_status_for_function (fun) == PROFILE_READ)\n     {\n-      if ((bb->count * 4 + profile_info->runs / 2) / profile_info->runs > 0)\n+      if ((count * 4 + profile_info->runs / 2) / profile_info->runs > 0)\n \treturn false;\n-      if (!bb->frequency)\n+      if (!frequency)\n \treturn true;\n       if (!ENTRY_BLOCK_PTR->frequency)\n \treturn false;\n       if (ENTRY_BLOCK_PTR->count && ENTRY_BLOCK_PTR->count < REG_BR_PROB_BASE)\n \t{\n-\t  return (RDIV (bb->frequency * ENTRY_BLOCK_PTR->count,\n+\t  return (RDIV (frequency * ENTRY_BLOCK_PTR->count,\n \t\t        ENTRY_BLOCK_PTR->frequency)\n \t\t  < REG_BR_PROB_BASE / 4);\n \t}\n@@ -256,19 +259,21 @@ probably_never_executed_bb_p (struct function *fun, const_basic_block bb)\n }\n \n \n+/* Return true in case BB is probably never executed.  */\n+\n+bool\n+probably_never_executed_bb_p (struct function *fun, const_basic_block bb)\n+{\n+  return probably_never_executed (fun, bb->count, bb->frequency);\n+}\n+\n+\n /* Return true in case edge E is probably never executed.  */\n \n bool\n probably_never_executed_edge_p (struct function *fun, edge e)\n {\n-  gcc_checking_assert (fun);\n-  if (profile_info && flag_branch_probabilities)\n-    return ((e->count + profile_info->runs / 2) / profile_info->runs) == 0;\n-  if ((!profile_info || !flag_branch_probabilities)\n-      && (cgraph_get_node (fun->decl)->frequency\n-\t  == NODE_FREQUENCY_UNLIKELY_EXECUTED))\n-    return true;\n-  return false;\n+  return probably_never_executed (fun, e->count, EDGE_FREQUENCY (e));\n }\n \n /* Return true if NODE should be optimized for size.  */"}]}