{"sha": "ad7c998b21c719cfcfd40215fe737b4211b6eb66", "node_id": "C_kwDOANBUbNoAKGFkN2M5OThiMjFjNzE5Y2ZjZmQ0MDIxNWZlNzM3YjQyMTFiNmViNjY", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-05-16T12:01:36Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-05-17T16:13:45Z"}, "message": "libproc_macro: Change constructor in ffistring\n\nThe \"new\" constructor wasn't fitting it's usage well.\n\nChangeLog:\n\n\t* libgrust/libproc_macro/rust/bridge/ffistring.rs: Implement\n\tFrom trait for FFIString.\n\t* libgrust/libproc_macro/rust/bridge/literal.rs: Change\n\tconstructor call.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "6996b08c103fa690632b046bb1bf3973f309e907", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6996b08c103fa690632b046bb1bf3973f309e907"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad7c998b21c719cfcfd40215fe737b4211b6eb66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad7c998b21c719cfcfd40215fe737b4211b6eb66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad7c998b21c719cfcfd40215fe737b4211b6eb66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad7c998b21c719cfcfd40215fe737b4211b6eb66/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70c245e4e3e2c8c794266f0d025af501dbd947fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70c245e4e3e2c8c794266f0d025af501dbd947fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70c245e4e3e2c8c794266f0d025af501dbd947fd"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "73162e901fed75c3e442fe61357b08984d720538", "filename": "libgrust/libproc_macro/rust/bridge/ffistring.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7c998b21c719cfcfd40215fe737b4211b6eb66/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fffistring.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7c998b21c719cfcfd40215fe737b4211b6eb66/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fffistring.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fffistring.rs?ref=ad7c998b21c719cfcfd40215fe737b4211b6eb66", "patch": "@@ -16,15 +16,18 @@ pub struct FFIString {\n     len: u64,\n }\n \n-impl FFIString {\n-    pub fn new(string: &str) -> FFIString {\n-        unsafe { FFIString__new(string.as_ptr(), string.len() as u64) }\n+impl<S> From<S> for FFIString\n+where\n+    S: AsRef<str>,\n+{\n+    fn from(s: S) -> Self {\n+        unsafe { FFIString__new(s.as_ref().as_ptr(), s.as_ref().len() as u64) }\n     }\n }\n \n impl Clone for FFIString {\n     fn clone(&self) -> Self {\n-        FFIString::new(&self.to_string())\n+        FFIString::from(&self.to_string())\n     }\n }\n "}, {"sha": "f54bfe20d8d244319e263c4e340ddc9a337a362b", "filename": "libgrust/libproc_macro/rust/bridge/literal.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7c998b21c719cfcfd40215fe737b4211b6eb66/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fliteral.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7c998b21c719cfcfd40215fe737b4211b6eb66/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fliteral.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Frust%2Fbridge%2Fliteral.rs?ref=ad7c998b21c719cfcfd40215fe737b4211b6eb66", "patch": "@@ -37,8 +37,8 @@ macro_rules! suffixed_int_literals {\n         pub fn $name(n : $kind) -> Literal {\n             Literal {\n                 kind : LitKind::Integer,\n-                text: FFIString::new(&n.to_string()),\n-                suffix: FFIString::new(stringify!($kind))\n+                text: FFIString::from(&n.to_string()),\n+                suffix: FFIString::from(stringify!($kind))\n             }\n         }\n     )*)\n@@ -49,8 +49,8 @@ macro_rules! unsuffixed_int_literals {\n         pub fn $name(n : $kind) -> Literal {\n             Literal {\n                 kind : LitKind::Integer,\n-                text: FFIString::new(&n.to_string()),\n-                suffix: FFIString::new(\"\")\n+                text: FFIString::from(&n.to_string()),\n+                suffix: FFIString::from(\"\")\n             }\n         }\n     )*)\n@@ -95,16 +95,16 @@ impl Literal {\n \n         Literal {\n             kind: LitKind::Float,\n-            text: FFIString::new(&repr),\n-            suffix: FFIString::new(\"\"),\n+            text: FFIString::from(&repr),\n+            suffix: FFIString::from(\"\"),\n         }\n     }\n \n     pub fn f32_suffixed(n: f32) -> Self {\n         Literal {\n             kind: LitKind::Float,\n-            text: FFIString::new(&n.to_string()),\n-            suffix: FFIString::new(\"f32\"),\n+            text: FFIString::from(&n.to_string()),\n+            suffix: FFIString::from(\"f32\"),\n         }\n     }\n \n@@ -116,40 +116,40 @@ impl Literal {\n \n         Literal {\n             kind: LitKind::Float,\n-            text: FFIString::new(&repr),\n-            suffix: FFIString::new(\"\"),\n+            text: FFIString::from(&repr),\n+            suffix: FFIString::from(\"\"),\n         }\n     }\n \n     pub fn f64_suffixed(n: f64) -> Self {\n         Literal {\n             kind: LitKind::Float,\n-            text: FFIString::new(&n.to_string()),\n-            suffix: FFIString::new(\"f64\"),\n+            text: FFIString::from(&n.to_string()),\n+            suffix: FFIString::from(\"f64\"),\n         }\n     }\n \n     pub fn string(string: &str) -> Self {\n         Literal {\n             kind: LitKind::Str,\n-            text: FFIString::new(string),\n-            suffix: FFIString::new(\"\"),\n+            text: FFIString::from(string),\n+            suffix: FFIString::from(\"\"),\n         }\n     }\n \n     pub fn character(c: char) -> Self {\n         Literal {\n             kind: LitKind::Char,\n-            text: FFIString::new(&c.to_string()),\n-            suffix: FFIString::new(\"\"),\n+            text: FFIString::from(&c.to_string()),\n+            suffix: FFIString::from(\"\"),\n         }\n     }\n \n     pub fn byte_string(bytes: &[u8]) -> Self {\n         Literal {\n             kind: LitKind::ByteStr,\n-            text: FFIString::new(&bytes.escape_ascii().to_string()),\n-            suffix: FFIString::new(\"\"),\n+            text: FFIString::from(&bytes.escape_ascii().to_string()),\n+            suffix: FFIString::from(\"\"),\n         }\n     }\n \n@@ -219,8 +219,8 @@ impl FromStr for Literal {\n         // Structure that will be filled in by the cpp\n         let mut lit = Literal {\n             kind: LitKind::Err,\n-            text: FFIString::new(\"\"),\n-            suffix: FFIString::new(\"\"),\n+            text: FFIString::from(\"\"),\n+            suffix: FFIString::from(\"\"),\n         };\n         // TODO: We might want to pass a LexError by reference to retrieve\n         // error information"}]}