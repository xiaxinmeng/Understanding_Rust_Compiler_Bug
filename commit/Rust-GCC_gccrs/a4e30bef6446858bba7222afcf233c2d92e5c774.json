{"sha": "a4e30bef6446858bba7222afcf233c2d92e5c774", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRlMzBiZWY2NDQ2ODU4YmJhNzIyMmFmY2YyMzNjMmQ5MmU1Yzc3NA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2018-10-29T19:25:57Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-10-29T19:25:57Z"}, "message": "compiler: pass a single flags argument to Backend::function\n    \n    Reviewed-on: https://go-review.googlesource.com/c/145319\n\n\t* go-gcc.cc (Gcc_backend::function): Change to use a single flags\n\tparameter.\n\nFrom-SVN: r265599", "tree": {"sha": "97f25948a4cc57ff9cc6f4141281aad27714b866", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97f25948a4cc57ff9cc6f4141281aad27714b866"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4e30bef6446858bba7222afcf233c2d92e5c774", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4e30bef6446858bba7222afcf233c2d92e5c774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4e30bef6446858bba7222afcf233c2d92e5c774", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4e30bef6446858bba7222afcf233c2d92e5c774/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "943cc2fb6463ab8e06c2f2bcc4281a65e9dc4a78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/943cc2fb6463ab8e06c2f2bcc4281a65e9dc4a78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/943cc2fb6463ab8e06c2f2bcc4281a65e9dc4a78"}], "stats": {"total": 121, "additions": 73, "deletions": 48}, "files": [{"sha": "e6f8644441fc1b16bd85d0203bb557bf2abf940b", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e30bef6446858bba7222afcf233c2d92e5c774/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e30bef6446858bba7222afcf233c2d92e5c774/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=a4e30bef6446858bba7222afcf233c2d92e5c774", "patch": "@@ -1,3 +1,8 @@\n+2018-10-29  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* go-gcc.cc (Gcc_backend::function): Change to use a single flags\n+\tparameter.\n+\n 2018-10-29  Ian Lance Taylor  <iant@golang.org>\n \n \t* go-linemap.cc (Gcc_linemap::location_file): New method."}, {"sha": "9c317e06a922a64915d3fbd5f84a184c75f72945", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e30bef6446858bba7222afcf233c2d92e5c774/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e30bef6446858bba7222afcf233c2d92e5c774/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=a4e30bef6446858bba7222afcf233c2d92e5c774", "patch": "@@ -482,9 +482,7 @@ class Gcc_backend : public Backend\n \n   Bfunction*\n   function(Btype* fntype, const std::string& name, const std::string& asm_name,\n-           bool is_visible, bool is_declaration, bool is_inlinable,\n-           bool disable_split_stack, bool does_not_return,\n-\t   bool in_unique_section, Location);\n+\t   unsigned int flags, Location);\n \n   Bstatement*\n   function_defer_statement(Bfunction* function, Bexpression* undefer,\n@@ -3047,10 +3045,8 @@ Gcc_backend::label_address(Blabel* label, Location location)\n \n Bfunction*\n Gcc_backend::function(Btype* fntype, const std::string& name,\n-                      const std::string& asm_name, bool is_visible,\n-                      bool is_declaration, bool is_inlinable,\n-                      bool disable_split_stack, bool does_not_return,\n-\t\t      bool in_unique_section, Location location)\n+                      const std::string& asm_name, unsigned int flags,\n+\t\t      Location location)\n {\n   tree functype = fntype->get_tree();\n   if (functype != error_mark_node)\n@@ -3065,9 +3061,9 @@ Gcc_backend::function(Btype* fntype, const std::string& name,\n   tree decl = build_decl(location.gcc_location(), FUNCTION_DECL, id, functype);\n   if (! asm_name.empty())\n     SET_DECL_ASSEMBLER_NAME(decl, get_identifier_from_string(asm_name));\n-  if (is_visible)\n+  if ((flags & function_is_visible) != 0)\n     TREE_PUBLIC(decl) = 1;\n-  if (is_declaration)\n+  if ((flags & function_is_declaration) != 0)\n     DECL_EXTERNAL(decl) = 1;\n   else\n     {\n@@ -3079,16 +3075,16 @@ Gcc_backend::function(Btype* fntype, const std::string& name,\n       DECL_CONTEXT(resdecl) = decl;\n       DECL_RESULT(decl) = resdecl;\n     }\n-  if (!is_inlinable)\n+  if ((flags & function_is_inlinable) == 0)\n     DECL_UNINLINABLE(decl) = 1;\n-  if (disable_split_stack)\n+  if ((flags & function_no_split_stack) != 0)\n     {\n       tree attr = get_identifier (\"no_split_stack\");\n       DECL_ATTRIBUTES(decl) = tree_cons(attr, NULL_TREE, NULL_TREE);\n     }\n-  if (does_not_return)\n+  if ((flags & function_does_not_return) != 0)\n     TREE_THIS_VOLATILE(decl) = 1;\n-  if (in_unique_section)\n+  if ((flags & function_in_unique_section) != 0)\n     resolve_unique_section(decl, 0, 1);\n \n   go_preserve_from_gc(decl);"}, {"sha": "90ba4494aa6c6335422b875e65c3638fa956b598", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e30bef6446858bba7222afcf233c2d92e5c774/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e30bef6446858bba7222afcf233c2d92e5c774/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=a4e30bef6446858bba7222afcf233c2d92e5c774", "patch": "@@ -1,4 +1,4 @@\n-e4a421a01ad1fcc4315e530e79272604f3683051\n+8dae05f57f3c8249319e3360b10f07dcc2cd57a7\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "d2e93d24f49846c5118070a9709b03cc2b30611c", "filename": "gcc/go/gofrontend/backend.h", "status": "modified", "additions": 32, "deletions": 17, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e30bef6446858bba7222afcf233c2d92e5c774/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e30bef6446858bba7222afcf233c2d92e5c774/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fbackend.h?ref=a4e30bef6446858bba7222afcf233c2d92e5c774", "patch": "@@ -699,26 +699,41 @@ class Backend\n   virtual Bfunction*\n   error_function() = 0;\n \n+  // Bit flags to pass to the function method.\n+\n+  // Set if the function should be visible outside of the current\n+  // compilation unit.\n+  static const unsigned int function_is_visible = 1 << 0;\n+\n+  // Set if this is a function declaration rather than a definition;\n+  // the definition will be in another compilation unit.\n+  static const unsigned int function_is_declaration = 1 << 1;\n+\n+  // Set if the function can be inlined.  This is normally set, but is\n+  // false for functions that may not be inlined because they call\n+  // recover and must be visible for correct panic recovery.\n+  static const unsigned int function_is_inlinable = 1 << 2;\n+\n+  // Set if the function may not split the stack.  This is set for the\n+  // implementation of recover itself, among other things.\n+  static const unsigned int function_no_split_stack = 1 << 3;\n+\n+  // Set if the function does not return.  This is set for the\n+  // implementation of panic.\n+  static const unsigned int function_does_not_return = 1 << 4;\n+\n+  // Set if the function should be put in a unique section if\n+  // possible.  This is used for field tracking.\n+  static const unsigned int function_in_unique_section = 1 << 5;\n+\n   // Declare or define a function of FNTYPE.\n-  // NAME is the Go name of the function. ASM_NAME, if not the empty string, is\n-  // the name that should be used in the symbol table; this will be non-empty if\n-  // a magic extern comment is used.\n-  // IS_VISIBLE is true if this function should be visible outside of the\n-  // current compilation unit. IS_DECLARATION is true if this is a function\n-  // declaration rather than a definition; the function definition will be in\n-  // another compilation unit.\n-  // IS_INLINABLE is true if the function can be inlined.\n-  // DISABLE_SPLIT_STACK is true if this function may not split the stack; this\n-  // is used for the implementation of recover.\n-  // DOES_NOT_RETURN is true for a function that does not return; this is used\n-  // for the implementation of panic.\n-  // IN_UNIQUE_SECTION is true if this function should be put into a unique\n-  // location if possible; this is used for field tracking.\n+  // NAME is the Go name of the function.  ASM_NAME, if not the empty\n+  // string, is the name that should be used in the symbol table; this\n+  // will be non-empty if a magic extern comment is used.  FLAGS is\n+  // bit flags described above.\n   virtual Bfunction*\n   function(Btype* fntype, const std::string& name, const std::string& asm_name,\n-           bool is_visible, bool is_declaration, bool is_inlinable,\n-           bool disable_split_stack, bool does_not_return,\n-\t   bool in_unique_section, Location) = 0;\n+\t   unsigned int flags, Location) = 0;\n \n   // Create a statement that runs all deferred calls for FUNCTION.  This should\n   // be a statement that looks like this in C++:"}, {"sha": "6ea247a989fec54c053ea4c3391703891af60b54", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e30bef6446858bba7222afcf233c2d92e5c774/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e30bef6446858bba7222afcf233c2d92e5c774/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=a4e30bef6446858bba7222afcf233c2d92e5c774", "patch": "@@ -719,10 +719,12 @@ Gogo::init_imports(std::vector<Bstatement*>& init_stmts, Bfunction *bfunction)\n       const Import_init* ii = *p;\n       std::string user_name = ii->package_name() + \".init\";\n       const std::string& init_name(ii->init_name());\n-\n+      const unsigned int flags =\n+\t(Backend::function_is_visible\n+\t | Backend::function_is_declaration\n+\t | Backend::function_is_inlinable);\n       Bfunction* pfunc = this->backend()->function(fntype, user_name, init_name,\n-                                                   true, true, true, false,\n-                                                   false, false, unknown_loc);\n+\t\t\t\t\t\t   flags, unknown_loc);\n       Bexpression* pfunc_code =\n           this->backend()->function_code_expression(pfunc, unknown_loc);\n       Bexpression* pfunc_call =\n@@ -5521,7 +5523,7 @@ Function::get_or_make_decl(Gogo* gogo, Named_object* no)\n {\n   if (this->fndecl_ == NULL)\n     {\n-      bool is_visible = false;\n+      unsigned int flags = 0;\n       bool is_init_fn = false;\n       Type* rtype = NULL;\n       if (no->package() != NULL)\n@@ -5533,20 +5535,20 @@ Function::get_or_make_decl(Gogo* gogo, Named_object* no)\n \t;\n       else if (no->name() == gogo->get_init_fn_name())\n \t{\n-\t  is_visible = true;\n+\t  flags |= Backend::function_is_visible;\n \t  is_init_fn = true;\n \t}\n       else if (Gogo::unpack_hidden_name(no->name()) == \"main\"\n                && gogo->is_main_package())\n-        is_visible = true;\n+\tflags |= Backend::function_is_visible;\n       // Methods have to be public even if they are hidden because\n       // they can be pulled into type descriptors when using\n       // anonymous fields.\n       else if (!Gogo::is_hidden_name(no->name())\n                || this->type_->is_method())\n         {\n \t  if (!this->is_unnamed_type_stub_method_)\n-\t    is_visible = true;\n+\t    flags |= Backend::function_is_visible;\n \t  if (this->type_->is_method())\n \t    rtype = this->type_->receiver()->type();\n         }\n@@ -5559,7 +5561,7 @@ Function::get_or_make_decl(Gogo* gogo, Named_object* no)\n \t  // If an assembler name is explicitly specified, there must\n \t  // be some reason to refer to the symbol from a different\n \t  // object file.\n-\t  is_visible = true;\n+\t  flags |= Backend::function_is_visible;\n \t}\n       else if (is_init_fn)\n \t{\n@@ -5591,6 +5593,9 @@ Function::get_or_make_decl(Gogo* gogo, Named_object* no)\n       if ((this->pragmas_ & GOPRAGMA_NOINLINE) != 0)\n \tis_inlinable = false;\n \n+      if (is_inlinable)\n+\tflags |= Backend::function_is_inlinable;\n+\n       // If this is a thunk created to call a function which calls\n       // the predeclared recover function, we need to disable\n       // stack splitting for the thunk.\n@@ -5600,20 +5605,22 @@ Function::get_or_make_decl(Gogo* gogo, Named_object* no)\n       if ((this->pragmas_ & GOPRAGMA_NOSPLIT) != 0)\n \tdisable_split_stack = true;\n \n+      if (disable_split_stack)\n+\tflags |= Backend::function_no_split_stack;\n+\n       // This should go into a unique section if that has been\n       // requested elsewhere, or if this is a nointerface function.\n       // We want to put a nointerface function into a unique section\n       // because there is a good chance that the linker garbage\n       // collection can discard it.\n-      bool in_unique_section = (this->in_unique_section_\n-\t\t\t\t|| (this->is_method() && this->nointerface()));\n+      if (this->in_unique_section_\n+\t  || (this->is_method() && this->nointerface()))\n+\tflags |= Backend::function_in_unique_section;\n \n       Btype* functype = this->type_->get_backend_fntype(gogo);\n       this->fndecl_ =\n           gogo->backend()->function(functype, no->get_id(gogo), asm_name,\n-                                    is_visible, false, is_inlinable,\n-                                    disable_split_stack, false,\n-\t\t\t\t    in_unique_section, this->location());\n+\t\t\t\t    flags, this->location());\n     }\n   return this->fndecl_;\n }\n@@ -5625,7 +5632,10 @@ Function_declaration::get_or_make_decl(Gogo* gogo, Named_object* no)\n {\n   if (this->fndecl_ == NULL)\n     {\n-      bool does_not_return = false;\n+      unsigned int flags =\n+\t(Backend::function_is_visible\n+\t | Backend::function_is_declaration\n+\t | Backend::function_is_inlinable);\n \n       // Let Go code use an asm declaration to pick up a builtin\n       // function.\n@@ -5641,7 +5651,7 @@ Function_declaration::get_or_make_decl(Gogo* gogo, Named_object* no)\n \n \t  if (this->asm_name_ == \"runtime.gopanic\"\n \t      || this->asm_name_ == \"__go_runtime_error\")\n-\t    does_not_return = true;\n+\t    flags |= Backend::function_does_not_return;\n \t}\n \n       std::string asm_name;\n@@ -5658,8 +5668,7 @@ Function_declaration::get_or_make_decl(Gogo* gogo, Named_object* no)\n       Btype* functype = this->fntype_->get_backend_fntype(gogo);\n       this->fndecl_ =\n           gogo->backend()->function(functype, no->get_id(gogo), asm_name,\n-                                    true, true, true, false, does_not_return,\n-\t\t\t\t    false, this->location());\n+\t\t\t\t    flags, this->location());\n     }\n \n   return this->fndecl_;"}]}