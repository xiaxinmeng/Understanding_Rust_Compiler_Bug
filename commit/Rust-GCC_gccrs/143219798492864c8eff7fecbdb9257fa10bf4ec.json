{"sha": "143219798492864c8eff7fecbdb9257fa10bf4ec", "node_id": "C_kwDOANBUbNoAKDE0MzIxOTc5ODQ5Mjg2NGM4ZWZmN2ZlY2JkYjkyNTdmYTEwYmY0ZWM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-07-06T15:57:26Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-07-06T16:35:55Z"}, "message": "Allow linemap to be optional nullptr", "tree": {"sha": "6508b9ec7c6becf40f397c4f03514f6ba31c3bbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6508b9ec7c6becf40f397c4f03514f6ba31c3bbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/143219798492864c8eff7fecbdb9257fa10bf4ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143219798492864c8eff7fecbdb9257fa10bf4ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/143219798492864c8eff7fecbdb9257fa10bf4ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143219798492864c8eff7fecbdb9257fa10bf4ec/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29d594e263f0ccbcbd2babf43ff453c5188f4f2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d594e263f0ccbcbd2babf43ff453c5188f4f2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29d594e263f0ccbcbd2babf43ff453c5188f4f2c"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "5447c72a8b16fd16185334156c68141a7d6cc77e", "filename": "gcc/rust/lex/rust-lex.cc", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/143219798492864c8eff7fecbdb9257fa10bf4ec/gcc%2Frust%2Flex%2Frust-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/143219798492864c8eff7fecbdb9257fa10bf4ec/gcc%2Frust%2Flex%2Frust-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.cc?ref=143219798492864c8eff7fecbdb9257fa10bf4ec", "patch": "@@ -347,7 +347,7 @@ Lexer::build_token ()\n \t\t  current_line++;\n \t\t  current_column = 1;\n \t\t  // tell line_table that new line starts\n-\t\t  line_map->start_line (current_line, max_column_hint);\n+\t\t  start_line (current_line, max_column_hint);\n \t\t  break;\n \t\t}\n \t      else\n@@ -368,7 +368,7 @@ Lexer::build_token ()\n \t  current_line++;\n \t  current_column = 1;\n \t  // tell line_table that new line starts\n-\t  line_map->start_line (current_line, max_column_hint);\n+\t  start_line (current_line, max_column_hint);\n \t  continue;\n \tcase '\\r': // cr\n \t  // Ignore, we expect a newline (lf) soon.\n@@ -540,7 +540,7 @@ Lexer::build_token ()\n \t      current_line++;\n \t      current_column = 1;\n \t      // tell line_table that new line starts\n-\t      line_map->start_line (current_line, max_column_hint);\n+\t      start_line (current_line, max_column_hint);\n \n \t      str.shrink_to_fit ();\n \t      if (is_inner)\n@@ -617,7 +617,7 @@ Lexer::build_token ()\n \t\t      current_line++;\n \t\t      current_column = 1;\n \t\t      // tell line_table that new line starts\n-\t\t      line_map->start_line (current_line, max_column_hint);\n+\t\t      start_line (current_line, max_column_hint);\n \t\t      continue;\n \t\t    }\n \n@@ -686,7 +686,7 @@ Lexer::build_token ()\n \t\t      current_line++;\n \t\t      current_column = 1;\n \t\t      // tell line_table that new line starts\n-\t\t      line_map->start_line (current_line, max_column_hint);\n+\t\t      start_line (current_line, max_column_hint);\n \t\t      str += '\\n';\n \t\t      continue;\n \t\t    }\n@@ -1400,7 +1400,7 @@ Lexer::parse_partial_string_continue ()\n \t  current_line++;\n \t  current_column = 1;\n \t  // tell line_table that new line starts\n-\t  line_map->start_line (current_line, max_column_hint);\n+\t  start_line (current_line, max_column_hint);\n \n \t  // reset \"length\"\n \t  additional_length_offset = 1;\n@@ -2688,4 +2688,12 @@ Lexer::split_current_token (TokenId new_left, TokenId new_right)\n   token_queue.replace_current_value (std::move (new_left_tok));\n   token_queue.insert (1, std::move (new_right_tok));\n }\n+\n+void\n+Lexer::start_line (int current_line, int current_column)\n+{\n+  if (line_map)\n+    line_map->start_line (current_line, current_column);\n+}\n+\n } // namespace Rust"}, {"sha": "b501a69a7952295521cda6c4629e917bb69bc372", "filename": "gcc/rust/lex/rust-lex.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/143219798492864c8eff7fecbdb9257fa10bf4ec/gcc%2Frust%2Flex%2Frust-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/143219798492864c8eff7fecbdb9257fa10bf4ec/gcc%2Frust%2Flex%2Frust-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.h?ref=143219798492864c8eff7fecbdb9257fa10bf4ec", "patch": "@@ -205,6 +205,8 @@ class Lexer\n   std::string get_filename () { return std::string (input.get_filename ()); }\n \n private:\n+  void start_line (int current_line, int current_column);\n+\n   // File for use as input.\n   RAIIFile input;\n   // TODO is this actually required? could just have file storage in InputSource"}]}