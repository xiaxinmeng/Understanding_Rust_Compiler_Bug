{"sha": "5621d7177ec0ae3b73fa0d85058bd5b6203bdba8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYyMWQ3MTc3ZWMwYWUzYjczZmEwZDg1MDU4YmQ1YjYyMDNiZGJhOA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-10-02T17:42:18Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-10-02T17:42:18Z"}, "message": "pa.c (remove_useless_addtr_insns): New function.\n\n        * pa/pa.c (remove_useless_addtr_insns): New function.\n        (pa_reorg): Delete code to remove useless add,tr insns.\n        Instead call remove_useless_addtr_insns.\n        (output_function_prologue): Call remove_useless_addtr_insns\n        to catch any add,tr insns created by reorg.\n\nFrom-SVN: r12889", "tree": {"sha": "4be20c1e43239f56551ee291ec585bf334c9a27a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4be20c1e43239f56551ee291ec585bf334c9a27a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5621d7177ec0ae3b73fa0d85058bd5b6203bdba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5621d7177ec0ae3b73fa0d85058bd5b6203bdba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5621d7177ec0ae3b73fa0d85058bd5b6203bdba8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5621d7177ec0ae3b73fa0d85058bd5b6203bdba8/comments", "author": null, "committer": null, "parents": [{"sha": "a998424becbe45e1e14de63e4483352534f11818", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a998424becbe45e1e14de63e4483352534f11818", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a998424becbe45e1e14de63e4483352534f11818"}], "stats": {"total": 235, "additions": 154, "deletions": 81}, "files": [{"sha": "9080f979bba5a996eb4de4dca3ee1ade853e8da0", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 154, "deletions": 81, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5621d7177ec0ae3b73fa0d85058bd5b6203bdba8/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5621d7177ec0ae3b73fa0d85058bd5b6203bdba8/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=5621d7177ec0ae3b73fa0d85058bd5b6203bdba8", "patch": "@@ -1966,6 +1966,157 @@ output_ascii (file, p, size)\n     }\n   fputs (\"\\\"\\n\", file);\n }\n+\n+/* Try to rewrite floating point comparisons & branches to avoid\n+   useless add,tr insns.\n+\n+   CHECK_NOTES is nonzero if we should examine REG_DEAD notes\n+   to see if FPCC is dead.  CHECK_NOTES is nonzero for the\n+   first attempt to remove useless add,tr insns.  It is zero\n+   for the second pass as reorg sometimes leaves bogus REG_DEAD\n+   notes lying around.\n+\n+   When CHECK_NOTES is zero we can only eliminate add,tr insns\n+   when there's a 1:1 correspondence between fcmp and ftest/fbranch\n+   instructions.  */\n+void\n+remove_useless_addtr_insns (insns, check_notes)\n+     rtx insns;\n+     int check_notes;\n+{\n+  rtx insn;\n+  int all;\n+  static int pass = 0;\n+\n+  /* This is fairly cheap, so always run it when optimizing.  */\n+  if (optimize > 0)\n+    {\n+      int fcmp_count = 0;\n+      int fbranch_count = 0;\n+\n+      /* Walk all the insns in this function looking for fcmp & fbranch\n+\t instructions.  Keep track of how many of each we find.  */\n+      insns = get_insns ();\n+      for (insn = insns; insn; insn = next_insn (insn))\n+\t{\n+\t  rtx tmp;\n+\n+\t  /* Ignore anything that isn't an INSN or a JUMP_INSN.  */\n+\t  if (GET_CODE (insn) != INSN && GET_CODE (insn) != JUMP_INSN)\n+\t    continue;\n+\n+\t  tmp = PATTERN (insn);\n+\n+\t  /* It must be a set.  */\n+\t  if (GET_CODE (tmp) != SET)\n+\t    continue;\n+\n+\t  /* If the destination is CCFP, then we've found an fcmp insn.  */\n+\t  tmp = SET_DEST (tmp);\n+\t  if (GET_CODE (tmp) == REG && REGNO (tmp) == 0)\n+\t    {\n+\t      fcmp_count++;\n+\t      continue;\n+\t    }\n+\t    \n+\t  tmp = PATTERN (insn);\n+\t  /* If this is an fbranch instruction, bump the fbranch counter.  */\n+\t  if (GET_CODE (tmp) == SET\n+\t      && SET_DEST (tmp) == pc_rtx\n+\t      && GET_CODE (SET_SRC (tmp)) == IF_THEN_ELSE\n+\t      && GET_CODE (XEXP (SET_SRC (tmp), 0)) == NE\n+\t      && GET_CODE (XEXP (XEXP (SET_SRC (tmp), 0), 0)) == REG\n+\t      && REGNO (XEXP (XEXP (SET_SRC (tmp), 0), 0)) == 0)\n+\t    {\n+\t      fbranch_count++;\n+\t      continue;\n+\t    }\n+\t}\n+\n+\n+      /* Find all floating point compare + branch insns.  If possible,\n+\t reverse the comparison & the branch to avoid add,tr insns.  */\n+      for (insn = insns; insn; insn = next_insn (insn))\n+\t{\n+\t  rtx tmp, next;\n+\n+\t  /* Ignore anything that isn't an INSN.  */\n+\t  if (GET_CODE (insn) != INSN)\n+\t    continue;\n+\n+\t  tmp = PATTERN (insn);\n+\n+\t  /* It must be a set.  */\n+\t  if (GET_CODE (tmp) != SET)\n+\t    continue;\n+\n+\t  /* The destination must be CCFP, which is register zero.  */\n+\t  tmp = SET_DEST (tmp);\n+\t  if (GET_CODE (tmp) != REG || REGNO (tmp) != 0)\n+\t    continue;\n+\n+\t  /* INSN should be a set of CCFP.\n+\n+\t     See if the result of this insn is used in a reversed FP\n+\t     conditional branch.  If so, reverse our condition and\n+\t     the branch.  Doing so avoids useless add,tr insns.  */\n+\t  next = next_insn (insn);\n+\t  while (next)\n+\t    {\n+\t      /* Jumps, calls and labels stop our search.  */\n+\t      if (GET_CODE (next) == JUMP_INSN\n+\t\t  || GET_CODE (next) == CALL_INSN\n+\t\t  || GET_CODE (next) == CODE_LABEL)\n+\t\tbreak;\n+\n+\t      /* As does another fcmp insn.  */\n+\t      if (GET_CODE (next) == INSN\n+\t\t  && GET_CODE (PATTERN (next)) == SET\n+\t\t  && GET_CODE (SET_DEST (PATTERN (next))) == REG\n+\t\t  && REGNO (SET_DEST (PATTERN (next))) == 0)\n+\t\tbreak;\n+\n+\t      next = next_insn (next);\n+\t    }\n+\n+\t  /* Is NEXT_INSN a branch?  */\n+\t  if (next\n+\t      && GET_CODE (next) == JUMP_INSN)\n+\t    {\n+\t      rtx pattern = PATTERN (next);\n+\n+\t      /* If it a reversed fp conditional branch (eg uses add,tr)\n+\t\t and CCFP dies, then reverse our conditional and the branch\n+\t\t to avoid the add,tr.  */\n+\t      if (GET_CODE (pattern) == SET\n+\t\t  && SET_DEST (pattern) == pc_rtx\n+\t\t  && GET_CODE (SET_SRC (pattern)) == IF_THEN_ELSE\n+\t\t  && GET_CODE (XEXP (SET_SRC (pattern), 0)) == NE\n+\t\t  && GET_CODE (XEXP (XEXP (SET_SRC (pattern), 0), 0)) == REG\n+\t\t  && REGNO (XEXP (XEXP (SET_SRC (pattern), 0), 0)) == 0\n+\t\t  && GET_CODE (XEXP (SET_SRC (pattern), 1)) == PC\n+\t\t  && (fcmp_count == fbranch_count\n+\t\t      || (check_notes\n+\t\t\t  && find_regno_note (next, REG_DEAD, 0))))\n+\t\t{\n+\t\t  /* Reverse the branch.  */\n+\t\t  tmp = XEXP (SET_SRC (pattern), 1);\n+\t\t  XEXP (SET_SRC (pattern), 1) = XEXP (SET_SRC (pattern), 2);\n+\t\t  XEXP (SET_SRC (pattern), 2) = tmp;\n+\t\t  INSN_CODE (next) = -1;\n+\n+\t\t  /* Reverse our condition.  */\n+\t\t  tmp = PATTERN (insn);\n+\t\t  PUT_CODE (XEXP (tmp, 1),\n+\t\t\t    reverse_condition (GET_CODE (XEXP (tmp, 1))));\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+  pass = !pass;\n+\n+}\n \f\n /* You may have trouble believing this, but this is the HP-PA stack\n    layout.  Wow.\n@@ -2233,6 +2384,8 @@ output_function_prologue (file, size)\n     }\n   else\n     total_code_bytes = -1;\n+\n+  remove_useless_addtr_insns (get_insns (), 0);\n }\n \n void\n@@ -5494,87 +5647,7 @@ pa_reorg (insns)\n {\n   rtx insn;\n \n-  /* This is fairly cheap, so always run it if optimizing.  */\n-  if (optimize > 0)\n-    {\n-      /* Find all floating point compare + branch insns.  If possible,\n-\t reverse the comparison & the branch to avoid add,tr insns.  */\n-      insns = get_insns ();\n-      for (insn = insns; insn; insn = NEXT_INSN (insn))\n-\t{\n-\t  rtx tmp, next_insn;\n-\n-\t  /* Ignore anything that isn't an INSN.  */\n-\t  if (GET_CODE (insn) != INSN)\n-\t    continue;\n-\n-\t  tmp = PATTERN (insn);\n-\n-\t  /* It must be a set.  */\n-\t  if (GET_CODE (tmp) != SET)\n-\t    continue;\n-\n-\t  /* The destination must be CCFP, which is register zero.  */\n-\t  tmp = SET_DEST (tmp);\n-\t  if (GET_CODE (tmp) != REG || REGNO (tmp) != 0)\n-\t    continue;\n-\n-\t  /* INSN should be a set of CCFP.\n-\n-\t     See if the result of this insn is used in a reversed FP\n-\t     conditional branch.  If so, reverse our condition and\n-\t     the branch.  Doing so avoids useless add,tr insns.  */\n-\t  next_insn = NEXT_INSN (insn);\n-\t  while (next_insn)\n-\t    {\n-\t      /* Jumps, calls and labels stop our search.  */\n-\t      if (GET_CODE (next_insn) == JUMP_INSN\n-\t\t  || GET_CODE (next_insn) == CALL_INSN\n-\t\t  || GET_CODE (next_insn) == CODE_LABEL)\n-\t\tbreak;\n-\n-\t      /* As does another fcmp insn.  */\n-\t      if (GET_CODE (next_insn) == INSN\n-\t\t  && GET_CODE (PATTERN (next_insn)) == SET\n-\t\t  && GET_CODE (SET_DEST (PATTERN (next_insn))) == REG\n-\t\t  && REGNO (SET_DEST (PATTERN (next_insn))) == 0)\n-\t\tbreak;\n-\n-\t      next_insn = NEXT_INSN (next_insn);\n-\t    }\n-\n-\t  /* Is NEXT_INSN a branch?  */\n-\t  if (next_insn\n-\t      && GET_CODE (next_insn) == JUMP_INSN)\n-\t    {\n-\t      rtx pattern = PATTERN (next_insn);\n-\n-\t      /* If it a reversed fp conditional branch (eg uses add,tr)\n-\t\t and CCFP dies, then reverse our conditional and the branch\n-\t\t to avoid the add,tr.  */\n-\t      if (GET_CODE (pattern) == SET\n-\t\t  && SET_DEST (pattern) == pc_rtx\n-\t\t  && GET_CODE (SET_SRC (pattern)) == IF_THEN_ELSE\n-\t\t  && GET_CODE (XEXP (SET_SRC (pattern), 0)) == NE\n-\t\t  && GET_CODE (XEXP (XEXP (SET_SRC (pattern), 0), 0)) == REG\n-\t\t  && REGNO (XEXP (XEXP (SET_SRC (pattern), 0), 0)) == 0\n-\t\t  && GET_CODE (XEXP (SET_SRC (pattern), 1)) == PC\n-\t\t  && find_regno_note (next_insn, REG_DEAD, 0))\n-\t\t{\n-\t\t  /* Reverse the branch.  */\n-\t\t  tmp = XEXP (SET_SRC (pattern), 1);\n-\t\t  XEXP (SET_SRC (pattern), 1) = XEXP (SET_SRC (pattern), 2);\n-\t\t  XEXP (SET_SRC (pattern), 2) = tmp;\n-\t\t  INSN_CODE (next_insn) = -1;\n-\n-\t\t  /* Reverse our condition.  */\n-\t\t  tmp = PATTERN (insn);\n-\t\t  PUT_CODE (XEXP (tmp, 1),\n-\t\t\t    reverse_condition (GET_CODE (XEXP (tmp, 1))));\n-\t\t}\n-\t    }\n-\t}\n-    }\n+  remove_useless_addtr_insns (insns, 1);\n \n   /* This is fairly cheap, so always run it if optimizing.  */\n   if (optimize > 0)"}]}