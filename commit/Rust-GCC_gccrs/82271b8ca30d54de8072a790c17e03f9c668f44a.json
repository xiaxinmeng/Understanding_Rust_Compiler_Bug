{"sha": "82271b8ca30d54de8072a790c17e03f9c668f44a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIyNzFiOGNhMzBkNTRkZTgwNzJhNzkwYzE3ZTAzZjljNjY4ZjQ0YQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@purist.soma.redhat.com", "date": "2000-10-12T12:52:09Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-12T12:52:09Z"}, "message": "Makefile.am: Use it.\n\n\n2000-10-11  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* libsupc++/Makefile.am: Use it.\n\t* libio/Makefile.am: Use it.\n\t* libmath/Makefile.am: Use it.\n\t* src/Makefile.am: Use it.\n\t* Makefile.am (AM_MAKEFLAGS): Remove includes.\n\n\t* acinclude.m4 (GLIBCPP_EXPORT_INCLUES): Move include macros here.\n\t(GLIBCPP_EXPORT_FLAGS): Move CXX flag setting here.\n\t* configure.in: Use it.\n\n\t* mkcheck.in (SRC_DIR): Use C_INCLUDE_DIR.\n\n\t* src/Makefile.am (CXXCOMPILE): Remove.\n\t* src/Makefile.in: Regenerate.\n\t* libsupc++/Makefile.am (CXXCOMPILE): Same here.\n\t* libsupc++/Makefile.in: Regenerate.\n\n\t* include/c_std/*: Merge with shadow.\n\t* include/c_std/bits/*: Same.\n\n\t* shadow: Remove directory.\n\t* shadow/*: De-populate.\n\nFrom-SVN: r36852", "tree": {"sha": "2feeeaa945e4ea85508e719cd2d8e08d538932e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2feeeaa945e4ea85508e719cd2d8e08d538932e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82271b8ca30d54de8072a790c17e03f9c668f44a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82271b8ca30d54de8072a790c17e03f9c668f44a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82271b8ca30d54de8072a790c17e03f9c668f44a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82271b8ca30d54de8072a790c17e03f9c668f44a/comments", "author": null, "committer": null, "parents": [{"sha": "607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b"}], "stats": {"total": 3206, "additions": 6, "deletions": 3200}, "files": [{"sha": "eed81f059c0d0f5cacd3064e60480430e02106bb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82271b8ca30d54de8072a790c17e03f9c668f44a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82271b8ca30d54de8072a790c17e03f9c668f44a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=82271b8ca30d54de8072a790c17e03f9c668f44a", "patch": "@@ -17,6 +17,12 @@\n \t* libsupc++/Makefile.am (CXXCOMPILE): Same here.\n \t* libsupc++/Makefile.in: Regenerate.\n \n+\t* include/c_std/*: Merge with shadow.\n+\t* include/c_std/bits/*: Same.\n+\n+\t* shadow: Remove directory.\n+\t* shadow/*: De-populate.\n+\t\n 2000-10-11  Phil Edwards  <pme@sources.redhat.com>\n \n \t* acinclude.m4 (GLIBCPP_CHECK_LINKER_FEATURES):  Comment out"}, {"sha": "7017de99b27845f1db6a990353c32c52698a5537", "filename": "libstdc++-v3/shadow/bits/std_cassert.h", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cassert.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,49 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 19.2  Assertions\n-//\n-\n-#ifndef _CPP_CASSERT\n-#define _CPP_CASSERT 1\n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#   define _IN_C_LEGACY_\n-#   pragma GCC system_header\n-#   include_next <assert.h>\n-  }\n-} // namespace _C_legacy\n-\n-#undef _IN_C_LEGACY_\n-\n-#endif\n-\n-"}, {"sha": "d164d9c198efe0a98a96f9e53f411a922c96e696", "filename": "libstdc++-v3/shadow/bits/std_cctype.h", "status": "removed", "additions": 0, "deletions": 145, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cctype.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,145 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-// ISO C++ 14882: 22\n-//\n-\n-#ifndef _CPP_CCTYPE\n-#define _CPP_CCTYPE 1\n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     pragma GCC system_header\n-#     include_next <ctype.h>\n-  }\n-\n-  inline int \n-  _CPP_isalnum_capture(int c) { return isalnum(c); }\n-\n-  inline int \n-  _CPP_isalpha_capture(int c) { return isalpha(c); }\n-\n-  inline int \n-  _CPP_iscntrl_capture(int c) { return iscntrl(c); }\n-\n-  inline int \n-  _CPP_isdigit_capture(int c) { return isdigit(c); }\n-\n-  inline int \n-  _CPP_isgraph_capture(int c) { return isgraph(c); }\n-\n-  inline int \n-  _CPP_islower_capture(int c) { return islower(c); }\n-\n-  inline int \n-  _CPP_isprint_capture(int c) { return isprint(c); }\n-\n-  inline int \n-  _CPP_ispunct_capture(int c) { return ispunct(c); }\n-\n-  inline int \n-  _CPP_isspace_capture(int c) { return isspace(c); }\n-\n-  inline int \n-  _CPP_isupper_capture(int c) { return isupper(c); }\n-\n-  inline int \n-  _CPP_isxdigit_capture(int c) { return isxdigit(c); }\n-\n-  inline int \n-  _CPP_tolower_capture(int c) { return tolower(c); }\n-\n-  inline int \n-  _CPP_toupper_capture(int c) { return toupper(c); }\n-} // namespace _C_legacy\n-\n-# undef isalnum\n-# undef isalpha\n-# undef iscntrl\n-# undef isdigit\n-# undef isgraph\n-# undef islower\n-# undef isprint\n-# undef ispunct\n-# undef isspace\n-# undef isupper\n-# undef isxdigit\n-\n-# undef tolower\n-# undef toupper\n-\n-namespace std {\n-  inline int \n-  isalnum(int __c) { return _C_legacy::_CPP_isalnum_capture(__c); }\n-\n-  inline int \n-  isalpha(int __c) { return _C_legacy::_CPP_isalpha_capture(__c); }\n-\n-  inline int \n-  iscntrl(int __c) { return _C_legacy::_CPP_iscntrl_capture(__c); }\n-\n-  inline int \n-  isdigit(int __c) { return _C_legacy::_CPP_isdigit_capture(__c); }\n-\n-  inline int \n-  isgraph(int __c) { return _C_legacy::_CPP_isgraph_capture(__c); }\n-\n-  inline int \n-  islower(int __c) { return _C_legacy::_CPP_islower_capture(__c); }\n-\n-  inline int \n-  isprint(int __c) { return _C_legacy::_CPP_isprint_capture(__c); }\n-\n-  inline int \n-  ispunct(int __c) { return _C_legacy::_CPP_ispunct_capture(__c); }\n-\n-  inline int \n-  isspace(int __c) { return _C_legacy::_CPP_isspace_capture(__c); }\n-\n-  inline int \n-  isupper(int __c) { return _C_legacy::_CPP_isupper_capture(__c); }\n-\n-  inline int \n-  isxdigit(int __c) { return _C_legacy::_CPP_isxdigit_capture(__c); }\n-\n-  inline int \n-  tolower(int __c) { return _C_legacy::_CPP_tolower_capture(__c); }\n-\n-  inline int \n-  toupper(int __c) { return _C_legacy::_CPP_toupper_capture(__c); }\n-} // namespace std\n-  \n-# undef _IN_C_LEGACY_\n-\n-#endif\n-\n-\n-\n-"}, {"sha": "fb7a73fe64dba59a28d04f33e108c21f01a70d8a", "filename": "libstdc++-v3/shadow/bits/std_cerrno.h", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cerrno.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cerrno.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cerrno.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,58 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-// ISO C++ 14882: 19.3  Error numbers\n-//\n-\n-#ifndef _CPP_CERRNO\n-#define _CPP_CERRNO 1\n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     pragma GCC system_header\n-#     include_next <errno.h>\n-  }\n-\n-  //  inline int& \n-  //  _CPP_errno_capture() { return errno; }\n-\n-} // namespace _C_legacy::\n-\n-#  undef  errno\n-//#  define errno _C_legacy::_CPP_errno_capture()\n-\n-namespace std {\n-  using _C_legacy::errno;\n-}\n-\n-# undef _IN_C_LEGACY_\n-\n-#endif\n-"}, {"sha": "d8885e69c44cb22b472bbaf4945262b4cdb15a4b", "filename": "libstdc++-v3/shadow/bits/std_cfloat.h", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cfloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cfloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cfloat.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,54 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 18.2.2  Implementation properties: C library\n-//\n-\n-#ifndef _CPP_CFLOAT\n-#define _CPP_CFLOAT 1\n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     pragma GCC system_header\n-#     include_next <float.h>\n-  }\n-} // namespace _C_legacy\n-\n-# undef _IN_C_LEGACY_\n-\n-#endif\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "d0db90521b062618c2db95f98b64db61815662bc", "filename": "libstdc++-v3/shadow/bits/std_climits.h", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_climits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_climits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_climits.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,57 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 18.2.2  Implementation properties: C library\n-//\n-\n-#ifndef _CPP_CLIMITS\n-#define _CPP_CLIMTIS 1\n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     pragma GCC system_header\n-#     include_next <limits.h>\n-  }\n-} // namespace _C_legacy\n-\n-# undef _IN_C_LEGACY_\n-\n-#endif\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "86d600e262e96fb29f71e3b63ad4a889f1573683", "filename": "libstdc++-v3/shadow/bits/std_clocale.h", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_clocale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_clocale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_clocale.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,70 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 18.2.2  Implementation properties: C library\n-//\n-\n-#ifndef _CPP_CLOCALE\n-#define _CPP_CLOCALE     1\n-\n-# include <bits/std_cstddef.h> \n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     pragma GCC system_header\n-#     include_next <locale.h>\n-  }\n-\n-  typedef lconv _CPP_lconv_capture;\n-} // namespace _C_legacy\n-\n-#  undef lconv\n-#  undef setlocale\n-#  undef localeconv\n-\n-namespace std {\n-  // Adopt C names into std::\n-  struct lconv : _C_legacy::_CPP_lconv_capture  { };\n-\n-  using _C_legacy::setlocale;  \n-\n-  inline lconv* \n-  localeconv() { return reinterpret_cast<lconv*>(_C_legacy::localeconv()); }\n-} // namespace std\n-\n-# undef _IN_C_LEGACY_\n-\n-#endif \n-\n-\n-\n-\n-"}, {"sha": "6113417eae54044298dbe85a84aad0370654179e", "filename": "libstdc++-v3/shadow/bits/std_cmath.h", "status": "removed", "additions": 0, "deletions": 836, "changes": 836, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cmath.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,836 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 26.5  C library\n-//\n-\n-#ifndef _CPP_CMATH\n-#define _CPP_CMATH 1\n-\n-# include <bits/c++config.h>\n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     pragma GCC system_header\n-#     include_next <math.h>\n-  }\n-\n-#if _GLIBCPP_HAVE_ACOSF\n-  inline float \n-  _CPP_acos_capture(float __x) { return acosf(__x); }\n-#else\n-  inline float \n-  _CPP_acos_capture(float __x) { return acos(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_ASINF\n-  inline float \n-  _CPP_asin_capture(float __x) { return asinf(__x); }\n-#else\n-  inline float \n-  _CPP_asin_capture(float __x) { return asin(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_ATANF\n-  inline float \n-  _CPP_atan_capture(float __x) { return atanf(__x); }\n-#else\n-  inline float \n-  _CPP_atan_capture(float __x) { return atan(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_ATAN2F\n-  inline float \n-  _CPP_atan2_capture(float __y, float __x) { return atan2f(__y, __x); }\n-#else\n-  inline float \n-  _CPP_atan2_capture(float __y, float __x) \n-  { return atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_CEILF\n-  inline float \n-  _CPP_ceil_capture(float __x) { return ceilf(__x); }\n-#else\n-  inline float \n-  _CPP_ceil_capture(float __x) { return ceil(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE___BUILTIN_COSF\n-  inline float \n-  _CPP_cos_capture(float __x) { return __builtin_cosf(__x); }\n-#elif _GLIBCPP_HAVE_COSF\n-  inline float \n-  _CPP_cos_capture(float __x) { return cosf(__x); }\n-#else\n-  inline float \n-  _CPP_cos_capture(float __x) { return cos(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_COSHF\n-  inline float \n-  _CPP_cosh_capture(float __x) { return coshf(__x); }\n-#else\n-  inline float \n-  _CPP_cosh_capture(float __x) { return cosh(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_EXPF\n-  inline float \n-  _CPP_exp_capture(float __x) { return expf(__x); }\n-#else\n-  inline float \n-  _CPP_exp_capture(float __x) { return exp(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE___BUILTIN_FABSF\n-  inline float \n-  _CPP_fabs_capture(float __x) { return __builtin_fabsf(__x); }\n-#elif _GLIBCPP_HAVE_FABSF\n-  inline float \n-  _CPP_fabs_capture(float __x) { return fabsf(__x); }\n-#else\n-  inline float \n-  _CPP_fabs_capture(float __x) { return fabs(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_FLOORF\n-  inline float \n-  _CPP_floor_capture(float __x) { return floorf(__x); }\n-#else\n-  inline float \n-  _CPP_floor_capture(float __x) { return floor(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_FMODFF\n-  inline float \n-  _CPP_fmod_capture(float __x, float __y) { return fmodf(__x, __y); }\n-#else\n-  inline float \n-  _CPP_fmod_capture(float __x, float __y) \n-  { return fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_FREXPF\n-  inline float \n-  _CPP_frexp_capture(float __x, int* __exp) { return frexpf(__x, __exp); }\n-#else\n-  inline float \n-  _CPP_frexp_capture(float __x, int* __exp) { return frexp(__x, __exp); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_LDEXPF\n-  inline float \n-  _CPP_ldexp_capture(float __x, int __exp) { return ldexpf(__x, __exp); }\n-#else\n-  inline float \n-  _CPP_ldexp_capture(float __x, int __exp) \n-  { return ldexp(static_cast<double>(__x), __exp); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_LOGF\n-  inline float \n-  _CPP_log_capture(float __x) { return logf(__x); }\n-#else\n-  inline float \n-  _CPP_log_capture(float __x) { return log(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_LOG10F\n-  inline float \n-  _CPP_log10_capture(float __x) { return log10f(__x); }\n-#else\n-  inline float \n-  _CPP_log10_capture(float __x) { return log10(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_MODFF\n-  inline float \n-  _CPP_modf_capture(float __x, float* __iptr) { return modff(__x, __iptr); }\n-#else\n-  inline float \n-  _CPP_modf_capture(float __x, float* __iptr)\n-  {\n-    double __tmp;\n-    double __res = _C_legacy::modf(static_cast<double>(__x), &__tmp);\n-    *__iptr = static_cast<float> (__tmp);\n-    return __res;\n-  }\n-#endif\n-  \n-#if _GLIBCPP_HAVE_POWF\n-  inline float \n-  _CPP_pow_capture(float __x, float __y) { return powf(__x, __y); }\n-#else\n-  inline float \n-  _CPP_pow_capture(float __x, float __y)\n-  { return pow(static_cast<double>(__x), static_cast<double>(__y)); }\n-#endif\n-\n-  float pow(float, int);\n-\n-#if _GLIBCPP_HAVE___BUILTIN_SINF\n-  inline float \n-  _CPP_sin_capture(float __x) { return __builtin_sinf(__x); }\n-#elif _GLIBCPP_HAVE_SINF\n-  inline float \n-  _CPP_sin_capture(float __x) { return sinf(__x); }\n-#else\n-  inline float \n-  _CPP_sin_capture(float __x) { return sin(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_SINHF\n-  inline float \n-  _CPP_sinh_capture(float __x) { return sinhf(__x); }\n-#else\n-  inline float \n-  _CPP_sinh_capture(float __x) { return sinh(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE___BUILTIN_SQRTF\n-  inline float \n-  _CPP_sqrt_capture(float __x) { return __builtin_sqrtf(__x); }\n-#elif _GLIBCPP_HAVE_SQRTF\n-  inline float \n-  _CPP_sqrt_capture(float __x) { return sqrtf(__x); }\n-#else\n-  inline float \n-  _CPP_sqrt_capture(float __x) { return sqrt(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_TANF\n-  inline float \n-  _CPP_tan_capture(float __x) { return tanf(__x); }\n-#else\n-  inline float \n-  _CPP_tan_capture(float __x) { return tan(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_TANHF\n-  inline float \n-  _CPP_tanh_capture(float __x) { return tanhf(__x); }\n-#else\n-  inline float \n-  _CPP_tanh_capture(float __x) { return tanh(static_cast<double>(__x)); }\n-#endif\n-\n-\n-  inline double \n-  _CPP_acos_capture(double __x) { return acos(__x); }\n-\n-  inline double \n-  _CPP_asin_capture(double __x) { return asin(__x); }\n-\n-  inline double \n-  _CPP_atan_capture(double __x) { return atan(__x); }\n-\n-  inline double \n-  _CPP_atan2_capture(double __y, double __x) { return atan2(__y, __x); }\n-\n-  inline double \n-  _CPP_ceil_capture(double __x) { return ceil(__x); }\n-\n-#if _GLIBCPP_HAVE___BUILTIN_COS\n-  inline double \n-  _CPP_cos_capture(double __x) { return __builtin_cos(__x); }\n-#else\n-  inline double \n-  _CPP_cos_capture(double __x) { return cos(__x); }\n-#endif\n-\n-  inline double \n-  _CPP_cosh_capture(double __x) { return cosh(__x); }\n-\n-  inline double \n-  _CPP_exp_capture(double __x) { return exp(__x); }\n-\n-#if _GLIBCPP_HAVE___BUILTIN_FABS\n-  inline double \n-  _CPP_fabs_capture(double __x) { return __builtin_fabs(__x); }\n-#else\n-  inline double \n-  _CPP_fabs_capture(double __x) { return fabs(__x); }\n-#endif\n-\n-  inline double \n-  _CPP_floor_capture(double __x) { return floor(__x); }\n-\n-  inline double \n-  _CPP_fmod_capture(double __x, double __y) { return fmod(__x, __y); }\n-\n-  inline double \n-  _CPP_frexp_capture(double __x, int* __exp) { return frexp(__x, __exp); }\n-\n-  inline double \n-  _CPP_ldexp_capture(double __x, int __exp) { return ldexp(__x, __exp); }\n-\n-  inline double \n-  _CPP_log_capture(double __x) { return log(__x); }\n-\n-  inline double \n-  _CPP_log10_capture(double __x) { return log10(__x); }\n-\n-  inline double \n-  _CPP_modf_capture(double __x, double* __iptr) { return modf(__x, __iptr); }\n-\n-  inline double \n-  _CPP_pow_capture(double __x, double __y) { return pow(__x, __y); }\n-\n-#if _GLIBCPP_HAVE___BUILTIN_SIN\n-  inline double \n-  _CPP_sin_capture(double __x) { return __builtin_sin(__x); }\n-#else\n-  inline double \n-  _CPP_sin_capture(double __x) { return sin(__x); }\n-#endif\n-\n-  inline double \n-  _CPP_sinh_capture(double __x) { return sinh(__x); }\n-\n-#if _GLIBCPP_HAVE___BUILTIN_SQRT\n-  inline double \n-  _CPP_sqrt_capture(double __x) { return __builtin_fsqrt(__x); }\n-#else\n-  inline double \n-  _CPP_sqrt_capture(double __x) { return sqrt(__x); }\n-#endif\n-\n-  inline double \n-  _CPP_tan_capture(double __x) { return tan(__x); }\n-\n-  inline double \n-  _CPP_tanh_capture(double __x) { return tanh(__x); }\n-\n-\n-#if _GLIBCPP_HAVE_ACOSL\n-  inline long double \n-  _CPP_acos_capture(long double __x) { return acosl(__x); }\n-#else\n-  inline long double \n-  _CPP_acos_capture(long double __x) { return acos(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_ASINL\n-  inline long double \n-  _CPP_asin_capture(long double __x) { return asinl(__x); }\n-#else\n-  inline long double \n-  _CPP_asin_capture(long double __x) { return asin(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_ATANL\n-  inline long double \n-  _CPP_atan_capture(long double __x) { return atanl(__x); }\n-#else\n-  inline long double \n-  _CPP_atan_capture(long double __x) { return atan(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_ATAN2L\n-  inline long double \n-  _CPP_atan2_capture(long double __y, long double __x)\n-  { return atan2l(__y, __x); }\n-#else\n-  inline long double \n-  _CPP_atan2_capture(long double __y, long double __x) \n-  { return atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_CEILL\n-  inline long double \n-  _CPP_ceil_capture(long double __x) { return ceill(__x); }\n-#else\n-  inline long double \n-  _CPP_ceil_capture(long double __x) { return ceil(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE___BUILTIN_COSL\n-  inline long double \n-  _CPP_cos_capture(long double __x) { return __builtin_cosl(__x); }\n-#elif _GLIBCPP_HAVE_COSL\n-  inline long double \n-  _CPP_cos_capture(long double __x) { return cosl(__x); }\n-#else\n-  inline long double \n-  _CPP_cos_capture(long double __x) { return cos(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_COSHL\n-  inline long double \n-  _CPP_cosh_capture(long double __x) { return coshl(__x); }\n-#else\n-  inline long double \n-  _CPP_cosh_capture(long double __x) { return cosh(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_EXPL\n-  inline long double \n-  _CPP_exp_capture(long double __x) { return expl(__x); }\n-#else\n-  inline long double \n-  _CPP_exp_capture(long double __x) { return exp(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE___BUILTIN_FABSL\n-  inline long double \n-  _CPP_fabs_capture(long double __x) { return __builtin_fabsl(__x); }\n-#elif _GLIBCPP_HAVE_FABSL\n-  inline long double \n-  _CPP_fabs_capture(long double __x) { return fabsl(__x); }\n-#else\n-  inline long double \n-  _CPP_fabs_capture(long double __x) { return fabs(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_FLOORL\n-  inline long double \n-  _CPP_floor_capture(long double __x) { return floorl(__x); }\n-#else\n-  inline long double \n-  _CPP_floor_capture(long double __x) \n-  { return floor(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_FMODL\n-  inline long double \n-  _CPP_fmod_capture(long double __x, long double __y) \n-  { return fmodl(__x, __y); }\n-#else\n-  inline long double \n-  _CPP_fmod_capture(long double __x, long double __y)\n-  { return fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_FREXPL\n-  inline long double \n-  _CPP_frexp_capture(long double __x, int* __exp) \n-  { return frexpl(__x, __exp); }\n-#else\n-  inline long double \n-  _CPP_frexp_capture(long double __x, int* __exp)\n-  { return frexp(static_cast<double>(__x), __exp); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_LDEXPL\n-  inline long double \n-  _CPP_ldexp_capture(long double __x, int __exp) { return ldexpl(__x, __exp); }\n-#else\n-  inline long double \n-  _CPP_ldexp_capture(long double __x, int __exp)\n-  { return ldexp(static_cast<double>(__x), __exp); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_LOGL\n-  inline long double \n-  _CPP_log_capture(long double __x) { return logl(__x); }\n-#else\n-  inline long double \n-  _CPP_log_capture(long double __x) { return log(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_LOG10L\n-  inline long double \n-  _CPP_log10_capture(long double __x) { return log10l(__x); }\n-#else\n-  inline long double \n-  _CPP_log10_capture(long double __x) \n-  { return log10(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_MODFL\n-  inline long double \n-  _CPP_modf_capture(long double __x, long double* __iptr)\n-  { return modfl(__x, __iptr); }\n-#else\n-  inline long double \n-  _CPP_modf_capture(long double __x, long double* __iptr)\n-  {\n-    double __tmp;\n-    double __res = _C_legacy::modf(static_cast<double>(__x), &__tmp);\n-    *__iptr = static_cast<long double> (__tmp);\n-    return __res;\n-  }\n-#endif\n-\n-#if _GLIBCPP_HAVE_POWL\n-  inline long double \n-  _CPP_pow_capture(long double __x, long double __y) { return powl(__x, __y); }\n-#else\n-  inline long double \n-  _CPP_pow_capture(long double __x, long double __y)\n-  { return pow(static_cast<double>(__x), static_cast<double>(__y)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE___BUILTIN_SINL\n-  inline long double \n-  _CPP_sin_capture(long double __x) { return __builtin_sinl(__x); }\n-#elif _GLIBCPP_HAVE_SINL\n-  inline long double \n-  _CPP_sin_capture(long double __x) { return sinl(__x); }\n-#else\n-  inline long double \n-  _CPP_sin_capture(long double __x) { return sin(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_SINHL\n-  inline long double \n-  _CPP_sinh_capture(long double __x) { return sinhl(__x); }\n-#else\n-  inline long double \n-  _CPP_sinh_capture(long double __x) { return sinh(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE___BUILTIN_SQRTL\n-  inline long double \n-  _CPP_sqrt_capture(long double __x) { return __builtin_sqrtl(__x); }\n-#elif _GLIBCPP_HAVE_SQRTL\n-  inline long double \n-  _CPP_sqrt_capture(long double __x) { return sqrtl(__x); }\n-#else\n-  inline long double \n-  _CPP_sqrt_capture(long double __x) { return sqrt(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_TANL\n-  inline long double \n-  _CPP_tan_capture(long double __x) { return tanl(__x); }\n-#else\n-  inline long double \n-  _CPP_tan_capture(long double __x) { return tan(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_TANHL\n-  inline long double \n-  _CPP_tanh_capture(long double __x) { return tanhl(__x); }\n-#else\n-  inline long double \n-  _CPP_tanh_capture(long double __x) { return tanh(static_cast<double>(__x)); }\n-#endif\n-\n-  namespace _C_shadow { }\n-\n-} // namespace _C_legacy\n-\n-# undef abs\n-# undef acos\n-# undef asin\n-# undef atan\n-# undef atan2\n-# undef ceil\n-# undef cos\n-# undef cosh\n-# undef exp\n-# undef fabs\n-# undef floor\n-# undef fmod\n-# undef frexp\n-# undef ldexp\n-# undef log\n-# undef log10\n-# undef modf\n-# undef pow\n-# undef sin\n-# undef sinh\n-# undef sqrt\n-# undef tan\n-# undef tanh\n-\n-namespace std {\n-  inline float \n-  abs(float __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n-\n-  inline float \n-  acos(float __x) { return _C_legacy::_CPP_acos_capture(__x); }\n-\n-  inline float \n-  asin(float __x) { return _C_legacy::_CPP_asin_capture(__x); }\n-\n-  inline float \n-  atan(float __x) { return _C_legacy::_CPP_atan_capture(__x); }\n-\n-  inline float \n-  atan2(float __y, float __x) \n-  { return _C_legacy::_CPP_atan2_capture(__y, __x); }\n-\n-  inline float \n-  ceil(float __x) { return _C_legacy::_CPP_ceil_capture(__x); }\n-\n-  inline float \n-  cos(float __x) { return _C_legacy::_CPP_cos_capture(__x); }\n-\n-  inline float \n-  cosh(float __x) { return _C_legacy::_CPP_cosh_capture(__x); }\n-\n-  inline float \n-  exp(float __x) { return _C_legacy::_CPP_exp_capture(__x); }\n-\n-  inline float \n-  fabs(float __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n-\n-  inline float \n-  floor(float __x) { return _C_legacy::_CPP_floor_capture(__x); }\n-\n-  inline float \n-  fmod(float __x, float __y) \n-  { return _C_legacy::_CPP_fmod_capture(__x, __y); }\n-\n-  inline float \n-  frexp(float __x, int* __exp) \n-  { return _C_legacy::_CPP_frexp_capture(__x, __exp); }\n-\n-  inline float \n-  ldexp(float __x, int __exp)\n-  { return _C_legacy::_CPP_ldexp_capture(__x, __exp); }\n-\n-  inline float \n-  log(float __x) { return _C_legacy::_CPP_log_capture(__x); }\n-\n-  inline float \n-  log10(float __x) { return _C_legacy::_CPP_log10_capture(__x); }\n-\n-  inline float \n-  modf(float __x, float* __iptr) \n-  { return _C_legacy::_CPP_modf_capture(__x, __iptr); }\n-\n-  inline float \n-  pow(float __x, float __y) { return _C_legacy::_CPP_pow_capture(__x, __y); }\n-\n-  float \n-  pow(float, int);\n-\n-  inline float \n-  sin(float __x) { return _C_legacy::_CPP_sin_capture(__x); }\n-\n-  inline float \n-  sinh(float __x) { return _C_legacy::_CPP_sinh_capture(__x); }\n-\n-  inline float \n-  sqrt(float __x) { return _C_legacy::_CPP_sqrt_capture(__x); }\n-\n-  inline float \n-  tan(float __x) { return _C_legacy::_CPP_tan_capture(__x); }\n-\n-  inline float \n-  tanh(float __x) { return _C_legacy::_CPP_tanh_capture(__x); }\n-\n-  inline double \n-  abs(double __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n-\n-  inline double \n-  acos(double __x) { return _C_legacy::_CPP_acos_capture(__x); }\n-\n-  inline double \n-  asin(double __x) { return _C_legacy::_CPP_asin_capture(__x); }\n-\n-  inline double \n-  atan(double __x) { return _C_legacy::_CPP_atan_capture(__x); }\n-\n-  inline double \n-  atan2(double __y, double __x) \n-  { return _C_legacy::_CPP_atan2_capture(__y, __x); }\n-\n-  inline double \n-  ceil(double __x) { return _C_legacy::_CPP_ceil_capture(__x); }\n-\n-  inline double \n-  cos(double __x) { return _C_legacy::_CPP_cos_capture(__x); }\n-\n-  inline double \n-  cosh(double __x) { return _C_legacy::_CPP_cosh_capture(__x); }\n-\n-  inline double \n-  exp(double __x) { return _C_legacy::_CPP_exp_capture(__x); }\n-\n-  inline double \n-  fabs(double __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n-\n-  inline double \n-  floor(double __x) { return _C_legacy::_CPP_floor_capture(__x); }\n-\n-  inline double \n-  fmod(double __x, double __y) \n-  { return _C_legacy::_CPP_fmod_capture(__x, __y); }\n-\n-  inline double \n-  frexp(double __x, int* __exp) \n-  { return _C_legacy::_CPP_frexp_capture(__x, __exp); }\n-\n-  inline double \n-  ldexp(double __x, int __exp)\n-  { return _C_legacy::_CPP_ldexp_capture(__x, __exp); }\n-\n-  inline double \n-  log(double __x) { return _C_legacy::_CPP_log_capture(__x); }\n-\n-  inline double \n-  log10(double __x) { return _C_legacy::_CPP_log10_capture(__x); }\n-\n-  inline double \n-  modf(double __x, double* __iptr) \n-  { return _C_legacy::_CPP_modf_capture(__x, __iptr); }\n-\n-  inline double \n-  pow(double __x, double __y) \n-  { return _C_legacy::_CPP_pow_capture(__x, __y); }\n-\n-  double \n-  pow(double, int);\n-\n-  inline double \n-  sin(double __x) { return _C_legacy::_CPP_sin_capture(__x); }\n-\n-  inline double \n-  sinh(double __x) { return _C_legacy::_CPP_sinh_capture(__x); }\n-\n-  inline double \n-  sqrt(double __x) { return _C_legacy::_CPP_sqrt_capture(__x); }\n-\n-  inline double \n-  tan(double __x) { return _C_legacy::_CPP_tan_capture(__x); }\n-\n-  inline double \n-  tanh(double __x) { return _C_legacy::_CPP_tanh_capture(__x); }\n-\n-  inline long double \n-  abs(long double __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n-\n-  inline long double \n-  acos(long double __x) { return _C_legacy::_CPP_acos_capture(__x); }\n-\n-  inline long double \n-  asin(long double __x) { return _C_legacy::_CPP_asin_capture(__x); }\n-\n-  inline long double \n-  atan(long double __x) { return _C_legacy::_CPP_atan_capture(__x); }\n-\n-  inline long double \n-  atan2(long double __y, long double __x) \n-  { return _C_legacy::_CPP_atan2_capture(__y, __x); }\n-\n-  inline long double \n-  ceil(long double __x) { return _C_legacy::_CPP_ceil_capture(__x); }\n-\n-  inline long double \n-  cos(long double __x) { return _C_legacy::_CPP_cos_capture(__x); }\n-\n-  inline long double \n-  cosh(long double __x) { return _C_legacy::_CPP_cosh_capture(__x); }\n-\n-  inline long double \n-  exp(long double __x) { return _C_legacy::_CPP_exp_capture(__x); }\n-\n-  inline long double \n-  fabs(long double __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n-\n-  inline long double \n-  floor(long double __x) { return _C_legacy::_CPP_floor_capture(__x); }\n-\n-  inline long double \n-  fmod(long double __x, long double __y) \n-  { return _C_legacy::_CPP_fmod_capture(__x, __y); }\n-\n-  inline long double \n-  frexp(long double __x, int* __exp)\n-  { return _C_legacy::_CPP_frexp_capture(__x, __exp); }\n-\n-  inline long double \n-  ldexp(long double __x, int __exp)\n-  { return _C_legacy::_CPP_ldexp_capture(__x, __exp); }\n-\n-  inline long double \n-  log(long double __x) { return _C_legacy::_CPP_log_capture(__x); }\n-\n-  inline long double \n-  log10(long double __x) { return _C_legacy::_CPP_log10_capture(__x); }\n-\n-  inline long double \n-  modf(long double __x, long double* __iptr) \n-  { return _C_legacy::_CPP_modf_capture(__x, __iptr); }\n-\n-  inline long double \n-  pow(long double __x, long double __y)\n-  { return _C_legacy::_CPP_pow_capture(__x, __y); }\n-\n-  long double \n-  pow(long double, int);\n-\n-  inline long double \n-  sin(long double __x) { return _C_legacy::_CPP_sin_capture(__x); }\n-\n-  inline long double \n-  sinh(long double __x) { return _C_legacy::_CPP_sinh_capture(__x); }\n-\n-  inline long double \n-  sqrt(long double __x) { return _C_legacy::_CPP_sqrt_capture(__x); }\n-\n-  inline long double \n-  tan(long double __x) { return _C_legacy::_CPP_tan_capture(__x); }\n-\n-  inline long double \n-  tanh(long double __x) { return _C_legacy::_CPP_tanh_capture(__x); }\n-} // namespace std\n-\n-# undef _IN_C_LEGACY_\n-\n-#endif\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "21c03d519edbcc9277bb0b6255ad401bc33b856b", "filename": "libstdc++-v3/shadow/bits/std_csetjmp.h", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csetjmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csetjmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csetjmp.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,63 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 20.4.6  C library\n-//\n-\n-#ifndef _CPP_CSETJMP\n-#define _CPP_CSETJMP 1\n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     pragma GCC system_header\n-#     include_next <setjmp.h>\n-  }\n-  inline int \n-  _CPP_setjmp_capture(jmp_buf __jb) { return setjmp(__jb); }\n-} // namespace _C_legacy\n-\n-#  undef jmp_buf\n-#  undef setjmp\n-#  define setjmp(__jb) ::_C_legacy::_CPP_setjmp_capture(__jb)\n-#  undef longjmp\n-\n-namespace std {\n-  // Adopt C names into std::\n-  using _C_legacy::jmp_buf;\n-  using _C_legacy::longjmp;\n-} // namespace std\n-  \n-# undef _IN_C_LEGACY_\n-\n-#endif\n-\n-\n-"}, {"sha": "71f91260214ec06e908a87cd93c31fd1b5a6a865", "filename": "libstdc++-v3/shadow/bits/std_csignal.h", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csignal.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,67 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 20.4.6  C library\n-//\n-\n-#ifndef _CPP_CSIGNAL\n-#define _CPP_CSIGNAL 1\n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-    // XXX\n-#     undef __need_sig_atomic_t\n-#     undef __need_sigset_t\n-\n-#     pragma GCC system_header\n-#     include_next <signal.h>\n-  }\n-} // namespace _C_legacy\n-\n-#  undef sig_atomic_t\n-#  undef raise\n-#  undef signal\n-\n-namespace std {\n-  // Adopt C names into std::\n-  using _C_legacy::sig_atomic_t;\n-  using _C_legacy::raise;\n-  using _C_legacy::signal;\n-} // namespace std\n-  \n-# undef _IN_C_LEGACY_\n-\n-#endif\n-\n-\n-\n-\n-"}, {"sha": "eb1b7909e744009f16883ebb55a3dd33ce076c94", "filename": "libstdc++-v3/shadow/bits/std_cstdarg.h", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdarg.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,54 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 20.4.6  C library\n-//\n-\n-#ifndef _CPP_CSTDARG\n-#define _CPP_CSTDARG 1\n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     pragma GCC system_header\n-#     include_next <stdarg.h>\n-  }\n-} // namespace _C_legacy\n-\n-#  undef va_list\n-\n-namespace std {\n-  using _C_legacy::va_list;\n-} // namespace std\n-\n-# undef _IN_C_LEGACY_\n-\n-#endif\n-"}, {"sha": "5ebcb61c80846b66e942f40fcedccdd6f8597613", "filename": "libstdc++-v3/shadow/bits/std_cstddef.h", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstddef.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,60 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 18.1  Types\n-//\n-\n-#ifndef _CPP_CSTDDEF\n-#define _CPP_CSTDDEF 1\n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     pragma GCC system_header\n-#     include_next <stddef.h>\n-  }\n-} // namespace _C_legacy\n-\n-#  undef ptrdiff_t  \n-#  undef size_t  \n-\n-namespace std {\n-  using _C_legacy::ptrdiff_t;\n-  using _C_legacy::size_t;\n-} // namespace std\n-  \n-# undef _IN_C_LEGACY_\n-\n-#endif\n-\n-\n-\n-\n-"}, {"sha": "db2761281d08d1ffbfe68bd7371e372e8d58a274", "filename": "libstdc++-v3/shadow/bits/std_cstdio.h", "status": "removed", "additions": 0, "deletions": 283, "changes": 283, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdio.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,283 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 27.8.2  C Library files\n-//\n-\n-#ifndef _CPP_CSTDIO\n-#define _CPP_CSTDIO 1\n-\n-# include <bits/std_cstddef.h>  \n-# include <bits/std_cstdarg.h>  \n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     undef __need_FILE\n-#     pragma GCC system_header\n-#     include_next <stdio.h>\n-  }\n-\n-  typedef FILE _CPP_FILE_capture;\n-  typedef fpos_t _CPP_fpos_t_capture;\n-\n-  inline FILE* \n-  _CPP_stderr_capture() { return stderr; }\n-\n-  inline FILE* \n-  _CPP_stdin_capture()  { return stdin; }\n-\n-  inline FILE* \n-  _CPP_stdout_capture() { return stdout; }\n-\n-  inline int \n-  _CPP_getc_capture(FILE* __f) { return getc(__f); }\n-\n-  inline int \n-  _CPP_getchar_capture() { return getchar(); }\n-\n-  inline int \n-  _CPP_putc_capture(int __c, FILE* __f) { return putc(__c, __f); }\n-  \n-  inline int \n-  _CPP_putchar_capture(int __c) { return putchar(__c); }\n- \n-  inline int \n-  _CPP_feof_capture(FILE* __f) { return feof(__f); }\n-\n-} // namespace _C_legacy\n-\n-# undef FILE \n-# undef fpos_t \n-\n-# undef remove\n-# undef rename\n-# undef tmpfile\n-# undef tmpnam\n-# undef fclose\n-# undef fflush\n-# undef fopen\n-# undef freopen\n-# undef setbuf\n-# undef setvbuf\n-# undef fprintf\n-# undef fscanf\n-# undef printf\n-# undef scanf\n-# undef sprintf\n-# undef sscanf\n-# undef vfprintf\n-# undef vprintf\n-# undef vsprintf\n-# undef fgetc\n-# undef fgets\n-# undef fputc\n-# undef fputs\n-# undef getc\n-# undef getchar\n-# undef gets\n-# undef putc\n-# undef putchar\n-# undef puts\n-# undef ungetc\n-# undef fread\n-# undef fwrite\n-# undef fgetpos\n-# undef fseek\n-# undef fsetpos\n-# undef ftell\n-# undef rewind\n-# undef clearerr\n-# undef feof\n-# undef ferror\n-# undef perror\n-  \n-# undef stderr\n-# define stderr std::_CPP_stderr()\n-# undef stdin\n-# define stdin  std::_CPP_stdin()\n-# undef stdout\n-# define stdout std::_CPP_stdout()\n-\n-namespace std {\n-  struct FILE : _C_legacy::_CPP_FILE_capture { };\n-  struct fpos_t { _C_legacy::_CPP_fpos_t_capture _M_dummy; };\n-\n-  using _C_legacy::remove;\n-  using _C_legacy::rename;\n-  using _C_legacy::tmpnam;\n-  using _C_legacy::printf;\n-  using _C_legacy::scanf;\n-  using _C_legacy::sprintf;\n-  using _C_legacy::sscanf;\n-  using _C_legacy::gets;\n-  using _C_legacy::perror;\n-\n-  inline FILE* \n-  _CPP_stderr()\n-  { return reinterpret_cast<FILE*>(_C_legacy::_CPP_stderr_capture() ); }\n-\n-  inline FILE* \n-  _CPP_stdin()\n-  { return reinterpret_cast<FILE*>(_C_legacy::_CPP_stdin_capture() ); }\n-\n-  inline FILE* \n-  _CPP_stdout()\n-  { return reinterpret_cast<FILE*>(_C_legacy::_CPP_stdout_capture() ); }\n-\n-  inline FILE*\n-  tmpfile() { return reinterpret_cast<FILE*>(_C_legacy::tmpfile()); }\n-\n-  inline int\n-  fclose(FILE* __f) { return _C_legacy::fclose(__f); }\n-\n-  inline int\n-  fflush(FILE* __f) { return _C_legacy::fflush(__f); }\n-\n-  inline FILE*\n-  fopen(char const* __name, char const* __mode) \n-  { return reinterpret_cast<FILE*>(_C_legacy::fopen(__name,__mode)); }\n-\n-  inline FILE*\n-  freopen(char const* __name, char const* __mode, FILE* __f) \n-  { return reinterpret_cast<FILE*>(_C_legacy::freopen(__name,__mode,__f)); }\n-\n-  inline void\n-  setbuf(FILE* __f, char* __buf) \n-  { return _C_legacy::setbuf(__f, __buf); }\n-\n-  inline int\n-  setvbuf(FILE* __f, char* __buf, int __mode, size_t __size) \n-  { return _C_legacy::setvbuf(__f, __buf, __mode, __size); }\n-\n-  inline int\n-  fprintf(FILE* __f, char const* __fmt, ...)\n-  { \n-    va_list __v; \n-    va_start(__v,__fmt); \n-    int __i = _C_legacy::vfprintf(__f, __fmt, __v); \n-    va_end(__v);\n-    return __i; \n-  }\n-\n-  inline int\n-  fscanf(FILE* __f, char const* __fmt, ...)\n-  { \n-    va_list __v; \n-    va_start(__v,__fmt); \n-    int __i = _C_legacy::vfscanf(__f, __fmt, __v); \n-    va_end(__v);\n-    return __i; \n-  }\n-\n-  inline int\n-  vfprintf(FILE* __f, char const* __fmt, va_list __v)\n-  { return _C_legacy::vfprintf(__f, __fmt, __v); }\n-\n-  inline int\n-  vprintf(char const* __fmt, va_list __v)\n-  { return _C_legacy::vprintf(__fmt, __v); }\n-\n-  inline int\n-  vsprintf(char* __buf, char const* __fmt, va_list __v)\n-  { return _C_legacy::vsprintf(__buf, __fmt, __v); }\n-\n-  inline int\n-  fgetc(FILE* __f) { return _C_legacy::fgetc(__f); }\n-\n-  inline char*\n-  fgets(char* __buf, int __n, FILE* __f) \n-  { return _C_legacy::fgets(__buf, __n, __f); }\n-\n-  inline int\n-  fputc(int __c, FILE* __f) { return _C_legacy::fputc(__c, __f); }\n-\n-  inline int\n-  fputs(char const* __s, FILE* __f) \n-  { return _C_legacy::fputs(__s, __f); }\n-\n-  inline int\n-  getc(FILE* __f) { return _C_legacy::_CPP_getc_capture(__f); }\n-\n-  inline int\n-  getchar() { return _C_legacy::_CPP_getchar_capture(); }\n-\n-  inline int\n-  putc(int __c, FILE* __f) \n-  { return _C_legacy::_CPP_putc_capture(__c, __f); }\n-\n-  inline int\n-  putchar(int __c) { return _C_legacy::_CPP_putchar_capture(__c); }\n-\n-  using _C_legacy::puts;\n-\n-  inline int\n-  ungetc(int __c, FILE* __f) { return _C_legacy::ungetc(__c, __f); }\n-\n-  inline size_t\n-  fread(void* __p, size_t __z, size_t __n, FILE* __f)\n-  { return _C_legacy::fread(__p,__z,__n,__f); }\n-\n-  inline size_t\n-  fwrite(void const* __p, size_t __z, size_t __n, FILE* __f)\n-  { return _C_legacy::fwrite(__p,__z,__n,__f); }\n-\n-  inline int\n-  fgetpos(FILE* __f, fpos_t* __pos)\n-  { return _C_legacy::fgetpos(__f,&__pos->_M_dummy); }\n-\n-  inline int\n-  fseek(FILE* __f, long __off, int __how)\n-  { return _C_legacy::fseek(__f,__off,__how); }\n-\n-  inline int\n-  fsetpos(FILE* __f, fpos_t const* __pos)\n-  { return _C_legacy::fsetpos(__f,&__pos->_M_dummy); }\n-\n-  inline long\n-  ftell(FILE* __f) { return _C_legacy::ftell(__f); }\n-\n-  inline void\n-  rewind(FILE* __f) { return _C_legacy::rewind(__f); }\n-\n-  inline void\n-  clearerr(FILE* __f) { return _C_legacy::clearerr(__f); }\n-\n-  inline int\n-  feof(FILE* __f) { return _C_legacy::_CPP_feof_capture(__f); }\n-\n-  inline int\n-  ferror(FILE* __f) { return _C_legacy::ferror(__f); }\n-} // namespace std\n-\n-# undef _IN_C_LEGACY_\n-\n-#endif\n-"}, {"sha": "44a316ec40f5c9954c1eb21a71d989459489217b", "filename": "libstdc++-v3/shadow/bits/std_cstdlib.h", "status": "removed", "additions": 0, "deletions": 191, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdlib.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,191 +0,0 @@\n-// -*- C++ -*- header wrapper\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 20.4.6  C library\n-//\n-\n-// Function decls in this header are overloaded on the \n-// extern \"C\"-ness of arguments.  This is a rich ground\n-// for compiler bugs.\n-\n-#ifndef _CPP_CSTDLIB\n-#define _CPP_CSTDLIB 1\n-\n-# include <bits/c++config.h>\n-# include <bits/std_cstddef.h>  \n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     pragma GCC system_header\n-#     include_next <stdlib.h>\n-      typedef int (*_C_cmp_fun_ptr)(const void*, const void*);  // C fn ptr\n-    }\n-\n-  typedef div_t   _CPP_div_t_capture;\n-  typedef ldiv_t  _CPP_ldiv_t_capture;\n-\n-# if _GLIBCPP_HAVE_LLDIV_T\n-  typedef lldiv_t  _CPP_lldiv_t_capture;\n-# endif\n-} // namespace _C_legacy\n-\n-#  undef size_t\n-#  undef wchar_t\n-#  undef div_t\n-#  undef ldiv_t\n-\n-#  undef atof\n-#  undef atoi\n-#  undef atol\n-#  undef strtod\n-#  undef strtol\n-#  undef strtoul\n-#  undef rand\n-#  undef srand\n-#  undef calloc\n-#  undef free\n-#  undef malloc\n-#  undef realloc\n-#  undef abort\n-#  undef atexit\n-#  undef exit\n-#  undef getenv\n-#  undef system\n-#  undef bsearch\n-#  undef qsort\n-#  undef abs\n-#  undef div\n-#  undef labs\n-#  undef ldiv\n-#ifdef _GLIBCPP_USE_LONG_LONG\n-#  undef llabs\n-#  undef lldiv\n-#endif\n-#  undef mblen\n-#  undef mbtowc\n-#  undef wctomb\n-#  undef mbstowcs\n-#  undef wcstombs\n-\n-namespace std {\n-  struct div_t : _C_legacy::_CPP_div_t_capture { };\n-  struct ldiv_t : _C_legacy::_CPP_ldiv_t_capture { };\n-\n-#ifdef _GLIBCPP_USE_LONG_LONG\n-# ifdef _GLIBCPP_HAVE_LLDIV_T\n-  struct lldiv_t : _C_legacy::_CPP_lldiv_t_captur { };\n-# else\n-  struct lldiv_t\n-  {\n-    long long quot;\n-    long long rem;\n-  };\n-# endif\n-#endif\n-\n-  using _C_legacy::atof;\n-  using _C_legacy::atoi;\n-  using _C_legacy::atol;\n-  using _C_legacy::strtod;\n-  using _C_legacy::strtol;\n-  using _C_legacy::strtoul;\n-  using _C_legacy::rand;\n-  using _C_legacy::srand;\n-  using _C_legacy::calloc;\n-  using _C_legacy::free;\n-  using _C_legacy::malloc;\n-  using _C_legacy::realloc;\n-\n-  using _C_legacy::abort;\n-  using _C_legacy::atexit;\n-  using _C_legacy::exit;\n-  using _C_legacy::bsearch;\n-  using _C_legacy::qsort; \n-\n-  using _C_legacy::getenv;\n-  using _C_legacy::system;\n-  using _C_legacy::mbtowc;\n-  using _C_legacy::wctomb;\n-  using _C_legacy::mbstowcs;\n-  using _C_legacy::wcstombs;\n-\n-#ifdef _GLIBCPP_USE_LONG_LONG\n-  using _C_legacy::strtoll;\n-  using _C_legacy::strtoull;\n-  using _C_legacy::strtof;\n-  using _C_legacy::strtold;\n-#endif\n-\n-  using _C_legacy::mblen;\n-\n-  inline int \n-  abs(int __x) { return __x >= 0 ? __x : -__x; }\n-\n-  inline div_t \n-  div(int __n, int __d)\n-  { div_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n-\n-  inline long \n-  labs(long __x) { return __x >= 0 ? __x : -__x; }\n-\n-  inline long \n-  abs(long __x) { return __x >= 0 ? __x : -__x; }\n-\n-  inline ldiv_t \n-  ldiv(long __n, long __d)\n-  { ldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n-\n-  inline ldiv_t \n-  div(long __n, long __d)\n-  { ldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n-\n-#ifdef _GLIBCPP_USE_LONG_LONG\n-  inline long long \n-  llabs(long long __x) { return __x >= 0 ? __x : -__x; }\n-\n-  inline long long \n-  abs(long long __x) { return __x >= 0 ? __x : -__x; }\n-\n-  inline lldiv_t \n-  lldiv(long long __n, long long __d)\n-  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n-\n-  inline lldiv_t \n-  div(long long __n, long long __d)\n-  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n-#endif\n-} // namespace std\n-  \n-# undef _IN_C_LEGACY_\n-\n-#endif\n-\n-"}, {"sha": "38b9e6b617d7abf20401c783c636be7326485b1a", "filename": "libstdc++-v3/shadow/bits/std_cstring.h", "status": "removed", "additions": 0, "deletions": 279, "changes": 279, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstring.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,279 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 20.4.6  C library\n-//\n-\n-#ifndef _CPP_CSTRING\n-#define _CPP_CSTRING 1\n-\n-# if defined __GLIBC__ && __GLIBC__ >= 2\n-// We must not see the optimized string functions GNU libc defines.\n-#  define __NO_STRING_INLINES\n-# endif\n-\n-# include <bits/std_cstddef.h>  \n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     pragma GCC system_header\n-#     include_next <string.h>\n-  }\n-\n-  // We do inline captures of most of these in case they\n-  // have been optimized with macros.  \n-  inline void* \n-  _CPP_memcpy_capture(void* __s1, void const* __s2, size_t __n)\n-  { return memcpy(__s1, __s2, __n); }\n-\n-  inline void* \n-  _CPP_memmove_capture(void* __s1, void const* __s2, size_t __n)\n-  { return memmove(__s1, __s2, __n); }\n-\n-  inline void* \n-  _CPP_strcpy_capture(char* __s1, char const* __s2)\n-  { return strcpy(__s1, __s2); }\n-\n-  inline char* \n-  _CPP_strncpy_capture(char* __s1, char const* __s2, size_t __n)\n-  { return strncpy(__s1, __s2, __n); }\n-\n-  inline char* \n-  _CPP_strcat_capture(char* __s1, char const* __s2)\n-  { return strcat(__s1, __s2); }\n-\n-  inline char* \n-  _CPP_strncat_capture(char* __s1, char const* __s2, size_t __n)\n-  { return strncat(__s1, __s2, __n); }\n-\n-  inline int \n-  _CPP_memcmp_capture(void const* __s1, void const* __s2, size_t __n)\n-  { return memcmp(__s1, __s2, __n); }\n-\n-  inline int \n-  _CPP_strcmp_capture(char const* __s1, char const* __s2)\n-  { return strcmp(__s1, __s2); }\n-\n-  inline int \n-  _CPP_strcoll_capture(char const* __s1, char const* __s2)\n-  { return strcoll(__s1, __s2); }\n-\n-  inline int \n-  _CPP_strncmp_capture(char const* __s1, char const* __s2, size_t __n)\n-  { return strncmp(__s1, __s2, __n); }\n-\n-  inline size_t \n-  _CPP_strxfrm_capture(char* __b, char const* __s, size_t __n)\n-  { return strxfrm(__b, __s, __n); }\n-\n-  inline void* \n-  _CPP_memchr_capture(void const* __s1, int __c, size_t __n)\n-  { return memchr(__s1, __c, __n); }\n-\n-  inline char* \n-  _CPP_strchr_capture(char const* __s1, int __c)\n-  { return strchr(__s1, __c); }\n-\n-  inline size_t \n-  _CPP_strcspn_capture(char const* __s1, char const* __s2)\n-  { return strcspn(__s1, __s2); }\n-\n-  inline char* \n-  _CPP_strpbrk_capture(char const* __s1, char const* __s2)\n-  { return strpbrk(__s1, __s2); }\n-\n-  inline char* \n-  _CPP_strrchr_capture(char const* __s1, int __c)\n-  { return strrchr(__s1, __c); }\n-\n-  inline size_t \n-  _CPP_strspn_capture(char const* __s1, char const* __s2)\n-  { return strspn(__s1, __s2); }\n-\n-  inline char* \n-  _CPP_strstr_capture(char const* __s1, char const* __s2)\n-  { return strstr(__s1, __s2); }\n-\n-  inline char* \n-  _CPP_strtok_capture(char* __s1, char const* __s2)\n-  { return strtok(__s1, __s2); }\n-\n-  inline void* \n-  _CPP_memset_capture(void* __s, int __c, size_t __n)\n-  { return memset(__s, __c, __n); }\n-\n-  // inline char* \n-  // _CPP_strerror_capture(int __num)\n-  // { return strerror(__num); }\n-\n-  inline size_t \n-  _CPP_strlen_capture(char const* __s)\n-  { return strlen(__s); }\n-} // namespace _C_legacy\n-\n-# undef memcpy\n-# undef memmove\n-# undef strcpy\n-# undef strncpy\n-# undef strcat\n-# undef strncat\n-# undef memcmp\n-# undef strcmp\n-# undef strcoll\n-# undef strncmp\n-# undef strxfrm\n-# undef memchr\n-# undef strchr\n-# undef strcspn\n-# undef strpbrk\n-# undef strrchr\n-# undef strspn\n-# undef strstr\n-# undef strtok\n-# undef memset\n-# undef strerror\n-# undef strlen\n-\n-namespace std {\n-  // Redefine most of these inline.  Note that the \n-  // C++ definition differs from C in some cases.\n-  inline void* \n-  memcpy(void* __s1, void const* __s2, size_t __n)\n-  { return _C_legacy::_CPP_memcpy_capture(__s1, __s2, __n); }\n-\n-  inline void* \n-  memmove(void* __s1, void const* __s2, size_t __n)\n-  { return _C_legacy::_CPP_memmove_capture(__s1, __s2, __n); }\n-\n-  inline void* \n-  strcpy(char* __s1, char const* __s2)\n-  { return _C_legacy::_CPP_strcpy_capture(__s1, __s2); }\n-\n-  inline char* \n-  strncpy(char* __s1, char const* __s2, size_t __n)\n-  { return _C_legacy::_CPP_strncpy_capture(__s1, __s2, __n); }\n-\n-  inline char* \n-  strcat(char* __s1, char const* __s2)\n-  { return _C_legacy::_CPP_strcat_capture(__s1, __s2); }\n-\n-  inline char* \n-  strncat(char* __s1, char const* __s2, size_t __n)\n-  { return _C_legacy::_CPP_strncat_capture(__s1, __s2, __n); }\n-\n-  inline int \n-  memcmp(void const* __s1, void const* __s2, size_t __n)\n-  { return _C_legacy::_CPP_memcmp_capture(__s1, __s2, __n); }\n-\n-  inline int \n-  strcmp(char const* __s1, char const* __s2)\n-  { return _C_legacy::_CPP_strcmp_capture(__s1, __s2); }\n-\n-  inline int \n-  strcoll(char const* __s1, char const* __s2)\n-  { return _C_legacy::_CPP_strcoll_capture(__s1, __s2); }\n-\n-  inline int \n-  strncmp(char const* __s1, char const* __s2, size_t __n)\n-  { return _C_legacy::_CPP_strncmp_capture(__s1, __s2, __n); }\n-\n-  inline size_t \n-  strxfrm(char* __b, char const* __s, size_t __n)\n-  { return _C_legacy::_CPP_strxfrm_capture(__b, __s, __n); }\n-\n-  inline void \n-  const* memchr(void const* __s1, int __c, size_t __n)\n-  { return _C_legacy::_CPP_memchr_capture(__s1, __c, __n); }\n-\n-  inline void* \n-  memchr(void* __s1, int __c, size_t __n)\n-  { return _C_legacy::_CPP_memchr_capture(__s1, __c, __n); }\n-\n-  inline char const* \n-  strchr(char const* __s1, int __c)\n-  { return _C_legacy::_CPP_strchr_capture(__s1, __c); }\n-\n-  inline char*\n-  strchr(char* __s1, int __c)\n-  { return _C_legacy::_CPP_strchr_capture(__s1, __c); }\n-\n-  inline size_t \n-  strcspn(char const* __s1, char const* __s2)\n-  { return _C_legacy::_CPP_strcspn_capture(__s1, __s2); }\n-\n-  inline char const* \n-  strpbrk(char const* __s1, char const* __s2)\n-  { return _C_legacy::_CPP_strpbrk_capture(__s1, __s2); }\n-\n-  inline char* \n-  strpbrk(char* __s1, char const* __s2)\n-  { return _C_legacy::_CPP_strpbrk_capture(__s1, __s2); }\n-\n-  inline char const* \n-  strrchr(char const* __s1, int __c)\n-  { return _C_legacy::_CPP_strrchr_capture(__s1, __c); }\n-\n-  inline char* \n-  strrchr(char* __s1, int __c)\n-  { return _C_legacy::_CPP_strrchr_capture(__s1, __c); }\n-\n-  inline size_t \n-  strspn(char const* __s1, char const* __s2)\n-  { return _C_legacy::_CPP_strspn_capture(__s1, __s2); }\n-\n-  inline char const* \n-  strstr(char const* __s1, char const* __s2)\n-  { return _C_legacy::_CPP_strstr_capture(__s1, __s2); }\n-\n-  inline char* \n-  strstr(char* __s1, char const* __s2)\n-  { return _C_legacy::_CPP_strstr_capture(__s1, __s2); }\n-\n-  inline char* \n-  strtok(char* __s1, char const* __s2)\n-  { return _C_legacy::_CPP_strtok_capture(__s1, __s2); }\n-\n-  inline void* \n-  memset(void* __s, int __c, size_t __n)\n-  { return _C_legacy::_CPP_memset_capture(__s, __c, __n); }\n-\n-  using _C_legacy::strerror;\n-\n-  inline size_t \n-  strlen(char const* __s)\n-  { return _C_legacy::_CPP_strlen_capture(__s); }\n-\n-} // namespace std\n-\n-# undef _IN_C_LEGACY_\n-\n-#endif\n-"}, {"sha": "44709f0238fc9e202454a48c239ae07d15a71a9a", "filename": "libstdc++-v3/shadow/bits/std_ctime.h", "status": "removed", "additions": 0, "deletions": 107, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_ctime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_ctime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_ctime.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,107 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 20.5  Date and time\n-//\n-\n-#ifndef _CPP_CTIME\n-#define _CPP_CTIME 1\n-\n-# include <bits/std_cstddef.h>  \n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     pragma GCC system_header\n-\n-      // XXX\n-      // glibc 2.1.x time.h is on crack\n-#     undef __need_time_t\n-#     undef __need_clock_t\n-#     undef __need_timespec\n-\n-#     include_next <time.h>\n-  }\n-\n-  typedef clock_t\t_CPP_clock_t_capture;\n-  typedef time_t    \t_CPP_time_t_capture;\n-  typedef tm \t\t_CPP_tm_capture;\n-\n-} // namespace _C_legacy\n-\n-#  undef clock_t\n-#  undef time_t\n-#  undef tm\n-#  undef clock\n-#  undef difftime\n-#  undef mktime\n-#  undef time\n-#  undef asctime\n-#  undef ctime\n-#  undef gmtime\n-#  undef localtime\n-#  undef strftime\n-\n-namespace std {\n-\n-  // Adopt C names into std::\n-  typedef _C_legacy::_CPP_clock_t_capture  clock_t;\n-  typedef _C_legacy::_CPP_time_t_capture   time_t;\n-  struct tm : _C_legacy::_CPP_tm_capture  { };\n-\n-  using _C_legacy::clock;\n-  using _C_legacy::difftime;\n-  using _C_legacy::mktime;\n-  using _C_legacy::time;\n-  using _C_legacy::ctime;\n-\n-  inline char* \n-  asctime(const tm* __t) \n-  { return _C_legacy::asctime(static_cast<_C_legacy::_CPP_tm_capture const*>(__t)); }\n-\n-  inline tm* \n-  gmtime(time_t const* __tp) \n-  { return reinterpret_cast<tm*>(_C_legacy::gmtime(__tp)); }\n-\n-  inline tm* \n-  localtime(const time_t* __tp) \n-  { return reinterpret_cast<tm*>(_C_legacy::localtime(__tp)); } \n-    \n-  inline size_t \n-  strftime(char* __buf, size_t __maxsz, char const* __fmt, tm const* __tp) \n-  { return _C_legacy::strftime(__buf, __maxsz, __fmt,\n-\t       \t       static_cast<_C_legacy::_CPP_tm_capture const*>(__tp)); }\n-\n-} // namespace std\n-  \n-# undef _IN_C_LEGACY_\n-\n-#endif\n-"}, {"sha": "829e625eb09dc3979857a1ef069a6a6ebf932a53", "filename": "libstdc++-v3/shadow/bits/std_cwchar.h", "status": "removed", "additions": 0, "deletions": 281, "changes": 281, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwchar.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,281 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 21\n-\n-#ifndef _CPP_CWCHAR\n-# define _CPP_CWCHAR 1\n-\n-# include <bits/std_cstdio.h> \n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     pragma GCC system_header\n-#     include_next <wchar.h>\n-  }\n-\n-  typedef wchar_t \t_CPP_wchar_t_capture;\n-  typedef wint_t \t_CPP_wint_t_capture;\n-  typedef mbstate_t \t_CPP_mbstate_t_capture;\n-\n-#if 0\n-  // XXX\n-  inline int \n-  fwprintf(FILE* __stream, const wchar_t* __format, ...); \n-\n-  inline int \n-  fwscanf(FILE* __stream, const wchar_t* __format, ...); \n-\n-  inline int \n-  vfwprintf(FILE* __stream, const wchar_t* __format, va_list __arg); \n-\n-  inline int \n-  vfwscanf(FILE* __stream, const wchar_t* __format, va_list __arg);\n-\n-  inline wint_t \n-  _CPP_fgetwc_capture(FILE* __stream)\n-  { return fgetwc(__stream); }\n-\n-  inline wchar_t*\n-  _CPP_fgetws_capture(wchar_t* __s, int __n, FILE* __stream)\n-  { return fgetws(__s, __n, __stream); }\n-\n-  inline wint_t \n-  _CPP_fputwc_capture(wchar_t __c, FILE* __stream)\n-  { return fputwc(__c, __stream); }\n-\n-  inline int \n-  _CPP_fputws_capture(const wchar_t* __s, FILE* __stream)\n-  { return fputws(__s, __stream); }\n-\n-  inline int \n-  _CPP_fwide_capture(FILE* __stream, int __mode) \n-  { return fwide(__stream, __mode); }\n-\n-  inline wint_t \n-  _CPP_fgetwc_capture(FILE* __stream)\n-  { return fgetwc(__stream); }\n-\n-  inline wint_t \n-  _CPP_putwc_capture(wchar_t __c, FILE* __stream)\n-  { return putwc(__c, __stream); }\n-  \n-  inline wint_t \n-  _CPP_ungetwc_capture(wint_t __c, FILE* __stream)\n-  { return ungetwc(__c, __stream); }\n-#endif\n-} // namespace _C_legacy\n-\n-# undef wchar_t\n-# undef wint_t\n-# undef mbstate_t\n-\n-# undef fwprintf\n-# undef fwscanf\n-# undef swprintf\n-# undef swscanf\n-# undef vfwprintf\n-# undef vfwscanf\n-# undef vswprintf\n-# undef vswscanf\n-# undef vwprintf\n-# undef vwscanf\n-# undef wprintf\n-# undef wscanf\n-# undef fgetwc\n-# undef fgetws\n-# undef fputwc\n-# undef fputws\n-# undef fwide\n-# undef getwc\n-# undef getwchar\n-# undef putwc\n-# undef putwchar\n-# undef ungetwc\n-# undef wcstod\n-# undef wcstof\n-# undef wcstold\n-# undef wcstol\n-# undef wcstoll\n-# undef wcstoul\n-# undef wcstoull\n-# undef wcscpy\n-# undef wcsncpy\n-# undef wcscat\n-# undef wcsncat\n-# undef wcsmp\n-# undef wcscoll\n-# undef wcsncmp\n-# undef wcsxfrm\n-# undef wcschr\n-# undef wcscspn\n-# undef wcslen\n-# undef wcspbrk\n-# undef wcsrchr\n-# undef wcsspn\n-# undef wcsstr\n-# undef wcstok\n-# undef wmemchr\n-# undef wmemcmp\n-# undef wmemcpy\n-# undef wmemmove\n-# undef wmemset\n-# undef wcsftime\n-# undef btowc\n-# undef wctob\n-# undef mbsinit\n-# undef mbrlen\n-# undef mbrtowc\n-# undef wcrtomb\n-# undef mbsrtowcs\n-# undef wcsrtombs\n-\n-namespace std {\n-\n-  typedef _C_legacy::_CPP_wchar_t_capture wchar_t; \n-  typedef _C_legacy::_CPP_wint_t_capture wint_t; \n-  typedef _C_legacy::_CPP_mbstate_t_capture mbstate_t;\n-\n-#if 0\n-  using _C_legacy::swprintf;\n-  using _C_legacy::swscanf;\n-  using _C_legacy::vswprintf;\n-  using _C_legacy::vswscanf;\n-  using _C_legacy::vwprintf;\n-  using _C_legacy::vwscanf;\n-  using _C_legacy::wprintf;\n-  using _C_legacy::wscanf;\n-  using _C_legacy::getwchar;\n-  using _C_legacy::putwchar;\n-#endif\n-\n-  using _C_legacy::wcstod;\n-  using _C_legacy::wcstof;\n-  using _C_legacy::wcstold;\n-  using _C_legacy::wcstol;\n-  using _C_legacy::wcstoll;\n-  using _C_legacy::wcstoul;\n-  using _C_legacy::wcstoull;\n-  using _C_legacy::wcscpy;\n-  using _C_legacy::wcsncpy;\n-  using _C_legacy::wcscat;\n-  using _C_legacy::wcsncat;\n-\n-#if 0\n-  using _C_legacy::wcsmp;\n-#endif\n-\n-  using _C_legacy::wcscoll;\n-  using _C_legacy::wcsncmp;\n-  using _C_legacy::wcsxfrm;\n-  using _C_legacy::wcschr;\n-  using _C_legacy::wcscspn;\n-  using _C_legacy::wcslen;\n-  using _C_legacy::wcspbrk;\n-  using _C_legacy::wcsrchr;\n-  using _C_legacy::wcsspn;\n-  using _C_legacy::wcsstr;\n-  using _C_legacy::wcstok;\n-  using _C_legacy::wmemchr;\n-  using _C_legacy::wmemcmp;\n-  using _C_legacy::wmemcpy;\n-  using _C_legacy::wmemmove;\n-  using _C_legacy::wmemset;\n-\n-#if 0\n-  using _C_legacy::wcsftime;\n-#endif\n-\n-  using _C_legacy::btowc;\n-  using _C_legacy::wctob;\n-  using _C_legacy::mbsinit;\n-  using _C_legacy::mbrlen;\n-  using _C_legacy::mbrtowc;\n-  using _C_legacy::wcrtomb;\n-  using _C_legacy::mbsrtowcs;\n-  using _C_legacy::wcsrtombs;\n-\n-#if 0\n-  // XXX\n-  inline int \n-  fwprintf(FILE* __stream, const wchar_t* __format, ...); \n-\n-  inline int \n-  fwscanf(FILE* __stream, const wchar_t* __format, ...); \n-\n-  inline int \n-  vfwprintf(FILE* __stream, const wchar_t* __format, va_list __arg); \n-\n-  inline int \n-  vfwscanf(FILE* __stream, const wchar_t* __format, va_list __arg);\n-\n-  inline wint_t \n-  fgetwc(FILE* __stream)\n-  { return _C_legacy::_CPP_fgetwc_capture(__stream); }\n-\n-  inline wchar_t*\n-  fgetws(wchar_t* __s, int __n, FILE* __stream) \n-  { return _C_legacy::_CPP_fgetws_capture(__s, __n, __stream); }\n-\n-  inline wint_t \n-  fputwc(wchar_t __c, FILE* __stream)\n-  { return _C_legacy::_CPP_fputwc_capture(__c, __stream); }\n-\n-  inline int \n-  fputws(const wchar_t* __s, FILE* __stream)\n-  { return _C_legacy::_CPP_fputws_capture(__s, __stream); }\n-\n-  inline int \n-  fwide(FILE* __stream, int __mode)\n-  { return _C_legacy::_CPP_fwide_capture(__stream, __mode); }\n-\n-  inline wint_t \n-  getwc(FILE* __stream)\n-  { return _C_legacy::_CPP_getwc_capture(__stream); }\n-\n-  inline wint_t \n-  putwc(wchar_t __c, FILE* __stream)\n-  { return _C_legacy::_CPP_putwc_capture(__c, __stream); }\n-  \n-  inline wint_t \n-  ungetwc(wint_t __c, FILE* __stream)\n-  { return _C_legacy::_CPP_ungetwc_capture(__c, __stream); }\n-#endif\n-}\n-\n-# undef _IN_C_LEGACY_\n-\n-#endif\n-\n-\n-\n-\n-"}, {"sha": "1a6a64282fd96976d140ff0ba36c1b0cd1d6cae2", "filename": "libstdc++-v3/shadow/bits/std_cwctype.h", "status": "removed", "additions": 0, "deletions": 129, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwctype.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,129 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: \n-//\n-\n-#ifndef _CPP_CWCTYPE\n-#define _CPP_CWCTYPE 1\n-\n-# include <bits/std_cwchar.h>  \n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     pragma GCC system_header\n-#     include_next <wctype.h>\n-  }\n-} // namespace _C_legacy\n-\n-\n-# undef wctype_t\n-# undef wctrans_t\n-# undef iswalpha\n-# undef iswupper\n-# undef iswlower\n-# undef iswdigit\n-# undef iswxdigit\n-# undef iswalnum\n-# undef iswspace\n-# undef iswpunct\n-# undef iswprint\n-# undef iswgraph\n-# undef iswcntrl\n-# undef iswctype\n-# undef towctrans\n-# undef towlower\n-# undef towupper\n-# undef wctrans\n-# undef wctype\n-\n-namespace std {\n-  using _C_legacy::wctype_t;\n-  using _C_legacy::wctrans_t;\n-\n-  inline int \n-  iswalpha(wint_t __wc) { return _C_legacy::iswalpha(__wc); }\n-\n-  inline int \n-  iswupper(wint_t __wc) { return _C_legacy::iswupper(__wc); }\n-\n-  inline int \n-  iswlower(wint_t __wc) { return _C_legacy::iswlower(__wc); }\n-\n-  inline int \n-  iswdigit(wint_t __wc) { return _C_legacy::iswdigit(__wc); }\n-\n-  inline int \n-  iswxdigit(wint_t __wc) { return _C_legacy::iswxdigit(__wc); }\n-\n-  inline int \n-  iswalnum(wint_t __wc) { return _C_legacy::iswalnum(__wc); }\n-\n-  inline int \n-  iswspace(wint_t __wc) { return _C_legacy::iswspace(__wc); }\n-\n-  inline int \n-  iswpunct(wint_t __wc) { return _C_legacy::iswpunct(__wc); }\n-\n-  inline int \n-  iswprint(wint_t __wc) { return _C_legacy::iswprint(__wc); }\n-\n-  inline int \n-  iswgraph(wint_t __wc) { return _C_legacy::iswgraph(__wc); }\n-\n-  inline int \n-  iswcntrl(wint_t __wc) { return _C_legacy::iswcntrl(__wc); }\n-\n-  inline int \n-  towlower(wint_t __wc) { return _C_legacy::towlower(__wc); }\n-\n-  inline int \n-  towupper(wint_t __wc) { return _C_legacy::towupper(__wc); }\n-\n-  inline int \n-  iswctype(wint_t __wc, wctype_t __desc) \n-  { return _C_legacy::iswctype(__wc, __desc); }\n-\n-  inline wint_t \n-  towctrans(wint_t __wc, wctrans_t __desc)\n-  { return _C_legacy::towctrans (__wc, __desc); }\n-  \n-  inline wctrans_t \n-  wctrans(const char *__property) { return _C_legacy::wctrans(__property); }\n-\n-  inline wctype_t \n-  wctype(char const* __property) { return _C_legacy::wctype(__property); }\n-} // namespace std\n-\n-# undef _IN_C_LEGACY_\n-\n-#endif\n-"}, {"sha": "0bed4bf1d4af890187748e539881860e0f2417d2", "filename": "libstdc++-v3/shadow/bits/wrap_fcntl.h", "status": "removed", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_fcntl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_fcntl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_fcntl.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,92 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 26.5  C library extensions\n-//\n-\n-#ifndef _CPP_FCNTL\n-#define _CPP_FCNTL 1\n-\n-# include <bits/c++config.h>\n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     pragma GCC system_header\n-    // XXX\n-# undef SEEK_SET\n-# undef SEEK_CUR\n-# undef SEEK_END\n-\n-#     include_next <fcntl.h>\n-  }\n-} // namespace _C_legacy\n-\n-# undef SEEK_SET\n-# undef SEEK_CUR\n-# undef SEEK_END\n-\n-// NB: Don't bring elements from this non-standard header into namespace std.\n-\n-# undef _IN_C_LEGACY_\n-\n-#endif\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "3e72e2d46eeb50be14d4e5fce473d818409c3466", "filename": "libstdc++-v3/shadow/bits/wrap_iconv.h", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_iconv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_iconv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_iconv.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,51 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 20.5 Extensions  \n-//\n-\n-#ifndef _CPP_WRAP_ICONV_H\n-#define _CPP_WRAP_ICONV_H 1\n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     pragma GCC system_header\n-#     include_next <iconv.h>\n-  }\n-} // namespace _C_legacy\n-\n-// NB: Don't bring elements from this non-standard header into namespace std.\n-\n-# undef _IN_C_LEGACY_\n-\n-#endif\n-\n-"}, {"sha": "ddbabd7a424c70a5cff442c613ca2f2609abe18b", "filename": "libstdc++-v3/shadow/bits/wrap_iolibio.h", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_iolibio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_iolibio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_iolibio.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,50 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 20.5 Extensions  \n-//\n-\n-#ifndef _CPP_WRAP_IOLIBIO_H\n-#define _CPP_WRAP_IOLIBIO_H 1\n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     pragma GCC system_header\n-#     include_next <iolibio.h>\n-  }\n-} // namespace _C_legacy\n-\n-// NB: Don't bring elements from this non-standard header into namespace std.\n-\n-# undef _IN_C_LEGACY_\n-\n-#endif\n-"}, {"sha": "e5da6e3f382de5c639a1987e34e5af87e6474580", "filename": "libstdc++-v3/shadow/bits/wrap_libio.h", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_libio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_libio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_libio.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,50 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 20.5 Extensions  \n-//\n-\n-#ifndef _CPP_WRAP_LIBIO_H\n-#define _CPP_WRAP_LIBIO_H 1\n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     pragma GCC system_header\n-#     include_next <libio.h>\n-  }\n-} // namespace _C_legacy\n-\n-// NB: Don't bring elements from this non-standard header into namespace std.\n-\n-# undef _IN_C_LEGACY_\n-\n-#endif\n-"}, {"sha": "32f8c2ebd10a60f0bb663326f936b0347a6a6434", "filename": "libstdc++-v3/shadow/bits/wrap_libioP.h", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_libioP.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_libioP.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_libioP.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,50 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 20.5 Extensions  \n-//\n-\n-#ifndef _CPP_WRAP_LIBIOP_H\n-#define _CPP_WRAP_LIBIOP_H 1\n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     pragma GCC system_header\n-#     include_next <libioP.h>\n-  }\n-} // namespace _C_legacy\n-\n-// NB: Don't bring elements from this non-standard header into namespace std.\n-\n-# undef _IN_C_LEGACY_\n-\n-#endif\n-"}, {"sha": "d04eeba8a31b8f68d9bff5ad6e891eeee99d3164", "filename": "libstdc++-v3/shadow/bits/wrap_pthread.h", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_pthread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_pthread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_pthread.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,81 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 26.5  C library extensions\n-//\n-\n-#ifndef _CPP_WRAP_PTHREAD_H\n-#define _CPP_WRAP_PTHREAD_H 1\n-\n-# include <bits/c++config.h>\n-\n-namespace _C_legacy {\n-  extern \"C\" {\n-#     define _IN_C_LEGACY_\n-#     pragma GCC system_header\n-#     include_next <pthread.h>\n-  }\n-} // namespace _C_legacy\n-\n-# undef _IN_C_LEGACY_\n-\n-#endif\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "dd7c303556d10b05982ae3a56f08791619d69133", "filename": "libstdc++-v3/shadow/sys/cdefs.h", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fsys%2Fcdefs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/607642b6c2e4e7f7c3953c2748a7d5ac2958f78b/libstdc%2B%2B-v3%2Fshadow%2Fsys%2Fcdefs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fsys%2Fcdefs.h?ref=607642b6c2e4e7f7c3953c2748a7d5ac2958f78b", "patch": "@@ -1,43 +0,0 @@\n-// -*- C++ -*- header wrapper.\n-\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-\n-#ifndef _CPP_SYS_CDEFS_H\n-# define _CPP_SYS_CDEFS_H\n-\n-# pragma GCC system_header\n-# include_next <sys/cdefs.h>\n-\n-// glibc-2 hackery.  Other systems likely require other hacks.\n-#undef\t__BEGIN_DECLS\n-#define\t__BEGIN_DECLS\n-#undef\t__END_DECLS\n-#define\t__END_DECLS\n-\n-#endif"}]}