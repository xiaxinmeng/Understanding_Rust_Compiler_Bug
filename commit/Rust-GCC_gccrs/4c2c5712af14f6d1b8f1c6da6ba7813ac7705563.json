{"sha": "4c2c5712af14f6d1b8f1c6da6ba7813ac7705563", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMyYzU3MTJhZjE0ZjZkMWI4ZjFjNmRhNmJhNzgxM2FjNzcwNTU2Mw==", "commit": {"author": {"name": "Geoff Keating", "email": "geoffk@cygnus.com", "date": "2000-10-18T19:57:54Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2000-10-18T19:57:54Z"}, "message": "t-netware: Bring in from the Red Hat tree.\n\n2000-10-18  Geoffrey Keating  <geoffk@cygnus.com>\n\t    David V. Henkel-Wallace  <gumby@cygnus.com>\n\n\t* config/i386/t-netware: Bring in from the Red Hat tree.\n\t* config/i386/netware.h: Likewise.\n\t* config/netware.h: Likewise.\n\t* config/rs6000/netware.h: Delete.\n\t* configure.in: Add i[34567]86-*-netware.\n\t* configure: Hand-edit to match configure.in change.\n\nCo-Authored-By: David V. Henkel-Wallace <gumby@cygnus.com>\n\nFrom-SVN: r36941", "tree": {"sha": "b057fdbe6c9a08df053a493df67446cfc45b5bfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b057fdbe6c9a08df053a493df67446cfc45b5bfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c2c5712af14f6d1b8f1c6da6ba7813ac7705563", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c2c5712af14f6d1b8f1c6da6ba7813ac7705563", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c2c5712af14f6d1b8f1c6da6ba7813ac7705563", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c2c5712af14f6d1b8f1c6da6ba7813ac7705563/comments", "author": null, "committer": null, "parents": [{"sha": "6bcedb4e1cdc77c336e1742cdcff7f89ecbbb660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bcedb4e1cdc77c336e1742cdcff7f89ecbbb660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bcedb4e1cdc77c336e1742cdcff7f89ecbbb660"}], "stats": {"total": 485, "additions": 214, "deletions": 271}, "files": [{"sha": "605ab537b61344b6ffef0f7827f4d6c94187b506", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2c5712af14f6d1b8f1c6da6ba7813ac7705563/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2c5712af14f6d1b8f1c6da6ba7813ac7705563/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c2c5712af14f6d1b8f1c6da6ba7813ac7705563", "patch": "@@ -1,3 +1,13 @@\n+2000-10-18  Geoffrey Keating  <geoffk@cygnus.com>\n+\t    David V. Henkel-Wallace  <gumby@cygnus.com>\n+\n+\t* config/i386/t-netware: Bring in from the Red Hat tree.\n+\t* config/i386/netware.h: Likewise.\n+\t* config/netware.h: Likewise.\n+\t* config/rs6000/netware.h: Delete.\n+\t* configure.in: Add i[34567]86-*-netware.\n+\t* configure: Hand-edit to match configure.in change.\n+\n 2000-10-18  Mark Mitchell  <mark@codesourcery.com>\n \n \t* c-common.h (flag_no_builtin): Declare."}, {"sha": "c8cc6487d0745984f2750da4ca7f9ba15e076bc9", "filename": "gcc/config/i386/netware.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2c5712af14f6d1b8f1c6da6ba7813ac7705563/gcc%2Fconfig%2Fi386%2Fnetware.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2c5712af14f6d1b8f1c6da6ba7813ac7705563/gcc%2Fconfig%2Fi386%2Fnetware.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetware.h?ref=4c2c5712af14f6d1b8f1c6da6ba7813ac7705563", "patch": "@@ -0,0 +1,38 @@\n+/* Core target definitions for GNU compiler for Intel 80386 running Netware 4.\n+   and using stabs-in-elf for the debugging format.\n+   Copyright (C) 1993, 1994 Free Software Foundation, Inc.\n+\n+   Written by David V. Henkel-Wallace (gumby@cygnus.com)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"i386/sysv4.h\"\t\t/* Build on the base i386 SVR4 configuration */\n+#include \"netware.h\"\t\t/* Then add netware-specific goo. */\n+\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (i386 Netware 4)\");\n+\n+/* These surely require augmentation */\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \\\n+  \"-DAPX386 -D__i386__ -D__netware__ -Asystem(netware) -Acpu(i386) -Amachine(i386)\"\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"short unsigned int\"\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 16"}, {"sha": "68fe92fe9d44ee99b43b3335231ca7767dc9d107", "filename": "gcc/config/i386/t-netware", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2c5712af14f6d1b8f1c6da6ba7813ac7705563/gcc%2Fconfig%2Fi386%2Ft-netware", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2c5712af14f6d1b8f1c6da6ba7813ac7705563/gcc%2Fconfig%2Fi386%2Ft-netware", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-netware?ref=4c2c5712af14f6d1b8f1c6da6ba7813ac7705563", "patch": "@@ -0,0 +1,5 @@\n+LIBGCC1 = libgcc1.null\n+CROSS_LIBGCC1 = libgcc1.null\n+\n+# Our header files are supposed to be correct, nein?\n+STMP_FIXPROTO ="}, {"sha": "58386a1fd14f6f714d4fc283be0d9061a9b80bde", "filename": "gcc/config/netware.h", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2c5712af14f6d1b8f1c6da6ba7813ac7705563/gcc%2Fconfig%2Fnetware.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2c5712af14f6d1b8f1c6da6ba7813ac7705563/gcc%2Fconfig%2Fnetware.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetware.h?ref=4c2c5712af14f6d1b8f1c6da6ba7813ac7705563", "patch": "@@ -0,0 +1,151 @@\n+/* netware.h -- operating system specific defines to be used when \n+   targeting GCC for some generic NetWare 4 system.\n+   Copyright (C) 1993, 1994 Free Software Foundation, Inc.\n+\n+   Written by David V. Henkel-Wallace (gumby@cygnus.com)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* We don't actually need any of these; the MD_ vars are ignored\n+   anyway for cross-compilers, and the other specs won't get picked up\n+   'coz the user is supposed to do ld -r (hmm, perhaps that should be\n+   the default).  In any case, setting them thus will catch some\n+   common user errors. */\n+\n+#undef MD_EXEC_PREFIX\n+#undef MD_STARTFILE_PREFIX\n+\n+#undef\tLIB_SPEC\n+#define LIB_SPEC \"\"\n+\n+/* Kinda useless, but what the hell */\n+#undef\tLINK_SPEC\n+#define LINK_SPEC \"%{h*} %{V} %{v:%{!V:-V}} \\\n+\t\t   %{b} %{Wl,*:%*} \\\n+\t\t   %{Qy:} %{!Qn:-Qy}\"\n+\n+#undef\tSTARTFILE_SPEC\n+#define STARTFILE_SPEC \"\"\n+\n+#undef\tENDFILE_SPEC\n+#define ENDFILE_SPEC \"\"\n+\n+#undef\tRELATIVE_PREFIX_NOT_LINKDIR\n+#undef\tLIBGCC_SPEC\n+\n+/* set debugging info */\n+#define\tDBX_DEBUGGING_INFO\n+#undef\tSDB_DEBUGGING_INFO\n+#undef\tDWARF_DEBUGGING_INFO\n+#undef\tXCOFF_DEBUGGING_INFO\n+#undef\tPREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+\n+/* Support const sections and the ctors and dtors sections for g++.\n+   Note that there appears to be two different ways to support const\n+   sections at the moment.  You can either #define the symbol\n+   READONLY_DATA_SECTION (giving it some code which switches to the\n+   readonly data section) or else you can #define the symbols\n+   EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS, SELECT_SECTION, and\n+   SELECT_RTX_SECTION.  We do both here just to be on the safe side.  */\n+\n+#define\tHAVE_ATEXIT\n+\n+#undef\tHAS_INIT_SECTION\n+#undef\tINIT_SECTION_ASM_OP\n+\n+#undef\tREADONLY_DATA_SECTION\n+#define\tREADONLY_DATA_SECTION\tconst_section \n+\n+#undef\tCONST_SECTION_ASM_OP\n+#define CONST_SECTION_ASM_OP    \".section\\t.rodata\"\n+#undef\tCTORS_SECTION_ASM_OP\n+#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"x\\\"\"\n+#undef\tDTORS_SECTION_ASM_OP\n+#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"x\\\"\"\n+\n+/* A list of other sections which the compiler might be \"in\" at any\n+   given time.  */\n+\n+#undef EXTRA_SECTIONS\n+#define EXTRA_SECTIONS in_const, in_ctors, in_dtors\n+\n+/* A list of extra section function definitions.  */\n+\n+#undef\tEXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n+  CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n+  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+  DTORS_SECTION_FUNCTION\n+\n+#undef\tCONST_SECTION_FUNCTION\n+#define CONST_SECTION_FUNCTION                                          \\\n+void                                                                    \\\n+const_section ()                                                        \\\n+{                                                                       \\\n+  if (in_section != in_const)                                      \t\\\n+    {                                                                   \\\n+      fprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP);             \\\n+      in_section = in_const;                                            \\\n+    }                                                                   \\\n+}\n+\n+#undef\tCTORS_SECTION_FUNCTION\n+#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+ctors_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_ctors)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_ctors;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#undef\tDTORS_SECTION_FUNCTION\n+#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+dtors_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_dtors)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_dtors;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define INT_ASM_OP \".long\"\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global constructors.  */\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    ctors_section ();\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global destructors.  */\n+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    dtors_section ();                   \t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    assemble_name (FILE, NAME);              \t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)"}, {"sha": "880323e4724c25efe2ab286111decc9adbd17ecd", "filename": "gcc/config/rs6000/netware.h", "status": "removed", "additions": 0, "deletions": 271, "changes": 271, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bcedb4e1cdc77c336e1742cdcff7f89ecbbb660/gcc%2Fconfig%2Frs6000%2Fnetware.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bcedb4e1cdc77c336e1742cdcff7f89ecbbb660/gcc%2Fconfig%2Frs6000%2Fnetware.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fnetware.h?ref=6bcedb4e1cdc77c336e1742cdcff7f89ecbbb660", "patch": "@@ -1,271 +0,0 @@\n-/* Core target definitions for GNU compiler\n-   for IBM RS/6000 PowerPC running NetWare\n-   Copyright (C) 1994, 1995, 1996, 1998, 2000 Free Software Foundation, Inc.\n-   Contributed by Cygnus Support.\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-#define TARGET_AIX 0\n-\n-#define CPP_DEFAULT_SPEC \"-D_ARCH_PPC\"\n-\n-#define ASM_DEFAULT_SPEC \"-mppc\"\n-\n-#include \"rs6000/rs6000.h\"\n-\n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_POWERPC | MASK_NEW_MNEMONICS)\n-\n-#undef PROCESSOR_DEFAULT\n-#define PROCESSOR_DEFAULT PROCESSOR_PPC601\n-\n-/* The XCOFF support uses weird symbol suffixes, which we don't want\n-   for ELF.  */\n-\n-#undef STRIP_NAME_ENCODING\n-\n-/* Undefine some things which are defined by the generic svr4.h.  */\n-\n-#undef ASM_FILE_END\n-#undef ASM_OUTPUT_EXTERNAL_LIBCALL\n-#undef READONLY_DATA_SECTION\n-#undef SELECT_SECTION\n-#undef ASM_DECLARE_FUNCTION_NAME\n-\n-/* Use the regular svr4 definitions.  */\n-\n-#include \"svr4.h\"\n-#include \"netware.h\"\n-\n-/* Create a function descriptor when we declare a function name.  This\n-   is a mixture of the ASM_DECLARE_FUNCTION_NAME macros in rs6000.h\n-   and svr4.h.  The unmodified function name is used to name the\n-   descriptor.  The function name with an initial `.' is used to name\n-   the code.  */\n-\n-#undef ASM_DECLARE_FUNCTION_NAME\n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    putc (',', FILE);\t\t\t\t\t\t\t\\\n-    fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n-    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n-    ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n-    if (TREE_PUBLIC (DECL))\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-        fprintf (FILE, \"\\t.globl .\");\t\t\t\t\t\\\n-\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-        fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    data_section ();\t\t\t\t\t\t\t\\\n-    ASM_OUTPUT_ALIGN (FILE, 2);\t\t\t\t\t\t\\\n-    ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.long .\");\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \", __GOT0, 0\\n\");\t\t\t\t\t\\\n-    text_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \".\");\t\t\t\t\t\t\\\n-    ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n-  } while (0)\n-\n-/* We need to override the .size output in order to put a `.' before\n-   the function name.  */\n-\n-#undef ASM_DECLARE_FUNCTION_SIZE\n-#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-        char label[256];\t\t\t\t\t\t\\\n-\tstatic int labelno;\t\t\t\t\t\t\\\n-\tlabelno++;\t\t\t\t\t\t\t\\\n-\tASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\t\\\n-\tASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\t\\\n-\tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n-        fprintf (FILE, \",\");\t\t\t\t\t\t\\\n-\tassemble_name (FILE, label);\t\t\t\t\t\\\n-        fprintf (FILE, \"-.\");\t\t\t\t\t\t\\\n-\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n-\tputc ('\\n', FILE);\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* Use ELF style section commands.  */\n-\n-#undef TEXT_SECTION_ASM_OP\n-#define TEXT_SECTION_ASM_OP\t\"\\t.section\\t\\\".text\\\"\"\n-\n-#undef DATA_SECTION_ASM_OP\n-#define DATA_SECTION_ASM_OP\t\"\\t.section\\t\\\".data\\\"\"\n-\n-/* Besides the usual ELF sections, we need a toc section.  */\n-\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_ctors, in_dtors, in_toc\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  TOC_SECTION_FUNCTION\n-\n-#define TOC_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-toc_section ()\t\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_MINIMAL_TOC)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      static int toc_initialized = 0;\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      if (! toc_initialized)\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  fprintf (asm_out_file, \"%s\\n\", TOC_SECTION_ASM_OP);\t\t\\\n-\t  fprintf (asm_out_file, \".LCTOC0:\\n\");\t\t\t\t\\\n-\t  fprintf (asm_out_file, \"\\t.tc .LCTOC1\\n\");\t\t\t\\\n-\t  fprintf (asm_out_file, \"%s\\n\", MINIMAL_TOC_SECTION_ASM_OP);\t\\\n-\t  fprintf (asm_out_file, \".LCTOC1:\\n\");\t\t\t\t\\\n-\t  toc_initialized = 1;\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_toc)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\",\t\t\t\t\t\\\n-\t       (TARGET_MINIMAL_TOC\t\t\t\t\t\\\n-\t\t? MINIMAL_TOC_SECTION_ASM_OP\t\t\t\t\\\n-\t\t: TOC_SECTION_ASM_OP));\t\t\t\t\t\\\n-      in_section = in_toc;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define TOC_SECTION_ASM_OP \"\\t.section\\t.got,\\\"aw\\\"\"\n-#define MINIMAL_TOC_SECTION_ASM_OP \"\\t.section\\t.got1,\\\"aw\\\"\"\n-\n-/* Use the TOC section for TOC entries.  */\n-\n-#undef SELECT_RTX_SECTION\n-#define SELECT_RTX_SECTION(MODE, X)\t\t\t\\\n-{ if (ASM_OUTPUT_SPECIAL_POOL_ENTRY_P (X, MODE))\t\\\n-    toc_section ();\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\\\n-    const_section ();\t\t\t\t\t\\\n-}\n-\n-/* How to renumber registers for dbx and gdb.  */\n-\n-#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n-\n-/* svr4.h overrides ASM_OUTPUT_INTERNAL_LABEL.  */\n-\n-#undef ASM_OUTPUT_INTERNAL_LABEL_PREFIX\n-#define ASM_OUTPUT_INTERNAL_LABEL_PREFIX(FILE,PREFIX)\t\\\n-  fprintf (FILE, \".%s\", PREFIX)\n-\n-#undef ASM_SPEC\n-#define ASM_SPEC \"-u %(asm_cpu) \\\n-{v:-V} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Yd,*} %{Wa,*:%*}\"\n-/* This is the end of what might become sysv4.h.  */\n-\n-/* Enable output of DBX (stabs) debugging information when asked for it.  */\n-\n-#define DBX_DEBUGGING_INFO\n-\n-/* Prefer DBX (stabs) debugging information over the native (DWARF) format. */\n-\n-#undef PREFERRED_DEBUGGING_TYPE\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n-\n-/* Line numbers are relative to the current function.  */\n-\n-#undef  ASM_OUTPUT_SOURCE_LINE\n-#define ASM_OUTPUT_SOURCE_LINE(file, line)\t\t\\\n-  { static int sym_lineno = 1;\t\t\t\t\\\n-    fprintf (file, \".stabn 68,0,%d,.LM%d-.%s\\n.LM%d:\\n\",\\\n-\t     line, sym_lineno, \t\t\t\t\\\n-\t     XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0), \\\n-\t     sym_lineno);\t\t\t\t\\\n-    sym_lineno += 1; }\n-\n-/* But, to make this work, we have to output the stabs for the function\n-   name *first*...  */\n-\n-#define\tDBX_FUNCTION_FIRST\n-\n-/* We need to output LBRAC and RBRAC lines specially to include the\n-   dot in from of the text symbol for a function.  */\n-\n-#define DBX_OUTPUT_LBRAC(FILE, BUF)\t\t\t\t\t   \\\n-do\t\t\t\t\t\t\t\t\t   \\\n-  {\t\t\t\t\t\t\t\t\t   \\\n-    fprintf (FILE, \"%s%d,0,0,\", ASM_STABN_OP, N_LBRAC);\t\t\t   \\\n-    assemble_name (FILE, BUF);\t\t\t\t\t\t   \\\n-    fprintf (FILE, \"-.\");\t\t\t\t\t\t   \\\n-    assemble_name (asmfile,\t\t\t\t\t\t   \\\n-\t\t   XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0));  \\\n-    fprintf (asmfile, \"\\n\");\t\t\t\t\t\t   \\\n-  }\t\t\t\t\t\t\t\t\t   \\\n-while (0)\n-\n-#define DBX_OUTPUT_RBRAC(FILE, BUF)\t\t\t\t\t   \\\n-do\t\t\t\t\t\t\t\t\t   \\\n-  {\t\t\t\t\t\t\t\t\t   \\\n-    fprintf (FILE, \"%s%d,0,0,\", ASM_STABN_OP, N_RBRAC);\t\t\t   \\\n-    assemble_name (FILE, BUF);\t\t\t\t\t\t   \\\n-    fprintf (FILE, \"-.\");\t\t\t\t\t\t   \\\n-    assemble_name (asmfile,\t\t\t\t\t\t   \\\n-\t\t   XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0));  \\\n-    fprintf (asmfile, \"\\n\");\t\t\t\t\t\t   \\\n-  }\t\t\t\t\t\t\t\t\t   \\\n-while (0)\n-\n-/* We are using function descriptors, so the value of a function\n-   symbol is in the .data section.  However, we want the stabs entry\n-   for that function to point at the actual function code in the .text\n-   section, which we get by prefixing the symbol with a dot.  */\n-\n-#define DBX_FINISH_SYMBOL(sym)\t\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  int line = 0;\t\t\t\t\t\t\t\t\\\n-  if (use_gnu_debug_info_extensions && sym != 0)\t\t\t\\\n-    line = DECL_SOURCE_LINE (sym);\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  fprintf (asmfile, \"\\\",%d,0,%d,\", current_sym_code, line);\t\t\\\n-  if (current_sym_addr)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (TREE_CODE (sym) == FUNCTION_DECL)\t\t\t\t\\\n-\tfprintf (asmfile, \".\");\t\t\t\t\t\t\\\n-      output_addr_const (asmfile, current_sym_addr);\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    fprintf (asmfile, \"%d\", current_sym_value);\t\t\t\t\\\n-  putc ('\\n', asmfile);\t\t\t\t\t\t\t\\\n-} while (0)\n-\n-/* This is the end of what might become sysv4dbx.h.  */\n-\n-#undef TARGET_VERSION\n-#define TARGET_VERSION fprintf (stderr, \" (PowerPC Netware)\");\n-\n-/* FIXME: These should actually indicate PowerPC, when there is some\n-   standard way of expressing that.  */\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \\\n-  \"-DPPC D__netware__ -Asystem(netware) -Acpu(powerpc) -Amachine(powerpc)\""}, {"sha": "f1169ef7d78bd4dce2147480feb85e7e4cecf400", "filename": "gcc/configure", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2c5712af14f6d1b8f1c6da6ba7813ac7705563/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2c5712af14f6d1b8f1c6da6ba7813ac7705563/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=4c2c5712af14f6d1b8f1c6da6ba7813ac7705563", "patch": "@@ -4509,6 +4509,10 @@ for machine in $build $host $target; do\n \t\t\tthread_file='mach'\n \t\tfi\n \t\t;;\n+\ti[34567]86-*-netware)\t\t# Intel 80386's running netware\n+\t\ttm_file=i386/netware.h\n+\t\ttmake_file=i386/t-netware\n+\t\t;;\n \ti[34567]86-sequent-bsd*) \t\t# 80386 from Sequent\n \t\tuse_collect2=yes\n \t\tif test x$gas = xyes"}, {"sha": "1e96471b06ca4c2a6c04d37e35acf96e385ab7c8", "filename": "gcc/configure.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2c5712af14f6d1b8f1c6da6ba7813ac7705563/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2c5712af14f6d1b8f1c6da6ba7813ac7705563/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=4c2c5712af14f6d1b8f1c6da6ba7813ac7705563", "patch": "@@ -1397,6 +1397,12 @@ changequote([,])dnl\n \t\t\tthread_file='mach'\n \t\tfi\n \t\t;;\n+changequote(,)dnl\n+\ti[34567]86-*-netware)\t\t# Intel 80386's running netware\n+changequote([,])dnl\n+\t\ttm_file=i386/netware.h\n+\t\ttmake_file=i386/t-netware\n+\t\t;;\n changequote(,)dnl\n \ti[34567]86-sequent-bsd*) \t\t# 80386 from Sequent\n changequote([,])dnl"}]}