{"sha": "edec2660ff4890ecf8cc191f7c92cf527de51fe2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRlYzI2NjBmZjQ4OTBlY2Y4Y2MxOTFmN2M5MmNmNTI3ZGU1MWZlMg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-10T22:31:21Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-10T22:31:21Z"}, "message": "c++: matching deduced template template parameters [PR67829]\n\nDuring deduction, when the template of the argument for a bound ttp\nis a template template parameter, we need to consider the\nTEMPLATE_TEMPLATE_PARAMETER for matching rather than the TEMPLATE_DECL\nthereof, because the canonical form of a template template parameter as\na template argument is the former tree, not the latter.\n\n\tPR c++/67829\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (unify) <case BOUND_TEMPLATE_TEMPLATE_PARM>: When\n\tthe TEMPLATE_DECL of a BOUND_TEMPLATE_TEMPLATE_PARM argument is\n\ta template template parameter, adjust to the\n\tTEMPLATE_TEMPLATE_PARAMETER before falling through.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/ttp34.C: New test.\n\t* g++.dg/template/ttp34a.C: New test.\n\t* g++.dg/template/ttp34b.C: New test.", "tree": {"sha": "697cc07ce68ac9aba7e9d0d61cd12db9662b2860", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/697cc07ce68ac9aba7e9d0d61cd12db9662b2860"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edec2660ff4890ecf8cc191f7c92cf527de51fe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edec2660ff4890ecf8cc191f7c92cf527de51fe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edec2660ff4890ecf8cc191f7c92cf527de51fe2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edec2660ff4890ecf8cc191f7c92cf527de51fe2/comments", "author": null, "committer": null, "parents": [{"sha": "206db06ee380f490db0293af4ea7a4d590abd78c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/206db06ee380f490db0293af4ea7a4d590abd78c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/206db06ee380f490db0293af4ea7a4d590abd78c"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "d87382dba75e963b39c23c1fbda3d60eb73bde66", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edec2660ff4890ecf8cc191f7c92cf527de51fe2/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edec2660ff4890ecf8cc191f7c92cf527de51fe2/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=edec2660ff4890ecf8cc191f7c92cf527de51fe2", "patch": "@@ -23555,6 +23555,10 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \t    return 1;\n \n \t  arg = TYPE_TI_TEMPLATE (arg);\n+\t  if (DECL_TEMPLATE_TEMPLATE_PARM_P (arg))\n+\t    /* If the template is a template template parameter, use the\n+\t       TEMPLATE_TEMPLATE_PARM for matching.  */\n+\t    arg = TREE_TYPE (arg);\n \n \t  /* Fall through to deduce template name.  */\n \t}"}, {"sha": "67094063ba515787b630c33c7989c749cef7c719", "filename": "gcc/testsuite/g++.dg/template/ttp34.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edec2660ff4890ecf8cc191f7c92cf527de51fe2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edec2660ff4890ecf8cc191f7c92cf527de51fe2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp34.C?ref=edec2660ff4890ecf8cc191f7c92cf527de51fe2", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/67829\n+\n+template<class> class Purr;\n+\n+template<template<class> class, class, class>\n+class Meow;\n+\n+template<template<class> class P>\n+class Meow<P, P<int>, int> { }; // 1\n+\n+template<template<class> class P, class T>\n+class Meow<P, P<int>, T>; // 2\n+\n+Meow<Purr, Purr<int>, int> kitty;"}, {"sha": "e3303dcf2125ca8f3b2410cd32b91d0d44c2c225", "filename": "gcc/testsuite/g++.dg/template/ttp34a.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edec2660ff4890ecf8cc191f7c92cf527de51fe2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp34a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edec2660ff4890ecf8cc191f7c92cf527de51fe2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp34a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp34a.C?ref=edec2660ff4890ecf8cc191f7c92cf527de51fe2", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/67829\n+\n+template<class> class Purr;\n+\n+template<template<class> class, class>\n+class Meow;\n+\n+template<template<class> class P>\n+class Meow<P, P<int> > { }; // 1\n+\n+template<template<class> class P, class T>\n+class Meow<P, P<T> >; // 2\n+\n+Meow<Purr, Purr<int> > kitty;"}, {"sha": "ed3b3e8ab059304db460f52c5c376ba7089f0928", "filename": "gcc/testsuite/g++.dg/template/ttp34b.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edec2660ff4890ecf8cc191f7c92cf527de51fe2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp34b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edec2660ff4890ecf8cc191f7c92cf527de51fe2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp34b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp34b.C?ref=edec2660ff4890ecf8cc191f7c92cf527de51fe2", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/67829\n+\n+template<class> class Purr;\n+\n+template<class, template<class> class>\n+class Meow;\n+\n+template<template<class> class P>\n+class Meow<P<int>, P> { }; // 1\n+\n+template<template<class> class P, class T>\n+class Meow<P<T>, P>; // 2\n+\n+Meow<Purr<int>, Purr> kitty;"}]}