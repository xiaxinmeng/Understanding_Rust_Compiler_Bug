{"sha": "6cadda8be2f75200026930e24075868718f4843e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNhZGRhOGJlMmY3NTIwMDAyNjkzMGUyNDA3NTg2ODcxOGY0ODQzZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-09-03T13:24:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-09-03T13:24:07Z"}, "message": "re PR middle-end/54362 (COND_EXPR not understood by either alias or ITM)\n\n2012-09-03  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/54362\n\t* tree-ssa-structalias.c (find_func_aliases): Handle COND_EXPR.\n\nFrom-SVN: r190889", "tree": {"sha": "63286dde41d2ffb9e2ca68dfc3027fd1c3ce40bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63286dde41d2ffb9e2ca68dfc3027fd1c3ce40bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cadda8be2f75200026930e24075868718f4843e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cadda8be2f75200026930e24075868718f4843e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cadda8be2f75200026930e24075868718f4843e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cadda8be2f75200026930e24075868718f4843e/comments", "author": null, "committer": null, "parents": [{"sha": "a4cf6e468278c96222738657dbea85b9ccf2d76d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4cf6e468278c96222738657dbea85b9ccf2d76d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4cf6e468278c96222738657dbea85b9ccf2d76d"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "a6cf328f257e71370e53dc2722778925b7b002ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cadda8be2f75200026930e24075868718f4843e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cadda8be2f75200026930e24075868718f4843e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6cadda8be2f75200026930e24075868718f4843e", "patch": "@@ -1,9 +1,15 @@\n+2012-09-03  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/54362\n+\t* tree-ssa-structalias.c (find_func_aliases): Handle COND_EXPR.\n+\n 2012-09-03  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/s390.c (s390_loadrelative_operand_p): New function.\n \t(s390_check_qrst_address, print_operand_address): Use\n \ts390_loadrelative_operand_p instead of s390_symref_operand_p.\n-\t(s390_check_symref_alignment): Accept pointer size alignment for GOT slots.\n+\t(s390_check_symref_alignment): Accept pointer size alignment for\n+\tGOT slots.\n \t(legitimize_pic_address): Use load relative on z10 or later.\n \n 2012-09-03  Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "6e71d5504dc414cd8bfbf2f0e1a03b8d04b822c5", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cadda8be2f75200026930e24075868718f4843e/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cadda8be2f75200026930e24075868718f4843e/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=6cadda8be2f75200026930e24075868718f4843e", "patch": "@@ -4527,6 +4527,18 @@ find_func_aliases (gimple origt)\n \t\t\t && !POINTER_TYPE_P (TREE_TYPE (rhsop))))\n \t\t   || gimple_assign_single_p (t))\n \t    get_constraint_for_rhs (rhsop, &rhsc);\n+\t  else if (code == COND_EXPR)\n+\t    {\n+\t      /* The result is a merge of both COND_EXPR arms.  */\n+\t      VEC (ce_s, heap) *tmp = NULL;\n+\t      struct constraint_expr *rhsp;\n+\t      unsigned i;\n+\t      get_constraint_for_rhs (gimple_assign_rhs2 (t), &rhsc);\n+\t      get_constraint_for_rhs (gimple_assign_rhs3 (t), &tmp);\n+\t      FOR_EACH_VEC_ELT (ce_s, tmp, i, rhsp)\n+\t\tVEC_safe_push (ce_s, heap, rhsc, rhsp);\n+\t      VEC_free (ce_s, heap, tmp);\n+\t    }\n \t  else if (truth_value_p (code))\n \t    /* Truth value results are not pointer (parts).  Or at least\n \t       very very unreasonable obfuscation of a part.  */"}]}