{"sha": "314b5a68e3bc44a4a1c5558717e37608b6ffb546", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE0YjVhNjhlM2JjNDRhNGExYzU1NTg3MTdlMzc2MDhiNmZmYjU0Ng==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-08-23T19:33:41Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-08-23T19:33:41Z"}, "message": "Makefile.am (check-abi): Specify current directory.\n\n2002-08-23  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* Makefile.am (check-abi):  Specify current directory.\n\t* acinclude.m4 (GLIBCPP_CONFIGURE_TESTSUITE):  Fix shell syntax, use\n\tabi_baseline_triplet in baseline_file.\n\t* Makefile.in, aclocal.m4, configure:  Regenerate.\n\t* configure.target:  Add abi_baseline_triplet with default.\n\t* testsuite/abi_check.cc:  More error checking.\n\nFrom-SVN: r56545", "tree": {"sha": "0cdde908ab07ff2e024cf64f29da83a465560324", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cdde908ab07ff2e024cf64f29da83a465560324"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/314b5a68e3bc44a4a1c5558717e37608b6ffb546", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/314b5a68e3bc44a4a1c5558717e37608b6ffb546", "html_url": "https://github.com/Rust-GCC/gccrs/commit/314b5a68e3bc44a4a1c5558717e37608b6ffb546", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/314b5a68e3bc44a4a1c5558717e37608b6ffb546/comments", "author": null, "committer": null, "parents": [{"sha": "c6664446f6de665497aeb8c319926132e49373df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6664446f6de665497aeb8c319926132e49373df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6664446f6de665497aeb8c319926132e49373df"}], "stats": {"total": 2510, "additions": 1249, "deletions": 1261}, "files": [{"sha": "529b976189276689a43f8d21efcd6a0c1cdcb4bb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314b5a68e3bc44a4a1c5558717e37608b6ffb546/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314b5a68e3bc44a4a1c5558717e37608b6ffb546/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=314b5a68e3bc44a4a1c5558717e37608b6ffb546", "patch": "@@ -1,3 +1,12 @@\n+2002-08-23  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* Makefile.am (check-abi):  Specify current directory.\n+\t* acinclude.m4 (GLIBCPP_CONFIGURE_TESTSUITE):  Fix shell syntax, use\n+\tabi_baseline_triplet in baseline_file.\n+\t* Makefile.in, aclocal.m4, configure:  Regenerate.\n+\t* configure.target:  Add abi_baseline_triplet with default.\n+\t* testsuite/abi_check.cc:  More error checking.\n+\n 2002-08-23  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* config/linker-map.gnu:  Verbose comments, clean up spacing."}, {"sha": "e3822dcc90141115facfb70d06ad897bfaf1b469", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314b5a68e3bc44a4a1c5558717e37608b6ffb546/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314b5a68e3bc44a4a1c5558717e37608b6ffb546/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=314b5a68e3bc44a4a1c5558717e37608b6ffb546", "patch": "@@ -49,7 +49,7 @@ check-script-install: $(top_builddir)/mkcheck\n baseline_file = @baseline_file@\n check-abi: $(top_builddir)/testsuite/abi_check\n \t-(cd testsuite; \\\n-\t  abi_check @baseline_file@)\n+\t  ./abi_check ${baseline_file})\n \n # These rules are messy, but are hella worth it.\n doxygen:"}, {"sha": "aafd59aa1740da637b322067880d96606a7d0aa3", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 4, "deletions": 41, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314b5a68e3bc44a4a1c5558717e37608b6ffb546/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314b5a68e3bc44a4a1c5558717e37608b6ffb546/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=314b5a68e3bc44a4a1c5558717e37608b6ffb546", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n@@ -157,44 +157,7 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS = \\\n-\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n-\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n-\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n-\t\"CFLAGS=$(CFLAGS)\" \\\n-\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n-\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n-\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n-\t\"INSTALL=$(INSTALL)\" \\\n-\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n-\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n-\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n-\t\"LDFLAGS=$(LDFLAGS)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\"MAKE=$(MAKE)\" \\\n-\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n-\t\"SHELL=$(SHELL)\" \\\n-\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n-\t\"exec_prefix=$(exec_prefix)\" \\\n-\t\"infodir=$(infodir)\" \\\n-\t\"libdir=$(libdir)\" \\\n-\t\"includedir=$(includedir)\" \\\n-\t\"prefix=$(prefix)\" \\\n-\t\"tooldir=$(tooldir)\" \\\n-\t\"AR=$(AR)\" \\\n-\t\"AS=$(AS)\" \\\n-\t\"LD=$(LD)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"RANLIB=$(RANLIB)\" \\\n-\t\"NM=$(NM)\" \\\n-\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n-\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n-\t\"DESTDIR=$(DESTDIR)\" \\\n-\t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n \n \n # Subdir rules rely on $(FLAGS_TO_PASS)\n@@ -209,7 +172,7 @@ mkcheck.in testsuite_flags.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n all: all-redirect\n .SUFFIXES:\n@@ -486,7 +449,7 @@ check-script-install: $(top_builddir)/mkcheck\n \t  @glibcpp_builddir@/mkcheck 1)\n check-abi: $(top_builddir)/testsuite/abi_check\n \t-(cd testsuite; \\\n-\t  abi_check @baseline_file@)\n+\t  ./abi_check ${baseline_file})\n \n # These rules are messy, but are hella worth it.\n doxygen:"}, {"sha": "b814f5734565d282020a61ffb1db8911add51931", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314b5a68e3bc44a4a1c5558717e37608b6ffb546/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314b5a68e3bc44a4a1c5558717e37608b6ffb546/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=314b5a68e3bc44a4a1c5558717e37608b6ffb546", "patch": "@@ -2028,12 +2028,12 @@ AC_DEFUN(GLIBCPP_CONFIGURE_TESTSUITE, [\n   GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3(setenv)\n \n   # Export file names for ABI checking.\n-  baseline_file=\"${glibcpp_srcdir}/config/abi/${target_alias}/baseline_symbols.txt\"\n+  baseline_file=\"${glibcpp_srcdir}/config/abi/${abi_baseline_triplet}/baseline_symbols.txt\"\n   AC_SUBST(baseline_file)\n \n   # Don't do ABI checking unless native.\n   AM_CONDITIONAL(GLIBCPP_BUILD_ABI_CHECK,\n-                 test x\"$build\" == x\"$host\" && test -z \"$with_cross_host\")\n+                 test x\"$build\" = x\"$host\" && test -z \"$with_cross_host\")\n ])\n \n "}, {"sha": "dae93c1c8a3ca4ace49f566ff056ae2b69f38163", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314b5a68e3bc44a4a1c5558717e37608b6ffb546/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314b5a68e3bc44a4a1c5558717e37608b6ffb546/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=314b5a68e3bc44a4a1c5558717e37608b6ffb546", "patch": "@@ -1,4 +1,4 @@\n-dnl aclocal.m4 generated automatically by aclocal 1.4-p5\n+dnl aclocal.m4 generated automatically by aclocal 1.4-p6\n \n dnl Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n dnl This file is free software; the Free Software Foundation\n@@ -2040,12 +2040,12 @@ AC_DEFUN(GLIBCPP_CONFIGURE_TESTSUITE, [\n   GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3(setenv)\n \n   # Export file names for ABI checking.\n-  baseline_file=\"${glibcpp_srcdir}/config/abi/${target_alias}/baseline_symbols.txt\"\n+  baseline_file=\"${glibcpp_srcdir}/config/abi/${abi_baseline_triplet}/baseline_symbols.txt\"\n   AC_SUBST(baseline_file)\n \n   # Don't do ABI checking unless native.\n   AM_CONDITIONAL(GLIBCPP_BUILD_ABI_CHECK,\n-                 test x\"$build\" == x\"$host\" && test -z \"$with_cross_host\")\n+                 test x\"$build\" = x\"$host\" && test -z \"$with_cross_host\")\n ])\n \n \n@@ -2209,14 +2209,16 @@ AC_MSG_RESULT($enable_symvers)\n ])\n \n \n-# isc-posix.m4 serial 1 (gettext-0.10.40)\n+# isc-posix.m4 serial 2 (gettext-0.11.2)\n dnl Copyright (C) 1995-2002 Free Software Foundation, Inc.\n dnl This file is free software, distributed under the terms of the GNU\n dnl General Public License.  As a special exception to the GNU General\n dnl Public License, this file may be distributed as part of a program\n dnl that contains a configuration script generated by Autoconf, under\n dnl the same distribution terms as the rest of that program.\n \n+# This file is not needed with autoconf-2.53 and newer.  Remove it in 2005.\n+\n # This test replaces the one in autoconf.\n # Currently this macro should have the same name as the autoconf macro\n # because gettext's gettext.m4 (distributed in the automake package)\n@@ -2277,7 +2279,8 @@ dnl Usage:\n dnl AM_INIT_AUTOMAKE(package,version, [no-define])\n \n AC_DEFUN([AM_INIT_AUTOMAKE],\n-[AC_REQUIRE([AC_PROG_INSTALL])\n+[AC_REQUIRE([AM_SET_CURRENT_AUTOMAKE_VERSION])dnl\n+AC_REQUIRE([AC_PROG_INSTALL])\n PACKAGE=[$1]\n AC_SUBST(PACKAGE)\n VERSION=[$2]\n@@ -2293,13 +2296,42 @@ AC_REQUIRE([AM_SANITY_CHECK])\n AC_REQUIRE([AC_ARG_PROGRAM])\n dnl FIXME This is truly gross.\n missing_dir=`cd $ac_aux_dir && pwd`\n-AM_MISSING_PROG(ACLOCAL, aclocal, $missing_dir)\n+AM_MISSING_PROG(ACLOCAL, aclocal-${am__api_version}, $missing_dir)\n AM_MISSING_PROG(AUTOCONF, autoconf, $missing_dir)\n-AM_MISSING_PROG(AUTOMAKE, automake, $missing_dir)\n+AM_MISSING_PROG(AUTOMAKE, automake-${am__api_version}, $missing_dir)\n AM_MISSING_PROG(AUTOHEADER, autoheader, $missing_dir)\n AM_MISSING_PROG(MAKEINFO, makeinfo, $missing_dir)\n AC_REQUIRE([AC_PROG_MAKE_SET])])\n \n+# Copyright 2002  Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n+\n+# AM_AUTOMAKE_VERSION(VERSION)\n+# ----------------------------\n+# Automake X.Y traces this macro to ensure aclocal.m4 has been\n+# generated from the m4 files accompanying Automake X.Y.\n+AC_DEFUN([AM_AUTOMAKE_VERSION],[am__api_version=\"1.4\"])\n+\n+# AM_SET_CURRENT_AUTOMAKE_VERSION\n+# -------------------------------\n+# Call AM_AUTOMAKE_VERSION so it can be traced.\n+# This function is AC_REQUIREd by AC_INIT_AUTOMAKE.\n+AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],\n+\t [AM_AUTOMAKE_VERSION([1.4-p6])])\n+\n #\n # Check to make sure that the build environment is sane.\n #"}, {"sha": "18e363958fcb709671948a518f99d60f52f1619c", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1173, "deletions": 1210, "changes": 2383, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314b5a68e3bc44a4a1c5558717e37608b6ffb546/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314b5a68e3bc44a4a1c5558717e37608b6ffb546/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=314b5a68e3bc44a4a1c5558717e37608b6ffb546"}, {"sha": "d605255e6ad270ef0390d2d715816d68606bd2cd", "filename": "libstdc++-v3/configure.target", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314b5a68e3bc44a4a1c5558717e37608b6ffb546/libstdc%2B%2B-v3%2Fconfigure.target", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314b5a68e3bc44a4a1c5558717e37608b6ffb546/libstdc%2B%2B-v3%2Fconfigure.target", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.target?ref=314b5a68e3bc44a4a1c5558717e37608b6ffb546", "patch": "@@ -31,6 +31,9 @@\n #   c_compatibility        if \"C\" compatibility headers are necessary,\n #                              defaults to no.\n #\n+#   abi_baseline_triplet   directory name for ABI compat testing,\n+#                              defaults to target (as per config.guess)\n+#\n # It possibly modifies the following variables:\n #\n #   OPT_LDFLAGS            extra flags to pass when linking the library, of\n@@ -54,6 +57,8 @@ else\n     cpu_include_dir=\"cpu/generic\"\n fi\n \n+abi_baseline_triplet=${target}\n+\n c_model=c_std\n c_compatibility=no\n \n@@ -71,6 +76,7 @@ case \"${target_cpu}\" in\n     cpu_include_dir=\"cpu/arm\"\n     ;;\n   i486 | i586 | i686 | i786)\n+    # add athlons here maybe\n     cpu_include_dir=\"cpu/i486\"\n     CPULIMITSH=\"cpu/i386\"\n     ;;"}, {"sha": "f4b2c78961803c16eec0063669730971d6b4247c", "filename": "libstdc++-v3/testsuite/abi_check.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/314b5a68e3bc44a4a1c5558717e37608b6ffb546/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/314b5a68e3bc44a4a1c5558717e37608b6ffb546/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc?ref=314b5a68e3bc44a4a1c5558717e37608b6ffb546", "patch": "@@ -36,6 +36,8 @@\n #include <fstream>\n #include <iostream>\n #include <cxxabi.h>\n+#include <stdlib.h>    // for system(3)\n+#include <unistd.h>    // for access(2)\n \n struct symbol_info\n {\n@@ -226,6 +228,19 @@ int main(int argc, char** argv)\n   const char* test_file = \"current_symbols.txt\";\n   const char* test_lib = \"../src/.libs/libstdc++.so\";\n \n+  // Quick sanity/setup check\n+  if (access(baseline_file, R_OK) != 0)\n+    {\n+      cerr << \"Cannot read baseline file \" << baseline_file << endl;\n+      exit(1);\n+    }\n+  if (access(test_lib, R_OK) != 0)\n+    {\n+      cerr << \"Cannot read library \" << test_lib\n+           << \", did you forget to build first?\" << endl;\n+      exit(1);\n+    }\n+\n   // Get list of symbols.\n   // Assume external symbol list computed \"as if\" by\n   /*"}]}