{"sha": "09a23476dfc4ea56adc24faf73198781cd755057", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlhMjM0NzZkZmM0ZWE1NmFkYzI0ZmFmNzMxOTg3ODFjZDc1NTA1Nw==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-09-13T16:54:32Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-09-13T16:54:32Z"}, "message": "tree-ssa-ter.c: remove typedefs that hide pointerness\n\ngcc/ChangeLog:\n\n2015-09-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* tree-ssa-ter.c (temp_expr_table_d): Rename to temp_expr_table\n\tand remove typedef.\n\t(new_temp_expr_table): Adjust.\n\t(free_temp_expr_table): Likewise.\n\t(version_to_be_replaced_p): Likewise.\n\t(make_dependent_on_partition): Likewise.\n\t(add_to_partition_kill_list): Likewise.\n\t(remove_from_partition_kill_list): Likewise.\n\t(add_dependence): Likewise.\n\t(finished_with_expr): Likewise.\n\t(process_replaceable): Likewise.\n\t(kill_expr): Likewise.\n\t(kill_virtual_exprs): Likewise.\n\t(mark_replaceable): Likewise.\n\t(find_replaceable_in_bb): Likewise.\n\t(find_replaceable_exprs): Likewise.\n\t(debug_ter): Likewise.\n\nFrom-SVN: r227723", "tree": {"sha": "03b1465448078cea29e826641bda7de0a8f97cfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03b1465448078cea29e826641bda7de0a8f97cfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09a23476dfc4ea56adc24faf73198781cd755057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a23476dfc4ea56adc24faf73198781cd755057", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09a23476dfc4ea56adc24faf73198781cd755057", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a23476dfc4ea56adc24faf73198781cd755057/comments", "author": null, "committer": null, "parents": [{"sha": "2d5b3f6e54c8439baf3123ab9cb24946e59e7032", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d5b3f6e54c8439baf3123ab9cb24946e59e7032", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d5b3f6e54c8439baf3123ab9cb24946e59e7032"}], "stats": {"total": 59, "additions": 39, "deletions": 20}, "files": [{"sha": "67799b613f1b4eed98a45c92225754aeac1f847e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a23476dfc4ea56adc24faf73198781cd755057/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a23476dfc4ea56adc24faf73198781cd755057/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09a23476dfc4ea56adc24faf73198781cd755057", "patch": "@@ -1,3 +1,23 @@\n+2015-09-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* tree-ssa-ter.c (temp_expr_table_d): Rename to temp_expr_table\n+\tand remove typedef.\n+\t(new_temp_expr_table): Adjust.\n+\t(free_temp_expr_table): Likewise.\n+\t(version_to_be_replaced_p): Likewise.\n+\t(make_dependent_on_partition): Likewise.\n+\t(add_to_partition_kill_list): Likewise.\n+\t(remove_from_partition_kill_list): Likewise.\n+\t(add_dependence): Likewise.\n+\t(finished_with_expr): Likewise.\n+\t(process_replaceable): Likewise.\n+\t(kill_expr): Likewise.\n+\t(kill_virtual_exprs): Likewise.\n+\t(mark_replaceable): Likewise.\n+\t(find_replaceable_in_bb): Likewise.\n+\t(find_replaceable_exprs): Likewise.\n+\t(debug_ter): Likewise.\n+\n 2015-09-13  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* bt-load.c (struct btr_def_group): Rename from btr_def_group_s."}, {"sha": "17686a9d581b9a6ee611ce72859620509b1cd1bc", "filename": "gcc/tree-ssa-ter.c", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a23476dfc4ea56adc24faf73198781cd755057/gcc%2Ftree-ssa-ter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a23476dfc4ea56adc24faf73198781cd755057/gcc%2Ftree-ssa-ter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ter.c?ref=09a23476dfc4ea56adc24faf73198781cd755057", "patch": "@@ -162,7 +162,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Temporary Expression Replacement (TER) table information.  */\n \n-typedef struct temp_expr_table_d\n+struct temp_expr_table\n {\n   var_map map;\n   bitmap *partition_dependencies;\t/* Partitions expr is dependent on.  */\n@@ -174,7 +174,7 @@ typedef struct temp_expr_table_d\n   bitmap new_replaceable_dependencies;\t/* Holding place for pending dep's.  */\n   int *num_in_part;\t\t\t/* # of ssa_names in a partition.  */\n   int *call_cnt;\t\t\t/* Call count at definition.  */\n-} *temp_expr_table_p;\n+};\n \n /* Used to indicate a dependency on VDEFs.  */\n #define VIRTUAL_PARTITION(table)\t(table->virtual_partition)\n@@ -183,19 +183,18 @@ typedef struct temp_expr_table_d\n static bitmap_obstack ter_bitmap_obstack;\n \n #ifdef ENABLE_CHECKING\n-extern void debug_ter (FILE *, temp_expr_table_p);\n+extern void debug_ter (FILE *, temp_expr_table *);\n #endif\n \n \n /* Create a new TER table for MAP.  */\n \n-static temp_expr_table_p\n+static temp_expr_table *\n new_temp_expr_table (var_map map)\n {\n-  temp_expr_table_p t;\n   unsigned x;\n \n-  t = XNEW (struct temp_expr_table_d);\n+  temp_expr_table *t = XNEW (struct temp_expr_table);\n   t->map = map;\n \n   t->partition_dependencies = XCNEWVEC (bitmap, num_ssa_names + 1);\n@@ -229,7 +228,7 @@ new_temp_expr_table (var_map map)\n    vector.  */\n \n static bitmap\n-free_temp_expr_table (temp_expr_table_p t)\n+free_temp_expr_table (temp_expr_table *t)\n {\n   bitmap ret = NULL;\n \n@@ -264,7 +263,7 @@ free_temp_expr_table (temp_expr_table_p t)\n /* Return TRUE if VERSION is to be replaced by an expression in TAB.  */\n \n static inline bool\n-version_to_be_replaced_p (temp_expr_table_p tab, int version)\n+version_to_be_replaced_p (temp_expr_table *tab, int version)\n {\n   if (!tab->replaceable_expressions)\n     return false;\n@@ -276,7 +275,7 @@ version_to_be_replaced_p (temp_expr_table_p tab, int version)\n    the expression table */\n \n static inline void\n-make_dependent_on_partition (temp_expr_table_p tab, int version, int p)\n+make_dependent_on_partition (temp_expr_table *tab, int version, int p)\n {\n   if (!tab->partition_dependencies[version])\n     tab->partition_dependencies[version] = BITMAP_ALLOC (&ter_bitmap_obstack);\n@@ -288,7 +287,7 @@ make_dependent_on_partition (temp_expr_table_p tab, int version, int p)\n /* Add VER to the kill list for P.  TAB is the expression table */\n \n static inline void\n-add_to_partition_kill_list (temp_expr_table_p tab, int p, int ver)\n+add_to_partition_kill_list (temp_expr_table *tab, int p, int ver)\n {\n   if (!tab->kill_list[p])\n     {\n@@ -303,7 +302,7 @@ add_to_partition_kill_list (temp_expr_table_p tab, int p, int ver)\n    table.  */\n \n static inline void\n-remove_from_partition_kill_list (temp_expr_table_p tab, int p, int version)\n+remove_from_partition_kill_list (temp_expr_table *tab, int p, int version)\n {\n   gcc_checking_assert (tab->kill_list[p]);\n   bitmap_clear_bit (tab->kill_list[p], version);\n@@ -321,7 +320,7 @@ remove_from_partition_kill_list (temp_expr_table_p tab, int p, int version)\n    expression table.  */\n \n static void\n-add_dependence (temp_expr_table_p tab, int version, tree var)\n+add_dependence (temp_expr_table *tab, int version, tree var)\n {\n   int i;\n   bitmap_iterator bi;\n@@ -372,7 +371,7 @@ add_dependence (temp_expr_table_p tab, int version, tree var)\n    expression from consideration as well by freeing the decl uid bitmap.  */\n \n static void\n-finished_with_expr (temp_expr_table_p tab, int version, bool free_expr)\n+finished_with_expr (temp_expr_table *tab, int version, bool free_expr)\n {\n   unsigned i;\n   bitmap_iterator bi;\n@@ -444,7 +443,7 @@ ter_is_replaceable_p (gimple stmt)\n /* Create an expression entry for a replaceable expression.  */\n \n static void\n-process_replaceable (temp_expr_table_p tab, gimple stmt, int call_cnt)\n+process_replaceable (temp_expr_table *tab, gimple stmt, int call_cnt)\n {\n   tree var, def, basevar;\n   int version;\n@@ -493,7 +492,7 @@ process_replaceable (temp_expr_table_p tab, gimple stmt, int call_cnt)\n    from consideration, making it not replaceable.  */\n \n static inline void\n-kill_expr (temp_expr_table_p tab, int partition)\n+kill_expr (temp_expr_table *tab, int partition)\n {\n   unsigned version;\n \n@@ -513,7 +512,7 @@ kill_expr (temp_expr_table_p tab, int partition)\n    partitions.  */\n \n static inline void\n-kill_virtual_exprs (temp_expr_table_p tab)\n+kill_virtual_exprs (temp_expr_table *tab)\n {\n   kill_expr (tab, VIRTUAL_PARTITION (tab));\n }\n@@ -524,7 +523,7 @@ kill_virtual_exprs (temp_expr_table_p tab)\n    MORE_REPLACING is true, accumulate the pending partition dependencies.  */\n \n static void\n-mark_replaceable (temp_expr_table_p tab, tree var, bool more_replacing)\n+mark_replaceable (temp_expr_table *tab, tree var, bool more_replacing)\n {\n   int version = SSA_NAME_VERSION (var);\n \n@@ -572,7 +571,7 @@ find_ssaname_in_store (gimple, tree, tree t, void *data)\n    be replaced by their expressions.  Results are stored in the table TAB.  */\n \n static void\n-find_replaceable_in_bb (temp_expr_table_p tab, basic_block bb)\n+find_replaceable_in_bb (temp_expr_table *tab, basic_block bb)\n {\n   gimple_stmt_iterator bsi;\n   gimple stmt;\n@@ -712,7 +711,7 @@ bitmap\n find_replaceable_exprs (var_map map)\n {\n   basic_block bb;\n-  temp_expr_table_p table;\n+  temp_expr_table *table;\n   bitmap ret;\n \n   bitmap_obstack_initialize (&ter_bitmap_obstack);\n@@ -755,7 +754,7 @@ dump_replaceable_exprs (FILE *f, bitmap expr)\n    table being debugged.  */\n \n DEBUG_FUNCTION void\n-debug_ter (FILE *f, temp_expr_table_p t)\n+debug_ter (FILE *f, temp_expr_table *t)\n {\n   unsigned x, y;\n   bitmap_iterator bi;"}]}