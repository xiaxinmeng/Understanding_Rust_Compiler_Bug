{"sha": "2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNjMDdkYjRiMDg5YjhiM2RmMDUyNjFmMWQ3YWNiYzk2ZDJlNzIwYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-09T22:33:35Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-09T22:33:35Z"}, "message": "Move constructor/destructor handling into target hooks.\n\nFrom-SVN: r44747", "tree": {"sha": "ddb2d5519f49bc33648c25225b8b8ba84df590b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddb2d5519f49bc33648c25225b8b8ba84df590b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/comments", "author": null, "committer": null, "parents": [{"sha": "ef8d8b8922a034dfac5cff9d5fa781dc57c49ed0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8d8b8922a034dfac5cff9d5fa781dc57c49ed0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef8d8b8922a034dfac5cff9d5fa781dc57c49ed0"}], "stats": {"total": 3666, "additions": 910, "deletions": 2756}, "files": [{"sha": "2ebe5cde0e1d212d7e64a81e0f4eb775f54368ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -1,3 +1,163 @@\n+2001-08-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* Makefile.in (MAYBE_USE_COLLECT2): Remove; purge all uses.\n+\t(USE_COLLECT2): Remove duplicate definition.\n+\t* config.gcc (a29k-udi, a29k-wrs-vxworks) [tm_file]: Remove a29k/udi.h.\n+\t(use_collect2): Remove dead code.\n+\t* configure.in (use_collect2): Remove will_use_collect2 and\n+\tmaybe_use_collect2; add USE_COLLECT2 to host_xm_defines and xm_defines.\n+\t* configure: Rebuild.\n+\n+\t* target.h (targetm.asm_out.constructor): New.\n+\t(targetm.asm_out.destructor, targetm.have_ctors_dtors): New.\n+\t* target-def.h (TARGET_ASM_CONSTRUCTOR): New.\n+\t(TARGET_ASM_DESTRUCTOR, TARGET_HAVE_CTORS_DTORS): New.\n+\t* varasm.c (in_ctors, in_dtors): New.\n+\t(assemble_constructor, assemble_destructor): Remove.\n+\t(default_stabs_asm_out_destructor): New.\n+\t(default_named_section_asm_out_destructor): New.\n+\t(dtors_section, default_dtor_section_asm_out_destructor): New.\n+\t(default_stabs_asm_out_constructor): New.\n+\t(default_named_section_asm_out_constructor): New.\n+\t(ctors_section, default_ctor_section_asm_out_constructor): New.\n+\t* output.h: Update declarations.\n+\t* c-decl.c (c_expand_body): Use target hooks instead of\n+\tassemble_constructor and assemble_destructor.\n+\t* profile.c (output_func_start_profiler): Likewise.\n+\t* objc/objc-act.c (finish_objc): Likewise.\n+\t(build_module_descriptor): Tidy.  Set TREE_PUBLIC properly\n+\tfor the constructor.\n+\t* objc/Make-lang.in (objc-act.o): Depend on TARGET_H.\n+\n+\t* crtstuff.c (CTORS_SECTION_ASM_OP): Don't define.\n+\t(DTORS_SECTION_ASM_OP): Likewise.\n+\t(__CTOR_LIST__): Use attribute section when possible.\n+\t(__DTOR_LIST__, __CTOR_END__, __DTOR_END__): Likewise.\n+\n+\t* defaults.h (EH_FRAME_SECTION_NAME): Don't depend on\n+\tASM_OUTPUT_CONSTRUCTOR.\n+\n+\t* config/darwin.c (machopic_asm_out_constructor): New.\n+\t(machopic_asm_out_destructor): New.\n+\t* config/darwin-protos.h: Update declarations.\n+\t* config/darwin.h (ASM_OUTPUT_CONSTRUCTOR): Remove.\n+\t(ASM_OUTPUT_DESTRUCTOR): Remove.\n+\t(TARGET_ASM_CONSTRUCTOR, TARGET_ASM_DESTRUCTOR): New.\n+\t* config/nextstep.c (nextstep_asm_out_constructor): New.\n+\t(nextstep_asm_out_destructor): New.\n+\t* config/nextstep.h (ASM_OUTPUT_CONSTRUCTOR): Remove.\n+\t(ASM_OUTPUT_DESTRUCTOR): Remove.\n+\t(TARGET_ASM_CONSTRUCTOR, TARGET_ASM_DESTRUCTOR): New.\n+\t* config/nextstep21.h: Undef TARGET_ASM_*STRUCTOR instead of\n+\tASM_OUTPUT_*STRUCTOR.\n+\t* config/i386/aix386ng.h: Likewise.\n+\n+\t* config/elfos.h (CTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP): Remove.\n+\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): No ctors/dtors.\n+\t(CTORS_SECTION_FUNCTION, DTORS_SECTION_FUNCTION): Remove.\n+\t(ASM_OUTPUT_CONSTRUCTOR, ASM_OUTPUT_DESTRUCTOR): Remove.\n+\t* config/lynx.h: Likewise.\n+\t* config/netware.h: Likewise.\n+\t* config/psos.h: Likewise.\n+\t* config/alpha/alpha-interix.h: Likewise.\n+\t* config/alpha/elf.h: Likewise.\n+\t* config/arc/arc.h: Likewise.\n+\t* config/arm/aof.h: Likewise.\n+\t* config/arm/coff.h: Likewise.\n+\t* config/arm/elf.h: Likewise.\n+\t* config/c4x/c4x.h: Likewise.\n+\t* config/h8300/h8300.h: Likewise.\n+\t* config/i386/cygwin.h: Likewise.\n+\t* config/i386/djgpp.h: Likewise.\n+\t* config/i386/i386-coff.h: Likewise.\n+\t* config/i386/i386-interix.h: Likewise.\n+\t* config/i386/sco5.h: Likewise.\n+\t* config/i386/vsta.h: Likewise.\n+\t* config/i386/win32.h: Likewise.\n+\t* config/i960/i960-coff.h: Likewise.\n+\t* config/ia64/sysv4.h: Likewise.\n+\t* config/m68hc11/m68hc11.h: Likewise.\n+\t* config/m68k/coff.h: Likewise.\n+\t* config/m68k/mot3300.h: Likewise.\n+\t* config/m88k/m88k.h: Likewise.\n+\t* config/mcore/mcore-pe.h: Likewise.\n+\t* config/mcore/mcore.h: Likewise.\n+\t* config/mips/elf.h: Likewise.\n+\t* config/mips/elf64.h: Likewise.\n+\t* config/mips/iris6.h: Likewise.\n+\t* config/pa/pa64-hpux.h: Likewise.\n+\t* config/rs6000/sysv4.h: Likewise.\n+\t* config/sh/sh.h: Likewise.\n+\t* config/sparc/litecoff.h: Likewise.\n+\n+\t* config/svr3.h (CTORS_SECTION_ASM_OP): Remove.\n+\t(CTORS_SECTION_FUNCTION, DTORS_SECTION_FUNCTION): Remove.\n+\t(ASM_OUTPUT_CONSTRUCTOR, ASM_OUTPUT_DESTRUCTOR): Remove.\n+\t* config/1750a/1750a.h (ASM_OUTPUT_CONSTRUCTOR): Remove.\n+\t(ASM_OUTPUT_DESTRUCTOR): Remove.\n+\t* config/a29k/a29k.c: Move include of tree.h.\n+\t* config/a29k/udi.h: Delete file.\n+\t* config/alpha/alpha.c (vms_asm_out_constructor): New.\n+\t(vms_asm_out_destructor): New.\n+\t* config/alpha/vms.h (EXTRA_SECTIONS): No ctors/dtors.\n+\t(EXTRA_SECTION_FUNCTIONS): Likewise.\n+\t(ASM_OUTPUT_CONSTRUCTOR, ASM_OUTPUT_DESTRUCTOR): Remove.\n+\t(TARGET_ASM_CONSTRUCTOR, TARGET_ASM_DESTRUCTOR): New.\n+\t* config/c4x/c4x.c: Move include of tree.h.\n+\t* config/clipper/clipper.c (clix_asm_out_constructor): New.\t\n+\t(clix_asm_out_destructor): New.\n+\t* config/clipper/clix.h (ASM_OUTPUT_CONSTRUCTOR): Remove.\n+\t(ASM_OUTPUT_DESTRUCTOR): Remove.\n+\t(TARGET_ASM_CONSTRUCTOR, TARGET_ASM_DESTRUCTOR): New.\n+\t* config/i386/aix386.h (ASM_OUTPUT_CONSTRUCTOR): Remove.\n+\t(TARGET_ASM_CONSTRUCTOR): New.\n+\t* config/i386/i386.c (ix86_svr3_asm_out_constructor): New.\n+\t(sco_asm_out_constructor): New.\n+\t* config/i386/sco5.h (TARGET_ASM_CONSTRUCTOR): New.\n+\t* config/i386/svr3gas.h: Remove stack grows up code.\n+\tRemove code duplicated from i386/sysv3.h.\n+\t(TARGET_ASM_CONSTRUCTOR): New.\n+\t(ASM_OUTPUT_CONSTRUCTOR, ASM_OUTPUT_DESTRUCTOR): Remove.\n+\t(DTORS_SECTION_FUNCTION, CTORS_SECTION_FUNCTION): Remove.\n+\t* config/i386/sysv3.h (ASM_OUTPUT_CONSTRUCTOR): Remove.\n+\t(TARGET_ASM_CONSTRUCTOR): New.\n+\t* config/m68hc11/m68hc11.c (m68hc11_asm_out_constructor): New.\n+\t(m68hc11_asm_out_destructor): New.\n+\t* config/m68hc11/m68hc11.h (TARGET_ASM_CONSTRUCTOR): New.\n+\t(TARGET_ASM_DESTRUCTOR): New.\n+\t* config/m68k/auxgas.h: Don't undef ASM_OUTPUT_*STRUCTOR.\n+\t* config/m68k/dpx2.h: Properly undef all the bits inherited from\n+\tconfig/svr3.h pertaining to section manipulation.\n+\t* config/m68k/dpx2g.h: Remove #if 0 code.\n+\t* config/m68k/m68k.c (m68k_svr3_asm_out_constructor): New.\n+\t* config/m68k/tower-as.h (ASM_OUTPUT_SOURCE_LINE): Fix typo.\n+\t(ASM_OUTPUT_CONSTRUCTOR): Remove.\n+\t(TARGET_ASM_CONSTRUCTOR): New.\n+\t* config/m88k/m88k.c (m88k_layout_frame): Don't use assign_stack_local.\n+\t(m88k_svr3_asm_out_constructor): New.\n+\t(m88k_svr3_asm_out_destructor): New.\n+\t* config/m88k/sysv3.h (ASM_OUTPUT_CONSTRUCTOR): Remove.\n+\t(ASM_OUTPUT_DESTRUCTOR): Remove.\n+\t(TARGET_ASM_CONSTRUCTOR, TARGET_ASM_DESTRUCTOR): New.\n+\t* config/mips/mips.h: Remove #if 0 ASM_OUTPUT_*STRUCTOR code.\n+\t* config/rs6000/aix.h: Likewise.\n+\t* config/mips/rtems64.h: Don't undef removed constructor related bits.\n+\t* config/mips/vxworks.h: Likewise.\n+\t* config/rs6000/lynx.h: Likewise.\n+\t* config/sh/elf.h: Likewise.\n+\t* config/rs6000/sysv4.h (CTORS_SECTION_ASM_OP): New.\n+\t(DTORS_SECTION_ASM_OP): New.\n+\t* config/sparc/linux64.h (ASM_OUTPUT_CONSTRUCTOR): Remove.\n+\t(ASM_OUTPUT_DESTRUCTOR): Remove.\n+\t* config/sparc/sol2-sld-64.h: Likewise.\n+\t* config/vax/vax.c (vms_asm_out_constructor): New.\n+\t(vms_asm_out_destructor): New.\n+\t* config/vax/vms.h (ASM_OUTPUT_CONSTRUCTOR): Remove.\n+\t(ASM_OUTPUT_DESTRUCTOR): Remove.\n+\t(TARGET_ASM_CONSTRUCTOR, TARGET_ASM_DESTRUCTOR): New.\n+\n+\t* doc/tm.texi (@node Initialization): Update.\n+\n 2001-08-09  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/crtbegin.asm (__JCR_LIST__): New."}, {"sha": "fb490f946195d85b0c13e7a06eeafd90a1a1585f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -409,12 +409,6 @@ EXTRA_GCC_OBJS =@host_extra_gcc_objs@\n # Often this is edited directly by `configure'.\n EXTRA_HEADERS =@extra_headers_list@\n \n-# Set this to `collect2' to enable use of collect2.\n-USE_COLLECT2 = @will_use_collect2@\n-# If we might be using collect2, then this variable will be set to\n-# -DUSE_COLLECT2.  toplev.c, collect2.c and libgcc2.c all need to\n-# know if we may be using collect2.\n-MAYBE_USE_COLLECT2 = @maybe_use_collect2@\n # It is convenient for configure to add the assignment at the beginning,\n # so don't override it here.\n USE_COLLECT2 = collect2$(exeext)\n@@ -1058,7 +1052,7 @@ libgcc.a: $(LIBGCC_DEPS)\n \t  RANLIB_TEST_FOR_TARGET=\"$(RANLIB_TEST_FOR_TARGET)\" \\\n \t  NM_FOR_TARGET=\"$(NM_FOR_TARGET)\" AWK=\"$(AWK)\" \\\n \t  LIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS)\" \\\n-\t  INCLUDES=\"$(INCLUDES)\" MAYBE_USE_COLLECT2=\"$(MAYBE_USE_COLLECT2)\" \\\n+\t  INCLUDES=\"$(INCLUDES)\" \\\n \t  CONFIG_H=\"$(TCONFIG_H)\" MACHMODE_H=\"$(MACHMODE_H)\" \\\n \t  LIB1ASMSRC='$(LIB1ASMSRC)' \\\n \t  MAKEOVERRIDES= \\\n@@ -1092,7 +1086,7 @@ stmp-multilib: $(LIBGCC_DEPS)\n \t  RANLIB_TEST_FOR_TARGET=\"$(RANLIB_TEST_FOR_TARGET)\" \\\n \t  NM_FOR_TARGET=\"$(NM_FOR_TARGET)\" AWK=\"$(AWK)\" \\\n \t  LIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS)\" \\\n-\t  INCLUDES=\"$(INCLUDES)\" MAYBE_USE_COLLECT2=\"$(MAYBE_USE_COLLECT2)\" \\\n+\t  INCLUDES=\"$(INCLUDES)\" \\\n \t  CONFIG_H=\"$(CONFIG_H)\" MACHMODE_H=\"$(MACHMODE_H)\" \\\n \t  LIB1ASMSRC='$(LIB1ASMSRC)' \\\n \t  MAKEOVERRIDES= \\\n@@ -1203,7 +1197,7 @@ collect2$(exeext): $(COLLECT2_OBJS) $(LIBDEPS)\n collect2.o : collect2.c $(CONFIG_H) $(SYSTEM_H) gstab.h intl.h \\\n \t$(OBSTACK_H) $(DEMANGLE_H) collect2.h version.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)  \\\n-\t-DTARGET_MACHINE=\\\"$(target_alias)\\\" $(MAYBE_USE_COLLECT2) \\\n+\t-DTARGET_MACHINE=\\\"$(target_alias)\\\" \\\n \t-c $(srcdir)/collect2.c\n \n tlink.o: tlink.c $(DEMANGLE_H) hash.h $(CONFIG_H) $(SYSTEM_H) collect2.h intl.h\n@@ -1361,7 +1355,7 @@ toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) function.h \\\n    dwarf2out.h sdbout.h dbxout.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) \\\n    graph.h $(LOOP_H) except.h $(REGS_H) $(TIMEVAR_H) $(lang_options_files) \\\n    ssa.h $(PARAMS_H) $(TM_P_H) reload.h dwarf2asm.h $(TARGET_H)\n-\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(MAYBE_USE_COLLECT2) \\\n+\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  -DTARGET_NAME=\\\"$(target_alias)\\\" \\\n \t  -c $(srcdir)/toplev.c\n main.o : main.c toplev.h\n@@ -1476,7 +1470,7 @@ conflict.o : conflict.c $(CONFIG_H) $(SYSTEM_H) $(OBSTACK_H) $(HASHTAB_H) \\\n    $(RTL_H) hard-reg-set.h $(BASIC_BLOCK_H)\n profile.o : profile.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n    insn-config.h output.h $(REGS_H) $(EXPR_H) function.h \\\n-   gcov-io.h toplev.h $(GGC_H) hard-reg-set.h $(BASIC_BLOCK_H)\n+   gcov-io.h toplev.h $(GGC_H) hard-reg-set.h $(BASIC_BLOCK_H) $(TARGET_H)\n loop.o : loop.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) flags.h $(LOOP_H) insn-config.h \\\n    $(REGS_H) hard-reg-set.h $(RECOG_H) $(EXPR_H) real.h $(PREDICT_H) \\\n    $(BASIC_BLOCK_H) function.h toplev.h varray.h except.h cselib.h $(TM_P_H)\n@@ -2679,7 +2673,7 @@ install-libgcc: libgcc.mk libgcc.a installdirs\n \t  RANLIB_TEST_FOR_TARGET=\"$(RANLIB_TEST_FOR_TARGET)\" \\\n \t  NM_FOR_TARGET=\"$(NM_FOR_TARGET)\" AWK=\"$(AWK)\" \\\n \t  LIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS)\" \\\n-\t  INCLUDES=\"$(INCLUDES)\" MAYBE_USE_COLLECT2=\"$(MAYBE_USE_COLLECT2)\" \\\n+\t  INCLUDES=\"$(INCLUDES)\" \\\n \t  CONFIG_H=\"$(TCONFIG_H)\" MACHMODE_H=\"$(MACHMODE_H)\" \\\n \t  LIB1ASMSRC='$(LIB1ASMSRC)' \\\n \t  MAKEOVERRIDES= \\\n@@ -2705,7 +2699,7 @@ install-multilib: stmp-multilib installdirs\n \t  RANLIB_TEST_FOR_TARGET=\"$(RANLIB_TEST_FOR_TARGET)\" \\\n \t  NM_FOR_TARGET=\"$(NM_FOR_TARGET)\" AWK=\"$(AWK)\" \\\n \t  LIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS)\" \\\n-\t  INCLUDES=\"$(INCLUDES)\" MAYBE_USE_COLLECT2=\"$(MAYBE_USE_COLLECT2)\" \\\n+\t  INCLUDES=\"$(INCLUDES)\" \\\n \t  CONFIG_H=\"$(CONFIG_H)\" MACHMODE_H=\"$(MACHMODE_H)\" \\\n \t  LIB1ASMSRC='$(LIB1ASMSRC)' \\\n \t  MAKEOVERRIDES= \\"}, {"sha": "490d96c99d857e9b79fa68249fb86873a1b1a00a", "filename": "gcc/c-decl.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -6776,24 +6776,20 @@ c_expand_body (fndecl, nested_p)\n \n   if (DECL_STATIC_CONSTRUCTOR (fndecl))\n     {\n-#ifndef ASM_OUTPUT_CONSTRUCTOR\n-      if (! flag_gnu_linker)\n-\tstatic_ctors = tree_cons (NULL_TREE, fndecl, static_ctors);\n+      if (targetm.have_ctors_dtors)\n+\t(* targetm.asm_out.constructor) (XEXP (DECL_RTL (fndecl), 0),\n+\t\t\t\t         DEFAULT_INIT_PRIORITY);\n       else\n-#endif\n-\tassemble_constructor (XEXP (DECL_RTL (fndecl), 0),\n-\t\t\t      DEFAULT_INIT_PRIORITY);\n+\tstatic_ctors = tree_cons (NULL_TREE, fndecl, static_ctors);\n     }\n \n   if (DECL_STATIC_DESTRUCTOR (fndecl))\n     {\n-#ifndef ASM_OUTPUT_DESTRUCTOR\n-      if (! flag_gnu_linker)\n-\tstatic_dtors = tree_cons (NULL_TREE, fndecl, static_dtors);\n+      if (targetm.have_ctors_dtors)\n+\t(* targetm.asm_out.destructor) (XEXP (DECL_RTL (fndecl), 0),\n+\t\t\t\t        DEFAULT_INIT_PRIORITY);\n       else\n-#endif\n-\tassemble_destructor (XEXP (DECL_RTL (fndecl), 0),\n-\t\t\t     DEFAULT_INIT_PRIORITY);\n+\tstatic_dtors = tree_cons (NULL_TREE, fndecl, static_dtors);\n     }\n \n   if (nested_p)"}, {"sha": "f8fe135dcfb8597e80fb276d880b47404b82df28", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -1,3 +1,8 @@\n+2001-08-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* grant.c (chill_finish_compile): Use target hooks instead of\n+\tassemble_constructor.\n+\n 2001-08-06  Richard Henderson  <rth@redhat.com>\n \n \t* grant.c (chill_finish_compile): Pass a symbol_ref and priority"}, {"sha": "806c944b0a969d2fa08a70d08fc73bbb61ae61a3", "filename": "gcc/ch/grant.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fch%2Fgrant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fch%2Fgrant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fgrant.c?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -31,6 +31,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tasking.h\"\n #include \"toplev.h\"\n #include \"output.h\"\n+#include \"target.h\"\n \n #define APPEND(X,Y) X = append (X, Y)\n #define PREPEND(X,Y) X = prepend (X, Y);\n@@ -3046,12 +3047,9 @@ chill_finish_compile ()\n \n       finish_chill_function ();\n \n-      if (pass == 2)\n-\t{\n-\t  assemble_constructor (XEXP (DECL_RTL (chill_init_function), 0),\n-\t\t\t\tDEFAULT_INIT_PRIORITY);\n-\t  globalize_decl (chill_init_function);\n-\t}\n+      if (pass == 2 && targetm.have_ctors_dtors)\n+\t(* targetm.asm_out.constructor)\n+\t  (XEXP (DECL_RTL (chill_init_function), 0), DEFAULT_INIT_PRIORITY);\n \n       /* ready now to link decls onto this list in pass 2. */\n       module_init_list = NULL_TREE;"}, {"sha": "433e77c5ad06cba03d72a68ea4621b12a77434ee", "filename": "gcc/config.gcc", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -379,7 +379,7 @@ a29k-*-bsd* | a29k-*-sym1*)\n \tuse_collect2=yes\n \t;;\n a29k-*-udi | a29k-*-coff)\n-\ttm_file=\"${tm_file} dbxcoff.h a29k/udi.h\"\n+\ttm_file=\"${tm_file} dbxcoff.h\"\n \ttmake_file=a29k/t-a29kbare\n \t;;\n a29k*-*-rtems*)\n@@ -390,7 +390,7 @@ a29k*-*-rtems*)\n \tfi\n \t;;\n a29k-wrs-vxworks*)\n-\ttm_file=\"${tm_file} dbxcoff.h a29k/udi.h a29k/vx29k.h\"\n+\ttm_file=\"${tm_file} dbxcoff.h a29k/vx29k.h\"\n \ttmake_file=a29k/t-vx29k\n \textra_parts=\"crtbegin.o crtend.o\"\n \tthread_file='vxworks'\n@@ -519,16 +519,16 @@ alpha*-dec-vms*)\n \txm_file=alpha/xm-vms.h\n \ttmake_file=\"alpha/t-alpha alpha/t-vms alpha/t-ieee\"\n \t;;\n+arc-*-elf*)\n+\textra_parts=\"crtinit.o crtfini.o\"\n+\t;;\n arm*-*-rtems*)\n \ttm_file=arm/rtems-elf.h\n \ttmake_file=\"arm/t-arm-elf t-rtems\"\n \tif test x$enable_threads = xyes; then\n \t  thread_file='rtems'\n \tfi\n \t;;\n-arc-*-elf*)\n-\textra_parts=\"crtinit.o crtfini.o\"\n-\t;;\n arm-*-coff* | armel-*-coff*)\n \ttm_file=arm/coff.h\n \ttmake_file=arm/t-arm-coff\n@@ -3378,15 +3378,6 @@ then\n \tfi\n fi\n \n-# No need for collect2 if we have the GNU linker.\n-# Actually, there is now; GNU ld doesn't handle the EH info or\n-# collecting for shared libraries.\n-#case x$gnu_ld in\n-#xyes)\n-#\tuse_collect2=\n-#\t;;\n-#esac\n-\n # Save data on machine being used to compile GCC in build_xm_file.\n # Save data on host machine in vars host_xm_file and host_xmake_file.\n if test x$pass1done = x"}, {"sha": "ac6e7ee6335173062197cfa329df898cb181e8c2", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -1220,14 +1220,6 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n   sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n \n-#define ASM_OUTPUT_CONSTRUCTOR(FILE, NAME)  do {\t\\\n-\tfprintf(FILE, \"\\tinit\\n\\t\"); assemble_name(FILE, NAME); \\\n-        fprintf(FILE,\"  ;constructor\\n\"); } while (0)\n-\n-#define ASM_OUTPUT_DESTRUCTOR(FILE, NAME)  do {\t\\\n-\tfprintf(FILE, \"\\tinit\\n\\t\"); assemble_name(FILE, NAME); \\\n-        fprintf(FILE,\"  ;destructor\\n\"); } while (0)\n-\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null."}, {"sha": "8d816b24f4cd5387f3b04ebf39399d41a7d44ef6", "filename": "gcc/config/a29k/a29k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fa29k%2Fa29k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fa29k%2Fa29k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.c?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -24,6 +24,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"system.h\"\n #include \"rtl.h\"\n+#include \"tree.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n #include \"real.h\"\n@@ -36,7 +37,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"expr.h\"\n #include \"obstack.h\"\n-#include \"tree.h\"\n #include \"reload.h\"\n #include \"tm_p.h\"\n #include \"target.h\""}, {"sha": "1b35bb2ea8fa885570094bb4000b1ae4e2c8b8cf", "filename": "gcc/config/a29k/udi.h", "status": "removed", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8d8b8922a034dfac5cff9d5fa781dc57c49ed0/gcc%2Fconfig%2Fa29k%2Fudi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8d8b8922a034dfac5cff9d5fa781dc57c49ed0/gcc%2Fconfig%2Fa29k%2Fudi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fudi.h?ref=ef8d8b8922a034dfac5cff9d5fa781dc57c49ed0", "patch": "@@ -1,94 +0,0 @@\n-/* Definitions of target machine for GNU compiler, for AMD Am29000 CPU\n-   running over UDI using COFF.\n-   Copyright (C) 1994, 1996, 2000 Free Software Foundation, Inc.\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-/* Support the ctors and dtors sections for g++.  */\n-\n-#define CTORS_SECTION_ASM_OP\t\"\\t.use .ctors\"\n-#define DTORS_SECTION_ASM_OP\t\"\\t.use .dtors\"\n-\n-/* A list of other sections which the compiler might be \"in\" at any\n-   given time.  */\n-\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS readonly_data, in_ctors, in_dtors\n-\n-/* A list of extra section function definitions.  */\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  READONLY_DATA_FUNCTION\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\n-\n-#define READONLY_DATA_FUNCTION\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-literal_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != readonly_data)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", READONLY_DATA_SECTION_ASM_OP); \\\n-      in_section = readonly_data;\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\\\n-\n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define INT_ASM_OP \"\\t.word\\t\"\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)"}, {"sha": "b396c865f8e13c97c1ac0375565d138fd778fb26", "filename": "gcc/config/alpha/alpha-interix.h", "status": "modified", "additions": 2, "deletions": 46, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Falpha%2Falpha-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Falpha%2Falpha-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-interix.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -100,17 +100,15 @@ Boston, MA 02111-1307, USA.  */\n    includes this file.  */\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_ctors, in_dtors\n+#define EXTRA_SECTIONS in_const\n \n /* A default list of extra section function definitions.  For targets\n    that use additional sections (e.g. .tdesc) you should override this\n    definition in the target-specific file which includes this file.  */\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\n+  CONST_SECTION_FUNCTION\n \n #undef READONLY_DATA_SECTION\n #define READONLY_DATA_SECTION() const_section ()\n@@ -128,50 +126,8 @@ const_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n #define INT_ASM_OP\t\t\"\\t.long\\t\"\n \n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n /* The linker will take care of this, and having them causes problems with\n    ld -r (specifically -rU). */\n #define CTOR_LISTS_DEFINED_EXTERNALLY 1"}, {"sha": "ef65d72b6debfe50189d31199996810cae72defa", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -152,6 +152,8 @@ static int vms_valid_decl_attribute_p PARAMS ((tree, tree, tree, tree));\n static unsigned int vms_section_type_flags PARAMS ((tree, const char *, int));\n static void vms_asm_named_section PARAMS ((const char *, unsigned int,\n \t\t\t\t\t   unsigned int));\n+static void vms_asm_out_constructor PARAMS ((rtx, int));\n+static void vms_asm_out_destructor PARAMS ((rtx, int));\n # undef TARGET_VALID_DECL_ATTRIBUTE\n # define TARGET_VALID_DECL_ATTRIBUTE vms_valid_decl_attribute_p\n # undef TARGET_SECTION_TYPE_FLAGS\n@@ -6585,6 +6587,31 @@ vms_asm_named_section (name, flags, align)\n     ASM_OUTPUT_ALIGN (asm_out_file, 0);\n }\n \n+/* Record an element in the table of global constructors.  SYMBOL is\n+   a SYMBOL_REF of the function to be called; PRIORITY is a number\n+   between 0 and MAX_INIT_PRIORITY.  \n+\n+   Differs from default_ctors_section_asm_out_constructor in that the\n+   width of the .ctors entry is always 64 bits, rather than the 32 bits\n+   used by a normal pointer.  */\n+\n+static void\n+vms_asm_out_constructor (symbol, priority)\n+     rtx symbol;\n+     int priority ATTRIBUTE_UNUSED;\n+{\n+  ctors_section ();\n+  assemble_integer (symbol, UNITS_PER_WORD, 1);\n+}\n+\n+static void\n+vms_asm_out_destructor (symbol, priority)\n+     rtx symbol;\n+     int priority ATTRIBUTE_UNUSED;\n+{\n+  dtors_section ();\n+  assemble_integer (symbol, UNITS_PER_WORD, 1);\n+}\n #else\n \n rtx"}, {"sha": "c8e7667da82d0b460bb88dba29b9354cf1b7be1a", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 1, "deletions": 46, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -202,27 +202,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef  CONST_SECTION_ASM_OP\n #define CONST_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n \n-/* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n-\n-   Note that we want to give these sections the SHF_WRITE attribute\n-   because these sections will actually contain data (i.e. tables of\n-   addresses of functions in the current root executable or shared library\n-   file) and, in the case of a shared library, the relocatable addresses\n-   will have to be properly resolved/relocated (and then written into) by\n-   the dynamic linker when it actually attaches the given shared library\n-   to the executing process.  (Note that on SVR4, you may wish to use the\n-   `-z text' option to the ELF linker, when building a shared library, as\n-   an additional check that you are doing everything right.  But if you do\n-   use the `-z text' option when building a shared library, you will get\n-   errors unless the .ctors and .dtors sections are marked as writable\n-   via the SHF_WRITE attribute.)  */\n-\n-#undef  CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"aw\\\"\"\n-#undef  DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"aw\\\"\"\n-\n-/* Handle the small data sections.  */\n #undef  BSS_SECTION_ASM_OP\n #define BSS_SECTION_ASM_OP\t\"\\t.section\\t.bss\"\n #undef  SBSS_SECTION_ASM_OP\n@@ -247,7 +226,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    includes this file.  */\n \n #undef  EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_ctors, in_dtors, in_sbss, in_sdata\n+#define EXTRA_SECTIONS in_const, in_sbss, in_sdata\n \n /* A default list of extra section function definitions.  For targets\n    that use additional sections (e.g. .tdesc) you should override this\n@@ -256,8 +235,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef  EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n   CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  SECTION_FUNCTION_TEMPLATE(ctors_section, in_ctors, CTORS_SECTION_ASM_OP) \\\n-  SECTION_FUNCTION_TEMPLATE(dtors_section, in_dtors, DTORS_SECTION_ASM_OP) \\\n   SECTION_FUNCTION_TEMPLATE(sbss_section, in_sbss, SBSS_SECTION_ASM_OP)\t\\\n   SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP)\n \n@@ -297,28 +274,6 @@ void FN ()\t\t\t\t\t\\\n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#undef  ASM_OUTPUT_CONSTRUCTOR\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE, NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#undef  ASM_OUTPUT_DESTRUCTOR\n-#define ASM_OUTPUT_DESTRUCTOR(FILE, NAME)      \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n /* A C statement or statements to switch to the appropriate\n    section for output of DECL.  DECL is either a `VAR_DECL' node\n    or a constant of some sort.  RELOC indicates whether forming"}, {"sha": "506223cb85480f4c8231aadc7fa15f7e0d60a8a1", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 4, "deletions": 40, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -253,7 +253,7 @@ typedef struct {int num_args; enum avms_arg_type atypes[6];} avms_arg_info;\n #define DTORS_SECTION_ASM_OP \"\\t.dtors\"\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS\tin_link, in_rdata, in_literals, in_ctors, in_dtors\n+#define EXTRA_SECTIONS\tin_link, in_rdata, in_literals\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n@@ -283,31 +283,11 @@ literals_section ()\t\t\t\t\t\t\\\n       fprintf (asm_out_file, \"%s\\n\", LITERALS_SECTION_ASM_OP); \t\\\n       in_section = in_literals;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\\\n-      in_section = in_ctors;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\\\n-      in_section = in_dtors;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n }\n \n extern void readonly_section\tPARAMS ((void));\n extern void link_section\tPARAMS ((void));\n extern void literals_section\tPARAMS ((void));\n-extern void ctors_section\tPARAMS ((void));\n-extern void dtors_section\tPARAMS ((void));\n \n #undef ASM_OUTPUT_ADDR_DIFF_ELT\n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) abort ()\n@@ -373,25 +353,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \\\n   alpha_initialize_trampoline (TRAMP, FNADDR, CXT, 16, 24, -1)\n \n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    ctors_section ();\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.quad \"); \t\t\t\\\n-    assemble_name (FILE, NAME); \t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.\t*/\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    dtors_section ();\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.quad \"); \t\t\t\\\n-    assemble_name (FILE, NAME); \t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\\\n-  } while (0)\n+/* Control how constructors and destructors are emitted.  */\n+#define TARGET_ASM_CONSTRUCTOR  vms_asm_out_constructor\n+#define TARGET_ASM_DESTRUCTOR   vms_asm_out_destructor\n \n #undef SDB_DEBUGGING_INFO\n #undef MIPS_DEBUGGING_INFO"}, {"sha": "07507a1d4dd02ceb806e99f676bd1e948aeecd25", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -1373,28 +1373,6 @@ do {\t\t\t\t\t\t\\\n    that we use).  */\n #define SET_ASM_OP \"\\t.set\\t\"\n \n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#undef ASM_OUTPUT_CONSTRUCTOR\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE, NAME) \\\n-do {\t\t\t\t\t\\\n-  ctors_section ();\t\t\t\\\n-  fprintf (FILE, \"\\t.word\\t%%st(\");\t\\\n-  assemble_name (FILE, NAME);\t\t\\\n-  fprintf (FILE, \")\\n\");\t\t\\\n-} while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#undef ASM_OUTPUT_DESTRUCTOR\n-#define ASM_OUTPUT_DESTRUCTOR(FILE, NAME) \\\n-do {\t\t\t\t\t\\\n-  dtors_section ();\t\t\t\\\n-  fprintf (FILE, \"\\t.word\\t%%st(\");\t\\\n-  assemble_name (FILE, NAME);\t\t\\\n-  fprintf (FILE, \")\\n\");\t\t\\\n-} while (0)\n-\n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */\n #define REGISTER_NAMES \\"}, {"sha": "2721b8bbdebe760323ea67feb035d59a1674976c", "filename": "gcc/config/arm/aof.h", "status": "modified", "additions": 1, "deletions": 57, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Farm%2Faof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Farm%2Faof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faof.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -60,12 +60,10 @@ char *aof_text_section ();\n char *aof_data_section ();\n #define DATA_SECTION_ASM_OP aof_data_section ()\n \n-#define EXTRA_SECTIONS in_zero_init, in_ctor, in_dtor, in_common\n+#define EXTRA_SECTIONS in_zero_init, in_common\n \n #define EXTRA_SECTION_FUNCTIONS\t\\\n ZERO_INIT_SECTION\t\t\\\n-CTOR_SECTION\t\t\t\\\n-DTOR_SECTION\t\t\t\\\n COMMON_SECTION\n \n #define ZERO_INIT_SECTION\t\t\t\t\t\\\n@@ -81,44 +79,6 @@ zero_init_section ()\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n \n-#define CTOR_SECTION\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctor_section ()\t\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  static int ctors_once = 0;\t\t\t\t\t\t\\\n-  if (in_section != in_ctor)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (ctors_once)\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  fprintf (stderr,\t\t\t\t\t\t\\\n-\t\t   \"Attempt to output more than one ctor section\\n\");\t\\\n-\t  abort ();\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctor;\t\t\t\t\t\t\\\n-      ctors_once = 1;\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTOR_SECTION\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtor_section ()\t\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  static int dtors_once = 0;\t\t\t\t\t\t\\\n-  if (in_section != in_dtor)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (dtors_once)\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  fprintf (stderr,\t\t\t\t\t\t\\\n-\t\t   \"Attempt to output more than one dtor section\\n\");\t\\\n-\t  abort ();\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtor;\t\t\t\t\t\t\\\n-      dtors_once = 1;\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n /* Used by ASM_OUTPUT_COMMON (below) to tell varasm.c that we've\n    changed areas.  */\n #define COMMON_SECTION\t\t\t\t\t\t\\\n@@ -364,22 +324,6 @@ do {\t\t\t\t\t\\\n #define CTORS_SECTION_ASM_OP \"\\tAREA\\t|C$$gnu_ctorsvec|, DATA, READONLY\"\n #define DTORS_SECTION_ASM_OP \"\\tAREA\\t|C$$gnu_dtorsvec|, DATA, READONLY\"\n \n-#define ASM_OUTPUT_CONSTRUCTOR(STREAM,NAME)\t\\\n-do {\t\t\t\t\t\t\\\n-  ctor_section ();\t\t\t\t\\\n-  fprintf ((STREAM), \"\\tDCD\\t\");\t\t\\\n-  assemble_name ((STREAM), (NAME));\t\t\\\n-  fputc ('\\n', (STREAM));\t\t\t\\\n-} while (0);\n-\n-#define ASM_OUTPUT_DESTRUCTOR(STREAM,NAME)\t\\\n-do {\t\t\t\t\t\t\\\n-  dtor_section ();\t\t\t\t\\\n-  fprintf ((STREAM), \"\\tDCD\\t\");\t\t\\\n-  assemble_name ((STREAM), (NAME));\t\t\\\n-  fputc ('\\n', (STREAM));\t\t\t\\\n-} while (0);\n-\n /* Output of Assembler Instructions */\n \n #define REGISTER_NAMES\t\t\t\\"}, {"sha": "db057b917a3562aa66661e3103e5279c9b403282", "filename": "gcc/config/arm/coff.h", "status": "modified", "additions": 1, "deletions": 51, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Farm%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Farm%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcoff.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -89,7 +89,7 @@ Boston, MA 02111-1307, USA.  */\n    given time.  */\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS SUBTARGET_EXTRA_SECTIONS in_rdata, in_ctors, in_dtors\n+#define EXTRA_SECTIONS SUBTARGET_EXTRA_SECTIONS in_rdata\n \n #define SUBTARGET_EXTRA_SECTIONS\n \n@@ -98,8 +98,6 @@ Boston, MA 02111-1307, USA.  */\n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS \\\n   RDATA_SECTION_FUNCTION\t\\\n-  CTORS_SECTION_FUNCTION\t\\\n-  DTORS_SECTION_FUNCTION\t\\\n   SUBTARGET_EXTRA_SECTION_FUNCTIONS\n \n #define SUBTARGET_EXTRA_SECTION_FUNCTIONS\n@@ -114,59 +112,11 @@ rdata_section ()\t\t\t\t\t\t\\\n       in_section = in_rdata;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n-\n-#define CTORS_SECTION_FUNCTION \\\n-void\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\\\n-      in_section = in_ctors;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTORS_SECTION_FUNCTION \\\n-void\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\\\n-      in_section = in_dtors;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n \f\n /* Support the ctors/dtors sections for g++.  */\n \n #define INT_ASM_OP \"\\t.word\\t\"\n \n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#undef ASM_OUTPUT_CONSTRUCTOR\n-#define ASM_OUTPUT_CONSTRUCTOR(STREAM, NAME)\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      ctors_section ();\t\t\t\t\\\n-      fprintf (STREAM, \"%s\", INT_ASM_OP);\t\\\n-      assemble_name (STREAM, NAME);\t\t\\\n-      fprintf (STREAM, \"\\n\");\t\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#undef ASM_OUTPUT_DESTRUCTOR\n-#define ASM_OUTPUT_DESTRUCTOR(STREAM, NAME)\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      dtors_section ();\t\t\t\t\\\n-      fprintf (STREAM, \"%s\", INT_ASM_OP);\t\\\n-      assemble_name (STREAM, NAME);\t\t\\\n-      fprintf (STREAM, \"\\n\");\t\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n /* __CTOR_LIST__ and __DTOR_LIST__ must be defined by the linker script.  */\n #define CTOR_LISTS_DEFINED_EXTERNALLY\n "}, {"sha": "0c8cd03abb959f9466c8b7aaa3e74c35b52810ff", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 2, "deletions": 82, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -227,38 +227,14 @@ Boston, MA 02111-1307, USA.  */\n   while (0)\n #endif\n \f\n-/* Support the ctors/dtors and other sections.  */\n-\n-/* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n-\n-   Note that we want to give these sections the SHF_WRITE attribute\n-   because these sections will actually contain data (i.e. tables of\n-   addresses of functions in the current root executable or shared library\n-   file) and, in the case of a shared library, the relocatable addresses\n-   will have to be properly resolved/relocated (and then written into) by\n-   the dynamic linker when it actually attaches the given shared library\n-   to the executing process.  (Note that on SVR4, you may wish to use the\n-   `-z text' option to the ELF linker, when building a shared library, as\n-   an additional check that you are doing everything right.  But if you do\n-   use the `-z text' option when building a shared library, you will get\n-   errors unless the .ctors and .dtors sections are marked as writable\n-   via the SHF_WRITE attribute.)  */\n-#ifndef CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"aw\\\"\"\n-#endif\n-     \n-#ifndef DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"aw\\\"\"\n-#endif\n-\n /* A list of other sections which the compiler might be \"in\" at any\n    given time.  */\n #ifndef SUBTARGET_EXTRA_SECTIONS\n #define SUBTARGET_EXTRA_SECTIONS\n #endif\n \n #ifndef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS SUBTARGET_EXTRA_SECTIONS in_ctors, in_dtors\n+#define EXTRA_SECTIONS SUBTARGET_EXTRA_SECTIONS\n #endif\n \n /* A list of extra section function definitions.  */\n@@ -268,35 +244,7 @@ Boston, MA 02111-1307, USA.  */\n \n #ifndef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS \t\t\\\n-  SUBTARGET_EXTRA_SECTION_FUNCTIONS\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\\\n-  DTORS_SECTION_FUNCTION\t\t\t\n-#endif\n-\n-#ifndef CTORS_SECTION_FUNCTION\n-#define CTORS_SECTION_FUNCTION \t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\\\n-      in_section = in_ctors;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-#endif\n-\n-#ifndef DTORS_SECTION_FUNCTION\n-#define DTORS_SECTION_FUNCTION \t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\\\n-      in_section = in_dtors;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n+  SUBTARGET_EXTRA_SECTION_FUNCTIONS\n #endif\n \n /* Switch into a generic section.  */\n@@ -308,34 +256,6 @@ dtors_section ()\t\t\t\t\t\t\\\n #define INT_ASM_OP \t\"\\t.word\\t\"\n #endif\n \n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#ifndef ASM_OUTPUT_CONSTRUCTOR\n-#define ASM_OUTPUT_CONSTRUCTOR(STREAM, NAME)\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      ctors_section ();\t\t\t\t\\\n-      fprintf (STREAM, \"%s\", INT_ASM_OP);\t\\\n-      assemble_name (STREAM, NAME);\t\t\\\n-      fprintf (STREAM, \"\\n\");\t\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-#endif\n-     \n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#ifndef ASM_OUTPUT_DESTRUCTOR\n-#define ASM_OUTPUT_DESTRUCTOR(STREAM, NAME)\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      dtors_section ();\t\t\t\t\\\n-      fprintf (STREAM, \"%s\", INT_ASM_OP);\t\\\n-      assemble_name (STREAM, NAME);\t\t\\\n-      fprintf (STREAM, \"\\n\");\t\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-#endif\n-\n /* This is how we tell the assembler that a symbol is weak.  */\n \n #define ASM_WEAKEN_LABEL(FILE, NAME)\t\t\\"}, {"sha": "add05c7f2ca4b9e8fecf9c4e15a75f7620a5fc25", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -25,8 +25,8 @@ Boston, MA 02111-1307, USA.  */\n /* Some output-actions in c4x.md need these.  */\n #include \"config.h\"\n #include \"system.h\"\n-#include \"toplev.h\"\n #include \"rtl.h\"\n+#include \"tree.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n #include \"basic-block.h\"\n@@ -35,7 +35,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-attr.h\"\n #include \"conditions.h\"\n #include \"output.h\"\n-#include \"tree.h\"\n #include \"function.h\"\n #include \"expr.h\"\n #include \"flags.h\"\n@@ -46,6 +45,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"cpplib.h\"\n #include \"c-lex.h\"\n #include \"c-pragma.h\"\n+#include \"toplev.h\"\n #include \"c4x-protos.h\"\n #include \"target.h\"\n #include \"target-def.h\""}, {"sha": "607bc48b6e8076fc5768ba9e3eb38fccaaf3b7ce", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 2, "deletions": 85, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -1979,48 +1979,14 @@ if (REG_P (OP1) && ! REG_P (OP0))\t\t\t\\\n \n #define FINI_SECTION_ASM_OP  \"\\t.sect\\t\\\".fini\\\"\"\n \n-/* Support const sections and the ctors and dtors sections for g++.\n-   Note that there appears to be two different ways to support const\n-   sections at the moment.  You can either #define the symbol\n-   READONLY_DATA_SECTION (giving it some code which switches to the\n-   readonly data section) or else you can #define the symbols\n-   EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS, SELECT_SECTION, and\n-   SELECT_RTX_SECTION.  We do both here just to be on the safe side.  */\n-\n-/* Define a few machine-specific details of the implementation of\n-   constructors.\n-\n-   The __CTORS_LIST__ goes in the .ctors section.  Define CTOR_LIST_BEGIN\n-   and CTOR_LIST_END to contribute to the .ctors section an instruction to\n-   push a word containing 0 (or some equivalent of that).\n-\n-   Define ASM_OUTPUT_CONSTRUCTOR to push the address of the constructor.  */\n-\n-#define CTORS_SECTION_ASM_OP\t\"\\t.sect\\t\\\".ctors\\\"\"\n-#define DTORS_SECTION_ASM_OP    \"\\t.sect\\t\\\".dtors\\\"\"\n-\n-/* Constructor list on stack is in reverse order.  Go to the end of the\n-   list and go backwards to call constructors in the right order.  */\n-\n-#define DO_GLOBAL_CTORS_BODY\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  extern func_ptr __CTOR_LIST__[];\t\t\t\t\\\n-  func_ptr *p, *beg = __CTOR_LIST__ + 1;\t\t\t\\\n-  for (p = beg; *p ; p++) ;\t\t\t\t\t\\\n-  while (p != beg)\t\t\t\t\t\t\\\n-    (*--p) ();\t\t\t\t\t\t\t\\\n-} while (0)\n-\n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_init, in_fini, in_ctors, in_dtors\n+#define EXTRA_SECTIONS in_const, in_init, in_fini\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n   CONST_SECTION_FUNCTION\t\t\t\t\t\\\n   INIT_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  FINI_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\n+  FINI_SECTION_FUNCTION\n \n #define INIT_SECTION_FUNCTION\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\\\n@@ -2061,58 +2027,9 @@ const_section ()\t\t\t\t\t\t\t\\\n \n #define ASM_STABS_OP \"\\t.stabs\\t\"\n \n-/* The ctors and dtors sections are not normally put into use \n-   by EXTRA_SECTIONS and EXTRA_SECTION_FUNCTIONS as defined in svr3.h,\n-   but it can't hurt to define these macros for whatever systems use them.  */\n-\n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION c4x_asm_named_section\n \n-/* This is machine-dependent because it needs to push something\n-   on the stack.  */\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t.word\\t \");\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"\\t.word\\t \");\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n /* A C statement or statements to switch to the appropriate\n    section for output of DECL.  DECL is either a `VAR_DECL' node\n    or a constant of some sort.  RELOC indicates whether forming"}, {"sha": "d92030d6524ac829d51031a6b1e2a026b1a0b6cf", "filename": "gcc/config/clipper/clipper.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fclipper%2Fclipper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fclipper%2Fclipper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.c?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -42,6 +42,8 @@ Boston, MA 02111-1307, USA.  */\n \n static void clipper_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void clipper_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n+static void clix_asm_out_constructor PARAMS ((rtx, int));\n+static void clix_asm_out_destructor PARAMS ((rtx, int));\n \n extern char regs_ever_live[];\n \n@@ -691,3 +693,23 @@ fp_reg_operand (op, mode)\n \t   GET_MODE_CLASS (GET_MODE (SUBREG_REG (op))) == MODE_FLOAT));\n }\n \n+static void\n+clix_asm_out_constructor (symbol, priority)\n+     rtx symbol;\n+     int priority ATTRIBUTE_UNUSED;\n+{\n+  init_section ();\n+  fputs (\"\\tloada  \", asm_out_file);\n+  assemble_name (asm_out_file, XSTR (symbol, 0));\n+  fputs (\",r0\\n\\tsubq   $8,sp\\n\\tstorw   r0,(sp)\\n\", asm_out_file);\n+}\n+\n+static void\n+clix_asm_out_destructor (symbol, priority)\n+     rtx symbol;\n+     int priority ATTRIBUTE_UNUSED;\n+{\n+  fini_section ();\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+  assemble_integer (const0_rtx, POINTER_SIZE / BITS_PER_UNIT, 1);\n+}"}, {"sha": "bce6979ea4121a3a8aebcbf2ab3185becb4b628d", "filename": "gcc/config/clipper/clix.h", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fclipper%2Fclix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fclipper%2Fclix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclix.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -96,33 +96,16 @@ do {\t\t\t\t\t\t\t\\\n \n #undef CTOR_LIST_END\n \n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n-  do {\t\t\t\t\t\t\\\n-    init_section ();\t\t\t\t\\\n-    fputs (\"\\tloada  \", FILE);\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\\\n-    fputs (\",r0\\n\\tsubq   $8,sp\\n\\tstorw   r0,(sp)\\n\", FILE);\t\\\n-  } while (0)\n-\n-\n /* fini psect is 8 aligned */\n \n #define DTOR_LIST_BEGIN\t\\\n   asm (DTORS_SECTION_ASM_OP);\t\t\t\t\\\n   func_ptr __DTOR_LIST__[2] = { (func_ptr) (-1), 0 };\n \n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-\n-#undef ASM_OUTPUT_DESTRUCTOR\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    fini_section ();                   \t\t\t\t\t\\\n-    fprintf (FILE, \"%s\\t \", ASM_LONG);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \",0\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n+#undef TARGET_ASM_CONSTRUCTOR\n+#define TARGET_ASM_CONSTRUCTOR  clix_asm_out_constructor\n+#undef TARGET_ASM_DESTRUCTOR\n+#define TARGET_ASM_DESTRUCTOR   clix_asm_out_destructor\n \n /* On clix crt1.o first calls init code and then sets environ and a valid\n    chrclass. Unfortunately stdio routines bomb with unset chrclass."}, {"sha": "e39f37c9f8c1be2bfaa0facc67bbf3da26a9c90e", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -4463,29 +4463,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    collecting the lists of constructors and destructors.  */\n #define INVOKE__main\n \n-/* Define this macro as a C statement to output on the stream STREAM the\n-   assembler code to arrange to call the function named NAME at initialization\n-   time.\n-\n-   Assume that NAME is the name of a C function generated automatically by the\n-   compiler.  This function takes no arguments.  Use the function\n-   `assemble_name' to output the name NAME; this performs any system-specific\n-   syntactic transformations such as adding an underscore.\n-\n-   If you don't define this macro, nothing special is output to arrange to call\n-   the function.  This is correct when the function will be called in some\n-   other manner--for example, by means of the `collect2' program, which looks\n-   through the symbol table to find these functions by their names.\n-\n-   Defined in svr4.h.  */\n-/* #define ASM_OUTPUT_CONSTRUCTOR(STREAM, NAME) */\n-\n-/* This is like `ASM_OUTPUT_CONSTRUCTOR' but used for termination functions\n-   rather than initialization functions.\n-\n-   Defined in svr4.h.  */\n-/* #define ASM_OUTPUT_DESTRUCTOR(STREAM, NAME) */\n-\n /* If your system uses `collect2' as the means of processing constructors, then\n    that program normally uses `nm' to scan an object file for constructor\n    functions to be called.  On certain kinds of systems, you can define these"}, {"sha": "f911076cd1876ca004029e7aee7233b590e17808", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -42,6 +42,8 @@ extern rtx machopic_indirect_data_reference PARAMS ((rtx, rtx));\n extern rtx machopic_indirect_call_target PARAMS ((rtx));\n extern rtx machopic_legitimize_pic_address PARAMS ((rtx, enum machine_mode, rtx));\n \n+extern void machopic_asm_out_constructor PARAMS ((rtx, int));\n+extern void machopic_asm_out_destructor PARAMS ((rtx, int));\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE"}, {"sha": "f2bd5bd614a35530ced2f559bc5bccaeb9fffca7", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -1107,3 +1107,33 @@ update_stubs (name)\n \t}\n     }\n }\n+\n+void\n+machopic_asm_out_constructor (symbol, priority)\n+     rtx symbol;\n+     int priority ATTRIBUTE_UNUSED;\n+{\n+  if (flag_pic)\n+    mod_init_section ();\n+  else\n+    constructor_section ();\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+\n+  if (!flag_pic)\n+    fprintf (asm_out_file, \".reference .constructors_used\\n\");\n+}\n+\n+void\n+machopic_asm_out_destructor (symbol, priority)\n+     rtx symbol;\n+     int priority ATTRIBUTE_UNUSED;\n+{\n+  if (flag_pic)\n+    mod_term_section ();\n+  else\n+    destructor_section ();\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+\n+  if (!flag_pic)\n+    fprintf (asm_out_file, \".reference .destructors_used\\n\");\n+}"}, {"sha": "193a523be7a2aef8d2f611a974938662f1a6da52", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -158,33 +158,8 @@ do { text_section ();\t\t\t\t\t\t\t\\\n \n #undef\tINVOKE__main\n \n-#undef\tASM_OUTPUT_CONSTRUCTOR\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)                       \\\n-  do { if (flag_pic)                                            \\\n-\t mod_init_section ();                                   \\\n-       else\t\t\t\t\t\t\t\\\n-\t constructor_section ();\t\t\t\t\\\n-       ASM_OUTPUT_ALIGN (FILE, 1);                              \\\n-       fprintf (FILE, \"\\t.long \");                              \\\n-       assemble_name (FILE, NAME);                              \\\n-       fprintf (FILE, \"\\n\");                                    \\\n-       if (!flag_pic)                                    \t\\\n-\t fprintf (FILE, \".reference .constructors_used\\n\");     \\\n-      } while (0)\n-\n-#undef\tASM_OUTPUT_DESTRUCTOR\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)                        \\\n-  do { if (flag_pic)                                            \\\n-\t mod_term_section ();                                   \\\n-       else\t\t\t\t\t\t\t\\\n-\t destructor_section ();\t\t\t\t\t\\\n-       ASM_OUTPUT_ALIGN (FILE, 1);\t\t\t\t\\\n-       fprintf (FILE, \"\\t.long \");\t\t\t\t\\\n-       assemble_name (FILE, NAME);\t\t\t\t\\\n-       fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n-       if (!flag_pic)                                    \t\\\n-       \tfprintf (FILE, \".reference .destructors_used\\n\");\t\\\n-     } while (0)\n+#define TARGET_ASM_CONSTRUCTOR  machopic_asm_out_constructor\n+#define TARGET_ASM_DESTRUCTOR   machopic_asm_out_destructor\n \n \n /* Don't output a .file directive.  That is only used by the assembler for"}, {"sha": "d813678682e4fc0529fd9cc6428f0a59119456a9", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 3, "deletions": 70, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -225,8 +225,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* This is the pseudo-op used to generate a reference to a specific\n    symbol in some section.  It is only used in machine-specific\n-   configuration files, typically only in ASM_OUTPUT_CONSTRUCTOR and\n-   ASM_OUTPUT_DESTRUCTOR.  This is the same for all known svr4\n+   configuration files.  This is the same for all known svr4\n    assemblers, except those in targets that don't use 32-bit pointers.\n    Those should override INT_ASM_OP.  Yes, the name of the macro is\n    misleading.  */\n@@ -254,24 +253,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define CONST_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n \n-/* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n-\n-   Note that we want to give these sections the SHF_WRITE attribute\n-   because these sections will actually contain data (i.e. tables of\n-   addresses of functions in the current root executable or shared library\n-   file) and, in the case of a shared library, the relocatable addresses\n-   will have to be properly resolved/relocated (and then written into) by\n-   the dynamic linker when it actually attaches the given shared library\n-   to the executing process.  (Note that on SVR4, you may wish to use the\n-   `-z text' option to the ELF linker, when building a shared library, as\n-   an additional check that you are doing everything right.  But if you do\n-   use the `-z text' option when building a shared library, you will get\n-   errors unless the .ctors and .dtors sections are marked as writable\n-   via the SHF_WRITE attribute.)  */\n-\n-#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"aw\\\"\"\n-#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"aw\\\"\"\n-\n /* On svr4, we *do* have support for the .init and .fini sections, and we\n    can put stuff in there to be executed before and after `main'.  We let\n    crtstuff.c and other files know this by defining the following symbols.\n@@ -287,17 +268,15 @@ Boston, MA 02111-1307, USA.  */\n    includes this file.  */\n \n #undef  EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_ctors, in_dtors\n+#define EXTRA_SECTIONS in_const\n \n /* A default list of extra section function definitions.  For targets\n    that use additional sections (e.g. .tdesc) you should override this\n    definition in the target-specific file which includes this file.  */\n \n #undef  EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\\\n-  CONST_SECTION_FUNCTION\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\\\n-  DTORS_SECTION_FUNCTION\n+  CONST_SECTION_FUNCTION\n \n #define READONLY_DATA_SECTION() const_section ()\n \n@@ -314,28 +293,6 @@ const_section ()\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n \n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\\\n-      in_section = in_ctors;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\\\n-      in_section = in_dtors;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n \n #define UNIQUE_SECTION(DECL, RELOC)\t\t\t\t\\\n@@ -377,30 +334,6 @@ dtors_section ()\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n      \n-/* A C statement (sans semicolon) to output an\n-   element in the table of global constructors.  */\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE, NAME)\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      ctors_section ();\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\\\n-      assemble_name (FILE, NAME);\t\t\t\t\\\n-      fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* A C statement (sans semicolon) to output an\n-   element in the table of global destructors.  */\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      dtors_section ();                   \t\t\t\\\n-      fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\\\n-      assemble_name (FILE, NAME);              \t\t\t\\\n-      fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n "}, {"sha": "735a42305a330f2899c49f07af60e69c06fbb9f7", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 2, "deletions": 41, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -1088,34 +1088,11 @@ struct cum_arg\n #define DATA_SECTION_ASM_OP \"\\t.section .data\"\n #define BSS_SECTION_ASM_OP \"\\t.section .bss\"\n #define INIT_SECTION_ASM_OP \"\\t.section .init\"\n-#define CTORS_SECTION_ASM_OP \"\\t.section .ctors\"\n-#define DTORS_SECTION_ASM_OP \"\\t.section .dtors\"\n #define READONLY_DATA_SECTION_ASM_OP \"\\t.section .rodata\"\n \n-#define EXTRA_SECTIONS in_ctors, in_dtors, in_readonly_data\n+#define EXTRA_SECTIONS in_readonly_data\n \n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n readonly_data ()\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n@@ -1126,22 +1103,6 @@ readonly_data ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      ctors_section ();\t\t\t\t\t\\\n-      fprintf (FILE, \"%s_%s\\n\", ASM_WORD_OP, NAME);\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      dtors_section ();\t\t\t       \t\t\\\n-      fprintf (FILE, \"%s_%s\\n\", ASM_WORD_OP, NAME);\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (0)\n-\n #undef DO_GLOBAL_CTORS_BODY\n #define DO_GLOBAL_CTORS_BODY\t\t\t\\\n {\t\t\t\t\t\t\\\n@@ -1156,7 +1117,7 @@ readonly_data ()\t\t\t\t\t\t\t\\\n }\n \n #undef DO_GLOBAL_DTORS_BODY\n-#define DO_GLOBAL_DTORS_BODY                    \\\n+#define DO_GLOBAL_DTORS_BODY\t\t\t\\\n {\t\t\t\t\t\t\\\n   typedef (*pfunc)();\t\t\t\t\\\n   extern pfunc __dtors[];\t\t\t\\"}, {"sha": "f085c4210fe5c8686e38e325f706514b3ba9a8a2", "filename": "gcc/config/i386/aix386.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Faix386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Faix386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Faix386.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -60,10 +60,5 @@ Boston, MA 02111-1307, USA.  */\n   asm (\"pushl $0\")\n #define CTOR_LIST_END CTOR_LIST_BEGIN\n \n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n-  do {\t\t\t\t\t\t\\\n-    init_section ();\t\t\t\t\\\n-    fprintf (FILE, \"\\tpushl $\");\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\\\n-  } while (0)\n+#undef TARGET_ASM_CONSTRUCTOR\n+#define TARGET_ASM_CONSTRUCTOR  ix86_svr3_asm_out_constructor"}, {"sha": "445d333f784a11de6026f9b597d26257ca7f8696", "filename": "gcc/config/i386/aix386ng.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Faix386ng.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Faix386ng.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Faix386ng.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -106,8 +106,8 @@ Boston, MA 02111-1307, USA.  */\n # undef FINI_SECTION_ASM_OP\n # undef CTORS_SECTION_ASM_OP\n # undef DTORS_SECTION_ASM_OP\n-# undef ASM_OUTPUT_CONSTRUCTOR\n-# undef ASM_OUTPUT_DESTRUCTOR\n+# undef TARGET_ASM_CONSTRUCTOR\n+# undef TARGET_ASM_DESTRUCTOR\n # undef DO_GLOBAL_CTORS_BODY\n \n # undef CTOR_LIST_BEGIN"}, {"sha": "71b84684545cb332698e3e32c0bb20a15b144ab9", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 1, "deletions": 45, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -199,39 +199,13 @@ union tree_node;\n \n \f\n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_ctor, in_dtor, in_drectve\n+#define EXTRA_SECTIONS in_drectve\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n-  CTOR_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTOR_SECTION_FUNCTION\t\t\t\t\t\t\\\n   DRECTVE_SECTION_FUNCTION\t\t\t\t\t\\\n   SWITCH_TO_SECTION_FUNCTION\n \n-#define CTOR_SECTION_FUNCTION\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-ctor_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctor)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t.section .ctor\\n\");\t\t\\\n-      in_section = in_ctor;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-void ctor_section PARAMS ((void));\n-\n-#define DTOR_SECTION_FUNCTION\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-dtor_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtor)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t.section .dtor\\n\");\t\t\\\n-      in_section = in_dtor;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-void dtor_section PARAMS ((void));\n-\n #define DRECTVE_SECTION_FUNCTION \\\n void\t\t\t\t\t\t\t\t\t\\\n drectve_section ()\t\t\t\t\t\t\t\\\n@@ -262,29 +236,11 @@ switch_to_section (section, decl) \t\t\t\t\\\n       case in_text: text_section (); break; \t\t\t\\\n       case in_data: data_section (); break; \t\t\t\\\n       case in_named: named_section (decl, NULL, 0); break; \t\\\n-      case in_ctor: ctor_section (); break; \t\t\t\\\n-      case in_dtor: dtor_section (); break; \t\t\t\\\n       case in_drectve: drectve_section (); break; \t\t\\\n       default: abort (); break; \t\t\t\t\\\n     } \t\t\t\t\t\t\t\t\\\n }\n \n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n-  do {\t\t\t\t\t\t\\\n-    ctor_section ();\t\t\t\t\\\n-    fputs (ASM_LONG, FILE);\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\\\n-  } while (0)\n-\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\\\n-  do {\t\t\t\t\t\t\\\n-    dtor_section ();                   \t\t\\\n-    fputs (ASM_LONG, FILE);\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\\\n-  } while (0)\n-\n /* Don't allow flag_pic to propagate since gas may produce invalid code\n    otherwise. */\n "}, {"sha": "0bde4982583faf834b947b41aec28a82e557d30e", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -45,18 +45,10 @@ Boston, MA 02111-1307, USA.  */\n #undef BSS_SECTION_ASM_OP\n #define BSS_SECTION_ASM_OP \"\\t.section\\t.bss\"\n \n-/* Define the name of the .ctor section.  */\n-#undef CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP \"\\t.section .ctor\"\n-\n /* Define the name of the .data section.  */\n #undef DATA_SECTION_ASM_OP\n #define DATA_SECTION_ASM_OP \"\\t.section .data\"\n \n-/* Define the name of the .dtor section.  */\n-#undef DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP \"\\t.section .dtor\"\n-\n /* Define the name of the .ident op.  */\n #undef IDENT_ASM_OP\n #define IDENT_ASM_OP \"\\t.ident\\t\"\n@@ -147,55 +139,9 @@ Boston, MA 02111-1307, USA.  */\n    unless user explicitly requests it.  */\n #undef LOCAL_INCLUDE_DIR\n \n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_ctor, in_dtor\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n-  CTOR_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTOR_SECTION_FUNCTION\n-\n-#define CTOR_SECTION_FUNCTION\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-ctor_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctor)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\\\n-      in_section = in_ctor;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTOR_SECTION_FUNCTION\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-dtor_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtor)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\\\n-      in_section = in_dtor;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n-  do {\t\t\t\t\t\t\\\n-    ctor_section ();\t\t\t\t\\\n-    fputs (ASM_LONG, FILE);\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\\\n-  } while (0)\n-\n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION  default_coff_asm_named_section\n \n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)\t\\\n-  do {\t\t\t\t\t\t\\\n-    dtor_section ();                   \t\t\\\n-    fputs (ASM_LONG, FILE);\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\\\n-  } while (0)\n-\n /* Output at beginning of assembler file.  */\n /* The .file command should always begin the output.  */\n "}, {"sha": "c1ae670e117e4d075fe35fca3556edb9a6821119", "filename": "gcc/config/i386/i386-coff.h", "status": "modified", "additions": 2, "deletions": 60, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Fi386-coff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Fi386-coff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-coff.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -37,65 +37,7 @@ Boston, MA 02111-1307, USA.  */\n #undef PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE SDB_DEBUG\n \n-/* Support the ctors and dtors sections for g++.  */\n-\n-#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"x\\\"\"\n-#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"x\\\"\"\n-\n-/* A list of other sections which the compiler might be \"in\" at any\n-   given time.  */\n-\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_ctors, in_dtors\n-\n-/* A list of extra section function definitions.  */\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\n-\n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION  default_coff_asm_named_section\n \n /* end of i386-coff.h */"}, {"sha": "5b1141066b11c02be5b1d9617826314c2f24888f", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 3, "deletions": 68, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -253,10 +253,7 @@ Boston, MA 02111-1307, USA.  */\n #undef LD_FINI_SWITCH\n \n \n-/* The following are needed for C++, but also needed for profiling */\n-\n-/* Support const sections and the ctors and dtors sections for g++.\n-   Note that there appears to be two different ways to support const\n+/* Note that there appears to be two different ways to support const\n    sections at the moment.  You can either #define the symbol\n    READONLY_DATA_SECTION (giving it some code which switches to the\n    readonly data section) or else you can #define the symbols\n@@ -267,41 +264,21 @@ Boston, MA 02111-1307, USA.  */\n \n #define CONST_SECTION_ASM_OP\t\"\\t.section\\t.rdata,\\\"r\\\"\"\n \n-/* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n-\n-   Note that we want to give these sections the SHF_WRITE attribute\n-   because these sections will actually contain data (i.e. tables of\n-   addresses of functions in the current root executable or shared library\n-   file) and, in the case of a shared library, the relocatable addresses\n-   will have to be properly resolved/relocated (and then written into) by\n-   the dynamic linker when it actually attaches the given shared library\n-   to the executing process.  (Note that on SVR4, you may wish to use the\n-   `-z text' option to the ELF linker, when building a shared library, as\n-   an additional check that you are doing everything right.  But if you do\n-   use the `-z text' option when building a shared library, you will get\n-   errors unless the .ctors and .dtors sections are marked as writable\n-   via the SHF_WRITE attribute.)  */\n-\n-#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"x\\\"\"\n-#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"x\\\"\"\n-\n /* A default list of other sections which we might be \"in\" at any given\n    time.  For targets that use additional sections (e.g. .tdesc) you\n    should override this definition in the target-specific file which\n    includes this file.  */\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_ctors, in_dtors\n+#define EXTRA_SECTIONS in_const\n \n /* A default list of extra section function definitions.  For targets\n    that use additional sections (e.g. .tdesc) you should override this\n    definition in the target-specific file which includes this file.  */\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\n+  CONST_SECTION_FUNCTION\n \n #undef READONLY_DATA_SECTION\n #define READONLY_DATA_SECTION() const_section ()\n@@ -319,53 +296,11 @@ const_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n /* The MS compilers take alignment as a number of bytes, so we do as well */\n #undef ASM_OUTPUT_ALIGN\n #define ASM_OUTPUT_ALIGN(FILE,LOG) \\\n   if ((LOG)!=0) fprintf ((FILE), \"\\t.balign %d\\n\", 1<<(LOG))\n \n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n /* The linker will take care of this, and having them causes problems with\n    ld -r (specifically -rU). */\n #define CTOR_LISTS_DEFINED_EXTERNALLY 1"}, {"sha": "aae281ca4c33557a590a3093caf284f7edb7b5ab", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -608,9 +608,13 @@ static int ix86_save_reg PARAMS ((int, int));\n static void ix86_compute_frame_layout PARAMS ((struct ix86_frame *));\n static int ix86_comp_type_attributes PARAMS ((tree, tree));\n \n+#ifdef DO_GLOBAL_CTORS_BODY\n+static void ix86_svr3_asm_out_constructor PARAMS ((rtx, int));\n+#endif\n #if defined(TARGET_ELF) && defined(TARGET_COFF)\n static void sco_asm_named_section PARAMS ((const char *, unsigned int,\n \t\t\t\t\t   unsigned int));\n+static void sco_asm_out_constructor PARAMS ((rtx, int));\n #endif\n \f\n /* Initialize the GCC target structure.  */\n@@ -10783,6 +10787,19 @@ ix86_memory_move_cost (mode, class, in)\n     }\n }\n \n+#ifdef DO_GLOBAL_CTORS_BODY\n+static void\n+ix86_svr3_asm_out_constructor (symbol, priority)\n+     rtx symbol;\n+     int priority ATTRIBUTE_UNUSED;\n+{\n+  init_section ();\n+  fputs (\"\\tpushl $\", asm_out_file);\n+  assemble_name (asm_out_file, XSTR (symbol, 0));\n+  fputc ('\\n', asm_out_file);\n+}\n+#endif\n+\n #if defined(TARGET_ELF) && defined(TARGET_COFF)\n static void\n sco_asm_named_section (name, flags, align)\n@@ -10795,4 +10812,15 @@ sco_asm_named_section (name, flags, align)\n   else\n     default_coff_asm_named_section (name, flags, align);\n }\n+\n+static void\n+sco_asm_out_constructor (symbol, priority)\n+     rtx symbol;\n+     int priority;\n+{\n+  if (TARGET_ELF)\n+    default_named_section_asm_out_constrctor (symbol, priority);\n+  else\n+    ix86_svr3_asm_out_constructor (symbol, priority);\n+}\n #endif"}, {"sha": "a818427082198ad67486399dfb2235669ac92751", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 4, "deletions": 59, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -390,37 +390,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n   ASM_OUTPUT_INTERNAL_LABEL((FILE),(PREFIX),(NUM));\t\t\t\\\n } while (0)\n \n-\n-#undef ASM_OUTPUT_CONSTRUCTOR\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_ELF) {\t\t\t\t\t\t\t\\\n-     ctors_section ();\t\t\t\t\t\t\t\\\n-     fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-     assemble_name (FILE, NAME);\t\t\t\t\t\\\n-     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } else {\t\t\t\t\t\t\t\t\\\n-    init_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tpushl $\");\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\n\"); }\t\t\t\t\t\t\\\n-  } while (0)\n-\n-#undef ASM_OUTPUT_DESTRUCTOR\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_ELF) {\t\t\t\t\t\t\t\\\n-    dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } else {\t\t\t\t\t\t\t\t\\\n-    fini_section ();                   \t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\"); }\t\t\t\t\t\t\\\n-  } while (0)\n-\n+#undef TARGET_ASM_CONSTRUCTOR\n+#define TARGET_ASM_CONSTRUCTOR sco_asm_out_constructor\n \n #undef ASM_OUTPUT_IDENT\n #define ASM_OUTPUT_IDENT(FILE, NAME) \\\n@@ -508,15 +479,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n   ((TARGET_ELF) ? DWARF2_DEBUG: SDB_DEBUG)\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_init, in_fini, in_ctors, in_dtors\n+#define EXTRA_SECTIONS in_const, in_init, in_fini\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n   CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n   INIT_SECTION_FUNCTION\t\t\t\t\t\t\t\\\n-  FINI_SECTION_FUNCTION\t\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\n+  FINI_SECTION_FUNCTION\n \n #undef CONST_SECTION_FUNCTION\n #define CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n@@ -556,30 +525,6 @@ init_section ()\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#undef CTORS_SECTION_FUNCTION\n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#undef DTORS_SECTION_FUNCTION\n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n #undef SUBTARGET_FRAME_POINTER_REQUIRED\n #define SUBTARGET_FRAME_POINTER_REQUIRED\t\t\t\t\\\n   ((TARGET_ELF) ? 0 : \t\t\t\t\t\t\t\\"}, {"sha": "8733ba7272458d036a19b5d6ed8a301bf2966830", "filename": "gcc/config/i386/svr3gas.h", "status": "modified", "additions": 6, "deletions": 88, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Fsvr3gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Fsvr3gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsvr3gas.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -94,15 +94,6 @@ Boston, MA 02111-1307, USA.  */\n    unless the specific tm.h file turns it on by defining\n    USE_CONST_SECTION as 1.  */\n \n-/* Define a few machine-specific details of the implementation of\n-   constructors.\n-\n-   The __CTORS_LIST__ goes in the .init section.  Define CTOR_LIST_BEGIN\n-   and CTOR_LIST_END to contribute to the .init section an instruction to\n-   push a word containing 0 (or some equivalent of that).\n-\n-   Define ASM_OUTPUT_CONSTRUCTOR to push the address of the constructor.  */\n-\n #define USE_CONST_SECTION\t0\n \n #define INIT_SECTION_ASM_OP     \"\\t.section\\t.init\"\n@@ -113,8 +104,12 @@ Boston, MA 02111-1307, USA.  */\n \n /* CTOR_LIST_BEGIN and CTOR_LIST_END are machine-dependent\n    because they push on the stack.  */\n+/* This is copied from i386/sysv3.h.  */\n \n-#ifdef STACK_GROWS_DOWNWARD\n+#define CTOR_LIST_BEGIN\t\t\t\t\\\n+  asm (INIT_SECTION_ASM_OP);\t\t\t\\\n+  asm (\"pushl $0\")\n+#define CTOR_LIST_END CTOR_LIST_BEGIN\n \n /* Constructor list on stack is in reverse order.  Go to the end of the\n    list and go backwards to call constructors in the right order.  */\n@@ -127,18 +122,6 @@ do {\t\t\t\t\t\t\t\t\\\n     (*--p) ();\t\t\t\t\t\t\t\\\n } while (0)\n \n-#else\n-\n-/* Constructor list on stack is in correct order.  Just call them.  */\n-#define DO_GLOBAL_CTORS_BODY\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  func_ptr *p, *beg = alloca (0);\t\t\t\t\\\n-  for (p = beg; *p; )\t\t\t\t\t\t\\\n-    (*p++) ();\t\t\t\t\t\t\t\\\n-} while (0)\n-\n-#endif /* STACK_GROWS_DOWNWARD */\n-\n /* Add extra sections .rodata, .init and .fini.  */\n \n #undef EXTRA_SECTIONS\n@@ -187,44 +170,7 @@ const_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-/* The ctors and dtors sections are not normally put into use \n-   by EXTRA_SECTIONS and EXTRA_SECTION_FUNCTIONS as defined in svr3.h,\n-   but it can't hurt to define these macros for whatever systems use them.  */\n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-/* This is machine-dependent\n-   because it needs to push something on the stack.  */\n-#undef ASM_OUTPUT_CONSTRUCTOR\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    fini_section ();                   \t\t\t\t\t\\\n-    fputs (ASM_LONG, FILE);\t\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n+#define TARGET_ASM_CONSTRUCTOR  ix86_svr3_asm_out_constructor\n \n /* A C statement or statements to switch to the appropriate\n    section for output of DECL.  DECL is either a `VAR_DECL' node\n@@ -262,31 +208,3 @@ dtors_section ()\t\t\t\t\t\t\t\\\n    go into the const section.  */\n \n #define SELECT_RTX_SECTION(MODE,RTX) const_section()\n-\f\n-/* This is copied from i386/sysv3.h.  */\n-\n-/* Define a few machine-specific details of the implementation of\n-   constructors.\n-\n-   The __CTORS_LIST__ goes in the .init section.  Define CTOR_LIST_BEGIN\n-   and CTOR_LIST_END to contribute to the .init section an instruction to\n-   push a word containing 0 (or some equivalent of that).\n-\n-   ASM_OUTPUT_CONSTRUCTOR should be defined to push the address of the\n-   constructor.  */\n-\n-#undef INIT_SECTION_ASM_OP\n-#define INIT_SECTION_ASM_OP     \"\\t.section .init,\\\"x\\\"\"\n-\n-#define CTOR_LIST_BEGIN\t\t\t\t\\\n-  asm (INIT_SECTION_ASM_OP);\t\t\t\\\n-  asm (\"pushl $0\")\n-#define CTOR_LIST_END CTOR_LIST_BEGIN\n-\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n-  do {\t\t\t\t\t\t\\\n-    init_section ();\t\t\t\t\\\n-    fprintf (FILE, \"\\tpushl $\");\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\\\n-  } while (0)"}, {"sha": "8eb4bec8db227330974db12cce444349b8904ee8", "filename": "gcc/config/i386/sysv3.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Fsysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Fsysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv3.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -102,10 +102,7 @@ Boston, MA 02111-1307, USA.  */\n \n    The __CTORS_LIST__ goes in the .init section.  Define CTOR_LIST_BEGIN\n    and CTOR_LIST_END to contribute to the .init section an instruction to\n-   push a word containing 0 (or some equivalent of that).\n-\n-   ASM_OUTPUT_CONSTRUCTOR should be defined to push the address of the\n-   constructor.  */\n+   push a word containing 0 (or some equivalent of that).  */\n \n #undef INIT_SECTION_ASM_OP\n #define INIT_SECTION_ASM_OP     \"\\t.section .init,\\\"x\\\"\"\n@@ -115,10 +112,4 @@ Boston, MA 02111-1307, USA.  */\n   asm (\"pushl $0\")\n #define CTOR_LIST_END CTOR_LIST_BEGIN\n \n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n-  do {\t\t\t\t\t\t\\\n-    init_section ();\t\t\t\t\\\n-    fprintf (FILE, \"\\tpushl $\");\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\\\n-  } while (0)\n+#define TARGET_ASM_CONSTRUCTOR  ix86_svr3_asm_out_constructor"}, {"sha": "1bb897d727956f33d9912cdb8fd06e4f86856d47", "filename": "gcc/config/i386/vsta.h", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Fvsta.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Fvsta.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fvsta.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -27,51 +27,3 @@ Boston, MA 02111-1307, USA.  */\n #undef CPP_PREDEFINES\n #endif\n #define CPP_PREDEFINES \"-Dunix -DVSTA -Asystem=unix -Asystem=vsta\"\n-\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_ctor, in_dtor\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n-  CTOR_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTOR_SECTION_FUNCTION\n-\n-#define CTOR_SECTION_FUNCTION\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-ctor_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctor)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t.section .ctor\\n\");\t\t\\\n-      in_section = in_ctor;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTOR_SECTION_FUNCTION\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-dtor_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtor)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t.section .dtor\\n\");\t\t\\\n-      in_section = in_dtor;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n-  do {\t\t\t\t\t\t\\\n-    ctor_section ();\t\t\t\t\\\n-    fputs (ASM_LONG, FILE);\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\\\n-  } while (0)\n-\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\\\n-  do {\t\t\t\t\t\t\\\n-    dtor_section ();                   \t\t\\\n-    fputs (ASM_LONG, FILE);\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\\\n-  } while (0)\n-\n-"}, {"sha": "d2ab075f774d9dc3acb4f592bf243b6afdcf2784", "filename": "gcc/config/i386/win32.h", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi386%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwin32.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -103,52 +103,6 @@ Boston, MA 02111-1307, USA. */\n \n #define NEED_ATEXIT 1\n \n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_ctor, in_dtor\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n-  CTOR_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTOR_SECTION_FUNCTION\n-\n-#define CTOR_SECTION_FUNCTION\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-ctor_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctor)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t.section .ctor\\n\");\t\t\\\n-      in_section = in_ctor;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTOR_SECTION_FUNCTION\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-dtor_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtor)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t.section .dtor\\n\");\t\t\\\n-      in_section = in_dtor;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n-  do {\t\t\t\t\t\t\\\n-    ctor_section ();\t\t\t\t\\\n-    fputs (ASM_LONG, FILE);\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\\\n-  } while (0)\n-\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\\\n-  do {\t\t\t\t\t\t\\\n-    dtor_section ();                   \t\t\\\n-    fputs (ASM_LONG, FILE);\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\\\n-  } while (0)\n-\n /* Define this macro if references to a symbol must be treated\n    differently depending on something about the variable or\n    function named by the symbol (such as what section it is in)."}, {"sha": "7f462153a6ce2b8e17a3300b0767635b368f1c13", "filename": "gcc/config/i960/i960-coff.h", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi960%2Fi960-coff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fi960%2Fi960-coff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960-coff.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -41,61 +41,6 @@ Boston, MA 02111-1307, USA.  */\n #define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"x\\\"\"\n #define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"x\\\"\"\n \n-/* A list of other sections which the compiler might be \"in\" at any\n-   given time.  */\n-\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_ctors, in_dtors\n-\n-/* A list of extra section function definitions.  */\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\n-\n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n #define INT_ASM_OP \"\\t.word\\t\"\n \n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n /* end of i960-coff.h */"}, {"sha": "39020722bb5316a36a2ea1b56f4ee46c0ce1f286", "filename": "gcc/config/ia64/sysv4.h", "status": "modified", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fia64%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fia64%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsysv4.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -83,46 +83,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define INIT_SECTION_ASM_OP\t\"\\t.section\\t.init,\\\"ax\\\",\\\"progbits\\\"\"\n #undef FINI_SECTION_ASM_OP\n #define FINI_SECTION_ASM_OP\t\"\\t.section\\t.fini,\\\"ax\\\",\\\"progbits\\\"\"\n-#undef CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"aw\\\",\\\"progbits\\\"\"\n-#undef DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"aw\\\",\\\"progbits\\\"\"\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-/* Must override this to get @fptr relocation.  */\n-#undef ASM_OUTPUT_CONSTRUCTOR\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    ctors_section ();\t\t\t\t\t\t\t\\\n-    if (TARGET_NO_PIC || TARGET_AUTO_PIC)\t\t\t\t\\\n-      fputs (\"\\tdata8\\t \", FILE);\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      fputs (\"\\tdata8\\t @fptr(\", FILE);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    if (TARGET_NO_PIC || TARGET_AUTO_PIC)\t\t\t\t\\\n-      fputs (\"\\n\", FILE);\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      fputs (\")\\n\", FILE);\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-/* Must override this to get @fptr relocation.  */\n-#undef ASM_OUTPUT_DESTRUCTOR\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    dtors_section ();                   \t\t\t\t\\\n-    if (TARGET_NO_PIC || TARGET_AUTO_PIC)\t\t\t\t\\\n-      fputs (\"\\tdata8\\t \", FILE);\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      fputs (\"\\tdata8\\t @fptr(\", FILE);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    if (TARGET_NO_PIC || TARGET_AUTO_PIC)\t\t\t\t\\\n-      fputs (\"\\n\", FILE);\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      fputs (\")\\n\", FILE);\t\t\t\t\t\t\\\n-  } while (0)\n \n /* svr4.h undefines this, so we need to define it here.  */\n #define DBX_REGISTER_NUMBER(REGNO) \\\n@@ -238,13 +198,11 @@ extern unsigned int ia64_section_threshold;\n }\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_ctors, in_dtors, in_sdata, in_sbss\n+#define EXTRA_SECTIONS in_const, in_sdata, in_sbss\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n   CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n   SDATA_SECTION_FUNCTION\t\t\t\t\t\t\\\n   SBSS_SECTION_FUNCTION\n "}, {"sha": "a0594d8a25e8db56e74cfd46f4ec010801920d72", "filename": "gcc/config/lynx.h", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flynx.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -128,13 +128,11 @@ do {\t\t\t\t\t\t\t\t\\\n #undef INIT_SECTION_ASM_OP\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_ctors, in_dtors, in_fini\n+#define EXTRA_SECTIONS in_const, in_fini\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n   CONST_SECTION_FUNCTION\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\t\t\t\t\t\\\n   FINI_SECTION_FUNCTION\n \n #undef CTORS_SECTION_ASM_OP\n@@ -144,28 +142,6 @@ do {\t\t\t\t\t\t\t\t\\\n \n #define INT_ASM_OP\t\t\"\\t.long\\t\"\n \n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#undef ASM_OUTPUT_CONSTRUCTOR\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#undef ASM_OUTPUT_DESTRUCTOR\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n #undef DO_GLOBAL_CTORS_BODY\n #undef DO_GLOBAL_DTORS_BODY\n "}, {"sha": "04516fe4c1535dc1ea28c8fe7097a2ea3fb20b6a", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -74,6 +74,8 @@ static void m68hc11_add_gc_roots PARAMS ((void));\n \n static void asm_print_register PARAMS ((FILE *, int));\n static void m68hc11_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n+static void m68hc11_asm_out_constructor PARAMS ((rtx, int));\n+static void m68hc11_asm_out_destructor PARAMS ((rtx, int));\n \n rtx m68hc11_soft_tmp_reg;\n \n@@ -5254,3 +5256,21 @@ m68hc11_add_gc_roots ()\n   ggc_add_rtx_root (&stack_push_word, 1);\n   ggc_add_rtx_root (&stack_pop_word, 1);\n }\n+\n+static void\n+m68hc11_asm_out_constructor (symbol, priority)\n+     rtx symbol;\n+     int priority;\n+{\n+  default_ctor_section_asm_out_constructor (symbol, priority);\n+  fprintf (asm_out_file, \"\\t.globl\\t__do_global_ctors\\n\");\n+}\n+\n+static void\n+m68hc11_asm_out_destructor (symbol, priority)\n+     rtx symbol;\n+     int priority;\n+{\n+  default_dtor_section_asm_out_destructor (symbol, priority);\n+  fprintf (asm_out_file, \"\\t.globl\\t__do_global_dtors\\n\");\n+}"}, {"sha": "5697a6a3c8ba86f8933f0254fd31ffed2f1187c8", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -1582,8 +1582,7 @@ do {                                                                    \\\n \n /* This is the pseudo-op used to generate a reference to a specific\n    symbol in some section.  It is only used in machine-specific\n-   configuration files, typically only in ASM_OUTPUT_CONSTRUCTOR and\n-   ASM_OUTPUT_DESTRUCTOR.  This is the same for all known svr4\n+   configuration files.  This is the same for all known svr4\n    assemblers, except those in targets that don't use 32-bit pointers.\n    Those should override INT_ASM_OP.  Yes, the name of the macro is\n    misleading.  */\n@@ -1600,31 +1599,8 @@ do {                                                                    \\\n #undef DTORS_SECTION_ASM_OP\n #define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"a\\\"\"\n \n-#undef CTORS_SECTION_FUNCTION\n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t.globl\\t__do_global_ctors\\n\");\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\\\n-      in_section = in_ctors;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n-#undef DTORS_SECTION_FUNCTION\n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t.globl\\t__do_global_dtors\\n\");\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\\\n-      in_section = in_dtors;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n+#define TARGET_ASM_CONSTRUCTOR  m68hc11_asm_out_constructor\n+#define TARGET_ASM_DESTRUCTOR   m68hc11_asm_out_destructor\n \n /* This is how to begin an assembly language file.  Most svr4 assemblers want\n    at least a .file directive to come first, and some want to see a .version"}, {"sha": "28d9f9e65ca168b3a536ca1b2bb1a622f31c4515", "filename": "gcc/config/m68k/auxgas.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm68k%2Fauxgas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm68k%2Fauxgas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fauxgas.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -32,8 +32,6 @@ Boston, MA 02111-1307, USA.  */\n   fprintf (FILE, \"\\t.ident \\\"%s\\\"\\n\", NAME);\n \n #ifdef USE_COLLECT2\n-#undef ASM_OUTPUT_CONSTRUCTOR\n-#undef ASM_OUTPUT_DESTRUCTOR\n /* for the sake of link-level compatibility with /bin/as version */\n #define NO_DOLLAR_IN_LABEL\n #define NO_DOT_IN_LABEL"}, {"sha": "946f1967e7f2f8f65a3720b376bef92acc4f15d8", "filename": "gcc/config/m68k/coff.h", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm68k%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm68k%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fcoff.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -104,68 +104,8 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION  m68k_coff_asm_named_section\n \n-/* Support the ctors and dtors sections for g++.  */\n-\n-#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"x\\\"\"\n-#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"x\\\"\"\n-\n-/* A list of other sections which the compiler might be \"in\" at any\n-   given time.  */\n-\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_ctors, in_dtors\n-\n-/* A list of extra section function definitions.  */\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\n-\n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n #define INT_ASM_OP \"\\t.long\\t\"\n \n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n /* Don't assume anything about startfiles.  */\n \n #undef STARTFILE_SPEC"}, {"sha": "bb1c4987e2bfeeef484313bd919f25a8a776191c", "filename": "gcc/config/m68k/dpx2.h", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm68k%2Fdpx2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm68k%2Fdpx2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fdpx2.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -31,6 +31,21 @@ Boston, MA 02111-1307, USA.  */\n #undef SELECT_RTX_SECTION\n #include \"svr3.h\"\n \n+/* We use collect2 instead of ctors_section constructors.  */\n+#undef INIT_SECTION_ASM_OP\n+#undef FINI_SECTION_ASM_OP\n+#undef DTORS_SECTION_ASM_OP\n+#undef DO_GLOBAL_CTORS_BODY\n+\n+/* Remove handling for a separate constant data section.  We put\n+   constant data in text_section, which is the default.  */\n+#undef SELECT_SECTION\n+#undef SELECT_RTX_SECTION\n+#undef EXTRA_SECTIONS\n+#undef EXTRA_SECTION_FUNCTIONS\n+#undef CONST_SECTION_ASM_OP\n+#undef READONLY_DATA_SECTION\n+\n #define DPX2\n \n /* See m68k.h.  7 means 68020 with 68881.\n@@ -84,24 +99,11 @@ Boston, MA 02111-1307, USA.  */\n /* The native assembler doesn't support fmovecr.  */\n #define NO_ASM_FMOVECR\n \n-#undef EXTRA_SECTIONS\n-#undef EXTRA_SECTION_FUNCTIONS\n-#undef READONLY_DATA_SECTION\n-#define READONLY_DATA_SECTION data_section\n-#undef SELECT_SECTION\n-#undef SELECT_RTX_SECTION\n-#define fini_section() while (0)\n-\n-#undef CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP \"\\tsection 15\"\n-#undef DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP \"\\tsection 15\"\n-#undef INIT_SECTION_ASM_OP\n-#define BSS_SECTION_ASM_OP     \"\\tsection 14\"\n #undef TEXT_SECTION_ASM_OP\n-#define TEXT_SECTION_ASM_OP    \"\\tsection 10\"\n+#define TEXT_SECTION_ASM_OP\t\"\\tsection 10\"\n #undef DATA_SECTION_ASM_OP\n-#define DATA_SECTION_ASM_OP  \"\\tsection 15\"\n+#define DATA_SECTION_ASM_OP\t\"\\tsection 15\"\n+#define BSS_SECTION_ASM_OP\t\"\\tsection 14\"\n \n \n /* Don't try using XFmode.  */"}, {"sha": "ecf00fc75a1529b812c5c049d2289fccc1da5019", "filename": "gcc/config/m68k/dpx2g.h", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm68k%2Fdpx2g.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm68k%2Fdpx2g.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fdpx2g.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -5,49 +5,11 @@\n #define USE_GAS\n #include \"m68k/dpx2.h\"\n \n-#if 0 /* #ifndef USE_COLLECT2 */\n-\n-/* We use set vectors for the constructors/destructors. */ \n-\n-#undef ASM_OUTPUT_CONSTRUCTOR\n-#undef ASM_OUTPUT_DESTRUCTOR\n-\n-/* Although the gas we use can create .ctor and .dtor sections from N_SETT\n-   stabs, it does not support section directives, so we need to have the loader\n-   define the lists.\n- */\n-#define CTOR_LISTS_DEFINED_EXTERNALLY\n-\n-/* similar to default, but allows for the table defined by ld with gcc.ifile. \n-   nptrs is always 0.  So we need to instead check that __DTOR_LIST__[1] != 0.\n-   The old check is left in so that the same macro can be used if and when  \n-   a future version of gas does support section directives. */\n-\n-#define DO_GLOBAL_DTORS_BODY {int nptrs = *(int *)__DTOR_LIST__; int i; \\\n-  if (nptrs == -1 || (__DTOR_LIST__[0] == 0 && __DTOR_LIST__[1] != 0))  \\\n-    for (nptrs = 0; __DTOR_LIST__[nptrs + 1] != 0; nptrs++); \t\t\\\n-  for (i = nptrs; i >= 1; i--)\t\t\t\t\t\t\\\n-    __DTOR_LIST__[i] (); }\n-\n-#undef STARTFILE_SPEC\n-#define STARTFILE_SPEC \\\n-  \"%{!r:gcc.ifile%s}\\\n-   %{pg:gcrt0.o%s}%{!pg:%{p:mcrt0.o%s}%{!p:crt0.o%s}}\\\n-  huge.o%s\"\n-\n-#endif /* !USE_COLLECT2 */\n-\n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \\\n   \"%{pg:gcrt0.o%s}%{!pg:%{p:mcrt0.o%s}%{!p:crt0.o%s}}\\\n   huge.o%s\"\n \n-\n-/*\n- * we are using GAS\n- */\n-#undef EXTRA_SECTION_FUNCTIONS\n-#undef EXTRA_SECTIONS\n /* Gas understands dollars in labels. */\n #undef NO_DOLLAR_IN_LABEL\n /* GAS does not understand .ident so don't output anything for #ident.  */\n@@ -56,16 +18,4 @@\n #undef ASM_LONG\n #define ASM_LONG \"\\t.long\"\n \n-/*\n- * put const's in the text section\n- */\n-#define const_section()  text_section()\n-#define fini_section() while (0)\n-\t\t\t       \n-#undef CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP \"\\t.data\"\n-#undef DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP \"\\t.data\"\n-#undef INIT_SECTION_ASM_OP\n-\n /* end of dpx2g.h */"}, {"sha": "b03c29ef09add2f670d580bf5e7a403aa17f12fb", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -38,6 +38,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n+#include \"debug.h\"\n \n /* Needed for use_return_insn.  */\n #include \"flags.h\"\n@@ -62,6 +63,9 @@ static void m68k_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void m68k_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void m68k_coff_asm_named_section PARAMS ((const char *, unsigned int,\n \t\t\t\t\t\t unsigned int));\n+#ifdef INIT_SECTION_ASM_OP\n+static void m68k_svr3_asm_out_constructor PARAMS ((rtx, int));\n+#endif\n \f\n \n /* Alignment to use for loops and jumps */\n@@ -4228,3 +4232,19 @@ m68k_coff_asm_named_section (name, flags, align)\n \n   fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%c\\\"\\n\", name, flagchar);\n }\n+\n+#ifdef INIT_SECTION_ASM_OP\n+static void\n+m68k_svr3_asm_out_constructor (symbol, priority)\n+     rtx symbol;\n+     int priority ATTRIBUTE_UNUSED;\n+{\n+  rtx xop[2];\n+\n+  xop[1] = symbol;\n+  xop[0] = gen_rtx_MEM (SImode, gen_rtx_PRE_DEC (SImode, stack_pointer_rtx));\n+\n+  init_section ();\n+  output_asm_insn (output_move_simode (xop), xop);\n+}\n+#endif"}, {"sha": "5cfe659740abba4dcbc554d77c99e630f4abe3b5", "filename": "gcc/config/m68k/mot3300.h", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fmot3300.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -196,61 +196,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"x\\\"\"\n #define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"x\\\"\"\n-\n-/* A list of other sections which the compiler might be \"in\" at any\n-   given time.  */\n-\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_ctors, in_dtors\n-\n-/* A list of extra section function definitions.  */\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\n-\n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", ASM_LONG);\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", ASM_LONG);\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n #endif /* defined (USE_GLD) */\n \n /* The file command should always begin the output.  */"}, {"sha": "46797384893e207903ef920e0648cfd9d6730246", "filename": "gcc/config/m68k/tower-as.h", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ftower-as.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -82,8 +82,8 @@ Boston, MA 02111-1307, USA.  */\n \n #define ASM_OUTPUT_SOURCE_LINE(FILE, LINENO)\t\\\n   fprintf (FILE, \"\\tln\\t%d\\n\",\t\t\t\\\n-\t   (sdb_begin_function_line\t\t\\\n-\t    ? last_linenum - sdb_begin_function_line : 1))\n+\t   (sdb_begin_function_line > -1\t\\\n+\t    ? (LINENO) - sdb_begin_function_line : 1))\n \n #undef ASM_OUTPUT_IDENT\n #define ASM_OUTPUT_IDENT(FILE, NAME) \\\n@@ -581,10 +581,7 @@ do { fprintf (asm_out_file, \"\\ttag\\t\");\t\\\n \n    The __CTORS_LIST__ goes in the .init section.  Define CTOR_LIST_BEGIN\n    and CTOR_LIST_END to contribute to the .init section an instruction to\n-   push a word containing 0 (or some equivalent of that).\n-\n-   ASM_OUTPUT_CONSTRUCTOR should be defined\n-   to push the address of the constructor.  */\n+   push a word containing 0 (or some equivalent of that).  */\n \n #define ASM_LONG\t\"\\tlong\"\n #undef INIT_SECTION_ASM_OP\n@@ -601,10 +598,4 @@ do { fprintf (asm_out_file, \"\\ttag\\t\");\t\\\n \n #define BSS_SECTION_ASM_OP\t\"\\tsection\\t~bss\"\n \n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\\\n-  do {\t\t\t\t\t\t\\\n-    init_section ();\t\t\t\t\\\n-    fprintf (FILE, \"\\tmov.l &\");\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\\\n-    fprintf (FILE, \",-(%%sp)\\n\");\t\t\\\n-  } while (0)\n+#define TARGET_ASM_CONSTRUCTOR  m68k_svr3_asm_out_constructor"}, {"sha": "f77aa474a7c4a56aeb93720e364f6d77538de728", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -67,6 +67,10 @@ static void m88k_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void m88k_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void m88k_output_function_end_prologue PARAMS ((FILE *));\n static void m88k_output_function_begin_epilogue PARAMS ((FILE *));\n+#ifdef INIT_SECTION_ASM_OP\n+static void m88k_svr3_asm_out_constructor PARAMS ((rtx, int));\n+static void m88k_svr3_asm_out_destructor PARAMS ((rtx, int));\n+#endif\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_FUNCTION_PROLOGUE\n@@ -1891,15 +1895,10 @@ m88k_layout_frame ()\n     int need\n       = ((m88k_stack_size ? STACK_UNIT_BOUNDARY - STARTING_FRAME_OFFSET : 0)\n \t - (frame_size % STACK_UNIT_BOUNDARY));\n-    if (need)\n-      {\n-\tif (need < 0)\n-\t  need += STACK_UNIT_BOUNDARY;\n-\t(void) assign_stack_local (BLKmode, need, BITS_PER_UNIT);\n-\tframe_size = get_frame_size ();\n-      }\n+    if (need < 0)\n+      need += STACK_UNIT_BOUNDARY;\n     m88k_stack_size\n-      = ROUND_CALL_BLOCK_SIZE (m88k_stack_size + frame_size\n+      = ROUND_CALL_BLOCK_SIZE (m88k_stack_size + frame_size + need\n \t\t\t       + current_function_pretend_args_size);\n   }\n }\n@@ -3285,3 +3284,34 @@ symbolic_operand (op, mode)\n       return 0;\n     }\n }\n+\n+#ifdef INIT_SECTION_ASM_OP\n+static void\n+m88k_svr3_asm_out_constructor (symbol, priority)\n+     rtx symbol;\n+     int priority ATTRIBUTE_UNUSED;\n+{\n+  const char *name = XSTR (symbol, 0);\n+\n+  init_section ();\n+  fprintf (asm_out_file, \"\\tor.u\\t r13,r0,hi16(\");\n+  assemble_name (asm_out_file, name);\n+  fprintf (asm_out_file, \")\\n\\tor\\t r13,r13,lo16(\");\n+  assemble_name (asm_out_file, name);\n+  fprintf (asm_out_file, \")\\n\\tsubu\\t r31,r31,%d\\n\\tst\\t r13,r31,%d\\n\",\n+\t   STACK_BOUNDARY / BITS_PER_UNIT, REG_PARM_STACK_SPACE (0));\n+}\n+\n+static void\n+m88k_svr3_asm_out_destructor (symbol, priority)\n+     rtx symbol;\n+     int priority ATTRIBUTE_UNUSED;\n+{\n+  int i;\n+\n+  fini_section ();\n+  assemble_integer (symbol, UNITS_PER_WORD, 1);\n+  for (i = 1; i < 4; i++)\n+    assemble_integer (constm1_rtx, UNITS_PER_WORD, 1);\n+}\n+#endif"}, {"sha": "1f7304c51c784cf4facafc1b12394e067e407b69", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -2438,15 +2438,14 @@ do {\t\t\t\t\t\t\t\t\t \\\n \n #if defined(USING_SVR4_H)\n \n-#define EXTRA_SECTIONS in_const, in_tdesc, in_sdata, in_ctors, in_dtors\n+#define EXTRA_SECTIONS in_const, in_tdesc, in_sdata\n #define INIT_SECTION_FUNCTION\n #define FINI_SECTION_FUNCTION\n \n #else\n #if defined(USING_SVR3_H)\n \n-#define EXTRA_SECTIONS in_const, in_tdesc, in_sdata, in_ctors, in_dtors, \\\n-\t\t       in_init, in_fini\n+#define EXTRA_SECTIONS in_const, in_tdesc, in_sdata, in_init, in_fini\n \n #else /* luna or other not based on svr[34].h.  */\n \n@@ -2458,8 +2457,6 @@ const_section ()\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   text_section();\t\t\t\t\t\t\t\\\n }\n-#define CTORS_SECTION_FUNCTION\n-#define DTORS_SECTION_FUNCTION\n #define INIT_SECTION_FUNCTION\n #define FINI_SECTION_FUNCTION\n \n@@ -2490,8 +2487,6 @@ sdata_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n   INIT_SECTION_FUNCTION\t\t\t\t\t\t\t\\\n   FINI_SECTION_FUNCTION\n "}, {"sha": "bd9f4a1823d65c6b0cf11df70cb4c3318f230bd3", "filename": "gcc/config/m88k/sysv3.h", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm88k%2Fsysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fm88k%2Fsysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fsysv3.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -76,20 +76,8 @@ Boston, MA 02111-1307, USA.  */\n   asm (\"\\tst\\t r0,r31,32\");\t/* REG_PARM_STACK_SPACE (0) == 32 */\n #define CTOR_LIST_END\n \n-/* ASM_OUTPUT_CONSTRUCTOR outputs code into the .init section to push the\n-   address of the constructor.  This becomes the body of __do_global_ctors\n-   in crtstuff.c.  r13 is a temporary register.  */\n-#undef\tASM_OUTPUT_CONSTRUCTOR\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    init_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tor.u\\t r13,r0,hi16(\");\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \")\\n\\tor\\t r13,r13,lo16(\");\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \")\\n\\tsubu\\t r31,r31,%d\\n\\tst\\t r13,r31,%d\\n\",\t\\\n-\t     STACK_BOUNDARY / BITS_PER_UNIT, REG_PARM_STACK_SPACE (0));\t\\\n-  } while (0)\n+#define TARGET_ASM_CONSTRUCTOR  m88k_svr3_asm_out_constructor\n+#define TARGET_ASM_DESTRUCTOR  m88k_svr3_asm_out_destructor\n \n #undef\tDO_GLOBAL_CTORS_BODY\n #define DO_GLOBAL_CTORS_BODY\t\t\t\t\t\t\\\n@@ -108,25 +96,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   func_ptr __DTOR_END__[4] = { (func_ptr) 0, (func_ptr) 0,\t\t\\\n \t\t\t       (func_ptr) 0, (func_ptr) 0 }  \n \n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  The table is constructed in the .fini section\n-   so that an explicit linker script is not required.  The complication\n-   is that this section is padded with NOP instructions and to either\n-   8 or 16 byte alignment depending on the specific system.  A clever\n-   way to avoid trouble is to output a block of 16 bytes where the\n-   extra words are known values (-1).  */\n-#undef\tASM_OUTPUT_DESTRUCTOR\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)\t\\\n-  do {\t\t\t\t\t\t\\\n-    register int i;\t\t\t\t\\\n-    fini_section ();\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", ASM_LONG);\t\\\n-    assemble_name (FILE,NAME);\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\\\n-    for (i = 1; i < 4; i++)\t\t\t\\\n-      fprintf (FILE, \"\\t%s\\t -1\\n\", ASM_LONG);\t\\\n-    } while (0)\n-\n /* Walk the list looking for the terminating zero and ignoring all values of\n    -1.  */\n #undef\tDO_GLOBAL_DTORS_BODY"}, {"sha": "2362b521a18f0a71b007c9ba2477986ab710fc37", "filename": "gcc/config/mcore/mcore-pe.h", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-pe.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -183,43 +183,15 @@ rdata_section ()\t\t\t\t\t\t\\\n #define STARTFILE_SPEC \"crt0.o%s\"\n #define ENDFILE_SPEC  \"%{!mno-lsim:-lsim}\"\n \n-#undef  CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"x\\\"\"\n-#undef  DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"x\\\"\"\n-\n #define INT_ASM_OP \"\\t.long\\t\"\n \n-#undef  ASM_OUTPUT_CONSTRUCTOR\n-#define ASM_OUTPUT_CONSTRUCTOR(STREAM, NAME) \t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      ctors_section ();\t\t\t\t\\\n-      fprintf (STREAM, \"%s\", INT_ASM_OP);\t\\\n-      assemble_name (STREAM, NAME);\t\t\\\n-      fprintf (STREAM, \"\\n\");\t\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#undef  ASM_OUTPUT_DESTRUCTOR\n-#define ASM_OUTPUT_DESTRUCTOR(STREAM, NAME) \t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      dtors_section ();                   \t\\\n-      fprintf (STREAM, \"%s\", INT_ASM_OP);\t\\\n-      assemble_name (STREAM, NAME);             \\\n-      fprintf (STREAM, \"\\n\");\t\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n /* __CTOR_LIST__ and __DTOR_LIST__ must be defined by the linker script.  */\n #define CTOR_LISTS_DEFINED_EXTERNALLY\n \n #undef DO_GLOBAL_CTORS_BODY\n #undef DO_GLOBAL_DTORS_BODY\n #undef INIT_SECTION_ASM_OP\n+#undef DTORS_SECTION_ASM_OP\n \n #define SUPPORTS_ONE_ONLY 1\n "}, {"sha": "5974ab849a9be9fa804ff21ee44898360447f13f", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -1080,39 +1080,13 @@ extern enum reg_class reg_class_from_letter[];\n #define DATA_SECTION_ASM_OP  \"\\t.data\"\n \n #undef  EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_ctors, in_dtors, SUBTARGET_EXTRA_SECTIONS\n+#define EXTRA_SECTIONS SUBTARGET_EXTRA_SECTIONS\n \n #undef  EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\\\n-  DTORS_SECTION_FUNCTION\t\t\t\\\n   SUBTARGET_EXTRA_SECTION_FUNCTIONS\t\t\\\n   SWITCH_SECTION_FUNCTION\n \n-#ifndef CTORS_SECTION_FUNCTION\n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-#endif\n-\n /* Switch to SECTION (an `enum in_section').\n \n    ??? This facility should be provided by GCC proper.\n@@ -1130,8 +1104,6 @@ switch_to_section (section, decl)\t\t\t\t\\\n       case in_text: text_section (); break;\t\t\t\\\n       case in_data: data_section (); break;\t\t\t\\\n       case in_named: named_section (decl, NULL, 0); break;\t\\\n-      case in_ctors: ctors_section (); break;\t\t\t\\\n-      case in_dtors: dtors_section (); break;\t\t\t\\\n       SUBTARGET_SWITCH_SECTIONS      \t\t\t\t\\\n       default: abort (); break;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\"}, {"sha": "aa094b6b8363b10936df4dc1eb0188949158822a", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 2, "deletions": 67, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -200,29 +200,6 @@ do {\t\t\t\t\t\t\t\t\t \\\n #define UNIQUE_SECTION(DECL,RELOC) \\\n   mips_unique_section ((DECL), (RELOC))\n \n-/* Support the ctors/dtors and other sections.  */\n- \n-/* Define the names of and pseudo-ops used to switch to the .ctors and\n-   .dtors sections.\n- \n-   Note that we want to give these sections the SHF_WRITE attribute\n-   because these sections will actually contain data (i.e. tables of\n-   addresses of functions in the current root executable or shared library\n-   file) and, in the case of a shared library, the relocatable addresses\n-   will have to be properly resolved/relocated (and then written into) by\n-   the dynamic linker when it actually attaches the given shared library\n-   to the executing process.  (Note that on SVR4, you may wish to use the\n-   `-z text' option to the ELF linker, when building a shared library, as\n-   an additional check that you are doing everything right.  But if you do\n-   use the `-z text' option when building a shared library, you will get\n-   errors unless the .ctors and .dtors sections are marked as writable\n-   via the SHF_WRITE attribute.)  */\n-\n-#define CTORS_SECTION_NAME      \".ctors\"\n-#define CTORS_SECTION_ASM_OP    \"\\t.section\\t.ctors,\\\"aw\\\"\"\n-#define DTORS_SECTION_NAME      \".dtors\"\n-#define DTORS_SECTION_ASM_OP    \"\\t.section\\t.dtors,\\\"aw\\\"\"\n- \n /* There's no point providing a default definition of __CTOR_LIST__\n    since people are expected either to use crtbegin.o, or an equivalent,\n    or provide their own definition.  */\n@@ -231,17 +208,15 @@ do {\t\t\t\t\t\t\t\t\t \\\n /* A list of other sections which the compiler might be \"in\" at any\n    given time.  */\n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata, in_sbss, in_rdata, in_ctors, in_dtors\n+#define EXTRA_SECTIONS in_sdata, in_sbss, in_rdata\n  \n #define INVOKE__main\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS                                         \\\n   SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP) \\\n   SECTION_FUNCTION_TEMPLATE(sbss_section, in_sbss, SBSS_SECTION_ASM_OP) \\\n-  SECTION_FUNCTION_TEMPLATE(rdata_section, in_rdata, RDATA_SECTION_ASM_OP) \\\n-  SECTION_FUNCTION_TEMPLATE(ctors_section, in_ctors, CTORS_SECTION_ASM_OP) \\\n-  SECTION_FUNCTION_TEMPLATE(dtors_section, in_dtors, DTORS_SECTION_ASM_OP)\n+  SECTION_FUNCTION_TEMPLATE(rdata_section, in_rdata, RDATA_SECTION_ASM_OP)\n \n #define SECTION_FUNCTION_TEMPLATE(FN, ENUM, OP)                               \\\n void FN ()                                                            \\\n@@ -253,46 +228,6 @@ void FN ()                                                            \\\n     }                                                                 \\\n }\n \n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#undef ASM_OUTPUT_CONSTRUCTOR\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)                             \\\n-  do {                                                                \\\n-    ctors_section ();                                                 \\\n-    fprintf (FILE, \"\\t%s\\t\", TARGET_LONG64 ? \".dword\" : \".word\");     \\\n-    assemble_name (FILE, NAME);                                       \\\n-    fprintf (FILE, \"\\n\");                                             \\\n-  } while (0)\n-\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#undef ASM_OUTPUT_DESTRUCTOR\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)                              \\\n-  do {                                                                \\\n-    dtors_section ();                                                 \\\n-    fprintf (FILE, \"\\t%s\\t\", TARGET_LONG64 ? \".dword\" : \".word\");     \\\n-    assemble_name (FILE, NAME);                                       \\\n-    fprintf (FILE, \"\\n\");                                             \\\n-  } while (0)\n-\n-#define CTOR_LIST_BEGIN                                               \\\n-func_ptr __CTOR_LIST__ __attribute__((section(CTORS_SECTION_NAME))) = \\\n-  (func_ptr) (-1)\n- \n-#define CTOR_LIST_END                                                 \\\n-func_ptr __CTOR_END__ __attribute__((section(CTORS_SECTION_NAME))) =  \\\n-  (func_ptr) 0\n- \n-#define DTOR_LIST_BEGIN                                               \\\n-func_ptr __DTOR_LIST__ __attribute__((section(DTORS_SECTION_NAME))) = \\\n-  (func_ptr) (-1)\n-\n-#define DTOR_LIST_END                                                 \\\n-func_ptr __DTOR_END__ __attribute__((section(DTORS_SECTION_NAME))) =  \\\n-  (func_ptr) 0\n-\n /* Don't set the target flags, this is done by the linker script */\n #undef LIB_SPEC\n #define LIB_SPEC \"\""}, {"sha": "c9bcd3ead2d23e221d9462b186a548845917f13e", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 2, "deletions": 68, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -243,29 +243,6 @@ do {\t\t\t\t\t\t\t\t\t   \\\n   DECL_SECTION_NAME (DECL) = build_string (len, string);\t\t   \\\n } while (0)\n \n-/* Support the ctors/dtors and other sections.  */\n- \n-/* Define the names of and pseudo-ops used to switch to the .ctors and\n-   .dtors sections.\n- \n-   Note that we want to give these sections the SHF_WRITE attribute\n-   because these sections will actually contain data (i.e. tables of\n-   addresses of functions in the current root executable or shared library\n-   file) and, in the case of a shared library, the relocatable addresses\n-   will have to be properly resolved/relocated (and then written into) by\n-   the dynamic linker when it actually attaches the given shared library\n-   to the executing process.  (Note that on SVR4, you may wish to use the\n-   `-z text' option to the ELF linker, when building a shared library, as\n-   an additional check that you are doing everything right.  But if you do\n-   use the `-z text' option when building a shared library, you will get\n-   errors unless the .ctors and .dtors sections are marked as writable\n-   via the SHF_WRITE attribute.)  */\n-\n-#define CTORS_SECTION_NAME      \".ctors\"\n-#define CTORS_SECTION_ASM_OP    \"\\t.section\\t.ctors,\\\"aw\\\"\"\n-#define DTORS_SECTION_NAME      \".dtors\"\n-#define DTORS_SECTION_ASM_OP    \"\\t.section\\t.dtors,\\\"aw\\\"\"\n- \n /* There's no point providing a default definition of __CTOR_LIST__\n    since people are expected either to use crtbegin.o, or an equivalent,\n    or provide their own definition.  */\n@@ -274,16 +251,14 @@ do {\t\t\t\t\t\t\t\t\t   \\\n /* A list of other sections which the compiler might be \"in\" at any\n    given time.  */\n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata, in_rdata, in_ctors, in_dtors\n+#define EXTRA_SECTIONS in_sdata, in_rdata\n  \n #define INVOKE__main\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS                                         \\\n   SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP) \\\n-  SECTION_FUNCTION_TEMPLATE(rdata_section, in_rdata, RDATA_SECTION_ASM_OP) \\\n-  SECTION_FUNCTION_TEMPLATE(ctors_section, in_ctors, CTORS_SECTION_ASM_OP) \\\n-  SECTION_FUNCTION_TEMPLATE(dtors_section, in_dtors, DTORS_SECTION_ASM_OP)\n+  SECTION_FUNCTION_TEMPLATE(rdata_section, in_rdata, RDATA_SECTION_ASM_OP)\n \n #define SECTION_FUNCTION_TEMPLATE(FN, ENUM, OP)                               \\\n void FN ()                                                            \\\n@@ -294,47 +269,6 @@ void FN ()                                                            \\\n       in_section = ENUM;                                              \\\n     }                                                                 \\\n }\n-\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#undef ASM_OUTPUT_CONSTRUCTOR\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)                             \\\n-  do {                                                                \\\n-    ctors_section ();                                                 \\\n-    fprintf (FILE, \"\\t%s\\t\", (Pmode == SImode) ? \".word\" : \".dword\"); \\\n-    assemble_name (FILE, NAME);                                       \\\n-    fprintf (FILE, \"\\n\");                                             \\\n-  } while (0)\n-\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#undef ASM_OUTPUT_DESTRUCTOR\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)                              \\\n-  do {                                                                \\\n-    dtors_section ();                                                 \\\n-    fprintf (FILE, \"\\t%s\\t\", (Pmode == SImode) ? \".word\" : \".dword\"); \\\n-    assemble_name (FILE, NAME);                                       \\\n-    fprintf (FILE, \"\\n\");                                             \\\n-  } while (0)\n-\n-#define CTOR_LIST_BEGIN                                               \\\n-func_ptr __CTOR_LIST__ __attribute__((section(CTORS_SECTION_NAME))) = \\\n-  (func_ptr) (-1)\n- \n-#define CTOR_LIST_END                                                 \\\n-func_ptr __CTOR_END__ __attribute__((section(CTORS_SECTION_NAME))) =  \\\n-  (func_ptr) 0\n- \n-#define DTOR_LIST_BEGIN                                               \\\n-func_ptr __DTOR_LIST__ __attribute__((section(DTORS_SECTION_NAME))) = \\\n-  (func_ptr) (-1)\n-\n-#define DTOR_LIST_END                                                 \\\n-func_ptr __DTOR_END__ __attribute__((section(DTORS_SECTION_NAME))) =  \\\n-  (func_ptr) 0\n-\n /* Don't set the target flags, this is done by the linker script */\n #undef LIB_SPEC\n #define LIB_SPEC \"\""}, {"sha": "ee334870efb1e40d1dc5d9ce9dc34f7346ec86c2", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 1, "deletions": 76, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -242,8 +242,6 @@ Boston, MA 02111-1307, USA.  */\n #undef SUBTARGET_ASM_OPTIMIZING_SPEC\n #define SUBTARGET_ASM_OPTIMIZING_SPEC \"-O0\"\n \n-/* Stuff for constructors.  Start here.  */\n-\n /* The assembler now accepts .section pseudo-ops, but it does not allow\n    one to change the section in the middle of a function, so we can't use\n    the INIT_SECTION_ASM_OP code in crtstuff.  But we can build up the ctor\n@@ -254,38 +252,13 @@ Boston, MA 02111-1307, USA.  */\n #define CONST_SECTION_ASM_OP_32\t\"\\t.rdata\"\n #define CONST_SECTION_ASM_OP_64\t\"\\t.section\\t.rodata\"\n \n-/* The IRIX 6 assembler .section directive takes four additional args:\n-   section type, flags, entry size, and alignment.  The alignment of the\n-   .ctors and .dtors sections needs to be the same as the size of a pointer\n-   so that the linker doesn't add padding between elements.  */\n-#if defined (CRT_BEGIN) || defined (CRT_END)\n-\n-/* If we are included from crtstuff.c, these need to be plain strings.\n-   _MIPS_SZPTR is defined in SUBTARGET_CPP_SPEC above.  */\n-#if _MIPS_SZPTR == 64\n-#define CTORS_SECTION_ASM_OP \"\\t.section\\t.ctors,1,2,0,8\"\n-#define DTORS_SECTION_ASM_OP \"\\t.section\\t.dtors,1,2,0,8\"\n-#else /* _MIPS_SZPTR != 64 */\n-#define CTORS_SECTION_ASM_OP \"\\t.section\\t.ctors,1,2,0,4\"\n-#define DTORS_SECTION_ASM_OP \"\\t.section\\t.dtors,1,2,0,4\"\n-#endif /* _MIPS_SZPTR == 64 */\n-\n-#else /* ! (defined (CRT_BEGIN) || defined (CRT_END)) */\n-\n-/* If we are included from varasm.c, these need to depend on -mabi.  */\n-#define CTORS_SECTION_ASM_OP \\\n-  (Pmode == DImode ? \"\\t.section\\t.ctors,1,2,0,8\" : \"\\t.section\\t.ctors,1,2,0,4\")\n-#define DTORS_SECTION_ASM_OP \\\n-  (Pmode == DImode ? \"\\t.section\\t.dtors,1,2,0,8\" : \"\\t.section\\t.dtors,1,2,0,4\")\n-#endif /* defined (CRT_BEGIN) || defined (CRT_END) */\n-\n /* A default list of other sections which we might be \"in\" at any given\n    time.  For targets that use additional sections (e.g. .tdesc) you\n    should override this definition in the target-specific file which\n    includes this file.  */\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata, in_rdata, in_const, in_ctors, in_dtors\n+#define EXTRA_SECTIONS in_sdata, in_rdata, in_const\n \n /* A default list of extra section function definitions.  For targets\n    that use additional sections (e.g. .tdesc) you should override this\n@@ -316,60 +289,12 @@ rdata_section ()\t\t\t\t\t\t\t\\\n \tfprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP_32);\t\\\n       in_section = in_rdata;\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\n-\n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \",\t\t\t\t\t\t\\\n-\t     (Pmode == DImode) ? \".dword\" : \".word\");\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \",\t\t\t\t\t\t\\\n-\t     (Pmode == DImode) ? \".dword\" : \".word\");\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n /* Switch into a generic section.  */\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION  iris6_asm_named_section\n \n-/* Stuff for constructors.  End here.  */\n-\n /* ??? Perhaps just include svr4.h in this file?  */\n \n /* ??? SGI assembler may core dump when compiling with -g."}, {"sha": "c441198910548fe261ddc26bd9d6364deb8ebb4a", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -1312,19 +1312,6 @@ do {\t\t\t\t\t\t\t\\\n #define OBJECT_FORMAT_COFF\t/* Object file looks like COFF */\n #define EXTENDED_COFF\t\t/* ECOFF, not normal coff */\n #endif\n-\n-#if 0 /* These definitions normally have no effect because\n-\t MIPS systems define USE_COLLECT2, so\n-\t assemble_constructor does nothing anyway.  */\n-\n-/* Don't use the default definitions, because we don't have gld.\n-   Also, we don't want stabs when generating ECOFF output.\n-   Instead we depend on collect to handle these.  */\n-\n-#define ASM_OUTPUT_CONSTRUCTOR(file, name)\n-#define ASM_OUTPUT_DESTRUCTOR(file, name)\n-\n-#endif /* 0 */\n \f\n /* Target machine storage layout */\n "}, {"sha": "7a455e514fa68d52451f46a6a38bc4164d3c67bd", "filename": "gcc/config/mips/rtems64.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fmips%2Frtems64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fmips%2Frtems64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Frtems64.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -30,13 +30,6 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_MEM_FUNCTIONS\n #endif\n \n-/* Undefine the following which were defined in elf64.h.  This will cause the rtems64\n-   port to continue to use collect2 for constructors/destructors.  These may be removed\n-   when .ctor/.dtor section support is desired. */\n-\n-#undef CTORS_SECTION_ASM_OP\n-#undef DTORS_SECTION_ASM_OP\n-\n #undef EXTRA_SECTIONS\n #define EXTRA_SECTIONS in_sdata, in_rdata\n \n@@ -49,14 +42,6 @@ Boston, MA 02111-1307, USA.  */\n   SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP) \\\n   SECTION_FUNCTION_TEMPLATE(rdata_section, in_rdata, RDATA_SECTION_ASM_OP)\n \n-#undef ASM_OUTPUT_CONSTRUCTOR\n-#undef ASM_OUTPUT_DESTRUCTOR\n-\n-#undef CTOR_LIST_BEGIN\n-#undef CTOR_LIST_END\n-#undef DTOR_LIST_BEGIN\n-#undef DTOR_LIST_END\n-\n #undef STARTFILE_SPEC\n #undef ENDFILE_SPEC\n "}, {"sha": "ec6e13bcebc0f832a7741fd7e156e08578d43b87", "filename": "gcc/config/mips/vxworks.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fmips%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fmips%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fvxworks.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -17,13 +17,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* Undefine the following which were defined in elf.h.  Thise will cause the mips-vxworks\n-   port to continue to use collect2 for constructors/destructors.  This entire file may\n-   be removed when .ctor/.dtor section support is desired. */\n-\n-#undef CTORS_SECTION_ASM_OP\n-#undef DTORS_SECTION_ASM_OP\n-\n #undef EXTRA_SECTIONS\n #define EXTRA_SECTIONS in_sdata, in_rdata, in_sbss\n \n@@ -37,15 +30,5 @@ Boston, MA 02111-1307, USA.  */\n   SECTION_FUNCTION_TEMPLATE(sbss_section, in_sbss, SBSS_SECTION_ASM_OP) \\\n   SECTION_FUNCTION_TEMPLATE(rdata_section, in_rdata, RDATA_SECTION_ASM_OP)\n \n-#undef ASM_OUTPUT_CONSTRUCTOR\n-#undef ASM_OUTPUT_DESTRUCTOR\n-\n-#undef CTOR_LIST_BEGIN\n-#undef CTOR_LIST_END\n-#undef DTOR_LIST_BEGIN\n-#undef DTOR_LIST_END\n-\n #undef STARTFILE_SPEC\n #undef ENDFILE_SPEC\n-\n-/*  End of undefines to turn off .ctor/.dtor section support */"}, {"sha": "2438a568983f9e8dca1e59b372fbf37839290047", "filename": "gcc/config/netware.h", "status": "modified", "additions": 2, "deletions": 48, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fnetware.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fnetware.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetware.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -80,15 +80,13 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    given time.  */\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_ctors, in_dtors\n+#define EXTRA_SECTIONS in_const\n \n /* A list of extra section function definitions.  */\n \n #undef\tEXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\n+  CONST_SECTION_FUNCTION\n \n #undef\tCONST_SECTION_FUNCTION\n #define CONST_SECTION_FUNCTION                                          \\\n@@ -102,48 +100,4 @@ const_section ()                                                        \\\n     }                                                                   \\\n }\n \n-#undef\tCTORS_SECTION_FUNCTION\n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#undef\tDTORS_SECTION_FUNCTION\n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n #define INT_ASM_OP \".long\"\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)"}, {"sha": "94492d4998e9561f804e7513e1fb29eff4da5fe4", "filename": "gcc/config/nextstep.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fnextstep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fnextstep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep.c?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -89,3 +89,24 @@ handle_pragma (p_getc, p_ungetc, pname)\n \n   return retval;\n }\n+\n+void\n+nextstep_asm_out_constructor (symbol, priority)\n+     rtx symbol;\n+     int priority ATTRIBUTE_UNUSED;\n+{\n+  constructor_section ();\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+  fprintf (asm_out_file, \".reference .constructors_used\\n\");\n+}\n+\n+void\n+nextstep_asm_out_destructor (symbol, priority)\n+     rtx symbol;\n+     int priority ATTRIBUTE_UNUSED;\n+{\n+  destructor_section ();\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+  fprintf (asm_out_file, \".reference .destructors_used\\n\");\n+}\n+"}, {"sha": "7bb9681463424955cad0f394e04dd726143e1fff", "filename": "gcc/config/nextstep.h", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fnextstep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fnextstep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -212,25 +212,10 @@ Boston, MA 02111-1307, USA.  */\n #define INIT_SECTION_ASM_OP\n #undef\tINVOKE__main\n \n-#undef\tASM_OUTPUT_CONSTRUCTOR\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)                       \\\n-  do { constructor_section ();                                  \\\n-       ASM_OUTPUT_ALIGN (FILE, 1);                              \\\n-       fprintf (FILE, \"\\t.long \");                              \\\n-       assemble_name (FILE, NAME);                              \\\n-       fprintf (FILE, \"\\n\");                                    \\\n-       fprintf (FILE, \".reference .constructors_used\\n\");       \\\n-      } while (0)\n-\n-#undef\tASM_OUTPUT_DESTRUCTOR\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)                        \\\n-  do { destructor_section ();                                   \\\n-       ASM_OUTPUT_ALIGN (FILE, 1);                              \\\n-       fprintf (FILE, \"\\t.long \");                              \\\n-       assemble_name (FILE, NAME);                              \\\n-       fprintf (FILE, \"\\n\");                                    \\\n-       fprintf (FILE, \".reference .destructors_used\\n\");        \\\n-      } while (0)\n+#define TARGET_ASM_CONSTRUCTOR  nextstep_asm_out_constructor\n+#define TARGET_ASM_DESTRUCTOR   nextstep_asm_out_destructor\n+extern void nextstep_asm_out_constructor  PARAMS ((struct rtx_def *, int));\n+extern void nextstep_asm_out_destructor  PARAMS ((struct rtx_def *, int));\n \n /* ??? Should be changed to EH_FRAME_SECTION_NAME, but that requires\n    named section support.  Based on this definition, it seems clear"}, {"sha": "40004d1d0e63b6903c33da464a09498c063aa532", "filename": "gcc/config/nextstep21.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fnextstep21.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fnextstep21.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep21.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -37,8 +37,8 @@ Boston, MA 02111-1307, USA.  */\n #define INVOKE__main\n \n /* We call the global destructors, constructors from __main */\n-#undef\tASM_OUTPUT_CONSTRUCTOR\n-#undef\tASM_OUTPUT_DESTRUCTOR\n+#undef TARGET_ASM_CONSTRUCTOR\n+#undef TARGET_ASM_DESTRUCTOR\n \n #undef ASM_FILE_END\n #define ASM_FILE_END(FILE)\t\t\t\t\t\\"}, {"sha": "2df1615dd545129ff98d03fdd23257f202867dc4", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 3, "deletions": 67, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -101,24 +101,6 @@ do {  \\\n \n #define CONST_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n \n-/* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n-\n-   Note that we want to give these sections the SHF_WRITE attribute\n-   because these sections will actually contain data (i.e. tables of\n-   addresses of functions in the current root executable or shared library\n-   file) and, in the case of a shared library, the relocatable addresses\n-   will have to be properly resolved/relocated (and then written into) by\n-   the dynamic linker when it actually attaches the given shared library\n-   to the executing process.  (Note that on SVR4, you may wish to use the\n-   `-z text' option to the ELF linker, when building a shared library, as\n-   an additional check that you are doing everything right.  But if you do\n-   use the `-z text' option when building a shared library, you will get\n-   errors unless the .ctors and .dtors sections are marked as writable\n-   via the SHF_WRITE attribute.)  */\n-\n-#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"aw\\\"\"\n-#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"aw\\\"\"\n-\n /* On svr4, we *do* have support for the .init and .fini sections, and we\n    can put stuff in there to be executed before and after `main'.  We let\n    crtstuff.c and other files know this by defining the following symbols.\n@@ -137,17 +119,16 @@ do {  \\\n    includes this file.  */\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_ctors, in_dtors\n+#define EXTRA_SECTIONS in_const\n \n /* A default list of extra section function definitions.  For targets\n    that use additional sections (e.g. .tdesc) you should override this\n    definition in the target-specific file which includes this file.  */\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\n+  CONST_SECTION_FUNCTION\n+\n \n #define READONLY_DATA_SECTION() const_section ()\n \n@@ -164,28 +145,6 @@ const_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n@@ -222,29 +181,6 @@ do {\t\t\t\t\t\t\t\t\\\n } while (0)\n \n #define INT_ASM_OP \"\\t.dword\\t\"\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%sP%%\", INT_ASM_OP);\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"%sP%%\", INT_ASM_OP);\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* ??? For the time being, we aren't using .ctors/.dtors sections. */\n-#undef ASM_OUTPUT_DESTRUCTOR\n-#undef ASM_OUTPUT_CONSTRUCTOR\n \n /* Define the strings used for the special svr4 .type and .size directives.\n    These strings generally do not vary from one system running svr4 to"}, {"sha": "26be5ef8193dd1749536bbd189a7444d36ab604b", "filename": "gcc/config/psos.h", "status": "modified", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fpsos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fpsos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpsos.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -76,77 +76,6 @@ Boston, MA 02111-1307, USA.\n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n-/* Define the pseudo-ops used to switch to the .ctors and .dtors\n-   sections. */\n-\n-#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"aw\\\"\"\n-#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"aw\\\"\"\n-\n-/* A default list of other sections which we might be \"in\" at any given\n-   time.  For targets that use additional sections (e.g. .tdesc) you\n-   should override this definition in the target-specific file which\n-   includes this file.  */\n-\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_ctors, in_dtors\n-\n-/* A default list of extra section function definitions.  For targets\n-   that use additional sections (e.g. .tdesc) you should override this\n-   definition in the target-specific file which includes this file.  */\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\n-\n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-\n-#ifndef INT_ASM_OP\n-#define INT_ASM_OP\t\t\"\\t.long\\t\"\n-#endif\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-\n /* Use DBX debugging info by default.  */\n \n #ifndef PREFERRED_DEBUGGING_TYPE"}, {"sha": "428ab43ea32a0eb6fa46beb9e02f651dd1da6d6c", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -30,10 +30,6 @@ Boston, MA 02111-1307, USA.  */\n /* This is the only version of nm that collect2 can work with.  */\n #define REAL_NM_FILE_NAME \"/usr/ucb/nm\"\n \n-/* AIX does not have any init/fini or ctor/dtor sections, so create\n-    static constructors and destructors as normal functions.  */\n-/* #define ASM_OUTPUT_CONSTRUCTOR(file, name) */\n-/* #define ASM_OUTPUT_DESTRUCTOR(file, name) */\n #define USER_LABEL_PREFIX  \"\"\n /* Don't turn -B into -L if the argument specifies a relative file name.  */\n #define RELATIVE_PREFIX_NOT_LINKDIR"}, {"sha": "8b755fc905688de26b43407030c2ea43d2b499b8", "filename": "gcc/config/rs6000/lynx.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Frs6000%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Frs6000%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flynx.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -38,10 +38,6 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_GENERATE_INTERNAL_LABEL\n #undef ASM_OUTPUT_COMMON\n #undef ASM_OUTPUT_LOCAL\n-#undef ASM_OUTPUT_CONSTRUCTOR\n-#undef ASM_OUTPUT_DESTRUCTOR\n-#undef CTORS_SECTION_FUNCTION\n-#undef DTORS_SECTION_FUNCTION\n \n #undef SDB_DEBUGGING_INFO\n #undef DBX_DEBUGGING_INFO"}, {"sha": "f52efa6e69be96a8e493699d286ba3c7a4f410da", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 8, "deletions": 43, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -444,14 +444,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Besides the usual ELF sections, we need a toc section.  */\n /* Override elfos.h definition.  */\n #undef\tEXTRA_SECTIONS\n-#define\tEXTRA_SECTIONS in_const, in_ctors, in_dtors, in_toc, in_sdata, in_sdata2, in_sbss, in_init, in_fini\n+#define\tEXTRA_SECTIONS in_const, in_toc, in_sdata, in_sdata2, in_sbss, in_init, in_fini\n \n /* Override elfos.h definition.  */\n #undef\tEXTRA_SECTION_FUNCTIONS\n #define\tEXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n   CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n   TOC_SECTION_FUNCTION\t\t\t\t\t\t\t\\\n   SDATA_SECTION_FUNCTION\t\t\t\t\t\t\\\n   SDATA2_SECTION_FUNCTION\t\t\t\t\t\t\\\n@@ -557,6 +555,13 @@ fini_section ()\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n+/* Ordinarily, we wouldn't need to define these, since generic code would\n+   do the right thing based on knowing that we have named sections.\n+   However, -mrelocatable needs to know when we're in [cd]tors sections,\n+   and the easiest way to do that is rely on varasm.c defining in_[cd]tors.  */\n+#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"aw\\\"\"\n+#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"aw\\\"\"\n+\n /* A C statement or statements to switch to the appropriate section\n    for output of RTX in mode MODE.  You can assume that RTX is some\n    kind of constant in RTL.  The argument MODE is redundant except in\n@@ -919,46 +924,6 @@ do {\t\t\t\t\t\t\\\n     asm_fprintf (FILE, \"%U%s\", _name);\t\t\\\n } while (0)\n \n-/* Override elfos.h definition.  */\n-#undef\tASM_OUTPUT_CONSTRUCTOR\n-#define\tASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (DEFAULT_ABI != ABI_SOLARIS)\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tctors_section ();\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tinit_section ();\t\t\t\t\t\t\\\n-\tfputs (\"\\tbl \", FILE);\t\t\t\t\t\t\\\n-\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    fputs (\"\\n\", FILE);\t\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-/* Override elfos.h definition.  */\n-#undef\tASM_OUTPUT_DESTRUCTOR\n-#define\tASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (DEFAULT_ABI != ABI_SOLARIS)\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tdtors_section ();\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tfini_section ();\t\t\t\t\t\t\\\n-\tfputs (\"\\tbl \", FILE);\t\t\t\t\t\t\\\n-\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    fputs (\"\\n\", FILE);\t\t\t\t\t\t\t\\\n-  } while (0)\n-\n /* But, to make this work, we have to output the stabs for the function\n    name *first*...  */\n "}, {"sha": "761b1fb568b982755ef6ab0dfb929751b8795b74", "filename": "gcc/config/sh/elf.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fsh%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fsh%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Felf.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -36,11 +36,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_FILE_END\n #undef ASM_OUTPUT_SOURCE_LINE\n #undef DBX_OUTPUT_MAIN_SOURCE_FILE_END\n-#undef CTORS_SECTION_ASM_OP\n-#undef DTORS_SECTION_ASM_OP\n #undef TARGET_ASM_NAMED_SECTION\n-#undef ASM_OUTPUT_CONSTRUCTOR\n-#undef ASM_OUTPUT_DESTRUCTOR\n #undef ASM_DECLARE_FUNCTION_NAME\n #undef MAX_OFILE_ALIGNMENT\n "}, {"sha": "9a2c3479d7399cbdad597d7974ae3f3bd29aa1c6", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -1897,28 +1897,6 @@ while (0)\n \n #define TEXT_SECTION_ASM_OP  \t\t\"\\t.text\"\n #define DATA_SECTION_ASM_OP  \t\t\"\\t.data\"\n-#define CTORS_SECTION_ASM_OP \t\t\"\\t.section\\t.ctors\\n\"\n-#define DTORS_SECTION_ASM_OP \t\t\"\\t.section\\t.dtors\\n\"\n-#define EXTRA_SECTIONS \t\t\tin_ctors, in_dtors\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-ctors_section()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\\\n-      in_section = in_ctors;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-dtors_section()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\\\n-      in_section = in_dtors;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n \n /* If defined, a C expression whose value is a string containing the\n    assembler operation to identify the following data as\n@@ -1956,32 +1934,7 @@ dtors_section()\t\t\t\t\t\t\t\\\n \n #define INT_ASM_OP\t\"\\t.long\\t\"\n      \n-/* A C statement (sans semicolon) to output an\n-   element in the table of global constructors.  */\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE, NAME)\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      ctors_section ();\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\\\n-      assemble_name (FILE, NAME);\t\t\t\t\\\n-      fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* A C statement (sans semicolon) to output an\n-   element in the table of global destructors.  */\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      dtors_section ();                   \t\t\t\\\n-      fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\\\n-      assemble_name (FILE, NAME);              \t\t\t\\\n-      fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n #undef DO_GLOBAL_CTORS_BODY\n-\n #define DO_GLOBAL_CTORS_BODY\t\t\t\\\n {\t\t\t\t\t\t\\\n   typedef (*pfunc)();\t\t\t\t\\"}, {"sha": "d72f57f08ce37a1e7b25bd853e28e5a7c6340c17", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -387,31 +387,3 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t       : /* no outputs */\t\t\t\\\n \t       : \"r\" (ms_flags), \"r\" (ms_saveret));\n #endif /* sparc32 */\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#undef ASM_OUTPUT_CONSTRUCTOR\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    ctors_section ();\t\t\t\t\t\t\t\\\n-    if (TARGET_ARCH64)\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t%s\\t \", ASM_LONGLONG);\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#undef ASM_OUTPUT_DESTRUCTOR\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    dtors_section ();                   \t\t\t\t\\\n-    if (TARGET_ARCH64)\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t%s\\t \", ASM_LONGLONG);\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)"}, {"sha": "e2340c3bdf0ac88d7b06be60c53d68d1c6383094", "filename": "gcc/config/sparc/litecoff.h", "status": "modified", "additions": 2, "deletions": 55, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fsparc%2Flitecoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fsparc%2Flitecoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flitecoff.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -42,72 +42,19 @@ Boston, MA 02111-1307, USA.  */\n \n #undef INIT_SECTION_ASM_OP\n \n-/* Support the ctors and dtors sections for g++.  */\n-\n-#undef CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"x\\\"\"\n-#undef DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"x\\\"\"\n-\n /* A list of other sections which the compiler might be \"in\" at any\n    given time.  */\n \n #undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_ctors, in_dtors\n+#define EXTRA_SECTIONS in_const\n \n /* A list of extra section function definitions.  */\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\n-\n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n+  CONST_SECTION_FUNCTION\n \n #define INT_ASM_OP \"\\t.long\\t\"\n \n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#undef ASM_OUTPUT_CONSTRUCTOR\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#undef ASM_OUTPUT_DESTRUCTOR\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n #undef DO_GLOBAL_CTORS_BODY\n #undef DO_GLOBAL_DTORS_BODY"}, {"sha": "21545f2f84e19bde28eb444dec996d7185728020", "filename": "gcc/config/sparc/sol2-sld-64.h", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -329,32 +329,4 @@\n  \n #endif /* ! SPARC_BI_ARCH */\n \n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#undef ASM_OUTPUT_CONSTRUCTOR\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    ctors_section ();\t\t\t\t\t\t\t\\\n-    if (TARGET_ARCH64)\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t%s\\t \", ASM_LONGLONG);\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#undef ASM_OUTPUT_DESTRUCTOR\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    dtors_section ();                   \t\t\t\t\\\n-    if (TARGET_ARCH64)\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t%s\\t \", ASM_LONGLONG);\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\", INT_ASM_OP);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n #endif"}, {"sha": "6f26fde8cd53c14be06210870e439bc81845f5ae", "filename": "gcc/config/svr3.h", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fsvr3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fsvr3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr3.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -211,14 +211,13 @@ Boston, MA 02111-1307, USA.\n    and CTOR_LIST_END to contribute to the .init section an instruction to\n    push a word containing 0 (or some equivalent of that).\n \n-   Define ASM_OUTPUT_CONSTRUCTOR to push the address of the constructor.  */\n+   Define TARGET_ASM_CONSTRUCTOR to push the address of the constructor.  */\n \n #define USE_CONST_SECTION\t0\n \n #define INIT_SECTION_ASM_OP     \"\\t.section\\t.init\"\n #define FINI_SECTION_ASM_OP     \"\\t.section .fini,\\\"x\\\"\"\n #define CONST_SECTION_ASM_OP\t\"\\t.section\\t.rodata, \\\"x\\\"\"\n-#define CTORS_SECTION_ASM_OP\tINIT_SECTION_ASM_OP\n #define DTORS_SECTION_ASM_OP    FINI_SECTION_ASM_OP\n \n /* CTOR_LIST_BEGIN and CTOR_LIST_END are machine-dependent\n@@ -297,45 +296,6 @@ const_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-/* The ctors and dtors sections are not normally put into use \n-   by EXTRA_SECTIONS and EXTRA_SECTION_FUNCTIONS as defined in svr3.h,\n-   but it can't hurt to define these macros for whatever systems use them.  */\n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-/* This is machine-dependent\n-   because it needs to push something on the stack.  */\n-#undef ASM_OUTPUT_CONSTRUCTOR\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    fini_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"%s\\t \", ASM_LONG);\t\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n /* A C statement or statements to switch to the appropriate\n    section for output of DECL.  DECL is either a `VAR_DECL' node\n    or a constant of some sort.  RELOC indicates whether forming"}, {"sha": "df4f76e4ffb91d84f7617093e190f3b321005c42", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -38,6 +38,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"target-def.h\"\n \n static void vax_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n+#if VMS_TARGET\n+static void vms_asm_out_constructor PARAMS ((rtx, int));\n+static void vms_asm_out_destructor PARAMS ((rtx, int));\n+#endif\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_FUNCTION_PROLOGUE\n@@ -833,19 +837,42 @@ vms_flush_pending_externals (file)\n       fprintf (file, \",%d\\n\", p->size);\n     }\n }\n+\n+static void\n+vms_asm_out_constructor (symbol, priority)\n+     rtx symbol;\n+     int priority ATTRIBUTE_UNUSED;\n+{\n+  fprintf (asm_out_file,\".globl $$PsectAttributes_NOOVR$$__gxx_init_1\\n\");\n+  data_section();\n+  fprintf (asm_out_file,\"$$PsectAttributes_NOOVR$$__gxx_init_1:\\n\\t.long\\t\");\n+  assemble_name (asm_out_file, XSTR (symbol, 0));\n+  fputc ('\\n', asm_out_file);\n+}\n+\n+static void\n+vms_asm_out_destructor (symbol, priority)\n+     rtx symbol;\n+     int priority ATTRIBUTE_UNUSED;\n+{\n+  fprintf (asm_out_file,\".globl $$PsectAttributes_NOOVR$$__gxx_clean_1\\n\");\n+  data_section();\n+  fprintf (asm_out_file,\"$$PsectAttributes_NOOVR$$__gxx_clean_1:\\n\\t.long\\t\");\n+  assemble_name (asm_out_file, XSTR (symbol, 0));\n+  fputc ('\\n', asm_out_file);\n+}\n #endif /* VMS_TARGET */\n \f\n-#ifdef VMS\n /* Additional support code for VMS host. */\n-\n+/* ??? This should really be in libiberty; vax.c is a target file.  */\n #ifdef QSORT_WORKAROUND\n   /*\n \tDo not use VAXCRTL's qsort() due to a severe bug:  once you've\n \tsorted something which has a size that's an exact multiple of 4\n \tand is longword aligned, you cannot safely sort anything which\n \tis either not a multiple of 4 in size or not longword aligned.\n \tA static \"move-by-longword\" optimization flag inside qsort() is\n-\tnever reset.  This is known of affect VMS V4.6 through VMS V5.5-1,\n+\tnever reset.  This is known to affect VMS V4.6 through VMS V5.5-1,\n \tand was finally fixed in VMS V5.5-2.\n \n \tIn this work-around an insertion sort is used for simplicity.\n@@ -919,5 +946,3 @@ not_qsort (array, count, size, compare)\n   return;\n }\n #endif /* QSORT_WORKAROUND */\n-\n-#endif /* VMS */"}, {"sha": "52f4d2750e3ff6fc67ee0eeca72faed493f432e2", "filename": "gcc/config/vax/vms.h", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fvax%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfig%2Fvax%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvms.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -248,27 +248,8 @@ const_section ()\t\t\t\t\t\\\n    that are needed to tell the startup code which constructors need to\n    be run.  */\n \n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  fprintf ((FILE),\".globl $$PsectAttributes_NOOVR$$__gxx_init_1\\n\"); \t\\\n-  data_section();\t\t\t\t\t\t\t\\\n-  fprintf ((FILE),\"$$PsectAttributes_NOOVR$$__gxx_init_1:\\n\\t.long\\t\"); \\\n-  assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-  fputc ('\\n', (FILE));\t\t\t\t\t\t\t\\\n-}\n-\n-/* This is used by a hook in varasm.c to write the assembler directives\n-   that are needed to tell the startup code which destructors need to\n-   be run.  */\n-\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  fprintf ((FILE),\".globl $$PsectAttributes_NOOVR$$__gxx_clean_1\\n\"); \t\\\n-  data_section();\t\t\t\t\t\t\t\\\n-  fprintf ((FILE),\"$$PsectAttributes_NOOVR$$__gxx_clean_1:\\n\\t.long\\t\");\\\n-  assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-  fputc ('\\n', (FILE));\t\t\t\t\t\t\t\\\n-}\n+#define TARGET_ASM_CONSTRUCTOR  vms_asm_out_constructor\n+#define TARGET_ASM_DESTRUCTOR   vms_asm_out_destructor\n \n /* The following definitions are used in libgcc2.c with the __main\n    function.  The _SHR symbol is used when the sharable image library"}, {"sha": "640e5c2e8f90d562f948bb101048aabef87cb4f3", "filename": "gcc/configure", "status": "modified", "additions": 19, "deletions": 32, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -6785,15 +6785,10 @@ if test x$use_collect2 = xno; then\n fi\n \n # Add a definition of USE_COLLECT2 if system wants one.\n-# Also tell toplev.c what to do.\n-# This substitutes for lots of t-* files.\n-if test x$use_collect2 = x\n+if test x$use_collect2 != x\n then\n-\twill_use_collect2=\n-\tmaybe_use_collect2=\n-else\n-\twill_use_collect2=\"collect2\"\n-\tmaybe_use_collect2=\"-DUSE_COLLECT2\"\n+\thost_xm_defines=\"${host_xm_defines} USE_COLLECT2\"\n+\txm_defines=\"${xm_defines} USE_COLLECT2\"\n fi\n \n # If we have gas in the build tree, make a link to it.\n@@ -6808,16 +6803,12 @@ fi\n \n # If we have ld in the build tree, make a link to it.\n if test -f ../ld/Makefile; then\n-#\tif test x$use_collect2 = x; then\n-#\t\trm -f ld; $symbolic_link ../ld/ld-new$host_exeext ld$host_exeext 2>/dev/null\n-#\telse\n-\t\trm -f collect-ld; $symbolic_link ../ld/ld-new$host_exeext collect-ld$host_exeext 2>/dev/null\n-#\tfi\n+\trm -f collect-ld; $symbolic_link ../ld/ld-new$host_exeext collect-ld$host_exeext 2>/dev/null\n fi\n \n # Figure out what assembler we will be using.\n echo $ac_n \"checking what assembler to use\"\"... $ac_c\" 1>&6\n-echo \"configure:6821: checking what assembler to use\" >&5\n+echo \"configure:6812: checking what assembler to use\" >&5\n gcc_cv_as=\n gcc_cv_gas_major_version=\n gcc_cv_gas_minor_version=\n@@ -6902,7 +6893,7 @@ fi\n \n # Figure out what nm we will be using.\n echo $ac_n \"checking what nm to use\"\"... $ac_c\" 1>&6\n-echo \"configure:6906: checking what nm to use\" >&5\n+echo \"configure:6897: checking what nm to use\" >&5\n if test -x nm$host_exeext; then\n \tgcc_cv_nm=./nm$host_exeext\n elif test x$host = x$target; then\n@@ -6913,7 +6904,7 @@ echo \"$ac_t\"\"$gcc_cv_nm\" 1>&6\n \n # Figure out what assembler alignment features are present.\n echo $ac_n \"checking assembler alignment features\"\"... $ac_c\" 1>&6\n-echo \"configure:6917: checking assembler alignment features\" >&5\n+echo \"configure:6908: checking assembler alignment features\" >&5\n gcc_cv_as_alignment_features=none\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n \t# Gas version 2.6 and later support for .balign and .p2align.\n@@ -6961,7 +6952,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_alignment_features\" 1>&6\n \n echo $ac_n \"checking assembler subsection support\"\"... $ac_c\" 1>&6\n-echo \"configure:6965: checking assembler subsection support\" >&5\n+echo \"configure:6956: checking assembler subsection support\" >&5\n gcc_cv_as_subsections=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 9 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -7001,7 +6992,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_subsections\" 1>&6\n \n echo $ac_n \"checking assembler weak support\"\"... $ac_c\" 1>&6\n-echo \"configure:7005: checking assembler weak support\" >&5\n+echo \"configure:6996: checking assembler weak support\" >&5\n gcc_cv_as_weak=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 2 -o \"$gcc_cv_gas_major_version\" -gt 2; then\n@@ -7024,7 +7015,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_weak\" 1>&6\n \n echo $ac_n \"checking assembler hidden support\"\"... $ac_c\" 1>&6\n-echo \"configure:7028: checking assembler hidden support\" >&5\n+echo \"configure:7019: checking assembler hidden support\" >&5\n gcc_cv_as_hidden=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 10 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -7048,7 +7039,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_hidden\" 1>&6\n \n echo $ac_n \"checking assembler leb128 support\"\"... $ac_c\" 1>&6\n-echo \"configure:7052: checking assembler leb128 support\" >&5\n+echo \"configure:7043: checking assembler leb128 support\" >&5\n gcc_cv_as_leb128=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 11 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -7093,7 +7084,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_leb128\" 1>&6\n \n echo $ac_n \"checking assembler eh_frame optimization\"\"... $ac_c\" 1>&6\n-echo \"configure:7097: checking assembler eh_frame optimization\" >&5\n+echo \"configure:7088: checking assembler eh_frame optimization\" >&5\n gcc_cv_as_eh_frame=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 12 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -7176,7 +7167,7 @@ echo \"$ac_t\"\"$gcc_cv_as_eh_frame\" 1>&6\n case \"$target\" in \n   sparc*-*-*)\n     echo $ac_n \"checking assembler .register pseudo-op support\"\"... $ac_c\" 1>&6\n-echo \"configure:7180: checking assembler .register pseudo-op support\" >&5\n+echo \"configure:7171: checking assembler .register pseudo-op support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_register_pseudo_op'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7204,7 +7195,7 @@ EOF\n     fi\n \n     echo $ac_n \"checking assembler supports -relax\"\"... $ac_c\" 1>&6\n-echo \"configure:7208: checking assembler supports -relax\" >&5\n+echo \"configure:7199: checking assembler supports -relax\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_relax_opt'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7234,7 +7225,7 @@ EOF\n     case \"$tm_file\" in\n     *64*)\n \techo $ac_n \"checking for 64 bit support in assembler ($gcc_cv_as)\"\"... $ac_c\" 1>&6\n-echo \"configure:7238: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n+echo \"configure:7229: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_flags64'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7279,7 +7270,7 @@ EOF\n \n     if test \"x$gcc_cv_as_flags64\" != xno; then\n \techo $ac_n \"checking for assembler offsetable %lo() support\"\"... $ac_c\" 1>&6\n-echo \"configure:7283: checking for assembler offsetable %lo() support\" >&5\n+echo \"configure:7274: checking for assembler offsetable %lo() support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_offsetable_lo10'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7319,7 +7310,7 @@ EOF\n \n   i[34567]86-*-*)\n     echo $ac_n \"checking assembler instructions\"\"... $ac_c\" 1>&6\n-echo \"configure:7323: checking assembler instructions\" >&5\n+echo \"configure:7314: checking assembler instructions\" >&5\n     gcc_cv_as_instructions=\n     if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n       if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 9 -o \"$gcc_cv_gas_major_version\" -gt 2; then\n@@ -7348,7 +7339,7 @@ EOF\n esac\n \n echo $ac_n \"checking assembler dwarf2 debug_line support\"\"... $ac_c\" 1>&6\n-echo \"configure:7352: checking assembler dwarf2 debug_line support\" >&5\n+echo \"configure:7343: checking assembler dwarf2 debug_line support\" >&5\n gcc_cv_as_dwarf2_debug_line=no\n # ??? Not all targets support dwarf2 debug_line, even within a version\n # of gas.  Moreover, we need to emit a valid instruction to trigger any\n@@ -7533,7 +7524,7 @@ fi\n \n \n echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n-echo \"configure:7537: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+echo \"configure:7528: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n     # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n   enableval=\"$enable_maintainer_mode\"\n@@ -7841,8 +7832,6 @@ ${CONFIG_SHELL-/bin/sh} $srcdir/configure.frag $srcdir \"$subdirs\" \"$dep_host_xma\n \n \n \n-\n-\n \n \n \n@@ -8142,7 +8131,6 @@ s%@lang_options_files@%$lang_options_files%g\n s%@lang_specs_files@%$lang_specs_files%g\n s%@lang_tree_files@%$lang_tree_files%g\n s%@local_prefix@%$local_prefix%g\n-s%@maybe_use_collect2@%$maybe_use_collect2%g\n s%@md_file@%$md_file%g\n s%@objc_boehm_gc@%$objc_boehm_gc%g\n s%@out_file@%$out_file%g\n@@ -8156,7 +8144,6 @@ s%@tm_p_file_list@%$tm_p_file_list%g\n s%@tm_p_file@%$tm_p_file%g\n s%@xm_file@%$xm_file%g\n s%@xm_defines@%$xm_defines%g\n-s%@will_use_collect2@%$will_use_collect2%g\n s%@c_target_objs@%$c_target_objs%g\n s%@cxx_target_objs@%$cxx_target_objs%g\n s%@target_cpu_default@%$target_cpu_default%g"}, {"sha": "6d1058304ff8076b335a67f2067310837710eb82", "filename": "gcc/configure.in", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -1129,15 +1129,10 @@ if test x$use_collect2 = xno; then\n fi\n \n # Add a definition of USE_COLLECT2 if system wants one.\n-# Also tell toplev.c what to do.\n-# This substitutes for lots of t-* files.\n-if test x$use_collect2 = x\n+if test x$use_collect2 != x\n then\n-\twill_use_collect2=\n-\tmaybe_use_collect2=\n-else\n-\twill_use_collect2=\"collect2\"\n-\tmaybe_use_collect2=\"-DUSE_COLLECT2\"\n+\thost_xm_defines=\"${host_xm_defines} USE_COLLECT2\"\n+\txm_defines=\"${xm_defines} USE_COLLECT2\"\n fi\n \n # If we have gas in the build tree, make a link to it.\n@@ -1152,11 +1147,7 @@ fi\n \n # If we have ld in the build tree, make a link to it.\n if test -f ../ld/Makefile; then\n-#\tif test x$use_collect2 = x; then\n-#\t\trm -f ld; $symbolic_link ../ld/ld-new$host_exeext ld$host_exeext 2>/dev/null\n-#\telse\n-\t\trm -f collect-ld; $symbolic_link ../ld/ld-new$host_exeext collect-ld$host_exeext 2>/dev/null\n-#\tfi\n+\trm -f collect-ld; $symbolic_link ../ld/ld-new$host_exeext collect-ld$host_exeext 2>/dev/null\n fi\n \n # Figure out what assembler we will be using.\n@@ -2089,7 +2080,6 @@ AC_SUBST(lang_options_files)\n AC_SUBST(lang_specs_files)\n AC_SUBST(lang_tree_files)\n AC_SUBST(local_prefix)\n-AC_SUBST(maybe_use_collect2)\n AC_SUBST(md_file)\n AC_SUBST(objc_boehm_gc)\n AC_SUBST(out_file)\n@@ -2103,7 +2093,6 @@ AC_SUBST(tm_p_file_list)\n AC_SUBST(tm_p_file)\n AC_SUBST(xm_file)\n AC_SUBST(xm_defines)\n-AC_SUBST(will_use_collect2)\n AC_SUBST(c_target_objs)\n AC_SUBST(cxx_target_objs)\n AC_SUBST(target_cpu_default)"}, {"sha": "02f34156b3c5493adcac58f618d0dd3c9e8b4c1b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -1,3 +1,8 @@\n+2001-08-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* decl2.c (finish_objects): Use target hooks instead of\n+\tassemble_constructor and assemble_destructor.\n+\n 2001-08-08  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* g++spec.c (lang_specific_driver): Quote argument after `-Xlinker'."}, {"sha": "0a9e5ad817c5ebbadb1f1a1f9e609fa07ac6b7b4", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -2806,11 +2806,9 @@ start_objects (method_type, initp)\n \t\t\t\t\tNULL_TREE),\n \t\t  NULL_TREE, SF_DEFAULT);\n \n-#if defined(ASM_OUTPUT_CONSTRUCTOR) && defined(ASM_OUTPUT_DESTRUCTOR)\n   /* It can be a static function as long as collect2 does not have\n      to scan the object file to find its ctor/dtor routine.  */\n-  TREE_PUBLIC (current_function_decl) = 0;\n-#endif\n+  TREE_PUBLIC (current_function_decl) = ! targetm.have_ctors_dtors;\n \n   /* Mark this declaration as used to avoid spurious warnings.  */\n   TREE_USED (current_function_decl) = 1;\n@@ -2843,7 +2841,6 @@ finish_objects (method_type, initp, body)\n      tree body;\n {\n   tree fn;\n-  rtx fnsym;\n \n   /* Finish up.  */\n   finish_compound_stmt (/*has_no_scope=*/0, body);\n@@ -2856,11 +2853,14 @@ finish_objects (method_type, initp, body)\n   if (flag_syntax_only)\n     return;\n \n-  fnsym = XEXP (DECL_RTL (fn), 0);\n-  if (method_type == 'I')\n-    assemble_constructor (fnsym, initp);\n-  else\n-    assemble_destructor (fnsym, initp);\n+  if (targetm.have_ctors_dtors)\n+    {\n+      rtx fnsym = XEXP (DECL_RTL (fn), 0);\n+      if (method_type == 'I')\n+\t(* targetm.asm_out.constructor) (fnsym, initp);\n+      else\n+\t(* targetm.asm_out.destructor) (fnsym, initp);\n+    }\n }\n \n /* The names of the parameters to the function created to handle"}, {"sha": "402ab0114e099bdc6eabd3b969da401ecb0814f3", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 38, "deletions": 43, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -100,32 +100,6 @@ extern void *__deregister_frame_info_bases (void *)\n \n #ifndef OBJECT_FORMAT_MACHO\n \n-/* Provide default definitions for the pseudo-ops used to switch to the\n-   .ctors and .dtors sections.\n- \n-   Note that we want to give these sections the SHF_WRITE attribute\n-   because these sections will actually contain data (i.e. tables of\n-   addresses of functions in the current root executable or shared library\n-   file) and, in the case of a shared library, the relocatable addresses\n-   will have to be properly resolved/relocated (and then written into) by\n-   the dynamic linker when it actually attaches the given shared library\n-   to the executing process.  (Note that on SVR4, you may wish to use the\n-   `-z text' option to the ELF linker, when building a shared library, as\n-   an additional check that you are doing everything right.  But if you do\n-   use the `-z text' option when building a shared library, you will get\n-   errors unless the .ctors and .dtors sections are marked as writable\n-   via the SHF_WRITE attribute.)\n-\n-   These defaults do not include leading spacing, as they will only be\n-   used in asm:s here.  */\n-\n-#ifndef CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"aw\\\"\"\n-#endif\n-#ifndef DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"aw\\\"\"\n-#endif\n-\n #ifdef OBJECT_FORMAT_ELF\n \n /*  Declare a pointer to void function type.  */\n@@ -372,9 +346,6 @@ __frame_dummy (void)\n \n #endif /* defined(INIT_SECTION_ASM_OP) */\n \n-/* Force cc1 to switch to .data section.  */\n-static func_ptr force_to_data[1] __attribute__ ((__unused__)) = { };\n-\n /* NOTE:  In order to be able to support SVR4 shared libraries, we arrange\n    to have one set of symbols { __CTOR_LIST__, __DTOR_LIST__, __CTOR_END__,\n    __DTOR_END__ } per root executable and also one set of these symbols\n@@ -387,21 +358,36 @@ static func_ptr force_to_data[1] __attribute__ ((__unused__)) = { };\n    refer to only the __CTOR_END__ symbol in crtend.o and the __DTOR_LIST__\n    symbol in crtbegin.o, where they are defined.  */\n \n-/* The -1 is a flag to __do_global_[cd]tors\n-   indicating that this table does not start with a count of elements.  */\n+/* The -1 is a flag to __do_global_[cd]tors indicating that this table\n+   does not start with a count of elements.  */\n #ifdef CTOR_LIST_BEGIN\n CTOR_LIST_BEGIN;\n+\n+#elif defined(CTORS_SECTION_ASM_OP)\n+/* Hack: force cc1 to switch to .data section early, so that assembling\n+   __CTOR_LIST__ does not undo our behind-the-back change to .ctors.  */\n+static func_ptr force_to_data[1] __attribute__ ((__unused__)) = { };\n+asm (CTORS_SECTION_ASM_OP);\n+STATIC func_ptr __CTOR_LIST__[1]\n+  __attribute__ ((__unused__))\n+  = { (func_ptr) (-1) };\n+\n #else\n-asm (CTORS_SECTION_ASM_OP);\t/* cc1 doesn't know that we are switching! */\n-STATIC func_ptr __CTOR_LIST__[1] __attribute__ ((__unused__))\n+STATIC func_ptr __CTOR_LIST__[1]\n+  __attribute__ ((__unused__, section(\".ctors\")))\n   = { (func_ptr) (-1) };\n+\n #endif\n \n #ifdef DTOR_LIST_BEGIN\n DTOR_LIST_BEGIN;\n-#else\n-asm (DTORS_SECTION_ASM_OP);\t/* cc1 doesn't know that we are switching! */\n+#elif defined(DTORS_SECTION_ASM_OP)\n+asm (DTORS_SECTION_ASM_OP);\n STATIC func_ptr __DTOR_LIST__[1] = { (func_ptr) (-1) };\n+#else\n+STATIC func_ptr __DTOR_LIST__[1]\n+  __attribute__((section(\".dtors\")))\n+  = { (func_ptr) (-1) };\n #endif\n \n #ifdef EH_FRAME_SECTION_NAME\n@@ -533,9 +519,6 @@ __do_global_ctors (void)\n \n #endif /* defined(INIT_SECTION_ASM_OP) */\n \n-/* Force cc1 to switch to .data section.  */\n-static func_ptr force_to_data[1] __attribute__ ((__unused__)) = { };\n-\n /* Put a word containing zero at the end of each of our two lists of function\n    addresses.  Note that the words defined here go into the .ctors and .dtors\n    sections of the crtend.o file, and since that file is always linked in\n@@ -544,16 +527,29 @@ static func_ptr force_to_data[1] __attribute__ ((__unused__)) = { };\n \n #ifdef CTOR_LIST_END\n CTOR_LIST_END;\n-#else\n-asm (CTORS_SECTION_ASM_OP);\t/* cc1 doesn't know that we are switching! */\n+\n+#elif defined(CTORS_SECTION_ASM_OP)\n+/* Hack: force cc1 to switch to .data section early, so that assembling\n+   __CTOR_LIST__ does not undo our behind-the-back change to .ctors.  */\n+static func_ptr force_to_data[1] __attribute__ ((__unused__)) = { };\n+asm (CTORS_SECTION_ASM_OP);\n STATIC func_ptr __CTOR_END__[1] = { (func_ptr) 0 };\n+\n+#else\n+STATIC func_ptr __CTOR_END__[1]\n+  __attribute__((section(\".ctors\")))\n+  = { (func_ptr) 0 };\n #endif\n \n #ifdef DTOR_LIST_END\n DTOR_LIST_END;\n+#elif defined(DTORS_SECTION_ASM_OP)\n+asm (DTORS_SECTION_ASM_OP);\n+STATIC func_ptr __DTOR_END__[1] __attribute__ ((unused))\n+  = { (func_ptr) 0 };\n #else\n-asm (DTORS_SECTION_ASM_OP);\t/* cc1 doesn't know that we are switching! */\n-STATIC func_ptr __DTOR_END__[1] __attribute__ ((__unused__))\n+STATIC func_ptr __DTOR_END__[1]\n+  __attribute__((unused, section(\".dtors\")))\n   = { (func_ptr) 0 };\n #endif\n \n@@ -636,4 +632,3 @@ STATIC int __FRAME_END__[]\n #endif /* CRT_END */\n \n #endif /* OBJECT_FORMAT_MACHO */\n-"}, {"sha": "b069c5713d374bfe73469caca21a3fc123b56f33", "filename": "gcc/defaults.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -209,9 +209,9 @@ do { ASM_OUTPUT_LABEL(FILE,LABEL_ALTERNATE_NAME (INSN)); } while (0)\n #define DWARF2_UNWIND_INFO 1\n #endif\n \n-/* If we have named section, and we're using crtstuff to run ctors,\n-   then use named sections for registering eh frame information.  */\n-#if defined (TARGET_ASM_NAMED_SECTION) && defined (ASM_OUTPUT_CONSTRUCTOR)\n+/* If we have named sections, and we're using crtstuff to run ctors,\n+   use them for registering eh frame information.  */\n+#if defined (TARGET_ASM_NAMED_SECTION)\n #ifndef EH_FRAME_SECTION_NAME\n #define EH_FRAME_SECTION_NAME \".eh_frame\"\n #endif"}, {"sha": "0de3768b2739cb0281a6516258309095b0dd4dcd", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 80, "deletions": 98, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -396,7 +396,7 @@ the effect you need.\n \n @findex LINK_ELIMINATE_DUPLICATE_LDIRECTORIES\n @item LINK_ELIMINATE_DUPLICATE_LDIRECTORIES\n-A nonzero value causes collect2 to remove duplicate @option{-L@var{directory}} search\n+A nonzero value causes @command{collect2} to remove duplicate @option{-L@var{directory}} search\n directories from linking commands.  Do not give it a nonzero value if\n removing duplicate search directories changes the linker's semantics.\n \n@@ -6318,7 +6318,7 @@ systems.  This macro is used in @code{assemble_name}.\n @ignore @c Seems not to exist anymore.\n @findex ASM_OUTPUT_LABELREF_AS_INT\n @item ASM_OUTPUT_LABELREF_AS_INT (@var{file}, @var{label})\n-Define this macro for systems that use the program @code{collect2}.\n+Define this macro for systems that use the program @command{collect2}.\n The definition should be a C statement to output a word containing\n a reference to the label @var{label}.\n @end ignore\n@@ -6546,87 +6546,71 @@ the constructor section to point to that function.  The linker\n accumulates all these words into one contiguous @samp{.ctors} section.\n Termination functions are handled similarly.\n \n-To use this method, you need appropriate definitions of the macros\n-@code{ASM_OUTPUT_CONSTRUCTOR} and @code{ASM_OUTPUT_DESTRUCTOR}.  Usually\n-you can get them by including @file{svr4.h}.\n+This method will be chosen as the default by @file{target-def.h} if\n+@code{TARGET_ASM_NAMED_SECTION} is defined.  A target that does not\n+support arbitrary sections, but does support special designated \n+constructor and destructor sections may define @code{CTORS_SECTION_ASM_OP}\n+and @code{DTORS_SECTION_ASM_OP} to achieve the same effect.\n \n When arbitrary sections are available, there are two variants, depending\n upon how the code in @file{crtstuff.c} is called.  On systems that\n-support an @dfn{init} section which is executed at program startup,\n+support a @dfn{.init} section which is executed at program startup,\n parts of @file{crtstuff.c} are compiled into that section.  The\n program is linked by the @code{gcc} driver like this:\n \n @example\n-ld -o @var{output_file} crtbegin.o @dots{} crtend.o -lgcc\n+ld -o @var{output_file} crti.o crtbegin.o @dots{} -lgcc crtend.o crtn.o\n @end example\n \n-The head of a function (@code{__do_global_ctors}) appears in the init\n-section of @file{crtbegin.o}; the remainder of the function appears in\n-the init section of @file{crtend.o}.  The linker will pull these two\n-parts of the section together, making a whole function.  If any of the\n-user's object files linked into the middle of it contribute code, then that\n-code will be executed as part of the body of @code{__do_global_ctors}.\n+The prologue of a function (@code{__init}) appears in the @code{.init}\n+section of @file{crti.o}; the epilogue appears in @file{crtn.o}.  Likewise\n+for the function @code{__fini} in the @dfn{.fini} section.  Normally these\n+files are provided by the operating system or by the GNU C library, but\n+are provided by GCC for a few targets.\n+\n+The objects @file{crtbegin.o} and @file{crtend.o} are (for most targets)\n+compiled from @file{crtstuff.c}.  They contain, among other things, code\n+fragments within the @code{.init} and @code{.fini} sections that branch\n+to routines in the @code{.text} section.  The linker will pull all parts\n+of a section together, which results in a complete @code{__init} function\n+that invokes the routines we need at startup.\n \n To use this variant, you must define the @code{INIT_SECTION_ASM_OP}\n macro properly.\n \n-If no init section is available, do not define\n-@code{INIT_SECTION_ASM_OP}.  Then @code{__do_global_ctors} is built into\n-the text section like all other functions, and resides in\n-@file{libgcc.a}.  When GCC compiles any function called @code{main}, it\n-inserts a procedure call to @code{__main} as the first executable code\n-after the function prologue.  The @code{__main} function, also defined\n-in @file{libgcc2.c}, simply calls @file{__do_global_ctors}.\n+If no init section is available, when GCC compiles any function called\n+@code{main} (or more accurately, any function designated as a program\n+entry point by the language front end calling @code{expand_main_function}),\n+it inserts a procedure call to @code{__main} as the first executable code\n+after the function prologue.  The @code{__main} function is defined\n+in @file{libgcc2.c} and runs the global constructors.\n \n In file formats that don't support arbitrary sections, there are again\n two variants.  In the simplest variant, the GNU linker (GNU @code{ld})\n and an `a.out' format must be used.  In this case,\n-@code{ASM_OUTPUT_CONSTRUCTOR} is defined to produce a @code{.stabs}\n+@code{TARGET_ASM_CONSTRUCTOR} is defined to produce a @code{.stabs}\n entry of type @samp{N_SETT}, referencing the name @code{__CTOR_LIST__},\n and with the address of the void function containing the initialization\n code as its value.  The GNU linker recognizes this as a request to add\n-the value to a ``set''; the values are accumulated, and are eventually\n+the value to a @dfn{set}; the values are accumulated, and are eventually\n placed in the executable as a vector in the format described above, with\n a leading (ignored) count and a trailing zero element.\n-@code{ASM_OUTPUT_DESTRUCTOR} is handled similarly.  Since no init\n+@code{TARGET_ASM_DESTRUCTOR} is handled similarly.  Since no init\n section is available, the absence of @code{INIT_SECTION_ASM_OP} causes\n the compilation of @code{main} to call @code{__main} as above, starting\n the initialization process.\n \n The last variant uses neither arbitrary sections nor the GNU linker.\n This is preferable when you want to do dynamic linking and when using\n file formats which the GNU linker does not support, such as `ECOFF'@.  In\n-this case, @code{ASM_OUTPUT_CONSTRUCTOR} does not produce an\n-@code{N_SETT} symbol; initialization and termination functions are\n-recognized simply by their names.  This requires an extra program in the\n-linkage step, called @code{collect2}.  This program pretends to be the\n-linker, for use with GCC; it does its job by running the ordinary\n-linker, but also arranges to include the vectors of initialization and\n-termination functions.  These functions are called via @code{__main} as\n-described above.\n-\n-Choosing among these configuration options has been simplified by a set\n-of operating-system-dependent files in the @file{config} subdirectory.\n-These files define all of the relevant parameters.  Usually it is\n-sufficient to include one into your specific machine-dependent\n-configuration file.  These files are:\n-\n-@table @file\n-@item aoutos.h\n-For operating systems using the `a.out' format.\n-\n-@item next.h\n-For operating systems using the `MachO' format.\n-\n-@item svr3.h\n-For System V Release 3 and similar systems using `COFF' format.\n-\n-@item svr4.h\n-For System V Release 4 and similar systems using `ELF' format.\n-\n-@item vms.h\n-For the VMS operating system.\n-@end table\n+this case, @code{TARGET_HAVE_CTORS_DTORS} is false, initialization and\n+termination functions are recognized simply by their names.  This requires\n+an extra program in the linkage step, called @command{collect2}.  This program\n+pretends to be the linker, for use with GCC; it does its job by running\n+the ordinary linker, but also arranges to include the vectors of\n+initialization and termination functions.  These functions are called\n+via @code{__main} as described above.  In order to use this method,\n+@code{use_collect2} must be defined in the target in @file{config.gcc}.\n \n @ifinfo\n The following section describes the specific macros that control and\n@@ -6652,10 +6636,9 @@ run the initialization functions.\n @item HAS_INIT_SECTION\n @findex HAS_INIT_SECTION\n If defined, @code{main} will not call @code{__main} as described above.\n-This macro should be defined for systems that control the contents of the\n-init section on a symbol-by-symbol basis, such as OSF/1, and should not\n-be defined explicitly for systems that support\n-@code{INIT_SECTION_ASM_OP}.\n+This macro should be defined for systems that control start-up code\n+on a symbol-by-symbol basis, such as OSF/1, and should not\n+be defined explicitly for systems that support @code{INIT_SECTION_ASM_OP}.\n \n @item LD_INIT_SWITCH\n @findex LD_INIT_SWITCH\n@@ -6680,65 +6663,65 @@ If nonzero, the C++ @code{init_priority} attribute is supported and the\n compiler should emit instructions to control the order of initialization\n of objects.  If zero, the compiler will issue an error message upon\n encountering an @code{init_priority} attribute.\n+@end table\n+\n+@deftypefn {Target Hook} bool TARGET_HAVE_CTORS_DTORS\n+This value is true if the target supports some ``native'' method of\n+collecting constructors and destructors to be run at startup and exit.\n+It is false if we must use @command{collect2}.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} void TARGET_ASM_CONSTRUCTOR (rtx @var{symbol}, int @var{priority})\n+If defined, a function that outputs assembler code to arrange to call\n+the function referenced by @var{symbol} at initialization time.\n \n-@item ASM_OUTPUT_CONSTRUCTOR (@var{stream}, @var{name})\n-@findex ASM_OUTPUT_CONSTRUCTOR\n-Define this macro as a C statement to output on the stream @var{stream}\n-the assembler code to arrange to call the function named @var{name} at\n-initialization time.\n-\n-Assume that @var{name} is the name of a C function generated\n-automatically by the compiler.  This function takes no arguments.  Use\n-the function @code{assemble_name} to output the name @var{name}; this\n-performs any system-specific syntactic transformations such as adding an\n-underscore.\n-\n-If you don't define this macro, nothing special is output to arrange to\n-call the function.  This is correct when the function will be called in\n-some other manner---for example, by means of the @code{collect2} program,\n-which looks through the symbol table to find these functions by their\n-names.\n-\n-@item ASM_OUTPUT_DESTRUCTOR (@var{stream}, @var{name})\n-@findex ASM_OUTPUT_DESTRUCTOR\n-This is like @code{ASM_OUTPUT_CONSTRUCTOR} but used for termination\n+Assume that @var{symbol} is a @code{SYMBOL_REF} for a function taking\n+no arguments and with no return value.  If the target supports initialization\n+priorities, @var{priority} is a value between 0 and @code{MAX_INIT_PRIORITY};\n+otherwise it must be @code{DEFAULT_INIT_PRIORITY}.\n+\n+If this macro is is not defined by the target, a suitable default will\n+be chosen if (1) the target supports arbitrary section names, (2) the\n+target defines @code{CTORS_SECTION_ASM_OP}, or (3) @code{USE_COLLECT2}\n+is not defined.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} void TARGET_ASM_DESTRUCTOR (rtx @var{symbol}, int @var{priority})\n+This is like @code{TARGET_ASM_CONSTRUCTOR} but used for termination\n functions rather than initialization functions.\n+@end deftypefn\n \n-When @code{ASM_OUTPUT_CONSTRUCTOR} and @code{ASM_OUTPUT_DESTRUCTOR} are\n-defined, the initialization routine generated for the generated object\n-file will have static linkage.\n-@end table\n+If @code{TARGET_HAVE_CTORS_DTORS} is true, the initialization routine\n+generated for the generated object file will have static linkage.\n \n-If your system uses @code{collect2} as the means of processing\n-constructors, then that program normally uses @code{nm} to scan an\n-object file for constructor functions to be called.  On such systems you\n-must not define @code{ASM_OUTPUT_CONSTRUCTOR} and @code{ASM_OUTPUT_DESTRUCTOR}\n-as the object file's initialization routine must have global scope.\n+If your system uses @command{collect2} as the means of processing\n+constructors, then that program normally uses @command{nm} to scan\n+an object file for constructor functions to be called.\n \n On certain kinds of systems, you can define these macros to make\n-@code{collect2} work faster (and, in some cases, make it work at all):\n+@command{collect2} work faster (and, in some cases, make it work at all):\n \n @table @code\n @findex OBJECT_FORMAT_COFF\n @item OBJECT_FORMAT_COFF\n Define this macro if the system uses COFF (Common Object File Format)\n-object files, so that @code{collect2} can assume this format and scan\n+object files, so that @command{collect2} can assume this format and scan\n object files directly for dynamic constructor/destructor functions.\n \n @findex OBJECT_FORMAT_ROSE\n @item OBJECT_FORMAT_ROSE\n Define this macro if the system uses ROSE format object files, so that\n-@code{collect2} can assume this format and scan object files directly\n+@command{collect2} can assume this format and scan object files directly\n for dynamic constructor/destructor functions.\n \n-These macros are effective only in a native compiler; @code{collect2} as\n-part of a cross compiler always uses @code{nm} for the target machine.\n+These macros are effective only in a native compiler; @command{collect2} as\n+part of a cross compiler always uses @command{nm} for the target machine.\n \n @findex REAL_NM_FILE_NAME\n @item REAL_NM_FILE_NAME\n Define this macro as a C string constant containing the file name to use\n-to execute @code{nm}.  The default is to search the path normally for\n-@code{nm}.\n+to execute @command{nm}.  The default is to search the path normally for\n+@command{nm}.\n \n If your system supports shared libraries and has a program to list the\n dynamic dependencies of a given library or executable, you can define\n@@ -6747,8 +6730,8 @@ termination functions in shared libraries:\n \n @findex LDD_SUFFIX\n @item LDD_SUFFIX\n-Define this macro to a C string constant containing the name of the\n-program which lists dynamic dependencies, like @code{\"ldd\"} under SunOS 4.\n+Define this macro to a C string constant containing the name of the program\n+which lists dynamic dependencies, like @command{\"ldd\"} under SunOS 4.\n \n @findex PARSE_LDD_OUTPUT\n @item PARSE_LDD_OUTPUT (@var{ptr})\n@@ -6758,7 +6741,6 @@ of type @code{char *} that points to the beginning of a line of output\n from @code{LDD_SUFFIX}.  If the line lists a dynamic dependency, the\n code must advance @var{ptr} to the beginning of the filename on that\n line.  Otherwise, it must set @var{ptr} to @code{NULL}.\n-\n @end table\n \n @node Instruction Output"}, {"sha": "79245740fb897760ad646b127e2848ea607aae16", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -1,3 +1,9 @@\n+2001-08-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* Make-lang.in (class.o): Depend on TARGET_H.\n+\t* class.c (emit_register_classes): Use target hooks instead of\n+\tassemble_constructor and assemble_destructor.\n+\n 2001-08-08  Alexandre Petit-Bianco  <apbianco@redhat.com>\n \n \t* check-init.c (flags.h): Include"}, {"sha": "d0ae26c051697f12517bfc30340dd2bd7ebaf530", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -245,7 +245,7 @@ java/buffer.o: java/buffer.c $(CONFIG_H) java/buffer.h $(SYSTEM_H) toplev.h\n java/check-init.o: java/check-init.c $(CONFIG_H) \\\n   $(JAVA_TREE_H) $(SYSTEM_H) toplev.h\n java/class.o: java/class.c $(CONFIG_H) $(JAVA_TREE_H) $(RTL_H) java/jcf.h \\\n-  java/parse.h toplev.h $(SYSTEM_H) output.h $(GGC_H)\n+  java/parse.h toplev.h $(SYSTEM_H) output.h $(GGC_H) $(TARGET_H) function.h\n java/constants.o: java/constants.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h \\\n   toplev.h $(SYSTEM_H) $(GGC_H)\n java/decl.o: java/decl.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h \\"}, {"sha": "0e46a7882a3ab217f5cd3b6c1ffe186700809fca", "filename": "gcc/java/class.c", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -36,6 +36,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"toplev.h\"\n #include \"output.h\"\n #include \"parse.h\"\n+#include \"function.h\"\n #include \"ggc.h\"\n #include \"target.h\"\n \n@@ -1881,6 +1882,9 @@ register_class ()\n void\n emit_register_classes ()\n {\n+  /* ??? This isn't quite the correct test.  We also have to know\n+     that the target is using gcc's crtbegin/crtend objects rather\n+     than the ones that come with the operating system.  */\n   if (SUPPORTS_WEAK && targetm.have_named_sections)\n     {\n       tree t;\n@@ -1902,29 +1906,37 @@ emit_register_classes ()\n       SET_DECL_ASSEMBLER_NAME (init_decl, init_name);\n       TREE_STATIC (init_decl) = 1;\n       current_function_decl = init_decl;\n-      DECL_RESULT (init_decl) = build_decl(RESULT_DECL, NULL_TREE, void_type_node);\n-      /*  DECL_EXTERNAL (init_decl) = 1;*/\n-      TREE_PUBLIC (init_decl) = 1;\n+      DECL_RESULT (init_decl) = build_decl (RESULT_DECL, NULL_TREE,\n+\t\t\t\t\t    void_type_node);\n+\n+      /* It can be a static function as long as collect2 does not have\n+         to scan the object file to find its ctor/dtor routine.  */\n+      TREE_PUBLIC (init_decl) = ! targetm.have_ctors_dtors;\n+\n+      /* Suppress spurious warnings.  */\n+      TREE_USED (init_decl) = 1;\n+\n       pushlevel (0);\n       make_decl_rtl (init_decl, NULL);\n       init_function_start (init_decl, input_filename, 0);\n       expand_function_start (init_decl, 0);\n-      \n+\n+      /* Do not allow the function to be deferred.  */\n+      current_function_cannot_inline\n+\t= \"static constructors and destructors cannot be inlined\";\n+\n       for ( t = registered_class; t; t = TREE_CHAIN (t))\n \temit_library_call (registerClass_libfunc, 0, VOIDmode, 1,\n \t\t\t   XEXP (DECL_RTL (t), 0), Pmode);\n       \n       expand_function_end (input_filename, 0, 0);\n       poplevel (1, 0, 1);\n-      { \n-\t/* Force generation, even with -O3 or deeper. Gross hack. FIXME */\n-\tint saved_flag = flag_inline_functions;\n-\tflag_inline_functions = 0;\t\n-\trest_of_compilation (init_decl);\n-\tflag_inline_functions = saved_flag;\n-      }\n+      rest_of_compilation (init_decl);\n       current_function_decl = NULL_TREE;\n-      assemble_constructor (XEXP (DECL_RTL (init_decl), 0), DEFAULT_INIT_PRIORITY);\n+\n+      if (targetm.have_ctors_dtors)\n+\t(* targetm.asm_out.constructor) (XEXP (DECL_RTL (init_decl), 0),\n+\t\t\t\t\t DEFAULT_INIT_PRIORITY);\n     }\n }\n "}, {"sha": "824870be1323a662e6c52a300ce861e69ce7c480", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -77,7 +77,7 @@ $(srcdir)/objc/objc-parse.y: $(srcdir)/c-parse.in\n \t$(SHELL) $(srcdir)/move-if-change tmp-objc-prs.y $(srcdir)/objc/objc-parse.y\n \n objc-act.o : $(srcdir)/objc/objc-act.c \\\n-   $(CONFIG_H) $(TREE_H) $(RTL_H) $(SYSTEM_H) $(EXPR_H) \\\n+   $(CONFIG_H) $(TREE_H) $(RTL_H) $(SYSTEM_H) $(EXPR_H) $(TARGET_H) \\\n    $(srcdir)/c-tree.h $(srcdir)/c-common.h $(srcdir)/c-lex.h \\\n    $(srcdir)/toplev.h $(srcdir)/flags.h $(srcdir)/objc/objc-act.h \\\n    $(srcdir)/input.h $(srcdir)/function.h $(srcdir)/output.h $(srcdir)/debug.h"}, {"sha": "c0b14b5af296bd39fd5484899a4a48068ed5db27", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 29, "deletions": 37, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -57,6 +57,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"cpplib.h\"\n #include \"debug.h\"\n+#include \"target.h\"\n \n /* This is the default way of generating a method name.  */\n /* I am not sure it is really correct.\n@@ -1913,60 +1914,51 @@ build_module_descriptor ()\n     return NULL_RTX;\n \n   {\n-    tree parms, function_decl, decelerator, void_list_node_1;\n-    tree function_type;\n-    tree init_function_name = get_file_function_name ('I');\n+    tree parms, execclass_decl, decelerator, void_list_node_1;\n+    tree init_function_name, init_function_decl;\n \n     /* Declare void __objc_execClass (void *); */\n \n     void_list_node_1 = build_tree_list (NULL_TREE, void_type_node);\n-    function_type\n-      = build_function_type (void_type_node,\n-\t\t\t     tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t\tvoid_list_node_1));\n-    function_decl = build_decl (FUNCTION_DECL,\n-\t\t\t\tget_identifier (TAG_EXECCLASS),\n-\t\t\t\tfunction_type);\n-    DECL_EXTERNAL (function_decl) = 1;\n-    DECL_ARTIFICIAL (function_decl) = 1;\n-    TREE_PUBLIC (function_decl) = 1;\n-\n-    pushdecl (function_decl);\n-    rest_of_decl_compilation (function_decl, 0, 0, 0);\n-\n-    parms\n-      = build_tree_list (NULL_TREE,\n-\t\t\t build_unary_op (ADDR_EXPR, UOBJC_MODULES_decl, 0));\n-    decelerator = build_function_call (function_decl, parms);\n+    execclass_decl = build_decl (FUNCTION_DECL,\n+\t\t\t\t get_identifier (TAG_EXECCLASS),\n+\t\t\t\t build_function_type (void_type_node,\n+\t\t\t\t\ttree_cons (NULL_TREE, ptr_type_node,\n+\t\t\t\t\t\t   void_list_node_1)));\n+    DECL_EXTERNAL (execclass_decl) = 1;\n+    DECL_ARTIFICIAL (execclass_decl) = 1;\n+    TREE_PUBLIC (execclass_decl) = 1;\n+    pushdecl (execclass_decl);\n+    rest_of_decl_compilation (execclass_decl, 0, 0, 0);\n+    assemble_external (execclass_decl);\n \n     /* void _GLOBAL_$I$<gnyf> () {objc_execClass (&L_OBJC_MODULES);}  */\n \n+    init_function_name = get_file_function_name ('I');\n     start_function (void_list_node_1,\n \t\t    build_nt (CALL_EXPR, init_function_name,\n-\t\t\t      /* This has the format of the output\n-\t\t\t\t of get_parm_info.  */\n \t\t\t      tree_cons (NULL_TREE, NULL_TREE,\n \t\t\t\t\t void_list_node_1),\n \t\t\t      NULL_TREE),\n \t\t    NULL_TREE);\n-#if 0 /* This should be turned back on later\n-\t for the systems where collect is not needed.  */\n-    /* Make these functions nonglobal\n-       so each file can use the same name.  */\n-    TREE_PUBLIC (current_function_decl) = 0;\n-#endif\n-    TREE_USED (current_function_decl) = 1;\n     store_parm_decls ();\n \n-    assemble_external (function_decl);\n-    c_expand_expr_stmt (decelerator);\n+    init_function_decl = current_function_decl;\n+    TREE_PUBLIC (init_function_decl) = ! targetm.have_ctors_dtors;\n+    TREE_USED (init_function_decl) = 1;\n+    current_function_cannot_inline\n+      = \"static constructors and destructors cannot be inlined\";\n \n-    TREE_PUBLIC (current_function_decl) = 1;\n+    parms\n+      = build_tree_list (NULL_TREE,\n+\t\t\t build_unary_op (ADDR_EXPR, UOBJC_MODULES_decl, 0));\n+    decelerator = build_function_call (execclass_decl, parms);\n+\n+    c_expand_expr_stmt (decelerator);\n \n-    function_decl = current_function_decl;\n     finish_function (0);\n \n-    return XEXP (DECL_RTL (function_decl), 0);\n+    return XEXP (DECL_RTL (init_function_decl), 0);\n   }\n }\n \n@@ -8360,8 +8352,8 @@ finish_objc ()\n     {\n       /* Arrange for Objc data structures to be initialized at run time.  */\n       rtx init_sym = build_module_descriptor ();\n-      if (init_sym)\n-\tassemble_constructor (init_sym, DEFAULT_INIT_PRIORITY);\n+      if (init_sym && targetm.have_ctors_dtors)\n+\t(* targetm.asm_out.constructor) (init_sym, DEFAULT_INIT_PRIORITY);\n     }\n \n   /* Dump the class references.  This forces the appropriate classes"}, {"sha": "a72f80dbf31c6956d2372686957679626af75238", "filename": "gcc/output.h", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -257,15 +257,6 @@ extern void assemble_variable\t\tPARAMS ((tree, int, int, int));\n extern void assemble_external\t\tPARAMS ((tree));\n #endif /* TREE_CODE */\n \n-#ifdef RTX_CODE\n-/* Record an element in the table of global destructors.  The argument\n-   should be a SYMBOL_REF of the function to be called.  */\n-extern void assemble_destructor\t\tPARAMS ((rtx, int));\n-\n-/* Likewise for global constructors.  */\n-extern void assemble_constructor\tPARAMS ((rtx, int));\n-#endif\n-\n /* Assemble code to leave SIZE bytes of zeros.  */\n extern void assemble_zeros\t\tPARAMS ((int));\n \n@@ -476,3 +467,13 @@ extern void default_coff_asm_named_section PARAMS ((const char *, unsigned int,\n extern void default_pe_asm_named_section PARAMS ((const char *, unsigned int,\n \t\t\t\t\t      unsigned int));\n \n+extern void default_stabs_asm_out_destructor PARAMS ((struct rtx_def *, int));\n+extern void default_named_section_asm_out_destructor PARAMS ((struct rtx_def *,\n+\t\t\t\t\t\t\t      int));\n+extern void default_dtor_section_asm_out_destructor PARAMS ((struct rtx_def *,\n+\t\t\t\t\t\t\t     int));\n+extern void default_stabs_asm_out_constructor PARAMS ((struct rtx_def *, int));\n+extern void default_named_section_asm_out_constructor PARAMS ((struct rtx_def *,\n+\t\t\t\t\t\t\t       int));\n+extern void default_ctor_section_asm_out_constructor PARAMS ((struct rtx_def *,\n+\t\t\t\t\t\t\t      int));"}, {"sha": "dbde8923f78348a25d10a968508ef1c5632c9f78", "filename": "gcc/profile.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -48,6 +48,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"hard-reg-set.h\"\n #include \"basic-block.h\"\n #include \"gcov-io.h\"\n+#include \"target.h\"\n \n /* Additional information about the edges we need.  */\n struct edge_info\n@@ -1122,13 +1123,11 @@ output_func_start_profiler ()\n \t\t       build_function_type (void_type_node, NULL_TREE));\n   DECL_EXTERNAL (fndecl) = 0;\n \n-#if defined(ASM_OUTPUT_CONSTRUCTOR) && defined(ASM_OUTPUT_DESTRUCTOR)\n   /* It can be a static function as long as collect2 does not have\n      to scan the object file to find its ctor/dtor routine.  */\n-  TREE_PUBLIC (fndecl) = 0;\n-#else\n-  TREE_PUBLIC (fndecl) = 1;\n-#endif\n+  TREE_PUBLIC (fndecl) = ! targetm.have_ctors_dtors;\n+\n+  TREE_USED (fndecl) = 1;\n \n   DECL_RESULT (fndecl) = build_decl (RESULT_DECL, NULL_TREE, void_type_node);\n \n@@ -1176,5 +1175,7 @@ output_func_start_profiler ()\n     fflush (asm_out_file);\n   current_function_decl = NULL_TREE;\n \n-  assemble_constructor (XEXP (DECL_RTL (fndecl), 0), DEFAULT_INIT_PRIORITY);\n+  if (targetm.have_ctors_dtors)\n+    (* targetm.asm_out.constructor) (XEXP (DECL_RTL (fndecl), 0),\n+\t\t\t\t     DEFAULT_INIT_PRIORITY);\n }"}, {"sha": "94f8d10221c76531eddaf9a80e06e435e2d2a181", "filename": "gcc/target-def.h", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -33,6 +33,38 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_ASM_FUNCTION_END_PROLOGUE no_asm_to_stream\n #define TARGET_ASM_FUNCTION_BEGIN_EPILOGUE no_asm_to_stream\n \n+#if !defined(TARGET_ASM_CONSTRUCTOR) && !defined(USE_COLLECT2)\n+# ifdef CTORS_SECTION_ASM_OP\n+#  define TARGET_ASM_CONSTRUCTOR default_ctor_section_asm_out_constructor\n+# else\n+#  ifdef TARGET_ASM_NAMED_SECTION\n+#   define TARGET_ASM_CONSTRUCTOR default_named_section_asm_out_constructor\n+#  else\n+#   define TARGET_ASM_CONSTRUCTOR default_stabs_asm_out_constructor\n+#  endif\n+# endif\n+#endif\n+\n+#if !defined(TARGET_ASM_DESTRUCTOR) && !defined(USE_COLLECT2)\n+# ifdef DTORS_SECTION_ASM_OP\n+#  define TARGET_ASM_DESTRUCTOR default_dtor_section_asm_out_destructor\n+# else\n+#  ifdef TARGET_ASM_NAMED_SECTION\n+#   define TARGET_ASM_DESTRUCTOR default_named_section_asm_out_destructor\n+#  else\n+#   define TARGET_ASM_DESTRUCTOR default_stabs_asm_out_destructor\n+#  endif\n+# endif\n+#endif\n+\n+#if defined(TARGET_ASM_CONSTRUCTOR) && defined(TARGET_ASM_DESTRUCTOR)\n+#define TARGET_HAVE_CTORS_DTORS true\n+#else\n+#define TARGET_HAVE_CTORS_DTORS false\n+#define TARGET_ASM_CONSTRUCTOR NULL\n+#define TARGET_ASM_DESTRUCTOR NULL\n+#endif\n+\n #ifdef TARGET_ASM_NAMED_SECTION\n #define TARGET_HAVE_NAMED_SECTIONS true\n #else\n@@ -46,7 +78,9 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \t\t\tTARGET_ASM_FUNCTION_END_PROLOGUE,\t\\\n \t\t\tTARGET_ASM_FUNCTION_BEGIN_EPILOGUE,\t\\\n \t\t\tTARGET_ASM_FUNCTION_EPILOGUE,\t\t\\\n-\t\t\tTARGET_ASM_NAMED_SECTION}\n+\t\t\tTARGET_ASM_NAMED_SECTION,\t\t\\\n+\t\t\tTARGET_ASM_CONSTRUCTOR,\t\t\t\\\n+\t\t\tTARGET_ASM_DESTRUCTOR}\n \n /* All in tree.c.  */\n #define TARGET_MERGE_DECL_ATTRIBUTES merge_decl_attributes\n@@ -80,5 +114,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_INIT_BUILTINS,\t\t\t\t\\\n   TARGET_EXPAND_BUILTIN,\t\t\t\\\n   TARGET_SECTION_TYPE_FLAGS,\t\t\t\\\n-  TARGET_HAVE_NAMED_SECTIONS\t\t\t\\\n+  TARGET_HAVE_NAMED_SECTIONS,\t\t\t\\\n+  TARGET_HAVE_CTORS_DTORS\t\t\t\\\n }"}, {"sha": "3e9b46cb9d0f13c0dc1bddb38a8c7410e117daf8", "filename": "gcc/target.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -72,6 +72,12 @@ struct gcc_target\n        the section; 0 if the default should be used.  */\n     void (* named_section) PARAMS ((const char *, unsigned int,\n \t\t\t\t    unsigned int));\n+\n+    /* Output a constructor for a symbol with a given priority.  */\n+    void (* constructor) PARAMS ((struct rtx_def *, int));\n+\n+    /* Output a destructor for a symbol with a given priority.  */\n+    void (* destructor) PARAMS ((struct rtx_def *, int));\n   } asm_out;\n \n   /* Given two decls, merge their attributes and return the result.  */\n@@ -120,6 +126,10 @@ struct gcc_target\n \n   /* True if arbitrary sections are supported.  */\n   bool have_named_sections;\n+\n+  /* True if \"native\" constructors and destructors are supported,\n+     false if we're using collect2 for the job.  */\n+  bool have_ctors_dtors;\n };\n \n extern struct gcc_target targetm;"}, {"sha": "7480cf68c7a8e51b72555e6bec547b2a9bf3abb0", "filename": "gcc/varasm.c", "status": "modified", "additions": 89, "deletions": 44, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc07db4b089b8b3df05261f1d7acbc96d2e720a/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=2cc07db4b089b8b3df05261f1d7acbc96d2e720a", "patch": "@@ -188,6 +188,12 @@ static enum in_section { no_section, in_text, in_data, in_named\n #ifdef BSS_SECTION_ASM_OP\n   , in_bss\n #endif\n+#ifdef CTORS_SECTION_ASM_OP\n+  , in_ctors\n+#endif\n+#ifdef DTORS_SECTION_ASM_OP\n+  , in_dtors\n+#endif\n #ifdef EXTRA_SECTIONS\n   , EXTRA_SECTIONS\n #endif\n@@ -813,88 +819,127 @@ assemble_asm (string)\n   fprintf (asm_out_file, \"\\t%s\\n\", TREE_STRING_POINTER (string));\n }\n \n-/* Record an element in the table of global destructors.  The argument\n-   should be a SYMBOL_REF of the function to be called.  */\n+/* Record an element in the table of global destructors.  SYMBOL is\n+   a SYMBOL_REF of the function to be called; PRIORITY is a number\n+   between 0 and MAX_INIT_PRIORITY.  */\n \n void\n-assemble_destructor (symbol, priority)\n+default_stabs_asm_out_destructor (symbol, priority)\n      rtx symbol;\n-     int priority;\n+     int priority ATTRIBUTE_UNUSED;\n {\n-  const char *name;\n+  /* Tell GNU LD that this is part of the static destructor set.\n+     This will work for any system that uses stabs, most usefully\n+     aout systems.  */\n+  fprintf (asm_out_file, \"%s\\\"___DTOR_LIST__\\\",22,0,0,\", ASM_STABS_OP);\n+  assemble_name (asm_out_file, XSTR (symbol, 0));\n+  fputc ('\\n', asm_out_file);\n+}\n \n-  if (GET_CODE (symbol) != SYMBOL_REF)\n-    abort ();\n-  name = XSTR (symbol, 0);\n+void\n+default_named_section_asm_out_destructor (symbol, priority)\n+     rtx symbol;\n+     int priority;\n+{\n+  const char *section = \".dtors\";\n+  char buf[16];\n \n-  if (priority != DEFAULT_INIT_PRIORITY\n-      && targetm.have_named_sections)\n+  /* ??? This only works reliably with the GNU linker.   */\n+  if (priority != DEFAULT_INIT_PRIORITY)\n     {\n-      char buf[15];\n       sprintf (buf, \".dtors.%.5u\",\n \t       /* Invert the numbering so the linker puts us in the proper\n \t\t  order; constructors are run from right to left, and the\n \t\t  linker sorts in increasing order.  */\n \t       MAX_INIT_PRIORITY - priority);\n-      named_section_flags (buf, SECTION_WRITE, POINTER_SIZE / BITS_PER_UNIT);\n-      assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n-      return;\n+      section = buf;\n     }\n \n-#ifdef ASM_OUTPUT_DESTRUCTOR\n-  ASM_OUTPUT_DESTRUCTOR (asm_out_file, name);\n-#else\n-  if (flag_gnu_linker)\n+  named_section_flags (section, SECTION_WRITE, POINTER_SIZE / BITS_PER_UNIT);\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+}\n+\n+#ifdef DTORS_SECTION_ASM_OP\n+void\n+dtors_section ()\n+{\n+  if (in_section != in_dtors)\n     {\n-      /* Now tell GNU LD that this is part of the static destructor set.  */\n-      /* This code works for any machine provided you use GNU as/ld.  */\n-      fprintf (asm_out_file, \"%s\\\"___DTOR_LIST__\\\",22,0,0,\", ASM_STABS_OP);\n-      assemble_name (asm_out_file, name);\n+      in_section = in_dtors;\n+      fputs (DTORS_SECTION_ASM_OP, asm_out_file);\n       fputc ('\\n', asm_out_file);\n     }\n-#endif\n }\n \n+void\n+default_dtor_section_asm_out_destructor (symbol, priority)\n+     rtx symbol;\n+     int priority ATTRIBUTE_UNUSED;\n+{\n+  dtors_section ();\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+}\n+#endif\n+\n /* Likewise for global constructors.  */\n \n void\n-assemble_constructor (symbol, priority)\n+default_stabs_asm_out_constructor (symbol, priority)\n      rtx symbol;\n-     int priority;\n+     int priority ATTRIBUTE_UNUSED;\n {\n-  const char *name;\n+  /* Tell GNU LD that this is part of the static destructor set.\n+     This will work for any system that uses stabs, most usefully\n+     aout systems.  */\n+  fprintf (asm_out_file, \"%s\\\"___CTOR_LIST__\\\",22,0,0,\", ASM_STABS_OP);\n+  assemble_name (asm_out_file, XSTR (symbol, 0));\n+  fputc ('\\n', asm_out_file);\n+}\n \n-  if (GET_CODE (symbol) != SYMBOL_REF)\n-    abort ();\n-  name = XSTR (symbol, 0);\n+void\n+default_named_section_asm_out_constructor (symbol, priority)\n+     rtx symbol;\n+     int priority;\n+{\n+  const char *section = \".ctors\";\n+  char buf[16];\n \n-  if (priority != DEFAULT_INIT_PRIORITY\n-      && targetm.have_named_sections)\n+  /* ??? This only works reliably with the GNU linker.   */\n+  if (priority != DEFAULT_INIT_PRIORITY)\n     {\n-      char buf[15];\n       sprintf (buf, \".ctors.%.5u\",\n \t       /* Invert the numbering so the linker puts us in the proper\n \t\t  order; constructors are run from right to left, and the\n \t\t  linker sorts in increasing order.  */\n \t       MAX_INIT_PRIORITY - priority);\n-      named_section_flags (buf, SECTION_WRITE, POINTER_SIZE / BITS_PER_UNIT);\n-      assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n-      return;\n+      section = buf;\n     }\n \n-#ifdef ASM_OUTPUT_CONSTRUCTOR\n-  ASM_OUTPUT_CONSTRUCTOR (asm_out_file, name);\n-#else\n-  if (flag_gnu_linker)\n+  named_section_flags (section, SECTION_WRITE, POINTER_SIZE / BITS_PER_UNIT);\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+}\n+\n+#ifdef CTORS_SECTION_ASM_OP\n+void\n+ctors_section ()\n+{\n+  if (in_section != in_ctors)\n     {\n-      /* Now tell GNU LD that this is part of the static constructor set.  */\n-      /* This code works for any machine provided you use GNU as/ld.  */\n-      fprintf (asm_out_file, \"%s\\\"___CTOR_LIST__\\\",22,0,0,\", ASM_STABS_OP);\n-      assemble_name (asm_out_file, name);\n+      in_section = in_ctors;\n+      fputs (CTORS_SECTION_ASM_OP, asm_out_file);\n       fputc ('\\n', asm_out_file);\n     }\n-#endif\n }\n+\n+void\n+default_ctor_section_asm_out_constructor (symbol, priority)\n+     rtx symbol;\n+     int priority ATTRIBUTE_UNUSED;\n+{\n+  ctors_section ();\n+  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n+}\n+#endif\n \f\n /* CONSTANT_POOL_BEFORE_FUNCTION may be defined as an expression with\n    a non-zero value if the constant pool should be output before the"}]}