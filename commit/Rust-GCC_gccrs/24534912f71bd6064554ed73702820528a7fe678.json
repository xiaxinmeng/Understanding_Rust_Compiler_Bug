{"sha": "24534912f71bd6064554ed73702820528a7fe678", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ1MzQ5MTJmNzFiZDYwNjQ1NTRlZDczNzAyODIwNTI4YTdmZTY3OA==", "commit": {"author": {"name": "Walter Lee", "email": "walt@tilera.com", "date": "2014-01-25T20:35:56Z"}, "committer": {"name": "Walter Lee", "email": "walt@gcc.gnu.org", "date": "2014-01-25T20:35:56Z"}, "message": "atomic.c (pre_atomic_barrier): Mark inline.\n\n2014-01-25  Walter Lee  <walt@tilera.com>\n\n            * config/tilepro/atomic.c (pre_atomic_barrier): Mark inline.\n            (post_atomic_barrier): Ditto.\n            (__fetch_and_do): New macro.\n            (__atomic_fetch_and_do): Use __fetch_and_do.\n            (__sync_fetch_and_do): New macro.\n            (__sync_fetch_and_add_4): New function.\n            (__sync_fetch_and_sub_4): New function.\n            (__sync_fetch_and_or_4): New function.\n            (__sync_fetch_and_and_4): New function.\n            (__sync_fetch_and_xor_4): New function.\n            (__sync_fetch_and_nand_4): New function.\n            (__sync_fetch_and_add_8): New function.\n            (__sync_fetch_and_sub_8): New function.\n            (__sync_fetch_and_or_8): New function.\n            (__sync_fetch_and_and_8): New function.\n            (__sync_fetch_and_xor_8): New function.\n            (__sync_fetch_and_nand_8): New function.\n            (__do_and_fetch): New macro.\n            (__atomic_do_and_fetch): Use __do_and_fetch.\n            (__sync_do_and_fetch): New macro.\n            (__sync_add_and_fetch_4): New function.\n            (__sync_sub_and_fetch_4): New function.\n            (__sync_or_and_fetch_4): New function.\n            (__sync_and_and_fetch_4): New function.\n            (__sync_xor_and_fetch_4): New function.\n            (__sync_nand_and_fetch_4): New function.\n            (__sync_add_and_fetch_8): New function.\n            (__sync_sub_and_fetch_8): New function.\n            (__sync_or_and_fetch_8): New function.\n            (__sync_and_and_fetch_8): New function.\n            (__sync_xor_and_fetch_8): New function.\n            (__sync_nand_and_fetch_8): New function.\n            (__sync_exchange_methods): New macro.\n            (__sync_val_compare_and_swap_4): New function.\n            (__sync_bool_compare_and_swap_4): New function.\n            (__sync_lock_test_and_test_4): New function.\n            (__sync_val_compare_and_swap_8): New function.\n            (__sync_bool_compare_and_swap_8): New function.\n            (__sync_lock_test_and_test_8): New function.\n            (__subword_cmpxchg_body): New macro.\n            (__atomic_compare_exchange_1): Use __subword_cmpxchg_body.\n            (__atomic_compare_exchange_2): Ditto.\n            (__sync_subword_cmpxchg): New macro.\n            (__sync_val_compare_and_swap_1): New function.\n            (__sync_bool_compare_and_swap_1): New function.\n            (__sync_val_compare_and_swap_2): New function.\n            (__sync_bool_compare_and_swap_2): New function.\n            (__atomic_subword): Rename to ...\n            (__subword): ... New name.\n            (__atomic_subword_fetch): Use __subword.\n            (__sync_subword_fetch): New macro.\n            (__sync_fetch_and_add_1): New function.\n            (__sync_fetch_and_sub_1): New function.\n            (__sync_fetch_and_or_1): New function.\n            (__sync_fetch_and_and_1): New function.\n            (__sync_fetch_and_xor_1): New function.\n            (__sync_fetch_and_nand_1): New function.\n            (__sync_fetch_and_add_2): New function.\n            (__sync_fetch_and_sub_2): New function.\n            (__sync_fetch_and_or_2): New function.\n            (__sync_fetch_and_and_2): New function.\n            (__sync_fetch_and_xor_2): New function.\n            (__sync_fetch_and_nand_2): New function.\n            (__sync_add_and_fetch_1): New function.\n            (__sync_sub_and_fetch_1): New function.\n            (__sync_or_and_fetch_1): New function.\n            (__sync_and_and_fetch_1): New function.\n            (__sync_xor_and_fetch_1): New function.\n            (__sync_nand_and_fetch_1): New function.\n            (__sync_add_and_fetch_2): New function.\n            (__sync_sub_and_fetch_2): New function.\n            (__sync_or_and_fetch_2): New function.\n            (__sync_and_and_fetch_2): New function.\n            (__sync_xor_and_fetch_2): New function.\n            (__sync_nand_and_fetch_2): New function.\n            (__atomic_subword_lock): Use __subword.\n            (__sync_subword_lock): New macro.\n            (__sync_lock_test_and_set_1): New function.\n            (__sync_lock_test_and_set_2): New function.\n\nFrom-SVN: r207087", "tree": {"sha": "19caeb0de4713bf1c46f44f930ca91789ff18ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19caeb0de4713bf1c46f44f930ca91789ff18ccf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24534912f71bd6064554ed73702820528a7fe678", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24534912f71bd6064554ed73702820528a7fe678", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24534912f71bd6064554ed73702820528a7fe678", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24534912f71bd6064554ed73702820528a7fe678/comments", "author": {"login": "walt-tilera", "id": 6602917, "node_id": "MDQ6VXNlcjY2MDI5MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6602917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/walt-tilera", "html_url": "https://github.com/walt-tilera", "followers_url": "https://api.github.com/users/walt-tilera/followers", "following_url": "https://api.github.com/users/walt-tilera/following{/other_user}", "gists_url": "https://api.github.com/users/walt-tilera/gists{/gist_id}", "starred_url": "https://api.github.com/users/walt-tilera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/walt-tilera/subscriptions", "organizations_url": "https://api.github.com/users/walt-tilera/orgs", "repos_url": "https://api.github.com/users/walt-tilera/repos", "events_url": "https://api.github.com/users/walt-tilera/events{/privacy}", "received_events_url": "https://api.github.com/users/walt-tilera/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4d6d3bc532e4b1b43f2a57aff835c416b462200d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d6d3bc532e4b1b43f2a57aff835c416b462200d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d6d3bc532e4b1b43f2a57aff835c416b462200d"}], "stats": {"total": 315, "additions": 274, "deletions": 41}, "files": [{"sha": "48253b232ac76a09f97876bce93bc37ca788cbb8", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24534912f71bd6064554ed73702820528a7fe678/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24534912f71bd6064554ed73702820528a7fe678/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=24534912f71bd6064554ed73702820528a7fe678", "patch": "@@ -1,3 +1,85 @@\n+2014-01-25  Walter Lee  <walt@tilera.com>\n+\n+\t* config/tilepro/atomic.c (pre_atomic_barrier): Mark inline.\n+\t(post_atomic_barrier): Ditto.\n+\t(__fetch_and_do): New macro.\n+\t(__atomic_fetch_and_do): Use __fetch_and_do.\n+\t(__sync_fetch_and_do): New macro.\n+\t(__sync_fetch_and_add_4): New function.\n+\t(__sync_fetch_and_sub_4): New function.\n+\t(__sync_fetch_and_or_4): New function.\n+\t(__sync_fetch_and_and_4): New function.\n+\t(__sync_fetch_and_xor_4): New function.\n+\t(__sync_fetch_and_nand_4): New function.\n+\t(__sync_fetch_and_add_8): New function.\n+\t(__sync_fetch_and_sub_8): New function.\n+\t(__sync_fetch_and_or_8): New function.\n+\t(__sync_fetch_and_and_8): New function.\n+\t(__sync_fetch_and_xor_8): New function.\n+\t(__sync_fetch_and_nand_8): New function.\n+\t(__do_and_fetch): New macro.\n+\t(__atomic_do_and_fetch): Use __do_and_fetch.\n+\t(__sync_do_and_fetch): New macro.\n+\t(__sync_add_and_fetch_4): New function.\n+\t(__sync_sub_and_fetch_4): New function.\n+\t(__sync_or_and_fetch_4): New function.\n+\t(__sync_and_and_fetch_4): New function.\n+\t(__sync_xor_and_fetch_4): New function.\n+\t(__sync_nand_and_fetch_4): New function.\n+\t(__sync_add_and_fetch_8): New function.\n+\t(__sync_sub_and_fetch_8): New function.\n+\t(__sync_or_and_fetch_8): New function.\n+\t(__sync_and_and_fetch_8): New function.\n+\t(__sync_xor_and_fetch_8): New function.\n+\t(__sync_nand_and_fetch_8): New function.\n+\t(__sync_exchange_methods): New macro.\n+\t(__sync_val_compare_and_swap_4): New function.\n+\t(__sync_bool_compare_and_swap_4): New function.\n+\t(__sync_lock_test_and_test_4): New function.\n+\t(__sync_val_compare_and_swap_8): New function.\n+\t(__sync_bool_compare_and_swap_8): New function.\n+\t(__sync_lock_test_and_test_8): New function.\n+\t(__subword_cmpxchg_body): New macro.\n+\t(__atomic_compare_exchange_1): Use __subword_cmpxchg_body.\n+\t(__atomic_compare_exchange_2): Ditto.\n+\t(__sync_subword_cmpxchg): New macro.\n+\t(__sync_val_compare_and_swap_1): New function.\n+\t(__sync_bool_compare_and_swap_1): New function.\n+\t(__sync_val_compare_and_swap_2): New function.\n+\t(__sync_bool_compare_and_swap_2): New function.\n+\t(__atomic_subword): Rename to ...\n+\t(__subword): ... New name.\n+\t(__atomic_subword_fetch): Use __subword.\n+\t(__sync_subword_fetch): New macro.\n+\t(__sync_fetch_and_add_1): New function.\n+\t(__sync_fetch_and_sub_1): New function.\n+\t(__sync_fetch_and_or_1): New function.\n+\t(__sync_fetch_and_and_1): New function.\n+\t(__sync_fetch_and_xor_1): New function.\n+\t(__sync_fetch_and_nand_1): New function.\n+\t(__sync_fetch_and_add_2): New function.\n+\t(__sync_fetch_and_sub_2): New function.\n+\t(__sync_fetch_and_or_2): New function.\n+\t(__sync_fetch_and_and_2): New function.\n+\t(__sync_fetch_and_xor_2): New function.\n+\t(__sync_fetch_and_nand_2): New function.\n+\t(__sync_add_and_fetch_1): New function.\n+\t(__sync_sub_and_fetch_1): New function.\n+\t(__sync_or_and_fetch_1): New function.\n+\t(__sync_and_and_fetch_1): New function.\n+\t(__sync_xor_and_fetch_1): New function.\n+\t(__sync_nand_and_fetch_1): New function.\n+\t(__sync_add_and_fetch_2): New function.\n+\t(__sync_sub_and_fetch_2): New function.\n+\t(__sync_or_and_fetch_2): New function.\n+\t(__sync_and_and_fetch_2): New function.\n+\t(__sync_xor_and_fetch_2): New function.\n+\t(__sync_nand_and_fetch_2): New function.\n+\t(__atomic_subword_lock): Use __subword.\n+\t(__sync_subword_lock): New macro.\n+\t(__sync_lock_test_and_set_1): New function.\n+\t(__sync_lock_test_and_set_2): New function.\n+\n 2014-01-25  Walter Lee  <walt@tilera.com>\n \n \t* config/tilepro/atomic.c (BIT_OFFSET): Define."}, {"sha": "2df73b5116418b3eb9faa1db688ad5bae7bafed7", "filename": "libgcc/config/tilepro/atomic.c", "status": "modified", "additions": 192, "deletions": 41, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24534912f71bd6064554ed73702820528a7fe678/libgcc%2Fconfig%2Ftilepro%2Fatomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24534912f71bd6064554ed73702820528a7fe678/libgcc%2Fconfig%2Ftilepro%2Fatomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ftilepro%2Fatomic.c?ref=24534912f71bd6064554ed73702820528a7fe678", "patch": "@@ -29,7 +29,7 @@\n /* This code should be inlined by the compiler, but for now support\n    it as out-of-line methods in libgcc.  */\n \n-static void\n+static inline void\n pre_atomic_barrier (int model)\n {\n   switch ((enum memmodel) model)\n@@ -45,7 +45,7 @@ pre_atomic_barrier (int model)\n   return;\n }\n \n-static void\n+static inline void\n post_atomic_barrier (int model)\n {\n   switch ((enum memmodel) model)\n@@ -63,16 +63,21 @@ post_atomic_barrier (int model)\n \n #define __unused __attribute__((unused))\n \n-#define __atomic_fetch_and_do(type, size, opname)\t\t\\\n-type\t\t\t\t\t\t\t\t\\\n-__atomic_fetch_##opname##_##size(type* p, type i, int model)\t\\\n+#define __fetch_and_do(proto, type, size, opname, top, bottom)\t\\\n+proto\t\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n-  pre_atomic_barrier(model);\t\t\t\t\t\\\n+  top;\t\t\t\t\t\t\t\t\\\n   type rv = arch_atomic_##opname(p, i);\t\t\t\t\\\n-  post_atomic_barrier(model);\t\t\t\t\t\\\n+  bottom;\t\t\t\t\t\t\t\\\n   return rv;\t\t\t\t\t\t\t\\\n }\n \n+#define __atomic_fetch_and_do(type, size, opname)\t\t\t\\\n+  __fetch_and_do(type __atomic_fetch_##opname##_##size(type* p, type i, int model), \\\n+\t\t type, size, opname,\t\t\t\t\t\\\n+\t\t pre_atomic_barrier(model),\t\t\t\t\\\n+\t\t post_atomic_barrier(model))\t\t\t\t\\\n+\n __atomic_fetch_and_do (int, 4, add)\n __atomic_fetch_and_do (int, 4, sub)\n __atomic_fetch_and_do (int, 4, or)\n@@ -86,15 +91,40 @@ __atomic_fetch_and_do (long long, 8, and)\n __atomic_fetch_and_do (long long, 8, xor)\n __atomic_fetch_and_do (long long, 8, nand)\n \n-#define __atomic_do_and_fetch(type, size, opname, op, op2)\t\\\n-type\t\t\t\t\t\t\t\t\\\n-__atomic_##opname##_fetch_##size(type* p, type i, int model)\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  pre_atomic_barrier(model);\t\t\t\t\t\\\n-  type rv = op2 (arch_atomic_##opname(p, i) op i);\t\t\\\n-  post_atomic_barrier(model);\t\t\t\t\t\\\n-  return rv;\t\t\t\t\t\t\t\\\n+#define __sync_fetch_and_do(type, size, opname)\t\t\t\t\\\n+  __fetch_and_do(type __sync_fetch_and_##opname##_##size(type* p, type i), \\\n+\t\t type, size, opname,\t\t\t\t\t\\\n+\t\t arch_atomic_write_barrier(),\t\t\t\t\\\n+\t\t arch_atomic_read_barrier())\n+\n+__sync_fetch_and_do (int, 4, add)\n+__sync_fetch_and_do (int, 4, sub)\n+__sync_fetch_and_do (int, 4, or)\n+__sync_fetch_and_do (int, 4, and)\n+__sync_fetch_and_do (int, 4, xor)\n+__sync_fetch_and_do (int, 4, nand)\n+__sync_fetch_and_do (long long, 8, add)\n+__sync_fetch_and_do (long long, 8, sub)\n+__sync_fetch_and_do (long long, 8, or)\n+__sync_fetch_and_do (long long, 8, and)\n+__sync_fetch_and_do (long long, 8, xor)\n+__sync_fetch_and_do (long long, 8, nand)\n+\n+#define __do_and_fetch(proto, type, size, opname, op, op2, top, bottom)\t\\\n+proto\t\t\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  top;\t\t\t\t\t\t\t\t\t\\\n+  type rv = op2 (arch_atomic_##opname(p, i) op i);\t\t\t\\\n+  bottom;\t\t\t\t\t\t\t\t\\\n+  return rv;\t\t\t\t\t\t\t\t\\\n }\n+\n+#define __atomic_do_and_fetch(type, size, opname, op, op2)\t\t\\\n+  __do_and_fetch(type __atomic_##opname##_fetch_##size(type* p, type i, int model), \\\n+\t\t type, size, opname, op, op2,\t\t\t\t\\\n+\t\t pre_atomic_barrier(model),\t\t\t\t\\\n+\t\t post_atomic_barrier(model))\t\t\t\t\\\n+\n __atomic_do_and_fetch (int, 4, add, +, )\n __atomic_do_and_fetch (int, 4, sub, -, )\n __atomic_do_and_fetch (int, 4, or, |, )\n@@ -108,6 +138,25 @@ __atomic_do_and_fetch (long long, 8, and, &, )\n __atomic_do_and_fetch (long long, 8, xor, |, )\n __atomic_do_and_fetch (long long, 8, nand, &, ~)\n \n+#define __sync_do_and_fetch(type, size, opname, op, op2)\t\t\\\n+  __do_and_fetch(type __sync_##opname##_and_fetch_##size(type* p, type i), \\\n+\t\t type, size, opname, op, op2,\t\t\t\t\\\n+\t\t arch_atomic_write_barrier(),\t\t\t\t\\\n+\t\t arch_atomic_read_barrier())\t\t\t\t\\\n+\n+__sync_do_and_fetch (int, 4, add, +, )\n+__sync_do_and_fetch (int, 4, sub, -, )\n+__sync_do_and_fetch (int, 4, or, |, )\n+__sync_do_and_fetch (int, 4, and, &, )\n+__sync_do_and_fetch (int, 4, xor, |, )\n+__sync_do_and_fetch (int, 4, nand, &, ~)\n+__sync_do_and_fetch (long long, 8, add, +, )\n+__sync_do_and_fetch (long long, 8, sub, -, )\n+__sync_do_and_fetch (long long, 8, or, |, )\n+__sync_do_and_fetch (long long, 8, and, &, )\n+__sync_do_and_fetch (long long, 8, xor, |, )\n+__sync_do_and_fetch (long long, 8, nand, &, ~)\n+\n #define __atomic_exchange_methods(type, size)\t\t\t\t\\\n bool\t\t\t\t\t\t\t\t\t\\\n __atomic_compare_exchange_##size(volatile type* ptr, type* oldvalp,\t\\\n@@ -135,6 +184,36 @@ __atomic_exchange_##size(volatile type* ptr, type val, int model)\t\\\n __atomic_exchange_methods (int, 4)\n __atomic_exchange_methods (long long, 8)\n \n+#define __sync_exchange_methods(type, size)\t\t\t\t\\\n+type\t\t\t\t\t\t\t\t\t\\\n+__sync_val_compare_and_swap_##size(type* ptr, type oldval, type newval)\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  arch_atomic_write_barrier();\t\t\t\t\t\t\\\n+  type retval = arch_atomic_val_compare_and_exchange(ptr, oldval, newval); \\\n+  arch_atomic_read_barrier();\t\t\t\t\t\t\\\n+  return retval;\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+bool\t\t\t\t\t\t\t\t\t\\\n+__sync_bool_compare_and_swap_##size(type* ptr, type oldval, type newval) \\\n+{\t\t\t\t\t\t\t\t\t\\\n+  arch_atomic_write_barrier();\t\t\t\t\t\t\\\n+  bool retval = arch_atomic_bool_compare_and_exchange(ptr, oldval, newval); \\\n+  arch_atomic_read_barrier();\t\t\t\t\t\t\\\n+  return retval;\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+type\t\t\t\t\t\t\t\t\t\\\n+__sync_lock_test_and_set_##size(type* ptr, type val)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  type retval = arch_atomic_exchange(ptr, val);\t\t\t\t\\\n+  arch_atomic_acquire_barrier_value(retval);\t\t\t\t\\\n+  return retval;\t\t\t\t\t\t\t\\\n+}\n+\n+__sync_exchange_methods (int, 4)\n+__sync_exchange_methods (long long, 8)\n+\n #ifdef __LITTLE_ENDIAN__\n #define BIT_OFFSET(n, type) ((n) * 8)\n #else\n@@ -147,38 +226,66 @@ __atomic_exchange_methods (long long, 8)\n #define u8 unsigned char\n #define u16 unsigned short\n \n+#define __subword_cmpxchg_body(type, size, ptr, guess, val)\t\t\\\n+  ({\t\t\t\t\t\t\t\t\t\\\n+    unsigned int *p = (unsigned int *)((unsigned long)ptr & ~3UL);\t\\\n+    const int shift = BIT_OFFSET((unsigned long)ptr & 3UL, type);\t\\\n+    const unsigned int valmask = (1 << (sizeof(type) * 8)) - 1;\t\t\\\n+    const unsigned int bgmask = ~(valmask << shift);\t\t\t\\\n+    unsigned int oldword = *p;\t\t\t\t\t\t\\\n+    type oldval = (oldword >> shift) & valmask;\t\t\t\t\\\n+    if (__builtin_expect((oldval == guess), 1)) {\t\t\t\\\n+      unsigned int word = (oldword & bgmask) | ((val & valmask) << shift); \\\n+      oldword = arch_atomic_val_compare_and_exchange(p, oldword, word);\t\\\n+      oldval = (oldword >> shift) & valmask;\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+    oldval;\t\t\t\t\t\t\t\t\\\n+  })\t\t\t\t\t\t\t\t\t\\\n+\n #define __atomic_subword_cmpxchg(type, size)\t\t\t\t\\\n   \t\t\t\t\t\t\t\t\t\\\n bool\t\t\t\t\t\t\t\t\t\\\n-__atomic_compare_exchange_##size(volatile type* ptr, type* guess,\t\\\n+__atomic_compare_exchange_##size(volatile type* ptr, type* guess_ptr,\t\\\n \t\t\t\t type val, bool weak __unused, int models, \\\n \t\t\t\t int modelf __unused)\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   pre_atomic_barrier(models);\t\t\t\t\t\t\\\n-  unsigned int *p = (unsigned int *)((unsigned long)ptr & ~3UL);\t\\\n-  const int shift = BIT_OFFSET((unsigned long)ptr & 3UL, type);\t\t\\\n-  const unsigned int valmask = (1 << (sizeof(type) * 8)) - 1;\t\t\\\n-  const unsigned int bgmask = ~(valmask << shift);\t\t\t\\\n-  unsigned int oldword = *p;\t\t\t\t\t\t\\\n-  type oldval = (oldword >> shift) & valmask;\t\t\t\t\\\n-  if (__builtin_expect((oldval == *guess), 1)) {\t\t\t\\\n-    unsigned int word = (oldword & bgmask) | ((val & valmask) << shift); \\\n-    oldword = arch_atomic_val_compare_and_exchange(p, oldword, word);\t\\\n-    oldval = (oldword >> shift) & valmask;\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n+  type guess = *guess_ptr;\t\t\t\t\t\t\\\n+  type oldval = __subword_cmpxchg_body(type, size, ptr, guess, val);\t\\\n   post_atomic_barrier(models);\t\t\t\t\t\t\\\n-  bool success = (oldval == *guess);\t\t\t\t\t\\\n-  *guess = oldval;\t\t\t\t\t\t\t\\\n+  bool success = (oldval == guess);\t\t\t\t\t\\\n+  *guess_ptr = oldval;\t\t\t\t\t\t\t\\\n   return success;\t\t\t\t\t\t\t\\\n }\n \n __atomic_subword_cmpxchg (u8, 1)\n __atomic_subword_cmpxchg (u16, 2)\n \n+#define __sync_subword_cmpxchg(type, size)\t\t\t\t\\\n+  \t\t\t\t\t\t\t\t\t\\\n+type\t\t\t\t\t\t\t\t\t\\\n+__sync_val_compare_and_swap_##size(type* ptr, type guess, type val)\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  arch_atomic_write_barrier();\t\t\t\t\t\t\\\n+  type oldval = __subword_cmpxchg_body(type, size, ptr, guess, val);\t\\\n+  arch_atomic_read_barrier();\t\t\t\t\t\t\\\n+  return oldval;\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+bool\t\t\t\t\t\t\t\t\t\\\n+__sync_bool_compare_and_swap_##size(type* ptr, type guess, type val)\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  type oldval = __sync_val_compare_and_swap_##size(ptr, guess, val);\t\\\n+  return oldval == guess;\t\t\t\t\t\t\\\n+}\n+\n+__sync_subword_cmpxchg (u8, 1)\n+__sync_subword_cmpxchg (u16, 2)\n+\n /* For the atomic-update subword methods, we use the same approach as\n    above, but we retry until we succeed if the compare-and-exchange\n    fails.  */\n-#define __atomic_subword(type, proto, top, expr, bottom)\t\t\\\n+#define __subword(type, proto, top, expr, bottom)\t\t\t\\\n proto\t\t\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   top\t\t\t\t\t\t\t\t\t\\\n@@ -199,11 +306,11 @@ proto\t\t\t\t\t\t\t\t\t\\\n }\n \n #define __atomic_subword_fetch(type, funcname, expr, retval)\t\t\\\n-  __atomic_subword(type,\t\t\t\t\t\t\\\n-\t\t   type __atomic_ ## funcname(volatile type *ptr, type i, int model), \\\n-\t\t   pre_atomic_barrier(model);,\t\t\t\t\\\n-\t\t   expr,\t\t\t\t\t\t\\\n-\t\t   post_atomic_barrier(model); return retval;)\n+  __subword(type,\t\t\t\t\t\t\t\\\n+\t    type __atomic_ ## funcname(volatile type *ptr, type i, int model), \\\n+\t    pre_atomic_barrier(model);,\t\t\t\t\t\\\n+\t    expr,\t\t\t\t\t\t\t\\\n+\t    post_atomic_barrier(model); return retval;)\n \n __atomic_subword_fetch (u8, fetch_add_1, oldval + i, oldval)\n __atomic_subword_fetch (u8, fetch_sub_1, oldval - i, oldval)\n@@ -233,13 +340,57 @@ __atomic_subword_fetch (u16, and_fetch_2, oldval & i, val)\n __atomic_subword_fetch (u16, xor_fetch_2, oldval ^ i, val)\n __atomic_subword_fetch (u16, nand_fetch_2, ~(oldval & i), val)\n \n+#define __sync_subword_fetch(type, funcname, expr, retval)\t\\\n+  __subword(type,\t\t\t\t\t\t\\\n+\t    type __sync_ ## funcname(type *ptr, type i),\t\\\n+\t    arch_atomic_read_barrier();,\t\t\t\\\n+\t    expr,\t\t\t\t\t\t\\\n+\t    arch_atomic_write_barrier(); return retval;)\n+\n+__sync_subword_fetch (u8, fetch_and_add_1, oldval + i, oldval)\n+__sync_subword_fetch (u8, fetch_and_sub_1, oldval - i, oldval)\n+__sync_subword_fetch (u8, fetch_and_or_1, oldval | i, oldval)\n+__sync_subword_fetch (u8, fetch_and_and_1, oldval & i, oldval)\n+__sync_subword_fetch (u8, fetch_and_xor_1, oldval ^ i, oldval)\n+__sync_subword_fetch (u8, fetch_and_nand_1, ~(oldval & i), oldval)\n+\n+__sync_subword_fetch (u16, fetch_and_add_2, oldval + i, oldval)\n+__sync_subword_fetch (u16, fetch_and_sub_2, oldval - i, oldval)\n+__sync_subword_fetch (u16, fetch_and_or_2, oldval | i, oldval)\n+__sync_subword_fetch (u16, fetch_and_and_2, oldval & i, oldval)\n+__sync_subword_fetch (u16, fetch_and_xor_2, oldval ^ i, oldval)\n+__sync_subword_fetch (u16, fetch_and_nand_2, ~(oldval & i), oldval)\n+\n+__sync_subword_fetch (u8, add_and_fetch_1, oldval + i, val)\n+__sync_subword_fetch (u8, sub_and_fetch_1, oldval - i, val)\n+__sync_subword_fetch (u8, or_and_fetch_1, oldval | i, val)\n+__sync_subword_fetch (u8, and_and_fetch_1, oldval & i, val)\n+__sync_subword_fetch (u8, xor_and_fetch_1, oldval ^ i, val)\n+__sync_subword_fetch (u8, nand_and_fetch_1, ~(oldval & i), val)\n+\n+__sync_subword_fetch (u16, add_and_fetch_2, oldval + i, val)\n+__sync_subword_fetch (u16, sub_and_fetch_2, oldval - i, val)\n+__sync_subword_fetch (u16, or_and_fetch_2, oldval | i, val)\n+__sync_subword_fetch (u16, and_and_fetch_2, oldval & i, val)\n+__sync_subword_fetch (u16, xor_and_fetch_2, oldval ^ i, val)\n+__sync_subword_fetch (u16, nand_and_fetch_2, ~(oldval & i), val)\n+\n #define __atomic_subword_lock(type, size)\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-__atomic_subword(type,\t\t\t\t\t\t\t\\\n-\t\t type __atomic_exchange_##size(volatile type* ptr, type nval, int model), \\\n-\t         pre_atomic_barrier(model);,\t\t\t\t\\\n-\t         nval,\t\t\t\t\t\t\t\\\n-\t         post_atomic_barrier(model); return oldval;)\n+  __subword(type,\t\t\t\t\t\t\t\\\n+\t    type __atomic_exchange_##size(volatile type* ptr, type nval, int model), \\\n+\t    pre_atomic_barrier(model);,\t\t\t\t\t\\\n+\t    nval,\t\t\t\t\t\t\t\\\n+\t    post_atomic_barrier(model); return oldval;)\n \n __atomic_subword_lock (u8, 1)\n __atomic_subword_lock (u16, 2)\n+\n+#define __sync_subword_lock(type, size)\t\t\t\t\t\\\n+  __subword(type,\t\t\t\t\t\t\t\\\n+\t    type __sync_lock_test_and_set_##size(type* ptr, type nval), \\\n+\t    ,\t\t\t\t\t\t\t\t\\\n+\t    nval,\t\t\t\t\t\t\t\\\n+\t    arch_atomic_acquire_barrier_value(oldval); return oldval;)\n+\n+__sync_subword_lock (u8, 1)\n+__sync_subword_lock (u16, 2)"}]}