{"sha": "f7da60971fb6e0f818d91fc65aca0c7f4a3e2443", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdkYTYwOTcxZmI2ZTBmODE4ZDkxZmM2NWFjYTBjN2Y0YTNlMjQ0Mw==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-12-27T19:34:34Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-12-27T19:34:34Z"}, "message": "90th Cygnus<->FSF quick merge\n\nFrom-SVN: r13343", "tree": {"sha": "906f237670a8bf8653783914cb9d2e783b51749f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/906f237670a8bf8653783914cb9d2e783b51749f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7da60971fb6e0f818d91fc65aca0c7f4a3e2443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7da60971fb6e0f818d91fc65aca0c7f4a3e2443", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7da60971fb6e0f818d91fc65aca0c7f4a3e2443", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7da60971fb6e0f818d91fc65aca0c7f4a3e2443/comments", "author": null, "committer": null, "parents": [{"sha": "63d7d7a17786a68f15b57081941cc2c65d35fbf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d7d7a17786a68f15b57081941cc2c65d35fbf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d7d7a17786a68f15b57081941cc2c65d35fbf8"}], "stats": {"total": 94, "additions": 63, "deletions": 31}, "files": [{"sha": "8c2b64117c3da775f3c7ee2158705f9d2cb3e2c4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7da60971fb6e0f818d91fc65aca0c7f4a3e2443/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7da60971fb6e0f818d91fc65aca0c7f4a3e2443/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f7da60971fb6e0f818d91fc65aca0c7f4a3e2443", "patch": "@@ -1,9 +1,30 @@\n+Fri Dec 27 10:31:40 1996  Paul Eggert  <eggert@twinsun.com>\n+\n+\t* Make-lang.in (g++spec.o): Don't use $< with an explicit target;\n+\tthis isn't portable to some versions of `make' (e.g. Solaris 2.5.1).\n+\n+Tue Dec 24 10:24:03 1996  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* decl.c (grokvardecl): Avoid ANSI style initialization.\n+\n+Sun Dec 22 04:22:06 1996  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (tsubst): Tweak arg types for a FUNCTION_TYPE.\n+\n+Fri Dec 20 17:09:25 1996  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (instantiate_class_template): Call grok_{ctor,op}_properties.\n+\n Fri Dec 20 12:17:12 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \n \t* g++spec.c (lang_specific_driver): Put missing hyphen in front of\n \targuments we compare against.  Start the count of I at 1, not 0,\n \tsince argv[0] is still the command.\n \n+Thu Dec 19 11:53:57 1996  Stan Shebs  <shebs@andros.cygnus.com>\n+\n+\t* lang-specs.h: Accept .cp as an C++ extension.\n+\n Mon Dec 16 22:43:31 1996  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \n \t* cp-tree.h (ptr_reasonably_similar): Add decl."}, {"sha": "d10f9779724be4e7a0af567d68fcece6958e9434", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7da60971fb6e0f818d91fc65aca0c7f4a3e2443/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7da60971fb6e0f818d91fc65aca0c7f4a3e2443/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=f7da60971fb6e0f818d91fc65aca0c7f4a3e2443", "patch": "@@ -76,7 +76,7 @@ g++.c: $(srcdir)/gcc.c\n \tln -s $(srcdir)/gcc.c $@ || cp $(srcdir)/gcc.c $@\n \n g++spec.o: $(srcdir)/cp/g++spec.c\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/cp/g++spec.c\n \n # N.B.: This is a copy of the gcc.o rule, with -DLANG_SPECIFIC_DRIVER added.\n # It'd be nice if we could find an easier way to do this---rather than have"}, {"sha": "4d8d60f8eef0ea6b5a6c9f53bf713023f603373e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7da60971fb6e0f818d91fc65aca0c7f4a3e2443/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7da60971fb6e0f818d91fc65aca0c7f4a3e2443/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f7da60971fb6e0f818d91fc65aca0c7f4a3e2443", "patch": "@@ -1947,6 +1947,7 @@ extern tree build_new_method_call\t\tPROTO((tree, tree, tree, tree, int));\n extern tree build_user_type_conversion\t\tPROTO((tree, tree, int));\n extern tree build_new_function_call\t\tPROTO((tree, tree, tree));\n extern tree build_new_op\t\t\tPROTO((enum tree_code, int, tree, tree, tree));\n+extern tree type_decays_to\t\t\tPROTO((tree));\n \n /* in class.c */\n extern tree build_vbase_pointer\t\t\tPROTO((tree, tree));"}, {"sha": "6bb865c1b4d168714e86923a45e092b7c66de4b0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7da60971fb6e0f818d91fc65aca0c7f4a3e2443/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7da60971fb6e0f818d91fc65aca0c7f4a3e2443/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f7da60971fb6e0f818d91fc65aca0c7f4a3e2443", "patch": "@@ -7227,7 +7227,9 @@ grokvardecl (type, declarator, specbits_in, initialized, constp)\n      int constp;\n {\n   tree decl;\n-  RID_BIT_TYPE specbits = *specbits_in;\n+  RID_BIT_TYPE specbits;\n+\n+  specbits = *specbits_in;\n \n   if (TREE_CODE (type) == OFFSET_TYPE)\n     {\n@@ -9935,7 +9937,7 @@ grok_ctor_properties (ctype, decl)\n       if (TREE_CHAIN (parmtypes) != NULL_TREE\n \t  && TREE_CHAIN (parmtypes) == void_list_node)\n \t{\n-\t  cp_error (\"invalid constructor; you probably meant `%T (%T&)'\",\n+\t  cp_error (\"invalid constructor; you probably meant `%T (const %T&)'\",\n \t\t    ctype, ctype);\n \t  SET_IDENTIFIER_ERROR_LOCUS (DECL_NAME (decl), ctype);\n "}, {"sha": "b3b6c0b6833f22e86e288bdd38eef6dd197aabc8", "filename": "gcc/cp/lang-specs.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7da60971fb6e0f818d91fc65aca0c7f4a3e2443/gcc%2Fcp%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7da60971fb6e0f818d91fc65aca0c7f4a3e2443/gcc%2Fcp%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-specs.h?ref=f7da60971fb6e0f818d91fc65aca0c7f4a3e2443", "patch": "@@ -22,6 +22,7 @@ Boston, MA 02111-1307, USA.  */\n    g++.  */\n \n   {\".cc\", \"@c++\"},\n+  {\".cp\", \"@c++\"},\n   {\".cxx\", \"@c++\"},\n   {\".cpp\", \"@c++\"},\n   {\".c++\", \"@c++\"},"}, {"sha": "76c10f734067540ec008c7ffbd7ccd570ab886eb", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 35, "deletions": 28, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7da60971fb6e0f818d91fc65aca0c7f4a3e2443/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7da60971fb6e0f818d91fc65aca0c7f4a3e2443/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f7da60971fb6e0f818d91fc65aca0c7f4a3e2443", "patch": "@@ -1125,6 +1125,32 @@ instantiate_class_template (type)\n       CLASSTYPE_VTABLE_NEEDS_WRITING (type) = 1;\n     }\n \n+  TYPE_HAS_CONSTRUCTOR (type) = TYPE_HAS_CONSTRUCTOR (pattern);\n+  TYPE_HAS_DESTRUCTOR (type) = TYPE_HAS_DESTRUCTOR (pattern);\n+  TYPE_HAS_ASSIGNMENT (type) = TYPE_HAS_ASSIGNMENT (pattern);\n+  TYPE_OVERLOADS_CALL_EXPR (type) = TYPE_OVERLOADS_CALL_EXPR (pattern);\n+  TYPE_OVERLOADS_ARRAY_REF (type) = TYPE_OVERLOADS_ARRAY_REF (pattern);\n+  TYPE_OVERLOADS_ARROW (type) = TYPE_OVERLOADS_ARROW (pattern);\n+  TYPE_GETS_NEW (type) = TYPE_GETS_NEW (pattern);\n+  TYPE_GETS_DELETE (type) = TYPE_GETS_DELETE (pattern);\n+  TYPE_VEC_DELETE_TAKES_SIZE (type) = TYPE_VEC_DELETE_TAKES_SIZE (pattern);\n+  TYPE_HAS_ASSIGN_REF (type) = TYPE_HAS_ASSIGN_REF (pattern);\n+  TYPE_HAS_CONST_ASSIGN_REF (type) = TYPE_HAS_CONST_ASSIGN_REF (pattern);\n+  TYPE_HAS_ABSTRACT_ASSIGN_REF (type) = TYPE_HAS_ABSTRACT_ASSIGN_REF (pattern);\n+  TYPE_HAS_INIT_REF (type) = TYPE_HAS_INIT_REF (pattern);\n+  TYPE_HAS_CONST_INIT_REF (type) = TYPE_HAS_CONST_INIT_REF (pattern);\n+  TYPE_GETS_INIT_AGGR (type) = TYPE_GETS_INIT_AGGR (pattern);\n+  TYPE_HAS_DEFAULT_CONSTRUCTOR (type) = TYPE_HAS_DEFAULT_CONSTRUCTOR (pattern);\n+  TYPE_HAS_CONVERSION (type) = TYPE_HAS_CONVERSION (pattern);\n+  TYPE_USES_COMPLEX_INHERITANCE (type)\n+    = TYPE_USES_COMPLEX_INHERITANCE (pattern);\n+  TYPE_USES_MULTIPLE_INHERITANCE (type)\n+    = TYPE_USES_MULTIPLE_INHERITANCE (pattern);\n+  TYPE_USES_VIRTUAL_BASECLASSES (type)\n+    = TYPE_USES_VIRTUAL_BASECLASSES (pattern);\n+  TYPE_PACKED (type) = TYPE_PACKED (pattern);\n+  TYPE_ALIGN (type) = TYPE_ALIGN (pattern);\n+\n   {\n     tree binfo = TYPE_BINFO (type);\n     tree pbases = TYPE_BINFO_BASETYPES (pattern);\n@@ -1214,6 +1240,13 @@ instantiate_class_template (type)\n       }\n \n   TYPE_METHODS (type) = tsubst_chain (TYPE_METHODS (pattern), args);\n+  for (t = TYPE_METHODS (type); t; t = TREE_CHAIN (t))\n+    {\n+      if (DECL_CONSTRUCTOR_P (t))\n+\tgrok_ctor_properties (type, t);\n+      else if (IDENTIFIER_OPNAME_P (DECL_NAME (t)))\n+\tgrok_op_properties (t, DECL_VIRTUAL_P (t), 0);\n+    }\n \n   DECL_FRIENDLIST (TYPE_MAIN_DECL (type))\n     = tsubst (DECL_FRIENDLIST (TYPE_MAIN_DECL (pattern)),\n@@ -1242,32 +1275,6 @@ instantiate_class_template (type)\n       }\n   }\n \n-  TYPE_HAS_CONSTRUCTOR (type) = TYPE_HAS_CONSTRUCTOR (pattern);\n-  TYPE_HAS_DESTRUCTOR (type) = TYPE_HAS_DESTRUCTOR (pattern);\n-  TYPE_HAS_ASSIGNMENT (type) = TYPE_HAS_ASSIGNMENT (pattern);\n-  TYPE_OVERLOADS_CALL_EXPR (type) = TYPE_OVERLOADS_CALL_EXPR (pattern);\n-  TYPE_OVERLOADS_ARRAY_REF (type) = TYPE_OVERLOADS_ARRAY_REF (pattern);\n-  TYPE_OVERLOADS_ARROW (type) = TYPE_OVERLOADS_ARROW (pattern);\n-  TYPE_GETS_NEW (type) = TYPE_GETS_NEW (pattern);\n-  TYPE_GETS_DELETE (type) = TYPE_GETS_DELETE (pattern);\n-  TYPE_VEC_DELETE_TAKES_SIZE (type) = TYPE_VEC_DELETE_TAKES_SIZE (pattern);\n-  TYPE_HAS_ASSIGN_REF (type) = TYPE_HAS_ASSIGN_REF (pattern);\n-  TYPE_HAS_CONST_ASSIGN_REF (type) = TYPE_HAS_CONST_ASSIGN_REF (pattern);\n-  TYPE_HAS_ABSTRACT_ASSIGN_REF (type) = TYPE_HAS_ABSTRACT_ASSIGN_REF (pattern);\n-  TYPE_HAS_INIT_REF (type) = TYPE_HAS_INIT_REF (pattern);\n-  TYPE_HAS_CONST_INIT_REF (type) = TYPE_HAS_CONST_INIT_REF (pattern);\n-  TYPE_GETS_INIT_AGGR (type) = TYPE_GETS_INIT_AGGR (pattern);\n-  TYPE_HAS_DEFAULT_CONSTRUCTOR (type) = TYPE_HAS_DEFAULT_CONSTRUCTOR (pattern);\n-  TYPE_HAS_CONVERSION (type) = TYPE_HAS_CONVERSION (pattern);\n-  TYPE_USES_COMPLEX_INHERITANCE (type)\n-    = TYPE_USES_COMPLEX_INHERITANCE (pattern);\n-  TYPE_USES_MULTIPLE_INHERITANCE (type)\n-    = TYPE_USES_MULTIPLE_INHERITANCE (pattern);\n-  TYPE_USES_VIRTUAL_BASECLASSES (type)\n-    = TYPE_USES_VIRTUAL_BASECLASSES (pattern);\n-  TYPE_PACKED (type) = TYPE_PACKED (pattern);\n-  TYPE_ALIGN (type) = TYPE_ALIGN (pattern);\n-\n   if (! uses_template_parms (type))\n     {\n       tree tmp;\n@@ -1803,8 +1810,8 @@ tsubst (t, args, nargs, in_decl)\n \t    for (; values && values != void_list_node;\n \t\t values = TREE_CHAIN (values))\n \t      {\n-\t\ttree value\n-\t\t  = tsubst (TREE_VALUE (values), args, nargs, in_decl);\n+\t\ttree value = TYPE_MAIN_VARIANT (type_decays_to\n+\t\t  (tsubst (TREE_VALUE (values), args, nargs, in_decl)));\n \t\ttree purpose = tsubst_expr (TREE_PURPOSE (values),\n \t\t\t\t\t    args, nargs, in_decl);\n \t\ttree x = build_tree_list (purpose, value);"}]}