{"sha": "730c436a33f0978a689c866df072ea3540ed037d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMwYzQzNmEzM2YwOTc4YTY4OWM4NjZkZjA3MmVhMzU0MGVkMDM3ZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-03-20T18:19:18Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-03-20T18:19:18Z"}, "message": "re PR lto/65475 (ICE in odr_vtable_hasher::equal (Segmentation fault))\n\n\n\tPR ipa/65475\n\t* ipa-devirt.c (add_type_duplicate): Prevail polymorphic type over\n\tnon-polymorphic\n\t* g++.dg/lto/pr65475_0.C: New testcase.\n\t* g++.dg/lto/pr65475_1.C: New testcase.\n\nFrom-SVN: r221542", "tree": {"sha": "cb30232d7f664d864a892dafa1975ac41d539179", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb30232d7f664d864a892dafa1975ac41d539179"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/730c436a33f0978a689c866df072ea3540ed037d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/730c436a33f0978a689c866df072ea3540ed037d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/730c436a33f0978a689c866df072ea3540ed037d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/730c436a33f0978a689c866df072ea3540ed037d/comments", "author": null, "committer": null, "parents": [{"sha": "05f23918fa15005e945818fdfb9f602353193871", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f23918fa15005e945818fdfb9f602353193871", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05f23918fa15005e945818fdfb9f602353193871"}], "stats": {"total": 63, "additions": 58, "deletions": 5}, "files": [{"sha": "dd4397bbf28f9bd1226ab2ce497c4cbd72cbb294", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730c436a33f0978a689c866df072ea3540ed037d/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730c436a33f0978a689c866df072ea3540ed037d/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=730c436a33f0978a689c866df072ea3540ed037d", "patch": "@@ -1412,9 +1412,18 @@ add_type_duplicate (odr_type val, tree type)\n   if (!val->types_set)\n     val->types_set = new hash_set<tree>;\n \n+  /* Chose polymorphic type as leader (this happens only in case of ODR\n+     violations.  */\n+  if ((TREE_CODE (type) == RECORD_TYPE && TYPE_BINFO (type)\n+       && polymorphic_type_binfo_p (TYPE_BINFO (type)))\n+      && (TREE_CODE (val->type) != RECORD_TYPE || !TYPE_BINFO (val->type)\n+          || !polymorphic_type_binfo_p (TYPE_BINFO (val->type))))\n+    {\n+      prevail = true;\n+      build_bases = true;\n+    }\n   /* Always prefer complete type to be the leader.  */\n-\n-  if (!COMPLETE_TYPE_P (val->type) && COMPLETE_TYPE_P (type))\n+  else if (!COMPLETE_TYPE_P (val->type) && COMPLETE_TYPE_P (type))\n     {\n       prevail = true;\n       build_bases = TYPE_BINFO (type);\n@@ -1563,7 +1572,8 @@ add_type_duplicate (odr_type val, tree type)\n \t\t   Be sure this does not happen.  */\n \t\tgcc_assert (TYPE_BINFO (type2)\n \t\t\t    || !polymorphic_type_binfo_p (TYPE_BINFO (type1))\n-\t\t\t    || build_bases);\n+\t\t\t    || build_bases\n+\t\t\t    || val->odr_violated);\n \t        break;\n \t      }\n \t    /* One base is polymorphic and the other not.\n@@ -1865,9 +1875,9 @@ dump_odr_type (FILE *f, odr_type t, int indent=0)\n   fprintf (f, \"%s\\n\", t->all_derivations_known ? \" (derivations known)\":\"\");\n   if (TYPE_NAME (t->type))\n     {\n-      fprintf (f, \"%*s defined at: %s:%i\\n\", indent * 2, \"\",\n+      /*fprintf (f, \"%*s defined at: %s:%i\\n\", indent * 2, \"\",\n \t       DECL_SOURCE_FILE (TYPE_NAME (t->type)),\n-\t       DECL_SOURCE_LINE (TYPE_NAME (t->type)));\n+\t       DECL_SOURCE_LINE (TYPE_NAME (t->type)));*/\n       if (DECL_ASSEMBLER_NAME_SET_P (TYPE_NAME (t->type)))\n         fprintf (f, \"%*s mangled name: %s\\n\", indent * 2, \"\",\n \t\t IDENTIFIER_POINTER"}, {"sha": "8f6bde77004d5feeb7f0d0e2955222baf5814bfb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730c436a33f0978a689c866df072ea3540ed037d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730c436a33f0978a689c866df072ea3540ed037d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=730c436a33f0978a689c866df072ea3540ed037d", "patch": "@@ -1,3 +1,9 @@\n+2015-03-20  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/65475\n+\t* g++.dg/lto/pr65475_0.C: New testcase.\n+\t* g++.dg/lto/pr65475_1.C: New testcase.\n+\n 2015-03-20  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/64366"}, {"sha": "273b932ad28d2fb9b98bde1732a350ab2815a36f", "filename": "gcc/testsuite/g++.dg/lto/pr65475_0.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730c436a33f0978a689c866df072ea3540ed037d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65475_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730c436a33f0978a689c866df072ea3540ed037d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65475_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65475_0.C?ref=730c436a33f0978a689c866df072ea3540ed037d", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-lto-do link } */\n+/* { dg-options \"-O2  -Wno-odr\" } */\n+/* { dg-extra-ld-options { -O2 -Wno-odr -r -nostdlib } } */\n+namespace std {\n+class ios_base {\n+  struct A {};\n+  class __attribute((__abi_tag__(\"cxx11\"))) failure : A {};\n+} a;\n+}\n+"}, {"sha": "642a4137f2733f2eb35f4ca5d7b787d601170306", "filename": "gcc/testsuite/g++.dg/lto/pr65475_1.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730c436a33f0978a689c866df072ea3540ed037d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65475_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730c436a33f0978a689c866df072ea3540ed037d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65475_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr65475_1.C?ref=730c436a33f0978a689c866df072ea3540ed037d", "patch": "@@ -0,0 +1,27 @@\n+namespace std {\n+template <typename, typename = int> class Trans_NS___cxx11_basic_ostringstream;\n+class ios_base {\n+  class __attribute((__abi_tag__(\"cxx11\"))) failure {\n+    virtual char m_fn2();\n+  };\n+};\n+class B : virtual ios_base {};\n+template <typename, typename> class Trans_NS___cxx11_basic_ostringstream : B {\n+public:\n+  void m_fn1();\n+};\n+}\n+\n+class A {\n+public:\n+  A(int) {\n+    std::Trans_NS___cxx11_basic_ostringstream<wchar_t> a;\n+    a.m_fn1();\n+  }\n+};\n+int b;\n+void fn1() { (A(b)); }\n+int\n+main()\n+{\n+}"}]}