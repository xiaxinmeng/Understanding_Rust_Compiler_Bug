{"sha": "11746b92d8023be7a074b788ab2e42fa6ad2f492", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE3NDZiOTJkODAyM2JlN2EwNzRiNzg4YWIyZTQyZmE2YWQyZjQ5Mg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-11-15T20:44:26Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-11-15T20:44:26Z"}, "message": "re PR fortran/46484 (Should reject ALLOCATED(non-variable expression ))\n\n2010-11-15  Tobias Burnus  <burnus@net.b.de>\n\n        PR fortran/46484\n        * check.c (variable_check): Don't treat functions calls as\n        * variables;\n        optionally accept function themselves.\n        (gfc_check_all_any, gfc_check_loc, gfc_check_move_alloc,\n        gfc_check_null, gfc_check_present, gfc_check_cpu_time,\n        gfc_check_date_and_time, gfc_check_mvbits, gfc_check_random_number,\n        gfc_check_random_seed, gfc_check_system_clock,\n        gfc_check_dtime_etime, gfc_check_dtime_etime_sub,\n        gfc_check_itime_idate,gfc_check_ltime_gmtime): Update call.\n\n2010-11-15  Tobias Burnus  <burnus@net.b.de>\n\n        PR fortran/46484\n        * gfortran.dg/allocatable_scalar_11.f90: New.\n        * gfortran.dg/allocatable_scalar_5.f90: Make test case standard\n        * conform.\n\nFrom-SVN: r166769", "tree": {"sha": "d5417534167d8746e98a8d64124cda21b00d2c67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5417534167d8746e98a8d64124cda21b00d2c67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11746b92d8023be7a074b788ab2e42fa6ad2f492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11746b92d8023be7a074b788ab2e42fa6ad2f492", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11746b92d8023be7a074b788ab2e42fa6ad2f492", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11746b92d8023be7a074b788ab2e42fa6ad2f492/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed2a97eb0d4549150716c6017a8678905e884b42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2a97eb0d4549150716c6017a8678905e884b42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed2a97eb0d4549150716c6017a8678905e884b42"}], "stats": {"total": 114, "additions": 79, "deletions": 35}, "files": [{"sha": "a7c443916be788e3cb13cf600bccf2d88bda750b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11746b92d8023be7a074b788ab2e42fa6ad2f492/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11746b92d8023be7a074b788ab2e42fa6ad2f492/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=11746b92d8023be7a074b788ab2e42fa6ad2f492", "patch": "@@ -1,3 +1,15 @@\n+2010-11-15  Tobias Burnus  <burnus@net.b.de>\n+\n+\tPR fortran/46484\n+\t* check.c (variable_check): Don't treat functions calls as variables;\n+\toptionally accept function themselves.\n+\t(gfc_check_all_any, gfc_check_loc, gfc_check_move_alloc,\n+\tgfc_check_null, gfc_check_present, gfc_check_cpu_time,\n+\tgfc_check_date_and_time, gfc_check_mvbits, gfc_check_random_number,\n+\tgfc_check_random_seed, gfc_check_system_clock,\n+\tgfc_check_dtime_etime, gfc_check_dtime_etime_sub,\n+\tgfc_check_itime_idate,gfc_check_ltime_gmtime): Update call.\n+\n 2010-11-13  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/45742"}, {"sha": "f22a8dbf9d61bdc1661391c6170532858e975de2", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 32, "deletions": 27, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11746b92d8023be7a074b788ab2e42fa6ad2f492/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11746b92d8023be7a074b788ab2e42fa6ad2f492/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=11746b92d8023be7a074b788ab2e42fa6ad2f492", "patch": "@@ -478,7 +478,7 @@ kind_value_check (gfc_expr *e, int n, int k)\n /* Make sure an expression is a variable.  */\n \n static gfc_try\n-variable_check (gfc_expr *e, int n)\n+variable_check (gfc_expr *e, int n, bool allow_proc)\n {\n   if (e->expr_type == EXPR_VARIABLE\n       && e->symtree->n.sym->attr.intent == INTENT_IN\n@@ -491,10 +491,15 @@ variable_check (gfc_expr *e, int n)\n       return FAILURE;\n     }\n \n-  if ((e->expr_type == EXPR_VARIABLE\n-       && e->symtree->n.sym->attr.flavor != FL_PARAMETER)\n-      || (e->expr_type == EXPR_FUNCTION\n-\t  && e->symtree->n.sym->result == e->symtree->n.sym))\n+  if (e->expr_type == EXPR_VARIABLE\n+      && e->symtree->n.sym->attr.flavor != FL_PARAMETER\n+      && (allow_proc\n+\t  || !e->symtree->n.sym->attr.function\n+\t  || (e->symtree->n.sym == e->symtree->n.sym->result\n+\t      && (e->symtree->n.sym == gfc_current_ns->proc_name\n+\t\t  || (gfc_current_ns->parent\n+\t\t      && e->symtree->n.sym\n+\t\t\t == gfc_current_ns->parent->proc_name)))))\n     return SUCCESS;\n \n   gfc_error (\"'%s' argument of '%s' intrinsic at %L must be a variable\",\n@@ -762,7 +767,7 @@ gfc_check_all_any (gfc_expr *mask, gfc_expr *dim)\n gfc_try\n gfc_check_allocated (gfc_expr *array)\n {\n-  if (variable_check (array, 0) == FAILURE)\n+  if (variable_check (array, 0, false) == FAILURE)\n     return FAILURE;\n   if (allocatable_check (array, 0) == FAILURE)\n     return FAILURE;\n@@ -2041,7 +2046,7 @@ gfc_check_link_sub (gfc_expr *path1, gfc_expr *path2, gfc_expr *status)\n gfc_try\n gfc_check_loc (gfc_expr *expr)\n {\n-  return variable_check (expr, 0);\n+  return variable_check (expr, 0, true);\n }\n \n \n@@ -2516,12 +2521,12 @@ gfc_check_merge_bits (gfc_expr *i, gfc_expr *j, gfc_expr *mask)\n gfc_try\n gfc_check_move_alloc (gfc_expr *from, gfc_expr *to)\n {\n-  if (variable_check (from, 0) == FAILURE)\n+  if (variable_check (from, 0, false) == FAILURE)\n     return FAILURE;\n   if (allocatable_check (from, 0) == FAILURE)\n     return FAILURE;\n \n-  if (variable_check (to, 1) == FAILURE)\n+  if (variable_check (to, 1, false) == FAILURE)\n     return FAILURE;\n   if (allocatable_check (to, 1) == FAILURE)\n     return FAILURE;\n@@ -2598,7 +2603,7 @@ gfc_check_null (gfc_expr *mold)\n   if (mold == NULL)\n     return SUCCESS;\n \n-  if (variable_check (mold, 0) == FAILURE)\n+  if (variable_check (mold, 0, true) == FAILURE)\n     return FAILURE;\n \n   attr = gfc_variable_attr (mold, NULL);\n@@ -2729,7 +2734,7 @@ gfc_check_present (gfc_expr *a)\n {\n   gfc_symbol *sym;\n \n-  if (variable_check (a, 0) == FAILURE)\n+  if (variable_check (a, 0, true) == FAILURE)\n     return FAILURE;\n \n   sym = a->symtree->n.sym;\n@@ -3914,7 +3919,7 @@ gfc_check_cpu_time (gfc_expr *time)\n   if (type_check (time, 0, BT_REAL) == FAILURE)\n     return FAILURE;\n \n-  if (variable_check (time, 0) == FAILURE)\n+  if (variable_check (time, 0, false) == FAILURE)\n     return FAILURE;\n \n   return SUCCESS;\n@@ -3933,7 +3938,7 @@ gfc_check_date_and_time (gfc_expr *date, gfc_expr *time,\n \treturn FAILURE;\n       if (scalar_check (date, 0) == FAILURE)\n \treturn FAILURE;\n-      if (variable_check (date, 0) == FAILURE)\n+      if (variable_check (date, 0, false) == FAILURE)\n \treturn FAILURE;\n     }\n \n@@ -3945,7 +3950,7 @@ gfc_check_date_and_time (gfc_expr *date, gfc_expr *time,\n \treturn FAILURE;\n       if (scalar_check (time, 1) == FAILURE)\n \treturn FAILURE;\n-      if (variable_check (time, 1) == FAILURE)\n+      if (variable_check (time, 1, false) == FAILURE)\n \treturn FAILURE;\n     }\n \n@@ -3957,7 +3962,7 @@ gfc_check_date_and_time (gfc_expr *date, gfc_expr *time,\n \treturn FAILURE;\n       if (scalar_check (zone, 2) == FAILURE)\n \treturn FAILURE;\n-      if (variable_check (zone, 2) == FAILURE)\n+      if (variable_check (zone, 2, false) == FAILURE)\n \treturn FAILURE;\n     }\n \n@@ -3969,7 +3974,7 @@ gfc_check_date_and_time (gfc_expr *date, gfc_expr *time,\n \treturn FAILURE;\n       if (rank_check (values, 3, 1) == FAILURE)\n \treturn FAILURE;\n-      if (variable_check (values, 3) == FAILURE)\n+      if (variable_check (values, 3, false) == FAILURE)\n \treturn FAILURE;\n     }\n \n@@ -3993,7 +3998,7 @@ gfc_check_mvbits (gfc_expr *from, gfc_expr *frompos, gfc_expr *len,\n   if (same_type_check (from, 0, to, 3) == FAILURE)\n     return FAILURE;\n \n-  if (variable_check (to, 3) == FAILURE)\n+  if (variable_check (to, 3, false) == FAILURE)\n     return FAILURE;\n \n   if (type_check (topos, 4, BT_INTEGER) == FAILURE)\n@@ -4025,7 +4030,7 @@ gfc_check_random_number (gfc_expr *harvest)\n   if (type_check (harvest, 0, BT_REAL) == FAILURE)\n     return FAILURE;\n \n-  if (variable_check (harvest, 0) == FAILURE)\n+  if (variable_check (harvest, 0, false) == FAILURE)\n     return FAILURE;\n \n   return SUCCESS;\n@@ -4058,7 +4063,7 @@ gfc_check_random_seed (gfc_expr *size, gfc_expr *put, gfc_expr *get)\n       if (type_check (size, 0, BT_INTEGER) == FAILURE)\n \treturn FAILURE;\n \n-      if (variable_check (size, 0) == FAILURE)\n+      if (variable_check (size, 0, false) == FAILURE)\n \treturn FAILURE;\n \n       if (kind_value_check (size, 0, gfc_default_integer_kind) == FAILURE)\n@@ -4112,7 +4117,7 @@ gfc_check_random_seed (gfc_expr *size, gfc_expr *put, gfc_expr *get)\n       if (type_check (get, 2, BT_INTEGER) == FAILURE)\n \treturn FAILURE;\n \n-      if (variable_check (get, 2) == FAILURE)\n+      if (variable_check (get, 2, false) == FAILURE)\n \treturn FAILURE;\n \n       if (kind_value_check (get, 2, gfc_default_integer_kind) == FAILURE)\n@@ -4165,7 +4170,7 @@ gfc_check_system_clock (gfc_expr *count, gfc_expr *count_rate,\n       if (type_check (count, 0, BT_INTEGER) == FAILURE)\n \treturn FAILURE;\n \n-      if (variable_check (count, 0) == FAILURE)\n+      if (variable_check (count, 0, false) == FAILURE)\n \treturn FAILURE;\n     }\n \n@@ -4177,7 +4182,7 @@ gfc_check_system_clock (gfc_expr *count, gfc_expr *count_rate,\n       if (type_check (count_rate, 1, BT_INTEGER) == FAILURE)\n \treturn FAILURE;\n \n-      if (variable_check (count_rate, 1) == FAILURE)\n+      if (variable_check (count_rate, 1, false) == FAILURE)\n \treturn FAILURE;\n \n       if (count != NULL\n@@ -4194,7 +4199,7 @@ gfc_check_system_clock (gfc_expr *count, gfc_expr *count_rate,\n       if (type_check (count_max, 2, BT_INTEGER) == FAILURE)\n \treturn FAILURE;\n \n-      if (variable_check (count_max, 2) == FAILURE)\n+      if (variable_check (count_max, 2, false) == FAILURE)\n \treturn FAILURE;\n \n       if (count != NULL\n@@ -4317,7 +4322,7 @@ gfc_check_dtime_etime (gfc_expr *x)\n   if (rank_check (x, 0, 1) == FAILURE)\n     return FAILURE;\n \n-  if (variable_check (x, 0) == FAILURE)\n+  if (variable_check (x, 0, false) == FAILURE)\n     return FAILURE;\n \n   if (type_check (x, 0, BT_REAL) == FAILURE)\n@@ -4339,7 +4344,7 @@ gfc_check_dtime_etime_sub (gfc_expr *values, gfc_expr *time)\n   if (rank_check (values, 0, 1) == FAILURE)\n     return FAILURE;\n \n-  if (variable_check (values, 0) == FAILURE)\n+  if (variable_check (values, 0, false) == FAILURE)\n     return FAILURE;\n \n   if (type_check (values, 0, BT_REAL) == FAILURE)\n@@ -4529,7 +4534,7 @@ gfc_check_itime_idate (gfc_expr *values)\n   if (rank_check (values, 0, 1) == FAILURE)\n     return FAILURE;\n \n-  if (variable_check (values, 0) == FAILURE)\n+  if (variable_check (values, 0, false) == FAILURE)\n     return FAILURE;\n \n   if (type_check (values, 0, BT_INTEGER) == FAILURE)\n@@ -4560,7 +4565,7 @@ gfc_check_ltime_gmtime (gfc_expr *time, gfc_expr *values)\n   if (rank_check (values, 1, 1) == FAILURE)\n     return FAILURE;\n \n-  if (variable_check (values, 1) == FAILURE)\n+  if (variable_check (values, 1, false) == FAILURE)\n     return FAILURE;\n \n   if (type_check (values, 1, BT_INTEGER) == FAILURE)"}, {"sha": "41eb290a82e814a159b7f12d893cecdb1be23854", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11746b92d8023be7a074b788ab2e42fa6ad2f492/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11746b92d8023be7a074b788ab2e42fa6ad2f492/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11746b92d8023be7a074b788ab2e42fa6ad2f492", "patch": "@@ -1,3 +1,9 @@\n+2010-11-15  Tobias Burnus  <burnus@net.b.de>\n+\n+\tPR fortran/46484\n+\t* gfortran.dg/allocatable_scalar_11.f90: New.\n+\t* gfortran.dg/allocatable_scalar_5.f90: Make test case standard conform.\n+\n 2010-11-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/46095"}, {"sha": "7f4d64d1205084ec93cc188e650aafefaa79f520", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_11.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11746b92d8023be7a074b788ab2e42fa6ad2f492/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11746b92d8023be7a074b788ab2e42fa6ad2f492/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_11.f90?ref=11746b92d8023be7a074b788ab2e42fa6ad2f492", "patch": "@@ -0,0 +1,28 @@\n+! { dg-compile }\n+!\n+! PR fortran/46484\n+!\n+\n+function g()\n+  implicit none\n+  integer, allocatable :: g\n+  call int()\n+    print *, loc(g) ! OK\n+contains\n+  subroutine int()\n+    print *, loc(g) ! OK\n+    print *, allocated(g) ! OK\n+  end subroutine int\n+end function\n+\n+implicit none\n+integer, allocatable :: x\n+print *, allocated(f) ! { dg-error \"must be a variable\" }\n+print *, loc(f) ! OK\n+contains\n+function f()\n+  integer, allocatable :: f\n+  print *, loc(f) ! OK\n+  print *, allocated(f) ! OK\n+end function\n+end"}, {"sha": "efa40e92597a90130dcc405d936ed4cc176cb531", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_5.f90", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11746b92d8023be7a074b788ab2e42fa6ad2f492/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11746b92d8023be7a074b788ab2e42fa6ad2f492/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_5.f90?ref=11746b92d8023be7a074b788ab2e42fa6ad2f492", "patch": "@@ -1,7 +1,7 @@\n ! { dg-do run }\n ! { dg-options \"-Wall -pedantic\" }\n !\n-! PR fortran/41872\n+! PR fortran/41872; updated due to PR fortran/46484\n !\n !  More tests for allocatable scalars\n !\n@@ -11,8 +11,6 @@ program test\n   integer :: b\n \n   if (allocated (a)) call abort ()\n-  if (allocated (func (.false.))) call abort ()\n-  if (.not.allocated (func (.true.))) call abort ()\n   b = 7\n   b = func(.true.)\n   if (b /= 5332) call abort () \n@@ -28,7 +26,6 @@ program test\n   call intout2 (a)\n   if (allocated (a)) call abort ()\n \n-  if (allocated (func2 ())) call abort ()\n contains\n \n   function func (alloc)\n@@ -41,10 +38,6 @@ function func (alloc)\n     end if\n   end function func\n \n-  function func2 ()\n-    integer, allocatable ::  func2\n-  end function func2\n-\n   subroutine intout (dum, alloc)\n     implicit none\n     integer, allocatable,intent(out) :: dum"}]}