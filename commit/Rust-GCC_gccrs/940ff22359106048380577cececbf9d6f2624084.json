{"sha": "940ff22359106048380577cececbf9d6f2624084", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQwZmYyMjM1OTEwNjA0ODM4MDU3N2NlY2VjYmY5ZDZmMjYyNDA4NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-04-13T00:20:42Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-04-13T00:20:42Z"}, "message": "cp-tree.h (COMPARE_NO_ATTRIBUTES): New macro.\n\n\t* cp-tree.h (COMPARE_NO_ATTRIBUTES): New macro.\n\t* typeck.c (comptypes): If we get it, ignore attributes.\n\t* class.c (instantiate_type): Use BASELINK_P.  Change complain\n\tparameter to flags; 2 means ignore attributes.\n\t* call.c (build_op_delete_call): Pass it.\n\nFrom-SVN: r26393", "tree": {"sha": "8b97d89f9d31d77ac93098e94b865219d3f3077a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b97d89f9d31d77ac93098e94b865219d3f3077a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/940ff22359106048380577cececbf9d6f2624084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/940ff22359106048380577cececbf9d6f2624084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/940ff22359106048380577cececbf9d6f2624084", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/940ff22359106048380577cececbf9d6f2624084/comments", "author": null, "committer": null, "parents": [{"sha": "f2e2cbd4a21cad06f5cb58e533209fa484acc672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2e2cbd4a21cad06f5cb58e533209fa484acc672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2e2cbd4a21cad06f5cb58e533209fa484acc672"}], "stats": {"total": 70, "additions": 34, "deletions": 36}, "files": [{"sha": "304a1229860e36ba4548933bf98c4e29bc8bc571", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940ff22359106048380577cececbf9d6f2624084/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940ff22359106048380577cececbf9d6f2624084/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=940ff22359106048380577cececbf9d6f2624084", "patch": "@@ -1,5 +1,11 @@\n 1999-04-12  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* cp-tree.h (COMPARE_NO_ATTRIBUTES): New macro.\n+\t* typeck.c (comptypes): If we get it, ignore attributes.\n+\t* class.c (instantiate_type): Use BASELINK_P.  Change complain\n+\tparameter to flags; 2 means ignore attributes.  \n+\t* call.c (build_op_delete_call): Pass it.\n+\n \t* decl.c (xref_tag): Only complain once about using a typedef-name\n \twith 'struct'.  Downgrade to pedwarn.\n "}, {"sha": "fb3df65ae9059c62af889bcc3c96e71065abf1c9", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940ff22359106048380577cececbf9d6f2624084/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940ff22359106048380577cececbf9d6f2624084/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=940ff22359106048380577cececbf9d6f2624084", "patch": "@@ -2942,7 +2942,7 @@ build_op_delete_call (code, addr, size, flags, placement)\n   if (type != TYPE_MAIN_VARIANT (type))\n     addr = cp_convert (build_pointer_type (TYPE_MAIN_VARIANT (type)), addr);\n \n-  fn = instantiate_type (fntype, fns, 0);\n+  fn = instantiate_type (fntype, fns, 2);\n \n   if (fn != error_mark_node)\n     {\n@@ -2962,11 +2962,11 @@ build_op_delete_call (code, addr, size, flags, placement)\n \t\t\ttree_cons (NULL_TREE, sizetype, void_list_node));\n   fntype = build_function_type (void_type_node, argtypes);\n \n-  fn = instantiate_type (fntype, fns, 0);\n+  fn = instantiate_type (fntype, fns, 2);\n \n   if (fn != error_mark_node)\n     {\n-      if (TREE_CODE (fns) == TREE_LIST)\n+      if (BASELINK_P (fns))\n \t/* Member functions.  */\n \tenforce_access (TREE_PURPOSE (fns), fn);\n       return build_function_call"}, {"sha": "a577441aba3f9882613bbcade2e1ad8a085d51a3", "filename": "gcc/cp/class.c", "status": "modified", "additions": 20, "deletions": 32, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940ff22359106048380577cececbf9d6f2624084/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940ff22359106048380577cececbf9d6f2624084/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=940ff22359106048380577cececbf9d6f2624084", "patch": "@@ -4919,14 +4919,19 @@ resolve_address_of_overloaded_function (target_type,\n    try many possible instantiations, in hopes that at least one will\n    work.\n \n+   FLAGS is a bitmask, as we see at the top of the function.\n+\n    For non-recursive calls, LHSTYPE should be a function, pointer to\n    function, or a pointer to member function.  */\n \n tree\n-instantiate_type (lhstype, rhs, complain)\n+instantiate_type (lhstype, rhs, flags)\n      tree lhstype, rhs;\n-     int complain;\n+     int flags;\n {\n+  int complain = (flags & 1);\n+  int strict = (flags & 2) ? COMPARE_NO_ATTRIBUTES : COMPARE_STRICT;\n+\n   if (TREE_CODE (lhstype) == UNKNOWN_TYPE)\n     {\n       if (complain)\n@@ -4936,7 +4941,7 @@ instantiate_type (lhstype, rhs, complain)\n \n   if (TREE_TYPE (rhs) != NULL_TREE && ! (type_unknown_p (rhs)))\n     {\n-      if (same_type_p (lhstype, TREE_TYPE (rhs)))\n+      if (comptypes (lhstype, TREE_TYPE (rhs), strict))\n \treturn rhs;\n       if (complain)\n \tcp_error (\"argument of type `%T' does not match `%T'\",\n@@ -4970,7 +4975,7 @@ instantiate_type (lhstype, rhs, complain)\n \ttree new_rhs;\n \n \tnew_rhs = instantiate_type (build_pointer_type (lhstype),\n-\t\t\t\t    TREE_OPERAND (rhs, 0), complain);\n+\t\t\t\t    TREE_OPERAND (rhs, 0), flags);\n \tif (new_rhs == error_mark_node)\n \t  return error_mark_node;\n \n@@ -4982,14 +4987,14 @@ instantiate_type (lhstype, rhs, complain)\n     case NOP_EXPR:\n       rhs = copy_node (TREE_OPERAND (rhs, 0));\n       TREE_TYPE (rhs) = unknown_type_node;\n-      return instantiate_type (lhstype, rhs, complain);\n+      return instantiate_type (lhstype, rhs, flags);\n \n     case COMPONENT_REF:\n       {\n \ttree field = TREE_OPERAND (rhs, 1);\n \ttree r;\n \n-\tr = instantiate_type (lhstype, field, complain);\n+\tr = instantiate_type (lhstype, field, flags);\n \n \tif (r != error_mark_node && TYPE_PTRMEMFUNC_P (lhstype))\n \t  {\n@@ -5040,27 +5045,10 @@ instantiate_type (lhstype, rhs, complain)\n \t\t\t\t\t\t/*explicit_targs=*/NULL_TREE);\n \n     case TREE_LIST:\n-      {\n-\tif (TREE_PURPOSE (rhs) == error_mark_node)\n-\t  {\n-\t    /* Make sure we don't drop the non-local flag, as the old code\n-\t       would rely on it. */\n-\t    int nl = TREE_NONLOCAL_FLAG (rhs);\n-\t    /* We don't need the type of this node. */\n-\t    rhs = TREE_VALUE (rhs);\n-\t    my_friendly_assert (TREE_NONLOCAL_FLAG (rhs) == nl, 980331);\n-\t  }\n+      /* Now we should have a baselink. */\n+      my_friendly_assert (BASELINK_P (rhs), 990412);\n \n-\t/* Now we should have a baselink. */\n-\tmy_friendly_assert (TREE_CODE (TREE_PURPOSE (rhs)) == TREE_VEC,\n-\t\t\t    980331);\n-\tmy_friendly_assert (TREE_CHAIN (rhs) == NULL_TREE, 181);\n-\tmy_friendly_assert (TREE_CODE (TREE_VALUE (rhs)) == FUNCTION_DECL\n-\t\t\t    || TREE_CODE (TREE_VALUE (rhs)) == OVERLOAD,\n-\t\t\t    182);\n-\n-\treturn instantiate_type (lhstype, TREE_VALUE (rhs), complain);\n-      }\n+      return instantiate_type (lhstype, TREE_VALUE (rhs), flags);\n \n     case CALL_EXPR:\n       /* This is too hard for now.  */\n@@ -5071,11 +5059,11 @@ instantiate_type (lhstype, rhs, complain)\n     case MINUS_EXPR:\n     case COMPOUND_EXPR:\n       TREE_OPERAND (rhs, 0)\n-\t= instantiate_type (lhstype, TREE_OPERAND (rhs, 0), complain);\n+\t= instantiate_type (lhstype, TREE_OPERAND (rhs, 0), flags);\n       if (TREE_OPERAND (rhs, 0) == error_mark_node)\n \treturn error_mark_node;\n       TREE_OPERAND (rhs, 1)\n-\t= instantiate_type (lhstype, TREE_OPERAND (rhs, 1), complain);\n+\t= instantiate_type (lhstype, TREE_OPERAND (rhs, 1), flags);\n       if (TREE_OPERAND (rhs, 1) == error_mark_node)\n \treturn error_mark_node;\n \n@@ -5143,11 +5131,11 @@ instantiate_type (lhstype, rhs, complain)\n \t  return error_mark_node;\n \t}\n       TREE_OPERAND (rhs, 1)\n-\t= instantiate_type (lhstype, TREE_OPERAND (rhs, 1), complain);\n+\t= instantiate_type (lhstype, TREE_OPERAND (rhs, 1), flags);\n       if (TREE_OPERAND (rhs, 1) == error_mark_node)\n \treturn error_mark_node;\n       TREE_OPERAND (rhs, 2)\n-\t= instantiate_type (lhstype, TREE_OPERAND (rhs, 2), complain);\n+\t= instantiate_type (lhstype, TREE_OPERAND (rhs, 2), flags);\n       if (TREE_OPERAND (rhs, 2) == error_mark_node)\n \treturn error_mark_node;\n \n@@ -5156,15 +5144,15 @@ instantiate_type (lhstype, rhs, complain)\n \n     case MODIFY_EXPR:\n       TREE_OPERAND (rhs, 1)\n-\t= instantiate_type (lhstype, TREE_OPERAND (rhs, 1), complain);\n+\t= instantiate_type (lhstype, TREE_OPERAND (rhs, 1), flags);\n       if (TREE_OPERAND (rhs, 1) == error_mark_node)\n \treturn error_mark_node;\n \n       TREE_TYPE (rhs) = lhstype;\n       return rhs;\n       \n     case ADDR_EXPR:\n-      return instantiate_type (lhstype, TREE_OPERAND (rhs, 0), complain);\n+      return instantiate_type (lhstype, TREE_OPERAND (rhs, 0), flags);\n \n     case ENTRY_VALUE_EXPR:\n       my_friendly_abort (184);"}, {"sha": "a88156d44618d7a2a8f739f478681a368b56317e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940ff22359106048380577cececbf9d6f2624084/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940ff22359106048380577cececbf9d6f2624084/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=940ff22359106048380577cececbf9d6f2624084", "patch": "@@ -2631,6 +2631,8 @@ extern tree current_class_name;\t/* IDENTIFIER_NODE: name of current class */\n #define COMPARE_REDECLARATION 4 /* The comparsion is being done when\n \t\t\t\t   another declaration of an existing\n \t\t\t\t   entity is seen.  */\n+#define COMPARE_NO_ATTRIBUTES 8 /* The comparison should ignore\n+\t\t\t\t   extra-linguistic type attributes.  */\n \n /* Used with push_overloaded_decl.  */\n #define PUSH_GLOBAL          0  /* Push the DECL into namespace scope,"}, {"sha": "c210410102a0c6a136b5d6f750c63b44cb86099a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940ff22359106048380577cececbf9d6f2624084/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940ff22359106048380577cececbf9d6f2624084/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=940ff22359106048380577cececbf9d6f2624084", "patch": "@@ -869,8 +869,10 @@ comptypes (type1, type2, strict)\n #define COMP_TYPE_ATTRIBUTES(t1,t2)\t1\n #endif\n \n+  if (strict & COMPARE_NO_ATTRIBUTES)\n+    attrval = 1;\n   /* 1 if no need for warning yet, 2 if warning cause has been seen.  */\n-  if (! (attrval = COMP_TYPE_ATTRIBUTES (t1, t2)))\n+  else if (! (attrval = COMP_TYPE_ATTRIBUTES (t1, t2)))\n      return 0;\n \n   /* 1 if no need for warning yet, 2 if warning cause has been seen.  */"}]}