{"sha": "013bc8afa0020d91a3c4109250c360b02cb372a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEzYmM4YWZhMDAyMGQ5MWEzYzQxMDkyNTBjMzYwYjAyY2IzNzJhNg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-06-04T17:31:55Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-06-04T17:31:55Z"}, "message": "91th Cygnus<->FSF quick merge\n\nFrom-SVN: r14145", "tree": {"sha": "69a9c6bdc17b3a806fb028fa06a95dc4fa3e8c63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69a9c6bdc17b3a806fb028fa06a95dc4fa3e8c63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/013bc8afa0020d91a3c4109250c360b02cb372a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/013bc8afa0020d91a3c4109250c360b02cb372a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/013bc8afa0020d91a3c4109250c360b02cb372a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/013bc8afa0020d91a3c4109250c360b02cb372a6/comments", "author": null, "committer": null, "parents": [{"sha": "6313a654f751f936d313f265849c76e87515b2c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6313a654f751f936d313f265849c76e87515b2c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6313a654f751f936d313f265849c76e87515b2c4"}], "stats": {"total": 70, "additions": 54, "deletions": 16}, "files": [{"sha": "24f3d73dacc1083b15f71922d30cc7582b2489ed", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/013bc8afa0020d91a3c4109250c360b02cb372a6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/013bc8afa0020d91a3c4109250c360b02cb372a6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=013bc8afa0020d91a3c4109250c360b02cb372a6", "patch": "@@ -1,3 +1,25 @@\n+Tue Jun  3 18:08:23 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* search.c (push_class_decls): A name which ambiguously refers to\n+ \tseveral instantiations of the same template just refers to the\n+ \ttemplate.\n+\n+Tue Jun  3 12:30:40 1997  Benjamin Kosnik  <bkoz@cirdan.cygnus.com>\n+\n+\t* decl.c (build_enumerator): fix problem with unsigned long\n+\tenumerated values being smashed to ints, causing overflow\n+\twhen computing next enumerated value. (for enum values around\n+\tMAX_VAL).\n+\n+Mon Jun  2 17:40:56 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* typeck.c (build_component_ref): Only call mark_used on a decl.\n+\n+Thu May 29 15:54:17 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>\n+\n+\t* typeck.c (build_c_cast): Make the check for a ptr to function\n+\tmore specific before possible default_conversion call.\n+\n Thu May 29 13:02:06 1997  Mike Stump  <mrs@cygnus.com>\n \n \t* except.c (expand_exception_blocks): Simplify and fix and make"}, {"sha": "e4ddd1d72d285192f75568bddedb5089b4fdaa0b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/013bc8afa0020d91a3c4109250c360b02cb372a6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/013bc8afa0020d91a3c4109250c360b02cb372a6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=013bc8afa0020d91a3c4109250c360b02cb372a6", "patch": "@@ -10836,7 +10836,10 @@ build_enumerator (name, value)\n      /* We have to always copy here; not all INTEGER_CSTs are unshared,\n \tand there's no wedding ring. Look at size_int()...*/\n      value = copy_node (value);\n+#if 0\n+     /* To fix MAX_VAL enum consts. (bkoz)  */\n      TREE_TYPE (value) = integer_type_node;\n+#endif\n    }\n \n   /* C++ associates enums with global, function, or class declarations.  */"}, {"sha": "31946002309830016c5c137c90025a825405668f", "filename": "gcc/cp/gxxint.texi", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/013bc8afa0020d91a3c4109250c360b02cb372a6/gcc%2Fcp%2Fgxxint.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/013bc8afa0020d91a3c4109250c360b02cb372a6/gcc%2Fcp%2Fgxxint.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fgxxint.texi?ref=013bc8afa0020d91a3c4109250c360b02cb372a6", "patch": "@@ -487,18 +487,6 @@ FIELD_DECLs\n @end display\n \n \n-@item DECL_NESTED_TYPENAME\n-Holds the fully qualified type name.  Example, Base::Derived.\n-\n-Has values of:\n-\n-\tIDENTIFIER_NODEs\n-\n-What things can this be used on:\n-\n-\tTYPE_DECLs\n-\n-\n @item DECL_NAME\n \n Has values of:"}, {"sha": "40a83c125da7220a887853a294dc4eda75daa65b", "filename": "gcc/cp/search.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/013bc8afa0020d91a3c4109250c360b02cb372a6/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/013bc8afa0020d91a3c4109250c360b02cb372a6/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=013bc8afa0020d91a3c4109250c360b02cb372a6", "patch": "@@ -3449,7 +3449,31 @@ push_class_decls (type)\n \t    {\n \t      tree node = TREE_VALUE (new);\n \n-\t      while (TREE_CODE (node) == TREE_LIST)\n+\t      if (TREE_CODE (node) == TYPE_DECL\n+\t\t  && DECL_ARTIFICIAL (node)\n+\t\t  && IS_AGGR_TYPE (TREE_TYPE (node))\n+\t\t  && CLASSTYPE_TEMPLATE_INFO (TREE_TYPE (node)))\n+\t\t{\n+\t\t  tree t = CLASSTYPE_TI_TEMPLATE (TREE_TYPE (node));\n+\t\t  tree n = new;\n+\n+\t\t  for (; n; n = TREE_CHAIN (n))\n+\t\t    {\n+\t\t      tree d = TREE_VALUE (n);\n+\t\t      if (TREE_CODE (d) == TYPE_DECL\n+\t\t\t  && DECL_ARTIFICIAL (node)\n+\t\t\t  && IS_AGGR_TYPE (TREE_TYPE (d))\n+\t\t\t  && CLASSTYPE_TEMPLATE_INFO (TREE_TYPE (d))\n+\t\t\t  && CLASSTYPE_TI_TEMPLATE (TREE_TYPE (d)) == t)\n+\t\t\t/* OK */;\n+\t\t      else\n+\t\t\tbreak;\n+\t\t    }\n+\n+\t\t  if (n == NULL_TREE)\n+\t\t    new = t;\n+\t\t}\n+\t      else while (TREE_CODE (node) == TREE_LIST)\n \t\tnode = TREE_VALUE (node);\n \t      id = DECL_NAME (node);\n \t    }"}, {"sha": "13ec6dda6664dfc54875aa33a106af615322e7a4", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/013bc8afa0020d91a3c4109250c360b02cb372a6/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/013bc8afa0020d91a3c4109250c360b02cb372a6/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=013bc8afa0020d91a3c4109250c360b02cb372a6", "patch": "@@ -1865,7 +1865,8 @@ build_component_ref (datum, component, basetype_path, protect)\n \t\t\t  fndecl = build_vfn_ref (&addr, datum, DECL_VINDEX (fndecl));\n \t\t\t  TREE_TYPE (fndecl) = build_pointer_type (fntype);\n \t\t\t}\n-\t\t      mark_used (fndecl);\n+\t\t      else\n+\t\t\tmark_used (fndecl);\n \t\t      return build (OFFSET_REF, TREE_TYPE (fndecl), datum, fndecl);\n \t\t    }\n \t\t  if (access == access_protected_node)\n@@ -5501,8 +5502,8 @@ build_c_cast (type, expr)\n \t  || (TREE_CODE (TREE_TYPE (value)) == METHOD_TYPE\n \t      /* Don't do the default conversion if we want a\n \t\t pointer to a function.  */\n-\t      && TREE_CODE (type) != POINTER_TYPE\n-\t      && TREE_CODE (TREE_TYPE (type)) != FUNCTION_TYPE)\n+\t      && ! (TREE_CODE (type) == POINTER_TYPE\n+\t\t    && TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE))\n \t  || TREE_CODE (TREE_TYPE (value)) == ARRAY_TYPE\n \t  || TREE_CODE (TREE_TYPE (value)) == REFERENCE_TYPE)\n \tvalue = default_conversion (value);"}]}