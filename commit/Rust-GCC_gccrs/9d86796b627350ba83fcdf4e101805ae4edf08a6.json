{"sha": "9d86796b627350ba83fcdf4e101805ae4edf08a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ4Njc5NmI2MjczNTBiYTgzZmNkZjRlMTAxODA1YWU0ZWRmMDhhNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2010-07-12T18:55:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-07-12T18:55:57Z"}, "message": "regs.h (target_regs): Add x_direct_load, x_direct_store and x_float_extend_from_mem.\n\ngcc/\n\t* regs.h (target_regs): Add x_direct_load, x_direct_store and\n\tx_float_extend_from_mem.\n\t(direct_load, direct_store, float_extend_from_mem): New macros.\n\t* expr.c (direct_load, direct_store, float_extend_from_mem): Delete.\n\nFrom-SVN: r162100", "tree": {"sha": "fd2adeb46c2c6f2a504690bad110fdee802e14f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd2adeb46c2c6f2a504690bad110fdee802e14f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d86796b627350ba83fcdf4e101805ae4edf08a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d86796b627350ba83fcdf4e101805ae4edf08a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d86796b627350ba83fcdf4e101805ae4edf08a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d86796b627350ba83fcdf4e101805ae4edf08a6/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e9c326a88c289e25d58d2e9efb8517ef272410d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e9c326a88c289e25d58d2e9efb8517ef272410d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e9c326a88c289e25d58d2e9efb8517ef272410d"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "d5864aa856756ea3b665f6d16108186f1a128c26", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d86796b627350ba83fcdf4e101805ae4edf08a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d86796b627350ba83fcdf4e101805ae4edf08a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d86796b627350ba83fcdf4e101805ae4edf08a6", "patch": "@@ -1,3 +1,10 @@\n+2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* regs.h (target_regs): Add x_direct_load, x_direct_store and\n+\tx_float_extend_from_mem.\n+\t(direct_load, direct_store, float_extend_from_mem): New macros.\n+\t* expr.c (direct_load, direct_store, float_extend_from_mem): Delete.\n+\n 2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* Makefile.in (LIBFUNCS_H): Add $(HASHTAB_H)."}, {"sha": "7788461a961008dcc5ced8e52dbac153836d62fb", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d86796b627350ba83fcdf4e101805ae4edf08a6/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d86796b627350ba83fcdf4e101805ae4edf08a6/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9d86796b627350ba83fcdf4e101805ae4edf08a6", "patch": "@@ -53,6 +53,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"diagnostic.h\"\n #include \"ssaexpand.h\"\n+#include \"target-globals.h\"\n \n /* Decide whether a function's arguments should be processed\n    from first to last or from last to first.\n@@ -158,17 +159,6 @@ static void do_tablejump (rtx, enum machine_mode, rtx, rtx, rtx);\n static rtx const_vector_from_tree (tree);\n static void write_complex_part (rtx, rtx, bool);\n \n-/* Record for each mode whether we can move a register directly to or\n-   from an object of that mode in memory.  If we can't, we won't try\n-   to use that mode directly when accessing a field of that mode.  */\n-\n-static char direct_load[NUM_MACHINE_MODES];\n-static char direct_store[NUM_MACHINE_MODES];\n-\n-/* Record for each mode whether we can float-extend from memory.  */\n-\n-static bool float_extend_from_mem[NUM_MACHINE_MODES][NUM_MACHINE_MODES];\n-\n /* This macro is used to determine whether move_by_pieces should be called\n    to perform a structure copy.  */\n #ifndef MOVE_BY_PIECES_P"}, {"sha": "9e8ea81457066e654a2b61d7ac75d3c5953a32ee", "filename": "gcc/regs.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d86796b627350ba83fcdf4e101805ae4edf08a6/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d86796b627350ba83fcdf4e101805ae4edf08a6/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=9d86796b627350ba83fcdf4e101805ae4edf08a6", "patch": "@@ -280,6 +280,15 @@ struct target_regs {\n \n   /* Keep track of the last mode we initialized move costs for.  */\n   int x_last_mode_for_init_move_cost;\n+\n+  /* Record for each mode whether we can move a register directly to or\n+     from an object of that mode in memory.  If we can't, we won't try\n+     to use that mode directly when accessing a field of that mode.  */\n+  char x_direct_load[NUM_MACHINE_MODES];\n+  char x_direct_store[NUM_MACHINE_MODES];\n+\n+  /* Record for each mode whether we can float-extend from memory.  */\n+  bool x_float_extend_from_mem[NUM_MACHINE_MODES][NUM_MACHINE_MODES];\n };\n \n extern struct target_regs default_target_regs;\n@@ -303,6 +312,12 @@ extern struct target_regs *this_target_regs;\n   (this_target_regs->x_may_move_in_cost)\n #define may_move_out_cost \\\n   (this_target_regs->x_may_move_out_cost)\n+#define direct_load \\\n+  (this_target_regs->x_direct_load)\n+#define direct_store \\\n+  (this_target_regs->x_direct_store)\n+#define float_extend_from_mem \\\n+  (this_target_regs->x_float_extend_from_mem)\n \n /* Return an exclusive upper bound on the registers occupied by hard\n    register (reg:MODE REGNO).  */"}]}