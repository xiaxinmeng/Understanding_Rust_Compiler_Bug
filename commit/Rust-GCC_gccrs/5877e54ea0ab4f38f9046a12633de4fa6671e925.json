{"sha": "5877e54ea0ab4f38f9046a12633de4fa6671e925", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg3N2U1NGVhMGFiNGYzOGY5MDQ2YTEyNjMzZGU0ZmE2NjcxZTkyNQ==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2015-09-18T18:56:10Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2015-09-18T18:56:10Z"}, "message": "pa-protos.h (pa_cint_ok_for_move): Change argument type to unsigned.\n\n\t* config/pa/pa-protos.h (pa_cint_ok_for_move): Change argument type to\n\tunsigned.\n\t(pa_ldil_cint_p): Likewise.\n\t* config/pa/pa.c (pa_cint_ok_for_move): likewise.\n\t(pa_ldil_cint_p): Likewise. Change signed casts to unsigned.\n\tUpdate callers.\n\t* config/pa/pa.md: Likewise.\n\nFrom-SVN: r227920", "tree": {"sha": "6292f388f1cc2290e6a1e71bff131d6424fcfbeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6292f388f1cc2290e6a1e71bff131d6424fcfbeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5877e54ea0ab4f38f9046a12633de4fa6671e925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5877e54ea0ab4f38f9046a12633de4fa6671e925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5877e54ea0ab4f38f9046a12633de4fa6671e925", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5877e54ea0ab4f38f9046a12633de4fa6671e925/comments", "author": null, "committer": null, "parents": [{"sha": "57eb2d70a6b5e70c2bb3635d88974983b1ecf9e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57eb2d70a6b5e70c2bb3635d88974983b1ecf9e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57eb2d70a6b5e70c2bb3635d88974983b1ecf9e2"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "7b8b1f14432b2c5fd37112452835db5f35bb5fe3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5877e54ea0ab4f38f9046a12633de4fa6671e925/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5877e54ea0ab4f38f9046a12633de4fa6671e925/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5877e54ea0ab4f38f9046a12633de4fa6671e925", "patch": "@@ -1,3 +1,13 @@\n+2014-09-18  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/pa-protos.h (pa_cint_ok_for_move): Change argument type to\n+\tunsigned.\n+\t(pa_ldil_cint_p): Likewise.\n+\t* config/pa/pa.c (pa_cint_ok_for_move): likewise.\n+\t(pa_ldil_cint_p): Likewise. Change signed casts to unsigned.\n+\tUpdate callers.\n+\t* config/pa/pa.md: Likewise.\n+\n 2015-09-18  David Malcolm  <dmalcolm@redhat.com>\n \n \t* Makefile.in (OBJS-libcommon): Add diagnostic-show-locus.o."}, {"sha": "8bf2453815f43d0154930ccfb956ca1ea5cae49e", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5877e54ea0ab4f38f9046a12633de4fa6671e925/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5877e54ea0ab4f38f9046a12633de4fa6671e925/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=5877e54ea0ab4f38f9046a12633de4fa6671e925", "patch": "@@ -82,9 +82,9 @@ extern rtx pa_get_deferred_plabel (rtx);\n #endif /* RTX_CODE */\n \n extern int pa_and_mask_p (unsigned HOST_WIDE_INT);\n-extern int pa_cint_ok_for_move (HOST_WIDE_INT);\n+extern int pa_cint_ok_for_move (unsigned HOST_WIDE_INT);\n extern int pa_ior_mask_p (unsigned HOST_WIDE_INT);\n-extern int pa_ldil_cint_p (HOST_WIDE_INT);\n+extern int pa_ldil_cint_p (unsigned HOST_WIDE_INT);\n extern int pa_mem_shadd_constant_p (int);\n extern int pa_shadd_constant_p (int);\n extern int pa_zdepi_cint_p (unsigned HOST_WIDE_INT);"}, {"sha": "a3dc17b2f358ebdf8fe955f1600ad5002ee3c145", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5877e54ea0ab4f38f9046a12633de4fa6671e925/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5877e54ea0ab4f38f9046a12633de4fa6671e925/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=5877e54ea0ab4f38f9046a12633de4fa6671e925", "patch": "@@ -707,7 +707,7 @@ pa_symbolic_expression_p (rtx x)\n /* Accept any constant that can be moved in one instruction into a\n    general register.  */\n int\n-pa_cint_ok_for_move (HOST_WIDE_INT ival)\n+pa_cint_ok_for_move (unsigned HOST_WIDE_INT ival)\n {\n   /* OK if ldo, ldil, or zdepi, can be used.  */\n   return (VAL_14_BITS_P (ival)\n@@ -719,11 +719,12 @@ pa_cint_ok_for_move (HOST_WIDE_INT ival)\n    significant 11 bits of the value must be zero and the value must\n    not change sign when extended from 32 to 64 bits.  */\n int\n-pa_ldil_cint_p (HOST_WIDE_INT ival)\n+pa_ldil_cint_p (unsigned HOST_WIDE_INT ival)\n {\n-  HOST_WIDE_INT x = ival & (((HOST_WIDE_INT) -1 << 31) | 0x7ff);\n+  unsigned HOST_WIDE_INT x;\n \n-  return x == 0 || x == ((HOST_WIDE_INT) -1 << 31);\n+  x = ival & (((unsigned HOST_WIDE_INT) -1 << 31) | 0x7ff);\n+  return x == 0 || x == ((unsigned HOST_WIDE_INT) -1 << 31);\n }\n \n /* True iff zdepi can be used to generate this CONST_INT.\n@@ -1858,7 +1859,7 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \n       if (register_operand (operand1, mode)\n \t  || (GET_CODE (operand1) == CONST_INT\n-\t      && pa_cint_ok_for_move (INTVAL (operand1)))\n+\t      && pa_cint_ok_for_move (UINTVAL (operand1)))\n \t  || (operand1 == CONST0_RTX (mode))\n \t  || (GET_CODE (operand1) == HIGH\n \t      && !symbolic_operand (XEXP (operand1, 0), VOIDmode))\n@@ -2134,7 +2135,7 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \t  operands[1] = tmp;\n \t}\n       else if (GET_CODE (operand1) != CONST_INT\n-\t       || !pa_cint_ok_for_move (INTVAL (operand1)))\n+\t       || !pa_cint_ok_for_move (UINTVAL (operand1)))\n \t{\n \t  rtx temp;\n \t  rtx_insn *insn;\n@@ -10252,7 +10253,7 @@ pa_legitimate_constant_p (machine_mode mode, rtx x)\n       && !reload_in_progress\n       && !reload_completed\n       && !LEGITIMATE_64BIT_CONST_INT_P (INTVAL (x))\n-      && !pa_cint_ok_for_move (INTVAL (x)))\n+      && !pa_cint_ok_for_move (UINTVAL (x)))\n     return false;\n \n   if (function_label_operand (x, mode))"}, {"sha": "8ea669a4f734cfb8a112a87059eabc29388ebbf3", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5877e54ea0ab4f38f9046a12633de4fa6671e925/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5877e54ea0ab4f38f9046a12633de4fa6671e925/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=5877e54ea0ab4f38f9046a12633de4fa6671e925", "patch": "@@ -5035,7 +5035,7 @@\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t (match_operand:SI 2 \"const_int_operand\" \"\")))\n    (clobber (match_operand:SI 4 \"register_operand\" \"\"))]\n-  \"! pa_cint_ok_for_move (INTVAL (operands[2]))\n+  \"! pa_cint_ok_for_move (UINTVAL (operands[2]))\n    && VAL_14_BITS_P (INTVAL (operands[2]) >> 1)\"\n   [(set (match_dup 4) (plus:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 0) (plus:SI (match_dup 4) (match_dup 3)))]\n@@ -5054,13 +5054,13 @@\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t (match_operand:SI 2 \"const_int_operand\" \"\")))\n    (clobber (match_operand:SI 4 \"register_operand\" \"\"))]\n-  \"! pa_cint_ok_for_move (INTVAL (operands[2]))\"\n+  \"! pa_cint_ok_for_move (UINTVAL (operands[2]))\"\n   [(set (match_dup 4) (match_dup 2))\n    (set (match_dup 0) (plus:SI (ashift:SI (match_dup 4) (match_dup 3))\n \t\t\t       (match_dup 1)))]\n   \"\n {\n-  HOST_WIDE_INT intval = INTVAL (operands[2]);\n+  unsigned HOST_WIDE_INT intval = UINTVAL (operands[2]);\n \n   /* Try dividing the constant by 2, then 4, and finally 8 to see\n      if we can get a constant which can be loaded into a register"}]}