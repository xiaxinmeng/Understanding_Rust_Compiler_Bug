{"sha": "77e3c51603665bfe186b8b615500f6a22d8ff77f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdlM2M1MTYwMzY2NWJmZTE4NmI4YjYxNTUwMGY2YTIyZDhmZjc3Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-10-12T19:11:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-10-12T19:11:31Z"}, "message": "random.h (class linear_congruential_engine, [...]): Do not use simulated concept checks...\n\n2009-10-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/random.h (class linear_congruential_engine,\n\tclass mersenne_twister_engine, class subtract_with_carry_engine,\n\tclass discard_block_engine, class independent_bits_engine,\n\tclass shuffle_order_engine, class uniform_int_distribution,\n\tclass binomial_distribution, class geometric_distribution,\n\tclass negative_binomial_distribution, class poisson_distribution,\n\tclass discrete_distribution): Do not use simulated concept checks,\n\ttidy startic_asserts on argument types and ranges.\n\t(class uniform_real_distribution, class normal_distribution,\n\tclass lognormal_distribution, class gamma_distribution,\n\tclass chi_squared_distribution, class cauchy_distribution,\n\tclass fisher_f_distribution, class student_t_distribution,\n\tclass exponential_distribution, class weibull_distribution,\n\tclass extreme_value_distribution, class piecewise_linear_distribution,\n\tclass piecewise_constant_distribution): Add static_assert on\n\ttemplate argument type.\n\t* include/std/random: Do not include <bits/concept_check.h>.\n\t* testsuite/26_numerics/random/discard_block_engine/cons/base_move.cc:\n\tFix.\n\t* testsuite/26_numerics/random/discard_block_engine/cons/seed1.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/discard_block_engine/cons/seed2.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/discard_block_engine/cons/base_copy.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/discard_block_engine/cons/default.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/discard_block_engine/cons/seed_seq.cc:\n\tLikewise.\n\t* testsuite/26_numerics/random/discard_block_engine/requirements/\n\ttypedefs.cc: Likewise.\n\t* testsuite/26_numerics/random/discard_block_engine/operators/\n\tequal.cc: Likewise.\n\t* testsuite/26_numerics/random/discard_block_engine/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/linear_congruential_engine/\n\trequirements/non_uint_neg.cc: Tweak.\n\nFrom-SVN: r152682", "tree": {"sha": "eccd38cab9f8a11169b6a80a3a2b156ec7d323c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eccd38cab9f8a11169b6a80a3a2b156ec7d323c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77e3c51603665bfe186b8b615500f6a22d8ff77f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77e3c51603665bfe186b8b615500f6a22d8ff77f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77e3c51603665bfe186b8b615500f6a22d8ff77f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77e3c51603665bfe186b8b615500f6a22d8ff77f/comments", "author": null, "committer": null, "parents": [{"sha": "0ca5af51abe63d31a944080e63f04ff3525363e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ca5af51abe63d31a944080e63f04ff3525363e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ca5af51abe63d31a944080e63f04ff3525363e6"}], "stats": {"total": 199, "additions": 134, "deletions": 65}, "files": [{"sha": "2143533f6039e23ae2e2b803770b7e8d5f4030b4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=77e3c51603665bfe186b8b615500f6a22d8ff77f", "patch": "@@ -1,3 +1,43 @@\n+2009-10-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/random.h (class linear_congruential_engine,\n+\tclass mersenne_twister_engine, class subtract_with_carry_engine,\n+\tclass discard_block_engine, class independent_bits_engine,\n+\tclass shuffle_order_engine, class uniform_int_distribution,\n+\tclass binomial_distribution, class geometric_distribution,\n+\tclass negative_binomial_distribution, class poisson_distribution,\n+\tclass discrete_distribution): Do not use simulated concept checks,\n+\ttidy startic_asserts on argument types and ranges.\n+\t(class uniform_real_distribution, class normal_distribution,\n+\tclass lognormal_distribution, class gamma_distribution,\n+\tclass chi_squared_distribution, class cauchy_distribution,\n+\tclass fisher_f_distribution, class student_t_distribution,\n+\tclass exponential_distribution, class weibull_distribution,\n+\tclass extreme_value_distribution, class piecewise_linear_distribution,\n+\tclass piecewise_constant_distribution): Add static_assert on\n+\ttemplate argument type.\n+\t* include/std/random: Do not include <bits/concept_check.h>.\n+\t* testsuite/26_numerics/random/discard_block_engine/cons/base_move.cc:\n+\tFix.\n+\t* testsuite/26_numerics/random/discard_block_engine/cons/seed1.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/discard_block_engine/cons/seed2.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/discard_block_engine/cons/base_copy.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/discard_block_engine/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/discard_block_engine/cons/seed_seq.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/discard_block_engine/requirements/\n+\ttypedefs.cc: Likewise.\n+\t* testsuite/26_numerics/random/discard_block_engine/operators/\n+\tequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/discard_block_engine/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/linear_congruential_engine/\n+\trequirements/non_uint_neg.cc: Tweak.\n+\n 2009-10-10  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/xml/manual/messages.xml: Update GNU gettext reference."}, {"sha": "2c2c79ca16b1fcff1e47a6f419b73c6a6df2574a", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 84, "deletions": 54, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=77e3c51603665bfe186b8b615500f6a22d8ff77f", "patch": "@@ -32,7 +32,6 @@\n \n namespace std\n {\n-\n   // [26.4] Random number generation\n \n   /**\n@@ -154,10 +153,10 @@ namespace std\n   template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n     class linear_congruential_engine\n     {\n-      __glibcxx_class_requires(_UIntType, _UnsignedIntegerConcept)\n-      static_assert(__m == 0 || (__a < __m && __c < __m),\n-\t\t    \"template arguments out of bounds\"\n-\t\t    \" in linear_congruential_engine\");\n+      static_assert(std::is_unsigned<_UIntType>::value, \"template argument \"\n+\t\t    \"_UIntType not an unsigned integral type\");\n+      static_assert(__m == 0u || (__a < __m && __c < __m),\n+\t\t    \"template argument __m out of bounds\");\n \n     public:\n       /** The type of the generated random value. */\n@@ -341,35 +340,27 @@ namespace std\n \t   _UIntType __c, size_t __l, _UIntType __f>\n     class mersenne_twister_engine\n     {\n-      __glibcxx_class_requires(_UIntType, _UnsignedIntegerConcept)\n-\n-      static_assert(__m >= 1U, \n-\t\t    \"mersenne_twister_engine template arguments out of bounds\");\n-      static_assert(__n >= __m,\n-\t\t    \"mersenne_twister_engine template arguments out of bounds\");\n-      static_assert(__w >= __r,\n-\t\t    \"mersenne_twister_engine template arguments out of bounds\");\n-      static_assert(__w >= __u,\n-\t\t    \"mersenne_twister_engine template arguments out of bounds\");\n-      static_assert(__w >= __s,\n-\t\t    \"mersenne_twister_engine template arguments out of bounds\");\n-      static_assert(__w >= __t,\n-\t\t    \"mersenne_twister_engine template arguments out of bounds\");\n-      static_assert(__w >= __l,\n-\t\t    \"mersenne_twister_engine template arguments out of bounds\");\n-      static_assert(__w <=\n-\t\t    static_cast<size_t>(std::numeric_limits<_UIntType>::digits),\n-\t\t    \"mersenne_twister_engine template arguments out of bounds\");\n+      static_assert(std::is_unsigned<_UIntType>::value, \"template argument \"\n+\t\t    \"_UIntType not an unsigned integral type\");\n+      static_assert(1u <= __m && __m <= __n,\n+\t\t    \"template argument __m out of bounds\");\n+      static_assert(__r <= __w, \"template argument __r out of bound\");\n+      static_assert(__u <= __w, \"template argument __u out of bound\");\n+      static_assert(__s <= __w, \"template argument __s out of bound\");\n+      static_assert(__t <= __w, \"template argument __t out of bound\");\n+      static_assert(__l <= __w, \"template argument __l out of bound\");\n+      static_assert(__w <= std::numeric_limits<_UIntType>::digits,\n+\t\t    \"template argument __w out of bound\");\n       static_assert(__a <= (__detail::_Shift<_UIntType, __w>::__value - 1),\n-\t\t    \"mersenne_twister_engine template arguments out of bounds\");\n+\t\t    \"template argument __a out of bound\");\n       static_assert(__b <= (__detail::_Shift<_UIntType, __w>::__value - 1),\n-\t\t    \"mersenne_twister_engine template arguments out of bounds\");\n+\t\t    \"template argument __b out of bound\");\n       static_assert(__c <= (__detail::_Shift<_UIntType, __w>::__value - 1),\n-\t\t    \"mersenne_twister_engine template arguments out of bounds\");\n+\t\t    \"template argument __c out of bound\");\n       static_assert(__d <= (__detail::_Shift<_UIntType, __w>::__value - 1),\n-\t\t    \"mersenne_twister_engine template arguments out of bounds\");\n+\t\t    \"template argument __d out of bound\");\n       static_assert(__f <= (__detail::_Shift<_UIntType, __w>::__value - 1),\n-\t\t    \"mersenne_twister_engine template arguments out of bounds\");\n+\t\t    \"template argument __f out of bound\");\n \n     public:\n       /** The type of the generated random value. */\n@@ -538,13 +529,12 @@ namespace std\n   template<typename _UIntType, size_t __w, size_t __s, size_t __r>\n     class subtract_with_carry_engine\n     {\n-      __glibcxx_class_requires(_UIntType, _UnsignedIntegerConcept)\n-      static_assert(__s > 0U && __r > __s\n-\t\t    && __w > 0U\n-\t\t    && __w <= static_cast<size_t>\n-\t\t    (std::numeric_limits<_UIntType>::digits),\n-\t\t    \"template arguments out of bounds\"\n-\t\t    \" in subtract_with_carry_engine\");\n+      static_assert(std::is_unsigned<_UIntType>::value, \"template argument \"\n+\t\t    \"_UIntType not an unsigned integral type\");\n+      static_assert(0u < __s && __s < __r,\n+\t\t    \"template argument __s out of bounds\");\n+      static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,\n+\t\t    \"template argument __w out of bounds\");\n \n     public:\n       /** The type of the generated random value. */\n@@ -702,9 +692,8 @@ namespace std\n   template<typename _RandomNumberEngine, size_t __p, size_t __r>\n     class discard_block_engine\n     {\n-      static_assert(__r >= 1U && __p >= __r,\n-\t\t    \"template arguments out of bounds\"\n-\t\t    \" in discard_block_engine\");\n+      static_assert(1 <= __r && __r <= __p,\n+\t\t    \"template argument __r out of bounds\");\n \n     public:\n       /** The type of the generated random value. */\n@@ -903,12 +892,10 @@ namespace std\n   template<typename _RandomNumberEngine, size_t __w, typename _UIntType>\n     class independent_bits_engine\n     {\n-      static_assert(__w > 0U\n-\t\t    && __w <=\n-\t\t    static_cast<size_t>\n-\t\t    (std::numeric_limits<_UIntType>::digits),\n-\t\t    \"template arguments out of bounds \"\n-\t\t    \"in independent_bits_engine\");\n+      static_assert(std::is_unsigned<_UIntType>::value, \"template argument \"\n+\t\t    \"_UIntType not an unsigned integral type\");\n+      static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,\n+\t\t    \"template argument __w out of bounds\");\n \n     public:\n       /** The type of the generated random value. */\n@@ -1102,9 +1089,7 @@ namespace std\n   template<typename _RandomNumberEngine, size_t __k>\n     class shuffle_order_engine\n     {\n-      static_assert(__k >= 1U,\n-\t\t    \"template arguments out of bounds\"\n-\t\t    \" in shuffle_order_engine\");\n+      static_assert(1u <= __k, \"template argument __k out of bound\");\n \n     public:\n       /** The type of the generated random value. */\n@@ -1480,7 +1465,8 @@ namespace std\n   template<typename _IntType = int>\n     class uniform_int_distribution\n     {\n-      __glibcxx_class_requires(_IntType, _IntegerConcept)\n+      static_assert(std::is_integral<_IntType>::value,\n+\t\t    \"template argument not an integral type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -1633,6 +1619,9 @@ namespace std\n   template<typename _RealType = double>\n     class uniform_real_distribution\n     {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n@@ -1791,6 +1780,9 @@ namespace std\n   template<typename _RealType = double>\n     class normal_distribution\n     {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n@@ -1943,6 +1935,9 @@ namespace std\n   template<typename _RealType = double>\n     class lognormal_distribution\n     {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n@@ -2086,6 +2081,9 @@ namespace std\n   template<typename _RealType = double>\n     class gamma_distribution\n     {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n@@ -2243,6 +2241,9 @@ namespace std\n   template<typename _RealType = double>\n     class chi_squared_distribution\n     {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n@@ -2378,6 +2379,9 @@ namespace std\n   template<typename _RealType = double>\n     class cauchy_distribution\n     {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n@@ -2519,6 +2523,9 @@ namespace std\n   template<typename _RealType = double>\n     class fisher_f_distribution\n     {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n@@ -2670,6 +2677,9 @@ namespace std\n   template<typename _RealType = double>\n     class student_t_distribution\n     {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n@@ -2972,7 +2982,8 @@ namespace std\n   template<typename _IntType = int>\n     class binomial_distribution\n     {\n-      __glibcxx_class_requires(_IntType, _IntegerConcept)\n+      static_assert(std::is_integral<_IntType>::value,\n+\t\t    \"template argument not an integral type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -3142,7 +3153,8 @@ namespace std\n   template<typename _IntType = int>\n     class geometric_distribution\n     {\n-      __glibcxx_class_requires(_IntType, _IntegerConcept)\n+      static_assert(std::is_integral<_IntType>::value,\n+\t\t    \"template argument not an integral type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -3287,7 +3299,8 @@ namespace std\n   template<typename _IntType = int>\n     class negative_binomial_distribution\n     {\n-      __glibcxx_class_requires(_IntType, _IntegerConcept)\n+      static_assert(std::is_integral<_IntType>::value,\n+\t\t    \"template argument not an integral type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -3439,7 +3452,8 @@ namespace std\n   template<typename _IntType = int>\n     class poisson_distribution\n     {\n-      __glibcxx_class_requires(_IntType, _IntegerConcept)\n+      static_assert(std::is_integral<_IntType>::value,\n+\t\t    \"template argument not an integral type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -3594,6 +3608,9 @@ namespace std\n   template<typename _RealType = double>\n     class exponential_distribution\n     {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n@@ -3736,6 +3753,9 @@ namespace std\n   template<typename _RealType = double>\n     class weibull_distribution\n     {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n@@ -3879,6 +3899,9 @@ namespace std\n   template<typename _RealType = double>\n     class extreme_value_distribution\n     {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n@@ -4021,7 +4044,8 @@ namespace std\n   template<typename _IntType = int>\n     class discrete_distribution\n     {\n-      __glibcxx_class_requires(_IntType, _IntegerConcept)\n+      static_assert(std::is_integral<_IntType>::value,\n+\t\t    \"template argument not an integral type\");\n \n     public:\n       /** The type of the range of the distribution. */\n@@ -4185,6 +4209,9 @@ namespace std\n   template<typename _RealType = double>\n     class piecewise_constant_distribution\n     {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;\n@@ -4363,6 +4390,9 @@ namespace std\n   template<typename _RealType = double>\n     class piecewise_linear_distribution\n     {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+\n     public:\n       /** The type of the range of the distribution. */\n       typedef _RealType result_type;"}, {"sha": "72d3ceb7f4314b4fa69333b58845237dc6187984", "filename": "libstdc++-v3/include/std/random", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Frandom?ref=77e3c51603665bfe186b8b615500f6a22d8ff77f", "patch": "@@ -43,7 +43,6 @@\n #include <limits>\n #include <ext/type_traits.h>\n #include <ext/numeric_traits.h>\n-#include <bits/concept_check.h>\n #include <debug/debug.h>\n #include <type_traits>\n "}, {"sha": "6c8498e7b106125d5b5a7af6ea5c460b5d24fee4", "filename": "libstdc++-v3/testsuite/26_numerics/random/discard_block_engine/cons/base_copy.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fbase_copy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fbase_copy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fbase_copy.cc?ref=77e3c51603665bfe186b8b615500f6a22d8ff77f", "patch": "@@ -31,7 +31,7 @@ test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  typedef std::subtract_with_carry_engine<long, 24, 10, 24>\n+  typedef std::subtract_with_carry_engine<unsigned long, 24, 10, 24>\n     base_engine;\n \n   base_engine b;"}, {"sha": "fabe17a2b5639767a559d0ee2ea83abbe08c3591", "filename": "libstdc++-v3/testsuite/26_numerics/random/discard_block_engine/cons/base_move.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fbase_move.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fbase_move.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fbase_move.cc?ref=77e3c51603665bfe186b8b615500f6a22d8ff77f", "patch": "@@ -31,7 +31,7 @@ test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  typedef std::subtract_with_carry_engine<long, 24, 10, 24>\n+  typedef std::subtract_with_carry_engine<unsigned long, 24, 10, 24>\n     base_engine;\n \n   std::discard_block_engine<base_engine, 389, 24>"}, {"sha": "926bb2c24dbe83c82c07cffe49dbc27bd93c0938", "filename": "libstdc++-v3/testsuite/26_numerics/random/discard_block_engine/cons/default.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fdefault.cc?ref=77e3c51603665bfe186b8b615500f6a22d8ff77f", "patch": "@@ -33,7 +33,7 @@ test01()\n \n   std::discard_block_engine\n     <\n-      std::subtract_with_carry_engine<long, 24, 10, 24>,\n+      std::subtract_with_carry_engine<unsigned long, 24, 10, 24>,\n       389, 24\n     > e;\n }"}, {"sha": "4cedeb85d39974f53ace182cac42ec9c89f2eae6", "filename": "libstdc++-v3/testsuite/26_numerics/random/discard_block_engine/cons/seed1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed1.cc?ref=77e3c51603665bfe186b8b615500f6a22d8ff77f", "patch": "@@ -35,7 +35,7 @@ test01()\n \n   std::discard_block_engine\n     <\n-      std::subtract_with_carry_engine<long, 24, 10, 24>,\n+      std::subtract_with_carry_engine<unsigned long, 24, 10, 24>,\n       389, 24\n     > e(seed);\n }"}, {"sha": "b66752c2b6e604a56a4a523cdee99abc34dcfbcd", "filename": "libstdc++-v3/testsuite/26_numerics/random/discard_block_engine/cons/seed2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed2.cc?ref=77e3c51603665bfe186b8b615500f6a22d8ff77f", "patch": "@@ -35,7 +35,7 @@ test01()\n \n   std::discard_block_engine\n     <\n-      std::subtract_with_carry_engine<long, 24, 10, 24>,\n+      std::subtract_with_carry_engine<unsigned long, 24, 10, 24>,\n       389, 24\n     > e(seed);\n }"}, {"sha": "aa86b9afedc9da54d54cef499baf452c30e890ad", "filename": "libstdc++-v3/testsuite/26_numerics/random/discard_block_engine/cons/seed_seq.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed_seq.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed_seq.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed_seq.cc?ref=77e3c51603665bfe186b8b615500f6a22d8ff77f", "patch": "@@ -35,7 +35,7 @@ test01()\n \n   std::discard_block_engine\n     <\n-      std::subtract_with_carry_engine<long, 24, 10, 24>,\n+      std::subtract_with_carry_engine<unsigned long, 24, 10, 24>,\n       389, 24\n     > e(seq);\n }"}, {"sha": "5d63114fef3b62a0a849add395f90fd5eefeb305", "filename": "libstdc++-v3/testsuite/26_numerics/random/discard_block_engine/operators/equal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Foperators%2Fequal.cc?ref=77e3c51603665bfe186b8b615500f6a22d8ff77f", "patch": "@@ -33,7 +33,7 @@ test01()\n \n   std::discard_block_engine\n     <\n-    std::subtract_with_carry_engine<long, 24, 10, 24>,\n+    std::subtract_with_carry_engine<unsigned long, 24, 10, 24>,\n     389, 24\n     > u, v;\n "}, {"sha": "7aec649c03b9c5cec6b722c05bcfbaf57aa0dcaa", "filename": "libstdc++-v3/testsuite/26_numerics/random/discard_block_engine/operators/serialize.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Foperators%2Fserialize.cc?ref=77e3c51603665bfe186b8b615500f6a22d8ff77f", "patch": "@@ -35,7 +35,7 @@ test01()\n   std::stringstream str;\n   std::discard_block_engine\n     <\n-    std::subtract_with_carry_engine<long, 24, 10, 24>,\n+    std::subtract_with_carry_engine<unsigned long, 24, 10, 24>,\n     389, 24\n     > u, v;\n "}, {"sha": "6e23316caa1daa2c10a3cc10bcf316cd02f22a51", "filename": "libstdc++-v3/testsuite/26_numerics/random/discard_block_engine/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Frequirements%2Ftypedefs.cc?ref=77e3c51603665bfe186b8b615500f6a22d8ff77f", "patch": "@@ -31,7 +31,7 @@ test01()\n {\n   typedef std::discard_block_engine\n     <\n-    std::subtract_with_carry_engine<long, 24, 10, 24>,\n+    std::subtract_with_carry_engine<unsigned long, 24, 10, 24>,\n     389, 24\n     > test_type;\n "}, {"sha": "18fb44fdac54728f5a7a8e2307c2e903475787d3", "filename": "libstdc++-v3/testsuite/26_numerics/random/linear_congruential_engine/requirements/non_uint_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Frequirements%2Fnon_uint_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77e3c51603665bfe186b8b615500f6a22d8ff77f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Frequirements%2Fnon_uint_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Frequirements%2Fnon_uint_neg.cc?ref=77e3c51603665bfe186b8b615500f6a22d8ff77f", "patch": "@@ -19,7 +19,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-options \"-std=c++0x -D_GLIBCXX_CONCEPT_CHECKS\" }\n+// { dg-options \"-std=c++0x\" }\n // { dg-require-cstdint \"\" }\n // { dg-error \"not a valid type\" \"\" { target *-*-* } 32 }\n // { dg-error \"invalid type\"     \"\" { target *-*-* } 32 }"}]}