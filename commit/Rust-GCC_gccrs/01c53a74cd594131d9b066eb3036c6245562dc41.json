{"sha": "01c53a74cd594131d9b066eb3036c6245562dc41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFjNTNhNzRjZDU5NDEzMWQ5YjA2NmViMzAzNmM2MjQ1NTYyZGM0MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-08-23T23:29:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-08-23T23:29:10Z"}, "message": "* parser.c (cp_parser_nested_name_specifier_opt): Avoid redundant error.\n\nFrom-SVN: r274893", "tree": {"sha": "daacee2ea72bc3694b7314bba3b48847c3c670c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/daacee2ea72bc3694b7314bba3b48847c3c670c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01c53a74cd594131d9b066eb3036c6245562dc41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c53a74cd594131d9b066eb3036c6245562dc41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01c53a74cd594131d9b066eb3036c6245562dc41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c53a74cd594131d9b066eb3036c6245562dc41/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9bf6c63da9ff140bb37d957ad1252848e2df28ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf6c63da9ff140bb37d957ad1252848e2df28ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bf6c63da9ff140bb37d957ad1252848e2df28ef"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "06437559480c1754a28fabfc7abd38b445d77bb8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c53a74cd594131d9b066eb3036c6245562dc41/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c53a74cd594131d9b066eb3036c6245562dc41/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=01c53a74cd594131d9b066eb3036c6245562dc41", "patch": "@@ -1,3 +1,8 @@\n+2019-08-22  Jason Merrill  <jason@redhat.com>\n+\n+\t* parser.c (cp_parser_nested_name_specifier_opt): Avoid redundant\n+\terror.\n+\n 2019-08-23  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91521 - wrong error with operator->."}, {"sha": "382575320de53f89a6a1cd7c41acc8b104372421", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c53a74cd594131d9b066eb3036c6245562dc41/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c53a74cd594131d9b066eb3036c6245562dc41/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=01c53a74cd594131d9b066eb3036c6245562dc41", "patch": "@@ -6420,9 +6420,11 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n \t\t  == CPP_SCOPE))\n \t    {\n \t      token = cp_lexer_consume_token (parser->lexer);\n-\t      error_at (token->location, \"%<decltype%> evaluates to %qT, \"\n-\t\t\t\"which is not a class or enumeration type\",\n-\t\t\ttoken->u.tree_check_value->value);\n+\t      tree dtype = token->u.tree_check_value->value;\n+\t      if (dtype != error_mark_node)\n+\t\terror_at (token->location, \"%<decltype%> evaluates to %qT, \"\n+\t\t\t  \"which is not a class or enumeration type\",\n+\t\t\t  dtype);\n \t      parser->scope = error_mark_node;\n \t      error_p = true;\n \t      /* As below.  */"}]}