{"sha": "8a6a05ce93121efb84acaff4d860ced53c4f2925", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE2YTA1Y2U5MzEyMWVmYjg0YWNhZmY0ZDg2MGNlZDUzYzRmMjkyNQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-09-26T11:53:40Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-09-26T11:53:40Z"}, "message": "re PR target/50465 ([avr] Use insn attribute to depict if and how instruction lengths have to be adjusted)\n\n\tPR target/50465\n\t* config/avr/avr-protos.h (output_reload_insisf): Don't pass insn.\n\t* config/avr/avr.md (*reload_insi, *reload_insf): Change call to\n\toutput_reload_insisf.\n\t(adjust_len): Set default to \"no\".\n\tRemove alternative \"yes\".  Add alternatives: \"mov8\", \"mov16\",\n\t\"mov32\", \"ashlqi\", \"ashrqi\", \"lshrqi\", \"ashlhi\", \"ashrhi\",\n\t\"lshrhi\", \"ashlsi, \"ashrsi\", \"lshrsi\".\n\t(*movqi, *movhi, *movsi, *ashlqi3, ashlhi3, ashlsi3,\n\t*ashlhi3_const, *ashlsi3_const, ashrqi3, ashrhi3, ashrsi3,\n\t*ashrhi3_const, *ashrsi3_const, *lshrqi3, lshrhi3, *lshrhi3_const,\n\t*lshrsi3_const): Set attribute \"adjust_len\".\n\t* config/avr/avr.c (output_reload_insisf): Remove parameter \"insn\".\n\t(output_movsisf): Don't pass insn to output_reload_insisf.\n\t(adjust_insn_length): Handle new alternatives to adjust_len.\n\tRemove handling of ADJUST_LEN_YES.  Clean-up code.\n\nFrom-SVN: r179191", "tree": {"sha": "60e8960452bf9912de1335e7674cc9ea2c2d7def", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60e8960452bf9912de1335e7674cc9ea2c2d7def"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a6a05ce93121efb84acaff4d860ced53c4f2925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a6a05ce93121efb84acaff4d860ced53c4f2925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a6a05ce93121efb84acaff4d860ced53c4f2925", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a6a05ce93121efb84acaff4d860ced53c4f2925/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d0dd51a1a4bd3d27b326b97bd2674db5da8c5a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d0dd51a1a4bd3d27b326b97bd2674db5da8c5a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d0dd51a1a4bd3d27b326b97bd2674db5da8c5a2"}], "stats": {"total": 234, "additions": 99, "deletions": 135}, "files": [{"sha": "2d7def04bb908892a26d9ab00d92c262d4b70398", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a6a05ce93121efb84acaff4d860ced53c4f2925/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a6a05ce93121efb84acaff4d860ced53c4f2925/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a6a05ce93121efb84acaff4d860ced53c4f2925", "patch": "@@ -1,3 +1,22 @@\n+2011-09-26  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/50465\n+\t* config/avr/avr-protos.h (output_reload_insisf): Don't pass insn.\n+\t* config/avr/avr.md (*reload_insi, *reload_insf): Change call to\n+\toutput_reload_insisf.\n+\t(adjust_len): Set default to \"no\".\n+\tRemove alternative \"yes\".  Add alternatives: \"mov8\", \"mov16\",\n+\t\"mov32\", \"ashlqi\", \"ashrqi\", \"lshrqi\", \"ashlhi\", \"ashrhi\",\n+\t\"lshrhi\", \"ashlsi, \"ashrsi\", \"lshrsi\".\n+\t(*movqi, *movhi, *movsi, *ashlqi3, ashlhi3, ashlsi3,\n+\t*ashlhi3_const, *ashlsi3_const, ashrqi3, ashrhi3, ashrsi3,\n+\t*ashrhi3_const, *ashrsi3_const, *lshrqi3, lshrhi3, *lshrhi3_const,\n+\t*lshrsi3_const): Set attribute \"adjust_len\".\n+\t* config/avr/avr.c (output_reload_insisf): Remove parameter \"insn\".\n+\t(output_movsisf): Don't pass insn to output_reload_insisf.\n+\t(adjust_insn_length): Handle new alternatives to adjust_len.\n+\tRemove handling of ADJUST_LEN_YES.  Clean-up code.\n+\n 2011-09-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* ifcvt.c (noce_try_cmove_arith): Use may_trap_or_fault_p in lieu of"}, {"sha": "ed88ef70a291ea0a25a317c8ff85018c84b042e7", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a6a05ce93121efb84acaff4d860ced53c4f2925/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a6a05ce93121efb84acaff4d860ced53c4f2925/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=8a6a05ce93121efb84acaff4d860ced53c4f2925", "patch": "@@ -88,7 +88,7 @@ extern bool avr_popcount_each_byte (rtx, int, int);\n extern int extra_constraint_Q (rtx x);\n extern int adjust_insn_length (rtx insn, int len);\n extern const char* output_reload_inhi (rtx*, rtx, int*);\n-extern const char *output_reload_insisf (rtx insn, rtx *operands, rtx clobber, int *len);\n+extern const char* output_reload_insisf (rtx*, rtx, int*);\n extern void notice_update_cc (rtx body, rtx insn);\n extern void print_operand (FILE *file, rtx x, int code);\n extern void print_operand_address (FILE *file, rtx addr);"}, {"sha": "da5304151744b3cb5b3f4c04343d49da0655c462", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 42, "deletions": 121, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a6a05ce93121efb84acaff4d860ced53c4f2925/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a6a05ce93121efb84acaff4d860ced53c4f2925/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=8a6a05ce93121efb84acaff4d860ced53c4f2925", "patch": "@@ -2691,7 +2691,7 @@ output_movsisf (rtx insn, rtx operands[], int *l)\n       else if (CONST_INT_P (src)\n                || CONST_DOUBLE_P (src))\n         {\n-          return output_reload_insisf (insn, operands, NULL_RTX, real_l);\n+          return output_reload_insisf (operands, NULL_RTX, real_l);\n         }\n       else if (CONSTANT_P (src))\n \t{\n@@ -5019,7 +5019,7 @@ avr_rotate_bytes (rtx operands[])\n int\n adjust_insn_length (rtx insn, int len)\n {\n-  rtx patt, set;\n+  rtx *op = recog_data.operand;\n   enum attr_adjust_len adjust_len;\n \n   /* Some complex insns don't need length adjustment and therefore\n@@ -5036,131 +5036,53 @@ adjust_insn_length (rtx insn, int len)\n \n   adjust_len = get_attr_adjust_len (insn);\n \n-  if (adjust_len != ADJUST_LEN_YES)\n+  if (adjust_len == ADJUST_LEN_NO)\n     {\n-      rtx *op = recog_data.operand;\n+      /* Nothing to adjust: The length from attribute \"length\" is fine.\n+         This is the default.  */\n       \n-      if (adjust_len == ADJUST_LEN_NO)\n-        {\n-          /* Nothing to adjust: The length from attribute \"length\" is fine.  */\n-          \n-          return len;\n-        }\n-\n-      /* Extract insn's operands.  */\n+      return len;\n+    }\n+  \n+  /* Extract insn's operands.  */\n+  \n+  extract_constrain_insn_cached (insn);\n+  \n+  /* Dispatch to right function.  */\n+  \n+  switch (adjust_len)\n+    {\n+    case ADJUST_LEN_RELOAD_IN16: output_reload_inhi (op, op[2], &len); break;\n+    case ADJUST_LEN_RELOAD_IN32: output_reload_insisf (op, op[2], &len); break;\n       \n-      extract_constrain_insn_cached (insn);\n-\n-      /* Dispatch to right function.  */\n+    case ADJUST_LEN_OUT_BITOP: avr_out_bitop (insn, op, &len); break;\n       \n-      switch (adjust_len)\n-        {\n-        case ADJUST_LEN_RELOAD_IN16:\n-          output_reload_inhi (op, op[2], &len);\n-          break;\n-          \n-        case ADJUST_LEN_RELOAD_IN32:\n-          output_reload_insisf (insn, op, op[2], &len);\n-          break;\n-          \n-        case ADJUST_LEN_OUT_BITOP:\n-          avr_out_bitop (insn, op, &len);\n-          break;\n-\n-        case ADJUST_LEN_OUT_PLUS:\n-          avr_out_plus (op, &len);\n-          break;\n-\n-        case ADJUST_LEN_TSTHI: avr_out_tsthi (insn, op, &len); break;\n-        case ADJUST_LEN_TSTSI: avr_out_tstsi (insn, op, &len); break;\n-        case ADJUST_LEN_COMPARE: avr_out_compare (insn, op, &len); break;\n-          \n-        default:\n-          gcc_unreachable();\n-        }\n+    case ADJUST_LEN_OUT_PLUS: avr_out_plus (op, &len); break;\n       \n-      return len;\n-    } /* adjust_length != ADJUST_LEN_YES */\n-\n-  /* adjust_len == \"yes\": Analyse insn by hand.  */\n-  \n-  patt = PATTERN (insn);\n+    case ADJUST_LEN_MOV8:  output_movqi (insn, op, &len); break;\n+    case ADJUST_LEN_MOV16: output_movhi (insn, op, &len); break;\n+    case ADJUST_LEN_MOV32: output_movsisf (insn, op, &len); break;\n+      \n+    case ADJUST_LEN_TSTHI: avr_out_tsthi (insn, op, &len); break;\n+    case ADJUST_LEN_TSTSI: avr_out_tstsi (insn, op, &len); break;\n+    case ADJUST_LEN_COMPARE: avr_out_compare (insn, op, &len); break;\n \n-  if (GET_CODE (patt) == SET)\n-    {\n-      rtx op[10];\n-      op[1] = SET_SRC (patt);\n-      op[0] = SET_DEST (patt);\n-      if (general_operand (op[1], VOIDmode)\n-\t  && general_operand (op[0], VOIDmode))\n-\t{\n-\t  switch (GET_MODE (op[0]))\n-\t    {\n-\t    case QImode:\n-\t      output_movqi (insn, op, &len);\n-\t      break;\n-\t    case HImode:\n-\t      output_movhi (insn, op, &len);\n-\t      break;\n-\t    case SImode:\n-\t    case SFmode:\n-\t      output_movsisf (insn, op, &len);\n-\t      break;\n-\t    default:\n-\t      break;\n-\t    }\n-\t}\n-    }\n-  set = single_set (insn);\n-  if (set)\n-    {\n-      rtx op[10];\n+    case ADJUST_LEN_LSHRQI: lshrqi3_out (insn, op, &len); break;\n+    case ADJUST_LEN_LSHRHI: lshrhi3_out (insn, op, &len); break;\n+    case ADJUST_LEN_LSHRSI: lshrsi3_out (insn, op, &len); break;\n \n-      op[1] = SET_SRC (set);\n-      op[0] = SET_DEST (set);\n+    case ADJUST_LEN_ASHRQI: ashrqi3_out (insn, op, &len); break;\n+    case ADJUST_LEN_ASHRHI: ashrhi3_out (insn, op, &len); break;\n+    case ADJUST_LEN_ASHRSI: ashrsi3_out (insn, op, &len); break;\n \n-      if (GET_CODE (op[1]) == ASHIFT\n-\t  || GET_CODE (op[1]) == ASHIFTRT\n-\t  || GET_CODE (op[1]) == LSHIFTRT)\n-\t{\n-\t  rtx ops[10];\n-\t  ops[0] = op[0];\n-\t  ops[1] = XEXP (op[1],0);\n-\t  ops[2] = XEXP (op[1],1);\n-\t  switch (GET_CODE (op[1]))\n-\t    {\n-\t    case ASHIFT:\n-\t      switch (GET_MODE (op[0]))\n-\t\t{\n-\t\tcase QImode: ashlqi3_out (insn,ops,&len); break;\n-\t\tcase HImode: ashlhi3_out (insn,ops,&len); break;\n-\t\tcase SImode: ashlsi3_out (insn,ops,&len); break;\n-\t\tdefault: break;\n-\t\t}\n-\t      break;\n-\t    case ASHIFTRT:\n-\t      switch (GET_MODE (op[0]))\n-\t\t{\n-\t\tcase QImode: ashrqi3_out (insn,ops,&len); break;\n-\t\tcase HImode: ashrhi3_out (insn,ops,&len); break;\n-\t\tcase SImode: ashrsi3_out (insn,ops,&len); break;\n-\t\tdefault: break;\n-\t\t}\n-\t      break;\n-\t    case LSHIFTRT:\n-\t      switch (GET_MODE (op[0]))\n-\t\t{\n-\t\tcase QImode: lshrqi3_out (insn,ops,&len); break;\n-\t\tcase HImode: lshrhi3_out (insn,ops,&len); break;\n-\t\tcase SImode: lshrsi3_out (insn,ops,&len); break;\n-\t\tdefault: break;\n-\t\t}\n-\t      break;\n-\t    default:\n-\t      break;\n-\t    }\n-\t}\n+    case ADJUST_LEN_ASHLQI: ashlqi3_out (insn, op, &len); break;\n+    case ADJUST_LEN_ASHLHI: ashlhi3_out (insn, op, &len); break;\n+    case ADJUST_LEN_ASHLSI: ashlsi3_out (insn, op, &len); break;\n+      \n+    default:\n+      gcc_unreachable();\n     }\n+  \n   return len;\n }\n \n@@ -7064,7 +6986,7 @@ avr_hard_regno_mode_ok (int regno, enum machine_mode mode)\n }\n \n \n-/* A helper for `output_reload_insisf'.  */\n+/* A helper for `output_reload_insisf' and `output_reload_inhi'.  */\n /* Set 32-bit register OP[0] to compile-time constant OP[1].\n    CLOBBER_REG is a QI clobber register or NULL_RTX.\n    LEN == NULL: output instructions.\n@@ -7329,8 +7251,7 @@ output_reload_inhi (rtx *op, rtx clobber_reg, int *plen)\n    Return \"\".  */\n \n const char *\n-output_reload_insisf (rtx insn ATTRIBUTE_UNUSED,\n-                      rtx *op, rtx clobber_reg, int *len)\n+output_reload_insisf (rtx *op, rtx clobber_reg, int *len)\n {\n   gcc_assert (REG_P (op[0])\n               && CONSTANT_P (op[1]));"}, {"sha": "2efb0c4d8185d60f5427106299ae59e3d9a14572", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a6a05ce93121efb84acaff4d860ced53c4f2925/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a6a05ce93121efb84acaff4d860ced53c4f2925/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=8a6a05ce93121efb84acaff4d860ced53c4f2925", "patch": "@@ -136,8 +136,13 @@\n ;; Otherwise do special processing depending on the attribute.\n \n (define_attr \"adjust_len\"\n-  \"yes,no,reload_in16,reload_in32,out_bitop,out_plus,tsthi,tstsi,compare\"\n-  (const_string \"yes\"))\n+  \"out_bitop, out_plus, tsthi, tstsi, compare,\n+   mov8, mov16, mov32, reload_in16, reload_in32,\n+   ashlqi, ashrqi, lshrqi,\n+   ashlhi, ashrhi, lshrhi,\n+   ashlsi, ashrsi, lshrsi,\n+   no\"\n+  (const_string \"no\"))\n \n ;; Define mode iterators\n (define_mode_iterator QIHI  [(QI \"\") (HI \"\")])\n@@ -297,6 +302,7 @@\n     || register_operand (operands[1], QImode) || const0_rtx == operands[1])\"\n   \"* return output_movqi (insn, operands, NULL);\"\n   [(set_attr \"length\" \"1,1,5,5,1,1,4\")\n+   (set_attr \"adjust_len\" \"mov8\")\n    (set_attr \"cc\" \"none,none,clobber,clobber,none,none,clobber\")])\n \n ;; This is used in peephole2 to optimize loading immediate constants\n@@ -401,6 +407,7 @@\n     || register_operand (operands[1],HImode) || const0_rtx == operands[1])\"\n   \"* return output_movhi (insn, operands, NULL);\"\n   [(set_attr \"length\" \"2,2,6,7,2,6,5,2\")\n+   (set_attr \"adjust_len\" \"mov16\")\n    (set_attr \"cc\" \"none,clobber,clobber,clobber,none,clobber,none,none\")])\n \n (define_peephole2 ; movw\n@@ -468,7 +475,7 @@\n    (clobber (match_operand:QI 2 \"register_operand\" \"=&d\"))]\n   \"reload_completed\"\n   {\n-    return output_reload_insisf (insn, operands, operands[2], NULL);\n+    return output_reload_insisf (operands, operands[2], NULL);\n   }\n   [(set_attr \"length\" \"8\")\n    (set_attr \"adjust_len\" \"reload_in32\")\n@@ -484,6 +491,7 @@\n     return output_movsisf (insn, operands, NULL);\n   }\n   [(set_attr \"length\" \"4,4,8,9,4,10\")\n+   (set_attr \"adjust_len\" \"mov32\")\n    (set_attr \"cc\" \"none,set_zn,clobber,clobber,clobber,clobber\")])\n \n ;; fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n@@ -513,6 +521,7 @@\n     return output_movsisf (insn, operands, NULL);\n   }\n   [(set_attr \"length\" \"4,4,8,9,4,10\")\n+   (set_attr \"adjust_len\" \"mov32\")\n    (set_attr \"cc\" \"none,set_zn,clobber,clobber,clobber,clobber\")])\n \n (define_peephole2 ; *reload_insf\n@@ -533,7 +542,7 @@\n    (clobber (match_operand:QI 2 \"register_operand\" \"=&d\"))]\n   \"reload_completed\"\n   {\n-    return output_reload_insisf (insn, operands, operands[2], NULL);\n+    return output_reload_insisf (operands, operands[2], NULL);\n   }\n   [(set_attr \"length\" \"8\")\n    (set_attr \"adjust_len\" \"reload_in32\")\n@@ -934,7 +943,7 @@\n     return asm_code [which_alternative];\n   }\n   [(set_attr \"length\" \"4,3,3,4,5,5,8,8\")\n-   (set_attr \"adjust_len\" \"no,no,no,no,no,no,out_plus,out_plus\")\n+   (set_attr \"adjust_len\" \"*,*,*,*,*,*,out_plus,out_plus\")\n    (set_attr \"cc\" \"set_n,set_n,set_czn,set_czn,set_n,set_n,clobber,clobber\")])\n \n (define_insn \"*addsi3_zero_extend\"\n@@ -2271,7 +2280,7 @@\n     return avr_out_bitop (insn, operands, NULL);\n   }\n   [(set_attr \"length\" \"2,2,2,4,4\")\n-   (set_attr \"adjust_len\" \"no,no,out_bitop,out_bitop,out_bitop\")\n+   (set_attr \"adjust_len\" \"*,*,out_bitop,out_bitop,out_bitop\")\n    (set_attr \"cc\" \"set_n,set_n,clobber,clobber,clobber\")])\n \n (define_insn \"andsi3\"\n@@ -2290,7 +2299,7 @@\n     return avr_out_bitop (insn, operands, NULL);\n   }\n   [(set_attr \"length\" \"4,4,8,8\")\n-   (set_attr \"adjust_len\" \"no,out_bitop,out_bitop,out_bitop\")\n+   (set_attr \"adjust_len\" \"*,out_bitop,out_bitop,out_bitop\")\n    (set_attr \"cc\" \"set_n,clobber,clobber,clobber\")])\n \n (define_peephole2 ; andi\n@@ -2335,7 +2344,7 @@\n     return avr_out_bitop (insn, operands, NULL);\n   }\n   [(set_attr \"length\" \"2,2,2,4,4\")\n-   (set_attr \"adjust_len\" \"no,no,out_bitop,out_bitop,out_bitop\")\n+   (set_attr \"adjust_len\" \"*,*,out_bitop,out_bitop,out_bitop\")\n    (set_attr \"cc\" \"set_n,set_n,clobber,clobber,clobber\")])\n \n (define_insn \"iorsi3\"\n@@ -2354,7 +2363,7 @@\n     return avr_out_bitop (insn, operands, NULL);\n   }\n   [(set_attr \"length\" \"4,4,8,8\")\n-   (set_attr \"adjust_len\" \"no,out_bitop,out_bitop,out_bitop\")\n+   (set_attr \"adjust_len\" \"*,out_bitop,out_bitop,out_bitop\")\n    (set_attr \"cc\" \"set_n,clobber,clobber,clobber\")])\n \n ;;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -2382,7 +2391,7 @@\n     return avr_out_bitop (insn, operands, NULL);\n   }\n   [(set_attr \"length\" \"2,2,4\")\n-   (set_attr \"adjust_len\" \"no,out_bitop,out_bitop\")\n+   (set_attr \"adjust_len\" \"*,out_bitop,out_bitop\")\n    (set_attr \"cc\" \"set_n,clobber,clobber\")])\n \n (define_insn \"xorsi3\"\n@@ -2401,7 +2410,7 @@\n     return avr_out_bitop (insn, operands, NULL);\n   }\n   [(set_attr \"length\" \"4,8,8\")\n-   (set_attr \"adjust_len\" \"no,out_bitop,out_bitop\")\n+   (set_attr \"adjust_len\" \"*,out_bitop,out_bitop\")\n    (set_attr \"cc\" \"set_n,clobber,clobber\")])\n \n ;; swap swap swap swap swap swap swap swap swap swap swap swap swap swap swap\n@@ -2623,6 +2632,7 @@\n   \"\"\n   \"* return ashlqi3_out (insn, operands, NULL);\"\n   [(set_attr \"length\" \"5,0,1,2,4,6,9\")\n+   (set_attr \"adjust_len\" \"ashlqi\")\n    (set_attr \"cc\" \"clobber,none,set_czn,set_czn,set_czn,set_czn,clobber\")])\n \n (define_insn \"ashlhi3\"\n@@ -2632,6 +2642,7 @@\n   \"\"\n   \"* return ashlhi3_out (insn, operands, NULL);\"\n   [(set_attr \"length\" \"6,0,2,2,4,10,10\")\n+   (set_attr \"adjust_len\" \"ashlhi\")\n    (set_attr \"cc\" \"clobber,none,set_n,clobber,set_n,clobber,clobber\")])\n \n \n@@ -2723,6 +2734,7 @@\n   \"\"\n   \"* return ashlsi3_out (insn, operands, NULL);\"\n   [(set_attr \"length\" \"8,0,4,4,8,10,12\")\n+   (set_attr \"adjust_len\" \"ashlsi\")\n    (set_attr \"cc\" \"clobber,none,set_n,clobber,set_n,clobber,clobber\")])\n \n ;; Optimize if a scratch register from LD_REGS happens to be available.\n@@ -2780,6 +2792,7 @@\n   \"reload_completed\"\n   \"* return ashlhi3_out (insn, operands, NULL);\"\n   [(set_attr \"length\" \"0,2,2,4,10\")\n+   (set_attr \"adjust_len\" \"ashlhi\")\n    (set_attr \"cc\" \"none,set_n,clobber,set_n,clobber\")])\n \n (define_peephole2\n@@ -2800,6 +2813,7 @@\n   \"reload_completed\"\n   \"* return ashlsi3_out (insn, operands, NULL);\"\n   [(set_attr \"length\" \"0,4,4,10\")\n+   (set_attr \"adjust_len\" \"ashlsi\")\n    (set_attr \"cc\" \"none,set_n,clobber,clobber\")])\n \n ;; >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >>\n@@ -2812,6 +2826,7 @@\n   \"\"\n   \"* return ashrqi3_out (insn, operands, NULL);\"\n   [(set_attr \"length\" \"5,0,1,2,5,9\")\n+   (set_attr \"adjust_len\" \"ashrqi\")\n    (set_attr \"cc\" \"clobber,none,clobber,clobber,clobber,clobber\")])\n \n (define_insn \"ashrhi3\"\n@@ -2821,6 +2836,7 @@\n   \"\"\n   \"* return ashrhi3_out (insn, operands, NULL);\"\n   [(set_attr \"length\" \"6,0,2,4,4,10,10\")\n+   (set_attr \"adjust_len\" \"ashrhi\")\n    (set_attr \"cc\" \"clobber,none,clobber,set_n,clobber,clobber,clobber\")])\n \n (define_insn \"ashrsi3\"\n@@ -2830,6 +2846,7 @@\n   \"\"\n   \"* return ashrsi3_out (insn, operands, NULL);\"\n   [(set_attr \"length\" \"8,0,4,6,8,10,12\")\n+   (set_attr \"adjust_len\" \"ashrsi\")\n    (set_attr \"cc\" \"clobber,none,clobber,set_n,clobber,clobber,clobber\")])\n \n ;; Optimize if a scratch register from LD_REGS happens to be available.\n@@ -2852,6 +2869,7 @@\n   \"reload_completed\"\n   \"* return ashrhi3_out (insn, operands, NULL);\"\n   [(set_attr \"length\" \"0,2,4,4,10\")\n+   (set_attr \"adjust_len\" \"ashrhi\")\n    (set_attr \"cc\" \"none,clobber,set_n,clobber,clobber\")])\n \n (define_peephole2\n@@ -2872,6 +2890,7 @@\n   \"reload_completed\"\n   \"* return ashrsi3_out (insn, operands, NULL);\"\n   [(set_attr \"length\" \"0,4,4,10\")\n+   (set_attr \"adjust_len\" \"ashrsi\")\n    (set_attr \"cc\" \"none,clobber,set_n,clobber\")])\n \n ;; >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >>\n@@ -2920,6 +2939,7 @@\n   \"\"\n   \"* return lshrqi3_out (insn, operands, NULL);\"\n   [(set_attr \"length\" \"5,0,1,2,4,6,9\")\n+   (set_attr \"adjust_len\" \"lshrqi\")\n    (set_attr \"cc\" \"clobber,none,set_czn,set_czn,set_czn,set_czn,clobber\")])\n \n (define_insn \"lshrhi3\"\n@@ -2929,6 +2949,7 @@\n   \"\"\n   \"* return lshrhi3_out (insn, operands, NULL);\"\n   [(set_attr \"length\" \"6,0,2,2,4,10,10\")\n+   (set_attr \"adjust_len\" \"lshrhi\")\n    (set_attr \"cc\" \"clobber,none,clobber,clobber,clobber,clobber,clobber\")])\n \n (define_insn \"lshrsi3\"\n@@ -2938,6 +2959,7 @@\n   \"\"\n   \"* return lshrsi3_out (insn, operands, NULL);\"\n   [(set_attr \"length\" \"8,0,4,4,8,10,12\")\n+   (set_attr \"adjust_len\" \"lshrsi\")\n    (set_attr \"cc\" \"clobber,none,clobber,clobber,clobber,clobber,clobber\")])\n \n ;; Optimize if a scratch register from LD_REGS happens to be available.\n@@ -2995,6 +3017,7 @@\n   \"reload_completed\"\n   \"* return lshrhi3_out (insn, operands, NULL);\"\n   [(set_attr \"length\" \"0,2,2,4,10\")\n+   (set_attr \"adjust_len\" \"lshrhi\")\n    (set_attr \"cc\" \"none,clobber,clobber,clobber,clobber\")])\n \n (define_peephole2\n@@ -3015,6 +3038,7 @@\n   \"reload_completed\"\n   \"* return lshrsi3_out (insn, operands, NULL);\"\n   [(set_attr \"length\" \"0,4,4,10\")\n+   (set_attr \"adjust_len\" \"lshrsi\")\n    (set_attr \"cc\" \"none,clobber,clobber,clobber\")])\n \n ;; abs(x) abs(x) abs(x) abs(x) abs(x) abs(x) abs(x) abs(x) abs(x) abs(x) abs(x)\n@@ -3383,7 +3407,7 @@\n   } \n   [(set_attr \"cc\" \"compare\")\n    (set_attr \"length\" \"1,2,2,3,4,2,4\")\n-   (set_attr \"adjust_len\" \"tsthi,tsthi,no,no,no,compare,compare\")])\n+   (set_attr \"adjust_len\" \"tsthi,tsthi,*,*,*,compare,compare\")])\n \n \n (define_insn \"*cmpsi\"\n@@ -3402,7 +3426,7 @@\n   }\n   [(set_attr \"cc\" \"compare\")\n    (set_attr \"length\" \"4,4,4,5,8\")\n-   (set_attr \"adjust_len\" \"tstsi,no,compare,compare,compare\")])\n+   (set_attr \"adjust_len\" \"tstsi,*,compare,compare,compare\")])\n \n \n ;; ----------------------------------------------------------------------"}]}