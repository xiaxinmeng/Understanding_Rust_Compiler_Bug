{"sha": "1d198f097b982b60d23465356a8f9abc32762d4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQxOThmMDk3Yjk4MmI2MGQyMzQ2NTM1NmE4ZjlhYmMzMjc2MmQ0Yw==", "commit": {"author": {"name": "Aditya Kumar", "email": "aditya.k7@samsung.com", "date": "2016-01-21T02:14:01Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2016-01-21T02:14:01Z"}, "message": "fix pr68692: reinstantiate the copy of internal parameters\n\nAdding a testcase and reverting this patch:\n[PATCH] remove parameter_rename_map\n\nThis map was used in the transition to the new scop detection: with the new scop\ndetection, we do not need this map anymore.\n\n       * graphite-isl-ast-to-gimple.c (gcc_expression_from_isl_ast_expr_id):\n       Remove use of parameter_rename_map.\n       (copy_def): Remove.\n       (copy_internal_parameters): Remove.\n       (graphite_regenerate_ast_isl): Remove call to copy_internal_parameters.\n       * sese.c (new_sese_info): Do not initialize parameter_rename_map.\n       (free_sese_info): Do not free parameter_rename_map.\n       (set_rename): Do not use parameter_rename_map.\n       (rename_uses): Update call to set_rename.\n       (graphite_copy_stmts_from_block): Do not use parameter_rename_map.\n       * sese.h (parameter_rename_map_t): Remove.\n       (struct sese_info_t): Remove field parameter_rename_map.\n\nCo-Authored-By: Sebastian Pop <s.pop@samsung.com>\n\nFrom-SVN: r232659", "tree": {"sha": "4b62710a3bf44529085f6400662b4ea8e08c31b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b62710a3bf44529085f6400662b4ea8e08c31b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d198f097b982b60d23465356a8f9abc32762d4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d198f097b982b60d23465356a8f9abc32762d4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d198f097b982b60d23465356a8f9abc32762d4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d198f097b982b60d23465356a8f9abc32762d4c/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b920a047635c09df188279c02af1499a77e630f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b920a047635c09df188279c02af1499a77e630f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b920a047635c09df188279c02af1499a77e630f7"}], "stats": {"total": 196, "additions": 195, "deletions": 1}, "files": [{"sha": "f906edeb514563f167c7cb14e636031104532312", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d198f097b982b60d23465356a8f9abc32762d4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d198f097b982b60d23465356a8f9abc32762d4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d198f097b982b60d23465356a8f9abc32762d4c", "patch": "@@ -1,3 +1,20 @@\n+2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\tRevert commit r229783.\n+\t* graphite-isl-ast-to-gimple.c (gcc_expression_from_isl_ast_expr_id):\n+\tRemove use of parameter_rename_map.\n+\t(copy_def): Remove.\n+\t(copy_internal_parameters): Remove.\n+\t(graphite_regenerate_ast_isl): Remove call to copy_internal_parameters.\n+\t* sese.c (new_sese_info): Do not initialize parameter_rename_map.\n+\t(free_sese_info): Do not free parameter_rename_map.\n+\t(set_rename): Do not use parameter_rename_map.\n+\t(rename_uses): Update call to set_rename.\n+\t(graphite_copy_stmts_from_block): Do not use parameter_rename_map.\n+\t* sese.h (parameter_rename_map_t): Remove.\n+\t(struct sese_info_t): Remove field parameter_rename_map.\n+\n 2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "98e347ae9190dbacc75c44e47a2755e84d2283d6", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 106, "deletions": 1, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d198f097b982b60d23465356a8f9abc32762d4c/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d198f097b982b60d23465356a8f9abc32762d4c/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=1d198f097b982b60d23465356a8f9abc32762d4c", "patch": "@@ -527,7 +527,11 @@ gcc_expression_from_isl_ast_expr_id (tree type,\n \t      \"Could not map isl_id to tree expression\");\n   isl_ast_expr_free (expr_id);\n   tree t = res->second;\n-  return fold_convert (type, t);\n+  tree *val = region->parameter_rename_map->get(t);\n+\n+  if (!val)\n+   val = &t;\n+  return fold_convert (type, *val);\n }\n \n /* Converts an isl_ast_expr_int expression E to a GCC expression tree of\n@@ -1495,6 +1499,13 @@ translate_isl_ast_to_gimple::set_rename (tree old_name, tree expr)\n       r.safe_push (expr);\n       region->rename_map->put (old_name, r);\n     }\n+\n+  tree t;\n+  int i;\n+  /* For a parameter of a scop we don't want to rename it.  */\n+  FOR_EACH_VEC_ELT (region->params, i, t)\n+    if (old_name == t)\n+      region->parameter_rename_map->put(old_name, expr);\n }\n \n /* Return an iterator to the instructions comes last in the execution order.\n@@ -2755,6 +2766,14 @@ should_copy_to_new_region (gimple *stmt, sese_info_p region)\n       && scev_analyzable_p (lhs, region->region))\n     return false;\n \n+  /* Do not copy parameters that have been generated in the header of the\n+     scop.  */\n+  if (is_gimple_assign (stmt)\n+      && (lhs = gimple_assign_lhs (stmt))\n+      && TREE_CODE (lhs) == SSA_NAME\n+      && region->parameter_rename_map->get(lhs))\n+    return false;\n+\n   return true;\n }\n \n@@ -2820,6 +2839,25 @@ translate_isl_ast_to_gimple::graphite_copy_stmts_from_block (basic_block bb,\n       if (codegen_error_p ())\n \treturn false;\n \n+      /* For each SSA_NAME in the parameter_rename_map rename their usage.  */\n+      ssa_op_iter iter;\n+      use_operand_p use_p;\n+      if (!is_gimple_debug (copy))\n+\tFOR_EACH_SSA_USE_OPERAND (use_p, copy, iter, SSA_OP_USE)\n+\t  {\n+\t    tree old_name = USE_FROM_PTR (use_p);\n+\n+\t    if (TREE_CODE (old_name) != SSA_NAME\n+\t\t|| SSA_NAME_IS_DEFAULT_DEF (old_name))\n+\t      continue;\n+\n+\t    tree *new_expr = region->parameter_rename_map->get (old_name);\n+\t    if (!new_expr)\n+\t      continue;\n+\n+\t    replace_exp (use_p, *new_expr);\n+\t  }\n+\n       update_stmt (copy);\n     }\n \n@@ -3270,6 +3308,70 @@ translate_isl_ast_to_gimple::scop_to_isl_ast (scop_p scop, ivs_params &ip)\n   return ast_isl;\n }\n \n+/* Copy def from sese REGION to the newly created TO_REGION. TR is defined by\n+   DEF_STMT. GSI points to entry basic block of the TO_REGION.  */\n+\n+static void\n+copy_def (tree tr, gimple *def_stmt, sese_info_p region, sese_info_p to_region,\n+\t  gimple_stmt_iterator *gsi)\n+{\n+  if (!defined_in_sese_p (tr, region->region))\n+    return;\n+\n+  ssa_op_iter iter;\n+  use_operand_p use_p;\n+  FOR_EACH_SSA_USE_OPERAND (use_p, def_stmt, iter, SSA_OP_USE)\n+    {\n+      tree use_tr = USE_FROM_PTR (use_p);\n+\n+      /* Do not copy parameters that have been generated in the header of the\n+\t scop.  */\n+      if (region->parameter_rename_map->get(use_tr))\n+\tcontinue;\n+\n+      gimple *def_of_use = SSA_NAME_DEF_STMT (use_tr);\n+      if (!def_of_use)\n+\tcontinue;\n+\n+      copy_def (use_tr, def_of_use, region, to_region, gsi);\n+    }\n+\n+  gimple *copy = gimple_copy (def_stmt);\n+  gsi_insert_after (gsi, copy, GSI_NEW_STMT);\n+\n+  /* Create new names for all the definitions created by COPY and\n+     add replacement mappings for each new name.  */\n+  def_operand_p def_p;\n+  ssa_op_iter op_iter;\n+  FOR_EACH_SSA_DEF_OPERAND (def_p, copy, op_iter, SSA_OP_ALL_DEFS)\n+    {\n+      tree old_name = DEF_FROM_PTR (def_p);\n+      tree new_name = create_new_def_for (old_name, copy, def_p);\n+      region->parameter_rename_map->put(old_name, new_name);\n+    }\n+\n+  update_stmt (copy);\n+}\n+\n+static void\n+copy_internal_parameters (sese_info_p region, sese_info_p to_region)\n+{\n+  /* For all the parameters which definitino is in the if_region->false_region,\n+     insert code on true_region (if_region->true_region->entry). */\n+\n+  int i;\n+  tree tr;\n+  gimple_stmt_iterator gsi = gsi_start_bb(to_region->region.entry->dest);\n+\n+  FOR_EACH_VEC_ELT (region->params, i, tr)\n+    {\n+      // If def is not in region.\n+      gimple *def_stmt = SSA_NAME_DEF_STMT (tr);\n+      if (def_stmt)\n+\tcopy_def (tr, def_stmt, region, to_region, &gsi);\n+    }\n+}\n+\n /* GIMPLE Loop Generator: generates loops from STMT in GIMPLE form for\n    the given SCOP.  Return true if code generation succeeded.\n \n@@ -3304,6 +3406,9 @@ graphite_regenerate_ast_isl (scop_p scop)\n \n   loop_p context_loop = region->region.entry->src->loop_father;\n \n+  /* Copy all the parameters which are defined in the region.  */\n+  copy_internal_parameters(if_region->false_region, if_region->true_region);\n+\n   edge e = single_succ_edge (if_region->true_region->region.entry->dest);\n   basic_block bb = split_edge (e);\n "}, {"sha": "3b43142bb054983d8ee76c38895cdd8eb59b4c13", "filename": "gcc/sese.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d198f097b982b60d23465356a8f9abc32762d4c/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d198f097b982b60d23465356a8f9abc32762d4c/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=1d198f097b982b60d23465356a8f9abc32762d4c", "patch": "@@ -181,10 +181,12 @@ new_sese_info (edge entry, edge exit)\n   region->loop_nest.create (3);\n   region->params.create (3);\n   region->rename_map = new rename_map_t;\n+  region->parameter_rename_map = new parameter_rename_map_t;\n   region->copied_bb_map = new bb_map_t;\n   region->bbs.create (3);\n   region->incomplete_phis.create (3);\n \n+\n   return region;\n }\n \n@@ -205,9 +207,11 @@ free_sese_info (sese_info_p region)\n     (*it).second.release ();\n \n   delete region->rename_map;\n+  delete region->parameter_rename_map;\n   delete region->copied_bb_map;\n \n   region->rename_map = NULL;\n+  region->parameter_rename_map = NULL;\n   region->copied_bb_map = NULL;\n \n   region->bbs.release ();"}, {"sha": "28996cd5873d14af5d36e53152b5ff64b85385c3", "filename": "gcc/sese.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d198f097b982b60d23465356a8f9abc32762d4c/gcc%2Fsese.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d198f097b982b60d23465356a8f9abc32762d4c/gcc%2Fsese.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.h?ref=1d198f097b982b60d23465356a8f9abc32762d4c", "patch": "@@ -22,6 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_SESE_H\n #define GCC_SESE_H\n \n+typedef hash_map<tree, tree> parameter_rename_map_t;\n typedef hash_map<basic_block, vec<basic_block> > bb_map_t;\n typedef hash_map<tree, vec<tree> > rename_map_t;\n typedef struct ifsese_s *ifsese;\n@@ -85,6 +86,9 @@ typedef struct sese_info_t\n      dominator.  */\n   rename_map_t *rename_map;\n \n+  /* Parameters to be renamed.  */\n+  parameter_rename_map_t *parameter_rename_map;\n+\n   /* Loops completely contained in this SESE.  */\n   vec<loop_p> loop_nest;\n "}, {"sha": "51d83e406652b275f266543b7c46edcffeed17e3", "filename": "gcc/testsuite/gfortran.dg/graphite/pr68692.f90", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d198f097b982b60d23465356a8f9abc32762d4c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr68692.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d198f097b982b60d23465356a8f9abc32762d4c/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr68692.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr68692.f90?ref=1d198f097b982b60d23465356a8f9abc32762d4c", "patch": "@@ -0,0 +1,64 @@\n+! { dg-options \"-floop-nest-optimize -O3\" }\n+\n+MODULE spme\n+  INTEGER, PARAMETER :: dp=8\n+  PRIVATE\n+  PUBLIC :: get_patch\n+CONTAINS\n+  SUBROUTINE get_patch ( part, box, green, npts, p, rhos, is_core, is_shell,&\n+                         unit_charge, charges, coeff, n )\n+    INTEGER, POINTER                 :: box\n+    REAL(KIND=dp), &\n+      DIMENSION(-(n-1):n-1, 0:n-1), &\n+      INTENT(IN)                             :: coeff\n+    INTEGER, DIMENSION(3), INTENT(IN)        :: npts\n+    REAL(KIND=dp), DIMENSION(:, :, :), &\n+      INTENT(OUT)                            :: rhos\n+    REAL(KIND=dp)                            :: q\n+    REAL(KIND=dp), DIMENSION(3)              :: delta, r\n+    CALL get_delta ( box, r, npts, delta, nbox )\n+    CALL spme_get_patch ( rhos, nbox, delta, q, coeff )\n+  END SUBROUTINE get_patch\n+  SUBROUTINE spme_get_patch ( rhos, n, delta, q, coeff )\n+    REAL(KIND=dp), DIMENSION(:, :, :), &\n+      INTENT(OUT)                            :: rhos\n+    REAL(KIND=dp), DIMENSION(3), INTENT(IN)  :: delta\n+    REAL(KIND=dp), INTENT(IN)                :: q\n+    REAL(KIND=dp), &\n+      DIMENSION(-(n-1):n-1, 0:n-1), &\n+      INTENT(IN)                             :: coeff\n+    INTEGER, PARAMETER                       :: nmax = 12\n+    REAL(KIND=dp), DIMENSION(3, -nmax:nmax)  :: w_assign\n+    REAL(KIND=dp), DIMENSION(3, 0:nmax-1)    :: deltal\n+    REAL(KIND=dp), DIMENSION(3, 1:nmax)      :: f_assign\n+    DO l = 1, n-1\n+       deltal ( 3, l ) = deltal ( 3, l-1 ) * delta ( 3 )\n+    END DO\n+    DO j = -(n-1), n-1, 2\n+       DO l = 0, n-1\n+          w_assign ( 1, j ) =  w_assign ( 1, j ) + &\n+                         coeff ( j, l ) * deltal ( 1, l )\n+       END DO\n+       f_assign (3, i ) = w_assign ( 3, j )\n+       DO i2 = 1, n\n+          DO i1 = 1, n\n+             rhos ( i1, i2, i3 ) = r2 * f_assign ( 1, i1 )\n+          END DO\n+       END DO\n+    END DO\n+  END SUBROUTINE spme_get_patch\n+  SUBROUTINE get_delta ( box, r, npts, delta, n )\n+    INTEGER, POINTER :: box\n+    REAL(KIND=dp), DIMENSION(3), INTENT(IN)  :: r\n+    INTEGER, DIMENSION(3), INTENT(IN)        :: npts\n+    REAL(KIND=dp), DIMENSION(3), INTENT(OUT) :: delta\n+    INTEGER, DIMENSION(3)                    :: center\n+    REAL(KIND=dp), DIMENSION(3)              :: ca, grid_i, s\n+    CALL real_to_scaled(s,r,box)\n+    s = s - REAL ( NINT ( s ),KIND=dp)\n+    IF ( MOD ( n, 2 ) == 0 ) THEN\n+       ca ( : ) = REAL ( center ( : ) )\n+    END IF\n+    delta ( : ) = grid_i ( : ) - ca ( : )\n+  END SUBROUTINE get_delta\n+END MODULE spme"}]}