{"sha": "e10e882ddf3d0f85f36e6645c4637f9725ee2562", "node_id": "C_kwDOANBUbNoAKGUxMGU4ODJkZGYzZDBmODVmMzZlNjY0NWM0NjM3Zjk3MjVlZTI1NjI", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-03-20T02:10:26Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-03-25T08:47:56Z"}, "message": "expand: Move cfg-attrs related functions out of MacroExpander\n\nThe current situation where the MacroExpander and AttrVisitor recursively\ncall into each other is not great, and causes pains for macro imports. We\nneed to split this pass in two, with one pass being responsible for cfg-attr\nchecking and stripping, and one being responsible for macro expansion.\n\ngcc/rust/ChangeLog:\n\n\t* expand/rust-macro-expand.cc (MacroExpander::expand_crate): Do not cfg-attr\n\tstrip in MacroExpander\n\t(MacroExpander::fails_cfg): Function moved...\n\t(MacroExpander::fails_cfg_with_expand): Function moved...\n\t(MacroExpander::expand_cfg_attrs): Function moved...\n\t* expand/rust-attribute-visitor.cc (fails_cfg): ...here.\n\t(fails_cfg_with_expand): ...here.\n\t(expand_cfg_attrs): ...here.\n\t(AttrVisitor::expand_struct_fields): Use new functions.\n\t(AttrVisitor::expand_tuple_fields): Likewise.\n\t(AttrVisitor::expand_function_params): Likewise.\n\t(AttrVisitor::visit): Likewise.\n\t(AttrVisitor::go): New function.\n\t* expand/rust-attribute-visitor.h: Declare AttrVisitor::go.\n\t* expand/rust-macro-expand.h (struct MacroExpander): Remove cfg-attr related\n\tfunctions.", "tree": {"sha": "ad265ba4af46d53e1fbdeccbbbcde5cfeab3e0c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad265ba4af46d53e1fbdeccbbbcde5cfeab3e0c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e10e882ddf3d0f85f36e6645c4637f9725ee2562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e10e882ddf3d0f85f36e6645c4637f9725ee2562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e10e882ddf3d0f85f36e6645c4637f9725ee2562", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e10e882ddf3d0f85f36e6645c4637f9725ee2562/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b52571e8aa28a100b8989ece12e929a9fb6bcf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b52571e8aa28a100b8989ece12e929a9fb6bcf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b52571e8aa28a100b8989ece12e929a9fb6bcf4"}], "stats": {"total": 643, "additions": 329, "deletions": 314}, "files": [{"sha": "7d86b6d54796f255adc5239ea54d0a48cb4f6a1b", "filename": "gcc/rust/expand/rust-attribute-visitor.cc", "status": "modified", "additions": 326, "deletions": 203, "changes": 529, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10e882ddf3d0f85f36e6645c4637f9725ee2562/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10e882ddf3d0f85f36e6645c4637f9725ee2562/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc?ref=e10e882ddf3d0f85f36e6645c4637f9725ee2562", "patch": "@@ -21,6 +21,129 @@\n \n namespace Rust {\n \n+/**\n+ * Determines whether any cfg predicate is false and hence item with attributes\n+ * should be stripped. Note that attributes must be expanded before calling.\n+ */\n+bool\n+fails_cfg (const AST::AttrVec &attrs)\n+{\n+  auto &session = Session::get_instance ();\n+\n+  for (const auto &attr : attrs)\n+    {\n+      if (attr.get_path () == \"cfg\" && !attr.check_cfg_predicate (session))\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n+/**\n+ * Determines whether any cfg predicate is false and hence item with attributes\n+ * should be stripped. Will expand attributes as well.\n+ */\n+bool\n+fails_cfg_with_expand (AST::AttrVec &attrs)\n+{\n+  auto &session = Session::get_instance ();\n+\n+  // TODO: maybe have something that strips cfg attributes that evaluate true?\n+  for (auto &attr : attrs)\n+    {\n+      if (attr.get_path () == \"cfg\")\n+\t{\n+\t  if (!attr.is_parsed_to_meta_item ())\n+\t    attr.parse_attr_to_meta_item ();\n+\n+\t  // DEBUG\n+\t  if (!attr.is_parsed_to_meta_item ())\n+\t    rust_debug (\"failed to parse attr to meta item, right before \"\n+\t\t\t\"cfg predicate check\");\n+\t  else\n+\t    rust_debug (\"attr has been successfully parsed to meta item, \"\n+\t\t\t\"right before cfg predicate check\");\n+\n+\t  if (!attr.check_cfg_predicate (session))\n+\t    {\n+\t      // DEBUG\n+\t      rust_debug (\n+\t\t\"cfg predicate failed for attribute: \\033[0;31m'%s'\\033[0m\",\n+\t\tattr.as_string ().c_str ());\n+\n+\t      return true;\n+\t    }\n+\t  else\n+\t    {\n+\t      // DEBUG\n+\t      rust_debug (\"cfg predicate succeeded for attribute: \"\n+\t\t\t  \"\\033[0;31m'%s'\\033[0m\",\n+\t\t\t  attr.as_string ().c_str ());\n+\t    }\n+\t}\n+    }\n+  return false;\n+}\n+\n+/**\n+ * Expands cfg_attr attributes.\n+ */\n+void\n+expand_cfg_attrs (AST::AttrVec &attrs)\n+{\n+  auto &session = Session::get_instance ();\n+\n+  for (std::size_t i = 0; i < attrs.size (); i++)\n+    {\n+      auto &attr = attrs[i];\n+      if (attr.get_path () == \"cfg_attr\")\n+\t{\n+\t  if (!attr.is_parsed_to_meta_item ())\n+\t    attr.parse_attr_to_meta_item ();\n+\n+\t  if (attr.check_cfg_predicate (session))\n+\t    {\n+\t      // split off cfg_attr\n+\t      AST::AttrVec new_attrs = attr.separate_cfg_attrs ();\n+\n+\t      // remove attr from vector\n+\t      attrs.erase (attrs.begin () + i);\n+\n+\t      // add new attrs to vector\n+\t      attrs.insert (attrs.begin () + i,\n+\t\t\t    std::make_move_iterator (new_attrs.begin ()),\n+\t\t\t    std::make_move_iterator (new_attrs.end ()));\n+\t    }\n+\n+\t  /* do something - if feature (first token in tree) is in fact enabled,\n+\t   * make tokens listed afterwards into attributes. i.e.: for\n+\t   * [cfg_attr(feature = \"wow\", wow1, wow2)], if \"wow\" is true, then add\n+\t   * attributes [wow1] and [wow2] to attribute list. This can also be\n+\t   * recursive, so check for expanded attributes being recursive and\n+\t   * possibly recursively call the expand_attrs? */\n+\t}\n+      else\n+\t{\n+\t  i++;\n+\t}\n+    }\n+  attrs.shrink_to_fit ();\n+}\n+\n+void\n+AttrVisitor::go (AST::Crate &crate)\n+{\n+  // expand crate cfg_attr attributes\n+  expand_cfg_attrs (crate.inner_attrs);\n+\n+  if (fails_cfg_with_expand (crate.inner_attrs))\n+    {\n+      // basically, delete whole crate\n+      crate.strip_crate ();\n+      // TODO: maybe create warning here? probably not desired behaviour\n+    }\n+  // expand module attributes?\n+}\n+\n // Visitor used to expand attributes.\n void\n AttrVisitor::expand_struct_fields (std::vector<AST::StructField> &fields)\n@@ -30,8 +153,8 @@ AttrVisitor::expand_struct_fields (std::vector<AST::StructField> &fields)\n       auto &field = *it;\n \n       auto &field_attrs = field.get_outer_attrs ();\n-      expander.expand_cfg_attrs (field_attrs);\n-      if (expander.fails_cfg_with_expand (field_attrs))\n+      expand_cfg_attrs (field_attrs);\n+      if (fails_cfg_with_expand (field_attrs))\n \t{\n \t  it = fields.erase (it);\n \t  continue;\n@@ -64,8 +187,8 @@ AttrVisitor::expand_tuple_fields (std::vector<AST::TupleField> &fields)\n       auto &field = *it;\n \n       auto &field_attrs = field.get_outer_attrs ();\n-      expander.expand_cfg_attrs (field_attrs);\n-      if (expander.fails_cfg_with_expand (field_attrs))\n+      expand_cfg_attrs (field_attrs);\n+      if (fails_cfg_with_expand (field_attrs))\n \t{\n \t  it = fields.erase (it);\n \t  continue;\n@@ -93,8 +216,8 @@ AttrVisitor::expand_function_params (std::vector<AST::FunctionParam> &params)\n       auto &param = *it;\n \n       auto &param_attrs = param.get_outer_attrs ();\n-      expander.expand_cfg_attrs (param_attrs);\n-      if (expander.fails_cfg_with_expand (param_attrs))\n+      expand_cfg_attrs (param_attrs);\n+      if (fails_cfg_with_expand (param_attrs))\n \t{\n \t  it = params.erase (it);\n \t  continue;\n@@ -215,8 +338,8 @@ AttrVisitor::AttrVisitor::expand_closure_params (\n       auto &param = *it;\n \n       auto &param_attrs = param.get_outer_attrs ();\n-      expander.expand_cfg_attrs (param_attrs);\n-      if (expander.fails_cfg_with_expand (param_attrs))\n+      expand_cfg_attrs (param_attrs);\n+      if (fails_cfg_with_expand (param_attrs))\n \t{\n \t  it = params.erase (it);\n \t  continue;\n@@ -363,8 +486,8 @@ void\n AttrVisitor::visit (AST::IdentifierExpr &ident_expr)\n {\n   // strip test based on outer attrs\n-  expander.expand_cfg_attrs (ident_expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (ident_expr.get_outer_attrs ()))\n+  expand_cfg_attrs (ident_expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (ident_expr.get_outer_attrs ()))\n     {\n       ident_expr.mark_for_strip ();\n       return;\n@@ -390,8 +513,8 @@ void\n AttrVisitor::visit (AST::MacroInvocation &macro_invoc)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (macro_invoc.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (macro_invoc.get_outer_attrs ()))\n+  expand_cfg_attrs (macro_invoc.get_outer_attrs ());\n+  if (fails_cfg_with_expand (macro_invoc.get_outer_attrs ()))\n     {\n       macro_invoc.mark_for_strip ();\n       return;\n@@ -409,8 +532,8 @@ void\n AttrVisitor::visit (AST::PathInExpression &path)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (path.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (path.get_outer_attrs ()))\n+  expand_cfg_attrs (path.get_outer_attrs ());\n+  if (fails_cfg_with_expand (path.get_outer_attrs ()))\n     {\n       path.mark_for_strip ();\n       return;\n@@ -477,8 +600,8 @@ void\n AttrVisitor::visit (AST::QualifiedPathInExpression &path)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (path.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (path.get_outer_attrs ()))\n+  expand_cfg_attrs (path.get_outer_attrs ());\n+  if (fails_cfg_with_expand (path.get_outer_attrs ()))\n     {\n       path.mark_for_strip ();\n       return;\n@@ -506,8 +629,8 @@ void\n AttrVisitor::visit (AST::LiteralExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -532,8 +655,8 @@ void\n AttrVisitor::visit (AST::BorrowExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -553,8 +676,8 @@ void\n AttrVisitor::visit (AST::DereferenceExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -574,8 +697,8 @@ void\n AttrVisitor::visit (AST::ErrorPropagationExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -595,8 +718,8 @@ void\n AttrVisitor::visit (AST::NegationExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -725,8 +848,8 @@ AttrVisitor::visit (AST::TypeCastExpr &expr)\n void\n AttrVisitor::visit (AST::AssignmentExpr &expr)\n {\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -788,17 +911,17 @@ void\n AttrVisitor::visit (AST::GroupedExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n     }\n \n   /* strip test based on inner attrs - spec says these are inner\n    * attributes, not outer attributes of inner expr */\n-  expander.expand_cfg_attrs (expr.get_inner_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_inner_attrs ()))\n+  expand_cfg_attrs (expr.get_inner_attrs ());\n+  if (fails_cfg_with_expand (expr.get_inner_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -848,17 +971,17 @@ void\n AttrVisitor::visit (AST::ArrayExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n     }\n \n   /* strip test based on inner attrs - spec says there are separate\n    * inner attributes, not just outer attributes of inner exprs */\n-  expander.expand_cfg_attrs (expr.get_inner_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_inner_attrs ()))\n+  expand_cfg_attrs (expr.get_inner_attrs ());\n+  if (fails_cfg_with_expand (expr.get_inner_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -875,8 +998,8 @@ AttrVisitor::visit (AST::ArrayIndexExpr &expr)\n    * allowed, but conceptually it wouldn't make much sense, but\n    * having expansion code anyway. TODO */\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -906,17 +1029,17 @@ AttrVisitor::visit (AST::TupleExpr &expr)\n    * tuple expressions\" */\n \n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n     }\n \n   /* strip test based on inner attrs - spec says these are inner\n    * attributes, not outer attributes of inner expr */\n-  expander.expand_cfg_attrs (expr.get_inner_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_inner_attrs ()))\n+  expand_cfg_attrs (expr.get_inner_attrs ());\n+  if (fails_cfg_with_expand (expr.get_inner_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -930,8 +1053,8 @@ void\n AttrVisitor::visit (AST::TupleIndexExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -951,17 +1074,17 @@ void\n AttrVisitor::visit (AST::StructExprStruct &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n     }\n \n   /* strip test based on inner attrs - spec says these are inner\n    * attributes, not outer attributes of inner expr */\n-  expander.expand_cfg_attrs (expr.get_inner_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_inner_attrs ()))\n+  expand_cfg_attrs (expr.get_inner_attrs ());\n+  if (fails_cfg_with_expand (expr.get_inner_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1007,17 +1130,17 @@ void\n AttrVisitor::visit (AST::StructExprStructFields &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n     }\n \n   /* strip test based on inner attrs - spec says these are inner\n    * attributes, not outer attributes of inner expr */\n-  expander.expand_cfg_attrs (expr.get_inner_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_inner_attrs ()))\n+  expand_cfg_attrs (expr.get_inner_attrs ());\n+  if (fails_cfg_with_expand (expr.get_inner_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1056,17 +1179,17 @@ void\n AttrVisitor::visit (AST::StructExprStructBase &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n     }\n \n   /* strip test based on inner attrs - spec says these are inner\n    * attributes, not outer attributes of inner expr */\n-  expander.expand_cfg_attrs (expr.get_inner_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_inner_attrs ()))\n+  expand_cfg_attrs (expr.get_inner_attrs ());\n+  if (fails_cfg_with_expand (expr.get_inner_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1093,8 +1216,8 @@ void\n AttrVisitor::visit (AST::CallExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1143,8 +1266,8 @@ void\n AttrVisitor::visit (AST::MethodCallExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1172,8 +1295,8 @@ void\n AttrVisitor::visit (AST::FieldAccessExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1193,8 +1316,8 @@ void\n AttrVisitor::visit (AST::ClosureExprInner &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1217,17 +1340,17 @@ void\n AttrVisitor::visit (AST::BlockExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n     }\n \n   /* strip test based on inner attrs - spec says there are inner\n    * attributes, not just outer attributes of inner stmts */\n-  expander.expand_cfg_attrs (expr.get_inner_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_inner_attrs ()))\n+  expand_cfg_attrs (expr.get_inner_attrs ());\n+  if (fails_cfg_with_expand (expr.get_inner_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1236,10 +1359,10 @@ AttrVisitor::visit (AST::BlockExpr &expr)\n   std::function<std::unique_ptr<AST::Stmt> (AST::SingleASTNode)> extractor\n     = [] (AST::SingleASTNode node) { return node.take_stmt (); };\n \n-  expand_macro_children (MacroExpander::BLOCK, expr.get_statements (),\n-\t\t\t extractor);\n+  expand_macro_children (MacroExpander::ContextType::BLOCK,\n+\t\t\t expr.get_statements (), extractor);\n \n-  expander.push_context (MacroExpander::BLOCK);\n+  expander.push_context (MacroExpander::ContextType::BLOCK);\n \n   // strip tail expression if exists - can actually fully remove it\n   if (expr.has_tail_expr ())\n@@ -1259,8 +1382,8 @@ void\n AttrVisitor::visit (AST::ClosureExprInnerTyped &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1295,8 +1418,8 @@ void\n AttrVisitor::visit (AST::ContinueExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1306,8 +1429,8 @@ void\n AttrVisitor::visit (AST::BreakExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1436,8 +1559,8 @@ void\n AttrVisitor::visit (AST::ReturnExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1467,8 +1590,8 @@ void\n AttrVisitor::visit (AST::UnsafeBlockExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1486,8 +1609,8 @@ void\n AttrVisitor::visit (AST::LoopExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1505,8 +1628,8 @@ void\n AttrVisitor::visit (AST::WhileLoopExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1532,8 +1655,8 @@ void\n AttrVisitor::visit (AST::WhileLetLoopExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1567,8 +1690,8 @@ void\n AttrVisitor::visit (AST::ForLoopExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1604,8 +1727,8 @@ AttrVisitor::visit (AST::IfExpr &expr)\n   // when used as statement\n \n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1632,8 +1755,8 @@ void\n AttrVisitor::visit (AST::IfExprConseqElse &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1668,8 +1791,8 @@ void\n AttrVisitor::visit (AST::IfExprConseqIf &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1704,8 +1827,8 @@ void\n AttrVisitor::visit (AST::IfExprConseqIfLet &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1741,8 +1864,8 @@ void\n AttrVisitor::visit (AST::IfLetExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1776,8 +1899,8 @@ void\n AttrVisitor::visit (AST::IfLetExprConseqElse &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1819,8 +1942,8 @@ void\n AttrVisitor::visit (AST::IfLetExprConseqIf &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1862,8 +1985,8 @@ void\n AttrVisitor::visit (AST::IfLetExprConseqIfLet &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1906,16 +2029,16 @@ void\n AttrVisitor::visit (AST::MatchExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n     }\n \n   // inner attr strip test\n-  expander.expand_cfg_attrs (expr.get_inner_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_inner_attrs ()))\n+  expand_cfg_attrs (expr.get_inner_attrs ());\n+  if (fails_cfg_with_expand (expr.get_inner_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -1937,8 +2060,8 @@ AttrVisitor::visit (AST::MatchExpr &expr)\n \n       // strip match case based on outer attributes in match arm\n       auto &match_arm = match_case.get_arm ();\n-      expander.expand_cfg_attrs (match_arm.get_outer_attrs ());\n-      if (expander.fails_cfg_with_expand (match_arm.get_outer_attrs ()))\n+      expand_cfg_attrs (match_arm.get_outer_attrs ());\n+      if (fails_cfg_with_expand (match_arm.get_outer_attrs ()))\n \t{\n \t  // strip match case\n \t  it = match_cases.erase (it);\n@@ -1983,8 +2106,8 @@ void\n AttrVisitor::visit (AST::AwaitExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -2003,8 +2126,8 @@ void\n AttrVisitor::visit (AST::AsyncBlockExpr &expr)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n+  expand_cfg_attrs (expr.get_outer_attrs ());\n+  if (fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n       return;\n@@ -2076,8 +2199,8 @@ void\n AttrVisitor::visit (AST::Method &method)\n {\n   // initial test based on outer attrs\n-  expander.expand_cfg_attrs (method.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (method.get_outer_attrs ()))\n+  expand_cfg_attrs (method.get_outer_attrs ());\n+  if (fails_cfg_with_expand (method.get_outer_attrs ()))\n     {\n       method.mark_for_strip ();\n       return;\n@@ -2129,8 +2252,8 @@ void\n AttrVisitor::visit (AST::Module &module)\n {\n   // strip test based on outer attrs\n-  expander.expand_cfg_attrs (module.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (module.get_outer_attrs ()))\n+  expand_cfg_attrs (module.get_outer_attrs ());\n+  if (fails_cfg_with_expand (module.get_outer_attrs ()))\n     {\n       module.mark_for_strip ();\n       return;\n@@ -2140,8 +2263,8 @@ AttrVisitor::visit (AST::Module &module)\n   if (module.get_kind () == AST::Module::ModuleKind::LOADED)\n     {\n       // strip test based on inner attrs\n-      expander.expand_cfg_attrs (module.get_inner_attrs ());\n-      if (expander.fails_cfg_with_expand (module.get_inner_attrs ()))\n+      expand_cfg_attrs (module.get_inner_attrs ());\n+      if (fails_cfg_with_expand (module.get_inner_attrs ()))\n \t{\n \t  module.mark_for_strip ();\n \t  return;\n@@ -2155,8 +2278,8 @@ void\n AttrVisitor::visit (AST::ExternCrate &extern_crate)\n {\n   // strip test based on outer attrs\n-  expander.expand_cfg_attrs (extern_crate.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (extern_crate.get_outer_attrs ()))\n+  expand_cfg_attrs (extern_crate.get_outer_attrs ());\n+  if (fails_cfg_with_expand (extern_crate.get_outer_attrs ()))\n     {\n       extern_crate.mark_for_strip ();\n       return;\n@@ -2188,8 +2311,8 @@ void\n AttrVisitor::visit (AST::UseDeclaration &use_decl)\n {\n   // strip test based on outer attrs\n-  expander.expand_cfg_attrs (use_decl.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (use_decl.get_outer_attrs ()))\n+  expand_cfg_attrs (use_decl.get_outer_attrs ());\n+  if (fails_cfg_with_expand (use_decl.get_outer_attrs ()))\n     {\n       use_decl.mark_for_strip ();\n       return;\n@@ -2199,8 +2322,8 @@ void\n AttrVisitor::visit (AST::Function &function)\n {\n   // initial test based on outer attrs\n-  expander.expand_cfg_attrs (function.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (function.get_outer_attrs ()))\n+  expand_cfg_attrs (function.get_outer_attrs ());\n+  if (fails_cfg_with_expand (function.get_outer_attrs ()))\n     {\n       function.mark_for_strip ();\n       return;\n@@ -2247,8 +2370,8 @@ void\n AttrVisitor::visit (AST::TypeAlias &type_alias)\n {\n   // initial test based on outer attrs\n-  expander.expand_cfg_attrs (type_alias.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (type_alias.get_outer_attrs ()))\n+  expand_cfg_attrs (type_alias.get_outer_attrs ());\n+  if (fails_cfg_with_expand (type_alias.get_outer_attrs ()))\n     {\n       type_alias.mark_for_strip ();\n       return;\n@@ -2270,8 +2393,8 @@ void\n AttrVisitor::visit (AST::StructStruct &struct_item)\n {\n   // initial test based on outer attrs\n-  expander.expand_cfg_attrs (struct_item.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (struct_item.get_outer_attrs ()))\n+  expand_cfg_attrs (struct_item.get_outer_attrs ());\n+  if (fails_cfg_with_expand (struct_item.get_outer_attrs ()))\n     {\n       struct_item.mark_for_strip ();\n       return;\n@@ -2292,8 +2415,8 @@ void\n AttrVisitor::visit (AST::TupleStruct &tuple_struct)\n {\n   // initial test based on outer attrs\n-  expander.expand_cfg_attrs (tuple_struct.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (tuple_struct.get_outer_attrs ()))\n+  expand_cfg_attrs (tuple_struct.get_outer_attrs ());\n+  if (fails_cfg_with_expand (tuple_struct.get_outer_attrs ()))\n     {\n       tuple_struct.mark_for_strip ();\n       return;\n@@ -2314,8 +2437,8 @@ void\n AttrVisitor::visit (AST::EnumItem &item)\n {\n   // initial test based on outer attrs\n-  expander.expand_cfg_attrs (item.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n+  expand_cfg_attrs (item.get_outer_attrs ());\n+  if (fails_cfg_with_expand (item.get_outer_attrs ()))\n     {\n       item.mark_for_strip ();\n       return;\n@@ -2325,8 +2448,8 @@ void\n AttrVisitor::visit (AST::EnumItemTuple &item)\n {\n   // initial test based on outer attrs\n-  expander.expand_cfg_attrs (item.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n+  expand_cfg_attrs (item.get_outer_attrs ());\n+  if (fails_cfg_with_expand (item.get_outer_attrs ()))\n     {\n       item.mark_for_strip ();\n       return;\n@@ -2340,8 +2463,8 @@ void\n AttrVisitor::visit (AST::EnumItemStruct &item)\n {\n   // initial test based on outer attrs\n-  expander.expand_cfg_attrs (item.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n+  expand_cfg_attrs (item.get_outer_attrs ());\n+  if (fails_cfg_with_expand (item.get_outer_attrs ()))\n     {\n       item.mark_for_strip ();\n       return;\n@@ -2355,8 +2478,8 @@ void\n AttrVisitor::visit (AST::EnumItemDiscriminant &item)\n {\n   // initial test based on outer attrs\n-  expander.expand_cfg_attrs (item.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n+  expand_cfg_attrs (item.get_outer_attrs ());\n+  if (fails_cfg_with_expand (item.get_outer_attrs ()))\n     {\n       item.mark_for_strip ();\n       return;\n@@ -2376,8 +2499,8 @@ void\n AttrVisitor::visit (AST::Enum &enum_item)\n {\n   // initial test based on outer attrs\n-  expander.expand_cfg_attrs (enum_item.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (enum_item.get_outer_attrs ()))\n+  expand_cfg_attrs (enum_item.get_outer_attrs ());\n+  if (fails_cfg_with_expand (enum_item.get_outer_attrs ()))\n     {\n       enum_item.mark_for_strip ();\n       return;\n@@ -2398,8 +2521,8 @@ void\n AttrVisitor::visit (AST::Union &union_item)\n {\n   // initial test based on outer attrs\n-  expander.expand_cfg_attrs (union_item.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (union_item.get_outer_attrs ()))\n+  expand_cfg_attrs (union_item.get_outer_attrs ());\n+  if (fails_cfg_with_expand (union_item.get_outer_attrs ()))\n     {\n       union_item.mark_for_strip ();\n       return;\n@@ -2420,8 +2543,8 @@ void\n AttrVisitor::visit (AST::ConstantItem &const_item)\n {\n   // initial test based on outer attrs\n-  expander.expand_cfg_attrs (const_item.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (const_item.get_outer_attrs ()))\n+  expand_cfg_attrs (const_item.get_outer_attrs ());\n+  if (fails_cfg_with_expand (const_item.get_outer_attrs ()))\n     {\n       const_item.mark_for_strip ();\n       return;\n@@ -2454,8 +2577,8 @@ void\n AttrVisitor::visit (AST::StaticItem &static_item)\n {\n   // initial test based on outer attrs\n-  expander.expand_cfg_attrs (static_item.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (static_item.get_outer_attrs ()))\n+  expand_cfg_attrs (static_item.get_outer_attrs ());\n+  if (fails_cfg_with_expand (static_item.get_outer_attrs ()))\n     {\n       static_item.mark_for_strip ();\n       return;\n@@ -2488,8 +2611,8 @@ void\n AttrVisitor::visit (AST::TraitItemFunc &item)\n {\n   // initial test based on outer attrs\n-  expander.expand_cfg_attrs (item.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n+  expand_cfg_attrs (item.get_outer_attrs ());\n+  if (fails_cfg_with_expand (item.get_outer_attrs ()))\n     {\n       item.mark_for_strip ();\n       return;\n@@ -2514,8 +2637,8 @@ void\n AttrVisitor::visit (AST::TraitItemMethod &item)\n {\n   // initial test based on outer attrs\n-  expander.expand_cfg_attrs (item.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n+  expand_cfg_attrs (item.get_outer_attrs ());\n+  if (fails_cfg_with_expand (item.get_outer_attrs ()))\n     {\n       item.mark_for_strip ();\n       return;\n@@ -2540,8 +2663,8 @@ void\n AttrVisitor::visit (AST::TraitItemConst &item)\n {\n   // initial test based on outer attrs\n-  expander.expand_cfg_attrs (item.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n+  expand_cfg_attrs (item.get_outer_attrs ());\n+  if (fails_cfg_with_expand (item.get_outer_attrs ()))\n     {\n       item.mark_for_strip ();\n       return;\n@@ -2577,8 +2700,8 @@ void\n AttrVisitor::visit (AST::TraitItemType &item)\n {\n   // initial test based on outer attrs\n-  expander.expand_cfg_attrs (item.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n+  expand_cfg_attrs (item.get_outer_attrs ());\n+  if (fails_cfg_with_expand (item.get_outer_attrs ()))\n     {\n       item.mark_for_strip ();\n       return;\n@@ -2595,16 +2718,16 @@ void\n AttrVisitor::visit (AST::Trait &trait)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (trait.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (trait.get_outer_attrs ()))\n+  expand_cfg_attrs (trait.get_outer_attrs ());\n+  if (fails_cfg_with_expand (trait.get_outer_attrs ()))\n     {\n       trait.mark_for_strip ();\n       return;\n     }\n \n   // strip test based on inner attrs\n-  expander.expand_cfg_attrs (trait.get_inner_attrs ());\n-  if (expander.fails_cfg_with_expand (trait.get_inner_attrs ()))\n+  expand_cfg_attrs (trait.get_inner_attrs ());\n+  if (fails_cfg_with_expand (trait.get_inner_attrs ()))\n     {\n       trait.mark_for_strip ();\n       return;\n@@ -2627,23 +2750,23 @@ AttrVisitor::visit (AST::Trait &trait)\n   std::function<std::unique_ptr<AST::TraitItem> (AST::SingleASTNode)> extractor\n     = [] (AST::SingleASTNode node) { return node.take_trait_item (); };\n \n-  expand_macro_children (MacroExpander::TRAIT, trait.get_trait_items (),\n-\t\t\t extractor);\n+  expand_macro_children (MacroExpander::ContextType::TRAIT,\n+\t\t\t trait.get_trait_items (), extractor);\n }\n void\n AttrVisitor::visit (AST::InherentImpl &impl)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (impl.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (impl.get_outer_attrs ()))\n+  expand_cfg_attrs (impl.get_outer_attrs ());\n+  if (fails_cfg_with_expand (impl.get_outer_attrs ()))\n     {\n       impl.mark_for_strip ();\n       return;\n     }\n \n   // strip test based on inner attrs\n-  expander.expand_cfg_attrs (impl.get_inner_attrs ());\n-  if (expander.fails_cfg_with_expand (impl.get_inner_attrs ()))\n+  expand_cfg_attrs (impl.get_inner_attrs ());\n+  if (fails_cfg_with_expand (impl.get_inner_attrs ()))\n     {\n       impl.mark_for_strip ();\n       return;\n@@ -2671,23 +2794,23 @@ AttrVisitor::visit (AST::InherentImpl &impl)\n   std::function<std::unique_ptr<AST::InherentImplItem> (AST::SingleASTNode)>\n     extractor = [] (AST::SingleASTNode node) { return node.take_impl_item (); };\n \n-  expand_macro_children (MacroExpander::IMPL, impl.get_impl_items (),\n-\t\t\t extractor);\n+  expand_macro_children (MacroExpander::ContextType::IMPL,\n+\t\t\t impl.get_impl_items (), extractor);\n }\n void\n AttrVisitor::visit (AST::TraitImpl &impl)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (impl.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (impl.get_outer_attrs ()))\n+  expand_cfg_attrs (impl.get_outer_attrs ());\n+  if (fails_cfg_with_expand (impl.get_outer_attrs ()))\n     {\n       impl.mark_for_strip ();\n       return;\n     }\n \n   // strip test based on inner attrs\n-  expander.expand_cfg_attrs (impl.get_inner_attrs ());\n-  if (expander.fails_cfg_with_expand (impl.get_inner_attrs ()))\n+  expand_cfg_attrs (impl.get_inner_attrs ());\n+  if (fails_cfg_with_expand (impl.get_inner_attrs ()))\n     {\n       impl.mark_for_strip ();\n       return;\n@@ -2722,16 +2845,16 @@ AttrVisitor::visit (AST::TraitImpl &impl)\n     extractor\n     = [] (AST::SingleASTNode node) { return node.take_trait_impl_item (); };\n \n-  expand_macro_children (MacroExpander::TRAIT_IMPL, impl.get_impl_items (),\n-\t\t\t extractor);\n+  expand_macro_children (MacroExpander::ContextType::TRAIT_IMPL,\n+\t\t\t impl.get_impl_items (), extractor);\n }\n \n void\n AttrVisitor::visit (AST::ExternalTypeItem &item)\n {\n-  expander.expand_cfg_attrs (item.get_outer_attrs ());\n+  expand_cfg_attrs (item.get_outer_attrs ());\n \n-  if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n+  if (fails_cfg_with_expand (item.get_outer_attrs ()))\n     item.mark_for_strip ();\n \n   // TODO: Can we do anything like expand a macro here?\n@@ -2743,8 +2866,8 @@ void\n AttrVisitor::visit (AST::ExternalStaticItem &item)\n {\n   // strip test based on outer attrs\n-  expander.expand_cfg_attrs (item.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n+  expand_cfg_attrs (item.get_outer_attrs ());\n+  if (fails_cfg_with_expand (item.get_outer_attrs ()))\n     {\n       item.mark_for_strip ();\n       return;\n@@ -2767,8 +2890,8 @@ void\n AttrVisitor::visit (AST::ExternalFunctionItem &item)\n {\n   // strip test based on outer attrs\n-  expander.expand_cfg_attrs (item.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (item.get_outer_attrs ()))\n+  expand_cfg_attrs (item.get_outer_attrs ());\n+  if (fails_cfg_with_expand (item.get_outer_attrs ()))\n     {\n       item.mark_for_strip ();\n       return;\n@@ -2786,8 +2909,8 @@ AttrVisitor::visit (AST::ExternalFunctionItem &item)\n       auto &param = *it;\n \n       auto &param_attrs = param.get_outer_attrs ();\n-      expander.expand_cfg_attrs (param_attrs);\n-      if (expander.fails_cfg_with_expand (param_attrs))\n+      expand_cfg_attrs (param_attrs);\n+      if (fails_cfg_with_expand (param_attrs))\n \t{\n \t  it = params.erase (it);\n \t  continue;\n@@ -2840,16 +2963,16 @@ void\n AttrVisitor::visit (AST::ExternBlock &block)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (block.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (block.get_outer_attrs ()))\n+  expand_cfg_attrs (block.get_outer_attrs ());\n+  if (fails_cfg_with_expand (block.get_outer_attrs ()))\n     {\n       block.mark_for_strip ();\n       return;\n     }\n \n   // strip test based on inner attrs\n-  expander.expand_cfg_attrs (block.get_inner_attrs ());\n-  if (expander.fails_cfg_with_expand (block.get_inner_attrs ()))\n+  expand_cfg_attrs (block.get_inner_attrs ());\n+  if (fails_cfg_with_expand (block.get_inner_attrs ()))\n     {\n       block.mark_for_strip ();\n       return;\n@@ -2859,8 +2982,8 @@ AttrVisitor::visit (AST::ExternBlock &block)\n     extractor\n     = [] (AST::SingleASTNode node) { return node.take_external_item (); };\n \n-  expand_macro_children (MacroExpander::EXTERN, block.get_extern_items (),\n-\t\t\t extractor);\n+  expand_macro_children (MacroExpander::ContextType::EXTERN,\n+\t\t\t block.get_extern_items (), extractor);\n }\n \n // I don't think it would be possible to strip macros without expansion\n@@ -2877,8 +3000,8 @@ void\n AttrVisitor::visit (AST::MacroRulesDefinition &rules_def)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (rules_def.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (rules_def.get_outer_attrs ()))\n+  expand_cfg_attrs (rules_def.get_outer_attrs ());\n+  if (fails_cfg_with_expand (rules_def.get_outer_attrs ()))\n     {\n       rules_def.mark_for_strip ();\n       return;\n@@ -2975,8 +3098,8 @@ void\n AttrVisitor::visit (AST::StructPatternFieldTuplePat &field)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (field.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (field.get_outer_attrs ()))\n+  expand_cfg_attrs (field.get_outer_attrs ());\n+  if (fails_cfg_with_expand (field.get_outer_attrs ()))\n     {\n       field.mark_for_strip ();\n       return;\n@@ -2993,8 +3116,8 @@ void\n AttrVisitor::visit (AST::StructPatternFieldIdentPat &field)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (field.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (field.get_outer_attrs ()))\n+  expand_cfg_attrs (field.get_outer_attrs ());\n+  if (fails_cfg_with_expand (field.get_outer_attrs ()))\n     {\n       field.mark_for_strip ();\n       return;\n@@ -3011,8 +3134,8 @@ void\n AttrVisitor::visit (AST::StructPatternFieldIdent &field)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (field.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (field.get_outer_attrs ()))\n+  expand_cfg_attrs (field.get_outer_attrs ());\n+  if (fails_cfg_with_expand (field.get_outer_attrs ()))\n     {\n       field.mark_for_strip ();\n       return;\n@@ -3040,8 +3163,8 @@ AttrVisitor::visit (AST::StructPattern &pattern)\n   // assuming you can strip the \"..\" part\n   if (elems.has_etc ())\n     {\n-      expander.expand_cfg_attrs (elems.get_etc_outer_attrs ());\n-      if (expander.fails_cfg_with_expand (elems.get_etc_outer_attrs ()))\n+      expand_cfg_attrs (elems.get_etc_outer_attrs ());\n+      if (fails_cfg_with_expand (elems.get_etc_outer_attrs ()))\n \telems.strip_etc ();\n     }\n }\n@@ -3187,8 +3310,8 @@ void\n AttrVisitor::visit (AST::LetStmt &stmt)\n {\n   // initial strip test based on outer attrs\n-  expander.expand_cfg_attrs (stmt.get_outer_attrs ());\n-  if (expander.fails_cfg_with_expand (stmt.get_outer_attrs ()))\n+  expand_cfg_attrs (stmt.get_outer_attrs ());\n+  if (fails_cfg_with_expand (stmt.get_outer_attrs ()))\n     {\n       stmt.mark_for_strip ();\n       return;\n@@ -3401,8 +3524,8 @@ AttrVisitor::visit (AST::BareFunctionType &type)\n       auto &param = *it;\n \n       auto &param_attrs = param.get_outer_attrs ();\n-      expander.expand_cfg_attrs (param_attrs);\n-      if (expander.fails_cfg_with_expand (param_attrs))\n+      expand_cfg_attrs (param_attrs);\n+      if (fails_cfg_with_expand (param_attrs))\n \t{\n \t  it = params.erase (it);\n \t  continue;"}, {"sha": "132a89630adc522286d01f48e9f4a734c7cbb620", "filename": "gcc/rust/expand/rust-attribute-visitor.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10e882ddf3d0f85f36e6645c4637f9725ee2562/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10e882ddf3d0f85f36e6645c4637f9725ee2562/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h?ref=e10e882ddf3d0f85f36e6645c4637f9725ee2562", "patch": "@@ -32,6 +32,9 @@ class AttrVisitor : public AST::ASTVisitor\n public:\n   AttrVisitor (MacroExpander &expander) : expander (expander) {}\n \n+  /* Run the AttrVisitor on an entire crate */\n+  void go (AST::Crate &crate);\n+\n   void expand_struct_fields (std::vector<AST::StructField> &fields);\n   void expand_tuple_fields (std::vector<AST::TupleField> &fields);\n   void expand_function_params (std::vector<AST::FunctionParam> &params);"}, {"sha": "28ba563ff35af600fc3a3f8b1ca4e24fc032cfa4", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 0, "deletions": 107, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10e882ddf3d0f85f36e6645c4637f9725ee2562/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10e882ddf3d0f85f36e6645c4637f9725ee2562/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=e10e882ddf3d0f85f36e6645c4637f9725ee2562", "patch": "@@ -285,102 +285,6 @@ MacroExpander::expand_invoc (AST::MacroInvocation &invoc, bool has_semicolon)\n   set_expanded_fragment (std::move (fragment));\n }\n \n-/* Determines whether any cfg predicate is false and hence item with attributes\n- * should be stripped. Note that attributes must be expanded before calling. */\n-bool\n-MacroExpander::fails_cfg (const AST::AttrVec &attrs) const\n-{\n-  for (const auto &attr : attrs)\n-    {\n-      if (attr.get_path () == \"cfg\" && !attr.check_cfg_predicate (session))\n-\treturn true;\n-    }\n-  return false;\n-}\n-\n-/* Determines whether any cfg predicate is false and hence item with attributes\n- * should be stripped. Will expand attributes as well. */\n-bool\n-MacroExpander::fails_cfg_with_expand (AST::AttrVec &attrs) const\n-{\n-  // TODO: maybe have something that strips cfg attributes that evaluate true?\n-  for (auto &attr : attrs)\n-    {\n-      if (attr.get_path () == \"cfg\")\n-\t{\n-\t  if (!attr.is_parsed_to_meta_item ())\n-\t    attr.parse_attr_to_meta_item ();\n-\n-\t  // DEBUG\n-\t  if (!attr.is_parsed_to_meta_item ())\n-\t    rust_debug (\"failed to parse attr to meta item, right before \"\n-\t\t\t\"cfg predicate check\");\n-\t  else\n-\t    rust_debug (\"attr has been successfully parsed to meta item, \"\n-\t\t\t\"right before cfg predicate check\");\n-\n-\t  if (!attr.check_cfg_predicate (session))\n-\t    {\n-\t      // DEBUG\n-\t      rust_debug (\n-\t\t\"cfg predicate failed for attribute: \\033[0;31m'%s'\\033[0m\",\n-\t\tattr.as_string ().c_str ());\n-\n-\t      return true;\n-\t    }\n-\t  else\n-\t    {\n-\t      // DEBUG\n-\t      rust_debug (\"cfg predicate succeeded for attribute: \"\n-\t\t\t  \"\\033[0;31m'%s'\\033[0m\",\n-\t\t\t  attr.as_string ().c_str ());\n-\t    }\n-\t}\n-    }\n-  return false;\n-}\n-\n-// Expands cfg_attr attributes.\n-void\n-MacroExpander::expand_cfg_attrs (AST::AttrVec &attrs)\n-{\n-  for (std::size_t i = 0; i < attrs.size (); i++)\n-    {\n-      auto &attr = attrs[i];\n-      if (attr.get_path () == \"cfg_attr\")\n-\t{\n-\t  if (!attr.is_parsed_to_meta_item ())\n-\t    attr.parse_attr_to_meta_item ();\n-\n-\t  if (attr.check_cfg_predicate (session))\n-\t    {\n-\t      // split off cfg_attr\n-\t      AST::AttrVec new_attrs = attr.separate_cfg_attrs ();\n-\n-\t      // remove attr from vector\n-\t      attrs.erase (attrs.begin () + i);\n-\n-\t      // add new attrs to vector\n-\t      attrs.insert (attrs.begin () + i,\n-\t\t\t    std::make_move_iterator (new_attrs.begin ()),\n-\t\t\t    std::make_move_iterator (new_attrs.end ()));\n-\t    }\n-\n-\t  /* do something - if feature (first token in tree) is in fact enabled,\n-\t   * make tokens listed afterwards into attributes. i.e.: for\n-\t   * [cfg_attr(feature = \"wow\", wow1, wow2)], if \"wow\" is true, then add\n-\t   * attributes [wow1] and [wow2] to attribute list. This can also be\n-\t   * recursive, so check for expanded attributes being recursive and\n-\t   * possibly recursively call the expand_attrs? */\n-\t}\n-      else\n-\t{\n-\t  i++;\n-\t}\n-    }\n-  attrs.shrink_to_fit ();\n-}\n-\n void\n MacroExpander::expand_crate ()\n {\n@@ -393,17 +297,6 @@ MacroExpander::expand_crate ()\n   // TODO: does cfg apply for inner attributes? research.\n   // the apparent answer (from playground test) is yes\n \n-  // expand crate cfg_attr attributes\n-  expand_cfg_attrs (crate.inner_attrs);\n-\n-  if (fails_cfg_with_expand (crate.inner_attrs))\n-    {\n-      // basically, delete whole crate\n-      crate.strip_crate ();\n-      // TODO: maybe create warning here? probably not desired behaviour\n-    }\n-  // expand module attributes?\n-\n   push_context (ITEM);\n \n   // expand attributes recursively and strip items if required"}, {"sha": "aea761be9eb8aff81a034323fd10c6bade3f658f", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10e882ddf3d0f85f36e6645c4637f9725ee2562/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10e882ddf3d0f85f36e6645c4637f9725ee2562/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=e10e882ddf3d0f85f36e6645c4637f9725ee2562", "patch": "@@ -256,10 +256,6 @@ struct MacroExpander\n \t\t\t\t   AST::MacroRulesDefinition &rules_def,\n \t\t\t\t   bool semicolon);\n \n-  void expand_cfg_attrs (AST::AttrVec &attrs);\n-  bool fails_cfg (const AST::AttrVec &attr) const;\n-  bool fails_cfg_with_expand (AST::AttrVec &attrs) const;\n-\n   bool depth_exceeds_recursion_limit () const;\n \n   bool try_match_rule (AST::MacroRule &match_rule,"}]}