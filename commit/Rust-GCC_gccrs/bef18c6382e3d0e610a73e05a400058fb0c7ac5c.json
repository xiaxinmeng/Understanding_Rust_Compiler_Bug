{"sha": "bef18c6382e3d0e610a73e05a400058fb0c7ac5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVmMThjNjM4MmUzZDBlNjEwYTczZTA1YTQwMDA1OGZiMGM3YWM1Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-08-22T19:13:45Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-08-22T19:13:45Z"}, "message": "i386.md (*zero_extendsidi2): Add (*r,*k) alternative.\n\n\t* config/i386/i386.md (*zero_extendsidi2): Add (*r,*k) alternative.\n\t(zero_extend<mode>di2): Ditto.\n\t(*zero_extend<mode>si2): Ditto.\n\t(*zero_extendqihi2): Ditto.\n\nFrom-SVN: r239672", "tree": {"sha": "e229f3248f56eb27b960f76536d5e7f5e9a52a95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e229f3248f56eb27b960f76536d5e7f5e9a52a95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bef18c6382e3d0e610a73e05a400058fb0c7ac5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef18c6382e3d0e610a73e05a400058fb0c7ac5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bef18c6382e3d0e610a73e05a400058fb0c7ac5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef18c6382e3d0e610a73e05a400058fb0c7ac5c/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "58338bacdd63bfa128d5884e7ceeb47a4431d1ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58338bacdd63bfa128d5884e7ceeb47a4431d1ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58338bacdd63bfa128d5884e7ceeb47a4431d1ad"}], "stats": {"total": 52, "additions": 35, "deletions": 17}, "files": [{"sha": "1518a449abe2c0d46ed283287cc35f2d87217dbf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef18c6382e3d0e610a73e05a400058fb0c7ac5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef18c6382e3d0e610a73e05a400058fb0c7ac5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bef18c6382e3d0e610a73e05a400058fb0c7ac5c", "patch": "@@ -1,3 +1,10 @@\n+2016-08-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*zero_extendsidi2): Add (*r,*k) alternative.\n+\t(zero_extend<mode>di2): Ditto.\n+\t(*zero_extend<mode>si2): Ditto.\n+\t(*zero_extendqihi2): Ditto.\n+\n 2016-08-22  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR middle-end/77269"}, {"sha": "0deecb1b366f188cd24b455bdb0f68fbfae8e93a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef18c6382e3d0e610a73e05a400058fb0c7ac5c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef18c6382e3d0e610a73e05a400058fb0c7ac5c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=bef18c6382e3d0e610a73e05a400058fb0c7ac5c", "patch": "@@ -3696,10 +3696,10 @@\n \n (define_insn \"*zero_extendsidi2\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t\t\t\"=r,?r,?o,r   ,o,?*Ym,?!*y,?r ,?r,?*Yi,?*x\")\n+\t\t\t\"=r,?r,?o,r   ,o,?*Ym,?!*y,?r ,?r,?*Yi,?*x,*r\")\n \t(zero_extend:DI\n \t (match_operand:SI 1 \"x86_64_zext_operand\"\n-\t        \t\"0 ,rm,r ,rmWz,0,r   ,m   ,*Yj,*x,r   ,m\")))]\n+\t        \t\"0 ,rm,r ,rmWz,0,r   ,m   ,*Yj,*x,r   ,m  ,*k\")))]\n   \"\"\n {\n   switch (get_attr_type (insn))\n@@ -3725,14 +3725,17 @@\n \n       return \"%vmovd\\t{%1, %0|%0, %1}\";\n \n+    case TYPE_MSKMOV:\n+      return \"kmovd\\t{%1, %k0|%k0, %1}\";\n+\n     default:\n       gcc_unreachable ();\n     }\n }\n   [(set (attr \"isa\")\n      (cond [(eq_attr \"alternative\" \"0,1,2\")\n \t      (const_string \"nox64\")\n-\t    (eq_attr \"alternative\" \"3,7\")\n+\t    (eq_attr \"alternative\" \"3,7,11\")\n \t      (const_string \"x64\")\n \t    (eq_attr \"alternative\" \"8\")\n \t      (const_string \"x64_sse4\")\n@@ -3749,6 +3752,8 @@\n \t      (const_string \"ssemov\")\n \t    (eq_attr \"alternative\" \"8\")\n \t      (const_string \"sselog1\")\n+\t    (eq_attr \"alternative\" \"11\")\n+\t      (const_string \"mskmov\")\n \t   ]\n \t   (const_string \"imovx\")))\n    (set (attr \"prefix_extra\")\n@@ -3800,12 +3805,14 @@\n   \"split_double_mode (DImode, &operands[0], 1, &operands[3], &operands[4]);\")\n \n (define_insn \"zero_extend<mode>di2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,*r\")\n \t(zero_extend:DI\n-\t (match_operand:SWI12 1 \"nonimmediate_operand\" \"<r>m\")))]\n+\t (match_operand:SWI12 1 \"nonimmediate_operand\" \"<r>m,*k\")))]\n   \"TARGET_64BIT\"\n-  \"movz{<imodesuffix>l|x}\\t{%1, %k0|%k0, %1}\"\n-  [(set_attr \"type\" \"imovx\")\n+  \"@\n+   movz{<imodesuffix>l|x}\\t{%1, %k0|%k0, %1}\n+   kmov<mskmodesuffix>\\t{%1, %k0|%k0, %1}\"\n+  [(set_attr \"type\" \"imovx,mskmov\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_expand \"zero_extend<mode>si2\"\n@@ -3849,13 +3856,15 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*zero_extend<mode>si2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,*r\")\n \t(zero_extend:SI\n-\t  (match_operand:SWI12 1 \"nonimmediate_operand\" \"<r>m\")))]\n+\t  (match_operand:SWI12 1 \"nonimmediate_operand\" \"<r>m,*k\")))]\n   \"!(TARGET_ZERO_EXTEND_WITH_AND && optimize_function_for_speed_p (cfun))\"\n-  \"movz{<imodesuffix>l|x}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"imovx\")\n-   (set_attr \"mode\" \"SI\")])\n+  \"@\n+   movz{<imodesuffix>l|x}\\t{%1, %0|%0, %1}\n+   kmov<mskmodesuffix>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"imovx,mskmov\")\n+   (set_attr \"mode\" \"SI,<MODE>\")])\n \n (define_expand \"zero_extendqihi2\"\n   [(set (match_operand:HI 0 \"register_operand\")\n@@ -3898,12 +3907,14 @@\n \n ; zero extend to SImode to avoid partial register stalls\n (define_insn \"*zero_extendqihi2\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"qm\")))]\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r,*r\")\n+\t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"qm,*k\")))]\n   \"!(TARGET_ZERO_EXTEND_WITH_AND && optimize_function_for_speed_p (cfun))\"\n-  \"movz{bl|x}\\t{%1, %k0|%k0, %1}\"\n-  [(set_attr \"type\" \"imovx\")\n-   (set_attr \"mode\" \"SI\")])\n+  \"@\n+   movz{bl|x}\\t{%1, %k0|%k0, %1}\n+   kmovb\\t{%1, %k0|%k0, %1}\"\n+  [(set_attr \"type\" \"imovx,mskmov\")\n+   (set_attr \"mode\" \"SI,QI\")])\n \n (define_insn_and_split \"*zext<mode>_doubleword_and\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&<r>\")"}]}