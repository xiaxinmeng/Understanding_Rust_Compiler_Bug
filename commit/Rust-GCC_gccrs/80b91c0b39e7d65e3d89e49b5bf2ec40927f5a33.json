{"sha": "80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBiOTFjMGIzOWU3ZDY1ZTNkODllNDliNWJmMmVjNDA5MjdmNWEzMw==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2012-05-14T19:39:23Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2012-05-14T19:39:23Z"}, "message": "PR 52428 Range checking when reading integer values.\n\ngcc/fortran ChangeLog:\n\n2012-05-14  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/52428\n\t* gfortran.texi: Update _gfortran_set_options documentation.\n\t* invoke.texi: Remove runtime behavior description of\n\t-fno-range-check.\n\t* trans-decl.c (create_main_function): Don't pass the range-check\n\tsetting to the library.\n\n\nlibgfortran ChangeLog:\n\n2012-05-14  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/52428\n\t* io/io.h (max_value): Rename to si_max, remove second argument.\n\t* io/list_read.c (convert_integer): Use unsigned types when\n\tparsing the digits, set max value depending on the sign.\n\t* io/read.c (max_value): Rename to si_max, remove second argument,\n\tsimplify.\n\t(read_decimal): Set max value depending on sign, always check\n\toverflow.\n\t(read_radix): Calculate max unsigned value directly.\n\t* libgfortran.h (struct compile_options_t): Remove range_check\n\tfield.\n\t* runtime/compile_options.c (set_options): Skip handling\n\toptions[7].\n\t(init_compile_options): Don't set removed field.\n\n\ngcc/testsuite ChangeLog:\n\n2012-05-14  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/52428\n\t* gfortran.dg/int_range_io_1.f90: New test.\n\nFrom-SVN: r187478", "tree": {"sha": "1b4a3a8d4b65ec8d0a88de4f00b90d28ce493090", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b4a3a8d4b65ec8d0a88de4f00b90d28ce493090"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/comments", "author": null, "committer": null, "parents": [{"sha": "f62866740b93747b2d3f1dd4d4637e6890e0fa22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f62866740b93747b2d3f1dd4d4637e6890e0fa22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f62866740b93747b2d3f1dd4d4637e6890e0fa22"}], "stats": {"total": 176, "additions": 117, "deletions": 59}, "files": [{"sha": "59cfa32297a5b372a1d9335de60613ce7fbddec7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33", "patch": "@@ -1,3 +1,12 @@\n+2012-05-14  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/52428\n+\t* gfortran.texi: Update _gfortran_set_options documentation.\n+\t* invoke.texi: Remove runtime behavior description of\n+\t-fno-range-check.\n+\t* trans-decl.c (create_main_function): Don't pass the range-check\n+\tsetting to the library.\n+\n 2012-05-14  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/49110"}, {"sha": "ffcd3ece2d7d51815948974e185b68a585af319f", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33", "patch": "@@ -2740,15 +2740,13 @@ Default: enabled.\n are (bitwise or-ed): GFC_RTCHECK_BOUNDS (1), GFC_RTCHECK_ARRAY_TEMPS (2),\n GFC_RTCHECK_RECURSION (4), GFC_RTCHECK_DO (16), GFC_RTCHECK_POINTER (32).\n Default: disabled.\n-@item @var{option}[7] @tab If non zero, range checking is enabled.\n-Default: enabled.  See -frange-check (@pxref{Code Gen Options}).\n @end multitable\n \n @item @emph{Example}:\n @smallexample\n-  /* Use gfortran 4.7 default options.  */\n-  static int options[] = @{68, 511, 0, 0, 1, 1, 0, 1@};\n-  _gfortran_set_options (8, &options);\n+  /* Use gfortran 4.8 default options.  */\n+  static int options[] = @{68, 511, 0, 0, 1, 1, 0@};\n+  _gfortran_set_options (7, &options);\n @end smallexample\n @end table\n "}, {"sha": "658ed2375fc3d4f3e8f922b6d78df8fe2ddc30d3", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33", "patch": "@@ -166,8 +166,7 @@ and warnings}.\n \n @item Runtime Options\n @xref{Runtime Options,,Options for influencing runtime behavior}.\n-@gccoptlist{-fconvert=@var{conversion} -fmax-subrecord-length=@var{length}\n--fno-range-check @gol\n+@gccoptlist{-fconvert=@var{conversion} -fmax-subrecord-length=@var{length} @gol\n -frecord-marker=@var{length} -fsign-zero\n }\n \n@@ -1116,16 +1115,6 @@ representation for unformatted files.\n The @code{CONVERT} specifier and the GFORTRAN_CONVERT_UNIT environment\n variable override the default specified by @option{-fconvert}.}\n \n-\n-@item -fno-range-check\n-@opindex @code{fno-range-check}\n-Disable range checking of input values during integer @code{READ} operations.\n-For example, GNU Fortran will give an error if an input value is\n-outside of the relevant range of [@code{-HUGE()}:@code{HUGE()}]. In other words,\n-with @code{INTEGER (kind=4) :: i} , attempting to read @math{-2147483648} will\n-give an error unless @option{-fno-range-check} is given. \n-\n-\n @item -frecord-marker=@var{length}\n @opindex @code{frecord-marker=}@var{length}\n Specify the length of record markers for unformatted files."}, {"sha": "0480f956c84f1cf01de81a3e61e84b946436f200", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33", "patch": "@@ -5039,12 +5039,17 @@ create_main_function (tree fndecl)\n                             build_int_cst (integer_type_node,\n                                            (gfc_option.rtcheck\n                                             & GFC_RTCHECK_BOUNDS)));\n+    /* TODO: This is the -frange-check option, which no longer affects\n+       library behavior; when bumping the library ABI this slot can be\n+       reused for something else. As it is the last element in the\n+       array, we can instead leave it out altogether.\n     CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n                             build_int_cst (integer_type_node,\n                                            gfc_option.flag_range_check));\n+    */\n \n     array_type = build_array_type (integer_type_node,\n-\t\t\t\t   build_index_type (size_int (7)));\n+\t\t\t\t   build_index_type (size_int (6)));\n     array = build_constructor (array_type, v);\n     TREE_CONSTANT (array) = 1;\n     TREE_STATIC (array) = 1;\n@@ -5059,7 +5064,7 @@ create_main_function (tree fndecl)\n \n     tmp = build_call_expr_loc (input_location,\n \t\t\t   gfor_fndecl_set_options, 2,\n-\t\t\t   build_int_cst (integer_type_node, 8), var);\n+\t\t\t   build_int_cst (integer_type_node, 7), var);\n     gfc_add_expr_to_block (&body, tmp);\n   }\n "}, {"sha": "d6a2adfe77d8ceeb804f267d53a83bfff46effa0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33", "patch": "@@ -1,3 +1,8 @@\n+2012-05-14  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/52428\n+\t* gfortran.dg/int_range_io_1.f90: New test.\n+\n 2012-05-14  Andi Kleen <ak@linux.intel.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "de1fdb81304e6735c60e4e27b6fba4b00bb4d6a3", "filename": "gcc/testsuite/gfortran.dg/int_range_io_1.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/gcc%2Ftestsuite%2Fgfortran.dg%2Fint_range_io_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/gcc%2Ftestsuite%2Fgfortran.dg%2Fint_range_io_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fint_range_io_1.f90?ref=80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do run }\n+! { dg-options \"-fno-range-check\" }\n+! PR 52428 Read IO of integers near the end of range. Note that we\n+! support the two's complement representation even though the Fortran\n+! numerical model has a symmetric range.  (The -fno-range-check option\n+! is needed to allow the -2147483648 literal.)\n+program int_range\n+  implicit none\n+  character(25) :: inputline = \"-2147483648\"\n+  integer(4) ::  test\n+  integer :: st\n+\n+  read(inputline,100) test\n+100 format(1i11)\n+  if (test /= -2147483648) call abort\n+  inputline(1:1) = \" \"\n+  read(inputline, 100, iostat=st) test\n+  if (st == 0) call abort\n+  inputline(11:11) = \"7\"\n+  read(inputline, 100) test\n+  if (test /= 2147483647) call abort\n+\n+  ! Same as above but with list-formatted IO\n+  inputline = \"-2147483648\"\n+  read(inputline, *) test\n+  if (test /= -2147483648) call abort\n+  inputline(1:1) = \" \"\n+  read(inputline, *, iostat=st) test\n+  if (st == 0) call abort\n+  inputline(11:11) = \"7\"\n+  read(inputline, *) test\n+  if (test /= 2147483647) call abort\n+\n+end program int_range"}, {"sha": "088d51786d727a13a2147526ec6cf764442afdcc", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33", "patch": "@@ -1,3 +1,20 @@\n+2012-05-14  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/52428\n+\t* io/io.h (max_value): Rename to si_max, remove second argument.\n+\t* io/list_read.c (convert_integer): Use unsigned types when\n+\tparsing the digits, set max value depending on the sign.\n+\t* io/read.c (max_value): Rename to si_max, remove second argument,\n+\tsimplify.\n+\t(read_decimal): Set max value depending on sign, always check\n+\toverflow.\n+\t(read_radix): Calculate max unsigned value directly.\n+\t* libgfortran.h (struct compile_options_t): Remove range_check\n+\tfield.\n+\t* runtime/compile_options.c (set_options): Skip handling\n+\toptions[7].\n+\t(init_compile_options): Don't set removed field.\n+\n 2012-05-11  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/53310"}, {"sha": "6b54af18362414bcae7df430086ccb66fe2a5e19", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33", "patch": "@@ -661,8 +661,8 @@ internal_proto(hit_eof);\n extern void set_integer (void *, GFC_INTEGER_LARGEST, int);\n internal_proto(set_integer);\n \n-extern GFC_UINTEGER_LARGEST max_value (int, int);\n-internal_proto(max_value);\n+extern GFC_UINTEGER_LARGEST si_max (int);\n+internal_proto(si_max);\n \n extern int convert_real (st_parameter_dt *, void *, const char *, int);\n internal_proto(convert_real);"}, {"sha": "b0c4e5fca52823d1a3268c9ac3e70b7634cddf2c", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33", "patch": "@@ -461,12 +461,20 @@ convert_integer (st_parameter_dt *dtp, int length, int negative)\n {\n   char c, *buffer, message[MSGLEN];\n   int m;\n-  GFC_INTEGER_LARGEST v, max, max10;\n+  GFC_UINTEGER_LARGEST v, max, max10;\n+  GFC_INTEGER_LARGEST value;\n \n   buffer = dtp->u.p.saved_string;\n   v = 0;\n \n-  max = (length == -1) ? MAX_REPEAT : max_value (length, 1);\n+  if (length == -1)\n+    max = MAX_REPEAT;\n+  else\n+    {\n+      max = si_max (length);\n+      if (negative)\n+\tmax++;\n+    }\n   max10 = max / 10;\n \n   for (;;)\n@@ -490,8 +498,10 @@ convert_integer (st_parameter_dt *dtp, int length, int negative)\n   if (length != -1)\n     {\n       if (negative)\n-\tv = -v;\n-      set_integer (dtp->u.p.value, v, length);\n+\tvalue = -v;\n+      else\n+\tvalue = v;\n+      set_integer (dtp->u.p.value, value, length);\n     }\n   else\n     {"}, {"sha": "c493d5a5f43e886bfbb640f1636dfa5eeea8611c", "filename": "libgfortran/io/read.c", "status": "modified", "additions": 21, "deletions": 30, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/libgfortran%2Fio%2Fread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/libgfortran%2Fio%2Fread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fread.c?ref=80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33", "patch": "@@ -87,46 +87,34 @@ set_integer (void *dest, GFC_INTEGER_LARGEST value, int length)\n }\n \n \n-/* max_value()-- Given a length (kind), return the maximum signed or\n- * unsigned value */\n+/* Max signed value of size give by length argument.  */\n \n GFC_UINTEGER_LARGEST\n-max_value (int length, int signed_flag)\n+si_max (int length)\n {\n   GFC_UINTEGER_LARGEST value;\n-#if defined HAVE_GFC_REAL_16 || defined HAVE_GFC_REAL_10\n-  int n;\n-#endif\n \n   switch (length)\n-    {\n+      {\n #if defined HAVE_GFC_REAL_16 || defined HAVE_GFC_REAL_10\n     case 16:\n     case 10:\n       value = 1;\n-      for (n = 1; n < 4 * length; n++)\n+      for (int n = 1; n < 4 * length; n++)\n         value = (value << 2) + 3;\n-      if (! signed_flag)\n-        value = 2*value+1;\n-      break;\n+      return value;\n #endif\n     case 8:\n-      value = signed_flag ? 0x7fffffffffffffff : 0xffffffffffffffff;\n-      break;\n+      return GFC_INTEGER_8_HUGE;\n     case 4:\n-      value = signed_flag ? 0x7fffffff : 0xffffffff;\n-      break;\n+      return GFC_INTEGER_4_HUGE;\n     case 2:\n-      value = signed_flag ? 0x7fff : 0xffff;\n-      break;\n+      return GFC_INTEGER_2_HUGE;\n     case 1:\n-      value = signed_flag ? 0x7f : 0xff;\n-      break;\n+      return GFC_INTEGER_1_HUGE;\n     default:\n       internal_error (NULL, \"Bad integer kind\");\n     }\n-\n-  return value;\n }\n \n \n@@ -634,11 +622,7 @@ read_decimal (st_parameter_dt *dtp, const fnode *f, char *dest, int length)\n       return;\n     }\n \n-  maxv = max_value (length, 1);\n-  maxv_10 = maxv / 10;\n-\n   negative = 0;\n-  value = 0;\n \n   switch (*p)\n     {\n@@ -656,6 +640,11 @@ read_decimal (st_parameter_dt *dtp, const fnode *f, char *dest, int length)\n       break;\n     }\n \n+  maxv = si_max (length);\n+  if (negative)\n+    maxv++;\n+  maxv_10 = maxv / 10;\n+\n   /* At this point we have a digit-string */\n   value = 0;\n \n@@ -674,20 +663,21 @@ read_decimal (st_parameter_dt *dtp, const fnode *f, char *dest, int length)\n       if (c < '0' || c > '9')\n \tgoto bad;\n \n-      if (value > maxv_10 && compile_options.range_check == 1)\n+      if (value > maxv_10)\n \tgoto overflow;\n \n       c -= '0';\n       value = 10 * value;\n \n-      if (value > maxv - c && compile_options.range_check == 1)\n+      if (value > maxv - c)\n \tgoto overflow;\n       value += c;\n     }\n \n-  v = value;\n   if (negative)\n-    v = -v;\n+    v = -value;\n+  else\n+    v = value;\n \n   set_integer (dest, v, length);\n   return;\n@@ -734,7 +724,8 @@ read_radix (st_parameter_dt *dtp, const fnode *f, char *dest, int length,\n       return;\n     }\n \n-  maxv = max_value (length, 0);\n+  /* Maximum unsigned value, assuming two's complement.  */\n+  maxv = 2 * si_max (length) + 1;\n   maxv_r = maxv / radix;\n \n   negative = 0;"}, {"sha": "7dafd940e62cd29a856d70415777f1d45331af7c", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33", "patch": "@@ -535,7 +535,6 @@ typedef struct\n   size_t record_marker;\n   int max_subrecord_length;\n   int bounds_check;\n-  int range_check;\n }\n compile_options_t;\n "}, {"sha": "2ba1aedf5c5a1d56dcd2a7ac2fa716247c6da26d", "filename": "libgfortran/runtime/compile_options.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/libgfortran%2Fruntime%2Fcompile_options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33/libgfortran%2Fruntime%2Fcompile_options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fcompile_options.c?ref=80b91c0b39e7d65e3d89e49b5bf2ec40927f5a33", "patch": "@@ -169,8 +169,10 @@ set_options (int num, int options[])\n     compile_options.sign_zero = options[5];\n   if (num >= 7)\n     compile_options.bounds_check = options[6];\n-  if (num >= 8)\n-    compile_options.range_check = options[7];\n+  /* options[7] is the -frange-check option, which no longer affects\n+     the library behavior; range checking is now always done when\n+     parsing integers. It's place in the options array is retained due\n+     to ABI compatibility. Remove when bumping the library ABI.  */\n \n   /* If backtrace is required, we set signal handlers on the POSIX\n      2001 signals with core action.  */\n@@ -223,7 +225,6 @@ init_compile_options (void)\n   compile_options.pedantic = 0;\n   compile_options.backtrace = 0;\n   compile_options.sign_zero = 1;\n-  compile_options.range_check = 1;\n }\n \n /* Function called by the front-end to tell us the"}]}