{"sha": "7274deff738213914a31413a9d1a671020694175", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI3NGRlZmY3MzgyMTM5MTRhMzE0MTNhOWQxYTY3MTAyMDY5NDE3NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-11-13T02:25:12Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-11-13T02:25:12Z"}, "message": "type_traits (declval): Add, per DR 1255.\n\n2009-11-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/type_traits (declval): Add, per DR 1255.\n\t(__is_convertible_helper, common_type): Use it.\n\t* include/bits/move.h: Mention std::declval.\n\t* testsuite/20_util/declval/requirements/1.cc: New.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Likewise.\n\t* testsuite/20_util/common_type/requirements/typedefs-2.cc: Likewise.\n\t* testsuite/20_util/common_type/requirements/\n\texplicit_instantiation.cc: Extend.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Adjust\n\tdg-error line numbers.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\nFrom-SVN: r154140", "tree": {"sha": "feccd24f8c12bde0673ee5c001cb4b0caeed0c30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/feccd24f8c12bde0673ee5c001cb4b0caeed0c30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7274deff738213914a31413a9d1a671020694175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7274deff738213914a31413a9d1a671020694175", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7274deff738213914a31413a9d1a671020694175", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7274deff738213914a31413a9d1a671020694175/comments", "author": null, "committer": null, "parents": [{"sha": "3791ce90f6b9262cf9c52b57303cb3e8c854e328", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3791ce90f6b9262cf9c52b57303cb3e8c854e328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3791ce90f6b9262cf9c52b57303cb3e8c854e328"}], "stats": {"total": 232, "additions": 205, "deletions": 27}, "files": [{"sha": "4bd07dd7094567888e9fa528e7008d62fccb08b5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7274deff738213914a31413a9d1a671020694175/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7274deff738213914a31413a9d1a671020694175/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7274deff738213914a31413a9d1a671020694175", "patch": "@@ -1,3 +1,18 @@\n+2009-11-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/type_traits (declval): Add, per DR 1255.\n+\t(__is_convertible_helper, common_type): Use it.\n+\t* include/bits/move.h: Mention std::declval.\n+\t* testsuite/20_util/declval/requirements/1.cc: New.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Likewise.\n+\t* testsuite/20_util/common_type/requirements/typedefs-2.cc: Likewise.\n+\t* testsuite/20_util/common_type/requirements/\n+\texplicit_instantiation.cc: Extend.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc: Adjust\n+\tdg-error line numbers.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\n 2009-11-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_algobase.h: Include the full <utility>, per"}, {"sha": "91754814d8bc1e44c470ccd9a71238b3067b00c2", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7274deff738213914a31413a9d1a671020694175/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7274deff738213914a31413a9d1a671020694175/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=7274deff738213914a31413a9d1a671020694175", "patch": "@@ -35,7 +35,7 @@\n #include <bits/concept_check.h>\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-#include <type_traits>\n+#include <type_traits> // Brings in std::declval too.\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n@@ -81,6 +81,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     move(_Tp&& __t)\n     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n \n+  /// declval, defined in <type_traits>.\n+\n _GLIBCXX_END_NAMESPACE\n \n #define _GLIBCXX_MOVE(_Tp) std::move(_Tp)"}, {"sha": "dcfa1c9c4abb0b34b515c47d9939469b9ab7b808", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7274deff738213914a31413a9d1a671020694175/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7274deff738213914a31413a9d1a671020694175/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=7274deff738213914a31413a9d1a671020694175", "patch": "@@ -240,6 +240,9 @@ namespace std\n     : public integral_constant<bool, __is_base_of(_Base, _Derived)>\n     { };\n \n+  template<typename _Tp>\n+    typename add_rvalue_reference<_Tp>::type declval();\n+\n   // Relationships between types.\n   template<typename _From, typename _To,\n \t   bool = (is_void<_From>::value || is_void<_To>::value\n@@ -255,10 +258,9 @@ namespace std\n     private:\n       static __one __test(_To);\n       static __two __test(...);\n-      static typename add_rvalue_reference<_From>::type __makeFrom();\n \n     public:\n-      static const bool __value = sizeof(__test(__makeFrom())) == 1;\n+      static const bool __value = sizeof(__test(declval<_From>())) == 1;\n     };\n \n   // XXX FIXME\n@@ -556,35 +558,38 @@ namespace std\n \n   template<typename _Tp>\n     struct common_type<_Tp>\n-    {\n-      static_assert(sizeof(_Tp) > 0, \"must be complete type\");\n-      typedef _Tp type;\n-    };\n+    { typedef _Tp type; };\n \n   template<typename _Tp, typename _Up>\n-    class common_type<_Tp, _Up>\n-    {\n-      static_assert(sizeof(_Tp) > 0, \"must be complete type\");\n-      static_assert(sizeof(_Up) > 0, \"must be complete type\");\n-\n-      static _Tp&& __t();\n-      static _Up&& __u();\n-\n-    public:\n-      typedef decltype(true ? __t() : __u()) type;\n-    };\n+    struct common_type<_Tp, _Up>\n+    { typedef decltype(true ? declval<_Tp>() : declval<_Up>()) type; };\n \n   template<typename _Tp, typename _Up, typename... _Vp>\n     struct common_type<_Tp, _Up, _Vp...>\n     {\n       typedef typename\n         common_type<typename common_type<_Tp, _Up>::type, _Vp...>::type type;\n     };\n-\n   // @} group metaprogramming\n+\n+  /// declval\n+  template<typename _Tp>\n+    struct __declval_protector\n+    {\n+      static const bool __stop = false;\n+      static typename add_rvalue_reference<_Tp>::type __delegate();\n+    };\n+\n+  template<typename _Tp>\n+    inline typename add_rvalue_reference<_Tp>::type\n+    declval()\n+    {\n+      static_assert(__declval_protector<_Tp>::__stop,\n+\t\t    \"declval() must not be used!\");\n+      return __declval_protector<_Tp>::__delegate();\n+    }\n }\n \n #endif  // __GXX_EXPERIMENTAL_CXX0X__\n \n-#endif  // _GLIBCXX_TYPE_TRAITS \n-\n+#endif  // _GLIBCXX_TYPE_TRAITS"}, {"sha": "93422ca84aeea7599fd8a301aa5af15bdfae23a2", "filename": "libstdc++-v3/testsuite/20_util/common_type/requirements/explicit_instantiation.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7274deff738213914a31413a9d1a671020694175/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7274deff738213914a31413a9d1a671020694175/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fexplicit_instantiation.cc?ref=7274deff738213914a31413a9d1a671020694175", "patch": "@@ -18,7 +18,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n // NB: This file is for testing type_traits with NO OTHER INCLUDES.\n \n #include <type_traits>\n@@ -29,9 +28,14 @@ namespace std\n   typedef int& test_type2;\n   typedef double test_type3;\n   typedef float test_type4;\n-  \n+  typedef void test_type5;\n+  typedef const void test_type6;  \n+\n   template struct common_type<test_type1>;\n   template struct common_type<test_type1, test_type2>;\n   template struct common_type<test_type1, test_type2, test_type3>;\n   template struct common_type<test_type1, test_type2, test_type3, test_type4>;\n+\n+  template struct common_type<test_type5>;\n+  template struct common_type<test_type5, test_type6>;\n }"}, {"sha": "b4a96e5406c265e99af213fae0ec8857cfe0d701", "filename": "libstdc++-v3/testsuite/20_util/common_type/requirements/typedefs-2.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7274deff738213914a31413a9d1a671020694175/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7274deff738213914a31413a9d1a671020694175/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-2.cc?ref=7274deff738213914a31413a9d1a671020694175", "patch": "@@ -0,0 +1,72 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2009-11-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+\n+// DR 1255.\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::common_type;\n+  using std::is_same;\n+\n+  VERIFY( (is_same<common_type<void>::type, void>::value) );\n+  VERIFY( (is_same<common_type<const void>::type, const void>::value) );\n+  VERIFY( (is_same<common_type<volatile void>::type, volatile void>::value) );\n+  VERIFY( (is_same<common_type<const volatile void>::type,\n+\t           const volatile void>::value) );\n+\n+  VERIFY( (is_same<common_type<void, void>::type, void>::value) );\n+  VERIFY( (is_same<common_type<void, const void>::type, void>::value) );\n+  VERIFY( (is_same<common_type<void, volatile void>::type, void>::value) );\n+  VERIFY( (is_same<common_type<void, const volatile void>::type,\n+\t           void>::value) );\n+  VERIFY( (is_same<common_type<const void, void>::type,\n+\t           void>::value) );\n+  VERIFY( (is_same<common_type<const void, const void>::type,\n+\t           void>::value) );\n+  VERIFY( (is_same<common_type<const void, volatile void>::type,\n+\t           void>::value) );\n+  VERIFY( (is_same<common_type<const void, const volatile void>::type,\n+\t           void>::value) );\n+  VERIFY( (is_same<common_type<volatile void, void>::type,\n+\t           void>::value) );\n+  VERIFY( (is_same<common_type<volatile void, volatile void>::type,\n+\t           void>::value) );\n+  VERIFY( (is_same<common_type<volatile void, const void>::type,\n+\t           void>::value) );\n+  VERIFY( (is_same<common_type<volatile void, const volatile void>::type,\n+\t           void>::value) );\n+  VERIFY( (is_same<common_type<const volatile void, void>::type,\n+\t           void>::value) );\n+  VERIFY( (is_same<common_type<const volatile void, const void>::type,\n+\t           void>::value) );\n+  VERIFY( (is_same<common_type<const volatile void, volatile void>::type,\n+\t           void>::value) );\n+  VERIFY( (is_same<common_type<const volatile void, const volatile void>::type,\n+\t           void>::value) );\n+ }\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "204d4ebb6197fe191a5bf26409b7654beedafadd", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7274deff738213914a31413a9d1a671020694175/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7274deff738213914a31413a9d1a671020694175/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1.cc?ref=7274deff738213914a31413a9d1a671020694175", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2009-11-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <utility>\n+  \n+template<typename From, typename To>\n+  struct is_convertible_mini\n+  {\n+  private:\n+    typedef char one;\n+    typedef struct { char arr[2]; } two;\n+\n+    static one test(To);\n+    static two test(...);\n+\n+  public:\n+    static const bool value = sizeof(test(std::declval<From>())) == 1;\n+};\n+\n+template<typename From, typename To>\n+  const bool is_convertible_mini<From, To>::value;\n+\n+void test01()\n+{\n+  static_assert(is_convertible_mini<int*, const int*>::value, \"#1\");\n+  static_assert(!is_convertible_mini<const void*, void*>::value, \"#2\");\n+  static_assert(is_convertible_mini<float, double>::value, \"#3\");\n+  static_assert(!is_convertible_mini<bool, int*>::value, \"#4\");\n+  static_assert(is_convertible_mini<int(&)(int), int(*)(int)>::value, \"#5\");\n+  static_assert(!is_convertible_mini<void*, int*>::value, \"#6\");\n+}"}, {"sha": "d22a58ba038fabd47b1a1a8ef348c0ec530be553", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7274deff738213914a31413a9d1a671020694175/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7274deff738213914a31413a9d1a671020694175/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=7274deff738213914a31413a9d1a671020694175", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2009-11-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 587 }\n+// { dg-error \"instantiated from here\" \"\" { target *-*-* } 30 }\n+// { dg-excess-errors \"In function\" }\n+\n+#include <utility>\n+\n+void test01()\n+{\n+  std::declval<int>();\n+}"}, {"sha": "65fc2cece7c1cdee0e57aeb23cbfd4fb2d49f213", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7274deff738213914a31413a9d1a671020694175/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7274deff738213914a31413a9d1a671020694175/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=7274deff738213914a31413a9d1a671020694175", "patch": "@@ -48,8 +48,8 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 547 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 509 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 549 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 511 }\n \n // { dg-excess-errors \"At global scope\" }\n // { dg-excess-errors \"In instantiation of\" }"}, {"sha": "795755f78546686c302acd342d8137435b0fe3da", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7274deff738213914a31413a9d1a671020694175/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7274deff738213914a31413a9d1a671020694175/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=7274deff738213914a31413a9d1a671020694175", "patch": "@@ -48,8 +48,8 @@ void test01()\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 468 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 430 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 470 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 432 }\n \n // { dg-excess-errors \"At global scope\" }\n // { dg-excess-errors \"In instantiation of\" }"}]}