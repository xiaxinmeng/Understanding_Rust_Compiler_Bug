{"sha": "63dc70a159a078e84da08969b6e61be3e84f5b1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNkYzcwYTE1OWEwNzhlODRkYTA4OTY5YjZlNjFiZTNlODRmNWIxYQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-09-17T05:08:10Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-09-17T05:08:10Z"}, "message": "* jni.cc (array_from_valist): Use promoted types for va_arg.\n\nFrom-SVN: r45650", "tree": {"sha": "f309a39f61d3a571d32f3fda0d13d0aab2258376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f309a39f61d3a571d32f3fda0d13d0aab2258376"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63dc70a159a078e84da08969b6e61be3e84f5b1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63dc70a159a078e84da08969b6e61be3e84f5b1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63dc70a159a078e84da08969b6e61be3e84f5b1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63dc70a159a078e84da08969b6e61be3e84f5b1a/comments", "author": null, "committer": null, "parents": [{"sha": "214bcb99a10c0af77a16d2db6d416c87051cdd31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/214bcb99a10c0af77a16d2db6d416c87051cdd31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/214bcb99a10c0af77a16d2db6d416c87051cdd31"}], "stats": {"total": 120, "additions": 62, "deletions": 58}, "files": [{"sha": "d5add01d2dac94080a734ae657abd78ebe3a3490", "filename": "libjava/ChangeLog", "status": "modified", "additions": 48, "deletions": 44, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63dc70a159a078e84da08969b6e61be3e84f5b1a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63dc70a159a078e84da08969b6e61be3e84f5b1a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=63dc70a159a078e84da08969b6e61be3e84f5b1a", "patch": "@@ -1,3 +1,7 @@\n+2001-09-17  Andreas Jaeger  <aj@suse.de>\n+\n+\t* jni.cc (array_from_valist): Use promoted types for va_arg.\n+\n 2001-09-16  Anthony Green  <green@redhat.com>\n \n \t* gnu/gcj/convert/IOConverter.java: Add support for iso8859_1.\n@@ -12,10 +16,10 @@\n \n 2001-09-14  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n-\t* java/io/File.java (normalizePath): Use equals() not '==' for string \n+\t* java/io/File.java (normalizePath): Use equals() not '==' for string\n \tcomparison.\n \n-\t* java/util/Hashtable.java (Enumerator): Ensure that if \n+\t* java/util/Hashtable.java (Enumerator): Ensure that if\n \thasMoreElements() returns true, nextElement() will always return\n \tsomething even if the table has been modified.\n \n@@ -103,7 +107,7 @@\n \n 2001-09-05  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n-        * java/text/MessageFormat.java (setLocale): Don't catch ParseException \n+        * java/text/MessageFormat.java (setLocale): Don't catch ParseException\n         here, DecimalFormat.applyPattern() does not throw it.\n \n 2001-09-04  Tom Tromey  <tromey@redhat.com>\n@@ -344,7 +348,7 @@\n \tRe-write it to avoid constructing unneeded temporaries.\n \t(<init>(int,int,Random)):  Use new init method to avoid constructing\n \textra temporary BigIntegers.\n-\t\n+\n 2001-08-27  Tom Tromey  <tromey@redhat.com>\n \n \t* java/rmi/activation/Activatable.java,\n@@ -452,11 +456,11 @@\n \t* gcj/javaprims.h: Add prototypes for _Jv_ThreadRun and new variant\n \tof _Jv_AttachCurrentThread.\n \t* gnu/gcj/runtime/FirstThread.java (FirstThread): Now extends Thread.\n-\t(run): New method. Take care of looking up main class manifest \n+\t(run): New method. Take care of looking up main class manifest\n \tattribute and calling forName if neccessary. Then call call_main.\n \t(call_main): New native method.\n-\t* gnu/gcj/runtime/natFirstThread.cc (call_main): New function, code \n-\trelocated from prims.cc. Look up and call main method. \n+\t* gnu/gcj/runtime/natFirstThread.cc (call_main): New function, code\n+\trelocated from prims.cc. Look up and call main method.\n \t* java/lang/Thread.java (run_): Removed.\n \t* java/lang/natThread.cc (run_): Renamed to...\n \t(_Jv_ThreadRun): this. JVMPI notification code moved to ...\n@@ -465,7 +469,7 @@\n \tUnsupportedOperationExceptions rather than JvFail'ing.\n \t(_Jv_AttachCurrentThread): New variant takes a Thread argument.\n \tExisting version wraps new variant.\n-\t\n+\n \n 2001-08-23  Tom Tromey  <tromey@redhat.com>\n \n@@ -535,7 +539,7 @@\n 2001-08-17  Hans-J. Boehm <Hans_Boehm@hp.com>\n \n \t* BigInteger.java: fix right shifts by nonzero multiples of 32.\n-\t\n+\n 2001-08-15  Tom Tromey  <tromey@redhat.com>\n \n \t* jni.cc: Include IdentityHashMap.h, not Hashtable.h.\n@@ -612,11 +616,11 @@\n \t* include/posix.h (_POSIX_PII_SOCKET): Define.\n \t* configure.in (HAVE_SOCKLEN_T): Define.\n \t* java/net/natPlainSocketImpl.cc [!HAVE_SOCKLEN_T]: Move socklen_t\n-\tdefinition up. \n+\tdefinition up.\n \t(_JV_accept): New function, avoids Tru64 UNIX accept macro.\n \t(java::net::PlainSocketImpl::accept): Use it.\n \tFixes PRs libgcj/3694, libgcj/3696.\n-\t\n+\n \t* configure.in (HAVE_STRUCT_IPV6_MREQ): New test.\n \t* acconfig.h (HAVE_STRUCT_IPV6_MREQ): Provide template.\n \t* configure, include/config.h.in: Regenerate.\n@@ -689,14 +693,14 @@\n \n 2001-07-26  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n-\t* java/util/Calendar.java (set): Never recompute fields here. They \n+\t* java/util/Calendar.java (set): Never recompute fields here. They\n \twill already be set if someone set time explicitly, and it can cause\n \tproblems to do so. Don't invalidate AM_PM setting if HOUR is set.\n \t* java/util/GregorianCalendar.java (computeTime): Don't ignore an\n-\tHOUR setting if AM_PM is set. Don't try to ensure the HOUR value is \n+\tHOUR setting if AM_PM is set. Don't try to ensure the HOUR value is\n \tsane.\n \t* java/text/SimpleDateFormat.java (defaultCentury): New field.\n-\t(readObject): Call set2DigitYearStart if appropriate so that \n+\t(readObject): Call set2DigitYearStart if appropriate so that\n \tdefaultCentury is calculated.\n \t(SimpleDateFormat): Don't bother clearing calendar here. Call\n \tcomputeCenturyStart().\n@@ -777,7 +781,7 @@\n \n 2001-07-17  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n-\t* java/util/LinkedList.java (clone): Clear the copy list with clear(), \n+\t* java/util/LinkedList.java (clone): Clear the copy list with clear(),\n \tnot by setting its size field.\n \n 2001-07-13  Alexandre Petit-Bianco  <apbianco@redhat.com>\n@@ -787,7 +791,7 @@\n \n 2001-07-12  Tom Tromey  <tromey@redhat.com>\n \t    David Brownell  <david-b@pacbell.net>\n-\t\n+\n \tFix for PR libgcj/3426:\n \t* gnu/gcj/convert/natIconv.cc: Include CharConversionException.h,\n \terrno.h.\n@@ -853,7 +857,7 @@\n \t* java/lang/ThreadLocal.java: Initial import.\n \n 2001-07-07  Jeff Sturm  <jsturm@one-point.com>\n-\t\n+\n \t* Makefile.am (libgcj.jar): Don't recursively make\n \tbuilt_java_source_files.  Avoid long command lines.\n \tDon't change to $(srcdir) to invoke javac.\n@@ -1024,7 +1028,7 @@\n \t* Makefile.in: Rebuild.\n \t* Makefile.am: Ditto.\n \t* libgcjdata.c: Remove.\n-\t\n+\n 2001-06-02  Anthony Green  <green@redhat.com>\n \n \t* configure: Rebuild.\n@@ -1239,7 +1243,7 @@\n \t* Makefile.am (libgcj_la_DEPENDENCIES):  Add $(nat_files).\n \t(libgcj_la_LIBADD):  Likewise.\n \t(libgcjx_la_DEPENDENCIES, libgcjx_la_LIBADD):  Add $(x_nat_files).\n-\t\n+\n 2001-05-21  Per Bothner  <per@bothner.com>\n \n \t* gcj/javaprims.h (_Jv_FormatInt):  New declaration.\n@@ -1259,7 +1263,7 @@\n \n 2001-05-18  Andrew Haley  <aph@cambridge.redhat.com>\n \n-\t* include/dwarf2-signal.h: New file.\t\n+\t* include/dwarf2-signal.h: New file.\n \t* configure.in (SYSDEP_SOURCES): Add dwarf2-signal.h for PPC.\n \t* configure.host (EXCEPTIONSPEC): Don't use sjlj on PPC.\n         * configure: Rebuilt.\n@@ -1293,7 +1297,7 @@\n \n 2001-05-17  Martin Kahlert  <martin.kahlert@infineon.com>\n \n-\t* java/lang/natClass.cc (_Jv_FindIIndex): Fix an off by one error \n+\t* java/lang/natClass.cc (_Jv_FindIIndex): Fix an off by one error\n \twith length of ioffset table.\n \t(_Jv_IsAssignableFrom): Likewise.\n \n@@ -1436,15 +1440,15 @@\n 2001-04-25  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \tFix PR libgcj/2237:\n-\t* java/io/ObjectStreamClass.java (setClass): Calculate \n+\t* java/io/ObjectStreamClass.java (setClass): Calculate\n \tserialVersionUID for local class and compare it against the UID\n \tfrom the Object Stream. Throw InvalidClassException upon mismatch.\n \t(setUID): Renamed to...\n-\t(getClassUID): this. Return the calculated class UID rather than \n+\t(getClassUID): this. Return the calculated class UID rather than\n \tsetting uid field directly.\n \t(getDefinedSUID): Removed.\n-\t* java/io/ObjectInputStream.java (resolveClass): Use the \n-\tthree-argument Class.forName(). \n+\t* java/io/ObjectInputStream.java (resolveClass): Use the\n+\tthree-argument Class.forName().\n \t* java/io/InvalidClassException (toString): Don't include classname in\n \tresult if it is null.\n \n@@ -1457,9 +1461,9 @@\n \n \tjava.security merge and ClassLoader compliance fixes.\n \n-\t* java/lang/Class.h (Class): Include ProtectionDomain.h. \n+\t* java/lang/Class.h (Class): Include ProtectionDomain.h.\n \tNew protectionDomain field.\n-\t(forName): Add initialize parameter. Fixes declaration to comply with \n+\t(forName): Add initialize parameter. Fixes declaration to comply with\n \tJDK spec.\n \t* java/lang/natClass.cc (forName): Correct declaration of the three-arg\n \tvariant. Honour\t\"initialize\" flag.\n@@ -1501,7 +1505,7 @@\n \t* java/net/NetPermission.java: Likewise.\n \t* java/net/SocketPermission.java: Likewise.\n \t* gnu/java/security/provider/DefaultPolicy.java: Likewise.\n-\t\n+\n \t* Makefile.am: Add new classes.\n \t* Makefile.in: Rebuilt.\n \t* gcj/javaprims.h: CNI namespace rebuild.\n@@ -1581,12 +1585,12 @@\n \n 2001-04-12  Bryce McKinlay  <bryce@albatross.co.nz>\n \n-\t* java/io/File.java (normalizePath): New private method. \n+\t* java/io/File.java (normalizePath): New private method.\n \t(File (String)): Use normalizePath().\n \t(File (String, String)): Likewise.\n \n \t* Makefile.am (libffi_files): Removed.\n-\t(libgcj.la): Link libffi as a convenience library instead of \n+\t(libgcj.la): Link libffi as a convenience library instead of\n \trefering to its object files directly.\n \t* Makefile.in: Rebuilt.\n \n@@ -3254,20 +3258,20 @@ Sun Nov 26 21:30:25 2000  Anthony Green  <green@redhat.com>\n 2000-11-26  Anthony Green  <green@redhat.com>\n \n \t* javax/naming/spi/NamingManager.java,\n- \tjavax/naming/spi/ObjectFactory.java,\n- \tjavax/naming/spi/InitialContextFactory.java,\n- \tjavax/naming/spi/InitialContextFactoryBuilder.java,\n- \tjavax/naming/RefAddr.java, javax/naming/Reference.java,\n- \tjavax/naming/NamingException.java, javax/naming/Context.java,\n- \tjavax/naming/Referenceable.java,\n- \tjavax/naming/directory/InitialDirContext.java,\n- \tjavax/naming/directory/DirContext.java,\n- \tjavax/naming/directory/Attributes.java,\n- \tjavax/naming/directory/Attribute.java,\n- \tjavax/naming/StringRefAddr.java,\n- \tjavax/naming/NamingEnumeration.java, javax/naming/Name.java,\n- \tjavax/naming/InitialContext.java,\n- \tjavax/naming/NoInitialContextException.java: New files.\n+\tjavax/naming/spi/ObjectFactory.java,\n+\tjavax/naming/spi/InitialContextFactory.java,\n+\tjavax/naming/spi/InitialContextFactoryBuilder.java,\n+\tjavax/naming/RefAddr.java, javax/naming/Reference.java,\n+\tjavax/naming/NamingException.java, javax/naming/Context.java,\n+\tjavax/naming/Referenceable.java,\n+\tjavax/naming/directory/InitialDirContext.java,\n+\tjavax/naming/directory/DirContext.java,\n+\tjavax/naming/directory/Attributes.java,\n+\tjavax/naming/directory/Attribute.java,\n+\tjavax/naming/StringRefAddr.java,\n+\tjavax/naming/NamingEnumeration.java, javax/naming/Name.java,\n+\tjavax/naming/InitialContext.java,\n+\tjavax/naming/NoInitialContextException.java: New files.\n \n 2000-11-25  Anthony Green  <green@redhat.com>\n "}, {"sha": "8341d1c8206e08f450ee49e4bec703d0ffbe5a60", "filename": "libjava/jni.cc", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63dc70a159a078e84da08969b6e61be3e84f5b1a/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63dc70a159a078e84da08969b6e61be3e84f5b1a/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=63dc70a159a078e84da08969b6e61be3e84f5b1a", "patch": "@@ -110,19 +110,19 @@ jvmpiEnableEvent (jint event_type, void *)\n     case JVMPI_EVENT_OBJECT_ALLOC:\n       _Jv_JVMPI_Notify_OBJECT_ALLOC = _Jv_JVMPI_Interface.NotifyEvent;\n       break;\n-      \n+\n     case JVMPI_EVENT_THREAD_START:\n       _Jv_JVMPI_Notify_THREAD_START = _Jv_JVMPI_Interface.NotifyEvent;\n       break;\n-      \n+\n     case JVMPI_EVENT_THREAD_END:\n       _Jv_JVMPI_Notify_THREAD_END = _Jv_JVMPI_Interface.NotifyEvent;\n       break;\n-      \n+\n     default:\n       return JVMPI_NOT_AVAILABLE;\n     }\n-  \n+\n   return JVMPI_SUCCESS;\n }\n \n@@ -134,11 +134,11 @@ jvmpiDisableEvent (jint event_type, void *)\n     case JVMPI_EVENT_OBJECT_ALLOC:\n       _Jv_JVMPI_Notify_OBJECT_ALLOC = NULL;\n       break;\n-      \n+\n     default:\n       return JVMPI_NOT_AVAILABLE;\n     }\n-  \n+\n   return JVMPI_SUCCESS;\n }\n #endif\n@@ -317,7 +317,7 @@ _Jv_JNI_PopLocalFrame (JNIEnv *env, jobject result, int stop)\n \n   bool done = false;\n   while (rf != NULL && ! done)\n-    {  \n+    {\n       for (int i = 0; i < rf->size; ++i)\n \tif (rf->vec[i] != NULL)\n \t  unmark_for_gc (rf->vec[i], local_ref_table);\n@@ -396,7 +396,7 @@ _Jv_JNI_GetVersion (JNIEnv *)\n }\n \n static jclass\n-_Jv_JNI_DefineClass (JNIEnv *env, jobject loader, \n+_Jv_JNI_DefineClass (JNIEnv *env, jobject loader,\n \t\t     const jbyte *buf, jsize bufLen)\n {\n   try\n@@ -656,9 +656,9 @@ array_from_valist (jvalue *values, JArray<jclass> *arg_types, va_list vargs)\n   for (int i = 0; i < arg_types->length; ++i)\n     {\n       if (arg_elts[i] == JvPrimClass (byte))\n-\tvalues[i].b = va_arg (vargs, jbyte);\n+\tvalues[i].b = (jbyte) va_arg (vargs, int);\n       else if (arg_elts[i] == JvPrimClass (short))\n-\tvalues[i].s = va_arg (vargs, jshort);\n+\tvalues[i].s = (jshort) va_arg (vargs, int);\n       else if (arg_elts[i] == JvPrimClass (int))\n \tvalues[i].i = va_arg (vargs, jint);\n       else if (arg_elts[i] == JvPrimClass (long))\n@@ -668,9 +668,9 @@ array_from_valist (jvalue *values, JArray<jclass> *arg_types, va_list vargs)\n       else if (arg_elts[i] == JvPrimClass (double))\n \tvalues[i].d = va_arg (vargs, jdouble);\n       else if (arg_elts[i] == JvPrimClass (boolean))\n-\tvalues[i].z = va_arg (vargs, jboolean);\n+\tvalues[i].z = (jboolean) va_arg (vargs, int);\n       else if (arg_elts[i] == JvPrimClass (char))\n-\tvalues[i].c = va_arg (vargs, jchar);\n+\tvalues[i].c = (jchar) va_arg (vargs, int);\n       else\n \t{\n \t  // An object.\n@@ -1044,7 +1044,7 @@ _Jv_JNI_NewObjectA (JNIEnv *env, jclass klass, jmethodID id,\n \n template<typename T>\n static T\n-_Jv_JNI_GetField (JNIEnv *env, jobject obj, jfieldID field) \n+_Jv_JNI_GetField (JNIEnv *env, jobject obj, jfieldID field)\n {\n   JvAssert (obj);\n   T *ptr = (T *) ((char *) obj + field->getOffset ());\n@@ -1393,7 +1393,7 @@ _Jv_JNI_GetPrimitiveArrayRegion (JNIEnv *env, JArray<T> *array,\n \n template<typename T>\n static void\n-_Jv_JNI_SetPrimitiveArrayRegion (JNIEnv *env, JArray<T> *array, \n+_Jv_JNI_SetPrimitiveArrayRegion (JNIEnv *env, JArray<T> *array,\n \t\t\t\t jsize start, jsize len, T *buf)\n {\n   // The cast to unsigned lets us save a comparison."}]}