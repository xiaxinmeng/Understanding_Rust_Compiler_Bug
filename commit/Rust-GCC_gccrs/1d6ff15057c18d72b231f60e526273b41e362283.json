{"sha": "1d6ff15057c18d72b231f60e526273b41e362283", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ2ZmYxNTA1N2MxOGQ3MmIyMzFmNjBlNTI2MjczYjQxZTM2MjI4Mw==", "commit": {"author": {"name": "Stafford Horne", "email": "shorne@gmail.com", "date": "2018-11-09T12:12:56Z"}, "committer": {"name": "Stafford Horne", "email": "shorne@gcc.gnu.org", "date": "2018-11-09T12:12:56Z"}, "message": "or1k: testsuite: initial support for openrisc\n\ngcc/testsuite/ChangeLog:\n\n2018-11-09  Stafford Horne  <shorne@gmail.com>\n\t    Richard Henderson  <rth@twiddle.net>\n\n\t* gcc.c-torture/execute/20101011-1.c: Adjust for OpenRISC.\n\t* gcc.dg/20020312-2.c: Likewise.\n\t* gcc.dg/attr-alloc_size-11.c: Likewise.\n\t* gcc.dg/builtin-apply2.c: Likewise.\n\t* gcc.dg/nop.h: Likewise.\n\t* gcc.dg/torture/stackalign/builtin-apply-2.c: Likewise.\n\t* gcc.dg/tree-ssa/20040204-1.c: Likewise.\n\t* gcc.dg/tree-ssa/reassoc-33.c: Likewise.\n\t* gcc.dg/tree-ssa/reassoc-34.c: Likewise.\n\t* gcc.dg/tree-ssa/reassoc-35.c: Likewise.\n\t* gcc.dg/tree-ssa/reassoc-36.c: Likewise.\n\t* lib/target-supports.exp\n\t(check_effective_target_logical_op_short_circuit): Add or1k*-*-*.\n\t* gcc.target/or1k/*: New.\n\n\nCo-Authored-By: Richard Henderson <rth@twiddle.net>\n\nFrom-SVN: r265962", "tree": {"sha": "206c1ab941be56edd4afa0ad264b71177d0b9ba8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/206c1ab941be56edd4afa0ad264b71177d0b9ba8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d6ff15057c18d72b231f60e526273b41e362283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d6ff15057c18d72b231f60e526273b41e362283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d6ff15057c18d72b231f60e526273b41e362283", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d6ff15057c18d72b231f60e526273b41e362283/comments", "author": {"login": "stffrdhrn", "id": 2404255, "node_id": "MDQ6VXNlcjI0MDQyNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stffrdhrn", "html_url": "https://github.com/stffrdhrn", "followers_url": "https://api.github.com/users/stffrdhrn/followers", "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}", "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}", "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions", "organizations_url": "https://api.github.com/users/stffrdhrn/orgs", "repos_url": "https://api.github.com/users/stffrdhrn/repos", "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}", "received_events_url": "https://api.github.com/users/stffrdhrn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d929e137f89e9bc023615cf32b72dd790c85e36d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d929e137f89e9bc023615cf32b72dd790c85e36d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d929e137f89e9bc023615cf32b72dd790c85e36d"}], "stats": {"total": 280, "additions": 271, "deletions": 9}, "files": [{"sha": "aed3a1f8aae8dc999008fb3685f16a2efb3dd57a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -1,3 +1,21 @@\n+2018-11-09  Stafford Horne  <shorne@gmail.com>\n+\t    Richard Henderson  <rth@twiddle.net>\n+\n+\t* gcc.c-torture/execute/20101011-1.c: Adjust for OpenRISC.\n+\t* gcc.dg/20020312-2.c: Likewise.\n+\t* gcc.dg/attr-alloc_size-11.c: Likewise.\n+\t* gcc.dg/builtin-apply2.c: Likewise.\n+\t* gcc.dg/nop.h: Likewise.\n+\t* gcc.dg/torture/stackalign/builtin-apply-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/20040204-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/reassoc-33.c: Likewise.\n+\t* gcc.dg/tree-ssa/reassoc-34.c: Likewise.\n+\t* gcc.dg/tree-ssa/reassoc-35.c: Likewise.\n+\t* gcc.dg/tree-ssa/reassoc-36.c: Likewise.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_logical_op_short_circuit): Add or1k*-*-*.\n+\t* gcc.target/or1k/*: New.\n+\n 2018-11-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87621"}, {"sha": "d2beeb52a0e4549fbd0a90bc04a9ea49d3bbc583", "filename": "gcc/testsuite/gcc.c-torture/execute/20101011-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101011-1.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -100,6 +100,9 @@ __aeabi_idiv0 (int return_value)\n #elif defined (__moxie__)\n   /* Not all moxie configurations may raise exceptions.  */\n # define DO_TEST 0\n+#elif defined (__or1k__)\n+  /* On OpenRISC division by zero does not trap.  */\n+# define DO_TEST 0\n #else\n # define DO_TEST 1\n #endif"}, {"sha": "e72a5b261aede4243a95cffe9b9e4cffba04f954", "filename": "gcc/testsuite/gcc.dg/20020312-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020312-2.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -117,6 +117,8 @@ extern void abort (void);\n # if defined (__CK807__) || defined (__CK810__)\n #   define PIC_REG  \"r28\"\n # endif\n+#elif defined (__or1k__)\n+/* No pic register.  */\n #else\n # error \"Modify the test for your target.\"\n #endif"}, {"sha": "78bf055e5af032d546db85f422aa9f7d45464a7d", "filename": "gcc/testsuite/gcc.dg/attr-alloc_size-11.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-11.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -47,8 +47,8 @@ typedef __SIZE_TYPE__    size_t;\n \n /* The following tests fail because of missing range information.  The xfail\n    exclusions are PR79356.  */\n-TEST (signed char, SCHAR_MIN + 2, ALLOC_MAX);   /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" \"missing range info for signed char\" { xfail { ! { aarch64*-*-* arm*-*-* avr-*-* alpha*-*-* ia64-*-* mips*-*-* pdp11*-*-* powerpc*-*-* sparc*-*-* s390*-*-* visium-*-* } } } } */\n-TEST (short, SHRT_MIN + 2, ALLOC_MAX); /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" \"missing range info for short\" { xfail { ! { aarch64*-*-* arm*-*-* alpha*-*-* avr-*-* ia64-*-* mips*-*-* pdp11*-*-* powerpc*-*-* sparc*-*-* s390x-*-* visium-*-* } } } } */\n+TEST (signed char, SCHAR_MIN + 2, ALLOC_MAX);   /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" \"missing range info for signed char\" { xfail { ! { aarch64*-*-* arm*-*-* avr-*-* alpha*-*-* ia64-*-* mips*-*-* or1k*-*-* pdp11*-*-* powerpc*-*-* sparc*-*-* s390*-*-* visium-*-* } } } } */\n+TEST (short, SHRT_MIN + 2, ALLOC_MAX); /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" \"missing range info for short\" { xfail { ! { aarch64*-*-* arm*-*-* alpha*-*-* avr-*-* ia64-*-* mips*-*-* or1k*-*-* pdp11*-*-* powerpc*-*-* sparc*-*-* s390x-*-* visium-*-* } } } } */\n TEST (int, INT_MIN + 2, ALLOC_MAX);    /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" } */\n TEST (int, -3, ALLOC_MAX);             /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" } */\n TEST (int, -2, ALLOC_MAX);             /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" } */"}, {"sha": "dd521973cae6ef409465d429798f362077cb1f77", "filename": "gcc/testsuite/gcc.dg/builtin-apply2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run } */\n /* { dg-require-effective-target untyped_assembly } */\n /* { dg-skip-if \"Variadic funcs have all args on stack. Normal funcs have args in registers.\" { \"avr-*-* nds32*-*-*\" } } */\n-/* { dg-skip-if \"Variadic funcs use different argument passing from normal funcs.\" { \"riscv*-*-*\" } } */\n+/* { dg-skip-if \"Variadic funcs use different argument passing from normal funcs.\" { \"riscv*-*-* or1k*-*-*\" } } */\n /* { dg-skip-if \"Variadic funcs use Base AAPCS.  Normal funcs use VFP variant.\" { arm*-*-* && arm_hf_eabi } } */\n \n /* PR target/12503 */"}, {"sha": "23491a603f59e2b161bdbf03bf1e2ef0cb81520e", "filename": "gcc/testsuite/gcc.dg/nop.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.dg%2Fnop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.dg%2Fnop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnop.h?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -2,6 +2,8 @@\n #define NOP \"nop 0\"\n #elif defined (__MMIX__)\n #define NOP \"swym 0\"\n+#elif defined (__or1k__)\n+#define NOP \"l.nop\"\n #else\n #define NOP \"nop\"\n #endif"}, {"sha": "3f8d350ba8f441857120f0551be4cfe1043a31df", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/builtin-apply-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -9,7 +9,7 @@\n /* arm_hf_eabi: Variadic funcs use Base AAPCS.  Normal funcs use VFP variant.\n    avr: Variadic funcs don't pass arguments in registers, while normal funcs\n         do.  */\n-/* { dg-skip-if \"Variadic funcs use different argument passing from normal funcs\" { arm_hf_eabi || { avr-*-* riscv*-*-* } } } */\n+/* { dg-skip-if \"Variadic funcs use different argument passing from normal funcs\" { arm_hf_eabi || { avr-*-* riscv*-*-* or1k*-*-* } } } */\n /* { dg-skip-if \"Variadic funcs have all args on stack. Normal funcs have args in registers.\" { nds32*-*-* } } */\n /* { dg-require-effective-target untyped_assembly } */\n    "}, {"sha": "bc486e32586f015e882a98e24fb0a45d4a46f196", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040204-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040204-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040204-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040204-1.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -33,4 +33,4 @@ void test55 (int x, int y)\n    that the && should be emitted (based on BRANCH_COST).  Fix this\n    by teaching dom to look through && and register all components\n    as true.  */\n-/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\" { xfail { ! \"alpha*-*-* arm*-*-* aarch64*-*-* powerpc*-*-* cris-*-* crisv32-*-* hppa*-*-* i?86-*-* mmix-*-* mips*-*-* m68k*-*-* moxie-*-* nds32*-*-* s390*-*-* sh*-*-* sparc*-*-* spu-*-* visium-*-* x86_64-*-* riscv*-*-*\" } } } } */\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\" { xfail { ! \"alpha*-*-* arm*-*-* aarch64*-*-* powerpc*-*-* cris-*-* crisv32-*-* hppa*-*-* i?86-*-* mmix-*-* mips*-*-* m68k*-*-* moxie-*-* nds32*-*-* s390*-*-* sh*-*-* sparc*-*-* spu-*-* visium-*-* x86_64-*-* riscv*-*-* or1k*-*-*\" } } } } */"}, {"sha": "243508c872ca36538f386826d785836971df4329", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-33.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-33.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run { target { ! \"m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* hppa*-*-* nios2*-*-*\"} } } */\n+/* { dg-do run { target { ! \"m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* hppa*-*-* nios2*-*-* or1k-*-*-*\"} } } */\n \n /* { dg-options \"-O2 -fno-inline -fdump-tree-reassoc1-details\" } */\n /* { dg-additional-options \"-mbranch-cost=2\" { target branch_cost } } */"}, {"sha": "24070046ef2534c652119e1cb164cb91ba81d5d2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-34.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-34.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run { target { ! \"m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* hppa*-*-* nios2*-*-*\"} } } */\n+/* { dg-do run { target { ! \"m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* hppa*-*-* nios2*-*-* or1k*-*-*\"} } } */\n \n /* { dg-options \"-O2 -fno-inline -fdump-tree-reassoc1-details\" } */\n /* { dg-additional-options \"-mbranch-cost=2\" { target branch_cost } } */"}, {"sha": "e5ba101e00117228396d2714e697b7bfe925e781", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-35.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-35.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run { target { ! \"m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* hppa*-*-* nios2*-*-*\"} } } */\n+/* { dg-do run { target { ! \"m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* hppa*-*-* nios2*-*-* or1k*-*-*\"} } } */\n \n /* { dg-options \"-O2 -fno-inline -fdump-tree-reassoc1-details\" } */\n /* { dg-additional-options \"-mbranch-cost=2\" { target branch_cost } } */"}, {"sha": "4df5840859c534276416ec8132348ebe386db8a3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-36.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-36.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run { target { ! \"m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* hppa*-*-* nios2*-*-*\"} } } */\n+/* { dg-do run { target { ! \"m68k*-*-* mmix*-*-* bfin*-*-* v850*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* hppa*-*-* nios2*-*-* or1k*-*-*\"} } } */\n \n /* { dg-options \"-O2 -fno-inline -fdump-tree-reassoc1-details\" } */\n /* { dg-additional-options \"-mbranch-cost=2\" { target branch_cost } } */"}, {"sha": "7538705d07f89417b187615596aaf721f80b5443", "filename": "gcc/testsuite/gcc.target/or1k/args-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fargs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fargs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fargs-1.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+struct a {\n+  long x;\n+  long y;\n+  long z;\n+};\n+\n+int passlibstruct (int b, struct a aa);\n+\n+int main() {\n+  struct a aa = { 55, 66, 77 };\n+\n+  return passlibstruct(-1, aa);\n+}\n+\n+/* Ensure we pass a stack reference in the second arg.  */\n+/* { dg-final { scan-assembler-times \"r4, r1, \" 1 } } */"}, {"sha": "362f7c0c9e9efa396c2c97598fa390b3fe094fd9", "filename": "gcc/testsuite/gcc.target/or1k/args-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fargs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fargs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fargs-2.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+struct a {\n+  long x;\n+  long y;\n+  long z;\n+};\n+\n+int passstruct (int b, struct a aa) {\n+  return aa.z + aa.y + b;\n+}\n+\n+/* Ensure our struct reads are offset from the address in arg 2.  */\n+/* { dg-final { scan-assembler-times \"l.lwz\\\\s+r\\\\d+, \\\\d+.r4.\" 2 } } */"}, {"sha": "c66b67c07c73549ecbcfa22bab7a2d39298665b3", "filename": "gcc/testsuite/gcc.target/or1k/cmov-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fcmov-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fcmov-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fcmov-1.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcmov -O2\" } */\n+\n+int cond (int a, int b) {\n+  return a > b;\n+}\n+\n+/* { dg-final { scan-assembler \"l.cmov\" } } */"}, {"sha": "9b3b5529740a7e13e89dfea3f641f313de2579d9", "filename": "gcc/testsuite/gcc.target/or1k/cmov-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fcmov-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fcmov-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fcmov-2.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"\" { *-*-* }  { \"-mcmov\" } { \"\" } } */\n+\n+int cond (int a, int b) {\n+  return a > b;\n+}\n+\n+/* { dg-final { scan-assembler-not \"l.cmov\" } } */"}, {"sha": "a5e8d286545b9377009d7217e0c687824e51898d", "filename": "gcc/testsuite/gcc.target/or1k/div-mul-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fdiv-mul-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fdiv-mul-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fdiv-mul-1.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msoft-mul -msoft-div\" } */\n+\n+int calc (int a, int b, int c) {\n+  return a * b / c;\n+}\n+\n+/* { dg-final { scan-assembler-not \"l.mul\" } } */\n+/* { dg-final { scan-assembler-not \"l.div\" } } */"}, {"sha": "a567d7d9f502be15431a7a9bb5b81e26ba622315", "filename": "gcc/testsuite/gcc.target/or1k/div-mul-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fdiv-mul-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fdiv-mul-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fdiv-mul-2.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msoft-div\" } */\n+\n+int calc (int a, int b, int c) {\n+  return a * b / c;\n+}\n+\n+/* { dg-final { scan-assembler \"l.mul\" } } */\n+/* { dg-final { scan-assembler-not \"l.div\" } } */"}, {"sha": "1a4d53a9f79abd50d258ecc44fe185b876d40e69", "filename": "gcc/testsuite/gcc.target/or1k/or1k.exp", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2For1k.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2For1k.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2For1k%2For1k.exp?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -0,0 +1,41 @@\n+# Copyright (C) 2017-2018 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an OpenRISC target.\n+if ![istarget or1k*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "6dd04197164d0e724c7aaecaeb6c42623dddb452", "filename": "gcc/testsuite/gcc.target/or1k/return-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Freturn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Freturn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Freturn-1.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+long long calc (long long a, long long b) {\n+  return a * b + 5;\n+}\n+\n+/* Ensure our return value is set in the r11, r12 pair.  */\n+/* { dg-final { scan-assembler \"r11,\" } } */\n+/* { dg-final { scan-assembler \"r12,\" } } */"}, {"sha": "c072ae2314237bb99207c31d24f30d682ed8d19a", "filename": "gcc/testsuite/gcc.target/or1k/return-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Freturn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Freturn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Freturn-2.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -0,0 +1,19 @@\n+/* Large structs are returned at a memory address passed in r3.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+struct a {\n+  long x;\n+  long y;\n+  long z;\n+};\n+\n+struct a getstruct (long aa) {\n+  struct a as = { 22, aa, -5 };\n+  return as;\n+}\n+\n+/* Ensure our return value is returned on stack.  */\n+/* { dg-final { scan-assembler-not \"r12,\" } } */\n+/* { dg-final { scan-assembler \"l.or\\\\s+r11, r3, r3\" } } */\n+/* { dg-final { scan-assembler-times \"l.sw\\\\s+\\\\d+.r3.,\" 3 } } */"}, {"sha": "5c2e5f5ad91f4a532c594e42537dea62b62dfdb1", "filename": "gcc/testsuite/gcc.target/or1k/return-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Freturn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Freturn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Freturn-3.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+struct a {\n+  long x;\n+  long y;\n+  long z;\n+};\n+\n+struct a getlibstruct (long aa);\n+\n+int main() {\n+  struct a rs = getlibstruct(123);\n+\n+  return rs.x;\n+}\n+\n+/* Ensure our return value is read from memory.  */\n+/* { dg-final { scan-assembler \"l.lwz\\\\s+r11,\" } } */"}, {"sha": "b866f58a307d5f000ce103fe5758d549d3ad94b5", "filename": "gcc/testsuite/gcc.target/or1k/return-4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Freturn-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Freturn-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Freturn-4.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -0,0 +1,19 @@\n+/* Test to ensure small structs are returned in memory too.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+struct a {\n+  long x;\n+  long y;\n+};\n+\n+struct a getlibstruct (long aa);\n+\n+int main() {\n+  struct a rs = getlibstruct(123);\n+\n+  return rs.x;\n+}\n+\n+/* Ensure our return value is read from memory.  */\n+/* { dg-final { scan-assembler \"l.lwz\\\\s+r11,\" } } */"}, {"sha": "df55a6adfefbfe84fc6605c3e0b2df1e39cba4f9", "filename": "gcc/testsuite/gcc.target/or1k/ror-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fror-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fror-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fror-1.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mror -O2\" } */\n+\n+unsigned int rotate (unsigned int a, int b) {\n+  return ( a >> b ) | ( a << ( 32 - b ) );\n+}\n+\n+/* { dg-final { scan-assembler \"l.ror\" } } */"}, {"sha": "9cd7f35d285a2087ede7a447c6463ad5655f73d0", "filename": "gcc/testsuite/gcc.target/or1k/ror-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fror-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fror-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fror-2.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"\" { *-*-* }  { \"-mror\" } { \"\" } } */\n+\n+unsigned int rotate (unsigned int a, int b) {\n+  return ( a >> b ) | ( a << ( 32 - b ) );\n+}\n+\n+/* { dg-final { scan-assembler-not \"l.ror\" } } */"}, {"sha": "b0a73b3064d81ce05ba1a823695de18e9b5130b5", "filename": "gcc/testsuite/gcc.target/or1k/ror-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fror-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fror-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fror-3.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mror -O2\" } */\n+\n+unsigned int rotate6 (unsigned int a) {\n+  return ( a >> 6 ) | ( a << ( 32 - 6 ) );\n+}\n+\n+/* { dg-final { scan-assembler-not \"l.rori\" } } */"}, {"sha": "be8d9e8b895b6992cedeb497a005d8858fb0afe5", "filename": "gcc/testsuite/gcc.target/or1k/shftimm-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fshftimm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fshftimm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fshftimm-1.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mror -mshftimm -O2\" } */\n+\n+unsigned int rotate6 (unsigned int a) {\n+  return ( a >> 6 ) | ( a << ( 32 - 6 ) );\n+}\n+\n+/* { dg-final { scan-assembler \"l.rori\" } } */"}, {"sha": "ef9b52f2820cdea278ba995009e15e4edc9fe761", "filename": "gcc/testsuite/gcc.target/or1k/shftimm-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fshftimm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fshftimm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fshftimm-2.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mshftimm -O2\" } */\n+\n+unsigned int shift6 (unsigned int a) {\n+  return a >> 6;\n+}\n+\n+/* { dg-final { scan-assembler \"l.srli\" } } */"}, {"sha": "8134f0cfe352460675353ac474f7c73f011b135b", "filename": "gcc/testsuite/gcc.target/or1k/sibcall-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fsibcall-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fsibcall-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2For1k%2Fsibcall-1.c?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* Just create some dummy call that should trigger sibcall, no\n+   stack logic.  */\n+int calc (int a, int b, int c) {\n+  if (c <= 0) return a;\n+  return calc (a * b, b, --c);\n+}\n+\n+int main() {\n+   return calc (4, 3, 4);\n+}\n+\n+/* Ensure sibcalls do not need to manipulate the stack.  */\n+/* { dg-final { scan-assembler-not \"r1,\" } } */\n+/* Ensure sibcall maintains the body of the function.  */\n+/* { dg-final { scan-assembler \"l.mul\" } } */"}, {"sha": "e0c58010dd27b04d20b1d7130eb2622fe27b46f6", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6ff15057c18d72b231f60e526273b41e362283/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=1d6ff15057c18d72b231f60e526273b41e362283", "patch": "@@ -8429,6 +8429,7 @@ proc check_effective_target_logical_op_short_circuit {} {\n \t || [istarget riscv*-*-*]\n \t || [istarget v850*-*-*]\n \t || [istarget visium-*-*]\n+\t || [istarget or1k*-*-*]\n \t || [check_effective_target_arm_cortex_m] } {\n \treturn 1\n     }"}]}