{"sha": "0480fff0ff265263b0795d64137a0e194c875bc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ4MGZmZjBmZjI2NTI2M2IwNzk1ZDY0MTM3YTBlMTk0Yzg3NWJjNA==", "commit": {"author": {"name": "Greta Yorsh", "email": "greta.yorsh@arm.com", "date": "2013-04-17T15:22:05Z"}, "committer": {"name": "Greta Yorsh", "email": "gretay@gcc.gnu.org", "date": "2013-04-17T15:22:05Z"}, "message": "2013-04-17  Greta Yorsh  <Greta.Yorsh at arm.com>\n\n\t* config/arm/arm.md (movsicc_insn): Convert define_insn into\n\tdefine_insn_and_split.\n\t(and_scc,ior_scc,negscc): Likewise.\n\t(cmpsi2_addneg, subsi3_compare): Convert to named patterns.\n\nFrom-SVN: r198030", "tree": {"sha": "a644bf12f3cf7e65c57070c50fcee1005794abc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a644bf12f3cf7e65c57070c50fcee1005794abc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0480fff0ff265263b0795d64137a0e194c875bc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0480fff0ff265263b0795d64137a0e194c875bc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0480fff0ff265263b0795d64137a0e194c875bc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0480fff0ff265263b0795d64137a0e194c875bc4/comments", "author": null, "committer": null, "parents": [{"sha": "367075fe242c10042024b5866dc2934f5f9b9c37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/367075fe242c10042024b5866dc2934f5f9b9c37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/367075fe242c10042024b5866dc2934f5f9b9c37"}], "stats": {"total": 186, "additions": 158, "deletions": 28}, "files": [{"sha": "ee4bb5f6d3fc31431e6209dd3f78a0ce13ff5fe1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0480fff0ff265263b0795d64137a0e194c875bc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0480fff0ff265263b0795d64137a0e194c875bc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0480fff0ff265263b0795d64137a0e194c875bc4", "patch": "@@ -1,3 +1,10 @@\n+2013-04-17  Greta Yorsh  <Greta.Yorsh at arm.com>\n+\n+\t* config/arm/arm.md (movsicc_insn): Convert define_insn into\n+\tdefine_insn_and_split.\n+\t(and_scc,ior_scc,negscc): Likewise.\n+\t(cmpsi2_addneg, subsi3_compare): Convert to named patterns.\n+\n 2013-04-17  Greta Yorsh  <Greta.Yorsh at arm.com>\n \n \t* config/arm/arm.c (use_return_insn): Return 0 for targets that"}, {"sha": "bd585b7765cbb2b04f8515abff497aa1ed81b00a", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 151, "deletions": 28, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0480fff0ff265263b0795d64137a0e194c875bc4/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0480fff0ff265263b0795d64137a0e194c875bc4/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=0480fff0ff265263b0795d64137a0e194c875bc4", "patch": "@@ -858,7 +858,7 @@\n \n ;; This is the canonicalization of addsi3_compare0_for_combiner when the\n ;; addend is a constant.\n-(define_insn \"*cmpsi2_addneg\"\n+(define_insn \"cmpsi2_addneg\"\n   [(set (reg:CC CC_REGNUM)\n \t(compare:CC\n \t (match_operand:SI 1 \"s_register_operand\" \"r,r\")\n@@ -1415,7 +1415,7 @@\n    (set_attr \"type\"  \"simple_alu_imm,*,*\")]\n )\n \n-(define_insn \"*subsi3_compare\"\n+(define_insn \"subsi3_compare\"\n   [(set (reg:CC CC_REGNUM)\n \t(compare:CC (match_operand:SI 1 \"arm_rhs_operand\" \"r,r,I\")\n \t\t    (match_operand:SI 2 \"arm_rhs_operand\" \"I,r,r\")))\n@@ -8709,7 +8709,7 @@\n    (set_attr \"type\" \"f_sel<vfp_type>\")]\n )\n \n-(define_insn \"*movsicc_insn\"\n+(define_insn_and_split \"*movsicc_insn\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r,r,r,r,r\")\n \t(if_then_else:SI\n \t (match_operator 3 \"arm_comparison_operator\"\n@@ -8722,10 +8722,45 @@\n    mvn%D3\\\\t%0, #%B2\n    mov%d3\\\\t%0, %1\n    mvn%d3\\\\t%0, #%B1\n-   mov%d3\\\\t%0, %1\\;mov%D3\\\\t%0, %2\n-   mov%d3\\\\t%0, %1\\;mvn%D3\\\\t%0, #%B2\n-   mvn%d3\\\\t%0, #%B1\\;mov%D3\\\\t%0, %2\n-   mvn%d3\\\\t%0, #%B1\\;mvn%D3\\\\t%0, #%B2\"\n+   #\n+   #\n+   #\n+   #\"\n+   ; alt4: mov%d3\\\\t%0, %1\\;mov%D3\\\\t%0, %2\n+   ; alt5: mov%d3\\\\t%0, %1\\;mvn%D3\\\\t%0, #%B2\n+   ; alt6: mvn%d3\\\\t%0, #%B1\\;mov%D3\\\\t%0, %2\n+   ; alt7: mvn%d3\\\\t%0, #%B1\\;mvn%D3\\\\t%0, #%B2\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+  {\n+    enum rtx_code rev_code;\n+    enum machine_mode mode;\n+    rtx rev_cond;\n+\n+    emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n+                                  operands[3],\n+                                  gen_rtx_SET (VOIDmode,\n+                                               operands[0],\n+                                               operands[1])));\n+\n+    rev_code = GET_CODE (operands[3]);\n+    mode = GET_MODE (operands[4]);\n+    if (mode == CCFPmode || mode == CCFPEmode)\n+      rev_code = reverse_condition_maybe_unordered (rev_code);\n+    else\n+      rev_code = reverse_condition (rev_code);\n+\n+    rev_cond = gen_rtx_fmt_ee (rev_code,\n+                               VOIDmode,\n+                               operands[4],\n+                               const0_rtx);\n+    emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n+                                  rev_cond,\n+                                  gen_rtx_SET (VOIDmode,\n+                                               operands[0],\n+                                               operands[2])));\n+    DONE;\n+  }\n   [(set_attr \"length\" \"4,4,4,4,8,8,8,8\")\n    (set_attr \"conds\" \"use\")\n    (set_attr \"insn\" \"mov,mvn,mov,mvn,mov,mov,mvn,mvn\")\n@@ -9694,27 +9729,64 @@\n    (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n \f\n \n-(define_insn \"*and_scc\"\n+(define_insn_and_split \"*and_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(and:SI (match_operator:SI 1 \"arm_comparison_operator\"\n-\t\t [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n-\t\t(match_operand:SI 2 \"s_register_operand\" \"r\")))]\n+\t\t [(match_operand 2 \"cc_register\" \"\") (const_int 0)])\n+\t\t(match_operand:SI 3 \"s_register_operand\" \"r\")))]\n   \"TARGET_ARM\"\n-  \"mov%D1\\\\t%0, #0\\;and%d1\\\\t%0, %2, #1\"\n+  \"#\"   ; \"mov%D1\\\\t%0, #0\\;and%d1\\\\t%0, %3, #1\"\n+  \"&& reload_completed\"\n+  [(cond_exec (match_dup 5) (set (match_dup 0) (const_int 0)))\n+   (cond_exec (match_dup 4) (set (match_dup 0)\n+                                 (and:SI (match_dup 3) (const_int 1))))]\n+  {\n+    enum machine_mode mode = GET_MODE (operands[2]);\n+    enum rtx_code rc = GET_CODE (operands[1]);\n+\n+    /* Note that operands[4] is the same as operands[1],\n+       but with VOIDmode as the result. */\n+    operands[4] = gen_rtx_fmt_ee (rc, VOIDmode, operands[2], const0_rtx);\n+    if (mode == CCFPmode || mode == CCFPEmode)\n+      rc = reverse_condition_maybe_unordered (rc);\n+    else\n+      rc = reverse_condition (rc);\n+    operands[5] = gen_rtx_fmt_ee (rc, VOIDmode, operands[2], const0_rtx);\n+  }\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"insn\" \"mov\")\n    (set_attr \"length\" \"8\")]\n )\n \n-(define_insn \"*ior_scc\"\n+(define_insn_and_split \"*ior_scc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-\t(ior:SI (match_operator:SI 2 \"arm_comparison_operator\"\n-\t\t [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n-\t\t(match_operand:SI 1 \"s_register_operand\" \"0,?r\")))]\n+\t(ior:SI (match_operator:SI 1 \"arm_comparison_operator\"\n+\t\t [(match_operand 2 \"cc_register\" \"\") (const_int 0)])\n+\t\t(match_operand:SI 3 \"s_register_operand\" \"0,?r\")))]\n   \"TARGET_ARM\"\n   \"@\n-   orr%d2\\\\t%0, %1, #1\n-   mov%D2\\\\t%0, %1\\;orr%d2\\\\t%0, %1, #1\"\n+   orr%d1\\\\t%0, %3, #1\n+   #\"\n+  \"&& reload_completed\n+   && REGNO (operands [0]) != REGNO (operands[3])\"\n+  ;; && which_alternative == 1\n+  ; mov%D1\\\\t%0, %3\\;orr%d1\\\\t%0, %3, #1\n+  [(cond_exec (match_dup 5) (set (match_dup 0) (match_dup 3)))\n+   (cond_exec (match_dup 4) (set (match_dup 0)\n+                                 (ior:SI (match_dup 3) (const_int 1))))]\n+  {\n+    enum machine_mode mode = GET_MODE (operands[2]);\n+    enum rtx_code rc = GET_CODE (operands[1]);\n+\n+    /* Note that operands[4] is the same as operands[1],\n+       but with VOIDmode as the result. */\n+    operands[4] = gen_rtx_fmt_ee (rc, VOIDmode, operands[2], const0_rtx);\n+    if (mode == CCFPmode || mode == CCFPEmode)\n+      rc = reverse_condition_maybe_unordered (rc);\n+    else\n+      rc = reverse_condition (rc);\n+    operands[5] = gen_rtx_fmt_ee (rc, VOIDmode, operands[2], const0_rtx);\n+  }\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"length\" \"4,8\")]\n )\n@@ -10421,24 +10493,75 @@\n   \"\")\n ;; ??? The conditional patterns above need checking for Thumb-2 usefulness\n \n-(define_insn \"*negscc\"\n+(define_insn_and_split \"*negscc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(neg:SI (match_operator 3 \"arm_comparison_operator\"\n \t\t [(match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"rI\")])))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ARM\"\n-  \"*\n-  if (GET_CODE (operands[3]) == LT && operands[2] == const0_rtx)\n-    return \\\"mov\\\\t%0, %1, asr #31\\\";\n-\n-  if (GET_CODE (operands[3]) == NE)\n-    return \\\"subs\\\\t%0, %1, %2\\;mvnne\\\\t%0, #0\\\";\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+  {\n+    rtx cc_reg = gen_rtx_REG (CCmode, CC_REGNUM);\n \n-  output_asm_insn (\\\"cmp\\\\t%1, %2\\\", operands);\n-  output_asm_insn (\\\"mov%D3\\\\t%0, #0\\\", operands);\n-  return \\\"mvn%d3\\\\t%0, #0\\\";\n-  \"\n+    if (GET_CODE (operands[3]) == LT && operands[2] == const0_rtx)\n+       {\n+         /* Emit mov\\\\t%0, %1, asr #31 */\n+         emit_insn (gen_rtx_SET (VOIDmode,\n+                                 operands[0],\n+                                 gen_rtx_ASHIFTRT (SImode,\n+                                                   operands[1],\n+                                                   GEN_INT (31))));\n+         DONE;\n+       }\n+     else if (GET_CODE (operands[3]) == NE)\n+       {\n+        /* Emit subs\\\\t%0, %1, %2\\;mvnne\\\\t%0, #0 */\n+        if (CONST_INT_P (operands[2]))\n+          emit_insn (gen_cmpsi2_addneg (operands[0], operands[1], operands[2],\n+                                        GEN_INT (- INTVAL (operands[2]))));\n+        else\n+          emit_insn (gen_subsi3_compare (operands[0], operands[1], operands[2]));\n+\n+        emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n+                                      gen_rtx_NE (SImode,\n+                                                  cc_reg,\n+                                                  const0_rtx),\n+                                      gen_rtx_SET (SImode,\n+                                                   operands[0],\n+                                                   GEN_INT (~0))));\n+        DONE;\n+      }\n+    else\n+      {\n+        /* Emit: cmp\\\\t%1, %2\\;mov%D3\\\\t%0, #0\\;mvn%d3\\\\t%0, #0 */\n+        emit_insn (gen_rtx_SET (VOIDmode,\n+                                cc_reg,\n+                                gen_rtx_COMPARE (CCmode, operands[1], operands[2])));\n+        enum rtx_code rc = GET_CODE (operands[3]);\n+\n+        rc = reverse_condition (rc);\n+        emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n+                                      gen_rtx_fmt_ee (rc,\n+                                                      VOIDmode,\n+                                                      cc_reg,\n+                                                      const0_rtx),\n+                                      gen_rtx_SET (VOIDmode, operands[0], const0_rtx)));\n+        rc = GET_CODE (operands[3]);\n+        emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n+                                      gen_rtx_fmt_ee (rc,\n+                                                      VOIDmode,\n+                                                      cc_reg,\n+                                                      const0_rtx),\n+                                      gen_rtx_SET (VOIDmode,\n+                                                   operands[0],\n+                                                   GEN_INT (~0))));\n+        DONE;\n+      }\n+     FAIL;\n+  }\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"12\")]\n )"}]}