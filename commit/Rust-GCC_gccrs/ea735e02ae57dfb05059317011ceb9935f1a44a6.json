{"sha": "ea735e02ae57dfb05059317011ceb9935f1a44a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE3MzVlMDJhZTU3ZGZiMDUwNTkzMTcwMTFjZWI5OTM1ZjFhNDRhNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-03-23T02:33:34Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-03-23T02:33:34Z"}, "message": "decl2.c (finish_file): Set at_eof to 2 after expanding ctors.\n\n\t* decl2.c (finish_file): Set at_eof to 2 after expanding ctors.\n\t* decl.c (expand_static_init): Make sure we don't add any after\n\tthen.\n\t* decl.c (cp_finish_decl): Move intelligence about handling\n\tDECL_COMDAT for variables from here...\n\t* decl2.c (comdat_linkage): ...to here.\n\t(maybe_make_one_only): Tweak.\n\t(import_export_decl): Call comdat_linkage for variables, too.\n\t(finish_file): Handle template statics properly.\n\nFrom-SVN: r25920", "tree": {"sha": "5e8c37b11ac24bc5b4a9bdb9ac3cf09d13bfca11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e8c37b11ac24bc5b4a9bdb9ac3cf09d13bfca11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea735e02ae57dfb05059317011ceb9935f1a44a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea735e02ae57dfb05059317011ceb9935f1a44a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea735e02ae57dfb05059317011ceb9935f1a44a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea735e02ae57dfb05059317011ceb9935f1a44a6/comments", "author": null, "committer": null, "parents": [{"sha": "fb835c4d70ddef4c7b22ffc03f20710ab2189437", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb835c4d70ddef4c7b22ffc03f20710ab2189437", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb835c4d70ddef4c7b22ffc03f20710ab2189437"}], "stats": {"total": 106, "additions": 64, "deletions": 42}, "files": [{"sha": "d132ce17f14403ff4582c7424fad45daf49cf665", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea735e02ae57dfb05059317011ceb9935f1a44a6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea735e02ae57dfb05059317011ceb9935f1a44a6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ea735e02ae57dfb05059317011ceb9935f1a44a6", "patch": "@@ -1,3 +1,16 @@\n+1999-03-23  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl2.c (finish_file): Set at_eof to 2 after expanding ctors.\n+\t* decl.c (expand_static_init): Make sure we don't add any after\n+\tthen.\n+\n+\t* decl.c (cp_finish_decl): Move intelligence about handling\n+\tDECL_COMDAT for variables from here...\n+\t* decl2.c (comdat_linkage): ...to here.\n+\t(maybe_make_one_only): Tweak.\n+\t(import_export_decl): Call comdat_linkage for variables, too.\n+\t(finish_file): Handle template statics properly.\n+\n 1999-03-22  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (TYPE_PTRMEMFUNC_P): Use TYPE_PTRMEMFUNC_FLAG."}, {"sha": "e7272ff0b4a66638a9b2ba0217b6f0addfc532ab", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 25, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea735e02ae57dfb05059317011ceb9935f1a44a6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea735e02ae57dfb05059317011ceb9935f1a44a6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ea735e02ae57dfb05059317011ceb9935f1a44a6", "patch": "@@ -7774,31 +7774,9 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n       else if (TREE_CODE (decl) == VAR_DECL\n \t       && DECL_LANG_SPECIFIC (decl)\n \t       && DECL_COMDAT (decl))\n-\t{\n-\t  /* Dynamically initialized vars go into common.  */\n-\t  if (DECL_INITIAL (decl) == NULL_TREE\n-\t      || DECL_INITIAL (decl) == error_mark_node)\n-\t    DECL_COMMON (decl) = 1;\n-\t  else if (EMPTY_CONSTRUCTOR_P (DECL_INITIAL (decl)))\n-\t    {\n-\t      DECL_COMMON (decl) = 1;\n-\t      DECL_INITIAL (decl) = error_mark_node;\n-\t    }\n-\t  else\n-\t    {\n-\t      /* Statically initialized vars are weak or comdat, if\n-                 supported.  */\n-\t      if (flag_weak)\n-\t\tmake_decl_one_only (decl);\n-\t      else\n-\t\t{\n-\t\t  /* We can't do anything useful; leave vars for explicit\n-\t\t     instantiation.  */\n-\t\t  DECL_EXTERNAL (decl) = 1;\n-\t\t  DECL_NOT_REALLY_EXTERN (decl) = 0;\n-\t\t}\n-\t    }\n-\t}\n+\t/* Set it up again; we might have set DECL_INITIAL since the\n+\t   last time.  */\n+\tcomdat_linkage (decl);\n \n       if (TREE_CODE (decl) == VAR_DECL && DECL_VIRTUAL_P (decl))\n \tmake_decl_rtl (decl, NULL_PTR, toplev);\n@@ -8094,6 +8072,9 @@ expand_static_init (decl, init)\n {\n   tree oldstatic = value_member (decl, static_aggregates);\n \n+  /* If at_eof is 2, we're too late.  */\n+  my_friendly_assert (at_eof <= 1, 990323);\n+\n   if (oldstatic)\n     {\n       if (TREE_PURPOSE (oldstatic) && init != NULL_TREE)"}, {"sha": "8adf5f95df90dccf7d70141bebfd354417f152c6", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 45, "deletions": 17, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea735e02ae57dfb05059317011ceb9935f1a44a6/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea735e02ae57dfb05059317011ceb9935f1a44a6/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=ea735e02ae57dfb05059317011ceb9935f1a44a6", "patch": "@@ -2370,8 +2370,26 @@ comdat_linkage (decl)\n {\n   if (flag_weak)\n     make_decl_one_only (decl);\n-  else\n+  else if (TREE_CODE (decl) == FUNCTION_DECL)\n     TREE_PUBLIC (decl) = 0;\n+  else\n+    {\n+      if (DECL_INITIAL (decl) == 0\n+\t  || DECL_INITIAL (decl) == error_mark_node)\n+\tDECL_COMMON (decl) = 1;\n+      else if (EMPTY_CONSTRUCTOR_P (DECL_INITIAL (decl)))\n+\t{\n+\t  DECL_COMMON (decl) = 1;\n+\t  DECL_INITIAL (decl) = error_mark_node;\n+\t}\n+      else\n+\t{\n+\t  /* We can't do anything useful; leave vars for explicit\n+\t     instantiation.  */\n+\t  DECL_EXTERNAL (decl) = 1;\n+\t  DECL_NOT_REALLY_EXTERN (decl) = 0;\n+\t}\n+    }\n \n   if (DECL_LANG_SPECIFIC (decl))\n     DECL_COMDAT (decl) = 1;\n@@ -2391,14 +2409,14 @@ maybe_make_one_only (decl)\n     return;\n \n   /* We can't set DECL_COMDAT on functions, or finish_file will think\n-     we can get away with not emitting them if they aren't used.\n-     We can't use make_decl_one_only for variables, because their\n-     DECL_INITIAL may not have been set properly yet.  */\n+     we can get away with not emitting them if they aren't used.  We need\n+     to for variables so that cp_finish_decl will update their linkage,\n+     because their DECL_INITIAL may not have been set properly yet.  */\n \n-  if (TREE_CODE (decl) == FUNCTION_DECL)\n-    make_decl_one_only (decl);\n-  else\n-    comdat_linkage (decl);\n+  make_decl_one_only (decl);\n+\n+  if (TREE_CODE (decl) == VAR_DECL && DECL_LANG_SPECIFIC (decl))\n+    DECL_COMDAT (decl) = 1;\n }\n \n /* Set TREE_PUBLIC and/or DECL_EXTERN on the vtable DECL,\n@@ -2730,10 +2748,8 @@ import_export_decl (decl)\n \t    /* Templates are allowed to have internal linkage.  See \n \t       [basic.link].  */\n \t    ;\n-\t  else if (TREE_CODE (decl) == FUNCTION_DECL)\n-\t    comdat_linkage (decl);\n \t  else\n-\t    DECL_COMDAT (decl) = 1;\n+\t    comdat_linkage (decl);\n \t}\n       else\n \tDECL_NOT_REALLY_EXTERN (decl) = 0;\n@@ -3344,12 +3360,18 @@ finish_file ()\n   /* Done with C language context needs.  */\n   pop_lang_context ();\n \n+  /* Let expand_static_init know it's too late for more ctors.  */\n+  at_eof = 2;\n+\n   /* Now write out any static class variables (which may have since\n      learned how to be initialized).  */\n-  while (pending_statics)\n+  for (; pending_statics; pending_statics = TREE_CHAIN (pending_statics))\n     {\n       tree decl = TREE_VALUE (pending_statics);\n \n+      if (TREE_ASM_WRITTEN (decl))\n+\tcontinue;\n+\n       /* Output DWARF debug information.  */\n #ifdef DWARF_DEBUGGING_INFO\n       if (write_symbols == DWARF_DEBUG)\n@@ -3360,11 +3382,15 @@ finish_file ()\n \tdwarf2out_decl (decl);\n #endif\n \n-      DECL_DEFER_OUTPUT (decl) = 0;\n+      /* We currently handle template statics here.  We ought to handle\n+\t them the same way we do template functions, i.e. only emit them if\n+\t the symbol is needed.  */\n+      import_export_decl (decl);\n+      if (DECL_NOT_REALLY_EXTERN (decl) && ! DECL_IN_AGGR_P (decl))\n+\tDECL_EXTERNAL (decl) = 0;\n+\n       rest_of_decl_compilation\n \t(decl, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)), 1, 1);\n-\n-      pending_statics = TREE_CHAIN (pending_statics);\n     }\n \n   this_time = get_run_time ();\n@@ -3426,7 +3452,8 @@ finish_file ()\n \t      continue;\n \n \t    if (TREE_ASM_WRITTEN (decl)\n-\t\t|| (DECL_SAVED_INSNS (decl) == 0 && ! DECL_ARTIFICIAL (decl)))\n+\t\t|| (DECL_SAVED_INSNS (decl) == 0\n+\t\t    && ! DECL_ARTIFICIAL (decl)))\n \t      *p = TREE_CHAIN (*p);\n \t    else if (DECL_INITIAL (decl) == 0)\n \t      p = &TREE_CHAIN (*p);\n@@ -3475,7 +3502,8 @@ finish_file ()\n   }\n \n   /* Now delete from the chain of variables all virtual function tables.\n-     We output them all ourselves, because each will be treated specially.  */\n+     We output them all ourselves, because each will be treated\n+     specially.  */\n \n   walk_vtables ((void (*) PROTO((tree, tree))) 0,\n \t\tprune_vtable_vardecl);"}]}