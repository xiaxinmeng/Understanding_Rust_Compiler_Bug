{"sha": "788a081828a0a8d510df0f2c2323126c561fe781", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg4YTA4MTgyOGEwYThkNTEwZGYwZjJjMjMyMzEyNmM1NjFmZTc4MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-11-12T19:09:27Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-11-12T19:09:27Z"}, "message": "(hard_reg_use_compare, compare_spill_regs): Use `const void *' arguments.\n\n(reload_reg_class_lower): Likewise.\n\nFrom-SVN: r13132", "tree": {"sha": "5e513b244f286b539e33fd4c98767c49a04fcb64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e513b244f286b539e33fd4c98767c49a04fcb64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/788a081828a0a8d510df0f2c2323126c561fe781", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/788a081828a0a8d510df0f2c2323126c561fe781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/788a081828a0a8d510df0f2c2323126c561fe781", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/788a081828a0a8d510df0f2c2323126c561fe781/comments", "author": null, "committer": null, "parents": [{"sha": "daa6f17d843d8f7162bb64a8fd6867f782b55a5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daa6f17d843d8f7162bb64a8fd6867f782b55a5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daa6f17d843d8f7162bb64a8fd6867f782b55a5b"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "a45e904205a427bb079805e85e625039e5d4429e", "filename": "gcc/reload1.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788a081828a0a8d510df0f2c2323126c561fe781/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788a081828a0a8d510df0f2c2323126c561fe781/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=788a081828a0a8d510df0f2c2323126c561fe781", "patch": "@@ -359,13 +359,12 @@ static int eliminate_regs_in_insn\tPROTO((rtx, int));\n static void mark_not_eliminable\t\tPROTO((rtx, rtx));\n static int spill_hard_reg\t\tPROTO((int, int, FILE *, int));\n static void scan_paradoxical_subregs\tPROTO((rtx));\n-static int hard_reg_use_compare\t\tPROTO((struct hard_reg_n_uses *,\n-\t\t\t\t\t       struct hard_reg_n_uses *));\n+static int hard_reg_use_compare\t\tPROTO((const GENERIC_PTR, const GENERIC_PTR));\n static void order_regs_for_reload\tPROTO((int));\n-static int compare_spill_regs\t\tPROTO((short *, short *));\n+static int compare_spill_regs\t\tPROTO((const GENERIC_PTR, const GENERIC_PTR));\n static void reload_as_needed\t\tPROTO((rtx, int));\n static void forget_old_reloads_1\tPROTO((rtx, rtx));\n-static int reload_reg_class_lower\tPROTO((short *, short *));\n+static int reload_reg_class_lower\tPROTO((const GENERIC_PTR, const GENERIC_PTR));\n static void mark_reload_reg_in_use\tPROTO((int, int, enum reload_type,\n \t\t\t\t\t       enum machine_mode));\n static void clear_reload_reg_in_use\tPROTO((int, int, enum reload_type,\n@@ -3624,9 +3623,12 @@ scan_paradoxical_subregs (x)\n }\n \f\n static int\n-hard_reg_use_compare (p1, p2)\n-     struct hard_reg_n_uses *p1, *p2;\n+hard_reg_use_compare (p1p, p2p)\n+  const GENERIC_PTR p1p;\n+  const GENERIC_PTR p2p;\n {\n+  struct hard_reg_n_uses *p1 = (struct hard_reg_n_uses *)p1p,\n+\t\t\t *p2 = (struct hard_reg_n_uses *)p2p;\n   int tem = p1->uses - p2->uses;\n   if (tem != 0) return tem;\n   /* If regs are equally good, sort by regno,\n@@ -3759,10 +3761,12 @@ order_regs_for_reload (global)\n /* Used in reload_as_needed to sort the spilled regs.  */\n \n static int\n-compare_spill_regs (r1, r2)\n-     short *r1, *r2;\n+compare_spill_regs (r1p, r2p)\n+     const GENERIC_PTR r1p;\n+     const GENERIC_PTR r2p;\n {\n-  return *r1 - *r2;\n+  short r1 = *(short *)r1p, r2 = *(short *)r2p;\n+  return r1 - r2;\n }\n \n /* Reload pseudo-registers into hard regs around each insn as needed.\n@@ -4115,10 +4119,11 @@ static int reload_nregs[MAX_RELOADS];\n    should be handled first.  *P1 and *P2 are the reload numbers.  */\n \n static int\n-reload_reg_class_lower (p1, p2)\n-     short *p1, *p2;\n+reload_reg_class_lower (r1p, r2p)\n+     const GENERIC_PTR r1p;\n+     const GENERIC_PTR r2p;\n {\n-  register int r1 = *p1, r2 = *p2;\n+  register int r1 = *(short *)r1p, r2 = *(short *)r2p;\n   register int t;\n \n   /* Consider required reloads before optional ones.  */"}]}