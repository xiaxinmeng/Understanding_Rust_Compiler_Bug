{"sha": "6b9539e2aa811e84847db2deb1adfc288c7157b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI5NTM5ZTJhYTgxMWU4NDg0N2RiMmRlYjFhZGZjMjg4YzcxNTdiNw==", "commit": {"author": {"name": "Daniel Kruegler", "email": "daniel.kruegler@gmail.com", "date": "2016-06-16T15:07:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-06-16T15:07:19Z"}, "message": "Provide swappable traits (p0185r1)\n\n2016-06-16  Daniel Kruegler  <daniel.kruegler@gmail.com>\n\n\tProvide swappable traits (p0185r1)\n\t* include/std/type_traits (is_swappable, is_nothrow_swappable,\n\tis_swappable_with, is_nothrow_swappable_with, is_swappable_v,\n\tis_nothrow_swappable_v, is_swappable_with_v,\n\tis_nothrow_swappable_with_v): New.\n\t* include/bits/stl_pair.h: Use it as per p0185r1.\n\t* include/bits/stl_queue.h: Likewise.\n\t* include/bits/stl_stack.h: Likewise.\n\t* include/bits/unique_ptr.h: Likewise.\n\t* include/std/tuple: Likewise.\n\t* include/std/array: Likewise. Fix zero-size member swap.\n\t* include/bits/hashtable.h: Use __and_.\n\t* testsuite/20_util/is_nothrow_swappable/requirements/\n\texplicit_instantiation.cc: Change test options to std=gnu++17.\n\t* testsuite/20_util/is_nothrow_swappable/requirements/typedefs.cc:\n\tLikewise.\n\t* testsuite/20_util/is_nothrow_swappable/value.cc: Likewise.\n\t* testsuite/20_util/is_swappable/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/20_util/is_swappable/requirements/typedefs.cc: Likewise.\n\t* testsuite/20_util/is_swappable/value.cc: Likewise.\n\t* testsuite/20_util/is_nothrow_swappable/requirements/\n\texplicit_instantiation_ext.cc: New.\n\t* testsuite/20_util/is_nothrow_swappable/requirements/typedefs_ext.cc:\n\tNew.\n\t* testsuite/20_util/is_nothrow_swappable/value.h: New.\n\t* testsuite/20_util/is_nothrow_swappable/value_ext.cc: New.\n\t* testsuite/20_util/is_nothrow_swappable_with/requirements/\n\texplicit_instantiation.cc: New.\n\t* testsuite/20_util/is_nothrow_swappable_with/requirements/typedefs.cc:\n\tNew.\n\t* testsuite/20_util/is_nothrow_swappable_with/value.cc: New.\n\t* testsuite/20_util/is_swappable/requirements/\n\texplicit_instantiation_ext.cc: New.\n\t* testsuite/20_util/is_swappable/requirements/typedefs_ext.cc: New.\n\t* testsuite/20_util/is_swappable/value.h: New.\n\t* testsuite/20_util/is_swappable/value_ext.cc: New.\n\t* testsuite/20_util/is_swappable_with/requirements/\n\texplicit_instantiation.cc: New.\n\t* testsuite/20_util/is_swappable_with/requirements/typedefs.cc: New.\n\t* testsuite/20_util/is_swappable_with/value.cc: New.\n\t* testsuite/23_containers/array/tuple_interface/get_neg.cc: Adjust\n\tdg-error line numbers.\n\t* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc:\n\tLikewise.\n\nFrom-SVN: r237531", "tree": {"sha": "d9c81b59eb0c9725f8f69924f452f5c2575a9472", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9c81b59eb0c9725f8f69924f452f5c2575a9472"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b9539e2aa811e84847db2deb1adfc288c7157b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b9539e2aa811e84847db2deb1adfc288c7157b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b9539e2aa811e84847db2deb1adfc288c7157b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b9539e2aa811e84847db2deb1adfc288c7157b7/comments", "author": {"login": "Dani-Hub", "id": 431432, "node_id": "MDQ6VXNlcjQzMTQzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/431432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dani-Hub", "html_url": "https://github.com/Dani-Hub", "followers_url": "https://api.github.com/users/Dani-Hub/followers", "following_url": "https://api.github.com/users/Dani-Hub/following{/other_user}", "gists_url": "https://api.github.com/users/Dani-Hub/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dani-Hub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dani-Hub/subscriptions", "organizations_url": "https://api.github.com/users/Dani-Hub/orgs", "repos_url": "https://api.github.com/users/Dani-Hub/repos", "events_url": "https://api.github.com/users/Dani-Hub/events{/privacy}", "received_events_url": "https://api.github.com/users/Dani-Hub/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6ca982f5108c5982762eb2e7c361a88c082bc5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6ca982f5108c5982762eb2e7c361a88c082bc5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6ca982f5108c5982762eb2e7c361a88c082bc5d"}], "stats": {"total": 1776, "additions": 1355, "deletions": 421}, "files": [{"sha": "d23948bfd8914d8c0053dbd763f05777c86715bb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -1,3 +1,51 @@\n+2016-06-16  Daniel Kruegler  <daniel.kruegler@gmail.com>\n+\n+\tProvide swappable traits (p0185r1)\n+\t* include/std/type_traits (is_swappable, is_nothrow_swappable,\n+\tis_swappable_with, is_nothrow_swappable_with, is_swappable_v,\n+\tis_nothrow_swappable_v, is_swappable_with_v,\n+\tis_nothrow_swappable_with_v): New.\n+\t* include/bits/stl_pair.h: Use it as per p0185r1.\n+\t* include/bits/stl_queue.h: Likewise.\n+\t* include/bits/stl_stack.h: Likewise.\n+\t* include/bits/unique_ptr.h: Likewise.\n+\t* include/std/tuple: Likewise.\n+\t* include/std/array: Likewise. Fix zero-size member swap.\n+\t* include/bits/hashtable.h: Use __and_.\n+\t* testsuite/20_util/is_nothrow_swappable/requirements/\n+\texplicit_instantiation.cc: Change test options to std=gnu++17.\n+\t* testsuite/20_util/is_nothrow_swappable/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_nothrow_swappable/value.cc: Likewise.\n+\t* testsuite/20_util/is_swappable/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/is_swappable/requirements/typedefs.cc: Likewise.\n+\t* testsuite/20_util/is_swappable/value.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_swappable/requirements/\n+\texplicit_instantiation_ext.cc: New.\n+\t* testsuite/20_util/is_nothrow_swappable/requirements/typedefs_ext.cc:\n+\tNew.\n+\t* testsuite/20_util/is_nothrow_swappable/value.h: New.\n+\t* testsuite/20_util/is_nothrow_swappable/value_ext.cc: New.\n+\t* testsuite/20_util/is_nothrow_swappable_with/requirements/\n+\texplicit_instantiation.cc: New.\n+\t* testsuite/20_util/is_nothrow_swappable_with/requirements/typedefs.cc:\n+\tNew.\n+\t* testsuite/20_util/is_nothrow_swappable_with/value.cc: New.\n+\t* testsuite/20_util/is_swappable/requirements/\n+\texplicit_instantiation_ext.cc: New.\n+\t* testsuite/20_util/is_swappable/requirements/typedefs_ext.cc: New.\n+\t* testsuite/20_util/is_swappable/value.h: New.\n+\t* testsuite/20_util/is_swappable/value_ext.cc: New.\n+\t* testsuite/20_util/is_swappable_with/requirements/\n+\texplicit_instantiation.cc: New.\n+\t* testsuite/20_util/is_swappable_with/requirements/typedefs.cc: New.\n+\t* testsuite/20_util/is_swappable_with/value.cc: New.\n+\t* testsuite/23_containers/array/tuple_interface/get_neg.cc: Adjust\n+\tdg-error line numbers.\n+\t* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc:\n+\tLikewise.\n+\n 2016-06-16  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/array: Remove trailing whitespace."}, {"sha": "05f27b42423814865b4707b7c201b437872f6c44", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -475,8 +475,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       void\n       swap(_Hashtable&)\n-      noexcept(__is_nothrow_swappable<_H1>::value\n-\t       && __is_nothrow_swappable<_Equal>::value);\n+      noexcept(__and_<__is_nothrow_swappable<_H1>,\n+\t                  __is_nothrow_swappable<_Equal>>::value);\n \n       // Basic container operations\n       iterator\n@@ -1236,8 +1236,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,\n \t       _H1, _H2, _Hash, _RehashPolicy, _Traits>::\n     swap(_Hashtable& __x)\n-    noexcept(__is_nothrow_swappable<_H1>::value\n-\t     && __is_nothrow_swappable<_Equal>::value)\n+    noexcept(__and_<__is_nothrow_swappable<_H1>,\n+\t                __is_nothrow_swappable<_Equal>>::value)\n     {\n       // The only base class with member variables is hash_code_base.\n       // We define _Hash_code_base::_M_swap because different"}, {"sha": "5ff160ac6d1166346196a684875a41dad18d7d66", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -341,8 +341,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       void\n       swap(pair& __p)\n-      noexcept(__is_nothrow_swappable<_T1>::value\n-               && __is_nothrow_swappable<_T2>::value)\n+      noexcept(__and_<__is_nothrow_swappable<_T1>,\n+                      __is_nothrow_swappable<_T2>>::value)\n       {\n \tusing std::swap;\n \tswap(first, __p.first);\n@@ -399,11 +399,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Note:  no std::swap overloads in C++03 mode, this has performance\n   //        implications, see, eg, libstdc++/38466.\n   template<typename _T1, typename _T2>\n-    inline void\n+    inline\n+#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n+    // Constrained free swap overload, see p0185r1\n+    typename enable_if<__and_<__is_swappable<_T1>,\n+                              __is_swappable<_T2>>::value>::type\n+#else\n+    void\n+#endif\n     swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)\n     noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n-#endif\n+#endif // __cplusplus >= 201103L\n \n   /**\n    *  @brief A convenience wrapper for creating a pair from two objects."}, {"sha": "da984ff255e456212b9a4e0785cbf3876face386", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -274,12 +274,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n       void\n       swap(queue& __q)\n+#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n+      noexcept(__is_nothrow_swappable<_Sequence>::value)\n+#else\n       noexcept(__is_nothrow_swappable<_Tp>::value)\n+#endif\n       {\n \tusing std::swap;\n \tswap(c, __q.c);\n       }\n-#endif\n+#endif // __cplusplus >= 201103L\n     };\n \n   /**\n@@ -342,15 +346,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201103L\n   template<typename _Tp, typename _Seq>\n-    inline void\n+    inline\n+#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n+    // Constrained free swap overload, see p0185r1\n+    typename enable_if<__is_swappable<_Seq>::value>::type\n+#else\n+    void\n+#endif\n     swap(queue<_Tp, _Seq>& __x, queue<_Tp, _Seq>& __y)\n     noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n   template<typename _Tp, typename _Seq, typename _Alloc>\n     struct uses_allocator<queue<_Tp, _Seq>, _Alloc>\n     : public uses_allocator<_Seq, _Alloc>::type { };\n-#endif\n+#endif // __cplusplus >= 201103L\n \n   /**\n    *  @brief  A standard container automatically sorting its contents.\n@@ -603,21 +613,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n       void\n       swap(priority_queue& __pq)\n-      noexcept(__is_nothrow_swappable<_Tp>::value\n-               && __is_nothrow_swappable<_Compare>::value)\n+      noexcept(__and_<\n+#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n+                 __is_nothrow_swappable<_Sequence>,\n+#else\n+                 __is_nothrow_swappable<_Tp>,\n+#endif\n+                 __is_nothrow_swappable<_Compare>\n+               >::value)\n       {\n \tusing std::swap;\n \tswap(c, __pq.c);\n \tswap(comp, __pq.comp);\n       }\n-#endif\n+#endif // __cplusplus >= 201103L\n     };\n \n   // No equality/comparison operators are provided for priority_queue.\n \n #if __cplusplus >= 201103L\n   template<typename _Tp, typename _Sequence, typename _Compare>\n-    inline void\n+    inline\n+#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n+    // Constrained free swap overload, see p0185r1\n+    typename enable_if<__and_<__is_swappable<_Sequence>,\n+                              __is_swappable<_Compare>>::value>::type\n+#else\n+    void\n+#endif\n     swap(priority_queue<_Tp, _Sequence, _Compare>& __x,\n \t priority_queue<_Tp, _Sequence, _Compare>& __y)\n     noexcept(noexcept(__x.swap(__y)))\n@@ -627,7 +650,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _Alloc>\n     struct uses_allocator<priority_queue<_Tp, _Sequence, _Compare>, _Alloc>\n     : public uses_allocator<_Sequence, _Alloc>::type { };\n-#endif\n+#endif // __cplusplus >= 201103L\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "612913da935aedf0ee3840d1002f1c6eadf88927", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -250,12 +250,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n       void\n       swap(stack& __s)\n+#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n+      noexcept(__is_nothrow_swappable<_Sequence>::value)\n+#else\n       noexcept(__is_nothrow_swappable<_Tp>::value)\n+#endif\n       {\n \tusing std::swap;\n \tswap(c, __s.c);\n       }\n-#endif\n+#endif // __cplusplus >= 201103L\n     };\n \n   /**\n@@ -319,15 +323,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201103L\n   template<typename _Tp, typename _Seq>\n-    inline void\n+    inline\n+#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n+    // Constrained free swap overload, see p0185r1\n+    typename enable_if<__is_swappable<_Seq>::value>::type\n+#else\n+    void\n+#endif\n     swap(stack<_Tp, _Seq>& __x, stack<_Tp, _Seq>& __y)\n     noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n   template<typename _Tp, typename _Seq, typename _Alloc>\n     struct uses_allocator<stack<_Tp, _Seq>, _Alloc>\n     : public uses_allocator<_Seq, _Alloc>::type { };\n-#endif\n+#endif // __cplusplus >= 201103L\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "15ef8a8947521c54f361bf6b696ff1e8de0d0308", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -635,7 +635,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   template<typename _Tp, typename _Dp>\n-    inline void\n+    inline\n+#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n+    // Constrained free swap overload, see p0185r1\n+    typename enable_if<__is_swappable<_Dp>::value>::type\n+#else\n+    void\n+#endif\n     swap(unique_ptr<_Tp, _Dp>& __x,\n \t unique_ptr<_Tp, _Dp>& __y) noexcept\n     { __x.swap(__y); }"}, {"sha": "73d26698f72010d664eaa405a5bdb87df47fe8ec", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -48,6 +48,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     struct __array_traits\n     {\n       typedef _Tp _Type[_Nm];\n+      typedef __is_swappable<_Tp> _Is_swappable;\n+      typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;\n \n       static constexpr _Tp&\n       _S_ref(const _Type& __t, std::size_t __n) noexcept\n@@ -62,6 +64,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    struct __array_traits<_Tp, 0>\n    {\n      struct _Type { };\n+     typedef true_type _Is_swappable;\n+     typedef true_type _Is_nothrow_swappable;\n \n      static constexpr _Tp&\n      _S_ref(const _Type&, std::size_t) noexcept\n@@ -114,7 +118,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       void\n       swap(array& __other)\n-      noexcept(__is_nothrow_swappable<_Tp>::value)\n+      noexcept(_AT_Type::_Is_nothrow_swappable::value)\n       { std::swap_ranges(begin(), end(), __other.begin()); }\n \n       // Iterators.\n@@ -271,7 +275,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   // Specialized algorithms.\n   template<typename _Tp, std::size_t _Nm>\n-    inline void\n+    inline\n+#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n+    // Constrained free swap overload, see p0185r1\n+    typename enable_if<\n+      _GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::_Is_swappable::value\n+    >::type\n+#else\n+    void\n+#endif\n     swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)\n     noexcept(noexcept(__one.swap(__two)))\n     { __one.swap(__two); }"}, {"sha": "180a34629f81f14fc3e617e4b7775c9e0c40a5bf", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -1569,7 +1569,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// swap\n   template<typename... _Elements>\n-    inline void\n+    inline\n+#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n+    // Constrained free swap overload, see p0185r1\n+    typename enable_if<__and_<__is_swappable<_Elements>...>::value\n+      >::type\n+#else\n+    void\n+#endif\n     swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)\n     noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }"}, {"sha": "e5c0d468f92fad3714552d4e022629045af89f50", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 111, "deletions": 1, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -2631,7 +2631,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         static false_type __test(...);\n     };\n \n-  }\n+  } // namespace __swappable_details\n \n   template<typename _Tp>\n     struct __is_swappable_impl\n@@ -2657,6 +2657,116 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __is_nothrow_swappable_impl<_Tp>::type\n     { };\n \n+#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n+#define __cpp_lib_is_swappable 201603\n+  /// Metafunctions used for detecting swappable types: p0185r1\n+\n+  /// is_swappable\n+  template<typename _Tp>\n+    struct is_swappable\n+    : public __is_swappable_impl<_Tp>::type\n+    { };\n+\n+  /// is_nothrow_swappable\n+  template<typename _Tp>\n+    struct is_nothrow_swappable\n+    : public __is_nothrow_swappable_impl<_Tp>::type\n+    { };\n+\n+#if __cplusplus >= 201402L\n+  /// is_swappable_v\n+  template<typename _Tp>\n+    constexpr bool is_swappable_v = is_swappable<_Tp>::value;\n+\n+  /// is_nothrow_swappable_v\n+  template<typename _Tp>\n+    constexpr bool is_nothrow_swappable_v = is_nothrow_swappable<_Tp>::value;\n+#endif // __cplusplus >= 201402L\n+\n+  namespace __swappable_with_details {\n+    using std::swap;\n+\n+    struct __do_is_swappable_with_impl\n+    {\n+      template<typename _Tp, typename _Up, typename\n+               = decltype(swap(std::declval<_Tp>(), std::declval<_Up>())),\n+               typename\n+               = decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))>\n+        static true_type __test(int);\n+\n+      template<typename, typename>\n+        static false_type __test(...);\n+    };\n+\n+    struct __do_is_nothrow_swappable_with_impl\n+    {\n+      template<typename _Tp, typename _Up>\n+        static __bool_constant<\n+          noexcept(swap(std::declval<_Tp>(), std::declval<_Up>()))\n+          &&\n+          noexcept(swap(std::declval<_Up>(), std::declval<_Tp>()))\n+        > __test(int);\n+\n+      template<typename, typename>\n+        static false_type __test(...);\n+    };\n+\n+  } // namespace __swappable_with_details\n+\n+  template<typename _Tp, typename _Up>\n+    struct __is_swappable_with_impl\n+    : public __swappable_with_details::__do_is_swappable_with_impl\n+    {\n+      typedef decltype(__test<_Tp, _Up>(0)) type;\n+    };\n+\n+  // Optimization for the homogenous lvalue case, not required:\n+  template<typename _Tp>\n+    struct __is_swappable_with_impl<_Tp&, _Tp&>\n+    : public __swappable_details::__do_is_swappable_impl\n+    {\n+      typedef decltype(__test<_Tp&>(0)) type;\n+    };\n+\n+  template<typename _Tp, typename _Up>\n+    struct __is_nothrow_swappable_with_impl\n+    : public __swappable_with_details::__do_is_nothrow_swappable_with_impl\n+    {\n+      typedef decltype(__test<_Tp, _Up>(0)) type;\n+    };\n+\n+  // Optimization for the homogenous lvalue case, not required:\n+  template<typename _Tp>\n+    struct __is_nothrow_swappable_with_impl<_Tp&, _Tp&>\n+    : public __swappable_details::__do_is_nothrow_swappable_impl\n+    {\n+      typedef decltype(__test<_Tp&>(0)) type;\n+    };\n+\n+  /// is_swappable_with\n+  template<typename _Tp, typename _Up>\n+    struct is_swappable_with\n+    : public __is_swappable_with_impl<_Tp, _Up>::type\n+    { };\n+\n+  /// is_nothrow_swappable_with\n+  template<typename _Tp, typename _Up>\n+    struct is_nothrow_swappable_with\n+    : public __is_nothrow_swappable_with_impl<_Tp, _Up>::type\n+    { };\n+\n+#if __cplusplus >= 201402L\n+  /// is_swappable_with_v\n+  template<typename _Tp, typename _Up>\n+    constexpr bool is_swappable_with_v = is_swappable_with<_Tp, _Up>::value;\n+\n+  /// is_nothrow_swappable_with_v\n+  template<typename _Tp, typename _Up>\n+    constexpr bool is_nothrow_swappable_with_v =\n+      is_nothrow_swappable_with<_Tp, _Up>::value;\n+#endif // __cplusplus >= 201402L\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "399fd2dae132bef380fde8c874eb56edc72f3b85", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_swappable/requirements/explicit_instantiation.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Frequirements%2Fexplicit_instantiation.cc?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=gnu++11\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do compile }\n \n // Copyright (C) 2015-2016 Free Software Foundation, Inc.\n@@ -20,8 +20,14 @@\n \n #include <type_traits>\n \n+#ifndef __cpp_lib_is_swappable\n+# error \"Feature-test macro for is_nothrow_swappable missing\"\n+#elif __cpp_lib_is_swappable != 201603\n+# error \"Feature-test macro for is_nothrow_swappable has wrong value\"\n+#endif\n+\n namespace std\n {\n   typedef short test_type;\n-  template struct std::__is_nothrow_swappable<test_type>;\n+  template struct is_nothrow_swappable<test_type>;\n }"}, {"sha": "fd243004524289182d4bbcd5add883abea2f1a6a", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_swappable/requirements/explicit_instantiation_ext.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Frequirements%2Fexplicit_instantiation_ext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Frequirements%2Fexplicit_instantiation_ext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Frequirements%2Fexplicit_instantiation_ext.cc?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct __is_nothrow_swappable<test_type>;\n+}"}, {"sha": "a940b636ce74bf845e2ff6dee537636d58601de5", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_swappable/requirements/typedefs.cc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Frequirements%2Ftypedefs.cc?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=gnu++11\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do compile }\n \n // Copyright (C) 2015-2016 Free Software Foundation, Inc.\n@@ -20,11 +20,16 @@\n \n #include <type_traits>\n \n+#ifndef __cpp_lib_is_swappable\n+# error \"Feature-test macro for is_nothrow_swappable missing\"\n+#elif __cpp_lib_is_swappable != 201603\n+# error \"Feature-test macro for is_nothrow_swappable has wrong value\"\n+#endif\n \n void test01()\n {\n   // Check for required typedefs\n-  typedef std::__is_nothrow_swappable<int>          test_type;\n+  typedef std::is_nothrow_swappable<int>            test_type;\n   typedef test_type::value_type                     value_type;\n   typedef test_type::type                           type;\n   typedef test_type::type::value_type               type_value_type;"}, {"sha": "fa23a745f6c40bf062b59ae7133e72c30e43db55", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_swappable/requirements/typedefs_ext.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Frequirements%2Ftypedefs_ext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Frequirements%2Ftypedefs_ext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Frequirements%2Ftypedefs_ext.cc?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::__is_nothrow_swappable<int>          test_type;\n+  typedef test_type::value_type                     value_type;\n+  typedef test_type::type                           type;\n+  typedef test_type::type::value_type               type_value_type;\n+  typedef test_type::type::type                     type_type;\n+}"}, {"sha": "824734553d722c0cc8b2966f020cf067aac39e89", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_swappable/value.cc", "status": "modified", "additions": 3, "deletions": 216, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fvalue.cc?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=gnu++11\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do compile }\n \n // Copyright (C) 2015-2016 Free Software Foundation, Inc.\n@@ -18,218 +18,5 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-#include <type_traits>\n-#include <testsuite_tr1.h>\n-#include <utility>\n-#include <array>\n-#include <tuple>\n-#include <queue>\n-#include <stack>\n-\n-namespace funny {\n-  struct F {};\n-  void swap(F&, F&) = delete;\n-  void swap(F(&)[5], F(&)[5]) noexcept;\n-  void swap(F(&)[6], F(&)[6]);\n-  struct A {};\n-  void swap(A&, A&) noexcept(false);\n-}\n-namespace std {\n-  template<>\n-  void swap<funny::A>(funny::A&, funny::A&) noexcept\n-  {\n-  }\n-\n-  template<>\n-  void swap<funny::A>(funny::A(&)[3], funny::A(&)[3]) noexcept(false)\n-  {\n-  }\n-}\n-namespace ns1 {\n-  struct SwapThrow {};\n-  void swap(SwapThrow&, SwapThrow&);\n-  void swap(SwapThrow(&)[3], SwapThrow(&)[3]) noexcept;\n-}\n-\n-namespace ns2 {\n-  struct SwapThrow {\n-    SwapThrow() noexcept = default;\n-    SwapThrow(const SwapThrow&) noexcept(false);\n-    SwapThrow& operator=(const SwapThrow&) noexcept(false);\n-  };\n-}\n-\n-namespace ns3 {\n-  struct SwapNoThrow {\n-    SwapNoThrow() noexcept = default;\n-    SwapNoThrow(const SwapNoThrow&) noexcept(false);\n-    SwapNoThrow& operator =(const SwapNoThrow&) noexcept(false);\n-  };\n-  void swap(SwapNoThrow&, SwapNoThrow&) noexcept;\n-}\n-\n-namespace ns4 {\n-  struct SwapNoThrow {};\n-}\n-\n-namespace ns5 {\n-  struct SwapThrow {\n-    SwapThrow() noexcept = default;\n-    SwapThrow(SwapThrow&&) noexcept;\n-    SwapThrow& operator=(const SwapThrow&) noexcept(false);\n-  };\n-}\n-void test01()\n-{\n-  using std::__is_nothrow_swappable;\n-  using namespace __gnu_test;\n-  // Positive tests.\n-  static_assert(test_property<__is_nothrow_swappable, int>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, bool>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    decltype(nullptr)>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, int&>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, int&&>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, int[1]>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, int[1][2]>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, int[1][2][3]>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, funny::F[5]>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, EnumType>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, PODType>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, UnionType>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    construct::SE>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    construct::Empty>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, void*>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, void(*)()>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, int const*>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, ClassType*>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    int ClassType::*>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    void (ClassType::*)()>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    int (ClassType::*)() const volatile>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    ns1::SwapThrow[3]>(true), \"\");\n-  static_assert(!noexcept(std::swap(std::declval<ns1::SwapThrow(&)[3]>(),\n-                                    std::declval<ns1::SwapThrow(&)[3]>())),\n-                                    \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        ns3::SwapNoThrow>(true), \"\");\n-  static_assert(!noexcept(std::swap(std::declval<ns3::SwapNoThrow&>(),\n-                                    std::declval<ns3::SwapNoThrow&>())), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        ns3::SwapNoThrow[1]>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        ns3::SwapNoThrow[3]>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        ns3::SwapNoThrow[2][3][4]>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        ns4::SwapNoThrow>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        ns4::SwapNoThrow[1]>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        ns4::SwapNoThrow[3]>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        ns4::SwapNoThrow[2][3][4]>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        std::pair<int, int>>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        std::pair<int, int>[1]>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        std::pair<int, int>[1][2]>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        std::tuple<int>>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        std::tuple<int>[1]>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        std::tuple<int>[1][2]>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        std::tuple<>>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        std::tuple<>[1]>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        std::tuple<>[1][2]>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        std::array<int, 1>>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        std::queue<int>>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        std::priority_queue<int>>(true), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-        std::stack<int>>(true), \"\");\n-  // Negative tests.\n-  static_assert(test_property<__is_nothrow_swappable, void>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, const void>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, void()>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    void() const>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    void() volatile>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    void() const volatile>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, const int>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, const bool>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    const int[1]>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    const int[1][2]>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    const int[1][2][3]>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, int[]>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, const int[]>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, int[][1]>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    const funny::F[5]>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    construct::Abstract>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    construct::DelCopy>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, funny::F>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, funny::F[1]>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    funny::F[1][2]>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    funny::F[1][2][3]>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, funny::F[6]>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, funny::A>(false), \"\");\n-  static_assert(noexcept(std::swap(std::declval<funny::A&>(),\n-                                   std::declval<funny::A&>())), \"\");\n-  static_assert(test_property<__is_nothrow_swappable, funny::A[3]>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    ns1::SwapThrow>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    ns1::SwapThrow[1]>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    ns1::SwapThrow[3][2]>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    ns1::SwapThrow[2][3][4]>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    ns2::SwapThrow>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    ns2::SwapThrow[1]>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    ns2::SwapThrow[2][3][4]>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    ns5::SwapThrow>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    ns5::SwapThrow[1]>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-    ns5::SwapThrow[2][3][4]>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-\t\tThrowCopyConsClass>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-\t\tstd::pair<ThrowCopyConsClass, ThrowCopyConsClass>>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-\t\tstd::tuple<ThrowCopyConsClass>>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-\t\tstd::array<ThrowCopyConsClass, 1>>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-\t\tstd::queue<ThrowCopyConsClass>>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-\t\tstd::priority_queue<ThrowCopyConsClass>>(false), \"\");\n-  static_assert(test_property<__is_nothrow_swappable,\n-\t\tstd::stack<ThrowCopyConsClass>>(false), \"\");\n-}\n+#define test_std_is_nothrow_swappable\n+#include \"./value.h\""}, {"sha": "1b374f0bade1ea232818e16840b925f800577a02", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_swappable/value.h", "status": "added", "additions": 297, "deletions": 0, "changes": 297, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fvalue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fvalue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fvalue.h?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -0,0 +1,297 @@\n+// Copyright (C) 2015-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_tr1.h>\n+#include <utility>\n+#include <array>\n+#include <tuple>\n+#include <queue>\n+#include <stack>\n+\n+#if defined(test_std_is_nothrow_swappable)\n+#  ifndef __cpp_lib_is_swappable\n+#   error \"Feature-test macro for is_nothrow_swappable missing\"\n+#  elif __cpp_lib_is_swappable != 201603\n+#   error \"Feature-test macro for is_nothrow_swappable has wrong value\"\n+#  endif\n+// Test std::is_nothrow_swappable:\n+template<class T>\n+using is_nothrow_swappable = std::is_nothrow_swappable<T>;\n+#elif defined(test_std_is_nothrow_swappable_ext)\n+// Test our __is_nothrow_swappable extension:\n+template<class T>\n+using is_nothrow_swappable = std::__is_nothrow_swappable<T>;\n+#else\n+# error \"Either test_std_is_nothrow_swappable or \" \\\n+        \"test_std_is_nothrow_swappable_ext need to be defined\"\n+#endif\n+\n+namespace funny {\n+  struct F {};\n+  void swap(F&, F&) = delete;\n+  void swap(F(&)[5], F(&)[5]) noexcept;\n+  void swap(F(&)[6], F(&)[6]);\n+  struct A {};\n+  void swap(A&, A&) noexcept(false);\n+}\n+namespace std {\n+  template<>\n+  void swap<funny::A>(funny::A&, funny::A&) noexcept\n+  {\n+  }\n+\n+  template<>\n+  void swap<funny::A>(funny::A(&)[3], funny::A(&)[3]) noexcept(false)\n+  {\n+  }\n+}\n+namespace ns1 {\n+  struct SwapThrow {};\n+  void swap(SwapThrow&, SwapThrow&);\n+  void swap(SwapThrow(&)[3], SwapThrow(&)[3]) noexcept;\n+}\n+\n+namespace ns2 {\n+  struct SwapThrow {\n+    SwapThrow() noexcept = default;\n+    SwapThrow(const SwapThrow&) noexcept(false);\n+    SwapThrow& operator=(const SwapThrow&) noexcept(false);\n+  };\n+}\n+\n+namespace ns3 {\n+  struct SwapNoThrow {\n+    SwapNoThrow() noexcept = default;\n+    SwapNoThrow(const SwapNoThrow&) noexcept(false);\n+    SwapNoThrow& operator =(const SwapNoThrow&) noexcept(false);\n+  };\n+  void swap(SwapNoThrow&, SwapNoThrow&) noexcept;\n+}\n+\n+namespace ns4 {\n+  struct SwapNoThrow {};\n+}\n+\n+namespace ns5 {\n+  struct SwapThrow {\n+    SwapThrow() noexcept = default;\n+    SwapThrow(SwapThrow&&) noexcept;\n+    SwapThrow& operator=(const SwapThrow&) noexcept(false);\n+  };\n+}\n+\n+namespace comps {\n+  struct CompareNoThrowCopyable\n+  {\n+    template<class T>\n+    bool operator()(const T&, const T&) const\n+    { return false; }\n+  };\n+\n+  struct CompareNonCopyable\n+  {\n+    CompareNonCopyable() = default;\n+    CompareNonCopyable(const CompareNonCopyable&) = delete;\n+    CompareNonCopyable& operator=(const CompareNonCopyable&) noexcept;\n+\n+    template<class T>\n+    bool operator()(const T&, const T&) const\n+    { return false; }\n+  };\n+\n+  struct CompareThrowCopyable\n+  {\n+    CompareThrowCopyable() = default;\n+    CompareThrowCopyable(const CompareThrowCopyable&) noexcept(false);\n+    CompareThrowCopyable& operator=(const CompareThrowCopyable&);\n+\n+    template<class T>\n+    bool operator()(const T&, const T&) const\n+    { return false; }\n+  };\n+}\n+\n+void test01()\n+{\n+  using namespace __gnu_test;\n+  // Positive tests.\n+  static_assert(test_property<is_nothrow_swappable, int>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable, bool>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    decltype(nullptr)>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable, int&>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable, int&&>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable, int[1]>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable, int[1][2]>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable, int[1][2][3]>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable, funny::F[5]>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable, EnumType>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable, PODType>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable, UnionType>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    construct::SE>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    construct::Empty>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable, void*>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable, void(*)()>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable, int const*>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable, ClassType*>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    int ClassType::*>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    void (ClassType::*)()>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    int (ClassType::*)() const volatile>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    ns1::SwapThrow[3]>(true), \"\");\n+  static_assert(!noexcept(std::swap(std::declval<ns1::SwapThrow(&)[3]>(),\n+                                    std::declval<ns1::SwapThrow(&)[3]>())),\n+                                    \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        ns3::SwapNoThrow>(true), \"\");\n+  static_assert(!noexcept(std::swap(std::declval<ns3::SwapNoThrow&>(),\n+                                    std::declval<ns3::SwapNoThrow&>())), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        ns3::SwapNoThrow[1]>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        ns3::SwapNoThrow[3]>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        ns3::SwapNoThrow[2][3][4]>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        ns4::SwapNoThrow>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        ns4::SwapNoThrow[1]>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        ns4::SwapNoThrow[3]>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        ns4::SwapNoThrow[2][3][4]>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        std::pair<int, int>>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        std::pair<int, int>[1]>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        std::pair<int, int>[1][2]>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        std::tuple<int>>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        std::tuple<int>[1]>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        std::tuple<int>[1][2]>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        std::tuple<>>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        std::tuple<>[1]>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        std::tuple<>[1][2]>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        std::array<int, 1>>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        std::array<int, 0>>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        std::array<construct::DelCopy, 0>>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        std::array<ns1::SwapThrow, 0>>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        std::queue<int>>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        std::priority_queue<int>>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        std::stack<int>>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        std::priority_queue<int, std::vector<int>,\n+        comps::CompareNoThrowCopyable>>(true), \"\");\n+\n+  // Negative tests.\n+  static_assert(test_property<is_nothrow_swappable, void>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable, const void>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable, void()>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    void() const>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    void() volatile>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    void() const volatile>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable, const int>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable, const bool>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    const int[1]>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    const int[1][2]>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    const int[1][2][3]>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable, int[]>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable, const int[]>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable, int[][1]>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    const funny::F[5]>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    construct::Abstract>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    construct::DelCopy>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable, funny::F>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable, funny::F[1]>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    funny::F[1][2]>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    funny::F[1][2][3]>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable, funny::F[6]>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable, funny::A>(false), \"\");\n+  static_assert(noexcept(std::swap(std::declval<funny::A&>(),\n+                                   std::declval<funny::A&>())), \"\");\n+  static_assert(test_property<is_nothrow_swappable, funny::A[3]>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    ns1::SwapThrow>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    ns1::SwapThrow[1]>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    ns1::SwapThrow[3][2]>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    ns1::SwapThrow[2][3][4]>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    ns2::SwapThrow>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    ns2::SwapThrow[1]>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    ns2::SwapThrow[2][3][4]>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    ns5::SwapThrow>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    ns5::SwapThrow[1]>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+    ns5::SwapThrow[2][3][4]>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+\t\tThrowCopyConsClass>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+\t\tstd::pair<ThrowCopyConsClass, ThrowCopyConsClass>>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+\t\tstd::tuple<ThrowCopyConsClass>>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+\t\tstd::array<ThrowCopyConsClass, 1>>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+\t\tstd::queue<ThrowCopyConsClass>>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+\t\tstd::priority_queue<ThrowCopyConsClass>>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+\t\tstd::stack<ThrowCopyConsClass>>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        std::priority_queue<int, std::vector<int>,\n+        comps::CompareNonCopyable>>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable,\n+        std::priority_queue<int, std::vector<int>,\n+        comps::CompareThrowCopyable>>(false), \"\");\n+}"}, {"sha": "daf5a915970bf771430d5fa70e9fb6b017034d1e", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_swappable/value_ext.cc", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fvalue_ext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fvalue_ext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable%2Fvalue_ext.cc?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -0,0 +1,22 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#define test_std_is_nothrow_swappable_ext\n+#include \"./value.h\""}, {"sha": "e6c8effb1a9cdec7f293efef7cf767a2a4780739", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_swappable_with/requirements/explicit_instantiation.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable_with%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable_with%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable_with%2Frequirements%2Fexplicit_instantiation.cc?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -0,0 +1,36 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+#ifndef __cpp_lib_is_swappable\n+# error \"Feature-test macro for is_nothrow_swappable_with missing\"\n+#elif __cpp_lib_is_swappable != 201603\n+# error \"Feature-test macro for is_nothrow_swappable_with has wrong value\"\n+#endif\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  typedef double test_type_2;\n+  template struct is_nothrow_swappable_with<test_type, test_type>;\n+  template struct is_nothrow_swappable_with<test_type, test_type_2>;\n+  template struct is_nothrow_swappable_with<test_type_2, test_type_2>;\n+}"}, {"sha": "2a68a8315e45a56258235ffea7f2554c012b8ab8", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_swappable_with/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable_with%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable_with%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable_with%2Frequirements%2Ftypedefs.cc?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+#ifndef __cpp_lib_is_swappable\n+# error \"Feature-test macro for is_nothrow_swappable_with missing\"\n+#elif __cpp_lib_is_swappable != 201603\n+# error \"Feature-test macro for is_nothrow_swappable_with has wrong value\"\n+#endif\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_nothrow_swappable_with<int, int>   test_type;\n+  typedef test_type::value_type                      value_type;\n+  typedef test_type::type                            type;\n+  typedef test_type::type::value_type                type_value_type;\n+  typedef test_type::type::type                      type_type;\n+}"}, {"sha": "f7cd254a4728cc199c5ad9f0fdba70de82e32711", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_swappable_with/value.cc", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable_with%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable_with%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_swappable_with%2Fvalue.cc?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -0,0 +1,145 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_tr1.h>\n+\n+#ifndef __cpp_lib_is_swappable\n+# error \"Feature-test macro for is_nothrow_swappable_with missing\"\n+#elif __cpp_lib_is_swappable != 201603\n+# error \"Feature-test macro for is_nothrow_swappable_with has wrong value\"\n+#endif\n+\n+namespace funny {\n+  struct T0 {};\n+\n+  void swap(T0, T0) noexcept;\n+\n+  struct T1\n+  {\n+    friend void swap(T1, T1) noexcept;\n+  };\n+\n+  struct T2 {};\n+  struct T3 {};\n+\n+  void swap(T2, T3) noexcept;\n+  void swap(T3, T2) noexcept;\n+\n+  struct T4 { operator T0() const noexcept; };\n+\n+  struct F0 {};\n+\n+  void swap(F0, F0) = delete;\n+\n+  struct F1 {};\n+\n+  void swap(F1, F1);\n+\n+  struct F2 {};\n+\n+  void swap(F0, F2) noexcept;\n+  void swap(F2, F0);\n+\n+  struct F3\n+  {\n+    friend void swap(F3, F3) = delete;\n+  };\n+\n+  struct F4\n+  {\n+    friend void swap(F4, F4);\n+  };\n+\n+  struct F5 { operator T0() const; };\n+\n+  struct BoolLike {};\n+\n+  void swap(BoolLike, bool&) noexcept;\n+  void swap(bool&, BoolLike) noexcept;\n+\n+  struct BoolLikeErr {};\n+\n+  void swap(BoolLikeErr, bool&);\n+  void swap(bool&, BoolLikeErr) noexcept;\n+}\n+\n+void test01()\n+{\n+  using std::is_nothrow_swappable_with;\n+  using namespace __gnu_test;\n+  // Positive tests.\n+  static_assert(test_property<is_nothrow_swappable_with, int&, int&>(true),\n+    \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::T0,\n+    funny::T0>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::T0,\n+    const funny::T0>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::T1,\n+    funny::T1>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::T1,\n+    const funny::T1>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::T2,\n+    funny::T3>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::T3,\n+    funny::T2>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::T0,\n+    funny::T4>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::T4,\n+    funny::T0>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::BoolLike,\n+    bool&>(true), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, const funny::BoolLike,\n+    bool&>(true), \"\");\n+\n+  // Negative tests.\n+  static_assert(test_property<is_nothrow_swappable_with, const int&,\n+    const int&>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, int&,\n+    unsigned&>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::F0,\n+    funny::F0>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::F0,\n+    const funny::F0>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::F1,\n+    funny::F1>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::F1,\n+    const funny::F1>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::F0,\n+    funny::F2>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::F2,\n+    funny::F0>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::F3,\n+    funny::F3>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::F3,\n+    const funny::F3>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::F4,\n+    funny::F4>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::F4,\n+    const funny::F4>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::T0,\n+    funny::F5>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::F5,\n+    funny::T0>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with, funny::BoolLikeErr,\n+    bool&>(false), \"\");\n+  static_assert(test_property<is_nothrow_swappable_with,\n+    const funny::BoolLikeErr, bool&>(false), \"\");\n+}"}, {"sha": "9ba5a525f240759c6385a8b6309ee3a343ad629c", "filename": "libstdc++-v3/testsuite/20_util/is_swappable/requirements/explicit_instantiation.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Frequirements%2Fexplicit_instantiation.cc?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -1,7 +1,7 @@\n-// { dg-options \"-std=gnu++11\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do compile }\n \n-// Copyright (C) 2015 Free Software Foundation, Inc.\n+// Copyright (C) 2015-2016 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,8 +20,14 @@\n \n #include <type_traits>\n \n+#ifndef __cpp_lib_is_swappable\n+# error \"Feature-test macro for is_swappable missing\"\n+#elif __cpp_lib_is_swappable != 201603\n+# error \"Feature-test macro for is_swappable has wrong value\"\n+#endif\n+\n namespace std\n {\n   typedef short test_type;\n-  template struct std::__is_swappable<test_type>;\n+  template struct is_swappable<test_type>;\n }"}, {"sha": "7afe317160832ba1c51847455a393a050aad0bc9", "filename": "libstdc++-v3/testsuite/20_util/is_swappable/requirements/explicit_instantiation_ext.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Frequirements%2Fexplicit_instantiation_ext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Frequirements%2Fexplicit_instantiation_ext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Frequirements%2Fexplicit_instantiation_ext.cc?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct __is_swappable<test_type>;\n+}"}, {"sha": "feed51affcb43ac423106fe6d2359635a916a0e4", "filename": "libstdc++-v3/testsuite/20_util/is_swappable/requirements/typedefs.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Frequirements%2Ftypedefs.cc?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -1,7 +1,7 @@\n-// { dg-options \"-std=gnu++11\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do compile }\n \n-// Copyright (C) 2015 Free Software Foundation, Inc.\n+// Copyright (C) 2015-2016 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,10 +20,16 @@\n \n #include <type_traits>\n \n+#ifndef __cpp_lib_is_swappable\n+# error \"Feature-test macro for is_swappable missing\"\n+#elif __cpp_lib_is_swappable != 201603\n+# error \"Feature-test macro for is_swappable has wrong value\"\n+#endif\n+\n void test01()\n {\n   // Check for required typedefs\n-  typedef std::__is_swappable<int>          test_type;\n+  typedef std::is_swappable<int>            test_type;\n   typedef test_type::value_type             value_type;\n   typedef test_type::type                   type;\n   typedef test_type::type::value_type       type_value_type;"}, {"sha": "8b697e6ecb3c3ce9d17e9169ff9a63ab88e8bdf0", "filename": "libstdc++-v3/testsuite/20_util/is_swappable/requirements/typedefs_ext.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Frequirements%2Ftypedefs_ext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Frequirements%2Ftypedefs_ext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Frequirements%2Ftypedefs_ext.cc?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::__is_swappable<int>          test_type;\n+  typedef test_type::value_type             value_type;\n+  typedef test_type::type                   type;\n+  typedef test_type::type::value_type       type_value_type;\n+  typedef test_type::type::type             type_type;\n+}"}, {"sha": "eb3a1d2b7a1593c3375a30c47ba6a8082403f679", "filename": "libstdc++-v3/testsuite/20_util/is_swappable/value.cc", "status": "modified", "additions": 4, "deletions": 167, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Fvalue.cc?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -1,7 +1,7 @@\n-// { dg-options \"-std=gnu++11\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do compile }\n \n-// Copyright (C) 2015 Free Software Foundation, Inc.\n+// Copyright (C) 2015-2016 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,168 +18,5 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-#include <type_traits>\n-#include <testsuite_tr1.h>\n-#include <utility>\n-#include <array>\n-#include <tuple>\n-#include <queue>\n-#include <stack>\n-\n-namespace funny {\n-  struct F {};\n-  void swap(F&, F&) = delete;\n-  void swap(F(&)[5], F(&)[5]);\n-\n-  struct F2\n-  {\n-    friend void swap(F2&, F2&) = delete;\n-  };\n-\n-  struct F3\n-  {\n-    friend void swap(F3&, F3) {}\n-  };\n-}\n-void test01()\n-{\n-  using std::__is_swappable;\n-  using namespace __gnu_test;\n-  // Positive tests.\n-  static_assert(test_property<__is_swappable, int>(true), \"\");\n-  static_assert(test_property<__is_swappable, bool>(true), \"\");\n-  static_assert(test_property<__is_swappable, decltype(nullptr)>(true), \"\");\n-  static_assert(test_property<__is_swappable, int&>(true), \"\");\n-  static_assert(test_property<__is_swappable, int&&>(true), \"\");\n-  static_assert(test_property<__is_swappable, int[1]>(true), \"\");\n-  static_assert(test_property<__is_swappable, int[1][2]>(true), \"\");\n-  static_assert(test_property<__is_swappable, int[1][2][3]>(true), \"\");\n-  static_assert(test_property<__is_swappable, int(&)[1]>(true), \"\");\n-  static_assert(test_property<__is_swappable, funny::F[5]>(true), \"\");\n-  static_assert(test_property<__is_swappable, funny::F3>(true), \"\");\n-  static_assert(test_property<__is_swappable, funny::F3[1]>(true), \"\");\n-  static_assert(test_property<__is_swappable, funny::F3[1][2]>(true), \"\");\n-  static_assert(test_property<__is_swappable, funny::F3[1][2][3]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-    ThrowCopyConsClass>(true), \"\");\n-  static_assert(test_property<__is_swappable, EnumType>(true), \"\");\n-  static_assert(test_property<__is_swappable, PODType>(true), \"\");\n-  static_assert(test_property<__is_swappable, UnionType>(true), \"\");\n-  static_assert(test_property<__is_swappable, construct::SE>(true), \"\");\n-  static_assert(test_property<__is_swappable, construct::Empty>(true), \"\");\n-  static_assert(test_property<__is_swappable, void*>(true), \"\");\n-  static_assert(test_property<__is_swappable, int const*>(true), \"\");\n-  static_assert(test_property<__is_swappable, ClassType*>(true), \"\");\n-  static_assert(test_property<__is_swappable, int ClassType::*>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-    void (ClassType::*)()>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-    construct::Nontrivial>(true), \"\");\n-  static_assert(test_property<__is_swappable, construct::Any>(true), \"\");\n-  static_assert(test_property<__is_swappable, construct::nAny>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::pair<int, int>>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::pair<int, int>[1]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::pair<int, int>[1][2]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::pair<int, int>[1][2][3]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::pair<construct::Nontrivial, construct::Nontrivial>>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::tuple<int>>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::tuple<int>[1]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::tuple<int>[1][2]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::tuple<int>[1][2][3]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::tuple<>>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::tuple<>[1]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::tuple<>[1][2]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::tuple<>[1][2][3]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::tuple<construct::Nontrivial>>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::array<int, 1>>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::array<int, 1>[1]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::array<int, 1>[1][2]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::array<int, 1>[1][2][3]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::array<construct::Nontrivial, 1>>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::queue<int>>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::queue<int>[1]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::queue<int>[1][2]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::queue<int>[1][2][3]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::queue<construct::Nontrivial>>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::priority_queue<int>>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::priority_queue<int>[1]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::priority_queue<int>[1][2]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::priority_queue<int>[1][2][3]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::priority_queue<construct::Nontrivial>>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::stack<int>>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::stack<int>[1]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::stack<int>[1][2]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::stack<int>[1][2][3]>(true), \"\");\n-  static_assert(test_property<__is_swappable,\n-\t\tstd::stack<construct::Nontrivial>>(true), \"\");\n-  // Negative tests.\n-  static_assert(test_property<__is_swappable, void>(false), \"\");\n-  static_assert(test_property<__is_swappable, const void>(false), \"\");\n-  static_assert(test_property<__is_swappable, void()>(false), \"\");\n-  static_assert(test_property<__is_swappable, void() const>(false), \"\");\n-  static_assert(test_property<__is_swappable, void() volatile>(false), \"\");\n-  static_assert(test_property<__is_swappable,\n-    void() const volatile>(false), \"\");\n-  static_assert(test_property<__is_swappable, const int>(false), \"\");\n-  static_assert(test_property<__is_swappable, const bool>(false), \"\");\n-  static_assert(test_property<__is_swappable, int[]>(false), \"\");\n-  static_assert(test_property<__is_swappable, const int[]>(false), \"\");\n-  static_assert(test_property<__is_swappable, int[][1]>(false), \"\");\n-  static_assert(test_property<__is_swappable, const int[1]>(false), \"\");\n-  static_assert(test_property<__is_swappable, const int[1][2]>(false), \"\");\n-  static_assert(test_property<__is_swappable, const int[1][2][3]>(false), \"\");\n-  static_assert(test_property<__is_swappable, construct::DelCopy>(false), \"\");\n-  static_assert(test_property<__is_swappable,\n-    construct::Abstract>(false), \"\");\n-  static_assert(test_property<__is_swappable,\n-    construct::NontrivialUnion>(false), \"\");\n-  static_assert(test_property<__is_swappable, funny::F>(false), \"\");\n-  static_assert(test_property<__is_swappable, funny::F[1]>(false), \"\");\n-  static_assert(test_property<__is_swappable, funny::F[1][2]>(false), \"\");\n-  static_assert(test_property<__is_swappable, funny::F[1][2][3]>(false), \"\");\n-  static_assert(test_property<__is_swappable, funny::F[4]>(false), \"\");\n-  static_assert(test_property<__is_swappable, construct::DelCopy>(false), \"\");\n-  static_assert(test_property<__is_swappable,\n-     DeletedCopyAssignClass>(false), \"\");\n-  static_assert(test_property<__is_swappable,\n-     DeletedMoveAssignClass>(false), \"\");\n-  static_assert(test_property<__is_swappable, funny::F2>(false), \"\");\n-  static_assert(test_property<__is_swappable, funny::F2[1]>(false), \"\");\n-  static_assert(test_property<__is_swappable, funny::F2[1][2]>(false), \"\");\n-  static_assert(test_property<__is_swappable, funny::F2[1][2][3]>(false), \"\");\n-  static_assert(test_property<__is_swappable, funny::F2[4]>(false), \"\");\n-  static_assert(test_property<__is_swappable, funny::F2[5]>(false), \"\");\n-}\n+#define test_std_is_swappable\n+#include \"./value.h\""}, {"sha": "0e924d1f32f7085a85e700d80bacce04b74410f7", "filename": "libstdc++-v3/testsuite/20_util/is_swappable/value.h", "status": "added", "additions": 203, "deletions": 0, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Fvalue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Fvalue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Fvalue.h?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -0,0 +1,203 @@\n+// Copyright (C) 2015-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_tr1.h>\n+#include <utility>\n+#include <array>\n+#include <tuple>\n+#include <queue>\n+#include <stack>\n+\n+#if defined(test_std_is_swappable)\n+#  ifndef __cpp_lib_is_swappable\n+#   error \"Feature-test macro for is_swappable missing\"\n+#  elif __cpp_lib_is_swappable != 201603\n+#   error \"Feature-test macro for is_swappable has wrong value\"\n+#  endif\n+// Test std::is_swappable:\n+template<class T>\n+using is_swappable = std::is_swappable<T>;\n+#elif defined(test_std_is_swappable_ext)\n+// Test our __is_swappable extension:\n+template<class T>\n+using is_swappable = std::__is_swappable<T>;\n+#else\n+# error \"Either test_std_is_swappable or test_std_is_swappable_ext\" \\\n+        \"need to be defined\"\n+#endif\n+\n+namespace funny {\n+  struct F {};\n+  void swap(F&, F&) = delete;\n+  void swap(F(&)[5], F(&)[5]);\n+\n+  struct F2\n+  {\n+    friend void swap(F2&, F2&) = delete;\n+  };\n+\n+  struct F3\n+  {\n+    friend void swap(F3&, F3) {}\n+  };\n+}\n+void test01()\n+{\n+  using namespace __gnu_test;\n+  // Positive tests.\n+  static_assert(test_property<is_swappable, int>(true), \"\");\n+  static_assert(test_property<is_swappable, bool>(true), \"\");\n+  static_assert(test_property<is_swappable, decltype(nullptr)>(true), \"\");\n+  static_assert(test_property<is_swappable, int&>(true), \"\");\n+  static_assert(test_property<is_swappable, int&&>(true), \"\");\n+  static_assert(test_property<is_swappable, int[1]>(true), \"\");\n+  static_assert(test_property<is_swappable, int[1][2]>(true), \"\");\n+  static_assert(test_property<is_swappable, int[1][2][3]>(true), \"\");\n+  static_assert(test_property<is_swappable, int(&)[1]>(true), \"\");\n+  static_assert(test_property<is_swappable, funny::F[5]>(true), \"\");\n+  static_assert(test_property<is_swappable, funny::F3>(true), \"\");\n+  static_assert(test_property<is_swappable, funny::F3[1]>(true), \"\");\n+  static_assert(test_property<is_swappable, funny::F3[1][2]>(true), \"\");\n+  static_assert(test_property<is_swappable, funny::F3[1][2][3]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+    ThrowCopyConsClass>(true), \"\");\n+  static_assert(test_property<is_swappable, EnumType>(true), \"\");\n+  static_assert(test_property<is_swappable, PODType>(true), \"\");\n+  static_assert(test_property<is_swappable, UnionType>(true), \"\");\n+  static_assert(test_property<is_swappable, construct::SE>(true), \"\");\n+  static_assert(test_property<is_swappable, construct::Empty>(true), \"\");\n+  static_assert(test_property<is_swappable, void*>(true), \"\");\n+  static_assert(test_property<is_swappable, int const*>(true), \"\");\n+  static_assert(test_property<is_swappable, ClassType*>(true), \"\");\n+  static_assert(test_property<is_swappable, int ClassType::*>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+    void (ClassType::*)()>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+    construct::Nontrivial>(true), \"\");\n+  static_assert(test_property<is_swappable, construct::Any>(true), \"\");\n+  static_assert(test_property<is_swappable, construct::nAny>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::pair<int, int>>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::pair<int, int>[1]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::pair<int, int>[1][2]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::pair<int, int>[1][2][3]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::pair<construct::Nontrivial, construct::Nontrivial>>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::tuple<int>>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::tuple<int>[1]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::tuple<int>[1][2]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::tuple<int>[1][2][3]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::tuple<>>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::tuple<>[1]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::tuple<>[1][2]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::tuple<>[1][2][3]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::tuple<construct::Nontrivial>>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::array<int, 1>>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::array<int, 1>[1]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::array<int, 1>[1][2]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::array<int, 1>[1][2][3]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::array<construct::Nontrivial, 1>>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+        std::array<int, 0>>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+        std::array<construct::DelCopy, 0>>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::queue<int>>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::queue<int>[1]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::queue<int>[1][2]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::queue<int>[1][2][3]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::queue<construct::Nontrivial>>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::priority_queue<int>>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::priority_queue<int>[1]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::priority_queue<int>[1][2]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::priority_queue<int>[1][2][3]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::priority_queue<construct::Nontrivial>>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::stack<int>>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::stack<int>[1]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::stack<int>[1][2]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::stack<int>[1][2][3]>(true), \"\");\n+  static_assert(test_property<is_swappable,\n+\t\tstd::stack<construct::Nontrivial>>(true), \"\");\n+  // Negative tests.\n+  static_assert(test_property<is_swappable, void>(false), \"\");\n+  static_assert(test_property<is_swappable, const void>(false), \"\");\n+  static_assert(test_property<is_swappable, void()>(false), \"\");\n+  static_assert(test_property<is_swappable, void() const>(false), \"\");\n+  static_assert(test_property<is_swappable, void() volatile>(false), \"\");\n+  static_assert(test_property<is_swappable,\n+    void() const volatile>(false), \"\");\n+  static_assert(test_property<is_swappable, const int>(false), \"\");\n+  static_assert(test_property<is_swappable, const bool>(false), \"\");\n+  static_assert(test_property<is_swappable, int[]>(false), \"\");\n+  static_assert(test_property<is_swappable, const int[]>(false), \"\");\n+  static_assert(test_property<is_swappable, int[][1]>(false), \"\");\n+  static_assert(test_property<is_swappable, const int[1]>(false), \"\");\n+  static_assert(test_property<is_swappable, const int[1][2]>(false), \"\");\n+  static_assert(test_property<is_swappable, const int[1][2][3]>(false), \"\");\n+  static_assert(test_property<is_swappable, construct::DelCopy>(false), \"\");\n+  static_assert(test_property<is_swappable,\n+    construct::Abstract>(false), \"\");\n+  static_assert(test_property<is_swappable,\n+    construct::NontrivialUnion>(false), \"\");\n+  static_assert(test_property<is_swappable, funny::F>(false), \"\");\n+  static_assert(test_property<is_swappable, funny::F[1]>(false), \"\");\n+  static_assert(test_property<is_swappable, funny::F[1][2]>(false), \"\");\n+  static_assert(test_property<is_swappable, funny::F[1][2][3]>(false), \"\");\n+  static_assert(test_property<is_swappable, funny::F[4]>(false), \"\");\n+  static_assert(test_property<is_swappable, construct::DelCopy>(false), \"\");\n+  static_assert(test_property<is_swappable,\n+     DeletedCopyAssignClass>(false), \"\");\n+  static_assert(test_property<is_swappable,\n+     DeletedMoveAssignClass>(false), \"\");\n+  static_assert(test_property<is_swappable, funny::F2>(false), \"\");\n+  static_assert(test_property<is_swappable, funny::F2[1]>(false), \"\");\n+  static_assert(test_property<is_swappable, funny::F2[1][2]>(false), \"\");\n+  static_assert(test_property<is_swappable, funny::F2[1][2][3]>(false), \"\");\n+  static_assert(test_property<is_swappable, funny::F2[4]>(false), \"\");\n+  static_assert(test_property<is_swappable, funny::F2[5]>(false), \"\");\n+}"}, {"sha": "c7e3384d35e97cf0164d6d59722b06021f160496", "filename": "libstdc++-v3/testsuite/20_util/is_swappable/value_ext.cc", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Fvalue_ext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Fvalue_ext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable%2Fvalue_ext.cc?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -0,0 +1,22 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#define test_std_is_swappable_ext\n+#include \"./value.h\""}, {"sha": "47fb3d56a1bf12b6902ec811300fecf1eb60c269", "filename": "libstdc++-v3/testsuite/20_util/is_swappable_with/requirements/explicit_instantiation.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable_with%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable_with%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable_with%2Frequirements%2Fexplicit_instantiation.cc?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -0,0 +1,36 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+#ifndef __cpp_lib_is_swappable\n+# error \"Feature-test macro for is_swappable_with missing\"\n+#elif __cpp_lib_is_swappable != 201603\n+# error \"Feature-test macro for is_swappable_with has wrong value\"\n+#endif\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  typedef double test_type_2;\n+  template struct is_swappable_with<test_type, test_type>;\n+  template struct is_swappable_with<test_type, test_type_2>;\n+  template struct is_swappable_with<test_type_2, test_type_2>;\n+}"}, {"sha": "f79358377754e2ce82367f8beb2e9d1876814857", "filename": "libstdc++-v3/testsuite/20_util/is_swappable_with/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable_with%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable_with%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable_with%2Frequirements%2Ftypedefs.cc?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+#ifndef __cpp_lib_is_swappable\n+# error \"Feature-test macro for is_swappable_with missing\"\n+#elif __cpp_lib_is_swappable != 201603\n+# error \"Feature-test macro for is_swappable_with has wrong value\"\n+#endif\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_swappable_with<int, int>  test_type;\n+  typedef test_type::value_type             value_type;\n+  typedef test_type::type                   type;\n+  typedef test_type::type::value_type       type_value_type;\n+  typedef test_type::type::type             type_type;\n+}"}, {"sha": "be7d062b3311f94ff355c57a37f5cb5a6e2993b7", "filename": "libstdc++-v3/testsuite/20_util/is_swappable_with/value.cc", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable_with%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable_with%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_swappable_with%2Fvalue.cc?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -0,0 +1,113 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_tr1.h>\n+\n+#ifndef __cpp_lib_is_swappable\n+# error \"Feature-test macro for is_swappable_with missing\"\n+#elif __cpp_lib_is_swappable != 201603\n+# error \"Feature-test macro for is_swappable_with has wrong value\"\n+#endif\n+\n+namespace funny {\n+  struct T0 {};\n+\n+  void swap(T0, T0);\n+\n+  struct T1 {};\n+  struct T2 {};\n+\n+  void swap(T1, T2);\n+  void swap(T2, T1);\n+\n+  struct BoolLike {};\n+\n+  void swap(BoolLike, bool&);\n+  void swap(bool&, BoolLike);\n+\n+  struct F0 {};\n+\n+  void swap(F0, F0) = delete;\n+\n+  struct F1 {};\n+\n+  void swap(F0, F1) = delete;\n+  void swap(F1, F0) = delete;\n+\n+  struct F2 {};\n+  struct F3 {};\n+\n+  void swap(F2, F3);\n+  void swap(F3, F2) = delete;\n+\n+  struct F4\n+  {\n+    friend void swap(F4, F4) = delete;\n+  };\n+}\n+\n+void test01()\n+{\n+  using std::is_swappable_with;\n+  using namespace __gnu_test;\n+  // Positive tests.\n+  static_assert(test_property<is_swappable_with, int&, int&>(true), \"\");\n+  static_assert(test_property<is_swappable_with, funny::T0,\n+    funny::T0>(true), \"\");\n+  static_assert(test_property<is_swappable_with, funny::T0,\n+    const funny::T0>(true), \"\");\n+  static_assert(test_property<is_swappable_with, funny::T1,\n+    funny::T2>(true), \"\");\n+  static_assert(test_property<is_swappable_with, funny::T2,\n+    funny::T1>(true), \"\");\n+  static_assert(test_property<is_swappable_with, funny::BoolLike,\n+    bool&>(true), \"\");\n+  static_assert(test_property<is_swappable_with, const funny::BoolLike,\n+    bool&>(true), \"\");\n+\n+  // Negative tests.\n+  static_assert(test_property<is_swappable_with, int, int>(false), \"\");\n+  static_assert(test_property<is_swappable_with, int&, unsigned&>(false), \"\");\n+  static_assert(test_property<is_swappable_with, const int&,\n+    const int&>(false), \"\");\n+  static_assert(test_property<is_swappable_with, funny::F0,\n+    funny::F0>(false), \"\");\n+  static_assert(test_property<is_swappable_with, funny::F0,\n+    const funny::F0>(false), \"\");\n+  static_assert(test_property<is_swappable_with, funny::T0,\n+    funny::T1>(false), \"\");\n+  static_assert(test_property<is_swappable_with, funny::F0,\n+    funny::F1>(false), \"\");\n+  static_assert(test_property<is_swappable_with, funny::F0,\n+    const funny::F1>(false), \"\");\n+  static_assert(test_property<is_swappable_with, const funny::F0,\n+    funny::F1>(false), \"\");\n+  static_assert(test_property<is_swappable_with, funny::F2,\n+    funny::F3>(false), \"\");\n+  static_assert(test_property<is_swappable_with, funny::F2,\n+    const funny::F3>(false), \"\");\n+  static_assert(test_property<is_swappable_with, const funny::F2,\n+    funny::F3>(false), \"\");\n+  static_assert(test_property<is_swappable_with, funny::F4,\n+    funny::F4>(false), \"\");\n+  static_assert(test_property<is_swappable_with, funny::BoolLike,\n+    funny::BoolLike>(false), \"\");\n+}"}, {"sha": "ad09d41ef5aab42054d52aefc2505239029eb140", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -28,6 +28,6 @@ int n1 = std::get<1>(a);\n int n2 = std::get<1>(std::move(a));\n int n3 = std::get<1>(ca);\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 283 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 292 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 300 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 295 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 304 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 312 }"}, {"sha": "738bf17f735045ce2bcd25dd8b4cf89027a36659", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b9539e2aa811e84847db2deb1adfc288c7157b7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc?ref=6b9539e2aa811e84847db2deb1adfc288c7157b7", "patch": "@@ -23,4 +23,4 @@\n \n typedef std::tuple_element<1, std::array<int, 1>>::type type;\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 331 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 343 }"}]}