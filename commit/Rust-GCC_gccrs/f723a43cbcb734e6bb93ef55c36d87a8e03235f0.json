{"sha": "f723a43cbcb734e6bb93ef55c36d87a8e03235f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcyM2E0M2NiY2I3MzRlNmJiOTNlZjU1YzM2ZDg3YThlMDMyMzVmMA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2016-07-05T09:24:38Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2016-07-05T09:24:38Z"}, "message": "[ARM][testsuite] neon-testgen.ml removal\n\n2016-07-05  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/neon-testgen.ml: Delete.\n\t* config/arm/neon.ml: Delete.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/neon/polytypes.c: Move to ...\n\t* gcc.target/arm/polytypes.c: ... here.\n\t* gcc.target/arm/neon/pr51534.c: Move to ...\n\t* gcc.target/arm/pr51534.c: ... here.\n\t* gcc.target/arm/neon/vect-vcvt.c: Move to ...\n\t* gcc.target/arm/vect-vcvt.c: ... here.\n\t* gcc.target/arm/neon/vect-vcvtq.c: Move to ...\n\t* gcc.target/arm/vect-vcvtq.c: ... here.\n\t* gcc.target/arm/neon/vfp-shift-a2t2.c: Move to ...\n\t* gcc.target/arm/vfp-shift-a2t2.c: ... here.\n\t* gcc.target/arm/neon/vst1Q_laneu64-1.c: Move to ...\n\t* gcc.target/arm/vst1Q_laneu64-1.c: ... here. Fix foo() prototype.\n\t* gcc.target/arm/neon/neon.exp: Delete.\n\t* gcc.target/arm/neon/*.c: Delete.\n\nFrom-SVN: r238000", "tree": {"sha": "7b4cfd34ddf33ab02ccaf902b3bebaf1a1b16048", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b4cfd34ddf33ab02ccaf902b3bebaf1a1b16048"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f723a43cbcb734e6bb93ef55c36d87a8e03235f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f723a43cbcb734e6bb93ef55c36d87a8e03235f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f723a43cbcb734e6bb93ef55c36d87a8e03235f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f723a43cbcb734e6bb93ef55c36d87a8e03235f0/comments", "author": null, "committer": null, "parents": [{"sha": "7915f06abf22e4b08f49a48cc67405611cf6f492", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7915f06abf22e4b08f49a48cc67405611cf6f492", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7915f06abf22e4b08f49a48cc67405611cf6f492"}], "stats": {"total": 41163, "additions": 22, "deletions": 41141}, "files": [{"sha": "93022ad89cbcedf5ba3b645d9a775230bdc2faa0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f723a43cbcb734e6bb93ef55c36d87a8e03235f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f723a43cbcb734e6bb93ef55c36d87a8e03235f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f723a43cbcb734e6bb93ef55c36d87a8e03235f0", "patch": "@@ -1,3 +1,8 @@\n+2016-07-05  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/neon-testgen.ml: Delete.\n+\t* config/arm/neon.ml: Delete.\n+\n 2016-07-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/71739"}, {"sha": "c1af5de5ea1daa6a1354c3afd0b5f156e228094e", "filename": "gcc/config/arm/neon-testgen.ml", "status": "removed", "additions": 0, "deletions": 324, "changes": 324, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Fconfig%2Farm%2Fneon-testgen.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Fconfig%2Farm%2Fneon-testgen.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon-testgen.ml?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,324 +0,0 @@\n-(* Auto-generate ARM Neon intrinsics tests.\n-   Copyright (C) 2006-2016 Free Software Foundation, Inc.\n-   Contributed by CodeSourcery.\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify it under\n-   the terms of the GNU General Public License as published by the Free\n-   Software Foundation; either version 3, or (at your option) any later\n-   version.\n-\n-   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-   for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with GCC; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.\n-\n-   This is an O'Caml program.  The O'Caml compiler is available from:\n-\n-     http://caml.inria.fr/\n-\n-   Or from your favourite OS's friendly packaging system. Tested with version\n-   3.09.2, though other versions will probably work too.\n-\n-   Compile with:\n-     ocamlc -c neon.ml\n-     ocamlc -o neon-testgen neon.cmo neon-testgen.ml\n-\n-   Run with:\n-     cd /path/to/gcc/testsuite/gcc.target/arm/neon\n-     /path/to/neon-testgen\n-*)\n-\n-open Neon\n-\n-type c_type_flags = Pointer | Const\n-\n-(* Open a test source file.  *)\n-let open_test_file dir name =\n-  try\n-    open_out (dir ^ \"/\" ^ name ^ \".c\")\n-  with Sys_error str ->\n-    failwith (\"Could not create test source file \" ^ name ^ \": \" ^ str)\n-\n-(* Emit prologue code to a test source file.  *)\n-let emit_prologue chan test_name effective_target compile_test_optim =\n-  Printf.fprintf chan \"/* Test the `%s' ARM Neon intrinsic.  */\\n\" test_name;\n-  Printf.fprintf chan \"/* This file was autogenerated by neon-testgen.  */\\n\\n\";\n-  Printf.fprintf chan \"/* { dg-do assemble } */\\n\";\n-  Printf.fprintf chan \"/* { dg-require-effective-target %s_ok } */\\n\"\n-                 effective_target;\n-  Printf.fprintf chan \"/* { dg-options \\\"-save-temps %s\\\" } */\\n\" compile_test_optim;\n-  Printf.fprintf chan \"/* { dg-add-options %s } */\\n\" effective_target;\n-  Printf.fprintf chan \"\\n#include \\\"arm_neon.h\\\"\\n\\n\"\n-\n-(* Emit declarations of variables that are going to be passed\n-   to an intrinsic, together with one to take a returned value if needed.  *)\n-let emit_variables chan c_types features spaces =\n-  let emit () =\n-    ignore (\n-      List.fold_left (fun arg_number -> fun (flags, ty) ->\n-                        let pointer_bit =\n-                          if List.mem Pointer flags then \"*\" else \"\"\n-                        in\n-                          (* Const arguments to builtins are directly\n-                             written in as constants.  *)\n-                          if not (List.mem Const flags) then\n-                            Printf.fprintf chan \"%s%s %sarg%d_%s;\\n\"\n-                                           spaces ty pointer_bit arg_number ty;\n-                        arg_number + 1)\n-                     0 (List.tl c_types))\n-  in\n-    match c_types with\n-      (_, return_ty) :: tys ->\n-        if return_ty <> \"void\" then begin\n-          (* The intrinsic returns a value.  We need to do explicit register\n-             allocation for vget_low tests or they fail because of copy\n-             elimination.  *)\n-          ((if List.mem Fixed_vector_reg features then\n-              Printf.fprintf chan \"%sregister %s out_%s asm (\\\"d18\\\");\\n\"\n-                             spaces return_ty return_ty\n-            else if List.mem Fixed_core_reg features then\n-              Printf.fprintf chan \"%sregister %s out_%s asm (\\\"r0\\\");\\n\"\n-                             spaces return_ty return_ty\n-            else\n-              Printf.fprintf chan \"%s%s out_%s;\\n\" spaces return_ty return_ty);\n-\t   emit ())\n-        end else\n-          (* The intrinsic does not return a value.  *)\n-          emit ()\n-    | _ -> assert false\n-\n-(* Emit code to call an intrinsic.  *)\n-let emit_call chan const_valuator c_types name elt_ty =\n-  (if snd (List.hd c_types) <> \"void\" then\n-     Printf.fprintf chan \"  out_%s = \" (snd (List.hd c_types))\n-   else\n-     Printf.fprintf chan \"  \");\n-  Printf.fprintf chan \"%s_%s (\" (intrinsic_name name) (string_of_elt elt_ty);\n-  let print_arg chan arg_number (flags, ty) =\n-    (* If the argument is of const type, then directly write in the\n-       constant now.  *)\n-    if List.mem Const flags then\n-      match const_valuator with\n-        None ->\n-          if List.mem Pointer flags then\n-            Printf.fprintf chan \"0\"\n-          else\n-            Printf.fprintf chan \"1\"\n-      | Some f -> Printf.fprintf chan \"%s\" (string_of_int (f arg_number))\n-    else\n-      Printf.fprintf chan \"arg%d_%s\" arg_number ty\n-  in\n-  let rec print_args arg_number tys =\n-    match tys with\n-      [] -> ()\n-    | [ty] -> print_arg chan arg_number ty\n-    | ty::tys ->\n-      print_arg chan arg_number ty;\n-      Printf.fprintf chan \", \";\n-      print_args (arg_number + 1) tys\n-  in\n-    print_args 0 (List.tl c_types);\n-    Printf.fprintf chan \");\\n\"\n-\n-(* Emit epilogue code to a test source file.  *)\n-let emit_epilogue chan features regexps =\n-  let no_op = List.exists (fun feature -> feature = No_op) features in\n-    Printf.fprintf chan \"}\\n\\n\";\n-    if not no_op then\n-      List.iter (fun regexp ->\n-                  Printf.fprintf chan\n-                    \"/* { dg-final { scan-assembler \\\"%s\\\" } } */\\n\" regexp)\n-                regexps\n-    else\n-      ()\n-    \n-\n-(* Check a list of C types to determine which ones are pointers and which\n-   ones are const.  *)\n-let check_types tys =\n-  let tys' =\n-    List.map (fun ty ->\n-                let len = String.length ty in\n-                  if len > 2 && String.get ty (len - 2) = ' '\n-                             && String.get ty (len - 1) = '*'\n-                  then ([Pointer], String.sub ty 0 (len - 2))\n-                  else ([], ty)) tys\n-  in\n-    List.map (fun (flags, ty) ->\n-                if String.length ty > 6 && String.sub ty 0 6 = \"const \"\n-                then (Const :: flags, String.sub ty 6 ((String.length ty) - 6))\n-                else (flags, ty)) tys'\n-\n-(* Work out what the effective target should be.  *)\n-let effective_target features =\n-  try\n-    match List.find (fun feature ->\n-                       match feature with Requires_feature _ -> true\n-                                        | Requires_arch _ -> true\n-                                        | Requires_FP_bit 1 -> true\n-                                        | _ -> false)\n-                     features with\n-      Requires_feature \"FMA\" -> \"arm_neonv2\"\n-    | Requires_feature \"CRYPTO\" -> \"arm_crypto\"\n-    | Requires_arch 8 -> \"arm_v8_neon\"\n-    | Requires_FP_bit 1 -> \"arm_neon_fp16\"\n-    | _ -> assert false\n-  with Not_found -> \"arm_neon\"\n-\n-(* Work out what the testcase optimization level should be, default to -O0.  *)\n-let compile_test_optim features =\n-  try\n-    match List.find (fun feature ->\n-                       match feature with Compiler_optim _ -> true\n-                                        | _ -> false)\n-                     features with\n-      Compiler_optim opt -> opt\n-    | _ -> assert false\n-  with Not_found -> \"-O0\"\n-\n-(* Given an intrinsic shape, produce a regexp that will match\n-   the right-hand sides of instructions generated by an intrinsic of\n-   that shape.  *)\n-let rec analyze_shape shape =\n-  let rec n_things n thing =\n-    match n with\n-      0 -> []\n-    | n -> thing :: (n_things (n - 1) thing)\n-  in\n-  let rec analyze_shape_elt elt =\n-    match elt with\n-      Dreg -> \"\\\\[dD\\\\]\\\\[0-9\\\\]+\"\n-    | Qreg -> \"\\\\[qQ\\\\]\\\\[0-9\\\\]+\"\n-    | Corereg -> \"\\\\[rR\\\\]\\\\[0-9\\\\]+\"\n-    | Immed -> \"#\\\\[0-9\\\\]+\"\n-    | VecArray (1, elt) ->\n-        let elt_regexp = analyze_shape_elt elt in\n-          \"((\\\\\\\\\\\\{\" ^ elt_regexp ^ \"\\\\\\\\\\\\})|(\" ^ elt_regexp ^ \"))\"\n-    | VecArray (n, elt) ->\n-      let elt_regexp = analyze_shape_elt elt in\n-      let alt1 = elt_regexp ^ \"-\" ^ elt_regexp in\n-      let alt2 = commas (fun x -> x) (n_things n elt_regexp) \"\" in\n-        \"\\\\\\\\\\\\{((\" ^ alt1 ^ \")|(\" ^ alt2 ^ \"))\\\\\\\\\\\\}\"\n-    | (PtrTo elt | CstPtrTo elt) ->\n-      \"\\\\\\\\\\\\[\" ^ (analyze_shape_elt elt) ^ \"\\\\(:\\\\[0-9\\\\]+\\\\)?\\\\\\\\\\\\]\"\n-    | Element_of_dreg -> (analyze_shape_elt Dreg) ^ \"\\\\\\\\\\\\[\\\\[0-9\\\\]+\\\\\\\\\\\\]\"\n-    | Element_of_qreg -> (analyze_shape_elt Qreg) ^ \"\\\\\\\\\\\\[\\\\[0-9\\\\]+\\\\\\\\\\\\]\"\n-    | All_elements_of_dreg -> (analyze_shape_elt Dreg) ^ \"\\\\\\\\\\\\[\\\\\\\\\\\\]\"\n-    | Alternatives (elts) -> \"(\" ^ (String.concat \"|\" (List.map analyze_shape_elt elts)) ^ \")\"\n-  in\n-    match shape with\n-      All (n, elt) -> commas analyze_shape_elt (n_things n elt) \"\"\n-    | Long -> (analyze_shape_elt Qreg) ^ \", \" ^ (analyze_shape_elt Dreg) ^\n-              \", \" ^ (analyze_shape_elt Dreg)\n-    | Long_noreg elt -> (analyze_shape_elt elt) ^ \", \" ^ (analyze_shape_elt elt)\n-    | Wide -> (analyze_shape_elt Qreg) ^ \", \" ^ (analyze_shape_elt Qreg) ^\n-              \", \" ^ (analyze_shape_elt Dreg)\n-    | Wide_noreg elt -> analyze_shape (Long_noreg elt)\n-    | Narrow -> (analyze_shape_elt Dreg) ^ \", \" ^ (analyze_shape_elt Qreg) ^\n-                \", \" ^ (analyze_shape_elt Qreg)\n-    | Use_operands elts -> commas analyze_shape_elt (Array.to_list elts) \"\"\n-    | By_scalar Dreg ->\n-        analyze_shape (Use_operands [| Dreg; Dreg; Element_of_dreg |])\n-    | By_scalar Qreg ->\n-        analyze_shape (Use_operands [| Qreg; Qreg; Element_of_dreg |])\n-    | By_scalar _ -> assert false\n-    | Wide_lane ->\n-        analyze_shape (Use_operands [| Qreg; Dreg; Element_of_dreg |])\n-    | Wide_scalar ->\n-        analyze_shape (Use_operands [| Qreg; Dreg; Element_of_dreg |])\n-    | Pair_result elt ->\n-      let elt_regexp = analyze_shape_elt elt in\n-        elt_regexp ^ \", \" ^ elt_regexp\n-    | Unary_scalar _ -> \"FIXME Unary_scalar\"\n-    | Binary_imm elt -> analyze_shape (Use_operands [| elt; elt; Immed |])\n-    | Narrow_imm -> analyze_shape (Use_operands [| Dreg; Qreg; Immed |])\n-    | Long_imm -> analyze_shape (Use_operands [| Qreg; Dreg; Immed |])\n-\n-(* Generate tests for one intrinsic.  *)\n-let test_intrinsic dir opcode features shape name munge elt_ty =\n-  (* Open the test source file.  *)\n-  let test_name = name ^ (string_of_elt elt_ty) in\n-  let chan = open_test_file dir test_name in\n-  (* Work out what argument and return types the intrinsic has.  *)\n-  let c_arity, new_elt_ty = munge shape elt_ty in\n-  let c_types = check_types (strings_of_arity c_arity) in\n-  (* Extract any constant valuator (a function specifying what constant\n-     values are to be written into the intrinsic call) from the features\n-     list.  *)\n-  let const_valuator =\n-    try\n-      match (List.find (fun feature -> match feature with\n-                                         Const_valuator _ -> true\n-\t\t\t\t       | _ -> false) features) with\n-        Const_valuator f -> Some f\n-      | _ -> assert false\n-    with Not_found -> None\n-  in\n-  (* Work out what instruction name(s) to expect.  *)\n-  let insns = get_insn_names features name in\n-  let no_suffix = (new_elt_ty = NoElts) in\n-  let insns =\n-    if no_suffix then insns\n-                 else List.map (fun insn ->\n-                                  let suffix = string_of_elt_dots new_elt_ty in\n-                                    insn ^ \"\\\\.\" ^ suffix) insns\n-  in\n-  (* Construct a regexp to match against the expected instruction name(s).  *)\n-  let insn_regexp =\n-    match insns with\n-      [] -> assert false\n-    | [insn] -> insn\n-    | _ ->\n-      let rec calc_regexp insns cur_regexp =\n-        match insns with\n-          [] -> cur_regexp\n-        | [insn] -> cur_regexp ^ \"(\" ^ insn ^ \"))\"\n-        | insn::insns -> calc_regexp insns (cur_regexp ^ \"(\" ^ insn ^ \")|\")\n-      in calc_regexp insns \"(\"\n-  in\n-  (* Construct regexps to match against the instructions that this\n-     intrinsic expands to.  Watch out for any writeback character and\n-     comments after the instruction.  *)\n-  let regexps = List.map (fun regexp -> insn_regexp ^ \"\\\\[ \\t\\\\]+\" ^ regexp ^\n-\t\t\t  \"!?\\\\(\\\\[ \\t\\\\]+@\\\\[a-zA-Z0-9 \\\\]+\\\\)?\\\\n\")\n-                         (analyze_all_shapes features shape analyze_shape)\n-  in\n-  let effective_target = effective_target features in\n-  let compile_test_optim = compile_test_optim features\n-  in\n-    (* Emit file and function prologues.  *)\n-    emit_prologue chan test_name effective_target compile_test_optim;\n-\n-    if (compare compile_test_optim \"-O0\") <> 0 then\n-        (* Emit variable declarations.  *)\n-        emit_variables chan c_types features \"\";\n-\n-    Printf.fprintf chan \"void test_%s (void)\\n{\\n\" test_name;\n-\n-    if compare compile_test_optim \"-O0\" = 0 then\n-        (* Emit variable declarations.  *)\n-        emit_variables chan c_types features \"  \";\n-\n-    Printf.fprintf chan \"\\n\";\n-    (* Emit the call to the intrinsic.  *)\n-    emit_call chan const_valuator c_types name elt_ty;\n-    (* Emit the function epilogue and the DejaGNU scan-assembler directives.  *)\n-    emit_epilogue chan features regexps;\n-    (* Close the test file.  *)\n-    close_out chan\n-\n-(* Generate tests for one element of the \"ops\" table.  *)\n-let test_intrinsic_group dir (opcode, features, shape, name, munge, types) =\n-  List.iter (test_intrinsic dir opcode features shape name munge) types\n-\n-(* Program entry point.  *)\n-let _ =\n-  let directory = if Array.length Sys.argv <> 1 then Sys.argv.(1) else \".\" in\n-    List.iter (test_intrinsic_group directory) (reinterp @ reinterpq @ ops)\n-"}, {"sha": "99350bef7279fdc0718fcc891af756e81a7f8f68", "filename": "gcc/config/arm/neon.ml", "status": "removed", "additions": 0, "deletions": 2357, "changes": 2357, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Fconfig%2Farm%2Fneon.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Fconfig%2Farm%2Fneon.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.ml?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,2357 +0,0 @@\n-(* Common code for ARM NEON header file, documentation and test case\n-   generators.\n-\n-   Copyright (C) 2006-2016 Free Software Foundation, Inc.\n-   Contributed by CodeSourcery.\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify it under\n-   the terms of the GNU General Public License as published by the Free\n-   Software Foundation; either version 3, or (at your option) any later\n-   version.\n-\n-   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-   for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with GCC; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.  *)\n-\n-(* Shorthand types for vector elements.  *)\n-type elts = S8 | S16 | S32 | S64 | F16 | F32 | U8 | U16 | U32 | U64 | P8 | P16\n-          | P64 | P128 | I8 | I16 | I32 | I64 | B8 | B16 | B32 | B64 | Conv of elts * elts\n-          | Cast of elts * elts | NoElts\n-\n-type eltclass = Signed | Unsigned | Float | Poly | Int | Bits\n-\t      | ConvClass of eltclass * eltclass | NoType\n-\n-(* These vector types correspond directly to C types.  *)\n-type vectype = T_int8x8    | T_int8x16\n-             | T_int16x4   | T_int16x8\n-\t     | T_int32x2   | T_int32x4\n-\t     | T_int64x1   | T_int64x2\n-\t     | T_uint8x8   | T_uint8x16\n-\t     | T_uint16x4  | T_uint16x8\n-\t     | T_uint32x2  | T_uint32x4\n-\t     | T_uint64x1  | T_uint64x2\n-\t     | T_float16x4\n-\t     | T_float32x2 | T_float32x4\n-\t     | T_poly8x8   | T_poly8x16\n-\t     | T_poly16x4  | T_poly16x8\n-\t     | T_immediate of int * int\n-             | T_int8      | T_int16\n-             | T_int32     | T_int64\n-             | T_uint8     | T_uint16\n-             | T_uint32    | T_uint64\n-             | T_poly8     | T_poly16\n-             | T_poly64    | T_poly64x1\n-             | T_poly64x2  | T_poly128\n-             | T_float16   | T_float32\n-             | T_arrayof of int * vectype\n-             | T_ptrto of vectype | T_const of vectype\n-             | T_void      | T_intQI\n-             | T_intHI     | T_intSI\n-             | T_intDI     | T_intTI\n-             | T_floatHF   | T_floatSF\n-\n-(* The meanings of the following are:\n-     TImode : \"Tetra\", two registers (four words).\n-     EImode : \"hExa\", three registers (six words).\n-     OImode : \"Octa\", four registers (eight words).\n-     CImode : \"dodeCa\", six registers (twelve words).\n-     XImode : \"heXadeca\", eight registers (sixteen words).\n-*)\n-\n-type inttype = B_TImode | B_EImode | B_OImode | B_CImode | B_XImode\n-\n-type shape_elt = Dreg | Qreg | Corereg | Immed | VecArray of int * shape_elt\n-               | PtrTo of shape_elt | CstPtrTo of shape_elt\n-\t       (* These next ones are used only in the test generator.  *)\n-\t       | Element_of_dreg\t(* Used for \"lane\" variants.  *)\n-\t       | Element_of_qreg\t(* Likewise.  *)\n-\t       | All_elements_of_dreg\t(* Used for \"dup\" variants.  *)\n-\t       | Alternatives of shape_elt list (* Used for multiple valid operands *)\n-\n-type shape_form = All of int * shape_elt\n-                | Long\n-\t\t| Long_noreg of shape_elt\n-\t\t| Wide\n-\t\t| Wide_noreg of shape_elt\n-\t\t| Narrow\n-                | Long_imm\n-                | Narrow_imm\n-                | Binary_imm of shape_elt\n-                | Use_operands of shape_elt array\n-                | By_scalar of shape_elt\n-                | Unary_scalar of shape_elt\n-                | Wide_lane\n-                | Wide_scalar\n-                | Pair_result of shape_elt\n-\n-type arity = Arity0 of vectype\n-           | Arity1 of vectype * vectype\n-\t   | Arity2 of vectype * vectype * vectype\n-\t   | Arity3 of vectype * vectype * vectype * vectype\n-           | Arity4 of vectype * vectype * vectype * vectype * vectype\n-\n-type vecmode = V8QI | V4HI | V4HF |V2SI | V2SF | DI\n-             | V16QI | V8HI | V4SI | V4SF | V2DI | TI\n-             | QI | HI | SI | SF\n-\n-type opcode =\n-  (* Binary ops.  *)\n-    Vadd\n-  | Vmul\n-  | Vmla\n-  | Vmls\n-  | Vfma\n-  | Vfms\n-  | Vsub\n-  | Vceq\n-  | Vcge\n-  | Vcgt\n-  | Vcle\n-  | Vclt\n-  | Vcage\n-  | Vcagt\n-  | Vcale\n-  | Vcalt\n-  | Vtst\n-  | Vabd\n-  | Vaba\n-  | Vmax\n-  | Vmin\n-  | Vpadd\n-  | Vpada\n-  | Vpmax\n-  | Vpmin\n-  | Vrecps\n-  | Vrsqrts\n-  | Vshl\n-  | Vshr_n\n-  | Vshl_n\n-  | Vsra_n\n-  | Vsri\n-  | Vsli\n-  (* Logic binops.  *)\n-  | Vand\n-  | Vorr\n-  | Veor\n-  | Vbic\n-  | Vorn\n-  | Vbsl\n-  (* Ops with scalar.  *)\n-  | Vmul_lane\n-  | Vmla_lane\n-  | Vmls_lane\n-  | Vmul_n\n-  | Vmla_n\n-  | Vmls_n\n-  | Vmull_n\n-  | Vmull_lane\n-  | Vqdmull_n\n-  | Vqdmull_lane\n-  | Vqdmulh_n\n-  | Vqdmulh_lane\n-  (* Unary ops.  *)\n-  | Vrintn\n-  | Vrinta\n-  | Vrintp\n-  | Vrintm\n-  | Vrintz\n-  | Vabs\n-  | Vneg\n-  | Vcls\n-  | Vclz\n-  | Vcnt\n-  | Vrecpe\n-  | Vrsqrte\n-  | Vmvn\n-  (* Vector extract.  *)\n-  | Vext\n-  (* Reverse elements.  *)\n-  | Vrev64\n-  | Vrev32\n-  | Vrev16\n-  (* Transposition ops.  *)\n-  | Vtrn\n-  | Vzip\n-  | Vuzp\n-  (* Loads and stores (VLD1/VST1/VLD2...), elements and structures.  *)\n-  | Vldx of int\n-  | Vstx of int\n-  | Vldx_lane of int\n-  | Vldx_dup of int\n-  | Vstx_lane of int\n-  (* Set/extract lanes from a vector.  *)\n-  | Vget_lane\n-  | Vset_lane\n-  (* Initialize vector from bit pattern.  *)\n-  | Vcreate\n-  (* Set all lanes to same value.  *)\n-  | Vdup_n\n-  | Vmov_n  (* Is this the same?  *)\n-  (* Duplicate scalar to all lanes of vector.  *)\n-  | Vdup_lane\n-  (* Combine vectors.  *)\n-  | Vcombine\n-  (* Get quadword high/low parts.  *)\n-  | Vget_high\n-  | Vget_low\n-  (* Convert vectors.  *)\n-  | Vcvt\n-  | Vcvt_n\n-  (* Narrow/lengthen vectors.  *)\n-  | Vmovn\n-  | Vmovl\n-  (* Table lookup.  *)\n-  | Vtbl of int\n-  | Vtbx of int\n-  (* Reinterpret casts.  *)\n-  | Vreinterp\n-\n-let rev_elems revsize elsize nelts _ =\n-  let mask = (revsize / elsize) - 1 in\n-  let arr = Array.init nelts\n-    (fun i -> i lxor mask) in\n-  Array.to_list arr\n-\n-let permute_range i stride nelts increment =\n-  let rec build i = function\n-    0 -> []\n-  | nelts -> i :: (i + stride) :: build (i + increment) (pred nelts) in\n-  build i nelts\n-\n-(* Generate a list of integers suitable for vzip.  *)\n-let zip_range i stride nelts = permute_range i stride nelts 1\n-\n-(* Generate a list of integers suitable for vunzip.  *)\n-let uzip_range i stride nelts = permute_range i stride nelts 4\n-\n-(* Generate a list of integers suitable for trn.  *)\n-let trn_range i stride nelts = permute_range i stride nelts 2\n-\n-let zip_elems _ nelts part =\n-  match part with\n-    `lo -> zip_range 0 nelts (nelts / 2)\n-  | `hi -> zip_range (nelts / 2) nelts (nelts / 2)\n-\n-let uzip_elems _ nelts part =\n-  match part with\n-    `lo -> uzip_range 0 2 (nelts / 2)\n-  | `hi -> uzip_range 1 2 (nelts / 2)\n-\n-let trn_elems _ nelts part =\n-  match part with\n-    `lo -> trn_range 0 nelts (nelts / 2)\n-  | `hi -> trn_range 1 nelts (nelts / 2)\n-\n-(* Features used for documentation, to distinguish between some instruction\n-   variants, and to signal special requirements (e.g. swapping arguments).  *)\n-\n-type features =\n-    Halving\n-  | Rounding\n-  | Saturating\n-  | Dst_unsign\n-  | High_half\n-  | Doubling\n-  | Flipped of string  (* Builtin name to use with flipped arguments.  *)\n-  | InfoWord  (* Pass an extra word for signage/rounding etc. (always passed\n-                 for All _, Long, Wide, Narrow shape_forms.  *)\n-    (* Implement builtin as shuffle.  The parameter is a function which returns\n-       masks suitable for __builtin_shuffle: arguments are (element size,\n-       number of elements, high/low part selector).  *)\n-  | Use_shuffle of (int -> int -> [`lo|`hi] -> int list)\n-    (* A specification as to the shape of instruction expected upon\n-       disassembly, used if it differs from the shape used to build the\n-       intrinsic prototype.  Multiple entries in the constructor's argument\n-       indicate that the intrinsic expands to more than one assembly\n-       instruction, each with a corresponding shape specified here.  *)\n-  | Disassembles_as of shape_form list\n-  | Builtin_name of string  (* Override the name of the builtin.  *)\n-    (* Override the name of the instruction.  If more than one name\n-       is specified, it means that the instruction can have any of those\n-       names.  *)\n-  | Instruction_name of string list\n-    (* Mark that the intrinsic yields no instructions, or expands to yield\n-       behavior that the test generator cannot test.  *)\n-  | No_op\n-    (* Mark that the intrinsic has constant arguments that cannot be set\n-       to the defaults (zero for pointers and one otherwise) in the test\n-       cases.  The function supplied must return the integer to be written\n-       into the testcase for the argument number (0-based) supplied to it.  *)\n-  | Const_valuator of (int -> int)\n-  | Fixed_vector_reg\n-  | Fixed_core_reg\n-    (* Mark that the intrinsic requires __ARM_FEATURE_string to be defined.  *)\n-  | Requires_feature of string\n-    (* Mark that the intrinsic requires a particular architecture version.  *)\n-  | Requires_arch of int\n-    (* Mark that the intrinsic requires a particular bit in __ARM_FP to\n-    be set.   *)\n-  | Requires_FP_bit of int\n-    (* Compiler optimization level for the test.  *)\n-  | Compiler_optim of string\n-\n-exception MixedMode of elts * elts\n-\n-let rec elt_width = function\n-    S8 | U8 | P8 | I8 | B8 -> 8\n-  | S16 | U16 | P16 | I16 | B16 | F16 -> 16\n-  | S32 | F32 | U32 | I32 | B32 -> 32\n-  | S64 | U64 | P64 | I64 | B64 -> 64\n-  | P128 -> 128\n-  | Conv (a, b) ->\n-      let wa = elt_width a and wb = elt_width b in\n-      if wa = wb then wa else raise (MixedMode (a, b))\n-  | Cast (a, b) -> raise (MixedMode (a, b))\n-  | NoElts -> failwith \"No elts\"\n-\n-let rec elt_class = function\n-    S8 | S16 | S32 | S64 -> Signed\n-  | U8 | U16 | U32 | U64 -> Unsigned\n-  | P8 | P16 | P64 | P128 -> Poly\n-  | F16 | F32 -> Float\n-  | I8 | I16 | I32 | I64 -> Int\n-  | B8 | B16 | B32 | B64 -> Bits\n-  | Conv (a, b) | Cast (a, b) -> ConvClass (elt_class a, elt_class b)\n-  | NoElts -> NoType\n-\n-let elt_of_class_width c w =\n-  match c, w with\n-    Signed, 8 -> S8\n-  | Signed, 16 -> S16\n-  | Signed, 32 -> S32\n-  | Signed, 64 -> S64\n-  | Float, 16 -> F16\n-  | Float, 32 -> F32\n-  | Unsigned, 8 -> U8\n-  | Unsigned, 16 -> U16\n-  | Unsigned, 32 -> U32\n-  | Unsigned, 64 -> U64\n-  | Poly, 8 -> P8\n-  | Poly, 16 -> P16\n-  | Poly, 64 -> P64\n-  | Poly, 128 -> P128\n-  | Int, 8 -> I8\n-  | Int, 16 -> I16\n-  | Int, 32 -> I32\n-  | Int, 64 -> I64\n-  | Bits, 8 -> B8\n-  | Bits, 16 -> B16\n-  | Bits, 32 -> B32\n-  | Bits, 64 -> B64\n-  | _ -> failwith \"Bad element type\"\n-\n-(* Return unsigned integer element the same width as argument.  *)\n-let unsigned_of_elt elt =\n-  elt_of_class_width Unsigned (elt_width elt)\n-\n-let signed_of_elt elt =\n-  elt_of_class_width Signed (elt_width elt)\n-\n-(* Return untyped bits element the same width as argument.  *)\n-let bits_of_elt elt =\n-  elt_of_class_width Bits (elt_width elt)\n-\n-let non_signed_variant = function\n-    S8 -> I8\n-  | S16 -> I16\n-  | S32 -> I32\n-  | S64 -> I64\n-  | U8 -> I8\n-  | U16 -> I16\n-  | U32 -> I32\n-  | U64 -> I64\n-  | x -> x\n-\n-let poly_unsigned_variant v =\n-  let elclass = match elt_class v with\n-    Poly -> Unsigned\n-  | x -> x in\n-  elt_of_class_width elclass (elt_width v)\n-\n-let widen_elt elt =\n-  let w = elt_width elt\n-  and c = elt_class elt in\n-  elt_of_class_width c (w * 2)\n-\n-let narrow_elt elt =\n-  let w = elt_width elt\n-  and c = elt_class elt in\n-  elt_of_class_width c (w / 2)\n-\n-(* If we're trying to find a mode from a \"Use_operands\" instruction, use the\n-   last vector operand as the dominant mode used to invoke the correct builtin.\n-   We must stick to this rule in neon.md.  *)\n-let find_key_operand operands =\n-  let rec scan opno =\n-    match operands.(opno) with\n-      Qreg -> Qreg\n-    | Dreg -> Dreg\n-    | VecArray (_, Qreg) -> Qreg\n-    | VecArray (_, Dreg) -> Dreg\n-    | _ -> scan (opno-1)\n-  in\n-    scan ((Array.length operands) - 1)\n-\n-(* Find a vecmode from a shape_elt ELT for an instruction with shape_form\n-   SHAPE.  For a Use_operands shape, if ARGPOS is passed then return the mode\n-   for the given argument position, else determine which argument to return a\n-   mode for automatically.  *)\n-\n-let rec mode_of_elt ?argpos elt shape =\n-  let flt = match elt_class elt with\n-    Float | ConvClass(_, Float) -> true | _ -> false in\n-  let idx =\n-    match elt_width elt with\n-      8 -> 0 | 16 -> 1 | 32 -> 2 | 64 -> 3 | 128 -> 4\n-    | _ -> failwith \"Bad element width\"\n-  in match shape with\n-    All (_, Dreg) | By_scalar Dreg | Pair_result Dreg | Unary_scalar Dreg\n-  | Binary_imm Dreg | Long_noreg Dreg | Wide_noreg Dreg ->\n-      if flt then\n-        [| V8QI; V4HF; V2SF; DI |].(idx)\n-      else\n-        [| V8QI; V4HI; V2SI; DI |].(idx)\n-  | All (_, Qreg) | By_scalar Qreg | Pair_result Qreg | Unary_scalar Qreg\n-  | Binary_imm Qreg | Long_noreg Qreg | Wide_noreg Qreg ->\n-      [| V16QI; V8HI; if flt then V4SF else V4SI; V2DI; TI|].(idx)\n-  | All (_, (Corereg | PtrTo _ | CstPtrTo _)) ->\n-      [| QI; HI; if flt then SF else SI; DI |].(idx)\n-  | Long | Wide | Wide_lane | Wide_scalar\n-  | Long_imm ->\n-      [| V8QI; V4HI; V2SI; DI |].(idx)\n-  | Narrow | Narrow_imm -> [| V16QI; V8HI; V4SI; V2DI |].(idx)\n-  | Use_operands ops ->\n-      begin match argpos with\n-        None -> mode_of_elt ?argpos elt (All (0, (find_key_operand ops)))\n-      | Some pos -> mode_of_elt ?argpos elt (All (0, ops.(pos)))\n-      end\n-  | _ -> failwith \"invalid shape\"\n-\n-(* Modify an element type dependent on the shape of the instruction and the\n-   operand number.  *)\n-\n-let shapemap shape no =\n-  let ident = fun x -> x in\n-  match shape with\n-    All _ | Use_operands _ | By_scalar _ | Pair_result _ | Unary_scalar _\n-  | Binary_imm _ -> ident\n-  | Long | Long_noreg _ | Wide_scalar | Long_imm ->\n-      [| widen_elt; ident; ident |].(no)\n-  | Wide | Wide_noreg _ -> [| widen_elt; widen_elt; ident |].(no)\n-  | Wide_lane -> [| widen_elt; ident; ident; ident |].(no)\n-  | Narrow | Narrow_imm -> [| narrow_elt; ident; ident |].(no)\n-\n-(* Register type (D/Q) of an operand, based on shape and operand number.  *)\n-\n-let regmap shape no =\n-  match shape with\n-    All (_, reg) | Long_noreg reg | Wide_noreg reg -> reg\n-  | Long -> [| Qreg; Dreg; Dreg |].(no)\n-  | Wide -> [| Qreg; Qreg; Dreg |].(no)\n-  | Narrow -> [| Dreg; Qreg; Qreg |].(no)\n-  | Wide_lane -> [| Qreg; Dreg; Dreg; Immed |].(no)\n-  | Wide_scalar -> [| Qreg; Dreg; Corereg |].(no)\n-  | By_scalar reg -> [| reg; reg; Dreg; Immed |].(no)\n-  | Unary_scalar reg -> [| reg; Dreg; Immed |].(no)\n-  | Pair_result reg -> [| VecArray (2, reg); reg; reg |].(no)\n-  | Binary_imm reg -> [| reg; reg; Immed |].(no)\n-  | Long_imm -> [| Qreg; Dreg; Immed |].(no)\n-  | Narrow_imm -> [| Dreg; Qreg; Immed |].(no)\n-  | Use_operands these -> these.(no)\n-\n-let type_for_elt shape elt no =\n-  let elt = (shapemap shape no) elt in\n-  let reg = regmap shape no in\n-  let rec type_for_reg_elt reg elt =\n-    match reg with\n-      Dreg ->\n-        begin match elt with\n-          S8 -> T_int8x8\n-        | S16 -> T_int16x4\n-        | S32 -> T_int32x2\n-        | S64 -> T_int64x1\n-        | U8 -> T_uint8x8\n-        | U16 -> T_uint16x4\n-        | U32 -> T_uint32x2\n-        | U64 -> T_uint64x1\n-        | P64 -> T_poly64x1\n-        | P128 -> T_poly128\n-        | F16 -> T_float16x4\n-        | F32 -> T_float32x2\n-        | P8 -> T_poly8x8\n-        | P16 -> T_poly16x4\n-        | _ -> failwith \"Bad elt type for Dreg\"\n-        end\n-    | Qreg ->\n-        begin match elt with\n-          S8 -> T_int8x16\n-        | S16 -> T_int16x8\n-        | S32 -> T_int32x4\n-        | S64 -> T_int64x2\n-        | U8 -> T_uint8x16\n-        | U16 -> T_uint16x8\n-        | U32 -> T_uint32x4\n-        | U64 -> T_uint64x2\n-        | F32 -> T_float32x4\n-        | P8 -> T_poly8x16\n-        | P16 -> T_poly16x8\n-        | P64 -> T_poly64x2\n-        | P128 -> T_poly128\n-        | _ -> failwith \"Bad elt type for Qreg\"\n-        end\n-    | Corereg ->\n-        begin match elt with\n-          S8 -> T_int8\n-        | S16 -> T_int16\n-        | S32 -> T_int32\n-        | S64 -> T_int64\n-        | U8 -> T_uint8\n-        | U16 -> T_uint16\n-        | U32 -> T_uint32\n-        | U64 -> T_uint64\n-        | P8 -> T_poly8\n-        | P16 -> T_poly16\n-        | P64 -> T_poly64\n-        | P128 -> T_poly128\n-        | F32 -> T_float32\n-        | _ -> failwith \"Bad elt type for Corereg\"\n-        end\n-    | Immed ->\n-        T_immediate (0, 0)\n-    | VecArray (num, sub) ->\n-        T_arrayof (num, type_for_reg_elt sub elt)\n-    | PtrTo x ->\n-        T_ptrto (type_for_reg_elt x elt)\n-    | CstPtrTo x ->\n-        T_ptrto (T_const (type_for_reg_elt x elt))\n-    (* Anything else is solely for the use of the test generator.  *)\n-    | _ -> assert false\n-  in\n-    type_for_reg_elt reg elt\n-\n-(* Return size of a vector type, in bits.  *)\n-let vectype_size = function\n-    T_int8x8 | T_int16x4 | T_int32x2 | T_int64x1\n-  | T_uint8x8 | T_uint16x4 | T_uint32x2 | T_uint64x1\n-  | T_float32x2 | T_poly8x8 | T_poly64x1 | T_poly16x4 | T_float16x4 -> 64\n-  | T_int8x16 | T_int16x8 | T_int32x4 | T_int64x2\n-  | T_uint8x16 | T_uint16x8  | T_uint32x4  | T_uint64x2\n-  | T_float32x4 | T_poly8x16 | T_poly64x2 | T_poly16x8 -> 128\n-  | _ -> raise Not_found\n-\n-let inttype_for_array num elttype =\n-  let eltsize = vectype_size elttype in\n-  let numwords = (num * eltsize) / 32 in\n-  match numwords with\n-    4 -> B_TImode\n-  | 6 -> B_EImode\n-  | 8 -> B_OImode\n-  | 12 -> B_CImode\n-  | 16 -> B_XImode\n-  | _ -> failwith (\"no int type for size \" ^ string_of_int numwords)\n-\n-(* These functions return pairs of (internal, external) types, where \"internal\"\n-   types are those seen by GCC, and \"external\" are those seen by the assembler.\n-   These types aren't necessarily the same, since the intrinsics can munge more\n-   than one C type into each assembler opcode.  *)\n-\n-let make_sign_invariant func shape elt =\n-  let arity, elt' = func shape elt in\n-  arity, non_signed_variant elt'\n-\n-(* Don't restrict any types.  *)\n-\n-let elts_same make_arity shape elt =\n-  let vtype = type_for_elt shape elt in\n-  make_arity vtype, elt\n-\n-(* As sign_invar_*, but when sign matters.  *)\n-let elts_same_io_lane =\n-  elts_same (fun vtype -> Arity4 (vtype 0, vtype 0, vtype 1, vtype 2, vtype 3))\n-\n-let elts_same_io =\n-  elts_same (fun vtype -> Arity3 (vtype 0, vtype 0, vtype 1, vtype 2))\n-\n-let elts_same_2_lane =\n-  elts_same (fun vtype -> Arity3 (vtype 0, vtype 1, vtype 2, vtype 3))\n-\n-let elts_same_3 = elts_same_2_lane\n-\n-let elts_same_2 =\n-  elts_same (fun vtype -> Arity2 (vtype 0, vtype 1, vtype 2))\n-\n-let elts_same_1 =\n-  elts_same (fun vtype -> Arity1 (vtype 0, vtype 1))\n-\n-(* Use for signed/unsigned invariant operations (i.e. where the operation\n-   doesn't depend on the sign of the data.  *)\n-\n-let sign_invar_io_lane = make_sign_invariant elts_same_io_lane\n-let sign_invar_io = make_sign_invariant elts_same_io\n-let sign_invar_2_lane = make_sign_invariant elts_same_2_lane\n-let sign_invar_2 = make_sign_invariant elts_same_2\n-let sign_invar_1 = make_sign_invariant elts_same_1\n-\n-(* Sign-sensitive comparison.  *)\n-\n-let cmp_sign_matters shape elt =\n-  let vtype = type_for_elt shape elt\n-  and rtype = type_for_elt shape (unsigned_of_elt elt) 0 in\n-  Arity2 (rtype, vtype 1, vtype 2), elt\n-\n-(* Signed/unsigned invariant comparison.  *)\n-\n-let cmp_sign_invar shape elt =\n-  let shape', elt' = cmp_sign_matters shape elt in\n-  let elt'' =\n-    match non_signed_variant elt' with\n-      P8 -> I8\n-    | x -> x\n-  in\n-    shape', elt''\n-\n-(* Comparison (VTST) where only the element width matters.  *)\n-\n-let cmp_bits shape elt =\n-  let vtype = type_for_elt shape elt\n-  and rtype = type_for_elt shape (unsigned_of_elt elt) 0\n-  and bits_only = bits_of_elt elt in\n-  Arity2 (rtype, vtype 1, vtype 2), bits_only\n-\n-let reg_shift shape elt =\n-  let vtype = type_for_elt shape elt\n-  and op2type = type_for_elt shape (signed_of_elt elt) 2 in\n-  Arity2 (vtype 0, vtype 1, op2type), elt\n-\n-(* Genericised constant-shift type-generating function.  *)\n-\n-let const_shift mkimm ?arity ?result shape elt =\n-  let op2type = (shapemap shape 2) elt in\n-  let op2width = elt_width op2type in\n-  let op2 = mkimm op2width\n-  and op1 = type_for_elt shape elt 1\n-  and r_elt =\n-    match result with\n-      None -> elt\n-    | Some restriction -> restriction elt in\n-  let rtype = type_for_elt shape r_elt 0 in\n-  match arity with\n-    None -> Arity2 (rtype, op1, op2), elt\n-  | Some mkarity -> mkarity rtype op1 op2, elt\n-\n-(* Use for immediate right-shifts.  *)\n-\n-let shift_right shape elt =\n-  const_shift (fun imm -> T_immediate (1, imm)) shape elt\n-\n-let shift_right_acc shape elt =\n-  const_shift (fun imm -> T_immediate (1, imm))\n-    ~arity:(fun dst op1 op2 -> Arity3 (dst, dst, op1, op2)) shape elt\n-\n-(* Use for immediate right-shifts when the operation doesn't care about\n-   signedness.  *)\n-\n-let shift_right_sign_invar =\n-  make_sign_invariant shift_right\n-\n-(* Immediate right-shift; result is unsigned even when operand is signed.  *)\n-\n-let shift_right_to_uns shape elt =\n-  const_shift (fun imm -> T_immediate (1, imm)) ~result:unsigned_of_elt\n-    shape elt\n-\n-(* Immediate left-shift.  *)\n-\n-let shift_left shape elt =\n-  const_shift (fun imm -> T_immediate (0, imm - 1)) shape elt\n-\n-(* Immediate left-shift, unsigned result.  *)\n-\n-let shift_left_to_uns shape elt =\n-  const_shift (fun imm -> T_immediate (0, imm - 1)) ~result:unsigned_of_elt\n-    shape elt\n-\n-(* Immediate left-shift, don't care about signs.  *)\n-\n-let shift_left_sign_invar =\n-  make_sign_invariant shift_left\n-\n-(* Shift left/right and insert: only element size matters.  *)\n-\n-let shift_insert shape elt =\n-  let arity, elt =\n-    const_shift (fun imm -> T_immediate (1, imm))\n-    ~arity:(fun dst op1 op2 -> Arity3 (dst, dst, op1, op2)) shape elt in\n-  arity, bits_of_elt elt\n-\n-(* Get/set lane.  *)\n-\n-let get_lane shape elt =\n-  let vtype = type_for_elt shape elt in\n-  Arity2 (vtype 0, vtype 1, vtype 2),\n-    (match elt with P8 -> U8 | P16 -> U16 | S32 | U32 | F32 -> B32 | x -> x)\n-\n-let set_lane shape elt =\n-  let vtype = type_for_elt shape elt in\n-  Arity3 (vtype 0, vtype 1, vtype 2, vtype 3), bits_of_elt elt\n-\n-let set_lane_notype shape elt =\n-  let vtype = type_for_elt shape elt in\n-  Arity3 (vtype 0, vtype 1, vtype 2, vtype 3), NoElts\n-\n-let create_vector shape elt =\n-  let vtype = type_for_elt shape U64 1\n-  and rtype = type_for_elt shape elt 0 in\n-  Arity1 (rtype, vtype), elt\n-\n-let conv make_arity shape elt =\n-  let edest, esrc = match elt with\n-    Conv (edest, esrc) | Cast (edest, esrc) -> edest, esrc\n-  | _ -> failwith \"Non-conversion element in conversion\" in\n-  let vtype = type_for_elt shape esrc\n-  and rtype = type_for_elt shape edest 0 in\n-  make_arity rtype vtype, elt\n-\n-let conv_1 = conv (fun rtype vtype -> Arity1 (rtype, vtype 1))\n-let conv_2 = conv (fun rtype vtype -> Arity2 (rtype, vtype 1, vtype 2))\n-\n-(* Operation has an unsigned result even if operands are signed.  *)\n-\n-let dst_unsign make_arity shape elt =\n-  let vtype = type_for_elt shape elt\n-  and rtype = type_for_elt shape (unsigned_of_elt elt) 0 in\n-  make_arity rtype vtype, elt\n-\n-let dst_unsign_1 = dst_unsign (fun rtype vtype -> Arity1 (rtype, vtype 1))\n-\n-let make_bits_only func shape elt =\n-  let arity, elt' = func shape elt in\n-  arity, bits_of_elt elt'\n-\n-(* Extend operation.  *)\n-\n-let extend shape elt =\n-  let vtype = type_for_elt shape elt in\n-  Arity3 (vtype 0, vtype 1, vtype 2, vtype 3), bits_of_elt elt\n-\n-(* Table look-up operations. Operand 2 is signed/unsigned for signed/unsigned\n-   integer ops respectively, or unsigned for polynomial ops.  *)\n-\n-let table mkarity shape elt =\n-  let vtype = type_for_elt shape elt in\n-  let op2 = type_for_elt shape (poly_unsigned_variant elt) 2 in\n-  mkarity vtype op2, bits_of_elt elt\n-\n-let table_2 = table (fun vtype op2 -> Arity2 (vtype 0, vtype 1, op2))\n-let table_io = table (fun vtype op2 -> Arity3 (vtype 0, vtype 0, vtype 1, op2))\n-\n-(* Operations where only bits matter.  *)\n-\n-let bits_1 = make_bits_only elts_same_1\n-let bits_2 = make_bits_only elts_same_2\n-let bits_3 = make_bits_only elts_same_3\n-\n-(* Store insns.  *)\n-let store_1 shape elt =\n-  let vtype = type_for_elt shape elt in\n-  Arity2 (T_void, vtype 0, vtype 1), bits_of_elt elt\n-\n-let store_3 shape elt =\n-  let vtype = type_for_elt shape elt in\n-  Arity3 (T_void, vtype 0, vtype 1, vtype 2), bits_of_elt elt\n-\n-let make_notype func shape elt =\n-  let arity, _ = func shape elt in\n-  arity, NoElts\n-\n-let notype_1 = make_notype elts_same_1\n-let notype_2 = make_notype elts_same_2\n-let notype_3 = make_notype elts_same_3\n-\n-(* Bit-select operations (first operand is unsigned int).  *)\n-\n-let bit_select shape elt =\n-  let vtype = type_for_elt shape elt\n-  and itype = type_for_elt shape (unsigned_of_elt elt) in\n-  Arity3 (vtype 0, itype 1, vtype 2, vtype 3), NoElts\n-\n-(* Common lists of supported element types.  *)\n-\n-let s_8_32 = [S8; S16; S32]\n-let u_8_32 = [U8; U16; U32]\n-let su_8_32 = [S8; S16; S32; U8; U16; U32]\n-let su_8_64 = S64 :: U64 :: su_8_32\n-let su_16_64 = [S16; S32; S64; U16; U32; U64]\n-let pf_su_8_16 = [P8; P16; S8; S16; U8; U16]\n-let pf_su_8_32 = P8 :: P16 :: F32 :: su_8_32\n-let pf_su_8_64 = P8 :: P16 :: F32 :: su_8_64\n-let suf_32 = [S32; U32; F32]\n-\n-let ops =\n-  [\n-    (* Addition.  *)\n-    Vadd, [], All (3, Dreg), \"vadd\", sign_invar_2, F32 :: su_8_32;\n-    Vadd, [No_op], All (3, Dreg), \"vadd\", sign_invar_2, [S64; U64];\n-    Vadd, [], All (3, Qreg), \"vaddQ\", sign_invar_2, F32 :: su_8_64;\n-    Vadd, [], Long, \"vaddl\", elts_same_2, su_8_32;\n-    Vadd, [], Wide, \"vaddw\", elts_same_2, su_8_32;\n-    Vadd, [Halving], All (3, Dreg), \"vhadd\", elts_same_2, su_8_32;\n-    Vadd, [Halving], All (3, Qreg), \"vhaddQ\", elts_same_2, su_8_32;\n-    Vadd, [Instruction_name [\"vrhadd\"]; Rounding; Halving],\n-      All (3, Dreg), \"vRhadd\", elts_same_2, su_8_32;\n-    Vadd, [Instruction_name [\"vrhadd\"]; Rounding; Halving],\n-      All (3, Qreg), \"vRhaddQ\", elts_same_2, su_8_32;\n-    Vadd, [Saturating], All (3, Dreg), \"vqadd\", elts_same_2, su_8_64;\n-    Vadd, [Saturating], All (3, Qreg), \"vqaddQ\", elts_same_2, su_8_64;\n-    Vadd, [High_half], Narrow, \"vaddhn\", sign_invar_2, su_16_64;\n-    Vadd, [Instruction_name [\"vraddhn\"]; Rounding; High_half],\n-      Narrow, \"vRaddhn\", sign_invar_2, su_16_64;\n-\n-    (* Multiplication.  *)\n-    Vmul, [], All (3, Dreg), \"vmul\", sign_invar_2, P8 :: F32 :: su_8_32;\n-    Vmul, [], All (3, Qreg), \"vmulQ\", sign_invar_2, P8 :: F32 :: su_8_32;\n-    Vmul, [Saturating; Doubling; High_half], All (3, Dreg), \"vqdmulh\",\n-      elts_same_2, [S16; S32];\n-    Vmul, [Saturating; Doubling; High_half], All (3, Qreg), \"vqdmulhQ\",\n-      elts_same_2, [S16; S32];\n-    Vmul,\n-      [Saturating; Rounding; Doubling; High_half;\n-       Instruction_name [\"vqrdmulh\"]],\n-      All (3, Dreg), \"vqRdmulh\",\n-      elts_same_2, [S16; S32];\n-    Vmul,\n-      [Saturating; Rounding; Doubling; High_half;\n-       Instruction_name [\"vqrdmulh\"]],\n-      All (3, Qreg), \"vqRdmulhQ\",\n-      elts_same_2, [S16; S32];\n-    Vmul, [], Long, \"vmull\", elts_same_2, P8 :: su_8_32;\n-    Vmul, [Saturating; Doubling], Long, \"vqdmull\", elts_same_2, [S16; S32];\n-\n-    (* Multiply-accumulate. *)\n-    Vmla, [], All (3, Dreg), \"vmla\", sign_invar_io, F32 :: su_8_32;\n-    Vmla, [], All (3, Qreg), \"vmlaQ\", sign_invar_io, F32 :: su_8_32;\n-    Vmla, [], Long, \"vmlal\", elts_same_io, su_8_32;\n-    Vmla, [Saturating; Doubling], Long, \"vqdmlal\", elts_same_io, [S16; S32];\n-\n-    (* Multiply-subtract.  *)\n-    Vmls, [], All (3, Dreg), \"vmls\", sign_invar_io, F32 :: su_8_32;\n-    Vmls, [], All (3, Qreg), \"vmlsQ\", sign_invar_io, F32 :: su_8_32;\n-    Vmls, [], Long, \"vmlsl\", elts_same_io, su_8_32;\n-    Vmls, [Saturating; Doubling], Long, \"vqdmlsl\", elts_same_io, [S16; S32];\n-\n-    (* Fused-multiply-accumulate. *)\n-    Vfma, [Requires_feature \"FMA\"], All (3, Dreg), \"vfma\", elts_same_io, [F32];\n-    Vfma, [Requires_feature \"FMA\"], All (3, Qreg), \"vfmaQ\", elts_same_io, [F32];\n-    Vfms, [Requires_feature \"FMA\"], All (3, Dreg), \"vfms\", elts_same_io, [F32];\n-    Vfms, [Requires_feature \"FMA\"], All (3, Qreg), \"vfmsQ\", elts_same_io, [F32];\n-\n-    (* Round to integral. *)\n-    Vrintn, [Builtin_name \"vrintn\"; Requires_arch 8], Use_operands [| Dreg; Dreg |],\n-            \"vrndn\", elts_same_1, [F32];\n-    Vrintn, [Builtin_name \"vrintn\"; Requires_arch 8], Use_operands [| Qreg; Qreg |],\n-            \"vrndqn\", elts_same_1, [F32];\n-    Vrinta, [Builtin_name \"vrinta\"; Requires_arch 8], Use_operands [| Dreg; Dreg |],\n-            \"vrnda\", elts_same_1, [F32];\n-    Vrinta, [Builtin_name \"vrinta\"; Requires_arch 8], Use_operands [| Qreg; Qreg |],\n-            \"vrndqa\", elts_same_1, [F32];\n-    Vrintp, [Builtin_name \"vrintp\"; Requires_arch 8], Use_operands [| Dreg; Dreg |],\n-            \"vrndp\", elts_same_1, [F32];\n-    Vrintp, [Builtin_name \"vrintp\"; Requires_arch 8], Use_operands [| Qreg; Qreg |],\n-            \"vrndqp\", elts_same_1, [F32];\n-    Vrintm, [Builtin_name \"vrintm\"; Requires_arch 8], Use_operands [| Dreg; Dreg |],\n-            \"vrndm\", elts_same_1, [F32];\n-    Vrintm, [Builtin_name \"vrintm\"; Requires_arch 8], Use_operands [| Qreg; Qreg |],\n-            \"vrndqm\", elts_same_1, [F32];\n-    Vrintz, [Builtin_name \"vrintz\"; Requires_arch 8], Use_operands [| Dreg; Dreg |],\n-            \"vrnd\", elts_same_1, [F32];\n-    Vrintz, [Builtin_name \"vrintz\"; Requires_arch 8], Use_operands [| Qreg; Qreg |],\n-            \"vrndq\", elts_same_1, [F32];\n-    (* Subtraction.  *)\n-    Vsub, [], All (3, Dreg), \"vsub\", sign_invar_2, F32 :: su_8_32;\n-    Vsub, [No_op], All (3, Dreg), \"vsub\", sign_invar_2,  [S64; U64];\n-    Vsub, [], All (3, Qreg), \"vsubQ\", sign_invar_2, F32 :: su_8_64;\n-    Vsub, [], Long, \"vsubl\", elts_same_2, su_8_32;\n-    Vsub, [], Wide, \"vsubw\", elts_same_2, su_8_32;\n-    Vsub, [Halving], All (3, Dreg), \"vhsub\", elts_same_2, su_8_32;\n-    Vsub, [Halving], All (3, Qreg), \"vhsubQ\", elts_same_2, su_8_32;\n-    Vsub, [Saturating], All (3, Dreg), \"vqsub\", elts_same_2, su_8_64;\n-    Vsub, [Saturating], All (3, Qreg), \"vqsubQ\", elts_same_2, su_8_64;\n-    Vsub, [High_half], Narrow, \"vsubhn\", sign_invar_2, su_16_64;\n-    Vsub, [Instruction_name [\"vrsubhn\"]; Rounding; High_half],\n-      Narrow, \"vRsubhn\", sign_invar_2, su_16_64;\n-\n-    (* Comparison, equal.  *)\n-    Vceq, [], All (3, Dreg), \"vceq\", cmp_sign_invar, P8 :: F32 :: su_8_32;\n-    Vceq, [], All (3, Qreg), \"vceqQ\", cmp_sign_invar, P8 :: F32 :: su_8_32;\n-\n-    (* Comparison, greater-than or equal.  *)\n-    Vcge, [], All (3, Dreg), \"vcge\", cmp_sign_matters, F32 :: s_8_32;\n-    Vcge, [Instruction_name [\"vcge\"]; Builtin_name \"vcgeu\"],\n-      All (3, Dreg), \"vcge\", cmp_sign_matters,\n-      u_8_32;\n-    Vcge, [], All (3, Qreg), \"vcgeQ\", cmp_sign_matters, F32 :: s_8_32;\n-    Vcge, [Instruction_name [\"vcge\"]; Builtin_name \"vcgeu\"],\n-      All (3, Qreg), \"vcgeQ\", cmp_sign_matters,\n-      u_8_32;\n-\n-    (* Comparison, less-than or equal.  *)\n-    Vcle, [Flipped \"vcge\"], All (3, Dreg), \"vcle\", cmp_sign_matters,\n-      F32 :: s_8_32;\n-    Vcle, [Instruction_name [\"vcge\"]; Flipped \"vcgeu\"],\n-      All (3, Dreg), \"vcle\", cmp_sign_matters,\n-      u_8_32;\n-    Vcle, [Instruction_name [\"vcge\"]; Flipped \"vcgeQ\"],\n-      All (3, Qreg), \"vcleQ\", cmp_sign_matters,\n-      F32 :: s_8_32;\n-    Vcle, [Instruction_name [\"vcge\"]; Flipped \"vcgeuQ\"],\n-      All (3, Qreg), \"vcleQ\", cmp_sign_matters,\n-      u_8_32;\n-\n-    (* Comparison, greater-than.  *)\n-    Vcgt, [], All (3, Dreg), \"vcgt\", cmp_sign_matters, F32 :: s_8_32;\n-    Vcgt, [Instruction_name [\"vcgt\"]; Builtin_name \"vcgtu\"],\n-      All (3, Dreg), \"vcgt\", cmp_sign_matters,\n-      u_8_32;\n-    Vcgt, [], All (3, Qreg), \"vcgtQ\", cmp_sign_matters, F32 :: s_8_32;\n-    Vcgt, [Instruction_name [\"vcgt\"]; Builtin_name \"vcgtu\"],\n-      All (3, Qreg), \"vcgtQ\", cmp_sign_matters,\n-      u_8_32;\n-\n-    (* Comparison, less-than.  *)\n-    Vclt, [Flipped \"vcgt\"], All (3, Dreg), \"vclt\", cmp_sign_matters,\n-      F32 :: s_8_32;\n-    Vclt, [Instruction_name [\"vcgt\"]; Flipped \"vcgtu\"],\n-      All (3, Dreg), \"vclt\", cmp_sign_matters,\n-      u_8_32;\n-    Vclt, [Instruction_name [\"vcgt\"]; Flipped \"vcgtQ\"],\n-      All (3, Qreg), \"vcltQ\", cmp_sign_matters,\n-      F32 :: s_8_32;\n-    Vclt, [Instruction_name [\"vcgt\"]; Flipped \"vcgtuQ\"],\n-      All (3, Qreg), \"vcltQ\", cmp_sign_matters,\n-      u_8_32;\n-\n-    (* Compare absolute greater-than or equal.  *)\n-    Vcage, [Instruction_name [\"vacge\"]],\n-      All (3, Dreg), \"vcage\", cmp_sign_matters, [F32];\n-    Vcage, [Instruction_name [\"vacge\"]],\n-      All (3, Qreg), \"vcageQ\", cmp_sign_matters, [F32];\n-\n-    (* Compare absolute less-than or equal.  *)\n-    Vcale, [Instruction_name [\"vacge\"]; Flipped \"vcage\"],\n-      All (3, Dreg), \"vcale\", cmp_sign_matters, [F32];\n-    Vcale, [Instruction_name [\"vacge\"]; Flipped \"vcageQ\"],\n-      All (3, Qreg), \"vcaleQ\", cmp_sign_matters, [F32];\n-\n-    (* Compare absolute greater-than or equal.  *)\n-    Vcagt, [Instruction_name [\"vacgt\"]],\n-      All (3, Dreg), \"vcagt\", cmp_sign_matters, [F32];\n-    Vcagt, [Instruction_name [\"vacgt\"]],\n-      All (3, Qreg), \"vcagtQ\", cmp_sign_matters, [F32];\n-\n-    (* Compare absolute less-than or equal.  *)\n-    Vcalt, [Instruction_name [\"vacgt\"]; Flipped \"vcagt\"],\n-      All (3, Dreg), \"vcalt\", cmp_sign_matters, [F32];\n-    Vcalt, [Instruction_name [\"vacgt\"]; Flipped \"vcagtQ\"],\n-      All (3, Qreg), \"vcaltQ\", cmp_sign_matters, [F32];\n-\n-    (* Test bits.  *)\n-    Vtst, [], All (3, Dreg), \"vtst\", cmp_bits, P8 :: su_8_32;\n-    Vtst, [], All (3, Qreg), \"vtstQ\", cmp_bits, P8 :: su_8_32;\n-\n-    (* Absolute difference.  *)\n-    Vabd, [], All (3, Dreg), \"vabd\", elts_same_2, F32 :: su_8_32;\n-    Vabd, [], All (3, Qreg), \"vabdQ\", elts_same_2, F32 :: su_8_32;\n-    Vabd, [], Long, \"vabdl\", elts_same_2, su_8_32;\n-\n-    (* Absolute difference and accumulate.  *)\n-    Vaba, [], All (3, Dreg), \"vaba\", elts_same_io, su_8_32;\n-    Vaba, [], All (3, Qreg), \"vabaQ\", elts_same_io, su_8_32;\n-    Vaba, [], Long, \"vabal\", elts_same_io, su_8_32;\n-\n-    (* Max.  *)\n-    Vmax, [], All (3, Dreg), \"vmax\", elts_same_2, F32 :: su_8_32;\n-    Vmax, [], All (3, Qreg), \"vmaxQ\", elts_same_2, F32 :: su_8_32;\n-\n-    (* Min.  *)\n-    Vmin, [], All (3, Dreg), \"vmin\", elts_same_2, F32 :: su_8_32;\n-    Vmin, [], All (3, Qreg), \"vminQ\", elts_same_2, F32 :: su_8_32;\n-\n-    (* Pairwise add.  *)\n-    Vpadd, [], All (3, Dreg), \"vpadd\", sign_invar_2, F32 :: su_8_32;\n-    Vpadd, [], Long_noreg Dreg, \"vpaddl\", elts_same_1, su_8_32;\n-    Vpadd, [], Long_noreg Qreg, \"vpaddlQ\", elts_same_1, su_8_32;\n-\n-    (* Pairwise add, widen and accumulate.  *)\n-    Vpada, [], Wide_noreg Dreg, \"vpadal\", elts_same_2, su_8_32;\n-    Vpada, [], Wide_noreg Qreg, \"vpadalQ\", elts_same_2, su_8_32;\n-\n-    (* Folding maximum, minimum.  *)\n-    Vpmax, [], All (3, Dreg), \"vpmax\", elts_same_2, F32 :: su_8_32;\n-    Vpmin, [], All (3, Dreg), \"vpmin\", elts_same_2, F32 :: su_8_32;\n-\n-    (* Reciprocal step.  *)\n-    Vrecps, [], All (3, Dreg), \"vrecps\", elts_same_2, [F32];\n-    Vrecps, [], All (3, Qreg), \"vrecpsQ\", elts_same_2, [F32];\n-    Vrsqrts, [], All (3, Dreg), \"vrsqrts\", elts_same_2, [F32];\n-    Vrsqrts, [], All (3, Qreg), \"vrsqrtsQ\", elts_same_2, [F32];\n-\n-    (* Vector shift left.  *)\n-    Vshl, [], All (3, Dreg), \"vshl\", reg_shift, su_8_64;\n-    Vshl, [], All (3, Qreg), \"vshlQ\", reg_shift, su_8_64;\n-    Vshl, [Instruction_name [\"vrshl\"]; Rounding],\n-      All (3, Dreg), \"vRshl\", reg_shift, su_8_64;\n-    Vshl, [Instruction_name [\"vrshl\"]; Rounding],\n-      All (3, Qreg), \"vRshlQ\", reg_shift, su_8_64;\n-    Vshl, [Saturating], All (3, Dreg), \"vqshl\", reg_shift, su_8_64;\n-    Vshl, [Saturating], All (3, Qreg), \"vqshlQ\", reg_shift, su_8_64;\n-    Vshl, [Instruction_name [\"vqrshl\"]; Saturating; Rounding],\n-      All (3, Dreg), \"vqRshl\", reg_shift, su_8_64;\n-    Vshl, [Instruction_name [\"vqrshl\"]; Saturating; Rounding],\n-      All (3, Qreg), \"vqRshlQ\", reg_shift, su_8_64;\n-\n-    (* Vector shift right by constant.  *)\n-    Vshr_n, [], Binary_imm Dreg, \"vshr_n\", shift_right, su_8_64;\n-    Vshr_n, [], Binary_imm Qreg, \"vshrQ_n\", shift_right, su_8_64;\n-    Vshr_n, [Instruction_name [\"vrshr\"]; Rounding], Binary_imm Dreg,\n-      \"vRshr_n\", shift_right, su_8_64;\n-    Vshr_n, [Instruction_name [\"vrshr\"]; Rounding], Binary_imm Qreg,\n-      \"vRshrQ_n\", shift_right, su_8_64;\n-    Vshr_n, [], Narrow_imm, \"vshrn_n\", shift_right_sign_invar, su_16_64;\n-    Vshr_n, [Instruction_name [\"vrshrn\"]; Rounding], Narrow_imm, \"vRshrn_n\",\n-      shift_right_sign_invar, su_16_64;\n-    Vshr_n, [Saturating], Narrow_imm, \"vqshrn_n\", shift_right, su_16_64;\n-    Vshr_n, [Instruction_name [\"vqrshrn\"]; Saturating; Rounding], Narrow_imm,\n-      \"vqRshrn_n\", shift_right, su_16_64;\n-    Vshr_n, [Saturating; Dst_unsign], Narrow_imm, \"vqshrun_n\",\n-      shift_right_to_uns, [S16; S32; S64];\n-    Vshr_n, [Instruction_name [\"vqrshrun\"]; Saturating; Dst_unsign; Rounding],\n-      Narrow_imm, \"vqRshrun_n\", shift_right_to_uns, [S16; S32; S64];\n-\n-    (* Vector shift left by constant.  *)\n-    Vshl_n, [], Binary_imm Dreg, \"vshl_n\", shift_left_sign_invar, su_8_64;\n-    Vshl_n, [], Binary_imm Qreg, \"vshlQ_n\", shift_left_sign_invar, su_8_64;\n-    Vshl_n, [Saturating], Binary_imm Dreg, \"vqshl_n\", shift_left, su_8_64;\n-    Vshl_n, [Saturating], Binary_imm Qreg, \"vqshlQ_n\", shift_left, su_8_64;\n-    Vshl_n, [Saturating; Dst_unsign], Binary_imm Dreg, \"vqshlu_n\",\n-      shift_left_to_uns, [S8; S16; S32; S64];\n-    Vshl_n, [Saturating; Dst_unsign], Binary_imm Qreg, \"vqshluQ_n\",\n-      shift_left_to_uns, [S8; S16; S32; S64];\n-    Vshl_n, [], Long_imm, \"vshll_n\", shift_left, su_8_32;\n-\n-    (* Vector shift right by constant and accumulate.  *)\n-    Vsra_n, [], Binary_imm Dreg, \"vsra_n\", shift_right_acc, su_8_64;\n-    Vsra_n, [], Binary_imm Qreg, \"vsraQ_n\", shift_right_acc, su_8_64;\n-    Vsra_n, [Instruction_name [\"vrsra\"]; Rounding], Binary_imm Dreg,\n-      \"vRsra_n\", shift_right_acc, su_8_64;\n-    Vsra_n, [Instruction_name [\"vrsra\"]; Rounding], Binary_imm Qreg,\n-      \"vRsraQ_n\", shift_right_acc, su_8_64;\n-\n-    (* Vector shift right and insert.  *)\n-    Vsri, [Requires_feature \"CRYPTO\"], Use_operands [| Dreg; Dreg; Immed |], \"vsri_n\", shift_insert,\n-      [P64];\n-    Vsri, [], Use_operands [| Dreg; Dreg; Immed |], \"vsri_n\", shift_insert,\n-      P8 :: P16 :: su_8_64;\n-    Vsri, [Requires_feature \"CRYPTO\"], Use_operands [| Qreg; Qreg; Immed |], \"vsriQ_n\", shift_insert,\n-      [P64];\n-    Vsri, [], Use_operands [| Qreg; Qreg; Immed |], \"vsriQ_n\", shift_insert,\n-      P8 :: P16 :: su_8_64;\n-\n-    (* Vector shift left and insert.  *)\n-    Vsli, [Requires_feature \"CRYPTO\"], Use_operands [| Dreg; Dreg; Immed |], \"vsli_n\", shift_insert,\n-      [P64];\n-    Vsli, [], Use_operands [| Dreg; Dreg; Immed |], \"vsli_n\", shift_insert,\n-      P8 :: P16 :: su_8_64;\n-    Vsli, [Requires_feature \"CRYPTO\"], Use_operands [| Qreg; Qreg; Immed |], \"vsliQ_n\", shift_insert,\n-      [P64];\n-    Vsli, [], Use_operands [| Qreg; Qreg; Immed |], \"vsliQ_n\", shift_insert,\n-      P8 :: P16 :: su_8_64;\n-\n-    (* Absolute value.  *)\n-    Vabs, [], All (2, Dreg), \"vabs\", elts_same_1, [S8; S16; S32; F32];\n-    Vabs, [], All (2, Qreg), \"vabsQ\", elts_same_1, [S8; S16; S32; F32];\n-    Vabs, [Saturating], All (2, Dreg), \"vqabs\", elts_same_1, [S8; S16; S32];\n-    Vabs, [Saturating], All (2, Qreg), \"vqabsQ\", elts_same_1, [S8; S16; S32];\n-\n-    (* Negate.  *)\n-    Vneg, [], All (2, Dreg), \"vneg\", elts_same_1, [S8; S16; S32; F32];\n-    Vneg, [], All (2, Qreg), \"vnegQ\", elts_same_1, [S8; S16; S32; F32];\n-    Vneg, [Saturating], All (2, Dreg), \"vqneg\", elts_same_1, [S8; S16; S32];\n-    Vneg, [Saturating], All (2, Qreg), \"vqnegQ\", elts_same_1, [S8; S16; S32];\n-\n-    (* Bitwise not.  *)\n-    Vmvn, [], All (2, Dreg), \"vmvn\", notype_1, P8 :: su_8_32;\n-    Vmvn, [], All (2, Qreg), \"vmvnQ\", notype_1, P8 :: su_8_32;\n-\n-    (* Count leading sign bits.  *)\n-    Vcls, [], All (2, Dreg), \"vcls\", elts_same_1, [S8; S16; S32];\n-    Vcls, [], All (2, Qreg), \"vclsQ\", elts_same_1, [S8; S16; S32];\n-\n-    (* Count leading zeros.  *)\n-    Vclz, [], All (2, Dreg), \"vclz\", sign_invar_1, su_8_32;\n-    Vclz, [], All (2, Qreg), \"vclzQ\", sign_invar_1, su_8_32;\n-\n-    (* Count number of set bits.  *)\n-    Vcnt, [], All (2, Dreg), \"vcnt\", bits_1, [P8; S8; U8];\n-    Vcnt, [], All (2, Qreg), \"vcntQ\", bits_1, [P8; S8; U8];\n-\n-    (* Reciprocal estimate.  *)\n-    Vrecpe, [], All (2, Dreg), \"vrecpe\", elts_same_1, [U32; F32];\n-    Vrecpe, [], All (2, Qreg), \"vrecpeQ\", elts_same_1, [U32; F32];\n-\n-    (* Reciprocal square-root estimate.  *)\n-    Vrsqrte, [], All (2, Dreg), \"vrsqrte\", elts_same_1, [U32; F32];\n-    Vrsqrte, [], All (2, Qreg), \"vrsqrteQ\", elts_same_1, [U32; F32];\n-\n-    (* Get lanes from a vector.  *)\n-    Vget_lane,\n-      [InfoWord; Disassembles_as [Use_operands [| Corereg; Element_of_dreg |]];\n-       Instruction_name [\"vmov\"]],\n-      Use_operands [| Corereg; Dreg; Immed |],\n-      \"vget_lane\", get_lane, pf_su_8_32;\n-    Vget_lane,\n-      [No_op;\n-       InfoWord;\n-       Disassembles_as [Use_operands [| Corereg; Corereg; Dreg |]];\n-       Instruction_name [\"vmov\"]; Const_valuator (fun _ -> 0)],\n-      Use_operands [| Corereg; Dreg; Immed |],\n-      \"vget_lane\", notype_2, [S64; U64];\n-    Vget_lane,\n-      [InfoWord; Disassembles_as [Use_operands [| Corereg; Element_of_dreg |]];\n-       Instruction_name [\"vmov\"]],\n-      Use_operands [| Corereg; Qreg; Immed |],\n-      \"vgetQ_lane\", get_lane, pf_su_8_32;\n-    Vget_lane,\n-      [InfoWord;\n-       Disassembles_as [Use_operands [| Corereg; Corereg; Dreg |]];\n-       Instruction_name [\"vmov\"; \"fmrrd\"]; Const_valuator (fun _ -> 0);\n-       Fixed_core_reg],\n-      Use_operands [| Corereg; Qreg; Immed |],\n-      \"vgetQ_lane\", notype_2, [S64; U64];\n-\n-    (* Set lanes in a vector.  *)\n-    Vset_lane, [Disassembles_as [Use_operands [| Element_of_dreg; Corereg |]];\n-                Instruction_name [\"vmov\"]],\n-      Use_operands [| Dreg; Corereg; Dreg; Immed |], \"vset_lane\",\n-      set_lane, pf_su_8_32;\n-    Vset_lane, [No_op;\n-                Disassembles_as [Use_operands [| Dreg; Corereg; Corereg |]];\n-                Instruction_name [\"vmov\"]; Const_valuator (fun _ -> 0)],\n-      Use_operands [| Dreg; Corereg; Dreg; Immed |], \"vset_lane\",\n-      set_lane_notype, [S64; U64];\n-    Vset_lane, [Disassembles_as [Use_operands [| Element_of_dreg; Corereg |]];\n-                Instruction_name [\"vmov\"]],\n-      Use_operands [| Qreg; Corereg; Qreg; Immed |], \"vsetQ_lane\",\n-      set_lane, pf_su_8_32;\n-    Vset_lane, [Disassembles_as [Use_operands [| Dreg; Corereg; Corereg |]];\n-                Instruction_name [\"vmov\"]; Const_valuator (fun _ -> 0)],\n-      Use_operands [| Qreg; Corereg; Qreg; Immed |], \"vsetQ_lane\",\n-      set_lane_notype, [S64; U64];\n-\n-    (* Create vector from literal bit pattern.  *)\n-    Vcreate,\n-      [Requires_feature \"CRYPTO\"; No_op], (* Not really, but it can yield various things that are too\n-                                   hard for the test generator at this time.  *)\n-      Use_operands [| Dreg; Corereg |], \"vcreate\", create_vector,\n-      [P64];\n-    Vcreate,\n-      [No_op], (* Not really, but it can yield various things that are too\n-                  hard for the test generator at this time.  *)\n-      Use_operands [| Dreg; Corereg |], \"vcreate\", create_vector,\n-      pf_su_8_64;\n-\n-    (* Set all lanes to the same value.  *)\n-    Vdup_n,\n-      [Disassembles_as [Use_operands [| Dreg;\n-                                        Alternatives [ Corereg;\n-                                                       Element_of_dreg ] |]]],\n-      Use_operands [| Dreg; Corereg |], \"vdup_n\", bits_1,\n-      pf_su_8_32;\n-    Vdup_n,\n-      [No_op; Requires_feature \"CRYPTO\";\n-       Instruction_name [\"vmov\"];\n-       Disassembles_as [Use_operands [| Dreg; Corereg; Corereg |]]],\n-      Use_operands [| Dreg; Corereg |], \"vdup_n\", notype_1,\n-      [P64];\n-    Vdup_n,\n-      [No_op;\n-       Instruction_name [\"vmov\"];\n-       Disassembles_as [Use_operands [| Dreg; Corereg; Corereg |]]],\n-      Use_operands [| Dreg; Corereg |], \"vdup_n\", notype_1,\n-      [S64; U64];\n-    Vdup_n,\n-      [No_op; Requires_feature \"CRYPTO\";\n-       Disassembles_as [Use_operands [| Qreg;\n-                                        Alternatives [ Corereg;\n-                                                       Element_of_dreg ] |]]],\n-      Use_operands [| Qreg; Corereg |], \"vdupQ_n\", bits_1,\n-      [P64];\n-    Vdup_n,\n-      [Disassembles_as [Use_operands [| Qreg;\n-                                        Alternatives [ Corereg;\n-                                                       Element_of_dreg ] |]]],\n-      Use_operands [| Qreg; Corereg |], \"vdupQ_n\", bits_1,\n-      pf_su_8_32;\n-    Vdup_n,\n-      [No_op;\n-       Instruction_name [\"vmov\"];\n-       Disassembles_as [Use_operands [| Dreg; Corereg; Corereg |];\n-                        Use_operands [| Dreg; Corereg; Corereg |]]],\n-      Use_operands [| Qreg; Corereg |], \"vdupQ_n\", notype_1,\n-      [S64; U64];\n-\n-    (* These are just aliases for the above.  *)\n-    Vmov_n,\n-      [Builtin_name \"vdup_n\";\n-       Disassembles_as [Use_operands [| Dreg;\n-                                        Alternatives [ Corereg;\n-                                                       Element_of_dreg ] |]]],\n-      Use_operands [| Dreg; Corereg |],\n-      \"vmov_n\", bits_1, pf_su_8_32;\n-    Vmov_n,\n-      [No_op;\n-       Builtin_name \"vdup_n\";\n-       Instruction_name [\"vmov\"];\n-       Disassembles_as [Use_operands [| Dreg; Corereg; Corereg |]]],\n-      Use_operands [| Dreg; Corereg |],\n-      \"vmov_n\", notype_1, [S64; U64];\n-    Vmov_n,\n-      [Builtin_name \"vdupQ_n\";\n-       Disassembles_as [Use_operands [| Qreg;\n-                                        Alternatives [ Corereg;\n-                                                       Element_of_dreg ] |]]],\n-      Use_operands [| Qreg; Corereg |],\n-      \"vmovQ_n\", bits_1, pf_su_8_32;\n-    Vmov_n,\n-      [No_op;\n-       Builtin_name \"vdupQ_n\";\n-       Instruction_name [\"vmov\"];\n-       Disassembles_as [Use_operands [| Dreg; Corereg; Corereg |];\n-                        Use_operands [| Dreg; Corereg; Corereg |]]],\n-      Use_operands [| Qreg; Corereg |],\n-      \"vmovQ_n\", notype_1, [S64; U64];\n-\n-    (* Duplicate, lane version.  We can't use Use_operands here because the\n-       rightmost register (always Dreg) would be picked up by find_key_operand,\n-       when we want the leftmost register to be used in this case (otherwise\n-       the modes are indistinguishable in neon.md, etc.  *)\n-    Vdup_lane,\n-      [Disassembles_as [Use_operands [| Dreg; Element_of_dreg |]]],\n-      Unary_scalar Dreg, \"vdup_lane\", bits_2, pf_su_8_32;\n-    Vdup_lane,\n-      [No_op; Requires_feature \"CRYPTO\"; Const_valuator (fun _ -> 0)],\n-      Unary_scalar Dreg, \"vdup_lane\", bits_2, [P64];\n-    Vdup_lane,\n-      [No_op; Const_valuator (fun _ -> 0)],\n-      Unary_scalar Dreg, \"vdup_lane\", bits_2, [S64; U64];\n-    Vdup_lane,\n-      [Disassembles_as [Use_operands [| Qreg; Element_of_dreg |]]],\n-      Unary_scalar Qreg, \"vdupQ_lane\", bits_2, pf_su_8_32;\n-    Vdup_lane,\n-      [No_op; Requires_feature \"CRYPTO\"; Const_valuator (fun _ -> 0)],\n-      Unary_scalar Qreg, \"vdupQ_lane\", bits_2, [P64];\n-    Vdup_lane,\n-      [No_op; Const_valuator (fun _ -> 0)],\n-      Unary_scalar Qreg, \"vdupQ_lane\", bits_2, [S64; U64];\n-\n-    (* Combining vectors.  *)\n-    Vcombine, [Requires_feature \"CRYPTO\"; No_op],\n-      Use_operands [| Qreg; Dreg; Dreg |], \"vcombine\", notype_2,\n-      [P64];\n-    Vcombine, [No_op],\n-      Use_operands [| Qreg; Dreg; Dreg |], \"vcombine\", notype_2,\n-      pf_su_8_64;\n-\n-    (* Splitting vectors.  *)\n-    Vget_high, [Requires_feature \"CRYPTO\"; No_op],\n-      Use_operands [| Dreg; Qreg |], \"vget_high\",\n-      notype_1, [P64];\n-    Vget_high, [No_op],\n-      Use_operands [| Dreg; Qreg |], \"vget_high\",\n-      notype_1, pf_su_8_64;\n-    Vget_low, [Instruction_name [\"vmov\"];\n-               Disassembles_as [Use_operands [| Dreg; Dreg |]];\n-\t       Fixed_vector_reg],\n-      Use_operands [| Dreg; Qreg |], \"vget_low\",\n-      notype_1, pf_su_8_32;\n-    Vget_low, [Requires_feature \"CRYPTO\"; No_op],\n-      Use_operands [| Dreg; Qreg |], \"vget_low\",\n-      notype_1, [P64];\n-    Vget_low, [No_op],\n-      Use_operands [| Dreg; Qreg |], \"vget_low\",\n-      notype_1, [S64; U64];\n-\n-    (* Conversions.  *)\n-    Vcvt, [InfoWord], All (2, Dreg), \"vcvt\", conv_1,\n-      [Conv (S32, F32); Conv (U32, F32); Conv (F32, S32); Conv (F32, U32)];\n-    Vcvt, [InfoWord], All (2, Qreg), \"vcvtQ\", conv_1,\n-      [Conv (S32, F32); Conv (U32, F32); Conv (F32, S32); Conv (F32, U32)];\n-    Vcvt, [Builtin_name \"vcvt\" ; Requires_FP_bit 1],\n-          Use_operands [| Dreg; Qreg; |], \"vcvt\", conv_1, [Conv (F16, F32)];\n-    Vcvt, [Builtin_name \"vcvt\" ; Requires_FP_bit 1],\n-          Use_operands [| Qreg; Dreg; |], \"vcvt\", conv_1, [Conv (F32, F16)];\n-    Vcvt_n, [InfoWord], Use_operands [| Dreg; Dreg; Immed |], \"vcvt_n\", conv_2,\n-      [Conv (S32, F32); Conv (U32, F32); Conv (F32, S32); Conv (F32, U32)];\n-    Vcvt_n, [InfoWord], Use_operands [| Qreg; Qreg; Immed |], \"vcvtQ_n\", conv_2,\n-      [Conv (S32, F32); Conv (U32, F32); Conv (F32, S32); Conv (F32, U32)];\n-\n-    (* Move, narrowing.  *)\n-    Vmovn, [Disassembles_as [Use_operands [| Dreg; Qreg |]]],\n-      Narrow, \"vmovn\", sign_invar_1, su_16_64;\n-    Vmovn, [Disassembles_as [Use_operands [| Dreg; Qreg |]]; Saturating],\n-      Narrow, \"vqmovn\", elts_same_1, su_16_64;\n-    Vmovn,\n-      [Disassembles_as [Use_operands [| Dreg; Qreg |]]; Saturating; Dst_unsign],\n-      Narrow, \"vqmovun\", dst_unsign_1,\n-      [S16; S32; S64];\n-\n-    (* Move, long.  *)\n-    Vmovl, [Disassembles_as [Use_operands [| Qreg; Dreg |]]],\n-      Long, \"vmovl\", elts_same_1, su_8_32;\n-\n-    (* Table lookup.  *)\n-    Vtbl 1,\n-      [Instruction_name [\"vtbl\"];\n-       Disassembles_as [Use_operands [| Dreg; VecArray (1, Dreg); Dreg |]]],\n-      Use_operands [| Dreg; Dreg; Dreg |], \"vtbl1\", table_2, [U8; S8; P8];\n-    Vtbl 2, [Instruction_name [\"vtbl\"]],\n-      Use_operands [| Dreg; VecArray (2, Dreg); Dreg |], \"vtbl2\", table_2,\n-      [U8; S8; P8];\n-    Vtbl 3, [Instruction_name [\"vtbl\"]],\n-      Use_operands [| Dreg; VecArray (3, Dreg); Dreg |], \"vtbl3\", table_2,\n-      [U8; S8; P8];\n-    Vtbl 4, [Instruction_name [\"vtbl\"]],\n-      Use_operands [| Dreg; VecArray (4, Dreg); Dreg |], \"vtbl4\", table_2,\n-      [U8; S8; P8];\n-\n-    (* Extended table lookup.  *)\n-    Vtbx 1,\n-      [Instruction_name [\"vtbx\"];\n-       Disassembles_as [Use_operands [| Dreg; VecArray (1, Dreg); Dreg |]]],\n-      Use_operands [| Dreg; Dreg; Dreg |], \"vtbx1\", table_io, [U8; S8; P8];\n-    Vtbx 2, [Instruction_name [\"vtbx\"]],\n-      Use_operands [| Dreg; VecArray (2, Dreg); Dreg |], \"vtbx2\", table_io,\n-      [U8; S8; P8];\n-    Vtbx 3, [Instruction_name [\"vtbx\"]],\n-      Use_operands [| Dreg; VecArray (3, Dreg); Dreg |], \"vtbx3\", table_io,\n-      [U8; S8; P8];\n-    Vtbx 4, [Instruction_name [\"vtbx\"]],\n-      Use_operands [| Dreg; VecArray (4, Dreg); Dreg |], \"vtbx4\", table_io,\n-      [U8; S8; P8];\n-\n-    (* Multiply, lane.  (note: these were undocumented at the time of\n-       writing).  *)\n-    Vmul_lane, [], By_scalar Dreg, \"vmul_lane\", sign_invar_2_lane,\n-      [S16; S32; U16; U32; F32];\n-    Vmul_lane, [], By_scalar Qreg, \"vmulQ_lane\", sign_invar_2_lane,\n-      [S16; S32; U16; U32; F32];\n-\n-    (* Multiply-accumulate, lane.  *)\n-    Vmla_lane, [], By_scalar Dreg, \"vmla_lane\", sign_invar_io_lane,\n-      [S16; S32; U16; U32; F32];\n-    Vmla_lane, [], By_scalar Qreg, \"vmlaQ_lane\", sign_invar_io_lane,\n-      [S16; S32; U16; U32; F32];\n-    Vmla_lane, [], Wide_lane, \"vmlal_lane\", elts_same_io_lane,\n-      [S16; S32; U16; U32];\n-    Vmla_lane, [Saturating; Doubling], Wide_lane, \"vqdmlal_lane\",\n-      elts_same_io_lane, [S16; S32];\n-\n-    (* Multiply-subtract, lane.  *)\n-    Vmls_lane, [], By_scalar Dreg, \"vmls_lane\", sign_invar_io_lane,\n-      [S16; S32; U16; U32; F32];\n-    Vmls_lane, [], By_scalar Qreg, \"vmlsQ_lane\", sign_invar_io_lane,\n-      [S16; S32; U16; U32; F32];\n-    Vmls_lane, [], Wide_lane, \"vmlsl_lane\", elts_same_io_lane,\n-      [S16; S32; U16; U32];\n-    Vmls_lane, [Saturating; Doubling], Wide_lane, \"vqdmlsl_lane\",\n-      elts_same_io_lane, [S16; S32];\n-\n-    (* Long multiply, lane.  *)\n-    Vmull_lane, [],\n-      Wide_lane, \"vmull_lane\", elts_same_2_lane, [S16; S32; U16; U32];\n-\n-    (* Saturating doubling long multiply, lane.  *)\n-    Vqdmull_lane, [Saturating; Doubling],\n-      Wide_lane, \"vqdmull_lane\", elts_same_2_lane, [S16; S32];\n-\n-    (* Saturating doubling long multiply high, lane.  *)\n-    Vqdmulh_lane, [Saturating; Halving],\n-      By_scalar Qreg, \"vqdmulhQ_lane\", elts_same_2_lane, [S16; S32];\n-    Vqdmulh_lane, [Saturating; Halving],\n-      By_scalar Dreg, \"vqdmulh_lane\", elts_same_2_lane, [S16; S32];\n-    Vqdmulh_lane, [Saturating; Halving; Rounding;\n-\t\t   Instruction_name [\"vqrdmulh\"]],\n-      By_scalar Qreg, \"vqRdmulhQ_lane\", elts_same_2_lane, [S16; S32];\n-    Vqdmulh_lane, [Saturating; Halving; Rounding;\n-\t\t   Instruction_name [\"vqrdmulh\"]],\n-      By_scalar Dreg, \"vqRdmulh_lane\", elts_same_2_lane, [S16; S32];\n-\n-    (* Vector multiply by scalar.  *)\n-    Vmul_n, [InfoWord;\n-             Disassembles_as [Use_operands [| Dreg; Dreg; Element_of_dreg |]]],\n-             Use_operands [| Dreg; Dreg; Corereg |], \"vmul_n\",\n-      sign_invar_2, [S16; S32; U16; U32; F32];\n-    Vmul_n, [InfoWord;\n-             Disassembles_as [Use_operands [| Qreg; Qreg; Element_of_dreg |]]],\n-             Use_operands [| Qreg; Qreg; Corereg |], \"vmulQ_n\",\n-      sign_invar_2, [S16; S32; U16; U32; F32];\n-\n-    (* Vector long multiply by scalar.  *)\n-    Vmull_n, [Instruction_name [\"vmull\"];\n-              Disassembles_as [Use_operands [| Qreg; Dreg; Element_of_dreg |]]],\n-              Wide_scalar, \"vmull_n\",\n-      elts_same_2, [S16; S32; U16; U32];\n-\n-    (* Vector saturating doubling long multiply by scalar.  *)\n-    Vqdmull_n, [Saturating; Doubling;\n-\t        Disassembles_as [Use_operands [| Qreg; Dreg;\n-\t\t\t\t\t\t Element_of_dreg |]]],\n-                Wide_scalar, \"vqdmull_n\",\n-      elts_same_2, [S16; S32];\n-\n-    (* Vector saturating doubling long multiply high by scalar.  *)\n-    Vqdmulh_n,\n-      [Saturating; Halving; InfoWord;\n-       Disassembles_as [Use_operands [| Qreg; Qreg; Element_of_dreg |]]],\n-      Use_operands [| Qreg; Qreg; Corereg |],\n-      \"vqdmulhQ_n\", elts_same_2, [S16; S32];\n-    Vqdmulh_n,\n-      [Saturating; Halving; InfoWord;\n-       Disassembles_as [Use_operands [| Dreg; Dreg; Element_of_dreg |]]],\n-      Use_operands [| Dreg; Dreg; Corereg |],\n-      \"vqdmulh_n\", elts_same_2, [S16; S32];\n-    Vqdmulh_n,\n-      [Saturating; Halving; Rounding; InfoWord;\n-       Instruction_name [\"vqrdmulh\"];\n-       Disassembles_as [Use_operands [| Qreg; Qreg; Element_of_dreg |]]],\n-      Use_operands [| Qreg; Qreg; Corereg |],\n-      \"vqRdmulhQ_n\", elts_same_2, [S16; S32];\n-    Vqdmulh_n,\n-      [Saturating; Halving; Rounding; InfoWord;\n-       Instruction_name [\"vqrdmulh\"];\n-       Disassembles_as [Use_operands [| Dreg; Dreg; Element_of_dreg |]]],\n-      Use_operands [| Dreg; Dreg; Corereg |],\n-      \"vqRdmulh_n\", elts_same_2, [S16; S32];\n-\n-    (* Vector multiply-accumulate by scalar.  *)\n-    Vmla_n, [InfoWord;\n-             Disassembles_as [Use_operands [| Dreg; Dreg; Element_of_dreg |]]],\n-      Use_operands [| Dreg; Dreg; Corereg |], \"vmla_n\",\n-      sign_invar_io, [S16; S32; U16; U32; F32];\n-    Vmla_n, [InfoWord;\n-             Disassembles_as [Use_operands [| Qreg; Qreg; Element_of_dreg |]]],\n-      Use_operands [| Qreg; Qreg; Corereg |], \"vmlaQ_n\",\n-      sign_invar_io, [S16; S32; U16; U32; F32];\n-    Vmla_n, [], Wide_scalar, \"vmlal_n\", elts_same_io, [S16; S32; U16; U32];\n-    Vmla_n, [Saturating; Doubling], Wide_scalar, \"vqdmlal_n\", elts_same_io,\n-      [S16; S32];\n-\n-    (* Vector multiply subtract by scalar.  *)\n-    Vmls_n, [InfoWord;\n-             Disassembles_as [Use_operands [| Dreg; Dreg; Element_of_dreg |]]],\n-      Use_operands [| Dreg; Dreg; Corereg |], \"vmls_n\",\n-      sign_invar_io, [S16; S32; U16; U32; F32];\n-    Vmls_n, [InfoWord;\n-             Disassembles_as [Use_operands [| Qreg; Qreg; Element_of_dreg |]]],\n-      Use_operands [| Qreg; Qreg; Corereg |], \"vmlsQ_n\",\n-      sign_invar_io, [S16; S32; U16; U32; F32];\n-    Vmls_n, [], Wide_scalar, \"vmlsl_n\", elts_same_io, [S16; S32; U16; U32];\n-    Vmls_n, [Saturating; Doubling], Wide_scalar, \"vqdmlsl_n\", elts_same_io,\n-      [S16; S32];\n-\n-    (* Vector extract.  *)\n-    Vext, [Requires_feature \"CRYPTO\"; Const_valuator (fun _ -> 0)],\n-      Use_operands [| Dreg; Dreg; Dreg; Immed |], \"vext\", extend,\n-      [P64];\n-    Vext, [Const_valuator (fun _ -> 0)],\n-      Use_operands [| Dreg; Dreg; Dreg; Immed |], \"vext\", extend,\n-      pf_su_8_64;\n-    Vext, [Requires_feature \"CRYPTO\"; Const_valuator (fun _ -> 0)],\n-      Use_operands [| Qreg; Qreg; Qreg; Immed |], \"vextQ\", extend,\n-      [P64];\n-    Vext, [Const_valuator (fun _ -> 0)],\n-      Use_operands [| Qreg; Qreg; Qreg; Immed |], \"vextQ\", extend,\n-      pf_su_8_64;\n-\n-    (* Reverse elements.  *)\n-    Vrev64, [Use_shuffle (rev_elems 64)], All (2, Dreg), \"vrev64\", bits_1,\n-      P8 :: P16 :: F32 :: su_8_32;\n-    Vrev64, [Use_shuffle (rev_elems 64)], All (2, Qreg), \"vrev64Q\", bits_1,\n-      P8 :: P16 :: F32 :: su_8_32;\n-    Vrev32, [Use_shuffle (rev_elems 32)], All (2, Dreg), \"vrev32\", bits_1,\n-      [P8; P16; S8; U8; S16; U16];\n-    Vrev32, [Use_shuffle (rev_elems 32)], All (2, Qreg), \"vrev32Q\", bits_1,\n-      [P8; P16; S8; U8; S16; U16];\n-    Vrev16, [Use_shuffle (rev_elems 16)], All (2, Dreg), \"vrev16\", bits_1,\n-      [P8; S8; U8];\n-    Vrev16, [Use_shuffle (rev_elems 16)], All (2, Qreg), \"vrev16Q\", bits_1,\n-      [P8; S8; U8];\n-\n-    (* Bit selection.  *)\n-    Vbsl,\n-      [Requires_feature \"CRYPTO\"; Instruction_name [\"vbsl\"; \"vbit\"; \"vbif\"];\n-       Disassembles_as [Use_operands [| Dreg; Dreg; Dreg |]]],\n-      Use_operands [| Dreg; Dreg; Dreg; Dreg |], \"vbsl\", bit_select,\n-      [P64];\n-    Vbsl,\n-      [Instruction_name [\"vbsl\"; \"vbit\"; \"vbif\"];\n-       Disassembles_as [Use_operands [| Dreg; Dreg; Dreg |]]],\n-      Use_operands [| Dreg; Dreg; Dreg; Dreg |], \"vbsl\", bit_select,\n-      pf_su_8_64;\n-    Vbsl,\n-      [Requires_feature \"CRYPTO\"; Instruction_name [\"vbsl\"; \"vbit\"; \"vbif\"];\n-       Disassembles_as [Use_operands [| Qreg; Qreg; Qreg |]]],\n-      Use_operands [| Qreg; Qreg; Qreg; Qreg |], \"vbslQ\", bit_select,\n-      [P64];\n-    Vbsl,\n-      [Instruction_name [\"vbsl\"; \"vbit\"; \"vbif\"];\n-       Disassembles_as [Use_operands [| Qreg; Qreg; Qreg |]]],\n-      Use_operands [| Qreg; Qreg; Qreg; Qreg |], \"vbslQ\", bit_select,\n-      pf_su_8_64;\n-\n-    Vtrn, [Use_shuffle trn_elems], Pair_result Dreg, \"vtrn\", bits_2, pf_su_8_16;\n-    Vtrn, [Use_shuffle trn_elems; Instruction_name [\"vuzp\"]], Pair_result Dreg, \"vtrn\", bits_2, suf_32;\n-    Vtrn, [Use_shuffle trn_elems], Pair_result Qreg, \"vtrnQ\", bits_2, pf_su_8_32;\n-    (* Zip elements.  *)\n-    Vzip, [Use_shuffle zip_elems], Pair_result Dreg, \"vzip\", bits_2, pf_su_8_16;\n-    Vzip, [Use_shuffle zip_elems; Instruction_name [\"vuzp\"]], Pair_result Dreg, \"vzip\", bits_2, suf_32;\n-    Vzip, [Use_shuffle zip_elems], Pair_result Qreg, \"vzipQ\", bits_2, pf_su_8_32; \n-\n-    (* Unzip elements.  *)\n-    Vuzp, [Use_shuffle uzip_elems], Pair_result Dreg, \"vuzp\", bits_2,\n-      pf_su_8_32;\n-    Vuzp, [Use_shuffle uzip_elems], Pair_result Qreg, \"vuzpQ\", bits_2,\n-      pf_su_8_32;\n-\n-    (* Element/structure loads.  VLD1 variants.  *)\n-    Vldx 1,\n-      [Requires_feature \"CRYPTO\";\n-       Disassembles_as [Use_operands [| VecArray (1, Dreg);\n-                                        CstPtrTo Corereg |]]],\n-      Use_operands [| Dreg; CstPtrTo Corereg |], \"vld1\", bits_1,\n-      [P64];\n-    Vldx 1,\n-      [Disassembles_as [Use_operands [| VecArray (1, Dreg);\n-                                        CstPtrTo Corereg |]]],\n-      Use_operands [| Dreg; CstPtrTo Corereg |], \"vld1\", bits_1,\n-      pf_su_8_64;\n-    Vldx 1, [Requires_feature \"CRYPTO\";\n-             Disassembles_as [Use_operands [| VecArray (2, Dreg);\n-\t\t\t\t\t      CstPtrTo Corereg |]]],\n-      Use_operands [| Qreg; CstPtrTo Corereg |], \"vld1Q\", bits_1,\n-      [P64];\n-    Vldx 1, [Disassembles_as [Use_operands [| VecArray (2, Dreg);\n-\t\t\t\t\t      CstPtrTo Corereg |]]],\n-      Use_operands [| Qreg; CstPtrTo Corereg |], \"vld1Q\", bits_1,\n-      pf_su_8_64;\n-\n-    Vldx_lane 1,\n-      [Disassembles_as [Use_operands [| VecArray (1, Element_of_dreg);\n-                                        CstPtrTo Corereg |]]],\n-      Use_operands [| Dreg; CstPtrTo Corereg; Dreg; Immed |],\n-      \"vld1_lane\", bits_3, pf_su_8_32;\n-    Vldx_lane 1,\n-      [Requires_feature \"CRYPTO\";\n-       Disassembles_as [Use_operands [| VecArray (1, Dreg);\n-                                        CstPtrTo Corereg |]];\n-       Const_valuator (fun _ -> 0)],\n-      Use_operands [| Dreg; CstPtrTo Corereg; Dreg; Immed |],\n-      \"vld1_lane\", bits_3, [P64];\n-    Vldx_lane 1,\n-      [Disassembles_as [Use_operands [| VecArray (1, Dreg);\n-                                        CstPtrTo Corereg |]];\n-       Const_valuator (fun _ -> 0)],\n-      Use_operands [| Dreg; CstPtrTo Corereg; Dreg; Immed |],\n-      \"vld1_lane\", bits_3, [S64; U64];\n-    Vldx_lane 1,\n-      [Disassembles_as [Use_operands [| VecArray (1, Element_of_dreg);\n-                                        CstPtrTo Corereg |]]],\n-      Use_operands [| Qreg; CstPtrTo Corereg; Qreg; Immed |],\n-      \"vld1Q_lane\", bits_3, pf_su_8_32;\n-    Vldx_lane 1,\n-      [Requires_feature \"CRYPTO\";\n-       Disassembles_as [Use_operands [| VecArray (1, Dreg);\n-                                        CstPtrTo Corereg |]]],\n-      Use_operands [| Qreg; CstPtrTo Corereg; Qreg; Immed |],\n-      \"vld1Q_lane\", bits_3, [P64];\n-    Vldx_lane 1,\n-      [Disassembles_as [Use_operands [| VecArray (1, Dreg);\n-                                        CstPtrTo Corereg |]]],\n-      Use_operands [| Qreg; CstPtrTo Corereg; Qreg; Immed |],\n-      \"vld1Q_lane\", bits_3, [S64; U64];\n-\n-    Vldx_dup 1,\n-      [Disassembles_as [Use_operands [| VecArray (1, All_elements_of_dreg);\n-                                        CstPtrTo Corereg |]]],\n-      Use_operands [| Dreg; CstPtrTo Corereg |], \"vld1_dup\",\n-      bits_1, pf_su_8_32;\n-    Vldx_dup 1,\n-      [Requires_feature \"CRYPTO\";\n-       Disassembles_as [Use_operands [| VecArray (1, Dreg);\n-                                        CstPtrTo Corereg |]]],\n-      Use_operands [| Dreg; CstPtrTo Corereg |], \"vld1_dup\",\n-      bits_1, [P64];\n-    Vldx_dup 1,\n-      [Disassembles_as [Use_operands [| VecArray (1, Dreg);\n-                                        CstPtrTo Corereg |]]],\n-      Use_operands [| Dreg; CstPtrTo Corereg |], \"vld1_dup\",\n-      bits_1, [S64; U64];\n-    Vldx_dup 1,\n-      [Disassembles_as [Use_operands [| VecArray (2, All_elements_of_dreg);\n-                                        CstPtrTo Corereg |]]],\n-      Use_operands [| Qreg; CstPtrTo Corereg |], \"vld1Q_dup\",\n-      bits_1, pf_su_8_32;\n-    (* Treated identically to vld1_dup above as we now\n-       do a single load followed by a duplicate.  *)\n-    Vldx_dup 1,\n-      [Requires_feature \"CRYPTO\";\n-       Disassembles_as [Use_operands [| VecArray (1, Dreg);\n-                                        CstPtrTo Corereg |]]],\n-      Use_operands [| Qreg; CstPtrTo Corereg |], \"vld1Q_dup\",\n-      bits_1, [P64];\n-    Vldx_dup 1,\n-      [Disassembles_as [Use_operands [| VecArray (1, Dreg);\n-                                        CstPtrTo Corereg |]]],\n-      Use_operands [| Qreg; CstPtrTo Corereg |], \"vld1Q_dup\",\n-      bits_1, [S64; U64];\n-\n-    (* VST1 variants.  *)\n-    Vstx 1, [Requires_feature \"CRYPTO\";\n-             Disassembles_as [Use_operands [| VecArray (1, Dreg);\n-                                              PtrTo Corereg |]]],\n-      Use_operands [| PtrTo Corereg; Dreg |], \"vst1\",\n-      store_1, [P64];\n-    Vstx 1, [Disassembles_as [Use_operands [| VecArray (1, Dreg);\n-                                              PtrTo Corereg |]]],\n-      Use_operands [| PtrTo Corereg; Dreg |], \"vst1\",\n-      store_1, pf_su_8_64;\n-    Vstx 1, [Requires_feature \"CRYPTO\";\n-             Disassembles_as [Use_operands [| VecArray (2, Dreg);\n-\t\t\t\t\t      PtrTo Corereg |]]],\n-      Use_operands [| PtrTo Corereg; Qreg |], \"vst1Q\",\n-      store_1, [P64];\n-    Vstx 1, [Disassembles_as [Use_operands [| VecArray (2, Dreg);\n-\t\t\t\t\t      PtrTo Corereg |]]],\n-      Use_operands [| PtrTo Corereg; Qreg |], \"vst1Q\",\n-      store_1, pf_su_8_64;\n-\n-    Vstx_lane 1,\n-      [Disassembles_as [Use_operands [| VecArray (1, Element_of_dreg);\n-                                        CstPtrTo Corereg |]]],\n-      Use_operands [| PtrTo Corereg; Dreg; Immed |],\n-      \"vst1_lane\", store_3, pf_su_8_32;\n-    Vstx_lane 1,\n-      [Requires_feature \"CRYPTO\";\n-       Disassembles_as [Use_operands [| VecArray (1, Dreg);\n-                                        CstPtrTo Corereg |]];\n-       Const_valuator (fun _ -> 0)],\n-      Use_operands [| PtrTo Corereg; Dreg; Immed |],\n-      \"vst1_lane\", store_3, [P64];\n-    Vstx_lane 1,\n-      [Disassembles_as [Use_operands [| VecArray (1, Dreg);\n-                                        CstPtrTo Corereg |]];\n-       Const_valuator (fun _ -> 0)],\n-      Use_operands [| PtrTo Corereg; Dreg; Immed |],\n-      \"vst1_lane\", store_3, [U64; S64];\n-    Vstx_lane 1,\n-      [Disassembles_as [Use_operands [| VecArray (1, Element_of_dreg);\n-                                        CstPtrTo Corereg |]]],\n-      Use_operands [| PtrTo Corereg; Qreg; Immed |],\n-      \"vst1Q_lane\", store_3, pf_su_8_32;\n-    Vstx_lane 1,\n-      [Requires_feature \"CRYPTO\";\n-       Disassembles_as [Use_operands [| VecArray (1, Dreg);\n-                                        CstPtrTo Corereg |]]],\n-      Use_operands [| PtrTo Corereg; Qreg; Immed |],\n-      \"vst1Q_lane\", store_3, [P64];\n-    Vstx_lane 1,\n-      [Disassembles_as [Use_operands [| VecArray (1, Dreg);\n-                                        CstPtrTo Corereg |]]],\n-      Use_operands [| PtrTo Corereg; Qreg; Immed |],\n-      \"vst1Q_lane\", store_3, [U64; S64];\n-\n-    (* VLD2 variants.  *)\n-    Vldx 2, [], Use_operands [| VecArray (2, Dreg); CstPtrTo Corereg |],\n-      \"vld2\", bits_1, pf_su_8_32;\n-    Vldx 2, [Requires_feature \"CRYPTO\"; Instruction_name [\"vld1\"]],\n-       Use_operands [| VecArray (2, Dreg); CstPtrTo Corereg |],\n-      \"vld2\", bits_1, [P64];\n-    Vldx 2, [Instruction_name [\"vld1\"]],\n-       Use_operands [| VecArray (2, Dreg); CstPtrTo Corereg |],\n-      \"vld2\", bits_1, [S64; U64];\n-    Vldx 2, [Disassembles_as [Use_operands [| VecArray (2, Dreg);\n-                                              CstPtrTo Corereg |];\n-                              Use_operands [| VecArray (2, Dreg);\n-\t\t\t\t\t      CstPtrTo Corereg |]]],\n-      Use_operands [| VecArray (2, Qreg); CstPtrTo Corereg |],\n-      \"vld2Q\", bits_1, pf_su_8_32;\n-\n-    Vldx_lane 2,\n-      [Disassembles_as [Use_operands\n-        [| VecArray (2, Element_of_dreg);\n-           CstPtrTo Corereg |]]],\n-      Use_operands [| VecArray (2, Dreg); CstPtrTo Corereg;\n-                      VecArray (2, Dreg); Immed |],\n-      \"vld2_lane\", bits_3, P8 :: P16 :: F32 :: su_8_32;\n-    Vldx_lane 2,\n-      [Disassembles_as [Use_operands\n-        [| VecArray (2, Element_of_dreg);\n-           CstPtrTo Corereg |]]],\n-      Use_operands [| VecArray (2, Qreg); CstPtrTo Corereg;\n- \t              VecArray (2, Qreg); Immed |],\n-      \"vld2Q_lane\", bits_3, [P16; F32; U16; U32; S16; S32];\n-\n-    Vldx_dup 2,\n-      [Disassembles_as [Use_operands\n-        [| VecArray (2, All_elements_of_dreg); CstPtrTo Corereg |]]],\n-      Use_operands [| VecArray (2, Dreg); CstPtrTo Corereg |],\n-      \"vld2_dup\", bits_1, pf_su_8_32;\n-    Vldx_dup 2,\n-      [Requires_feature \"CRYPTO\";\n-       Instruction_name [\"vld1\"]; Disassembles_as [Use_operands\n-        [| VecArray (2, Dreg); CstPtrTo Corereg |]]],\n-      Use_operands [| VecArray (2, Dreg); CstPtrTo Corereg |],\n-      \"vld2_dup\", bits_1, [P64];\n-    Vldx_dup 2,\n-      [Instruction_name [\"vld1\"]; Disassembles_as [Use_operands\n-        [| VecArray (2, Dreg); CstPtrTo Corereg |]]],\n-      Use_operands [| VecArray (2, Dreg); CstPtrTo Corereg |],\n-      \"vld2_dup\", bits_1, [S64; U64];\n-\n-    (* VST2 variants.  *)\n-    Vstx 2, [Disassembles_as [Use_operands [| VecArray (2, Dreg);\n-                                              PtrTo Corereg |]]],\n-      Use_operands [| PtrTo Corereg; VecArray (2, Dreg) |], \"vst2\",\n-      store_1, pf_su_8_32;\n-    Vstx 2, [Requires_feature \"CRYPTO\";\n-             Disassembles_as [Use_operands [| VecArray (2, Dreg);\n-                                              PtrTo Corereg |]];\n-             Instruction_name [\"vst1\"]],\n-      Use_operands [| PtrTo Corereg; VecArray (2, Dreg) |], \"vst2\",\n-      store_1, [P64];\n-    Vstx 2, [Disassembles_as [Use_operands [| VecArray (2, Dreg);\n-                                              PtrTo Corereg |]];\n-             Instruction_name [\"vst1\"]],\n-      Use_operands [| PtrTo Corereg; VecArray (2, Dreg) |], \"vst2\",\n-      store_1, [S64; U64];\n-    Vstx 2, [Disassembles_as [Use_operands [| VecArray (2, Dreg);\n-\t\t\t\t\t      PtrTo Corereg |];\n-                              Use_operands [| VecArray (2, Dreg);\n-\t\t\t\t              PtrTo Corereg |]]],\n-      Use_operands [| PtrTo Corereg; VecArray (2, Qreg) |], \"vst2Q\",\n-      store_1, pf_su_8_32;\n-\n-    Vstx_lane 2,\n-      [Disassembles_as [Use_operands\n-        [| VecArray (2, Element_of_dreg);\n-           CstPtrTo Corereg |]]],\n-      Use_operands [| PtrTo Corereg; VecArray (2, Dreg); Immed |], \"vst2_lane\",\n-      store_3, P8 :: P16 :: F32 :: su_8_32;\n-    Vstx_lane 2,\n-      [Disassembles_as [Use_operands\n-        [| VecArray (2, Element_of_dreg);\n-           CstPtrTo Corereg |]]],\n-      Use_operands [| PtrTo Corereg; VecArray (2, Qreg); Immed |], \"vst2Q_lane\",\n-      store_3, [P16; F32; U16; U32; S16; S32];\n-\n-    (* VLD3 variants.  *)\n-    Vldx 3, [], Use_operands [| VecArray (3, Dreg); CstPtrTo Corereg |],\n-      \"vld3\", bits_1, pf_su_8_32;\n-    Vldx 3, [Requires_feature \"CRYPTO\"; Instruction_name [\"vld1\"]],\n-      Use_operands [| VecArray (3, Dreg); CstPtrTo Corereg |],\n-      \"vld3\", bits_1, [P64];\n-    Vldx 3, [Instruction_name [\"vld1\"]],\n-      Use_operands [| VecArray (3, Dreg); CstPtrTo Corereg |],\n-      \"vld3\", bits_1, [S64; U64];\n-    Vldx 3, [Disassembles_as [Use_operands [| VecArray (3, Dreg);\n-\t\t\t\t\t      CstPtrTo Corereg |];\n-                              Use_operands [| VecArray (3, Dreg);\n-\t\t\t\t\t      CstPtrTo Corereg |]]],\n-      Use_operands [| VecArray (3, Qreg); CstPtrTo Corereg |],\n-      \"vld3Q\", bits_1, P8 :: P16 :: F32 :: su_8_32;\n-\n-    Vldx_lane 3,\n-      [Disassembles_as [Use_operands\n-        [| VecArray (3, Element_of_dreg);\n-           CstPtrTo Corereg |]]],\n-      Use_operands [| VecArray (3, Dreg); CstPtrTo Corereg;\n-                                     VecArray (3, Dreg); Immed |],\n-      \"vld3_lane\", bits_3, P8 :: P16 :: F32 :: su_8_32;\n-    Vldx_lane 3,\n-      [Disassembles_as [Use_operands\n-        [| VecArray (3, Element_of_dreg);\n-           CstPtrTo Corereg |]]],\n-      Use_operands [| VecArray (3, Qreg); CstPtrTo Corereg;\n-\t\t\t\t     VecArray (3, Qreg); Immed |],\n-      \"vld3Q_lane\", bits_3, [P16; F32; U16; U32; S16; S32];\n-\n-    Vldx_dup 3,\n-      [Disassembles_as [Use_operands\n-        [| VecArray (3, All_elements_of_dreg); CstPtrTo Corereg |]]],\n-      Use_operands [| VecArray (3, Dreg); CstPtrTo Corereg |],\n-      \"vld3_dup\", bits_1, pf_su_8_32;\n-    Vldx_dup 3,\n-      [Requires_feature \"CRYPTO\";\n-       Instruction_name [\"vld1\"]; Disassembles_as [Use_operands\n-        [| VecArray (3, Dreg); CstPtrTo Corereg |]]],\n-      Use_operands [| VecArray (3, Dreg); CstPtrTo Corereg |],\n-      \"vld3_dup\", bits_1, [P64];\n-    Vldx_dup 3,\n-      [Instruction_name [\"vld1\"]; Disassembles_as [Use_operands\n-        [| VecArray (3, Dreg); CstPtrTo Corereg |]]],\n-      Use_operands [| VecArray (3, Dreg); CstPtrTo Corereg |],\n-      \"vld3_dup\", bits_1, [S64; U64];\n-\n-    (* VST3 variants.  *)\n-    Vstx 3, [Disassembles_as [Use_operands [| VecArray (4, Dreg);\n-                                              PtrTo Corereg |]]],\n-      Use_operands [| PtrTo Corereg; VecArray (3, Dreg) |], \"vst3\",\n-      store_1, pf_su_8_32;\n-    Vstx 3, [Requires_feature \"CRYPTO\";\n-             Disassembles_as [Use_operands [| VecArray (4, Dreg);\n-                                              PtrTo Corereg |]];\n-             Instruction_name [\"vst1\"]],\n-      Use_operands [| PtrTo Corereg; VecArray (3, Dreg) |], \"vst3\",\n-      store_1, [P64];\n-    Vstx 3, [Disassembles_as [Use_operands [| VecArray (4, Dreg);\n-                                              PtrTo Corereg |]];\n-             Instruction_name [\"vst1\"]],\n-      Use_operands [| PtrTo Corereg; VecArray (3, Dreg) |], \"vst3\",\n-      store_1, [S64; U64];\n-    Vstx 3, [Disassembles_as [Use_operands [| VecArray (3, Dreg);\n-\t\t\t\t\t      PtrTo Corereg |];\n-                              Use_operands [| VecArray (3, Dreg);\n-\t\t\t\t\t      PtrTo Corereg |]]],\n-      Use_operands [| PtrTo Corereg; VecArray (3, Qreg) |], \"vst3Q\",\n-      store_1, pf_su_8_32;\n-\n-    Vstx_lane 3,\n-      [Disassembles_as [Use_operands\n-        [| VecArray (3, Element_of_dreg);\n-           CstPtrTo Corereg |]]],\n-      Use_operands [| PtrTo Corereg; VecArray (3, Dreg); Immed |], \"vst3_lane\",\n-      store_3, P8 :: P16 :: F32 :: su_8_32;\n-    Vstx_lane 3,\n-      [Disassembles_as [Use_operands\n-        [| VecArray (3, Element_of_dreg);\n-           CstPtrTo Corereg |]]],\n-      Use_operands [| PtrTo Corereg; VecArray (3, Qreg); Immed |], \"vst3Q_lane\",\n-      store_3, [P16; F32; U16; U32; S16; S32];\n-\n-    (* VLD4/VST4 variants.  *)\n-    Vldx 4, [], Use_operands [| VecArray (4, Dreg); CstPtrTo Corereg |],\n-      \"vld4\", bits_1, pf_su_8_32;\n-    Vldx 4, [Requires_feature \"CRYPTO\"; Instruction_name [\"vld1\"]],\n-      Use_operands [| VecArray (4, Dreg); CstPtrTo Corereg |],\n-      \"vld4\", bits_1, [P64];\n-    Vldx 4, [Instruction_name [\"vld1\"]],\n-      Use_operands [| VecArray (4, Dreg); CstPtrTo Corereg |],\n-      \"vld4\", bits_1, [S64; U64];\n-    Vldx 4, [Disassembles_as [Use_operands [| VecArray (4, Dreg);\n-\t\t\t\t\t      CstPtrTo Corereg |];\n-                              Use_operands [| VecArray (4, Dreg);\n-\t\t\t\t\t      CstPtrTo Corereg |]]],\n-      Use_operands [| VecArray (4, Qreg); CstPtrTo Corereg |],\n-      \"vld4Q\", bits_1, P8 :: P16 :: F32 :: su_8_32;\n-\n-    Vldx_lane 4,\n-      [Disassembles_as [Use_operands\n-        [| VecArray (4, Element_of_dreg);\n-           CstPtrTo Corereg |]]],\n-      Use_operands [| VecArray (4, Dreg); CstPtrTo Corereg;\n-                                     VecArray (4, Dreg); Immed |],\n-      \"vld4_lane\", bits_3, P8 :: P16 :: F32 :: su_8_32;\n-    Vldx_lane 4,\n-      [Disassembles_as [Use_operands\n-        [| VecArray (4, Element_of_dreg);\n-           CstPtrTo Corereg |]]],\n-      Use_operands [| VecArray (4, Qreg); CstPtrTo Corereg;\n-   \t              VecArray (4, Qreg); Immed |],\n-      \"vld4Q_lane\", bits_3, [P16; F32; U16; U32; S16; S32];\n-\n-    Vldx_dup 4,\n-      [Disassembles_as [Use_operands\n-        [| VecArray (4, All_elements_of_dreg); CstPtrTo Corereg |]]],\n-      Use_operands [| VecArray (4, Dreg); CstPtrTo Corereg |],\n-      \"vld4_dup\", bits_1, pf_su_8_32;\n-    Vldx_dup 4,\n-      [Requires_feature \"CRYPTO\";\n-       Instruction_name [\"vld1\"]; Disassembles_as [Use_operands\n-        [| VecArray (4, Dreg); CstPtrTo Corereg |]]],\n-      Use_operands [| VecArray (4, Dreg); CstPtrTo Corereg |],\n-      \"vld4_dup\", bits_1, [P64];\n-    Vldx_dup 4,\n-      [Instruction_name [\"vld1\"]; Disassembles_as [Use_operands\n-        [| VecArray (4, Dreg); CstPtrTo Corereg |]]],\n-      Use_operands [| VecArray (4, Dreg); CstPtrTo Corereg |],\n-      \"vld4_dup\", bits_1, [S64; U64];\n-\n-    Vstx 4, [Disassembles_as [Use_operands [| VecArray (4, Dreg);\n-                                              PtrTo Corereg |]]],\n-      Use_operands [| PtrTo Corereg; VecArray (4, Dreg) |], \"vst4\",\n-      store_1, pf_su_8_32;\n-    Vstx 4, [Requires_feature \"CRYPTO\";\n-             Disassembles_as [Use_operands [| VecArray (4, Dreg);\n-                                              PtrTo Corereg |]];\n-             Instruction_name [\"vst1\"]],\n-      Use_operands [| PtrTo Corereg; VecArray (4, Dreg) |], \"vst4\",\n-      store_1, [P64];\n-    Vstx 4, [Disassembles_as [Use_operands [| VecArray (4, Dreg);\n-                                              PtrTo Corereg |]];\n-             Instruction_name [\"vst1\"]],\n-      Use_operands [| PtrTo Corereg; VecArray (4, Dreg) |], \"vst4\",\n-      store_1, [S64; U64];\n-    Vstx 4, [Disassembles_as [Use_operands [| VecArray (4, Dreg);\n-\t\t\t\t\t      PtrTo Corereg |];\n-                              Use_operands [| VecArray (4, Dreg);\n-\t\t\t\t\t      PtrTo Corereg |]]],\n-     Use_operands [| PtrTo Corereg; VecArray (4, Qreg) |], \"vst4Q\",\n-      store_1, pf_su_8_32;\n-\n-    Vstx_lane 4,\n-      [Disassembles_as [Use_operands\n-        [| VecArray (4, Element_of_dreg);\n-           CstPtrTo Corereg |]]],\n-      Use_operands [| PtrTo Corereg; VecArray (4, Dreg); Immed |], \"vst4_lane\",\n-      store_3, P8 :: P16 :: F32 :: su_8_32;\n-    Vstx_lane 4,\n-      [Disassembles_as [Use_operands\n-        [| VecArray (4, Element_of_dreg);\n-           CstPtrTo Corereg |]]],\n-      Use_operands [| PtrTo Corereg; VecArray (4, Qreg); Immed |], \"vst4Q_lane\",\n-      store_3, [P16; F32; U16; U32; S16; S32];\n-\n-    (* Logical operations. And.  *)\n-    Vand, [], All (3, Dreg), \"vand\", notype_2, su_8_32;\n-    Vand, [No_op], All (3, Dreg), \"vand\", notype_2, [S64; U64];\n-    Vand, [], All (3, Qreg), \"vandQ\", notype_2, su_8_64;\n-\n-    (* Or.  *)\n-    Vorr, [], All (3, Dreg), \"vorr\", notype_2, su_8_32;\n-    Vorr, [No_op], All (3, Dreg), \"vorr\", notype_2, [S64; U64];\n-    Vorr, [], All (3, Qreg), \"vorrQ\", notype_2, su_8_64;\n-\n-    (* Eor.  *)\n-    Veor, [], All (3, Dreg), \"veor\", notype_2, su_8_32;\n-    Veor, [No_op], All (3, Dreg), \"veor\", notype_2, [S64; U64];\n-    Veor, [], All (3, Qreg), \"veorQ\", notype_2, su_8_64;\n-\n-    (* Bic (And-not).  *)\n-    Vbic, [Compiler_optim \"-O2\"], All (3, Dreg), \"vbic\", notype_2, su_8_32;\n-    Vbic, [No_op; Compiler_optim \"-O2\"], All (3, Dreg), \"vbic\", notype_2, [S64; U64];\n-    Vbic, [Compiler_optim \"-O2\"], All (3, Qreg), \"vbicQ\", notype_2, su_8_64;\n-\n-    (* Or-not.  *)\n-    Vorn, [Compiler_optim \"-O2\"], All (3, Dreg), \"vorn\", notype_2, su_8_32;\n-    Vorn, [No_op; Compiler_optim \"-O2\"], All (3, Dreg), \"vorn\", notype_2, [S64; U64];\n-    Vorn, [Compiler_optim \"-O2\"], All (3, Qreg), \"vornQ\", notype_2, su_8_64;\n-  ]\n-\n-let type_in_crypto_only t\n-  = (t == P64) || (t == P128)\n-\n-let cross_product s1 s2\n-  = List.filter (fun (e, e') -> e <> e')\n-                (List.concat (List.map (fun e1 -> List.map (fun e2 -> (e1,e2)) s1) s2))\n-\n-let reinterp =\n-  let elems = P8 :: P16 :: F32 :: P64 :: su_8_64 in\n-  let casts = cross_product elems elems in\n-  List.map\n-    (fun (convto, convfrom) ->\n-       Vreinterp, (if (type_in_crypto_only convto) || (type_in_crypto_only convfrom)\n-                   then [Requires_feature \"CRYPTO\"] else []) @ [No_op], Use_operands [| Dreg; Dreg |],\n-                   \"vreinterpret\", conv_1, [Cast (convto, convfrom)])\n-    casts\n-\n-let reinterpq =\n-  let elems = P8 :: P16 :: F32 :: P64 :: P128 :: su_8_64 in\n-  let casts = cross_product elems elems in\n-  List.map\n-    (fun (convto, convfrom) ->\n-       Vreinterp, (if (type_in_crypto_only convto) || (type_in_crypto_only convfrom)\n-                   then [Requires_feature \"CRYPTO\"] else []) @ [No_op], Use_operands [| Qreg; Qreg |],\n-                   \"vreinterpretQ\", conv_1, [Cast (convto, convfrom)])\n-    casts\n-\n-(* Output routines.  *)\n-\n-let rec string_of_elt = function\n-    S8 -> \"s8\" | S16 -> \"s16\" | S32 -> \"s32\" | S64 -> \"s64\"\n-  | U8 -> \"u8\" | U16 -> \"u16\" | U32 -> \"u32\" | U64 -> \"u64\"\n-  | I8 -> \"i8\" | I16 -> \"i16\" | I32 -> \"i32\" | I64 -> \"i64\"\n-  | B8 -> \"8\" | B16 -> \"16\" | B32 -> \"32\" | B64 -> \"64\"\n-  | F16 -> \"f16\" | F32 -> \"f32\" | P8 -> \"p8\" | P16 -> \"p16\"\n-  | P64 -> \"p64\" | P128 -> \"p128\"\n-  | Conv (a, b) | Cast (a, b) -> string_of_elt a ^ \"_\" ^ string_of_elt b\n-  | NoElts -> failwith \"No elts\"\n-\n-let string_of_elt_dots elt =\n-  match elt with\n-    Conv (a, b) | Cast (a, b) -> string_of_elt a ^ \".\" ^ string_of_elt b\n-  | _ -> string_of_elt elt\n-\n-let string_of_vectype vt =\n-  let rec name affix = function\n-    T_int8x8 -> affix \"int8x8\"\n-  | T_int8x16 -> affix \"int8x16\"\n-  | T_int16x4 -> affix \"int16x4\"\n-  | T_int16x8 -> affix \"int16x8\"\n-  | T_int32x2 -> affix \"int32x2\"\n-  | T_int32x4 -> affix \"int32x4\"\n-  | T_int64x1 -> affix \"int64x1\"\n-  | T_int64x2 -> affix \"int64x2\"\n-  | T_uint8x8 -> affix \"uint8x8\"\n-  | T_uint8x16 -> affix \"uint8x16\"\n-  | T_uint16x4 -> affix \"uint16x4\"\n-  | T_uint16x8 -> affix \"uint16x8\"\n-  | T_uint32x2 -> affix \"uint32x2\"\n-  | T_uint32x4 -> affix \"uint32x4\"\n-  | T_uint64x1 -> affix \"uint64x1\"\n-  | T_uint64x2 -> affix \"uint64x2\"\n-  | T_float16x4 -> affix \"float16x4\"\n-  | T_float32x2 -> affix \"float32x2\"\n-  | T_float32x4 -> affix \"float32x4\"\n-  | T_poly8x8 -> affix \"poly8x8\"\n-  | T_poly8x16 -> affix \"poly8x16\"\n-  | T_poly16x4 -> affix \"poly16x4\"\n-  | T_poly16x8 -> affix \"poly16x8\"\n-  | T_int8 -> affix \"int8\"\n-  | T_int16 -> affix \"int16\"\n-  | T_int32 -> affix \"int32\"\n-  | T_int64 -> affix \"int64\"\n-  | T_uint8 -> affix \"uint8\"\n-  | T_uint16 -> affix \"uint16\"\n-  | T_uint32 -> affix \"uint32\"\n-  | T_uint64 -> affix \"uint64\"\n-  | T_poly8 -> affix \"poly8\"\n-  | T_poly16 -> affix \"poly16\"\n-  | T_poly64 -> affix \"poly64\"\n-  | T_poly64x1 -> affix \"poly64x1\"\n-  | T_poly64x2 -> affix \"poly64x2\"\n-  | T_poly128 -> affix \"poly128\"\n-  | T_float16 -> affix \"float16\"\n-  | T_float32 -> affix \"float32\"\n-  | T_immediate _ -> \"const int\"\n-  | T_void -> \"void\"\n-  | T_intQI -> \"__builtin_neon_qi\"\n-  | T_intHI -> \"__builtin_neon_hi\"\n-  | T_intSI -> \"__builtin_neon_si\"\n-  | T_intDI -> \"__builtin_neon_di\"\n-  | T_intTI -> \"__builtin_neon_ti\"\n-  | T_floatHF -> \"__builtin_neon_hf\"\n-  | T_floatSF -> \"__builtin_neon_sf\"\n-  | T_arrayof (num, base) ->\n-      let basename = name (fun x -> x) base in\n-      affix (Printf.sprintf \"%sx%d\" basename num)\n-  | T_ptrto x ->\n-      let basename = name affix x in\n-      Printf.sprintf \"%s *\" basename\n-  | T_const x ->\n-      let basename = name affix x in\n-      Printf.sprintf \"const %s\" basename\n-  in\n-    name (fun x -> x ^ \"_t\") vt\n-\n-let string_of_inttype = function\n-    B_TImode -> \"__builtin_neon_ti\"\n-  | B_EImode -> \"__builtin_neon_ei\"\n-  | B_OImode -> \"__builtin_neon_oi\"\n-  | B_CImode -> \"__builtin_neon_ci\"\n-  | B_XImode -> \"__builtin_neon_xi\"\n-\n-let string_of_mode = function\n-    V8QI -> \"v8qi\" | V4HI -> \"v4hi\" | V4HF  -> \"v4hf\"  | V2SI -> \"v2si\"\n-  | V2SF -> \"v2sf\" | DI   -> \"di\"   | V16QI -> \"v16qi\" | V8HI -> \"v8hi\"\n-  | V4SI -> \"v4si\" | V4SF -> \"v4sf\" | V2DI  -> \"v2di\"  | QI   -> \"qi\"\n-  | HI -> \"hi\" | SI -> \"si\" | SF -> \"sf\" | TI -> \"ti\"\n-\n-(* Use uppercase chars for letters which form part of the intrinsic name, but\n-   should be omitted from the builtin name (the info is passed in an extra\n-   argument, instead).  *)\n-let intrinsic_name name = String.lowercase name\n-\n-(* Allow the name of the builtin to be overridden by things (e.g. Flipped)\n-   found in the features list.  *)\n-let builtin_name features name =\n-  let name = List.fold_right\n-               (fun el name ->\n-                 match el with\n-                   Flipped x | Builtin_name x -> x\n-                 | _ -> name)\n-               features name in\n-  let islower x = let str = String.make 1 x in (String.lowercase str) = str\n-  and buf = Buffer.create (String.length name) in\n-  String.iter (fun c -> if islower c then Buffer.add_char buf c) name;\n-  Buffer.contents buf\n-\n-(* Transform an arity into a list of strings.  *)\n-let strings_of_arity a =\n-  match a with\n-  | Arity0 vt -> [string_of_vectype vt]\n-  | Arity1 (vt1, vt2) -> [string_of_vectype vt1; string_of_vectype vt2]\n-  | Arity2 (vt1, vt2, vt3) -> [string_of_vectype vt1;\n-\t\t\t       string_of_vectype vt2;\n-                               string_of_vectype vt3]\n-  | Arity3 (vt1, vt2, vt3, vt4) -> [string_of_vectype vt1;\n-                                    string_of_vectype vt2;\n-                                    string_of_vectype vt3;\n-                                    string_of_vectype vt4]\n-  | Arity4 (vt1, vt2, vt3, vt4, vt5) -> [string_of_vectype vt1;\n-                                         string_of_vectype vt2;\n-                                         string_of_vectype vt3;\n-                                         string_of_vectype vt4;\n-                                         string_of_vectype vt5]\n-\n-(* Suffixes on the end of builtin names that are to be stripped in order\n-   to obtain the name used as an instruction.  They are only stripped if\n-   preceded immediately by an underscore.  *)\n-let suffixes_to_strip = [ \"n\"; \"lane\"; \"dup\" ]\n-\n-(* Get the possible names of an instruction corresponding to a \"name\" from the\n-   ops table.  This is done by getting the equivalent builtin name and\n-   stripping any suffixes from the list at the top of this file, unless\n-   the features list presents with an Instruction_name entry, in which\n-   case that is used; or unless the features list presents with a Flipped\n-   entry, in which case that is used.  If both such entries are present,\n-   the first in the list will be chosen.  *)\n-let get_insn_names features name =\n-  let names = try\n-  begin\n-    match List.find (fun feature -> match feature with\n-                                      Instruction_name _ -> true\n-\t\t\t\t    | Flipped _ -> true\n-\t\t\t\t    | _ -> false) features\n-    with\n-      Instruction_name names -> names\n-    | Flipped name -> [name]\n-    | _ -> assert false\n-  end\n-  with Not_found -> [builtin_name features name]\n-  in\n-  begin\n-    List.map (fun name' ->\n-      try\n-        let underscore = String.rindex name' '_' in\n-        let our_suffix = String.sub name' (underscore + 1)\n-                                    ((String.length name') - underscore - 1)\n-        in\n-          let rec strip remaining_suffixes =\n-            match remaining_suffixes with\n-              [] -> name'\n-            | s::ss when our_suffix = s -> String.sub name' 0 underscore\n-            | _::ss -> strip ss\n-          in\n-            strip suffixes_to_strip\n-      with (Not_found | Invalid_argument _) -> name') names\n-  end\n-\n-(* Apply a function to each element of a list and then comma-separate\n-   the resulting strings.  *)\n-let rec commas f elts acc =\n-  match elts with\n-    [] -> acc\n-  | [elt] -> acc ^ (f elt)\n-  | elt::elts ->\n-    commas f elts (acc ^ (f elt) ^ \", \")\n-\n-(* Given a list of features and the shape specified in the \"ops\" table, apply\n-   a function to each possible shape that the instruction may have.\n-   By default, this is the \"shape\" entry in \"ops\".  If the features list\n-   contains a Disassembles_as entry, the shapes contained in that entry are\n-   mapped to corresponding outputs and returned in a list.  If there is more\n-   than one Disassembles_as entry, only the first is used.  *)\n-let analyze_all_shapes features shape f =\n-  try\n-    match List.find (fun feature ->\n-                       match feature with Disassembles_as _ -> true\n-                                        | _ -> false)\n-                    features with\n-      Disassembles_as shapes -> List.map f shapes\n-    | _ -> assert false\n-  with Not_found -> [f shape]\n-\n-(* The crypto intrinsics have unconventional shapes and are not that\n-   numerous to be worth the trouble of encoding here.  We implement them\n-   explicitly here.  *)\n-let crypto_intrinsics =\n-\"\n-#ifdef __ARM_FEATURE_CRYPTO\n-\n-__extension__ static __inline poly128_t __attribute__ ((__always_inline__))\n-vldrq_p128 (poly128_t const * __ptr)\n-{\n-#ifdef __ARM_BIG_ENDIAN\n-  poly64_t* __ptmp = (poly64_t*) __ptr;\n-  poly64_t __d0 = vld1_p64 (__ptmp);\n-  poly64_t __d1 = vld1_p64 (__ptmp + 1);\n-  return vreinterpretq_p128_p64 (vcombine_p64 (__d1, __d0));\n-#else\n-  return vreinterpretq_p128_p64 (vld1q_p64 ((poly64_t*) __ptr));\n-#endif\n-}\n-\n-__extension__ static __inline void __attribute__ ((__always_inline__))\n-vstrq_p128 (poly128_t * __ptr, poly128_t __val)\n-{\n-#ifdef __ARM_BIG_ENDIAN\n-  poly64x2_t __tmp = vreinterpretq_p64_p128 (__val);\n-  poly64_t __d0 = vget_high_p64 (__tmp);\n-  poly64_t __d1 = vget_low_p64 (__tmp);\n-  vst1q_p64 ((poly64_t*) __ptr, vcombine_p64 (__d0, __d1));\n-#else\n-  vst1q_p64 ((poly64_t*) __ptr, vreinterpretq_p64_p128 (__val));\n-#endif\n-}\n-\n-/* The vceq_p64 intrinsic does not map to a single instruction.\n-   Instead we emulate it by performing a 32-bit variant of the vceq\n-   and applying a pairwise min reduction to the result.\n-   vceq_u32 will produce two 32-bit halves, each of which will contain either\n-   all ones or all zeros depending on whether the corresponding 32-bit\n-   halves of the poly64_t were equal.  The whole poly64_t values are equal\n-   if and only if both halves are equal, i.e. vceq_u32 returns all ones.\n-   If the result is all zeroes for any half then the whole result is zeroes.\n-   This is what the pairwise min reduction achieves.  */\n-\n-__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n-vceq_p64 (poly64x1_t __a, poly64x1_t __b)\n-{\n-  uint32x2_t __t_a = vreinterpret_u32_p64 (__a);\n-  uint32x2_t __t_b = vreinterpret_u32_p64 (__b);\n-  uint32x2_t __c = vceq_u32 (__t_a, __t_b);\n-  uint32x2_t __m = vpmin_u32 (__c, __c);\n-  return vreinterpret_u64_u32 (__m);\n-}\n-\n-/* The vtst_p64 intrinsic does not map to a single instruction.\n-   We emulate it in way similar to vceq_p64 above but here we do\n-   a reduction with max since if any two corresponding bits\n-   in the two poly64_t's match, then the whole result must be all ones.  */\n-\n-__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n-vtst_p64 (poly64x1_t __a, poly64x1_t __b)\n-{\n-  uint32x2_t __t_a = vreinterpret_u32_p64 (__a);\n-  uint32x2_t __t_b = vreinterpret_u32_p64 (__b);\n-  uint32x2_t __c = vtst_u32 (__t_a, __t_b);\n-  uint32x2_t __m = vpmax_u32 (__c, __c);\n-  return vreinterpret_u64_u32 (__m);\n-}\n-\n-__extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n-vaeseq_u8 (uint8x16_t __data, uint8x16_t __key)\n-{\n-  return __builtin_arm_crypto_aese (__data, __key);\n-}\n-\n-__extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n-vaesdq_u8 (uint8x16_t __data, uint8x16_t __key)\n-{\n-  return __builtin_arm_crypto_aesd (__data, __key);\n-}\n-\n-__extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n-vaesmcq_u8 (uint8x16_t __data)\n-{\n-  return __builtin_arm_crypto_aesmc (__data);\n-}\n-\n-__extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n-vaesimcq_u8 (uint8x16_t __data)\n-{\n-  return __builtin_arm_crypto_aesimc (__data);\n-}\n-\n-__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n-vsha1h_u32 (uint32_t __hash_e)\n-{\n-  uint32x4_t __t = vdupq_n_u32 (0);\n-  __t = vsetq_lane_u32 (__hash_e, __t, 0);\n-  __t = __builtin_arm_crypto_sha1h (__t);\n-  return vgetq_lane_u32 (__t, 0);\n-}\n-\n-__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n-vsha1cq_u32 (uint32x4_t __hash_abcd, uint32_t __hash_e, uint32x4_t __wk)\n-{\n-  uint32x4_t __t = vdupq_n_u32 (0);\n-  __t = vsetq_lane_u32 (__hash_e, __t, 0);\n-  return __builtin_arm_crypto_sha1c (__hash_abcd, __t, __wk);\n-}\n-\n-__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n-vsha1pq_u32 (uint32x4_t __hash_abcd, uint32_t __hash_e, uint32x4_t __wk)\n-{\n-  uint32x4_t __t = vdupq_n_u32 (0);\n-  __t = vsetq_lane_u32 (__hash_e, __t, 0);\n-  return __builtin_arm_crypto_sha1p (__hash_abcd, __t, __wk);\n-}\n-\n-__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n-vsha1mq_u32 (uint32x4_t __hash_abcd, uint32_t __hash_e, uint32x4_t __wk)\n-{\n-  uint32x4_t __t = vdupq_n_u32 (0);\n-  __t = vsetq_lane_u32 (__hash_e, __t, 0);\n-  return __builtin_arm_crypto_sha1m (__hash_abcd, __t, __wk);\n-}\n-\n-__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n-vsha1su0q_u32 (uint32x4_t __w0_3, uint32x4_t __w4_7, uint32x4_t __w8_11)\n-{\n-  return __builtin_arm_crypto_sha1su0 (__w0_3, __w4_7, __w8_11);\n-}\n-\n-__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n-vsha1su1q_u32 (uint32x4_t __tw0_3, uint32x4_t __w12_15)\n-{\n-  return __builtin_arm_crypto_sha1su1 (__tw0_3, __w12_15);\n-}\n-\n-__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n-vsha256hq_u32 (uint32x4_t __hash_abcd, uint32x4_t __hash_efgh, uint32x4_t __wk)\n-{\n-  return __builtin_arm_crypto_sha256h (__hash_abcd, __hash_efgh, __wk);\n-}\n-\n-__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n-vsha256h2q_u32 (uint32x4_t __hash_abcd, uint32x4_t __hash_efgh, uint32x4_t __wk)\n-{\n-  return __builtin_arm_crypto_sha256h2 (__hash_abcd, __hash_efgh, __wk);\n-}\n-\n-__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n-vsha256su0q_u32 (uint32x4_t __w0_3, uint32x4_t __w4_7)\n-{\n-  return __builtin_arm_crypto_sha256su0 (__w0_3, __w4_7);\n-}\n-\n-__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n-vsha256su1q_u32 (uint32x4_t __tw0_3, uint32x4_t __w8_11, uint32x4_t __w12_15)\n-{\n-  return __builtin_arm_crypto_sha256su1 (__tw0_3, __w8_11, __w12_15);\n-}\n-\n-__extension__ static __inline poly128_t __attribute__ ((__always_inline__))\n-vmull_p64 (poly64_t __a, poly64_t __b)\n-{\n-  return (poly128_t) __builtin_arm_crypto_vmullp64 ((uint64_t) __a, (uint64_t) __b);\n-}\n-\n-__extension__ static __inline poly128_t __attribute__ ((__always_inline__))\n-vmull_high_p64 (poly64x2_t __a, poly64x2_t __b)\n-{\n-  poly64_t __t1 = vget_high_p64 (__a);\n-  poly64_t __t2 = vget_high_p64 (__b);\n-\n-  return (poly128_t) __builtin_arm_crypto_vmullp64 ((uint64_t) __t1, (uint64_t) __t2);\n-}\n-\n-#endif\n-\""}, {"sha": "8af6df819aec5a7f89035db1d6405f79cb506ec3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f723a43cbcb734e6bb93ef55c36d87a8e03235f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f723a43cbcb734e6bb93ef55c36d87a8e03235f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f723a43cbcb734e6bb93ef55c36d87a8e03235f0", "patch": "@@ -1,3 +1,20 @@\n+2016-07-05  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/neon/polytypes.c: Move to ...\n+\t* gcc.target/arm/polytypes.c: ... here.\n+\t* gcc.target/arm/neon/pr51534.c: Move to ...\n+\t* gcc.target/arm/pr51534.c: ... here.\n+\t* gcc.target/arm/neon/vect-vcvt.c: Move to ...\n+\t* gcc.target/arm/vect-vcvt.c: ... here.\n+\t* gcc.target/arm/neon/vect-vcvtq.c: Move to ...\n+\t* gcc.target/arm/vect-vcvtq.c: ... here.\n+\t* gcc.target/arm/neon/vfp-shift-a2t2.c: Move to ...\n+\t* gcc.target/arm/vfp-shift-a2t2.c: ... here.\n+\t* gcc.target/arm/neon/vst1Q_laneu64-1.c: Move to ...\n+\t* gcc.target/arm/vst1Q_laneu64-1.c: ... here. Fix foo() prototype.\n+\t* gcc.target/arm/neon/neon.exp: Delete.\n+\t* gcc.target/arm/neon/: Delete.\n+\n 2016-07-04  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/65575"}, {"sha": "d440fc0f059309dab847be49fda32d26727b29c3", "filename": "gcc/testsuite/gcc.target/arm/neon/neon.exp", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fneon.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fneon.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fneon.exp?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,35 +0,0 @@\n-# Copyright (C) 1997-2016 Free Software Foundation, Inc.\n-\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3 of the License, or\n-# (at your option) any later version.\n-#\n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-# GCC testsuite that uses the `dg.exp' driver.\n-\n-# Exit immediately if this isn't an ARM target.\n-if ![istarget arm*-*-*] then {\n-  return\n-}\n-\n-# Load support procs.\n-load_lib gcc-dg.exp\n-\n-# Initialize `dg'.\n-dg-init\n-\n-# Main loop.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n-\t\"\" \"\"\n-\n-# All done.\n-dg-finish"}, {"sha": "d2424d9c5b6306831951bdf8d8cddc13222af8fc", "filename": "gcc/testsuite/gcc.target/arm/neon/vRaddhns16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhns16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRaddhns16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRaddhns16 (void)\n-{\n-  int8x8_t out_int8x8_t;\n-  int16x8_t arg0_int16x8_t;\n-  int16x8_t arg1_int16x8_t;\n-\n-  out_int8x8_t = vraddhn_s16 (arg0_int16x8_t, arg1_int16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vraddhn\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a787bccf479919c00748ac13c9ac846c2c1b0cec", "filename": "gcc/testsuite/gcc.target/arm/neon/vRaddhns32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhns32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRaddhns32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRaddhns32 (void)\n-{\n-  int16x4_t out_int16x4_t;\n-  int32x4_t arg0_int32x4_t;\n-  int32x4_t arg1_int32x4_t;\n-\n-  out_int16x4_t = vraddhn_s32 (arg0_int32x4_t, arg1_int32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vraddhn\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "dde572c4457c3e15e801c904e38394567e81619f", "filename": "gcc/testsuite/gcc.target/arm/neon/vRaddhns64.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhns64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRaddhns64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRaddhns64 (void)\n-{\n-  int32x2_t out_int32x2_t;\n-  int64x2_t arg0_int64x2_t;\n-  int64x2_t arg1_int64x2_t;\n-\n-  out_int32x2_t = vraddhn_s64 (arg0_int64x2_t, arg1_int64x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vraddhn\\.i64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "74098a9e5473029217ba18536019ff9347d949e3", "filename": "gcc/testsuite/gcc.target/arm/neon/vRaddhnu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhnu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhnu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhnu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRaddhnu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRaddhnu16 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  uint16x8_t arg1_uint16x8_t;\n-\n-  out_uint8x8_t = vraddhn_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vraddhn\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "4795f446dc714a355a1fc0e53edc1c37e7c34b41", "filename": "gcc/testsuite/gcc.target/arm/neon/vRaddhnu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhnu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhnu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhnu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRaddhnu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRaddhnu32 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  uint32x4_t arg1_uint32x4_t;\n-\n-  out_uint16x4_t = vraddhn_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vraddhn\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d3a7e0b4ae5da18d82f359dc873e2ad1024ebafb", "filename": "gcc/testsuite/gcc.target/arm/neon/vRaddhnu64.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhnu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhnu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhnu64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRaddhnu64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRaddhnu64 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  uint64x2_t arg0_uint64x2_t;\n-  uint64x2_t arg1_uint64x2_t;\n-\n-  out_uint32x2_t = vraddhn_u64 (arg0_uint64x2_t, arg1_uint64x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vraddhn\\.i64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d8da62725b7b07ec2c314afdc1bb542fa408152e", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhaddQs16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQs16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRhaddQs16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRhaddQs16 (void)\n-{\n-  int16x8_t out_int16x8_t;\n-  int16x8_t arg0_int16x8_t;\n-  int16x8_t arg1_int16x8_t;\n-\n-  out_int16x8_t = vrhaddq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrhadd\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6281ade30ca6d3d8ab00e75be648c61be9613848", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhaddQs32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQs32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRhaddQs32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRhaddQs32 (void)\n-{\n-  int32x4_t out_int32x4_t;\n-  int32x4_t arg0_int32x4_t;\n-  int32x4_t arg1_int32x4_t;\n-\n-  out_int32x4_t = vrhaddq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrhadd\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a558ca363d939990550920e6ee7ce482ebb6329e", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhaddQs8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQs8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRhaddQs8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRhaddQs8 (void)\n-{\n-  int8x16_t out_int8x16_t;\n-  int8x16_t arg0_int8x16_t;\n-  int8x16_t arg1_int8x16_t;\n-\n-  out_int8x16_t = vrhaddq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrhadd\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "06822c2ff118aa37401de0d7514e7e237922a3b2", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhaddQu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRhaddQu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRhaddQu16 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  uint16x8_t arg1_uint16x8_t;\n-\n-  out_uint16x8_t = vrhaddq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrhadd\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "713e70a2a6b495d9a2f589abbc4c027e16f01fcb", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhaddQu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRhaddQu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRhaddQu32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  uint32x4_t arg1_uint32x4_t;\n-\n-  out_uint32x4_t = vrhaddq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrhadd\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "64a912f25ee139cb6c4c2681e4f682afbb09ec83", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhaddQu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRhaddQu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRhaddQu8 (void)\n-{\n-  uint8x16_t out_uint8x16_t;\n-  uint8x16_t arg0_uint8x16_t;\n-  uint8x16_t arg1_uint8x16_t;\n-\n-  out_uint8x16_t = vrhaddq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrhadd\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8eb55045ec6cbc14621577d04c6a3e398795c617", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhadds16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhadds16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhadds16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhadds16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRhadds16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRhadds16 (void)\n-{\n-  int16x4_t out_int16x4_t;\n-  int16x4_t arg0_int16x4_t;\n-  int16x4_t arg1_int16x4_t;\n-\n-  out_int16x4_t = vrhadd_s16 (arg0_int16x4_t, arg1_int16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrhadd\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a1acebd186f0d485e2137755760388742b64e43b", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhadds32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhadds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhadds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhadds32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRhadds32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRhadds32 (void)\n-{\n-  int32x2_t out_int32x2_t;\n-  int32x2_t arg0_int32x2_t;\n-  int32x2_t arg1_int32x2_t;\n-\n-  out_int32x2_t = vrhadd_s32 (arg0_int32x2_t, arg1_int32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrhadd\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "df7f58c33a07febf560012e3a00e1300b2281538", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhadds8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhadds8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhadds8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhadds8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRhadds8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRhadds8 (void)\n-{\n-  int8x8_t out_int8x8_t;\n-  int8x8_t arg0_int8x8_t;\n-  int8x8_t arg1_int8x8_t;\n-\n-  out_int8x8_t = vrhadd_s8 (arg0_int8x8_t, arg1_int8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrhadd\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "215eb1597bd284f5996f72f9803cf3850883170f", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhaddu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRhaddu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRhaddu16 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  uint16x4_t arg0_uint16x4_t;\n-  uint16x4_t arg1_uint16x4_t;\n-\n-  out_uint16x4_t = vrhadd_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrhadd\\.u16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "2d8d5fbf6353040040bcb0b37ba9a7c92332ce29", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhaddu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRhaddu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRhaddu32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  uint32x2_t arg0_uint32x2_t;\n-  uint32x2_t arg1_uint32x2_t;\n-\n-  out_uint32x2_t = vrhadd_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrhadd\\.u32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "362a54647012666bfe01b9c6fffb7912e2acc3ea", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhaddu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRhaddu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRhaddu8 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  uint8x8_t arg0_uint8x8_t;\n-  uint8x8_t arg1_uint8x8_t;\n-\n-  out_uint8x8_t = vrhadd_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrhadd\\.u8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "74bd3aaf091cc85d26b4643e8a1daa5f1e7809ae", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlQs16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRshlQs16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshlQs16 (void)\n-{\n-  int16x8_t out_int16x8_t;\n-  int16x8_t arg0_int16x8_t;\n-  int16x8_t arg1_int16x8_t;\n-\n-  out_int16x8_t = vrshlq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshl\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a6a9e4c24900ad9af04a84ae4f5a004bccd2fa53", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlQs32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRshlQs32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshlQs32 (void)\n-{\n-  int32x4_t out_int32x4_t;\n-  int32x4_t arg0_int32x4_t;\n-  int32x4_t arg1_int32x4_t;\n-\n-  out_int32x4_t = vrshlq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshl\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8201a04fb5acd3133b24c754bc0b4d24393fe821", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlQs64.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRshlQs64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshlQs64 (void)\n-{\n-  int64x2_t out_int64x2_t;\n-  int64x2_t arg0_int64x2_t;\n-  int64x2_t arg1_int64x2_t;\n-\n-  out_int64x2_t = vrshlq_s64 (arg0_int64x2_t, arg1_int64x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshl\\.s64\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "28d281f767076703df19ad94e5e6a5bbbc12e51b", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlQs8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRshlQs8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshlQs8 (void)\n-{\n-  int8x16_t out_int8x16_t;\n-  int8x16_t arg0_int8x16_t;\n-  int8x16_t arg1_int8x16_t;\n-\n-  out_int8x16_t = vrshlq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshl\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "66d278887e5b3f7ade24c8450a678f432ea5c7b9", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlQu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRshlQu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshlQu16 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  int16x8_t arg1_int16x8_t;\n-\n-  out_uint16x8_t = vrshlq_u16 (arg0_uint16x8_t, arg1_int16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshl\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "4185fbe17695ce7532814cd59ab6c44e503deb8c", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlQu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRshlQu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshlQu32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  int32x4_t arg1_int32x4_t;\n-\n-  out_uint32x4_t = vrshlq_u32 (arg0_uint32x4_t, arg1_int32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshl\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "fb0eddd71294ea5022c00a7560353e9e6960281e", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlQu64.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRshlQu64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshlQu64 (void)\n-{\n-  uint64x2_t out_uint64x2_t;\n-  uint64x2_t arg0_uint64x2_t;\n-  int64x2_t arg1_int64x2_t;\n-\n-  out_uint64x2_t = vrshlq_u64 (arg0_uint64x2_t, arg1_int64x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshl\\.u64\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "cee1b9e38fbac7a7c7dbd7916dffb82feb76f479", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlQu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRshlQu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshlQu8 (void)\n-{\n-  uint8x16_t out_uint8x16_t;\n-  uint8x16_t arg0_uint8x16_t;\n-  int8x16_t arg1_int8x16_t;\n-\n-  out_uint8x16_t = vrshlq_u8 (arg0_uint8x16_t, arg1_int8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshl\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "ac7158adc15e7ce03b722fa794ba057905d8d30c", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshls16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRshls16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshls16 (void)\n-{\n-  int16x4_t out_int16x4_t;\n-  int16x4_t arg0_int16x4_t;\n-  int16x4_t arg1_int16x4_t;\n-\n-  out_int16x4_t = vrshl_s16 (arg0_int16x4_t, arg1_int16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshl\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8da59185c1a34c241eb7021b85d22e1677b10eb5", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshls32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRshls32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshls32 (void)\n-{\n-  int32x2_t out_int32x2_t;\n-  int32x2_t arg0_int32x2_t;\n-  int32x2_t arg1_int32x2_t;\n-\n-  out_int32x2_t = vrshl_s32 (arg0_int32x2_t, arg1_int32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshl\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "2e732ee12de5e38101e0e3bdfed00bc768f66ccc", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshls64.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRshls64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshls64 (void)\n-{\n-  int64x1_t out_int64x1_t;\n-  int64x1_t arg0_int64x1_t;\n-  int64x1_t arg1_int64x1_t;\n-\n-  out_int64x1_t = vrshl_s64 (arg0_int64x1_t, arg1_int64x1_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshl\\.s64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f0c351d485076bca5094239ea3386844329ea2c6", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshls8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRshls8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshls8 (void)\n-{\n-  int8x8_t out_int8x8_t;\n-  int8x8_t arg0_int8x8_t;\n-  int8x8_t arg1_int8x8_t;\n-\n-  out_int8x8_t = vrshl_s8 (arg0_int8x8_t, arg1_int8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshl\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "1a7751b43ce82196914ad4081c564a69376f4dea", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRshlu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshlu16 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  uint16x4_t arg0_uint16x4_t;\n-  int16x4_t arg1_int16x4_t;\n-\n-  out_uint16x4_t = vrshl_u16 (arg0_uint16x4_t, arg1_int16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshl\\.u16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "198b13c43697ec657aee8826539be23fd5bd61b9", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRshlu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshlu32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  uint32x2_t arg0_uint32x2_t;\n-  int32x2_t arg1_int32x2_t;\n-\n-  out_uint32x2_t = vrshl_u32 (arg0_uint32x2_t, arg1_int32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshl\\.u32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "3f67aaaa4b6e698a222a5103f9fb005315316e6e", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlu64.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRshlu64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshlu64 (void)\n-{\n-  uint64x1_t out_uint64x1_t;\n-  uint64x1_t arg0_uint64x1_t;\n-  int64x1_t arg1_int64x1_t;\n-\n-  out_uint64x1_t = vrshl_u64 (arg0_uint64x1_t, arg1_int64x1_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshl\\.u64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "439948224a3331b0e08cc089ebc84b575e6f49f0", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRshlu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshlu8 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  uint8x8_t arg0_uint8x8_t;\n-  int8x8_t arg1_int8x8_t;\n-\n-  out_uint8x8_t = vrshl_u8 (arg0_uint8x8_t, arg1_int8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshl\\.u8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a89842b4001b22449db7da0db372b80e0a02db36", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrQ_ns16.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshrQ_ns16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshrQ_ns16 (void)\n-{\n-  int16x8_t out_int16x8_t;\n-  int16x8_t arg0_int16x8_t;\n-\n-  out_int16x8_t = vrshrq_n_s16 (arg0_int16x8_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshr\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "00ec911743b7a64622b116a53dd0198960849424", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrQ_ns32.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshrQ_ns32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshrQ_ns32 (void)\n-{\n-  int32x4_t out_int32x4_t;\n-  int32x4_t arg0_int32x4_t;\n-\n-  out_int32x4_t = vrshrq_n_s32 (arg0_int32x4_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshr\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0b1851e7e00750a846c93113e4e28008e24cf321", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrQ_ns64.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshrQ_ns64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshrQ_ns64 (void)\n-{\n-  int64x2_t out_int64x2_t;\n-  int64x2_t arg0_int64x2_t;\n-\n-  out_int64x2_t = vrshrq_n_s64 (arg0_int64x2_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshr\\.s64\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "80084d02dc6b32a04cd31a035c0a211dc9cfec72", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrQ_ns8.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshrQ_ns8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshrQ_ns8 (void)\n-{\n-  int8x16_t out_int8x16_t;\n-  int8x16_t arg0_int8x16_t;\n-\n-  out_int8x16_t = vrshrq_n_s8 (arg0_int8x16_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshr\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a24ea19a1a921ad3694ab871539d79f0d0cf1b8b", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrQ_nu16.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshrQ_nu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshrQ_nu16 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-\n-  out_uint16x8_t = vrshrq_n_u16 (arg0_uint16x8_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshr\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "fa4e20da18fdcc863a1af5029e5bf51412b36c52", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrQ_nu32.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshrQ_nu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshrQ_nu32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-\n-  out_uint32x4_t = vrshrq_n_u32 (arg0_uint32x4_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshr\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "9e61a6916cea2a9750e0efb240d716ac53843129", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrQ_nu64.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshrQ_nu64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshrQ_nu64 (void)\n-{\n-  uint64x2_t out_uint64x2_t;\n-  uint64x2_t arg0_uint64x2_t;\n-\n-  out_uint64x2_t = vrshrq_n_u64 (arg0_uint64x2_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshr\\.u64\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "3445c8dcd53646694bc0b66bf05f773937a2ab4c", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrQ_nu8.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshrQ_nu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshrQ_nu8 (void)\n-{\n-  uint8x16_t out_uint8x16_t;\n-  uint8x16_t arg0_uint8x16_t;\n-\n-  out_uint8x16_t = vrshrq_n_u8 (arg0_uint8x16_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshr\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "5445d5945e08813e93228e721a85f8864caa87b9", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshr_ns16.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshr_ns16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshr_ns16 (void)\n-{\n-  int16x4_t out_int16x4_t;\n-  int16x4_t arg0_int16x4_t;\n-\n-  out_int16x4_t = vrshr_n_s16 (arg0_int16x4_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshr\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8b3f60daead382888d3896ef29786e1091ac8298", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshr_ns32.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshr_ns32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshr_ns32 (void)\n-{\n-  int32x2_t out_int32x2_t;\n-  int32x2_t arg0_int32x2_t;\n-\n-  out_int32x2_t = vrshr_n_s32 (arg0_int32x2_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshr\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "1d3735a879541af07b1fb1d7eed17b65de3e42c6", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshr_ns64.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshr_ns64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshr_ns64 (void)\n-{\n-  int64x1_t out_int64x1_t;\n-  int64x1_t arg0_int64x1_t;\n-\n-  out_int64x1_t = vrshr_n_s64 (arg0_int64x1_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshr\\.s64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "dc011d95380d7db695ba405efd0022a4a7eeab18", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshr_ns8.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshr_ns8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshr_ns8 (void)\n-{\n-  int8x8_t out_int8x8_t;\n-  int8x8_t arg0_int8x8_t;\n-\n-  out_int8x8_t = vrshr_n_s8 (arg0_int8x8_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshr\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "890c88664e3a081bd57925ff2da549c1133b102a", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshr_nu16.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshr_nu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshr_nu16 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  uint16x4_t arg0_uint16x4_t;\n-\n-  out_uint16x4_t = vrshr_n_u16 (arg0_uint16x4_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshr\\.u16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "5994f6be64fc389fbab48d54fdee8ec15067e4ee", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshr_nu32.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshr_nu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshr_nu32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  uint32x2_t arg0_uint32x2_t;\n-\n-  out_uint32x2_t = vrshr_n_u32 (arg0_uint32x2_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshr\\.u32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "03047707dc9235012e44c5628beb0167036b77cc", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshr_nu64.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshr_nu64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshr_nu64 (void)\n-{\n-  uint64x1_t out_uint64x1_t;\n-  uint64x1_t arg0_uint64x1_t;\n-\n-  out_uint64x1_t = vrshr_n_u64 (arg0_uint64x1_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshr\\.u64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "4df95c24b24450159e4e1e03dc9118606241f5ea", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshr_nu8.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshr_nu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshr_nu8 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  uint8x8_t arg0_uint8x8_t;\n-\n-  out_uint8x8_t = vrshr_n_u8 (arg0_uint8x8_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshr\\.u8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "7f423036c3d1d69f83582ce8e76678ee4fef70c6", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrn_ns16.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_ns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_ns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_ns16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshrn_ns16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshrn_ns16 (void)\n-{\n-  int8x8_t out_int8x8_t;\n-  int16x8_t arg0_int16x8_t;\n-\n-  out_int8x8_t = vrshrn_n_s16 (arg0_int16x8_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshrn\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6c0559fc583778e4c09da7a1835e59a26de0474a", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrn_ns32.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_ns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_ns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_ns32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshrn_ns32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshrn_ns32 (void)\n-{\n-  int16x4_t out_int16x4_t;\n-  int32x4_t arg0_int32x4_t;\n-\n-  out_int16x4_t = vrshrn_n_s32 (arg0_int32x4_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshrn\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0f223c9377ee16c1fbcc341aded32763ea06962d", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrn_ns64.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_ns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_ns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_ns64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshrn_ns64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshrn_ns64 (void)\n-{\n-  int32x2_t out_int32x2_t;\n-  int64x2_t arg0_int64x2_t;\n-\n-  out_int32x2_t = vrshrn_n_s64 (arg0_int64x2_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshrn\\.i64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "12ba6252a0290b6ed438beb60841b8d26fb97cf3", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrn_nu16.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_nu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_nu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_nu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshrn_nu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshrn_nu16 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-\n-  out_uint8x8_t = vrshrn_n_u16 (arg0_uint16x8_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshrn\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8b2014f34854e9d31b308e2029660cc7f35fae5f", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrn_nu32.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_nu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_nu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_nu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshrn_nu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshrn_nu32 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-\n-  out_uint16x4_t = vrshrn_n_u32 (arg0_uint32x4_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshrn\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f3bf756637515f48fc5c0cf97ef43552f69197b6", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrn_nu64.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_nu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_nu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_nu64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vRshrn_nu64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRshrn_nu64 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  uint64x2_t arg0_uint64x2_t;\n-\n-  out_uint32x2_t = vrshrn_n_u64 (arg0_uint64x2_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrshrn\\.i64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "66e2ea0e974fbc3f72352aa3d3a24bc232d1eefb", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsraQ_ns16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsraQ_ns16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsraQ_ns16 (void)\n-{\n-  int16x8_t out_int16x8_t;\n-  int16x8_t arg0_int16x8_t;\n-  int16x8_t arg1_int16x8_t;\n-\n-  out_int16x8_t = vrsraq_n_s16 (arg0_int16x8_t, arg1_int16x8_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsra\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "b6c3cb8f40dd13e0e22ea75e21ca7127823f53ce", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsraQ_ns32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsraQ_ns32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsraQ_ns32 (void)\n-{\n-  int32x4_t out_int32x4_t;\n-  int32x4_t arg0_int32x4_t;\n-  int32x4_t arg1_int32x4_t;\n-\n-  out_int32x4_t = vrsraq_n_s32 (arg0_int32x4_t, arg1_int32x4_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsra\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8d68b1ae89a225899073224f19637cc96f6e118c", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsraQ_ns64.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsraQ_ns64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsraQ_ns64 (void)\n-{\n-  int64x2_t out_int64x2_t;\n-  int64x2_t arg0_int64x2_t;\n-  int64x2_t arg1_int64x2_t;\n-\n-  out_int64x2_t = vrsraq_n_s64 (arg0_int64x2_t, arg1_int64x2_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsra\\.s64\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "413f49ef8209c12afe9fddf75a75c1a8259fb77d", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsraQ_ns8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsraQ_ns8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsraQ_ns8 (void)\n-{\n-  int8x16_t out_int8x16_t;\n-  int8x16_t arg0_int8x16_t;\n-  int8x16_t arg1_int8x16_t;\n-\n-  out_int8x16_t = vrsraq_n_s8 (arg0_int8x16_t, arg1_int8x16_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsra\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d9e668011a74cd6c17029ef28afd6df7674c1f50", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsraQ_nu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsraQ_nu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsraQ_nu16 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  uint16x8_t arg1_uint16x8_t;\n-\n-  out_uint16x8_t = vrsraq_n_u16 (arg0_uint16x8_t, arg1_uint16x8_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsra\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "56ae88612a2c9efcdfced10bcc5b26ecdd4321b6", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsraQ_nu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsraQ_nu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsraQ_nu32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  uint32x4_t arg1_uint32x4_t;\n-\n-  out_uint32x4_t = vrsraq_n_u32 (arg0_uint32x4_t, arg1_uint32x4_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsra\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "2ce4af3bcc9f14d145321a0e0f9cc2260d6078e6", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsraQ_nu64.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsraQ_nu64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsraQ_nu64 (void)\n-{\n-  uint64x2_t out_uint64x2_t;\n-  uint64x2_t arg0_uint64x2_t;\n-  uint64x2_t arg1_uint64x2_t;\n-\n-  out_uint64x2_t = vrsraq_n_u64 (arg0_uint64x2_t, arg1_uint64x2_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsra\\.u64\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "53078a0464e09384f80f9596e66555c7950589d2", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsraQ_nu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsraQ_nu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsraQ_nu8 (void)\n-{\n-  uint8x16_t out_uint8x16_t;\n-  uint8x16_t arg0_uint8x16_t;\n-  uint8x16_t arg1_uint8x16_t;\n-\n-  out_uint8x16_t = vrsraq_n_u8 (arg0_uint8x16_t, arg1_uint8x16_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsra\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "bc68117af1b232283be97ad9f740354355cbc52b", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsra_ns16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsra_ns16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsra_ns16 (void)\n-{\n-  int16x4_t out_int16x4_t;\n-  int16x4_t arg0_int16x4_t;\n-  int16x4_t arg1_int16x4_t;\n-\n-  out_int16x4_t = vrsra_n_s16 (arg0_int16x4_t, arg1_int16x4_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsra\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "caeb45b22dcb3d6e813652cb5467e75eea9fbb0f", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsra_ns32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsra_ns32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsra_ns32 (void)\n-{\n-  int32x2_t out_int32x2_t;\n-  int32x2_t arg0_int32x2_t;\n-  int32x2_t arg1_int32x2_t;\n-\n-  out_int32x2_t = vrsra_n_s32 (arg0_int32x2_t, arg1_int32x2_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsra\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "b9ea8c88a43fa447a8a9b2be2550ecee0c0b8fb5", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsra_ns64.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsra_ns64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsra_ns64 (void)\n-{\n-  int64x1_t out_int64x1_t;\n-  int64x1_t arg0_int64x1_t;\n-  int64x1_t arg1_int64x1_t;\n-\n-  out_int64x1_t = vrsra_n_s64 (arg0_int64x1_t, arg1_int64x1_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsra\\.s64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f32ae16bd5a3b9f578d54b2765fb03984ca75777", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsra_ns8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsra_ns8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsra_ns8 (void)\n-{\n-  int8x8_t out_int8x8_t;\n-  int8x8_t arg0_int8x8_t;\n-  int8x8_t arg1_int8x8_t;\n-\n-  out_int8x8_t = vrsra_n_s8 (arg0_int8x8_t, arg1_int8x8_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsra\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "b6d2ccee8f9214885bad450f93cbc335e5f36513", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsra_nu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsra_nu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsra_nu16 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  uint16x4_t arg0_uint16x4_t;\n-  uint16x4_t arg1_uint16x4_t;\n-\n-  out_uint16x4_t = vrsra_n_u16 (arg0_uint16x4_t, arg1_uint16x4_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsra\\.u16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "99c217b19098ef3ca06a5d7b33e0c691d1366bc2", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsra_nu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsra_nu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsra_nu32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  uint32x2_t arg0_uint32x2_t;\n-  uint32x2_t arg1_uint32x2_t;\n-\n-  out_uint32x2_t = vrsra_n_u32 (arg0_uint32x2_t, arg1_uint32x2_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsra\\.u32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6eaa2ae4302b4a43155e315973d9b1302ce0cb93", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsra_nu64.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsra_nu64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsra_nu64 (void)\n-{\n-  uint64x1_t out_uint64x1_t;\n-  uint64x1_t arg0_uint64x1_t;\n-  uint64x1_t arg1_uint64x1_t;\n-\n-  out_uint64x1_t = vrsra_n_u64 (arg0_uint64x1_t, arg1_uint64x1_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsra\\.u64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6ae17f7e2e1f86f5f598616ee9b369d8e2d402bb", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsra_nu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsra_nu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsra_nu8 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  uint8x8_t arg0_uint8x8_t;\n-  uint8x8_t arg1_uint8x8_t;\n-\n-  out_uint8x8_t = vrsra_n_u8 (arg0_uint8x8_t, arg1_uint8x8_t, 1);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsra\\.u8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "b0a5cb0095703399cb50c9ce03871c40407bb234", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsubhns16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhns16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsubhns16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsubhns16 (void)\n-{\n-  int8x8_t out_int8x8_t;\n-  int16x8_t arg0_int16x8_t;\n-  int16x8_t arg1_int16x8_t;\n-\n-  out_int8x8_t = vrsubhn_s16 (arg0_int16x8_t, arg1_int16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsubhn\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "31e01e0f20aa287294d1aad0869ada571e807da5", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsubhns32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhns32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsubhns32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsubhns32 (void)\n-{\n-  int16x4_t out_int16x4_t;\n-  int32x4_t arg0_int32x4_t;\n-  int32x4_t arg1_int32x4_t;\n-\n-  out_int16x4_t = vrsubhn_s32 (arg0_int32x4_t, arg1_int32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsubhn\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "e1c8c9ec751a98c456c4f6e75d6ffbf2c83d79fb", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsubhns64.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhns64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsubhns64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsubhns64 (void)\n-{\n-  int32x2_t out_int32x2_t;\n-  int64x2_t arg0_int64x2_t;\n-  int64x2_t arg1_int64x2_t;\n-\n-  out_int32x2_t = vrsubhn_s64 (arg0_int64x2_t, arg1_int64x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsubhn\\.i64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "58368f444e5286005da29ba3c335c418d1fb93f8", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsubhnu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhnu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhnu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhnu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsubhnu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsubhnu16 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  uint16x8_t arg1_uint16x8_t;\n-\n-  out_uint8x8_t = vrsubhn_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsubhn\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "edb7b4f41997c844826390251165ffbd7714b4fc", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsubhnu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhnu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhnu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhnu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsubhnu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsubhnu32 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  uint32x4_t arg1_uint32x4_t;\n-\n-  out_uint16x4_t = vrsubhn_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsubhn\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "2b1c77f10a53b0785cbf7d2686380c23043edf86", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsubhnu64.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhnu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhnu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhnu64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vRsubhnu64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vRsubhnu64 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  uint64x2_t arg0_uint64x2_t;\n-  uint64x2_t arg1_uint64x2_t;\n-\n-  out_uint32x2_t = vrsubhn_u64 (arg0_uint64x2_t, arg1_uint64x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vrsubhn\\.i64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f0c69713434bd337a7c4aecd709fac23669859ad", "filename": "gcc/testsuite/gcc.target/arm/neon/vabaQs16.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQs16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vabaQs16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabaQs16 (void)\n-{\n-  int16x8_t out_int16x8_t;\n-  int16x8_t arg0_int16x8_t;\n-  int16x8_t arg1_int16x8_t;\n-  int16x8_t arg2_int16x8_t;\n-\n-  out_int16x8_t = vabaq_s16 (arg0_int16x8_t, arg1_int16x8_t, arg2_int16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaba\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "cc68f6f603465b727173a5532821ffa5bc3b4dca", "filename": "gcc/testsuite/gcc.target/arm/neon/vabaQs32.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQs32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vabaQs32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabaQs32 (void)\n-{\n-  int32x4_t out_int32x4_t;\n-  int32x4_t arg0_int32x4_t;\n-  int32x4_t arg1_int32x4_t;\n-  int32x4_t arg2_int32x4_t;\n-\n-  out_int32x4_t = vabaq_s32 (arg0_int32x4_t, arg1_int32x4_t, arg2_int32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaba\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "7b1bfeb30ac48e874ca39340f394df58f94403fc", "filename": "gcc/testsuite/gcc.target/arm/neon/vabaQs8.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQs8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vabaQs8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabaQs8 (void)\n-{\n-  int8x16_t out_int8x16_t;\n-  int8x16_t arg0_int8x16_t;\n-  int8x16_t arg1_int8x16_t;\n-  int8x16_t arg2_int8x16_t;\n-\n-  out_int8x16_t = vabaq_s8 (arg0_int8x16_t, arg1_int8x16_t, arg2_int8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaba\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "3b5ba07643e675904a5fa297c0a5704d35079853", "filename": "gcc/testsuite/gcc.target/arm/neon/vabaQu16.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vabaQu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabaQu16 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  uint16x8_t arg1_uint16x8_t;\n-  uint16x8_t arg2_uint16x8_t;\n-\n-  out_uint16x8_t = vabaq_u16 (arg0_uint16x8_t, arg1_uint16x8_t, arg2_uint16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaba\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "cf526e9b7d868193d928f127c7fd059d2aeb1b2e", "filename": "gcc/testsuite/gcc.target/arm/neon/vabaQu32.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vabaQu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabaQu32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  uint32x4_t arg1_uint32x4_t;\n-  uint32x4_t arg2_uint32x4_t;\n-\n-  out_uint32x4_t = vabaq_u32 (arg0_uint32x4_t, arg1_uint32x4_t, arg2_uint32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaba\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "484fb7fc79e749c0a1d3cfd3d418db14720bbf52", "filename": "gcc/testsuite/gcc.target/arm/neon/vabaQu8.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vabaQu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabaQu8 (void)\n-{\n-  uint8x16_t out_uint8x16_t;\n-  uint8x16_t arg0_uint8x16_t;\n-  uint8x16_t arg1_uint8x16_t;\n-  uint8x16_t arg2_uint8x16_t;\n-\n-  out_uint8x16_t = vabaq_u8 (arg0_uint8x16_t, arg1_uint8x16_t, arg2_uint8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaba\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6617e2e68db3d52ad73a9a5216a7379798d7fbb9", "filename": "gcc/testsuite/gcc.target/arm/neon/vabals16.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabals16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabals16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabals16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vabals16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabals16 (void)\n-{\n-  int32x4_t out_int32x4_t;\n-  int32x4_t arg0_int32x4_t;\n-  int16x4_t arg1_int16x4_t;\n-  int16x4_t arg2_int16x4_t;\n-\n-  out_int32x4_t = vabal_s16 (arg0_int32x4_t, arg1_int16x4_t, arg2_int16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabal\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "2110dee6b48b5fc7efda9fa78c564bc6a77927ea", "filename": "gcc/testsuite/gcc.target/arm/neon/vabals32.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabals32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabals32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabals32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vabals32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabals32 (void)\n-{\n-  int64x2_t out_int64x2_t;\n-  int64x2_t arg0_int64x2_t;\n-  int32x2_t arg1_int32x2_t;\n-  int32x2_t arg2_int32x2_t;\n-\n-  out_int64x2_t = vabal_s32 (arg0_int64x2_t, arg1_int32x2_t, arg2_int32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabal\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "c313a11a5a06ef4f8206bb9d524562c42dbc0108", "filename": "gcc/testsuite/gcc.target/arm/neon/vabals8.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabals8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabals8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabals8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vabals8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabals8 (void)\n-{\n-  int16x8_t out_int16x8_t;\n-  int16x8_t arg0_int16x8_t;\n-  int8x8_t arg1_int8x8_t;\n-  int8x8_t arg2_int8x8_t;\n-\n-  out_int16x8_t = vabal_s8 (arg0_int16x8_t, arg1_int8x8_t, arg2_int8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabal\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f43c8ed30c7f99631e7185e362c1ce09f7ec877c", "filename": "gcc/testsuite/gcc.target/arm/neon/vabalu16.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabalu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabalu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabalu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vabalu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabalu16 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  uint16x4_t arg1_uint16x4_t;\n-  uint16x4_t arg2_uint16x4_t;\n-\n-  out_uint32x4_t = vabal_u16 (arg0_uint32x4_t, arg1_uint16x4_t, arg2_uint16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabal\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "12af07299eebaf2cfb53eb8e8408e06d261da571", "filename": "gcc/testsuite/gcc.target/arm/neon/vabalu32.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabalu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabalu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabalu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vabalu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabalu32 (void)\n-{\n-  uint64x2_t out_uint64x2_t;\n-  uint64x2_t arg0_uint64x2_t;\n-  uint32x2_t arg1_uint32x2_t;\n-  uint32x2_t arg2_uint32x2_t;\n-\n-  out_uint64x2_t = vabal_u32 (arg0_uint64x2_t, arg1_uint32x2_t, arg2_uint32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabal\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "05ba74760a3d6dcaf5dda790c56010dc06b1e736", "filename": "gcc/testsuite/gcc.target/arm/neon/vabalu8.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabalu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabalu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabalu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vabalu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabalu8 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  uint8x8_t arg1_uint8x8_t;\n-  uint8x8_t arg2_uint8x8_t;\n-\n-  out_uint16x8_t = vabal_u8 (arg0_uint16x8_t, arg1_uint8x8_t, arg2_uint8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabal\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "9094ecb2a0774b13a968af330c116012f104dfb9", "filename": "gcc/testsuite/gcc.target/arm/neon/vabas16.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabas16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabas16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabas16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vabas16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabas16 (void)\n-{\n-  int16x4_t out_int16x4_t;\n-  int16x4_t arg0_int16x4_t;\n-  int16x4_t arg1_int16x4_t;\n-  int16x4_t arg2_int16x4_t;\n-\n-  out_int16x4_t = vaba_s16 (arg0_int16x4_t, arg1_int16x4_t, arg2_int16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaba\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "184fc9553cad13625bc72ee77a8ff2902f525ee7", "filename": "gcc/testsuite/gcc.target/arm/neon/vabas32.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabas32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabas32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabas32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vabas32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabas32 (void)\n-{\n-  int32x2_t out_int32x2_t;\n-  int32x2_t arg0_int32x2_t;\n-  int32x2_t arg1_int32x2_t;\n-  int32x2_t arg2_int32x2_t;\n-\n-  out_int32x2_t = vaba_s32 (arg0_int32x2_t, arg1_int32x2_t, arg2_int32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaba\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "b9bc8130665d6422957afbbac6b2254079e51dcf", "filename": "gcc/testsuite/gcc.target/arm/neon/vabas8.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabas8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabas8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabas8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vabas8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabas8 (void)\n-{\n-  int8x8_t out_int8x8_t;\n-  int8x8_t arg0_int8x8_t;\n-  int8x8_t arg1_int8x8_t;\n-  int8x8_t arg2_int8x8_t;\n-\n-  out_int8x8_t = vaba_s8 (arg0_int8x8_t, arg1_int8x8_t, arg2_int8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaba\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d3b8c4ef6e2ab5a5205f109c0dbb7bd2f2df8806", "filename": "gcc/testsuite/gcc.target/arm/neon/vabau16.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabau16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabau16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabau16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vabau16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabau16 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  uint16x4_t arg0_uint16x4_t;\n-  uint16x4_t arg1_uint16x4_t;\n-  uint16x4_t arg2_uint16x4_t;\n-\n-  out_uint16x4_t = vaba_u16 (arg0_uint16x4_t, arg1_uint16x4_t, arg2_uint16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaba\\.u16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "2c65f1b72698268474a5a099615db6fe59bcdddf", "filename": "gcc/testsuite/gcc.target/arm/neon/vabau32.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabau32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabau32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabau32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vabau32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabau32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  uint32x2_t arg0_uint32x2_t;\n-  uint32x2_t arg1_uint32x2_t;\n-  uint32x2_t arg2_uint32x2_t;\n-\n-  out_uint32x2_t = vaba_u32 (arg0_uint32x2_t, arg1_uint32x2_t, arg2_uint32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaba\\.u32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "665410ced8151b999c86a3ccddd1be70f1b2d009", "filename": "gcc/testsuite/gcc.target/arm/neon/vabau8.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabau8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabau8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabau8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vabau8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabau8 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  uint8x8_t arg0_uint8x8_t;\n-  uint8x8_t arg1_uint8x8_t;\n-  uint8x8_t arg2_uint8x8_t;\n-\n-  out_uint8x8_t = vaba_u8 (arg0_uint8x8_t, arg1_uint8x8_t, arg2_uint8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaba\\.u8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "682736ff263a601cf30670cb4c21399da98deb4e", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdQf32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vabdQf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabdQf32 (void)\n-{\n-  float32x4_t out_float32x4_t;\n-  float32x4_t arg0_float32x4_t;\n-  float32x4_t arg1_float32x4_t;\n-\n-  out_float32x4_t = vabdq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabd\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "37349e91f3252a6918925821a6af4e97bbe94a30", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdQs16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQs16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vabdQs16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabdQs16 (void)\n-{\n-  int16x8_t out_int16x8_t;\n-  int16x8_t arg0_int16x8_t;\n-  int16x8_t arg1_int16x8_t;\n-\n-  out_int16x8_t = vabdq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabd\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "961b4cab2a19bc58409ad4126a9e31237e89e9b4", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdQs32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQs32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vabdQs32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabdQs32 (void)\n-{\n-  int32x4_t out_int32x4_t;\n-  int32x4_t arg0_int32x4_t;\n-  int32x4_t arg1_int32x4_t;\n-\n-  out_int32x4_t = vabdq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabd\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "b6d6eaf292ece7683f7d8d9d4f5a89dc53789b33", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdQs8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQs8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vabdQs8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabdQs8 (void)\n-{\n-  int8x16_t out_int8x16_t;\n-  int8x16_t arg0_int8x16_t;\n-  int8x16_t arg1_int8x16_t;\n-\n-  out_int8x16_t = vabdq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabd\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "1c86be1c6ed9e24a873fc985ad4feb5ada25970c", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdQu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vabdQu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabdQu16 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  uint16x8_t arg1_uint16x8_t;\n-\n-  out_uint16x8_t = vabdq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabd\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a263b65505c1daa5e5d4072df801363eaa766a46", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdQu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vabdQu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabdQu32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  uint32x4_t arg1_uint32x4_t;\n-\n-  out_uint32x4_t = vabdq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabd\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d217f48c43fe71d5f043aab097dfffc107a00304", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdQu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vabdQu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabdQu8 (void)\n-{\n-  uint8x16_t out_uint8x16_t;\n-  uint8x16_t arg0_uint8x16_t;\n-  uint8x16_t arg1_uint8x16_t;\n-\n-  out_uint8x16_t = vabdq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabd\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "9454282c00421b652ec9162090b170a3de4c89bd", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdf32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vabdf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabdf32 (void)\n-{\n-  float32x2_t out_float32x2_t;\n-  float32x2_t arg0_float32x2_t;\n-  float32x2_t arg1_float32x2_t;\n-\n-  out_float32x2_t = vabd_f32 (arg0_float32x2_t, arg1_float32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabd\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "63ac7e3706d0f4c7404309f8027bb59c78970aea", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdls16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdls16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdls16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdls16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vabdls16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabdls16 (void)\n-{\n-  int32x4_t out_int32x4_t;\n-  int16x4_t arg0_int16x4_t;\n-  int16x4_t arg1_int16x4_t;\n-\n-  out_int32x4_t = vabdl_s16 (arg0_int16x4_t, arg1_int16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabdl\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "7d51343a2bfac09ac5445dda91146effbd0c8e07", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdls32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdls32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdls32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdls32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vabdls32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabdls32 (void)\n-{\n-  int64x2_t out_int64x2_t;\n-  int32x2_t arg0_int32x2_t;\n-  int32x2_t arg1_int32x2_t;\n-\n-  out_int64x2_t = vabdl_s32 (arg0_int32x2_t, arg1_int32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabdl\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0d9ac62a5ee37bbe501ab839b3ce429ab5d753eb", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdls8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdls8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdls8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdls8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vabdls8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabdls8 (void)\n-{\n-  int16x8_t out_int16x8_t;\n-  int8x8_t arg0_int8x8_t;\n-  int8x8_t arg1_int8x8_t;\n-\n-  out_int16x8_t = vabdl_s8 (arg0_int8x8_t, arg1_int8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabdl\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6f19e6720164ed2700dc071c80a3f7e315665456", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdlu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdlu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdlu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdlu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vabdlu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabdlu16 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  uint16x4_t arg0_uint16x4_t;\n-  uint16x4_t arg1_uint16x4_t;\n-\n-  out_uint32x4_t = vabdl_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabdl\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0ec3f93f2ac78fd7d6b1aa9704fdd7e7c9990d86", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdlu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdlu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdlu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdlu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vabdlu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabdlu32 (void)\n-{\n-  uint64x2_t out_uint64x2_t;\n-  uint32x2_t arg0_uint32x2_t;\n-  uint32x2_t arg1_uint32x2_t;\n-\n-  out_uint64x2_t = vabdl_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabdl\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0d981fae277e805272becdf29f53c87dcaef7569", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdlu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdlu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdlu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdlu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vabdlu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabdlu8 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  uint8x8_t arg0_uint8x8_t;\n-  uint8x8_t arg1_uint8x8_t;\n-\n-  out_uint16x8_t = vabdl_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabdl\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a13ee8865c4f70443f164980c1224bb3c28e9010", "filename": "gcc/testsuite/gcc.target/arm/neon/vabds16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabds16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabds16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabds16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vabds16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabds16 (void)\n-{\n-  int16x4_t out_int16x4_t;\n-  int16x4_t arg0_int16x4_t;\n-  int16x4_t arg1_int16x4_t;\n-\n-  out_int16x4_t = vabd_s16 (arg0_int16x4_t, arg1_int16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabd\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "fdbfdb656c22e05ab1bbbf571790344b5f65c805", "filename": "gcc/testsuite/gcc.target/arm/neon/vabds32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabds32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vabds32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabds32 (void)\n-{\n-  int32x2_t out_int32x2_t;\n-  int32x2_t arg0_int32x2_t;\n-  int32x2_t arg1_int32x2_t;\n-\n-  out_int32x2_t = vabd_s32 (arg0_int32x2_t, arg1_int32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabd\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "2b0fe0abb07900d1acc8d46910f70ba28d79c41a", "filename": "gcc/testsuite/gcc.target/arm/neon/vabds8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabds8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabds8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabds8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vabds8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabds8 (void)\n-{\n-  int8x8_t out_int8x8_t;\n-  int8x8_t arg0_int8x8_t;\n-  int8x8_t arg1_int8x8_t;\n-\n-  out_int8x8_t = vabd_s8 (arg0_int8x8_t, arg1_int8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabd\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "ca599ac56af26b4d4cd1806a501e9aacf64843ff", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vabdu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabdu16 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  uint16x4_t arg0_uint16x4_t;\n-  uint16x4_t arg1_uint16x4_t;\n-\n-  out_uint16x4_t = vabd_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabd\\.u16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "cdd83429cc74995e7af7e8eec2fdbf8808f0f6da", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vabdu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabdu32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  uint32x2_t arg0_uint32x2_t;\n-  uint32x2_t arg1_uint32x2_t;\n-\n-  out_uint32x2_t = vabd_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabd\\.u32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "1d939185ed05960d1ec4b81c392f28f4231ab44d", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vabdu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabdu8 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  uint8x8_t arg0_uint8x8_t;\n-  uint8x8_t arg1_uint8x8_t;\n-\n-  out_uint8x8_t = vabd_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabd\\.u8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f77af2a5d043b2d932e141eaba9aecb1f3d2d807", "filename": "gcc/testsuite/gcc.target/arm/neon/vabsQf32.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vabsQf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabsQf32 (void)\n-{\n-  float32x4_t out_float32x4_t;\n-  float32x4_t arg0_float32x4_t;\n-\n-  out_float32x4_t = vabsq_f32 (arg0_float32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabs\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "5b3a3578fb9b416238ca52e01f3c8068bfa57904", "filename": "gcc/testsuite/gcc.target/arm/neon/vabsQs16.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQs16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vabsQs16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabsQs16 (void)\n-{\n-  int16x8_t out_int16x8_t;\n-  int16x8_t arg0_int16x8_t;\n-\n-  out_int16x8_t = vabsq_s16 (arg0_int16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabs\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a0ad40304962b11b9d010c9304c5059c10cb43c9", "filename": "gcc/testsuite/gcc.target/arm/neon/vabsQs32.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQs32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vabsQs32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabsQs32 (void)\n-{\n-  int32x4_t out_int32x4_t;\n-  int32x4_t arg0_int32x4_t;\n-\n-  out_int32x4_t = vabsq_s32 (arg0_int32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabs\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "786d20044136859de15a83631428e288f672a7ab", "filename": "gcc/testsuite/gcc.target/arm/neon/vabsQs8.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQs8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vabsQs8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabsQs8 (void)\n-{\n-  int8x16_t out_int8x16_t;\n-  int8x16_t arg0_int8x16_t;\n-\n-  out_int8x16_t = vabsq_s8 (arg0_int8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabs\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "b1845da54f64958dfdbe2c607087782a89f687a9", "filename": "gcc/testsuite/gcc.target/arm/neon/vabsf32.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabsf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabsf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabsf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vabsf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabsf32 (void)\n-{\n-  float32x2_t out_float32x2_t;\n-  float32x2_t arg0_float32x2_t;\n-\n-  out_float32x2_t = vabs_f32 (arg0_float32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabs\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "ad37064889883951a57c1b933ab18f5b4f8a8f6e", "filename": "gcc/testsuite/gcc.target/arm/neon/vabss16.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabss16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabss16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabss16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vabss16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabss16 (void)\n-{\n-  int16x4_t out_int16x4_t;\n-  int16x4_t arg0_int16x4_t;\n-\n-  out_int16x4_t = vabs_s16 (arg0_int16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabs\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "38066982fcfb1a556c99dc89e649c9c1a81c85d9", "filename": "gcc/testsuite/gcc.target/arm/neon/vabss32.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabss32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabss32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabss32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vabss32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabss32 (void)\n-{\n-  int32x2_t out_int32x2_t;\n-  int32x2_t arg0_int32x2_t;\n-\n-  out_int32x2_t = vabs_s32 (arg0_int32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabs\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a36a2a7669a2113a497046c9d763b6a62f609671", "filename": "gcc/testsuite/gcc.target/arm/neon/vabss8.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabss8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabss8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabss8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vabss8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vabss8 (void)\n-{\n-  int8x8_t out_int8x8_t;\n-  int8x8_t arg0_int8x8_t;\n-\n-  out_int8x8_t = vabs_s8 (arg0_int8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vabs\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "dd2c06abba0992bb6b184626214af0568505b44b", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddQf32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddQf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddQf32 (void)\n-{\n-  float32x4_t out_float32x4_t;\n-  float32x4_t arg0_float32x4_t;\n-  float32x4_t arg1_float32x4_t;\n-\n-  out_float32x4_t = vaddq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vadd\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "ec000faa3b0c1c005cce0ddd386c5a1984ce3905", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddQs16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddQs16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddQs16 (void)\n-{\n-  int16x8_t out_int16x8_t;\n-  int16x8_t arg0_int16x8_t;\n-  int16x8_t arg1_int16x8_t;\n-\n-  out_int16x8_t = vaddq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vadd\\.i16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "34ead8ca80f3ee05446f2a02d48c79b68abec400", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddQs32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddQs32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddQs32 (void)\n-{\n-  int32x4_t out_int32x4_t;\n-  int32x4_t arg0_int32x4_t;\n-  int32x4_t arg1_int32x4_t;\n-\n-  out_int32x4_t = vaddq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vadd\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "77942deee66392ad285845f5f3ee69a741dce046", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddQs64.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddQs64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddQs64 (void)\n-{\n-  int64x2_t out_int64x2_t;\n-  int64x2_t arg0_int64x2_t;\n-  int64x2_t arg1_int64x2_t;\n-\n-  out_int64x2_t = vaddq_s64 (arg0_int64x2_t, arg1_int64x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vadd\\.i64\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "42bcdf9ae74c184f781e8eaed5829a3c854c1eb0", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddQs8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddQs8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddQs8 (void)\n-{\n-  int8x16_t out_int8x16_t;\n-  int8x16_t arg0_int8x16_t;\n-  int8x16_t arg1_int8x16_t;\n-\n-  out_int8x16_t = vaddq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vadd\\.i8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "983bb35f6b84c9eed5e233d6124fb7fda757ea1a", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddQu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddQu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddQu16 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  uint16x8_t arg1_uint16x8_t;\n-\n-  out_uint16x8_t = vaddq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vadd\\.i16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "c98772e9389292b3db8079e951cfc9f3ddb637b3", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddQu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddQu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddQu32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  uint32x4_t arg1_uint32x4_t;\n-\n-  out_uint32x4_t = vaddq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vadd\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "95756c646719fbb0ed7a72f09ca38e83982309c8", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddQu64.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddQu64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddQu64 (void)\n-{\n-  uint64x2_t out_uint64x2_t;\n-  uint64x2_t arg0_uint64x2_t;\n-  uint64x2_t arg1_uint64x2_t;\n-\n-  out_uint64x2_t = vaddq_u64 (arg0_uint64x2_t, arg1_uint64x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vadd\\.i64\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "e52524eb00ad3580c8e8c5448dfab719612b8d86", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddQu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddQu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddQu8 (void)\n-{\n-  uint8x16_t out_uint8x16_t;\n-  uint8x16_t arg0_uint8x16_t;\n-  uint8x16_t arg1_uint8x16_t;\n-\n-  out_uint8x16_t = vaddq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vadd\\.i8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6afb8c195feaa74e3f922562af41edec3eeaebec", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddf32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddf32 (void)\n-{\n-  float32x2_t out_float32x2_t;\n-  float32x2_t arg0_float32x2_t;\n-  float32x2_t arg1_float32x2_t;\n-\n-  out_float32x2_t = vadd_f32 (arg0_float32x2_t, arg1_float32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vadd\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f3f35e4eccecd457d1894fed360f10a5e3215ef8", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddhns16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhns16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddhns16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddhns16 (void)\n-{\n-  int8x8_t out_int8x8_t;\n-  int16x8_t arg0_int16x8_t;\n-  int16x8_t arg1_int16x8_t;\n-\n-  out_int8x8_t = vaddhn_s16 (arg0_int16x8_t, arg1_int16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaddhn\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "028f431944d059014c4d12cf19b1d6ac3ab72af7", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddhns32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhns32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddhns32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddhns32 (void)\n-{\n-  int16x4_t out_int16x4_t;\n-  int32x4_t arg0_int32x4_t;\n-  int32x4_t arg1_int32x4_t;\n-\n-  out_int16x4_t = vaddhn_s32 (arg0_int32x4_t, arg1_int32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaddhn\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f139a6da1e7a2be432919c51e15fdb7cad422e03", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddhns64.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhns64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddhns64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddhns64 (void)\n-{\n-  int32x2_t out_int32x2_t;\n-  int64x2_t arg0_int64x2_t;\n-  int64x2_t arg1_int64x2_t;\n-\n-  out_int32x2_t = vaddhn_s64 (arg0_int64x2_t, arg1_int64x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaddhn\\.i64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6c770621e91c79cef5584ff43763fea3f1015b5b", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddhnu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhnu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhnu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhnu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddhnu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddhnu16 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  uint16x8_t arg1_uint16x8_t;\n-\n-  out_uint8x8_t = vaddhn_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaddhn\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "5315f91c1c7caebfc78207d114829dd0c0d12181", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddhnu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhnu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhnu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhnu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddhnu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddhnu32 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  uint32x4_t arg1_uint32x4_t;\n-\n-  out_uint16x4_t = vaddhn_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaddhn\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6aa25609e16b2373948d9fe999d0b8f3b6cfe5f6", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddhnu64.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhnu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhnu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhnu64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddhnu64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddhnu64 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  uint64x2_t arg0_uint64x2_t;\n-  uint64x2_t arg1_uint64x2_t;\n-\n-  out_uint32x2_t = vaddhn_u64 (arg0_uint64x2_t, arg1_uint64x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaddhn\\.i64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "4b84ae89e6a747b561746023d2872f9d5063cad0", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddls16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddls16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddls16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddls16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddls16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddls16 (void)\n-{\n-  int32x4_t out_int32x4_t;\n-  int16x4_t arg0_int16x4_t;\n-  int16x4_t arg1_int16x4_t;\n-\n-  out_int32x4_t = vaddl_s16 (arg0_int16x4_t, arg1_int16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaddl\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "3f267cc5ad718a9848d5ba03df13638b74209342", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddls32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddls32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddls32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddls32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddls32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddls32 (void)\n-{\n-  int64x2_t out_int64x2_t;\n-  int32x2_t arg0_int32x2_t;\n-  int32x2_t arg1_int32x2_t;\n-\n-  out_int64x2_t = vaddl_s32 (arg0_int32x2_t, arg1_int32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaddl\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "c2136109316bc0029810ab3c1a63414d3e0e54dc", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddls8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddls8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddls8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddls8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddls8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddls8 (void)\n-{\n-  int16x8_t out_int16x8_t;\n-  int8x8_t arg0_int8x8_t;\n-  int8x8_t arg1_int8x8_t;\n-\n-  out_int16x8_t = vaddl_s8 (arg0_int8x8_t, arg1_int8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaddl\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6e5341c27cb8e6a4696c4d79009f5d9ef81d855b", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddlu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddlu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddlu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddlu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddlu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddlu16 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  uint16x4_t arg0_uint16x4_t;\n-  uint16x4_t arg1_uint16x4_t;\n-\n-  out_uint32x4_t = vaddl_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaddl\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "bc4359beae5967a3aab1921fb78c3247a3ecad28", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddlu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddlu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddlu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddlu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddlu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddlu32 (void)\n-{\n-  uint64x2_t out_uint64x2_t;\n-  uint32x2_t arg0_uint32x2_t;\n-  uint32x2_t arg1_uint32x2_t;\n-\n-  out_uint64x2_t = vaddl_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaddl\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "9ec110e5a7307ee1a9e8acf7d846d50e8dc9b165", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddlu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddlu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddlu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddlu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddlu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddlu8 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  uint8x8_t arg0_uint8x8_t;\n-  uint8x8_t arg1_uint8x8_t;\n-\n-  out_uint16x8_t = vaddl_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaddl\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "1c2f70b31fbb07278a0c0976006b807dae29e142", "filename": "gcc/testsuite/gcc.target/arm/neon/vadds16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vadds16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vadds16 (void)\n-{\n-  int16x4_t out_int16x4_t;\n-  int16x4_t arg0_int16x4_t;\n-  int16x4_t arg1_int16x4_t;\n-\n-  out_int16x4_t = vadd_s16 (arg0_int16x4_t, arg1_int16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vadd\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8889228215d4fa3b1c84dc40c1317650203e534c", "filename": "gcc/testsuite/gcc.target/arm/neon/vadds32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vadds32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vadds32 (void)\n-{\n-  int32x2_t out_int32x2_t;\n-  int32x2_t arg0_int32x2_t;\n-  int32x2_t arg1_int32x2_t;\n-\n-  out_int32x2_t = vadd_s32 (arg0_int32x2_t, arg1_int32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vadd\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8b6bb5b9ca9887405766111d256b3040bd06b3e0", "filename": "gcc/testsuite/gcc.target/arm/neon/vadds64.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vadds64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vadds64 (void)\n-{\n-  int64x1_t out_int64x1_t;\n-  int64x1_t arg0_int64x1_t;\n-  int64x1_t arg1_int64x1_t;\n-\n-  out_int64x1_t = vadd_s64 (arg0_int64x1_t, arg1_int64x1_t);\n-}\n-"}, {"sha": "6165e628728a0454ad93c93facf24acc23ea0b15", "filename": "gcc/testsuite/gcc.target/arm/neon/vadds8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vadds8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vadds8 (void)\n-{\n-  int8x8_t out_int8x8_t;\n-  int8x8_t arg0_int8x8_t;\n-  int8x8_t arg1_int8x8_t;\n-\n-  out_int8x8_t = vadd_s8 (arg0_int8x8_t, arg1_int8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vadd\\.i8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "c3469152564f700615cf3c5e5e9667e18b9d9528", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddu16 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  uint16x4_t arg0_uint16x4_t;\n-  uint16x4_t arg1_uint16x4_t;\n-\n-  out_uint16x4_t = vadd_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vadd\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8436c129aedca93a75a92f7f1e549d62c2f1ce59", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddu32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  uint32x2_t arg0_uint32x2_t;\n-  uint32x2_t arg1_uint32x2_t;\n-\n-  out_uint32x2_t = vadd_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vadd\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "4cf9fcf2b6ab143801754fcd4ce0e21d1df7480a", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddu64.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vaddu64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddu64 (void)\n-{\n-  uint64x1_t out_uint64x1_t;\n-  uint64x1_t arg0_uint64x1_t;\n-  uint64x1_t arg1_uint64x1_t;\n-\n-  out_uint64x1_t = vadd_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n-}\n-"}, {"sha": "8435a7b74c0173bf7be126f5484c1e3cdc166e3e", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddu8 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  uint8x8_t arg0_uint8x8_t;\n-  uint8x8_t arg1_uint8x8_t;\n-\n-  out_uint8x8_t = vadd_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vadd\\.i8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8021483d6aa4ffb63e4aa3b942ce480f8ae25358", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddws16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddws16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddws16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddws16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddws16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddws16 (void)\n-{\n-  int32x4_t out_int32x4_t;\n-  int32x4_t arg0_int32x4_t;\n-  int16x4_t arg1_int16x4_t;\n-\n-  out_int32x4_t = vaddw_s16 (arg0_int32x4_t, arg1_int16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaddw\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "5691af3df9a18db8e595e4cbd4bb032cc82ab7cc", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddws32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddws32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddws32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddws32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddws32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddws32 (void)\n-{\n-  int64x2_t out_int64x2_t;\n-  int64x2_t arg0_int64x2_t;\n-  int32x2_t arg1_int32x2_t;\n-\n-  out_int64x2_t = vaddw_s32 (arg0_int64x2_t, arg1_int32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaddw\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0a774c059458cd03f19d3e42f3fb6e438e821ab9", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddws8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddws8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddws8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddws8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddws8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddws8 (void)\n-{\n-  int16x8_t out_int16x8_t;\n-  int16x8_t arg0_int16x8_t;\n-  int8x8_t arg1_int8x8_t;\n-\n-  out_int16x8_t = vaddw_s8 (arg0_int16x8_t, arg1_int8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaddw\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a7cfc65cbc3ab900dce1e0dd4efc6a67728ea37c", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddwu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddwu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddwu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddwu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddwu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddwu16 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  uint16x4_t arg1_uint16x4_t;\n-\n-  out_uint32x4_t = vaddw_u16 (arg0_uint32x4_t, arg1_uint16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaddw\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "40f86f1454fe371c6e0f8c19febdb7a9c525183c", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddwu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddwu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddwu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddwu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddwu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddwu32 (void)\n-{\n-  uint64x2_t out_uint64x2_t;\n-  uint64x2_t arg0_uint64x2_t;\n-  uint32x2_t arg1_uint32x2_t;\n-\n-  out_uint64x2_t = vaddw_u32 (arg0_uint64x2_t, arg1_uint32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaddw\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "bb6d0fbdbe363728127270d905ce6ba8f7508adc", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddwu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddwu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddwu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddwu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vaddwu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vaddwu8 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  uint8x8_t arg1_uint8x8_t;\n-\n-  out_uint16x8_t = vaddw_u8 (arg0_uint16x8_t, arg1_uint8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vaddw\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "bfc9a214da71dbf1953cf6205938f8f1954b6c32", "filename": "gcc/testsuite/gcc.target/arm/neon/vandQs16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vandQs16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vandQs16 (void)\n-{\n-  int16x8_t out_int16x8_t;\n-  int16x8_t arg0_int16x8_t;\n-  int16x8_t arg1_int16x8_t;\n-\n-  out_int16x8_t = vandq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "feeca5641244f5e6c61a2be77cdff1fa212dfde1", "filename": "gcc/testsuite/gcc.target/arm/neon/vandQs32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vandQs32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vandQs32 (void)\n-{\n-  int32x4_t out_int32x4_t;\n-  int32x4_t arg0_int32x4_t;\n-  int32x4_t arg1_int32x4_t;\n-\n-  out_int32x4_t = vandq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6c67c1424453bd507f7a4f395b7759e5b650f497", "filename": "gcc/testsuite/gcc.target/arm/neon/vandQs64.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vandQs64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vandQs64 (void)\n-{\n-  int64x2_t out_int64x2_t;\n-  int64x2_t arg0_int64x2_t;\n-  int64x2_t arg1_int64x2_t;\n-\n-  out_int64x2_t = vandq_s64 (arg0_int64x2_t, arg1_int64x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "7411c335822d8fa3e8ec82fe53eb6dc5121f4925", "filename": "gcc/testsuite/gcc.target/arm/neon/vandQs8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vandQs8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vandQs8 (void)\n-{\n-  int8x16_t out_int8x16_t;\n-  int8x16_t arg0_int8x16_t;\n-  int8x16_t arg1_int8x16_t;\n-\n-  out_int8x16_t = vandq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "710312d64aade652aca86b20b265825004992c22", "filename": "gcc/testsuite/gcc.target/arm/neon/vandQu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vandQu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vandQu16 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  uint16x8_t arg1_uint16x8_t;\n-\n-  out_uint16x8_t = vandq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "64a956d19f2fc32876219b66cb07718b05edc0de", "filename": "gcc/testsuite/gcc.target/arm/neon/vandQu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vandQu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vandQu32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  uint32x4_t arg1_uint32x4_t;\n-\n-  out_uint32x4_t = vandq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "832d83c7fb5d83b2eaf7afeb3a9886bdc3c9cf54", "filename": "gcc/testsuite/gcc.target/arm/neon/vandQu64.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vandQu64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vandQu64 (void)\n-{\n-  uint64x2_t out_uint64x2_t;\n-  uint64x2_t arg0_uint64x2_t;\n-  uint64x2_t arg1_uint64x2_t;\n-\n-  out_uint64x2_t = vandq_u64 (arg0_uint64x2_t, arg1_uint64x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "4820aa40573fc4280daae45f733af809d4ac3c30", "filename": "gcc/testsuite/gcc.target/arm/neon/vandQu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vandQu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vandQu8 (void)\n-{\n-  uint8x16_t out_uint8x16_t;\n-  uint8x16_t arg0_uint8x16_t;\n-  uint8x16_t arg1_uint8x16_t;\n-\n-  out_uint8x16_t = vandq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0e17817b832a537931cc7a06b9271eba8f19e279", "filename": "gcc/testsuite/gcc.target/arm/neon/vands16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vands16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vands16 (void)\n-{\n-  int16x4_t out_int16x4_t;\n-  int16x4_t arg0_int16x4_t;\n-  int16x4_t arg1_int16x4_t;\n-\n-  out_int16x4_t = vand_s16 (arg0_int16x4_t, arg1_int16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d56529e96f1fc8131f0160486837dbf475698539", "filename": "gcc/testsuite/gcc.target/arm/neon/vands32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vands32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vands32 (void)\n-{\n-  int32x2_t out_int32x2_t;\n-  int32x2_t arg0_int32x2_t;\n-  int32x2_t arg1_int32x2_t;\n-\n-  out_int32x2_t = vand_s32 (arg0_int32x2_t, arg1_int32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "164159419c17246c4d41a3145b65eaab99c8a993", "filename": "gcc/testsuite/gcc.target/arm/neon/vands64.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vands64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vands64 (void)\n-{\n-  int64x1_t out_int64x1_t;\n-  int64x1_t arg0_int64x1_t;\n-  int64x1_t arg1_int64x1_t;\n-\n-  out_int64x1_t = vand_s64 (arg0_int64x1_t, arg1_int64x1_t);\n-}\n-"}, {"sha": "961e3d83fda8c475be2b422e59ee6755ae2350c9", "filename": "gcc/testsuite/gcc.target/arm/neon/vands8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vands8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vands8 (void)\n-{\n-  int8x8_t out_int8x8_t;\n-  int8x8_t arg0_int8x8_t;\n-  int8x8_t arg1_int8x8_t;\n-\n-  out_int8x8_t = vand_s8 (arg0_int8x8_t, arg1_int8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d60a0a15ee3a58a403fa88bae58a64e5d91616d7", "filename": "gcc/testsuite/gcc.target/arm/neon/vandu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vandu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vandu16 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  uint16x4_t arg0_uint16x4_t;\n-  uint16x4_t arg1_uint16x4_t;\n-\n-  out_uint16x4_t = vand_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "79f57736a9d95e7e7ee88df0544408d26b351b80", "filename": "gcc/testsuite/gcc.target/arm/neon/vandu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vandu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vandu32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  uint32x2_t arg0_uint32x2_t;\n-  uint32x2_t arg1_uint32x2_t;\n-\n-  out_uint32x2_t = vand_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "40172e9612882af7ec646961391617ae3f3c31b7", "filename": "gcc/testsuite/gcc.target/arm/neon/vandu64.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vandu64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vandu64 (void)\n-{\n-  uint64x1_t out_uint64x1_t;\n-  uint64x1_t arg0_uint64x1_t;\n-  uint64x1_t arg1_uint64x1_t;\n-\n-  out_uint64x1_t = vand_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n-}\n-"}, {"sha": "1244ecace2ace14ed4b512bc64fa2fcf6c3fd591", "filename": "gcc/testsuite/gcc.target/arm/neon/vandu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vandu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vandu8 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  uint8x8_t arg0_uint8x8_t;\n-  uint8x8_t arg1_uint8x8_t;\n-\n-  out_uint8x8_t = vand_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "ff6625525ffedae9fd9f456b6e491131212c5c96", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQs16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vbicQs16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O2\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-int16x8_t out_int16x8_t;\n-int16x8_t arg0_int16x8_t;\n-int16x8_t arg1_int16x8_t;\n-void test_vbicQs16 (void)\n-{\n-\n-  out_int16x8_t = vbicq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "4a691bd5915bf69d62e489fe58e9241ef74da797", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQs32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vbicQs32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O2\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-int32x4_t out_int32x4_t;\n-int32x4_t arg0_int32x4_t;\n-int32x4_t arg1_int32x4_t;\n-void test_vbicQs32 (void)\n-{\n-\n-  out_int32x4_t = vbicq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "403098f5fd054a9bba8ca3692fb507817fb3600b", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQs64.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vbicQs64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O2\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-int64x2_t out_int64x2_t;\n-int64x2_t arg0_int64x2_t;\n-int64x2_t arg1_int64x2_t;\n-void test_vbicQs64 (void)\n-{\n-\n-  out_int64x2_t = vbicq_s64 (arg0_int64x2_t, arg1_int64x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "576769c3cd5fec9eb99e2b011828b161ede9df5a", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQs8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vbicQs8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O2\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-int8x16_t out_int8x16_t;\n-int8x16_t arg0_int8x16_t;\n-int8x16_t arg1_int8x16_t;\n-void test_vbicQs8 (void)\n-{\n-\n-  out_int8x16_t = vbicq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "3504a2685c847941458e52009aeb509885d1584d", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vbicQu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O2\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-uint16x8_t out_uint16x8_t;\n-uint16x8_t arg0_uint16x8_t;\n-uint16x8_t arg1_uint16x8_t;\n-void test_vbicQu16 (void)\n-{\n-\n-  out_uint16x8_t = vbicq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "993280b2be3cf0fc191c9c90efd355a5cca2246c", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vbicQu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O2\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-uint32x4_t out_uint32x4_t;\n-uint32x4_t arg0_uint32x4_t;\n-uint32x4_t arg1_uint32x4_t;\n-void test_vbicQu32 (void)\n-{\n-\n-  out_uint32x4_t = vbicq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "fb27c6292084c7faa102dface94e5490370b7411", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQu64.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vbicQu64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O2\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-uint64x2_t out_uint64x2_t;\n-uint64x2_t arg0_uint64x2_t;\n-uint64x2_t arg1_uint64x2_t;\n-void test_vbicQu64 (void)\n-{\n-\n-  out_uint64x2_t = vbicq_u64 (arg0_uint64x2_t, arg1_uint64x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "65f0e403304403fea3dcf99b354ba438df9d8ed9", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vbicQu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O2\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-uint8x16_t out_uint8x16_t;\n-uint8x16_t arg0_uint8x16_t;\n-uint8x16_t arg1_uint8x16_t;\n-void test_vbicQu8 (void)\n-{\n-\n-  out_uint8x16_t = vbicq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "95aed5b08df51f91af19abeb8d6e15006c206216", "filename": "gcc/testsuite/gcc.target/arm/neon/vbics16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vbics16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O2\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-int16x4_t out_int16x4_t;\n-int16x4_t arg0_int16x4_t;\n-int16x4_t arg1_int16x4_t;\n-void test_vbics16 (void)\n-{\n-\n-  out_int16x4_t = vbic_s16 (arg0_int16x4_t, arg1_int16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "925d7483c1d255d0f813d82063ac625062bccdc7", "filename": "gcc/testsuite/gcc.target/arm/neon/vbics32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vbics32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O2\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-int32x2_t out_int32x2_t;\n-int32x2_t arg0_int32x2_t;\n-int32x2_t arg1_int32x2_t;\n-void test_vbics32 (void)\n-{\n-\n-  out_int32x2_t = vbic_s32 (arg0_int32x2_t, arg1_int32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "c7ab6cbb0068727ead146096a92071f79230058d", "filename": "gcc/testsuite/gcc.target/arm/neon/vbics64.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vbics64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O2\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-int64x1_t out_int64x1_t;\n-int64x1_t arg0_int64x1_t;\n-int64x1_t arg1_int64x1_t;\n-void test_vbics64 (void)\n-{\n-\n-  out_int64x1_t = vbic_s64 (arg0_int64x1_t, arg1_int64x1_t);\n-}\n-"}, {"sha": "22e2a12fe86eb42cccc9bac3a6b83702ce70bab0", "filename": "gcc/testsuite/gcc.target/arm/neon/vbics8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vbics8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O2\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-int8x8_t out_int8x8_t;\n-int8x8_t arg0_int8x8_t;\n-int8x8_t arg1_int8x8_t;\n-void test_vbics8 (void)\n-{\n-\n-  out_int8x8_t = vbic_s8 (arg0_int8x8_t, arg1_int8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "cfa96c10a4a69d59069a2feeb364ee6695457d48", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vbicu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O2\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-uint16x4_t out_uint16x4_t;\n-uint16x4_t arg0_uint16x4_t;\n-uint16x4_t arg1_uint16x4_t;\n-void test_vbicu16 (void)\n-{\n-\n-  out_uint16x4_t = vbic_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "65f49a53bfe98fa07477fd920cda80998872b58f", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vbicu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O2\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-uint32x2_t out_uint32x2_t;\n-uint32x2_t arg0_uint32x2_t;\n-uint32x2_t arg1_uint32x2_t;\n-void test_vbicu32 (void)\n-{\n-\n-  out_uint32x2_t = vbic_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "89c8a5e1748cb0240fa16b9249ef843c6ccfba51", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicu64.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vbicu64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O2\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-uint64x1_t out_uint64x1_t;\n-uint64x1_t arg0_uint64x1_t;\n-uint64x1_t arg1_uint64x1_t;\n-void test_vbicu64 (void)\n-{\n-\n-  out_uint64x1_t = vbic_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n-}\n-"}, {"sha": "930eb36acf431d16a3ee5733cbc177f0a5d09254", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vbicu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O2\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-uint8x8_t out_uint8x8_t;\n-uint8x8_t arg0_uint8x8_t;\n-uint8x8_t arg1_uint8x8_t;\n-void test_vbicu8 (void)\n-{\n-\n-  out_uint8x8_t = vbic_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6db03f35a6206259cc5625e63eff46b27b8e453e", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQf32.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbslQf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbslQf32 (void)\n-{\n-  float32x4_t out_float32x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  float32x4_t arg1_float32x4_t;\n-  float32x4_t arg2_float32x4_t;\n-\n-  out_float32x4_t = vbslq_f32 (arg0_uint32x4_t, arg1_float32x4_t, arg2_float32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0c0c88dd1cfa7313c83c77c7c66a760bc0dd31bf", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQp16.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbslQp16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbslQp16 (void)\n-{\n-  poly16x8_t out_poly16x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  poly16x8_t arg1_poly16x8_t;\n-  poly16x8_t arg2_poly16x8_t;\n-\n-  out_poly16x8_t = vbslq_p16 (arg0_uint16x8_t, arg1_poly16x8_t, arg2_poly16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "50d8180b17af3cf9501fcece25c30f64ab2a8125", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQp64.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbslQp64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_crypto_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_crypto } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbslQp64 (void)\n-{\n-  poly64x2_t out_poly64x2_t;\n-  uint64x2_t arg0_uint64x2_t;\n-  poly64x2_t arg1_poly64x2_t;\n-  poly64x2_t arg2_poly64x2_t;\n-\n-  out_poly64x2_t = vbslq_p64 (arg0_uint64x2_t, arg1_poly64x2_t, arg2_poly64x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "2d09700186c9010cc2bf4cc23cfecd03c5d0ca2f", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQp8.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbslQp8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbslQp8 (void)\n-{\n-  poly8x16_t out_poly8x16_t;\n-  uint8x16_t arg0_uint8x16_t;\n-  poly8x16_t arg1_poly8x16_t;\n-  poly8x16_t arg2_poly8x16_t;\n-\n-  out_poly8x16_t = vbslq_p8 (arg0_uint8x16_t, arg1_poly8x16_t, arg2_poly8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "28031941b62edfd818933e1031ded23cb91c35cb", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQs16.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbslQs16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbslQs16 (void)\n-{\n-  int16x8_t out_int16x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  int16x8_t arg1_int16x8_t;\n-  int16x8_t arg2_int16x8_t;\n-\n-  out_int16x8_t = vbslq_s16 (arg0_uint16x8_t, arg1_int16x8_t, arg2_int16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "637895d1c496a5675e14243519094e107caeb82f", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQs32.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbslQs32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbslQs32 (void)\n-{\n-  int32x4_t out_int32x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  int32x4_t arg1_int32x4_t;\n-  int32x4_t arg2_int32x4_t;\n-\n-  out_int32x4_t = vbslq_s32 (arg0_uint32x4_t, arg1_int32x4_t, arg2_int32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d329d194392aa7f0ae9df83b38b594671592a94a", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQs64.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbslQs64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbslQs64 (void)\n-{\n-  int64x2_t out_int64x2_t;\n-  uint64x2_t arg0_uint64x2_t;\n-  int64x2_t arg1_int64x2_t;\n-  int64x2_t arg2_int64x2_t;\n-\n-  out_int64x2_t = vbslq_s64 (arg0_uint64x2_t, arg1_int64x2_t, arg2_int64x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "5e78bbcf09ed20c5f3badfa6ecfcaf1eed48e348", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQs8.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbslQs8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbslQs8 (void)\n-{\n-  int8x16_t out_int8x16_t;\n-  uint8x16_t arg0_uint8x16_t;\n-  int8x16_t arg1_int8x16_t;\n-  int8x16_t arg2_int8x16_t;\n-\n-  out_int8x16_t = vbslq_s8 (arg0_uint8x16_t, arg1_int8x16_t, arg2_int8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "2446349a294a855f11e8f6f11b11f695fabef2fe", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQu16.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbslQu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbslQu16 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  uint16x8_t arg1_uint16x8_t;\n-  uint16x8_t arg2_uint16x8_t;\n-\n-  out_uint16x8_t = vbslq_u16 (arg0_uint16x8_t, arg1_uint16x8_t, arg2_uint16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a8c32a429e8878cc4017cfd78d5521baa7d4f40a", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQu32.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbslQu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbslQu32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  uint32x4_t arg1_uint32x4_t;\n-  uint32x4_t arg2_uint32x4_t;\n-\n-  out_uint32x4_t = vbslq_u32 (arg0_uint32x4_t, arg1_uint32x4_t, arg2_uint32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "fd00ae87c3112e45537ed6f6883b164b9e53cb01", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQu64.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbslQu64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbslQu64 (void)\n-{\n-  uint64x2_t out_uint64x2_t;\n-  uint64x2_t arg0_uint64x2_t;\n-  uint64x2_t arg1_uint64x2_t;\n-  uint64x2_t arg2_uint64x2_t;\n-\n-  out_uint64x2_t = vbslq_u64 (arg0_uint64x2_t, arg1_uint64x2_t, arg2_uint64x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "123584360f20a059c79963d9d47c32ba887996b8", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQu8.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbslQu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbslQu8 (void)\n-{\n-  uint8x16_t out_uint8x16_t;\n-  uint8x16_t arg0_uint8x16_t;\n-  uint8x16_t arg1_uint8x16_t;\n-  uint8x16_t arg2_uint8x16_t;\n-\n-  out_uint8x16_t = vbslq_u8 (arg0_uint8x16_t, arg1_uint8x16_t, arg2_uint8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "345f1c89dff9dd766f26e5d9a58d8e7834f949ec", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslf32.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbslf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbslf32 (void)\n-{\n-  float32x2_t out_float32x2_t;\n-  uint32x2_t arg0_uint32x2_t;\n-  float32x2_t arg1_float32x2_t;\n-  float32x2_t arg2_float32x2_t;\n-\n-  out_float32x2_t = vbsl_f32 (arg0_uint32x2_t, arg1_float32x2_t, arg2_float32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6ce42b31eb76cf18c87dd5fee8f739f8bccf25e0", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslp16.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbslp16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbslp16 (void)\n-{\n-  poly16x4_t out_poly16x4_t;\n-  uint16x4_t arg0_uint16x4_t;\n-  poly16x4_t arg1_poly16x4_t;\n-  poly16x4_t arg2_poly16x4_t;\n-\n-  out_poly16x4_t = vbsl_p16 (arg0_uint16x4_t, arg1_poly16x4_t, arg2_poly16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0ff4cfc3833da66a04f74f6bb7464a1f6f1c2276", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslp64.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbslp64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_crypto_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_crypto } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbslp64 (void)\n-{\n-  poly64x1_t out_poly64x1_t;\n-  uint64x1_t arg0_uint64x1_t;\n-  poly64x1_t arg1_poly64x1_t;\n-  poly64x1_t arg2_poly64x1_t;\n-\n-  out_poly64x1_t = vbsl_p64 (arg0_uint64x1_t, arg1_poly64x1_t, arg2_poly64x1_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6e1f1871bf84e393c856bfc592bfb9803d74529c", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslp8.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbslp8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbslp8 (void)\n-{\n-  poly8x8_t out_poly8x8_t;\n-  uint8x8_t arg0_uint8x8_t;\n-  poly8x8_t arg1_poly8x8_t;\n-  poly8x8_t arg2_poly8x8_t;\n-\n-  out_poly8x8_t = vbsl_p8 (arg0_uint8x8_t, arg1_poly8x8_t, arg2_poly8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "3368f99c39144e2d42095142037ac7d9a30c8945", "filename": "gcc/testsuite/gcc.target/arm/neon/vbsls16.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbsls16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbsls16 (void)\n-{\n-  int16x4_t out_int16x4_t;\n-  uint16x4_t arg0_uint16x4_t;\n-  int16x4_t arg1_int16x4_t;\n-  int16x4_t arg2_int16x4_t;\n-\n-  out_int16x4_t = vbsl_s16 (arg0_uint16x4_t, arg1_int16x4_t, arg2_int16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "40bc0ad1b8ba94243be458086b4601ce55876c07", "filename": "gcc/testsuite/gcc.target/arm/neon/vbsls32.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbsls32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbsls32 (void)\n-{\n-  int32x2_t out_int32x2_t;\n-  uint32x2_t arg0_uint32x2_t;\n-  int32x2_t arg1_int32x2_t;\n-  int32x2_t arg2_int32x2_t;\n-\n-  out_int32x2_t = vbsl_s32 (arg0_uint32x2_t, arg1_int32x2_t, arg2_int32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8249a62d0c13a30c958c240655ca9e9cc3f6f0b8", "filename": "gcc/testsuite/gcc.target/arm/neon/vbsls64.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbsls64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbsls64 (void)\n-{\n-  int64x1_t out_int64x1_t;\n-  uint64x1_t arg0_uint64x1_t;\n-  int64x1_t arg1_int64x1_t;\n-  int64x1_t arg2_int64x1_t;\n-\n-  out_int64x1_t = vbsl_s64 (arg0_uint64x1_t, arg1_int64x1_t, arg2_int64x1_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "914a1d6871b26e7bd5fc204be81620abbec4c259", "filename": "gcc/testsuite/gcc.target/arm/neon/vbsls8.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbsls8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbsls8 (void)\n-{\n-  int8x8_t out_int8x8_t;\n-  uint8x8_t arg0_uint8x8_t;\n-  int8x8_t arg1_int8x8_t;\n-  int8x8_t arg2_int8x8_t;\n-\n-  out_int8x8_t = vbsl_s8 (arg0_uint8x8_t, arg1_int8x8_t, arg2_int8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "7106ffcf045159f40745656a248600c2f088b593", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslu16.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbslu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbslu16 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  uint16x4_t arg0_uint16x4_t;\n-  uint16x4_t arg1_uint16x4_t;\n-  uint16x4_t arg2_uint16x4_t;\n-\n-  out_uint16x4_t = vbsl_u16 (arg0_uint16x4_t, arg1_uint16x4_t, arg2_uint16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f6922e6f6758562681e4ad0c7e104942122c2b34", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslu32.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbslu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbslu32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  uint32x2_t arg0_uint32x2_t;\n-  uint32x2_t arg1_uint32x2_t;\n-  uint32x2_t arg2_uint32x2_t;\n-\n-  out_uint32x2_t = vbsl_u32 (arg0_uint32x2_t, arg1_uint32x2_t, arg2_uint32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "724fdb32dda42807141b30b5e8b90aa8a8a0cf74", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslu64.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu64.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbslu64' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbslu64 (void)\n-{\n-  uint64x1_t out_uint64x1_t;\n-  uint64x1_t arg0_uint64x1_t;\n-  uint64x1_t arg1_uint64x1_t;\n-  uint64x1_t arg2_uint64x1_t;\n-\n-  out_uint64x1_t = vbsl_u64 (arg0_uint64x1_t, arg1_uint64x1_t, arg2_uint64x1_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a27bc640bc404ba0cf58220a5fa85e40e33e2724", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslu8.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,21 +0,0 @@\n-/* Test the `vbslu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vbslu8 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  uint8x8_t arg0_uint8x8_t;\n-  uint8x8_t arg1_uint8x8_t;\n-  uint8x8_t arg2_uint8x8_t;\n-\n-  out_uint8x8_t = vbsl_u8 (arg0_uint8x8_t, arg1_uint8x8_t, arg2_uint8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "48e8e790424b35a414c3b5264bd1a7bb2e02c352", "filename": "gcc/testsuite/gcc.target/arm/neon/vcageQf32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcageQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcageQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcageQf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcageQf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcageQf32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  float32x4_t arg0_float32x4_t;\n-  float32x4_t arg1_float32x4_t;\n-\n-  out_uint32x4_t = vcageq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vacge\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "52084e7e7111d57283a55e337fa1723a579bc799", "filename": "gcc/testsuite/gcc.target/arm/neon/vcagef32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcagef32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcagef32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcagef32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcagef32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcagef32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  float32x2_t arg0_float32x2_t;\n-  float32x2_t arg1_float32x2_t;\n-\n-  out_uint32x2_t = vcage_f32 (arg0_float32x2_t, arg1_float32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vacge\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "e7290ed807f2575f45ec0dd01dc42cf0ea3ae3d4", "filename": "gcc/testsuite/gcc.target/arm/neon/vcagtQf32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcagtQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcagtQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcagtQf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcagtQf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcagtQf32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  float32x4_t arg0_float32x4_t;\n-  float32x4_t arg1_float32x4_t;\n-\n-  out_uint32x4_t = vcagtq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vacgt\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "ce8969bdc888b0044fad860a1b4790e592c9979f", "filename": "gcc/testsuite/gcc.target/arm/neon/vcagtf32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcagtf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcagtf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcagtf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcagtf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcagtf32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  float32x2_t arg0_float32x2_t;\n-  float32x2_t arg1_float32x2_t;\n-\n-  out_uint32x2_t = vcagt_f32 (arg0_float32x2_t, arg1_float32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vacgt\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "b429bba7eab4ef5cd5cde2ffb69dd4917c661895", "filename": "gcc/testsuite/gcc.target/arm/neon/vcaleQf32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcaleQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcaleQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcaleQf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcaleQf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcaleQf32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  float32x4_t arg0_float32x4_t;\n-  float32x4_t arg1_float32x4_t;\n-\n-  out_uint32x4_t = vcaleq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vacge\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a8340655b459eab4d9bd616be867c774fd75e83b", "filename": "gcc/testsuite/gcc.target/arm/neon/vcalef32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcalef32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcalef32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcalef32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcalef32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcalef32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  float32x2_t arg0_float32x2_t;\n-  float32x2_t arg1_float32x2_t;\n-\n-  out_uint32x2_t = vcale_f32 (arg0_float32x2_t, arg1_float32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vacge\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "dbebe489e63c5545b38a9356dc1b2112b3f80ef2", "filename": "gcc/testsuite/gcc.target/arm/neon/vcaltQf32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcaltQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcaltQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcaltQf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcaltQf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcaltQf32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  float32x4_t arg0_float32x4_t;\n-  float32x4_t arg1_float32x4_t;\n-\n-  out_uint32x4_t = vcaltq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vacgt\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "004edc6e0ade895bf82d5c94be8f129646a5333d", "filename": "gcc/testsuite/gcc.target/arm/neon/vcaltf32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcaltf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcaltf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcaltf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcaltf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcaltf32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  float32x2_t arg0_float32x2_t;\n-  float32x2_t arg1_float32x2_t;\n-\n-  out_uint32x2_t = vcalt_f32 (arg0_float32x2_t, arg1_float32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vacgt\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6a537219c14934ac3f82283b40ae7f856aea13e1", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqQf32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vceqQf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vceqQf32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  float32x4_t arg0_float32x4_t;\n-  float32x4_t arg1_float32x4_t;\n-\n-  out_uint32x4_t = vceqq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vceq\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "556fbdf35bede76e65d4393dbe77096588b6cf79", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqQp8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQp8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQp8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQp8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vceqQp8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vceqQp8 (void)\n-{\n-  uint8x16_t out_uint8x16_t;\n-  poly8x16_t arg0_poly8x16_t;\n-  poly8x16_t arg1_poly8x16_t;\n-\n-  out_uint8x16_t = vceqq_p8 (arg0_poly8x16_t, arg1_poly8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vceq\\.i8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "cfbf64a48f2fded62fb4025de4ff1e2da93a710b", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqQs16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQs16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vceqQs16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vceqQs16 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  int16x8_t arg0_int16x8_t;\n-  int16x8_t arg1_int16x8_t;\n-\n-  out_uint16x8_t = vceqq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vceq\\.i16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "1b75729f5940e2035ba769d1b6a5bea5d799d8d8", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqQs32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQs32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vceqQs32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vceqQs32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  int32x4_t arg0_int32x4_t;\n-  int32x4_t arg1_int32x4_t;\n-\n-  out_uint32x4_t = vceqq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vceq\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d6d6d30dc54a54993f34cae4f5ff711db4fe07f8", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqQs8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQs8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vceqQs8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vceqQs8 (void)\n-{\n-  uint8x16_t out_uint8x16_t;\n-  int8x16_t arg0_int8x16_t;\n-  int8x16_t arg1_int8x16_t;\n-\n-  out_uint8x16_t = vceqq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vceq\\.i8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6f33d9d971263b73abad8c6672756d6c838c11ec", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqQu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vceqQu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vceqQu16 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  uint16x8_t arg1_uint16x8_t;\n-\n-  out_uint16x8_t = vceqq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vceq\\.i16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "df2d47b7f8c8806bc0aaf8b1da2678a3a90d372d", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqQu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vceqQu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vceqQu32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  uint32x4_t arg1_uint32x4_t;\n-\n-  out_uint32x4_t = vceqq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vceq\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "80d56ffe4245e6290aab72a70acfc5182f856a8c", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqQu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vceqQu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vceqQu8 (void)\n-{\n-  uint8x16_t out_uint8x16_t;\n-  uint8x16_t arg0_uint8x16_t;\n-  uint8x16_t arg1_uint8x16_t;\n-\n-  out_uint8x16_t = vceqq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vceq\\.i8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "046a5052004f64e74477962bd667c37c3076aee7", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqf32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vceqf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vceqf32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  float32x2_t arg0_float32x2_t;\n-  float32x2_t arg1_float32x2_t;\n-\n-  out_uint32x2_t = vceq_f32 (arg0_float32x2_t, arg1_float32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vceq\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "5758ebaf81a9a829662c9efc8dea3e3628b3bacc", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqp8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqp8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqp8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqp8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vceqp8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vceqp8 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  poly8x8_t arg0_poly8x8_t;\n-  poly8x8_t arg1_poly8x8_t;\n-\n-  out_uint8x8_t = vceq_p8 (arg0_poly8x8_t, arg1_poly8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vceq\\.i8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "11337b0e173f3853dabbaa7f38a19633d4c0f9d6", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqs16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqs16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vceqs16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vceqs16 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  int16x4_t arg0_int16x4_t;\n-  int16x4_t arg1_int16x4_t;\n-\n-  out_uint16x4_t = vceq_s16 (arg0_int16x4_t, arg1_int16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vceq\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "506c9800d36e92b5476f1a3a0d5892d0d7d33d4a", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqs32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqs32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vceqs32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vceqs32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  int32x2_t arg0_int32x2_t;\n-  int32x2_t arg1_int32x2_t;\n-\n-  out_uint32x2_t = vceq_s32 (arg0_int32x2_t, arg1_int32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vceq\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "c76e2b4b102f6d317e288cfdb856d34e512bdbbd", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqs8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqs8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vceqs8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vceqs8 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  int8x8_t arg0_int8x8_t;\n-  int8x8_t arg1_int8x8_t;\n-\n-  out_uint8x8_t = vceq_s8 (arg0_int8x8_t, arg1_int8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vceq\\.i8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "dda7ab79798e55b1008eb3f6fbf4a0791d4d27d6", "filename": "gcc/testsuite/gcc.target/arm/neon/vcequ16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcequ16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcequ16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcequ16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcequ16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcequ16 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  uint16x4_t arg0_uint16x4_t;\n-  uint16x4_t arg1_uint16x4_t;\n-\n-  out_uint16x4_t = vceq_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vceq\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "4ee8c5f6a02919a41a53c1c53da0e9c214332696", "filename": "gcc/testsuite/gcc.target/arm/neon/vcequ32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcequ32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcequ32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcequ32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcequ32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcequ32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  uint32x2_t arg0_uint32x2_t;\n-  uint32x2_t arg1_uint32x2_t;\n-\n-  out_uint32x2_t = vceq_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vceq\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "60134cf63cbe3c3733cd1b83af829bbb4cf17750", "filename": "gcc/testsuite/gcc.target/arm/neon/vcequ8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcequ8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcequ8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcequ8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcequ8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcequ8 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  uint8x8_t arg0_uint8x8_t;\n-  uint8x8_t arg1_uint8x8_t;\n-\n-  out_uint8x8_t = vceq_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vceq\\.i8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "93a5e3ca86d418a728190409439298aa27af4c3e", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgeQf32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgeQf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgeQf32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  float32x4_t arg0_float32x4_t;\n-  float32x4_t arg1_float32x4_t;\n-\n-  out_uint32x4_t = vcgeq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f60344f4f3d75d60d2cf2c886fbe6f70114d4504", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgeQs16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQs16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgeQs16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgeQs16 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  int16x8_t arg0_int16x8_t;\n-  int16x8_t arg1_int16x8_t;\n-\n-  out_uint16x8_t = vcgeq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "1d8caccfa71fef3b8c0452d3175ab7efd6707db2", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgeQs32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQs32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgeQs32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgeQs32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  int32x4_t arg0_int32x4_t;\n-  int32x4_t arg1_int32x4_t;\n-\n-  out_uint32x4_t = vcgeq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "b5bb84e2b41242321b810df54eb05a7409d316dd", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgeQs8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQs8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgeQs8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgeQs8 (void)\n-{\n-  uint8x16_t out_uint8x16_t;\n-  int8x16_t arg0_int8x16_t;\n-  int8x16_t arg1_int8x16_t;\n-\n-  out_uint8x16_t = vcgeq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "62f060f8f3d09f585345cad9c90b2343d3f92823", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgeQu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgeQu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgeQu16 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  uint16x8_t arg1_uint16x8_t;\n-\n-  out_uint16x8_t = vcgeq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a86dfa216d44586c3910d11f5817407618deda48", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgeQu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgeQu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgeQu32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  uint32x4_t arg1_uint32x4_t;\n-\n-  out_uint32x4_t = vcgeq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "fbf678c175bd044f5a9a87dc72fbf8c15c0115e8", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgeQu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgeQu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgeQu8 (void)\n-{\n-  uint8x16_t out_uint8x16_t;\n-  uint8x16_t arg0_uint8x16_t;\n-  uint8x16_t arg1_uint8x16_t;\n-\n-  out_uint8x16_t = vcgeq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f12259aecc240434c44c435d3b1927e8a8c3724e", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgef32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgef32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgef32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgef32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgef32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgef32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  float32x2_t arg0_float32x2_t;\n-  float32x2_t arg1_float32x2_t;\n-\n-  out_uint32x2_t = vcge_f32 (arg0_float32x2_t, arg1_float32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d420dec6094212357283f61e2aaa48c20140bb1c", "filename": "gcc/testsuite/gcc.target/arm/neon/vcges16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcges16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcges16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcges16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcges16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcges16 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  int16x4_t arg0_int16x4_t;\n-  int16x4_t arg1_int16x4_t;\n-\n-  out_uint16x4_t = vcge_s16 (arg0_int16x4_t, arg1_int16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "c4e731588c642880bbfd8ee0abc0b68462de4403", "filename": "gcc/testsuite/gcc.target/arm/neon/vcges32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcges32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcges32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcges32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcges32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcges32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  int32x2_t arg0_int32x2_t;\n-  int32x2_t arg1_int32x2_t;\n-\n-  out_uint32x2_t = vcge_s32 (arg0_int32x2_t, arg1_int32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0484e247748cf6c0d56e3bbb49d122ae4e78d0a3", "filename": "gcc/testsuite/gcc.target/arm/neon/vcges8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcges8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcges8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcges8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcges8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcges8 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  int8x8_t arg0_int8x8_t;\n-  int8x8_t arg1_int8x8_t;\n-\n-  out_uint8x8_t = vcge_s8 (arg0_int8x8_t, arg1_int8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "89874e040aa81a8175b643d3b3b5faec97edbd32", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgeu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgeu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgeu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgeu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgeu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgeu16 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  uint16x4_t arg0_uint16x4_t;\n-  uint16x4_t arg1_uint16x4_t;\n-\n-  out_uint16x4_t = vcge_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.u16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "cb907fd3fa5c6b0460232b46630366c612f4083e", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgeu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgeu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgeu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgeu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgeu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgeu32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  uint32x2_t arg0_uint32x2_t;\n-  uint32x2_t arg1_uint32x2_t;\n-\n-  out_uint32x2_t = vcge_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.u32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "01af80920b7fff71f7a71d8e323baeebedb9f9a0", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgeu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgeu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgeu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgeu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgeu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgeu8 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  uint8x8_t arg0_uint8x8_t;\n-  uint8x8_t arg1_uint8x8_t;\n-\n-  out_uint8x8_t = vcge_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.u8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "ab5f92d6e8a18a9d713d2a8c6c8102f1d545f51a", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtQf32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgtQf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgtQf32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  float32x4_t arg0_float32x4_t;\n-  float32x4_t arg1_float32x4_t;\n-\n-  out_uint32x4_t = vcgtq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "5e966f74edb295f4105703afaeca8b2e3e059cae", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtQs16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQs16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgtQs16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgtQs16 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  int16x8_t arg0_int16x8_t;\n-  int16x8_t arg1_int16x8_t;\n-\n-  out_uint16x8_t = vcgtq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "3db4176682514834dfab2f4a3aa743675e470e82", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtQs32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQs32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgtQs32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgtQs32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  int32x4_t arg0_int32x4_t;\n-  int32x4_t arg1_int32x4_t;\n-\n-  out_uint32x4_t = vcgtq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a092e21927be063dfadf43e495c1b8af747fe2bf", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtQs8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQs8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgtQs8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgtQs8 (void)\n-{\n-  uint8x16_t out_uint8x16_t;\n-  int8x16_t arg0_int8x16_t;\n-  int8x16_t arg1_int8x16_t;\n-\n-  out_uint8x16_t = vcgtq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "2239331c40d4375972db51f852c99a04825fc136", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtQu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgtQu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgtQu16 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  uint16x8_t arg1_uint16x8_t;\n-\n-  out_uint16x8_t = vcgtq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "430f3ca07be6d2c290ccb613793bd56220075244", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtQu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgtQu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgtQu32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  uint32x4_t arg1_uint32x4_t;\n-\n-  out_uint32x4_t = vcgtq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "bb38a0ec54d02865796666382df7ef81c5f3c037", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtQu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgtQu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgtQu8 (void)\n-{\n-  uint8x16_t out_uint8x16_t;\n-  uint8x16_t arg0_uint8x16_t;\n-  uint8x16_t arg1_uint8x16_t;\n-\n-  out_uint8x16_t = vcgtq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "171780725cb9072e46395486f01a134c552ed33d", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtf32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgtf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgtf32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  float32x2_t arg0_float32x2_t;\n-  float32x2_t arg1_float32x2_t;\n-\n-  out_uint32x2_t = vcgt_f32 (arg0_float32x2_t, arg1_float32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "05088830c6bb609c8db66c4b1b1bbb5a3a946ff0", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgts16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgts16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgts16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgts16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgts16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgts16 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  int16x4_t arg0_int16x4_t;\n-  int16x4_t arg1_int16x4_t;\n-\n-  out_uint16x4_t = vcgt_s16 (arg0_int16x4_t, arg1_int16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "09dc2b5ca4a903249b96fd5d5be689464158abee", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgts32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgts32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgts32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgts32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgts32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgts32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  int32x2_t arg0_int32x2_t;\n-  int32x2_t arg1_int32x2_t;\n-\n-  out_uint32x2_t = vcgt_s32 (arg0_int32x2_t, arg1_int32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "1cb6b028bc4dca23e71a38951edc68f60a0c4d04", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgts8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgts8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgts8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgts8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgts8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgts8 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  int8x8_t arg0_int8x8_t;\n-  int8x8_t arg1_int8x8_t;\n-\n-  out_uint8x8_t = vcgt_s8 (arg0_int8x8_t, arg1_int8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0c76d53e06edeb1efa3cd51b3df060c60c30e579", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgtu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgtu16 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  uint16x4_t arg0_uint16x4_t;\n-  uint16x4_t arg1_uint16x4_t;\n-\n-  out_uint16x4_t = vcgt_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.u16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "ae6aae5a27c0b8739a22fce7789d91db89fc24a7", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgtu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgtu32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  uint32x2_t arg0_uint32x2_t;\n-  uint32x2_t arg1_uint32x2_t;\n-\n-  out_uint32x2_t = vcgt_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.u32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "3ed6bcc19f50aa4a3a8316f701a49f7ea4f6b1ec", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcgtu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcgtu8 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  uint8x8_t arg0_uint8x8_t;\n-  uint8x8_t arg1_uint8x8_t;\n-\n-  out_uint8x8_t = vcgt_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.u8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "cc24025fc309e751e5f6bf5ee6a9b354fd47416b", "filename": "gcc/testsuite/gcc.target/arm/neon/vcleQf32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcleQf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcleQf32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  float32x4_t arg0_float32x4_t;\n-  float32x4_t arg1_float32x4_t;\n-\n-  out_uint32x4_t = vcleq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "e4efae94673177eafa354523c776728cbca0e4ee", "filename": "gcc/testsuite/gcc.target/arm/neon/vcleQs16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQs16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcleQs16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcleQs16 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  int16x8_t arg0_int16x8_t;\n-  int16x8_t arg1_int16x8_t;\n-\n-  out_uint16x8_t = vcleq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a432421a7c298ba81c3822932da237b6a07ff042", "filename": "gcc/testsuite/gcc.target/arm/neon/vcleQs32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQs32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcleQs32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcleQs32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  int32x4_t arg0_int32x4_t;\n-  int32x4_t arg1_int32x4_t;\n-\n-  out_uint32x4_t = vcleq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a6d2d779c016330af27e5b1a5f44c8f524e7bfef", "filename": "gcc/testsuite/gcc.target/arm/neon/vcleQs8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQs8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcleQs8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcleQs8 (void)\n-{\n-  uint8x16_t out_uint8x16_t;\n-  int8x16_t arg0_int8x16_t;\n-  int8x16_t arg1_int8x16_t;\n-\n-  out_uint8x16_t = vcleq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "72dccdc0acf15344b4b97226be2db063388fced0", "filename": "gcc/testsuite/gcc.target/arm/neon/vcleQu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcleQu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcleQu16 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  uint16x8_t arg1_uint16x8_t;\n-\n-  out_uint16x8_t = vcleq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "c057a4f252c4b8ac7c463a5d285ced6fa7dba91c", "filename": "gcc/testsuite/gcc.target/arm/neon/vcleQu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcleQu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcleQu32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  uint32x4_t arg1_uint32x4_t;\n-\n-  out_uint32x4_t = vcleq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "618232e3be8713d94c48a6a37f20d6559fe67f53", "filename": "gcc/testsuite/gcc.target/arm/neon/vcleQu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcleQu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcleQu8 (void)\n-{\n-  uint8x16_t out_uint8x16_t;\n-  uint8x16_t arg0_uint8x16_t;\n-  uint8x16_t arg1_uint8x16_t;\n-\n-  out_uint8x16_t = vcleq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "e4ef97382b7a4b205a51cb87a65eb44f8cfe3f47", "filename": "gcc/testsuite/gcc.target/arm/neon/vclef32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclef32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclef32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclef32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vclef32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vclef32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  float32x2_t arg0_float32x2_t;\n-  float32x2_t arg1_float32x2_t;\n-\n-  out_uint32x2_t = vcle_f32 (arg0_float32x2_t, arg1_float32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8b835b3b4ce102a788b2dea39df0880c79663e0f", "filename": "gcc/testsuite/gcc.target/arm/neon/vcles16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcles16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcles16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcles16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcles16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcles16 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  int16x4_t arg0_int16x4_t;\n-  int16x4_t arg1_int16x4_t;\n-\n-  out_uint16x4_t = vcle_s16 (arg0_int16x4_t, arg1_int16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f5035d2cbcc7aac1c5b84952d807bb413a974c62", "filename": "gcc/testsuite/gcc.target/arm/neon/vcles32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcles32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcles32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcles32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcles32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcles32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  int32x2_t arg0_int32x2_t;\n-  int32x2_t arg1_int32x2_t;\n-\n-  out_uint32x2_t = vcle_s32 (arg0_int32x2_t, arg1_int32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "65b5962190c2f8891ce28ba0418c244db2d3bb21", "filename": "gcc/testsuite/gcc.target/arm/neon/vcles8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcles8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcles8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcles8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcles8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcles8 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  int8x8_t arg0_int8x8_t;\n-  int8x8_t arg1_int8x8_t;\n-\n-  out_uint8x8_t = vcle_s8 (arg0_int8x8_t, arg1_int8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a51824173c7be7034905a8d5ea443042595a584e", "filename": "gcc/testsuite/gcc.target/arm/neon/vcleu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcleu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcleu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcleu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcleu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcleu16 (void)\n-{\n-  uint16x4_t out_uint16x4_t;\n-  uint16x4_t arg0_uint16x4_t;\n-  uint16x4_t arg1_uint16x4_t;\n-\n-  out_uint16x4_t = vcle_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.u16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f1d83e893acb3afff74909cfa84435ac57d13a08", "filename": "gcc/testsuite/gcc.target/arm/neon/vcleu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcleu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcleu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcleu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcleu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcleu32 (void)\n-{\n-  uint32x2_t out_uint32x2_t;\n-  uint32x2_t arg0_uint32x2_t;\n-  uint32x2_t arg1_uint32x2_t;\n-\n-  out_uint32x2_t = vcle_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.u32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "3a394543281bccc04267fee8155d1c32a4887d32", "filename": "gcc/testsuite/gcc.target/arm/neon/vcleu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcleu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcleu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcleu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcleu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcleu8 (void)\n-{\n-  uint8x8_t out_uint8x8_t;\n-  uint8x8_t arg0_uint8x8_t;\n-  uint8x8_t arg1_uint8x8_t;\n-\n-  out_uint8x8_t = vcle_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcge\\.u8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "5c878526259b2d38899c4295ffffe49b89fac575", "filename": "gcc/testsuite/gcc.target/arm/neon/vclsQs16.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvclsQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvclsQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvclsQs16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vclsQs16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vclsQs16 (void)\n-{\n-  int16x8_t out_int16x8_t;\n-  int16x8_t arg0_int16x8_t;\n-\n-  out_int16x8_t = vclsq_s16 (arg0_int16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcls\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "c44d5a7d1c6ef96498f1391b9fee5e9c6d2eac2f", "filename": "gcc/testsuite/gcc.target/arm/neon/vclsQs32.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvclsQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvclsQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvclsQs32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vclsQs32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vclsQs32 (void)\n-{\n-  int32x4_t out_int32x4_t;\n-  int32x4_t arg0_int32x4_t;\n-\n-  out_int32x4_t = vclsq_s32 (arg0_int32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcls\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a4c7cfe17872c06af3cbae3a6d7f516af27b2c61", "filename": "gcc/testsuite/gcc.target/arm/neon/vclsQs8.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvclsQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvclsQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvclsQs8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vclsQs8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vclsQs8 (void)\n-{\n-  int8x16_t out_int8x16_t;\n-  int8x16_t arg0_int8x16_t;\n-\n-  out_int8x16_t = vclsq_s8 (arg0_int8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcls\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "5b43faec23a01ae6ca09bedfa4284e04b8f04db0", "filename": "gcc/testsuite/gcc.target/arm/neon/vclss16.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclss16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclss16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclss16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vclss16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vclss16 (void)\n-{\n-  int16x4_t out_int16x4_t;\n-  int16x4_t arg0_int16x4_t;\n-\n-  out_int16x4_t = vcls_s16 (arg0_int16x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcls\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "e60c1c0957a2b8dda505485add4c337904e11869", "filename": "gcc/testsuite/gcc.target/arm/neon/vclss32.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclss32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclss32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclss32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vclss32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vclss32 (void)\n-{\n-  int32x2_t out_int32x2_t;\n-  int32x2_t arg0_int32x2_t;\n-\n-  out_int32x2_t = vcls_s32 (arg0_int32x2_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcls\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "272ef8d039d5382eb3b81daf148b7ee3993a9e85", "filename": "gcc/testsuite/gcc.target/arm/neon/vclss8.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclss8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclss8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclss8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,19 +0,0 @@\n-/* Test the `vclss8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vclss8 (void)\n-{\n-  int8x8_t out_int8x8_t;\n-  int8x8_t arg0_int8x8_t;\n-\n-  out_int8x8_t = vcls_s8 (arg0_int8x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcls\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "95234124339a6bcf0f992ac858f69652982ec535", "filename": "gcc/testsuite/gcc.target/arm/neon/vcltQf32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQf32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcltQf32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcltQf32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  float32x4_t arg0_float32x4_t;\n-  float32x4_t arg1_float32x4_t;\n-\n-  out_uint32x4_t = vcltq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "fc67ae1ae9037d9d863ea5ac580f5ac466841dfc", "filename": "gcc/testsuite/gcc.target/arm/neon/vcltQs16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQs16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcltQs16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcltQs16 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  int16x8_t arg0_int16x8_t;\n-  int16x8_t arg1_int16x8_t;\n-\n-  out_uint16x8_t = vcltq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "58da373a455b518733b48dc9495afecf820d71fa", "filename": "gcc/testsuite/gcc.target/arm/neon/vcltQs32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQs32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcltQs32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcltQs32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  int32x4_t arg0_int32x4_t;\n-  int32x4_t arg1_int32x4_t;\n-\n-  out_uint32x4_t = vcltq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "800a50220c941f716706b70bddf03b03c8376899", "filename": "gcc/testsuite/gcc.target/arm/neon/vcltQs8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQs8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcltQs8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcltQs8 (void)\n-{\n-  uint8x16_t out_uint8x16_t;\n-  int8x16_t arg0_int8x16_t;\n-  int8x16_t arg1_int8x16_t;\n-\n-  out_uint8x16_t = vcltq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "b6435de6b3f4681a394cb534613af1d73d60c0b6", "filename": "gcc/testsuite/gcc.target/arm/neon/vcltQu16.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQu16.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcltQu16' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcltQu16 (void)\n-{\n-  uint16x8_t out_uint16x8_t;\n-  uint16x8_t arg0_uint16x8_t;\n-  uint16x8_t arg1_uint16x8_t;\n-\n-  out_uint16x8_t = vcltq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "43205b77ec3e345f152138c7843c4a2e7ed7b8ea", "filename": "gcc/testsuite/gcc.target/arm/neon/vcltQu32.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQu32.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcltQu32' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcltQu32 (void)\n-{\n-  uint32x4_t out_uint32x4_t;\n-  uint32x4_t arg0_uint32x4_t;\n-  uint32x4_t arg1_uint32x4_t;\n-\n-  out_uint32x4_t = vcltq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d65a8259f00c71fc8c8d9847f80220a8b42451f3", "filename": "gcc/testsuite/gcc.target/arm/neon/vcltQu8.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7915f06abf22e4b08f49a48cc67405611cf6f492/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQu8.c?ref=7915f06abf22e4b08f49a48cc67405611cf6f492", "patch": "@@ -1,20 +0,0 @@\n-/* Test the `vcltQu8' ARM Neon intrinsic.  */\n-/* This file was autogenerated by neon-testgen.  */\n-\n-/* { dg-do assemble } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-save-temps -O0\" } */\n-/* { dg-add-options arm_neon } */\n-\n-#include \"arm_neon.h\"\n-\n-void test_vcltQu8 (void)\n-{\n-  uint8x16_t out_uint8x16_t;\n-  uint8x16_t arg0_uint8x16_t;\n-  uint8x16_t arg1_uint8x16_t;\n-\n-  out_uint8x16_t = vcltq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n-}\n-\n-/* { dg-final { scan-assembler \"vcgt\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}]}