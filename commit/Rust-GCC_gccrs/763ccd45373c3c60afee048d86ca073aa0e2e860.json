{"sha": "763ccd45373c3c60afee048d86ca073aa0e2e860", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYzY2NkNDUzNzNjM2M2MGFmZWUwNDhkODZjYTA3M2FhMGUyZTg2MA==", "commit": {"author": {"name": "Erik Edelmann", "email": "eedelman@gcc.gnu.org", "date": "2006-04-02T17:00:39Z"}, "committer": {"name": "Erik Edelmann", "email": "eedelman@gcc.gnu.org", "date": "2006-04-02T17:00:39Z"}, "message": "trans-array.c (gfc_trans_dealloc_allocated): Take a tree representation of the array to be deallocated as argument instead...\n\n2006-04-02  Erik Edelmann  <eedelman@gcc.gnu.org>\n\n        * trans-array.c (gfc_trans_dealloc_allocated): Take a\n        tree representation of the array to be deallocated as argument\n        instead of its gfc_symbol.\n        (gfc_trans_deferred_array): Update call to\n        gfc_trans_dealloc_allocated.\n        * trans-array.h (gfc_trans_dealloc_allocated): Update prototype.\n        * trans-expr.c (gfc_conv_function_call): Update call to\n        gfc_trans_dealloc_allocated, get indirect reference to dummy\n        arguments.\n\n\n2006-04-02  Erik Edelmann  <eedelman@gcc.gnu.org>\n\n        * gfortran.dg/allocatable_dummy_1.f90: Also check that allocatable\n        dummy arguments work when the actual argument is itself a dummy\n        argument of the caller.\n\nFrom-SVN: r112625", "tree": {"sha": "7090a0a4e5cba66a5413fbfc2c0390b70ed6c1fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7090a0a4e5cba66a5413fbfc2c0390b70ed6c1fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/763ccd45373c3c60afee048d86ca073aa0e2e860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/763ccd45373c3c60afee048d86ca073aa0e2e860", "html_url": "https://github.com/Rust-GCC/gccrs/commit/763ccd45373c3c60afee048d86ca073aa0e2e860", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/763ccd45373c3c60afee048d86ca073aa0e2e860/comments", "author": null, "committer": null, "parents": [{"sha": "ace23abf021c2785afc2d66280b47b11aecd56ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace23abf021c2785afc2d66280b47b11aecd56ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ace23abf021c2785afc2d66280b47b11aecd56ee"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "3743cbdbd1b5b69dc76d421e5c482fca5da1aa7a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763ccd45373c3c60afee048d86ca073aa0e2e860/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763ccd45373c3c60afee048d86ca073aa0e2e860/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=763ccd45373c3c60afee048d86ca073aa0e2e860", "patch": "@@ -1,3 +1,16 @@\n+2006-04-02  Erik Edelmann  <eedelman@gcc.gnu.org>\n+\n+\t* trans-array.c (gfc_trans_dealloc_allocated): Take a\n+\ttree representation of the array to be deallocated as argument\n+\tinstead of its gfc_symbol.\n+\t(gfc_trans_deferred_array): Update call to\n+\tgfc_trans_dealloc_allocated.\n+\t* trans-array.h (gfc_trans_dealloc_allocated): Update\n+\tprototype.\n+\t* trans-expr.c (gfc_conv_function_call): Update call to\n+\tgfc_trans_dealloc_allocated, get indirect reference to dummy\n+\targuments.\n+\n 2006-04-01  Roger Sayle  <roger@eyesopen.com>\n \n \tPR fortran/25270"}, {"sha": "5ebec62772b3009c49b646680478a2218dbbbb50", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763ccd45373c3c60afee048d86ca073aa0e2e860/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763ccd45373c3c60afee048d86ca073aa0e2e860/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=763ccd45373c3c60afee048d86ca073aa0e2e860", "patch": "@@ -4308,20 +4308,16 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77)\n }\n \n \n-/* Generate code to deallocate the symbol 'sym', if it is allocated.  */\n+/* Generate code to deallocate an array, if it is allocated.  */\n \n tree\n-gfc_trans_dealloc_allocated (gfc_symbol * sym)\n+gfc_trans_dealloc_allocated (tree descriptor)\n { \n   tree tmp;\n-  tree descriptor;\n   tree deallocate;\n   stmtblock_t block;\n \n-  gcc_assert (sym->attr.allocatable);\n-\n   gfc_start_block (&block);\n-  descriptor = sym->backend_decl;\n   deallocate = gfc_array_deallocate (descriptor, null_pointer_node);\n \n   tmp = gfc_conv_descriptor_data_get (descriptor);\n@@ -4396,7 +4392,7 @@ gfc_trans_deferred_array (gfc_symbol * sym, tree body)\n   /* Allocatable arrays need to be freed when they go out of scope.  */\n   if (sym->attr.allocatable)\n     {\n-      tmp = gfc_trans_dealloc_allocated (sym);\n+      tmp = gfc_trans_dealloc_allocated (sym->backend_decl);\n       gfc_add_expr_to_block (&fnblock, tmp);\n     }\n "}, {"sha": "6f57429ae3c7feb61f51bf69b5b787d91f4986a7", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763ccd45373c3c60afee048d86ca073aa0e2e860/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763ccd45373c3c60afee048d86ca073aa0e2e860/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=763ccd45373c3c60afee048d86ca073aa0e2e860", "patch": "@@ -41,8 +41,8 @@ tree gfc_trans_auto_array_allocation (tree, gfc_symbol *, tree);\n tree gfc_trans_dummy_array_bias (gfc_symbol *, tree, tree);\n /* Generate entry and exit code for g77 calling convention arrays.  */\n tree gfc_trans_g77_array (gfc_symbol *, tree);\n-/* Generate code to deallocate the symbol 'sym', if it is allocated.  */\n-tree gfc_trans_dealloc_allocated (gfc_symbol * sym);\n+/* Generate code to deallocate an array, if it is allocated.  */\n+tree gfc_trans_dealloc_allocated (tree);\n /* Add initialization for deferred arrays.  */\n tree gfc_trans_deferred_array (gfc_symbol *, tree);\n /* Generate an initializer for a static pointer or allocatable array.  */"}, {"sha": "94921bc1138eb182910ee8edca7442a9344522d2", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763ccd45373c3c60afee048d86ca073aa0e2e860/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763ccd45373c3c60afee048d86ca073aa0e2e860/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=763ccd45373c3c60afee048d86ca073aa0e2e860", "patch": "@@ -1920,7 +1920,10 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n               if (formal && formal->sym->attr.allocatable\n                   && formal->sym->attr.intent == INTENT_OUT)\n                 {\n-                  tmp = gfc_trans_dealloc_allocated (arg->expr->symtree->n.sym);\n+\t\t  tmp = arg->expr->symtree->n.sym->backend_decl;\n+\t\t  if (arg->expr->symtree->n.sym->attr.dummy)\n+                    tmp = build_fold_indirect_ref (tmp);\n+                  tmp = gfc_trans_dealloc_allocated (tmp);\n                   gfc_add_expr_to_block (&se->pre, tmp);\n                 }\n "}, {"sha": "66badc350ce9bd86235326f7175c0d1f10df4992", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763ccd45373c3c60afee048d86ca073aa0e2e860/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763ccd45373c3c60afee048d86ca073aa0e2e860/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=763ccd45373c3c60afee048d86ca073aa0e2e860", "patch": "@@ -1,3 +1,9 @@\n+2006-04-02  Erik Edelmann  <eedelman@gcc.gnu.org>\n+\n+\t* gfortran.dg/allocatable_dummy_1.f90: Also check that allocatable\n+\tdummy arguments work when the actual argument is itself a dummy\n+\targument of the caller.\n+\n 2006-04-01  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR libfortran/24685"}, {"sha": "9aba8b8fc6dc10791df56475ad4fc269d612ce04", "filename": "gcc/testsuite/gfortran.dg/allocatable_dummy_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/763ccd45373c3c60afee048d86ca073aa0e2e860/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_dummy_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/763ccd45373c3c60afee048d86ca073aa0e2e860/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_dummy_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_dummy_1.f90?ref=763ccd45373c3c60afee048d86ca073aa0e2e860", "patch": "@@ -33,7 +33,7 @@ subroutine useit(x, y)\n         integer, allocatable, intent(in)  :: x(:)\n         integer, allocatable, intent(out) :: y(:)\n         if (allocated(y)) call abort()\n-        allocate (y(3))\n+        call init(y)\n         y = x\n     end subroutine useit\n "}]}