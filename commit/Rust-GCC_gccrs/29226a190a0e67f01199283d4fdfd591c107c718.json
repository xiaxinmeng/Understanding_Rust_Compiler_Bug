{"sha": "29226a190a0e67f01199283d4fdfd591c107c718", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkyMjZhMTkwYTBlNjdmMDExOTkyODNkNGZkZmQ1OTFjMTA3YzcxOA==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-09-02T23:40:51Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-09-02T23:40:51Z"}, "message": "(min_precision): Move to c-common.c\n\nFrom-SVN: r8021", "tree": {"sha": "47c12872677811354e9556b5373b1400fc35c33e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47c12872677811354e9556b5373b1400fc35c33e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29226a190a0e67f01199283d4fdfd591c107c718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29226a190a0e67f01199283d4fdfd591c107c718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29226a190a0e67f01199283d4fdfd591c107c718", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29226a190a0e67f01199283d4fdfd591c107c718/comments", "author": null, "committer": null, "parents": [{"sha": "6acfe908e3d037bc48d46e72aa02f2949011caee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6acfe908e3d037bc48d46e72aa02f2949011caee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6acfe908e3d037bc48d46e72aa02f2949011caee"}], "stats": {"total": 31, "additions": 0, "deletions": 31}, "files": [{"sha": "57796336188e3e83c24b43f339ebf2a0819db22e", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29226a190a0e67f01199283d4fdfd591c107c718/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29226a190a0e67f01199283d4fdfd591c107c718/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=29226a190a0e67f01199283d4fdfd591c107c718", "patch": "@@ -5647,37 +5647,6 @@ start_enum (name)\n   return enumtype;\n }\n \n-/* Return the minimum number of bits needed to represent VALUE in a\n-   signed or unsigned type, UNSIGNEDP says which.  */\n-\n-static int\n-min_precision (value, unsignedp)\n-     tree value;\n-     int unsignedp;\n-{\n-  int log;\n-\n-  /* If the value is negative, compute its negative minus 1.  The latter\n-     adjustment is because the absolute value of the largest negative value\n-     is one larger than the largest positive value.  This is equivalent to\n-     a bit-wise negation, so use that operation instead.  */\n-\n-  if (tree_int_cst_sgn (value) < 0)\n-    value = fold (build1 (BIT_NOT_EXPR, TREE_TYPE (value), value));\n-\n-  /* Return the number of bits needed, taking into account the fact\n-     that we need one more bit for a signed than unsigned type.  */\n-\n-  if (integer_zerop (value))\n-    log = 0;\n-  else if (TREE_INT_CST_HIGH (value) != 0)\n-    log = HOST_BITS_PER_WIDE_INT + floor_log2 (TREE_INT_CST_HIGH (value));\n-  else\n-    log = floor_log2 (TREE_INT_CST_LOW (value));\n-\n-  return log + 1 + ! unsignedp;\n-}\n-\n /* After processing and defining all the values of an enumeration type,\n    install their decls in the enumeration type and finish it off.\n    ENUMTYPE is the type object and VALUES a list of decl-value pairs."}]}