{"sha": "8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRkMTZlY2M3ZDcxYjlmMWUxYmRjNGQ4NzBjZjI0MzZkYjk1OTRhOQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-08-23T08:41:57Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-08-23T08:41:57Z"}, "message": "tree.h (build_distinct_type_copy): New.\n\n\t* tree.h (build_distinct_type_copy): New.\n\t(build_type_copy): ... here.  Rename to ...\n\t(build_variant_type_copy): ... here.\n\t* tree.c (build_qualified_type): Rename build_type_copy call.\n\t(build_distinct_type_copy): New, broken out of ...\n\t(build_type_copy): ... here.  Rename to ...\n\t(build_variant_type_copy): ... here.  Use\n\tbuild_distinct_type_copy.\n\t(build_common_tree_nodes_2): Rename build_type_copy call.\n\t* c-common.c (c_common_nodes_and_builtins): Rename build_type_copy\n\tcall.\n\t(handle_packed_attribute, handle_unused_attribute,\n\thandle_transparanet_union_attribute, handle_aligned_attribute,\n\thandle_deprecated_attribute): Likewise.\n\t* c-decl.c (clone_underlying_type, store_parm_decls_oldstyle):\n\tLikewise.\n\t* config/arm/arm.c (arm_handle_isr_attribyte): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_init_builtins): Use\n\tbuild_distinct_type_copy.\n\n\t* cp/name-lookup.c (pushdecl): Rename build_type_copy call.\n\t* cp/tree.c (cp_build_qualified_type_real,\n\tbuild_exception_variant, handle_java_interface_attribute): Likewise.\n\nFrom-SVN: r86421", "tree": {"sha": "21e04c3973bfdab79a845ae2282b15da19d7926c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21e04c3973bfdab79a845ae2282b15da19d7926c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/comments", "author": null, "committer": null, "parents": [{"sha": "e8bf0f3bacc5f3f4ae892f4df794cc23e41519b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8bf0f3bacc5f3f4ae892f4df794cc23e41519b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8bf0f3bacc5f3f4ae892f4df794cc23e41519b9"}], "stats": {"total": 106, "additions": 74, "deletions": 32}, "files": [{"sha": "d7001760f34c8a1c25b41fcd2461d8fe701da318", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9", "patch": "@@ -1,3 +1,25 @@\n+2004-08-23  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* tree.h (build_distinct_type_copy): New.\n+\t(build_type_copy): ... here.  Rename to ...\n+\t(build_variant_type_copy): ... here.\n+\t* tree.c (build_qualified_type): Rename build_type_copy call.\n+\t(build_distinct_type_copy): New, broken out of ...\n+\t(build_type_copy): ... here.  Rename to ...\n+\t(build_variant_type_copy): ... here.  Use\n+\tbuild_distinct_type_copy.\n+\t(build_common_tree_nodes_2): Rename build_type_copy call.\n+\t* c-common.c (c_common_nodes_and_builtins): Rename build_type_copy\n+\tcall.\n+\t(handle_packed_attribute, handle_unused_attribute,\n+\thandle_transparanet_union_attribute, handle_aligned_attribute,\n+\thandle_deprecated_attribute): Likewise.\n+\t* c-decl.c (clone_underlying_type, store_parm_decls_oldstyle):\n+\tLikewise.\n+\t* config/arm/arm.c (arm_handle_isr_attribyte): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_init_builtins): Use\n+\tbuild_distinct_type_copy.\n+\n 2004-08-23  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.md (mfhilo_[sd]i): Redefine using :GPR.  Add mode"}, {"sha": "7306cdfbec41dfc17109fd8ebce3cfc43e4d3d4d", "filename": "gcc/c-common.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9", "patch": "@@ -2997,7 +2997,7 @@ c_common_nodes_and_builtins (void)\n   if (c_dialect_cxx ())\n     /* For C++, make fileptr_type_node a distinct void * type until\n        FILE type is defined.  */\n-    fileptr_type_node = build_type_copy (ptr_type_node);\n+    fileptr_type_node = build_variant_type_copy (ptr_type_node);\n \n   record_builtin_type (RID_VOID, NULL, void_type_node);\n \n@@ -3925,7 +3925,7 @@ handle_packed_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   if (TYPE_P (*node))\n     {\n       if (!(flags & (int) ATTR_FLAG_TYPE_IN_PLACE))\n-\t*node = build_type_copy (*node);\n+\t*node = build_variant_type_copy (*node);\n       TYPE_PACKED (*node) = 1;\n       if (TYPE_MAIN_VARIANT (*node) == *node)\n \t{\n@@ -4114,7 +4114,7 @@ handle_unused_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   else\n     {\n       if (!(flags & (int) ATTR_FLAG_TYPE_IN_PLACE))\n-\t*node = build_type_copy (*node);\n+\t*node = build_variant_type_copy (*node);\n       TREE_USED (*node) = 1;\n     }\n \n@@ -4176,7 +4176,7 @@ handle_transparent_union_attribute (tree *node, tree name,\n \t      && TYPE_MODE (*type) == DECL_MODE (TYPE_FIELDS (*type)))))\n     {\n       if (!(flags & (int) ATTR_FLAG_TYPE_IN_PLACE))\n-\t*type = build_type_copy (*type);\n+\t*type = build_variant_type_copy (*type);\n       TYPE_TRANSPARENT_UNION (*type) = 1;\n     }\n   else if (decl != 0 && TREE_CODE (decl) == PARM_DECL\n@@ -4451,14 +4451,14 @@ handle_aligned_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n \t  && DECL_ORIGINAL_TYPE (decl) == NULL_TREE)\n \t{\n \t  tree tt = TREE_TYPE (decl);\n-\t  *type = build_type_copy (*type);\n+\t  *type = build_variant_type_copy (*type);\n \t  DECL_ORIGINAL_TYPE (decl) = tt;\n \t  TYPE_NAME (*type) = decl;\n \t  TREE_USED (*type) = TREE_USED (decl);\n \t  TREE_TYPE (decl) = *type;\n \t}\n       else if (!(flags & (int) ATTR_FLAG_TYPE_IN_PLACE))\n-\t*type = build_type_copy (*type);\n+\t*type = build_variant_type_copy (*type);\n \n       TYPE_ALIGN (*type) = (1 << i) * BITS_PER_UNIT;\n       TYPE_USER_ALIGN (*type) = 1;\n@@ -4805,7 +4805,7 @@ handle_deprecated_attribute (tree *node, tree name,\n   else if (TYPE_P (*node))\n     {\n       if (!(flags & (int) ATTR_FLAG_TYPE_IN_PLACE))\n-\t*node = build_type_copy (*node);\n+\t*node = build_variant_type_copy (*node);\n       TREE_DEPRECATED (*node) = 1;\n       type = *node;\n     }"}, {"sha": "ccf2cb7ec700225e5e0f2e1ddb524feb6bcf2087", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9", "patch": "@@ -1843,7 +1843,7 @@ clone_underlying_type (tree x)\n     {\n       tree tt = TREE_TYPE (x);\n       DECL_ORIGINAL_TYPE (x) = tt;\n-      tt = build_type_copy (tt);\n+      tt = build_variant_type_copy (tt);\n       TYPE_NAME (tt) = x;\n       TREE_USED (tt) = TREE_USED (x);\n       TREE_TYPE (x) = tt;\n@@ -6198,7 +6198,7 @@ store_parm_decls_oldstyle (tree fndecl, tree arg_info)\n \t will be a variant of the main variant of the original function\n \t type.  */\n \n-      TREE_TYPE (fndecl) = build_type_copy (TREE_TYPE (fndecl));\n+      TREE_TYPE (fndecl) = build_variant_type_copy (TREE_TYPE (fndecl));\n \n       TYPE_ACTUAL_ARG_TYPES (TREE_TYPE (fndecl)) = actual;\n     }"}, {"sha": "96a71f69f9fe2b2bd3cbe4aec065a56a753ca4b1", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9", "patch": "@@ -2625,7 +2625,7 @@ arm_handle_isr_attribute (tree *node, tree name, tree args, int flags,\n \t\t   || TREE_CODE (TREE_TYPE (*node)) == METHOD_TYPE)\n \t       && arm_isr_value (args) != ARM_FT_UNKNOWN)\n \t{\n-\t  *node = build_type_copy (*node);\n+\t  *node = build_variant_type_copy (*node);\n \t  TREE_TYPE (*node) = build_type_attribute_variant\n \t    (TREE_TYPE (*node),\n \t     tree_cons (name, args, TYPE_ATTRIBUTES (TREE_TYPE (*node))));"}, {"sha": "16bf38b1f5e7bc7af943dca5bc6cd3f58d6c90ed", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9", "patch": "@@ -7249,14 +7249,10 @@ rs6000_init_builtins (void)\n      types, especially in C++ land.  Similarly, 'vector pixel' is distinct from\n      'vector unsigned short'.  */\n \n-  bool_char_type_node = copy_node (unsigned_intQI_type_node);\n-  TYPE_MAIN_VARIANT (bool_char_type_node) = bool_char_type_node;\n-  bool_short_type_node = copy_node (unsigned_intHI_type_node);\n-  TYPE_MAIN_VARIANT (bool_short_type_node) = bool_short_type_node;\n-  bool_int_type_node = copy_node (unsigned_intSI_type_node);\n-  TYPE_MAIN_VARIANT (bool_int_type_node) = bool_int_type_node;\n-  pixel_type_node = copy_node (unsigned_intHI_type_node);\n-  TYPE_MAIN_VARIANT (pixel_type_node) = pixel_type_node;\n+  bool_char_type_node = build_distinct_type_copy (unsigned_intQI_type_node);\n+  bool_short_type_node = build_distinct_type_copy (unsigned_intHI_type_node);\n+  bool_int_type_node = build_distinct_type_copy (unsigned_intSI_type_node);\n+  pixel_type_node = build_distinct_type_copy (unsigned_intHI_type_node);\n \n   (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n \t\t\t\t\t    get_identifier (\"__bool char\"),"}, {"sha": "8c74bc29ee7d2a47b674895c6b2b09a12bfb8fbf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9", "patch": "@@ -1,3 +1,9 @@\n+2004-08-23  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* name-lookup.c (pushdecl): Rename build_type_copy call.\n+\t* tree.c (cp_build_qualified_type_real,\n+\tbuild_exception_variant, handle_java_interface_attribute): Likewise.\n+\n 2004-08-22  Andrew Pinski  <apinski@apple.com>\n \n \tPR c++/14029"}, {"sha": "6fec6ebc652f579fe8f49ae819bdab7f596bb13e", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9", "patch": "@@ -850,7 +850,7 @@ pushdecl (tree x)\n \t\t       || TYPE_NAME (type) != DECL_ABSTRACT_ORIGIN (x)))\n             {\n \t      DECL_ORIGINAL_TYPE (x) = type;\n-              type = build_type_copy (type);\n+              type = build_variant_type_copy (type);\n \t      TYPE_STUB_DECL (type) = TYPE_STUB_DECL (DECL_ORIGINAL_TYPE (x));\n               TYPE_NAME (type) = x;\n               TREE_TYPE (x) = type;"}, {"sha": "017693b4da28e7a0aac95fea45c44354a28a9c04", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9", "patch": "@@ -465,7 +465,7 @@ cp_build_qualified_type_real (tree type,\n \t{\n \t  /* Make a new array type, just like the old one, but with the\n \t     appropriately qualified element type.  */\n-\t  t = build_type_copy (type);\n+\t  t = build_variant_type_copy (type);\n \t  TREE_TYPE (t) = element_type;\n \t}\n \n@@ -942,7 +942,7 @@ build_exception_variant (tree type, tree raises)\n       return v;\n \n   /* Need to build a new variant.  */\n-  v = build_type_copy (type);\n+  v = build_variant_type_copy (type);\n   TYPE_RAISES_EXCEPTIONS (v) = raises;\n   return v;\n }\n@@ -1776,7 +1776,7 @@ handle_java_interface_attribute (tree* node,\n       return NULL_TREE;\n     }\n   if (!(flags & (int) ATTR_FLAG_TYPE_IN_PLACE))\n-    *node = build_type_copy (*node);\n+    *node = build_variant_type_copy (*node);\n   TYPE_JAVA_INTERFACE (*node) = 1;\n \n   return NULL_TREE;"}, {"sha": "e2cf0c0ad88c70d212c8d54bdefa680402c59e06", "filename": "gcc/tree.c", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9", "patch": "@@ -3126,22 +3126,21 @@ build_qualified_type (tree type, int type_quals)\n   /* If not, build it.  */\n   if (!t)\n     {\n-      t = build_type_copy (type);\n+      t = build_variant_type_copy (type);\n       set_type_quals (t, type_quals);\n     }\n \n   return t;\n }\n \n-/* Create a new variant of TYPE, equivalent but distinct.\n-   This is so the caller can modify it.  */\n+/* Create a new distinct copy of TYPE.  The new type is made its own\n+   MAIN_VARIANT.  */\n \n tree\n-build_type_copy (tree type)\n+build_distinct_type_copy (tree type)\n {\n-  tree t, m = TYPE_MAIN_VARIANT (type);\n-\n-  t = copy_node (type);\n+  tree t = copy_node (type);\n+  \n   if (TYPE_CACHED_VALUES_P(t))\n     {\n       /* Do not copy the values cache.  */\n@@ -3154,9 +3153,27 @@ build_type_copy (tree type)\n   TYPE_POINTER_TO (t) = 0;\n   TYPE_REFERENCE_TO (t) = 0;\n \n-  /* Add this type to the chain of variants of TYPE.  */\n+  /* Make it its own variant.  */\n+  TYPE_MAIN_VARIANT (t) = t;\n+  TYPE_NEXT_VARIANT (t) = 0;\n+  \n+  return t;\n+}\n+\n+/* Create a new variant of TYPE, equivalent but distinct.\n+   This is so the caller can modify it.  */\n+\n+tree\n+build_variant_type_copy (tree type)\n+{\n+  tree t, m = TYPE_MAIN_VARIANT (type);\n+\n+  t = build_distinct_type_copy (type);\n+  \n+  /* Add the new type to the chain of variants of TYPE.  */\n   TYPE_NEXT_VARIANT (t) = TYPE_NEXT_VARIANT (m);\n   TYPE_NEXT_VARIANT (m) = t;\n+  TYPE_MAIN_VARIANT (t) = m;\n \n   return t;\n }\n@@ -5494,7 +5511,7 @@ build_common_tree_nodes_2 (int short_double)\n        don't copy record types and let c_common_nodes_and_builtins()\n        declare the type to be __builtin_va_list.  */\n     if (TREE_CODE (t) != RECORD_TYPE)\n-      t = build_type_copy (t);\n+      t = build_variant_type_copy (t);\n \n     va_list_type_node = t;\n   }"}, {"sha": "6e381a6361e8191fcb94b134a2994adcfef7ca7a", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=8dd16ecc7d71b9f1e1bdc4d870cf2436db9594a9", "patch": "@@ -2961,7 +2961,8 @@ extern tree build_qualified_type (tree, int);\n \n /* Make a copy of a type node.  */\n \n-extern tree build_type_copy (tree);\n+extern tree build_distinct_type_copy (tree);\n+extern tree build_variant_type_copy (tree);\n \n /* Finish up a builtin RECORD_TYPE. Give it a name and provide its\n    fields. Optionally specify an alignment, and then lay it out.  */"}]}