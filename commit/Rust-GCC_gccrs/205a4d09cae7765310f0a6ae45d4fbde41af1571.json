{"sha": "205a4d09cae7765310f0a6ae45d4fbde41af1571", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA1YTRkMDljYWU3NzY1MzEwZjBhNmFlNDVkNGZiZGU0MWFmMTU3MQ==", "commit": {"author": {"name": "Brooks Moses", "email": "brooks.moses@codesourcery.com", "date": "2007-04-25T02:12:47Z"}, "committer": {"name": "Brooks Moses", "email": "brooks@gcc.gnu.org", "date": "2007-04-25T02:12:47Z"}, "message": "real.c (mpfr_from_real): Handle Inf and NaN, and allow the rounding mode to be specified by the caller.\n\n* real.c (mpfr_from_real): Handle Inf and NaN, and allow the\nrounding mode to be specified by the caller.\n(real_to_mpfr) Likewise.\n* real.h: Update mpfr_from_real, mpfr_to_real prototypes to\ninclude new arguments.\n* builtins.c: Update mpfr_from_real, mpfr_to_real calls.\n\nFrom-SVN: r124139", "tree": {"sha": "db634c5069c7518a31fd69e68bc5446671f7df2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db634c5069c7518a31fd69e68bc5446671f7df2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/205a4d09cae7765310f0a6ae45d4fbde41af1571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/205a4d09cae7765310f0a6ae45d4fbde41af1571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/205a4d09cae7765310f0a6ae45d4fbde41af1571", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/205a4d09cae7765310f0a6ae45d4fbde41af1571/comments", "author": null, "committer": null, "parents": [{"sha": "df80379db8bcba55301b23d560e42a98e9e79130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df80379db8bcba55301b23d560e42a98e9e79130", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df80379db8bcba55301b23d560e42a98e9e79130"}], "stats": {"total": 68, "additions": 53, "deletions": 15}, "files": [{"sha": "cf05f74fb7267fd159058568962c7fd3c4c74a45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205a4d09cae7765310f0a6ae45d4fbde41af1571/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205a4d09cae7765310f0a6ae45d4fbde41af1571/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=205a4d09cae7765310f0a6ae45d4fbde41af1571", "patch": "@@ -1,3 +1,12 @@\n+2007-04-24  Brooks Moses  <brooks.moses@codesourcery.com>\n+\n+\t* real.c (mpfr_from_real): Handle Inf and NaN, and allow the\n+\trounding mode to be specified by the caller.\n+\t(real_to_mpfr) Likewise.\n+\t* real.h: Update mpfr_from_real, mpfr_to_real prototypes to\n+\tinclude new arguments.\n+\t* builtins.c: Update mpfr_from_real, mpfr_to_real calls.\n+\n 2007-04-24  Ian Lance Taylor  <iant@google.com>\n \n \tPR tree-optimization/31605"}, {"sha": "2cf15797d95f96d7b7765f80cb8e96820ae390bd", "filename": "gcc/builtins.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205a4d09cae7765310f0a6ae45d4fbde41af1571/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205a4d09cae7765310f0a6ae45d4fbde41af1571/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=205a4d09cae7765310f0a6ae45d4fbde41af1571", "patch": "@@ -12205,7 +12205,7 @@ do_mpfr_ckconv (mpfr_srcptr m, tree type, int inexact)\n     {\n       REAL_VALUE_TYPE rr;\n \n-      real_from_mpfr (&rr, m);\n+      real_from_mpfr (&rr, m, type, GMP_RNDN);\n       /* Proceed iff GCC's REAL_VALUE_TYPE can hold the MPFR value,\n \t check for overflow/underflow.  If the REAL_VALUE_TYPE is zero\n \t but the mpft_t is not, then we underflowed in the\n@@ -12258,7 +12258,7 @@ do_mpfr_arg1 (tree arg, tree type, int (*func)(mpfr_ptr, mpfr_srcptr, mp_rnd_t),\n \t  mpfr_t m;\n \n \t  mpfr_init2 (m, prec);\n-\t  mpfr_from_real (m, ra);\n+\t  mpfr_from_real (m, ra, GMP_RNDN);\n \t  mpfr_clear_flags ();\n \t  inexact = func (m, m, GMP_RNDN);\n \t  result = do_mpfr_ckconv (m, type, inexact);\n@@ -12301,8 +12301,8 @@ do_mpfr_arg2 (tree arg1, tree arg2, tree type,\n \t  mpfr_t m1, m2;\n \n \t  mpfr_inits2 (prec, m1, m2, NULL);\n-\t  mpfr_from_real (m1, ra1);\n-\t  mpfr_from_real (m2, ra2);\n+\t  mpfr_from_real (m1, ra1, GMP_RNDN);\n+\t  mpfr_from_real (m2, ra2, GMP_RNDN);\n \t  mpfr_clear_flags ();\n \t  inexact = func (m1, m1, m2, GMP_RNDN);\n \t  result = do_mpfr_ckconv (m1, type, inexact);\n@@ -12349,9 +12349,9 @@ do_mpfr_arg3 (tree arg1, tree arg2, tree arg3, tree type,\n \t  mpfr_t m1, m2, m3;\n \n \t  mpfr_inits2 (prec, m1, m2, m3, NULL);\n-\t  mpfr_from_real (m1, ra1);\n-\t  mpfr_from_real (m2, ra2);\n-\t  mpfr_from_real (m3, ra3);\n+\t  mpfr_from_real (m1, ra1, GMP_RNDN);\n+\t  mpfr_from_real (m2, ra2, GMP_RNDN);\n+\t  mpfr_from_real (m3, ra3, GMP_RNDN);\n \t  mpfr_clear_flags ();\n \t  inexact = func (m1, m1, m2, m3, GMP_RNDN);\n \t  result = do_mpfr_ckconv (m1, type, inexact);\n@@ -12393,7 +12393,7 @@ do_mpfr_sincos (tree arg, tree arg_sinp, tree arg_cosp)\n \t  mpfr_t m, ms, mc;\n \n \t  mpfr_inits2 (prec, m, ms, mc, NULL);\n-\t  mpfr_from_real (m, ra);\n+\t  mpfr_from_real (m, ra, GMP_RNDN);\n \t  mpfr_clear_flags ();\n \t  inexact = mpfr_sin_cos (ms, mc, m, GMP_RNDN);\n \t  result_s = do_mpfr_ckconv (ms, type, inexact);"}, {"sha": "48d9e9e23fa3bd4728db466bd5a32c22199ffaf0", "filename": "gcc/real.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205a4d09cae7765310f0a6ae45d4fbde41af1571/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205a4d09cae7765310f0a6ae45d4fbde41af1571/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=205a4d09cae7765310f0a6ae45d4fbde41af1571", "patch": "@@ -4991,29 +4991,58 @@ real_copysign (REAL_VALUE_TYPE *r, const REAL_VALUE_TYPE *x)\n    for initializing and clearing the MPFR parameter.  */\n \n void\n-mpfr_from_real (mpfr_ptr m, const REAL_VALUE_TYPE *r)\n+mpfr_from_real (mpfr_ptr m, const REAL_VALUE_TYPE *r, mp_rnd_t rndmode)\n {\n   /* We use a string as an intermediate type.  */\n   char buf[128];\n   int ret;\n \n+  /* Take care of Infinity and NaN.  */\n+  if (r->cl == rvc_inf)\n+    {\n+      mpfr_set_inf (m, r->sign);\n+      return;\n+    }\n+  \n+  if (r->cl == rvc_nan)\n+    {\n+      mpfr_set_nan (m);\n+      return;\n+    }\n+  \n   real_to_hexadecimal (buf, r, sizeof (buf), 0, 1);\n   /* mpfr_set_str() parses hexadecimal floats from strings in the same\n      format that GCC will output them.  Nothing extra is needed.  */\n-  ret = mpfr_set_str (m, buf, 16, GMP_RNDN);\n+  ret = mpfr_set_str (m, buf, 16, rndmode);\n   gcc_assert (ret == 0);\n }\n \n-/* Convert from MPFR to REAL_VALUE_TYPE.  */\n+/* Convert from MPFR to REAL_VALUE_TYPE, for a given type TYPE and rounding\n+   mode RNDMODE.  TYPE is only relevant if M is a NaN.  */\n \n void\n-real_from_mpfr (REAL_VALUE_TYPE *r, mpfr_srcptr m)\n+real_from_mpfr (REAL_VALUE_TYPE *r, mpfr_srcptr m, tree type, mp_rnd_t rndmode)\n {\n   /* We use a string as an intermediate type.  */\n   char buf[128], *rstr;\n   mp_exp_t exp;\n \n-  rstr = mpfr_get_str (NULL, &exp, 16, 0, m, GMP_RNDN);\n+  /* Take care of Infinity and NaN.  */\n+  if (mpfr_inf_p (m))\n+    {\n+      real_inf (r);\n+      if (mpfr_sgn (m) < 0)\n+\t*r = REAL_VALUE_NEGATE (*r);\n+      return;\n+    }\n+\n+  if (mpfr_nan_p (m))\n+    {\n+      real_nan (r, \"\", 1, TYPE_MODE (type));\n+      return;\n+    }\n+\n+  rstr = mpfr_get_str (NULL, &exp, 16, 0, m, rndmode);\n \n   /* The additional 12 chars add space for the sprintf below.  This\n      leaves 6 digits for the exponent which is supposedly enough.  */"}, {"sha": "6fae2254a8e6b261bffd6d341c070b8fbff8c36d", "filename": "gcc/real.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205a4d09cae7765310f0a6ae45d4fbde41af1571/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205a4d09cae7765310f0a6ae45d4fbde41af1571/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=205a4d09cae7765310f0a6ae45d4fbde41af1571", "patch": "@@ -434,8 +434,8 @@ extern void real_copysign (REAL_VALUE_TYPE *, const REAL_VALUE_TYPE *);\n /* Convert between MPFR and REAL_VALUE_TYPE.  The caller is\n    responsible for initializing and clearing the MPFR parameter.  */\n \n-extern void real_from_mpfr (REAL_VALUE_TYPE *, mpfr_srcptr);\n-extern void mpfr_from_real (mpfr_ptr, const REAL_VALUE_TYPE *);\n+extern void real_from_mpfr (REAL_VALUE_TYPE *, mpfr_srcptr, tree, mp_rnd_t);\n+extern void mpfr_from_real (mpfr_ptr, const REAL_VALUE_TYPE *, mp_rnd_t);\n \n /* Check whether the real constant value given is an integer.  */\n extern bool real_isinteger (const REAL_VALUE_TYPE *c, enum machine_mode mode);"}]}