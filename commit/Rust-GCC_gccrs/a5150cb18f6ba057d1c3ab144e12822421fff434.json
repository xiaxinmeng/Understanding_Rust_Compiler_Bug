{"sha": "a5150cb18f6ba057d1c3ab144e12822421fff434", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUxNTBjYjE4ZjZiYTA1N2QxYzNhYjE0NGUxMjgyMjQyMWZmZjQzNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-14T12:12:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-14T12:12:42Z"}, "message": "[multiple changes]\n\n2016-06-14  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_ch3.adb (Expand_N_Object_Declaration): Only consider\n\tnodes from sources.\n\n2016-06-14  Arnaud Charlet  <charlet@adacore.com>\n\n\t* switch-c.adb, gnat1drv.adb (Adjust_Global_Switches): Only disable\n\tsimple value propagation in CodePeer mode when warnings are disabled.\n\t(Scan_Front_End_Switches): Enable relevant front-end switches\n\twhen using -gnateC.\n\n2016-06-14  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_util.adb (Is_OK_Volatile_Context): A\n\treference to a volatile object is considered OK if appears as\n\tthe prefix of attributes Address, Alignment, Component_Size,\n\tFirst_Bit, Last_Bit, Position, Size, Storage_Size.\n\n2016-06-14  Yannick Moy  <moy@adacore.com>\n\n\t* lib-xref-spark_specific.adb (Add_SPARK_File): Do not traverse\n\tsubunits directly, as they are already traversed as part of the\n\ttop-level unit to which they belong.\n\t(Add_SPARK_Xrefs): Add assertions to ensure correct sorting.\n\t(Generate_Dereference): Use unique definition place for special\n\tvariable __HEAP, to ensure correct sorting of references.\n\t* lib-xref.adb (Generate_Reference): Use top-level unit in case\n\tof subunits.\n\t* lib.adb, lib.ads (Get_Top_Level_Code_Unit): New functions that\n\tcompute the top-level code unit for a source location of AST node,\n\tthat go past subunits.\n\nFrom-SVN: r237431", "tree": {"sha": "efaebaa9d5abed6766047e12207fb9ee8d59e67e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efaebaa9d5abed6766047e12207fb9ee8d59e67e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5150cb18f6ba057d1c3ab144e12822421fff434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5150cb18f6ba057d1c3ab144e12822421fff434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5150cb18f6ba057d1c3ab144e12822421fff434", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5150cb18f6ba057d1c3ab144e12822421fff434/comments", "author": null, "committer": null, "parents": [{"sha": "3970e5458eb7a3e3c50f7e65d4116abf04d5e5ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3970e5458eb7a3e3c50f7e65d4116abf04d5e5ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3970e5458eb7a3e3c50f7e65d4116abf04d5e5ed"}], "stats": {"total": 205, "additions": 170, "deletions": 35}, "files": [{"sha": "f975cf7123ac5eb5c364bf96313bce2098500a84", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5150cb18f6ba057d1c3ab144e12822421fff434/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5150cb18f6ba057d1c3ab144e12822421fff434/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a5150cb18f6ba057d1c3ab144e12822421fff434", "patch": "@@ -1,3 +1,36 @@\n+2016-06-14  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Only consider\n+\tnodes from sources.\n+\n+2016-06-14  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* switch-c.adb, gnat1drv.adb (Adjust_Global_Switches): Only disable\n+\tsimple value propagation in CodePeer mode when warnings are disabled.\n+\t(Scan_Front_End_Switches): Enable relevant front-end switches\n+\twhen using -gnateC.\n+\n+2016-06-14  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_util.adb (Is_OK_Volatile_Context): A\n+\treference to a volatile object is considered OK if appears as\n+\tthe prefix of attributes Address, Alignment, Component_Size,\n+\tFirst_Bit, Last_Bit, Position, Size, Storage_Size.\n+\n+2016-06-14  Yannick Moy  <moy@adacore.com>\n+\n+\t* lib-xref-spark_specific.adb (Add_SPARK_File): Do not traverse\n+\tsubunits directly, as they are already traversed as part of the\n+\ttop-level unit to which they belong.\n+\t(Add_SPARK_Xrefs): Add assertions to ensure correct sorting.\n+\t(Generate_Dereference): Use unique definition place for special\n+\tvariable __HEAP, to ensure correct sorting of references.\n+\t* lib-xref.adb (Generate_Reference): Use top-level unit in case\n+\tof subunits.\n+\t* lib.adb, lib.ads (Get_Top_Level_Code_Unit): New functions that\n+\tcompute the top-level code unit for a source location of AST node,\n+\tthat go past subunits.\n+\n 2016-06-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_subprog_type): Build only a minimal"}, {"sha": "18249d83a44a0aef99594f3c9576f89ba5def3ec", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5150cb18f6ba057d1c3ab144e12822421fff434/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5150cb18f6ba057d1c3ab144e12822421fff434/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=a5150cb18f6ba057d1c3ab144e12822421fff434", "patch": "@@ -6868,6 +6868,7 @@ package body Exp_Ch3 is\n             --  from previous instantiation errors.\n \n             if Validity_Checks_On\n+              and then Comes_From_Source (N)\n               and then Validity_Check_Copies\n               and then not Is_Generic_Type (Etype (Def_Id))\n             then"}, {"sha": "0e5c670261cfd92b8104b2d57eca4a8b65a1cc5d", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5150cb18f6ba057d1c3ab144e12822421fff434/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5150cb18f6ba057d1c3ab144e12822421fff434/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=a5150cb18f6ba057d1c3ab144e12822421fff434", "patch": "@@ -296,8 +296,7 @@ procedure Gnat1drv is\n          Debug_Generated_Code := False;\n \n          --  Turn cross-referencing on in case it was disabled (e.g. by -gnatD)\n-         --  Do we really need to spend time generating xref in CodePeer\n-         --  mode??? Consider setting Xref_Active to False.\n+         --  to support source navigation.\n \n          Xref_Active := True;\n \n@@ -318,24 +317,15 @@ procedure Gnat1drv is\n \n          Assertions_Enabled := True;\n \n-         --  Disable all simple value propagation. This is an optimization\n-         --  which is valuable for code optimization, and also for generation\n-         --  of compiler warnings, but these are being turned off by default,\n-         --  and CodePeer generates better messages (referencing original\n-         --  variables) this way.\n-\n-         Debug_Flag_MM := True;\n-\n-         --  Set normal RM validity checking, and checking of IN OUT parameters\n-         --  (this might give CodePeer more useful checks to analyze, to be\n-         --  confirmed???). All other validity checking is turned off, since\n-         --  this can generate very complex trees that only confuse CodePeer\n-         --  and do not bring enough useful info.\n+         --  Set normal RM validity checking and checking of copies (to catch\n+         --  e.g.  wrong values used in unchecked conversions).\n+         --  All other validity checking is turned off, since this can generate\n+         --  very complex trees that only confuse CodePeer and do not bring\n+         --  enough useful info.\n \n          Reset_Validity_Check_Options;\n          Validity_Check_Default       := True;\n-         Validity_Check_In_Out_Params := True;\n-         Validity_Check_In_Params     := True;\n+         Validity_Check_Copies        := True;\n \n          --  Turn off style check options and ignore any style check pragmas\n          --  since we are not interested in any front-end warnings when we are\n@@ -356,6 +346,18 @@ procedure Gnat1drv is\n          --  This is useful when using CodePeer mode with other compilers.\n \n          Relaxed_RM_Semantics := True;\n+\n+         --  Disable all simple value propagation. This is an optimization\n+         --  which is valuable for code optimization, and also for generation\n+         --  of compiler warnings, but these are being turned off by default,\n+         --  and CodePeer generates better messages (referencing original\n+         --  variables) this way.\n+         --  Do this only is -gnatws is set (the default with -gnatcC), so that\n+         --  if warnings are enabled, we'll get better messages from GNAT.\n+\n+         if Warning_Mode = Suppress then\n+            Debug_Flag_MM := True;\n+         end if;\n       end if;\n \n       --  Enable some individual switches that are implied by relaxed RM"}, {"sha": "081a362677d86ebdf30175236aa9005091305d22", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5150cb18f6ba057d1c3ab144e12822421fff434/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5150cb18f6ba057d1c3ab144e12822421fff434/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=a5150cb18f6ba057d1c3ab144e12822421fff434", "patch": "@@ -150,6 +150,15 @@ package body SPARK_Specific is\n          return;\n       end if;\n \n+      --  Subunits are traversed as part of the top-level unit to which they\n+      --  belong.\n+\n+      if Present (Cunit (Ubody))\n+        and then Nkind (Unit (Cunit (Ubody))) = N_Subunit\n+      then\n+         return;\n+      end if;\n+\n       From := SPARK_Scope_Table.Last + 1;\n \n       --  Unit might not have an associated compilation unit, as seen in code\n@@ -610,6 +619,8 @@ package body SPARK_Specific is\n             --  Both entities must be equal at this point\n \n             pragma Assert (T1.Key.Ent = T2.Key.Ent);\n+            pragma Assert (T1.Key.Ent_Scope = T2.Key.Ent_Scope);\n+            pragma Assert (T1.Ent_Scope_File = T2.Ent_Scope_File);\n \n             --  Fourth test: if reference is in same unit as entity definition,\n             --  sort first.\n@@ -1210,18 +1221,20 @@ package body SPARK_Specific is\n             Deref.Loc := Loc;\n             Deref.Typ := Typ;\n \n-            --  It is as if the special \"Heap\" was defined in every scope where\n-            --  it is referenced.\n+            --  It is as if the special \"Heap\" was defined in the main unit,\n+            --  in the scope of the entity for the main unit. This single\n+            --  definition point is required to ensure that sorting cross\n+            --  references works for \"Heap\" references as well.\n \n-            Deref.Eun := Get_Code_Unit (Loc);\n-            Deref.Lun := Get_Code_Unit (Loc);\n+            Deref.Eun := Main_Unit;\n+            Deref.Lun := Get_Top_Level_Code_Unit (Loc);\n \n             Deref.Ref_Scope := Ref_Scope;\n-            Deref.Ent_Scope := Ref_Scope;\n+            Deref.Ent_Scope := Cunit_Entity (Main_Unit);\n \n             Deref_Entry.Def := No_Location;\n \n-            Deref_Entry.Ent_Scope_File := Get_Code_Unit (N);\n+            Deref_Entry.Ent_Scope_File := Main_Unit;\n          end;\n       end if;\n    end Generate_Dereference;"}, {"sha": "c8c0b8556f2841f60460b399efc6159df5155296", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5150cb18f6ba057d1c3ab144e12822421fff434/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5150cb18f6ba057d1c3ab144e12822421fff434/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=a5150cb18f6ba057d1c3ab144e12822421fff434", "patch": "@@ -1075,11 +1075,11 @@ package body Lib.Xref is\n               ((Ent       => Ent,\n                 Loc       => Ref,\n                 Typ       => Actual_Typ,\n-                Eun       => Get_Code_Unit (Def),\n-                Lun       => Get_Code_Unit (Ref),\n+                Eun       => Get_Top_Level_Code_Unit (Def),\n+                Lun       => Get_Top_Level_Code_Unit (Ref),\n                 Ref_Scope => Ref_Scope,\n                 Ent_Scope => Ent_Scope),\n-               Ent_Scope_File => Get_Code_Unit (Ent));\n+               Ent_Scope_File => Get_Top_Level_Code_Unit (Ent));\n \n          else\n             Ref := Original_Location (Sloc (Nod));"}, {"sha": "4b9343245fc5044b10226426ed0a42c86b3c5103", "filename": "gcc/ada/lib.adb", "status": "modified", "additions": 44, "deletions": 7, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5150cb18f6ba057d1c3ab144e12822421fff434/gcc%2Fada%2Flib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5150cb18f6ba057d1c3ab144e12822421fff434/gcc%2Fada%2Flib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.adb?ref=a5150cb18f6ba057d1c3ab144e12822421fff434", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -68,9 +68,12 @@ package body Lib is\n \n    function Get_Code_Or_Source_Unit\n      (S                : Source_Ptr;\n-      Unwind_Instances : Boolean) return Unit_Number_Type;\n-   --  Common code for Get_Code_Unit (get unit of instantiation for location)\n-   --  and Get_Source_Unit (get unit of template for location).\n+      Unwind_Instances : Boolean;\n+      Unwind_Subunits  : Boolean) return Unit_Number_Type;\n+   --  Common code for Get_Code_Unit (get unit of instantiation for\n+   --  location) Get_Source_Unit (get unit of template for location) and\n+   --  Get_Top_Level_Code_Unit (same as Get_Code_Unit but not stopping at\n+   --  subunits).\n \n    --------------------------------------------\n    -- Access Functions for Unit Table Fields --\n@@ -573,7 +576,8 @@ package body Lib is\n \n    function Get_Code_Or_Source_Unit\n      (S                : Source_Ptr;\n-      Unwind_Instances : Boolean) return Unit_Number_Type\n+      Unwind_Instances : Boolean;\n+      Unwind_Subunits  : Boolean) return Unit_Number_Type\n    is\n    begin\n       --  Search table unless we have No_Location, which can happen if the\n@@ -584,6 +588,7 @@ package body Lib is\n          declare\n             Source_File : Source_File_Index;\n             Source_Unit : Unit_Number_Type;\n+            Unit_Node   : Node_Id;\n \n          begin\n             Source_File := Get_Source_File_Index (S);\n@@ -596,6 +601,21 @@ package body Lib is\n \n             Source_Unit := Unit (Source_File);\n \n+            if Unwind_Subunits then\n+               Unit_Node := Unit (Cunit (Source_Unit));\n+\n+               while Nkind (Unit_Node) = N_Subunit\n+                 and then Present (Corresponding_Stub (Unit_Node))\n+               loop\n+                  Source_Unit :=\n+                    Get_Code_Or_Source_Unit\n+                      (Sloc (Corresponding_Stub (Unit_Node)),\n+                       Unwind_Instances => Unwind_Instances,\n+                       Unwind_Subunits  => Unwind_Subunits);\n+                  Unit_Node := Unit (Cunit (Source_Unit));\n+               end loop;\n+            end if;\n+\n             if Source_Unit /= No_Unit then\n                return Source_Unit;\n             end if;\n@@ -616,7 +636,7 @@ package body Lib is\n    function Get_Code_Unit (S : Source_Ptr) return Unit_Number_Type is\n    begin\n       return Get_Code_Or_Source_Unit (Top_Level_Location (S),\n-        Unwind_Instances => False);\n+        Unwind_Instances => False, Unwind_Subunits => False);\n    end Get_Code_Unit;\n \n    function Get_Code_Unit (N : Node_Or_Entity_Id) return Unit_Number_Type is\n@@ -691,14 +711,31 @@ package body Lib is\n \n    function Get_Source_Unit (S : Source_Ptr) return Unit_Number_Type is\n    begin\n-      return Get_Code_Or_Source_Unit (S, Unwind_Instances => True);\n+      return Get_Code_Or_Source_Unit (S,\n+        Unwind_Instances => True, Unwind_Subunits => False);\n    end Get_Source_Unit;\n \n    function Get_Source_Unit (N : Node_Or_Entity_Id) return Unit_Number_Type is\n    begin\n       return Get_Source_Unit (Sloc (N));\n    end Get_Source_Unit;\n \n+   -----------------------------\n+   -- Get_Top_Level_Code_Unit --\n+   -----------------------------\n+\n+   function Get_Top_Level_Code_Unit (S : Source_Ptr) return Unit_Number_Type is\n+   begin\n+      return Get_Code_Or_Source_Unit (Top_Level_Location (S),\n+        Unwind_Instances => False, Unwind_Subunits => True);\n+   end Get_Top_Level_Code_Unit;\n+\n+   function Get_Top_Level_Code_Unit\n+     (N : Node_Or_Entity_Id) return Unit_Number_Type is\n+   begin\n+      return Get_Top_Level_Code_Unit (Sloc (N));\n+   end Get_Top_Level_Code_Unit;\n+\n    --------------------------------\n    -- In_Extended_Main_Code_Unit --\n    --------------------------------"}, {"sha": "2f0ccca1e3b7ced22c84ddff67fc3338eeb95787", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5150cb18f6ba057d1c3ab144e12822421fff434/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5150cb18f6ba057d1c3ab144e12822421fff434/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=a5150cb18f6ba057d1c3ab144e12822421fff434", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -541,6 +541,14 @@ package Lib is\n    --  template, so it returns the unit number containing the code that\n    --  corresponds to the node N, or the source location S.\n \n+   function Get_Top_Level_Code_Unit\n+     (N : Node_Or_Entity_Id) return Unit_Number_Type;\n+   pragma Inline (Get_Code_Unit);\n+   function Get_Top_Level_Code_Unit (S : Source_Ptr) return Unit_Number_Type;\n+   --  This is like Get_Code_Unit, except that in the case of subunits, it\n+   --  returns the top-level unit to which the subunit belongs instead of\n+   --  the subunit.\n+\n    function In_Extended_Main_Code_Unit\n      (N : Node_Or_Entity_Id) return Boolean;\n    --  Return True if the node is in the generated code of the extended main"}, {"sha": "f7f41f21ce8174dd48f42c285fcc1b9b6382d5f8", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5150cb18f6ba057d1c3ab144e12822421fff434/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5150cb18f6ba057d1c3ab144e12822421fff434/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=a5150cb18f6ba057d1c3ab144e12822421fff434", "patch": "@@ -13637,6 +13637,22 @@ package body Sem_Util is\n       then\n          return True;\n \n+      --  The volatile object appears as the prefix of attributes Address,\n+      --  Alignment, Component_Size, First_Bit, Last_Bit, Position, Size,\n+      --  Storage_Size.\n+\n+      elsif Nkind (Context) = N_Attribute_Reference\n+        and then Prefix (Context) = Obj_Ref\n+        and then Nam_In (Attribute_Name (Context), Name_Alignment,\n+                                                   Name_Component_Size,\n+                                                   Name_First_Bit,\n+                                                   Name_Last_Bit,\n+                                                   Name_Position,\n+                                                   Name_Size,\n+                                                   Name_Storage_Size)\n+      then\n+         return True;\n+\n       --  The volatile object appears as the expression of a type conversion\n       --  occurring in a non-interfering context.\n "}, {"sha": "4aac84738f339ec6fac3a705a42ade72a0618de8", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5150cb18f6ba057d1c3ab144e12822421fff434/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5150cb18f6ba057d1c3ab144e12822421fff434/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=a5150cb18f6ba057d1c3ab144e12822421fff434", "patch": "@@ -28,6 +28,7 @@\n --  circularities, especially for back ends using Adabkend.\n \n with Debug;    use Debug;\n+with Errout;   use Errout;\n with Lib;      use Lib;\n with Osint;    use Osint;\n with Opt;      use Opt;\n@@ -531,7 +532,31 @@ package body Switch.C is\n \n                   when 'C' =>\n                      Ptr := Ptr + 1;\n-                     Generate_CodePeer_Messages := True;\n+\n+                     if not Generate_CodePeer_Messages then\n+                        Generate_CodePeer_Messages := True;\n+                        CodePeer_Mode              := True;\n+                        Warning_Mode               := Normal;\n+                        Warning_Doc_Switch         := True;  -- -gnatw.d\n+\n+                        --  Enable warnings potentially useful for non GNAT\n+                        --  users.\n+\n+                        Constant_Condition_Warnings      := True; -- -gnatwc\n+                        Warn_On_Assertion_Failure        := True; -- -gnatw.a\n+                        Warn_On_Assumed_Low_Bound        := True; -- -gnatww\n+                        Warn_On_Bad_Fixed_Value          := True; -- -gnatwb\n+                        Warn_On_Biased_Representation    := True; -- -gnatw.b\n+                        Warn_On_Export_Import            := True; -- -gnatwx\n+                        Warn_On_Modified_Unread          := True; -- -gnatwm\n+                        Warn_On_No_Value_Assigned        := True; -- -gnatwv\n+                        Warn_On_Object_Renames_Function  := True; -- -gnatw.r\n+                        Warn_On_Overlap                  := True; -- -gnatw.i\n+                        Warn_On_Parameter_Order          := True; -- -gnatw.p\n+                        Warn_On_Questionable_Missing_Parens := True; -- -gnatwq\n+                        Warn_On_Redundant_Constructs     := True; -- -gnatwr\n+                        Warn_On_Suspicious_Modulus_Value := True; -- -gnatw.m\n+                     end if;\n \n                   --  -gnated switch (disable atomic synchronization)\n "}]}