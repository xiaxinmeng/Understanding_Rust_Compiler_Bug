{"sha": "0e510ab53414430e93c6f5b64841e2f40031cda7", "node_id": "C_kwDOANBUbNoAKDBlNTEwYWI1MzQxNDQzMGU5M2M2ZjViNjQ4NDFlMmY0MDAzMWNkYTc", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-19T08:48:11Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-19T08:48:11Z"}, "message": "libstdc++: Fix ctype changed after newlib update.\n\nNewlib changed ctype.h recently[1] by moving the short labels from ctype.h intro\nthe private namespace in ctype_.h.  This broke embedded builds due to them no\nlonger being found.  Instead they now expose the long names to match glibc.\n\nThis patch now uses the short or long names depending on is the short ones are\ndefined or not.\n\n[1] https://github.com/bminor/newlib/commit/3ba1bd0d9dbc015c14a0aaafcef042f706d1249a\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/103305\n\t* config/os/newlib/ctype_base.h (upper, lower, alpha, digit, xdigit,\n\tspace, print, graph, cntrl, punct, alnum, blank): Use short or long\n\tnames depending on if short ones are defined.", "tree": {"sha": "e2f223f686d1c53c613dcaeb0dfbd25485407350", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2f223f686d1c53c613dcaeb0dfbd25485407350"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e510ab53414430e93c6f5b64841e2f40031cda7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e510ab53414430e93c6f5b64841e2f40031cda7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e510ab53414430e93c6f5b64841e2f40031cda7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e510ab53414430e93c6f5b64841e2f40031cda7/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb15abdc9b61a0b7fa24a37f85d19dc449cfd5bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb15abdc9b61a0b7fa24a37f85d19dc449cfd5bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb15abdc9b61a0b7fa24a37f85d19dc449cfd5bf"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "3a7477afdcc76e5a5bc6b0a86d2264c5bc8ab7f8", "filename": "libstdc++-v3/config/os/newlib/ctype_base.h", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e510ab53414430e93c6f5b64841e2f40031cda7/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e510ab53414430e93c6f5b64841e2f40031cda7/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fctype_base.h?ref=0e510ab53414430e93c6f5b64841e2f40031cda7", "patch": "@@ -41,6 +41,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     // NB: Offsets into ctype<char>::_M_table force a particular size\n     // on the mask type. Because of this, we don't use an enum.\n     typedef char \t\tmask;\n+#if defined _U && defined _L && defined _N && defined _S\n     static const mask upper    \t= _U;\n     static const mask lower \t= _L;\n     static const mask alpha \t= _U | _L;\n@@ -52,8 +53,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     static const mask cntrl \t= _C;\n     static const mask punct \t= _P;\n     static const mask alnum \t= _U | _L | _N;\n-#if __cplusplus >= 201103L\n+# if __cplusplus >= 201103L\n     static const mask blank \t= space;\n+# endif\n+#else\n+    static const mask upper    = _ISupper;\n+    static const mask lower    = _ISlower;\n+    static const mask alpha    = _ISupper | _ISlower;\n+    static const mask digit    = _ISdigit;\n+    static const mask xdigit   = _ISxdigit | _ISdigit;\n+    static const mask space    = _ISspace;\n+    static const mask print    = _ISpunct | _ISupper | _ISlower | _ISdigit | _ISblank;\n+    static const mask graph    = _ISpunct | _ISupper | _ISlower | _ISdigit;\n+    static const mask cntrl    = _IScntrl;\n+    static const mask punct    = _ISpunct;\n+    static const mask alnum    = _ISupper | _ISlower | _ISdigit;\n+# if __cplusplus >= 201103L\n+    static const mask blank    =  _ISspace | _ISblank;\n+# endif\n #endif\n   };\n "}]}