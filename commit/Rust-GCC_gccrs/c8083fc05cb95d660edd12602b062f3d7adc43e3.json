{"sha": "c8083fc05cb95d660edd12602b062f3d7adc43e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgwODNmYzA1Y2I5NWQ2NjBlZGQxMjYwMmIwNjJmM2Q3YWRjNDNlMw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-07-03T10:52:03Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-07-03T10:52:03Z"}, "message": "vget_lane.c: New testcase.\n\n2015-07-03  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vget_lane.c: New testcase.\n\nFrom-SVN: r225374", "tree": {"sha": "299ecb668d63fd5777816e2cd877cc3df3104563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/299ecb668d63fd5777816e2cd877cc3df3104563"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8083fc05cb95d660edd12602b062f3d7adc43e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8083fc05cb95d660edd12602b062f3d7adc43e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8083fc05cb95d660edd12602b062f3d7adc43e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8083fc05cb95d660edd12602b062f3d7adc43e3/comments", "author": null, "committer": null, "parents": [{"sha": "d885793d6e2d8f5e2e439fa133a29501f7323f9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d885793d6e2d8f5e2e439fa133a29501f7323f9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d885793d6e2d8f5e2e439fa133a29501f7323f9f"}], "stats": {"total": 129, "additions": 129, "deletions": 0}, "files": [{"sha": "aede20a8e508e883383f187c1dd96bba3f922cfe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8083fc05cb95d660edd12602b062f3d7adc43e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8083fc05cb95d660edd12602b062f3d7adc43e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c8083fc05cb95d660edd12602b062f3d7adc43e3", "patch": "@@ -1,3 +1,7 @@\n+2015-07-03  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vget_lane.c: New testcase.\n+\n 2015-07-03  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \tPR tree-optimization/66119"}, {"sha": "580605072bcce95a4680c14d73cd6ce50aa128c6", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vget_lane.c", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8083fc05cb95d660edd12602b062f3d7adc43e3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8083fc05cb95d660edd12602b062f3d7adc43e3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_lane.c?ref=c8083fc05cb95d660edd12602b062f3d7adc43e3", "patch": "@@ -0,0 +1,125 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+int8_t     expected_s8   = 0xf7;\n+int16_t    expected_s16  = 0xfff3;\n+int32_t    expected_s32  = 0xfffffff1;\n+int64_t    expected_s64  = 0xfffffffffffffff0;\n+uint8_t    expected_u8   = 0xf6;\n+uint16_t   expected_u16  = 0xfff2;\n+uint32_t   expected_u32  = 0xfffffff1;\n+uint64_t   expected_u64  = 0xfffffffffffffff0;\n+poly8_t    expected_p8   = 0xf6;\n+poly16_t   expected_p16  = 0xfff2;\n+hfloat32_t expected_f32  = 0xc1700000;\n+\n+int8_t     expectedq_s8  = 0xff;\n+int16_t    expectedq_s16 = 0xfff5;\n+int32_t    expectedq_s32 = 0xfffffff3;\n+int64_t    expectedq_s64 = 0xfffffffffffffff1;\n+uint8_t    expectedq_u8  = 0xfe;\n+uint16_t   expectedq_u16 = 0xfff6;\n+uint32_t   expectedq_u32 = 0xfffffff2;\n+uint64_t   expectedq_u64 = 0xfffffffffffffff1;\n+poly8_t    expectedq_p8  = 0xfe;\n+poly16_t   expectedq_p16 = 0xfff6;\n+hfloat32_t expectedq_f32 = 0xc1500000;\n+\n+int error_found = 0;\n+\n+#define TEST_MSG \"VGET_LANE\"\n+void exec_vget_lane (void)\n+{\n+  /* vec=vget_lane(vec, lane), then store the result.  */\n+#define TEST_VGET_LANE(Q, T1, T2, W, N, L)\t\t\t\t   \\\n+  VAR(var, T1, W) = vget##Q##_lane_##T2##W(VECT_VAR(vector, T1, W, N), L); \\\n+  if (VAR(var, T1, W) != expected##Q##_##T2##W) {\t\t\t   \\\n+    fprintf(stderr,\t\t\t\t\t\t\t   \\\n+\t    \"ERROR in %s (%s line %d in result '%s') at type %s \"\t   \\\n+\t    \"got 0x%\" PRIx##W \" != 0x%\" PRIx##W \"\\n\",\t\t\t   \\\n+\t    TEST_MSG, __FILE__, __LINE__,\t\t\t\t   \\\n+\t    STR(expected##Q##_##T2##W),\t\t\t\t\t   \\\n+\t    STR(VECT_NAME(T1, W, N)),\t\t\t\t\t   \\\n+\t    VAR(var, T1, W),\t\t\t\t\t\t   \\\n+\t    expected##Q##_##T2##W);\t\t\t\t\t   \\\n+    error_found = 1;\t\t\t\t\t\t\t   \\\n+  }\n+\n+  /* Special variant for floating-point.  */\n+  union {\n+    uint32_t var_int32;\n+    float32_t var_float32;\n+  } var_int32_float32;\n+\n+#define TEST_VGET_LANE_FP(Q, T1, T2, W, N, L)\t\t\t\t   \\\n+  VAR(var, T1, W) = vget##Q##_lane_##T2##W(VECT_VAR(vector, T1, W, N), L); \\\n+  var_int##W##_float##W.var_float##W = VAR(var, T1, W);\t\t\t   \\\n+  if (var_int##W##_float##W.var_int##W != expected##Q##_##T2##W) {\t   \\\n+    fprintf(stderr,\t\t\t\t\t\t\t   \\\n+\t    \"ERROR in %s (%s line %d in result '%s') at type %s \"\t   \\\n+\t    \"got 0x%\" PRIx##W \" != 0x%\" PRIx##W \"\\n\",\t\t\t   \\\n+\t    TEST_MSG, __FILE__, __LINE__,\t\t\t\t   \\\n+\t    STR(expected##Q##_##T2##W),\t\t\t\t\t   \\\n+\t    STR(VECT_NAME(T1, W, N)),\t\t\t\t\t   \\\n+\t    var_int##W##_float##W.var_int##W,\t\t\t\t   \\\n+\t    expected##Q##_##T2##W);\t\t\t\t\t   \\\n+    error_found = 1;\t\t\t\t\t\t\t   \\\n+  }\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+\n+  /* Scalar variables.  */\n+  VAR_DECL(var, int, 8);\n+  VAR_DECL(var, int, 16);\n+  VAR_DECL(var, int, 32);\n+  VAR_DECL(var, int, 64);\n+  VAR_DECL(var, uint, 8);\n+  VAR_DECL(var, uint, 16);\n+  VAR_DECL(var, uint, 32);\n+  VAR_DECL(var, uint, 64);\n+  VAR_DECL(var, poly, 8);\n+  VAR_DECL(var, poly, 16);\n+  VAR_DECL(var, float, 32);\n+\n+  /* Initialize input values.  */\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+  VLOAD(vector, buffer, , float, f, 32, 2);\n+  VLOAD(vector, buffer, q, float, f, 32, 4);\n+\n+  /* Choose lane arbitrarily.  */\n+  TEST_VGET_LANE(, int, s, 8, 8, 7);\n+  TEST_VGET_LANE(, int, s, 16, 4, 3);\n+  TEST_VGET_LANE(, int, s, 32, 2, 1);\n+  TEST_VGET_LANE(, int, s, 64, 1, 0);\n+  TEST_VGET_LANE(, uint, u, 8, 8, 6);\n+  TEST_VGET_LANE(, uint, u, 16, 4, 2);\n+  TEST_VGET_LANE(, uint, u, 32, 2, 1);\n+  TEST_VGET_LANE(, uint, u, 64, 1, 0);\n+  TEST_VGET_LANE(, poly, p, 8, 8, 6);\n+  TEST_VGET_LANE(, poly, p, 16, 4, 2);\n+  TEST_VGET_LANE_FP(, float, f, 32, 2, 1);\n+\n+  TEST_VGET_LANE(q, int, s, 8, 16, 15);\n+  TEST_VGET_LANE(q, int, s, 16, 8, 5);\n+  TEST_VGET_LANE(q, int, s, 32, 4, 3);\n+  TEST_VGET_LANE(q, int, s, 64, 2, 1);\n+  TEST_VGET_LANE(q, uint, u, 8, 16, 14);\n+  TEST_VGET_LANE(q, uint, u, 16, 8, 6);\n+  TEST_VGET_LANE(q, uint, u, 32, 4, 2);\n+  TEST_VGET_LANE(q, uint, u, 64, 2, 1);\n+  TEST_VGET_LANE(q, poly, p, 8, 16, 14);\n+  TEST_VGET_LANE(q, poly, p, 16, 8, 6);\n+  TEST_VGET_LANE_FP(q, float, f, 32, 4, 3);\n+}\n+\n+int main (void)\n+{\n+  exec_vget_lane ();\n+\n+  if (error_found)\n+    abort();\n+\n+  return 0;\n+}"}]}