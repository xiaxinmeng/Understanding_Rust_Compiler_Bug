{"sha": "9e1e6e631045c7eed2c72738b7084986d39ca09f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUxZTZlNjMxMDQ1YzdlZWQyYzcyNzM4YjcwODQ5ODZkMzljYTA5Zg==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-01-14T18:21:05Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-01-14T18:21:05Z"}, "message": "PR fortran/98661 - valgrind issues with error recovery\n\nDuring error recovery after an invalid derived type specification it was\npossible to try to resolve an invalid array specification.  We now skip\nthis if the component has the ALLOCATABLE or POINTER attribute and the\nshape is not deferred.\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/98661\n\t* resolve.c (resolve_component): Derived type components with\n\tALLOCATABLE or POINTER attribute shall have a deferred shape.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/98661\n\t* gfortran.dg/pr98661.f90: New test.", "tree": {"sha": "2c8dfbbb8273e38837973ddb149cc486361a5403", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c8dfbbb8273e38837973ddb149cc486361a5403"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e1e6e631045c7eed2c72738b7084986d39ca09f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1e6e631045c7eed2c72738b7084986d39ca09f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e1e6e631045c7eed2c72738b7084986d39ca09f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1e6e631045c7eed2c72738b7084986d39ca09f/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1a2cf88059fd9f709df507301d98a19f4c5b42b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1a2cf88059fd9f709df507301d98a19f4c5b42b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1a2cf88059fd9f709df507301d98a19f4c5b42b"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "ab7ffc2c8b64d741d53b06932a16167a01910dfa", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1e6e631045c7eed2c72738b7084986d39ca09f/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1e6e631045c7eed2c72738b7084986d39ca09f/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=9e1e6e631045c7eed2c72738b7084986d39ca09f", "patch": "@@ -14723,6 +14723,10 @@ resolve_component (gfc_component *c, gfc_symbol *sym)\n         && sym != c->ts.u.derived)\n     add_dt_to_dt_list (c->ts.u.derived);\n \n+  if (c->as && c->as->type != AS_DEFERRED\n+      && (c->attr.pointer || c->attr.allocatable))\n+    return false;\n+\n   if (!gfc_resolve_array_spec (c->as,\n                                !(c->attr.pointer || c->attr.proc_pointer\n                                  || c->attr.allocatable)))"}, {"sha": "40ddff05d436b062473afbda4fcd2d1939f9d0e4", "filename": "gcc/testsuite/gfortran.dg/pr98661.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1e6e631045c7eed2c72738b7084986d39ca09f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr98661.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1e6e631045c7eed2c72738b7084986d39ca09f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr98661.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr98661.f90?ref=9e1e6e631045c7eed2c72738b7084986d39ca09f", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! PR fortran/98661 - valgrind issues with error recovery\n+!\n+! Test issues related to former testcase charlen_03.f90\n+program p\n+  implicit none\n+  type t\n+     character(:), pointer :: c(n) ! { dg-error \"must have a deferred shape\" }\n+     real,     allocatable :: x(n) ! { dg-error \"must have a deferred shape\" }\n+  end type\n+end\n+\n+subroutine s\n+! no 'implicit none'\n+  type u\n+     character(:), pointer :: c(n) ! { dg-error \"must have a deferred shape\" }\n+     real,     allocatable :: x(n) ! { dg-error \"must have a deferred shape\" }\n+  end type\n+end"}]}