{"sha": "bb75b22aba254e8ff144db27b1c8b4804bad73bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI3NWIyMmFiYTI1NGU4ZmYxNDRkYjI3YjFjOGI0ODA0YmFkNzNiYg==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-08-02T15:38:05Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-08-23T15:45:40Z"}, "message": "Allow matching Intel MIC in OpenMP 'declare variant'\n\n..., and use that to improve XFAILing for Intel MIC offloading execution\ninstead of compilation in 'libgomp.c-c++-common/target-45.c',\n'libgomp.fortran/target10.f90'.\n\n\tgcc/\n\t* config/i386/i386-options.c (ix86_omp_device_kind_arch_isa)\n\t<omp_device_arch> [ACCEL_COMPILER]: Match \"intel_mic\".\n\t* config/i386/t-omp-device (omp-device-properties-i386) <arch>:\n\tAdd \"intel_mic\".\n\tlibgomp/\n\t* testsuite/lib/libgomp.exp\n\t(check_effective_target_offload_target_intelmic): Remove 'proc'.\n\t(check_effective_target_offload_device_intel_mic): New 'proc'.\n\t* testsuite/libgomp.c-c++-common/on_device_arch.h\n\t(device_arch_intel_mic, on_device_arch_intel_mic): New.\n\t* testsuite/libgomp.c-c++-common/target-45.c: Use that for\n\t'dg-xfail-run-if'.\n\t* testsuite/libgomp.fortran/target10.f90: Likewise.", "tree": {"sha": "f58d680f5df77ff9a0ab550f90aa6d1d0ccdbab0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f58d680f5df77ff9a0ab550f90aa6d1d0ccdbab0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb75b22aba254e8ff144db27b1c8b4804bad73bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb75b22aba254e8ff144db27b1c8b4804bad73bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb75b22aba254e8ff144db27b1c8b4804bad73bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb75b22aba254e8ff144db27b1c8b4804bad73bb/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a129376bbc26d3c30af3c1ae6036e2e1446db40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a129376bbc26d3c30af3c1ae6036e2e1446db40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a129376bbc26d3c30af3c1ae6036e2e1446db40"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "fee5a48c9a5072d750def54981da186810511081", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb75b22aba254e8ff144db27b1c8b4804bad73bb/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb75b22aba254e8ff144db27b1c8b4804bad73bb/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=bb75b22aba254e8ff144db27b1c8b4804bad73bb", "patch": "@@ -304,6 +304,10 @@ ix86_omp_device_kind_arch_isa (enum omp_device_kind_arch_isa trait,\n     case omp_device_kind:\n       return strcmp (name, \"cpu\") == 0;\n     case omp_device_arch:\n+#ifdef ACCEL_COMPILER\n+      if (strcmp (name, \"intel_mic\") == 0)\n+\treturn 1;\n+#endif\n       if (strcmp (name, \"x86\") == 0)\n \treturn 1;\n       if (TARGET_64BIT)"}, {"sha": "29350a1d80bc1575792d97a668beae60998294dd", "filename": "gcc/config/i386/t-omp-device", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb75b22aba254e8ff144db27b1c8b4804bad73bb/gcc%2Fconfig%2Fi386%2Ft-omp-device", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb75b22aba254e8ff144db27b1c8b4804bad73bb/gcc%2Fconfig%2Fi386%2Ft-omp-device", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-omp-device?ref=bb75b22aba254e8ff144db27b1c8b4804bad73bb", "patch": "@@ -1,6 +1,6 @@\n omp-device-properties-i386: $(srcdir)/config/i386/i386-options.c\n \techo kind: cpu > $@\n-\techo arch: x86 x86_64 i386 i486 i586 i686 ia32 >> $@\n+\techo arch: intel_mic x86 x86_64 i386 i486 i586 i686 ia32 >> $@\n \techo isa: sse4 `sed -n '/^static struct ix86_target_opts isa2\\?_opts\\[\\] =/,/^};/p' \\\n \t  $(srcdir)/config/i386/i386-options.c | \\\n \t  sed -n 's/\",.*$$//;s/^  { \"-m//p'` >> $@"}, {"sha": "57fb6b068f306db52c31dbe5e4139d36f58bd3fc", "filename": "libgomp/testsuite/lib/libgomp.exp", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb75b22aba254e8ff144db27b1c8b4804bad73bb/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb75b22aba254e8ff144db27b1c8b4804bad73bb/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp?ref=bb75b22aba254e8ff144db27b1c8b4804bad73bb", "patch": "@@ -374,11 +374,6 @@ proc check_effective_target_offload_target_amdgcn { } {\n     return [libgomp_check_effective_target_offload_target \"amdgcn\"]\n }\n \n-# Return 1 if compiling for offload target intelmic\n-proc check_effective_target_offload_target_intelmic { } {\n-    return [libgomp_check_effective_target_offload_target \"*-intelmic\"]\n-}\n-\n # Return 1 if offload device is available.\n proc check_effective_target_offload_device { } {\n     return [check_runtime_nocache offload_device_available_ {\n@@ -453,6 +448,18 @@ proc check_effective_target_openacc_nvidia_accel_selected { } {\n     return [string match \"nvidia\" $openacc_device_type]\n }\n \n+# Return 1 if using Intel MIC offload device.\n+proc check_effective_target_offload_device_intel_mic { } {\n+    return [check_runtime_nocache offload_device_intel_mic {\n+      #include <omp.h>\n+      #include \"testsuite/libgomp.c-c++-common/on_device_arch.h\"\n+      int main ()\n+\t{\n+\t  return !on_device_arch_intel_mic ();\n+\t}\n+    } ]\n+}\n+\n # Return 1 if the OpenACC 'host' device type is selected.\n \n proc check_effective_target_openacc_host_selected { } {"}, {"sha": "ee541dd226057453190df9f646c53f4b06b4764d", "filename": "libgomp/testsuite/libgomp.c-c++-common/on_device_arch.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb75b22aba254e8ff144db27b1c8b4804bad73bb/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fon_device_arch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb75b22aba254e8ff144db27b1c8b4804bad73bb/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fon_device_arch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fon_device_arch.h?ref=bb75b22aba254e8ff144db27b1c8b4804bad73bb", "patch": "@@ -6,7 +6,14 @@ device_arch_nvptx (void)\n   return GOMP_DEVICE_NVIDIA_PTX;\n }\n \n+/* static */ int\n+device_arch_intel_mic (void)\n+{\n+  return GOMP_DEVICE_INTEL_MIC;\n+}\n+\n #pragma omp declare variant (device_arch_nvptx) match(construct={target},device={arch(nvptx)})\n+#pragma omp declare variant (device_arch_intel_mic) match(construct={target},device={arch(intel_mic)})\n /* static */ int\n device_arch (void)\n {\n@@ -28,3 +35,9 @@ on_device_arch_nvptx ()\n {\n   return on_device_arch (GOMP_DEVICE_NVIDIA_PTX);\n }\n+\n+int\n+on_device_arch_intel_mic ()\n+{\n+  return on_device_arch (GOMP_DEVICE_INTEL_MIC);\n+}"}, {"sha": "81acee810649d4caefe1077bbf3e4ae8d294f5a3", "filename": "libgomp/testsuite/libgomp.c-c++-common/target-45.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb75b22aba254e8ff144db27b1c8b4804bad73bb/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb75b22aba254e8ff144db27b1c8b4804bad73bb/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-45.c?ref=bb75b22aba254e8ff144db27b1c8b4804bad73bb", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run { target { ! offload_target_intelmic } } } */\n+/* { dg-xfail-run-if TODO { offload_device_intel_mic } } */\n \n #include <omp.h>\n #include <stdlib.h>"}, {"sha": "f41a726de75abd24ddea7e59d446020d17c3f29a", "filename": "libgomp/testsuite/libgomp.fortran/target10.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb75b22aba254e8ff144db27b1c8b4804bad73bb/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb75b22aba254e8ff144db27b1c8b4804bad73bb/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget10.f90?ref=bb75b22aba254e8ff144db27b1c8b4804bad73bb", "patch": "@@ -1,4 +1,5 @@\n-! { dg-do run { target { ! offload_target_intelmic } } }\n+! { dg-do run }\n+! { dg-xfail-run-if TODO { offload_device_intel_mic } }\n \n program main\n   use omp_lib"}]}