{"sha": "b10af0c8206f7ff2aefd13b3d7d20accf4c9a33c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEwYWYwYzgyMDZmN2ZmMmFlZmQxM2IzZDdkMjBhY2NmNGM5YTMzYw==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-12-17T16:39:58Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-12-17T16:39:58Z"}, "message": "(expand_expr...\n\n(expand_expr, case MULT_EXPR): Generalize code for widening\nmultiply to handle signed widening multiply when only unsigned optab\nis defined, and vice versa.\n\nFrom-SVN: r10788", "tree": {"sha": "2e15ad493ad1e91ed65c980f89a7854ca51b29e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e15ad493ad1e91ed65c980f89a7854ca51b29e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b10af0c8206f7ff2aefd13b3d7d20accf4c9a33c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b10af0c8206f7ff2aefd13b3d7d20accf4c9a33c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b10af0c8206f7ff2aefd13b3d7d20accf4c9a33c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b10af0c8206f7ff2aefd13b3d7d20accf4c9a33c/comments", "author": null, "committer": null, "parents": [{"sha": "97cf2138f807ae2a631f7908227570a5cabfd8ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97cf2138f807ae2a631f7908227570a5cabfd8ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97cf2138f807ae2a631f7908227570a5cabfd8ac"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "5297ae21694a99abab5d3ec8b9a73f06f4092e57", "filename": "gcc/expr.c", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10af0c8206f7ff2aefd13b3d7d20accf4c9a33c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10af0c8206f7ff2aefd13b3d7d20accf4c9a33c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b10af0c8206f7ff2aefd13b3d7d20accf4c9a33c", "patch": "@@ -5430,20 +5430,46 @@ expand_expr (exp, target, tmode, modifier)\n \t{\n \t  enum machine_mode innermode\n \t    = TYPE_MODE (TREE_TYPE (TREE_OPERAND (TREE_OPERAND (exp, 0), 0)));\n+\t  optab other_optab = (TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (TREE_OPERAND (exp, 0), 0)))\n+\t\t\t? smul_widen_optab : umul_widen_optab);\n \t  this_optab = (TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (TREE_OPERAND (exp, 0), 0)))\n \t\t\t? umul_widen_optab : smul_widen_optab);\n-\t  if (mode == GET_MODE_WIDER_MODE (innermode)\n-\t      && this_optab->handlers[(int) mode].insn_code != CODE_FOR_nothing)\n+\t  if (mode == GET_MODE_WIDER_MODE (innermode))\n \t    {\n-\t      op0 = expand_expr (TREE_OPERAND (TREE_OPERAND (exp, 0), 0),\n-\t\t\t\t NULL_RTX, VOIDmode, 0);\n-\t      if (TREE_CODE (TREE_OPERAND (exp, 1)) == INTEGER_CST)\n-\t\top1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX,\n-\t\t\t\t   VOIDmode, 0);\n-\t      else\n-\t\top1 = expand_expr (TREE_OPERAND (TREE_OPERAND (exp, 1), 0),\n-\t\t\t\t   NULL_RTX, VOIDmode, 0);\n-\t      goto binop2;\n+\t      if (this_optab->handlers[(int) mode].insn_code != CODE_FOR_nothing)\n+\t\t{\n+\t\t  op0 = expand_expr (TREE_OPERAND (TREE_OPERAND (exp, 0), 0),\n+\t\t\t\t     NULL_RTX, VOIDmode, 0);\n+\t\t  if (TREE_CODE (TREE_OPERAND (exp, 1)) == INTEGER_CST)\n+\t\t    op1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX,\n+\t\t\t\t       VOIDmode, 0);\n+\t\t  else\n+\t\t    op1 = expand_expr (TREE_OPERAND (TREE_OPERAND (exp, 1), 0),\n+\t\t\t\t       NULL_RTX, VOIDmode, 0);\n+\t\t  goto binop2;\n+\t\t}\n+\t      else if (other_optab->handlers[(int) mode].insn_code != CODE_FOR_nothing\n+\t\t       && innermode == word_mode)\n+\t\t{\n+\t\t  rtx htem;\n+\t\t  op0 = expand_expr (TREE_OPERAND (TREE_OPERAND (exp, 0), 0),\n+\t\t\t\t     NULL_RTX, VOIDmode, 0);\n+\t\t  if (TREE_CODE (TREE_OPERAND (exp, 1)) == INTEGER_CST)\n+\t\t    op1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX,\n+\t\t\t\t       VOIDmode, 0);\n+\t\t  else\n+\t\t    op1 = expand_expr (TREE_OPERAND (TREE_OPERAND (exp, 1), 0),\n+\t\t\t\t       NULL_RTX, VOIDmode, 0);\n+\t\t  temp = expand_binop (mode, other_optab, op0, op1, target,\n+\t\t\t\t       unsignedp, OPTAB_LIB_WIDEN);\n+\t\t  htem = expand_mult_highpart_adjust (innermode,\n+\t\t\t\t\t\t      gen_highpart (innermode, temp),\n+\t\t\t\t\t\t      op0, op1,\n+\t\t\t\t\t\t      gen_highpart (innermode, temp),\n+\t\t\t\t\t\t      unsignedp);\n+\t\t  emit_move_insn (gen_highpart (innermode, temp), htem);\n+\t\t  return temp;\n+\t\t}\n \t    }\n \t}\n       op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, 0);"}]}