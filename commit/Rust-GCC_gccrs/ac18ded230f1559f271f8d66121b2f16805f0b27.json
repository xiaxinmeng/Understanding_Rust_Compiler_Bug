{"sha": "ac18ded230f1559f271f8d66121b2f16805f0b27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMxOGRlZDIzMGYxNTU5ZjI3MWY4ZDY2MTIxYjJmMTY4MDVmMGIyNw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-05-12T09:56:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-05-12T10:15:55Z"}, "message": "Fix uninitialized variable in Atree.Size_In_Slots\n\nSize_In_Slots uses the Nkind to look up the size in a table indexed\nby Nkind.  This patch fixes a couple of places where the Nkind is\nwrong (uninitialized or zeroed out) so Size_In_Slots cannot be used.\n\ngcc/ada/\n\tPR ada/100564\n\t* atree.adb (Change_Node): Do not call Zero_Slots on a Node_Id\n\twhen the Nkind has not yet been set; call the other Zero_Slots\n\tthat takes a range of slot offsets.  Call the new Mutate_Kind\n\tthat takes an Old_Size, for the same reason -- the size cannot\n\tbe computed without the Nkind.\n\t(Mutate_Nkind): New function that allows specifying the Old_Size.\n\t(Size_In_Slots): Assert that the Nkind has proper (nonzero) value.\n\t* atree.ads: Minor reformatting.", "tree": {"sha": "f4bd24814c747e04b2268d864479cdada523bfbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4bd24814c747e04b2268d864479cdada523bfbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac18ded230f1559f271f8d66121b2f16805f0b27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac18ded230f1559f271f8d66121b2f16805f0b27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac18ded230f1559f271f8d66121b2f16805f0b27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac18ded230f1559f271f8d66121b2f16805f0b27/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3835aa0eb90292d652dd6b200f302f3cac7e643f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3835aa0eb90292d652dd6b200f302f3cac7e643f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3835aa0eb90292d652dd6b200f302f3cac7e643f"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "608819bd1adc38cd8ea0acf5f2840799c75ceb42", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac18ded230f1559f271f8d66121b2f16805f0b27/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac18ded230f1559f271f8d66121b2f16805f0b27/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=ac18ded230f1559f271f8d66121b2f16805f0b27", "patch": "@@ -216,6 +216,13 @@ package body Atree is\n    --  cannot be used to modify an already-initialized Nkind field. See also\n    --  Mutate_Nkind.\n \n+   procedure Mutate_Nkind\n+     (N : Node_Id; Val : Node_Kind; Old_Size : Field_Offset);\n+   --  Called by the other Mutate_Nkind to do all the work. This is needed\n+   --  because the call in Change_Node, which calls this one directly, happens\n+   --  after zeroing N's slots, which destroys its Nkind, which prevents us\n+   --  from properly computing Old_Size.\n+\n    package Field_Checking is\n       function Field_Present\n         (Kind : Node_Kind; Field : Node_Field) return Boolean;\n@@ -868,9 +875,8 @@ package body Atree is\n    end Init_Nkind;\n \n    procedure Mutate_Nkind\n-     (N : Node_Id; Val : Node_Kind)\n+     (N : Node_Id; Val : Node_Kind; Old_Size : Field_Offset)\n    is\n-      Old_Size : constant Field_Offset := Size_In_Slots (N);\n       New_Size : constant Field_Offset := Size_In_Slots_To_Alloc (Val);\n \n       All_Node_Offsets : Node_Offsets.Table_Type renames\n@@ -905,6 +911,11 @@ package body Atree is\n       pragma Debug (Validate_Node_Write (N));\n    end Mutate_Nkind;\n \n+   procedure Mutate_Nkind (N : Node_Id; Val : Node_Kind) is\n+   begin\n+      Mutate_Nkind (N, Val, Old_Size => Size_In_Slots (N));\n+   end Mutate_Nkind;\n+\n    Ekind_Offset : constant Field_Offset :=\n      Entity_Field_Descriptors (Ekind).Offset;\n \n@@ -998,13 +1009,19 @@ package body Atree is\n       end if;\n \n       if New_Size > Old_Size then\n-         pragma Debug (Zero_Slots (N));\n-         Node_Offsets.Table (N) := Alloc_Slots (New_Size);\n-      end if;\n+         declare\n+            New_Offset : constant Field_Offset := Alloc_Slots (New_Size);\n+         begin\n+            pragma Debug (Zero_Slots (N));\n+            Node_Offsets.Table (N) := New_Offset;\n+            Zero_Slots (New_Offset, New_Offset + New_Size - 1);\n+         end;\n \n-      Zero_Slots (N);\n+      else\n+         Zero_Slots (N);\n+      end if;\n \n-      Mutate_Nkind (N, New_Kind);\n+      Mutate_Nkind (N, New_Kind, Old_Size);\n \n       Set_Sloc (N, Save_Sloc);\n       Set_In_List (N, Save_In_List);\n@@ -2125,6 +2142,7 @@ package body Atree is\n \n    function Size_In_Slots (N : Node_Or_Entity_Id) return Field_Offset is\n    begin\n+      pragma Assert (Nkind (N) /= N_Unused_At_Start);\n       return\n         (if Nkind (N) in N_Entity then Einfo.Entities.Max_Entity_Size\n          else Sinfo.Nodes.Size (Nkind (N)));"}, {"sha": "e2d3492e32f7fcebb9a30f8c96bbc90950624c66", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac18ded230f1559f271f8d66121b2f16805f0b27/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac18ded230f1559f271f8d66121b2f16805f0b27/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=ac18ded230f1559f271f8d66121b2f16805f0b27", "patch": "@@ -571,8 +571,7 @@ package Atree is\n      (N : Entity_Id; Field : Entity_Field) return Boolean;\n    --  True if the field value is the initial zero value\n \n-   procedure Mutate_Nkind\n-     (N : Node_Id; Val : Node_Kind) with Inline;\n+   procedure Mutate_Nkind (N : Node_Id; Val : Node_Kind) with Inline;\n    --  There is no Set_Nkind in Sinfo.Nodes. We use this instead. This is here,\n    --  and has a different name, because it does some extra checking. Nkind is\n    --  like a discriminant, in that it controls which fields exist, and that"}]}