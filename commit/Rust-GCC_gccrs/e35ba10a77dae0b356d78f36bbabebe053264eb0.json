{"sha": "e35ba10a77dae0b356d78f36bbabebe053264eb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM1YmExMGE3N2RhZTBiMzU2ZDc4ZjM2YmJhYmViZTA1MzI2NGViMA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-10-18T21:29:37Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-10-18T21:29:37Z"}, "message": "re PR fortran/82567 ([6/7/8] gfortran takes a long time to compile a simple implied-do with -Optimization.)\n\n2017-10-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/82567\n\t* frontend-passes.c (combine_array_constructor): If an array\n\tconstructor is all constants and has more elements than a small\n\tconstant, don't convert a*[b,c] to [a*b,a*c] to reduce compilation\n\ttimes.\n\n2017-10-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/82567\n\t* gfortran.dg/array_constructor_51.f90: New test.\n\nFrom-SVN: r253872", "tree": {"sha": "7aa37aa9dd5d44e348748e53461b23454160f1f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7aa37aa9dd5d44e348748e53461b23454160f1f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e35ba10a77dae0b356d78f36bbabebe053264eb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e35ba10a77dae0b356d78f36bbabebe053264eb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e35ba10a77dae0b356d78f36bbabebe053264eb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e35ba10a77dae0b356d78f36bbabebe053264eb0/comments", "author": null, "committer": null, "parents": [{"sha": "9d0d0a5a1312edb8c32160c5645cf72841efa12d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d0d0a5a1312edb8c32160c5645cf72841efa12d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d0d0a5a1312edb8c32160c5645cf72841efa12d"}], "stats": {"total": 63, "additions": 62, "deletions": 1}, "files": [{"sha": "2d903e2969ac9e81be61bc6cc001c03364bed680", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35ba10a77dae0b356d78f36bbabebe053264eb0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35ba10a77dae0b356d78f36bbabebe053264eb0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e35ba10a77dae0b356d78f36bbabebe053264eb0", "patch": "@@ -1,3 +1,11 @@\n+2017-10-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/82567\n+\t* frontend-passes.c (combine_array_constructor): If an array\n+\tconstructor is all constants and has more elements than a small\n+\tconstant, don't convert a*[b,c] to [a*b,a*c] to reduce compilation\n+\ttimes.\n+\n 2017-10-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/79795"}, {"sha": "fcfaf9508c2ec52a07b02d5dff373765e5e252f4", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35ba10a77dae0b356d78f36bbabebe053264eb0/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35ba10a77dae0b356d78f36bbabebe053264eb0/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=e35ba10a77dae0b356d78f36bbabebe053264eb0", "patch": "@@ -1635,6 +1635,8 @@ combine_array_constructor (gfc_expr *e)\n   gfc_constructor *c, *new_c;\n   gfc_constructor_base oldbase, newbase;\n   bool scalar_first;\n+  int n_elem;\n+  bool all_const;\n \n   /* Array constructors have rank one.  */\n   if (e->rank != 1)\n@@ -1674,12 +1676,38 @@ combine_array_constructor (gfc_expr *e)\n   if (op2->ts.type == BT_CHARACTER)\n     return false;\n \n-  scalar = create_var (gfc_copy_expr (op2), \"constr\");\n+  /* This might be an expanded constructor with very many constant values. If\n+     we perform the operation here, we might end up with a long compile time\n+     and actually longer execution time, so a length bound is in order here.\n+     If the constructor constains something which is not a constant, it did\n+     not come from an expansion, so leave it alone.  */\n+\n+#define CONSTR_LEN_MAX 4\n \n   oldbase = op1->value.constructor;\n+\n+  n_elem = 0;\n+  all_const = true;\n+  for (c = gfc_constructor_first (oldbase); c; c = gfc_constructor_next(c))\n+    {\n+      if (c->expr->expr_type != EXPR_CONSTANT)\n+\t{\n+\t  all_const = false;\n+\t  break;\n+\t}\n+      n_elem += 1;\n+    }\n+\n+  if (all_const && n_elem > CONSTR_LEN_MAX)\n+    return false;\n+\n+#undef CONSTR_LEN_MAX\n+\n   newbase = NULL;\n   e->expr_type = EXPR_ARRAY;\n \n+  scalar = create_var (gfc_copy_expr (op2), \"constr\");\n+\n   for (c = gfc_constructor_first (oldbase); c;\n        c = gfc_constructor_next (c))\n     {"}, {"sha": "8e866af0cf2cbd3cbbc0a948a437372fba7c6c05", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35ba10a77dae0b356d78f36bbabebe053264eb0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35ba10a77dae0b356d78f36bbabebe053264eb0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e35ba10a77dae0b356d78f36bbabebe053264eb0", "patch": "@@ -1,3 +1,8 @@\n+2017-10-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/82567\n+\t* gfortran.dg/array_constructor_51.f90: New test.\n+\n 2017-10-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/79795"}, {"sha": "4c3cdf71fcfa691b2d23927489cd2de92d468e51", "filename": "gcc/testsuite/gfortran.dg/array_constructor_51.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e35ba10a77dae0b356d78f36bbabebe053264eb0/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_51.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e35ba10a77dae0b356d78f36bbabebe053264eb0/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_51.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_51.f90?ref=e35ba10a77dae0b356d78f36bbabebe053264eb0", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-ffrontend-optimize -fdump-tree-original\" }\n+! PR 82567 - long compile times caused by large constant constructors\n+! multiplied by variables\n+\n+  SUBROUTINE sub()\n+  IMPLICIT NONE\n+  \n+  INTEGER, PARAMETER :: n = 1000\n+  REAL, ALLOCATABLE :: x(:)\n+  REAL :: xc, h\n+  INTEGER :: i\n+ \n+  ALLOCATE( x(n) )\n+  xc = 100.\n+  h = xc/n\n+  x = h*[(i,i=1,n)]\n+  \n+end\n+! { dg-final { scan-tree-dump-times \"__var\" 0 \"original\" } }"}]}