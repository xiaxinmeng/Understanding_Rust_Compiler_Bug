{"sha": "22efcab77ad9a19cae5e828a9bcfd4dba9ea02ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJlZmNhYjc3YWQ5YTE5Y2FlNWU4MjhhOWJjZmQ0ZGJhOWVhMDJlYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-20T09:51:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-20T09:51:22Z"}, "message": "[multiple changes]\n\n2015-02-20  Vincent Celier  <celier@adacore.com>\n\n\t* switch-c.adb (Scan_Front_End_Switches): Do not fail when --RTS=\n\tis specified several times with different values that indicates\n\tthe same runtime directory.\n\n2015-02-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Check_Not_Incomplete_Type): Clean up code to\n\thandle properly illegal uses of attributes on prefixes on an\n\tincomplete type, both when the type of the prefix is locally\n\tincomplete, and when it is a limited view of a type whose\n\tnon-limited view is not available.\n\t(Analyze_Attribute): Add calls to Check_Not_Incomplete_Type for\n\t'Address and others.\n\n2015-02-20  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* exp_ch6.adb: Fix minor typo in comment.\n\nFrom-SVN: r220843", "tree": {"sha": "4245838727a454159664e7cc0f0d5a35592fff1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4245838727a454159664e7cc0f0d5a35592fff1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22efcab77ad9a19cae5e828a9bcfd4dba9ea02ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22efcab77ad9a19cae5e828a9bcfd4dba9ea02ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22efcab77ad9a19cae5e828a9bcfd4dba9ea02ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22efcab77ad9a19cae5e828a9bcfd4dba9ea02ec/comments", "author": null, "committer": null, "parents": [{"sha": "17ce1f52fe78bfdc63dfe941a272a1ffdea605a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17ce1f52fe78bfdc63dfe941a272a1ffdea605a7"}], "stats": {"total": 121, "additions": 88, "deletions": 33}, "files": [{"sha": "72d2a655f3cacf7fc53d8123ef3d2dbc68d747b2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22efcab77ad9a19cae5e828a9bcfd4dba9ea02ec/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22efcab77ad9a19cae5e828a9bcfd4dba9ea02ec/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=22efcab77ad9a19cae5e828a9bcfd4dba9ea02ec", "patch": "@@ -1,3 +1,23 @@\n+2015-02-20  Vincent Celier  <celier@adacore.com>\n+\n+\t* switch-c.adb (Scan_Front_End_Switches): Do not fail when --RTS=\n+\tis specified several times with different values that indicates\n+\tthe same runtime directory.\n+\n+2015-02-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Check_Not_Incomplete_Type): Clean up code to\n+\thandle properly illegal uses of attributes on prefixes on an\n+\tincomplete type, both when the type of the prefix is locally\n+\tincomplete, and when it is a limited view of a type whose\n+\tnon-limited view is not available.\n+\t(Analyze_Attribute): Add calls to Check_Not_Incomplete_Type for\n+\t'Address and others.\n+\n+2015-02-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb: Fix minor typo in comment.\n+\n 2015-02-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sinfo.ads: Add comment."}, {"sha": "870e5f8b1311d060d5f68b1b9f1c9d40b891d036", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22efcab77ad9a19cae5e828a9bcfd4dba9ea02ec/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22efcab77ad9a19cae5e828a9bcfd4dba9ea02ec/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=22efcab77ad9a19cae5e828a9bcfd4dba9ea02ec", "patch": "@@ -3783,7 +3783,7 @@ package body Exp_Ch6 is\n \n          --  Front end expansion of simple functions returning unconstrained\n          --  types (see Check_And_Split_Unconstrained_Function) and simple\n-         --  renamings inlined by the front end (see Build_Renamed_Entity).\n+         --  renamings inlined by the front end (see Build_Renamed_Body).\n \n          else\n             Expand_Inlined_Call (Call_Node, Subp, Orig_Subp);"}, {"sha": "36f78d12e992720414d7e8be43aefa8062b4b2b6", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 55, "deletions": 19, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22efcab77ad9a19cae5e828a9bcfd4dba9ea02ec/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22efcab77ad9a19cae5e828a9bcfd4dba9ea02ec/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=22efcab77ad9a19cae5e828a9bcfd4dba9ea02ec", "patch": "@@ -1637,6 +1637,10 @@ package body Sem_Attr is\n          --  dereference we have to check wrong uses of incomplete types\n          --  (other wrong uses are checked at their freezing point).\n \n+         --  In Ada 2012, incomplete types can appear in subprogram\n+         --  profiles, but formals with incomplete types cannot be the\n+         --  prefix of attributes.\n+\n          --  Example 1: Limited-with\n \n          --    limited with Pkg;\n@@ -1668,35 +1672,64 @@ package body Sem_Attr is\n                Error_Attr_P\n                  (\"prefix of % attribute cannot be an incomplete type\");\n \n-            else\n-               if Is_Access_Type (Typ) then\n-                  Typ := Directly_Designated_Type (Typ);\n-               end if;\n+            --  If the prefix is an access type check the designated type\n \n-               if Is_Class_Wide_Type (Typ) then\n-                  Typ := Root_Type (Typ);\n-               end if;\n+            elsif Is_Access_Type (Typ)\n+              and then Nkind (P) = N_Explicit_Dereference\n+            then\n+               Typ := Directly_Designated_Type (Typ);\n+            end if;\n \n-               --  A legal use of a shadow entity occurs only when the unit\n-               --  where the non-limited view resides is imported via a regular\n-               --  with clause in the current body. Such references to shadow\n-               --  entities may occur in subprogram formals.\n+            if Is_Class_Wide_Type (Typ) then\n+               Typ := Root_Type (Typ);\n+            end if;\n \n-               if Is_Incomplete_Type (Typ)\n-                 and then From_Limited_With (Typ)\n-                 and then Present (Non_Limited_View (Typ))\n-                 and then Is_Legal_Shadow_Entity_In_Body (Typ)\n+            --  A legal use of a shadow entity occurs only when the unit where\n+            --  the non-limited view resides is imported via a regular with\n+            --  clause in the current body. Such references to shadow entities\n+            --  may occur in subprogram formals.\n+\n+            if Is_Incomplete_Type (Typ)\n+              and then From_Limited_With (Typ)\n+              and then Present (Non_Limited_View (Typ))\n+              and then Is_Legal_Shadow_Entity_In_Body (Typ)\n+            then\n+               Typ := Non_Limited_View (Typ);\n+            end if;\n+\n+            --  If still incomplete, it can be a local incomplete type, or a\n+            --  limited view whose scope is also a limited view.\n+\n+            if Ekind (Typ) = E_Incomplete_Type then\n+               if not From_Limited_With (Typ)\n+                  and then No (Full_View (Typ))\n                then\n-                  Typ := Non_Limited_View (Typ);\n-               end if;\n+                  Error_Attr_P\n+                    (\"prefix of % attribute cannot be an incomplete type\");\n+\n+               --  The limited view may be available indirectly through\n+               --  an intermediate unit. If the non-limited view is available\n+               --  the attribute reference is legal.\n \n-               if Ekind (Typ) = E_Incomplete_Type\n-                 and then No (Full_View (Typ))\n+               elsif From_Limited_With (Typ)\n+                 and then\n+                   (No (Non_Limited_View (Typ))\n+                     or else Is_Incomplete_Type (Non_Limited_View (Typ)))\n                then\n                   Error_Attr_P\n                     (\"prefix of % attribute cannot be an incomplete type\");\n                end if;\n             end if;\n+\n+         --  Ada 2012 : formals in bodies may be incomplete, but no attribute\n+         --  legally applies.\n+\n+         elsif Is_Entity_Name (P)\n+           and then Is_Formal (Entity (P))\n+           and then Is_Incomplete_Type (Etype (Etype (P)))\n+         then\n+            Error_Attr_P\n+              (\"prefix of % attribute cannot be an incomplete type\");\n          end if;\n \n          if not Is_Entity_Name (P)\n@@ -2615,6 +2648,7 @@ package body Sem_Attr is\n \n       when Attribute_Access =>\n          Analyze_Access_Attribute;\n+         Check_Not_Incomplete_Type;\n \n       -------------\n       -- Address --\n@@ -2623,6 +2657,7 @@ package body Sem_Attr is\n       when Attribute_Address =>\n          Check_E0;\n          Address_Checks;\n+         Check_Not_Incomplete_Type;\n          Set_Etype (N, RTE (RE_Address));\n \n       ------------------\n@@ -6019,6 +6054,7 @@ package body Sem_Attr is\n          end if;\n \n          Analyze_Access_Attribute;\n+         Check_Not_Incomplete_Type;\n \n       -------------------------\n       -- Unconstrained_Array --"}, {"sha": "c3b57335a30a18585e71a6e156daa9a6a1361c89", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22efcab77ad9a19cae5e828a9bcfd4dba9ea02ec/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22efcab77ad9a19cae5e828a9bcfd4dba9ea02ec/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=22efcab77ad9a19cae5e828a9bcfd4dba9ea02ec", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -229,17 +229,6 @@ package body Switch.C is\n                        new String'(Switch_Chars (Ptr + 4 .. Max));\n                   end if;\n \n-                  --  Check that this is the first time --RTS is specified\n-                  --  or if it is not the first time, the same path has been\n-                  --  specified.\n-\n-                  if RTS_Specified = null then\n-                     RTS_Specified := Runtime_Dir;\n-\n-                  elsif  RTS_Specified.all /= Runtime_Dir.all then\n-                     Osint.Fail (\"--RTS cannot be specified multiple times\");\n-                  end if;\n-\n                   --  Valid --RTS switch\n \n                   Opt.No_Stdinc := True;\n@@ -251,13 +240,23 @@ package body Switch.C is\n                   RTS_Lib_Path_Name :=\n                     Get_RTS_Search_Dir (Runtime_Dir.all, Objects);\n \n-                  if RTS_Src_Path_Name /= null\n+                  if RTS_Specified /= null then\n+                     if RTS_Src_Path_Name = null\n+                       or else RTS_Lib_Path_Name = null\n+                       or else RTS_Specified.all /= RTS_Lib_Path_Name.all\n+                     then\n+                        Osint.Fail\n+                          (\"--RTS cannot be specified multiple times\");\n+                     end if;\n+\n+                  elsif RTS_Src_Path_Name /= null\n                     and then RTS_Lib_Path_Name /= null\n                   then\n                      --  Store the -fRTS switch (Note: Store_Compilation_Switch\n                      --  changes -fRTS back into --RTS for the actual output).\n \n                      Store_Compilation_Switch (Switch_Chars);\n+                     RTS_Specified := new String'(RTS_Lib_Path_Name.all);\n \n                   elsif RTS_Src_Path_Name = null\n                     and then RTS_Lib_Path_Name = null"}]}