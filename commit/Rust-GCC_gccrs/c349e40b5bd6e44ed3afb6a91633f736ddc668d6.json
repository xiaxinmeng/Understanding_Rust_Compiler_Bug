{"sha": "c349e40b5bd6e44ed3afb6a91633f736ddc668d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM0OWU0MGI1YmQ2ZTQ0ZWQzYWZiNmE5MTYzM2Y3MzZkZGM2NjhkNg==", "commit": {"author": {"name": "Stephane Carrez", "email": "Stephane.Carrez@worldnet.fr", "date": "2000-09-13T19:34:05Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2000-09-13T19:34:05Z"}, "message": "flags.h (flag_dump_rtl_in_asm): Declare.\n\n\t* flags.h (flag_dump_rtl_in_asm): Declare.\n\t* toplev.c (flag_dump_rtl_in_asm): Define.\n\t(decode_d_option): Set flag_dump_rtl_in_asm and flag_print_asm_name\n\tif -dP is specified.\n\t* rtl.h (print_rtx_head): Declare.\n\t* print-rtl.c (print_rtx_head): Define.\n\t(print_rtx): Print the string pointed to by print_rtx_head\n\tat beginning of each dump line.\n\t(print_rtl): Likewise.\n\t(print_rtl_single): Likewise.\n\t* final.c (final_scan_insn): Dump the insn in the assembly\n\tfile for debugging.\n\t* gcc.1: Document -dP option.\n\t* invoke.texi (Debugging Options): Likewise.\n\nFrom-SVN: r36394", "tree": {"sha": "9f0163da7788dbdbf5f9158a769923ef406ce1d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f0163da7788dbdbf5f9158a769923ef406ce1d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c349e40b5bd6e44ed3afb6a91633f736ddc668d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c349e40b5bd6e44ed3afb6a91633f736ddc668d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c349e40b5bd6e44ed3afb6a91633f736ddc668d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c349e40b5bd6e44ed3afb6a91633f736ddc668d6/comments", "author": null, "committer": null, "parents": [{"sha": "2856c3e3f58327d111a846d4351c3c9568384944", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2856c3e3f58327d111a846d4351c3c9568384944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2856c3e3f58327d111a846d4351c3c9568384944"}], "stats": {"total": 68, "additions": 62, "deletions": 6}, "files": [{"sha": "b4a8d562b484366b4266342adc5056bb64ec7f05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c349e40b5bd6e44ed3afb6a91633f736ddc668d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c349e40b5bd6e44ed3afb6a91633f736ddc668d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c349e40b5bd6e44ed3afb6a91633f736ddc668d6", "patch": "@@ -1,3 +1,20 @@\n+2000-09-13  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n+\n+\t* flags.h (flag_dump_rtl_in_asm): Declare.\n+\t* toplev.c (flag_dump_rtl_in_asm): Define.\n+\t(decode_d_option): Set flag_dump_rtl_in_asm and flag_print_asm_name\n+\tif -dP is specified.\n+\t* rtl.h (print_rtx_head): Declare.\n+\t* print-rtl.c (print_rtx_head): Define.\n+\t(print_rtx): Print the string pointed to by print_rtx_head\n+\tat beginning of each dump line.\n+\t(print_rtl): Likewise.\n+\t(print_rtl_single): Likewise.\n+\t* final.c (final_scan_insn): Dump the insn in the assembly\n+\tfile for debugging.\n+\t* gcc.1: Document -dP option.\n+\t* invoke.texi (Debugging Options): Likewise.\n+\n 2000-09-13  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n \t* md.texi (Machine Constraints): Document the 68HC11 constraints."}, {"sha": "c22df2f4c9669c77148ebda0207b85393005a5cb", "filename": "gcc/final.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c349e40b5bd6e44ed3afb6a91633f736ddc668d6/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c349e40b5bd6e44ed3afb6a91633f736ddc668d6/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=c349e40b5bd6e44ed3afb6a91633f736ddc668d6", "patch": "@@ -2922,6 +2922,14 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \textract_insn (insn);\n \tcleanup_subreg_operands (insn);\n \n+       /* Dump the insn in the assembly for debugging.  */\n+       if (flag_dump_rtl_in_asm)\n+         {\n+           print_rtx_head = ASM_COMMENT_START;\n+           print_rtl_single (asm_out_file, insn);\n+           print_rtx_head = \"\";\n+         }\n+       \n \tif (! constrain_operands (1))\n \t  fatal_insn_not_found (insn);\n "}, {"sha": "8fa2e87d00cb8809f4b0357f68b2ae457df8cd1f", "filename": "gcc/flags.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c349e40b5bd6e44ed3afb6a91633f736ddc668d6/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c349e40b5bd6e44ed3afb6a91633f736ddc668d6/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=c349e40b5bd6e44ed3afb6a91633f736ddc668d6", "patch": "@@ -474,6 +474,8 @@ extern int flag_verbose_asm;\n \n extern int flag_debug_asm;\n \n+extern int flag_dump_rtl_in_asm;\n+\n /* -fgnu-linker specifies use of the GNU linker for initializations.\n    -fno-gnu-linker says that collect will be used.  */\n extern int flag_gnu_linker;"}, {"sha": "e6a5e41cd936e1debfc68fbe207e47c0cb878619", "filename": "gcc/gcc.1", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c349e40b5bd6e44ed3afb6a91633f736ddc668d6/gcc%2Fgcc.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c349e40b5bd6e44ed3afb6a91633f736ddc668d6/gcc%2Fgcc.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.1?ref=c349e40b5bd6e44ed3afb6a91633f736ddc668d6", "patch": "@@ -20,7 +20,7 @@\n .if n .sp\n .if t .sp 0.4\n ..\n-.Id $Id: gcc.1,v 1.15 2000/05/17 08:15:25 cagney Exp $\n+.Id $Id: gcc.1,v 1.16 2000/09/11 06:10:30 ciceron Exp $\n .TH GCC 1 \"\\*(Dt\" \"GNU Tools\" \"GNU Tools\"\n .SH NAME\n gcc, g++ \\- GNU project C and C++ Compiler (gcc-2.96)\n@@ -2311,6 +2311,12 @@ standard error.\n Annotate the assembler output with a comment indicating which\n pattern and alternative was used.\n .TP\n+.B \\-dP\n+Dump the RTL in the assembler output as a comment before each instruction.\n+Also turns on\n+.B \\-dp\n+annotation.\n+.TP\n .B \\-fpretend\\-float\n When running a cross-compiler, pretend that the target machine uses the\n same floating point format as the host machine.  This causes incorrect"}, {"sha": "25f7e01bc8aafa0f5c99bfcb122a04136a6095f3", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c349e40b5bd6e44ed3afb6a91633f736ddc668d6/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c349e40b5bd6e44ed3afb6a91633f736ddc668d6/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=c349e40b5bd6e44ed3afb6a91633f736ddc668d6", "patch": "@@ -55,6 +55,11 @@ static int indent;\n \n static void print_rtx\t\tPARAMS ((rtx));\n \n+/* String printed at beginning of each RTL when it is dumped.\n+   This string is set to ASM_COMMENT_START when the RTL is dumped in\n+   the assembly output file.  */\n+char *print_rtx_head = \"\";\n+\n /* Nonzero means suppress output of instruction numbers and line number\n    notes in debugging dumps.\n    This must be defined here so that programs like gencodes can be linked.  */\n@@ -80,8 +85,9 @@ print_rtx (in_rtx)\n \n   if (sawclose)\n     {\n-      fprintf (outfile, \"\\n%s\",\n-\t       (xspaces + (sizeof xspaces - 1 - indent * 2)));\n+      fprintf (outfile, \"\\n%s%s\",\n+               print_rtx_head,\n+ \t       (xspaces + (sizeof xspaces - 1 - indent * 2)));\n       sawclose = 0;\n     }\n \n@@ -256,7 +262,8 @@ print_rtx (in_rtx)\n \tindent += 2;\n \tif (sawclose)\n \t  {\n-\t    fprintf (outfile, \"\\n%s\",\n+\t    fprintf (outfile, \"\\n%s%s\",\n+                     print_rtx_head,\n \t\t     (xspaces + (sizeof xspaces - 1 - indent * 2)));\n \t    sawclose = 0;\n \t  }\n@@ -273,7 +280,8 @@ print_rtx (in_rtx)\n \t    indent -= 2;\n \t  }\n \tif (sawclose)\n-\t  fprintf (outfile, \"\\n%s\",\n+\t  fprintf (outfile, \"\\n%s%s\",\n+                   print_rtx_head,\n \t\t   (xspaces + (sizeof xspaces - 1 - indent * 2)));\n \n \tfputs (\"] \", outfile);\n@@ -600,7 +608,10 @@ print_rtl (outf, rtx_first)\n   sawclose = 0;\n \n   if (rtx_first == 0)\n-    fputs (\"(nil)\\n\", outf);\n+    {\n+      fputs (print_rtx_head, outf);\n+      fputs (\"(nil)\\n\", outf);\n+    }\n   else\n     switch (GET_CODE (rtx_first))\n       {\n@@ -614,12 +625,14 @@ print_rtl (outf, rtx_first)\n \t  if (! flag_dump_unnumbered\n \t      || GET_CODE (tmp_rtx) != NOTE || NOTE_LINE_NUMBER (tmp_rtx) < 0)\n \t    {\n+              fputs (print_rtx_head, outfile);\n \t      print_rtx (tmp_rtx);\n \t      fprintf (outfile, \"\\n\");\n \t    }\n \tbreak;\n \n       default:\n+        fputs (print_rtx_head, outfile);\n \tprint_rtx (rtx_first);\n       }\n }\n@@ -637,6 +650,7 @@ print_rtl_single (outf, x)\n   if (! flag_dump_unnumbered\n       || GET_CODE (x) != NOTE || NOTE_LINE_NUMBER (x) < 0)\n     {\n+      fputs (print_rtx_head, outfile);\n       print_rtx (x);\n       putc ('\\n', outf);\n       return 1;"}, {"sha": "d1d76968e73b9f2adc056cc154dae752ac89f022", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c349e40b5bd6e44ed3afb6a91633f736ddc668d6/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c349e40b5bd6e44ed3afb6a91633f736ddc668d6/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=c349e40b5bd6e44ed3afb6a91633f736ddc668d6", "patch": "@@ -1747,6 +1747,7 @@ extern void schedule_insns\t\tPARAMS ((FILE *));\n extern void fix_sched_param\t\tPARAMS ((const char *, const char *));\n \n /* In print-rtl.c */\n+extern char *print_rtx_head;\n extern void debug_rtx\t\t\tPARAMS ((rtx));\n extern void debug_rtx_list\t\tPARAMS ((rtx, int));\n extern void debug_rtx_range\t\tPARAMS ((rtx, rtx));"}, {"sha": "95ef7a292e9c9a36ca7c2c86a80e3bf3d4f3f9bc", "filename": "gcc/toplev.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c349e40b5bd6e44ed3afb6a91633f736ddc668d6/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c349e40b5bd6e44ed3afb6a91633f736ddc668d6/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c349e40b5bd6e44ed3afb6a91633f736ddc668d6", "patch": "@@ -795,6 +795,10 @@ int flag_verbose_asm = 0;\n \n int flag_debug_asm = 0;\n \n+/* -dP causes the rtl to be emitted as a comment in assembly.  */\n+\n+int flag_dump_rtl_in_asm = 0;\n+\n /* -fgnu-linker specifies use of the GNU linker for initializations.\n    (Or, more generally, a linker that handles initializations.)\n    -fno-gnu-linker says that collect2 will be used.  */\n@@ -3970,6 +3974,10 @@ decode_d_option (arg)\n       case 'p':\n \tflag_print_asm_name = 1;\n \tbreak;\n+      case 'P':\n+        flag_dump_rtl_in_asm = 1;\n+        flag_print_asm_name = 1;\n+        break;\n       case 'v':\n \tgraph_dump_format = vcg;\n \tbreak;"}]}