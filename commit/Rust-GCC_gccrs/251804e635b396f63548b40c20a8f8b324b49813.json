{"sha": "251804e635b396f63548b40c20a8f8b324b49813", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUxODA0ZTYzNWIzOTZmNjM1NDhiNDBjMjBhOGY4YjMyNGI0OTgxMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-24T00:27:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-24T00:27:19Z"}, "message": "basic_string.tcc (insert(size_type, const _CharT*, size_type __n)): Fix length_error check.\n\n2004-01-23  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.tcc (insert(size_type,\n\tconst _CharT*, size_type __n)): Fix length_error check.\n\t(replace(size_type, size_type, const _CharT*, size_type):\n\tDitto; call _M_replace_safe.\n\t(_M_replace_aux(size_type, size_type, size_type, _CharT):\n\tFix length_error check.\n\t(_M_replace(iterator, iterator, _InputIterator,\n\t_InputIterator)): Ditto, tweak.\n\t(_M_replace_safe(size_type, size_type, const _CharT*,\n\tsize_type)): Remove length_error check.\n\n\t* include/bits/basic_string.tcc (append(const basic_string&),\n\tappend(const basic_string&, size_type, size_type)): Tweak\n\tcomment.\n\n\t* include/bits/basic_string.tcc (copy(_CharT*, size_type,\n\tsize_type)): If __n == 0 don't call traits::copy.\n\nFrom-SVN: r76476", "tree": {"sha": "b177e0b4f463c6e528ec70ab9f678a7e3cf00115", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b177e0b4f463c6e528ec70ab9f678a7e3cf00115"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/251804e635b396f63548b40c20a8f8b324b49813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/251804e635b396f63548b40c20a8f8b324b49813", "html_url": "https://github.com/Rust-GCC/gccrs/commit/251804e635b396f63548b40c20a8f8b324b49813", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/251804e635b396f63548b40c20a8f8b324b49813/comments", "author": null, "committer": null, "parents": [{"sha": "fa2f03062ceea0c62d4b1f09bc0bdb5067d52c27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa2f03062ceea0c62d4b1f09bc0bdb5067d52c27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa2f03062ceea0c62d4b1f09bc0bdb5067d52c27"}], "stats": {"total": 57, "additions": 38, "deletions": 19}, "files": [{"sha": "19a35352341b1d635f545cc3f4508b1bd63232cf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251804e635b396f63548b40c20a8f8b324b49813/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251804e635b396f63548b40c20a8f8b324b49813/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=251804e635b396f63548b40c20a8f8b324b49813", "patch": "@@ -1,3 +1,23 @@\n+2004-01-23  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.tcc (insert(size_type,\n+\tconst _CharT*, size_type __n)): Fix length_error check.\n+\t(replace(size_type, size_type, const _CharT*, size_type):\n+\tDitto; call _M_replace_safe.\n+\t(_M_replace_aux(size_type, size_type, size_type, _CharT):\n+\tFix length_error check.\n+\t(_M_replace(iterator, iterator, _InputIterator,\n+\t_InputIterator)): Ditto, tweak.\n+\t(_M_replace_safe(size_type, size_type, const _CharT*,\n+\tsize_type)): Remove length_error check.\n+\n+\t* include/bits/basic_string.tcc (append(const basic_string&),\n+\tappend(const basic_string&, size_type, size_type)): Tweak\n+\tcomment.\n+\n+\t* include/bits/basic_string.tcc (copy(_CharT*, size_type,\n+\tsize_type)): If __n == 0 don't call traits::copy.\n+\n 2004-01-23  Stefan Olsson  <stefan@snon.net>\n \n \t* include/ext/mt_allocator.h: Reduce lock contention."}, {"sha": "14f58c3c375e9c8eb5019c9a3081a6190c8e65b7", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/251804e635b396f63548b40c20a8f8b324b49813/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/251804e635b396f63548b40c20a8f8b324b49813/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=251804e635b396f63548b40c20a8f8b324b49813", "patch": "@@ -320,8 +320,8 @@ namespace std\n      {\n        __glibcxx_requires_string_len(__s, __n);\n        __pos = _M_check(__pos, \"basic_string::insert\");\n-       if (this->size() > this->max_size() - __n)\n-         __throw_length_error(\"basic_string::insert\");\n+       if (this->max_size() - this->size() < __n)\n+\t __throw_length_error(\"basic_string::insert\");\n        if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n            || less<const _CharT*>()(_M_data() + this->size(), __s))\n          return _M_replace_safe(__pos, size_type(0), __s, __n);\n@@ -356,15 +356,17 @@ namespace std\n        __glibcxx_requires_string_len(__s, __n2);\n        __pos = _M_check(__pos, \"basic_string::replace\");\n        __n1 = _M_limit(__pos, __n1);\n-       if (this->size() - __n1 > this->max_size() - __n2)\n+       if (this->max_size() - (this->size() - __n1) < __n2)\n          __throw_length_error(\"basic_string::replace\");\n        if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n-           || less<const _CharT*>()(_M_data() + this->size(), __s))\n+\t   || less<const _CharT*>()(_M_data() + this->size(), __s))\n          return _M_replace_safe(__pos, __n1, __s, __n2);\n-       // Todo: optimized in-place replace.\n        else\n-\t return _M_replace(_M_ibegin() + __pos, _M_ibegin() + __pos + __n1,\n-\t\t\t   __s, __s + __n2);\n+\t {\n+\t   // Todo: optimized in-place replace.\t   \n+\t   const basic_string __tmp(__s, __n2);\n+\t   return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);\n+\t }\n      }\n   \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -609,7 +611,7 @@ namespace std\n     _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,\n \t\t   _CharT __c)\n     {\n-      if (this->size() - __n1 > this->max_size() - __n2)\n+      if (this->max_size() - (this->size() - __n1) < __n2)\n \t__throw_length_error(\"basic_string::_M_replace_aux\");\n       _M_mutate(__pos1, __n1, __n2);\n       if (__n2)\n@@ -627,7 +629,10 @@ namespace std\n \t\t _InputIterator __k2)\n       {\n \tconst basic_string __s(__k1, __k2);\n-\treturn _M_replace_safe(__i1 - _M_ibegin(), __i2 - __i1, __s._M_data(),\n+\tconst size_type __n1 = __i2 - __i1;\n+\tif (this->max_size() - (this->size() - __n1) < __s.size())\n+\t  __throw_length_error(\"basic_string::_M_replace\");\n+\treturn _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),\n \t\t\t       __s.size());\n       }\n \n@@ -639,8 +644,6 @@ namespace std\n     _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,\n \t\t    size_type __n2)\n     {\n-      if (this->size() - __n1 > this->max_size() - __n2)\n-\t__throw_length_error(\"basic_string::_M_replace_safe\");\n       _M_mutate(__pos1, __n1, __n2);\n       if (__n2)\n \ttraits_type::copy(_M_data() + __pos1, __s, __n2);\n@@ -665,7 +668,7 @@ namespace std\n     {\n       // Iff appending itself, string needs to pre-reserve the\n       // correct size so that _M_mutate does not clobber the\n-      // iterators formed here.\n+      // pointer __str._M_data() formed here.\n       const size_type __size = __str.size();\n       const size_type __len = __size + this->size();\n       if (__len > this->capacity())\n@@ -681,7 +684,7 @@ namespace std\n     {\n       // Iff appending itself, string needs to pre-reserve the\n       // correct size so that _M_mutate does not clobber the\n-      // iterators formed here.\n+      // pointer __str._M_data() formed here.\n       __pos = __str._M_check(__pos, \"basic_string::append\");\n       __n = __str._M_limit(__pos, __n);\n       const size_type __len = __n + this->size();\n@@ -740,10 +743,9 @@ namespace std\n     {\n       __pos = _M_check(__pos, \"basic_string::copy\");\n       __n = _M_limit(__pos, __n);\n-\n       __glibcxx_requires_string_len(__s, __n);\n-      \n-      traits_type::copy(__s, _M_data() + __pos, __n);\n+      if (__n)\n+\ttraits_type::copy(__s, _M_data() + __pos, __n);\n       // 21.3.5.7 par 3: do not append null.  (good.)\n       return __n;\n     }\n@@ -782,7 +784,6 @@ namespace std\n       return __ret;\n     }\n \n-\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n@@ -963,7 +964,6 @@ namespace std\n       return __r;\n     }\n \n-\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     int\n     basic_string<_CharT, _Traits, _Alloc>::\n@@ -979,7 +979,6 @@ namespace std\n       return __r;\n     }\n \n-\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     int\n     basic_string <_CharT, _Traits, _Alloc>::"}]}