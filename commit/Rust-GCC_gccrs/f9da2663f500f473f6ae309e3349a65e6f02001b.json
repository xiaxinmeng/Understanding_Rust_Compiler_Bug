{"sha": "f9da2663f500f473f6ae309e3349a65e6f02001b", "node_id": "C_kwDOANBUbNoAKGY5ZGEyNjYzZjUwMGY0NzNmNmFlMzA5ZTMzNDlhNjVlNmYwMjAwMWI", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-18T06:36:13Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-18T06:36:13Z"}, "message": "Add UNSPEC_MASKOP to kupck<mode> instructions in sse.md on x86.\n\nThis AVX512 specific patch to sse.md is split out from an earlier patch:\nhttps://gcc.gnu.org/pipermail/gcc-patches/2022-June/596199.html\n\nThe new splitters proposed in that patch interfere with AVX512's\nkunpckdq instruction which is defined as identical RTL,\nDW:DI = (HI:SI<<32)|zero_extend(LO:SI).  To distinguish these,\nand avoid AVX512 mask registers accidentally being (ab)used by reload\nto perform SImode scalar shifts, this patch adds the explicit\n(unspec UNSPEC_MASKOP) to the unpack mask operations, which matches\nwhat sse.md does for the other mask specific (logic) operations.\n\n2022-07-18  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/sse.md (kunpckhi): Add UNSPEC_MASKOP unspec.\n\t(kunpcksi): Likewise, add UNSPEC_MASKOP unspec.\n\t(kunpckdi): Likewise, add UNSPEC_MASKOP unspec.\n\t(vec_pack_trunc_qi): Update to specify the now required\n\tUNSPEC_MASKOP unspec.\n\t(vec_pack_trunc_<mode>): Likewise.", "tree": {"sha": "91ced4d16705e611d473066a8105cccd5b687290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91ced4d16705e611d473066a8105cccd5b687290"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9da2663f500f473f6ae309e3349a65e6f02001b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9da2663f500f473f6ae309e3349a65e6f02001b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9da2663f500f473f6ae309e3349a65e6f02001b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9da2663f500f473f6ae309e3349a65e6f02001b/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d7071776e039d9eedf468636dcd942cb4621199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d7071776e039d9eedf468636dcd942cb4621199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d7071776e039d9eedf468636dcd942cb4621199"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "14d12d16c34f0b0948132ccd1913732237f45442", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9da2663f500f473f6ae309e3349a65e6f02001b/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9da2663f500f473f6ae309e3349a65e6f02001b/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f9da2663f500f473f6ae309e3349a65e6f02001b", "patch": "@@ -2068,7 +2068,8 @@\n \t  (ashift:HI\n \t    (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"k\"))\n \t    (const_int 8))\n-\t  (zero_extend:HI (match_operand:QI 2 \"register_operand\" \"k\"))))]\n+\t  (zero_extend:HI (match_operand:QI 2 \"register_operand\" \"k\"))))\n+   (unspec [(const_int 0)] UNSPEC_MASKOP)]\n   \"TARGET_AVX512F\"\n   \"kunpckbw\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"mode\" \"HI\")\n@@ -2081,7 +2082,8 @@\n \t  (ashift:SI\n \t    (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"k\"))\n \t    (const_int 16))\n-\t  (zero_extend:SI (match_operand:HI 2 \"register_operand\" \"k\"))))]\n+\t  (zero_extend:SI (match_operand:HI 2 \"register_operand\" \"k\"))))\n+   (unspec [(const_int 0)] UNSPEC_MASKOP)]\n   \"TARGET_AVX512BW\"\n   \"kunpckwd\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"mode\" \"SI\")])\n@@ -2092,7 +2094,8 @@\n \t  (ashift:DI\n \t    (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"k\"))\n \t    (const_int 32))\n-\t  (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"k\"))))]\n+\t  (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"k\"))))\n+   (unspec [(const_int 0)] UNSPEC_MASKOP)]\n   \"TARGET_AVX512BW\"\n   \"kunpckdq\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"mode\" \"DI\")])\n@@ -17419,21 +17422,26 @@\n })\n \n (define_expand \"vec_pack_trunc_qi\"\n-  [(set (match_operand:HI 0 \"register_operand\")\n-\t(ior:HI (ashift:HI (zero_extend:HI (match_operand:QI 2 \"register_operand\"))\n-                           (const_int 8))\n-\t\t(zero_extend:HI (match_operand:QI 1 \"register_operand\"))))]\n+  [(parallel\n+    [(set (match_operand:HI 0 \"register_operand\")\n+\t(ior:HI\n+\t   (ashift:HI (zero_extend:HI (match_operand:QI 2 \"register_operand\"))\n+\t\t      (const_int 8))\n+\t   (zero_extend:HI (match_operand:QI 1 \"register_operand\"))))\n+     (unspec [(const_int 0)] UNSPEC_MASKOP)])]\n   \"TARGET_AVX512F\")\n \n (define_expand \"vec_pack_trunc_<mode>\"\n-  [(set (match_operand:<DOUBLEMASKMODE> 0 \"register_operand\")\n-\t(ior:<DOUBLEMASKMODE>\n-\t  (ashift:<DOUBLEMASKMODE>\n+  [(parallel\n+    [(set (match_operand:<DOUBLEMASKMODE> 0 \"register_operand\")\n+\t  (ior:<DOUBLEMASKMODE>\n+\t    (ashift:<DOUBLEMASKMODE>\n+\t      (zero_extend:<DOUBLEMASKMODE>\n+\t        (match_operand:SWI24 2 \"register_operand\"))\n+\t      (match_dup 3))\n \t    (zero_extend:<DOUBLEMASKMODE>\n-\t      (match_operand:SWI24 2 \"register_operand\"))\n-\t    (match_dup 3))\n-\t  (zero_extend:<DOUBLEMASKMODE>\n-\t    (match_operand:SWI24 1 \"register_operand\"))))]\n+\t      (match_operand:SWI24 1 \"register_operand\"))))\n+     (unspec [(const_int 0)] UNSPEC_MASKOP)])]\n   \"TARGET_AVX512BW\"\n {\n   operands[3] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode));"}]}