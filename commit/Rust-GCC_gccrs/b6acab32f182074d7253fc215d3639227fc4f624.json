{"sha": "b6acab32f182074d7253fc215d3639227fc4f624", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZhY2FiMzJmMTgyMDc0ZDcyNTNmYzIxNWQzNjM5MjI3ZmM0ZjYyNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-09-14T00:52:41Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-09-14T00:52:41Z"}, "message": "Makefile.in (predict.o): Depend on tree-scalar-evolution.h\n\n\n\n\t* Makefile.in (predict.o): Depend on tree-scalar-evolution.h\n\t* predict.c: Include tree-scalar-evolution.h and cfgloop.h\n\t(predict_loops): Use number_of_iterations_exit to predict\n\tnumber of iterations on trees.\n\nFrom-SVN: r87473", "tree": {"sha": "6c9fdd3e642a19ea5b08282b731c11537135c7af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c9fdd3e642a19ea5b08282b731c11537135c7af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6acab32f182074d7253fc215d3639227fc4f624", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6acab32f182074d7253fc215d3639227fc4f624", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6acab32f182074d7253fc215d3639227fc4f624", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6acab32f182074d7253fc215d3639227fc4f624/comments", "author": null, "committer": null, "parents": [{"sha": "fa9be75f70b9efc043818ee110747a34b0a7bc4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa9be75f70b9efc043818ee110747a34b0a7bc4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa9be75f70b9efc043818ee110747a34b0a7bc4f"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "8e52c7569bf65bfcd8f632e191c8fe4e401a1450", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6acab32f182074d7253fc215d3639227fc4f624/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6acab32f182074d7253fc215d3639227fc4f624/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6acab32f182074d7253fc215d3639227fc4f624", "patch": "@@ -1,3 +1,10 @@\n+2004-09-14  Jan Hubicka  <jh@suse.cz>\n+\n+\t* Makefile.in (predict.o): Depend on tree-scalar-evolution.h\n+\t* predict.c: Include tree-scalar-evolution.h and cfgloop.h\n+\t(predict_loops): Use number_of_iterations_exit to predict\n+\tnumber of iterations on trees.\n+\n 2004-09-13  Dale Johannesen  <dalej@apple.com>\n \n \tPR 17408"}, {"sha": "aa45b739796417d61201c42413a336fe8366595f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6acab32f182074d7253fc215d3639227fc4f624/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6acab32f182074d7253fc215d3639227fc4f624/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=b6acab32f182074d7253fc215d3639227fc4f624", "patch": "@@ -2139,7 +2139,7 @@ sreal.o: sreal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) sreal.h\n predict.o: predict.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    $(FLAGS_H) insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h \\\n    $(RECOG_H) function.h except.h $(EXPR_H) $(TM_P_H) $(PREDICT_H) sreal.h \\\n-   $(PARAMS_H) $(TARGET_H) $(CFGLOOP_H) $(COVERAGE_H)\n+   $(PARAMS_H) $(TARGET_H) $(CFGLOOP_H) $(COVERAGE_H) tree-scalar-evolution.h\n lists.o: lists.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) toplev.h $(RTL_H) $(GGC_H)\n bb-reorder.o : bb-reorder.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(BASIC_BLOCK_H) $(FLAGS_H) $(TIMEVAR_H) output.h $(CFGLAYOUT_H) $(FIBHEAP_H) \\"}, {"sha": "c19ccbe59ebcfa8ffc4e8e757a9cfcbf05edda1b", "filename": "gcc/predict.c", "status": "modified", "additions": 49, "deletions": 5, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6acab32f182074d7253fc215d3639227fc4f624/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6acab32f182074d7253fc215d3639227fc4f624/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=b6acab32f182074d7253fc215d3639227fc4f624", "patch": "@@ -58,6 +58,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tree-dump.h\"\n #include \"tree-pass.h\"\n #include \"timevar.h\"\n+#include \"tree-scalar-evolution.h\"\n+#include \"cfgloop.h\"\n \n /* real constants: 0, 1, 1-1/REG_BR_PROB_BASE, REG_BR_PROB_BASE,\n \t\t   1/REG_BR_PROB_BASE, 0.5, BB_FREQ_MAX.  */\n@@ -552,13 +554,16 @@ combine_predictions_for_bb (FILE *file, basic_block bb)\n }\n \n /* Predict edge probabilities by exploiting loop structure.\n-   When SIMPLELOOPS is set, attempt to count number of iterations by analyzing\n-   RTL.  */\n+   When RTLSIMPLELOOPS is set, attempt to count number of iterations by analyzing\n+   RTL otherwise use tree based approach.  */\n static void\n-predict_loops (struct loops *loops_info, bool simpleloops)\n+predict_loops (struct loops *loops_info, bool rtlsimpleloops)\n {\n   unsigned i;\n \n+  if (!rtlsimpleloops)\n+    scev_initialize (loops_info);\n+\n   /* Try to predict out blocks in a loop that are not part of a\n      natural loop.  */\n   for (i = 1; i < loops_info->num; i++)\n@@ -573,7 +578,7 @@ predict_loops (struct loops *loops_info, bool simpleloops)\n       flow_loop_scan (loop, LOOP_EXIT_EDGES);\n       exits = loop->num_exits;\n \n-      if (simpleloops)\n+      if (rtlsimpleloops)\n \t{\n \t  iv_analysis_loop_init (loop);\n \t  find_simple_exit (loop, &desc);\n@@ -595,6 +600,42 @@ predict_loops (struct loops *loops_info, bool simpleloops)\n \t\t\t    prob);\n \t    }\n \t}\n+      else\n+\t{\n+\t  edge *exits;\n+\t  unsigned j, n_exits;\n+\t  struct tree_niter_desc niter_desc;\n+\n+\t  exits = get_loop_exit_edges (loop, &n_exits);\n+\t  for (j = 0; j < n_exits; j++)\n+\t    {\n+\t      tree niter = NULL;\n+\n+\t      if (number_of_iterations_exit (loop, exits[j], &niter_desc))\n+\t\tniter = niter_desc.niter;\n+\t      if (!niter || TREE_CODE (niter_desc.niter) != INTEGER_CST)\n+\t        niter = loop_niter_by_eval (loop, exits[j]);\n+\n+\t      if (TREE_CODE (niter) == INTEGER_CST)\n+\t\t{\n+\t\t  int probability;\n+\t\t  if (host_integerp (niter, 1)\n+\t\t      && tree_int_cst_lt (niter,\n+\t\t\t\t          build_int_cstu (NULL_TREE,\n+\t\t\t\t\t\t       REG_BR_PROB_BASE - 1)))\n+\t\t    {\n+\t\t      HOST_WIDE_INT nitercst = tree_low_cst (niter, 1) + 1;\n+\t\t      probability = (REG_BR_PROB_BASE + nitercst / 2) / nitercst;\n+\t\t    }\n+\t\t  else\n+\t\t    probability = 1;\n+\n+\t\t  predict_edge (exits[j], PRED_LOOP_ITERATIONS, probability);\n+\t\t}\n+\t    }\n+\n+\t  free (exits);\n+\t}\n \n       bbs = get_loop_body (loop);\n \n@@ -609,7 +650,7 @@ predict_loops (struct loops *loops_info, bool simpleloops)\n \t     statements construct loops via \"non-loop\" constructs\n \t     in the source language and are better to be handled\n \t     separately.  */\n-\t  if ((simpleloops && !can_predict_insn_p (BB_END (bb)))\n+\t  if ((rtlsimpleloops && !can_predict_insn_p (BB_END (bb)))\n \t      || predicted_by_p (bb, PRED_CONTINUE))\n \t    continue;\n \n@@ -639,6 +680,9 @@ predict_loops (struct loops *loops_info, bool simpleloops)\n       /* Free basic blocks from get_loop_body.  */\n       free (bbs);\n     }\n+\n+  if (!rtlsimpleloops)\n+    scev_reset ();\n }\n \n /* Attempt to predict probabilities of BB outgoing edges using local"}]}