{"sha": "66edf32a6fd51d8ad5815e5d995421f037dadadc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZlZGYzMmE2ZmQ1MWQ4YWQ1ODE1ZTVkOTk1NDIxZjAzN2RhZGFkYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-05-30T22:07:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-05-30T22:07:23Z"}, "message": "re PR c++/53356 (ICE in verify_gimple_stmt, at tree-cfg.c:4258)\n\n\tPR c++/53356\n\t* tree.c (stabilize_init): Handle stabilizing a TARGET_EXPR\n\trepresenting a bitwise copy of a glvalue.\n\nFrom-SVN: r188029", "tree": {"sha": "d1c3613ebc8501879f700da9fe979baaf912a1dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1c3613ebc8501879f700da9fe979baaf912a1dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66edf32a6fd51d8ad5815e5d995421f037dadadc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66edf32a6fd51d8ad5815e5d995421f037dadadc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66edf32a6fd51d8ad5815e5d995421f037dadadc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66edf32a6fd51d8ad5815e5d995421f037dadadc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "989e6706f1077a333b515ffd1abc8ab73a016562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/989e6706f1077a333b515ffd1abc8ab73a016562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/989e6706f1077a333b515ffd1abc8ab73a016562"}], "stats": {"total": 80, "additions": 63, "deletions": 17}, "files": [{"sha": "2dcdb770ea34b7011934fba8152dff1667670252", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66edf32a6fd51d8ad5815e5d995421f037dadadc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66edf32a6fd51d8ad5815e5d995421f037dadadc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=66edf32a6fd51d8ad5815e5d995421f037dadadc", "patch": "@@ -1,5 +1,9 @@\n 2012-05-30  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/53356\n+\t* tree.c (stabilize_init): Handle stabilizing a TARGET_EXPR\n+\trepresenting a bitwise copy of a glvalue.\n+\n \t* tree.c (stabilize_expr): Tweak logic.\n \n \tPR c++/53356"}, {"sha": "2b541cd5bd5616121b7619cb123caab588c505e6", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66edf32a6fd51d8ad5815e5d995421f037dadadc/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66edf32a6fd51d8ad5815e5d995421f037dadadc/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=66edf32a6fd51d8ad5815e5d995421f037dadadc", "patch": "@@ -3389,7 +3389,7 @@ stabilize_aggr_init (tree call, tree *initp)\n    takes care not to introduce additional temporaries.\n \n    Returns TRUE iff the expression was successfully pre-evaluated,\n-   i.e., if INIT is now side-effect free, except for, possible, a\n+   i.e., if INIT is now side-effect free, except for, possibly, a\n    single call to a constructor.  */\n \n bool\n@@ -3402,21 +3402,37 @@ stabilize_init (tree init, tree *initp)\n   if (t == error_mark_node || processing_template_decl)\n     return true;\n \n-  if (TREE_CODE (t) == INIT_EXPR\n-      && TREE_CODE (TREE_OPERAND (t, 1)) != TARGET_EXPR\n-      && TREE_CODE (TREE_OPERAND (t, 1)) != CONSTRUCTOR\n-      && TREE_CODE (TREE_OPERAND (t, 1)) != AGGR_INIT_EXPR)\n-    {\n-      TREE_OPERAND (t, 1) = stabilize_expr (TREE_OPERAND (t, 1), initp);\n-      return true;\n-    }\n-\n   if (TREE_CODE (t) == INIT_EXPR)\n     t = TREE_OPERAND (t, 1);\n   if (TREE_CODE (t) == TARGET_EXPR)\n     t = TARGET_EXPR_INITIAL (t);\n-  if (TREE_CODE (t) == COMPOUND_EXPR)\n-    t = expr_last (t);\n+\n+  /* If the RHS can be stabilized without breaking copy elision, stabilize\n+     it.  We specifically don't stabilize class prvalues here because that\n+     would mean an extra copy, but they might be stabilized below.  */\n+  if (TREE_CODE (init) == INIT_EXPR\n+      && TREE_CODE (t) != CONSTRUCTOR\n+      && TREE_CODE (t) != AGGR_INIT_EXPR\n+      && (SCALAR_TYPE_P (TREE_TYPE (t))\n+\t  || lvalue_or_rvalue_with_address_p (t)))\n+    {\n+      TREE_OPERAND (init, 1) = stabilize_expr (t, initp);\n+      return true;\n+    }\n+\n+  if (TREE_CODE (t) == COMPOUND_EXPR\n+      && TREE_CODE (init) == INIT_EXPR)\n+    {\n+      tree last = expr_last (t);\n+      /* Handle stabilizing the EMPTY_CLASS_EXPR pattern.  */\n+      if (!TREE_SIDE_EFFECTS (last))\n+\t{\n+\t  *initp = t;\n+\t  TREE_OPERAND (init, 1) = last;\n+\t  return true;\n+\t}\n+    }\n+\n   if (TREE_CODE (t) == CONSTRUCTOR)\n     {\n       /* Aggregate initialization: stabilize each of the field\n@@ -3439,11 +3455,6 @@ stabilize_init (tree init, tree *initp)\n       return good;\n     }\n \n-  /* If the initializer is a COND_EXPR, we can't preevaluate\n-     anything.  */\n-  if (TREE_CODE (t) == COND_EXPR)\n-    return false;\n-\n   if (TREE_CODE (t) == CALL_EXPR)\n     {\n       stabilize_call (t, initp);"}, {"sha": "44f71cb6ff9c2be0485a8ae85b4e748159b6c5a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66edf32a6fd51d8ad5815e5d995421f037dadadc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66edf32a6fd51d8ad5815e5d995421f037dadadc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=66edf32a6fd51d8ad5815e5d995421f037dadadc", "patch": "@@ -1,3 +1,9 @@\n+2012-05-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53356\n+\t* g++.dg/init/new34.C: New.\n+\t* g++.dg/tree-ssa/stabilize1.C: New.\n+\n 2012-05-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/53356"}, {"sha": "9e67eb34174faf07ffbba806c0445abb218670ac", "filename": "gcc/testsuite/g++.dg/init/new34.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66edf32a6fd51d8ad5815e5d995421f037dadadc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66edf32a6fd51d8ad5815e5d995421f037dadadc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew34.C?ref=66edf32a6fd51d8ad5815e5d995421f037dadadc", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/53356\n+\n+struct A { A(); ~A(); };\n+\n+struct B {\n+    operator const A () const;\n+};\n+\n+A* cause_ICE() {\n+  return new A((A(),A()));\n+}"}, {"sha": "2fe723c3aae0fbc84170cd28f38b07d9a28905c3", "filename": "gcc/testsuite/g++.dg/tree-ssa/stabilize1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66edf32a6fd51d8ad5815e5d995421f037dadadc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fstabilize1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66edf32a6fd51d8ad5815e5d995421f037dadadc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fstabilize1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fstabilize1.C?ref=66edf32a6fd51d8ad5815e5d995421f037dadadc", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/53356\n+// { dg-options \"-fdump-tree-gimple\" }\n+// { dg-final { scan-tree-dump-not \"= 0\" \"gimple\" } }\n+// { dg-final { cleanup-tree-dump \"gimple\" } }\n+\n+class A {};\n+\n+struct B {\n+    operator const A &() const;\n+};\n+\n+A* cause_ICE() {\n+    return new A(B());\n+}"}]}