{"sha": "bed9bae4f00a0a385e68fd81405320d1f3ad0a92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVkOWJhZTRmMDBhMGEzODVlNjhmZDgxNDA1MzIwZDFmM2FkMGE5Mg==", "commit": {"author": {"name": "Alex Velenko", "email": "Alex.Velenko@arm.com", "date": "2013-10-09T11:59:38Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2013-10-09T11:59:38Z"}, "message": "[AArch64] Implement vadd_f64 and vsub_f64 ADVSimd intrinsics.\n\nFrom-SVN: r203313", "tree": {"sha": "38f41419f8689bfc3c4a1a277dbef1ef638a381b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38f41419f8689bfc3c4a1a277dbef1ef638a381b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bed9bae4f00a0a385e68fd81405320d1f3ad0a92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bed9bae4f00a0a385e68fd81405320d1f3ad0a92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bed9bae4f00a0a385e68fd81405320d1f3ad0a92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bed9bae4f00a0a385e68fd81405320d1f3ad0a92/comments", "author": null, "committer": null, "parents": [{"sha": "7f3d8b194850ce14d96d9d1a68fdb41e1a19ef70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f3d8b194850ce14d96d9d1a68fdb41e1a19ef70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f3d8b194850ce14d96d9d1a68fdb41e1a19ef70"}], "stats": {"total": 251, "additions": 251, "deletions": 0}, "files": [{"sha": "4248751cdbfc5ec3e9b7c14fcb5c0e60fbbc1e7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed9bae4f00a0a385e68fd81405320d1f3ad0a92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed9bae4f00a0a385e68fd81405320d1f3ad0a92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bed9bae4f00a0a385e68fd81405320d1f3ad0a92", "patch": "@@ -1,3 +1,7 @@\n+2013-10-09  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vadd_f64, vsub_f64): Implementation added.\n+\n 2013-10-09  Alex Velenko  <Alex.Velenko@arm.com>\n \n \t* config/aarch64/arm_neon.h (vdiv_f64): Added."}, {"sha": "db9bf28227e87072b48f5dca8835be8007c6b93d", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed9bae4f00a0a385e68fd81405320d1f3ad0a92/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed9bae4f00a0a385e68fd81405320d1f3ad0a92/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=bed9bae4f00a0a385e68fd81405320d1f3ad0a92", "patch": "@@ -634,6 +634,12 @@ vadd_f32 (float32x2_t __a, float32x2_t __b)\n   return __a + __b;\n }\n \n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vadd_f64 (float64x1_t __a, float64x1_t __b)\n+{\n+  return __a + __b;\n+}\n+\n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vadd_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n@@ -1830,6 +1836,12 @@ vsub_f32 (float32x2_t __a, float32x2_t __b)\n   return __a - __b;\n }\n \n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vsub_f64 (float64x1_t __a, float64x1_t __b)\n+{\n+  return __a - __b;\n+}\n+\n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vsub_u8 (uint8x8_t __a, uint8x8_t __b)\n {"}, {"sha": "f15911bd280df0fc0d0089180a84516e6c245c95", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed9bae4f00a0a385e68fd81405320d1f3ad0a92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed9bae4f00a0a385e68fd81405320d1f3ad0a92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bed9bae4f00a0a385e68fd81405320d1f3ad0a92", "patch": "@@ -1,3 +1,8 @@\n+2013-10-09  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* gcc.target/aarch64/vadd_f64.c: New testcase.\n+\t* gcc.target/aarch64/vsub_f64.c: New testcase.\n+\n 2013-10-09  Alex Velenko  <Alex.Velenko@arm.com>\n \n \t* gcc.target/aarch64/vdiv_f.c: New testcase."}, {"sha": "c3bf7349597aa9b75e0bc34cfd4cde4dc16b95f3", "filename": "gcc/testsuite/gcc.target/aarch64/vadd_f64.c", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed9bae4f00a0a385e68fd81405320d1f3ad0a92/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvadd_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed9bae4f00a0a385e68fd81405320d1f3ad0a92/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvadd_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvadd_f64.c?ref=bed9bae4f00a0a385e68fd81405320d1f3ad0a92", "patch": "@@ -0,0 +1,114 @@\n+/* Test vadd works correctly.  */\n+/* { dg-do run } */\n+/* { dg-options \"--save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+#define FLT_EPSILON __FLT_EPSILON__\n+#define DBL_EPSILON __DBL_EPSILON__\n+\n+#define TESTA0 0.33333\n+#define TESTA1 -1.7777\n+#define TESTA2 0\n+#define TESTA3 1.23456\n+/* 2^54, double has 53 significand bits\n+   according to Double-precision floating-point format.  */\n+#define TESTA4 18014398509481984\n+#define TESTA5 (1.0 / TESTA4)\n+\n+#define TESTB0 0.66667\n+#define TESTB1 2\n+#define TESTB2 0\n+#define TESTB3 -2\n+#define TESTB4 1.0\n+#define TESTB5 2.0\n+\n+#define ANSW0 1\n+#define ANSW1 0.2223\n+#define ANSW2 0\n+#define ANSW3 -0.76544\n+#define ANSW4 TESTA4\n+#define ANSW5 2.0\n+\n+extern void abort (void);\n+\n+#define EPSILON __DBL_EPSILON__\n+#define ABS(a) __builtin_fabs (a)\n+#define ISNAN(a) __builtin_isnan (a)\n+#define FP_equals(a, b, epsilon)\t\t\t\\\n+  (\t\t\t\t\t\t\t\\\n+   ((a) == (b))\t\t\t\t\t\t\\\n+    || (ISNAN (a) && ISNAN (b))\t\t\t\t\\\n+    || (ABS (a - b) < epsilon)\t\t\t\t\\\n+   )\n+\n+int\n+test_vadd_f64 ()\n+{\n+  float64x1_t a;\n+  float64x1_t b;\n+  float64x1_t c;\n+\n+  a = TESTA0;\n+  b = TESTB0;\n+  c = ANSW0;\n+\n+  a = vadd_f64 (a, b);\n+  if (!FP_equals (a, c, EPSILON))\n+    return 1;\n+\n+  a = TESTA1;\n+  b = TESTB1;\n+  c = ANSW1;\n+\n+  a = vadd_f64 (a, b);\n+  if (!FP_equals (a, c, EPSILON))\n+    return 1;\n+\n+  a = TESTA2;\n+  b = TESTB2;\n+  c = ANSW2;\n+\n+  a = vadd_f64 (a, b);\n+  if (!FP_equals (a, c, EPSILON))\n+    return 1;\n+\n+  a = TESTA3;\n+  b = TESTB3;\n+  c = ANSW3;\n+\n+  a = vadd_f64 (a, b);\n+  if (!FP_equals (a, c, EPSILON))\n+    return 1;\n+\n+  a = TESTA4;\n+  b = TESTB4;\n+  c = ANSW4;\n+\n+  a = vadd_f64 (a, b);\n+  if (!FP_equals (a, c, EPSILON))\n+    return 1;\n+\n+  a = TESTA5;\n+  b = TESTB5;\n+  c = ANSW5;\n+\n+  a = vadd_f64 (a, b);\n+  if (!FP_equals (a, c, EPSILON))\n+    return 1;\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"fadd\\\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" 6 } } */\n+\n+int\n+main (int argc, char **argv)\n+{\n+  if (test_vadd_f64 ())\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "abf4fc42d49dc695f435b1e0f331737c8e9367b0", "filename": "gcc/testsuite/gcc.target/aarch64/vsub_f64.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed9bae4f00a0a385e68fd81405320d1f3ad0a92/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvsub_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed9bae4f00a0a385e68fd81405320d1f3ad0a92/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvsub_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvsub_f64.c?ref=bed9bae4f00a0a385e68fd81405320d1f3ad0a92", "patch": "@@ -0,0 +1,116 @@\n+/* Test vsub works correctly.  */\n+/* { dg-do run } */\n+/* { dg-options \"--save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+#define FLT_EPSILON __FLT_EPSILON__\n+#define DBL_EPSILON __DBL_EPSILON__\n+\n+#define TESTA0 1\n+#define TESTA1 0.2223\n+#define TESTA2 0\n+#define TESTA3 -0.76544\n+/* 2^54, double has 53 significand bits\n+   according to Double-precision floating-point format.  */\n+#define TESTA4 18014398509481984\n+#define TESTA5 2.0\n+\n+#define TESTB0 0.66667\n+#define TESTB1 2\n+#define TESTB2 0\n+#define TESTB3 -2\n+#define TESTB4 1.0\n+#define TESTB5 (1.0 / TESTA4)\n+\n+#define ANSW0 0.33333\n+#define ANSW1 -1.7777\n+#define ANSW2 0\n+#define ANSW3 1.23456\n+#define ANSW4 TESTA4\n+#define ANSW5 2.0\n+\n+extern void abort (void);\n+\n+#define EPSILON __DBL_EPSILON__\n+#define ISNAN(a) __builtin_isnan (a)\n+/* FP_equals is implemented like this to execute subtraction\n+   exectly once during a single test run.  */\n+#define FP_equals(a, b, epsilon)\t\t\\\n+(\t\t\t\t\t\t\\\n+ ((a) == (b))\t\t\t\t\t\\\n+ || (ISNAN (a) && ISNAN (b))\t\t\t\\\n+ || (((a > b) && (a < (b + epsilon)))\t\t\\\n+     || ((b > a) && (b < (a + epsilon))))\t\\\n+)\n+\n+int\n+test_vsub_f64 ()\n+{\n+  float64x1_t a;\n+  float64x1_t b;\n+  float64x1_t c;\n+\n+  a = TESTA0;\n+  b = TESTB0;\n+  c = ANSW0;\n+\n+  a = vsub_f64 (a, b);\n+  if (!FP_equals (a, c, EPSILON))\n+    return 1;\n+\n+  a = TESTA1;\n+  b = TESTB1;\n+  c = ANSW1;\n+\n+  a = vsub_f64 (a, b);\n+  if (!FP_equals (a, c, EPSILON))\n+    return 1;\n+\n+  a = TESTA2;\n+  b = TESTB2;\n+  c = ANSW2;\n+\n+  a = vsub_f64 (a, b);\n+  if (!FP_equals (a, c, EPSILON))\n+    return 1;\n+\n+  a = TESTA3;\n+  b = TESTB3;\n+  c = ANSW3;\n+\n+  a = vsub_f64 (a, b);\n+  if (!FP_equals (a, c, EPSILON))\n+    return 1;\n+\n+  a = TESTA4;\n+  b = TESTB4;\n+  c = ANSW4;\n+\n+  a = vsub_f64 (a, b);\n+  if (!FP_equals (a, c, EPSILON))\n+    return 1;\n+\n+  a = TESTA5;\n+  b = TESTB5;\n+  c = ANSW5;\n+\n+  a = vsub_f64 (a, b);\n+  if (!FP_equals (a, c, EPSILON))\n+    return 1;\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"fsub\\\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" 6 } } */\n+\n+int\n+main (int argc, char **argv)\n+{\n+  if (test_vsub_f64 ())\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}