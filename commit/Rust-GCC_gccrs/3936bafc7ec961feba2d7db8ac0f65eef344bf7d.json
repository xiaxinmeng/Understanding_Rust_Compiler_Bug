{"sha": "3936bafc7ec961feba2d7db8ac0f65eef344bf7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkzNmJhZmM3ZWM5NjFmZWJhMmQ3ZGI4YWMwZjY1ZWVmMzQ0YmY3ZA==", "commit": {"author": {"name": "Yvan Roux", "email": "yvan.roux@linaro.org", "date": "2013-09-25T18:31:13Z"}, "committer": {"name": "Yvan Roux", "email": "yroux@gcc.gnu.org", "date": "2013-09-25T18:31:13Z"}, "message": "rtlanal.c (lsb_bitfield_op_p): New predicate for bitfield operations from the least significant bit.\n\n2013-09-25  Yvan Roux  <yvan.roux@linaro.org>\n\t    Vladimir Makarov  <vmakarov@redhat.com>\n\n\t* rtlanal.c (lsb_bitfield_op_p): New predicate for bitfield operations\n\tfrom the least significant bit.\n\t(strip_address_mutations): Add bitfield operations handling.\n\t(must_be_index_p): Add shifting and rotate operations handling.\n\t(set_address_base): Use must_be_base_p predicate.\n\t(set_address_index):Use must_be_index_p predicate.\n\n\nCo-Authored-By: Vladimir Makarov <vmakarov@redhat.com>\n\nFrom-SVN: r202914", "tree": {"sha": "2dd965841fb730d3c88ceea762be625b15791fcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dd965841fb730d3c88ceea762be625b15791fcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3936bafc7ec961feba2d7db8ac0f65eef344bf7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3936bafc7ec961feba2d7db8ac0f65eef344bf7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3936bafc7ec961feba2d7db8ac0f65eef344bf7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3936bafc7ec961feba2d7db8ac0f65eef344bf7d/comments", "author": {"login": "yroux", "id": 2749479, "node_id": "MDQ6VXNlcjI3NDk0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2749479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yroux", "html_url": "https://github.com/yroux", "followers_url": "https://api.github.com/users/yroux/followers", "following_url": "https://api.github.com/users/yroux/following{/other_user}", "gists_url": "https://api.github.com/users/yroux/gists{/gist_id}", "starred_url": "https://api.github.com/users/yroux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yroux/subscriptions", "organizations_url": "https://api.github.com/users/yroux/orgs", "repos_url": "https://api.github.com/users/yroux/repos", "events_url": "https://api.github.com/users/yroux/events{/privacy}", "received_events_url": "https://api.github.com/users/yroux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b86f6e9e46f47fca000ba531689e4e64ae7366ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b86f6e9e46f47fca000ba531689e4e64ae7366ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b86f6e9e46f47fca000ba531689e4e64ae7366ef"}], "stats": {"total": 46, "additions": 41, "deletions": 5}, "files": [{"sha": "360a8f12e8c37cbd1204532d43725b3e0586affc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3936bafc7ec961feba2d7db8ac0f65eef344bf7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3936bafc7ec961feba2d7db8ac0f65eef344bf7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3936bafc7ec961feba2d7db8ac0f65eef344bf7d", "patch": "@@ -1,3 +1,13 @@\n+2013-09-25  Yvan Roux  <yvan.roux@linaro.org>\n+\t    Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\t* rtlanal.c (lsb_bitfield_op_p): New predicate for bitfield operations\n+\tfrom the least significant bit.\n+\t(strip_address_mutations): Add bitfield operations handling.\n+\t(must_be_index_p): Add shifting and rotate operations handling.\n+\t(set_address_base): Use must_be_base_p predicate.\n+\t(set_address_index):Use must_be_index_p predicate.\n+\n 2013-09-25  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Sergey Lega  <sergey.s.lega@intel.com>"}, {"sha": "24cbcd2fcf2dc0a64a3051cecd77460d6fda0214", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3936bafc7ec961feba2d7db8ac0f65eef344bf7d/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3936bafc7ec961feba2d7db8ac0f65eef344bf7d/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=3936bafc7ec961feba2d7db8ac0f65eef344bf7d", "patch": "@@ -5467,12 +5467,29 @@ split_double (rtx value, rtx *first, rtx *second)\n     }\n }\n \n+/* Return true if X is a sign_extract or zero_extract from the least\n+   significant bit.  */\n+\n+static bool\n+lsb_bitfield_op_p (rtx x)\n+{\n+  if (GET_RTX_CLASS (GET_CODE (x)) == RTX_BITFIELD_OPS)\n+    {\n+      enum machine_mode mode = GET_MODE (XEXP (x, 0));\n+      unsigned HOST_WIDE_INT len = INTVAL (XEXP (x, 1));\n+      HOST_WIDE_INT pos = INTVAL (XEXP (x, 2));\n+\n+      return (pos == (BITS_BIG_ENDIAN ? GET_MODE_PRECISION (mode) - len : 0));\n+    }\n+  return false;\n+}\n+\n /* Strip outer address \"mutations\" from LOC and return a pointer to the\n    inner value.  If OUTER_CODE is nonnull, store the code of the innermost\n    stripped expression there.\n \n    \"Mutations\" either convert between modes or apply some kind of\n-   alignment.  */\n+   extension, truncation or alignment.  */\n \n rtx *\n strip_address_mutations (rtx *loc, enum rtx_code *outer_code)\n@@ -5484,6 +5501,10 @@ strip_address_mutations (rtx *loc, enum rtx_code *outer_code)\n \t/* Things like SIGN_EXTEND, ZERO_EXTEND and TRUNCATE can be\n \t   used to convert between pointer sizes.  */\n \tloc = &XEXP (*loc, 0);\n+      else if (lsb_bitfield_op_p (*loc))\n+\t/* A [SIGN|ZERO]_EXTRACT from the least significant bit effectively\n+\t   acts as a combined truncation and extension.  */\n+\tloc = &XEXP (*loc, 0);\n       else if (code == AND && CONST_INT_P (XEXP (*loc, 1)))\n \t/* (and ... (const_int -X)) is used to align to X bytes.  */\n \tloc = &XEXP (*loc, 0);\n@@ -5513,7 +5534,13 @@ must_be_base_p (rtx x)\n static bool\n must_be_index_p (rtx x)\n {\n-  return GET_CODE (x) == MULT || GET_CODE (x) == ASHIFT;\n+  return (GET_CODE (x) == MULT\n+          || GET_CODE (x) == ASHIFT\n+          /* Needed by ARM targets.  */\n+          || GET_CODE (x) == ASHIFTRT\n+          || GET_CODE (x) == LSHIFTRT\n+          || GET_CODE (x) == ROTATE\n+          || GET_CODE (x) == ROTATERT);\n }\n \n /* Set the segment part of address INFO to LOC, given that INNER is the\n@@ -5535,7 +5562,7 @@ set_address_segment (struct address_info *info, rtx *loc, rtx *inner)\n static void\n set_address_base (struct address_info *info, rtx *loc, rtx *inner)\n {\n-  if (GET_CODE (*inner) == LO_SUM)\n+  if (must_be_base_p (*inner))\n     inner = strip_address_mutations (&XEXP (*inner, 0));\n   gcc_checking_assert (REG_P (*inner)\n \t\t       || MEM_P (*inner)\n@@ -5552,8 +5579,7 @@ set_address_base (struct address_info *info, rtx *loc, rtx *inner)\n static void\n set_address_index (struct address_info *info, rtx *loc, rtx *inner)\n {\n-  if ((GET_CODE (*inner) == MULT || GET_CODE (*inner) == ASHIFT)\n-      && CONSTANT_P (XEXP (*inner, 1)))\n+  if (must_be_index_p (*inner) && CONSTANT_P (XEXP (*inner, 1)))\n     inner = strip_address_mutations (&XEXP (*inner, 0));\n   gcc_checking_assert (REG_P (*inner)\n \t\t       || MEM_P (*inner)"}]}