{"sha": "07c86323a199ca15177d99ad6c488b8f5fb5c729", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdjODYzMjNhMTk5Y2ExNTE3N2Q5OWFkNmM0ODhiOGY1ZmI1YzcyOQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-16T14:46:30Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-17T21:41:34Z"}, "message": "analyzer: prevent ICE on isnan (PR 93290)\n\nPR analyzer/93290 reports an ICE on calls to isnan().\nThe root cause is that an UNORDERED_EXPR is passed\nto region_model::eval_condition_without_cm, and there's\na stray gcc_unreachable () in the case where we're comparing\nan svalue against itself.\n\nI attempted a more involved patch that properly handled NaN in general\nbut it seems I've baked the assumption of reflexivity too deeply into\nthe constraint_manager code.\n\nFor now, this patch avoids the ICE and documents the limitation.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93290\n\t* region-model.cc (region_model::eval_condition_without_cm): Avoid\n\tgcc_unreachable for unexpected operations for the case where\n\twe're comparing an svalue against itself.\n\ngcc/ChangeLog\n\t* doc/analyzer.texi (Limitations): Add note about NaN.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93290\n\t* gcc.dg/analyzer/pr93290.c: New test.", "tree": {"sha": "e9da8dfdc507949b6c74aa2df72774704eca663c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9da8dfdc507949b6c74aa2df72774704eca663c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07c86323a199ca15177d99ad6c488b8f5fb5c729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c86323a199ca15177d99ad6c488b8f5fb5c729", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07c86323a199ca15177d99ad6c488b8f5fb5c729", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c86323a199ca15177d99ad6c488b8f5fb5c729/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82033483fd74b1dcedab416d98673e212258498d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82033483fd74b1dcedab416d98673e212258498d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82033483fd74b1dcedab416d98673e212258498d"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "d837e95509ad9cd615c3b82dbf6135527a1bea9f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c86323a199ca15177d99ad6c488b8f5fb5c729/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c86323a199ca15177d99ad6c488b8f5fb5c729/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07c86323a199ca15177d99ad6c488b8f5fb5c729", "patch": "@@ -1,3 +1,7 @@\n+2020-01-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/analyzer.texi (Limitations): Add note about NaN.\n+\n 2020-01-17  Mihail-Calin Ionescu <mihail.ionescu@arm.com>\n \t    Sudakshina Das  <sudi.das@arm.com>\n "}, {"sha": "3e6e21b27408c65c38fada2828304dcd994c0a97", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c86323a199ca15177d99ad6c488b8f5fb5c729/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c86323a199ca15177d99ad6c488b8f5fb5c729/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=07c86323a199ca15177d99ad6c488b8f5fb5c729", "patch": "@@ -1,3 +1,10 @@\n+2020-01-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93290\n+\t* region-model.cc (region_model::eval_condition_without_cm): Avoid\n+\tgcc_unreachable for unexpected operations for the case where\n+\twe're comparing an svalue against itself.\n+\n 2020-01-17  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93281"}, {"sha": "1e0be312e03f0a079414cfc3bfc8fa7c95e27751", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c86323a199ca15177d99ad6c488b8f5fb5c729/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c86323a199ca15177d99ad6c488b8f5fb5c729/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=07c86323a199ca15177d99ad6c488b8f5fb5c729", "patch": "@@ -5189,13 +5189,11 @@ region_model::eval_condition_without_cm (svalue_id lhs_sid,\n     {\n       if (lhs == rhs)\n \t{\n-\t  /* If we have the same svalue, then we have equality.\n+\t  /* If we have the same svalue, then we have equality\n+\t     (apart from NaN-handling).\n \t     TODO: should this definitely be the case for poisoned values?  */\n \t  switch (op)\n \t    {\n-\t    default:\n-\t      gcc_unreachable ();\n-\n \t    case EQ_EXPR:\n \t    case GE_EXPR:\n \t    case LE_EXPR:\n@@ -5205,6 +5203,10 @@ region_model::eval_condition_without_cm (svalue_id lhs_sid,\n \t    case GT_EXPR:\n \t    case LT_EXPR:\n \t      return tristate::TS_FALSE;\n+\n+\t    default:\n+\t      /* For other ops, use the logic below.  */\n+\t      break;\n \t    }\n \t}\n "}, {"sha": "81acdd8998bd805a631e65272ce707036eeb70aa", "filename": "gcc/doc/analyzer.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c86323a199ca15177d99ad6c488b8f5fb5c729/gcc%2Fdoc%2Fanalyzer.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c86323a199ca15177d99ad6c488b8f5fb5c729/gcc%2Fdoc%2Fanalyzer.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fanalyzer.texi?ref=07c86323a199ca15177d99ad6c488b8f5fb5c729", "patch": "@@ -388,6 +388,9 @@ The implementation of call summaries is currently very simplistic.\n @item\n Lack of function pointer analysis\n @item\n+The constraint-handling code assumes reflexivity in some places\n+(that values are equal to themselves), which is not the case for NaN.\n+@item\n The region model code creates lots of little mutable objects at each\n @code{region_model} (and thus per @code{exploded_node}) rather than\n sharing immutable objects and having the mutable state in the"}, {"sha": "95e4e344ee058913c55c73ad70cfab9e93447c60", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c86323a199ca15177d99ad6c488b8f5fb5c729/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c86323a199ca15177d99ad6c488b8f5fb5c729/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07c86323a199ca15177d99ad6c488b8f5fb5c729", "patch": "@@ -1,3 +1,8 @@\n+2020-01-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93290\n+\t* gcc.dg/analyzer/pr93290.c: New test.\n+\n 2020-01-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/92542"}, {"sha": "fa35629d955b0cd58d241e8726612b689070d2b9", "filename": "gcc/testsuite/gcc.dg/analyzer/pr93290.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c86323a199ca15177d99ad6c488b8f5fb5c729/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr93290.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c86323a199ca15177d99ad6c488b8f5fb5c729/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr93290.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr93290.c?ref=07c86323a199ca15177d99ad6c488b8f5fb5c729", "patch": "@@ -0,0 +1,9 @@\n+#include <math.h>\n+\n+int test_1 (void)\n+{\n+  float foo = 42.;\n+  if (isnan (foo))\n+    return 1;\n+  return 0;\n+}"}]}