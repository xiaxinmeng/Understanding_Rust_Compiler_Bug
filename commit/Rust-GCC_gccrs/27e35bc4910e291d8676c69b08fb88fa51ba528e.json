{"sha": "27e35bc4910e291d8676c69b08fb88fa51ba528e", "node_id": "C_kwDOANBUbNoAKDI3ZTM1YmM0OTEwZTI5MWQ4Njc2YzY5YjA4ZmI4OGZhNTFiYTUyOGU", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2022-02-01T23:00:10Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2022-02-02T00:20:04Z"}, "message": "cris: Remove CRIS v32 ACR artefacts\n\nThis is the change to which I alluded to this in r11-220 /\nd0780379c1b6 as \"causes extra register moves in libgcc\".  It has\nunfortunate side-effects due to the change in register-class topology.\nThere's a slight improvement in coremark numbers (< 0.07%) though also\nincrease in code size total (< 0.7%) but looking at the individual\nchanges in functions, it's all-over (-7..+7%).  Looking specifically\nat functions that improved in speed, it's also both plus and minus in\ncode sizes.  It's unworkable to separate improvements from regressions\nfor this case.  I'll follow up with patches to restore the previous\ncode quality, in both size and speed.\n\ngcc:\n\t* config/cris/constraints.md (define_register_constraint \"b\"): Now\n\tGENERAL_REGS.\n\t* config/cris/cris.md (CRIS_ACR_REGNUM): Remove.\n\t* config/cris/cris.h: (reg_class, REG_CLASS_NAMES)\n\t(REG_CLASS_CONTENTS): Remove ACR_REGS, SPEC_ACR_REGS, GENNONACR_REGS,\n\tand SPEC_GENNONACR_REGS.\n\t* config/cris/cris.cc (cris_preferred_reload_class): Don't mention\n\tACR_REGS and return GENERAL_REGS instead of GENNONACR_REGS.", "tree": {"sha": "a9f1de6ca5dd0bc400eb22c87ba9ef99b6a75859", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9f1de6ca5dd0bc400eb22c87ba9ef99b6a75859"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27e35bc4910e291d8676c69b08fb88fa51ba528e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e35bc4910e291d8676c69b08fb88fa51ba528e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27e35bc4910e291d8676c69b08fb88fa51ba528e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27e35bc4910e291d8676c69b08fb88fa51ba528e/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a58401d2e6d31eb8f0e4ded84b3dde28c98ba4da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a58401d2e6d31eb8f0e4ded84b3dde28c98ba4da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a58401d2e6d31eb8f0e4ded84b3dde28c98ba4da"}], "stats": {"total": 40, "additions": 13, "deletions": 27}, "files": [{"sha": "83fab622717df8a54324fc3e6cfbb0df7d1aa567", "filename": "gcc/config/cris/constraints.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e35bc4910e291d8676c69b08fb88fa51ba528e/gcc%2Fconfig%2Fcris%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e35bc4910e291d8676c69b08fb88fa51ba528e/gcc%2Fconfig%2Fcris%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fconstraints.md?ref=27e35bc4910e291d8676c69b08fb88fa51ba528e", "patch": "@@ -18,7 +18,12 @@\n ;; <http://www.gnu.org/licenses/>.\n \n ;; Register constraints.\n-(define_register_constraint \"b\" \"GENNONACR_REGS\"\n+\n+;; Kept for compatibility.  It used to exclude the CRIS v32\n+;; register \"ACR\", which was like GENERAL_REGS except it\n+;; couldn't be used for autoincrement, and intended mainly\n+;; for use in user asm statements.\n+(define_register_constraint \"b\" \"GENERAL_REGS\"\n   \"@internal\")\n \n (define_register_constraint \"h\" \"MOF_REGS\""}, {"sha": "264439c7654a8cfe3022e2b6127b5a3c36cf3b7f", "filename": "gcc/config/cris/cris.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e35bc4910e291d8676c69b08fb88fa51ba528e/gcc%2Fconfig%2Fcris%2Fcris.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e35bc4910e291d8676c69b08fb88fa51ba528e/gcc%2Fconfig%2Fcris%2Fcris.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.cc?ref=27e35bc4910e291d8676c69b08fb88fa51ba528e", "patch": "@@ -1663,13 +1663,12 @@ cris_reload_address_legitimized (rtx x,\n static reg_class_t\n cris_preferred_reload_class (rtx x ATTRIBUTE_UNUSED, reg_class_t rclass)\n {\n-  if (rclass != ACR_REGS\n-      && rclass != MOF_REGS\n+  if (rclass != MOF_REGS\n       && rclass != MOF_SRP_REGS\n       && rclass != SRP_REGS\n       && rclass != CC0_REGS\n       && rclass != SPECIAL_REGS)\n-    return GENNONACR_REGS;\n+    return GENERAL_REGS;\n \n   return rclass;\n }"}, {"sha": "6edfe13d92cc3644d9c7620acb36f5e9528b8d0f", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e35bc4910e291d8676c69b08fb88fa51ba528e/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e35bc4910e291d8676c69b08fb88fa51ba528e/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=27e35bc4910e291d8676c69b08fb88fa51ba528e", "patch": "@@ -436,19 +436,15 @@ extern int cris_cpu_version;\n \n /* Node: Register Classes */\n \n-/* We need a separate register class to handle register allocation for\n-   ACR, since it can't be used for post-increment.\n-\n-   It's not obvious, but having subunions of all movable-between\n+/* It's not obvious, but having subunions of all movable-between\n    register classes does really help register allocation (pre-IRA\n    comment).  */\n enum reg_class\n   {\n     NO_REGS,\n-    ACR_REGS, MOF_REGS, SRP_REGS, CC0_REGS,\n+    MOF_REGS, SRP_REGS, CC0_REGS,\n     MOF_SRP_REGS, SPECIAL_REGS,\n-    SPEC_ACR_REGS, GENNONACR_REGS,\n-    SPEC_GENNONACR_REGS, GENERAL_REGS,\n+    GENERAL_REGS,\n     ALL_REGS,\n     LIM_REG_CLASSES\n   };\n@@ -457,9 +453,8 @@ enum reg_class\n \n #define REG_CLASS_NAMES\t\t\t\t\t\t\\\n   {\"NO_REGS\",\t\t\t\t\t\t\t\\\n-   \"ACR_REGS\", \"MOF_REGS\", \"SRP_REGS\", \"CC0_REGS\",\t\t\\\n+   \"MOF_REGS\", \"SRP_REGS\", \"CC0_REGS\",\t\t\t\t\\\n    \"MOF_SRP_REGS\", \"SPECIAL_REGS\",\t\t\t\t\\\n-   \"SPEC_ACR_REGS\", \"GENNONACR_REGS\", \"SPEC_GENNONACR_REGS\",\t\\\n    \"GENERAL_REGS\", \"ALL_REGS\"}\n \n #define CRIS_SPECIAL_REGS_CONTENTS\t\t\t\t\t\\\n@@ -472,37 +467,25 @@ enum reg_class\n #define REG_CLASS_CONTENTS\t\t\t\\\n   {\t\t\t\t\t\t\\\n    {0},\t\t\t\t\t\t\\\n-   {1 << CRIS_ACR_REGNUM},\t\t\t\\\n    {1 << CRIS_MOF_REGNUM},\t\t\t\\\n    {1 << CRIS_SRP_REGNUM},\t\t\t\\\n    {1 << CRIS_CC0_REGNUM},\t\t\t\\\n    {(1 << CRIS_MOF_REGNUM)\t\t\t\\\n     | (1 << CRIS_SRP_REGNUM)},\t\t\t\\\n    {CRIS_SPECIAL_REGS_CONTENTS},\t\t\\\n-   {CRIS_SPECIAL_REGS_CONTENTS\t\t\t\\\n-    | (1 << CRIS_ACR_REGNUM)},\t\t\t\\\n-   {(0xffff | CRIS_FAKED_REGS_CONTENTS)\t\t\\\n-    & ~(1 << CRIS_ACR_REGNUM)},\t\t\t\\\n-   {(0xffff | CRIS_FAKED_REGS_CONTENTS\t\t\\\n-    | CRIS_SPECIAL_REGS_CONTENTS)\t\t\\\n-    & ~(1 << CRIS_ACR_REGNUM)},\t\t\t\\\n    {0xffff | CRIS_FAKED_REGS_CONTENTS},\t\t\\\n    {0xffff | CRIS_FAKED_REGS_CONTENTS\t\t\\\n     | CRIS_SPECIAL_REGS_CONTENTS}\t\t\\\n   }\n \n #define REGNO_REG_CLASS(REGNO)\t\t\t\\\n-  ((REGNO) == CRIS_ACR_REGNUM ? ACR_REGS :\t\\\n-   (REGNO) == CRIS_MOF_REGNUM ? MOF_REGS :\t\\\n+  ((REGNO) == CRIS_MOF_REGNUM ? MOF_REGS :\t\\\n    (REGNO) == CRIS_SRP_REGNUM ? SRP_REGS :\t\\\n    (REGNO) == CRIS_CC0_REGNUM ? CC0_REGS :\t\\\n    GENERAL_REGS)\n \n #define BASE_REG_CLASS GENERAL_REGS\n \n-#define MODE_CODE_BASE_REG_CLASS(MODE, AS, OCODE, ICODE)\t\\\n-  ((OCODE) != POST_INC ? BASE_REG_CLASS : GENNONACR_REGS)\n-\n #define INDEX_REG_CLASS GENERAL_REGS\n \n /* Since it uses reg_renumber, it is safe only once reg_renumber"}, {"sha": "9d9eb8b7dbbfcc59f047b75bcfc54125f2170fa4", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27e35bc4910e291d8676c69b08fb88fa51ba528e/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27e35bc4910e291d8676c69b08fb88fa51ba528e/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=27e35bc4910e291d8676c69b08fb88fa51ba528e", "patch": "@@ -60,7 +60,6 @@\n   [(CRIS_STATIC_CHAIN_REGNUM 7)\n    (CRIS_REAL_FP_REGNUM 8)\n    (CRIS_SP_REGNUM 14)\n-   (CRIS_ACR_REGNUM 15)\n    (CRIS_SRP_REGNUM 16)\n    (CRIS_MOF_REGNUM 17)\n    (CRIS_AP_REGNUM 18)"}]}