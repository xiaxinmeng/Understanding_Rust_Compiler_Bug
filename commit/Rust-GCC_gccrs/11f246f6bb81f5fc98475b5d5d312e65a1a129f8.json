{"sha": "11f246f6bb81f5fc98475b5d5d312e65a1a129f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFmMjQ2ZjZiYjgxZjVmYzk4NDc1YjVkNWQzMTJlNjVhMWExMjlmOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@limax.paru.cas.cz", "date": "1999-04-10T22:53:08Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-04-10T22:53:08Z"}, "message": "flow.c (life_analysis): New parameter remove_dead_code.\n\n        * flow.c (life_analysis): New parameter remove_dead_code.\n        (life_analysis_1): Likewise.\n        (propagate_block): Likewise; use it.\n        * output.h: Update prototype.\n        * toplev.c: Update calls to life_analysis.\n\nFrom-SVN: r26343", "tree": {"sha": "e34f000df0d301020e770ea962701b4c3d9cbce1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e34f000df0d301020e770ea962701b4c3d9cbce1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11f246f6bb81f5fc98475b5d5d312e65a1a129f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11f246f6bb81f5fc98475b5d5d312e65a1a129f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11f246f6bb81f5fc98475b5d5d312e65a1a129f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11f246f6bb81f5fc98475b5d5d312e65a1a129f8/comments", "author": null, "committer": null, "parents": [{"sha": "62674ffe2b69f8d8550e718c478621500ff6effb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62674ffe2b69f8d8550e718c478621500ff6effb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62674ffe2b69f8d8550e718c478621500ff6effb"}], "stats": {"total": 51, "additions": 33, "deletions": 18}, "files": [{"sha": "94a1f4a91a80aaa8ebe3bf59f925634c8d302177", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f246f6bb81f5fc98475b5d5d312e65a1a129f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f246f6bb81f5fc98475b5d5d312e65a1a129f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11f246f6bb81f5fc98475b5d5d312e65a1a129f8", "patch": "@@ -1,3 +1,11 @@\n+Sat Apr 10 22:51:53 1999  Jan Hubicka <hubicka@limax.paru.cas.cz>\n+\n+\t* flow.c (life_analysis): New parameter remove_dead_code.\n+\t(life_analysis_1): Likewise.\n+\t(propagate_block): Likewise; use it.\n+\t* output.h: Update prototype.\n+\t* toplev.c: Update calls to life_analysis.\n+\n Sat Apr 10 22:12:12 1999  Jan Hubicka <hubicka@freesoft.cz>\n   \n \t* recog.c (constrain_operands): Ignore unary operators when"}, {"sha": "7952965ba35cbf32c13bee846adfb999c3c3338d", "filename": "gcc/flow.c", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f246f6bb81f5fc98475b5d5d312e65a1a129f8/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f246f6bb81f5fc98475b5d5d312e65a1a129f8/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=11f246f6bb81f5fc98475b5d5d312e65a1a129f8", "patch": "@@ -303,11 +303,11 @@ static int noop_move_p\t\t\tPROTO((rtx));\n static void notice_stack_pointer_modification PROTO ((rtx, rtx));\n static void record_volatile_insns\tPROTO((rtx));\n static void mark_regs_live_at_end\tPROTO((regset));\n-static void life_analysis_1\t\tPROTO((rtx, int));\n+static void life_analysis_1\t\tPROTO((rtx, int, int));\n static void init_regset_vector\t\tPROTO ((regset *, int,\n \t\t\t\t\t\tstruct obstack *));\n static void propagate_block\t\tPROTO((regset, rtx, rtx, int, \n-\t\t\t\t\t       regset, int));\n+\t\t\t\t\t       regset, int, int));\n static int insn_dead_p\t\t\tPROTO((rtx, regset, int, rtx));\n static int libcall_dead_p\t\tPROTO((rtx, regset, rtx, rtx));\n static void mark_set_regs\t\tPROTO((regset, regset, rtx,\n@@ -2059,10 +2059,11 @@ calculate_loop_depth (insns)\n    in use.  */\n \n void\n-life_analysis (f, nregs, file)\n+life_analysis (f, nregs, file, remove_dead_code)\n      rtx f;\n      int nregs;\n      FILE *file;\n+     int remove_dead_code;\n {\n #ifdef ELIMINABLE_REGS\n   register size_t i;\n@@ -2086,7 +2087,7 @@ life_analysis (f, nregs, file)\n \n   /* We want alias analysis information for local dead store elimination.  */\n   init_alias_analysis ();\n-  life_analysis_1 (f, nregs);\n+  life_analysis_1 (f, nregs, remove_dead_code);\n   end_alias_analysis ();\n \n   if (file)\n@@ -2302,9 +2303,10 @@ mark_regs_live_at_end (set)\n    regset_size and regset_bytes are also set here.  */\n \n static void\n-life_analysis_1 (f, nregs)\n+life_analysis_1 (f, nregs, remove_dead_code)\n      rtx f;\n      int nregs;\n+     int remove_dead_code;\n {\n   int first_pass;\n   int changed;\n@@ -2449,7 +2451,7 @@ life_analysis_1 (f, nregs)\n \t      propagate_block (bb->global_live_at_start,\n \t\t\t       bb->head, bb->end, 0,\n \t\t\t       first_pass ? bb->local_set : (regset) 0,\n-\t\t\t       i);\n+\t\t\t       i, remove_dead_code);\n \t    }\n \n \t  /* Update the new_live_at_end's of the block's predecessors.  */\n@@ -2492,7 +2494,7 @@ life_analysis_1 (f, nregs)\n \t contents of global_live_at_end for posterity.  Fortunately,\n \t new_live_at_end, due to the way we converged on a solution,\n \t contains a duplicate of global_live_at_end that we can kill.  */\n-      propagate_block ((regset) bb->aux, bb->head, bb->end, 1, (regset) 0, i);\n+      propagate_block ((regset) bb->aux, bb->head, bb->end, 1, (regset) 0, i, remove_dead_code);\n \n #ifdef USE_C_ALLOCA\n       alloca (0);\n@@ -2626,13 +2628,14 @@ free_regset_vector (vector, nelts)\n    BNUM is the number of the basic block.  */\n \n static void\n-propagate_block (old, first, last, final, significant, bnum)\n+propagate_block (old, first, last, final, significant, bnum, remove_dead_code)\n      register regset old;\n      rtx first;\n      rtx last;\n      int final;\n      regset significant;\n      int bnum;\n+     int remove_dead_code;\n {\n   register rtx insn;\n   rtx prev;\n@@ -2689,13 +2692,17 @@ propagate_block (old, first, last, final, significant, bnum)\n \t{\n \t  register int i;\n \t  rtx note = find_reg_note (insn, REG_RETVAL, NULL_RTX);\n-\t  int insn_is_dead\n-\t    = (insn_dead_p (PATTERN (insn), old, 0, REG_NOTES (insn))\n-\t       /* Don't delete something that refers to volatile storage!  */\n-\t       && ! INSN_VOLATILE (insn));\n-\t  int libcall_is_dead \n-\t    = (insn_is_dead && note != 0\n-\t       && libcall_dead_p (PATTERN (insn), old, note, insn));\n+\t  int insn_is_dead = 0;\n+\t  int libcall_is_dead = 0;\n+\n+\t  if (remove_dead_code)\n+\t    {\n+\t      insn_is_dead = (insn_dead_p (PATTERN (insn), old, 0, REG_NOTES (insn))\n+\t                      /* Don't delete something that refers to volatile storage!  */\n+\t                      && ! INSN_VOLATILE (insn));\n+\t      libcall_is_dead = (insn_is_dead && note != 0\n+\t                         && libcall_dead_p (PATTERN (insn), old, note, insn));\n+\t    }\n \n \t  /* If an instruction consists of just dead store(s) on final pass,\n \t     \"delete\" it by turning it into a NOTE of type NOTE_INSN_DELETED."}, {"sha": "7e1c28bd7e57f26ff5a0ee4106533fb63d714906", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f246f6bb81f5fc98475b5d5d312e65a1a129f8/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f246f6bb81f5fc98475b5d5d312e65a1a129f8/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=11f246f6bb81f5fc98475b5d5d312e65a1a129f8", "patch": "@@ -131,7 +131,7 @@ extern void dump_flow_info\t\tPROTO((FILE *));\n extern void find_basic_blocks         PROTO((rtx, int, FILE *, int));\n extern void free_basic_block_vars     PROTO((int));\n extern void set_block_num             PROTO((rtx, int));\n-extern void life_analysis             PROTO((rtx, int, FILE *));\n+extern void life_analysis             PROTO((rtx, int, FILE *, int));\n #endif\n \n /* Functions in varasm.c.  */"}, {"sha": "4c332617966b3d92575bdeb8c028c61614fdea8f", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f246f6bb81f5fc98475b5d5d312e65a1a129f8/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f246f6bb81f5fc98475b5d5d312e65a1a129f8/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=11f246f6bb81f5fc98475b5d5d312e65a1a129f8", "patch": "@@ -3983,7 +3983,7 @@ rest_of_compilation (decl)\n \t(flow_time,\n \t {\n \t   find_basic_blocks (insns, max_reg_num (), rtl_dump_file, 1);\n-\t   life_analysis (insns, max_reg_num (), rtl_dump_file);\n+\t   life_analysis (insns, max_reg_num (), rtl_dump_file, 1);\n \t });\n \n       if (warn_uninitialized)\n@@ -4168,7 +4168,7 @@ rest_of_compilation (decl)\n \t(flow2_time,\n \t {\n \t   find_basic_blocks (insns, max_reg_num (), rtl_dump_file, 1);\n-\t   life_analysis (insns, max_reg_num (), rtl_dump_file);\n+\t   life_analysis (insns, max_reg_num (), rtl_dump_file, 1);\n \t });\n     }\n "}]}