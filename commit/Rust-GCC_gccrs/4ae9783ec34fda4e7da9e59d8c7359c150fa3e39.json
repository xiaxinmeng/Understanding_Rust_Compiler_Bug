{"sha": "4ae9783ec34fda4e7da9e59d8c7359c150fa3e39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFlOTc4M2VjMzRmZGE0ZTdkYTllNTlkOGM3MzU5YzE1MGZhM2UzOQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2015-01-16T10:14:51Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-01-16T10:14:51Z"}, "message": "[Patch] Warn and truncate bitsize when partial overflow happen\n\n  PR rtl-optimization/64011\n  gcc/\n    * expmed.c (store_bit_field_using_insv): Warn and truncate bitsize when\n    there is partial overflow.\n\nFrom-SVN: r219717", "tree": {"sha": "7f4d05384f9791b939aff37fa125d72e83cb9294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f4d05384f9791b939aff37fa125d72e83cb9294"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ae9783ec34fda4e7da9e59d8c7359c150fa3e39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ae9783ec34fda4e7da9e59d8c7359c150fa3e39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ae9783ec34fda4e7da9e59d8c7359c150fa3e39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ae9783ec34fda4e7da9e59d8c7359c150fa3e39/comments", "author": null, "committer": null, "parents": [{"sha": "de37b21e3d945ed6a0bf032078c233854ff38c8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de37b21e3d945ed6a0bf032078c233854ff38c8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de37b21e3d945ed6a0bf032078c233854ff38c8e"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "65a80c56ea19ed6f4483d6040f25d9b0f77e98db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae9783ec34fda4e7da9e59d8c7359c150fa3e39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae9783ec34fda4e7da9e59d8c7359c150fa3e39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ae9783ec34fda4e7da9e59d8c7359c150fa3e39", "patch": "@@ -1,3 +1,9 @@\n+2015-01-15  Jiong Wang  <jiong.wang@arm.com>\n+\n+\tPR rtl-optimization/64011\n+\t* expmed.c (store_bit_field_using_insv): Warn and truncate bitsize when\n+\tthere is partial overflow.\n+\n 2015-01-16  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* config/nds32/nds32-protos.h (nds32_expand_epilogue): Change"}, {"sha": "beedfc052b6d9af59d03f9dfd836d9bc68b41fdc", "filename": "gcc/expmed.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ae9783ec34fda4e7da9e59d8c7359c150fa3e39/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ae9783ec34fda4e7da9e59d8c7359c150fa3e39/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=4ae9783ec34fda4e7da9e59d8c7359c150fa3e39", "patch": "@@ -557,6 +557,21 @@ store_bit_field_using_insv (const extraction_insn *insv, rtx op0,\n       copy_back = true;\n     }\n \n+  /* There are similar overflow check at the start of store_bit_field_1,\n+     but that only check the situation where the field lies completely\n+     outside the register, while there do have situation where the field\n+     lies partialy in the register, we need to adjust bitsize for this\n+     partial overflow situation.  Without this fix, pr48335-2.c on big-endian\n+     will broken on those arch support bit insert instruction, like arm, aarch64\n+     etc.  */\n+  if (bitsize + bitnum > unit && bitnum < unit)\n+    {\n+      warning (OPT_Wextra, \"write of \"HOST_WIDE_INT_PRINT_UNSIGNED\"bit data \"\n+\t       \"outside the bound of destination object, data truncated into \"\n+\t       HOST_WIDE_INT_PRINT_UNSIGNED\"bit\", bitsize, unit - bitnum);\n+      bitsize = unit - bitnum;\n+    }\n+\n   /* If BITS_BIG_ENDIAN is zero on a BYTES_BIG_ENDIAN machine, we count\n      \"backwards\" from the size of the unit we are inserting into.\n      Otherwise, we count bits from the most significant on a"}]}