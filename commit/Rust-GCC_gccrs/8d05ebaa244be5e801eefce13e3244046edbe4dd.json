{"sha": "8d05ebaa244be5e801eefce13e3244046edbe4dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQwNWViYWEyNDRiZTVlODAxZWVmY2UxM2UzMjQ0MDQ2ZWRiZTRkZA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2003-07-18T21:42:29Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2003-07-18T21:42:29Z"}, "message": "aix.h (AGGREGATE_PADDING_FIXED): Define.\n\n\t* config/rs6000/aix.h (AGGREGATE_PADDING_FIXED): Define.\n\t(AGGREGATES_PAD_UPWARD_ALWAYS): Define.\n\t(MUST_PASS_IN_STACK): Define.\n\t(BLOCK_REG_PADDING): Define.\n\nFrom-SVN: r69570", "tree": {"sha": "83e8c8eda53c16486c65e8ecf6649b8b5c40b513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83e8c8eda53c16486c65e8ecf6649b8b5c40b513"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d05ebaa244be5e801eefce13e3244046edbe4dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d05ebaa244be5e801eefce13e3244046edbe4dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d05ebaa244be5e801eefce13e3244046edbe4dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d05ebaa244be5e801eefce13e3244046edbe4dd/comments", "author": null, "committer": null, "parents": [{"sha": "790199856aab807f3810413867f739c702c6a3e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/790199856aab807f3810413867f739c702c6a3e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/790199856aab807f3810413867f739c702c6a3e9"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "066668a84f31fa34cc4f158730d9e52a0838ed72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d05ebaa244be5e801eefce13e3244046edbe4dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d05ebaa244be5e801eefce13e3244046edbe4dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d05ebaa244be5e801eefce13e3244046edbe4dd", "patch": "@@ -1,3 +1,10 @@\n+2003-07-18  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/aix.h (AGGREGATE_PADDING_FIXED): Define.\n+\t(AGGREGATES_PAD_UPWARD_ALWAYS): Define.\n+\t(MUST_PASS_IN_STACK): Define.\n+\t(BLOCK_REG_PADDING): Define.\n+\n 2003-07-18  Richard Henderson  <rth@redhat.com>\n \n \t* cfgrtl.c (force_nonfallthru_and_redirect): Use tablejump_p"}, {"sha": "991d2c31153da929257a8d7babb8e0d2817403b5", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d05ebaa244be5e801eefce13e3244046edbe4dd/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d05ebaa244be5e801eefce13e3244046edbe4dd/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=8d05ebaa244be5e801eefce13e3244046edbe4dd", "patch": "@@ -149,6 +149,29 @@\n    ? MAX (MAX ((COMPUTED), (SPECIFIED)), 64)\t\t\\\n    : MAX ((COMPUTED), (SPECIFIED)))\n \n+/* The AIX ABI isn't explicit on whether aggregates smaller than a\n+   word/doubleword should be padded upward or downward.  One could\n+   reasonably assume that they follow the normal rules for structure\n+   layout treating the parameter area as any other block of memory,\n+   then map the reg param area to registers, i.e., pad upward, which\n+   is the way IBM Compilers for AIX behave.\n+   Setting both of the following defines results in this behaviour.  */\n+#define AGGREGATE_PADDING_FIXED 1\n+#define AGGREGATES_PAD_UPWARD_ALWAYS 1\n+\n+/* We don't want anything in the reg parm area being passed on the\n+   stack.  */\n+#define MUST_PASS_IN_STACK(MODE, TYPE)\t\t\t\t\\\n+   ((TYPE) != 0\t\t\t\t\t\t\t\\\n+    && (TREE_CODE (TYPE_SIZE (TYPE)) != INTEGER_CST\t\t\\\n+\t|| TREE_ADDRESSABLE (TYPE)))\n+\n+/* Specify padding for the last element of a block move between\n+   registers and memory.  FIRST is nonzero if this is the only\n+   element.  */\n+#define BLOCK_REG_PADDING(MODE, TYPE, FIRST) \\\n+  (!(FIRST) ? upward : FUNCTION_ARG_PADDING (MODE, TYPE))\n+\n /* Indicate that jump tables go in the text section.  */\n \n #define JUMP_TABLES_IN_TEXT_SECTION 1"}]}