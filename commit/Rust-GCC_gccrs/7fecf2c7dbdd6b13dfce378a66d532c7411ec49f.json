{"sha": "7fecf2c7dbdd6b13dfce378a66d532c7411ec49f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZlY2YyYzdkYmRkNmIxM2RmY2UzNzhhNjZkNTMyYzc0MTFlYzQ5Zg==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2007-08-31T22:45:43Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2007-08-31T22:45:43Z"}, "message": "optabs.c (prepare_float_lib_cmp): Use libgcc_cmp_return_mode instead of word_mode.\n\n2007-08-31  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        * optabs.c (prepare_float_lib_cmp): Use\n        libgcc_cmp_return_mode instead of word_mode.\n        * config/dfp-bit.h: Likewise.\n        * config/fp-bit.h: Likewise.\n        * config/spu/spu.c (spu_libgcc_cmp_return_mode):\n        New function.\n        (spu_libgcc_shift_count_mode): New function.\n        (TARGET_LIBGCC_CMP_RETURN_MODE): Define.\n        (TARGET_LIBGCC_SHIFT_COUNT_MODE): Define.\n\nFrom-SVN: r128005", "tree": {"sha": "181b926113a2a84d029ccf131072702c9c19951e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/181b926113a2a84d029ccf131072702c9c19951e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fecf2c7dbdd6b13dfce378a66d532c7411ec49f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fecf2c7dbdd6b13dfce378a66d532c7411ec49f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fecf2c7dbdd6b13dfce378a66d532c7411ec49f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fecf2c7dbdd6b13dfce378a66d532c7411ec49f/comments", "author": null, "committer": null, "parents": [{"sha": "973bb83254bd44d34c9e4e785fc77d10f2366dc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973bb83254bd44d34c9e4e785fc77d10f2366dc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/973bb83254bd44d34c9e4e785fc77d10f2366dc2"}], "stats": {"total": 71, "additions": 57, "deletions": 14}, "files": [{"sha": "8edd7f4d5e9c089102c60b4988412c0558373faf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fecf2c7dbdd6b13dfce378a66d532c7411ec49f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fecf2c7dbdd6b13dfce378a66d532c7411ec49f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fecf2c7dbdd6b13dfce378a66d532c7411ec49f", "patch": "@@ -1,3 +1,15 @@\n+2007-08-31  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\t* optabs.c (prepare_float_lib_cmp): Use\n+\tlibgcc_cmp_return_mode instead of word_mode.\n+\t* config/dfp-bit.h: Likewise.\n+\t* config/fp-bit.h: Likewise.\n+\t* config/spu/spu.c (spu_libgcc_cmp_return_mode):\n+\tNew function.\n+\t(spu_libgcc_shift_count_mode): New function.\n+\t(TARGET_LIBGCC_CMP_RETURN_MODE): Define.\n+\t(TARGET_LIBGCC_SHIFT_COUNT_MODE): Define.\n+\n 2007-08-31  Joseph Myers  <joseph@codesourcery.com>\n \n \t* tree-pretty-print.c: Include output.h.\n@@ -39,6 +51,7 @@\n \tsplit out from expand_binop.\n \t(avoid_expensive_constant): New function.\n \t(expand_binop_directly): Remove commutative_op argument and\n+\t(expand_binop_directly): Remove commutative_op argument and\n \tcall cummutative_optab_p instead.  Do not change op0 or op1\n \twhen swapping xop0 and xop1.  Apply avoid_expensive_constant\n \tto each argument after potential swapping.  Enforce the"}, {"sha": "dfbf4f4833804c2be2597b257ac3a243a48e119a", "filename": "gcc/config/dfp-bit.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fecf2c7dbdd6b13dfce378a66d532c7411ec49f/gcc%2Fconfig%2Fdfp-bit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fecf2c7dbdd6b13dfce378a66d532c7411ec49f/gcc%2Fconfig%2Fdfp-bit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdfp-bit.h?ref=7fecf2c7dbdd6b13dfce378a66d532c7411ec49f", "patch": "@@ -454,9 +454,9 @@ typedef unsigned int USItype __attribute__ ((mode (SI)));\n typedef unsigned int UDItype __attribute__ ((mode (DI)));\n \n /* The type of the result of a decimal float comparison.  This must\n-   match `word_mode' in GCC for the target.  */\n+   match `__libgcc_cmp_return__' in GCC for the target.  */\n \n-typedef int CMPtype __attribute__ ((mode (word)));\n+typedef int CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n \n /* Prototypes.  */\n "}, {"sha": "5f9082cd301c458de2d0f23b510b5511d7aabc91", "filename": "gcc/config/fp-bit.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fecf2c7dbdd6b13dfce378a66d532c7411ec49f/gcc%2Fconfig%2Ffp-bit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fecf2c7dbdd6b13dfce378a66d532c7411ec49f/gcc%2Fconfig%2Ffp-bit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffp-bit.h?ref=7fecf2c7dbdd6b13dfce378a66d532c7411ec49f", "patch": "@@ -108,9 +108,9 @@ typedef int TItype __attribute__ ((mode (TI)));\n #endif\n \n /* The type of the result of a floating point comparison.  This must\n-   match `word_mode' in GCC for the target.  */\n+   match `__libgcc_cmp_return__' in GCC for the target.  */\n #ifndef CMPtype\n-typedef int CMPtype __attribute__ ((mode (word)));\n+typedef int CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n #endif\n \n typedef unsigned int UHItype __attribute__ ((mode (HI)));"}, {"sha": "7fcc942931027ee4704162d6580804b95fbafa9d", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fecf2c7dbdd6b13dfce378a66d532c7411ec49f/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fecf2c7dbdd6b13dfce378a66d532c7411ec49f/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=7fecf2c7dbdd6b13dfce378a66d532c7411ec49f", "patch": "@@ -174,6 +174,12 @@ static int cpat_info(unsigned char *arr, int size, int *prun, int *pstart);\n static enum immediate_class classify_immediate (rtx op,\n \t\t\t\t\t\tenum machine_mode mode);\n \n+static enum machine_mode\n+spu_libgcc_cmp_return_mode (void);\n+\n+static enum machine_mode\n+spu_libgcc_shift_count_mode (void);\n+\n /* Built in types.  */\n tree spu_builtin_types[SPU_BTI_MAX];\n \f\n@@ -275,6 +281,12 @@ const struct attribute_spec spu_attribute_table[];\n #undef TARGET_VECTOR_ALIGNMENT_REACHABLE\n #define TARGET_VECTOR_ALIGNMENT_REACHABLE spu_vector_alignment_reachable\n \n+#undef TARGET_LIBGCC_CMP_RETURN_MODE\n+#define TARGET_LIBGCC_CMP_RETURN_MODE spu_libgcc_cmp_return_mode\n+\n+#undef TARGET_LIBGCC_SHIFT_COUNT_MODE\n+#define TARGET_LIBGCC_SHIFT_COUNT_MODE spu_libgcc_shift_count_mode\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n void\n@@ -5502,4 +5514,21 @@ spu_init_expanders (void)\n    * expanding the prologue. */\n   if (cfun)\n     REGNO_POINTER_ALIGN (HARD_FRAME_POINTER_REGNUM) = 8;\n-}       \n+}\n+\n+static enum machine_mode\n+spu_libgcc_cmp_return_mode (void)\n+{\n+\n+/* For SPU word mode is TI mode so it is better to use SImode\n+   for compare returns.  */\n+  return SImode;\n+}\n+\n+static enum machine_mode\n+spu_libgcc_shift_count_mode (void)\n+{\n+/* For SPU word mode is TI mode so it is better to use SImode\n+   for shift counts.  */\n+  return SImode;\n+}"}, {"sha": "97319714fa5c8d57daedd1f835e83f0969b39648", "filename": "gcc/optabs.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fecf2c7dbdd6b13dfce378a66d532c7411ec49f/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fecf2c7dbdd6b13dfce378a66d532c7411ec49f/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=7fecf2c7dbdd6b13dfce378a66d532c7411ec49f", "patch": "@@ -4232,10 +4232,11 @@ prepare_float_lib_cmp (rtx *px, rtx *py, enum rtx_code *pcomparison,\n   rtx x = *px;\n   rtx y = *py;\n   enum machine_mode orig_mode = GET_MODE (x);\n-  enum machine_mode mode;\n+  enum machine_mode mode, cmp_mode;\n   rtx value, target, insns, equiv;\n   rtx libfunc = 0;\n   bool reversed_p = false;\n+  cmp_mode = targetm.libgcc_cmp_return_mode ();\n \n   for (mode = orig_mode;\n        mode != VOIDmode;\n@@ -4274,14 +4275,14 @@ prepare_float_lib_cmp (rtx *px, rtx *py, enum rtx_code *pcomparison,\n      condition can be determined at compile-time.  */\n   if (comparison == UNORDERED)\n     {\n-      rtx temp = simplify_gen_relational (NE, word_mode, mode, x, x);\n-      equiv = simplify_gen_relational (NE, word_mode, mode, y, y);\n-      equiv = simplify_gen_ternary (IF_THEN_ELSE, word_mode, word_mode,\n+      rtx temp = simplify_gen_relational (NE, cmp_mode, mode, x, x);\n+      equiv = simplify_gen_relational (NE, cmp_mode, mode, y, y);\n+      equiv = simplify_gen_ternary (IF_THEN_ELSE, cmp_mode, cmp_mode,\n \t\t\t\t    temp, const_true_rtx, equiv);\n     }\n   else\n     {\n-      equiv = simplify_gen_relational (comparison, word_mode, mode, x, y);\n+      equiv = simplify_gen_relational (comparison, cmp_mode, mode, x, y);\n       if (! FLOAT_LIB_COMPARE_RETURNS_BOOL (mode, comparison))\n \t{\n \t  rtx true_rtx, false_rtx;\n@@ -4321,18 +4322,18 @@ prepare_float_lib_cmp (rtx *px, rtx *py, enum rtx_code *pcomparison,\n \t    default:\n \t      gcc_unreachable ();\n \t    }\n-\t  equiv = simplify_gen_ternary (IF_THEN_ELSE, word_mode, word_mode,\n+\t  equiv = simplify_gen_ternary (IF_THEN_ELSE, cmp_mode, cmp_mode,\n \t\t\t\t\tequiv, true_rtx, false_rtx);\n \t}\n     }\n \n   start_sequence ();\n   value = emit_library_call_value (libfunc, NULL_RTX, LCT_CONST,\n-\t\t\t\t   word_mode, 2, x, mode, y, mode);\n+\t\t\t\t   cmp_mode, 2, x, mode, y, mode);\n   insns = get_insns ();\n   end_sequence ();\n \n-  target = gen_reg_rtx (word_mode);\n+  target = gen_reg_rtx (cmp_mode);\n   emit_libcall_block (insns, target, value, equiv);\n \n   if (comparison == UNORDERED\n@@ -4341,7 +4342,7 @@ prepare_float_lib_cmp (rtx *px, rtx *py, enum rtx_code *pcomparison,\n \n   *px = target;\n   *py = const0_rtx;\n-  *pmode = word_mode;\n+  *pmode = cmp_mode;\n   *pcomparison = comparison;\n   *punsignedp = 0;\n }"}]}