{"sha": "4daba88481ad29c76f24b70485017e54f9a19fe3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRhYmE4ODQ4MWFkMjljNzZmMjRiNzA0ODUwMTdlNTRmOWExOWZlMw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2011-10-18T02:58:06Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2011-10-18T02:58:06Z"}, "message": "[multiple changes]\n\n2011-10-17  Michael Spertus  <mike_spertus@symantec.com>\n\n\t* gcc/c-family/c-common.c (c_common_reswords): Add __bases,\n\t__direct_bases.\n\t* gcc/c-family/c-common.h: Add RID_BASES and RID_DIRECT_BASES.\n\n2011-10-17  Michael Spertus  <mike_spertus@symantec.com>\n\n\t* cp-tree.def: Add BASES as a new tree code.\n\t* cp-tree.h (enum cp_trait_kind): Add CPTK_BASES, CPTK_DIRECT_BASES.\n\t(BASES_TYPE, BASES_DIRECT): Define.\n\t(calculate_bases, finish_bases, calculate_direct_bases): Declare.\n\t* parser.c (cp_parser_trait_expr, cp_parser_template_argument_list,\n\t(cp_parser_simple_type_specifier, cp_parser_save_nsdmi): Use them.\n\t* pt.c (find_parameter_packs_r, tsubst_pack_expansion): Likewise.\n\t* semantics.c (calculate_bases, finish_bases, calculate_direct_bases,\n\tdfs_calculate_bases_pre, dfs_calculate_bases_post,\n\tcalculate_bases_helper): Define.\n\n2011-10-17  Michael Spertus  <mike_spertus@symantec.com>\n\n\t* g++.dg/ext/bases.C: New test.\n\n2011-10-17  Michael Spertus  <mike_spertus@symantec.com>\n\n\t* include/tr2/type_traits (bases, direct_bases, typelist): New.\n\n2011-10-17  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* libstdc++-v3/include/Makefile.am: Add tr2 directory and includes.\n\t* libstdc++-v3/include/Makefile.in: Regenerate.\n\n\t* scripts/create_testsuite_files: Search tr2 directory.\n\t* testsuite/libstdc++-dg/conformance.exp: Same.\n\n\t* testsuite/tr2/bases/requirements/explicit_instantiation.cc: New.\n\t* testsuite/tr2/bases/requirements/typedefs.cc: New.\n\t* testsuite/tr2/bases/value.cc: New.\n\t* testsuite/tr2/direct_bases/requirements/\n\texplicit_instantiation.cc: New.\n\t* testsuite/tr2/direct_bases/requirements/typedefs.cc: New.\n\t* testsuite/tr2/direct_bases/value.cc: New.\n\nFrom-SVN: r180121", "tree": {"sha": "025d5854011b99cfe93205d711317cfd2947da24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/025d5854011b99cfe93205d711317cfd2947da24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4daba88481ad29c76f24b70485017e54f9a19fe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4daba88481ad29c76f24b70485017e54f9a19fe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4daba88481ad29c76f24b70485017e54f9a19fe3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4daba88481ad29c76f24b70485017e54f9a19fe3/comments", "author": null, "committer": null, "parents": [{"sha": "9d4dedaa7b3ddd81934489e200dc7a4b97836dbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d4dedaa7b3ddd81934489e200dc7a4b97836dbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d4dedaa7b3ddd81934489e200dc7a4b97836dbc"}], "stats": {"total": 741, "additions": 729, "deletions": 12}, "files": [{"sha": "6c73404942bcc83e6d963ea78d5e1e82594b1a19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -1,3 +1,9 @@\n+2011-10-17  Michael Spertus  <mike_spertus@symantec.com>\n+\n+\t* gcc/c-family/c-common.c (c_common_reswords): Add __bases,\n+\t__direct_bases.\n+\t* gcc/c-family/c-common.h: Add RID_BASES and RID_DIRECT_BASES.\n+\n 2011-10-17  Simon Baldwin  <simonb@google.com>\n \t    Ian Lance Taylor  <iant@google.com>\n "}, {"sha": "9d20d80981c3778cc9db7106ed5628d0a56e8d4f", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -423,6 +423,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"__asm__\",\t\tRID_ASM,\t0 },\n   { \"__attribute\",\tRID_ATTRIBUTE,\t0 },\n   { \"__attribute__\",\tRID_ATTRIBUTE,\t0 },\n+  { \"__bases\",          RID_BASES, D_CXXONLY },\n   { \"__builtin_choose_expr\", RID_CHOOSE_EXPR, D_CONLY },\n   { \"__builtin_complex\", RID_BUILTIN_COMPLEX, D_CONLY },\n   { \"__builtin_shuffle\", RID_BUILTIN_SHUFFLE, D_CONLY },\n@@ -434,6 +435,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"__const\",\t\tRID_CONST,\t0 },\n   { \"__const__\",\tRID_CONST,\t0 },\n   { \"__decltype\",       RID_DECLTYPE,   D_CXXONLY },\n+  { \"__direct_bases\",   RID_DIRECT_BASES, D_CXXONLY },\n   { \"__extension__\",\tRID_EXTENSION,\t0 },\n   { \"__func__\",\t\tRID_C99_FUNCTION_NAME, 0 },\n   { \"__has_nothrow_assign\", RID_HAS_NOTHROW_ASSIGN, D_CXXONLY },"}, {"sha": "9818c9ca6828675eae2026076ef76082be8808d0", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -128,12 +128,13 @@ enum rid\n   RID_CONSTCAST, RID_DYNCAST, RID_REINTCAST, RID_STATCAST,\n \n   /* C++ extensions */\n+  RID_BASES,                  RID_DIRECT_BASES,\n   RID_HAS_NOTHROW_ASSIGN,      RID_HAS_NOTHROW_CONSTRUCTOR,\n   RID_HAS_NOTHROW_COPY,        RID_HAS_TRIVIAL_ASSIGN,\n   RID_HAS_TRIVIAL_CONSTRUCTOR, RID_HAS_TRIVIAL_COPY,\n   RID_HAS_TRIVIAL_DESTRUCTOR,  RID_HAS_VIRTUAL_DESTRUCTOR,\n   RID_IS_ABSTRACT,             RID_IS_BASE_OF,\n-  RID_IS_CONVERTIBLE_TO,       RID_IS_CLASS,\n+  RID_IS_CLASS,                RID_IS_CONVERTIBLE_TO,\n   RID_IS_EMPTY,                RID_IS_ENUM,\n   RID_IS_LITERAL_TYPE,         RID_IS_POD,\n   RID_IS_POLYMORPHIC,          RID_IS_STD_LAYOUT,"}, {"sha": "2a4bdbbfc3691e6f7dccd3f10dbeaa4be2b23a7f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -1,3 +1,16 @@\n+2011-10-17  Michael Spertus  <mike_spertus@symantec.com>\n+\n+\t* cp-tree.def: Add BASES as a new tree code.\n+\t* cp-tree.h (enum cp_trait_kind): Add CPTK_BASES, CPTK_DIRECT_BASES.\n+\t(BASES_TYPE, BASES_DIRECT): Define.\n+\t(calculate_bases, finish_bases, calculate_direct_bases): Declare.\n+\t* parser.c (cp_parser_trait_expr, cp_parser_template_argument_list,\n+\t(cp_parser_simple_type_specifier, cp_parser_save_nsdmi): Use them.\n+\t* pt.c (find_parameter_packs_r, tsubst_pack_expansion): Likewise.\n+\t* semantics.c (calculate_bases, finish_bases, calculate_direct_bases,\n+\tdfs_calculate_bases_pre, dfs_calculate_bases_post,\n+\tcalculate_bases_helper): Define.\n+\n 2011-10-17  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/50736"}, {"sha": "4eec9f97c7d1ee3ad81cf162f3919f73130bd10a", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -462,6 +462,10 @@ DEFTREECODE (DECLTYPE_TYPE, \"decltype_type\", tcc_type, 0)\n    UNDERLYING_TYPE_TYPE is the type in question.  */\n DEFTREECODE (UNDERLYING_TYPE, \"underlying_type\", tcc_type, 0)\n \n+/* A type designated by one of the bases type traits.\n+   BASES_TYPE is the type in question.  */\n+DEFTREECODE (BASES, \"bases\", tcc_type, 0)\n+\n /* Used to represent the template information stored by template\n    specializations.\n    The accessors are:"}, {"sha": "bda18d9d87b06119d45bfcdf9c73045800881ce1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -564,6 +564,8 @@ struct GTY (()) tree_argument_pack_select {\n \n typedef enum cp_trait_kind\n {\n+  CPTK_BASES,\n+  CPTK_DIRECT_BASES,\n   CPTK_HAS_NOTHROW_ASSIGN,\n   CPTK_HAS_NOTHROW_CONSTRUCTOR,\n   CPTK_HAS_NOTHROW_COPY,\n@@ -3433,6 +3435,13 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define UNDERLYING_TYPE_TYPE(NODE) \\\n   (TYPE_VALUES_RAW (UNDERLYING_TYPE_CHECK (NODE)))\n \n+/* The type in question for BASES.  */\n+#define BASES_TYPE(NODE) \\\n+  (TYPE_VALUES_RAW (BASES_CHECK (NODE)))\n+\n+#define BASES_DIRECT(NODE) \\\n+  TREE_LANG_FLAG_0 (BASES_CHECK (NODE))\n+\n /* The expression in question for a DECLTYPE_TYPE.  */\n #define DECLTYPE_TYPE_EXPR(NODE) (TYPE_VALUES_RAW (DECLTYPE_TYPE_CHECK (NODE)))\n \n@@ -5462,6 +5471,9 @@ extern tree finish_id_expression\t\t(tree, tree, tree,\n                                                  location_t);\n extern tree finish_typeof\t\t\t(tree);\n extern tree finish_underlying_type\t        (tree);\n+extern tree calculate_bases                     (tree);\n+extern tree finish_bases                        (tree, bool);\n+extern tree calculate_direct_bases              (tree);\n extern tree finish_offsetof\t\t\t(tree);\n extern void finish_decl_cleanup\t\t\t(tree, tree);\n extern void finish_eh_cleanup\t\t\t(tree);"}, {"sha": "c0e9001bf470cbe8b420ea28b111301b66cb07ad", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -7304,6 +7304,12 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n     case RID_UNDERLYING_TYPE:\n       kind = CPTK_UNDERLYING_TYPE;\n       break;\n+    case RID_BASES:\n+      kind = CPTK_BASES;\n+      break;\n+    case RID_DIRECT_BASES:\n+      kind = CPTK_DIRECT_BASES;\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -7348,9 +7354,17 @@ cp_parser_trait_expr (cp_parser* parser, enum rid keyword)\n \n   /* Complete the trait expression, which may mean either processing\n      the trait expr now or saving it for template instantiation.  */\n-  return kind != CPTK_UNDERLYING_TYPE\n-    ? finish_trait_expr (kind, type1, type2)\n-    : finish_underlying_type (type1);\n+  switch(kind)\n+    {\n+    case CPTK_UNDERLYING_TYPE:\n+      return finish_underlying_type (type1);\n+    case CPTK_BASES:\n+      return finish_bases (type1, false);\n+    case CPTK_DIRECT_BASES:\n+      return finish_bases (type1, true);\n+    default:\n+      return finish_trait_expr (kind, type1, type2);\n+    }\n }\n \n /* Lambdas that appear in variable initializer or default argument scope\n@@ -12040,6 +12054,7 @@ cp_parser_template_argument_list (cp_parser* parser)\n   parser->integral_constant_expression_p = false;\n   saved_non_ice_p = parser->non_integral_constant_expression_p;\n   parser->non_integral_constant_expression_p = false;\n+\n   /* Parse the arguments.  */\n   do\n     {\n@@ -12857,14 +12872,21 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \n     case RID_UNDERLYING_TYPE:\n       type = cp_parser_trait_expr (parser, RID_UNDERLYING_TYPE);\n-\n       if (decl_specs)\n \tcp_parser_set_decl_spec_type (decl_specs, type,\n \t\t\t\t      token->location,\n \t\t\t\t      /*type_definition_p=*/false);\n \n       return type;\n \n+    case RID_BASES:\n+    case RID_DIRECT_BASES:\n+      type = cp_parser_trait_expr (parser, token->keyword);\n+      if (decl_specs)\n+       cp_parser_set_decl_spec_type (decl_specs, type,\n+                                     token->location,\n+                                     /*type_definition_p=*/false);\n+      return type;\n     default:\n       break;\n     }\n@@ -20652,7 +20674,7 @@ cp_parser_save_nsdmi (cp_parser* parser)\n \n \n /* Parse a template-argument-list, as well as the trailing \">\" (but\n-   not the opening \">\").  See cp_parser_template_argument_list for the\n+   not the opening \"<\").  See cp_parser_template_argument_list for the\n    return value.  */\n \n static tree"}, {"sha": "6fc60d5ab8082100bf7f326c202e86e8c54f5b5b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -2980,6 +2980,9 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n         }\n       break;\n \n+    case BASES:\n+      parameter_pack_p = true;\n+      break;\n     default:\n       /* Not a parameter pack.  */\n       break;\n@@ -9127,6 +9130,15 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n       tree arg_pack = NULL_TREE;\n       tree orig_arg = NULL_TREE;\n \n+      if (TREE_CODE (parm_pack) == BASES)\n+       {\n+         if (BASES_DIRECT (parm_pack))\n+           return calculate_direct_bases (tsubst_expr (BASES_TYPE (parm_pack),\n+                                                        args, complain, in_decl, false));\n+         else\n+           return calculate_bases (tsubst_expr (BASES_TYPE (parm_pack),\n+                                                 args, complain, in_decl, false));\n+       }\n       if (TREE_CODE (parm_pack) == PARM_DECL)\n \t{\n \t  if (!cp_unevaluated_operand)"}, {"sha": "3e847fa5ce589e3e98ef291f42b046d833645995", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -3394,6 +3394,149 @@ finish_underlying_type (tree type)\n   return underlying_type;\n }\n \n+/* Implement the __direct_bases keyword: Return the direct base classes\n+   of type */\n+\n+tree\n+calculate_direct_bases (tree type)\n+{\n+  VEC(tree, gc) *vector = make_tree_vector();\n+  tree bases_vec = NULL_TREE;\n+  VEC(tree, none) *base_binfos;\n+  tree binfo;\n+  unsigned i;\n+\n+  complete_type (type);\n+\n+  if (!NON_UNION_CLASS_TYPE_P (type))\n+    return make_tree_vec (0);\n+\n+  base_binfos = BINFO_BASE_BINFOS (TYPE_BINFO (type));\n+\n+  /* Virtual bases are initialized first */\n+  for (i = 0; VEC_iterate (tree, base_binfos, i, binfo); i++)\n+    {\n+      if (BINFO_VIRTUAL_P (binfo))\n+       {\n+         VEC_safe_push (tree, gc, vector, binfo);\n+       }\n+    }\n+\n+  /* Now non-virtuals */\n+  for (i = 0; VEC_iterate (tree, base_binfos, i, binfo); i++)\n+    {\n+      if (!BINFO_VIRTUAL_P (binfo))\n+       {\n+         VEC_safe_push (tree, gc, vector, binfo);\n+       }\n+    }\n+\n+\n+  bases_vec = make_tree_vec (VEC_length (tree, vector));\n+\n+  for (i = 0; i < VEC_length (tree, vector); ++i)\n+    {\n+      TREE_VEC_ELT (bases_vec, i) = BINFO_TYPE (VEC_index (tree, vector, i));\n+    }\n+  return bases_vec;\n+}\n+\n+/* Implement the __bases keyword: Return the base classes\n+   of type */\n+\n+/* Find morally non-virtual base classes by walking binfo hierarchy */\n+/* Virtual base classes are handled separately in finish_bases */\n+\n+static tree\n+dfs_calculate_bases_pre (tree binfo, ATTRIBUTE_UNUSED void *data_)\n+{\n+  /* Don't walk bases of virtual bases */\n+  return BINFO_VIRTUAL_P (binfo) ? dfs_skip_bases : NULL_TREE;\n+}\n+\n+static tree\n+dfs_calculate_bases_post (tree binfo, void *data_)\n+{\n+  VEC(tree, gc) **data = (VEC(tree, gc) **) data_;\n+  if (!BINFO_VIRTUAL_P (binfo))\n+    {\n+      VEC_safe_push (tree, gc, *data, BINFO_TYPE (binfo));\n+    }\n+  return NULL_TREE;\n+}\n+\n+/* Calculates the morally non-virtual base classes of a class */\n+static VEC(tree, gc) *\n+calculate_bases_helper (tree type)\n+{\n+  VEC(tree, gc) *vector = make_tree_vector();\n+\n+  /* Now add non-virtual base classes in order of construction */\n+  dfs_walk_all (TYPE_BINFO (type),\n+                dfs_calculate_bases_pre, dfs_calculate_bases_post, &vector);\n+  return vector;\n+}\n+\n+tree\n+calculate_bases (tree type)\n+{\n+  VEC(tree, gc) *vector = make_tree_vector();\n+  tree bases_vec = NULL_TREE;\n+  unsigned i;\n+  VEC(tree, gc) *vbases;\n+  VEC(tree, gc) *nonvbases;\n+  tree binfo;\n+\n+  complete_type (type);\n+\n+  if (!NON_UNION_CLASS_TYPE_P (type))\n+    return make_tree_vec (0);\n+\n+  /* First go through virtual base classes */\n+  for (vbases = CLASSTYPE_VBASECLASSES (type), i = 0;\n+       VEC_iterate (tree, vbases, i, binfo); i++)\n+    {\n+      VEC(tree, gc) *vbase_bases = calculate_bases_helper (BINFO_TYPE (binfo));\n+      VEC_safe_splice (tree, gc, vector, vbase_bases);\n+      release_tree_vector (vbase_bases);\n+    }\n+\n+  /* Now for the non-virtual bases */\n+  nonvbases = calculate_bases_helper (type);\n+  VEC_safe_splice (tree, gc, vector, nonvbases);\n+  release_tree_vector (nonvbases);\n+\n+  /* Last element is entire class, so don't copy */\n+  bases_vec = make_tree_vec (VEC_length (tree, vector) - 1);\n+\n+  for (i = 0; i < VEC_length (tree, vector) - 1; ++i)\n+    {\n+      TREE_VEC_ELT (bases_vec, i) = VEC_index (tree, vector, i);\n+    }\n+  release_tree_vector (vector);\n+  return bases_vec;\n+}\n+\n+tree\n+finish_bases (tree type, bool direct)\n+{\n+  tree bases = NULL_TREE;\n+\n+  if (!processing_template_decl)\n+    {\n+      /* Parameter packs can only be used in templates */\n+      error (\"Parameter pack __bases only valid in template declaration\");\n+      return error_mark_node;\n+    }\n+\n+  bases = cxx_make_type (BASES);\n+  BASES_TYPE (bases) = type;\n+  BASES_DIRECT (bases) = direct;\n+  SET_TYPE_STRUCTURAL_EQUALITY (bases);\n+\n+  return bases;\n+}\n+\n /* Perform C++-specific checks for __builtin_offsetof before calling\n    fold_offsetof.  */\n "}, {"sha": "39efdcceb06c4d50520560fea841c312044d81f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -1,3 +1,7 @@\n+2011-10-17  Michael Spertus  <mike_spertus@symantec.com>\n+\n+\t* g++.dg/ext/bases.C: New test.\n+\n 2011-10-17  David S. Miller  <davem@davemloft.net>\n \n \t* gcc.target/sparc/fand.c: Remove __LP64__ ifdefs and expect"}, {"sha": "0582f72eb8165f60de7d012a6915b47bec717a72", "filename": "gcc/testsuite/g++.dg/ext/bases.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbases.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbases.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbases.C?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-options \"-std=gnu++0x -w\" }\n+// { dg-do run }\n+\n+#include<typeinfo>\n+#include<cassert>\n+\n+// A simple typelist\n+template<typename... _Elements> struct types {};\n+\n+// Simple bases implementation\n+template<typename T> struct b {\n+  typedef types<__bases(T)...> type;\n+};\n+\n+// Simple direct_bases implementation\n+template<typename T> struct db {\n+  typedef types<__direct_bases(T)...> type;\n+};\n+\n+template <class,class> struct assert_same_type;\n+template <class T> struct assert_same_type<T,T> {};\n+\n+struct A {};\n+struct C : virtual A {};\n+struct D : public C {};\n+struct B : D, virtual A {};\n+struct E : C, virtual D, B {};\n+struct  F : A, B, E {};\n+\n+int main() {\n+  assert_same_type<b<F>::type, types<A,C,D,A,C,D,B,C,C,D,B,E>>();\n+  assert_same_type<db<F>::type, types<A,B,E>>();\n+  assert_same_type<db<int>::type, types<>>();\n+  return 0;\n+}"}, {"sha": "3baca8c8b5a2195c97013db5be75002ea14aec12", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -1,3 +1,23 @@\n+2011-10-17  Michael Spertus  <mike_spertus@symantec.com>\n+\n+\t* include/tr2/type_traits (bases, direct_bases, typelist): New.\n+\n+2011-10-17  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* libstdc++-v3/include/Makefile.am: Add tr2 directory and includes.\n+\t* libstdc++-v3/include/Makefile.in: Regenerate.\n+\n+\t* scripts/create_testsuite_files: Search tr2 directory.\n+\t* testsuite/libstdc++-dg/conformance.exp: Same.\n+\n+\t* testsuite/tr2/bases/requirements/explicit_instantiation.cc: New.\n+\t* testsuite/tr2/bases/requirements/typedefs.cc: New.\n+\t* testsuite/tr2/bases/value.cc: New.\n+\t* testsuite/tr2/direct_bases/requirements/\n+\texplicit_instantiation.cc: New.\n+\t* testsuite/tr2/direct_bases/requirements/typedefs.cc: New.\n+\t* testsuite/tr2/direct_bases/value.cc: New.\n+\n 2011-10-17  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR bootstrap/50715\n@@ -194,7 +214,7 @@\n \t* testsuite/23_containers/deque/modifiers/erase/3.cc: Adjust.\n \n 2011-09-25  Benjamin Kosnik  <bkoz@redhat.com>\n-            Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/48698\n \t* acinclude.m4 (GLIBCXX_ENABLE_SYMVERS): Set libtool_VERSION here."}, {"sha": "9fdaa8d3e70ba946b53c4aab808db910935b6fa7", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -604,6 +604,11 @@ tr1_headers = \\\n \t${tr1_srcdir}/wchar.h \\\n \t${tr1_srcdir}/wctype.h\n \n+tr2_srcdir = ${glibcxx_srcdir}/include/tr2\n+tr2_builddir = ./tr2\n+tr2_headers = \\\n+\t${tr2_srcdir}/type_traits\n+\n decimal_srcdir = ${glibcxx_srcdir}/include/decimal\n decimal_builddir = ./decimal\n decimal_headers = \\\n@@ -887,7 +892,7 @@ endif\n # CLEANFILES and all-local are kept up-to-date.\n allstamped = \\\n \tstamp-std stamp-bits stamp-bits-sup stamp-c_base stamp-c_compatibility \\\n-\tstamp-backward stamp-ext stamp-pb stamp-tr1 stamp-decimal \\\n+\tstamp-backward stamp-ext stamp-pb stamp-tr1 stamp-tr2 stamp-decimal \\\n \tstamp-debug stamp-parallel stamp-profile stamp-profile-impl \\\n \tstamp-host \n \n@@ -1002,6 +1007,11 @@ stamp-tr1: ${tr1_headers}\n \t@-cd ${tr1_builddir} && $(LN_S) $? . 2>/dev/null\n \t@$(STAMP) stamp-tr1\n \n+stamp-tr2: ${tr2_headers}\n+\t@-mkdir -p ${tr2_builddir}\n+\t@-cd ${tr2_builddir} && $(LN_S) $? . 2>/dev/null\n+\t@$(STAMP) stamp-tr2\n+\n stamp-decimal: ${decimal_headers}\n \t@-mkdir -p ${decimal_builddir}\n \t@-cd ${decimal_builddir} && $(LN_S) $? . 2>/dev/null\n@@ -1245,6 +1255,9 @@ install-headers:\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${tr1_builddir}\n \tfor file in ${tr1_headers}; do \\\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${tr1_builddir}; done\n+\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${tr2_builddir}\n+\tfor file in ${tr2_headers}; do \\\n+\t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${tr2_builddir}; done\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${decimal_builddir}\n \tfor file in ${decimal_headers}; do \\\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${decimal_builddir}; done\n@@ -1291,7 +1304,7 @@ clean-local:\n # developer tries to create them via make in the include build\n # directory. (This is more of an example of how this kind of rule can\n # be made.)\n-.PRECIOUS: $(std_headers) $(c_base_headers) $(tr1_headers)\n+.PRECIOUS: $(std_headers) $(c_base_headers) $(tr1_headers) $(tr2_headers)\n \t   $(decimal_headers) $(ext_headers)\n $(std_headers): ; @:\n $(c_base_headers): ; @:"}, {"sha": "5ad5932b80b451fbae6f81d4a2e9b86902b88ff3", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -854,6 +854,11 @@ tr1_headers = \\\n \t${tr1_srcdir}/wchar.h \\\n \t${tr1_srcdir}/wctype.h\n \n+tr2_srcdir = ${glibcxx_srcdir}/include/tr2\n+tr2_builddir = ./tr2\n+tr2_headers = \\\n+\t${tr2_srcdir}/type_traits\n+\n decimal_srcdir = ${glibcxx_srcdir}/include/decimal\n decimal_builddir = ./decimal\n decimal_headers = \\\n@@ -1125,7 +1130,7 @@ PCHFLAGS = -x c++-header -nostdinc++ $(CXXFLAGS)\n # CLEANFILES and all-local are kept up-to-date.\n allstamped = \\\n \tstamp-std stamp-bits stamp-bits-sup stamp-c_base stamp-c_compatibility \\\n-\tstamp-backward stamp-ext stamp-pb stamp-tr1 stamp-decimal \\\n+\tstamp-backward stamp-ext stamp-pb stamp-tr1 stamp-tr2 stamp-decimal \\\n \tstamp-debug stamp-parallel stamp-profile stamp-profile-impl \\\n \tstamp-host \n \n@@ -1402,6 +1407,11 @@ stamp-tr1: ${tr1_headers}\n \t@-cd ${tr1_builddir} && $(LN_S) $? . 2>/dev/null\n \t@$(STAMP) stamp-tr1\n \n+stamp-tr2: ${tr2_headers}\n+\t@-mkdir -p ${tr2_builddir}\n+\t@-cd ${tr2_builddir} && $(LN_S) $? . 2>/dev/null\n+\t@$(STAMP) stamp-tr2\n+\n stamp-decimal: ${decimal_headers}\n \t@-mkdir -p ${decimal_builddir}\n \t@-cd ${decimal_builddir} && $(LN_S) $? . 2>/dev/null\n@@ -1630,6 +1640,9 @@ install-headers:\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${tr1_builddir}\n \tfor file in ${tr1_headers}; do \\\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${tr1_builddir}; done\n+\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${tr2_builddir}\n+\tfor file in ${tr2_headers}; do \\\n+\t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${tr2_builddir}; done\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${decimal_builddir}\n \tfor file in ${decimal_headers}; do \\\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${decimal_builddir}; done\n@@ -1673,7 +1686,7 @@ clean-local:\n # developer tries to create them via make in the include build\n # directory. (This is more of an example of how this kind of rule can\n # be made.)\n-.PRECIOUS: $(std_headers) $(c_base_headers) $(tr1_headers)\n+.PRECIOUS: $(std_headers) $(c_base_headers) $(tr1_headers) $(tr2_headers)\n \t   $(decimal_headers) $(ext_headers)\n $(std_headers): ; @:\n $(c_base_headers): ; @:"}, {"sha": "e860ad79bdb0d3fc63451a1c934bf65d6a7215da", "filename": "libstdc++-v3/include/tr2/type_traits", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Ftype_traits?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -0,0 +1,102 @@\n+// TR2 type_traits -*- C++ -*-\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file tr2/type_traits\n+ *  This is a TR2 C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_TR2_TYPE_TRAITS\n+#define _GLIBCXX_TR2_TYPE_TRAITS 1\n+\n+#pragma GCC system_header\n+#include <type_traits>\n+#include <bits/c++config.h>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace tr2\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  /**\n+   * @defgroup metaprogramming Type Traits\n+   * @ingroup utilities\n+   *\n+   * Compile time type transformation and information.\n+   * @{\n+   */\n+\n+  template<typename... _Elements>\n+    struct typelist;\n+\n+  template<>\n+    struct typelist<>\n+    {\n+      typedef std::true_type \t\t\tempty;\n+    };\n+\n+  template<typename _First, typename... _Rest>\n+    struct typelist<_First, _Rest...>\n+    {\n+      typedef std::false_type \t\t\tempty;\n+\n+      struct first\n+      {\n+\ttypedef _First \t\t\t\ttype;\n+      };\n+\n+      struct rest\n+      {\n+\ttypedef typelist<_Rest...> \t\ttype;\n+      };\n+    };\n+\n+  // Sequence abstraction metafunctions default to looking in the type\n+  template<typename _Tp>\n+    struct first : public _Tp::first { };\n+\n+  template<typename _Tp>\n+    struct rest : public _Tp::rest { };\n+\n+  template<typename _Tp>\n+    struct empty : public _Tp::empty { };\n+\n+\n+  template<typename _Tp>\n+    struct bases\n+    {\n+      typedef typelist<__bases(_Tp)...> \ttype;\n+    };\n+\n+  template<typename _Tp>\n+    struct direct_bases\n+    {\n+      typedef typelist<__direct_bases(_Tp)...> \ttype;\n+    };\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+}\n+}\n+\n+#endif // _GLIBCXX_TR2_TYPE_TRAITS"}, {"sha": "a427eef2db054df5aedd6f7d212d8b6b4534b21f", "filename": "libstdc++-v3/scripts/create_testsuite_files", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Fscripts%2Fcreate_testsuite_files", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Fscripts%2Fcreate_testsuite_files", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Fcreate_testsuite_files?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -32,7 +32,7 @@ cd $srcdir\n # This is the ugly version of \"everything but the current directory\".  It's\n # what has to happen when find(1) doesn't support -mindepth, or -xtype.\n dlist=`echo [0-9][0-9]*`\n-dlist=\"$dlist abi backward ext performance tr1 decimal\"\n+dlist=\"$dlist abi backward ext performance tr1 tr2 decimal\"\n find $dlist \"(\" -type f -o -type l \")\" -name \"*.cc\" -print > $tmp.01\n find $dlist \"(\" -type f -o -type l \")\" -name \"*.c\" -print > $tmp.02\n cat  $tmp.01 $tmp.02 | sort > $tmp.1"}, {"sha": "19fa0e2cc799c5b5027248e719baa66c54259b71", "filename": "libstdc++-v3/testsuite/libstdc++-dg/conformance.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fconformance.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fconformance.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-dg%2Fconformance.exp?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -58,6 +58,7 @@ if {[info exists tests_file] && [file exists $tests_file]} {\n     lappend subdirs \"$srcdir/ext\"\n     lappend subdirs \"$srcdir/performance\"\n     lappend subdirs \"$srcdir/tr1\"\n+    lappend subdirs \"$srcdir/tr2\"\n     lappend subdirs \"$srcdir/decimal\"\n     verbose \"subdirs are $subdirs\"\n "}, {"sha": "ddd6d6fa38e0dfa9436ed2dfbfb5ae6a7076e614", "filename": "libstdc++-v3/testsuite/tr2/bases/requirements/explicit_instantiation.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fbases%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fbases%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fbases%2Frequirements%2Fexplicit_instantiation.cc?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <tr2/type_traits>\n+\n+namespace std\n+{\n+  namespace tr2\n+  {\n+    typedef short test_type;\n+    template struct bases<test_type>;\n+  }\n+}"}, {"sha": "a62acffe89cf7942d0b0ac6796ee33aa341802e8", "filename": "libstdc++-v3/testsuite/tr2/bases/requirements/typedefs.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fbases%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fbases%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fbases%2Frequirements%2Ftypedefs.cc?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr2/type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr2::bases<int>            test_type;\n+  typedef test_type::type            value_type;\n+}"}, {"sha": "415e974a980fb779144d4c277961333771c15285", "filename": "libstdc++-v3/testsuite/tr2/bases/value.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fbases%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fbases%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fbases%2Fvalue.cc?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -0,0 +1,97 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tr2/type_traits>\n+#include <typeinfo>\n+#include <stdexcept>\n+\n+struct A { };\n+struct B1 : virtual public A { };\n+struct B2 : virtual public A { };\n+struct C : public B1, public B2 { };\n+\n+void test()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  // 1\n+  {\n+    typedef std::tr2::bases<A>::type tl;\n+    static_assert(tl::empty::value, \"error\");\n+  }\n+\n+  // 2\n+  {\n+    typedef std::tr2::bases<B1>::type tl1;\n+    typedef std::tr2::bases<B2>::type tl2;\n+\n+    // Sanity check w/ runtime.\n+    bool eq = typeid(tl1) == typeid(tl2);\n+    if (!eq)\n+      throw std::logic_error(\"typelist not equal\");\n+\n+    // Sanity check.\n+    static_assert(tl1::empty::value != std::true_type::value, \"!empty\");\n+    static_assert(tl2::empty::value != std::true_type::value, \"!empty\");\n+\n+    typedef tl1::first::type\t\ttl1_first;\n+    typedef tl1::rest::type\t\ttl1_rest;\n+    typedef tl2::first::type\t\ttl2_first;\n+    typedef tl2::rest::type\t\ttl2_rest;\n+\n+    eq = typeid(tl1_first) == typeid(tl2_first);\n+    if (!eq)\n+      throw std::logic_error(\"base not equal\");\n+\n+    static_assert(tl1_rest::empty::value == std::true_type::value, \"empty\");\n+    static_assert(tl2_rest::empty::value == std::true_type::value, \"empty\");\n+  }\n+\n+  // 3\n+  {\n+    typedef std::tr2::bases<C>::type tl;\n+\n+    // Sanity check.\n+    static_assert(tl::empty::value != std::true_type::value, \"!empty\");\n+  \n+    typedef tl::first::type\t\ttl1_first;\n+    typedef tl::rest::type\t\ttl2;\n+    typedef tl2::first::type\t\ttl2_first;\n+    typedef tl2::rest::type\t\ttl3;\n+    typedef tl3::first::type\t\ttl3_first;\n+    typedef tl3::rest::type\t\ttl4;\n+\n+    bool eq = typeid(tl1_first) == typeid(tl2_first);\n+    if (eq)\n+      throw std::logic_error(\"bases are not equal\");\n+\n+    eq = typeid(tl2_first) == typeid(tl3_first);\n+    if (eq)\n+      throw std::logic_error(\"bases are not equal\");\n+\n+    static_assert(tl4::empty::value == std::true_type::value, \"empty\");\n+  }\n+\n+}\n+\n+int main()\n+{\n+  test();\n+  return 0;\n+}"}, {"sha": "d7fb96aff01067d53b42b81ed8e4ad30b90ac975", "filename": "libstdc++-v3/testsuite/tr2/direct_bases/requirements/explicit_instantiation.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fdirect_bases%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fdirect_bases%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fdirect_bases%2Frequirements%2Fexplicit_instantiation.cc?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <tr2/type_traits>\n+\n+namespace std\n+{\n+  namespace tr2\n+  {\n+    typedef short test_type;\n+    template struct direct_bases<test_type>;\n+  }\n+}"}, {"sha": "7d219ea3ffc3e5f6067ce9fbffee323133e5bdd4", "filename": "libstdc++-v3/testsuite/tr2/direct_bases/requirements/typedefs.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fdirect_bases%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fdirect_bases%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fdirect_bases%2Frequirements%2Ftypedefs.cc?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr2/type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr2::direct_bases<int>            test_type;\n+  typedef test_type::type            value_type;\n+}"}, {"sha": "81d0269c52500fb4259b82d0942ca924d1732bb3", "filename": "libstdc++-v3/testsuite/tr2/direct_bases/value.cc", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fdirect_bases%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4daba88481ad29c76f24b70485017e54f9a19fe3/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fdirect_bases%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fdirect_bases%2Fvalue.cc?ref=4daba88481ad29c76f24b70485017e54f9a19fe3", "patch": "@@ -0,0 +1,91 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tr2/type_traits>\n+#include <typeinfo>\n+#include <stdexcept>\n+\n+struct A { };\n+struct B1 : virtual public A { };\n+struct B2 : virtual public A { };\n+struct C : public B1, public B2 { };\n+\n+void test()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  // 1\n+  {\n+    typedef std::tr2::direct_bases<A>::type tl;\n+    static_assert(tl::empty::value, \"error\");\n+  }\n+\n+  // 2\n+  {\n+    typedef std::tr2::direct_bases<B1>::type tl1;\n+    typedef std::tr2::direct_bases<B2>::type tl2;\n+\n+    // Sanity check w/ runtime.\n+    bool eq = typeid(tl1) == typeid(tl2);\n+    if (!eq)\n+      throw std::logic_error(\"typelist not equal\");\n+\n+    // Sanity check.\n+    static_assert(tl1::empty::value != std::true_type::value, \"!empty\");\n+    static_assert(tl2::empty::value != std::true_type::value, \"!empty\");\n+\n+    typedef tl1::first::type\t\ttl1_first;\n+    typedef tl1::rest::type\t\ttl1_rest;\n+    typedef tl2::first::type\t\ttl2_first;\n+    typedef tl2::rest::type\t\ttl2_rest;\n+\n+    eq = typeid(tl1_first) == typeid(tl2_first);\n+    if (!eq)\n+      throw std::logic_error(\"base not equal\");\n+\n+    static_assert(tl1_rest::empty::value == std::true_type::value, \"empty\");\n+    static_assert(tl2_rest::empty::value == std::true_type::value, \"empty\");\n+  }\n+\n+  // 3\n+  {\n+    typedef std::tr2::direct_bases<C>::type tl;\n+\n+    // Sanity check.\n+    static_assert(tl::empty::value != std::true_type::value, \"!empty\");\n+  \n+    typedef tl::first::type\t\ttl1_first;\n+    typedef tl::rest::type\t\ttl2;\n+    typedef tl2::first::type\t\ttl2_first;\n+    typedef tl2::rest::type\t\ttl3;\n+\n+    bool eq = typeid(tl1_first) == typeid(tl2_first);\n+    if (eq)\n+      throw std::logic_error(\"bases are not equal\");\n+\n+    static_assert(tl3::empty::value == std::true_type::value, \"empty\");\n+  }\n+\n+}\n+\n+int main()\n+{\n+  test();\n+  return 0;\n+}"}]}