{"sha": "3217d7d7aedcb804dc7cc1bf9f25552a9af41c41", "node_id": "C_kwDOANBUbNoAKDMyMTdkN2Q3YWVkY2I4MDRkYzdjYzFiZjlmMjU1NTJhOWFmNDFjNDE", "commit": {"author": {"name": "Josue Nava Bello", "email": "nava@adacore.com", "date": "2022-11-14T13:45:27Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-12-01T13:53:53Z"}, "message": "ada: Minor updates to gnat/doc configuration\n\nMinor updates to conf.py (comments, indentation)\n\ngcc/ada/\n\n\t* doc/share/conf.py: minor updates", "tree": {"sha": "0b8c540eb237571c9ca7ed16a386b80e38cae761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b8c540eb237571c9ca7ed16a386b80e38cae761"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3217d7d7aedcb804dc7cc1bf9f25552a9af41c41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3217d7d7aedcb804dc7cc1bf9f25552a9af41c41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3217d7d7aedcb804dc7cc1bf9f25552a9af41c41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3217d7d7aedcb804dc7cc1bf9f25552a9af41c41/comments", "author": {"login": "nava-j", "id": 116794223, "node_id": "U_kgDOBvYjbw", "avatar_url": "https://avatars.githubusercontent.com/u/116794223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nava-j", "html_url": "https://github.com/nava-j", "followers_url": "https://api.github.com/users/nava-j/followers", "following_url": "https://api.github.com/users/nava-j/following{/other_user}", "gists_url": "https://api.github.com/users/nava-j/gists{/gist_id}", "starred_url": "https://api.github.com/users/nava-j/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nava-j/subscriptions", "organizations_url": "https://api.github.com/users/nava-j/orgs", "repos_url": "https://api.github.com/users/nava-j/repos", "events_url": "https://api.github.com/users/nava-j/events{/privacy}", "received_events_url": "https://api.github.com/users/nava-j/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecc363971aeac52481d92de8b37521f6cc2d38e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc363971aeac52481d92de8b37521f6cc2d38e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecc363971aeac52481d92de8b37521f6cc2d38e6"}], "stats": {"total": 100, "additions": 72, "deletions": 28}, "files": [{"sha": "48f1a96a30994e0c4f3b8515f04f3d908f20f847", "filename": "gcc/ada/doc/share/conf.py", "status": "modified", "additions": 72, "deletions": 28, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3217d7d7aedcb804dc7cc1bf9f25552a9af41c41/gcc%2Fada%2Fdoc%2Fshare%2Fconf.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3217d7d7aedcb804dc7cc1bf9f25552a9af41c41/gcc%2Fada%2Fdoc%2Fshare%2Fconf.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fshare%2Fconf.py?ref=3217d7d7aedcb804dc7cc1bf9f25552a9af41c41", "patch": "@@ -2,6 +2,9 @@\n # Style_Check:Python_Fragment (meaning no pyflakes check)\n #\n # GNAT build configuration file\n+# --------------------------------\n+# This file defines the configuration for all files created\n+# by Sphinx. In this case, pdf (using latex) and html\n \n import sys\n import os\n@@ -13,31 +16,30 @@\n import ada_pygments\n import latex_elements\n \n-# Some configuration values for the various documentation handled by\n-# this conf.py\n-\n+# Define list of documents to be built and their title\n DOCS = {\n-    'gnat_rm': {\n-        'title': 'GNAT Reference Manual'},\n-    'gnat_ugn': {\n-        'title': 'GNAT User\\'s Guide for Native Platforms'},\n-    'gnat-style': {\n-        'title': 'GNAT Coding Style: A Guide for GNAT Developers'}}\n+    \"gnat_rm\": {\"title\": \"GNAT Reference Manual\"},\n+    \"gnat_ugn\": {\"title\": \"GNAT User's Guide for Native Platforms\"},\n+    \"gnat-style\": {\"title\": \"GNAT Coding Style: A Guide for GNAT Developers\"},\n+}\n \n # Then retrieve the source directory\n root_source_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n gnatvsn_spec = os.path.join(root_source_dir, '..', 'gnatvsn.ads')\n basever = os.path.join(root_source_dir, '..', '..', 'BASE-VER')\n texi_fsf = True  # Set to False when FSF doc is switched to sphinx by default\n \n+# get vsn specs\n with open(gnatvsn_spec, 'r') as fd:\n     gnatvsn_content = fd.read()\n \n \n+# read copyright test from .rst file (used also for sanity-checking)\n def get_copyright():\n     return '2008-%s, Free Software Foundation' % time.strftime('%Y')\n \n \n+# get environment gnat version (used also for sanity-checking)\n def get_gnat_version():\n     m = re.search(r'Gnat_Static_Version_String : ' +\n                   r'constant String := \"([^\\(\\)]+)\\(.*\\)?\";',\n@@ -58,6 +60,7 @@ def get_gnat_version():\n     sys.exit(1)\n \n \n+# get gnat build type from runtime\n def get_gnat_build_type():\n     m = re.search(r'Build_Type : constant Gnat_Build_Type := (.+);',\n                   gnatvsn_content)\n@@ -70,7 +73,35 @@ def get_gnat_build_type():\n         sys.exit(1)\n \n \n+# Enable Sphinx extensions\n+# Note that these are active for all files to be build (see DOCS list)\n+extensions = ['sphinx_rtd_theme']\n+\n+# todo interprets \".. todo::\" commands in .rst files\n+# mathjax enables math equations to render correctly\n+extensions += ['sphinx.ext.todo', 'sphinx.ext.mathjax']\n+todo_include_todos = True\n+\n+# define templates source folder\n+templates_path = ['_templates']\n+# define the types of files to read as source for documents\n+source_suffix = '.rst'\n+\n+# enable figure, object, table numeration on documents\n+print('enabling table, code-block and figure numeration')\n+numfig = True\n+numfig_format = {\n+    'figure': 'figure %s',\n+    'table': 'table %s',\n+    'code-block': 'listing %s',\n+    'section': 'section %s',\n+}\n+print('done')\n+\n+\n+# Start building the documents\n # First retrieve the name of the documentation we are building\n+print('checking doc name... ')\n doc_name = os.environ.get('DOC_NAME', None)\n if doc_name is None:\n     print('DOC_NAME environment variable should be set')\n@@ -79,7 +110,7 @@ def get_gnat_build_type():\n if doc_name not in DOCS:\n     print('%s is not a valid documentation name' % doc_name)\n     sys.exit(1)\n-\n+print('found... ' , doc_name)\n \n # Exclude sources that are not part of the current documentation\n exclude_patterns = []\n@@ -88,16 +119,13 @@ def get_gnat_build_type():\n         exclude_patterns.append(d)\n         print('ignoring %s' % d)\n \n+# Special condition for gnat_rm\n if doc_name == 'gnat_rm':\n     exclude_patterns.append('share/gnat_project_manager.rst')\n     print('ignoring share/gnat_project_manager.rst')\n \n-extensions = ['sphinx_rtd_theme']\n-templates_path = ['_templates']\n-source_suffix = '.rst'\n-master_doc = doc_name\n-\n # General information about the project.\n+master_doc = doc_name\n project = DOCS[doc_name]['title']\n \n copyright = get_copyright()\n@@ -107,42 +135,58 @@ def get_gnat_build_type():\n \n pygments_style = None\n tags.add(get_gnat_build_type())\n+\n+# Define figures to be included\n html_theme = 'sphinx_rtd_theme'\n if os.path.isfile('adacore_transparent.png'):\n+    # split html and pdf logos to avoid 'same name' error in sphinx <5.2+\n     html_logo = 'adacore_transparent.png'\n+    latex_logo = 'adacore_transparent.png'\n if os.path.isfile('favicon.ico'):\n     html_favicon = 'favicon.ico'\n \n html_static_path = ['_static']\n \n+# Use gnat.sty for bulding documents\n latex_additional_files = ['gnat.sty']\n \n+# Add copyright info to file\n copyright_macros = {\n     'date': time.strftime(\"%b %d, %Y\"),\n     'edition': 'GNAT %s Edition' % 'Pro' if get_gnat_build_type() == 'PRO'\n                else 'GPL',\n     'name': 'GNU Ada',\n     'tool': 'GNAT',\n-    'version': version}\n+    'version': version\n+}\n \n+# Send info to latex for building document\n latex_elements = {\n-    'preamble': '\\\\usepackage{gnat}\\n' +\n-    latex_elements.TOC_DEPTH +\n-    latex_elements.PAGE_BLANK +\n-    latex_elements.TOC_CMD +\n-    latex_elements.LATEX_HYPHEN +\n-    latex_elements.doc_settings(DOCS[doc_name]['title'],\n-                                get_gnat_version()),\n-    'tableofcontents': latex_elements.TOC % copyright_macros}\n-\n+    'preamble': '\\\\usepackage{gnat}\\n'  # use gnat.sty format\n+    + latex_elements.TOC_DEPTH  # define table of contents max depth to display\n+    + latex_elements.PAGE_BLANK  # define blank pages and when to be used\n+    + latex_elements.TOC_CMD  # write table of contents\n+    + latex_elements.LATEX_HYPHEN  # define latex hyphen '-'\n+    + '\\\\sloppy\\n\\n'  # sloppy/fussy define how words are spread in a paragraph\n+    # the following is used to send title and gnat version to latex\n+    + latex_elements.doc_settings(DOCS[doc_name]['title'], get_gnat_version()),\n+    'tableofcontents': latex_elements.TOC % copyright_macros,  # build TOC\n+    'papersize': 'a4paper,table',  # papersize as a4, else default letter\n+    'figure_align': 'H',  # align figure as square and to paragraph text\n+    'maketitle': '\\\\maketitle',  # execute custom maketitle\n+}\n+\n+# Show page references for cross-reference in docs\n+latex_show_pagerefs = True\n+# Define latex metadata\n latex_documents = [\n     (master_doc, '%s.tex' % doc_name, project, 'AdaCore', 'manual')]\n-\n+# Define .txt files metadata\n texinfo_documents = [\n-    (master_doc, doc_name, project,\n-     'AdaCore', doc_name, doc_name, '')]\n+    (master_doc, doc_name, project, 'AdaCore', doc_name, doc_name, '')]\n \n \n+# setup AdaCore custom pygments\n def setup(app):\n     app.add_lexer('ada', ada_pygments.AdaLexer)\n     app.add_lexer('gpr', ada_pygments.GNATProjectLexer)"}]}