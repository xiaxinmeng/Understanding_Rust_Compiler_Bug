{"sha": "b463e8de6c7e9c7fe8ad2f4f4be126f58b23c07a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ2M2U4ZGU2YzdlOWM3ZmU4YWQyZjRmNGJlMTI2ZjU4YjIzYzA3YQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2008-07-14T04:17:55Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2008-07-14T04:17:55Z"}, "message": "tree-ssa-pre.c (fully_constant_expression): Add fold_convert calls.\n\n2008-07-13  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-ssa-pre.c (fully_constant_expression): Add fold_convert\n\tcalls.\n\t(create_expression_by_pieces): Fix typo.\n\t(do_regular_insertion): Use debug counter here too.\n\nFrom-SVN: r137774", "tree": {"sha": "9638044b79bf342778482b4ac30a3b587bee4016", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9638044b79bf342778482b4ac30a3b587bee4016"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b463e8de6c7e9c7fe8ad2f4f4be126f58b23c07a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b463e8de6c7e9c7fe8ad2f4f4be126f58b23c07a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b463e8de6c7e9c7fe8ad2f4f4be126f58b23c07a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b463e8de6c7e9c7fe8ad2f4f4be126f58b23c07a/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6efc56edbea899b0836781c873dffe52e86e97e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6efc56edbea899b0836781c873dffe52e86e97e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6efc56edbea899b0836781c873dffe52e86e97e5"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "39ebddf6420f8d206a5424ec0f2b9e8687451bed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b463e8de6c7e9c7fe8ad2f4f4be126f58b23c07a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b463e8de6c7e9c7fe8ad2f4f4be126f58b23c07a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b463e8de6c7e9c7fe8ad2f4f4be126f58b23c07a", "patch": "@@ -1,3 +1,10 @@\n+2008-07-13  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-ssa-pre.c (fully_constant_expression): Add fold_convert\n+\tcalls.\n+\t(create_expression_by_pieces): Fix typo.\n+\t(do_regular_insertion): Use debug counter here too.\n+\n 2008-07-14  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR target/35492."}, {"sha": "215074be8f92f4adecee351a047a790d90c54e3c", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b463e8de6c7e9c7fe8ad2f4f4be126f58b23c07a/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b463e8de6c7e9c7fe8ad2f4f4be126f58b23c07a/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=b463e8de6c7e9c7fe8ad2f4f4be126f58b23c07a", "patch": "@@ -1068,8 +1068,14 @@ fully_constant_expression (pre_expr e)\n \t      tree const1 = get_constant_for_value_id (vrep1);\n \t      tree result = NULL;\n \t      if (const0 && const1)\n-\t\tresult = fold_binary (nary->opcode, nary->type, const0,\n-\t\t\t\t      const1);\n+\t\t{\n+\t\t  tree type1 = TREE_TYPE (nary->op[0]);\n+\t\t  tree type2 = TREE_TYPE (nary->op[1]);\n+\t\t  const0 = fold_convert (type1, const0);\n+\t\t  const1 = fold_convert (type2, const1);\n+\t\t  result = fold_binary (nary->opcode, nary->type, const0,\n+\t\t\t\t\tconst1);\n+\t\t}\n \t      if (result && is_gimple_min_invariant (result))\n \t\treturn get_or_alloc_expr_for_constant (result);\n \t      return e;\n@@ -1084,7 +1090,12 @@ fully_constant_expression (pre_expr e)\n \t      tree const0 = get_constant_for_value_id (vrep0);\n \t      tree result = NULL;\n \t      if (const0)\n-\t\tresult = fold_unary (nary->opcode, nary->type, const0);\n+\t\t{\n+\t\t  tree type1 = TREE_TYPE (nary->op[0]);\n+\t\t  const0 = fold_convert (type1, const0);\n+\t\t  result = fold_unary (nary->opcode, nary->type, const0);\n+\t\t}\n+\t      \n \t      if (result && is_gimple_min_invariant (result))\n \t\treturn get_or_alloc_expr_for_constant (result);\n \t      return e;\n@@ -2701,7 +2712,7 @@ create_expression_by_pieces (basic_block block, pre_expr expr, tree stmts,\n \t      if (nary->opcode == POINTER_PLUS_EXPR)\n \t\tgenop2 = fold_convert (sizetype, genop2);\n \t      else\n-\t\tgenop2 = fold_convert (TREE_TYPE (nary->op[0]), genop2);\n+\t\tgenop2 = fold_convert (TREE_TYPE (nary->op[1]), genop2);\n \t      \n \t      folded = fold_build2 (nary->opcode, nary->type,\n \t\t\t\t    genop1, genop2);\n@@ -2945,10 +2956,10 @@ insert_into_preds_of_block (basic_block block, unsigned int exprnum,\n \t      /* When eliminating casts through unions,\n \t\t we sometimes want to convert a real to an integer,\n \t\t which fold_convert will ICE on  */\n-\t      if (fold_convertible_p (type, name))\n+/*\t      if (fold_convertible_p (type, name)) */\n \t\tbuiltexpr = fold_convert (type, name);\n-\t      else\n-\t\tbuiltexpr = convert (type, name);\n+/*\t      else\n+\t\tbuiltexpr = convert (type, name);*/\n \n \t      forcedexpr = force_gimple_operand (builtexpr,\n \t\t\t\t\t\t &stmts, true,\n@@ -3159,7 +3170,7 @@ do_regular_insertion (basic_block block, basic_block dom)\n \t     already existing along every predecessor, and\n \t     it's defined by some predecessor, it is\n \t     partially redundant.  */\n-\t  if (!cant_insert && !all_same && by_some)\n+\t  if (!cant_insert && !all_same && by_some && dbg_cnt (treepre_insert))\n \t    {\n \t      if (insert_into_preds_of_block (block, get_expression_id (expr),\n \t\t\t\t\t      avail))"}]}