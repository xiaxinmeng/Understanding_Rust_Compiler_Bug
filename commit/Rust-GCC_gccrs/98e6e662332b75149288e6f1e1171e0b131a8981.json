{"sha": "98e6e662332b75149288e6f1e1171e0b131a8981", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThlNmU2NjIzMzJiNzUxNDkyODhlNmYxZTExNzFlMGIxMzFhODk4MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-08-05T09:00:34Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-05T09:00:34Z"}, "message": "Use __invoke in std::function internals\n\n\t* include/std/functional (__callable_functor): Remove.\n\t(_Function_handler::_M_invoke): Use __invoke instead of\n\t__callable_functor or mem_fn.\n\t(function::_Callable): Use lvalue in result_of expression.\n\t(function): Remove TODO comments about allocators.\n\t* testsuite/20_util/function/cons/refqual.cc: New test.\n\nFrom-SVN: r239166", "tree": {"sha": "e80aba6d88bc64cc6ae74dbed81b236ba8fc54d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e80aba6d88bc64cc6ae74dbed81b236ba8fc54d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98e6e662332b75149288e6f1e1171e0b131a8981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98e6e662332b75149288e6f1e1171e0b131a8981", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98e6e662332b75149288e6f1e1171e0b131a8981", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98e6e662332b75149288e6f1e1171e0b131a8981/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db7c335e162876b4c5e3e9e0b5e48ea5febda798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7c335e162876b4c5e3e9e0b5e48ea5febda798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db7c335e162876b4c5e3e9e0b5e48ea5febda798"}], "stats": {"total": 98, "additions": 49, "deletions": 49}, "files": [{"sha": "c6df8abfa6468c733c8517587cf5c832021996a7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e6e662332b75149288e6f1e1171e0b131a8981/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e6e662332b75149288e6f1e1171e0b131a8981/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=98e6e662332b75149288e6f1e1171e0b131a8981", "patch": "@@ -1,3 +1,12 @@\n+2016-08-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/functional (__callable_functor): Remove.\n+\t(_Function_handler::_M_invoke): Use __invoke instead of\n+\t__callable_functor or mem_fn.\n+\t(function::_Callable): Use lvalue in result_of expression.\n+\t(function): Remove TODO comments about allocators.\n+\t* testsuite/20_util/function/cons/refqual.cc: New test.\n+\n 2016-08-04  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/status_cxx2017.xml: Update status table."}, {"sha": "4ca32c3ef077bd25d4d72d5ad447ef233889867c", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 9, "deletions": 49, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e6e662332b75149288e6f1e1171e0b131a8981/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e6e662332b75149288e6f1e1171e0b131a8981/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=98e6e662332b75149288e6f1e1171e0b131a8981", "patch": "@@ -1483,33 +1483,6 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n     : __is_location_invariant<_Tp>\n     { };\n \n-  // Converts a reference to a function object into a callable\n-  // function object.\n-  template<typename _Functor>\n-    inline _Functor&\n-    __callable_functor(_Functor& __f)\n-    { return __f; }\n-\n-  template<typename _Member, typename _Class>\n-    inline _Mem_fn<_Member _Class::*>\n-    __callable_functor(_Member _Class::* &__p)\n-    { return std::mem_fn(__p); }\n-\n-  template<typename _Member, typename _Class>\n-    inline _Mem_fn<_Member _Class::*>\n-    __callable_functor(_Member _Class::* const &__p)\n-    { return std::mem_fn(__p); }\n-\n-  template<typename _Member, typename _Class>\n-    inline _Mem_fn<_Member _Class::*>\n-    __callable_functor(_Member _Class::* volatile &__p)\n-    { return std::mem_fn(__p); }\n-\n-  template<typename _Member, typename _Class>\n-    inline _Mem_fn<_Member _Class::*>\n-    __callable_functor(_Member _Class::* const volatile &__p)\n-    { return std::mem_fn(__p); }\n-\n   template<typename _Signature>\n     class function;\n \n@@ -1731,8 +1704,8 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       static _Res\n       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)\n       {\n-\treturn std::__callable_functor(**_Base::_M_get_pointer(__functor))(\n-\t      std::forward<_ArgTypes>(__args)...);\n+\treturn std::__invoke(**_Base::_M_get_pointer(__functor),\n+\t\t\t     std::forward<_ArgTypes>(__args)...);\n       }\n     };\n \n@@ -1746,8 +1719,8 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       static void\n       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)\n       {\n-\tstd::__callable_functor(**_Base::_M_get_pointer(__functor))(\n-\t    std::forward<_ArgTypes>(__args)...);\n+\tstd::__invoke(**_Base::_M_get_pointer(__functor),\n+\t\t      std::forward<_ArgTypes>(__args)...);\n       }\n     };\n \n@@ -1763,8 +1736,8 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       static _Res\n       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)\n       {\n-\treturn std::mem_fn(_Base::_M_get_pointer(__functor)->__value)(\n-\t    std::forward<_ArgTypes>(__args)...);\n+\treturn std::__invoke(_Base::_M_get_pointer(__functor)->__value,\n+\t\t\t     std::forward<_ArgTypes>(__args)...);\n       }\n     };\n \n@@ -1803,8 +1776,8 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       static void\n       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)\n       {\n-\tstd::mem_fn(_Base::_M_get_pointer(__functor)->__value)(\n-\t    std::forward<_ArgTypes>(__args)...);\n+\tstd::__invoke(_Base::_M_get_pointer(__functor)->__value,\n+\t\t      std::forward<_ArgTypes>(__args)...);\n       }\n     };\n \n@@ -1826,7 +1799,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       typedef _Res _Signature_type(_ArgTypes...);\n \n       template<typename _Func,\n-\t       typename _Res2 = typename result_of<_Func(_ArgTypes...)>::type>\n+\t       typename _Res2 = typename result_of<_Func&(_ArgTypes...)>::type>\n \tstruct _Callable : __check_func_return_type<_Res2, _Res> { };\n \n       // Used so the return type convertibility checks aren't done when\n@@ -1878,8 +1851,6 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t__x.swap(*this);\n       }\n \n-      // TODO: needs allocator_arg_t\n-\n       /**\n        *  @brief Builds a %function that targets a copy of the incoming\n        *  function object.\n@@ -2006,17 +1977,6 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \tstd::swap(_M_invoker, __x._M_invoker);\n       }\n \n-      // TODO: needs allocator_arg_t\n-      /*\n-      template<typename _Functor, typename _Alloc>\n-\tvoid\n-\tassign(_Functor&& __f, const _Alloc& __a)\n-\t{\n-\t  function(allocator_arg, __a,\n-\t\t   std::forward<_Functor>(__f)).swap(*this);\n-\t}\n-      */\n-\n       // [3.7.2.3] function capacity\n \n       /**"}, {"sha": "237057965575a310de650a7eb23f4c6f67e4fd35", "filename": "libstdc++-v3/testsuite/20_util/function/cons/refqual.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e6e662332b75149288e6f1e1171e0b131a8981/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Frefqual.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e6e662332b75149288e6f1e1171e0b131a8981/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Frefqual.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Frefqual.cc?ref=98e6e662332b75149288e6f1e1171e0b131a8981", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <functional>\n+\n+struct F {\n+  void operator()() && { }\n+  int operator()() & { return 0; }\n+};\n+\n+int main() {\n+  F f;\n+  std::function<int()> ff{f};\n+  return ff();\n+}"}]}