{"sha": "e967cc2f9a32c2c43fe80e657b8ae271b53f87d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk2N2NjMmY5YTMyYzJjNDNmZTgwZTY1N2I4YWUyNzFiNTNmODdkMw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T18:20:08Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T18:20:08Z"}, "message": "lower-subreg.c: Use rtx_insn\n\ngcc/\n\t* lower-subreg.c (simple_move): Strengthen param \"insn\" from rtx\n\tto rtx_insn *.\n\t(resolve_reg_notes): Likewise.\n\t(resolve_simple_move): Likewise for return type, param \"insn\", and\n\tlocals \"insns\", \"minsn\".\n\t(resolve_clobber): Strengthen param \"insn\" from rtx to rtx_insn *.\n\t(resolve_use): Likewise.\n\t(resolve_debug): Likewise.\n\t(find_decomposable_shift_zext): Likewise.\n\t(resolve_shift_zext): Likewise for return type, param \"insn\", and\n\tlocals \"insns\", \"in\".  Eliminate use of NULL_RTX in favor of NULL.\n\t(decompose_multiword_subregs): Likewise for local \"insn\",\n\t\"orig_insn\", \"decomposed_shift\", \"end\".\n\nFrom-SVN: r214346", "tree": {"sha": "d4d86595e5c10d131f7329aae6b859e88c51bd0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4d86595e5c10d131f7329aae6b859e88c51bd0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e967cc2f9a32c2c43fe80e657b8ae271b53f87d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e967cc2f9a32c2c43fe80e657b8ae271b53f87d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e967cc2f9a32c2c43fe80e657b8ae271b53f87d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e967cc2f9a32c2c43fe80e657b8ae271b53f87d3/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95ecfb261b5a92ca7fbd9d71098827dc02b4e518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ecfb261b5a92ca7fbd9d71098827dc02b4e518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95ecfb261b5a92ca7fbd9d71098827dc02b4e518"}], "stats": {"total": 65, "additions": 42, "deletions": 23}, "files": [{"sha": "6846314a5e7972368d8f23031f45b5040e4edbf2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e967cc2f9a32c2c43fe80e657b8ae271b53f87d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e967cc2f9a32c2c43fe80e657b8ae271b53f87d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e967cc2f9a32c2c43fe80e657b8ae271b53f87d3", "patch": "@@ -1,3 +1,19 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* lower-subreg.c (simple_move): Strengthen param \"insn\" from rtx\n+\tto rtx_insn *.\n+\t(resolve_reg_notes): Likewise.\n+\t(resolve_simple_move): Likewise for return type, param \"insn\", and\n+\tlocals \"insns\", \"minsn\".\n+\t(resolve_clobber): Strengthen param \"insn\" from rtx to rtx_insn *.\n+\t(resolve_use): Likewise.\n+\t(resolve_debug): Likewise.\n+\t(find_decomposable_shift_zext): Likewise.\n+\t(resolve_shift_zext): Likewise for return type, param \"insn\", and\n+\tlocals \"insns\", \"in\".  Eliminate use of NULL_RTX in favor of NULL.\n+\t(decompose_multiword_subregs): Likewise for local \"insn\",\n+\t\"orig_insn\", \"decomposed_shift\", \"end\".\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* basic-block.h (basic_block split_edge_and_insert): Strengthen"}, {"sha": "df1c6679aa54e06ffba4920f68a14a86aae8cb02", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e967cc2f9a32c2c43fe80e657b8ae271b53f87d3/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e967cc2f9a32c2c43fe80e657b8ae271b53f87d3/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=e967cc2f9a32c2c43fe80e657b8ae271b53f87d3", "patch": "@@ -321,7 +321,7 @@ simple_move_operand (rtx x)\n    is called.  */\n \n static rtx\n-simple_move (rtx insn, bool speed_p)\n+simple_move (rtx_insn *insn, bool speed_p)\n {\n   rtx x;\n   rtx set;\n@@ -800,7 +800,7 @@ adjust_decomposed_uses (rtx *px, void *data ATTRIBUTE_UNUSED)\n    INSN.  */\n \n static void\n-resolve_reg_notes (rtx insn)\n+resolve_reg_notes (rtx_insn *insn)\n {\n   rtx *pnote, note;\n \n@@ -870,10 +870,11 @@ can_decompose_p (rtx x)\n    we don't change anything, return INSN, otherwise return the start\n    of the sequence of moves.  */\n \n-static rtx\n-resolve_simple_move (rtx set, rtx insn)\n+static rtx_insn *\n+resolve_simple_move (rtx set, rtx_insn *insn)\n {\n-  rtx src, dest, real_dest, insns;\n+  rtx src, dest, real_dest;\n+  rtx_insn *insns;\n   enum machine_mode orig_mode, dest_mode;\n   unsigned int words;\n   bool pushing;\n@@ -915,7 +916,8 @@ resolve_simple_move (rtx set, rtx insn)\n \t  || (GET_MODE_SIZE (orig_mode)\n \t      != GET_MODE_SIZE (GET_MODE (SUBREG_REG (dest))))))\n     {\n-      rtx reg, minsn, smove;\n+      rtx reg, smove;\n+      rtx_insn *minsn;\n \n       reg = gen_reg_rtx (orig_mode);\n       minsn = emit_move_insn (reg, src);\n@@ -1062,7 +1064,8 @@ resolve_simple_move (rtx set, rtx insn)\n \n   if (real_dest != NULL_RTX)\n     {\n-      rtx mdest, minsn, smove;\n+      rtx mdest, smove;\n+      rtx_insn *minsn;\n \n       if (dest_mode == orig_mode)\n \tmdest = dest;\n@@ -1108,7 +1111,7 @@ resolve_simple_move (rtx set, rtx insn)\n    component registers.  Return whether we changed something.  */\n \n static bool\n-resolve_clobber (rtx pat, rtx insn)\n+resolve_clobber (rtx pat, rtx_insn *insn)\n {\n   rtx reg;\n   enum machine_mode orig_mode;\n@@ -1149,7 +1152,7 @@ resolve_clobber (rtx pat, rtx insn)\n    whether we changed something.  */\n \n static bool\n-resolve_use (rtx pat, rtx insn)\n+resolve_use (rtx pat, rtx_insn *insn)\n {\n   if (resolve_reg_p (XEXP (pat, 0)) || resolve_subreg_p (XEXP (pat, 0)))\n     {\n@@ -1165,7 +1168,7 @@ resolve_use (rtx pat, rtx insn)\n /* A VAR_LOCATION can be simplified.  */\n \n static void\n-resolve_debug (rtx insn)\n+resolve_debug (rtx_insn *insn)\n {\n   for_each_rtx (&PATTERN (insn), adjust_decomposed_uses, NULL_RTX);\n \n@@ -1180,7 +1183,7 @@ resolve_debug (rtx insn)\n    if INSN is decomposable.  */\n \n static bool\n-find_decomposable_shift_zext (rtx insn, bool speed_p)\n+find_decomposable_shift_zext (rtx_insn *insn, bool speed_p)\n {\n   rtx set;\n   rtx op;\n@@ -1236,33 +1239,33 @@ find_decomposable_shift_zext (rtx insn, bool speed_p)\n    and 'set to zero' insn.  Return a pointer to the new insn when a\n    replacement was done.  */\n \n-static rtx\n-resolve_shift_zext (rtx insn)\n+static rtx_insn *\n+resolve_shift_zext (rtx_insn *insn)\n {\n   rtx set;\n   rtx op;\n   rtx op_operand;\n-  rtx insns;\n+  rtx_insn *insns;\n   rtx src_reg, dest_reg, dest_upper, upper_src = NULL_RTX;\n   int src_reg_num, dest_reg_num, offset1, offset2, src_offset;\n \n   set = single_set (insn);\n   if (!set)\n-    return NULL_RTX;\n+    return NULL;\n \n   op = SET_SRC (set);\n   if (GET_CODE (op) != ASHIFT\n       && GET_CODE (op) != LSHIFTRT\n       && GET_CODE (op) != ASHIFTRT\n       && GET_CODE (op) != ZERO_EXTEND)\n-    return NULL_RTX;\n+    return NULL;\n \n   op_operand = XEXP (op, 0);\n \n   /* We can tear this operation apart only if the regs were already\n      torn apart.  */\n   if (!resolve_reg_p (SET_DEST (set)) && !resolve_reg_p (op_operand))\n-    return NULL_RTX;\n+    return NULL;\n \n   /* src_reg_num is the number of the word mode register which we\n      are operating on.  For a left shift and a zero_extend on little\n@@ -1326,7 +1329,7 @@ resolve_shift_zext (rtx insn)\n \n   if (dump_file)\n     {\n-      rtx in;\n+      rtx_insn *in;\n       fprintf (dump_file, \"; Replacing insn: %d with insns: \", INSN_UID (insn));\n       for (in = insns; in != insn; in = NEXT_INSN (in))\n \tfprintf (dump_file, \"%d \", INSN_UID (in));\n@@ -1465,7 +1468,7 @@ decompose_multiword_subregs (bool decompose_copies)\n   speed_p = optimize_function_for_speed_p (cfun);\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n-      rtx insn;\n+      rtx_insn *insn;\n \n       FOR_BB_INSNS (bb, insn)\n \t{\n@@ -1545,7 +1548,7 @@ decompose_multiword_subregs (bool decompose_copies)\n \n       FOR_EACH_BB_FN (bb, cfun)\n \t{\n-\t  rtx insn;\n+\t  rtx_insn *insn;\n \n \t  FOR_BB_INSNS (bb, insn)\n \t    {\n@@ -1572,7 +1575,7 @@ decompose_multiword_subregs (bool decompose_copies)\n \t\t  set = simple_move (insn, speed_p);\n \t\t  if (set)\n \t\t    {\n-\t\t      rtx orig_insn = insn;\n+\t\t      rtx_insn *orig_insn = insn;\n \t\t      bool cfi = control_flow_insn_p (insn);\n \n \t\t      /* We can end up splitting loads to multi-word pseudos\n@@ -1602,7 +1605,7 @@ decompose_multiword_subregs (bool decompose_copies)\n \t\t    }\n \t\t  else\n \t\t    {\n-\t\t      rtx decomposed_shift;\n+\t\t      rtx_insn *decomposed_shift;\n \n \t\t      decomposed_shift = resolve_shift_zext (insn);\n \t\t      if (decomposed_shift != NULL_RTX)\n@@ -1644,7 +1647,7 @@ decompose_multiword_subregs (bool decompose_copies)\n \t loads to appear.  */\n       EXECUTE_IF_SET_IN_BITMAP (sub_blocks, 0, i, sbi)\n \t{\n-\t  rtx insn, end;\n+\t  rtx_insn *insn, *end;\n \t  edge fallthru;\n \n \t  bb = BASIC_BLOCK_FOR_FN (cfun, i);"}]}