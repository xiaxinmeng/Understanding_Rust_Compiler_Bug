{"sha": "24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRhMTIwYWMwMTgwMmFjM2U3Y2QwZDU2ODJhYzEyYzgxYzNmOGYwZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-02T09:52:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-02T09:52:36Z"}, "message": "[multiple changes]\n\n2011-09-02  Vincent Celier  <celier@adacore.com>\n\n\t* prj-conf.adb (Add_Default_GNAT_Naming_Scheme): Declare \"gcc\"\n\tas the compiler driver so Is_Compilable returns True for sources.\n\t* prj-nmsc.adb (Override_Kind): When Kind is Sep, set the source\n\tfor the body.\n\n2011-09-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Analyze_PPC_In_Decl_Part): for a class-wide\n\tcondition, a reference to a controlling formal must be interpreted\n\tas having the class-wide type (or an access to such) so that the\n\tinherited condition can be properly applied to any overriding\n\toperation (see ARM12 6.6.1 (7)).\n\n2011-09-02  Tristan Gingold  <gingold@adacore.com>\n\n\t* init.c (__gnat_is_vms_v7): Fix case and add prototype\n\tfor LIB$GETSYI.\n\n2011-09-02  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch3.adb (Expand_N_Object_Declaration): Do not copy the\n\tinitializing expression of a class-wide interface object declaration\n\tif its type is limited.\n\n2011-09-02  Johannes Kanig  <kanig@adacore.com>\n\n\t* sem_util.adb (Unique_Name): To obtain a unique name for enumeration\n\tliterals, take into account the type name; the type is *not*\n\tthe scope for an enumeration literal.\n\n2011-09-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Check_Overriding_Indicator): add special check\n\tto reject an overriding indicator on a user-defined Adjust\n\tsubprogram for a limited controlled type.\n\n2011-09-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve_Actuals): add missing call to Resolve\n\tfor an actual that is a function call returning an unconstrained\n\tlimited controlled type.\n\n2011-09-02  Tristan Gingold  <gingold@adacore.com>\n\n\t* g-socthi-vms.adb (c_sendmsg, c_recvmsg): Use unpacked msg if on vms 7\n\n2011-09-02  Johannes Kanig  <kanig@adacore.com>\n\n\t* alfa.ads (Name_Of_Heap_Variable): Change value of the HEAP variable\n\tfrom \"HEAP\" to __HEAP Change comment that refers to that variable\n\t* put_alfa.adb: Change comment that refers to that variable\n\nFrom-SVN: r178458", "tree": {"sha": "66eda9b2379067894b4934aa671276a216b4e153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66eda9b2379067894b4934aa671276a216b4e153"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/comments", "author": null, "committer": null, "parents": [{"sha": "c5f5123f4a887df97deebeadb993ec95cbac2c22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5f5123f4a887df97deebeadb993ec95cbac2c22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5f5123f4a887df97deebeadb993ec95cbac2c22"}], "stats": {"total": 287, "additions": 257, "deletions": 30}, "files": [{"sha": "0c81255275dcc09e2ba14fdf734f92440c543ed0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f", "patch": "@@ -1,3 +1,57 @@\n+2011-09-02  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-conf.adb (Add_Default_GNAT_Naming_Scheme): Declare \"gcc\"\n+\tas the compiler driver so Is_Compilable returns True for sources.\n+\t* prj-nmsc.adb (Override_Kind): When Kind is Sep, set the source\n+\tfor the body.\n+\n+2011-09-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_PPC_In_Decl_Part): for a class-wide\n+\tcondition, a reference to a controlling formal must be interpreted\n+\tas having the class-wide type (or an access to such) so that the\n+\tinherited condition can be properly applied to any overriding\n+\toperation (see ARM12 6.6.1 (7)).\n+\n+2011-09-02  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* init.c (__gnat_is_vms_v7): Fix case and add prototype\n+\tfor LIB$GETSYI.\n+\n+2011-09-02  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Do not copy the\n+\tinitializing expression of a class-wide interface object declaration\n+\tif its type is limited.\n+\n+2011-09-02  Johannes Kanig  <kanig@adacore.com>\n+\n+\t* sem_util.adb (Unique_Name): To obtain a unique name for enumeration\n+\tliterals, take into account the type name; the type is *not*\n+\tthe scope for an enumeration literal.\n+\n+2011-09-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Overriding_Indicator): add special check\n+\tto reject an overriding indicator on a user-defined Adjust\n+\tsubprogram for a limited controlled type.\n+\n+2011-09-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Actuals): add missing call to Resolve\n+\tfor an actual that is a function call returning an unconstrained\n+\tlimited controlled type.\n+\n+2011-09-02  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* g-socthi-vms.adb (c_sendmsg, c_recvmsg): Use unpacked msg if on vms 7\n+\n+2011-09-02  Johannes Kanig  <kanig@adacore.com>\n+\n+\t* alfa.ads (Name_Of_Heap_Variable): Change value of the HEAP variable\n+\tfrom \"HEAP\" to __HEAP Change comment that refers to that variable\n+\t* put_alfa.adb: Change comment that refers to that variable\n+\n 2011-09-02  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch4.adb, exp_ch6.adb, prj-nmsc.adb: Minor reformatting."}, {"sha": "7531f9e4b3475c3458b29b87d06c6da69e07ed44", "filename": "gcc/ada/alfa.ads", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Falfa.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Falfa.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Falfa.ads?ref=24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f", "patch": "@@ -91,8 +91,7 @@ package Alfa is\n \n    --    FS . scope line type col entity (-> spec-file . spec-scope)?\n \n-   --      What is the ? marke here, is it part of the actual syntax, or is\n-   --      it a query about a problem, in which case it should be ???\n+   --      (The ? mark stands for an optional entry in the syntax)\n \n    --      scope is the ones-origin scope number for the current file (e.g. 2 =\n    --      reference to the second FS line in this FD block).\n@@ -176,9 +175,9 @@ package Alfa is\n    --        s = subprogram reference in a static call\n \n    --  Special entries for reads and writes to memory reference a special\n-   --  variable called \"HEAP\". These special entries are present in every scope\n-   --  where reads and writes to memory are present. Line and column for this\n-   --  special variable are always 0.\n+   --  variable called \"__HEAP\". These special entries are present in every\n+   --  scope where reads and writes to memory are present. Line and column for\n+   --  this special variable are always 0.\n \n    --    Examples: ??? add examples here\n \n@@ -336,7 +335,7 @@ package Alfa is\n    -- Constants --\n    ---------------\n \n-   Name_Of_Heap_Variable : constant String := \"HEAP\";\n+   Name_Of_Heap_Variable : constant String := \"__HEAP\";\n    --  Name of special variable used in effects to denote reads and writes\n    --  through explicit dereference.\n "}, {"sha": "a8cde1e167910bf41deecbd0ee4968023bf268da", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f", "patch": "@@ -4841,11 +4841,11 @@ package body Exp_Ch3 is\n             return;\n \n          --  Ada 2005 (AI-251): Rewrite the expression that initializes a\n-         --  class-wide object to ensure that we copy the full object,\n-         --  unless we are targetting a VM where interfaces are handled by\n-         --  VM itself. Note that if the root type of Typ is an ancestor\n-         --  of Expr's type, both types share the same dispatch table and\n-         --  there is no need to displace the pointer.\n+         --  class-wide interface object to ensure that we copy the full\n+         --  object, unless we are targetting a VM where interfaces are handled\n+         --  by VM itself. Note that if the root type of Typ is an ancestor of\n+         --  Expr's type, both types share the same dispatch table and there is\n+         --  no need to displace the pointer.\n \n          elsif Comes_From_Source (N)\n            and then Is_Interface (Typ)\n@@ -4978,13 +4978,31 @@ package body Exp_Ch3 is\n \n                      --  Copy the object\n \n-                     Insert_Action (N,\n-                       Make_Object_Declaration (Loc,\n-                         Defining_Identifier => Obj_Id,\n-                         Object_Definition =>\n-                           New_Occurrence_Of\n-                             (Etype (Object_Definition (N)), Loc),\n-                         Expression => New_Expr));\n+                     if not Is_Limited_Record (Expr_Typ) then\n+                        Insert_Action (N,\n+                          Make_Object_Declaration (Loc,\n+                            Defining_Identifier => Obj_Id,\n+                            Object_Definition =>\n+                              New_Occurrence_Of\n+                                (Etype (Object_Definition (N)), Loc),\n+                            Expression => New_Expr));\n+\n+                     --  Rename limited type object since they cannot be copied\n+                     --  This case occurs when the initialization expression\n+                     --  has been previously expanded into a temporary object.\n+\n+                     else pragma Assert (not Comes_From_Source (Expr_Q));\n+\n+                        Insert_Action (N,\n+                          Make_Object_Renaming_Declaration (Loc,\n+                            Defining_Identifier => Obj_Id,\n+                            Subtype_Mark =>\n+                              New_Occurrence_Of\n+                                (Etype (Object_Definition (N)), Loc),\n+                            Name =>\n+                              Unchecked_Convert_To\n+                                (Etype (Object_Definition (N)), New_Expr)));\n+                     end if;\n \n                      --  Dynamically reference the tag associated with the\n                      --  interface."}, {"sha": "51c28fb601a0c7356de611de4eba589774b2bf63", "filename": "gcc/ada/g-socthi-vms.adb", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Fg-socthi-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Fg-socthi-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vms.adb?ref=24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f", "patch": "@@ -42,7 +42,15 @@ package body GNAT.Sockets.Thin is\n    pragma Pack (VMS_Msghdr);\n    --  On VMS 8.x (unlike other platforms), struct msghdr is packed, so a\n    --  specific derived type is required. This structure was not packed on\n-   --  VMS 7.3, so sendmsg and recvmsg fail on earlier VMS versions.\n+   --  VMS 7.3.\n+\n+   function Is_VMS_V7 return Integer;\n+   pragma Import (C, Is_VMS_V7, \"__gnat_is_vms_v7\");\n+   --  Helper (defined in init.c) that returns a non-zero value if the VMS\n+   --  version is 7.x.\n+\n+   VMS_V7 : constant Boolean := Is_VMS_V7 /= 0;\n+   --  True if VMS version is 7.x.\n \n    Non_Blocking_Sockets : aliased Fd_Set;\n    --  When this package is initialized with Process_Blocking_IO set to True,\n@@ -295,23 +303,34 @@ package body GNAT.Sockets.Thin is\n    is\n       Res : C.int;\n \n+      Msg_Addr : System.Address;\n+\n       GNAT_Msg : Msghdr;\n       for GNAT_Msg'Address use Msg;\n       pragma Import (Ada, GNAT_Msg);\n \n-      VMS_Msg : aliased VMS_Msghdr := VMS_Msghdr (GNAT_Msg);\n+      VMS_Msg : aliased VMS_Msghdr;\n \n    begin\n+      if VMS_V7 then\n+         Msg_Addr := Msg;\n+      else\n+         VMS_Msg := VMS_Msghdr (GNAT_Msg);\n+         Msg_Addr := VMS_Msg'Address;\n+      end if;\n+\n       loop\n-         Res := Syscall_Recvmsg (S, VMS_Msg'Address, Flags);\n+         Res := Syscall_Recvmsg (S, Msg_Addr, Flags);\n          exit when SOSC.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n            or else Errno /= SOSC.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n \n-      GNAT_Msg := Msghdr (VMS_Msg);\n+      if not VMS_V7 then\n+         GNAT_Msg := Msghdr (VMS_Msg);\n+      end if;\n \n       return System.CRTL.ssize_t (Res);\n    end C_Recvmsg;\n@@ -327,23 +346,34 @@ package body GNAT.Sockets.Thin is\n    is\n       Res : C.int;\n \n+      Msg_Addr : System.Address;\n+\n       GNAT_Msg : Msghdr;\n       for GNAT_Msg'Address use Msg;\n       pragma Import (Ada, GNAT_Msg);\n \n-      VMS_Msg : aliased VMS_Msghdr := VMS_Msghdr (GNAT_Msg);\n+      VMS_Msg : aliased VMS_Msghdr;\n \n    begin\n+      if VMS_V7 then\n+         Msg_Addr := Msg;\n+      else\n+         VMS_Msg := VMS_Msghdr (GNAT_Msg);\n+         Msg_Addr := VMS_Msg'Address;\n+      end if;\n+\n       loop\n-         Res := Syscall_Sendmsg (S, VMS_Msg'Address, Flags);\n+         Res := Syscall_Sendmsg (S, Msg_Addr, Flags);\n          exit when SOSC.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n            or else Errno /= SOSC.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n \n-      GNAT_Msg := Msghdr (VMS_Msg);\n+      if not VMS_V7 then\n+         GNAT_Msg := Msghdr (VMS_Msg);\n+      end if;\n \n       return System.CRTL.ssize_t (Res);\n    end C_Sendmsg;"}, {"sha": "0cf32e8166f34b850ae9a78b2a268c614bbb571c", "filename": "gcc/ada/init.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f", "patch": "@@ -1749,6 +1749,8 @@ __gnat_set_features (void)\n \n /* Return true if the VMS version is 7.x.  */\n \n+extern unsigned int LIB$GETSYI (int *, ...);\n+\n #define SYI$_VERSION 0x1000\n \n int\n@@ -1763,7 +1765,7 @@ __gnat_is_vms_v7 (void)\n   desc.mbz = 0;\n   desc.adr = version;\n \n-  status = lib$getsyi (&code, 0, &desc);\n+  status = LIB$GETSYI (&code, 0, &desc);\n   if ((status & 1) == 1 && version[1] == '7' && version[2] == '.')\n     return 1;\n   else"}, {"sha": "8b86c462a75d448ab2afe0cd77fdda32858db726", "filename": "gcc/ada/prj-conf.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Fprj-conf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Fprj-conf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-conf.adb?ref=24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f", "patch": "@@ -435,6 +435,8 @@ package body Prj.Conf is\n          Create_Attribute (Name_Default_Language, \"ada\");\n \n          Compiler := Create_Package (Project_Tree, Config_File, \"compiler\");\n+         Create_Attribute\n+           (Name_Driver, \"gcc\", \"ada\", Pkg => Compiler);\n          Create_Attribute\n            (Name_Language_Kind, \"unit_based\", \"ada\", Pkg => Compiler);\n          Create_Attribute"}, {"sha": "5761209a01964482891fdfb3903a39009950056a", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f", "patch": "@@ -6766,8 +6766,13 @@ package body Prj.Nmsc is\n                        & \" kind=\" & Source.Kind'Img);\n       end if;\n \n-      if Source.Kind in Spec_Or_Body and then Source.Unit /= null then\n-         Source.Unit.File_Names (Source.Kind) := Source;\n+      if Source.Unit /= null then\n+         if Source.Kind = Spec then\n+            Source.Unit.File_Names (Spec) := Source;\n+\n+         else\n+            Source.Unit.File_Names (Impl) := Source;\n+         end if;\n       end if;\n    end Override_Kind;\n "}, {"sha": "49dfac87df10fa89b99886fe69b8e30fbabd4e0a", "filename": "gcc/ada/put_alfa.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Fput_alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Fput_alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fput_alfa.adb?ref=24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f", "patch": "@@ -151,8 +151,8 @@ begin\n                   Write_Info_Char (S.Scope_Name (N));\n                end loop;\n \n-               --  Default value of (0,0) is used for the special HEAP variable\n-               --  so use another default value.\n+               --  Default value of (0,0) is used for the special __HEAP\n+               --  variable so use another default value.\n \n                Entity_Line := 0;\n                Entity_Col  := 1;"}, {"sha": "4b4e2ca6fc095cb70b43bfcbb357d1cffed49ab0", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f", "patch": "@@ -4956,6 +4956,20 @@ package body Sem_Ch6 is\n                  (\"subprogram & overrides inherited operation #\", Spec, Subp);\n             end if;\n \n+         --  Special-case to fix a GNAT oddity:  Limited_Controlled is declared\n+         --  as an extension of Root_Controlled, and thus has a useless Adjust\n+         --  operation. This operation should not be inherited by other limited\n+         --  controlled types. An explicit Adjust for them is not overriding.\n+\n+         elsif Must_Override (Spec)\n+           and then Chars (Overridden_Subp) = Name_Adjust\n+           and then Is_Limited_Type (Etype (First_Formal (Subp)))\n+           and then Present (Alias (Overridden_Subp))\n+           and then Is_Predefined_File_Name\n+             (Unit_File_Name (Get_Source_Unit (Alias (Overridden_Subp))))\n+         then\n+            Error_Msg_NE (\"subprogram & is not overriding\", Spec, Subp);\n+\n          elsif Is_Subprogram (Subp) then\n             if Is_Init_Proc (Subp) then\n                null;"}, {"sha": "27f4c8a13d02841064a992296e6087124fbbdef5", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f", "patch": "@@ -39,6 +39,7 @@ with Elists;   use Elists;\n with Errout;   use Errout;\n with Exp_Dist; use Exp_Dist;\n with Exp_Util; use Exp_Util;\n+with Freeze;   use Freeze;\n with Lib;      use Lib;\n with Lib.Writ; use Lib.Writ;\n with Lib.Xref; use Lib.Xref;\n@@ -261,6 +262,99 @@ package body Sem_Prag is\n       Preanalyze_Spec_Expression\n         (Get_Pragma_Arg (Arg1), Standard_Boolean);\n \n+      if Class_Present (N) then\n+         declare\n+            T   : constant Entity_Id := Find_Dispatching_Type (S);\n+\n+            ACW : Entity_Id := Empty;\n+            --  Access to T'class, created if there is a controlling formal\n+            --  that is an access parameter.\n+\n+            function Get_ACW return Entity_Id;\n+            --  If the expression has a reference to an controlling access\n+            --  parameter, create an access to T'class for the necessary\n+            --  conversions if one does not exist.\n+\n+            function Process (N : Node_Id) return Traverse_Result;\n+            --  ARM 6.1.1: Within the expression for a Pre'Class or Post'Class\n+            --  aspect for a primitive subprogram of a tagged type T, a name\n+            --  that denotes a formal parameter of type T is interpreted as\n+            --  having type T'Class. Similarly, a name that denotes a formal\n+            --  accessparameter of type access-to-T is interpreted as having\n+            --  type access-to-T'Class. This ensures the expression is well-\n+            --  defined for a primitive subprogram of a type descended from T.\n+\n+            -------------\n+            -- Get_ACW --\n+            -------------\n+\n+            function Get_ACW return Entity_Id is\n+               Loc  : constant Source_Ptr := Sloc (N);\n+               Decl : Node_Id;\n+\n+            begin\n+               if No (ACW) then\n+                  Decl := Make_Full_Type_Declaration (Loc,\n+                    Defining_Identifier => Make_Temporary (Loc, 'T'),\n+                    Type_Definition =>\n+                       Make_Access_To_Object_Definition (Loc,\n+                       Subtype_Indication =>\n+                         New_Occurrence_Of (Class_Wide_Type (T), Loc),\n+                       All_Present => True));\n+\n+                  Insert_Before (Unit_Declaration_Node (S), Decl);\n+                  Analyze (Decl);\n+                  ACW := Defining_Identifier (Decl);\n+                  Freeze_Before (Unit_Declaration_Node (S), ACW);\n+               end if;\n+\n+               return ACW;\n+            end Get_ACW;\n+\n+            -------------\n+            -- Process --\n+            -------------\n+\n+            function Process (N : Node_Id) return Traverse_Result is\n+               Loc : constant Source_Ptr := Sloc (N);\n+               Typ : Entity_Id;\n+\n+            begin\n+               if Is_Entity_Name (N)\n+                 and then Is_Formal (Entity (N))\n+                 and then Nkind (Parent (N)) /= N_Type_Conversion\n+               then\n+                  if Etype (Entity (N)) = T then\n+                     Typ := Class_Wide_Type (T);\n+\n+                  elsif Is_Access_Type (Etype (Entity (N)))\n+                    and then Designated_Type (Etype (Entity (N))) = T\n+                  then\n+                     Typ := Get_ACW;\n+                  else\n+                     Typ := Empty;\n+                  end if;\n+\n+                  if Present (Typ) then\n+                     Rewrite (N,\n+                       Make_Type_Conversion (Loc,\n+                         Subtype_Mark =>\n+                           New_Occurrence_Of (Typ, Loc),\n+                         Expression  => New_Occurrence_Of (Entity (N), Loc)));\n+                     Set_Etype (N, Typ);\n+                  end if;\n+               end if;\n+\n+               return OK;\n+            end Process;\n+\n+            procedure Replace_Type is new Traverse_Proc (Process);\n+\n+         begin\n+            Replace_Type (Get_Pragma_Arg (Arg1));\n+         end;\n+      end if;\n+\n       --  Remove the subprogram from the scope stack now that the pre-analysis\n       --  of the precondition/postcondition is done.\n \n@@ -1838,6 +1932,12 @@ package body Sem_Prag is\n                   Chain_PPC (PO);\n                   return;\n \n+               elsif Nkind (PO) = N_Subprogram_Declaration\n+                 and then In_Instance\n+               then\n+                  Chain_PPC (PO);\n+                  return;\n+\n                --  For all other cases of non source code, do nothing\n \n                else"}, {"sha": "7668aa9e2177d01ccfec21dee1a0d5043319773e", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f", "patch": "@@ -3446,6 +3446,7 @@ package body Sem_Res is\n               and then (Is_Controlled (Etype (F)) or else Has_Task (Etype (F)))\n             then\n                Establish_Transient_Scope (A, False);\n+               Resolve (A, Etype (F));\n \n             --  A small optimization: if one of the actuals is a concatenation\n             --  create a block around a procedure call to recover stack space."}, {"sha": "23105c55a14b025c38aa80f04ba8139faca879c1", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=24a120ac01802ac3e7cd0d5682ac12c81c3f8f0f", "patch": "@@ -12747,6 +12747,8 @@ package body Sem_Util is\n       then\n          return Get_Name_String (Name_Standard) & \"__\" &\n            Get_Name_String (Chars (E));\n+      elsif Ekind (E) = E_Enumeration_Literal then\n+         return Unique_Name (Etype (E)) & \"__\" & Get_Name_String (Chars (E));\n \n       else\n          return Get_Scoped_Name (E);"}]}