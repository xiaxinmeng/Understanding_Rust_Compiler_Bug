{"sha": "7cd13c1cad1f383d23dbd999b7f76b6db0c51c64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NkMTNjMWNhZDFmMzgzZDIzZGJkOTk5YjdmNzZiNmRiMGM1MWM2NA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-10-12T14:21:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-10-12T14:21:43Z"}, "message": "tree-ssa-forwprop.c (forward_propagate_into_cond): For combining both operands require either both have single uses or combining...\n\n2007-10-12  Richard Guenther <rguenther@suse.de>\n\n\t* tree-ssa-forwprop.c (forward_propagate_into_cond): For\n\tcombining both operands require either both have single uses\n\tor combining to a constant.\n\nFrom-SVN: r129261", "tree": {"sha": "636e64fecd4d0a4db7898531177e24b66f90b990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/636e64fecd4d0a4db7898531177e24b66f90b990"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cd13c1cad1f383d23dbd999b7f76b6db0c51c64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cd13c1cad1f383d23dbd999b7f76b6db0c51c64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cd13c1cad1f383d23dbd999b7f76b6db0c51c64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cd13c1cad1f383d23dbd999b7f76b6db0c51c64/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2085738a90651c26c26d7eb4300b9372bb62897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2085738a90651c26c26d7eb4300b9372bb62897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2085738a90651c26c26d7eb4300b9372bb62897"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "9e7a02b30cc5700b254dd829c622f609c0832b16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd13c1cad1f383d23dbd999b7f76b6db0c51c64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd13c1cad1f383d23dbd999b7f76b6db0c51c64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cd13c1cad1f383d23dbd999b7f76b6db0c51c64", "patch": "@@ -1,3 +1,9 @@\n+2007-10-12  Richard Guenther <rguenther@suse.de>\n+\n+\t* tree-ssa-forwprop.c (forward_propagate_into_cond): For\n+\tcombining both operands require either both have single uses\n+\tor combining to a constant.\n+\n 2007-10-12  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/26198"}, {"sha": "047d057bfc997a5377c9a1ae105e4c815b2464c4", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd13c1cad1f383d23dbd999b7f76b6db0c51c64/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd13c1cad1f383d23dbd999b7f76b6db0c51c64/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=7cd13c1cad1f383d23dbd999b7f76b6db0c51c64", "patch": "@@ -360,7 +360,7 @@ forward_propagate_into_cond (tree cond_expr, tree stmt)\n     tree tmp = NULL_TREE;\n     tree cond = COND_EXPR_COND (cond_expr);\n     tree name, def_stmt, rhs0 = NULL_TREE, rhs1 = NULL_TREE;\n-    bool single_use_p;\n+    bool single_use0_p = false, single_use1_p = false;\n \n     /* We can do tree combining on SSA_NAME and comparison expressions.  */\n     if (COMPARISON_CLASS_P (cond)\n@@ -369,23 +369,23 @@ forward_propagate_into_cond (tree cond_expr, tree stmt)\n \t/* For comparisons use the first operand, that is likely to\n \t   simplify comparisons against constants.  */\n \tname = TREE_OPERAND (cond, 0);\n-\tdef_stmt = get_prop_source_stmt (name, false, &single_use_p);\n+\tdef_stmt = get_prop_source_stmt (name, false, &single_use0_p);\n \tif (def_stmt != NULL_TREE\n \t    && can_propagate_from (def_stmt))\n \t  {\n \t    tree op1 = TREE_OPERAND (cond, 1);\n \t    rhs0 = GIMPLE_STMT_OPERAND (def_stmt, 1);\n \t    tmp = combine_cond_expr_cond (TREE_CODE (cond), boolean_type_node,\n \t\t\t\t          fold_convert (TREE_TYPE (op1), rhs0),\n-\t\t\t\t          op1, !single_use_p);\n+\t\t\t\t          op1, !single_use0_p);\n \t  }\n \t/* If that wasn't successful, try the second operand.  */\n \tif (tmp == NULL_TREE\n \t    && TREE_CODE (TREE_OPERAND (cond, 1)) == SSA_NAME)\n \t  {\n \t    tree op0 = TREE_OPERAND (cond, 0);\n \t    name = TREE_OPERAND (cond, 1);\n-\t    def_stmt = get_prop_source_stmt (name, false, &single_use_p);\n+\t    def_stmt = get_prop_source_stmt (name, false, &single_use1_p);\n \t    if (def_stmt == NULL_TREE\n \t        || !can_propagate_from (def_stmt))\n \t      return did_something;\n@@ -394,7 +394,7 @@ forward_propagate_into_cond (tree cond_expr, tree stmt)\n \t    tmp = combine_cond_expr_cond (TREE_CODE (cond), boolean_type_node,\n \t\t\t\t\t  op0,\n \t\t\t\t          fold_convert (TREE_TYPE (op0), rhs1),\n-\t\t\t\t\t  !single_use_p);\n+\t\t\t\t\t  !single_use1_p);\n \t  }\n \t/* If that wasn't successful either, try both operands.  */\n \tif (tmp == NULL_TREE\n@@ -403,7 +403,7 @@ forward_propagate_into_cond (tree cond_expr, tree stmt)\n \t  tmp = combine_cond_expr_cond (TREE_CODE (cond), boolean_type_node,\n \t\t\t\t\trhs0,\n \t\t\t\t        fold_convert (TREE_TYPE (rhs0), rhs1),\n-\t\t\t\t\t!single_use_p);\n+\t\t\t\t\t!(single_use0_p && single_use1_p));\n       }\n     else if (TREE_CODE (cond) == SSA_NAME)\n       {"}]}