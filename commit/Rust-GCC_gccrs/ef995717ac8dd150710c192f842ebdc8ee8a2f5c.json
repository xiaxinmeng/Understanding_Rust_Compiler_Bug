{"sha": "ef995717ac8dd150710c192f842ebdc8ee8a2f5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY5OTU3MTdhYzhkZDE1MDcxMGMxOTJmODQyZWJkYzhlZThhMmY1Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-11-12T12:17:01Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-11-12T12:17:01Z"}, "message": "alpha.h (FUNCTION_VALUE, [...]): Remove.\n\n\t* config/alpha/alpha.h (FUNCTION_VALUE, LIBCALL_VALUE,\n\tFUNCTION_VALUE_REGNO_P): Remove.\n\t* config/alpha/alpha-protos.h (function_value): Remove.\n\t* config/alpha/alpha.c (function_value): Rename to...\n\t(alpha_function_value_1): ... this.  Make static.\n\t(alpha_function_value, alpha_libcall_value,\n\talpha_function_value_regno_p): New functions.\n\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE,\n\tTARGET_FUNCTION_VALUE_REGNO_P): Define.\n\n\t* config/alpha/alpha.h (REGISTER_MOVE_COST, MEMORY_MOVE_COST): Remove.\n\t* config/alpha/alpha.c (alpha_memory_latency): Make static.\n\t(alpha_register_move_cost, alpha_memory_move_cost): New functions.\n\t(TARGET_REGISTER_MOVE_COST, TARGET_MEMORY_MOVE_COST): Define.\n\nFrom-SVN: r230250", "tree": {"sha": "b7e464bbdfcc73d47013f51a993cc4197fc42c18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7e464bbdfcc73d47013f51a993cc4197fc42c18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef995717ac8dd150710c192f842ebdc8ee8a2f5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef995717ac8dd150710c192f842ebdc8ee8a2f5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef995717ac8dd150710c192f842ebdc8ee8a2f5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef995717ac8dd150710c192f842ebdc8ee8a2f5c/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95bcd2a700d3284d3606ddedf18eec22243c1239", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95bcd2a700d3284d3606ddedf18eec22243c1239", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95bcd2a700d3284d3606ddedf18eec22243c1239"}], "stats": {"total": 139, "additions": 91, "deletions": 48}, "files": [{"sha": "645a59c5baa58ff26b9de935a2102dfff4d8690d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef995717ac8dd150710c192f842ebdc8ee8a2f5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef995717ac8dd150710c192f842ebdc8ee8a2f5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef995717ac8dd150710c192f842ebdc8ee8a2f5c", "patch": "@@ -1,3 +1,22 @@\n+2015-11-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.h (FUNCTION_VALUE, LIBCALL_VALUE,\n+\tFUNCTION_VALUE_REGNO_P): Remove.\n+\t* config/alpha/alpha-protos.h (function_value): Remove.\n+\t* config/alpha/alpha.c (function_value): Rename to...\n+\t(alpha_function_value_1): ... this.  Make static.\n+\t(alpha_function_value, alpha_libcall_value,\n+\talpha_function_value_regno_p): New functions.\n+\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE,\n+\tTARGET_FUNCTION_VALUE_REGNO_P): Define.\n+\n+2015-11-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.h (REGISTER_MOVE_COST, MEMORY_MOVE_COST): Remove.\n+\t* config/alpha/alpha.c (alpha_memory_latency): Make static.\n+\t(alpha_register_move_cost, alpha_memory_move_cost): New functions.\n+\t(TARGET_REGISTER_MOVE_COST, TARGET_MEMORY_MOVE_COST): Define.\n+\n 2015-11-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/67265"}, {"sha": "cec8329225ba55245c64d6ad8d33d476451b259e", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef995717ac8dd150710c192f842ebdc8ee8a2f5c/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef995717ac8dd150710c192f842ebdc8ee8a2f5c/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=ef995717ac8dd150710c192f842ebdc8ee8a2f5c", "patch": "@@ -68,7 +68,6 @@ extern rtx alpha_gp_save_rtx (void);\n extern void alpha_initialize_trampoline (rtx, rtx, rtx, int, int, int);\n \n extern rtx alpha_va_arg (tree, tree);\n-extern rtx function_value (const_tree, const_tree, machine_mode);\n \n extern void alpha_start_function (FILE *, const char *, tree);\n extern void alpha_end_function (FILE *, const char *, tree);"}, {"sha": "4cfae822905ada2f3ccabf497e74406aead9c550", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 72, "deletions": 4, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef995717ac8dd150710c192f842ebdc8ee8a2f5c/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef995717ac8dd150710c192f842ebdc8ee8a2f5c/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=ef995717ac8dd150710c192f842ebdc8ee8a2f5c", "patch": "@@ -95,7 +95,7 @@ static int inside_function = FALSE;\n \n /* The number of cycles of latency we should assume on memory reads.  */\n \n-int alpha_memory_latency = 3;\n+static int alpha_memory_latency = 3;\n \n /* Whether the function needs the GP.  */\n \n@@ -1339,6 +1339,36 @@ alpha_legitimize_reload_address (rtx x,\n   return NULL_RTX;\n }\n \f\n+/* Return the cost of moving between registers of various classes.  Moving\n+   between FLOAT_REGS and anything else except float regs is expensive.\n+   In fact, we make it quite expensive because we really don't want to\n+   do these moves unless it is clearly worth it.  Optimizations may\n+   reduce the impact of not being able to allocate a pseudo to a\n+   hard register.  */\n+\n+static int\n+alpha_register_move_cost (machine_mode /*mode*/,\n+\t\t\t  reg_class_t from, reg_class_t to)\n+{\n+  if ((from == FLOAT_REGS) == (to == FLOAT_REGS))\n+    return 2;\n+\n+  if (TARGET_FIX)\n+    return (from == FLOAT_REGS) ? 6 : 8;\n+\n+  return 4 + 2 * alpha_memory_latency;\n+}\n+\n+/* Return the cost of moving data of MODE from a register to\n+   or from memory.  On the Alpha, bump this up a bit.  */\n+\n+static int\n+alpha_memory_move_cost (machine_mode /*mode*/, reg_class_t /*regclass*/,\n+\t\t\tbool /*in*/)\n+{\n+  return 2 * alpha_memory_latency;\n+}\n+\n /* Compute a (partial) cost for rtx X.  Return true if the complete\n    cost has been computed, and false if subexpressions should be\n    scanned.  In either case, *TOTAL contains the cost result.  */\n@@ -5736,9 +5766,9 @@ alpha_pass_by_reference (cumulative_args_t ca ATTRIBUTE_UNUSED,\n    On Alpha the value is found in $0 for integer functions and\n    $f0 for floating-point functions.  */\n \n-rtx\n-function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED,\n-\t\tmachine_mode mode)\n+static rtx\n+alpha_function_value_1 (const_tree valtype, const_tree func ATTRIBUTE_UNUSED,\n+\t\t\tmachine_mode mode)\n {\n   unsigned int regnum, dummy ATTRIBUTE_UNUSED;\n   enum mode_class mclass;\n@@ -5793,6 +5823,33 @@ function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED,\n   return gen_rtx_REG (mode, regnum);\n }\n \n+/* Implement TARGET_FUNCTION_VALUE.  */\n+\n+static rtx\n+alpha_function_value (const_tree valtype, const_tree fn_decl_or_type,\n+\t\t      bool /*outgoing*/)\n+{\n+  return alpha_function_value_1 (valtype, fn_decl_or_type, VOIDmode);\n+}\n+\n+/* Implement TARGET_LIBCALL_VALUE.  */\n+\n+static rtx\n+alpha_libcall_value (machine_mode mode, const_rtx /*fun*/)\n+{\n+  return alpha_function_value_1 (NULL_TREE, NULL_TREE, mode);\n+}\n+\n+/* Implement TARGET_FUNCTION_VALUE_REGNO_P.\n+\n+   On the Alpha, $0 $1 and $f0 $f1 are the only register thus used.  */\n+\n+static bool\n+alpha_function_value_regno_p (const unsigned int regno)\n+{\n+  return (regno == 0 || regno == 1 || regno == 32 || regno == 33);\n+}\n+\n /* TCmode complex values are passed by invisible reference.  We\n    should not split these values.  */\n \n@@ -9908,6 +9965,10 @@ alpha_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n #undef TARGET_USE_BLOCKS_FOR_CONSTANT_P\n #define TARGET_USE_BLOCKS_FOR_CONSTANT_P hook_bool_mode_const_rtx_true\n \n+#undef TARGET_REGISTER_MOVE_COST\n+#define TARGET_REGISTER_MOVE_COST alpha_register_move_cost\n+#undef TARGET_MEMORY_MOVE_COST\n+#define TARGET_MEMORY_MOVE_COST alpha_memory_move_cost\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS alpha_rtx_costs\n #undef TARGET_ADDRESS_COST\n@@ -9920,6 +9981,13 @@ alpha_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n #define TARGET_PROMOTE_FUNCTION_MODE default_promote_function_mode_always_promote\n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_false\n+\n+#undef TARGET_FUNCTION_VALUE\n+#define TARGET_FUNCTION_VALUE alpha_function_value\n+#undef TARGET_LIBCALL_VALUE\n+#define TARGET_LIBCALL_VALUE alpha_libcall_value\n+#undef TARGET_FUNCTION_VALUE_REGNO_P\n+#define TARGET_FUNCTION_VALUE_REGNO_P alpha_function_value_regno_p\n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY alpha_return_in_memory\n #undef TARGET_PASS_BY_REFERENCE"}, {"sha": "5a198f79a2e5a64fa507f8769100aa4393606792", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef995717ac8dd150710c192f842ebdc8ee8a2f5c/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef995717ac8dd150710c192f842ebdc8ee8a2f5c/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=ef995717ac8dd150710c192f842ebdc8ee8a2f5c", "patch": "@@ -537,26 +537,6 @@ enum reg_class {\n   (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO)\t\t\t\\\n    ? reg_classes_intersect_p (FLOAT_REGS, CLASS) : 0)\n \n-/* Define the cost of moving between registers of various classes.  Moving\n-   between FLOAT_REGS and anything else except float regs is expensive.\n-   In fact, we make it quite expensive because we really don't want to\n-   do these moves unless it is clearly worth it.  Optimizations may\n-   reduce the impact of not being able to allocate a pseudo to a\n-   hard register.  */\n-\n-#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2)\t\t\\\n-  (((CLASS1) == FLOAT_REGS) == ((CLASS2) == FLOAT_REGS)\t? 2\t\\\n-   : TARGET_FIX ? ((CLASS1) == FLOAT_REGS ? 6 : 8)\t\t\\\n-   : 4+2*alpha_memory_latency)\n-\n-/* A C expressions returning the cost of moving data of MODE from a register to\n-   or from memory.\n-\n-   On the Alpha, bump this up a bit.  */\n-\n-extern int alpha_memory_latency;\n-#define MEMORY_MOVE_COST(MODE,CLASS,IN)  (2*alpha_memory_latency)\n-\n /* Provide the cost of a branch.  Exact meaning under development.  */\n #define BRANCH_COST(speed_p, predictable_p) 5\n \f\n@@ -626,29 +606,6 @@ extern int alpha_memory_latency;\n    in a register.  */\n /* #define REG_PARM_STACK_SPACE */\n \n-/* Define how to find the value returned by a function.\n-   VALTYPE is the data type of the value (as a tree).\n-   If the precise function being called is known, FUNC is its FUNCTION_DECL;\n-   otherwise, FUNC is 0.\n-\n-   On Alpha the value is found in $0 for integer functions and\n-   $f0 for floating-point functions.  */\n-\n-#define FUNCTION_VALUE(VALTYPE, FUNC) \\\n-  function_value (VALTYPE, FUNC, VOIDmode)\n-\n-/* Define how to find the value returned by a library function\n-   assuming the value has mode MODE.  */\n-\n-#define LIBCALL_VALUE(MODE) \\\n-  function_value (NULL, NULL, MODE)\n-\n-/* 1 if N is a possible register number for a function value\n-   as seen by the caller.  */\n-\n-#define FUNCTION_VALUE_REGNO_P(N)  \\\n-  ((N) == 0 || (N) == 1 || (N) == 32 || (N) == 33)\n-\n /* 1 if N is a possible register number for function argument passing.\n    On Alpha, these are $16-$21 and $f16-$f21.  */\n "}]}