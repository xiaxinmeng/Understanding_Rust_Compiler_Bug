{"sha": "fa29cf0c3f19b648e30b16fd2485c3c17a528a6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEyOWNmMGMzZjE5YjY0OGUzMGIxNmZkMjQ4NWMzYzE3YTUyOGE2ZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-12-05T19:47:35Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-04-27T19:02:57Z"}, "message": "Fix warning URLs for Fortran and analyzer [PR 92830]\n\nPR 92830 reports that we always use \"gcc/Warning-Options.html\" when we\nemit escaped documentation URLs when printing \"[-Wname-of-option]\" for\na warning.\n\nThis page is wrong for most Fortran warnings, and for analyzer warnings.\n\nI considered various schemes involving adding extra tags to the .opt\nformat to capture where options are documented, but for now this patch\nfixes the issue by introducing some special-casing logic.\nIt only fixes the URLs for warning options, not for other command-line\noptions, but those are the only options for which get_option_url is\ncurrently called.\n\ngcc/ChangeLog:\n\tPR 92830\n\t* configure.ac (DOCUMENTATION_ROOT_URL): Drop trailing \"gcc/\" from\n\tdefault value, so that it can by supplied by get_option_html_page.\n\t* configure: Regenerate.\n\t* opts.c: Include \"selftest.h\".\n\t(get_option_html_page): New function.\n\t(get_option_url): Use it.  Reformat to place comments next to the\n\texpressions they refer to.\n\t(selftest::test_get_option_html_page): New.\n\t(selftest::opts_c_tests): New.\n\t* selftest-run-tests.c (selftest::run_tests): Call\n\tselftest::opts_c_tests.\n\t* selftest.h (selftest::opts_c_tests): New decl.", "tree": {"sha": "887f4679b10686e6d407e49c3815f8f0c4666601", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/887f4679b10686e6d407e49c3815f8f0c4666601"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa29cf0c3f19b648e30b16fd2485c3c17a528a6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa29cf0c3f19b648e30b16fd2485c3c17a528a6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa29cf0c3f19b648e30b16fd2485c3c17a528a6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa29cf0c3f19b648e30b16fd2485c3c17a528a6e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76458c912b0cdda59e094fa64b98aea9ffee214a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76458c912b0cdda59e094fa64b98aea9ffee214a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76458c912b0cdda59e094fa64b98aea9ffee214a"}], "stats": {"total": 93, "additions": 83, "deletions": 10}, "files": [{"sha": "9e22c5a286f6183f8c5d245ef10028aa7376b602", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa29cf0c3f19b648e30b16fd2485c3c17a528a6e/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa29cf0c3f19b648e30b16fd2485c3c17a528a6e/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=fa29cf0c3f19b648e30b16fd2485c3c17a528a6e", "patch": "@@ -7851,7 +7851,7 @@ if test \"${with_documentation_root_url+set}\" = set; then :\n \t   ;;\n      esac\n else\n-  DOCUMENTATION_ROOT_URL=\"https://gcc.gnu.org/onlinedocs/gcc/\"\n+  DOCUMENTATION_ROOT_URL=\"https://gcc.gnu.org/onlinedocs/\"\n \n fi\n "}, {"sha": "cd62312b813c4c7b84fe01849ec10c4c550e665e", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa29cf0c3f19b648e30b16fd2485c3c17a528a6e/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa29cf0c3f19b648e30b16fd2485c3c17a528a6e/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=fa29cf0c3f19b648e30b16fd2485c3c17a528a6e", "patch": "@@ -982,7 +982,7 @@ AC_ARG_WITH(documentation-root-url,\n       *)   DOCUMENTATION_ROOT_URL=\"$withval\"\n \t   ;;\n      esac],\n-     DOCUMENTATION_ROOT_URL=\"https://gcc.gnu.org/onlinedocs/gcc/\"\n+     DOCUMENTATION_ROOT_URL=\"https://gcc.gnu.org/onlinedocs/\"\n )\n AC_SUBST(DOCUMENTATION_ROOT_URL)\n "}, {"sha": "c212a1a57dcfbdfb9cb419bfeaeb17aa9f23fdb0", "filename": "gcc/opts.c", "status": "modified", "additions": 79, "deletions": 8, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa29cf0c3f19b648e30b16fd2485c3c17a528a6e/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa29cf0c3f19b648e30b16fd2485c3c17a528a6e/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=fa29cf0c3f19b648e30b16fd2485c3c17a528a6e", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"spellcheck.h\"\n #include \"opt-suggestions.h\"\n #include \"diagnostic-color.h\"\n+#include \"selftest.h\"\n \n static void set_Wstrict_aliasing (struct gcc_options *opts, int onoff);\n \n@@ -3128,23 +3129,93 @@ option_name (diagnostic_context *context, int option_index,\n     return NULL;\n }\n \n+/* Get the page within the documentation for this option.  */\n+\n+static const char *\n+get_option_html_page (int option_index)\n+{\n+  const cl_option *cl_opt = &cl_options[option_index];\n+\n+  /* Analyzer options are on their own page.  */\n+  if (strstr(cl_opt->opt_text, \"analyzer-\"))\n+    return \"gcc/Static-Analyzer-Options.html\";\n+\n+#ifdef CL_Fortran\n+  if (cl_opt->flags & CL_Fortran)\n+    {\n+      switch (option_index)\n+\t{\n+\tdefault:\n+\t  /* Most Fortran warnings are documented on this page.  */\n+\t  return \"gfortran/Error-and-Warning-Options.html\";\n+\n+\tcase OPT_Wdate_time:\n+\tcase OPT_Wconversion:\n+\tcase OPT_Wconversion_extra:\n+\tcase OPT_Wmissing_include_dirs:\n+\tcase OPT_Wopenmp_simd:\n+\t  /* These warnings are marked in fortran/lang.opt as\n+\t     \"Documented in C\" and thus use the common\n+\t     Warning-Options page below.  */\n+\t  break;\n+\t}\n+    }\n+#endif\n+\n+  return \"gcc/Warning-Options.html\";\n+}\n+\n /* Return malloced memory for a URL describing the option OPTION_INDEX\n    which enabled a diagnostic (context CONTEXT).  */\n \n char *\n get_option_url (diagnostic_context *, int option_index)\n {\n   if (option_index)\n-    /* DOCUMENTATION_ROOT_URL should be supplied via -D by the Makefile\n-       (see --with-documentation-root-url).\n-\n-       Expect an anchor of the form \"index-Wfoo\" e.g.\n-       <a name=\"index-Wformat\"></a>, and thus an id within\n-       the URL of \"#index-Wformat\".  */\n-    return concat (DOCUMENTATION_ROOT_URL,\n-\t\t   \"Warning-Options.html\",\n+    return concat (/* DOCUMENTATION_ROOT_URL should be supplied via -D by\n+\t\t      the Makefile (see --with-documentation-root-url), and\n+\t\t      should have a trailing slash.  */\n+\t\t   DOCUMENTATION_ROOT_URL,\n+\n+\t\t   /* get_option_html_page will return something like\n+\t\t      \"gcc/Warning-Options.html\".  */\n+\t\t   get_option_html_page (option_index),\n+\n+\t\t   /* Expect an anchor of the form \"index-Wfoo\" e.g.\n+\t\t      <a name=\"index-Wformat\"></a>, and thus an id within\n+\t\t      the URL of \"#index-Wformat\".  */\n \t\t   \"#index\", cl_options[option_index].opt_text,\n \t\t   NULL);\n   else\n     return NULL;\n }\n+\n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+/* Verify that get_option_html_page works as expected.  */\n+\n+static void\n+test_get_option_html_page ()\n+{\n+  ASSERT_STREQ (get_option_html_page (OPT_Wcpp), \"gcc/Warning-Options.html\");\n+  ASSERT_STREQ (get_option_html_page (OPT_Wanalyzer_double_free),\n+\t     \"gcc/Static-Analyzer-Options.html\");\n+#ifdef CL_Fortran\n+  ASSERT_STREQ (get_option_html_page (OPT_Wline_truncation),\n+\t\t\"gfortran/Error-and-Warning-Options.html\");\n+#endif\n+}\n+\n+/* Run all of the selftests within this file.  */\n+\n+void\n+opts_c_tests ()\n+{\n+  test_get_option_html_page ();\n+}\n+\n+} // namespace selftest\n+\n+#endif /* #if CHECKING_P */"}, {"sha": "f0a81d43fd62a88d503c7f271db1b33cb0b77d67", "filename": "gcc/selftest-run-tests.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa29cf0c3f19b648e30b16fd2485c3c17a528a6e/gcc%2Fselftest-run-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa29cf0c3f19b648e30b16fd2485c3c17a528a6e/gcc%2Fselftest-run-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest-run-tests.c?ref=fa29cf0c3f19b648e30b16fd2485c3c17a528a6e", "patch": "@@ -73,6 +73,7 @@ selftest::run_tests ()\n   typed_splay_tree_c_tests ();\n   unique_ptr_tests_cc_tests ();\n   opt_proposer_c_tests ();\n+  opts_c_tests ();\n   json_cc_tests ();\n   cgraph_c_tests ();\n   optinfo_emit_json_cc_tests ();"}, {"sha": "5cffa13aeddfedfd83cc64e3662f35dc7d38b3ee", "filename": "gcc/selftest.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa29cf0c3f19b648e30b16fd2485c3c17a528a6e/gcc%2Fselftest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa29cf0c3f19b648e30b16fd2485c3c17a528a6e/gcc%2Fselftest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.h?ref=fa29cf0c3f19b648e30b16fd2485c3c17a528a6e", "patch": "@@ -243,6 +243,7 @@ extern void input_c_tests ();\n extern void json_cc_tests ();\n extern void opt_problem_cc_tests ();\n extern void optinfo_emit_json_cc_tests ();\n+extern void opts_c_tests ();\n extern void ordered_hash_map_tests_cc_tests ();\n extern void predict_c_tests ();\n extern void pretty_print_c_tests ();"}]}