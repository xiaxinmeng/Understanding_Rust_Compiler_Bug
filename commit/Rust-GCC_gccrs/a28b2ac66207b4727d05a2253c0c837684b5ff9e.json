{"sha": "a28b2ac66207b4727d05a2253c0c837684b5ff9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI4YjJhYzY2MjA3YjQ3MjdkMDVhMjI1M2MwYzgzNzY4NGI1ZmY5ZQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-11-29T03:06:14Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-11-29T03:06:14Z"}, "message": "expmed.c (div_cost): Replace with...\n\n\n\t* expmed.c (div_cost): Replace with...\n\t(sdiv_cost, udiv_cost): New.\n\t(init_expmed): Initialize sdiv_cost and udiv_cost, not div_cost.\n\tRename the div and mod fields, used to initialize sdiv_pow2_cheap\n\tand smod_pow2_cheap, to sdiv_32 and smod_32 to avoid confusion.\n\t(expand_divmod): Replace use of div_cost with either sdiv_cost\n\tor udiv_cost depending upon the signedness of the operation.\n\nFrom-SVN: r107641", "tree": {"sha": "22c40169a999edcdb342638b7a9521f3dc0b4ef5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22c40169a999edcdb342638b7a9521f3dc0b4ef5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a28b2ac66207b4727d05a2253c0c837684b5ff9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a28b2ac66207b4727d05a2253c0c837684b5ff9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a28b2ac66207b4727d05a2253c0c837684b5ff9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a28b2ac66207b4727d05a2253c0c837684b5ff9e/comments", "author": null, "committer": null, "parents": [{"sha": "0a6a4494e4fd89495478275905a4655c8cd6382e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a6a4494e4fd89495478275905a4655c8cd6382e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a6a4494e4fd89495478275905a4655c8cd6382e"}], "stats": {"total": 69, "additions": 44, "deletions": 25}, "files": [{"sha": "9f0bc0f60a0e4f0fd862bc133b7608398a0b4df9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28b2ac66207b4727d05a2253c0c837684b5ff9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28b2ac66207b4727d05a2253c0c837684b5ff9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a28b2ac66207b4727d05a2253c0c837684b5ff9e", "patch": "@@ -1,3 +1,13 @@\n+2005-11-28  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* expmed.c (div_cost): Replace with...\n+\t(sdiv_cost, udiv_cost): New.\n+\t(init_expmed): Initialize sdiv_cost and udiv_cost, not div_cost.\n+\tRename the div and mod fields, used to initialize sdiv_pow2_cheap\n+\tand smod_pow2_cheap, to sdiv_32 and smod_32 to avoid confusion.\n+\t(expand_divmod): Replace use of div_cost with either sdiv_cost\n+\tor udiv_cost depending upon the signedness of the operation.\n+\n 2005-11-28  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR libfortran/24991"}, {"sha": "28f876ba22b4f672a0a71bc9111a63a77efb98d0", "filename": "gcc/expmed.c", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a28b2ac66207b4727d05a2253c0c837684b5ff9e/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a28b2ac66207b4727d05a2253c0c837684b5ff9e/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=a28b2ac66207b4727d05a2253c0c837684b5ff9e", "patch": "@@ -103,7 +103,8 @@ static int shift_cost[NUM_MACHINE_MODES][MAX_BITS_PER_WORD];\n static int shiftadd_cost[NUM_MACHINE_MODES][MAX_BITS_PER_WORD];\n static int shiftsub_cost[NUM_MACHINE_MODES][MAX_BITS_PER_WORD];\n static int mul_cost[NUM_MACHINE_MODES];\n-static int div_cost[NUM_MACHINE_MODES];\n+static int sdiv_cost[NUM_MACHINE_MODES];\n+static int udiv_cost[NUM_MACHINE_MODES];\n static int mul_widen_cost[NUM_MACHINE_MODES];\n static int mul_highpart_cost[NUM_MACHINE_MODES];\n \n@@ -115,11 +116,12 @@ init_expmed (void)\n     struct rtx_def reg;\t\trtunion reg_fld[2];\n     struct rtx_def plus;\trtunion plus_fld1;\n     struct rtx_def neg;\n-    struct rtx_def udiv;\trtunion udiv_fld1;\n     struct rtx_def mult;\trtunion mult_fld1;\n-    struct rtx_def div;\t\trtunion div_fld1;\n-    struct rtx_def mod;\t\trtunion mod_fld1;\n+    struct rtx_def sdiv;\trtunion sdiv_fld1;\n+    struct rtx_def udiv;\trtunion udiv_fld1;\n     struct rtx_def zext;\n+    struct rtx_def sdiv_32;\trtunion sdiv_32_fld1;\n+    struct rtx_def smod_32;\trtunion smod_32_fld1;\n     struct rtx_def wide_mult;\trtunion wide_mult_fld1;\n     struct rtx_def wide_lshr;\trtunion wide_lshr_fld1;\n     struct rtx_def wide_trunc;\n@@ -155,21 +157,25 @@ init_expmed (void)\n   PUT_CODE (&all.neg, NEG);\n   XEXP (&all.neg, 0) = &all.reg;\n \n-  PUT_CODE (&all.udiv, UDIV);\n-  XEXP (&all.udiv, 0) = &all.reg;\n-  XEXP (&all.udiv, 1) = &all.reg;\n-\n   PUT_CODE (&all.mult, MULT);\n   XEXP (&all.mult, 0) = &all.reg;\n   XEXP (&all.mult, 1) = &all.reg;\n \n-  PUT_CODE (&all.div, DIV);\n-  XEXP (&all.div, 0) = &all.reg;\n-  XEXP (&all.div, 1) = 32 < MAX_BITS_PER_WORD ? cint[32] : GEN_INT (32);\n+  PUT_CODE (&all.sdiv, DIV);\n+  XEXP (&all.sdiv, 0) = &all.reg;\n+  XEXP (&all.sdiv, 1) = &all.reg;\n \n-  PUT_CODE (&all.mod, MOD);\n-  XEXP (&all.mod, 0) = &all.reg;\n-  XEXP (&all.mod, 1) = XEXP (&all.div, 1);\n+  PUT_CODE (&all.udiv, UDIV);\n+  XEXP (&all.udiv, 0) = &all.reg;\n+  XEXP (&all.udiv, 1) = &all.reg;\n+\n+  PUT_CODE (&all.sdiv_32, DIV);\n+  XEXP (&all.sdiv_32, 0) = &all.reg;\n+  XEXP (&all.sdiv_32, 1) = 32 < MAX_BITS_PER_WORD ? cint[32] : GEN_INT (32);\n+\n+  PUT_CODE (&all.smod_32, MOD);\n+  XEXP (&all.smod_32, 0) = &all.reg;\n+  XEXP (&all.smod_32, 1) = XEXP (&all.sdiv_32, 1);\n \n   PUT_CODE (&all.zext, ZERO_EXTEND);\n   XEXP (&all.zext, 0) = &all.reg;\n@@ -205,10 +211,11 @@ init_expmed (void)\n       PUT_MODE (&all.reg, mode);\n       PUT_MODE (&all.plus, mode);\n       PUT_MODE (&all.neg, mode);\n-      PUT_MODE (&all.udiv, mode);\n       PUT_MODE (&all.mult, mode);\n-      PUT_MODE (&all.div, mode);\n-      PUT_MODE (&all.mod, mode);\n+      PUT_MODE (&all.sdiv, mode);\n+      PUT_MODE (&all.udiv, mode);\n+      PUT_MODE (&all.sdiv_32, mode);\n+      PUT_MODE (&all.smod_32, mode);\n       PUT_MODE (&all.wide_trunc, mode);\n       PUT_MODE (&all.shift, mode);\n       PUT_MODE (&all.shift_mult, mode);\n@@ -217,11 +224,14 @@ init_expmed (void)\n \n       add_cost[mode] = rtx_cost (&all.plus, SET);\n       neg_cost[mode] = rtx_cost (&all.neg, SET);\n-      div_cost[mode] = rtx_cost (&all.udiv, SET);\n       mul_cost[mode] = rtx_cost (&all.mult, SET);\n+      sdiv_cost[mode] = rtx_cost (&all.sdiv, SET);\n+      udiv_cost[mode] = rtx_cost (&all.udiv, SET);\n \n-      sdiv_pow2_cheap[mode] = (rtx_cost (&all.div, SET) <= 2 * add_cost[mode]);\n-      smod_pow2_cheap[mode] = (rtx_cost (&all.mod, SET) <= 4 * add_cost[mode]);\n+      sdiv_pow2_cheap[mode] = (rtx_cost (&all.sdiv_32, SET)\n+\t\t\t       <= 2 * add_cost[mode]);\n+      smod_pow2_cheap[mode] = (rtx_cost (&all.smod_32, SET)\n+\t\t\t       <= 4 * add_cost[mode]);\n \n       wider_mode = GET_MODE_WIDER_MODE (mode);\n       if (wider_mode != VOIDmode)\n@@ -3911,11 +3921,10 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n   /* Only deduct something for a REM if the last divide done was\n      for a different constant.   Then set the constant of the last\n      divide.  */\n-  max_cost = div_cost[compute_mode]\n-    - (rem_flag && ! (last_div_const != 0 && op1_is_constant\n-\t\t      && INTVAL (op1) == last_div_const)\n-       ? mul_cost[compute_mode] + add_cost[compute_mode]\n-       : 0);\n+  max_cost = unsignedp ? udiv_cost[compute_mode] : sdiv_cost[compute_mode];\n+  if (rem_flag && ! (last_div_const != 0 && op1_is_constant\n+\t\t     && INTVAL (op1) == last_div_const))\n+    max_cost -= mul_cost[compute_mode] + add_cost[compute_mode];\n \n   last_div_const = ! rem_flag && op1_is_constant ? INTVAL (op1) : 0;\n "}]}