{"sha": "422be3c3ccc0a941ea3a0a40c339322681b28b2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIyYmUzYzNjY2MwYTk0MWVhM2EwYTQwYzMzOTMyMjY4MWIyOGIyYg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2000-11-23T06:37:23Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-11-23T06:37:23Z"}, "message": "final.c (output_addr_const): Simplify.\n\n* final.c (output_addr_const) [LABEL_REF]: Simplify.\n[MINUS]: Enclose non-CONST_INTs in parentheses.\n[default]: Try OUTPUT_ADDR_CONST_EXTRA.\n* tm.texi (OUTPUT_ADDR_CONST_EXTRA): Document it.\n* varasm.c (decode_rtx_const) [CONST]: If it's not something\nPLUS or MINUS a CONST_INT, use the whole CONST with offset 0\ninstead of abort()ing.\n* sh.c (output_pic_addr_const): Removed.  Fixed all callers.\n* sh.h (OUTPUT_ADDR_CONST_EXTRA): New.  Handle the UNSPECs\nformerly handled in output_pic_addr_const.\n* sh.md (sym_label2reg, symPLT_label2reg): Enclose UNSPEC\noperands of MINUS in CONSTs so that decode_rtx_const() will\naccept them.\n\nFrom-SVN: r37691", "tree": {"sha": "5c0256af6368b27411a55e15e137d7e09aea0433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c0256af6368b27411a55e15e137d7e09aea0433"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/422be3c3ccc0a941ea3a0a40c339322681b28b2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/422be3c3ccc0a941ea3a0a40c339322681b28b2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/422be3c3ccc0a941ea3a0a40c339322681b28b2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/422be3c3ccc0a941ea3a0a40c339322681b28b2b/comments", "author": null, "committer": null, "parents": [{"sha": "43c05634539cbdb4162ac6e067891e8f01ac2f62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43c05634539cbdb4162ac6e067891e8f01ac2f62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43c05634539cbdb4162ac6e067891e8f01ac2f62"}], "stats": {"total": 229, "additions": 90, "deletions": 139}, "files": [{"sha": "7c7411c0ce0a5113a1e136ffa991caef7d20e39e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/422be3c3ccc0a941ea3a0a40c339322681b28b2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/422be3c3ccc0a941ea3a0a40c339322681b28b2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=422be3c3ccc0a941ea3a0a40c339322681b28b2b", "patch": "@@ -1,3 +1,19 @@\n+Thu Nov 23 04:33:33 2000  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* final.c (output_addr_const) [LABEL_REF]: Simplify.\n+\t[MINUS]: Enclose non-CONST_INTs in parentheses.\n+\t[default]: Try OUTPUT_ADDR_CONST_EXTRA.\n+\t* tm.texi (OUTPUT_ADDR_CONST_EXTRA): Document it.\n+\t* varasm.c (decode_rtx_const) [CONST]: If it's not something\n+\tPLUS or MINUS a CONST_INT, use the whole CONST with offset 0\n+\tinstead of abort()ing.\n+\t* sh.c (output_pic_addr_const): Removed.  Fixed all callers.\n+\t* sh.h (OUTPUT_ADDR_CONST_EXTRA): New.  Handle the UNSPECs\n+\tformerly handled in output_pic_addr_const.\n+\t* sh.md (sym_label2reg, symPLT_label2reg): Enclose UNSPEC\n+\toperands of MINUS in CONSTs so that decode_rtx_const() will\n+\taccept them.\n+\n Thu Nov 23 04:10:30 2000  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/sh/sh.md (mova_const): New pattern."}, {"sha": "7f3fdd3c2991bdc7f5e40fb72c28c3b3d15b1d77", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 117, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/422be3c3ccc0a941ea3a0a40c339322681b28b2b/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/422be3c3ccc0a941ea3a0a40c339322681b28b2b/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=422be3c3ccc0a941ea3a0a40c339322681b28b2b", "patch": "@@ -202,7 +202,7 @@ print_operand_address (stream, x)\n       break;\n \n     default:\n-      output_pic_addr_const (stream, x);\n+      output_addr_const (stream, x);\n       break;\n     }\n }\n@@ -5334,119 +5334,3 @@ legitimize_pic_address (orig, mode, reg)\n     }\n   return orig;\n }\n-\f\n-/* Like output_addr_const(), but recognize PIC unspecs and special\n-   expressions.  */\n-void\n-output_pic_addr_const (file, x)\n-     FILE *file;\n-     rtx x;\n-{\n-  char buf[256];\n-\n-  switch (GET_CODE (x))\n-    {\n-    case PC:\n-      if (flag_pic)\n-\tputc ('.', file);\n-      else\n-\tabort ();\n-      break;\n-\n-    case SYMBOL_REF:\n-      assemble_name (file, XSTR (x, 0));\n-      break;\n-\n-    case LABEL_REF:\n-      x = XEXP (x, 0);\n-      /* FALLTHRU */\n-    case CODE_LABEL:\n-      ASM_GENERATE_INTERNAL_LABEL (buf, \"L\", CODE_LABEL_NUMBER (x));\n-      assemble_name (asm_out_file, buf);\n-      break;\n-\n-    case CONST:\n-      output_pic_addr_const (file, XEXP (x, 0));\n-      break;\n-\n-    case CONST_INT:\n-      fprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (x));\n-      break;\n-\n-    case CONST_DOUBLE:\n-      if (GET_MODE (x) == VOIDmode)\n-\t{\n-\t  /* We can use %d if the number is <32 bits and positive.  */\n-\t  if (CONST_DOUBLE_HIGH (x) || CONST_DOUBLE_LOW (x) < 0)\n-\t    fprintf (file, \"0x%lx%08lx\",\n-\t\t     (unsigned long) CONST_DOUBLE_HIGH (x),\n-\t\t     (unsigned long) CONST_DOUBLE_LOW (x));\n-\t  else\n-\t    fprintf (file, HOST_WIDE_INT_PRINT_DEC, CONST_DOUBLE_LOW (x));\n-\t}\n-      else\n-\t/* We can't handle floating point constants;\n-\t   PRINT_OPERAND must handle them.  */\n-\toutput_operand_lossage (\"floating constant misused\");\n-      break;\n-\n-    case PLUS:\n-      /* Some assemblers need integer constants to appear first.  */\n-      if (GET_CODE (XEXP (x, 0)) == CONST_INT)\n-\t{\n-\t  output_pic_addr_const (file, XEXP (x, 0));\n-\t  fprintf (file, \"+\");\n-\t  output_pic_addr_const (file, XEXP (x, 1));\n-\t}\n-      else if (GET_CODE (XEXP (x, 1)) == CONST_INT\n-\t       || GET_CODE (XEXP (x, 0)) == PC)\n-\t{\n-\t  output_pic_addr_const (file, XEXP (x, 1));\n-\t  fprintf (file, \"+\");\n-\t  output_pic_addr_const (file, XEXP (x, 0));\n-\t}\n-      else\n-\tabort ();\n-      break;\n-\n-    case MINUS:\n-      output_pic_addr_const (file, XEXP (x, 0));\n-      fprintf (file, \"-\");\n-      if (GET_CODE (XEXP (x, 1)) == CONST)\n-\t{\n-\t  putc ('(', file);\n-\t  output_pic_addr_const (file, XEXP (x, 1));\n-\t  putc (')', file);\n-\t}\n-      else\n-\toutput_pic_addr_const (file, XEXP (x, 1));\n-      break;\n-\n-    case UNSPEC:\n-      if ((XVECLEN (x, 0)) > 3)\n- \tabort ();\n-      output_pic_addr_const (file, XVECEXP (x, 0, 0));\n-      switch (XINT (x, 1))\n- \t{\n-\tcase 6:\n-\t  /* GLOBAL_OFFSET_TABLE or local symbols, no suffix.  */\n-\t  break;\n- \tcase 7:\n- \t  fputs (\"@GOT\", file);\n- \t  break;\n-\tcase 8:\n-\t  fputs (\"@GOTOFF\", file);\n-\t  break;\n-        case 9:\n-\t  fputs (\"@PLT\", file);\n-\t  break;\n- \tdefault:\n- \t  output_operand_lossage (\"invalid UNSPEC as operand\");\n- \t  break;\n- \t}\n-      break;\n-\n-    default:\n-      output_operand_lossage (\"invalid expression as operand\");\n-    }\n-}"}, {"sha": "5476d14dc951bfcf83639a303ddba17b9e33e13c", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/422be3c3ccc0a941ea3a0a40c339322681b28b2b/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/422be3c3ccc0a941ea3a0a40c339322681b28b2b/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=422be3c3ccc0a941ea3a0a40c339322681b28b2b", "patch": "@@ -2072,12 +2072,12 @@ do { char dstr[30];\t\t\t\t\t\\\n \n #define ASM_OUTPUT_INT(STREAM, EXP)\t\t\\\n   (fprintf ((STREAM), \"\\t.long\\t\"),      \t\\\n-   output_pic_addr_const ((STREAM), (EXP)),  \t\\\n+   output_addr_const ((STREAM), (EXP)),  \t\\\n    fputc ('\\n', (STREAM)))\n \n #define ASM_OUTPUT_SHORT(STREAM, EXP)\t\\\n   (fprintf ((STREAM), \"\\t.short\\t\"),\t\\\n-   output_pic_addr_const ((STREAM), (EXP)),\t\\\n+   output_addr_const ((STREAM), (EXP)),\t\\\n    fputc ('\\n', (STREAM)))\n \n #define ASM_OUTPUT_CHAR(STREAM, EXP)\t\t\\\n@@ -2157,6 +2157,40 @@ do { char dstr[30];\t\t\t\t\t\\\n #define PRINT_OPERAND_PUNCT_VALID_P(CHAR) \\\n   ((CHAR) == '.' || (CHAR) == '#' || (CHAR) == '@' || (CHAR) == ','\t\\\n    || (CHAR) == '$')\n+\n+/* Recognize machine-specific patterns that may appear within\n+   constants.  Used for PIC-specific UNSPECs.  */\n+#define OUTPUT_ADDR_CONST_EXTRA(STREAM, X, FAIL) \\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    if (flag_pic && GET_CODE (X) == UNSPEC && XVECLEN ((X), 0) == 1)\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tswitch (XINT ((X), 1))\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\t\\\n+\t  case UNSPEC_PIC:\t\t\t\t\t\t\\\n+\t    /* GLOBAL_OFFSET_TABLE or local symbols, no suffix.  */\t\\\n+\t    output_addr_const ((STREAM), XVECEXP ((X), 0, 0));\t\t\\\n+\t    break;\t\t\t\t\t\t\t\\\n+\t  case UNSPEC_GOT:\t\t\t\t\t\t\\\n+\t    output_addr_const ((STREAM), XVECEXP ((X), 0, 0));\t\t\\\n+\t    fputs (\"@GOT\", (STREAM));\t\t\t\t\t\\\n+\t    break;\t\t\t\t\t\t\t\\\n+\t  case UNSPEC_GOTOFF:\t\t\t\t\t\t\\\n+\t    output_addr_const ((STREAM), XVECEXP ((X), 0, 0));\t\t\\\n+\t    fputs (\"@GOTOFF\", (STREAM));\t\t\t\t\\\n+\t    break;\t\t\t\t\t\t\t\\\n+\t  case UNSPEC_PLT:\t\t\t\t\t\t\\\n+\t    output_addr_const ((STREAM), XVECEXP ((X), 0, 0));\t\t\\\n+\t    fputs (\"@PLT\", (STREAM));\t\t\t\t\t\\\n+\t    break;\t\t\t\t\t\t\t\\\n+\t  default:\t\t\t\t\t\t\t\\\n+\t    goto FAIL;\t\t\t\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\t\\\n+\tbreak;\t\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      goto FAIL;\t\t\t\t\t\t\t\\\n+  while (0)\n+\n \f\n extern struct rtx_def *sh_compare_op0;\n extern struct rtx_def *sh_compare_op1;"}, {"sha": "549c7e72e0a847d88382b9bac55f2475405281b4", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/422be3c3ccc0a941ea3a0a40c339322681b28b2b/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/422be3c3ccc0a941ea3a0a40c339322681b28b2b/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=422be3c3ccc0a941ea3a0a40c339322681b28b2b", "patch": "@@ -3596,7 +3596,7 @@\n (define_expand \"sym_label2reg\"\n   [(set (match_operand:SI 0 \"\" \"\")\n \t(const (minus:SI\n-\t\t(unspec [(match_operand:SI 1 \"\" \"\")] UNSPEC_PIC)\n+\t\t(const (unspec [(match_operand:SI 1 \"\" \"\")] UNSPEC_PIC))\n \t\t(const (plus:SI\n \t\t\t(unspec [(label_ref (match_operand:SI 2 \"\" \"\"))]\n \t\t\t\tUNSPEC_PIC)\n@@ -3629,12 +3629,13 @@\n (define_expand \"symPLT_label2reg\"\n   [(set (match_operand:SI 0 \"\" \"\")\n \t(const (minus:SI\n-\t\t(plus:SI (pc)\n-\t\t\t (unspec [(match_operand:SI 1 \"\" \"\")] UNSPEC_PLT))\n-\t\t(const\n-\t\t (plus:SI\n-\t\t  (unspec [(label_ref (match_operand:SI 2 \"\" \"\"))] UNSPEC_PIC)\n-\t\t  (const_int 2))))))\n+\t\t(const (plus:SI\n+\t\t\t(unspec [(match_operand:SI 1 \"\" \"\")] UNSPEC_PLT)\n+\t\t\t(pc)))\n+\t\t(const (plus:SI\n+\t\t\t(unspec [(label_ref (match_operand:SI 2 \"\" \"\"))]\n+\t\t\t\tUNSPEC_PIC)\n+\t\t\t(const_int 2))))))\n    (use (match_dup 3))]\n   ;; Even though the PIC register is not really used by the call\n   ;; sequence in which this is expanded, the PLT code assumes the PIC"}, {"sha": "46c09ee8e3465a3d37f32559ba34f8b8c7aabf9c", "filename": "gcc/final.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/422be3c3ccc0a941ea3a0a40c339322681b28b2b/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/422be3c3ccc0a941ea3a0a40c339322681b28b2b/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=422be3c3ccc0a941ea3a0a40c339322681b28b2b", "patch": "@@ -3677,10 +3677,8 @@ output_addr_const (file, x)\n       break;\n \n     case LABEL_REF:\n-      ASM_GENERATE_INTERNAL_LABEL (buf, \"L\", CODE_LABEL_NUMBER (XEXP (x, 0)));\n-      assemble_name (file, buf);\n-      break;\n-\n+      x = XEXP (x, 0);\n+      /* Fall through.  */\n     case CODE_LABEL:\n       ASM_GENERATE_INTERNAL_LABEL (buf, \"L\", CODE_LABEL_NUMBER (x));\n       assemble_name (file, buf);\n@@ -3741,8 +3739,9 @@ output_addr_const (file, x)\n \n       output_addr_const (file, XEXP (x, 0));\n       fprintf (file, \"-\");\n-      if (GET_CODE (XEXP (x, 1)) == CONST_INT\n-\t  && INTVAL (XEXP (x, 1)) < 0)\n+      if ((GET_CODE (XEXP (x, 1)) == CONST_INT\n+\t   && INTVAL (XEXP (x, 1)) < 0)\n+\t  || GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t{\n \t  fprintf (file, \"%s\", ASM_OPEN_PAREN);\n \t  output_addr_const (file, XEXP (x, 1));\n@@ -3758,6 +3757,12 @@ output_addr_const (file, x)\n       break;\n \n     default:\n+#ifdef OUTPUT_ADDR_CONST_EXTRA\n+      OUTPUT_ADDR_CONST_EXTRA (file, x, fail);\n+      break;\n+\n+    fail:\n+#endif\n       output_operand_lossage (\"invalid expression as operand\");\n     }\n }"}, {"sha": "4752d933dc631cd2178409f6428048448b7b6690", "filename": "gcc/tm.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/422be3c3ccc0a941ea3a0a40c339322681b28b2b/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/422be3c3ccc0a941ea3a0a40c339322681b28b2b/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=422be3c3ccc0a941ea3a0a40c339322681b28b2b", "patch": "@@ -5500,6 +5500,18 @@ would be identical to repeatedly calling the macro corresponding to\n a size of @code{UNITS_PER_WORD}, once for each word, you need not define\n the macro.\n \n+@findex OUTPUT_ADDR_CONST_EXTRA\n+@item OUTPUT_ADDR_CONST_EXTRA (@var{stream}, @var{x}, @var{fail})\n+A C statement to recognize @var{rtx} patterns that\n+@code{output_addr_const} can't deal with, and output assembly code to\n+@var{stream} corresponding to the pattern @var{x}.  This may be used to\n+allow machine-dependent @code{UNSPEC}s to appear within constants.\n+\n+If @code{OUTPUT_ADDR_CONST_EXTRA} fails to recognize a pattern, it must\n+@code{goto fail}, so that a standard error message is printed.  If it\n+prints an error message itself, by calling, for example,\n+@code{output_operand_lossage}, it may just complete normally.\n+\n @findex ASM_OUTPUT_BYTE\n @item ASM_OUTPUT_BYTE (@var{stream}, @var{value})\n A C statement to output to the stdio stream @var{stream} an assembler"}, {"sha": "009b65f25ad851de1743363276a63cba76cd2819", "filename": "gcc/varasm.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/422be3c3ccc0a941ea3a0a40c339322681b28b2b/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/422be3c3ccc0a941ea3a0a40c339322681b28b2b/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=422be3c3ccc0a941ea3a0a40c339322681b28b2b", "patch": "@@ -3486,22 +3486,21 @@ decode_rtx_const (mode, x, value)\n \n     case CONST:\n       x = XEXP (x, 0);\n-      if (GET_CODE (x) == PLUS)\n+      if (GET_CODE (x) == PLUS && GET_CODE (XEXP (x, 1)) == CONST_INT)\n \t{\n \t  value->un.addr.base = XEXP (x, 0);\n-\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n-\t    abort ();\n \t  value->un.addr.offset = INTVAL (XEXP (x, 1));\n \t}\n-      else if (GET_CODE (x) == MINUS)\n+      else if (GET_CODE (x) == MINUS && GET_CODE (XEXP (x, 1)) == CONST_INT)\n \t{\n \t  value->un.addr.base = XEXP (x, 0);\n-\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n-\t    abort ();\n \t  value->un.addr.offset = - INTVAL (XEXP (x, 1));\n \t}\n       else\n-\tabort ();\n+\t{\n+\t  value->un.addr.base = x;\n+\t  value->un.addr.offset = 0;\n+\t}\n       break;\n \n     default:"}]}