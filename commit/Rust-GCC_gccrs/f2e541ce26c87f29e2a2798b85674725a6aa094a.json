{"sha": "f2e541ce26c87f29e2a2798b85674725a6aa094a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJlNTQxY2UyNmM4N2YyOWUyYTI3OThiODU2NzQ3MjVhNmFhMDk0YQ==", "commit": {"author": {"name": "Anthony Green", "email": "green@redhat.com", "date": "2000-08-20T17:49:12Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2000-08-20T17:49:12Z"}, "message": "URLClassLoader.java: Find the JarEntry via the JarFile.\n\nSun Aug 20 09:51:48 2000  Anthony Green  <green@redhat.com>\n\n        * java/net/URLClassLoader.java: Find the JarEntry via the JarFile.\n\n        * java/net/JarURLConnection.java: getEntry doesn't take any\n        arguments.  Return null if element is null.\n\n        * java/util/zip/ZipFile.java (getInputStream): Read the compressed\n        size from the archive, not the inflated size.\n\n        * java/util/jar/JarFile.java (getEntry): Don't recurse.  Call\n        java.util.zip.ZipFile.getEntry.\n\n        * gij.cc (help): Change sourceware reference to\n        sources.redhat.com.\n\nFrom-SVN: r35821", "tree": {"sha": "a667239f51829ad45d70131f03d739cc10cb341b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a667239f51829ad45d70131f03d739cc10cb341b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2e541ce26c87f29e2a2798b85674725a6aa094a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2e541ce26c87f29e2a2798b85674725a6aa094a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2e541ce26c87f29e2a2798b85674725a6aa094a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2e541ce26c87f29e2a2798b85674725a6aa094a/comments", "author": {"login": "atgreen", "id": 89993, "node_id": "MDQ6VXNlcjg5OTkz", "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atgreen", "html_url": "https://github.com/atgreen", "followers_url": "https://api.github.com/users/atgreen/followers", "following_url": "https://api.github.com/users/atgreen/following{/other_user}", "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions", "organizations_url": "https://api.github.com/users/atgreen/orgs", "repos_url": "https://api.github.com/users/atgreen/repos", "events_url": "https://api.github.com/users/atgreen/events{/privacy}", "received_events_url": "https://api.github.com/users/atgreen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1175b9b4c50acab6a26f3fa5ce7299cae62b5008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1175b9b4c50acab6a26f3fa5ce7299cae62b5008", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1175b9b4c50acab6a26f3fa5ce7299cae62b5008"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "119cd52afedceb1d6199447f381cde10d76d9a17", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e541ce26c87f29e2a2798b85674725a6aa094a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e541ce26c87f29e2a2798b85674725a6aa094a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f2e541ce26c87f29e2a2798b85674725a6aa094a", "patch": "@@ -1,3 +1,19 @@\n+Sun Aug 20 09:51:48 2000  Anthony Green  <green@redhat.com>\n+\n+\t* java/net/URLClassLoader.java: Find the JarEntry via the JarFile.\n+\n+\t* java/net/JarURLConnection.java: getEntry doesn't take any\n+\targuments.  Return null if element is null.\n+\n+\t* java/util/zip/ZipFile.java (getInputStream): Read the compressed\n+\tsize from the archive, not the inflated size.\n+\n+\t* java/util/jar/JarFile.java (getEntry): Don't recurse.  Call\n+\tjava.util.zip.ZipFile.getEntry.\n+\n+\t* gij.cc (help): Change sourceware reference to\n+\tsources.redhat.com.\n+\n 2000-08-19  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/util/zip/ZipInputStream.java (createZipEntry):"}, {"sha": "54674a9d2c806453500c8baab411332a9f208ba3", "filename": "libjava/gij.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e541ce26c87f29e2a2798b85674725a6aa094a/libjava%2Fgij.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e541ce26c87f29e2a2798b85674725a6aa094a/libjava%2Fgij.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgij.cc?ref=f2e541ce26c87f29e2a2798b85674725a6aa094a", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -31,15 +31,15 @@ help ()\n   printf (\"  --ms=NUMBER       set initial heap size\\n\");\n   printf (\"  --mx=NUMBER       set maximum heap size\\n\");\n   printf (\"  --version         print version number, then exit\\n\");\n-  printf (\"\\nSee http://sourceware.cygnus.com/java/ for information on reporting bugs\\n\");\n+  printf (\"\\nSee http://sources.redhat.com/java/ for information on reporting bugs\\n\");\n   exit (0);\n }\n \n static void\n version ()\n {\n   printf (\"gij (GNU libgcj) version %s\\n\\n\", VERSION);\n-  printf (\"Copyright (C) 1999 Free Software Foundation.\\n\");\n+  printf (\"Copyright (C) 1999, 2000 Free Software Foundation.\\n\");\n   printf (\"This is free software; see the source for copying conditions.  There is NO\\n\");\n   printf (\"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\");\n   exit (0);"}, {"sha": "60adfcd9c61828698cc249d340cbb4a19f26299e", "filename": "libjava/java/net/JarURLConnection.java", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e541ce26c87f29e2a2798b85674725a6aa094a/libjava%2Fjava%2Fnet%2FJarURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e541ce26c87f29e2a2798b85674725a6aa094a/libjava%2Fjava%2Fnet%2FJarURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FJarURLConnection.java?ref=f2e541ce26c87f29e2a2798b85674725a6aa094a", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -148,11 +148,13 @@ public InputStream getInputStream() throws IOException\n     return null;\n   }\n \n-  public JarEntry getJarEntry (String name)\n-    throws java.io.IOException\n+  public JarEntry getJarEntry () throws java.io.IOException\n   {\n     JarFile jarfile = null;\n \n+    if (element == null)\n+      return null;\n+\n     if (! doInput)\n       throw new ProtocolException(\"Can't open JarEntry if doInput is false\");\n \n@@ -286,7 +288,7 @@ private void getHeaders() throws IOException\n     if (element == null)\n       len = jarFileURLConnection.getContentLength ();\n     else\n-      len = getJarEntry (element).getSize ();\n+      len = getJarEntry ().getSize ();\n \n     String line = \"Content-length: \" + len;\n     hdrVec.addElement(line);"}, {"sha": "441b7cae4206783138bbd7e2626040563c2c11db", "filename": "libjava/java/net/URLClassLoader.java", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e541ce26c87f29e2a2798b85674725a6aa094a/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e541ce26c87f29e2a2798b85674725a6aa094a/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLClassLoader.java?ref=f2e541ce26c87f29e2a2798b85674725a6aa094a", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -20,8 +20,8 @@ public class URLClassLoader extends ClassLoader\n   // `path' contains simply the URL's we're using for the searching.\n   private Vector path; \n \n-  // If path[n] is a zip/jar, then this holds a JarURLConnection for that thing,\n-  // otherwise, path[n] is null.\n+  // If path[n] is a zip/jar, then this holds a JarURLConnection for\n+  // that thing, otherwise, path[n] is null.\n   private Vector info; \n \n   private URLStreamHandler getHandler0 (String protocol)\n@@ -115,10 +115,10 @@ public URL getResource (String name)\n \t\n \ttry {\n \t  JarURLConnection conn = (JarURLConnection) info.elementAt (i);\n-\t  \n+ \t  \n \t  if (conn != null)\n \t    {\n-\t      if (conn.getJarEntry (name) != null)\n+\t      if (conn.getJarFile().getJarEntry (name) != null)\n \t\treturn new URL(u, name, getHandler0 (u.getProtocol()));\n \t    }\n \t  else\n@@ -187,15 +187,15 @@ protected Class findClass (String name)\n \n     try \n       {\n-\tInputStream is = getResourceAsStream (name.replace ('.', '/') + \".class\");\n-\t\n-\tif (is == null)\n+\tURL u = getResource (name.replace ('.', '/') + \".class\");\n+\n+\tif (u == null)\n \t  throw new ClassNotFoundException (name);\n-\t\n-\t// Here we have to rely on available() to provide the length of\n-\t// the class; which might not be exactly right in some cases...\n-\t\n-\tint len = is.available ();\n+\n+\tURLConnection connection = u.openConnection ();\n+\tInputStream is = connection.getInputStream ();\n+\n+\tint len = connection.getContentLength ();\n \tbyte[] data = new byte[len];\n \n \tint left = len;\n@@ -216,6 +216,5 @@ protected Class findClass (String name)\n \tthrow new ClassNotFoundException(name);\n       }\n   }\n-\n }\n "}, {"sha": "bcf7dd89b2e8d1356f7ecba00ef8cecfe190abf5", "filename": "libjava/java/util/jar/JarFile.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e541ce26c87f29e2a2798b85674725a6aa094a/libjava%2Fjava%2Futil%2Fjar%2FJarFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e541ce26c87f29e2a2798b85674725a6aa094a/libjava%2Fjava%2Futil%2Fjar%2FJarFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fjar%2FJarFile.java?ref=f2e541ce26c87f29e2a2798b85674725a6aa094a", "patch": "@@ -232,7 +232,7 @@ public Object nextElement() {\n     public ZipEntry getEntry(String name) {\n         ZipEntry entry = super.getEntry(name);\n         if (entry != null) {\n-            JarEntry jarEntry = new JarEntry(getEntry(name));\n+            JarEntry jarEntry = new JarEntry(super.getEntry(name));\n             if (manifest != null) {\n                 jarEntry.attr = manifest.getAttributes(name);\n                 // XXX jarEntry.certs"}, {"sha": "22ed74b6e78f7e3cb92118e2ba5213bde1823fc3", "filename": "libjava/java/util/zip/ZipFile.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2e541ce26c87f29e2a2798b85674725a6aa094a/libjava%2Fjava%2Futil%2Fzip%2FZipFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2e541ce26c87f29e2a2798b85674725a6aa094a/libjava%2Fjava%2Futil%2Fzip%2FZipFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipFile.java?ref=f2e541ce26c87f29e2a2798b85674725a6aa094a", "patch": "@@ -121,7 +121,7 @@ public ZipEntry getEntry(String name)\n \n   public InputStream getInputStream(ZipEntry ze)  throws IOException\n   {\n-    byte[] buffer = new byte[(int) ze.getSize()];\n+    byte[] buffer = new byte[(int) ze.getCompressedSize()];\n \n     /* Read the size of the extra field, and skip to the start of the\n        data.  */"}]}