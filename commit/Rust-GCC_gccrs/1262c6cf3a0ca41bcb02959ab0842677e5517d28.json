{"sha": "1262c6cf3a0ca41bcb02959ab0842677e5517d28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI2MmM2Y2YzYTBjYTQxYmNiMDI5NTlhYjA4NDI2NzdlNTUxN2QyOA==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2017-09-26T21:50:46Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2017-09-26T21:50:46Z"}, "message": "rs6000-c.c (P9V_BUILTIN_VEC_XL_LEN_R, [...]): Add support for builtins vector unsigned char vec_xl_len_r (unsigned char *...\n\ngcc/ChangeLog:\n\n2017-09-26  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/rs6000-c.c (P9V_BUILTIN_VEC_XL_LEN_R,\n\tP9V_BUILTIN_VEC_XST_LEN_R): Add support for builtins\n\tvector unsigned char vec_xl_len_r (unsigned char *, size_t);\n\tvoid vec_xst_len_r (vector unsigned char, unsigned char *, size_t);\n\t* config/rs6000/altivec.h (vec_xl_len_r, vec_xst_len_r): Add defines.\n\t* config/rs6000/rs6000-builtin.def (XL_LEN_R, XST_LEN_R): Add\n\tdefinitions and overloading.\n\t* config/rs6000/rs6000.c (altivec_expand_builtin): Add case\n\tstatement for P9V_BUILTIN_XST_LEN_R.\n\t(altivec_init_builtins): Add def_builtin for P9V_BUILTIN_STXVLL.\n\t* config/rs6000/vsx.md (lxvll, stxvll, xl_len_r, xst_len_r): Add\n\tdefine_expand and define_insn for the instructions and builtins.\n\t* doc/extend.texi: Update the built-in documentation file for the new\n\tbuilt-in functions.\n\t* config/rs6000/altivec.md (altivec_lvsl_reg, altivec_lvsr_reg): Add\n\tdefine_insn for the instructions\n\ngcc/testsuite/ChangeLog:\n\n2017-09-26  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/builtins-5-p9-runnable.c: Add new runable test\n\tfile for the new built-ins and the existing built-ins.\n\nFrom-SVN: r253217", "tree": {"sha": "13f6154da49a21f6d9300d1b73befe9b66d157c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13f6154da49a21f6d9300d1b73befe9b66d157c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1262c6cf3a0ca41bcb02959ab0842677e5517d28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1262c6cf3a0ca41bcb02959ab0842677e5517d28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1262c6cf3a0ca41bcb02959ab0842677e5517d28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1262c6cf3a0ca41bcb02959ab0842677e5517d28/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b460e64da56ecff8f1d178c1eade56397d3d71cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b460e64da56ecff8f1d178c1eade56397d3d71cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b460e64da56ecff8f1d178c1eade56397d3d71cf"}], "stats": {"total": 448, "additions": 444, "deletions": 4}, "files": [{"sha": "40e179bf79e7c4cdcca895c89968052fbb8c9347", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1262c6cf3a0ca41bcb02959ab0842677e5517d28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1262c6cf3a0ca41bcb02959ab0842677e5517d28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1262c6cf3a0ca41bcb02959ab0842677e5517d28", "patch": "@@ -1,3 +1,22 @@\n+2017-09-26  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.c (P9V_BUILTIN_VEC_XL_LEN_R,\n+\tP9V_BUILTIN_VEC_XST_LEN_R): Add support for builtins\n+\tvector unsigned char vec_xl_len_r (unsigned char *, size_t);\n+\tvoid vec_xst_len_r (vector unsigned char, unsigned char *, size_t);\n+\t* config/rs6000/altivec.h (vec_xl_len_r, vec_xst_len_r): Add defines.\n+\t* config/rs6000/rs6000-builtin.def (XL_LEN_R, XST_LEN_R): Add\n+\tdefinitions and overloading.\n+\t* config/rs6000/rs6000.c (altivec_expand_builtin): Add case\n+\tstatement for P9V_BUILTIN_XST_LEN_R.\n+\t(altivec_init_builtins): Add def_builtin for P9V_BUILTIN_STXVLL.\n+\t* config/rs6000/vsx.md (lxvll, stxvll, xl_len_r, xst_len_r): Add\n+\tdefine_expand and define_insn for the instructions and builtins.\n+\t* doc/extend.texi: Update the built-in documentation file for the new\n+\tbuilt-in functions.\n+\t* config/rs6000/altivec.md (altivec_lvsl_reg, altivec_lvsr_reg): Add\n+\tdefine_insn for the instructions\n+\n 2017-09-26  Krister Walfridsson  <krister.walfridsson@gmail.com>\n \n \tPR target/39570"}, {"sha": "94a4db24a78696679200ca9fc0e133fe6240826d", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1262c6cf3a0ca41bcb02959ab0842677e5517d28/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1262c6cf3a0ca41bcb02959ab0842677e5517d28/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=1262c6cf3a0ca41bcb02959ab0842677e5517d28", "patch": "@@ -467,6 +467,8 @@\n #ifdef _ARCH_PPC64\n #define vec_xl_len __builtin_vec_lxvl\n #define vec_xst_len __builtin_vec_stxvl\n+#define vec_xl_len_r __builtin_vec_xl_len_r\n+#define vec_xst_len_r __builtin_vec_xst_len_r\n #endif\n \n #define vec_cmpnez __builtin_vec_vcmpnez"}, {"sha": "6ea529bdbb09028100f8da1a2ad5a47867664062", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1262c6cf3a0ca41bcb02959ab0842677e5517d28/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1262c6cf3a0ca41bcb02959ab0842677e5517d28/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=1262c6cf3a0ca41bcb02959ab0842677e5517d28", "patch": "@@ -2594,6 +2594,15 @@\n   DONE;\n })\n \n+(define_insn \"altivec_lvsl_reg\"\n+  [(set (match_operand:V16QI 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:V16QI\n+\t[(match_operand:DI 1 \"gpc_reg_operand\" \"b\")]\n+\tUNSPEC_LVSL_REG))]\n+  \"TARGET_ALTIVEC\"\n+  \"lvsl %0,0,%1\"\n+  [(set_attr \"type\" \"vecload\")])\n+\n (define_insn \"altivec_lvsl_direct\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n \t(unspec:V16QI [(match_operand:V16QI 1 \"memory_operand\" \"Z\")]\n@@ -2603,8 +2612,8 @@\n   [(set_attr \"type\" \"vecload\")])\n \n (define_expand \"altivec_lvsr\"\n-  [(use (match_operand:V16QI 0 \"register_operand\" \"\"))\n-   (use (match_operand:V16QI 1 \"memory_operand\" \"\"))]\n+  [(use (match_operand:V16QI 0 \"altivec_register_operand\"))\n+   (use (match_operand:V16QI 1 \"memory_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   if (VECTOR_ELT_ORDER_BIG)\n@@ -2626,6 +2635,15 @@\n   DONE;\n })\n \n+(define_insn \"altivec_lvsr_reg\"\n+  [(set (match_operand:V16QI 0 \"altivec_register_operand\" \"=v\")\n+       (unspec:V16QI\n+       [(match_operand:DI 1 \"gpc_reg_operand\" \"b\")]\n+       UNSPEC_LVSR_REG))]\n+  \"TARGET_ALTIVEC\"\n+  \"lvsr %0,0,%1\"\n+  [(set_attr \"type\" \"vecload\")])\n+\n (define_insn \"altivec_lvsr_direct\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n \t(unspec:V16QI [(match_operand:V16QI 1 \"memory_operand\" \"Z\")]"}, {"sha": "151ac64e2aa47e4dcdab9c40d50e4af0e7ce6990", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1262c6cf3a0ca41bcb02959ab0842677e5517d28/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1262c6cf3a0ca41bcb02959ab0842677e5517d28/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=1262c6cf3a0ca41bcb02959ab0842677e5517d28", "patch": "@@ -2142,6 +2142,7 @@ BU_P9V_OVERLOAD_2 (VIESP,\t\"insert_exp_sp\")\n \n /* 2 argument vector functions added in ISA 3.0 (power9).  */\n BU_P9V_64BIT_VSX_2 (LXVL,\t\"lxvl\",\t\tCONST,\tlxvl)\n+BU_P9V_64BIT_VSX_2 (XL_LEN_R,\t\"xl_len_r\",\tCONST,  xl_len_r)\n \n BU_P9V_AV_2 (VEXTUBLX, \"vextublx\",\t\tCONST,\tvextublx)\n BU_P9V_AV_2 (VEXTUBRX, \"vextubrx\",\t\tCONST,\tvextubrx)\n@@ -2158,6 +2159,7 @@ BU_P9V_VSX_3 (VINSERT4B_DI, \"vinsert4b_di\",\tCONST,\tvinsert4b_di)\n /* 3 argument vector functions returning void, treated as SPECIAL,\n    added in ISA 3.0 (power9).  */\n BU_P9V_64BIT_AV_X (STXVL,\t\"stxvl\",\tMISC)\n+BU_P9V_64BIT_AV_X (XST_LEN_R,\t\"xst_len_r\",\tMISC)\n \n /* 1 argument vector functions added in ISA 3.0 (power9). */\n BU_P9V_AV_1 (VCLZLSBB, \"vclzlsbb\",\t\tCONST,\tvclzlsbb)\n@@ -2199,12 +2201,14 @@ BU_P9V_AV_P (VCMPNEZW_P,\t\"vcmpnezw_p\",\tCONST,\tvector_nez_v4si_p)\n \n /* ISA 3.0 Vector scalar overloaded 2 argument functions */\n BU_P9V_OVERLOAD_2 (LXVL,\t\"lxvl\")\n+BU_P9V_OVERLOAD_2 (XL_LEN_R,\t\"xl_len_r\")\n BU_P9V_OVERLOAD_2 (VEXTULX,\t\"vextulx\")\n BU_P9V_OVERLOAD_2 (VEXTURX,\t\"vexturx\")\n BU_P9V_OVERLOAD_2 (VEXTRACT4B,\t\"vextract4b\")\n \n /* ISA 3.0 Vector scalar overloaded 3 argument functions */\n BU_P9V_OVERLOAD_3 (STXVL,\t\"stxvl\")\n+BU_P9V_OVERLOAD_3 (XST_LEN_R,\t\"xst_len_r\")\n BU_P9V_OVERLOAD_3 (VINSERT4B,\t\"vinsert4b\")\n \n /* Overloaded CMPNE support was implemented prior to Power 9,"}, {"sha": "2a916b4387371a9d09a8a097bfbd5a009250fc7b", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1262c6cf3a0ca41bcb02959ab0842677e5517d28/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1262c6cf3a0ca41bcb02959ab0842677e5517d28/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=1262c6cf3a0ca41bcb02959ab0842677e5517d28", "patch": "@@ -4798,6 +4798,10 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P9V_BUILTIN_VEC_VSCEDPUO, P9V_BUILTIN_VSCEDPUO,\n     RS6000_BTI_INTSI, RS6000_BTI_double, RS6000_BTI_double, 0 },\n \n+  { P9V_BUILTIN_VEC_XL_LEN_R, P9V_BUILTIN_XL_LEN_R,\n+    RS6000_BTI_unsigned_V16QI, ~RS6000_BTI_UINTQI,\n+    RS6000_BTI_unsigned_long_long, 0 },\n+\n   { P9V_BUILTIN_VEC_LXVL, P9V_BUILTIN_LXVL,\n     RS6000_BTI_V16QI, ~RS6000_BTI_INTQI,\n     RS6000_BTI_unsigned_long_long, 0 },\n@@ -4842,6 +4846,10 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   /* At an appropriate future time, add support for the\n      RS6000_BTI_Float16 (exact name to be determined) type here.  */\n \n+  { P9V_BUILTIN_VEC_XST_LEN_R, P9V_BUILTIN_XST_LEN_R,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V16QI,\n+    ~RS6000_BTI_UINTQI, RS6000_BTI_unsigned_long_long},\n+\n   { P9V_BUILTIN_VEC_STXVL, P9V_BUILTIN_STXVL,\n     RS6000_BTI_void, RS6000_BTI_V16QI, ~RS6000_BTI_INTQI,\n     RS6000_BTI_unsigned_long_long },"}, {"sha": "1e794a0faa6d4ed07931c6a07ef3d196ad12e5dc", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1262c6cf3a0ca41bcb02959ab0842677e5517d28/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1262c6cf3a0ca41bcb02959ab0842677e5517d28/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=1262c6cf3a0ca41bcb02959ab0842677e5517d28", "patch": "@@ -15571,6 +15571,9 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n     case P9V_BUILTIN_STXVL:\n       return altivec_expand_stxvl_builtin (CODE_FOR_stxvl, exp);\n \n+    case P9V_BUILTIN_XST_LEN_R:\n+      return altivec_expand_stxvl_builtin (CODE_FOR_xst_len_r, exp);\n+\n     case VSX_BUILTIN_STXVD2X_V1TI:\n       return altivec_expand_stv_builtin (CODE_FOR_vsx_store_v1ti, exp);\n     case VSX_BUILTIN_STXVD2X_V2DF:\n@@ -17629,8 +17632,12 @@ altivec_init_builtins (void)\n   def_builtin (\"__builtin_vec_stvrxl\", void_ftype_v16qi_long_pvoid, ALTIVEC_BUILTIN_VEC_STVRXL);\n \n   if (TARGET_P9_VECTOR)\n-    def_builtin (\"__builtin_altivec_stxvl\", void_ftype_v16qi_pvoid_long,\n-\t\t P9V_BUILTIN_STXVL);\n+    {\n+      def_builtin (\"__builtin_altivec_stxvl\", void_ftype_v16qi_pvoid_long,\n+\t\t   P9V_BUILTIN_STXVL);\n+      def_builtin (\"__builtin_xst_len_r\", void_ftype_v16qi_pvoid_long,\n+\t\t   P9V_BUILTIN_XST_LEN_R);\n+    }\n \n   /* Add the DST variants.  */\n   d = bdesc_dst;"}, {"sha": "16ed1698dc3574b11436a1211f041930a21b2b09", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1262c6cf3a0ca41bcb02959ab0842677e5517d28/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1262c6cf3a0ca41bcb02959ab0842677e5517d28/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=1262c6cf3a0ca41bcb02959ab0842677e5517d28", "patch": "@@ -382,8 +382,16 @@\n    UNSPEC_VSX_VTSTDC\n    UNSPEC_VSX_VEC_INIT\n    UNSPEC_VSX_VSIGNED2\n+\n    UNSPEC_LXVL\n+   UNSPEC_LXVLL\n+   UNSPEC_LVSL_REG\n+   UNSPEC_LVSR_REG\n    UNSPEC_STXVL\n+   UNSPEC_STXVLL\n+   UNSPEC_XL_LEN_R\n+   UNSPEC_XST_LEN_R\n+\n    UNSPEC_VCLZLSBB\n    UNSPEC_VCTZLSBB\n    UNSPEC_VEXTUBLX\n@@ -4352,6 +4360,43 @@\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"vecload\")])\n \n+(define_insn \"lxvll\"\n+  [(set (match_operand:V16QI 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:V16QI [(match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n+\t\t       (match_operand:DI 2 \"register_operand\" \"r\")]\n+\t\t      UNSPEC_LXVLL))]\n+  \"TARGET_P9_VECTOR\"\n+  \"lxvll %x0,%1,%2\"\n+  [(set_attr \"type\" \"vecload\")])\n+\n+;; Expand for builtin xl_len_r\n+(define_expand \"xl_len_r\"\n+  [(match_operand:V16QI 0 \"vsx_register_operand\")\n+   (match_operand:DI 1 \"register_operand\")\n+   (match_operand:DI 2 \"register_operand\")]\n+  \"\"\n+{\n+  rtx shift_mask = gen_reg_rtx (V16QImode);\n+  rtx rtx_vtmp = gen_reg_rtx (V16QImode);\n+  rtx tmp = gen_reg_rtx (DImode);\n+\n+  emit_insn (gen_altivec_lvsl_reg (shift_mask, operands[2]));\n+  emit_insn (gen_ashldi3 (tmp, operands[2], GEN_INT (56)));\n+  emit_insn (gen_lxvll (rtx_vtmp, operands[1], tmp));\n+  emit_insn (gen_altivec_vperm_v8hiv16qi (operands[0], rtx_vtmp, rtx_vtmp,\n+\t     shift_mask));\n+  DONE;\n+})\n+\n+(define_insn \"stxvll\"\n+  [(set (mem:V16QI (match_operand:DI 1 \"gpc_reg_operand\" \"b\"))\n+\t(unspec:V16QI [(match_operand:V16QI 0 \"vsx_register_operand\" \"wa\")\n+\t\t       (match_operand:DI 2 \"register_operand\" \"r\")]\n+\t              UNSPEC_STXVLL))]\n+  \"TARGET_P9_VECTOR\"\n+  \"stxvll %x0,%1,%2\"\n+  [(set_attr \"type\" \"vecstore\")])\n+\n ;; Store VSX Vector with Length\n (define_expand \"stxvl\"\n   [(set (match_dup 3)\n@@ -4377,6 +4422,25 @@\n   [(set_attr \"length\" \"8\")\n    (set_attr \"type\" \"vecstore\")])\n \n+;; Expand for builtin xst_len_r\n+(define_expand \"xst_len_r\"\n+  [(match_operand:V16QI 0 \"vsx_register_operand\" \"=wa\")\n+   (match_operand:DI 1 \"register_operand\" \"b\")\n+   (match_operand:DI 2 \"register_operand\" \"r\")]\n+  \"UNSPEC_XST_LEN_R\"\n+{\n+  rtx shift_mask = gen_reg_rtx (V16QImode);\n+  rtx rtx_vtmp = gen_reg_rtx (V16QImode);\n+  rtx tmp = gen_reg_rtx (DImode);\n+\n+  emit_insn (gen_altivec_lvsr_reg (shift_mask, operands[2]));\n+  emit_insn (gen_altivec_vperm_v8hiv16qi (rtx_vtmp, operands[0], operands[0],\n+\t     shift_mask));\n+  emit_insn (gen_ashldi3 (tmp, operands[2], GEN_INT (56)));\n+  emit_insn (gen_stxvll (rtx_vtmp, operands[1], tmp));\n+  DONE;\n+})\n+\n ;; Vector Compare Not Equal Byte\n (define_insn \"vcmpneb\"\n   [(set (match_operand:V16QI 0 \"altivec_register_operand\" \"=v\")"}, {"sha": "9064561b4fa831d0ed7eec420a904c1f92714252", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1262c6cf3a0ca41bcb02959ab0842677e5517d28/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1262c6cf3a0ca41bcb02959ab0842677e5517d28/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=1262c6cf3a0ca41bcb02959ab0842677e5517d28", "patch": "@@ -15653,6 +15653,8 @@ vector unsigned short vec_xl_len (unsigned short *addr, size_t len);\n vector double vec_xl_len (double *addr, size_t len);\n vector float vec_xl_len (float *addr, size_t len);\n \n+vector unsigned char vec_xl_len_r (unsigned char *addr, size_t len);\n+\n void vec_xst_len (vector signed char data, signed char *addr, size_t len);\n void vec_xst_len (vector unsigned char data, unsigned char *addr, size_t len);\n void vec_xst_len (vector signed int data, signed int *addr, size_t len);\n@@ -15666,6 +15668,8 @@ void vec_xst_len (vector signed __int128 data, signed __int128 *addr, size_t len\n void vec_xst_len (vector double data, double *addr, size_t len);\n void vec_xst_len (vector float data, float *addr, size_t len);\n \n+void vec_xst_len_r (vector unsigned char data, unsigned char *addr, size_t len);\n+\n signed char vec_xlx (unsigned int index, vector signed char data);\n unsigned char vec_xlx (unsigned int index, vector unsigned char data);\n signed short vec_xlx (unsigned int index, vector signed short data);"}, {"sha": "64aea85c664eeedc46d5e31de01cabdd677e07a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1262c6cf3a0ca41bcb02959ab0842677e5517d28/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1262c6cf3a0ca41bcb02959ab0842677e5517d28/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1262c6cf3a0ca41bcb02959ab0842677e5517d28", "patch": "@@ -1,3 +1,8 @@\n+2017-09-26  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-5-p9-runnable.c: Add new runable test\n+\tfile for the new built-ins and the existing built-ins.\n+\n 2017-09-26  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/82143"}, {"sha": "ad3947196af4dd534ea8d1aecb1f3d651634e216", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-5-p9-runnable.c", "status": "added", "additions": 309, "deletions": 0, "changes": 309, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1262c6cf3a0ca41bcb02959ab0842677e5517d28/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-5-p9-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1262c6cf3a0ca41bcb02959ab0842677e5517d28/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-5-p9-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-5-p9-runnable.c?ref=1262c6cf3a0ca41bcb02959ab0842677e5517d28", "patch": "@@ -0,0 +1,309 @@\n+/* { dg-do run { target { powerpc*-*-* &&  p9vector_hw } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n+\n+#include <stdint.h>\n+#include <stdio.h> \n+#include <inttypes.h>\n+#include <altivec.h> // vector\n+\n+#define TRUE 1\n+#define FALSE 0\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+void abort (void);\n+\n+int result_wrong(vector unsigned char vec_expected,\n+\t\t  vector unsigned char vec_actual)\n+{\n+  int i;\n+\n+  for (i=0; i<16; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n+\n+  return FALSE;\n+}\n+\n+int main() {\n+   int i, j;\n+   size_t size;\n+   unsigned char data_uc[100];\n+   vector unsigned char store_data_uc;\n+   unsigned char *address;\n+   vector unsigned char *datap;\n+   \n+   vector unsigned char vec_uc_expected1, vec_uc_expected2,\n+      vec_uc_result1, vec_uc_result2;\n+   vector int data_int;\n+   \n+   for (i=0; i<100; i++)\n+      data_uc[i] = i+1;\n+\n+   \n+   /* VEC_XL_LEN */\n+   \n+   size = 8;\n+   vec_uc_result1 = vec_xl_len (data_uc, size);\n+\n+   vec_uc_expected1 = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8,\n+                                              0, 0, 0, 0, 0, 0, 0, 0};\n+   \n+   if (result_wrong (vec_uc_expected1, vec_uc_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: result does not match expected result\\n\");\n+       printf(\"vec_xl_len (%d): vec_uc_expected1[0] to vec_uc_expected1[15]\\n\",\n+\t      size);\n+\n+       for (i=0; i<16; i++)\n+\t printf(\" %d,\",vec_uc_expected1[i]);\n+\n+       printf(\"\\nvec_xl_len (%d): vec_uc_result1[0] to vec_uc_result1[15]\\n\",\n+\t      size);\n+   \n+       for (i=0; i<16; i++)\n+\t printf(\" %d,\", vec_uc_result1[i]);\n+\n+       printf(\"\\n\\n\");\n+#else\n+       abort();\n+#endif\n+     }\n+\n+\n+   /* VEC_XL_LEN_R */\n+   size = 8;\n+   vec_uc_result2 = vec_xl_len_r(data_uc, size);\n+\n+   vec_uc_expected2 = (vector unsigned char){8, 7, 6, 5, 4, 3, 2, 1,\n+\t\t\t\t\t     0, 0, 0, 0, 0, 0, 0, 0,};\n+   \n+   if (result_wrong (vec_uc_expected2, vec_uc_result2))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: result does not match expected result\\n\");\n+       printf(\"vec_xl_len_r(%d): vec_uc_expected2[0] to vec_uc_expected2[15]\\n\",\n+\t  size);\n+   \n+       for (i=0; i<16; i++)\n+\t printf(\" %d,\", vec_uc_expected2[i]);\n+\n+       printf(\"\\nvec_xl_len_r(%d): vec_uc_result2[0] to vec_uc_result2[15]\\n\",\n+\t      size);\n+   \n+       for (i=0; i<16; i++)\n+\t printf(\" %d,\", vec_uc_result2[i]);\n+\n+       printf(\"\\n\\n\");\n+#else\n+       abort();\n+#endif\n+     }\n+       \n+\n+   size = 4;\n+   vec_uc_result2 = vec_xl_len_r(data_uc, size);\n+\n+   vec_uc_expected2 = (vector unsigned char){ 4, 3, 2, 1, 0, 0, 0, 0,\n+                                              0, 0, 0, 0, 0, 0, 0, 0 };\n+   \n+   if (result_wrong (vec_uc_expected2, vec_uc_result2))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: result does not match expected result\\n\");\n+       printf(\"vec_xl_len_r(%d): vec_uc_expected2[0] to vec_uc_expected2[15]\\n\",\n+\t    size);\n+   \n+       for (i=0; i<16; i++)\n+\t printf(\" %d,\", vec_uc_expected2[i]);\n+\n+       printf(\"\\nvec_xl_len_r(%d): vec_uc_result2[0] to vec_uc_result2[15]\\n\",\n+\t      size);\n+   \n+       for (i=0; i<16; i++)\n+\t printf(\" %d,\", vec_uc_result2[i]);\n+\n+       printf(\"\\n\\n\");\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   size = 2;\n+   vec_uc_result2 = vec_xl_len_r(data_uc, size);\n+\n+   vec_uc_expected2 = (vector unsigned char){ 2, 1, 0, 0, 0, 0, 0, 0,\n+                                              0, 0, 0, 0, 0, 0, 0, 0 };\n+   \n+   if (result_wrong (vec_uc_expected2, vec_uc_result2))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: result does not match expected result\\n\");\n+       printf(\"vec_xl_len_r(%d): vec_uc_expected2[0] to vec_uc_expected2[15]\\n\",\n+\t      size);\n+       for (i=0; i<16; i++)\n+\t printf(\" %d,\", vec_uc_expected2[i]);\n+\n+       printf(\"\\nvec_xl_len_r(%d) vec_uc_result2[0] to vec_uc_result2[15]\\n\",\n+\t      size);\n+   \n+       for (i=0; i<16; i++)\n+\t printf(\" %d,\", vec_uc_result2[i]);\n+\n+       printf(\"\\n\\n\");\n+#else\n+       abort();\n+#endif\n+     }\n+\n+\n+   /* VEC_XST_LEN */\n+   vec_uc_expected2 = (vector unsigned char){ 1, 2, 0, 0, 0, 0, 0, 0,\n+                                              0, 0, 0, 0, 0, 0, 0, 0 };\n+   store_data_uc = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t   9, 10, 11, 12, 13, 14, 15, 16 };\n+   size = 2;\n+\n+   for (i=0; i<16; i++)\n+     vec_uc_result2[i] = 0;\n+   \n+   address = &vec_uc_result2[0];\n+   vec_xst_len (store_data_uc, address, size);\n+\n+   if (result_wrong (vec_uc_expected2, vec_uc_result2))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: result does not match expected result\\n\");\n+       printf(\"vec_xst_len (%d) vec_uc_result2[0] to vec_uc_result2[15]\\n\",\n+\t      size);\n+\n+       for (i=0; i<16; i++)\n+\t printf(\" %d,\", vec_uc_expected2[i]);\n+\n+       printf(\"\\nvec_xst_len (%d) store_data_uc[0] to store_data_uc[15]\\n\",\n+\t      size);\n+\n+       for (i=0; i<16; i++)\n+\t printf(\" %d,\", vec_uc_result2[i]);\n+\n+       printf(\"\\n\\n\");\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   vec_uc_expected2 = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8,\n+                                              9, 10, 11, 12, 13, 14, 0, 0 };\n+   store_data_uc = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t   9, 10, 11, 12, 13, 14, 15, 16 };\n+   size = 14;\n+\n+   for (i=0; i<16; i++)\n+     vec_uc_result2[i] = 0;\n+\n+   address = &vec_uc_result2[0];\n+\n+   vec_xst_len (store_data_uc, address, size);\n+   \n+   if (result_wrong (vec_uc_expected2, vec_uc_result2))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: result does not match expected result\\n\");\n+       printf(\"vec_xst_len (%d) vec_uc_result2[0] to vec_uc_result2[15]\\n\",\n+\t      size);\n+\n+       for (i=0; i<16; i++)\n+\t printf(\" %d,\", vec_uc_expected2[i]);\n+\n+       printf(\"\\nvec_xst_len (%d) store_data_uc[0] to store_data_uc[15]\\n\",\n+\t      size);\n+\n+       for (i=0; i<16; i++)\n+\t printf(\" %d,\", vec_uc_result2[i]);\n+\n+       printf(\"\\n\\n\");\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   /* VEC_XST_LEN_R */\n+   vec_uc_expected1 = (vector unsigned char){ 2, 1, 0, 0, 0, 0, 0, 0,\n+                                              0, 0, 0, 0, 0, 0, 0, 0 };\n+   store_data_uc = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t   9, 10, 11, 12, 13, 14, 15, 16 };\n+   vec_uc_result1 = (vector unsigned char){ 0, 0, 0, 0, 0, 0, 0, 0, \n+\t\t\t\t\t    0, 0, 0, 0, 0, 0, 0, 0 };\n+\n+   size = 2;\n+\n+   for (i=0; i<16; i++)\n+     vec_uc_result1[i] = 0;\n+\n+   address = &vec_uc_result1[0];\n+\n+   vec_xst_len_r(store_data_uc, address, size);\n+\n+   if (result_wrong (vec_uc_expected1, vec_uc_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: result does not match expected result\\n\");\n+       printf(\"vec_xst_len_r(%d) vec_uc_expected1[0] to vec_uc_expected1[15]\\n\",\n+\t      size);\n+   \n+       for (i=0; i<16; i++)\n+\t printf(\" %d,\", vec_uc_expected1[i]);\n+\n+       printf(\"\\nvec_xst_len_r(%d) result[0] to result[15]\\n\", size);\n+\n+       for (i=0; i<16; i++)\n+\t printf(\" %d,\", vec_uc_result1[i]);\n+\n+       printf(\"\\n\\n\");\n+#else\n+       abort();\n+#endif\n+     }\n+\n+\n+   vec_uc_expected1 = (vector unsigned char){ 14, 13, 12, 11, 10, 9, 8, 7,\n+                                              6, 5, 4, 3, 2, 1, 0, 0 };\n+   store_data_uc = (vector unsigned char){ 1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t   9, 10, 11, 12, 13, 14, 15, 16 };\n+   vec_uc_result1 = (vector unsigned char){ 0, 0, 0, 0, 0, 0, 0, 0, \n+\t\t\t\t\t    0, 0, 0, 0, 0, 0, 0, 0 };\n+\n+   size = 14;\n+\n+   for (i=0; i<16; i++)\n+     vec_uc_result1[i] = 0;\n+\n+   address = &vec_uc_result1[0];\n+\n+   vec_xst_len_r(store_data_uc, address, size);\n+\n+   if (result_wrong (vec_uc_expected1, vec_uc_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: result does not match expected result\\n\");\n+       printf(\"vec_xst_len_r(%d) vec_uc_expected2[0] to vec_uc_expected2[15]\\n\",\n+\t  size);\n+   \n+       for (i=0; i<16; i++)\n+\t printf(\" %d,\", vec_uc_expected2[i]);\n+\n+       printf(\"\\nvec_xst_len_r(%d) result[0] to result[15]\\n\", size);\n+\n+       for (i=0; i<16; i++)\n+\t printf(\" %d,\", vec_uc_result1[i]);\n+\n+       printf(\"\\n\\n\");\n+#else\n+       abort();\n+#endif\n+     }\n+}"}]}