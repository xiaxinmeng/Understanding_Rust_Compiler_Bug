{"sha": "04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRmMGZjZjdiZGZhMWI0ZDE1M2NhMzdkZjg4NDNjNDRlZDhjNGQ5Mw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-11-23T17:20:37Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-11-23T17:20:37Z"}, "message": "[Patch 5/17] Add -fpermitted-flt-eval-methods=[c11|ts-18661-3]\n\ngcc/c-family/\n\n\t* c-opts.c (c_common_post_options): Add logic to handle the default\n\tcase for -fpermitted-flt-eval-methods.\n\ngcc/\n\n\t* common.opt (fpermitted-flt-eval-methods): New.\n\t* doc/invoke.texi (-fpermitted-flt-eval-methods): Document it.\n\t* flag_types.h (permitted_flt_eval_methods): New.\n\ngcc/testsuite/\n\n\t* gcc.dg/fpermitted-flt-eval-methods_1.c: New.\n\t* gcc.dg/fpermitted-flt-eval-methods_2.c: New.\n\nFrom-SVN: r242775", "tree": {"sha": "343934567075da4bb109dc150aba66e28db9662b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/343934567075da4bb109dc150aba66e28db9662b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b89de1b8ddc95632605c599c0e2555307a68a2af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b89de1b8ddc95632605c599c0e2555307a68a2af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b89de1b8ddc95632605c599c0e2555307a68a2af"}], "stats": {"total": 114, "additions": 114, "deletions": 0}, "files": [{"sha": "8ce444b384797358ab6127e05d1415cdfd9b9b0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93", "patch": "@@ -1,3 +1,9 @@\n+2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* common.opt (fpermitted-flt-eval-methods): New.\n+\t* doc/invoke.texi (-fpermitted-flt-eval-methods): Document it.\n+\t* flag_types.h (permitted_flt_eval_methods): New.\n+\n 2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/m68k/m68k.c (m68k_excess_precision): New."}, {"sha": "f4d81a19515aa7c024dd6ed88f660cd2c2be1f4d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93", "patch": "@@ -1,3 +1,8 @@\n+2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* c-opts.c (c_common_post_options): Add logic to handle the default\n+\tcase for -fpermitted-flt-eval-methods.\n+\n 2016-11-23  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* c.opt (Wexpansion-to-defined): New."}, {"sha": "57717ff41d883bca9b5f14bf3ebd19653eac90f5", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93", "patch": "@@ -788,6 +788,18 @@ c_common_post_options (const char **pfilename)\n       && flag_unsafe_math_optimizations == 0)\n     flag_fp_contract_mode = FP_CONTRACT_OFF;\n \n+  /* If we are compiling C, and we are outside of a standards mode,\n+     we can permit the new values from ISO/IEC TS 18661-3 for\n+     FLT_EVAL_METHOD.  Otherwise, we must restrict the possible values to\n+     the set specified in ISO C99/C11.  */\n+  if (!flag_iso\n+      && !c_dialect_cxx ()\n+      && (global_options_set.x_flag_permitted_flt_eval_methods\n+\t  == PERMITTED_FLT_EVAL_METHODS_DEFAULT))\n+    flag_permitted_flt_eval_methods = PERMITTED_FLT_EVAL_METHODS_TS_18661;\n+  else\n+    flag_permitted_flt_eval_methods = PERMITTED_FLT_EVAL_METHODS_C11;\n+\n   /* By default we use C99 inline semantics in GNU99 or C99 mode.  C99\n      inline semantics are not supported in GNU89 or C89 mode.  */\n   if (flag_gnu89_inline == -1)"}, {"sha": "d7ccf3b1a90a1274b005ea916d510cbeda12fefd", "filename": "gcc/common.opt", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93", "patch": "@@ -1326,6 +1326,21 @@ Enum(excess_precision) String(fast) Value(EXCESS_PRECISION_FAST)\n EnumValue\n Enum(excess_precision) String(standard) Value(EXCESS_PRECISION_STANDARD)\n \n+; Whether we permit the extended set of values for FLT_EVAL_METHOD\n+; introduced in ISO/IEC TS 18661-3, or limit ourselves to those in C99/C11.\n+fpermitted-flt-eval-methods=\n+Common Joined RejectNegative Enum(permitted_flt_eval_methods) Var(flag_permitted_flt_eval_methods) Init(PERMITTED_FLT_EVAL_METHODS_DEFAULT)\n+-fpermitted-flt-eval-methods=[c11|ts-18661]\tSpecify which values of FLT_EVAL_METHOD are permitted.\n+\n+Enum\n+Name(permitted_flt_eval_methods) Type(enum permitted_flt_eval_methods) UnknownError(unknown specification for the set of FLT_EVAL_METHOD values to permit %qs)\n+\n+EnumValue\n+Enum(permitted_flt_eval_methods) String(c11) Value(PERMITTED_FLT_EVAL_METHODS_C11)\n+\n+EnumValue\n+Enum(permitted_flt_eval_methods) String(ts-18661-3) Value(PERMITTED_FLT_EVAL_METHODS_TS_18661)\n+\n ffast-math\n Common Optimization\n "}, {"sha": "a9d060999352d0e7e80b6e56778352cf972b929f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93", "patch": "@@ -178,6 +178,7 @@ in the following sections.\n @item C Language Options\n @xref{C Dialect Options,,Options Controlling C Dialect}.\n @gccoptlist{-ansi  -std=@var{standard}  -fgnu89-inline @gol\n+-fpermitted-flt-eval-methods=@var{standard} @gol\n -aux-info @var{filename} -fallow-parameterless-variadic-functions @gol\n -fno-asm  -fno-builtin  -fno-builtin-@var{function} -fgimple@gol\n -fhosted  -ffreestanding -fopenacc -fopenmp -fopenmp-simd @gol\n@@ -1867,6 +1868,30 @@ The preprocessor macros @code{__GNUC_GNU_INLINE__} and\n in effect for @code{inline} functions.  @xref{Common Predefined\n Macros,,,cpp,The C Preprocessor}.\n \n+@item -fpermitted-flt-eval-methods=@var{style}\n+@opindex fpermitted-flt-eval-methods\n+@opindex fpermitted-flt-eval-methods=c11\n+@opindex fpermitted-flt-eval-methods=ts-18661-3\n+ISO/IEC TS 18661-3 defines new permissible values for\n+@code{FLT_EVAL_METHOD} that indicate that operations and constants with\n+a semantic type that is an interchange or extended format should be\n+evaluated to the precision and range of that type.  These new values are\n+a superset of those permitted under C99/C11, which does not specify the\n+meaning of other positive values of @code{FLT_EVAL_METHOD}.  As such, code\n+conforming to C11 may not have been written expecting the possibility of\n+the new values.\n+\n+@option{-fpermitted-flt-eval-methods} specifies whether the compiler\n+should allow only the values of @code{FLT_EVAL_METHOD} specified in C99/C11,\n+or the extended set of values specified in ISO/IEC TS 18661-3.\n+\n+@var{style} is either @code{c11} or @code{ts-18661-3} as appropriate.\n+\n+The default when in a standards compliant mode (@option{-std=c11} or similar)\n+is @option{-fpermitted-flt-eval-methods=c11}.  The default when in a GNU\n+dialect (@option{-std=gnu11} or similar) is\n+@option{-fpermitted-flt-eval-methods=ts-18661-3}.\n+\n @item -aux-info @var{filename}\n @opindex aux-info\n Output to the given filename prototyped declarations for all functions"}, {"sha": "d69f8f489b82f4498cc0592af3f0468eea1e743e", "filename": "gcc/flag-types.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93", "patch": "@@ -158,6 +158,14 @@ enum excess_precision\n   EXCESS_PRECISION_STANDARD\n };\n \n+/* The options for which values of FLT_EVAL_METHOD are permissible.  */\n+enum permitted_flt_eval_methods\n+{\n+  PERMITTED_FLT_EVAL_METHODS_DEFAULT,\n+  PERMITTED_FLT_EVAL_METHODS_TS_18661,\n+  PERMITTED_FLT_EVAL_METHODS_C11\n+};\n+\n /* Type of stack check.  */\n enum stack_check_type\n {"}, {"sha": "40d00326111858d34081fd03b76959d2a6e10a2f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93", "patch": "@@ -1,3 +1,8 @@\n+2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.dg/fpermitted-flt-eval-methods_1.c: New.\n+\t* gcc.dg/fpermitted-flt-eval-methods_2.c: New.\n+\n 2016-11-23  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/78461"}, {"sha": "c022f86b250c022ea2e71323a4bfa682c6a40d8e", "filename": "gcc/testsuite/gcc.dg/fpermitted-flt-eval-methods_1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93/gcc%2Ftestsuite%2Fgcc.dg%2Ffpermitted-flt-eval-methods_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93/gcc%2Ftestsuite%2Fgcc.dg%2Ffpermitted-flt-eval-methods_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffpermitted-flt-eval-methods_1.c?ref=04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=c11\" } */\n+\n+/* Test that we only see the C99/C11 values for __FLT_EVAL_METHOD__ if\n+   we are compiling with -std=c11.  */\n+\n+int main (int argc, char** argv)\n+{\n+  switch (__FLT_EVAL_METHOD__)\n+    {\n+      case 0:\n+      case 1:\n+      case 2:\n+      case -1:\n+\treturn 0;\n+      default:\n+\treturn 1;\n+    }\n+}"}, {"sha": "a76ea7e99a078fdf92f81bfc445d9a76a23f396d", "filename": "gcc/testsuite/gcc.dg/fpermitted-flt-eval-methods_2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93/gcc%2Ftestsuite%2Fgcc.dg%2Ffpermitted-flt-eval-methods_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93/gcc%2Ftestsuite%2Fgcc.dg%2Ffpermitted-flt-eval-methods_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffpermitted-flt-eval-methods_2.c?ref=04f0fcf7bdfa1b4d153ca37df8843c44ed8c4d93", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fpermitted-flt-eval-methods=c11\" } */\n+\n+/* Test that we only see the C99/C11 values for __FLT_EVAL_METHOD__ if\n+   we are compiling with -fpermitted-flt-eval-methods=c11.  */\n+\n+int main (int argc, char** argv)\n+{\n+  switch (__FLT_EVAL_METHOD__)\n+    {\n+      case 0:\n+      case 1:\n+      case 2:\n+      case -1:\n+\treturn 0;\n+      default:\n+\treturn 1;\n+    }\n+}"}]}