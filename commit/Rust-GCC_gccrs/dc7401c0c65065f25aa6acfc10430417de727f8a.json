{"sha": "dc7401c0c65065f25aa6acfc10430417de727f8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM3NDAxYzBjNjUwNjVmMjVhYTZhY2ZjMTA0MzA0MTdkZTcyN2Y4YQ==", "commit": {"author": {"name": "Sebastian Peryt", "email": "sebastian.peryt@intel.com", "date": "2017-05-31T18:26:44Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-05-31T18:26:44Z"}, "message": "* config/i386/avx512fintrin.h (_mm_mask_max_sd)\n        (_mm_maskz_max_sd, _mm_mask_max_ss, _mm_maskz_max_ss)\n        (_mm_mask_min_sd, _mm_maskz_min_sd, _mm_mask_min_ss)\n        (_mm_maskz_min_ss): New intrinsics.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512f-vmaxsd-1.c (_mm_mask_max_sd)\n\t(_mm_maskz_max_sd): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vmaxsd-2.c (_mm_mask_max_sd)\n\t(_mm_maskz_max_sd): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vmaxss-1.c (_mm_mask_max_ss)\n\t(_mm_maskz_max_ss): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vmaxss-2.c (_mm_mask_max_ss)\n\t(_mm_maskz_max_ss): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vminsd-1.c (_mm_mask_min_sd)\n\t(_mm_maskz_min_sd): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vminsd-2.c (_mm_mask_min_sd)\n\t(_mm_maskz_min_sd): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vminss-1.c (_mm_mask_min_ss)\n\t(_mm_maskz_min_ss): Test new intrinsics.\n\t* gcc.target/i386/avx512f-vminss-2.c (_mm_mask_min_ss)\n\t(_mm_maskz_min_ss): Test new intrinsics.\n\nFrom-SVN: r248756", "tree": {"sha": "1611ec12f190decd7ef70429bbadd52fd9b83ea1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1611ec12f190decd7ef70429bbadd52fd9b83ea1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc7401c0c65065f25aa6acfc10430417de727f8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc7401c0c65065f25aa6acfc10430417de727f8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc7401c0c65065f25aa6acfc10430417de727f8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc7401c0c65065f25aa6acfc10430417de727f8a/comments", "author": {"login": "speryt", "id": 44768132, "node_id": "MDQ6VXNlcjQ0NzY4MTMy", "avatar_url": "https://avatars.githubusercontent.com/u/44768132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/speryt", "html_url": "https://github.com/speryt", "followers_url": "https://api.github.com/users/speryt/followers", "following_url": "https://api.github.com/users/speryt/following{/other_user}", "gists_url": "https://api.github.com/users/speryt/gists{/gist_id}", "starred_url": "https://api.github.com/users/speryt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/speryt/subscriptions", "organizations_url": "https://api.github.com/users/speryt/orgs", "repos_url": "https://api.github.com/users/speryt/repos", "events_url": "https://api.github.com/users/speryt/events{/privacy}", "received_events_url": "https://api.github.com/users/speryt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "049a5d31b9fce6c40721e8c07573c34df9ed9eec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049a5d31b9fce6c40721e8c07573c34df9ed9eec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/049a5d31b9fce6c40721e8c07573c34df9ed9eec"}], "stats": {"total": 259, "additions": 219, "deletions": 40}, "files": [{"sha": "7e4d17518633663f88269034b189ba0137c6f668", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc7401c0c65065f25aa6acfc10430417de727f8a", "patch": "@@ -1,3 +1,10 @@\n+2017-05-31  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* config/i386/avx512fintrin.h (_mm_mask_max_sd)\n+        (_mm_maskz_max_sd, _mm_mask_max_ss, _mm_maskz_max_ss)\n+        (_mm_mask_min_sd, _mm_maskz_min_sd, _mm_mask_min_ss)\n+        (_mm_maskz_min_ss): New intrinsics.\n+\n 2017-05-31  Martin Liska  <mliska@suse.cz>\n \n \t* tree-vect-loop.c (vect_create_epilog_for_reduction):\n@@ -102,11 +109,9 @@\n \tm_format_postprocessor.\n \t(pretty_printer::~pretty_printer): Delete any\n \tm_format_postprocessor.\n-\t* pretty-print.h (printer_fn): Add bool and const char **\n-\tparameters.\n+\t* pretty-print.h (printer_fn): Add bool and const char ** parameters.\n \t(class format_postprocessor): New class.\n-\t(struct pretty_printer::format_decoder): Document the new\n-\tparameters.\n+\t(struct pretty_printer::format_decoder): Document the new parameters.\n \t(struct pretty_printer::m_format_postprocessor): New field.\n \t* tree-diagnostic.c (default_tree_printer): Update for new\n \tbool and const char ** params.\n@@ -363,8 +368,7 @@\n 2017-05-26  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/80844\n-\t* tree-vectorizer.c (adjust_simduid_builtins): Propagate\n-\tresults.\n+\t* tree-vectorizer.c (adjust_simduid_builtins): Propagate results.\n \n 2017-05-25  Sebastian Peryt  <sebastian.peryt@intel.com>\n "}, {"sha": "e383983afc1bf0dd3b12f15e627492b4955352c6", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=dc7401c0c65065f25aa6acfc10430417de727f8a", "patch": "@@ -11737,6 +11737,52 @@ _mm512_maskz_max_ps (__mmask16 __U, __m512 __A, __m512 __B)\n \t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_max_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_maxsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df) __W,\n+\t\t\t\t\t\t (__mmask8) __U,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_max_sd (__mmask8 __U, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_maxsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df)\n+\t\t\t\t\t\t _mm_setzero_pd (),\n+\t\t\t\t\t\t (__mmask8) __U,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_max_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_maxss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t(__v4sf) __B,\n+\t\t\t\t\t\t(__v4sf) __W,\n+\t\t\t\t\t\t(__mmask8) __U,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_max_ss (__mmask8 __U, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_maxss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t(__v4sf) __B,\n+\t\t\t\t\t\t(__v4sf)\n+\t\t\t\t\t\t_mm_setzero_ps (),\n+\t\t\t\t\t\t(__mmask8) __U,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_min_pd (__m512d __A, __m512d __B)\n@@ -11807,6 +11853,52 @@ _mm512_maskz_min_ps (__mmask16 __U, __m512 __A, __m512 __B)\n \t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_min_sd (__m128d __W, __mmask8 __U, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_minsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df) __W,\n+\t\t\t\t\t\t (__mmask8) __U,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_min_sd (__mmask8 __U, __m128d __A, __m128d __B)\n+{\n+  return (__m128d) __builtin_ia32_minsd_mask_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t (__v2df)\n+\t\t\t\t\t\t _mm_setzero_pd (),\n+\t\t\t\t\t\t (__mmask8) __U,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_min_ss (__m128 __W, __mmask8 __U, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_minss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t(__v4sf) __B,\n+\t\t\t\t\t\t(__v4sf) __W,\n+\t\t\t\t\t\t(__mmask8) __U,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_min_ss (__mmask8 __U, __m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_minss_mask_round ((__v4sf) __A,\n+\t\t\t\t\t\t(__v4sf) __B,\n+\t\t\t\t\t\t(__v4sf)\n+\t\t\t\t\t\t_mm_setzero_ps (),\n+\t\t\t\t\t\t(__mmask8) __U,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_scalef_pd (__m512d __A, __m512d __B)"}, {"sha": "97b0d4c2c02010c6dbc333bc7156918af76e5c26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dc7401c0c65065f25aa6acfc10430417de727f8a", "patch": "@@ -1,3 +1,22 @@\n+2017-05-31  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* gcc.target/i386/avx512f-vmaxsd-1.c (_mm_mask_max_sd)\n+\t(_mm_maskz_max_sd): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vmaxsd-2.c (_mm_mask_max_sd)\n+\t(_mm_maskz_max_sd): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vmaxss-1.c (_mm_mask_max_ss)\n+\t(_mm_maskz_max_ss): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vmaxss-2.c (_mm_mask_max_ss)\n+\t(_mm_maskz_max_ss): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vminsd-1.c (_mm_mask_min_sd)\n+\t(_mm_maskz_min_sd): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vminsd-2.c (_mm_mask_min_sd)\n+\t(_mm_maskz_min_sd): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vminss-1.c (_mm_mask_min_ss)\n+\t(_mm_maskz_min_ss): Test new intrinsics.\n+\t* gcc.target/i386/avx512f-vminss-2.c (_mm_mask_min_ss)\n+\t(_mm_maskz_min_ss): Test new intrinsics.\n+\n 2017-05-31  Nathan Sidwell  <nathan@acm.org>\n \n \t* g++.dg/lookup/lambda1.C New."}, {"sha": "161de342efe57d45f6a485d51687f6bf9dffbdee", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmaxsd-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxsd-1.c?ref=dc7401c0c65065f25aa6acfc10430417de727f8a", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vmaxsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vmaxsd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmaxsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmaxsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n@@ -12,6 +14,8 @@ volatile __mmask8 m;\n void extern\n avx512f_test (void)\n {\n+  x1 = _mm_mask_max_sd (x1, m, x2, x3);\n+  x1 = _mm_maskz_max_sd (m, x1, x2);\n   x1 = _mm_max_round_sd (x1, x2, _MM_FROUND_NO_EXC);\n   x1 = _mm_mask_max_round_sd (x1, m, x2, x3,  _MM_FROUND_NO_EXC);\n   x1 = _mm_maskz_max_round_sd (m, x1, x2, _MM_FROUND_NO_EXC);"}, {"sha": "e732d442f94ea0f58db34da235117206d024b87b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmaxsd-2.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxsd-2.c?ref=dc7401c0c65065f25aa6acfc10430417de727f8a", "patch": "@@ -20,7 +20,7 @@ void\n avx512f_test (void)\n {\n   int i, sign;\n-  union128d res1, res2, res3, src1, src2;\n+  union128d res1, res2, res3, res4, res5, src1, src2;\n   MASK_TYPE mask = MASK_VALUE;\n   double res_ref[SIZE];\n \n@@ -29,26 +29,38 @@ avx512f_test (void)\n     {\n       src1.a[i] = 1.5 + 34.67 * i * sign;\n       src2.a[i] = -22.17 * i * sign + 1.0;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res4.a[i] = DEFAULT_VALUE;\n       sign = sign * -1;\n     }\n-  for (i = 0; i < SIZE; i++)\n-      res2.a[i] = DEFAULT_VALUE;\n \n-  res1.x = _mm_max_round_sd (src1.x, src2.x, _MM_FROUND_NO_EXC);\n-  res2.x = _mm_mask_max_round_sd (res2.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n-  res3.x = _mm_maskz_max_round_sd (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res1.x = _mm_mask_max_sd (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_max_sd (mask, src1.x, src2.x);\n+  res3.x = _mm_max_round_sd (src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_mask_max_round_sd (res4.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_maskz_max_round_sd (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n \n   calc_max (res_ref, src1.a, src2.a);\n \n+  MASK_MERGE (d) (res_ref, mask, 1);\n   if (check_union128d (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  calc_max (res_ref, src1.a, src2.a);\n+\n+  if (check_union128d (res3, res_ref))\n     abort();\n   \n   MASK_MERGE (d) (res_ref, mask, 1);\n-  if (check_union128d (res2, res_ref))\n+  if (check_union128d (res4, res_ref))\n     abort ();\n \n   MASK_ZERO (d) (res_ref, mask, 1);\n-  if (check_union128d (res3, res_ref))\n+  if (check_union128d (res5, res_ref))\n     abort ();\n }\n "}, {"sha": "668afad95299310a69826964e83a30e536572069", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmaxss-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxss-1.c?ref=dc7401c0c65065f25aa6acfc10430417de727f8a", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vmaxss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vmaxss\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmaxss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmaxss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n@@ -12,6 +14,8 @@ volatile __mmask8 m;\n void extern\n avx512f_test (void)\n {\n+  x1 = _mm_mask_max_ss (x1, m, x2, x3);\n+  x1 = _mm_maskz_max_ss (m, x1, x2);\n   x1 = _mm_max_round_ss (x1, x2, _MM_FROUND_NO_EXC);\n   x1 = _mm_mask_max_round_ss (x1, m, x2, x3, _MM_FROUND_NO_EXC);\n   x1 = _mm_maskz_max_round_ss (m, x1, x2, _MM_FROUND_NO_EXC);"}, {"sha": "c63a4596b64be5bf079ae9898c0cd100cdd880d0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmaxss-2.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmaxss-2.c?ref=dc7401c0c65065f25aa6acfc10430417de727f8a", "patch": "@@ -24,7 +24,7 @@ void\n avx512f_test (void)\n {\n   int i, sign;\n-  union128 res1, res2, res3, src1, src2;\n+  union128 res1, res2, res3, res4, res5, src1, src2;\n   MASK_TYPE mask = MASK_VALUE;\n   float res_ref[SIZE];\n \n@@ -33,26 +33,38 @@ avx512f_test (void)\n     {\n       src1.a[i] = 1.5 + 34.67 * i * sign;\n       src2.a[i] = -22.17 * i * sign + 1.0;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res4.a[i] = DEFAULT_VALUE;\n       sign = sign * -1;\n     }\n-  for (i = 0; i < SIZE; i++)\n-      res2.a[i] = DEFAULT_VALUE;\n \n-  res1.x = _mm_max_round_ss (src1.x, src2.x, _MM_FROUND_NO_EXC);\n-  res2.x = _mm_mask_max_round_ss (res2.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n-  res3.x = _mm_maskz_max_round_ss (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res1.x = _mm_mask_max_ss (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_max_ss (mask, src1.x, src2.x);\n+  res3.x = _mm_max_round_ss (src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_mask_max_round_ss (res4.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_maskz_max_round_ss (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n \n   calc_max (res_ref, src1.a, src2.a);\n \n+  MASK_MERGE () (res_ref, mask, 1);\n   if (check_union128 (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  calc_max (res_ref, src1.a, src2.a);\n+\n+  if (check_union128 (res3, res_ref))\n     abort();\n   \n   MASK_MERGE () (res_ref, mask, 1);\n-  if (check_union128 (res2, res_ref))\n+  if (check_union128 (res4, res_ref))\n     abort ();\n \n   MASK_ZERO () (res_ref, mask, 1);\n-  if (check_union128 (res3, res_ref))\n+  if (check_union128 (res5, res_ref))\n     abort ();\n }\n "}, {"sha": "58b213db4e15fc1ec94707d59fe891c48076b826", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vminsd-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminsd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminsd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminsd-1.c?ref=dc7401c0c65065f25aa6acfc10430417de727f8a", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vminsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vminsd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vminsd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vminsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vminsd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n@@ -12,6 +14,8 @@ volatile __mmask8 m;\n void extern\n avx512f_test (void)\n {\n+  x1 = _mm_mask_min_sd (x1, m, x2, x3);\n+  x1 = _mm_maskz_min_sd (m, x1, x2);\n   x1 = _mm_min_round_sd (x1, x2, _MM_FROUND_NO_EXC);\n   x1 = _mm_mask_min_round_sd (x1, m, x2, x3, _MM_FROUND_NO_EXC);\n   x1 = _mm_maskz_min_round_sd (m, x1, x2, _MM_FROUND_NO_EXC);"}, {"sha": "464ce96cd8f39d755e6f8bc0d2e633403f757c39", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vminsd-2.c", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminsd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminsd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminsd-2.c?ref=dc7401c0c65065f25aa6acfc10430417de727f8a", "patch": "@@ -20,7 +20,7 @@ void\n avx512f_test (void)\n {\n   int i, sign;\n-  union128d res1, res2, res3, src1, src2;\n+  union128d res1, res2, res3, res4, res5, src1, src2;\n   MASK_TYPE mask = MASK_VALUE;\n   double res_ref[SIZE];\n \n@@ -29,26 +29,38 @@ avx512f_test (void)\n     {\n       src1.a[i] = 1.5 + 34.67 * i * sign;\n       src2.a[i] = -22.17 * i * sign + 1.0;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res4.a[i] = DEFAULT_VALUE;\n       sign = sign * -1;\n     }\n-  for (i = 0; i < SIZE; i++)\n-      res2.a[i] = DEFAULT_VALUE;\n-\n-  res1.x = _mm_min_round_sd (src1.x, src2.x, _MM_FROUND_NO_EXC);\n-  res2.x = _mm_mask_min_round_sd (res2.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n-  res3.x = _mm_maskz_min_round_sd (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+ \n+  res1.x = _mm_mask_min_sd (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_min_sd (mask, src1.x, src2.x);\n+  res3.x = _mm_min_round_sd (src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_mask_min_round_sd (res4.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_maskz_min_round_sd (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n \n   calc_min (res_ref, src1.a, src2.a);\n \n+  MASK_MERGE (d) (res_ref, mask, 1);\n   if (check_union128d (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (d) (res_ref, mask, 1);\n+  if (check_union128d (res2, res_ref))\n+    abort ();\n+\n+  calc_min (res_ref, src1.a, src2.a);\n+\n+  if (check_union128d (res3, res_ref))\n     abort();\n   \n   MASK_MERGE (d) (res_ref, mask, 1);\n-  if (check_union128d (res2, res_ref))\n+  if (check_union128d (res4, res_ref))\n     abort ();\n \n   MASK_ZERO (d) (res_ref, mask, 1);\n-  if (check_union128d (res3, res_ref))\n+  if (check_union128d (res5, res_ref))\n     abort ();\n }\n "}, {"sha": "7d2175e7b0e698027dd4747caeadc3e1ab13c94c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vminss-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminss-1.c?ref=dc7401c0c65065f25aa6acfc10430417de727f8a", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vminss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vminss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vminss\\[ \\\\t\\]+\\[^\\{\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vminss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vminss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n@@ -12,6 +14,8 @@ volatile __mmask8 m;\n void extern\n avx512f_test (void)\n {\n+  x1 = _mm_mask_min_ss (x1, m, x2, x3);\n+  x1 = _mm_maskz_min_ss (m, x1, x2);\n   x1 = _mm_min_round_ss (x1, x2, _MM_FROUND_NO_EXC);\n   x1 = _mm_mask_min_round_ss (x1, m, x2, x3, _MM_FROUND_NO_EXC);\n   x1 = _mm_maskz_min_round_ss (m, x1, x2, _MM_FROUND_NO_EXC);"}, {"sha": "351c273e5950ada2a263b30cf1e9e3ed9983c3b7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vminss-2.c", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7401c0c65065f25aa6acfc10430417de727f8a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vminss-2.c?ref=dc7401c0c65065f25aa6acfc10430417de727f8a", "patch": "@@ -24,7 +24,7 @@ void\n avx512f_test (void)\n {\n   int i, sign;\n-  union128 res1, res2, res3, src1, src2;\n+  union128 res1, res2, res3, res4, res5, src1, src2;\n   MASK_TYPE mask = MASK_VALUE;\n   float res_ref[SIZE];\n \n@@ -33,26 +33,38 @@ avx512f_test (void)\n     {\n       src1.a[i] = 1.5 + 34.67 * i * sign;\n       src2.a[i] = -22.17 * i * sign + 1.0;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res4.a[i] = DEFAULT_VALUE;\n       sign = sign * -1;\n     }\n-  for (i = 0; i < SIZE; i++)\n-      res2.a[i] = DEFAULT_VALUE;\n \n-  res1.x = _mm_min_round_ss (src1.x, src2.x, _MM_FROUND_NO_EXC);\n-  res2.x = _mm_mask_min_round_ss (res2.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n-  res3.x = _mm_maskz_min_round_ss (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res1.x = _mm_mask_min_ss (res1.x, mask, src1.x, src2.x);\n+  res2.x = _mm_maskz_min_ss (mask, src1.x, src2.x);\n+  res3.x = _mm_min_round_ss (src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res4.x = _mm_mask_min_round_ss (res4.x, mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n+  res5.x = _mm_maskz_min_round_ss (mask, src1.x, src2.x, _MM_FROUND_NO_EXC);\n \n   calc_min (res_ref, src1.a, src2.a);\n-\n+ \n+  MASK_MERGE () (res_ref, mask, 1);\n   if (check_union128 (res1, res_ref))\n+    abort ();\n+\n+  MASK_ZERO () (res_ref, mask, 1);\n+  if (check_union128 (res2, res_ref))\n+    abort ();\n+\n+  calc_min (res_ref, src1.a, src2.a);\n+\n+  if (check_union128 (res3, res_ref))\n     abort();\n   \n   MASK_MERGE () (res_ref, mask, 1);\n-  if (check_union128 (res2, res_ref))\n+  if (check_union128 (res4, res_ref))\n     abort ();\n \n   MASK_ZERO () (res_ref, mask, 1);\n-  if (check_union128 (res3, res_ref))\n+  if (check_union128 (res5, res_ref))\n     abort ();\n }\n "}]}