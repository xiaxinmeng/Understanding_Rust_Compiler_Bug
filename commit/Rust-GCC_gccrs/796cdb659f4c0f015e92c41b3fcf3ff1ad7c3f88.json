{"sha": "796cdb659f4c0f015e92c41b3fcf3ff1ad7c3f88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk2Y2RiNjU5ZjRjMGYwMTVlOTJjNDFiM2ZjZjNmZjFhZDdjM2Y4OA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-01-07T11:26:15Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-01-07T11:26:15Z"}, "message": "c-common.c (c_common_nodes_and_builtins): Add _Exit builtin.\n\n\t* c-common.c (c_common_nodes_and_builtins): Add _Exit builtin.\n\t* extend.texi: Document _Exit builtin.\n\ntestsuite:\n\t* gcc.c-torture/execute/builtin-noret-1.c: New test.\n\nFrom-SVN: r38771", "tree": {"sha": "78a559501ccca1b52e8ea0c89ea33d6d82bc3137", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78a559501ccca1b52e8ea0c89ea33d6d82bc3137"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/796cdb659f4c0f015e92c41b3fcf3ff1ad7c3f88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/796cdb659f4c0f015e92c41b3fcf3ff1ad7c3f88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/796cdb659f4c0f015e92c41b3fcf3ff1ad7c3f88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/796cdb659f4c0f015e92c41b3fcf3ff1ad7c3f88/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ca3d2b15202f9f48a05c20e214b6f93aecbaf64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ca3d2b15202f9f48a05c20e214b6f93aecbaf64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ca3d2b15202f9f48a05c20e214b6f93aecbaf64"}], "stats": {"total": 109, "additions": 104, "deletions": 5}, "files": [{"sha": "2aa50d0edecb4d1a7a03837328c69034ed2e2633", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/796cdb659f4c0f015e92c41b3fcf3ff1ad7c3f88/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/796cdb659f4c0f015e92c41b3fcf3ff1ad7c3f88/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=796cdb659f4c0f015e92c41b3fcf3ff1ad7c3f88", "patch": "@@ -1,3 +1,8 @@\n+2001-01-07  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (c_common_nodes_and_builtins): Add _Exit builtin.\n+\t* extend.texi: Document _Exit builtin.\n+\n 2001-01-07  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n         * (initialize, initialize_builtins,"}, {"sha": "3a76510428e7d60790d0308bb01118cb41aa5f6e", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/796cdb659f4c0f015e92c41b3fcf3ff1ad7c3f88/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/796cdb659f4c0f015e92c41b3fcf3ff1ad7c3f88/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=796cdb659f4c0f015e92c41b3fcf3ff1ad7c3f88", "patch": "@@ -5558,9 +5558,11 @@ c_common_nodes_and_builtins ()\n   builtin_function_2 (NULL_PTR, \"alloca\", NULL_TREE, ptr_ftype_sizetype,\n \t\t      BUILT_IN_ALLOCA, BUILT_IN_NORMAL, 0, 1, 0);\n #endif\n-  /* Declare _exit just to mark it as non-returning.  */\n+  /* Declare _exit and _Exit just to mark them as non-returning.  */\n   builtin_function_2 (NULL_PTR, \"_exit\", NULL_TREE, void_ftype_int,\n \t\t      0, NOT_BUILT_IN, 0, 1, 1);\n+  builtin_function_2 (NULL_PTR, \"_Exit\", NULL_TREE, void_ftype_int,\n+\t\t      0, NOT_BUILT_IN, 0, !flag_isoc99, 1);\n \n   builtin_function_2 (\"__builtin_index\", \"index\",\n \t\t      string_ftype_cstring_int, string_ftype_cstring_int,"}, {"sha": "e893c67f15c43f64c08ceb8627a9e0652a06351a", "filename": "gcc/extend.texi", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/796cdb659f4c0f015e92c41b3fcf3ff1ad7c3f88/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/796cdb659f4c0f015e92c41b3fcf3ff1ad7c3f88/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=796cdb659f4c0f015e92c41b3fcf3ff1ad7c3f88", "patch": "@@ -3371,6 +3371,7 @@ function as well.\n @findex creall\n @findex exit\n @findex _exit\n+@findex _Exit\n @findex fabs\n @findex fabsf\n @findex fabsl\n@@ -3421,10 +3422,11 @@ option.  Many of these functions are only optimized in certain cases; if\n not optimized in a particular case, a call to the library function will\n be emitted.\n \n-The functions @code{abort}, @code{exit}, and @code{_exit} are recognized\n-and presumed not to return, but otherwise are not built in.\n-@code{_exit} is not recognized in strict ISO C mode (@samp{-ansi},\n-@samp{-std=c89} or @samp{-std=c99}).\n+The functions @code{abort}, @code{exit}, @code{_Exit} and @code{_exit}\n+are recognized and presumed not to return, but otherwise are not built\n+in.  @code{_exit} is not recognized in strict ISO C mode (@samp{-ansi},\n+@samp{-std=c89} or @samp{-std=c99}).  @code{_Exit} is not recognized in\n+strict C89 mode (@samp{-ansi} or @samp{-std=c89}).\n \n Outside strict ISO C mode, the functions @code{alloca}, @code{bcmp},\n @code{bzero}, @code{index}, @code{rindex} and @code{ffs} may be handled"}, {"sha": "0626643f7e2badad56b326f491911373d33f29a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/796cdb659f4c0f015e92c41b3fcf3ff1ad7c3f88/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/796cdb659f4c0f015e92c41b3fcf3ff1ad7c3f88/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=796cdb659f4c0f015e92c41b3fcf3ff1ad7c3f88", "patch": "@@ -1,3 +1,7 @@\n+2001-01-07  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.c-torture/execute/builtin-noret-1.c: New test.\n+\n 2001-01-07  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.dg/format/format.h: New file."}, {"sha": "cfd78991214ee6bc90bc0b958d80a777f6a68f49", "filename": "gcc/testsuite/gcc.c-torture/execute/builtin-noret-1.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/796cdb659f4c0f015e92c41b3fcf3ff1ad7c3f88/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-noret-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/796cdb659f4c0f015e92c41b3fcf3ff1ad7c3f88/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-noret-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltin-noret-1.c?ref=796cdb659f4c0f015e92c41b3fcf3ff1ad7c3f88", "patch": "@@ -0,0 +1,86 @@\n+/* Test for builtin noreturn attributes.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+\n+extern void abort (void);\n+extern void exit (int);\n+#if 0 /* Doesn't work with prototype (bug?).  */\n+extern void _exit (int);\n+extern void _Exit (int);\n+#endif\n+\n+extern void tabort (void);\n+extern void texit (void);\n+extern void t_exit (void);\n+extern void t_Exit (void);\n+\n+extern void link_failure (void);\n+\n+int\n+main (void)\n+{\n+  volatile int i = 0;\n+  /* The real test here is that the program links.  */\n+  if (i)\n+    tabort ();\n+  if (i)\n+    texit ();\n+  if (i)\n+    t_exit ();\n+  if (i)\n+    t_Exit ();\n+  exit (0);\n+}\n+\n+void\n+tabort (void)\n+{\n+  abort ();\n+  link_failure ();\n+}\n+\n+void\n+texit (void)\n+{\n+  exit (1);\n+  link_failure ();\n+}\n+\n+void\n+t_exit (void)\n+{\n+  _exit (1);\n+  link_failure ();\n+}\n+\n+/* Some non-Unix libcs might not have _exit.  This version should never\n+   get called.  */\n+static void\n+_exit (int i)\n+{\n+  abort ();\n+}\n+\n+void\n+t_Exit (void)\n+{\n+  _Exit (1);\n+  link_failure ();\n+}\n+\n+/* Some libcs might not have _Exit.  This version should never get called.  */\n+static void\n+_Exit (int i)\n+{\n+  abort ();\n+}\n+\n+/* When optimizing, no calls to link_failure should remain.  In any case,\n+   link_failure should not be called.  */\n+\n+#ifndef __OPTIMIZE__\n+void\n+link_failure (void)\n+{\n+  abort ();\n+}\n+#endif"}]}