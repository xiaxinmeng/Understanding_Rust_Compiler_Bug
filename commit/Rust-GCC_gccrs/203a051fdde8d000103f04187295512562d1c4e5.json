{"sha": "203a051fdde8d000103f04187295512562d1c4e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAzYTA1MWZkZGU4ZDAwMDEwM2YwNDE4NzI5NTUxMjU2MmQxYzRlNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-23T02:10:55Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-23T02:10:55Z"}, "message": "* ir.texi: Document CLEANUP_STMT, SCOPE_STMT, and START_CATCH_STMT.\n\nFrom-SVN: r29610", "tree": {"sha": "fe07a729d858dfb015d9df328ed1bebb827527cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe07a729d858dfb015d9df328ed1bebb827527cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/203a051fdde8d000103f04187295512562d1c4e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/203a051fdde8d000103f04187295512562d1c4e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/203a051fdde8d000103f04187295512562d1c4e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/203a051fdde8d000103f04187295512562d1c4e5/comments", "author": null, "committer": null, "parents": [{"sha": "5fdaba89421ba0d09b316db6ecd457549f1a4ca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fdaba89421ba0d09b316db6ecd457549f1a4ca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fdaba89421ba0d09b316db6ecd457549f1a4ca6"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "f4e900cd7be80eaf570621ffab2b33cc09e3d491", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203a051fdde8d000103f04187295512562d1c4e5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203a051fdde8d000103f04187295512562d1c4e5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=203a051fdde8d000103f04187295512562d1c4e5", "patch": "@@ -1,5 +1,7 @@\n 1999-09-22  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* ir.texi: Document CLEANUP_STMT, SCOPE_STMT, and START_CATCH_STMT.\n+\n \t* decl.c (pushdecl): Do create a binding for extern \"C\" functions,\n \tbut not for their DECL_ASSEMBLER_NAMEs.\n \t(lookup_name_current_level): Fix formatting."}, {"sha": "92ef2a6b6093ec216c1ca8335bd745b03d55d205", "filename": "gcc/cp/ir.texi", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/203a051fdde8d000103f04187295512562d1c4e5/gcc%2Fcp%2Fir.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/203a051fdde8d000103f04187295512562d1c4e5/gcc%2Fcp%2Fir.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fir.texi?ref=203a051fdde8d000103f04187295512562d1c4e5", "patch": "@@ -1011,6 +1011,9 @@ FIXME: Explain about constructor try-catch blocks.\n @findex ASM_OUTPUTS\n @findex ASM_CLOBBERS\n @tindex BREAK_STMT\n+@tindex CLEANUP_STMT\n+@findex CLEANUP_DECL\n+@findex CLEANUP_EXPR\n @tindex COMPOUND_STMT\n @findex COMPOUND_BODY\n @tindex CONTINUE_STMT\n@@ -1038,6 +1041,12 @@ FIXME: Explain about constructor try-catch blocks.\n @tindex RETURN_INIT\n @tindex RETURN_STMT\n @findex RETURN_EXPR\n+@tindex SCOPE_STMT\n+@findex SCOPE_BEGIN_P\n+@findex SCOPE_END_P\n+@findex SCOPE_NULLIFIED_P\n+@tindex START_CATCH_STMT\n+@findex START_CATCH_TYPE\n @tindex SUBOBJECT\n @findex SUBOBJECT_CLEANUP\n @tindex SWITCH_STMT\n@@ -1190,6 +1199,18 @@ case 2 ... 5:\n The first value will be @code{CASE_LOW}, while the second will be\n @code{CASE_HIGH}.\n \n+@item CLEANUP_STMT\n+\n+Used to represent an action that should take place upon exit from the\n+enclosing scope.  Typically, these actions are calls to destructors for\n+local objects, but back-ends cannot rely on this fact.  If these nodes\n+are in fact representing such destructors, @code{CLEANUP_DECL} will be\n+the @code{VAR_DECL} destroyed.  Otherwise, @code{CLEANUP_DECL} will be\n+@code{NULL_TREE}.  In any case, the @code{CLEANUP_EXPR} is the\n+expression to execute.  The cleanups executed on exit from a scope\n+should be run in the reverse order of the order in which the associated\n+@code{CLEANUP_STMT}s were encountered.\n+\n @item COMPOUND_STMT\n \n Used to represent a brace-enclosed block.  The first substatement is\n@@ -1266,6 +1287,24 @@ was just\n return;\n @end example\n \n+@item SCOPE_STMT\n+\n+A scope-statement represents the beginning or end of a scope.  If\n+@code{SCOPE_BEGIN_P} holds, this statement represents the beginning of a\n+scope; if @code{SCOPE_END_P} holds this statement represents the end of\n+a scope.  On exit from a scope, all cleanups from @code{CLEANUP_STMT}s\n+occurring in the scope must be run, in reverse order to the order in\n+which they were encountered.  If @code{SCOPE_NULLIFIED_P} holds of the\n+scope, back-ends should behave as if the @code{SCOPE_STMT} were not\n+present at all.\n+\n+@item START_CATCH_STMT\n+\n+These statements represent the location to which control is transferred\n+when an exception is thrown.  The @code{START_CATCH_TYPE} is the type of\n+exception that will be caught by this handler; it is equal (by pointer\n+equalit) to @code{CATCH_ALL_TYPE} if this handler is for all types.\n+\n @item SUBOBJECT\n \n In a constructor, these nodes are used to mark the point at which a\n@@ -1286,12 +1325,9 @@ Used to represent a @code{try} block.  The body of the try block is\n given by @code{TRY_STMTS}.  Each of the catch blocks is a @code{HANDLER}\n node.  The first handler is given by @code{TRY_HANDLERS}.  Subsequent\n handlers are obtained by following the @code{TREE_CHAIN} link from one\n-handler to the next.  The parameters for each handler are given by\n-@code{HANDLER_PARMS}.  The body of the handler is given by\n+handler to the next.  The body of the handler is given by\n @code{HANDLER_BODY}.\n \n-FIXME: Document the use of @code{HANDLER_PARMS}.\n-\n If @code{CLEANUP_P} holds of the @code{TRY_BLOCK}, then the\n @code{TRY_HANDLERS} will not be a @code{HANDLER} node.  Instead, it will\n be an expression that should be executed if an exception is thrown in"}]}