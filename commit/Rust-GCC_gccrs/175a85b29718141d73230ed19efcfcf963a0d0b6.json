{"sha": "175a85b29718141d73230ed19efcfcf963a0d0b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc1YTg1YjI5NzE4MTQxZDczMjMwZWQxOWVmY2ZjZjk2M2EwZDBiNg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2019-10-11T22:22:52Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2019-10-11T22:22:52Z"}, "message": "Support decimal floating-point constants in C2x.\n\nISO C2x adds decimal floating point as an optional standard feature.\nThis patch accordingly makes GCC accept DFP constants (DF, DD, DL, df,\ndd, dl suffixes) in strict C2X mode, with a pedwarn-if-pedantic for\nolder standards and a warning with -Wc11-c2x-compat even in C2x mode\n(which in turn requires -Wc11-c2x-compat to be newly passed through to\nlibcpp).\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\ngcc/c-family:\n\t* c.opt (Wc11-c2x-compat): Add CPP(cpp_warn_c11_c2x_compat)\n\tCppReason(CPP_W_C11_C2X_COMPAT).\n\ngcc/testsuite:\n\t* gcc.dg/dfp/c11-constants-1.c, gcc.dg/dfp/c11-constants-2.c,\n\tgcc.dg/dfp/c2x-constants-1.c, gcc.dg/dfp/c2x-constants-2.c: New\n\ttests.\n\t* gcc.dg/dfp/constants-pedantic.c: Use -std=gnu17 explicitly.\n\tUpdate expected diagnostics.\n\nlibcpp:\n\t* include/cpplib.h (struct cpp_options): Add dfp_constants and\n\tcpp_warn_c11_c2x_compat.\n\t(enum cpp_warning_reason): Add CPP_W_C11_C2X_COMPAT.\n\t* init.c (struct lang_flags): Add dfp_constants.\n\t(lang_defaults): Set dfp_constants to 1 for GNUC2X and STDC2X and\n\t0 for other languages.\n\t(cpp_set_lang): Set dfp_constants from language.\n\t(cpp_create_reader): Set cpp_warn_c11_c2x_compat to -1.\n\t* expr.c (interpret_float_suffix): Mention DFP constants as C2X in\n\tcomment.\n\t(cpp_classify_number): Do not diagnose DFP constants for languages\n\tsetting dfp_constants, unless cpp_warn_c11_c2x_compat.\n\nFrom-SVN: r276908", "tree": {"sha": "298edc1e58a374a72a21832169c07cd2157bcb8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/298edc1e58a374a72a21832169c07cd2157bcb8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/175a85b29718141d73230ed19efcfcf963a0d0b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/175a85b29718141d73230ed19efcfcf963a0d0b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/175a85b29718141d73230ed19efcfcf963a0d0b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/175a85b29718141d73230ed19efcfcf963a0d0b6/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53f3c1a103d3939c1bf72361830280fa621d528a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53f3c1a103d3939c1bf72361830280fa621d528a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53f3c1a103d3939c1bf72361830280fa621d528a"}], "stats": {"total": 169, "additions": 133, "deletions": 36}, "files": [{"sha": "fea97bb434f969f58b6e63dae764cc0308d71fa3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/175a85b29718141d73230ed19efcfcf963a0d0b6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/175a85b29718141d73230ed19efcfcf963a0d0b6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=175a85b29718141d73230ed19efcfcf963a0d0b6", "patch": "@@ -1,3 +1,8 @@\n+2019-10-11  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c.opt (Wc11-c2x-compat): Add CPP(cpp_warn_c11_c2x_compat)\n+\tCppReason(CPP_W_C11_C2X_COMPAT).\n+\n 2019-10-11  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-common.c (c_common_reswords): Do not use D_EXT for _Decimal32,"}, {"sha": "495eb16a58a2bbe3c257cea84435de8d23a00bd4", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/175a85b29718141d73230ed19efcfcf963a0d0b6/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/175a85b29718141d73230ed19efcfcf963a0d0b6/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=175a85b29718141d73230ed19efcfcf963a0d0b6", "patch": "@@ -367,7 +367,7 @@ C ObjC C++ ObjC++ CPP(warn_builtin_macro_redefined) CppReason(CPP_W_BUILTIN_MACR\n Warn when a built-in preprocessor macro is undefined or redefined.\n \n Wc11-c2x-compat\n-C ObjC Var(warn_c11_c2x_compat) Init(-1) Warning\n+C ObjC CPP(cpp_warn_c11_c2x_compat) CppReason(CPP_W_C11_C2X_COMPAT) Var(warn_c11_c2x_compat) Init(-1) Warning\n Warn about features not present in ISO C11, but present in ISO C2X.\n \n Wc90-c99-compat"}, {"sha": "9b31f3536423869ba2b318f5210410aae77c35d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/175a85b29718141d73230ed19efcfcf963a0d0b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/175a85b29718141d73230ed19efcfcf963a0d0b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=175a85b29718141d73230ed19efcfcf963a0d0b6", "patch": "@@ -1,3 +1,11 @@\n+2019-10-11  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/dfp/c11-constants-1.c, gcc.dg/dfp/c11-constants-2.c,\n+\tgcc.dg/dfp/c2x-constants-1.c, gcc.dg/dfp/c2x-constants-2.c: New\n+\ttests.\n+\t* gcc.dg/dfp/constants-pedantic.c: Use -std=gnu17 explicitly.\n+\tUpdate expected diagnostics.\n+\n 2019-10-11  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/92070 - bogus error with -fchecking=2."}, {"sha": "472ed25f8cfcd1667dc00f38abdbd0433f6d3f6d", "filename": "gcc/testsuite/gcc.dg/dfp/c11-constants-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/175a85b29718141d73230ed19efcfcf963a0d0b6/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc11-constants-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/175a85b29718141d73230ed19efcfcf963a0d0b6/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc11-constants-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc11-constants-1.c?ref=175a85b29718141d73230ed19efcfcf963a0d0b6", "patch": "@@ -0,0 +1,13 @@\n+/* Test that DFP constants are diagnosed in C11 mode: -pedantic.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic\" } */\n+\n+int a = (int) 1.1DF; /* { dg-warning \"C2X feature\" } */\n+int b = (int) 2.df; /* { dg-warning \"C2X feature\" } */\n+int c = (int) .33DD; /* { dg-warning \"C2X feature\" } */\n+int d = (int) 2e1dd; /* { dg-warning \"C2X feature\" } */\n+int e = (int) .3e2DL; /* { dg-warning \"C2X feature\" } */\n+int f = (int) 4.5e3dl; /* { dg-warning \"C2X feature\" } */\n+int g = (int) 5.e0DF; /* { dg-warning \"C2X feature\" } */\n+int h = (int) 1e+2df; /* { dg-warning \"C2X feature\" } */\n+int i = (int) 1000e-3DL; /* { dg-warning \"C2X feature\" } */"}, {"sha": "79b20a2c386134e7cfe6e93818059c4f3ebd379f", "filename": "gcc/testsuite/gcc.dg/dfp/c11-constants-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/175a85b29718141d73230ed19efcfcf963a0d0b6/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc11-constants-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/175a85b29718141d73230ed19efcfcf963a0d0b6/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc11-constants-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc11-constants-2.c?ref=175a85b29718141d73230ed19efcfcf963a0d0b6", "patch": "@@ -0,0 +1,13 @@\n+/* Test that DFP constants are diagnosed in C11 mode: -pedantic-errors.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+int a = (int) 1.1DF; /* { dg-error \"C2X feature\" } */\n+int b = (int) 2.df; /* { dg-error \"C2X feature\" } */\n+int c = (int) .33DD; /* { dg-error \"C2X feature\" } */\n+int d = (int) 2e1dd; /* { dg-error \"C2X feature\" } */\n+int e = (int) .3e2DL; /* { dg-error \"C2X feature\" } */\n+int f = (int) 4.5e3dl; /* { dg-error \"C2X feature\" } */\n+int g = (int) 5.e0DF; /* { dg-error \"C2X feature\" } */\n+int h = (int) 1e+2df; /* { dg-error \"C2X feature\" } */\n+int i = (int) 1000e-3DL; /* { dg-error \"C2X feature\" } */"}, {"sha": "337550602fca29d4e024feccf392ceceba6a6cf5", "filename": "gcc/testsuite/gcc.dg/dfp/c2x-constants-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/175a85b29718141d73230ed19efcfcf963a0d0b6/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc2x-constants-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/175a85b29718141d73230ed19efcfcf963a0d0b6/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc2x-constants-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc2x-constants-1.c?ref=175a85b29718141d73230ed19efcfcf963a0d0b6", "patch": "@@ -0,0 +1,13 @@\n+/* Test that DFP constants are accepted in C2X mode.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+int a = (int) 1.1DF;\n+int b = (int) 2.df;\n+int c = (int) .33DD;\n+int d = (int) 2e1dd;\n+int e = (int) .3e2DL;\n+int f = (int) 4.5e3dl;\n+int g = (int) 5.e0DF;\n+int h = (int) 1e+2df;\n+int i = (int) 1000e-3DL;"}, {"sha": "eed35f29cd41058c6c32d675e9a6eaa27495fbb9", "filename": "gcc/testsuite/gcc.dg/dfp/c2x-constants-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/175a85b29718141d73230ed19efcfcf963a0d0b6/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc2x-constants-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/175a85b29718141d73230ed19efcfcf963a0d0b6/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc2x-constants-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fc2x-constants-2.c?ref=175a85b29718141d73230ed19efcfcf963a0d0b6", "patch": "@@ -0,0 +1,13 @@\n+/* Test that DFP constants are accepted in C2X mode: compat warnings.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -Wc11-c2x-compat\" } */\n+\n+int a = (int) 1.1DF; /* { dg-warning \"C2X feature\" } */\n+int b = (int) 2.df; /* { dg-warning \"C2X feature\" } */\n+int c = (int) .33DD; /* { dg-warning \"C2X feature\" } */\n+int d = (int) 2e1dd; /* { dg-warning \"C2X feature\" } */\n+int e = (int) .3e2DL; /* { dg-warning \"C2X feature\" } */\n+int f = (int) 4.5e3dl; /* { dg-warning \"C2X feature\" } */\n+int g = (int) 5.e0DF; /* { dg-warning \"C2X feature\" } */\n+int h = (int) 1e+2df; /* { dg-warning \"C2X feature\" } */\n+int i = (int) 1000e-3DL; /* { dg-warning \"C2X feature\" } */"}, {"sha": "1d85fedad73b62f75f5db06f3f294e6486199acd", "filename": "gcc/testsuite/gcc.dg/dfp/constants-pedantic.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/175a85b29718141d73230ed19efcfcf963a0d0b6/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-pedantic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/175a85b29718141d73230ed19efcfcf963a0d0b6/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-pedantic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-pedantic.c?ref=175a85b29718141d73230ed19efcfcf963a0d0b6", "patch": "@@ -1,14 +1,14 @@\n /* { dg-do compile } */\n-/* { dg-options \"-pedantic\" } */\n+/* { dg-options \"-std=gnu17 -pedantic\" } */\n \n /* N1150 6: Constants.\n    C99 6.4.4.2: Floating constants.  */\n \n #include \"dfp-dbg.h\"\n \n-_Decimal32 a = 1.1df;\t\t/* { dg-warning \"GCC extension|ISO C\" } */\n-_Decimal32 b = -.003DF;\t\t/* { dg-warning \"GCC extension|ISO C\" } */\n-_Decimal64 c = 11e-1dl;\t\t/* { dg-warning \"GCC extension|ISO C\" } */\n-_Decimal64 d = -.3DL;\t\t/* { dg-warning \"GCC extension|ISO C\" } */\n-_Decimal128 e = 000.3e0dl;\t/* { dg-warning \"GCC extension|ISO C\" } */\n-_Decimal128 f = 3000300030003e0DL;  /* { dg-warning \"GCC extension|ISO C\" } */\n+_Decimal32 a = 1.1df;\t\t/* { dg-warning \"C2X feature|ISO C\" } */\n+_Decimal32 b = -.003DF;\t\t/* { dg-warning \"C2X feature|ISO C\" } */\n+_Decimal64 c = 11e-1dl;\t\t/* { dg-warning \"C2X feature|ISO C\" } */\n+_Decimal64 d = -.3DL;\t\t/* { dg-warning \"C2X feature|ISO C\" } */\n+_Decimal128 e = 000.3e0dl;\t/* { dg-warning \"C2X feature|ISO C\" } */\n+_Decimal128 f = 3000300030003e0DL;  /* { dg-warning \"C2X feature|ISO C\" } */"}, {"sha": "e8d2e488588543d427abea1006968c10fb38d4e0", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/175a85b29718141d73230ed19efcfcf963a0d0b6/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/175a85b29718141d73230ed19efcfcf963a0d0b6/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=175a85b29718141d73230ed19efcfcf963a0d0b6", "patch": "@@ -1,3 +1,18 @@\n+2019-10-11  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* include/cpplib.h (struct cpp_options): Add dfp_constants and\n+\tcpp_warn_c11_c2x_compat.\n+\t(enum cpp_warning_reason): Add CPP_W_C11_C2X_COMPAT.\n+\t* init.c (struct lang_flags): Add dfp_constants.\n+\t(lang_defaults): Set dfp_constants to 1 for GNUC2X and STDC2X and\n+\t0 for other languages.\n+\t(cpp_set_lang): Set dfp_constants from language.\n+\t(cpp_create_reader): Set cpp_warn_c11_c2x_compat to -1.\n+\t* expr.c (interpret_float_suffix): Mention DFP constants as C2X in\n+\tcomment.\n+\t(cpp_classify_number): Do not diagnose DFP constants for languages\n+\tsetting dfp_constants, unless cpp_warn_c11_c2x_compat.\n+\n 2019-10-04  Nathan Sidwell  <nathan@acm.org>\n \n \tPR preprocessor/91991"}, {"sha": "65baafe3f1e1e1d24c77afdd16f8d7212ffc45d8", "filename": "libcpp/expr.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/175a85b29718141d73230ed19efcfcf963a0d0b6/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/175a85b29718141d73230ed19efcfcf963a0d0b6/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=175a85b29718141d73230ed19efcfcf963a0d0b6", "patch": "@@ -98,8 +98,8 @@ interpret_float_suffix (cpp_reader *pfile, const uchar *s, size_t len)\n   flags = 0;\n   f = d = l = w = q = i = fn = fnx = fn_bits = 0;\n \n-  /* The following decimal float suffixes, from TR 24732:2009 and TS\n-     18661-2:2015, are supported:\n+  /* The following decimal float suffixes, from TR 24732:2009, TS\n+     18661-2:2015 and C2X, are supported:\n \n      df, DF - _Decimal32.\n      dd, DD - _Decimal64.\n@@ -744,9 +744,16 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,\n \tcpp_error_with_line (pfile, CPP_DL_PEDWARN, virtual_location, 0,\n \t\t\t     \"fixed-point constants are a GCC extension\");\n \n-      if ((result & CPP_N_DFLOAT) && CPP_PEDANTIC (pfile))\n-\tcpp_error_with_line (pfile, CPP_DL_PEDWARN, virtual_location, 0,\n-\t\t\t     \"decimal float constants are a GCC extension\");\n+      if (result & CPP_N_DFLOAT)\n+\t{\n+\t  if (CPP_PEDANTIC (pfile) && !CPP_OPTION (pfile, dfp_constants))\n+\t    cpp_error_with_line (pfile, CPP_DL_PEDWARN, virtual_location, 0,\n+\t\t\t\t \"decimal float constants are a C2X feature\");\n+\t  else if (CPP_OPTION (pfile, cpp_warn_c11_c2x_compat) > 0)\n+\t    cpp_warning_with_line (pfile, CPP_W_C11_C2X_COMPAT,\n+\t\t\t\t   virtual_location, 0,\n+\t\t\t\t   \"decimal float constants are a C2X feature\");\n+\t}\n \n       result |= CPP_N_FLOATING;\n     }"}, {"sha": "224369b93ad9bdc60b5941e7c78dd3dde7ec2ceb", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/175a85b29718141d73230ed19efcfcf963a0d0b6/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/175a85b29718141d73230ed19efcfcf963a0d0b6/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=175a85b29718141d73230ed19efcfcf963a0d0b6", "patch": "@@ -480,6 +480,9 @@ struct cpp_options\n   /* Nonzero for C++ 2014 Standard digit separators.  */\n   unsigned char digit_separators;\n \n+  /* Nonzero for C2X decimal floating-point constants.  */\n+  unsigned char dfp_constants;\n+\n   /* Nonzero for C++2a __VA_OPT__ feature.  */\n   unsigned char va_opt;\n \n@@ -508,6 +511,9 @@ struct cpp_options\n   /* True if warn about differences between C90 and C99.  */\n   signed char cpp_warn_c90_c99_compat;\n \n+  /* True if warn about differences between C11 and C2X.  */\n+  signed char cpp_warn_c11_c2x_compat;\n+\n   /* True if warn about differences between C++98 and C++11.  */\n   bool cpp_warn_cxx11_compat;\n \n@@ -607,6 +613,7 @@ enum cpp_warning_reason {\n   CPP_W_DATE_TIME,\n   CPP_W_PEDANTIC,\n   CPP_W_C90_C99_COMPAT,\n+  CPP_W_C11_C2X_COMPAT,\n   CPP_W_CXX11_COMPAT,\n   CPP_W_EXPANSION_TO_DEFINED\n };"}, {"sha": "4bcec7be3e555f2ba8969abca0142a660cd0c15c", "filename": "libcpp/init.c", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/175a85b29718141d73230ed19efcfcf963a0d0b6/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/175a85b29718141d73230ed19efcfcf963a0d0b6/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=175a85b29718141d73230ed19efcfcf963a0d0b6", "patch": "@@ -93,32 +93,33 @@ struct lang_flags\n   char utf8_char_literals;\n   char va_opt;\n   char scope;\n+  char dfp_constants;\n };\n \n static const struct lang_flags lang_defaults[] =\n-{ /*              c99 c++ xnum xid c11 std digr ulit rlit udlit bincst digsep trig u8chlit vaopt scope*/\n-  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1 },\n-  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1 },\n-  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1 },\n-  /* GNUC17   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1 },\n-  /* GNUC2X   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1 },\n-  /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1,   0,      0,   0 },\n-  /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0 },\n-  /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0 },\n-  /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0 },\n-  /* STDC17   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0 },\n-  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   1 },\n-  /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1 },\n-  /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   1 },\n-  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0,   0,      1,   1 },\n-  /* CXX11    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    0,     0,     1,   0,      0,   1 },\n-  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   0,      1,   1 },\n-  /* CXX14    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    1,     1,     1,   0,      0,   1 },\n-  /* GNUCXX17 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1 },\n-  /* CXX17    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      0,   1 },\n-  /* GNUCXX2A */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1 },\n-  /* CXX2A    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1 },\n-  /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0,   0,      0,   0 }\n+{ /*              c99 c++ xnum xid c11 std digr ulit rlit udlit bincst digsep trig u8chlit vaopt scope dfp */\n+  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0 },\n+  /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0 },\n+  /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0 },\n+  /* GNUC17   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0 },\n+  /* GNUC2X   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     1 },\n+  /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0 },\n+  /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0 },\n+  /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0 },\n+  /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0 },\n+  /* STDC17   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0 },\n+  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   1,     1 },\n+  /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0 },\n+  /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   1,     0 },\n+  /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0,   0,      1,   1,     0 },\n+  /* CXX11    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    0,     0,     1,   0,      0,   1,     0 },\n+  /* GNUCXX14 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   0,      1,   1,     0 },\n+  /* CXX14    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    1,     1,     1,   0,      0,   1,     0 },\n+  /* GNUCXX17 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0 },\n+  /* CXX17    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      0,   1,     0 },\n+  /* GNUCXX2A */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0 },\n+  /* CXX2A    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1,      1,   1,     0 },\n+  /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0,   0,      0,   0,     0 }\n };\n \n /* Sets internal flags correctly for a given language.  */\n@@ -145,6 +146,7 @@ cpp_set_lang (cpp_reader *pfile, enum c_lang lang)\n   CPP_OPTION (pfile, utf8_char_literals)\t = l->utf8_char_literals;\n   CPP_OPTION (pfile, va_opt)\t\t\t = l->va_opt;\n   CPP_OPTION (pfile, scope)\t\t\t = l->scope;\n+  CPP_OPTION (pfile, dfp_constants)\t\t = l->dfp_constants;\n }\n \n /* Initialize library global state.  */\n@@ -193,6 +195,7 @@ cpp_create_reader (enum c_lang lang, cpp_hash_table *table,\n   CPP_OPTION (pfile, warn_trigraphs) = 2;\n   CPP_OPTION (pfile, warn_endif_labels) = 1;\n   CPP_OPTION (pfile, cpp_warn_c90_c99_compat) = -1;\n+  CPP_OPTION (pfile, cpp_warn_c11_c2x_compat) = -1;\n   CPP_OPTION (pfile, cpp_warn_cxx11_compat) = 0;\n   CPP_OPTION (pfile, cpp_warn_deprecated) = 1;\n   CPP_OPTION (pfile, cpp_warn_long_long) = 0;"}]}