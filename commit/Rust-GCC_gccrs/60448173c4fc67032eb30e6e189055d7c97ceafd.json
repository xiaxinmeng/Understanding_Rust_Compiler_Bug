{"sha": "60448173c4fc67032eb30e6e189055d7c97ceafd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA0NDgxNzNjNGZjNjcwMzJlYjMwZTZlMTg5MDU1ZDdjOTdjZWFmZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-02-26T17:27:52Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-02-26T17:27:52Z"}, "message": "Improve memory statistics report readability.\n\n2019-02-26  Martin Liska  <mliska@suse.cz>\n\n\t* alloc-pool.h (struct pool_usage): Remove extra\n\tprint_dash_line.\n\t* bitmap.h (struct bitmap_usage): Likewise.\n\t* ggc-common.c (struct ggc_usage): Likewise.\n\t* mem-stats.h (struct mem_usage): Likewise.\n\t(mem_alloc_description::dump): Print dash lines\n\there and repeat header at the end of a table report.\n\tIt's then more readable.\n\t* tree-phinodes.c (phinodes_print_statistics): Make\n\thorizontal alignment.\n\t* tree-ssanames.c (ssanames_print_statistics): Likewise.\n\t* vec.c (struct vec_usage): Remove extra print_dash_line.\n\t* vec.h (vec_safe_grow_cleared): Pass PASS_MEM_STAT.\n2019-02-26  Martin Liska  <mliska@suse.cz>\n\n\t* symtab.c (ht_dump_statistics): Make\n\thorizontal alignment for statistics.\n\nFrom-SVN: r269221", "tree": {"sha": "4418776fc5d2c76154a2e422ee0e2dbd0379bf37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4418776fc5d2c76154a2e422ee0e2dbd0379bf37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60448173c4fc67032eb30e6e189055d7c97ceafd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60448173c4fc67032eb30e6e189055d7c97ceafd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60448173c4fc67032eb30e6e189055d7c97ceafd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60448173c4fc67032eb30e6e189055d7c97ceafd/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "24f0c84247c433826b6309b59151985d1e8893d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24f0c84247c433826b6309b59151985d1e8893d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24f0c84247c433826b6309b59151985d1e8893d5"}], "stats": {"total": 74, "additions": 45, "deletions": 29}, "files": [{"sha": "8c07ccfc4a7600320d31e07e3bb2f5fcfb078553", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60448173c4fc67032eb30e6e189055d7c97ceafd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60448173c4fc67032eb30e6e189055d7c97ceafd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60448173c4fc67032eb30e6e189055d7c97ceafd", "patch": "@@ -1,3 +1,19 @@\n+2019-02-26  Martin Liska  <mliska@suse.cz>\n+\n+\t* alloc-pool.h (struct pool_usage): Remove extra\n+\tprint_dash_line.\n+\t* bitmap.h (struct bitmap_usage): Likewise.\n+\t* ggc-common.c (struct ggc_usage): Likewise.\n+\t* mem-stats.h (struct mem_usage): Likewise.\n+\t(mem_alloc_description::dump): Print dash lines\n+\there and repeat header at the end of a table report.\n+\tIt's then more readable.\n+\t* tree-phinodes.c (phinodes_print_statistics): Make\n+\thorizontal alignment.\n+\t* tree-ssanames.c (ssanames_print_statistics): Likewise.\n+\t* vec.c (struct vec_usage): Remove extra print_dash_line.\n+\t* vec.h (vec_safe_grow_cleared): Pass PASS_MEM_STAT.\n+\n 2019-02-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* doc/extend.texi (__builtin_object_size):"}, {"sha": "d32081003163872a0bc880f1b751837ea2adaf96", "filename": "gcc/alloc-pool.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60448173c4fc67032eb30e6e189055d7c97ceafd/gcc%2Falloc-pool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60448173c4fc67032eb30e6e189055d7c97ceafd/gcc%2Falloc-pool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.h?ref=60448173c4fc67032eb30e6e189055d7c97ceafd", "patch": "@@ -83,17 +83,14 @@ struct pool_usage: public mem_usage\n   {\n     fprintf (stderr, \"%-32s%-48s %6s%11s%16s%17s%12s\\n\", \"Pool name\", name,\n \t     \"Pools\", \"Leak\", \"Peak\", \"Times\", \"Elt size\");\n-    print_dash_line ();\n   }\n \n   /* Dump footer.  */\n   inline void\n   dump_footer ()\n   {\n-    print_dash_line ();\n     fprintf (stderr, \"%s\" PRsa(82) PRsa(10) \"\\n\", \"Total\",\n \t     SIZE_AMOUNT (m_instances), SIZE_AMOUNT (m_allocated));\n-    print_dash_line ();\n   }\n \n   /* Element size.  */"}, {"sha": "ed25c1ee5da0336050aca5240b11e15e5eaf1694", "filename": "gcc/bitmap.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60448173c4fc67032eb30e6e189055d7c97ceafd/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60448173c4fc67032eb30e6e189055d7c97ceafd/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=60448173c4fc67032eb30e6e189055d7c97ceafd", "patch": "@@ -258,7 +258,6 @@ struct bitmap_usage: public mem_usage\n   {\n     fprintf (stderr, \"%-48s %11s%16s%17s%12s%12s%10s\\n\", name, \"Leak\", \"Peak\",\n \t     \"Times\", \"N searches\", \"Search iter\", \"Type\");\n-    print_dash_line ();\n   }\n \n   /* Number search operations.  */"}, {"sha": "0d1e5bf2bf5e7d9fbb2b177e4e0bb5a7ba33b499", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60448173c4fc67032eb30e6e189055d7c97ceafd/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60448173c4fc67032eb30e6e189055d7c97ceafd/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=60448173c4fc67032eb30e6e189055d7c97ceafd", "patch": "@@ -910,9 +910,7 @@ struct ggc_usage: public mem_usage\n   inline void\n   dump_footer ()\n   {\n-    print_dash_line ();\n     dump (\"Total\", *this);\n-    print_dash_line ();\n   }\n \n   /* Get balance which is GGC allocation leak.  */\n@@ -955,7 +953,6 @@ struct ggc_usage: public mem_usage\n   {\n     fprintf (stderr, \"%-48s %11s%17s%17s%16s%17s\\n\", name, \"Garbage\", \"Freed\",\n \t     \"Leak\", \"Overhead\", \"Times\");\n-    print_dash_line ();\n   }\n \n   /* Freed memory in bytes.  */"}, {"sha": "7612e7de3d2fd5d4005c5f97a53276a2fe76d281", "filename": "gcc/mem-stats.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60448173c4fc67032eb30e6e189055d7c97ceafd/gcc%2Fmem-stats.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60448173c4fc67032eb30e6e189055d7c97ceafd/gcc%2Fmem-stats.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmem-stats.h?ref=60448173c4fc67032eb30e6e189055d7c97ceafd", "patch": "@@ -219,10 +219,8 @@ struct mem_usage\n   inline void\n   dump_footer () const\n   {\n-    print_dash_line ();\n     fprintf (stderr, \"%s\" PRsa (53) PRsa (26) \"\\n\", \"Total\",\n \t     SIZE_AMOUNT (m_allocated), SIZE_AMOUNT (m_times));\n-    print_dash_line ();\n   }\n \n   /* Return fraction of NOMINATOR and DENOMINATOR in percent.  */\n@@ -247,7 +245,6 @@ struct mem_usage\n   {\n     fprintf (stderr, \"%-48s %11s%16s%10s%17s\\n\", name, \"Leak\", \"Peak\",\n \t     \"Times\", \"Type\");\n-    print_dash_line ();\n   }\n \n   /* Current number of allocated bytes.  */\n@@ -631,11 +628,17 @@ mem_alloc_description<T>::dump (mem_alloc_origin origin,\n   mem_list_t *list = get_list (origin, &length, cmp);\n   T total = get_sum (origin);\n \n+  T::print_dash_line ();\n   T::dump_header (mem_location::get_origin_name (origin));\n+  T::print_dash_line ();\n   for (int i = length - 1; i >= 0; i--)\n     list[i].second->dump (list[i].first, total);\n+  T::print_dash_line ();\n \n+  T::dump_header (mem_location::get_origin_name (origin));\n+  T::print_dash_line ();\n   total.dump_footer ();\n+  T::print_dash_line ();\n \n   XDELETEVEC (list);\n "}, {"sha": "d062f4e36f62c8936f5800e846a1023622b72e0e", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60448173c4fc67032eb30e6e189055d7c97ceafd/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60448173c4fc67032eb30e6e189055d7c97ceafd/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=60448173c4fc67032eb30e6e189055d7c97ceafd", "patch": "@@ -80,9 +80,9 @@ unsigned int phi_nodes_created;\n void\n phinodes_print_statistics (void)\n {\n-  fprintf (stderr, \"PHI nodes allocated: \" PRsa (11) \"\\n\",\n+  fprintf (stderr, \"%-32s\" PRsa (11) \"\\n\", \"PHI nodes allocated:\",\n \t   SIZE_AMOUNT (phi_nodes_created));\n-  fprintf (stderr, \"PHI nodes reused: \" PRsa (11) \"\\n\",\n+  fprintf (stderr, \"%-32s\" PRsa (11) \"\\n\", \"PHI nodes reused:\",\n \t   SIZE_AMOUNT (phi_nodes_reused));\n }\n "}, {"sha": "c457334bb311bbdff9437c6390ba46707ff3457b", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60448173c4fc67032eb30e6e189055d7c97ceafd/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60448173c4fc67032eb30e6e189055d7c97ceafd/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=60448173c4fc67032eb30e6e189055d7c97ceafd", "patch": "@@ -112,9 +112,9 @@ fini_ssanames (struct function *fn)\n void\n ssanames_print_statistics (void)\n {\n-  fprintf (stderr, \"SSA_NAME nodes allocated: \" PRsa (11) \"\\n\",\n+  fprintf (stderr, \"%-32s\" PRsa (11) \"\\n\", \"SSA_NAME nodes allocated:\",\n \t   SIZE_AMOUNT (ssa_name_nodes_created));\n-  fprintf (stderr, \"SSA_NAME nodes reused: \" PRsa (11) \"\\n\",\n+  fprintf (stderr, \"%-32s\" PRsa (11) \"\\n\", \"SSA_NAME nodes reused:\",\n \t   SIZE_AMOUNT (ssa_name_nodes_reused));\n }\n "}, {"sha": "f4749229ca2a973672e0a2b3f0a6a56a14e578c1", "filename": "gcc/vec.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60448173c4fc67032eb30e6e189055d7c97ceafd/gcc%2Fvec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60448173c4fc67032eb30e6e189055d7c97ceafd/gcc%2Fvec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.c?ref=60448173c4fc67032eb30e6e189055d7c97ceafd", "patch": "@@ -98,11 +98,9 @@ struct vec_usage: public mem_usage\n   inline void\n   dump_footer ()\n   {\n-    print_dash_line ();\n     fprintf (stderr, \"%s\" PRsa (64) PRsa (25) PRsa (16) \"\\n\",\n \t     \"Total\", SIZE_AMOUNT (m_allocated),\n \t     SIZE_AMOUNT (m_times), SIZE_AMOUNT (m_items));\n-    print_dash_line ();\n   }\n \n   /* Dump header with NAME.  */\n@@ -111,7 +109,6 @@ struct vec_usage: public mem_usage\n   {\n     fprintf (stderr, \"%-48s %10s%11s%16s%10s%17s%11s\\n\", name, \"sizeof(T)\",\n \t     \"Leak\", \"Peak\", \"Times\", \"Leak items\", \"Peak items\");\n-    print_dash_line ();\n   }\n \n   /* Current number of items allocated.  */"}, {"sha": "2dbf3074da09015793ba02a1c0dec07c062cbb9b", "filename": "gcc/vec.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60448173c4fc67032eb30e6e189055d7c97ceafd/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60448173c4fc67032eb30e6e189055d7c97ceafd/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=60448173c4fc67032eb30e6e189055d7c97ceafd", "patch": "@@ -739,7 +739,7 @@ inline void\n vec_safe_grow_cleared (vec<T, va_heap, vl_ptr> *&v,\n \t\t       unsigned len CXX_MEM_STAT_INFO)\n {\n-  v->safe_grow_cleared (len);\n+  v->safe_grow_cleared (len PASS_MEM_STAT);\n }\n \n "}, {"sha": "261494bd4478da763aa5bc2c5e9145fe5393163d", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60448173c4fc67032eb30e6e189055d7c97ceafd/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60448173c4fc67032eb30e6e189055d7c97ceafd/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=60448173c4fc67032eb30e6e189055d7c97ceafd", "patch": "@@ -1,3 +1,8 @@\n+2019-02-26  Martin Liska  <mliska@suse.cz>\n+\n+\t* symtab.c (ht_dump_statistics): Make\n+\thorizontal alignment for statistics.\n+\n 2019-02-20  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/89410"}, {"sha": "5048b47bc78cb20d433b15a9955ad9b22e6d2764", "filename": "libcpp/symtab.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60448173c4fc67032eb30e6e189055d7c97ceafd/libcpp%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60448173c4fc67032eb30e6e189055d7c97ceafd/libcpp%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fsymtab.c?ref=60448173c4fc67032eb30e6e189055d7c97ceafd", "patch": "@@ -306,39 +306,41 @@ ht_dump_statistics (cpp_hash_table *table)\n   nelts = table->nelements;\n   headers = table->nslots * sizeof (hashnode);\n \n-  fprintf (stderr, \"\\nString pool\\nentries\\t\\t%lu\\n\",\n+  fprintf (stderr, \"\\nString pool\\n%-32s%lu\\n\", \"entries:\",\n \t   (unsigned long) nelts);\n-  fprintf (stderr, \"identifiers\\t%lu (%.2f%%)\\n\",\n+  fprintf (stderr, \"%-32s%lu (%.2f%%)\\n\", \"identifiers:\",\n \t   (unsigned long) nids, nids * 100.0 / nelts);\n-  fprintf (stderr, \"slots\\t\\t%lu\\n\",\n+  fprintf (stderr, \"%-32s%lu\\n\", \"slots:\",\n \t   (unsigned long) table->nslots);\n-  fprintf (stderr, \"deleted\\t\\t%lu\\n\",\n+  fprintf (stderr, \"%-32s%lu\\n\", \"deleted:\",\n \t   (unsigned long) deleted);\n \n   if (table->alloc_subobject)\n-    fprintf (stderr, \"GGC bytes\\t%lu%c\\n\",\n+    fprintf (stderr, \"%-32s%lu%c\\n\", \"GGC bytes:\",\n \t     SCALE (total_bytes), LABEL (total_bytes));\n   else\n     {\n       overhead = obstack_memory_used (&table->stack) - total_bytes;\n-      fprintf (stderr, \"obstack bytes\\t%lu%c (%lu%c overhead)\\n\",\n+      fprintf (stderr, \"%-32s%lu%c (%lu%c overhead)\\n\",\n+\t       \"obstack bytes:\",\n \t       SCALE (total_bytes), LABEL (total_bytes),\n \t       SCALE (overhead), LABEL (overhead));\n     }\n-  fprintf (stderr, \"table size\\t%lu%c\\n\",\n+  fprintf (stderr, \"%-32s%lu%c\\n\", \"table size:\",\n \t   SCALE (headers), LABEL (headers));\n \n   exp_len = (double)total_bytes / (double)nelts;\n   exp2_len = exp_len * exp_len;\n   exp_len2 = (double) sum_of_squares / (double) nelts;\n \n-  fprintf (stderr, \"coll/search\\t%.4f\\n\",\n+  fprintf (stderr, \"%-32s%.4f\\n\", \"coll/search:\",\n \t   (double) table->collisions / (double) table->searches);\n-  fprintf (stderr, \"ins/search\\t%.4f\\n\",\n+  fprintf (stderr, \"%-32s%.4f\\n\", \"ins/search:\",\n \t   (double) nelts / (double) table->searches);\n-  fprintf (stderr, \"avg. entry\\t%.2f bytes (+/- %.2f)\\n\",\n+  fprintf (stderr, \"%-32s%.2f bytes (+/- %.2f)\\n\",\n+\t   \"avg. entry:\",\n \t   exp_len, approx_sqrt (exp_len2 - exp2_len));\n-  fprintf (stderr, \"longest entry\\t%lu\\n\",\n+  fprintf (stderr, \"%-32s%lu\\n\", \"longest entry:\",\n \t   (unsigned long) longest);\n #undef SCALE\n #undef LABEL"}]}