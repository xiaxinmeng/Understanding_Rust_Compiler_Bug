{"sha": "53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMxNjEzNTgxODBmZGMyYzJjMjFjOGY0NmJiZGQzMzlhMWZiYjhhZQ==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2020-04-03T14:18:35Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2020-04-03T14:19:33Z"}, "message": "AArch64: Fix options canonicalization for assembler\n\nIt is currently impossible to use fp16 on any architecture higher than Armv8.3-a\ndue to a bug in options canonization.  This bug results in the fp16 flag not\nbeing emitted in the assembly when it should have been.\n\nThis is caused by a complicated architectural requirement at Armv8.4-a.  On\nArmv8.2-a and Armv8.3-a fp16fml is an optional extension and turning it on turns\non both fp and fp16.  However starting with Armv8.4-a fp16fml is mandatory if\nfp16 is available, otherwise it's optional.\n\nIn short this means that to enable fp16fml the smallest option that needs to\npassed to the assembler is Armv8.4-a+fp16.\n\nThe fix in this patch takes into account that an option may be on by default in\nan architecture, but that not all the bits required to use it are on by default\nin an architecture.  In such cases the difference between the two are still\nemitted to the assembler.\n\ngcc/ChangeLog:\n\n\tPR target/94396\n\t* common/config/aarch64/aarch64-common.c\n\t(aarch64_get_extension_string_for_isa_flags): Handle default flags.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/94396\n\t* gcc.target/aarch64/options_set_11.c: New test.\n\t* gcc.target/aarch64/options_set_12.c: New test.\n\t* gcc.target/aarch64/options_set_13.c: New test.\n\t* gcc.target/aarch64/options_set_14.c: New test.\n\t* gcc.target/aarch64/options_set_15.c: New test.\n\t* gcc.target/aarch64/options_set_16.c: New test.\n\t* gcc.target/aarch64/options_set_17.c: New test.\n\t* gcc.target/aarch64/options_set_18.c: New test.\n\t* gcc.target/aarch64/options_set_19.c: New test.\n\t* gcc.target/aarch64/options_set_20.c: New test.\n\t* gcc.target/aarch64/options_set_21.c: New test.\n\t* gcc.target/aarch64/options_set_22.c: New test.\n\t* gcc.target/aarch64/options_set_23.c: New test.\n\t* gcc.target/aarch64/options_set_24.c: New test.\n\t* gcc.target/aarch64/options_set_25.c: New test.\n\t* gcc.target/aarch64/options_set_26.c: New test.", "tree": {"sha": "1e09e8907db29053e0707bca2dc10ba38baebeaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e09e8907db29053e0707bca2dc10ba38baebeaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef6631051d4bb9519f3f0dd5f3b3eadbd67bc10a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6631051d4bb9519f3f0dd5f3b3eadbd67bc10a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef6631051d4bb9519f3f0dd5f3b3eadbd67bc10a"}], "stats": {"total": 219, "additions": 218, "deletions": 1}, "files": [{"sha": "2325476e60ceb84d88e064fba369ba5adda3912a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "patch": "@@ -1,3 +1,9 @@\n+2020-04-03  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/94396\n+\t* common/config/aarch64/aarch64-common.c\n+\t(aarch64_get_extension_string_for_isa_flags): Handle default flags.\n+\n 2020-04-03  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/94465"}, {"sha": "0bddcc8c3e9282a957c5479b4df7f68058093bab", "filename": "gcc/common/config/aarch64/aarch64-common.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c?ref=53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "patch": "@@ -391,7 +391,22 @@ aarch64_get_extension_string_for_isa_flags (uint64_t isa_flags,\n \t/* We remove all the dependent bits, to prevent them from being turned\n \t   on twice.  This only works because we assume that all there are\n \t   individual options to set all bits standalone.  */\n-\tisa_flag_bits &= ~opt->flags_on;\n+\n+\t/* PR target/94396.\n+\n+\t   For flags which would already imply a bit that's on by default (e.g\n+\t   fp16fml which implies +fp,+fp16) we must emit the flags that are not\n+\t   on by default.  i.e. in Armv8.4-a +fp16fml is default if +fp16.  So\n+\t   if a user passes armv8.4-a+fp16 (or +fp16fml) then we need to emit\n+\t   +fp16.  But if +fp16fml is used in an architecture where it is\n+\t   completely optional we only have to emit the canonical flag.  */\n+\tuint64_t toggle_bits = opt->flags_on & default_arch_flags;\n+\t/* Now check to see if the canonical flag is on by default.  If it\n+\t   is not then enabling it will enable all bits in flags_on.  */\n+\tif ((opt->flag_canonical & default_arch_flags) == 0)\n+\t  toggle_bits = opt->flags_on;\n+\n+\tisa_flag_bits &= ~toggle_bits;\n \tisa_flag_bits |= opt->flag_canonical;\n       }\n     }"}, {"sha": "2b01667ac512a15e0444164789a08762e61f06d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "patch": "@@ -1,3 +1,23 @@\n+2020-04-03  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/94396\n+\t* gcc.target/aarch64/options_set_11.c: New test.\n+\t* gcc.target/aarch64/options_set_12.c: New test.\n+\t* gcc.target/aarch64/options_set_13.c: New test.\n+\t* gcc.target/aarch64/options_set_14.c: New test.\n+\t* gcc.target/aarch64/options_set_15.c: New test.\n+\t* gcc.target/aarch64/options_set_16.c: New test.\n+\t* gcc.target/aarch64/options_set_17.c: New test.\n+\t* gcc.target/aarch64/options_set_18.c: New test.\n+\t* gcc.target/aarch64/options_set_19.c: New test.\n+\t* gcc.target/aarch64/options_set_20.c: New test.\n+\t* gcc.target/aarch64/options_set_21.c: New test.\n+\t* gcc.target/aarch64/options_set_22.c: New test.\n+\t* gcc.target/aarch64/options_set_23.c: New test.\n+\t* gcc.target/aarch64/options_set_24.c: New test.\n+\t* gcc.target/aarch64/options_set_25.c: New test.\n+\t* gcc.target/aarch64/options_set_26.c: New test.\n+\n 2020-04-03  Kewen Lin  <linkw@gcc.gnu.org>\n \n \tPR tree-optimization/94443"}, {"sha": "d083bfdbd5c4ee0067607d506306a4271542c4d5", "filename": "gcc/testsuite/gcc.target/aarch64/options_set_11.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_11.c?ref=53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.2-a+fp\" } */\n+\n+int main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8\\.2-a\\+crc} } } */\n+\n+ /* FP is default on, no need to pass on to assembler.  */"}, {"sha": "58a09fda2c1140bd63559f81280f41be5e1a2b17", "filename": "gcc/testsuite/gcc.target/aarch64/options_set_12.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_12.c?ref=53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.2-a+fp16\" } */\n+\n+int main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8\\.2-a\\+crc\\+fp16} } } */\n+\n+ /* fp16 not default, should be emitted.  */"}, {"sha": "2a517ecb58f87ca5653bb6aac7e2db12a1de0926", "filename": "gcc/testsuite/gcc.target/aarch64/options_set_13.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_13.c?ref=53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.2-a+fp16+fp\" } */\n+\n+int main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8\\.2-a\\+crc\\+fp16} } } */\n+\n+ /* FP is part of FP16, don't emit it.  */"}, {"sha": "c192bf6cb63661f3d743b8c988ba2162e64c0959", "filename": "gcc/testsuite/gcc.target/aarch64/options_set_14.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_14.c?ref=53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.2-a+fp16fml\" } */\n+\n+int main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8\\.2-a\\+crc\\+fp16fml} } } */\n+\n+ /* fmp16fml is smallest option to emit.  */"}, {"sha": "32ec3ea4643197e1bef052777a2717c73bef7d05", "filename": "gcc/testsuite/gcc.target/aarch64/options_set_15.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_15.c?ref=53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.2-a+fp16fml+fp\" } */\n+\n+int main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8\\.2-a\\+crc\\+fp16fml*} } } */\n+\n+ /* fp included in fp16fml, only emit latter.  */"}, {"sha": "b45c01a915b99f9be77f206f862a69b4c81d0ff8", "filename": "gcc/testsuite/gcc.target/aarch64/options_set_16.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_16.c?ref=53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.2-a+fp16fml+fp16+fp\" } */\n+\n+int main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8\\.2-a\\+crc\\+fp16fml} } } */\n+\n+ /* fp16fml is smallest options to emit.  */"}, {"sha": "c490e1f47a0a7a3adcbb7e96a3974d5651a023e8", "filename": "gcc/testsuite/gcc.target/aarch64/options_set_17.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_17.c?ref=53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.2-a+dotprod\" } */\n+\n+int main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8\\.2-a\\+crc\\+dotprod} } } */\n+\n+ /* dotprod needs to be emitted pre armv8.4.  */"}, {"sha": "61587dbbd63a9803067553f6f5a4bf6ce86c090f", "filename": "gcc/testsuite/gcc.target/aarch64/options_set_18.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_18.c?ref=53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.4-a+dotprod\" } */\n+\n+int main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8\\.4-a\\+crc} } } */\n+\n+ /* dotprod is default in armv8.4-a, don't emit.  */"}, {"sha": "72b58126182fa300bf3d065e8a9f18ea9a090438", "filename": "gcc/testsuite/gcc.target/aarch64/options_set_19.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_19.c?ref=53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.4-a+fp\" } */\n+\n+int main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8\\.4-a\\+crc} } } */\n+\n+ /* fp default, don't emit.  */"}, {"sha": "b383e0aced2d2a12d8ec4ff021d27361b81356e0", "filename": "gcc/testsuite/gcc.target/aarch64/options_set_20.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_20.c?ref=53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.4-a+fp16\" } */\n+\n+int main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8\\.4-a\\+crc\\+fp16} } } */\n+\n+ /* fp16 smallest set to emit.  */"}, {"sha": "19fcd6fda6e0687ae03eb84ba677b1fc3f438300", "filename": "gcc/testsuite/gcc.target/aarch64/options_set_21.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_21.c?ref=53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.4-a+fp16+fp\" } */\n+\n+int main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8\\.4-a\\+crc\\+fp16} } } */\n+\n+ /* fp16 smallest set to emit.  */"}, {"sha": "77ae4089f3985917b314d5d548a9b9999ade8a15", "filename": "gcc/testsuite/gcc.target/aarch64/options_set_22.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_22.c?ref=53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.4-a+fp16fml\" } */\n+\n+int main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8\\.4-a\\+crc\\+fp16} } } */\n+\n+ /* fp16 smallest set to emit.  */"}, {"sha": "dee637c5d2cba1549861add1d81e697036aed047", "filename": "gcc/testsuite/gcc.target/aarch64/options_set_23.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_23.c?ref=53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.4-a+fp16fml+fp\" } */\n+\n+int main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8\\.4-a\\+crc\\+fp16} } } */\n+\n+ /* fp16 smallest set to emit.  */"}, {"sha": "54b0e3d4a8319144c1dd2fc8d736ca359788e738", "filename": "gcc/testsuite/gcc.target/aarch64/options_set_24.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_24.c?ref=53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.4-a+fp16fml+fp16\" } */\n+\n+int main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8\\.4-a\\+crc\\+fp16} } } */\n+\n+ /* fp16 smallest set to emit.  */"}, {"sha": "a3b2d63c06eb0bb3f1d59a4cdfb08d5918238c0c", "filename": "gcc/testsuite/gcc.target/aarch64/options_set_25.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_25.c?ref=53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.4-a+fp16fml+fp+fp16\" } */\n+\n+int main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8\\.4-a\\+crc\\+fp16} } } */\n+\n+ /* fp16 smallest set to emit.  */"}, {"sha": "b383e0aced2d2a12d8ec4ff021d27361b81356e0", "filename": "gcc/testsuite/gcc.target/aarch64/options_set_26.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53161358180fdc2c2c21c8f46bbdd339a1fbb8ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Foptions_set_26.c?ref=53161358180fdc2c2c21c8f46bbdd339a1fbb8ae", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8.4-a+fp16\" } */\n+\n+int main ()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8\\.4-a\\+crc\\+fp16} } } */\n+\n+ /* fp16 smallest set to emit.  */"}]}