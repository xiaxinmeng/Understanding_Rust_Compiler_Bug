{"sha": "9b3028c01e23fbab3a569d63f09d6c4c39987416", "node_id": "C_kwDOANBUbNoAKDliMzAyOGMwMWUyM2ZiYWIzYTU2OWQ2M2YwOWQ2YzRjMzk5ODc0MTY", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-04-23T22:12:45Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-04-26T21:53:39Z"}, "message": "gccrs: Add missing ABI checking on function types\n\nAddresses #2304\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-unify.cc (UnifyRules::emit_abi_mismatch): new error method\n\t(UnifyRules::expect_fndef): add ABI check\n\t* typecheck/rust-unify.h: prototype for new error method\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "f89e60a1c729611acf3d541c1db4daee3cc537ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f89e60a1c729611acf3d541c1db4daee3cc537ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b3028c01e23fbab3a569d63f09d6c4c39987416", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b3028c01e23fbab3a569d63f09d6c4c39987416", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b3028c01e23fbab3a569d63f09d6c4c39987416", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b3028c01e23fbab3a569d63f09d6c4c39987416/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f26be61bf06fc88c6e7f7901f58e63d07c5fc0b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f26be61bf06fc88c6e7f7901f58e63d07c5fc0b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f26be61bf06fc88c6e7f7901f58e63d07c5fc0b9"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "283edec2d2bc79c023b5dc3ab6ff0d07ca04439a", "filename": "gcc/rust/typecheck/rust-unify.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3028c01e23fbab3a569d63f09d6c4c39987416/gcc%2Frust%2Ftypecheck%2Frust-unify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3028c01e23fbab3a569d63f09d6c4c39987416/gcc%2Frust%2Ftypecheck%2Frust-unify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-unify.cc?ref=9b3028c01e23fbab3a569d63f09d6c4c39987416", "patch": "@@ -126,6 +126,18 @@ UnifyRules::emit_type_mismatch () const\n \t\t expected->get_name ().c_str (), expr->get_name ().c_str ());\n }\n \n+void\n+UnifyRules::emit_abi_mismatch (const TyTy::FnType &expected,\n+\t\t\t       const TyTy::FnType &got) const\n+{\n+  RichLocation r (locus);\n+  r.add_range (lhs.get_locus ());\n+  r.add_range (rhs.get_locus ());\n+  rust_error_at (r, \"mistached abi %<%s%> got %<%s%>\",\n+\t\t get_string_from_abi (expected.get_abi ()).c_str (),\n+\t\t get_string_from_abi (got.get_abi ()).c_str ());\n+}\n+\n TyTy::BaseType *\n UnifyRules::go ()\n {\n@@ -912,6 +924,19 @@ UnifyRules::expect_fndef (TyTy::FnType *ltype, TyTy::BaseType *rtype)\n \t    return new TyTy::ErrorType (0);\n \t  }\n \n+\t// ABI match? see\n+\t// https://gcc-rust.zulipchat.com/#narrow/stream/266897-general/topic/extern.20blocks/near/346416045\n+\tif (ltype->get_abi () != type.get_abi ())\n+\t  {\n+\t    if (emit_error)\n+\t      {\n+\t\temit_abi_mismatch (*ltype, type);\n+\t      }\n+\t    return new TyTy::ErrorType (0);\n+\t  }\n+\n+\t// DEF Id match? see https://github.com/Rust-GCC/gccrs/issues/2053\n+\n \treturn ltype->clone ();\n       }\n       break;"}, {"sha": "f83d274b8cd52f682a7302207d24eae6f52185d1", "filename": "gcc/rust/typecheck/rust-unify.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b3028c01e23fbab3a569d63f09d6c4c39987416/gcc%2Frust%2Ftypecheck%2Frust-unify.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b3028c01e23fbab3a569d63f09d6c4c39987416/gcc%2Frust%2Ftypecheck%2Frust-unify.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-unify.h?ref=9b3028c01e23fbab3a569d63f09d6c4c39987416", "patch": "@@ -90,6 +90,8 @@ class UnifyRules\n \t      std::vector<InferenceSite> &infers);\n \n   void emit_type_mismatch () const;\n+  void emit_abi_mismatch (const TyTy::FnType &expected,\n+\t\t\t  const TyTy::FnType &got) const;\n \n   TyTy::BaseType *go ();\n "}]}