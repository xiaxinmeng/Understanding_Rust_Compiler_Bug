{"sha": "048fd7857b889d9e83b7b1ed8ee3d949b3c0e24a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ4ZmQ3ODU3Yjg4OWQ5ZTgzYjdiMWVkOGVlM2Q5NDliM2MwZTI0YQ==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2009-03-22T08:16:31Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2009-03-22T08:16:31Z"}, "message": "extend.texi (Function Attributes, [...]): Fix typos.\n\ngcc/\n\t* doc/extend.texi (Function Attributes, Variable Attributes):\n\tFix typos.\n\t* doc/invoke.texi (Debugging Options, Optimize Options)\n\t(i386 and x86-64 Options, MCore Options): Likewise.\n\nFrom-SVN: r144992", "tree": {"sha": "8474dfc61c5f221722e7a16263fff853402d1b3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8474dfc61c5f221722e7a16263fff853402d1b3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/048fd7857b889d9e83b7b1ed8ee3d949b3c0e24a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048fd7857b889d9e83b7b1ed8ee3d949b3c0e24a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/048fd7857b889d9e83b7b1ed8ee3d949b3c0e24a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048fd7857b889d9e83b7b1ed8ee3d949b3c0e24a/comments", "author": null, "committer": null, "parents": [{"sha": "8c54bb6a166265bf8c53083ae7809924f94c0af2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c54bb6a166265bf8c53083ae7809924f94c0af2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c54bb6a166265bf8c53083ae7809924f94c0af2"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "a2842e90a0e63ac017172fed8d56c19ec655f3f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048fd7857b889d9e83b7b1ed8ee3d949b3c0e24a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048fd7857b889d9e83b7b1ed8ee3d949b3c0e24a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=048fd7857b889d9e83b7b1ed8ee3d949b3c0e24a", "patch": "@@ -1,3 +1,10 @@\n+2009-03-22  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* doc/extend.texi (Function Attributes, Variable Attributes):\n+\tFix typos.\n+\t* doc/invoke.texi (Debugging Options, Optimize Options)\n+\t(i386 and x86-64 Options, MCore Options): Likewise.\n+\n 2009-03-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/37890"}, {"sha": "ad17a378d985d42651f8b07a1daaca46bf07ab86", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048fd7857b889d9e83b7b1ed8ee3d949b3c0e24a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048fd7857b889d9e83b7b1ed8ee3d949b3c0e24a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=048fd7857b889d9e83b7b1ed8ee3d949b3c0e24a", "patch": "@@ -3069,7 +3069,7 @@ Do/do not align destination of inlined string operations.\n @itemx no-recip\n @cindex @code{target(\"recip\")} attribute\n Enable/disable the generation of RCPSS, RCPPS, RSQRTSS and RSQRTPS\n-instructions followed an additional Newton-Rhapson step instead of\n+instructions followed an additional Newton-Raphson step instead of\n doing a floating point division.\n \n @item arch=@var{ARCH}\n@@ -3861,7 +3861,7 @@ struct foo\n @emph{Note:} The 4.1, 4.2 and 4.3 series of GCC ignore the\n @code{packed} attribute on bit-fields of type @code{char}.  This has\n been fixed in GCC 4.4 but the change can lead to differences in the\n-structure layout.  See the documention of\n+structure layout.  See the documentation of\n @option{-Wpacked-bitfield-compat} for more information.\n \n @item section (\"@var{section-name}\")"}, {"sha": "d1c86dc6ea93b39c957b217bb9d53892003129d2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048fd7857b889d9e83b7b1ed8ee3d949b3c0e24a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048fd7857b889d9e83b7b1ed8ee3d949b3c0e24a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=048fd7857b889d9e83b7b1ed8ee3d949b3c0e24a", "patch": "@@ -4616,7 +4616,7 @@ Dump after the RTL instruction combination pass.\n \n @item -fdump-rtl-compgotos\n @opindex fdump-rtl-compgotos\n-Dump after dumplicating the computed gotos.\n+Dump after duplicating the computed gotos.\n \n @item -fdump-rtl-ce1\n @itemx -fdump-rtl-ce2\n@@ -6144,7 +6144,7 @@ Matrix flattening tries to replace a m-dimensional matrix\n with its equivalent n-dimensional matrix, where n < m.\n This reduces the level of indirection needed for accessing the elements\n of the matrix. The second optimization is matrix transposing that\n-attemps to change the order of the matrix's dimensions in order to \n+attempts to change the order of the matrix's dimensions in order to\n improve cache locality.\n Both optimizations need the @option{-fwhole-program} flag. \n Transposing is enabled only if profiling information is available.\n@@ -11349,7 +11349,7 @@ or @code{remainder} built-in functions: see @ref{Other Builtins} for details.\n @item -mrecip\n @opindex mrecip\n This option will enable GCC to use RCPSS and RSQRTSS instructions (and their\n-vectorized variants RCPPS and RSQRTPS) with an additional Newton-Rhapson step\n+vectorized variants RCPPS and RSQRTPS) with an additional Newton-Raphson step\n to increase precision instead of DIVSS and SQRTSS (and their vectorized\n variants) for single precision floating point arguments.  These instructions\n are generated only when @option{-funsafe-math-optimizations} is enabled\n@@ -12447,7 +12447,7 @@ simulator library (@file{libsim.a)} from the linker command line.\n @item -mstack-increment=@var{size}\n @opindex mstack-increment\n Set the maximum amount for a single stack increment operation.  Large\n-values can increase the speed of progrqams which contain functions\n+values can increase the speed of programs which contain functions\n that need a large amount of stack space, but they can also trigger a\n segmentation fault if the stack is extended too much.  The default\n value is 0x1000."}]}