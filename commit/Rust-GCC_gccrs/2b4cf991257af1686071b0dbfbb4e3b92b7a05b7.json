{"sha": "2b4cf991257af1686071b0dbfbb4e3b92b7a05b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI0Y2Y5OTEyNTdhZjE2ODYwNzFiMGRiZmJiNGUzYjkyYjdhMDViNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-12-04T22:01:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-12-04T22:01:04Z"}, "message": "omp-low.c (optimize_omp_library_calls): New function.\n\n\t* omp-low.c (optimize_omp_library_calls): New function.\n\t(expand_omp_parallel): Call it if optimizing.\n\n\t* omp.h.in (__GOMP_NOTHROW): Define.  Use it on omp_* prototypes.\n\nFrom-SVN: r130610", "tree": {"sha": "b31d787cdf4d4c1cd8c9c32bf14a39a197816b6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b31d787cdf4d4c1cd8c9c32bf14a39a197816b6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b4cf991257af1686071b0dbfbb4e3b92b7a05b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b4cf991257af1686071b0dbfbb4e3b92b7a05b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b4cf991257af1686071b0dbfbb4e3b92b7a05b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b4cf991257af1686071b0dbfbb4e3b92b7a05b7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b9f9b2101b2c22a613477fcf34afcccb5e5f82dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9f9b2101b2c22a613477fcf34afcccb5e5f82dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9f9b2101b2c22a613477fcf34afcccb5e5f82dd"}], "stats": {"total": 113, "additions": 90, "deletions": 23}, "files": [{"sha": "a698dba7c8b13a178a0601d4ba1d4a92360a1c88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4cf991257af1686071b0dbfbb4e3b92b7a05b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4cf991257af1686071b0dbfbb4e3b92b7a05b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b4cf991257af1686071b0dbfbb4e3b92b7a05b7", "patch": "@@ -1,5 +1,8 @@\n 2007-12-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* omp-low.c (optimize_omp_library_calls): New function.\n+\t(expand_omp_parallel): Call it if optimizing.\n+\n \tPR middle-end/34134\n \t* stmt.c (expand_stack_restore): Call expand_normal on var to get\n \trtx for it instead of assuming it will be a VAR_DECL."}, {"sha": "5323ec2eb4df13ea1a266048a4de2ea9857cef48", "filename": "gcc/omp-low.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4cf991257af1686071b0dbfbb4e3b92b7a05b7/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4cf991257af1686071b0dbfbb4e3b92b7a05b7/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=2b4cf991257af1686071b0dbfbb4e3b92b7a05b7", "patch": "@@ -2426,6 +2426,61 @@ remove_exit_barriers (struct omp_region *region)\n     }\n }\n \n+/* Optimize omp_get_thread_num () and omp_get_num_threads ()\n+   calls.  These can't be declared as const functions, but\n+   within one parallel body they are constant, so they can be\n+   transformed there into __builtin_omp_get_{thread_num,num_threads} ()\n+   which are declared const.  */\n+\n+static void\n+optimize_omp_library_calls (void)\n+{\n+  basic_block bb;\n+  block_stmt_iterator bsi;\n+  tree thr_num_id\n+    = DECL_ASSEMBLER_NAME (built_in_decls [BUILT_IN_OMP_GET_THREAD_NUM]);\n+  tree num_thr_id\n+    = DECL_ASSEMBLER_NAME (built_in_decls [BUILT_IN_OMP_GET_NUM_THREADS]);\n+\n+  FOR_EACH_BB (bb)\n+    for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n+      {\n+\ttree stmt = bsi_stmt (bsi);\n+\ttree call = get_call_expr_in (stmt);\n+\ttree decl;\n+\n+\tif (call\n+\t    && (decl = get_callee_fndecl (call))\n+\t    && DECL_EXTERNAL (decl)\n+\t    && TREE_PUBLIC (decl)\n+\t    && DECL_INITIAL (decl) == NULL)\n+\t  {\n+\t    tree built_in;\n+\n+\t    if (DECL_NAME (decl) == thr_num_id)\n+\t      built_in = built_in_decls [BUILT_IN_OMP_GET_THREAD_NUM];\n+\t    else if (DECL_NAME (decl) == num_thr_id)\n+\t      built_in = built_in_decls [BUILT_IN_OMP_GET_NUM_THREADS];\n+\t    else\n+\t      continue;\n+\n+\t    if (DECL_ASSEMBLER_NAME (decl) != DECL_ASSEMBLER_NAME (built_in)\n+\t\t|| call_expr_nargs (call) != 0)\n+\t      continue;\n+\n+\t    if (flag_exceptions && !TREE_NOTHROW (decl))\n+\t      continue;\n+\n+\t    if (TREE_CODE (TREE_TYPE (decl)) != FUNCTION_TYPE\n+\t\t|| TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (decl)))\n+\t\t   != TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (built_in))))\n+\t      continue;\n+\n+\t    CALL_EXPR_FN (call) = build_fold_addr_expr (built_in);\n+\t  }\n+      }\n+}\n+\n /* Expand the OpenMP parallel directive starting at REGION.  */\n \n static void\n@@ -2588,6 +2643,8 @@ expand_omp_parallel (struct omp_region *region)\n       /* Fix the callgraph edges for child_cfun.  Those for cfun will be\n \t fixed in a following pass.  */\n       push_cfun (child_cfun);\n+      if (optimize)\n+\toptimize_omp_library_calls ();\n       rebuild_cgraph_edges ();\n       pop_cfun ();\n     }"}, {"sha": "7d3ef12a7190894ebc07df486f0fa0ce771c3e26", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4cf991257af1686071b0dbfbb4e3b92b7a05b7/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4cf991257af1686071b0dbfbb4e3b92b7a05b7/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=2b4cf991257af1686071b0dbfbb4e3b92b7a05b7", "patch": "@@ -1,3 +1,7 @@\n+2007-12-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp.h.in (__GOMP_NOTHROW): Define.  Use it on omp_* prototypes.\n+\n 2007-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libgomp.c/private-1.c: New test."}, {"sha": "5ebcdbb2735102ece3a4330abbbfbcf6ee3a1343", "filename": "libgomp/omp.h.in", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b4cf991257af1686071b0dbfbb4e3b92b7a05b7/libgomp%2Fomp.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b4cf991257af1686071b0dbfbb4e3b92b7a05b7/libgomp%2Fomp.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp.h.in?ref=2b4cf991257af1686071b0dbfbb4e3b92b7a05b7", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2005 Free Software Foundation, Inc.\n+/* Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n    Contributed by Richard Henderson <rth@redhat.com>.\n \n    This file is part of the GNU OpenMP Library (libgomp).\n@@ -49,36 +49,39 @@ typedef struct\n \n #ifdef __cplusplus\n extern \"C\" {\n+# define __GOMP_NOTHROW throw ()\n+#else\n+# define __GOMP_NOTHROW __attribute__((__nothrow__))\n #endif\n \n-extern void omp_set_num_threads (int);\n-extern int omp_get_num_threads (void);\n-extern int omp_get_max_threads (void);\n-extern int omp_get_thread_num (void);\n-extern int omp_get_num_procs (void);\n+extern void omp_set_num_threads (int) __GOMP_NOTHROW;\n+extern int omp_get_num_threads (void) __GOMP_NOTHROW;\n+extern int omp_get_max_threads (void) __GOMP_NOTHROW;\n+extern int omp_get_thread_num (void) __GOMP_NOTHROW;\n+extern int omp_get_num_procs (void) __GOMP_NOTHROW;\n \n-extern int omp_in_parallel (void);\n+extern int omp_in_parallel (void) __GOMP_NOTHROW;\n \n-extern void omp_set_dynamic (int);\n-extern int omp_get_dynamic (void);\n+extern void omp_set_dynamic (int) __GOMP_NOTHROW;\n+extern int omp_get_dynamic (void) __GOMP_NOTHROW;\n \n-extern void omp_set_nested (int);\n-extern int omp_get_nested (void);\n+extern void omp_set_nested (int) __GOMP_NOTHROW;\n+extern int omp_get_nested (void) __GOMP_NOTHROW;\n \n-extern void omp_init_lock (omp_lock_t *);\n-extern void omp_destroy_lock (omp_lock_t *);\n-extern void omp_set_lock (omp_lock_t *);\n-extern void omp_unset_lock (omp_lock_t *);\n-extern int omp_test_lock (omp_lock_t *);\n+extern void omp_init_lock (omp_lock_t *) __GOMP_NOTHROW;\n+extern void omp_destroy_lock (omp_lock_t *) __GOMP_NOTHROW;\n+extern void omp_set_lock (omp_lock_t *) __GOMP_NOTHROW;\n+extern void omp_unset_lock (omp_lock_t *) __GOMP_NOTHROW;\n+extern int omp_test_lock (omp_lock_t *) __GOMP_NOTHROW;\n \n-extern void omp_init_nest_lock (omp_nest_lock_t *);\n-extern void omp_destroy_nest_lock (omp_nest_lock_t *);\n-extern void omp_set_nest_lock (omp_nest_lock_t *);\n-extern void omp_unset_nest_lock (omp_nest_lock_t *);\n-extern int omp_test_nest_lock (omp_nest_lock_t *);\n+extern void omp_init_nest_lock (omp_nest_lock_t *) __GOMP_NOTHROW;\n+extern void omp_destroy_nest_lock (omp_nest_lock_t *) __GOMP_NOTHROW;\n+extern void omp_set_nest_lock (omp_nest_lock_t *) __GOMP_NOTHROW;\n+extern void omp_unset_nest_lock (omp_nest_lock_t *) __GOMP_NOTHROW;\n+extern int omp_test_nest_lock (omp_nest_lock_t *) __GOMP_NOTHROW;\n \n-extern double omp_get_wtime (void);\n-extern double omp_get_wtick (void);\n+extern double omp_get_wtime (void) __GOMP_NOTHROW;\n+extern double omp_get_wtick (void) __GOMP_NOTHROW;\n \n #ifdef __cplusplus\n }"}]}