{"sha": "4077d74c6d8946b667f5544bb3dedf32d451aa2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA3N2Q3NGM2ZDg5NDZiNjY3ZjU1NDRiYjNkZWRmMzJkNDUxYWEyZg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-07T00:16:40Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-07T00:16:40Z"}, "message": "Daily bump.", "tree": {"sha": "19c390c5236e7d7c6a54296153a89e2eac2d9e06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19c390c5236e7d7c6a54296153a89e2eac2d9e06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4077d74c6d8946b667f5544bb3dedf32d451aa2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4077d74c6d8946b667f5544bb3dedf32d451aa2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4077d74c6d8946b667f5544bb3dedf32d451aa2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4077d74c6d8946b667f5544bb3dedf32d451aa2f/comments", "author": null, "committer": null, "parents": [{"sha": "67a493a0b9e7ce6caba4b8bedf1f3295e477ec00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67a493a0b9e7ce6caba4b8bedf1f3295e477ec00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67a493a0b9e7ce6caba4b8bedf1f3295e477ec00"}], "stats": {"total": 418, "additions": 417, "deletions": 1}, "files": [{"sha": "ea2f78df22ecfe2ac741945d269a804f0454a172", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4077d74c6d8946b667f5544bb3dedf32d451aa2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4077d74c6d8946b667f5544bb3dedf32d451aa2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4077d74c6d8946b667f5544bb3dedf32d451aa2f", "patch": "@@ -1,3 +1,24 @@\n+2020-07-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96075\n+\t* tree-vect-data-refs.c (vect_compute_data_ref_alignment): Use\n+\tTYPE_SIZE_UNIT of the vector component type instead of DR_STEP\n+\tfor the misalignment calculation for negative step.\n+\n+2020-07-06  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/nvptx/nvptx.md (*vadd_addsi4): New instruction.\n+\t(*vsub_addsi4): New instruction.\n+\n+2020-07-06  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/cris.md (movulsr): New peephole2.\n+\n+2020-07-06  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/sync.md (\"cris_atomic_fetch_<atomic_op_name><mode>_1\"):\n+\tCorrect gcc_assert of overlapping operands.\n+\n 2020-07-05  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cris/cris.c (cris_select_cc_mode): Always return"}, {"sha": "c0ce1b4790302c70a17535e801043e4c9e7f478d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4077d74c6d8946b667f5544bb3dedf32d451aa2f/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4077d74c6d8946b667f5544bb3dedf32d451aa2f/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=4077d74c6d8946b667f5544bb3dedf32d451aa2f", "patch": "@@ -1 +1 @@\n-20200706\n+20200707"}, {"sha": "e3761017a23a8a58c988b6882cc75b8b60185db6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 268, "deletions": 0, "changes": 268, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4077d74c6d8946b667f5544bb3dedf32d451aa2f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4077d74c6d8946b667f5544bb3dedf32d451aa2f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4077d74c6d8946b667f5544bb3dedf32d451aa2f", "patch": "@@ -1,3 +1,271 @@\n+2020-07-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* checks.adb (Apply_Scalar_Range_Check): Use Is_RTE.\n+\n+2020-07-06  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/g-catiio.ads: Document newly supported format.  Add\n+\tISO_Time constant, for convenience.\n+\t* libgnat/g-catiio.adb (Image_Helper): New helper function to do\n+\tall the formatting work, called by the two exported Image\n+\tfunctions.  Add support for \"%:::z\" here. Add a Time_Zone\n+\tparameter used by the \"%:::z\" processing. This parameter is not\n+\tused for the actual time zone computations; local time is always\n+\tused for that, for ease of implementation reasons.  It would\n+\tmake sense to use Append throughout this function, but that's a\n+\tcleanup for another day.\n+\t(Image): Modify these to pass the local time zone, or the\n+\tspecified time zone, as appropriate.\n+\n+2020-07-06  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/g-catiio.ads: Change the regular expression that\n+\tdocuments the allowed format to match what ISO-8601 allows.\n+\t* libgnat/g-catiio.adb (Scan_Subsecond): Rewrite so it doesn't\n+\tassume the subsecond comes last.\n+\t(Parse_ISO_8601): Parse an optional subsecond, followed by an\n+\toptional time zone, rather than making these alternatives to\n+\teach other.\n+\n+2020-07-06  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/g-catiio.adb (Parse_ISO_8601): Minor cleanups:\n+\tGive some objects clearer names.\n+\tMake some objects more local to where they are used.\n+\tRemove some validity checks that can't fail, because some of\n+\tthe variables tested have been moved so they're not visible here.\n+\tAnyway, Wrong_Syntax is about errors in the input, not data\n+\tvalidity.\n+\tUse Time_Zone_Seen instead of Local_Sign = ' ' to determine\n+\tthat a time zone indication was seen.\n+\tWe don't need to distinguish two different kinds of\n+\tsyntax error (End_Of_Source_Reached and Wrong_Syntax),\n+\tso use Wrong_Syntax always.\n+\tRemove comment, \"Certain scanning scenarios may handle\n+\tthis exception on their own.\"; there are no such scenarios.\n+\n+2020-07-06  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/g-catiio.ads, libgnat/g-catiio.adb (Image): New\n+\tfunction. It might seem like the local-time Image should be\n+\timplemented in terms of the Time_Zone Image, but that would be\n+\tfar harder to implement, so we do it the other way around.\n+\n+2020-07-06  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* libgnat/g-sechas.ads, libgnat/g-sechas.adb: Refactor to use\n+\tStream_Element_Array as the internal buffer type.\n+\t* libgnat/g-shshco.adb: Adjust to use Stream_Element_Offset\n+\tinstead of Integer as the index in the internal state buffer.\n+\n+2020-07-06  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst, errout.ads,\n+\terroutc.adb, exp_ch4.adb, exp_ch6.adb, freeze.adb: Comment\n+\trewording/reformatting/typo fixes.  Replace \"ie.\" with \"that is\"\n+\tin comment; \"can not\" -> \"cannot\", and remove an extraneous\n+\tunderscore in another comment.\n+\t* gnat_rm.texi, gnat_ugn.texi: Regenerate.\n+\n+2020-07-06  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_util.ads (Interval_Lists.Aggregate_Intervals): New\n+\tsubprogram.\n+\t* sem_util.adb (Has_Null_Others_Choice,\n+\tNon_Static_Or_Null_Range, Interval_Lists.Aggregate_Intervals):\n+\tNew subprograms.\n+\t(Is_Potentially_Unevaluated): Adding support to detect\n+\tpotentially unevaluated components of array aggregates.\n+\n+2020-07-06  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/g-catiio.adb (Parse_ISO_8601): New name for\n+\tParse_ISO_8861_UTC.  8601 is the correct ISO standard number.\n+\tAlso, \"UTC\" was confusing. All Time values are represented in\n+\tUTC, but the ISO 8601 date strings include a time zone.\n+\tIf a time zone was specified, call\n+\tAda.Calendar.Formatting.Time_Of instead of\n+\tGNAT.Calendar.Time_Of, because the latter adjusts to the current\n+\ttime zone, whereas we want to use (just) the time zone specified\n+\tin the ISO string.  This allows us to pass Time_Zone instead to\n+\tTime_Of, instead of adjusting by Local_Disp by hand.\n+\tIf no time zone was specified, call GNAT.Calendar.Time_Of as\n+\tbefore.\n+\tUse expanded names to clarify which Time_Of is being called.\n+\tRemove redundant comment, and move nonredundant part of the\n+\tcommment to the spec.\n+\t(Value): Minor: use \"not in\" instead of \"or else\".\n+\t* libgnat/g-catiio.ads: Comment moved here. Correct the ISO\n+\tstandard number.\n+\t* libgnat/g-calend.adb: Add ??? comments.\n+\t* libgnat/a-calend.ads, libgnat/a-calend.adb: Update obsolete\n+\tcomments regarding the representation of type Time. Move the\n+\tinformation about the epoch (year 2150) to the spec, and avoid\n+\tuttering \"2150\" more than once.\n+\t* libgnat/a-catizo.ads (Time_Offset): Add comment.\n+\n+2020-07-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Find_Component): If the target type is a derived\n+\trecord type and the required component is a discriminant that is\n+\trenamed in the derived type declaration, use the name of the\n+\toriginal discriminant to locate the intended target component.\n+\n+2020-07-06  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Associations): Add check for errors on\n+\tthe generic formal before continuing with instantiation.\n+\n+2020-07-06  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-nbnbin.ads, libgnat/a-nbnbin.adb,\n+\tlibgnat/a-nbnbin__gmp.adb: Use more Valid_Big_Integer.\n+\n+2020-07-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_util.ads (Get_Index_Subtype): Fix duplicate \"Last\".\n+\n+2020-07-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sinfo.ads: Indicate that Field 1 of an N_Delta_Aggregate is\n+\tunused. Previously it was erroneously labelled as holding an\n+\tExpressions list, in analogy with other aggregate constructs,\n+\tbut there are no Expressions attached to this node syntactically\n+\tor semantically.\n+\n+2020-07-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Eval_Attribute): Check if constant has an\n+\tinitialization expression.\n+\n+2020-07-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_N_Attribute_Reference): Apply\n+\tscalar range checks.\n+\t* sem_attr.adb (Resolve_Attribute): Do not set scalar range\n+\tchecks when resolving attribute Update.\n+\n+2020-07-06  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute, Attribute_Constrained): Issue\n+\ta warning if the attribute prefix is a current instance\n+\treference within an aspect of a type or subtype.\n+\t(Address_Checks): Replace test of Is_Object (Ent) with\n+\tIs_Object_Reference (P) so that testing for current instances\n+\twill be done.\n+\t(Eval_Attribute): Add test for current instance reference, to\n+\tensure that we still fold array attributes when current\n+\tinstances are involved, since value prefixes are allowed for\n+\tarray attributes, and will now be excluded by\n+\tIs_Object_Reference.\n+\t* sem_util.ads (Is_Current_Instance_Reference_In_Type_Aspect):\n+\tNew exported query function.\n+\t* sem_util.adb (Is_Object_Reference): Return False for the case\n+\twhere N is a current instance reference within an\n+\taspect_specification of a type or subtype (basically if the\n+\treference occurs within a predicate, invariant, or DIC aspect\n+\texpression).\n+\t(Is_Current_Instance_Reference_In_Type_Aspect): New function\n+\tthat tests whether a node is a reference to a current instance\n+\tformal of a predicate, invariant, or\n+\tDefault_Initial_Condition (DIC) subprogram.\n+\n+2020-07-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Declare_Expression): New subprogram, to\n+\tinstall the scope holding local declarations of the expression,\n+\tbefore completing its resolution.\n+\t(Resolve): For an Expression_With_Actions that comes from a\n+\tsource occurrence of a Declare_Expression, call new subprogram.\n+\n+2020-07-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Reuse SPARK_Implicit_Load.\n+\n+2020-07-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Loop_Parameter_Specification): Propagate\n+\texception when switch -gnatdk is used and no previous errors are\n+\tpresent.\n+\t* sem_eval.adb (Compile_Time_Known_Value, Is_In_Range):\n+\tLikewise.\n+\t* sem_warn.adb (Operand_Has_Warnings_Suppressed): Likewise.\n+\n+2020-07-06  Richard Kenner  <kenner@adacore.com>\n+\n+\t* exp_unst.adb (Needs_Fat_Pointer): Don't check for formal.\n+\t(Unnest_Subprogram): Use 'Unchecked_Access instead of 'Access\n+\twhen populating activation record.\n+\n+2020-07-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb (Add_Simple_Call_By_Copy_Code): Rename parameter\n+\tfrom Bit_Packed_Array to Force.\n+\t(Expand_Actuals): Do not apply BIP processing if the subprogram\n+\tis intrinsic.  Adjust calls to Add_Simple_Call_By_Copy_Code and\n+\tadd one for In parameters whose actual is a CPP constructor call.\n+\n+2020-07-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_attr.adb (Eval_Attribute): Do not apply range checks in\n+\tthe case of 'Pos applied to an integer type here.\n+\n+2020-07-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration): If the type is an\n+\tUnchecked_Union, and the expression is an aggregate. complete\n+\tthe analysis and resolution of the aggregate, and treat like a\n+\tregular object declaration, instead of as a renaming\n+\tdeclarattion.\n+\n+2020-07-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch9.adb (Is_Potentially_Large_Family): Add documentation.\n+\t(Actual_Index_Expression): Use Entry_Index_Type.\n+\t(Build_Entry_Count_Expression): Likewise.\n+\t(Build_Find_Body_Index): Likewise.\n+\t(Collect_Entry_Families): Likewise. Use directly the bounds of\n+\tthe index type to find out whether the family is large.\n+\t(Entry_Index_Expression): Likewise.\n+\n+2020-07-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Range): Resolve both low and high bounds\n+\twith the range type.\n+\n+2020-07-06  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* aspects.ads (Is_Representation_Aspect):\n+\tDefault_Component_Value is a representation aspect.\n+\t* sem_ch13.adb (Check_Aspect_Too_Late, Rep_Item_Too_Late): Relax\n+\tRM 13.1(10) rule wrt primitive operations for Ada 202x.\n+\n+2020-07-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_aggr.adb (Aggr_Assignment_OK_For_Backend): Move to library\n+\tlevel and use a new predicate Is_OK_Aggregate to recognize the\n+\taggregates suitable for direct assignment by the back-end.\n+\t(Convert_Array_Aggr_In_Allocator): If neither in CodePeer mode nor\n+\tgenerating C code, generate a direct assignment instead of further\n+\texpanding if Aggr_Assignment_OK_For_Backend returns true.\n+\n+2020-07-06  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_aux.adb: Add a with clause for Nlists.\n+\t(Nearest_Ancestor): Test for the case of concurrent\n+\ttypes (testing for both Is_Concurrent_Type and\n+\tIs_Concurrent_Record_Type), and return the first ancestor in the\n+\tInterfaces list if present (otherwise will return Empty if no\n+\tinterfaces).\n+\t* sem_ch13.adb (Build_Predicate_Functions): Add a ??? comment\n+\tabout missing handling for adding predicates when they can be\n+\tinherited from multiple progenitors.\n+\n+2020-07-06  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* par-ch6.adb (P_Return_Object_Declaration): Set\n+\tHas_Init_Expression flag.\n+\n 2020-07-02  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n \n \t* debug.adb (d.K): Document new usage."}, {"sha": "431eea3136a24a348940da182e02f394eae2ac40", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4077d74c6d8946b667f5544bb3dedf32d451aa2f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4077d74c6d8946b667f5544bb3dedf32d451aa2f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4077d74c6d8946b667f5544bb3dedf32d451aa2f", "patch": "@@ -1,3 +1,10 @@\n+2020-07-06  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/95984\n+\t* c-common.c (check_function_nonnull): Avoid checking syntesized calls\n+\tto stub lambda objects with null this pointer.\n+\t(check_nonnull_arg): Handle C++ nullptr.\n+\n 2020-07-02  Jason Merrill  <jason@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "f41e501ec2a5cf402605e9006202109b0a90744f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4077d74c6d8946b667f5544bb3dedf32d451aa2f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4077d74c6d8946b667f5544bb3dedf32d451aa2f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4077d74c6d8946b667f5544bb3dedf32d451aa2f", "patch": "@@ -1,3 +1,22 @@\n+2020-07-06  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/95984\n+\t* call.c (build_over_call): Check calls only when tf_warning is set.\n+\n+2020-07-06  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* decl.c (push_library_fn): Return the decl pushdecl_toplevel returns.\n+\t* except.c (verify_library_fn): Replace with ...\n+\t(declare_library_fn_1): ... this fn.  Always push the fn.\n+\t(declare_library_fn): Call it.\n+\t(build_throw): Call declare_library_fn_1.\n+\n+2020-07-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/96068\n+\t* parser.c (cp_parser_toplevel_declaration): Only do pedwarn for\n+\tempty-declaration in C++98.\n+\n 2020-07-02  Jason Merrill  <jason@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "c7552b661cbe3860fd36d07b58f8e10144f1ff64", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4077d74c6d8946b667f5544bb3dedf32d451aa2f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4077d74c6d8946b667f5544bb3dedf32d451aa2f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4077d74c6d8946b667f5544bb3dedf32d451aa2f", "patch": "@@ -1,3 +1,19 @@\n+2020-07-06  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95980\n+\t* match.c (copy_ts_from_selector_to_associate, build_class_sym):\n+\tDistinguish between unlimited polymorphic and ordinary variables\n+\tto avoid NULL pointer dereference.\n+\t* resolve.c (resolve_select_type):\n+\tDistinguish between unlimited polymorphic and ordinary variables\n+\tto avoid NULL pointer dereference.\n+\n+2020-07-06  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95709\n+\t* resolve.c (gfc_resolve_code): Check for valid arguments to\n+\tassigned GOTO.\n+\n 2020-07-05  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/27318"}, {"sha": "a27630a32fdcb320e5f57066b7e1ed4871a5b792", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4077d74c6d8946b667f5544bb3dedf32d451aa2f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4077d74c6d8946b667f5544bb3dedf32d451aa2f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4077d74c6d8946b667f5544bb3dedf32d451aa2f", "patch": "@@ -1,3 +1,48 @@\n+2020-07-06  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/95984\n+\t* g++.dg/warn/Wnonnull6.C: New test.\n+\n+2020-07-06  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/eh/builtin10.C: Adjust expected errors.\n+\t* g++.dg/eh/builtin11.C: Likewise.\n+\t* g++.dg/eh/builtin5.C: Likewise.\n+\t* g++.dg/eh/builtin6.C: Likewise.\n+\t* g++.dg/eh/builtin7.C: Likewise.\n+\t* g++.dg/eh/builtin9.C: Likewise.\n+\t* g++.dg/parse/crash55.C: Likewise.\n+\n+2020-07-06  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95980\n+\t* gfortran.dg/pr95980.f90: New file.\n+\n+2020-07-06  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95709\n+\t* gfortran.dg/pr95709.f90: New file.\n+\n+2020-07-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* g++.old-deja/g++.bugs/900404_04.C: Add c++98_only selector to\n+\tdg-error for extra ';'.\n+\t* g++.old-deja/g++.law/missed-error2.C: Likewise.\n+\n+2020-07-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96075\n+\t* gcc.dg/vect/slp-46.c: New testcase.\n+\n+2020-07-06  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/nvptx/vadd_add.c: New test.\n+\t* gcc.target/nvptx/vsub_add.c: New test.\n+\n+2020-07-06  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* gcc.target/cris/peep2-movulsr.c: New test.\n+\n 2020-07-05  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* gcc.target/cris/pr93372-39.c: New test."}, {"sha": "807fe522137c4147a55bb1e575ef59890c5530a3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4077d74c6d8946b667f5544bb3dedf32d451aa2f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4077d74c6d8946b667f5544bb3dedf32d451aa2f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4077d74c6d8946b667f5544bb3dedf32d451aa2f", "patch": "@@ -1,3 +1,43 @@\n+2020-07-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/optional (_Optional_payload_base, _Optional_base)\n+\t(optional, __optional_hash_call_base): Adjust whitespace and\n+\tother formatting. Remove redundant && tokens on template\n+\targuments to type traits.\n+\n+2020-07-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/optional (make_optional): Add enable_if\n+\tconstraints and noexcept-specifier to each overload.\n+\t* testsuite/20_util/optional/make_optional-2.cc: New test.\n+\n+2020-07-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/96036\n+\t* include/std/optional (optional): Add noexcept-specifier to\n+\tevery constructor, assignment operator, emplace function and\n+\tdereference operator.\n+\t* testsuite/20_util/optional/assignment/noexcept.cc: New test.\n+\t* testsuite/20_util/optional/cons/noexcept.cc: New test.\n+\n+2020-07-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_dir.h: Use consistent tag in class-head.\n+\t* include/bits/localefwd.h: Likwise.\n+\t* include/bits/regex.h: Likwise.\n+\t* include/bits/stl_map.h: Likwise.\n+\t* include/bits/stl_multimap.h: Likwise.\n+\t* include/bits/stl_multiset.h: Likwise.\n+\t* include/bits/stl_set.h: Likwise.\n+\t* include/std/complex: Likwise.\n+\t* include/std/functional: Likwise.\n+\t* include/std/future: Likwise.\n+\t* include/std/system_error: Likwise.\n+\t* include/std/thread: Likwise.\n+\t* include/std/tuple: Likwise.\n+\t* include/std/type_traits: Likwise.\n+\t* include/std/valarray: Likwise.\n+\n 2020-07-02  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/27_io/basic_ios/conv/voidptr.cc: Add c++98_only"}]}