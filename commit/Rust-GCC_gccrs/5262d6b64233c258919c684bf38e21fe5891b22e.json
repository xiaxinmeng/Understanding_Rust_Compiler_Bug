{"sha": "5262d6b64233c258919c684bf38e21fe5891b22e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI2MmQ2YjY0MjMzYzI1ODkxOWM2ODRiZjM4ZTIxZmU1ODkxYjIyZQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-05-16T19:05:50Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-05-16T19:05:50Z"}, "message": "Makefile.in (toplev.o): Add dependency on dwarf2asm.h.\n\n\t* Makefile.in (toplev.o): Add dependency on dwarf2asm.h.\n\n\t* toplev.c: Include dwarf2asm.h for prototype of\n\tdw2_output_indirect_constants.\n\nFrom-SVN: r42165", "tree": {"sha": "d9cc06f1702194dc5933bb332f68fe8ce5487b01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9cc06f1702194dc5933bb332f68fe8ce5487b01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5262d6b64233c258919c684bf38e21fe5891b22e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5262d6b64233c258919c684bf38e21fe5891b22e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5262d6b64233c258919c684bf38e21fe5891b22e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5262d6b64233c258919c684bf38e21fe5891b22e/comments", "author": null, "committer": null, "parents": [{"sha": "5cad287eff258606fed1acc797374cd4670d5840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cad287eff258606fed1acc797374cd4670d5840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cad287eff258606fed1acc797374cd4670d5840"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "5197abf62284f7975420b1ae6e7c00db36d32788", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5262d6b64233c258919c684bf38e21fe5891b22e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5262d6b64233c258919c684bf38e21fe5891b22e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5262d6b64233c258919c684bf38e21fe5891b22e", "patch": "@@ -1,3 +1,10 @@\n+2001-05-16  Andreas Jaeger  <aj@suse.de>\n+\n+\t* Makefile.in (toplev.o): Add dependency on dwarf2asm.h.\n+\n+\t* toplev.c: Include dwarf2asm.h for prototype of\n+\tdw2_output_indirect_constants.\n+\n Wed May 16 19:53:53 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* stmt.c (expand_asm_operands): Be able to offload addressof\n@@ -24,7 +31,7 @@ Wed May 16 18:53:23 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n 2001-05-16  Jakub Jelinek  <jakub@redhat.com>\n \t    Nathan Sidwell  <nathan@codesourcery.com>\n-\t    \n+\n         * gcc.c (give_switch): Don't write before start of string.\n \tAlways append suffix.\n \n@@ -273,7 +280,7 @@ cp:\n \t* final.c (final_start_function): Always call dwarf2out_begin_prologue.\n \t(final_end_function): Don't call output_function_exception_table.\n \t* toplev.c (compile_file): Call dw2_output_indirect_constants.\n-\t(rest_of_compilation): Invoke output_function_exception_table \n+\t(rest_of_compilation): Invoke output_function_exception_table\n \tfor ia64 before assemble_end_function.\n \t* tm.texi (ASM_PREFERRED_EH_DATA_FORMAT): Document.\n \t(ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX): Document."}, {"sha": "dbaf8b5daa89a40441afec1ba809ca4d749ab810", "filename": "gcc/Makefile.in", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5262d6b64233c258919c684bf38e21fe5891b22e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5262d6b64233c258919c684bf38e21fe5891b22e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=5262d6b64233c258919c684bf38e21fe5891b22e", "patch": "@@ -138,9 +138,9 @@ MAKEOVERRIDES =\n # In stage2 and beyond, we force this to \"-o $@\" since we know we're using gcc.\n OUTPUT_OPTION = @OUTPUT_OPTION@\n \n-# Some versions of `touch' (such as the version on Solaris 2.8) \n+# Some versions of `touch' (such as the version on Solaris 2.8)\n # do not correctly set the timestamp due to buggy versions of `utime'\n-# in the kernel.  So, we use `echo' instead. \n+# in the kernel.  So, we use `echo' instead.\n STAMP = echo timestamp >\n \n # This is where we get zlib from.  zlibdir is -L../zlib and zlibinc is\n@@ -213,7 +213,7 @@ AR_FOR_TARGET = ` \\\n        t='$(program_transform_cross_name)'; echo ar | sed -e $$t ; \\\n     fi; \\\n   fi`\n-AR_FLAGS_FOR_TARGET = \n+AR_FLAGS_FOR_TARGET =\n AR_CREATE_FOR_TARGET = $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) rc\n AR_EXTRACT_FOR_TARGET = $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) x\n RANLIB_FOR_TARGET = ` \\\n@@ -913,10 +913,10 @@ $(srcdir)/configure: $(srcdir)/configure.in\n \t(cd $(srcdir) && autoconf)\n \n gccbug:\t$(srcdir)/gccbug.in\n-\tCONFIG_FILES=gccbug CONFIG_HEADERS= ./config.status \n+\tCONFIG_FILES=gccbug CONFIG_HEADERS= ./config.status\n \n mklibgcc: $(srcdir)/mklibgcc.in\n-\tCONFIG_FILES=mklibgcc CONFIG_HEADERS= ./config.status \n+\tCONFIG_FILES=mklibgcc CONFIG_HEADERS= ./config.status\n \n # cstamp-h.in controls rebuilding of config.in.\n # It is named cstamp-h.in and not stamp-h.in so the mostlyclean rule doesn't\n@@ -1328,7 +1328,7 @@ gencheck$(build_exeext) : gencheck.o $(HOST_LIBDEPS)\n \t gencheck.o $(HOST_LIBS)\n \n gencheck.o : gencheck.c gencheck.h tree.def $(HCONFIG_H) $(SYSTEM_H) \\\n-             $(lang_tree_files) \n+             $(lang_tree_files)\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) \\\n \t  $(srcdir)/gencheck.c\n \n@@ -1373,13 +1373,13 @@ fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h toplev.h \\\n    $(EXPR_H) $(RTL_H) $(GGC_H) $(TM_P_H)\n diagnostic.o : diagnostic.c diagnostic.h diagnostic.def \\\n    $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) $(TM_P_H) flags.h \\\n-   $(GGC_H) input.h $(INSN_ATTR_H) insn-config.h toplev.h intl.h \n+   $(GGC_H) input.h $(INSN_ATTR_H) insn-config.h toplev.h intl.h\n toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) function.h \\\n    flags.h input.h $(INSN_ATTR_H) xcoffout.h output.h diagnostic.h \\\n    insn-config.h intl.h $(RECOG_H) Makefile toplev.h dwarfout.h \\\n    dwarf2out.h sdbout.h dbxout.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) \\\n    graph.h $(LOOP_H) except.h $(REGS_H) $(TIMEVAR_H) $(lang_options_files) \\\n-   ssa.h params.h $(TM_P_H) reload.h\n+   ssa.h params.h $(TM_P_H) reload.h dwarf2asm.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(MAYBE_USE_COLLECT2) \\\n \t  -DTARGET_NAME=\\\"$(target_alias)\\\" \\\n \t  -c $(srcdir)/toplev.c\n@@ -1803,7 +1803,7 @@ genrecog$(build_exeext) : genrecog.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(\n \n genrecog.o : genrecog.c $(RTL_H) $(HCONFIG_H) \\\n   $(SYSTEM_H) errors.h gensupport.h\n-\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genrecog.c \n+\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/genrecog.c\n \n genextract$(build_exeext) : genextract.o $(HOST_RTL) $(HOST_PRINT) $(HOST_ERRORS) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n@@ -2354,7 +2354,7 @@ mostlyclean: $(INTL_MOSTLYCLEAN) lang.mostlyclean\n INTL_CLEAN = intl.clean\n clean: mostlyclean $(INTL_CLEAN) lang.clean\n \t-rm -f libgcc.a libgcc_s$(SHLIB_EXT) libgcc_s$(SHLIB_EXT).0\n-\t-rm -f config.h tconfig.h hconfig.h tm_p.h \n+\t-rm -f config.h tconfig.h hconfig.h tm_p.h\n \t-rm -f cs-*\n \t-rm -rf libgcc\n \t-rm -f *.dvi\n@@ -2815,7 +2815,7 @@ CHECK_TARGETS = check-gcc @check_languages@ @CHECK_PO@\n \n check-c++ : check-g++\n check-f77 : check-g77\n-check-java : \n+check-java :\n \n check: $(CHECK_TARGETS)\n "}, {"sha": "d64cb3a217387bcf0da2284c480f47fd4b844327", "filename": "gcc/toplev.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5262d6b64233c258919c684bf38e21fe5891b22e/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5262d6b64233c258919c684bf38e21fe5891b22e/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=5262d6b64233c258919c684bf38e21fe5891b22e", "patch": "@@ -64,6 +64,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"ssa.h\"\n #include \"params.h\"\n #include \"reload.h\"\n+#include \"dwarf2asm.h\"\n \n #ifdef DWARF_DEBUGGING_INFO\n #include \"dwarfout.h\"\n@@ -2736,7 +2737,7 @@ rest_of_compilation (decl)\n \t  }\n \n       /* If requested, consider whether to make this function inline.  */\n-      if ((DECL_INLINE (decl) && !flag_no_inline) \n+      if ((DECL_INLINE (decl) && !flag_no_inline)\n \t  || flag_inline_functions)\n \t{\n \t  timevar_push (TV_INTEGRATION);\n@@ -3110,7 +3111,7 @@ rest_of_compilation (decl)\n \t  timevar_pop (TV_CSE);\n \t  cse_not_expected = !flag_rerun_cse_after_loop;\n \t}\n-      \n+\n       /* If gcse or cse altered any jumps, rerun jump optimizations to clean\n \t things up.  Then possibly re-run CSE again.  */\n       while (tem || tem2)\n@@ -4117,7 +4118,7 @@ decode_f_option (arg)\n   else if ((option_value = skip_leading_substring (arg, \"inline-limit-\"))\n \t   || (option_value = skip_leading_substring (arg, \"inline-limit=\")))\n     {\n-      int val = \n+      int val =\n \tread_integral_parameter (option_value, arg - 2,\n \t\t\t\t MAX_INLINE_INSNS);\n       set_param_value (\"max-inline-insns\", val);\n@@ -4422,9 +4423,9 @@ independent_decode_option (argc, argv)\n       arg = argv[1];\n       /* Look for the `='.  */\n       equal = strchr (arg, '=');\n-      if (!equal) \n+      if (!equal)\n \terror (\"invalid --param option: %s\", arg);\n-      else \n+      else\n \t{\n \t  int val;\n \n@@ -4440,7 +4441,7 @@ independent_decode_option (argc, argv)\n \n       return 2;\n     }\n-      \n+\n   if (*arg == 'Y')\n     arg++;\n \n@@ -4607,7 +4608,7 @@ independent_decode_option (argc, argv)\n    Decode command args, then call compile_file.\n    Exit code is FATAL_EXIT_CODE if can't open files or if there were\n    any errors, or SUCCESS_EXIT_CODE if compilation succeeded.\n-   \n+\n    It is not safe to call this function more than once.  */\n \n int"}]}