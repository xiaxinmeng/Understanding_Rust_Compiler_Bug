{"sha": "c7d08869b0bfa6ea130bdf5a0324ed9733f680ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdkMDg4NjliMGJmYTZlYTEzMGJkZjVhMDMyNGVkOTczM2Y2ODBhZQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-06-23T19:18:10Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-06-23T19:18:10Z"}, "message": "decl.c (java_init_decl_processing): Use double_int_to_tree instead of build_int_cst_wide.\n\n/java\n\t* decl.c (java_init_decl_processing): Use double_int_to_tree instead\n\tof build_int_cst_wide.\n\t* boehm.c (set_bit): Remove.\n\t(mark_reference_fields): Use double_int type for 'mask' argument.\n\tUse double_int_setbit instead of set_bit.\n\t(get_boehm_type_descriptor): Use double_int_setbit instead of\n\tset_bit. Use double_int_to_tree instead of build_int_cst_wide.\n\nFrom-SVN: r161288", "tree": {"sha": "410de4e6c9701ba0936dba55178ae6cd84283d23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/410de4e6c9701ba0936dba55178ae6cd84283d23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7d08869b0bfa6ea130bdf5a0324ed9733f680ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d08869b0bfa6ea130bdf5a0324ed9733f680ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7d08869b0bfa6ea130bdf5a0324ed9733f680ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d08869b0bfa6ea130bdf5a0324ed9733f680ae/comments", "author": null, "committer": null, "parents": [{"sha": "bc051083b03021f18372f165243117688a023d77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc051083b03021f18372f165243117688a023d77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc051083b03021f18372f165243117688a023d77"}], "stats": {"total": 71, "additions": 27, "deletions": 44}, "files": [{"sha": "e1135318f1bd3b79350b02d229f0ae97fdba278d", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d08869b0bfa6ea130bdf5a0324ed9733f680ae/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d08869b0bfa6ea130bdf5a0324ed9733f680ae/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c7d08869b0bfa6ea130bdf5a0324ed9733f680ae", "patch": "@@ -1,3 +1,13 @@\n+2010-06-23  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* decl.c (java_init_decl_processing): Use double_int_to_tree instead\n+\tof build_int_cst_wide.\n+\t* boehm.c (set_bit): Remove.\n+\t(mark_reference_fields): Use double_int type for 'mask' argument.\n+\tUse double_int_setbit instead of set_bit.\n+\t(get_boehm_type_descriptor): Use double_int_setbit instead of\n+\tset_bit. Use double_int_to_tree instead of build_int_cst_wide.\n+\n 2010-06-10  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* gcj.texi: Move to GFDL version 1.3.  Fix copyright years."}, {"sha": "35ba68d0fb33cc4a7a347019e4342791606b5b8b", "filename": "gcc/java/boehm.c", "status": "modified", "additions": 14, "deletions": 35, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d08869b0bfa6ea130bdf5a0324ed9733f680ae/gcc%2Fjava%2Fboehm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d08869b0bfa6ea130bdf5a0324ed9733f680ae/gcc%2Fjava%2Fboehm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fboehm.c?ref=c7d08869b0bfa6ea130bdf5a0324ed9733f680ae", "patch": "@@ -27,17 +27,15 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"double-int.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"java-tree.h\"\n #include \"parse.h\"\n #include \"toplev.h\"\n \n-static void mark_reference_fields (tree, unsigned HOST_WIDE_INT *,\n-\t\t\t\t   unsigned HOST_WIDE_INT *, unsigned int,\n+static void mark_reference_fields (tree, double_int *, unsigned int,\n \t\t\t\t   int *, int *, int *, HOST_WIDE_INT *);\n-static void set_bit (unsigned HOST_WIDE_INT *, unsigned HOST_WIDE_INT *,\n-\t\t     unsigned int);\n \n /* A procedure-based object descriptor.  We know that our\n    `kind' is 0, and `env' is likewise 0, so we have a simple\n@@ -47,30 +45,10 @@ static void set_bit (unsigned HOST_WIDE_INT *, unsigned HOST_WIDE_INT *,\n    Here DS_PROC == 2.  */\n #define PROCEDURE_OBJECT_DESCRIPTOR 2\n \n-/* Treat two HOST_WIDE_INT's as a contiguous bitmap, with bit 0 being\n-   the least significant.  This function sets bit N in the bitmap.  */\n-static void\n-set_bit (unsigned HOST_WIDE_INT *low, unsigned HOST_WIDE_INT *high,\n-\t unsigned int n)\n-{\n-  unsigned HOST_WIDE_INT *which;\n-\n-  if (n >= HOST_BITS_PER_WIDE_INT)\n-    {\n-      n -= HOST_BITS_PER_WIDE_INT;\n-      which = high;\n-    }\n-  else\n-    which = low;\n-\n-  *which |= (unsigned HOST_WIDE_INT) 1 << n;\n-}\n-\n /* Recursively mark reference fields.  */\n static void\n mark_reference_fields (tree field,\n-\t\t       unsigned HOST_WIDE_INT *low,\n-\t\t       unsigned HOST_WIDE_INT *high,\n+\t\t       double_int *mask,\n \t\t       unsigned int ubit,\n \t\t       int *pointer_after_end,\n \t\t       int *all_bits_set,\n@@ -81,7 +59,7 @@ mark_reference_fields (tree field,\n   if (DECL_NAME (field) == NULL_TREE)\n     {\n       mark_reference_fields (TYPE_FIELDS (TREE_TYPE (field)),\n-\t\t\t     low, high, ubit,\n+\t\t\t     mask, ubit,\n \t\t\t     pointer_after_end, all_bits_set,\n \t\t\t     last_set_index, last_view_index);\n       field = TREE_CHAIN (field);\n@@ -130,7 +108,7 @@ mark_reference_fields (tree field,\n \t     bits for all words in the record. This is conservative, but the \n \t     size_words != 1 case is impossible in regular java code. */\n \t  for (i = 0; i < size_words; ++i)\n-\t    set_bit (low, high, ubit - count - i - 1);\n+\t    *mask = double_int_setbit (*mask, ubit - count - i - 1);\n \n \t  if (count >= ubit - 2)\n \t    *pointer_after_end = 1;\n@@ -159,9 +137,11 @@ get_boehm_type_descriptor (tree type)\n   int last_set_index = 0;\n   HOST_WIDE_INT last_view_index = -1;\n   int pointer_after_end = 0;\n-  unsigned HOST_WIDE_INT low = 0, high = 0;\n+  double_int mask;\n   tree field, value, value_type;\n \n+  mask = double_int_zero;\n+\n   /* If the GC wasn't requested, just use a null pointer.  */\n   if (! flag_use_boehm_gc)\n     return null_pointer_node;\n@@ -192,7 +172,7 @@ get_boehm_type_descriptor (tree type)\n     goto procedure_object_descriptor;\n \n   field = TYPE_FIELDS (type);\n-  mark_reference_fields (field, &low, &high, ubit,\n+  mark_reference_fields (field, &mask, ubit,\n \t\t\t &pointer_after_end, &all_bits_set,\n \t\t\t &last_set_index, &last_view_index);\n \n@@ -215,23 +195,22 @@ get_boehm_type_descriptor (tree type)\n          that we don't have to emit reflection data for run time\n          marking. */\n       count = 0;\n-      low = 0;\n-      high = 0;\n+      mask = double_int_zero;\n       ++last_set_index;\n       while (last_set_index)\n \t{\n \t  if ((last_set_index & 1))\n-\t    set_bit (&low, &high, log2_size + count);\n+\t    mask = double_int_setbit (mask, log2_size + count);\n \t  last_set_index >>= 1;\n \t  ++count;\n \t}\n-      value = build_int_cst_wide (value_type, low, high);\n+      value = double_int_to_tree (value_type, mask);\n     }\n   else if (! pointer_after_end)\n     {\n       /* Bottom two bits for bitmap mark type are 01.  */\n-      set_bit (&low, &high, 0);\n-      value = build_int_cst_wide (value_type, low, high);\n+      mask = double_int_setbit (mask, 0);\n+      value = double_int_to_tree (value_type, mask);\n     }\n   else\n     {"}, {"sha": "d3e671067a69b38a6f223f2765011b199e6df497", "filename": "gcc/java/decl.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d08869b0bfa6ea130bdf5a0324ed9733f680ae/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d08869b0bfa6ea130bdf5a0324ed9733f680ae/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=c7d08869b0bfa6ea130bdf5a0324ed9733f680ae", "patch": "@@ -619,15 +619,9 @@ java_init_decl_processing (void)\n \n   /* A few values used for range checking in the lexer.  */\n   decimal_int_max = build_int_cstu (unsigned_int_type_node, 0x80000000);\n-#if HOST_BITS_PER_WIDE_INT == 64\n-  decimal_long_max = build_int_cstu (unsigned_long_type_node,\n-\t\t\t\t     0x8000000000000000LL);\n-#elif HOST_BITS_PER_WIDE_INT == 32\n-  decimal_long_max = build_int_cst_wide (unsigned_long_type_node,\n-\t\t\t\t\t 0, 0x80000000);\n-#else\n- #error \"unsupported size\"\n-#endif\n+  decimal_long_max\n+    = double_int_to_tree (unsigned_long_type_node,\n+\t\t\t  double_int_setbit (double_int_zero, 64));\n \n   size_zero_node = size_int (0);\n   size_one_node = size_int (1);"}]}