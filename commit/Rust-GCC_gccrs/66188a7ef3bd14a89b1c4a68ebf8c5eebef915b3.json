{"sha": "66188a7ef3bd14a89b1c4a68ebf8c5eebef915b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYxODhhN2VmM2JkMTRhODliMWM0YTY4ZWJmOGM1ZWViZWY5MTViMw==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2003-12-19T06:28:24Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2003-12-19T06:28:24Z"}, "message": "aix.h (OS_MISSING_POWERPC64): Define.\n\n\t* config/rs6000/aix.h (OS_MISSING_POWERPC64): Define.\n\t(OS_MISSING_ALTIVEC): Define.\n\t* config/rs6000/darwin.h (ASM_SPEC): Be generous about supplying\n\t-force_cpusubtype_ALL.\n\t* config/rs6000/rs6000.c (rs6000_override_options): Rearrange\n\tCPU information table; now always set all CPU-specific values.\n\tAlso, use Altivec and powerpc64 when chip and OS supports them.\n\nFrom-SVN: r74820", "tree": {"sha": "687f20039ab3cab85719fa596661b338ccf5a124", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/687f20039ab3cab85719fa596661b338ccf5a124"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66188a7ef3bd14a89b1c4a68ebf8c5eebef915b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66188a7ef3bd14a89b1c4a68ebf8c5eebef915b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66188a7ef3bd14a89b1c4a68ebf8c5eebef915b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66188a7ef3bd14a89b1c4a68ebf8c5eebef915b3/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3afbff37c430b49841c9e87e24c35b39b8baaa27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3afbff37c430b49841c9e87e24c35b39b8baaa27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3afbff37c430b49841c9e87e24c35b39b8baaa27"}], "stats": {"total": 311, "additions": 132, "deletions": 179}, "files": [{"sha": "3a98d4ed1b17e3db912f56f343342a04021fda30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66188a7ef3bd14a89b1c4a68ebf8c5eebef915b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66188a7ef3bd14a89b1c4a68ebf8c5eebef915b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66188a7ef3bd14a89b1c4a68ebf8c5eebef915b3", "patch": "@@ -1,3 +1,13 @@\n+2003-12-18  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* config/rs6000/aix.h (OS_MISSING_POWERPC64): Define.\n+\t(OS_MISSING_ALTIVEC): Define.\n+\t* config/rs6000/darwin.h (ASM_SPEC): Be generous about supplying\n+\t-force_cpusubtype_ALL.\n+\t* config/rs6000/rs6000.c (rs6000_override_options): Rearrange\n+\tCPU information table; now always set all CPU-specific values.\n+\tAlso, use Altivec and powerpc64 when chip and OS supports them.\n+\n 2003-12-18  Geoffrey Keating  <geoffk@apple.com>\n \n \t* fixinc/inclhack.def (darwin_macho_dyldh): New."}, {"sha": "e6d8e1f1c863e31b5847bdbeb56190d8191cf105", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66188a7ef3bd14a89b1c4a68ebf8c5eebef915b3/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66188a7ef3bd14a89b1c4a68ebf8c5eebef915b3/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=66188a7ef3bd14a89b1c4a68ebf8c5eebef915b3", "patch": "@@ -241,3 +241,8 @@\n \n /* Print subsidiary information on the compiler version in use.  */\n #define TARGET_VERSION ;\n+\n+/* No version of AIX fully supports AltiVec or 64-bit instructions in\n+   32-bit mode.  */\n+#define OS_MISSING_POWERPC64 1\n+#define OS_MISSING_ALTIVEC 1"}, {"sha": "c77279d21427c8719c44377fa3c51d46279a952a", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66188a7ef3bd14a89b1c4a68ebf8c5eebef915b3/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66188a7ef3bd14a89b1c4a68ebf8c5eebef915b3/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=66188a7ef3bd14a89b1c4a68ebf8c5eebef915b3", "patch": "@@ -98,9 +98,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n %{static: %{Zdynamic: %e conflicting code gen style switches are used}}\\\n %{!static:%{!mdynamic-no-pic:-fPIC}}\"\n \n+/* It's virtually impossible to predict all the possible combinations\n+   of -mcpu and -maltivec and whatnot, so just supply\n+   -force_cpusubtype_ALL if any are seen.  Radar 3492132 against the\n+   assembler is asking for a .machine directive so we could get this\n+   really right.  */\n #define ASM_SPEC \"-arch ppc \\\n   %{Zforce_cpusubtype_ALL:-force_cpusubtype_ALL} \\\n-  %{!Zforce_cpusubtype_ALL:%{maltivec:-force_cpusubtype_ALL}}\"\n+  %{!Zforce_cpusubtype_ALL:%{maltivec|mcpu=*|mpowerpc64:-force_cpusubtype_ALL}}\"\n \n #undef SUBTARGET_EXTRA_SPECS\n #define SUBTARGET_EXTRA_SPECS\t\t\t\\"}, {"sha": "a07a1f9421bd55108881b26a3a2478132e47e24a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 85, "deletions": 130, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66188a7ef3bd14a89b1c4a68ebf8c5eebef915b3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66188a7ef3bd14a89b1c4a68ebf8c5eebef915b3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=66188a7ef3bd14a89b1c4a68ebf8c5eebef915b3", "patch": "@@ -624,147 +624,79 @@ rs6000_override_options (const char *default_cpu)\n {\n   size_t i, j;\n   struct rs6000_cpu_select *ptr;\n+  int set_masks;\n \n-  /* Simplify the entries below by making a mask for any POWER\n-     variant and any PowerPC variant.  */\n+  /* Simplifications for entries below.  */\n \n-#define POWER_MASKS (MASK_POWER | MASK_POWER2 | MASK_MULTIPLE | MASK_STRING)\n-#define POWERPC_MASKS (MASK_POWERPC | MASK_PPC_GPOPT \\\n-\t\t       | MASK_PPC_GFXOPT | MASK_POWERPC64)\n-#define POWERPC_OPT_MASKS (MASK_PPC_GPOPT | MASK_PPC_GFXOPT)\n+  enum {\n+    POWERPC_BASE_MASK = MASK_POWERPC | MASK_NEW_MNEMONICS,\n+    POWERPC_7400_MASK = POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_ALTIVEC\n+  };\n \n+  /* This table occasionally claims that a processor does not support\n+     a particular feature even though it does, but the feature is slower\n+     than the alternative.  Thus, it shouldn't be relied on as a\n+     complete description of the processor's support.  \n+\n+     Please keep this list in order, and don't forget to update the\n+     documentation in invoke.texi when adding a new processor or\n+     flag.  */\n   static struct ptt\n     {\n       const char *const name;\t\t/* Canonical processor name.  */\n       const enum processor_type processor; /* Processor type enum value.  */\n       const int target_enable;\t/* Target flags to enable.  */\n-      const int target_disable;\t/* Target flags to disable.  */\n     } const processor_target_table[]\n-      = {{\"common\", PROCESSOR_COMMON, MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | POWERPC_MASKS},\n-\t {\"power\", PROCESSOR_POWER,\n-\t    MASK_POWER | MASK_MULTIPLE | MASK_STRING,\n-\t    MASK_POWER2 | POWERPC_MASKS | MASK_NEW_MNEMONICS},\n-\t {\"power2\", PROCESSOR_POWER,\n-\t    MASK_POWER | MASK_POWER2 | MASK_MULTIPLE | MASK_STRING,\n-\t    POWERPC_MASKS | MASK_NEW_MNEMONICS},\n-\t {\"power3\", PROCESSOR_PPC630,\n-\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS},\n-\t {\"power4\", PROCESSOR_POWER4,\n-            MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS | MASK_MFCRF,\n-            POWER_MASKS},\n-\t {\"powerpc\", PROCESSOR_POWERPC,\n-\t    MASK_POWERPC | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n-\t {\"powerpc64\", PROCESSOR_POWERPC64,\n-\t    MASK_POWERPC | MASK_POWERPC64 | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | POWERPC_OPT_MASKS},\n-\t {\"rios\", PROCESSOR_RIOS1,\n-\t    MASK_POWER | MASK_MULTIPLE | MASK_STRING,\n-\t    MASK_POWER2 | POWERPC_MASKS | MASK_NEW_MNEMONICS},\n-\t {\"rios1\", PROCESSOR_RIOS1,\n-\t    MASK_POWER | MASK_MULTIPLE | MASK_STRING,\n-\t    MASK_POWER2 | POWERPC_MASKS | MASK_NEW_MNEMONICS},\n-\t {\"rsc\", PROCESSOR_PPC601,\n-\t    MASK_POWER | MASK_MULTIPLE | MASK_STRING,\n-\t    MASK_POWER2 | POWERPC_MASKS | MASK_NEW_MNEMONICS},\n-\t {\"rsc1\", PROCESSOR_PPC601,\n-\t    MASK_POWER | MASK_MULTIPLE | MASK_STRING,\n-\t    MASK_POWER2 | POWERPC_MASKS | MASK_NEW_MNEMONICS},\n-\t {\"rios2\", PROCESSOR_RIOS2,\n-\t    MASK_POWER | MASK_MULTIPLE | MASK_STRING | MASK_POWER2,\n-\t    POWERPC_MASKS | MASK_NEW_MNEMONICS},\n-\t {\"rs64a\", PROCESSOR_RS64A,\n-\t    MASK_POWERPC | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | POWERPC_OPT_MASKS},\n-\t {\"401\", PROCESSOR_PPC403,\n-\t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n+      = {{\"401\", PROCESSOR_PPC403, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n \t {\"403\", PROCESSOR_PPC403,\n-\t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS | MASK_STRICT_ALIGN,\n-\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n-\t {\"405\", PROCESSOR_PPC405,\n-\t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n-\t {\"405fp\", PROCESSOR_PPC405,\n-\t    MASK_POWERPC | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n-\t {\"440\", PROCESSOR_PPC440,\n-\t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n-\t {\"440fp\", PROCESSOR_PPC440,\n-\t    MASK_POWERPC | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n-\t {\"505\", PROCESSOR_MPCCORE,\n-\t    MASK_POWERPC | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n+\t  POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_STRICT_ALIGN},\n+\t {\"405\", PROCESSOR_PPC405, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n+\t {\"405fp\", PROCESSOR_PPC405, POWERPC_BASE_MASK},\n+\t {\"440\", PROCESSOR_PPC440, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n+\t {\"440fp\", PROCESSOR_PPC440, POWERPC_BASE_MASK},\n+\t {\"505\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK},\n \t {\"601\", PROCESSOR_PPC601,\n-\t    MASK_POWER | MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_MULTIPLE | MASK_STRING,\n-\t    MASK_POWER2 | POWERPC_OPT_MASKS | MASK_POWERPC64},\n-\t {\"602\", PROCESSOR_PPC603,\n-\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n-\t {\"603\", PROCESSOR_PPC603,\n-\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n-\t {\"603e\", PROCESSOR_PPC603,\n-\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n-\t {\"ec603e\", PROCESSOR_PPC603,\n-\t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n-\t {\"604\", PROCESSOR_PPC604,\n-\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n-\t {\"604e\", PROCESSOR_PPC604e,\n-\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n-\t {\"620\", PROCESSOR_PPC620,\n-\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS},\n-\t {\"630\", PROCESSOR_PPC630,\n-\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS},\n-\t {\"740\", PROCESSOR_PPC750,\n- \t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n- \t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n-\t {\"750\", PROCESSOR_PPC750,\n- \t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n- \t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n-\t {\"G3\", PROCESSOR_PPC750,\n- \t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n- \t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n-\t {\"7400\", PROCESSOR_PPC7400,\n-            MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n-            POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n-\t {\"7450\", PROCESSOR_PPC7450,\n-            MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n-            POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n-\t {\"G4\", PROCESSOR_PPC7450,\n-            MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n-            POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n-\t {\"8540\", PROCESSOR_PPC8540,\n-\t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n-\t {\"801\", PROCESSOR_MPCCORE,\n-\t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n-\t {\"821\", PROCESSOR_MPCCORE,\n-\t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n-\t {\"823\", PROCESSOR_MPCCORE,\n-\t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n-\t {\"860\", PROCESSOR_MPCCORE,\n-\t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n-\t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n+\t  MASK_POWER | POWERPC_BASE_MASK | MASK_MULTIPLE | MASK_STRING},\n+\t {\"602\", PROCESSOR_PPC603, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n+\t {\"603\", PROCESSOR_PPC603, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n+\t {\"603e\", PROCESSOR_PPC603, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n+\t {\"604\", PROCESSOR_PPC604, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n+\t {\"604e\", PROCESSOR_PPC604e, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n+\t {\"620\", PROCESSOR_PPC620, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n+\t {\"630\", PROCESSOR_PPC630, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n+\t {\"740\", PROCESSOR_PPC750, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n+\t {\"7400\", PROCESSOR_PPC7400, POWERPC_7400_MASK},\n+\t {\"7450\", PROCESSOR_PPC7450, POWERPC_7400_MASK},\n+\t {\"750\", PROCESSOR_PPC750, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n+\t {\"801\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n+\t {\"821\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n+\t {\"823\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n+\t {\"8540\", PROCESSOR_PPC8540, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n+\t {\"860\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n \t {\"970\", PROCESSOR_POWER4,\n-\t    MASK_POWERPC | POWERPC_OPT_MASKS | MASK_NEW_MNEMONICS | MASK_MFCRF,\n-\t    POWER_MASKS},\n+\t  POWERPC_7400_MASK | MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64},\n+\t {\"common\", PROCESSOR_COMMON, MASK_NEW_MNEMONICS},\n+\t {\"ec603e\", PROCESSOR_PPC603, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n+\t {\"G3\", PROCESSOR_PPC750, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n+\t {\"G4\",  PROCESSOR_PPC7450, POWERPC_7400_MASK},\n \t {\"G5\", PROCESSOR_POWER4,\n-\t    MASK_POWERPC | POWERPC_OPT_MASKS | MASK_NEW_MNEMONICS | MASK_MFCRF,\n-\t    POWER_MASKS}};\n+\t  POWERPC_7400_MASK | MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64},\n+\t {\"power\", PROCESSOR_POWER, MASK_POWER | MASK_MULTIPLE | MASK_STRING},\n+\t {\"power2\", PROCESSOR_POWER,\n+\t  MASK_POWER | MASK_POWER2 | MASK_MULTIPLE | MASK_STRING},\n+\t {\"power3\", PROCESSOR_PPC630, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n+\t {\"power4\", PROCESSOR_POWER4, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n+\t {\"powerpc\", PROCESSOR_POWERPC, POWERPC_BASE_MASK},\n+\t {\"powerpc64\", PROCESSOR_POWERPC64,\n+\t  POWERPC_BASE_MASK | MASK_POWERPC64},\n+\t {\"rios\", PROCESSOR_RIOS1, MASK_POWER | MASK_MULTIPLE | MASK_STRING},\n+\t {\"rios1\", PROCESSOR_RIOS1, MASK_POWER | MASK_MULTIPLE | MASK_STRING},\n+\t {\"rios2\", PROCESSOR_RIOS2,\n+\t  MASK_POWER | MASK_POWER2 | MASK_MULTIPLE | MASK_STRING},\n+\t {\"rsc\", PROCESSOR_PPC601, MASK_POWER | MASK_MULTIPLE | MASK_STRING},\n+\t {\"rsc1\", PROCESSOR_PPC601, MASK_POWER | MASK_MULTIPLE | MASK_STRING},\n+\t {\"rs64a\", PROCESSOR_RS64A, POWERPC_BASE_MASK},\n+      };\n \n   const size_t ptt_size = ARRAY_SIZE (processor_target_table);\n \n@@ -773,6 +705,28 @@ rs6000_override_options (const char *default_cpu)\n   /* Save current -mstring/-mno-string status.  */\n   int string = TARGET_STRING;\n \n+  /* Some OSs don't support saving the high part of 64-bit registers on\n+     context switch.  Other OSs don't support saving Altivec registers.\n+     On those OSs, we don't touch the MASK_POWERPC64 or MASK_ALTIVEC\n+     settings; if the user wants either, the user must explicitly specify\n+     them and we won't interfere with the user's specification.  */\n+\n+  enum {\n+    POWER_MASKS = MASK_POWER | MASK_POWER2 | MASK_MULTIPLE | MASK_STRING,\n+    POWERPC_MASKS = (POWERPC_BASE_MASK | MASK_PPC_GPOPT \n+\t\t     | MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_ALTIVEC\n+\t\t     | MASK_MFCRF)\n+  };\n+ set_masks = POWER_MASKS | POWERPC_MASKS | MASK_SOFT_FLOAT;\n+#ifdef OS_MISSING_POWERPC64\n+  if (OS_MISSING_POWERPC64)\n+    set_masks &= ~MASK_POWERPC64;\n+#endif\n+#ifdef OS_MISSING_ALTIVEC\n+  if (OS_MISSING_ALTIVEC)\n+    set_masks &= ~MASK_ALTIVEC;\n+#endif\n+\n   /* Identify the processor type.  */\n   rs6000_select[0].string = default_cpu;\n   rs6000_cpu = TARGET_POWERPC64 ? PROCESSOR_DEFAULT64 : PROCESSOR_DEFAULT;\n@@ -790,8 +744,9 @@ rs6000_override_options (const char *default_cpu)\n \n \t\tif (ptr->set_arch_p)\n \t\t  {\n-\t\t    target_flags |= processor_target_table[j].target_enable;\n-\t\t    target_flags &= ~processor_target_table[j].target_disable;\n+\t\t    target_flags &= ~set_masks;\n+\t\t    target_flags |= (processor_target_table[j].target_enable\n+\t\t\t\t     & set_masks);\n \t\t  }\n \t\tbreak;\n \t      }"}, {"sha": "c2627960ccdb1e35462e6290f6c48c68b2237ba9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 26, "deletions": 48, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66188a7ef3bd14a89b1c4a68ebf8c5eebef915b3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66188a7ef3bd14a89b1c4a68ebf8c5eebef915b3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=66188a7ef3bd14a89b1c4a68ebf8c5eebef915b3", "patch": "@@ -7239,13 +7239,15 @@ should normally not specify either @option{-mnew-mnemonics} or\n @opindex mcpu\n Set architecture type, register usage, choice of mnemonics, and\n instruction scheduling parameters for machine type @var{cpu_type}.\n-Supported values for @var{cpu_type} are @samp{rios}, @samp{rios1},\n-@samp{rsc}, @samp{rios2}, @samp{rs64a}, @samp{601}, @samp{602},\n-@samp{603}, @samp{603e}, @samp{604}, @samp{604e}, @samp{620},\n-@samp{630}, @samp{740}, @samp{7400}, @samp{7450}, @samp{G4}, \n-@samp{750}, @samp{G3},  @samp{power}, @samp{power2}, @samp{powerpc}, \n-@samp{403}, @samp{505}, @samp{801}, @samp{821}, @samp{823}, @samp{860},\n-@samp{970}, @samp{G5} and @samp{common}.\n+Supported values for @var{cpu_type} are @samp{401}, @samp{403},\n+@samp{405}, @samp{405fp}, @samp{440}, @samp{440fp}, @samp{505},\n+@samp{601}, @samp{602}, @samp{603}, @samp{603e}, @samp{604},\n+@samp{604e}, @samp{620}, @samp{630}, @samp{740}, @samp{7400},\n+@samp{7450}, @samp{750}, @samp{801}, @samp{821}, @samp{823},\n+@samp{860}, @samp{970}, @samp{common}, @samp{ec603e}, @samp{G3},\n+@samp{G4}, @samp{G5}, @samp{power}, @samp{power2}, @samp{power3},\n+@samp{power4}, @samp{powerpc}, @samp{powerpc64}, @samp{rios},\n+@samp{rios1}, @samp{rios2}, @samp{rsc}, and @samp{rs64a}.\n \n @option{-mcpu=common} selects a completely generic processor.  Code\n generated under this option will run on any POWER or PowerPC processor.\n@@ -7263,47 +7265,23 @@ The other options specify a specific processor.  Code generated under\n those options will run best on that processor, and may not run at all on\n others.\n \n-The @option{-mcpu} options automatically enable or disable other\n-@option{-m} options as follows:\n-\n-@table @samp\n-@item common\n-@option{-mno-power}, @option{-mno-powerpc}\n-\n-@item power\n-@itemx power2\n-@itemx rios1\n-@itemx rios2\n-@itemx rsc\n-@option{-mpower}, @option{-mno-powerpc}, @option{-mno-new-mnemonics}\n-\n-@item powerpc\n-@itemx rs64a\n-@itemx 602\n-@itemx 603\n-@itemx 603e\n-@itemx 604\n-@itemx 620\n-@itemx 630\n-@itemx 740\n-@itemx 7400\n-@itemx 7450\n-@itemx G4\n-@itemx 750\n-@itemx G3\n-@itemx 505\n-@itemx 970\n-@itemx G5\n-@option{-mno-power}, @option{-mpowerpc}, @option{-mnew-mnemonics}\n-\n-@item 601\n-@option{-mpower}, @option{-mpowerpc}, @option{-mnew-mnemonics}\n-\n-@item 403\n-@itemx 821\n-@itemx 860\n-@option{-mno-power}, @option{-mpowerpc}, @option{-mnew-mnemonics}, @option{-msoft-float}\n-@end table\n+The @option{-mcpu} options automatically enable or disable the\n+following options: @option{-maltivec}, @option{-mhard-float},\n+@option{-mmfcrf}, @option{-mmultiple}, @option{-mnew-mnemonics},\n+@option{-mpower}, @option{-mpower2}, @option{-mpowerpc64},\n+@option{-mpowerpc-gpopt}, @option{-mpowerpc-gfxopt},\n+@option{-mstring}.  The particular options set for any particular CPU\n+will vary between compiler versions, depending on what setting seems\n+to produce optimal code for that CPU; it doesn't necessarily reflect\n+the actual hardware's capabilities.  If you wish to set an individual\n+option to a particular value, you may specify it after the\n+@option{-mcpu} option, like @samp{-mcpu=970 -mno-altivec}.\n+\n+On AIX, the @option{-maltivec} and @option{-mpowerpc64} options are\n+not enabled or disabled by the @option{-mcpu} option at present, since\n+AIX does not have full support for these options.  You may still\n+enable or disable them individually if you're sure it'll work in your\n+environment.\n \n @item -mtune=@var{cpu_type}\n @opindex mtune"}]}