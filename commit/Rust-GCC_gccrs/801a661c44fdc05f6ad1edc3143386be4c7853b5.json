{"sha": "801a661c44fdc05f6ad1edc3143386be4c7853b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAxYTY2MWM0NGZkYzA1ZjZhZDFlZGMzMTQzMzg2YmU0Yzc4NTNiNQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2013-11-12T06:42:05Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2013-11-12T06:42:05Z"}, "message": "tree-ssa-loop-ivopts.c (force_expr_to_var_cost): Refactor the code.\n\n\t* tree-ssa-loop-ivopts.c (force_expr_to_var_cost): Refactor the code.\n\tHandle type conversion.\n\nFrom-SVN: r204695", "tree": {"sha": "8121aef024fc425b95d1a2e94170968717ce1c23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8121aef024fc425b95d1a2e94170968717ce1c23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/801a661c44fdc05f6ad1edc3143386be4c7853b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/801a661c44fdc05f6ad1edc3143386be4c7853b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/801a661c44fdc05f6ad1edc3143386be4c7853b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/801a661c44fdc05f6ad1edc3143386be4c7853b5/comments", "author": null, "committer": null, "parents": [{"sha": "97a23b74754430a479c33536c03b99b23bd1b5bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97a23b74754430a479c33536c03b99b23bd1b5bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97a23b74754430a479c33536c03b99b23bd1b5bd"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "9fcafb66865b49ddb00809212394ddd6ed5564b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/801a661c44fdc05f6ad1edc3143386be4c7853b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/801a661c44fdc05f6ad1edc3143386be4c7853b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=801a661c44fdc05f6ad1edc3143386be4c7853b5", "patch": "@@ -1,3 +1,8 @@\n+2013-11-12  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-ssa-loop-ivopts.c (force_expr_to_var_cost): Refactor the code.\n+\tHandle type conversion.\n+\n 2013-11-11  Martin Liska  <marxin.liska@gmail.com>\n \t\t\t\t\t\tJan Hubicka  <jh@suse.cz>\n "}, {"sha": "d024bb4c3955afb74312554509ceda34a9669586", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/801a661c44fdc05f6ad1edc3143386be4c7853b5/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/801a661c44fdc05f6ad1edc3143386be4c7853b5/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=801a661c44fdc05f6ad1edc3143386be4c7853b5", "patch": "@@ -3608,37 +3608,32 @@ force_expr_to_var_cost (tree expr, bool speed)\n       op1 = TREE_OPERAND (expr, 1);\n       STRIP_NOPS (op0);\n       STRIP_NOPS (op1);\n-\n-      if (is_gimple_val (op0))\n-\tcost0 = no_cost;\n-      else\n-\tcost0 = force_expr_to_var_cost (op0, speed);\n-\n-      if (is_gimple_val (op1))\n-\tcost1 = no_cost;\n-      else\n-\tcost1 = force_expr_to_var_cost (op1, speed);\n-\n       break;\n \n+    CASE_CONVERT:\n     case NEGATE_EXPR:\n       op0 = TREE_OPERAND (expr, 0);\n       STRIP_NOPS (op0);\n       op1 = NULL_TREE;\n-\n-      if (is_gimple_val (op0))\n-\tcost0 = no_cost;\n-      else\n-\tcost0 = force_expr_to_var_cost (op0, speed);\n-\n-      cost1 = no_cost;\n       break;\n \n     default:\n       /* Just an arbitrary value, FIXME.  */\n       return new_cost (target_spill_cost[speed], 0);\n     }\n \n+  if (op0 == NULL_TREE\n+      || TREE_CODE (op0) == SSA_NAME || CONSTANT_CLASS_P (op0))\n+    cost0 = no_cost;\n+  else\n+    cost0 = force_expr_to_var_cost (op0, speed);\n+\n+  if (op1 == NULL_TREE\n+      || TREE_CODE (op1) == SSA_NAME || CONSTANT_CLASS_P (op1))\n+    cost1 = no_cost;\n+  else\n+    cost1 = force_expr_to_var_cost (op1, speed);\n+\n   mode = TYPE_MODE (TREE_TYPE (expr));\n   switch (TREE_CODE (expr))\n     {\n@@ -3664,6 +3659,16 @@ force_expr_to_var_cost (tree expr, bool speed)\n         }\n       break;\n \n+    CASE_CONVERT:\n+      {\n+\ttree inner_mode, outer_mode;\n+\touter_mode = TREE_TYPE (expr);\n+\tinner_mode = TREE_TYPE (op0);\n+\tcost = new_cost (convert_cost (TYPE_MODE (outer_mode),\n+\t\t\t\t       TYPE_MODE (inner_mode), speed), 0);\n+      }\n+      break;\n+\n     case MULT_EXPR:\n       if (cst_and_fits_in_hwi (op0))\n \tcost = new_cost (mult_by_coeff_cost (int_cst_value (op0),"}]}