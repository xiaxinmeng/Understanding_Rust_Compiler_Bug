{"sha": "fc943f55426024c7cb2e43d24dd90c2b2e103f70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM5NDNmNTU0MjYwMjRjN2NiMmU0M2QyNGRkOTBjMmIyZTEwM2Y3MA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-02-25T23:19:12Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-02-25T23:19:12Z"}, "message": "reload1.c (reload_cse_move2add): Use STRICT_LOW_PART if PLUS does not reduce the cost of SET.\n\n\t* reload1.c (reload_cse_move2add): Use STRICT_LOW_PART if PLUS\n\tdoes not reduce the cost of SET.\n\nFrom-SVN: r63426", "tree": {"sha": "07d38bb5655c8d1b255deb04c5e5f5490c2e071c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07d38bb5655c8d1b255deb04c5e5f5490c2e071c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc943f55426024c7cb2e43d24dd90c2b2e103f70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc943f55426024c7cb2e43d24dd90c2b2e103f70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc943f55426024c7cb2e43d24dd90c2b2e103f70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc943f55426024c7cb2e43d24dd90c2b2e103f70/comments", "author": null, "committer": null, "parents": [{"sha": "3eaa60442ff2727dab5f81465771461f91de8e8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eaa60442ff2727dab5f81465771461f91de8e8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eaa60442ff2727dab5f81465771461f91de8e8b"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "d985ed55658b4222026049d8e8f26a34864f2fc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc943f55426024c7cb2e43d24dd90c2b2e103f70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc943f55426024c7cb2e43d24dd90c2b2e103f70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc943f55426024c7cb2e43d24dd90c2b2e103f70", "patch": "@@ -1,3 +1,8 @@\n+2003-02-25  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* reload1.c (reload_cse_move2add): Use STRICT_LOW_PART if PLUS\n+\tdoes not reduce the cost of SET.\n+\n 2003-02-25  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \n \tPR target/9732"}, {"sha": "31ede252cfe94f97caee3184f59d23ee676c1b10", "filename": "gcc/reload1.c", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc943f55426024c7cb2e43d24dd90c2b2e103f70/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc943f55426024c7cb2e43d24dd90c2b2e103f70/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=fc943f55426024c7cb2e43d24dd90c2b2e103f70", "patch": "@@ -9159,7 +9159,12 @@ reload_cse_move2add (first)\n \t\t to\n \t\t\t\t  (set (REGX) (CONST_INT A))\n \t\t\t\t  ...\n-\t\t\t\t  (set (REGX) (plus (REGX) (CONST_INT B-A)))  */\n+\t\t\t\t  (set (REGX) (plus (REGX) (CONST_INT B-A)))\n+\t\t or\n+\t\t\t\t  (set (REGX) (CONST_INT A))\n+\t\t\t\t  ...\n+\t\t\t\t  (set (STRICT_LOW_PART (REGX)) (CONST_INT B))\n+\t      */\n \n \t      if (GET_CODE (src) == CONST_INT && reg_base_reg[regno] < 0)\n \t\t{\n@@ -9179,6 +9184,36 @@ reload_cse_move2add (first)\n \t\t\t   && have_add2_insn (reg, new_src))\n \t\t    success = validate_change (insn, &PATTERN (insn),\n \t\t\t\t\t       gen_add2_insn (reg, new_src), 0);\n+\t\t  else\n+\t\t    {\n+\t\t      enum machine_mode narrow_mode;\n+\t\t      for (narrow_mode = GET_CLASS_NARROWEST_MODE (MODE_INT);\n+\t\t\t   narrow_mode != GET_MODE (reg);\n+\t\t\t   narrow_mode = GET_MODE_WIDER_MODE (narrow_mode))\n+\t\t\t{\n+\t\t\t  if (have_insn_for (STRICT_LOW_PART, narrow_mode)\n+\t\t\t      && ((reg_offset[regno]\n+\t\t\t\t   & ~GET_MODE_MASK (narrow_mode))\n+\t\t\t\t  == (INTVAL (src)\n+\t\t\t\t      & ~GET_MODE_MASK (narrow_mode))))\n+\t\t\t    {\n+\t\t\t      rtx narrow_reg = gen_rtx_REG (narrow_mode,\n+\t\t\t\t\t\t\t    REGNO (reg));\n+\t\t\t      rtx narrow_src =\n+\t\t\t\tGEN_INT (trunc_int_for_mode (INTVAL (src),\n+\t\t\t\t\t\t\t     narrow_mode));\n+\t\t\t      rtx new_set =\n+\t\t\t\tgen_rtx_SET (VOIDmode,\n+\t\t\t\t\t     gen_rtx_STRICT_LOW_PART (VOIDmode,\n+\t\t\t\t\t\t\t\t      narrow_reg),\n+\t\t\t\t\t     narrow_src);\n+\t\t\t      success = validate_change (insn, &PATTERN (insn),\n+\t\t\t\t\t\t\t new_set, 0);\n+\t\t\t      if (success)\n+\t\t\t\tbreak;\n+\t\t\t    }\n+\t\t\t}\n+\t\t    }\n \t\t  reg_set_luid[regno] = move2add_luid;\n \t\t  reg_mode[regno] = GET_MODE (reg);\n \t\t  reg_offset[regno] = INTVAL (src);"}]}