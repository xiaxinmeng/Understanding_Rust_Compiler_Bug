{"sha": "6af84c851dbd4c53711ac9f5ed2147bdb29354f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFmODRjODUxZGJkNGM1MzcxMWFjOWY1ZWQyMTQ3YmRiMjkzNTRmNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-03-22T12:38:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-03-22T12:38:02Z"}, "message": "re PR middle-end/40106 (Weird interaction between optimize_insn_for_speed_p and -funsafe-math-optimizations)\n\n2010-03-22  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/40106\n\t* builtins.c (expand_builtin_pow): Expand pow (x, 1.5) as\n\tx * sqrt (x) even when optimizing for size if the target\n\thas native support for sqrt.\n\nFrom-SVN: r157623", "tree": {"sha": "9c9759baff25c5fb816bd446df19fe5b29aded78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c9759baff25c5fb816bd446df19fe5b29aded78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6af84c851dbd4c53711ac9f5ed2147bdb29354f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af84c851dbd4c53711ac9f5ed2147bdb29354f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6af84c851dbd4c53711ac9f5ed2147bdb29354f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af84c851dbd4c53711ac9f5ed2147bdb29354f6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2305a1e82e8bd6498fd2c01ffb71ba597e218d0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2305a1e82e8bd6498fd2c01ffb71ba597e218d0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2305a1e82e8bd6498fd2c01ffb71ba597e218d0a"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "077b6e6b9dc704c2190ecd2ec778aba984ff08da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af84c851dbd4c53711ac9f5ed2147bdb29354f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af84c851dbd4c53711ac9f5ed2147bdb29354f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6af84c851dbd4c53711ac9f5ed2147bdb29354f6", "patch": "@@ -1,3 +1,10 @@\n+2010-03-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/40106\n+\t* builtins.c (expand_builtin_pow): Expand pow (x, 1.5) as\n+\tx * sqrt (x) even when optimizing for size if the target\n+\thas native support for sqrt.\n+\n 2010-03-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* varasm.c (make_decl_rtl_for_debug): Also clear"}, {"sha": "7787f695ac82894ff4ec46401e44801f3fb5fe78", "filename": "gcc/builtins.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af84c851dbd4c53711ac9f5ed2147bdb29354f6/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af84c851dbd4c53711ac9f5ed2147bdb29354f6/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=6af84c851dbd4c53711ac9f5ed2147bdb29354f6", "patch": "@@ -2984,10 +2984,16 @@ expand_builtin_pow (tree exp, rtx target, rtx subtarget)\n \t  && ((flag_unsafe_math_optimizations\n \t       && optimize_insn_for_speed_p ()\n \t       && powi_cost (n/2) <= POWI_MAX_MULTS)\n-\t      /* Even the c==0.5 case cannot be done unconditionally\n+\t      /* Even the c == 0.5 case cannot be done unconditionally\n \t         when we need to preserve signed zeros, as\n \t\t pow (-0, 0.5) is +0, while sqrt(-0) is -0.  */\n-\t      || (!HONOR_SIGNED_ZEROS (mode) && n == 1)))\n+\t      || (!HONOR_SIGNED_ZEROS (mode) && n == 1)\n+\t      /* For c == 1.5 we can assume that x * sqrt (x) is always\n+\t         smaller than pow (x, 1.5) if sqrt will not be expanded\n+\t\t as a call.  */\n+\t      || (n == 3\n+\t\t  && (optab_handler (sqrt_optab, mode)->insn_code\n+\t\t      != CODE_FOR_nothing))))\n \t{\n \t  tree call_expr = build_call_nofold (fn, 1, narg0);\n \t  /* Use expand_expr in case the newly built call expression"}]}