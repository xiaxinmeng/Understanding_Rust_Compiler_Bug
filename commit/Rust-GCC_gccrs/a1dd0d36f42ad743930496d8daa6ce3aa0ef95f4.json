{"sha": "a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFkZDBkMzZmNDJhZDc0MzkzMDQ5NmQ4ZGFhNmNlM2FhMGVmOTVmNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-08-28T16:11:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-08-28T16:11:35Z"}, "message": "Add support for discarding unused virtual functions.\n\n\t* search.c (dfs_search, binfo_for_vtable, dfs_bfv_helper): New fns.\n\t* decl2.c (output_vtable_inherit): Call binfo_for_vtable.\n\t* lang-options.h: Add -fvtable-gc.\n\t* cp-tree.h: Add flag_vtable_gc.\n\t* decl2.c (output_vtable_inherit): New fn.\n\t(finish_vtable_vardecl): Call it.\n\t* class.c (build_vtable_entry_ref): New fn.\n\t(build_vtbl_ref): Call it.\n\nFrom-SVN: r22061", "tree": {"sha": "4a549f4b388b81ee6b665d86e73e6186e579b7b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a549f4b388b81ee6b665d86e73e6186e579b7b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4/comments", "author": null, "committer": null, "parents": [{"sha": "079e1098abe30722bb612e4b3bc673e969f0c72d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079e1098abe30722bb612e4b3bc673e969f0c72d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/079e1098abe30722bb612e4b3bc673e969f0c72d"}], "stats": {"total": 151, "additions": 150, "deletions": 1}, "files": [{"sha": "dcf090b32e2c6cc6725042a3907e18c42121b34e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4", "patch": "@@ -1,3 +1,18 @@\n+1998-08-28  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* search.c (dfs_search, binfo_for_vtable, dfs_bfv_helper): New fns.\n+\t* decl2.c (output_vtable_inherit): Call binfo_for_vtable.\n+\n+1998-08-28  Richard Henderson  <rth@cygnus.com>\n+\n+\tAdd support for discarding unused virtual functions.\n+\t* lang-options.h: Add -fvtable-gc.\n+\t* cp-tree.h: Add flag_vtable_gc.\n+\t* decl2.c (output_vtable_inherit): New fn.\n+\t(finish_vtable_vardecl): Call it.\n+\t* class.c (build_vtable_entry_ref): New fn.\n+\t(build_vtbl_ref): Call it.\n+\n 1998-08-28  Mark Mitchell  <mark@markmitchell.com>\n \n \t* cp-tree.h (build_enumerator): Take the enumeration type as a"}, {"sha": "dac59983d97ebbca44415a161d64d42724c3b47b", "filename": "gcc/cp/class.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4", "patch": "@@ -429,6 +429,36 @@ build_vtable_entry (delta, pfn)\n     }\n }\n \n+/* We want to give the assembler the vtable identifier as well as\n+   the offset to the function pointer.  So we generate\n+\n+   __asm__ __volatile__ (\".vtable_entry %0, %1\"\n+      : : \"s\"(&class_vtable),\n+          \"i\"((long)&vtbl[idx].pfn - (long)&vtbl[0])); */\n+\n+static void\n+build_vtable_entry_ref (basetype, vtbl, idx)\n+     tree basetype, vtbl, idx;\n+{\n+  static char asm_stmt[] = \".vtable_entry %0, %1\";\n+  tree s, i, i2;\n+\n+  s = build_unary_op (ADDR_EXPR, TYPE_BINFO_VTABLE (basetype), 0);\n+  s = build_tree_list (build_string (1, \"s\"), s);\n+\n+  i = build_array_ref (vtbl, idx);\n+  if (!flag_vtable_thunks)\n+    i = build_component_ref (i, pfn_identifier, vtable_entry_type, 0);\n+  i = build_c_cast (ptrdiff_type_node, build_unary_op (ADDR_EXPR, i, 0));\n+  i2 = build_array_ref (vtbl, build_int_2(0,0));\n+  i2 = build_c_cast (ptrdiff_type_node, build_unary_op (ADDR_EXPR, i2, 0));\n+  i = build_binary_op (MINUS_EXPR, i, i2, 0);\n+  i = build_tree_list (build_string (1, \"i\"), i);\n+\n+  expand_asm_operands (build_string (sizeof(asm_stmt)-1, asm_stmt),\n+\t\t       NULL_TREE, chainon (s, i), NULL_TREE, 1, NULL, 0);\n+}\n+\n /* Given an object INSTANCE, return an expression which yields the\n    virtual function vtable element corresponding to INDEX.  There are\n    many special cases for INSTANCE which we take care of here, mainly\n@@ -489,7 +519,12 @@ build_vtbl_ref (instance, idx)\n \tvtbl = build_indirect_ref (build_vfield_ref (instance, basetype),\n \t\t\t\t   NULL_PTR);\n     }\n+\n   assemble_external (vtbl);\n+\n+  if (flag_vtable_gc)\n+    build_vtable_entry_ref (basetype, vtbl, idx);\n+\n   aref = build_array_ref (vtbl, idx);\n \n   return aref;"}, {"sha": "010959d0b06b29717d8a9a3d58a628a6eca65718", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4", "patch": "@@ -476,6 +476,9 @@ extern int flag_do_squangling;\n /* Nonzero if we want to issue diagnostics that the standard says are not\n    required.  */\n extern int flag_optional_diags;\n+\n+/* Nonzero means output .vtable_{entry,inherit} for use in doing vtable gc.  */\n+extern int flag_vtable_gc;\n \f\n /* C++ language-specific tree codes.  */\n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) SYM,"}, {"sha": "3e86fe6c6387dd45506fc86b19ca675fb2ad1282", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4", "patch": "@@ -454,6 +454,9 @@ int flag_guiding_decls;\n    and class qualifiers.       */\n int flag_do_squangling;\n \n+/* Nonzero means output .vtable_{entry,inherit} for use in doing vtable gc.  */\n+\n+int flag_vtable_gc;\n \n /* Table of language-dependent -f options.\n    STRING is the option name.  VARIABLE is the address of the variable.\n@@ -496,6 +499,7 @@ static struct { char *string; int *variable; int on_value;} lang_f_options[] =\n   {\"init-priority\", &flag_init_priority, 1},\n   {\"huge-objects\", &flag_huge_objects, 1},\n   {\"conserve-space\", &flag_conserve_space, 1},\n+  {\"vtable-gc\", &flag_vtable_gc, 1},\n   {\"vtable-thunks\", &flag_vtable_thunks, 1},\n   {\"access-control\", &flag_access_control, 1},\n   {\"nonansi-builtins\", &flag_no_nonansi_builtin, 0},\n@@ -2672,7 +2676,35 @@ finish_prevtable_vardecl (prev, vars)\n   import_export_vtable (vars, ctype, 1);\n   return 1;\n }\n-    \n+\n+/* We need to describe to the assembler the relationship between\n+   a vtable and the vtable of the parent class.  It is not \n+   straightforward how to get this during multiple inheritance.  */\n+\n+static void\n+output_vtable_inherit (vars)\n+     tree vars;\n+{\n+  tree parent;\n+  rtx op[2];\n+\n+  op[0] = XEXP (DECL_RTL (vars), 0);\t  /* strip the mem ref  */\n+\n+  parent = binfo_for_vtable (vars);\n+\n+  if (parent == TYPE_BINFO (DECL_CONTEXT (vars)))\n+    op[1] = const0_rtx;\n+  else if (parent)\n+    {\n+      parent = TYPE_BINFO_VTABLE (BINFO_TYPE (parent));\n+      op[1] = XEXP (DECL_RTL (parent), 0);  /* strip the mem ref  */\n+    }\n+  else\n+    my_friendly_abort (980826);\n+\n+  output_asm_insn (\".vtable_inherit %0, %1\", op);\n+}\n+\n static int\n finish_vtable_vardecl (prev, vars)\n      tree prev, vars;\n@@ -2716,6 +2748,10 @@ finish_vtable_vardecl (prev, vars)\n \t}\n \n       rest_of_decl_compilation (vars, NULL_PTR, 1, 1);\n+\n+      if (flag_vtable_gc)\n+\toutput_vtable_inherit (vars);\n+\n       return 1;\n     }\n   else if (! TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (vars)))"}, {"sha": "97ec99b38e78b88a7b365d8ba95e1640ae3eebaa", "filename": "gcc/cp/lang-options.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4", "patch": "@@ -93,6 +93,8 @@ DEFINE_LANG_NAME (\"C++\")\n   { \"-ftemplate-depth-\", \"Specify maximum template instantiation depth\"},\n   { \"-fthis-is-variable\", \"Make 'this' not be type '* const'\"  },\n   { \"-fno-this-is-variable\", \"\" },\n+  { \"-fvtable-gc\", \"Discard unused virtual functions\" },\n+  { \"-fno-vtable-gc\", \"\" },\n   { \"-fvtable-thunks\", \"Implement vtables using thunks\" },\n   { \"-fno-vtable-thunks\", \"\" },\n   { \"-fweak\", \"Emit common-like symbols as weak symbols\" },"}, {"sha": "fa3109daac6c6d57e54f504b2cbaaf10a5775207", "filename": "gcc/cp/search.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=a1dd0d36f42ad743930496d8daa6ce3aa0ef95f4", "patch": "@@ -2147,6 +2147,41 @@ dfs_walk (binfo, fn, qfn)\n   fn (binfo);\n }\n \n+/* Like dfs_walk, but only walk until fn returns something, and return\n+   that.  We also use the real vbase binfos instead of the placeholders\n+   in the normal binfo hierarchy.  START is the most-derived type for this\n+   hierarchy, so that we can find the vbase binfos.  */\n+\n+static tree\n+dfs_search (binfo, fn, start)\n+     tree binfo, start;\n+     tree (*fn) PROTO((tree));\n+{\n+  tree binfos = BINFO_BASETYPES (binfo);\n+  int i, n_baselinks = binfos ? TREE_VEC_LENGTH (binfos) : 0;\n+  tree retval;\n+\n+  for (i = 0; i < n_baselinks; i++)\n+    {\n+      tree base_binfo = TREE_VEC_ELT (binfos, i);\n+\n+      if (TREE_CODE (BINFO_TYPE (base_binfo)) == TEMPLATE_TYPE_PARM\n+\t  || TREE_CODE (BINFO_TYPE (base_binfo)) == TEMPLATE_TEMPLATE_PARM)\n+\t/* Pass */;\n+      else\n+\t{\n+\t  if (TREE_VIA_VIRTUAL (base_binfo) && start)\n+\t    base_binfo = binfo_member (BINFO_TYPE (base_binfo),\n+\t\t\t\t       CLASSTYPE_VBASECLASSES (start));\n+\t  retval = dfs_search (base_binfo, fn, start);\n+\t  if (retval)\n+\t    return retval;\n+\t}\n+    }\n+\n+  return fn (binfo);\n+}\n+\n static int markedp (binfo) tree binfo;\n { return BINFO_MARKED (binfo); }\n static int unmarkedp (binfo) tree binfo;\n@@ -3370,3 +3405,26 @@ types_overlap_p (empty_type, next_type)\n   return found_overlap;\n }\n \n+/* Passed to dfs_search by binfo_for_vtable; determine if bvtable comes\n+   from BINFO.  */\n+\n+static tree bvtable;\n+static tree\n+dfs_bfv_helper (binfo)\n+     tree binfo;\n+{\n+  if (BINFO_VTABLE (binfo) == bvtable)\n+    return binfo;\n+  return NULL_TREE;\n+}\n+\n+/* Given a vtable VARS, determine which binfo it comes from.  */\n+\n+tree\n+binfo_for_vtable (vars)\n+     tree vars;\n+{\n+  bvtable = vars;\n+  return dfs_search (TYPE_BINFO (DECL_CONTEXT (vars)), dfs_bfv_helper,\n+\t\t     DECL_CONTEXT (vars));\n+}"}]}