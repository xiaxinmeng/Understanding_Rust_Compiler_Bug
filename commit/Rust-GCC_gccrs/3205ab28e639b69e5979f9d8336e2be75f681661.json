{"sha": "3205ab28e639b69e5979f9d8336e2be75f681661", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIwNWFiMjhlNjM5YjY5ZTU5NzlmOWQ4MzM2ZTJiZTc1ZjY4MTY2MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:09:17Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:09:17Z"}, "message": "[8/77] Simplify gen_trunc/extend_conv_libfunc\n\nReplace checks of:\n\n  GET_MODE_CLASS (fmode) != MODE_FLOAT && !DECIMAL_FLOAT_MODE_P (fmode)\n\nwith !is_a <scalar_float_mode> and use MODE_CLASS equality/inequality\ninstead of:\n\n  (GET_MODE_CLASS (tmode) == MODE_FLOAT && DECIMAL_FLOAT_MODE_P (fmode))\n  || (GET_MODE_CLASS (fmode) == MODE_FLOAT && DECIMAL_FLOAT_MODE_P (tmode))\n\nand:\n\n  (GET_MODE_CLASS (tmode) == MODE_FLOAT\n   && GET_MODE_CLASS (fmode) == MODE_FLOAT)\n  || (DECIMAL_FLOAT_MODE_P (fmode) && DECIMAL_FLOAT_MODE_P (tmode))\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* optabs-libfuncs.c (gen_trunc_conv_libfunc): Use is_a\n\t<scalar_float_mode>.  Simplify.\n\t(gen_extend_conv_libfunc): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251459", "tree": {"sha": "aae56457d6096b407258543fd2f0281f4cf34d9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aae56457d6096b407258543fd2f0281f4cf34d9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3205ab28e639b69e5979f9d8336e2be75f681661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3205ab28e639b69e5979f9d8336e2be75f681661", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3205ab28e639b69e5979f9d8336e2be75f681661", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3205ab28e639b69e5979f9d8336e2be75f681661/comments", "author": null, "committer": null, "parents": [{"sha": "e386a52f70c47499fff14a338fe17df691e886e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e386a52f70c47499fff14a338fe17df691e886e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e386a52f70c47499fff14a338fe17df691e886e2"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "736902bd82a89590c1ed26c19179f392229d3705", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3205ab28e639b69e5979f9d8336e2be75f681661/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3205ab28e639b69e5979f9d8336e2be75f681661/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3205ab28e639b69e5979f9d8336e2be75f681661", "patch": "@@ -1,3 +1,11 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* optabs-libfuncs.c (gen_trunc_conv_libfunc): Use is_a\n+\t<scalar_float_mode>.  Simplify.\n+\t(gen_extend_conv_libfunc): Likewise.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "13463102f618fd2c8d5efa78141b75af3a84b3de", "filename": "gcc/optabs-libfuncs.c", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3205ab28e639b69e5979f9d8336e2be75f681661/gcc%2Foptabs-libfuncs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3205ab28e639b69e5979f9d8336e2be75f681661/gcc%2Foptabs-libfuncs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-libfuncs.c?ref=3205ab28e639b69e5979f9d8336e2be75f681661", "patch": "@@ -579,24 +579,20 @@ gen_trunc_conv_libfunc (convert_optab tab,\n \t\t\tmachine_mode tmode,\n \t\t\tmachine_mode fmode)\n {\n-  if (GET_MODE_CLASS (tmode) != MODE_FLOAT && !DECIMAL_FLOAT_MODE_P (tmode))\n-    return;\n-  if (GET_MODE_CLASS (fmode) != MODE_FLOAT && !DECIMAL_FLOAT_MODE_P (fmode))\n-    return;\n-  if (tmode == fmode)\n+  scalar_float_mode float_tmode, float_fmode;\n+  if (!is_a <scalar_float_mode> (fmode, &float_fmode)\n+      || !is_a <scalar_float_mode> (tmode, &float_tmode)\n+      || float_tmode == float_fmode)\n     return;\n \n-  if ((GET_MODE_CLASS (tmode) == MODE_FLOAT && DECIMAL_FLOAT_MODE_P (fmode))\n-      || (GET_MODE_CLASS (fmode) == MODE_FLOAT && DECIMAL_FLOAT_MODE_P (tmode)))\n-     gen_interclass_conv_libfunc (tab, opname, tmode, fmode);\n+  if (GET_MODE_CLASS (float_tmode) != GET_MODE_CLASS (float_fmode))\n+    gen_interclass_conv_libfunc (tab, opname, float_tmode, float_fmode);\n \n-  if (GET_MODE_PRECISION (fmode) <= GET_MODE_PRECISION (tmode))\n+  if (GET_MODE_PRECISION (float_fmode) <= GET_MODE_PRECISION (float_tmode))\n     return;\n \n-  if ((GET_MODE_CLASS (tmode) == MODE_FLOAT\n-       && GET_MODE_CLASS (fmode) == MODE_FLOAT)\n-      || (DECIMAL_FLOAT_MODE_P (fmode) && DECIMAL_FLOAT_MODE_P (tmode)))\n-    gen_intraclass_conv_libfunc (tab, opname, tmode, fmode);\n+  if (GET_MODE_CLASS (float_tmode) == GET_MODE_CLASS (float_fmode))\n+    gen_intraclass_conv_libfunc (tab, opname, float_tmode, float_fmode);\n }\n \n /* Pick proper libcall for extend_optab.  We need to chose if we do\n@@ -608,23 +604,19 @@ gen_extend_conv_libfunc (convert_optab tab,\n \t\t\t machine_mode tmode,\n \t\t\t machine_mode fmode)\n {\n-  if (GET_MODE_CLASS (tmode) != MODE_FLOAT && !DECIMAL_FLOAT_MODE_P (tmode))\n-    return;\n-  if (GET_MODE_CLASS (fmode) != MODE_FLOAT && !DECIMAL_FLOAT_MODE_P (fmode))\n-    return;\n-  if (tmode == fmode)\n+  scalar_float_mode float_tmode, float_fmode;\n+  if (!is_a <scalar_float_mode> (fmode, &float_fmode)\n+      || !is_a <scalar_float_mode> (tmode, &float_tmode)\n+      || float_tmode == float_fmode)\n     return;\n \n-  if ((GET_MODE_CLASS (tmode) == MODE_FLOAT && DECIMAL_FLOAT_MODE_P (fmode))\n-      || (GET_MODE_CLASS (fmode) == MODE_FLOAT && DECIMAL_FLOAT_MODE_P (tmode)))\n-     gen_interclass_conv_libfunc (tab, opname, tmode, fmode);\n+  if (GET_MODE_CLASS (float_tmode) != GET_MODE_CLASS (float_fmode))\n+    gen_interclass_conv_libfunc (tab, opname, float_tmode, float_fmode);\n \n-  if (GET_MODE_PRECISION (fmode) > GET_MODE_PRECISION (tmode))\n+  if (GET_MODE_PRECISION (float_fmode) > GET_MODE_PRECISION (float_tmode))\n     return;\n \n-  if ((GET_MODE_CLASS (tmode) == MODE_FLOAT\n-       && GET_MODE_CLASS (fmode) == MODE_FLOAT)\n-      || (DECIMAL_FLOAT_MODE_P (fmode) && DECIMAL_FLOAT_MODE_P (tmode)))\n+  if (GET_MODE_CLASS (float_tmode) == GET_MODE_CLASS (float_fmode))\n     gen_intraclass_conv_libfunc (tab, opname, tmode, fmode);\n }\n "}]}