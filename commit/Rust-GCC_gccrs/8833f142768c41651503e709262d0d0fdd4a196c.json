{"sha": "8833f142768c41651503e709262d0d0fdd4a196c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgzM2YxNDI3NjhjNDE2NTE1MDNlNzA5MjYyZDBkMGZkZDRhMTk2Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-12-18T17:49:31Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-04-29T08:00:48Z"}, "message": "[Ada] Fix minor issue in Scan_Decimal_Digits\n\ngcc/ada/\n\n\t* libgnat/s-valuer.adb (Scan_Decimal_Digits): Set Extra to zero\n\twhen the precision limit is reached by means of trailing zeros\n\tand prevent it from being overwritten later.", "tree": {"sha": "94d3aee48a15ae618ee152a05d6c17ddba74d2c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94d3aee48a15ae618ee152a05d6c17ddba74d2c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8833f142768c41651503e709262d0d0fdd4a196c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8833f142768c41651503e709262d0d0fdd4a196c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8833f142768c41651503e709262d0d0fdd4a196c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8833f142768c41651503e709262d0d0fdd4a196c/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "210cae9d510bffe5f4103ea82afe07f9b31418db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/210cae9d510bffe5f4103ea82afe07f9b31418db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/210cae9d510bffe5f4103ea82afe07f9b31418db"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "937ef8e9db939aba17dee475a0e706597e7a967d", "filename": "gcc/ada/libgnat/s-valuer.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8833f142768c41651503e709262d0d0fdd4a196c/gcc%2Fada%2Flibgnat%2Fs-valuer.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8833f142768c41651503e709262d0d0fdd4a196c/gcc%2Fada%2Flibgnat%2Fs-valuer.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuer.adb?ref=8833f142768c41651503e709262d0d0fdd4a196c", "patch": "@@ -261,7 +261,11 @@ package body System.Value_R is\n                      Scale := Scale - 1;\n \n                   else\n+                     Extra := 0;\n                      Precision_Limit_Reached := True;\n+                     if Round and then J = Trailing_Zeros then\n+                        Round_Extra (Digit, Value, Scale, Extra, Base);\n+                     end if;\n                      exit;\n                   end if;\n                end loop;\n@@ -274,11 +278,16 @@ package body System.Value_R is\n \n                Temp := Value * Uns (Base) + Uns (Digit);\n \n+               --  Precision_Limit_Reached may have been set above\n+\n+               if Precision_Limit_Reached then\n+                  null;\n+\n                --  Check if Temp is larger than Precision_Limit, taking into\n                --  account that Temp may wrap around when Precision_Limit is\n                --  equal to the largest integer.\n \n-               if Value <= Umax\n+               elsif Value <= Umax\n                  or else (Value <= UmaxB\n                            and then ((Precision_Limit < Uns'Last\n                                        and then Temp <= Precision_Limit)"}]}