{"sha": "d45eae79db3e8c41ac1f307b267179498a636e0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ1ZWFlNzlkYjNlOGM0MWFjMWYzMDdiMjY3MTc5NDk4YTYzNmUwYg==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2012-07-25T18:08:06Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2012-07-25T18:08:06Z"}, "message": "re PR target/53633 (__attribute__((naked)) should disable -Wreturn-type)\n\n2012-07-25  Sandra Loosemore  <sandra@codesourcery.com>\n\t    Paul Brook  <paul@codesourcery.com>\n\n\tPR target/53633\n\n\tgcc/\n\t* target.def (warn_func_return): New hook.\n\t* doc/tm.texi.in (TARGET_WARN_FUNC_RETURN): New hook.\n\t* doc/tm.texi: Regenerate.\n\t* doc/sourcebuild.texi (Effective-Target Keywords): Document\n\tnaked_functions.\n\t* ipa-pure-const.c (warn_function_noreturn): Check\n\ttargetm.warn_func_return.\n\t* tree-cfg.c (execute_warn_function_return): Likewise.\n\t* config/spu/spu.c (spu_warn_func_return): New.\n\t(TARGET_WARN_FUNC_RETURN): Define.\n\t* config/rx/rx.c (rx_warn_func_return): New.\n\t(TARGET_WARN_FUNC_RETURN): Define.\n\t* config/avr/avr.c (avr_warn_func_return): New.\n\t(TARGET_WARN_FUNC_RETURN): Define.\n\t* config/arm/arm.c (arm_warn_func_return): New.\n\t(TARGET_WARN_FUNC_RETURN): Define.\n\t* config/mcore/mcore.c (mcore_warn_func_return): New.\n\t(TARGET_WARN_FUNC_RETURN): Define.\n\t(saved_warn_return_type, saved_warn_return_type_count): Remove.\n\t(mcore_reorg, mcore_handle_naked_attribute): Remove warn_return hack.\n\n\tgcc/cp/\n\t* decl.c (finish_function): Check targetm.warn_func_return.\n\n\tgcc/testsuite/\n\t* lib/target-suports.exp (check_effective_target_naked_functions):\n\tNew.\n\t* c-c++-common/pr53633.c: New test.\n\nCo-Authored-By: Paul Brook <paul@codesourcery.com>\n\nFrom-SVN: r189860", "tree": {"sha": "f42803034e2d99c0fb7f313962516557837e0a57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f42803034e2d99c0fb7f313962516557837e0a57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d45eae79db3e8c41ac1f307b267179498a636e0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d45eae79db3e8c41ac1f307b267179498a636e0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d45eae79db3e8c41ac1f307b267179498a636e0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d45eae79db3e8c41ac1f307b267179498a636e0b/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62732c3044c767f4efcff0cd398c9e65ba437bda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62732c3044c767f4efcff0cd398c9e65ba437bda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62732c3044c767f4efcff0cd398c9e65ba437bda"}], "stats": {"total": 192, "additions": 153, "deletions": 39}, "files": [{"sha": "a61a37c7fffce4d13b9e17392ff7f492a816eacd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d45eae79db3e8c41ac1f307b267179498a636e0b", "patch": "@@ -1,3 +1,29 @@\n+2012-07-25  Sandra Loosemore  <sandra@codesourcery.com>\n+\t    Paul Brook  <paul@codesourcery.com>\n+\n+\tPR target/53633\n+\n+\t* target.def (warn_func_return): New hook.\n+\t* doc/tm.texi.in (TARGET_WARN_FUNC_RETURN): New hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* doc/sourcebuild.texi (Effective-Target Keywords): Document\n+\tnaked_functions.\n+\t* ipa-pure-const.c (warn_function_noreturn): Check\n+\ttargetm.warn_func_return.\n+\t* tree-cfg.c (execute_warn_function_return): Likewise.\n+\t* config/spu/spu.c (spu_warn_func_return): New.\n+\t(TARGET_WARN_FUNC_RETURN): Define.\n+\t* config/rx/rx.c (rx_warn_func_return): New.\n+\t(TARGET_WARN_FUNC_RETURN): Define.\n+\t* config/avr/avr.c (avr_warn_func_return): New.\n+\t(TARGET_WARN_FUNC_RETURN): Define.\n+\t* config/arm/arm.c (arm_warn_func_return): New.\n+\t(TARGET_WARN_FUNC_RETURN): Define.\n+\t* config/mcore/mcore.c (mcore_warn_func_return): New.\n+\t(TARGET_WARN_FUNC_RETURN): Define.\n+\t(saved_warn_return_type, saved_warn_return_type_count): Remove.\n+\t(mcore_reorg, mcore_handle_naked_attribute): Remove warn_return hack.\n+\n 2012-07-25  Siddhesh Poyarekar  <siddhesh@redhat.com>\n \n \t* final.c [ASSEMBLER_DIALECT](do_assembler_dialects): New"}, {"sha": "1f3f9b3171c8790c941a2ca3be141e68a5ef2abc", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d45eae79db3e8c41ac1f307b267179498a636e0b", "patch": "@@ -236,6 +236,7 @@ static int arm_issue_rate (void);\n static void arm_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n static bool arm_output_addr_const_extra (FILE *, rtx);\n static bool arm_allocate_stack_slots_for_args (void);\n+static bool arm_warn_func_return (tree);\n static const char *arm_invalid_parameter_type (const_tree t);\n static const char *arm_invalid_return_type (const_tree t);\n static tree arm_promoted_type (const_tree t);\n@@ -458,6 +459,9 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_TRAMPOLINE_ADJUST_ADDRESS\n #define TARGET_TRAMPOLINE_ADJUST_ADDRESS arm_trampoline_adjust_address\n \n+#undef TARGET_WARN_FUNC_RETURN\n+#define TARGET_WARN_FUNC_RETURN arm_warn_func_return\n+\n #undef TARGET_DEFAULT_SHORT_ENUMS\n #define TARGET_DEFAULT_SHORT_ENUMS arm_default_short_enums\n \n@@ -2168,6 +2172,14 @@ arm_allocate_stack_slots_for_args (void)\n   return !IS_NAKED (arm_current_func_type ());\n }\n \n+static bool\n+arm_warn_func_return (tree decl)\n+{\n+  /* Naked functions are implemented entirely in assembly, including the\n+     return sequence, so suppress warnings about this.  */\n+  return lookup_attribute (\"naked\", DECL_ATTRIBUTES (decl)) == NULL_TREE;\n+}\n+\n \f\n /* Output assembler code for a block containing the constant parts\n    of a trampoline, leaving space for the variable parts."}, {"sha": "e0d2e82e3ac90a7e46f68f2aadec587e38e96943", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=d45eae79db3e8c41ac1f307b267179498a636e0b", "patch": "@@ -686,6 +686,17 @@ avr_can_eliminate (const int from, const int to)\n               && !frame_pointer_needed));\n }\n \n+\n+/* Implement TARGET_WARN_FUNC_RETURN.  */\n+\n+static bool\n+avr_warn_func_return (tree decl)\n+{\n+  /* Naked functions are implemented entirely in assembly, including the\n+     return sequence, so suppress warnings about this.  */\n+  return !avr_naked_function_p (decl);\n+}\n+\n /* Compute offset between arg_pointer and frame_pointer.  */\n \n int\n@@ -10790,6 +10801,9 @@ avr_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *arg,\n #undef  TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE avr_can_eliminate\n \n+#undef TARGET_WARN_FUNC_RETURN\n+#define TARGET_WARN_FUNC_RETURN avr_warn_func_return\n+\n #undef  TARGET_CLASS_LIKELY_SPILLED_P\n #define TARGET_CLASS_LIKELY_SPILLED_P avr_class_likely_spilled_p\n "}, {"sha": "c592964e96b1b70b6969ff08cc0e9e9b77cdec11", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 13, "deletions": 37, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=d45eae79db3e8c41ac1f307b267179498a636e0b", "patch": "@@ -138,6 +138,7 @@ static unsigned int mcore_function_arg_boundary (enum machine_mode,\n \t\t\t\t\t\t const_tree);\n static void       mcore_asm_trampoline_template (FILE *);\n static void       mcore_trampoline_init\t\t(rtx, tree, rtx);\n+static bool       mcore_warn_func_return        (tree);\n static void       mcore_option_override\t\t(void);\n static bool       mcore_legitimate_constant_p   (enum machine_mode, rtx);\n \f\n@@ -228,6 +229,9 @@ static const struct attribute_spec mcore_attribute_table[] =\n #undef TARGET_LEGITIMATE_CONSTANT_P\n #define TARGET_LEGITIMATE_CONSTANT_P mcore_legitimate_constant_p\n \n+#undef TARGET_WARN_FUNC_RETURN\n+#define TARGET_WARN_FUNC_RETURN mcore_warn_func_return\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Adjust the stack and return the number of bytes taken to do it.  */\n@@ -2580,9 +2584,6 @@ conditionalize_optimization (void)\n     continue;\n }\n \n-static int saved_warn_return_type = -1;\n-static int saved_warn_return_type_count = 0;\n-\n /* This is to handle loads from the constant pool.  */\n \n static void\n@@ -2591,21 +2592,6 @@ mcore_reorg (void)\n   /* Reset this variable.  */\n   current_function_anonymous_args = 0;\n   \n-  /* Restore the warn_return_type if it has been altered.  */\n-  if (saved_warn_return_type != -1)\n-    {\n-      /* Only restore the value if we have reached another function.\n-\t The test of warn_return_type occurs in final_function () in\n-\t c-decl.c a long time after the code for the function is generated,\n-\t so we need a counter to tell us when we have finished parsing that\n-\t function and can restore the flag.  */\n-      if (--saved_warn_return_type_count == 0)\n-\t{\n-\t  warn_return_type = saved_warn_return_type;\n-\t  saved_warn_return_type = -1;\n-\t}\n-    }\n-  \n   if (optimize == 0)\n     return;\n   \n@@ -3056,25 +3042,7 @@ static tree\n mcore_handle_naked_attribute (tree * node, tree name, tree args ATTRIBUTE_UNUSED,\n \t\t\t      int flags ATTRIBUTE_UNUSED, bool * no_add_attrs)\n {\n-  if (TREE_CODE (*node) == FUNCTION_DECL)\n-    {\n-      /* PR14310 - don't complain about lack of return statement\n-\t in naked functions.  The solution here is a gross hack\n-\t but this is the only way to solve the problem without\n-\t adding a new feature to GCC.  I did try submitting a patch\n-\t that would add such a new feature, but it was (rightfully)\n-\t rejected on the grounds that it was creeping featurism,\n-\t so hence this code.  */\n-      if (warn_return_type)\n-\t{\n-\t  saved_warn_return_type = warn_return_type;\n-\t  warn_return_type = 0;\n-\t  saved_warn_return_type_count = 2;\n-\t}\n-      else if (saved_warn_return_type_count)\n-\tsaved_warn_return_type_count = 2;\n-    }\n-  else\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n       warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n \t       name);\n@@ -3126,6 +3094,14 @@ mcore_naked_function_p (void)\n   return lookup_attribute (\"naked\", DECL_ATTRIBUTES (current_function_decl)) != NULL_TREE;\n }\n \n+static bool\n+mcore_warn_func_return (tree decl)\n+{\n+  /* Naked functions are implemented entirely in assembly, including the\n+     return sequence, so suppress warnings about this.  */\n+  return lookup_attribute (\"naked\", DECL_ATTRIBUTES (decl)) == NULL_TREE;\n+}\n+\n #ifdef OBJECT_FORMAT_ELF\n static void\n mcore_asm_named_section (const char *name, "}, {"sha": "e2e61b2c883dcaadd2ab560822126ee0d949a691", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=d45eae79db3e8c41ac1f307b267179498a636e0b", "patch": "@@ -2629,6 +2629,14 @@ rx_func_attr_inlinable (const_tree decl)\n     &&   ! is_naked_func (decl);  \n }\n \n+static bool\n+rx_warn_func_return (tree decl)\n+{\n+  /* Naked functions are implemented entirely in assembly, including the\n+     return sequence, so suppress warnings about this.  */\n+  return !is_naked_func (decl);\n+}\n+\n /* Return nonzero if it is ok to make a tail-call to DECL,\n    a function_decl or NULL if this is an indirect call, using EXP  */\n \n@@ -3282,6 +3290,9 @@ rx_adjust_insn_length (rtx insn, int current_length)\n #undef  TARGET_LEGITIMIZE_ADDRESS\n #define TARGET_LEGITIMIZE_ADDRESS\t\trx_legitimize_address\n \n+#undef TARGET_WARN_FUNC_RETURN\n+#define TARGET_WARN_FUNC_RETURN rx_warn_func_return\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-rx.h\""}, {"sha": "2d5405d99f60c87fe8379e5b03e4279c927c964a", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=d45eae79db3e8c41ac1f307b267179498a636e0b", "patch": "@@ -5881,6 +5881,14 @@ spu_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n   emit_insn (gen_sync ());\n }\n \n+static bool\n+spu_warn_func_return (tree decl)\n+{\n+  /* Naked functions are implemented entirely in assembly, including the\n+     return sequence, so suppress warnings about this.  */\n+  return !spu_naked_function_p (decl);\n+}\n+\n void\n spu_expand_sign_extend (rtx ops[])\n {\n@@ -7272,6 +7280,9 @@ static const struct attribute_spec spu_attribute_table[] =\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT spu_trampoline_init\n \n+#undef TARGET_WARN_FUNC_RETURN\n+#define TARGET_WARN_FUNC_RETURN spu_warn_func_return\n+\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE spu_option_override\n "}, {"sha": "2d87bdc3e8219c6ce2c01997b43b1ed918ab203b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d45eae79db3e8c41ac1f307b267179498a636e0b", "patch": "@@ -1,3 +1,10 @@\n+2012-07-25  Sandra Loosemore  <sandra@codesourcery.com>\n+\t    Paul Brook  <paul@codesourcery.com>\n+\n+\tPR target/53633\n+\n+\t* decl.c (finish_function): Check targetm.warn_func_return.\n+\n 2012-07-25  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/54086"}, {"sha": "8e95a0612fad1c717ec929948f02b44d3331f499", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d45eae79db3e8c41ac1f307b267179498a636e0b", "patch": "@@ -13575,7 +13575,8 @@ finish_function (int flags)\n       && !TREE_NO_WARNING (fndecl)\n       /* Structor return values (if any) are set by the compiler.  */\n       && !DECL_CONSTRUCTOR_P (fndecl)\n-      && !DECL_DESTRUCTOR_P (fndecl))\n+      && !DECL_DESTRUCTOR_P (fndecl)\n+      && targetm.warn_func_return (fndecl))\n     {\n       warning (OPT_Wreturn_type,\n  \t       \"no return statement in function returning non-void\");"}, {"sha": "43afa00c1629ed786480cf9aeb849d78994a7cbb", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=d45eae79db3e8c41ac1f307b267179498a636e0b", "patch": "@@ -1787,6 +1787,9 @@ Target keeps null pointer checks, either due to the use of\n @item lto\n Compiler has been configured to support link-time optimization (LTO).\n \n+@item naked_functions\n+Target supports the @code{naked} function attribute.\n+\n @item named_sections\n Target supports named sections.\n "}, {"sha": "b419a7158b7b088f5c23dad17041a66c0778703e", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=d45eae79db3e8c41ac1f307b267179498a636e0b", "patch": "@@ -4977,6 +4977,10 @@ FRAME_POINTER_REGNUM, ARG_POINTER_REGNUM, and the PIC_OFFSET_TABLE_REGNUM.\n This hook should add additional registers that are computed by the prologue to the hard regset for shrink-wrapping optimization purposes.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_WARN_FUNC_RETURN (tree)\n+True if a function's return statements should be checked for matching the function's return type.  This includes checking for falling off the end of a non-void function.  Return false if no such check should be made.\n+@end deftypefn\n+\n @node Stack Smashing Protection\n @subsection Stack smashing protection\n @cindex stack smashing protection"}, {"sha": "3f2ef1e310aa897a85e71d55a2297b3d19b2956f", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=d45eae79db3e8c41ac1f307b267179498a636e0b", "patch": "@@ -4918,6 +4918,8 @@ FRAME_POINTER_REGNUM, ARG_POINTER_REGNUM, and the PIC_OFFSET_TABLE_REGNUM.\n \n @hook TARGET_SET_UP_BY_PROLOGUE\n \n+@hook TARGET_WARN_FUNC_RETURN\n+\n @node Stack Smashing Protection\n @subsection Stack smashing protection\n @cindex stack smashing protection"}, {"sha": "980e4284a0d1eacc8373df0c0c5d4da5932f3412", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=d45eae79db3e8c41ac1f307b267179498a636e0b", "patch": "@@ -186,7 +186,8 @@ void\n warn_function_noreturn (tree decl)\n {\n   static struct pointer_set_t *warned_about;\n-  if (!lang_hooks.missing_noreturn_ok_p (decl))\n+  if (!lang_hooks.missing_noreturn_ok_p (decl)\n+      && targetm.warn_func_return (decl))\n     warned_about \n       = suggest_attribute (OPT_Wsuggest_attribute_noreturn, decl,\n \t\t\t   true, warned_about, \"noreturn\");"}, {"sha": "bdbf68e7c530dbbb255e4bd43be27462105a5b40", "filename": "gcc/target.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=d45eae79db3e8c41ac1f307b267179498a636e0b", "patch": "@@ -2715,6 +2715,15 @@ DEFHOOK\n  void, (struct hard_reg_set_container *),\n  NULL)\n \n+/* For targets that have attributes that can affect whether a\n+   function's return statements need checking.  For instance a 'naked'\n+   function attribute.  */\n+DEFHOOK\n+(warn_func_return,\n+ \"True if a function's return statements should be checked for matching the function's return type.  This includes checking for falling off the end of a non-void function.  Return false if no such check should be made.\",\n+ bool, (tree),\n+ hook_bool_tree_true)\n+\n /* Determine the type of unwind info to emit for debugging.  */\n DEFHOOK\n (debug_unwind_info,"}, {"sha": "c7496540aa4ab8c988dda73b7186838d3ccf0480", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d45eae79db3e8c41ac1f307b267179498a636e0b", "patch": "@@ -1,3 +1,12 @@\n+2012-07-25  Sandra Loosemore  <sandra@codesourcery.com>\n+\t    Paul Brook  <paul@codesourcery.com>\n+\n+\tPR target/53633\n+\n+\t* lib/target-suports.exp (check_effective_target_naked_functions):\n+\tNew.\n+\t* c-c++-common/pr53633.c: New test.\n+\n 2012-07-25  Siddhesh Poyarekar  <siddhesh@redhat.com>\n \n \t* gcc.target/i386/asm-dialect-1.c: New test case."}, {"sha": "db7e1ceb82bb77110b924128217ca3b9eea588e3", "filename": "gcc/testsuite/c-c++-common/pr53633.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr53633.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr53633.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr53633.c?ref=d45eae79db3e8c41ac1f307b267179498a636e0b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target naked_functions } */\n+/* { dg-options \"-O2 -Wall\" } */\n+/* Check that we do not get warnings about missing return statements\n+   or bogus looking noreturn functions.  */\n+int __attribute__((naked))\n+foo(void)\n+{\n+  __asm__ (\"\");\n+}\n+\n+int __attribute__((naked,noreturn))\n+bar(void)\n+{\n+  __asm__ (\"\");\n+}"}, {"sha": "6640ef24bfac70679c3575c0a2cd5bcd7b3c9f5e", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=d45eae79db3e8c41ac1f307b267179498a636e0b", "patch": "@@ -984,6 +984,14 @@ proc check_named_sections_available { } {\n     }]\n }\n \n+# Return true if the \"naked\" function attribute is supported on this target.\n+\n+proc check_effective_target_naked_functions { } {\n+    return [check_no_compiler_messages naked_functions assembly {\n+\tvoid f() __attribute__((naked));\n+    }]\n+}\n+\n # Return 1 if the target supports Fortran real kinds larger than real(8),\n # 0 otherwise.\n #"}, {"sha": "2615de3bd35d7d867423353e8f9715983e433bb4", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d45eae79db3e8c41ac1f307b267179498a636e0b/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=d45eae79db3e8c41ac1f307b267179498a636e0b", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"value-prof.h\"\n #include \"pointer-set.h\"\n #include \"tree-inline.h\"\n+#include \"target.h\"\n \n /* This file contains functions for building the Control Flow Graph (CFG)\n    for a function tree.  */\n@@ -7614,6 +7615,9 @@ execute_warn_function_return (void)\n   edge e;\n   edge_iterator ei;\n \n+  if (!targetm.warn_func_return (cfun->decl))\n+    return 0;\n+\n   /* If we have a path to EXIT, then we do return.  */\n   if (TREE_THIS_VOLATILE (cfun->decl)\n       && EDGE_COUNT (EXIT_BLOCK_PTR->preds) > 0)"}]}