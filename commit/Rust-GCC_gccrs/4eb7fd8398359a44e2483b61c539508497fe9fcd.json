{"sha": "4eb7fd8398359a44e2483b61c539508497fe9fcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGViN2ZkODM5ODM1OWE0NGUyNDgzYjYxYzUzOTUwODQ5N2ZlOWZjZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2006-11-07T23:01:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-11-07T23:01:23Z"}, "message": "c-common.c (c_common_attributes): Add gnu_inline attribyte.\n\n\t* c-common.c (c_common_attributes): Add gnu_inline attribyte.\n\t(handle_gnu_inline_attribute): New function.\n\t* c-decl.c (diagnose_mismatched_decls): Handle gnu_inline attribute.\n\t(merge_decls, start_decl, start_function): Likewise.\n\t* doc/extend.texi: Document gnu_inline attribute.\n\n\t* gcc.dg/inline-17.c: New test.\n\nFrom-SVN: r118567", "tree": {"sha": "ef34d7e6f5808177003e88ab3eb698579a33ddb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef34d7e6f5808177003e88ab3eb698579a33ddb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4eb7fd8398359a44e2483b61c539508497fe9fcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eb7fd8398359a44e2483b61c539508497fe9fcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eb7fd8398359a44e2483b61c539508497fe9fcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eb7fd8398359a44e2483b61c539508497fe9fcd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7f02c2d27203d8e3581bfdc19f86f863ebf0d80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7f02c2d27203d8e3581bfdc19f86f863ebf0d80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7f02c2d27203d8e3581bfdc19f86f863ebf0d80"}], "stats": {"total": 161, "additions": 142, "deletions": 19}, "files": [{"sha": "38eed0db8bdf9deb970bb1251515cdded17e6bfc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eb7fd8398359a44e2483b61c539508497fe9fcd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eb7fd8398359a44e2483b61c539508497fe9fcd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4eb7fd8398359a44e2483b61c539508497fe9fcd", "patch": "@@ -1,3 +1,11 @@\n+2006-11-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-common.c (c_common_attributes): Add gnu_inline attribyte.\n+\t(handle_gnu_inline_attribute): New function.\n+\t* c-decl.c (diagnose_mismatched_decls): Handle gnu_inline attribute.\n+\t(merge_decls, start_decl, start_function): Likewise.\n+\t* doc/extend.texi: Document gnu_inline attribute.\n+\n 2006-11-07  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR other/25028"}, {"sha": "0603da65bc1ba6b082201fade3dd754599b9019b", "filename": "gcc/c-common.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eb7fd8398359a44e2483b61c539508497fe9fcd/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eb7fd8398359a44e2483b61c539508497fe9fcd/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4eb7fd8398359a44e2483b61c539508497fe9fcd", "patch": "@@ -510,6 +510,8 @@ static tree handle_noreturn_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noinline_attribute (tree *, tree, tree, int, bool *);\n static tree handle_always_inline_attribute (tree *, tree, tree, int,\n \t\t\t\t\t    bool *);\n+static tree handle_gnu_inline_attribute (tree *, tree, tree, int,\n+\t\t\t\t\t bool *);\n static tree handle_flatten_attribute (tree *, tree, tree, int, bool *);\n static tree handle_used_attribute (tree *, tree, tree, int, bool *);\n static tree handle_unused_attribute (tree *, tree, tree, int, bool *);\n@@ -578,6 +580,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_noinline_attribute },\n   { \"always_inline\",          0, 0, true,  false, false,\n \t\t\t      handle_always_inline_attribute },\n+  { \"gnu_inline\",             0, 0, true,  false, false,\n+\t\t\t      handle_gnu_inline_attribute },\n   { \"flatten\",                0, 0, true,  false, false,\n \t\t\t      handle_flatten_attribute },\n   { \"used\",                   0, 0, true,  false, false,\n@@ -4268,6 +4272,29 @@ handle_always_inline_attribute (tree *node, tree name,\n   return NULL_TREE;\n }\n \n+/* Handle a \"gnu_inline\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_gnu_inline_attribute (tree *node, tree name,\n+\t\t\t     tree ARG_UNUSED (args),\n+\t\t\t     int ARG_UNUSED (flags),\n+\t\t\t     bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) == FUNCTION_DECL && DECL_DECLARED_INLINE_P (*node))\n+    {\n+      /* Do nothing else, just set the attribute.  We'll get at\n+\t it later with lookup_attribute.  */\n+    }\n+  else\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"flatten\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "80f1a1a621f61da66373951f5b797b73d2b5b022", "filename": "gcc/c-decl.c", "status": "modified", "additions": 70, "deletions": 16, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eb7fd8398359a44e2483b61c539508497fe9fcd/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eb7fd8398359a44e2483b61c539508497fe9fcd/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=4eb7fd8398359a44e2483b61c539508497fe9fcd", "patch": "@@ -63,7 +63,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"pointer-set.h\"\n \n /* Set this to 1 if you want the standard ISO C99 semantics of 'inline'\n-   when you specify -std=c99 or -std=gnuc99, and to 0 if you want\n+   when you specify -std=c99 or -std=gnu99, and to 0 if you want\n    behaviour compatible with the nonstandard semantics implemented by\n    GCC 2.95 through 4.2.  */\n #define WANT_C99_INLINE_SEMANTICS 1\n@@ -1339,7 +1339,16 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t\t unit.  */\n \t      if ((!DECL_EXTERN_INLINE (olddecl)\n \t\t   || DECL_EXTERN_INLINE (newdecl)\n-\t\t   || flag_isoc99)\n+#if WANT_C99_INLINE_SEMANTICS\n+\t\t   || (flag_isoc99\n+\t\t       && (!DECL_DECLARED_INLINE_P (olddecl)\n+\t\t\t   || !lookup_attribute (\"gnu_inline\",\n+\t\t\t\t\t\t DECL_ATTRIBUTES (olddecl)))\n+\t\t       && (!DECL_DECLARED_INLINE_P (newdecl)\n+\t\t\t   || !lookup_attribute (\"gnu_inline\",\n+\t\t\t\t\t\t DECL_ATTRIBUTES (newdecl))))\n+#endif /* WANT_C99_INLINE_SEMANTICS */\n+\t\t  )\n \t\t  && same_translation_unit_p (newdecl, olddecl))\n \t\t{\n \t\t  error (\"redefinition of %q+D\", newdecl);\n@@ -1399,6 +1408,23 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t      warned = true;\n \t    }\n \t}\n+\n+      /* Make sure gnu_inline attribute is either not present, or\n+\t present on all inline decls.  */\n+      if (DECL_DECLARED_INLINE_P (olddecl)\n+\t  && DECL_DECLARED_INLINE_P (newdecl))\n+\t{\n+\t  bool newa = lookup_attribute (\"gnu_inline\",\n+\t\t\t\t\tDECL_ATTRIBUTES (newdecl)) != NULL;\n+\t  bool olda = lookup_attribute (\"gnu_inline\",\n+\t\t\t\t\tDECL_ATTRIBUTES (olddecl)) != NULL;\n+\t  if (newa != olda)\n+\t    {\n+\t      error (\"%<gnu_inline%> attribute present on %q+D\",\n+\t\t     newa ? newdecl : olddecl);\n+\t      error (\"%Jbut not here\", newa ? olddecl : newdecl);\n+\t    }\n+\t}\n     }\n   else if (TREE_CODE (newdecl) == VAR_DECL)\n     {\n@@ -1531,9 +1557,9 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t mode and can get it right?\n \t Definitely don't complain if the decls are in different translation\n \t units.\n-         C99 permits this, so don't warn in that case.  (The function\n-         may not be inlined everywhere in function-at-a-time mode, but\n-         we still shouldn't warn.)  */\n+\t C99 permits this, so don't warn in that case.  (The function\n+\t may not be inlined everywhere in function-at-a-time mode, but\n+\t we still shouldn't warn.)  */\n       if (DECL_DECLARED_INLINE_P (newdecl) && !DECL_DECLARED_INLINE_P (olddecl)\n \t  && same_translation_unit_p (olddecl, newdecl)\n \t  && ! flag_isoc99)\n@@ -1767,17 +1793,19 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n     }\n \n #if WANT_C99_INLINE_SEMANTICS\n-   /* In c99, 'extern' declaration before (or after) 'inline' means this\n-      function is not DECL_EXTERNAL.  */\n-   if (TREE_CODE (newdecl) == FUNCTION_DECL\n-       && (DECL_DECLARED_INLINE_P (newdecl) \n-\t   || DECL_DECLARED_INLINE_P (olddecl))\n-       && (!DECL_DECLARED_INLINE_P (newdecl) \n-\t   || !DECL_DECLARED_INLINE_P (olddecl)\n-\t   || !DECL_EXTERNAL (olddecl))\n-       && DECL_EXTERNAL (newdecl)\n-       && flag_isoc99)\n-     DECL_EXTERNAL (newdecl) = 0;\n+  /* In c99, 'extern' declaration before (or after) 'inline' means this\n+     function is not DECL_EXTERNAL, unless 'gnu_inline' attribute\n+     is present.  */\n+  if (TREE_CODE (newdecl) == FUNCTION_DECL\n+      && flag_isoc99\n+      && (DECL_DECLARED_INLINE_P (newdecl)\n+\t  || DECL_DECLARED_INLINE_P (olddecl))\n+      && (!DECL_DECLARED_INLINE_P (newdecl)\n+\t  || !DECL_DECLARED_INLINE_P (olddecl)\n+\t  || !DECL_EXTERNAL (olddecl))\n+      && DECL_EXTERNAL (newdecl)\n+      && !lookup_attribute (\"gnu_inline\", DECL_ATTRIBUTES (newdecl)))\n+    DECL_EXTERNAL (newdecl) = 0;\n #endif /* WANT_C99_INLINE_SEMANTICS */\n \n   if (DECL_EXTERNAL (newdecl))\n@@ -3292,6 +3320,20 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n   /* Set attributes here so if duplicate decl, will have proper attributes.  */\n   decl_attributes (&decl, attributes, 0);\n \n+#if WANT_C99_INLINE_SEMANTICS\n+  /* Handle gnu_inline attribute.  */\n+  if (declspecs->inline_p\n+      && flag_isoc99\n+      && TREE_CODE (decl) == FUNCTION_DECL\n+      && lookup_attribute (\"gnu_inline\", DECL_ATTRIBUTES (decl)))\n+    {\n+      if (declspecs->storage_class == csc_auto && current_scope != file_scope)\n+\t;\n+      else if (declspecs->storage_class != csc_static)\n+\tDECL_EXTERNAL (decl) = !DECL_EXTERNAL (decl);\n+    }\n+#endif /* WANT_C99_INLINE_SEMANTICS */\n+\n   if (TREE_CODE (decl) == FUNCTION_DECL\n       && targetm.calls.promote_prototypes (TREE_TYPE (decl)))\n     {\n@@ -6053,6 +6095,18 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n     warning (OPT_Wattributes, \"inline function %q+D given attribute noinline\",\n \t     decl1);\n \n+#if WANT_C99_INLINE_SEMANTICS\n+  /* Handle gnu_inline attribute.  */\n+  if (declspecs->inline_p\n+      && flag_isoc99\n+      && TREE_CODE (decl1) == FUNCTION_DECL\n+      && lookup_attribute (\"gnu_inline\", DECL_ATTRIBUTES (decl1)))\n+    {\n+      if (declspecs->storage_class != csc_static)\n+\tDECL_EXTERNAL (decl1) = !DECL_EXTERNAL (decl1);\n+    }\n+#endif /* WANT_C99_INLINE_SEMANTICS */\n+\n   announce_function (decl1);\n \n   if (!COMPLETE_OR_VOID_TYPE_P (TREE_TYPE (TREE_TYPE (decl1))))"}, {"sha": "1579b94a9708518b239cb92043d547e3b47eda58", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eb7fd8398359a44e2483b61c539508497fe9fcd/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eb7fd8398359a44e2483b61c539508497fe9fcd/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=4eb7fd8398359a44e2483b61c539508497fe9fcd", "patch": "@@ -1581,8 +1581,8 @@ attributes are currently defined for functions on all targets:\n @code{format}, @code{format_arg}, @code{no_instrument_function},\n @code{section}, @code{constructor}, @code{destructor}, @code{used},\n @code{unused}, @code{deprecated}, @code{weak}, @code{malloc},\n-@code{alias}, @code{warn_unused_result}, @code{nonnull}\n-and @code{externally_visible}.  Several other\n+@code{alias}, @code{warn_unused_result}, @code{nonnull},\n+@code{gnu_inline} and @code{externally_visible}.  Several other\n attributes are defined for functions on particular target systems.  Other\n attributes, including @code{section} are supported for variables declarations\n (@pxref{Variable Attributes}) and for types (@pxref{Type Attributes}).\n@@ -1620,6 +1620,11 @@ Generally, functions are not inlined unless optimization is specified.\n For functions declared inline, this attribute inlines the function even\n if no optimization level was specified.\n \n+@item gnu_inline\n+@cindex @code{gnu_inline} function attribute\n+This attribute on an inline declaration results in the old GNU C89\n+inline behavior even in the ISO C99 mode.\n+\n @cindex @code{flatten} function attribute\n @item flatten\n Generally, inlining into a function is limited.  For a function marked with\n@@ -3802,7 +3807,8 @@ also direct GCC to try to integrate all ``simple enough'' functions\n into their callers with the option @option{-finline-functions}.\n \n GCC implements three different semantics of declaring a function\n-inline.  One is available with @option{-std=gnu89}, another when\n+inline.  One is available with @option{-std=gnu89} or when @code{gnu_inline}\n+attribute is present on all inline declarations, another when\n @option{-std=c99} or @option{-std=gnu99}, and the third is used when\n compiling C++.\n "}, {"sha": "29dfb3f80c3729e271c20f1084430685a3086139", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eb7fd8398359a44e2483b61c539508497fe9fcd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eb7fd8398359a44e2483b61c539508497fe9fcd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4eb7fd8398359a44e2483b61c539508497fe9fcd", "patch": "@@ -1,3 +1,7 @@\n+2006-11-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/inline-17.c: New test.\n+\n 2006-11-07  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR other/25028"}, {"sha": "235ad8b001e725f3a9eb9884100996beead02bc3", "filename": "gcc/testsuite/gcc.dg/inline-17.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eb7fd8398359a44e2483b61c539508497fe9fcd/gcc%2Ftestsuite%2Fgcc.dg%2Finline-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eb7fd8398359a44e2483b61c539508497fe9fcd/gcc%2Ftestsuite%2Fgcc.dg%2Finline-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-17.c?ref=4eb7fd8398359a44e2483b61c539508497fe9fcd", "patch": "@@ -0,0 +1,24 @@\n+/* Test __attribute__((gnu_inline)).  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+/* { dg-final { scan-assembler \"func1\" } } */\n+/* { dg-final { scan-assembler-not \"func2\" } } */\n+/* { dg-final { scan-assembler \"func3\" } } */\n+/* { dg-final { scan-assembler \"func4\" } } */\n+\n+#if __STDC_VERSION__ >= 199901L\n+# define inline __attribute__((gnu_inline)) inline\n+#endif\n+\n+extern inline int func1 (void) { return 0; }\n+inline int func1 (void) { return 1; }\n+\n+extern int func2 (void);\n+extern inline int func2 (void) { return 2; }\n+\n+inline int func3 (void);\n+inline int func3 (void) { return 3; }\n+\n+extern int func4 (void);\n+extern inline int func4 (void) { return 4; }\n+int func4 (void) { return 5; }"}]}