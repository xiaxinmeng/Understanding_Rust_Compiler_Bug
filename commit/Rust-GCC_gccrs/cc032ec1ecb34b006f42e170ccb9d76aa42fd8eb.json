{"sha": "cc032ec1ecb34b006f42e170ccb9d76aa42fd8eb", "node_id": "C_kwDOANBUbNoAKGNjMDMyZWMxZWNiMzRiMDA2ZjQyZTE3MGNjYjlkNzZhYTQyZmQ4ZWI", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2021-12-18T11:16:43Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2021-12-18T11:16:44Z"}, "message": "tree-optimization/103759: Use sizetype everywhere for object sizes\n\nSince all computations in tree-object-size are now done in sizetype and\nnot HOST_WIDE_INT, comparisons with HOST_WIDE_INT based unknown and\ninitval would be incorrect.  Instead, use the sizetype trees directly to\ngenerate and evaluate initval and unknown size values.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/103759\n\t* tree-object-size.c (unknown, initval): Remove functions.\n\t(size_unknown, size_initval, size_unknown_p): Operate directly\n\ton trees.\n\nSigned-off-by: Siddhesh Poyarekar <siddhesh@gotplt.org>", "tree": {"sha": "5c16486cec75a1a5d41f84ceb699eb1d4510c4ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c16486cec75a1a5d41f84ceb699eb1d4510c4ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc032ec1ecb34b006f42e170ccb9d76aa42fd8eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc032ec1ecb34b006f42e170ccb9d76aa42fd8eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc032ec1ecb34b006f42e170ccb9d76aa42fd8eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc032ec1ecb34b006f42e170ccb9d76aa42fd8eb/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21423a1dfa079d4cd218f69d2fab9fe65a69fedb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21423a1dfa079d4cd218f69d2fab9fe65a69fedb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21423a1dfa079d4cd218f69d2fab9fe65a69fedb"}], "stats": {"total": 27, "additions": 6, "deletions": 21}, "files": [{"sha": "ee9ea1bfbfd9bcff9adec550fc9f92fd877e23f6", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc032ec1ecb34b006f42e170ccb9d76aa42fd8eb/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc032ec1ecb34b006f42e170ccb9d76aa42fd8eb/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=cc032ec1ecb34b006f42e170ccb9d76aa42fd8eb", "patch": "@@ -83,46 +83,31 @@ static bitmap computed[OST_END];\n /* Maximum value of offset we consider to be addition.  */\n static unsigned HOST_WIDE_INT offset_limit;\n \n-/* Initial value of object sizes; zero for maximum and SIZE_MAX for minimum\n-   object size.  */\n-\n-static inline unsigned HOST_WIDE_INT\n-initval (int object_size_type)\n-{\n-  return (object_size_type & OST_MINIMUM) ? HOST_WIDE_INT_M1U : 0;\n-}\n-\n-/* Unknown object size value; it's the opposite of initval.  */\n-\n-static inline unsigned HOST_WIDE_INT\n-unknown (int object_size_type)\n-{\n-  return ~initval (object_size_type);\n-}\n-\n /* Return true if VAL is represents an unknown size for OBJECT_SIZE_TYPE.  */\n \n static inline bool\n size_unknown_p (tree val, int object_size_type)\n {\n-  return (tree_fits_uhwi_p (val)\n-\t  && tree_to_uhwi (val) == unknown (object_size_type));\n+  return ((object_size_type & OST_MINIMUM)\n+\t  ? integer_zerop (val) : integer_all_onesp (val));\n }\n \n /* Return a tree with initial value for OBJECT_SIZE_TYPE.  */\n \n static inline tree\n size_initval (int object_size_type)\n {\n-  return size_int (initval (object_size_type));\n+  return ((object_size_type & OST_MINIMUM)\n+\t  ? TYPE_MAX_VALUE (sizetype) : size_zero_node);\n }\n \n /* Return a tree with unknown value for OBJECT_SIZE_TYPE.  */\n \n static inline tree\n size_unknown (int object_size_type)\n {\n-  return size_int (unknown (object_size_type));\n+  return ((object_size_type & OST_MINIMUM)\n+\t  ? size_zero_node : TYPE_MAX_VALUE (sizetype));\n }\n \n /* Grow object_sizes[OBJECT_SIZE_TYPE] to num_ssa_names.  */"}]}