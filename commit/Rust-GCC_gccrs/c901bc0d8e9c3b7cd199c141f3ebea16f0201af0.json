{"sha": "c901bc0d8e9c3b7cd199c141f3ebea16f0201af0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkwMWJjMGQ4ZTljM2I3Y2QxOTljMTQxZjNlYmVhMTZmMDIwMWFmMA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-11-11T16:21:52Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-11-11T16:21:52Z"}, "message": "re PR target/78310 (ICE: insn does not satisfy its constraints: {*bmi2_rorxdi3_1} with -mbmi2)\n\n\tPR target/78310\n\t* config/i386/i386.md (rotate to rotatex splitter): Avoid overflow\n\twhen calculating operand 2.\n\t(rotate to rotatex zext splitter): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/78310\n\t* gcc.target/i386/pr78310.c: New test.\n\nFrom-SVN: r242076", "tree": {"sha": "2d737faa3cdf675174f69e2533cf75314c5f7748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d737faa3cdf675174f69e2533cf75314c5f7748"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c901bc0d8e9c3b7cd199c141f3ebea16f0201af0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c901bc0d8e9c3b7cd199c141f3ebea16f0201af0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c901bc0d8e9c3b7cd199c141f3ebea16f0201af0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c901bc0d8e9c3b7cd199c141f3ebea16f0201af0/comments", "author": null, "committer": null, "parents": [{"sha": "606f928d3805614e8d2307961198706ed9958a76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/606f928d3805614e8d2307961198706ed9958a76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/606f928d3805614e8d2307961198706ed9958a76"}], "stats": {"total": 57, "additions": 41, "deletions": 16}, "files": [{"sha": "7dd5931b83910fb9d380a538a3271204795a07a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c901bc0d8e9c3b7cd199c141f3ebea16f0201af0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c901bc0d8e9c3b7cd199c141f3ebea16f0201af0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c901bc0d8e9c3b7cd199c141f3ebea16f0201af0", "patch": "@@ -1,3 +1,10 @@\n+2016-11-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/78310\n+\t* config/i386/i386.md (rotate to rotatex splitter): Avoid overflow\n+\twhen calculating operand 2.\n+\t(rotate to rotatex zext splitter): Ditto.\n+\n 2016-11-11  Jeff Law  <law@redhat.com>\n \n \t* gimple-ssa-isolate-paths.c (is_divmod_with_given_divisor): New\n@@ -43,10 +50,8 @@\n \t(rs6000_secondary_reload_simple_move): Likewise.\n \t(rs6000_preferred_reload_class): Don't force integer constants to\n \tbe loaded into vector registers that we can easily make into\n-\tmemory (or being created in the GPRs and moved over with direct\n-\tmove).\n-\t* config/rs6000/vsx.md (UNSPEC_P9_MEMORY): Delete, no longer\n-\tused.\n+\tmemory (or being created in the GPRs and moved over with direct move).\n+\t* config/rs6000/vsx.md (UNSPEC_P9_MEMORY): Delete, no longer used.\n \t(vsx_extract_<mode>): Rework V4SImode, V8HImode, and V16QImode\n \tvector extraction on ISA 3.0 when the scalar integer can be\n \tallocated in vector registers.  Generate the VEC_SELECT directy,\n@@ -70,8 +75,7 @@\n \t(zero_extendhi<mode>): Likewise.\n \t(extendqi<mode>): Likewise.\n \t(extendhi<mode>2): Likewise.\n-\t(HImode splitter for load/sign extend in vector register):\n-\tLikewise.\n+\t(HImode splitter for load/sign extend in vector register): Likewise.\n \t(float<QHI:mode><FP_ISA3:mode>2): Eliminate old method of\n \toptimizing floating point conversions to/from small data types and\n \trewrite it to support QImode/HImode being allowed in vector\n@@ -98,8 +102,8 @@\n 2016-11-10  Pat Haugen  <pthaugen@us.ibm.com>\n \n \tPR rtl-optimization/78241\n-\t* loop-unroll.c (unroll_loop_runtime_iterations): Don't adjust 'niter', but\n-\temit initial peel copy if niter expr is not reliable.\n+\t* loop-unroll.c (unroll_loop_runtime_iterations): Don't adjust 'niter',\n+\tbut emit initial peel copy if niter expr is not reliable.\n \n 2016-11-10  Segher Boessenkool  <segher@kernel.crashing.org>\n \n@@ -180,8 +184,7 @@\n \n 2016-11-10  Siddhesh Poyarekar  <siddhesh.poyarekar@linaro.org>\n \n-\t* config/aarch64/aarch64-cores.def (qdf24xx): Update part\n-\tnumber.\n+\t* config/aarch64/aarch64-cores.def (qdf24xx): Update part number.\n \t(falkor): New core.\n \t* config/aarch64/aarch64-tune.md: Regenerated.\n \t* config/arm/arm-cores.def (falkor): New core."}, {"sha": "b46d6d1ee98b5cf967d17cf62746a49969872d45", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c901bc0d8e9c3b7cd199c141f3ebea16f0201af0/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c901bc0d8e9c3b7cd199c141f3ebea16f0201af0/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c901bc0d8e9c3b7cd199c141f3ebea16f0201af0", "patch": "@@ -10908,8 +10908,9 @@\n   [(set (match_dup 0)\n \t(rotatert:SWI48 (match_dup 1) (match_dup 2)))]\n {\n-  operands[2]\n-    = GEN_INT (GET_MODE_BITSIZE (<MODE>mode) - INTVAL (operands[2]));\n+  int bitsize = GET_MODE_BITSIZE (<MODE>mode);\n+\n+  operands[2] = GEN_INT ((bitsize - INTVAL (operands[2])) % bitsize);\n })\n \n (define_split\n@@ -10975,8 +10976,9 @@\n   [(set (match_dup 0)\n \t(zero_extend:DI (rotatert:SI (match_dup 1) (match_dup 2))))]\n {\n-  operands[2]\n-    = GEN_INT (GET_MODE_BITSIZE (SImode) - INTVAL (operands[2]));\n+  int bitsize = GET_MODE_BITSIZE (SImode);\n+\n+  operands[2] = GEN_INT ((bitsize - INTVAL (operands[2])) % bitsize);\n })\n \n (define_split"}, {"sha": "16a2597a5a08751cdefd3448e38da3890f566126", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c901bc0d8e9c3b7cd199c141f3ebea16f0201af0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c901bc0d8e9c3b7cd199c141f3ebea16f0201af0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c901bc0d8e9c3b7cd199c141f3ebea16f0201af0", "patch": "@@ -1,3 +1,8 @@\n+2016-11-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/78310\n+\t* gcc.target/i386/pr78310.c: New test.\n+\n 2016-11-11  Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/tree-ssa/isolate-6.c: New test.\n@@ -2892,8 +2897,8 @@\n \tarm_fp16_alternative_ok.\n \t* g++.dg/ext/arm-fp16/arm-fp16-ops-4.C: Likewise.\n \t* gcc.dg/torture/arm-fp16-int-convert-alt.c: Likewise.\n-\t* gcc/testsuite/gcc.dg/torture/arm-fp16-ops-3.c: Likewise.\n-\t* gcc/testsuite/gcc.dg/torture/arm-fp16-ops-4.c: Likewise.\n+\t* gcc.dg/torture/arm-fp16-ops-3.c: Likewise.\n+\t* gcc.dg/torture/arm-fp16-ops-4.c: Likewise.\n \t* gcc.target/arm/fp16-compile-alt-1.c: Likewise.\n \t* gcc.target/arm/fp16-compile-alt-10.c: Likewise.\n \t* gcc.target/arm/fp16-compile-alt-11.c: Likewise."}, {"sha": "dfeae4c827cf576ad83d714a17da8c1fe5e623ab", "filename": "gcc/testsuite/gcc.target/i386/pr78310.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c901bc0d8e9c3b7cd199c141f3ebea16f0201af0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78310.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c901bc0d8e9c3b7cd199c141f3ebea16f0201af0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78310.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78310.c?ref=c901bc0d8e9c3b7cd199c141f3ebea16f0201af0", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O -mbmi2\" } */\n+\n+unsigned long long a;\n+int b;\n+\n+int\n+fn1(int p1)\n+{\n+  p1 &= 1;\n+  p1 &= (short)~p1;\n+  b = a;\n+  a = a << p1 | a >> (64 - p1);\n+  return p1 + 1 + a;\n+}"}]}