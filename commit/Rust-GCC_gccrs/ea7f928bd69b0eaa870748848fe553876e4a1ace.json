{"sha": "ea7f928bd69b0eaa870748848fe553876e4a1ace", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE3ZjkyOGJkNjliMGVhYTg3MDc0ODg0OGZlNTUzODc2ZTRhMWFjZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T16:57:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T16:57:01Z"}, "message": "[multiple changes]\n\n2010-06-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* cstand.adb: Add tree nodes for pragma Pack on string types.\n\n2010-06-22  Javier Miranda  <miranda@adacore.com>\n\n\t* einfo.ads, einfo.adb (Last_Formal): New synthesized attribute.\n\t* exp_util.adb (Find_Prim_Op): Use new attribute to locate the last\n\tformal of a primitive.\n\t* exp_disp.adb (Is_Predefined_Dispatching_Operation,\n\t Is_Predefined_Dispatching_Alias): Use new attribute to locate the last\n\tformal of a primitive.\n\t* exp_cg.adb (Is_Predefined_Dispatching_Operation): Use new attribute\n\tto obtain the last formal of a primitive.\n\n2010-06-22  Geert Bosch  <bosch@adacore.com>\n\n\t* sysdep.c, init.c, adaint.c, cstreams.c: Remove conditional code\n\tdepending on __EMX__ or MSDOS being defined.\n\t* i-cstrea.ads, gnat_rm.texi: Remove mentions of OS/2, DOS and Xenix.\n\t* a-excpol-abort.adb: Update comment indicating users of the file.\n\t* xref_lib.adb, sfn_scan.adb: Remove mention of OS/2, replace NT by\n\tWindows.\n\t* env.c: Remove empty conditional for MSDOS.\n\t* s-stchop.adb, g-dirope.ads, s-fileio.adb, osint.ads: Remove mention\n\tof OS/2 in comment.\n\nFrom-SVN: r161205", "tree": {"sha": "884a1bbbf8c2279c1865ee83e881dcb0d56ebb3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/884a1bbbf8c2279c1865ee83e881dcb0d56ebb3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea7f928bd69b0eaa870748848fe553876e4a1ace", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea7f928bd69b0eaa870748848fe553876e4a1ace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea7f928bd69b0eaa870748848fe553876e4a1ace", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea7f928bd69b0eaa870748848fe553876e4a1ace/comments", "author": null, "committer": null, "parents": [{"sha": "bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb10b89181d4ad48e5dd82cf9d7c845c6206c08b"}], "stats": {"total": 393, "additions": 166, "deletions": 227}, "files": [{"sha": "6920d957f26a1e8c578926ebd61837c3a7eddf61", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -1,3 +1,30 @@\n+2010-06-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* cstand.adb: Add tree nodes for pragma Pack on string types.\n+\n+2010-06-22  Javier Miranda  <miranda@adacore.com>\n+\n+\t* einfo.ads, einfo.adb (Last_Formal): New synthesized attribute.\n+\t* exp_util.adb (Find_Prim_Op): Use new attribute to locate the last\n+\tformal of a primitive.\n+\t* exp_disp.adb (Is_Predefined_Dispatching_Operation,\n+\t Is_Predefined_Dispatching_Alias): Use new attribute to locate the last\n+\tformal of a primitive.\n+\t* exp_cg.adb (Is_Predefined_Dispatching_Operation): Use new attribute\n+\tto obtain the last formal of a primitive.\n+\n+2010-06-22  Geert Bosch  <bosch@adacore.com>\n+\n+\t* sysdep.c, init.c, adaint.c, cstreams.c: Remove conditional code\n+\tdepending on __EMX__ or MSDOS being defined.\n+\t* i-cstrea.ads, gnat_rm.texi: Remove mentions of OS/2, DOS and Xenix.\n+\t* a-excpol-abort.adb: Update comment indicating users of the file.\n+\t* xref_lib.adb, sfn_scan.adb: Remove mention of OS/2, replace NT by\n+\tWindows.\n+\t* env.c: Remove empty conditional for MSDOS.\n+\t* s-stchop.adb, g-dirope.ads, s-fileio.adb, osint.ads: Remove mention\n+\tof OS/2 in comment.\n+\n 2010-06-22  Robert Dewar  <dewar@adacore.com>\n \n \t* s-rannum.adb: Minor reformatting."}, {"sha": "94acae6a10bd022e5dc5c934a1aee43081c1fffc", "filename": "gcc/ada/a-excpol-abort.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fa-excpol-abort.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fa-excpol-abort.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-excpol-abort.adb?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -7,7 +7,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,7 +35,7 @@\n --  that activates periodic polling. Then in the body of the polling routine\n --  we test for asynchronous abort.\n \n---  NT, OS/2, HPUX/DCE and SCO currently use this file\n+--  Windows, HPUX 10 and VMS currently use this file\n \n pragma Warnings (Off);\n --  Allow withing of non-Preelaborated units in Ada 2005 mode where this"}, {"sha": "9b814e945d0977bf8a6dbebe39f846d2a2c08222", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 20, "deletions": 149, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -132,7 +132,7 @@ UINT CurrentCodePage;\n #include <sys/wait.h>\n #endif\n \n-#if defined (__EMX__) || defined (MSDOS) || defined (_WIN32)\n+#if defined (_WIN32)\n #elif defined (VMS)\n \n /* Header files and definitions for __gnat_set_file_time_name.  */\n@@ -183,7 +183,7 @@ struct vstring\n #include <utime.h>\n #endif\n \n-#if defined (__EMX__) || defined (MSDOS) || defined (_WIN32)\n+#if defined (_WIN32)\n #include <process.h>\n #endif\n \n@@ -205,14 +205,6 @@ struct vstring\n    external file mapped to LF in internal file), but in Unix-like systems,\n    no text translation is required, so these flags have no effect.  */\n \n-#if defined (__EMX__)\n-#include <os2.h>\n-#endif\n-\n-#if defined (MSDOS)\n-#include <dos.h>\n-#endif\n-\n #ifndef O_BINARY\n #define O_BINARY 0\n #endif\n@@ -275,9 +267,7 @@ char __gnat_path_separator = PATH_SEPARATOR;\n        as well. This is only a temporary work-around for 3.11b.  */\n \n #ifndef GNAT_LIBRARY_TEMPLATE\n-#if defined (__EMX__)\n-#define GNAT_LIBRARY_TEMPLATE \"*.a\"\n-#elif defined (VMS)\n+#if defined (VMS)\n #define GNAT_LIBRARY_TEMPLATE \"*.olb\"\n #else\n #define GNAT_LIBRARY_TEMPLATE \"lib*.a\"\n@@ -294,10 +284,7 @@ const int __gnat_vmsp = 1;\n const int __gnat_vmsp = 0;\n #endif\n \n-#ifdef __EMX__\n-#define GNAT_MAX_PATH_LEN MAX_PATH\n-\n-#elif defined (VMS)\n+#if defined (VMS)\n #define GNAT_MAX_PATH_LEN 256 /* PATH_MAX */\n \n #elif defined (__vxworks) || defined (__OPENNT) || defined(__nucleus__)\n@@ -478,8 +465,8 @@ __gnat_readlink (char *path ATTRIBUTE_UNUSED,\n \t\t char *buf ATTRIBUTE_UNUSED,\n \t\t size_t bufsiz ATTRIBUTE_UNUSED)\n {\n-#if defined (MSDOS) || defined (_WIN32) || defined (__EMX__) \\\n-  || defined (VMS) || defined(__vxworks) || defined (__nucleus__)\n+#if defined (_WIN32) || defined (VMS) \\\n+    || defined(__vxworks) || defined (__nucleus__)\n   return -1;\n #else\n   return readlink (path, buf, bufsiz);\n@@ -494,8 +481,8 @@ int\n __gnat_symlink (char *oldpath ATTRIBUTE_UNUSED,\n \t\tchar *newpath ATTRIBUTE_UNUSED)\n {\n-#if defined (MSDOS) || defined (_WIN32) || defined (__EMX__) \\\n-  || defined (VMS) || defined(__vxworks) || defined (__nucleus__)\n+#if defined (_WIN32) || defined (VMS) \\\n+    || defined(__vxworks) || defined (__nucleus__)\n   return -1;\n #else\n   return symlink (oldpath, newpath);\n@@ -504,8 +491,8 @@ __gnat_symlink (char *oldpath ATTRIBUTE_UNUSED,\n \n /* Try to lock a file, return 1 if success.  */\n \n-#if defined (__vxworks) || defined (__nucleus__) || defined (MSDOS) \\\n-  || defined (_WIN32) || defined (__EMX__) || defined (VMS)\n+#if defined (__vxworks) || defined (__nucleus__) \\\n+  || defined (_WIN32) || defined (VMS)\n \n /* Version that does not use link. */\n \n@@ -577,9 +564,7 @@ __gnat_try_lock (char *dir, char *file)\n int\n __gnat_get_maximum_file_name_length (void)\n {\n-#if defined (MSDOS)\n-  return 8;\n-#elif defined (VMS)\n+#if defined (VMS)\n   if (getenv (\"GNAT$EXTENDED_FILE_SPECIFICATIONS\"))\n     return -1;\n   else\n@@ -594,7 +579,7 @@ __gnat_get_maximum_file_name_length (void)\n int\n __gnat_get_file_names_case_sensitive (void)\n {\n-#if defined (__EMX__) || defined (MSDOS) || defined (VMS) || defined (WINNT)\n+#if defined (VMS) || defined (WINNT)\n   return 0;\n #else\n   return 1;\n@@ -604,11 +589,7 @@ __gnat_get_file_names_case_sensitive (void)\n char\n __gnat_get_default_identifier_character_set (void)\n {\n-#if defined (__EMX__) || defined (MSDOS)\n-  return 'p';\n-#else\n   return '1';\n-#endif\n }\n \n /* Return the current working directory.  */\n@@ -675,12 +656,7 @@ __gnat_get_executable_suffix_ptr (int *len, const char **value)\n void\n __gnat_get_debuggable_suffix_ptr (int *len, const char **value)\n {\n-#ifndef MSDOS\n   *value = HOST_EXECUTABLE_SUFFIX;\n-#else\n-  /* On DOS, the extensionless COFF file is what gdb likes.  */\n-  *value = \"\";\n-#endif\n \n   if (*value == 0)\n     *len = 0;\n@@ -859,7 +835,7 @@ __gnat_open_read (char *path, int fmode)\n   return fd < 0 ? -1 : fd;\n }\n \n-#if defined (__EMX__) || defined (__MINGW32__)\n+#if defined (__MINGW32__)\n #define PERM (S_IREAD | S_IWRITE)\n #elif defined (VMS)\n /* Excerpt from DECC C RTL Reference Manual:\n@@ -1101,7 +1077,7 @@ __gnat_stat_to_attr (int fd, char* name, struct file_attributes* attr)\n   attr->executable = (!ret && (statbuf.st_mode & S_IXUSR));\n #endif\n \n-#if !defined (__EMX__) && !defined (MSDOS) && (!defined (_WIN32) || defined (RTX))\n+#if !defined (_WIN32) || defined (RTX)\n   /* on Windows requires extra system call, see __gnat_file_time_name_attr */\n   if (ret != 0) {\n      attr->timestamp = (OS_Time)-1;\n@@ -1342,13 +1318,7 @@ OS_Time\n __gnat_file_time_name_attr (char* name, struct file_attributes* attr)\n {\n    if (attr->timestamp == (OS_Time)-2) {\n-#if defined (__EMX__) || defined (MSDOS)\n-      int fd = open (name, O_RDONLY | O_BINARY);\n-      time_t ret = __gnat_file_time_fd (fd);\n-      close (fd);\n-      attr->timestamp = (OS_Time)ret;\n-\n-#elif defined (_WIN32) && !defined (RTX)\n+#if defined (_WIN32) && !defined (RTX)\n       time_t ret = -1;\n       TCHAR wname[GNAT_MAX_PATH_LEN];\n       S2WSC (wname, name, GNAT_MAX_PATH_LEN);\n@@ -1383,74 +1353,7 @@ OS_Time\n __gnat_file_time_fd_attr (int fd, struct file_attributes* attr)\n {\n    if (attr->timestamp == (OS_Time)-2) {\n-     /* The following workaround code is due to the fact that under EMX and\n-        DJGPP fstat attempts to convert time values to GMT rather than keep the\n-        actual OS timestamp of the file. By using the OS2/DOS functions directly\n-        the GNAT timestamp are independent of this behavior, which is desired to\n-        facilitate the distribution of GNAT compiled libraries.  */\n-\n-#if defined (__EMX__) || defined (MSDOS)\n-#ifdef __EMX__\n-\n-     FILESTATUS fs;\n-     int ret = DosQueryFileInfo (fd, 1, (unsigned char *) &fs,\n-                                   sizeof (FILESTATUS));\n-\n-     unsigned file_year  = fs.fdateLastWrite.year;\n-     unsigned file_month = fs.fdateLastWrite.month;\n-     unsigned file_day   = fs.fdateLastWrite.day;\n-     unsigned file_hour  = fs.ftimeLastWrite.hours;\n-     unsigned file_min   = fs.ftimeLastWrite.minutes;\n-     unsigned file_tsec  = fs.ftimeLastWrite.twosecs;\n-\n-#else\n-     struct ftime fs;\n-     int ret = getftime (fd, &fs);\n-\n-     unsigned file_year  = fs.ft_year;\n-     unsigned file_month = fs.ft_month;\n-     unsigned file_day   = fs.ft_day;\n-     unsigned file_hour  = fs.ft_hour;\n-     unsigned file_min   = fs.ft_min;\n-     unsigned file_tsec  = fs.ft_tsec;\n-#endif\n-\n-     /* Calculate the seconds since epoch from the time components. First count\n-        the whole days passed.  The value for years returned by the DOS and OS2\n-        functions count years from 1980, so to compensate for the UNIX epoch which\n-        begins in 1970 start with 10 years worth of days and add days for each\n-        four year period since then.  */\n-\n-     time_t tot_secs;\n-     int cum_days[12] = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};\n-     int days_passed = 3652 + (file_year / 4) * 1461;\n-     int years_since_leap = file_year % 4;\n-\n-     if (years_since_leap == 1)\n-       days_passed += 366;\n-     else if (years_since_leap == 2)\n-       days_passed += 731;\n-     else if (years_since_leap == 3)\n-       days_passed += 1096;\n-\n-     if (file_year > 20)\n-       days_passed -= 1;\n-\n-     days_passed += cum_days[file_month - 1];\n-     if (years_since_leap == 0 && file_year != 20 && file_month > 2)\n-       days_passed++;\n-\n-     days_passed += file_day - 1;\n-\n-     /* OK - have whole days.  Multiply -- then add in other parts.  */\n-\n-     tot_secs  = days_passed * 86400;\n-     tot_secs += file_hour * 3600;\n-     tot_secs += file_min * 60;\n-     tot_secs += file_tsec * 2;\n-     attr->timestamp = (OS_Time) tot_secs;\n-\n-#elif defined (_WIN32) && !defined (RTX)\n+#if defined (_WIN32) && !defined (RTX)\n      HANDLE h = (HANDLE) _get_osfhandle (fd);\n      time_t ret = win32_filetime (h);\n      attr->timestamp = (OS_Time) ret;\n@@ -1476,7 +1379,7 @@ __gnat_file_time_fd (int fd)\n void\n __gnat_set_file_time_name (char *name, time_t time_stamp)\n {\n-#if defined (__EMX__) || defined (MSDOS) || defined (__vxworks)\n+#if defined (__vxworks)\n \n /* Code to implement __gnat_set_file_time_name for these systems.  */\n \n@@ -1857,7 +1760,7 @@ __gnat_is_absolute_path (char *name, int length)\n #else\n   return (length != 0) &&\n      (*name == '/' || *name == DIR_SEPARATOR\n-#if defined (__EMX__) || defined (MSDOS) || defined (WINNT)\n+#if defined (WINNT)\n       || (length > 1 && ISALPHA (name[0]) && name[1] == ':')\n #endif\n \t  );\n@@ -2358,7 +2261,7 @@ __gnat_portable_spawn (char *args[])\n #if defined (__vxworks) || defined(__nucleus__) || defined(RTX)\n   return -1;\n \n-#elif defined (MSDOS) || defined (_WIN32)\n+#elif defined (_WIN32)\n   /* args[0] must be quotes as it could contain a full pathname with spaces */\n   char *args_0 = args[0];\n   args[0] = (char *)xmalloc (strlen (args_0) + 3);\n@@ -2379,12 +2282,6 @@ __gnat_portable_spawn (char *args[])\n \n #else\n \n-#ifdef __EMX__\n-  pid = spawnvp (P_NOWAIT, args[0], args);\n-  if (pid == -1)\n-    return -1;\n-\n-#else\n   pid = fork ();\n   if (pid < 0)\n     return -1;\n@@ -2399,7 +2296,6 @@ __gnat_portable_spawn (char *args[])\n \t_exit (1);\n #endif\n     }\n-#endif\n \n   /* The parent.  */\n   finished = waitpid (pid, &status, 0);\n@@ -2649,19 +2545,6 @@ __gnat_portable_no_block_spawn (char *args[])\n #if defined (__vxworks) || defined (__nucleus__) || defined (RTX)\n   return -1;\n \n-#elif defined (__EMX__) || defined (MSDOS)\n-\n-  /* ??? For PC machines I (Franco) don't know the system calls to implement\n-     this routine. So I'll fake it as follows. This routine will behave\n-     exactly like the blocking portable_spawn and will systematically return\n-     a pid of 0 unless the spawned task did not complete successfully, in\n-     which case we return a pid of -1.  To synchronize with this the\n-     portable_wait below systematically returns a pid of 0 and reports that\n-     the subprocess terminated successfully. */\n-\n-  if (spawnvp (P_WAIT, args[0], args) != 0)\n-    return -1;\n-\n #elif defined (_WIN32)\n \n   HANDLE h = NULL;\n@@ -2703,16 +2586,12 @@ __gnat_portable_wait (int *process_status)\n   int pid = 0;\n \n #if defined (__vxworks) || defined (__nucleus__) || defined (RTX)\n-  /* Not sure what to do here, so do same as __EMX__ case, i.e., nothing but\n-     return zero.  */\n+  /* Not sure what to do here, so do nothing but return zero.  */\n \n #elif defined (_WIN32)\n \n   pid = win32_wait (&status);\n \n-#elif defined (__EMX__) || defined (MSDOS)\n-  /* ??? See corresponding comment in portable_no_block_spawn.  */\n-\n #else\n \n   pid = waitpid (-1, &status, 0);\n@@ -3458,14 +3337,6 @@ __gnat_adjust_os_resource_limits (void)\n \n #endif\n \n-/* For EMX, we cannot include dummy in libgcc, since it is too difficult\n-   to coordinate this with the EMX distribution. Consequently, we put the\n-   definition of dummy which is used for exception handling, here.  */\n-\n-#if defined (__EMX__)\n-void __dummy () {}\n-#endif\n-\n #if defined (__mips_vxworks)\n int\n _flush_cache()"}, {"sha": "771affc3be0eee814ee0a6bf2a43d09f4ddb16c8", "filename": "gcc/ada/csets.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fcsets.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fcsets.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcsets.adb?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -618,9 +618,9 @@ package body Csets is\n    -- Definitions for IBM PC (Code Page 437) --\n    --------------------------------------------\n \n-   --  Note: Code page 437 is the typical default in DOS, Windows and OS/2\n-   --  for PC's in the US, it corresponds to the original PC character set.\n-   --  See also the definitions for code page 850.\n+   --  Note: Code page 437 is the typical default in Windows for PC's in the\n+   --  US, it corresponds to the original PC character set. See also the\n+   --  definitions for code page 850.\n \n    Fold_IBM_PC_437 : constant Translate_Table := Translate_Table'(\n \n@@ -752,10 +752,10 @@ package body Csets is\n    -- Definitions for IBM PC (Code Page 850) --\n    --------------------------------------------\n \n-   --  Note: Code page 850 is the typical default in DOS, Windows and OS/2\n-   --  for PC's in Europe, it is an extension of the original PC character\n-   --  set to include the additional characters defined in ISO Latin-1.\n-   --  See also the definitions for code page 437.\n+   --  Note: Code page 850 is the typical default in Windows for PC's in\n+   --  Europe, it is an extension of the original PC character set to include\n+   --  the additional characters defined in ISO Latin-1. See also the\n+   --  definitions for code page 437.\n \n    Fold_IBM_PC_850 : constant Translate_Table := Translate_Table'(\n "}, {"sha": "ec409d6ecb8b47c163427fb2e49c9c869d6db11a", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -119,6 +119,10 @@ package body CStand is\n      (New_Node_Kind : Node_Kind := N_Defining_Identifier) return Entity_Id;\n    --  Builds a new entity for Standard\n \n+   procedure Pack_String_Type (String_Type : Entity_Id);\n+   --  Generate the proper tree for the pragma Pack that applies to each\n+   --  string type.\n+\n    procedure Print_Standard;\n    --  Print representation of package Standard if switch set\n \n@@ -695,6 +699,7 @@ package body CStand is\n       Init_Size_Align     (Standard_String);\n       Set_Alignment       (Standard_String, Uint_1);\n       Set_Has_Pragma_Pack (Standard_String, True);\n+      Pack_String_Type    (Standard_String);\n \n       --  On targets where a storage unit is larger than a byte (such as AAMP),\n       --  pragma Pack has a real effect on the representation of type String,\n@@ -738,6 +743,7 @@ package body CStand is\n       Set_Component_Size  (Standard_Wide_String, Uint_16);\n       Init_Size_Align     (Standard_Wide_String);\n       Set_Has_Pragma_Pack (Standard_Wide_String, True);\n+      Pack_String_Type    (Standard_Wide_String);\n \n       --  Set index type of Wide_String\n \n@@ -775,6 +781,7 @@ package body CStand is\n       Init_Size_Align      (Standard_Wide_Wide_String);\n       Set_Is_Ada_2005_Only (Standard_Wide_Wide_String);\n       Set_Has_Pragma_Pack  (Standard_Wide_Wide_String, True);\n+      Pack_String_Type     (Standard_Wide_Wide_String);\n \n       --  Set index type of Wide_Wide_String\n \n@@ -1624,6 +1631,19 @@ package body CStand is\n       return E;\n    end New_Standard_Entity;\n \n+   ----------------------\n+   -- Pack_String_Type --\n+   ----------------------\n+\n+   procedure Pack_String_Type (String_Type : Entity_Id) is\n+   begin\n+      Record_Rep_Item (String_Type,\n+         Make_Pragma (Stloc,\n+            Chars  => Name_Pack,\n+            Pragma_Argument_Associations =>\n+              New_List (New_Occurrence_Of (String_Type, Stloc))));\n+   end Pack_String_Type;\n+\n    --------------------\n    -- Print_Standard --\n    --------------------"}, {"sha": "9dea9a4f13e68765a1fdf553bd7e066d3cb4e510", "filename": "gcc/ada/cstreams.c", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fcstreams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fcstreams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstreams.c?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *              Auxiliary C functions for Interfaces.C.Streams              *\n  *                                                                          *\n- *          Copyright (C) 1992-2009, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2010, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -98,15 +98,6 @@ __gnat_is_regular_file_fd (int fd)\n   int ret;\n   GNAT_STRUCT_STAT statbuf;\n \n-#ifdef __EMX__\n-  /* Programs using screen I/O may need to reset the FPU after\n-     initialization of screen-handling related DLL's, so force\n-     DLL initialization by doing a null-write and then reset the FPU */\n-\n-  DosWrite (0, &ret, 0, &ret);\n-  __gnat_init_float();\n-#endif\n-\n   ret = GNAT_FSTAT (fd, &statbuf);\n   return (!ret && S_ISREG (statbuf.st_mode));\n }\n@@ -166,9 +157,9 @@ __gnat_full_name (char *nam, char *buffer)\n   else\n     buffer[0] = '\\0';\n \n-#elif defined(__EMX__) || defined (__MINGW32__)\n-  /* If this is a device file return it as is; under Windows NT and\n-     OS/2 a device file end with \":\".  */\n+#elif defined (__MINGW32__)\n+  /* If this is a device file return it as is;\n+     under Windows NT a device file ends with \":\".  */\n   if (nam[strlen (nam) - 1] == ':')\n     strcpy (buffer, nam);\n   else\n@@ -182,9 +173,6 @@ __gnat_full_name (char *nam, char *buffer)\n \t  *p = '\\\\';\n     }\n \n-#elif defined (MSDOS)\n-  _fixpath (nam, buffer);\n-\n #elif defined (sgi) || defined (__FreeBSD__)\n \n   /* Use realpath function which resolves links and references to . and .."}, {"sha": "610596571cd7d77f15d26fa6c2fe3d9da06320e6", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -6209,6 +6209,36 @@ package body Einfo is\n                and then Present (Related_Instance (Id)));\n    end Is_Wrapper_Package;\n \n+   -----------------\n+   -- Last_Formal --\n+   -----------------\n+\n+   function Last_Formal (Id : E) return E is\n+      Formal : E;\n+\n+   begin\n+      pragma Assert\n+        (Is_Overloadable (Id)\n+          or else Ekind_In (Id, E_Entry_Family,\n+                                E_Subprogram_Body,\n+                                E_Subprogram_Type));\n+\n+      if Ekind (Id) = E_Enumeration_Literal then\n+         return Empty;\n+\n+      else\n+         Formal := First_Formal (Id);\n+\n+         if Present (Formal) then\n+            while Present (Next_Formal (Formal)) loop\n+               Formal := Next_Formal (Formal);\n+            end loop;\n+         end if;\n+\n+         return Formal;\n+      end if;\n+   end Last_Formal;\n+\n    --------------------\n    -- Next_Component --\n    --------------------"}, {"sha": "dbc5d7fe17d51a78a6d1e60297dac7a6e31e38dd", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -2756,6 +2756,13 @@ package Einfo is\n --       Points to the last entry in the list of associated entities chained\n --       through the Next_Entity field. Empty if no entities are chained.\n \n+--    Last_Formal (synthesized)\n+--       Applies to subprograms and subprogram types, and also in entries\n+--       and entry families. Returns last formal of the subprogram or entry.\n+--       The formals are the first entities declared in a subprogram or in\n+--       a subprogram type (the designated type of an Access_To_Subprogram\n+--       definition) or in an entry.\n+\n --    Limited_View (Node23)\n --       Present in non-generic package entities that are not instances. Bona\n --       fide package with the limited-view list through the first_entity and\n@@ -4881,9 +4888,10 @@ package Einfo is\n    --    Sec_Stack_Needed_For_Return         (Flag167)\n    --    Uses_Sec_Stack                      (Flag95)\n    --    Address_Clause                      (synth)\n+   --    Entry_Index_Type                    (synth)\n    --    First_Formal                        (synth)\n    --    First_Formal_With_Extras            (synth)\n-   --    Entry_Index_Type                    (synth)\n+   --    Last_Formal                         (synth)\n    --    Number_Formals                      (synth)\n    --    Scope_Depth                         (synth)\n \n@@ -5002,6 +5010,7 @@ package Einfo is\n    --    Address_Clause                      (synth)\n    --    First_Formal                        (synth)\n    --    First_Formal_With_Extras            (synth)\n+   --    Last_Formal                         (synth)\n    --    Number_Formals                      (synth)\n    --    Scope_Depth                         (synth)\n \n@@ -5261,6 +5270,7 @@ package Einfo is\n    --    Address_Clause                      (synth)\n    --    First_Formal                        (synth)\n    --    First_Formal_With_Extras            (synth)\n+   --    Last_Formal                         (synth)\n    --    Number_Formals                      (synth)\n \n    --  E_Protected_Body\n@@ -5385,6 +5395,7 @@ package Einfo is\n    --    Directly_Designated_Type            (Node20)\n    --    First_Formal                        (synth)\n    --    First_Formal_With_Extras            (synth)\n+   --    Last_Formal                         (synth)\n    --    Number_Formals                      (synth)\n    --    (plus type attributes)\n \n@@ -6149,6 +6160,7 @@ package Einfo is\n    function Is_Task_Interface                   (Id : E) return B;\n    function Is_Task_Record_Type                 (Id : E) return B;\n    function Is_Wrapper_Package                  (Id : E) return B;\n+   function Last_Formal                         (Id : E) return E;\n    function Next_Component                      (Id : E) return E;\n    function Next_Component_Or_Discriminant      (Id : E) return E;\n    function Next_Discriminant                   (Id : E) return E;"}, {"sha": "c53678ab8316b4f081740c65918a13fe704b604b", "filename": "gcc/ada/env.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fenv.c?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *            Copyright (C) 2005-2009, Free Software Foundation, Inc.       *\n+ *            Copyright (C) 2005-2010, Free Software Foundation, Inc.       *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -107,9 +107,7 @@ typedef struct _ile3\n void\n __gnat_setenv (char *name, char *value)\n {\n-#ifdef MSDOS\n-\n-#elif defined (VMS)\n+#if defined (VMS)\n   struct descriptor_s name_desc;\n   /* Put in JOB table for now, so that the project stuff at least works.  */\n   struct descriptor_s table_desc = {7, 0, \"LNM$JOB\"};"}, {"sha": "c35391c116cab5e4a64709732d502186a67e212d", "filename": "gcc/ada/exp_cg.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fexp_cg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fexp_cg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_cg.adb?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -238,7 +238,7 @@ package body Exp_CG is\n               or else Chars (E) = Name_uAlignment\n               or else\n                 (Chars (E) = Name_Op_Eq\n-                   and then Etype (First_Entity (E)) = Etype (Last_Entity (E)))\n+                   and then Etype (First_Formal (E)) = Etype (Last_Formal (E)))\n               or else Chars (E) = Name_uAssign\n               or else Is_Predefined_Interface_Primitive (E)\n             then\n@@ -283,7 +283,7 @@ package body Exp_CG is\n \n                      return Predef_Names_95 (J) /= Name_Op_Eq\n                        or else\n-                         Etype (First_Entity (E)) = Etype (Last_Entity (E));\n+                         Etype (First_Formal (E)) = Etype (Last_Formal (E));\n                   end if;\n                end loop;\n "}, {"sha": "0f2f71a43c3a64b0b77507ad4157529d36a6dfe1", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -1782,7 +1782,7 @@ package body Exp_Disp is\n            or else TSS_Name  = TSS_Stream_Output\n            or else\n              (Chars (E) = Name_Op_Eq\n-                and then Etype (First_Entity (E)) = Etype (Last_Entity (E)))\n+                and then Etype (First_Formal (E)) = Etype (Last_Formal (E)))\n            or else Chars (E) = Name_uAssign\n            or else TSS_Name  = TSS_Deep_Adjust\n            or else TSS_Name  = TSS_Deep_Finalize\n@@ -1824,7 +1824,7 @@ package body Exp_Disp is\n            or else Chars (E) = Name_uAlignment\n            or else\n              (Chars (E) = Name_Op_Eq\n-                and then Etype (First_Entity (E)) = Etype (Last_Entity (E)))\n+                and then Etype (First_Formal (E)) = Etype (Last_Formal (E)))\n            or else Chars (E) = Name_uAssign\n            or else TSS_Name  = TSS_Deep_Adjust\n            or else TSS_Name  = TSS_Deep_Finalize"}, {"sha": "c6cc2d04d476c33c5c2a23d2baf6363374def268", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -1670,7 +1670,7 @@ package body Exp_Util is\n          exit when Chars (Op) = Name\n            and then\n              (Name /= Name_Op_Eq\n-                or else Etype (First_Entity (Op)) = Etype (Last_Entity (Op)));\n+                or else Etype (First_Formal (Op)) = Etype (Last_Formal (Op)));\n \n          Next_Elmt (Prim);\n "}, {"sha": "28ba9c651cfece685c557a758a3352116e99e714", "filename": "gcc/ada/g-dirope.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fg-dirope.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fg-dirope.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-dirope.ads?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 1998-2008, AdaCore                     --\n+--                     Copyright (C) 1998-2010, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -209,8 +209,8 @@ package GNAT.Directory_Operations is\n    --      Recognize both forms described above.\n    --\n    --    System_Default\n-   --      Uses either UNIX on Unix and OpenVMS systems, or DOS on Windows and\n-   --      OS/2 depending on the running environment.\n+   --      Uses either UNIX on Unix and OpenVMS systems, or DOS on Windows,\n+   --      depending on the running environment.\n \n    ---------------\n    -- Iterators --"}, {"sha": "76e2efcac2dec0803571ea738771ca48e388fb43", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -2923,7 +2923,7 @@ Ada exceptions, or used to implement run-time functions such as the\n Pragma @code{Interrupt_State} provides a general mechanism for overriding\n such uses of interrupts.  It subsumes the functionality of pragma\n @code{Unreserve_All_Interrupts}.  Pragma @code{Interrupt_State} is not\n-available on OS/2, Windows or VMS.  On all other platforms than VxWorks,\n+available on Windows or VMS.  On all other platforms than VxWorks,\n it applies to signals; on VxWorks, it applies to vectored hardware interrupts\n and may be used to mark interrupts required by the board support package\n as reserved.\n@@ -13246,8 +13246,8 @@ package Interfaces.C_Streams is\n   -- Standard C functions --\n   --------------------------\n   -- The functions selected below are ones that are\n-  -- available in DOS, OS/2, UNIX and Xenix (but not\n-  -- necessarily in ANSI C).  These are very thin interfaces\n+  -- available in UNIX (but not necessarily in ANSI C).\n+  -- These are very thin interfaces\n   -- which copy exactly the C headers.  For more\n   -- documentation on these functions, see the Microsoft C\n   -- \"Run-Time Library Reference\" (Microsoft Press, 1990,\n@@ -15502,7 +15502,7 @@ the underlying kernel.  Otherwise, some target dependent glue code maps\n the services offered by the underlying kernel to the semantics expected\n by GNARL@.\n \n-Whatever the underlying OS (VxWorks, UNIX, OS/2, Windows NT, etc.) the\n+Whatever the underlying OS (VxWorks, UNIX, Windows, etc.) the\n key point is that each Ada task is mapped on a thread in the underlying\n kernel.  For example, in the case of VxWorks, one Ada task = one VxWorks task.\n "}, {"sha": "5c997bd75be2f8709dcc9894844b86c88f728fb7", "filename": "gcc/ada/i-cstrea.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fi-cstrea.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fi-cstrea.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cstrea.ads?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1995-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -76,9 +76,9 @@ package Interfaces.C_Streams is\n    -- Standard C functions --\n    --------------------------\n \n-   --  The functions selected below are ones that are available in DOS,\n-   --  OS/2, UNIX and Xenix (but not necessarily in ANSI C). These are\n-   --  very thin interfaces which copy exactly the C headers. For more\n+   --  The functions selected below are ones that are available in\n+   --  UNIX (but not necessarily in ANSI C). These are very thin\n+   --  interfaces which copy exactly the C headers. For more\n    --  documentation on these functions, see the Microsoft C \"Run-Time\n    --  Library Reference\" (Microsoft Press, 1990, ISBN 1-55615-225-6),\n    --  which includes useful information on system compatibility."}, {"sha": "cd028e5b6741c65301e4714385bbe25e4d1059fb", "filename": "gcc/ada/init.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2009, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2010, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -2211,10 +2211,10 @@ __gnat_install_handler (void)\n /*********************/\n \n /* This routine is called as each process thread is created, for possible\n-   initialization of the FP processor.  This version is used under INTERIX,\n-   WIN32 and could be used under OS/2.  */\n+   initialization of the FP processor.  This version is used under INTERIX\n+   and WIN32.  */\n \n-#if defined (_WIN32) || defined (__INTERIX) || defined (__EMX__) \\\n+#if defined (_WIN32) || defined (__INTERIX) \\\n   || defined (__Lynx__) || defined(__NetBSD__) || defined(__FreeBSD__) \\\n   || defined (__OpenBSD__)\n "}, {"sha": "a1d9d05d4c4846b3740f13bb71d70e1141a5240c", "filename": "gcc/ada/osint.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fosint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fosint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.ads?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -84,7 +84,7 @@ package Osint is\n                                  Get_File_Names_Case_Sensitive /= 0;\n    --  Set to indicate whether the operating system convention is for file\n    --  names to be case sensitive (e.g., in Unix, set True), or non case\n-   --  sensitive (e.g., in OS/2, set False).\n+   --  sensitive (e.g., in Windows, set False).\n \n    procedure Canonical_Case_File_Name (S : in out String);\n    --  Given a file name, converts it to canonical case form. For systems"}, {"sha": "185fc52cff9e3dcf21453ea2a06f494e786a02f0", "filename": "gcc/ada/s-fileio.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fs-fileio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fs-fileio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.adb?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -104,7 +104,7 @@ package body System.File_IO is\n    File_Names_Case_Sensitive : constant Boolean := Get_Case_Sensitive /= 0;\n    --  Set to indicate whether the operating system convention is for file\n    --  names to be case sensitive (e.g., in Unix, set True), or non case\n-   --  sensitive (e.g., in OS/2, set False).\n+   --  sensitive (e.g., in Windows, set False).\n \n    -----------------------\n    -- Local Subprograms --"}, {"sha": "e4cd7add9621ea8261f0de02e250cfe3abe37a4b", "filename": "gcc/ada/s-stchop.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fs-stchop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fs-stchop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stchop.adb?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1999-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -64,7 +64,7 @@ package body System.Stack_Checking.Operations is\n \n    --  Note: This function must be compiled with Polling turned off\n \n-   --  Note: on systems like VxWorks and OS/2 with real thread-local storage,\n+   --  Note: on systems with real thread-local storage,\n    --        Set_Stack_Info should return an access value for such local\n    --        storage. In those cases the cache will always be up-to-date.\n "}, {"sha": "f4ba25075aecbe6b13e436bca43ebc0f3ae1a770", "filename": "gcc/ada/sfn_scan.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fsfn_scan.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fsfn_scan.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsfn_scan.adb?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -37,11 +37,10 @@ package body SFN_Scan is\n    --  Allow easy access to control character definitions\n \n    EOF : constant Character := ASCII.SUB;\n-   --  The character SUB (16#1A#) is used in DOS and other systems derived\n-   --  from DOS (OS/2, NT etc.) to signal the end of a text file. If this\n-   --  character appears as the last character of a file scanned by a call\n-   --  to Scan_SFN_Pragmas, then it is ignored, otherwise it is treated as\n-   --  an illegal character.\n+   --  The character SUB (16#1A#) is DOS-derived systems, such as Windows\n+   --  to signal the end of a text file. If this character appears as the\n+   --  last character of a file scanned by a call to Scan_SFN_Pragmas,\n+   --  then it is ignored, otherwise it is treated as an illegal character.\n \n    type String_Ptr is access String;\n "}, {"sha": "c978c036a35e20dcce5769d7385d78a5a945b208", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *         Copyright (C) 1992-2009, Free Software Foundation, Inc.          *\n+ *         Copyright (C) 1992-2010, Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -158,7 +158,7 @@ extern struct tm *localtime_r(const time_t *, struct tm *);\n \n */\n \n-#if defined(WINNT) || defined (MSDOS) || defined (__EMX__)\n+#if defined(WINNT)\n static const char *mode_read_text = \"rt\";\n static const char *mode_write_text = \"wt\";\n static const char *mode_append_text = \"at\";\n@@ -345,7 +345,7 @@ __gnat_ttyname (int filedes)\n }\n #endif\n \f\n-#if defined (linux) || defined (sun) || defined (sgi) || defined (__EMX__) \\\n+#if defined (linux) || defined (sun) || defined (sgi) \\\n   || (defined (__osf__) && ! defined (__alpha_vxworks)) || defined (WINNT) \\\n   || defined (__MACHTEN__) || defined (__hpux__) || defined (_AIX) \\\n   || (defined (__svr4__) && defined (i386)) || defined (__Lynx__) \\\n@@ -403,7 +403,7 @@ getc_immediate_common (FILE *stream,\n                        int *avail,\n                        int waiting)\n {\n-#if defined (linux) || defined (sun) || defined (sgi) || defined (__EMX__) \\\n+#if defined (linux) || defined (sun) || defined (sgi) \\\n     || (defined (__osf__) && ! defined (__alpha_vxworks)) \\\n     || defined (__CYGWIN32__) || defined (__MACHTEN__) || defined (__hpux__) \\\n     || defined (_AIX) || (defined (__svr4__) && defined (i386)) \\\n@@ -424,7 +424,7 @@ getc_immediate_common (FILE *stream,\n       /* Set RAW mode, with no echo */\n       termios_rec.c_lflag = termios_rec.c_lflag & ~ICANON & ~ECHO;\n \n-#if defined(linux) || defined (sun) || defined (sgi) || defined (__EMX__) \\\n+#if defined(linux) || defined (sun) || defined (sgi) \\\n     || defined (__osf__) || defined (__MACHTEN__) || defined (__hpux__) \\\n     || defined (_AIX) || (defined (__svr4__) && defined (i386)) \\\n     || defined (__Lynx__) || defined (__FreeBSD__) || defined (__OpenBSD__) \\\n@@ -433,17 +433,11 @@ getc_immediate_common (FILE *stream,\n \n       /* If waiting (i.e. Get_Immediate (Char)), set MIN = 1 and wait for\n          a character forever. This doesn't seem to effect Ctrl-Z or\n-         Ctrl-C processing except on OS/2 where Ctrl-C won't work right\n-         unless we do a read loop. Luckily we can delay a bit between\n-         iterations. If not waiting (i.e. Get_Immediate (Char, Available)),\n+         Ctrl-C processing.\n+         If not waiting (i.e. Get_Immediate (Char, Available)),\n          don't wait for anything but timeout immediately. */\n-#ifdef __EMX__\n-      termios_rec.c_cc[VMIN] = 0;\n-      termios_rec.c_cc[VTIME] = waiting;\n-#else\n       termios_rec.c_cc[VMIN] = waiting;\n       termios_rec.c_cc[VTIME] = 0;\n-#endif\n #endif\n       tcsetattr (fd, TCSANOW, &termios_rec);\n \n@@ -720,7 +714,7 @@ long __gnat_invalid_tzoff = 259273;\n \n /* Definition of __gnat_localtime_r used by a-calend.adb */\n \n-#if defined (__EMX__) || defined (__MINGW32__)\n+#if defined (__MINGW32__)\n \n #ifdef CERT\n \n@@ -743,7 +737,7 @@ extern void (*Unlock_Task) (void);\n \n #endif\n \n-/* Reentrant localtime for Windows and OS/2. */\n+/* Reentrant localtime for Windows. */\n \n extern void\n __gnat_localtime_tzoff (const time_t *, long *);"}, {"sha": "77c00759ee6fcf9cafce265cf81f800a867021d7", "filename": "gcc/ada/xref_lib.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fxref_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7f928bd69b0eaa870748848fe553876e4a1ace/gcc%2Fada%2Fxref_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxref_lib.adb?ref=ea7f928bd69b0eaa870748848fe553876e4a1ace", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1998-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -231,7 +231,7 @@ package body Xref_Lib is\n \n       Line_Start := Index (Entity (File_Start .. Entity'Last), \":\");\n \n-      --  Check if it was a disk:\\directory item (for NT and OS/2)\n+      --  Check if it was a disk:\\directory item (for Windows)\n \n       if File_Start = Line_Start - 1\n         and then Line_Start < Entity'Last"}]}