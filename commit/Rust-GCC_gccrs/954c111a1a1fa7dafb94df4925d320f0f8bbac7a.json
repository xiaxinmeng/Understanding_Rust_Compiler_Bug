{"sha": "954c111a1a1fa7dafb94df4925d320f0f8bbac7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU0YzExMWExYTFmYTdkYWZiOTRkZjQ5MjVkMzIwZjBmOGJiYWM3YQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2007-09-26T10:41:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-09-26T10:41:24Z"}, "message": "sem_ch8.adb (Analyze_Use_Type): Code cleanup.\n\n2007-09-26  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch8.adb (Analyze_Use_Type): Code cleanup.\n\t(Applicable_Use): Emit a warning when a package tries to use itself.\n\t(Use_One_Type): Add variable Is_Known_Used. Emit a warning when a type\n\tis already in use or the package where it is declared is in use or is\n\tdeclared in the current package.\n\t(Spec_Reloaded_For_Body): New subsidiary routine for Use_One_Type.\n\n\t* a-tasatt.adb, s-osprim-vxworks.adb, g-socthi-mingw.adb,\n\ts-intman-vms.adb, g-socket.adb, g-thread.adb, s-tarest.adb,\n\ts-tassta.adb, s-tporft.adb: Remove redundant 'use type' clause.\n\nFrom-SVN: r128779", "tree": {"sha": "a45cee9b77f63bb77345528eb520b2ed1e2b0337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a45cee9b77f63bb77345528eb520b2ed1e2b0337"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/954c111a1a1fa7dafb94df4925d320f0f8bbac7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/954c111a1a1fa7dafb94df4925d320f0f8bbac7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/954c111a1a1fa7dafb94df4925d320f0f8bbac7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba6dccf8f9334926354056be32b55a09c7ead740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6dccf8f9334926354056be32b55a09c7ead740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba6dccf8f9334926354056be32b55a09c7ead740"}], "stats": {"total": 145, "additions": 108, "deletions": 37}, "files": [{"sha": "bd04f4155291c40da3887d70381509f0da2e499e", "filename": "gcc/ada/a-tasatt.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/gcc%2Fada%2Fa-tasatt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/gcc%2Fada%2Fa-tasatt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tasatt.adb?ref=954c111a1a1fa7dafb94df4925d320f0f8bbac7a", "patch": "@@ -265,8 +265,6 @@ package body Ada.Task_Attributes is\n        System.Tasking.Task_Attributes,\n        Ada.Exceptions;\n \n-   use type System.Tasking.Access_Address;\n-\n    package POP renames System.Task_Primitives.Operations;\n \n    ---------------------------"}, {"sha": "11684962ebadbc79a273082341b933fbfe2ac889", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=954c111a1a1fa7dafb94df4925d320f0f8bbac7a", "patch": "@@ -48,7 +48,7 @@ with System; use System;\n \n package body GNAT.Sockets is\n \n-   use type C.int, System.Address;\n+   use type C.int;\n \n    Finalized   : Boolean := False;\n    Initialized : Boolean := False;\n@@ -1404,8 +1404,6 @@ package body GNAT.Sockets is\n       Last   : out Ada.Streams.Stream_Element_Offset;\n       Flags  : Request_Flag_Type := No_Request_Flag)\n    is\n-      use type Ada.Streams.Stream_Element_Offset;\n-\n       Res : C.int;\n \n    begin\n@@ -1430,8 +1428,6 @@ package body GNAT.Sockets is\n       From   : out Sock_Addr_Type;\n       Flags  : Request_Flag_Type := No_Request_Flag)\n    is\n-      use type Ada.Streams.Stream_Element_Offset;\n-\n       Res : C.int;\n       Sin : aliased Sockaddr_In;\n       Len : aliased C.int := Sin'Size / 8;\n@@ -1604,8 +1600,6 @@ package body GNAT.Sockets is\n       Last   : out Ada.Streams.Stream_Element_Offset;\n       Flags  : Request_Flag_Type := No_Request_Flag)\n    is\n-      use type Ada.Streams.Stream_Element_Offset;\n-\n       Res : C.int;\n \n    begin\n@@ -1634,8 +1628,6 @@ package body GNAT.Sockets is\n       To     : Sock_Addr_Type;\n       Flags  : Request_Flag_Type := No_Request_Flag)\n    is\n-      use type Ada.Streams.Stream_Element_Offset;\n-\n       Res : C.int;\n       Sin : aliased Sockaddr_In;\n       Len : constant C.int := Sin'Size / 8;"}, {"sha": "5376e986e151dd899952cb8aa294551a22ac486a", "filename": "gcc/ada/g-socthi-mingw.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/gcc%2Fada%2Fg-socthi-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/gcc%2Fada%2Fg-socthi-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-mingw.adb?ref=954c111a1a1fa7dafb94df4925d320f0f8bbac7a", "patch": "@@ -464,7 +464,6 @@ package body GNAT.Sockets.Thin is\n    ----------------\n \n    procedure Initialize is\n-      use type Interfaces.C.int;\n       Return_Value : Interfaces.C.int;\n    begin\n       if not Initialized then"}, {"sha": "94719ce9bd7944b06983d0b616b1d8df83e735db", "filename": "gcc/ada/g-thread.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/gcc%2Fada%2Fg-thread.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/gcc%2Fada%2Fg-thread.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-thread.adb?ref=954c111a1a1fa7dafb94df4925d320f0f8bbac7a", "patch": "@@ -128,7 +128,12 @@ package body GNAT.Threads is\n       T   : Tasking.Task_Id;\n \n       use type Tasking.Task_Id;\n+      --  This use clause should be removed once a visibility problem\n+      --  with the MaRTE run time has been fixed. ???\n+\n+      pragma Warnings (Off);\n       use type System.OS_Interface.Thread_Id;\n+      pragma Warnings (On);\n \n    begin\n       STPO.Lock_RTS;"}, {"sha": "fc7950588183c1df25c34e9f2e2f07d5c3349fc4", "filename": "gcc/ada/s-intman-vms.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/gcc%2Fada%2Fs-intman-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/gcc%2Fada%2Fs-intman-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-intman-vms.adb?ref=954c111a1a1fa7dafb94df4925d320f0f8bbac7a", "patch": "@@ -43,7 +43,6 @@ package body System.Interrupt_Management is\n \n    procedure Initialize is\n       use System.OS_Interface;\n-      use type unsigned_long;\n       Status : Cond_Value_Type;\n \n    begin"}, {"sha": "901954bb53b6a685d895810c842215e290b5a377", "filename": "gcc/ada/s-osprim-vxworks.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/gcc%2Fada%2Fs-osprim-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/gcc%2Fada%2Fs-osprim-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osprim-vxworks.adb?ref=954c111a1a1fa7dafb94df4925d320f0f8bbac7a", "patch": "@@ -96,9 +96,6 @@ package body System.OS_Primitives is\n    function Clock return Duration is\n       TS     : aliased timespec;\n       Result : int;\n-\n-      use type Interfaces.C.int;\n-\n    begin\n       Result := clock_gettime (CLOCK_REALTIME, TS'Unchecked_Access);\n       pragma Assert (Result = 0);"}, {"sha": "509b0d030efed9ea4e12473e41d3764a2ed14fd0", "filename": "gcc/ada/s-tarest.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/gcc%2Fada%2Fs-tarest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/gcc%2Fada%2Fs-tarest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.adb?ref=954c111a1a1fa7dafb94df4925d320f0f8bbac7a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1999-2006, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1999-2007, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -195,7 +195,6 @@ package body System.Tasking.Restricted.Stages is\n       --\n       --  DO NOT delete ID. As noted, it is needed on some targets.\n \n-      use type System.Parameters.Size_Type;\n       use type SSE.Storage_Offset;\n \n       Secondary_Stack : aliased SSE.Storage_Array"}, {"sha": "a50b3795871f4166a57867ae0ed16f75ba964745", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=954c111a1a1fa7dafb94df4925d320f0f8bbac7a", "patch": "@@ -943,7 +943,6 @@ package body System.Tasking.Stages is\n    --  an at-end handler that the compiler generates.\n \n    procedure Task_Wrapper (Self_ID : Task_Id) is\n-      use type System.Parameters.Size_Type;\n       use type SSE.Storage_Offset;\n       use System.Standard_Library;\n       use System.Stack_Usage;"}, {"sha": "eedfa290fab19636fca9658ccee6aef95cfcede7", "filename": "gcc/ada/s-tporft.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/gcc%2Fada%2Fs-tporft.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/gcc%2Fada%2Fs-tporft.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tporft.adb?ref=954c111a1a1fa7dafb94df4925d320f0f8bbac7a", "patch": "@@ -7,7 +7,7 @@\n --                                                                          --\n --                                B o d y                                   --\n --                                                                          --\n---          Copyright (C) 2002-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -44,8 +44,6 @@ function Register_Foreign_Thread (Thread : Thread_Id) return Task_Id is\n    Self_Id    : Task_Id;\n    Succeeded  : Boolean;\n \n-   use type Interfaces.C.unsigned;\n-\n begin\n    --  This section is tricky. We must not call anything that might require\n    --  an ATCB, until the new ATCB is in place. In order to get an ATCB"}, {"sha": "fff20546516622d871f15a63a9d0ee05667c9f37", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 100, "deletions": 15, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/954c111a1a1fa7dafb94df4925d320f0f8bbac7a/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=954c111a1a1fa7dafb94df4925d320f0f8bbac7a", "patch": "@@ -2180,6 +2180,7 @@ package body Sem_Ch8 is\n    ----------------------\n \n    procedure Analyze_Use_Type (N : Node_Id) is\n+      E  : Entity_Id;\n       Id : Entity_Id;\n \n    begin\n@@ -2194,16 +2195,17 @@ package body Sem_Ch8 is\n       Id := First (Subtype_Marks (N));\n       while Present (Id) loop\n          Find_Type (Id);\n+         E := Entity (Id);\n \n-         if Entity (Id) /= Any_Type then\n+         if E /= Any_Type then\n             Use_One_Type (Id);\n \n             if Nkind (Parent (N)) = N_Compilation_Unit then\n                if Nkind (Id) = N_Identifier then\n                   Error_Msg_N (\"type is not directly visible\", Id);\n \n-               elsif Is_Child_Unit (Scope (Entity (Id)))\n-                 and then Scope (Entity (Id)) /= System_Aux_Id\n+               elsif Is_Child_Unit (Scope (E))\n+                 and then Scope (E) /= System_Aux_Id\n                then\n                   Check_In_Previous_With_Clause (N, Prefix (Id));\n                end if;\n@@ -2223,6 +2225,13 @@ package body Sem_Ch8 is\n \n    begin\n       if In_Open_Scopes (Pack) then\n+         if Warn_On_Redundant_Constructs\n+           and then Pack = Current_Scope\n+         then\n+            Error_Msg_NE\n+              (\"& is already use-visible within itself?\", Pack_Name, Pack);\n+         end if;\n+\n          return False;\n \n       elsif In_Use (Pack) then\n@@ -2844,7 +2853,7 @@ package body Sem_Ch8 is\n                while Present (Id) loop\n \n                   --  Preserve use-visibility of operators that are primitive\n-                  --  operators of a type that is use_visible through an active\n+                  --  operators of a type that is use-visible through an active\n                   --  use_type clause.\n \n                   if Nkind (Id) = N_Defining_Operator_Symbol\n@@ -5861,9 +5870,9 @@ package body Sem_Ch8 is\n \n       if Present (Redundant) then\n          Error_Msg_Sloc := Sloc (Prev_Use);\n-         Error_Msg_NE (\n-           \"& is already use_visible through declaration #?\",\n-              Redundant, Pack_Name);\n+         Error_Msg_NE\n+           (\"& is already use-visible through previous use clause #?\",\n+            Redundant, Pack_Name);\n       end if;\n    end Note_Redundant_Use;\n \n@@ -6596,21 +6605,56 @@ package body Sem_Ch8 is\n    ------------------\n \n    procedure Use_One_Type (Id : Node_Id) is\n-      T       : Entity_Id;\n-      Op_List : Elist_Id;\n-      Elmt    : Elmt_Id;\n+      Elmt          : Elmt_Id;\n+      Is_Known_Used : Boolean;\n+      Op_List       : Elist_Id;\n+      T             : Entity_Id;\n+\n+      function Spec_Reloaded_For_Body return Boolean;\n+      --  Determine whether the compilation unit is a package body and the use\n+      --  type clause is in the spec of the same package. Even though the spec\n+      --  was analyzed first, its context is reloaded when analysing the body.\n+\n+      ----------------------------\n+      -- Spec_Reloaded_For_Body --\n+      ----------------------------\n+\n+      function Spec_Reloaded_For_Body return Boolean is\n+      begin\n+         if Nkind (Unit (Cunit (Current_Sem_Unit))) = N_Package_Body then\n+            declare\n+               Spec : constant Node_Id :=\n+                        Parent (List_Containing (Parent (Id)));\n+            begin\n+               return\n+                 Nkind (Spec) = N_Package_Specification\n+                   and then Corresponding_Body (Parent (Spec)) =\n+                              Cunit_Entity (Current_Sem_Unit);\n+            end;\n+         end if;\n+\n+         return False;\n+      end Spec_Reloaded_For_Body;\n+\n+   --  Start of processing for Use_One_Type;\n \n    begin\n       --  It is the type determined by the subtype mark (8.4(8)) whose\n       --  operations become potentially use-visible.\n \n       T := Base_Type (Entity (Id));\n \n-      Set_Redundant_Use\n-        (Id,\n-           In_Use (T)\n-             or else Is_Potentially_Use_Visible (T)\n-             or else In_Use (Scope (T)));\n+      --  Either the type itself is used, the package where it is declared\n+      --  is in use or the entity is declared in the current package, thus\n+      --  use-visible.\n+\n+      Is_Known_Used :=\n+        In_Use (T)\n+          or else In_Use (Scope (T))\n+          or else Scope (T) = Current_Scope;\n+\n+      Set_Redundant_Use (Id,\n+        Is_Known_Used or else Is_Potentially_Use_Visible (T));\n \n       if In_Open_Scopes (Scope (T)) then\n          null;\n@@ -6640,6 +6684,47 @@ package body Sem_Ch8 is\n             Next_Elmt (Elmt);\n          end loop;\n       end if;\n+\n+      --  If warning on redundant constructs, check for unnecessary WITH\n+\n+      if Warn_On_Redundant_Constructs\n+        and then Is_Known_Used\n+\n+         --                     with P;         with P; use P;\n+         --    package P is     package X is    package body X is\n+         --       type T ...       use P.T;\n+\n+         --  The compilation unit is the body of X. GNAT first compiles the\n+         --  spec of X, then procedes to the body. At that point P is marked\n+         --  as use visible. The analysis then reinstalls the spec along with\n+         --  its context. The use clause P.T is now recognized as redundant,\n+         --  but in the wrong context. Do not emit a warning in such cases.\n+\n+        and then not Spec_Reloaded_For_Body\n+      then\n+         --  The type already has a use clause\n+\n+         if In_Use (T) then\n+            Error_Msg_NE\n+              (\"& is already use-visible through previous use type clause?\",\n+               Id, Id);\n+\n+         --  The package where T is declared is already used\n+\n+         elsif In_Use (Scope (T)) then\n+            Error_Msg_Sloc := Sloc (Current_Use_Clause (Scope (T)));\n+            Error_Msg_NE\n+              (\"& is already use-visible through package use clause #?\",\n+               Id, Id);\n+\n+         --  The current scope is the package where T is declared\n+\n+         else\n+            Error_Msg_Node_2 := Scope (T);\n+            Error_Msg_NE\n+              (\"& is already use-visible inside package &?\", Id, Id);\n+         end if;\n+      end if;\n    end Use_One_Type;\n \n    ----------------"}]}