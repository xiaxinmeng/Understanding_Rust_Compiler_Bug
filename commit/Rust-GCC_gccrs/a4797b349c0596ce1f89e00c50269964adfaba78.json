{"sha": "a4797b349c0596ce1f89e00c50269964adfaba78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ3OTdiMzQ5YzA1OTZjZTFmODllMDBjNTAyNjk5NjRhZGZhYmE3OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2008-01-15T02:06:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-01-15T02:06:31Z"}, "message": "list_partition.h: Formatting fixes, inline tweaks.\n\n2008-01-14  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/parallel/list_partition.h: Formatting fixes, inline tweaks.\n\t* include/parallel/numeric: Likewise.\n\t* include/parallel/balanced_quicksort.h: Likewise.\n\t* include/parallel/unique_copy.h: Likewise.\n\t* include/parallel/algobase.h: Likewise.\n\t* include/parallel/algo.h: Likewise.\n\nFrom-SVN: r131542", "tree": {"sha": "9e4663b583e7981720a29c4f39388e63eb01ea72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e4663b583e7981720a29c4f39388e63eb01ea72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4797b349c0596ce1f89e00c50269964adfaba78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4797b349c0596ce1f89e00c50269964adfaba78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4797b349c0596ce1f89e00c50269964adfaba78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4797b349c0596ce1f89e00c50269964adfaba78/comments", "author": null, "committer": null, "parents": [{"sha": "ac10b0e16f14e4aaf318f3b26c947edeb11a2da5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac10b0e16f14e4aaf318f3b26c947edeb11a2da5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac10b0e16f14e4aaf318f3b26c947edeb11a2da5"}], "stats": {"total": 51, "additions": 30, "deletions": 21}, "files": [{"sha": "94388f513733a17182ea40543189e3f928b87b13", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4797b349c0596ce1f89e00c50269964adfaba78/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4797b349c0596ce1f89e00c50269964adfaba78/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a4797b349c0596ce1f89e00c50269964adfaba78", "patch": "@@ -1,3 +1,12 @@\n+2008-01-14  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/parallel/list_partition.h: Formatting fixes, inline tweaks.\n+\t* include/parallel/numeric: Likewise.\n+\t* include/parallel/balanced_quicksort.h: Likewise.\n+\t* include/parallel/unique_copy.h: Likewise.\n+\t* include/parallel/algobase.h: Likewise.\n+\t* include/parallel/algo.h: Likewise.\n+\n 2008-01-14  Seongbae Park <seongbae.park@gmail.com>\n \n \t* crossconfig.m4: Add missing header checks, C99 TR1 check,"}, {"sha": "f1c403234132c77f59406fe59a0051d6641efd3c", "filename": "libstdc++-v3/include/parallel/algo.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4797b349c0596ce1f89e00c50269964adfaba78/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4797b349c0596ce1f89e00c50269964adfaba78/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h?ref=a4797b349c0596ce1f89e00c50269964adfaba78", "patch": "@@ -1585,7 +1585,7 @@ namespace __parallel\n \n   // Parallel algorithm for random access iterators.\n   template<typename RandomAccessIterator, typename Size, typename Generator>\n-    RandomAccessIterator\n+    inline RandomAccessIterator\n     generate_n_switch(RandomAccessIterator begin, Size n, Generator gen, \n \t\t      random_access_iterator_tag, \n \t\t      __gnu_parallel::parallelism parallelism_tag\n@@ -1940,10 +1940,10 @@ namespace __parallel\n \n   // Sequential fallback\n   template<typename RandomAccessIterator>\n-  void\n-  partial_sort(RandomAccessIterator begin, RandomAccessIterator middle, \n-\t       RandomAccessIterator end, __gnu_parallel::sequential_tag)\n-  { _GLIBCXX_STD_P::partial_sort(begin, middle, end); }\n+    inline void\n+    partial_sort(RandomAccessIterator begin, RandomAccessIterator middle, \n+\t\t RandomAccessIterator end, __gnu_parallel::sequential_tag)\n+    { _GLIBCXX_STD_P::partial_sort(begin, middle, end); }\n \n   // Public interface, parallel algorithm for random access iterators\n   template<typename RandomAccessIterator, typename _Compare>\n@@ -2155,4 +2155,3 @@ namespace __parallel\n } // end namespace\n \n #endif /* _GLIBCXX_ALGORITHM_H */\n-"}, {"sha": "821985d49b17660020b6ccc5aaf5ea7463fde8d2", "filename": "libstdc++-v3/include/parallel/algobase.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4797b349c0596ce1f89e00c50269964adfaba78/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4797b349c0596ce1f89e00c50269964adfaba78/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h?ref=a4797b349c0596ce1f89e00c50269964adfaba78", "patch": "@@ -58,15 +58,15 @@ namespace __parallel\n   // Sequential fallback\n   template<typename InputIterator1, typename InputIterator2>\n     inline pair<InputIterator1, InputIterator2>\n-    mismatch(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2, \n+    mismatch(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2,\n \t     __gnu_parallel::sequential_tag)\n     { return _GLIBCXX_STD_P::mismatch(begin1, end1, begin2); }\n \n   // Sequential fallback\n   template<typename InputIterator1, typename InputIterator2,\n \t   typename Predicate>\n     inline pair<InputIterator1, InputIterator2>\n-    mismatch(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2, \n+    mismatch(InputIterator1 begin1, InputIterator1 end1, InputIterator2 begin2,\n \t     Predicate pred, __gnu_parallel::sequential_tag)\n     { return _GLIBCXX_STD_P::mismatch(begin1, end1, begin2, pred); }\n \n@@ -83,7 +83,7 @@ namespace __parallel\n   template<typename RandomAccessIterator1, typename RandomAccessIterator2,\n \t   typename Predicate>\n     pair<RandomAccessIterator1, RandomAccessIterator2>\n-    mismatch_switch(RandomAccessIterator1 begin1, RandomAccessIterator1 end1, \n+    mismatch_switch(RandomAccessIterator1 begin1, RandomAccessIterator1 end1,\n \t\t    RandomAccessIterator2 begin2, Predicate pred, \n \t\t    random_access_iterator_tag, random_access_iterator_tag)\n     {"}, {"sha": "182c82df6021149c313a596458c1db8f972ccc36", "filename": "libstdc++-v3/include/parallel/balanced_quicksort.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4797b349c0596ce1f89e00c50269964adfaba78/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbalanced_quicksort.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4797b349c0596ce1f89e00c50269964adfaba78/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbalanced_quicksort.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbalanced_quicksort.h?ref=a4797b349c0596ce1f89e00c50269964adfaba78", "patch": "@@ -307,10 +307,10 @@ template<typename RandomAccessIterator, typename Comparator>\n                 // Very unequal split, one part smaller than one 128th\n                 // elements not strictly larger than the pivot.\n                 __gnu_parallel::unary_negate<__gnu_parallel::binder1st\n-                    <Comparator, value_type, value_type, bool>, value_type>\n-                    pred(__gnu_parallel::binder1st\n-                        <Comparator, value_type, value_type, bool>(comp,\n-\t\t\t\t\t\t\t\t   *pivot_pos));\n+\t\t  <Comparator, value_type, value_type, bool>, value_type>\n+\t\t  pred(__gnu_parallel::binder1st\n+\t\t       <Comparator, value_type, value_type, bool>(comp,\n+\t\t\t\t\t\t\t\t  *pivot_pos));\n \n                 // Find other end of pivot-equal range.\n                 split_pos2 = __gnu_sequential::partition(split_pos1 + 1,\n@@ -330,7 +330,8 @@ template<typename RandomAccessIterator, typename Comparator>\n               {\n                 // Right side larger.\n                 if ((split_pos2) != end)\n-                  tl.leftover_parts.push_front(std::make_pair(split_pos2, end));\n+                  tl.leftover_parts.push_front(std::make_pair(split_pos2,\n+\t\t\t\t\t\t\t      end));\n \n                 //current.first = begin;\t//already set anyway\n                 current.second = split_pos1;"}, {"sha": "5adc5c9280deb7692b9456e3f6b6bf13681ac3e9", "filename": "libstdc++-v3/include/parallel/list_partition.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4797b349c0596ce1f89e00c50269964adfaba78/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flist_partition.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4797b349c0596ce1f89e00c50269964adfaba78/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flist_partition.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flist_partition.h?ref=a4797b349c0596ce1f89e00c50269964adfaba78", "patch": "@@ -109,7 +109,7 @@ namespace __gnu_parallel\n     {\n       bool make_twice = false;\n \n-      // According to the oversampling factor, the resizing algorithm is chosen.\n+      // The resizing algorithm is chosen according to the oversampling factor.\n       if (oversampling == 0)\n \t{\n \t  make_twice = true;"}, {"sha": "27bad63d3e591ab5bc7fdb16eab8c16f6bdd6eba", "filename": "libstdc++-v3/include/parallel/numeric", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4797b349c0596ce1f89e00c50269964adfaba78/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4797b349c0596ce1f89e00c50269964adfaba78/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric?ref=a4797b349c0596ce1f89e00c50269964adfaba78", "patch": "@@ -78,7 +78,7 @@ namespace __parallel\n \n   template<typename InputIterator, typename T, typename BinaryOperation,\n \t   typename IteratorTag>\n-    T\n+    inline T\n     accumulate_switch(InputIterator begin, InputIterator end, T init, \n \t\t      BinaryOperation binary_op, IteratorTag)\n     { return accumulate(begin, end, init, binary_op, \n@@ -345,10 +345,9 @@ namespace __parallel\n \t\t       OutputIterator result, BinaryOperation bin_op,\n \t\t       random_access_iterator_tag, random_access_iterator_tag)\n     {\n-      if (_GLIBCXX_PARALLEL_CONDITION(static_cast<__gnu_parallel::\n-\t\t\t\t      sequence_index_t>(end - begin)\n-\t\t\t\t      >= __gnu_parallel::Settings::\n-\t\t\t\t      partial_sum_minimal_n))\n+      if (_GLIBCXX_PARALLEL_CONDITION(\n+\t    static_cast<__gnu_parallel::sequence_index_t>(end - begin)\n+\t    >= __gnu_parallel::Settings::partial_sum_minimal_n))\n \treturn __gnu_parallel::parallel_partial_sum(begin, end,\n \t\t\t\t\t\t    result, bin_op);\n       else"}, {"sha": "7f51e2603fde2a2af1977ae6af10d333a2e1772d", "filename": "libstdc++-v3/include/parallel/unique_copy.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4797b349c0596ce1f89e00c50269964adfaba78/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Funique_copy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4797b349c0596ce1f89e00c50269964adfaba78/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Funique_copy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Funique_copy.h?ref=a4797b349c0596ce1f89e00c50269964adfaba78", "patch": "@@ -187,7 +187,8 @@ template<typename InputIterator, class OutputIterator>\n   parallel_unique_copy(InputIterator first, InputIterator last,\n                        OutputIterator result)\n   {\n-    typedef typename std::iterator_traits<InputIterator>::value_type value_type;\n+    typedef typename std::iterator_traits<InputIterator>::value_type\n+      value_type;\n     return parallel_unique_copy(first, last, result,\n \t\t\t\tstd::equal_to<value_type>());\n   }"}]}