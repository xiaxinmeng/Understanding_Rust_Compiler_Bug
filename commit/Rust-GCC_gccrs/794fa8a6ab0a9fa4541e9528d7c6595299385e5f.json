{"sha": "794fa8a6ab0a9fa4541e9528d7c6595299385e5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk0ZmE4YTZhYjBhOWZhNDU0MWU5NTI4ZDdjNjU5NTI5OTM4NWU1Zg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@codesourcery.com", "date": "2016-11-27T14:34:54Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2016-11-27T14:34:54Z"}, "message": "[Darwin] Fix PR71767 - adjust the sections used where necessary.\n\n (much) Older Darwin linkers needed separate sections marked \"coalesce\" to\n allow for weak symbol coalescing.  This has not been needed for some time\n and is now deprecated, newer assemblers warn if the old coalesced sections\n are used.\n \n \ngcc/\n\n2016-11-27  Iain Sandoe  <iain@codesourcery.com>\n\n\tPR target/71767\n\t* config/darwin-sections.def (picbase_thunk_section): New.\n\t* config/darwin.c (darwin_init_sections): Set up picbase thunk\n\tsection. (darwin_rodata_section, darwin_objc2_section,\n\tmachopic_select_section, darwin_asm_declare_constant_name,\n\tdarwin_emit_weak_or_comdat, darwin_function_section): Don\u2019t use\n\tcoalesced with newer linkers.\n\t(darwin_override_options): Decide on usage of coalesed sections\n\ton the basis of the target linker version.\n\t* config/darwin.h (MIN_LD64_NO_COAL_SECTS): New.\n\t* config/darwin.opt  (mtarget-linker): New.\n\t* config/i386/i386.c (ix86_code_end): Do not force the thunks into\n\ta coalesced section, instead use a thunks section.\n\nFrom-SVN: r242895", "tree": {"sha": "a16565000a66d13d5da62d9140f1f324951ecbb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a16565000a66d13d5da62d9140f1f324951ecbb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/794fa8a6ab0a9fa4541e9528d7c6595299385e5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/794fa8a6ab0a9fa4541e9528d7c6595299385e5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/794fa8a6ab0a9fa4541e9528d7c6595299385e5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/794fa8a6ab0a9fa4541e9528d7c6595299385e5f/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb89c82f46a10585c98e2019d775d920cf2fdea0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb89c82f46a10585c98e2019d775d920cf2fdea0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb89c82f46a10585c98e2019d775d920cf2fdea0"}], "stats": {"total": 111, "additions": 83, "deletions": 28}, "files": [{"sha": "ba2526c99c34fa024250c19de5bb23369e60a00d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794fa8a6ab0a9fa4541e9528d7c6595299385e5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794fa8a6ab0a9fa4541e9528d7c6595299385e5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=794fa8a6ab0a9fa4541e9528d7c6595299385e5f", "patch": "@@ -1,3 +1,19 @@\n+2016-11-27  Iain Sandoe  <iain@codesourcery.com>\n+\n+\tPR target/71767\n+\t* config/darwin-sections.def (picbase_thunk_section): New.\n+\t* config/darwin.c (darwin_init_sections): Set up picbase thunk\n+\tsection. (darwin_rodata_section, darwin_objc2_section,\n+\tmachopic_select_section, darwin_asm_declare_constant_name,\n+\tdarwin_emit_weak_or_comdat, darwin_function_section): Don\u2019t use\n+\tcoalesced with newer linkers.\n+\t(darwin_override_options): Decide on usage of coalesed sections\n+\ton the basis of the target linker version.\n+\t* config/darwin.h (MIN_LD64_NO_COAL_SECTS): New.\n+\t* config/darwin.opt  (mtarget-linker): New.\n+\t* config/i386/i386.c (ix86_code_end): Do not force the thunks into\n+\ta coalesced section, instead use a thunks section.\n+\n 2016-11-27  Iain Sandoe  <iain@codesourcery.com>\n \n \tPR target/71767"}, {"sha": "8a7e985c85faca9694585ba262fa452ba1c28ce3", "filename": "gcc/config/darwin-sections.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794fa8a6ab0a9fa4541e9528d7c6595299385e5f/gcc%2Fconfig%2Fdarwin-sections.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794fa8a6ab0a9fa4541e9528d7c6595299385e5f/gcc%2Fconfig%2Fdarwin-sections.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-sections.def?ref=794fa8a6ab0a9fa4541e9528d7c6595299385e5f", "patch": "@@ -31,6 +31,11 @@ along with GCC; see the file COPYING3.  If not see\n DEF_SECTION (text_coal_section, SECTION_CODE|SECTION_NO_ANCHOR,\n \t     \".section __TEXT,__textcoal_nt,coalesced,pure_instructions\", 0)\n \n+/* We define a picbase thunks section separately, so that we can override the\n+   def to be '.text' for versions of ld64 that handle coalescing.  */\n+DEF_SECTION (picbase_thunk_section, SECTION_CODE|SECTION_NO_ANCHOR,\n+\t     \".section __TEXT,__textcoal_nt,coalesced,pure_instructions\", 0)\n+\n DEF_SECTION (text_hot_section, SECTION_CODE,\n \t     \".section __TEXT,__text_hot,regular,pure_instructions\", 0)\n DEF_SECTION (text_cold_section, SECTION_CODE,"}, {"sha": "316e2178f5bbf1a9cd91c6fc09b7ac4ca2f1d6d8", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 50, "deletions": 27, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794fa8a6ab0a9fa4541e9528d7c6595299385e5f/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794fa8a6ab0a9fa4541e9528d7c6595299385e5f/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=794fa8a6ab0a9fa4541e9528d7c6595299385e5f", "patch": "@@ -97,6 +97,10 @@ int darwin_running_cxx;\n /* Some code-gen now depends on OS major version numbers (at least).  */\n int generating_for_darwin_version ;\n \n+/* For older linkers we need to emit special sections (marked 'coalesced') for\n+   for weak or single-definition items.  */\n+static bool ld_uses_coal_sects = false;\n+\n /* Section names.  */\n section * darwin_sections[NUM_DARWIN_SECTIONS];\n \n@@ -220,6 +224,11 @@ darwin_init_sections (void)\n   readonly_data_section = darwin_sections[const_section];\n   exception_section = darwin_sections[darwin_exception_section];\n   eh_frame_section = darwin_sections[darwin_eh_frame_section];\n+\n+  /* If our linker is new enough to coalesce weak symbols, then we\n+     can just put picbase_thunks into the text section.  */\n+  if (! ld_uses_coal_sects )\n+    darwin_sections[picbase_thunk_section] = text_section;\n }\n \n int\n@@ -1246,9 +1255,9 @@ darwin_mark_decl_preserved (const char *name)\n }\n \n static section *\n-darwin_rodata_section (int weak, bool zsize)\n+darwin_rodata_section (int use_coal, bool zsize)\n {\n-  return (weak\n+  return (use_coal\n \t  ? darwin_sections[const_coal_section]\n \t  : (zsize ? darwin_sections[zobj_const_section]\n \t\t   : darwin_sections[const_section]));\n@@ -1417,7 +1426,8 @@ darwin_objc2_section (tree decl ATTRIBUTE_UNUSED, tree meta, section * base)\n     return darwin_sections[objc2_image_info_section];\n \n   else if (!strncmp (p, \"V2_EHTY\", 7))\n-    return darwin_sections[data_coal_section];\n+    return ld_uses_coal_sects ? darwin_sections[data_coal_section]\n+                              : data_section;\n \n   else if (!strncmp (p, \"V2_CSTR\", 7))\n     return darwin_sections[objc2_constant_string_object_section];\n@@ -1516,21 +1526,23 @@ machopic_select_section (tree decl,\n \t\t\t int reloc,\n \t\t\t unsigned HOST_WIDE_INT align)\n {\n-  bool zsize, one, weak, ro;\n+  bool zsize, one, weak, use_coal, ro;\n   section *base_section = NULL;\n \n   weak = (DECL_P (decl)\n \t  && DECL_WEAK (decl)\n \t  && !lookup_attribute (\"weak_import\", DECL_ATTRIBUTES (decl)));\n \n-  zsize = (DECL_P (decl) \n+  zsize = (DECL_P (decl)\n \t   && (TREE_CODE (decl) == VAR_DECL || TREE_CODE (decl) == CONST_DECL) \n \t   && tree_to_uhwi (DECL_SIZE_UNIT (decl)) == 0);\n \n-  one = DECL_P (decl) \n+  one = DECL_P (decl)\n \t&& TREE_CODE (decl) == VAR_DECL \n \t&& DECL_COMDAT_GROUP (decl);\n \n+  use_coal = (weak || one) && ld_uses_coal_sects;\n+\n   ro = TREE_READONLY (decl) || TREE_CONSTANT (decl) ;\n \n   switch (categorize_decl_for_section (decl, reloc))\n@@ -1541,7 +1553,7 @@ machopic_select_section (tree decl,\n \n     case SECCAT_RODATA:\n     case SECCAT_SRODATA:\n-      base_section = darwin_rodata_section (weak, zsize);\n+      base_section = darwin_rodata_section (use_coal, zsize);\n       break;\n \n     case SECCAT_RODATA_MERGE_STR:\n@@ -1563,7 +1575,7 @@ machopic_select_section (tree decl,\n     case SECCAT_DATA_REL_RO_LOCAL:\n     case SECCAT_SDATA:\n     case SECCAT_TDATA:\n-      if (weak || one)\n+      if (use_coal)\n \t{\n \t  if (ro)\n \t    base_section = darwin_sections[const_data_coal_section];\n@@ -1592,7 +1604,7 @@ machopic_select_section (tree decl,\n     case SECCAT_BSS:\n     case SECCAT_SBSS:\n     case SECCAT_TBSS:\n-      if (weak || one) \n+      if (use_coal)\n \tbase_section = darwin_sections[data_coal_section];\n       else\n \t{\n@@ -2288,14 +2300,18 @@ darwin_asm_declare_constant_name (FILE *file, const char *name,\n static void\n darwin_emit_weak_or_comdat (FILE *fp, tree decl, const char *name,\n \t\t\t\t  unsigned HOST_WIDE_INT size, \n+\t\t\t\t  bool use_coal,\n \t\t\t\t  unsigned int align)\n {\n-  /* Since the sections used here are coalesed, they will not be eligible\n-     for section anchors, and therefore we don't need to break that out.  */\n+  /* Since the sections used here are coalesced, they will not be eligible\n+     for section anchors, and therefore we don't need to break that out.\n+     CHECKME: for modern linker on PowerPC.  */\n  if (TREE_READONLY (decl) || TREE_CONSTANT (decl))\n-    switch_to_section (darwin_sections[const_data_coal_section]);\n+    switch_to_section (use_coal ? darwin_sections[const_data_coal_section]\n+\t\t\t\t: darwin_sections[const_data_section]);\n   else\n-    switch_to_section (darwin_sections[data_coal_section]);\n+    switch_to_section (use_coal ? darwin_sections[data_coal_section]\n+\t\t\t\t: data_section);\n \n   /* To be consistent, we'll allow darwin_asm_declare_object_name to assemble\n      the align info for zero-sized items... but do it here otherwise.  */\n@@ -2514,7 +2530,7 @@ fprintf (fp, \"# albss: %s (%lld,%d) ro %d cst %d stat %d com %d\"\n     {\n       /* Weak or COMDAT objects are put in mergeable sections.  */\n       darwin_emit_weak_or_comdat (fp, decl, name, size, \n-\t\t\t\t\tDECL_ALIGN (decl));\n+\t\t\t\t  ld_uses_coal_sects, DECL_ALIGN (decl));\n       return;\n     } \n \n@@ -2628,7 +2644,7 @@ fprintf (fp, \"# adcom: %s (%lld,%d) ro %d cst %d stat %d com %d pub %d\"\n     {\n       /* Weak or COMDAT objects are put in mergable sections.  */\n       darwin_emit_weak_or_comdat (fp, decl, name, size, \n-\t\t\t\t\tDECL_ALIGN (decl));\n+\t\t\t\t  ld_uses_coal_sects, DECL_ALIGN (decl));\n       return;\n     } \n \n@@ -2698,7 +2714,7 @@ fprintf (fp, \"# adloc: %s (%lld,%d) ro %d cst %d stat %d one %d pub %d\"\n     {\n       /* Weak or COMDAT objects are put in mergable sections.  */\n       darwin_emit_weak_or_comdat (fp, decl, name, size, \n-\t\t\t\t\tDECL_ALIGN (decl));\n+\t\t\t\t  ld_uses_coal_sects, DECL_ALIGN (decl));\n       return;\n     } \n \n@@ -3083,6 +3099,12 @@ darwin_override_options (void)\n       /* Earlier versions are not specifically accounted, until required.  */\n     }\n \n+  /* Older Darwin ld could not coalesce weak entities without them being\n+     placed in special sections.  */\n+  if (darwin_target_linker\n+      && (strverscmp (darwin_target_linker, MIN_LD64_NO_COAL_SECTS) < 0))\n+    ld_uses_coal_sects = true;\n+\n   /* In principle, this should be c-family only.  However, we really need to\n      set sensible defaults for LTO as well, since the section selection stuff\n      should check for correctness re. the ABI.  TODO: check and provide the\n@@ -3608,21 +3630,22 @@ darwin_function_section (tree decl, enum node_frequency freq,\n \t\t\t  bool startup, bool exit)\n {\n   /* Decide if we need to put this in a coalescable section.  */\n-  bool weak = (decl \n+  bool weak = (decl\n \t       && DECL_WEAK (decl)\n \t       && (!DECL_ATTRIBUTES (decl)\n \t\t   || !lookup_attribute (\"weak_import\", \n \t\t\t\t\t  DECL_ATTRIBUTES (decl))));\n \n+  bool use_coal = weak && ld_uses_coal_sects;\n   /* If there is a specified section name, we should not be trying to\n      override.  */\n   if (decl && DECL_SECTION_NAME (decl) != NULL)\n     return get_named_section (decl, NULL, 0);\n \n   /* We always put unlikely executed stuff in the cold section.  */\n   if (freq == NODE_FREQUENCY_UNLIKELY_EXECUTED)\n-    return (weak) ? darwin_sections[text_cold_coal_section]\n-\t\t  : darwin_sections[text_cold_section];\n+    return (use_coal) ? darwin_sections[text_cold_coal_section]\n+\t\t      : darwin_sections[text_cold_section];\n \n   /* If we have LTO *and* feedback information, then let LTO handle\n      the function ordering, it makes a better job (for normal, hot,\n@@ -3632,23 +3655,23 @@ darwin_function_section (tree decl, enum node_frequency freq,\n \n   /* Non-cold startup code should go to startup subsection.  */\n   if (startup)\n-    return (weak) ? darwin_sections[text_startup_coal_section]\n-\t\t  : darwin_sections[text_startup_section];\n+    return (use_coal) ? darwin_sections[text_startup_coal_section]\n+\t\t      : darwin_sections[text_startup_section];\n \n   /* Similarly for exit.  */\n   if (exit)\n-    return (weak) ? darwin_sections[text_exit_coal_section]\n-\t\t  : darwin_sections[text_exit_section];\n+    return (use_coal) ? darwin_sections[text_exit_coal_section]\n+\t\t      : darwin_sections[text_exit_section];\n \n   /* Place hot code.  */\n   if (freq == NODE_FREQUENCY_HOT)\n-    return (weak) ? darwin_sections[text_hot_coal_section]\n-\t\t  : darwin_sections[text_hot_section];\n+    return (use_coal) ? darwin_sections[text_hot_coal_section]\n+\t\t      : darwin_sections[text_hot_section];\n \n   /* Otherwise, default to the 'normal' non-reordered sections.  */\n default_function_sections:\n-  return (weak) ? darwin_sections[text_coal_section]\n-\t\t: text_section;\n+  return (use_coal) ? darwin_sections[text_coal_section]\n+\t\t    : text_section;\n }\n \n /* When a function is partitioned between sections, we need to insert a label"}, {"sha": "79fc50637e367f67594a9829622c0a72e310d5d3", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794fa8a6ab0a9fa4541e9528d7c6595299385e5f/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794fa8a6ab0a9fa4541e9528d7c6595299385e5f/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=794fa8a6ab0a9fa4541e9528d7c6595299385e5f", "patch": "@@ -940,6 +940,11 @@ extern void darwin_driver_init (unsigned int *,struct cl_decoded_option **);\n    fall-back default.  */\n #define DEF_MIN_OSX_VERSION \"10.5\"\n \n+/* Later versions of ld64 support coalescing weak code/data without requiring\n+   that they be placed in specially identified sections.  This is the earliest\n+   _tested_ version known to support this so far.  */\n+#define MIN_LD64_NO_COAL_SECTS \"236.4\"\n+\n #ifndef LD64_VERSION\n #define LD64_VERSION \"85.2\"\n #else"}, {"sha": "7f2e394ae79cd44b870bbfb090676c631be265fb", "filename": "gcc/config/darwin.opt", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794fa8a6ab0a9fa4541e9528d7c6595299385e5f/gcc%2Fconfig%2Fdarwin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794fa8a6ab0a9fa4541e9528d7c6595299385e5f/gcc%2Fconfig%2Fdarwin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.opt?ref=794fa8a6ab0a9fa4541e9528d7c6595299385e5f", "patch": "@@ -391,5 +391,11 @@ Driver Separate\n sub_umbrella\n Driver Separate\n \n+; Certain aspects of code-gen may be improved / adjusted if the version of ld64\n+; is sufficiently modern.\n+mtarget-linker\n+Target RejectNegative Joined Separate Report Var(darwin_target_linker) Init(LD64_VERSION)\n+The version of ld64 in use for this toolchain.\n+\n undefined\n Driver Separate"}, {"sha": "1dd5669bfea9623cb508e16364f975f5c440574f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794fa8a6ab0a9fa4541e9528d7c6595299385e5f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794fa8a6ab0a9fa4541e9528d7c6595299385e5f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=794fa8a6ab0a9fa4541e9528d7c6595299385e5f", "patch": "@@ -11886,7 +11886,7 @@ ix86_code_end (void)\n #if TARGET_MACHO\n       if (TARGET_MACHO)\n \t{\n-\t  switch_to_section (darwin_sections[text_coal_section]);\n+\t  switch_to_section (darwin_sections[picbase_thunk_section]);\n \t  fputs (\"\\t.weak_definition\\t\", asm_out_file);\n \t  assemble_name (asm_out_file, name);\n \t  fputs (\"\\n\\t.private_extern\\t\", asm_out_file);"}]}