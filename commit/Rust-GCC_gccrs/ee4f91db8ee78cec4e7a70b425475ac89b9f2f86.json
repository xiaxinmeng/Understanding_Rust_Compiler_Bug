{"sha": "ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "node_id": "C_kwDOANBUbNoAKGVlNGY5MWRiOGVlNzhjZWM0ZTdhNzBiNDI1NDc1YWM4OWI5ZjJmODY", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-07T06:32:24Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T05:58:42Z"}, "message": "RISC-V: Add vwmul C api tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/vwmul_vv-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vv-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vv-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vv_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vv_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vv_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vv_mu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vv_mu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vv_mu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vv_tu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vv_tu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vv_tu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vv_tum-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vv_tum-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vv_tum-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vv_tumu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vv_tumu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vv_tumu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vx-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vx-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vx-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vx_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vx_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vx_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vx_mu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vx_mu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vx_mu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vx_tu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vx_tu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vx_tu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vx_tum-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vx_tum-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vx_tum-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vx_tumu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vx_tumu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwmul_vx_tumu-3.c: New test.", "tree": {"sha": "6c35a96c9a462a35930ae4d52578656ab9cbf6e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c35a96c9a462a35930ae4d52578656ab9cbf6e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "697a877279b0f9d3827929f08028aec6964a469e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697a877279b0f9d3827929f08028aec6964a469e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/697a877279b0f9d3827929f08028aec6964a469e"}], "stats": {"total": 3996, "additions": 3996, "deletions": 0}, "files": [{"sha": "d70370f25e2713548f796f5ddae62de4c161435d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vv-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv-1.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vv_i16mf4(vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf4(op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vv_i16mf2(vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf2(op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vv_i16m1(vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m1(op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vv_i16m2(vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m2(op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vv_i16m4(vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m4(op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vv_i16m8(vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m8(op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vv_i32mf2(vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32mf2(op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vv_i32m1(vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m1(op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vv_i32m2(vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m2(op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vv_i32m4(vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m4(op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vv_i32m8(vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m8(op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vv_i64m1(vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m1(op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vv_i64m2(vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m2(op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vv_i64m4(vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m4(op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vv_i64m8(vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m8(op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "aabdc30143ff6838bded2578b00fdd338f4355dc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vv-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv-2.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vv_i16mf4(vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf4(op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vv_i16mf2(vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf2(op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vv_i16m1(vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m1(op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vv_i16m2(vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m2(op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vv_i16m4(vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m4(op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vv_i16m8(vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m8(op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vv_i32mf2(vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32mf2(op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vv_i32m1(vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m1(op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vv_i32m2(vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m2(op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vv_i32m4(vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m4(op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vv_i32m8(vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m8(op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vv_i64m1(vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m1(op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vv_i64m2(vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m2(op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vv_i64m4(vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m4(op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vv_i64m8(vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m8(op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "c7dccd7440f0eab7a229ca80c56d78ee82ce3147", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vv-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv-3.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vv_i16mf4(vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf4(op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vv_i16mf2(vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf2(op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vv_i16m1(vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m1(op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vv_i16m2(vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m2(op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vv_i16m4(vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m4(op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vv_i16m8(vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m8(op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vv_i32mf2(vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32mf2(op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vv_i32m1(vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m1(op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vv_i32m2(vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m2(op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vv_i32m4(vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m4(op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vv_i32m8(vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m8(op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vv_i64m1(vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m1(op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vv_i64m2(vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m2(op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vv_i64m4(vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m4(op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vv_i64m8(vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m8(op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "ca990d4c473d4ae8fb97e30496dad93ebc75e530", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vv_m-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_m-1.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vv_i16mf4_m(vbool64_t mask,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vv_i16mf2_m(vbool32_t mask,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vv_i16m1_m(vbool16_t mask,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vv_i16m2_m(vbool8_t mask,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vv_i16m4_m(vbool4_t mask,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vv_i16m8_m(vbool2_t mask,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vv_i32mf2_m(vbool64_t mask,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32mf2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vv_i32m1_m(vbool32_t mask,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vv_i32m2_m(vbool16_t mask,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vv_i32m4_m(vbool8_t mask,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vv_i32m8_m(vbool4_t mask,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vv_i64m1_m(vbool64_t mask,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vv_i64m2_m(vbool32_t mask,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vv_i64m4_m(vbool16_t mask,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vv_i64m8_m(vbool8_t mask,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "8914cdf7d9e4be78310620ede3767e80668563d6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vv_m-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_m-2.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vv_i16mf4_m(vbool64_t mask,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vv_i16mf2_m(vbool32_t mask,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vv_i16m1_m(vbool16_t mask,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vv_i16m2_m(vbool8_t mask,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vv_i16m4_m(vbool4_t mask,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vv_i16m8_m(vbool2_t mask,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m8_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vv_i32mf2_m(vbool64_t mask,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32mf2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vv_i32m1_m(vbool32_t mask,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vv_i32m2_m(vbool16_t mask,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vv_i32m4_m(vbool8_t mask,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vv_i32m8_m(vbool4_t mask,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m8_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vv_i64m1_m(vbool64_t mask,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vv_i64m2_m(vbool32_t mask,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vv_i64m4_m(vbool16_t mask,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vv_i64m8_m(vbool8_t mask,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m8_m(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "65bc492e859d452f04ea4a1b28c3a5f5b39966ea", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vv_m-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_m-3.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vv_i16mf4_m(vbool64_t mask,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vv_i16mf2_m(vbool32_t mask,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vv_i16m1_m(vbool16_t mask,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vv_i16m2_m(vbool8_t mask,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vv_i16m4_m(vbool4_t mask,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vv_i16m8_m(vbool2_t mask,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m8_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vv_i32mf2_m(vbool64_t mask,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32mf2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vv_i32m1_m(vbool32_t mask,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vv_i32m2_m(vbool16_t mask,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vv_i32m4_m(vbool8_t mask,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vv_i32m8_m(vbool4_t mask,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m8_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vv_i64m1_m(vbool64_t mask,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vv_i64m2_m(vbool32_t mask,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vv_i64m4_m(vbool16_t mask,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vv_i64m8_m(vbool8_t mask,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m8_m(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "fdab68fe8e42d33ee29480e971914aa373d7be76", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vv_mu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_mu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_mu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_mu-1.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vv_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vv_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vv_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vv_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vv_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vv_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vv_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32mf2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vv_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vv_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vv_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vv_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vv_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vv_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vv_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vv_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "3f6851aafcfb47df07cd88a5d870dae75a524579", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vv_mu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_mu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_mu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_mu-2.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vv_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vv_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vv_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vv_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vv_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vv_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vv_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32mf2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vv_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vv_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vv_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vv_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vv_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vv_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vv_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vv_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "28bc4f38c2afca0d7bffced5ba816ac9fcdb806b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vv_mu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_mu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_mu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_mu-3.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vv_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vv_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vv_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vv_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vv_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vv_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vv_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32mf2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vv_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vv_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vv_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vv_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vv_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vv_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vv_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vv_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "2d8f8e91cf3fb3a4013679805e318fb29d28ba3f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vv_tu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tu-1.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vv_i16mf4_tu(vint16mf4_t merge,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vv_i16mf2_tu(vint16mf2_t merge,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vv_i16m1_tu(vint16m1_t merge,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vv_i16m2_tu(vint16m2_t merge,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vv_i16m4_tu(vint16m4_t merge,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vv_i16m8_tu(vint16m8_t merge,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vv_i32mf2_tu(vint32mf2_t merge,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32mf2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vv_i32m1_tu(vint32m1_t merge,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vv_i32m2_tu(vint32m2_t merge,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vv_i32m4_tu(vint32m4_t merge,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vv_i32m8_tu(vint32m8_t merge,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vv_i64m1_tu(vint64m1_t merge,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vv_i64m2_tu(vint64m2_t merge,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vv_i64m4_tu(vint64m4_t merge,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vv_i64m8_tu(vint64m8_t merge,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "b32c2fd734db1c76141ee15602d656a8431406e0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vv_tu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tu-2.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vv_i16mf4_tu(vint16mf4_t merge,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vv_i16mf2_tu(vint16mf2_t merge,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vv_i16m1_tu(vint16m1_t merge,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vv_i16m2_tu(vint16m2_t merge,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vv_i16m4_tu(vint16m4_t merge,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vv_i16m8_tu(vint16m8_t merge,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vv_i32mf2_tu(vint32mf2_t merge,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32mf2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vv_i32m1_tu(vint32m1_t merge,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vv_i32m2_tu(vint32m2_t merge,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vv_i32m4_tu(vint32m4_t merge,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vv_i32m8_tu(vint32m8_t merge,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vv_i64m1_tu(vint64m1_t merge,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vv_i64m2_tu(vint64m2_t merge,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vv_i64m4_tu(vint64m4_t merge,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vv_i64m8_tu(vint64m8_t merge,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "7b1ad9875787235a6e19450fbde784187779e4e4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vv_tu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tu-3.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vv_i16mf4_tu(vint16mf4_t merge,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vv_i16mf2_tu(vint16mf2_t merge,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vv_i16m1_tu(vint16m1_t merge,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vv_i16m2_tu(vint16m2_t merge,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vv_i16m4_tu(vint16m4_t merge,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vv_i16m8_tu(vint16m8_t merge,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vv_i32mf2_tu(vint32mf2_t merge,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32mf2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vv_i32m1_tu(vint32m1_t merge,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vv_i32m2_tu(vint32m2_t merge,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vv_i32m4_tu(vint32m4_t merge,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vv_i32m8_tu(vint32m8_t merge,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vv_i64m1_tu(vint64m1_t merge,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vv_i64m2_tu(vint64m2_t merge,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vv_i64m4_tu(vint64m4_t merge,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vv_i64m8_tu(vint64m8_t merge,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "bb8630997a7363ad05f8969367af27a41fe38454", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vv_tum-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tum-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tum-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tum-1.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vv_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vv_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vv_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vv_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vv_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vv_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vv_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32mf2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vv_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vv_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vv_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vv_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vv_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vv_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vv_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vv_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "54c6870c2d04cf4f2df4d7b033130c62f4d2bc25", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vv_tum-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tum-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tum-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tum-2.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vv_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vv_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vv_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vv_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vv_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vv_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vv_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32mf2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vv_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vv_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vv_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vv_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vv_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vv_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vv_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vv_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "8ac3881d79d060531dcf43b76a777eb135ed381a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vv_tum-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tum-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tum-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tum-3.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vv_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vv_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vv_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vv_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vv_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vv_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vv_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32mf2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vv_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vv_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vv_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vv_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vv_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vv_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vv_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vv_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "bc9d79b446a2d4a608cab5c2cf3f8af19f242bb0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vv_tumu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tumu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tumu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tumu-1.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vv_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vv_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vv_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vv_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vv_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vv_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vv_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32mf2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vv_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vv_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vv_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vv_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vv_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vv_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vv_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vv_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "3a2b88e9a0f8df57762eda24f62f2e0ef920e702", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vv_tumu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tumu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tumu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tumu-2.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vv_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vv_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vv_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vv_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vv_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vv_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vv_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32mf2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vv_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vv_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vv_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vv_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vv_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vv_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vv_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vv_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "5e8c263ce0313c1a95853438200c0e6f13fd9a61", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vv_tumu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tumu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tumu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vv_tumu-3.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vv_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vv_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16mf2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vv_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vv_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vv_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vv_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i16m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vv_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32mf2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vv_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vv_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vv_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vv_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i32m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vv_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vv_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vv_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vv_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vv_i64m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmul\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "8800d21e95fff84b6cd9fd81686f420c89d6b4a0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vx-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx-1.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vx_i16mf4(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf4(op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vx_i16mf2(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf2(op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vx_i16m1(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m1(op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vx_i16m2(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m2(op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vx_i16m4(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m4(op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vx_i16m8(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m8(op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vx_i32mf2(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32mf2(op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vx_i32m1(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m1(op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vx_i32m2(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m2(op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vx_i32m4(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m4(op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vx_i32m8(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m8(op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vx_i64m1(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m1(op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vx_i64m2(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m2(op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vx_i64m4(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m4(op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vx_i64m8(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m8(op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "87ce345436b0df0fdaa2969078e431846ae72613", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vx-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx-2.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vx_i16mf4(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf4(op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vx_i16mf2(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf2(op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vx_i16m1(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m1(op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vx_i16m2(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m2(op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vx_i16m4(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m4(op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vx_i16m8(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m8(op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vx_i32mf2(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32mf2(op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vx_i32m1(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m1(op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vx_i32m2(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m2(op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vx_i32m4(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m4(op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vx_i32m8(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m8(op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vx_i64m1(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m1(op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vx_i64m2(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m2(op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vx_i64m4(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m4(op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vx_i64m8(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m8(op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "12872d51fa5f4829786fd4771302f2956911ba92", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vx-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx-3.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vx_i16mf4(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf4(op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vx_i16mf2(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf2(op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vx_i16m1(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m1(op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vx_i16m2(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m2(op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vx_i16m4(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m4(op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vx_i16m8(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m8(op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vx_i32mf2(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32mf2(op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vx_i32m1(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m1(op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vx_i32m2(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m2(op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vx_i32m4(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m4(op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vx_i32m8(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m8(op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vx_i64m1(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m1(op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vx_i64m2(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m2(op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vx_i64m4(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m4(op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vx_i64m8(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m8(op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "4a13f789843d0e2c837cd107245440809463a897", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vx_m-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_m-1.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vx_i16mf4_m(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vx_i16mf2_m(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vx_i16m1_m(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vx_i16m2_m(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vx_i16m4_m(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vx_i16m8_m(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vx_i32mf2_m(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32mf2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vx_i32m1_m(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vx_i32m2_m(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vx_i32m4_m(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vx_i32m8_m(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vx_i64m1_m(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vx_i64m2_m(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vx_i64m4_m(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vx_i64m8_m(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "bfde5422947e01270bc6e60cba744f1c20eac86c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vx_m-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_m-2.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vx_i16mf4_m(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vx_i16mf2_m(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vx_i16m1_m(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vx_i16m2_m(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vx_i16m4_m(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vx_i16m8_m(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m8_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vx_i32mf2_m(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32mf2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vx_i32m1_m(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vx_i32m2_m(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vx_i32m4_m(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vx_i32m8_m(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m8_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vx_i64m1_m(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vx_i64m2_m(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vx_i64m4_m(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vx_i64m8_m(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m8_m(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "662754c611f09084db41873b7c6ad8cabc2e4055", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vx_m-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_m-3.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vx_i16mf4_m(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vx_i16mf2_m(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vx_i16m1_m(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vx_i16m2_m(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vx_i16m4_m(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vx_i16m8_m(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m8_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vx_i32mf2_m(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32mf2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vx_i32m1_m(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vx_i32m2_m(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vx_i32m4_m(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vx_i32m8_m(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m8_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vx_i64m1_m(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vx_i64m2_m(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vx_i64m4_m(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vx_i64m8_m(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m8_m(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "97fe43ccea676a5ed86fe8d93481330f2f974c35", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vx_mu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_mu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_mu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_mu-1.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32mf2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "554add8b09650cbc28a80b19d571c19c16929030", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vx_mu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_mu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_mu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_mu-2.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32mf2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "afff19695a36299c8ad859e51094a7186fa3d27f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vx_mu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_mu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_mu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_mu-3.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32mf2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "f503ab83cfa18046ad5a9e9b17b7ecae3d0b52c6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vx_tu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tu-1.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vx_i16mf4_tu(vint16mf4_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vx_i16mf2_tu(vint16mf2_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vx_i16m1_tu(vint16m1_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vx_i16m2_tu(vint16m2_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vx_i16m4_tu(vint16m4_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vx_i16m8_tu(vint16m8_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vx_i32mf2_tu(vint32mf2_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32mf2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vx_i32m1_tu(vint32m1_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vx_i32m2_tu(vint32m2_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vx_i32m4_tu(vint32m4_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vx_i32m8_tu(vint32m8_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vx_i64m1_tu(vint64m1_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vx_i64m2_tu(vint64m2_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vx_i64m4_tu(vint64m4_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vx_i64m8_tu(vint64m8_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "eb110342e82d3f3ad98d787ff4d7c38ba69e8790", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vx_tu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tu-2.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vx_i16mf4_tu(vint16mf4_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vx_i16mf2_tu(vint16mf2_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vx_i16m1_tu(vint16m1_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vx_i16m2_tu(vint16m2_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vx_i16m4_tu(vint16m4_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vx_i16m8_tu(vint16m8_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vx_i32mf2_tu(vint32mf2_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32mf2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vx_i32m1_tu(vint32m1_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vx_i32m2_tu(vint32m2_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vx_i32m4_tu(vint32m4_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vx_i32m8_tu(vint32m8_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vx_i64m1_tu(vint64m1_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vx_i64m2_tu(vint64m2_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vx_i64m4_tu(vint64m4_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vx_i64m8_tu(vint64m8_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "386b2e6667c21db7143a3392dd9f1d7ae7486e80", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vx_tu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tu-3.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vx_i16mf4_tu(vint16mf4_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vx_i16mf2_tu(vint16mf2_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vx_i16m1_tu(vint16m1_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vx_i16m2_tu(vint16m2_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vx_i16m4_tu(vint16m4_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vx_i16m8_tu(vint16m8_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vx_i32mf2_tu(vint32mf2_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32mf2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vx_i32m1_tu(vint32m1_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vx_i32m2_tu(vint32m2_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vx_i32m4_tu(vint32m4_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vx_i32m8_tu(vint32m8_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vx_i64m1_tu(vint64m1_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vx_i64m2_tu(vint64m2_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vx_i64m4_tu(vint64m4_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vx_i64m8_tu(vint64m8_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "373702b0632aaca2150f644f75d44ed4aba6694d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vx_tum-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tum-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tum-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tum-1.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32mf2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "4d5b10fbf6acbe5ece64a44eae88e970cfee4ac0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vx_tum-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tum-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tum-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tum-2.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32mf2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "5ea4ec60cf2b196a84d26b9dc912d81beb05c1b3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vx_tum-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tum-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tum-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tum-3.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32mf2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "745000c6385a0380c3a258042deb74418d483bd0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vx_tumu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tumu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tumu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tumu-1.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32mf2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "a40ef991c2276d35ebeb517343839871ccce2ba6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vx_tumu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tumu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tumu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tumu-2.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32mf2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "a440f17aeaa3e3df4d4e1f9373ade96439da8d81", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwmul_vx_tumu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tumu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee4f91db8ee78cec4e7a70b425475ac89b9f2f86/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tumu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwmul_vx_tumu-3.c?ref=ee4f91db8ee78cec4e7a70b425475ac89b9f2f86", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwmul_vx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwmul_vx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16mf2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwmul_vx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwmul_vx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwmul_vx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwmul_vx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i16m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwmul_vx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32mf2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwmul_vx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwmul_vx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwmul_vx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwmul_vx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i32m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwmul_vx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwmul_vx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwmul_vx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwmul_vx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwmul_vx_i64m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwmul\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}]}