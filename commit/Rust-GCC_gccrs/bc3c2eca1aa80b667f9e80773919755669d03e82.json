{"sha": "bc3c2eca1aa80b667f9e80773919755669d03e82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMzYzJlY2ExYWE4MGI2NjdmOWU4MDc3MzkxOTc1NTY2OWQwM2U4Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T13:09:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T13:09:07Z"}, "message": "[multiple changes]\n\n2014-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.ads, einfo.adb (Is_Standard_String_Type): New function.\n\t* exp_ch3.adb (Build_Array_Init_Proc): Use\n\tIs_Standard_String_Type.\n\t(Expand_Freeze_Array_Type): ditto.\n\t(Get_Simple_Init_Val): ditto.\n\t(Needs_Simple_Initialization): ditto.\n\t* sem_eval.adb (Eval_String_Literal): Use Is_Standard_String_Type.\n\t* sem_warn.adb (Is_Suspicious_Type): Use Is_Standard_String_Type.\n\n2014-08-04  Pascal Obry  <obry@adacore.com>\n\n\t* adaint.c (__gnat_try_lock): Use _tcscpy and _tcscat instead of\n\t_stprintf which insert garbage into the wfull_path buffer.\n\n2014-08-04  Arnaud Charlet  <charlet@adacore.com>\n\n\t* cal.c: Remove old VMS/nucleus code. Remove obsolete vxworks\n\tcode.\n\t* fe.h: Minor reformatting.\n\n2014-08-04  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n\n\t* cstreams.c: (_LARGEFILE_SOURCE): Guard definition.\n\n2014-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* par-ch13.adb (Get_Aspect_Specifications): Improve error\n\trecovery, fixing a -gnatQ bomb.\n\nFrom-SVN: r213586", "tree": {"sha": "ae2f98b4910d7b8f2902562768bc811fce0e843d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae2f98b4910d7b8f2902562768bc811fce0e843d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc3c2eca1aa80b667f9e80773919755669d03e82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc3c2eca1aa80b667f9e80773919755669d03e82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc3c2eca1aa80b667f9e80773919755669d03e82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc3c2eca1aa80b667f9e80773919755669d03e82/comments", "author": null, "committer": null, "parents": [{"sha": "3daa26d0e9138bc554869f15d79d657c6a735828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3daa26d0e9138bc554869f15d79d657c6a735828", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3daa26d0e9138bc554869f15d79d657c6a735828"}], "stats": {"total": 179, "additions": 102, "deletions": 77}, "files": [{"sha": "9db1ccba87f99a19a35aaa1757dee706917c70ad", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bc3c2eca1aa80b667f9e80773919755669d03e82", "patch": "@@ -1,3 +1,34 @@\n+2014-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.ads, einfo.adb (Is_Standard_String_Type): New function.\n+\t* exp_ch3.adb (Build_Array_Init_Proc): Use\n+\tIs_Standard_String_Type.\n+\t(Expand_Freeze_Array_Type): ditto.\n+\t(Get_Simple_Init_Val): ditto.\n+\t(Needs_Simple_Initialization): ditto.\n+\t* sem_eval.adb (Eval_String_Literal): Use Is_Standard_String_Type.\n+\t* sem_warn.adb (Is_Suspicious_Type): Use Is_Standard_String_Type.\n+\n+2014-08-04  Pascal Obry  <obry@adacore.com>\n+\n+\t* adaint.c (__gnat_try_lock): Use _tcscpy and _tcscat instead of\n+\t_stprintf which insert garbage into the wfull_path buffer.\n+\n+2014-08-04  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* cal.c: Remove old VMS/nucleus code. Remove obsolete vxworks\n+\tcode.\n+\t* fe.h: Minor reformatting.\n+\n+2014-08-04  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* cstreams.c: (_LARGEFILE_SOURCE): Guard definition.\n+\n+2014-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par-ch13.adb (Get_Aspect_Specifications): Improve error\n+\trecovery, fixing a -gnatQ bomb.\n+\n 2014-08-04  Yannick Moy  <moy@adacore.com>\n \n \t* sem_ch3.adb (Analyze_Object_Declaration): In GNATprove mode,"}, {"sha": "02bce4532973ded6b669a4c580838c1a4e2a5123", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=bc3c2eca1aa80b667f9e80773919755669d03e82", "patch": "@@ -459,7 +459,20 @@ __gnat_try_lock (char *dir, char *file)\n   S2WSC (wdir, dir, GNAT_MAX_PATH_LEN);\n   S2WSC (wfile, file, GNAT_MAX_PATH_LEN);\n \n+  /* ??? the code below crash on MingW64 for obscure reasons, a ticket\n+     has been opened here:\n+\n+     https://sourceforge.net/p/mingw-w64/bugs/414/\n+\n+     As a workaround an equivalent set of code has been put in place below.\n+\n   _stprintf (wfull_path, _T(\"%s%c%s\"), wdir, _T(DIR_SEPARATOR), wfile);\n+  */\n+\n+  _tcscpy (wfull_path, wdir);\n+  _tcscat (wfull_path, L\"\\\\\");\n+  _tcscat (wfull_path, wfile);\n+\n   fd = _topen (wfull_path, O_CREAT | O_EXCL, 0600);\n #else\n   char full_path[256];"}, {"sha": "2f913a92a9382552e0a96c410351cc9e56a04638", "filename": "gcc/ada/cal.c", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2Fcal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2Fcal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcal.c?ref=bc3c2eca1aa80b667f9e80773919755669d03e82", "patch": "@@ -35,22 +35,6 @@\n /*  struct timeval fields type are not normalized (they are generally       */\n /*  defined as int or long values).                                         */\n \n-#if defined(VMS) || defined(__nucleus__)\n-\n-/* this is temporary code to avoid build failure under VMS */\n-\n-void\n-__gnat_timeval_to_duration (void *t, long *sec, long *usec)\n-{\n-}\n-\n-void\n-__gnat_duration_to_timeval (long sec, long usec, void *t)\n-{\n-}\n-\n-#else\n-\n #if defined (__vxworks)\n #ifdef __RTP__\n #include <time.h>\n@@ -90,20 +74,3 @@ __gnat_duration_to_timeval (long sec, long usec, struct timeval *t)\n   t->tv_sec = sec;\n   t->tv_usec = usec;\n }\n-#endif\n-\n-#ifdef __alpha_vxworks\n-#include \"vxWorks.h\"\n-#elif defined (__vxworks)\n-#include <types/vxTypesOld.h>\n-#endif\n-\n-/* Return the value of the \"time\" C library function.  We always return\n-   a long and do it this way to avoid problems with not knowing\n-   what time_t is on the target.  */\n-\n-long\n-gnat_time (void)\n-{\n-  return time (0);\n-}"}, {"sha": "f7652e32aa99bc55c7c56cec34fc9584e6e23509", "filename": "gcc/ada/cstreams.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2Fcstreams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2Fcstreams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstreams.c?ref=bc3c2eca1aa80b667f9e80773919755669d03e82", "patch": "@@ -31,7 +31,9 @@\n \n /* Routines required for implementing routines in Interfaces.C.Streams.  */\n \n+#ifndef _LARGEFILE_SOURCE\n #define _LARGEFILE_SOURCE\n+#endif\n #define _FILE_OFFSET_BITS 64\n /* the define above will make off_t a 64bit type on GNU/Linux */\n "}, {"sha": "c3b0f9919666ff7140f0c59a322b7ddbbc68dd34", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=bc3c2eca1aa80b667f9e80773919755669d03e82", "patch": "@@ -7264,6 +7264,29 @@ package body Einfo is\n       end if;\n    end Is_Standard_Character_Type;\n \n+   -----------------------------\n+   -- Is_Standard_String_Type --\n+   -----------------------------\n+\n+   function Is_Standard_String_Type (Id : E) return B is\n+   begin\n+      if Is_Type (Id) then\n+         declare\n+            R : constant Entity_Id := Root_Type (Id);\n+         begin\n+            return\n+              R = Standard_String\n+                or else\n+              R = Standard_Wide_String\n+                or else\n+              R = Standard_Wide_Wide_String;\n+         end;\n+\n+      else\n+         return False;\n+      end if;\n+   end Is_Standard_String_Type;\n+\n    --------------------\n    -- Is_String_Type --\n    --------------------"}, {"sha": "d75beccb0ee762a56e992574e79fec30c2e6a127", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=bc3c2eca1aa80b667f9e80773919755669d03e82", "patch": "@@ -2940,9 +2940,14 @@ package Einfo is\n \n --    Is_Standard_Character_Type (synthesized)\n --       Applies to all entities, true for types and subtypes whose root type\n---       is one of the standard character types (Character, Wide_Character,\n+--       is one of the standard character types (Character, Wide_Character, or\n --       Wide_Wide_Character).\n \n+--    Is_Standard_String_Type (synthesized)\n+--       Applies to all entities, true for types and subtypes whose root\n+--       type is one of the standard string types (String, Wide_String, or\n+--       Wide_Wide_String).\n+\n --    Is_Statically_Allocated (Flag28)\n --       Defined in all entities. This can only be set for exception,\n --       variable, constant, and type/subtype entities. If the flag is set,\n@@ -5233,6 +5238,7 @@ package Einfo is\n    --    Has_Foreign_Convention              (synth)\n    --    Is_Dynamic_Scope                    (synth)\n    --    Is_Standard_Character_Type          (synth)\n+   --    Is_Standard_String_Type             (synth)\n    --    Underlying_Type                     (synth)\n    --    all classification attributes       (synth)\n \n@@ -7002,6 +7008,7 @@ package Einfo is\n    function Is_Protected_Interface              (Id : E) return B;\n    function Is_Protected_Record_Type            (Id : E) return B;\n    function Is_Standard_Character_Type          (Id : E) return B;\n+   function Is_Standard_String_Type             (Id : E) return B;\n    function Is_String_Type                      (Id : E) return B;\n    function Is_Synchronized_Interface           (Id : E) return B;\n    function Is_Task_Interface                   (Id : E) return B;"}, {"sha": "bd4886da51261faf1df4017c3897cfb175356f5b", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=bc3c2eca1aa80b667f9e80773919755669d03e82", "patch": "@@ -713,9 +713,7 @@ package body Exp_Ch3 is\n       if Has_Default_Init\n         or else (not Restriction_Active (No_Initialize_Scalars)\n                   and then Is_Public (A_Type)\n-                  and then Root_Type (A_Type) /= Standard_String\n-                  and then Root_Type (A_Type) /= Standard_Wide_String\n-                  and then Root_Type (A_Type) /= Standard_Wide_Wide_String)\n+                  and then not Is_Standard_String_Type (A_Type))\n       then\n          Proc_Id :=\n            Make_Defining_Identifier (Loc,\n@@ -6257,10 +6255,7 @@ package body Exp_Ch3 is\n             --  initialize scalars mode, and these types are treated specially\n             --  and do not need initialization procedures.\n \n-            elsif     Root_Type (Base) = Standard_String\n-              or else Root_Type (Base) = Standard_Wide_String\n-              or else Root_Type (Base) = Standard_Wide_Wide_String\n-            then\n+            elsif Is_Standard_String_Type (Base) then\n                null;\n \n             --  Otherwise we have to build an init proc for the subtype\n@@ -8001,12 +7996,7 @@ package body Exp_Ch3 is\n \n       --  String or Wide_[Wide]_String (must have Initialize_Scalars set)\n \n-      elsif Root_Type (T) = Standard_String\n-              or else\n-            Root_Type (T) = Standard_Wide_String\n-              or else\n-            Root_Type (T) = Standard_Wide_Wide_String\n-      then\n+      elsif Is_Standard_String_Type (T) then\n          pragma Assert (Init_Or_Norm_Scalars);\n \n          return\n@@ -9714,10 +9704,7 @@ package body Exp_Ch3 is\n       --  filled with appropriate initializing values before they are used).\n \n       elsif Consider_IS_NS\n-        and then\n-          (Root_Type (T) = Standard_String      or else\n-           Root_Type (T) = Standard_Wide_String or else\n-           Root_Type (T) = Standard_Wide_Wide_String)\n+        and then Is_Standard_String_Type (T)\n         and then\n           (not Is_Itype (T)\n             or else Nkind (Associated_Node_For_Itype (T)) /= N_Aggregate)"}, {"sha": "fcd2f153324b008b92ce9653b3202ea769ff5c49", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=bc3c2eca1aa80b667f9e80773919755669d03e82", "patch": "@@ -174,7 +174,7 @@ extern Boolean In_Same_Source_Unit              (Node_Id, Node_Id);\n #define Exception_Mechanism            opt__exception_mechanism\n #define Float_Format                   opt__float_format\n #define Generate_SCO_Instance_Table    opt__generate_sco_instance_table\n-#define GNAT_Mode\t\t       opt__gnat_mode\n+#define GNAT_Mode                      opt__gnat_mode\n #define List_Representation_Info       opt__list_representation_info\n \n typedef enum {Setjmp_Longjmp, Back_End_Exceptions} Exception_Mechanism_Type;"}, {"sha": "2265bbf796d01b7a7b3f309b03f7057a210f9ea8", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=bc3c2eca1aa80b667f9e80773919755669d03e82", "patch": "@@ -154,6 +154,9 @@ package body Ch13 is\n       Aspects : List_Id;\n       OK      : Boolean;\n \n+      Opt : Boolean;\n+      --  True if current aspect takes an optional argument\n+\n    begin\n       Aspects := Empty_List;\n \n@@ -248,6 +251,9 @@ package body Ch13 is\n \n          else\n             Scan; -- past identifier\n+            Opt := Aspect_Argument (A_Id) = Optional_Expression\n+                      or else\n+                   Aspect_Argument (A_Id) = Optional_Name;\n \n             --  Check for 'Class present\n \n@@ -285,23 +291,21 @@ package body Ch13 is\n             --  definitions are not considered.\n \n             if Token = Tok_Comma or else Token = Tok_Semicolon then\n-               if Aspect_Argument (A_Id) /= Optional_Expression\n-                 and then Aspect_Argument (A_Id) /= Optional_Name\n-               then\n+               if not Opt then\n                   Error_Msg_Node_1 := Identifier (Aspect);\n                   Error_Msg_AP (\"aspect& requires an aspect definition\");\n                   OK := False;\n                end if;\n \n-            --  Check for a missing arrow when the aspect has a definition\n+            --  Here we do not have a comma or a semicolon, we are done if we\n+            --  do not have an arrow and the aspect does not need an argument\n \n-            elsif not Semicolon and then Token /= Tok_Arrow then\n-               if Aspect_Argument (A_Id) /= Optional_Expression\n-                 and then Aspect_Argument (A_Id) /= Optional_Name\n-               then\n-                  T_Arrow;\n-                  Resync_To_Semicolon;\n-               end if;\n+            elsif Opt and then Token /= Tok_Arrow then\n+               null;\n+\n+            --  Here we have either an arrow, or an aspect that definitely\n+            --  needs an aspect definition, and we will look for one even if\n+            --  no arrow is preseant.\n \n             --  Otherwise we have an aspect definition\n "}, {"sha": "e49c51c86718bce4dd3b634206166fb5a7d2c14a", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=bc3c2eca1aa80b667f9e80773919755669d03e82", "patch": "@@ -3661,16 +3661,11 @@ package body Sem_Eval is\n       --  Test for illegal Ada 95 cases. A string literal is illegal in Ada 95\n       --  if its bounds are outside the index base type and this index type is\n       --  static. This can happen in only two ways. Either the string literal\n-      --  is too long, or it is null, and the lower bound is type'First. In\n-      --  either case it is the upper bound that is out of range of the index\n-      --  type.\n+      --  is too long, or it is null, and the lower bound is type'First. Either\n+      --  way it is the upper bound that is out of range of the index type.\n+\n       if Ada_Version >= Ada_95 then\n-         if Root_Type (Bas) = Standard_String\n-              or else\n-            Root_Type (Bas) = Standard_Wide_String\n-              or else\n-            Root_Type (Bas) = Standard_Wide_Wide_String\n-         then\n+         if Is_Standard_String_Type (Bas) then\n             Xtp := Standard_Positive;\n          else\n             Xtp := Etype (First_Index (Bas));"}, {"sha": "7bdda640731757fb435e571153e330b837e91e3f", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc3c2eca1aa80b667f9e80773919755669d03e82/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=bc3c2eca1aa80b667f9e80773919755669d03e82", "patch": "@@ -3650,11 +3650,7 @@ package body Sem_Warn is\n          if Is_Array_Type (Typ)\n            and then not Is_Constrained (Typ)\n            and then Number_Dimensions (Typ) = 1\n-           and then (Root_Type (Typ) = Standard_String\n-                       or else\n-                     Root_Type (Typ) = Standard_Wide_String\n-                       or else\n-                     Root_Type (Typ) = Standard_Wide_Wide_String)\n+           and then Is_Standard_String_Type (Typ)\n            and then not Has_Warnings_Off (Typ)\n          then\n             LB := Type_Low_Bound (Etype (First_Index (Typ)));"}]}