{"sha": "1a33dc9ec24fed0406de07f54e0442915e3cfedb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEzM2RjOWVjMjRmZWQwNDA2ZGUwN2Y1NGUwNDQyOTE1ZTNjZmVkYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2014-12-31T14:50:10Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-12-31T14:50:10Z"}, "message": "trans-array.c (trans_array_bound_check): Use xasprintf instead of unchecked asprintf.\n\n\t* trans-array.c (trans_array_bound_check): Use xasprintf instead\n\tof unchecked asprintf.\n\t(gfc_conv_array_ref): Ditto.\n\t(gfc_conv_ss_startstride): Ditto.\n\t(gfc_trans_dummy_array_bias): Ditto.\n\t(gfc_conv_array_parameter): Ditto.\n\t* trans-decl.c (gfc_generate_function_code): Ditto.\n\t* trans-expr.c (gfc_conv_substring): Ditto.\n\t(gfc_conv_procedure_call): Ditto.\n\t* trans-io.c (gfc_trans_io_runtime_check): Ditto.\n\t(set_string): Ditto.\n\t* trans.c (trans-runtime_error_vararg): Ditto.\n\nFrom-SVN: r219126", "tree": {"sha": "5b0e17f5acd2cb905b0d28cea526ba21ab59c791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b0e17f5acd2cb905b0d28cea526ba21ab59c791"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a33dc9ec24fed0406de07f54e0442915e3cfedb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a33dc9ec24fed0406de07f54e0442915e3cfedb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a33dc9ec24fed0406de07f54e0442915e3cfedb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a33dc9ec24fed0406de07f54e0442915e3cfedb/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8ef82d74f40e216b3a1c9707a79a3bd0b6c953d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8ef82d74f40e216b3a1c9707a79a3bd0b6c953d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8ef82d74f40e216b3a1c9707a79a3bd0b6c953d"}], "stats": {"total": 148, "additions": 82, "deletions": 66}, "files": [{"sha": "10ad0bf2a3544c08a79104da6b3b813f7224cba3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a33dc9ec24fed0406de07f54e0442915e3cfedb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a33dc9ec24fed0406de07f54e0442915e3cfedb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1a33dc9ec24fed0406de07f54e0442915e3cfedb", "patch": "@@ -1,3 +1,18 @@\n+2014-12-31  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* trans-array.c (trans_array_bound_check): Use xasprintf instead\n+\tof unchecked asprintf.\n+\t(gfc_conv_array_ref): Ditto.\n+\t(gfc_conv_ss_startstride): Ditto.\n+\t(gfc_trans_dummy_array_bias): Ditto.\n+\t(gfc_conv_array_parameter): Ditto.\n+\t* trans-decl.c (gfc_generate_function_code): Ditto.\n+\t* trans-expr.c (gfc_conv_substring): Ditto.\n+\t(gfc_conv_procedure_call): Ditto.\n+\t* trans-io.c (gfc_trans_io_runtime_check): Ditto.\n+\t(set_string): Ditto.\n+\t* trans.c (trans-runtime_error_vararg): Ditto.\n+\n 2014-12-29  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/60357"}, {"sha": "07a9873be861d142aa877ccc0951025681314509", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a33dc9ec24fed0406de07f54e0442915e3cfedb/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a33dc9ec24fed0406de07f54e0442915e3cfedb/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=1a33dc9ec24fed0406de07f54e0442915e3cfedb", "patch": "@@ -2799,11 +2799,11 @@ trans_array_bound_check (gfc_se * se, gfc_ss *ss, tree index, int n,\n       tmp_up = gfc_conv_array_ubound (descriptor, n);\n \n       if (name)\n-\tasprintf (&msg, \"Index '%%ld' of dimension %d of array '%s' \"\n-\t\t  \"outside of expected range (%%ld:%%ld)\", n+1, name);\n+\tmsg = xasprintf (\"Index '%%ld' of dimension %d of array '%s' \"\n+\t\t\t \"outside of expected range (%%ld:%%ld)\", n+1, name);\n       else\n-\tasprintf (&msg, \"Index '%%ld' of dimension %d \"\n-\t\t  \"outside of expected range (%%ld:%%ld)\", n+1);\n+\tmsg = xasprintf (\"Index '%%ld' of dimension %d \"\n+\t\t\t \"outside of expected range (%%ld:%%ld)\", n+1);\n \n       fault = fold_build2_loc (input_location, LT_EXPR, boolean_type_node,\n \t\t\t       index, tmp_lo);\n@@ -2824,11 +2824,11 @@ trans_array_bound_check (gfc_se * se, gfc_ss *ss, tree index, int n,\n       tmp_lo = gfc_conv_array_lbound (descriptor, n);\n \n       if (name)\n-\tasprintf (&msg, \"Index '%%ld' of dimension %d of array '%s' \"\n-\t\t  \"below lower bound of %%ld\", n+1, name);\n+\tmsg = xasprintf (\"Index '%%ld' of dimension %d of array '%s' \"\n+\t\t\t \"below lower bound of %%ld\", n+1, name);\n       else\n-\tasprintf (&msg, \"Index '%%ld' of dimension %d \"\n-\t\t  \"below lower bound of %%ld\", n+1);\n+\tmsg = xasprintf (\"Index '%%ld' of dimension %d \"\n+\t\t\t \"below lower bound of %%ld\", n+1);\n \n       fault = fold_build2_loc (input_location, LT_EXPR, boolean_type_node,\n \t\t\t       index, tmp_lo);\n@@ -3259,8 +3259,8 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_expr *expr,\n \n \t  cond = fold_build2_loc (input_location, LT_EXPR, boolean_type_node,\n \t\t\t\t  indexse.expr, tmp);\n-\t  asprintf (&msg, \"Index '%%ld' of dimension %d of array '%s' \"\n-\t\t    \"below lower bound of %%ld\", n+1, var_name);\n+\t  msg = xasprintf (\"Index '%%ld' of dimension %d of array '%s' \"\n+\t\t\t   \"below lower bound of %%ld\", n+1, var_name);\n \t  gfc_trans_runtime_check (true, false, cond, &se->pre, where, msg,\n \t\t\t\t   fold_convert (long_integer_type_node,\n \t\t\t\t\t\t indexse.expr),\n@@ -3283,8 +3283,8 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_expr *expr,\n \n \t      cond = fold_build2_loc (input_location, GT_EXPR,\n \t\t\t\t      boolean_type_node, indexse.expr, tmp);\n-\t      asprintf (&msg, \"Index '%%ld' of dimension %d of array '%s' \"\n-\t\t\t\"above upper bound of %%ld\", n+1, var_name);\n+\t      msg = xasprintf (\"Index '%%ld' of dimension %d of array '%s' \"\n+\t\t\t       \"above upper bound of %%ld\", n+1, var_name);\n \t      gfc_trans_runtime_check (true, false, cond, &se->pre, where, msg,\n \t\t\t\t   fold_convert (long_integer_type_node,\n \t\t\t\t\t\t indexse.expr),\n@@ -3981,8 +3981,8 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t      /* Zero stride is not allowed.  */\n \t      tmp = fold_build2_loc (input_location, EQ_EXPR, boolean_type_node,\n \t\t\t\t     info->stride[dim], gfc_index_zero_node);\n-\t      asprintf (&msg, \"Zero stride is not allowed, for dimension %d \"\n-\t\t\t\"of array '%s'\", dim + 1, expr_name);\n+\t      msg = xasprintf (\"Zero stride is not allowed, for dimension %d \"\n+\t\t\t       \"of array '%s'\", dim + 1, expr_name);\n \t      gfc_trans_runtime_check (true, false, tmp, &inner,\n \t\t\t\t       expr_loc, msg);\n \t      free (msg);\n@@ -4039,9 +4039,9 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t\t  tmp2 = fold_build2_loc (input_location, TRUTH_AND_EXPR,\n \t\t\t\t\t  boolean_type_node,\n \t\t\t\t\t  non_zerosized, tmp2);\n-\t\t  asprintf (&msg, \"Index '%%ld' of dimension %d of array '%s' \"\n-\t\t\t    \"outside of expected range (%%ld:%%ld)\",\n-\t\t\t    dim + 1, expr_name);\n+\t\t  msg = xasprintf (\"Index '%%ld' of dimension %d of array '%s' \"\n+\t\t\t\t   \"outside of expected range (%%ld:%%ld)\",\n+\t\t\t\t   dim + 1, expr_name);\n \t\t  gfc_trans_runtime_check (true, false, tmp, &inner,\n \t\t\t\t\t   expr_loc, msg,\n \t\t     fold_convert (long_integer_type_node, info->start[dim]),\n@@ -4061,9 +4061,9 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t\t\t\t\t info->start[dim], lbound);\n \t\t  tmp = fold_build2_loc (input_location, TRUTH_AND_EXPR,\n \t\t\t\t\t boolean_type_node, non_zerosized, tmp);\n-\t\t  asprintf (&msg, \"Index '%%ld' of dimension %d of array '%s' \"\n-\t\t\t    \"below lower bound of %%ld\",\n-\t\t\t    dim + 1, expr_name);\n+\t\t  msg = xasprintf (\"Index '%%ld' of dimension %d of array '%s' \"\n+\t\t\t\t   \"below lower bound of %%ld\",\n+\t\t\t\t   dim + 1, expr_name);\n \t\t  gfc_trans_runtime_check (true, false, tmp, &inner,\n \t\t\t\t\t   expr_loc, msg,\n \t\t     fold_convert (long_integer_type_node, info->start[dim]),\n@@ -4093,9 +4093,9 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t\t\t\t\t  boolean_type_node, tmp, ubound);\n \t\t  tmp3 = fold_build2_loc (input_location, TRUTH_AND_EXPR,\n \t\t\t\t\t  boolean_type_node, non_zerosized, tmp3);\n-\t\t  asprintf (&msg, \"Index '%%ld' of dimension %d of array '%s' \"\n-\t\t\t    \"outside of expected range (%%ld:%%ld)\",\n-\t\t\t    dim + 1, expr_name);\n+\t\t  msg = xasprintf (\"Index '%%ld' of dimension %d of array '%s' \"\n+\t\t\t\t   \"outside of expected range (%%ld:%%ld)\",\n+\t\t\t\t   dim + 1, expr_name);\n \t\t  gfc_trans_runtime_check (true, false, tmp2, &inner,\n \t\t\t\t\t   expr_loc, msg,\n \t\t     fold_convert (long_integer_type_node, tmp),\n@@ -4110,9 +4110,9 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t\t}\n \t      else\n \t\t{\n-\t\t  asprintf (&msg, \"Index '%%ld' of dimension %d of array '%s' \"\n-\t\t\t    \"below lower bound of %%ld\",\n-\t\t\t    dim + 1, expr_name);\n+\t\t  msg = xasprintf (\"Index '%%ld' of dimension %d of array '%s' \"\n+\t\t\t\t   \"below lower bound of %%ld\",\n+\t\t\t\t   dim + 1, expr_name);\n \t\t  gfc_trans_runtime_check (true, false, tmp2, &inner,\n \t\t\t\t\t   expr_loc, msg,\n \t\t     fold_convert (long_integer_type_node, tmp),\n@@ -4139,9 +4139,9 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t\t{\n \t\t  tmp3 = fold_build2_loc (input_location, NE_EXPR,\n \t\t\t\t\t  boolean_type_node, tmp, size[n]);\n-\t\t  asprintf (&msg, \"Array bound mismatch for dimension %d \"\n-\t\t\t    \"of array '%s' (%%ld/%%ld)\",\n-\t\t\t    dim + 1, expr_name);\n+\t\t  msg = xasprintf (\"Array bound mismatch for dimension %d \"\n+\t\t\t\t   \"of array '%s' (%%ld/%%ld)\",\n+\t\t\t\t   dim + 1, expr_name);\n \n \t\t  gfc_trans_runtime_check (true, false, tmp3, &inner,\n \t\t\t\t\t   expr_loc, msg,\n@@ -6013,8 +6013,8 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc,\n \t\t\t\t\t gfc_index_one_node, stride2);\n \t      tmp = fold_build2_loc (input_location, NE_EXPR,\n \t\t\t\t     gfc_array_index_type, temp, stride2);\n-\t      asprintf (&msg, \"Dimension %d of array '%s' has extent \"\n-\t\t\t\"%%ld instead of %%ld\", n+1, sym->name);\n+\t      msg = xasprintf (\"Dimension %d of array '%s' has extent \"\n+\t\t\t       \"%%ld instead of %%ld\", n+1, sym->name);\n \n \t      gfc_trans_runtime_check (true, false, tmp, &init, &loc, msg,\n \t\t\tfold_convert (long_integer_type_node, temp),\n@@ -7292,10 +7292,10 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, bool g77,\n \t  char * msg;\n \n \t  if (fsym && proc_name)\n-\t    asprintf (&msg, \"An array temporary was created for argument \"\n-\t\t      \"'%s' of procedure '%s'\", fsym->name, proc_name);\n+\t    msg = xasprintf (\"An array temporary was created for argument \"\n+\t\t\t     \"'%s' of procedure '%s'\", fsym->name, proc_name);\n \t  else\n-\t    asprintf (&msg, \"An array temporary was created\");\n+\t    msg = xasprintf (\"An array temporary was created\");\n \n \t  tmp = build_fold_indirect_ref_loc (input_location,\n \t\t\t\t\t desc);"}, {"sha": "75b84f1495bb68a340035b25da6b01b588b7f6dc", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a33dc9ec24fed0406de07f54e0442915e3cfedb/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a33dc9ec24fed0406de07f54e0442915e3cfedb/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=1a33dc9ec24fed0406de07f54e0442915e3cfedb", "patch": "@@ -5723,8 +5723,8 @@ gfc_generate_function_code (gfc_namespace * ns)\n     {\n       char * msg;\n \n-      asprintf (&msg, \"Recursive call to nonrecursive procedure '%s'\",\n-\t\tsym->name);\n+      msg = xasprintf (\"Recursive call to nonrecursive procedure '%s'\",\n+\t\t       sym->name);\n       recurcheckvar = gfc_create_var (boolean_type_node, \"is_recursive\");\n       TREE_STATIC (recurcheckvar) = 1;\n       DECL_INITIAL (recurcheckvar) = boolean_false_node;"}, {"sha": "85c77b735ea6df785bc1a7c47aa2f624c24efc4f", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a33dc9ec24fed0406de07f54e0442915e3cfedb/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a33dc9ec24fed0406de07f54e0442915e3cfedb/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=1a33dc9ec24fed0406de07f54e0442915e3cfedb", "patch": "@@ -1799,11 +1799,11 @@ gfc_conv_substring (gfc_se * se, gfc_ref * ref, int kind,\n       fault = fold_build2_loc (input_location, TRUTH_ANDIF_EXPR,\n \t\t\t       boolean_type_node, nonempty, fault);\n       if (name)\n-\tasprintf (&msg, \"Substring out of bounds: lower bound (%%ld) of '%s' \"\n-\t\t  \"is less than one\", name);\n+\tmsg = xasprintf (\"Substring out of bounds: lower bound (%%ld) of '%s' \"\n+\t\t\t \"is less than one\", name);\n       else\n-\tasprintf (&msg, \"Substring out of bounds: lower bound (%%ld)\"\n-\t\t  \"is less than one\");\n+\tmsg = xasprintf (\"Substring out of bounds: lower bound (%%ld)\"\n+\t\t\t \"is less than one\");\n       gfc_trans_runtime_check (true, false, fault, &se->pre, where, msg,\n \t\t\t       fold_convert (long_integer_type_node,\n \t\t\t\t\t     start.expr));\n@@ -1815,11 +1815,11 @@ gfc_conv_substring (gfc_se * se, gfc_ref * ref, int kind,\n       fault = fold_build2_loc (input_location, TRUTH_ANDIF_EXPR,\n \t\t\t       boolean_type_node, nonempty, fault);\n       if (name)\n-\tasprintf (&msg, \"Substring out of bounds: upper bound (%%ld) of '%s' \"\n-\t\t  \"exceeds string length (%%ld)\", name);\n+\tmsg = xasprintf (\"Substring out of bounds: upper bound (%%ld) of '%s' \"\n+\t\t\t \"exceeds string length (%%ld)\", name);\n       else\n-\tasprintf (&msg, \"Substring out of bounds: upper bound (%%ld) \"\n-\t\t  \"exceeds string length (%%ld)\");\n+\tmsg = xasprintf (\"Substring out of bounds: upper bound (%%ld) \"\n+\t\t\t \"exceeds string length (%%ld)\");\n       gfc_trans_runtime_check (true, false, fault, &se->pre, where, msg,\n \t\t\t       fold_convert (long_integer_type_node, end.expr),\n \t\t\t       fold_convert (long_integer_type_node,\n@@ -4930,18 +4930,19 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \n \t      if (attr.allocatable\n \t\t  && (fsym == NULL || !fsym->attr.allocatable))\n-\t\tasprintf (&msg, \"Allocatable actual argument '%s' is not \"\n-\t\t\t  \"allocated or not present\", e->symtree->n.sym->name);\n+\t\tmsg = xasprintf (\"Allocatable actual argument '%s' is not \"\n+\t\t\t\t \"allocated or not present\",\n+\t\t\t\t e->symtree->n.sym->name);\n \t      else if (attr.pointer\n \t\t       && (fsym == NULL || !fsym->attr.pointer))\n-\t\tasprintf (&msg, \"Pointer actual argument '%s' is not \"\n-\t\t\t  \"associated or not present\",\n-\t\t\t  e->symtree->n.sym->name);\n+\t\tmsg = xasprintf (\"Pointer actual argument '%s' is not \"\n+\t\t\t\t \"associated or not present\",\n+\t\t\t\t e->symtree->n.sym->name);\n \t      else if (attr.proc_pointer\n \t\t       && (fsym == NULL || !fsym->attr.proc_pointer))\n-\t\tasprintf (&msg, \"Proc-pointer actual argument '%s' is not \"\n-\t\t\t  \"associated or not present\",\n-\t\t\t  e->symtree->n.sym->name);\n+\t\tmsg = xasprintf (\"Proc-pointer actual argument '%s' is not \"\n+\t\t\t\t \"associated or not present\",\n+\t\t\t\t e->symtree->n.sym->name);\n \t      else\n \t\tgoto end_pointer_check;\n \n@@ -4963,16 +4964,16 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t    {\n \t      if (attr.allocatable\n \t\t  && (fsym == NULL || !fsym->attr.allocatable))\n-\t\tasprintf (&msg, \"Allocatable actual argument '%s' is not \"\n-\t\t      \"allocated\", e->symtree->n.sym->name);\n+\t\tmsg = xasprintf (\"Allocatable actual argument '%s' is not \"\n+\t\t\t\t \"allocated\", e->symtree->n.sym->name);\n \t      else if (attr.pointer\n \t\t       && (fsym == NULL || !fsym->attr.pointer))\n-\t\tasprintf (&msg, \"Pointer actual argument '%s' is not \"\n-\t\t      \"associated\", e->symtree->n.sym->name);\n+\t\tmsg = xasprintf (\"Pointer actual argument '%s' is not \"\n+\t\t\t\t \"associated\", e->symtree->n.sym->name);\n \t      else if (attr.proc_pointer\n \t\t       && (fsym == NULL || !fsym->attr.proc_pointer))\n-\t\tasprintf (&msg, \"Proc-pointer actual argument '%s' is not \"\n-\t\t      \"associated\", e->symtree->n.sym->name);\n+\t\tmsg = xasprintf (\"Proc-pointer actual argument '%s' is not \"\n+\t\t\t\t \"associated\", e->symtree->n.sym->name);\n \t      else\n \t\tgoto end_pointer_check;\n "}, {"sha": "3ef223b4b2047d18f28c892a242f6864ab13663c", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a33dc9ec24fed0406de07f54e0442915e3cfedb/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a33dc9ec24fed0406de07f54e0442915e3cfedb/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=1a33dc9ec24fed0406de07f54e0442915e3cfedb", "patch": "@@ -258,7 +258,7 @@ gfc_trans_io_runtime_check (bool has_iostat, tree cond, tree var,\n \n   arg2 = build_int_cst (integer_type_node, error_code),\n \n-  asprintf (&message, \"%s\", _(msgid));\n+  message = xasprintf (\"%s\", _(msgid));\n   arg3 = gfc_build_addr_expr (pchar_type_node,\n \t\t\t      gfc_build_localized_cstring_const (message));\n   free (message);\n@@ -715,8 +715,8 @@ set_string (stmtblock_t * block, stmtblock_t * postblock, tree var,\n       cond = fold_build2_loc (input_location, LT_EXPR, boolean_type_node,\n \t\t\t      tmp, build_int_cst (TREE_TYPE (tmp), 0));\n \n-      asprintf(&msg, \"Label assigned to variable '%s' (%%ld) is not a format \"\n-\t       \"label\", e->symtree->name);\n+      msg = xasprintf (\"Label assigned to variable '%s' (%%ld) is not a format \"\n+\t\t       \"label\", e->symtree->name);\n       gfc_trans_runtime_check (true, false, cond, &se.pre, &e->where, msg,\n \t\t\t       fold_convert (long_integer_type_node, tmp));\n       free (msg);"}, {"sha": "af6830c64b8dd782ca0d9b7e0f60c1f6e8720f6e", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a33dc9ec24fed0406de07f54e0442915e3cfedb/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a33dc9ec24fed0406de07f54e0442915e3cfedb/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=1a33dc9ec24fed0406de07f54e0442915e3cfedb", "patch": "@@ -418,18 +418,18 @@ trans_runtime_error_vararg (bool error, locus* where, const char* msgid,\n   if (where)\n     {\n       line = LOCATION_LINE (where->lb->location);\n-      asprintf (&message, \"At line %d of file %s\",  line,\n-\t\twhere->lb->file->filename);\n+      message = xasprintf (\"At line %d of file %s\",  line,\n+\t\t\t   where->lb->file->filename);\n     }\n   else\n-    asprintf (&message, \"In file '%s', around line %d\",\n-\t      gfc_source_file, LOCATION_LINE (input_location) + 1);\n+    message = xasprintf (\"In file '%s', around line %d\",\n+\t\t\t gfc_source_file, LOCATION_LINE (input_location) + 1);\n \n   arg = gfc_build_addr_expr (pchar_type_node,\n \t\t\t     gfc_build_localized_cstring_const (message));\n   free (message);\n \n-  asprintf (&message, \"%s\", _(msgid));\n+  message = xasprintf (\"%s\", _(msgid));\n   arg2 = gfc_build_addr_expr (pchar_type_node,\n \t\t\t      gfc_build_localized_cstring_const (message));\n   free (message);"}]}