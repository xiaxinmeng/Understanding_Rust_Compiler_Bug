{"sha": "948d461954f2642ca187f86c19d297ba7a86320f", "node_id": "C_kwDOANBUbNoAKDk0OGQ0NjE5NTRmMjY0MmNhMTg3Zjg2YzE5ZDI5N2JhN2E4NjMyMGY", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-10-30T21:45:32Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-10-30T21:45:32Z"}, "message": "OpenMP: Add strictly nested API call check [PR102972]\n\nThe teams construct only permits omp_get_num_teams and omp_get_team_num\nas API call in strictly nested regions - check for it.\n\nAdditionally, for Fortran, using DECL_NAME does not show the mangled\nname, hence, DECL_ASSEMBLER_NAME had to be used to.\n\nFinally, 'target device(ancestor:1)' wrongly rejected non-API calls\nas well.\n\n\tPR middle-end/102972\ngcc/ChangeLog:\n\n\t* omp-low.c (omp_runtime_api_call): Use DECL_ASSEMBLER_NAME to get\n\tinternal Fortran name; new permit_num_teams arg to permit\n\tomp_get_num_teams and omp_get_team_num.\n\t(scan_omp_1_stmt): Update call to it, add missing call for\n\treverse offload, and check for strictly nested API calls in teams.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/gomp/target-device-ancestor-3.c: Add non-API\n\troutine test.\n\t* gfortran.dg/gomp/order-6.f90: Add missing bind(C).\n\t* c-c++-common/gomp/teams-3.c: New test.\n\t* gfortran.dg/gomp/teams-3.f90: New test.\n\t* gfortran.dg/gomp/teams-4.f90: New test.\n\nlibgomp/ChangeLog:\n\t* testsuite/libgomp.c-c++-common/icv-3.c: Nest API calls inside\n\tparallel construct.\n\t* testsuite/libgomp.c-c++-common/icv-4.c: Likewise.\n\t* testsuite/libgomp.c/target-3.c: Likewise.\n\t* testsuite/libgomp.c/target-5.c: Likewise.\n\t* testsuite/libgomp.c/target-6.c: Likewise.\n\t* testsuite/libgomp.c/target-teams-1.c: Likewise.\n\t* testsuite/libgomp.c/teams-1.c: Likewise.\n\t* testsuite/libgomp.c/thread-limit-2.c: Likewise.\n\t* testsuite/libgomp.c/thread-limit-3.c: Likewise.\n\t* testsuite/libgomp.c/thread-limit-4.c: Likewise.\n\t* testsuite/libgomp.c/thread-limit-5.c: Likewise.\n\t* testsuite/libgomp.fortran/icv-3.f90: Likewise.\n\t* testsuite/libgomp.fortran/icv-4.f90: Likewise.\n\t* testsuite/libgomp.fortran/teams1.f90: Likewise.", "tree": {"sha": "6e0bf27085917c296ca7e233a3b551d949ea4232", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e0bf27085917c296ca7e233a3b551d949ea4232"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/948d461954f2642ca187f86c19d297ba7a86320f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/948d461954f2642ca187f86c19d297ba7a86320f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/948d461954f2642ca187f86c19d297ba7a86320f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/948d461954f2642ca187f86c19d297ba7a86320f/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90ba129c9d787b985f338f70713f7be74aaa5091", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ba129c9d787b985f338f70713f7be74aaa5091", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90ba129c9d787b985f338f70713f7be74aaa5091"}], "stats": {"total": 427, "additions": 348, "deletions": 79}, "files": [{"sha": "f58a191e014cb751b4fc95129e47eb1b872792b3", "filename": "gcc/omp-low.c", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948d461954f2642ca187f86c19d297ba7a86320f/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948d461954f2642ca187f86c19d297ba7a86320f/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=948d461954f2642ca187f86c19d297ba7a86320f", "patch": "@@ -3942,7 +3942,8 @@ omp_runtime_api_call (const_tree fndecl)\n       \"target_memcpy\",\n       \"target_memcpy_rect\",\n       NULL,\n-      /* Now omp_* calls that are available as omp_* and omp_*_.  */\n+      /* Now omp_* calls that are available as omp_* and omp_*_; however, the\n+\t DECL_NAME is always omp_* without tailing underscore.  */\n       \"capture_affinity\",\n       \"destroy_allocator\",\n       \"destroy_lock\",\n@@ -3994,7 +3995,8 @@ omp_runtime_api_call (const_tree fndecl)\n       \"unset_lock\",\n       \"unset_nest_lock\",\n       NULL,\n-      /* And finally calls available as omp_*, omp_*_ and omp_*_8_.  */\n+      /* And finally calls available as omp_*, omp_*_ and omp_*_8_; however,\n+\t as DECL_NAME only omp_* and omp_*_8 appear.  */\n       \"display_env\",\n       \"get_ancestor_thread_num\",\n       \"init_allocator\",\n@@ -4024,11 +4026,7 @@ omp_runtime_api_call (const_tree fndecl)\n       size_t len = strlen (omp_runtime_apis[i]);\n       if (strncmp (name + 4, omp_runtime_apis[i], len) == 0\n \t  && (name[4 + len] == '\\0'\n-\t      || (mode > 0\n-\t\t  && name[4 + len] == '_'\n-\t\t  && (name[4 + len + 1] == '\\0'\n-\t\t      || (mode > 1\n-\t\t\t  && strcmp (name + 4 + len + 1, \"8_\") == 0)))))\n+\t      || (mode > 1 && strcmp (name + 4 + len, \"_8\") == 0)))\n \treturn true;\n     }\n   return false;\n@@ -4095,9 +4093,26 @@ scan_omp_1_stmt (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n \t\t\t    \"OpenMP runtime API call %qD in a region with \"\n \t\t\t    \"%<order(concurrent)%> clause\", fndecl);\n \t\t}\n+\t      if (gimple_code (ctx->stmt) == GIMPLE_OMP_TEAMS\n+\t\t  && omp_runtime_api_call (fndecl)\n+\t\t  && ((IDENTIFIER_LENGTH (DECL_NAME (fndecl))\n+\t\t       != strlen (\"omp_get_num_teams\"))\n+\t\t      || strcmp (IDENTIFIER_POINTER (DECL_NAME (fndecl)),\n+\t\t\t\t \"omp_get_num_teams\") != 0)\n+\t\t  && ((IDENTIFIER_LENGTH (DECL_NAME (fndecl))\n+\t\t       != strlen (\"omp_get_team_num\"))\n+\t\t      || strcmp (IDENTIFIER_POINTER (DECL_NAME (fndecl)),\n+\t\t\t\t \"omp_get_team_num\") != 0))\n+\t\t{\n+\t\t  remove = true;\n+\t\t  error_at (gimple_location (stmt),\n+\t\t\t    \"OpenMP runtime API call %qD strictly nested in a \"\n+\t\t\t    \"%<teams%> region\", fndecl);\n+\t\t}\n \t      if (gimple_code (ctx->stmt) == GIMPLE_OMP_TARGET\n \t\t  && (gimple_omp_target_kind (ctx->stmt)\n-\t\t      == GF_OMP_TARGET_KIND_REGION))\n+\t\t      == GF_OMP_TARGET_KIND_REGION)\n+\t\t  && omp_runtime_api_call (fndecl))\n \t\t{\n \t\t  tree tgt_clauses = gimple_omp_target_clauses (ctx->stmt);\n \t\t  tree c = omp_find_clause (tgt_clauses, OMP_CLAUSE_DEVICE);"}, {"sha": "ea6e5a0cf6c5e1d2c67714b648234492001d3eb2", "filename": "gcc/testsuite/c-c++-common/gomp/target-device-ancestor-3.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948d461954f2642ca187f86c19d297ba7a86320f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ftarget-device-ancestor-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948d461954f2642ca187f86c19d297ba7a86320f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ftarget-device-ancestor-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Ftarget-device-ancestor-3.c?ref=948d461954f2642ca187f86c19d297ba7a86320f", "patch": "@@ -3,6 +3,7 @@ extern \"C\" {\n #endif\n \n int omp_get_num_teams (void);\n+int bar (void);\n \n #ifdef __cplusplus\n }\n@@ -22,6 +23,7 @@ foo (void)\n \n   #pragma omp target device (ancestor: 1)\n     {\n+      a = bar (); /* OK */\n       a = omp_get_num_teams (); /* { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_get_num_teams\\[^\\n\\r]*' in a region with 'device\\\\(ancestor\\\\)' clause\" }  */\n     }\n "}, {"sha": "7f8b47f7df075d14cfc0a1da99e72edffe4f124d", "filename": "gcc/testsuite/c-c++-common/gomp/teams-3.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948d461954f2642ca187f86c19d297ba7a86320f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fteams-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948d461954f2642ca187f86c19d297ba7a86320f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fteams-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fteams-3.c?ref=948d461954f2642ca187f86c19d297ba7a86320f", "patch": "@@ -0,0 +1,64 @@\n+/* PR middle-end/102972 */\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/* From omp.h  */\n+extern int omp_get_num_teams (void);\n+extern void omp_set_num_teams (int);\n+extern int omp_get_team_size (int);\n+extern int omp_get_team_num (void);\n+extern int omp_get_max_teams (void);\n+extern void omp_set_teams_thread_limit (int);\n+extern int omp_get_teams_thread_limit (void);\n+extern int omp_is_initial_device (void);\n+extern int omp_get_num_threads (void);\n+\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+\n+void valid ()\n+{\n+  #pragma omp teams\n+  {\n+    #pragma omp distribute\n+    for (int i = 0; i < 64; i++)\n+      ;\n+\n+    int n = omp_get_num_teams ();\n+    if (n >= omp_get_team_num ())\n+      __builtin_abort ();\n+\n+    #pragma omp parallel for\n+    for (int i = 0; i < 64; i++)\n+      if (!omp_is_initial_device () || omp_get_num_threads () < 0)\n+\t__builtin_abort ();\n+\n+    #pragma omp loop\n+    for (int i = 0; i < 64; i++)\n+      ;\n+  }\n+}\n+\n+void invalid_nest ()\n+{\n+  #pragma omp teams\n+  {\n+    #pragma distribute parallel for simd\n+    for (int i = 0; i < 64; i++)\n+      ;\n+\n+    int n = 0;\n+    n += omp_get_team_size (0);  /* { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_get_team_size\\[^\\n\\r]*' strictly nested in a 'teams' region\" }  */\n+    n += omp_get_num_teams ();\n+    n += omp_get_team_num ();\n+    omp_set_num_teams (n);  /* { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_set_num_teams\\[^\\n\\r]*' strictly nested in a 'teams' region\" }  */\n+    n += omp_get_max_teams ();  /* { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_get_max_teams\\[^\\n\\r]*' strictly nested in a 'teams' region\" }  */\n+    n += omp_get_teams_thread_limit ();  /* { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_get_teams_thread_limit\\[^\\n\\r]*' strictly nested in a 'teams' region\" }  */\n+    omp_set_teams_thread_limit (n);  /* { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_set_teams_thread_limit\\[^\\n\\r]*' strictly nested in a 'teams' region\" }  */\n+  }\n+}"}, {"sha": "8d7f9c57a98dd78edb1ca6d46b2dcd576a03ea6b", "filename": "gcc/testsuite/gfortran.dg/gomp/order-6.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948d461954f2642ca187f86c19d297ba7a86320f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Forder-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948d461954f2642ca187f86c19d297ba7a86320f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Forder-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Forder-6.f90?ref=948d461954f2642ca187f86c19d297ba7a86320f", "patch": "@@ -8,7 +8,7 @@ integer function omp_get_thread_num ()\n     end\n     integer function omp_get_num_threads ()\n     end\n-    integer function omp_target_is_present (x, i)\n+    integer function omp_target_is_present (x, i) bind(c)\n       import :: c_ptr\n       type(c_ptr) :: x\n       integer, value :: i"}, {"sha": "fac3393bd9d165aa094cf4397e08bebc2fc3be67", "filename": "gcc/testsuite/gfortran.dg/gomp/teams-3.f90", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948d461954f2642ca187f86c19d297ba7a86320f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fteams-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948d461954f2642ca187f86c19d297ba7a86320f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fteams-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fteams-3.f90?ref=948d461954f2642ca187f86c19d297ba7a86320f", "patch": "@@ -0,0 +1,65 @@\n+! PR middle-end/102972\n+\n+module m\n+implicit none (type, external)\n+interface\n+subroutine omp_set_num_teams (num_teams); integer :: num_teams; end\n+subroutine omp_set_teams_thread_limit (thread_limit); integer :: thread_limit; end\n+subroutine omp_set_num_teams_8 (num_teams); integer(8) :: num_teams; end\n+subroutine omp_set_num_teams_9 (num_teams); integer :: num_teams; end\n+subroutine omp_set_teams_thread_limit_8 (thread_limit); integer(8) :: thread_limit; end\n+integer function omp_get_num_teams (); end\n+integer function omp_get_team_size (level); integer :: level; end\n+integer function omp_get_team_num (); end\n+integer function omp_get_max_teams (); end\n+integer function omp_get_teams_thread_limit (); end\n+logical function omp_is_initial_device (); end\n+integer function omp_get_num_threads (); end\n+end interface\n+\n+contains\n+\n+subroutine valid ()\n+  integer :: i, n\n+  !$omp teams\n+    !$omp distribute\n+    do i = 1, 64\n+    end do\n+\n+    n = omp_get_num_teams ()\n+    if (n >= omp_get_team_num ()) &\n+      error stop\n+\n+    !$omp parallel do\n+    do i = 1, 64\n+      if (.not.omp_is_initial_device () .or. omp_get_num_threads () < 0) &\n+        error stop\n+    end do\n+\n+    !$omp loop\n+    do i = 1, 64\n+    end do\n+  !$omp end teams\n+end\n+\n+subroutine invalid_nest ()\n+  integer :: i, n\n+  !$omp teams\n+    !$omp distribute parallel do simd\n+    do i = 1, 64\n+    end do\n+\n+    n = 0\n+    n = n + omp_get_team_size (0)  ! { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_get_team_size\\[^\\n\\r]*' strictly nested in a 'teams' region\" }\n+    n = n + omp_get_num_teams ()\n+    n = n + omp_get_team_num ()\n+    call omp_set_num_teams (n)  ! { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_set_num_teams\\[^\\n\\r]*' strictly nested in a 'teams' region\" }\n+    call omp_set_num_teams_8 (4_8)  ! { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_set_num_teams_8\\[^\\n\\r]*' strictly nested in a 'teams' region\" }\n+    call omp_set_num_teams_9 (4)  ! OK - but misnamed user function\n+    n = n + omp_get_max_teams ()  ! { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_get_max_teams\\[^\\n\\r]*' strictly nested in a 'teams' region\" }\n+    n = n + omp_get_teams_thread_limit ()  ! { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_get_teams_thread_limit\\[^\\n\\r]*' strictly nested in a 'teams' region\" }\n+    call omp_set_teams_thread_limit (n)  ! { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_set_teams_thread_limit'\\[^\\n\\r]* strictly nested in a 'teams' region\" }\n+    call omp_set_teams_thread_limit_8 (3_8)  ! { dg-error \"OpenMP runtime API call '\\[^\\n\\r]*omp_set_teams_thread_limit_8'\\[^\\n\\r]* strictly nested in a 'teams' region\" }\n+  !$omp end teams\n+end\n+end module"}, {"sha": "422c2c9ef929d10499f76f9271f7d65ded5904b3", "filename": "gcc/testsuite/gfortran.dg/gomp/teams-4.f90", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948d461954f2642ca187f86c19d297ba7a86320f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fteams-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948d461954f2642ca187f86c19d297ba7a86320f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fteams-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fteams-4.f90?ref=948d461954f2642ca187f86c19d297ba7a86320f", "patch": "@@ -0,0 +1,47 @@\n+! PR middle-end/102972\n+\n+module m\n+implicit none (type, external)\n+\n+! Note: Those are module functions - not an interface\n+! Hence, they are internally manged to contain the module name!\n+\n+contains\n+\n+subroutine omp_set_num_teams (num_teams); integer :: num_teams; end\n+subroutine omp_set_teams_thread_limit (thread_limit); integer :: thread_limit; end\n+subroutine omp_set_num_teams_8 (num_teams); integer(8) :: num_teams; end\n+subroutine omp_set_num_teams_9 (num_teams); integer :: num_teams; end\n+subroutine omp_set_teams_thread_limit_8 (thread_limit); integer(8) :: thread_limit; end\n+integer function omp_get_num_teams (); omp_get_num_teams = 0; end\n+integer function omp_get_team_size (level); integer :: level; omp_get_team_size = 0; end\n+integer function omp_get_team_num (); omp_get_team_num = 0; end\n+integer function omp_get_max_teams (); omp_get_max_teams = 0; end\n+integer function omp_get_teams_thread_limit (); omp_get_teams_thread_limit = 0; end\n+logical function omp_is_initial_device (); omp_is_initial_device = .true.; end\n+integer function omp_get_num_threads (); omp_get_num_threads = 0; end\n+end module\n+\n+subroutine nest_test ()\n+  use m\n+  implicit none (type, external)\n+  \n+  integer :: i, n\n+  !$omp teams\n+    !$omp distribute parallel do simd\n+    do i = 1, 64\n+    end do\n+\n+    n = 0\n+    n = n + omp_get_team_size (0)\n+    n = n + omp_get_num_teams ()\n+    n = n + omp_get_team_num ()\n+    call omp_set_num_teams (n)\n+    call omp_set_num_teams_8 (4_8)\n+    call omp_set_num_teams_9 (4)\n+    n = n + omp_get_max_teams ()\n+    n = n + omp_get_teams_thread_limit ()\n+    call omp_set_teams_thread_limit (n)\n+    call omp_set_teams_thread_limit_8 (3_8)\n+  !$omp end teams\n+end"}, {"sha": "8bf24d93662a2ee115853c954566dc7363a09bc7", "filename": "libgomp/testsuite/libgomp.c-c++-common/icv-3.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ficv-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ficv-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ficv-3.c?ref=948d461954f2642ca187f86c19d297ba7a86320f", "patch": "@@ -18,6 +18,7 @@ main ()\n     abort ();\n   #pragma omp teams\n   {\n+    #pragma omp parallel if(0)\n     if (omp_get_max_teams () != 7\n \t|| omp_get_teams_thread_limit () != 15\n \t|| omp_get_num_teams () < 1\n@@ -30,6 +31,7 @@ main ()\n   }\n   #pragma omp teams num_teams(5) thread_limit (13)\n   {\n+    #pragma omp parallel if(0)\n     if (omp_get_max_teams () != 7\n \t|| omp_get_teams_thread_limit () != 15\n \t|| omp_get_num_teams () != 5\n@@ -41,6 +43,7 @@ main ()\n   }\n   #pragma omp teams num_teams(8) thread_limit (16)\n   {\n+    #pragma omp parallel if(0)\n     if (omp_get_max_teams () != 7\n \t|| omp_get_teams_thread_limit () != 15\n \t|| omp_get_num_teams () != 8"}, {"sha": "b987a33292b381f4816d946e12977667d86a2e6f", "filename": "libgomp/testsuite/libgomp.c-c++-common/icv-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ficv-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ficv-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ficv-4.c?ref=948d461954f2642ca187f86c19d297ba7a86320f", "patch": "@@ -26,6 +26,7 @@ main ()\n     omp_set_teams_thread_limit (12);\n   #pragma omp teams\n   {\n+    #pragma omp parallel if(0)\n     if (omp_get_max_teams () != 6\n \t|| omp_get_teams_thread_limit () != 12\n \t|| omp_get_num_teams () < 1"}, {"sha": "ec818d24f6912e24082fb76ff03e1ca8c98e117c", "filename": "libgomp/testsuite/libgomp.c/target-3.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-3.c?ref=948d461954f2642ca187f86c19d297ba7a86320f", "patch": "@@ -11,7 +11,9 @@ main ()\n     abort ();\n   #pragma omp target if (0)\n   #pragma omp teams\n-  if (omp_get_level ())\n-    abort ();\n+  #pragma omp distribute dist_schedule(static,1)\n+  for (int i = 0; i < 1; ++i)\n+    if (omp_get_level ())\n+      abort ();\n   return 0;\n }"}, {"sha": "20b1b4d2474adb58c3cbce584aaae23d1b124826", "filename": "libgomp/testsuite/libgomp.c/target-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-5.c?ref=948d461954f2642ca187f86c19d297ba7a86320f", "patch": "@@ -55,6 +55,7 @@ main ()\n     abort ();\n   #pragma omp target if (0)\n   #pragma omp teams\n+  #pragma omp parallel if(0)\n   {\n     omp_sched_t s_c;\n     int c_c;"}, {"sha": "1c4d8caf0a6b9fc85f08cb81b2fd49616104dd0f", "filename": "libgomp/testsuite/libgomp.c/target-6.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-6.c?ref=948d461954f2642ca187f86c19d297ba7a86320f", "patch": "@@ -47,11 +47,13 @@ main ()\n \t\t{\n \t\t  #pragma omp teams thread_limit (2)\n \t\t    {\n-\t\t      if (omp_in_parallel ()\n-\t\t\t  || omp_get_level () != 0\n-\t\t\t  || omp_get_ancestor_thread_num (0) != 0\n-\t\t\t  || omp_get_ancestor_thread_num (1) != -1)\n-\t\t\tabort ();\n+\t\t      #pragma omp distribute dist_schedule(static,1)\n+\t\t      for (int i = 0; i < 1; ++i)\n+\t\t\tif (omp_in_parallel ()\n+\t\t\t    || omp_get_level () != 0\n+\t\t\t    || omp_get_ancestor_thread_num (0) != 0\n+\t\t\t    || omp_get_ancestor_thread_num (1) != -1)\n+\t\t\t  abort ();\n \t\t      #pragma omp parallel num_threads (2)\n \t\t      {\n \t\t\tif (!omp_in_parallel ()"}, {"sha": "adbabef82b397705be429b8bb284d553c882cc94", "filename": "libgomp/testsuite/libgomp.c/target-teams-1.c", "status": "modified", "additions": 83, "deletions": 32, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-teams-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-teams-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-teams-1.c?ref=948d461954f2642ca187f86c19d297ba7a86320f", "patch": "@@ -35,76 +35,115 @@ foo (int a, int b, long c, long d)\n     abort ();\n   #pragma omp target map(from: err)\n   #pragma omp teams\n-  err = omp_get_num_teams () < 1 || omp_get_thread_limit () < 1;\n+  {\n+    err = omp_get_num_teams () < 1;\n+    #pragma omp parallel if(0)\n+    err |= omp_get_thread_limit () < 1;\n+  }\n   if (err)\n     abort ();\n   #pragma omp target teams map(from: err)\n-  err = omp_get_num_teams () < 1 || omp_get_thread_limit () < 1;\n+  {\n+    err = omp_get_num_teams () < 1;\n+    #pragma omp parallel if(0)\n+    err |= omp_get_thread_limit () < 1;\n+  }\n   if (err)\n     abort ();\n   #pragma omp target map(from: err)\n   #pragma omp teams num_teams (4)\n-  err = omp_get_num_teams () < 1 || omp_get_thread_limit () < 1\n-\t|| omp_get_num_teams () > 4;\n+  {\n+    err = omp_get_num_teams () < 1 || omp_get_num_teams () > 4;\n+    #pragma omp parallel if(0)\n+    err |= omp_get_thread_limit () < 1;\n+  }\n   if (err)\n     abort ();\n   #pragma omp target teams num_teams (4) map(from: err)\n-  err = omp_get_num_teams () < 1 || omp_get_thread_limit () < 1\n-\t|| omp_get_num_teams () > 4;\n+  {\n+    err = omp_get_num_teams () < 1 || omp_get_num_teams () > 4;\n+    #pragma omp parallel if(0)\n+    err |= omp_get_thread_limit () < 1;\n+  }\n   if (err)\n     abort ();\n   #pragma omp target map(from: err)\n   #pragma omp teams thread_limit (7)\n-  err = omp_get_num_teams () < 1 || omp_get_thread_limit () < 1\n-\t|| omp_get_thread_limit () > 7;\n+  {\n+    err = omp_get_num_teams () < 1;\n+    #pragma omp parallel if(0)\n+    err |= omp_get_thread_limit () < 1 || omp_get_thread_limit () > 7;\n+  }\n   if (err)\n     abort ();\n   #pragma omp target teams thread_limit (7) map(from: err)\n-  err = omp_get_num_teams () < 1 || omp_get_thread_limit () < 1\n-\t|| omp_get_thread_limit () > 7;\n+  {\n+    err = omp_get_num_teams () < 1;\n+    #pragma omp parallel if(0)\n+    err |= omp_get_thread_limit () < 1 || omp_get_thread_limit () > 7;\n+  }\n   if (err)\n     abort ();\n   #pragma omp target map(from: err)\n   #pragma omp teams num_teams (4) thread_limit (8)\n   {\n     {\n-      err = omp_get_num_teams () < 1 || omp_get_thread_limit () < 1\n-\t    || omp_get_num_teams () > 4 || omp_get_thread_limit () > 8;\n+      err = omp_get_num_teams () < 1 || omp_get_num_teams () > 4;\n     }\n+    #pragma omp parallel if(0)\n+    err |= omp_get_thread_limit () < 1 || omp_get_thread_limit () > 8;\n   }\n   if (err)\n     abort ();\n   #pragma omp target teams num_teams (4) thread_limit (8) map(from: err)\n-  err = omp_get_num_teams () < 1 || omp_get_thread_limit () < 1\n-\t|| omp_get_num_teams () > 4 || omp_get_thread_limit () > 8;\n+  {\n+    err = omp_get_num_teams () < 1 || omp_get_num_teams () > 4;\n+    #pragma omp parallel if(0)\n+    err |= omp_get_thread_limit () < 1 || omp_get_thread_limit () > 8;\n+  }\n   if (err)\n     abort ();\n   #pragma omp target map(from: err)\n   #pragma omp teams num_teams (a) thread_limit (b)\n-  err = omp_get_num_teams () < 1 || omp_get_thread_limit () < 1\n-\t|| omp_get_num_teams () > a || omp_get_thread_limit () > b;\n+  {\n+    err = omp_get_num_teams () < 1 || omp_get_num_teams () > a;\n+    #pragma omp parallel if(0)\n+    err |= omp_get_thread_limit () < 1 || omp_get_thread_limit () > b;\n+  }\n   if (err)\n     abort ();\n   #pragma omp target teams num_teams (a) thread_limit (b) map(from: err)\n-  err = omp_get_num_teams () < 1 || omp_get_thread_limit () < 1\n-\t|| omp_get_num_teams () > a || omp_get_thread_limit () > b;\n+  {\n+    err = omp_get_num_teams () < 1 || omp_get_num_teams () > a;\n+    #pragma omp parallel if(0)\n+    err |= omp_get_thread_limit () < 1 || omp_get_thread_limit () > b;\n+  }\n   if (err)\n     abort ();\n   #pragma omp target map(from: err)\n   #pragma omp teams num_teams (c + 1) thread_limit (d - 1)\n-  err = omp_get_num_teams () < 1 || omp_get_thread_limit () < 1\n-\t|| omp_get_num_teams () > c + 1 || omp_get_thread_limit () > d - 1;\n+  {\n+    err = omp_get_num_teams () < 1 || omp_get_num_teams () > c + 1;\n+    #pragma omp parallel if(0)\n+    err |= omp_get_thread_limit () < 1 || omp_get_thread_limit () > d - 1;\n+  }\n   if (err)\n     abort ();\n   #pragma omp target teams num_teams (c + 1) thread_limit (d - 1) map(from: err)\n-  err = omp_get_num_teams () < 1 || omp_get_thread_limit () < 1\n-\t|| omp_get_num_teams () > c + 1 || omp_get_thread_limit () > d - 1;\n+  {\n+    err = omp_get_num_teams () < 1 || omp_get_num_teams () > c + 1;\n+    #pragma omp parallel if(0)\n+    err |= omp_get_thread_limit () < 1 || omp_get_thread_limit () > d - 1;\n+  }\n   if (err)\n     abort ();\n   #pragma omp target map (always, to: c, d) map(from: err)\n   #pragma omp teams num_teams (c + 1) thread_limit (d - 1)\n-  err = omp_get_num_teams () < 1 || omp_get_thread_limit () < 1\n-\t|| omp_get_num_teams () > c + 1 || omp_get_thread_limit () > d - 1;\n+  {\n+    err = omp_get_num_teams () < 1 || omp_get_num_teams () > c + 1;\n+    #pragma omp parallel if(0)\n+    err |= omp_get_thread_limit () < 1 || omp_get_thread_limit () > d - 1;\n+  }\n   if (err)\n     abort ();\n   #pragma omp target data map (to: c, d)\n@@ -116,30 +155,42 @@ foo (int a, int b, long c, long d)\n        their device and original values match is unclear.  */\n     #pragma omp target map (to: c, d) map(from: err)\n     #pragma omp teams num_teams (c + 1) thread_limit (d - 1)\n-    err = omp_get_num_teams () < 1 || omp_get_thread_limit () < 1\n-\t  || omp_get_num_teams () > c + 1 || omp_get_thread_limit () > d - 1;\n+    {\n+      err = omp_get_num_teams () < 1 || omp_get_num_teams () > c + 1;\n+      #pragma omp parallel if(0)\n+      err |= omp_get_thread_limit () < 1 || omp_get_thread_limit () > d - 1;\n+    }\n     if (err)\n       abort ();\n   }\n   /* This can't be optimized, there are function calls inside of\n      target involved.  */\n   #pragma omp target map(from: err)\n   #pragma omp teams num_teams (baz () + 1) thread_limit (baz () - 1)\n-  err = omp_get_num_teams () < 1 || omp_get_thread_limit () < 1\n-\t|| omp_get_num_teams () > baz () + 1 || omp_get_thread_limit () > baz () - 1;\n+  {\n+    err = omp_get_num_teams () < 1 || omp_get_num_teams () > baz () + 1;\n+    #pragma omp parallel if(0)\n+    err |= omp_get_thread_limit () < 1 || omp_get_thread_limit () > baz () - 1;\n+  }\n   if (err)\n     abort ();\n   #pragma omp target teams num_teams (baz () + 1) thread_limit (baz () - 1) map(from: err)\n-  err = omp_get_num_teams () < 1 || omp_get_thread_limit () < 1\n-\t|| omp_get_num_teams () > baz () + 1 || omp_get_thread_limit () > baz () - 1;\n+  {\n+    err = omp_get_num_teams () < 1 || omp_get_num_teams () > baz () + 1;\n+    #pragma omp parallel if(0)\n+    err |= omp_get_thread_limit () < 1 || omp_get_thread_limit () > baz () - 1;\n+  }\n   if (err)\n     abort ();\n   /* This one can't be optimized, as v might have different value between\n      host and target.  */\n   #pragma omp target map(from: err)\n   #pragma omp teams num_teams (v + 1) thread_limit (v - 1)\n-  err = omp_get_num_teams () < 1 || omp_get_thread_limit () < 1\n-\t|| omp_get_num_teams () > v + 1 || omp_get_thread_limit () > v - 1;\n+  {\n+    err = omp_get_num_teams () < 1 || omp_get_num_teams () > v + 1;\n+    #pragma omp parallel if(0)\n+    err |= omp_get_thread_limit () < 1 || omp_get_thread_limit () > v - 1;\n+  }\n   if (err)\n     abort ();\n }"}, {"sha": "09b357062f8a8f98e9227f16f805ad823409af4d", "filename": "libgomp/testsuite/libgomp.c/teams-1.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c%2Fteams-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c%2Fteams-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fteams-1.c?ref=948d461954f2642ca187f86c19d297ba7a86320f", "patch": "@@ -6,15 +6,17 @@\n int\n main ()\n {\n+  omp_set_dynamic (0);\n+  omp_set_nested (1);\n   #pragma omp teams thread_limit (2)\n   {\n+    #pragma omp distribute dist_schedule(static,1)\n+    for (int i = 0; i < 1; ++i)\n     if (omp_in_parallel ()\n \t|| omp_get_level () != 0\n \t|| omp_get_ancestor_thread_num (0) != 0\n \t|| omp_get_ancestor_thread_num (1) != -1)\n       abort ();\n-    omp_set_dynamic (0);\n-    omp_set_nested (1);\n     #pragma omp parallel num_threads (2)\n     {\n       if (!omp_in_parallel ()"}, {"sha": "7997a70adc356ae0a50381ca92885f899f71147d", "filename": "libgomp/testsuite/libgomp.c/thread-limit-2.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c%2Fthread-limit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c%2Fthread-limit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fthread-limit-2.c?ref=948d461954f2642ca187f86c19d297ba7a86320f", "patch": "@@ -20,25 +20,26 @@ main ()\n   if (omp_get_num_threads () > 9)\n     abort ();\n   #pragma omp target if (0)\n-  #pragma omp teams thread_limit (6)\n   {\n-    if (omp_get_thread_limit () > 6)\n-      abort ();\n-    if (omp_get_thread_limit () == 6)\n+    omp_set_dynamic (0);\n+    omp_set_nested (1);\n+    #pragma omp teams thread_limit (6)\n       {\n-\tomp_set_dynamic (0);\n-\tomp_set_nested (1);\n \t#pragma omp parallel num_threads (3)\n-\tif (omp_get_num_threads () != 3)\n+\tif (omp_get_thread_limit () > 6\n+\t    || (omp_get_thread_limit () == 6 && omp_get_num_threads () != 3))\n \t  abort ();\n \t#pragma omp parallel num_threads (3)\n-\tif (omp_get_num_threads () != 3)\n+\tif (omp_get_thread_limit () > 6\n+\t    || (omp_get_thread_limit () == 6 && omp_get_num_threads () != 3))\n \t  abort ();\n \t#pragma omp parallel num_threads (8)\n-\tif (omp_get_num_threads () > 6)\n+\tif (omp_get_thread_limit () > 6\n+\t    || (omp_get_thread_limit () == 6 && omp_get_num_threads () > 6))\n \t  abort ();\n \t#pragma omp parallel num_threads (6)\n-\tif (omp_get_num_threads () != 6)\n+\tif (omp_get_thread_limit () > 6\n+\t    || (omp_get_thread_limit () == 6 && omp_get_num_threads () != 6))\n \t  abort ();\n \tint cnt = 0;\n \t#pragma omp parallel num_threads (5)"}, {"sha": "01b33968c1b562083987c72988b03806b3811734", "filename": "libgomp/testsuite/libgomp.c/thread-limit-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c%2Fthread-limit-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c%2Fthread-limit-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fthread-limit-3.c?ref=948d461954f2642ca187f86c19d297ba7a86320f", "patch": "@@ -6,6 +6,7 @@ main ()\n {\n   #pragma omp target if (0)\n   #pragma omp teams thread_limit (1)\n+  #pragma omp parallel if (0)\n   if (omp_get_thread_limit () != 1)\n     abort ();\n   return 0;"}, {"sha": "c6ccc7d63307b4cd66da82352c2823378e02aee8", "filename": "libgomp/testsuite/libgomp.c/thread-limit-4.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c%2Fthread-limit-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c%2Fthread-limit-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fthread-limit-4.c?ref=948d461954f2642ca187f86c19d297ba7a86320f", "patch": "@@ -18,25 +18,25 @@ main ()\n   #pragma omp parallel num_threads (16)\n   if (omp_get_num_threads () > 9)\n     abort ();\n+  omp_set_dynamic (0);\n+  omp_set_nested (1);\n   #pragma omp teams thread_limit (6)\n-  {\n-    if (omp_get_thread_limit () > 6)\n-      abort ();\n-    if (omp_get_thread_limit () == 6)\n-      {\n-\tomp_set_dynamic (0);\n-\tomp_set_nested (1);\n+    {\n \t#pragma omp parallel num_threads (3)\n-\tif (omp_get_num_threads () != 3)\n+\tif (omp_get_thread_limit () > 6\n+\t    || (omp_get_thread_limit () == 6 && omp_get_num_threads () != 3))\n \t  abort ();\n \t#pragma omp parallel num_threads (3)\n-\tif (omp_get_num_threads () != 3)\n+\tif (omp_get_thread_limit () > 6\n+\t    || (omp_get_thread_limit () == 6 && omp_get_num_threads () != 3))\n \t  abort ();\n \t#pragma omp parallel num_threads (8)\n-\tif (omp_get_num_threads () > 6)\n+\tif (omp_get_thread_limit () > 6\n+\t    || (omp_get_thread_limit () == 6 && omp_get_num_threads () > 6))\n \t  abort ();\n \t#pragma omp parallel num_threads (6)\n-\tif (omp_get_num_threads () != 6)\n+\tif (omp_get_thread_limit () > 6\n+\t    || (omp_get_thread_limit () == 6 && omp_get_num_threads () != 6))\n \t  abort ();\n \tint cnt = 0;\n \t#pragma omp parallel num_threads (5)\n@@ -52,7 +52,6 @@ main ()\n \t  #pragma omp atomic\n \t  --cnt;\n \t}\n-      }\n-  }\n+    }\n   return 0;\n }"}, {"sha": "d72988dcc54b720eecb5d305f1af3b76b70bf372", "filename": "libgomp/testsuite/libgomp.c/thread-limit-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c%2Fthread-limit-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.c%2Fthread-limit-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fthread-limit-5.c?ref=948d461954f2642ca187f86c19d297ba7a86320f", "patch": "@@ -5,6 +5,7 @@ int\n main ()\n {\n   #pragma omp teams thread_limit (1)\n+  #pragma omp parallel if(0)\n   if (omp_get_thread_limit () != 1)\n     abort ();\n   return 0;"}, {"sha": "4f81a63a3b6b5ae660d65a3711dcc6eef0507f10", "filename": "libgomp/testsuite/libgomp.fortran/icv-3.f90", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ficv-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ficv-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ficv-3.f90?ref=948d461954f2642ca187f86c19d297ba7a86320f", "patch": "@@ -13,6 +13,7 @@\n   if (omp_get_teams_thread_limit () /= 15) &\n     error stop 4\n   !$omp teams\n+   !$omp parallel if(.false.)\n     if (omp_get_max_teams () /= 7 &\n         .or. omp_get_teams_thread_limit () /= 15 &\n         .or. omp_get_num_teams () < 1 &\n@@ -22,8 +23,10 @@\n         .or. omp_get_thread_limit () < 1 &\n         .or. omp_get_thread_limit () > 15) &\n       error stop 5\n+   !$omp end parallel\n   !$omp end teams\n   !$omp teams num_teams(5) thread_limit (13)\n+   !$omp parallel if(.false.)\n     if (omp_get_max_teams () /= 7 &\n         .or. omp_get_teams_thread_limit () /= 15 &\n         .or. omp_get_num_teams () /= 5 &\n@@ -32,8 +35,10 @@\n         .or. omp_get_thread_limit () < 1 &\n         .or. omp_get_thread_limit () > 13) &\n       error stop 6\n+   !$omp end parallel\n   !$omp end teams\n   !$omp teams num_teams(8) thread_limit (16)\n+   !$omp parallel if(.false.)\n     if (omp_get_max_teams () /= 7 &\n         .or. omp_get_teams_thread_limit () /= 15 &\n         .or. omp_get_num_teams () /= 8 &\n@@ -42,6 +47,7 @@\n         .or. omp_get_thread_limit () < 1 &\n         .or. omp_get_thread_limit () > 16) &\n       error stop 7\n+   !$omp end parallel\n   !$omp end teams\n contains\n   logical function env_exists (name)"}, {"sha": "2ae5d765b1bbcee330ad66e47d22952245024943", "filename": "libgomp/testsuite/libgomp.fortran/icv-4.f90", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ficv-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ficv-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ficv-4.f90?ref=948d461954f2642ca187f86c19d297ba7a86320f", "patch": "@@ -16,6 +16,7 @@\n     call omp_set_teams_thread_limit (12)\n   end if\n   !$omp teams\n+   !$omp parallel if(.false.)\n     if (omp_get_max_teams () /= 6 &\n         .or. omp_get_teams_thread_limit () /= 12 &\n         .or. omp_get_num_teams () < 1 &\n@@ -25,6 +26,7 @@\n         .or. omp_get_thread_limit () < 1 &\n         .or. omp_get_thread_limit () > 12) &\n       error stop 3\n+   !$omp end parallel\n   !$omp end teams\n contains\n   logical function env_is_set (name, val)"}, {"sha": "886765ab0afae45bec668cee6221304dd6d46c11", "filename": "libgomp/testsuite/libgomp.fortran/teams1.f90", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fteams1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948d461954f2642ca187f86c19d297ba7a86320f/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fteams1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fteams1.f90?ref=948d461954f2642ca187f86c19d297ba7a86320f", "patch": "@@ -2,13 +2,17 @@\n \n program teams1\n   use omp_lib\n+  integer :: i\n !$omp teams thread_limit (2)\n-  if (omp_in_parallel ()) stop 1\n-  if (omp_get_level () .ne. 0) stop 2\n-  if (omp_get_ancestor_thread_num (0) .ne. 0) stop 3\n-  if (omp_get_ancestor_thread_num (1) .ne. -1) stop 4\n-  call omp_set_dynamic (.false.)\n-  call omp_set_nested (.true.)\n+  !$omp distribute dist_schedule(static,1)\n+  do i = 1, 1\n+    if (omp_in_parallel ()) stop 1\n+    if (omp_get_level () .ne. 0) stop 2\n+    if (omp_get_ancestor_thread_num (0) .ne. 0) stop 3\n+    if (omp_get_ancestor_thread_num (1) .ne. -1) stop 4\n+    call omp_set_dynamic (.false.)\n+    call omp_set_nested (.true.)\n+  end do\n !$omp parallel num_threads (2)\n   if (.not. omp_in_parallel ()) stop 5\n   if (omp_get_level () .ne. 1) stop 6"}]}