{"sha": "f518860803f82cc5e4f6d038e434a7acd89634c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUxODg2MDgwM2Y4MmNjNWU0ZjZkMDM4ZTQzNGE3YWNkODk2MzRjMw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-23T20:42:13Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-23T20:42:13Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1064", "tree": {"sha": "ffb4ad5b27cae98b2736aeba57f98029aa39602e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffb4ad5b27cae98b2736aeba57f98029aa39602e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f518860803f82cc5e4f6d038e434a7acd89634c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f518860803f82cc5e4f6d038e434a7acd89634c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f518860803f82cc5e4f6d038e434a7acd89634c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f518860803f82cc5e4f6d038e434a7acd89634c3/comments", "author": null, "committer": null, "parents": [{"sha": "7b7bceeba901cde97edc800da34ed296d8488670", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b7bceeba901cde97edc800da34ed296d8488670", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b7bceeba901cde97edc800da34ed296d8488670"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "f97d1c534bc8208930f835f63da3c0c8b37caeba", "filename": "gcc/protoize.c", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f518860803f82cc5e4f6d038e434a7acd89634c3/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f518860803f82cc5e4f6d038e434a7acd89634c3/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=f518860803f82cc5e4f6d038e434a7acd89634c3", "patch": "@@ -39,14 +39,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #include \"config.h\"\n \n-#ifdef POSIX /* We should be able to define _POSIX_SOURCE unconditionally,\n-\t\tbut some systems respond in buggy ways to it,\n-\t\tincluding Sunos 4.1.1.  Which we don't classify as POSIX.  */\n-/* In case this is a POSIX system with an ANSI C compiler,\n-   ask for definition of all POSIX facilities.  */\n-#define _POSIX_SOURCE\n-#endif\n-\n #if 0\n /* Users are not supposed to use _POSIX_SOURCE to say the\n    system is a POSIX system.  That is not what _POSIX_SOURCE means! -- rms  */ \n@@ -56,12 +48,25 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #endif\n #endif /* 0 */\n \n+#ifdef POSIX /* We should be able to define _POSIX_SOURCE unconditionally,\n+\t\tbut some systems respond in buggy ways to it,\n+\t\tincluding Sunos 4.1.1.  Which we don't classify as POSIX.  */\n+/* In case this is a POSIX system with an ANSI C compiler,\n+   ask for definition of all POSIX facilities.  */\n+#undef _POSIX_SOURCE\n+#define _POSIX_SOURCE\n+#endif\n+\n #include <stdio.h>\n #include <ctype.h>\n #include <errno.h>\n #include <sys/types.h>\n #include <sys/stat.h>\n+#ifdef POSIX\n+#include <dirent.h>\n+#else\n #include <sys/dir.h>\n+#endif\n #if ! defined (USG) || defined (SVR4)\n #include <sys/wait.h>\n #endif\n@@ -93,10 +98,11 @@ extern char *version_string;\n #define my_open(file, mode, flag)\topen((char *)file, mode, flag)\n #define my_chmod(file, mode)\tchmod((char *)file, mode)\n \n-char *getpwd ();\n+extern char *getpwd ();\n \n /* Aliases for pointers to void.\n-   These were made to facilitate compilation with other compilers.  */\n+   These were made to facilitate compilation with old brain-dead DEC C\n+   compilers which didn't properly grok `void*' types.  */\n \n #ifdef __STDC__\n typedef void * pointer_type;\n@@ -135,6 +141,7 @@ extern int creat ();\n #if 0 /* These conflict with stdio.h on some systems.  */\n extern int fprintf (FILE *, const char *, ...);\n extern int printf (const char *, ...);\n+extern int open (const char *, int, ...);\n #endif /* 0 */\n extern void exit ();\n extern pointer_type malloc ();\n@@ -148,6 +155,10 @@ extern int atoi ();\n extern int puts ();\n extern int fputs ();\n extern int fputc ();\n+extern int link ();\n+extern int unlink ();\n+extern int access ();\n+extern int execvp ();\n #ifndef setjmp\n extern int setjmp ();\n #endif\n@@ -159,9 +170,8 @@ extern char *   strcat ();\n extern int      strcmp ();\n extern char *   strcpy ();\n #if 0 /* size_t from sys/types.h may fail to match GCC.\n-\t If so, we would get a warning from this.\n-\t So do without the prototype.  */\n-extern size_t   strlen (const char *);\n+\t If so, we would get a warning from this.  */\n+extern size_t   strlen ()\n #endif\n extern int      strncmp ();\n extern char *   strncpy ();\n@@ -4430,7 +4440,7 @@ main (argc, argv)\n {\n   int longind;\n   int c;\n-  char *params = \"\";\n+  const char *params = \"\";\n \n   pname = strrchr (argv[0], '/');\n   pname = pname ? pname+1 : argv[0];"}]}