{"sha": "f5c14c21eb44057547637c5f3fae1c033fea2e89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVjMTRjMjFlYjQ0MDU3NTQ3NjM3YzVmM2ZhZTFjMDMzZmVhMmU4OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-04-10T21:06:47Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-04-10T21:06:47Z"}, "message": "flow.c (merge_blocks_nomove): Rewrite to properly handle two blocks that vanish entirely during merging.\n\n        * flow.c (merge_blocks_nomove): Rewrite to properly handle two\n        blocks that vanish entirely during merging.\n\nFrom-SVN: r26339", "tree": {"sha": "744fab5ddf65c6552de6d0541a593c6c55ca9d8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/744fab5ddf65c6552de6d0541a593c6c55ca9d8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5c14c21eb44057547637c5f3fae1c033fea2e89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c14c21eb44057547637c5f3fae1c033fea2e89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5c14c21eb44057547637c5f3fae1c033fea2e89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c14c21eb44057547637c5f3fae1c033fea2e89/comments", "author": null, "committer": null, "parents": [{"sha": "6a4a5d954ba4d21559453c4a2bf5b95c5105982d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4a5d954ba4d21559453c4a2bf5b95c5105982d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a4a5d954ba4d21559453c4a2bf5b95c5105982d"}], "stats": {"total": 105, "additions": 55, "deletions": 50}, "files": [{"sha": "054d0a6627b7853211b5c81f5ea040e92bd2e70d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c14c21eb44057547637c5f3fae1c033fea2e89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c14c21eb44057547637c5f3fae1c033fea2e89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5c14c21eb44057547637c5f3fae1c033fea2e89", "patch": "@@ -1,3 +1,8 @@\n+Fri Apr  9 11:29:17 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* flow.c (merge_blocks_nomove): Rewrite to properly handle two\n+\tblocks that vanish entirely during merging.\n+\n Sat Apr 10 20:09:55 EDT 1999  John Wehle  (john@feith.com)\n \n \t* i386.md (floatsisf2, floatdisf2, floatsidf2, floatdidf2,"}, {"sha": "ae9b967292c955effa621d665f669305a1a3d662", "filename": "gcc/flow.c", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c14c21eb44057547637c5f3fae1c033fea2e89/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c14c21eb44057547637c5f3fae1c033fea2e89/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=f5c14c21eb44057547637c5f3fae1c033fea2e89", "patch": "@@ -1846,39 +1846,58 @@ merge_blocks_nomove (a, b)\n      basic_block a, b;\n {\n   edge e;\n-  rtx insn;\n-  int done = 0;\n+  rtx b_head, b_end, a_end;\n+  int b_empty = 0;\n+\n+  /* If there was a CODE_LABEL beginning B, delete it.  */\n+  b_head = b->head;\n+  b_end = b->end;\n+  if (GET_CODE (b_head) == CODE_LABEL)\n+    {\n+      /* Detect basic blocks with nothing but a label.  This can happen\n+\t in particular at the end of a function.  */\n+      if (b_head == b_end)\n+\tb_empty = 1;\n+      b_head = flow_delete_insn (b_head);\n+    }\n+\n+  /* Delete the basic block note.  */\n+  if (GET_CODE (b_head) == NOTE \n+      && NOTE_LINE_NUMBER (b_head) == NOTE_INSN_BASIC_BLOCK)\n+    {\n+      if (b_head == b_end)\n+\tb_empty = 1;\n+      b_head = flow_delete_insn (b_head);\n+    }\n \n   /* If there was a jump out of A, delete it.  */\n-  if (GET_CODE (a->end) == JUMP_INSN)\n+  a_end = a->end;\n+  if (GET_CODE (a_end) == JUMP_INSN)\n     {\n-      /* If the jump was the only insn in A, turn the jump into a deleted\n-\t note, since we may yet not be able to merge the blocks.  */\n-      if (a->end == a->head)\n-\t{\n-\t  PUT_CODE (a->head, NOTE);\n-\t  NOTE_LINE_NUMBER (a->head) = NOTE_INSN_DELETED;\n-\t  NOTE_SOURCE_FILE (a->head) = 0;\n-\t}\n-      else\n-\t{\n-\t  rtx tmp = a->end;\n+      rtx prev;\n \n-\t  a->end = prev_nonnote_insn (tmp);\n+      prev = prev_nonnote_insn (a_end);\n+      if (!prev) \n+\tprev = a->head;\n \n #ifdef HAVE_cc0\n-\t  /* If this was a conditional jump, we need to also delete\n-\t     the insn that set cc0.  */\n-\t  if (! simplejump_p (tmp) && condjump_p (tmp))\n-\t    {\n-\t      PUT_CODE (PREV_INSN (tmp), NOTE);\n-\t      NOTE_LINE_NUMBER (PREV_INSN (tmp)) = NOTE_INSN_DELETED;\n-\t      NOTE_SOURCE_FILE (PREV_INSN (tmp)) = 0;\n-\t    }\n-#endif\n+      /* If this was a conditional jump, we need to also delete\n+\t the insn that set cc0.  */\n \n+      if (prev && sets_cc0_p (prev))\n+\t{\n+          rtx tmp = prev;\n+\t  prev = prev_nonnote_insn (prev);\n+\t  if (!prev)\n+\t    prev = a->head;\n \t  flow_delete_insn (tmp);\n \t}\n+#endif\n+\n+      /* Note that a->head != a->end, since we should have at least a\n+\t bb note plus the jump, so prev != insn.  */\n+      flow_delete_insn (a_end);\n+      a_end = prev;\n     }\n \n   /* By definition, there should only be one successor of A, and that is\n@@ -1890,37 +1909,18 @@ merge_blocks_nomove (a, b)\n     e->src = a;\n   a->succ = b->succ;\n \n-  /* If there was a CODE_LABEL beginning B, delete it.  */\n-  insn = b->head;\n-  if (GET_CODE (insn) == CODE_LABEL)\n-    {\n-      /* Detect basic blocks with nothing but a label.  This can happen\n-\t in particular at the end of a function.  */\n-      if (insn == b->end)\n-\tdone = 1;\n-      insn = flow_delete_insn (insn);\n-    }\n-\n-  /* Delete the basic block note.  */\n-  if (GET_CODE (insn) == NOTE \n-      && NOTE_LINE_NUMBER (insn) == NOTE_INSN_BASIC_BLOCK)\n-    {\n-      if (insn == b->end)\n-\tdone = 1;\n-      insn = flow_delete_insn (insn);\n-    }\n-\n   /* Reassociate the insns of B with A.  */\n-  if (!done)\n+  if (!b_empty)\n     {\n-      BLOCK_FOR_INSN (insn) = a;\n-      while (insn != b->end)\n+      BLOCK_FOR_INSN (b_head) = a;\n+      while (b_head != b_end)\n \t{\n-\t  insn = NEXT_INSN (insn);\n-\t  BLOCK_FOR_INSN (insn) = a;\n+\t  b_head = NEXT_INSN (b_head);\n+\t  BLOCK_FOR_INSN (b_head) = a;\n \t}\n-      a->end = insn;\n+      a_end = b_head;\n     }\n+  a->end = a_end;\n   \n   /* Compact the basic block array.  */\n   expunge_block (b);"}]}