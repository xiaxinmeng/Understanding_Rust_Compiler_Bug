{"sha": "6f2789da074d0d9e68af0cf4bc79a64a3e552d03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYyNzg5ZGEwNzRkMGQ5ZTY4YWYwY2Y0YmM3OWE2NGEzZTU1MmQwMw==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2006-09-13T18:48:21Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-09-13T18:48:21Z"}, "message": "re PR ada/29025 (procedure doesn't modify In Out parameter)\n\n\tPR ada/29025\n\t* trans.c (gnat_gimplify_expr) <ADDR_EXPR>: When taking the address\n\tof a SAVE_EXPR, just make the operand addressable/not-readonly and\n\tlet the common gimplifier code make and propagate a temporary copy.\n\t(call_to_gnu): Clarify the use of SAVE_EXPR for not addressable\n\tout/in-out actuals and defer setting the addressable/readonly bits\n\tto the gimplifier.\n\nFrom-SVN: r116929", "tree": {"sha": "07363f60721190c943580bee201d42d01e2ec4d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07363f60721190c943580bee201d42d01e2ec4d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f2789da074d0d9e68af0cf4bc79a64a3e552d03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f2789da074d0d9e68af0cf4bc79a64a3e552d03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f2789da074d0d9e68af0cf4bc79a64a3e552d03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f2789da074d0d9e68af0cf4bc79a64a3e552d03/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "efaa616eeb3b3cc2cbe664ba9305d3035fb2d2d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efaa616eeb3b3cc2cbe664ba9305d3035fb2d2d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efaa616eeb3b3cc2cbe664ba9305d3035fb2d2d9"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "77cf3d315ca5945668068418417c10b8c5d00065", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f2789da074d0d9e68af0cf4bc79a64a3e552d03/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f2789da074d0d9e68af0cf4bc79a64a3e552d03/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6f2789da074d0d9e68af0cf4bc79a64a3e552d03", "patch": "@@ -1,3 +1,13 @@\n+2006-09-13  Olivier Hainque  <hainque@adacore.com>\n+\n+\tPR ada/29025\n+\t* trans.c (gnat_gimplify_expr) <ADDR_EXPR>: When taking the address\n+\tof a SAVE_EXPR, just make the operand addressable/not-readonly and\n+\tlet the common gimplifier code make and propagate a temporary copy.\n+\t(call_to_gnu): Clarify the use of SAVE_EXPR for not addressable\n+\tout/in-out actuals and defer setting the addressable/readonly bits\n+\tto the gimplifier.\n+\n 2006-09-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/28591"}, {"sha": "7fecc6feb9daa551062e82c609690639cad05045", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f2789da074d0d9e68af0cf4bc79a64a3e552d03/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f2789da074d0d9e68af0cf4bc79a64a3e552d03/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=6f2789da074d0d9e68af0cf4bc79a64a3e552d03", "patch": "@@ -1775,18 +1775,12 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n \t\t       && (TYPE_JUSTIFIED_MODULAR_P (gnu_name_type)))\n \t\tgnu_name = convert (gnu_name_type, gnu_name);\n \n+\t      /* Make a SAVE_EXPR to both properly account for potential side\n+\t\t effects and handle the creation of a temporary copy.  Special\n+\t\t code in gnat_gimplify_expr ensures that the same temporary is\n+\t\t used as the actual and copied back after the call.  */\n \t      gnu_actual = save_expr (gnu_name);\n \n-\t      /* Since we're going to take the address of the SAVE_EXPR, we\n-\t\t don't want it to be marked as unchanging. So set\n-\t\t TREE_ADDRESSABLE.  */\n-\t      gnu_temp = skip_simple_arithmetic (gnu_actual);\n-\t      if (TREE_CODE (gnu_temp) == SAVE_EXPR)\n-\t\t{\n-\t\t  TREE_ADDRESSABLE (gnu_temp) = 1;\n-\t\t  TREE_READONLY (gnu_temp) = 0;\n-\t\t}\n-\n \t      /* Set up to move the copy back to the original.  */\n \t      gnu_temp = build_binary_op (MODIFY_EXPR, NULL_TREE,\n \t\t\t\t\t  gnu_copy, gnu_actual);\n@@ -4697,6 +4691,19 @@ gnat_gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p ATTRIBUTE_UNUSED)\n \t  return GS_ALL_DONE;\n \t}\n \n+      /* If we are taking the address of a SAVE_EXPR, we are typically\n+\t processing a misaligned argument to be passed by reference in a\n+\t procedure call.  We just mark the operand as addressable + not\n+\t readonly here and let the common gimplifier code perform the\n+\t temporary creation, initialization, and \"instantiation\" in place of\n+\t the SAVE_EXPR in further operands, in particular in the copy back\n+\t code inserted after the call.  */\n+      else if (TREE_CODE (op) == SAVE_EXPR)\n+\t{\n+\t  TREE_ADDRESSABLE (op) = 1;\n+\t  TREE_READONLY (op) = 0;\n+\t}\n+\n       /* Otherwise, if we are taking the address of something that is neither\n \t reference, declaration, or constant, make a variable for the operand\n \t here and then take its address.  If we don't do it this way, we may"}]}