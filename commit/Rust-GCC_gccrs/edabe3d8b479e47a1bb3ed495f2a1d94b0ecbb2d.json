{"sha": "edabe3d8b479e47a1bb3ed495f2a1d94b0ecbb2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRhYmUzZDhiNDc5ZTQ3YTFiYjNlZDQ5NWYyYTFkOTRiMGVjYmIyZA==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2017-09-21T12:58:14Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2017-09-21T12:58:14Z"}, "message": "toplev: read from /dev/urandom only when needed\n\n\t* toplev.h (set_random_seed): Adjust return type.\n\t* toplev.c (init_local_tick): Move eager initialization of random_seed\n\tto get_random_seed.  Adjust comment.\n\t(init_random_seed): Inline to get_random_seed, delete.\n\t(get_random_seed): Initialize random_seed lazily.\n\t(set_random_seed): Do not return previous value.\n\t(print_switch_value): Do not call get_random_seed.\n\nFrom-SVN: r253069", "tree": {"sha": "77c21e6b5ad04bf112b599f048ac60ed9a06a9b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77c21e6b5ad04bf112b599f048ac60ed9a06a9b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edabe3d8b479e47a1bb3ed495f2a1d94b0ecbb2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edabe3d8b479e47a1bb3ed495f2a1d94b0ecbb2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edabe3d8b479e47a1bb3ed495f2a1d94b0ecbb2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edabe3d8b479e47a1bb3ed495f2a1d94b0ecbb2d/comments", "author": null, "committer": null, "parents": [{"sha": "9acb459230318eb2f786dc0b974812884a2f3d54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9acb459230318eb2f786dc0b974812884a2f3d54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9acb459230318eb2f786dc0b974812884a2f3d54"}], "stats": {"total": 66, "additions": 28, "deletions": 38}, "files": [{"sha": "7c0674d5ad72d018c0815092b6068259f45c85d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edabe3d8b479e47a1bb3ed495f2a1d94b0ecbb2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edabe3d8b479e47a1bb3ed495f2a1d94b0ecbb2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=edabe3d8b479e47a1bb3ed495f2a1d94b0ecbb2d", "patch": "@@ -1,4 +1,14 @@\n-2017-09-21  Evgeny Kudryashov <kudryashov@ispras.ru>\n+2017-09-21  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* toplev.h (set_random_seed): Adjust return type.\n+\t* toplev.c (init_local_tick): Move eager initialization of random_seed\n+\tto get_random_seed.  Adjust comment.\n+\t(init_random_seed): Inline to get_random_seed, delete.\n+\t(get_random_seed): Initialize random_seed lazily.\n+\t(set_random_seed): Do not return previous value.\n+\t(print_switch_value): Do not call get_random_seed.\n+\n+2017-09-21  Evgeny Kudryashov  <kudryashov@ispras.ru>\n \n \t* cgraph.c (delete_function_version): New, broken out from...\n \t(cgraph_node::delete_function_version): ...here.  Rename to"}, {"sha": "bee79d313b2dd5e1c4cb0608809d127d56d9a3d6", "filename": "gcc/toplev.c", "status": "modified", "additions": 16, "deletions": 36, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edabe3d8b479e47a1bb3ed495f2a1d94b0ecbb2d/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edabe3d8b479e47a1bb3ed495f2a1d94b0ecbb2d/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=edabe3d8b479e47a1bb3ed495f2a1d94b0ecbb2d", "patch": "@@ -239,27 +239,14 @@ announce_function (tree decl)\n     }\n }\n \n-/* Initialize local_tick with a random number or -1 if\n+/* Initialize local_tick with the time of day, or -1 if\n    flag_random_seed is set.  */\n \n static void\n init_local_tick (void)\n {\n   if (!flag_random_seed)\n     {\n-      /* Try urandom first. Time of day is too likely to collide. \n-\t In case of any error we just use the local tick. */\n-\n-      int fd = open (\"/dev/urandom\", O_RDONLY);\n-      if (fd >= 0)\n-        {\n-          if (read (fd, &random_seed, sizeof (random_seed))\n-              != sizeof (random_seed))\n-            random_seed = 0;\n-          close (fd);\n-        }\n-\n-      /* Now get the tick anyways  */\n #ifdef HAVE_GETTIMEOFDAY\n       {\n \tstruct timeval tv;\n@@ -280,34 +267,33 @@ init_local_tick (void)\n     local_tick = -1;\n }\n \n-/* Set up a default flag_random_seed and local_tick, unless the user\n-   already specified one.  Must be called after init_local_tick.  */\n-\n-static void\n-init_random_seed (void)\n-{\n-  if (!random_seed)\n-    random_seed = local_tick ^ getpid ();  /* Old racey fallback method */\n-}\n-\n /* Obtain the random_seed.  Unless NOINIT, initialize it if\n    it's not provided in the command line.  */\n \n HOST_WIDE_INT\n get_random_seed (bool noinit)\n {\n-  if (!flag_random_seed && !noinit)\n-    init_random_seed ();\n+  if (!random_seed && !noinit)\n+    {\n+      int fd = open (\"/dev/urandom\", O_RDONLY);\n+      if (fd >= 0)\n+        {\n+          if (read (fd, &random_seed, sizeof (random_seed))\n+              != sizeof (random_seed))\n+            random_seed = 0;\n+          close (fd);\n+        }\n+      if (!random_seed)\n+\trandom_seed = local_tick ^ getpid ();\n+    }\n   return random_seed;\n }\n \n-/* Modify the random_seed string to VAL.  Return its previous\n-   value.  */\n+/* Set flag_random_seed to VAL, and if non-null, reinitialize random_seed.  */\n \n-const char *\n+void\n set_random_seed (const char *val)\n {\n-  const char *old = flag_random_seed;\n   flag_random_seed = val;\n   if (flag_random_seed)\n     {\n@@ -318,7 +304,6 @@ set_random_seed (const char *val)\n       if (!(endp > flag_random_seed && *endp == 0))\n         random_seed = crc32_string (0, flag_random_seed);\n     }\n-  return old;\n }\n \n /* Handler for fatal signals, such as SIGSEGV.  These are transformed\n@@ -818,11 +803,6 @@ print_switch_values (print_switch_fn_type print_fn)\n   int pos = 0;\n   size_t j;\n \n-  /* Fill in the -frandom-seed option, if the user didn't pass it, so\n-     that it can be printed below.  This helps reproducibility.  */\n-  if (!flag_random_seed)\n-    init_random_seed ();\n-\n   /* Print the options as passed.  */\n   pos = print_single_switch (print_fn, pos,\n \t\t\t     SWITCH_TYPE_DESCRIPTIVE, _(\"options passed: \"));"}, {"sha": "aed806eb28f2c20953d3037580a69d06e1b2b1fe", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edabe3d8b479e47a1bb3ed495f2a1d94b0ecbb2d/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edabe3d8b479e47a1bb3ed495f2a1d94b0ecbb2d/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=edabe3d8b479e47a1bb3ed495f2a1d94b0ecbb2d", "patch": "@@ -91,7 +91,7 @@ extern bool set_src_pwd\t\t       (const char *);\n /* Functions used to manipulate the random seed.  */\n \n extern HOST_WIDE_INT get_random_seed (bool);\n-extern const char *set_random_seed (const char *);\n+extern void set_random_seed (const char *);\n \n extern void initialize_rtl (void);\n "}]}