{"sha": "4b0fe398dbee8050a0a1cf9af8133884c6827454", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIwZmUzOThkYmVlODA1MGEwYTFjZjlhZjgxMzM4ODRjNjgyNzQ1NA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-09-20T19:06:12Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-26T08:59:13Z"}, "message": "[Ada] Further small edition to documentation of Ada.Text_IO.Fixed_IO\n\ngcc/ada/\n\n\t* libgnat/a-tifiio.adb: Minor editions to documentation.", "tree": {"sha": "49a2a7c68e728f8799bff9d449ce210665ca063a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49a2a7c68e728f8799bff9d449ce210665ca063a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b0fe398dbee8050a0a1cf9af8133884c6827454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b0fe398dbee8050a0a1cf9af8133884c6827454", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b0fe398dbee8050a0a1cf9af8133884c6827454", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b0fe398dbee8050a0a1cf9af8133884c6827454/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19b00ffa9cb1ea393788d483d554c17513407992", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19b00ffa9cb1ea393788d483d554c17513407992", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19b00ffa9cb1ea393788d483d554c17513407992"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "f5f8979cd625364cf82e569dc64bd4441e6ae945", "filename": "gcc/ada/libgnat/a-tifiio.adb", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0fe398dbee8050a0a1cf9af8133884c6827454/gcc%2Fada%2Flibgnat%2Fa-tifiio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0fe398dbee8050a0a1cf9af8133884c6827454/gcc%2Fada%2Flibgnat%2Fa-tifiio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tifiio.adb?ref=4b0fe398dbee8050a0a1cf9af8133884c6827454", "patch": "@@ -188,38 +188,35 @@ package body Ada.Text_IO.Fixed_IO is\n    --  factor 10**E can be trivially handled during final output, by adjusting\n    --  the decimal point or exponent.\n \n-   --  Convert a value X * S of type T to a 64-bit integer value Q equal to\n-   --  10.0**D * (X * S) rounded to the nearest integer. This conversion is\n+   --  The idea is to convert a value X * S of type T to a 64-bit integer value\n+   --  Q equal to 10.0**D * (X * S) rounded to the nearest integer, using only\n    --  a scaled integer divide of the form\n \n    --     Q := (X * Y) / Z,\n \n-   --  where all variables are 64-bit signed integers using 2's complement,\n-   --  and both the multiplication and division are done using full\n-   --  intermediate precision. The final decimal value to be output is\n+   --  where the variables X, Y, Z are 64-bit integers, and both multiplication\n+   --  and division are done using full intermediate precision. Then the final\n+   --  decimal value to be output is\n \n    --     Q * 10**(E-D)\n \n    --  This value can be written to the output file or to the result string\n    --  according to the format described in RM A.3.10. The details of this\n    --  operation are omitted here.\n \n-   --  A 64-bit value can contain all integers with 18 decimal digits, but\n-   --  not all with 19 decimal digits. If the total number of requested output\n-   --  digits (Fore - 1) + Aft is greater than 18, for purposes of the\n-   --  conversion Aft is adjusted to 18 - (Fore - 1). In that case, or\n-   --  when Fore > 19, trailing zeros can complete the output after writing\n-   --  the first 18 significant digits, or the technique described in the\n-   --  next section can be used.\n+   --  A 64-bit value can represent all integers with 18 decimal digits, but\n+   --  not all with 19 decimal digits. If the total number of requested ouput\n+   --  digits (Fore - 1) + Aft is greater than 18 then, for purposes of the\n+   --  conversion, Aft is adjusted to 18 - (Fore - 1). In that case, trailing\n+   --  zeros can complete the output after writing the first 18 significant\n+   --  digits, or the technique described in the next section can be used.\n \n    --  The final expression for D is\n \n    --     D := Integer'Max (-18, Integer'Min (Aft, 18 - (Fore - 1)));\n \n    --  For Y and Z the following expressions can be derived:\n \n-   --     Q / (10.0**D) = X * S\n-\n    --     Q = X * S * (10.0**D) = (X * Y) / Z\n \n    --     S * 10.0**D = Y / Z;\n@@ -248,8 +245,8 @@ package body Ada.Text_IO.Fixed_IO is\n    --  Extra Precision\n \n    --  Using a scaled divide which truncates and returns a remainder R,\n-   --  another E trailing digits can be calculated by computing the value\n-   --  (R * (10.0**E)) / Z using another scaled divide. This procedure\n+   --  another K trailing digits can be calculated by computing the value\n+   --  (R * (10.0**K)) / Z using another scaled divide. This procedure\n    --  can be repeated to compute an arbitrary number of digits in linear\n    --  time and storage. The last scaled divide should be rounded, with\n    --  a possible carry propagating to the more significant digits, to\n@@ -564,7 +561,7 @@ package body Ada.Text_IO.Fixed_IO is\n          --  Each element of Q has Max_Digits decimal digits, except the\n          --  last, which has AA rem Max_Digits. Only Q (Q'First) may have an\n          --  absolute value equal to or larger than 10**Max_Digits. Only the\n-         --  absolute value of the elements is not significant, not the sign.\n+         --  absolute value of the elements is significant, not the sign.\n \n          XX : Int64 := X;\n          YY : Int64 := Y;"}]}