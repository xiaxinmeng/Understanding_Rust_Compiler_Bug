{"sha": "5237f531dafcdf5a118ec501b0bbea1ee4e0928c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIzN2Y1MzFkYWZjZGY1YTExOGVjNTAxYjBiYmVhMWVlNGUwOTI4Yw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-02-02T21:41:35Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-02-02T21:41:35Z"}, "message": "cpplib.h (cpp_reader): Add new flag, no_directives.\n\n\t* cpplib.h (cpp_reader): Add new flag, no_directives.\n\t* cpphash.c (macarg): Set it.\n\t* cpplib.c (handle_directive): If no_directives is on and we\n\tfind a directive, issue an error and discard the line.\n\nFrom-SVN: r31763", "tree": {"sha": "85f4994520bd25edda71f41ae96e75498894cb12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85f4994520bd25edda71f41ae96e75498894cb12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5237f531dafcdf5a118ec501b0bbea1ee4e0928c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5237f531dafcdf5a118ec501b0bbea1ee4e0928c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5237f531dafcdf5a118ec501b0bbea1ee4e0928c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5237f531dafcdf5a118ec501b0bbea1ee4e0928c/comments", "author": null, "committer": null, "parents": [{"sha": "3e7cd49fee867f8af4815815ded1dd621d27ceab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e7cd49fee867f8af4815815ded1dd621d27ceab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e7cd49fee867f8af4815815ded1dd621d27ceab"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "d3e73b9bffbb919e94978d9e0095a709242e132b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5237f531dafcdf5a118ec501b0bbea1ee4e0928c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5237f531dafcdf5a118ec501b0bbea1ee4e0928c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5237f531dafcdf5a118ec501b0bbea1ee4e0928c", "patch": "@@ -1,3 +1,10 @@\n+2000-02-02  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cpplib.h (cpp_reader): Add new flag, no_directives.\n+\t* cpphash.c (macarg): Set it.\n+\t* cpplib.c (handle_directive): If no_directives is on and we\n+\tfind a directive, issue an error and discard the line.\n+\n Wed Feb  2 13:07:10 2000  Jim Wilson  <wilson@cygnus.com>\n \n \t* config/sparc/sparc.h (PREFERRED_RELOAD_CLASS): Delete 'E' check for"}, {"sha": "a7f19f1cf15bec71d30be410bffc5d2ab07386a8", "filename": "gcc/cpphash.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5237f531dafcdf5a118ec501b0bbea1ee4e0928c/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5237f531dafcdf5a118ec501b0bbea1ee4e0928c/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=5237f531dafcdf5a118ec501b0bbea1ee4e0928c", "patch": "@@ -783,6 +783,7 @@ macarg (pfile, rest_args)\n   /* Try to parse as much of the argument as exists at this\n      input stack level.  */\n   pfile->no_macro_expand++;\n+  pfile->no_directives++;\n   CPP_OPTIONS (pfile)->no_line_commands++;\n   for (;;)\n     {\n@@ -823,6 +824,7 @@ macarg (pfile, rest_args)\n   CPP_OPTIONS (pfile)->put_out_comments = save_put_out_comments;\n   CPP_OPTIONS (pfile)->no_line_commands--;\n   pfile->no_macro_expand--;\n+  pfile->no_directives--;\n \n   return token;\n }"}, {"sha": "5375d2b220cfee77e7965498de6cb9f3794e4231", "filename": "gcc/cpplib.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5237f531dafcdf5a118ec501b0bbea1ee4e0928c/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5237f531dafcdf5a118ec501b0bbea1ee4e0928c/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=5237f531dafcdf5a118ec501b0bbea1ee4e0928c", "patch": "@@ -568,7 +568,15 @@ handle_directive (pfile)\n     }\n \n   CPP_SET_WRITTEN (pfile, old_written);\n-  (*kt->func) (pfile, kt);\n+\n+  if (pfile->no_directives)\n+    {\n+      cpp_error (pfile, \"`#%s' may not be used inside a macro argument\",\n+\t\t kt->name);\n+      skip_rest_of_line (pfile);\n+    }\n+  else\n+    (*kt->func) (pfile, kt);\n \n   return 1;\n }"}, {"sha": "c225916adf82b99db7fa1be003c2b3c089c0d5d0", "filename": "gcc/cpplib.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5237f531dafcdf5a118ec501b0bbea1ee4e0928c/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5237f531dafcdf5a118ec501b0bbea1ee4e0928c/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=5237f531dafcdf5a118ec501b0bbea1ee4e0928c", "patch": "@@ -212,6 +212,11 @@ struct cpp_reader\n   /* If non-zero, macros are not expanded. */\n   char no_macro_expand;\n \n+  /* If non-zero, directives cause a hard error.  Used when parsing\n+     macro arguments.  */\n+\n+  char no_directives;\n+\n   /* Print column number in error messages. */\n   char show_column;\n "}, {"sha": "024efcede65dedce05a329068686d7742fa6f2b9", "filename": "gcc/testsuite/gcc.dg/undef.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5237f531dafcdf5a118ec501b0bbea1ee4e0928c/gcc%2Ftestsuite%2Fgcc.dg%2Fundef.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5237f531dafcdf5a118ec501b0bbea1ee4e0928c/gcc%2Ftestsuite%2Fgcc.dg%2Fundef.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fundef.c?ref=5237f531dafcdf5a118ec501b0bbea1ee4e0928c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do preprocess } */\n+\n+/* 6.9.3.11: ...If there  are sequences of preprocessing tokens within\n+   the list of arguments  that  would  otherwise  act  as  preprocessing\n+   directives, the behavior is undefined.\n+\n+   I choose to make this a hard error.  It definitely should not cause\n+   a core dump.  */\n+\n+#define foo(bar) bar\n+\n+foo( blah\n+#undef foo\t/* { dg-error \"may not be used inside\" \"foo(#undef foo)\" } */\n+     blah )"}]}