{"sha": "f59be8dfbd85a7f8face7340950503750a8bfddb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU5YmU4ZGZiZDg1YTdmOGZhY2U3MzQwOTUwNTAzNzUwYThiZmRkYg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-11-29T11:49:52Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-11-29T12:06:32Z"}, "message": "d: Remove d_size_t from front-end sources (PR 87788)\n\nThe typedef for d_size_t assumes that the implementation of the\nfront-end is written in D itself, where size_t can map only to uint32_t\nor uint64_t.  As that is not the case for the current D front-end, the\ntypedef should be removed. This would fix the bootstrap on targets where\nin C++ size_t is a long, such as darwin i386.\n\nReviewed-on: https://github.com/dlang/dmd/pull/12008\n\ngcc/d/ChangeLog:\n\n\tPR d/87788\n\t* dmd/MERGE: Merge upsream dmd 45fa6cfd2.", "tree": {"sha": "305bc6ff822066730a607523d793fd878b5d363e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/305bc6ff822066730a607523d793fd878b5d363e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f59be8dfbd85a7f8face7340950503750a8bfddb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f59be8dfbd85a7f8face7340950503750a8bfddb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f59be8dfbd85a7f8face7340950503750a8bfddb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f59be8dfbd85a7f8face7340950503750a8bfddb/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fbf0ecb018020951e1eae16eec532d39b9e05c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fbf0ecb018020951e1eae16eec532d39b9e05c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fbf0ecb018020951e1eae16eec532d39b9e05c7"}], "stats": {"total": 76, "additions": 31, "deletions": 45}, "files": [{"sha": "4fa62a9f56a7fdfa11decacb1503f6a2bc18de41", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f59be8dfbd85a7f8face7340950503750a8bfddb/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f59be8dfbd85a7f8face7340950503750a8bfddb/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=f59be8dfbd85a7f8face7340950503750a8bfddb", "patch": "@@ -1,4 +1,4 @@\n-db0df3f7e6f2570f81d6c91ba173daa23361ea7b\n+45fa6cfd20827bb4252a616dc789514a1e673687\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "09dd3af6eacd84b004fd63390443c758fbaf4aaa", "filename": "gcc/d/dmd/expression.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f59be8dfbd85a7f8face7340950503750a8bfddb/gcc%2Fd%2Fdmd%2Fexpression.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f59be8dfbd85a7f8face7340950503750a8bfddb/gcc%2Fd%2Fdmd%2Fexpression.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.c?ref=f59be8dfbd85a7f8face7340950503750a8bfddb", "patch": "@@ -4340,7 +4340,7 @@ Expression *ArrayLiteralExp::syntaxCopy()\n         arraySyntaxCopy(elements));\n }\n \n-Expression *ArrayLiteralExp::getElement(d_size_t i)\n+Expression *ArrayLiteralExp::getElement(size_t i)\n {\n     Expression *el = (*elements)[i];\n     if (!el)"}, {"sha": "ccfaa65f7643e903b6a4e93e35591151da07da96", "filename": "gcc/d/dmd/expression.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f59be8dfbd85a7f8face7340950503750a8bfddb/gcc%2Fd%2Fdmd%2Fexpression.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f59be8dfbd85a7f8face7340950503750a8bfddb/gcc%2Fd%2Fdmd%2Fexpression.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.h?ref=f59be8dfbd85a7f8face7340950503750a8bfddb", "patch": "@@ -523,7 +523,7 @@ class ArrayLiteralExp : public Expression\n     static ArrayLiteralExp *create(Loc loc, Expressions *elements);\n     Expression *syntaxCopy();\n     bool equals(RootObject *o);\n-    Expression *getElement(d_size_t i);\n+    Expression *getElement(size_t i);\n     static Expressions* copyElements(Expression *e1, Expression *e2 = NULL);\n     bool isBool(bool result);\n     StringExp *toStringExp();"}, {"sha": "b0878c8f73060871822b4907a508133fad6d7eef", "filename": "gcc/d/dmd/mtype.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f59be8dfbd85a7f8face7340950503750a8bfddb/gcc%2Fd%2Fdmd%2Fmtype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f59be8dfbd85a7f8face7340950503750a8bfddb/gcc%2Fd%2Fdmd%2Fmtype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmtype.h?ref=f59be8dfbd85a7f8face7340950503750a8bfddb", "patch": "@@ -12,7 +12,6 @@\n \n #include \"root/root.h\"\n #include \"root/stringtable.h\"\n-#include \"root/dcompat.h\" // for d_size_t\n \n #include \"arraytypes.h\"\n #include \"ast_node.h\"\n@@ -635,7 +634,7 @@ class Parameter : public ASTNode\n \n     static Parameters *arraySyntaxCopy(Parameters *parameters);\n     static size_t dim(Parameters *parameters);\n-    static Parameter *getNth(Parameters *parameters, d_size_t nth, d_size_t *pn = NULL);\n+    static Parameter *getNth(Parameters *parameters, size_t nth, size_t *pn = NULL);\n     const char *toChars();\n     bool isCovariant(bool returnByRef, const Parameter *p) const;\n     static bool isCovariantScope(bool returnByRef, StorageClass from, StorageClass to);"}, {"sha": "d4eccd86dbd1156422cf88db66b9c6560cf73d10", "filename": "gcc/d/dmd/root/array.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f59be8dfbd85a7f8face7340950503750a8bfddb/gcc%2Fd%2Fdmd%2Froot%2Farray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f59be8dfbd85a7f8face7340950503750a8bfddb/gcc%2Fd%2Fdmd%2Froot%2Farray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Farray.h?ref=f59be8dfbd85a7f8face7340950503750a8bfddb", "patch": "@@ -16,7 +16,7 @@\n template <typename TYPE>\n struct Array\n {\n-    d_size_t length;\n+    size_t length;\n \n   private:\n     DArray<TYPE> data;\n@@ -42,8 +42,8 @@ struct Array\n     char *toChars() const\n     {\n         const char **buf = (const char **)mem.xmalloc(length * sizeof(const char *));\n-        d_size_t len = 2;\n-        for (d_size_t u = 0; u < length; u++)\n+        size_t len = 2;\n+        for (size_t u = 0; u < length; u++)\n         {\n             buf[u] = ((RootObject *)data.ptr[u])->toChars();\n             len += strlen(buf[u]) + 1;\n@@ -52,7 +52,7 @@ struct Array\n \n         str[0] = '[';\n         char *p = str + 1;\n-        for (d_size_t u = 0; u < length; u++)\n+        for (size_t u = 0; u < length; u++)\n         {\n             if (u)\n                 *p++ = ',';\n@@ -77,7 +77,7 @@ struct Array\n         insert(length, a);\n     }\n \n-    void reserve(d_size_t nentries)\n+    void reserve(size_t nentries)\n     {\n         //printf(\"Array::reserve: length = %d, data.length = %d, nentries = %d\\n\", (int)length, (int)data.length, (int)nentries);\n         if (data.length - length < nentries)\n@@ -106,7 +106,7 @@ struct Array\n             {\n                 /* Increase size by 1.5x to avoid excessive memory fragmentation\n                  */\n-                d_size_t increment = length / 2;\n+                size_t increment = length / 2;\n                 if (nentries > increment)       // if 1.5 is not enough\n                     increment = nentries;\n                 data.length = length + increment;\n@@ -115,18 +115,18 @@ struct Array\n         }\n     }\n \n-    void remove(d_size_t i)\n+    void remove(size_t i)\n     {\n         if (length - i - 1)\n             memmove(data.ptr + i, data.ptr + i + 1, (length - i - 1) * sizeof(TYPE));\n         length--;\n     }\n \n-    void insert(d_size_t index, Array *a)\n+    void insert(size_t index, Array *a)\n     {\n         if (a)\n         {\n-            d_size_t d = a->length;\n+            size_t d = a->length;\n             reserve(d);\n             if (length != index)\n                 memmove(data.ptr + index + d, data.ptr + index, (length - index) * sizeof(TYPE));\n@@ -135,15 +135,15 @@ struct Array\n         }\n     }\n \n-    void insert(d_size_t index, TYPE ptr)\n+    void insert(size_t index, TYPE ptr)\n     {\n         reserve(1);\n         memmove(data.ptr + index + 1, data.ptr + index, (length - index) * sizeof(TYPE));\n         data.ptr[index] = ptr;\n         length++;\n     }\n \n-    void setDim(d_size_t newdim)\n+    void setDim(size_t newdim)\n     {\n         if (length < newdim)\n         {\n@@ -152,9 +152,9 @@ struct Array\n         length = newdim;\n     }\n \n-    d_size_t find(TYPE ptr) const\n+    size_t find(TYPE ptr) const\n     {\n-        for (d_size_t i = 0; i < length; i++)\n+        for (size_t i = 0; i < length; i++)\n         {\n             if (data.ptr[i] == ptr)\n                 return i;\n@@ -167,7 +167,7 @@ struct Array\n         return find(ptr) != SIZE_MAX;\n     }\n \n-    TYPE& operator[] (d_size_t index)\n+    TYPE& operator[] (size_t index)\n     {\n #ifdef DEBUG\n         assert(index < length);"}, {"sha": "195e3beef571d26e5145a812ce8b02f4114b386b", "filename": "gcc/d/dmd/root/bitarray.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f59be8dfbd85a7f8face7340950503750a8bfddb/gcc%2Fd%2Fdmd%2Froot%2Fbitarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f59be8dfbd85a7f8face7340950503750a8bfddb/gcc%2Fd%2Fdmd%2Froot%2Fbitarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fbitarray.h?ref=f59be8dfbd85a7f8face7340950503750a8bfddb", "patch": "@@ -24,8 +24,8 @@ struct BitArray\n         mem.xfree(ptr);\n     }\n \n-    d_size_t len;\n-    d_size_t *ptr;\n+    size_t len;\n+    size_t *ptr;\n \n private:\n     BitArray(const BitArray&);"}, {"sha": "5aec84e1239480bb397be74443817fdc30bf5828", "filename": "gcc/d/dmd/root/dcompat.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f59be8dfbd85a7f8face7340950503750a8bfddb/gcc%2Fd%2Fdmd%2Froot%2Fdcompat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f59be8dfbd85a7f8face7340950503750a8bfddb/gcc%2Fd%2Fdmd%2Froot%2Fdcompat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fdcompat.h?ref=f59be8dfbd85a7f8face7340950503750a8bfddb", "patch": "@@ -34,15 +34,3 @@ struct DString : public DArray<const char>\n     DString(size_t length, const char *ptr)\n         : DArray<const char>(length, ptr) { }\n };\n-\n-/// Corresponding C++ type that maps to D size_t\n-#if __APPLE__ && __i386__\n-// size_t is 'unsigned long', which makes it mangle differently than D's 'uint'\n-typedef unsigned d_size_t;\n-#elif MARS && DMD_VERSION >= 2079 && DMD_VERSION <= 2081 && \\\n-        __APPLE__ && __SIZEOF_SIZE_T__ == 8\n-// DMD versions between 2.079 and 2.081 mapped D ulong to uint64_t on OS X.\n-typedef uint64_t d_size_t;\n-#else\n-typedef size_t d_size_t;\n-#endif"}, {"sha": "2ff5ee9b09c28cd225b5df9ecfda4b715c91db69", "filename": "gcc/d/dmd/root/outbuffer.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f59be8dfbd85a7f8face7340950503750a8bfddb/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f59be8dfbd85a7f8face7340950503750a8bfddb/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.h?ref=f59be8dfbd85a7f8face7340950503750a8bfddb", "patch": "@@ -39,13 +39,13 @@ struct OutBuffer\n         mem.xfree(data.ptr);\n     }\n     const DArray<unsigned char> slice() const { return data; }\n-    d_size_t length() const { return offset; }\n+    size_t length() const { return offset; }\n     char *extractData();\n \n     void reserve(size_t nbytes);\n     void setsize(size_t size);\n     void reset();\n-    void write(const void *data, d_size_t nbytes);\n+    void write(const void *data, size_t nbytes);\n     void writestring(const char *string);\n     void prependstring(const char *string);\n     void writenl();                     // write newline"}, {"sha": "fdb8676c2b9c0670463638a8ba9a4bffec37cf18", "filename": "gcc/d/dmd/root/rmem.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f59be8dfbd85a7f8face7340950503750a8bfddb/gcc%2Fd%2Fdmd%2Froot%2Frmem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f59be8dfbd85a7f8face7340950503750a8bfddb/gcc%2Fd%2Fdmd%2Froot%2Frmem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Frmem.h?ref=f59be8dfbd85a7f8face7340950503750a8bfddb", "patch": "@@ -8,18 +8,18 @@\n \n #pragma once\n \n-#include \"dcompat.h\"    // for d_size_t\n+#include \"dsystem.h\"    // for size_t\n \n struct Mem\n {\n     Mem() { }\n \n     static char *xstrdup(const char *s);\n-    static void *xmalloc(d_size_t size);\n-    static void *xcalloc(d_size_t size, d_size_t n);\n-    static void *xrealloc(void *p, d_size_t size);\n+    static void *xmalloc(size_t size);\n+    static void *xcalloc(size_t size, size_t n);\n+    static void *xrealloc(void *p, size_t size);\n     static void xfree(void *p);\n-    static void *xmallocdup(void *o, d_size_t size);\n+    static void *xmallocdup(void *o, size_t size);\n     static void error();\n };\n "}, {"sha": "8cbdbd8a91f0dc8c1dff24496638f8c357aa81f5", "filename": "gcc/d/dmd/root/stringtable.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f59be8dfbd85a7f8face7340950503750a8bfddb/gcc%2Fd%2Fdmd%2Froot%2Fstringtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f59be8dfbd85a7f8face7340950503750a8bfddb/gcc%2Fd%2Fdmd%2Froot%2Fstringtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fstringtable.h?ref=f59be8dfbd85a7f8face7340950503750a8bfddb", "patch": "@@ -9,7 +9,6 @@\n #pragma once\n \n #include \"root.h\"\n-#include \"dcompat.h\" // for d_size_t\n \n struct StringEntry;\n \n@@ -40,13 +39,13 @@ struct StringTable\n     size_t count;\n \n public:\n-    void _init(d_size_t size = 0);\n-    void reset(d_size_t size = 0);\n+    void _init(size_t size = 0);\n+    void reset(size_t size = 0);\n     ~StringTable();\n \n-    StringValue *lookup(const char *s, d_size_t len);\n+    StringValue *lookup(const char *s, size_t len);\n     StringValue *insert(const char *s, size_t len, void *ptrvalue);\n-    StringValue *update(const char *s, d_size_t len);\n+    StringValue *update(const char *s, size_t len);\n     int apply(int (*fp)(StringValue *));\n \n private:"}]}