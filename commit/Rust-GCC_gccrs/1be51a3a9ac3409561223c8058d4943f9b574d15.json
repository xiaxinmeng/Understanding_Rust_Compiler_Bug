{"sha": "1be51a3a9ac3409561223c8058d4943f9b574d15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJlNTFhM2E5YWMzNDA5NTYxMjIzYzgwNThkNDk0M2Y5YjU3NGQxNQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-10-12T15:35:02Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-10-12T15:36:26Z"}, "message": "PR c++/97201 - ICE in -Warray-bounds writing to result of operator new(0)\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97201\n\t* error.c (dump_type_suffix): Handle both the C and C++ forms of\n\tzero-length arrays.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR c++/97201\n\t* libsupc++/new (operator new): Add attribute alloc_size and malloc.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97201\n\t* g++.dg/warn/Wplacement-new-size-8.C: Adjust expected message.\n\t* g++.dg/warn/Warray-bounds-10.C: New test.\n\t* g++.dg/warn/Warray-bounds-11.C: New test.\n\t* g++.dg/warn/Warray-bounds-12.C: New test.\n\t* g++.dg/warn/Warray-bounds-13.C: New test.", "tree": {"sha": "e332d3ec5e66c8e0c51b13b551a8e7fa182eafb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e332d3ec5e66c8e0c51b13b551a8e7fa182eafb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1be51a3a9ac3409561223c8058d4943f9b574d15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1be51a3a9ac3409561223c8058d4943f9b574d15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1be51a3a9ac3409561223c8058d4943f9b574d15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1be51a3a9ac3409561223c8058d4943f9b574d15/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83685efd5fd1623cfc4e4c435ce2773d95d458d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83685efd5fd1623cfc4e4c435ce2773d95d458d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83685efd5fd1623cfc4e4c435ce2773d95d458d1"}], "stats": {"total": 287, "additions": 278, "deletions": 9}, "files": [{"sha": "396558be17f091500c326c255da897d2fb4e861f", "filename": "gcc/cp/error.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be51a3a9ac3409561223c8058d4943f9b574d15/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be51a3a9ac3409561223c8058d4943f9b574d15/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=1be51a3a9ac3409561223c8058d4943f9b574d15", "patch": "@@ -951,8 +951,11 @@ dump_type_suffix (cxx_pretty_printer *pp, tree t, int flags)\n       if (tree dtype = TYPE_DOMAIN (t))\n \t{\n \t  tree max = TYPE_MAX_VALUE (dtype);\n-\t  /* Zero-length arrays have an upper bound of SIZE_MAX.  */\n-\t  if (integer_all_onesp (max))\n+\t  /* Zero-length arrays have a null upper bound in C and SIZE_MAX\n+\t     in C++.  Handle both since the type might be constructed by\n+\t     the middle end and end up here as a result of a warning (see\n+\t     PR c++/97201).  */\n+\t  if (!max || integer_all_onesp (max))\n \t    pp_character (pp, '0');\n \t  else if (tree_fits_shwi_p (max))\n \t    pp_wide_integer (pp, tree_to_shwi (max) + 1);"}, {"sha": "22466977b68a5574e7a98a2eb453f8a19b707d4a", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-10.C", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be51a3a9ac3409561223c8058d4943f9b574d15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be51a3a9ac3409561223c8058d4943f9b574d15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-10.C?ref=1be51a3a9ac3409561223c8058d4943f9b574d15", "patch": "@@ -0,0 +1,64 @@\n+/* PR c++/97201 - ICE in -Warray-bounds writing to result of operator new(0)\n+   Verify that out-of-bounds accesses to memory returned by default operator\n+   new() are diagnosed.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -Warray-bounds -ftrack-macro-expansion=0\" } */\n+\n+typedef __INT32_TYPE__ int32_t;\n+\n+void sink (void*);\n+\n+#define OP_NEW(n)  operator new (n)\n+#define T(T, n, i) do {\t\t\t\t\\\n+    T *p = (T*) OP_NEW (n);\t\t\t\\\n+    p[i] = 0;\t\t\t\t\t\\\n+    sink (p);\t\t\t\t\t\\\n+  } while (0)\n+\n+void warn_op_new ()\n+{\n+  T (int32_t, 0, 0);          // { dg-warning \"array subscript 0 is outside array bounds of 'int32_t \\\\\\[0]'\" }\n+                              // { dg-message \"referencing an object of size \\\\d allocated by 'void\\\\\\* operator new\\\\\\(\\(long \\)?unsigned int\\\\\\)'\" \"note\" { target *-*-* } .-1 }\n+  T (int32_t, 1, 0);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[1]'\" }\n+  T (int32_t, 2, 0);         //  { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[2]'\" }\n+  T (int32_t, 3, 0);         // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[3]'\" }\n+\n+  T (int32_t, 4, 0);\n+\n+  T (int32_t, 0, 1);          // { dg-warning \"array subscript 1 is outside array bounds of 'int32_t \\\\\\[0]'\" }\n+  T (int32_t, 1, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 2, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 3, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 4, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 5, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[5]\" }\n+  T (int32_t, 6, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[6]\" }\n+  T (int32_t, 7, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[7]\" }\n+\n+  T (int32_t, 8, 1);\n+}\n+\n+\n+void warn_op_array_new ()\n+{\n+#undef OP_NEW\n+#define OP_NEW(n)  operator new[] (n)\n+\n+  T (int32_t, 0, 0);          // { dg-warning \"array subscript 0 is outside array bounds of 'int32_t \\\\\\[0]'\" }\n+                              // { dg-message \"referencing an object of size \\\\d allocated by 'void\\\\\\* operator new \\\\\\[]\\\\\\(\\(long \\)?unsigned int\\\\\\)'\" \"note\" { target *-*-* } .-1 }\n+  T (int32_t, 1, 0);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[1]'\" }\n+  T (int32_t, 2, 0);         //  { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[2]'\" }\n+  T (int32_t, 3, 0);         // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[3]'\" }\n+\n+  T (int32_t, 4, 0);\n+\n+  T (int32_t, 0, 1);          // { dg-warning \"array subscript 1 is outside array bounds of 'int32_t \\\\\\[0]'\" }\n+  T (int32_t, 1, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 2, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 3, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 4, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 5, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[5]\" }\n+  T (int32_t, 6, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[6]\" }\n+  T (int32_t, 7, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[7]\" }\n+\n+  T (int32_t, 8, 1);\n+}"}, {"sha": "9875e29085d3c4aaa040c2e438a6839a179a136a", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-11.C", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be51a3a9ac3409561223c8058d4943f9b574d15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be51a3a9ac3409561223c8058d4943f9b574d15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-11.C?ref=1be51a3a9ac3409561223c8058d4943f9b574d15", "patch": "@@ -0,0 +1,66 @@\n+/* PR c++/97201 - ICE in -Warray-bounds writing to result of operator new(0)\n+   Verify that out-of-bounds accesses to memory returned by nothrow operator\n+   new() are diagnosed.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -Warray-bounds -ftrack-macro-expansion=0\" } */\n+\n+#include <new>\n+\n+typedef __INT32_TYPE__ int32_t;\n+\n+void sink (void*);\n+\n+#define OP_NEW(n)  operator new (n, std::nothrow)\n+#define T(T, n, i) do {\t\t\t\t\\\n+    T *p = (T*) OP_NEW (n);\t\t\t\\\n+    p[i] = 0;\t\t\t\t\t\\\n+    sink (p);\t\t\t\t\t\\\n+  } while (0)\n+\n+void warn_op_new ()\n+{\n+  T (int32_t, 0, 0);          // { dg-warning \"array subscript 0 is outside array bounds of 'int32_t \\\\\\[0]'\" }\n+                              // { dg-message \"referencing an object of size \\\\d allocated by 'void\\\\\\* operator new\\\\\\(std::size_t, const std::nothrow_t.\\\\\\)'\" \"note\" { target *-*-* } .-1 }\n+  T (int32_t, 1, 0);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[1]'\" }\n+  T (int32_t, 2, 0);         //  { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[2]'\" }\n+  T (int32_t, 3, 0);         // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[3]'\" }\n+\n+  T (int32_t, 4, 0);\n+\n+  T (int32_t, 0, 1);          // { dg-warning \"array subscript 1 is outside array bounds of 'int32_t \\\\\\[0]'\" }\n+  T (int32_t, 1, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 2, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 3, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 4, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 5, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[5]\" }\n+  T (int32_t, 6, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[6]\" }\n+  T (int32_t, 7, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[7]\" }\n+\n+  T (int32_t, 8, 1);\n+}\n+\n+\n+void warn_op_array_new ()\n+{\n+#undef OP_NEW\n+#define OP_NEW(n)  operator new[] (n, std::nothrow)\n+\n+  T (int32_t, 0, 0);          // { dg-warning \"array subscript 0 is outside array bounds of 'int32_t \\\\\\[0]'\" }\n+                              // { dg-message \"referencing an object of size \\\\d allocated by 'void\\\\\\* operator new \\\\\\[]\\\\\\(std::size_t, const std::nothrow_t&\\\\\\)'\" \"note\" { target *-*-* } .-1 }\n+  T (int32_t, 1, 0);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[1]'\" }\n+  T (int32_t, 2, 0);         //  { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[2]'\" }\n+  T (int32_t, 3, 0);         // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[3]'\" }\n+\n+  T (int32_t, 4, 0);\n+\n+  T (int32_t, 0, 1);          // { dg-warning \"array subscript 1 is outside array bounds of 'int32_t \\\\\\[0]'\" }\n+  T (int32_t, 1, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 2, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 3, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 4, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 5, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[5]\" }\n+  T (int32_t, 6, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[6]\" }\n+  T (int32_t, 7, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[7]\" }\n+\n+  T (int32_t, 8, 1);\n+}"}, {"sha": "9e8b6048944671048789169812d5bbe93d407142", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-12.C", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be51a3a9ac3409561223c8058d4943f9b574d15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be51a3a9ac3409561223c8058d4943f9b574d15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-12.C?ref=1be51a3a9ac3409561223c8058d4943f9b574d15", "patch": "@@ -0,0 +1,66 @@\n+/* PR c++/97201 - ICE in -Warray-bounds writing to result of operator new(0)\n+   Verify that out-of-bounds accesses to memory returned by the new expression\n+   are diagnosed.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -Warray-bounds -ftrack-macro-expansion=0\" } */\n+\n+typedef __INT32_TYPE__ int32_t;\n+\n+template <int N> struct S { char a[N]; };\n+\n+void sink (void*);\n+\n+#define NEW(n)  new S<n>\n+#define T(T, n, i) do {\t\t\t\t\\\n+    T *p = (T*)NEW (n);\t\t\t\t\\\n+    p[i] = 0;\t\t\t\t\t\\\n+    sink (p);\t\t\t\t\t\\\n+  } while (0)\n+\n+void warn_new ()\n+{\n+  T (int32_t, 0, 0);          // { dg-warning \"array subscript 0 is outside array bounds of 'int32_t \\\\\\[0]'\" }\n+                              // { dg-message \"referencing an object of size \\\\d allocated by 'void\\\\\\* operator new\\\\\\(\\(long \\)?unsigned int\\\\\\)'\" \"note\" { target *-*-* } .-1 }\n+  T (int32_t, 1, 0);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[1]'\" }\n+  T (int32_t, 2, 0);         //  { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[2]'\" }\n+  T (int32_t, 3, 0);         // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[3]'\" }\n+\n+  T (int32_t, 4, 0);\n+\n+  T (int32_t, 0, 1);          // { dg-warning \"array subscript 1 is outside array bounds of 'int32_t \\\\\\[0]'\" }\n+  T (int32_t, 1, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 2, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 3, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 4, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 5, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[5]\" }\n+  T (int32_t, 6, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[6]\" }\n+  T (int32_t, 7, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[7]\" }\n+\n+  T (int32_t, 8, 1);\n+}\n+\n+\n+void warn_array_new ()\n+{\n+#undef NEW\n+#define NEW(n)  new char [n]\n+\n+  T (int32_t, 0, 0);          // { dg-warning \"array subscript 0 is outside array bounds of 'int32_t \\\\\\[0]'\" }\n+                              // { dg-message \"referencing an object of size \\\\d allocated by 'void\\\\\\* operator new \\\\\\[]\\\\\\(\\(long \\)?unsigned int\\\\\\)'\" \"note\" { target *-*-* } .-1 }\n+  T (int32_t, 1, 0);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[1]'\" }\n+  T (int32_t, 2, 0);         //  { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[2]'\" }\n+  T (int32_t, 3, 0);         // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[3]'\" }\n+\n+  T (int32_t, 4, 0);\n+\n+  T (int32_t, 0, 1);          // { dg-warning \"array subscript 1 is outside array bounds of 'int32_t \\\\\\[0]'\" }\n+  T (int32_t, 1, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 2, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 3, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 4, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 5, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[5]\" }\n+  T (int32_t, 6, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[6]\" }\n+  T (int32_t, 7, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[7]\" }\n+\n+  T (int32_t, 8, 1);\n+}"}, {"sha": "42fb809de3c2713bd976647f3bcc4db18973756f", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-13.C", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be51a3a9ac3409561223c8058d4943f9b574d15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be51a3a9ac3409561223c8058d4943f9b574d15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-13.C?ref=1be51a3a9ac3409561223c8058d4943f9b574d15", "patch": "@@ -0,0 +1,70 @@\n+/* PR c++/97201 - ICE in -Warray-bounds writing to result of operator new(0)\n+   Verify that out-of-bounds accesses to memory returned by the nothrow form\n+   of the new expression are diagnosed.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -Warray-bounds -ftrack-macro-expansion=0\" } */\n+\n+#include <new>\n+\n+typedef __INT32_TYPE__ int32_t;\n+\n+void sink (void*);\n+\n+template <int N> struct S { char a[N]; };\n+\n+void sink (void*);\n+\n+#define NEW(n)  new (std::nothrow) S<n>\n+#define T(T, n, i) do {\t\t\t\t\\\n+    T *p = (T*)NEW (n);\t\t\t\t\\\n+    p[i] = 0;\t\t\t\t\t\\\n+    sink (p);\t\t\t\t\t\\\n+  } while (0)\n+\n+void warn_nothrow_new ()\n+{\n+  T (int32_t, 0, 0);          // { dg-warning \"array subscript 0 is outside array bounds of 'int32_t \\\\\\[0]'\" }\n+                              // { dg-message \"referencing an object of size \\\\d allocated by 'void\\\\\\* operator new\\\\\\(std::size_t, const std::nothrow_t.\\\\\\)'\" \"note\" { target *-*-* } .-1 }\n+  T (int32_t, 1, 0);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[1]'\" }\n+  T (int32_t, 2, 0);         //  { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[2]'\" }\n+  T (int32_t, 3, 0);         // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[3]'\" }\n+\n+  T (int32_t, 4, 0);\n+\n+  T (int32_t, 0, 1);          // { dg-warning \"array subscript 1 is outside array bounds of 'int32_t \\\\\\[0]'\" }\n+  T (int32_t, 1, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 2, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 3, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 4, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 5, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[5]\" }\n+  T (int32_t, 6, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[6]\" }\n+  T (int32_t, 7, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[7]\" }\n+\n+  T (int32_t, 8, 1);\n+}\n+\n+\n+void warn_nothrow_array_new ()\n+{\n+#undef NEW\n+#define NEW(n)  new (std::nothrow) char [n]\n+\n+  T (int32_t, 0, 0);          // { dg-warning \"array subscript 0 is outside array bounds of 'int32_t \\\\\\[0]'\" }\n+                              // { dg-message \"referencing an object of size \\\\d allocated by 'void\\\\\\* operator new \\\\\\[]\\\\\\(std::size_t, const std::nothrow_t&\\\\\\)'\" \"note\" { target *-*-* } .-1 }\n+  T (int32_t, 1, 0);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[1]'\" }\n+  T (int32_t, 2, 0);         //  { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[2]'\" }\n+  T (int32_t, 3, 0);         // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[0]' is partly outside array bounds of 'unsigned char \\\\\\[3]'\" }\n+\n+  T (int32_t, 4, 0);\n+\n+  T (int32_t, 0, 1);          // { dg-warning \"array subscript 1 is outside array bounds of 'int32_t \\\\\\[0]'\" }\n+  T (int32_t, 1, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 2, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 3, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 4, 1);          // { dg-warning \"array subscript 1 is outside array bounds \" }\n+  T (int32_t, 5, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[5]\" }\n+  T (int32_t, 6, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[6]\" }\n+  T (int32_t, 7, 1);          // { dg-warning \"array subscript 'int32_t {aka int}\\\\\\[1]' is partly outside array bounds of 'unsigned char \\\\\\[7]\" }\n+\n+  T (int32_t, 8, 1);\n+}"}, {"sha": "77bd3314a19ac8aac80631465b9544c4d5276ae2", "filename": "gcc/testsuite/g++.dg/warn/Wplacement-new-size-8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be51a3a9ac3409561223c8058d4943f9b574d15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be51a3a9ac3409561223c8058d4943f9b574d15/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size-8.C?ref=1be51a3a9ac3409561223c8058d4943f9b574d15", "patch": "@@ -138,7 +138,7 @@ void test_var_off_schar (signed char i)\n   }\n \n   {\n-    char a[65281];              // { dg-message \"at offset \\\\\\[65153, 65408] from 'a'\" }\n+    char a[65281];              // { dg-message \"at offset \\\\\\[65153, 65281] from 'a'\" \"note\" }\n     new (a + i + 65280) S<1>;\n     new (a + i + 65281) S<1>;\n     new (a + i + 65281) S<128>;"}, {"sha": "15edf8ad6a9ae19256fa1ed2a7a4c92dda7bca96", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be51a3a9ac3409561223c8058d4943f9b574d15/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be51a3a9ac3409561223c8058d4943f9b574d15/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=1be51a3a9ac3409561223c8058d4943f9b574d15", "patch": "@@ -138,26 +138,26 @@ void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT\n   __attribute__((__externally_visible__));\n #endif\n _GLIBCXX_NODISCARD void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n-  __attribute__((__externally_visible__, __malloc__));\n+  __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));\n _GLIBCXX_NODISCARD void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n-  __attribute__((__externally_visible__, __malloc__));\n+  __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));\n void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n   __attribute__((__externally_visible__));\n void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n   __attribute__((__externally_visible__));\n #if __cpp_aligned_new\n _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t)\n-  __attribute__((__externally_visible__));\n+  __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));\n _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)\n-  _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));\n+  _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));\n void operator delete(void*, std::align_val_t)\n   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));\n void operator delete(void*, std::align_val_t, const std::nothrow_t&)\n   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));\n _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t)\n-  __attribute__((__externally_visible__));\n+  __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));\n _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)\n-  _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));\n+  _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));\n void operator delete[](void*, std::align_val_t)\n   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));\n void operator delete[](void*, std::align_val_t, const std::nothrow_t&)"}]}