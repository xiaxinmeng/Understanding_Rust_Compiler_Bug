{"sha": "4c22d9c8f4d9253e98445bdc1c6b895566389c83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMyMmQ5YzhmNGQ5MjUzZTk4NDQ1YmRjMWM2Yjg5NTU2NjM4OWM4Mw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-11-26T12:55:03Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-11-26T12:55:03Z"}, "message": "jcf-write.c (generate_bytecode_insns): In Call_EXPR, handle soft_monitorenter_node, soft_monitorexit_node, throw_node.\n\nH\n\t* jcf-write.c (generate_bytecode_insns):  In Call_EXPR, handle\n\tsoft_monitorenter_node, soft_monitorexit_node, throw_node.\n  \tHandle pre/post-increment/decrement of long.\n\tHandle missing exception handler (finally for synchronized).\n\nFrom-SVN: r23903", "tree": {"sha": "86f275cc3e71337fcb2c2b879b9ed757b2d4bbf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86f275cc3e71337fcb2c2b879b9ed757b2d4bbf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c22d9c8f4d9253e98445bdc1c6b895566389c83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c22d9c8f4d9253e98445bdc1c6b895566389c83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c22d9c8f4d9253e98445bdc1c6b895566389c83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c22d9c8f4d9253e98445bdc1c6b895566389c83/comments", "author": null, "committer": null, "parents": [{"sha": "21380ab0bf091aa2d088430196785118cded3c5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21380ab0bf091aa2d088430196785118cded3c5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21380ab0bf091aa2d088430196785118cded3c5f"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "6b987885058219bea101659fb73e65dc0b38764b", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c22d9c8f4d9253e98445bdc1c6b895566389c83/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c22d9c8f4d9253e98445bdc1c6b895566389c83/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=4c22d9c8f4d9253e98445bdc1c6b895566389c83", "patch": "@@ -1696,8 +1696,11 @@ generate_bytecode_insns (exp, target, state)\n       /* Stack, if ARRAY_REF:  ..., [result, ] array, index, oldvalue. */\n       /* Stack, if COMPONENT_REF:  ..., [result, ] objectref, oldvalue. */\n       /* Stack, otherwise:  ..., [result, ] oldvalue. */\n-      push_int_const (value, state); /* FIXME - assumes int! */\n-      NOTE_PUSH (1);\n+      if (size == 1)\n+\tpush_int_const (value, state);\n+      else\n+\tpush_long_const (value, value >= 0 ? 0 : -1, state);\n+      NOTE_PUSH (size);\n       emit_binop (OPCODE_iadd + adjust_typed_op (type, 3), type, state);\n       if (target != IGNORE_TARGET && ! post_op)\n \temit_dup (size, offset, state);\n@@ -1950,7 +1953,10 @@ generate_bytecode_insns (exp, target, state)\n \t    tree catch_clause = TREE_OPERAND (clause, 0);\n \t    tree exception_decl = BLOCK_EXPR_DECLS (catch_clause);\n \t    struct jcf_handler *handler = alloc_handler (start_label, end_label, state);\n-\t    handler->type = TREE_TYPE (TREE_TYPE (exception_decl));\n+\t    if (exception_decl == NULL_TREE)\n+\t      handler->type = NULL_TREE;\n+\t    else\n+\t      handler->type = TREE_TYPE (TREE_TYPE (exception_decl));\n \t    generate_bytecode_insns (catch_clause, IGNORE_TARGET, state);\n \t    if (CAN_COMPLETE_NORMALLY (catch_clause))\n \t      emit_goto (finished_label, state);\n@@ -2053,6 +2059,22 @@ generate_bytecode_insns (exp, target, state)\n \t    OP2 (index);\n \t    break;\n \t  }\n+\telse if (f == soft_monitorenter_node\n+\t\t || f == soft_monitorexit_node\n+\t\t || f == throw_node)\n+\t  {\n+\t    if (f == soft_monitorenter_node)\n+\t      op = OPCODE_monitorenter;\n+\t    else if (f == soft_monitorexit_node)\n+\t      op = OPCODE_monitorexit;\n+\t    else\n+\t      op = OPCODE_athrow;\n+\t    generate_bytecode_insns (TREE_VALUE (x), STACK_TARGET, state);\n+\t    RESERVE (1);\n+\t    OP1 (op);\n+\t    NOTE_POP (1);\n+\t    break;\n+\t  }\n \telse if (exp == soft_exceptioninfo_call_node)\n \t  {\n \t    NOTE_PUSH (1);  /* Pushed by exception system. */"}]}