{"sha": "1d783d3118325060c76b2f657d76e7fe0eed345e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ3ODNkMzExODMyNTA2MGM3NmIyZjY1N2Q3NmU3ZmUwZWVkMzQ1ZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-16T10:53:32Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-16T10:53:32Z"}, "message": "(alpha_builtin_saveregs): Use ptr_mode and conversions when need so\nworks for both OSF and NT.\n\nFrom-SVN: r9995", "tree": {"sha": "bf5280a7a8553aa7bc120d04cf5e70903f1e7704", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf5280a7a8553aa7bc120d04cf5e70903f1e7704"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d783d3118325060c76b2f657d76e7fe0eed345e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d783d3118325060c76b2f657d76e7fe0eed345e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d783d3118325060c76b2f657d76e7fe0eed345e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d783d3118325060c76b2f657d76e7fe0eed345e/comments", "author": null, "committer": null, "parents": [{"sha": "d3c89e1f6c85d4ed5a1f474189ef0dde571ee2de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3c89e1f6c85d4ed5a1f474189ef0dde571ee2de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3c89e1f6c85d4ed5a1f474189ef0dde571ee2de"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "cd67fe3c21380cbd9e08d4dfd1c372e7bbc49413", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d783d3118325060c76b2f657d76e7fe0eed345e/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d783d3118325060c76b2f657d76e7fe0eed345e/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=1d783d3118325060c76b2f657d76e7fe0eed345e", "patch": "@@ -1156,20 +1156,27 @@ alpha_builtin_saveregs (arglist)\n \t  ? plus_constant (virtual_incoming_args_rtx, 6 * UNITS_PER_WORD)\n \t  : plus_constant (virtual_incoming_args_rtx, - (6 * UNITS_PER_WORD)));\n \n+  addr = force_operand (addr, NULL_RTX);\n+\n   /* Allocate the va_list constructor */\n   block = assign_stack_local (BLKmode, 2 * UNITS_PER_WORD, BITS_PER_WORD);\n   RTX_UNCHANGING_P (block) = 1;\n   RTX_UNCHANGING_P (XEXP (block, 0)) = 1;\n \n-  /* Store the address of the first integer register in the\n-     __va_base member.  */\n-  emit_move_insn (change_address (block, Pmode, XEXP (block, 0)),\n-\t\t  force_operand (addr, NULL_RTX));\n+  /* Store the address of the first integer register in the __base member.\n+     Note that our offsets are correct for both 32- and 64-bit pointers\n+     due to the alignment of the __offset field (a long).  */\n+\n+#ifdef POINTERS_EXTEND_UNSIGNED\n+  addr = convert_memory_address (ptr_mode, addr);\n+#endif\n+\n+  emit_move_insn (change_address (block, ptr_mode, XEXP (block, 0)), addr);\n \n   /* Store the argsize as the __va_offset member.  */\n-  emit_move_insn (change_address (block, Pmode,\n+  emit_move_insn (change_address (block, ptr_mode,\n \t\t\t\t  plus_constant (XEXP (block, 0),\n-\t\t\t\t\t\t UNITS_PER_WORD)),\n+\t\t\t\t\t\t GET_MODE_SIZE (ptr_mode))),\n \t\t  force_operand (argsize, NULL_RTX));\n \n   /* Return the address of the va_list constructor, but don't put it in a"}]}