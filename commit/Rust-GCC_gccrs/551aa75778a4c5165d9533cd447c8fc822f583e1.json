{"sha": "551aa75778a4c5165d9533cd447c8fc822f583e1", "node_id": "C_kwDOANBUbNoAKDU1MWFhNzU3NzhhNGM1MTY1ZDk1MzNjZDQ0N2M4ZmM4MjJmNTgzZTE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-02T13:24:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-04T07:16:50Z"}, "message": "Add CLOBBER_EOL to mark storage end-of-life clobbers\n\nThis adds a flag to CONSTRUCTOR nodes indicating that for\nclobbers this marks the end-of-life of storage as opposed to\njust ending the lifetime of the object that occupied it.\nThe dangling pointer diagnostics uses CLOBBERs but is confused\nby those emitted by the C++ frontend for example which emits\nthem for the second purpose at the start of CTORs.  The issue\nis also appearant for aarch64 in PR104092.\n\nDistinguishing the two cases is also necessary for the PR90348 fix.\n\nSince I'm going to add another flag I added an enum clobber_flags\nand a defaulted argument to build_clobber plus a convenient way to\nquery the enum from the CTOR tree and specify it for gimple_clobber_p.\nSince 'CLOBBER' is already taken and I needed a name for the unspecified\nclobber we have now I used 'CLOBBER_UNDEF'.\n\n2022-02-03  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/90348\n\tPR middle-end/104092\ngcc/\n\t* tree-core.h (clobber_kind): New enum.\n\t(tree_base::u::bits::address_space): Document use in CONSTRUCTORs.\n\t* tree.h (CLOBBER_KIND): Add.\n\t(build_clobber): Add clobber kind argument, defaulted to\n\tCLOBBER_UNDEF.\n\t* tree.cc (build_clobber): Likewise.\n\t* gimple.h (gimple_clobber_p): New overload with specified kind.\n\t* tree-streamer-in.cc (streamer_read_tree_bitfields): Stream\n\tCLOBBER_KIND.\n\t* tree-streamer-out.cc (streamer_write_tree_bitfields):\n\tLikewise.\n\t* tree-pretty-print.cc (dump_generic_node): Mark EOL CLOBBERs.\n\t* gimplify.cc (gimplify_bind_expr): Build storage end-of-life clobbers\n\twith CLOBBER_EOL.\n\t(gimplify_target_expr): Likewise.\n\t* tree-inline.cc (expand_call_inline): Likewise.\n\t* tree-ssa-ccp.cc (insert_clobber_before_stack_restore): Likewise.\n\t* gimple-ssa-warn-access.cc (pass_waccess::check_stmt): Only treat\n\tCLOBBER_EOL clobbers as ending lifetime of storage.\n\ngcc/lto/\n\t* lto-common.cc (compare_tree_sccs_1): Compare CLOBBER_KIND.\n\ngcc/testsuite/\n\t* gcc.dg/pr87052.c: Adjust.", "tree": {"sha": "8a8afc73ba389c2efb5cf820afd7851f5aa64761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a8afc73ba389c2efb5cf820afd7851f5aa64761"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/551aa75778a4c5165d9533cd447c8fc822f583e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/551aa75778a4c5165d9533cd447c8fc822f583e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/551aa75778a4c5165d9533cd447c8fc822f583e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/551aa75778a4c5165d9533cd447c8fc822f583e1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e78d98f76f8d6ee4d06fc98f7f7c3ea4b86c828c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e78d98f76f8d6ee4d06fc98f7f7c3ea4b86c828c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e78d98f76f8d6ee4d06fc98f7f7c3ea4b86c828c"}], "stats": {"total": 63, "additions": 50, "deletions": 13}, "files": [{"sha": "80d41ea4383aae5d1121a59911e581259ce225f5", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=551aa75778a4c5165d9533cd447c8fc822f583e1", "patch": "@@ -4328,7 +4328,8 @@ is_auto_decl (tree x)\n void\n pass_waccess::check_stmt (gimple *stmt)\n {\n-  if (m_check_dangling_p && gimple_clobber_p (stmt))\n+  if (m_check_dangling_p\n+      && gimple_clobber_p (stmt, CLOBBER_EOL))\n     {\n       /* Ignore clobber statemts in blocks with exceptional edges.  */\n       basic_block bb = gimple_bb (stmt);"}, {"sha": "77a5a07e9b5a2a447f2e2e82e0455cb69994aa6c", "filename": "gcc/gimple.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=551aa75778a4c5165d9533cd447c8fc822f583e1", "patch": "@@ -2939,6 +2939,15 @@ gimple_clobber_p (const gimple *s)\n          && TREE_CLOBBER_P (gimple_assign_rhs1 (s));\n }\n \n+/* Return true if S is a clobber statement.  */\n+\n+static inline bool\n+gimple_clobber_p (const gimple *s, enum clobber_kind kind)\n+{\n+  return gimple_clobber_p (s)\n+\t && CLOBBER_KIND (gimple_assign_rhs1 (s)) == kind;\n+}\n+\n /* Return true if GS is a GIMPLE_CALL.  */\n \n static inline bool"}, {"sha": "875b115d02d5b9b560bbe25b22b85bf589115f41", "filename": "gcc/gimplify.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Fgimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Fgimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.cc?ref=551aa75778a4c5165d9533cd447c8fc822f583e1", "patch": "@@ -1475,7 +1475,7 @@ gimplify_bind_expr (tree *expr_p, gimple_seq *pre_p)\n \t      && !is_gimple_reg (t)\n \t      && flag_stack_reuse != SR_NONE)\n \t    {\n-\t      tree clobber = build_clobber (TREE_TYPE (t));\n+\t      tree clobber = build_clobber (TREE_TYPE (t), CLOBBER_EOL);\n \t      gimple *clobber_stmt;\n \t      clobber_stmt = gimple_build_assign (t, clobber);\n \t      gimple_set_location (clobber_stmt, end_locus);\n@@ -6981,7 +6981,7 @@ gimplify_target_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t{\n \t  if (flag_stack_reuse == SR_ALL)\n \t    {\n-\t      tree clobber = build_clobber (TREE_TYPE (temp));\n+\t      tree clobber = build_clobber (TREE_TYPE (temp), CLOBBER_EOL);\n \t      clobber = build2 (MODIFY_EXPR, TREE_TYPE (temp), temp, clobber);\n \t      gimple_push_cleanup (temp, clobber, false, pre_p, true);\n \t    }"}, {"sha": "ca28586a1e8089fbd28a11f8162c780f5192a1b3", "filename": "gcc/lto/lto-common.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Flto%2Flto-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Flto%2Flto-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-common.cc?ref=551aa75778a4c5165d9533cd447c8fc822f583e1", "patch": "@@ -1309,7 +1309,10 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n       return false;\n \n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n-    compare_values (CONSTRUCTOR_NELTS);\n+    {\n+      compare_values (CLOBBER_KIND);\n+      compare_values (CONSTRUCTOR_NELTS);\n+    }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_IDENTIFIER))\n     if (IDENTIFIER_LENGTH (t1) != IDENTIFIER_LENGTH (t2)"}, {"sha": "18e092c46744ea42a761e1034e30fc721d4c6496", "filename": "gcc/testsuite/gcc.dg/pr87052.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87052.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87052.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87052.c?ref=551aa75778a4c5165d9533cd447c8fc822f583e1", "patch": "@@ -38,4 +38,4 @@ void test (void)\n    { dg-final { scan-tree-dump-times \"c = \\\"\\\";\"  1 \"gimple\" } }\n    { dg-final { scan-tree-dump-times \"d = { *};\"  1 \"gimple\" } }\n    { dg-final { scan-tree-dump-times \"e = \"  1 \"gimple\" } }\n-   { dg-final { scan-tree-dump-times \"e = {CLOBBER}\"  1 \"gimple\" } }  */\n+   { dg-final { scan-tree-dump-times \"e = {CLOBBER\\\\(eol\\\\)}\"  1 \"gimple\" } }  */"}, {"sha": "bf2efa613307132bf2cdd4be0151386a05de4632", "filename": "gcc/tree-core.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=551aa75778a4c5165d9533cd447c8fc822f583e1", "patch": "@@ -963,6 +963,15 @@ enum annot_expr_kind {\n   annot_expr_kind_last\n };\n \n+/* The kind of a TREE_CLOBBER_P CONSTRUCTOR node.  */\n+enum clobber_kind {\n+  /* Unspecified, this clobber acts as a store of an undefined value.  */\n+  CLOBBER_UNDEF,\n+  /* This clobber ends the lifetime of the storage.  */\n+  CLOBBER_EOL,\n+  CLOBBER_LAST\n+};\n+\n /*---------------------------------------------------------------------------\n                                 Type definitions\n ---------------------------------------------------------------------------*/\n@@ -1055,7 +1064,8 @@ struct GTY(()) tree_base {\n \n       /* This field is only used with TREE_TYPE nodes; the only reason it is\n \t present in tree_base instead of tree_type is to save space.  The size\n-\t of the field must be large enough to hold addr_space_t values.  */\n+\t of the field must be large enough to hold addr_space_t values.\n+\t For CONSTRUCTOR nodes this holds the clobber_kind enum.  */\n       unsigned address_space : 8;\n     } bits;\n "}, {"sha": "ca66a8266b14de42c8c10917b06239aaf93a9758", "filename": "gcc/tree-inline.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Ftree-inline.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Ftree-inline.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.cc?ref=551aa75778a4c5165d9533cd447c8fc822f583e1", "patch": "@@ -5138,7 +5138,7 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id,\n \t      && !is_gimple_reg (*varp)\n \t      && !(id->debug_map && id->debug_map->get (p)))\n \t    {\n-\t      tree clobber = build_clobber (TREE_TYPE (*varp));\n+\t      tree clobber = build_clobber (TREE_TYPE (*varp), CLOBBER_EOL);\n \t      gimple *clobber_stmt;\n \t      clobber_stmt = gimple_build_assign (*varp, clobber);\n \t      gimple_set_location (clobber_stmt, gimple_location (stmt));\n@@ -5207,7 +5207,7 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id,\n \t  && !is_gimple_reg (id->retvar)\n \t  && !stmt_ends_bb_p (stmt))\n \t{\n-\t  tree clobber = build_clobber (TREE_TYPE (id->retvar));\n+\t  tree clobber = build_clobber (TREE_TYPE (id->retvar), CLOBBER_EOL);\n \t  gimple *clobber_stmt;\n \t  clobber_stmt = gimple_build_assign (id->retvar, clobber);\n \t  gimple_set_location (clobber_stmt, gimple_location (old_stmt));"}, {"sha": "666b7a70ea2d5c90dbbfe03ac57f92058a90fa63", "filename": "gcc/tree-pretty-print.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Ftree-pretty-print.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Ftree-pretty-print.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.cc?ref=551aa75778a4c5165d9533cd447c8fc822f583e1", "patch": "@@ -2500,7 +2500,11 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n \t  }\n \tpp_left_brace (pp);\n \tif (TREE_CLOBBER_P (node))\n-\t  pp_string (pp, \"CLOBBER\");\n+\t  {\n+\t    pp_string (pp, \"CLOBBER\");\n+\t    if (CLOBBER_KIND (node) == CLOBBER_EOL)\n+\t      pp_string (pp, \"(eol)\");\n+\t  }\n \telse if (TREE_CODE (TREE_TYPE (node)) == RECORD_TYPE\n \t\t || TREE_CODE (TREE_TYPE (node)) == UNION_TYPE)\n \t  is_struct_init = true;"}, {"sha": "9164efe30370199c7a2b972593336508d287c35f", "filename": "gcc/tree-ssa-ccp.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Ftree-ssa-ccp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Ftree-ssa-ccp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.cc?ref=551aa75778a4c5165d9533cd447c8fc822f583e1", "patch": "@@ -2505,7 +2505,7 @@ insert_clobber_before_stack_restore (tree saved_val, tree var,\n   FOR_EACH_IMM_USE_STMT (stmt, iter, saved_val)\n     if (gimple_call_builtin_p (stmt, BUILT_IN_STACK_RESTORE))\n       {\n-\tclobber = build_clobber (TREE_TYPE (var));\n+\tclobber = build_clobber (TREE_TYPE (var), CLOBBER_EOL);\n \tclobber_stmt = gimple_build_assign (var, clobber);\n \n \ti = gsi_for_stmt (stmt);"}, {"sha": "a35a810f4d100240341bb3d3421a77505d82c403", "filename": "gcc/tree-streamer-in.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Ftree-streamer-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Ftree-streamer-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.cc?ref=551aa75778a4c5165d9533cd447c8fc822f583e1", "patch": "@@ -559,6 +559,8 @@ streamer_read_tree_bitfields (class lto_input_block *ib,\n \n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n     {\n+      CLOBBER_KIND (expr)\n+\t= bp_unpack_enum (&bp, clobber_kind, CLOBBER_LAST);\n       unsigned HOST_WIDE_INT length = bp_unpack_var_len_unsigned (&bp);\n       if (length > 0)\n \tvec_safe_grow (CONSTRUCTOR_ELTS (expr), length, true);"}, {"sha": "d39dc158a4650d802d9f3dc6feed99e4749aab37", "filename": "gcc/tree-streamer-out.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Ftree-streamer-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Ftree-streamer-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.cc?ref=551aa75778a4c5165d9533cd447c8fc822f583e1", "patch": "@@ -504,7 +504,10 @@ streamer_write_tree_bitfields (struct output_block *ob, tree expr)\n     cl_optimization_stream_out (ob, &bp, TREE_OPTIMIZATION (expr));\n \n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n-    bp_pack_var_len_unsigned (&bp, CONSTRUCTOR_NELTS (expr));\n+    {\n+      bp_pack_enum (&bp, clobber_kind, CLOBBER_LAST, CLOBBER_KIND (expr));\n+      bp_pack_var_len_unsigned (&bp, CONSTRUCTOR_NELTS (expr));\n+    }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION)\n       /* Don't stream these when passing things to a different target.  */"}, {"sha": "dfcdf6822f136b8ea3d085429945938f94d776bc", "filename": "gcc/tree.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=551aa75778a4c5165d9533cd447c8fc822f583e1", "patch": "@@ -2311,10 +2311,11 @@ build_constructor_va (tree type, int nelts, ...)\n /* Return a node of type TYPE for which TREE_CLOBBER_P is true.  */\n \n tree\n-build_clobber (tree type)\n+build_clobber (tree type, enum clobber_kind kind)\n {\n   tree clobber = build_constructor (type, NULL);\n   TREE_THIS_VOLATILE (clobber) = true;\n+  CLOBBER_KIND (clobber) = kind;\n   return clobber;\n }\n "}, {"sha": "95334b077da020066db68eae88c4002433b4d6c9", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/551aa75778a4c5165d9533cd447c8fc822f583e1/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=551aa75778a4c5165d9533cd447c8fc822f583e1", "patch": "@@ -1155,6 +1155,10 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define TREE_CLOBBER_P(NODE) \\\n   (TREE_CODE (NODE) == CONSTRUCTOR && TREE_THIS_VOLATILE (NODE))\n \n+/* Return the clobber_kind of a CLOBBER CONSTRUCTOR.  */\n+#define CLOBBER_KIND(NODE) \\\n+  (CONSTRUCTOR_CHECK (NODE)->base.u.bits.address_space)\n+\n /* Define fields and accessors for some nodes that represent expressions.  */\n \n /* Nonzero if NODE is an empty statement (NOP_EXPR <0>).  */\n@@ -4559,7 +4563,7 @@ extern tree build_constructor_single (tree, tree, tree);\n extern tree build_constructor_from_list (tree, tree);\n extern tree build_constructor_from_vec (tree, const vec<tree, va_gc> *);\n extern tree build_constructor_va (tree, int, ...);\n-extern tree build_clobber (tree);\n+extern tree build_clobber (tree, enum clobber_kind = CLOBBER_UNDEF);\n extern tree build_real_from_int_cst (tree, const_tree);\n extern tree build_real_from_wide (tree, const wide_int_ref &, signop);\n extern tree build_complex (tree, tree, tree);"}]}