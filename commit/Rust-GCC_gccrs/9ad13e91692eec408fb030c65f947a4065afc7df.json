{"sha": "9ad13e91692eec408fb030c65f947a4065afc7df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFkMTNlOTE2OTJlZWM0MDhmYjAzMGM2NWY5NDdhNDA2NWFmYzdkZg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-07-07T19:43:33Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-07-07T19:43:33Z"}, "message": "re PR fortran/36341 (MATMUL: Bounds check missing)\n\n2008-07-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/36341\n\tPR fortran/34670\n\t* m4/matmul.m4:  Add bounds checking.\n\t* m4/matmull.m4:  Likewise.\n\t* generated/matmul_c10.c: Regenerated.\n\t* generated/matmul_c16.c: Regenerated.\n\t* generated/matmul_c4.c: Regenerated.\n\t* generated/matmul_c8.c: Regenerated.\n\t* generated/matmul_i1.c: Regenerated.\n\t* generated/matmul_i16.c: Regenerated.\n\t* generated/matmul_i2.c: Regenerated.\n\t* generated/matmul_i4.c: Regenerated.\n\t* generated/matmul_i8.c: Regenerated.\n\t* generated/matmul_l16.c: Regenerated.\n\t* generated/matmul_l4.c: Regenerated.\n\t* generated/matmul_l8.c: Regenerated.\n\t* generated/matmul_r10.c: Regenerated.\n\t* generated/matmul_r16.c: Regenerated.\n\t* generated/matmul_r4.c: Regenerated.\n\t* generated/matmul_r8.c: Regenerated.\n\n2008-07-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/36341\n\tPR fortran/34670\n\t* gfortran.dg/matmul_bounds_2.f90:  New test.\n\t* gfortran.dg/matmul_bounds_3.f90:  New test.\n\t* gfortran.dg/matmul_bounds_4.f90:  New test.\n\t* gfortran.dg/matmul_bounds_5.f90:  New test.\n\nFrom-SVN: r137594", "tree": {"sha": "5e85887ee69ad7ab0f40465ea4c2fc12aeb7c474", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e85887ee69ad7ab0f40465ea4c2fc12aeb7c474"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ad13e91692eec408fb030c65f947a4065afc7df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad13e91692eec408fb030c65f947a4065afc7df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ad13e91692eec408fb030c65f947a4065afc7df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad13e91692eec408fb030c65f947a4065afc7df/comments", "author": null, "committer": null, "parents": [{"sha": "8432ea85051b1ea9502b73c009856890189609a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8432ea85051b1ea9502b73c009856890189609a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8432ea85051b1ea9502b73c009856890189609a6"}], "stats": {"total": 834, "additions": 834, "deletions": 0}, "files": [{"sha": "143f75db13d4319592f62633ad1fc46ae0e3c869", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -1,3 +1,12 @@\n+2008-07-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/36341\n+\tPR fortran/34670\n+\t* gfortran.dg/matmul_bounds_2.f90:  New test.\n+\t* gfortran.dg/matmul_bounds_3.f90:  New test.\n+\t* gfortran.dg/matmul_bounds_4.f90:  New test.\n+\t* gfortran.dg/matmul_bounds_5.f90:  New test.\n+\n 2008-07-07  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/torture/pta-ptrarith-1.c: New testcase."}, {"sha": "429b28c3016b6bfe7f6251fca38b3c54d1d406d1", "filename": "gcc/testsuite/gfortran.dg/matmul_bounds_2.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_2.f90?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+! { dg-shouldfail \"Fortran runtime error: Incorrect extent in return array in MATMUL intrinsic for dimension 2: is 2, should be 3\" }\n+program main\n+  real, dimension(3,2) :: a\n+  real, dimension(2,3) :: b\n+  real, dimension(:,:), allocatable :: ret\n+  allocate (ret(2,2))\n+  a = 1.0\n+  b = 2.3\n+  ret = matmul(b,a)  ! This is OK\n+  deallocate(ret)\n+  allocate(ret(3,2))\n+  ret = matmul(a,b)  ! This should throw an error.\n+end program main\n+! { dg-output \"Fortran runtime error: Incorrect extent in return array in MATMUL intrinsic for dimension 2: is 2, should be 3\" }"}, {"sha": "c5830ded729e9e9a3474b0d01f36560c6c3873e7", "filename": "gcc/testsuite/gfortran.dg/matmul_bounds_3.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_3.f90?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+! { dg-shouldfail \"Fortran runtime error: Incorrect extent in return array in MATMUL intrinsic for dimension 1: is 2, should be 3\" }\n+program main\n+  real, dimension(3,2) :: a\n+  real, dimension(2,3) :: b\n+  real, dimension(:,:), allocatable :: ret\n+  allocate (ret(3,3))\n+  a = 1.0\n+  b = 2.3\n+  ret = matmul(a,b)  ! This is OK\n+  deallocate(ret)\n+  allocate(ret(2,3))\n+  ret = matmul(a,b)  ! This should throw an error.\n+end program main\n+! { dg-output \"Fortran runtime error: Incorrect extent in return array in MATMUL intrinsic for dimension 1: is 2, should be 3\" }"}, {"sha": "a61bacc1d2b42a83b81846875cc95bac936fb81a", "filename": "gcc/testsuite/gfortran.dg/matmul_bounds_4.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_4.f90?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+! { dg-shouldfail \"Fortran runtime error: Incorrect extent in return array in MATMUL intrinsic: is 3, should be 2\" }\n+program main\n+  real, dimension(3) :: a\n+  real, dimension(3,2) :: b\n+  real, dimension(:), allocatable :: ret\n+  allocate (ret(2))\n+  a = 1.0\n+  b = 2.3\n+  ret = matmul(a,b)  ! This is OK\n+  deallocate(ret)\n+  allocate(ret(3))\n+  ret = matmul(a,b)  ! This should throw an error.\n+end program main\n+! { dg-output \"Fortran runtime error: Incorrect extent in return array in MATMUL intrinsic: is 3, should be 2\" }"}, {"sha": "4b20098f50fb6dcd2313424f61692809df04ff52", "filename": "gcc/testsuite/gfortran.dg/matmul_bounds_5.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_bounds_5.f90?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+! { dg-shouldfail \"Fortran runtime error: Incorrect extent in return array in MATMUL intrinsic: is 3, should be 2\" }\n+program main\n+  real, dimension(2,3) :: a\n+  real, dimension(3) :: b\n+  real, dimension(:), allocatable :: ret\n+  allocate (ret(2))\n+  a = 1.0\n+  b = 2.3\n+  ret = matmul(a,b)  ! This is OK\n+  deallocate(ret)\n+  allocate(ret(3))\n+  ret = matmul(a,b)  ! This should throw an error.\n+end program main\n+! { dg-output \"Fortran runtime error: Incorrect extent in return array in MATMUL intrinsic: is 3, should be 2\" }"}, {"sha": "c845606c80311c8186bec235aa88730cf99b65ac", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -1,3 +1,26 @@\n+2008-07-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/36341\n+\tPR fortran/34670\n+\t* m4/matmul.m4:  Add bounds checking.\n+\t* m4/matmull.m4:  Likewise.\n+\t* generated/matmul_c10.c: Regenerated.\n+\t* generated/matmul_c16.c: Regenerated.\n+\t* generated/matmul_c4.c: Regenerated.\n+\t* generated/matmul_c8.c: Regenerated.\n+\t* generated/matmul_i1.c: Regenerated.\n+\t* generated/matmul_i16.c: Regenerated.\n+\t* generated/matmul_i2.c: Regenerated.\n+\t* generated/matmul_i4.c: Regenerated.\n+\t* generated/matmul_i8.c: Regenerated.\n+\t* generated/matmul_l16.c: Regenerated.\n+\t* generated/matmul_l4.c: Regenerated.\n+\t* generated/matmul_l8.c: Regenerated.\n+\t* generated/matmul_r10.c: Regenerated.\n+\t* generated/matmul_r16.c: Regenerated.\n+\t* generated/matmul_r4.c: Regenerated.\n+\t* generated/matmul_r8.c: Regenerated.\n+\n 2008-07-07  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* acinclude.m4 (LIBGFOR_CHECK_GTHR_DEFAULT): Fix configure cache"}, {"sha": "0e378626f9603de3f243dcf17f9c31cc0a05538a", "filename": "libgfortran/generated/matmul_c10.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c10.c?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -135,6 +135,47 @@ matmul_c10 (gfc_array_c10 * const restrict retarray,\n \t= internal_malloc_size (sizeof (GFC_COMPLEX_10) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n+    else if (compile_options.bounds_check)\n+      {\n+\tindex_type ret_extent, arg_extent;\n+\n+\tif (GFC_DESCRIPTOR_RANK (a) == 1)\n+\t  {\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+\telse if (GFC_DESCRIPTOR_RANK (b) == 1)\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\t    \n+\t  }\n+\telse\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 1:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[1].ubound + 1 - retarray->dim[1].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 2:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+      }\n \n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)"}, {"sha": "34cc51dbd78b509776f745d78e835baa137e5f03", "filename": "libgfortran/generated/matmul_c16.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c16.c?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -135,6 +135,47 @@ matmul_c16 (gfc_array_c16 * const restrict retarray,\n \t= internal_malloc_size (sizeof (GFC_COMPLEX_16) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n+    else if (compile_options.bounds_check)\n+      {\n+\tindex_type ret_extent, arg_extent;\n+\n+\tif (GFC_DESCRIPTOR_RANK (a) == 1)\n+\t  {\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+\telse if (GFC_DESCRIPTOR_RANK (b) == 1)\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\t    \n+\t  }\n+\telse\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 1:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[1].ubound + 1 - retarray->dim[1].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 2:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+      }\n \n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)"}, {"sha": "fdfea1df9554bc1d29f8c53871e1ff192b9be666", "filename": "libgfortran/generated/matmul_c4.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c4.c?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -135,6 +135,47 @@ matmul_c4 (gfc_array_c4 * const restrict retarray,\n \t= internal_malloc_size (sizeof (GFC_COMPLEX_4) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n+    else if (compile_options.bounds_check)\n+      {\n+\tindex_type ret_extent, arg_extent;\n+\n+\tif (GFC_DESCRIPTOR_RANK (a) == 1)\n+\t  {\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+\telse if (GFC_DESCRIPTOR_RANK (b) == 1)\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\t    \n+\t  }\n+\telse\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 1:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[1].ubound + 1 - retarray->dim[1].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 2:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+      }\n \n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)"}, {"sha": "9d6694922f109f3732ea675677a8de9566a67aa9", "filename": "libgfortran/generated/matmul_c8.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c8.c?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -135,6 +135,47 @@ matmul_c8 (gfc_array_c8 * const restrict retarray,\n \t= internal_malloc_size (sizeof (GFC_COMPLEX_8) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n+    else if (compile_options.bounds_check)\n+      {\n+\tindex_type ret_extent, arg_extent;\n+\n+\tif (GFC_DESCRIPTOR_RANK (a) == 1)\n+\t  {\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+\telse if (GFC_DESCRIPTOR_RANK (b) == 1)\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\t    \n+\t  }\n+\telse\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 1:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[1].ubound + 1 - retarray->dim[1].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 2:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+      }\n \n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)"}, {"sha": "34fd7c51b78bfe9354c4c83cc66c38a53a170823", "filename": "libgfortran/generated/matmul_i1.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i1.c?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -135,6 +135,47 @@ matmul_i1 (gfc_array_i1 * const restrict retarray,\n \t= internal_malloc_size (sizeof (GFC_INTEGER_1) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n+    else if (compile_options.bounds_check)\n+      {\n+\tindex_type ret_extent, arg_extent;\n+\n+\tif (GFC_DESCRIPTOR_RANK (a) == 1)\n+\t  {\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+\telse if (GFC_DESCRIPTOR_RANK (b) == 1)\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\t    \n+\t  }\n+\telse\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 1:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[1].ubound + 1 - retarray->dim[1].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 2:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+      }\n \n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)"}, {"sha": "0c7c5d8f39662f1d06237f818f808cc8bcf01b2f", "filename": "libgfortran/generated/matmul_i16.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i16.c?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -135,6 +135,47 @@ matmul_i16 (gfc_array_i16 * const restrict retarray,\n \t= internal_malloc_size (sizeof (GFC_INTEGER_16) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n+    else if (compile_options.bounds_check)\n+      {\n+\tindex_type ret_extent, arg_extent;\n+\n+\tif (GFC_DESCRIPTOR_RANK (a) == 1)\n+\t  {\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+\telse if (GFC_DESCRIPTOR_RANK (b) == 1)\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\t    \n+\t  }\n+\telse\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 1:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[1].ubound + 1 - retarray->dim[1].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 2:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+      }\n \n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)"}, {"sha": "5d55847edcea00d9cce57008b8053786e2d48149", "filename": "libgfortran/generated/matmul_i2.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i2.c?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -135,6 +135,47 @@ matmul_i2 (gfc_array_i2 * const restrict retarray,\n \t= internal_malloc_size (sizeof (GFC_INTEGER_2) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n+    else if (compile_options.bounds_check)\n+      {\n+\tindex_type ret_extent, arg_extent;\n+\n+\tif (GFC_DESCRIPTOR_RANK (a) == 1)\n+\t  {\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+\telse if (GFC_DESCRIPTOR_RANK (b) == 1)\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\t    \n+\t  }\n+\telse\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 1:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[1].ubound + 1 - retarray->dim[1].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 2:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+      }\n \n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)"}, {"sha": "a80f14940c81cd0df0a2780f778038e7623df563", "filename": "libgfortran/generated/matmul_i4.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i4.c?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -135,6 +135,47 @@ matmul_i4 (gfc_array_i4 * const restrict retarray,\n \t= internal_malloc_size (sizeof (GFC_INTEGER_4) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n+    else if (compile_options.bounds_check)\n+      {\n+\tindex_type ret_extent, arg_extent;\n+\n+\tif (GFC_DESCRIPTOR_RANK (a) == 1)\n+\t  {\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+\telse if (GFC_DESCRIPTOR_RANK (b) == 1)\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\t    \n+\t  }\n+\telse\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 1:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[1].ubound + 1 - retarray->dim[1].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 2:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+      }\n \n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)"}, {"sha": "91499c793e6b4edf65809bf4a787e7c689f8b98d", "filename": "libgfortran/generated/matmul_i8.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i8.c?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -135,6 +135,47 @@ matmul_i8 (gfc_array_i8 * const restrict retarray,\n \t= internal_malloc_size (sizeof (GFC_INTEGER_8) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n+    else if (compile_options.bounds_check)\n+      {\n+\tindex_type ret_extent, arg_extent;\n+\n+\tif (GFC_DESCRIPTOR_RANK (a) == 1)\n+\t  {\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+\telse if (GFC_DESCRIPTOR_RANK (b) == 1)\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\t    \n+\t  }\n+\telse\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 1:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[1].ubound + 1 - retarray->dim[1].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 2:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+      }\n \n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)"}, {"sha": "b604edfb2ca98309d6110ade53857f8308c112b5", "filename": "libgfortran/generated/matmul_l16.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_l16.c?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -99,6 +99,47 @@ matmul_l16 (gfc_array_l16 * const restrict retarray,\n \t= internal_malloc_size (sizeof (GFC_LOGICAL_16) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n+    else if (compile_options.bounds_check)\n+      {\n+\tindex_type ret_extent, arg_extent;\n+\n+\tif (GFC_DESCRIPTOR_RANK (a) == 1)\n+\t  {\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+\telse if (GFC_DESCRIPTOR_RANK (b) == 1)\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\t    \n+\t  }\n+\telse\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 1:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[1].ubound + 1 - retarray->dim[1].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 2:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+      }\n \n   abase = a->data;\n   a_kind = GFC_DESCRIPTOR_SIZE (a);"}, {"sha": "5aed0fe2ba077a1c8d51fda066072a4d13d5ecbc", "filename": "libgfortran/generated/matmul_l4.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_l4.c?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -99,6 +99,47 @@ matmul_l4 (gfc_array_l4 * const restrict retarray,\n \t= internal_malloc_size (sizeof (GFC_LOGICAL_4) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n+    else if (compile_options.bounds_check)\n+      {\n+\tindex_type ret_extent, arg_extent;\n+\n+\tif (GFC_DESCRIPTOR_RANK (a) == 1)\n+\t  {\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+\telse if (GFC_DESCRIPTOR_RANK (b) == 1)\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\t    \n+\t  }\n+\telse\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 1:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[1].ubound + 1 - retarray->dim[1].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 2:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+      }\n \n   abase = a->data;\n   a_kind = GFC_DESCRIPTOR_SIZE (a);"}, {"sha": "26baad3213660fa6c490e6cdb7ae6b715a061444", "filename": "libgfortran/generated/matmul_l8.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_l8.c?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -99,6 +99,47 @@ matmul_l8 (gfc_array_l8 * const restrict retarray,\n \t= internal_malloc_size (sizeof (GFC_LOGICAL_8) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n+    else if (compile_options.bounds_check)\n+      {\n+\tindex_type ret_extent, arg_extent;\n+\n+\tif (GFC_DESCRIPTOR_RANK (a) == 1)\n+\t  {\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+\telse if (GFC_DESCRIPTOR_RANK (b) == 1)\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\t    \n+\t  }\n+\telse\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 1:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[1].ubound + 1 - retarray->dim[1].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 2:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+      }\n \n   abase = a->data;\n   a_kind = GFC_DESCRIPTOR_SIZE (a);"}, {"sha": "931e2bdc0f025b28b841c6bd750b8ad5f0f4abb5", "filename": "libgfortran/generated/matmul_r10.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r10.c?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -135,6 +135,47 @@ matmul_r10 (gfc_array_r10 * const restrict retarray,\n \t= internal_malloc_size (sizeof (GFC_REAL_10) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n+    else if (compile_options.bounds_check)\n+      {\n+\tindex_type ret_extent, arg_extent;\n+\n+\tif (GFC_DESCRIPTOR_RANK (a) == 1)\n+\t  {\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+\telse if (GFC_DESCRIPTOR_RANK (b) == 1)\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\t    \n+\t  }\n+\telse\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 1:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[1].ubound + 1 - retarray->dim[1].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 2:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+      }\n \n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)"}, {"sha": "16ec175be0cf6e5f704fa6bc2f67e16339b0c5ea", "filename": "libgfortran/generated/matmul_r16.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r16.c?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -135,6 +135,47 @@ matmul_r16 (gfc_array_r16 * const restrict retarray,\n \t= internal_malloc_size (sizeof (GFC_REAL_16) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n+    else if (compile_options.bounds_check)\n+      {\n+\tindex_type ret_extent, arg_extent;\n+\n+\tif (GFC_DESCRIPTOR_RANK (a) == 1)\n+\t  {\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+\telse if (GFC_DESCRIPTOR_RANK (b) == 1)\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\t    \n+\t  }\n+\telse\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 1:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[1].ubound + 1 - retarray->dim[1].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 2:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+      }\n \n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)"}, {"sha": "47d976415d0b6fc1be7a250cf0037278d20a2757", "filename": "libgfortran/generated/matmul_r4.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r4.c?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -135,6 +135,47 @@ matmul_r4 (gfc_array_r4 * const restrict retarray,\n \t= internal_malloc_size (sizeof (GFC_REAL_4) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n+    else if (compile_options.bounds_check)\n+      {\n+\tindex_type ret_extent, arg_extent;\n+\n+\tif (GFC_DESCRIPTOR_RANK (a) == 1)\n+\t  {\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+\telse if (GFC_DESCRIPTOR_RANK (b) == 1)\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\t    \n+\t  }\n+\telse\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 1:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[1].ubound + 1 - retarray->dim[1].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 2:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+      }\n \n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)"}, {"sha": "a359ffd8fd3d51d7c98119adeab040579bf8b37a", "filename": "libgfortran/generated/matmul_r8.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fgenerated%2Fmatmul_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r8.c?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -135,6 +135,47 @@ matmul_r8 (gfc_array_r8 * const restrict retarray,\n \t= internal_malloc_size (sizeof (GFC_REAL_8) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n+    else if (compile_options.bounds_check)\n+      {\n+\tindex_type ret_extent, arg_extent;\n+\n+\tif (GFC_DESCRIPTOR_RANK (a) == 1)\n+\t  {\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+\telse if (GFC_DESCRIPTOR_RANK (b) == 1)\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\t    \n+\t  }\n+\telse\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 1:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[1].ubound + 1 - retarray->dim[1].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 2:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+      }\n \n \n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)"}, {"sha": "a43b430c2e3036468a661a130b835af27c0f87ac", "filename": "libgfortran/m4/matmul.m4", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fm4%2Fmatmul.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fm4%2Fmatmul.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmatmul.m4?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -136,6 +136,47 @@ matmul_'rtype_code` ('rtype` * const restrict retarray,\n \t= internal_malloc_size (sizeof ('rtype_name`) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n+    else if (compile_options.bounds_check)\n+      {\n+\tindex_type ret_extent, arg_extent;\n+\n+\tif (GFC_DESCRIPTOR_RANK (a) == 1)\n+\t  {\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+\telse if (GFC_DESCRIPTOR_RANK (b) == 1)\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\t    \n+\t  }\n+\telse\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 1:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[1].ubound + 1 - retarray->dim[1].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 2:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+      }\n '\n sinclude(`matmul_asm_'rtype_code`.m4')dnl\n `"}, {"sha": "800444564f7244af438e119ef0e43c07e0a7eddb", "filename": "libgfortran/m4/matmull.m4", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fm4%2Fmatmull.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad13e91692eec408fb030c65f947a4065afc7df/libgfortran%2Fm4%2Fmatmull.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmatmull.m4?ref=9ad13e91692eec408fb030c65f947a4065afc7df", "patch": "@@ -100,6 +100,47 @@ matmul_'rtype_code` ('rtype` * const restrict retarray,\n \t= internal_malloc_size (sizeof ('rtype_name`) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n+    else if (compile_options.bounds_check)\n+      {\n+\tindex_type ret_extent, arg_extent;\n+\n+\tif (GFC_DESCRIPTOR_RANK (a) == 1)\n+\t  {\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+\telse if (GFC_DESCRIPTOR_RANK (b) == 1)\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic: is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\t    \n+\t  }\n+\telse\n+\t  {\n+\t    arg_extent = a->dim[0].ubound + 1 - a->dim[0].lbound;\n+\t    ret_extent = retarray->dim[0].ubound + 1 - retarray->dim[0].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 1:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\n+\t    arg_extent = b->dim[1].ubound + 1 - b->dim[1].lbound;\n+\t    ret_extent = retarray->dim[1].ubound + 1 - retarray->dim[1].lbound;\n+\t    if (arg_extent != ret_extent)\n+\t      runtime_error (\"Incorrect extent in return array in\"\n+\t\t\t     \" MATMUL intrinsic for dimension 2:\"\n+\t\t\t     \" is %ld, should be %ld\",\n+\t\t\t     (long int) ret_extent, (long int) arg_extent);\n+\t  }\n+      }\n \n   abase = a->data;\n   a_kind = GFC_DESCRIPTOR_SIZE (a);"}]}