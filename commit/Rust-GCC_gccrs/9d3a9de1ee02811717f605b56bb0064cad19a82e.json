{"sha": "9d3a9de1ee02811717f605b56bb0064cad19a82e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQzYTlkZTFlZTAyODExNzE3ZjYwNWI1NmJiMDA2NGNhZDE5YTgyZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-05-22T12:43:16Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-05-22T12:43:16Z"}, "message": "defaults.h (UNITS_PER_SIMD_WORD): Add scalar mode as argument.\n\n2008-05-22  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* defaults.h (UNITS_PER_SIMD_WORD): Add scalar mode as argument.\n\t* doc/tm.texi (UNITS_PER_SIMD_WORD): Likewise.\n\n\t* tree-vect-analyze.c (vect_compute_data_ref_alignment): Replace\n\tUNITS_PER_SIMD_WORD with GET_MODE_SIZE (TYPE_MODE (vectype)).\n\t(vect_update_misalignment_for_peel): Likewise.\n\t(vector_alignment_reachable_p): Likewise.\n\t* tree-vect-transform.c (vectorizable_load): Likewise.\n\t* tree-vectorizer.c (vect_supportable_dr_alignment): Likewise.\n\n\t* tree-vectorizer.c (get_vectype_for_scalar_type): Pass mode of\n\tscalar_type to UNITS_PER_SIMD_WORD.\n\n\t* config/arm/arm.h (UNITS_PER_SIMD_WORD): Updated.\n\t* config/i386/i386.h (UNITS_PER_SIMD_WORD): Likewise.\n\t* config/mips/mips.h (UNITS_PER_SIMD_WORD): Likewise.\n\t* config/rs6000/rs6000.h (UNITS_PER_SIMD_WORD): Likewise.\n\t* config/sparc/sparc.h (UNITS_PER_SIMD_WORD): Likewise.\n\nFrom-SVN: r135759", "tree": {"sha": "63f0f4421ad75511d63828fa645f16face8c9dc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63f0f4421ad75511d63828fa645f16face8c9dc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d3a9de1ee02811717f605b56bb0064cad19a82e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d3a9de1ee02811717f605b56bb0064cad19a82e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d3a9de1ee02811717f605b56bb0064cad19a82e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d3a9de1ee02811717f605b56bb0064cad19a82e/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d36f0e7895c96cbbbb6f67a9691c3ee839c73af1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d36f0e7895c96cbbbb6f67a9691c3ee839c73af1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d36f0e7895c96cbbbb6f67a9691c3ee839c73af1"}], "stats": {"total": 74, "additions": 50, "deletions": 24}, "files": [{"sha": "50754f75dbe398552588030a18bbb09fb7d6fd6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d3a9de1ee02811717f605b56bb0064cad19a82e", "patch": "@@ -1,3 +1,24 @@\n+2008-05-22  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* defaults.h (UNITS_PER_SIMD_WORD): Add scalar mode as argument.\n+\t* doc/tm.texi (UNITS_PER_SIMD_WORD): Likewise.\n+\n+\t* tree-vect-analyze.c (vect_compute_data_ref_alignment): Replace\n+\tUNITS_PER_SIMD_WORD with GET_MODE_SIZE (TYPE_MODE (vectype)).\n+\t(vect_update_misalignment_for_peel): Likewise.\n+\t(vector_alignment_reachable_p): Likewise.\n+\t* tree-vect-transform.c (vectorizable_load): Likewise.\n+\t* tree-vectorizer.c (vect_supportable_dr_alignment): Likewise.\n+\n+\t* tree-vectorizer.c (get_vectype_for_scalar_type): Pass mode of\n+\tscalar_type to UNITS_PER_SIMD_WORD.\n+\n+\t* config/arm/arm.h (UNITS_PER_SIMD_WORD): Updated.\n+\t* config/i386/i386.h (UNITS_PER_SIMD_WORD): Likewise.\n+\t* config/mips/mips.h (UNITS_PER_SIMD_WORD): Likewise.\n+\t* config/rs6000/rs6000.h (UNITS_PER_SIMD_WORD): Likewise.\n+\t* config/sparc/sparc.h (UNITS_PER_SIMD_WORD): Likewise.\n+\n 2008-05-22  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/36293"}, {"sha": "b77a2ac5b8f7ef6e1b7dde6029b8731552519ab4", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=9d3a9de1ee02811717f605b56bb0064cad19a82e", "patch": "@@ -506,7 +506,7 @@ extern int arm_arch_hwdiv;\n /* Use the option -mvectorize-with-neon-quad to override the use of doubleword\n    registers when autovectorizing for Neon, at least until multiple vector\n    widths are supported properly by the middle-end.  */\n-#define UNITS_PER_SIMD_WORD \\\n+#define UNITS_PER_SIMD_WORD(MODE) \\\n   (TARGET_NEON ? (TARGET_NEON_VECTORIZE_QUAD ? 16 : 8) : UNITS_PER_WORD)\n \n /* True if natural alignment is used for doubleword types.  */"}, {"sha": "72ead0795c2dc1714c4f9e7c33200eafe2065145", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=9d3a9de1ee02811717f605b56bb0064cad19a82e", "patch": "@@ -1132,7 +1132,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* ??? No autovectorization into MMX or 3DNOW until we can reliably\n    place emms and femms instructions.  */\n-#define UNITS_PER_SIMD_WORD (TARGET_SSE ? 16 : UNITS_PER_WORD)\n+#define UNITS_PER_SIMD_WORD(MODE) (TARGET_SSE ? 16 : UNITS_PER_WORD)\n \n #define VALID_DFP_MODE_P(MODE) \\\n   ((MODE) == SDmode || (MODE) == DDmode || (MODE) == TDmode)"}, {"sha": "6d3c18feb466918dda45d5c512aeaec7494a54dc", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=9d3a9de1ee02811717f605b56bb0064cad19a82e", "patch": "@@ -1193,7 +1193,8 @@ enum mips_code_readable_setting {\n /* The number of bytes in a double.  */\n #define UNITS_PER_DOUBLE (TYPE_PRECISION (double_type_node) / BITS_PER_UNIT)\n \n-#define UNITS_PER_SIMD_WORD (TARGET_PAIRED_SINGLE_FLOAT ? 8 : UNITS_PER_WORD)\n+#define UNITS_PER_SIMD_WORD(MODE) \\\n+  (TARGET_PAIRED_SINGLE_FLOAT ? 8 : UNITS_PER_WORD)\n \n /* Set the sizes of the core types.  */\n #define SHORT_TYPE_SIZE 16"}, {"sha": "442f72708b0c9a8ce101515eae2c1866586bc4ea", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=9d3a9de1ee02811717f605b56bb0064cad19a82e", "patch": "@@ -899,7 +899,7 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n #define PAIRED_VECTOR_MODE(MODE)        \\\n          ((MODE) == V2SFmode)            \n \n-#define UNITS_PER_SIMD_WORD\t\t\t\t\t     \\\n+#define UNITS_PER_SIMD_WORD(MODE)\t\t\t\t     \\\n \t(TARGET_ALTIVEC ? UNITS_PER_ALTIVEC_WORD\t\t     \\\n \t : (TARGET_SPE ? UNITS_PER_SPE_WORD : (TARGET_PAIRED_FLOAT ? \\\n \t UNITS_PER_PAIRED_WORD : UNITS_PER_WORD)))"}, {"sha": "ef60292cef30efd1d7e5fe7b9cff0f3655aeb99b", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=9d3a9de1ee02811717f605b56bb0064cad19a82e", "patch": "@@ -606,7 +606,7 @@ extern struct sparc_cpu_select sparc_select[];\n #define MIN_UNITS_PER_WORD\t4\n #endif\n \n-#define UNITS_PER_SIMD_WORD\t(TARGET_VIS ? 8 : UNITS_PER_WORD)\n+#define UNITS_PER_SIMD_WORD(MODE) (TARGET_VIS ? 8 : UNITS_PER_WORD)\n \n /* Now define the sizes of the C data types.  */\n "}, {"sha": "ff5b5c01cf33136f3abee802d169e5a1e23e8b20", "filename": "gcc/defaults.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=9d3a9de1ee02811717f605b56bb0064cad19a82e", "patch": "@@ -739,7 +739,7 @@ along with GCC; see the file COPYING3.  If not see\n /* By default, only attempt to parallelize bitwise operations, and\n    possibly adds/subtracts using bit-twiddling.  */\n #ifndef UNITS_PER_SIMD_WORD\n-#define UNITS_PER_SIMD_WORD UNITS_PER_WORD\n+#define UNITS_PER_SIMD_WORD(MODE) UNITS_PER_WORD\n #endif\n \n /* Determine whether __cxa_atexit, rather than atexit, is used to"}, {"sha": "12a2740173bcfece661a692a2ca8d8377c214bf5", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=9d3a9de1ee02811717f605b56bb0064cad19a82e", "patch": "@@ -990,11 +990,11 @@ Minimum number of units in a word.  If this is undefined, the default is\n smallest value that @code{UNITS_PER_WORD} can have at run-time.\n @end defmac\n \n-@defmac UNITS_PER_SIMD_WORD\n-Number of units in the vectors that the vectorizer can produce.\n-The default is equal to @code{UNITS_PER_WORD}, because the vectorizer\n-can do some transformations even in absence of specialized @acronym{SIMD}\n-hardware.\n+@defmac UNITS_PER_SIMD_WORD (@var{mode})\n+Number of units in the vectors that the vectorizer can produce for\n+scalar mode @var{mode}.  The default is equal to @code{UNITS_PER_WORD},\n+because the vectorizer can do some transformations even in absence of\n+specialized @acronym{SIMD} hardware.\n @end defmac\n \n @defmac POINTER_SIZE"}, {"sha": "18d7bb8bab108ff431e0b833d728fd0e567aeda2", "filename": "gcc/tree-vect-analyze.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2Ftree-vect-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2Ftree-vect-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-analyze.c?ref=9d3a9de1ee02811717f605b56bb0064cad19a82e", "patch": "@@ -1370,6 +1370,7 @@ vect_compute_data_ref_alignment (struct data_reference *dr)\n   misalign = DR_INIT (dr);\n   aligned_to = DR_ALIGNED_TO (dr);\n   base_addr = DR_BASE_ADDRESS (dr);\n+  vectype = STMT_VINFO_VECTYPE (stmt_info);\n \n   /* In case the dataref is in an inner-loop of the loop that is being\n      vectorized (LOOP), we use the base and misalignment information\n@@ -1382,7 +1383,7 @@ vect_compute_data_ref_alignment (struct data_reference *dr)\n       tree step = DR_STEP (dr);\n       HOST_WIDE_INT dr_step = TREE_INT_CST_LOW (step);\n     \n-      if (dr_step % UNITS_PER_SIMD_WORD == 0)\n+      if (dr_step % GET_MODE_SIZE (TYPE_MODE (vectype)) == 0)\n         {\n           if (vect_print_dump_info (REPORT_ALIGNMENT))\n             fprintf (vect_dump, \"inner step divides the vector-size.\");\n@@ -1399,7 +1400,6 @@ vect_compute_data_ref_alignment (struct data_reference *dr)\n     }\n \n   base = build_fold_indirect_ref (base_addr);\n-  vectype = STMT_VINFO_VECTYPE (stmt_info);\n   alignment = ssize_int (TYPE_ALIGN (vectype)/BITS_PER_UNIT);\n \n   if ((aligned_to && tree_int_cst_compare (aligned_to, alignment) < 0)\n@@ -1541,8 +1541,9 @@ vect_update_misalignment_for_peel (struct data_reference *dr,\n       && known_alignment_for_access_p (dr_peel))\n     {\n       int misal = DR_MISALIGNMENT (dr);\n+      tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n       misal += npeel * dr_size;\n-      misal %= UNITS_PER_SIMD_WORD;\n+      misal %= GET_MODE_SIZE (TYPE_MODE (vectype));\n       SET_DR_MISALIGNMENT (dr, misal);\n       return;\n     }\n@@ -1622,7 +1623,7 @@ vector_alignment_reachable_p (struct data_reference *dr)\n       if (!known_alignment_for_access_p (dr))\n \treturn false;\n \n-      elem_size = UNITS_PER_SIMD_WORD / nelements;\n+      elem_size = GET_MODE_SIZE (TYPE_MODE (vectype)) / nelements;\n       mis_in_elements = DR_MISALIGNMENT (dr) / elem_size;\n \n       if ((nelements - mis_in_elements) % DR_GROUP_SIZE (stmt_info))"}, {"sha": "72e87ef1e411750fc2af02d39bc70334e15bfbb9", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=9d3a9de1ee02811717f605b56bb0064cad19a82e", "patch": "@@ -5780,7 +5780,8 @@ vectorizable_load (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt,\n      nested within an outer-loop that is being vectorized.  */\n \n   if (nested_in_vect_loop_p (loop, stmt)\n-      && (TREE_INT_CST_LOW (DR_STEP (dr)) % UNITS_PER_SIMD_WORD != 0))\n+      && (TREE_INT_CST_LOW (DR_STEP (dr))\n+\t  % GET_MODE_SIZE (TYPE_MODE (vectype)) != 0))\n     {\n       gcc_assert (alignment_support_scheme != dr_explicit_realign_optimized);\n       compute_in_loop = true;"}, {"sha": "c513dda7652624f241c91e040f09b4094ba9349f", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3a9de1ee02811717f605b56bb0064cad19a82e/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=9d3a9de1ee02811717f605b56bb0064cad19a82e", "patch": "@@ -1806,12 +1806,12 @@ get_vectype_for_scalar_type (tree scalar_type)\n   int nunits;\n   tree vectype;\n \n-  if (nbytes == 0 || nbytes >= UNITS_PER_SIMD_WORD)\n+  if (nbytes == 0 || nbytes >= UNITS_PER_SIMD_WORD (inner_mode))\n     return NULL_TREE;\n \n-  /* FORNOW: Only a single vector size per target (UNITS_PER_SIMD_WORD)\n+  /* FORNOW: Only a single vector size per mode (UNITS_PER_SIMD_WORD)\n      is expected.  */\n-  nunits = UNITS_PER_SIMD_WORD / nbytes;\n+  nunits = UNITS_PER_SIMD_WORD (inner_mode) / nbytes;\n \n   vectype = build_vector_type (scalar_type, nunits);\n   if (vect_print_dump_info (REPORT_DETAILS))\n@@ -1937,11 +1937,13 @@ vect_supportable_dr_alignment (struct data_reference *dr)\n \t  && (!targetm.vectorize.builtin_mask_for_load\n \t      || targetm.vectorize.builtin_mask_for_load ()))\n \t{\n-\t    if (nested_in_vect_loop\n-\t\t&& TREE_INT_CST_LOW (DR_STEP (dr)) != UNITS_PER_SIMD_WORD)\n-\t      return dr_explicit_realign;\n-\t    else\n-\t      return dr_explicit_realign_optimized;\n+\t  tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n+\t  if (nested_in_vect_loop\n+\t      && (TREE_INT_CST_LOW (DR_STEP (dr))\n+\t\t  != GET_MODE_SIZE (TYPE_MODE (vectype))))\n+\t    return dr_explicit_realign;\n+\t  else\n+\t    return dr_explicit_realign_optimized;\n \t}\n \n       if (optab_handler (movmisalign_optab, mode)->insn_code != "}]}