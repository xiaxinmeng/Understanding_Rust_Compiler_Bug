{"sha": "0728477991b0a10cdde60ca1b4ae39fce414041a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcyODQ3Nzk5MWIwYTEwY2RkZTYwY2ExYjRhZTM5ZmNlNDE0MDQxYQ==", "commit": {"author": {"name": "Claire Dross", "email": "dross@adacore.com", "date": "2019-08-21T08:31:11Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-21T08:31:11Z"}, "message": "[Ada] Allow for of iteration on formal vectors\n\n2019-08-21  Claire Dross  <dross@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/a-cofove.ads (Vector): Add an Iterable aspect to allow\n\titeration.\n\t(Iter_First, Iter_Next): Primitives used for iteration.\n\nFrom-SVN: r274789", "tree": {"sha": "cd02e57da7e04400a57dfc981a8a0baf61979279", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd02e57da7e04400a57dfc981a8a0baf61979279"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0728477991b0a10cdde60ca1b4ae39fce414041a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0728477991b0a10cdde60ca1b4ae39fce414041a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0728477991b0a10cdde60ca1b4ae39fce414041a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0728477991b0a10cdde60ca1b4ae39fce414041a/comments", "author": {"login": "clairedross", "id": 8180017, "node_id": "MDQ6VXNlcjgxODAwMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/8180017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clairedross", "html_url": "https://github.com/clairedross", "followers_url": "https://api.github.com/users/clairedross/followers", "following_url": "https://api.github.com/users/clairedross/following{/other_user}", "gists_url": "https://api.github.com/users/clairedross/gists{/gist_id}", "starred_url": "https://api.github.com/users/clairedross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clairedross/subscriptions", "organizations_url": "https://api.github.com/users/clairedross/orgs", "repos_url": "https://api.github.com/users/clairedross/repos", "events_url": "https://api.github.com/users/clairedross/events{/privacy}", "received_events_url": "https://api.github.com/users/clairedross/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "61e33106eda3d937fae9ba624da05938bda3af5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e33106eda3d937fae9ba624da05938bda3af5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61e33106eda3d937fae9ba624da05938bda3af5e"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "1b7a09dc57eb8c81fe7b6f8c36651bdc65060d2b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0728477991b0a10cdde60ca1b4ae39fce414041a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0728477991b0a10cdde60ca1b4ae39fce414041a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0728477991b0a10cdde60ca1b4ae39fce414041a", "patch": "@@ -1,3 +1,9 @@\n+2019-08-21  Claire Dross  <dross@adacore.com>\n+\n+\t* libgnat/a-cofove.ads (Vector): Add an Iterable aspect to allow\n+\titeration.\n+\t(Iter_First, Iter_Next): Primitives used for iteration.\n+\n 2019-08-21  Yannick Moy  <moy@adacore.com>\n \n \t* sem_ch3.adb (Analyze_Subtype_Declaration): Inherit RM_Size"}, {"sha": "5fb3bc941d18461c0110418a0cda8d02a4175e1b", "filename": "gcc/ada/libgnat/a-cofove.ads", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0728477991b0a10cdde60ca1b4ae39fce414041a/gcc%2Fada%2Flibgnat%2Fa-cofove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0728477991b0a10cdde60ca1b4ae39fce414041a/gcc%2Fada%2Flibgnat%2Fa-cofove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cofove.ads?ref=0728477991b0a10cdde60ca1b4ae39fce414041a", "patch": "@@ -70,7 +70,11 @@ is\n    subtype Capacity_Range is Count_Type range 0 .. Last_Count;\n \n    type Vector (Capacity : Capacity_Range) is private with\n-     Default_Initial_Condition => Is_Empty (Vector);\n+     Default_Initial_Condition => Is_Empty (Vector),\n+     Iterable => (First       => Iter_First,\n+                  Has_Element => Iter_Has_Element,\n+                  Next        => Iter_Next,\n+                  Element     => Element);\n \n    function Length (Container : Vector) return Capacity_Range with\n      Global => null,\n@@ -173,6 +177,7 @@ is\n         Ghost,\n         Global => null,\n         Post   => M.Length (Model'Result) = Length (Container);\n+      pragma Annotate (GNATprove, Iterable_For_Proof, \"Model\", Model);\n \n       function Element\n         (S : M.Sequence;\n@@ -859,6 +864,30 @@ is\n                    Model (Target)'Old);\n    end Generic_Sorting;\n \n+   ---------------------------\n+   --  Iteration Primitives --\n+   ---------------------------\n+\n+   function Iter_First (Container : Vector) return Extended_Index with\n+     Global => null;\n+\n+   function Iter_Has_Element\n+     (Container : Vector;\n+      Position  : Extended_Index) return Boolean\n+   with\n+     Global => null,\n+     Post   =>\n+       Iter_Has_Element'Result =\n+         (Position in Index_Type'First .. Last_Index (Container));\n+   pragma Annotate (GNATprove, Inline_For_Proof, Iter_Has_Element);\n+\n+   function Iter_Next\n+     (Container : Vector;\n+      Position  : Extended_Index) return Extended_Index\n+   with\n+     Global => null,\n+     Pre    => Iter_Has_Element (Container, Position);\n+\n private\n    pragma SPARK_Mode (Off);\n \n@@ -882,4 +911,22 @@ private\n    function Empty_Vector return Vector is\n      ((Capacity => 0, others => <>));\n \n+   function Iter_First (Container : Vector) return Extended_Index is\n+     (Index_Type'First);\n+\n+   function Iter_Next\n+     (Container : Vector;\n+      Position  : Extended_Index) return Extended_Index\n+   is\n+     (if Position = Extended_Index'Last then\n+         Extended_Index'First\n+      else\n+         Extended_Index'Succ (Position));\n+\n+   function Iter_Has_Element\n+     (Container : Vector;\n+      Position  : Extended_Index) return Boolean\n+   is\n+     (Position in Index_Type'First .. Container.Last);\n+\n end Ada.Containers.Formal_Vectors;"}]}