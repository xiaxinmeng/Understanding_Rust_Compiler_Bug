{"sha": "4f2cae4a92d1135ededcecdffd84e1c4c394b083", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYyY2FlNGE5MmQxMTM1ZWRlZGNlY2RmZmQ4NGUxYzRjMzk0YjA4Mw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2015-05-21T10:47:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-21T10:47:34Z"}, "message": "sem_ch13.adb (Check_Iterator_Functions): Emit error on Iterator aspect as well when indexing function is illegal.\n\n2015-05-21  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Check_Iterator_Functions): Emit error on Iterator\n\taspect as well when indexing function is illegal.\n\t(Valid_Default_Iterator): Handle properly somme illegal cases\n\tto prevent compilation abandoned messages.\n\t(Check_Primitive_Function): Verify that type and indexing function\n\tare in the same scope.\n\t* freeze.adb (Freeze_Record): Extend patch on the presence of\n\tindexing aspects to aspect Default_Iterator.\n\nFrom-SVN: r223475", "tree": {"sha": "d355e609a4be7f52f44ac2ecd8388cd2acf59719", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d355e609a4be7f52f44ac2ecd8388cd2acf59719"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f2cae4a92d1135ededcecdffd84e1c4c394b083", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f2cae4a92d1135ededcecdffd84e1c4c394b083", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f2cae4a92d1135ededcecdffd84e1c4c394b083", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f2cae4a92d1135ededcecdffd84e1c4c394b083/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c8faa0f904f744afe9f2db4742216ea4c7e92e46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8faa0f904f744afe9f2db4742216ea4c7e92e46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8faa0f904f744afe9f2db4742216ea4c7e92e46"}], "stats": {"total": 69, "additions": 53, "deletions": 16}, "files": [{"sha": "230a62b905beb26eb0205c6cbccfd98230623885", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f2cae4a92d1135ededcecdffd84e1c4c394b083/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f2cae4a92d1135ededcecdffd84e1c4c394b083/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4f2cae4a92d1135ededcecdffd84e1c4c394b083", "patch": "@@ -1,3 +1,14 @@\n+2015-05-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Check_Iterator_Functions): Emit error on Iterator\n+\taspect as well when indexing function is illegal.\n+\t(Valid_Default_Iterator): Handle properly somme illegal cases\n+\tto prevent compilation abandoned messages.\n+\t(Check_Primitive_Function): Verify that type and indexing function\n+\tare in the same scope.\n+\t* freeze.adb (Freeze_Record): Extend patch on the presence of\n+\tindexing aspects to aspect Default_Iterator.\n+\n 2015-05-19  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc-interface/trans.c (Sloc_to_locus1): Strenghthen local \"map\""}, {"sha": "14c2aa3336fcadb810965f92c845f24a8bc55286", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f2cae4a92d1135ededcecdffd84e1c4c394b083/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f2cae4a92d1135ededcecdffd84e1c4c394b083/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=4f2cae4a92d1135ededcecdffd84e1c4c394b083", "patch": "@@ -3048,7 +3048,9 @@ package body Freeze is\n                Set_Etype (Formal, F_Type);\n             end if;\n \n-            Freeze_And_Append (F_Type, N, Result);\n+            if not From_Limited_With (F_Type) then\n+               Freeze_And_Append (F_Type, N, Result);\n+            end if;\n \n             if Is_Private_Type (F_Type)\n               and then Is_Private_Type (Base_Type (F_Type))\n@@ -4288,21 +4290,32 @@ package body Freeze is\n             end if;\n          end if;\n \n-         --  Make sure that if we have aspect Iterator_Element, then we have\n+         --  Make sure that if we have terator aspect, then we have\n          --  either Constant_Indexing or Variable_Indexing.\n \n-         if Has_Aspect (Rec, Aspect_Iterator_Element) then\n-            if Has_Aspect (Rec, Aspect_Constant_Indexing)\n+         declare\n+            Iterator_Aspect : Node_Id;\n+\n+         begin\n+            Iterator_Aspect := Find_Aspect (Rec, Aspect_Iterator_Element);\n+\n+            if No (Iterator_Aspect) then\n+               Iterator_Aspect := Find_Aspect (Rec, Aspect_Default_Iterator);\n+            end if;\n+\n+            if Present (Iterator_Aspect) then\n+               if Has_Aspect (Rec, Aspect_Constant_Indexing)\n                  or else\n-               Has_Aspect (Rec, Aspect_Variable_Indexing)\n-            then\n-               null;\n-            else\n-               Error_Msg_N\n-                 (\"Iterator_Element requires indexing aspect\",\n-                  Find_Aspect (Rec, Aspect_Iterator_Element));\n+                  Has_Aspect (Rec, Aspect_Variable_Indexing)\n+               then\n+                  null;\n+               else\n+                  Error_Msg_N\n+                    (\"Iterator_Element requires indexing aspect\",\n+                       Iterator_Aspect);\n+               end if;\n             end if;\n-         end if;\n+         end;\n \n          --  All done if not a full record definition\n "}, {"sha": "1de87d9fc579dd0a173d9b5c7ce644cc5abe0516", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f2cae4a92d1135ededcecdffd84e1c4c394b083/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f2cae4a92d1135ededcecdffd84e1c4c394b083/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=4f2cae4a92d1135ededcecdffd84e1c4c394b083", "patch": "@@ -4124,8 +4124,10 @@ package body Sem_Ch13 is\n                    Entity (Expr), Ent);\n             end if;\n \n+            --  Flag the default_iterator as well as the denoted function.\n+\n             if not Valid_Default_Iterator (Entity (Expr)) then\n-               Error_Msg_N (\"improper function for default iterator\", Expr);\n+               Error_Msg_N (\"improper function for default iterator!\", Expr);\n             end if;\n \n          else\n@@ -4178,6 +4180,12 @@ package body Sem_Ch13 is\n             Ctrl := Etype (First_Formal (Subp));\n          end if;\n \n+         --  To be a primitive operation subprogram has to be in same scope.\n+\n+         if Scope (Ctrl) /= Scope (Subp) then\n+            return False;\n+         end if;\n+\n          --  Type of formal may be the class-wide type, an access to such,\n          --  or an incomplete view.\n \n@@ -4972,9 +4980,12 @@ package body Sem_Ch13 is\n             Typ  : Entity_Id;\n \n          begin\n+            --  If target type is untagged, further checks are irrelevant\n+\n             if not Is_Tagged_Type (U_Ent) then\n                Error_Msg_N\n-                 (\"aspect Default_Iterator applies to  tagged type\", Nam);\n+                 (\"aspect Default_Iterator applies to tagged type\", Nam);\n+               return;\n             end if;\n \n             Check_Iterator_Functions;\n@@ -4985,15 +4996,17 @@ package body Sem_Ch13 is\n               or else Ekind (Entity (Expr)) /= E_Function\n             then\n                Error_Msg_N (\"aspect Iterator must be a function\", Expr);\n+               return;\n             else\n                Func := Entity (Expr);\n             end if;\n \n             --  The type of the first parameter must be T, T'class, or a\n-            --  corresponding access type (5.5.1 (8/3)\n+            --  corresponding access type (5.5.1 (8/3). If function is\n+            --  parameterless label type accordingly.\n \n             if No (First_Formal (Func)) then\n-               Typ := Empty;\n+               Typ := Any_Type;\n             else\n                Typ := Etype (First_Formal (Func));\n             end if;"}]}