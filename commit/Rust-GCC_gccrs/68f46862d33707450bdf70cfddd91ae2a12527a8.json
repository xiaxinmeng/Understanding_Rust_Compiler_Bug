{"sha": "68f46862d33707450bdf70cfddd91ae2a12527a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhmNDY4NjJkMzM3MDc0NTBiZGY3MGNmZGRkOTFhZTJhMTI1MjdhOA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-06-11T17:33:07Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-06-11T17:42:13Z"}, "message": "d: foreach over a tuple doesn't work on 16-bit targets (PR100999)\n\nImproves semantic passes in the front-end around the `foreach' and\n`static foreach' statements to be more resilient to compiling in a\nminimal D runtime environment.  Checking of the index type has been\nimproved as well so now there won't be needless compiler errors when\nusing 8 or 16-bit integers as index types when the size fits the\nexpected loop range.\n\ngcc/d/ChangeLog:\n\n\tPR d/100999\n\t* dmd/MERGE: Merge upstream dmd 7a3808254.\n\nlibphobos/ChangeLog:\n\n\tPR d/100999\n\t* src/MERGE: Merge upstream phobos 55bb17543.", "tree": {"sha": "e00210213fae352339fe0a8e8ef328d84f9131e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e00210213fae352339fe0a8e8ef328d84f9131e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68f46862d33707450bdf70cfddd91ae2a12527a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68f46862d33707450bdf70cfddd91ae2a12527a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68f46862d33707450bdf70cfddd91ae2a12527a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68f46862d33707450bdf70cfddd91ae2a12527a8/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b13f297f01c943aa167f7c6eb94bed40dce0d553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b13f297f01c943aa167f7c6eb94bed40dce0d553", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b13f297f01c943aa167f7c6eb94bed40dce0d553"}], "stats": {"total": 468, "additions": 388, "deletions": 80}, "files": [{"sha": "d20785d91262cadb336bfe016bad7cdeed176aaa", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -1,4 +1,4 @@\n-4a4e46a6f304a667e0c05d4455706ec2056ffddc\n+7a3808254878df8cb70a055bea58afc79187b778\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "6c7dc9eb1a34fc9a137f440507f0fa8606dcbea8", "filename": "gcc/d/dmd/cond.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Fd%2Fdmd%2Fcond.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Fd%2Fdmd%2Fcond.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcond.c?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -112,6 +112,7 @@ static void lowerArrayAggregate(StaticForeach *sfe, Scope *sc)\n         sfe->aggrfe->aggr = new TupleExp(aggr->loc, es);\n         sfe->aggrfe->aggr = expressionSemantic(sfe->aggrfe->aggr, sc);\n         sfe->aggrfe->aggr = sfe->aggrfe->aggr->optimize(WANTvalue);\n+        sfe->aggrfe->aggr = sfe->aggrfe->aggr->ctfeInterpret();\n     }\n     else\n     {\n@@ -198,7 +199,8 @@ static TypeStruct *createTupleType(Loc loc, Expressions *e)\n     Type *ty = new TypeTypeof(loc, new TupleExp(loc, e));\n     sdecl->members->push(new VarDeclaration(loc, ty, fid, NULL));\n     TypeStruct *r = (TypeStruct *)sdecl->type;\n-    r->vtinfo = TypeInfoStructDeclaration::create(r); // prevent typeinfo from going to object file\n+    if (global.params.useTypeInfo && Type::dtypeinfo)\n+        r->vtinfo = TypeInfoStructDeclaration::create(r); // prevent typeinfo from going to object file\n     return r;\n }\n \n@@ -312,15 +314,25 @@ static void lowerNonArrayAggregate(StaticForeach *sfe, Scope *sc)\n     Identifier *idres = Identifier::generateId(\"__res\");\n     VarDeclaration *vard = new VarDeclaration(aloc, aty, idres, NULL);\n     Statements *s2 = new Statements();\n-    s2->push(new ExpStatement(aloc, vard));\n-    Expression *catass = new CatAssignExp(aloc, new IdentifierExp(aloc, idres), res[1]);\n-    s2->push(createForeach(sfe, aloc, pparams[1], new ExpStatement(aloc, catass)));\n-    s2->push(new ReturnStatement(aloc, new IdentifierExp(aloc, idres)));\n+\n+    // Run 'typeof' gagged to avoid duplicate errors and if it fails just create\n+    // an empty foreach to expose them.\n+    unsigned olderrors = global.startGagging();\n+    ety = typeSemantic(ety, aloc, sc);\n+    if (global.endGagging(olderrors))\n+        s2->push(createForeach(sfe, aloc, pparams[1], NULL));\n+    else\n+    {\n+        s2->push(new ExpStatement(aloc, vard));\n+        Expression *catass = new CatAssignExp(aloc, new IdentifierExp(aloc, idres), res[1]);\n+        s2->push(createForeach(sfe, aloc, pparams[1], new ExpStatement(aloc, catass)));\n+        s2->push(new ReturnStatement(aloc, new IdentifierExp(aloc, idres)));\n+    }\n \n     Expression *aggr;\n     Type *indexty;\n \n-    if (sfe->rangefe && (indexty = typeSemantic(ety, aloc, sc))->isintegral())\n+    if (sfe->rangefe && (indexty = ety)->isintegral())\n     {\n         sfe->rangefe->lwr->type = indexty;\n         sfe->rangefe->upr->type = indexty;\n@@ -384,11 +396,6 @@ void staticForeachPrepare(StaticForeach *sfe, Scope *sc)\n         sfe->aggrfe->aggr = expressionSemantic(sfe->aggrfe->aggr, sc);\n         sc = sc->endCTFE();\n         sfe->aggrfe->aggr = sfe->aggrfe->aggr->optimize(WANTvalue);\n-        Type *tab = sfe->aggrfe->aggr->type->toBasetype();\n-        if (tab->ty != Ttuple)\n-        {\n-            sfe->aggrfe->aggr = sfe->aggrfe->aggr->ctfeInterpret();\n-        }\n     }\n \n     if (sfe->aggrfe && sfe->aggrfe->aggr->type->toBasetype()->ty == Terror)"}, {"sha": "ab9d88c660c806b2ad73f7a01d6e95881f3b66e0", "filename": "gcc/d/dmd/dinterpret.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Fd%2Fdmd%2Fdinterpret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Fd%2Fdmd%2Fdinterpret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdinterpret.c?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -643,7 +643,16 @@ Expression *ctfeInterpret(Expression *e)\n     case TOKfloat64:\n     case TOKcomplex80:\n     case TOKnull:\n+    case TOKvoid:\n     case TOKstring:\n+    case TOKthis:\n+    case TOKsuper:\n+    case TOKtype:\n+    case TOKtypeid:\n+    case TOKtemplate:   // non-eponymous template/instance\n+    case TOKscope:      // ditto\n+    case TOKdottd:      // ditto, e.e1 doesn't matter here\n+    case TOKdot:        // ditto\n         if (e->type->ty == Terror)\n             return new ErrorExp();\n         /* fall through */"}, {"sha": "153819aa172082b02179d0eb16ccbac55c7ebcbc", "filename": "gcc/d/dmd/expression.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Fd%2Fdmd%2Fexpression.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Fd%2Fdmd%2Fexpression.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.c?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -1044,7 +1044,7 @@ bool Expression::checkPostblit(Scope *sc, Type *t)\n     t = t->baseElemOf();\n     if (t->ty == Tstruct)\n     {\n-        if (global.params.useTypeInfo)\n+        if (global.params.useTypeInfo && Type::dtypeinfo)\n         {\n             // Bugzilla 11395: Require TypeInfo generation for array concatenation\n             semanticTypeInfo(sc, t);"}, {"sha": "5ae5fe6a717dde6f76edbe3e65b9185e7ac0a070", "filename": "gcc/d/dmd/expressionsem.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.c?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -1082,11 +1082,6 @@ static Expression *resolvePropertiesX(Scope *sc, Expression *e1, Expression *e2\n             if (checkUnsafeAccess(sc, e1, true, true))\n                 return new ErrorExp();\n         }\n-        else if (e1->op == TOKdot)\n-        {\n-            e1->error(\"expression has no value\");\n-            return new ErrorExp();\n-        }\n         else if (e1->op == TOKcall)\n         {\n             CallExp *ce = (CallExp *)e1;\n@@ -4513,11 +4508,18 @@ class ExpressionSemanticVisitor : public Visitor\n \n     void visit(DotTemplateExp *e)\n     {\n+        if (e->type)\n+        {\n+            result = e;\n+            return;\n+        }\n         if (Expression *ex = unaSemantic(e, sc))\n         {\n             result = ex;\n             return;\n         }\n+        // 'void' like TemplateExp\n+        e->type = Type::tvoid;\n         result = e;\n     }\n "}, {"sha": "24e534e50a82d0198e442fa491f9c0e6c28123f2", "filename": "gcc/d/dmd/statementsem.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Fd%2Fdmd%2Fstatementsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Fd%2Fdmd%2Fstatementsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatementsem.c?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -563,9 +563,6 @@ class StatementSemanticVisitor : public Visitor\n             else\n             {\n                 e = resolveProperties(sc, e);\n-                type = e->type;\n-                if (paramtype)\n-                    type = paramtype;\n                 Initializer *ie = new ExpInitializer(Loc(), e);\n                 VarDeclaration *v = new VarDeclaration(loc, type, ident, ie);\n                 if (storageClass & STCref)\n@@ -646,22 +643,23 @@ class StatementSemanticVisitor : public Visitor\n                 }\n             }\n             p->type = typeSemantic(p->type, loc, sc);\n-            TY keyty = p->type->ty;\n-            if (keyty != Tint32 && keyty != Tuns32)\n+\n+            if (!p->type->isintegral())\n             {\n-                if (global.params.isLP64)\n-                {\n-                    if (keyty != Tint64 && keyty != Tuns64)\n-                    {\n-                        fs->error(\"foreach: key type must be int or uint, long or ulong, not %s\", p->type->toChars());\n-                        return false;\n-                    }\n-                }\n-                else\n-                {\n-                    fs->error(\"foreach: key type must be int or uint, not %s\", p->type->toChars());\n-                    return false;\n-                }\n+                fs->error(\"foreach: key cannot be of non-integral type `%s`\",\n+                          p->type->toChars());\n+                return false;\n+            }\n+\n+            unsigned length = te ? te->exps->length : tuple->arguments->length;\n+            IntRange dimrange = IntRange(SignExtendedNumber(length)).cast(Type::tsize_t);\n+            // https://issues.dlang.org/show_bug.cgi?id=12504\n+            dimrange.imax = SignExtendedNumber(dimrange.imax.value-1);\n+            if (!IntRange::fromType(p->type).contains(dimrange))\n+            {\n+                fs->error(\"index type `%s` cannot cover index range 0..%llu\",\n+\t\t\t  p->type->toChars(), (ulonglong)length);\n+                return false;\n             }\n             Initializer *ie = new ExpInitializer(Loc(), new IntegerExp(k));\n             VarDeclaration *var = new VarDeclaration(loc, p->type, p->ident, ie);\n@@ -1073,6 +1071,8 @@ class StatementSemanticVisitor : public Visitor\n                             {\n                                 TypeSArray *ta =  (TypeSArray *)tab;\n                                 IntRange dimrange = getIntRange(ta->dim);\n+                                // https://issues.dlang.org/show_bug.cgi?id=12504\n+                                dimrange.imax = SignExtendedNumber(dimrange.imax.value-1);\n                                 if (!IntRange::fromType(var->type).contains(dimrange))\n                                 {\n                                     fs->error(\"index type `%s` cannot cover index range 0..%llu\", p->type->toChars(), ta->dim->toInteger());"}, {"sha": "c7060b0d96ce14da5fb30b1d0fa05eb72219459f", "filename": "gcc/testsuite/gdc.test/compilable/extra-files/minimal/object.d", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fextra-files%2Fminimal%2Fobject.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fextra-files%2Fminimal%2Fobject.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fextra-files%2Fminimal%2Fobject.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -0,0 +1 @@\n+module object;"}, {"sha": "ce13a5ab182da85a0a361b8b2ad8b0d1f627b27f", "filename": "gcc/testsuite/gdc.test/compilable/interpret5.d", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Finterpret5.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Finterpret5.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Finterpret5.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -0,0 +1,30 @@\n+// https://issues.dlang.org/show_bug.cgi?id=21927\n+/*\n+TEST_OUTPUT:\n+---\n+T1(Args...)\n+T1!()\n+T2(Args2...)\n+T2!()\n+this.T2(Args2...)\n+this.T2!()\n+---\n+*/\n+template T1(Args...) {}\n+\n+pragma(msg, T1);    // TOK.template_\n+pragma(msg, T1!()); // TOK.scope_\n+\n+struct S\n+{\n+    template T2(Args2...) {}\n+\n+    pragma(msg, S.T2);    // TOK.template_\n+    pragma(msg, S.T2!()); // TOK.scope_\n+\n+    void fun()\n+    {\n+        pragma(msg, this.T2);    // TOK.dotTemplateDeclaration\n+        pragma(msg, this.T2!()); // TOK.dot\n+    }\n+}"}, {"sha": "e8106b620036cb29bbd0d8aae44465dad01d73a0", "filename": "gcc/testsuite/gdc.test/compilable/minimal3.d", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fminimal3.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fminimal3.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fminimal3.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -0,0 +1,36 @@\n+// DFLAGS:\n+// REQUIRED_ARGS: -defaultlib=\n+// EXTRA_SOURCES: extra-files/minimal/object.d\n+\n+/**********************************************/\n+// https://issues.dlang.org/show_bug.cgi?id=19234\n+void issue19234()\n+{\n+    static struct A {}\n+    A[10] a;\n+    A[10] b;\n+    b[] = a[];\n+}\n+\n+/**********************************************/\n+// https://issues.dlang.org/show_bug.cgi?id=22005\n+void issue22005()\n+{\n+    enum int[4] foo = [1,2,3,4];\n+    static foreach (i, e; foo)\n+    {\n+    }\n+}\n+\n+/**********************************************/\n+// https://issues.dlang.org/show_bug.cgi?id=22006\n+void issue22006()\n+{\n+    alias size_t = typeof(int.sizeof);\n+    alias AliasSeq(T...) = T;\n+\n+    foreach (size_t i, e; [0, 1, 2, 3]) { }\n+    static foreach (size_t i, e; [0, 1, 2, 3]) { }\n+    foreach (size_t i, e; AliasSeq!(0, 1, 2, 3)) { }\n+    static foreach (size_t i, e; AliasSeq!(0, 1, 2, 3)) { }\n+}"}, {"sha": "8a54f32de57d9348847219e03060ab7000594180", "filename": "gcc/testsuite/gdc.test/compilable/staticforeach.d", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fstaticforeach.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fstaticforeach.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fstaticforeach.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -115,6 +115,8 @@ bug17688\n T\n foo2\n T2\n+TestStaticForeach2\n+issue22007\n 1 2 '3'\n 2 3 '4'\n 0 1\n@@ -840,3 +842,39 @@ struct T2{\n         struct S{}\n }\n static assert(is(__traits(parent,T2.S)==T2));\n+\n+struct TestStaticForeach2\n+{\n+static:\n+    // StringExp\n+    char[] test(string str)()\n+    {\n+        char[] s;\n+        static foreach (c; str)\n+        {\n+            s ~= c;\n+        }\n+        return s;\n+    }\n+    static assert(test!\"t\u0451st\u00f1\" == ['t', '\\xd1', '\\x91', 's', 't', '\\xc3', '\\xb1']);\n+\n+    static foreach (c; \"\")\n+    {\n+        static assert(0);\n+    }\n+\n+    // NullExp\n+    enum int[] a = null;\n+    static foreach (c; a)\n+    {\n+        static assert(0);\n+    }\n+}\n+\n+//https://issues.dlang.org/show_bug.cgi?id=22007\n+void issue22007()\n+{\n+    immutable int[32] array = 1;\n+    foreach (size_t a, int b; array) {}\n+    static foreach (size_t a, int b; array) { }\n+}"}, {"sha": "b8f5df4b46d8d8c05acbc1212258be5f0cf84b68", "filename": "gcc/testsuite/gdc.test/compilable/test21742.d", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21742.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21742.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21742.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -0,0 +1,13 @@\n+// https://issues.dlang.org/show_bug.cgi?id=21742\n+\n+int foo()() { return 0; }\n+\n+struct B\n+{\n+    int foo()() { return 0; }\n+}\n+\n+static assert(is(typeof(foo) == void));\n+\n+// failed, gagged error: expression B().foo()() has no type\n+static assert(is(typeof(B().foo) == void));"}, {"sha": "913dd8590129f6fb602f042f10ad1a81412cbec1", "filename": "gcc/testsuite/gdc.test/compilable/test22006.d", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22006.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22006.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest22006.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -0,0 +1,14 @@\n+// https://issues.dlang.org/show_bug.cgi?id=22006\n+void test22006()\n+{\n+    alias AliasSeq(TList...) = TList;\n+    {\n+        alias aseq = AliasSeq!(0, 1, 2, 3);\n+        static foreach (ubyte i; 0 .. aseq.length) {}\n+        static foreach (ubyte i, x; aseq) {}\n+    }\n+    {\n+        static foreach (ubyte i; 0 .. [0, 1, 2, 3].length) {}\n+        static foreach (ubyte i, x; [0, 1, 2, 3]) {}\n+    }\n+}"}, {"sha": "0bb104eded7059f412fef87acfcfcfb5c9d6adab", "filename": "gcc/testsuite/gdc.test/fail_compilation/b12504.d", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb12504.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb12504.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fb12504.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -0,0 +1,64 @@\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/b12504.d(26): Error: cannot implicitly convert expression `257$?:32=u|64=LU$` of type `$?:32=uint|64=ulong$` to `ubyte`\n+fail_compilation/b12504.d(27): Error: index type `ubyte` cannot cover index range 0..257\n+fail_compilation/b12504.d(31): Error: cannot implicitly convert expression `129$?:32=u|64=LU$` of type `$?:32=uint|64=ulong$` to `byte`\n+fail_compilation/b12504.d(32): Error: index type `byte` cannot cover index range 0..129\n+fail_compilation/b12504.d(36): Error: cannot implicitly convert expression `65537$?:32=u|64=LU$` of type `$?:32=uint|64=ulong$` to `ushort`\n+fail_compilation/b12504.d(37): Error: index type `ushort` cannot cover index range 0..65537\n+fail_compilation/b12504.d(41): Error: cannot implicitly convert expression `32769$?:32=u|64=LU$` of type `$?:32=uint|64=ulong$` to `short`\n+fail_compilation/b12504.d(42): Error: index type `short` cannot cover index range 0..32769\n+fail_compilation/b12504.d(46): Error: cannot implicitly convert expression `257$?:32=u|64=LU$` of type `$?:32=uint|64=ulong$` to `ubyte`\n+fail_compilation/b12504.d(47): Error: index type `ubyte` cannot cover index range 0..257\n+fail_compilation/b12504.d(51): Error: cannot implicitly convert expression `129$?:32=u|64=LU$` of type `$?:32=uint|64=ulong$` to `byte`\n+fail_compilation/b12504.d(52): Error: index type `byte` cannot cover index range 0..129\n+fail_compilation/b12504.d(56): Error: cannot implicitly convert expression `65537$?:32=u|64=LU$` of type `$?:32=uint|64=ulong$` to `ushort`\n+fail_compilation/b12504.d(57): Error: index type `ushort` cannot cover index range 0..65537\n+fail_compilation/b12504.d(61): Error: cannot implicitly convert expression `32769$?:32=u|64=LU$` of type `$?:32=uint|64=ulong$` to `short`\n+fail_compilation/b12504.d(62): Error: index type `short` cannot cover index range 0..32769\n+---\n+*/\n+void main()\n+{\n+    {\n+        int[0xFF + 2] sta;\n+        foreach (ubyte i; 0 .. sta.length) {}\n+        foreach (ubyte i, x; sta) {}\n+    }\n+    {\n+        int[0x7F + 2] sta;\n+        foreach (byte i; 0 .. sta.length) {}\n+        foreach (byte i, x; sta) {}\n+    }\n+    {\n+        int[0xFFFF + 2] sta;\n+        foreach (ushort i; 0 .. sta.length) {}\n+        foreach (ushort i, x; sta) {}\n+    }\n+    {\n+        int[0x7FFF + 2] sta;\n+        foreach (short i; 0 .. sta.length) {}\n+        foreach (short i, x; sta) {}\n+    }\n+    {\n+        immutable int[0xFF + 2] sta;\n+        static foreach (ubyte i; 0 .. sta.length) {}\n+        static foreach (ubyte i, x; sta) {}\n+    }\n+    {\n+        immutable int[0x7F + 2] sta;\n+        static foreach (byte i; 0 .. sta.length) {}\n+        static foreach (byte i, x; sta) {}\n+    }\n+    {\n+        immutable int[0xFFFF + 2] sta;\n+        static foreach (ushort i; 0 .. sta.length) {}\n+        static foreach (ushort i, x; sta) {}\n+    }\n+    {\n+        immutable int[0x7FFF + 2] sta;\n+        static foreach (short i; 0 .. sta.length) {}\n+        static foreach (short i, x; sta) {}\n+    }\n+}"}, {"sha": "1dbacfd3e54a17149268b8454557af67189a3c3e", "filename": "gcc/testsuite/gdc.test/fail_compilation/diag16976.d", "status": "modified", "additions": 53, "deletions": 16, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag16976.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag16976.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fdiag16976.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -1,21 +1,37 @@\n /* TEST_OUTPUT:\n ---\n-fail_compilation/diag16976.d(28): Error: foreach: key cannot be of non-integral type `float`\n-fail_compilation/diag16976.d(29): Error: foreach: key cannot be of non-integral type `float`\n-fail_compilation/diag16976.d(30): Error: foreach: key cannot be of non-integral type `float`\n-fail_compilation/diag16976.d(31): Error: foreach: key cannot be of non-integral type `float`\n-fail_compilation/diag16976.d(32): Error: foreach: key cannot be of non-integral type `float`\n-fail_compilation/diag16976.d(33): Error: foreach: key cannot be of non-integral type `float`\n-fail_compilation/diag16976.d(34): Error: foreach: key cannot be of non-integral type `float`\n-fail_compilation/diag16976.d(35): Error: foreach: key cannot be of non-integral type `float`\n-fail_compilation/diag16976.d(36): Error: foreach: key cannot be of non-integral type `float`\n-fail_compilation/diag16976.d(37): Error: foreach: key cannot be of non-integral type `float`\n-fail_compilation/diag16976.d(38): Error: foreach: key cannot be of non-integral type `float`\n-fail_compilation/diag16976.d(39): Error: foreach: key cannot be of non-integral type `float`\n-fail_compilation/diag16976.d(40): Error: foreach: key cannot be of non-integral type `float`\n-fail_compilation/diag16976.d(41): Error: foreach: key cannot be of non-integral type `float`\n-fail_compilation/diag16976.d(42): Error: foreach: key cannot be of non-integral type `float`\n-fail_compilation/diag16976.d(43): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(44): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(45): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(46): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(47): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(48): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(49): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(50): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(51): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(52): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(53): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(54): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(55): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(56): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(57): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(58): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(59): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(65): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(66): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(67): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(68): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(69): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(70): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(71): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(72): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(73): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(74): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(75): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(76): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(77): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(78): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(79): Error: foreach: key cannot be of non-integral type `float`\n+fail_compilation/diag16976.d(80): Error: foreach: key cannot be of non-integral type `float`\n ---\n */\n \n@@ -41,4 +57,25 @@ void main()\n     foreach_reverse(float f, dchar i; sta) {}\n     foreach_reverse(float f, dchar i; str) {}\n     foreach_reverse(float f, dchar i; chr) {}\n+\n+    immutable int[]  idyn = [1,2,3,4,5];\n+    immutable int[5] ista = [1,2,3,4,5];\n+    immutable char[]  istr = ['1','2','3','4','5'];\n+    immutable char[5] ichr = ['1','2','3','4','5'];\n+    static foreach(float f, i; idyn) {}\n+    static foreach(float f, i; ista) {}\n+    static foreach(float f, i; istr) {}\n+    static foreach(float f, i; ichr) {}\n+    static foreach(float f, dchar i; idyn) {}\n+    static foreach(float f, dchar i; ista) {}\n+    static foreach(float f, dchar i; istr) {}\n+    static foreach(float f, dchar i; ichr) {}\n+    static foreach_reverse(float f, i; idyn) {}\n+    static foreach_reverse(float f, i; ista) {}\n+    static foreach_reverse(float f, i; istr) {}\n+    static foreach_reverse(float f, i; ichr) {}\n+    static foreach_reverse(float f, dchar i; idyn) {}\n+    static foreach_reverse(float f, dchar i; ista) {}\n+    static foreach_reverse(float f, dchar i; istr) {}\n+    static foreach_reverse(float f, dchar i; ichr) {}\n }"}, {"sha": "9279d54276cbfcbb021c7e4539cc4db84844d07a", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail117.d", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail117.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail117.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail117.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -1,8 +1,10 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail117.d(35): Error: expression has no value\n-fail_compilation/fail117.d(36): Error: expression has no value\n+fail_compilation/fail117.d(37): Error: expression `foo.mixin MGettor!(a) geta;\n+` is `void` and has no value\n+fail_compilation/fail117.d(38): Error: expression `foo.mixin MGettor!(b) getb;\n+` is `void` and has no value\n ---\n */\n "}, {"sha": "89bbc289414bd687158718ca2f0dd8a2e0df4050", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail22006.d", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail22006.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail22006.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail22006.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -0,0 +1,22 @@\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail22006.d(15): Error: cannot implicitly convert expression `4$?:32=u|64=LU$` of type `$?:32=uint|64=ulong$` to `bool`\n+fail_compilation/fail22006.d(16): Error: index type `bool` cannot cover index range 0..4\n+fail_compilation/fail22006.d(19): Error: cannot implicitly convert expression `4$?:32=u|64=LU$` of type `$?:32=uint|64=ulong$` to `bool`\n+fail_compilation/fail22006.d(20): Error: index type `bool` cannot cover index range 0..4\n+---\n+*/\n+void test22006()\n+{\n+    alias AliasSeq(TList...) = TList;\n+    {\n+        alias aseq = AliasSeq!(0, 1, 2, 3);\n+        static foreach (bool i; 0 .. aseq.length) {}\n+        static foreach (bool i, x; aseq) {}\n+    }\n+    {\n+        static foreach (bool i; 0 .. [0, 1, 2, 3].length) {}\n+        static foreach (bool i, x; [0, 1, 2, 3]) {}\n+    }\n+}"}, {"sha": "a312dc07290510285dcdf2d99f8ab35ef5837142", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail238_m32.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail238_m32.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail238_m32.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail238_m32.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -3,10 +3,10 @@\n TEST_OUTPUT:\n ---\n fail_compilation/fail238_m32.d(21): Error: cannot implicitly convert expression `\"a\"` of type `string` to `uint`\n-fail_compilation/fail238_m32.d(24): Error: cannot interpret X!() at compile time\n-fail_compilation/fail238_m32.d(29): Error: template instance fail238_m32.A!\"a\" error instantiating\n-fail_compilation/fail238_m32.d(35):        instantiated from here: M!(q)\n-fail_compilation/fail238_m32.d(35):        while evaluating pragma(msg, M!(q))\n+fail_compilation/fail238_m32.d(24): Error: cannot implicitly convert expression `X!()` of type `void` to `const(string)`\n+fail_compilation/fail238_m32.d(29): Error: template instance `fail238_m32.A!\"a\"` error instantiating\n+fail_compilation/fail238_m32.d(35):        instantiated from here: `M!(q)`\n+fail_compilation/fail238_m32.d(35):        while evaluating `pragma(msg, M!(q))`\n ---\n */\n "}, {"sha": "dc7a50ea546bd89a8040c6014af907ef1222e84a", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail238_m64.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail238_m64.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail238_m64.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail238_m64.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -3,10 +3,10 @@\n TEST_OUTPUT:\n ---\n fail_compilation/fail238_m64.d(21): Error: cannot implicitly convert expression `\"a\"` of type `string` to `ulong`\n-fail_compilation/fail238_m64.d(24): Error: cannot interpret X!() at compile time\n-fail_compilation/fail238_m64.d(29): Error: template instance fail238_m64.A!\"a\" error instantiating\n-fail_compilation/fail238_m64.d(35):        instantiated from here: M!(q)\n-fail_compilation/fail238_m64.d(35):        while evaluating pragma(msg, M!(q))\n+fail_compilation/fail238_m64.d(24): Error: cannot implicitly convert expression `X!()` of type `void` to `const(string)`\n+fail_compilation/fail238_m64.d(29): Error: template instance `fail238_m64.A!\"a\"` error instantiating\n+fail_compilation/fail238_m64.d(35):        instantiated from here: `M!(q)`\n+fail_compilation/fail238_m64.d(35):        while evaluating `pragma(msg, M!(q))`\n ---\n */\n "}, {"sha": "737958ca6a307ef1afba0e0704fdbd6c66585672", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail7424b.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424b.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -1,7 +1,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail7424b.d(10): Error: cannot resolve type for this.g()()\n+fail_compilation/fail7424b.d(10): Error: expression `this.g()()` is `void` and has no value\n ---\n */\n struct S7424b"}, {"sha": "e804d72100bfd0607c23d114e7c16dad4318d8c0", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail7424c.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424c.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424c.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424c.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -1,7 +1,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail7424c.d(10): Error: cannot resolve type for this.g()()\n+fail_compilation/fail7424c.d(10): Error: expression `this.g()()` is `void` and has no value\n ---\n */\n struct S7424c"}, {"sha": "5ef9463aeb27388edbc755fecf588f0f37c136ca", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail7424d.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424d.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424d.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424d.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -1,7 +1,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail7424d.d(10): Error: cannot resolve type for this.g()()\n+fail_compilation/fail7424d.d(10): Error: expression `this.g()()` is `void` and has no value\n ---\n */\n struct S7424d"}, {"sha": "ddf4ded953a5030e9cb0372f72b25086651907f4", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail7424e.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424e.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424e.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424e.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -1,7 +1,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail7424e.d(10): Error: cannot resolve type for this.g()()\n+fail_compilation/fail7424e.d(10): Error: expression `this.g()()` is `void` and has no value\n ---\n */\n struct S7424e"}, {"sha": "751b6259d3137e448af1a3f376b1b08b35efa556", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail7424f.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424f.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424f.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424f.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -1,7 +1,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail7424f.d(10): Error: cannot resolve type for this.g()()\n+fail_compilation/fail7424f.d(10): Error: expression `this.g()()` is `void` and has no value\n ---\n */\n struct S7424f"}, {"sha": "d4fa4635d8d2c8e02a5ce5f0905e40b6e9529eaf", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail7424g.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424g.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424g.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424g.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -1,7 +1,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail7424g.d(10): Error: cannot resolve type for this.g()()\n+fail_compilation/fail7424g.d(10): Error: expression `this.g()()` is `void` and has no value\n ---\n */\n struct S7424g"}, {"sha": "56184a5f5a12649910a0f14742eeb99c68ed3467", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail7424h.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424h.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424h.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424h.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -1,7 +1,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail7424h.d(10): Error: cannot resolve type for this.g()()\n+fail_compilation/fail7424h.d(10): Error: expression `this.g()()` is `void` and has no value\n ---\n */\n struct S7424g"}, {"sha": "37042f741f368ffe036b1cc97bca6bb07e2ed302", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail7424i.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424i.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424i.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail7424i.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -1,7 +1,7 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail7424i.d(10): Error: cannot resolve type for this.g()()\n+fail_compilation/fail7424i.d(10): Error: expression `this.g()()` is `void` and has no value\n ---\n */\n struct S7424g"}, {"sha": "58cabe3825bd09316b0b6ca5d00d84fcb8c126b0", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail9766.d", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail9766.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail9766.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail9766.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -1,14 +1,16 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail9766.d(14): Error: cannot interpret Foo!int at compile time\n+fail_compilation/fail9766.d(14): Error: integer constant expression expected instead of `Foo!int`\n+fail_compilation/fail9766.d(14): Error: alignment must be an integer positive power of 2, not Foo!int\n fail_compilation/fail9766.d(17): Error: alignment must be an integer positive power of 2, not -1\n fail_compilation/fail9766.d(20): Error: alignment must be an integer positive power of 2, not 0\n fail_compilation/fail9766.d(23): Error: alignment must be an integer positive power of 2, not 3\n fail_compilation/fail9766.d(26): Error: alignment must be an integer positive power of 2, not 2147483649u\n ---\n */\n \n+#line 12\n template Foo(T) {}\n \n align(Foo!int)"}, {"sha": "c1807a0f542c2520ed5b5163a5bbc9f8405eab57", "filename": "gcc/testsuite/gdc.test/fail_compilation/ice9406.d", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice9406.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice9406.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice9406.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -1,7 +1,8 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/ice9406.d(21): Error: expression has no value\n+fail_compilation/ice9406.d(22): Error: `s1.mixin Mixin!() t1;\n+` has no effect\n ---\n */\n "}, {"sha": "fa23285e8b03fd5d79cc6a93b6f8fd0e68128621", "filename": "gcc/testsuite/gdc.test/fail_compilation/test21927.d", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest21927.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest21927.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest21927.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -0,0 +1,20 @@\n+// https://issues.dlang.org/show_bug.cgi?id=21927\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/test21927.d(17): Error: invalid `foreach` aggregate `this.T2(Args2...)`\n+fail_compilation/test21927.d(18): Error: invalid `foreach` aggregate `this.T2!()`\n+---\n+*/\n+\n+struct S\n+{\n+    template T2(Args2...) {}\n+\n+    void fun()\n+    {\n+        // original test case\n+        static foreach (p; this.T2) {} // ICE\n+        static foreach (p; this.T2!()) {} // ICE\n+    }\n+}"}, {"sha": "cb755ef267945628c3b05d8c740a3f3f673d2a4e", "filename": "gcc/testsuite/gdc.test/fail_compilation/test21939.d", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest21939.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest21939.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ftest21939.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -0,0 +1,9 @@\n+// https://issues.dlang.org/show_bug.cgi?id=21939\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/test21939.d(9): Error: invalid `foreach` aggregate `Object`, define `opApply()`, range primitives, or use `.tupleof`\n+---\n+*/\n+\n+static foreach (a; Object) {}"}, {"sha": "01cf5943b03b918990fc0b51b45bd1d66c80f8a5", "filename": "libphobos/src/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/libphobos%2Fsrc%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/libphobos%2Fsrc%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2FMERGE?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -1,4 +1,4 @@\n-63f4caa900e17c541042617b2fa187059b86bf88\n+55bb17543138a87c376a84745f2a30ec00bdecd9\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/phobos repository."}, {"sha": "84e876f3c59b9ad45ad1c06b8ed7b038ee33e254", "filename": "libphobos/src/std/typecons.d", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f46862d33707450bdf70cfddd91ae2a12527a8/libphobos%2Fsrc%2Fstd%2Ftypecons.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f46862d33707450bdf70cfddd91ae2a12527a8/libphobos%2Fsrc%2Fstd%2Ftypecons.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Ftypecons.d?ref=68f46862d33707450bdf70cfddd91ae2a12527a8", "patch": "@@ -5935,13 +5935,7 @@ mixin template Proxy(alias a)\n             // built-in type field, manifest constant, and static non-mutable field\n             enum opDispatch = mixin(\"a.\"~name);\n         }\n-        else static if (is(typeof(mixin(\"a.\"~name))) || __traits(getOverloads, a, name).length != 0)\n-        {\n-            // field or property function\n-            @property auto ref opDispatch(this X)()                { return mixin(\"a.\"~name);        }\n-            @property auto ref opDispatch(this X, V)(auto ref V v) { return mixin(\"a.\"~name~\" = v\"); }\n-        }\n-        else\n+        else static if (__traits(isTemplate, mixin(\"a.\"~name)))\n         {\n             // member template\n             template opDispatch(T...)\n@@ -5950,6 +5944,13 @@ mixin template Proxy(alias a)\n                 auto ref opDispatch(this X, Args...)(auto ref Args args){ return mixin(\"a.\"~name~targs~\"(args)\"); }\n             }\n         }\n+        else\n+        {\n+            // field or property function\n+            @property auto ref opDispatch(this X)()                { return mixin(\"a.\"~name);        }\n+            @property auto ref opDispatch(this X, V)(auto ref V v) { return mixin(\"a.\"~name~\" = v\"); }\n+        }\n+\n     }\n \n     import std.traits : isArray;"}]}