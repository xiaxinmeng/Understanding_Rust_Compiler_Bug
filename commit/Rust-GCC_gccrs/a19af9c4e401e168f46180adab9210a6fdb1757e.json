{"sha": "a19af9c4e401e168f46180adab9210a6fdb1757e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE5YWY5YzRlNDAxZTE2OGY0NjE4MGFkYWI5MjEwYTZmZGIxNzU3ZQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-07-13T10:18:32Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-07-13T10:18:32Z"}, "message": "sched-int.h (struct _dep): Add member cost.\n\n\t* sched-int.h (struct _dep): Add member cost.\n\t(DEP_COST, UNKNOWN_DEP_COST): New macros.\n\t* sched-deps.c (init_dep_1): Initialize DEP_COST.\n\t* haifa-sched.c (dep_cost_1): Use and set DEP_COST.\n\t(sched_change_pattern): Reset it for dependent insns.\n\nFrom-SVN: r176226", "tree": {"sha": "fb8bf8be019b0110f5a291264ebbc7b8c6c33ab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb8bf8be019b0110f5a291264ebbc7b8c6c33ab7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a19af9c4e401e168f46180adab9210a6fdb1757e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a19af9c4e401e168f46180adab9210a6fdb1757e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a19af9c4e401e168f46180adab9210a6fdb1757e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a19af9c4e401e168f46180adab9210a6fdb1757e/comments", "author": null, "committer": null, "parents": [{"sha": "2d1efe2d2d19872257bffb1561838805eb5f4fab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d1efe2d2d19872257bffb1561838805eb5f4fab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d1efe2d2d19872257bffb1561838805eb5f4fab"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "3e604c4652d71c0f04c2984c7d7fe3b32aafe4bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19af9c4e401e168f46180adab9210a6fdb1757e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19af9c4e401e168f46180adab9210a6fdb1757e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a19af9c4e401e168f46180adab9210a6fdb1757e", "patch": "@@ -1,3 +1,11 @@\n+2011-07-13  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* sched-int.h (struct _dep): Add member cost.\n+\t(DEP_COST, UNKNOWN_DEP_COST): New macros.\n+\t* sched-deps.c (init_dep_1): Initialize DEP_COST.\n+\t* haifa-sched.c (dep_cost_1): Use and set DEP_COST.\n+\t(sched_change_pattern): Reset it for dependent insns.\n+\n 2011-07-13  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* Makefile.in (CRT0STUFF_T_CFLAGS): Remove."}, {"sha": "bc36d07f6e5f8b4b96e346fbaa77d06761c0d3c6", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19af9c4e401e168f46180adab9210a6fdb1757e/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19af9c4e401e168f46180adab9210a6fdb1757e/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=a19af9c4e401e168f46180adab9210a6fdb1757e", "patch": "@@ -854,6 +854,9 @@ dep_cost_1 (dep_t link, dw_t dw)\n   rtx used = DEP_CON (link);\n   int cost;\n \n+  if (DEP_COST (link) != UNKNOWN_DEP_COST)\n+    return DEP_COST (link);\n+\n   /* A USE insn should never require the value used to be computed.\n      This allows the computation of a function's result and parameter\n      values to overlap the return and call.  We don't care about the\n@@ -911,6 +914,7 @@ dep_cost_1 (dep_t link, dw_t dw)\n \tcost = 0;\n     }\n \n+  DEP_COST (link) = cost;\n   return cost;\n }\n \n@@ -4865,11 +4869,21 @@ fix_recovery_deps (basic_block rec)\n void\n sched_change_pattern (rtx insn, rtx new_pat)\n {\n+  sd_iterator_def sd_it;\n+  dep_t dep;\n   int t;\n \n   t = validate_change (insn, &PATTERN (insn), new_pat, 0);\n   gcc_assert (t);\n   dfa_clear_single_insn_cache (insn);\n+\n+  for (sd_it = sd_iterator_start (insn, (SD_LIST_FORW | SD_LIST_BACK\n+\t\t\t\t\t | SD_LIST_RES_BACK));\n+       sd_iterator_cond (&sd_it, &dep);)\n+    {\n+      DEP_COST (dep) = UNKNOWN_DEP_COST;\n+      sd_iterator_next (&sd_it);\n+    }\n }\n \n /* Change pattern of INSN to NEW_PAT.  Invalidate cached haifa"}, {"sha": "4ceea72d8767aa0e33a6f99bf62edcbc9551b0d5", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19af9c4e401e168f46180adab9210a6fdb1757e/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19af9c4e401e168f46180adab9210a6fdb1757e/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=a19af9c4e401e168f46180adab9210a6fdb1757e", "patch": "@@ -107,6 +107,7 @@ init_dep_1 (dep_t dep, rtx pro, rtx con, enum reg_note type, ds_t ds)\n   DEP_CON (dep) = con;\n   DEP_TYPE (dep) = type;\n   DEP_STATUS (dep) = ds;\n+  DEP_COST (dep) = UNKNOWN_DEP_COST;\n }\n \n /* Init DEP with the arguments."}, {"sha": "8b39a22c803b68a9c73b28fba9b3e29b4301741d", "filename": "gcc/sched-int.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19af9c4e401e168f46180adab9210a6fdb1757e/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19af9c4e401e168f46180adab9210a6fdb1757e/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=a19af9c4e401e168f46180adab9210a6fdb1757e", "patch": "@@ -215,6 +215,9 @@ struct _dep\n   /* Dependency status.  This field holds all dependency types and additional\n      information for speculative dependencies.  */\n   ds_t status;\n+\n+  /* Cached cost of the dependency.  */\n+  int cost;\n };\n \n typedef struct _dep dep_def;\n@@ -224,6 +227,9 @@ typedef dep_def *dep_t;\n #define DEP_CON(D) ((D)->con)\n #define DEP_TYPE(D) ((D)->type)\n #define DEP_STATUS(D) ((D)->status)\n+#define DEP_COST(D) ((D)->cost)\n+\n+#define UNKNOWN_DEP_COST INT_MIN\n \n /* Functions to work with dep.  */\n "}]}