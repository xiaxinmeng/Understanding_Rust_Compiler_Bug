{"sha": "0139adcaa7056e95fc8ad379239ececac80b482b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEzOWFkY2FhNzA1NmU5NWZjOGFkMzc5MjM5ZWNlY2FjODBiNDgyYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-03-10T01:39:04Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-03-10T01:39:04Z"}, "message": "c4x.c (c4x_fp_reglist): Const-ify.\n\n\t* c4x.c (c4x_fp_reglist): Const-ify.\n\t* cris.c (cris_print_operand): Likewise.\n\t* i386.c (ix86_va_arg): Likewise.\n\t* ia64/unwind-ia64.c (unw_decode_table): Likewise.\n\t* m32r.c (m32r_hard_regno_mode_ok): Likewise.\n\t* m32r.h (m32r_hard_regno_mode_ok): Likewise.\n\t* mcore.c (regno_reg_class, mcore_unique_section): Likewise.\n\t* mcore.h (regno_reg_class): Likewise.\n\t* mips.c (gen_int_relational): Likewise.\n\t* ns32k.c (ns32k_reg_class_contents, regclass_map): Likewise.\n\t* ns32k.h (ns32k_reg_class_contents, regclass_map): Likewise.\n\t* pdp11.c (pdp11_assemble_integer): Likewise.\n\t* pj.h (INITIALIZE_TRAMPOLINE): Likewise.\n\t* s390.c (s390_branch_condition_mnemonic, regclass_map):\n\tLikewise.\n\t* s390.h (regclass_map): Likewise.\n\t* sh.c (shift_amounts): Likewise.\n\t* sh.md (rot_tab): Likewise.\n\nFrom-SVN: r50517", "tree": {"sha": "f508fbbfd2ee8bd004e584cb7eca1b92c0f55ac2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f508fbbfd2ee8bd004e584cb7eca1b92c0f55ac2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0139adcaa7056e95fc8ad379239ececac80b482b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0139adcaa7056e95fc8ad379239ececac80b482b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0139adcaa7056e95fc8ad379239ececac80b482b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0139adcaa7056e95fc8ad379239ececac80b482b/comments", "author": null, "committer": null, "parents": [{"sha": "1c0d0c3e5646d9108997efb96be30a81e3b711ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c0d0c3e5646d9108997efb96be30a81e3b711ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c0d0c3e5646d9108997efb96be30a81e3b711ba"}], "stats": {"total": 65, "additions": 43, "deletions": 22}, "files": [{"sha": "27eb89512edb75a102a1c5b9080ffe1f75b87e01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0139adcaa7056e95fc8ad379239ececac80b482b", "patch": "@@ -1,3 +1,24 @@\n+2002-03-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c4x.c (c4x_fp_reglist): Const-ify.\n+\t* cris.c (cris_print_operand): Likewise.\n+\t* i386.c (ix86_va_arg): Likewise.\n+\t* ia64/unwind-ia64.c (unw_decode_table): Likewise.\n+\t* m32r.c (m32r_hard_regno_mode_ok): Likewise.\n+\t* m32r.h (m32r_hard_regno_mode_ok): Likewise.\n+\t* mcore.c (regno_reg_class, mcore_unique_section): Likewise.\n+\t* mcore.h (regno_reg_class): Likewise.\n+\t* mips.c (gen_int_relational): Likewise.\n+\t* ns32k.c (ns32k_reg_class_contents, regclass_map): Likewise.\n+\t* ns32k.h (ns32k_reg_class_contents, regclass_map): Likewise.\n+\t* pdp11.c (pdp11_assemble_integer): Likewise.\n+\t* pj.h (INITIALIZE_TRAMPOLINE): Likewise.\n+\t* s390.c (s390_branch_condition_mnemonic, regclass_map):\n+\tLikewise.\n+\t* s390.h (regclass_map): Likewise.\n+\t* sh.c (shift_amounts): Likewise.\n+\t* sh.md (rot_tab): Likewise.\n+\n 2002-03-09  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* config/rs6000/rs6000.md (ne0+4): Add extra CLOBBER."}, {"sha": "fc02849aef6995b40a9cf7fac03f80e2576fb74c", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=0139adcaa7056e95fc8ad379239ececac80b482b", "patch": "@@ -514,7 +514,7 @@ static const int c4x_int_reglist[3][6] =\n   {AR2_REGNO, RC_REGNO, RS_REGNO, RE_REGNO, 0, 0}\n };\n \n-static int c4x_fp_reglist[2] = {R2_REGNO, R3_REGNO};\n+static const int c4x_fp_reglist[2] = {R2_REGNO, R3_REGNO};\n \n \n /* Initialize a variable CUM of type CUMULATIVE_ARGS for a call to a"}, {"sha": "94568742f3e84b5d56519b773cf64e7314dc8176", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=0139adcaa7056e95fc8ad379239ececac80b482b", "patch": "@@ -1264,7 +1264,7 @@ cris_print_operand (file, x, code)\n   rtx operand = x;\n \n   /* Size-strings corresponding to MULT expressions.  */\n-  static const char *mults[] = { \"BAD:0\", \".b\", \".w\", \"BAD:3\", \".d\" };\n+  static const char *const mults[] = { \"BAD:0\", \".b\", \".w\", \"BAD:3\", \".d\" };\n \n   /* New code entries should just be added to the switch below.  If\n      handling is finished, just return.  If handling was just a"}, {"sha": "ae714da67b35669c37b39713f1e7c1094458decf", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0139adcaa7056e95fc8ad379239ececac80b482b", "patch": "@@ -2509,7 +2509,7 @@ rtx\n ix86_va_arg (valist, type)\n      tree valist, type;\n {\n-  static int intreg[6] = { 0, 1, 2, 3, 4, 5 };\n+  static const int intreg[6] = { 0, 1, 2, 3, 4, 5 };\n   tree f_gpr, f_fpr, f_ovf, f_sav;\n   tree gpr, fpr, ovf, sav, t;\n   int size, rsize;"}, {"sha": "bca3f236287658ecacef34995ae02131cdd7cbfc", "filename": "gcc/config/ia64/unwind-ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fia64%2Funwind-ia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fia64%2Funwind-ia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Funwind-ia64.c?ref=0139adcaa7056e95fc8ad379239ececac80b482b", "patch": "@@ -1212,7 +1212,7 @@ unw_decode_b3_x4 (unsigned char *dp, unsigned char code, void *arg)\n \n typedef unsigned char *(*unw_decoder) (unsigned char *, unsigned char, void *);\n \n-static unw_decoder unw_decode_table[2][8] =\n+static const unw_decoder unw_decode_table[2][8] =\n {\n   /* prologue table: */\n   {"}, {"sha": "acc6b5edb2a6e5ea8941db8c6ea2b1766c432b1a", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=0139adcaa7056e95fc8ad379239ececac80b482b", "patch": "@@ -172,7 +172,7 @@ enum m32r_mode_class\n \n /* Value is 1 if register/mode pair is acceptable on arc.  */\n \n-unsigned int m32r_hard_regno_mode_ok[FIRST_PSEUDO_REGISTER] =\n+const unsigned int m32r_hard_regno_mode_ok[FIRST_PSEUDO_REGISTER] =\n {\n   T_MODES, T_MODES, T_MODES, T_MODES, T_MODES, T_MODES, T_MODES, T_MODES,\n   T_MODES, T_MODES, T_MODES, T_MODES, T_MODES, S_MODES, S_MODES, S_MODES,"}, {"sha": "ef51ce1dc64f5ba71d2aef46c7d91a807d6e5eda", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=0139adcaa7056e95fc8ad379239ececac80b482b", "patch": "@@ -638,7 +638,7 @@ extern enum m32r_sdata m32r_sdata;\n ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.  */\n-extern unsigned int m32r_hard_regno_mode_ok[FIRST_PSEUDO_REGISTER];\n+extern const unsigned int m32r_hard_regno_mode_ok[FIRST_PSEUDO_REGISTER];\n extern unsigned int m32r_mode_class[];\n #define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n ((m32r_hard_regno_mode_ok[REGNO] & m32r_mode_class[MODE]) != 0)"}, {"sha": "2acd158da06b51c429af8f31fba1310d670c16a3", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=0139adcaa7056e95fc8ad379239ececac80b482b", "patch": "@@ -62,7 +62,7 @@ rtx arch_compare_op1;\n \n /* Provides the class number of the smallest class containing\n    reg number.  */\n-int regno_reg_class[FIRST_PSEUDO_REGISTER] =\n+const int regno_reg_class[FIRST_PSEUDO_REGISTER] =\n {\n   GENERAL_REGS,\tONLYR1_REGS,  LRW_REGS,\t    LRW_REGS,\n   LRW_REGS,\tLRW_REGS,     LRW_REGS,\t    LRW_REGS,\n@@ -3519,7 +3519,7 @@ mcore_unique_section (decl, reloc)\n      int reloc ATTRIBUTE_UNUSED;\n {\n   int len;\n-  char * name;\n+  const char * name;\n   char * string;\n   const char * prefix;\n "}, {"sha": "1de6fbc8d678b13d38fa0201113a9f299bf0814e", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=0139adcaa7056e95fc8ad379239ececac80b482b", "patch": "@@ -518,7 +518,7 @@ enum reg_class\n    reg number REGNO.  This could be a conditional expression\n    or could index an array.  */\n \n-extern int regno_reg_class[FIRST_PSEUDO_REGISTER];\n+extern const int regno_reg_class[FIRST_PSEUDO_REGISTER];\n #define REGNO_REG_CLASS(REGNO) regno_reg_class[REGNO]\n \n /* When defined, the compiler allows registers explicitly used in the"}, {"sha": "467cbca8d599a54e0403c94b356ddbc6e720d183", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=0139adcaa7056e95fc8ad379239ececac80b482b", "patch": "@@ -2884,7 +2884,7 @@ gen_int_relational (test_code, result, cmp0, cmp1, p_invert)\n     int unsignedp;\t\t/* != 0 for unsigned comparisons.  */\n   };\n \n-  static struct cmp_info info[ (int)ITEST_MAX ] = {\n+  static const struct cmp_info info[ (int)ITEST_MAX ] = {\n \n     { XOR,\t 0,  65535,  0,\t 0,  0,\t 0, 0 },\t/* EQ  */\n     { XOR,\t 0,  65535,  0,\t 0,  1,\t 1, 0 },\t/* NE  */\n@@ -2900,7 +2900,7 @@ gen_int_relational (test_code, result, cmp0, cmp1, p_invert)\n \n   enum internal_test test;\n   enum machine_mode mode;\n-  struct cmp_info *p_info;\n+  const struct cmp_info *p_info;\n   int branch_p;\n   int eqne_p;\n   int invert;"}, {"sha": "9feef5e00670ad8fce0571d7d1383f991246ed87", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=0139adcaa7056e95fc8ad379239ececac80b482b", "patch": "@@ -47,9 +47,9 @@ int ns32k_num_files = 0;\n    initialized in time. Also this is more convenient as an array of ints.\n    We know that HARD_REG_SET fits in an unsigned int */\n \n-unsigned int ns32k_reg_class_contents[N_REG_CLASSES][1] = REG_CLASS_CONTENTS;\n+const unsigned int ns32k_reg_class_contents[N_REG_CLASSES][1] = REG_CLASS_CONTENTS;\n \n-enum reg_class regclass_map[FIRST_PSEUDO_REGISTER] =\n+const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER] =\n {\n   GENERAL_REGS, GENERAL_REGS, GENERAL_REGS, GENERAL_REGS,\n   GENERAL_REGS, GENERAL_REGS, GENERAL_REGS, GENERAL_REGS,"}, {"sha": "00d3aa7b023fa18e4aa791ad58e3d1bfb9b3b52f", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=0139adcaa7056e95fc8ad379239ececac80b482b", "patch": "@@ -1388,8 +1388,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define PRINT_OPERAND_ADDRESS(FILE, ADDR) print_operand_address(FILE, ADDR)\n \n-extern unsigned int ns32k_reg_class_contents[N_REG_CLASSES][1];\n-extern enum reg_class regclass_map[FIRST_PSEUDO_REGISTER]; /* smallest class containing REGNO */\n+extern const unsigned int ns32k_reg_class_contents[N_REG_CLASSES][1];\n+extern const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER]; /* smallest class containing REGNO */\n \n /*\n Local variables:"}, {"sha": "cff6fbf67928183952f65e2d3a1d1e1958a13926", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=0139adcaa7056e95fc8ad379239ececac80b482b", "patch": "@@ -984,7 +984,7 @@ pdp11_assemble_integer (x, size, aligned_p)\n \n /* register move costs, indexed by regs */\n \n-static int move_costs[N_REG_CLASSES][N_REG_CLASSES] = \n+static const int move_costs[N_REG_CLASSES][N_REG_CLASSES] = \n {\n              /* NO  MUL  GEN  LFPU  NLFPU FPU ALL */\n "}, {"sha": "5c0095e08df4dee642ed34e8df35ef6d2ee931f3", "filename": "gcc/config/pj/pj.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fpj%2Fpj.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fpj%2Fpj.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fpj.h?ref=0139adcaa7056e95fc8ad379239ececac80b482b", "patch": "@@ -734,7 +734,7 @@ struct pj_args\n \n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)                             \\\n {                                                                             \\\n-  static int off[4] = { 1, 0, 4, 3 };                                         \\\n+  static const int off[4] = { 1, 0, 4, 3 };                                   \\\n   int i;                                                                      \\\n                                                                               \\\n   /* Move the FNADDR and CXT into the instruction stream. Do this byte        \\"}, {"sha": "f4696e44f7f9aa4e5b25d415a5a25e77ef38903f", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=0139adcaa7056e95fc8ad379239ececac80b482b", "patch": "@@ -344,7 +344,7 @@ s390_branch_condition_mnemonic (code, inv)\n      rtx code;\n      int inv;\n {\n-  static const char *mnemonic[16] =\n+  static const char *const mnemonic[16] =\n     {\n       NULL, \"o\", \"h\", \"nle\",\n       \"l\", \"nhe\", \"lh\", \"ne\",\n@@ -600,7 +600,7 @@ override_options ()\n \n /* Map for smallest class containing reg regno.  */\n \n-enum reg_class regclass_map[FIRST_PSEUDO_REGISTER] =\n+const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER] =\n { GENERAL_REGS, ADDR_REGS, ADDR_REGS, ADDR_REGS,\n   ADDR_REGS,    ADDR_REGS, ADDR_REGS, ADDR_REGS,\n   ADDR_REGS,    ADDR_REGS, ADDR_REGS, ADDR_REGS,"}, {"sha": "005c2f30aa0ab0da72aeb917ac224c65961e17f3", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=0139adcaa7056e95fc8ad379239ececac80b482b", "patch": "@@ -518,7 +518,7 @@ enum reg_class\n \n #define REGNO_REG_CLASS(REGNO) (regclass_map[REGNO])\n \n-extern enum reg_class regclass_map[FIRST_PSEUDO_REGISTER]; /* smalled class containing REGNO   */\n+extern const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER]; /* smalled class containing REGNO   */\n \n /* The class value for index registers, and the one for base regs.  */\n "}, {"sha": "882a778e901861b70678bf1c2a4319050c995ba7", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=0139adcaa7056e95fc8ad379239ececac80b482b", "patch": "@@ -1136,7 +1136,7 @@ static const char shift_insns[]    =\n    One bit right shifts clobber the T bit, so when possible, put one bit\n    shifts in the middle of the sequence, so the ends are eligible for\n    branch delay slots.  */\n-static short shift_amounts[32][5] = {\n+static const short shift_amounts[32][5] = {\n   {0}, {1}, {2}, {2, 1},\n   {2, 2}, {2, 1, 2}, {2, 2, 2}, {2, 2, 1, 2},\n   {8}, {8, 1}, {8, 2}, {8, 1, 2},"}, {"sha": "ad17f117a1b1dc1cb7a8a9e1b04d936a272b1fc3", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139adcaa7056e95fc8ad379239ececac80b482b/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=0139adcaa7056e95fc8ad379239ececac80b482b", "patch": "@@ -2013,7 +2013,7 @@\n   \"TARGET_SH1\"\n   \"\n {\n-  static char rot_tab[] = {\n+  static const char rot_tab[] = {\n     000, 000, 000, 000, 000, 000, 010, 001,\n     001, 001, 011, 013, 003, 003, 003, 003,\n     003, 003, 003, 003, 003, 013, 012, 002,"}]}