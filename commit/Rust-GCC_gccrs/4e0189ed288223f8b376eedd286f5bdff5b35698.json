{"sha": "4e0189ed288223f8b376eedd286f5bdff5b35698", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUwMTg5ZWQyODgyMjNmOGIzNzZlZWRkMjg2ZjViZGZmNWIzNTY5OA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-01-06T18:18:42Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-01-08T11:36:54Z"}, "message": "Implicit Returns support.\n\nFor implict returns we must consider cases with a block having multiple\nreturns:\n\n HIR::BlockExpr Stmts {\n   ...\n   return x\n }\n HIR::BlockExpr final_expression {\n   x + 1\n }\n\nAlthough the code above is bad this is valid rust code and the rust\ncompiler correctly identifies the final_expression as unreachable.\n\nThis dead code eliminiation is done as part of AST to HIR lowering.\nType resolution examines all blocks to identifiy if they terminate\na function with a return/final expression it must correspond accordngly.\n\nIf the block is the final block the resulting termination of the block\nmust match the return type of the function, else the block must conform\nto unit type.", "tree": {"sha": "89ab8d6db72bc19028d9ecb3a1946e8c0aa01ebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89ab8d6db72bc19028d9ecb3a1946e8c0aa01ebd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e0189ed288223f8b376eedd286f5bdff5b35698", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e0189ed288223f8b376eedd286f5bdff5b35698", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e0189ed288223f8b376eedd286f5bdff5b35698", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e0189ed288223f8b376eedd286f5bdff5b35698/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "290fc4f416c94a86aa5e3d22b785890a12686972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/290fc4f416c94a86aa5e3d22b785890a12686972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/290fc4f416c94a86aa5e3d22b785890a12686972"}], "stats": {"total": 492, "additions": 387, "deletions": 105}, "files": [{"sha": "2dbaec8f045ae4e076f296f815dfdda317683a7e", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -2838,6 +2838,8 @@ class BlockExpr : public ExprWithBlock\n       }\n   }\n \n+  size_t num_statements () const { return statements.size (); }\n+\n   // TODO: this mutable getter seems really dodgy. Think up better way.\n   const std::vector<Attribute> &get_inner_attrs () const { return inner_attrs; }\n   std::vector<Attribute> &get_inner_attrs () { return inner_attrs; }"}, {"sha": "c840112da11a18be56eef40cad173f65b0339bbc", "filename": "gcc/rust/ast/rust-stmt.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fast%2Frust-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fast%2Frust-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-stmt.h?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -184,6 +184,8 @@ class ExprStmt : public Stmt\n   Location locus;\n \n public:\n+  Location get_locus_slow () const final override { return get_locus (); }\n+\n   Location get_locus () const { return locus; }\n \n protected:"}, {"sha": "f1b39dad20073af428da8cbeaa12887116c53dc8", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -232,6 +232,23 @@ class CompileItem : public HIRCompileBase\n       return true;\n     });\n \n+    if (function_body->has_expr ())\n+      {\n+\t// the previous passes will ensure this is a valid return\n+\t// dead code elimination should remove any bad trailing expressions\n+\tBexpression *compiled_expr\n+\t  = CompileExpr::Compile (function_body->expr.get (), ctx);\n+\trust_assert (compiled_expr != nullptr);\n+\n+\tauto fncontext = ctx->peek_fn ();\n+\n+\tstd::vector<Bexpression *> retstmts;\n+\tretstmts.push_back (compiled_expr);\n+\tauto s = ctx->get_backend ()->return_statement (\n+\t  fncontext.fndecl, retstmts, function_body->expr->get_locus_slow ());\n+\tctx->add_statement (s);\n+      }\n+\n     ctx->pop_block ();\n     auto body = ctx->get_backend ()->block_statement (code_block);\n     if (!ctx->get_backend ()->function_set_body (fndecl, body))"}, {"sha": "a52f1831b339a0d539642a6abf4badb135d87c80", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -90,6 +90,23 @@ CompileBlock::visit (HIR::BlockExpr &expr)\n     return true;\n   });\n \n+  if (expr.has_expr ())\n+    {\n+      // the previous passes will ensure this is a valid return\n+      // dead code elimination should remove any bad trailing expressions\n+      Bexpression *compiled_expr = CompileExpr::Compile (expr.expr.get (), ctx);\n+      rust_assert (compiled_expr != nullptr);\n+\n+      auto fncontext = ctx->peek_fn ();\n+\n+      std::vector<Bexpression *> retstmts;\n+      retstmts.push_back (compiled_expr);\n+      auto s\n+\t= ctx->get_backend ()->return_statement (fncontext.fndecl, retstmts,\n+\t\t\t\t\t\t expr.expr->get_locus_slow ());\n+      ctx->add_statement (s);\n+    }\n+\n   ctx->pop_block ();\n   translated = new_block;\n }"}, {"sha": "1ef581e88bd1c05eab6a996b41396d4b35203fde", "filename": "gcc/rust/hir/rust-ast-lower-block.h", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -28,7 +28,7 @@ namespace HIR {\n class ASTLoweringBlock : public ASTLoweringBase\n {\n public:\n-  static HIR::BlockExpr *translate (AST::BlockExpr *expr)\n+  static HIR::BlockExpr *translate (AST::BlockExpr *expr, bool *terminated)\n   {\n     ASTLoweringBlock resolver;\n     expr->accept_vis (resolver);\n@@ -40,6 +40,7 @@ class ASTLoweringBlock : public ASTLoweringBase\n \t  resolver.translated);\n       }\n \n+    *terminated = resolver.terminated;\n     return resolver.translated;\n   }\n \n@@ -48,15 +49,18 @@ class ASTLoweringBlock : public ASTLoweringBase\n   void visit (AST::BlockExpr &expr);\n \n private:\n-  ASTLoweringBlock () : ASTLoweringBase (), translated (nullptr) {}\n+  ASTLoweringBlock ()\n+    : ASTLoweringBase (), translated (nullptr), terminated (false)\n+  {}\n \n   HIR::BlockExpr *translated;\n+  bool terminated;\n };\n \n class ASTLoweringIfBlock : public ASTLoweringBase\n {\n public:\n-  static HIR::IfExpr *translate (AST::IfExpr *expr)\n+  static HIR::IfExpr *translate (AST::IfExpr *expr, bool *terminated)\n   {\n     ASTLoweringIfBlock resolver;\n     expr->accept_vis (resolver);\n@@ -67,7 +71,7 @@ class ASTLoweringIfBlock : public ASTLoweringBase\n \t  resolver.translated->get_mappings ().get_hirid (),\n \t  resolver.translated);\n       }\n-\n+    *terminated = resolver.terminated;\n     return resolver.translated;\n   }\n \n@@ -80,15 +84,19 @@ class ASTLoweringIfBlock : public ASTLoweringBase\n   void visit (AST::IfExprConseqIf &expr);\n \n private:\n-  ASTLoweringIfBlock () : ASTLoweringBase (), translated (nullptr) {}\n+  ASTLoweringIfBlock ()\n+    : ASTLoweringBase (), translated (nullptr), terminated (false)\n+  {}\n \n   HIR::IfExpr *translated;\n+  bool terminated;\n };\n \n class ASTLoweringExprWithBlock : public ASTLoweringBase\n {\n public:\n-  static HIR::ExprWithBlock *translate (AST::ExprWithBlock *expr)\n+  static HIR::ExprWithBlock *translate (AST::ExprWithBlock *expr,\n+\t\t\t\t\tbool *terminated)\n   {\n     ASTLoweringExprWithBlock resolver;\n     expr->accept_vis (resolver);\n@@ -100,30 +108,34 @@ class ASTLoweringExprWithBlock : public ASTLoweringBase\n \t  resolver.translated);\n       }\n \n+    *terminated = resolver.terminated;\n     return resolver.translated;\n   }\n \n   ~ASTLoweringExprWithBlock () {}\n \n   void visit (AST::IfExpr &expr)\n   {\n-    translated = ASTLoweringIfBlock::translate (&expr);\n+    translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n   }\n \n   void visit (AST::IfExprConseqElse &expr)\n   {\n-    translated = ASTLoweringIfBlock::translate (&expr);\n+    translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n   }\n \n   void visit (AST::IfExprConseqIf &expr)\n   {\n-    translated = ASTLoweringIfBlock::translate (&expr);\n+    translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n   }\n \n private:\n-  ASTLoweringExprWithBlock () : ASTLoweringBase (), translated (nullptr) {}\n+  ASTLoweringExprWithBlock ()\n+    : ASTLoweringBase (), translated (nullptr), terminated (false)\n+  {}\n \n   HIR::ExprWithBlock *translated;\n+  bool terminated;\n };\n \n } // namespace HIR"}, {"sha": "51bf108ac4fc15e5dfac692554cc0bacf91fc280", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -107,7 +107,7 @@ class ASTLowerPathInExpression : public ASTLoweringBase\n class ASTLoweringExpr : public ASTLoweringBase\n {\n public:\n-  static HIR::Expr *translate (AST::Expr *expr)\n+  static HIR::Expr *translate (AST::Expr *expr, bool *terminated = nullptr)\n   {\n     ASTLoweringExpr resolver;\n     expr->accept_vis (resolver);\n@@ -121,6 +121,13 @@ class ASTLoweringExpr : public ASTLoweringBase\n     resolver.mappings->insert_hir_expr (\n       resolver.translated->get_mappings ().get_crate_num (),\n       resolver.translated->get_mappings ().get_hirid (), resolver.translated);\n+    resolver.mappings->insert_location (\n+      resolver.translated->get_mappings ().get_crate_num (),\n+      resolver.translated->get_mappings ().get_hirid (),\n+      expr->get_locus_slow ());\n+\n+    if (terminated != nullptr)\n+      *terminated = resolver.terminated;\n \n     return resolver.translated;\n   }\n@@ -129,22 +136,22 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n   void visit (AST::IfExpr &expr)\n   {\n-    translated = ASTLoweringIfBlock::translate (&expr);\n+    translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n   }\n \n   void visit (AST::IfExprConseqElse &expr)\n   {\n-    translated = ASTLoweringIfBlock::translate (&expr);\n+    translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n   }\n \n   void visit (AST::IfExprConseqIf &expr)\n   {\n-    translated = ASTLoweringIfBlock::translate (&expr);\n+    translated = ASTLoweringIfBlock::translate (&expr, &terminated);\n   }\n \n   void visit (AST::BlockExpr &expr)\n   {\n-    translated = ASTLoweringBlock::translate (&expr);\n+    translated = ASTLoweringBlock::translate (&expr, &terminated);\n   }\n \n   void visit (AST::PathInExpression &expr)\n@@ -154,6 +161,7 @@ class ASTLoweringExpr : public ASTLoweringBase\n \n   void visit (AST::ReturnExpr &expr)\n   {\n+    terminated = true;\n     HIR::Expr *return_expr\n       = expr.has_returned_expr ()\n \t  ? ASTLoweringExpr::translate (expr.get_returned_expr ().get ())\n@@ -498,10 +506,13 @@ class ASTLoweringExpr : public ASTLoweringBase\n   }\n \n private:\n-  ASTLoweringExpr () : translated (nullptr), translated_array_elems (nullptr) {}\n+  ASTLoweringExpr ()\n+    : translated (nullptr), translated_array_elems (nullptr), terminated (false)\n+  {}\n \n   HIR::Expr *translated;\n   HIR::ArrayElems *translated_array_elems;\n+  bool terminated;\n };\n \n } // namespace HIR"}, {"sha": "4a5a3feb538c8ca58e140a420b55e98376c73b61", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -185,9 +185,14 @@ class ASTLoweringItem : public ASTLoweringBase\n \tfunction_params.push_back (hir_param);\n       }\n \n+    bool terminated = false;\n     std::unique_ptr<HIR::BlockExpr> function_body\n       = std::unique_ptr<HIR::BlockExpr> (\n-\tASTLoweringBlock::translate (function.get_definition ().get ()));\n+\tASTLoweringBlock::translate (function.get_definition ().get (),\n+\t\t\t\t     &terminated));\n+    if (!terminated && function.has_return_type ())\n+      rust_error_at (function.get_definition ()->get_locus (),\n+\t\t     \"missing return\");\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, function.get_node_id (),"}, {"sha": "b6724563e4756a9ea721c676c4768621be271fa2", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -33,15 +33,12 @@ namespace HIR {\n class ASTLoweringStmt : public ASTLoweringBase\n {\n public:\n-  static HIR::Stmt *translate (AST::Stmt *stmt)\n+  static HIR::Stmt *translate (AST::Stmt *stmt, bool *terminated)\n   {\n     ASTLoweringStmt resolver;\n     stmt->accept_vis (resolver);\n-    if (resolver.translated == nullptr)\n-      {\n-\tprintf (\"Failing translating: %s\\n\", stmt->as_string ().c_str ());\n-\trust_assert (resolver.translated != nullptr);\n-      }\n+    rust_assert (resolver.translated != nullptr);\n+    *terminated = resolver.terminated;\n     return resolver.translated;\n   }\n \n@@ -50,7 +47,8 @@ class ASTLoweringStmt : public ASTLoweringBase\n   void visit (AST::ExprStmtWithBlock &stmt)\n   {\n     HIR::ExprWithBlock *expr\n-      = ASTLoweringExprWithBlock::translate (stmt.get_expr ().get ());\n+      = ASTLoweringExprWithBlock::translate (stmt.get_expr ().get (),\n+\t\t\t\t\t     &terminated);\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, stmt.get_node_id (),\n@@ -67,7 +65,8 @@ class ASTLoweringStmt : public ASTLoweringBase\n \n   void visit (AST::ExprStmtWithoutBlock &stmt)\n   {\n-    HIR::Expr *expr = ASTLoweringExpr::translate (stmt.get_expr ().get ());\n+    HIR::Expr *expr\n+      = ASTLoweringExpr::translate (stmt.get_expr ().get (), &terminated);\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, stmt.get_node_id (),\n@@ -110,9 +109,10 @@ class ASTLoweringStmt : public ASTLoweringBase\n   }\n \n private:\n-  ASTLoweringStmt () : translated (nullptr) {}\n+  ASTLoweringStmt () : translated (nullptr), terminated (false) {}\n \n   HIR::Stmt *translated;\n+  bool terminated;\n };\n \n } // namespace HIR"}, {"sha": "4f0d0d094e814653a1358922f617fb790b43772e", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 56, "deletions": 11, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -64,35 +64,68 @@ ASTLowering::go ()\n void\n ASTLoweringBlock::visit (AST::BlockExpr &expr)\n {\n-  std::vector<std::unique_ptr<HIR::Stmt> > block_stmts;\n-  std::unique_ptr<HIR::ExprWithoutBlock> block_expr;\n   std::vector<HIR::Attribute> inner_attribs;\n   std::vector<HIR::Attribute> outer_attribs;\n \n+  std::vector<std::unique_ptr<HIR::Stmt> > block_stmts;\n+  bool block_did_terminate = false;\n   expr.iterate_stmts ([&] (AST::Stmt *s) mutable -> bool {\n-    auto translated_stmt = ASTLoweringStmt::translate (s);\n+    bool terminated = false;\n+    auto translated_stmt = ASTLoweringStmt::translate (s, &terminated);\n     block_stmts.push_back (std::unique_ptr<HIR::Stmt> (translated_stmt));\n+    block_did_terminate = terminated;\n+    return !block_did_terminate;\n+  });\n+\n+  // if there was a return expression everything after that becomes\n+  // unreachable code. This can be detected for any AST NodeIDs that have no\n+  // associated HIR Mappings\n+  expr.iterate_stmts ([&] (AST::Stmt *s) -> bool {\n+    HirId ref;\n+    if (!mappings->lookup_node_to_hir (mappings->get_current_crate (),\n+\t\t\t\t       s->get_node_id (), &ref))\n+      rust_warning_at (s->get_locus_slow (), 0, \"unreachable statement\");\n+\n     return true;\n   });\n \n+  HIR::ExprWithoutBlock *tail_expr = nullptr;\n+  if (expr.has_tail_expr () && !block_did_terminate)\n+    {\n+      tail_expr = (HIR::ExprWithoutBlock *) ASTLoweringExpr::translate (\n+\texpr.get_tail_expr ().get ());\n+    }\n+  else if (expr.has_tail_expr () && block_did_terminate)\n+    {\n+      // warning unreachable tail expressions\n+      rust_warning_at (expr.get_tail_expr ()->get_locus_slow (), 0,\n+\t\t       \"unreachable expression\");\n+    }\n+\n   auto crate_num = mappings->get_current_crate ();\n   Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n \t\t\t\t mappings->get_next_hir_id (crate_num),\n \t\t\t\t UNKNOWN_LOCAL_DEFID);\n \n   translated\n     = new HIR::BlockExpr (mapping, std::move (block_stmts),\n-\t\t\t  std::move (block_expr), std::move (inner_attribs),\n-\t\t\t  std::move (outer_attribs), expr.get_locus ());\n+\t\t\t  std::unique_ptr<HIR::ExprWithoutBlock> (tail_expr),\n+\t\t\t  std::move (inner_attribs), std::move (outer_attribs),\n+\t\t\t  expr.get_locus ());\n+\n+  terminated = block_did_terminate || expr.has_tail_expr ();\n }\n \n void\n ASTLoweringIfBlock::visit (AST::IfExpr &expr)\n {\n+  bool ignored_terminated = false;\n   HIR::Expr *condition\n-    = ASTLoweringExpr::translate (expr.get_condition_expr ().get ());\n+    = ASTLoweringExpr::translate (expr.get_condition_expr ().get (),\n+\t\t\t\t  &ignored_terminated);\n   HIR::BlockExpr *block\n-    = ASTLoweringBlock::translate (expr.get_if_block ().get ());\n+    = ASTLoweringBlock::translate (expr.get_if_block ().get (),\n+\t\t\t\t   &ignored_terminated);\n \n   auto crate_num = mappings->get_current_crate ();\n   Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n@@ -109,10 +142,18 @@ ASTLoweringIfBlock::visit (AST::IfExprConseqElse &expr)\n {\n   HIR::Expr *condition\n     = ASTLoweringExpr::translate (expr.get_condition_expr ().get ());\n+\n+  bool if_block_terminated = false;\n+  bool else_block_termianted = false;\n+\n   HIR::BlockExpr *if_block\n-    = ASTLoweringBlock::translate (expr.get_if_block ().get ());\n+    = ASTLoweringBlock::translate (expr.get_if_block ().get (),\n+\t\t\t\t   &if_block_terminated);\n   HIR::BlockExpr *else_block\n-    = ASTLoweringBlock::translate (expr.get_else_block ().get ());\n+    = ASTLoweringBlock::translate (expr.get_else_block ().get (),\n+\t\t\t\t   &else_block_termianted);\n+\n+  terminated = if_block_terminated && else_block_termianted;\n \n   auto crate_num = mappings->get_current_crate ();\n   Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n@@ -132,10 +173,14 @@ ASTLoweringIfBlock::visit (AST::IfExprConseqIf &expr)\n {\n   HIR::Expr *condition\n     = ASTLoweringExpr::translate (expr.get_condition_expr ().get ());\n+\n+  bool ignored_terminated = false;\n   HIR::BlockExpr *block\n-    = ASTLoweringBlock::translate (expr.get_if_block ().get ());\n+    = ASTLoweringBlock::translate (expr.get_if_block ().get (),\n+\t\t\t\t   &ignored_terminated);\n   HIR::IfExpr *conseq_if_expr\n-    = ASTLoweringIfBlock::translate (expr.get_conseq_if_expr ().get ());\n+    = ASTLoweringIfBlock::translate (expr.get_conseq_if_expr ().get (),\n+\t\t\t\t     &ignored_terminated);\n \n   auto crate_num = mappings->get_current_crate ();\n   Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),"}, {"sha": "11be8b6d035b3f6223f62ed6baef8cba4a0cf916", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -2594,6 +2594,8 @@ class BlockExpr : public ExprWithBlock\n       }\n   }\n \n+  bool is_final_stmt (Stmt *stmt) { return statements.back ().get () == stmt; }\n+\n   Location get_closing_locus ()\n   {\n     if (statements.size () == 0)"}, {"sha": "c69e433843c14ff597748e8bc4581895b107ffb4", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -85,6 +85,10 @@ class ResolveItem : public ResolverBase\n \treturn true;\n       });\n \n+    if (function.get_definition ()->has_tail_expr ())\n+      ResolveExpr::go (function.get_definition ()->get_tail_expr ().get (),\n+\t\t       function.get_node_id ());\n+\n     resolver->get_name_scope ().pop ();\n     resolver->get_type_scope ().pop ();\n   }"}, {"sha": "29244a699975bd313a1bc42e5ee1fbee6e5854d2", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -32,9 +32,9 @@ namespace Resolver {\n class TypeCheckExpr : public TypeCheckBase\n {\n public:\n-  static TyTy::TyBase *Resolve (HIR::Expr *expr)\n+  static TyTy::TyBase *Resolve (HIR::Expr *expr, bool is_final_expr = false)\n   {\n-    TypeCheckExpr resolver;\n+    TypeCheckExpr resolver (is_final_expr);\n     expr->accept_vis (resolver);\n     if (resolver.infered != nullptr)\n       resolver.context->insert_type (expr->get_mappings ().get_hirid (),\n@@ -245,36 +245,59 @@ class TypeCheckExpr : public TypeCheckBase\n   {\n     TypeCheckExpr::Resolve (expr.get_if_condition ());\n     TypeCheckExpr::Resolve (expr.get_if_block ());\n+\n+    // if without else always resolves to unit type\n+    infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::IfExprConseqElse &expr)\n   {\n-    TypeCheckExpr::Resolve (expr.get_if_condition ());\n-    TypeCheckExpr::Resolve (expr.get_if_block ());\n-    TypeCheckExpr::Resolve (expr.get_else_block ());\n+    // this must combine to what the type is expected\n+    // this might be a parameter or the last expr in an if + else in a BlockExpr\n+    // then it must resolve to fn return type\n+    // else its a unit-type\n+    infered = is_final_expr\n+\t\t? context->peek_return_type ()\n+\t\t: new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+\n+    TypeCheckExpr::Resolve (expr.get_if_condition (), is_final_expr);\n+    auto if_blk_ty = TypeCheckExpr::Resolve (expr.get_if_block ());\n+    auto else_blk_ty = TypeCheckExpr::Resolve (expr.get_else_block ());\n+\n+    if (is_final_expr)\n+      {\n+\tinfered = infered->combine (if_blk_ty);\n+\tinfered = infered->combine (else_blk_ty);\n+      }\n   }\n \n   void visit (HIR::IfExprConseqIf &expr)\n   {\n     TypeCheckExpr::Resolve (expr.get_if_condition ());\n     TypeCheckExpr::Resolve (expr.get_if_block ());\n     TypeCheckExpr::Resolve (expr.get_conseq_if_expr ());\n+\n+    infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::BlockExpr &expr);\n \n   void visit (HIR::ArrayIndexExpr &expr)\n   {\n-    // check the index\n+    // FIXME this should be size type\n     TyTy::IntType size_ty (expr.get_index_expr ()->get_mappings ().get_hirid (),\n \t\t\t   TyTy::IntType::I32);\n     auto resolved\n       = size_ty.combine (TypeCheckExpr::Resolve (expr.get_index_expr ()));\n-    context->insert_type (expr.get_index_expr ()->get_mappings ().get_hirid (),\n-\t\t\t  resolved);\n+    rust_assert (resolved != nullptr);\n \n     expr.get_array_expr ()->accept_vis (*this);\n-    rust_assert (infered != nullptr);\n+    if (infered->get_kind () != TyTy::TypeKind::ARRAY)\n+      {\n+\trust_fatal_error (expr.get_array_expr ()->get_locus_slow (),\n+\t\t\t  \"expected an ArrayType for index expression\");\n+\treturn;\n+      }\n \n     // extract the element type out now from the base type\n     infered = TyTyExtractorArray::ExtractElementTypeFromArray (infered);\n@@ -318,12 +341,15 @@ class TypeCheckExpr : public TypeCheckBase\n   }\n \n private:\n-  TypeCheckExpr ()\n-    : TypeCheckBase (), infered (nullptr), infered_array_elems (nullptr)\n+  TypeCheckExpr (bool is_final_expr)\n+    : TypeCheckBase (), infered (nullptr), infered_array_elems (nullptr),\n+      is_final_expr (is_final_expr)\n   {}\n \n   TyTy::TyBase *infered;\n   TyTy::TyBase *infered_array_elems;\n+\n+  bool is_final_expr;\n };\n \n } // namespace Resolver"}, {"sha": "adf842c2b1747654cef16aeb25e090a0905fa068", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -72,25 +72,7 @@ class TypeCheckItem : public TypeCheckBase\n     ResolveFnType resolve_fn_type (fnType);\n     context->push_return_type (resolve_fn_type.go ());\n \n-    // walk statements to make sure they are all typed correctly and they match\n-    // up\n-    function.function_body->iterate_stmts ([&] (HIR::Stmt *s) mutable -> bool {\n-      TypeCheckStmt::Resolve (s);\n-      return true;\n-    });\n-\n-    // now that the stmts have been resolved we must resolve the block of locals\n-    // and make sure the variables have been resolved\n-    auto body_mappings = function.function_body->get_mappings ();\n-    Rib *rib = nullptr;\n-    if (!resolver->find_name_rib (body_mappings.get_nodeid (), &rib))\n-      {\n-\trust_fatal_error (function.get_locus (),\n-\t\t\t  \"failed to lookup locals per block\");\n-\treturn;\n-      }\n-\n-    TyTyResolver::Resolve (rib, mappings, resolver, context);\n+    TypeCheckExpr::Resolve (function.function_body.get ());\n \n     context->pop_return_type ();\n   }"}, {"sha": "bf754db87b4a828113a5967e235bdcdefb371235", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -30,27 +30,29 @@ namespace Resolver {\n class TypeCheckStmt : public TypeCheckBase\n {\n public:\n-  static void Resolve (HIR::Stmt *stmt)\n+  static TyTy::TyBase *Resolve (HIR::Stmt *stmt, bool is_final_stmt)\n   {\n-    TypeCheckStmt resolver;\n+    TypeCheckStmt resolver (is_final_stmt);\n     stmt->accept_vis (resolver);\n+    return resolver.infered;\n   }\n \n   void visit (HIR::ExprStmtWithBlock &stmt)\n   {\n-    TypeCheckExpr::Resolve (stmt.get_expr ());\n+    infered = TypeCheckExpr::Resolve (stmt.get_expr (), is_final_stmt);\n   }\n \n   void visit (HIR::ExprStmtWithoutBlock &stmt)\n   {\n-    TypeCheckExpr::Resolve (stmt.get_expr ());\n+    infered = TypeCheckExpr::Resolve (stmt.get_expr (), is_final_stmt);\n   }\n \n   void visit (HIR::LetStmt &stmt)\n   {\n     TyTy::TyBase *init_expr_ty = nullptr;\n     if (stmt.has_init_expr ())\n-      init_expr_ty = TypeCheckExpr::Resolve (stmt.get_init_expr ());\n+      init_expr_ty\n+\t= TypeCheckExpr::Resolve (stmt.get_init_expr (), is_final_stmt);\n \n     TyTy::TyBase *specified_ty = nullptr;\n     if (stmt.has_type ())\n@@ -94,7 +96,12 @@ class TypeCheckStmt : public TypeCheckBase\n   }\n \n private:\n-  TypeCheckStmt () : TypeCheckBase () {}\n+  TypeCheckStmt (bool is_final_stmt)\n+    : TypeCheckBase (), is_final_stmt (is_final_stmt)\n+  {}\n+\n+  TyTy::TyBase *infered;\n+  bool is_final_stmt;\n }; // namespace Resolver\n \n } // namespace Resolver"}, {"sha": "e68ba9a7a3f127772cf785b08d4285319c02e665", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -40,10 +40,44 @@ TypeResolution::Resolve (HIR::Crate &crate)\n void\n TypeCheckExpr::visit (HIR::BlockExpr &expr)\n {\n+  TyTy::TyBase *block_tyty\n+    = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+\n   expr.iterate_stmts ([&] (HIR::Stmt *s) mutable -> bool {\n-    TypeCheckStmt::Resolve (s);\n+    bool is_final_stmt = expr.is_final_stmt (s);\n+    bool is_final_expr = is_final_stmt && !expr.has_expr ();\n+\n+    auto infered = TypeCheckStmt::Resolve (s, is_final_stmt);\n+    if (is_final_expr)\n+      {\n+\tdelete block_tyty;\n+\tblock_tyty = infered;\n+      }\n+\n     return true;\n   });\n+\n+  if (expr.has_expr ())\n+    {\n+      auto tail_tyty = TypeCheckExpr::Resolve (expr.expr.get (), true);\n+\n+      delete block_tyty;\n+      block_tyty = tail_tyty;\n+    }\n+\n+  // now that the stmts have been resolved we must resolve the block of locals\n+  // and make sure the variables have been resolved\n+  auto body_mappings = expr.get_mappings ();\n+  Rib *rib = nullptr;\n+  if (!resolver->find_name_rib (body_mappings.get_nodeid (), &rib))\n+    {\n+      rust_fatal_error (expr.get_locus (), \"failed to lookup locals per block\");\n+      return;\n+    }\n+\n+  TyTyResolver::Resolve (rib, mappings, resolver, context);\n+\n+  infered = block_tyty;\n }\n \n // RUST_HIR_TYPE_CHECK_STRUCT_FIELD"}, {"sha": "e2678c281ae2cbdf7509d67e545388e336d3b1b8", "filename": "gcc/rust/typecheck/rust-tyty-resolver.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-resolver.h?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -73,8 +73,6 @@ class TyTyResolver\n \t\t\t\t\t\t d.parent, &hir_node_ref);\n \t      rust_assert (ok);\n \n-\t      printf (\"failed lets try [%u]\\n\", hir_node_ref);\n-\n \t      if (!context->lookup_type (hir_node_ref, &resolved))\n \t\t{\n \t\t  rust_fatal_error (\n@@ -102,10 +100,8 @@ class TyTyResolver\n \t\t\t\t &resolved_type);\n       rust_assert (ok);\n \n-      if (!resolved_type->is_unit ())\n-\t{\n-\t  return true;\n-\t}\n+      if (resolved_type->get_kind () != TyTy::TypeKind::INFER)\n+\treturn true;\n \n       auto resolved_tyty = resolved_type;\n       for (auto it : gathered_types)"}, {"sha": "46ba6336e285ba337502cdc5c1fb8427f4b91ca9", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 56, "deletions": 24, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -34,58 +34,83 @@ class BaseRules : public TyVisitor\n \n   virtual void visit (UnitType &type) override\n   {\n-    Location locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (locus, \"expected [%s] got [%s]\", base->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n+  }\n+\n+  virtual void visit (ADTType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n   }\n \n   virtual void visit (InferType &type) override\n   {\n-    Location locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (locus, \"expected [%s] got [%s]\", base->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n   }\n \n   virtual void visit (FnType &type) override\n   {\n-    Location locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (locus, \"expected [%s] got [%s]\", base->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n   }\n \n   virtual void visit (ParamType &type) override\n   {\n-    Location locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (locus, \"expected [%s] got [%s]\", base->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n   }\n \n   virtual void visit (ArrayType &type) override\n   {\n-    Location locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (locus, \"expected [%s] got [%s]\", base->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n   }\n \n   virtual void visit (BoolType &type) override\n   {\n-    Location locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (locus, \"expected [%s] got [%s]\", base->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n   }\n \n   virtual void visit (IntType &type) override\n   {\n-    Location locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (locus, \"expected [%s] got [%s]\", base->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n   }\n \n   virtual void visit (UintType &type) override\n   {\n-    Location locus = mappings->lookup_location (type.get_ref ());\n-    rust_error_at (locus, \"expected [%s] got [%s]\", base->as_string ().c_str (),\n-\t\t   type.as_string ().c_str ());\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location def_locus = mappings->lookup_location (base->get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   base->as_string ().c_str (), type.as_string ().c_str ());\n+    rust_fatal_error (def_locus, \"declared here\");\n   }\n \n protected:\n@@ -114,6 +139,11 @@ class InferRules : protected BaseRules\n \n   // we are an inference variable so this means we can take the other as the\n   // type\n+  virtual void visit (UnitType &type) override\n+  {\n+    resolved = new UnitType (type.get_ref ());\n+  }\n+\n   virtual void visit (BoolType &type) override\n   {\n     resolved = new BoolType (type.get_ref ());\n@@ -165,6 +195,8 @@ class UnitRules : protected BaseRules\n     return resolved;\n   }\n \n+  void visit (IntType &type) override { rust_assert (false); }\n+\n private:\n   UnitType *base;\n   TyBase *resolved;"}, {"sha": "c7c609e5489556b47c3f77e5b9d1c0a7e9b28472", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -49,7 +49,7 @@ class TyVisitor;\n class TyBase\n {\n public:\n-  ~TyBase () {}\n+  virtual ~TyBase () {}\n \n   HirId get_ref () const { return ref; }\n "}, {"sha": "ec6e2404333c444130c8c254231fa09d4b77bed4", "filename": "gcc/testsuite/rust.test/compilable/deadcode1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fdeadcode1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fdeadcode1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fdeadcode1.rs?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -0,0 +1,18 @@\n+fn test1() -> i32 {\n+    return 2;\n+    1\n+}\n+\n+fn test2(x: i32) -> i32 {\n+    if x > 1 {\n+        return 5;\n+    } else {\n+        return 0;\n+    }\n+    return 1;\n+}\n+\n+fn main() {\n+    let call1 = test1();\n+    let call2 = test2(2);\n+}"}, {"sha": "49457c682cc35ecac12cee6844d6f3d13ed8c29e", "filename": "gcc/testsuite/rust.test/compilable/implicit_returns1.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fimplicit_returns1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fimplicit_returns1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fimplicit_returns1.rs?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -0,0 +1,65 @@\n+fn test1() -> i32 {\n+    1\n+}\n+\n+fn test2() -> i32 {\n+    return 2;\n+}\n+\n+fn test3(x: i32) -> i32 {\n+    if x > 1 {\n+        5\n+    } else {\n+        0\n+    }\n+}\n+\n+fn test4(x: i32) -> i32 {\n+    if x > 1 {\n+        return 1;\n+    }\n+    0\n+}\n+\n+fn test5(x: i32) -> i32 {\n+    if x > 1 {\n+        if x == 5 {\n+            7\n+        } else {\n+            9\n+        }\n+    } else {\n+        0\n+    }\n+}\n+\n+fn test6(x: i32) -> i32 {\n+    if x > 1 {\n+        return 5;\n+    } else {\n+        return 0;\n+    }\n+}\n+\n+fn test7(x: i32) -> i32 {\n+    if x > 1 {\n+        return 5;\n+    } else {\n+        return 0;\n+    }\n+}\n+\n+fn test8() -> i32 {\n+    return 1;\n+}\n+\n+fn main() {\n+    let call1 = test1();\n+    let call2 = test2();\n+    let call3 = test3(3);\n+    let call4 = test4(4);\n+    let call5 = test5(5);\n+    let call6 = test6(6);\n+    let call7 = test7(7);\n+    let call8 = test8();\n+}"}, {"sha": "500d007307546d0fbf9ea6d12202f5b236e0c23b", "filename": "gcc/testsuite/rust.test/fail_compilation/missing_return1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fmissing_return1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e0189ed288223f8b376eedd286f5bdff5b35698/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fmissing_return1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fmissing_return1.rs?ref=4e0189ed288223f8b376eedd286f5bdff5b35698", "patch": "@@ -0,0 +1,5 @@\n+fn test1() -> i32 {}\n+\n+fn main() {\n+    let call1 = test1();\n+}"}]}