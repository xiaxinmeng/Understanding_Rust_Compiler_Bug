{"sha": "0ad84f34fc91885b187c302c8abf1dd6bae4a671", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFkODRmMzRmYzkxODg1YjE4N2MzMDJjOGFiZjFkZDZiYWU0YTY3MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-06-21T06:59:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-06-21T06:59:33Z"}, "message": "re PR tree-optimization/71588 (ICE on valid code at -O2 and -O3 on x86_64-linux-gnu: in execute_todo, at passes.c:2009)\n\n\tPR tree-optimization/71588\n\t* tree-ssa-strlen.c (valid_builtin_call): New function.\n\t(adjust_last_stmt, handle_builtin_memset, strlen_optimize_stmt): Use\n\tit.\n\n\t* gcc.dg/pr71558.c: New test.\n\nFrom-SVN: r237628", "tree": {"sha": "e44c3058192b42758cc768621ec38577922dc5f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e44c3058192b42758cc768621ec38577922dc5f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ad84f34fc91885b187c302c8abf1dd6bae4a671", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad84f34fc91885b187c302c8abf1dd6bae4a671", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ad84f34fc91885b187c302c8abf1dd6bae4a671", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad84f34fc91885b187c302c8abf1dd6bae4a671/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e71e8d944ff47afe91ed2610d71b1a11f85f93c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e71e8d944ff47afe91ed2610d71b1a11f85f93c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e71e8d944ff47afe91ed2610d71b1a11f85f93c5"}], "stats": {"total": 95, "additions": 92, "deletions": 3}, "files": [{"sha": "14b8030ec6963bae1771983d96d5eba59fb4dd2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad84f34fc91885b187c302c8abf1dd6bae4a671/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad84f34fc91885b187c302c8abf1dd6bae4a671/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ad84f34fc91885b187c302c8abf1dd6bae4a671", "patch": "@@ -1,3 +1,10 @@\n+2016-06-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/71588\n+\t* tree-ssa-strlen.c (valid_builtin_call): New function.\n+\t(adjust_last_stmt, handle_builtin_memset, strlen_optimize_stmt): Use\n+\tit.\n+\n 2016-06-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/71581"}, {"sha": "0f6fe9467324c1ba54b00f8de05e0ffef9f6d646", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad84f34fc91885b187c302c8abf1dd6bae4a671/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad84f34fc91885b187c302c8abf1dd6bae4a671/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ad84f34fc91885b187c302c8abf1dd6bae4a671", "patch": "@@ -1,3 +1,8 @@\n+2016-06-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/71588\n+\t* gcc.dg/pr71558.c: New test.\n+\n 2016-06-21  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \t* c-c++-common/pr68657-1.c: Require ptr32plus support."}, {"sha": "33a648e108c751a5a9acb0c3d0f45776dad93305", "filename": "gcc/testsuite/gcc.dg/pr71558.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad84f34fc91885b187c302c8abf1dd6bae4a671/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71558.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad84f34fc91885b187c302c8abf1dd6bae4a671/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71558.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71558.c?ref=0ad84f34fc91885b187c302c8abf1dd6bae4a671", "patch": "@@ -0,0 +1,17 @@\n+/* PR tree-optimization/71588 */\n+\n+/* strcpy must not be pure, but make sure we don't ICE even when\n+   it is declared incorrectly.  */\n+char *strcpy (char *, const char *) __attribute__ ((__pure__));\n+__SIZE_TYPE__ strlen (const char *);\n+void *malloc (__SIZE_TYPE__);\n+\n+char a[20];\n+\n+char *\n+foo (void)\n+{\n+  __SIZE_TYPE__ b = strlen (a);\n+  char *c = malloc (b);\n+  return strcpy (c, a);\n+}"}, {"sha": "f306a9c9f3dd707556337ccf3bd2509ddc8cd7f4", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 63, "deletions": 3, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ad84f34fc91885b187c302c8abf1dd6bae4a671/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ad84f34fc91885b187c302c8abf1dd6bae4a671/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=0ad84f34fc91885b187c302c8abf1dd6bae4a671", "patch": "@@ -860,6 +860,66 @@ find_equal_ptrs (tree ptr, int idx)\n     }\n }\n \n+/* Return true if STMT is a call to a builtin function with the right\n+   arguments and attributes that should be considered for optimization\n+   by this pass.  */\n+\n+static bool\n+valid_builtin_call (gimple *stmt)\n+{\n+  if (!gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))\n+    return false;\n+\n+  tree callee = gimple_call_fndecl (stmt);\n+  switch (DECL_FUNCTION_CODE (callee))\n+    {\n+    case BUILT_IN_MEMCMP:\n+    case BUILT_IN_MEMCMP_EQ:\n+    case BUILT_IN_STRCHR:\n+    case BUILT_IN_STRCHR_CHKP:\n+    case BUILT_IN_STRLEN:\n+    case BUILT_IN_STRLEN_CHKP:\n+      /* The above functions should be pure.  Punt if they aren't.  */\n+      if (gimple_vdef (stmt) || gimple_vuse (stmt) == NULL_TREE)\n+\treturn false;\n+      break;\n+\n+    case BUILT_IN_CALLOC:\n+    case BUILT_IN_MALLOC:\n+    case BUILT_IN_MEMCPY:\n+    case BUILT_IN_MEMCPY_CHK:\n+    case BUILT_IN_MEMCPY_CHKP:\n+    case BUILT_IN_MEMCPY_CHK_CHKP:\n+    case BUILT_IN_MEMPCPY:\n+    case BUILT_IN_MEMPCPY_CHK:\n+    case BUILT_IN_MEMPCPY_CHKP:\n+    case BUILT_IN_MEMPCPY_CHK_CHKP:\n+    case BUILT_IN_MEMSET:\n+    case BUILT_IN_STPCPY:\n+    case BUILT_IN_STPCPY_CHK:\n+    case BUILT_IN_STPCPY_CHKP:\n+    case BUILT_IN_STPCPY_CHK_CHKP:\n+    case BUILT_IN_STRCAT:\n+    case BUILT_IN_STRCAT_CHK:\n+    case BUILT_IN_STRCAT_CHKP:\n+    case BUILT_IN_STRCAT_CHK_CHKP:\n+    case BUILT_IN_STRCPY:\n+    case BUILT_IN_STRCPY_CHK:\n+    case BUILT_IN_STRCPY_CHKP:\n+    case BUILT_IN_STRCPY_CHK_CHKP:\n+      /* The above functions should be neither const nor pure.  Punt if they\n+\t aren't.  */\n+      if (gimple_vdef (stmt) == NULL_TREE || gimple_vuse (stmt) == NULL_TREE)\n+\treturn false;\n+      break;\n+\n+    default:\n+      break;\n+    }\n+\n+  return true;\n+}\n+\n /* If the last .MEM setter statement before STMT is\n    memcpy (x, y, strlen (y) + 1), the only .MEM use of it is STMT\n    and STMT is known to overwrite x[strlen (x)], adjust the last memcpy to\n@@ -935,7 +995,7 @@ adjust_last_stmt (strinfo *si, gimple *stmt, bool is_strcat)\n       return;\n     }\n \n-  if (!gimple_call_builtin_p (last.stmt, BUILT_IN_NORMAL))\n+  if (!valid_builtin_call (last.stmt))\n     return;\n \n   callee = gimple_call_fndecl (last.stmt);\n@@ -1811,7 +1871,7 @@ handle_builtin_memset (gimple_stmt_iterator *gsi)\n   if (!stmt1 || !is_gimple_call (stmt1))\n     return true;\n   tree callee1 = gimple_call_fndecl (stmt1);\n-  if (!gimple_call_builtin_p (stmt1, BUILT_IN_NORMAL))\n+  if (!valid_builtin_call (stmt1))\n     return true;\n   enum built_in_function code1 = DECL_FUNCTION_CODE (callee1);\n   tree size = gimple_call_arg (stmt2, 2);\n@@ -2140,7 +2200,7 @@ strlen_optimize_stmt (gimple_stmt_iterator *gsi)\n   if (is_gimple_call (stmt))\n     {\n       tree callee = gimple_call_fndecl (stmt);\n-      if (gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))\n+      if (valid_builtin_call (stmt))\n \tswitch (DECL_FUNCTION_CODE (callee))\n \t  {\n \t  case BUILT_IN_STRLEN:"}]}