{"sha": "dcc74ead1e18da4a7f096ee98424452bc13706da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNjNzRlYWQxZTE4ZGE0YTdmMDk2ZWU5ODQyNDQ1MmJjMTM3MDZkYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-08-05T14:23:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-08-05T14:23:42Z"}, "message": "re PR middle-end/66311 (Problems with some integer(16) values)\n\ngcc/\n\tPR middle-end/66311\n\t* wide-int.cc (wi::from_mpz): Make sure that absolute mpz value\n\tis zero- rather than sign-extended.\n\ngcc/testsuite/\n2015-08-05  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n\n\tPR middle-end/66311\n\t* gfortran.dg/pr66311.f90: New file.\n\nFrom-SVN: r226632", "tree": {"sha": "c75a92c189139311327aecf6784d8ccfed383eac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c75a92c189139311327aecf6784d8ccfed383eac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcc74ead1e18da4a7f096ee98424452bc13706da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcc74ead1e18da4a7f096ee98424452bc13706da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcc74ead1e18da4a7f096ee98424452bc13706da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcc74ead1e18da4a7f096ee98424452bc13706da/comments", "author": null, "committer": null, "parents": [{"sha": "96b4d193052a70096edb80ed5315b8da6b53e89f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96b4d193052a70096edb80ed5315b8da6b53e89f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96b4d193052a70096edb80ed5315b8da6b53e89f"}], "stats": {"total": 84, "additions": 81, "deletions": 3}, "files": [{"sha": "7643309d29b74a04414cbd1132fe195d860ecc62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc74ead1e18da4a7f096ee98424452bc13706da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc74ead1e18da4a7f096ee98424452bc13706da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcc74ead1e18da4a7f096ee98424452bc13706da", "patch": "@@ -1,3 +1,9 @@\n+2015-08-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/66311\n+\t* wide-int.cc (wi::from_mpz): Make sure that absolute mpz value\n+\tis zero- rather than sign-extended.\n+\n 2015-08-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* target-insns.def (can_extend): Delete."}, {"sha": "e81d1df5d5b0ebcf16d7241700ba877a3c5c743a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc74ead1e18da4a7f096ee98424452bc13706da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc74ead1e18da4a7f096ee98424452bc13706da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dcc74ead1e18da4a7f096ee98424452bc13706da", "patch": "@@ -1,3 +1,8 @@\n+2015-08-05  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR middle-end/66311\n+\t* gfortran.dg/pr66311.f90: New file.\n+\n 2015-08-05  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/67121"}, {"sha": "dc40cb6b72799340e8452b3d5b8ebf5b48cc1ecc", "filename": "gcc/testsuite/gfortran.dg/pr66311.f90", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc74ead1e18da4a7f096ee98424452bc13706da/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr66311.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc74ead1e18da4a7f096ee98424452bc13706da/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr66311.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr66311.f90?ref=dcc74ead1e18da4a7f096ee98424452bc13706da", "patch": "@@ -0,0 +1,60 @@\n+! { dg-do run }\n+! { dg-additional-options \"-fno-range-check -w\" }\n+!\n+! Check that we can print large constants\n+!\n+! \"-fno-range-check -w\" is used so the testcase compiles even with targets\n+! that don't support large integer kinds.\n+\n+program test\n+  use iso_fortran_env, only : ikinds => integer_kinds\n+  implicit none\n+\n+  ! Largest integer kind\n+  integer, parameter :: k = ikinds(size(ikinds))\n+  integer, parameter :: hk = k / 2\n+\n+  if (k <= 8) stop\n+\n+  call check(9000000000000000000_k, \"9000000000000000000\")\n+  call check(90000000000000000000_k, \"90000000000000000000\")\n+  call check(int(huge(1_hk), kind=k), \"9223372036854775807\")\n+  call check(2_k**63, \"9223372036854775808\")\n+  call check(10000000000000000000_k, \"10000000000000000000\")\n+  call check(18446744065119617024_k, \"18446744065119617024\")\n+  call check(2_k**64 - 1, \"18446744073709551615\")\n+  call check(2_k**64, \"18446744073709551616\")\n+  call check(20000000000000000000_k, \"20000000000000000000\")\n+  call check(huge(0_k), \"170141183460469231731687303715884105727\")\n+  call check(huge(0_k)-1, \"170141183460469231731687303715884105726\")\n+\n+  call check(-9000000000000000000_k, \"-9000000000000000000\")\n+  call check(-90000000000000000000_k, \"-90000000000000000000\")\n+  call check(-int(huge(1_hk), kind=k), \"-9223372036854775807\")\n+  call check(-2_k**63, \"-9223372036854775808\")\n+  call check(-10000000000000000000_k, \"-10000000000000000000\")\n+  call check(-18446744065119617024_k, \"-18446744065119617024\")\n+  call check(-(2_k**64 - 1), \"-18446744073709551615\")\n+  call check(-2_k**64, \"-18446744073709551616\")\n+  call check(-20000000000000000000_k, \"-20000000000000000000\")\n+  call check(-huge(0_k), \"-170141183460469231731687303715884105727\")\n+  call check(-(huge(0_k)-1), \"-170141183460469231731687303715884105726\")\n+  call check(-huge(0_k)-1, \"-170141183460469231731687303715884105728\")\n+\n+  call check(2_k * huge(1_hk), \"18446744073709551614\")\n+  call check((-2_k) * huge(1_hk), \"-18446744073709551614\")\n+\n+contains\n+\n+  subroutine check (i, str)\n+    implicit none\n+    integer(kind=k), intent(in), value :: i\n+    character(len=*), intent(in) :: str\n+\n+    character(len=100) :: buffer\n+    write(buffer,*) i\n+    if (adjustl(buffer) /= adjustl(str)) call abort\n+  end subroutine\n+\n+end\n+"}, {"sha": "9a93660defc719010928e1507f1a0453d6d808ca", "filename": "gcc/wide-int.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc74ead1e18da4a7f096ee98424452bc13706da/gcc%2Fwide-int.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc74ead1e18da4a7f096ee98424452bc13706da/gcc%2Fwide-int.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.cc?ref=dcc74ead1e18da4a7f096ee98424452bc13706da", "patch": "@@ -252,13 +252,15 @@ wi::from_mpz (const_tree type, mpz_t x, bool wrap)\n     }\n \n   /* Determine the number of unsigned HOST_WIDE_INTs that are required\n-     for representing the value.  The code to calculate count is\n+     for representing the absolute value.  The code to calculate count is\n      extracted from the GMP manual, section \"Integer Import and Export\":\n      http://gmplib.org/manual/Integer-Import-and-Export.html  */\n   numb = CHAR_BIT * sizeof (HOST_WIDE_INT);\n   count = (mpz_sizeinbase (x, 2) + numb - 1) / numb;\n   HOST_WIDE_INT *val = res.write_val ();\n-  /* Write directly to the wide_int storage if possible, otherwise leave\n+  /* Read the absolute value.\n+\n+     Write directly to the wide_int storage if possible, otherwise leave\n      GMP to allocate the memory for us.  It might be slightly more efficient\n      to use mpz_tdiv_r_2exp for the latter case, but the situation is\n      pathological and it seems safer to operate on the original mpz value\n@@ -276,7 +278,12 @@ wi::from_mpz (const_tree type, mpz_t x, bool wrap)\n       memcpy (val, valres, count * sizeof (HOST_WIDE_INT));\n       free (valres);\n     }\n-  res.set_len (canonize (val, count, prec));\n+  /* Zero-extend the absolute value to PREC bits.  */\n+  if (count < BLOCKS_NEEDED (prec) && val[count - 1] < 0)\n+    val[count++] = 0;\n+  else\n+    count = canonize (val, count, prec);\n+  res.set_len (count);\n \n   if (mpz_sgn (x) < 0)\n     res = -res;"}]}