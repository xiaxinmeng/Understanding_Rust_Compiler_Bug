{"sha": "5283d1ecc4ed755bca87e31afd0deaf8af17591a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI4M2QxZWNjNGVkNzU1YmNhODdlMzFhZmQwZGVhZjhhZjE3NTkxYQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-04-15T18:43:32Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-04-15T18:43:32Z"}, "message": "Fix fdump-passes\n\n2015-04-15  Tom de Vries  <tom@codesourcery.com>\n\n\tPR other/65487\n\t* function.c (push_dummy_function): New function.\n\t(init_dummy_function_start): Use push_dummy_function.\n\t(pop_dummy_function): New function.  Factored out of ...\n\t(expand_dummy_function_end): ... here.\n\t* function.h (push_dummy_function, pop_dummy_function): Declare.\n\t* passes.c (pass_manager::dump_passes): Use push_dummy_function and\n\tpop_dummy_function.\n\t* tree-chkp.c (chkp_gate): Handle cgraph_node::get (cfun->decl) == NULL.\n\nFrom-SVN: r222129", "tree": {"sha": "4cffd5a80e733e7a6761c0ee546bd4e5bf937ede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cffd5a80e733e7a6761c0ee546bd4e5bf937ede"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5283d1ecc4ed755bca87e31afd0deaf8af17591a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5283d1ecc4ed755bca87e31afd0deaf8af17591a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5283d1ecc4ed755bca87e31afd0deaf8af17591a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5283d1ecc4ed755bca87e31afd0deaf8af17591a/comments", "author": null, "committer": null, "parents": [{"sha": "3a1351b9daff403b268b4e08313bcbafe476be33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a1351b9daff403b268b4e08313bcbafe476be33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a1351b9daff403b268b4e08313bcbafe476be33"}], "stats": {"total": 74, "additions": 52, "deletions": 22}, "files": [{"sha": "6fc26196636d7f2babfddf98a6208e3093d2fbb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5283d1ecc4ed755bca87e31afd0deaf8af17591a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5283d1ecc4ed755bca87e31afd0deaf8af17591a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5283d1ecc4ed755bca87e31afd0deaf8af17591a", "patch": "@@ -1,3 +1,15 @@\n+2015-04-15  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR other/65487\n+\t* function.c (push_dummy_function): New function.\n+\t(init_dummy_function_start): Use push_dummy_function.\n+\t(pop_dummy_function): New function.  Factored out of ...\n+\t(expand_dummy_function_end): ... here.\n+\t* function.h (push_dummy_function, pop_dummy_function): Declare.\n+\t* passes.c (pass_manager::dump_passes): Use push_dummy_function and\n+\tpop_dummy_function.\n+\t* tree-chkp.c (chkp_gate): Handle cgraph_node::get (cfun->decl) == NULL.\n+\n 2015-04-15  Jeff Law  <law@redhat.com>\n \n \tPR rtl-optimization/42522"}, {"sha": "7d4df92f40e051fb0ed79872f0276effb7857e08", "filename": "gcc/function.c", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5283d1ecc4ed755bca87e31afd0deaf8af17591a/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5283d1ecc4ed755bca87e31afd0deaf8af17591a/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=5283d1ecc4ed755bca87e31afd0deaf8af17591a", "patch": "@@ -4862,6 +4862,29 @@ prepare_function_start (void)\n   frame_pointer_needed = 0;\n }\n \n+void\n+push_dummy_function (bool with_decl)\n+{\n+  tree fn_decl, fn_type, fn_result_decl;\n+\n+  gcc_assert (!in_dummy_function);\n+  in_dummy_function = true;\n+\n+  if (with_decl)\n+    {\n+      fn_type = build_function_type_list (void_type_node, NULL_TREE);\n+      fn_decl = build_decl (UNKNOWN_LOCATION, FUNCTION_DECL, NULL_TREE,\n+\t\t\t    fn_type);\n+      fn_result_decl = build_decl (UNKNOWN_LOCATION, RESULT_DECL,\n+\t\t\t\t\t NULL_TREE, void_type_node);\n+      DECL_RESULT (fn_decl) = fn_result_decl;\n+    }\n+  else\n+    fn_decl = NULL_TREE;\n+\n+  push_struct_function (fn_decl);\n+}\n+\n /* Initialize the rtl expansion mechanism so that we can do simple things\n    like generate sequences.  This is used to provide a context during global\n    initialization of some passes.  You must call expand_dummy_function_end\n@@ -4870,9 +4893,7 @@ prepare_function_start (void)\n void\n init_dummy_function_start (void)\n {\n-  gcc_assert (!in_dummy_function);\n-  in_dummy_function = true;\n-  push_struct_function (NULL_TREE);\n+  push_dummy_function (false);\n   prepare_function_start ();\n }\n \n@@ -5144,6 +5165,13 @@ expand_function_start (tree subr)\n     stack_check_probe_note = emit_note (NOTE_INSN_DELETED);\n }\n \f\n+void\n+pop_dummy_function (void)\n+{\n+  pop_cfun ();\n+  in_dummy_function = false;\n+}\n+\n /* Undo the effects of init_dummy_function_start.  */\n void\n expand_dummy_function_end (void)\n@@ -5159,8 +5187,7 @@ expand_dummy_function_end (void)\n \n   free_after_parsing (cfun);\n   free_after_compilation (cfun);\n-  pop_cfun ();\n-  in_dummy_function = false;\n+  pop_dummy_function ();\n }\n \n /* Helper for diddle_return_value.  */"}, {"sha": "fc12f26462105fb9f4baeb307b6ddcdbfded6185", "filename": "gcc/function.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5283d1ecc4ed755bca87e31afd0deaf8af17591a/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5283d1ecc4ed755bca87e31afd0deaf8af17591a/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=5283d1ecc4ed755bca87e31afd0deaf8af17591a", "patch": "@@ -896,6 +896,8 @@ extern int get_next_funcdef_no (void);\n extern int get_last_funcdef_no (void);\n extern void allocate_struct_function (tree, bool);\n extern void push_struct_function (tree fndecl);\n+extern void push_dummy_function (bool);\n+extern void pop_dummy_function (void);\n extern void init_dummy_function_start (void);\n extern void init_function_start (tree);\n extern void stack_protect_epilogue (void);"}, {"sha": "04ff04247adc45e2005eb36691bb3220508b1610", "filename": "gcc/passes.c", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5283d1ecc4ed755bca87e31afd0deaf8af17591a/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5283d1ecc4ed755bca87e31afd0deaf8af17591a/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=5283d1ecc4ed755bca87e31afd0deaf8af17591a", "patch": "@@ -946,32 +946,19 @@ dump_passes (void)\n void\n pass_manager::dump_passes () const\n {\n-  struct cgraph_node *n, *node = NULL;\n+  push_dummy_function (true);\n \n   create_pass_tab ();\n \n-  FOR_EACH_FUNCTION (n)\n-    if (DECL_STRUCT_FUNCTION (n->decl))\n-      {\n-\tnode = n;\n-\tbreak;\n-      }\n-\n-  if (!node)\n-    return;\n-\n-  push_cfun (DECL_STRUCT_FUNCTION (node->decl));\n-\n   dump_pass_list (all_lowering_passes, 1);\n   dump_pass_list (all_small_ipa_passes, 1);\n   dump_pass_list (all_regular_ipa_passes, 1);\n   dump_pass_list (all_late_ipa_passes, 1);\n   dump_pass_list (all_passes, 1);\n \n-  pop_cfun ();\n+  pop_dummy_function ();\n }\n \n-\n /* Returns the pass with NAME.  */\n \n static opt_pass *"}, {"sha": "ebb9a836e5e7883567d3d5fb60dccc39ad0d8b98", "filename": "gcc/tree-chkp.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5283d1ecc4ed755bca87e31afd0deaf8af17591a/gcc%2Ftree-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5283d1ecc4ed755bca87e31afd0deaf8af17591a/gcc%2Ftree-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp.c?ref=5283d1ecc4ed755bca87e31afd0deaf8af17591a", "patch": "@@ -4330,8 +4330,10 @@ chkp_execute (void)\n static bool\n chkp_gate (void)\n {\n-  return cgraph_node::get (cfun->decl)->instrumentation_clone\n-    || lookup_attribute (\"chkp ctor\", DECL_ATTRIBUTES (cfun->decl));\n+  cgraph_node *node = cgraph_node::get (cfun->decl);\n+  return ((node != NULL\n+\t   && node->instrumentation_clone)\n+\t   || lookup_attribute (\"chkp ctor\", DECL_ATTRIBUTES (cfun->decl)));\n }\n \n namespace {"}]}