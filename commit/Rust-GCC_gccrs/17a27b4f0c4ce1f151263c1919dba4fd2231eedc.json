{"sha": "17a27b4f0c4ce1f151263c1919dba4fd2231eedc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdhMjdiNGYwYzRjZTFmMTUxMjYzYzE5MTlkYmE0ZmQyMjMxZWVkYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-10-10T05:02:54Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-10-10T05:02:54Z"}, "message": "re PR c++/17867 (\"void\" instead of class name in error message)\n\n\tPR c++/17867\n\t* error.c (dump_expr): Correct handling of AGGR_INIT_EXPRs using a\n\tconstructor.\n\n\tPR c++/17670\n\t* init.c (build_new): Correct comments.\n\t* parser.c (cp_parser_new_expression): Use NULL_TREE for nelts in\n\tthe non-array case.\n\n\tPR c++/17821\n\t* parser.c (cp_parser_postfix_dot_deref_expression): If the\n\tpseduo-destructor-name production does not work, fall back to the\n\tordinary production.\n\n\tPR c++/17826\n\t* tree.c (cp_tree_equal): Handle a BASELINK.\n\n\tPR c++/17687\n\t* g++.dg/parse/error19.C: New test.\n\n\tPR c++/17670\n\t* g++.dg/init/new11.C: New test.\n\n\tPR c++/17821\n\t* g++.dg/parse/error20.C: New test.\n\n\tPR c++/17826\n\t* g++.dg/template/crash24.C: New test.\n\nFrom-SVN: r88836", "tree": {"sha": "c79be0800daaa4e6c1647924399c5e22fb0b7902", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c79be0800daaa4e6c1647924399c5e22fb0b7902"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17a27b4f0c4ce1f151263c1919dba4fd2231eedc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a27b4f0c4ce1f151263c1919dba4fd2231eedc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17a27b4f0c4ce1f151263c1919dba4fd2231eedc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/comments", "author": null, "committer": null, "parents": [{"sha": "c69c9b36a97fddbde2112a5f8d50a4aabe13a19a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c69c9b36a97fddbde2112a5f8d50a4aabe13a19a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c69c9b36a97fddbde2112a5f8d50a4aabe13a19a"}], "stats": {"total": 184, "additions": 140, "deletions": 44}, "files": [{"sha": "6084f5175de9ec4c54ddd1badbc4bd6d78522df4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=17a27b4f0c4ce1f151263c1919dba4fd2231eedc", "patch": "@@ -1,5 +1,22 @@\n 2004-10-09  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/17867\n+\t* error.c (dump_expr): Correct handling of AGGR_INIT_EXPRs using a\n+\tconstructor.\n+\n+\tPR c++/17670\n+\t* init.c (build_new): Correct comments.\n+\t* parser.c (cp_parser_new_expression): Use NULL_TREE for nelts in\n+\tthe non-array case.\n+\n+\tPR c++/17821\n+\t* parser.c (cp_parser_postfix_dot_deref_expression): If the\n+\tpseduo-destructor-name production does not work, fall back to the\n+\tordinary production.\n+\n+\tPR c++/17826\n+\t* tree.c (cp_tree_equal): Handle a BASELINK.\n+\n \tPR c++/17524\n \t* cp-tree.h (check_var_type): New function.\n \t* decl.c (check_var_type): New function, split out from ..."}, {"sha": "af973d60a2c3ba85752aacbba8e66ebbed45e776", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=17a27b4f0c4ce1f151263c1919dba4fd2231eedc", "patch": "@@ -1343,7 +1343,7 @@ dump_expr (tree t, int flags)\n \tif (fn && TREE_CODE (fn) == FUNCTION_DECL)\n \t  {\n \t    if (DECL_CONSTRUCTOR_P (fn))\n-\t      pp_cxx_tree_identifier (cxx_pp, TYPE_IDENTIFIER (TREE_TYPE (t)));\n+\t      dump_type (DECL_CONTEXT (fn), flags);\n \t    else\n \t      dump_decl (fn, 0);\n \t  }"}, {"sha": "2d04334e153f79bbbd68481f39afa5bca28493f5", "filename": "gcc/cp/init.c", "status": "modified", "additions": 8, "deletions": 25, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=17a27b4f0c4ce1f151263c1919dba4fd2231eedc", "patch": "@@ -1606,31 +1606,14 @@ build_builtin_delete_call (tree addr)\n   return build_call (global_delete_fndecl, build_tree_list (NULL_TREE, addr));\n }\n \f\n-/* Generate a C++ \"new\" expression. DECL is either a TREE_LIST\n-   (which needs to go through some sort of groktypename) or it\n-   is the name of the class we are newing. INIT is an initialization value.\n-   It is either an EXPRLIST, an EXPR_NO_COMMAS, or something in braces.\n-   If INIT is void_type_node, it means do *not* call a constructor\n-   for this instance.\n-\n-   For types with constructors, the data returned is initialized\n-   by the appropriate constructor.\n-\n-   Whether the type has a constructor or not, if it has a pointer\n-   to a virtual function table, then that pointer is set up\n-   here.\n-\n-   Unless I am mistaken, a call to new () will return initialized\n-   data regardless of whether the constructor itself is private or\n-   not.  NOPE; new fails if the constructor is private (jcm).\n-\n-   Note that build_new does nothing to assure that any special\n-   alignment requirements of the type are met.  Rather, it leaves\n-   it up to malloc to do the right thing.  Otherwise, folding to\n-   the right alignment cal cause problems if the user tries to later\n-   free the memory returned by `new'.\n-\n-   PLACEMENT is the `placement' list for user-defined operator new ().  */\n+/* Generate a representation for a C++ \"new\" expression.  PLACEMENT is\n+   a TREE_LIST of placement-new arguments (or NULL_TREE if none).  If\n+   NELTS is NULL, TYPE is the type of the storage to be allocated.  If\n+   NELTS is not NULL, then this is an array-new allocation; TYPE is\n+   the type of the elements in the array and NELTS is the number of\n+   elements in the array.  INIT, if non-NULL, is the initializer for\n+   the new object.  If USE_GLOBAL_NEW is true, then the user\n+   explicitly wrote \"::new\" rather than just \"new\".  */\n \n tree\n build_new (tree placement, tree type, tree nelts, tree init, "}, {"sha": "7fb9d9631fa6eb7626e0eab855b93cc1daea3823", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=17a27b4f0c4ce1f151263c1919dba4fd2231eedc", "patch": "@@ -4274,6 +4274,7 @@ cp_parser_postfix_dot_deref_expression (cp_parser *parser,\n   tree name;\n   bool dependent_p;\n   bool template_p;\n+  bool pseudo_destructor_p;\n   tree scope = NULL_TREE;\n \n   /* If this is a `->' operator, dereference the pointer.  */\n@@ -4315,11 +4316,34 @@ cp_parser_postfix_dot_deref_expression (cp_parser *parser,\n \tpostfix_expression = error_mark_node;\n     }\n \n-  /* If the SCOPE is not a scalar type, we are looking at an\n-     ordinary class member access expression, rather than a\n-     pseudo-destructor-name.  */\n-  if (!scope || !SCALAR_TYPE_P (scope))\n+  /* Assume this expression is not a pseudo-destructor access.  */\n+  pseudo_destructor_p = false;\n+\n+  /* If the SCOPE is a scalar type, then, if this is a valid program,\n+     we must be looking at a pseudo-destructor-name.  */\n+  if (scope && SCALAR_TYPE_P (scope))\n     {\n+      tree s;\n+      tree type;\n+\n+      cp_parser_parse_tentatively (parser);\n+      /* Parse the pseudo-destructor-name.  */\n+      s = NULL_TREE;\n+      cp_parser_pseudo_destructor_name (parser, &s, &type);\n+      if (cp_parser_parse_definitely (parser))\n+\t{\n+\t  pseudo_destructor_p = true;\n+\t  postfix_expression\n+\t    = finish_pseudo_destructor_expr (postfix_expression,\n+\t\t\t\t\t     s, TREE_TYPE (type));\n+\t}\n+    }\n+\n+  if (!pseudo_destructor_p)\n+    {\n+      /* If the SCOPE is not a scalar type, we are looking at an\n+\t ordinary class member access expression, rather than a\n+\t pseudo-destructor-name.  */\n       template_p = cp_parser_optional_template_keyword (parser);\n       /* Parse the id-expression.  */\n       name = cp_parser_id_expression (parser, template_p,\n@@ -4354,19 +4378,6 @@ cp_parser_postfix_dot_deref_expression (cp_parser *parser,\n       postfix_expression\n \t= finish_class_member_access_expr (postfix_expression, name);\n     }\n-  /* Otherwise, try the pseudo-destructor-name production.  */\n-  else\n-    {\n-      tree s = NULL_TREE;\n-      tree type;\n-\n-      /* Parse the pseudo-destructor-name.  */\n-      cp_parser_pseudo_destructor_name (parser, &s, &type);\n-      /* Form the call.  */\n-      postfix_expression\n-\t= finish_pseudo_destructor_expr (postfix_expression,\n-\t\t\t\t\t s, TREE_TYPE (type));\n-    }\n \n   /* We no longer need to look up names in the scope of the object on\n      the left-hand side of the `.' or `->' operator.  */\n@@ -4862,7 +4873,7 @@ cp_parser_new_expression (cp_parser* parser)\n \t  inform (\"try removing the parentheses around the type-id\");\n \t  cp_parser_direct_new_declarator (parser);\n \t}\n-      nelts = integer_one_node;\n+      nelts = NULL_TREE;\n     }\n   /* Otherwise, there must be a new-type-id.  */\n   else"}, {"sha": "a4b7cf9c0d4f0a26dd846a053322cf144bbfee48", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=17a27b4f0c4ce1f151263c1919dba4fd2231eedc", "patch": "@@ -1500,6 +1500,12 @@ cp_tree_equal (tree t1, tree t2)\n     case IDENTIFIER_NODE:\n       return false;\n \n+    case BASELINK:\n+      return (BASELINK_BINFO (t1) == BASELINK_BINFO (t2)\n+\t      && BASELINK_ACCESS_BINFO (t1) == BASELINK_ACCESS_BINFO (t2)\n+\t      && cp_tree_equal (BASELINK_FUNCTIONS (t1),\n+\t\t\t\tBASELINK_FUNCTIONS (t2)));\n+\n     case TEMPLATE_PARM_INDEX:\n       return (TEMPLATE_PARM_IDX (t1) == TEMPLATE_PARM_IDX (t2)\n \t      && TEMPLATE_PARM_LEVEL (t1) == TEMPLATE_PARM_LEVEL (t2)"}, {"sha": "2c476166b4c1defbfb6bc57f8db503ad55284c84", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17a27b4f0c4ce1f151263c1919dba4fd2231eedc", "patch": "@@ -1,3 +1,17 @@\n+2004-10-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/17687\n+\t* g++.dg/parse/error19.C: New test.\n+\n+\tPR c++/17670\n+\t* g++.dg/init/new11.C: New test.\n+\n+\tPR c++/17821\n+\t* g++.dg/parse/error20.C: New test.\n+\n+\tPR c++/17826\n+\t* g++.dg/template/crash24.C: New test.\n+\t\n 2004-10-10  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \tPR c/17301"}, {"sha": "bf06aa4e7578ffd694b96eae5411b5acea4b044f", "filename": "gcc/testsuite/g++.dg/init/new11.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew11.C?ref=17a27b4f0c4ce1f151263c1919dba4fd2231eedc", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/17670\n+// { dg-do run }\n+\n+#include <cstdlib>\n+#include <new>\n+\n+bool abort_new;\n+void *operator new[](size_t bytes) throw (std::bad_alloc) { \n+  if (abort_new)\n+    abort(); \n+  return operator new (bytes);\n+}\n+\n+\n+struct X {};  \n+int main () {\n+  // Do not abort until main is running in case startup code uses\n+  // operator new[].\n+  abort_new = true;\n+  new (X);\n+}"}, {"sha": "24a66affdaea8c176c95118ae2a6b80cf037b8ab", "filename": "gcc/testsuite/g++.dg/parse/error19.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror19.C?ref=17a27b4f0c4ce1f151263c1919dba4fd2231eedc", "patch": "@@ -0,0 +1,13 @@\n+// PR C++/17867\n+\n+struct A\n+{  // { dg-error \"candidate\" }\n+  A(int);\n+};\n+\n+const A& foo();\n+\n+void bar()\n+{\n+  foo()=A(0); // { dg-error \"A\" }\n+}"}, {"sha": "ee7390a633c7716c3d6d45a1b69331d03a136af3", "filename": "gcc/testsuite/g++.dg/parse/error20.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror20.C?ref=17a27b4f0c4ce1f151263c1919dba4fd2231eedc", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/17821\n+\n+struct A {\n+  A(int i) {}\n+};\n+struct B {\n+  int i;\n+};\n+struct C {\n+  B* p;\n+};\n+int main() {\n+  C c;\n+  A(c.p.i); // { dg-error \"member.*non-class\" }\n+  return 0;\n+}\n+"}, {"sha": "49b8c7e718d23cfe52523f68947d3a204578aab3", "filename": "gcc/testsuite/g++.dg/template/crash24.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a27b4f0c4ce1f151263c1919dba4fd2231eedc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash24.C?ref=17a27b4f0c4ce1f151263c1919dba4fd2231eedc", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/17826\n+\n+struct A\n+{\n+  template<typename> static int foo();\n+};\n+\n+template<int> struct B {};\n+\n+template<typename T> void bar()\n+{\n+  B<sizeof A::foo<T>()> b1;\n+  B<sizeof A::foo<T>()> b2;\n+}"}]}