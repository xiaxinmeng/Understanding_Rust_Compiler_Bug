{"sha": "5212068fdf32944f8a35909cd5e9eb8d420fbc76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIxMjA2OGZkZjMyOTQ0ZjhhMzU5MDljZDVlOWViOGQ0MjBmYmM3Ng==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-09-07T10:22:44Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-09-07T10:22:44Z"}, "message": "builtins.c (fold_builtin_strchr): Use build_int_cst, not fold_convert.\n\n\t* builtins.c (fold_builtin_strchr): Use build_int_cst, not\n\tfold_convert.\n\t(fold_builtin_strpbrk): Likewise.\n\t* expr.c (array_ref_low_bound): Likewise.\n\t* tree-scalar-evolution.c (chrec_is_positive, add_to_evolution_1,\n\tinterpret_rhs_modify_expr, number_of_iterations_in_loop): Likewise.\n\t* tree-sra.c (generate_element_zero): Likewise.\n\t* tree-ssa-dom.c (simplify_rhs_and_lookup_avail_expr): Likewise.\n\t* tree-ssa-loop-ivopts.c (determine_biv_step, idx_find_step,\n\tadd_old_iv_candidates, add_iv_candidates): Likewise.\n\t* tree-tailcall.c (tree_optimize_tail_calls_1): Likewise.\n\nFrom-SVN: r87141", "tree": {"sha": "efd2d72434d72037608c092c5558556582089fc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efd2d72434d72037608c092c5558556582089fc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5212068fdf32944f8a35909cd5e9eb8d420fbc76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5212068fdf32944f8a35909cd5e9eb8d420fbc76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5212068fdf32944f8a35909cd5e9eb8d420fbc76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5212068fdf32944f8a35909cd5e9eb8d420fbc76/comments", "author": null, "committer": null, "parents": [{"sha": "366de0ce7d916d313aba839a2802cfbc70b991cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/366de0ce7d916d313aba839a2802cfbc70b991cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/366de0ce7d916d313aba839a2802cfbc70b991cf"}], "stats": {"total": 77, "additions": 40, "deletions": 37}, "files": [{"sha": "b5fd1d9aa1a51a75133df8f5d78f0e1e80ef3036", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5212068fdf32944f8a35909cd5e9eb8d420fbc76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5212068fdf32944f8a35909cd5e9eb8d420fbc76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5212068fdf32944f8a35909cd5e9eb8d420fbc76", "patch": "@@ -1,3 +1,17 @@\n+2004-09-07  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* builtins.c (fold_builtin_strchr): Use build_int_cst, not\n+\tfold_convert.\n+\t(fold_builtin_strpbrk): Likewise.\n+\t* expr.c (array_ref_low_bound): Likewise.\n+\t* tree-scalar-evolution.c (chrec_is_positive, add_to_evolution_1,\n+\tinterpret_rhs_modify_expr, number_of_iterations_in_loop): Likewise.\n+\t* tree-sra.c (generate_element_zero): Likewise.\n+\t* tree-ssa-dom.c (simplify_rhs_and_lookup_avail_expr): Likewise.\n+\t* tree-ssa-loop-ivopts.c (determine_biv_step, idx_find_step,\n+\tadd_old_iv_candidates, add_iv_candidates): Likewise.\n+\t* tree-tailcall.c (tree_optimize_tail_calls_1): Likewise.\n+\n 2004-09-07  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* c-aux-info.c (gen_type): Use gcc_assert or gcc_unreachable."}, {"sha": "50965228f91c8e7b6e0ec34fd73b629f5ea12123", "filename": "gcc/builtins.c", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5212068fdf32944f8a35909cd5e9eb8d420fbc76/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5212068fdf32944f8a35909cd5e9eb8d420fbc76/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=5212068fdf32944f8a35909cd5e9eb8d420fbc76", "patch": "@@ -7210,12 +7210,11 @@ fold_builtin_strchr (tree exp, bool actually_strrchr)\n \t  r = actually_strrchr ? strrchr (p1, c) : strchr (p1, c);\n \n \t  if (r == NULL)\n-\t    return fold_convert (TREE_TYPE (s1), integer_zero_node);\n+\t    return build_int_cst (TREE_TYPE (s1), 0);\n \n \t  /* Return an offset into the constant string argument.  */\n \t  return fold (build2 (PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t       s1, fold_convert (TREE_TYPE (s1),\n-\t\t\t\t\t\t ssize_int (r - p1))));\n+\t\t\t       s1, build_int_cst (TREE_TYPE (s1), r - p1)));\n \t}\n \n       if (actually_strrchr)\n@@ -8645,12 +8644,11 @@ simplify_builtin_strstr (tree arglist)\n \t  const char *r = strstr (p1, p2);\n \n \t  if (r == NULL)\n-\t    return fold_convert (TREE_TYPE (s1), integer_zero_node);\n+\t    return build_int_cst (TREE_TYPE (s1), 0);\n \n \t  /* Return an offset into the constant string argument.  */\n \t  return fold (build2 (PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t       s1, fold_convert (TREE_TYPE (s1),\n-\t\t\t\t\t\t ssize_int (r - p1))));\n+\t\t\t       s1, build_int_cst (TREE_TYPE (s1), r - p1)));\n \t}\n \n       if (p2[0] == '\\0')\n@@ -8714,12 +8712,11 @@ simplify_builtin_strchr (tree arglist)\n \t  r = strchr (p1, c);\n \n \t  if (r == NULL)\n-\t    return fold_convert (TREE_TYPE (s1), integer_zero_node);\n+\t    return build_int_cst (TREE_TYPE (s1), 0);\n \n \t  /* Return an offset into the constant string argument.  */\n \t  return fold (build2 (PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t       s1, fold_convert (TREE_TYPE (s1),\n-\t\t\t\t\t\t ssize_int (r - p1))));\n+\t\t\t       s1, build_int_cst (TREE_TYPE (s1), r - p1)));\n \t}\n \n       /* FIXME: Should use here strchrM optab so that ports can optimize\n@@ -8771,12 +8768,11 @@ simplify_builtin_strrchr (tree arglist)\n \t  r = strrchr (p1, c);\n \n \t  if (r == NULL)\n-\t    return fold_convert (TREE_TYPE (s1), integer_zero_node);\n+\t    return build_int_cst (TREE_TYPE (s1), 0);\n \n \t  /* Return an offset into the constant string argument.  */\n \t  return fold (build2 (PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t       s1, fold_convert (TREE_TYPE (s1),\n-\t\t\t\t\t\t ssize_int (r - p1))));\n+\t\t\t       s1, build_int_cst (TREE_TYPE (s1), r - p1)));\n \t}\n \n       if (! integer_zerop (s2))\n@@ -8829,12 +8825,11 @@ simplify_builtin_strpbrk (tree arglist)\n \t  const char *r = strpbrk (p1, p2);\n \n \t  if (r == NULL)\n-\t    return fold_convert (TREE_TYPE (s1), integer_zero_node);\n+\t    return build_int_cst (TREE_TYPE (s1), 0);\n \n \t  /* Return an offset into the constant string argument.  */\n \t  return fold (build2 (PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t       s1, fold_convert (TREE_TYPE (s1),\n-\t\t\t\t\t\t ssize_int (r - p1))));\n+\t\t\t       s1, build_int_cst (TREE_TYPE (s1), r - p1)));\n \t}\n \n       if (p2[0] == '\\0')"}, {"sha": "076b612c0b668d3c51f2613d04e55e48158e4b7d", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5212068fdf32944f8a35909cd5e9eb8d420fbc76/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5212068fdf32944f8a35909cd5e9eb8d420fbc76/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=5212068fdf32944f8a35909cd5e9eb8d420fbc76", "patch": "@@ -5514,7 +5514,7 @@ array_ref_low_bound (tree exp)\n     return SUBSTITUTE_PLACEHOLDER_IN_EXPR (TYPE_MIN_VALUE (domain_type), exp);\n \n   /* Otherwise, return a zero of the appropriate type.  */\n-  return fold_convert (TREE_TYPE (TREE_OPERAND (exp, 1)), integer_zero_node);\n+  return build_int_cst (TREE_TYPE (TREE_OPERAND (exp, 1)), 0);\n }\n \n /* Return a tree representing the upper bound of the array mentioned in"}, {"sha": "d1f1607418335587a4a4cb9760841d2df6a56a62", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5212068fdf32944f8a35909cd5e9eb8d420fbc76/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5212068fdf32944f8a35909cd5e9eb8d420fbc76/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=5212068fdf32944f8a35909cd5e9eb8d420fbc76", "patch": "@@ -571,15 +571,15 @@ chrec_is_positive (tree chrec, bool *value)\n \n       nb_iter = chrec_fold_minus \n \t(chrec_type (nb_iter), nb_iter,\n-\t fold_convert (chrec_type (nb_iter), integer_one_node));\n+\t build_int_cst (chrec_type (nb_iter), 1));\n \n #if 0\n       /* TODO -- If the test is after the exit, we may decrease the number of\n \t iterations by one.  */\n       if (after_exit)\n \tnb_iter = chrec_fold_minus \n \t\t(chrec_type (nb_iter), nb_iter,\n-\t\t fold_convert (chrec_type (nb_iter), integer_one_node));\n+\t\t build_int_cst (chrec_type (nb_iter), 1));\n #endif\n \n       end_value = chrec_apply (CHREC_VARIABLE (chrec), chrec, nb_iter);\n@@ -704,7 +704,7 @@ add_to_evolution_1 (unsigned loop_nb,\n \t    {\n \t      var = loop_nb;\n \t      left = chrec_before;\n-\t      right = fold_convert (type, integer_zero_node);\n+\t      right = build_int_cst (type, 0);\n \t    }\n \t  else\n \t    {\n@@ -1748,8 +1748,7 @@ interpret_rhs_modify_expr (struct loop *loop,\n       opnd10 = TREE_OPERAND (opnd1, 0);\n       chrec10 = analyze_scalar_evolution (loop, opnd10);\n       chrec10 = chrec_convert (type, chrec10);\n-      res = chrec_fold_minus (type, fold_convert (type, integer_zero_node), \n-\t\t\t      chrec10);\n+      res = chrec_fold_minus (type, build_int_cst (type, 0), chrec10);\n       break;\n \n     case MULT_EXPR:\n@@ -2192,7 +2191,7 @@ number_of_iterations_in_loop (struct loop *loop)\n \n   type = TREE_TYPE (niter_desc.niter);\n   if (integer_nonzerop (niter_desc.may_be_zero))\n-    res = fold_convert (type, integer_zero_node);\n+    res = build_int_cst (type, 0);\n   else if (integer_zerop (niter_desc.may_be_zero))\n     res = niter_desc.niter;\n   else"}, {"sha": "3e3da790203352f9bd54945afdf6a857b0a26ecf", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5212068fdf32944f8a35909cd5e9eb8d420fbc76/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5212068fdf32944f8a35909cd5e9eb8d420fbc76/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=5212068fdf32944f8a35909cd5e9eb8d420fbc76", "patch": "@@ -1537,7 +1537,7 @@ generate_element_zero (struct sra_elt *elt, tree *list_p)\n       tree t;\n \n       if (elt->is_scalar)\n-\tt = fold_convert (elt->type, integer_zero_node);\n+\tt = build_int_cst (elt->type, 0);\n       else\n \t/* We generated a replacement for a non-scalar?  */\n \tabort ();"}, {"sha": "c644e4a786db687eea2c90952fef511094320327", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5212068fdf32944f8a35909cd5e9eb8d420fbc76/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5212068fdf32944f8a35909cd5e9eb8d420fbc76/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=5212068fdf32944f8a35909cd5e9eb8d420fbc76", "patch": "@@ -1836,7 +1836,7 @@ simplify_rhs_and_lookup_avail_expr (struct dom_walk_data *walk_data,\n \t      TREE_SET_CODE (TREE_OPERAND (dummy_cond, 0), LE_EXPR);\n \t      TREE_OPERAND (TREE_OPERAND (dummy_cond, 0), 0) = op;\n \t      TREE_OPERAND (TREE_OPERAND (dummy_cond, 0), 1)\n-\t\t= fold_convert (type, integer_zero_node);\n+\t\t= build_int_cst (type, 0);\n \t    }\n \t  val = simplify_cond_and_lookup_avail_expr (dummy_cond,\n \t\t\t\t\t\t     &bd->avail_exprs,\n@@ -1847,7 +1847,7 @@ simplify_rhs_and_lookup_avail_expr (struct dom_walk_data *walk_data,\n \t      TREE_SET_CODE (TREE_OPERAND (dummy_cond, 0), GE_EXPR);\n \t      TREE_OPERAND (TREE_OPERAND (dummy_cond, 0), 0) = op;\n \t      TREE_OPERAND (TREE_OPERAND (dummy_cond, 0), 1)\n-\t\t= fold_convert (type, integer_zero_node);\n+\t\t= build_int_cst (type, 0);\n \n \t      val = simplify_cond_and_lookup_avail_expr (dummy_cond,\n \t\t\t\t\t\t\t &bd->avail_exprs,"}, {"sha": "7234660412b994ee85f21e8041967c82c4eabf3c", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5212068fdf32944f8a35909cd5e9eb8d420fbc76/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5212068fdf32944f8a35909cd5e9eb8d420fbc76/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=5212068fdf32944f8a35909cd5e9eb8d420fbc76", "patch": "@@ -687,7 +687,7 @@ determine_biv_step (tree phi)\n     return NULL_TREE;\n \n   if (!step)\n-    return fold_convert (type, integer_zero_node);\n+    return build_int_cst (type, 0);\n \n   return step;\n }\n@@ -1173,10 +1173,8 @@ idx_find_step (tree base, tree *idx, void *data)\n   if (TREE_CODE (base) == ARRAY_REF)\n     step = array_ref_element_size (base);\n   else\n-    {\n-      /* The step for pointer arithmetics already is 1 byte.  */\n-      step = fold_convert (type, integer_one_node);\n-    }\n+    /* The step for pointer arithmetics already is 1 byte.  */\n+    step = build_int_cst (type, 1);\n \n   if (TYPE_PRECISION (iv_type) < TYPE_PRECISION (type))\n     iv_step = can_count_iv_in_wider_type (dta->ivopts_data->current_loop,\n@@ -1586,7 +1584,7 @@ add_old_iv_candidates (struct ivopts_data *data, struct iv *iv)\n \n   /* The same, but with initial value zero.  */\n   add_candidate (data,\n-\t\t fold_convert (TREE_TYPE (iv->base), integer_zero_node),\n+\t\t build_int_cst (TREE_TYPE (iv->base), 0),\n \t\t iv->step, true, NULL);\n \n   phi = SSA_NAME_DEF_STMT (iv->ssa_name);\n@@ -1628,8 +1626,7 @@ add_iv_value_candidates (struct ivopts_data *data,\n   add_candidate (data, iv->base, iv->step, false, use);\n \n   /* The same, but with initial value zero.  */\n-  add_candidate (data,\n-\t\t fold_convert (TREE_TYPE (iv->base), integer_zero_node),\n+  add_candidate (data, build_int_cst (TREE_TYPE (iv->base), 0),\n \t\t iv->step, false, use);\n }\n "}, {"sha": "ee2103d8372fa121157dca5993f74a10eacb6523", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5212068fdf32944f8a35909cd5e9eb8d420fbc76/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5212068fdf32944f8a35909cd5e9eb8d420fbc76/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=5212068fdf32944f8a35909cd5e9eb8d420fbc76", "patch": "@@ -875,8 +875,7 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n \t  add_referenced_tmp_var (tmp);\n \n \t  phi = create_phi_node (tmp, first);\n-\t  add_phi_arg (&phi, fold_convert (ret_type, integer_zero_node),\n-\t\t       first->pred);\n+\t  add_phi_arg (&phi, build_int_cst (ret_type, 0), first->pred);\n \t  a_acc = PHI_RESULT (phi);\n \t}\n \n@@ -888,8 +887,7 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n \t  add_referenced_tmp_var (tmp);\n \n \t  phi = create_phi_node (tmp, first);\n-\t  add_phi_arg (&phi, fold_convert (ret_type, integer_one_node),\n-\t\t       first->pred);\n+\t  add_phi_arg (&phi, build_int_cst (ret_type, 1), first->pred);\n \t  m_acc = PHI_RESULT (phi);\n \t}\n     }"}]}