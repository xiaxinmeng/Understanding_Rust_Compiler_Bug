{"sha": "375f837be1166c39096769bb7afa16502490035f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc1ZjgzN2JlMTE2NmMzOTA5Njc2OWJiN2FmYTE2NTAyNDkwMDM1Zg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-10-10T15:33:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-10-10T15:33:57Z"}, "message": "re PR libstdc++/49561 ([C++0x] std::list::size complexity)\n\n\tPR libstdc++/49561\n\t* acinclude.m4 (GLIBCXX_ENABLE_LIBSTDCXX_CXX11_ABI): Define.\n\t* configure.ac: Use GLIBCXX_ENABLE_LIBSTDCXX_CXX11_ABI.\n\t* configure: Regenerate.\n\t* include/Makefile.am (stamp-cxx11-abi): New target.\n\t(c++config.h): Set _GLIBCXX_USE_CXX11_ABI macro.\n\t* include/Makefile.in: Regenerate.\n\t* include/bits/c++config: Add _GLIBCXX_USE_CXX11_ABI placeholder and\n\tdefine _GLIBCXX_DEFAULT_ABI_TAG.\n\t* include/bits/list.tcc (list::emplace(const_iterator, _Args&...)):\n\tIncrement size.\n\t(list::emplace(const_iterator, const value_type&)): Likewise.\n\t(list::merge(list&), list::merge(list&, _StrictWeakOrdering)): Adjust\n\tlist sizes.\n\t* include/bits/stl_list.h (_List_base, list): Add ABI tag macro.\n\t(_List_base::_M_size): New data member in cxx11 ABI mode.\n\t(_List_base::_S_distance(_List_node_base*, _List_node_base*)): New\n\tfunction.\n\t(_List_base::_M_get_size(), _List_base::_M_set_size(size_t),\n\t_List_base::_M_inc_size(size_t), _List_base::_M_dec_size(size_t),\n\t_List_base::_M_distance, _List_base::_M_node_count): New functions for\n\taccessing list size correctly for the ABI mode.\n\t(_List_base::_List_base(_List_base&&)): Copy size and reset source.\n\t(_List_base::_M_init()): Initialize size member.\n\t(list::size()): Use _List_base::_M_node_count.\n\t(list::swap(list&)): Swap sizes.\n\t(list::splice(iterator, list&)): Update sizes.\n\t(list::splice(iterator, list&, iterator)): Likewise.\n\t(list::insert(iterator, const value_type&)): Update size.\n\t(list::insert(iterator, _Args&&...)): Likewise.\n\t(list::_M_erase(iterator)): Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n\tAdjust.\n\t* testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc:\n\tAdjust.\n\t* testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc:\n\tAdjust.\n\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n\tAdjust.\n\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust.\n\nFrom-SVN: r216094", "tree": {"sha": "d2daeaf622dee7a1143f7b1ac906eb9065fdf9d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2daeaf622dee7a1143f7b1ac906eb9065fdf9d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/375f837be1166c39096769bb7afa16502490035f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/375f837be1166c39096769bb7afa16502490035f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/375f837be1166c39096769bb7afa16502490035f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/375f837be1166c39096769bb7afa16502490035f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47c14114d6b86ae638d83469b3770b8eae2853c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47c14114d6b86ae638d83469b3770b8eae2853c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47c14114d6b86ae638d83469b3770b8eae2853c0"}], "stats": {"total": 243, "additions": 222, "deletions": 21}, "files": [{"sha": "1171d83eb37ddf2628dbd1f9b952ce4ba02bf6c4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=375f837be1166c39096769bb7afa16502490035f", "patch": "@@ -1,3 +1,46 @@\n+2014-10-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/49561\n+\t* acinclude.m4 (GLIBCXX_ENABLE_LIBSTDCXX_CXX11_ABI): Define.\n+\t* configure.ac: Use GLIBCXX_ENABLE_LIBSTDCXX_CXX11_ABI.\n+\t* configure: Regenerate.\n+\t* include/Makefile.am (stamp-cxx11-abi): New target.\n+\t(c++config.h): Set _GLIBCXX_USE_CXX11_ABI macro.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/c++config: Add _GLIBCXX_USE_CXX11_ABI placeholder and\n+\tdefine _GLIBCXX_DEFAULT_ABI_TAG.\n+\t* include/bits/list.tcc (list::emplace(const_iterator, _Args&...)):\n+\tIncrement size.\n+\t(list::emplace(const_iterator, const value_type&)): Likewise.\n+\t(list::merge(list&), list::merge(list&, _StrictWeakOrdering)): Adjust\n+\tlist sizes.\n+\t* include/bits/stl_list.h (_List_base, list): Add ABI tag macro.\n+\t(_List_base::_M_size): New data member in cxx11 ABI mode.\n+\t(_List_base::_S_distance(_List_node_base*, _List_node_base*)): New\n+\tfunction.\n+\t(_List_base::_M_get_size(), _List_base::_M_set_size(size_t),\n+\t_List_base::_M_inc_size(size_t), _List_base::_M_dec_size(size_t),\n+\t_List_base::_M_distance, _List_base::_M_node_count): New functions for\n+\taccessing list size correctly for the ABI mode.\n+\t(_List_base::_List_base(_List_base&&)): Copy size and reset source.\n+\t(_List_base::_M_init()): Initialize size member.\n+\t(list::size()): Use _List_base::_M_node_count.\n+\t(list::swap(list&)): Swap sizes.\n+\t(list::splice(iterator, list&)): Update sizes.\n+\t(list::splice(iterator, list&, iterator)): Likewise.\n+\t(list::insert(iterator, const value_type&)): Update size.\n+\t(list::insert(iterator, _Args&&...)): Likewise.\n+\t(list::_M_erase(iterator)): Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n+\tAdjust.\n+\t* testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc:\n+\tAdjust.\n+\t* testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc:\n+\tAdjust.\n+\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n+\tAdjust.\n+\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust.\n+\n 2014-10-09  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/status_cxx2011.xml: Update."}, {"sha": "0229609df2c97da2ba3759b252b87ea2786db047", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=375f837be1166c39096769bb7afa16502490035f", "patch": "@@ -3831,6 +3831,25 @@ AC_DEFUN([GLIBCXX_CHECK_SDT_H], [\n   AC_MSG_RESULT($glibcxx_cv_sys_sdt_h)\n ])\n \n+dnl\n+dnl Check if the user wants the new C++11-conforming ABI.\n+dnl\n+dnl --disable-libstdcxx-cxx11-abi will use old ABI for all types.\n+dnl\n+dnl Defines:\n+dnl  _GLIBCXX_USE_ABI_TAG (always defined, either to 1 or 0)\n+dnl\n+AC_DEFUN([GLIBCXX_ENABLE_LIBSTDCXX_CXX11_ABI], [\n+  AC_ARG_ENABLE([libstdcxx-cxx11-abi],\n+    AC_HELP_STRING([--disable-libstdcxx-cxx11-abi],\n+\t\t   [disable the C++11-conforming ABI]),,\n+\t\t   [enable_libstdcxx_cxx11_abi=yes])\n+  if test x\"$enable_libstdcxx_cxx11_abi\" != xyes; then\n+    AC_MSG_NOTICE([C++11-conforming ABI is disabled])\n+  fi\n+  GLIBCXX_CONDITIONAL(ENABLE_CXX11_ABI, test $enable_libstdcxx_cxx11_abi = yes)\n+])\n+\n # Macros from the top-level gcc directory.\n m4_include([../config/gc++filt.m4])\n m4_include([../config/tls.m4])"}, {"sha": "3f5fc9a24a1abcd75189c20b84967ae7b4cbc6dc", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=375f837be1166c39096769bb7afa16502490035f", "patch": "@@ -643,6 +643,8 @@ baseline_dir\n HWCAP_FLAGS\n GLIBCXX_LDBL_COMPAT_FALSE\n GLIBCXX_LDBL_COMPAT_TRUE\n+ENABLE_CXX11_ABI_FALSE\n+ENABLE_CXX11_ABI_TRUE\n ENABLE_VISIBILITY_FALSE\n ENABLE_VISIBILITY_TRUE\n libtool_VERSION\n@@ -880,6 +882,7 @@ with_system_libunwind\n enable_linux_futex\n enable_symvers\n enable_libstdcxx_visibility\n+enable_libstdcxx_cxx11_abi\n enable_libstdcxx_threads\n with_gxx_include_dir\n enable_version_specific_runtime_libs\n@@ -1575,6 +1578,8 @@ Optional Features:\n                           [default=yes]\n   --enable-libstdcxx-visibility\n                           enables visibility safe usage [default=yes]\n+  --disable-libstdcxx-cxx11-abi\n+                          disable the C++11-conforming ABI\n   --enable-libstdcxx-threads\n                           enable C++11 threads support [default=auto]\n   --enable-version-specific-runtime-libs\n@@ -11526,7 +11531,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11529 \"configure\"\n+#line 11534 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11632,7 +11637,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11635 \"configure\"\n+#line 11640 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15052,7 +15057,7 @@ fi\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 15055 \"configure\"\n+#line 15060 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -15404,7 +15409,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15407 \"configure\"\n+#line 15412 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15439,7 +15444,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15442 \"configure\"\n+#line 15447 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15474,7 +15479,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15477 \"configure\"\n+#line 15482 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15510,7 +15515,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15513 \"configure\"\n+#line 15518 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -15589,7 +15594,7 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15592 \"configure\"\n+#line 15597 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -15631,7 +15636,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15634 \"configure\"\n+#line 15639 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -15665,7 +15670,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15668 \"configure\"\n+#line 15673 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -78157,6 +78162,21 @@ fi\n $as_echo \"$as_me: visibility supported: $enable_libstdcxx_visibility\" >&6;}\n \n \n+\n+  # Check whether --enable-libstdcxx-cxx11-abi was given.\n+if test \"${enable_libstdcxx_cxx11_abi+set}\" = set; then :\n+  enableval=$enable_libstdcxx_cxx11_abi;\n+else\n+  enable_libstdcxx_cxx11_abi=yes\n+fi\n+\n+  if test x\"$enable_libstdcxx_cxx11_abi\" != xyes; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: C++11-conforming ABI is disabled\" >&5\n+$as_echo \"$as_me: C++11-conforming ABI is disabled\" >&6;}\n+  fi\n+\n+\n+\n ac_ldbl_compat=no\n case \"$target\" in\n   powerpc*-*-linux* | \\\n@@ -79309,6 +79329,15 @@ else\n fi\n \n \n+    if test $enable_libstdcxx_cxx11_abi = yes; then\n+  ENABLE_CXX11_ABI_TRUE=\n+  ENABLE_CXX11_ABI_FALSE='#'\n+else\n+  ENABLE_CXX11_ABI_TRUE='#'\n+  ENABLE_CXX11_ABI_FALSE=\n+fi\n+\n+\n     if test $ac_ldbl_compat = yes; then\n   GLIBCXX_LDBL_COMPAT_TRUE=\n   GLIBCXX_LDBL_COMPAT_FALSE='#'\n@@ -79726,6 +79755,10 @@ if test -z \"${ENABLE_VISIBILITY_TRUE}\" && test -z \"${ENABLE_VISIBILITY_FALSE}\";\n   as_fn_error \"conditional \\\"ENABLE_VISIBILITY\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${ENABLE_CXX11_ABI_TRUE}\" && test -z \"${ENABLE_CXX11_ABI_FALSE}\"; then\n+  as_fn_error \"conditional \\\"ENABLE_CXX11_ABI\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${GLIBCXX_LDBL_COMPAT_TRUE}\" && test -z \"${GLIBCXX_LDBL_COMPAT_FALSE}\"; then\n   as_fn_error \"conditional \\\"GLIBCXX_LDBL_COMPAT\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "eb826e4133f0609431a8ff7e45eaf37d72253e6e", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=375f837be1166c39096769bb7afa16502490035f", "patch": "@@ -365,6 +365,8 @@ AC_SUBST(libtool_VERSION)\n \n GLIBCXX_ENABLE_LIBSTDCXX_VISIBILITY([yes])\n \n+GLIBCXX_ENABLE_LIBSTDCXX_CXX11_ABI([yes])\n+\n ac_ldbl_compat=no\n case \"$target\" in\n   powerpc*-*-linux* | \\"}, {"sha": "e3aed8486151d279e07fbe21752d41ceffda6841", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=375f837be1166c39096769bb7afa16502490035f", "patch": "@@ -1122,6 +1122,14 @@ stamp-visibility:\n \techo 0 > stamp-visibility\n endif\n \n+if ENABLE_CXX11_ABI\n+stamp-cxx11-abi:\n+\techo 1 > stamp-cxx11-abi\n+else\n+stamp-cxx11-abi:\n+\techo 0 > stamp-cxx11-abi\n+endif\n+\n # NB: The non-empty default ldbl_compat works around an AIX sed\n # oddity, see libstdc++/31957 for details.\n ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n@@ -1130,11 +1138,13 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t\t\t      ${toplevel_srcdir}/gcc/DATESTAMP \\\n \t\t\t      stamp-namespace-version \\\n \t\t\t      stamp-visibility \\\n-\t\t\t      stamp-extern-template\n+\t\t\t      stamp-extern-template \\\n+\t\t\t      stamp-cxx11-abi\n \t@date=`cat ${toplevel_srcdir}/gcc/DATESTAMP` ;\\\n \tns_version=`cat stamp-namespace-version` ;\\\n \tvisibility=`cat stamp-visibility` ;\\\n \texterntemplate=`cat stamp-extern-template` ;\\\n+\tcxx11abi=`cat stamp-cxx11-abi` ;\\\n \tldbl_compat='s,g,g,' ;\\\n \tgrep \"^[\t ]*#[\t ]*define[\t ][\t ]*_GLIBCXX_LONG_DOUBLE_COMPAT[\t ][\t ]*1[\t ]*$$\" \\\n \t${CONFIG_HEADER} > /dev/null 2>&1 \\\n@@ -1143,6 +1153,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t-e \"s,define _GLIBCXX_INLINE_VERSION, define _GLIBCXX_INLINE_VERSION $$ns_version,\" \\\n \t-e \"s,define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY, define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY $$visibility,\" \\\n \t-e \"s,define _GLIBCXX_EXTERN_TEMPLATE$$, define _GLIBCXX_EXTERN_TEMPLATE $$externtemplate,\" \\\n+\t-e \"s,define _GLIBCXX_USE_CXX11_ABI, define _GLIBCXX_USE_CXX11_ABI $$cxx11abi,\" \\\n \t-e \"$$ldbl_compat\" \\\n \t    < ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\\n \tsed -e 's/HAVE_/_GLIBCXX_HAVE_/g' \\"}, {"sha": "b49c501a6f3b39b8f29fc4e8263c310e7c066862", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=375f837be1166c39096769bb7afa16502490035f", "patch": "@@ -1532,6 +1532,11 @@ stamp-host: ${host_headers} ${bits_host_headers} ${ext_host_headers} ${host_head\n @ENABLE_VISIBILITY_FALSE@stamp-visibility:\n @ENABLE_VISIBILITY_FALSE@\techo 0 > stamp-visibility\n \n+@ENABLE_CXX11_ABI_TRUE@stamp-cxx11-abi:\n+@ENABLE_CXX11_ABI_TRUE@\techo 1 > stamp-cxx11-abi\n+@ENABLE_CXX11_ABI_FALSE@stamp-cxx11-abi:\n+@ENABLE_CXX11_ABI_FALSE@\techo 0 > stamp-cxx11-abi\n+\n # NB: The non-empty default ldbl_compat works around an AIX sed\n # oddity, see libstdc++/31957 for details.\n ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n@@ -1540,11 +1545,13 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t\t\t      ${toplevel_srcdir}/gcc/DATESTAMP \\\n \t\t\t      stamp-namespace-version \\\n \t\t\t      stamp-visibility \\\n-\t\t\t      stamp-extern-template\n+\t\t\t      stamp-extern-template \\\n+\t\t\t      stamp-cxx11-abi\n \t@date=`cat ${toplevel_srcdir}/gcc/DATESTAMP` ;\\\n \tns_version=`cat stamp-namespace-version` ;\\\n \tvisibility=`cat stamp-visibility` ;\\\n \texterntemplate=`cat stamp-extern-template` ;\\\n+\tcxx11abi=`cat stamp-cxx11-abi` ;\\\n \tldbl_compat='s,g,g,' ;\\\n \tgrep \"^[\t ]*#[\t ]*define[\t ][\t ]*_GLIBCXX_LONG_DOUBLE_COMPAT[\t ][\t ]*1[\t ]*$$\" \\\n \t${CONFIG_HEADER} > /dev/null 2>&1 \\\n@@ -1553,6 +1560,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t-e \"s,define _GLIBCXX_INLINE_VERSION, define _GLIBCXX_INLINE_VERSION $$ns_version,\" \\\n \t-e \"s,define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY, define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY $$visibility,\" \\\n \t-e \"s,define _GLIBCXX_EXTERN_TEMPLATE$$, define _GLIBCXX_EXTERN_TEMPLATE $$externtemplate,\" \\\n+\t-e \"s,define _GLIBCXX_USE_CXX11_ABI, define _GLIBCXX_USE_CXX11_ABI $$cxx11abi,\" \\\n \t-e \"$$ldbl_compat\" \\\n \t    < ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\\n \tsed -e 's/HAVE_/_GLIBCXX_HAVE_/g' \\"}, {"sha": "bb58a9b9748a6e2b35fd5dee07e809c84d906226", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=375f837be1166c39096769bb7afa16502490035f", "patch": "@@ -193,6 +193,17 @@ namespace std\n #endif\n }\n \n+// Use abi_tag(\"cxx11\")\n+#ifndef _GLIBCXX_USE_CXX11_ABI\n+#define _GLIBCXX_USE_CXX11_ABI\n+#endif\n+\n+#if _GLIBCXX_USE_CXX11_ABI\n+# define _GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_ABI_TAG_CXX11\n+#else\n+# define _GLIBCXX_DEFAULT_ABI_TAG\n+#endif\n+\n \n // Defined if inline namespaces are used for versioning.\n #define _GLIBCXX_INLINE_VERSION "}, {"sha": "f99ec54ca4000cec6b87226fb1f92d9dbb3c6e38", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=375f837be1166c39096769bb7afa16502490035f", "patch": "@@ -89,6 +89,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       {\n \t_Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);\n \t__tmp->_M_hook(__position._M_const_cast()._M_node);\n+\tthis->_M_inc_size(1);\n \treturn iterator(__tmp);\n       }\n #endif\n@@ -104,6 +105,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     {\n       _Node* __tmp = _M_create_node(__x);\n       __tmp->_M_hook(__position._M_const_cast()._M_node);\n+      this->_M_inc_size(1);\n       return iterator(__tmp);\n     }\n \n@@ -353,6 +355,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      ++__first1;\n \t  if (__first2 != __last2)\n \t    _M_transfer(__last1, __first2, __last2);\n+\n+\t  this->_M_inc_size(__x._M_get_size());\n+\t  __x._M_set_size(0);\n \t}\n     }\n \n@@ -387,6 +392,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t++__first1;\n \t    if (__first2 != __last2)\n \t      _M_transfer(__last1, __first2, __last2);\n+\n+\t    this->_M_inc_size(__x._M_get_size());\n+\t    __x._M_set_size(0);\n \t  }\n       }\n "}, {"sha": "8e6567cfe67b9052d222b2410f02671cc57afb16", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 70, "deletions": 4, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=375f837be1166c39096769bb7afa16502490035f", "patch": "@@ -295,7 +295,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   /// See bits/stl_deque.h's _Deque_base for an explanation.\n   template<typename _Tp, typename _Alloc>\n-    class _List_base\n+    class _GLIBCXX_DEFAULT_ABI_TAG _List_base\n     {\n     protected:\n       // NOTA BENE\n@@ -316,6 +316,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;\n \n+      static size_t\n+      _S_distance(const __detail::_List_node_base* __first,\n+\t\t  const __detail::_List_node_base* __last)\n+      {\n+\tsize_t __n = 0;\n+\twhile (__first != __last)\n+\t  {\n+\t    __first = __first->_M_next;\n+\t    ++__n;\n+\t  }\n+\treturn __n;\n+      }\n+\n       struct _List_impl\n       : public _Node_alloc_type\n       {\n@@ -338,6 +351,40 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       _List_impl _M_impl;\n \n+#if _GLIBCXX_USE_CXX11_ABI\n+      size_t\t _M_size;\n+\n+      size_t _M_get_size() const { return _M_size; }\n+\n+      void _M_set_size(size_t __n) { _M_size = __n; }\n+\n+      void _M_inc_size(size_t __n) { _M_size += __n; }\n+\n+      void _M_dec_size(size_t __n) { _M_size -= __n; }\n+\n+      size_t\n+      _M_distance(const __detail::_List_node_base* __first,\n+\t\t  const __detail::_List_node_base* __last) const\n+      { return _S_distance(__first, __last); }\n+\n+      // return the stored size\n+      size_t _M_node_count() const { return _M_size; }\n+#else\n+      // dummy implementations used when the size is not stored\n+      size_t _M_get_size() const { return 0; }\n+      void _M_set_size(size_t) { }\n+      void _M_inc_size(size_t) { }\n+      void _M_dec_size(size_t) { }\n+      size_t _M_distance(const void*, const void*) const { return 0; }\n+\n+      // count the number of nodes\n+      size_t _M_node_count() const\n+      {\n+\treturn _S_distance(_M_impl._M_node._M_next,\n+\t\t\t   std::__addressof(_M_impl._M_node));\n+      }\n+#endif\n+\n       _List_node<_Tp>*\n       _M_get_node()\n       { return _M_impl._Node_alloc_type::allocate(1); }\n@@ -386,7 +433,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    __node->_M_next = __xnode->_M_next;\n \t    __node->_M_prev = __xnode->_M_prev;\n \t    __node->_M_next->_M_prev = __node->_M_prev->_M_next = __node;\n-\t    __xnode->_M_next = __xnode->_M_prev = __xnode;\n+\t    _M_set_size(__x._M_get_size());\n+\t    __x._M_init();\n \t  }\n       }\n #endif\n@@ -403,6 +451,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       {\n         this->_M_impl._M_node._M_next = &this->_M_impl._M_node;\n         this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;\n+\t_M_set_size(0);\n       }\n     };\n \n@@ -453,7 +502,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *  %empty. \n   */\n   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >\n-    class list : protected _List_base<_Tp, _Alloc>\n+    class _GLIBCXX_DEFAULT_ABI_TAG list : protected _List_base<_Tp, _Alloc>\n     {\n       // concept requirements\n       typedef typename _Alloc::value_type                _Alloc_value_type;\n@@ -893,7 +942,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**  Returns the number of elements in the %list.  */\n       size_type\n       size() const _GLIBCXX_NOEXCEPT\n-      { return std::distance(begin(), end()); }\n+      { return this->_M_node_count(); }\n \n       /**  Returns the size() of the largest possible %list.  */\n       size_type\n@@ -1295,6 +1344,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t__detail::_List_node_base::swap(this->_M_impl._M_node, \n \t\t\t\t\t__x._M_impl._M_node);\n \n+\tsize_t __xsize = __x._M_get_size();\n+\t__x._M_set_size(this->_M_get_size());\n+\tthis->_M_set_size(__xsize);\n+\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 431. Swapping containers with unequal allocators.\n \tstd::__alloc_swap<typename _Base::_Node_alloc_type>::\n@@ -1339,6 +1392,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n \t    this->_M_transfer(__position._M_const_cast(),\n \t\t\t      __x.begin(), __x.end());\n+\n+\t    this->_M_inc_size(__x._M_get_size());\n+\t    __x._M_set_size(0);\n \t  }\n       }\n \n@@ -1385,6 +1441,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n \tthis->_M_transfer(__position._M_const_cast(),\n \t\t\t  __i._M_const_cast(), __j);\n+\n+\tthis->_M_inc_size(1);\n+\t__x._M_dec_size(1);\n       }\n \n #if __cplusplus >= 201103L\n@@ -1443,6 +1502,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    if (this != &__x)\n \t      _M_check_equal_allocators(__x);\n \n+\t    size_t __n = this->_M_distance(__first._M_node, __last._M_node);\n+\t    this->_M_inc_size(__n);\n+\t    __x._M_dec_size(__n);\n+\n \t    this->_M_transfer(__position._M_const_cast(),\n \t\t\t      __first._M_const_cast(),\n \t\t\t      __last._M_const_cast());\n@@ -1688,6 +1751,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       {\n         _Node* __tmp = _M_create_node(__x);\n         __tmp->_M_hook(__position._M_node);\n+\tthis->_M_inc_size(1);\n       }\n #else\n      template<typename... _Args>\n@@ -1696,13 +1760,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        {\n \t _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);\n \t __tmp->_M_hook(__position._M_node);\n+\t this->_M_inc_size(1);\n        }\n #endif\n \n       // Erases element at position given.\n       void\n       _M_erase(iterator __position) _GLIBCXX_NOEXCEPT\n       {\n+\tthis->_M_dec_size(1);\n         __position._M_node->_M_unhook();\n         _Node* __n = static_cast<_Node*>(__position._M_node);\n #if __cplusplus >= 201103L"}, {"sha": "183753dca5fc476717006c6637570f14247e3c2c", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=375f837be1166c39096769bb7afa16502490035f", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1665 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1728 }\n \n #include <list>\n "}, {"sha": "e81ff98d43e587e001c91b52809dce6a38bf4dd1", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=375f837be1166c39096769bb7afa16502490035f", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1617 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1680 }\n \n #include <list>\n "}, {"sha": "c98aa0f476bc307dd8442348d36176f91e4cffdc", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=375f837be1166c39096769bb7afa16502490035f", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1617 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1680 }\n \n #include <list>\n #include <utility>"}, {"sha": "1397796132c033bfae5fc797ad8bddfe522a77e5", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=375f837be1166c39096769bb7afa16502490035f", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1617 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1680 }\n \n #include <list>\n "}, {"sha": "5597c57d239aab516300f83e436d761a66fb379d", "filename": "libstdc++-v3/testsuite/ext/profile/mutex_extensions_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375f837be1166c39096769bb7afa16502490035f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc?ref=375f837be1166c39096769bb7afa16502490035f", "patch": "@@ -25,4 +25,4 @@\n \n #include <vector>\n \n-// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 279 }\n+// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 290 }"}]}