{"sha": "d1753b4be981fcb176f56b6ed45f7dbe1177d641", "node_id": "C_kwDOANBUbNoAKGQxNzUzYjRiZTk4MWZjYjE3NmY1NmI2ZWQ0NWY3ZGJlMTE3N2Q2NDE", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2021-11-15T17:33:13Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2021-11-15T22:49:51Z"}, "message": "gimple-fold: Transform stp*cpy_chk to str*cpy directly\n\nAvoid going through another folding cycle and use the ignore flag to\ndirectly transform BUILT_IN_STPCPY_CHK to BUILT_IN_STRCPY when set,\nlikewise for BUILT_IN_STPNCPY_CHK to BUILT_IN_STPNCPY.\n\nDump the transformation in dump_file so that we can verify in tests that\nthe direct transformation actually happened.\n\ngcc/ChangeLog:\n\n\t* gimple-fold.c (dump_transformation): New function.\n\t(gimple_fold_builtin_stxcpy_chk,\n\tgimple_fold_builtin_stxncpy_chk): Use it.  Simplify to\n\tBUILT_IN_STRNCPY if return value is not used.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/fold-stringops-1.c: New test.\n\nSigned-off-by: Siddhesh Poyarekar <siddhesh@gotplt.org>", "tree": {"sha": "de2bb231db90865a3451fb4bcd592e51d86f9ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de2bb231db90865a3451fb4bcd592e51d86f9ccf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1753b4be981fcb176f56b6ed45f7dbe1177d641", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1753b4be981fcb176f56b6ed45f7dbe1177d641", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1753b4be981fcb176f56b6ed45f7dbe1177d641", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1753b4be981fcb176f56b6ed45f7dbe1177d641/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c19122bf5afa5cb479fd9445f0c591c52add09b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c19122bf5afa5cb479fd9445f0c591c52add09b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c19122bf5afa5cb479fd9445f0c591c52add09b"}], "stats": {"total": 78, "additions": 58, "deletions": 20}, "files": [{"sha": "2e92efa7f61eb064204663510a7ce8e9ceea7423", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1753b4be981fcb176f56b6ed45f7dbe1177d641/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1753b4be981fcb176f56b6ed45f7dbe1177d641/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=d1753b4be981fcb176f56b6ed45f7dbe1177d641", "patch": "@@ -3088,6 +3088,16 @@ gimple_fold_builtin_memory_chk (gimple_stmt_iterator *gsi,\n   return true;\n }\n \n+/* Print a message in the dump file recording transformation of FROM to TO.  */\n+\n+static void\n+dump_transformation (gcall *from, gcall *to)\n+{\n+  if (dump_enabled_p ())\n+    dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, from, \"simplified %T to %T\\n\",\n+\t\t     gimple_call_fn (from), gimple_call_fn (to));\n+}\n+\n /* Fold a call to the __st[rp]cpy_chk builtin.\n    DEST, SRC, and SIZE are the arguments to the call.\n    IGNORE is true if return value can be ignored.  FCODE is the BUILT_IN_*\n@@ -3100,7 +3110,7 @@ gimple_fold_builtin_stxcpy_chk (gimple_stmt_iterator *gsi,\n \t\t\t\ttree src, tree size,\n \t\t\t\tenum built_in_function fcode)\n {\n-  gimple *stmt = gsi_stmt (*gsi);\n+  gcall *stmt = as_a <gcall *> (gsi_stmt (*gsi));\n   location_t loc = gimple_location (stmt);\n   bool ignore = gimple_call_lhs (stmt) == NULL_TREE;\n   tree len, fn;\n@@ -3184,12 +3194,13 @@ gimple_fold_builtin_stxcpy_chk (gimple_stmt_iterator *gsi,\n     }\n \n   /* If __builtin_st{r,p}cpy_chk is used, assume st{r,p}cpy is available.  */\n-  fn = builtin_decl_explicit (fcode == BUILT_IN_STPCPY_CHK\n+  fn = builtin_decl_explicit (fcode == BUILT_IN_STPCPY_CHK && !ignore\n \t\t\t      ? BUILT_IN_STPCPY : BUILT_IN_STRCPY);\n   if (!fn)\n     return false;\n \n-  gimple *repl = gimple_build_call (fn, 2, dest, src);\n+  gcall *repl = gimple_build_call (fn, 2, dest, src);\n+  dump_transformation (stmt, repl);\n   replace_call_with_call_and_fold (gsi, repl);\n   return true;\n }\n@@ -3205,23 +3216,10 @@ gimple_fold_builtin_stxncpy_chk (gimple_stmt_iterator *gsi,\n \t\t\t\t tree len, tree size,\n \t\t\t\t enum built_in_function fcode)\n {\n-  gimple *stmt = gsi_stmt (*gsi);\n+  gcall *stmt = as_a <gcall *> (gsi_stmt (*gsi));\n   bool ignore = gimple_call_lhs (stmt) == NULL_TREE;\n   tree fn;\n \n-  if (fcode == BUILT_IN_STPNCPY_CHK && ignore)\n-    {\n-       /* If return value of __stpncpy_chk is ignored,\n-          optimize into __strncpy_chk.  */\n-       fn = builtin_decl_explicit (BUILT_IN_STRNCPY_CHK);\n-       if (fn)\n-\t {\n-\t   gimple *repl = gimple_build_call (fn, 4, dest, src, len, size);\n-\t   replace_call_with_call_and_fold (gsi, repl);\n-\t   return true;\n-\t }\n-    }\n-\n   if (! tree_fits_uhwi_p (size))\n     return false;\n \n@@ -3234,7 +3232,23 @@ gimple_fold_builtin_stxncpy_chk (gimple_stmt_iterator *gsi,\n \t     For MAXLEN only allow optimizing into non-_ocs function\n \t     if SIZE is >= MAXLEN, never convert to __ocs_fail ().  */\n \t  if (maxlen == NULL_TREE || ! tree_fits_uhwi_p (maxlen))\n-\t    return false;\n+\t    {\n+\t      if (fcode == BUILT_IN_STPNCPY_CHK && ignore)\n+\t\t{\n+\t\t  /* If return value of __stpncpy_chk is ignored,\n+\t\t     optimize into __strncpy_chk.  */\n+\t\t  fn = builtin_decl_explicit (BUILT_IN_STRNCPY_CHK);\n+\t\t  if (fn)\n+\t\t    {\n+\t\t      gimple *repl = gimple_build_call (fn, 4, dest, src, len,\n+\t\t\t\t\t\t\tsize);\n+\t\t      replace_call_with_call_and_fold (gsi, repl);\n+\t\t      return true;\n+\t\t    }\n+\t\t}\n+\n+\t      return false;\n+\t    }\n \t}\n       else\n \tmaxlen = len;\n@@ -3244,12 +3258,13 @@ gimple_fold_builtin_stxncpy_chk (gimple_stmt_iterator *gsi,\n     }\n \n   /* If __builtin_st{r,p}ncpy_chk is used, assume st{r,p}ncpy is available.  */\n-  fn = builtin_decl_explicit (fcode == BUILT_IN_STPNCPY_CHK\n+  fn = builtin_decl_explicit (fcode == BUILT_IN_STPNCPY_CHK && !ignore\n \t\t\t      ? BUILT_IN_STPNCPY : BUILT_IN_STRNCPY);\n   if (!fn)\n     return false;\n \n-  gimple *repl = gimple_build_call (fn, 3, dest, src, len);\n+  gcall *repl = gimple_build_call (fn, 3, dest, src, len);\n+  dump_transformation (stmt, repl);\n   replace_call_with_call_and_fold (gsi, repl);\n   return true;\n }"}, {"sha": "e26632afd4e0ecf8fcfd2495da70324b9bbbb183", "filename": "gcc/testsuite/gcc.dg/fold-stringops-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1753b4be981fcb176f56b6ed45f7dbe1177d641/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-stringops-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1753b4be981fcb176f56b6ed45f7dbe1177d641/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-stringops-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-stringops-1.c?ref=d1753b4be981fcb176f56b6ed45f7dbe1177d641", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-lower-details\" } */\n+\n+char dst[2048];\n+\n+char *\n+copy1 (const char *src, int cond)\n+{\n+  __builtin___stpncpy_chk (dst, src, 42, __builtin_object_size (dst, 0));\n+\n+  return dst;\n+}\n+\n+char *\n+copy2 (void)\n+{\n+  __builtin___stpcpy_chk (dst, \"Hello world\", __builtin_object_size (dst, 0));\n+\n+  return dst;\n+}\n+/* { dg-final { scan-tree-dump \"simplified __builtin___stpncpy_chk to __builtin_strncpy\" \"lower\" } } */\n+/* { dg-final { scan-tree-dump \"simplified __builtin___stpcpy_chk to __builtin_strcpy\" \"lower\" } } */\n+"}]}