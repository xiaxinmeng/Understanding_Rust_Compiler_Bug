{"sha": "969a989d2bc9c60b8815378837d153a524ae76af", "node_id": "C_kwDOANBUbNoAKDk2OWE5ODlkMmJjOWM2MGI4ODE1Mzc4ODM3ZDE1M2E1MjRhZTc2YWY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-08-03T00:16:48Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-08-03T00:16:48Z"}, "message": "Daily bump.", "tree": {"sha": "dec54dd9c7cfa3b3b9a334ca99162d028bf2de2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dec54dd9c7cfa3b3b9a334ca99162d028bf2de2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/969a989d2bc9c60b8815378837d153a524ae76af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/969a989d2bc9c60b8815378837d153a524ae76af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/969a989d2bc9c60b8815378837d153a524ae76af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/969a989d2bc9c60b8815378837d153a524ae76af/comments", "author": null, "committer": null, "parents": [{"sha": "70daecc03235aa7187b03681cebed6e04b32678e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70daecc03235aa7187b03681cebed6e04b32678e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70daecc03235aa7187b03681cebed6e04b32678e"}], "stats": {"total": 170, "additions": 169, "deletions": 1}, "files": [{"sha": "a7c4f2fde36057e003714a287b2f789fbcbfe169", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/969a989d2bc9c60b8815378837d153a524ae76af/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/969a989d2bc9c60b8815378837d153a524ae76af/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=969a989d2bc9c60b8815378837d153a524ae76af", "patch": "@@ -1,3 +1,7 @@\n+2022-08-02  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Do not deduce changelog for root ChangeLog.\n+\n 2022-07-22  Martin Liska  <mliska@suse.cz>\n \n \t* git-commit-mklog.py: Do not parse -b argument."}, {"sha": "8f93050c16437bc6e642a472f121ab85cfc7ee0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/969a989d2bc9c60b8815378837d153a524ae76af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/969a989d2bc9c60b8815378837d153a524ae76af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=969a989d2bc9c60b8815378837d153a524ae76af", "patch": "@@ -1,3 +1,114 @@\n+2022-08-02  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/106510\n+\t* gimple-range-fold.cc (fur_source::register_outgoing_edges):\n+\t  Check for unsupported statements early.\n+\n+2022-08-02  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/106474\n+\t* gimple-range-cache.cc (ranger_cache::fill_block_cache): Query\n+\trange of equivalences that may contribute to the range.\n+\n+2022-08-02  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* btfout.cc (output_asm_btf_vlen_bytes): Do not use the CHAR\n+\tencoding bit in BTF.\n+\n+2022-08-02  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-fold.cc (fold_using_range::range_of_phi): Remove\n+\tirange check.\n+\t(tree_lower_bound): New.\n+\t(tree_upper_bound): New.\n+\t(fold_using_range::range_of_ssa_name_with_loop_info): Convert to\n+\tvrange.\n+\t* gimple-range-fold.h (range_of_ssa_name_with_loop_info): Change\n+\targument to vrange.\n+\n+2022-08-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-threadbackward.cc\n+\t(back_threader_profitability::profitable_path_p): Apply\n+\tsize constraints to all paths again.\n+\n+2022-08-02  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (finite_operands_p): New.\n+\t(frelop_early_resolve): New.\n+\t(default_frelop_fold_range): New.\n+\t(class foperator_equal): New.\n+\t(class foperator_not_equal): New.\n+\t(class foperator_lt): New.\n+\t(class foperator_le): New.\n+\t(class foperator_gt): New.\n+\t(class foperator_ge): New.\n+\t(class foperator_unordered): New.\n+\t(class foperator_ordered): New.\n+\t(class foperator_relop_unknown): New.\n+\t(floating_op_table::floating_op_table): Add above classes to\n+\tfloating op table.\n+\t* value-range.h (frange::supports_p): Enable.\n+\n+2022-08-02  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-core.h (struct tree_ssa_name): Add frange_info and\n+\treshuffle the rest.\n+\t* value-range-storage.cc (vrange_storage::alloc_slot): Add case\n+\tfor frange.\n+\t(vrange_storage::set_vrange): Same.\n+\t(vrange_storage::get_vrange): Same.\n+\t(vrange_storage::fits_p): Same.\n+\t(frange_storage_slot::alloc_slot): New.\n+\t(frange_storage_slot::set_frange): New.\n+\t(frange_storage_slot::get_frange): New.\n+\t(frange_storage_slot::fits_p): New.\n+\t* value-range-storage.h (class frange_storage_slot): New.\n+\n+2022-08-02  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* ipa-prop.cc (ipa_compute_jump_functions_for_edge): Limit ranger\n+\tquery to integrals.\n+\n+2022-08-02  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (frange::set): Initialize m_props and cleanup.\n+\n+2022-08-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106497\n+\t* tree-ssa-threadupdate.cc (fwd_jt_path_registry::update_cfg):\n+\tAlso verify we can copy EDGE_COPY_SRC_JOINER_BLOCK.\n+\n+2022-08-02  Martin Liska  <mliska@suse.cz>\n+\n+\t* profile.cc (compute_branch_probabilities): Dump details only\n+\tif TDF_DETAILS.\n+\t* symtab.cc (symtab_node::dump_base): Do not dump pointer unless\n+\tTDF_ADDRESS is used, it makes comparison harder.\n+\n+2022-08-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106498\n+\t* omp-expand.cc (expand_omp_taskreg): Do not perform virtual\n+\tSSA update here.\n+\t(expand_omp_for): Or here.\n+\t(execute_expand_omp): Instead schedule it here together\n+\twith CFG cleanup via TODO.\n+\n+2022-08-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR lto/106334\n+\t* dwarf2out.cc (dwarf2out_register_external_die): Adjust\n+\tassert.\n+\n+2022-08-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106495\n+\t* tree-ssa-threadbackward.cc\n+\t(back_threader_profitability::profitable_path_p): If known_edge\n+\tis probably never executed avoid threading.\n+\n 2022-08-01  David Malcolm  <dmalcolm@redhat.com>\n \n \t* doc/invoke.texi (-Wanalyzer-putenv-of-auto-var): Fix copy&paste"}, {"sha": "53995aad097f7c9ea84d9dbe92f6d8e92e1f7ae0", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/969a989d2bc9c60b8815378837d153a524ae76af/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/969a989d2bc9c60b8815378837d153a524ae76af/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=969a989d2bc9c60b8815378837d153a524ae76af", "patch": "@@ -1 +1 @@\n-20220802\n+20220803"}, {"sha": "5a47d452a8c11b190eb326bcdf3ed85891a27cc4", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/969a989d2bc9c60b8815378837d153a524ae76af/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/969a989d2bc9c60b8815378837d153a524ae76af/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=969a989d2bc9c60b8815378837d153a524ae76af", "patch": "@@ -1,3 +1,13 @@\n+2022-08-02  Immad Mir  <mirimmad@outlook.com>\n+\n+\tPR analyzer/106298\n+\t* sm-fd.cc (fd_state_machine::on_open): Add\n+\tcreat, dup, dup2 and dup3 functions.\n+\t(enum dup): New.\n+\t(fd_state_machine::valid_to_unchecked_state): New.\n+\t(fd_state_machine::on_creat): New.\n+\t(fd_state_machine::on_dup): New.\n+\n 2022-07-28  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/105893"}, {"sha": "109307b64f74011bd08233e8b99d5cf27a771da6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/969a989d2bc9c60b8815378837d153a524ae76af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/969a989d2bc9c60b8815378837d153a524ae76af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=969a989d2bc9c60b8815378837d153a524ae76af", "patch": "@@ -1,3 +1,46 @@\n+2022-08-02  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/106510\n+\t* gcc.dg/pr106510.c: New.\n+\n+2022-08-02  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/vrp-float-1.c: Adjust test so it passes.\n+\n+2022-08-02  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/106474\n+\t* g++.dg/pr106474.C: New.\n+\n+2022-08-02  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* gcc.dg/debug/btf/btf-int-1.c: Do not check for char bits in\n+\tbti_encoding and check for bool bits.\n+\n+2022-08-02  Immad Mir  <mirimmad@outlook.com>\n+\n+\tPR analyzer/106298\n+\t* gcc.dg/analyzer/fd-1.c: Add tests for 'creat'.\n+\t* gcc.dg/analyzer/fd-2.c: Likewise.\n+\t* gcc.dg/analyzer/fd-4.c: Likewise.\n+\t* gcc.dg/analyzer/fd-dup-1.c: New tests.\n+\n+2022-08-02  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* g++.dg/opt/pr94589-2.C: XFAIL.\n+\t* gcc.dg/tree-ssa/vrp-float-1.c: New test.\n+\t* gcc.dg/tree-ssa/vrp-float-11.c: New test.\n+\t* gcc.dg/tree-ssa/vrp-float-3.c: New test.\n+\t* gcc.dg/tree-ssa/vrp-float-4.c: New test.\n+\t* gcc.dg/tree-ssa/vrp-float-6.c: New test.\n+\t* gcc.dg/tree-ssa/vrp-float-7.c: New test.\n+\t* gcc.dg/tree-ssa/vrp-float-8.c: New test.\n+\n+2022-08-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106497\n+\t* gcc.dg/torture/pr106497.c: New testcase.\n+\n 2022-08-01  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.target/i386/addr-space-typeck-1.c: New test."}]}