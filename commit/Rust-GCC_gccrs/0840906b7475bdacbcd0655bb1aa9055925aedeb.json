{"sha": "0840906b7475bdacbcd0655bb1aa9055925aedeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg0MDkwNmI3NDc1YmRhY2JjZDA2NTViYjFhYTkwNTU5MjVhZWRlYg==", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-05-21T21:37:18Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:15Z"}, "message": "Add a compilation unit scope to unitify how scoping is done in GIMPLE conversion", "tree": {"sha": "59ca39744ccef22521b0d42a47d47fbbf82ade78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59ca39744ccef22521b0d42a47d47fbbf82ade78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0840906b7475bdacbcd0655bb1aa9055925aedeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0840906b7475bdacbcd0655bb1aa9055925aedeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0840906b7475bdacbcd0655bb1aa9055925aedeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0840906b7475bdacbcd0655bb1aa9055925aedeb/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b26c1f617c02b9a25f65a34abed58bfded990501", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b26c1f617c02b9a25f65a34abed58bfded990501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b26c1f617c02b9a25f65a34abed58bfded990501"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "0cc0694d7dbb868e8b408631451a894dd316bb50", "filename": "gcc/rust/backend/cscope.h", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0840906b7475bdacbcd0655bb1aa9055925aedeb/gcc%2Frust%2Fbackend%2Fcscope.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0840906b7475bdacbcd0655bb1aa9055925aedeb/gcc%2Frust%2Fbackend%2Fcscope.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Fcscope.h?ref=0840906b7475bdacbcd0655bb1aa9055925aedeb", "patch": "@@ -0,0 +1,105 @@\n+#pragma once\n+\n+#include \"rust-system.h\"\n+#include \"rust-backend.h\"\n+#include \"scope.h\"\n+\n+namespace Rust {\n+namespace Compile {\n+\n+class Scope\n+{\n+public:\n+  Scope (Backend *backend) : backend (backend) {}\n+\n+  ~Scope () {}\n+\n+  void Push ()\n+  {\n+    fndecls.Push ();\n+    vars.Push ();\n+    types.Push ();\n+  }\n+\n+  void Pop ()\n+  {\n+    fndecls.Pop ();\n+    vars.Pop ();\n+    types.Pop ();\n+  }\n+\n+  void PushCurrentFunction (std::string name, Bfunction *fn)\n+  {\n+    InsertFunction (name, fn);\n+    fns.push_back (fn);\n+  }\n+\n+  Bfunction *PopCurrentFunction ()\n+  {\n+    auto ret = fns.back ();\n+    fns.pop_back ();\n+    return ret;\n+  }\n+\n+  Bfunction *GetCurrentFndecl () { return fns.back (); }\n+\n+  void PushBlock (Bblock *block)\n+  {\n+    blocks.push_back (block);\n+    std::vector<Bstatement *> empty;\n+    context.push_back (empty);\n+  }\n+\n+  Bblock *PopBlock ()\n+  {\n+    auto ret = blocks.back ();\n+    blocks.pop_back ();\n+\n+    auto stmts = context.back ();\n+    context.pop_back ();\n+\n+    backend->block_add_statements (ret, stmts);\n+\n+    return ret;\n+  }\n+\n+  void AddStatement (Bstatement *stmt) { context.back ().push_back (stmt); }\n+\n+  void InsertFunction (std::string name, Bfunction *fn)\n+  {\n+    fndecls.Insert (name, fn);\n+  }\n+\n+  bool LookupFunction (std::string name, Bfunction **fn)\n+  {\n+    return fndecls.Lookup (name, fn);\n+  }\n+\n+  void InsertType (std::string name, Btype *type) { types.Insert (name, type); }\n+\n+  bool LookupType (std::string name, Btype **type)\n+  {\n+    return types.Lookup (name, type);\n+  }\n+\n+  void InsertVar (std::string name, Bvariable *var) { vars.Insert (name, var); }\n+\n+  bool LookupVar (std::string name, Bvariable **var)\n+  {\n+    return vars.Lookup (name, var);\n+  }\n+\n+private:\n+  Backend *backend;\n+\n+  ::std::vector<Bfunction *> fns;\n+  ::std::vector<Bblock *> blocks;\n+  ::std::vector< ::std::vector<Bstatement *> > context;\n+\n+  Analysis::Scope<Bfunction *> fndecls;\n+  Analysis::Scope<Bvariable *> vars;\n+  Analysis::Scope<Btype *> types;\n+};\n+\n+} // namespace Compile\n+} // namespace Rust"}]}