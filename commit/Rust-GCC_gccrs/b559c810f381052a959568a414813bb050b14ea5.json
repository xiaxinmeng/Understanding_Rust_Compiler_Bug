{"sha": "b559c810f381052a959568a414813bb050b14ea5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU1OWM4MTBmMzgxMDUyYTk1OTU2OGE0MTQ4MTNiYjA1MGIxNGVhNQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-09-09T22:17:54Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-09-09T22:17:54Z"}, "message": "opth-gen.awk: Generate mapping from cpp message reasons to the options that enable them.\n\ngcc/ChangeLog:\n\n2014-09-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* opth-gen.awk: Generate mapping from cpp message reasons to the\n\toptions that enable them.\n\t* doc/options.texi (CppReason): Document.\n\ngcc/c-family/ChangeLog:\n\n2014-09-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* c.opt: Add CppReason to various flags.\n\t(Wdate-time): Re-sort.\n\t* c-common.c: Include c-common.h earlier.\n\t(struct reason_option_codes_t): Delete.\n\t(c_option_controlling_cpp_error): Prefix global type and struct\n\twith cpp_.\n\nFrom-SVN: r215095", "tree": {"sha": "41ca6a27e407c630dc4967e1c13f17fe6e01bf14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41ca6a27e407c630dc4967e1c13f17fe6e01bf14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b559c810f381052a959568a414813bb050b14ea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b559c810f381052a959568a414813bb050b14ea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b559c810f381052a959568a414813bb050b14ea5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b559c810f381052a959568a414813bb050b14ea5/comments", "author": null, "committer": null, "parents": [{"sha": "1ef33fd4cd139a24524f0cd41b07ea9526dfacc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef33fd4cd139a24524f0cd41b07ea9526dfacc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef33fd4cd139a24524f0cd41b07ea9526dfacc5"}], "stats": {"total": 133, "additions": 76, "deletions": 57}, "files": [{"sha": "f7a5401b7e2ea25810b36b7650db300f7da56cfd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b559c810f381052a959568a414813bb050b14ea5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b559c810f381052a959568a414813bb050b14ea5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b559c810f381052a959568a414813bb050b14ea5", "patch": "@@ -1,3 +1,9 @@\n+2014-09-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* opth-gen.awk: Generate mapping from cpp message reasons to the\n+\toptions that enable them.\n+\t* doc/options.texi (CppReason): Document.\n+\n 2014-09-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* doc/invoke.texi (Wnormalized=): Update."}, {"sha": "a09ce72514df18313d7968fc57cf27380f2e1923", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b559c810f381052a959568a414813bb050b14ea5/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b559c810f381052a959568a414813bb050b14ea5/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b559c810f381052a959568a414813bb050b14ea5", "patch": "@@ -1,3 +1,12 @@\n+2014-09-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* c.opt: Add CppReason to various flags.\n+\t(Wdate-time): Re-sort.\n+\t* c-common.c: Include c-common.h earlier.\n+\t(struct reason_option_codes_t): Delete.\n+\t(c_option_controlling_cpp_error): Prefix global type and struct\n+\twith cpp_.\n+\n 2014-09-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* c.opt\t(Wnormalized): New."}, {"sha": "39be9569395588996a147ccfc088a807726cb85e", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 3, "deletions": 35, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b559c810f381052a959568a414813bb050b14ea5/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b559c810f381052a959568a414813bb050b14ea5/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=b559c810f381052a959568a414813bb050b14ea5", "patch": "@@ -20,6 +20,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"c-common.h\"\n #include \"tm.h\"\n #include \"intl.h\"\n #include \"tree.h\"\n@@ -32,7 +33,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"trans-mem.h\"\n #include \"flags.h\"\n #include \"c-pragma.h\"\n-#include \"c-common.h\"\n #include \"c-objc.h\"\n #include \"tm_p.h\"\n #include \"obstack.h\"\n@@ -9666,47 +9666,15 @@ c_parse_error (const char *gmsgid, enum cpp_ttype token_type,\n #undef catenate_messages\n }\n \n-/* Mapping for cpp message reasons to the options that enable them.  */\n-\n-struct reason_option_codes_t\n-{\n-  const int reason;\t\t/* cpplib message reason.  */\n-  const int option_code;\t/* gcc option that controls this message.  */\n-};\n-\n-static const struct reason_option_codes_t option_codes[] = {\n-  {CPP_W_BUILTIN_MACRO_REDEFINED,\tOPT_Wbuiltin_macro_redefined},\n-  {CPP_W_C90_C99_COMPAT,                OPT_Wc90_c99_compat},\n-  {CPP_W_COMMENTS,\t\t\tOPT_Wcomment},\n-  {CPP_W_CXX_OPERATOR_NAMES,\t\tOPT_Wc___compat},\n-  {CPP_W_DATE_TIME,\t\t\tOPT_Wdate_time},\n-  {CPP_W_DEPRECATED,\t\t\tOPT_Wdeprecated},\n-  {CPP_W_ENDIF_LABELS,\t\t\tOPT_Wendif_labels},\n-  {CPP_W_INVALID_PCH,\t\t\tOPT_Winvalid_pch},\n-  {CPP_W_LITERAL_SUFFIX,\t\tOPT_Wliteral_suffix},\n-  {CPP_W_LONG_LONG,\t\t\tOPT_Wlong_long},\n-  {CPP_W_MISSING_INCLUDE_DIRS,          OPT_Wmissing_include_dirs},\n-  {CPP_W_MULTICHAR,\t\t\tOPT_Wmultichar},\n-  {CPP_W_NORMALIZE,\t\t\tOPT_Wnormalized_},\n-  {CPP_W_PEDANTIC,                      OPT_Wpedantic},\n-  {CPP_W_TRADITIONAL,\t\t\tOPT_Wtraditional},\n-  {CPP_W_TRIGRAPHS,\t\t\tOPT_Wtrigraphs},\n-  {CPP_W_UNDEF,\t\t\t\tOPT_Wundef},\n-  {CPP_W_UNUSED_MACROS,\t\t\tOPT_Wunused_macros},\n-  {CPP_W_VARIADIC_MACROS,\t\tOPT_Wvariadic_macros},\n-  {CPP_W_WARNING_DIRECTIVE,\t\tOPT_Wcpp},\n-  {CPP_W_NONE,\t\t\t\t0}\n-};\n-\n /* Return the gcc option code associated with the reason for a cpp\n    message, or 0 if none.  */\n \n static int\n c_option_controlling_cpp_error (int reason)\n {\n-  const struct reason_option_codes_t *entry;\n+  const struct cpp_reason_option_codes_t *entry;\n \n-  for (entry = option_codes; entry->reason != CPP_W_NONE; entry++)\n+  for (entry = cpp_reason_option_codes; entry->reason != CPP_W_NONE; entry++)\n     {\n       if (entry->reason == reason)\n \treturn entry->option_code;"}, {"sha": "5e6182b2f4b8a99eac4b38d0a4e6053b8c02e063", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b559c810f381052a959568a414813bb050b14ea5/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b559c810f381052a959568a414813bb050b14ea5/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=b559c810f381052a959568a414813bb050b14ea5", "patch": "@@ -292,19 +292,19 @@ C ObjC C++ ObjC++ Var(warn_bool_compare) Warning LangEnabledBy(C ObjC C++ ObjC++\n Warn about boolean expression compared with an integer value different from true/false\n \n Wbuiltin-macro-redefined\n-C ObjC C++ ObjC++ CPP(warn_builtin_macro_redefined) Var(cpp_warn_builtin_macro_redefined) Init(1) Warning\n+C ObjC C++ ObjC++ CPP(warn_builtin_macro_redefined) CppReason(CPP_W_BUILTIN_MACRO_REDEFINED) Var(cpp_warn_builtin_macro_redefined) Init(1) Warning\n Warn when a built-in preprocessor macro is undefined or redefined\n \n Wc90-c99-compat\n-C ObjC CPP(cpp_warn_c90_c99_compat) Var(warn_c90_c99_compat) Init(-1) Warning\n+C ObjC CPP(cpp_warn_c90_c99_compat) CppReason(CPP_W_C90_C99_COMPAT) Var(warn_c90_c99_compat) Init(-1) Warning\n Warn about features not present in ISO C90, but present in ISO C99\n \n Wc99-c11-compat\n C ObjC Var(warn_c99_c11_compat) Init(-1) Warning\n Warn about features not present in ISO C99, but present in ISO C11\n \n Wc++-compat\n-C ObjC Var(warn_cxx_compat) CPP(warn_cxx_operator_names) Init(0) Warning\n+C ObjC Var(warn_cxx_compat) CPP(warn_cxx_operator_names) CppReason(CPP_W_CXX_OPERATOR_NAMES) Init(0) Warning\n Warn about C constructs that are not in the common subset of C and C++\n \n Wc++0x-compat\n@@ -328,7 +328,7 @@ C ObjC C++ ObjC++ Var(warn_clobbered) Warning EnabledBy(Wextra)\n Warn about variables that might be changed by \\\"longjmp\\\" or \\\"vfork\\\"\n \n Wcomment\n-C ObjC C++ ObjC++ CPP(warn_comments) Var(cpp_warn_comment) Init(0) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+C ObjC C++ ObjC++ CPP(warn_comments) CppReason(CPP_W_COMMENTS) Var(cpp_warn_comment) Init(0) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about possibly nested block comments, and C++ comments spanning more than one physical line\n \n Wcomments\n@@ -347,10 +347,18 @@ Wconversion-null\n C++ ObjC++ Var(warn_conversion_null) Init(1) Warning\n Warn for converting NULL from/to a non-pointer type\n \n+Wcpp\n+C ObjC C++ ObjC++ CppReason(CPP_W_WARNING_DIRECTIVE)\n+; Documented in common.opt\n+\n Wctor-dtor-privacy\n C++ ObjC++ Var(warn_ctor_dtor_privacy) Warning\n Warn when all constructors and destructors are private\n \n+Wdate-time\n+C ObjC C++ ObjC++ CPP(warn_date_time) CppReason(CPP_W_DATE_TIME) Var(cpp_warn_date_time) Init(0) Warning\n+Warn about __TIME__, __DATE__ and __TIMESTAMP__ usage\n+\n Wdeclaration-after-statement\n C ObjC Var(warn_declaration_after_statement) Init(-1) Warning\n Warn when a declaration is found after a statement\n@@ -368,7 +376,7 @@ LangEnabledBy(C++ ObjC++,Weffc++)\n ;\n \n Wdeprecated\n-C C++ ObjC ObjC++ CPP(cpp_warn_deprecated) Var(warn_deprecated) Init(1) Warning\n+C C++ ObjC ObjC++ CPP(cpp_warn_deprecated) CppReason(CPP_W_DEPRECATED) Var(warn_deprecated) Init(1) Warning\n Warn if a deprecated compiler feature, class, method, or field is used\n \n Wdesignated-init\n@@ -392,7 +400,7 @@ C ObjC C++ ObjC++ Var(warn_empty_body) Warning EnabledBy(Wextra)\n Warn about an empty body in an if or else statement\n \n Wendif-labels\n-C ObjC C++ ObjC++ CPP(warn_endif_labels) Var(cpp_warn_endif_labels) Init(1) Warning LangEnabledBy(C ObjC C++ ObjC++,Wpedantic)\n+C ObjC C++ ObjC++ CPP(warn_endif_labels) CppReason(CPP_W_ENDIF_LABELS) Var(cpp_warn_endif_labels) Init(1) Warning LangEnabledBy(C ObjC C++ ObjC++,Wpedantic)\n Warn about stray tokens after #elif and #endif\n \n Wenum-compare\n@@ -503,15 +511,15 @@ C++ ObjC++ Var(warn_invalid_offsetof) Init(1) Warning\n Warn about invalid uses of the \\\"offsetof\\\" macro\n \n Winvalid-pch\n-C ObjC C++ ObjC++ CPP(warn_invalid_pch) Var(cpp_warn_invalid_pch) Init(0) Warning\n+C ObjC C++ ObjC++ CPP(warn_invalid_pch) CppReason(CPP_W_INVALID_PCH) Var(cpp_warn_invalid_pch) Init(0) Warning\n Warn about PCH files that are found but not used\n \n Wjump-misses-init\n C ObjC Var(warn_jump_misses_init) Warning LangEnabledby(C ObjC,Wc++-compat)\n Warn when a jump misses a variable initialization\n \n Wliteral-suffix\n-C++ ObjC++ CPP(warn_literal_suffix) Var(cpp_warn_literal_suffix) Init(1) Warning\n+C++ ObjC++ CPP(warn_literal_suffix) CppReason(CPP_W_LITERAL_SUFFIX) Var(cpp_warn_literal_suffix) Init(1) Warning\n Warn when a string or character literal is followed by a ud-suffix which does not begin with an underscore.\n \n Wlogical-op\n@@ -523,7 +531,7 @@ C ObjC C++ ObjC++ Var(warn_logical_not_paren) Warning LangEnabledBy(C ObjC C++ O\n Warn when logical not is used on the left hand side operand of a comparison\n \n Wlong-long\n-C ObjC C++ ObjC++ CPP(cpp_warn_long_long) Var(warn_long_long) Init(-1) Warning LangEnabledBy(C ObjC,Wc90-c99-compat)\n+C ObjC C++ ObjC++ CPP(cpp_warn_long_long) CppReason(CPP_W_LONG_LONG) Var(warn_long_long) Init(-1) Warning LangEnabledBy(C ObjC,Wc90-c99-compat)\n Do not warn about using \\\"long long\\\" when -pedantic\n \n Wmain\n@@ -583,7 +591,7 @@ C ObjC C++ ObjC++ Alias(Wsuggest-attribute=format)\n ;\n \n Wmissing-include-dirs\n-C ObjC C++ ObjC++ CPP(warn_missing_include_dirs) Var(cpp_warn_missing_include_dirs) Init(0) Warning\n+C ObjC C++ ObjC++ CPP(warn_missing_include_dirs) CppReason(CPP_W_MISSING_INCLUDE_DIRS) Var(cpp_warn_missing_include_dirs) Init(0) Warning\n Warn about user-specified include directories that do not exist\n \n Wmissing-parameter-type\n@@ -598,7 +606,7 @@ Wmudflap\n C ObjC C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n \n Wmultichar\n-C ObjC C++ ObjC++ CPP(warn_multichar) Var(cpp_warn_multichar) Init(0) Warning\n+C ObjC C++ ObjC++ CPP(warn_multichar) CppReason(CPP_W_MULTICHAR) Var(cpp_warn_multichar) Init(0) Warning\n Warn about use of multi-character character constants\n \n Wnarrowing\n@@ -638,7 +646,7 @@ C ObjC C++ ObjC++ Alias(Wnormalized=,nfc,none)\n ;\n \n Wnormalized=\n-C ObjC C++ ObjC++ RejectNegative Joined Warning CPP(warn_normalize) Init(normalized_C) Var(cpp_warn_normalize) Enum(cpp_normalize_level)\n+C ObjC C++ ObjC++ RejectNegative Joined Warning CPP(warn_normalize) CppReason(CPP_W_NORMALIZE) Init(normalized_C) Var(cpp_warn_normalize) Enum(cpp_normalize_level)\n -Wnormalized=<none|id|nfc|nfkc>\tWarn about non-normalised Unicode strings\n \n ; Required for these enum values.\n@@ -697,7 +705,7 @@ C ObjC C++ ObjC++ Var(warn_parentheses) Warning LangEnabledBy(C ObjC C++ ObjC++,\n Warn about possibly missing parentheses\n \n Wpedantic\n-C ObjC C++ ObjC++ CPP(cpp_pedantic) Warning\n+C ObjC C++ ObjC++ CPP(cpp_pedantic) CppReason(CPP_W_PEDANTIC) Warning\n ; Documented in common.opt\n \n Wpmf-conversions\n@@ -724,10 +732,6 @@ Wpragmas\n C ObjC C++ ObjC++ Var(warn_pragmas) Init(1) Warning\n Warn about misuses of pragmas\n \n-Wdate-time\n-C ObjC C++ ObjC++ CPP(warn_date_time) Var(cpp_warn_date_time) Init(0) Warning\n-Warn about __TIME__, __DATE__ and __TIMESTAMP__ usage\n-\n Wproperty-assign-default\n ObjC ObjC++ Var(warn_property_assign_default) Init(1) Warning\n Warn if a property for an Objective-C object has no assign semantics specified\n@@ -809,23 +813,23 @@ C ObjC C++ ObjC++ Warning\n ; Documented in common.opt\n \n Wtraditional\n-C ObjC CPP(cpp_warn_traditional) Var(warn_traditional) Init(0) Warning\n+C ObjC CPP(cpp_warn_traditional) CppReason(CPP_W_TRADITIONAL) Var(warn_traditional) Init(0) Warning\n Warn about features not present in traditional C\n \n Wtraditional-conversion\n C ObjC Var(warn_traditional_conversion) Warning\n Warn of prototypes causing type conversions different from what would happen in the absence of prototype\n \n Wtrigraphs\n-C ObjC C++ ObjC++ CPP(warn_trigraphs) Var(cpp_warn_trigraphs) Init(2) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+C ObjC C++ ObjC++ CPP(warn_trigraphs) CppReason(CPP_W_TRIGRAPHS) Var(cpp_warn_trigraphs) Init(2) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn if trigraphs are encountered that might affect the meaning of the program\n \n Wundeclared-selector\n ObjC ObjC++ Var(warn_undeclared_selector) Warning\n Warn about @selector()s without previously declared methods\n \n Wundef\n-C ObjC C++ ObjC++ CPP(warn_undef) Var(cpp_warn_undef) Init(0) Warning\n+C ObjC C++ ObjC++ CPP(warn_undef) CppReason(CPP_W_UNDEF) Var(cpp_warn_undef) Init(0) Warning\n Warn if an undefined macro is used in an #if directive\n \n Wuninitialized\n@@ -853,15 +857,15 @@ C ObjC C++ ObjC++ Var(warn_unused_local_typedefs) Warning EnabledBy(Wunused)\n Warn when typedefs locally defined in a function are not used\n \n Wunused-macros\n-C ObjC C++ ObjC++ Var(cpp_warn_unused_macros) Warning\n+C ObjC C++ ObjC++ CppReason(CPP_W_UNUSED_MACROS) Var(cpp_warn_unused_macros) Warning\n Warn about macros defined in the main file that are not used\n \n Wunused-result\n C ObjC C++ ObjC++ Var(warn_unused_result) Init(1) Warning\n Warn if a caller of a function, marked with attribute warn_unused_result, does not use its return value\n \n Wvariadic-macros\n-C ObjC C++ ObjC++ CPP(warn_variadic_macros) Var(cpp_warn_variadic_macros) Init(0) Warning LangEnabledBy(C ObjC C++ ObjC++,Wpedantic)\n+C ObjC C++ ObjC++ CPP(warn_variadic_macros) CppReason(CPP_W_VARIADIC_MACROS) Var(cpp_warn_variadic_macros) Init(0) Warning LangEnabledBy(C ObjC C++ ObjC++,Wpedantic)\n Warn about using variadic macros\n \n Wvariadic-macros"}, {"sha": "bcffdf86aaa329fce4dd0ae58029bb289d5ca58f", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b559c810f381052a959568a414813bb050b14ea5/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b559c810f381052a959568a414813bb050b14ea5/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=b559c810f381052a959568a414813bb050b14ea5", "patch": "@@ -488,4 +488,9 @@ The state of this option should be kept in sync with the preprocessor\n option @var{var}.  If this property is set, then properties @code{Var}\n and @code{Init} must be set as well.\n \n+@item CppReason(@var{CPP_W_Enum})\n+This warning option corresponds to @code{cpplib.h} warning reason code\n+@var{CPP_W_Enum}.  This should only be used for warning options of the\n+C-family front-ends.\n+\n @end table"}, {"sha": "cbc7ab53b881a34a343dea5ab8ebe11412732568", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b559c810f381052a959568a414813bb050b14ea5/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b559c810f381052a959568a414813bb050b14ea5/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=b559c810f381052a959568a414813bb050b14ea5", "patch": "@@ -479,5 +479,32 @@ print \"  OPT_SPECIAL_program_name,\"\n print \"  OPT_SPECIAL_input_file\"\n print \"};\"\n print \"\"\n+print \"#ifdef GCC_C_COMMON_H\"\n+print \"/* Mapping from cpp message reasons to the options that enable them.  */\"\n+print \"#include <cpplib.h>\"\n+print \"struct cpp_reason_option_codes_t\"\n+print \"{\"\n+print \"  const int reason;\t\t/* cpplib message reason.  */\"\n+print \"  const int option_code;\t/* gcc option that controls this message.  */\"\n+print \"};\"\n+print \"\"\n+print \"static const struct cpp_reason_option_codes_t cpp_reason_option_codes[] = {\"\n+for (i = 0; i < n_opts; i++) {\n+    # With identical flags, pick only the last one.  The\n+    # earlier loop ensured that it has all flags merged,\n+    # and a nonempty help text if one of the texts was nonempty.\n+    while( i + 1 != n_opts && opts[i] == opts[i + 1] ) {\n+        i++;\n+    }\n+    cpp_reason = nth_arg(0, opt_args(\"CppReason\", flags[i]));\n+    if (cpp_reason != \"\") {\n+        cpp_reason = cpp_reason \",\";\n+        printf(\"  {%-40s %s},\\n\", cpp_reason, opt_enum(opts[i]))\n+    }\n+}\n+printf(\"  {%-40s 0},\\n\", \"CPP_W_NONE,\")\n+print \"};\"\n+print \"#endif\"\n+print \"\"\n print \"#endif /* OPTIONS_H */\"\n }"}]}