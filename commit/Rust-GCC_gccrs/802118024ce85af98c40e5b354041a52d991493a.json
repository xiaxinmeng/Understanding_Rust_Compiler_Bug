{"sha": "802118024ce85af98c40e5b354041a52d991493a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAyMTE4MDI0Y2U4NWFmOThjNDBlNWIzNTQwNDFhNTJkOTkxNDkzYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T13:53:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T13:53:40Z"}, "message": "[multiple changes]\n\n2014-07-31  Arnaud Charlet  <charlet@adacore.com>\n\n\t* einfo.adb: Remove VMS specific code.\n\t* exp_attr.adb: Remove VAX specific code.\n\t* set_targ.adb: Remove handling of VAX_Float.\n\t* sem_vfpt.adb: Remove references to Vax_Native.\n\t* sem_attr.adb (Is_VAX_Float): Remove ref to VAX_Native.\n\n2014-07-31  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch4.adb: Minor reformatting.\n\nFrom-SVN: r213371", "tree": {"sha": "586469f31210d053058fb0b01c5e8a8fd796648b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/586469f31210d053058fb0b01c5e8a8fd796648b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/802118024ce85af98c40e5b354041a52d991493a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/802118024ce85af98c40e5b354041a52d991493a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/802118024ce85af98c40e5b354041a52d991493a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/802118024ce85af98c40e5b354041a52d991493a/comments", "author": null, "committer": null, "parents": [{"sha": "3f1be5bec33bbf2131d80a33d782ccca5882f7ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f1be5bec33bbf2131d80a33d782ccca5882f7ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f1be5bec33bbf2131d80a33d782ccca5882f7ba"}], "stats": {"total": 198, "additions": 54, "deletions": 144}, "files": [{"sha": "db882b071de1a4497db68b59b45a0e1bbdffa52b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/802118024ce85af98c40e5b354041a52d991493a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/802118024ce85af98c40e5b354041a52d991493a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=802118024ce85af98c40e5b354041a52d991493a", "patch": "@@ -1,3 +1,15 @@\n+2014-07-31  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* einfo.adb: Remove VMS specific code.\n+\t* exp_attr.adb: Remove VAX specific code.\n+\t* set_targ.adb: Remove handling of VAX_Float.\n+\t* sem_vfpt.adb: Remove references to Vax_Native.\n+\t* sem_attr.adb (Is_VAX_Float): Remove ref to VAX_Native.\n+\n+2014-07-31  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch4.adb: Minor reformatting.\n+\n 2014-07-31  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gcc-interface/trans.c, gcc-interface/misc.c: Remove references"}, {"sha": "a3e77a83fd995b63b1f5f01687affa47f2b8ece3", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/802118024ce85af98c40e5b354041a52d991493a/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/802118024ce85af98c40e5b354041a52d991493a/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=802118024ce85af98c40e5b354041a52d991493a", "patch": "@@ -8178,9 +8178,8 @@ package body Einfo is\n             return Empty;\n          end if;\n \n-      --  For non-incomplete, non-private types, return the type itself\n-      --  Also for entities that are not types at all return the entity\n-      --  itself.\n+      --  For non-incomplete, non-private types, return the type itself Also\n+      --  for entities that are not types at all return the entity itself.\n \n       else\n          return Id;\n@@ -8191,7 +8190,10 @@ package body Einfo is\n    -- Vax_Float --\n    ---------------\n \n+   --  To be removed ???\n+\n    function Vax_Float (Id : E) return B is\n+      pragma Unreferenced (Id);\n    begin\n       return False;\n    end Vax_Float;"}, {"sha": "a90b777de750673ebf8927f9322fd82c9b2cd15d", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 16, "deletions": 65, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/802118024ce85af98c40e5b354041a52d991493a/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/802118024ce85af98c40e5b354041a52d991493a/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=802118024ce85af98c40e5b354041a52d991493a", "patch": "@@ -38,7 +38,6 @@ with Exp_Pakd; use Exp_Pakd;\n with Exp_Strm; use Exp_Strm;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n-with Exp_VFpt; use Exp_VFpt;\n with Fname;    use Fname;\n with Freeze;   use Freeze;\n with Gnatvsn;  use Gnatvsn;\n@@ -6401,12 +6400,6 @@ package body Exp_Attr is\n             begin\n                case Float_Rep (Btyp) is\n \n-                  --  For vax fpt types, call appropriate routine in special\n-                  --  vax floating point unit. No need to worry about loads in\n-                  --  this case, since these types have no signalling NaN's.\n-\n-                  when VAX_Native => Expand_Vax_Valid (N);\n-\n                   --  The AAMP back end handles Valid for floating-point types\n \n                   when AAMP =>\n@@ -7392,78 +7385,36 @@ package body Exp_Attr is\n       Fat_Type : out Entity_Id;\n       Fat_Pkg  : out RE_Id)\n    is\n-      Btyp : constant Entity_Id := Base_Type (T);\n       Rtyp : constant Entity_Id := Root_Type (T);\n-      Digs : constant Nat       := UI_To_Int (Digits_Value (Btyp));\n \n    begin\n-      --  If the base type is VAX float, then get appropriate VAX float type\n-\n-      if Vax_Float (Btyp) then\n-         case Digs is\n-            when 6 =>\n-               Fat_Type := RTE (RE_Fat_VAX_F);\n-               Fat_Pkg  := RE_Attr_VAX_F_Float;\n-\n-            when 9 =>\n-               Fat_Type := RTE (RE_Fat_VAX_D);\n-               Fat_Pkg  := RE_Attr_VAX_D_Float;\n-\n-            when 15 =>\n-               Fat_Type := RTE (RE_Fat_VAX_G);\n-               Fat_Pkg  := RE_Attr_VAX_G_Float;\n-\n-            when others =>\n-               raise Program_Error;\n-         end case;\n-\n-      --  If root type is VAX float, this is the case where the library has\n-      --  been recompiled in VAX float mode, and we have an IEEE float type.\n-      --  This is when we use the special IEEE Fat packages.\n-\n-      elsif Vax_Float (Rtyp) then\n-         case Digs is\n-            when 6 =>\n-               Fat_Type := RTE (RE_Fat_IEEE_Short);\n-               Fat_Pkg  := RE_Attr_IEEE_Short;\n+      --  All we do is use the root type (historically this dealt with\n+      --  VAX-float .. to be cleaned up further later ???)\n \n-            when 15 =>\n-               Fat_Type := RTE (RE_Fat_IEEE_Long);\n-               Fat_Pkg  := RE_Attr_IEEE_Long;\n+      Fat_Type := Rtyp;\n \n-            when others =>\n-               raise Program_Error;\n-         end case;\n+      if Fat_Type = Standard_Short_Float then\n+         Fat_Pkg := RE_Attr_Short_Float;\n \n-      --  If neither the base type nor the root type is VAX_Native then VAX\n-      --  float is out of the picture, and we can just use the root type.\n+      elsif Fat_Type = Standard_Float then\n+         Fat_Pkg := RE_Attr_Float;\n \n-      else\n-         Fat_Type := Rtyp;\n-\n-         if Fat_Type = Standard_Short_Float then\n-            Fat_Pkg := RE_Attr_Short_Float;\n-\n-         elsif Fat_Type = Standard_Float then\n-            Fat_Pkg := RE_Attr_Float;\n-\n-         elsif Fat_Type = Standard_Long_Float then\n-            Fat_Pkg := RE_Attr_Long_Float;\n+      elsif Fat_Type = Standard_Long_Float then\n+         Fat_Pkg := RE_Attr_Long_Float;\n \n-         elsif Fat_Type = Standard_Long_Long_Float then\n-            Fat_Pkg := RE_Attr_Long_Long_Float;\n+      elsif Fat_Type = Standard_Long_Long_Float then\n+         Fat_Pkg := RE_Attr_Long_Long_Float;\n \n          --  Universal real (which is its own root type) is treated as being\n          --  equivalent to Standard.Long_Long_Float, since it is defined to\n          --  have the same precision as the longest Float type.\n \n-         elsif Fat_Type = Universal_Real then\n-            Fat_Type := Standard_Long_Long_Float;\n-            Fat_Pkg := RE_Attr_Long_Long_Float;\n+      elsif Fat_Type = Universal_Real then\n+         Fat_Type := Standard_Long_Long_Float;\n+         Fat_Pkg := RE_Attr_Long_Long_Float;\n \n-         else\n-            raise Program_Error;\n-         end if;\n+      else\n+         raise Program_Error;\n       end if;\n    end Find_Fat_Info;\n "}, {"sha": "a1aadc2543c87cc54267e265dc2bf74393be1984", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/802118024ce85af98c40e5b354041a52d991493a/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/802118024ce85af98c40e5b354041a52d991493a/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=802118024ce85af98c40e5b354041a52d991493a", "patch": "@@ -2161,29 +2161,6 @@ package body Exp_Ch11 is\n       end case;\n    end Get_RT_Exception_Name;\n \n-   ----------------------\n-   -- Is_Non_Ada_Error --\n-   ----------------------\n-\n-   function Is_Non_Ada_Error (E : Entity_Id) return Boolean is\n-   begin\n-      if not OpenVMS_On_Target then\n-         return False;\n-      end if;\n-\n-      Get_Name_String (Chars (E));\n-\n-      --  Note: it is a little irregular for the body of exp_ch11 to know\n-      --  the details of the encoding scheme for names, but on the other\n-      --  hand, gigi knows them, and this is for gigi's benefit anyway.\n-\n-      if Name_Buffer (1 .. 30) /= \"system__aux_dec__non_ada_error\" then\n-         return False;\n-      end if;\n-\n-      return True;\n-   end Is_Non_Ada_Error;\n-\n    ----------------------------\n    -- Warn_If_No_Propagation --\n    ----------------------------"}, {"sha": "ab93d5d5bc6f4c5e13f041bd0a8e7cf578077308", "filename": "gcc/ada/exp_ch11.ads", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/802118024ce85af98c40e5b354041a52d991493a/gcc%2Fada%2Fexp_ch11.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/802118024ce85af98c40e5b354041a52d991493a/gcc%2Fada%2Fexp_ch11.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.ads?ref=802118024ce85af98c40e5b354041a52d991493a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -83,11 +83,6 @@ package Exp_Ch11 is\n    --  the Rcheck procedure for Code. The name is appended to Namet.Name_Buffer\n    --  without the __gnat_rcheck_ prefix.\n \n-   function Is_Non_Ada_Error (E : Entity_Id) return Boolean;\n-   --  This function is provided for Gigi use. It returns True if operating on\n-   --  VMS, and the argument E is the entity for System.Aux_Dec.Non_Ada_Error.\n-   --  This is used to generate the special matching code for this exception.\n-\n    procedure Possible_Local_Raise (N : Node_Id; E : Entity_Id);\n    --  This procedure is called whenever node N might cause the back end\n    --  to generate a local raise for a local Constraint/Program/Storage_Error"}, {"sha": "e0d2d9eec72cb0132fb717d1cbb835bab055fb96", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/802118024ce85af98c40e5b354041a52d991493a/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/802118024ce85af98c40e5b354041a52d991493a/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=802118024ce85af98c40e5b354041a52d991493a", "patch": "@@ -6926,11 +6926,9 @@ package body Sem_Attr is\n       ------------------\n \n       function Is_VAX_Float (Typ : Entity_Id) return Boolean is\n+         pragma Unreferenced (Typ);\n       begin\n-         return\n-           Is_Floating_Point_Type (Typ)\n-             and then\n-               (Float_Format = 'V' or else Float_Rep (Typ) = VAX_Native);\n+         return False;\n       end Is_VAX_Float;\n \n       --------------"}, {"sha": "7cbf593ab0f40800ba64ef145e8a1e018980dc2f", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/802118024ce85af98c40e5b354041a52d991493a/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/802118024ce85af98c40e5b354041a52d991493a/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=802118024ce85af98c40e5b354041a52d991493a", "patch": "@@ -74,17 +74,17 @@ package body Sem_Ch4 is\n    --  operand has been analyzed. See Analyze_Concatenation for details.\n \n    procedure Analyze_Expression (N : Node_Id);\n-   --  For expressions that are not names, this is just a call to analyze.\n-   --  If the expression is a name, it may be a call to a parameterless\n-   --  function, and if so must be converted into an explicit call node\n-   --  and analyzed as such. This deproceduring must be done during the first\n-   --  pass of overload resolution, because otherwise a procedure call with\n-   --  overloaded actuals may fail to resolve.\n+   --  For expressions that are not names, this is just a call to analyze. If\n+   --  the expression is a name, it may be a call to a parameterless function,\n+   --  and if so must be converted into an explicit call node and analyzed as\n+   --  such. This deproceduring must be done during the first pass of overload\n+   --  resolution, because otherwise a procedure call with overloaded actuals\n+   --  may fail to resolve.\n \n    procedure Analyze_Operator_Call (N : Node_Id; Op_Id : Entity_Id);\n-   --  Analyze a call of the form \"+\"(x, y), etc. The prefix of the call\n-   --  is an operator name or an expanded name whose selector is an operator\n-   --  name, and one possible interpretation is as a predefined operator.\n+   --  Analyze a call of the form \"+\"(x, y), etc. The prefix of the call is an\n+   --  operator name or an expanded name whose selector is an operator name,\n+   --  and one possible interpretation is as a predefined operator.\n \n    procedure Analyze_Overloaded_Selected_Component (N : Node_Id);\n    --  If the prefix of a selected_component is overloaded, the proper\n@@ -132,7 +132,7 @@ package body Sem_Ch4 is\n    procedure Check_Misspelled_Selector\n      (Prefix : Entity_Id;\n       Sel    : Node_Id);\n-   --  Give possible misspelling diagnostic if Sel is likely to be a mis-\n+   --  Give possible misspelling message if Sel seems likely to be a mis-\n    --  spelling of one of the selectors of the Prefix. This is called by\n    --  Analyze_Selected_Component after producing an invalid selector error\n    --  message.\n@@ -147,16 +147,16 @@ package body Sem_Ch4 is\n      (L, R  : Node_Id;\n       Op_Id : Entity_Id;\n       N     : Node_Id);\n-   --  L and R are the operands of an arithmetic operator. Find\n-   --  consistent pairs of interpretations for L and R that have a\n-   --  numeric type consistent with the semantics of the operator.\n+   --  L and R are the operands of an arithmetic operator. Find consistent\n+   --  pairs of interpretations for L and R that have a numeric type consistent\n+   --  with the semantics of the operator.\n \n    procedure Find_Comparison_Types\n      (L, R  : Node_Id;\n       Op_Id : Entity_Id;\n       N     : Node_Id);\n-   --  L and R are operands of a comparison operator. Find consistent\n-   --  pairs of interpretations for L and R.\n+   --  L and R are operands of a comparison operator. Find consistent pairs of\n+   --  interpretations for L and R.\n \n    procedure Find_Concatenation_Types\n      (L, R  : Node_Id;"}, {"sha": "d81298ee47453f1be8da2da392addce2a04774c8", "filename": "gcc/ada/sem_vfpt.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/802118024ce85af98c40e5b354041a52d991493a/gcc%2Fada%2Fsem_vfpt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/802118024ce85af98c40e5b354041a52d991493a/gcc%2Fada%2Fsem_vfpt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_vfpt.adb?ref=802118024ce85af98c40e5b354041a52d991493a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,7 +42,6 @@ package body Sem_VFpt is\n       Init_Size         (Base_Type (E), 64);\n       Init_Alignment    (Base_Type (E));\n       Init_Digits_Value (Base_Type (E), VAXDF_Digits);\n-      Set_Float_Rep     (Base_Type (E), VAX_Native);\n       Set_Float_Bounds  (Base_Type (E));\n \n       Init_Size         (E, 64);\n@@ -62,7 +61,6 @@ package body Sem_VFpt is\n       Init_Size         (Base_Type (E), 32);\n       Init_Alignment    (Base_Type (E));\n       Init_Digits_Value (Base_Type (E), VAXFF_Digits);\n-      Set_Float_Rep     (Base_Type (E), VAX_Native);\n       Set_Float_Bounds  (Base_Type (E));\n \n       Init_Size         (E, 32);\n@@ -82,7 +80,6 @@ package body Sem_VFpt is\n       Init_Size         (Base_Type (E), 64);\n       Init_Alignment    (Base_Type (E));\n       Init_Digits_Value (Base_Type (E), VAXGF_Digits);\n-      Set_Float_Rep     (Base_Type (E), VAX_Native);\n       Set_Float_Bounds  (Base_Type (E));\n \n       Init_Size         (E, 64);"}, {"sha": "46f40cc047dfd3580e1e2b8d92a8f1baf686cc78", "filename": "gcc/ada/set_targ.adb", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/802118024ce85af98c40e5b354041a52d991493a/gcc%2Fada%2Fset_targ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/802118024ce85af98c40e5b354041a52d991493a/gcc%2Fada%2Fset_targ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fset_targ.adb?ref=802118024ce85af98c40e5b354041a52d991493a", "patch": "@@ -225,26 +225,8 @@ package body Set_Targ is\n             Write_Str (\"pragma Float_Representation (\");\n \n             case Float_Rep is\n-               when IEEE_Binary =>\n-                  Write_Str (\"IEEE\");\n-\n-               when VAX_Native =>\n-                  case Digs is\n-                     when  6 =>\n-                        Write_Str (\"VAXF\");\n-\n-                     when  9 =>\n-                        Write_Str (\"VAXD\");\n-\n-                     when 15 =>\n-                        Write_Str (\"VAXG\");\n-\n-                     when others =>\n-                        Write_Str (\"VAX_\");\n-                        Write_Int (Int (Digs));\n-                  end case;\n-\n-               when AAMP =>         Write_Str (\"AAMP\");\n+               when IEEE_Binary => Write_Str (\"IEEE\");\n+               when AAMP        => Write_Str (\"AAMP\");\n             end case;\n \n             Write_Line (\", \" & T (1 .. Last) & \");\");\n@@ -459,8 +441,6 @@ package body Set_Targ is\n             case E.FLOAT_REP is\n                when IEEE_Binary =>\n                   AddC ('I');\n-               when VAX_Native  =>\n-                  AddC ('V');\n                when AAMP        =>\n                   AddC ('A');\n             end case;\n@@ -709,8 +689,6 @@ package body Set_Targ is\n             case Buffer (N) is\n                when 'I'    =>\n                   E.FLOAT_REP := IEEE_Binary;\n-               when 'V'    =>\n-                  E.FLOAT_REP := VAX_Native;\n                when 'A'    =>\n                   E.FLOAT_REP := AAMP;\n                when others =>"}]}