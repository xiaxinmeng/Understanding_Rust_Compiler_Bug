{"sha": "d53e2f9954b227ebb8734f921e235c6cb90019ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUzZTJmOTk1NGIyMjdlYmI4NzM0ZjkyMWUyMzVjNmNiOTAwMTlhZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-06-19T14:06:53Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-06-19T14:06:53Z"}, "message": "tree-ssa-forwprop.c (simplify_bitwise_binary_boolean): New function.\n\n\t* tree-ssa-forwprop.c (simplify_bitwise_binary_boolean): New function.\n\t(simplify_bitwise_binary): Use it to simpify certain binary ops on\n\tbooleans.\n\n\t* gcc.dg/tree-ssa/forwprop-28.c: New test.\n\nFrom-SVN: r200201", "tree": {"sha": "d21098a62108b8186e6d4b3c4340baa42780dcaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d21098a62108b8186e6d4b3c4340baa42780dcaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d53e2f9954b227ebb8734f921e235c6cb90019ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d53e2f9954b227ebb8734f921e235c6cb90019ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d53e2f9954b227ebb8734f921e235c6cb90019ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d53e2f9954b227ebb8734f921e235c6cb90019ae/comments", "author": null, "committer": null, "parents": [{"sha": "89e7fc04af656d11cb03e5e64ab1489e7fd256e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89e7fc04af656d11cb03e5e64ab1489e7fd256e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89e7fc04af656d11cb03e5e64ab1489e7fd256e5"}], "stats": {"total": 170, "additions": 169, "deletions": 1}, "files": [{"sha": "0ecf5ba5ccb5ec6fd43030aa177f7c68422928cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d53e2f9954b227ebb8734f921e235c6cb90019ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d53e2f9954b227ebb8734f921e235c6cb90019ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d53e2f9954b227ebb8734f921e235c6cb90019ae", "patch": "@@ -1,3 +1,9 @@\n+2013-06-19  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-forwprop.c (simplify_bitwise_binary_boolean): New function.\n+\t(simplify_bitwise_binary): Use it to simpify certain binary ops on\n+\tbooleans.\n+\n 2013-06-19  Sofiane Naci  <sofiane.naci@arm.com>\n \n \t* config/arm/vfp.md: Move VFP instruction classification documentation"}, {"sha": "c932a798b8f52c5846dc3ed43ecb12c8d72a1206", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d53e2f9954b227ebb8734f921e235c6cb90019ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d53e2f9954b227ebb8734f921e235c6cb90019ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d53e2f9954b227ebb8734f921e235c6cb90019ae", "patch": "@@ -1,3 +1,7 @@\n+2013-06-19  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/forwprop-28.c: New test.\n+\n 2013-06-19  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/57638"}, {"sha": "09d96adacac85c6107dd0de19cac39d514564096", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-28.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d53e2f9954b227ebb8734f921e235c6cb90019ae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d53e2f9954b227ebb8734f921e235c6cb90019ae/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-28.c?ref=d53e2f9954b227ebb8734f921e235c6cb90019ae", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-forwprop1\" } */\n+\n+extern char *frob (void);\n+extern _Bool testit (void);\n+\n+test (int code)\n+{\n+  char *temp = frob ();\n+  int rotate = (code == 22);\n+  if (temp == 0 && !rotate)\n+    oof ();\n+}\n+\n+test_2 (int code)\n+{\n+  char *temp = frob ();\n+  int rotate = (code == 22);\n+  if (!rotate && temp == 0)\n+    oof ();\n+}\n+\n+\n+test_3 (int code)\n+{\n+  char *temp = frob ();\n+  int rotate = (code == 22);\n+  if (!rotate || temp == 0)\n+    oof ();\n+}\n+\n+\n+test_4 (int code)\n+{\n+  char *temp = frob ();\n+  int rotate = (code == 22);\n+  if (temp == 0 || !rotate)\n+    oof ();\n+}\n+\n+\n+test_5 (int code)\n+{\n+  _Bool temp = testit ();\n+  _Bool rotate = (code == 22);\n+  if (temp == 0 && !rotate)\n+    oof ();\n+}\n+\n+test_6 (int code)\n+{\n+  _Bool temp = testit ();\n+  _Bool rotate = (code == 22);\n+  if (!rotate && temp == 0)\n+    oof ();\n+}\n+\n+\n+test_7 (int code)\n+{\n+  _Bool temp = testit ();\n+  _Bool rotate = (code == 22);\n+  if (!rotate || temp == 0)\n+    oof ();\n+}\n+\n+\n+test_8 (int code)\n+{\n+  _Bool temp = testit ();\n+  _Bool rotate = (code == 22);\n+  if (temp == 0 || !rotate)\n+    oof ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Replaced\" 8 \"forwprop1\"} } */"}, {"sha": "29a0bb722831fee5780eb134026d3d27b326ef3a", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 83, "deletions": 1, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d53e2f9954b227ebb8734f921e235c6cb90019ae/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d53e2f9954b227ebb8734f921e235c6cb90019ae/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=d53e2f9954b227ebb8734f921e235c6cb90019ae", "patch": "@@ -1870,6 +1870,52 @@ hoist_conversion_for_bitop_p (tree to, tree from)\n   return false;\n }\n \n+/* GSI points to a statement of the form\n+\n+   result = OP0 CODE OP1\n+\n+   Where OP0 and OP1 are single bit SSA_NAMEs and CODE is either\n+   BIT_AND_EXPR or BIT_IOR_EXPR.\n+\n+   If OP0 is fed by a bitwise negation of another single bit SSA_NAME,\n+   then we can simplify the two statements into a single LT_EXPR or LE_EXPR\n+   when code is BIT_AND_EXPR and BIT_IOR_EXPR respectively.\n+\n+   If a simplification is mode, return TRUE, else return FALSE.  */\n+static bool\n+simplify_bitwise_binary_boolean (gimple_stmt_iterator *gsi,\n+\t\t\t\t enum tree_code code,\n+\t\t\t\t tree op0, tree op1)\n+{\n+  gimple op0_def_stmt = SSA_NAME_DEF_STMT (op0);\n+\n+  if (!is_gimple_assign (op0_def_stmt)\n+      || (gimple_assign_rhs_code (op0_def_stmt) != BIT_NOT_EXPR))\n+    return false;\n+\n+  tree x = gimple_assign_rhs1 (op0_def_stmt);\n+  if (TREE_CODE (x) == SSA_NAME\n+      && INTEGRAL_TYPE_P (TREE_TYPE (x))\n+      && TYPE_PRECISION (TREE_TYPE (x)) == 1\n+      && TYPE_UNSIGNED (TREE_TYPE (x)) == TYPE_UNSIGNED (TREE_TYPE (op1)))\n+    {\n+      enum tree_code newcode;\n+\n+      gimple stmt = gsi_stmt (*gsi);\n+      gimple_assign_set_rhs1 (stmt, x);\n+      gimple_assign_set_rhs2 (stmt, op1);\n+      if (code == BIT_AND_EXPR)\n+\tnewcode = TYPE_UNSIGNED (TREE_TYPE (x)) ? LT_EXPR : GT_EXPR;\n+      else\n+\tnewcode = TYPE_UNSIGNED (TREE_TYPE (x)) ? LE_EXPR : GE_EXPR;\n+      gimple_assign_set_rhs_code (stmt, newcode); \n+      update_stmt (stmt);\n+      return true;\n+    }\n+  return false;\n+\n+}\n+\n /* Simplify bitwise binary operations.\n    Return true if a transformation applied, otherwise return false.  */\n \n@@ -2117,8 +2163,44 @@ simplify_bitwise_binary (gimple_stmt_iterator *gsi)\n \t      return true;\n \t    }\n \t}\n-    }\n \n+      /* If arg1 and arg2 are booleans (or any single bit type)\n+         then try to simplify:\n+\n+\t   (~X & Y) -> X < Y\n+\t   (X & ~Y) -> Y < X\n+\t   (~X | Y) -> X <= Y\n+\t   (X | ~Y) -> Y <= X \n+\n+\t  But only do this if our result feeds into a comparison as\n+\t  this transformation is not always a win, particularly on\n+\t  targets with and-not instructions.  */\n+      if (TREE_CODE (arg1) == SSA_NAME\n+\t  && TREE_CODE (arg2) == SSA_NAME\n+\t  && INTEGRAL_TYPE_P (TREE_TYPE (arg1))\n+\t  && TYPE_PRECISION (TREE_TYPE (arg1)) == 1\n+\t  && TYPE_PRECISION (TREE_TYPE (arg2)) == 1\n+\t  && (TYPE_UNSIGNED (TREE_TYPE (arg1))\n+\t      == TYPE_UNSIGNED (TREE_TYPE (arg2))))\n+\t{\n+\t  use_operand_p use_p;\n+          gimple use_stmt;\n+\n+\t  if (single_imm_use (gimple_assign_lhs (stmt), &use_p, &use_stmt))\n+\t    {\n+\t      if (gimple_code (use_stmt) == GIMPLE_COND\n+\t\t  && gimple_cond_lhs (use_stmt) == gimple_assign_lhs (stmt)\n+\t\t  && integer_zerop (gimple_cond_rhs (use_stmt))\n+\t\t  && gimple_cond_code (use_stmt) == NE_EXPR)\n+\t\t{\n+\t          if (simplify_bitwise_binary_boolean (gsi, code, arg1, arg2))\n+\t\t    return true;\n+\t          if (simplify_bitwise_binary_boolean (gsi, code, arg2, arg1))\n+\t\t    return true;\n+\t\t}\n+\t    }\n+\t}\n+    }\n   return false;\n }\n "}]}