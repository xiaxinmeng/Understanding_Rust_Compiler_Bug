{"sha": "bb78e5876aa6a6b4a8158cdc0f6c8511eb2be75f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI3OGU1ODc2YWE2YTZiNGE4MTU4Y2RjMGY2Yzg1MTFlYjJiZTc1Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-10-02T10:53:05Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-10-02T10:53:05Z"}, "message": "arm: Make more use of the new mode macros\n\nAs Christophe pointed out, my r11-3522 patch didn't in fact fix\nall of the armv8_2-fp16-arith-2.c failures introduced by allowing\nFP16 vectorisation without -funsafe-math-optimizations.  I must have\nonly tested the final patch on my usual arm-linux-gnueabihf bootstrap,\nwhich it turns out treats the test as unsupported.\n\nThe focus of the original patch was to use mode macros for\npatterns that are shared between Advanced SIMD, iwMMXt and MVE.\nThis patch uses the mode macros for general neon.md patterns too.\n\ngcc/\n\t* config/arm/neon.md (*sub<VDQ:mode>3_neon): Use the new mode macros\n\tfor the insn condition.\n\t(sub<VH:mode>3, *mul<VDQW:mode>3_neon): Likewise.\n\t(mul<VDQW:mode>3add<VDQW:mode>_neon): Likewise.\n\t(mul<VH:mode>3add<VH:mode>_neon): Likewise.\n\t(mul<VDQW:mode>3neg<VDQW:mode>add<VDQW:mode>_neon): Likewise.\n\t(fma<VCVTF:mode>4, fma<VH:mode>4, *fmsub<VCVTF:mode>4): Likewise.\n\t(quad_halves_<code>v4sf, reduc_plus_scal_<VD:mode>): Likewise.\n\t(reduc_plus_scal_<VQ:mode>, reduc_smin_scal_<VD:mode>): Likewise.\n\t(reduc_smin_scal_<VQ:mode>, reduc_smax_scal_<VD:mode>): Likewise.\n\t(reduc_smax_scal_<VQ:mode>, mul<VH:mode>3): Likewise.\n\t(neon_vabd<VF:mode>_2, neon_vabd<VF:mode>_3): Likewise.\n\t(fma<VH:mode>4_intrinsic): Delete.\n\t(neon_vadd<VCVTF:mode>): Use the new mode macros to decide which\n\tform of instruction to generate.\n\t(neon_vmla<VDQW:mode>, neon_vmls<VDQW:mode>): Likewise.\n\t(neon_vsub<VCVTF:mode>): Likewise.\n\t(neon_vfma<VH:mode>): Generate the main fma<mode>4 form instead\n\tof using fma<mode>4_intrinsic.\n\ngcc/testsuite/\n\t* gcc.target/arm/armv8_2-fp16-arith-2.c (float16_t): Use _Float16_t\n\trather than __fp16.\n\t(float16x4_t, float16x4_t): Likewise.\n\t(fp16_abs): Use __builtin_fabsf16.", "tree": {"sha": "516b84f00dd233c993a7bf0416d7b402ab2f651f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/516b84f00dd233c993a7bf0416d7b402ab2f651f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb78e5876aa6a6b4a8158cdc0f6c8511eb2be75f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb78e5876aa6a6b4a8158cdc0f6c8511eb2be75f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb78e5876aa6a6b4a8158cdc0f6c8511eb2be75f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb78e5876aa6a6b4a8158cdc0f6c8511eb2be75f/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01c288035aa960631dd0ffd9131ed0a824a95f30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c288035aa960631dd0ffd9131ed0a824a95f30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01c288035aa960631dd0ffd9131ed0a824a95f30"}], "stats": {"total": 72, "additions": 29, "deletions": 43}, "files": [{"sha": "85e424e6cf4ffa807e2cbf52a5f7a0ece4ec027a", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 25, "deletions": 39, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb78e5876aa6a6b4a8158cdc0f6c8511eb2be75f/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb78e5876aa6a6b4a8158cdc0f6c8511eb2be75f/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=bb78e5876aa6a6b4a8158cdc0f6c8511eb2be75f", "patch": "@@ -513,7 +513,7 @@\n   [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w\")\n         (minus:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"w\")\n                    (match_operand:VDQ 2 \"s_register_operand\" \"w\")))]\n-  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n+  \"ARM_HAVE_NEON_<MODE>_ARITH\"\n   \"vsub.<V_if_elem>\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n   [(set (attr \"type\")\n       (if_then_else (match_test \"<Is_float_mode>\")\n@@ -527,7 +527,7 @@\n    (minus:VH\n     (match_operand:VH 1 \"s_register_operand\" \"w\")\n     (match_operand:VH 2 \"s_register_operand\" \"w\")))]\n- \"TARGET_NEON_FP16INST && flag_unsafe_math_optimizations\"\n+ \"ARM_HAVE_NEON_<MODE>_ARITH\"\n  \"vsub.<V_if_elem>\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n  [(set_attr \"type\" \"neon_sub<q>\")]\n )\n@@ -547,7 +547,7 @@\n   [(set (match_operand:VDQW 0 \"s_register_operand\" \"=w\")\n         (mult:VDQW (match_operand:VDQW 1 \"s_register_operand\" \"w\")\n                    (match_operand:VDQW 2 \"s_register_operand\" \"w\")))]\n-  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n+  \"ARM_HAVE_NEON_<MODE>_ARITH\"\n   \"vmul.<V_if_elem>\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n   [(set (attr \"type\")\n       (if_then_else (match_test \"<Is_float_mode>\")\n@@ -592,7 +592,7 @@\n         (plus:VDQW (mult:VDQW (match_operand:VDQW 2 \"s_register_operand\" \"w\")\n                             (match_operand:VDQW 3 \"s_register_operand\" \"w\"))\n \t\t  (match_operand:VDQW 1 \"s_register_operand\" \"0\")))]\n-  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n+  \"ARM_HAVE_NEON_<MODE>_ARITH\"\n   \"vmla.<V_if_elem>\\t%<V_reg>0, %<V_reg>2, %<V_reg>3\"\n   [(set (attr \"type\")\n       (if_then_else (match_test \"<Is_float_mode>\")\n@@ -605,7 +605,7 @@\n \t(plus:VH (mult:VH (match_operand:VH 2 \"s_register_operand\" \"w\")\n \t\t\t  (match_operand:VH 3 \"s_register_operand\" \"w\"))\n \t\t  (match_operand:VH 1 \"s_register_operand\" \"0\")))]\n-  \"TARGET_NEON_FP16INST && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n+  \"ARM_HAVE_NEON_<MODE>_ARITH\"\n   \"vmla.f16\\t%<V_reg>0, %<V_reg>2, %<V_reg>3\"\n   [(set_attr \"type\" \"neon_fp_mla_s<q>\")]\n )\n@@ -615,7 +615,7 @@\n         (minus:VDQW (match_operand:VDQW 1 \"s_register_operand\" \"0\")\n                     (mult:VDQW (match_operand:VDQW 2 \"s_register_operand\" \"w\")\n                                (match_operand:VDQW 3 \"s_register_operand\" \"w\"))))]\n-  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n+  \"ARM_HAVE_NEON_<MODE>_ARITH\"\n   \"vmls.<V_if_elem>\\t%<V_reg>0, %<V_reg>2, %<V_reg>3\"\n   [(set (attr \"type\")\n       (if_then_else (match_test \"<Is_float_mode>\")\n@@ -633,7 +633,7 @@\n         (fma:VCVTF (match_operand:VCVTF 1 \"register_operand\" \"w\")\n \t\t (match_operand:VCVTF 2 \"register_operand\" \"w\")\n \t\t (match_operand:VCVTF 3 \"register_operand\" \"0\")))]\n-  \"TARGET_NEON && TARGET_FMA && flag_unsafe_math_optimizations\"\n+  \"ARM_HAVE_NEON_<MODE>_ARITH && TARGET_FMA\"\n   \"vfma.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n   [(set_attr \"type\" \"neon_fp_mla_s<q>\")]\n )\n@@ -654,18 +654,7 @@\n     (match_operand:VH 1 \"register_operand\" \"w\")\n     (match_operand:VH 2 \"register_operand\" \"w\")\n     (match_operand:VH 3 \"register_operand\" \"0\")))]\n- \"TARGET_NEON_FP16INST && flag_unsafe_math_optimizations\"\n- \"vfma.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n- [(set_attr \"type\" \"neon_fp_mla_s<q>\")]\n-)\n-\n-(define_insn \"fma<VH:mode>4_intrinsic\"\n- [(set (match_operand:VH 0 \"register_operand\" \"=w\")\n-   (fma:VH\n-    (match_operand:VH 1 \"register_operand\" \"w\")\n-    (match_operand:VH 2 \"register_operand\" \"w\")\n-    (match_operand:VH 3 \"register_operand\" \"0\")))]\n- \"TARGET_NEON_FP16INST\"\n+ \"ARM_HAVE_NEON_<MODE>_ARITH\"\n  \"vfma.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n  [(set_attr \"type\" \"neon_fp_mla_s<q>\")]\n )\n@@ -675,7 +664,7 @@\n         (fma:VCVTF (neg:VCVTF (match_operand:VCVTF 1 \"register_operand\" \"w\"))\n \t\t   (match_operand:VCVTF 2 \"register_operand\" \"w\")\n \t\t   (match_operand:VCVTF 3 \"register_operand\" \"0\")))]\n-  \"TARGET_NEON && TARGET_FMA && flag_unsafe_math_optimizations\"\n+  \"ARM_HAVE_NEON_<MODE>_ARITH && TARGET_FMA\"\n   \"vfms.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n   [(set_attr \"type\" \"neon_fp_mla_s<q>\")]\n )\n@@ -1195,7 +1184,7 @@\n                            (parallel [(const_int 0) (const_int 1)]))\n           (vec_select:V2SF (match_dup 1)\n                            (parallel [(const_int 2) (const_int 3)]))))]\n-  \"TARGET_NEON && flag_unsafe_math_optimizations\"\n+  \"ARM_HAVE_NEON_V4SF_ARITH\"\n   \"<VQH_mnem>.f32\\t%P0, %e1, %f1\"\n   [(set_attr \"vqh_mnem\" \"<VQH_mnem>\")\n    (set_attr \"type\" \"neon_fp_reduc_<VQH_type>_s_q\")]\n@@ -1262,7 +1251,7 @@\n (define_expand \"reduc_plus_scal_<mode>\"\n   [(match_operand:<V_elem> 0 \"nonimmediate_operand\")\n    (match_operand:VD 1 \"s_register_operand\")]\n-  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n+  \"ARM_HAVE_NEON_<MODE>_ARITH\"\n {\n   rtx vec = gen_reg_rtx (<MODE>mode);\n   neon_pairwise_reduce (vec, operands[1], <MODE>mode,\n@@ -1275,8 +1264,7 @@\n (define_expand \"reduc_plus_scal_<mode>\"\n   [(match_operand:<V_elem> 0 \"nonimmediate_operand\")\n    (match_operand:VQ 1 \"s_register_operand\")]\n-  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\n-   && !BYTES_BIG_ENDIAN\"\n+  \"ARM_HAVE_NEON_<MODE>_ARITH && !BYTES_BIG_ENDIAN\"\n {\n   rtx step1 = gen_reg_rtx (<V_HALF>mode);\n \n@@ -1311,7 +1299,7 @@\n (define_expand \"reduc_smin_scal_<mode>\"\n   [(match_operand:<V_elem> 0 \"nonimmediate_operand\")\n    (match_operand:VD 1 \"s_register_operand\")]\n-  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n+  \"ARM_HAVE_NEON_<MODE>_ARITH\"\n {\n   rtx vec = gen_reg_rtx (<MODE>mode);\n \n@@ -1325,8 +1313,7 @@\n (define_expand \"reduc_smin_scal_<mode>\"\n   [(match_operand:<V_elem> 0 \"nonimmediate_operand\")\n    (match_operand:VQ 1 \"s_register_operand\")]\n-  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\n-   && !BYTES_BIG_ENDIAN\"\n+  \"ARM_HAVE_NEON_<MODE>_ARITH && !BYTES_BIG_ENDIAN\"\n {\n   rtx step1 = gen_reg_rtx (<V_HALF>mode);\n \n@@ -1339,7 +1326,7 @@\n (define_expand \"reduc_smax_scal_<mode>\"\n   [(match_operand:<V_elem> 0 \"nonimmediate_operand\")\n    (match_operand:VD 1 \"s_register_operand\")]\n-  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n+  \"ARM_HAVE_NEON_<MODE>_ARITH\"\n {\n   rtx vec = gen_reg_rtx (<MODE>mode);\n   neon_pairwise_reduce (vec, operands[1], <MODE>mode,\n@@ -1352,8 +1339,7 @@\n (define_expand \"reduc_smax_scal_<mode>\"\n   [(match_operand:<V_elem> 0 \"nonimmediate_operand\")\n    (match_operand:VQ 1 \"s_register_operand\")]\n-  \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\n-   && !BYTES_BIG_ENDIAN\"\n+  \"ARM_HAVE_NEON_<MODE>_ARITH && !BYTES_BIG_ENDIAN\"\n {\n   rtx step1 = gen_reg_rtx (<V_HALF>mode);\n \n@@ -1627,7 +1613,7 @@\n    (match_operand:VCVTF 2 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n-  if (!<Is_float_mode> || flag_unsafe_math_optimizations)\n+  if (ARM_HAVE_NEON_<MODE>_ARITH)\n     emit_insn (gen_add<mode>3 (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_neon_vadd<mode>_unspec (operands[0], operands[1],\n@@ -1752,7 +1738,7 @@\n    (mult:VH\n     (match_operand:VH 1 \"s_register_operand\" \"w\")\n     (match_operand:VH 2 \"s_register_operand\" \"w\")))]\n-  \"TARGET_NEON_FP16INST && flag_unsafe_math_optimizations\"\n+  \"ARM_HAVE_NEON_<MODE>_ARITH\"\n   \"vmul.f16\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n  [(set_attr \"type\" \"neon_mul_<VH_elem_ch><q>\")]\n )\n@@ -1775,7 +1761,7 @@\n    (match_operand:VDQW 3 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n-  if (!<Is_float_mode> || flag_unsafe_math_optimizations)\n+  if (ARM_HAVE_NEON_<MODE>_ARITH)\n     emit_insn (gen_mul<mode>3add<mode>_neon (operands[0], operands[1],\n \t\t\t\t             operands[2], operands[3]));\n   else\n@@ -1803,8 +1789,8 @@\n    (match_operand:VH 3 \"s_register_operand\")]\n   \"TARGET_NEON_FP16INST\"\n {\n-  emit_insn (gen_fma<mode>4_intrinsic (operands[0], operands[2], operands[3],\n-\t\t\t\t       operands[1]));\n+  emit_insn (gen_fma<mode>4 (operands[0], operands[2], operands[3],\n+\t\t\t     operands[1]));\n   DONE;\n })\n \n@@ -2266,7 +2252,7 @@\n    (match_operand:VDQW 3 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n-  if (!<Is_float_mode> || flag_unsafe_math_optimizations)\n+  if (ARM_HAVE_NEON_<MODE>_ARITH)\n     emit_insn (gen_mul<mode>3neg<mode>add<mode>_neon (operands[0],\n \t\t operands[1], operands[2], operands[3]));\n   else\n@@ -2373,7 +2359,7 @@\n    (match_operand:VCVTF 2 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n-  if (!<Is_float_mode> || flag_unsafe_math_optimizations)\n+  if (ARM_HAVE_NEON_<MODE>_ARITH)\n     emit_insn (gen_sub<mode>3 (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_neon_vsub<mode>_unspec (operands[0], operands[1],\n@@ -6462,7 +6448,7 @@ if (BYTES_BIG_ENDIAN)\n  [(set (match_operand:VF 0 \"s_register_operand\" \"=w\")\n        (abs:VF (minus:VF (match_operand:VF 1 \"s_register_operand\" \"w\")\n \t\t\t (match_operand:VF 2 \"s_register_operand\" \"w\"))))]\n- \"TARGET_NEON && flag_unsafe_math_optimizations\"\n+ \"ARM_HAVE_NEON_<MODE>_ARITH\"\n  \"vabd.<V_s_elem> %<V_reg>0, %<V_reg>1, %<V_reg>2\"\n  [(set_attr \"type\" \"neon_fp_abd_s<q>\")]\n )\n@@ -6472,7 +6458,7 @@ if (BYTES_BIG_ENDIAN)\n        (abs:VF (unspec:VF [(match_operand:VF 1 \"s_register_operand\" \"w\")\n \t\t\t    (match_operand:VF 2 \"s_register_operand\" \"w\")]\n \t\tUNSPEC_VSUB)))]\n- \"TARGET_NEON && flag_unsafe_math_optimizations\"\n+ \"ARM_HAVE_NEON_<MODE>_ARITH\"\n  \"vabd.<V_if_elem> %<V_reg>0, %<V_reg>1, %<V_reg>2\"\n  [(set_attr \"type\" \"neon_fp_abd_s<q>\")]\n )"}, {"sha": "f94109c43965184926f8da34b9cac1f05c1aa210", "filename": "gcc/testsuite/gcc.target/arm/armv8_2-fp16-arith-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb78e5876aa6a6b4a8158cdc0f6c8511eb2be75f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-arith-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb78e5876aa6a6b4a8158cdc0f6c8511eb2be75f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-arith-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_2-fp16-arith-2.c?ref=bb78e5876aa6a6b4a8158cdc0f6c8511eb2be75f", "patch": "@@ -6,17 +6,17 @@\n /* Test instructions generated for half-precision arithmetic without\n    unsafe-math-optimizations.  */\n \n-typedef __fp16 float16_t;\n-typedef __simd64_float16_t float16x4_t;\n-typedef __simd128_float16_t float16x8_t;\n+typedef _Float16 float16_t;\n+typedef _Float16 float16x4_t __attribute__ ((vector_size (8)));\n+typedef _Float16 float16x8_t __attribute__ ((vector_size (16)));\n \n typedef short int16x4_t __attribute__ ((vector_size (8)));\n typedef short int int16x8_t  __attribute__ ((vector_size (16)));\n \n float16_t\n fp16_abs (float16_t a)\n {\n-  return (a < 0) ? -a : a;\n+  return __builtin_fabsf16 (a);\n }\n \n #define TEST_UNOP(NAME, OPERATOR, TY)\t\t\\"}]}