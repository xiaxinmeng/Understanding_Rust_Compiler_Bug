{"sha": "9b55f29a8432a6e841ad1e842585666562c6eca3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI1NWYyOWE4NDMyYTZlODQxYWQxZTg0MjU4NTY2NjU2MmM2ZWNhMw==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-07-11T08:58:28Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-07-11T08:58:28Z"}, "message": "cppinit.c: (cpp_reader_init): Allow digraphs by default.\n\n\t* cppinit.c: (cpp_reader_init): Allow digraphs by default.\n\t(handle_option): Set digraphs according to standard.\n\tMerge OPT_lang_c89 handler with OPT_std_c89.\n\n\t* cpplex.c: (lex_line, can_paste): Honour digraphs in\n\taccordance with\tthe digraphs flag.\n\n\t* cpplib.h: (struct cpp_options): New option digraphs.\n\nFrom-SVN: r34956", "tree": {"sha": "34bafa80cd73a9004dc7444f72a7555fb0602318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34bafa80cd73a9004dc7444f72a7555fb0602318"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b55f29a8432a6e841ad1e842585666562c6eca3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b55f29a8432a6e841ad1e842585666562c6eca3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b55f29a8432a6e841ad1e842585666562c6eca3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b55f29a8432a6e841ad1e842585666562c6eca3/comments", "author": null, "committer": null, "parents": [{"sha": "bb6a53c76b68192547959b6717c5632a9ee225bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb6a53c76b68192547959b6717c5632a9ee225bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb6a53c76b68192547959b6717c5632a9ee225bd"}], "stats": {"total": 95, "additions": 60, "deletions": 35}, "files": [{"sha": "df3a1c3c73efcfc68b0f08633bf8f85d22b8c799", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b55f29a8432a6e841ad1e842585666562c6eca3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b55f29a8432a6e841ad1e842585666562c6eca3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b55f29a8432a6e841ad1e842585666562c6eca3", "patch": "@@ -1,3 +1,14 @@\n+2000-07-11  Neil Booth  <NeilB@earthling.net>\n+\n+\t* cppinit.c: (cpp_reader_init): Allow digraphs by default.\n+\t(handle_option): Set digraphs according to standard.\n+\tMerge OPT_lang_c89 handler with OPT_std_c89.\n+\n+\t* cpplex.c: (lex_line, can_paste): Honour digraphs in\n+\taccordance with\tthe digraphs flag.\n+\n+\t* cpplib.h: (struct cpp_options): New option digraphs.\n+\n 2000-07-10  Hans-Peter Nilsson  <hp@axis.com>\n \t    Bruce Korb  <bkorb@gnu.org>\n "}, {"sha": "db8b6e92c76ac7e3d110e02a6923364bbf1a87ab", "filename": "gcc/cppinit.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b55f29a8432a6e841ad1e842585666562c6eca3/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b55f29a8432a6e841ad1e842585666562c6eca3/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=9b55f29a8432a6e841ad1e842585666562c6eca3", "patch": "@@ -418,6 +418,7 @@ cpp_reader_init (pfile)\n   CPP_OPTION (pfile, cplusplus_comments) = 1;\n   CPP_OPTION (pfile, warn_import) = 1;\n   CPP_OPTION (pfile, warn_paste) = 1;\n+  CPP_OPTION (pfile, digraphs) = 1;\n   CPP_OPTION (pfile, discard_comments) = 1;\n   CPP_OPTION (pfile, show_column) = 1;\n   CPP_OPTION (pfile, tabstop) = 8;\n@@ -1270,6 +1271,7 @@ handle_option (pfile, argc, argv)\n \t  CPP_OPTION (pfile, traditional) = 1;\n \t  CPP_OPTION (pfile, cplusplus_comments) = 0;\n \t  CPP_OPTION (pfile, trigraphs) = 0;\n+\t  CPP_OPTION (pfile, digraphs) = 0;\n \t  CPP_OPTION (pfile, warn_trigraphs) = 0;\n \t  break;\n \tcase OPT_trigraphs:\n@@ -1291,23 +1293,16 @@ handle_option (pfile, argc, argv)\n \t  CPP_OPTION (pfile, cplusplus_comments) = 1;\n \t  CPP_OPTION (pfile, c89) = 0;\n \t  CPP_OPTION (pfile, c99) = 1;\n+\t  CPP_OPTION (pfile, digraphs) = 1;\n \t  CPP_OPTION (pfile, objc) = 0;\n \t  break;\n-\tcase OPT_lang_c89:\n-\t  CPP_OPTION (pfile, cplusplus) = 0;\n-\t  CPP_OPTION (pfile, cplusplus_comments) = 0;\n-\t  CPP_OPTION (pfile, c89) = 1;\n-\t  CPP_OPTION (pfile, c99) = 0;\n-\t  CPP_OPTION (pfile, objc) = 0;\n-\t  CPP_OPTION (pfile, trigraphs) = 1;\n-\t  new_pending_directive (pend, \"__STRICT_ANSI__\", cpp_define);\n-\t  break;\n \tcase OPT_lang_cplusplus:\n \t  CPP_OPTION (pfile, cplusplus) = 1;\n \t  CPP_OPTION (pfile, cplusplus_comments) = 1;\n \t  CPP_OPTION (pfile, c89) = 0;\n \t  CPP_OPTION (pfile, c99) = 0;\n \t  CPP_OPTION (pfile, objc) = 0;\n+\t  CPP_OPTION (pfile, digraphs) = 1;\n \t  new_pending_directive (pend, \"__cplusplus\", cpp_define);\n \t  break;\n \tcase OPT_lang_objcplusplus:\n@@ -1353,13 +1348,15 @@ handle_option (pfile, argc, argv)\n \t  CPP_OPTION (pfile, c89) = 1;\n \t  CPP_OPTION (pfile, c99) = 0;\n \t  CPP_OPTION (pfile, objc) = 0;\n+\t  CPP_OPTION (pfile, digraphs) = 1;\n \t  break;\n \tcase OPT_std_gnu9x:\n \tcase OPT_std_gnu99:\n \t  CPP_OPTION (pfile, cplusplus) = 0;\n \t  CPP_OPTION (pfile, cplusplus_comments) = 1;\n \t  CPP_OPTION (pfile, c89) = 0;\n \t  CPP_OPTION (pfile, c99) = 1;\n+\t  CPP_OPTION (pfile, digraphs) = 1;\n \t  CPP_OPTION (pfile, objc) = 0;\n \t  new_pending_directive (CPP_OPTION (pfile, pending),\n \t\t\t\t \"__STDC_VERSION__=199901L\", cpp_define);\n@@ -1370,14 +1367,15 @@ handle_option (pfile, argc, argv)\n \t  /* Fall through */\n \tcase OPT_std_iso9899_1990:\n \tcase OPT_std_c89:\n+\tcase OPT_lang_c89:\n \t  CPP_OPTION (pfile, cplusplus) = 0;\n \t  CPP_OPTION (pfile, cplusplus_comments) = 0;\n \t  CPP_OPTION (pfile, c89) = 1;\n \t  CPP_OPTION (pfile, c99) = 0;\n \t  CPP_OPTION (pfile, objc) = 0;\n+\t  CPP_OPTION (pfile, digraphs) = opt_code == OPT_std_iso9899_199409;\n \t  CPP_OPTION (pfile, trigraphs) = 1;\n-\t  new_pending_directive (CPP_OPTION (pfile, pending),\n-\t\t\t\t \"__STRICT_ANSI__\", cpp_define);\n+\t  new_pending_directive (pend, \"__STRICT_ANSI__\", cpp_define);\n \t  break;\n \tcase OPT_std_iso9899_199x:\n \tcase OPT_std_iso9899_1999:\n@@ -1388,6 +1386,7 @@ handle_option (pfile, argc, argv)\n \t  CPP_OPTION (pfile, c89) = 0;\n \t  CPP_OPTION (pfile, c99) = 1;\n \t  CPP_OPTION (pfile, objc) = 0;\n+\t  CPP_OPTION (pfile, digraphs) = 1;\n \t  CPP_OPTION (pfile, trigraphs) = 1;\n \t  new_pending_directive (CPP_OPTION (pfile, pending),\n \t\t\t\t \"__STRICT_ANSI__\", cpp_define);"}, {"sha": "d75c1e3b9221185ce846854358ce0a873798b8be", "filename": "gcc/cpplex.c", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b55f29a8432a6e841ad1e842585666562c6eca3/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b55f29a8432a6e841ad1e842585666562c6eca3/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=9b55f29a8432a6e841ad1e842585666562c6eca3", "patch": "@@ -24,7 +24,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n Cleanups to do:-\n \n-o Get use of digraphs in sync with the standard reqd on the command line.\n o -dM and with _cpp_dump_list: too many \\n output.\n o Put a printer object in cpp_reader?\n o Check line numbers assigned to all errors.\n@@ -1572,14 +1571,17 @@ lex_line (pfile, list)\n \t      if (PREV_TOKEN_TYPE == CPP_COLON\n \t\t  && CPP_OPTION (pfile, cplusplus))\n \t\tBACKUP_TOKEN (CPP_SCOPE);\n-\t      /* Digraph: \"<:\" is a '['  */\n-\t      else if (PREV_TOKEN_TYPE == CPP_LESS)\n-\t\tBACKUP_DIGRAPH (CPP_OPEN_SQUARE);\n-\t      /* Digraph: \"%:\" is a '#'  */\n-\t      else if (PREV_TOKEN_TYPE == CPP_MOD)\n+\t      else if (CPP_OPTION (pfile, digraphs))\n \t\t{\n-\t\t  (--cur_token)->flags |= DIGRAPH;\n-\t\t  goto make_hash;\n+\t\t  /* Digraph: \"<:\" is a '['  */\n+\t\t  if (PREV_TOKEN_TYPE == CPP_LESS)\n+\t\t    BACKUP_DIGRAPH (CPP_OPEN_SQUARE);\n+\t\t  /* Digraph: \"%:\" is a '#'  */\n+\t\t  else if (PREV_TOKEN_TYPE == CPP_MOD)\n+\t\t    {\n+\t\t      (--cur_token)->flags |= DIGRAPH;\n+\t\t      goto make_hash;\n+\t\t    }\n \t\t}\n \t    }\n \t  cur_token++;\n@@ -1623,12 +1625,15 @@ lex_line (pfile, list)\n \t\tBACKUP_TOKEN (CPP_RSHIFT);\n \t      else if (PREV_TOKEN_TYPE == CPP_MINUS)\n \t\tBACKUP_TOKEN (CPP_DEREF);\n-\t      /* Digraph: \":>\" is a ']'  */\n-\t      else if (PREV_TOKEN_TYPE == CPP_COLON)\n-\t\tBACKUP_DIGRAPH (CPP_CLOSE_SQUARE);\n-\t      /* Digraph: \"%>\" is a '}'  */\n-\t      else if (PREV_TOKEN_TYPE == CPP_MOD)\n-\t\tBACKUP_DIGRAPH (CPP_CLOSE_BRACE);\n+\t      else if (CPP_OPTION (pfile, digraphs))\n+\t\t{\n+\t\t  /* Digraph: \":>\" is a ']'  */\n+\t\t  if (PREV_TOKEN_TYPE == CPP_COLON)\n+\t\t    BACKUP_DIGRAPH (CPP_CLOSE_SQUARE);\n+\t\t  /* Digraph: \"%>\" is a '}'  */\n+\t\t  else if (PREV_TOKEN_TYPE == CPP_MOD)\n+\t\t    BACKUP_DIGRAPH (CPP_CLOSE_BRACE);\n+\t\t}\n \t    }\n \t  cur_token++;\n \t  break;\n@@ -1652,7 +1657,8 @@ lex_line (pfile, list)\n \tcase '%':\n \t  /* Digraph: \"<%\" is a '{'  */\n \t  cur_token->type = CPP_MOD;\n-\t  if (IMMED_TOKEN () && PREV_TOKEN_TYPE == CPP_LESS)\n+\t  if (IMMED_TOKEN () && PREV_TOKEN_TYPE == CPP_LESS\n+\t      && CPP_OPTION (pfile, digraphs))\n \t    BACKUP_DIGRAPH (CPP_OPEN_BRACE);\n \t  cur_token++;\n \t  break;\n@@ -2421,10 +2427,13 @@ can_paste (pfile, token1, token2, digraph)\n       if (b == a) return CPP_LSHIFT;\n       if (b == CPP_QUERY && cxx)\treturn CPP_MIN;\n       if (b == CPP_LESS_EQ)\treturn CPP_LSHIFT_EQ;\n-      if (b == CPP_COLON)\n-\t{*digraph = 1; return CPP_OPEN_SQUARE;} /* <: digraph */\n-      if (b == CPP_MOD)\n-\t{*digraph = 1; return CPP_OPEN_BRACE;}\t/* <% digraph */\n+      if (CPP_OPTION (pfile, digraphs))\n+\t{\n+\t  if (b == CPP_COLON)\n+\t    {*digraph = 1; return CPP_OPEN_SQUARE;} /* <: digraph */\n+\t  if (b == CPP_MOD)\n+\t    {*digraph = 1; return CPP_OPEN_BRACE;}\t/* <% digraph */\n+\t}\n       break;\n \n     case CPP_PLUS: if (b == a)\treturn CPP_PLUS_PLUS; break;\n@@ -2437,15 +2446,18 @@ can_paste (pfile, token1, token2, digraph)\n       break;\n     case CPP_COLON:\n       if (b == a && cxx)\treturn CPP_SCOPE;\n-      if (b == CPP_GREATER)\n+      if (b == CPP_GREATER && CPP_OPTION (pfile, digraphs))\n \t{*digraph = 1; return CPP_CLOSE_SQUARE;} /* :> digraph */\n       break;\n \n     case CPP_MOD:\n-      if (b == CPP_GREATER)\n-\t{*digraph = 1; return CPP_CLOSE_BRACE;}  /* %> digraph */\n-      if (b == CPP_COLON)\n-\t{*digraph = 1; return CPP_HASH;}         /* %: digraph */\n+      if (CPP_OPTION (pfile, digraphs))\n+\t{\n+\t  if (b == CPP_GREATER)\n+\t    {*digraph = 1; return CPP_CLOSE_BRACE;}  /* %> digraph */\n+\t  if (b == CPP_COLON)\n+\t    {*digraph = 1; return CPP_HASH;}         /* %: digraph */\n+\t}\n       break;\n     case CPP_DEREF:\n       if (b == CPP_MULT && cxx)\treturn CPP_DEREF_STAR;"}, {"sha": "8db8c51f73dc457a99e62712146654daadb084f3", "filename": "gcc/cpplib.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b55f29a8432a6e841ad1e842585666562c6eca3/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b55f29a8432a6e841ad1e842585666562c6eca3/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=9b55f29a8432a6e841ad1e842585666562c6eca3", "patch": "@@ -329,6 +329,9 @@ struct cpp_options\n   /* Nonzero means process the ISO trigraph sequences.  */\n   unsigned char trigraphs;\n \n+  /* Nonzero means process the ISO digraph sequences.  */\n+  unsigned char digraphs;\n+\n   /* Nonzero means print the names of included files rather than the\n      preprocessed output.  1 means just the #include \"...\", 2 means\n      #include <...> as well.  */"}]}