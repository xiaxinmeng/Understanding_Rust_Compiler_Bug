{"sha": "9636feef4d6ade39ba9682ed7f7826d2cf31bcb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYzNmZlZWY0ZDZhZGUzOWJhOTY4MmVkN2Y3ODI2ZDJjZjMxYmNiOQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2016-11-21T16:59:51Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-11-21T16:59:51Z"}, "message": "avr-c.c (avr_register_target_pragmas): Use C++ for-loop declaration of loop variable.\n\ngcc/\n\t* config/avr/avr-c.c (avr_register_target_pragmas): Use C++\n\tfor-loop declaration of loop variable.\n\t(avr_register_target_pragmas, avr_cpu_cpp_builtins): Same.\n\t* config/avr/avr.c (avr_popcount_each_byte)\n\t(avr_init_expanders, avr_regs_to_save, sequent_regs_live)\n\t(get_sequence_length, avr_prologue_setup_frame, avr_map_metric)\n\t(avr_expand_epilogue, avr_function_arg_advance)\n\t(avr_out_compare, avr_out_plus_1, avr_out_bitop, avr_out_fract)\n\t(avr_rotate_bytes, _reg_unused_after, avr_assemble_integer)\n\t(avr_adjust_reg_alloc_order, output_reload_in_const)\n\t(avr_conditional_register_usage, avr_find_unused_d_reg)\n\t(avr_map_decompose, avr_fold_builtin): Same.\n\nFrom-SVN: r242672", "tree": {"sha": "787a95f9caf6a1b730a6b4ae0a9cda8e60106da7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/787a95f9caf6a1b730a6b4ae0a9cda8e60106da7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9636feef4d6ade39ba9682ed7f7826d2cf31bcb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9636feef4d6ade39ba9682ed7f7826d2cf31bcb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9636feef4d6ade39ba9682ed7f7826d2cf31bcb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9636feef4d6ade39ba9682ed7f7826d2cf31bcb9/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3115f94f7fe0388f026837b36d165b026032093e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3115f94f7fe0388f026837b36d165b026032093e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3115f94f7fe0388f026837b36d165b026032093e"}], "stats": {"total": 130, "additions": 58, "deletions": 72}, "files": [{"sha": "6c509252a80efd45bcfa7fad9c7f51d6adc8b963", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9636feef4d6ade39ba9682ed7f7826d2cf31bcb9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9636feef4d6ade39ba9682ed7f7826d2cf31bcb9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9636feef4d6ade39ba9682ed7f7826d2cf31bcb9", "patch": "@@ -1,3 +1,18 @@\n+2016-11-21  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr-c.c (avr_register_target_pragmas): Use C++\n+\tfor-loop declaration of loop variable.\n+\t(avr_register_target_pragmas, avr_cpu_cpp_builtins): Same.\n+\t* config/avr/avr.c (avr_popcount_each_byte)\n+\t(avr_init_expanders, avr_regs_to_save, sequent_regs_live)\n+\t(get_sequence_length, avr_prologue_setup_frame, avr_map_metric)\n+\t(avr_expand_epilogue, avr_function_arg_advance)\n+\t(avr_out_compare, avr_out_plus_1, avr_out_bitop, avr_out_fract)\n+\t(avr_rotate_bytes, _reg_unused_after, avr_assemble_integer)\n+\t(avr_adjust_reg_alloc_order, output_reload_in_const)\n+\t(avr_conditional_register_usage, avr_find_unused_d_reg)\n+\t(avr_map_decompose, avr_fold_builtin): Same.\n+\n 2016-11-21  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.c (avr_popcount): Remove static function."}, {"sha": "64c9eca59d1345a0b138fd28bf69fe98ccee3caa", "filename": "gcc/config/avr/avr-c.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9636feef4d6ade39ba9682ed7f7826d2cf31bcb9/gcc%2Fconfig%2Favr%2Favr-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9636feef4d6ade39ba9682ed7f7826d2cf31bcb9/gcc%2Fconfig%2Favr%2Favr-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-c.c?ref=9636feef4d6ade39ba9682ed7f7826d2cf31bcb9", "patch": "@@ -249,8 +249,6 @@ avr_resolve_overloaded_builtin (unsigned int iloc, tree fndecl, void *vargs)\n void\n avr_register_target_pragmas (void)\n {\n-  int i;\n-\n   gcc_assert (ADDR_SPACE_GENERIC == ADDR_SPACE_RAM);\n \n   /* Register address spaces.  The order must be the same as in the respective\n@@ -259,7 +257,7 @@ avr_register_target_pragmas (void)\n      sense for some targets.  Diagnose for non-supported spaces will be\n      emit by TARGET_ADDR_SPACE_DIAGNOSE_USAGE.  */\n \n-  for (i = 0; i < ADDR_SPACE_COUNT; i++)\n+  for (int i = 0; i < ADDR_SPACE_COUNT; i++)\n     {\n       gcc_assert (i == avr_addrspace[i].id);\n \n@@ -292,8 +290,6 @@ avr_toupper (char *up, const char *lo)\n void\n avr_cpu_cpp_builtins (struct cpp_reader *pfile)\n {\n-  int i;\n-\n   builtin_define_std (\"AVR\");\n \n   /* __AVR_DEVICE_NAME__ and  avr_mcu_types[].macro like __AVR_ATmega8__\n@@ -391,7 +387,7 @@ avr_cpu_cpp_builtins (struct cpp_reader *pfile)\n \n   if (lang_GNU_C ())\n     {\n-      for (i = 0; i < ADDR_SPACE_COUNT; i++)\n+      for (int i = 0; i < ADDR_SPACE_COUNT; i++)\n         if (!ADDR_SPACE_GENERIC_P (i)\n             /* Only supply __FLASH<n> macro if the address space is reasonable\n                for this target.  The address space qualifier itself is still"}, {"sha": "7f3f93d026ce5a9c42702fe1763326fb0275a231", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 41, "deletions": 66, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9636feef4d6ade39ba9682ed7f7826d2cf31bcb9/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9636feef4d6ade39ba9682ed7f7826d2cf31bcb9/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=9636feef4d6ade39ba9682ed7f7826d2cf31bcb9", "patch": "@@ -251,14 +251,12 @@ avr_tolower (char *lo, const char *up)\n bool\n avr_popcount_each_byte (rtx xval, int n_bytes, int pop_mask)\n {\n-  int i;\n-\n   machine_mode mode = GET_MODE (xval);\n \n   if (VOIDmode == mode)\n     mode = SImode;\n \n-  for (i = 0; i < n_bytes; i++)\n+  for (int i = 0; i < n_bytes; i++)\n     {\n       rtx xval8 = simplify_gen_subreg (QImode, xval, mode, i);\n       unsigned int val8 = UINTVAL (xval8) & GET_MODE_MASK (QImode);\n@@ -812,9 +810,7 @@ avr_init_machine_status (void)\n void\n avr_init_expanders (void)\n {\n-  int regno;\n-\n-  for (regno = 0; regno < 32; regno ++)\n+  for (int regno = 0; regno < 32; regno ++)\n     all_regs_rtx[regno] = gen_rtx_REG (QImode, regno);\n \n   lpm_reg_rtx  = all_regs_rtx[LPM_REGNO];\n@@ -1138,7 +1134,7 @@ avr_starting_frame_offset (void)\n static int\n avr_regs_to_save (HARD_REG_SET *set)\n {\n-  int reg, count;\n+  int count;\n   int int_or_sig_p = cfun->machine->is_interrupt || cfun->machine->is_signal;\n \n   if (set)\n@@ -1153,7 +1149,7 @@ avr_regs_to_save (HARD_REG_SET *set)\n       || cfun->machine->is_OS_main)\n     return 0;\n \n-  for (reg = 0; reg < 32; reg++)\n+  for (int reg = 0; reg < 32; reg++)\n     {\n       /* Do not push/pop __tmp_reg__, __zero_reg__, as well as\n          any global register variables.  */\n@@ -1340,11 +1336,10 @@ avr_simple_epilogue (void)\n static int\n sequent_regs_live (void)\n {\n-  int reg;\n   int live_seq = 0;\n   int cur_seq = 0;\n \n-  for (reg = 0; reg <= LAST_CALLEE_SAVED_REG; ++reg)\n+  for (int reg = 0; reg <= LAST_CALLEE_SAVED_REG; ++reg)\n     {\n       if (fixed_regs[reg])\n         {\n@@ -1400,10 +1395,9 @@ sequent_regs_live (void)\n int\n get_sequence_length (rtx_insn *insns)\n {\n-  rtx_insn *insn;\n-  int length;\n+  int length = 0;\n \n-  for (insn = insns, length = 0; insn; insn = NEXT_INSN (insn))\n+  for (rtx_insn *insn = insns; insn; insn = NEXT_INSN (insn))\n     length += get_attr_length (insn);\n \n   return length;\n@@ -1539,9 +1533,7 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n     }\n   else /* !minimize */\n     {\n-      int reg;\n-\n-      for (reg = 0; reg < 32; ++reg)\n+      for (int reg = 0; reg < 32; ++reg)\n         if (TEST_HARD_REG_BIT (set, reg))\n           emit_push_byte (reg, true);\n \n@@ -1884,7 +1876,6 @@ emit_pop_byte (unsigned regno)\n void\n avr_expand_epilogue (bool sibcall_p)\n {\n-  int reg;\n   int live_seq;\n   HARD_REG_SET set;\n   int minimize;\n@@ -2026,7 +2017,7 @@ avr_expand_epilogue (bool sibcall_p)\n \n   /* Restore used registers.  */\n \n-  for (reg = 31; reg >= 0; --reg)\n+  for (int reg = 31; reg >= 0; --reg)\n     if (TEST_HARD_REG_BIT (set, reg))\n       emit_pop_byte (reg);\n \n@@ -3218,9 +3209,7 @@ avr_function_arg_advance (cumulative_args_t cum_v, machine_mode mode,\n   if (cum->regno >= 8\n       && cum->nregs >= 0)\n     {\n-      int regno;\n-\n-      for (regno = cum->regno; regno < cum->regno + bytes; regno++)\n+      for (int regno = cum->regno; regno < cum->regno + bytes; regno++)\n         if (fixed_regs[regno])\n           warning (0, \"fixed register %s used to pass parameter to function\",\n                    reg_names[regno]);\n@@ -3334,11 +3323,10 @@ avr_xload_libgcc_p (machine_mode mode)\n static rtx\n avr_find_unused_d_reg (rtx_insn *insn, rtx exclude)\n {\n-  int regno;\n   bool isr_p = (avr_interrupt_function_p (current_function_decl)\n                 || avr_signal_function_p (current_function_decl));\n \n-  for (regno = 16; regno < 32; regno++)\n+  for (int regno = 16; regno < 32; regno++)\n     {\n       rtx reg = all_regs_rtx[regno];\n \n@@ -5671,7 +5659,7 @@ avr_out_compare (rtx_insn *insn, rtx *xop, int *plen)\n   machine_mode mode;\n \n   /* Number of bytes to operate on.  */\n-  int i, n_bytes = GET_MODE_SIZE (GET_MODE (xreg));\n+  int n_bytes = GET_MODE_SIZE (GET_MODE (xreg));\n \n   /* Value (0..0xff) held in clobber register xop[2] or -1 if unknown.  */\n   int clobber_val = -1;\n@@ -5757,7 +5745,7 @@ avr_out_compare (rtx_insn *insn, rtx *xop, int *plen)\n         }\n     }\n \n-  for (i = 0; i < n_bytes; i++)\n+  for (int i = 0; i < n_bytes; i++)\n     {\n       /* We compare byte-wise.  */\n       rtx reg8 = simplify_gen_subreg (QImode, xreg, mode, i);\n@@ -7491,7 +7479,7 @@ avr_out_plus_1 (rtx *xop, int *plen, enum rtx_code code, int *pcc,\n   machine_mode imode = int_mode_for_mode (mode);\n \n   /* Number of bytes to operate on.  */\n-  int i, n_bytes = GET_MODE_SIZE (mode);\n+  int n_bytes = GET_MODE_SIZE (mode);\n \n   /* Value (0..0xff) held in clobber register op[3] or -1 if unknown.  */\n   int clobber_val = -1;\n@@ -7519,7 +7507,7 @@ avr_out_plus_1 (rtx *xop, int *plen, enum rtx_code code, int *pcc,\n     {\n       *pcc = MINUS == code ? (int) CC_SET_CZN : (int) CC_CLOBBER;\n \n-      for (i = 0; i < n_bytes; i++)\n+      for (int i = 0; i < n_bytes; i++)\n         {\n           /* We operate byte-wise on the destination.  */\n           op[0] = simplify_gen_subreg (QImode, xop[0], mode, i);\n@@ -7586,7 +7574,7 @@ avr_out_plus_1 (rtx *xop, int *plen, enum rtx_code code, int *pcc,\n       goto saturate;\n     }\n \n-  for (i = 0; i < n_bytes; i++)\n+  for (int i = 0; i < n_bytes; i++)\n     {\n       /* We operate byte-wise on the destination.  */\n       rtx reg8 = simplify_gen_subreg (QImode, xop[0], mode, i);\n@@ -8088,7 +8076,7 @@ avr_out_bitop (rtx insn, rtx *xop, int *plen)\n   machine_mode mode = GET_MODE (xop[0]);\n \n   /* Number of bytes to operate on.  */\n-  int i, n_bytes = GET_MODE_SIZE (mode);\n+  int n_bytes = GET_MODE_SIZE (mode);\n \n   /* Value of T-flag (0 or 1) or -1 if unknow.  */\n   int set_t = -1;\n@@ -8108,7 +8096,7 @@ avr_out_bitop (rtx insn, rtx *xop, int *plen)\n   if (plen)\n     *plen = 0;\n \n-  for (i = 0; i < n_bytes; i++)\n+  for (int i = 0; i < n_bytes; i++)\n     {\n       /* We operate byte-wise on the destination.  */\n       rtx reg8 = simplify_gen_subreg (QImode, xop[0], mode, i);\n@@ -8394,7 +8382,6 @@ avr_out_insert_notbit (rtx_insn *insn, rtx operands[], rtx xbitno, int *plen)\n const char*\n avr_out_fract (rtx_insn *insn, rtx operands[], bool intsigned, int *plen)\n {\n-  size_t i;\n   rtx xop[6];\n   RTX_CODE shift = UNKNOWN;\n   bool sign_in_carry = false;\n@@ -8430,7 +8417,7 @@ avr_out_fract (rtx_insn *insn, rtx operands[], bool intsigned, int *plen)\n   /* Step 0:  Determine information on source and destination operand we\n      ======   will need in the remainder.  */\n \n-  for (i = 0; i < sizeof (val) / sizeof (*val); i++)\n+  for (size_t i = 0; i < ARRAY_SIZE (val); i++)\n     {\n       machine_mode mode;\n \n@@ -8987,7 +8974,6 @@ avr_out_round (rtx_insn *insn ATTRIBUTE_UNUSED, rtx *xop, int *plen)\n bool\n avr_rotate_bytes (rtx operands[])\n {\n-    int i, j;\n     machine_mode mode = GET_MODE (operands[0]);\n     bool overlapped = reg_overlap_mentioned_p (operands[0], operands[1]);\n     bool same_reg = rtx_equal_p (operands[0], operands[1]);\n@@ -9046,7 +9032,7 @@ avr_rotate_bytes (rtx operands[])\n \n \tgcc_assert (size <= MAX_SIZE);\n \t/* Generate list of subreg moves.  */\n-\tfor (i = 0; i < size; i++)\n+\tfor (int i = 0; i < size; i++)\n           {\n \t    int from = i;\n \t    int to = (from + offset) % size;\n@@ -9060,9 +9046,9 @@ avr_rotate_bytes (rtx operands[])\n \t   The first move is a conflict as it must wait until second is\n \t   performed.  We ignore moves to self - we catch this later.  */\n \tif (overlapped)\n-\t  for (i = 0; i < size; i++)\n+\t  for (int i = 0; i < size; i++)\n \t    if (reg_overlap_mentioned_p (move[i].dst, operands[1]))\n-\t      for (j = 0; j < size; j++)\n+\t      for (int j = 0; j < size; j++)\n \t\tif (j != i && rtx_equal_p (move[j].src, move[i].dst))\n \t\t  {\n \t\t    /* The dst of move i is the src of move j.  */\n@@ -9081,7 +9067,7 @@ avr_rotate_bytes (rtx operands[])\n \t    moves = 0;\n \t    /* Emit move where dst is not also a src or we have used that\n \t       src already.  */\n-\t    for (i = 0; i < size; i++)\n+\t    for (int i = 0; i < size; i++)\n \t      if (move[i].src != NULL_RTX)\n \t\t{\n \t\t  if (move[i].links == -1\n@@ -9289,10 +9275,9 @@ _reg_unused_after (rtx_insn *insn, rtx reg)\n       else if (code == INSN && GET_CODE (PATTERN (insn)) == SEQUENCE)\n \t{\n \t  rtx_sequence *seq = as_a <rtx_sequence *> (PATTERN (insn));\n-\t  int i;\n \t  int retval = 0;\n \n-\t  for (i = 0; i < seq->len (); i++)\n+\t  for (int i = 0; i < seq->len (); i++)\n \t    {\n \t      rtx_insn *this_insn = seq->insn (i);\n \t      rtx set = single_set (this_insn);\n@@ -9386,11 +9371,9 @@ avr_assemble_integer (rtx x, unsigned int size, int aligned_p)\n     }\n   else if (CONST_FIXED_P (x))\n     {\n-      unsigned n;\n-\n       /* varasm fails to handle big fixed modes that don't fit in hwi.  */\n \n-      for (n = 0; n < size; n++)\n+      for (unsigned n = 0; n < size; n++)\n         {\n           rtx xn = simplify_gen_subreg (QImode, x, GET_MODE (x), n);\n           default_assemble_integer (xn, 1, aligned_p);\n@@ -10342,7 +10325,6 @@ avr_file_end (void)\n void\n avr_adjust_reg_alloc_order (void)\n {\n-  unsigned int i;\n   static const int order_0[] =\n     {\n       24, 25,\n@@ -10403,7 +10385,7 @@ avr_adjust_reg_alloc_order (void)\n                       : TARGET_ORDER_2 ? (AVR_TINY ? tiny_order_0 : order_2)\n                       : (AVR_TINY ? tiny_order_0 : order_0));\n \n-  for (i = 0; i < ARRAY_SIZE (order_0); ++i)\n+  for (size_t i = 0; i < ARRAY_SIZE (order_0); ++i)\n       reg_alloc_order[i] = order[i];\n }\n \n@@ -12000,7 +11982,7 @@ output_reload_in_const (rtx *op, rtx clobber_reg, int *len, bool clear_p)\n   bool cooked_clobber_p = false;\n   bool set_p = false;\n   machine_mode mode = GET_MODE (dest);\n-  int n, n_bytes = GET_MODE_SIZE (mode);\n+  int n_bytes = GET_MODE_SIZE (mode);\n \n   gcc_assert (REG_P (dest)\n               && CONSTANT_P (src));\n@@ -12037,11 +12019,10 @@ output_reload_in_const (rtx *op, rtx clobber_reg, int *len, bool clear_p)\n \n   /* Now start filling DEST from LSB to MSB.  */\n \n-  for (n = 0; n < n_bytes; n++)\n+  for (int n = 0; n < n_bytes; n++)\n     {\n       int ldreg_p;\n       bool done_byte = false;\n-      int j;\n       rtx xop[3];\n \n       /* Crop the n-th destination byte.  */\n@@ -12126,7 +12107,7 @@ output_reload_in_const (rtx *op, rtx clobber_reg, int *len, bool clear_p)\n \n       /* Try to reuse value already loaded in some lower byte. */\n \n-      for (j = 0; j < n; j++)\n+      for (int j = 0; j < n; j++)\n         if (ival[j] == ival[n])\n           {\n             xop[0] = xdest[n];\n@@ -12309,8 +12290,6 @@ avr_conditional_register_usage(void)\n {\n   if (AVR_TINY)\n     {\n-      unsigned int i;\n-\n       const int tiny_reg_alloc_order[] = {\n         24, 25,\n         22, 23,\n@@ -12327,7 +12306,7 @@ avr_conditional_register_usage(void)\n          - R0-R15 are not available in Tiny Core devices\n          - R16 and R17 are fixed registers.  */\n \n-      for (i = 0;  i <= 17;  i++)\n+      for (size_t i = 0; i <= 17;  i++)\n         {\n           fixed_regs[i] = 1;\n           call_used_regs[i] = 1;\n@@ -12337,14 +12316,14 @@ avr_conditional_register_usage(void)\n          - R18, R19, R20 and R21 are the callee saved registers in\n            Tiny Core devices  */\n \n-      for (i = 18; i <= LAST_CALLEE_SAVED_REG; i++)\n+      for (size_t i = 18; i <= LAST_CALLEE_SAVED_REG; i++)\n         {\n           call_used_regs[i] = 0;\n         }\n \n       /* Update register allocation order for Tiny Core devices */\n \n-      for (i = 0; i < ARRAY_SIZE (tiny_reg_alloc_order); i++)\n+      for (size_t i = 0; i < ARRAY_SIZE (tiny_reg_alloc_order); i++)\n         {\n           reg_alloc_order[i] = tiny_reg_alloc_order[i];\n         }\n@@ -13245,9 +13224,9 @@ enum\n static unsigned\n avr_map_metric (unsigned int a, int mode)\n {\n-  unsigned i, metric = 0;\n+  unsigned metric = 0;\n \n-  for (i = 0; i < 8; i++)\n+  for (unsigned i = 0; i < 8; i++)\n     {\n       unsigned ai = avr_map (a, i);\n \n@@ -13344,7 +13323,6 @@ static const avr_map_op_t avr_map_op[] =\n static avr_map_op_t\n avr_map_decompose (unsigned int f, const avr_map_op_t *g, bool val_const_p)\n {\n-  int i;\n   bool val_used_p = 0 != avr_map_metric (f, MAP_MASK_PREIMAGE_F);\n   avr_map_op_t f_ginv = *g;\n   unsigned int ginv = g->ginv;\n@@ -13353,7 +13331,7 @@ avr_map_decompose (unsigned int f, const avr_map_op_t *g, bool val_const_p)\n \n   /* Step 1:  Computing F o G^-1  */\n \n-  for (i = 7; i >= 0; i--)\n+  for (int i = 7; i >= 0; i--)\n     {\n       int x = avr_map (f, i);\n \n@@ -13421,15 +13399,13 @@ avr_map_decompose (unsigned int f, const avr_map_op_t *g, bool val_const_p)\n static void\n avr_move_bits (rtx *xop, unsigned int map, bool fixp_p, int *plen)\n {\n-  int bit_dest, b;\n-\n   /* T-flag contains this bit of the source, i.e. of XOP[1]  */\n   int t_bit_src = -1;\n \n   /* We order the operations according to the requested source bit b.  */\n \n-  for (b = 0; b < 8; b++)\n-    for (bit_dest = 0; bit_dest < 8; bit_dest++)\n+  for (int b = 0; b < 8; b++)\n+    for (int bit_dest = 0; bit_dest < 8; bit_dest++)\n       {\n         int bit_src = avr_map (map, bit_dest);\n \n@@ -13791,7 +13767,7 @@ static rtx\n avr_default_expand_builtin (enum insn_code icode, tree exp, rtx target)\n {\n   rtx pat, xop[3];\n-  int n, n_args = call_expr_nargs (exp);\n+  int n_args = call_expr_nargs (exp);\n   machine_mode tmode = insn_data[icode].operand[0].mode;\n \n   gcc_assert (n_args >= 1 && n_args <= 3);\n@@ -13803,7 +13779,7 @@ avr_default_expand_builtin (enum insn_code icode, tree exp, rtx target)\n       target = gen_reg_rtx (tmode);\n     }\n \n-  for (n = 0; n < n_args; n++)\n+  for (int n = 0; n < n_args; n++)\n     {\n       tree arg = CALL_EXPR_ARG (exp, n);\n       rtx op = expand_expr (arg, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n@@ -14076,7 +14052,6 @@ avr_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *arg,\n         tree map_type = TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (fndecl)));\n         unsigned int map;\n         bool changed = false;\n-        unsigned i;\n         avr_map_op_t best_g;\n \n         if (TREE_CODE (arg[0]) != INTEGER_CST)\n@@ -14118,7 +14093,7 @@ avr_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *arg,\n             int bits = TREE_INT_CST_LOW (tbits);\n             int mask_ior = 0, mask_and = 0xff;\n \n-            for (i = 0; i < 8; i++)\n+            for (size_t i = 0; i < 8; i++)\n               {\n                 int mi = avr_map (map, i);\n \n@@ -14159,7 +14134,7 @@ avr_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *arg,\n         best_g = avr_map_op[0];\n         best_g.cost = 1000;\n \n-        for (i = 0; i < sizeof (avr_map_op) / sizeof (*avr_map_op); i++)\n+        for (size_t i = 0; i < ARRAY_SIZE (avr_map_op); i++)\n           {\n             avr_map_op_t g\n               = avr_map_decompose (map, avr_map_op + i,"}]}