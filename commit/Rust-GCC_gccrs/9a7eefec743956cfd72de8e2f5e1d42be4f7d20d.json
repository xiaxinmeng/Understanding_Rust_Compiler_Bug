{"sha": "9a7eefec743956cfd72de8e2f5e1d42be4f7d20d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE3ZWVmZWM3NDM5NTZjZmQ3MmRlOGUyZjVlMWQ0MmJlNGY3ZDIwZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-01-20T18:18:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-01-20T18:18:21Z"}, "message": "re PR tree-optimization/59860 (ICE in compute_may_aliases, at tree-ssa-structalias.c:6843)\n\n\tPR middle-end/59860\n\t* tree.h (fold_builtin_strcat): New prototype.\n\t* builtins.c (fold_builtin_strcat): No longer static.  Add len\n\targument, if non-NULL, don't call c_strlen.  Optimize\n\tdirectly into __builtin_memcpy instead of __builtin_strcpy.\n\t(fold_builtin_2): Adjust fold_builtin_strcat caller.\n\t* gimple-fold.c (gimple_fold_builtin): Handle BUILT_IN_STRCAT.\n\nFrom-SVN: r206848", "tree": {"sha": "840adcd5d5e2cbfaf6b57c07e9227d984e6650a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/840adcd5d5e2cbfaf6b57c07e9227d984e6650a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a7eefec743956cfd72de8e2f5e1d42be4f7d20d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7eefec743956cfd72de8e2f5e1d42be4f7d20d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a7eefec743956cfd72de8e2f5e1d42be4f7d20d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7eefec743956cfd72de8e2f5e1d42be4f7d20d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e7291458b963d37a9253cd5319ec50d292d5e72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e7291458b963d37a9253cd5319ec50d292d5e72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e7291458b963d37a9253cd5319ec50d292d5e72"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "a57bffec83cf1fbc8a05d3ab0a3183cce1d4b305", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7eefec743956cfd72de8e2f5e1d42be4f7d20d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7eefec743956cfd72de8e2f5e1d42be4f7d20d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a7eefec743956cfd72de8e2f5e1d42be4f7d20d", "patch": "@@ -1,3 +1,13 @@\n+2014-01-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/59860\n+\t* tree.h (fold_builtin_strcat): New prototype.\n+\t* builtins.c (fold_builtin_strcat): No longer static.  Add len\n+\targument, if non-NULL, don't call c_strlen.  Optimize\n+\tdirectly into __builtin_memcpy instead of __builtin_strcpy.\n+\t(fold_builtin_2): Adjust fold_builtin_strcat caller.\n+\t* gimple-fold.c (gimple_fold_builtin): Handle BUILT_IN_STRCAT.\n+\n 2014-01-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_avoid_lea_for_addr): Return false"}, {"sha": "d2ea606260bcf58fd4b3b09b8c7b5c86366f912c", "filename": "gcc/builtins.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7eefec743956cfd72de8e2f5e1d42be4f7d20d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7eefec743956cfd72de8e2f5e1d42be4f7d20d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9a7eefec743956cfd72de8e2f5e1d42be4f7d20d", "patch": "@@ -191,7 +191,6 @@ static tree fold_builtin_varargs (location_t, tree, tree, bool);\n static tree fold_builtin_strpbrk (location_t, tree, tree, tree);\n static tree fold_builtin_strstr (location_t, tree, tree, tree);\n static tree fold_builtin_strrchr (location_t, tree, tree, tree);\n-static tree fold_builtin_strcat (location_t, tree, tree);\n static tree fold_builtin_strncat (location_t, tree, tree, tree);\n static tree fold_builtin_strspn (location_t, tree, tree);\n static tree fold_builtin_strcspn (location_t, tree, tree);\n@@ -10787,7 +10786,7 @@ fold_builtin_2 (location_t loc, tree fndecl, tree arg0, tree arg1, bool ignore)\n       return fold_builtin_strstr (loc, arg0, arg1, type);\n \n     case BUILT_IN_STRCAT:\n-      return fold_builtin_strcat (loc, arg0, arg1);\n+      return fold_builtin_strcat (loc, arg0, arg1, NULL_TREE);\n \n     case BUILT_IN_STRSPN:\n       return fold_builtin_strspn (loc, arg0, arg1);\n@@ -11736,8 +11735,9 @@ fold_builtin_strpbrk (location_t loc, tree s1, tree s2, tree type)\n    COMPOUND_EXPR in the chain will contain the tree for the simplified\n    form of the builtin function call.  */\n \n-static tree\n-fold_builtin_strcat (location_t loc ATTRIBUTE_UNUSED, tree dst, tree src)\n+tree\n+fold_builtin_strcat (location_t loc ATTRIBUTE_UNUSED, tree dst, tree src,\n+\t\t     tree len)\n {\n   if (!validate_arg (dst, POINTER_TYPE)\n       || !validate_arg (src, POINTER_TYPE))\n@@ -11755,14 +11755,15 @@ fold_builtin_strcat (location_t loc ATTRIBUTE_UNUSED, tree dst, tree src)\n \t  /* See if we can store by pieces into (dst + strlen(dst)).  */\n \t  tree newdst, call;\n \t  tree strlen_fn = builtin_decl_implicit (BUILT_IN_STRLEN);\n-\t  tree strcpy_fn = builtin_decl_implicit (BUILT_IN_STRCPY);\n+\t  tree memcpy_fn = builtin_decl_implicit (BUILT_IN_MEMCPY);\n \n-\t  if (!strlen_fn || !strcpy_fn)\n+\t  if (!strlen_fn || !memcpy_fn)\n \t    return NULL_TREE;\n \n \t  /* If the length of the source string isn't computable don't\n-\t     split strcat into strlen and strcpy.  */\n-\t  tree len = c_strlen (src, 1);\n+\t     split strcat into strlen and memcpy.  */\n+\t  if (! len)\n+\t    len = c_strlen (src, 1);\n \t  if (! len || TREE_SIDE_EFFECTS (len))\n \t    return NULL_TREE;\n \n@@ -11776,7 +11777,11 @@ fold_builtin_strcat (location_t loc ATTRIBUTE_UNUSED, tree dst, tree src)\n \t  newdst = fold_build_pointer_plus_loc (loc, dst, newdst);\n \t  newdst = builtin_save_expr (newdst);\n \n-\t  call = build_call_expr_loc (loc, strcpy_fn, 2, newdst, src);\n+\t  len = fold_convert_loc (loc, size_type_node, len);\n+\t  len = size_binop_loc (loc, PLUS_EXPR, len,\n+\t\t\t\tbuild_int_cst (size_type_node, 1));\n+\n+\t  call = build_call_expr_loc (loc, memcpy_fn, 3, newdst, src, len);\n \t  return build2 (COMPOUND_EXPR, TREE_TYPE (dst), call, dst);\n \t}\n       return NULL_TREE;"}, {"sha": "569b49225b6f6a44e35bfadae1f6643f71ab2071", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7eefec743956cfd72de8e2f5e1d42be4f7d20d/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7eefec743956cfd72de8e2f5e1d42be4f7d20d/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=9a7eefec743956cfd72de8e2f5e1d42be4f7d20d", "patch": "@@ -921,6 +921,7 @@ gimple_fold_builtin (gimple stmt)\n       break;\n     case BUILT_IN_STRCPY:\n     case BUILT_IN_STRNCPY:\n+    case BUILT_IN_STRCAT:\n       arg_idx = 1;\n       type = 0;\n       break;\n@@ -996,6 +997,13 @@ gimple_fold_builtin (gimple stmt)\n \t\t\t\t       val[1]);\n       break;\n \n+    case BUILT_IN_STRCAT:\n+      if (val[1] && is_gimple_val (val[1]) && nargs == 2)\n+\tresult = fold_builtin_strcat (loc, gimple_call_arg (stmt, 0),\n+\t\t\t\t      gimple_call_arg (stmt, 1),\n+\t\t\t\t      val[1]);\n+      break;\n+\n     case BUILT_IN_FPUTS:\n       if (nargs == 2)\n \tresult = fold_builtin_fputs (loc, gimple_call_arg (stmt, 0),"}, {"sha": "e918ec54d24bd8771e3252c65ae436ab70f23cf0", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7eefec743956cfd72de8e2f5e1d42be4f7d20d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7eefec743956cfd72de8e2f5e1d42be4f7d20d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9a7eefec743956cfd72de8e2f5e1d42be4f7d20d", "patch": "@@ -4527,6 +4527,7 @@ extern tree fold_call_expr (location_t, tree, bool);\n extern tree fold_builtin_fputs (location_t, tree, tree, bool, bool, tree);\n extern tree fold_builtin_strcpy (location_t, tree, tree, tree, tree);\n extern tree fold_builtin_strncpy (location_t, tree, tree, tree, tree, tree);\n+extern tree fold_builtin_strcat (location_t, tree, tree, tree);\n extern tree fold_builtin_memory_chk (location_t, tree, tree, tree, tree, tree, tree, bool,\n \t\t\t\t     enum built_in_function);\n extern tree fold_builtin_stxcpy_chk (location_t, tree, tree, tree, tree, tree, bool,"}]}