{"sha": "e0f19b55ae71acd195e1c439584c4b4fe5cbd89c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBmMTliNTVhZTcxYWNkMTk1ZTFjNDM5NTg0YzRiNGZlNWNiZDg5Yw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2011-10-28T10:33:55Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2011-10-28T10:33:55Z"}, "message": "Implement out-of-line FPR and GPR saves for PPC/Darwin\n\ngcc:\n\n\t* config/rs6000/t-darwin (LIB2FUNCS_STATIC_EXTRA): \n\tMove darwin-fpsave.asm from here to ... LIB2FUNCS_EXTRA.\n\t(LIB2FUNCS_EXTRA):  Add darwin-gpsave.asm.\n\t(TARGET_LIBGCC2_CFLAGS): Ensure that fPIC and -pipe are inherited from\n\tconfig/t-darwin.\n\t* config/rs6000/darwin.h (FP_SAVE_INLINE): Adjust to enable.\n\t(GP_SAVE_INLINE): Likewise.\n\t(SAVE_FP_PREFIX,  SAVE_FP_SUFFIX, RESTORE_FP_PREFIX,\n\tRESTORE_FP_SUFFIX): Set to empty strings.\n\t* config/rs6000/rs6000.c (rs6000_savres_strategy): Implement for Darwin.\n\t(debug_stack_info): Print savres_strategy.\n\t(rs6000_savres_routine_name): Implement for Darwin.\n\t(rs6000_make_savres_rtx): Adjust used register for Darwin.\n\t(rs6000_emit_prologue): Implement out-of-line saves for Darwin.\n\t(rs6000_output_function_prologue): Don't emit .extern for Mach-O.\n\t(rs6000_emit_epilogue): Implement out-of-line saves for Darwin.\n\t* config/rs6000/darwin-gpsave.asm: New file.\n\nFrom-SVN: r180610", "tree": {"sha": "315fd6729e217b6acb084076cde59d26fab2b571", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/315fd6729e217b6acb084076cde59d26fab2b571"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0f19b55ae71acd195e1c439584c4b4fe5cbd89c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f19b55ae71acd195e1c439584c4b4fe5cbd89c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0f19b55ae71acd195e1c439584c4b4fe5cbd89c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f19b55ae71acd195e1c439584c4b4fe5cbd89c/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee3b466d6584e531f0739a5d51ee7c8fc8af6bb5"}], "stats": {"total": 248, "additions": 215, "deletions": 33}, "files": [{"sha": "06a4352baf630e84a3c50ec497673b6da135daaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f19b55ae71acd195e1c439584c4b4fe5cbd89c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f19b55ae71acd195e1c439584c4b4fe5cbd89c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0f19b55ae71acd195e1c439584c4b4fe5cbd89c", "patch": "@@ -1,3 +1,23 @@\n+2011-10-28  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* config/rs6000/t-darwin (LIB2FUNCS_STATIC_EXTRA): \n+\tMove darwin-fpsave.asm from here to ... LIB2FUNCS_EXTRA.\n+\t(LIB2FUNCS_EXTRA):  Add darwin-gpsave.asm.\n+\t(TARGET_LIBGCC2_CFLAGS): Ensure that fPIC and -pipe are inherited from\n+\tconfig/t-darwin.\n+\t* config/rs6000/darwin.h (FP_SAVE_INLINE): Adjust to enable.\n+\t(GP_SAVE_INLINE): Likewise.\n+\t(SAVE_FP_PREFIX,  SAVE_FP_SUFFIX, RESTORE_FP_PREFIX,\n+\tRESTORE_FP_SUFFIX): Set to empty strings.\n+\t* config/rs6000/rs6000.c (rs6000_savres_strategy): Implement for Darwin.\n+\t(debug_stack_info): Print savres_strategy.\n+\t(rs6000_savres_routine_name): Implement for Darwin.\n+\t(rs6000_make_savres_rtx): Adjust used register for Darwin.\n+\t(rs6000_emit_prologue): Implement out-of-line saves for Darwin.\n+\t(rs6000_output_function_prologue): Don't emit .extern for Mach-O.\n+\t(rs6000_emit_epilogue): Implement out-of-line saves for Darwin.\n+\t* config/rs6000/darwin-gpsave.asm: New file.\n+\n 2011-10-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/sse.md (VI4SD_AVX2): Removed."}, {"sha": "d3c3b912d27e34337a247689b47964b086e687a1", "filename": "gcc/config/rs6000/darwin-gpsave.asm", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f19b55ae71acd195e1c439584c4b4fe5cbd89c/gcc%2Fconfig%2Frs6000%2Fdarwin-gpsave.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f19b55ae71acd195e1c439584c4b4fe5cbd89c/gcc%2Fconfig%2Frs6000%2Fdarwin-gpsave.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin-gpsave.asm?ref=e0f19b55ae71acd195e1c439584c4b4fe5cbd89c", "patch": "@@ -0,0 +1,118 @@\n+/*  This file contains the GPR save and restore routines for Darwin.\n+ *\n+ *   Copyright (C) 2011 Free Software Foundation, Inc.\n+ *\n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 3, or (at your option) any\n+ * later version.\n+ *\n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ *\n+ * Under Section 7 of GPL version 3, you are granted additional\n+ * permissions described in the GCC Runtime Library Exception, version\n+ * 3.1, as published by the Free Software Foundation.\n+ *\n+ * You should have received a copy of the GNU General Public License and\n+ * a copy of the GCC Runtime Library Exception along with this program;\n+ * see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+ * <http://www.gnu.org/licenses/>.\n+ */\n+\n+/* Contributed by Iain Sandoe  <iains@gcc.gnu.org> */\n+\n+/* Like their FP and VEC counterparts, these routines have only one externally\n+   visible entry point.  Calls have to be constructed as offsets from this.\n+   (I.E. callers have to jump to \"saveGPR+((x-13)*4\" to save registers x..31).\n+\n+   Each save/load instruction is 4 bytes long (for both m32 and m64 builds).\n+\n+   The save/restores here are done w.r.t r11.\n+\n+   restGPRx restores the link reg from the stack and returns to the saved\n+   address.\n+\n+   */\n+\n+#include \"darwin-asm.h\"\n+\n+\t.text\n+\t.align 2\n+\n+\t.private_extern saveGPR\n+saveGPR:\n+\tstg r13,(-19 * GPR_BYTES)(r11)\n+\tstg r14,(-18 * GPR_BYTES)(r11)\n+\tstg r15,(-17 * GPR_BYTES)(r11)\n+\tstg r16,(-16 * GPR_BYTES)(r11)\n+\tstg r17,(-15 * GPR_BYTES)(r11)\n+\tstg r18,(-14 * GPR_BYTES)(r11)\n+\tstg r19,(-13 * GPR_BYTES)(r11)\n+\tstg r20,(-12 * GPR_BYTES)(r11)\n+\tstg r21,(-11 * GPR_BYTES)(r11)\n+\tstg r22,(-10 * GPR_BYTES)(r11)\n+\tstg r23,( -9 * GPR_BYTES)(r11)\n+\tstg r24,( -8 * GPR_BYTES)(r11)\n+\tstg r25,( -7 * GPR_BYTES)(r11)\n+\tstg r26,( -6 * GPR_BYTES)(r11)\n+\tstg r27,( -5 * GPR_BYTES)(r11)\n+\tstg r28,( -4 * GPR_BYTES)(r11)\n+\tstg r29,( -3 * GPR_BYTES)(r11)\n+\tstg r30,( -2 * GPR_BYTES)(r11)\n+\tstg r31,( -1 * GPR_BYTES)(r11)\n+\tblr\n+\n+/* */\n+\n+\t.private_extern restGPR\n+restGPR:\n+\tlg r13,(-19 * GPR_BYTES)(r11)\n+\tlg r14,(-18 * GPR_BYTES)(r11)\n+\tlg r15,(-17 * GPR_BYTES)(r11)\n+\tlg r16,(-16 * GPR_BYTES)(r11)\n+\tlg r17,(-15 * GPR_BYTES)(r11)\n+\tlg r18,(-14 * GPR_BYTES)(r11)\n+\tlg r19,(-13 * GPR_BYTES)(r11)\n+\tlg r20,(-12 * GPR_BYTES)(r11)\n+\tlg r21,(-11 * GPR_BYTES)(r11)\n+\tlg r22,(-10 * GPR_BYTES)(r11)\n+\tlg r23,( -9 * GPR_BYTES)(r11)\n+\tlg r24,( -8 * GPR_BYTES)(r11)\n+\tlg r25,( -7 * GPR_BYTES)(r11)\n+\tlg r26,( -6 * GPR_BYTES)(r11)\n+\tlg r27,( -5 * GPR_BYTES)(r11)\n+\tlg r28,( -4 * GPR_BYTES)(r11)\n+\tlg r29,( -3 * GPR_BYTES)(r11)\n+\tlg r30,( -2 * GPR_BYTES)(r11)\n+\tlg r31,( -1 * GPR_BYTES)(r11)\n+\tblr\n+\n+\t.private_extern restGPRx\n+restGPRx:\n+\tlg r13,(-19 * GPR_BYTES)(r11)\n+\tlg r14,(-18 * GPR_BYTES)(r11)\n+\tlg r15,(-17 * GPR_BYTES)(r11)\n+\tlg r16,(-16 * GPR_BYTES)(r11)\n+\tlg r17,(-15 * GPR_BYTES)(r11)\n+\tlg r18,(-14 * GPR_BYTES)(r11)\n+\tlg r19,(-13 * GPR_BYTES)(r11)\n+\tlg r20,(-12 * GPR_BYTES)(r11)\n+\tlg r21,(-11 * GPR_BYTES)(r11)\n+\tlg r22,(-10 * GPR_BYTES)(r11)\n+\tlg r23,( -9 * GPR_BYTES)(r11)\n+\tlg r24,( -8 * GPR_BYTES)(r11)\n+\tlg r25,( -7 * GPR_BYTES)(r11)\n+\tlg r26,( -6 * GPR_BYTES)(r11)\n+\tlg r27,( -5 * GPR_BYTES)(r11)\n+\tlg r28,( -4 * GPR_BYTES)(r11)\n+\tlg r29,( -3 * GPR_BYTES)(r11)\n+\t/* Like the FP restore, we start from the offset for r30\n+\t   thus a restore of only r31 is not going to work.  */\n+\tlg r0,SAVED_LR_OFFSET(r1)\n+\tlg r30,( -2 * GPR_BYTES)(r11)\n+\tmtlr r0\n+\tlg r31,( -1 * GPR_BYTES)(r11)\n+\tblr"}, {"sha": "425111e7561a1579da478790d83e709dd2c072a3", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f19b55ae71acd195e1c439584c4b4fe5cbd89c/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f19b55ae71acd195e1c439584c4b4fe5cbd89c/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=e0f19b55ae71acd195e1c439584c4b4fe5cbd89c", "patch": "@@ -173,18 +173,27 @@ extern int darwin_emit_branch_islands;\n   (RS6000_ALIGN (crtl->outgoing_args_size, 16)\t\t\\\n    + (STACK_POINTER_OFFSET))\n \n-/* Define cutoff for using external functions to save floating point.\n-   Currently on Darwin, always use inline stores.  */\n+/* Define cutoff for using out-of-line functions to save registers.\n+   Currently on Darwin, we implement FP and GPR out-of-line-saves plus the\n+   special routine for 'save everything'.  */\n+\n+#undef FP_SAVE_INLINE\n+#define FP_SAVE_INLINE(FIRST_REG) ((FIRST_REG) > 60 && (FIRST_REG) < 64)\n \n-#undef\tFP_SAVE_INLINE\n-#define FP_SAVE_INLINE(FIRST_REG) ((FIRST_REG) < 64)\n #undef GP_SAVE_INLINE\n-#define GP_SAVE_INLINE(FIRST_REG) ((FIRST_REG) < 32)\n+#define GP_SAVE_INLINE(FIRST_REG) ((FIRST_REG) > 29 && (FIRST_REG) < 32)\n \n /* Darwin uses a function call if everything needs to be saved/restored.  */\n+\n #undef WORLD_SAVE_P\n #define WORLD_SAVE_P(INFO) ((INFO)->world_save_p)\n \n+/* We don't use these on Darwin, they are just place-holders.  */\n+#define SAVE_FP_PREFIX \"\"\n+#define SAVE_FP_SUFFIX \"\"\n+#define RESTORE_FP_PREFIX \"\"\n+#define RESTORE_FP_SUFFIX \"\"\n+\n /* The assembler wants the alternate register names, but without\n    leading percent sign.  */\n #undef REGISTER_NAMES\n@@ -234,12 +243,6 @@ extern int darwin_emit_branch_islands;\n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \";\"\n \n-/* FP save and restore routines.  */\n-#define\tSAVE_FP_PREFIX \"._savef\"\n-#define SAVE_FP_SUFFIX \"\"\n-#define\tRESTORE_FP_PREFIX \"._restf\"\n-#define RESTORE_FP_SUFFIX \"\"\n-\n /* This is how to output an assembler line that says to advance\n    the location counter to a multiple of 2**LOG bytes using the\n    \"nop\" instruction as padding.  */"}, {"sha": "0f36188eaaf43a631642d2e15fb90673b1dc0b79", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 53, "deletions": 12, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f19b55ae71acd195e1c439584c4b4fe5cbd89c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f19b55ae71acd195e1c439584c4b4fe5cbd89c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e0f19b55ae71acd195e1c439584c4b4fe5cbd89c", "patch": "@@ -17983,9 +17983,11 @@ rs6000_savres_strategy (rs6000_stack_t *info,\n \n   /* Don't bother to try to save things out-of-line if r11 is occupied\n      by the static chain.  It would require too much fiddling and the\n-     static chain is rarely used anyway.  */\n+     static chain is rarely used anyway.  FPRs are saved w.r.t the stack\n+     pointer on Darwin.  */\n   if (using_static_chain_p)\n-    strategy |= SAVE_INLINE_FPRS | SAVE_INLINE_GPRS;\n+    strategy |= (DEFAULT_ABI == ABI_DARWIN ? 0 : SAVE_INLINE_FPRS)\n+\t\t| SAVE_INLINE_GPRS;\n \n   /* If we are going to use store multiple, then don't even bother\n      with the out-of-line routines, since the store-multiple\n@@ -18033,6 +18035,9 @@ rs6000_savres_strategy (rs6000_stack_t *info,\n   if (TARGET_AIX && !(strategy & REST_INLINE_FPRS))\n     strategy |= REST_NOINLINE_FPRS_DOESNT_RESTORE_LR;\n #endif\n+  if (TARGET_MACHO && !(strategy & SAVE_INLINE_FPRS))\n+    strategy |= SAVE_NOINLINE_FPRS_SAVES_LR;\n+\n   return strategy;\n }\n \n@@ -18628,6 +18633,8 @@ debug_stack_info (rs6000_stack_t *info)\n   if (info->reg_size != 4)\n     fprintf (stderr, \"\\treg_size            = %5d\\n\", info->reg_size);\n \n+    fprintf (stderr, \"\\tsave-strategy       =  %04x\\n\", info->savres_strategy);\n+\n   fprintf (stderr, \"\\n\");\n }\n \n@@ -19573,10 +19580,25 @@ rs6000_savres_routine_name (rs6000_stack_t *info, int regno,\n \t  suffix = savep ? SAVE_FP_SUFFIX : RESTORE_FP_SUFFIX;\n \t}\n     }\n-  else if (DEFAULT_ABI == ABI_DARWIN)\n-    sorry (\"out-of-line save/restore routines not supported on Darwin\");\n \n-  sprintf (savres_routine_name, \"%s%d%s\", prefix, regno, suffix);\n+   if (DEFAULT_ABI == ABI_DARWIN)\n+    {\n+      /* The Darwin approach is (slightly) different, in order to be\n+\t compatible with code generated by the system toolchain.  There is a\n+\t single symbol for the start of save sequence, and the code here\n+\t embeds an offset into that code on the basis of the first register\n+\t to be saved.  */\n+      prefix = savep ? \"save\" : \"rest\" ;\n+      if (gpr)\n+\tsprintf (savres_routine_name, \"*%sGPR%s%s%.0d ; %s r%d-r31\",\n+\t       prefix, (lr ? \"x\" : \"\"), (regno == 13 ? \"\" : \"+\"),\n+\t       (regno-13) * 4, prefix, regno);\n+      else\n+\tsprintf (savres_routine_name, \"*%sFP%s%.0d ; %s f%d-f31\",\n+\t       prefix, (regno == 14 ? \"\" : \"+\"),  (regno-14) * 4, prefix, regno);\n+    }\n+  else\n+    sprintf (savres_routine_name, \"%s%d%s\", prefix, regno, suffix);\n \n   return savres_routine_name;\n }\n@@ -19678,7 +19700,7 @@ rs6000_emit_savres_rtx (rs6000_stack_t *info,\n \t\t\tbool savep, bool gpr, bool lr)\n {\n   int i;\n-  int offset, start_reg, end_reg, n_regs;\n+  int offset, start_reg, end_reg, n_regs, use_reg;\n   int reg_size = GET_MODE_SIZE (reg_mode);\n   rtx sym;\n   rtvec p;\n@@ -19700,11 +19722,12 @@ rs6000_emit_savres_rtx (rs6000_stack_t *info,\n \n   sym = rs6000_savres_routine_sym (info, savep, gpr, lr);\n   RTVEC_ELT (p, offset++) = gen_rtx_USE (VOIDmode, sym);\n+  use_reg = DEFAULT_ABI == ABI_AIX ? (gpr && !lr ? 12 : 1)\n+\t\t\t\t   : DEFAULT_ABI == ABI_DARWIN && !gpr ? 1\n+\t\t\t\t\t\t\t\t       : 11;\n   RTVEC_ELT (p, offset++)\n     = gen_rtx_USE (VOIDmode,\n-\t\t   gen_rtx_REG (Pmode, DEFAULT_ABI != ABI_AIX ? 11\n-\t\t\t\t       : gpr && !lr ? 12\n-\t\t\t\t       : 1));\n+\t\t   gen_rtx_REG (Pmode, use_reg));\n \n   for (i = 0; i < end_reg - start_reg; i++)\n     {\n@@ -20148,8 +20171,21 @@ rs6000_emit_prologue (void)\n     }\n   else if (!WORLD_SAVE_P (info) && !saving_GPRs_inline)\n     {\n+      if (DEFAULT_ABI == ABI_DARWIN)\n+\t{\n+\t  rtx dest_reg = gen_rtx_REG (reg_mode, 11);\n+\t  if (info->first_fp_reg_save == 64)\n+\t    /* we only need a copy, no fprs were saved.  */\n+\t    emit_move_insn (dest_reg, frame_reg_rtx);\n+\t  else\n+\t    {\n+\t      rtx offset = GEN_INT (sp_offset\n+\t\t\t\t    + (-8 * (64-info->first_fp_reg_save)));\n+\t      emit_insn (gen_add3_insn (dest_reg, frame_reg_rtx, offset));\n+\t    }\n+\t}\n       /* Need to adjust r11 (r12) if we saved any FPRs.  */\n-      if (info->first_fp_reg_save != 64)\n+      else if (info->first_fp_reg_save != 64)\n         {\n \t  rtx dest_reg = gen_rtx_REG (reg_mode, DEFAULT_ABI == ABI_AIX\n \t\t\t\t      ? 12 : 11);\n@@ -20515,7 +20551,8 @@ rs6000_output_function_prologue (FILE *file,\n \n   /* Write .extern for any function we will call to save and restore\n      fp values.  */\n-  if (info->first_fp_reg_save < 64)\n+  if (info->first_fp_reg_save < 64\n+      && !TARGET_MACHO)\n     {\n       char *name;\n       int regno = info->first_fp_reg_save - 32;\n@@ -21138,7 +21175,11 @@ rs6000_emit_epilogue (int sibcall)\n       if (can_use_exit)\n \t{\n \t  rs6000_emit_stack_reset (info, sp_reg_rtx, frame_reg_rtx,\n-\t\t\t\t   sp_offset, can_use_exit);\n+\t\t\t\t sp_offset, can_use_exit);\n+\t  if (DEFAULT_ABI == ABI_DARWIN)\n+\t    /* we only need a copy, no fprs were saved.  */\n+\t    emit_move_insn (gen_rtx_REG (reg_mode, 11), frame_reg_rtx);\n+\n \t  if (info->cr_save_p)\n \t    rs6000_restore_saved_cr (cr_save_reg, using_mtcr_multiple);\n \t}"}, {"sha": "bedd9e6ff9c555aecf7708406ff67c1c1ce2dc2d", "filename": "gcc/config/rs6000/t-darwin", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f19b55ae71acd195e1c439584c4b4fe5cbd89c/gcc%2Fconfig%2Frs6000%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f19b55ae71acd195e1c439584c4b4fe5cbd89c/gcc%2Fconfig%2Frs6000%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-darwin?ref=e0f19b55ae71acd195e1c439584c4b4fe5cbd89c", "patch": "@@ -19,21 +19,21 @@\n \n LIB2FUNCS_EXTRA = $(srcdir)/config/rs6000/darwin-tramp.asm \\\n \t$(srcdir)/config/darwin-64.c \\\n+\t$(srcdir)/config/rs6000/darwin-fpsave.asm  \\\n+\t$(srcdir)/config/rs6000/darwin-gpsave.asm  \\\n \t$(srcdir)/config/rs6000/darwin-world.asm\n \n LIB2FUNCS_STATIC_EXTRA = \\\n-\t$(srcdir)/config/rs6000/darwin-fpsave.asm  \\\n \t$(srcdir)/config/rs6000/darwin-vecsave.asm\n \n-# The .asm files above are designed to run on all processors,\n-# even though they use AltiVec instructions.  -Wa is used because\n-# -force_cpusubtype_ALL doesn't work with -dynamiclib.\n-#\n-# -pipe because there's an assembler bug, 4077127, which causes\n-# it to not properly process the first # directive, causing temporary\n-# file names to appear in stabs, causing the bootstrap to fail.  Using -pipe\n-# works around this by not having any temporary file names.\n-TARGET_LIBGCC2_CFLAGS = -Wa,-force_cpusubtype_ALL -pipe -mmacosx-version-min=10.4\n+# The .asm files above are designed to run on all processors, even though\n+# they use AltiVec instructions.\n+# -Wa is used because -force_cpusubtype_ALL doesn't work with -dynamiclib.\n+# -mmacosx-version-min=10.4 is used to provide compatibility for code from\n+# earlier OSX versions.\n+\n+TARGET_LIBGCC2_CFLAGS += -Wa,-force_cpusubtype_ALL -mmacosx-version-min=10.4\n \n darwin-fpsave.o:\t$(srcdir)/config/rs6000/darwin-asm.h\n+darwin-gpsave.o:\t$(srcdir)/config/rs6000/darwin-asm.h\n darwin-tramp.o:\t\t$(srcdir)/config/rs6000/darwin-asm.h"}]}