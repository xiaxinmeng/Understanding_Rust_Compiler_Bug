{"sha": "a42de35f0d1072fd695244913e354e1a670e9097", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQyZGUzNWYwZDEwNzJmZDY5NTI0NDkxM2UzNTRlMWE2NzBlOTA5Nw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-05-05T04:36:19Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-05-05T04:36:19Z"}, "message": "re PR target/65871 (bzhi builtin/intrinsic wrongly assumes bzhi instruction doesn't set the ZF flag)\n\n\tPR target/65871\n\t* config/i386/i386.md (*bmi_andn_<mode>_ccno): New pattern.\n\ntestsuite/ChangeLog:\n\n\tPR target/65871\n\t* gcc.target/i386/pr65871-3.c: New test.\n\nFrom-SVN: r222795", "tree": {"sha": "8537d540bd76a1e88bd0de4487b22ef2ee5b565a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8537d540bd76a1e88bd0de4487b22ef2ee5b565a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a42de35f0d1072fd695244913e354e1a670e9097", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a42de35f0d1072fd695244913e354e1a670e9097", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a42de35f0d1072fd695244913e354e1a670e9097", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a42de35f0d1072fd695244913e354e1a670e9097/comments", "author": null, "committer": null, "parents": [{"sha": "d6ed95fcb59511ef219b33cdee5895fce44ea45a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ed95fcb59511ef219b33cdee5895fce44ea45a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6ed95fcb59511ef219b33cdee5895fce44ea45a"}], "stats": {"total": 71, "additions": 57, "deletions": 14}, "files": [{"sha": "a9920d7c356fe409841e142c943ede44242e583b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a42de35f0d1072fd695244913e354e1a670e9097/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a42de35f0d1072fd695244913e354e1a670e9097/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a42de35f0d1072fd695244913e354e1a670e9097", "patch": "@@ -1,4 +1,9 @@\n-2015-05-02  Jan Hubicka  <hubicka@ucw.cz>\n+2015-05-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/65871\n+\t* config/i386/i386.md (*bmi_andn_<mode>_ccno): New pattern.\n+\n+2015-05-04  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree.c (verify_type): Check various uses of TYPE_MAXVAL;\n \tfix overactive TYPE_MIN_VALUE check and add FIXME for type\n@@ -438,8 +443,8 @@\n 2015-04-29  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/65871\n-\t* config/i386/i386.md (*bmi_bextr_<mode>_cczonly): New pattern.\n-\t(*bmi2_bzhi_<mode>3_1_cczonly): Ditto.\n+\t* config/i386/i386.md (*bmi_bextr_<mode>_ccz): New pattern.\n+\t(*bmi2_bzhi_<mode>3_1_ccz): Ditto.\n \t(setcc+movzbl peephole2): Check also clobbered reg.\n \t(setcc+andl peephole2): Ditto.\n "}, {"sha": "3ce8f411c0ab2569ce031b40379cea561d7e5b7e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a42de35f0d1072fd695244913e354e1a670e9097/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a42de35f0d1072fd695244913e354e1a670e9097/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a42de35f0d1072fd695244913e354e1a670e9097", "patch": "@@ -12554,30 +12554,43 @@\n ;; BMI instructions.\n (define_insn \"*bmi_andn_<mode>\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n-        (and:SWI48\n-          (not:SWI48\n-            (match_operand:SWI48 1 \"register_operand\" \"r,r\"))\n-            (match_operand:SWI48 2 \"nonimmediate_operand\" \"r,m\")))\n+\t(and:SWI48\n+\t  (not:SWI48 (match_operand:SWI48 1 \"register_operand\" \"r,r\"))\n+\t  (match_operand:SWI48 2 \"nonimmediate_operand\" \"r,m\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_BMI\"\n   \"andn\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"bitmanip\")\n    (set_attr \"btver2_decode\" \"direct, double\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*bmi_andn_<mode>_ccno\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n+\t  (and:SWI48\n+\t    (not:SWI48 (match_operand:SWI48 1 \"register_operand\" \"r,r\"))\n+\t    (match_operand:SWI48 2 \"nonimmediate_operand\" \"r,m\"))\n+\t  (const_int 0)))\n+   (clobber (match_scratch:SWI48 0 \"=r,r\"))]\n+  \"TARGET_BMI && ix86_match_ccmode (insn, CCNOmode)\"\n+  \"andn\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"btver2_decode\" \"direct, double\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"bmi_bextr_<mode>\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n-        (unspec:SWI48 [(match_operand:SWI48 1 \"nonimmediate_operand\" \"r,m\")\n-                       (match_operand:SWI48 2 \"register_operand\" \"r,r\")]\n-                       UNSPEC_BEXTR))\n+\t(unspec:SWI48 [(match_operand:SWI48 1 \"nonimmediate_operand\" \"r,m\")\n+\t\t       (match_operand:SWI48 2 \"register_operand\" \"r,r\")]\n+\t\t      UNSPEC_BEXTR))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_BMI\"\n   \"bextr\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"bitmanip\")\n    (set_attr \"btver2_decode\" \"direct, double\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*bmi_bextr_<mode>_cczonly\"\n+(define_insn \"*bmi_bextr_<mode>_ccz\"\n   [(set (reg:CCZ FLAGS_REG)\n \t(compare:CCZ\n \t  (unspec:SWI48 [(match_operand:SWI48 1 \"nonimmediate_operand\" \"r,m\")\n@@ -12680,7 +12693,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*bmi2_bzhi_<mode>3_1_cczonly\"\n+(define_insn \"*bmi2_bzhi_<mode>3_1_ccz\"\n   [(set (reg:CCZ FLAGS_REG)\n \t(compare:CCZ\n \t  (zero_extract:SWI48"}, {"sha": "37cdbf965d009c63fe3cbd4c86fd55c995ed9d8c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a42de35f0d1072fd695244913e354e1a670e9097/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a42de35f0d1072fd695244913e354e1a670e9097/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a42de35f0d1072fd695244913e354e1a670e9097", "patch": "@@ -1,3 +1,8 @@\n+2015-05-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/65871\n+\t* gcc.target/i386/pr65871-3.c: New test.\n+\n 2015-05-04  Jeff Law  <law@redhat.com>\n \n \tRevert:\n@@ -174,7 +179,7 @@\n \tscan pattern.\n \t* gfortran.dg/bound_9.f90:  New test case.\n \n-2015-04-29  Uros Bizjak  <ubizjak@gmail.com>\n+2015-04-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* g++.dg/ipa/devirt-28a.C: Require LTO effective target.\n \t* g++.dg/ext/sync-4.C (dg-additional-options): Use -march=pentium\n@@ -232,7 +237,7 @@\n 2015-04-29  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/65871\n-\t* gcc.target/i386/pr65871-1.c: New test\n+\t* gcc.target/i386/pr65871-1.c: New test.\n \t* gcc.target/i386/pr65871-2.c: Ditto.\n \n 2015-04-29  Marek Polacek  <polacek@redhat.com>"}, {"sha": "c7d9bdd96f5f6014363477fbf75f7382b68d320f", "filename": "gcc/testsuite/gcc.target/i386/pr65871-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a42de35f0d1072fd695244913e354e1a670e9097/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65871-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a42de35f0d1072fd695244913e354e1a670e9097/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65871-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65871-3.c?ref=a42de35f0d1072fd695244913e354e1a670e9097", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi\" } */\n+\n+int foo (int x, int y)\n+{\n+  if (~x & y)\n+    return 1;\n+\n+  return 0;\n+}\n+\n+int bar (int x, int y)\n+{\n+  if ((~x & y) > 0)\n+    return 1;\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"test\" } } */"}]}