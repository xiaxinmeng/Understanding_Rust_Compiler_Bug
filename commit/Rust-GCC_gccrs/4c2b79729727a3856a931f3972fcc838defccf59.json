{"sha": "4c2b79729727a3856a931f3972fcc838defccf59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMyYjc5NzI5NzI3YTM4NTZhOTMxZjM5NzJmY2M4MzhkZWZjY2Y1OQ==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2018-05-19T11:31:53Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-05-19T11:31:53Z"}, "message": "[NDS32] Refine nds32-md-auxiliary.c.\n\ngcc/\n\t* config/nds32/nds32-md-auxiliary.c (nds32_output_stack_push): Refine.\n\t(nds32_output_stack_pop): Refine.\n\t(nds32_expand_unaligned_load): Refine.\n\t(nds32_expand_unaligned_store): Refine.\n\nFrom-SVN: r260394", "tree": {"sha": "23846397cca0f06c3188668f15429d7ed8f85183", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23846397cca0f06c3188668f15429d7ed8f85183"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c2b79729727a3856a931f3972fcc838defccf59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c2b79729727a3856a931f3972fcc838defccf59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c2b79729727a3856a931f3972fcc838defccf59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c2b79729727a3856a931f3972fcc838defccf59/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b26fa4f93b784dc4e8f46d91ca3a5101b2ee5f49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b26fa4f93b784dc4e8f46d91ca3a5101b2ee5f49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b26fa4f93b784dc4e8f46d91ca3a5101b2ee5f49"}], "stats": {"total": 33, "additions": 15, "deletions": 18}, "files": [{"sha": "876a9568420fd71999092196b0f177db05c31010", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2b79729727a3856a931f3972fcc838defccf59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2b79729727a3856a931f3972fcc838defccf59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c2b79729727a3856a931f3972fcc838defccf59", "patch": "@@ -1,3 +1,10 @@\n+2018-05-19  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config/nds32/nds32-md-auxiliary.c (nds32_output_stack_push): Refine.\n+\t(nds32_output_stack_pop): Refine.\n+\t(nds32_expand_unaligned_load): Refine.\n+\t(nds32_expand_unaligned_store): Refine.\n+\n 2018-05-19  Kuan-Lin Chen <kuanlinchentw@gmail.com>\n \t    Chung-Ju Wu  <jasonwucj@gmail.com>\n "}, {"sha": "78079c6c868b51d03e40e3efac03fa4b2912a94c", "filename": "gcc/config/nds32/nds32-md-auxiliary.c", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2b79729727a3856a931f3972fcc838defccf59/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2b79729727a3856a931f3972fcc838defccf59/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c?ref=4c2b79729727a3856a931f3972fcc838defccf59", "patch": "@@ -2030,11 +2030,8 @@ nds32_output_stack_push (rtx par_rtx)\n \n   /* If we step here, we are going to do v3push or multiple push operation.  */\n \n-  /* The v3push/v3pop instruction should only be applied on\n-     none-isr and none-variadic function.  */\n-  if (TARGET_V3PUSH\n-      && !nds32_isr_function_p (current_function_decl)\n-      && (cfun->machine->va_args_size == 0))\n+  /* Refer to nds32.h, where we comment when push25/pop25 are available.  */\n+  if (NDS32_V3PUSH_AVAILABLE_P)\n     {\n       /* For stack v3push:\n \t   operands[0]: Re\n@@ -2154,11 +2151,8 @@ nds32_output_stack_pop (rtx par_rtx ATTRIBUTE_UNUSED)\n \n   /* If we step here, we are going to do v3pop or multiple pop operation.  */\n \n-  /* The v3push/v3pop instruction should only be applied on\n-     none-isr and none-variadic function.  */\n-  if (TARGET_V3PUSH\n-      && !nds32_isr_function_p (current_function_decl)\n-      && (cfun->machine->va_args_size == 0))\n+  /* Refer to nds32.h, where we comment when push25/pop25 are available.  */\n+  if (NDS32_V3PUSH_AVAILABLE_P)\n     {\n       /* For stack v3pop:\n \t   operands[0]: Re\n@@ -2598,10 +2592,8 @@ nds32_expand_unaligned_load (rtx *operands, enum machine_mode mode)\n   if (mode == DImode)\n     {\n       /* Load doubleword, we need two registers to access.  */\n-      reg[0] = simplify_gen_subreg (SImode, operands[0],\n-\t\t\t\t    GET_MODE (operands[0]), 0);\n-      reg[1] = simplify_gen_subreg (SImode, operands[0],\n-\t\t\t\t    GET_MODE (operands[0]), 4);\n+      reg[0] = nds32_di_low_part_subreg (operands[0]);\n+      reg[1] = nds32_di_high_part_subreg (operands[0]);\n       /* A register only store 4 byte.  */\n       width = GET_MODE_SIZE (SImode) - 1;\n     }\n@@ -2687,10 +2679,8 @@ nds32_expand_unaligned_store (rtx *operands, enum machine_mode mode)\n   if (mode == DImode)\n     {\n       /* Load doubleword, we need two registers to access.  */\n-      reg[0] = simplify_gen_subreg (SImode, operands[1],\n-\t\t\t\t    GET_MODE (operands[1]), 0);\n-      reg[1] = simplify_gen_subreg (SImode, operands[1],\n-\t\t\t\t    GET_MODE (operands[1]), 4);\n+      reg[0] = nds32_di_low_part_subreg (operands[1]);\n+      reg[1] = nds32_di_high_part_subreg (operands[1]);\n       /* A register only store 4 byte.  */\n       width = GET_MODE_SIZE (SImode) - 1;\n     }"}]}