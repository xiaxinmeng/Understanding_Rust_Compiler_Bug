{"sha": "15fda3174a0269637454efc231e541edc1794b24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVmZGEzMTc0YTAyNjk2Mzc0NTRlZmMyMzFlNTQxZWRjMTc5NGIyNA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-11-25T04:28:44Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-11-25T04:28:44Z"}, "message": "tree-scalar-evolution.c (instantiate_scev_binary): New.\n\n2009-09-01  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* tree-scalar-evolution.c (instantiate_scev_binary): New.\n\t(instantiate_scev_1): Move code in instantiate_scev_binary.\n\nFrom-SVN: r154533", "tree": {"sha": "6ae566d579925c5f6b19565753950a2c18597c07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ae566d579925c5f6b19565753950a2c18597c07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15fda3174a0269637454efc231e541edc1794b24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15fda3174a0269637454efc231e541edc1794b24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15fda3174a0269637454efc231e541edc1794b24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15fda3174a0269637454efc231e541edc1794b24/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "320f5a78667ab711ded95d84c283e9c339fd3323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320f5a78667ab711ded95d84c283e9c339fd3323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/320f5a78667ab711ded95d84c283e9c339fd3323"}], "stats": {"total": 131, "additions": 68, "deletions": 63}, "files": [{"sha": "12ea5ca840d0a5b1890ce9aa0c3516e0e3b71c24", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15fda3174a0269637454efc231e541edc1794b24/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15fda3174a0269637454efc231e541edc1794b24/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=15fda3174a0269637454efc231e541edc1794b24", "patch": "@@ -1,3 +1,8 @@\n+2009-09-01  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* tree-scalar-evolution.c (instantiate_scev_binary): New.\n+\t(instantiate_scev_1): Move code in instantiate_scev_binary.\n+\n 2009-09-01  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* tree-scalar-evolution.c (instantiate_scev_name): New."}, {"sha": "219ef5cd1b7719b688a37f260cdfb50e3785155e", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 63, "deletions": 63, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15fda3174a0269637454efc231e541edc1794b24/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15fda3174a0269637454efc231e541edc1794b24/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=15fda3174a0269637454efc231e541edc1794b24", "patch": "@@ -2191,6 +2191,66 @@ instantiate_scev_name (basic_block instantiate_below,\n \n }\n \n+/* Analyze all the parameters of the chrec, between INSTANTIATE_BELOW\n+   and EVOLUTION_LOOP, that were left under a symbolic form.\n+\n+   CHREC is a binary expression to be instantiated.\n+\n+   CACHE is the cache of already instantiated values.\n+\n+   FOLD_CONVERSIONS should be set to true when the conversions that\n+   may wrap in signed/pointer type are folded, as long as the value of\n+   the chrec is preserved.\n+\n+   SIZE_EXPR is used for computing the size of the expression to be\n+   instantiated, and to stop if it exceeds some limit.  */\n+\n+static tree\n+instantiate_scev_binary (basic_block instantiate_below,\n+\t\t\t struct loop *evolution_loop, tree chrec,\n+\t\t\t bool fold_conversions, htab_t cache, int size_expr)\n+{\n+  tree op1;\n+  tree op0 = instantiate_scev_1 (instantiate_below, evolution_loop,\n+\t\t\t\t TREE_OPERAND (chrec, 0), fold_conversions, cache,\n+\t\t\t\t size_expr);\n+  if (op0 == chrec_dont_know)\n+    return chrec_dont_know;\n+\n+  op1 = instantiate_scev_1 (instantiate_below, evolution_loop,\n+\t\t\t    TREE_OPERAND (chrec, 1), fold_conversions, cache,\n+\t\t\t    size_expr);\n+  if (op1 == chrec_dont_know)\n+    return chrec_dont_know;\n+\n+  if (TREE_OPERAND (chrec, 0) != op0\n+      || TREE_OPERAND (chrec, 1) != op1)\n+    {\n+      tree type = chrec_type (chrec);\n+\n+      op0 = chrec_convert (type, op0, NULL);\n+      op1 = chrec_convert_rhs (type, op1, NULL);\n+\n+      switch (TREE_CODE (chrec))\n+\t{\n+\tcase POINTER_PLUS_EXPR:\n+\tcase PLUS_EXPR:\n+\t  return chrec_fold_plus (type, op0, op1);\n+\n+\tcase MINUS_EXPR:\n+\t  return chrec_fold_minus (type, op0, op1);\n+\n+\tcase MULT_EXPR:\n+\t  return chrec_fold_multiply (type, op0, op1);\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+    }\n+\n+  return chrec;\n+}\n+\n /* Analyze all the parameters of the chrec, between INSTANTIATE_BELOW\n    and EVOLUTION_LOOP, that were left under a symbolic form.  \n \n@@ -2250,70 +2310,10 @@ instantiate_scev_1 (basic_block instantiate_below,\n \n     case POINTER_PLUS_EXPR:\n     case PLUS_EXPR:\n-      op0 = instantiate_scev_1 (instantiate_below, evolution_loop,\n-\t\t\t\tTREE_OPERAND (chrec, 0), fold_conversions, cache,\n-\t\t\t\tsize_expr);\n-      if (op0 == chrec_dont_know)\n-\treturn chrec_dont_know;\n-\n-      op1 = instantiate_scev_1 (instantiate_below, evolution_loop,\n-\t\t\t\tTREE_OPERAND (chrec, 1), fold_conversions, cache,\n-\t\t\t\tsize_expr);\n-      if (op1 == chrec_dont_know)\n-\treturn chrec_dont_know;\n-\n-      if (TREE_OPERAND (chrec, 0) != op0\n-\t  || TREE_OPERAND (chrec, 1) != op1)\n-\t{\n-\t  op0 = chrec_convert (type, op0, NULL);\n-\t  op1 = chrec_convert_rhs (type, op1, NULL);\n-\t  chrec = chrec_fold_plus (type, op0, op1);\n-\t}\n-      return chrec;\n-\n     case MINUS_EXPR:\n-      op0 = instantiate_scev_1 (instantiate_below, evolution_loop,\n-\t\t\t\tTREE_OPERAND (chrec, 0), fold_conversions, cache,\n-\t\t\t\tsize_expr);\n-      if (op0 == chrec_dont_know)\n-\treturn chrec_dont_know;\n-\n-      op1 = instantiate_scev_1 (instantiate_below, evolution_loop,\n-\t\t\t\tTREE_OPERAND (chrec, 1),\n-\t\t\t\tfold_conversions, cache, size_expr);\n-      if (op1 == chrec_dont_know)\n-\treturn chrec_dont_know;\n-\n-      if (TREE_OPERAND (chrec, 0) != op0\n-\t  || TREE_OPERAND (chrec, 1) != op1)\n-\t{\n-\t  op0 = chrec_convert (type, op0, NULL);\n-\t  op1 = chrec_convert (type, op1, NULL);\n-\t  chrec = chrec_fold_minus (type, op0, op1);\n-\t}\n-      return chrec;\n-\n     case MULT_EXPR:\n-      op0 = instantiate_scev_1 (instantiate_below, evolution_loop,\n-\t\t\t\tTREE_OPERAND (chrec, 0),\n-\t\t\t\tfold_conversions, cache, size_expr);\n-      if (op0 == chrec_dont_know)\n-\treturn chrec_dont_know;\n-\n-      op1 = instantiate_scev_1 (instantiate_below, evolution_loop,\n-\t\t\t\tTREE_OPERAND (chrec, 1),\n-\t\t\t\tfold_conversions, cache, size_expr);\n-      if (op1 == chrec_dont_know)\n-\treturn chrec_dont_know;\n-\n-      if (TREE_OPERAND (chrec, 0) != op0\n-\t  || TREE_OPERAND (chrec, 1) != op1)\n-\t{\n-\t  op0 = chrec_convert (type, op0, NULL);\n-\t  op1 = chrec_convert (type, op1, NULL);\n-\t  chrec = chrec_fold_multiply (type, op0, op1);\n-\t}\n-      return chrec;\n+      return instantiate_scev_binary (instantiate_below, evolution_loop, chrec,\n+\t\t\t\t      fold_conversions, cache, size_expr);\n \n     CASE_CONVERT:\n       op0 = instantiate_scev_1 (instantiate_below, evolution_loop,\n@@ -2363,7 +2363,7 @@ instantiate_scev_1 (basic_block instantiate_below,\n \n     case SCEV_KNOWN:\n       return chrec_known;\n-                                     \n+\n     default:\n       break;\n     }"}]}