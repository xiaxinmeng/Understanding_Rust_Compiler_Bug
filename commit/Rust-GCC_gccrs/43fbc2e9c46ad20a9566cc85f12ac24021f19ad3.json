{"sha": "43fbc2e9c46ad20a9566cc85f12ac24021f19ad3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNmYmMyZTljNDZhZDIwYTk1NjZjYzg1ZjEyYWMyNDAyMWYxOWFkMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2018-02-06T13:27:04Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-02-06T13:27:04Z"}, "message": "re PR lto/81004 (linking failed with -flto and static libboost_program_options)\n\n\n\tPR lto/81004\n\t* lto.c: Include builtins.h\n\t(register_resolution): Merge resolutions in case trees was\n\tmerged across units.\n\t(lto_maybe_register_decl): Break out from ...\n\t(lto_read_decls): ... here.\n\t(unify_scc): Also register decls here.\n\t(read_cgraph_and_symbols): Sanity check that all resolutions was\n\tread.\n\nFrom-SVN: r257412", "tree": {"sha": "23b2060ac12fe84d4040f663cbf34a555f1840e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23b2060ac12fe84d4040f663cbf34a555f1840e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43fbc2e9c46ad20a9566cc85f12ac24021f19ad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43fbc2e9c46ad20a9566cc85f12ac24021f19ad3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43fbc2e9c46ad20a9566cc85f12ac24021f19ad3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43fbc2e9c46ad20a9566cc85f12ac24021f19ad3/comments", "author": null, "committer": null, "parents": [{"sha": "b25e5572f1262ed0ec4beea19eec15ac28fdf8ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b25e5572f1262ed0ec4beea19eec15ac28fdf8ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b25e5572f1262ed0ec4beea19eec15ac28fdf8ed"}], "stats": {"total": 69, "additions": 54, "deletions": 15}, "files": [{"sha": "4862ea95592c609a04de37675cbf8bfb981058cd", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fbc2e9c46ad20a9566cc85f12ac24021f19ad3/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fbc2e9c46ad20a9566cc85f12ac24021f19ad3/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=43fbc2e9c46ad20a9566cc85f12ac24021f19ad3", "patch": "@@ -1,3 +1,15 @@\n+2018-01-30  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR lto/81004\n+\t* lto.c: Include builtins.h\n+\t(register_resolution): Merge resolutions in case trees was\n+\tmerged across units.\n+\t(lto_maybe_register_decl): Break out from ...\n+\t(lto_read_decls): ... here.\n+\t(unify_scc): Also register decls here.\n+\t(read_cgraph_and_symbols): Sanity check that all resolutions was\n+\tread.\n+\n 2018-02-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR lto/83954"}, {"sha": "0ac8b1ef4911cff6a0b036ffdfdde9658d513e09", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43fbc2e9c46ad20a9566cc85f12ac24021f19ad3/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43fbc2e9c46ad20a9566cc85f12ac24021f19ad3/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=43fbc2e9c46ad20a9566cc85f12ac24021f19ad3", "patch": "@@ -54,6 +54,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stringpool.h\"\n #include \"fold-const.h\"\n #include \"attribs.h\"\n+#include \"builtins.h\"\n \n \n /* Number of parallel tasks to run, -1 if we want to use GNU Make jobserver.  */\n@@ -830,12 +831,20 @@ static void\n register_resolution (struct lto_file_decl_data *file_data, tree decl,\n \t\t     enum ld_plugin_symbol_resolution resolution)\n {\n+  bool existed;\n   if (resolution == LDPR_UNKNOWN)\n     return;\n   if (!file_data->resolution_map)\n     file_data->resolution_map\n       = new hash_map<tree, ld_plugin_symbol_resolution>;\n-  file_data->resolution_map->put (decl, resolution);\n+  ld_plugin_symbol_resolution_t &res\n+     = file_data->resolution_map->get_or_insert (decl, &existed);\n+  gcc_assert (!existed || res == resolution);\n+  if (!existed\n+      || resolution == LDPR_PREVAILING_DEF_IRONLY\n+      || resolution == LDPR_PREVAILING_DEF\n+      || resolution == LDPR_PREVAILING_DEF_IRONLY_EXP)\n+    res = resolution;\n }\n \n /* Register DECL with the global symbol table and change its\n@@ -878,6 +887,18 @@ lto_register_function_decl_in_symtab (struct data_in *data_in, tree decl,\n \t\t\t decl, get_resolution (data_in, ix));\n }\n \n+/* Check if T is a decl and needs register its resolution info.  */\n+\n+static void\n+lto_maybe_register_decl (struct data_in *data_in, tree t, unsigned ix)\n+{\n+  if (TREE_CODE (t) == VAR_DECL)\n+    lto_register_var_decl_in_symtab (data_in, t, ix);\n+  else if (TREE_CODE (t) == FUNCTION_DECL\n+\t   && !DECL_BUILT_IN (t))\n+    lto_register_function_decl_in_symtab (data_in, t, ix);\n+}\n+\n \n /* For the type T re-materialize it in the type variant list and\n    the pointer/reference-to chains.  */\n@@ -1617,14 +1638,18 @@ unify_scc (struct data_in *data_in, unsigned from,\n \t  /* Fixup the streamer cache with the prevailing nodes according\n \t     to the tree node mapping computed by compare_tree_sccs.  */\n \t  if (len == 1)\n-\t    streamer_tree_cache_replace_tree (cache, pscc->entries[0], from);\n+\t    {\n+\t      lto_maybe_register_decl (data_in, pscc->entries[0], from);\n+\t      streamer_tree_cache_replace_tree (cache, pscc->entries[0], from);\n+\t    }\n \t  else\n \t    {\n \t      tree *map2 = XALLOCAVEC (tree, 2 * len);\n \t      for (unsigned i = 0; i < len; ++i)\n \t\t{\n \t\t  map2[i*2] = (tree)(uintptr_t)(from + i);\n \t\t  map2[i*2+1] = scc->entries[i];\n+\t\t  lto_maybe_register_decl (data_in, scc->entries[i], from + i);\n \t\t}\n \t      qsort (map2, len, 2 * sizeof (tree), cmp_tree);\n \t      qsort (map, len, 2 * sizeof (tree), cmp_tree);\n@@ -1761,13 +1786,7 @@ lto_read_decls (struct lto_file_decl_data *decl_data, const void *data,\n \t\tcache_integer_cst (t);\n \t      if (!flag_ltrans)\n \t\t{\n-\t\t  /* Register variables and functions with the\n-\t\t     symbol table.  */\n-\t\t  if (TREE_CODE (t) == VAR_DECL)\n-\t\t    lto_register_var_decl_in_symtab (data_in, t, from + i);\n-\t\t  else if (TREE_CODE (t) == FUNCTION_DECL\n-\t\t\t   && !DECL_BUILT_IN (t))\n-\t\t    lto_register_function_decl_in_symtab (data_in, t, from + i);\n+\t\t  lto_maybe_register_decl (data_in, t, from + i);\n \t\t  /* Scan the tree for references to global functions or\n \t\t     variables and record those for later fixup.  */\n \t\t  if (mentions_vars_p (t))\n@@ -2873,13 +2892,21 @@ read_cgraph_and_symbols (unsigned nfiles, const char **fnames)\n \n   /* Store resolutions into the symbol table.  */\n \n-  ld_plugin_symbol_resolution_t *res;\n   FOR_EACH_SYMBOL (snode)\n-    if (snode->real_symbol_p ()\n-\t&& snode->lto_file_data\n-\t&& snode->lto_file_data->resolution_map\n-\t&& (res = snode->lto_file_data->resolution_map->get (snode->decl)))\n-      snode->resolution = *res;\n+    if (snode->externally_visible && snode->real_symbol_p ()\n+\t&& snode->lto_file_data && snode->lto_file_data->resolution_map\n+\t&& !is_builtin_fn (snode->decl)\n+\t&& !(VAR_P (snode->decl) && DECL_HARD_REGISTER (snode->decl)))\n+      {\n+\tld_plugin_symbol_resolution_t *res;\n+\n+\tres = snode->lto_file_data->resolution_map->get (snode->decl);\n+\tif (!res || *res == LDPR_UNKNOWN)\n+\t  fatal_error (input_location, \"missing resolution data for %s\",\n+\t\t       IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (snode->decl)));\n+\telse\n+          snode->resolution = *res;\n+      }\n   for (i = 0; all_file_decl_data[i]; i++)\n     if (all_file_decl_data[i]->resolution_map)\n       {"}]}