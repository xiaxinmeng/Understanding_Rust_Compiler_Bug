{"sha": "fd2325ea60efea4b7172847dbe3bd8c7bb4e5811", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQyMzI1ZWE2MGVmZWE0YjcxNzI4NDdkYmUzYmQ4YzdiYjRlNTgxMQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-04T00:16:41Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-04T00:16:41Z"}, "message": "Daily bump.", "tree": {"sha": "5c6a0fa86f294f197d2c266bcf039ff48c0b49b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c6a0fa86f294f197d2c266bcf039ff48c0b49b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/comments", "author": null, "committer": null, "parents": [{"sha": "2e391ceb77bda0b095f1e64f07eb0be2d81aa16a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e391ceb77bda0b095f1e64f07eb0be2d81aa16a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e391ceb77bda0b095f1e64f07eb0be2d81aa16a"}], "stats": {"total": 720, "additions": 719, "deletions": 1}, "files": [{"sha": "d83079bbe3e9fa76a311c9353a598b969b6e9cd2", "filename": "contrib/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=fd2325ea60efea4b7172847dbe3bd8c7bb4e5811", "patch": "@@ -1,3 +1,11 @@\n+2020-11-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gcc-changelog/git_email.py: Add unidiff_supports_renaming check.\n+\n+2020-11-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/setup.cfg: New file.\n+\n 2020-10-30  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: Handle empty groups in"}, {"sha": "40fb654095b590923874bf59d5a74aeadb91b5a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd2325ea60efea4b7172847dbe3bd8c7bb4e5811", "patch": "@@ -1,3 +1,265 @@\n+2020-11-03  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/97695\n+\t* cgraph.c (cgraph_edge::redirect_call_stmt_to_callee): Fix ICE with\n+\tin dumping code.\n+\t(cgraph_node::remove): Save clone info before releasing it and pass it\n+\tto unregister.\n+\t* cgraph.h (symtab_node::unregister): Add clone_info parameter.\n+\t(cgraph_clone::unregister): Likewise.\n+\t* cgraphclones.c (cgraph_node::find_replacement): Copy clone info\n+\t* symtab-clones.cc (clone_infos_t::duplicate): Remove.\n+\t(clone_info::get_create): Simplify.\n+\t* symtab.c (symtab_node::unregister): Pass around clone info.\n+\t* varpool.c (varpool_node::remove): Update.\n+\n+2020-11-03  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-low.c (scan_omp_for) <OpenACC>: Use proper location to\n+\t'inform' of enclosing parent compute construct.\n+\n+2020-11-03  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/97698\n+\t* cgraphclones.c (duplicate_thunk_for_node): Check that info is\n+\tnon-NULL.\n+\n+2020-11-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_function_arg_regno_p): Use up to\n+\tSSE_REGPARM_MAX registers to pass function parameters\n+\tfor 32bit Mach-O targets.\n+\t* config/i386/i386.h (X86_32_MMX_REGPARM_MAX): New macro.\n+\t(MMX_REGPARM_MAX): Use it.\n+\n+2020-11-03  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (vget_lo_half): New entry.\n+\t(vget_hi_half): Likewise.\n+\t* config/aarch64/aarch64-simd.md (aarch64_vget_lo_halfv8bf): New entry.\n+\t(aarch64_vget_hi_halfv8bf): Likewise.\n+\t* config/aarch64/arm_neon.h (vget_low_bf16): New intrinsic.\n+\t(vget_high_bf16): Likewise.\n+\n+2020-11-03  Yang Yang  <yangyang305@huawei.com>\n+\n+\t* cgraph.h (struct cgraph_simd_clone): Change field \"simdlen\" of\n+\tstruct cgraph_simd_clone from unsigned int to poly_uint64.\n+\t* config/aarch64/aarch64.c\n+\t(aarch64_simd_clone_compute_vecsize_and_simdlen): adaptation of\n+\toperations on \"simdlen\".\n+\t* config/i386/i386.c (ix86_simd_clone_compute_vecsize_and_simdlen):\n+\tPrintf formats update.\n+\t* gengtype.c (main): Handle poly_uint64.\n+\t* omp-simd-clone.c (simd_clone_mangle): Likewise.Re\n+\t(simd_clone_adjust_return_type): Likewise.\n+\t(create_tmp_simd_array): Likewise.\n+\t(simd_clone_adjust_argument_types): Likewise.\n+\t(simd_clone_init_simd_arrays): Likewise.\n+\t(ipa_simd_modify_function_body): Likewise.\n+\t(simd_clone_adjust): Likewise.\n+\t(expand_simd_clones): Likewise.\n+\t* poly-int-types.h (vector_unroll_factor): New macro.\n+\t* poly-int.h (constant_multiple_p): Add two-argument versions.\n+\t* tree-vect-stmts.c (vectorizable_simd_clone_call): Likewise.\n+\n+2020-11-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97623\n+\t* params.opt (-param=max-pre-hoist-insert-iterations): New.\n+\t* doc/invoke.texi (max-pre-hoist-insert-iterations): Document.\n+\t* tree-ssa-pre.c (insert): Do at most max-pre-hoist-insert-iterations\n+\thoist insert iterations.\n+\n+2020-11-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/97579\n+\t* gimple-isel.cc (gimple_expand_vec_cond_expr): Use\n+\tthe correct types for the vcond_mask/vec_cmp optab queries.\n+\n+2020-11-03  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (ssa_global_cache::get_global_range): Return\n+\ttrue if there was a previous range set.\n+\t(ranger_cache::ranger_cache): Take a gimple_ranger parameter.\n+\t(ranger_cache::set_global_range): Propagate the value if updating.\n+\t(ranger_cache::propagate_cache): Renamed from iterative_cache_update.\n+\t(ranger_cache::propagate_updated_value): New.  Split from:\n+\t(ranger_cache::fill_block_cache): Split out value propagator.\n+\t* gimple-range-cache.h (ssa_global_cache): Update prototypes.\n+\t(ranger_cache): Update prototypes.\n+\n+2020-11-03  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.h (block_range_cache): Add new entry point.\n+\t(ranger_cache): Privatize global abnd block cache members.\n+\t* gimple-range-cache.cc (ssa_block_ranges::set_bb_range): Add bounds\n+\tcheck.\n+\t(ssa_block_ranges::set_bb_varying): Ditto.\n+\t(ssa_block_ranges::get_bb_range): Ditto.\n+\t(ssa_block_ranges::bb_range_p): Ditto.\n+\t(block_range_cache::get_block_ranges): Fix formatting.\n+\t(block_range_cache::query_block_ranges): New.\n+\t(block_range_cache::get_bb_range): Use Query_block_ranges.\n+\t(block_range_cache::bb_range_p): Ditto.\n+\t(ranger_cache::dump): New.\n+\t(ranger_cache::get_global_range): New.\n+\t(ranger_cache::set_global_range): New.\n+\t* gimple-range.cc (gimple_ranger::range_of_expr): Use new API.\n+\t(gimple_ranger::range_of_stmt): Ditto.\n+\t(gimple_ranger::export_global_ranges): Ditto.\n+\t(gimple_ranger::dump): Ditto.\n+\n+2020-11-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* fold-const.c (getbyterep): Remove duplicated statement.\n+\n+2020-11-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR target/97205\n+\t* cfgexpand.c (align_local_variable): Make SSA_NAMEs\n+\tat least MODE_ALIGNED.\n+\t(expand_one_stack_var_at): Increase MEM_ALIGN for SSA_NAMEs.\n+\n+2020-11-03  Zhiheng Xie  <xiezhiheng@huawei.com>\n+\t    Nannan Zheng  <zhengnannan@huawei.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add proper FLAG\n+\tfor AES/SHA/SM3/SM4 intrinsics.\n+\n+2020-11-03  Zhiheng Xie  <xiezhiheng@huawei.com>\n+\t    Nannan Zheng  <zhengnannan@huawei.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add proper FLAG\n+\tfor compare intrinsics.\n+\n+2020-11-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* dwarf2out.c (maybe_create_die_with_external_ref): Remove\n+\thashtable entry.\n+\n+2020-11-03  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/arm/arm_neon.h (vst2_lane_bf16, vst2q_lane_bf16)\n+\t(vst3_lane_bf16, vst3q_lane_bf16, vst4_lane_bf16)\n+\t(vst4q_lane_bf16): New intrinsics.\n+\t* config/arm/arm_neon_builtins.def: Touch it for:\n+\t__builtin_neon_vst2_lanev4bf, __builtin_neon_vst2_lanev8bf,\n+\t__builtin_neon_vst3_lanev4bf, __builtin_neon_vst3_lanev8bf,\n+\t__builtin_neon_vst4_lanev4bf,__builtin_neon_vst4_lanev8bf.\n+\n+2020-11-03  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/arm/arm_neon.h (vld2_lane_bf16, vld2q_lane_bf16)\n+\t(vld3_lane_bf16, vld3q_lane_bf16, vld4_lane_bf16)\n+\t(vld4q_lane_bf16): Add intrinsics.\n+\t* config/arm/arm_neon_builtins.def: Touch for:\n+\t__builtin_neon_vld2_lanev4bf, __builtin_neon_vld2_lanev8bf,\n+\t__builtin_neon_vld3_lanev4bf, __builtin_neon_vld3_lanev8bf,\n+\t__builtin_neon_vld4_lanev4bf, __builtin_neon_vld4_lanev8bf.\n+\t* config/arm/iterators.md (VQ_HS): Add V8BF to the iterator.\n+\n+2020-11-03  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/arm/arm_neon.h (vst1_bf16, vst1q_bf16): Add intrinsics.\n+\t* config/arm/arm_neon_builtins.def : Touch for:\n+\t__builtin_neon_vst1v4bf, __builtin_neon_vst1v8bf.\n+\n+2020-11-03  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/arm/arm-builtins.c (VAR14): Define macro.\n+\t* config/arm/arm_neon_builtins.def: Touch for:\n+\t__builtin_neon_vld1v4bf, __builtin_neon_vld1v8bf.\n+\t* config/arm/arm_neon.h (vld1_bf16, vld1q_bf16): Add intrinsics.\n+\n+2020-11-03  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/arm/arm_neon.h (vst1_lane_bf16, vst1q_lane_bf16): Add\n+\tintrinsics.\n+\t* config/arm/arm_neon_builtins.def (STORE1LANE): Add v4bf, v8bf.\n+\n+2020-11-03  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/arm/arm_neon_builtins.def: Add to LOAD1LANE v4bf, v8bf.\n+\t* config/arm/arm_neon.h (vld1_lane_bf16, vld1q_lane_bf16): Add\n+\tintrinsics.\n+\n+2020-11-03  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def(vbfcvt): New entry.\n+\t(vbfcvt_high, bfcvt): Likewise.\n+\t* config/aarch64/aarch64-simd.md(aarch64_vbfcvt<mode>): New entry.\n+\t(aarch64_vbfcvt_highv8bf, aarch64_bfcvtsf): Likewise.\n+\t* config/aarch64/arm_bf16.h (vcvtah_f32_bf16): New intrinsic.\n+\t* config/aarch64/arm_neon.h (vcvt_f32_bf16): Likewise.\n+\t(vcvtq_low_f32_bf16, vcvtq_high_f32_bf16): Likewise.\n+\n+2020-11-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR bootstrap/97666\n+\t* tree-vect-slp.c (vect_build_slp_tree_2): Scale\n+\tallocation of skip_args by sizeof (bool).\n+\n+2020-11-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80928\n+\t* tree-vect-loop.c (vectorizable_induction): SLP vectorize\n+\tnested inductions.\n+\n+2020-11-03  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/97578\n+\t* ipa-inline-transform.c (maybe_materialize_called_clones): New\n+\tfunction.\n+\t(inline_transform): Use it.\n+\n+2020-11-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97678\n+\t* tree-vect-slp.c (vect_build_slp_tree_2): Do not track\n+\tthe initial values of inductions when not nested.\n+\t* tree-vect-loop.c (vectorizable_induction): Look at\n+\tPHI node initial values again for SLP and not nested\n+\tinductions.  Handle LOOP_VINFO_MASK_SKIP_NITERS and cost\n+\tinvariants.\n+\n+2020-11-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (aes<aeswideklvariant>u8):\n+\tDo not use xmm_regs array.  Fix whitespace.\n+\n+2020-11-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-expand.c (ix86_expand_builtin): Fix comment.\n+\n+2020-11-03  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-low.c (scan_omp_for) <OpenACC>: Move earlier inconsistent\n+\tnested 'reduction' clauses checking.\n+\n+2020-11-03  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-low.c (scan_omp_for) <OpenACC>: More precise diagnostics for\n+\t'gang', 'worker', 'vector' clauses with arguments only allowed in\n+\t'kernels' regions.\n+\n+2020-11-03  Kewen Lin  <linkw@gcc.gnu.org>\n+\n+\tPR tree-optimization/96789\n+\t* function.h (struct function): New member unsigned pending_TODOs.\n+\t* passes.c (class pass_pre_slp_scalar_cleanup): New class.\n+\t(make_pass_pre_slp_scalar_cleanup): New function.\n+\t(pass_data_pre_slp_scalar_cleanup): New pass data.\n+\t* passes.def: (pass_pre_slp_scalar_cleanup): New pass, add\n+\tpass_fre and pass_dse as its children.\n+\t* timevar.def (TV_SCALAR_CLEANUP): New timevar.\n+\t* tree-pass.h (PENDING_TODO_force_next_scalar_cleanup): New\n+\tpending TODO flag.\n+\t(make_pass_pre_slp_scalar_cleanup): New declare.\n+\t* tree-ssa-loop-ivcanon.c (tree_unroll_loops_completely_1):\n+\tOnce any outermost loop gets unrolled, flag cfun pending_TODOs\n+\tPENDING_TODO_force_next_scalar_cleanup on.\n+\n 2020-11-03  Dennis Zhang  <dennis.zhang@arm.com>\n \n \t* config/aarch64/aarch64-simd-builtins.def (vget_lo_half): New entry."}, {"sha": "f23c2c72098dcf2acd61f52ef631682db03c652a", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=fd2325ea60efea4b7172847dbe3bd8c7bb4e5811", "patch": "@@ -1 +1 @@\n-20201103\n+20201104"}, {"sha": "4cedf1595a65a8ae9d9aa85b5f942ab39a13a978", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=fd2325ea60efea4b7172847dbe3bd8c7bb4e5811", "patch": "@@ -1,3 +1,7 @@\n+2020-11-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c.opt (MQ,MT): Reword description to be make-agnostic.\n+\n 2020-11-02  Nathan Sidwell  <nathan@acm.org>\n \n \t* c-opts.c (c_common_post_options): Move var decl to its"}, {"sha": "a2ef3e38117319401356ca6cffab29dad5ce16c0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fd2325ea60efea4b7172847dbe3bd8c7bb4e5811", "patch": "@@ -1,3 +1,100 @@\n+2020-11-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.c (is_byte_access_type): Don't use char_type_p.\n+\n+2020-11-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/97663\n+\t* parser.c (cp_parser_init_declarator): Don't try to parse\n+\tC++17 deduction guides if there are any type specifiers even when\n+\ttype is NULL.\n+\n+2020-11-03  Kamlesh Kumar  <kamleshbhalui@gmail.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/97453\n+\tDR2303\n+\t* pt.c (get_template_base): Consider closest base in template\n+\tdeduction when base of base also matches.\n+\n+2020-11-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* pt.c (tsubst_expr): Simplify using decl instantiation, add\n+\tasserts.\n+\n+2020-11-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* class.c (copy_fndecl_with_name):  Always not top level.\n+\t(build_cdtor_clones): Add update_methods parm, use it to\n+\tconditionally update the method vec.  Return void\n+\t(clone_cdtor): Adjust.\n+\t(clone_constructors_and_destructors): Adjust comment.\n+\n+2020-11-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* pt.c (primary_template_specialization_p): Use\n+\tVAR_OR_FUNCTION_DECL_P.\n+\t(tsubst_template_decl): Check for FUNCTION_DECL, not !TYPE && !VAR\n+\tfor registering a specialization.\n+\n+2020-11-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (fixup_deferred_exception_variants): Declare.\n+\t* parser.c (cp_parser_class_specifier_1): Call it when\n+\tcompleting deferred parses rather than creating a variant.\n+\t(cp_parser_member_declaration): Move comment from ...\n+\t(cp_parser_noexcept_specification_opt): ... here.  Refactor the\n+\tdeferred parse.\n+\t* tree.c (fixup_deferred_exception_variants): New.\n+\n+2020-11-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* pt.c (tsubst_lambda_expr): Reorder extra-scope handling to match\n+\tthe non-template case.\n+\t(instantiate_body): Move a couple of declarations to their\n+\tinitializers.\n+\n+2020-11-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* decl.c (duplicate_decls): Return error_mark_node fo extern-c\n+\tmismatch.\n+\n+2020-11-03  Marek Polacek  <polacek@redhat.com>\n+\n+\t* constexpr.c (potential_constant_expression_1): Treat\n+\t__PRETTY_FUNCTION__ inside a template function as\n+\tpotentially-constant.\n+\t* pt.c (uses_template_parms): Call\n+\tinstantiation_dependent_expression_p instead of\n+\tvalue_dependent_expression_p.\n+\t(instantiation_dependent_expression_p): Check\n+\tpotential_constant_expression before calling\n+\tvalue_dependent_expression_p.\n+\n+2020-11-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97632\n+\t* init.c (build_new_1): Disable -Winit-list-lifetime for an unevaluated\n+\toperand.\n+\n+2020-11-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* tree.c (bind_template_template_parm): Mark the parm as a\n+\ttemplate parm.\n+\t(cp_tree_equal): Refactor CALL_EXPR.  Use comp_template_args for\n+\tTREE_VECs.\n+\n+2020-11-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* rtti.c (init_rtti_processing): Move var decl to its init.\n+\t(get_tinfo_decl): Likewise.  Break out creation to called helper\n+\t...\n+\t(get_tinfo_decl_direct): ... here.\n+\t(build_dynamic_cast_1): Move var decls to their initializers.\n+\t(tinfo_base_init): Set decl's location to BUILTINS_LOCATION.\n+\t(get_tinfo_desc): Only push ABI namespace when needed.  Set type's\n+\tcontext.\n+\n 2020-11-02  Nathan Sidwell  <nathan@acm.org>\n \n \t* decl.c (start_decl_1): Refactor declarations.  Fixup some"}, {"sha": "d2ee8c103855dfc9339accc215c0527788cb2975", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fd2325ea60efea4b7172847dbe3bd8c7bb4e5811", "patch": "@@ -1,3 +1,26 @@\n+2020-11-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cpp.c (gfc_cpp_add_dep): Only add dependency if we're recording\n+\tthem.\n+\t(gfc_cpp_init): Likewise for target.\n+\n+2020-11-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* decl.c (ext_attr_list): Add EXT_ATTR_DEPRECATED.\n+\t* gfortran.h (ext_attr_id_t): Ditto.\n+\t* gfortran.texi (GCC$ ATTRIBUTES): Document it.\n+\t* resolve.c (resolve_variable, resolve_function,\n+\tresolve_call, resolve_values): Show -Wdeprecated-declarations warning.\n+\t* trans-decl.c (add_attributes_to_decl): Skip those\n+\twith no middle_end_name.\n+\n+2020-11-03  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR fortran/92793\n+\t* trans-openmp.c (gfc_trans_omp_clauses): More precise location\n+\tinformation for OpenACC 'gang', 'worker', 'vector' clauses with\n+\targument.\n+\n 2020-11-02  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR fortran/92793"}, {"sha": "b3c0b8f2e7301b0679448693a22934d526f502ab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 231, "deletions": 0, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd2325ea60efea4b7172847dbe3bd8c7bb4e5811", "patch": "@@ -1,3 +1,234 @@\n+2020-11-03  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.c-torture/execute/pr97695.c: New test.\n+\n+2020-11-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/Wclass-memaccess.C: Check that signed char and\n+\tchar16_t aren't treated as byte-access types.\n+\n+2020-11-03  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/goacc/pr92793-1.c: Extend.\n+\t* gfortran.dg/goacc/pr92793-1.f90: Likewise.\n+\n+2020-11-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/97663\n+\t* g++.dg/cpp1z/class-deduction75.C: New test.\n+\n+2020-11-03  Kamlesh Kumar  <kamleshbhalui@gmail.com>\n+\n+\t* g++.dg/DRs/dr2303.C: New test.\n+\n+2020-11-03  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gcc.target/powerpc/pr67789.c: Add\n+\tdg-require-effective-target fpic.\n+\t* gcc.target/powerpc/pr83629.c: Likewise.\n+\t* gcc.target/powerpc/pr84112.c: Likewise. Remove\n+\ta superflous target test in the dg-do compile\n+\tdirective while at it.\n+\n+2020-11-03  Dennis Zhang  <denzha01@e124712.cambridge.arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/bf16_get.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/bf16_get-be.c: New test.\n+\n+2020-11-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97632\n+\t* g++.dg/warn/Winit-list4.C: New test.\n+\n+2020-11-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR target/97205\n+\t* gcc.c-torture/compile/pr97205.c: New test.\n+\n+2020-11-03  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst2_lane_bf16_indices_1.c:\n+\tRun it also for arm-*-*.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst3_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst4_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/arm/simd/vstn_lane_bf16_1.c: New test.\n+\n+2020-11-03  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld2_lane_bf16_indices_1.c:\n+\tRun it also for the arm backend.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld3_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld4_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_bf16_indices_1.c:\n+\tLikewise.\n+\t* gcc.target/arm/simd/vldn_lane_bf16_1.c: New test.\n+\n+2020-11-03  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/simd/vst1_bf16_1.c: New test.\n+\n+2020-11-03  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/simd/vld1_bf16_1.c: New test.\n+\n+2020-11-03  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/simd/vst1_lane_bf16_1.c: New testcase.\n+\t* gcc.target/arm/simd/vstq1_lane_bf16_indices_1.c: Likewise.\n+\t* gcc.target/arm/simd/vst1_lane_bf16_indices_1.c: Likewise.\n+\n+2020-11-03  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/simd/vld1_lane_bf16_1.c: New testcase.\n+\t* gcc.target/arm/simd/vld1_lane_bf16_indices_1.c: Likewise.\n+\t* gcc.target/arm/simd/vld1q_lane_bf16_indices_1.c: Likewise.\n+\n+2020-11-03  Dennis Zhang  <denzha01@e124712.cambridge.arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/bfcvt-compile.c\n+\t(test_vcvt_f32_bf16, test_vcvtq_low_f32_bf16): New tests.\n+\t(test_vcvtq_high_f32_bf16, test_vcvth_f32_bf16): Likewise.\n+\n+2020-11-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80928\n+\t* gcc.dg/vect/vect-outer-slp-2.c: New testcase.\n+\t* gcc.dg/vect/vect-outer-slp-3.c: Likewise.\n+\n+2020-11-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/zero-scratch-regs-1.c: Add ia32 target\n+\tselector where appropriate.  Improve scan-assembler regexp.\n+\t* gcc.target/i386/zero-scratch-regs-2.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-3.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-4.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-5.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-6.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-7.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-8.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-9.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-10.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-13.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-14.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-15.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-16.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-17.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-18.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-19.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-20.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-21.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-22.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-23.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-24.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-25.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-26.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-27.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-28.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-29.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-30.c: Ditto.\n+\t* gcc.target/i386/zero-scratch-regs-31.c: Ditto.\n+\n+2020-11-03  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gcc.dg/tree-ssa/pr71077.c: Add\n+\tdg-require-effective-target lto.\n+\n+2020-11-03  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gcc.target/i386/pr45352-1.c: Add dg-require-effective-target fpic.\n+\t* gcc.target/i386/pr47602.c: Likewise.\n+\t* gcc.target/i386/pr55151.c: Likewise.\n+\t* gcc.target/i386/pr55458.c: Likewise.\n+\t* gcc.target/i386/pr56348.c: Likewise.\n+\t* gcc.target/i386/pr57097.c: Likewise.\n+\t* gcc.target/i386/pr65753.c: Likewise.\n+\t* gcc.target/i386/pr65915.c: Likewise.\n+\t* gcc.target/i386/pr66232-5.c: Likewise.\n+\t* gcc.target/i386/pr66334.c: Likewise.\n+\t* gcc.target/i386/pr66819-2.c: Likewise.\n+\t* gcc.target/i386/pr67265.c: Likewise.\n+\t* gcc.target/i386/pr81481.c: Likewise.\n+\t* gcc.target/i386/pr83994.c: Likewise.\n+\n+2020-11-03  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.c-torture/compile/pr97578.c: New test.\n+\n+2020-11-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/97688\n+\t* gcc.dg/vect/tree-vect.h (check_vect): Fix the x86 cpuid\n+\tcheck to always specify subleaf zero.\n+\n+2020-11-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97678\n+\t* gcc.dg/vect/pr97678.c: New testcase.\n+\n+2020-11-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/attr_deprecated.f90: New test.\n+\n+2020-11-03  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/goacc/nested-reductions-1-kernels.c: Extend.\n+\t* c-c++-common/goacc/nested-reductions-2-kernels.c: Likewise.\n+\t* gfortran.dg/goacc/nested-reductions-1-kernels.f90: Likewise.\n+\t* gfortran.dg/goacc/nested-reductions-2-kernels.f90: Likewise.\n+\n+2020-11-03  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/goacc/nested-reductions.c: Split file into...\n+\t* c-c++-common/goacc/nested-reductions-1-kernels.c: ... this...\n+\t* c-c++-common/goacc/nested-reductions-1-parallel.c: ..., this...\n+\t* c-c++-common/goacc/nested-reductions-1-routine.c: ..., and this.\n+\t* c-c++-common/goacc/nested-reductions-warn.c: Split file into...\n+\t* c-c++-common/goacc/nested-reductions-2-kernels.c: ... this...\n+\t* c-c++-common/goacc/nested-reductions-2-parallel.c: ..., this...\n+\t* c-c++-common/goacc/nested-reductions-2-routine.c: ..., and this.\n+\t* gfortran.dg/goacc/nested-reductions.f90: Split file into...\n+\t* gfortran.dg/goacc/nested-reductions-1-kernels.f90: ... this...\n+\t* gfortran.dg/goacc/nested-reductions-1-parallel.f90: ..., this...\n+\t* gfortran.dg/goacc/nested-reductions-1-routine.f90: ..., and\n+\tthis.\n+\t* gfortran.dg/goacc/nested-reductions-warn.f90: Split file into...\n+\t* gfortran.dg/goacc/nested-reductions-2-kernels.f90: ... this...\n+\t* gfortran.dg/goacc/nested-reductions-2-parallel.f90: ..., this...\n+\t* gfortran.dg/goacc/nested-reductions-2-routine.f90: ..., and\n+\tthis.\n+\n+2020-11-03  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR fortran/92793\n+\t* gfortran.dg/goacc/pr92793-1.f90: Adjust.\n+\n+2020-11-03  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/goacc/pr92793-1.c: Extend.\n+\t* gfortran.dg/goacc/pr92793-1.f90: Likewise.\n+\n+2020-11-03  Kewen Lin  <linkw@gcc.gnu.org>\n+\n+\tPR tree-optimization/96789\n+\t* gcc.dg/tree-ssa/ssa-dse-28.c: Adjust.\n+\t* gcc.dg/tree-ssa/ssa-dse-29.c: Likewise.\n+\t* gcc.dg/vect/bb-slp-41.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr96789.c: New test.\n+\n 2020-11-03  Dennis Zhang  <dennis.zhang@arm.com>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/bf16_get.c: New test."}, {"sha": "a4d6f10f706df104cebf43bf43ce0b80ba46425e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=fd2325ea60efea4b7172847dbe3bd8c7bb4e5811", "patch": "@@ -1,3 +1,28 @@\n+2020-11-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* lex.c (cpp_peek_token): Do not peek past CPP_PRAGMA.\n+\t(_cpp_lex_direct): Handle EOF in pragma when setting need_line,\n+\tnot when needing a line.\n+\n+2020-11-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* lex.c (_cpp_clean_line): Fix DOS off-by-one error.\n+\n+2020-11-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* init.c (cpp_read_main_file): Use cpp_get_deps result.\n+\n+2020-11-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* include/mkdeps.h: Include cpplib.h\n+\t(deps_write): Adjust first parm type.\n+\t* mkdeps.c: Include internal.h\n+\t(make_write): Adjust first parm type.  Check phony option\n+\tdirectly.\n+\t(deps_write): Adjust first parm type.\n+\t* init.c (cpp_read_main_file): Use get_deps.\n+\t* directives.c (cpp_get_deps): Check option before initializing.\n+\n 2020-11-02  Nathan Sidwell  <nathan@acm.org>\n \n \t* internal.h (_cpp_notify_macro_use): Add location parm."}, {"sha": "fa70f2f73e974931e496d85006af0eddf39aa7b3", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=fd2325ea60efea4b7172847dbe3bd8c7bb4e5811", "patch": "@@ -1,3 +1,14 @@\n+2020-11-03  Pat Bernardi  <bernardi@adacore.com>\n+\t    Olivier Hainque   <hainque@adacore.com>\n+\n+\t* config.host (aarch64-vxworks7*, tmake_file): Add\n+\t${cpu_type}/t-lse and t-slibgcc-libgcc.\n+\n+2020-11-03  Martin Storsj\u00f6  <martin@martin.st>\n+\n+\t* unwind-seh.c (_Unwind_Backtrace): Set the ra and cfa pointers\n+\tbefore calling the callback.\n+\n 2020-10-30  Olivier Hainque  <hainque@adacore.com>\n \t    Douglas Rupp  <rupp@adacore.com>\n \t    Pat Bernardi  <bernardi@adacore.com>"}, {"sha": "b4d8e6bc15b4c35644832574e2071ab9a1457e71", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2325ea60efea4b7172847dbe3bd8c7bb4e5811/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fd2325ea60efea4b7172847dbe3bd8c7bb4e5811", "patch": "@@ -1,3 +1,60 @@\n+2020-11-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/syncstream: Include <bits/std_mutex.h>\n+\tunconditionally.\n+\n+2020-11-03  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* config/abi/pre/gnu-versioned-namespace.ver:\n+\tAdd __istream_extract and _Safe_local_iterator_base::_M_attach_single\n+\tsymbols.\n+\n+2020-11-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++11/mutex.cc [_GLIBCXX_HAVE_TLS] (__once_proxy): Define\n+\tseparately for TLS targets.\n+\t[!_GLIBCXX_HAVE_TLS] (__get_once_functor_lock_ptr): Replace with ...\n+\t(set_lock_ptr): ... this. Set new value and return previous\n+\tvalue.\n+\t[!_GLIBCXX_HAVE_TLS] (__set_once_functor_lock_ptr): Adjust to\n+\tuse set_lock_ptr.\n+\t[!_GLIBCXX_HAVE_TLS] (__once_proxy): Likewise.\n+\n+2020-11-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/55394\n+\tPR libstdc++/66146\n+\tPR libstdc++/84323\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.29): Add new symbols.\n+\t* include/std/mutex [!_GLIBCXX_HAS_GTHREADS] (once_flag): Define\n+\teven when gthreads is not supported.\n+\t(once_flag::_M_once) [_GLIBCXX_HAVE_LINUX_FUTEX]: Change type\n+\tfrom __gthread_once_t to int.\n+\t(once_flag::_M_passive(), once_flag::_M_activate())\n+\t(once_flag::_M_finish(bool), once_flag::_Active_execution):\n+\tDefine new members for futex and non-threaded implementation.\n+\t[_GLIBCXX_HAS_GTHREADS] (once_flag::_Prepare_execution): New\n+\tRAII helper type.\n+\t(call_once): Use new members of once_flag.\n+\t* src/c++11/mutex.cc (std::once_flag::_M_activate): Define.\n+\t(std::once_flag::_M_finish): Define.\n+\t* testsuite/30_threads/call_once/39909.cc: Do not require\n+\tgthreads.\n+\t* testsuite/30_threads/call_once/49668.cc: Likewise.\n+\t* testsuite/30_threads/call_once/60497.cc: Likewise.\n+\t* testsuite/30_threads/call_once/call_once1.cc: Likewise.\n+\t* testsuite/30_threads/call_once/dr2442.cc: Likewise.\n+\t* testsuite/30_threads/call_once/once_flag.cc: Add test for\n+\tconstexpr constructor.\n+\t* testsuite/30_threads/call_once/66146.cc: New test.\n+\t* testsuite/30_threads/call_once/constexpr.cc: Removed.\n+\t* testsuite/30_threads/once_flag/cons/constexpr.cc: Removed.\n+\n+2020-11-03  Jonathan Yong  <10walls@gmail.com>\n+\n+\t* src/Makefile.am (libstdc___la_LINK): Add lt_host_flags.\n+\t* src/Makefile.in: Regenerate.\n+\n 2020-11-02  Thomas Rodgers  <trodgers@redhat.com>\n \n \t* doc/doxygen/user.cfg.in (INPUT): Add new header."}]}