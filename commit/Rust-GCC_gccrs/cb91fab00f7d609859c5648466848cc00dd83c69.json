{"sha": "cb91fab00f7d609859c5648466848cc00dd83c69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I5MWZhYjAwZjdkNjA5ODU5YzU2NDg0NjY4NDhjYzAwZGQ4M2M2OQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-04-18T05:26:12Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-04-18T05:26:12Z"}, "message": "except.c (dw2_size_of_call_site_table, [...]): Use vector API for call_site_record.\n\n\n\t* except.c (dw2_size_of_call_site_table,\n\tsjlj_size_of_call_site_table): Use vector API for call_site_record.\n\n\t* cgraphbuild.c (build_cgraph_edges): Update.\n\t* tree-pass.h: Update comment.\n\t* final.c (leaf_function_p): Update.\n\t(leaf_renumber_regs): Update.\n\t(rest_of_clean_state): Update.\n\t* omp-low.c (expand_omp_parallel): Update.\n\t* ipa-reference.c (analyze_function): Update.\n\t* reorg.c (find_end_label): Update.\n\t(optimize_skip): Update.\n\t(fill_simple_delay_slots): Update.\n\t(fill_simple_delay_slots): Update.\n\t(make_return_insns): Update.\n\t(dbr_schedule): Update.\n\t* gimple-low.c (record_vars_into): Update.\n\t* cfgbuild.c (make_edges): Update.\n\t* function.c (assign_stack_local): Update.\n\t(assign_parm_adjust_stack_rtl): Update.\n\t(locate_and_pad_parm): Update.\n\t(allocate_struct_function): Do not initialize stack_alignment_needed\n\tand preferred_stack_boundary here.\n\t(stack_protect_prologue): Update.\n\t(stack_protect_epilogue): Update.\n\t(expand_function_start): Initialize stack_alignment_needed,\n\tpreferred_stack_boundary and max_jumptable_ents.\n\t(expand_function_end): Update.\n\t(free_after_compilation): Do not NULLify epilogue_delay_list.\n\t* function.h (struct rtl_data): Add stack_protect_guard,\n\tstack_alignment_needed,\n\tpreferred_stack_boundary, epilogue_delay_list.\n\t(struct function): Remove value_histograms, stack_alignment_needed,\n\tpreferred_stack_boundary, epilogue_delay_list, max_jumptable_ents,\n\tlast_label_uid,\n\tunexpanded_var_list, stack_protect_guard.\n\t(current_function_epilogue_delay_list): Remove.\n\t* ipa-type-escape.c (analyze_function): Update.\n\t* gimplify.c (pop_gimplify_context): Update comment.\n\t* calls.c (expand_call): Update.\n\t(emit_library_call_value_1): Update.\n\t* except.c (set_nothrow_function_flags): Update.\n\t* cfgexpand.c (get_decl_align_unit): Update.\n\t(create_stack_guard): Update.\n\t(estimated_stack_frame_size): Update.\n\t(expand_used_vars): Update.\n\t(tree_expand_cfg): Free histogram earliers, init expansion variables.\n\t* explow.c (allocate_dynamic_stack_space): Update.\n\t* tree-ssa-live.c (remove_unused_locals): Update.\n\t* varasm.c (mark_constant_pool): Update.\n\t* tree-inline.c (remap_decls): Update.\n\t(initialize_cfun): Update.\n\t(declare_return_variable): Update.\n\t(inline_forbidden_p): Update.\n\t(expand_call_inline): Update.\n\t(declare_inline_vars): Update.\n\t(tree_function_versioning): Update.\n\t* tree-flow.h (value_histograms): New.\n\t(VALUE_HISTOGRAMS): New macro.\n\t* basic-block.h (control_flow_graph): Add max_jumptable_ents,\n\tlast_label_uid.\n\t* tree-cfg.c (set_bb_for_stmt): Update.\n\t(replace_by_duplicate_decl): Update.\n\t(move_block_to_fn): Update.\n\t(new_label_mapper): Update.\n\t(dump_function_to_file): Update.\n\t* ipa-struct-reorg.c (build_data_structure): Update.\n\t* cfgrtl.c (print_rtl_with_bb): Update.\n\t* reload1.c (reload): Update.\n\t(reload): Update.\n\t* config/i386/i386.c (setup_incoming_varargs_64,\n\tix86_compute_frame_layout): Update.\n\t* config/arc/arc.c (arc_output_function_epilogue): Update.\n\nFrom-SVN: r134425", "tree": {"sha": "ff651786f6b6c26df6f5b099b6f4c00550e248dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff651786f6b6c26df6f5b099b6f4c00550e248dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb91fab00f7d609859c5648466848cc00dd83c69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb91fab00f7d609859c5648466848cc00dd83c69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb91fab00f7d609859c5648466848cc00dd83c69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb91fab00f7d609859c5648466848cc00dd83c69/comments", "author": null, "committer": null, "parents": [{"sha": "799cff46ec8fe37c60605f22d8a9d6a39dcdb364", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/799cff46ec8fe37c60605f22d8a9d6a39dcdb364", "html_url": "https://github.com/Rust-GCC/gccrs/commit/799cff46ec8fe37c60605f22d8a9d6a39dcdb364"}], "stats": {"total": 342, "additions": 206, "deletions": 136}, "files": [{"sha": "658909f9c6968563c13918f0698c602ec81945b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -1,3 +1,79 @@\n+2008-04-18  Jan Hubicka  <jh@suse.cz>\n+\n+\t* except.c (dw2_size_of_call_site_table,\n+\tsjlj_size_of_call_site_table): Use vector API for call_site_record.\n+\n+\t* cgraphbuild.c (build_cgraph_edges): Update.\n+\t* tree-pass.h: Update comment.\n+\t* final.c (leaf_function_p): Update.\n+\t(leaf_renumber_regs): Update.\n+\t(rest_of_clean_state): Update.\n+\t* omp-low.c (expand_omp_parallel): Update.\n+\t* ipa-reference.c (analyze_function): Update.\n+\t* reorg.c (find_end_label): Update.\n+\t(optimize_skip): Update.\n+\t(fill_simple_delay_slots): Update.\n+\t(fill_simple_delay_slots): Update.\n+\t(make_return_insns): Update.\n+\t(dbr_schedule): Update.\n+\t* gimple-low.c (record_vars_into): Update.\n+\t* cfgbuild.c (make_edges): Update.\n+\t* function.c (assign_stack_local): Update.\n+\t(assign_parm_adjust_stack_rtl): Update.\n+\t(locate_and_pad_parm): Update.\n+\t(allocate_struct_function): Do not initialize stack_alignment_needed\n+\tand preferred_stack_boundary here.\n+\t(stack_protect_prologue): Update.\n+\t(stack_protect_epilogue): Update.\n+\t(expand_function_start): Initialize stack_alignment_needed,\n+\tpreferred_stack_boundary and max_jumptable_ents.\n+\t(expand_function_end): Update.\n+\t(free_after_compilation): Do not NULLify epilogue_delay_list.\n+\t* function.h (struct rtl_data): Add stack_protect_guard,\n+\tstack_alignment_needed,\n+\tpreferred_stack_boundary, epilogue_delay_list.\n+\t(struct function): Remove value_histograms, stack_alignment_needed,\n+\tpreferred_stack_boundary, epilogue_delay_list, max_jumptable_ents,\n+\tlast_label_uid,\n+\tunexpanded_var_list, stack_protect_guard.\n+\t(current_function_epilogue_delay_list): Remove.\n+\t* ipa-type-escape.c (analyze_function): Update.\n+\t* gimplify.c (pop_gimplify_context): Update comment.\n+\t* calls.c (expand_call): Update.\n+\t(emit_library_call_value_1): Update.\n+\t* except.c (set_nothrow_function_flags): Update.\n+\t* cfgexpand.c (get_decl_align_unit): Update.\n+\t(create_stack_guard): Update.\n+\t(estimated_stack_frame_size): Update.\n+\t(expand_used_vars): Update.\n+\t(tree_expand_cfg): Free histogram earliers, init expansion variables.\n+\t* explow.c (allocate_dynamic_stack_space): Update.\n+\t* tree-ssa-live.c (remove_unused_locals): Update.\n+\t* varasm.c (mark_constant_pool): Update.\n+\t* tree-inline.c (remap_decls): Update.\n+\t(initialize_cfun): Update.\n+\t(declare_return_variable): Update.\n+\t(inline_forbidden_p): Update.\n+\t(expand_call_inline): Update.\n+\t(declare_inline_vars): Update.\n+\t(tree_function_versioning): Update.\n+\t* tree-flow.h (value_histograms): New.\n+\t(VALUE_HISTOGRAMS): New macro.\n+\t* basic-block.h (control_flow_graph): Add max_jumptable_ents,\n+\tlast_label_uid.\n+\t* tree-cfg.c (set_bb_for_stmt): Update.\n+\t(replace_by_duplicate_decl): Update.\n+\t(move_block_to_fn): Update.\n+\t(new_label_mapper): Update.\n+\t(dump_function_to_file): Update.\n+\t* ipa-struct-reorg.c (build_data_structure): Update.\n+\t* cfgrtl.c (print_rtl_with_bb): Update.\n+\t* reload1.c (reload): Update.\n+\t(reload): Update.\n+\t* config/i386/i386.c (setup_incoming_varargs_64,\n+\tix86_compute_frame_layout): Update.\n+\t* config/arc/arc.c (arc_output_function_epilogue): Update.\n+\n 2008-04-18  Marius Strobl <marius@FreeBSD.org>\n \n \t* gthr-posix.h (__gthread_active_p): Use the Solaris implementation"}, {"sha": "a2598df3d34508b23372ac20bcb22bc8dba3d712", "filename": "gcc/basic-block.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -397,6 +397,13 @@ struct control_flow_graph GTY(())\n \n   /* Number of basic blocks in the dominance tree.  */\n   unsigned x_n_bbs_in_dom_tree[2];\n+\n+  /* Maximal number of entities in the single jumptable.  Used to estimate\n+     final flowgraph size.  */\n+  int max_jumptable_ents;\n+\n+  /* UIDs for LABEL_DECLs.  */\n+  int last_label_uid;\n };\n \n /* Defines for accessing the fields of the CFG structure for function FN.  */"}, {"sha": "7d42de9f13aa9862471c02be18bc44d9873b2d6f", "filename": "gcc/calls.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -2296,9 +2296,9 @@ expand_call (tree exp, rtx target, int ignore)\n   /* Ensure current function's preferred stack boundary is at least\n      what we need.  We don't have to increase alignment for recursive\n      functions.  */\n-  if (cfun->preferred_stack_boundary < preferred_stack_boundary\n+  if (crtl->preferred_stack_boundary < preferred_stack_boundary\n       && fndecl != current_function_decl)\n-    cfun->preferred_stack_boundary = preferred_stack_boundary;\n+    crtl->preferred_stack_boundary = preferred_stack_boundary;\n   if (fndecl == current_function_decl)\n     cfun->recursive_call_emit = true;\n \n@@ -2370,7 +2370,7 @@ expand_call (tree exp, rtx target, int ignore)\n       if (pass && (flags & (ECF_LIBCALL_BLOCK | ECF_MALLOC)))\n \tstart_sequence ();\n \n-      if (pass == 0 && cfun->stack_protect_guard)\n+      if (pass == 0 && crtl->stack_protect_guard)\n \tstack_protect_epilogue ();\n \n       adjusted_args_size = args_size;\n@@ -3346,8 +3346,8 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \n   /* Ensure current function's preferred stack boundary is at least\n      what we need.  */\n-  if (cfun->preferred_stack_boundary < PREFERRED_STACK_BOUNDARY)\n-    cfun->preferred_stack_boundary = PREFERRED_STACK_BOUNDARY;\n+  if (crtl->preferred_stack_boundary < PREFERRED_STACK_BOUNDARY)\n+    crtl->preferred_stack_boundary = PREFERRED_STACK_BOUNDARY;\n \n   /* If this kind of value comes back in memory,\n      decide where in memory it should come back.  */"}, {"sha": "b4e3baad8201683f90b39e267e04bfa2439dadb7", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -256,7 +256,7 @@ make_edges (basic_block min, basic_block max, int update_p)\n   /* Heavy use of computed goto in machine-generated code can lead to\n      nearly fully-connected CFGs.  In that case we spend a significant\n      amount of time searching the edge lists for duplicates.  */\n-  if (forced_labels || cfun->max_jumptable_ents > 100)\n+  if (forced_labels || cfun->cfg->max_jumptable_ents > 100)\n     edge_cache = sbitmap_alloc (last_basic_block);\n \n   /* By nature of the way these get numbered, ENTRY_BLOCK_PTR->next_bb block"}, {"sha": "00abf1e7e536eabbe91fb0495ab89a321873ae15", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -163,8 +163,8 @@ get_decl_align_unit (tree decl)\n   align = LOCAL_ALIGNMENT (TREE_TYPE (decl), align);\n   if (align > PREFERRED_STACK_BOUNDARY)\n     align = PREFERRED_STACK_BOUNDARY;\n-  if (cfun->stack_alignment_needed < align)\n-    cfun->stack_alignment_needed = align;\n+  if (crtl->stack_alignment_needed < align)\n+    crtl->stack_alignment_needed = align;\n \n   return align / BITS_PER_UNIT;\n }\n@@ -978,7 +978,7 @@ create_stack_guard (void)\n   TREE_THIS_VOLATILE (guard) = 1;\n   TREE_USED (guard) = 1;\n   expand_one_stack_var (guard);\n-  cfun->stack_protect_guard = guard;\n+  crtl->stack_protect_guard = guard;\n }\n \n /* A subroutine of expand_used_vars.  Walk down through the BLOCK tree\n@@ -1029,8 +1029,8 @@ static void\n init_vars_expansion (void)\n {\n   tree t;\n-  /* Set TREE_USED on all variables in the unexpanded_var_list.  */\n-  for (t = cfun->unexpanded_var_list; t; t = TREE_CHAIN (t))\n+  /* Set TREE_USED on all variables in the local_decls.  */\n+  for (t = cfun->local_decls; t; t = TREE_CHAIN (t))\n     TREE_USED (TREE_VALUE (t)) = 1;\n \n   /* Clear TREE_USED on all variables associated with a block scope.  */\n@@ -1062,9 +1062,9 @@ estimated_stack_frame_size (void)\n \n   init_vars_expansion ();\n \n-  /* At this point all variables on the unexpanded_var_list with TREE_USED\n+  /* At this point all variables on the local_decls with TREE_USED\n      set are not associated with any block scope.  Lay them out.  */\n-  for (t = cfun->unexpanded_var_list; t; t = TREE_CHAIN (t))\n+  for (t = cfun->local_decls; t; t = TREE_CHAIN (t))\n     {\n       tree var = TREE_VALUE (t);\n \n@@ -1113,9 +1113,9 @@ expand_used_vars (void)\n \n   init_vars_expansion ();\n \n-  /* At this point all variables on the unexpanded_var_list with TREE_USED\n+  /* At this point all variables on the local_decls with TREE_USED\n      set are not associated with any block scope.  Lay them out.  */\n-  for (t = cfun->unexpanded_var_list; t; t = TREE_CHAIN (t))\n+  for (t = cfun->local_decls; t; t = TREE_CHAIN (t))\n     {\n       tree var = TREE_VALUE (t);\n       bool expand_now = false;\n@@ -1148,7 +1148,7 @@ expand_used_vars (void)\n       if (expand_now)\n \texpand_one_var (var, true, true);\n     }\n-  cfun->unexpanded_var_list = NULL_TREE;\n+  cfun->local_decls = NULL_TREE;\n \n   /* At this point, all variables within the block tree with TREE_USED\n      set are actually used by the optimized function.  Lay them out.  */\n@@ -1863,6 +1863,10 @@ tree_expand_cfg (void)\n   discover_nonconstant_array_refs ();\n \n   targetm.expand_to_rtl_hook ();\n+  crtl->stack_alignment_needed = STACK_BOUNDARY;\n+  crtl->preferred_stack_boundary = STACK_BOUNDARY;\n+  cfun->cfg->max_jumptable_ents = 0;\n+\n \n   /* Expand the variables recorded during gimple lowering.  */\n   expand_used_vars ();\n@@ -1873,7 +1877,7 @@ tree_expand_cfg (void)\n       if (current_function_calls_alloca)\n \twarning (OPT_Wstack_protector, \n \t\t \"not protecting local variables: variable length buffer\");\n-      if (has_short_buffer && !cfun->stack_protect_guard)\n+      if (has_short_buffer && !crtl->stack_protect_guard)\n \twarning (OPT_Wstack_protector, \n \t\t \"not protecting function: no buffer at least %d bytes long\",\n \t\t (int) PARAM_VALUE (PARAM_SSP_BUFFER_SIZE));\n@@ -1891,7 +1895,7 @@ tree_expand_cfg (void)\n \n   /* Initialize the stack_protect_guard field.  This must happen after the\n      call to __main (if any) so that the external decl is initialized.  */\n-  if (cfun->stack_protect_guard)\n+  if (crtl->stack_protect_guard)\n     stack_protect_prologue ();\n \n   /* Register rtl specific functions for cfg.  */\n@@ -1908,6 +1912,7 @@ tree_expand_cfg (void)\n   FOR_BB_BETWEEN (bb, init_block->next_bb, EXIT_BLOCK_PTR, next_bb)\n     bb = expand_gimple_basic_block (bb);\n   pointer_map_destroy (lab_rtx_for_bb);\n+  free_histograms ();\n \n   construct_exit_block ();\n   set_curr_insn_block (DECL_INITIAL (current_function_decl));\n@@ -1971,7 +1976,6 @@ tree_expand_cfg (void)\n   /* After expanding, the return labels are no longer needed. */\n   return_label = NULL;\n   naked_return_label = NULL;\n-  free_histograms ();\n   /* Tag the blocks with a depth number so that change_scope can find\n      the common parent easily.  */\n   set_block_levels (DECL_INITIAL (cfun->decl), 0);"}, {"sha": "4c17fe5af2f84dbe8d89e22a32d8abccbf1316e6", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -1651,10 +1651,10 @@ print_rtl_with_bb (FILE *outf, const_rtx rtx_first)\n       free (in_bb_p);\n     }\n \n-  if (current_function_epilogue_delay_list != 0)\n+  if (crtl->epilogue_delay_list != 0)\n     {\n       fprintf (outf, \"\\n;; Insns in epilogue delay list:\\n\\n\");\n-      for (tmp_rtx = current_function_epilogue_delay_list; tmp_rtx != 0;\n+      for (tmp_rtx = crtl->epilogue_delay_list; tmp_rtx != 0;\n \t   tmp_rtx = XEXP (tmp_rtx, 1))\n \tprint_rtl_single (outf, XEXP (tmp_rtx, 0));\n     }"}, {"sha": "6706c4520fb60793df7a2d64bfb85d4ac26e17bb", "filename": "gcc/cgraphbuild.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fcgraphbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fcgraphbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphbuild.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -152,7 +152,7 @@ build_cgraph_edges (void)\n       }\n \n   /* Look for initializers of constant variables and private statics.  */\n-  for (step = cfun->unexpanded_var_list;\n+  for (step = cfun->local_decls;\n        step;\n        step = TREE_CHAIN (step))\n     {"}, {"sha": "cf0f7b64dfa8617f347da8b5528fe9f9b7cf8280", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -1254,7 +1254,7 @@ arc_output_function_prologue (FILE *file, HOST_WIDE_INT size)\n static void\n arc_output_function_epilogue (FILE *file, HOST_WIDE_INT size)\n {\n-  rtx epilogue_delay = current_function_epilogue_delay_list;\n+  rtx epilogue_delay = crtl->epilogue_delay_list;\n   int noepilogue = FALSE;\n   enum arc_function_type fn_type = arc_compute_function_type (current_function_decl);\n "}, {"sha": "9c12abcd95965a2dffdf86fddf054e399c27e81d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -5060,7 +5060,7 @@ setup_incoming_varargs_64 (CUMULATIVE_ARGS *cum)\n      We also may end up assuming that only 64bit values are stored in SSE\n      register let some floating point program work.  */\n   if (ix86_preferred_stack_boundary >= BIGGEST_ALIGNMENT)\n-    cfun->stack_alignment_needed = BIGGEST_ALIGNMENT;\n+    crtl->stack_alignment_needed = BIGGEST_ALIGNMENT;\n \n   save_area = frame_pointer_rtx;\n   set = get_varargs_alias_set ();\n@@ -6098,8 +6098,8 @@ ix86_compute_frame_layout (struct ix86_frame *frame)\n   frame->nregs = ix86_nsaved_regs ();\n   total_size = size;\n \n-  stack_alignment_needed = cfun->stack_alignment_needed / BITS_PER_UNIT;\n-  preferred_alignment = cfun->preferred_stack_boundary / BITS_PER_UNIT;\n+  stack_alignment_needed = crtl->stack_alignment_needed / BITS_PER_UNIT;\n+  preferred_alignment = crtl->preferred_stack_boundary / BITS_PER_UNIT;\n \n   /* During reload iteration the amount of registers saved can change.\n      Recompute the value as needed.  Do not recompute when amount of registers"}, {"sha": "9480658b506c34ef92ede073b412b2af0c7e6109", "filename": "gcc/except.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -2784,7 +2784,7 @@ set_nothrow_function_flags (void)\n \t  }\n       }\n \n-  for (insn = current_function_epilogue_delay_list; insn;\n+  for (insn = crtl->epilogue_delay_list; insn;\n        insn = XEXP (insn, 1))\n     if (can_throw_external (insn))\n       {\n@@ -3379,13 +3379,13 @@ push_sleb128 (varray_type *data_area, int value)\n static int\n dw2_size_of_call_site_table (void)\n {\n-  int n = cfun->eh->call_site_data_used;\n+  int n = VEC_length (call_site_record, crtl->eh.call_site_record);\n   int size = n * (4 + 4 + 4);\n   int i;\n \n   for (i = 0; i < n; ++i)\n     {\n-      struct call_site_record *cs = &cfun->eh->call_site_data[i];\n+      struct call_site_record *cs = VEC_index (call_site_record, crtl->eh.call_site_record, i);\n       size += size_of_uleb128 (cs->action);\n     }\n \n@@ -3395,13 +3395,13 @@ dw2_size_of_call_site_table (void)\n static int\n sjlj_size_of_call_site_table (void)\n {\n-  int n = cfun->eh->call_site_data_used;\n+  int n = VEC_length (call_site_record, crtl->eh.call_site_record);\n   int size = 0;\n   int i;\n \n   for (i = 0; i < n; ++i)\n     {\n-      struct call_site_record *cs = &cfun->eh->call_site_data[i];\n+      struct call_site_record *cs = VEC_index (call_site_record, crtl->eh.call_site_record, i);\n       size += size_of_uleb128 (INTVAL (cs->landing_pad));\n       size += size_of_uleb128 (cs->action);\n     }"}, {"sha": "77d814789e41c0a91ba170744735b9f84ef6c70a", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -1090,7 +1090,7 @@ allocate_dynamic_stack_space (rtx size, rtx target, int known_align)\n   /* We can't attempt to minimize alignment necessary, because we don't\n      know the final value of preferred_stack_boundary yet while executing\n      this code.  */\n-  cfun->preferred_stack_boundary = PREFERRED_STACK_BOUNDARY;\n+  crtl->preferred_stack_boundary = PREFERRED_STACK_BOUNDARY;\n \n   /* We will need to ensure that the address we return is aligned to\n      BIGGEST_ALIGNMENT.  If STACK_DYNAMIC_OFFSET is defined, we don't"}, {"sha": "7f386439acc75cede102c8b5de736bdbe2a7e1f0", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -9923,8 +9923,8 @@ do_tablejump (rtx index, enum machine_mode mode, rtx range, rtx table_label,\n {\n   rtx temp, vector;\n \n-  if (INTVAL (range) > cfun->max_jumptable_ents)\n-    cfun->max_jumptable_ents = INTVAL (range);\n+  if (INTVAL (range) > cfun->cfg->max_jumptable_ents)\n+    cfun->cfg->max_jumptable_ents = INTVAL (range);\n \n   /* Do an unsigned comparison (in the proper mode) between the index\n      expression and the value which represents the length of the range."}, {"sha": "177c17687d598d384ce92434e7696dfaa8d24b80", "filename": "gcc/final.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -3827,7 +3827,7 @@ leaf_function_p (void)\n \t  && ! SIBLING_CALL_P (XVECEXP (PATTERN (insn), 0, 0)))\n \treturn 0;\n     }\n-  for (link = current_function_epilogue_delay_list;\n+  for (link = crtl->epilogue_delay_list;\n        link;\n        link = XEXP (link, 1))\n     {\n@@ -3911,7 +3911,7 @@ leaf_renumber_regs (rtx first)\n   for (insn = first; insn; insn = NEXT_INSN (insn))\n     if (INSN_P (insn))\n       leaf_renumber_regs_insn (PATTERN (insn));\n-  for (insn = current_function_epilogue_delay_list;\n+  for (insn = crtl->epilogue_delay_list;\n        insn;\n        insn = XEXP (insn, 1))\n     if (INSN_P (XEXP (insn, 0)))\n@@ -4239,9 +4239,9 @@ rest_of_clean_state (void)\n \n   if (targetm.binds_local_p (current_function_decl))\n     {\n-      int pref = cfun->preferred_stack_boundary;\n-      if (cfun->stack_alignment_needed > cfun->preferred_stack_boundary)\n-        pref = cfun->stack_alignment_needed;\n+      int pref = crtl->preferred_stack_boundary;\n+      if (crtl->stack_alignment_needed > crtl->preferred_stack_boundary)\n+        pref = crtl->stack_alignment_needed;\n       cgraph_rtl_info (current_function_decl)->preferred_incoming_stack_boundary\n         = pref;\n     }"}, {"sha": "c804c5e32f031224535ee8a4a7262a2c03e6adb6", "filename": "gcc/function.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -289,7 +289,6 @@ free_after_compilation (struct function *f)\n   f->machine = NULL;\n   f->cfg = NULL;\n \n-  f->epilogue_delay_list = NULL;\n   regno_reg_rtx = NULL;\n }\n \f\n@@ -379,8 +378,8 @@ assign_stack_local (enum machine_mode mode, HOST_WIDE_INT size, int align)\n   if (alignment * BITS_PER_UNIT > PREFERRED_STACK_BOUNDARY)\n     alignment = PREFERRED_STACK_BOUNDARY / BITS_PER_UNIT;\n \n-  if (cfun->stack_alignment_needed < alignment * BITS_PER_UNIT)\n-    cfun->stack_alignment_needed = alignment * BITS_PER_UNIT;\n+  if (crtl->stack_alignment_needed < alignment * BITS_PER_UNIT)\n+    crtl->stack_alignment_needed = alignment * BITS_PER_UNIT;\n \n   /* Calculate how many bytes the start of local variables is off from\n      stack alignment.  */\n@@ -2379,7 +2378,7 @@ assign_parm_adjust_stack_rtl (struct assign_parm_data_one *data)\n \n   /* If stack protection is in effect for this function, don't leave any\n      pointers in their passed stack slots.  */\n-  else if (cfun->stack_protect_guard\n+  else if (crtl->stack_protect_guard\n \t   && (flag_stack_protect == 2\n \t       || data->passed_pointer\n \t       || POINTER_TYPE_P (data->nominal_type)))\n@@ -3286,8 +3285,8 @@ locate_and_pad_parm (enum machine_mode passed_mode, tree type, int in_regs,\n      calling function side.  */\n   if (boundary > PREFERRED_STACK_BOUNDARY)\n     boundary = PREFERRED_STACK_BOUNDARY;\n-  if (cfun->stack_alignment_needed < boundary)\n-    cfun->stack_alignment_needed = boundary;\n+  if (crtl->stack_alignment_needed < boundary)\n+    crtl->stack_alignment_needed = boundary;\n \n #ifdef ARGS_GROW_DOWNWARD\n   locate->slot_offset.constant = -initial_offset_ptr->constant;\n@@ -3842,9 +3841,6 @@ allocate_struct_function (tree fndecl, bool abstract_p)\n \n   cfun = ggc_alloc_cleared (sizeof (struct function));\n \n-  cfun->stack_alignment_needed = STACK_BOUNDARY;\n-  cfun->preferred_stack_boundary = STACK_BOUNDARY;\n-\n   current_function_funcdef_no = get_next_funcdef_no ();\n \n   cfun->function_frequency = FUNCTION_FREQUENCY_NORMAL;\n@@ -4020,9 +4016,9 @@ stack_protect_prologue (void)\n \n   /* Avoid expand_expr here, because we don't want guard_decl pulled\n      into registers unless absolutely necessary.  And we know that\n-     cfun->stack_protect_guard is a local stack slot, so this skips\n+     crtl->stack_protect_guard is a local stack slot, so this skips\n      all the fluff.  */\n-  x = validize_mem (DECL_RTL (cfun->stack_protect_guard));\n+  x = validize_mem (DECL_RTL (crtl->stack_protect_guard));\n   y = validize_mem (DECL_RTL (guard_decl));\n \n   /* Allow the target to copy from Y to X without leaking Y into a\n@@ -4058,9 +4054,9 @@ stack_protect_epilogue (void)\n \n   /* Avoid expand_expr here, because we don't want guard_decl pulled\n      into registers unless absolutely necessary.  And we know that\n-     cfun->stack_protect_guard is a local stack slot, so this skips\n+     crtl->stack_protect_guard is a local stack slot, so this skips\n      all the fluff.  */\n-  x = validize_mem (DECL_RTL (cfun->stack_protect_guard));\n+  x = validize_mem (DECL_RTL (crtl->stack_protect_guard));\n   y = validize_mem (DECL_RTL (guard_decl));\n \n   /* Allow the target to compare Y with X without leaking either into\n@@ -4581,7 +4577,7 @@ expand_function_end (void)\n     emit_insn (gen_blockage ());\n \n   /* If stack protection is enabled for this function, check the guard.  */\n-  if (cfun->stack_protect_guard)\n+  if (crtl->stack_protect_guard)\n     stack_protect_epilogue ();\n \n   /* If we had calls to alloca, and this machine needs"}, {"sha": "e98ffff88e78cd3a49927135eb2646a863ef1b3e", "filename": "gcc/function.h", "status": "modified", "additions": 19, "deletions": 28, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -275,6 +275,10 @@ struct rtl_data GTY(())\n      has_hard_reg_initial_val (see integrate.[hc]).  */\n   struct initial_value_struct *hard_reg_initial_vals;\n \n+  /* A variable living at the top of the frame that holds a known value.\n+     Used for detecting stack clobbers.  */\n+  tree stack_protect_guard;\n+\n   /* List (chain of EXPR_LIST) of labels heading the current handlers for\n      nonlocal gotos.  */\n   rtx x_nonlocal_goto_handler_labels;\n@@ -290,7 +294,7 @@ struct rtl_data GTY(())\n   rtx x_naked_return_label;\n \n   /* List (chain of EXPR_LISTs) of all stack slots in this function.\n-     Made for the sake of unshare_all_crtl->  */\n+     Made for the sake of unshare_all_rtl.  */\n   rtx x_stack_slot_list;\n \n   /* Place after which to insert the tail_recursion_label if we need one.  */\n@@ -319,6 +323,17 @@ struct rtl_data GTY(())\n   /* Current nesting level for temporaries.  */\n   int x_temp_slot_level;\n \n+  /* The largest alignment of slot allocated on the stack.  */\n+  unsigned int stack_alignment_needed;\n+\n+  /* Preferred alignment of the end of stack frame.  */\n+  unsigned int preferred_stack_boundary;\n+\n+  /* For reorg.  */\n+\n+  /* If some insns can be deferred to the delay slots of the epilogue, the\n+     delay list for them is recorded here.  */\n+  rtx epilogue_delay_list;\n };\n \n #define return_label (crtl->x_return_label)\n@@ -378,46 +393,23 @@ struct function GTY(())\n   /* Function sequence number for profiling, debugging, etc.  */\n   int funcdef_no;\n \n+  /* List of function local variables, functions, types and constants.  */\n+  tree local_decls;\n+\n   /* For md files.  */\n \n   /* tm.h can use this to store whatever it likes.  */\n   struct machine_function * GTY ((maybe_undef)) machine;\n \n-  /* The largest alignment of slot allocated on the stack.  */\n-  unsigned int stack_alignment_needed;\n-\n-  /* Preferred alignment of the end of stack frame.  */\n-  unsigned int preferred_stack_boundary;\n-\n   /* Language-specific code can use this to store whatever it likes.  */\n   struct language_function * language;\n \n   /* Used types hash table.  */\n   htab_t GTY ((param_is (union tree_node))) used_types_hash;\n \n-  /* For reorg.  */\n-\n-  /* If some insns can be deferred to the delay slots of the epilogue, the\n-     delay list for them is recorded here.  */\n-  rtx epilogue_delay_list;\n-\n-  /* Maximal number of entities in the single jumptable.  Used to estimate\n-     final flowgraph size.  */\n-  int max_jumptable_ents;\n-\n-  /* UIDs for LABEL_DECLs.  */\n-  int last_label_uid;\n-\n   /* Line number of the end of the function.  */\n   location_t function_end_locus;\n \n-  /* The variables unexpanded so far.  */\n-  tree unexpanded_var_list;\n-\n-  /* A variable living at the top of the frame that holds a known value.\n-     Used for detecting stack clobbers.  */\n-  tree stack_protect_guard;\n-\n   /* Properties used by the pass manager.  */\n   unsigned int curr_properties;\n   unsigned int last_verified;\n@@ -584,7 +576,6 @@ extern void instantiate_decl_rtl (rtx x);\n #define current_function_limit_stack (cfun->limit_stack)\n #define current_function_uses_pic_offset_table (cfun->uses_pic_offset_table)\n #define current_function_uses_const_pool (cfun->uses_const_pool)\n-#define current_function_epilogue_delay_list (cfun->epilogue_delay_list)\n #define current_function_has_nonlocal_label (cfun->has_nonlocal_label)\n #define current_function_saves_all_registers (cfun->saves_all_registers)\n #define current_function_has_nonlocal_goto (cfun->has_nonlocal_goto)"}, {"sha": "89de67a088c1f12c556116936b1a52201c248d76", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -736,8 +736,8 @@ record_vars_into (tree vars, tree fn)\n \tcontinue;\n \n       /* Record the variable.  */\n-      cfun->unexpanded_var_list = tree_cons (NULL_TREE, var,\n-\t\t\t\t\t     cfun->unexpanded_var_list);\n+      cfun->local_decls = tree_cons (NULL_TREE, var,\n+\t\t\t\t\t     cfun->local_decls);\n     }\n \n   if (fn != current_function_decl)"}, {"sha": "cc9fd1505ec3310f9dd7cc38bc5f98dd77e0d2dd", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -175,7 +175,7 @@ push_gimplify_context (void)\n \n /* Tear down a context for the gimplifier.  If BODY is non-null, then\n    put the temporaries into the outer BIND_EXPR.  Otherwise, put them\n-   in the unexpanded_var_list.  */\n+   in the local_decls.  */\n \n void\n pop_gimplify_context (tree body)"}, {"sha": "75aed2f52f6eb30d5911f1ac2f78d5a28d29d77d", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -836,7 +836,7 @@ analyze_function (struct cgraph_node *fn)\n   if (DECL_STRUCT_FUNCTION (decl))\n     {\n       tree step;\n-      for (step = DECL_STRUCT_FUNCTION (decl)->unexpanded_var_list;\n+      for (step = DECL_STRUCT_FUNCTION (decl)->local_decls;\n \t   step;\n \t   step = TREE_CHAIN (step))\n \t{"}, {"sha": "d0d1c935dc36a10f542a1d31d869f0dd9d5531fe", "filename": "gcc/ipa-struct-reorg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fipa-struct-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fipa-struct-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-struct-reorg.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -3443,7 +3443,7 @@ build_data_structure (VEC (tree, heap) **unsuitable_types)\n \t\tadd_structure (type);\n \n \t  /* Check function local variables.  */\n-\t  for (var_list = fn->unexpanded_var_list; var_list; \n+\t  for (var_list = fn->local_decls; var_list; \n \t       var_list = TREE_CHAIN (var_list))\n \t    {\n \t      var = TREE_VALUE (var_list);"}, {"sha": "2e6c5809df70d54178518021d7913a4138afcfb0", "filename": "gcc/ipa-type-escape.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fipa-type-escape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fipa-type-escape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-type-escape.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -1752,7 +1752,7 @@ analyze_function (struct cgraph_node *fn)\n   if (DECL_STRUCT_FUNCTION (decl))\n     {\n       tree step;\n-      for (step = DECL_STRUCT_FUNCTION (decl)->unexpanded_var_list;\n+      for (step = DECL_STRUCT_FUNCTION (decl)->local_decls;\n \t   step;\n \t   step = TREE_CHAIN (step))\n \t{"}, {"sha": "60b14800679904810dee6d092761432a25db2044", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -2626,7 +2626,7 @@ expand_omp_parallel (struct omp_region *region)\n \n       /* Declare local variables needed in CHILD_CFUN.  */\n       block = DECL_INITIAL (child_fn);\n-      BLOCK_VARS (block) = list2chain (child_cfun->unexpanded_var_list);\n+      BLOCK_VARS (block) = list2chain (child_cfun->local_decls);\n       DECL_SAVED_TREE (child_fn) = bb_stmt_list (single_succ (entry_bb));\n \n       /* Reset DECL_CONTEXT on function arguments.  */"}, {"sha": "7dc593f68ad41a4911cd8652a71e0eb5a6b35999", "filename": "gcc/reload1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -1012,7 +1012,7 @@ reload (rtx first, int global)\n       /* If we allocated another stack slot, redo elimination bookkeeping.  */\n       if (starting_frame_size != get_frame_size ())\n \tcontinue;\n-      if (starting_frame_size && cfun->stack_alignment_needed)\n+      if (starting_frame_size && crtl->stack_alignment_needed)\n \t{\n \t  /* If we have a stack frame, we must align it now.  The\n \t     stack size may be a part of the offset computation for\n@@ -1022,7 +1022,7 @@ reload (rtx first, int global)\n \t     stack frame when none is needed should\n \t     STARTING_FRAME_OFFSET not be already aligned to\n \t     STACK_BOUNDARY.  */\n-\t  assign_stack_local (BLKmode, 0, cfun->stack_alignment_needed);\n+\t  assign_stack_local (BLKmode, 0, crtl->stack_alignment_needed);\n \t  if (starting_frame_size != get_frame_size ())\n \t    continue;\n \t}"}, {"sha": "773950909b3b18a9a037b67cf73ba00643bac987", "filename": "gcc/reorg.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -428,7 +428,7 @@ find_end_label (void)\n \t     epilogue has filled delay-slots; we would have to try and\n \t     move the delay-slot fillers to the delay-slots for the new\n \t     return insn or in front of the new return insn.  */\n-\t  if (current_function_epilogue_delay_list == NULL\n+\t  if (crtl->epilogue_delay_list == NULL\n \t      && HAVE_return)\n \t    {\n \t      /* The return we make may have delay slots too.  */\n@@ -792,7 +792,7 @@ optimize_skip (rtx insn)\n      In both of these cases, inverting the jump and annulling the delay\n      slot give the same effect in fewer insns.  */\n   if ((next_trial == next_active_insn (JUMP_LABEL (insn))\n-       && ! (next_trial == 0 && current_function_epilogue_delay_list != 0))\n+       && ! (next_trial == 0 && crtl->epilogue_delay_list != 0))\n       || (next_trial != 0\n \t  && JUMP_P (next_trial)\n \t  && JUMP_LABEL (insn) == JUMP_LABEL (next_trial)\n@@ -2410,7 +2410,7 @@ fill_simple_delay_slots (int non_jumps_p)\n      The only thing we can do is scan backwards from the end of the\n      function.  If we did this in a previous pass, it is incorrect to do it\n      again.  */\n-  if (current_function_epilogue_delay_list)\n+  if (crtl->epilogue_delay_list)\n     return;\n \n   slots_to_fill = DELAY_SLOTS_FOR_EPILOGUE;\n@@ -2470,9 +2470,9 @@ fill_simple_delay_slots (int non_jumps_p)\n \t      /* Here as well we are searching backward, so put the\n \t\t insns we find on the head of the list.  */\n \n-\t      current_function_epilogue_delay_list\n+\t      crtl->epilogue_delay_list\n \t\t= gen_rtx_INSN_LIST (VOIDmode, trial,\n-\t\t\t\t     current_function_epilogue_delay_list);\n+\t\t\t\t     crtl->epilogue_delay_list);\n \t      mark_end_of_function_resources (trial, 1);\n \t      update_block (trial, trial);\n \t      delete_related_insns (trial);\n@@ -3695,7 +3695,7 @@ make_return_insns (rtx first)\n      delay slot filler insns.  It is also unknown whether such a\n      transformation would actually be profitable.  Note that the existing\n      code only cares for branches with (some) filled delay slots.  */\n-  if (current_function_epilogue_delay_list != NULL)\n+  if (crtl->epilogue_delay_list != NULL)\n     return;\n #endif\n \n@@ -4036,7 +4036,7 @@ dbr_schedule (rtx first)\n   {\n     rtx link;\n \n-    for (link = current_function_epilogue_delay_list;\n+    for (link = crtl->epilogue_delay_list;\n          link;\n          link = XEXP (link, 1))\n       INSN_LOCATOR (XEXP (link, 0)) = 0;"}, {"sha": "f63f6eb989f8f169488c2cc3dd951de3ad27db36", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -2697,7 +2697,7 @@ set_bb_for_stmt (tree t, basic_block bb)\n \t  if (uid == -1)\n \t    {\n \t      unsigned old_len = VEC_length (basic_block, label_to_block_map);\n-\t      LABEL_DECL_UID (t) = uid = cfun->last_label_uid++;\n+\t      LABEL_DECL_UID (t) = uid = cfun->cfg->last_label_uid++;\n \t      if (old_len <= (unsigned) uid)\n \t\t{\n \t\t  unsigned new_len = 3 * uid / 2;\n@@ -5550,8 +5550,7 @@ replace_by_duplicate_decl (tree *tp, struct pointer_map_t *vars_map,\n       if (SSA_VAR_P (t))\n \t{\n \t  new_t = copy_var_decl (t, DECL_NAME (t), TREE_TYPE (t));\n-\t  f->unexpanded_var_list\n-\t\t  = tree_cons (NULL_TREE, new_t, f->unexpanded_var_list);\n+\t  f->local_decls = tree_cons (NULL_TREE, new_t, f->local_decls);\n \t}\n       else\n \t{\n@@ -5844,8 +5843,8 @@ move_block_to_fn (struct function *dest_cfun, basic_block bb,\n \n \t  gcc_assert (DECL_CONTEXT (label) == dest_cfun->decl);\n \n-\t  if (uid >= dest_cfun->last_label_uid)\n-\t    dest_cfun->last_label_uid = uid + 1;\n+\t  if (uid >= dest_cfun->cfg->last_label_uid)\n+\t    dest_cfun->cfg->last_label_uid = uid + 1;\n \t}\n       else if (TREE_CODE (stmt) == RESX_EXPR && eh_offset != 0)\n \tTREE_OPERAND (stmt, 0) =\n@@ -5918,8 +5917,8 @@ new_label_mapper (tree decl, void *data)\n   m->base.from = decl;\n   m->to = create_artificial_label ();\n   LABEL_DECL_UID (m->to) = LABEL_DECL_UID (decl);\n-  if (LABEL_DECL_UID (m->to) >= cfun->last_label_uid)\n-    cfun->last_label_uid = LABEL_DECL_UID (m->to) + 1;\n+  if (LABEL_DECL_UID (m->to) >= cfun->cfg->last_label_uid)\n+    cfun->cfg->last_label_uid = LABEL_DECL_UID (m->to) + 1;\n \n   slot = htab_find_slot_with_hash (hash, m, m->hash, INSERT);\n   gcc_assert (*slot == NULL);\n@@ -6161,12 +6160,12 @@ dump_function_to_file (tree fn, FILE *file, int flags)\n \n   /* When GIMPLE is lowered, the variables are no longer available in\n      BIND_EXPRs, so display them separately.  */\n-  if (cfun && cfun->decl == fn && cfun->unexpanded_var_list)\n+  if (cfun && cfun->decl == fn && cfun->local_decls)\n     {\n       ignore_topmost_bind = true;\n \n       fprintf (file, \"{\\n\");\n-      for (vars = cfun->unexpanded_var_list; vars; vars = TREE_CHAIN (vars))\n+      for (vars = cfun->local_decls; vars; vars = TREE_CHAIN (vars))\n \t{\n \t  var = TREE_VALUE (vars);\n "}, {"sha": "665819961c6a8bec5cd6f9b1cc67ea3e312b0481", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -442,14 +442,14 @@ remap_decls (tree decls, copy_body_data *id)\n     {\n       tree new_var;\n \n-      /* We can not chain the local static declarations into the unexpanded_var_list\n+      /* We can not chain the local static declarations into the local_decls\n          as we can't duplicate them or break one decl rule.  Go ahead and link\n-         them into unexpanded_var_list.  */\n+         them into local_decls.  */\n       if (!auto_var_in_fn_p (old_var, id->src_fn)\n \t  && !DECL_EXTERNAL (old_var))\n \t{\n-\t  cfun->unexpanded_var_list = tree_cons (NULL_TREE, old_var,\n-\t\t\t\t\t\t cfun->unexpanded_var_list);\n+\t  cfun->local_decls = tree_cons (NULL_TREE, old_var,\n+\t\t\t\t\t\t cfun->local_decls);\n \t  continue;\n \t}\n \n@@ -1277,7 +1277,7 @@ initialize_cfun (tree new_fndecl, tree callee_fndecl, gcov_type count,\n   *new_cfun = *DECL_STRUCT_FUNCTION (callee_fndecl);\n   new_cfun->funcdef_no = get_next_funcdef_no ();\n   VALUE_HISTOGRAMS (new_cfun) = NULL;\n-  new_cfun->unexpanded_var_list = NULL;\n+  new_cfun->local_decls = NULL;\n   new_cfun->cfg = NULL;\n   new_cfun->decl = new_fndecl /*= copy_node (callee_fndecl)*/;\n   DECL_STRUCT_FUNCTION (new_fndecl) = new_cfun;\n@@ -1811,9 +1811,9 @@ declare_return_variable (copy_body_data *id, tree return_slot, tree modify_dest,\n     }\n \n   DECL_SEEN_IN_BIND_EXPR_P (var) = 1;\n-  DECL_STRUCT_FUNCTION (caller)->unexpanded_var_list\n+  DECL_STRUCT_FUNCTION (caller)->local_decls\n     = tree_cons (NULL_TREE, var,\n-\t\t DECL_STRUCT_FUNCTION (caller)->unexpanded_var_list);\n+\t\t DECL_STRUCT_FUNCTION (caller)->local_decls);\n \n   /* Do not have the rest of GCC warn about this variable as it should\n      not be visible to the user.  */\n@@ -2040,7 +2040,7 @@ inline_forbidden_p (tree fndecl)\n \t  goto egress;\n       }\n \n-  for (step = fun->unexpanded_var_list; step; step = TREE_CHAIN (step))\n+  for (step = fun->local_decls; step; step = TREE_CHAIN (step))\n     {\n       tree decl = TREE_VALUE (step);\n       if (TREE_CODE (decl) == VAR_DECL\n@@ -2831,16 +2831,16 @@ expand_call_inline (basic_block bb, tree stmt, tree *tp, void *data)\n   copy_body (id, bb->count, bb->frequency, bb, return_block);\n \n   /* Add local vars in this inlined callee to caller.  */\n-  t_step = id->src_cfun->unexpanded_var_list;\n+  t_step = id->src_cfun->local_decls;\n   for (; t_step; t_step = TREE_CHAIN (t_step))\n     {\n       var = TREE_VALUE (t_step);\n       if (TREE_STATIC (var) && !TREE_ASM_WRITTEN (var))\n-\tcfun->unexpanded_var_list = tree_cons (NULL_TREE, var,\n-\t\t\t\t\t       cfun->unexpanded_var_list);\n+\tcfun->local_decls = tree_cons (NULL_TREE, var,\n+\t\t\t\t\t       cfun->local_decls);\n       else\n-\tcfun->unexpanded_var_list = tree_cons (NULL_TREE, remap_decl (var, id),\n-\t\t\t\t\t       cfun->unexpanded_var_list);\n+\tcfun->local_decls = tree_cons (NULL_TREE, remap_decl (var, id),\n+\t\t\t\t\t       cfun->local_decls);\n     }\n \n   /* Clean up.  */\n@@ -3340,9 +3340,7 @@ declare_inline_vars (tree block, tree vars)\n     {\n       DECL_SEEN_IN_BIND_EXPR_P (t) = 1;\n       gcc_assert (!TREE_STATIC (t) && !TREE_ASM_WRITTEN (t));\n-      cfun->unexpanded_var_list =\n-\ttree_cons (NULL_TREE, t,\n-\t\t   cfun->unexpanded_var_list);\n+      cfun->local_decls = tree_cons (NULL_TREE, t, cfun->local_decls);\n     }\n \n   if (block)\n@@ -3615,19 +3613,18 @@ tree_function_versioning (tree old_decl, tree new_decl, varray_type tree_map,\n   /* Renumber the lexical scoping (non-code) blocks consecutively.  */\n   number_blocks (id.dst_fn);\n   \n-  if (DECL_STRUCT_FUNCTION (old_decl)->unexpanded_var_list != NULL_TREE)\n+  if (DECL_STRUCT_FUNCTION (old_decl)->local_decls != NULL_TREE)\n     /* Add local vars.  */\n-    for (t_step = DECL_STRUCT_FUNCTION (old_decl)->unexpanded_var_list;\n+    for (t_step = DECL_STRUCT_FUNCTION (old_decl)->local_decls;\n \t t_step; t_step = TREE_CHAIN (t_step))\n       {\n \ttree var = TREE_VALUE (t_step);\n \tif (TREE_STATIC (var) && !TREE_ASM_WRITTEN (var))\n-\t  cfun->unexpanded_var_list = tree_cons (NULL_TREE, var,\n-\t\t\t\t\t\t cfun->unexpanded_var_list);\n+\t  cfun->local_decls = tree_cons (NULL_TREE, var, cfun->local_decls);\n \telse\n-\t  cfun->unexpanded_var_list =\n+\t  cfun->local_decls =\n \t    tree_cons (NULL_TREE, remap_decl (var, &id),\n-\t\t       cfun->unexpanded_var_list);\n+\t\t       cfun->local_decls);\n       }\n   \n   /* Copy the Function's body.  */"}, {"sha": "638c64ee1b297d4d78eb66079d0883aedd7de6f1", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -229,8 +229,8 @@ struct dump_file_info\n #define TODO_update_ssa_only_virtuals\t(1 << 14)\n \n /* Some passes leave unused local variables that can be removed from\n-   cfun->unexpanded_var_list.  This reduces the size of dump files and\n-   the memory footprint for VAR_DECLs.  */\n+   cfun->local_decls.  This reduces the size of dump files\n+   and the memory footprint for VAR_DECLs.  */\n #define TODO_remove_unused_locals\t(1 << 15)\n \n /* Internally used for the first in a sequence of passes.  It is set"}, {"sha": "ae4b909a5e3089abf01649b47954c7397c3d7c0e", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -616,8 +616,8 @@ remove_unused_locals (void)\n         }\n     }\n \n-  /* Remove unmarked local vars from unexpanded_var_list.  */\n-  for (cell = &cfun->unexpanded_var_list; *cell; )\n+  /* Remove unmarked local vars from local_decls.  */\n+  for (cell = &cfun->local_decls; *cell; )\n     {\n       tree var = TREE_VALUE (*cell);\n \n@@ -640,10 +640,10 @@ remove_unused_locals (void)\n       cell = &TREE_CHAIN (*cell);\n     }\n \n-  /* Remove unmarked global vars from unexpanded_var_list.  */\n+  /* Remove unmarked global vars from local_decls.  */\n   if (global_unused_vars != NULL)\n     {\n-      for (t = cfun->unexpanded_var_list; t; t = TREE_CHAIN (t))\n+      for (t = cfun->local_decls; t; t = TREE_CHAIN (t))\n \t{\n \t  tree var = TREE_VALUE (t);\n \n@@ -654,7 +654,7 @@ remove_unused_locals (void)\n \t    mark_all_vars_used (&DECL_INITIAL (var), global_unused_vars);\n \t}\n \n-      for (cell = &cfun->unexpanded_var_list; *cell; )\n+      for (cell = &cfun->local_decls; *cell; )\n \t{\n \t  tree var = TREE_VALUE (*cell);\n "}, {"sha": "bfdf367930132088e24f8fadc373ab7acb9608aa", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb91fab00f7d609859c5648466848cc00dd83c69/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=cb91fab00f7d609859c5648466848cc00dd83c69", "patch": "@@ -3809,7 +3809,7 @@ mark_constant_pool (void)\n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n     mark_constants (insn);\n \n-  for (link = current_function_epilogue_delay_list;\n+  for (link = crtl->epilogue_delay_list;\n        link;\n        link = XEXP (link, 1))\n     mark_constants (XEXP (link, 0));"}]}