{"sha": "79c12969ec3e9185fdbb90d3b1699d64b1cd0901", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzljMTI5NjllYzNlOTE4NWZkYmI5MGQzYjE2OTlkNjRiMWNkMDkwMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-07-15T14:34:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-07-15T14:45:02Z"}, "message": "openmp: Fix up loop-21.c\n\nI've missed\n+FAIL: libgomp.c/loop-21.c execution test\nduring testing of the recent patch.  The problem is that while\nfor the number of iterations computation it doesn't matter if we compute\nmin_inner_iterations as (m2 * first + n2 + (adjusted step) + m1 * first + n1) / step\nor (m2 * last + n2 + (adjusted step) + m1 * last + n1) / step provided that\nin the second case we use as factor (m1 - m2) * ostep / step rather than\n(m2 - m1) * ostep / step, for the logical to actual iterator values computation\nit does matter and in my hand written C implementations of all the cases (outer\nvs. inner loop with increasing vs. decreasing iterator) I'm using the same computation\nand it worked well for all the pseudo-random iterators testing it was doing.\n\nIt also means min_inner_iterations is misnamed, because it is not really\nminimum number of inner iterations, whether the first or last outer iteration\nresults in the smaller or larger value of this can be (sometimes) only\ndetermined at runtime.\nSo this patch also renames it to first_inner_iterations.\n\n2020-07-15  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libgomp/96198\n\t* omp-general.h (struct omp_for_data): Rename min_inner_iterations\n\tmember to first_inner_iterations, adjust comment.\n\t* omp-general.c (omp_extract_for_data): Adjust for the above change.\n\tAlways use n1first and n2first to compute it, rather than depending\n\ton single_nonrect_cond_code.  Similarly, always compute factor\n\tas (m2 - m1) * outer_step / inner_step rather than sometimes m1 - m2\n\tdepending on single_nonrect_cond_code.\n\t* omp-expand.c (expand_omp_for_init_vars): Rename min_inner_iterations\n\tto first_inner_iterations and min_inner_iterationsd to\n\tfirst_inner_iterationsd.", "tree": {"sha": "aec0feded362940cca6749ea627409f3e9fcc89f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aec0feded362940cca6749ea627409f3e9fcc89f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79c12969ec3e9185fdbb90d3b1699d64b1cd0901", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79c12969ec3e9185fdbb90d3b1699d64b1cd0901", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79c12969ec3e9185fdbb90d3b1699d64b1cd0901", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79c12969ec3e9185fdbb90d3b1699d64b1cd0901/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "765fbbf9bb398560f45987ea9858dfaaefff5ce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/765fbbf9bb398560f45987ea9858dfaaefff5ce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/765fbbf9bb398560f45987ea9858dfaaefff5ce0"}], "stats": {"total": 61, "additions": 23, "deletions": 38}, "files": [{"sha": "ee354b7ef9c60c5de52062f4450b768b50afa71b", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c12969ec3e9185fdbb90d3b1699d64b1cd0901/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c12969ec3e9185fdbb90d3b1699d64b1cd0901/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=79c12969ec3e9185fdbb90d3b1699d64b1cd0901", "patch": "@@ -2264,7 +2264,7 @@ expand_omp_for_init_vars (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t    {\n \t      tree outer_n1 = fd->adjn1 ? fd->adjn1 : fd->loops[i - 1].n1;\n \t      tree itype = TREE_TYPE (fd->loops[i].v);\n-\t      tree min_inner_iterations = fd->min_inner_iterations;\n+\t      tree first_inner_iterations = fd->first_inner_iterations;\n \t      tree factor = fd->factor;\n \t      gcond *cond_stmt\n \t\t= gimple_build_cond (NE_EXPR, factor,\n@@ -2282,21 +2282,21 @@ expand_omp_for_init_vars (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t      stopvalull\n \t\t= force_gimple_operand_gsi (gsi, stopvalull, true, NULL_TREE,\n \t\t\t\t\t    false, GSI_CONTINUE_LINKING);\n-\t      min_inner_iterations\n-\t\t= fold_convert (slltype, min_inner_iterations);\n-\t      min_inner_iterations\n-\t\t= force_gimple_operand_gsi (gsi, min_inner_iterations, true,\n+\t      first_inner_iterations\n+\t\t= fold_convert (slltype, first_inner_iterations);\n+\t      first_inner_iterations\n+\t\t= force_gimple_operand_gsi (gsi, first_inner_iterations, true,\n \t\t\t\t\t    NULL_TREE, false,\n \t\t\t\t\t    GSI_CONTINUE_LINKING);\n \t      factor = fold_convert (slltype, factor);\n \t      factor\n \t\t= force_gimple_operand_gsi (gsi, factor, true, NULL_TREE,\n \t\t\t\t\t    false, GSI_CONTINUE_LINKING);\n-\t      tree min_inner_iterationsd\n+\t      tree first_inner_iterationsd\n \t\t= fold_build1 (FLOAT_EXPR, double_type_node,\n-\t\t\t       min_inner_iterations);\n-\t      min_inner_iterationsd\n-\t\t= force_gimple_operand_gsi (gsi, min_inner_iterationsd, true,\n+\t\t\t       first_inner_iterations);\n+\t      first_inner_iterationsd\n+\t\t= force_gimple_operand_gsi (gsi, first_inner_iterationsd, true,\n \t\t\t\t\t    NULL_TREE, false,\n \t\t\t\t\t    GSI_CONTINUE_LINKING);\n \t      tree factord = fold_build1 (FLOAT_EXPR, double_type_node,\n@@ -2318,7 +2318,7 @@ expand_omp_for_init_vars (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t      t = fold_build2 (RDIV_EXPR, double_type_node, factord,\n \t\t\t       build_real (double_type_node, dconst2));\n \t      tree t3 = fold_build2 (MINUS_EXPR, double_type_node,\n-\t\t\t\t     min_inner_iterationsd, t);\n+\t\t\t\t     first_inner_iterationsd, t);\n \t      t3 = force_gimple_operand_gsi (gsi, t3, true, NULL_TREE, false,\n \t\t\t\t\t     GSI_CONTINUE_LINKING);\n \t      t = fold_build2 (MULT_EXPR, double_type_node, factord,\n@@ -2356,12 +2356,12 @@ expand_omp_for_init_vars (struct omp_for_data *fd, gimple_stmt_iterator *gsi,\n \t      t = fold_build2 (RSHIFT_EXPR, ulltype, t, integer_one_node);\n \t      t = fold_build2 (MULT_EXPR, ulltype, fd->factor, t);\n \t      tree t2 = fold_build2 (MULT_EXPR, ulltype, c,\n-\t\t\t\t     fd->min_inner_iterations);\n+\t\t\t\t     fd->first_inner_iterations);\n \t      t = fold_build2 (PLUS_EXPR, ulltype, t, t2);\n \t      expand_omp_build_assign (gsi, d, t, true);\n \t      t = fold_build2 (MULT_EXPR, ulltype, fd->factor, c);\n \t      t = fold_build2 (PLUS_EXPR, ulltype,\n-\t\t\t       t, fd->min_inner_iterations);\n+\t\t\t       t, fd->first_inner_iterations);\n \t      t2 = force_gimple_operand_gsi (gsi, t, true, NULL_TREE, false,\n \t\t\t\t\t     GSI_CONTINUE_LINKING);\n \t      cond_stmt = gimple_build_cond (GE_EXPR, stopvalull, d,"}, {"sha": "c5390382b78dc91122c67aa13e4159243a9cee09", "filename": "gcc/omp-general.c", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c12969ec3e9185fdbb90d3b1699d64b1cd0901/gcc%2Fomp-general.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c12969ec3e9185fdbb90d3b1699d64b1cd0901/gcc%2Fomp-general.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.c?ref=79c12969ec3e9185fdbb90d3b1699d64b1cd0901", "patch": "@@ -212,7 +212,7 @@ omp_extract_for_data (gomp_for *for_stmt, struct omp_for_data *fd,\n   fd->sched_modifiers = 0;\n   fd->chunk_size = NULL_TREE;\n   fd->simd_schedule = false;\n-  fd->min_inner_iterations = NULL_TREE;\n+  fd->first_inner_iterations = NULL_TREE;\n   fd->factor = NULL_TREE;\n   fd->adjn1 = NULL_TREE;\n   collapse_iter = NULL;\n@@ -726,16 +726,8 @@ omp_extract_for_data (gomp_for *for_stmt, struct omp_for_data *fd,\n \t      if (loop->m1 || loop->m2)\n \t\t{\n \t\t  gcc_assert (single_nonrect != -1);\n-\t\t  if (single_nonrect_cond_code == LT_EXPR)\n-\t\t    {\n-\t\t      n1 = n1first;\n-\t\t      n2 = n2first;\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      n1 = n1last;\n-\t\t      n2 = n2last;\n-\t\t    }\n+\t\t  n1 = n1first;\n+\t\t  n2 = n2first;\n \t\t}\n \t      t = fold_build2 (PLUS_EXPR, itype, t, fold_convert (itype, n2));\n \t      t = fold_build2 (MINUS_EXPR, itype, t, fold_convert (itype, n1));\n@@ -754,20 +746,14 @@ omp_extract_for_data (gomp_for *for_stmt, struct omp_for_data *fd,\n \t\t     or last value of the outer iterator (the one with fewer\n \t\t     iterations).\n \t\t     Compute t2 = ((m2 - m1) * ostep) / step\n-\t\t     (for single_nonrect_cond_code GT_EXPR\n-\t\t      t2 = ((m1 - m2) * ostep) / step instead)\n \t\t     and niters = outer_count * t\n \t\t\t\t  + t2 * ((outer_count - 1) * outer_count / 2)\n \t\t   */\n \t\t  tree m1 = loop->m1 ? loop->m1 : integer_zero_node;\n \t\t  tree m2 = loop->m2 ? loop->m2 : integer_zero_node;\n \t\t  m1 = fold_convert (itype, m1);\n \t\t  m2 = fold_convert (itype, m2);\n-\t\t  tree t2;\n-\t\t  if (single_nonrect_cond_code == LT_EXPR)\n-\t\t    t2 = fold_build2 (MINUS_EXPR, itype, m2, m1);\n-\t\t  else\n-\t\t    t2 = fold_build2 (MINUS_EXPR, itype, m1, m2);\n+\t\t  tree t2 = fold_build2 (MINUS_EXPR, itype, m2, m1);\n \t\t  t2 = fold_build2 (MULT_EXPR, itype, t2, ostep);\n \t\t  if (TYPE_UNSIGNED (itype) && loop->cond_code == GT_EXPR)\n \t\t    t2 = fold_build2 (TRUNC_DIV_EXPR, itype,\n@@ -776,7 +762,7 @@ omp_extract_for_data (gomp_for *for_stmt, struct omp_for_data *fd,\n \t\t  else\n \t\t    t2 = fold_build2 (TRUNC_DIV_EXPR, itype, t2, step);\n \t\t  t2 = fold_convert (llutype, t2);\n-\t\t  fd->min_inner_iterations = t;\n+\t\t  fd->first_inner_iterations = t;\n \t\t  fd->factor = t2;\n \t\t  t = fold_build2 (MULT_EXPR, llutype, t,\n \t\t\t\t   single_nonrect_count);\n@@ -834,11 +820,11 @@ omp_extract_for_data (gomp_for *for_stmt, struct omp_for_data *fd,\n       if (count)\n \t{\n \t  *collapse_count = fold_convert_loc (loc, iter_type, count);\n-\t  if (fd->min_inner_iterations && fd->factor)\n+\t  if (fd->first_inner_iterations && fd->factor)\n \t    {\n \t      t = make_tree_vec (4);\n \t      TREE_VEC_ELT (t, 0) = *collapse_count;\n-\t      TREE_VEC_ELT (t, 1) = fd->min_inner_iterations;\n+\t      TREE_VEC_ELT (t, 1) = fd->first_inner_iterations;\n \t      TREE_VEC_ELT (t, 2) = fd->factor;\n \t      TREE_VEC_ELT (t, 3) = fd->adjn1;\n \t      *collapse_count = t;\n@@ -856,7 +842,7 @@ omp_extract_for_data (gomp_for *for_stmt, struct omp_for_data *fd,\n       if (TREE_CODE (fd->loop.n2) == TREE_VEC)\n \t{\n \t  gcc_assert (fd->non_rect);\n-\t  fd->min_inner_iterations = TREE_VEC_ELT (fd->loop.n2, 1);\n+\t  fd->first_inner_iterations = TREE_VEC_ELT (fd->loop.n2, 1);\n \t  fd->factor = TREE_VEC_ELT (fd->loop.n2, 2);\n \t  fd->adjn1 = TREE_VEC_ELT (fd->loop.n2, 3);\n \t  fd->loop.n2 = TREE_VEC_ELT (fd->loop.n2, 0);"}, {"sha": "ca061d84894eee6b70f72a293ccfad68db30a642", "filename": "gcc/omp-general.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c12969ec3e9185fdbb90d3b1699d64b1cd0901/gcc%2Fomp-general.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c12969ec3e9185fdbb90d3b1699d64b1cd0901/gcc%2Fomp-general.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.h?ref=79c12969ec3e9185fdbb90d3b1699d64b1cd0901", "patch": "@@ -80,10 +80,9 @@ struct omp_for_data\n   struct omp_for_data_loop *loops;\n   /* The following are relevant only for non-rectangular loops\n      where only a single loop depends on an outer loop iterator.  */\n-  tree min_inner_iterations; /* Number of iterations of the inner\n-\t\t\t\tloop with either the first or last\n-\t\t\t\touter iterator, depending on which\n-\t\t\t\tresults in fewer iterations.  */\n+  tree first_inner_iterations; /* Number of iterations of the inner\n+\t\t\t\t  loop with the first outer iterator\n+\t\t\t\t  (or adjn1, if that is non-NULL).  */\n   tree factor; /* (m2 - m1) * outer_step / inner_step.  */\n   /* Adjusted n1 of the outer loop in such loop nests (if needed).  */\n   tree adjn1;"}]}