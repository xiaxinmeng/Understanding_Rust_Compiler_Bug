{"sha": "4baa25d3fbee279835c1e7e53ef1460d41291b28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJhYTI1ZDNmYmVlMjc5ODM1YzFlN2U1M2VmMTQ2MGQ0MTI5MWIyOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-01-16T12:21:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-01-16T12:21:32Z"}, "message": "* gcc.target/visium: New directory.\n\nFrom-SVN: r219728", "tree": {"sha": "24b97089b1cc07696e20f7c452e1298451109f5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24b97089b1cc07696e20f7c452e1298451109f5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4baa25d3fbee279835c1e7e53ef1460d41291b28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4baa25d3fbee279835c1e7e53ef1460d41291b28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4baa25d3fbee279835c1e7e53ef1460d41291b28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4baa25d3fbee279835c1e7e53ef1460d41291b28/comments", "author": null, "committer": null, "parents": [{"sha": "a3f97e0380728c06295b274f0c098b9b7c76bd8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f97e0380728c06295b274f0c098b9b7c76bd8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3f97e0380728c06295b274f0c098b9b7c76bd8d"}], "stats": {"total": 228, "additions": 228, "deletions": 0}, "files": [{"sha": "ac7c7f296b429d6830c7242e6766c075d1e550aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4baa25d3fbee279835c1e7e53ef1460d41291b28/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4baa25d3fbee279835c1e7e53ef1460d41291b28/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4baa25d3fbee279835c1e7e53ef1460d41291b28", "patch": "@@ -1,3 +1,7 @@\n+2015-01-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.target/visium: New directory.\n+\n 2015-01-16  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/61743"}, {"sha": "bf373428de8ad050eb658a68ce8ceed8293d1219", "filename": "gcc/testsuite/gcc.target/visium/bit_shift.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4baa25d3fbee279835c1e7e53ef1460d41291b28/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fbit_shift.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4baa25d3fbee279835c1e7e53ef1460d41291b28/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fbit_shift.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fbit_shift.c?ref=4baa25d3fbee279835c1e7e53ef1460d41291b28", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+int bit_shift (long int x)\n+{\n+  int i, n;\n+\n+  for (i = n = 0; x && (i < (sizeof(long) * 8)); ++i, x >>= 1)\n+    n += (int)(x & 1L);\n+  return n;\n+}\n+\n+/* { dg-final { scan-assembler-not \"cmp\" } } */"}, {"sha": "2de9208f4b02e31c15ba2922809bf00815c67053", "filename": "gcc/testsuite/gcc.target/visium/bit_test.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4baa25d3fbee279835c1e7e53ef1460d41291b28/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fbit_test.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4baa25d3fbee279835c1e7e53ef1460d41291b28/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fbit_test.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fbit_test.c?ref=4baa25d3fbee279835c1e7e53ef1460d41291b28", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void bar (void);\n+\n+void foo1 (unsigned int i)\n+{\n+  if (i & 4)\n+    bar ();\n+}\n+\n+void foo2 (unsigned int i)\n+{\n+  if (i & 0x80000000)\n+    bar ();\n+}\n+\n+void foo3 (unsigned char c)\n+{\n+  if (c & 4)\n+    bar ();\n+}\n+\n+void foo4 (unsigned char c)\n+{\n+  if (c & 0x80)\n+    bar ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"lsr.l\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cmp\" 2 } } */"}, {"sha": "a9e352241b2a3b354b334ccddfde8cf79c8d8092", "filename": "gcc/testsuite/gcc.target/visium/block_move.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4baa25d3fbee279835c1e7e53ef1460d41291b28/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fblock_move.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4baa25d3fbee279835c1e7e53ef1460d41291b28/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fblock_move.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fblock_move.c?ref=4baa25d3fbee279835c1e7e53ef1460d41291b28", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mcpu=gr6\" } */\n+\n+extern void abort (void);\n+\n+#define LEN 256\n+\n+void foo (void)\n+{\n+  int dst[LEN], src[LEN];\n+  unsigned int i;\n+\n+  __builtin_memset (src, 0, LEN * sizeof (int));\n+  __builtin_memcpy (dst, src, LEN * sizeof (int));\n+  if (__builtin_memcmp (dst, src, LEN * sizeof (int)) != 0)\n+    abort ();\n+}\n+\n+/* { dg-final { scan-assembler \"bmd\" } } */"}, {"sha": "2bc132a36c256666c352f71f449ff801365f22b4", "filename": "gcc/testsuite/gcc.target/visium/cstore_eq.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4baa25d3fbee279835c1e7e53ef1460d41291b28/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fcstore_eq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4baa25d3fbee279835c1e7e53ef1460d41291b28/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fcstore_eq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fcstore_eq.c?ref=4baa25d3fbee279835c1e7e53ef1460d41291b28", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+int foo1 (int i)\n+{\n+  return (i != 0);\n+}\n+\n+int foo2 (int i)\n+{\n+  return (i == 0);\n+}\n+\n+int foo3 (int a, int b)\n+{\n+  return a != b;\n+}\n+\n+int foo4 (int a, int b)\n+{\n+  return (a == b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"adc.l\" 2 } } */\n+/* { dg-final { scan-assembler-times \"subc.l\" 2 } } */"}, {"sha": "8849d1faba8a56c5bcf08a61687c16e9b22dd4f0", "filename": "gcc/testsuite/gcc.target/visium/cstore_fp.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4baa25d3fbee279835c1e7e53ef1460d41291b28/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fcstore_fp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4baa25d3fbee279835c1e7e53ef1460d41291b28/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fcstore_fp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fcstore_fp.c?ref=4baa25d3fbee279835c1e7e53ef1460d41291b28", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fno-trapping-math\" } */\n+\n+int foo1 (float a, float b)\n+{\n+  return (a < b);\n+}\n+\n+int foo2 (float a, float b)\n+{\n+  return (a > b);\n+}\n+\n+int foo3 (float a, float b)\n+{\n+  return !(a < b);\n+}\n+\n+int foo4 (float a, float b)\n+{\n+  return !(a > b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"adc.l\" 2 } } */\n+/* { dg-final { scan-assembler-times \"subc.l\" 2 } } */"}, {"sha": "c60f984a13abbe70d6f20877c507bca32854c49f", "filename": "gcc/testsuite/gcc.target/visium/cstore_uns.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4baa25d3fbee279835c1e7e53ef1460d41291b28/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fcstore_uns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4baa25d3fbee279835c1e7e53ef1460d41291b28/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fcstore_uns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fcstore_uns.c?ref=4baa25d3fbee279835c1e7e53ef1460d41291b28", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+int foo1 (unsigned a, unsigned b)\n+{\n+  return (a < b);\n+}\n+\n+int foo2 (unsigned a, unsigned b)\n+{\n+  return (a > b);\n+}\n+\n+int foo3 (unsigned a, unsigned b)\n+{\n+  return (a >= b);\n+}\n+\n+int foo4 (unsigned a, unsigned b)\n+{\n+  return (a <= b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"adc.l\" 2 } } */\n+/* { dg-final { scan-assembler-times \"subc.l\" 2 } } */"}, {"sha": "a53537a153753acaeeba5ae100da640211bf169a", "filename": "gcc/testsuite/gcc.target/visium/long_branch.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4baa25d3fbee279835c1e7e53ef1460d41291b28/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Flong_branch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4baa25d3fbee279835c1e7e53ef1460d41291b28/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Flong_branch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Flong_branch.c?ref=4baa25d3fbee279835c1e7e53ef1460d41291b28", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do assemble } */\n+\n+volatile int k = 0;\n+\n+#define ONE k++;\n+#define TEN ONE ONE ONE ONE ONE ONE ONE ONE ONE ONE\n+#define HUN TEN TEN TEN TEN TEN TEN TEN TEN TEN TEN\n+#define THO HUN HUN HUN HUN HUN HUN HUN HUN HUN HUN\n+#define TTH THO THO THO THO THO THO THO THO THO THO THO\n+\n+void foo (void)\n+{\n+  start:\n+  TTH\n+  __asm__ __volatile__ (\"\" : : : \"r28\");\n+  goto start;\n+}\n+\n+#ifndef __OPTIMIZE__\n+void bar (int i)\n+{\n+  if (i > 0)\n+    {\n+      TTH\n+    }\n+}\n+#endif"}, {"sha": "740e9d2cd67eeab2e525dafe4f48edd4f972c28a", "filename": "gcc/testsuite/gcc.target/visium/loop_clear.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4baa25d3fbee279835c1e7e53ef1460d41291b28/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Floop_clear.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4baa25d3fbee279835c1e7e53ef1460d41291b28/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Floop_clear.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Floop_clear.c?ref=4baa25d3fbee279835c1e7e53ef1460d41291b28", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+extern int a[];\n+\n+void loop_clear (int i)\n+{\n+  while (i > 0)\n+    a[i--] = 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"cmp\" 1 { xfail *-*-* } } } */\n+\n+/* FIXME: the redundant cmp is not eliminated because the compare-elim pass\n+   is run before the dbr pass.  It's a regression wrt the cc0 port.  */"}, {"sha": "5c179a7e26bef88865e39e2f0c81e079948a2baa", "filename": "gcc/testsuite/gcc.target/visium/visium.exp", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4baa25d3fbee279835c1e7e53ef1460d41291b28/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fvisium.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4baa25d3fbee279835c1e7e53ef1460d41291b28/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fvisium.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvisium%2Fvisium.exp?ref=4baa25d3fbee279835c1e7e53ef1460d41291b28", "patch": "@@ -0,0 +1,44 @@\n+#  Specific regression driver for Visium.\n+#  Copyright (C) 2015 Free Software Foundation, Inc.\n+#\n+#  This file is part of GCC.\n+#\n+#  GCC is free software; you can redistribute it and/or modify it\n+#  under the terms of the GNU General Public License as published by\n+#  the Free Software Foundation; either version 3, or (at your option)\n+#  any later version.\n+#\n+#  GCC is distributed in the hope that it will be useful, but\n+#  WITHOUT ANY WARRANTY; without even the implied warranty of\n+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+#  General Public License for more details.\n+#\n+#  You should have received a copy of the GNU General Public License\n+#  along with GCC; see the file COPYING3.  If not see\n+#  <http://www.gnu.org/licenses/>.  */\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't a Visium target.\n+if {![istarget visium-*-*] } then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}]}