{"sha": "04c937f581e817069fa8f8c8e724097057b08c43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRjOTM3ZjU4MWU4MTcwNjlmYThmOGM4ZTcyNDA5NzA1N2IwOGM0Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-02-16T08:47:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-02-16T08:47:24Z"}, "message": "re PR debug/52260 (ICE in clone_tree_hash, at dwarf2out.c:7424)\n\n\tPR debug/52260\n\t* dwarf2out.c (copy_decls_walk): Fill in *slot before traversing\n\tchildren with clone_tree_hash, not after it.\n\n\t* g++.dg/debug/dwarf2/pr52260.C: New test.\n\nFrom-SVN: r184303", "tree": {"sha": "f80241d2381632dfc058bee12ceb23fe8b4a85ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f80241d2381632dfc058bee12ceb23fe8b4a85ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04c937f581e817069fa8f8c8e724097057b08c43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04c937f581e817069fa8f8c8e724097057b08c43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04c937f581e817069fa8f8c8e724097057b08c43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04c937f581e817069fa8f8c8e724097057b08c43/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cebb46984746605c39eaefa3d9022b4b1a4e7c42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cebb46984746605c39eaefa3d9022b4b1a4e7c42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cebb46984746605c39eaefa3d9022b4b1a4e7c42"}], "stats": {"total": 158, "additions": 150, "deletions": 8}, "files": [{"sha": "82139fff10b107f99ccf05a3fae48e0d3ab80b5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04c937f581e817069fa8f8c8e724097057b08c43/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04c937f581e817069fa8f8c8e724097057b08c43/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04c937f581e817069fa8f8c8e724097057b08c43", "patch": "@@ -1,3 +1,9 @@\n+2012-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/52260\n+\t* dwarf2out.c (copy_decls_walk): Fill in *slot before traversing\n+\tchildren with clone_tree_hash, not after it.\n+\n 2012-02-16  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* config/darwin.h (ASM_OUTPUT_LABELREF): Add user label prefix for"}, {"sha": "5c7d8aabadc9c5096615ecfb47b28f39eb2d4e7f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04c937f581e817069fa8f8c8e724097057b08c43/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04c937f581e817069fa8f8c8e724097057b08c43/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=04c937f581e817069fa8f8c8e724097057b08c43", "patch": "@@ -7471,14 +7471,6 @@ copy_decls_walk (dw_die_ref unit, dw_die_ref die, htab_t decl_table)\n               dw_die_ref parent = unit;\n \t      dw_die_ref copy = clone_die (targ);\n \n-\t      FOR_EACH_CHILD (targ, c,\n-\t\t\t      add_child_die (copy,\n-\t\t\t\t\t     clone_tree_hash (c, decl_table)));\n-\n-              /* Make sure the cloned tree is marked as part of the\n-                 type unit.  */\n-              mark_dies (copy);\n-\n               /* Record in DECL_TABLE that TARG has been copied.\n                  Need to do this now, before the recursive call,\n                  because DECL_TABLE may be expanded and SLOT\n@@ -7488,6 +7480,14 @@ copy_decls_walk (dw_die_ref unit, dw_die_ref die, htab_t decl_table)\n               entry->copy = copy;\n               *slot = entry;\n \n+\t      FOR_EACH_CHILD (targ, c,\n+\t\t\t      add_child_die (copy,\n+\t\t\t\t\t     clone_tree_hash (c, decl_table)));\n+\n+              /* Make sure the cloned tree is marked as part of the\n+                 type unit.  */\n+              mark_dies (copy);\n+\n               /* If TARG has surrounding context, copy its ancestor tree\n                  into the new type unit.  */\n               if (targ->die_parent != NULL"}, {"sha": "ae98f1e2af955b4c62618ad77babd1595f715e8c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04c937f581e817069fa8f8c8e724097057b08c43/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04c937f581e817069fa8f8c8e724097057b08c43/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04c937f581e817069fa8f8c8e724097057b08c43", "patch": "@@ -1,5 +1,8 @@\n 2012-02-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/52260\n+\t* g++.dg/debug/dwarf2/pr52260.C: New test.\n+\n \tPR middle-end/51929\n \t* g++.dg/ipa/pr51929.C: New test.\n "}, {"sha": "9ab2589ce116191d47400759cb39a31d0ca0d3a0", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/pr52260.C", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04c937f581e817069fa8f8c8e724097057b08c43/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr52260.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04c937f581e817069fa8f8c8e724097057b08c43/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr52260.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr52260.C?ref=04c937f581e817069fa8f8c8e724097057b08c43", "patch": "@@ -0,0 +1,133 @@\n+// PR debug/52260\n+// { dg-do compile }\n+// { dg-options \"-gdwarf-4 -std=c++0x\" }\n+\n+namespace { typedef decltype (nullptr) T1; }\n+struct B {};\n+namespace A\n+{\n+  template <typename T, T __v>\n+  struct C { static constexpr T value = __v; };\n+  typedef C <bool, false> D;\n+  template <typename>\n+  struct E : D {};\n+  template <typename T>\n+  struct F : C <bool, (E <T>::value)> {};\n+  template <bool, typename T = void>\n+  struct G { typedef T t; };\n+}\n+template <typename T>\n+struct H {};\n+namespace A\n+{\n+  template <typename T>\n+  struct I : H <T> {};\n+  template <typename ...> struct J;\n+  template <typename> struct K;\n+  struct L\n+  {\n+    template <typename B2>\n+    struct M\n+    {\n+      template <typename T> static bool m2 (T) { return false; }\n+    };\n+  };\n+  template <typename, typename> struct N;\n+  template <typename T, typename B2, typename ... B4>\n+  struct N <T (B4 ...), B2> : L::M <B2> {};\n+  template <typename T, typename ... B4>\n+  struct K <T (B4 ...)> :J <,>, L\n+  {\n+    typedef T O (B4 ...);\n+    struct P {};\n+    template <typename B2> K (B2, typename G <!F <B2>::value, P>::t = P ());\n+  };\n+  template <typename T, typename ... B1>\n+  template <typename B2>\n+  K <T (B1 ...)>::K (B2 __f, typename G <!F < B2>::value, P>::t)\n+  {\n+    typedef N <O, B2> Q;\n+    Q::m2 (__f);\n+  };\n+}\n+enum R { r1 };\n+const R r2 = r1;\n+namespace A\n+{\n+  template <typename>\n+  struct S {};\n+  template <typename T, typename _Dp = S <T>>\n+  struct U {};\n+  template <typename T, R _Lp = r2>\n+  struct V { T *operator -> (); };\n+  template <typename T>\n+  struct W : V <T>\n+  {\n+    W (const W &);\n+    W (T1) {}\n+    W & operator= (W) {}\n+  };\n+  template <typename> struct Z;\n+  struct AA\n+  {\n+    struct AB\n+    {\n+      struct AC { void operator () () {} };\n+    };\n+    template <typename T> using AD = U <T, AB::AC>;\n+    struct AE\n+    {\n+      typedef AD <AB> AZ;\n+      virtual ~AE ();\n+      void o3 (K <AZ ()>, bool = false) {}\n+      template <typename, typename _Arg> struct AY;\n+      struct C1 {};\n+      template <typename T> struct AY <T, C1>\n+      {\n+\tAZ operator () () { return AZ (); }\n+        Z <T> _M_Z;\n+      };\n+      template <typename T>\n+      static AY <T, C1> _s1 (B, Z <T> *);\n+    };\n+  };\n+  template <>\n+  struct Z <void>\n+  {\n+    typedef AA::AE AF;\n+    W <AF> o4;\n+    void foo (B __p)\n+    {\n+      auto _s1 = AF::_s1 (__p, this);\n+      o4->o3 (_s1);\n+    }\n+  };\n+  template <typename T, typename _Alloc>\n+  struct AG {};\n+  template <typename T, typename D1 = A::I <T>>\n+  struct AH : AG <T, D1>\n+  {\n+    void bar (T) { baz (); }\n+    template <typename ... _Args>\n+    void baz (_Args && ...);\n+  };\n+  template <typename T, typename D1>\n+  template <typename ... _Args>\n+  void AH <T, D1>::baz (_Args && ...) {}\n+  namespace\n+  {\n+    typedef A::K <void ()> AI;\n+    struct AF\n+    {\n+      int v2;\n+      AI v1;\n+      AF (int, unsigned, AI __t) : v2 (), v1 (__t) {}\n+    };\n+    struct D3 : A::AH <AF>\n+    {\n+      typedef AF AFT;\n+      void v3 (AI __t) { bar (AFT (4, v4, __t)); }\n+      int v4;\n+    };\n+  }\n+}"}]}