{"sha": "769fae76dfd71045fe062e7b1edef0f59e50371d", "node_id": "C_kwDOANBUbNoAKDc2OWZhZTc2ZGZkNzEwNDVmZTA2MmU3YjFlZGVmMGY1OWU1MDM3MWQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-09T10:45:31Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-10T10:09:21Z"}, "message": "libstdc++: Fix some algos for 16-bit size_t [PR108221]\n\nSome standard algorithms fail to compile when size_t or ptrdiff_t is\nnarrower than int. The __lg helper function is ambiguous if ptrdiff_t is\nshort or __int20, so replace it with a function template that works for\nthose types as well as signed/unsigned int/long/long long. The helpers\nfor stable_sort perform arithmetic on size values and assume the types\nwon't change, which isn't true if the type promotes to int.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/108221\n\t* include/bits/stl_algobase.h (__lg): Replace six overloads with\n\ta single function template for all integer types.\n\t* include/bits/stl_algo.h (__merge_adaptive_resize): Cast\n\tarithmetic results back to _Distance.", "tree": {"sha": "0a4e4956a77b42b8093ec509854130f74f538bab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a4e4956a77b42b8093ec509854130f74f538bab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/769fae76dfd71045fe062e7b1edef0f59e50371d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/769fae76dfd71045fe062e7b1edef0f59e50371d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/769fae76dfd71045fe062e7b1edef0f59e50371d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/769fae76dfd71045fe062e7b1edef0f59e50371d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b39f4333d18cc58b1a655c537a78fefe95b82609", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b39f4333d18cc58b1a655c537a78fefe95b82609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b39f4333d18cc58b1a655c537a78fefe95b82609"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "eed04b3c1b848415bbe5e2d4a2157bef34261632", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/769fae76dfd71045fe062e7b1edef0f59e50371d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/769fae76dfd71045fe062e7b1edef0f59e50371d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=769fae76dfd71045fe062e7b1edef0f59e50371d", "patch": "@@ -2458,13 +2458,14 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n \n \t  _BidirectionalIterator __new_middle\n \t    = std::__rotate_adaptive(__first_cut, __middle, __second_cut,\n-\t\t\t\t     __len1 - __len11, __len22,\n+\t\t\t\t     _Distance(__len1 - __len11), __len22,\n \t\t\t\t     __buffer, __buffer_size);\n \t  std::__merge_adaptive_resize(__first, __first_cut, __new_middle,\n \t\t\t\t       __len11, __len22,\n \t\t\t\t       __buffer, __buffer_size, __comp);\n \t  std::__merge_adaptive_resize(__new_middle, __second_cut, __last,\n-\t\t\t\t       __len1 - __len11, __len2 - __len22,\n+\t\t\t\t       _Distance(__len1 - __len11),\n+\t\t\t\t       _Distance(__len2 - __len22),\n \t\t\t\t       __buffer, __buffer_size, __comp);\n \t}\n     }"}, {"sha": "566b6d9c4bc82299d7ce9b7467dedb7a81caebbb", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/769fae76dfd71045fe062e7b1edef0f59e50371d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/769fae76dfd71045fe062e7b1edef0f59e50371d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=769fae76dfd71045fe062e7b1edef0f59e50371d", "patch": "@@ -72,7 +72,10 @@\n #if __cplusplus >= 201103L\n # include <type_traits>\n #endif\n-#if __cplusplus > 201703L\n+#if __cplusplus >= 201402L\n+# include <bit> // std::__bit_width\n+#endif\n+#if __cplusplus >= 202002L\n # include <compare>\n #endif\n \n@@ -1505,29 +1508,25 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n \n   /// This is a helper function for the sort routines and for random.tcc.\n   //  Precondition: __n > 0.\n-  inline _GLIBCXX_CONSTEXPR int\n-  __lg(int __n)\n-  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }\n-\n-  inline _GLIBCXX_CONSTEXPR unsigned\n-  __lg(unsigned __n)\n-  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }\n-\n-  inline _GLIBCXX_CONSTEXPR long\n-  __lg(long __n)\n-  { return (int)sizeof(long) * __CHAR_BIT__ - 1 - __builtin_clzl(__n); }\n-\n-  inline _GLIBCXX_CONSTEXPR unsigned long\n-  __lg(unsigned long __n)\n-  { return (int)sizeof(long) * __CHAR_BIT__ - 1 - __builtin_clzl(__n); }\n-\n-  inline _GLIBCXX_CONSTEXPR long long\n-  __lg(long long __n)\n-  { return (int)sizeof(long long) * __CHAR_BIT__ - 1 - __builtin_clzll(__n); }\n-\n-  inline _GLIBCXX_CONSTEXPR unsigned long long\n-  __lg(unsigned long long __n)\n-  { return (int)sizeof(long long) * __CHAR_BIT__ - 1 - __builtin_clzll(__n); }\n+  template<typename _Tp>\n+    inline _GLIBCXX_CONSTEXPR _Tp\n+    __lg(_Tp __n)\n+    {\n+#if __cplusplus >= 201402L\n+      return std::__bit_width(make_unsigned_t<_Tp>(__n)) - 1;\n+#else\n+      // Use +__n so it promotes to at least int.\n+      const int __sz = sizeof(+__n);\n+      int __w = __sz * __CHAR_BIT__ - 1;\n+      if (__sz == sizeof(long long))\n+\t__w -= __builtin_clzll(+__n);\n+      else if (__sz == sizeof(long))\n+\t__w -= __builtin_clzl(+__n);\n+      else if (__sz == sizeof(int))\n+\t__w -= __builtin_clz(+__n);\n+      return __w;\n+#endif\n+    }\n \n _GLIBCXX_BEGIN_NAMESPACE_ALGO\n "}]}