{"sha": "6cd167e1a7f8c13bbc51393aef6c7bd6f0f50075", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNkMTY3ZTFhN2Y4YzEzYmJjNTEzOTNhZWY2YzdiZDZmMGY1MDA3NQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-04-21T21:41:32Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-04-21T21:41:32Z"}, "message": "PipedInputStream.java, [...]: Yet another new version from Classpath.\n\n\t* java/io/PipedInputStream.java, java/io/PipedOutputStream.java:\n\tYet another new version from Classpath.\n\nFrom-SVN: r33328", "tree": {"sha": "68700a10d2ec54f555f52f3d62ae77bc56a2da46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68700a10d2ec54f555f52f3d62ae77bc56a2da46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cd167e1a7f8c13bbc51393aef6c7bd6f0f50075", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd167e1a7f8c13bbc51393aef6c7bd6f0f50075", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cd167e1a7f8c13bbc51393aef6c7bd6f0f50075", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd167e1a7f8c13bbc51393aef6c7bd6f0f50075/comments", "author": null, "committer": null, "parents": [{"sha": "7f13af23a55bc12a4d2ea9ac673e89a1a39ccd48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f13af23a55bc12a4d2ea9ac673e89a1a39ccd48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f13af23a55bc12a4d2ea9ac673e89a1a39ccd48"}], "stats": {"total": 43, "additions": 16, "deletions": 27}, "files": [{"sha": "9e4d05aad10393d2870d77f1b8ac23bed924774a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd167e1a7f8c13bbc51393aef6c7bd6f0f50075/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd167e1a7f8c13bbc51393aef6c7bd6f0f50075/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6cd167e1a7f8c13bbc51393aef6c7bd6f0f50075", "patch": "@@ -1,5 +1,8 @@\n 2000-04-21  Tom Tromey  <tromey@cygnus.com>\n \n+\t* java/io/PipedInputStream.java, java/io/PipedOutputStream.java:\n+\tYet another new version from Classpath.\n+\n \tFix for PR libgcj/15:\n \t* java/util/natGregorianCalendar.cc (_REENTRANT,\n \t_POSIX_PTHREAD_SEMANTICS): Don't define."}, {"sha": "e25f163f60451aed7ae4e802f9543fa43cb16cba", "filename": "libjava/java/io/PipedInputStream.java", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd167e1a7f8c13bbc51393aef6c7bd6f0f50075/libjava%2Fjava%2Fio%2FPipedInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd167e1a7f8c13bbc51393aef6c7bd6f0f50075/libjava%2Fjava%2Fio%2FPipedInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPipedInputStream.java?ref=6cd167e1a7f8c13bbc51393aef6c7bd6f0f50075", "patch": "@@ -398,30 +398,19 @@ else if (in > out)\n   * If there is no data ready to be written, or if the internal circular\n   * buffer is full, this method blocks.\n   *\n-  * *****What is this method really supposed to do *********\n+  * @param byte_received The byte to write to this stream\n+  *\n+  * @exception IOException if error occurs\n+  *\n   */\n protected synchronized void\n receive(int byte_received) throws IOException\n {\n-  int orig_in = in;\n-\n-  for (;;)\n-    {\n-      // Wait for something to happen\n-      try\n-        {\n-          wait();\n-        }\n-      catch(InterruptedException e) { ; }\n-\n-      // See if we woke up because the stream was closed on us\n-      if (closed)\n-        throw new IOException(\"Stream closed before receiving byte\");\n-\n-      // See if a byte of data was received\n-      if (in != orig_in)\n-        return;\n-    }\n+  // This is really slow, but it has the benefit of not duplicating\n+  // the complicated machinery in receive(byte[],int,int).\n+  byte[] buf = new byte[1];\n+  buf[0] = (byte) (byte_received & 0xff);\n+  receive (buf, 0, 1);\n }\n \n /*************************************************************************/\n@@ -439,7 +428,7 @@ else if (in > out)\n   * @exception IOException If an error occurs\n   */\n synchronized void\n-write(byte[] buf, int offset, int len) throws IOException\n+receive(byte[] buf, int offset, int len) throws IOException\n {\n   if (len <= 0)\n     return;"}, {"sha": "b12d1e5f55e5283e682b789abfb21a774fb44c8b", "filename": "libjava/java/io/PipedOutputStream.java", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd167e1a7f8c13bbc51393aef6c7bd6f0f50075/libjava%2Fjava%2Fio%2FPipedOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd167e1a7f8c13bbc51393aef6c7bd6f0f50075/libjava%2Fjava%2Fio%2FPipedOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPipedOutputStream.java?ref=6cd167e1a7f8c13bbc51393aef6c7bd6f0f50075", "patch": "@@ -1,5 +1,5 @@\n /* PipedOutputStream.java -- Write portion of piped streams.\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -164,10 +164,7 @@ public class PipedOutputStream extends OutputStream\n public synchronized void\n write(int b) throws IOException\n {\n-  byte[] buf = new byte[1];\n-  buf[0] = (byte)(b & 0xFF);\n-\n-  snk.write(buf, 0, buf.length);\n+  snk.receive (b);\n }\n \n /*************************************************************************/\n@@ -188,7 +185,7 @@ public class PipedOutputStream extends OutputStream\n public void\n write(byte[] buf, int offset, int len) throws IOException\n {\n-  snk.write(buf, 0, len);\n+  snk.receive (buf, 0, len);\n }\n \n /*************************************************************************/"}]}