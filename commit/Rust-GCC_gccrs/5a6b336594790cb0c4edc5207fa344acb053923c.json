{"sha": "5a6b336594790cb0c4edc5207fa344acb053923c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE2YjMzNjU5NDc5MGNiMGM0ZWRjNTIwN2ZhMzQ0YWNiMDUzOTIzYw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1997-11-13T00:09:37Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1997-11-13T00:09:37Z"}, "message": "fold-const.c (fold_truthop): When changing a one-bit comparison against zero into a comparison against mask...\n\n\t* fold-const.c (fold_truthop): When changing a one-bit comparison\n\tagainst zero into a comparison against mask, do a proper sign\n\textension.\n\nFrom-SVN: r16448", "tree": {"sha": "daaa297a19a53f9e6130ab58d138f37b3ab4732d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/daaa297a19a53f9e6130ab58d138f37b3ab4732d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a6b336594790cb0c4edc5207fa344acb053923c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6b336594790cb0c4edc5207fa344acb053923c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a6b336594790cb0c4edc5207fa344acb053923c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6b336594790cb0c4edc5207fa344acb053923c/comments", "author": null, "committer": null, "parents": [{"sha": "2bd3bc6f5c634b1949a06ff4dfca331b990b10f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd3bc6f5c634b1949a06ff4dfca331b990b10f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bd3bc6f5c634b1949a06ff4dfca331b990b10f4"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "af1f8f2bb40b2459cd06c0ae4959dd5462f15993", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6b336594790cb0c4edc5207fa344acb053923c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6b336594790cb0c4edc5207fa344acb053923c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a6b336594790cb0c4edc5207fa344acb053923c", "patch": "@@ -1,3 +1,9 @@\n+Thu Nov 13 00:06:58 1997  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* fold-const.c (fold_truthop): When changing a one-bit comparison\n+\tagainst zero into a comparison against mask, do a proper sign\n+\textension.\n+\n Wed Nov 12 09:37:01 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* except.c: Do not include \"assert.h\"."}, {"sha": "9b342528f8acd21b885adf2778d8707250e6c3b9", "filename": "gcc/fold-const.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6b336594790cb0c4edc5207fa344acb053923c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6b336594790cb0c4edc5207fa344acb053923c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=5a6b336594790cb0c4edc5207fa344acb053923c", "patch": "@@ -3424,15 +3424,32 @@ fold_truthop (code, truth_type, lhs, rhs)\n   if (lcode != wanted_code)\n     {\n       if (l_const && integer_zerop (l_const) && integer_pow2p (ll_mask))\n-\tl_const = ll_mask;\n+\t{\n+\t  if (ll_unsignedp)\n+\t    l_const = ll_mask;\n+\telse\n+\t  /* Since ll_arg is a single bit bit mask, we can sign extend\n+\t     it appropriately with a NEGATE_EXPR.\n+\t     l_const is made a signed value here, but since for l_const != NULL\n+\t     lr_unsignedp is not used, we don't need to clear the latter.  */\n+\t  l_const = fold (build1 (NEGATE_EXPR, TREE_TYPE (ll_arg),\n+\t\t\t\t  convert (TREE_TYPE (ll_arg), ll_mask)));\n+\t}\n       else\n \treturn 0;\n     }\n \n   if (rcode != wanted_code)\n     {\n       if (r_const && integer_zerop (r_const) && integer_pow2p (rl_mask))\n-\tr_const = rl_mask;\n+\t{\n+\t  if (rl_unsignedp)\n+\t    r_const = rl_mask;\n+\telse\n+\t  /* This is analogous to the code for l_const above.  */\n+\t  r_const = fold (build1 (NEGATE_EXPR, TREE_TYPE (rl_arg),\n+\t\t\t\t  convert (TREE_TYPE (rl_arg), rl_mask)));\n+\t}\n       else\n \treturn 0;\n     }"}]}