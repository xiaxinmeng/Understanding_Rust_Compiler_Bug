{"sha": "1764d63bd98c6c08e993f5c39dfa0247985b1642", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc2NGQ2M2JkOThjNmMwOGU5OTNmNWMzOWRmYTAyNDc5ODViMTY0Mg==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2019-10-02T15:37:12Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2019-10-02T15:37:12Z"}, "message": "ifcvt: improve cost estimation (PR 87047)\n\n\tPR rtl-optimization/87047\n\t* ifcvt.c (average_cost): New static function.  Use it...\n\t(noce_process_if_block): ... here.\n\ntestsuite/\n\t* gcc.dg/pr87047.c: New test.\n\nFrom-SVN: r276466", "tree": {"sha": "8afecb03e7053f721f894c1ca4ab7fa0bc95928e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8afecb03e7053f721f894c1ca4ab7fa0bc95928e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1764d63bd98c6c08e993f5c39dfa0247985b1642", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1764d63bd98c6c08e993f5c39dfa0247985b1642", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1764d63bd98c6c08e993f5c39dfa0247985b1642", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1764d63bd98c6c08e993f5c39dfa0247985b1642/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a264ea9a5bbbbf78ea8c53b675584d1f218e20db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a264ea9a5bbbbf78ea8c53b675584d1f218e20db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a264ea9a5bbbbf78ea8c53b675584d1f218e20db"}], "stats": {"total": 51, "additions": 45, "deletions": 6}, "files": [{"sha": "4f7edd28ecc637d8b77826e267b34f65dcbc6886", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1764d63bd98c6c08e993f5c39dfa0247985b1642/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1764d63bd98c6c08e993f5c39dfa0247985b1642/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1764d63bd98c6c08e993f5c39dfa0247985b1642", "patch": "@@ -1,3 +1,9 @@\n+2019-10-02  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/87047\n+\t* ifcvt.c (average_cost): New static function.  Use it...\n+\t(noce_process_if_block): ... here.\n+\n 2019-10-02  Aaron Sawdey <acsawdey@linux.ibm.com>\n \n \t* config/rs6000/rs6000-protos.h (expand_block_move): Change prototype."}, {"sha": "8bc6f53cb38d8ffa41eddf0fb2564e69352d661f", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1764d63bd98c6c08e993f5c39dfa0247985b1642/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1764d63bd98c6c08e993f5c39dfa0247985b1642/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=1764d63bd98c6c08e993f5c39dfa0247985b1642", "patch": "@@ -3358,6 +3358,16 @@ bb_ok_for_noce_convert_multiple_sets (basic_block test_bb)\n   return count > 1 && count <= param;\n }\n \n+/* Compute average of two given costs weighted by relative probabilities\n+   of respective basic blocks in an IF-THEN-ELSE.  E is the IF-THEN edge.\n+   With P as the probability to take the IF-THEN branch, return\n+   P * THEN_COST + (1 - P) * ELSE_COST.  */\n+static unsigned\n+average_cost (unsigned then_cost, unsigned else_cost, edge e)\n+{\n+  return else_cost + e->probability.apply ((signed) (then_cost - else_cost));\n+}\n+\n /* Given a simple IF-THEN-JOIN or IF-THEN-ELSE-JOIN block, attempt to convert\n    it without using conditional execution.  Return TRUE if we were successful\n    at converting the block.  */\n@@ -3413,10 +3423,9 @@ noce_process_if_block (struct noce_if_info *if_info)\n \t\t\t\t       &if_info->else_simple))\n     return false;\n \n-  if (else_bb == NULL)\n-    if_info->original_cost += then_cost;\n-  else if (speed_p)\n-    if_info->original_cost += MIN (then_cost, else_cost);\n+  if (speed_p)\n+    if_info->original_cost += average_cost (then_cost, else_cost,\n+\t\t\t\t\t    find_edge (test_bb, then_bb));\n   else\n     if_info->original_cost += then_cost + else_cost;\n "}, {"sha": "40ad744bfc2cb48b5a49d6224f86e7d9cd8b5153", "filename": "gcc/ifcvt.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1764d63bd98c6c08e993f5c39dfa0247985b1642/gcc%2Fifcvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1764d63bd98c6c08e993f5c39dfa0247985b1642/gcc%2Fifcvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.h?ref=1764d63bd98c6c08e993f5c39dfa0247985b1642", "patch": "@@ -97,8 +97,8 @@ struct noce_if_info\n \n   /* An estimate of the original costs.  When optimizing for size, this is the\n      combined cost of COND, JUMP and the costs for THEN_BB and ELSE_BB.\n-     When optimizing for speed, we use the costs of COND plus the minimum of\n-     the costs for THEN_BB and ELSE_BB, as computed in the next field.  */\n+     When optimizing for speed, we use the costs of COND plus weighted average\n+     of the costs for THEN_BB and ELSE_BB, as computed in the next field.  */\n   unsigned int original_cost;\n \n   /* Maximum permissible cost for the unconditional sequence we should"}, {"sha": "d6cd8ca2876a80fed6651ea2eeda72a50d9d9a85", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1764d63bd98c6c08e993f5c39dfa0247985b1642/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1764d63bd98c6c08e993f5c39dfa0247985b1642/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1764d63bd98c6c08e993f5c39dfa0247985b1642", "patch": "@@ -1,3 +1,8 @@\n+2019-10-02  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR rtl-optimization/87047\n+\t* gcc.dg/pr87047.c: New test.\n+\n 2019-10-02  Martin Jambor  <mjambor@suse.cz>\n \n \tPR testsuite/91842"}, {"sha": "cb26ea4deab5fc0c08bb4ca1837edbb83dcc1dfe", "filename": "gcc/testsuite/gcc.dg/pr87047.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1764d63bd98c6c08e993f5c39dfa0247985b1642/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87047.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1764d63bd98c6c08e993f5c39dfa0247985b1642/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87047.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87047.c?ref=1764d63bd98c6c08e993f5c39dfa0247985b1642", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && { ! ia32 } } } } */\n+/* { dg-options \"-fdump-rtl-ce1 -O2\" } */\n+\n+typedef unsigned long long uint64_t;\n+\n+static uint64_t umulh(uint64_t a, uint64_t b)\n+{\n+  return (unsigned __int128)a*b >> 64;\n+}\n+\n+uint64_t f(uint64_t a, uint64_t b, int c)\n+{\n+  if (c)\n+    a = umulh(a, (b-umulh(a,b))<<44) << 1;\n+  return a;\n+}\n+\n+/* { dg-final { scan-rtl-dump \"0 true changes made\" \"ce1\" } } */\n+/* { dg-final { scan-assembler-not \"cmov\" } } */"}]}