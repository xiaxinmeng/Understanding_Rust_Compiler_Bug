{"sha": "968b41a1662526b8b3eb5861f7fb369450ff9644", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY4YjQxYTE2NjI1MjZiOGIzZWI1ODYxZjdmYjM2OTQ1MGZmOTY0NA==", "commit": {"author": {"name": "Matt Austern", "email": "austern@apple.com", "date": "2003-11-06T22:08:26Z"}, "committer": {"name": "Matt Austern", "email": "austern@gcc.gnu.org", "date": "2003-11-06T22:08:26Z"}, "message": "c-common.c (handle_visibility_attribute): Set DECL_VISIBILITY field instead of hanging an attribute object off the decl.\n\n\t* c-common.c (handle_visibility_attribute): Set DECL_VISIBILITY\n\tfield instead of hanging an attribute object off the decl.\n\t* tree.h (DECL_VISIBLITY): New accessor macro for\n\tsymbol_visibility field in struct tree_decl.\n\t(enum symbol_visibility): Move definition to before tree_decl.\n\t(struct tree_decl): Define new two-bit field, symbol_visibility.\n\t(decl_visibility): Remove declaration.\n\t* varasm.c (maybe_assemble_visibility): Use DECL_VISIBILITY\n\tinstead of decl_visibility.\n\t(default_binds_local_p_1):  Use DECL_VISIBILITY\tinstead of\n\tdecl_visibility.\n\t(decl_visibility): Remove.\n\t* cp/decl.c (duplicate_decls): copy DECL_VISIBILITY field.\n\t* cp/method.c (use_thunk): give thunk same visibility as function.\n\t* cp/optimize.c (maybe_clone_body): copy DECL_VISIBILITY field.\n\nFrom-SVN: r73320", "tree": {"sha": "c4ffb9b377ba06be592c6688dd70529152203fd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4ffb9b377ba06be592c6688dd70529152203fd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/968b41a1662526b8b3eb5861f7fb369450ff9644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/968b41a1662526b8b3eb5861f7fb369450ff9644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/968b41a1662526b8b3eb5861f7fb369450ff9644", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/968b41a1662526b8b3eb5861f7fb369450ff9644/comments", "author": null, "committer": null, "parents": [{"sha": "63e292b7ec0ae980f7ffa763448c81a923a72321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63e292b7ec0ae980f7ffa763448c81a923a72321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63e292b7ec0ae980f7ffa763448c81a923a72321"}], "stats": {"total": 119, "additions": 61, "deletions": 58}, "files": [{"sha": "f9c4da7350d17c0b6983aa2ec155fa06a7ba1a49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968b41a1662526b8b3eb5861f7fb369450ff9644/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968b41a1662526b8b3eb5861f7fb369450ff9644/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=968b41a1662526b8b3eb5861f7fb369450ff9644", "patch": "@@ -1,3 +1,18 @@\n+2003-11-06  Matt Austern <austern@apple.com>\n+\n+\t* c-common.c (handle_visibility_attribute): Set DECL_VISIBILITY\n+\tfield instead of hanging an attribute object off the decl.\n+\t* tree.h (DECL_VISIBLITY): New accessor macro for\n+\tsymbol_visibility field in struct tree_decl.\n+\t(enum symbol_visibility): Move definition to before tree_decl.\n+\t(struct tree_decl): Define new two-bit field, symbol_visibility.\n+\t(decl_visibility): Remove declaration.\n+\t* varasm.c (maybe_assemble_visibility): Use DECL_VISIBILITY\n+\tinstead of decl_visibility.\n+\t(default_binds_local_p_1):  Use DECL_VISIBILITY\tinstead of \n+\tdecl_visibility.\n+\t(decl_visibility): Remove.\n+\t\n 2003-11-06  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.c (s390_emit_epilogue): Recognize more cases"}, {"sha": "f587fb2df63186771b72c41a103c88a638bebccc", "filename": "gcc/c-common.c", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968b41a1662526b8b3eb5861f7fb369450ff9644/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968b41a1662526b8b3eb5861f7fb369450ff9644/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=968b41a1662526b8b3eb5861f7fb369450ff9644", "patch": "@@ -4929,34 +4929,33 @@ handle_visibility_attribute (tree *node, tree name, tree args,\n \t\t\t     bool *no_add_attrs)\n {\n   tree decl = *node;\n+  tree id = TREE_VALUE (args);\n+\n+  *no_add_attrs = true;\n \n   if (decl_function_context (decl) != 0 || ! TREE_PUBLIC (decl))\n     {\n       warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n-      *no_add_attrs = true;\n+      return NULL_TREE;\n     }\n-  else\n-    {\n-      tree id;\n \n-      id = TREE_VALUE (args);\n-      if (TREE_CODE (id) != STRING_CST)\n-\t{\n-\t  error (\"visibility arg not a string\");\n-\t  *no_add_attrs = true;\n-\t  return NULL_TREE;\n-\t}\n-      if (strcmp (TREE_STRING_POINTER (id), \"hidden\")\n-\t  && strcmp (TREE_STRING_POINTER (id), \"protected\")\n-\t  && strcmp (TREE_STRING_POINTER (id), \"internal\")\n-\t  && strcmp (TREE_STRING_POINTER (id), \"default\"))\n-\t{\n-\t  error (\"visibility arg must be one of \\\"default\\\", \\\"hidden\\\", \\\"protected\\\" or \\\"internal\\\"\");\n-\t  *no_add_attrs = true;\n-\t  return NULL_TREE;\n-\t}\n+  if (TREE_CODE (id) != STRING_CST)\n+    {\n+      error (\"visibility arg not a string\");\n+      return NULL_TREE;\n     }\n \n+  if (strcmp (TREE_STRING_POINTER (id), \"default\") == 0)\n+    DECL_VISIBILITY (decl) = VISIBILITY_DEFAULT;\n+  else if (strcmp (TREE_STRING_POINTER (id), \"internal\") == 0)\n+    DECL_VISIBILITY (decl) = VISIBILITY_INTERNAL;\n+  else if (strcmp (TREE_STRING_POINTER (id), \"hidden\") == 0)\n+    DECL_VISIBILITY (decl) = VISIBILITY_HIDDEN;  \n+  else if (strcmp (TREE_STRING_POINTER (id), \"protected\") == 0)\n+    DECL_VISIBILITY (decl) = VISIBILITY_PROTECTED;\n+  else\n+    error (\"visibility arg must be one of \\\"default\\\", \\\"hidden\\\", \\\"protected\\\" or \\\"internal\\\"\");\n+\n   return NULL_TREE;\n }\n "}, {"sha": "7f83578b137a3a3b9e9c526b05ab48c24e4f74a1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968b41a1662526b8b3eb5861f7fb369450ff9644/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968b41a1662526b8b3eb5861f7fb369450ff9644/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=968b41a1662526b8b3eb5861f7fb369450ff9644", "patch": "@@ -1,3 +1,9 @@\n+2003-11-06  Matt Austern  <austern@apple.com>\n+\n+\t* decl.c (duplicate_decls): copy DECL_VISIBILITY field.\n+\t* method.c (use_thunk): give thunk same visibility as function.\n+\t* optimize.c (maybe_clone_body): copy DECL_VISIBILITY field.\n+\t\n 2003-11-05  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/11616"}, {"sha": "0f7a8bcf62b4296324cce33a02cc8114090bb5e3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968b41a1662526b8b3eb5861f7fb369450ff9644/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968b41a1662526b8b3eb5861f7fb369450ff9644/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=968b41a1662526b8b3eb5861f7fb369450ff9644", "patch": "@@ -1850,6 +1850,7 @@ duplicate_decls (tree newdecl, tree olddecl)\n   TREE_ADDRESSABLE (newdecl) = TREE_ADDRESSABLE (olddecl);\n   TREE_ASM_WRITTEN (newdecl) = TREE_ASM_WRITTEN (olddecl);\n   DECL_COMMON (newdecl) = DECL_COMMON (olddecl);\n+  DECL_VISIBILITY (newdecl) = DECL_VISIBILITY (olddecl);\n   COPY_DECL_ASSEMBLER_NAME (olddecl, newdecl);\n \n   if (TREE_CODE (newdecl) == FUNCTION_DECL)"}, {"sha": "61aebd4bbd4ed17df2e3601335cf56604487fc4b", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968b41a1662526b8b3eb5861f7fb369450ff9644/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968b41a1662526b8b3eb5861f7fb369450ff9644/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=968b41a1662526b8b3eb5861f7fb369450ff9644", "patch": "@@ -383,6 +383,7 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n   /* The linkage of the function may have changed.  FIXME in linkage\n      rewrite.  */\n   TREE_PUBLIC (thunk_fndecl) = TREE_PUBLIC (function);\n+  DECL_VISIBILITY (thunk_fndecl) = DECL_VISIBILITY (function);\n \n   if (flag_syntax_only)\n     {"}, {"sha": "7dc57ce31a3ef1748ec3ed1af784eecde210f47c", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968b41a1662526b8b3eb5861f7fb369450ff9644/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968b41a1662526b8b3eb5861f7fb369450ff9644/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=968b41a1662526b8b3eb5861f7fb369450ff9644", "patch": "@@ -158,6 +158,7 @@ maybe_clone_body (tree fn)\n       DECL_INTERFACE_KNOWN (clone) = DECL_INTERFACE_KNOWN (fn);\n       DECL_NOT_REALLY_EXTERN (clone) = DECL_NOT_REALLY_EXTERN (fn);\n       TREE_PUBLIC (clone) = TREE_PUBLIC (fn);\n+      DECL_VISIBILITY (clone) = DECL_VISIBILITY (fn);\n \n       /* Adjust the parameter names and locations.  */\n       parm = DECL_ARGUMENTS (fn);"}, {"sha": "03b85dfc501c44090a09e81353c71c9a26ac104c", "filename": "gcc/tree.h", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968b41a1662526b8b3eb5861f7fb369450ff9644/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968b41a1662526b8b3eb5861f7fb369450ff9644/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=968b41a1662526b8b3eb5861f7fb369450ff9644", "patch": "@@ -1491,6 +1491,9 @@ struct tree_type GTY(())\n #define DECL_DECLARED_INLINE_P(NODE) \\\n   (FUNCTION_DECL_CHECK (NODE)->decl.declared_inline_flag)\n \n+/* Value of the decls's visibility attribute */\n+#define DECL_VISIBILITY(NODE) (DECL_CHECK (NODE)->decl.visibility)\n+\n /* In a FUNCTION_DECL, nonzero if the function cannot be inlined.  */\n #define DECL_UNINLINABLE(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.uninlinable)\n \n@@ -1631,6 +1634,16 @@ struct tree_type GTY(())\n   (! DECL_CONTEXT (EXP)\t\t\t\t\t\t\\\n    || TREE_CODE (DECL_CONTEXT (EXP)) == TRANSLATION_UNIT_DECL)\n \n+/* Enumerate visibility settings.  */\n+\n+enum symbol_visibility\n+{\n+  VISIBILITY_DEFAULT,\n+  VISIBILITY_INTERNAL,\n+  VISIBILITY_HIDDEN,\n+  VISIBILITY_PROTECTED\n+};\n+\n struct function;\n \n struct tree_decl GTY(())\n@@ -1672,8 +1685,9 @@ struct tree_decl GTY(())\n   unsigned uninlinable : 1;\n   unsigned thread_local_flag : 1;\n   unsigned declared_inline_flag : 1;\n-  unsigned unused : 3;\n-  /* three unused bits.  */\n+  ENUM_BITFIELD(symbol_visibility) visibility : 2;\n+  unsigned unused : 1;\n+  /* one unused bit.  */\n \n   unsigned lang_flag_0 : 1;\n   unsigned lang_flag_1 : 1;\n@@ -2007,15 +2021,6 @@ enum tls_model {\n \n extern enum tls_model flag_tls_default;\n \n-/* Enumerate visibility settings.  */\n-\n-enum symbol_visibility\n-{\n-  VISIBILITY_DEFAULT,\n-  VISIBILITY_INTERNAL,\n-  VISIBILITY_HIDDEN,\n-  VISIBILITY_PROTECTED\n-};\n \f\n /* A pointer-to-function member type looks like:\n \n@@ -2969,7 +2974,6 @@ extern void make_decl_one_only (tree);\n extern int supports_one_only (void);\n extern void variable_section (tree, int);\n enum tls_model decl_tls_model (tree);\n-enum symbol_visibility decl_visibility (tree);\n extern void resolve_unique_section (tree, int, int);\n extern void mark_referenced (tree);\n extern void notice_global_symbol (tree);"}, {"sha": "9ee145db3870e0c0c14c4a81030d46c6e5a92d11", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968b41a1662526b8b3eb5861f7fb369450ff9644/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968b41a1662526b8b3eb5861f7fb369450ff9644/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=968b41a1662526b8b3eb5861f7fb369450ff9644", "patch": "@@ -4430,7 +4430,7 @@ default_assemble_visibility (tree decl, int vis)\n static void\n maybe_assemble_visibility (tree decl)\n {\n-  enum symbol_visibility vis = decl_visibility (decl);\n+  enum symbol_visibility vis = DECL_VISIBILITY (decl);\n \n   if (vis != VISIBILITY_DEFAULT)\n     (* targetm.asm_out.visibility) (decl, vis);\n@@ -4532,30 +4532,6 @@ decl_tls_model (tree decl)\n   return kind;\n }\n \n-enum symbol_visibility\n-decl_visibility (tree decl)\n-{\n-  tree attr = lookup_attribute (\"visibility\", DECL_ATTRIBUTES (decl));\n-\n-  if (attr)\n-    {\n-      const char *which = TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr)));\n-\n-      if (strcmp (which, \"default\") == 0)\n-\treturn VISIBILITY_DEFAULT;\n-      if (strcmp (which, \"internal\") == 0)\n-\treturn VISIBILITY_INTERNAL;\n-      if (strcmp (which, \"hidden\") == 0)\n-\treturn VISIBILITY_HIDDEN;\n-      if (strcmp (which, \"protected\") == 0)\n-\treturn VISIBILITY_PROTECTED;\n-\n-      abort ();\n-    }\n-\n-  return VISIBILITY_DEFAULT;\n-}\n-\n /* Select a set of attributes for section NAME based on the properties\n    of DECL and whether or not RELOC indicates that DECL's initializer\n    might contain runtime relocations.\n@@ -5131,7 +5107,7 @@ default_binds_local_p_1 (tree exp, int shlib)\n   else if (! TREE_PUBLIC (exp))\n     local_p = true;\n   /* A variable is local if the user tells us so.  */\n-  else if (decl_visibility (exp) != VISIBILITY_DEFAULT)\n+  else if (DECL_VISIBILITY (exp) != VISIBILITY_DEFAULT)\n     local_p = true;\n   /* Otherwise, variables defined outside this object may not be local.  */\n   else if (DECL_EXTERNAL (exp))"}]}