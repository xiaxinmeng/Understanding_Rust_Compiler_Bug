{"sha": "cb92366029011ef6ee679a2540a2c6a77ad7372e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I5MjM2NjAyOTAxMWVmNmVlNjc5YTI1NDBhMmM2YTc3YWQ3MzcyZQ==", "commit": {"author": {"name": "Ken Raeburn", "email": "raeburn@cygnus.com", "date": "1998-06-08T15:56:47Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-06-08T15:56:47Z"}, "message": "* Revamped multiply support for MIPS chips.\n\n        * mips.c (extend_operator): New function.\n        (highpart_shift_operator): Likewise.\n        * mips.h: Declare new functions.\n        (PREDICATE_CODES): Add support for new predicates.\n        * mips.md (mulsi3 expander): Simplify.\n        (mulsi_mult3): Add another constraint alternative.  Support\n        3 operand multiply instructions as found on various mips\n        parts.\n        (mulsi3_r4650): Delete pattern, now handled by mulsi_mult3.\n        (mul_acc_si): New pattern and associated splitters.\n        (mulsidi3 expander): Rework to use mulsidi3_64bit and\n        mulsidi3_internal.\n        (umulsidi3): New expander.\n        (mulsidi3_internal): Accept either sign or zero extended\n        operands and generate code as appropriate appropriately.\n        (mulsidi3_64bit): Similarly.\n        (smulsi3_highpart): Turn into an expander and generate code\n        to match new patterns.\n        (umulsi3_highpart): Likewise.\n        (xmulsi3_highpart_internal): New pattern.\n        (maddi patterns): Delete.  Replace with:\n        (mul_acc_di, mul-acc_64bit_di): New patterns.\n\nCo-Authored-By: Jeffrey A Law <law@cygnus.com>\n\nFrom-SVN: r20337", "tree": {"sha": "910e5fa6251514ebff40b3b55346909bdfba1dea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/910e5fa6251514ebff40b3b55346909bdfba1dea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb92366029011ef6ee679a2540a2c6a77ad7372e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb92366029011ef6ee679a2540a2c6a77ad7372e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb92366029011ef6ee679a2540a2c6a77ad7372e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb92366029011ef6ee679a2540a2c6a77ad7372e/comments", "author": null, "committer": null, "parents": [{"sha": "a1622f838f1188fca74ba0186300882f33006ae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1622f838f1188fca74ba0186300882f33006ae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1622f838f1188fca74ba0186300882f33006ae7"}], "stats": {"total": 396, "additions": 251, "deletions": 145}, "files": [{"sha": "a5ebd22d346aa68e590516e179e0b1d43467b441", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb92366029011ef6ee679a2540a2c6a77ad7372e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb92366029011ef6ee679a2540a2c6a77ad7372e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb92366029011ef6ee679a2540a2c6a77ad7372e", "patch": "@@ -1,3 +1,30 @@\n+Mon Jun  8 16:54:12 1998  Ken Raeburn   <raeburn@cygnus.com>\n+                          Jeff Law      <law@cygnus.com>\n+\n+\t* Revamped multiply support for MIPS chips.\n+\t* mips.c (extend_operator): New function.\n+\t(highpart_shift_operator): Likewise.\n+\t* mips.h: Declare new functions.\n+\t(PREDICATE_CODES): Add support for new predicates.\n+\t* mips.md (mulsi3 expander): Simplify.\n+\t(mulsi_mult3): Add another constraint alternative.  Support\n+\t3 operand multiply instructions as found on various mips\n+\tparts.\n+\t(mulsi3_r4650): Delete pattern, now handled by mulsi_mult3.\n+\t(mul_acc_si): New pattern and associated splitters.\n+\t(mulsidi3 expander): Rework to use mulsidi3_64bit and\n+\tmulsidi3_internal.\n+\t(umulsidi3): New expander.\n+\t(mulsidi3_internal): Accept either sign or zero extended\n+\toperands and generate code as appropriate appropriately.\n+\t(mulsidi3_64bit): Similarly.\n+\t(smulsi3_highpart): Turn into an expander and generate code\n+\tto match new patterns.\n+\t(umulsi3_highpart): Likewise.\n+\t(xmulsi3_highpart_internal): New pattern.\n+\t(maddi patterns): Delete.  Replace with:\n+\t(mul_acc_di, mul-acc_64bit_di): New patterns.\n+\n Mon Jun  8 14:16:15 EDT 1998  Andrew MacLeod  <amacleod@cygnus.com>\n \n \t* eh-common.h: Remove NEW_EH_MODEL compile time flag, and replace with"}, {"sha": "e10c0484922f7478245ea253011f5825d54d404c", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb92366029011ef6ee679a2540a2c6a77ad7372e/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb92366029011ef6ee679a2540a2c6a77ad7372e/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=cb92366029011ef6ee679a2540a2c6a77ad7372e", "patch": "@@ -8408,3 +8408,29 @@ machine_dependent_reorg (first)\n      constants table, we don't need to output the constant in the real\n      constant table, but we have no way to prevent that.  */\n }\n+\n+/* Return nonzero if X is a SIGN or ZERO extend operator.  */\n+int\n+extend_operator (x, mode)\n+     rtx x;\n+     enum machine_mode mode;\n+{\n+  enum rtx_code code = GET_CODE (x);\n+  return code == SIGN_EXTEND || code == ZERO_EXTEND;\n+}\n+\n+/* Accept any operator that can be used to shift the high half of the\n+   input value to the lower half, suitable for truncation.  The\n+   remainder (the lower half of the input, and the upper half of the\n+   output) will be discarded.  */\n+int\n+highpart_shift_operator (x, mode)\n+     rtx x;\n+     enum machine_mode mode;\n+{\n+  enum rtx_code code = GET_CODE (x);\n+  return (code == LSHIFTRT\n+\t  || code == ASHIFTRT\n+\t  || code == ROTATERT\n+\t  || code == ROTATE);\n+}"}, {"sha": "fb6f0513ab89f4f9e7a1abf1d8e0ebef82682ccd", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb92366029011ef6ee679a2540a2c6a77ad7372e/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb92366029011ef6ee679a2540a2c6a77ad7372e/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=cb92366029011ef6ee679a2540a2c6a77ad7372e", "patch": "@@ -260,6 +260,8 @@ extern int\t\tse_uns_arith_operand ();\n extern int\t\tse_arith_operand ();\n extern int\t\tse_nonmemory_operand ();\n extern int\t\tse_nonimmediate_operand ();\n+extern int              extend_operator ();\n+extern int              highpart_shift_operator ();\n extern int\t\tm16_uimm3_b ();\n extern int\t\tm16_simm4_1 ();\n extern int\t\tm16_nsimm4_1 ();\n@@ -3641,7 +3643,10 @@ while (0)\n \t\t\t\t  REG, SIGN_EXTEND }},\t\t\t\\\n   {\"se_nonimmediate_operand\",   { SUBREG, REG, MEM, SIGN_EXTEND }},\t\\\n   {\"consttable_operand\",\t{ LABEL_REF, SYMBOL_REF, CONST_INT,\t\\\n-\t\t\t\t  CONST_DOUBLE, CONST }},\n+\t\t\t\t  CONST_DOUBLE, CONST }},\t\t\\\n+  {\"extend_operator\",           { SIGN_EXTEND, ZERO_EXTEND }},          \\\n+  {\"highpart_shift_operator\",   { ASHIFTRT, LSHIFTRT, ROTATERT, ROTATE }},\n+\n \n \f\n /* If defined, a C statement to be executed just prior to the"}, {"sha": "595362de02968bfb199c2312cf0b685aa90a1ffa", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 192, "deletions": 144, "changes": 336, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb92366029011ef6ee679a2540a2c6a77ad7372e/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb92366029011ef6ee679a2540a2c6a77ad7372e/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=cb92366029011ef6ee679a2540a2c6a77ad7372e", "patch": "@@ -1631,6 +1631,7 @@\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"2\")])\t;; mul.s + nop\n \n+\n ;; ??? The R4000 (only) has a cpu bug.  If a double-word shift executes while\n ;; a multiply is in progress, it may give an incorrect result.  Avoid\n ;; this by keeping the mflo with the mult on the R4000.\n@@ -1646,8 +1647,6 @@\n {\n   if (GENERATE_MULT3)\n     emit_insn (gen_mulsi3_mult3 (operands[0], operands[1], operands[2]));\n-  else if (TARGET_MAD)\n-    emit_insn (gen_mulsi3_r4650 (operands[0], operands[1], operands[2]));\n   else if (mips_cpu != PROCESSOR_R4000 || TARGET_MIPS16)\n     emit_insn (gen_mulsi3_internal (operands[0], operands[1], operands[2]));\n   else\n@@ -1656,14 +1655,21 @@\n }\")\n \n (define_insn \"mulsi3_mult3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(mult:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t (match_operand:SI 2 \"register_operand\" \"d\")))\n-   (clobber (match_scratch:SI 3 \"=h\"))\n-   (clobber (match_scratch:SI 4 \"=l\"))\n-   (clobber (match_scratch:SI 5 \"=a\"))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,?l\")\n+\t(mult:SI (match_operand:SI 1 \"register_operand\" \"d,d\")\n+\t\t (match_operand:SI 2 \"register_operand\" \"d,d\")))\n+   (clobber (match_scratch:SI 3 \"=h,h\"))\n+   (clobber (match_scratch:SI 4 \"=l,X\"))\n+   (clobber (match_scratch:SI 5 \"=a,a\"))]\n   \"GENERATE_MULT3\"\n-  \"mult\\\\t%0,%1,%2\"\n+  \"*\n+{\n+  if (which_alternative == 1)\n+    return \\\"mult\\\\t%1,%2\\\";\n+  if (TARGET_MAD)\n+    return \\\"mul\\\\t%0,%1,%2\\\";\n+  return \\\"mult\\\\t%0,%1,%2\\\";\n+}\"\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"1\")])\n@@ -1703,18 +1709,69 @@\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"3\")])\t\t;; mult + mflo + delay\n \n-(define_insn \"mulsi3_r4650\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(mult:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t (match_operand:SI 2 \"register_operand\" \"d\")))\n-   (clobber (match_scratch:SI 3 \"=h\"))\n-   (clobber (match_scratch:SI 4 \"=l\"))\n-   (clobber (match_scratch:SI 5 \"=a\"))]\n-  \"TARGET_MAD\"\n-  \"mul\\\\t%0,%1,%2\"\n-  [(set_attr \"type\"\t\"imul\")\n+;; The all-d alternative is needed because the combiner will find this\n+;; pattern and then register alloc/reload will move registers around to\n+;; make them fit, and we don't want to trigger unnecessary loads to LO.\n+;; For the moment, that seems to mostly disable the \"macc\" instruction\n+;; though; some \"?\" marks may be needed.  Using \"*d\" helps, but causes\n+;; stack spills in some cases.\n+(define_insn \"*mul_acc_si\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=l,d,d\")\n+\t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"d,d,d\")\n+\t\t\t  (match_operand:SI 2 \"register_operand\" \"d,d,d\"))\n+\t\t (match_operand:SI 3 \"register_operand\" \"0,l,d\")))\n+   (clobber (match_scratch:SI 4 \"=h,h,h\"))\n+   (clobber (match_scratch:SI 5 \"=X,3,l\"))\n+   (clobber (match_scratch:SI 6 \"=a,a,a\"))\n+   (clobber (match_scratch:SI 7 \"=X,X,d\"))]\n+  \"GENERATE_MADD\"\n+  \"*\n+{\n+  static char *const madd[] = { \\\"madd\\\\t%1,%2\\\",    \\\"madd\\\\t%0,%1,%2\\\" };\n+  static char *const macc[] = { \\\"macc\\\\t$0,%1,%2\\\", \\\"macc\\\\t%0,%1,%2\\\" };\n+  if (which_alternative == 2)\n+    return \\\"#\\\";\n+  return madd[which_alternative];\n+}\"\n+  [(set_attr \"type\"\t\"imul,imul,multi\")\n    (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"1\")])\n+   (set_attr \"length\"\t\"1,1,2\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t\t  (match_operand:SI 2 \"register_operand\" \"\"))\n+\t\t (match_operand:SI 3 \"register_operand\" \"\")))\n+   (clobber (match_scratch:SI 4 \"\"))\n+   (clobber (match_scratch:SI 5 \"\"))\n+   (clobber (match_scratch:SI 6 \"\"))\n+   (clobber (match_scratch:SI 7 \"\"))]\n+  \"reload_completed && GP_REG_P (true_regnum (operands[0])) && GP_REG_P (true_regnum (operands[3]))\"\n+  [(parallel [(set (match_dup 7)\n+\t\t   (mult:SI (match_dup 1) (match_dup 2)))\n+\t      (clobber (match_dup 4))\n+\t      (clobber (match_dup 5))\n+\t      (clobber (match_dup 6))])\n+   (set (match_dup 0) (plus:SI (match_dup 7) (match_dup 3)))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(minus:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t  (mult:SI (match_operand:SI 2 \"register_operand\" \"\")\n+\t\t\t   (match_operand:SI 3 \"register_operand\" \"\"))))\n+   (clobber (match_scratch:SI 4 \"\"))\n+   (clobber (match_scratch:SI 5 \"\"))\n+   (clobber (match_scratch:SI 6 \"\"))\n+   (clobber (match_scratch:SI 7 \"\"))]\n+  \"reload_completed && GP_REG_P (true_regnum (operands[0])) && GP_REG_P (true_regnum (operands[1]))\"\n+  [(parallel [(set (match_dup 7)\n+\t\t   (mult:SI (match_dup 2) (match_dup 3)))\n+\t      (clobber (match_dup 4))\n+\t      (clobber (match_dup 5))\n+\t      (clobber (match_dup 6))])\n+   (set (match_dup 0) (minus:SI (match_dup 1) (match_dup 7)))]\n+  \"\")\n \n (define_expand \"muldi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=l\")\n@@ -1723,6 +1780,7 @@\n    (clobber (match_scratch:DI 3 \"=h\"))\n    (clobber (match_scratch:DI 4 \"=a\"))]\n   \"TARGET_64BIT\"\n+\n   \"\n {\n   if (GENERATE_MULT3 || mips_cpu == PROCESSOR_R4000 || TARGET_MIPS16)\n@@ -1789,97 +1847,124 @@\n   \"\"\n   \"\n {\n+  rtx dummy = gen_rtx (SIGN_EXTEND, DImode, const0_rtx);\n   if (TARGET_64BIT)\n-    emit_insn (gen_mulsidi3_64bit (operands[0], operands[1], operands[2]));\n+    emit_insn (gen_mulsidi3_64bit (operands[0], operands[1], operands[2],\n+\t\t\t\t   dummy, dummy));\n   else\n-    emit_insn (gen_mulsidi3_internal (operands[0], operands[1], operands[2]));\n+    emit_insn (gen_mulsidi3_internal (operands[0], operands[1], operands[2],\n+\t\t\t\t      dummy, dummy));\n   DONE;\n }\")\n \n-(define_insn \"mulsidi3_internal\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=x\")\n-\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t\t (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))\n-   (clobber (match_scratch:SI 3 \"=a\"))]\n-  \"!TARGET_64BIT\"\n-  \"mult\\\\t%1,%2\"\n-  [(set_attr \"type\"\t\"imul\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"1\")])\n-\n-(define_insn \"mulsidi3_64bit\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n-\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t\t (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))\n-   (clobber (match_scratch:DI 3 \"=l\"))\n-   (clobber (match_scratch:DI 4 \"=h\"))]\n-  \"TARGET_64BIT\"\n-  \"mult\\\\t%1,%2\"\n-  [(set_attr \"type\"\t\"imul\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"1\")])\n-\n-(define_insn \"smulsi3_highpart\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=h\")\n-\t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t\t\t       (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))\n-\t\t      (const_int 32))))\n-   (clobber (match_scratch:SI 3 \"=l\"))\n-   (clobber (match_scratch:SI 4 \"=a\"))]\n-  \"\"\n-  \"mult\\\\t%1,%2\"\n-  [(set_attr \"type\"\t\"imul\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"1\")])\n-\n (define_expand \"umulsidi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=x\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n \t\t (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))]\n   \"\"\n   \"\n {\n+  rtx dummy = gen_rtx (ZERO_EXTEND, DImode, const0_rtx);\n   if (TARGET_64BIT)\n-    emit_insn (gen_umulsidi3_64bit (operands[0], operands[1], operands[2]));\n+    emit_insn (gen_mulsidi3_64bit (operands[0], operands[1], operands[2],\n+\t\t\t\t   dummy, dummy));\n   else\n-    emit_insn (gen_umulsidi3_internal (operands[0], operands[1], operands[2]));\n+    emit_insn (gen_mulsidi3_internal (operands[0], operands[1], operands[2],\n+\t\t\t\t      dummy, dummy));\n   DONE;\n }\")\n \n-(define_insn \"umulsidi3_internal\"\n+(define_insn \"mulsidi3_internal\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=x\")\n-\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t\t (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))\n-   (clobber (match_scratch:SI 3 \"=a\"))]\n-  \"!TARGET_64BIT\"\n-  \"multu\\\\t%1,%2\"\n+\t(mult:DI (match_operator:DI 3 \"extend_operator\"\n+\t\t\t\t    [(match_operand:SI 1 \"register_operand\" \"d\")])\n+\t\t (match_operator:DI 4 \"extend_operator\"\n+\t\t\t\t    [(match_operand:SI 2 \"register_operand\" \"d\")])))\n+   (clobber (match_scratch:SI 5 \"=a\"))]\n+  \"!TARGET_64BIT && GET_CODE (operands[3]) == GET_CODE (operands[4])\"\n+  \"*\n+{\n+  if (GET_CODE (operands[3]) == SIGN_EXTEND)\n+    return \\\"mult\\\\t%1,%2\\\";\n+  return \\\"multu\\\\t%1,%2\\\";\n+}\"\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"1\")])\n \n-(define_insn \"umulsidi3_64bit\"\n+(define_insn \"mulsidi3_64bit\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n-\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t\t (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))\n-   (clobber (match_scratch:DI 3 \"=l\"))\n-   (clobber (match_scratch:DI 4 \"=h\"))]\n-  \"TARGET_64BIT\"\n-  \"multu\\\\t%1,%2\"\n+\t(mult:DI (match_operator:DI 3 \"extend_operator\"\n+\t\t\t\t    [(match_operand:SI 1 \"register_operand\" \"d\")])\n+\t\t (match_operator:DI 4 \"extend_operator\"\n+\t\t\t\t    [(match_operand:SI 2 \"register_operand\" \"d\")])))\n+   (clobber (match_scratch:DI 5 \"=l\"))\n+   (clobber (match_scratch:DI 6 \"=h\"))]\n+  \"TARGET_64BIT && GET_CODE (operands[3]) == GET_CODE (operands[4])\"\n+  \"*\n+{\n+  if (GET_CODE (operands[3]) == SIGN_EXTEND)\n+    return \\\"mult\\\\t%1,%2\\\";\n+  return \\\"multu\\\\t%1,%2\\\";\n+}\"\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"1\")])\n \n-(define_insn \"umulsi3_highpart\"\n+;; _highpart patterns\n+(define_expand \"smulsi3_highpart\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=h\")\n+\t(truncate:SI\n+\t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t\t\t       (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))\n+\t\t      (const_int 32))))]\n+  \"\"\n+  \"\n+{\n+  rtx dummy = gen_rtx (SIGN_EXTEND, DImode, const0_rtx);\n+  rtx dummy2 = gen_rtx_LSHIFTRT (DImode, const0_rtx, const0_rtx);\n+  rtx (*genfn)() = gen_xmulsi3_highpart_internal;\n+  emit_insn ((*genfn) (operands[0], operands[1], operands[2], dummy,\n+\t\t       dummy, dummy2));\n+  DONE;\n+}\")\n+\n+(define_expand \"umulsi3_highpart\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=h\")\n \t(truncate:SI\n \t (lshiftrt:DI (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n \t\t\t       (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))\n-\t\t      (const_int 32))))\n-   (clobber (match_scratch:SI 3 \"=l\"))\n-   (clobber (match_scratch:SI 4 \"=a\"))]\n+\t\t      (const_int 32))))]\n   \"\"\n-  \"multu\\\\t%1,%2\"\n+  \"\n+{\n+  rtx dummy = gen_rtx (ZERO_EXTEND, DImode, const0_rtx);\n+  rtx dummy2 = gen_rtx_LSHIFTRT (DImode, const0_rtx, const0_rtx);\n+  rtx (*genfn)() = gen_xmulsi3_highpart_internal;\n+  emit_insn ((*genfn) (operands[0], operands[1], operands[2], dummy,\n+\t\t       dummy, dummy2));\n+  DONE;\n+}\")\n+\n+(define_insn \"xmulsi3_highpart_internal\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=h\")\n+\t(truncate:SI\n+\t (match_operator:DI 5 \"highpart_shift_operator\"\n+\t\t\t    [(mult:DI (match_operator:DI 3 \"extend_operator\"\n+\t\t\t\t\t\t\t [(match_operand:SI 1 \"register_operand\" \"d\")])\n+\t\t\t\t      (match_operator:DI 4 \"extend_operator\"\n+\t\t\t\t\t\t\t [(match_operand:SI 2 \"register_operand\" \"d\")]))\n+\t\t\t     (const_int 32)])))\n+   (clobber (match_scratch:SI 6 \"=l\"))\n+   (clobber (match_scratch:SI 7 \"=a\"))]\n+  \"GET_CODE (operands[3]) == GET_CODE (operands[4])\"\n+  \"*\n+{\n+  if (GET_CODE (operands[3]) == SIGN_EXTEND)\n+    return \\\"mult\\\\t%1,%2\\\";\n+  else\n+    return \\\"multu\\\\t%1,%2\\\";\n+}\"\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"1\")])\n@@ -1922,86 +2007,49 @@\n \t\t (match_dup 0)))\n    (clobber (match_scratch:SI 3 \"=h\"))\n    (clobber (match_scratch:SI 4 \"=a\"))]\n-  \"TARGET_MAD || GENERATE_MADD\"\n-  \"*\n-{\n-  if (TARGET_MAD)\n-    return \\\"mad\\\\t%1,%2\\\";\n-  else\n-    return \\\"madd\\\\t%1,%2\\\";\n-}\"\n-  [(set_attr \"type\"\t\"imul\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"   \"1\")])\n-\n-(define_insn \"maddi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"+x\")\n-\t(plus:DI (mult:DI (sign_extend:DI\n-\t\t\t   (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t\t\t  (sign_extend:DI\n-\t\t\t   (match_operand:SI 2 \"register_operand\" \"d\")))\n-\t\t (match_dup 0)))\n-   (clobber (match_scratch:SI 3 \"=a\"))]\n-  \"TARGET_MAD && ! TARGET_64BIT\"\n-  \"mad\\\\t%1,%2\"\n-  [(set_attr \"type\"\t\"imul\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"   \"1\")])\n-\n-(define_insn \"maddi_64bit\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"+a\")\n-\t(plus:DI (mult:DI (sign_extend:DI\n-\t\t\t   (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t\t\t  (sign_extend:DI\n-\t\t\t   (match_operand:SI 2 \"register_operand\" \"d\")))\n-\t\t (match_dup 0)))\n-   (clobber (match_scratch:DI 3 \"=l\"))\n-   (clobber (match_scratch:DI 4 \"=h\"))]\n-  \"TARGET_MAD && TARGET_64BIT\"\n+  \"TARGET_MAD\"\n   \"mad\\\\t%1,%2\"\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"   \"1\")])\n \n-(define_insn \"umaddi\"\n+(define_insn \"*mul_acc_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"+x\")\n-\t(plus:DI (mult:DI (zero_extend:DI\n-\t\t\t   (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t\t\t  (zero_extend:DI\n-\t\t\t   (match_operand:SI 2 \"register_operand\" \"d\")))\n+\t(plus:DI (mult:DI (match_operator:DI 3 \"extend_operator\"\n+\t\t\t   [(match_operand:SI 1 \"register_operand\" \"d\")])\n+\t\t\t  (match_op_dup:DI 3\n+\t\t\t   [(match_operand:SI 2 \"register_operand\" \"d\")]))\n \t\t (match_dup 0)))\n-   (clobber (match_scratch:SI 3 \"=a\"))]\n+   (clobber (match_scratch:SI 4 \"=a\"))]\n   \"TARGET_MAD && ! TARGET_64BIT\"\n-  \"madu\\\\t%1,%2\"\n+  \"*\n+{\n+  if (GET_CODE (operands[3]) == SIGN_EXTEND)\n+    return \\\"mad\\\\t%1,%2\\\";\n+  else\n+    return \\\"madu\\\\t%1,%2\\\";\n+}\"\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"   \"1\")])\n \n-(define_insn \"umaddi_64bit\"\n+(define_insn \"*mul_acc_64bit_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"+a\")\n-\t(plus:DI (mult:DI (zero_extend:DI\n-\t\t\t   (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t\t\t  (zero_extend:DI\n-\t\t\t   (match_operand:SI 2 \"register_operand\" \"d\")))\n+\t(plus:DI (mult:DI (match_operator:DI 3 \"extend_operator\"\n+\t\t\t   [(match_operand:SI 1 \"register_operand\" \"d\")])\n+\t\t\t  (match_op_dup:DI 3\n+\t\t\t   [(match_operand:SI 2 \"register_operand\" \"d\")]))\n \t\t (match_dup 0)))\n-   (clobber (match_scratch:DI 3 \"=l\"))\n-   (clobber (match_scratch:DI 4 \"=h\"))]\n+   (clobber (match_scratch:DI 4 \"=l\"))\n+   (clobber (match_scratch:DI 5 \"=h\"))]\n   \"TARGET_MAD && TARGET_64BIT\"\n-  \"madu\\\\t%1,%2\"\n-  [(set_attr \"type\"\t\"imul\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"   \"1\")])\n-\n-(define_insn \"madd3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"d\")\n-\t\t\t  (match_operand:SI 2 \"register_operand\" \"d\"))\n-\t\t (match_operand:SI 3 \"register_operand\" \"l\")))\n-   (clobber (match_scratch:SI 4 \"=l\"))\n-   (clobber (match_scratch:SI 5 \"=h\"))\n-   (clobber (match_scratch:SI 6 \"=a\"))]\n-  \"GENERATE_MADD\"\n-  \"madd\\\\t%0,%1,%2\"\n+  \"*\n+{\n+  if (GET_CODE (operands[3]) == SIGN_EXTEND)\n+    return \\\"mad\\\\t%1,%2\\\";\n+  else\n+    return \\\"madu\\\\t%1,%2\\\";\n+}\"\n   [(set_attr \"type\"\t\"imul\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"   \"1\")])"}]}