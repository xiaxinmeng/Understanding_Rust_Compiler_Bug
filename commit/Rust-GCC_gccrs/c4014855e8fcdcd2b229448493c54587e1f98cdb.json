{"sha": "c4014855e8fcdcd2b229448493c54587e1f98cdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQwMTQ4NTVlOGZjZGNkMmIyMjk0NDg0OTNjNTQ1ODdlMWY5OGNkYg==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2016-11-17T13:43:32Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2016-11-17T13:43:32Z"}, "message": "[ARC] Add support for QuarkSE processor.\n\ngcc/\n2016-11-17  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc-arches.def: Add FPX quarkse instruction as valid\n\tfor arcem.\n\t* config/arc/arc-c.def (__ARC_FPX_QUARK__): Define.\n\t* config/arc/arc-cpus.def (quarkse_em): Add.\n\t* config/arc/arc-options.def (FL_FPX_QUARK, FL_QUARK): Likewise.\n\t* config/arc/arc-opts.h (FPX_QK): Define.\n\t* config/arc/arc-tables.opt: Regenerate.\n\t* config/arc/arc.c (gen_compare_reg): Change.\n\t(arc_register_move_cost): Avoid Dy,Dx moves.\n\t* config/arc/arc.h (TARGET_HARD_FLOAT): Change.\n\t(TARGET_FPX_QUARK, TARGET_FP_ASSIST): Define.\n\t* config/arc/arc.md (divsf3, sqrtsf2, fix_truncsfsi2, floatsisf2):\n\tNew expands.\n\t* config/arc/fpu.md (divsf3_fpu, sqrtsf2_fpu, floatsisf2_fpu)\n\t(fix_truncsfsi2_fpu): Rename.\n\t* config/arc/fpx.md (cmp_quark, cmpsf_quark_, cmpsf_quark_ord)\n\t(cmpsf_quark_uneq, cmpsf_quark_eq, divsf3_quark, sqrtsf2_quark)\n\t(fix_truncsfsi2_quark, floatsisf2_quark): New patterns.\n\t* config/arc/t-multilib: Regenerate.\n\nFrom-SVN: r242546", "tree": {"sha": "142e5df27ea3e116060e24dedb90be7dcdddb2bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/142e5df27ea3e116060e24dedb90be7dcdddb2bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4014855e8fcdcd2b229448493c54587e1f98cdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4014855e8fcdcd2b229448493c54587e1f98cdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4014855e8fcdcd2b229448493c54587e1f98cdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4014855e8fcdcd2b229448493c54587e1f98cdb/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c867c39d8ae911e8d4c96333e7dc610837bf414e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c867c39d8ae911e8d4c96333e7dc610837bf414e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c867c39d8ae911e8d4c96333e7dc610837bf414e"}], "stats": {"total": 222, "additions": 208, "deletions": 14}, "files": [{"sha": "d69226644caa6887513793b216df33a514bbc24b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4014855e8fcdcd2b229448493c54587e1f98cdb", "patch": "@@ -1,3 +1,25 @@\n+2016-11-17  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc-arches.def: Add FPX quarkse instruction as valid\n+\tfor arcem.\n+\t* config/arc/arc-c.def (__ARC_FPX_QUARK__): Define.\n+\t* config/arc/arc-cpus.def (quarkse_em): Add.\n+\t* config/arc/arc-options.def (FL_FPX_QUARK, FL_QUARK): Likewise.\n+\t* config/arc/arc-opts.h (FPX_QK): Define.\n+\t* config/arc/arc-tables.opt: Regenerate.\n+\t* config/arc/arc.c (gen_compare_reg): Change.\n+\t(arc_register_move_cost): Avoid Dy,Dx moves.\n+\t* config/arc/arc.h (TARGET_HARD_FLOAT): Change.\n+\t(TARGET_FPX_QUARK, TARGET_FP_ASSIST): Define.\n+\t* config/arc/arc.md (divsf3, sqrtsf2, fix_truncsfsi2, floatsisf2):\n+\tNew expands.\n+\t* config/arc/fpu.md (divsf3_fpu, sqrtsf2_fpu, floatsisf2_fpu)\n+\t(fix_truncsfsi2_fpu): Rename.\n+\t* config/arc/fpx.md (cmp_quark, cmpsf_quark_, cmpsf_quark_ord)\n+\t(cmpsf_quark_uneq, cmpsf_quark_eq, divsf3_quark, sqrtsf2_quark)\n+\t(fix_truncsfsi2_quark, floatsisf2_quark): New patterns.\n+\t* config/arc/t-multilib: Regenerate.\n+\n 2016-11-17  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.c (avr_print_operand_address): Use CONST_INT_P if"}, {"sha": "5fd45cda25c4dd96d7b549b95750e5fca6fd2e69", "filename": "gcc/config/arc/arc-arches.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Farc-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Farc-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-arches.def?ref=c4014855e8fcdcd2b229448493c54587e1f98cdb", "patch": "@@ -40,7 +40,7 @@\n \n ARC_ARCH (\"arcem\", em, FL_MPYOPT_1_6 | FL_DIVREM | FL_CD | FL_NORM\t\\\n \t  | FL_BS | FL_SWAP | FL_FPUS | FL_SPFP | FL_DPFP\t\t\\\n-\t  | FL_SIMD | FL_FPUDA, 0)\n+\t  | FL_SIMD | FL_FPUDA | FL_QUARK, 0)\n ARC_ARCH (\"archs\", hs, FL_MPYOPT_7_9 | FL_DIVREM | FL_NORM | FL_CD\t\\\n \t  | FL_ATOMIC | FL_LL64 | FL_BS | FL_SWAP\t\t\t\\\n \t  | FL_FPUS | FL_FPUD,\t\t\t\t\t\t\\"}, {"sha": "fd643760d88efb69426171b4c13dc156b8f073da", "filename": "gcc/config/arc/arc-c.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Farc-c.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Farc-c.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-c.def?ref=c4014855e8fcdcd2b229448493c54587e1f98cdb", "patch": "@@ -58,6 +58,7 @@ ARC_C_DEF (\"__ARC_FPU_DP_DIV__\", TARGET_FP_DP_SQRT)\n ARC_C_DEF (\"__ARC_FPU_SP_FMA__\", TARGET_FP_SP_FUSED)\n ARC_C_DEF (\"__ARC_FPU_DP_FMA__\", TARGET_FP_DP_FUSED)\n ARC_C_DEF (\"__ARC_FPU_ASSIST__\", TARGET_FP_DP_AX)\n+ARC_C_DEF (\"__ARC_FPX_QUARK__\",  TARGET_FPX_QUARK)\n \n /* To be deprecated.  */\n ARC_C_DEF (\"__A6__\",     TARGET_ARC600)"}, {"sha": "720048559c8a26aab609899acf22c906d32b0f11", "filename": "gcc/config/arc/arc-cpus.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Farc-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Farc-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-cpus.def?ref=c4014855e8fcdcd2b229448493c54587e1f98cdb", "patch": "@@ -51,6 +51,7 @@ ARC_CPU (em4,\t    em, FL_CD, NONE)\n ARC_CPU (em4_dmips, em, FL_MPYOPT_2|FL_CD|FL_DIVREM|FL_NORM|FL_SWAP|FL_BS, NONE)\n ARC_CPU (em4_fpus,  em, FL_MPYOPT_2|FL_CD|FL_DIVREM|FL_NORM|FL_SWAP|FL_BS|FL_FPU_FPUS, NONE)\n ARC_CPU (em4_fpuda, em, FL_MPYOPT_2|FL_CD|FL_DIVREM|FL_NORM|FL_SWAP|FL_BS|FL_FPU_FPUDA, NONE)\n+ARC_CPU (quarkse_em, em, FL_MPYOPT_3|FL_CD|FL_DIVREM|FL_NORM|FL_SWAP|FL_BS|FL_FPX_QUARK|FL_SPFP|FL_DPFP, NONE)\n \n ARC_CPU (hs,\t     hs, 0, NONE)\n ARC_CPU (archs,\t     hs, FL_MPYOPT_2|FL_DIVREM|FL_LL64, NONE)"}, {"sha": "a16637e9cbe21bcc1e56350cf4e31e8a0dfaaea9", "filename": "gcc/config/arc/arc-options.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Farc-options.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Farc-options.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-options.def?ref=c4014855e8fcdcd2b229448493c54587e1f98cdb", "patch": "@@ -99,10 +99,12 @@ ARC_OPTX (FL_FPU_FPUD,\t    (1ULL << 34), arc_fpu_build, FPU_FPUD,\t\"mfpu=fpud\")\n ARC_OPTX (FL_FPU_FPUD_DIV,  (1ULL << 35), arc_fpu_build, FPU_FPUD_DIV,\t\"mfpu=fpud_div\")\n ARC_OPTX (FL_FPU_FPUD_FMA,  (1ULL << 36), arc_fpu_build, FPU_FPUD_FMA,\t\"mfpu=fpud_fma\")\n ARC_OPTX (FL_FPU_FPUD_ALL,  (1ULL << 37), arc_fpu_build, FPU_FPUD_ALL,\t\"mfpu=fpud_all\")\n+ARC_OPTX (FL_FPX_QUARK,\t    (1ULL << 38), arc_fpu_build, FPX_QK,\t\"quarkse fp\")\n \n ARC_OPT (FL_FPUS,  (0xFULL << 26), 0, \"single precission floating point\")\n ARC_OPT (FL_FPUDA, (0xFFULL << 26), 0, \"double precission fp assist\")\n ARC_OPT (FL_FPUD,  (0xF0FULL << 26), 0, \"double precission floating point\")\n+ARC_OPT (FL_QUARK, (1ULL << 38), 0, \"Quark SE fp extension\")\n \n /* Local Variables: */\n /* mode: c */"}, {"sha": "2fd3c348f9ca05fb422f7c1792cba39a5d9e2c3a", "filename": "gcc/config/arc/arc-opts.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Farc-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Farc-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-opts.h?ref=c4014855e8fcdcd2b229448493c54587e1f98cdb", "patch": "@@ -48,6 +48,8 @@ enum processor_type\n #define FPU_DD    0x0080\n /* Double precision floating point assist operations.  */\n #define FPX_DP    0x0100\n+/* Quark SE floating point instructions.  */\n+#define FPX_QK    0x0200\n \n /* fpus option combi.  */\n #define FPU_FPUS  (FPU_SP | FPU_SC)"}, {"sha": "41e325c91d57859ec03e997986e6b798d7199bc3", "filename": "gcc/config/arc/arc-tables.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Farc-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Farc-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-tables.opt?ref=c4014855e8fcdcd2b229448493c54587e1f98cdb", "patch": "@@ -42,6 +42,9 @@ Enum(processor_type) String(em4_fpus) Value(PROCESSOR_em4_fpus)\n EnumValue\n Enum(processor_type) String(em4_fpuda) Value(PROCESSOR_em4_fpuda)\n \n+EnumValue\n+Enum(processor_type) String(quarkse_em) Value(PROCESSOR_quarkse_em)\n+\n EnumValue\n Enum(processor_type) String(hs) Value(PROCESSOR_hs)\n "}, {"sha": "92ae42159a684da112adde661d9dbde5936810f3", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=c4014855e8fcdcd2b229448493c54587e1f98cdb", "patch": "@@ -1726,6 +1726,26 @@ gen_compare_reg (rtx comparison, machine_mode omode)\n \t\t\t\t\t\t gen_rtx_REG (CC_FPXmode, 61),\n \t\t\t\t\t\t const0_rtx)));\n     }\n+  else if (TARGET_FPX_QUARK && (cmode == SFmode))\n+    {\n+      switch (code)\n+\t{\n+\tcase NE: case EQ: case GT: case UNLE: case GE: case UNLT:\n+\tcase UNEQ: case LTGT: case ORDERED: case UNORDERED:\n+\t  break;\n+\tcase LT: case UNGE: case LE: case UNGT:\n+\t  code = swap_condition (code);\n+\t  tmp = x;\n+\t  x = y;\n+\t  y = tmp;\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+\n+      emit_insn (gen_cmp_quark (cc_reg,\n+\t\t\t\tgen_rtx_COMPARE (mode, x, y)));\n+    }\n   else if (TARGET_HARD_FLOAT\n \t   && ((cmode == SFmode && TARGET_FP_SP_BASE)\n \t       || (cmode == DFmode && TARGET_FP_DP_BASE)))\n@@ -7281,7 +7301,7 @@ arc_register_move_cost (machine_mode,\n     return 8;\n \n   /* Force an attempt to 'mov Dy,Dx' to spill.  */\n-  if (TARGET_ARC700 && TARGET_DPFP\n+  if ((TARGET_ARC700 || TARGET_EM) && TARGET_DPFP\n       && from_class == DOUBLE_REGS && to_class == DOUBLE_REGS)\n     return 100;\n "}, {"sha": "611ef54df229f82f72653fbf771f90392d7f6865", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=c4014855e8fcdcd2b229448493c54587e1f98cdb", "patch": "@@ -197,12 +197,7 @@ extern const char *arc_cpu_to_as (int argc, const char **argv);\n    default for A7, and only for pre A7 cores when -mnorm is given.  */\n #define TARGET_NORM (TARGET_ARC700 || TARGET_NORM_SET || TARGET_HS)\n /* Indicate if an optimized floating point emulation library is available.  */\n-#define TARGET_OPTFPE\t\t\t\t\\\n-   (TARGET_ARC700\t\t\t\t\\\n-    /* We need a barrel shifter and NORM.  */\t\\\n-    || (TARGET_ARC600 && TARGET_NORM_SET)\t\\\n-    || TARGET_HS\t\t\t\t\\\n-    || (TARGET_EM && TARGET_NORM_SET && TARGET_BARREL_SHIFTER))\n+#define TARGET_OPTFPE (TARGET_ARC700 || TARGET_FPX_QUARK)\n \n /* Non-zero means the cpu supports swap instruction.  This flag is set by\n    default for A7, and only for pre A7 cores when -mswap is given.  */\n@@ -1702,7 +1697,7 @@ enum\n \n /* FPU defines.  */\n /* Any FPU support.  */\n-#define TARGET_HARD_FLOAT (arc_fpu_build != 0)\n+#define TARGET_HARD_FLOAT   ((arc_fpu_build & (FPU_SP | FPU_DP)) != 0)\n /* Single precision floating point support.  */\n #define TARGET_FP_SP_BASE   ((arc_fpu_build & FPU_SP) != 0)\n /* Double precision floating point support.  */\n@@ -1721,5 +1716,8 @@ enum\n #define TARGET_FP_DP_SQRT   ((arc_fpu_build & FPU_DD) != 0)\n /* Double precision floating point assist instruction support.  */\n #define TARGET_FP_DP_AX     ((arc_fpu_build & FPX_DP) != 0)\n+/* Custom FP instructions used by QuarkSE EM cpu.  */\n+#define TARGET_FPX_QUARK    (TARGET_EM && TARGET_SPFP\t\t\\\n+\t\t\t     && (arc_fpu_build == FPX_QK))\n \n #endif /* GCC_ARC_H */"}, {"sha": "c16bf67816def8c028b29d2768e55e60e1fac71e", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=c4014855e8fcdcd2b229448493c54587e1f98cdb", "patch": "@@ -5995,6 +5995,52 @@\n    gcc_unreachable ();\n  \")\n \n+;;div\n+(define_expand \"divsf3\"\n+  [(set (match_operand:SF 0 \"register_operand\"        \"\")\n+\t(div:SF (match_operand:SF 1 \"nonmemory_operand\" \"\")\n+\t\t(match_operand:SF 2 \"nonmemory_operand\" \"\")))]\n+  \"TARGET_FPX_QUARK || TARGET_FP_SP_SQRT\"\n+  \"\n+  if (TARGET_FPX_QUARK)\n+   {\n+     operands[1] = force_reg (SFmode, operands[1]);\n+     operands[2] = force_reg (SFmode, operands[2]);\n+   }\n+  else\n+   {\n+     if (!register_operand (operands[1], SFmode)\n+        && !register_operand (operands[2], SFmode))\n+       operands[1] = force_reg (SFmode, operands[1]);\n+   }\n+  \")\n+\n+;; Square root\n+(define_expand \"sqrtsf2\"\n+  [(set (match_operand:SF 0 \"register_operand\"           \"\")\n+\t(sqrt:SF (match_operand:SF 1 \"nonmemory_operand\" \"\")))]\n+  \"TARGET_FPX_QUARK || TARGET_FP_SP_SQRT\"\n+  \"\n+  if (TARGET_FPX_QUARK)\n+   {\n+     operands[1] = force_reg (SFmode, operands[1]);\n+   }\n+\")\n+\n+;; SF->SI (using rounding towards zero)\n+(define_expand \"fix_truncsfsi2\"\n+  [(set (match_operand:SI 0 \"register_operand\"                \"\")\n+\t(fix:SI (fix:SF (match_operand:SF 1 \"register_operand\" \"\"))))]\n+  \"TARGET_FPX_QUARK || TARGET_FP_SP_CONV\"\n+  \"\")\n+\n+;; SI->SF\n+(define_expand \"floatsisf2\"\n+  [(set (match_operand:SF 0 \"register_operand\"            \"\")\n+\t(float:SF (match_operand:SI 1 \"register_operand\" \"\")))]\n+  \"TARGET_FPX_QUARK || TARGET_FP_SP_CONV\"\n+  \"\")\n+\n (define_expand \"extzv\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(zero_extract:SI (match_operand:SI 1 \"register_operand\" \"\")"}, {"sha": "5c56f76c67996ac542974fc2347b4d46bda2025c", "filename": "gcc/config/arc/fpu.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Ffpu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Ffpu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ffpu.md?ref=c4014855e8fcdcd2b229448493c54587e1f98cdb", "patch": "@@ -215,7 +215,7 @@\n ;; see pattern in arc.md\n \n ;; Square root\n-(define_insn \"sqrtsf2\"\n+(define_insn \"sqrtsf2_fpu\"\n   [(set (match_operand:SF 0 \"register_operand\"           \"=r,r\")\n \t(sqrt:SF (match_operand:SF 1 \"nonmemory_operand\"  \"r,F\")))]\n   \"TARGET_FP_SP_SQRT\"\n@@ -412,7 +412,7 @@\n )\n \n ;; SI->SF\n-(define_insn \"floatsisf2\"\n+(define_insn \"floatsisf2_fpu\"\n   [(set (match_operand:SF 0 \"register_operand\"           \"=r,r\")\n \t(float:SF (match_operand:SI 1 \"register_operand\"  \"0,r\")))]\n   \"TARGET_FP_SP_CONV\"\n@@ -448,7 +448,7 @@\n )\n \n ;; SF->SI (using rounding towards zero)\n-(define_insn \"fix_truncsfsi2\"\n+(define_insn \"fix_truncsfsi2_fpu\"\n   [(set (match_operand:SI 0 \"register_operand\"                \"=r,r\")\n \t(fix:SI (fix:SF (match_operand:SF 1 \"register_operand\" \"0,r\"))))]\n   \"TARGET_FP_SP_CONV\""}, {"sha": "094319e1ce4f04feeab4281f5721cc6b50a4d201", "filename": "gcc/config/arc/fpx.md", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Ffpx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Ffpx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ffpx.md?ref=c4014855e8fcdcd2b229448493c54587e1f98cdb", "patch": "@@ -614,3 +614,102 @@\n  [(set_attr \"type\" \"dpfp_addsub\")\n   (set_attr \"length\" \"4,8,4,8\")\n   (set_attr \"cpu_facility\" \"*,*,fpx,fpx\")])\n+\n+;; Intel QUARK SE extensions\n+(define_mode_iterator QUARK_CMP [CC_FP_GT CC_FP_GE])\n+(define_mode_attr quark_cmp [(CC_FP_GT \"gt\") (CC_FP_GE \"ge\")])\n+\n+(define_expand \"cmp_quark\"\n+  [(parallel [(set (match_operand 0 \"\")\n+\t\t   (match_operand 1 \"\"))\n+\t      (clobber (match_scratch:SI 2 \"\"))])]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"*cmpsf_quark_<quark_cmp>\"\n+  [(set (reg:QUARK_CMP CC_REG)\n+\t(compare:QUARK_CMP (match_operand:SF 0 \"register_operand\" \"r\")\n+\t\t\t   (match_operand:SF 1 \"register_operand\" \"r\")))\n+   (clobber (match_scratch:SI 2 \"=&r\"))]\n+  \"TARGET_FPX_QUARK\"\n+  \"dsp_fp_cmp\\\\t%2,%0,%1\\\\n\\\\trsub.f\\\\t0,%2,7\\\\n\\\\tcmp.nc\\\\t%2,1\\\\n\\\\tcmp.hi\\\\t%2,3\"\n+  [(set_attr \"length\" \"16\")\n+   (set_attr \"cond\" \"set\")\n+   (set_attr \"predicable\" \"no\")\n+   (set_attr \"cond\" \"nocond\")])\n+\n+(define_insn \"*cmpsf_quark_ord\"\n+  [(set (reg:CC_FP_ORD CC_REG)\n+\t(compare:CC_FP_ORD (match_operand:SF 0 \"register_operand\" \"r\")\n+\t\t\t   (match_operand:SF 1 \"register_operand\" \"r\")))\n+   (clobber (match_scratch:SI 2 \"=&r\"))]\n+  \"TARGET_FPX_QUARK\"\n+  \"dsp_fp_cmp\\\\t%2,%0,%1\\\\n\\\\tadd.f\\\\t%2,%2,-8\"\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"cond\" \"set\")\n+   (set_attr \"predicable\" \"no\")\n+   (set_attr \"cond\" \"nocond\")])\n+\n+(define_insn \"*cmpsf_quark_uneq\"\n+  [(set (reg:CC_FP_UNEQ CC_REG)\n+\t(compare:CC_FP_UNEQ (match_operand:SF 0 \"register_operand\" \"r\")\n+\t\t\t    (match_operand:SF 1 \"register_operand\" \"r\")))\n+   (clobber (match_scratch:SI 2 \"=&r\"))]\n+  \"TARGET_FPX_QUARK\"\n+  \"dsp_fp_cmp\\\\t%2,%0,%1\\\\n\\\\ttst\\\\t%2,6\"\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"cond\" \"set\")\n+   (set_attr \"predicable\" \"no\")\n+   (set_attr \"cond\" \"nocond\")])\n+\n+(define_insn \"*cmpsf_quark_eq\"\n+  [(set (reg:CC_Z CC_REG)\n+\t(compare:CC_Z (match_operand:SF 0 \"register_operand\" \"r\")\n+\t\t      (match_operand:SF 1 \"register_operand\" \"r\")))\n+   (clobber (match_scratch:SI 2 \"=&r\"))]\n+  \"TARGET_FPX_QUARK\"\n+  \"dsp_fp_cmp\\\\t%2,%0,%1\\\\n\\\\ttst\\\\t%2,0x0E\"\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"cond\" \"set\")\n+   (set_attr \"predicable\" \"no\")\n+   (set_attr \"cond\" \"nocond\")])\n+\n+(define_insn \"*divsf3_quark\"\n+  [(set (match_operand:SF 0 \"register_operand\"        \"=r\")\n+\t(div:SF (match_operand:SF 1 \"register_operand\" \"r\")\n+\t\t(match_operand:SF 2 \"register_operand\" \"r\")))]\n+  \"TARGET_FPX_QUARK\"\n+  \"dsp_fp_div\\\\t%0,%1,%2\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"predicable\" \"no\")\n+   (set_attr \"cond\" \"nocond\")])\n+\n+(define_insn \"*sqrtsf2_quark\"\n+  [(set (match_operand:SF 0 \"register_operand\"          \"=r\")\n+\t(sqrt:SF (match_operand:SF 1 \"register_operand\" \"r\")))]\n+  \"TARGET_FPX_QUARK\"\n+  \"dsp_fp_sqrt\\\\t%0,%1\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"predicable\" \"no\")\n+   (set_attr \"cond\" \"nocond\")])\n+\n+;; SF->SI (using rounding towards zero)\n+(define_insn \"*fix_truncsfsi2_quark\"\n+  [(set (match_operand:SI 0 \"register_operand\"                \"=r\")\n+\t(fix:SI (fix:SF (match_operand:SF 1 \"register_operand\" \"r\"))))]\n+  \"TARGET_FPX_QUARK\"\n+  \"dsp_fp_flt2i\\\\t%0,%1\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"predicable\" \"no\")\n+   (set_attr \"cond\" \"nocond\")])\n+\n+;; SI->SF\n+(define_insn \"*floatsisf2_quark\"\n+  [(set (match_operand:SF 0 \"register_operand\"          \"=r\")\n+\t(float:SF (match_operand:SI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_FPX_QUARK\"\n+  \"dsp_fp_i2flt\\\\t%0,%1\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"predicable\" \"no\")\n+   (set_attr \"cond\" \"nocond\")])\n+"}, {"sha": "a96433086d9a5621d7310f8027d934807aa398f0", "filename": "gcc/config/arc/t-multilib", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Ft-multilib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4014855e8fcdcd2b229448493c54587e1f98cdb/gcc%2Fconfig%2Farc%2Ft-multilib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ft-multilib?ref=c4014855e8fcdcd2b229448493c54587e1f98cdb", "patch": "@@ -21,9 +21,9 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-MULTILIB_OPTIONS = mcpu=em/mcpu=arcem/mcpu=em4/mcpu=em4_dmips/mcpu=em4_fpus/mcpu=em4_fpuda/mcpu=hs/mcpu=archs/mcpu=hs34/mcpu=hs38/mcpu=hs38_linux/mcpu=arc600/mcpu=arc600_norm/mcpu=arc600_mul64/mcpu=arc600_mul32x16/mcpu=arc601/mcpu=arc601_norm/mcpu=arc601_mul64/mcpu=arc601_mul32x16/mcpu=arc700/mcpu=nps400\n+MULTILIB_OPTIONS = mcpu=em/mcpu=arcem/mcpu=em4/mcpu=em4_dmips/mcpu=em4_fpus/mcpu=em4_fpuda/mcpu=quarkse_em/mcpu=hs/mcpu=archs/mcpu=hs34/mcpu=hs38/mcpu=hs38_linux/mcpu=arc600/mcpu=arc600_norm/mcpu=arc600_mul64/mcpu=arc600_mul32x16/mcpu=arc601/mcpu=arc601_norm/mcpu=arc601_mul64/mcpu=arc601_mul32x16/mcpu=arc700/mcpu=nps400\n \n-MULTILIB_DIRNAMES = em arcem em4 em4_dmips em4_fpus em4_fpuda hs archs hs34 hs38 hs38_linux arc600 arc600_norm arc600_mul64 arc600_mul32x16 arc601 arc601_norm arc601_mul64 arc601_mul32x16 arc700 nps400\n+MULTILIB_DIRNAMES = em arcem em4 em4_dmips em4_fpus em4_fpuda quarkse_em hs archs hs34 hs38 hs38_linux arc600 arc600_norm arc600_mul64 arc600_mul32x16 arc601 arc601_norm arc601_mul64 arc601_mul32x16 arc700 nps400\n \n # Aliases:\n MULTILIB_MATCHES  = mcpu?arc600=mcpu?ARC600"}]}