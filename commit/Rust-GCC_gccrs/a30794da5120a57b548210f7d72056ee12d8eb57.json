{"sha": "a30794da5120a57b548210f7d72056ee12d8eb57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMwNzk0ZGE1MTIwYTU3YjU0ODIxMGY3ZDcyMDU2ZWUxMmQ4ZWI1Nw==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2003-10-31T20:46:26Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-10-31T20:46:26Z"}, "message": "2003-10-31  Andreas Jaeger  <aj@suse.de>,\n\n            Zack Weinberg  <zack@codesourcery.com>\n\n\n        * crtstuff.c (__register_frame_info, __register_frame_info_bases)\n        (__deregister_frame_info, __deregister_frame_info_bases):\n        Constify void * argument.\n        * unwind-dw2-fde.h (struct fde_vector):\n        Constify 'orig_data' and 'array' fields.\n        (__register_frame_info, __register_frame_info_bases)\n        (__deregister_frame_info, __deregister_frame_info_bases):\n        Constify void * argument.\n        (get_cie, next_fde, _Unwind_Find_FDE): Constify arguments,\n        return values, and casts of type fde *, struct dwarf_fde *,\n        and struct dwarf_cie *.\n        * unwind-dw2-fde.c (__register_frame_info, __register_frame_info_bases)\n        (__deregister_frame_info, __deregister_frame_info_bases):\n        Constify void * argument.\n        (get_cie_encoding, ): Constify struct dwarf_cie * argument.\n        (get_fde_encoding, fde_unencoded_compare, fde_single_encoding_compare)\n        (fde_mixed_encoding_compare, fde_compare_t, start_fde_sort, fde_insert)\n        fde_split, SWAP, frame_downheap, frame_heapsort)\n        (classify_object_over_fdes, add_fdes, linear_search_fdes,\n        binary_search_unencoded_fdes, binary_search_single_encoding_fdes,\n        binary_search_mixed_encoding_fdes, search_object, _Unwind_Find_FDE):\n        Constify arguments, local variables, return values, and casts\n        of type fde *, fde **, struct dwarf_fde *, and struct dwarf_cie *.\n        Use const pointer types in sizeof expressions, for clarity.\n        * unwind-dw2-fde-glibc.c\n        (_Unwind_find_registered_FDE, _Unwind_find_FDE): Constify return value.\n        (struct unw_eh_callback_data): Constify 'ret' field.\n\nCo-Authored-By: Zack Weinberg <zack@codesourcery.com>\n\nFrom-SVN: r73155", "tree": {"sha": "5fd6f522dcfa77a58cb609edfc8c646b1149826d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fd6f522dcfa77a58cb609edfc8c646b1149826d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a30794da5120a57b548210f7d72056ee12d8eb57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30794da5120a57b548210f7d72056ee12d8eb57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a30794da5120a57b548210f7d72056ee12d8eb57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30794da5120a57b548210f7d72056ee12d8eb57/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3dd79b90f3f6e8c5a49be3b4e21b59052167437", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3dd79b90f3f6e8c5a49be3b4e21b59052167437", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3dd79b90f3f6e8c5a49be3b4e21b59052167437"}], "stats": {"total": 162, "additions": 97, "deletions": 65}, "files": [{"sha": "e253ebe67d4fa8327e44e4ae7c5c91adee23175a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30794da5120a57b548210f7d72056ee12d8eb57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30794da5120a57b548210f7d72056ee12d8eb57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a30794da5120a57b548210f7d72056ee12d8eb57", "patch": "@@ -1,3 +1,35 @@\n+2003-10-31  Andreas Jaeger  <aj@suse.de>, \n+            Zack Weinberg  <zack@codesourcery.com>            \n+\n+\n+        * crtstuff.c (__register_frame_info, __register_frame_info_bases)\n+        (__deregister_frame_info, __deregister_frame_info_bases):\n+        Constify void * argument.\n+        * unwind-dw2-fde.h (struct fde_vector): \n+        Constify 'orig_data' and 'array' fields.\n+        (__register_frame_info, __register_frame_info_bases)\n+        (__deregister_frame_info, __deregister_frame_info_bases):\n+        Constify void * argument.\n+        (get_cie, next_fde, _Unwind_Find_FDE): Constify arguments,\n+        return values, and casts of type fde *, struct dwarf_fde *,\n+        and struct dwarf_cie *.\n+        * unwind-dw2-fde.c (__register_frame_info, __register_frame_info_bases)\n+        (__deregister_frame_info, __deregister_frame_info_bases):\n+        Constify void * argument.\n+        (get_cie_encoding, ): Constify struct dwarf_cie * argument.\n+        (get_fde_encoding, fde_unencoded_compare, fde_single_encoding_compare)\n+        (fde_mixed_encoding_compare, fde_compare_t, start_fde_sort, fde_insert)\n+        fde_split, SWAP, frame_downheap, frame_heapsort)\n+        (classify_object_over_fdes, add_fdes, linear_search_fdes,\n+        binary_search_unencoded_fdes, binary_search_single_encoding_fdes,\n+        binary_search_mixed_encoding_fdes, search_object, _Unwind_Find_FDE):\n+        Constify arguments, local variables, return values, and casts\n+        of type fde *, fde **, struct dwarf_fde *, and struct dwarf_cie *.\n+        Use const pointer types in sizeof expressions, for clarity.\n+        * unwind-dw2-fde-glibc.c \n+        (_Unwind_find_registered_FDE, _Unwind_find_FDE): Constify return value.\n+        (struct unw_eh_callback_data): Constify 'ret' field.\n+\n 2003-10-31  Fariborz Jahanian  <fjahanian@apple.com>\n \t    David Edelsohn  <edelsohn@gnu.org>\n "}, {"sha": "dd24b7375c89c21a15a7c65c9e51e62076360417", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30794da5120a57b548210f7d72056ee12d8eb57/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30794da5120a57b548210f7d72056ee12d8eb57/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=a30794da5120a57b548210f7d72056ee12d8eb57", "patch": "@@ -120,14 +120,14 @@ call_ ## FUNC (void)\t\t\t\t\t\\\n    \n /* References to __register_frame_info and __deregister_frame_info should\n    be weak in this file if at all possible.  */\n-extern void __register_frame_info (void *, struct object *)\n+extern void __register_frame_info (const void *, struct object *)\n \t\t\t\t  TARGET_ATTRIBUTE_WEAK;\n-extern void __register_frame_info_bases (void *, struct object *,\n+extern void __register_frame_info_bases (const void *, struct object *,\n \t\t\t\t\t void *, void *)\n \t\t\t\t  TARGET_ATTRIBUTE_WEAK;\n-extern void *__deregister_frame_info (void *)\n+extern void *__deregister_frame_info (const void *)\n \t\t\t\t     TARGET_ATTRIBUTE_WEAK;\n-extern void *__deregister_frame_info_bases (void *)\n+extern void *__deregister_frame_info_bases (const void *)\n \t\t\t\t     TARGET_ATTRIBUTE_WEAK;\n extern void __do_global_ctors_1 (void);\n "}, {"sha": "71fbf6144da45d9b7c3e968ad32566a7872c2586", "filename": "gcc/unwind-dw2-fde-glibc.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30794da5120a57b548210f7d72056ee12d8eb57/gcc%2Funwind-dw2-fde-glibc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30794da5120a57b548210f7d72056ee12d8eb57/gcc%2Funwind-dw2-fde-glibc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde-glibc.c?ref=a30794da5120a57b548210f7d72056ee12d8eb57", "patch": "@@ -52,7 +52,7 @@\n     && (__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2) \\\n \t|| (__GLIBC__ == 2 && __GLIBC_MINOR__ == 2 && defined(DT_CONFIG)))\n \n-static fde * _Unwind_Find_registered_FDE (void *pc, struct dwarf_eh_bases *bases);\n+static const fde * _Unwind_Find_registered_FDE (void *pc, struct dwarf_eh_bases *bases);\n \n #define _Unwind_Find_FDE _Unwind_Find_registered_FDE\n #include \"unwind-dw2-fde.c\"\n@@ -68,7 +68,7 @@ struct unw_eh_callback_data\n   void *tbase;\n   void *dbase;\n   void *func;\n-  fde *ret;\n+  const fde *ret;\n };\n \n struct unw_eh_frame_hdr\n@@ -261,11 +261,11 @@ _Unwind_IteratePhdrCallback (struct dl_phdr_info *info, size_t size, void *ptr)\n   return 1;\n }\n \n-fde *\n+const fde *\n _Unwind_Find_FDE (void *pc, struct dwarf_eh_bases *bases)\n {\n   struct unw_eh_callback_data data;\n-  fde *ret;\n+  const fde *ret;\n \n   ret = _Unwind_Find_registered_FDE (pc, bases);\n   if (ret != NULL)"}, {"sha": "74e64e5eb80038cf45f1ea8de5ffd1ac50f11e01", "filename": "gcc/unwind-dw2-fde.c", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30794da5120a57b548210f7d72056ee12d8eb57/gcc%2Funwind-dw2-fde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30794da5120a57b548210f7d72056ee12d8eb57/gcc%2Funwind-dw2-fde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde.c?ref=a30794da5120a57b548210f7d72056ee12d8eb57", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines needed for unwinding stack frames for exception handling.  */\n-/* Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+/* Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Jason Merrill <jason@cygnus.com>.\n \n This file is part of GCC.\n@@ -74,7 +74,7 @@ init_object_mutex_once (void)\n /* Called from crtbegin.o to register the unwind info for an object.  */\n \n void\n-__register_frame_info_bases (void *begin, struct object *ob,\n+__register_frame_info_bases (const void *begin, struct object *ob,\n \t\t\t     void *tbase, void *dbase)\n {\n   /* If .eh_frame is empty, don't register at all.  */\n@@ -101,7 +101,7 @@ __register_frame_info_bases (void *begin, struct object *ob,\n }\n \n void\n-__register_frame_info (void *begin, struct object *ob)\n+__register_frame_info (const void *begin, struct object *ob)\n {\n   __register_frame_info_bases (begin, ob, 0, 0);\n }\n@@ -170,7 +170,7 @@ __register_frame_table (void *begin)\n    implements __register_frame_info_bases.  */\n \n void *\n-__deregister_frame_info_bases (void *begin)\n+__deregister_frame_info_bases (const void *begin)\n {\n   struct object **p;\n   struct object *ob = 0;\n@@ -220,7 +220,7 @@ __deregister_frame_info_bases (void *begin)\n }\n \n void *\n-__deregister_frame_info (void *begin)\n+__deregister_frame_info (const void *begin)\n {\n   return __deregister_frame_info_bases (begin);\n }\n@@ -262,7 +262,7 @@ base_from_object (unsigned char encoding, struct object *ob)\n /* ??? This is a subset of extract_cie_info from unwind-dw2.c.  */\n \n static int\n-get_cie_encoding (struct dwarf_cie *cie)\n+get_cie_encoding (const struct dwarf_cie *cie)\n {\n   const unsigned char *aug, *p;\n   _Unwind_Ptr dummy;\n@@ -304,7 +304,7 @@ get_cie_encoding (struct dwarf_cie *cie)\n }\n \n static inline int\n-get_fde_encoding (struct dwarf_fde *f)\n+get_fde_encoding (const struct dwarf_fde *f)\n {\n   return get_cie_encoding (get_cie (f));\n }\n@@ -318,7 +318,7 @@ get_fde_encoding (struct dwarf_fde *f)\n \n static int\n fde_unencoded_compare (struct object *ob __attribute__((unused)),\n-\t\t       fde *x, fde *y)\n+\t\t       const fde *x, const fde *y)\n {\n   _Unwind_Ptr x_ptr = *(_Unwind_Ptr *) x->pc_begin;\n   _Unwind_Ptr y_ptr = *(_Unwind_Ptr *) y->pc_begin;\n@@ -331,7 +331,7 @@ fde_unencoded_compare (struct object *ob __attribute__((unused)),\n }\n \n static int\n-fde_single_encoding_compare (struct object *ob, fde *x, fde *y)\n+fde_single_encoding_compare (struct object *ob, const fde *x, const fde *y)\n {\n   _Unwind_Ptr base, x_ptr, y_ptr;\n \n@@ -347,7 +347,7 @@ fde_single_encoding_compare (struct object *ob, fde *x, fde *y)\n }\n \n static int\n-fde_mixed_encoding_compare (struct object *ob, fde *x, fde *y)\n+fde_mixed_encoding_compare (struct object *ob, const fde *x, const fde *y)\n {\n   int x_encoding, y_encoding;\n   _Unwind_Ptr x_ptr, y_ptr;\n@@ -367,7 +367,7 @@ fde_mixed_encoding_compare (struct object *ob, fde *x, fde *y)\n   return 0;\n }\n \n-typedef int (*fde_compare_t) (struct object *, fde *, fde *);\n+typedef int (*fde_compare_t) (struct object *, const fde *, const fde *);\n \n \n /* This is a special mix of insertion sort and heap sort, optimized for\n@@ -394,7 +394,7 @@ start_fde_sort (struct fde_accumulator *accu, size_t count)\n   if (! count)\n     return 0;\n \n-  size = sizeof (struct fde_vector) + sizeof (fde *) * count;\n+  size = sizeof (struct fde_vector) + sizeof (const fde *) * count;\n   if ((accu->linear = malloc (size)))\n     {\n       accu->linear->count = 0;\n@@ -407,7 +407,7 @@ start_fde_sort (struct fde_accumulator *accu, size_t count)\n }\n \n static inline void\n-fde_insert (struct fde_accumulator *accu, fde *this_fde)\n+fde_insert (struct fde_accumulator *accu, const fde *this_fde)\n {\n   if (accu->linear)\n     accu->linear->array[accu->linear->count++] = this_fde;\n@@ -429,29 +429,29 @@ static inline void\n fde_split (struct object *ob, fde_compare_t fde_compare,\n \t   struct fde_vector *linear, struct fde_vector *erratic)\n {\n-  static fde *marker;\n+  static const fde *marker;\n   size_t count = linear->count;\n-  fde **chain_end = &marker;\n+  const fde **chain_end = &marker;\n   size_t i, j, k;\n \n   /* This should optimize out, but it is wise to make sure this assumption\n      is correct. Should these have different sizes, we cannot cast between\n      them and the overlaying onto ERRATIC will not work.  */\n-  if (sizeof (fde *) != sizeof (fde **))\n+  if (sizeof (const fde *) != sizeof (const fde **))\n     abort ();\n \n   for (i = 0; i < count; i++)\n     {\n-      fde **probe;\n+      const fde **probe;\n \n       for (probe = chain_end;\n \t   probe != &marker && fde_compare (ob, linear->array[i], *probe) < 0;\n \t   probe = chain_end)\n \t{\n-\t  chain_end = (fde **) erratic->array[probe - linear->array];\n+\t  chain_end = (const fde **) erratic->array[probe - linear->array];\n \t  erratic->array[probe - linear->array] = NULL;\n \t}\n-      erratic->array[i] = (fde *) chain_end;\n+      erratic->array[i] = (const fde *) chain_end;\n       chain_end = &linear->array[i];\n     }\n \n@@ -467,13 +467,13 @@ fde_split (struct object *ob, fde_compare_t fde_compare,\n   erratic->count = k;\n }\n \n-#define SWAP(x,y) do { fde * tmp = x; x = y; y = tmp; } while (0)\n+#define SWAP(x,y) do { const fde * tmp = x; x = y; y = tmp; } while (0)\n \n /* Convert a semi-heap to a heap.  A semi-heap is a heap except possibly\n    for the first (root) node; push it down to its rightful place.  */\n \n static void\n-frame_downheap (struct object *ob, fde_compare_t fde_compare, fde **a,\n+frame_downheap (struct object *ob, fde_compare_t fde_compare, const fde **a,\n \t\tint lo, int hi)\n {\n   int i, j;\n@@ -505,7 +505,7 @@ frame_heapsort (struct object *ob, fde_compare_t fde_compare,\n   /* For a description of this algorithm, see:\n      Samuel P. Harbison, Guy L. Steele Jr.: C, a reference manual, 2nd ed.,\n      p. 60-61.  */\n-  fde ** a = erratic->array;\n+  const fde ** a = erratic->array;\n   /* A portion of the array is called a \"heap\" if for all i>=0:\n      If i and 2i+1 are valid indices, then a[i] >= a[2i+1].\n      If i and 2i+2 are valid indices, then a[i] >= a[2i+2].  */\n@@ -535,7 +535,7 @@ fde_merge (struct object *ob, fde_compare_t fde_compare,\n \t   struct fde_vector *v1, struct fde_vector *v2)\n {\n   size_t i1, i2;\n-  fde * fde2;\n+  const fde * fde2;\n \n   i2 = v2->count;\n   if (i2 > 0)\n@@ -595,16 +595,16 @@ end_fde_sort (struct object *ob, struct fde_accumulator *accu, size_t count)\n    encountered along the way.  */\n \n static size_t\n-classify_object_over_fdes (struct object *ob, fde *this_fde)\n+classify_object_over_fdes (struct object *ob, const fde *this_fde)\n {\n-  struct dwarf_cie *last_cie = 0;\n+  const struct dwarf_cie *last_cie = 0;\n   size_t count = 0;\n   int encoding = DW_EH_PE_absptr;\n   _Unwind_Ptr base = 0;\n \n   for (; ! last_fde (ob, this_fde); this_fde = next_fde (this_fde))\n     {\n-      struct dwarf_cie *this_cie;\n+      const struct dwarf_cie *this_cie;\n       _Unwind_Ptr mask, pc_begin;\n \n       /* Skip CIEs.  */\n@@ -650,15 +650,15 @@ classify_object_over_fdes (struct object *ob, fde *this_fde)\n }\n \n static void\n-add_fdes (struct object *ob, struct fde_accumulator *accu, fde *this_fde)\n+add_fdes (struct object *ob, struct fde_accumulator *accu, const fde *this_fde)\n {\n-  struct dwarf_cie *last_cie = 0;\n+  const struct dwarf_cie *last_cie = 0;\n   int encoding = ob->s.b.encoding;\n   _Unwind_Ptr base = base_from_object (ob->s.b.encoding, ob);\n \n   for (; ! last_fde (ob, this_fde); this_fde = next_fde (this_fde))\n     {\n-      struct dwarf_cie *this_cie;\n+      const struct dwarf_cie *this_cie;\n \n       /* Skip CIEs.  */\n       if (this_fde->CIE_delta == 0)\n@@ -766,16 +766,16 @@ init_object (struct object* ob)\n    used when there was insufficient memory to allocate and sort an\n    array.  */\n \n-static fde *\n-linear_search_fdes (struct object *ob, fde *this_fde, void *pc)\n+static const fde *\n+linear_search_fdes (struct object *ob, const fde *this_fde, void *pc)\n {\n-  struct dwarf_cie *last_cie = 0;\n+  const struct dwarf_cie *last_cie = 0;\n   int encoding = ob->s.b.encoding;\n   _Unwind_Ptr base = base_from_object (ob->s.b.encoding, ob);\n \n   for (; ! last_fde (ob, this_fde); this_fde = next_fde (this_fde))\n     {\n-      struct dwarf_cie *this_cie;\n+      const struct dwarf_cie *this_cie;\n       _Unwind_Ptr pc_begin, pc_range;\n \n       /* Skip CIEs.  */\n@@ -835,7 +835,7 @@ linear_search_fdes (struct object *ob, fde *this_fde, void *pc)\n /* Binary search for an FDE containing the given PC.  Here are three\n    implementations of increasing complexity.  */\n \n-static inline fde *\n+static inline const fde *\n binary_search_unencoded_fdes (struct object *ob, void *pc)\n {\n   struct fde_vector *vec = ob->u.sort;\n@@ -844,7 +844,7 @@ binary_search_unencoded_fdes (struct object *ob, void *pc)\n   for (lo = 0, hi = vec->count; lo < hi; )\n     {\n       size_t i = (lo + hi) / 2;\n-      fde *f = vec->array[i];\n+      const fde *f = vec->array[i];\n       void *pc_begin;\n       uaddr pc_range;\n \n@@ -862,7 +862,7 @@ binary_search_unencoded_fdes (struct object *ob, void *pc)\n   return NULL;\n }\n \n-static inline fde *\n+static inline const fde *\n binary_search_single_encoding_fdes (struct object *ob, void *pc)\n {\n   struct fde_vector *vec = ob->u.sort;\n@@ -873,7 +873,7 @@ binary_search_single_encoding_fdes (struct object *ob, void *pc)\n   for (lo = 0, hi = vec->count; lo < hi; )\n     {\n       size_t i = (lo + hi) / 2;\n-      fde *f = vec->array[i];\n+      const fde *f = vec->array[i];\n       _Unwind_Ptr pc_begin, pc_range;\n       const char *p;\n \n@@ -892,7 +892,7 @@ binary_search_single_encoding_fdes (struct object *ob, void *pc)\n   return NULL;\n }\n \n-static inline fde *\n+static inline const fde *\n binary_search_mixed_encoding_fdes (struct object *ob, void *pc)\n {\n   struct fde_vector *vec = ob->u.sort;\n@@ -901,7 +901,7 @@ binary_search_mixed_encoding_fdes (struct object *ob, void *pc)\n   for (lo = 0, hi = vec->count; lo < hi; )\n     {\n       size_t i = (lo + hi) / 2;\n-      fde *f = vec->array[i];\n+      const fde *f = vec->array[i];\n       _Unwind_Ptr pc_begin, pc_range;\n       const char *p;\n       int encoding;\n@@ -923,7 +923,7 @@ binary_search_mixed_encoding_fdes (struct object *ob, void *pc)\n   return NULL;\n }\n \n-static fde *\n+static const fde *\n search_object (struct object* ob, void *pc)\n {\n   /* If the data hasn't been sorted, try to do this now.  We may have\n@@ -956,7 +956,7 @@ search_object (struct object* ob, void *pc)\n \t  fde **p;\n \t  for (p = ob->u.array; *p ; p++)\n \t    {\n-\t      fde *f = linear_search_fdes (ob, *p, pc);\n+\t      const fde *f = linear_search_fdes (ob, *p, pc);\n \t      if (f)\n \t\treturn f;\n \t    }\n@@ -967,11 +967,11 @@ search_object (struct object* ob, void *pc)\n     }\n }\n \n-fde *\n+const fde *\n _Unwind_Find_FDE (void *pc, struct dwarf_eh_bases *bases)\n {\n   struct object *ob;\n-  fde *f = NULL;\n+  const fde *f = NULL;\n \n   init_object_mutex_once ();\n   __gthread_mutex_lock (&object_mutex);"}, {"sha": "1eb6172a628c6aebfc7d2b21eea35fa52654c3a2", "filename": "gcc/unwind-dw2-fde.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30794da5120a57b548210f7d72056ee12d8eb57/gcc%2Funwind-dw2-fde.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30794da5120a57b548210f7d72056ee12d8eb57/gcc%2Funwind-dw2-fde.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde.h?ref=a30794da5120a57b548210f7d72056ee12d8eb57", "patch": "@@ -32,9 +32,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n struct fde_vector\n {\n-  void *orig_data;\n+  const void *orig_data;\n   size_t count;\n-  struct dwarf_fde *array[];\n+  const struct dwarf_fde *array[];\n };\n \n struct object\n@@ -43,7 +43,7 @@ struct object\n   void *tbase;\n   void *dbase;\n   union {\n-    struct dwarf_fde *single;\n+    const struct dwarf_fde *single;\n     struct dwarf_fde **array;\n     struct fde_vector *sort;\n   } u;\n@@ -90,16 +90,16 @@ struct dwarf_eh_bases\n };\n \n \n-extern void __register_frame_info_bases (void *, struct object *,\n+extern void __register_frame_info_bases (const void *, struct object *,\n \t\t\t\t\t void *, void *);\n-extern void __register_frame_info (void *, struct object *);\n+extern void __register_frame_info (const void *, struct object *);\n extern void __register_frame (void *);\n extern void __register_frame_info_table_bases (void *, struct object *,\n \t\t\t\t\t       void *, void *);\n extern void __register_frame_info_table (void *, struct object *);\n extern void __register_frame_table (void *);\n-extern void *__deregister_frame_info (void *);\n-extern void *__deregister_frame_info_bases (void *);\n+extern void *__deregister_frame_info (const void *);\n+extern void *__deregister_frame_info_bases (const void *);\n extern void __deregister_frame (void *);\n \n \f\n@@ -151,22 +151,22 @@ typedef struct dwarf_fde fde;\n \n /* Locate the CIE for a given FDE.  */\n \n-static inline struct dwarf_cie *\n-get_cie (struct dwarf_fde *f)\n+static inline const struct dwarf_cie *\n+get_cie (const struct dwarf_fde *f)\n {\n   return (void *)&f->CIE_delta - f->CIE_delta;\n }\n \n-static inline fde *\n-next_fde (fde *f)\n+static inline const fde *\n+next_fde (const fde *f)\n {\n-  return (fde *) ((char *) f + f->length + sizeof (f->length));\n+  return (const fde *) ((char *) f + f->length + sizeof (f->length));\n }\n \n-extern fde * _Unwind_Find_FDE (void *, struct dwarf_eh_bases *);\n+extern const fde * _Unwind_Find_FDE (void *, struct dwarf_eh_bases *);\n \n static inline int\n-last_fde (struct object *obj __attribute__ ((__unused__)), fde *f)\n+last_fde (struct object *obj __attribute__ ((__unused__)), const fde *f)\n {\n #ifdef DWARF2_OBJECT_END_PTR_EXTENSION\n   return (char *)f == obj->fde_end || f->length == 0;"}]}