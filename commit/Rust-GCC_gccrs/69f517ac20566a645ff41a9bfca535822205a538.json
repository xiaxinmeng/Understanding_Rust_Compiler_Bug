{"sha": "69f517ac20566a645ff41a9bfca535822205a538", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlmNTE3YWMyMDU2NmE2NDVmZjQxYTliZmNhNTM1ODIyMjA1YTUzOA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-03T13:37:11Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-03T13:37:11Z"}, "message": "c++: using-enum and access specifiers [PR100862]\n\nWhen copying the enumerators imported by a class-scope using-enum\ndeclaration, we need to override current_access_specifier so that\nfinish_member_declaration gives the copies the same access as the\nusing-enum decl.  (A class-scope using-enum is processed late, so\ncurrent_access_specifier at this point is otherwise set to the last\naccess specifier within the class.)  To that end, this patch makes\nhandle_using_decl call set_current_access_from_decl accordingly.\n\nFor consistency, this patch makes build_enumerator use\nset_current_access_from_decl too.\n\n\tPR c++/100862\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (set_current_access_from_decl): Move to ...\n\t* class.c (set_current_access_from_decl): ... here.\n\t(handle_using_decl): Use it to propagate the access of the\n\tusing-enum decl to the copy of the imported enumerator.\n\t* cp-tree.h (set_current_access_from_decl): Declare.\n\t* decl.c (build_enumerator): Simplify using make_temp_override\n\tand set_current_access_from_decl.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/using-enum-9.C: New test.", "tree": {"sha": "2875107dbf5de313799318d11e5d0f1c1f3da5f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2875107dbf5de313799318d11e5d0f1c1f3da5f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69f517ac20566a645ff41a9bfca535822205a538", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f517ac20566a645ff41a9bfca535822205a538", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69f517ac20566a645ff41a9bfca535822205a538", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f517ac20566a645ff41a9bfca535822205a538/comments", "author": null, "committer": null, "parents": [{"sha": "7ed1cd9665d8ca0fa07b2483e604c25e704584af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ed1cd9665d8ca0fa07b2483e604c25e704584af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ed1cd9665d8ca0fa07b2483e604c25e704584af"}], "stats": {"total": 70, "additions": 46, "deletions": 24}, "files": [{"sha": "b53a4dbdd4eb9b2e768160830f5eb575094c1846", "filename": "gcc/cp/class.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f517ac20566a645ff41a9bfca535822205a538/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f517ac20566a645ff41a9bfca535822205a538/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=69f517ac20566a645ff41a9bfca535822205a538", "patch": "@@ -207,6 +207,19 @@ static bool type_maybe_constexpr_default_constructor (tree);\n static bool type_maybe_constexpr_destructor (tree);\n static bool field_poverlapping_p (tree);\n \n+/* Set CURRENT_ACCESS_SPECIFIER based on the protection of DECL.  */\n+\n+void\n+set_current_access_from_decl (tree decl)\n+{\n+  if (TREE_PRIVATE (decl))\n+    current_access_specifier = access_private_node;\n+  else if (TREE_PROTECTED (decl))\n+    current_access_specifier = access_protected_node;\n+  else\n+    current_access_specifier = access_public_node;\n+}\n+\n /* Return a COND_EXPR that executes TRUE_STMT if this execution of the\n    'structor is in charge of 'structing virtual bases, or FALSE_STMT\n    otherwise.  */\n@@ -1359,6 +1372,8 @@ handle_using_decl (tree using_decl, tree t)\n \t CONST_DECL_USING_P is true.  */\n       gcc_assert (TREE_CODE (decl) == CONST_DECL);\n \n+      auto cas = make_temp_override (current_access_specifier);\n+      set_current_access_from_decl (using_decl);\n       tree copy = copy_decl (decl);\n       DECL_CONTEXT (copy) = t;\n       DECL_ARTIFICIAL (copy) = true;"}, {"sha": "b1b7e615bcc3beb03e5ce7e2b3a57f14a7673277", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f517ac20566a645ff41a9bfca535822205a538/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f517ac20566a645ff41a9bfca535822205a538/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=69f517ac20566a645ff41a9bfca535822205a538", "patch": "@@ -8186,6 +8186,7 @@ struct atom_hasher : default_hash_traits<tree>\n extern bool subsumes                            (tree, tree);\n \n /* In class.c */\n+extern void set_current_access_from_decl (tree);\n extern void cp_finish_injected_record_type (tree);\n \n /* in vtable-class-hierarchy.c */"}, {"sha": "fb21a3a1ae8013a26435b7d2eec7b11097ccf464", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f517ac20566a645ff41a9bfca535822205a538/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f517ac20566a645ff41a9bfca535822205a538/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=69f517ac20566a645ff41a9bfca535822205a538", "patch": "@@ -16333,17 +16333,9 @@ incremented enumerator value is too large for %<long%>\"));\n \n \t For which case we need to make sure that the access of `S::i'\n \t matches the access of `S::E'.  */\n-      tree saved_cas = current_access_specifier;\n-      if (TREE_PRIVATE (TYPE_NAME (enumtype)))\n-\tcurrent_access_specifier = access_private_node;\n-      else if (TREE_PROTECTED (TYPE_NAME (enumtype)))\n-\tcurrent_access_specifier = access_protected_node;\n-      else\n-\tcurrent_access_specifier = access_public_node;\n-\n+      auto cas = make_temp_override (current_access_specifier);\n+      set_current_access_from_decl (TYPE_NAME (enumtype));\n       finish_member_declaration (decl);\n-\n-      current_access_specifier = saved_cas;\n     }\n   else\n     pushdecl (decl);"}, {"sha": "7211bdc5bbc776e8192f2a246853b7739560740a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f517ac20566a645ff41a9bfca535822205a538/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f517ac20566a645ff41a9bfca535822205a538/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=69f517ac20566a645ff41a9bfca535822205a538", "patch": "@@ -190,7 +190,6 @@ static tree tsubst_arg_types (tree, tree, tree, tsubst_flags_t, tree);\n static tree tsubst_function_type (tree, tree, tsubst_flags_t, tree);\n static bool check_specialization_scope (void);\n static tree process_partial_specialization (tree);\n-static void set_current_access_from_decl (tree);\n static enum template_base_result get_template_base (tree, tree, tree, tree,\n \t\t\t\t\t\t    bool , tree *);\n static tree try_class_unification (tree, tree, tree, tree, bool);\n@@ -26432,19 +26431,6 @@ tsubst_initializer_list (tree t, tree argvec)\n   return inits;\n }\n \n-/* Set CURRENT_ACCESS_SPECIFIER based on the protection of DECL.  */\n-\n-static void\n-set_current_access_from_decl (tree decl)\n-{\n-  if (TREE_PRIVATE (decl))\n-    current_access_specifier = access_private_node;\n-  else if (TREE_PROTECTED (decl))\n-    current_access_specifier = access_protected_node;\n-  else\n-    current_access_specifier = access_public_node;\n-}\n-\n /* Instantiate an enumerated type.  TAG is the template type, NEWTAG\n    is the instantiation (which should have been created with\n    start_enum) and ARGS are the template arguments to use.  */"}, {"sha": "3e026057b4088201cee5b1b48281aec90d379654", "filename": "gcc/testsuite/g++.dg/cpp2a/using-enum-9.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f517ac20566a645ff41a9bfca535822205a538/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fusing-enum-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f517ac20566a645ff41a9bfca535822205a538/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fusing-enum-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fusing-enum-9.C?ref=69f517ac20566a645ff41a9bfca535822205a538", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/100862\n+// { dg-do compile { target c++20 } }\n+\n+enum class fruit { orange, apple };\n+\n+struct A {\n+public:\n+  using enum fruit;\n+private:\n+};\n+\n+struct B {\n+protected:\n+  using enum fruit;\n+public:\n+};\n+\n+struct C {\n+private:\n+  using enum fruit;\n+public:\n+};\n+\n+int main() {\n+  A::orange, A::apple;\n+  B::orange, B::apple; // { dg-error \"protected\" }\n+  C::orange, C::apple; // { dg-error \"private\" }\n+}"}]}