{"sha": "1e59a3f81a026c83fdafd3f2746faa62c89f9cde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU1OWEzZjgxYTAyNmM4M2ZkYWZkM2YyNzQ2ZmFhNjJjODlmOWNkZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-09-02T17:45:35Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-09-02T17:45:35Z"}, "message": "(handle_pragma_token): Delete.\n\nFrom-SVN: r2034", "tree": {"sha": "2a647eebf77dc3fcf408bbafadfa19627e90652c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a647eebf77dc3fcf408bbafadfa19627e90652c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e59a3f81a026c83fdafd3f2746faa62c89f9cde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e59a3f81a026c83fdafd3f2746faa62c89f9cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e59a3f81a026c83fdafd3f2746faa62c89f9cde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e59a3f81a026c83fdafd3f2746faa62c89f9cde/comments", "author": null, "committer": null, "parents": [{"sha": "743ff6783aeb785414322afd234392d06e16fe19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/743ff6783aeb785414322afd234392d06e16fe19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/743ff6783aeb785414322afd234392d06e16fe19"}], "stats": {"total": 109, "additions": 0, "deletions": 109}, "files": [{"sha": "cfd50648f0d2d0dd6ba292b27ffde374976d97fb", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 0, "deletions": 109, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e59a3f81a026c83fdafd3f2746faa62c89f9cde/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e59a3f81a026c83fdafd3f2746faa62c89f9cde/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=1e59a3f81a026c83fdafd3f2746faa62c89f9cde", "patch": "@@ -3031,115 +3031,6 @@ sparc_type_code (type)\n     }\n }\n \f\n-#if defined(HANDLE_PRAGMA) && !defined(HANDLE_SYSV_PRAGMA)\n-\n-/* Handle a pragma directive.  HANDLE_PRAGMA conspires to parse the\n-   input following #pragma into tokens based on yylex.  TOKEN is the\n-   current token, and STRING is its printable form.  */\n-\n-void\n-handle_pragma_token (string, token)\n-     char *string;\n-     tree token;\n-{\n-  static enum pragma_state\n-    {\n-      ps_start,\n-      ps_done,\n-      ps_bad,\n-      ps_weak,\n-      ps_name,\n-      ps_equals,\n-      ps_value,\n-      } state = ps_start, type;\n-  static char *name;\n-  static char *value;\n-  static int align;\n-\n-  if (string == 0)\n-    {\n-#ifdef WEAK_ASM_OP\n-      if (type == ps_weak)\n-\t{\n-\t  if (state == ps_name || state == ps_value)\n-\t    {\n-\t      fprintf (asm_out_file, \"\\t%s\\t\", WEAK_ASM_OP);\n-\t      ASM_OUTPUT_LABELREF (asm_out_file, name);\n-\t      fputc ('\\n', asm_out_file);\n-\t      if (state == ps_value)\n-\t\t{\n-\t\t  fputc ('\\t', asm_out_file);\n-\t\t  ASM_OUTPUT_LABELREF (asm_out_file, name);\n-\t\t  fputs (\" = \", asm_out_file);\n-\t\t  ASM_OUTPUT_LABELREF (asm_out_file, value);\n-\t\t  fputc ('\\n', asm_out_file);\n-\t\t}\n-\t    }\n-\t  else if (! (state == ps_done || state == ps_start))\n-\t    warning (\"ignoring malformed #pragma weak symbol [=value]\");\n-\t}\n-#endif /* WEAK_ASM_OP */\n-\n-      type = state = ps_start;\n-      return;\n-    }\n-\n-  switch (state)\n-    {\n-    case ps_start:\n-      if (token && TREE_CODE (token) == IDENTIFIER_NODE)\n-\t{\n-#ifdef WEAK_ASM_OP\n-\t  if (strcmp (IDENTIFIER_POINTER (token), \"weak\") == 0)\n-\t    type = state = ps_weak;\n-\t  else\n-#endif\n-\t    type = state = ps_done;\n-\t}\n-      else\n-\ttype = state = ps_done;\n-      break;\n-\n-#ifdef WEAK_ASM_OP\n-    case ps_weak:\n-      if (token && TREE_CODE (token) == IDENTIFIER_NODE)\n-\t{\n-\t  name = IDENTIFIER_POINTER (token);\n-\t  state = ps_name;\n-\t}\n-      else\n-\tstate = ps_bad;\n-      break;\n-\n-    case ps_name:\n-      state = (strcmp (string, \"=\") ? ps_bad : ps_equals);\n-      break;\n-\n-    case ps_equals:\n-      if (token && TREE_CODE (token) == IDENTIFIER_NODE)\n-\t{\n-\t  value = IDENTIFIER_POINTER (token);\n-\t  state = ps_value;\n-\t}\n-      else\n-\tstate = ps_bad;\n-      break;\n-\n-    case ps_value:\n-      state = ps_bad;\n-      break;\n-#endif /* WEAK_ASM_OP */\n-\n-    case ps_bad:\n-    case ps_done:\n-      break;\n-\n-    default:\n-      abort ();\n-    }\n-}\n-#endif /* HANDLE_PRAGMA && not HANDLE_SYSV_PRAGMA */\n-\f\n /* Subroutines to support a flat (single) register window calling\n    convention.  */\n "}]}