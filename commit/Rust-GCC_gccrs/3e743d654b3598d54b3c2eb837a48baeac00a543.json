{"sha": "3e743d654b3598d54b3c2eb837a48baeac00a543", "node_id": "C_kwDOANBUbNoAKDNlNzQzZDY1NGIzNTk4ZDU0YjNjMmViODM3YTQ4YmFlYWMwMGE1NDM", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-03-07T14:57:11Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-03-10T11:19:48Z"}, "message": "[nvptx] Handle unused result in nvptx_unisimt_handle_set\n\nFor an example:\n...\n  #pragma omp target map(tofrom: counter_N0)\n  #pragma omp simd\n  for (int i = 0 ; i < 1 ; i++ )\n    {\n      #pragma omp atomic update\n      counter_N0 = counter_N0 + 1 ;\n    }\n...\nI noticed that the result of the atomic update (%r30) is propagated:\n...\n  @%r33 atom.add.u32\t\t_, [%r29], 1;\n\tshfl.sync.idx.b32\t%r30, %r30, %r32, 31, 0xffffffff;\n...\neven though it is unused (which is why the bit bucket operand _ is used).\n\nFix this by not emitting the shuffle in this case, such that we have instead:\n...\n  @%r33 atom.add.u32\t_, [%r29], 1;\n\tbar.warp.sync\t0xffffffff;\n...\n\nTested on nvptx.\n\ngcc/ChangeLog:\n\n2022-03-07  Tom de Vries  <tdevries@suse.de>\n\n\t* config/nvptx/nvptx.cc (nvptx_unisimt_handle_set): Handle unused\n\tresult.\n\ngcc/testsuite/ChangeLog:\n\n2022-03-07  Tom de Vries  <tdevries@suse.de>\n\n\t* gcc.target/nvptx/uniform-simt-4.c: New test.", "tree": {"sha": "337af04dfe31f915582c85938f944a65eb97ea23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/337af04dfe31f915582c85938f944a65eb97ea23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e743d654b3598d54b3c2eb837a48baeac00a543", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e743d654b3598d54b3c2eb837a48baeac00a543", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e743d654b3598d54b3c2eb837a48baeac00a543", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e743d654b3598d54b3c2eb837a48baeac00a543/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ebcc053a4bd32973762b671b444730baf558805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebcc053a4bd32973762b671b444730baf558805", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ebcc053a4bd32973762b671b444730baf558805"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "c41e305a34fb2c8b2535b30581ac8f9ebaaf0516", "filename": "gcc/config/nvptx/nvptx.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e743d654b3598d54b3c2eb837a48baeac00a543/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e743d654b3598d54b3c2eb837a48baeac00a543/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc?ref=3e743d654b3598d54b3c2eb837a48baeac00a543", "patch": "@@ -3274,7 +3274,9 @@ static bool\n nvptx_unisimt_handle_set (rtx set, rtx_insn *insn, rtx master)\n {\n   rtx reg;\n-  if (GET_CODE (set) == SET && REG_P (reg = SET_DEST (set)))\n+  if (GET_CODE (set) == SET\n+      && REG_P (reg = SET_DEST (set))\n+      && find_reg_note (insn, REG_UNUSED, reg) == NULL_RTX)\n     {\n       emit_insn_after (nvptx_gen_shuffle (reg, reg, master, SHUFFLE_IDX),\n \t\t       insn);"}, {"sha": "c33de7a41112cfaee50fe218dbccd34cf94d572b", "filename": "gcc/testsuite/gcc.target/nvptx/uniform-simt-4.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e743d654b3598d54b3c2eb837a48baeac00a543/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funiform-simt-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e743d654b3598d54b3c2eb837a48baeac00a543/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funiform-simt-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funiform-simt-4.c?ref=3e743d654b3598d54b3c2eb837a48baeac00a543", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -muniform-simt -mptx=_\" } */\n+\n+enum memmodel\n+{\n+  MEMMODEL_RELAXED = 0\n+};\n+\n+unsigned long long int *p64;\n+unsigned long long int v64;\n+\n+int\n+main()\n+{\n+  __atomic_fetch_add (p64, v64, MEMMODEL_RELAXED);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"atom.add.u64\\[\\t \\]+_,\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bar.warp.sync\" 1 } } */\n+/* { dg-final { scan-assembler-not \"shfl.sync.idx\" } } */"}]}