{"sha": "62c99ce47506cfa0d451e96722614cc786497cda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJjOTljZTQ3NTA2Y2ZhMGQ0NTFlOTY3MjI2MTRjYzc4NjQ5N2NkYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-07-06T22:13:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-07-06T22:13:51Z"}, "message": "vmi_class_type_info.cc (__do_dyncast): Use src2dst hint to defer searching bases that don't overlap the desired address.\n\n\t* libsupc++/vmi_class_type_info.cc (__do_dyncast): Use src2dst hint\n\tto defer searching bases that don't overlap the desired address.\n\nFrom-SVN: r149297", "tree": {"sha": "432036f472304641038076640d60f211c0be7e45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/432036f472304641038076640d60f211c0be7e45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62c99ce47506cfa0d451e96722614cc786497cda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c99ce47506cfa0d451e96722614cc786497cda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62c99ce47506cfa0d451e96722614cc786497cda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c99ce47506cfa0d451e96722614cc786497cda/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e90e6bd7377e37334a4bc1ce17278025e760ec09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90e6bd7377e37334a4bc1ce17278025e760ec09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e90e6bd7377e37334a4bc1ce17278025e760ec09"}], "stats": {"total": 164, "additions": 163, "deletions": 1}, "files": [{"sha": "3a975039a4719d8568720a3c96c8636fcbb44f5c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c99ce47506cfa0d451e96722614cc786497cda/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c99ce47506cfa0d451e96722614cc786497cda/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62c99ce47506cfa0d451e96722614cc786497cda", "patch": "@@ -1,3 +1,7 @@\n+2009-07-06  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/rtti/dyncast[34].C: New.\n+\n 2009-07-06  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* lib/target-supports.exp"}, {"sha": "08352599bda8745a5955f6dab549f287e8278b62", "filename": "gcc/testsuite/g++.dg/rtti/dyncast3.C", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c99ce47506cfa0d451e96722614cc786497cda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fdyncast3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c99ce47506cfa0d451e96722614cc786497cda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fdyncast3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fdyncast3.C?ref=62c99ce47506cfa0d451e96722614cc786497cda", "patch": "@@ -0,0 +1,81 @@\n+// This testcase used to crash while looking in A for my_module.  I'm still\n+// not sure it's well-formed, but it works now because of the optimization\n+// to look at the expected address first.\n+\n+// { dg-do run }\n+\n+extern \"C\" int puts (const char *);\n+extern \"C\" void abort ();\n+\n+struct my_object\n+{\n+  my_object() { puts (\"in my_object ctor\");}\n+  virtual ~my_object() { puts (\"in my_object dtor\"); }\n+};\n+\n+my_object* my_module_ptr = 0;\n+\n+struct my_module : my_object\n+{\n+  my_module()\n+  {\n+    puts (\"in my_module ctor, setting up ptr\");\n+    my_module_ptr = this;\n+  }\n+  ~my_module() { puts (\"in my_module dtor\");}\n+};\n+\n+struct D\n+{\n+  D() { puts (\"in D ctor\"); }\n+  virtual ~D();\n+};\n+\n+D::~D()\n+{\n+  puts (\"in D dtor\");\n+  puts (\"before DCASTing to my_module*\");\n+  my_module* m = dynamic_cast<my_module*>(my_module_ptr);\n+  if (m != my_module_ptr)\n+    abort ();\n+  puts (\"after DCASTing to my_module*\");\n+}\n+\n+struct my_interface\n+{\n+  my_interface() { puts (\"in my_interface ctor\");}\n+  ~my_interface() { puts (\"in my_interface dtor\");}\n+};\n+\n+struct myif : virtual my_interface\n+{\n+  myif() { puts (\"in myif ctor\");}\n+  ~myif() { puts (\"in myif dtor\");}\n+};\n+\n+struct A: virtual myif\n+{\n+  A() { puts (\"in A ctor\"); }\n+  ~A() { puts (\"in A dtor\"); }\n+\n+  D d;\n+};\n+\n+struct B: virtual myif\n+{\n+  B() { puts (\"in B ctor\"); }\n+  ~B() { puts (\"in B dtor\"); }\n+\n+  D d;\n+};\n+\n+struct C : my_module, A, B\n+{\n+  C() { puts (\"in C ctor\");}\n+  ~C() { puts (\"in C dtor\"); }\n+};\n+\n+int main(int, char**)\n+{\n+  C t;\n+}"}, {"sha": "2a5fd2b3b96190d386ad1568741397fa118a12f7", "filename": "gcc/testsuite/g++.dg/rtti/dyncast4.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c99ce47506cfa0d451e96722614cc786497cda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fdyncast4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c99ce47506cfa0d451e96722614cc786497cda/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fdyncast4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fdyncast4.C?ref=62c99ce47506cfa0d451e96722614cc786497cda", "patch": "@@ -0,0 +1,26 @@\n+// Test to make sure that we keep searching if we don't find the type we\n+// want at the expected address.\n+\n+// { dg-do run }\n+\n+struct A\n+{\n+  virtual void f() {};\n+};\n+\n+struct B: A { };\n+\n+struct C: A { };\n+\n+struct D: B, C { };\n+\n+int main()\n+{\n+  D d;\n+  A* ap = static_cast<B*>(&d);\n+  C* cp = dynamic_cast<C*>(ap);\n+  if (cp == 0)\n+    return 1;\n+  else\n+    return 0;\n+}"}, {"sha": "aaf7921570f3e6ce65afd44c26fdeb27449697f1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c99ce47506cfa0d451e96722614cc786497cda/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c99ce47506cfa0d451e96722614cc786497cda/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=62c99ce47506cfa0d451e96722614cc786497cda", "patch": "@@ -1,3 +1,8 @@\n+2009-07-06  Jason Merrill  <jason@redhat.com>\n+\n+\t* libsupc++/vmi_class_type_info.cc (__do_dyncast): Use src2dst hint\n+\tto defer searching bases that don't overlap the desired address.\n+\n 2009-07-05  Joseph Myers  <joseph@codesourcery.com>\n \n \t*"}, {"sha": "cb97bc50eccc294aa96402e9021c8f1691bbd991", "filename": "libstdc++-v3/libsupc++/dyncast.cc", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c99ce47506cfa0d451e96722614cc786497cda/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdyncast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c99ce47506cfa0d451e96722614cc786497cda/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdyncast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdyncast.cc?ref=62c99ce47506cfa0d451e96722614cc786497cda", "patch": "@@ -28,12 +28,26 @@ namespace __cxxabiv1 {\n \n \n // this is the external interface to the dynamic cast machinery\n+/* sub: source address to be adjusted; nonnull, and since the\n+ *      source object is polymorphic, *(void**)sub is a virtual pointer.\n+ * src: static type of the source object.\n+ * dst: destination type (the \"T\" in \"dynamic_cast<T>(v)\").\n+ * src2dst_offset: a static hint about the location of the\n+ *    source subobject with respect to the complete object;\n+ *    special negative values are:\n+ *       -1: no hint\n+ *       -2: src is not a public base of dst\n+ *       -3: src is a multiple public base type but never a\n+ *           virtual base type\n+ *    otherwise, the src type is a unique public nonvirtual\n+ *    base type of dst at offset src2dst_offset from the\n+ *    origin of dst.  */\n extern \"C\" void *\n __dynamic_cast (const void *src_ptr,    // object started from\n                 const __class_type_info *src_type, // type of the starting object\n                 const __class_type_info *dst_type, // desired target type\n                 ptrdiff_t src2dst) // how src and dst are related\n-{\n+  {\n   const void *vtable = *static_cast <const void *const *> (src_ptr);\n   const vtable_prefix *prefix =\n       adjust_pointer <vtable_prefix> (vtable, "}, {"sha": "195061d72e40e6bc919e86db98648d92a7f74e6b", "filename": "libstdc++-v3/libsupc++/vmi_class_type_info.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c99ce47506cfa0d451e96722614cc786497cda/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvmi_class_type_info.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c99ce47506cfa0d451e96722614cc786497cda/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvmi_class_type_info.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fvmi_class_type_info.cc?ref=62c99ce47506cfa0d451e96722614cc786497cda", "patch": "@@ -108,7 +108,17 @@ __do_dyncast (ptrdiff_t src2dst,\n       return false;\n     }\n \n+  // If src_type is a unique non-virtual base of dst_type, we have a good\n+  // guess at the address we want, so in the first pass try skipping any\n+  // bases which don't contain that address.\n+  const void *dst_cand = NULL;\n+  if (src2dst >= 0)\n+    dst_cand = adjust_pointer<void>(src_ptr, -src2dst);\n+  bool first_pass = true;\n+  bool skipped = false;\n+\n   bool result_ambig = false;\n+ again:\n   for (std::size_t i = __base_count; i--;)\n     {\n       __dyncast_result result2 (result.whole_details);\n@@ -121,6 +131,20 @@ __do_dyncast (ptrdiff_t src2dst,\n         base_access = __sub_kind (base_access | __contained_virtual_mask);\n       base = convert_to_base (base, is_virtual, offset);\n \n+      if (dst_cand)\n+\t{\n+\t  bool skip_on_first_pass = base > dst_cand;\n+\t  if (skip_on_first_pass == first_pass)\n+\t    {\n+\t      // We aren't interested in this base on this pass: either\n+\t      // we're on the first pass and this base doesn't contain the\n+\t      // likely address, or we're on the second pass and we checked\n+\t      // this base on the first pass.\n+\t      skipped = true;\n+\t      continue;\n+\t    }\n+\t}\n+\n       if (!__base_info[i].__is_public_p ())\n         {\n           if (src2dst == -2 &&\n@@ -267,6 +291,14 @@ __do_dyncast (ptrdiff_t src2dst,\n         return result_ambig;\n     }\n \n+  if (skipped && first_pass)\n+    {\n+      // We didn't find dst where we expected it, so let's go back and try\n+      // the bases we skipped (if any).\n+      first_pass = false;\n+      goto again;\n+    }\n+\n   return result_ambig;\n }\n "}]}