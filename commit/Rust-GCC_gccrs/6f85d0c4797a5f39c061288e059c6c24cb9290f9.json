{"sha": "6f85d0c4797a5f39c061288e059c6c24cb9290f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY4NWQwYzQ3OTdhNWYzOWMwNjEyODhlMDU5YzZjMjRjYjkyOTBmOQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-02-15T23:16:49Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-02-15T23:16:49Z"}, "message": "re PR target/19019 (GCC ldouble format incompatibility with XLC long double)\n\n        PR target/19019\n        * config/rs6000/darwin-ldouble.c (_xlqadd): Rename to __gcc_qadd.\n        (_xlqsub): Rename to __gcc_qsub.\n        (_xlqmul): Rename to __gcc_qmul.\n        (_xlqdiv): Rename to __gcc_qdiv.\n        Provide versioned symbol aliases with old names.\n        * config/rs6000/libgcc-ppc64.ver: Rename symbols.\n        * config/rs6000/rs6000.c (rs6000_init_libfuncs): Rename symbols.\n        * config/rs6000/t-aix43 (LIB2FUNCS_EXTRA): New.\n        * config/rs6000/t-aix52 (LIB2FUNCS_EXTRA): New.\n        * config/rs6000/t-newas (LIB2FUNCS_EXTRA): New.\n\nFrom-SVN: r95079", "tree": {"sha": "a2b39d283a20de2dc6811714be5e809b36682898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2b39d283a20de2dc6811714be5e809b36682898"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f85d0c4797a5f39c061288e059c6c24cb9290f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f85d0c4797a5f39c061288e059c6c24cb9290f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f85d0c4797a5f39c061288e059c6c24cb9290f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f85d0c4797a5f39c061288e059c6c24cb9290f9/comments", "author": null, "committer": null, "parents": [{"sha": "342e3b23af9adadd2bb5378f19bb49aeadc56483", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/342e3b23af9adadd2bb5378f19bb49aeadc56483", "html_url": "https://github.com/Rust-GCC/gccrs/commit/342e3b23af9adadd2bb5378f19bb49aeadc56483"}], "stats": {"total": 92, "additions": 66, "deletions": 26}, "files": [{"sha": "f8eb873beafa7c83edc2e11e6d29359b2691a066", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f85d0c4797a5f39c061288e059c6c24cb9290f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f85d0c4797a5f39c061288e059c6c24cb9290f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f85d0c4797a5f39c061288e059c6c24cb9290f9", "patch": "@@ -1,3 +1,17 @@\n+2005-02-15  David Edelsohn  <edelsohn@gnu.org>\n+\n+\tPR target/19019\n+\t* config/rs6000/darwin-ldouble.c (_xlqadd): Rename to __gcc_qadd.\n+\t(_xlqsub): Rename to __gcc_qsub.\n+\t(_xlqmul): Rename to __gcc_qmul.\n+\t(_xlqdiv): Rename to __gcc_qdiv.\n+\tProvide versioned symbol aliases with old names.\n+\t* config/rs6000/libgcc-ppc64.ver: Rename symbols.\n+\t* config/rs6000/rs6000.c (rs6000_init_libfuncs): Rename symbols.\n+\t* config/rs6000/t-aix43 (LIB2FUNCS_EXTRA): New.\n+\t* config/rs6000/t-aix52 (LIB2FUNCS_EXTRA): New.\n+\t* config/rs6000/t-newas (LIB2FUNCS_EXTRA): New.\n+\n 2005-02-15  James A. Morrison  <phython@gcc.gnu.org>\n \n \t* fold-const.c (fold): Fold -(~A) to A + 1.  Fold ~(-A) to A - 1."}, {"sha": "86893c961cd40b5878d88b791b6fab2233cd157b", "filename": "gcc/config/rs6000/darwin-ldouble.c", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f85d0c4797a5f39c061288e059c6c24cb9290f9/gcc%2Fconfig%2Frs6000%2Fdarwin-ldouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f85d0c4797a5f39c061288e059c6c24cb9290f9/gcc%2Fconfig%2Frs6000%2Fdarwin-ldouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin-ldouble.c?ref=6f85d0c4797a5f39c061288e059c6c24cb9290f9", "patch": "@@ -1,5 +1,5 @@\n /* 128-bit long double support routines for Darwin.\n-   Copyright (C) 1993, 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 2003, 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -30,12 +30,12 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Implementations of floating-point long double basic arithmetic\n    functions called by the IBM C compiler when generating code for\n    PowerPC platforms.  In particular, the following functions are\n-   implemented: _xlqadd, _xlqsub, _xlqmul, and _xlqdiv.  Double-double\n-   algorithms are based on the paper \"Doubled-Precision IEEE Standard\n-   754 Floating-Point Arithmetic\" by W. Kahan, February 26, 1987.  An\n-   alternative published reference is \"Software for Doubled-Precision\n-   Floating-Point Computations\", by Seppo Linnainmaa, ACM TOMS vol 7\n-   no 3, September 1981, pages 272-283.  */\n+   implemented: __gcc_qadd, __gcc_qsub, __gcc_qmul, and __gcc_qdiv.\n+   Double-double algorithms are based on the paper \"Doubled-Precision\n+   IEEE Standard 754 Floating-Point Arithmetic\" by W. Kahan, February 26,\n+   1987.  An alternative published reference is \"Software for\n+   Doubled-Precision Floating-Point Computations\", by Seppo Linnainmaa,\n+   ACM TOMS vol 7 no 3, September 1981, pages 272-283.  */\n \n /* Each long double is made up of two IEEE doubles.  The value of the\n    long double is the sum of the values of the two parts.  The most\n@@ -48,7 +48,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n    This code currently assumes big-endian.  */\n \n-#if !_SOFT_FLOAT && (defined (__MACH__) || defined (__powerpc64__))\n+#if !_SOFT_FLOAT && (defined (__MACH__) || defined (__powerpc64__) || defined (_AIX))\n \n #define fabs(x) __builtin_fabs(x)\n #define isless(x, y) __builtin_isless (x, y)\n@@ -62,10 +62,27 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    but GCC currently generates poor code when a union is used to turn\n    a long double into a pair of doubles.  */\n \n-extern long double _xlqadd (double, double, double, double);\n-extern long double _xlqsub (double, double, double, double);\n-extern long double _xlqmul (double, double, double, double);\n-extern long double _xlqdiv (double, double, double, double);\n+extern long double __gcc_qadd (double, double, double, double);\n+extern long double __gcc_qsub (double, double, double, double);\n+extern long double __gcc_qmul (double, double, double, double);\n+extern long double __gcc_qdiv (double, double, double, double);\n+\n+#ifdef __ELF__\n+/* Provide definitions of the old symbol names to statisfy apps and\n+   shared libs built against an older libgcc.  To access the _xlq\n+   symbols an explicit version reference is needed, so these won't\n+   satisfy an unadorned reference like _xlqadd.  If dot symbols are\n+   not needed, the assembler will remove the aliases from the symbol\n+   table.  */\n+__asm__ (\".symver __gcc_qadd,_xlqadd@GCC_3.4\\n\\t\"\n+\t \".symver __gcc_qsub,_xlqsub@GCC_3.4\\n\\t\"\n+\t \".symver __gcc_qmul,_xlqmul@GCC_3.4\\n\\t\"\n+\t \".symver __gcc_qdiv,_xlqdiv@GCC_3.4\\n\\t\"\n+\t \".symver .__gcc_qadd,._xlqadd@GCC_3.4\\n\\t\"\n+\t \".symver .__gcc_qsub,._xlqsub@GCC_3.4\\n\\t\"\n+\t \".symver .__gcc_qmul,._xlqmul@GCC_3.4\\n\\t\"\n+\t \".symver .__gcc_qdiv,._xlqdiv@GCC_3.4\");\n+#endif\n \n typedef union\n {\n@@ -75,7 +92,7 @@ typedef union\n \n /* Add two 'long double' values and return the result.\t*/\n long double\n-_xlqadd (double a, double aa, double c, double cc)\n+__gcc_qadd (double a, double aa, double c, double cc)\n {\n   longDblUnion x;\n   double z, q, zz, xh;\n@@ -110,13 +127,13 @@ _xlqadd (double a, double aa, double c, double cc)\n }\n \n long double\n-_xlqsub (double a, double b, double c, double d)\n+__gcc_qsub (double a, double b, double c, double d)\n {\n-  return _xlqadd (a, b, -c, -d);\n+  return __gcc_qadd (a, b, -c, -d);\n }\n \n long double\n-_xlqmul (double a, double b, double c, double d)\n+__gcc_qmul (double a, double b, double c, double d)\n {\n   longDblUnion z;\n   double t, tau, u, v, w;\n@@ -145,7 +162,7 @@ _xlqmul (double a, double b, double c, double d)\n }\n \n long double\n-_xlqdiv (double a, double b, double c, double d)\n+__gcc_qdiv (double a, double b, double c, double d)\n {\n   longDblUnion z;\n   double s, sigma, t, tau, u, v, w;"}, {"sha": "b27b4b492494afb49430c420f3d07767a0e31d85", "filename": "gcc/config/rs6000/libgcc-ppc64.ver", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f85d0c4797a5f39c061288e059c6c24cb9290f9/gcc%2Fconfig%2Frs6000%2Flibgcc-ppc64.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f85d0c4797a5f39c061288e059c6c24cb9290f9/gcc%2Fconfig%2Frs6000%2Flibgcc-ppc64.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flibgcc-ppc64.ver?ref=6f85d0c4797a5f39c061288e059c6c24cb9290f9", "patch": "@@ -1,7 +1,7 @@\n-GCC_3.4 {\n+GCC_3.4.4 {\n   # long double support\n-  _xlqadd\n-  _xlqsub\n-  _xlqmul\n-  _xlqdiv\n+  __gcc_qadd\n+  __gcc_qsub\n+  __gcc_qmul\n+  __gcc_qdiv\n }"}, {"sha": "267a16131d13427e3180c9e22aea04f713c55aae", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f85d0c4797a5f39c061288e059c6c24cb9290f9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f85d0c4797a5f39c061288e059c6c24cb9290f9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6f85d0c4797a5f39c061288e059c6c24cb9290f9", "patch": "@@ -8871,10 +8871,10 @@ rs6000_init_libfuncs (void)\n \t}\n \n       /* Standard AIX/Darwin/64-bit SVR4 quad floating point routines.  */\n-      set_optab_libfunc (add_optab, TFmode, \"_xlqadd\");\n-      set_optab_libfunc (sub_optab, TFmode, \"_xlqsub\");\n-      set_optab_libfunc (smul_optab, TFmode, \"_xlqmul\");\n-      set_optab_libfunc (sdiv_optab, TFmode, \"_xlqdiv\");\n+      set_optab_libfunc (add_optab, TFmode, \"__gcc_qadd\");\n+      set_optab_libfunc (sub_optab, TFmode, \"__gcc_qsub\");\n+      set_optab_libfunc (smul_optab, TFmode, \"__gcc_qmul\");\n+      set_optab_libfunc (sdiv_optab, TFmode, \"__gcc_qdiv\");\n     }\n   else\n     {"}, {"sha": "4c03269bc83bf9b6653eb5532331f381a4e410eb", "filename": "gcc/config/rs6000/t-aix43", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f85d0c4797a5f39c061288e059c6c24cb9290f9/gcc%2Fconfig%2Frs6000%2Ft-aix43", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f85d0c4797a5f39c061288e059c6c24cb9290f9/gcc%2Fconfig%2Frs6000%2Ft-aix43", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-aix43?ref=6f85d0c4797a5f39c061288e059c6c24cb9290f9", "patch": "@@ -61,6 +61,9 @@ SHLIB_MKMAP = $(srcdir)/mkmap-flat.awk\n SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver\n SHLIB_NM_FLAGS = -Bpg -X32_64\n \n+# GCC 128-bit long double support routines.\n+LIB2FUNCS_EXTRA = $(srcdir)/config/rs6000/darwin-ldouble.c\n+\n # Either 32-bit and 64-bit objects in archives.\n AR_FLAGS_FOR_TARGET = -X32_64\n "}, {"sha": "10e264014755cb2d771f531c53ee77b48da41fdd", "filename": "gcc/config/rs6000/t-aix52", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f85d0c4797a5f39c061288e059c6c24cb9290f9/gcc%2Fconfig%2Frs6000%2Ft-aix52", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f85d0c4797a5f39c061288e059c6c24cb9290f9/gcc%2Fconfig%2Frs6000%2Ft-aix52", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-aix52?ref=6f85d0c4797a5f39c061288e059c6c24cb9290f9", "patch": "@@ -42,6 +42,9 @@ SHLIB_MKMAP = $(srcdir)/mkmap-flat.awk\n SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver\n SHLIB_NM_FLAGS = -Bpg -X32_64\n \n+# GCC 128-bit long double support routines.\n+LIB2FUNCS_EXTRA = $(srcdir)/config/rs6000/darwin-ldouble.c\n+\n # Either 32-bit and 64-bit objects in archives.\n AR_FLAGS_FOR_TARGET = -X32_64\n "}, {"sha": "d5d03a1c66f45cb1549d668c1d4458b510e63b26", "filename": "gcc/config/rs6000/t-newas", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f85d0c4797a5f39c061288e059c6c24cb9290f9/gcc%2Fconfig%2Frs6000%2Ft-newas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f85d0c4797a5f39c061288e059c6c24cb9290f9/gcc%2Fconfig%2Frs6000%2Ft-newas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-newas?ref=6f85d0c4797a5f39c061288e059c6c24cb9290f9", "patch": "@@ -27,6 +27,9 @@ MULTILIB_MATCHES\t= $(MULTILIB_MATCHES_FLOAT) \\\n \t\t\t  mcpu?powerpc=mpowerpc-gpopt \\\n \t\t\t  mcpu?powerpc=mpowerpc-gfxopt\n \n+# GCC 128-bit long double support routines.\n+LIB2FUNCS_EXTRA = $(srcdir)/config/rs6000/darwin-ldouble.c\n+\n # Aix 3.2.x needs milli.exp for -mcpu=common\n EXTRA_PARTS = milli.exp\n milli.exp: $(srcdir)/config/rs6000/milli.exp"}]}