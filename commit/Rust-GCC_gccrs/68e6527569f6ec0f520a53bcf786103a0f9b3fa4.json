{"sha": "68e6527569f6ec0f520a53bcf786103a0f9b3fa4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhlNjUyNzU2OWY2ZWMwZjUyMGE1M2JjZjc4NjEwM2EwZjliM2ZhNA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-07-20T13:31:56Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-07-20T13:31:56Z"}, "message": "cppexp.c (struct op): Add token pointer.\n\n\t* cppexp.c (struct op): Add token pointer.\n\t(check_promotion, CHECK_PROMOTION): New.\n\t(optab): Update.\n\t(_cpp_parse_expr): Update, use token pointer of struct op.\n\t(reduce): Warn about change of sign owing to promotion.\n\t* cppinit.c (cpp_handle_option): New warning if -Wall.\n\t* cpplib.h (struct cpp_options): New member.\ntestsuite:\n\t* gcc.dg/cpp/Wsignprom.c: New tests.\n\nFrom-SVN: r55611", "tree": {"sha": "9bd94b5aaf271855796963e66d84694ac7170431", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bd94b5aaf271855796963e66d84694ac7170431"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68e6527569f6ec0f520a53bcf786103a0f9b3fa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e6527569f6ec0f520a53bcf786103a0f9b3fa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e6527569f6ec0f520a53bcf786103a0f9b3fa4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e6527569f6ec0f520a53bcf786103a0f9b3fa4/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a5611426087b57133689d61bb4717f9c82f02b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a5611426087b57133689d61bb4717f9c82f02b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a5611426087b57133689d61bb4717f9c82f02b2"}], "stats": {"total": 132, "additions": 104, "deletions": 28}, "files": [{"sha": "b20c1b6e98a63bcecde037922abba49f4ab99d2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e6527569f6ec0f520a53bcf786103a0f9b3fa4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e6527569f6ec0f520a53bcf786103a0f9b3fa4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68e6527569f6ec0f520a53bcf786103a0f9b3fa4", "patch": "@@ -1,3 +1,13 @@\n+2002-07-20  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cppexp.c (struct op): Add token pointer.\n+\t(check_promotion, CHECK_PROMOTION): New.\n+\t(optab): Update.\n+\t(_cpp_parse_expr): Update, use token pointer of struct op.\n+\t(reduce): Warn about change of sign owing to promotion.\n+\t* cppinit.c (cpp_handle_option): New warning if -Wall.\n+\t* cpplib.h (struct cpp_options): New member.\n+\n 2002-07-19  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.md: Remove ppc630 fpcompare from single"}, {"sha": "b66fea925e788a05723b58d0052be0de59864d2a", "filename": "gcc/cppexp.c", "status": "modified", "additions": 59, "deletions": 28, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e6527569f6ec0f520a53bcf786103a0f9b3fa4/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e6527569f6ec0f520a53bcf786103a0f9b3fa4/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=68e6527569f6ec0f520a53bcf786103a0f9b3fa4", "patch": "@@ -30,6 +30,7 @@ Boston, MA 02111-1307, USA.  */\n \n struct op\n {\n+  const cpp_token *token;\t/* The token forming op (for diagnostics).  */\n   cpp_num value;\t\t/* The value logically \"right\" of op.  */\n   enum cpp_ttype op;\n };\n@@ -64,6 +65,7 @@ static cpp_num eval_token PARAMS ((cpp_reader *, const cpp_token *));\n static struct op *reduce PARAMS ((cpp_reader *, struct op *, enum cpp_ttype));\n static unsigned int interpret_float_suffix PARAMS ((const uchar *, size_t));\n static unsigned int interpret_int_suffix PARAMS ((const uchar *, size_t));\n+static void check_promotion PARAMS ((cpp_reader *, const struct op *));\n \n /* Token type abuse to create unary plus and minus operators.  */\n #define CPP_UPLUS (CPP_LAST_CPP_OP + 1)\n@@ -630,9 +632,11 @@ The parser assumes all shifted operators require a left operand unless\n the flag NO_L_OPERAND is set.  These semantics are automatic; any\n extra semantics need to be handled with operator-specific code.  */\n \n-/* Flags.  */\n+/* Flags.  If CHECK_PROMOTION, we warn if the effective sign of an\n+   operand changes because of integer promotions.  */\n #define NO_L_OPERAND\t(1 << 0)\n #define LEFT_ASSOC\t(1 << 1)\n+#define CHECK_PROMOTION\t(1 << 2)\n \n /* Operator to priority map.  Must be in the same order as the first\n    N entries of enum cpp_ttype.  */\n@@ -644,35 +648,35 @@ static const struct operator\n {\n   /* EQ */\t\t{0, 0},\t/* Shouldn't happen.  */\n   /* NOT */\t\t{16, NO_L_OPERAND},\n-  /* GREATER */\t\t{12, LEFT_ASSOC},\n-  /* LESS */\t\t{12, LEFT_ASSOC},\n-  /* PLUS */\t\t{14, LEFT_ASSOC},\n-  /* MINUS */\t\t{14, LEFT_ASSOC},\n-  /* MULT */\t\t{15, LEFT_ASSOC},\n-  /* DIV */\t\t{15, LEFT_ASSOC},\n-  /* MOD */\t\t{15, LEFT_ASSOC},\n-  /* AND */\t\t{9, LEFT_ASSOC},\n-  /* OR */\t\t{7, LEFT_ASSOC},\n-  /* XOR */\t\t{8, LEFT_ASSOC},\n+  /* GREATER */\t\t{12, LEFT_ASSOC | CHECK_PROMOTION},\n+  /* LESS */\t\t{12, LEFT_ASSOC | CHECK_PROMOTION},\n+  /* PLUS */\t\t{14, LEFT_ASSOC | CHECK_PROMOTION},\n+  /* MINUS */\t\t{14, LEFT_ASSOC | CHECK_PROMOTION},\n+  /* MULT */\t\t{15, LEFT_ASSOC | CHECK_PROMOTION},\n+  /* DIV */\t\t{15, LEFT_ASSOC | CHECK_PROMOTION},\n+  /* MOD */\t\t{15, LEFT_ASSOC | CHECK_PROMOTION},\n+  /* AND */\t\t{9, LEFT_ASSOC | CHECK_PROMOTION},\n+  /* OR */\t\t{7, LEFT_ASSOC | CHECK_PROMOTION},\n+  /* XOR */\t\t{8, LEFT_ASSOC | CHECK_PROMOTION},\n   /* RSHIFT */\t\t{13, LEFT_ASSOC},\n   /* LSHIFT */\t\t{13, LEFT_ASSOC},\n \n-  /* MIN */\t\t{10, LEFT_ASSOC},\n-  /* MAX */\t\t{10, LEFT_ASSOC},\n+  /* MIN */\t\t{10, LEFT_ASSOC | CHECK_PROMOTION},\n+  /* MAX */\t\t{10, LEFT_ASSOC | CHECK_PROMOTION},\n \n   /* COMPL */\t\t{16, NO_L_OPERAND},\n   /* AND_AND */\t\t{6, LEFT_ASSOC},\n   /* OR_OR */\t\t{5, LEFT_ASSOC},\n   /* QUERY */\t\t{3, 0},\n-  /* COLON */\t\t{4, LEFT_ASSOC},\n+  /* COLON */\t\t{4, LEFT_ASSOC | CHECK_PROMOTION},\n   /* COMMA */\t\t{2, LEFT_ASSOC},\n   /* OPEN_PAREN */\t{1, NO_L_OPERAND},\n   /* CLOSE_PAREN */\t{0, 0},\n   /* EOF */\t\t{0, 0},\n   /* EQ_EQ */\t\t{11, LEFT_ASSOC},\n   /* NOT_EQ */\t\t{11, LEFT_ASSOC},\n-  /* GREATER_EQ */\t{12, LEFT_ASSOC},\n-  /* LESS_EQ */\t\t{12, LEFT_ASSOC},\n+  /* GREATER_EQ */\t{12, LEFT_ASSOC | CHECK_PROMOTION},\n+  /* LESS_EQ */\t\t{12, LEFT_ASSOC | CHECK_PROMOTION},\n   /* UPLUS */\t\t{16, NO_L_OPERAND},\n   /* UMINUS */\t\t{16, NO_L_OPERAND}\n };\n@@ -693,7 +697,6 @@ _cpp_parse_expr (pfile)\n      cpp_reader *pfile;\n {\n   struct op *top = pfile->op_stack;\n-  const cpp_token *token = NULL, *prev_token;\n   unsigned int lex_count;\n   bool saw_leading_not, want_value = true;\n \n@@ -711,10 +714,9 @@ _cpp_parse_expr (pfile)\n     {\n       struct op op;\n \n-      prev_token = token;\n-      token = cpp_get_token (pfile);\n       lex_count++;\n-      op.op = token->type;\n+      op.token = cpp_get_token (pfile);\n+      op.op = op.token->type;\n \n       switch (op.op)\n \t{\n@@ -726,9 +728,9 @@ _cpp_parse_expr (pfile)\n \tcase CPP_HASH:\n \t  if (!want_value)\n \t    SYNTAX_ERROR2 (\"missing binary operator before token \\\"%s\\\"\",\n-\t\t\t   cpp_token_as_text (pfile, token));\n+\t\t\t   cpp_token_as_text (pfile, op.token));\n \t  want_value = false;\n-\t  top->value = eval_token (pfile, token);\n+\t  top->value = eval_token (pfile, op.token);\n \t  continue;\n \n \tcase CPP_NOT:\n@@ -743,15 +745,16 @@ _cpp_parse_expr (pfile)\n \t    op.op = CPP_UMINUS;\n \t  break;\n \tcase CPP_OTHER:\n-\t  if (ISGRAPH (token->val.c))\n-\t    SYNTAX_ERROR2 (\"invalid character '%c' in #if\", token->val.c);\n+\t  if (ISGRAPH (op.token->val.c))\n+\t    SYNTAX_ERROR2 (\"invalid character '%c' in #if\", op.token->val.c);\n \t  else\n-\t    SYNTAX_ERROR2 (\"invalid character '\\\\%03o' in #if\", token->val.c);\n+\t    SYNTAX_ERROR2 (\"invalid character '\\\\%03o' in #if\",\n+\t\t\t   op.token->val.c);\n \n \tdefault:\n \t  if ((int) op.op <= (int) CPP_EQ || (int) op.op >= (int) CPP_PLUS_EQ)\n \t    SYNTAX_ERROR2 (\"token \\\"%s\\\" is not valid in preprocessor expressions\",\n-\t\t\t   cpp_token_as_text (pfile, token));\n+\t\t\t   cpp_token_as_text (pfile, op.token));\n \t  break;\n \t}\n \n@@ -760,7 +763,7 @@ _cpp_parse_expr (pfile)\n \t{\n \t  if (!want_value)\n \t    SYNTAX_ERROR2 (\"missing binary operator before token \\\"%s\\\"\",\n-\t\t\t   cpp_token_as_text (pfile, token));\n+\t\t\t   cpp_token_as_text (pfile, op.token));\n \t}\n       else if (want_value)\n \t{\n@@ -775,7 +778,7 @@ _cpp_parse_expr (pfile)\n \t    SYNTAX_ERROR (\"#if with no expression\");\n \t  if (top->op != CPP_EOF && top->op != CPP_OPEN_PAREN)\n \t    SYNTAX_ERROR2 (\"operator '%s' has no right operand\",\n-\t\t\t   cpp_token_as_text (pfile, prev_token));\n+\t\t\t   cpp_token_as_text (pfile, top->token));\n \t}\n \n       top = reduce (pfile, top, op.op);\n@@ -816,6 +819,7 @@ _cpp_parse_expr (pfile)\n \ttop = _cpp_expand_op_stack (pfile);\n \n       top->op = op.op;\n+      top->token = op.token;\n     }\n \n   /* The controlling macro expression is only valid if we called lex 3\n@@ -860,6 +864,10 @@ reduce (pfile, top, op)\n   prio = optab[op].prio - ((optab[op].flags & LEFT_ASSOC) != 0);\n   while (prio < optab[top->op].prio)\n     {\n+      if (CPP_OPTION (pfile, warn_num_sign_change)\n+\t  && optab[top->op].flags & CHECK_PROMOTION)\n+\tcheck_promotion (pfile, top);\n+\n       switch (top->op)\n \t{\n \tcase CPP_UPLUS:\n@@ -994,6 +1002,29 @@ _cpp_expand_op_stack (pfile)\n   return pfile->op_stack + old_size;\n }\n \n+/* Emits a warning if the effective sign of either operand of OP\n+   changes because of integer promotions.  */\n+static void\n+check_promotion (pfile, op)\n+     cpp_reader *pfile;\n+     const struct op *op;\n+{\n+  if (op->value.unsignedp == op[-1].value.unsignedp)\n+    return;\n+\n+  if (op->value.unsignedp)\n+    {\n+      if (!num_positive (op[-1].value, CPP_OPTION (pfile, precision)))\n+\tcpp_error (pfile, DL_WARNING,\n+\t\t   \"the left operand of \\\"%s\\\" changes sign when promoted\",\n+\t\t   cpp_token_as_text (pfile, op->token));\n+    }\n+  else if (!num_positive (op->value, CPP_OPTION (pfile, precision)))\n+    cpp_error (pfile, DL_WARNING,\n+\t       \"the right operand of \\\"%s\\\" changes sign when promoted\",\n+\t       cpp_token_as_text (pfile, op->token));\n+}\n+\n /* Clears the unused high order bits of the number pointed to by PNUM.  */\n static cpp_num\n num_trim (num, precision)"}, {"sha": "72e26ce87de5c3f8be4968b625ad76b1f8c00115", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e6527569f6ec0f520a53bcf786103a0f9b3fa4/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e6527569f6ec0f520a53bcf786103a0f9b3fa4/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=68e6527569f6ec0f520a53bcf786103a0f9b3fa4", "patch": "@@ -1672,6 +1672,7 @@ cpp_handle_option (pfile, argc, argv)\n \tcase OPT_Wall:\n \t  CPP_OPTION (pfile, warn_trigraphs) = 1;\n \t  CPP_OPTION (pfile, warn_comments) = 1;\n+\t  CPP_OPTION (pfile, warn_num_sign_change) = 1;\n \t  break;\n \n \tcase OPT_Wtraditional:"}, {"sha": "c407321ff435421a2516332f82d0eacb49e9c7bc", "filename": "gcc/cpplib.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e6527569f6ec0f520a53bcf786103a0f9b3fa4/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e6527569f6ec0f520a53bcf786103a0f9b3fa4/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=68e6527569f6ec0f520a53bcf786103a0f9b3fa4", "patch": "@@ -333,6 +333,10 @@ struct cpp_options\n   /* Nonzero means warn about text after an #endif (or #else).  */\n   unsigned char warn_endif_labels;\n \n+  /* Nonzero means warn about implicit sign changes owing to integer\n+     promotions.  */\n+  unsigned char warn_num_sign_change;\n+\n   /* Nonzero means turn warnings into errors.  */\n   unsigned char warnings_are_errors;\n "}, {"sha": "91c63ea57000d6e670f4e5c2db73abb0a29d49f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e6527569f6ec0f520a53bcf786103a0f9b3fa4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e6527569f6ec0f520a53bcf786103a0f9b3fa4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=68e6527569f6ec0f520a53bcf786103a0f9b3fa4", "patch": "@@ -1,3 +1,7 @@\n+2002-07-20  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* gcc.dg/cpp/Wsignprom.c: New tests.\n+\n 2002-07-20  Alan Modra  <amodra@bigpond.net.au>\n \n \t* gcc.c-torture/execute/loop-13.c: New test."}, {"sha": "44b5667b3f283a6ecb5e92accbc6198a37afc69d", "filename": "gcc/testsuite/gcc.dg/cpp/Wsignprom.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e6527569f6ec0f520a53bcf786103a0f9b3fa4/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWsignprom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e6527569f6ec0f520a53bcf786103a0f9b3fa4/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWsignprom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWsignprom.c?ref=68e6527569f6ec0f520a53bcf786103a0f9b3fa4", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-Wall\" } */\n+\n+/* Test that -Wall emits the warnings about integer promotion changing\n+   the sign of an operand.  */\n+\n+#if -1 > 0U  /* { dg-warning \"changes sign when promoted\" } */\n+#endif\n+\n+#if 0U + -1  /* { dg-warning \"changes sign when promoted\" } */\n+#endif\n+\n+#if 0U * -1  /* { dg-warning \"changes sign when promoted\" } */\n+#endif\n+\n+#if 1U / -2  /* { dg-warning \"changes sign when promoted\" } */\n+#endif\n+\n+#if -1 % 1U  /* { dg-warning \"changes sign when promoted\" } */\n+#endif\n+\n+#if 1 ? 0U : -1  /* { dg-warning \"changes sign when promoted\" } */\n+#endif\n+\n+#if 1 ? -1 : 0U  /* { dg-warning \"changes sign when promoted\" } */\n+#endif"}]}