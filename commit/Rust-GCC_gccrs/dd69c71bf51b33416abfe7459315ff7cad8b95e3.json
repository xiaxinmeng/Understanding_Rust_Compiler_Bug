{"sha": "dd69c71bf51b33416abfe7459315ff7cad8b95e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ2OWM3MWJmNTFiMzM0MTZhYmZlNzQ1OTMxNWZmN2NhZDhiOTVlMw==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-08-17T18:03:59Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-08-17T18:03:59Z"}, "message": "cppinit.c (merge_include_chains): Use remove_dup_dir, remove_dup_dirs.\n\n\t* (cppinit.c) merge_include_chains: Use remove_dup_dir,\n\tremove_dup_dirs.  If qtail == brack, remove brack not\n\tqtail.\n\t(remove_dup_dir, remove_dup_dirs): New functions.\n\nFrom-SVN: r35766", "tree": {"sha": "54f07582303ba7d8f214712f1d5ee89e32cfaeb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54f07582303ba7d8f214712f1d5ee89e32cfaeb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd69c71bf51b33416abfe7459315ff7cad8b95e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd69c71bf51b33416abfe7459315ff7cad8b95e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd69c71bf51b33416abfe7459315ff7cad8b95e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd69c71bf51b33416abfe7459315ff7cad8b95e3/comments", "author": null, "committer": null, "parents": [{"sha": "709e9e509cdca723aec76fb1076b2feb1264192b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/709e9e509cdca723aec76fb1076b2feb1264192b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/709e9e509cdca723aec76fb1076b2feb1264192b"}], "stats": {"total": 165, "additions": 76, "deletions": 89}, "files": [{"sha": "b2c4cceadc02fcc356e39812d454bcf7bfe4534e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd69c71bf51b33416abfe7459315ff7cad8b95e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd69c71bf51b33416abfe7459315ff7cad8b95e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd69c71bf51b33416abfe7459315ff7cad8b95e3", "patch": "@@ -1,3 +1,10 @@\n+2000-08-17  Neil Booth  <NeilB@earthling.net>\n+\n+\t* (cppinit.c) merge_include_chains: Use remove_dup_dir,\n+\tremove_dup_dirs.  If qtail == brack, remove brack not\n+\tqtail.\n+\t(remove_dup_dir, remove_dup_dirs): New functions.\n+\n 2000-08-17  Neil Booth  <NeilB@earthling.net>\n \n \t* cppinit.c (cpp_cleanup): Free include dir chains."}, {"sha": "6280b0afe39259d11e404febfb71e307498325b6", "filename": "gcc/cppinit.c", "status": "modified", "additions": 69, "deletions": 89, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd69c71bf51b33416abfe7459315ff7cad8b95e3/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd69c71bf51b33416abfe7459315ff7cad8b95e3/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=dd69c71bf51b33416abfe7459315ff7cad8b95e3", "patch": "@@ -100,6 +100,10 @@ static void path_include\t\tPARAMS ((cpp_reader *,\n static void initialize_builtins\t\tPARAMS ((cpp_reader *));\n static void append_include_chain\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t char *, int, int));\n+struct file_name_list * remove_dup_dir\tPARAMS ((cpp_reader *,\n+\t\t\t\t\t\t struct file_name_list *));\n+struct file_name_list * remove_dup_dirs PARAMS ((cpp_reader *,\n+\t\t\t\t\t\t struct file_name_list *));\n static void merge_include_chains\tPARAMS ((cpp_reader *));\n \n static void initialize_dependency_output PARAMS ((cpp_reader *));\n@@ -267,6 +271,51 @@ append_include_chain (pfile, dir, path, cxx_aware)\n     }\n }\n \n+/* Handle a duplicated include path.  PREV is the link in the chain\n+   before the duplicate.  The duplicate is removed from the chain and\n+   freed.  Returns PREV.  */\n+struct file_name_list *\n+remove_dup_dir (pfile, prev)\n+     cpp_reader *pfile;\n+     struct file_name_list *prev;\n+{\n+  struct file_name_list *cur = prev->next;\n+\n+  if (CPP_OPTION (pfile, verbose))\n+    fprintf (stderr, _(\"ignoring duplicate directory \\\"%s\\\"\\n\"), cur->name);\n+\n+  prev->next = cur->next;\n+  free (cur->name);\n+  free (cur);\n+\n+  return prev;\n+}\n+\n+/* Remove duplicate directories from a chain.  Returns the tail of the\n+   chain, or NULL if the chain is empty.  This algorithm is quadratic\n+   in the number of -I switches, which is acceptable since there\n+   aren't usually that many of them.  */\n+struct file_name_list *\n+remove_dup_dirs (pfile, head)\n+     cpp_reader *pfile;\n+     struct file_name_list *head;\n+{\n+  struct file_name_list *prev = NULL, *cur, *other;\n+\n+  for (cur = head; cur; cur = cur->next)\n+    {\n+      for (other = head; other != cur; other = other->next)\n+        if (INO_T_EQ (cur->ino, other->ino) && cur->dev == other->dev)\n+\t  {\n+\t    cur = remove_dup_dir (pfile, prev);\n+\t    break;\n+\t  }\n+      prev = cur;\n+    }\n+\n+  return prev;\n+}\n+\n /* Merge the four include chains together in the order quote, bracket,\n    system, after.  Remove duplicate dirs (as determined by\n    INO_T_EQ()).  The system_include and after_include chains are never\n@@ -280,116 +329,47 @@ static void\n merge_include_chains (pfile)\n      cpp_reader *pfile;\n {\n-  struct file_name_list *prev, *cur, *other;\n-  struct file_name_list *quote, *brack, *systm, *after;\n-  struct file_name_list *qtail, *btail, *stail, *atail;\n+  struct file_name_list *quote, *brack, *systm, *qtail;\n \n   struct cpp_pending *pend = CPP_OPTION (pfile, pending);\n \n-  qtail = pend->quote_tail;\n-  btail = pend->brack_tail;\n-  stail = pend->systm_tail;\n-  atail = pend->after_tail;\n-\n   quote = pend->quote_head;\n   brack = pend->brack_head;\n   systm = pend->systm_head;\n-  after = pend->after_head;\n+  qtail = pend->quote_tail;\n \n-  /* Paste together bracket, system, and after include chains. */\n-  if (stail)\n-    stail->next = after;\n+  /* Paste together bracket, system, and after include chains.  */\n+  if (systm)\n+    pend->systm_tail->next = pend->after_head;\n   else\n-    systm = after;\n-  if (btail)\n-    btail->next = systm;\n+    systm = pend->after_head;\n+\n+  if (brack)\n+    pend->brack_tail->next = systm;\n   else\n     brack = systm;\n \n-  /* This is a bit tricky.\n-     First we drop dupes from the quote-include list.\n-     Then we drop dupes from the bracket-include list.\n-     Finally, if qtail and brack are the same directory,\n-     we cut out qtail.\n+  /* This is a bit tricky.  First we drop dupes from the quote-include\n+     list.  Then we drop dupes from the bracket-include list.\n+     Finally, if qtail and brack are the same directory, we cut out\n+     brack.\n \n      We can't just merge the lists and then uniquify them because\n      then we may lose directories from the <> search path that should\n      be there; consider -Ifoo -Ibar -I- -Ifoo -Iquux. It is however\n      safe to treat -Ibar -Ifoo -I- -Ifoo -Iquux as if written\n-     -Ibar -I- -Ifoo -Iquux.\n-\n-     Note that this algorithm is quadratic in the number of -I switches,\n-     which is acceptable since there aren't usually that many of them.  */\n+     -Ibar -I- -Ifoo -Iquux.  */\n \n-  for (cur = quote, prev = NULL; cur; cur = cur->next)\n-    {\n-      for (other = quote; other != cur; other = other->next)\n-        if (INO_T_EQ (cur->ino, other->ino)\n-\t    && cur->dev == other->dev)\n-          {\n-\t    if (CPP_OPTION (pfile, verbose))\n-\t      fprintf (stderr, _(\"ignoring duplicate directory \\\"%s\\\"\\n\"),\n-\t\t       cur->name);\n-\n-\t    prev->next = cur->next;\n-\t    free (cur->name);\n-\t    free (cur);\n-\t    cur = prev;\n-\t    break;\n-\t  }\n-      prev = cur;\n-    }\n-  qtail = prev;\n-\n-  for (cur = brack; cur; cur = cur->next)\n-    {\n-      for (other = brack; other != cur; other = other->next)\n-        if (INO_T_EQ (cur->ino, other->ino)\n-\t    && cur->dev == other->dev)\n-          {\n-\t    if (CPP_OPTION (pfile, verbose))\n-\t      fprintf (stderr, _(\"ignoring duplicate directory \\\"%s\\\"\\n\"),\n-\t\t       cur->name);\n-\n-\t    prev->next = cur->next;\n-\t    free (cur->name);\n-\t    free (cur);\n-\t    cur = prev;\n-\t    break;\n-\t  }\n-      prev = cur;\n-    }\n+  remove_dup_dirs (pfile, brack);\n+  qtail = remove_dup_dirs (pfile, quote);\n \n   if (quote)\n     {\n-      if (INO_T_EQ (qtail->ino, brack->ino) && qtail->dev == brack->dev)\n-        {\n-\t  if (quote == qtail)\n-\t    {\n-\t      if (CPP_OPTION (pfile, verbose))\n-\t\tfprintf (stderr, _(\"ignoring duplicate directory \\\"%s\\\"\\n\"),\n-\t\t\t quote->name);\n+      qtail->next = brack;\n \n-\t      free (quote->name);\n-\t      free (quote);\n-\t      quote = brack;\n-\t    }\n-\t  else\n-\t    {\n-\t      cur = quote;\n-\t      while (cur->next != qtail)\n-\t\t  cur = cur->next;\n-\t      cur->next = brack;\n-\t      if (CPP_OPTION (pfile, verbose))\n-\t\tfprintf (stderr, _(\"ignoring duplicate directory \\\"%s\\\"\\n\"),\n-\t\t\t qtail->name);\n-\n-\t      free (qtail->name);\n-\t      free (qtail);\n-\t    }\n-\t}\n-      else\n-\t  qtail->next = brack;\n+      /* If brack == qtail, remove brack as it's simpler.  */\n+      if (INO_T_EQ (qtail->ino, brack->ino) && qtail->dev == brack->dev)\n+\tbrack = remove_dup_dir (pfile, qtail);\n     }\n   else\n       quote = brack;"}]}