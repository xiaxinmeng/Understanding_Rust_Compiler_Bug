{"sha": "9ac6cb7eb016da3419f68cbd176769f6f10584bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFjNmNiN2ViMDE2ZGEzNDE5ZjY4Y2JkMTc2NzY5ZjZmMTA1ODRiYg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2019-11-04T22:05:26Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2019-11-04T22:05:26Z"}, "message": "Remove handle_pointers argument from all the vrp_val*{min,max} functions.\n\nRemove handle_pointers argument from all the vrp_val*{min,max} functions.  Always\nassume pointers should be handled.\n\nFrom-SVN: r277796", "tree": {"sha": "f7673e03142ec8043f014c8c54937f9df55f68db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7673e03142ec8043f014c8c54937f9df55f68db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ac6cb7eb016da3419f68cbd176769f6f10584bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac6cb7eb016da3419f68cbd176769f6f10584bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ac6cb7eb016da3419f68cbd176769f6f10584bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac6cb7eb016da3419f68cbd176769f6f10584bb/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "74b6e216b0fc00579899ac65cb44aad9e892e344", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74b6e216b0fc00579899ac65cb44aad9e892e344", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74b6e216b0fc00579899ac65cb44aad9e892e344"}], "stats": {"total": 103, "additions": 62, "deletions": 41}, "files": [{"sha": "32af8bb3e9a6dd8256e4a4c07f75161b3723a951", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac6cb7eb016da3419f68cbd176769f6f10584bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac6cb7eb016da3419f68cbd176769f6f10584bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ac6cb7eb016da3419f68cbd176769f6f10584bb", "patch": "@@ -1,3 +1,26 @@\n+2019-11-04  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-vrp.h (vrp_val_min): Remove handle_pointers argument.\n+\t(vrp_val_max): Same.\n+\t(vrp_val_is_min): Same.\n+\t(vrp_val_is_max): Same.\n+\t(value_range_base::nonzero_p): Remove last argument to\n+\tvrp_val_is_max.\n+\t* tree-vrp.c (vrp_val_min): Remove handle_pointers argument.\n+\t(vrp_val_max): Same.\n+\t(vrp_val_is_min): Same.\n+\t(vrp_val_is_max): Same.\n+\t(value_range_base::set_varying): Remove last argument to vrp_val*.\n+\t(value_range_base::dump): Same.\n+\t(value_range_base::set): Same.\n+\t(value_range_base::normalize_symbolics): Same.\n+\t(value_range_base::num_pairs): Same.\n+\t(value_range_base::lower_bound): Same.\n+\t(value_range_base::upper_bound): Same.\n+\t(ranges_from_anti_range): Remove handle_pointers argument.\n+\t(value_range_base::singleton_p): Remove last argument to\n+\tranges_from_anti_range.\n+\n 2019-11-04  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-reference.c (init_function_info): Initialize"}, {"sha": "0a0d7d760a7b001f82f2b777aabda18b161187df", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 34, "deletions": 36, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac6cb7eb016da3419f68cbd176769f6f10584bb/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac6cb7eb016da3419f68cbd176769f6f10584bb/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=9ac6cb7eb016da3419f68cbd176769f6f10584bb", "patch": "@@ -71,8 +71,7 @@ along with GCC; see the file COPYING3.  If not see\n \n static bool\n ranges_from_anti_range (const value_range_base *ar,\n-\t\t\tvalue_range_base *vr0, value_range_base *vr1,\n-\t\t\tbool handle_pointers = false);\n+\t\t\tvalue_range_base *vr0, value_range_base *vr1);\n \n /* Set of SSA names found live during the RPO traversal of the function\n    for still active basic-blocks.  */\n@@ -310,8 +309,8 @@ value_range_base::set_varying (tree type)\n   m_kind = VR_VARYING;\n   if (supports_type_p (type))\n     {\n-      m_min = vrp_val_min (type, true);\n-      m_max = vrp_val_max (type, true);\n+      m_min = vrp_val_min (type);\n+      m_max = vrp_val_max (type);\n     }\n   else\n     /* We can't do anything range-wise with these types.  */\n@@ -382,7 +381,7 @@ value_range_base::singleton_p (tree *result) const\n       if (num_pairs () == 1)\n \t{\n \t  value_range_base vr0, vr1;\n-\t  ranges_from_anti_range (this, &vr0, &vr1, true);\n+\t  ranges_from_anti_range (this, &vr0, &vr1);\n \t  return vr0.singleton_p (result);\n \t}\n     }\n@@ -429,7 +428,7 @@ value_range_base::dump (FILE *file) const\n       fprintf (file, \", \");\n \n       if (supports_type_p (ttype)\n-\t  && vrp_val_is_max (max (), true)\n+\t  && vrp_val_is_max (max ())\n \t  && TYPE_PRECISION (ttype) != 1)\n \tfprintf (file, \"+INF\");\n       else\n@@ -574,11 +573,11 @@ static assert_locus **asserts_for;\n /* Return the maximum value for TYPE.  */\n \n tree\n-vrp_val_max (const_tree type, bool handle_pointers)\n+vrp_val_max (const_tree type)\n {\n   if (INTEGRAL_TYPE_P (type))\n     return TYPE_MAX_VALUE (type);\n-  if (POINTER_TYPE_P (type) && handle_pointers)\n+  if (POINTER_TYPE_P (type))\n     {\n       wide_int max = wi::max_value (TYPE_PRECISION (type), TYPE_SIGN (type));\n       return wide_int_to_tree (const_cast<tree> (type), max);\n@@ -589,11 +588,11 @@ vrp_val_max (const_tree type, bool handle_pointers)\n /* Return the minimum value for TYPE.  */\n \n tree\n-vrp_val_min (const_tree type, bool handle_pointers)\n+vrp_val_min (const_tree type)\n {\n   if (INTEGRAL_TYPE_P (type))\n     return TYPE_MIN_VALUE (type);\n-  if (POINTER_TYPE_P (type) && handle_pointers)\n+  if (POINTER_TYPE_P (type))\n     return build_zero_cst (const_cast<tree> (type));\n   return NULL_TREE;\n }\n@@ -604,9 +603,9 @@ vrp_val_min (const_tree type, bool handle_pointers)\n    is not == to the integer constant with the same value in the type.  */\n \n bool\n-vrp_val_is_max (const_tree val, bool handle_pointers)\n+vrp_val_is_max (const_tree val)\n {\n-  tree type_max = vrp_val_max (TREE_TYPE (val), handle_pointers);\n+  tree type_max = vrp_val_max (TREE_TYPE (val));\n   return (val == type_max\n \t  || (type_max != NULL_TREE\n \t      && operand_equal_p (val, type_max, 0)));\n@@ -615,9 +614,9 @@ vrp_val_is_max (const_tree val, bool handle_pointers)\n /* Return whether VAL is equal to the minimum value of its type.  */\n \n bool\n-vrp_val_is_min (const_tree val, bool handle_pointers)\n+vrp_val_is_min (const_tree val)\n {\n-  tree type_min = vrp_val_min (TREE_TYPE (val), handle_pointers);\n+  tree type_min = vrp_val_min (TREE_TYPE (val));\n   return (val == type_min\n \t  || (type_min != NULL_TREE\n \t      && operand_equal_p (val, type_min, 0)));\n@@ -720,8 +719,8 @@ value_range_base::set (enum value_range_kind kind, tree min, tree max)\n       tree typ = TREE_TYPE (min);\n       if (supports_type_p (typ))\n \t{\n-\t  gcc_assert (vrp_val_min (typ, true));\n-\t  gcc_assert (vrp_val_max (typ, true));\n+\t  gcc_assert (vrp_val_min (typ));\n+\t  gcc_assert (vrp_val_max (typ));\n \t}\n       set_varying (typ);\n       return;\n@@ -730,15 +729,15 @@ value_range_base::set (enum value_range_kind kind, tree min, tree max)\n   /* Convert POLY_INT_CST bounds into worst-case INTEGER_CST bounds.  */\n   if (POLY_INT_CST_P (min))\n     {\n-      tree type_min = vrp_val_min (TREE_TYPE (min), true);\n+      tree type_min = vrp_val_min (TREE_TYPE (min));\n       widest_int lb\n \t= constant_lower_bound_with_limit (wi::to_poly_widest (min),\n \t\t\t\t\t   wi::to_widest (type_min));\n       min = wide_int_to_tree (TREE_TYPE (min), lb);\n     }\n   if (POLY_INT_CST_P (max))\n     {\n-      tree type_max = vrp_val_max (TREE_TYPE (max), true);\n+      tree type_max = vrp_val_max (TREE_TYPE (max));\n       widest_int ub\n \t= constant_upper_bound_with_limit (wi::to_poly_widest (max),\n \t\t\t\t\t   wi::to_widest (type_max));\n@@ -824,7 +823,7 @@ value_range_base::set (enum value_range_kind kind, tree min, tree max)\n         {\n \t  tree one = build_int_cst (TREE_TYPE (max), 1);\n \t  min = int_const_binop (PLUS_EXPR, max, one);\n-\t  max = vrp_val_max (TREE_TYPE (max), true);\n+\t  max = vrp_val_max (TREE_TYPE (max));\n \t  kind = VR_RANGE;\n         }\n       else if (is_max)\n@@ -1336,8 +1335,7 @@ vrp_set_zero_nonzero_bits (const tree expr_type,\n \n static bool\n ranges_from_anti_range (const value_range_base *ar,\n-\t\t\tvalue_range_base *vr0, value_range_base *vr1,\n-\t\t\tbool handle_pointers)\n+\t\t\tvalue_range_base *vr0, value_range_base *vr1)\n {\n   tree type = ar->type ();\n \n@@ -1350,18 +1348,18 @@ ranges_from_anti_range (const value_range_base *ar,\n   if (ar->kind () != VR_ANTI_RANGE\n       || TREE_CODE (ar->min ()) != INTEGER_CST\n       || TREE_CODE (ar->max ()) != INTEGER_CST\n-      || !vrp_val_min (type, handle_pointers)\n-      || !vrp_val_max (type, handle_pointers))\n+      || !vrp_val_min (type)\n+      || !vrp_val_max (type))\n     return false;\n \n-  if (tree_int_cst_lt (vrp_val_min (type, handle_pointers), ar->min ()))\n+  if (tree_int_cst_lt (vrp_val_min (type), ar->min ()))\n     vr0->set (VR_RANGE,\n-\t      vrp_val_min (type, handle_pointers),\n+\t      vrp_val_min (type),\n \t      wide_int_to_tree (type, wi::to_wide (ar->min ()) - 1));\n-  if (tree_int_cst_lt (ar->max (), vrp_val_max (type, handle_pointers)))\n+  if (tree_int_cst_lt (ar->max (), vrp_val_max (type)))\n     vr1->set (VR_RANGE,\n \t      wide_int_to_tree (type, wi::to_wide (ar->max ()) + 1),\n-\t      vrp_val_max (type, handle_pointers));\n+\t      vrp_val_max (type));\n   if (vr0->undefined_p ())\n     {\n       *vr0 = *vr1;\n@@ -6160,9 +6158,9 @@ value_range_base::normalize_symbolics () const\n     {\n       // [SYM, NUM] -> [-MIN, NUM]\n       if (min_symbolic)\n-\treturn value_range_base (VR_RANGE, vrp_val_min (ttype, true), max ());\n+\treturn value_range_base (VR_RANGE, vrp_val_min (ttype), max ());\n       // [NUM, SYM] -> [NUM, +MAX]\n-      return value_range_base (VR_RANGE, min (), vrp_val_max (ttype, true));\n+      return value_range_base (VR_RANGE, min (), vrp_val_max (ttype));\n     }\n   gcc_checking_assert (kind () == VR_ANTI_RANGE);\n   // ~[SYM, NUM] -> [NUM + 1, +MAX]\n@@ -6171,7 +6169,7 @@ value_range_base::normalize_symbolics () const\n       if (!vrp_val_is_max (max ()))\n \t{\n \t  tree n = wide_int_to_tree (ttype, wi::to_wide (max ()) + 1);\n-\t  return value_range_base (VR_RANGE, n, vrp_val_max (ttype, true));\n+\t  return value_range_base (VR_RANGE, n, vrp_val_max (ttype));\n \t}\n       value_range_base var;\n       var.set_varying (ttype);\n@@ -6181,7 +6179,7 @@ value_range_base::normalize_symbolics () const\n   if (!vrp_val_is_min (min ()))\n     {\n       tree n = wide_int_to_tree (ttype, wi::to_wide (min ()) - 1);\n-      return value_range_base (VR_RANGE, vrp_val_min (ttype, true), n);\n+      return value_range_base (VR_RANGE, vrp_val_min (ttype), n);\n     }\n   value_range_base var;\n   var.set_varying (ttype);\n@@ -6203,7 +6201,7 @@ value_range_base::num_pairs () const\n     {\n       // ~[MIN, X] has one sub-range of [X+1, MAX], and\n       // ~[X, MAX] has one sub-range of [MIN, X-1].\n-      if (vrp_val_is_min (m_min, true) || vrp_val_is_max (m_max, true))\n+      if (vrp_val_is_min (m_min) || vrp_val_is_max (m_max))\n \treturn 1;\n       return 2;\n     }\n@@ -6225,10 +6223,10 @@ value_range_base::lower_bound (unsigned pair) const\n   if (m_kind == VR_ANTI_RANGE)\n     {\n       tree typ = type ();\n-      if (pair == 1 || vrp_val_is_min (m_min, true))\n+      if (pair == 1 || vrp_val_is_min (m_min))\n \tt = wide_int_to_tree (typ, wi::to_wide (m_max) + 1);\n       else\n-\tt = vrp_val_min (typ, true);\n+\tt = vrp_val_min (typ);\n     }\n   else\n     t = m_min;\n@@ -6250,8 +6248,8 @@ value_range_base::upper_bound (unsigned pair) const\n   if (m_kind == VR_ANTI_RANGE)\n     {\n       tree typ = type ();\n-      if (pair == 1 || vrp_val_is_min (m_min, true))\n-\tt = vrp_val_max (typ, true);\n+      if (pair == 1 || vrp_val_is_min (m_min))\n+\tt = vrp_val_max (typ);\n       else\n \tt = wide_int_to_tree (typ, wi::to_wide (m_min) - 1);\n     }"}, {"sha": "5cd9473318878194e5b4aecc988599668c1484b1", "filename": "gcc/tree-vrp.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac6cb7eb016da3419f68cbd176769f6f10584bb/gcc%2Ftree-vrp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac6cb7eb016da3419f68cbd176769f6f10584bb/gcc%2Ftree-vrp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.h?ref=9ac6cb7eb016da3419f68cbd176769f6f10584bb", "patch": "@@ -286,11 +286,11 @@ extern bool range_int_cst_p (const value_range_base *);\n extern int compare_values (tree, tree);\n extern int compare_values_warnv (tree, tree, bool *);\n extern int operand_less_p (tree, tree);\n-extern bool vrp_val_is_min (const_tree, bool handle_pointers = false);\n-extern bool vrp_val_is_max (const_tree, bool handle_pointers = false);\n+extern bool vrp_val_is_min (const_tree);\n+extern bool vrp_val_is_max (const_tree);\n \n-extern tree vrp_val_min (const_tree, bool handle_pointers = false);\n-extern tree vrp_val_max (const_tree, bool handle_pointers = false);\n+extern tree vrp_val_min (const_tree);\n+extern tree vrp_val_max (const_tree);\n \n void range_fold_unary_expr (value_range_base *, enum tree_code, tree type,\n \t\t\t    const value_range_base *, tree op0_type);\n@@ -325,7 +325,7 @@ value_range_base::nonzero_p () const\n   return (m_kind == VR_RANGE\n \t  && TYPE_UNSIGNED (type ())\n \t  && integer_onep (m_min)\n-\t  && vrp_val_is_max (m_max, true));\n+\t  && vrp_val_is_max (m_max));\n }\n \n /* Return TRUE if *VR includes the value zero.  */"}]}