{"sha": "5e25fa22638feeb77bd830ec219edd34f4abe9dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUyNWZhMjI2MzhmZWViNzdiZDgzMGVjMjE5ZWRkMzRmNGFiZTlkZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-09-03T20:22:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-09-03T20:22:06Z"}, "message": "std_limits.h (__glibcpp_f32_min, [...]): Remove macros.\n\n\t* include/std/std_limits.h (__glibcpp_f32_min, __glibcpp_f32_max,\n\t__glibcpp_f32_digits, __glibcpp_f32_digits10, __glibcpp_f32_radix,\n\t__glibcpp_f32_epsilon, __glibcpp_f32_min_exponent,\n\t__glibcpp_f32_min_exponent10, __glibcpp_f32_max_exponent,\n\t__glibcpp_f32_max_exponent10, __glibcpp_f64_min, __glibcpp_f64_max,\n\t__glibcpp_f64_digits, __glibcpp_f64_digits10, __glibcpp_f64_radix,\n\t__glibcpp_f64_min_exponent, __glibcpp_f64_min_exponent10,\n\t__glibcpp_f64_max_exponent, __glibcpp_f64_max_exponent10,\n\t__glibcpp_f80_min, __glibcpp_f80_max, __glibcpp_f80_digits,\n\t__glibcpp_f80_digits10, __glibcpp_f80_radix, __glibcpp_f80_epsilon,\n\t__glibcpp_f80_min_exponent, __glibcpp_f80_min_exponent10,\n\t__glibcpp_f80_max_exponent, __glibcpp_f80_max_exponent10,\n\t__glibcpp_f96_min, __glibcpp_f96_max, __glibcpp_f96_digits,\n\t__glibcpp_f96_digits10, __glibcpp_f96_radix, __glibcpp_f96_epsilon,\n\t__glibcpp_f96_min_exponent, __glibcpp_f96_min_exponent10,\n\t__glibcpp_f96_max_exponent, __glibcpp_f96_max_exponent10,\n\t__glibcpp_f128_min, __glibcpp_f128_max, __glibcpp_f128_digits,\n\t__glibcpp_f128_digits10, __glibcpp_f128_radix, __glibcpp_f128_epsilon,\n\t__glibcpp_f128_min_exponent, __glibcpp_f128_min_exponent10,\n\t__glibcpp_f128_max_exponent, __glibcpp_f128_max_exponent10,\n\t__glibcpp_float_min, __glibcpp_float_max, __glibcpp_float_digits,\n\t__glibcpp_float_digits10, __glibcpp_float_radix,\n\t__glibcpp_float_epsilon, __glibcpp_float_min_exponent,\n\t__glibcpp_float_min_exponent10, __glibcpp_float_max_exponent,\n\t__glibcpp_float_max_exponent10, __glibcpp_double_min,\n\t__glibcpp_double_max, __glibcpp_double_digits,\n\t__glibcpp_double_digits10, __glibcpp_double_radix,\n\t__glibcpp_double_epsilon, __glibcpp_double_min_exponent,\n\t__glibcpp_double_min_exponent10, __glibcpp_double_max_exponent,\n\t__glibcpp_double_max_exponent10, __glibcpp_long_double_min,\n\t__glibcpp_long_double_max, __glibcpp_long_double_digits,\n\t__glibcpp_long_double_digits10, __glibcpp_long_double_radix,\n\t__glibcpp_long_double_epsilon, __glibcpp_long_double_min_exponent,\n\t__glibcpp_long_double_min_exponent10,\n\t__glibcpp_long_double_max_exponent,\n\t__glibcpp_long_double_max_exponent10): Remove macros.\n\t(std::numeric_limits<float>, std::numeric_limits<double>,\n\tstd::numeric_limits<long double>): Use protected float.h macros.\n\nFrom-SVN: r56770", "tree": {"sha": "526679b931f3aea9fe0a178c6a347789607364ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/526679b931f3aea9fe0a178c6a347789607364ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e25fa22638feeb77bd830ec219edd34f4abe9dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e25fa22638feeb77bd830ec219edd34f4abe9dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e25fa22638feeb77bd830ec219edd34f4abe9dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e25fa22638feeb77bd830ec219edd34f4abe9dd/comments", "author": null, "committer": null, "parents": [{"sha": "d57a4b98c468fbef724a721228b713c27cccf784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d57a4b98c468fbef724a721228b713c27cccf784", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d57a4b98c468fbef724a721228b713c27cccf784"}], "stats": {"total": 288, "additions": 71, "deletions": 217}, "files": [{"sha": "383ab79efc776277f1ce96ea2262fd0b3fc878d6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e25fa22638feeb77bd830ec219edd34f4abe9dd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e25fa22638feeb77bd830ec219edd34f4abe9dd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5e25fa22638feeb77bd830ec219edd34f4abe9dd", "patch": "@@ -1,3 +1,44 @@\n+2002-09-03  Richard Henderson  <rth@redhat.com>\n+\n+\t* include/std/std_limits.h (__glibcpp_f32_min, __glibcpp_f32_max,\n+\t__glibcpp_f32_digits, __glibcpp_f32_digits10, __glibcpp_f32_radix,\n+\t__glibcpp_f32_epsilon, __glibcpp_f32_min_exponent,\n+\t__glibcpp_f32_min_exponent10, __glibcpp_f32_max_exponent,\n+\t__glibcpp_f32_max_exponent10, __glibcpp_f64_min, __glibcpp_f64_max,\n+\t__glibcpp_f64_digits, __glibcpp_f64_digits10, __glibcpp_f64_radix,\n+\t__glibcpp_f64_min_exponent, __glibcpp_f64_min_exponent10,\n+\t__glibcpp_f64_max_exponent, __glibcpp_f64_max_exponent10,\n+\t__glibcpp_f80_min, __glibcpp_f80_max, __glibcpp_f80_digits,\n+\t__glibcpp_f80_digits10, __glibcpp_f80_radix, __glibcpp_f80_epsilon,\n+\t__glibcpp_f80_min_exponent, __glibcpp_f80_min_exponent10,\n+\t__glibcpp_f80_max_exponent, __glibcpp_f80_max_exponent10,\n+\t__glibcpp_f96_min, __glibcpp_f96_max, __glibcpp_f96_digits,\n+\t__glibcpp_f96_digits10, __glibcpp_f96_radix, __glibcpp_f96_epsilon,\n+\t__glibcpp_f96_min_exponent, __glibcpp_f96_min_exponent10,\n+\t__glibcpp_f96_max_exponent, __glibcpp_f96_max_exponent10,\n+\t__glibcpp_f128_min, __glibcpp_f128_max, __glibcpp_f128_digits,\n+\t__glibcpp_f128_digits10, __glibcpp_f128_radix, __glibcpp_f128_epsilon,\n+\t__glibcpp_f128_min_exponent, __glibcpp_f128_min_exponent10,\n+\t__glibcpp_f128_max_exponent, __glibcpp_f128_max_exponent10,\n+\t__glibcpp_float_min, __glibcpp_float_max, __glibcpp_float_digits,\n+\t__glibcpp_float_digits10, __glibcpp_float_radix,\n+\t__glibcpp_float_epsilon, __glibcpp_float_min_exponent,\n+\t__glibcpp_float_min_exponent10, __glibcpp_float_max_exponent,\n+\t__glibcpp_float_max_exponent10, __glibcpp_double_min,\n+\t__glibcpp_double_max, __glibcpp_double_digits,\n+\t__glibcpp_double_digits10, __glibcpp_double_radix,\n+\t__glibcpp_double_epsilon, __glibcpp_double_min_exponent,\n+\t__glibcpp_double_min_exponent10, __glibcpp_double_max_exponent,\n+\t__glibcpp_double_max_exponent10, __glibcpp_long_double_min,\n+\t__glibcpp_long_double_max, __glibcpp_long_double_digits,\n+\t__glibcpp_long_double_digits10, __glibcpp_long_double_radix,\n+\t__glibcpp_long_double_epsilon, __glibcpp_long_double_min_exponent,\n+\t__glibcpp_long_double_min_exponent10,\n+\t__glibcpp_long_double_max_exponent,\n+\t__glibcpp_long_double_max_exponent10): Remove macros.\n+\t(std::numeric_limits<float>, std::numeric_limits<double>,\n+\tstd::numeric_limits<long double>): Use protected float.h macros.\n+\n 2002-09-01  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* testsuite/Makefile.am:  Use LD_RUN_PATH when linking abi_check."}, {"sha": "8fe95b677fbb959989d9fb783f08ba05ceaa7cf7", "filename": "libstdc++-v3/include/std/std_limits.h", "status": "modified", "additions": 30, "deletions": 217, "changes": 247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e25fa22638feeb77bd830ec219edd34f4abe9dd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e25fa22638feeb77bd830ec219edd34f4abe9dd/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h?ref=5e25fa22638feeb77bd830ec219edd34f4abe9dd", "patch": "@@ -150,17 +150,7 @@\n #define __glibcpp_u64_digits 64\n #define __glibcpp_u64_digits10 19\n \n-#define __glibcpp_f32_min 1.17549435e-38F\n-#define __glibcpp_f32_max 3.40282347e+38F\n-#define __glibcpp_f32_digits 24\n-#define __glibcpp_f32_digits10 6\n-#define __glibcpp_f32_radix 2\n-#define __glibcpp_f32_epsilon 1.19209290e-07F\n #define __glibcpp_f32_round_error 1.0F\n-#define __glibcpp_f32_min_exponent -125\n-#define __glibcpp_f32_min_exponent10 -37\n-#define __glibcpp_f32_max_exponent 128\n-#define __glibcpp_f32_max_exponent10 38\n #if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n #  define __glibcpp_f32_infinity_bytes { 0x7f800000 }\n #  define __glibcpp_f32_has_infinity true\n@@ -191,17 +181,7 @@\n #ifndef __glibcpp_f32_is_iec559\n #  define __glibcpp_f32_is_iec559 false\n #endif \n-#define __glibcpp_f64_min 2.2250738585072014e-308\n-#define __glibcpp_f64_max 1.7976931348623157e+308\n-#define __glibcpp_f64_digits 53\n-#define __glibcpp_f64_digits10 15\n-#define __glibcpp_f64_radix 2\n-#define __glibcpp_f64_epsilon 2.2204460492503131e-16\n #define __glibcpp_f64_round_error 1.0\n-#define __glibcpp_f64_min_exponent -1021\n-#define __glibcpp_f64_min_exponent10 -307\n-#define __glibcpp_f64_max_exponent 1024\n-#define __glibcpp_f64_max_exponent10 308\n #if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n #  if __TARGET_FLOAT_WORDS_ORDER__ == __GCC_BIG_ENDIAN__\n #    define __glibcpp_f64_infinity_bytes { 0x7ff00000, 0x0 }\n@@ -239,17 +219,7 @@\n #ifndef __glibcpp_f64_is_iec559\n #  define __glibcpp_f64_is_iec559 false\n #endif \n-#define __glibcpp_f80_min 3.36210314311209350626e-4932L\n-#define __glibcpp_f80_max 1.18973149535723176502e+4932L\n-#define __glibcpp_f80_digits 64\n-#define __glibcpp_f80_digits10 18\n-#define __glibcpp_f80_radix 2\n-#define __glibcpp_f80_epsilon 1.08420217248550443401e-19L\n #define __glibcpp_f80_round_error 1.0L\n-#define __glibcpp_f80_min_exponent -16381\n-#define __glibcpp_f80_min_exponent10 -4931\n-#define __glibcpp_f80_max_exponent 16384\n-#define __glibcpp_f80_max_exponent10 4932\n #if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n #  if __TARGET_BYTES_ORDER__ == __GCC_BIG_ENDIAN__\n #    define __glibcpp_f80_infinity_bytes   \\\n@@ -295,17 +265,7 @@\n #ifndef __glibcpp_f80_is_iec559\n #  define __glibcpp_f80_is_iec559 false\n #endif \n-#define __glibcpp_f96_min 1.68105157155604675313e-4932L\n-#define __glibcpp_f96_max 1.18973149535723176502e+4932L\n-#define __glibcpp_f96_digits 64\n-#define __glibcpp_f96_digits10 18\n-#define __glibcpp_f96_radix 2\n-#define __glibcpp_f96_epsilon 1.08420217248550443401e-19L\n #define __glibcpp_f96_round_error 1.0L\n-#define __glibcpp_f96_min_exponent -16382\n-#define __glibcpp_f96_min_exponent10 -4931\n-#define __glibcpp_f96_max_exponent 16384\n-#define __glibcpp_f96_max_exponent10 4932\n #if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n #  if __TARGET_BYTES_ORDER__ == __GCC_BIG_ENDIAN__\n #    define __glibcpp_f96_infinity_bytes { 0x7ff0000, 0x0, 0x0 } \n@@ -340,17 +300,7 @@\n #  define __glibcpp_f96_denorm_min_bytes { }\n #  define __glibcpp_f96_has denorm_indeterminate\n #endif\n-#define __glibcpp_f128_min 3.362103143112093506262677817321752603E-4932L\n-#define __glibcpp_f128_max 1.189731495357231765085759326628007016E+4932L\n-#define __glibcpp_f128_digits 113\n-#define __glibcpp_f128_digits10 33\n-#define __glibcpp_f128_radix 2\n-#define __glibcpp_f128_epsilon 1.925929944387235853055977942584927319E-34L\n #define __glibcpp_f128_round_error 1.0L\n-#define __glibcpp_f128_min_exponent -16381\n-#define __glibcpp_f128_min_exponent10 -4931\n-#define __glibcpp_f128_max_exponent 16384\n-#define __glibcpp_f128_max_exponent10 4932\n #if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n #  if __TARGET_FLOAT_WORDS_ORDER__ == __GCC_BIG_ENDIAN__\n #    define __glibcpp_f128_infinity_bytes { 0x7fff0000, 0x0, 0x0, 0x0 }\n@@ -708,17 +658,7 @@\n //\n \n #if __FLOAT_BIT__ == 32\n-#  define __glibcpp_float_min __glibcpp_f32_min\n-#  define __glibcpp_float_max __glibcpp_f32_max\n-#  define __glibcpp_float_digits __glibcpp_f32_digits\n-#  define __glibcpp_float_digits10 __glibcpp_f32_digits10\n-#  define __glibcpp_float_radix __glibcpp_f32_radix\n-#  define __glibcpp_float_epsilon __glibcpp_f32_epsilon\n #  define __glibcpp_float_round_error __glibcpp_f32_round_error\n-#  define __glibcpp_float_min_exponent __glibcpp_f32_min_exponent\n-#  define __glibcpp_float_min_exponent10 __glibcpp_f32_min_exponent10\n-#  define __glibcpp_float_max_exponent __glibcpp_f32_max_exponent\n-#  define __glibcpp_float_max_exponent10 __glibcpp_f32_max_exponent10\n #  define __glibcpp_float_infinity_bytes __glibcpp_f32_infinity_bytes\n #  define __glibcpp_float_QNaN_bytes  __glibcpp_f32_QNaN_bytes\n #  define __glibcpp_float_SNaN_bytes  __glibcpp_f32_SNaN_bytes\n@@ -729,17 +669,7 @@\n #  define __glibcpp_float_has_denorm __glibcpp_f32_has_denorm\n #  define __glibcpp_float_is_iec559 __glibcpp_f32_is_iec559\n #elif __FLOAT_BIT__ == 64\n-#  define __glibcpp_float_min __glibcpp_f64_min\n-#  define __glibcpp_float_max __glibcpp_f64_max\n-#  define __glibcpp_float_digits __glibcpp_f64_digits\n-#  define __glibcpp_float_digits10 __glibcpp_f64_digits10\n-#  define __glibcpp_float_radix __glibcpp_f64_radix\n-#  define __glibcpp_float_epsilon __glibcpp_f64_epsilon\n #  define __glibcpp_float_round_error __glibcpp_f64_round_error\n-#  define __glibcpp_float_min_exponent __glibcpp_f64_min_exponent\n-#  define __glibcpp_float_min_exponent10 __glibcpp_f64_min_exponent10\n-#  define __glibcpp_float_max_exponent __glibcpp_f64_max_exponent\n-#  define __glibcpp_float_max_exponent10 __glibcpp_f64_max_exponent10\n #  define __glibcpp_float_infinity_bytes __glibcpp_f64_infinity_bytes\n #  define __glibcpp_float_QNaN_bytes  __glibcpp_f64_QNaN_bytes\n #  define __glibcpp_float_SNaN_bytes  __glibcpp_f64_SNaN_bytes\n@@ -750,17 +680,7 @@\n #  define __glibcpp_float_has_denorm __glibcpp_f64_has_denorm\n #  define __glibcpp_float_is_iec559 __glibcpp_f64_is_iec559\n #elif __FLOAT_BIT__ == 80\n-#  define __glibcpp_float_min __glibcpp_f80_min\n-#  define __glibcpp_float_max __glibcpp_f80_max\n-#  define __glibcpp_float_digits __glibcpp_f80_digits\n-#  define __glibcpp_float_digits10 __glibcpp_f80_digits10\n-#  define __glibcpp_float_radix __glibcpp_f80_radix\n-#  define __glibcpp_float_epsilon __glibcpp_f80_epsilon\n #  define __glibcpp_float_round_error __glibcpp_f80_round_error\n-#  define __glibcpp_float_min_exponent __glibcpp_f80_min_exponent\n-#  define __glibcpp_float_min_exponent10 __glibcpp_f80_min_exponent10\n-#  define __glibcpp_float_max_exponent __glibcpp_f80_max_exponent\n-#  define __glibcpp_float_max_exponent10 __glibcpp_f80_max_exponent10\n #  define __glibcpp_float_infinity_bytes __glibcpp_f80_infinity_bytes\n #  define __glibcpp_float_QNaN_bytes  __glibcpp_f80_QNaN_bytes\n #  define __glibcpp_float_SNaN_bytes  __glibcpp_f80_SNaN_bytes\n@@ -827,17 +747,7 @@\n // double\n \n #if __DOUBLE_BIT__ == 32\n-#  define __glibcpp_double_min __glibcpp_f32_min\n-#  define __glibcpp_double_max __glibcpp_f32_max\n-#  define __glibcpp_double_digits __glibcpp_f32_digits\n-#  define __glibcpp_double_digits10 __glibcpp_f32_digits10\n-#  define __glibcpp_double_radix __glibcpp_f32_radix\n-#  define __glibcpp_double_epsilon __glibcpp_f32_epsilon\n #  define __glibcpp_double_round_error __glibcpp_f32_round_error\n-#  define __glibcpp_double_min_exponent __glibcpp_f32_min_exponent\n-#  define __glibcpp_double_min_exponent10 __glibcpp_f32_min_exponent10\n-#  define __glibcpp_double_max_exponent __glibcpp_f32_max_exponent\n-#  define __glibcpp_double_max_exponent10 __glibcpp_f32_max_exponent10\n #  define __glibcpp_double_infinity_bytes __glibcpp_f32_infinity_bytes\n #  define __glibcpp_double_QNaN_bytes __glibcpp_f32_QNaN_bytes\n #  define __glibcpp_double_SNaN_bytes __glibcpp_f32_SNaN_bytes\n@@ -848,17 +758,7 @@\n #  define __glibcpp_double_has_denorm __glibcpp_f32_has_denorm\n #  define __glibcpp_double_is_iec559 __glibcpp_f32_is_iec559\n #elif __DOUBLE_BIT__ == 64\n-#  define __glibcpp_double_min __glibcpp_f64_min\n-#  define __glibcpp_double_max __glibcpp_f64_max\n-#  define __glibcpp_double_digits __glibcpp_f64_digits\n-#  define __glibcpp_double_digits10 __glibcpp_f64_digits10\n-#  define __glibcpp_double_radix __glibcpp_f64_radix\n-#  define __glibcpp_double_epsilon __glibcpp_f64_epsilon\n #  define __glibcpp_double_round_error __glibcpp_f64_round_error\n-#  define __glibcpp_double_min_exponent __glibcpp_f64_min_exponent\n-#  define __glibcpp_double_min_exponent10 __glibcpp_f64_min_exponent10\n-#  define __glibcpp_double_max_exponent __glibcpp_f64_max_exponent\n-#  define __glibcpp_double_max_exponent10 __glibcpp_f64_max_exponent10\n #  define __glibcpp_double_infinity_bytes __glibcpp_f64_infinity_bytes\n #  define __glibcpp_double_QNaN_bytes __glibcpp_f64_QNaN_bytes\n #  define __glibcpp_double_SNaN_bytes __glibcpp_f64_SNaN_bytes\n@@ -869,17 +769,7 @@\n #  define __glibcpp_double_has_denorm __glibcpp_f64_has_denorm\n #  define __glibcpp_double_is_iec559 __glibcpp_f64_is_iec559\n #elif __DOUBLE_BIT__ == 80\n-#  define __glibcpp_double_min __glibcpp_f80_min\n-#  define __glibcpp_double_max __glibcpp_f80_max\n-#  define __glibcpp_double_digits __glibcpp_f80_digits\n-#  define __glibcpp_double_digits10 __glibcpp_f80_digits10\n-#  define __glibcpp_double_radix __glibcpp_f80_radix\n-#  define __glibcpp_double_epsilon __glibcpp_f80_epsilon\n #  define __glibcpp_double_round_error __glibcpp_f80_round_error\n-#  define __glibcpp_double_min_exponent __glibcpp_f80_min_exponent\n-#  define __glibcpp_double_min_exponent10 __glibcpp_f80_min_exponent10\n-#  define __glibcpp_double_max_exponent __glibcpp_f80_max_exponent\n-#  define __glibcpp_double_max_exponent10 __glibcpp_f80_max_exponent10\n #  define __glibcpp_double_infinity_bytes __glibcpp_f80_infinity_bytes\n #  define __glibcpp_double_QNaN_bytes __glibcpp_f80_QNaN_bytes\n #  define __glibcpp_double_SNaN_bytes __glibcpp_f80_SNaN_bytes\n@@ -946,17 +836,7 @@\n // long double\n \n #if __LONG_DOUBLE_BIT__ == 32\n-#  define __glibcpp_long_double_min __glibcpp_f32_min\n-#  define __glibcpp_long_double_max __glibcpp_f32_max\n-#  define __glibcpp_long_double_digits __glibcpp_f32_digits\n-#  define __glibcpp_long_double_digits10 __glibcpp_f32_digits10\n-#  define __glibcpp_long_double_radix __glibcpp_f32_radix\n-#  define __glibcpp_long_double_epsilon __glibcpp_f32_epsilon\n #  define __glibcpp_long_double_round_error __glibcpp_f32_round_error\n-#  define __glibcpp_long_double_min_exponent __glibcpp_f32_min_exponent\n-#  define __glibcpp_long_double_min_exponent10 __glibcpp_f32_min_exponent10\n-#  define __glibcpp_long_double_max_exponent __glibcpp_f32_max_exponent\n-#  define __glibcpp_long_double_max_exponent10 __glibcpp_f32_max_exponent10\n #  define __glibcpp_long_double_infinity_bytes __glibcpp_f32_infinity_bytes\n #  define __glibcpp_long_double_QNaN_bytes __glibcpp_f32_QNaN_bytes\n #  define __glibcpp_long_double_SNaN_bytes __glibcpp_f32_SNaN_bytes\n@@ -967,17 +847,7 @@\n #  define __glibcpp_long_double_has_denorm __glibcpp_f32_has_denorm\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f32_is_iec559\n #elif __LONG_DOUBLE_BIT__ == 64\n-#  define __glibcpp_long_double_min __glibcpp_f64_min\n-#  define __glibcpp_long_double_max __glibcpp_f64_max\n-#  define __glibcpp_long_double_digits __glibcpp_f64_digits\n-#  define __glibcpp_long_double_digits10 __glibcpp_f64_digits10\n-#  define __glibcpp_long_double_radix __glibcpp_f64_radix\n-#  define __glibcpp_long_double_epsilon __glibcpp_f64_epsilon\n #  define __glibcpp_long_double_round_error __glibcpp_f64_round_error\n-#  define __glibcpp_long_double_min_exponent __glibcpp_f64_min_exponent\n-#  define __glibcpp_long_double_min_exponent10 __glibcpp_f64_min_exponent10\n-#  define __glibcpp_long_double_max_exponent __glibcpp_f64_max_exponent\n-#  define __glibcpp_long_double_max_exponent10 __glibcpp_f64_max_exponent10\n #  define __glibcpp_long_double_infinity_bytes __glibcpp_f64_infinity_bytes\n #  define __glibcpp_long_double_QNaN_bytes __glibcpp_f64_QNaN_bytes\n #  define __glibcpp_long_double_SNaN_bytes __glibcpp_f64_SNaN_bytes\n@@ -988,17 +858,7 @@\n #  define __glibcpp_long_double_has_denorm __glibcpp_f64_has_denorm\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f64_is_iec559\n #elif __LONG_DOUBLE_BIT__ == 80\n-#  define __glibcpp_long_double_min __glibcpp_f80_min\n-#  define __glibcpp_long_double_max __glibcpp_f80_max\n-#  define __glibcpp_long_double_digits __glibcpp_f80_digits\n-#  define __glibcpp_long_double_digits10 __glibcpp_f80_digits10\n-#  define __glibcpp_long_double_radix __glibcpp_f80_radix\n-#  define __glibcpp_long_double_epsilon __glibcpp_f80_epsilon\n #  define __glibcpp_long_double_round_error __glibcpp_f80_round_error\n-#  define __glibcpp_long_double_min_exponent __glibcpp_f80_min_exponent\n-#  define __glibcpp_long_double_min_exponent10 __glibcpp_f80_min_exponent10\n-#  define __glibcpp_long_double_max_exponent __glibcpp_f80_max_exponent\n-#  define __glibcpp_long_double_max_exponent10 __glibcpp_f80_max_exponent10\n #  define __glibcpp_long_double_infinity_bytes __glibcpp_f80_infinity_bytes\n #  define __glibcpp_long_double_QNaN_bytes __glibcpp_f80_QNaN_bytes\n #  define __glibcpp_long_double_SNaN_bytes __glibcpp_f80_SNaN_bytes\n@@ -1009,17 +869,7 @@\n #  define __glibcpp_long_double_has_denorm __glibcpp_f80_has_denorm\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f80_is_iec559\n #elif __LONG_DOUBLE_BIT__ == 96\n-#  define __glibcpp_long_double_min __glibcpp_f96_min\n-#  define __glibcpp_long_double_max __glibcpp_f96_max\n-#  define __glibcpp_long_double_digits __glibcpp_f96_digits\n-#  define __glibcpp_long_double_digits10 __glibcpp_f96_digits10\n-#  define __glibcpp_long_double_radix __glibcpp_f96_radix\n-#  define __glibcpp_long_double_epsilon __glibcpp_f96_epsilon\n #  define __glibcpp_long_double_round_error __glibcpp_f96_round_error\n-#  define __glibcpp_long_double_min_exponent __glibcpp_f96_min_exponent\n-#  define __glibcpp_long_double_min_exponent10 __glibcpp_f96_min_exponent10\n-#  define __glibcpp_long_double_max_exponent __glibcpp_f96_max_exponent\n-#  define __glibcpp_long_double_max_exponent10 __glibcpp_f96_max_exponent10\n #  define __glibcpp_long_double_infinity_bytes __glibcpp_f96_infinity_bytes\n #  define __glibcpp_long_double_QNaN_bytes __glibcpp_f96_QNaN_bytes\n #  define __glibcpp_long_double_SNaN_bytes __glibcpp_f96_SNaN_bytes\n@@ -1030,17 +880,7 @@\n #  define __glibcpp_long_double_has_denorm __glibcpp_f96_has_denorm\n #  define __glibcpp_long_double_is_iec559 __glibcpp_f96_is_iec559\n #elif __LONG_DOUBLE_BIT__ == 128\n-#  define __glibcpp_long_double_min __glibcpp_f128_min\n-#  define __glibcpp_long_double_max __glibcpp_f128_max\n-#  define __glibcpp_long_double_digits __glibcpp_f128_digits\n-#  define __glibcpp_long_double_digits10 __glibcpp_f128_digits10\n-#  define __glibcpp_long_double_radix __glibcpp_f128_radix\n-#  define __glibcpp_long_double_epsilon __glibcpp_f128_epsilon\n #  define __glibcpp_long_double_round_error __glibcpp_f128_round_error\n-#  define __glibcpp_long_double_min_exponent __glibcpp_f128_min_exponent\n-#  define __glibcpp_long_double_min_exponent10 __glibcpp_f128_min_exponent10\n-#  define __glibcpp_long_double_max_exponent __glibcpp_f128_max_exponent\n-#  define __glibcpp_long_double_max_exponent10 __glibcpp_f128_max_exponent10\n #  define __glibcpp_long_double_infinity_bytes __glibcpp_f128_infinity_bytes\n #  define __glibcpp_long_double_QNaN_bytes __glibcpp_f128_QNaN_bytes\n #  define __glibcpp_long_double_SNaN_bytes __glibcpp_f128_SNaN_bytes\n@@ -1970,25 +1810,25 @@ namespace std\n       static const bool is_specialized = true;\n \n       static float min() throw()\n-      { return __glibcpp_float_min; }\n+      { return __FLT_MIN__; }\n       static float max() throw()\n-      { return __glibcpp_float_max; }\n+      { return __FLT_MAX__; }\n \n-      static const int digits = __glibcpp_float_digits;\n-      static const int digits10 = __glibcpp_float_digits10;\n+      static const int digits = __FLT_MANT_DIG__;\n+      static const int digits10 = __FLT_DIG__;\n       static const bool is_signed = true;\n       static const bool is_integer = false;\n       static const bool is_exact = false;\n-      static const int radix = __glibcpp_float_radix;\n+      static const int radix = __FLT_RADIX__;\n       static float epsilon() throw()\n-      { return __glibcpp_float_epsilon; }\n+      { return __FLT_EPSILON__; }\n       static float round_error() throw()\n       { return __glibcpp_float_round_error; }\n \n-      static const int min_exponent = __glibcpp_float_min_exponent;\n-      static const int min_exponent10 = __glibcpp_float_min_exponent10;\n-      static const int max_exponent = __glibcpp_float_max_exponent;\n-      static const int max_exponent10 = __glibcpp_float_max_exponent10;\n+      static const int min_exponent = __FLT_MIN_EXP__;\n+      static const int min_exponent10 = __FLT_MIN_10_EXP__;\n+      static const int max_exponent = __FLT_MAX_EXP__;\n+      static const int max_exponent10 = __FLT_MAX_10_EXP__;\n \n       static const bool has_infinity = __glibcpp_float_has_infinity;\n       static const bool has_quiet_NaN = __glibcpp_float_has_QNaN;\n@@ -2014,16 +1854,7 @@ namespace std\n       static const float_round_style round_style = __glibcpp_float_round_style;\n     };\n \n-#undef __glibcpp_float_min\n-#undef __glibcpp_float_max\n-#undef __glibcpp_float_digits\n-#undef __glibcpp_float_digits10\n-#undef __glibcpp_float_radix\n #undef __glibcpp_float_round_error\n-#undef __glibcpp_float_min_exponent\n-#undef __glibcpp_float_min_exponent10\n-#undef __glibcpp_float_max_exponent\n-#undef __glibcpp_float_max_exponent10\n #undef __glibcpp_float_has_infinity\n #undef __glibcpp_float_has_QNaN\n #undef __glibcpp_float_has_SNaN\n@@ -2042,25 +1873,25 @@ namespace std\n       static const bool is_specialized = true;\n \n       static double min() throw()\n-      { return __glibcpp_double_min; }\n+      { return __DBL_MIN__; }\n       static double max() throw()\n-      { return __glibcpp_double_max; }\n+      { return __DBL_MAX__; }\n \n-      static const int digits = __glibcpp_double_digits;\n-      static const int digits10 = __glibcpp_double_digits10;\n+      static const int digits = __DBL_MANT_DIG__;\n+      static const int digits10 = __DBL_DIG__;\n       static const bool is_signed = true;\n       static const bool is_integer = false;\n       static const bool is_exact = false;\n-      static const int radix = __glibcpp_double_radix;\n+      static const int radix = __FLT_RADIX__;\n       static double epsilon() throw()\n-      { return __glibcpp_double_epsilon; }\n+      { return __DBL_EPSILON__; }\n       static double round_error() throw()\n       { return __glibcpp_double_round_error; }\n \n-      static const int min_exponent = __glibcpp_double_min_exponent;\n-      static const int min_exponent10 = __glibcpp_double_min_exponent10;\n-      static const int max_exponent = __glibcpp_double_max_exponent;\n-      static const int max_exponent10 = __glibcpp_double_max_exponent10;\n+      static const int min_exponent = __DBL_MIN_EXP__;\n+      static const int min_exponent10 = __DBL_MIN_10_EXP__;\n+      static const int max_exponent = __DBL_MAX_EXP__;\n+      static const int max_exponent10 = __DBL_MAX_10_EXP__;\n \n       static const bool has_infinity = __glibcpp_double_has_infinity;\n       static const bool has_quiet_NaN = __glibcpp_double_has_QNaN;\n@@ -2088,16 +1919,7 @@ namespace std\n               __glibcpp_double_round_style;\n     };\n \n-#undef __glibcpp_double_min\n-#undef __glibcpp_double_max\n-#undef __glibcpp_double_digits\n-#undef __glibcpp_double_digits10\n-#undef __glibcpp_double_radix\n #undef __glibcpp_double_round_error\n-#undef __glibcpp_double_min_exponent\n-#undef __glibcpp_double_min_exponent10\n-#undef __glibcpp_double_max_exponent\n-#undef __glibcpp_double_max_exponent10\n #undef __glibcpp_double_has_infinity\n #undef __glibcpp_double_has_QNaN\n #undef __glibcpp_double_has_SNaN\n@@ -2117,25 +1939,25 @@ namespace std\n       static const bool is_specialized = true;\n \n       static long double min() throw()\n-      { return __glibcpp_long_double_min; }\n+      { return __LDBL_MIN__; }\n       static long double max() throw()\n-      { return __glibcpp_long_double_max; }\n+      { return __LDBL_MAX__; }\n \n-      static const int digits = __glibcpp_long_double_digits;\n-      static const int digits10 = __glibcpp_long_double_digits10;\n+      static const int digits = __LDBL_MANT_DIG__;\n+      static const int digits10 = __LDBL_DIG__;\n       static const bool is_signed = true;\n       static const bool is_integer = false;\n       static const bool is_exact = false;\n-      static const int radix = __glibcpp_long_double_radix;\n+      static const int radix = __FLT_RADIX__;\n       static long double epsilon() throw()\n-      { return __glibcpp_long_double_epsilon; }\n+      { return __LDBL_EPSILON__; }\n       static long double round_error() throw()\n       { return __glibcpp_long_double_round_error; }\n \n-      static const int min_exponent = __glibcpp_long_double_min_exponent;\n-      static const int min_exponent10 = __glibcpp_long_double_min_exponent10;\n-      static const int max_exponent = __glibcpp_long_double_max_exponent;\n-      static const int max_exponent10 = __glibcpp_long_double_max_exponent10;\n+      static const int min_exponent = __LDBL_MIN_EXP__;\n+      static const int min_exponent10 = __LDBL_MIN_10_EXP__;\n+      static const int max_exponent = __LDBL_MAX_EXP__;\n+      static const int max_exponent10 = __LDBL_MAX_10_EXP__;\n \n       static const bool has_infinity = __glibcpp_long_double_has_infinity;\n       static const bool has_quiet_NaN = __glibcpp_long_double_has_SNaN;\n@@ -2179,16 +2001,7 @@ namespace std\n         __glibcpp_long_double_round_style;\n     };\n \n-#undef __glibcpp_long_double_min\n-#undef __glibcpp_long_double_max\n-#undef __glibcpp_long_double_digits\n-#undef __glibcpp_long_double_digits10\n-#undef __glibcpp_long_double_radix\n #undef __glibcpp_long_double_round_error\n-#undef __glibcpp_long_double_min_exponent\n-#undef __glibcpp_long_double_min_exponent10\n-#undef __glibcpp_long_double_max_exponent\n-#undef __glibcpp_long_double_max_exponent10\n #undef __glibcpp_long_double_has_infinity\n #undef __glibcpp_long_double_has_QNaN\n #undef __glibcpp_long_double_has_SNaN"}]}