{"sha": "4003301d719865df5b0f445ab4d80339d86572d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAwMzMwMWQ3MTk4NjVkZjViMGY0NDVhYjRkODAzMzlkODY1NzJkNw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-13T17:57:47Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-13T17:57:47Z"}, "message": "re PR c/30551 (-pedantic does not include -Wmain, but -pedantic-errors does make -Wmain cause error messages)\n\n2008-08-13  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR 30551\n\t* doc/invoke.texi (Wmain): Update.\n\t* c-decl.c (start_decl): warn_main is only 0 or 1.\n\t(start_function): Likewise. Fix formatting.\n\t(finish_function): Delete redundant warning.\n\t* c.opt (Wmain): Add Var(warn_main) and Init(-1).\n\t* c-opts (c_common_handle_option): -Wall only has effect if\n\twarn_main is uninitialized. OPT_Wmain is automatically\n\thandled. -pedantic also enables Wmain.\n\t(c_common_post_options): Handle all logic for Wmain here.\n\t* c-common.c (warn_main): Delete.\n\t(check_main_parameter_types): Make pedwarns conditional on\n\tOPT_Wmain.\n\t* c-common.h (warn_main): Delete.\ncp/\t\n\t* decl.c (grokfndecl): Call check_main_parameters_type only if\n\t-Wmain.\ntestsuite/\n\t* gcc.dg/pr30551.c: New.\n\t* gcc.dg/pr30551-2.c: New.\n\t* gcc.dg/pr30551-3.c: New.\n\t* gcc.dg/pr30551-4.c: New.\n\t* gcc.dg/pr30551-5.c: New.\n\t* gcc.dg/pr30551-6.c: New.\n\t* gcc.dg/tree-ssa/reassoc-3.c: Don't compile with -pedantic-errors.\n\t* g++.dg/warn/pr30551.C: New.\n\t* g++.dg/warn/pr30551-2.C: New.\n\nFrom-SVN: r139063", "tree": {"sha": "d1fe225e6b0637a6333ddd4ed28cd99d4d43c234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1fe225e6b0637a6333ddd4ed28cd99d4d43c234"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4003301d719865df5b0f445ab4d80339d86572d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4003301d719865df5b0f445ab4d80339d86572d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4003301d719865df5b0f445ab4d80339d86572d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4003301d719865df5b0f445ab4d80339d86572d7/comments", "author": null, "committer": null, "parents": [{"sha": "6cd7942d77ea3017ce217daf9621fadc35fe8f8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd7942d77ea3017ce217daf9621fadc35fe8f8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cd7942d77ea3017ce217daf9621fadc35fe8f8f"}], "stats": {"total": 202, "additions": 140, "deletions": 62}, "files": [{"sha": "767f3b324705f28ba818c7c65a6524e390191a24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4003301d719865df5b0f445ab4d80339d86572d7", "patch": "@@ -1,3 +1,20 @@\n+2008-08-13  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 30551\n+\t* doc/invoke.texi (Wmain): Update.\n+\t* c-decl.c (start_decl): warn_main is only 0 or 1.\n+\t(start_function): Likewise. Fix formatting.\n+\t(finish_function): Delete redundant warning.\n+\t* c.opt (Wmain): Add Var(warn_main) and Init(-1).\n+\t* c-opts (c_common_handle_option): -Wall only has effect if\n+\twarn_main is uninitialized. OPT_Wmain is automatically\n+\thandled. -pedantic also enables Wmain.\n+\t(c_common_post_options): Handle all logic for Wmain here.\n+\t* c-common.c (warn_main): Delete.\n+\t(check_main_parameter_types): Make pedwarns conditional on\n+\tOPT_Wmain.\n+\t* c-common.h (warn_main): Delete.\n+\n 2008-08-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/36701"}, {"sha": "8bac9cb4f0314a03f895226d0ae9b3017d524646", "filename": "gcc/c-common.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4003301d719865df5b0f445ab4d80339d86572d7", "patch": "@@ -342,10 +342,6 @@ int flag_isoc99;\n \n int flag_hosted = 1;\n \n-/* Warn if main is suspicious.  */\n-\n-int warn_main;\n-\n \n /* ObjC language option variables.  */\n \n@@ -1363,25 +1359,26 @@ check_main_parameter_types (tree decl)\n        {\n        case 1:\n          if (TYPE_MAIN_VARIANT (type) != integer_type_node)\n-           pedwarn (0, \"first argument of %q+D should be %<int%>\", decl);\n+           pedwarn (OPT_Wmain, \"first argument of %q+D should be %<int%>\", \n+\t\t    decl);\n          break;\n \n        case 2:\n          if (TREE_CODE (type) != POINTER_TYPE\n              || TREE_CODE (TREE_TYPE (type)) != POINTER_TYPE\n              || (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (type)))\n                  != char_type_node))\n-           pedwarn (0, \"second argument of %q+D should be %<char **%>\",\n-\t\t     decl);\n+           pedwarn (OPT_Wmain, \"second argument of %q+D should be %<char **%>\",\n+\t\t    decl);\n          break;\n \n        case 3:\n          if (TREE_CODE (type) != POINTER_TYPE\n              || TREE_CODE (TREE_TYPE (type)) != POINTER_TYPE\n              || (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (type)))\n                  != char_type_node))\n-           pedwarn (0, \"third argument of %q+D should probably be \"\n-\t\t     \"%<char **%>\", decl);\n+\t   pedwarn (OPT_Wmain, \"third argument of %q+D should probably be \"\n+\t\t    \"%<char **%>\", decl);\n          break;\n        }\n    }\n@@ -1390,7 +1387,7 @@ check_main_parameter_types (tree decl)\n     argument because it's only mentioned in an appendix of the\n     standard.  */\n   if (argct > 0 && (argct < 2 || argct > 3))\n-   pedwarn (0, \"%q+D takes only zero or two arguments\", decl);\n+    pedwarn (OPT_Wmain, \"%q+D takes only zero or two arguments\", decl);\n }\n \n /* True if pointers to distinct types T1 and T2 can be converted to"}, {"sha": "b0abe3e1a511362b2c82e9d1eeb169690e13b66f", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=4003301d719865df5b0f445ab4d80339d86572d7", "patch": "@@ -498,11 +498,6 @@ extern int flag_isoc99;\n \n extern int flag_hosted;\n \n-/* Warn if main is suspicious.  */\n-\n-extern int warn_main;\n-\n-\n /* ObjC language option variables.  */\n \n "}, {"sha": "7be2ca4e60ad64d620b58d853c6f1dd9211d2280", "filename": "gcc/c-decl.c", "status": "modified", "additions": 15, "deletions": 28, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=4003301d719865df5b0f445ab4d80339d86572d7", "patch": "@@ -3153,8 +3153,7 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n   if (!decl)\n     return 0;\n \n-  if (warn_main > 0 && TREE_CODE (decl) != FUNCTION_DECL\n-      && MAIN_NAME_P (DECL_NAME (decl)))\n+  if (TREE_CODE (decl) != FUNCTION_DECL && MAIN_NAME_P (DECL_NAME (decl)))\n     warning (OPT_Wmain, \"%q+D is usually a function\", decl);\n \n   if (initialized)\n@@ -6207,13 +6206,13 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n     maybe_apply_pragma_weak (decl1);\n \n   /* Warn for unlikely, improbable, or stupid declarations of `main'.  */\n-  if (warn_main > 0 && MAIN_NAME_P (DECL_NAME (decl1)))\n+  if (warn_main && MAIN_NAME_P (DECL_NAME (decl1)))\n     {\n       if (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (decl1)))\n \t  != integer_type_node)\n \tpedwarn (OPT_Wmain, \"return type of %q+D is not %<int%>\", decl1);\n \n-      check_main_parameter_types(decl1);\n+      check_main_parameter_types (decl1);\n \n       if (!TREE_PUBLIC (decl1))\n \tpedwarn (OPT_Wmain, \"%q+D is normally a non-static function\", decl1);\n@@ -6672,30 +6671,18 @@ finish_function (void)\n   if (DECL_RESULT (fndecl) && DECL_RESULT (fndecl) != error_mark_node)\n     DECL_CONTEXT (DECL_RESULT (fndecl)) = fndecl;\n \n-  if (MAIN_NAME_P (DECL_NAME (fndecl)) && flag_hosted)\n-    {\n-      if (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (fndecl)))\n-\t  != integer_type_node)\n-\t{\n-\t  /* If warn_main is 1 (-Wmain) or 2 (-Wall), we have already warned.\n-\t     If warn_main is -1 (-Wno-main) we don't want to be warned.  */\n-\t  if (!warn_main)\n-\t    pedwarn (0, \"return type of %q+D is not %<int%>\", fndecl);\n-\t}\n-      else\n-\t{\n-\t  if (flag_isoc99)\n-\t    {\n-\t      tree stmt = c_finish_return (integer_zero_node);\n-\t      /* Hack.  We don't want the middle-end to warn that this return\n-\t\t is unreachable, so we mark its location as special.  Using\n-\t\t UNKNOWN_LOCATION has the problem that it gets clobbered in\n-\t\t annotate_one_with_locus.  A cleaner solution might be to\n-\t\t ensure ! should_carry_locus_p (stmt), but that needs a flag.\n-\t      */\n-\t      SET_EXPR_LOCATION (stmt, BUILTINS_LOCATION);\n-\t    }\n-\t}\n+  if (MAIN_NAME_P (DECL_NAME (fndecl)) && flag_hosted\n+      && TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (fndecl)))\n+      == integer_type_node && flag_isoc99)\n+    {\n+      tree stmt = c_finish_return (integer_zero_node);\n+      /* Hack.  We don't want the middle-end to warn that this return\n+\t is unreachable, so we mark its location as special.  Using\n+\t UNKNOWN_LOCATION has the problem that it gets clobbered in\n+\t annotate_one_with_locus.  A cleaner solution might be to\n+\t ensure ! should_carry_locus_p (stmt), but that needs a flag.\n+      */\n+      SET_EXPR_LOCATION (stmt, BUILTINS_LOCATION);\n     }\n \n   /* Tie off the statement tree for this function.  */"}, {"sha": "300bf14f50397a9937e291b03e0a45f8b475777a", "filename": "gcc/c-opts.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=4003301d719865df5b0f445ab4d80339d86572d7", "patch": "@@ -404,9 +404,12 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n \twarn_uninitialized = (value ? 2 : 0);\n \n       if (!c_dialect_cxx ())\n-\t/* We set this to 2 here, but 1 in -Wmain, so -ffreestanding\n-\t   can turn it off only if it's not explicit.  */\n-\twarn_main = value * 2;\n+\t{\n+\t  /* We set this to 2 here, but 1 in -Wmain, so -ffreestanding\n+\t     can turn it off only if it's not explicit.  */\n+\t  if (warn_main == -1)\n+\t    warn_main = (value ? 2 : 0);\n+\t}\n       else\n \t{\n \t  /* C++-specific warnings.  */\n@@ -467,13 +470,6 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       cpp_opts->warn_invalid_pch = value;\n       break;\n \n-    case OPT_Wmain:\n-      if (value)\n-\twarn_main = 1;\n-      else\n-\twarn_main = -1;\n-      break;\n-\n     case OPT_Wmissing_include_dirs:\n       cpp_opts->warn_missing_include_dirs = value;\n       break;\n@@ -615,9 +611,6 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n     case OPT_fhosted:\n       flag_hosted = value;\n       flag_no_builtin = !value;\n-      /* warn_main will be 2 if set by -Wall, 1 if set by -Wmain */\n-      if (!value && warn_main == 2)\n-\twarn_main = 0;\n       break;\n \n     case OPT_fshort_double:\n@@ -907,6 +900,8 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n \twarn_pointer_sign = 1;\n       if (warn_overlength_strings == -1)\n \twarn_overlength_strings = 1;\n+      if (warn_main == -1)\n+\twarn_main = 2;\n       break;\n \n     case OPT_print_objc_runtime_info:\n@@ -1071,6 +1066,15 @@ c_common_post_options (const char **pfilename)\n   if (warn_overlength_strings == -1 || c_dialect_cxx ())\n     warn_overlength_strings = 0;\n \n+  /* Wmain is enabled by default in C++ but not in C.  */\n+  /* Wmain is disabled by default for -ffreestanding (!flag_hosted),\n+     even if -Wall was given (warn_main will be 2 if set by -Wall, 1\n+     if set by -Wmain).  */\n+  if (warn_main == -1)\n+    warn_main = (c_dialect_cxx () && flag_hosted) ? 1 : 0;\n+  else if (warn_main == 2)\n+    warn_main = flag_hosted ? 1 : 0;\n+\n   /* In C, -Wconversion enables -Wsign-conversion (unless disabled\n      through -Wno-sign-conversion). While in C++,\n      -Wsign-conversion needs to be requested explicitly.  */"}, {"sha": "d33fa46e8a7ba79f04ba58af3a3784fef5669e31", "filename": "gcc/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=4003301d719865df5b0f445ab4d80339d86572d7", "patch": "@@ -281,7 +281,7 @@ C ObjC C++ ObjC++ Var(warn_long_long) Init(1) Warning\n Do not warn about using \\\"long long\\\" when -pedantic\n \n Wmain\n-C ObjC C++ ObjC++ Warning\n+C ObjC C++ ObjC++ Var(warn_main) Init(-1) Warning\n Warn about suspicious declarations of \\\"main\\\"\n \n Wmissing-braces"}, {"sha": "e34fb2270a9324eff06a6c6254f78a6377ba398e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4003301d719865df5b0f445ab4d80339d86572d7", "patch": "@@ -1,3 +1,9 @@\n+2008-08-13  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 30551\n+\t* decl.c (grokfndecl): Call check_main_parameters_type only if\n+\t-Wmain.\n+\n 2008-08-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/37087"}, {"sha": "3cd251128f1f2c2c1a26529bffd2c1a7f879a623", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4003301d719865df5b0f445ab4d80339d86572d7", "patch": "@@ -6692,7 +6692,8 @@ grokfndecl (tree ctype,\n \t  newtype = build_function_type (integer_type_node, oldtypeargs);\n \t  TREE_TYPE (decl) = newtype;\n \t}\n-      check_main_parameter_types (decl);\n+      if (warn_main)\n+\tcheck_main_parameter_types (decl);\n     }\n \n   if (ctype != NULL_TREE"}, {"sha": "56a0bdadc55e9a92303b7b56743030b2317ebdc8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4003301d719865df5b0f445ab4d80339d86572d7", "patch": "@@ -2940,10 +2940,11 @@ This warning is also enabled by @option{-Wextra}.\n @item -Wmain\n @opindex Wmain\n @opindex Wno-main\n-Warn if the type of @samp{main} is suspicious.  @samp{main} should be a\n-function with external linkage, returning int, taking either zero\n-arguments, two, or three arguments of appropriate types.\n-This warning is enabled by @option{-Wall}.\n+Warn if the type of @samp{main} is suspicious.  @samp{main} should be\n+a function with external linkage, returning int, taking either zero\n+arguments, two, or three arguments of appropriate types.  This warning\n+is enabled by default in C++ and is enabled by either @option{-Wall}\n+or @option{-pedantic}.\n \n @item -Wmissing-braces\n @opindex Wmissing-braces"}, {"sha": "1f1890a1435a79765de41b1185d56cc565c08956", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4003301d719865df5b0f445ab4d80339d86572d7", "patch": "@@ -1,3 +1,16 @@\n+2008-08-13  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 30551\n+\t* gcc.dg/pr30551.c: New.\n+\t* gcc.dg/pr30551-2.c: New.\n+\t* gcc.dg/pr30551-3.c: New.\n+\t* gcc.dg/pr30551-4.c: New.\n+\t* gcc.dg/pr30551-5.c: New.\n+\t* gcc.dg/pr30551-6.c: New.\n+\t* gcc.dg/tree-ssa/reassoc-3.c: Don't compile with -pedantic-errors.\n+\t* g++.dg/warn/pr30551.C: New.\n+\t* g++.dg/warn/pr30551-2.C: New.\n+\n 2008-08-13  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/ssa-ccp-21.c: New testcase."}, {"sha": "7a4b136579d8adc85f3879ea854dbdf0572ce8c4", "filename": "gcc/testsuite/g++.dg/warn/pr30551-2.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551-2.C?ref=4003301d719865df5b0f445ab4d80339d86572d7", "patch": "@@ -0,0 +1,6 @@\n+// PR 30551 -Wmain is enabled by -pedantic/-pedantic-errors.\n+// { dg-do compile }\n+// { dg-options \"-pedantic-errors\" }\n+\n+int main(char a) {} /* { dg-error \"error: first argument of .*main.* should be .int.\" } */\n+/* { dg-error \"error: .*main.* takes only zero or two arguments\" \"\" { target *-*-* } 5 } */ "}, {"sha": "ed9248744db6fc70b8d17d094c9cc232e80c9adb", "filename": "gcc/testsuite/g++.dg/warn/pr30551.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr30551.C?ref=4003301d719865df5b0f445ab4d80339d86572d7", "patch": "@@ -0,0 +1,6 @@\n+// PR 30551 -Wmain is enabled by default.\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+int main(char a) {} /* { dg-warning \"warning: first argument of .*main.* should be .int.\" } */\n+/* { dg-warning \"warning: .*main.* takes only zero or two arguments\" \"\" { target *-*-* } 5 } */ "}, {"sha": "fdd5df668687186baed5ab604e1723b183899612", "filename": "gcc/testsuite/gcc.dg/pr30551-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-2.c?ref=4003301d719865df5b0f445ab4d80339d86572d7", "patch": "@@ -0,0 +1,8 @@\n+/* PR 30551 -Wmain is not enabled by default. */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void main(char a) {} /* { dg-bogus \"first argument of .main. should be .int.\" } */\n+/* { dg-bogus \".main. takes only zero or two arguments\" \"\" { target *-*-* } 5 } */ \n+/* { dg-bogus \"return type of .main. is not .int.\" \"\" { target *-*-* } 5 } */ \n+"}, {"sha": "120d45b8393bbba12c2ecdee873c2e314e18cc74", "filename": "gcc/testsuite/gcc.dg/pr30551-3.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-3.c?ref=4003301d719865df5b0f445ab4d80339d86572d7", "patch": "@@ -0,0 +1,7 @@\n+/* PR 30551 -Wmain is enabled by -pedantic-errors. */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic-errors\" } */\n+\n+void main(char a) {} /* { dg-error \"first argument of .main. should be .int.\" } */\n+/* { dg-error \".main. takes only zero or two arguments\" \"\" { target *-*-* } 5 } */ \n+/* { dg-error \"return type of .main. is not .int.\" \"\" { target *-*-* } 5 } */ "}, {"sha": "4803dbac01d16e251ea5105414a5c50f8c4c871d", "filename": "gcc/testsuite/gcc.dg/pr30551-4.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-4.c?ref=4003301d719865df5b0f445ab4d80339d86572d7", "patch": "@@ -0,0 +1,8 @@\n+/* PR 30551 -Wmain is enabled by -pedantic-errors and can be disabled. */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic-errors -Wno-main\" } */\n+\n+void main(char a) {} /* { dg-bogus \"first argument of .main. should be .int.\" } */\n+/* { dg-bogus \".main. takes only zero or two arguments\" \"\" { target *-*-* } 5 } */ \n+/* { dg-bogus \"return type of .main. is not .int.\" \"\" { target *-*-* } 5 } */ \n+"}, {"sha": "060ed016b3cc0f920109f8343e6213ff3e4a438b", "filename": "gcc/testsuite/gcc.dg/pr30551-5.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-5.c?ref=4003301d719865df5b0f445ab4d80339d86572d7", "patch": "@@ -0,0 +1,7 @@\n+/* PR 30551 -Wmain is enabled by -pedantic and can be disabled. */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic -Wno-main\" } */\n+\n+void main(char a) {} /* { dg-bogus \"first argument of .main. should be .int.\" } */\n+/* { dg-bogus \".main. takes only zero or two arguments\" \"\" { target *-*-* } 5 } */ \n+/* { dg-bogus \"return type of .main. is not .int.\" \"\" { target *-*-* } 5 } */ "}, {"sha": "9c33cd143ddab98f410020bad41c2f74e3ddb66c", "filename": "gcc/testsuite/gcc.dg/pr30551-6.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-6.c?ref=4003301d719865df5b0f445ab4d80339d86572d7", "patch": "@@ -0,0 +1,7 @@\n+/* PR 30551 -Wmain is enabled by -pedantic. */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic\" } */\n+\n+void main(char a) {} /* { dg-warning \"first argument of .main. should be .int.\" } */\n+/* { dg-warning \".main. takes only zero or two arguments\" \"\" { target *-*-* } 5 } */ \n+/* { dg-warning \"return type of .main. is not .int.\" \"\" { target *-*-* } 5 } */ "}, {"sha": "d6fdd8fab46e7568ecf8525bf6e1829ed1a6dd53", "filename": "gcc/testsuite/gcc.dg/pr30551.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551.c?ref=4003301d719865df5b0f445ab4d80339d86572d7", "patch": "@@ -0,0 +1,7 @@\n+/* PR 30551 -Wmain is enabled by -Wall.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+void main(char a) {} /* { dg-warning \"first argument of .main. should be .int.\" } */\n+/* { dg-warning \".main. takes only zero or two arguments\" \"\" { target *-*-* } 5 } */ \n+/* { dg-warning \"return type of .main. is not .int.\" \"\" { target *-*-* } 5 } */ "}, {"sha": "178e6a4482266df1f3fb42a048b6a6b7c903a142", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4003301d719865df5b0f445ab4d80339d86572d7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-3.c?ref=4003301d719865df5b0f445ab4d80339d86572d7", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-options \"\" } */\n int main(int a, int b, int c, int d)\n {\n   int e = (a & ~b) & (~c & d);"}]}