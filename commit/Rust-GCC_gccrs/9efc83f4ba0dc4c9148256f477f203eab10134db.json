{"sha": "9efc83f4ba0dc4c9148256f477f203eab10134db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVmYzgzZjRiYTBkYzRjOTE0ODI1NmY0NzdmMjAzZWFiMTAxMzRkYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-02-22T14:09:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-02-22T14:09:26Z"}, "message": "re PR middle-end/42749 (-O2 and verify_stmts failed again)\n\n2010-02-22  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/42749\n\t* tree-tailcall.c (adjust_return_value_with_ops): Drop update\n\tparameter.  Do arithmetic in the original type.\n\t(update_accumulator_with_ops): Likewise.\n\t(adjust_accumulator_values): Adjust.\n\n\t* gcc.c-torture/compile/pr42749.c: New testcase.\n\nFrom-SVN: r156960", "tree": {"sha": "d0392638ecfe63adb514979931814a136068629f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0392638ecfe63adb514979931814a136068629f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9efc83f4ba0dc4c9148256f477f203eab10134db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9efc83f4ba0dc4c9148256f477f203eab10134db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9efc83f4ba0dc4c9148256f477f203eab10134db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9efc83f4ba0dc4c9148256f477f203eab10134db/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a88561f0a325ea15681c278ab29c065995fc4de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a88561f0a325ea15681c278ab29c065995fc4de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a88561f0a325ea15681c278ab29c065995fc4de"}], "stats": {"total": 65, "additions": 55, "deletions": 10}, "files": [{"sha": "01abadcf8e63c95b676c08abecc555a364ecf7e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9efc83f4ba0dc4c9148256f477f203eab10134db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9efc83f4ba0dc4c9148256f477f203eab10134db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9efc83f4ba0dc4c9148256f477f203eab10134db", "patch": "@@ -1,3 +1,11 @@\n+2010-02-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/42749\n+\t* tree-tailcall.c (adjust_return_value_with_ops): Drop update\n+\tparameter.  Do arithmetic in the original type.\n+\t(update_accumulator_with_ops): Likewise.\n+\t(adjust_accumulator_values): Adjust.\n+\n 2010-02-22  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/s390.md (\"movqi\"): Re-add the mem->mem alternative."}, {"sha": "3f89fd36f7f74035aa47194d9e187eb3c7c99e7e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9efc83f4ba0dc4c9148256f477f203eab10134db/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9efc83f4ba0dc4c9148256f477f203eab10134db/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9efc83f4ba0dc4c9148256f477f203eab10134db", "patch": "@@ -1,3 +1,8 @@\n+2010-02-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/42749\n+\t* gcc.c-torture/compile/pr42749.c: New testcase.\n+\n 2010-02-22  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/43072"}, {"sha": "508c08720ec06f7385c7c26f2d974ba1ee47156f", "filename": "gcc/testsuite/gcc.c-torture/compile/pr42749.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9efc83f4ba0dc4c9148256f477f203eab10134db/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr42749.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9efc83f4ba0dc4c9148256f477f203eab10134db/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr42749.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr42749.c?ref=9efc83f4ba0dc4c9148256f477f203eab10134db", "patch": "@@ -0,0 +1,5 @@\n+struct pdf_object { int val; };\n+int pdf_count_size_object (struct pdf_object * p_obj)\n+{\n+    return pdf_count_size_object(p_obj) + 2 * sizeof(struct pdf_object);\n+}"}, {"sha": "bf8ebb85f7140e68fb39535c0f503b877bf2ad15", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9efc83f4ba0dc4c9148256f477f203eab10134db/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9efc83f4ba0dc4c9148256f477f203eab10134db/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=9efc83f4ba0dc4c9148256f477f203eab10134db", "patch": "@@ -570,23 +570,37 @@ add_successor_phi_arg (edge e, tree var, tree phi_arg)\n \n static tree\n adjust_return_value_with_ops (enum tree_code code, const char *label,\n-\t\t\t      tree op0, tree op1, gimple_stmt_iterator gsi,\n-\t\t\t      enum gsi_iterator_update update)\n+\t\t\t      tree acc, tree op1, gimple_stmt_iterator gsi)\n {\n \n   tree ret_type = TREE_TYPE (DECL_RESULT (current_function_decl));\n   tree tmp = create_tmp_var (ret_type, label);\n-  gimple stmt = gimple_build_assign_with_ops (code, tmp, op0, op1);\n+  gimple stmt;\n   tree result;\n \n   if (TREE_CODE (ret_type) == COMPLEX_TYPE\n       || TREE_CODE (ret_type) == VECTOR_TYPE)\n     DECL_GIMPLE_REG_P (tmp) = 1;\n   add_referenced_var (tmp);\n+\n+  if (types_compatible_p (TREE_TYPE (acc), TREE_TYPE (op1)))\n+    stmt = gimple_build_assign_with_ops (code, tmp, acc, op1);\n+  else\n+    {\n+      tree rhs = fold_convert (TREE_TYPE (acc),\n+\t\t\t       fold_build2 (code,\n+\t\t\t\t\t    TREE_TYPE (op1),\n+\t\t\t\t\t    fold_convert (TREE_TYPE (op1), acc),\n+\t\t\t\t\t    op1));\n+      rhs = force_gimple_operand_gsi (&gsi, rhs,\n+\t\t\t\t      false, NULL, true, GSI_CONTINUE_LINKING);\n+      stmt = gimple_build_assign (NULL_TREE, rhs);\n+    }\n+\n   result = make_ssa_name (tmp, stmt);\n   gimple_assign_set_lhs (stmt, result);\n   update_stmt (stmt);\n-  gsi_insert_before (&gsi, stmt, update);\n+  gsi_insert_before (&gsi, stmt, GSI_NEW_STMT);\n   return result;\n }\n \n@@ -599,9 +613,22 @@ static tree\n update_accumulator_with_ops (enum tree_code code, tree acc, tree op1,\n \t\t\t     gimple_stmt_iterator gsi)\n {\n-  gimple stmt = gimple_build_assign_with_ops (code, SSA_NAME_VAR (acc), acc,\n-\t\t\t\t\t      op1);\n-  tree var = make_ssa_name (SSA_NAME_VAR (acc), stmt);\n+  gimple stmt;\n+  tree var;\n+  if (types_compatible_p (TREE_TYPE (acc), TREE_TYPE (op1)))\n+    stmt = gimple_build_assign_with_ops (code, SSA_NAME_VAR (acc), acc, op1);\n+  else\n+    {\n+      tree rhs = fold_convert (TREE_TYPE (acc),\n+\t\t\t       fold_build2 (code,\n+\t\t\t\t\t    TREE_TYPE (op1),\n+\t\t\t\t\t    fold_convert (TREE_TYPE (op1), acc),\n+\t\t\t\t\t    op1));\n+      rhs = force_gimple_operand_gsi (&gsi, rhs,\n+\t\t\t\t      false, NULL, false, GSI_CONTINUE_LINKING);\n+      stmt = gimple_build_assign (NULL_TREE, rhs);\n+    }\n+  var = make_ssa_name (SSA_NAME_VAR (acc), stmt);\n   gimple_assign_set_lhs (stmt, var);\n   update_stmt (stmt);\n   gsi_insert_after (&gsi, stmt, GSI_NEW_STMT);\n@@ -631,7 +658,7 @@ adjust_accumulator_values (gimple_stmt_iterator gsi, tree m, tree a, edge back)\n \t    var = m_acc;\n \t  else\n \t    var = adjust_return_value_with_ops (MULT_EXPR, \"acc_tmp\", m_acc,\n-\t\t\t\t\t\ta, gsi, GSI_NEW_STMT);\n+\t\t\t\t\t\ta, gsi);\n \t}\n       else\n \tvar = a;\n@@ -667,10 +694,10 @@ adjust_return_value (basic_block bb, tree m, tree a)\n \n   if (m)\n     retval = adjust_return_value_with_ops (MULT_EXPR, \"mul_tmp\", m_acc, retval,\n-\t\t\t\t\t   gsi, GSI_SAME_STMT);\n+\t\t\t\t\t   gsi);\n   if (a)\n     retval = adjust_return_value_with_ops (PLUS_EXPR, \"acc_tmp\", a_acc, retval,\n-\t\t\t\t\t   gsi, GSI_SAME_STMT);\n+\t\t\t\t\t   gsi);\n   gimple_return_set_retval (ret_stmt, retval);\n   update_stmt (ret_stmt);\n }"}]}