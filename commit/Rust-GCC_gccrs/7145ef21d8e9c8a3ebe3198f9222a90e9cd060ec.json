{"sha": "7145ef21d8e9c8a3ebe3198f9222a90e9cd060ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE0NWVmMjFkOGU5YzhhM2ViZTMxOThmOTIyMmE5MGU5Y2QwNjBlYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-03-19T00:37:52Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-03-19T00:37:52Z"}, "message": "tree.h (tree_index): Remove enumerals for integer types.\n\n\t* tree.h (tree_index): Remove enumerals for integer types.\n\t(integer_type_kind): New type.\n\t(integer_types): New variable.\n\t(char_type_node): Adjust.\n\t(signed_char_type_node): Likewise.\n\t(unsigned_char_type_node): Likewise.\n\t(short_integer_type_node): Likewise.\n\t(short_unsigned_type_node): Likewise.\n\t(integer_type_node): Likewise.\n\t(unsigned_type_node): Likewise.\n\t(long_integer_type_node): Likewise.\n\t(long_unsigned_type_node): Likewise.\n\t(long_long_integer_type_node): Likewise.\n\t(long_long_unsigned_type_node): Likewise.\n\t* tree.c (integer_types): New variable.\n\t(init_obstacks): Register it as a root.\n\nFrom-SVN: r32624", "tree": {"sha": "dcf9c5e55679fe645841b71c6dff1bb75d8ece27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcf9c5e55679fe645841b71c6dff1bb75d8ece27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7145ef21d8e9c8a3ebe3198f9222a90e9cd060ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7145ef21d8e9c8a3ebe3198f9222a90e9cd060ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7145ef21d8e9c8a3ebe3198f9222a90e9cd060ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7145ef21d8e9c8a3ebe3198f9222a90e9cd060ec/comments", "author": null, "committer": null, "parents": [{"sha": "863251c18deeee5fc582117e78574d199bf76c6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/863251c18deeee5fc582117e78574d199bf76c6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/863251c18deeee5fc582117e78574d199bf76c6c"}], "stats": {"total": 82, "additions": 58, "deletions": 24}, "files": [{"sha": "6927fb2ba0166c0510fa51eace45df898bda6352", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7145ef21d8e9c8a3ebe3198f9222a90e9cd060ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7145ef21d8e9c8a3ebe3198f9222a90e9cd060ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7145ef21d8e9c8a3ebe3198f9222a90e9cd060ec", "patch": "@@ -1,3 +1,22 @@\n+2000-03-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* tree.h (tree_index): Remove enumerals for integer types.\n+\t(integer_type_kind): New type.\n+\t(integer_types): New variable.\n+\t(char_type_node): Adjust.\n+\t(signed_char_type_node): Likewise.\n+\t(unsigned_char_type_node): Likewise.\n+\t(short_integer_type_node): Likewise.\n+\t(short_unsigned_type_node): Likewise.\n+\t(integer_type_node): Likewise.\n+\t(unsigned_type_node): Likewise.\n+\t(long_integer_type_node): Likewise.\n+\t(long_unsigned_type_node): Likewise.\n+\t(long_long_integer_type_node): Likewise.\n+\t(long_long_unsigned_type_node): Likewise.\n+\t* tree.c (integer_types): New variable.\n+\t(init_obstacks): Register it as a root.\n+\n Sat Mar 18 14:38:00 2000  Jason Eckhardt  <jle@cygnus.com>\n \n \t* bb-reorder.c (reorder_basic_blocks): Update PREV_INSN as well as"}, {"sha": "2693995675c286b551cf64a5950e8d7306af193b", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7145ef21d8e9c8a3ebe3198f9222a90e9cd060ec/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7145ef21d8e9c8a3ebe3198f9222a90e9cd060ec/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7145ef21d8e9c8a3ebe3198f9222a90e9cd060ec", "patch": "@@ -296,6 +296,7 @@ static char *built_in_filename;\n #define BUILT_IN_FILENAME (\"<built-in>\")\n \f\n tree global_trees[TI_MAX];\n+tree integer_types[itk_none];\n \f\n /* Init the principal obstacks.  */\n \n@@ -333,6 +334,7 @@ init_obstacks ()\n \t\tsizeof type_hash_table / sizeof type_hash_table [0],\n \t\tsizeof type_hash_table[0], mark_type_hash);\n   ggc_add_tree_root (global_trees, TI_MAX);\n+  ggc_add_tree_root (integer_types, itk_none);\n }\n \n void"}, {"sha": "9076d5ec39f82067016f01a7aac5f60fe2ec60c4", "filename": "gcc/tree.h", "status": "modified", "additions": 37, "deletions": 24, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7145ef21d8e9c8a3ebe3198f9222a90e9cd060ec/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7145ef21d8e9c8a3ebe3198f9222a90e9cd060ec/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7145ef21d8e9c8a3ebe3198f9222a90e9cd060ec", "patch": "@@ -1515,18 +1515,6 @@ enum tree_index\n   TI_UINTDI_TYPE,\n   TI_UINTTI_TYPE,\n     \n-  TI_CHAR_TYPE,\n-  TI_SIGNED_CHAR_TYPE,\n-  TI_UNSIGNED_CHAR_TYPE,\n-  TI_INTEGER_TYPE,\n-  TI_UNSIGNED_TYPE,\n-  TI_SHORT_INTEGER_TYPE,\n-  TI_SHORT_UNSIGNED_TYPE,\n-  TI_LONG_INTEGER_TYPE,\n-  TI_LONG_UNSIGNED_TYPE,\n-  TI_LONG_LONG_INTEGER_TYPE,\n-  TI_LONG_LONG_UNSIGNED_TYPE,\n-\n   TI_INTEGER_ZERO,\n   TI_INTEGER_ONE,\n   TI_NULL_POINTER,\n@@ -1568,18 +1556,6 @@ extern tree global_trees[TI_MAX];\n #define unsigned_intDI_type_node\tglobal_trees[TI_UINTDI_TYPE]\n #define unsigned_intTI_type_node\tglobal_trees[TI_UINTTI_TYPE]\n \n-#define char_type_node\t\t\tglobal_trees[TI_CHAR_TYPE]\n-#define signed_char_type_node\t\tglobal_trees[TI_SIGNED_CHAR_TYPE]\n-#define unsigned_char_type_node\t\tglobal_trees[TI_UNSIGNED_CHAR_TYPE]\n-#define short_integer_type_node\t\tglobal_trees[TI_SHORT_INTEGER_TYPE]\n-#define short_unsigned_type_node\tglobal_trees[TI_SHORT_UNSIGNED_TYPE]\n-#define integer_type_node\t\tglobal_trees[TI_INTEGER_TYPE]\n-#define unsigned_type_node\t\tglobal_trees[TI_UNSIGNED_TYPE]\n-#define long_integer_type_node\t\tglobal_trees[TI_LONG_INTEGER_TYPE]\n-#define long_unsigned_type_node\t\tglobal_trees[TI_LONG_UNSIGNED_TYPE]\n-#define long_long_integer_type_node\tglobal_trees[TI_LONG_LONG_INTEGER_TYPE]\n-#define long_long_unsigned_type_node\tglobal_trees[TI_LONG_LONG_UNSIGNED_TYPE]\n-\n #define integer_zero_node\t\tglobal_trees[TI_INTEGER_ZERO]\n #define integer_one_node\t\tglobal_trees[TI_INTEGER_ONE]\n #define size_zero_node\t\t\tglobal_trees[TI_SIZE_ZERO]\n@@ -1602,6 +1578,43 @@ extern tree global_trees[TI_MAX];\n #define const_ptr_type_node\t\tglobal_trees[TI_CONST_PTR_TYPE]\n #define ptrdiff_type_node\t\tglobal_trees[TI_PTRDIFF_TYPE]\n #define va_list_type_node\t\tglobal_trees[TI_VA_LIST_TYPE]\n+\n+/* An enumeration of the standard C integer types.  These must be\n+   ordered so that shorter types appear before longer ones.  */\n+enum integer_type_kind \n+{\n+  itk_char,\n+  itk_signed_char,\n+  itk_unsigned_char,\n+  itk_short,\n+  itk_unsigned_short,\n+  itk_int,\n+  itk_unsigned_int,\n+  itk_long,\n+  itk_unsigned_long,\n+  itk_long_long,\n+  itk_unsigned_long_long,\n+  itk_none\n+};\n+\n+typedef enum integer_type_kind integer_type_kind;\n+\n+/* The standard C integer types.  Use integer_type_kind to index into\n+   this array.  */\n+extern tree integer_types[itk_none];\n+\n+#define char_type_node\t\t\tinteger_types[itk_char]\n+#define signed_char_type_node\t\tinteger_types[itk_signed_char]\n+#define unsigned_char_type_node\t\tinteger_types[itk_unsigned_char]\n+#define short_integer_type_node\t\tinteger_types[itk_short]\n+#define short_unsigned_type_node\tinteger_types[itk_unsigned_short]\n+#define integer_type_node\t\tinteger_types[itk_int]\n+#define unsigned_type_node\t\tinteger_types[itk_unsigned_int]\n+#define long_integer_type_node\t\tinteger_types[itk_long]\n+#define long_unsigned_type_node\t\tinteger_types[itk_unsigned_long]\n+#define long_long_integer_type_node\tinteger_types[itk_long_long]\n+#define long_long_unsigned_type_node\tinteger_types[itk_unsigned_long_long]\n+\n \f\n #define NULL_TREE (tree) NULL\n "}]}