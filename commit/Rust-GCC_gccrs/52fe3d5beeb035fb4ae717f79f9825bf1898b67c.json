{"sha": "52fe3d5beeb035fb4ae717f79f9825bf1898b67c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJmZTNkNWJlZWIwMzVmYjRhZTcxN2Y3OWY5ODI1YmYxODk4YjY3Yw==", "commit": {"author": {"name": "Johannes Singler", "email": "singler@kit.edu", "date": "2011-01-26T09:18:48Z"}, "committer": {"name": "Johannes Singler", "email": "singler@gcc.gnu.org", "date": "2011-01-26T09:18:48Z"}, "message": "numeric (inner_product, [...]): Qualify subsequent call with __gnu_parallel instead of _GLIBCXX_STD_P to...\n\n2011-01-26  Johannes Singler  <singler@kit.edu>\n\n        * include/parallel/numeric (inner_product, partial_sum):\n        Qualify subsequent call with __gnu_parallel instead of\n        _GLIBCXX_STD_P to reenable parallel execution without ambiguity.\n        * include/parallel/algobase.h (equal): Likewise.\n        * include/parallel/algo.h (find_first_of, search_n, merge,\n        nth_element, partial_sort, max_element, min_element): Likewise.\n        * testsuite/25_algorithms/headers/algorithm/\n        parallel_algorithm_mixed1.cc (main): Add respective test cases.\n        * testsuite/25_algorithms/headers/algorithm/\n        parallel_algorithm_mixed2.cc (main): Likewise.\n        * testsuite/26_numerics/headers/numeric/\n        parallel_numeric_mixed1.cc (main): Likewise.\n        * testsuite/26_numerics/headers/numeric/\n        parallel_numeric_mixed2.cc (main): Likewise.\n\nFrom-SVN: r169280", "tree": {"sha": "7b9ee2bee4f87566cbb90b64e074cf85209740bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b9ee2bee4f87566cbb90b64e074cf85209740bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52fe3d5beeb035fb4ae717f79f9825bf1898b67c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52fe3d5beeb035fb4ae717f79f9825bf1898b67c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52fe3d5beeb035fb4ae717f79f9825bf1898b67c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52fe3d5beeb035fb4ae717f79f9825bf1898b67c/comments", "author": null, "committer": null, "parents": [{"sha": "8717f52fde18aeab7d3021933ceb092048c7d561", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8717f52fde18aeab7d3021933ceb092048c7d561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8717f52fde18aeab7d3021933ceb092048c7d561"}], "stats": {"total": 173, "additions": 159, "deletions": 14}, "files": [{"sha": "b755b4336b7f32940118db979fcd2305d5006f51", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fe3d5beeb035fb4ae717f79f9825bf1898b67c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fe3d5beeb035fb4ae717f79f9825bf1898b67c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=52fe3d5beeb035fb4ae717f79f9825bf1898b67c", "patch": "@@ -1,3 +1,20 @@\n+2011-01-26  Johannes Singler  <singler@kit.edu>\n+\n+        * include/parallel/numeric (inner_product, partial_sum):\n+        Qualify subsequent call with __gnu_parallel instead of\n+        _GLIBCXX_STD_P to reenable parallel execution without ambiguity.\n+        * include/parallel/algobase.h (equal): Likewise.\n+        * include/parallel/algo.h (find_first_of, search_n, merge,\n+        nth_element, partial_sort, max_element, min_element): Likewise.\n+        * testsuite/25_algorithms/headers/algorithm/\n+        parallel_algorithm_mixed1.cc (main): Add respective test cases.\n+        * testsuite/25_algorithms/headers/algorithm/\n+        parallel_algorithm_mixed2.cc (main): Likewise.\n+        * testsuite/26_numerics/headers/numeric/\n+        parallel_numeric_mixed1.cc (main): Likewise.\n+        * testsuite/26_numerics/headers/numeric/\n+        parallel_numeric_mixed2.cc (main): Likewise.\n+\n 2011-01-24  Graham Reed  <greed@pobox.com>\n \n \tPR libstdc++/47387"}, {"sha": "a24e557ad90d7917045f870b3a9986bb96f37f19", "filename": "libstdc++-v3/include/parallel/algo.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fe3d5beeb035fb4ae717f79f9825bf1898b67c/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fe3d5beeb035fb4ae717f79f9825bf1898b67c/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h?ref=52fe3d5beeb035fb4ae717f79f9825bf1898b67c", "patch": "@@ -292,7 +292,7 @@ namespace __parallel\n       typedef typename _IIterTraits::value_type _IValueType;\n       typedef typename iteratorf_traits::value_type _FValueType;\n \n-      return _GLIBCXX_STD_P::find_first_of(__begin1, __end1, __begin2, __end2,\n+      return __gnu_parallel::find_first_of(__begin1, __end1, __begin2, __end2,\n                          __gnu_parallel::_EqualTo<_IValueType, _FValueType>());\n     }\n \n@@ -1160,7 +1160,7 @@ namespace __parallel\n              const _Tp& __val)\n     {\n       typedef typename iterator_traits<_FIterator>::value_type _ValueType;\n-      return _GLIBCXX_STD_P::search_n(__begin, __end, __count, __val,\n+      return __gnu_parallel::search_n(__begin, __end, __count, __val,\n                       __gnu_parallel::_EqualTo<_ValueType, _Tp>());\n     }\n \n@@ -2086,7 +2086,7 @@ namespace __parallel\n       typedef typename _Iterator1Traits::value_type _ValueType1;\n       typedef typename _Iterator2Traits::value_type _ValueType2;\n \n-      return _GLIBCXX_STD_P::merge(__begin1, __end1, __begin2, __end2,\n+      return __gnu_parallel::merge(__begin1, __end1, __begin2, __end2,\n                   __result, __gnu_parallel::_Less<_ValueType1, _ValueType2>());\n     }\n \n@@ -2128,7 +2128,7 @@ namespace __parallel\n     {\n       typedef iterator_traits<_RAIter> _TraitsType;\n       typedef typename _TraitsType::value_type _ValueType;\n-      _GLIBCXX_STD_P::nth_element(__begin, __nth, __end,\n+      __gnu_parallel::nth_element(__begin, __nth, __end,\n                                   std::less<_ValueType>());\n     }\n \n@@ -2171,7 +2171,7 @@ namespace __parallel\n     {\n       typedef iterator_traits<_RAIter> _TraitsType;\n       typedef typename _TraitsType::value_type _ValueType;\n-      _GLIBCXX_STD_P::partial_sort(__begin, __middle, __end,\n+      __gnu_parallel::partial_sort(__begin, __middle, __end,\n                                    std::less<_ValueType>());\n     }\n \n@@ -2241,7 +2241,7 @@ namespace __parallel\n     max_element(_FIterator __begin, _FIterator __end)\n     {\n       typedef typename iterator_traits<_FIterator>::value_type _ValueType;\n-      return _GLIBCXX_STD_P::max_element(__begin, __end,\n+      return __gnu_parallel::max_element(__begin, __end,\n                                          std::less<_ValueType>());\n     }\n \n@@ -2333,7 +2333,7 @@ namespace __parallel\n     min_element(_FIterator __begin, _FIterator __end)\n     {\n       typedef typename iterator_traits<_FIterator>::value_type _ValueType;\n-      return _GLIBCXX_STD_P::min_element(__begin, __end,\n+      return __gnu_parallel::min_element(__begin, __end,\n                                          std::less<_ValueType>());\n     }\n "}, {"sha": "a6fd6cd43310380af877c3801680ca6d1e6fd713", "filename": "libstdc++-v3/include/parallel/algobase.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fe3d5beeb035fb4ae717f79f9825bf1898b67c/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fe3d5beeb035fb4ae717f79f9825bf1898b67c/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h?ref=52fe3d5beeb035fb4ae717f79f9825bf1898b67c", "patch": "@@ -142,7 +142,8 @@ namespace __parallel\n     inline bool\n     equal(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2)\n     {\n-      return mismatch(__begin1, __end1, __begin2).first == __end1;\n+      return __gnu_parallel::mismatch(__begin1, __end1, __begin2).first\n+              == __end1;\n     }\n \n   // Public interface\n@@ -151,7 +152,8 @@ namespace __parallel\n     equal(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2, \n           _Predicate __pred)\n     {\n-      return mismatch(__begin1, __end1, __begin2, __pred).first == __end1;\n+      return __gnu_parallel::mismatch(__begin1, __end1, __begin2, __pred).first\n+              == __end1;\n     }\n \n   // Sequential fallback"}, {"sha": "b779aae8d6d179a9342090764a44102a63dfa9fe", "filename": "libstdc++-v3/include/parallel/numeric", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fe3d5beeb035fb4ae717f79f9825bf1898b67c/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fe3d5beeb035fb4ae717f79f9825bf1898b67c/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric?ref=52fe3d5beeb035fb4ae717f79f9825bf1898b67c", "patch": "@@ -283,7 +283,7 @@ namespace __parallel\n       typedef typename\n         __gnu_parallel::_Multiplies<_ValueType1, _ValueType2>::result_type\n         _MultipliesResultType;\n-      return _GLIBCXX_STD_P::inner_product(__first1, __last1, __first2, __init,\n+      return __gnu_parallel::inner_product(__first1, __last1, __first2, __init,\n                            __gnu_parallel::_Plus<_Tp, _MultipliesResultType>(),\n                            __gnu_parallel::\n                            _Multiplies<_ValueType1, _ValueType2>(),\n@@ -303,7 +303,7 @@ namespace __parallel\n       typedef typename\n         __gnu_parallel::_Multiplies<_ValueType1, _ValueType2>::result_type\n         _MultipliesResultType;\n-      return _GLIBCXX_STD_P::inner_product(__first1, __last1, __first2, __init,\n+      return __gnu_parallel::inner_product(__first1, __last1, __first2, __init,\n                            __gnu_parallel::_Plus<_Tp, _MultipliesResultType>(),\n                            __gnu_parallel::\n                            _Multiplies<_ValueType1, _ValueType2>());\n@@ -359,7 +359,7 @@ namespace __parallel\n     partial_sum(_IIter __begin, _IIter __end, _OutputIterator __result)\n     {\n       typedef typename iterator_traits<_IIter>::value_type _ValueType;\n-      return _GLIBCXX_STD_P::partial_sum(__begin, __end,\n+      return __gnu_parallel::partial_sum(__begin, __end,\n                                          __result, std::plus<_ValueType>());\n     }\n "}, {"sha": "ab0d0ac36e52fcc18e12f793b39af1c1835a0177", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/parallel_algorithm_mixed1.cc", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fe3d5beeb035fb4ae717f79f9825bf1898b67c/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm_mixed1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fe3d5beeb035fb4ae717f79f9825bf1898b67c/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm_mixed1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm_mixed1.cc?ref=52fe3d5beeb035fb4ae717f79f9825bf1898b67c", "patch": "@@ -30,7 +30,59 @@ void test()\n   \n   const value_type c(0);\n \n-  vector_type v(10);\n+  vector_type v(10), result(20);\n+\n+  std::equal(v.begin(), v.end(), v.begin());\n+  std::equal(v.begin(), v.end(), v.begin(), std::equal_to<value_type>());\n+  __gnu_parallel::equal(v.begin(), v.end(), v.begin());\n+  __gnu_parallel::equal(v.begin(), v.end(), v.begin(),\n+                                            std::equal_to<value_type>());\n+\n   std::find(v.begin(), v.end(), c);\n   __gnu_parallel::find(v.begin(), v.end(), c);\n+\n+  std::find_first_of(v.begin(), v.end(), v.begin(), v.end());\n+  std::find_first_of(v.begin(), v.end(), v.begin(), v.end(), \n+                                                std::equal_to<value_type>());\n+  __gnu_parallel::find_first_of(v.begin(), v.end(), v.begin(), v.end());\n+  __gnu_parallel::find_first_of(v.begin(), v.end(), v.begin(), v.end(),\n+                                                std::equal_to<value_type>());\n+\n+  std::search_n(v.begin(), v.end(), 5, value_type(1));\n+  std::search_n(v.begin(), v.end(), 5, value_type(1),\n+                                                std::equal_to<value_type>());\n+  __gnu_parallel::search_n(v.begin(), v.end(), 5, value_type(1));\n+  __gnu_parallel::search_n(v.begin(), v.end(), 5, value_type(1),\n+                                                std::equal_to<value_type>());\n+\n+  std::merge(v.begin(), v.end(), v.begin(), v.end(), result.begin());\n+  std::merge(v.begin(), v.end(), v.begin(), v.end(), result.begin(),\n+                                                std::less<value_type>());\n+  __gnu_parallel::merge(v.begin(), v.end(), v.begin(), v.end(),\n+                        result.begin());\n+  __gnu_parallel::merge(v.begin(), v.end(), v.begin(), v.end(),\n+                        result.begin(), std::less<value_type>());\n+\n+  std::nth_element(v.begin(), v.begin() + 5, v.end());\n+  std::nth_element(v.begin(), v.begin() + 5, v.end(), std::less<value_type>());\n+  __gnu_parallel::nth_element(v.begin(), v.begin() + 5, v.end());\n+  __gnu_parallel::nth_element(v.begin(), v.begin() + 5, v.end(),\n+                                                      std::less<value_type>());\n+\n+  std::partial_sort(v.begin(), v.begin() + 5, v.end());\n+  std::partial_sort(v.begin(), v.begin() + 5, v.end(),\n+                                                      std::less<value_type>());\n+  __gnu_parallel::partial_sort(v.begin(), v.begin() + 5, v.end());\n+  __gnu_parallel::partial_sort(v.begin(), v.begin() + 5, v.end(),\n+                                                      std::less<value_type>());\n+\n+  std::min_element(v.begin(), v.end());\n+  std::min_element(v.begin(), v.end(), std::less<value_type>());\n+  __gnu_parallel::min_element(v.begin(), v.end());\n+  __gnu_parallel::min_element(v.begin(), v.end(), std::less<value_type>());\n+\n+  std::max_element(v.begin(), v.end());\n+  std::max_element(v.begin(), v.end(), std::less<value_type>());\n+  __gnu_parallel::max_element(v.begin(), v.end());\n+  __gnu_parallel::max_element(v.begin(), v.end(), std::less<value_type>());\n }"}, {"sha": "56f95b6fbabbf89b37c49f6a95bb0c073a6ae0bd", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/parallel_algorithm_mixed2.cc", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fe3d5beeb035fb4ae717f79f9825bf1898b67c/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm_mixed2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fe3d5beeb035fb4ae717f79f9825bf1898b67c/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm_mixed2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm_mixed2.cc?ref=52fe3d5beeb035fb4ae717f79f9825bf1898b67c", "patch": "@@ -35,7 +35,59 @@ void test()\n   \n   const value_type c(0);\n \n-  vector_type v(10);\n+  vector_type v(10), result(20);\n+\n+  std::equal(v.begin(), v.end(), v.begin());\n+  std::equal(v.begin(), v.end(), v.begin(), std::equal_to<value_type>());\n+  __gnu_parallel::equal(v.begin(), v.end(), v.begin());\n+  __gnu_parallel::equal(v.begin(), v.end(), v.begin(),\n+                                            std::equal_to<value_type>());\n+\n   std::find(v.begin(), v.end(), c);\n   __gnu_parallel::find(v.begin(), v.end(), c);\n+\n+  std::find_first_of(v.begin(), v.end(), v.begin(), v.end());\n+  std::find_first_of(v.begin(), v.end(), v.begin(), v.end(), \n+                                                std::equal_to<value_type>());\n+  __gnu_parallel::find_first_of(v.begin(), v.end(), v.begin(), v.end());\n+  __gnu_parallel::find_first_of(v.begin(), v.end(), v.begin(), v.end(),\n+                                                std::equal_to<value_type>());\n+\n+  std::search_n(v.begin(), v.end(), 5, value_type(1));\n+  std::search_n(v.begin(), v.end(), 5, value_type(1),\n+                                                std::equal_to<value_type>());\n+  __gnu_parallel::search_n(v.begin(), v.end(), 5, value_type(1));\n+  __gnu_parallel::search_n(v.begin(), v.end(), 5, value_type(1),\n+                                                std::equal_to<value_type>());\n+\n+  std::merge(v.begin(), v.end(), v.begin(), v.end(), result.begin());\n+  std::merge(v.begin(), v.end(), v.begin(), v.end(), result.begin(),\n+                                                std::less<value_type>());\n+  __gnu_parallel::merge(v.begin(), v.end(), v.begin(), v.end(),\n+                        result.begin());\n+  __gnu_parallel::merge(v.begin(), v.end(), v.begin(), v.end(),\n+                        result.begin(), std::less<value_type>());\n+\n+  std::nth_element(v.begin(), v.begin() + 5, v.end());\n+  std::nth_element(v.begin(), v.begin() + 5, v.end(), std::less<value_type>());\n+  __gnu_parallel::nth_element(v.begin(), v.begin() + 5, v.end());\n+  __gnu_parallel::nth_element(v.begin(), v.begin() + 5, v.end(),\n+                                                      std::less<value_type>());\n+\n+  std::partial_sort(v.begin(), v.begin() + 5, v.end());\n+  std::partial_sort(v.begin(), v.begin() + 5, v.end(),\n+                                                      std::less<value_type>());\n+  __gnu_parallel::partial_sort(v.begin(), v.begin() + 5, v.end());\n+  __gnu_parallel::partial_sort(v.begin(), v.begin() + 5, v.end(),\n+                                                      std::less<value_type>());\n+\n+  std::min_element(v.begin(), v.end());\n+  std::min_element(v.begin(), v.end(), std::less<value_type>());\n+  __gnu_parallel::min_element(v.begin(), v.end());\n+  __gnu_parallel::min_element(v.begin(), v.end(), std::less<value_type>());\n+\n+  std::max_element(v.begin(), v.end());\n+  std::max_element(v.begin(), v.end(), std::less<value_type>());\n+  __gnu_parallel::max_element(v.begin(), v.end());\n+  __gnu_parallel::max_element(v.begin(), v.end(), std::less<value_type>());\n }"}, {"sha": "a1ce8f052ec96fc3c481f072188db0727a6d0dce", "filename": "libstdc++-v3/testsuite/26_numerics/headers/numeric/parallel_numeric_mixed1.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fe3d5beeb035fb4ae717f79f9825bf1898b67c/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fnumeric%2Fparallel_numeric_mixed1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fe3d5beeb035fb4ae717f79f9825bf1898b67c/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fnumeric%2Fparallel_numeric_mixed1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fnumeric%2Fparallel_numeric_mixed1.cc?ref=52fe3d5beeb035fb4ae717f79f9825bf1898b67c", "patch": "@@ -32,6 +32,17 @@ void test()\n   const value_type c(0);\n \n   vector_type v(10);\n+\n   std::accumulate(v.begin(), v.end(), value_type(1));\n+  std::accumulate(v.begin(), v.end(), value_type(1), std::plus<value_type>());\n   __gnu_parallel::accumulate(v.begin(), v.end(), value_type(1));\n+  __gnu_parallel::accumulate(v.begin(), v.end(), value_type(1),\n+                                                     std::plus<value_type>());\n+\n+  std::inner_product(v.begin(), v.end(), v.begin(), value_type(1));\n+  std::inner_product(v.begin(), v.end(), v.begin(), value_type(1),\n+                     std::multiplies<value_type>(), std::plus<value_type>());\n+  __gnu_parallel::inner_product(v.begin(), v.end(), v.begin(), value_type(1));\n+  __gnu_parallel::inner_product(v.begin(), v.end(), v.begin(), value_type(1),\n+                     std::multiplies<value_type>(), std::plus<value_type>());\n }"}, {"sha": "a38d92561d7a1ec8faf63a3198af984574c7a5a3", "filename": "libstdc++-v3/testsuite/26_numerics/headers/numeric/parallel_numeric_mixed2.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fe3d5beeb035fb4ae717f79f9825bf1898b67c/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fnumeric%2Fparallel_numeric_mixed2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fe3d5beeb035fb4ae717f79f9825bf1898b67c/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fnumeric%2Fparallel_numeric_mixed2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fnumeric%2Fparallel_numeric_mixed2.cc?ref=52fe3d5beeb035fb4ae717f79f9825bf1898b67c", "patch": "@@ -37,6 +37,17 @@ void test()\n   const value_type c(0);\n \n   vector_type v(10);\n+\n   std::accumulate(v.begin(), v.end(), value_type(1));\n+  std::accumulate(v.begin(), v.end(), value_type(1), std::plus<value_type>());\n   __gnu_parallel::accumulate(v.begin(), v.end(), value_type(1));\n+  __gnu_parallel::accumulate(v.begin(), v.end(), value_type(1),\n+                                                     std::plus<value_type>());\n+\n+  std::inner_product(v.begin(), v.end(), v.begin(), value_type(1));\n+  std::inner_product(v.begin(), v.end(), v.begin(), value_type(1),\n+                     std::multiplies<value_type>(), std::plus<value_type>());\n+  __gnu_parallel::inner_product(v.begin(), v.end(), v.begin(), value_type(1));\n+  __gnu_parallel::inner_product(v.begin(), v.end(), v.begin(), value_type(1),\n+                     std::multiplies<value_type>(), std::plus<value_type>());\n }"}]}