{"sha": "99b76adb94d9363d0ca31a7d34ce850e2ca9ffc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTliNzZhZGI5NGQ5MzYzZDBjYTMxYTdkMzRjZTg1MGUyY2E5ZmZjNQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-05-16T17:40:16Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-05-23T08:08:14Z"}, "message": "Don't simplify (A & C) != 0 ? D : 0 for pointer types.\n\nWhile rewriting part of PHI-OPT to use match-and-simplify,\nI ran into a bug where this pattern in match.pd would hit\nand would produce invalid gimple; a shift of a pointer type.\n\nThis just disables this simplification for pointer types similarly\nto what is already done in PHI-OPT for the generic A ? D : 0 case.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\nThanks,\nAndrew Pinski\n\n2021-5-23  Andrew Pinski  <apinski@marvell.com>\n\ngcc/\n\t* match.pd ((A & C) != 0 ? D : 0): Limit to non pointer types.\n\ngcc/testsuite/\n\t* gcc.dg/gimplefe-45.c: New test.", "tree": {"sha": "cbfa31dec87d011b45c6a5204bc44b3dc707ae73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbfa31dec87d011b45c6a5204bc44b3dc707ae73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99b76adb94d9363d0ca31a7d34ce850e2ca9ffc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b76adb94d9363d0ca31a7d34ce850e2ca9ffc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99b76adb94d9363d0ca31a7d34ce850e2ca9ffc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b76adb94d9363d0ca31a7d34ce850e2ca9ffc5/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15d30d2f20794d29ceabcfd57d230d6387284115", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15d30d2f20794d29ceabcfd57d230d6387284115", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15d30d2f20794d29ceabcfd57d230d6387284115"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "1fc6b7b1557521ecfe914ae7af82033960d33d34", "filename": "gcc/match.pd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b76adb94d9363d0ca31a7d34ce850e2ca9ffc5/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b76adb94d9363d0ca31a7d34ce850e2ca9ffc5/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=99b76adb94d9363d0ca31a7d34ce850e2ca9ffc5", "patch": "@@ -4840,7 +4840,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (cond\n   (ne (bit_and @0 integer_pow2p@1) integer_zerop)\n   INTEGER_CST@2 integer_zerop)\n- (if (integer_pow2p (@2))\n+ (if (!POINTER_TYPE_P (type) && integer_pow2p (@2))\n   (with {\n      int shift = (wi::exact_log2 (wi::to_wide (@2))\n \t\t  - wi::exact_log2 (wi::to_wide (@1)));"}, {"sha": "b1d3cbb0205596f8aec0a8c14cae1e38316fb42b", "filename": "gcc/testsuite/gcc.dg/gimplefe-45.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b76adb94d9363d0ca31a7d34ce850e2ca9ffc5/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b76adb94d9363d0ca31a7d34ce850e2ca9ffc5/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-45.c?ref=99b76adb94d9363d0ca31a7d34ce850e2ca9ffc5", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fgimple\" } */\n+\n+/* This used to ICE when simplifying (A & C) != 0 ? D : 0\n+   for pointer types. */\n+\n+int *__GIMPLE ()\n+p (int n)\n+{\n+  int *_2;\n+  int *_t;\n+  int *_t1;\n+  _t = (int*)8;\n+  _t1 = 0;\n+  n = n & 2;\n+  _2 = n != 0 ? _t : _t1;\n+  return _2;\n+}\n+"}]}