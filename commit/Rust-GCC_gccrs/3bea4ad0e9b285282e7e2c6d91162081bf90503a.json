{"sha": "3bea4ad0e9b285282e7e2c6d91162081bf90503a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JlYTRhZDBlOWIyODUyODJlN2UyYzZkOTExNjIwODFiZjkwNTAzYQ==", "commit": {"author": {"name": "Aaron Luchko", "email": "aluchko@redhat.com", "date": "2005-07-04T16:08:16Z"}, "committer": {"name": "Aaron Luchko", "email": "aluchko@gcc.gnu.org", "date": "2005-07-04T16:08:16Z"}, "message": "CommandSet.java: New file.\n\n        * gnu/classpath/jdwp/processor/CommandSet.java: New file.\n        * gnu/classpath/jdwp/processor/PacketProcessor.java: Use\n        CommandSets to handle JdwpCommandPackets.\n        * gnu/classpath/jdwp/transport/JdwpReplyPacket.java: New\n        Constructor.\n\nFrom-SVN: r101601", "tree": {"sha": "1918a37f5f28296d7bdb19cd1fb416737115e2df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1918a37f5f28296d7bdb19cd1fb416737115e2df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bea4ad0e9b285282e7e2c6d91162081bf90503a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bea4ad0e9b285282e7e2c6d91162081bf90503a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bea4ad0e9b285282e7e2c6d91162081bf90503a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bea4ad0e9b285282e7e2c6d91162081bf90503a/comments", "author": null, "committer": null, "parents": [{"sha": "9fd0c419ab2b6b030d80c4b10d6439ee65d65559", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd0c419ab2b6b030d80c4b10d6439ee65d65559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fd0c419ab2b6b030d80c4b10d6439ee65d65559"}], "stats": {"total": 230, "additions": 197, "deletions": 33}, "files": [{"sha": "bca8489c1b3ced924ea9909fa784b68782f94eab", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bea4ad0e9b285282e7e2c6d91162081bf90503a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bea4ad0e9b285282e7e2c6d91162081bf90503a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3bea4ad0e9b285282e7e2c6d91162081bf90503a", "patch": "@@ -1,3 +1,11 @@\n+2005-07-04  Aaron Luchko  <aluchko@redhat.com>\n+\n+\t* gnu/classpath/jdwp/processor/CommandSet.java: New file.\n+\t* gnu/classpath/jdwp/processor/PacketProcessor.java: Use\n+\tCommandSets to handle JdwpCommandPackets.\n+\t* gnu/classpath/jdwp/transport/JdwpReplyPacket.java: New\n+\tConstructor.\n+\n 2005-07-01  Tom Tromey  <tromey@redhat.com>\n \n \t* libtool-version: Updated."}, {"sha": "17b956ceadc5636f78156ec083eead4b90e8e06e", "filename": "libjava/gnu/classpath/jdwp/processor/CommandSet.java", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bea4ad0e9b285282e7e2c6d91162081bf90503a/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bea4ad0e9b285282e7e2c6d91162081bf90503a/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FCommandSet.java?ref=3bea4ad0e9b285282e7e2c6d91162081bf90503a", "patch": "@@ -0,0 +1,68 @@\n+/* CommandSet.java -- An interface defining JDWP Command Sets\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.processor;\n+\n+import gnu.classpath.jdwp.exception.JdwpException;\n+\n+import java.io.DataOutputStream;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * A class representing a JDWP Command Set. This class serves as a generic\n+ * interface for all Command Sets types used by JDWP.\n+ *\n+ * @author Aaron Luchko <aluchko@redhat.com>\n+ */\n+public interface CommandSet\n+{\n+  /**\n+   * Runs the given command with the data in distr and writes the data for the\n+   * reply packet to ostr.\n+   * \n+   * @param bb holds the data portion of the Command Packet\n+   * @param os data portion of the Reply Packet will be written here\n+   * @param command the command field of the Command Packet\n+   * @return true if the JDWP layer should shut down in response to this packet\n+   * @throws JdwpException command wasn't carried out successfully\n+   */\n+  public boolean runCommand(ByteBuffer bb, DataOutputStream os,\n+                            byte command) \n+    throws JdwpException;\n+}"}, {"sha": "8aead4209a6f4372ba62e03221a7a6ea171f9216", "filename": "libjava/gnu/classpath/jdwp/processor/PacketProcessor.java", "status": "modified", "additions": 109, "deletions": 32, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bea4ad0e9b285282e7e2c6d91162081bf90503a/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FPacketProcessor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bea4ad0e9b285282e7e2c6d91162081bf90503a/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FPacketProcessor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FPacketProcessor.java?ref=3bea4ad0e9b285282e7e2c6d91162081bf90503a", "patch": "@@ -40,15 +40,17 @@\n \n package gnu.classpath.jdwp.processor;\n \n-import gnu.classpath.jdwp.Jdwp;\n-import gnu.classpath.jdwp.event.Event;\n+import gnu.classpath.jdwp.JdwpConstants;\n import gnu.classpath.jdwp.exception.JdwpException;\n-import gnu.classpath.jdwp.transport.JdwpConnection;\n import gnu.classpath.jdwp.transport.JdwpCommandPacket;\n+import gnu.classpath.jdwp.transport.JdwpConnection;\n import gnu.classpath.jdwp.transport.JdwpPacket;\n import gnu.classpath.jdwp.transport.JdwpReplyPacket;\n \n+import java.io.ByteArrayOutputStream;\n+import java.io.DataOutputStream;\n import java.io.IOException;\n+import java.nio.ByteBuffer;\n \n /**\n  * This class is responsible for processing packets from the\n@@ -66,7 +68,16 @@\n   \n   // Shutdown this thread?\n   private boolean _shutdown;\n+  \n+  // A Mapping of the command set (Byte) to the specific CommandSet\n+  private CommandSet[] _sets;\n+\n+  // Contents of the ReplyPackets data field\n+  private ByteArrayOutputStream _outputBytes;\n \n+  // Output stream around _outputBytes\n+  private DataOutputStream _os;\n+  \n   /**\n    * Constructs a new <code>PacketProcessor</code> object\n    * Connection must be validated before getting here!\n@@ -77,20 +88,68 @@ public PacketProcessor (JdwpConnection con)\n   {\n     _connection = con;\n     _shutdown = false;\n+    \n+    // MAXIMUM is the value of the largest command set we may receive \n+    _sets = new CommandSet[JdwpConstants.CommandSet.MAXIMUM + 1];\n+    _outputBytes = new ByteArrayOutputStream();\n+    _os = new DataOutputStream (_outputBytes);\n+\n+    // Create all the Command Sets and add them to our array\n+    _sets[JdwpConstants.CommandSet.VirtualMachine.CS_VALUE] =\n+      new VirtualMachineCommandSet();\n+    _sets[JdwpConstants.CommandSet.ReferenceType.CS_VALUE] =\n+      new ReferenceTypeCommandSet();\n+    _sets[JdwpConstants.CommandSet.ClassType.CS_VALUE] =\n+      new ClassTypeCommandSet();\n+    _sets[JdwpConstants.CommandSet.ArrayType.CS_VALUE] =\n+      new ArrayTypeCommandSet();\n+    _sets[JdwpConstants.CommandSet.InterfaceType.CS_VALUE] =\n+      new InterfaceTypeCommandSet();\n+    _sets[JdwpConstants.CommandSet.Method.CS_VALUE] =\n+      new MethodCommandSet();\n+    _sets[JdwpConstants.CommandSet.Field.CS_VALUE] =\n+      new FieldCommandSet();\n+    _sets[JdwpConstants.CommandSet.ObjectReference.CS_VALUE] =\n+      new ObjectReferenceCommandSet();\n+    _sets[JdwpConstants.CommandSet.StringReference.CS_VALUE] =\n+      new StringReferenceCommandSet();\n+    _sets[JdwpConstants.CommandSet.ThreadReference.CS_VALUE] =\n+      new ThreadReferenceCommandSet();\n+    _sets[JdwpConstants.CommandSet.ThreadGroupReference.CS_VALUE] =\n+      new ThreadGroupReferenceCommandSet();\n+    _sets[JdwpConstants.CommandSet.ArrayReference.CS_VALUE] =\n+      new ArrayReferenceCommandSet();\n+    _sets[JdwpConstants.CommandSet.ClassLoaderReference.CS_VALUE] =\n+      new ClassLoaderReferenceCommandSet();\n+    _sets[JdwpConstants.CommandSet.EventRequest.CS_VALUE] =\n+      new EventRequestCommandSet();\n+    _sets[JdwpConstants.CommandSet.StackFrame.CS_VALUE] =\n+      new StackFrameCommandSet();\n+    _sets[JdwpConstants.CommandSet.ClassObjectReference.CS_VALUE] =\n+      new ClassObjectReferenceCommandSet();\n   }\n-\n+  \n   /**\n    * Main run routine for this thread. Will loop getting packets\n    * from the connection and processing them.\n    */\n   public void run ()\n   {\n-    while (!_shutdown)\n+    try\n       {\n-\t_processOnePacket ();\n+        while (!_shutdown)\n+          {\n+            _processOnePacket ();\n+          }\n       }\n+    catch (IOException ex)\n+      {\n+        ex.printStackTrace();\n+      }\n+    // Time to shutdown, tell the _connection thread to stop reading\n+    _connection.shutdown();\n   }\n-\n+  \n   /**\n    * Shutdown the packet processor\n    */\n@@ -99,40 +158,58 @@ public void shutdown ()\n     _shutdown = true;\n     interrupt ();\n   }\n-\n+  \n   // Helper function which actually does all the work of waiting\n   // for a packet and getting it processed.\n   private void _processOnePacket ()\n+    throws IOException\n   {\n     JdwpPacket pkt = _connection.getPacket ();\n-    if (pkt instanceof JdwpReplyPacket)\n+    \n+    if (!(pkt instanceof JdwpCommandPacket))\n       {\n-\t// We're not supposed to get these from the debugger!\n-\t// Drop it on the floor\n-\treturn;\n+        // We're not supposed to get these from the debugger!\n+        // Drop it on the floor\n+        return;\n       }\n-\n+    \n     if (pkt != null)\n       {\n-\tJdwpReplyPacket reply;\n-\ttry\n-\t  {\n-\t    // !! process packet here !!\n-\t    reply = new JdwpReplyPacket (pkt, (short) 0);\n-\t  }\n-\tcatch (JdwpException ex)\n-\t  {\n-\t    reply = new JdwpReplyPacket (pkt, ex.getErrorCode ());\n-\t  }\n-\n-\ttry\n-\t  {\n-\t    _connection.sendPacket (reply);\n-\t  }\n-\tcatch (IOException ioe)\n-\t  {\n-\t    // Not much we can do...\n-\t  }\n+        JdwpCommandPacket commandPkt = (JdwpCommandPacket) pkt;\n+        JdwpReplyPacket reply = new JdwpReplyPacket(commandPkt);\n+        \n+        // Reset our output stream\n+        _outputBytes.reset();\n+        \n+        // Create a ByteBuffer around the command packet \n+        ByteBuffer bb = ByteBuffer.wrap(commandPkt.getData());\n+        byte command = commandPkt.getCommand();\n+        byte commandSet = commandPkt.getCommandSet();\n+        \n+        CommandSet set = null;\n+        try\n+          {\n+            // There is no command set with value 0\n+            if (commandSet > 0 && commandSet < _sets.length)\n+              {\n+                set = _sets[commandPkt.getCommandSet()];\n+              }\n+            if (set != null) \n+              {\n+                _shutdown = set.runCommand(bb, _os, command);\n+                reply.setData(_outputBytes.toByteArray());\n+              }\n+            else\n+              {\n+                // This command set wasn't in our tree\n+                reply.setErrorCode(JdwpConstants.Error.NOT_IMPLEMENTED);\n+              }\n+          }\n+          catch (JdwpException ex)\n+            {\n+            reply.setErrorCode(ex.getErrorCode ());\n+            }\n+          _connection.sendPacket (reply);\n       }\n   }\n }"}, {"sha": "de32ecf995b14790b261e5bddfbdd4e88fa75e45", "filename": "libjava/gnu/classpath/jdwp/transport/JdwpReplyPacket.java", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bea4ad0e9b285282e7e2c6d91162081bf90503a/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FJdwpReplyPacket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bea4ad0e9b285282e7e2c6d91162081bf90503a/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FJdwpReplyPacket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Ftransport%2FJdwpReplyPacket.java?ref=3bea4ad0e9b285282e7e2c6d91162081bf90503a", "patch": "@@ -77,10 +77,21 @@ public JdwpReplyPacket ()\n    * @param errorCode  the error code\n    */\n   public JdwpReplyPacket (JdwpPacket pkt, short errorCode)\n+  {\n+    this(pkt);\n+    _errorCode = errorCode;\n+  }\n+\n+  /**\n+   * Constructs a <code>JdwpReplyPacket</code> with the\n+   * id from the given packet and an empty error code\n+   *\n+   * @param pkt        the packet whose id this packet will use\n+   */\n+  public JdwpReplyPacket (JdwpPacket pkt)\n   {\n     super (pkt);\n     _flags = (byte) JDWP_FLAG_REPLY;\n-    _errorCode = errorCode;\n   }\n \n   /**"}]}