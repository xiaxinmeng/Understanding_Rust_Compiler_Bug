{"sha": "a0e24419cfc3b66a642d00fa7a13b147a8c57c2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBlMjQ0MTljZmMzYjY2YTY0MmQwMGZhN2ExM2IxNDdhOGM1N2MyZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-05-02T18:13:43Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-05-02T18:13:43Z"}, "message": "re PR c/25801 (bad diagnostic for increment/decrement of pointer to incomplete array)\n\n\tPR c/25801\n\t* c-typeck.c (c_size_in_bytes): Update comment.  Don't call error.\n\tReturn size_one_node when the type is not complete.\n\t(pointer_diff): Remove comment.\n\t(build_unary_op): Improve error messages.\n\n\t* gcc.dg/pr25801.c: New test.\n\nFrom-SVN: r210013", "tree": {"sha": "96bc1e7d8e5757f56500c47af2b25e01bd148229", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96bc1e7d8e5757f56500c47af2b25e01bd148229"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0e24419cfc3b66a642d00fa7a13b147a8c57c2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e24419cfc3b66a642d00fa7a13b147a8c57c2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0e24419cfc3b66a642d00fa7a13b147a8c57c2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e24419cfc3b66a642d00fa7a13b147a8c57c2e/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "19fc9faaaf98b3c45ede31da2e3cb970ef7b372a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19fc9faaaf98b3c45ede31da2e3cb970ef7b372a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19fc9faaaf98b3c45ede31da2e3cb970ef7b372a"}], "stats": {"total": 80, "additions": 68, "deletions": 12}, "files": [{"sha": "e408fef274d881173e1dec059ca728cdc269ee20", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e24419cfc3b66a642d00fa7a13b147a8c57c2e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e24419cfc3b66a642d00fa7a13b147a8c57c2e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=a0e24419cfc3b66a642d00fa7a13b147a8c57c2e", "patch": "@@ -1,3 +1,11 @@\n+2014-05-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/25801\n+\t* c-typeck.c (c_size_in_bytes): Update comment.  Don't call error.\n+\tReturn size_one_node when the type is not complete.\n+\t(pointer_diff): Remove comment.\n+\t(build_unary_op): Improve error messages.\n+\n 2014-05-02  Marek Polacek  <polacek@redhat.com>\n \n \t* c-typeck.c (c_finish_return): Separate warning_at calls."}, {"sha": "65fb035ae1d1194c50388b35910f37f2acc24464", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e24419cfc3b66a642d00fa7a13b147a8c57c2e/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e24419cfc3b66a642d00fa7a13b147a8c57c2e/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=a0e24419cfc3b66a642d00fa7a13b147a8c57c2e", "patch": "@@ -1754,22 +1754,20 @@ type_lists_compatible_p (const_tree args1, const_tree args2,\n     }\n }\n \f\n-/* Compute the size to increment a pointer by.  */\n+/* Compute the size to increment a pointer by.  When a function type or void\n+   type or incomplete type is passed, size_one_node is returned.\n+   This function does not emit any diagnostics; the caller is responsible\n+   for that.  */\n \n static tree\n c_size_in_bytes (const_tree type)\n {\n   enum tree_code code = TREE_CODE (type);\n \n-  if (code == FUNCTION_TYPE || code == VOID_TYPE || code == ERROR_MARK)\n+  if (code == FUNCTION_TYPE || code == VOID_TYPE || code == ERROR_MARK\n+      || !COMPLETE_TYPE_P (type))\n     return size_one_node;\n \n-  if (!COMPLETE_OR_VOID_TYPE_P (type))\n-    {\n-      error (\"arithmetic on pointer to an incomplete type\");\n-      return size_one_node;\n-    }\n-\n   /* Convert in case a char is more than one unit.  */\n   return size_binop_loc (input_location, CEIL_DIV_EXPR, TYPE_SIZE_UNIT (type),\n \t\t\t size_int (TYPE_PRECISION (char_type_node)\n@@ -3530,7 +3528,6 @@ pointer_diff (location_t loc, tree op0, tree op1)\n   if (!COMPLETE_OR_VOID_TYPE_P (TREE_TYPE (TREE_TYPE (orig_op1))))\n     error_at (loc, \"arithmetic on pointer to an incomplete type\");\n \n-  /* This generates an error if op0 is pointer to incomplete type.  */\n   op1 = c_size_in_bytes (target_type);\n \n   if (pointer_to_zero_sized_aggr_p (TREE_TYPE (orig_op1)))\n@@ -4004,16 +4001,18 @@ build_unary_op (location_t location,\n \n \tif (typecode == POINTER_TYPE)\n \t  {\n-\t    /* If pointer target is an undefined struct,\n+\t    /* If pointer target is an incomplete type,\n \t       we just cannot know how to do the arithmetic.  */\n \t    if (!COMPLETE_OR_VOID_TYPE_P (TREE_TYPE (argtype)))\n \t      {\n \t\tif (code == PREINCREMENT_EXPR || code == POSTINCREMENT_EXPR)\n \t\t  error_at (location,\n-\t\t\t    \"increment of pointer to unknown structure\");\n+\t\t\t    \"increment of pointer to an incomplete type %qT\",\n+\t\t\t    TREE_TYPE (argtype));\n \t\telse\n \t\t  error_at (location,\n-\t\t\t    \"decrement of pointer to unknown structure\");\n+\t\t\t    \"decrement of pointer to an incomplete type %qT\",\n+\t\t\t    TREE_TYPE (argtype));\n \t      }\n \t    else if (TREE_CODE (TREE_TYPE (argtype)) == FUNCTION_TYPE\n \t\t     || TREE_CODE (TREE_TYPE (argtype)) == VOID_TYPE)"}, {"sha": "be56aab5290609ba734b81cda7c7321f7440bfa3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e24419cfc3b66a642d00fa7a13b147a8c57c2e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e24419cfc3b66a642d00fa7a13b147a8c57c2e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0e24419cfc3b66a642d00fa7a13b147a8c57c2e", "patch": "@@ -1,3 +1,8 @@\n+2014-05-02  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/25801\n+\t* gcc.dg/pr25801.c: New test.\n+\n 2014-05-02  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/60784"}, {"sha": "10b53d33e19a215671259d38c1867d9249d5fe0c", "filename": "gcc/testsuite/gcc.dg/pr25801.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e24419cfc3b66a642d00fa7a13b147a8c57c2e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr25801.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e24419cfc3b66a642d00fa7a13b147a8c57c2e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr25801.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr25801.c?ref=a0e24419cfc3b66a642d00fa7a13b147a8c57c2e", "patch": "@@ -0,0 +1,44 @@\n+/* PR c/25801 */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+int (*a)[];\n+struct S *s;\n+union U *u;\n+enum E *e;\n+\n+void\n+f (void)\n+{\n+  a++; /* { dg-error \"increment of pointer to an incomplete type\" } */\n+  ++a; /* { dg-error \"increment of pointer to an incomplete type\" } */\n+  a--; /* { dg-error \"decrement of pointer to an incomplete type\" } */\n+  --a; /* { dg-error \"decrement of pointer to an incomplete type\" } */\n+  a += 1; /* { dg-error \"invalid use of array with unspecified bounds\" } */\n+  a -= 1; /* { dg-error \"invalid use of array with unspecified bounds\" } */\n+  a - a; /* { dg-error \"arithmetic on pointer to an incomplete type\" } */\n+\n+  s++; /* { dg-error \"increment of pointer to an incomplete type\" } */\n+  ++s; /* { dg-error \"increment of pointer to an incomplete type\" } */\n+  s--; /* { dg-error \"decrement of pointer to an incomplete type\" } */\n+  --s; /* { dg-error \"decrement of pointer to an incomplete type\" } */\n+  s += 1; /* { dg-error \"invalid use of undefined type\" } */\n+  s -= 1; /* { dg-error \"invalid use of undefined type\" } */\n+  s - s; /* { dg-error \"arithmetic on pointer to an incomplete type\" } */\n+\n+  u++; /* { dg-error \"increment of pointer to an incomplete type\" } */\n+  ++u; /* { dg-error \"increment of pointer to an incomplete type\" } */\n+  u--; /* { dg-error \"decrement of pointer to an incomplete type\" } */\n+  --u; /* { dg-error \"decrement of pointer to an incomplete type\" } */\n+  u += 1; /* { dg-error \"invalid use of undefined type\" } */\n+  u -= 1; /* { dg-error \"invalid use of undefined type\" } */\n+  u - u; /* { dg-error \"arithmetic on pointer to an incomplete type\" } */\n+\n+  e++; /* { dg-error \"increment of pointer to an incomplete type\" } */\n+  ++e; /* { dg-error \"increment of pointer to an incomplete type\" } */\n+  e--; /* { dg-error \"decrement of pointer to an incomplete type\" } */\n+  --e; /* { dg-error \"decrement of pointer to an incomplete type\" } */\n+  e += 1; /* { dg-error \"invalid use of undefined type\" } */\n+  e -= 1; /* { dg-error \"invalid use of undefined type\" } */\n+  e - e; /* { dg-error \"arithmetic on pointer to an incomplete type\" } */\n+}"}]}