{"sha": "9ed480b123e63fc73e01d7bc18129291717bf4cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVkNDgwYjEyM2U2M2ZjNzNlMDFkN2JjMTgxMjkyOTE3MTdiZjRjZA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2012-02-05T21:49:46Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2012-02-05T21:49:46Z"}, "message": "re PR fortran/32373 (not vectorized: can't determine dependence (equivalence))\n\n2012-02-05  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/32373\n\t* gfortran.dg/vect/vect-8.f90:  New test case.\n\nFrom-SVN: r183917", "tree": {"sha": "c1f064edd2b4f31cae915f0e2a51ee4215033437", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1f064edd2b4f31cae915f0e2a51ee4215033437"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ed480b123e63fc73e01d7bc18129291717bf4cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ed480b123e63fc73e01d7bc18129291717bf4cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ed480b123e63fc73e01d7bc18129291717bf4cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ed480b123e63fc73e01d7bc18129291717bf4cd/comments", "author": null, "committer": null, "parents": [{"sha": "d20597cb758fc46b8ca1de147a99eb9ed4758f7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d20597cb758fc46b8ca1de147a99eb9ed4758f7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d20597cb758fc46b8ca1de147a99eb9ed4758f7c"}], "stats": {"total": 712, "additions": 712, "deletions": 0}, "files": [{"sha": "537eccd5a963619ba4d8e66b3d482616ce2e6e64", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed480b123e63fc73e01d7bc18129291717bf4cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed480b123e63fc73e01d7bc18129291717bf4cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ed480b123e63fc73e01d7bc18129291717bf4cd", "patch": "@@ -1,3 +1,8 @@\n+2012-02-05  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/32373\n+\t* gfortran.dg/vect/vect-8.f90:  New test case.\n+\n 2012-02-05  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/48847"}, {"sha": "c2fe583d7f8e3dfce55f5e520a28b3d8e2bba709", "filename": "gcc/testsuite/gfortran.dg/vect/vect-8.f90", "status": "added", "additions": 707, "deletions": 0, "changes": 707, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed480b123e63fc73e01d7bc18129291717bf4cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed480b123e63fc73e01d7bc18129291717bf4cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-8.f90?ref=9ed480b123e63fc73e01d7bc18129291717bf4cd", "patch": "@@ -0,0 +1,707 @@\n+! { dg-do compile }\n+! { dg-require-effective-target vect_float }\n+\n+module lfk_prec\n+ integer, parameter :: dp=kind(1.d0)\n+end module lfk_prec\n+\n+!***********************************************\n+\n+SUBROUTINE kernel(tk)\n+!***********************************************************************\n+!                                                                      *\n+!            KERNEL     executes 24 samples of Fortran computation     *\n+!               TK(1) - total cpu time to execute only the 24 kernels. *\n+!               TK(2) - total Flops executed by the 24 Kernels         *\n+!***********************************************************************\n+!                                                                      *\n+!     L. L. N. L.   F O R T R A N   K E R N E L S:   M F L O P S       *\n+!                                                                      *\n+!   These kernels measure  Fortran  numerical  computation rates for a *\n+!   spectrum of  CPU-limited  computational  structures.  Mathematical *\n+!   through-put is measured  in  units  of  millions of floating-point *\n+!   operations executed per Second, called Mega-Flops/Sec.             *\n+!                                                                      *\n+!   This program  measures  a realistic  CPU performance range for the *\n+!   Fortran programming system  on  a  given day.  The CPU performance *\n+!   rates depend  strongly  on  the maturity of the Fortran compiler's *\n+!   ability to translate Fortran code into efficient machine code.     *\n+!   [ The CPU hardware  capability  apart  from  compiler maturity (or *\n+!   availability), could be measured (or simulated) by programming the *\n+!   kernels in assembly  or machine code directly.  These measurements *\n+!   can also  serve  as a framework for tracking the maturation of the *\n+!   Fortran compiler during system development.]                       *\n+!                                                                      *\n+!     Fonzi's Law: There is not now and there never will be a language *\n+!                  in which it is the least bit difficult to write     *\n+!                  bad programs.                                       *\n+!                                                    F.H.MCMAHON  1972 *\n+!***********************************************************************\n+\n+!     l1 :=  param-dimension governs the size of most 1-d arrays\n+!     l2 :=  param-dimension governs the size of most 2-d arrays\n+\n+!     Loop :=  multiple pass control to execute kernel long enough to ti\n+!    me.\n+!     n  :=  DO loop control for each kernel.  Controls are set in subr.\n+!     SIZES\n+\n+!     ******************************************************************\n+use lfk_prec\n+implicit double precision  (a-h,o-z)\n+!IBM  IMPLICIT  REAL*8           (A-H,O-Z)\n+\n+REAL(kind=dp), INTENT(inout)                        :: tk\n+INTEGER :: test !!,AND\n+\n+COMMON/alpha/mk,ik,im,ml,il,mruns,nruns,jr,iovec,npfs(8,3,47)\n+COMMON/beta/tic,times(8,3,47),see(5,3,8,3),terrs(8,3,47),csums(8,3  &\n+    ,47),fopn(8,3,47),dos(8,3,47)\n+\n+COMMON/spaces/ion,j5,k2,k3,loop1,laps,loop,m,kr,lp,n13h,ibuf,nx,l,  &\n+    npass,nfail,n,n1,n2,n13,n213,n813,n14,n16,n416,n21,nt1,nt2,last,idebug  &\n+    ,mpy,loop2,mucho,mpylim,intbuf(16)\n+\n+COMMON/spacer/a11,a12,a13,a21,a22,a23,a31,a32,a33,ar,br,c0,cr,di,dk  &\n+    ,dm22,dm23,dm24,dm25,dm26,dm27,dm28,dn,e3,e6,expmax,flx,q,qa,r,ri  &\n+    ,s,scale,sig,stb5,t,xnc,xnei,xnm\n+\n+COMMON/space0/time(47),csum(47),ww(47),wt(47),ticks,fr(9),terr1(47  &\n+    ),sumw(7),start,skale(47),bias(47),ws(95),total(47),flopn(47),iq(7  &\n+    ),npf,npfs1(47)\n+\n+COMMON/spacei/wtp(3),mul(3),ispan(47,3),ipass(47,3)\n+\n+!     ******************************************************************\n+\n+\n+INTEGER :: e,f,zone\n+COMMON/ispace/e(96),f(96),ix(1001),ir(1001),zone(300)\n+\n+COMMON/space1/u(1001),v(1001),w(1001),x(1001),y(1001),z(1001),g(1001)  &\n+    ,du1(101),du2(101),du3(101),grd(1001),dex(1001),xi(1001),ex(1001)  &\n+    ,ex1(1001),dex1(1001),vx(1001),xx(1001),rx(1001),rh(2048),vsp(101)  &\n+    ,vstp(101),vxne(101),vxnd(101),ve3(101),vlr(101),vlin(101),b5(101)  &\n+    ,plan(300),d(300),sa(101),sb(101)\n+\n+COMMON/space2/p(4,512),px(25,101),cx(25,101),vy(101,25),vh(101,7),  &\n+    vf(101,7),vg(101,7),vs(101,7),za(101,7),zp(101,7),zq(101,7),zr(101  &\n+    ,7),zm(101,7),zb(101,7),zu(101,7),zv(101,7),zz(101,7),b(64,64),c(64,64)  &\n+    ,h(64,64),u1(5,101,2),u2(5,101,2),u3(5,101,2)\n+\n+!     ******************************************************************\n+\n+dimension zx(1023),xz(447,3),tk(6),mtmp(1)\n+EQUIVALENCE(zx(1),z(1)),(xz(1,1),x(1))\n+double precision temp\n+logical ltmp\n+\n+\n+!     ******************************************************************\n+\n+!     STANDARD PRODUCT COMPILER DIRECTIVES MAY BE USED FOR OPTIMIZATION\n+\n+\n+\n+\n+\n+CALL trace('KERNEL  ')\n+\n+CALL SPACE\n+\n+mpy= 1\n+mpysav= mpylim\n+loop2= 1\n+mpylim= loop2\n+l= 1\n+loop= 1\n+lp= loop\n+it0= test(0)\n+loop2= mpysav\n+mpylim= loop2\n+do\n+\n+!***********************************************************************\n+!***  KERNEL 1      HYDRO FRAGMENT\n+!***********************************************************************\n+\n+  x(:n)= q+y(:n)*(r*zx(11:n+10)+t*zx(12:n+11))\n+IF(test(1) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+\n+do\n+!                   we must execute    DO k= 1,n  repeatedly for accurat\n+!    e timing\n+\n+!***********************************************************************\n+!***  KERNEL 2      ICCG EXCERPT (INCOMPLETE CHOLESKY - CONJUGATE GRADIE\n+!    NT)\n+!***********************************************************************\n+\n+\n+ii= n\n+ipntp= 0\n+\n+do while(ii >  1)\n+ipnt= ipntp\n+ipntp= ipntp+ii\n+ii= ishft(ii,-1)\n+i= ipntp+1\n+!dir$ vector always\n+       x(ipntp+2:ipntp+ii+1)=x(ipnt+2:ipntp:2)-v(ipnt+2:ipntp:2) &\n+     &*x(ipnt+1:ipntp-1:2)-v(ipnt+3:ipntp+1:2)*x(ipnt+3:ipntp+1:2)\n+END DO\n+IF(test(2) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+\n+do\n+\n+!***********************************************************************\n+!***  KERNEL 3      INNER PRODUCT\n+!***********************************************************************\n+\n+\n+q= dot_product(z(:n),x(:n))\n+IF(test(3) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+m= (1001-7)/2\n+\n+!***********************************************************************\n+!***  KERNEL 4      BANDED LINEAR EQUATIONS\n+!***********************************************************************\n+\n+fw= 1.000D-25\n+\n+do\n+!dir$ vector always\n+ xz(6,:3)= y(5)*(xz(6,:3)+matmul(y(5:n:5), xz(:n/5,:3)))\n+\n+IF(test(4) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+\n+do\n+\n+!***********************************************************************\n+!***  KERNEL 5      TRI-DIAGONAL ELIMINATION, BELOW DIAGONAL (NO VECTORS\n+!    )\n+!***********************************************************************\n+\n+\n+tmp= x(1)\n+DO i= 2,n\n+  tmp= z(i)*(y(i)-tmp)\n+  x(i)= tmp\n+END DO\n+IF(test(5) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+\n+do\n+\n+!***********************************************************************\n+!***  KERNEL 6      GENERAL LINEAR RECURRENCE EQUATIONS\n+!***********************************************************************\n+\n+\n+DO i= 2,n\n+  w(i)= 0.0100D0+dot_product(b(i,:i-1),w(i-1:1:-1))\n+END DO\n+IF(test(6) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+\n+do\n+\n+!***********************************************************************\n+!***  KERNEL 7      EQUATION OF STATE FRAGMENT\n+!***********************************************************************\n+\n+\n+  x(:n)= u(:n)+r*(z(:n)+r*y(:n))+t*(u(4:n+3)+r*(u(3:n+2)+r*u(2:n+1))+t*(  &\n+      u(7:n+6)+q*(u(6:n+5)+q*u(5:n+4))))\n+IF(test(7) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+\n+do\n+\n+\n+!***********************************************************************\n+!***  KERNEL 8      A.D.I. INTEGRATION\n+!***********************************************************************\n+\n+\n+nl1= 1\n+nl2= 2\n+fw= 2.000D0\n+  DO ky= 2,n\n+DO kx= 2,3\n+    du1ky= u1(kx,ky+1,nl1)-u1(kx,ky-1,nl1)\n+    du2ky= u2(kx,ky+1,nl1)-u2(kx,ky-1,nl1)\n+    du3ky= u3(kx,ky+1,nl1)-u3(kx,ky-1,nl1)\n+    u1(kx,ky,nl2)= u1(kx,ky,nl1)+a11*du1ky+a12*du2ky+a13  &\n+        *du3ky+sig*(u1(kx+1,ky,nl1)-fw*u1(kx,ky,nl1)+u1(kx-1,ky,nl1))\n+    u2(kx,ky,nl2)= u2(kx,ky,nl1)+a21*du1ky+a22*du2ky+a23  &\n+        *du3ky+sig*(u2(kx+1,ky,nl1)-fw*u2(kx,ky,nl1)+u2(kx-1,ky,nl1))\n+    u3(kx,ky,nl2)= u3(kx,ky,nl1)+a31*du1ky+a32*du2ky+a33  &\n+        *du3ky+sig*(u3(kx+1,ky,nl1)-fw*u3(kx,ky,nl1)+u3(kx-1,ky,nl1))\n+  END DO\n+END DO\n+IF(test(8) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+\n+do\n+\n+!***********************************************************************\n+!***  KERNEL 9      INTEGRATE PREDICTORS\n+!***********************************************************************\n+\n+\n+  px(1,:n)= dm28*px(13,:n)+px(3,:n)+dm27*px(12,:n)+dm26*px(11,:n)+dm25*px(10  &\n+      ,:n)+dm24*px(9,:n)+dm23*px(8,:n)+dm22*px(7,:n)+c0*(px(5,:n)+px(6,:n))\n+IF(test(9) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+\n+do\n+\n+!***********************************************************************\n+!***  KERNEL 10     DIFFERENCE PREDICTORS\n+!***********************************************************************\n+\n+!dir$ unroll(2)\n+\t  do k= 1,n\n+\t      br= cx(5,k)-px(5,k)\n+\t      px(5,k)= cx(5,k)\n+\t      cr= br-px(6,k)\n+\t      px(6,k)= br\n+\t      ar= cr-px(7,k)\n+\t      px(7,k)= cr\n+\t      br= ar-px(8,k)\n+\t      px(8,k)= ar\n+\t      cr= br-px(9,k)\n+\t      px(9,k)= br\n+\t      ar= cr-px(10,k)\n+\t      px(10,k)= cr\n+\t      br= ar-px(11,k)\n+\t      px(11,k)= ar\n+\t      cr= br-px(12,k)\n+\t      px(12,k)= br\n+\t      px(14,k)= cr-px(13,k)\n+\t      px(13,k)= cr\n+\t    enddo\n+IF(test(10) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+\n+do\n+\n+!***********************************************************************\n+!***  KERNEL 11     FIRST SUM.   PARTIAL SUMS.              (NO VECTORS)\n+!***********************************************************************\n+\n+\n+temp= 0\n+DO k= 1,n\n+  temp= temp+y(k)\n+  x(k)= temp\n+END DO\n+IF(test(11) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+\n+do\n+\n+!***********************************************************************\n+!***  KERNEL 12     FIRST DIFF.\n+!***********************************************************************\n+\n+  x(:n)= y(2:n+1)-y(:n)\n+IF(test(12) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+fw= 1.000D0\n+\n+!***********************************************************************\n+!***  KERNEL 13      2-D PIC   Particle In Cell\n+!***********************************************************************\n+\n+\n+do\n+\n+! rounding modes for integerizing make no difference here\n+\t  do k= 1,n\n+\t      i1= 1+iand(int(p(1,k)),63)\n+\t      j1= 1+iand(int(p(2,k)),63)\n+\t      p(3,k)= p(3,k)+b(i1,j1)\n+\t      p(1,k)= p(1,k)+p(3,k)\n+\t      i2= iand(int(p(1,k)),63)\n+\t      p(1,k)= p(1,k)+y(i2+32)\n+\t      p(4,k)= p(4,k)+c(i1,j1)\n+\t      p(2,k)= p(2,k)+p(4,k)\n+\t      j2= iand(int(p(2,k)),63)\n+\t      p(2,k)= p(2,k)+z(j2+32)\n+\t      i2= i2+e(i2+32)\n+\t      j2= j2+f(j2+32)\n+\t      h(i2,j2)= h(i2,j2)+fw\n+\t    enddo\n+IF(test(13) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+fw= 1.000D0\n+\n+!***********************************************************************\n+!***  KERNEL 14      1-D PIC   Particle In Cell\n+!***********************************************************************\n+\n+\n+\n+do\n+\n+  ix(:n)= grd(:n)\n+!dir$ ivdep\n+  vx(:n)= ex(ix(:n))-ix(:n)*dex(ix(:n))\n+  ir(:n)= vx(:n)+flx\n+  rx(:n)= vx(:n)+flx-ir(:n)\n+  ir(:n)= iand(ir(:n),2047)+1\n+  xx(:n)= rx(:n)+ir(:n)\n+DO k= 1,n\n+      rh(ir(k))= rh(ir(k))+fw-rx(k)\n+      rh(ir(k)+1)= rh(ir(k)+1)+rx(k)\n+END DO\n+IF(test(14) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+\n+do\n+\n+!***********************************************************************\n+!***  KERNEL 15     CASUAL FORTRAN.  DEVELOPMENT VERSION.\n+!***********************************************************************\n+\n+\n+!       CASUAL ORDERING OF SCALAR OPERATIONS IS TYPICAL PRACTICE.\n+!       THIS EXAMPLE DEMONSTRATES THE NON-TRIVIAL TRANSFORMATION\n+!       REQUIRED TO MAP INTO AN EFFICIENT MACHINE IMPLEMENTATION.\n+\n+\n+ng= 7\n+nz= n\n+ar= 0.05300D0\n+br= 0.07300D0\n+!$omp parallel do private(t,j,k,r,s,i,ltmp) if(nz>98)\n+do j= 2,ng-1\n+  do k= 2,nz\n+    i= merge(k-1,k,vf(k,j) <  vf((k-1),j))\n+    t= merge(br,ar,vh(k,(j+1)) <= vh(k,j))\n+    r= MAX(vh(i,j),vh(i,j+1))\n+    s= vf(i,j)\n+    vy(k,j)= t/s*SQRT(vg(k,j)**2+r*r)\n+    if(k < nz)then\n+\tltmp=vf(k,j) >= vf(k,(j-1))\n+\ti= merge(j,j-1,ltmp)\n+\tt= merge(ar,br,ltmp)\n+\tr= MAX(vg(k,i),vg(k+1,i))\n+\ts= vf(k,i)\n+\tvs(k,j)= t/s*SQRT(vh(k,j)**2+r*r)\n+    endif\n+  END do\n+  vs(nz,j)= 0.0D0\n+END do\n+  vy(2:nz,ng)= 0.0D0\n+IF(test(15) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+ii= n/3\n+\n+!***********************************************************************\n+!***  KERNEL 16     MONTE CARLO SEARCH LOOP\n+!***********************************************************************\n+\n+lb= ii+ii\n+k2= 0\n+k3= 0\n+\n+do\n+DO m= 1,zone(1)\n+  j2= (n+n)*(m-1)+1\n+  DO k= 1,n\n+    k2= k2+1\n+    j4= j2+k+k\n+    j5= zone(j4)\n+    IF(j5 >= n)THEN\n+      IF(j5 == n)THEN\n+        EXIT\n+      END IF\n+      k3= k3+1\n+      IF(d(j5) <  d(j5-1)*(t-d(j5-2))**2+(s-d(j5-3))**2+ (r-d(j5-4))**2)THEN\n+        go to 200\n+      END IF\n+      IF(d(j5) == d(j5-1)*(t-d(j5-2))**2+(s-d(j5-3))**2+ (r-d(j5-4))**2)THEN\n+        EXIT\n+      END IF\n+    ELSE\n+      IF(j5-n+lb <  0)THEN\n+        IF(plan(j5) <  t)THEN\n+          go to 200\n+        END IF\n+        IF(plan(j5) == t)THEN\n+          EXIT\n+        END IF\n+      ELSE\n+        IF(j5-n+ii <  0)THEN\n+          IF(plan(j5) <  s)THEN\n+            go to 200\n+          END IF\n+          IF(plan(j5) == s)THEN\n+            EXIT\n+          END IF\n+        ELSE\n+          IF(plan(j5) <  r)THEN\n+            go to 200\n+          END IF\n+          IF(plan(j5) == r)THEN\n+            EXIT\n+          END IF\n+        END IF\n+      END IF\n+    END IF\n+    IF(zone(j4-1) <= 0)THEN\n+      go to 200\n+    END IF\n+  END DO\n+  EXIT\n+  200             IF(zone(j4-1) == 0)THEN\n+    EXIT\n+  END IF\n+END DO\n+IF(test(16) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+dw= 5.0000D0/3.0000D0\n+\n+!***********************************************************************\n+!***  KERNEL 17     IMPLICIT, CONDITIONAL COMPUTATION       (NO VECTORS)\n+!***********************************************************************\n+\n+!         RECURSIVE-DOUBLING VECTOR TECHNIQUES CAN NOT BE USED\n+!         BECAUSE CONDITIONAL OPERATIONS APPLY TO EACH ELEMENT.\n+\n+fw= 1.0000D0/3.0000D0\n+tw= 1.0300D0/3.0700D0\n+\n+do\n+scale= dw\n+rtmp= fw\n+e6= tw\n+DO k= n,2,-1\n+  e3= rtmp*vlr(k)+vlin(k)\n+  xnei= vxne(k)\n+  vxnd(k)= e6\n+  xnc= scale*e3\n+!                                      SELECT MODEL\n+  IF(max(rtmp,xnei) <= xnc)THEN\n+!                                      LINEAR MODEL\n+    ve3(k)= e3\n+    rtmp= e3+e3-rtmp\n+    vxne(k)= e3+e3-xnei\n+  ELSE\n+    rtmp= rtmp*vsp(k)+vstp(k)\n+!                                      STEP MODEL\n+    vxne(k)= rtmp\n+    ve3(k)= rtmp\n+  END IF\n+    e6= rtmp\n+END DO\n+xnm= rtmp\n+IF(test(17) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+\n+do\n+\n+!***********************************************************************\n+!***  KERNEL 18     2-D EXPLICIT HYDRODYNAMICS FRAGMENT\n+!***********************************************************************\n+\n+\n+t= 0.003700D0\n+s= 0.004100D0\n+kn= 6\n+jn= n\n+  zb(2:jn,2:kn)=(zr(2:jn,2:kn)+zr(2:jn,:kn-1))/(zm(2:jn,2:kn)+zm(:jn-1,2:kn)) &\n+\t*(zp(:jn-1,2:kn)-zp(2:jn,2:kn)+(zq(:jn-1,2:kn)-zq(2:jn,2:kn)))\n+  za(2:jn,2:kn)=(zr(2:jn,2:kn)+zr(:jn-1,2:kn))/(zm(:jn-1,2:kn)+zm(:jn-1,3:kn+1))  &\n+\t*(zp(:jn-1,3:kn+1)-zp(:jn-1,2:kn)+(zq(:jn-1,3:kn+1)-zq(:jn-1,2:kn)))\n+  zu(2:jn,2:kn)= zu(2:jn,2:kn)+ &\n+\ts*(za(2:jn,2:kn)*(zz(2:jn,2:kn)-zz(3:jn+1,2:kn)) &\n+\t-za(:jn-1,2:kn)*(zz(2:jn,2:kn)-zz(:jn-1,2:kn)) &\n+\t-zb(2:jn,2:kn)*(zz(2:jn,2:kn)-zz(2:jn,:kn-1))+ &\n+\tzb(2:jn,3:kn+1)*(zz(2:jn, 2:kn)-zz(2:jn,3:kn+1)))\n+  zv(2:jn,2:kn)= zv(2:jn,2:kn)+ &\n+\ts*(za(2:jn,2:kn)*(zr(2:jn,2:kn)-zr(3:jn+1,2:kn)) &\n+\t-za(:jn-1,2:kn)*(zr(2:jn,2:kn)-zr(:jn-1,2:kn)) &\n+\t-zb(2:jn,2:kn)*(zr(2:jn,2:kn)-zr(2:jn,:kn-1))+ &\n+\tzb(2:jn,3:kn+1)*(zr(2:jn, 2:kn)-zr(2:jn,3:kn+1)))\n+  zr(2:jn,2:kn)= zr(2:jn,2:kn)+t*zu(2:jn,2:kn)\n+  zz(2:jn,2:kn)= zz(2:jn,2:kn)+t*zv(2:jn,2:kn)\n+IF(test(18) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+\n+do\n+\n+!***********************************************************************\n+!***  KERNEL 19      GENERAL LINEAR RECURRENCE EQUATIONS    (NO VECTORS)\n+!***********************************************************************\n+\n+kb5i= 0\n+\n+DO k= 1,n\n+  b5(k+kb5i)= sa(k)+stb5*sb(k)\n+  stb5= b5(k+kb5i)-stb5\n+END DO\n+DO k= n,1,-1\n+  b5(k+kb5i)= sa(k)+stb5*sb(k)\n+  stb5= b5(k+kb5i)-stb5\n+END DO\n+IF(test(19) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+dw= 0.200D0\n+\n+!***********************************************************************\n+!***  KERNEL 20     DISCRETE ORDINATES TRANSPORT: RECURRENCE (NO VECTORS\n+!***********************************************************************\n+\n+\n+do\n+\n+rtmp= xx(1)\n+DO k= 1,n\n+  di= y(k)*(rtmp+dk)-g(k)\n+  dn=merge( max(s,min(z(k)*(rtmp+dk)/di,t)),dw,di /= 0.0)\n+  x(k)= ((w(k)+v(k)*dn)*rtmp+u(k))/(vx(k)+v(k)*dn)\n+  rtmp= ((w(k)-vx(k))*rtmp+u(k))*DN/(vx(k)+v(k)*dn)+ rtmp\n+ xx(k+1)= rtmp\n+END DO\n+IF(test(20) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+\n+do\n+\n+!***********************************************************************\n+!***  KERNEL 21     MATRIX*MATRIX PRODUCT\n+!***********************************************************************\n+\n+    px(:25,:n)= px(:25,:n)+matmul(vy(:25,:25),cx(:25,:n))\n+IF(test(21) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+expmax= 20.0000D0\n+\n+\n+!***********************************************************************\n+!***  KERNEL 22     PLANCKIAN DISTRIBUTION\n+!***********************************************************************\n+\n+!      EXPMAX= 234.500d0\n+fw= 1.00000D0\n+u(n)= 0.99000D0*expmax*v(n)\n+\n+do\n+\n+  y(:n)= u(:n)/v(:n)\n+  w(:n)= x(:n)/(EXP(y(:n))-fw)\n+IF(test(22) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+fw= 0.17500D0\n+\n+!***********************************************************************\n+!***  KERNEL 23     2-D IMPLICIT HYDRODYNAMICS FRAGMENT\n+!***********************************************************************\n+\n+\n+do\n+\n+      DO k= 2,n\n+\t do j=2,6\n+\t     za(k,j)= za(k,j)+fw*(za(k,j+1)*zr(k,j)-za(k,j)+\t\t&\n+     &\t\tzv(k,j)*za(k-1,j)+(zz(k,j)+za(k+1,j)*\t\t\t&\n+     &\t\tzu(k,j)+za(k,j-1)*zb(k,j)))\n+      END DO\n+    END DO\n+IF(test(23) <= 0)THEN\n+  EXIT\n+END IF\n+END DO\n+x(n/2)= -1.000D+10\n+\n+!***********************************************************************\n+!***  KERNEL 24     FIND LOCATION OF FIRST MINIMUM IN ARRAY\n+!***********************************************************************\n+\n+!      X( n/2)= -1.000d+50\n+\n+do\n+ m= minloc(x(:n),DIM=1)\n+\n+IF(test(24) == 0)THEN\n+  EXIT\n+END IF\n+END DO\n+sum= 0.00D0\n+som= 0.00D0\n+DO k= 1,mk\n+  sum= sum+time(k)\n+  times(jr,il,k)= time(k)\n+  terrs(jr,il,k)= terr1(k)\n+  npfs(jr,il,k)= npfs1(k)\n+  csums(jr,il,k)= csum(k)\n+  dos(jr,il,k)= total(k)\n+  fopn(jr,il,k)= flopn(k)\n+  som= som+flopn(k)*total(k)\n+END DO\n+tk(1)= tk(1)+sum\n+tk(2)= tk(2)+som\n+!                        Dumpout Checksums:  file \"chksum\"\n+!     WRITE ( 7,706) jr, il\n+! 706 FORMAT(1X,2I3)\n+!     WRITE ( 7,707) ( CSUM(k), k= 1,mk)\n+! 707 FORMAT(5X,'&',1PE23.16,',',1PE23.16,',',1PE23.16,',')\n+\n+CALL track('KERNEL  ')\n+RETURN\n+END SUBROUTINE kernel\n+\n+! { dg-final { scan-tree-dump-times \"vectorized 19 loops\" 1 \"vect\" } }\n+! { dg-final { cleanup-tree-dump \"vect\" } }"}]}