{"sha": "0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY2ZjcyZTgwNTI1ZjE0ZTkxZDRkMWVlNmQzYmQ5MWZkN2M5Njg1OQ==", "commit": {"author": {"name": "Dominik Vogt", "email": "vogt@linux.vnet.ibm.com", "date": "2016-12-02T08:30:16Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-12-02T08:30:16Z"}, "message": "PR target/77822: S390: Validate argument range of {zero,sign}_extract.\n\nWith some undefined code, combine generates patterns where the arguments to\n*_extract are out of range, e.b. a negative bit position.  If the s390 backend\naccepts these, they lead to not just undefined behaviour but invalid assembly\ninstructions (argument out of the allowed range).  So this patch makes sure\nthat the rtl expressions with out of range arguments are rejected.\n\ngcc/ChangeLog:\n\n2016-12-02  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n\n\tPR target/77822\n\t* config/s390/s390.md (\"extzv\")\n\t(\"*extzv<mode><clobbercc_or_nocc>\")\n\t(\"*extzvdi<clobbercc_or_nocc>_lshiftrt\")\n\t(\"*<risbg_n>_ior_and_sr_ze\")\n\t(\"*extract1bitdi<clobbercc_or_nocc>\")\n\t(\"*insv<mode><clobbercc_or_nocc>\", \"*insv_rnsbg_noshift\")\n\t(\"*insv_rnsbg_srl\", \"*insv<mode>_mem_reg\")\n\t(\"*insvdi_mem_reghigh\", \"*insvdi_reg_imm\"): Use EXTRACT_ARGS_IN_RANGE\n\tto validate the arguments of zero_extract and sign_extract.\n\ngcc/testsuite/ChangeLog:\n\n2016-12-02  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n\n\tPR target/77822\n\t* gcc.target/s390/s390.exp: Support .C tests.\n\t* gcc.target/s390/pr77822-2.c: New test.\n\t* gcc.target/s390/pr77822-1.C: New test.\n\nFrom-SVN: r243160", "tree": {"sha": "8f6736b8478f662ac5b9ec7843dbc636b64598e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f6736b8478f662ac5b9ec7843dbc636b64598e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859/comments", "author": {"login": "vogtd", "id": 9690100, "node_id": "MDQ6VXNlcjk2OTAxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/9690100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vogtd", "html_url": "https://github.com/vogtd", "followers_url": "https://api.github.com/users/vogtd/followers", "following_url": "https://api.github.com/users/vogtd/following{/other_user}", "gists_url": "https://api.github.com/users/vogtd/gists{/gist_id}", "starred_url": "https://api.github.com/users/vogtd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vogtd/subscriptions", "organizations_url": "https://api.github.com/users/vogtd/orgs", "repos_url": "https://api.github.com/users/vogtd/repos", "events_url": "https://api.github.com/users/vogtd/events{/privacy}", "received_events_url": "https://api.github.com/users/vogtd/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f61415f1f776d35f0d616bd662019a659a6e536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f61415f1f776d35f0d616bd662019a659a6e536", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f61415f1f776d35f0d616bd662019a659a6e536"}], "stats": {"total": 376, "additions": 369, "deletions": 7}, "files": [{"sha": "e357932cc188aed2abe7168c00f53055e58200b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859", "patch": "@@ -1,3 +1,16 @@\n+2016-12-02  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\tPR target/77822\n+\t* config/s390/s390.md (\"extzv\")\n+\t(\"*extzv<mode><clobbercc_or_nocc>\")\n+\t(\"*extzvdi<clobbercc_or_nocc>_lshiftrt\")\n+\t(\"*<risbg_n>_ior_and_sr_ze\")\n+\t(\"*extract1bitdi<clobbercc_or_nocc>\")\n+\t(\"*insv<mode><clobbercc_or_nocc>\", \"*insv_rnsbg_noshift\")\n+\t(\"*insv_rnsbg_srl\", \"*insv<mode>_mem_reg\")\n+\t(\"*insvdi_mem_reghigh\", \"*insvdi_reg_imm\"): Use EXTRACT_ARGS_IN_RANGE\n+\tto validate the arguments of zero_extract and sign_extract.\n+\n 2016-12-02  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \tPR target/77822"}, {"sha": "4f2effd93ff04511b7e37a370a982c0014f8a110", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859", "patch": "@@ -3741,6 +3741,8 @@\n      (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_Z10\"\n {\n+  if (! EXTRACT_ARGS_IN_RANGE (INTVAL (operands[2]), INTVAL (operands[3]), 64))\n+    FAIL;\n   /* Starting with zEC12 there is risbgn not clobbering CC.  */\n   if (TARGET_ZEC12)\n     {\n@@ -3760,7 +3762,9 @@\n         (match_operand 2 \"const_int_operand\" \"\")   ; size\n         (match_operand 3 \"const_int_operand\" \"\"))) ; start\n   ]\n-  \"<z10_or_zEC12_cond>\"\n+  \"<z10_or_zEC12_cond>\n+   && EXTRACT_ARGS_IN_RANGE (INTVAL (operands[2]), INTVAL (operands[3]),\n+\t\t\t     GET_MODE_BITSIZE (<MODE>mode))\"\n   \"<risbg_n>\\t%0,%1,64-%2,128+63,<bitoff_plus>%3+%2\" ; dst, src, start, end, shift\n   [(set_attr \"op_type\" \"RIE\")\n    (set_attr \"z10prop\" \"z10_super_E1\")])\n@@ -3773,6 +3777,7 @@\n \t(lshiftrt:DI (match_operand:DI 3 \"register_operand\" \"d\")\n \t\t     (match_operand:DI 4 \"nonzero_shift_count_operand\" \"\")))]\n   \"<z10_or_zEC12_cond>\n+   && EXTRACT_ARGS_IN_RANGE (INTVAL (operands[1]), INTVAL (operands[2]), 64)\n    && 64 - UINTVAL (operands[4]) >= UINTVAL (operands[1])\"\n   \"<risbg_n>\\t%0,%3,%2,%2+%1-1,128-%2-%1-%4\"\n   [(set_attr \"op_type\" \"RIE\")\n@@ -3791,6 +3796,7 @@\n \t\t  (match_operand 5 \"const_int_operand\" \"\")) ; start\n \t\t 4)))]\n   \"<z10_or_zEC12_cond>\n+   && EXTRACT_ARGS_IN_RANGE (INTVAL (operands[4]), INTVAL (operands[5]), 64)\n    && UINTVAL (operands[2]) == (~(0ULL) << UINTVAL (operands[4]))\"\n   \"<risbg_n>\\t%0,%3,64-%4,63,%4+%5\"\n   [(set_attr \"op_type\" \"RIE\")\n@@ -3804,7 +3810,8 @@\n \t\t(const_int 1)  ; size\n \t\t(match_operand 2 \"const_int_operand\" \"\")) ; start\n \t       (const_int 0)))]\n-  \"<z10_or_zEC12_cond>\"\n+  \"<z10_or_zEC12_cond>\n+   && EXTRACT_ARGS_IN_RANGE (1, INTVAL (operands[2]), 64)\"\n   \"<risbg_n>\\t%0,%1,64-1,128+63,%2+1\" ; dst, src, start, end, shift\n   [(set_attr \"op_type\" \"RIE\")\n    (set_attr \"z10prop\" \"z10_super_E1\")])\n@@ -3919,6 +3926,8 @@\n \t\t\t  (match_operand 2 \"const_int_operand\"    \"I\")) ; pos\n \t(match_operand:GPR 3 \"nonimmediate_operand\" \"d\"))]\n   \"<z10_or_zEC12_cond>\n+   && EXTRACT_ARGS_IN_RANGE (INTVAL (operands[1]), INTVAL (operands[2]),\n+\t\t\t     GET_MODE_BITSIZE (<MODE>mode))\n    && (INTVAL (operands[1]) + INTVAL (operands[2])) <= <bitsize>\"\n   \"<risbg_n>\\t%0,%3,<bitoff_plus>%2,<bitoff_plus>%2+%1-1,<bitsize>-%2-%1\"\n   [(set_attr \"op_type\" \"RIE\")\n@@ -4214,6 +4223,7 @@\n \t  (match_operand:DI 3 \"nonimmediate_operand\" \"d\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_Z10\n+   && EXTRACT_ARGS_IN_RANGE (INTVAL (operands[1]), INTVAL (operands[2]), 64)\n    && INTVAL (operands[1]) + INTVAL (operands[2]) == 64\"\n   \"rnsbg\\t%0,%3,%2,63,0\"\n   [(set_attr \"op_type\" \"RIE\")])\n@@ -4230,6 +4240,7 @@\n \t  (match_operand:DI 4 \"nonimmediate_operand\" \"d\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_Z10\n+   && EXTRACT_ARGS_IN_RANGE (INTVAL (operands[1]), INTVAL (operands[2]), 64)\n    && INTVAL (operands[3]) == 64 - INTVAL (operands[1]) - INTVAL (operands[2])\"\n   \"rnsbg\\t%0,%4,%2,%2+%1-1,%3\"\n   [(set_attr \"op_type\" \"RIE\")])\n@@ -4239,7 +4250,8 @@\n \t\t\t(match_operand 1 \"const_int_operand\" \"n,n\")\n \t\t\t(const_int 0))\n \t(match_operand:W 2 \"register_operand\" \"d,d\"))]\n-  \"INTVAL (operands[1]) > 0\n+  \"EXTRACT_ARGS_IN_RANGE (INTVAL (operands[1]), 0, 64)\n+   && INTVAL (operands[1]) > 0\n    && INTVAL (operands[1]) <= GET_MODE_BITSIZE (SImode)\n    && INTVAL (operands[1]) % BITS_PER_UNIT == 0\"\n {\n@@ -4260,6 +4272,7 @@\n \t(lshiftrt:DI (match_operand:DI 2 \"register_operand\" \"d\")\n \t\t     (const_int 32)))]\n   \"TARGET_ZARCH\n+   && EXTRACT_ARGS_IN_RANGE (INTVAL (operands[1]), 0, 64)\n    && INTVAL (operands[1]) > 0\n    && INTVAL (operands[1]) <= GET_MODE_BITSIZE (SImode)\n    && INTVAL (operands[1]) % BITS_PER_UNIT == 0\"\n@@ -4278,6 +4291,7 @@\n \t\t\t (match_operand 1 \"const_int_operand\" \"n\"))\n \t(match_operand:DI 2 \"const_int_operand\" \"n\"))]\n   \"TARGET_ZARCH\n+   && EXTRACT_ARGS_IN_RANGE (16, INTVAL (operands[1]), 64)\n    && INTVAL (operands[1]) >= 0\n    && INTVAL (operands[1]) < BITS_PER_WORD\n    && INTVAL (operands[1]) % 16 == 0\""}, {"sha": "447aaf6e3a4b2597d2e40b07723db06b08bd3aea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859", "patch": "@@ -1,3 +1,10 @@\n+2016-12-02  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n+\n+\tPR target/77822\n+\t* gcc.target/s390/s390.exp: Support .C tests.\n+\t* gcc.target/s390/pr77822-2.c: New test.\n+\t* gcc.target/s390/pr77822-1.C: New test.\n+\n 2016-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/vector/vec-nopeel-1.c: New test."}, {"sha": "bd5a9b4abd8833d3da8f110e7b99382c172763ae", "filename": "gcc/testsuite/gcc.target/s390/pr77822-1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr77822-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr77822-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr77822-1.C?ref=0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859", "patch": "@@ -0,0 +1,21 @@\n+/* Regression test for PR/77822.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=zEC12\" } */\n+\n+class A {\n+  void m_fn1();\n+  char m_datawidth;\n+  char m_subunits;\n+  int m_subunit_infos[];\n+};\n+int a;\n+long b;\n+void A::m_fn1() {\n+  int c = 32, d = m_datawidth / c;\n+  for (int e = 0; e < d; e++) {\n+    int f = e * 32;\n+    if (b >> f & 1)\n+      m_subunit_infos[m_subunits] = a;\n+  }\n+}"}, {"sha": "6789152e30c8e90780edfb610cd48ca1892334b5", "filename": "gcc/testsuite/gcc.target/s390/pr77822-2.c", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr77822-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr77822-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr77822-2.c?ref=0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859", "patch": "@@ -0,0 +1,307 @@\n+/* This testcase checks that the shift operand of r*sbg instructions is in\n+   range.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=zEC12 -Wno-shift-count-overflow\" } */\n+\n+int g;\n+\n+void pos_ll_129 (long long b)\n+{\n+  if (b >> 129 & 1)\n+    g = b;\n+}\n+\n+void sizepos_ll_134 (long long b)\n+{\n+  if (b >> 134 & 1)\n+    g = b;\n+}\n+\n+void pos_ll_65 (long long b)\n+{\n+  if (b >> 65 & 1)\n+    g = b;\n+}\n+\n+void sizepos_ll_70 (long long b)\n+{\n+  if (b >> 70 & 1)\n+    g = b;\n+}\n+\n+void pos_ll_33 (long long b)\n+{\n+  if (b >> 33 & 1)\n+    g = b;\n+}\n+\n+void sizepos_ll_38 (long long b)\n+{\n+  if (b >> 38 & 1)\n+    g = b;\n+}\n+\n+void pos_ll_17 (long long b)\n+{\n+  if (b >> 17 & 1)\n+    g = b;\n+}\n+\n+void sizepos_ll_22 (long long b)\n+{\n+  if (b >> 22 & 1)\n+    g = b;\n+}\n+\n+void pos_ll_8 (long long b)\n+{\n+  if (b >> 8 & 1)\n+    g = b;\n+}\n+\n+void sizepos_ll_13 (long long b)\n+{\n+  if (b >> 13 & 1)\n+    g = b;\n+}\n+\n+void pos_l_129 (long b)\n+{\n+  if (b >> 129 & 1)\n+    g = b;\n+}\n+\n+void sizepos_l_134 (long b)\n+{\n+  if (b >> 134 & 1)\n+    g = b;\n+}\n+\n+void pos_l_65 (long b)\n+{\n+  if (b >> 65 & 1)\n+    g = b;\n+}\n+\n+void sizepos_l_70 (long b)\n+{\n+  if (b >> 70 & 1)\n+    g = b;\n+}\n+\n+void pos_l_33 (long b)\n+{\n+  if (b >> 33 & 1)\n+    g = b;\n+}\n+\n+void sizepos_l_38 (long b)\n+{\n+  if (b >> 38 & 1)\n+    g = b;\n+}\n+\n+void pos_l_17 (long b)\n+{\n+  if (b >> 17 & 1)\n+    g = b;\n+}\n+\n+void sizepos_l_22 (long b)\n+{\n+  if (b >> 22 & 1)\n+    g = b;\n+}\n+\n+void pos_l_8 (long b)\n+{\n+  if (b >> 8 & 1)\n+    g = b;\n+}\n+\n+void sizepos_l_13 (long b)\n+{\n+  if (b >> 13 & 1)\n+    g = b;\n+}\n+\n+void pos_i_129 (int b)\n+{\n+  if (b >> 129 & 1)\n+    g = b;\n+}\n+\n+void sizepos_i_134 (int b)\n+{\n+  if (b >> 134 & 1)\n+    g = b;\n+}\n+\n+void pos_i_65 (int b)\n+{\n+  if (b >> 65 & 1)\n+    g = b;\n+}\n+\n+void sizepos_i_70 (int b)\n+{\n+  if (b >> 70 & 1)\n+    g = b;\n+}\n+\n+void pos_i_33 (int b)\n+{\n+  if (b >> 33 & 1)\n+    g = b;\n+}\n+\n+void sizepos_i_38 (int b)\n+{\n+  if (b >> 38 & 1)\n+    g = b;\n+}\n+\n+void pos_i_17 (int b)\n+{\n+  if (b >> 17 & 1)\n+    g = b;\n+}\n+\n+void sizepos_i_22 (int b)\n+{\n+  if (b >> 22 & 1)\n+    g = b;\n+}\n+\n+void pos_i_8 (int b)\n+{\n+  if (b >> 8 & 1)\n+    g = b;\n+}\n+\n+void sizepos_i_13 (int b)\n+{\n+  if (b >> 13 & 1)\n+    g = b;\n+}\n+\n+void pos_s_129 (short b)\n+{\n+  if (b >> 129 & 1)\n+    g = b;\n+}\n+\n+void sizepos_s_134 (short b)\n+{\n+  if (b >> 134 & 1)\n+    g = b;\n+}\n+\n+void pos_s_65 (short b)\n+{\n+  if (b >> 65 & 1)\n+    g = b;\n+}\n+\n+void sizepos_s_70 (short b)\n+{\n+  if (b >> 70 & 1)\n+    g = b;\n+}\n+\n+void pos_s_33 (short b)\n+{\n+  if (b >> 33 & 1)\n+    g = b;\n+}\n+\n+void sizepos_s_38 (short b)\n+{\n+  if (b >> 38 & 1)\n+    g = b;\n+}\n+\n+void pos_s_17 (short b)\n+{\n+  if (b >> 17 & 1)\n+    g = b;\n+}\n+\n+void sizepos_s_22 (short b)\n+{\n+  if (b >> 22 & 1)\n+    g = b;\n+}\n+\n+void pos_s_8 (short b)\n+{\n+  if (b >> 8 & 1)\n+    g = b;\n+}\n+\n+void sizepos_s_13 (short b)\n+{\n+  if (b >> 13 & 1)\n+    g = b;\n+}\n+\n+void pos_c_129 (signed char b)\n+{\n+  if (b >> 129 & 1)\n+    g = b;\n+}\n+\n+void sizepos_c_134 (signed char b)\n+{\n+  if (b >> 134 & 1)\n+    g = b;\n+}\n+\n+void pos_c_65 (signed char b)\n+{\n+  if (b >> 65 & 1)\n+    g = b;\n+}\n+\n+void sizepos_c_70 (signed char b)\n+{\n+  if (b >> 70 & 1)\n+    g = b;\n+}\n+\n+void pos_c_33 (signed char b)\n+{\n+  if (b >> 33 & 1)\n+    g = b;\n+}\n+\n+void sizepos_c_38 (signed char b)\n+{\n+  if (b >> 38 & 1)\n+    g = b;\n+}\n+\n+void pos_c_17 (signed char b)\n+{\n+  if (b >> 17 & 1)\n+    g = b;\n+}\n+\n+void sizepos_c_22 (signed char b)\n+{\n+  if (b >> 22 & 1)\n+    g = b;\n+}\n+\n+void pos_c_8 (signed char b)\n+{\n+  if (b >> 8 & 1)\n+    g = b;\n+}\n+\n+void sizepos_c_13 (signed char b)\n+{\n+  if (b >> 13 & 1)\n+    g = b;\n+}"}, {"sha": "450dcaf427275cb113b0e184943cdd658a464bab", "filename": "gcc/testsuite/gcc.target/s390/s390.exp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp?ref=0f6f72e80525f14e91d4d1ee6d3bd91fd7c96859", "patch": "@@ -90,16 +90,16 @@ dg-init\n set md_tests $srcdir/$subdir/md/*.c\n \n # Main loop.\n-dg-runtest [lsort [prune [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]] \\\n+dg-runtest [lsort [prune [glob -nocomplain $srcdir/$subdir/*.{c,S,C}] \\\n \t\t\t $md_tests]] \"\" $DEFAULT_CFLAGS\n \n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*vector*/*.\\[cS\\]]] \\\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*vector*/*.]] \\\n \t\"\" $DEFAULT_CFLAGS\n \n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/target-attribute/*.\\[cS\\]]] \\\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/target-attribute/*.{c,S,C}]] \\\n \t\"\" $DEFAULT_CFLAGS\n \n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/md/*.\\[cS\\]]] \\\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/md/*.{c,S,C}]] \\\n \t\"\" $DEFAULT_CFLAGS\n \n # Additional hotpatch torture tests."}]}