{"sha": "0247298c2882ee01793b82644d3d7ea32feace68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI0NzI5OGMyODgyZWUwMTc5M2I4MjY0NGQzZDdlYTMyZmVhY2U2OA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-05-29T17:14:31Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-05-29T17:14:31Z"}, "message": "Don't use unshare_expr when not necessary.\n\n2010-05-29  Sebastian Pop  <sebastian.pop@amd.com>\n\n\tPR middle-end/44306\n\t* gcc.dg/tree-ssa/pr44306.c: New.\n\n\t* tree-if-conv.c (is_true_predicate): New.\n\t(is_predicated): Use is_true_predicate.\n\t(add_to_predicate_list): Same.  Do not use unshare_expr.\n\t(add_to_dst_predicate_list): Same.\n\nFrom-SVN: r160031", "tree": {"sha": "059589033b0072c5fe1c20938c39fb6dee3af1ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/059589033b0072c5fe1c20938c39fb6dee3af1ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0247298c2882ee01793b82644d3d7ea32feace68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0247298c2882ee01793b82644d3d7ea32feace68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0247298c2882ee01793b82644d3d7ea32feace68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0247298c2882ee01793b82644d3d7ea32feace68/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32ccbfacd15e7354aa956df41c3f6feac5ed3ba8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ccbfacd15e7354aa956df41c3f6feac5ed3ba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32ccbfacd15e7354aa956df41c3f6feac5ed3ba8"}], "stats": {"total": 106, "additions": 73, "deletions": 33}, "files": [{"sha": "463eff549980a58d73158cbaf59708e168a40852", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0247298c2882ee01793b82644d3d7ea32feace68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0247298c2882ee01793b82644d3d7ea32feace68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0247298c2882ee01793b82644d3d7ea32feace68", "patch": "@@ -1,3 +1,11 @@\n+2010-05-29  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/44306\n+\t* tree-if-conv.c (is_true_predicate): New.\n+\t(is_predicated): Use is_true_predicate.\n+\t(add_to_predicate_list): Same.  Do not use unshare_expr.\n+\t(add_to_dst_predicate_list): Same.\n+\n 2010-05-29  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* tree-if-conv.c (add_to_dst_predicate_list): Do not use the ->aux"}, {"sha": "6b9c4c293c652ff455171dd9151720fadff1643c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0247298c2882ee01793b82644d3d7ea32feace68/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0247298c2882ee01793b82644d3d7ea32feace68/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0247298c2882ee01793b82644d3d7ea32feace68", "patch": "@@ -1,3 +1,8 @@\n+2010-05-29  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/44306\n+\t* gcc.dg/tree-ssa/pr44306.c: New.\n+\n 2010-05-29  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/tree-ssa/ipa-cp-1.c: Update testcase."}, {"sha": "1ea04ce3a98db7d2f3b66eca39c24f6bea81bbba", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr44306.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0247298c2882ee01793b82644d3d7ea32feace68/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr44306.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0247298c2882ee01793b82644d3d7ea32feace68/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr44306.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr44306.c?ref=0247298c2882ee01793b82644d3d7ea32feace68", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-c -O3 -ftree-vectorize\" { target *-*-* } } */\n+\n+extern const int quant_coef8[6][8][8];\n+extern const int dequant_coef8[6][8][8];\n+int LevelScale8x8Luma_Intra[6][8][8];\n+int LevelScale8x8Luma_Inter[6][8][8];\n+int InvLevelScale8x8Luma_Intra[6][8][8];\n+int InvLevelScale8x8Luma_Inter[6][8][8];\n+short UseDefaultScalingMatrix8x8Flag[2];\n+void CalculateQuant8Param()\n+{\n+ int i, j, k, temp;\n+ int present[2];\n+ for(k=0; j<8; j++)\n+   for(i=0; i<8; i++)\n+     {\n+       temp = (i<<3)+j;\n+       if((!present[0]) || UseDefaultScalingMatrix8x8Flag[0])\n+         {\n+           LevelScale8x8Luma_Intra[k][j][i] = (quant_coef8[k][j][i]<<4);\n+           InvLevelScale8x8Luma_Intra[k][j][i] = dequant_coef8[k][j][i];\n+         }\n+       if((!present[1]) || UseDefaultScalingMatrix8x8Flag[1])\n+         {\n+           LevelScale8x8Luma_Inter[k][j][i] = (quant_coef8[k][j][i]<<4);\n+           InvLevelScale8x8Luma_Inter[k][j][i] = dequant_coef8[k][j][i];\n+         }\n+     }\n+}"}, {"sha": "268c171baa675d1b59a45edd3d4901baff1e7231", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 30, "deletions": 33, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0247298c2882ee01793b82644d3d7ea32feace68/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0247298c2882ee01793b82644d3d7ea32feace68/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=0247298c2882ee01793b82644d3d7ea32feace68", "patch": "@@ -130,44 +130,54 @@ ifc_temp_var (tree type, tree exp)\n   return stmt;\n }\n \n+/* Return true when COND is a true predicate.  */\n+\n+static inline bool\n+is_true_predicate (tree cond)\n+{\n+  return (cond == NULL_TREE\n+\t  || cond == boolean_true_node\n+\t  || integer_onep (cond));\n+}\n+\n+/* Returns true when BB has a predicate that is not trivial: true or\n+   NULL_TREE.  */\n+\n+static inline bool\n+is_predicated (basic_block bb)\n+{\n+  return !is_true_predicate ((tree) bb->aux);\n+}\n+\n /* Add condition NEW_COND to the predicate list of basic block BB.  */\n \n-static void\n+static inline void\n add_to_predicate_list (basic_block bb, tree new_cond)\n {\n   tree cond = (tree) bb->aux;\n \n-  if (cond)\n-    cond = fold_build2_loc (EXPR_LOCATION (cond),\n-\t\t\t    TRUTH_OR_EXPR, boolean_type_node,\n-\t\t\t    unshare_expr (cond), new_cond);\n-  else\n-    cond = new_cond;\n-\n-  bb->aux = cond;\n+  bb->aux = is_true_predicate (cond) ? new_cond :\n+    fold_build2_loc (EXPR_LOCATION (cond),\n+\t\t     TRUTH_OR_EXPR, boolean_type_node,\n+\t\t     cond, new_cond);\n }\n \n /* Add the condition COND to the previous condition PREV_COND, and add\n    this to the predicate list of the destination of edge E.  LOOP is\n    the loop to be if-converted.  */\n \n-static tree\n+static void\n add_to_dst_predicate_list (struct loop *loop, edge e,\n \t\t\t   tree prev_cond, tree cond)\n {\n-  tree new_cond = NULL_TREE;\n-\n   if (!flow_bb_inside_loop_p (loop, e->dest))\n-    return NULL_TREE;\n+    return;\n \n-  if (prev_cond == boolean_true_node || !prev_cond)\n-    new_cond = unshare_expr (cond);\n-  else\n-    new_cond = fold_build2 (TRUTH_AND_EXPR, boolean_type_node,\n-\t\t\t    unshare_expr (prev_cond), cond);\n+  if (!is_true_predicate (prev_cond))\n+    cond = fold_build2 (TRUTH_AND_EXPR, boolean_type_node,\n+\t\t\tprev_cond, cond);\n \n-  add_to_predicate_list (e->dest, new_cond);\n-  return new_cond;\n+  add_to_predicate_list (e->dest, cond);\n }\n \n /* Return true if one of the successor edges of BB exits LOOP.  */\n@@ -568,19 +578,6 @@ predicate_bbs (loop_p loop)\n   return true;\n }\n \n-/* Returns true when BB has a predicate that is not trivial: true or\n-   NULL_TREE.  */\n-\n-static bool\n-is_predicated (basic_block bb)\n-{\n-  tree cond = (tree) bb->aux;\n-\n-  return (cond != NULL_TREE\n-\t  && cond != boolean_true_node\n-\t  && !integer_onep (cond));\n-}\n-\n /* Return true when LOOP is if-convertible.\n    LOOP is if-convertible if:\n    - it is innermost,"}]}