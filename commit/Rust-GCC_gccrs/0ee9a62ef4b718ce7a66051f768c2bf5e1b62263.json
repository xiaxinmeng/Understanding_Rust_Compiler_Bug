{"sha": "0ee9a62ef4b718ce7a66051f768c2bf5e1b62263", "node_id": "C_kwDOANBUbNoAKDBlZTlhNjJlZjRiNzE4Y2U3YTY2MDUxZjc2OGMyYmY1ZTFiNjIyNjM", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-04-06T13:37:12Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-05-13T14:18:52Z"}, "message": "c++: Local symbols do not get module manglings\n\nInternal-linkage entity mangling is entirely implementation defined --\nthere's no ABI issue.  Let's not mangle in any module attachment to\nthem, it makes the symbols unnecessarily longer.\n\n\tgcc/cp/\n\t* mangle.cc (maybe_write_module): Check external linkage.\n\tgcc/testsuite/\n\t* g++.dg/modules/mod-sym-4.C: New.", "tree": {"sha": "9e941fa106bf0b71c2fa471b2d336215cd952e68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e941fa106bf0b71c2fa471b2d336215cd952e68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ee9a62ef4b718ce7a66051f768c2bf5e1b62263", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee9a62ef4b718ce7a66051f768c2bf5e1b62263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ee9a62ef4b718ce7a66051f768c2bf5e1b62263", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee9a62ef4b718ce7a66051f768c2bf5e1b62263/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af34279921f4bb95b07c0be7fce9baeffafcb53d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af34279921f4bb95b07c0be7fce9baeffafcb53d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af34279921f4bb95b07c0be7fce9baeffafcb53d"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "75388e99bfd962a80695e762c8cf3600b53b07b2", "filename": "gcc/cp/mangle.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee9a62ef4b718ce7a66051f768c2bf5e1b62263/gcc%2Fcp%2Fmangle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee9a62ef4b718ce7a66051f768c2bf5e1b62263/gcc%2Fcp%2Fmangle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.cc?ref=0ee9a62ef4b718ce7a66051f768c2bf5e1b62263", "patch": "@@ -916,7 +916,10 @@ maybe_write_module (tree decl)\n   if (!DECL_NAMESPACE_SCOPE_P (decl))\n     return;\n \n-  if (TREE_CODE (decl) == NAMESPACE_DECL && DECL_NAME (decl))\n+  if (!TREE_PUBLIC (STRIP_TEMPLATE (decl)))\n+    return;\n+\n+  if (TREE_CODE (decl) == NAMESPACE_DECL)\n     return;\n \n   int m = get_originating_module (decl, true);"}, {"sha": "fbf54d00171c3e965ac316d888a353bc39d62dd2", "filename": "gcc/testsuite/g++.dg/modules/mod-sym-4.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee9a62ef4b718ce7a66051f768c2bf5e1b62263/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fmod-sym-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee9a62ef4b718ce7a66051f768c2bf5e1b62263/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fmod-sym-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fmod-sym-4.C?ref=0ee9a62ef4b718ce7a66051f768c2bf5e1b62263", "patch": "@@ -0,0 +1,48 @@\n+// { dg-additional-options -fmodules-ts }\n+\n+// internal linkage symbol mangling is unspecified, but let's try and\n+// be unchanged from non-module internal mangling.\n+\n+export module A;\n+// { dg-module-cmi A }\n+\n+// { dg-final { scan-assembler {_ZL6addonev:} } }\n+static void addone () {}\n+// { dg-final { scan-assembler {_ZL1x:} } }\n+static int x = 5;\n+\n+namespace {\n+// { dg-final { scan-assembler {_ZN12_GLOBAL__N_14frobEv:} } }\n+void frob () {}\n+// { dg-final { scan-assembler {_ZN12_GLOBAL__N_11yE:} } }\n+int y = 2;\n+struct Bill\n+{\n+  void F ();\n+};\n+// { dg-final { scan-assembler {_ZN12_GLOBAL__N_14Bill1FEv:} } }\n+void Bill::F() {}\n+}\n+\n+// { dg-final { scan-assembler {_ZL4FrobPN12_GLOBAL__N_14BillE:} } }\n+static void Frob (Bill *b)\n+{\n+  if (b) b->F();\n+}\n+\n+namespace N {\n+// { dg-final { scan-assembler {_ZN1NL5innerEv:} } }\n+static void inner() {}\n+// { dg-final { scan-assembler {_ZN1NL1zE:} } }\n+static int z = 3;\n+}\n+\n+// { dg-final { scan-assembler {_ZW1A6addsixv:} } }\n+void addsix ()\n+{\n+  Frob(nullptr);\n+  frob();\n+  addone();\n+  void(x + y + N::z);\n+  N::inner();\n+}"}]}