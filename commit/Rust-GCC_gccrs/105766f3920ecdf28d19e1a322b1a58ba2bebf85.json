{"sha": "105766f3920ecdf28d19e1a322b1a58ba2bebf85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA1NzY2ZjM5MjBlY2RmMjhkMTllMWEzMjJiMWE1OGJhMmJlYmY4NQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-04-08T15:42:10Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-04-08T15:42:10Z"}, "message": "epiphany.md (GPR_1): New constant.\n\n        * config/epiphany/epiphany.md (GPR_1): New constant.\n        (define_expand \"mov<mode>cc): FAIL if gen_compare_reg returned 0.\n        * config/epiphany/epiphany.c (gen_compare_reg):\n        For flag_finite_math_only, avoid swapping operands when r0 and/or r1\n        is already in place.\n        Use GPR_0 / GPR_1 instead of 0/1 for r0/r1 register numbers.\n        Don't require being called during rtl expansion; If y operlaps r0,\n        return 0.\n        (epiphany_compute_frame_size, epiphany_expand_prologue): Use GPR_1.\n        (epiphany_expand_epilogue): Likewise.\n\nFrom-SVN: r197586", "tree": {"sha": "2114d1b3d8346955394529c27818c0943ca99378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2114d1b3d8346955394529c27818c0943ca99378"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/105766f3920ecdf28d19e1a322b1a58ba2bebf85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105766f3920ecdf28d19e1a322b1a58ba2bebf85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/105766f3920ecdf28d19e1a322b1a58ba2bebf85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105766f3920ecdf28d19e1a322b1a58ba2bebf85/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1006463067f23fcc6b189ed157ce7d60b71efede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1006463067f23fcc6b189ed157ce7d60b71efede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1006463067f23fcc6b189ed157ce7d60b71efede"}], "stats": {"total": 57, "additions": 48, "deletions": 9}, "files": [{"sha": "ce6e2673f055d187fe0392cc2d6435430755ae44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105766f3920ecdf28d19e1a322b1a58ba2bebf85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105766f3920ecdf28d19e1a322b1a58ba2bebf85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=105766f3920ecdf28d19e1a322b1a58ba2bebf85", "patch": "@@ -1,3 +1,16 @@\n+2013-04-08  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* config/epiphany/epiphany.md (GPR_1): New constant.\n+\t(define_expand \"mov<mode>cc): FAIL if gen_compare_reg returned 0.\n+\t* config/epiphany/epiphany.c (gen_compare_reg):\n+\tFor flag_finite_math_only, avoid swapping operands when r0 and/or r1\n+\tis already in place.\n+\tUse GPR_0 / GPR_1 instead of 0/1 for r0/r1 register numbers.\n+\tDon't require being called during rtl expansion; If y operlaps r0,\n+\treturn 0.\n+\t(epiphany_compute_frame_size, epiphany_expand_prologue): Use GPR_1.\n+\t(epiphany_expand_epilogue): Likewise.\n+\n 2013-04-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/34949"}, {"sha": "1a0bfc30681cc738572dd0aad30a570c3f5cfcb2", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105766f3920ecdf28d19e1a322b1a58ba2bebf85/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105766f3920ecdf28d19e1a322b1a58ba2bebf85/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=105766f3920ecdf28d19e1a322b1a58ba2bebf85", "patch": "@@ -537,24 +537,47 @@ gen_compare_reg (enum machine_mode cmode, enum rtx_code code,\n       if (mode == CC_FP_GTEmode\n \t  && (code == LE || code == LT || code == UNGT || code == UNGE))\n \t{\n-\t  rtx tmp = x; x = y; y = tmp;\n-\t  code = swap_condition (code);\n+\t  if (flag_finite_math_only\n+\t      && ((REG_P (x) && REGNO (x) == GPR_0)\n+\t\t  || (REG_P (y) && REGNO (y) == GPR_1)))\n+\t    switch (code)\n+\t      {\n+\t      case LE: code = UNLE; break;\n+\t      case LT: code = UNLT; break;\n+\t      case UNGT: code = GT; break;\n+\t      case UNGE: code = GE; break;\n+\t      default: gcc_unreachable ();\n+\t      }\n+\t  else\n+\t    {\n+\t      rtx tmp = x; x = y; y = tmp;\n+\t      code = swap_condition (code);\n+\t    }\n \t}\n       cc_reg = gen_rtx_REG (mode, CC_REGNUM);\n     }\n   if ((mode == CC_FP_EQmode || mode == CC_FP_GTEmode\n        || mode == CC_FP_ORDmode || mode == CC_FP_UNEQmode)\n       /* mov<mode>cc might want to re-emit a comparison during ifcvt.  */\n-      && (!REG_P (x) || REGNO (x) != 0 || !REG_P (y) || REGNO (y) != 1))\n+      && (!REG_P (x) || REGNO (x) != GPR_0\n+\t  || !REG_P (y) || REGNO (y) != GPR_1))\n     {\n       rtx reg;\n \n+#if 0\n+      /* ??? We should really do the r0/r1 clobber only during rtl expansion,\n+\t but just like the flag clobber of movsicc, we have to allow\n+\t this for ifcvt to work, on the assumption that we'll only want\n+\t to do this if these registers have been used before by the\n+\t pre-ifcvt  code.  */\n       gcc_assert (currently_expanding_to_rtl);\n-      reg = gen_rtx_REG (in_mode, 0);\n-      gcc_assert (!reg_overlap_mentioned_p (reg, y));\n+#endif\n+      reg = gen_rtx_REG (in_mode, GPR_0);\n+      if (reg_overlap_mentioned_p (reg, y))\n+\treturn 0;\n       emit_move_insn (reg, x);\n       x = reg;\n-      reg = gen_rtx_REG (in_mode, 1);\n+      reg = gen_rtx_REG (in_mode, GPR_1);\n       emit_move_insn (reg, y);\n       y = reg;\n     }\n@@ -1020,7 +1043,7 @@ epiphany_compute_frame_size (int size /* # of var. bytes allocated.  */)\n \t    first_slot = regno;\n \t  else if (last_slot < 0\n \t\t   && (first_slot ^ regno) != 1\n-\t\t   && (!interrupt_p || regno > GPR_0 + 1))\n+\t\t   && (!interrupt_p || regno > GPR_1))\n \t    last_slot = regno;\n \t}\n     }\n@@ -1665,7 +1688,7 @@ epiphany_expand_prologue (void)\n \t\t\t gen_rtx_REG (DImode, GPR_0));\n       frame_move_insn (gen_rtx_REG (SImode, GPR_0),\n \t\t       gen_rtx_REG (word_mode, STATUS_REGNUM));\n-      frame_move_insn (gen_rtx_REG (SImode, GPR_0+1),\n+      frame_move_insn (gen_rtx_REG (SImode, GPR_1),\n \t\t       gen_rtx_REG (word_mode, IRET_REGNUM));\n       mem = gen_frame_mem (BLKmode, stack_pointer_rtx);\n       off = GEN_INT (-current_frame_info.first_slot_offset);\n@@ -1841,7 +1864,7 @@ epiphany_expand_epilogue (int sibcall_p)\n       emit_move_insn (gen_rtx_REG (word_mode, STATUS_REGNUM),\n \t\t      gen_rtx_REG (SImode, GPR_0));\n       emit_move_insn (gen_rtx_REG (word_mode, IRET_REGNUM),\n-\t\t      gen_rtx_REG (SImode, GPR_0+1));\n+\t\t      gen_rtx_REG (SImode, GPR_1));\n       addr = plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t    - (HOST_WIDE_INT) 2 * UNITS_PER_WORD);\n       emit_move_insn (gen_rtx_REG (DImode, GPR_0),"}, {"sha": "d3ea98a01fbef34e1f5b7c3ded2a6d64011a0fdb", "filename": "gcc/config/epiphany/epiphany.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105766f3920ecdf28d19e1a322b1a58ba2bebf85/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105766f3920ecdf28d19e1a322b1a58ba2bebf85/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.md?ref=105766f3920ecdf28d19e1a322b1a58ba2bebf85", "patch": "@@ -22,6 +22,7 @@\n \f\n (define_constants\n   [(GPR_0\t\t\t 0)\n+   (GPR_1\t\t\t 1)\n    (GPR_FP\t\t\t11)\n    (GPR_IP\t\t\t12)\n    (GPR_SP\t\t\t13)\n@@ -1820,6 +1821,8 @@\n \t operations - if we get some.  */\n       operands[1]\n \t= gen_compare_reg (<MODE>mode, code, cmp_in_mode, cmp_op0, cmp_op1);\n+      if (!operands[1])\n+\tFAIL;\n     }\n })\n "}]}