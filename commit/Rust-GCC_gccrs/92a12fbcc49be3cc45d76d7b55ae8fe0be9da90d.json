{"sha": "92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJhMTJmYmNjNDliZTNjYzQ1ZDc2ZDdiNTVhZThmZTBiZTlkYTkwZA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2003-12-22T20:42:58Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2003-12-22T20:42:58Z"}, "message": "re PR c++/5050 (template instantiation depth exceeds/maybe recursion problem)\n\n2003-12-22  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR c++/5050\n        * tree.c (cp_start_inlining): Remove.\n        (cp_end_inlining): Remove.\n        * cp-lang.c (LANG_HOOKS_TREE_INLINING_START_INLINING): Do not define.\n        (LANG_HOOKS_TREE_INLINING_END_INLINING): Do not define.\n        * cp-tree.h (cp_start_inlining): Do not declare.\n        (cp_end_inlining): Do not declare.\n\n        PR c++/5050\n\t* g++.dg/template/recurse1.C: New test.\n\nFrom-SVN: r74947", "tree": {"sha": "48b8e3eb18a4828c52af140ab395186f2b5d21b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48b8e3eb18a4828c52af140ab395186f2b5d21b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d/comments", "author": null, "committer": null, "parents": [{"sha": "70a841609455d827919e6384fa466a6658e5a23d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70a841609455d827919e6384fa466a6658e5a23d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70a841609455d827919e6384fa466a6658e5a23d"}], "stats": {"total": 58, "additions": 30, "deletions": 28}, "files": [{"sha": "defadd5d34f0af6d42800491f0af768629548534", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d", "patch": "@@ -1,3 +1,13 @@\n+2003-12-22  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR c++/5050\n+        * tree.c (cp_start_inlining): Remove.\n+        (cp_end_inlining): Remove.\n+        * cp-lang.c (LANG_HOOKS_TREE_INLINING_START_INLINING): Do not define.\n+        (LANG_HOOKS_TREE_INLINING_END_INLINING): Do not define.\n+        * cp-tree.h (cp_start_inlining): Do not declare.\n+        (cp_end_inlining): Do not declare.\n+\n 2003-12-22  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/12479"}, {"sha": "d9959e031ed975a8faf94854cb212907ff84c24b", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d", "patch": "@@ -156,10 +156,6 @@ static void cxx_initialize_diagnostics (diagnostic_context *);\n #define LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P anon_aggr_type_p\n #undef LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P\n #define LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P cp_var_mod_type_p\n-#undef LANG_HOOKS_TREE_INLINING_START_INLINING\n-#define LANG_HOOKS_TREE_INLINING_START_INLINING cp_start_inlining\n-#undef LANG_HOOKS_TREE_INLINING_END_INLINING\n-#define LANG_HOOKS_TREE_INLINING_END_INLINING cp_end_inlining\n #undef LANG_HOOKS_TREE_INLINING_ESTIMATE_NUM_INSNS\n #define LANG_HOOKS_TREE_INLINING_ESTIMATE_NUM_INSNS c_estimate_num_insns\n #undef LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN"}, {"sha": "ba9770515d41c419030bb0cdd19489a860ca1061", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d", "patch": "@@ -4169,8 +4169,6 @@ extern int cp_is_overload_p (tree);\n extern int cp_auto_var_in_fn_p (tree,tree);\n extern tree cp_copy_res_decl_for_inlining (tree, tree, tree, void*,\n \t\t\t\t\t\t   int*, tree);\n-extern int cp_start_inlining\t\t\t(tree);\n-extern void cp_end_inlining\t\t\t(tree);\n \n /* in typeck.c */\n extern int string_conv_p\t\t\t(tree, tree, int);"}, {"sha": "426c3d7c9ed09b4c9485cfe1a23c5ca42b6ae1b0", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d", "patch": "@@ -2194,28 +2194,6 @@ cp_copy_res_decl_for_inlining (tree result,\n   return var;\n }\n \n-/* Record that we're about to start inlining FN, and return nonzero if\n-   that's OK.  Used for lang_hooks.tree_inlining.start_inlining.  */\n-\n-int\n-cp_start_inlining (tree fn)\n-{\n-  if (DECL_TEMPLATE_INSTANTIATION (fn))\n-    return push_tinst_level (fn);\n-  else\n-    return 1;\n-}\n-\n-/* Record that we're done inlining FN.  Used for\n-   lang_hooks.tree_inlining.end_inlining.  */\n-\n-void\n-cp_end_inlining (tree fn ATTRIBUTE_UNUSED )\n-{\n-  if (DECL_TEMPLATE_INSTANTIATION (fn))\n-    pop_tinst_level ();\n-}\n-\n /* Initialize tree.c.  */\n \n void"}, {"sha": "640c307d2b7a9c1a0cd24a08a574d8bd6d181ffb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d", "patch": "@@ -1,3 +1,7 @@\n+2003-12-22  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* g++.dg/template/recurse1.C: New test\n+\n 2003-12-22  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/12479"}, {"sha": "4789983affe2babc3d8cd7831c57135c73804183", "filename": "gcc/testsuite/g++.dg/template/recurse1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse1.C?ref=92a12fbcc49be3cc45d76d7b55ae8fe0be9da90d", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/5050\n+//  Origin: georg.wild@gmx.de \n+//  Reduced by: tbagot@bluearc.com and Nathanael C. Nerode <neroden@twcny.rr.com>\n+// Test for that excessive template recursion does not occur\n+// because of optimization.\n+// { dg-options \"-ftemplate-depth-1 -O\" }\n+\n+ struct ostream  {\n+    template<class T> ostream& foo( const T & ) \n+     { return *this;  }\n+  };\n+  \n+  void foo()  {\n+    ostream os;\n+    (os.foo(1)).foo(2);\n+  }"}]}