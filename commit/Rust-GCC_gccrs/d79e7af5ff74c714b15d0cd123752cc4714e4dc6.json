{"sha": "d79e7af5ff74c714b15d0cd123752cc4714e4dc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc5ZTdhZjVmZjc0YzcxNGIxNWQwY2QxMjM3NTJjYzQ3MTRlNGRjNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-11-16T17:10:25Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-12-15T11:41:54Z"}, "message": "[Ada] Transform_Function_Array issues\n\ngcc/ada/\n\n\t* exp_ch6.adb (Build_Procedure_Body_Form): Adjust, the\n\tdeclaration of the procedure form is now insert before the\n\toriginal function body rather than after.\n\t(Expand_N_Subprogram_Declaration): Deal with private types whose\n\tfull views are arrays.\n\t* exp_unst.adb (Unnest_Subprogram): Deal with private types.\n\t(Needs_Fat_Pointer): Code cleanup.\n\t* freeze.adb (Freeze_Subprogram): Ditto.\n\t* exp_util.adb (Build_Procedure_Form): Insert the procedure form\n\tdecl before and not after.\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Build missing\n\tspec when needed for Transform_Function_Array.\n\t* sem_util.adb (Get_Fullest_View): Deal with null entity.", "tree": {"sha": "95e8e5034b7958cffa5b1a392f6f00ba7fb4f7ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95e8e5034b7958cffa5b1a392f6f00ba7fb4f7ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d79e7af5ff74c714b15d0cd123752cc4714e4dc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d79e7af5ff74c714b15d0cd123752cc4714e4dc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d79e7af5ff74c714b15d0cd123752cc4714e4dc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d79e7af5ff74c714b15d0cd123752cc4714e4dc6/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "958eed88b933a7275c83ff11f7140c3f7ae7aeac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/958eed88b933a7275c83ff11f7140c3f7ae7aeac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/958eed88b933a7275c83ff11f7140c3f7ae7aeac"}], "stats": {"total": 101, "additions": 69, "deletions": 32}, "files": [{"sha": "0a5fbccec820ee515b618c9ff0d18428ed8ee4f7", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79e7af5ff74c714b15d0cd123752cc4714e4dc6/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79e7af5ff74c714b15d0cd123752cc4714e4dc6/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=d79e7af5ff74c714b15d0cd123752cc4714e4dc6", "patch": "@@ -883,9 +883,8 @@ package body Exp_Ch6 is\n    is\n       Loc : constant Source_Ptr := Sloc (Func_Body);\n \n-      Proc_Decl : constant Node_Id   :=\n-                    Next (Unit_Declaration_Node (Func_Id));\n-      --  It is assumed that the next node following the declaration of the\n+      Proc_Decl : constant Node_Id := Prev (Unit_Declaration_Node (Func_Id));\n+      --  It is assumed that the node before the declaration of the\n       --  corresponding subprogram spec is the declaration of the procedure\n       --  form.\n \n@@ -6571,6 +6570,7 @@ package body Exp_Ch6 is\n       Prot_Bod  : Node_Id;\n       Prot_Decl : Node_Id;\n       Prot_Id   : Entity_Id;\n+      Typ       : Entity_Id;\n \n    begin\n       --  Deal with case of protected subprogram. Do not generate protected\n@@ -6645,10 +6645,12 @@ package body Exp_Ch6 is\n       --  are not needed by the C generator (and this also produces cleaner\n       --  output).\n \n+      Typ := Get_Fullest_View (Etype (Subp));\n+\n       if Transform_Function_Array\n         and then Nkind (Specification (N)) = N_Function_Specification\n-        and then Is_Array_Type (Etype (Subp))\n-        and then Is_Constrained (Etype (Subp))\n+        and then Is_Array_Type (Typ)\n+        and then Is_Constrained (Typ)\n         and then not Is_Unchecked_Conversion_Instance (Subp)\n       then\n          Build_Procedure_Form (N);"}, {"sha": "ee2cf8113dc90e443a3659dd4cebbb251b4a0b5d", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79e7af5ff74c714b15d0cd123752cc4714e4dc6/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79e7af5ff74c714b15d0cd123752cc4714e4dc6/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=d79e7af5ff74c714b15d0cd123752cc4714e4dc6", "patch": "@@ -251,13 +251,8 @@ package body Exp_Unst is\n    -----------------------\n \n    function Needs_Fat_Pointer (E : Entity_Id) return Boolean is\n-      Typ : Entity_Id := Etype (E);\n-\n+      Typ : constant Entity_Id := Get_Fullest_View (Etype (E));\n    begin\n-      if Is_Private_Type (Typ) and then Present (Full_View (Typ)) then\n-         Typ := Full_View (Typ);\n-      end if;\n-\n       return Is_Array_Type (Typ) and then not Is_Constrained (Typ);\n    end Needs_Fat_Pointer;\n \n@@ -898,6 +893,8 @@ package body Exp_Unst is\n                      DT     : Boolean := False;\n                      Formal : Node_Id;\n                      Subp   : Entity_Id;\n+                     F_Type : Entity_Id;\n+                     A_Type : Entity_Id;\n \n                   begin\n                      if Nkind (Name (N)) = N_Explicit_Dereference then\n@@ -908,12 +905,16 @@ package body Exp_Unst is\n \n                      Actual := First_Actual (N);\n                      Formal := First_Formal_With_Extras (Subp);\n+\n                      while Present (Actual) loop\n-                        if Is_Array_Type (Etype (Formal))\n-                          and then not Is_Constrained (Etype (Formal))\n-                          and then Is_Constrained (Etype (Actual))\n+                        F_Type := Get_Fullest_View (Etype (Formal));\n+                        A_Type := Get_Fullest_View (Etype (Actual));\n+\n+                        if Is_Array_Type (F_Type)\n+                          and then not Is_Constrained (F_Type)\n+                          and then Is_Constrained (A_Type)\n                         then\n-                           Check_Static_Type (Etype (Actual), Empty, DT);\n+                           Check_Static_Type (A_Type, Empty, DT);\n                         end if;\n \n                         Next_Actual (Actual);"}, {"sha": "bcfedfb32bd886aab278fa423b58d08ad23d4921", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79e7af5ff74c714b15d0cd123752cc4714e4dc6/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79e7af5ff74c714b15d0cd123752cc4714e4dc6/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=d79e7af5ff74c714b15d0cd123752cc4714e4dc6", "patch": "@@ -3994,9 +3994,11 @@ package body Exp_Util is\n           Out_Present         => True,\n           Parameter_Type      => New_Occurrence_Of (Etype (Subp), Loc)));\n \n-      --  The new procedure declaration is inserted immediately after the\n-      --  function declaration. The processing in Build_Procedure_Body_Form\n-      --  relies on this order.\n+      --  The new procedure declaration is inserted before the function\n+      --  declaration. The processing in Build_Procedure_Body_Form relies on\n+      --  this order. Note that we insert before because in the case of a\n+      --  function body with no separate spec, we do not want to insert the\n+      --  new spec after the body which will later get rewritten.\n \n       Proc_Decl :=\n         Make_Subprogram_Declaration (Loc,\n@@ -4006,7 +4008,7 @@ package body Exp_Util is\n                 Make_Defining_Identifier (Loc, Chars (Subp)),\n               Parameter_Specifications => Proc_Formals));\n \n-      Insert_After_And_Analyze (Unit_Declaration_Node (Subp), Proc_Decl);\n+      Insert_Before_And_Analyze (Unit_Declaration_Node (Subp), Proc_Decl);\n \n       --  Entity of procedure must remain invisible so that it does not\n       --  overload subsequent references to the original function."}, {"sha": "b877b441de8b032e086c43d4030b674526f46a2c", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79e7af5ff74c714b15d0cd123752cc4714e4dc6/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79e7af5ff74c714b15d0cd123752cc4714e4dc6/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=d79e7af5ff74c714b15d0cd123752cc4714e4dc6", "patch": "@@ -9225,10 +9225,12 @@ package body Freeze is\n          Check_Overriding_Indicator (E, Empty, Is_Primitive (E));\n       end if;\n \n+      Retype := Get_Fullest_View (Etype (E));\n+\n       if Transform_Function_Array\n         and then Nkind (Parent (E)) = N_Function_Specification\n-        and then Is_Array_Type (Etype (E))\n-        and then Is_Constrained (Etype (E))\n+        and then Is_Array_Type (Retype)\n+        and then Is_Constrained (Retype)\n         and then not Is_Unchecked_Conversion_Instance (E)\n         and then not Rewritten_For_C (E)\n       then"}, {"sha": "9aff0f591938297f2bde93e239ffd9bd0534fe3d", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79e7af5ff74c714b15d0cd123752cc4714e4dc6/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79e7af5ff74c714b15d0cd123752cc4714e4dc6/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=d79e7af5ff74c714b15d0cd123752cc4714e4dc6", "patch": "@@ -4401,22 +4401,46 @@ package body Sem_Ch6 is\n \n       if Expander_Active\n         and then Transform_Function_Array\n-        and then Present (Spec_Id)\n-        and then Ekind (Spec_Id) = E_Function\n         and then Nkind (N) /= N_Subprogram_Body_Stub\n-        and then Rewritten_For_C (Spec_Id)\n       then\n-         Set_Has_Completion (Spec_Id);\n+         declare\n+            S         : constant Entity_Id :=\n+                          (if Present (Spec_Id)\n+                           then Spec_Id\n+                           else Defining_Unit_Name (Specification (N)));\n+            Proc_Body : Node_Id;\n \n-         Rewrite (N, Build_Procedure_Body_Form (Spec_Id, N));\n-         Analyze (N);\n+         begin\n+            if Ekind (S) = E_Function and then Rewritten_For_C (S) then\n+               Set_Has_Completion (S);\n+               Proc_Body := Build_Procedure_Body_Form (S, N);\n \n-         --  The entity for the created procedure must remain invisible, so it\n-         --  does not participate in resolution of subsequent references to the\n-         --  function.\n+               if Present (Spec_Id) then\n+                  Rewrite (N, Proc_Body);\n+                  Analyze (N);\n \n-         Set_Is_Immediately_Visible (Corresponding_Spec (N), False);\n-         goto Leave;\n+                  --  The entity for the created procedure must remain\n+                  --  invisible, so it does not participate in resolution of\n+                  --  subsequent references to the function.\n+\n+                  Set_Is_Immediately_Visible (Corresponding_Spec (N), False);\n+\n+               --  If we do not have a separate spec for N, build one and\n+               --  insert the new body right after.\n+\n+               else\n+                  Rewrite (N,\n+                    Make_Subprogram_Declaration (Loc,\n+                      Specification => Relocate_Node (Specification (N))));\n+                  Analyze (N);\n+                  Insert_After_And_Analyze (N, Proc_Body);\n+                  Set_Is_Immediately_Visible\n+                    (Corresponding_Spec (Proc_Body), False);\n+               end if;\n+\n+               goto Leave;\n+            end if;\n+         end;\n       end if;\n \n       --  If a separate spec is present, then deal with freezing issues"}, {"sha": "c695cbc5266b6f77139d395b976245a49368a5a4", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79e7af5ff74c714b15d0cd123752cc4714e4dc6/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79e7af5ff74c714b15d0cd123752cc4714e4dc6/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=d79e7af5ff74c714b15d0cd123752cc4714e4dc6", "patch": "@@ -10589,6 +10589,12 @@ package body Sem_Util is\n    function Get_Fullest_View\n      (E : Entity_Id; Include_PAT : Boolean := True) return Entity_Id is\n    begin\n+      --  Prevent cascaded errors\n+\n+      if No (E) then\n+         return E;\n+      end if;\n+\n       --  Strictly speaking, the recursion below isn't necessary, but\n       --  it's both simplest and safest.\n "}]}