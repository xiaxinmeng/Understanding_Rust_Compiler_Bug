{"sha": "5e525857e9a7390d9a90de91618b133ab6051a9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU1MjU4NTdlOWE3MzkwZDlhOTBkZTkxNjE4YjEzM2FiNjA1MWE5ZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-09-20T17:40:11Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-09-20T17:40:11Z"}, "message": "syscall: workaround for getsockname bug in AIX\n    \n    Reviewed-on: https://go-review.googlesource.com/64552\n\nFrom-SVN: r253021", "tree": {"sha": "d50a8f6f9050d90b84b0a3479b6a9d687202e5e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d50a8f6f9050d90b84b0a3479b6a9d687202e5e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e525857e9a7390d9a90de91618b133ab6051a9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e525857e9a7390d9a90de91618b133ab6051a9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e525857e9a7390d9a90de91618b133ab6051a9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e525857e9a7390d9a90de91618b133ab6051a9d/comments", "author": null, "committer": null, "parents": [{"sha": "e18f68c715a58aa7dc267357ff4e957e9bfc3ff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e18f68c715a58aa7dc267357ff4e957e9bfc3ff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e18f68c715a58aa7dc267357ff4e957e9bfc3ff6"}], "stats": {"total": 191, "additions": 189, "deletions": 2}, "files": [{"sha": "27b0be0a3457504e7b913f959b7595d2c9f71a7f", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e525857e9a7390d9a90de91618b133ab6051a9d/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e525857e9a7390d9a90de91618b133ab6051a9d/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=5e525857e9a7390d9a90de91618b133ab6051a9d", "patch": "@@ -1,4 +1,4 @@\n-90fe3da36d904b62d47c00ee40eef4fd2693a5da\n+84f827669dc76326ed99ebcc982c482aa148d8d8\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "40cf42365e2c819f88997bc66e8eeb937801f2db", "filename": "libgo/go/syscall/socket_aix.go", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e525857e9a7390d9a90de91618b133ab6051a9d/libgo%2Fgo%2Fsyscall%2Fsocket_aix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e525857e9a7390d9a90de91618b133ab6051a9d/libgo%2Fgo%2Fsyscall%2Fsocket_aix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsocket_aix.go?ref=5e525857e9a7390d9a90de91618b133ab6051a9d", "patch": "@@ -0,0 +1,89 @@\n+// socket_aix.go -- Socket handling specific to AIX.\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall\n+\n+import \"unsafe\"\n+\n+const SizeofSockaddrInet4 = 16\n+const SizeofSockaddrInet6 = 28\n+const SizeofSockaddrUnix = 1025\n+\n+type RawSockaddrInet4 struct {\n+\tLen    uint8\n+\tFamily uint8\n+\tPort   uint16\n+\tAddr   [4]byte /* in_addr */\n+\tZero   [8]uint8\n+}\n+\n+func (sa *RawSockaddrInet4) setLen() Socklen_t {\n+\tsa.Len = SizeofSockaddrInet4\n+\treturn SizeofSockaddrInet4\n+}\n+\n+type RawSockaddrInet6 struct {\n+\tLen      uint8\n+\tFamily   uint8\n+\tPort     uint16\n+\tFlowinfo uint32\n+\tAddr     [16]byte /* in6_addr */\n+\tScope_id uint32\n+}\n+\n+func (sa *RawSockaddrInet6) setLen() Socklen_t {\n+\tsa.Len = SizeofSockaddrInet6\n+\treturn SizeofSockaddrInet6\n+}\n+\n+type RawSockaddrUnix struct {\n+\tLen    uint8\n+\tFamily uint8\n+\tPath   [1023]int8\n+}\n+\n+func (sa *RawSockaddrUnix) setLen(n int) {\n+\tsa.Len = uint8(3 + n) // 2 for Family, Len; 1 for NUL.\n+}\n+\n+func (sa *RawSockaddrUnix) getLen() (int, error) {\n+\t// Some versions of AIX have a bug in getsockname (see IV78655).\n+\t// We can't rely on sa.Len being set correctly.\n+\tn := SizeofSockaddrUnix - 3 // substract leading Family, Len, terminating NUL.\n+\tfor i := 0; i < n; i++ {\n+\t\tif sa.Path[i] == 0 {\n+\t\t\tn = i\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\treturn n, nil\n+}\n+\n+func (sa *RawSockaddrUnix) adjustAbstract(sl Socklen_t) Socklen_t {\n+\treturn sl\n+}\n+\n+type RawSockaddr struct {\n+\tLen    uint8\n+\tFamily uint8\n+\tData   [14]int8\n+}\n+\n+// BindToDevice binds the socket associated with fd to device.\n+func BindToDevice(fd int, device string) (err error) {\n+\treturn ENOSYS\n+}\n+\n+func anyToSockaddrOS(rsa *RawSockaddrAny) (Sockaddr, error) {\n+\treturn nil, EAFNOSUPPORT\n+}\n+\n+func GetsockoptIPv6MTUInfo(fd, level, opt int) (*IPv6MTUInfo, error) {\n+\tvar value IPv6MTUInfo\n+\tvallen := Socklen_t(SizeofIPv6MTUInfo)\n+\terr := getsockopt(fd, level, opt, unsafe.Pointer(&value), &vallen)\n+\treturn &value, err\n+}"}, {"sha": "cf3fc4f8da0e30c4862ce744c0ca788e3f8c701e", "filename": "libgo/go/syscall/socket_bsd.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e525857e9a7390d9a90de91618b133ab6051a9d/libgo%2Fgo%2Fsyscall%2Fsocket_bsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e525857e9a7390d9a90de91618b133ab6051a9d/libgo%2Fgo%2Fsyscall%2Fsocket_bsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsocket_bsd.go?ref=5e525857e9a7390d9a90de91618b133ab6051a9d", "patch": "@@ -4,7 +4,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// +build aix darwin dragonfly freebsd openbsd netbsd\n+// +build darwin dragonfly freebsd openbsd netbsd\n \n package syscall\n "}, {"sha": "83ed1e64c3a3544efcfa0e7ccd09e0ecaa3c9f85", "filename": "libgo/go/syscall/syscall_aix_ppc.go", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e525857e9a7390d9a90de91618b133ab6051a9d/libgo%2Fgo%2Fsyscall%2Fsyscall_aix_ppc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e525857e9a7390d9a90de91618b133ab6051a9d/libgo%2Fgo%2Fsyscall%2Fsyscall_aix_ppc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsyscall_aix_ppc.go?ref=5e525857e9a7390d9a90de91618b133ab6051a9d", "patch": "@@ -0,0 +1,49 @@\n+// syscall_aix_ppc.go -- AIX 32-bit specific support\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall\n+\n+import \"unsafe\"\n+\n+// AIX does not define a specific structure but instead uses separate\n+// ptrace calls for the different registers.\n+type PtraceRegs struct {\n+\tGpr [32]uint32\n+\tIar uint32\n+\tMsr uint32\n+\tCr  uint32\n+\tLr  uint32\n+\tCtr uint32\n+\tXer uint32\n+}\n+\n+func (r *PtraceRegs) PC() uint64 { return uint64(r.Iar) }\n+\n+func (r *PtraceRegs) SetPC(pc uint64) { r.Iar = uint32(pc) }\n+\n+func PtraceGetRegs(pid int, regsout *PtraceRegs) (err error) {\n+\tptrace(_PT_REGSET, pid, uintptr(unsafe.Pointer(&regsout.Gpr[0])), 0, 0)\n+\tregsout.Iar = uint32(ptrace(_PT_READ_GPR, pid, 128, 0, 0))\n+\tregsout.Msr = uint32(ptrace(_PT_READ_GPR, pid, 129, 0, 0))\n+\tregsout.Cr = uint32(ptrace(_PT_READ_GPR, pid, 130, 0, 0))\n+\tregsout.Lr = uint32(ptrace(_PT_READ_GPR, pid, 131, 0, 0))\n+\tregsout.Ctr = uint32(ptrace(_PT_READ_GPR, pid, 132, 0, 0))\n+\tregsout.Xer = uint32(ptrace(_PT_READ_GPR, pid, 133, 0, 0))\n+\treturn nil\n+}\n+\n+func PtraceSetRegs(pid int, regs *PtraceRegs) (err error) {\n+\tfor i := 0; i < len(regs.Gpr); i++ {\n+\t\tptrace(_PT_WRITE_GPR, pid, uintptr(i), int(regs.Gpr[i]), 0)\n+\t}\n+\tptrace(_PT_WRITE_GPR, pid, 128, int(regs.Iar), 0)\n+\tptrace(_PT_WRITE_GPR, pid, 129, int(regs.Msr), 0)\n+\tptrace(_PT_WRITE_GPR, pid, 130, int(regs.Cr), 0)\n+\tptrace(_PT_WRITE_GPR, pid, 131, int(regs.Lr), 0)\n+\tptrace(_PT_WRITE_GPR, pid, 132, int(regs.Ctr), 0)\n+\tptrace(_PT_WRITE_GPR, pid, 133, int(regs.Xer), 0)\n+\treturn nil\n+}"}, {"sha": "82388cad14028a0573f08544dee59aff9a3d0c01", "filename": "libgo/go/syscall/syscall_aix_ppc64.go", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e525857e9a7390d9a90de91618b133ab6051a9d/libgo%2Fgo%2Fsyscall%2Fsyscall_aix_ppc64.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e525857e9a7390d9a90de91618b133ab6051a9d/libgo%2Fgo%2Fsyscall%2Fsyscall_aix_ppc64.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsyscall_aix_ppc64.go?ref=5e525857e9a7390d9a90de91618b133ab6051a9d", "patch": "@@ -0,0 +1,49 @@\n+// syscall_aix_ppc64.go -- AIX 64-bit specific support\n+\n+// Copyright 2017 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall\n+\n+import \"unsafe\"\n+\n+// AIX does not define a specific structure but instead uses separate\n+// ptrace calls for the different registers.\n+type PtraceRegs struct {\n+\tGpr [32]uint64\n+\tIar uint64\n+\tMsr uint64\n+\tCr  uint64\n+\tLr  uint64\n+\tCtr uint64\n+\tXer uint64\n+}\n+\n+func (r *PtraceRegs) PC() uint64 { return r.Iar }\n+\n+func (r *PtraceRegs) SetPC(pc uint64) { r.Iar = pc }\n+\n+func PtraceGetRegs(pid int, regsout *PtraceRegs) (err error) {\n+\tptrace64(_PT_REGSET, int64(pid), int64(uintptr(unsafe.Pointer(&regsout.Gpr[0]))), 0, 0)\n+\tptrace64(_PT_READ_GPR, int64(pid), 128, 0, uintptr(unsafe.Pointer(&regsout.Iar)))\n+\tptrace64(_PT_READ_GPR, int64(pid), 129, 0, uintptr(unsafe.Pointer(&regsout.Msr)))\n+\tptrace64(_PT_READ_GPR, int64(pid), 130, 0, uintptr(unsafe.Pointer(&regsout.Cr)))\n+\tptrace64(_PT_READ_GPR, int64(pid), 131, 0, uintptr(unsafe.Pointer(&regsout.Lr)))\n+\tptrace64(_PT_READ_GPR, int64(pid), 132, 0, uintptr(unsafe.Pointer(&regsout.Ctr)))\n+\tptrace64(_PT_READ_GPR, int64(pid), 133, 0, uintptr(unsafe.Pointer(&regsout.Xer)))\n+\treturn nil\n+}\n+\n+func PtraceSetRegs(pid int, regs *PtraceRegs) (err error) {\n+\tfor i := 0; i < len(regs.Gpr); i++ {\n+\t\tptrace64(_PT_WRITE_GPR, int64(pid), int64(i), 0, uintptr(unsafe.Pointer(&regs.Gpr[i])))\n+\t}\n+\tptrace64(_PT_WRITE_GPR, int64(pid), 128, 0, uintptr(unsafe.Pointer(&regs.Iar)))\n+\tptrace64(_PT_WRITE_GPR, int64(pid), 129, 0, uintptr(unsafe.Pointer(&regs.Msr)))\n+\tptrace64(_PT_WRITE_GPR, int64(pid), 130, 0, uintptr(unsafe.Pointer(&regs.Cr)))\n+\tptrace64(_PT_WRITE_GPR, int64(pid), 131, 0, uintptr(unsafe.Pointer(&regs.Lr)))\n+\tptrace64(_PT_WRITE_GPR, int64(pid), 132, 0, uintptr(unsafe.Pointer(&regs.Ctr)))\n+\tptrace64(_PT_WRITE_GPR, int64(pid), 133, 0, uintptr(unsafe.Pointer(&regs.Xer)))\n+\treturn nil\n+}"}]}