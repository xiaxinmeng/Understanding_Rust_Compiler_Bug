{"sha": "aedf4e122b56aa6bf977e42adf198b49511aa0f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVkZjRlMTIyYjU2YWE2YmY5NzdlNDJhZGYxOThiNDk1MTFhYTBmMw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-04-21T16:52:51Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-04-21T16:52:51Z"}, "message": "re PR c++/70513 (ICE on invalid C++ code on x86_64-linux-gnu: Segmentation fault)\n\n\tPR c++/70513\n\t* parser.c (cp_parser_enum_specifier): Check and possibly error for\n\textra qualification.\n\n\t* g++.dg/cpp0x/forw_enum12.C: New test.\n\t* g++.dg/cpp0x/forw_enum13.C: New test.\n\nFrom-SVN: r235347", "tree": {"sha": "51b762e91374034a2271b2b44fec2c9b02116a91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51b762e91374034a2271b2b44fec2c9b02116a91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aedf4e122b56aa6bf977e42adf198b49511aa0f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aedf4e122b56aa6bf977e42adf198b49511aa0f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aedf4e122b56aa6bf977e42adf198b49511aa0f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aedf4e122b56aa6bf977e42adf198b49511aa0f3/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2074d80a607e13d3e18b550ae66e7c3be5135d4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2074d80a607e13d3e18b550ae66e7c3be5135d4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2074d80a607e13d3e18b550ae66e7c3be5135d4a"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "8efaa80b3444fb849b20f6e37977a2fc7a9b4018", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aedf4e122b56aa6bf977e42adf198b49511aa0f3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aedf4e122b56aa6bf977e42adf198b49511aa0f3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aedf4e122b56aa6bf977e42adf198b49511aa0f3", "patch": "@@ -1,3 +1,9 @@\n+2016-04-21  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/70513\n+\t* parser.c (cp_parser_enum_specifier): Check and possibly error for\n+\textra qualification.\n+\n 2016-04-20  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/55635"}, {"sha": "feb8de76bc3a6bdfa688792547082f73e37d3b5b", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aedf4e122b56aa6bf977e42adf198b49511aa0f3/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aedf4e122b56aa6bf977e42adf198b49511aa0f3/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=aedf4e122b56aa6bf977e42adf198b49511aa0f3", "patch": "@@ -17233,6 +17233,16 @@ cp_parser_enum_specifier (cp_parser* parser)\n \t\t\t  type, prev_scope, nested_name_specifier);\n \t      type = error_mark_node;\n \t    }\n+\t  /* If that scope is the scope where the declaration is being placed\n+\t     the program is invalid.  */\n+\t  else if (CLASS_TYPE_P (nested_name_specifier)\n+\t\t   && CLASS_TYPE_P (prev_scope)\n+\t\t   && same_type_p (nested_name_specifier, prev_scope))\n+\t    {\n+\t      permerror (type_start_token->location,\n+\t\t\t \"extra qualification not allowed\");\n+\t      nested_name_specifier = NULL_TREE;\n+\t    }\n \t}\n \n       if (scoped_enum_p)"}, {"sha": "52257e5bd8aa631f0cb9a8178d6231b45b42c9ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aedf4e122b56aa6bf977e42adf198b49511aa0f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aedf4e122b56aa6bf977e42adf198b49511aa0f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aedf4e122b56aa6bf977e42adf198b49511aa0f3", "patch": "@@ -1,3 +1,9 @@\n+2016-04-21  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/70513\n+\t* g++.dg/cpp0x/forw_enum12.C: New test.\n+\t* g++.dg/cpp0x/forw_enum13.C: New test.\n+\n 2016-04-21  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \tPR target/70728"}, {"sha": "906ba68e062f0b471985ab740489b6b769cf6d92", "filename": "gcc/testsuite/g++.dg/cpp0x/forw_enum12.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aedf4e122b56aa6bf977e42adf198b49511aa0f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aedf4e122b56aa6bf977e42adf198b49511aa0f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum12.C?ref=aedf4e122b56aa6bf977e42adf198b49511aa0f3", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/70513\n+// { dg-do compile { target c++11 } }\n+\n+struct S1\n+{\n+  enum E : int;\n+  enum S1::E : int { X } e; // { dg-error \"extra qualification not allowed\" }\n+};\n+\n+struct S2\n+{\n+  enum class E : int;\n+  enum class S2::E : int { X } e; // { dg-error \"extra qualification not allowed\" }\n+};\n+\n+struct S3\n+{\n+  enum struct E : int;\n+  enum struct S3::E : int { X } e; // { dg-error \"extra qualification not allowed\" }\n+};\n+\n+struct S4\n+{\n+  struct S5\n+  {\n+    enum E : char;\n+    enum S4::S5::E : char { X } e; // { dg-error \"extra qualification not allowed\" }\n+  };\n+};"}, {"sha": "b8027f0c28d48dd46aa4081196500c9c822b8273", "filename": "gcc/testsuite/g++.dg/cpp0x/forw_enum13.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aedf4e122b56aa6bf977e42adf198b49511aa0f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aedf4e122b56aa6bf977e42adf198b49511aa0f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum13.C?ref=aedf4e122b56aa6bf977e42adf198b49511aa0f3", "patch": "@@ -0,0 +1,47 @@\n+// PR c++/70513\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T>\n+class D1\n+{\n+  enum A : int;\n+  enum D1::A : int { foo } c; // { dg-error \"extra qualification not allowed\" }\n+};\n+\n+template <typename T>\n+class D2\n+{\n+  enum A : int;\n+  enum D2<T>::A : int { foo } c; // { dg-error \"extra qualification not allowed\" }\n+};\n+\n+template <typename T>\n+class D3\n+{\n+  enum D3::A { foo } c; // { dg-error \"extra qualification not allowed\" }\n+};\n+\n+template <typename T>\n+class D4\n+{\n+  enum D4<T>::A { foo } c; // { dg-error \"extra qualification not allowed\" }\n+};\n+\n+template <typename T>\n+class D5\n+{\n+  class D6\n+  {\n+    enum D6::A { foo } c; // { dg-error \"extra qualification not allowed\" }\n+  };\n+};\n+\n+template <typename T>\n+class D7\n+{\n+  class D8\n+  {\n+    enum A : int;\n+    enum D8::A : int { foo } c; // { dg-error \"extra qualification not allowed\" }\n+  };\n+};"}]}