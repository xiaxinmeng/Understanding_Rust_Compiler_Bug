{"sha": "f5fc4a042173fbb015e1a2b882a6bddb5d6dc146", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVmYzRhMDQyMTczZmJiMDE1ZTFhMmI4ODJhNmJkZGI1ZDZkYzE0Ng==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2014-11-17T13:55:49Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2014-11-17T13:55:49Z"}, "message": "tree-ssa-strlen.c: include ipa-chkp.h, cgraph.h, ipa-ref.h, plugin-api.h.\n\ngcc/\n\n\t* tree-ssa-strlen.c: include ipa-chkp.h, cgraph.h,\n\tipa-ref.h, plugin-api.h.\n\t(get_string_length): Handle calls with bounds.\n\t(adjust_last_stmt): Likewise.\n\t(handle_builtin_strchr): Likewise.\n\t(handle_builtin_strcpy): Likewise.\n\t(handle_builtin_memcpy): Likewise.\n\t(handle_builtin_strcat): Likewise.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/chkp-strlen-1.c: New.\n\t* gcc.target/i386/chkp-strlen-2.c: New.\n\t* gcc.target/i386/chkp-strlen-3.c: New.\n\t* gcc.target/i386/chkp-strlen-4.c: New.\n\t* gcc.target/i386/chkp-strlen-5.c: New.\n\nFrom-SVN: r217657", "tree": {"sha": "fc3683b12c7f4c28c8b84b78dc570b7bf36299e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc3683b12c7f4c28c8b84b78dc570b7bf36299e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5fc4a042173fbb015e1a2b882a6bddb5d6dc146", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5fc4a042173fbb015e1a2b882a6bddb5d6dc146", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5fc4a042173fbb015e1a2b882a6bddb5d6dc146", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5fc4a042173fbb015e1a2b882a6bddb5d6dc146/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e472781227253bf87e273512026256fb563b1646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e472781227253bf87e273512026256fb563b1646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e472781227253bf87e273512026256fb563b1646"}], "stats": {"total": 223, "additions": 204, "deletions": 19}, "files": [{"sha": "e4c10c901802914fb6da131857d0691631296558", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fc4a042173fbb015e1a2b882a6bddb5d6dc146/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fc4a042173fbb015e1a2b882a6bddb5d6dc146/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5fc4a042173fbb015e1a2b882a6bddb5d6dc146", "patch": "@@ -1,3 +1,14 @@\n+2014-11-17  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* tree-ssa-strlen.c: include ipa-chkp.h, cgraph.h,\n+\tipa-ref.h, plugin-api.h.\n+\t(get_string_length): Handle calls with bounds.\n+\t(adjust_last_stmt): Likewise.\n+\t(handle_builtin_strchr): Likewise.\n+\t(handle_builtin_strcpy): Likewise.\n+\t(handle_builtin_memcpy): Likewise.\n+\t(handle_builtin_strcat): Likewise.\n+\n 2014-11-17  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* tree-chkp-opt.c (chkp_get_nobnd_fndecl): New."}, {"sha": "46ab25f8980cd56fc443dc401f8a13350a0e9a02", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fc4a042173fbb015e1a2b882a6bddb5d6dc146/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fc4a042173fbb015e1a2b882a6bddb5d6dc146/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5fc4a042173fbb015e1a2b882a6bddb5d6dc146", "patch": "@@ -1,3 +1,11 @@\n+2014-11-17  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* gcc.target/i386/chkp-strlen-1.c: New.\n+\t* gcc.target/i386/chkp-strlen-2.c: New.\n+\t* gcc.target/i386/chkp-strlen-3.c: New.\n+\t* gcc.target/i386/chkp-strlen-4.c: New.\n+\t* gcc.target/i386/chkp-strlen-5.c: New.\n+\n 2014-11-17  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* gcc.target/i386/chkp-stropt-1.c: New."}, {"sha": "ffb4f16bac3a932da2ca8c153e103bffabfc0305", "filename": "gcc/testsuite/gcc.target/i386/chkp-strlen-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fc4a042173fbb015e1a2b882a6bddb5d6dc146/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fc4a042173fbb015e1a2b882a6bddb5d6dc146/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-1.c?ref=f5fc4a042173fbb015e1a2b882a6bddb5d6dc146", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-strlen\" } */\n+/* { dg-final { scan-tree-dump \"memcpy.chkp\" \"strlen\" } } */\n+/* { dg-final { cleanup-tree-dump \"strlen\" } } */\n+\n+#include \"string.h\"\n+\n+char *test (char *str1, char *str2)\n+{\n+  size_t len = strlen (str2);\n+  strcpy (str1, str2);\n+  return str1 + len;\n+}"}, {"sha": "1ce426d83bdf07dae6209bc8e123a2e7b696371e", "filename": "gcc/testsuite/gcc.target/i386/chkp-strlen-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fc4a042173fbb015e1a2b882a6bddb5d6dc146/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fc4a042173fbb015e1a2b882a6bddb5d6dc146/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-2.c?ref=f5fc4a042173fbb015e1a2b882a6bddb5d6dc146", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-strlen\" } */\n+/* { dg-final { scan-tree-dump-not \"strlen\" \"strlen\" } } */\n+/* { dg-final { cleanup-tree-dump \"strlen\" } } */\n+\n+#include \"string.h\"\n+\n+char *test (char *str1, char *str2)\n+{\n+  char *p = stpcpy (str1, str2);\n+  size_t len = strlen (str1);\n+  return p + len;\n+}"}, {"sha": "447b9be088a8f4447608524914c7354068affe86", "filename": "gcc/testsuite/gcc.target/i386/chkp-strlen-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fc4a042173fbb015e1a2b882a6bddb5d6dc146/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fc4a042173fbb015e1a2b882a6bddb5d6dc146/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-3.c?ref=f5fc4a042173fbb015e1a2b882a6bddb5d6dc146", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-strlen\" } */\n+/* { dg-final { scan-tree-dump-times \"strlen\" 1 \"strlen\" } } */\n+/* { dg-final { cleanup-tree-dump \"strlen\" } } */\n+\n+#include \"string.h\"\n+\n+size_t test (char *str1, char *str2)\n+{\n+  size_t len = strlen (str2);\n+  memcpy (str1, str2, len + 1);\n+  return len + strlen (str1);\n+}"}, {"sha": "a9ebe2bbe3cd5b6fc407f65e1f22809e65cbc516", "filename": "gcc/testsuite/gcc.target/i386/chkp-strlen-4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fc4a042173fbb015e1a2b882a6bddb5d6dc146/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fc4a042173fbb015e1a2b882a6bddb5d6dc146/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-4.c?ref=f5fc4a042173fbb015e1a2b882a6bddb5d6dc146", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-strlen -D_GNU_SOURCE\" } */\n+/* { dg-final { scan-tree-dump-times \"strlen\" 1 \"strlen\" } } */\n+/* { dg-final { cleanup-tree-dump \"strlen\" } } */\n+\n+#include \"string.h\"\n+\n+char * test (char *str1, char *str2)\n+{\n+  size_t len = strlen (str2);\n+  char *p = (char *)mempcpy (str1, str2, len + 1);\n+  return p + len + strlen (str1);\n+}"}, {"sha": "37b664eb4789792c69967d5bd037e35e88820e4e", "filename": "gcc/testsuite/gcc.target/i386/chkp-strlen-5.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fc4a042173fbb015e1a2b882a6bddb5d6dc146/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fc4a042173fbb015e1a2b882a6bddb5d6dc146/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-5.c?ref=f5fc4a042173fbb015e1a2b882a6bddb5d6dc146", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-strlen\" } */\n+/* { dg-final { scan-tree-dump-times \"strlen\" 2 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump \"memcpy\" \"strlen\" } } */\n+/* { dg-final { cleanup-tree-dump \"strlen\" } } */\n+\n+#include \"string.h\"\n+\n+size_t test (char *str1, char *str2)\n+{\n+  size_t len1 = strlen (str1);\n+  size_t len2 = strlen (str2);\n+  strcat (str1, str2);\n+  return len1 + len2 + strlen (str1);\n+}"}, {"sha": "c327f89dada1ea8d47183cc9e8391f1a0150e212", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 113, "deletions": 19, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5fc4a042173fbb015e1a2b882a6bddb5d6dc146/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5fc4a042173fbb015e1a2b882a6bddb5d6dc146/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=f5fc4a042173fbb015e1a2b882a6bddb5d6dc146", "patch": "@@ -62,6 +62,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"params.h\"\n #include \"expr.h\"\n+#include \"plugin-api.h\"\n+#include \"ipa-ref.h\"\n+#include \"cgraph.h\"\n+#include \"ipa-chkp.h\"\n \n /* A vector indexed by SSA_NAME_VERSION.  0 means unknown, positive value\n    is an index into strinfo vector, negative value stands for\n@@ -417,6 +421,7 @@ get_string_length (strinfo si)\n   if (si->stmt)\n     {\n       gimple stmt = si->stmt, lenstmt;\n+      bool with_bounds = gimple_call_with_bounds_p (stmt);\n       tree callee, lhs, fn, tem;\n       location_t loc;\n       gimple_stmt_iterator gsi;\n@@ -436,11 +441,20 @@ get_string_length (strinfo si)\n \t{\n \tcase BUILT_IN_STRCAT:\n \tcase BUILT_IN_STRCAT_CHK:\n+\tcase BUILT_IN_STRCAT_CHKP:\n+\tcase BUILT_IN_STRCAT_CHK_CHKP:\n \t  gsi = gsi_for_stmt (stmt);\n \t  fn = builtin_decl_implicit (BUILT_IN_STRLEN);\n \t  gcc_assert (lhs == NULL_TREE);\n \t  tem = unshare_expr (gimple_call_arg (stmt, 0));\n-\t  lenstmt = gimple_build_call (fn, 1, tem);\n+\t  if (with_bounds)\n+\t    {\n+\t      lenstmt = gimple_build_call (chkp_maybe_create_clone (fn)->decl,\n+\t\t\t\t\t   2, tem, gimple_call_arg (stmt, 1));\n+\t      gimple_call_set_with_bounds (lenstmt, true);\n+\t    }\n+\t  else\n+\t    lenstmt = gimple_build_call (fn, 1, tem);\n \t  lhs = make_ssa_name (TREE_TYPE (TREE_TYPE (fn)), lenstmt);\n \t  gimple_call_set_lhs (lenstmt, lhs);\n \t  gimple_set_vuse (lenstmt, gimple_vuse (stmt));\n@@ -463,10 +477,14 @@ get_string_length (strinfo si)\n \t  /* FALLTHRU */\n \tcase BUILT_IN_STRCPY:\n \tcase BUILT_IN_STRCPY_CHK:\n-\t  if (gimple_call_num_args (stmt) == 2)\n+\tcase BUILT_IN_STRCPY_CHKP:\n+\tcase BUILT_IN_STRCPY_CHK_CHKP:\n+\t  if (gimple_call_num_args (stmt) == (with_bounds ? 4 : 2))\n \t    fn = builtin_decl_implicit (BUILT_IN_STPCPY);\n \t  else\n \t    fn = builtin_decl_explicit (BUILT_IN_STPCPY_CHK);\n+\t  if (with_bounds)\n+\t    fn = chkp_maybe_create_clone (fn)->decl;\n \t  gcc_assert (lhs == NULL_TREE);\n \t  if (dump_file && (dump_flags & TDF_DETAILS) != 0)\n \t    {\n@@ -485,6 +503,8 @@ get_string_length (strinfo si)\n \t  /* FALLTHRU */\n \tcase BUILT_IN_STPCPY:\n \tcase BUILT_IN_STPCPY_CHK:\n+\tcase BUILT_IN_STPCPY_CHKP:\n+\tcase BUILT_IN_STPCPY_CHK_CHKP:\n \t  gcc_assert (lhs != NULL_TREE);\n \t  loc = gimple_location (stmt);\n \t  si->endptr = lhs;\n@@ -775,6 +795,7 @@ adjust_last_stmt (strinfo si, gimple stmt, bool is_strcat)\n   tree vuse, callee, len;\n   struct laststmt_struct last = laststmt;\n   strinfo lastsi, firstsi;\n+  unsigned len_arg_no = 2;\n \n   laststmt.stmt = NULL;\n   laststmt.len = NULL_TREE;\n@@ -846,11 +867,15 @@ adjust_last_stmt (strinfo si, gimple stmt, bool is_strcat)\n     case BUILT_IN_MEMCPY:\n     case BUILT_IN_MEMCPY_CHK:\n       break;\n+    case BUILT_IN_MEMCPY_CHKP:\n+    case BUILT_IN_MEMCPY_CHK_CHKP:\n+      len_arg_no = 4;\n+      break;\n     default:\n       return;\n     }\n \n-  len = gimple_call_arg (last.stmt, 2);\n+  len = gimple_call_arg (last.stmt, len_arg_no);\n   if (tree_fits_uhwi_p (len))\n     {\n       if (!tree_fits_uhwi_p (last.len)\n@@ -874,7 +899,7 @@ adjust_last_stmt (strinfo si, gimple stmt, bool is_strcat)\n   else\n     return;\n \n-  gimple_call_set_arg (last.stmt, 2, last.len);\n+  gimple_call_set_arg (last.stmt, len_arg_no, last.len);\n   update_stmt (last.stmt);\n }\n \n@@ -965,11 +990,12 @@ handle_builtin_strchr (gimple_stmt_iterator *gsi)\n   tree src;\n   gimple stmt = gsi_stmt (*gsi);\n   tree lhs = gimple_call_lhs (stmt);\n+  bool with_bounds = gimple_call_with_bounds_p (stmt);\n \n   if (lhs == NULL_TREE)\n     return;\n \n-  if (!integer_zerop (gimple_call_arg (stmt, 1)))\n+  if (!integer_zerop (gimple_call_arg (stmt, with_bounds ? 2 : 1)))\n     return;\n \n   src = gimple_call_arg (stmt, 0);\n@@ -1076,8 +1102,9 @@ handle_builtin_strcpy (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n   gimple stmt = gsi_stmt (*gsi);\n   strinfo si, dsi, olddsi, zsi;\n   location_t loc;\n+  bool with_bounds = gimple_call_with_bounds_p (stmt);\n \n-  src = gimple_call_arg (stmt, 1);\n+  src = gimple_call_arg (stmt, with_bounds ? 2 : 1);\n   dst = gimple_call_arg (stmt, 0);\n   lhs = gimple_call_lhs (stmt);\n   idx = get_stridx (src);\n@@ -1108,11 +1135,15 @@ handle_builtin_strcpy (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n       {\n       case BUILT_IN_STRCPY:\n       case BUILT_IN_STRCPY_CHK:\n+      case BUILT_IN_STRCPY_CHKP:\n+      case BUILT_IN_STRCPY_CHK_CHKP:\n \tif (lhs != NULL_TREE || !builtin_decl_implicit_p (BUILT_IN_STPCPY))\n \t  return;\n \tbreak;\n       case BUILT_IN_STPCPY:\n       case BUILT_IN_STPCPY_CHK:\n+      case BUILT_IN_STPCPY_CHKP:\n+      case BUILT_IN_STPCPY_CHK_CHKP:\n \tif (lhs == NULL_TREE)\n \t  return;\n \telse\n@@ -1211,16 +1242,19 @@ handle_builtin_strcpy (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n   switch (bcode)\n     {\n     case BUILT_IN_STRCPY:\n+    case BUILT_IN_STRCPY_CHKP:\n       fn = builtin_decl_implicit (BUILT_IN_MEMCPY);\n       if (lhs)\n \tssa_ver_to_stridx[SSA_NAME_VERSION (lhs)] = didx;\n       break;\n     case BUILT_IN_STRCPY_CHK:\n+    case BUILT_IN_STRCPY_CHK_CHKP:\n       fn = builtin_decl_explicit (BUILT_IN_MEMCPY_CHK);\n       if (lhs)\n \tssa_ver_to_stridx[SSA_NAME_VERSION (lhs)] = didx;\n       break;\n     case BUILT_IN_STPCPY:\n+    case BUILT_IN_STPCPY_CHKP:\n       /* This would need adjustment of the lhs (subtract one),\n \t or detection that the trailing '\\0' doesn't need to be\n \t written, if it will be immediately overwritten.\n@@ -1232,6 +1266,7 @@ handle_builtin_strcpy (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n \t}\n       break;\n     case BUILT_IN_STPCPY_CHK:\n+    case BUILT_IN_STPCPY_CHK_CHKP:\n       /* This would need adjustment of the lhs (subtract one),\n \t or detection that the trailing '\\0' doesn't need to be\n \t written, if it will be immediately overwritten.\n@@ -1263,14 +1298,33 @@ handle_builtin_strcpy (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n       fprintf (dump_file, \"Optimizing: \");\n       print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n     }\n-  if (gimple_call_num_args (stmt) == 2)\n-    success = update_gimple_call (gsi, fn, 3, dst, src, len);\n+  if (with_bounds)\n+    {\n+      fn = chkp_maybe_create_clone (fn)->decl;\n+      if (gimple_call_num_args (stmt) == 4)\n+\tsuccess = update_gimple_call (gsi, fn, 5, dst,\n+\t\t\t\t      gimple_call_arg (stmt, 1),\n+\t\t\t\t      src,\n+\t\t\t\t      gimple_call_arg (stmt, 3),\n+\t\t\t\t      len);\n+      else\n+\tsuccess = update_gimple_call (gsi, fn, 6, dst,\n+\t\t\t\t      gimple_call_arg (stmt, 1),\n+\t\t\t\t      src,\n+\t\t\t\t      gimple_call_arg (stmt, 3),\n+\t\t\t\t      len,\n+\t\t\t\t      gimple_call_arg (stmt, 4));\n+    }\n   else\n-    success = update_gimple_call (gsi, fn, 4, dst, src, len,\n-\t\t\t\t  gimple_call_arg (stmt, 2));\n+    if (gimple_call_num_args (stmt) == 2)\n+      success = update_gimple_call (gsi, fn, 3, dst, src, len);\n+    else\n+      success = update_gimple_call (gsi, fn, 4, dst, src, len,\n+\t\t\t\t    gimple_call_arg (stmt, 2));\n   if (success)\n     {\n       stmt = gsi_stmt (*gsi);\n+      gimple_call_set_with_bounds (stmt, with_bounds);\n       update_stmt (stmt);\n       if (dump_file && (dump_flags & TDF_DETAILS) != 0)\n \t{\n@@ -1298,9 +1352,10 @@ handle_builtin_memcpy (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n   tree src, dst, len, lhs, oldlen, newlen;\n   gimple stmt = gsi_stmt (*gsi);\n   strinfo si, dsi, olddsi;\n+  bool with_bounds = gimple_call_with_bounds_p (stmt);\n \n-  len = gimple_call_arg (stmt, 2);\n-  src = gimple_call_arg (stmt, 1);\n+  len = gimple_call_arg (stmt, with_bounds ? 4 : 2);\n+  src = gimple_call_arg (stmt, with_bounds ? 2 : 1);\n   dst = gimple_call_arg (stmt, 0);\n   idx = get_stridx (src);\n   if (idx == 0)\n@@ -1407,6 +1462,8 @@ handle_builtin_memcpy (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n     {\n     case BUILT_IN_MEMCPY:\n     case BUILT_IN_MEMCPY_CHK:\n+    case BUILT_IN_MEMCPY_CHKP:\n+    case BUILT_IN_MEMCPY_CHK_CHKP:\n       /* Allow adjust_last_stmt to decrease this memcpy's size.  */\n       laststmt.stmt = stmt;\n       laststmt.len = dsi->length;\n@@ -1416,6 +1473,8 @@ handle_builtin_memcpy (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n       break;\n     case BUILT_IN_MEMPCPY:\n     case BUILT_IN_MEMPCPY_CHK:\n+    case BUILT_IN_MEMPCPY_CHKP:\n+    case BUILT_IN_MEMPCPY_CHK_CHKP:\n       break;\n     default:\n       gcc_unreachable ();\n@@ -1437,8 +1496,9 @@ handle_builtin_strcat (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n   gimple stmt = gsi_stmt (*gsi);\n   strinfo si, dsi;\n   location_t loc;\n+  bool with_bounds = gimple_call_with_bounds_p (stmt);\n \n-  src = gimple_call_arg (stmt, 1);\n+  src = gimple_call_arg (stmt, with_bounds ? 2 : 1);\n   dst = gimple_call_arg (stmt, 0);\n   lhs = gimple_call_lhs (stmt);\n \n@@ -1534,17 +1594,19 @@ handle_builtin_strcat (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n   switch (bcode)\n     {\n     case BUILT_IN_STRCAT:\n+    case BUILT_IN_STRCAT_CHKP:\n       if (srclen != NULL_TREE)\n \tfn = builtin_decl_implicit (BUILT_IN_MEMCPY);\n       else\n \tfn = builtin_decl_implicit (BUILT_IN_STRCPY);\n       break;\n     case BUILT_IN_STRCAT_CHK:\n+    case BUILT_IN_STRCAT_CHK_CHKP:\n       if (srclen != NULL_TREE)\n \tfn = builtin_decl_explicit (BUILT_IN_MEMCPY_CHK);\n       else\n \tfn = builtin_decl_explicit (BUILT_IN_STRCPY_CHK);\n-      objsz = gimple_call_arg (stmt, 2);\n+      objsz = gimple_call_arg (stmt, with_bounds ? 4 : 2);\n       break;\n     default:\n       gcc_unreachable ();\n@@ -1579,15 +1641,35 @@ handle_builtin_strcat (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n       fprintf (dump_file, \"Optimizing: \");\n       print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n     }\n-  if (srclen != NULL_TREE)\n-    success = update_gimple_call (gsi, fn, 3 + (objsz != NULL_TREE),\n-\t\t\t\t  dst, src, len, objsz);\n+  if (with_bounds)\n+    {\n+      fn = chkp_maybe_create_clone (fn)->decl;\n+      if (srclen != NULL_TREE)\n+\tsuccess = update_gimple_call (gsi, fn, 5 + (objsz != NULL_TREE),\n+\t\t\t\t      dst,\n+\t\t\t\t      gimple_call_arg (stmt, 1),\n+\t\t\t\t      src,\n+\t\t\t\t      gimple_call_arg (stmt, 3),\n+\t\t\t\t      len, objsz);\n+      else\n+\tsuccess = update_gimple_call (gsi, fn, 4 + (objsz != NULL_TREE),\n+\t\t\t\t      dst,\n+\t\t\t\t      gimple_call_arg (stmt, 1),\n+\t\t\t\t      src,\n+\t\t\t\t      gimple_call_arg (stmt, 3),\n+\t\t\t\t      objsz);\n+    }\n   else\n-    success = update_gimple_call (gsi, fn, 2 + (objsz != NULL_TREE),\n-\t\t\t\t  dst, src, objsz);\n+    if (srclen != NULL_TREE)\n+      success = update_gimple_call (gsi, fn, 3 + (objsz != NULL_TREE),\n+\t\t\t\t    dst, src, len, objsz);\n+    else\n+      success = update_gimple_call (gsi, fn, 2 + (objsz != NULL_TREE),\n+\t\t\t\t    dst, src, objsz);\n   if (success)\n     {\n       stmt = gsi_stmt (*gsi);\n+      gimple_call_set_with_bounds (stmt, with_bounds);\n       update_stmt (stmt);\n       if (dump_file && (dump_flags & TDF_DETAILS) != 0)\n \t{\n@@ -1901,25 +1983,37 @@ strlen_optimize_stmt (gimple_stmt_iterator *gsi)\n \tswitch (DECL_FUNCTION_CODE (callee))\n \t  {\n \t  case BUILT_IN_STRLEN:\n+\t  case BUILT_IN_STRLEN_CHKP:\n \t    handle_builtin_strlen (gsi);\n \t    break;\n \t  case BUILT_IN_STRCHR:\n+\t  case BUILT_IN_STRCHR_CHKP:\n \t    handle_builtin_strchr (gsi);\n \t    break;\n \t  case BUILT_IN_STRCPY:\n \t  case BUILT_IN_STRCPY_CHK:\n \t  case BUILT_IN_STPCPY:\n \t  case BUILT_IN_STPCPY_CHK:\n+\t  case BUILT_IN_STRCPY_CHKP:\n+\t  case BUILT_IN_STRCPY_CHK_CHKP:\n+\t  case BUILT_IN_STPCPY_CHKP:\n+\t  case BUILT_IN_STPCPY_CHK_CHKP:\n \t    handle_builtin_strcpy (DECL_FUNCTION_CODE (callee), gsi);\n \t    break;\n \t  case BUILT_IN_MEMCPY:\n \t  case BUILT_IN_MEMCPY_CHK:\n \t  case BUILT_IN_MEMPCPY:\n \t  case BUILT_IN_MEMPCPY_CHK:\n+\t  case BUILT_IN_MEMCPY_CHKP:\n+\t  case BUILT_IN_MEMCPY_CHK_CHKP:\n+\t  case BUILT_IN_MEMPCPY_CHKP:\n+\t  case BUILT_IN_MEMPCPY_CHK_CHKP:\n \t    handle_builtin_memcpy (DECL_FUNCTION_CODE (callee), gsi);\n \t    break;\n \t  case BUILT_IN_STRCAT:\n \t  case BUILT_IN_STRCAT_CHK:\n+\t  case BUILT_IN_STRCAT_CHKP:\n+\t  case BUILT_IN_STRCAT_CHK_CHKP:\n \t    handle_builtin_strcat (DECL_FUNCTION_CODE (callee), gsi);\n \t    break;\n \t  case BUILT_IN_MALLOC:"}]}