{"sha": "ed383d79ee753208f0df0cdad55c9cbfb90178d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQzODNkNzllZTc1MzIwOGYwZGYwY2RhZDU1YzljYmZiOTAxNzhkNg==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2019-05-30T18:13:06Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2019-05-30T18:13:06Z"}, "message": "constraints.md (eI): New constraint.\n\n2019-05-30  Bill Schmidt  <wschmidt@linux.ibm.com>\n\t    Michael Meissner  <meissner@linux.ibm.com>\n\n\t* config/rs6000/constraints.md (eI): New constraint.\n\t* config/rs6000/predicates.md (cint34_operand): New predicate.\n\t* config/rs6000/rs6000.h (SIGNED_16BIT_OFFSET_P): New #define.\n\t(SIGNED_34BIT_OFFSET_P): Likewise.\n\t* doc/md.texi (eI): Document constraint.\n\n\nCo-Authored-By: Michael Meissner <meissner@linux.ibm.com>\n\nFrom-SVN: r271787", "tree": {"sha": "01cd0e7fc69e8f2c572508fb2b052e8a397e8b14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01cd0e7fc69e8f2c572508fb2b052e8a397e8b14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed383d79ee753208f0df0cdad55c9cbfb90178d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed383d79ee753208f0df0cdad55c9cbfb90178d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed383d79ee753208f0df0cdad55c9cbfb90178d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed383d79ee753208f0df0cdad55c9cbfb90178d6/comments", "author": null, "committer": null, "parents": [{"sha": "93f096795b3f15dc9e628e1fa2700625092fe433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f096795b3f15dc9e628e1fa2700625092fe433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93f096795b3f15dc9e628e1fa2700625092fe433"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "20099e9d960b1df016db36c95327b6b8487b7acc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed383d79ee753208f0df0cdad55c9cbfb90178d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed383d79ee753208f0df0cdad55c9cbfb90178d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed383d79ee753208f0df0cdad55c9cbfb90178d6", "patch": "@@ -1,3 +1,12 @@\n+2019-05-30  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\t    Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/constraints.md (eI): New constraint.\n+\t* config/rs6000/predicates.md (cint34_operand): New predicate.\n+\t* config/rs6000/rs6000.h (SIGNED_16BIT_OFFSET_P): New #define.\n+\t(SIGNED_34BIT_OFFSET_P): Likewise.\n+\t* doc/md.texi (eI): Document constraint.\n+\n 2019-05-30  Sylvia Taylor  <sylvia.taylor@arm.com>\n \n \t* config/aarch64/aarch64-sve.md (*fabd<mode>3): New."}, {"sha": "8004a92fd4086e1d304d2114dce528259db5707a", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed383d79ee753208f0df0cdad55c9cbfb90178d6/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed383d79ee753208f0df0cdad55c9cbfb90178d6/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=ed383d79ee753208f0df0cdad55c9cbfb90178d6", "patch": "@@ -210,6 +210,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"((- (unsigned HOST_WIDE_INT) ival) + 0x8000) < 0x10000\")))\n \n+;; 34-bit signed integer constant\n+(define_constraint \"eI\"\n+  \"34-bit constant integer that can be loaded with PADDI\"\n+  (match_operand 0 \"cint34_operand\"))\n+\n ;; Floating-point constraints.  These two are defined so that insn\n ;; length attributes can be calculated exactly.\n "}, {"sha": "a578e0f27f70d00be0536832c989b006da4d89af", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed383d79ee753208f0df0cdad55c9cbfb90178d6/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed383d79ee753208f0df0cdad55c9cbfb90178d6/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=ed383d79ee753208f0df0cdad55c9cbfb90178d6", "patch": "@@ -302,6 +302,16 @@\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 0, 15)\")))\n \n+;; Return 1 if op is a 34-bit constant integer.\n+(define_predicate \"cint34_operand\"\n+  (match_code \"const_int\")\n+{\n+  if (!TARGET_PREFIXED_ADDR)\n+    return 0;\n+\n+  return SIGNED_34BIT_OFFSET_P (INTVAL (op), 0);\n+})\n+\n ;; Return 1 if op is a register that is not special.\n ;; Disallow (SUBREG:SF (REG:SI)) and (SUBREG:SI (REG:SF)) on VSX systems where\n ;; you need to be careful in moving a SFmode to SImode and vice versa due to"}, {"sha": "8119c6621d51e57b3d7c2e1212b9440b70a28fc8", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed383d79ee753208f0df0cdad55c9cbfb90178d6/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed383d79ee753208f0df0cdad55c9cbfb90178d6/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=ed383d79ee753208f0df0cdad55c9cbfb90178d6", "patch": "@@ -2502,3 +2502,17 @@ extern GTY(()) tree rs6000_builtin_decls[RS6000_BUILTIN_COUNT];\n #if (GCC_VERSION >= 3000)\n #pragma GCC poison TARGET_FLOAT128 OPTION_MASK_FLOAT128 MASK_FLOAT128\n #endif\n+\n+/* Whether a given VALUE is a valid 16- or 34-bit signed offset.  EXTRA is the\n+   amount that we can't touch at the high end of the range (typically if the\n+   address is split into smaller addresses, the extra covers the addresses\n+   which might be generated when the insn is split).  */\n+#define SIGNED_16BIT_OFFSET_P(VALUE, EXTRA)\t\t\t\t\\\n+  IN_RANGE (VALUE,\t\t\t\t\t\t\t\\\n+\t    -(HOST_WIDE_INT_1 << 15),\t\t\t\t\t\\\n+\t    (HOST_WIDE_INT_1 << 15) - 1 - (EXTRA))\n+\n+#define SIGNED_34BIT_OFFSET_P(VALUE, EXTRA)\t\t\t\t\\\n+  IN_RANGE (VALUE,\t\t\t\t\t\t\t\\\n+\t    -(HOST_WIDE_INT_1 << 33),\t\t\t\t\t\\\n+\t    (HOST_WIDE_INT_1 << 33) - 1 - (EXTRA))"}, {"sha": "775b8f5b71521f06444ff7fcb40761ed58cf5159", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed383d79ee753208f0df0cdad55c9cbfb90178d6/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed383d79ee753208f0df0cdad55c9cbfb90178d6/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=ed383d79ee753208f0df0cdad55c9cbfb90178d6", "patch": "@@ -3367,6 +3367,9 @@ Zero\n @item P\n Constant whose negation is a signed 16-bit constant\n \n+@item eI\n+Signed 34-bit integer constant if prefixed instructions are supported.\n+\n @item G\n Floating point constant that can be loaded into a register with one\n instruction per word"}]}