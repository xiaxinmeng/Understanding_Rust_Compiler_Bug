{"sha": "7d8ac2930bce171807333f4d4aa6839e0120c16c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q4YWMyOTMwYmNlMTcxODA3MzMzZjRkNGFhNjgzOWUwMTIwYzE2Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-01-07T22:41:42Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-01-07T22:41:42Z"}, "message": "* unwind-dw2.c (execute_cfa_program): Use < again.\n\nFrom-SVN: r48617", "tree": {"sha": "e33eeef40fdd9893e09f089b42483a89dea6e375", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e33eeef40fdd9893e09f089b42483a89dea6e375"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d8ac2930bce171807333f4d4aa6839e0120c16c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d8ac2930bce171807333f4d4aa6839e0120c16c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d8ac2930bce171807333f4d4aa6839e0120c16c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d8ac2930bce171807333f4d4aa6839e0120c16c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b64d74774639ebc526df04e6cb620bac5635edd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b64d74774639ebc526df04e6cb620bac5635edd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b64d74774639ebc526df04e6cb620bac5635edd"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "a13b5b2adaca9bedf7ba184f15cc731875515353", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8ac2930bce171807333f4d4aa6839e0120c16c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8ac2930bce171807333f4d4aa6839e0120c16c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d8ac2930bce171807333f4d4aa6839e0120c16c", "patch": "@@ -1,3 +1,7 @@\n+2002-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\t* unwind-dw2.c (execute_cfa_program): Use < again.\n+\n 2002-01-07  Jakub Jelinek  <jakub@redhat.com>\n \n \t* predict.c (combine_predictions_for_insn): Avoid division by zero."}, {"sha": "ef9b33bddbf33497a5304d6b7c7a78d0026fe621", "filename": "gcc/unwind-dw2.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8ac2930bce171807333f4d4aa6839e0120c16c/gcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8ac2930bce171807333f4d4aa6839e0120c16c/gcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.c?ref=7d8ac2930bce171807333f4d4aa6839e0120c16c", "patch": "@@ -705,7 +705,14 @@ execute_cfa_program (const unsigned char *insn_ptr,\n   /* Don't allow remember/restore between CIE and FDE programs.  */\n   fs->regs.prev = NULL;\n \n-  while (insn_ptr < insn_end && fs->pc <= context->ra)\n+  /* The comparison with the return address uses < rather than <= because\n+     we are only interested in the effects of code before the call; for a\n+     noreturn function, the return address may point to unrelated code with\n+     a different stack configuration that we are not interested in.  We\n+     assume that the call itself is unwind info-neutral; if not, or if\n+     there are delay instructions that adjust the stack, these must be\n+     reflected at the point immediately before the call insn.  */\n+  while (insn_ptr < insn_end && fs->pc < context->ra)\n     {\n       unsigned char insn = *insn_ptr++;\n       _Unwind_Word reg, utmp;"}]}