{"sha": "197f1e8c14306fc97ff91f9fb4262e70f45eedef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk3ZjFlOGMxNDMwNmZjOTdmZjkxZjlmYjQyNjJlNzBmNDVlZWRlZg==", "commit": {"author": {"name": "Jojo R", "email": "jiejie_rong@c-sky.com", "date": "2020-07-31T07:18:25Z"}, "committer": {"name": "Xianmiao Qu", "email": "xianmiao_qu@c-sky.com", "date": "2020-08-01T08:10:43Z"}, "message": "C-SKY: Add -mfloat-abi= option.\n\ngcc/ChangeLog:\n\n\t* config/csky/csky_opts.h (float_abi_type): New.\n\t* config/csky/csky.h (TARGET_SOFT_FLOAT): New.\n\t(TARGET_HARD_FLOAT): New.\n\t(TARGET_HARD_FLOAT_ABI): New.\n\t(OPTION_DEFAULT_SPECS): Use mfloat-abi.\n\t* config/csky/csky.opt (mfloat-abi): New.\n\t* doc/invoke.texi (C-SKY Options): Document -mfloat-abi=.", "tree": {"sha": "394e9370571896e7186ac4188ebb72126a4c6679", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/394e9370571896e7186ac4188ebb72126a4c6679"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/197f1e8c14306fc97ff91f9fb4262e70f45eedef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/197f1e8c14306fc97ff91f9fb4262e70f45eedef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/197f1e8c14306fc97ff91f9fb4262e70f45eedef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/197f1e8c14306fc97ff91f9fb4262e70f45eedef/comments", "author": null, "committer": null, "parents": [{"sha": "c713ad3feae737b43083fe4b3bc076575b7f9257", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c713ad3feae737b43083fe4b3bc076575b7f9257", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c713ad3feae737b43083fe4b3bc076575b7f9257"}], "stats": {"total": 63, "additions": 58, "deletions": 5}, "files": [{"sha": "8f4090b4b380f6c23a97c9ead583502e73381563", "filename": "gcc/config/csky/csky.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/197f1e8c14306fc97ff91f9fb4262e70f45eedef/gcc%2Fconfig%2Fcsky%2Fcsky.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/197f1e8c14306fc97ff91f9fb4262e70f45eedef/gcc%2Fconfig%2Fcsky%2Fcsky.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.h?ref=197f1e8c14306fc97ff91f9fb4262e70f45eedef", "patch": "@@ -126,6 +126,13 @@\n #define TARGET_TLS \\\n   (CSKY_TARGET_ARCH (CK807) || CSKY_TARGET_ARCH (CK810))\n \n+/* Run-time Target Specification.  */\n+#define TARGET_SOFT_FLOAT       (csky_float_abi == CSKY_FLOAT_ABI_SOFT)\n+/* Use hardware floating point instructions. */\n+#define TARGET_HARD_FLOAT       (csky_float_abi != CSKY_FLOAT_ABI_SOFT)\n+/* Use hardware floating point calling convention.  */\n+#define TARGET_HARD_FLOAT_ABI   (csky_float_abi == CSKY_FLOAT_ABI_HARD)\n+\n /* Number of loads/stores handled by ldm/stm.  */\n #define CSKY_MIN_MULTIPLE_STLD\t3\n #define CSKY_MAX_MULTIPLE_STLD\t12\n@@ -818,7 +825,7 @@ while (0)\n   {\"arch\", \"%{!march=*:%{!mcpu=*:-march=%(VALUE)}}\" }, \\\n   {\"cpu\", \"%{!march=*:%{!mcpu=*:-mcpu=%(VALUE)}}\" }, \\\n   {\"endian\", \"%{!mbig-endian:%{!mlittle-endian:-m%(VALUE)-endian}}\" }, \\\n-  {\"float\", \"%{!msoft-float:%{!mhard-float:-m%(VALUE)-float}}\" },\n+  {\"float\", \"%{!mfloat-abi=*:-mfloat-abi=%(VALUE)}\" },\n \n \n /******************************************************************"}, {"sha": "60b51e5798fc9a41ea104826a55a872867b8dc5b", "filename": "gcc/config/csky/csky.opt", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/197f1e8c14306fc97ff91f9fb4262e70f45eedef/gcc%2Fconfig%2Fcsky%2Fcsky.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/197f1e8c14306fc97ff91f9fb4262e70f45eedef/gcc%2Fconfig%2Fcsky%2Fcsky.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.opt?ref=197f1e8c14306fc97ff91f9fb4262e70f45eedef", "patch": "@@ -57,12 +57,33 @@ Target RejectNegative Report Alias(mlittle-endian) Undocumented\n ;; assembly.\n \n mhard-float\n-Target Report RejectNegative Mask(HARD_FLOAT)\n-Enable hardware floating-point instructions.\n+Target RejectNegative Alias(mfloat-abi=, hard) Undocumented\n \n msoft-float\n-Target Report RejectNegative InverseMask(HARD_FLOAT)\n-Use library calls to perform floating-point operations (default).\n+Target RejectNegative Alias(mfloat-abi=, soft) Undocumented\n+\n+mfloat-abi=v2\n+Target RejectNegative Alias(mfloat-abi=, hard) Undocumented\n+\n+mfloat-abi=v1\n+Target RejectNegative Alias(mfloat-abi=, softfp) Undocumented\n+\n+mfloat-abi=\n+Target RejectNegative Joined Enum(float_abi_type) Var(csky_float_abi) Init(CSKY_FLOAT_ABI_SOFT)\n+Specify if floating point hardware should be used.\n+\n+Enum\n+Name(float_abi_type) Type(enum float_abi_type)\n+Known floating-point ABIs (for use with the -mfloat-abi= option):\n+\n+EnumValue\n+Enum(float_abi_type) String(soft) Value(CSKY_FLOAT_ABI_SOFT)\n+\n+EnumValue\n+Enum(float_abi_type) String(softfp) Value(CSKY_FLOAT_ABI_SOFTFP)\n+\n+EnumValue\n+Enum(float_abi_type) String(hard) Value(CSKY_FLOAT_ABI_HARD)\n \n mfpu=\n Target RejectNegative Joined Enum(csky_fpu) Var(csky_fpu_index) Init(TARGET_FPU_auto) Save"}, {"sha": "7ee56be3e8178440f0a2c037fc2403632954a227", "filename": "gcc/config/csky/csky_opts.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/197f1e8c14306fc97ff91f9fb4262e70f45eedef/gcc%2Fconfig%2Fcsky%2Fcsky_opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/197f1e8c14306fc97ff91f9fb4262e70f45eedef/gcc%2Fconfig%2Fcsky%2Fcsky_opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky_opts.h?ref=197f1e8c14306fc97ff91f9fb4262e70f45eedef", "patch": "@@ -59,5 +59,12 @@ enum csky_fpu_type\n };\n #define CSKY_TARGET_FPU_GET(name) TARGET_FPU_ ## name\n \n+enum float_abi_type\n+{\n+  CSKY_FLOAT_ABI_SOFT,\n+  CSKY_FLOAT_ABI_SOFTFP,\n+  CSKY_FLOAT_ABI_HARD\n+};\n+\n \n #endif /* CSKY_OPTS_H */"}, {"sha": "060d73ed0c506814a56974e0ce795e2fb63ce055", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/197f1e8c14306fc97ff91f9fb4262e70f45eedef/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/197f1e8c14306fc97ff91f9fb4262e70f45eedef/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=197f1e8c14306fc97ff91f9fb4262e70f45eedef", "patch": "@@ -820,6 +820,7 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-march=@var{arch}  -mcpu=@var{cpu} @gol\n -mbig-endian  -EB  -mlittle-endian  -EL @gol\n -mhard-float  -msoft-float  -mfpu=@var{fpu}  -mdouble-float  -mfdivdu @gol\n+-mfloat-abi=@var{name} @gol\n -melrw  -mistack  -mmp  -mcp  -mcache  -msecurity  -mtrust @gol\n -mdsp  -medsp  -mvdsp @gol\n -mdiv  -msmart  -mhigh-registers  -manchor @gol\n@@ -20646,6 +20647,23 @@ Specify the C-SKY target processor.  Valid values for @var{cpu} are:\n \n Select big- or little-endian code.  The default is little-endian.\n \n+@item -mfloat-abi=@var{name}\n+@opindex mfloat-abi\n+Specifies which floating-point ABI to use.  Permissible values\n+are: @samp{soft}, @samp{softfp} and @samp{hard}.\n+\n+Specifying @samp{soft} causes GCC to generate output containing\n+library calls for floating-point operations.\n+@samp{softfp} allows the generation of code using hardware floating-point\n+instructions, but still uses the soft-float calling conventions.\n+@samp{hard} allows generation of floating-point instructions\n+and uses FPU-specific calling conventions.\n+\n+The default depends on the specific target configuration.  Note that\n+the hard-float and soft-float ABIs are not link-compatible; you must\n+compile your entire program with the same ABI, and link with a\n+compatible set of libraries.\n+\n @item -mhard-float\n @opindex mhard-float\n @itemx -msoft-float"}]}