{"sha": "c73ccc80a339f7e80afbecc3728b313fb3c66fe5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzczY2NjODBhMzM5ZjdlODBhZmJlY2MzNzI4YjMxM2ZiM2M2NmZlNQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2013-10-31T03:14:07Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2013-10-31T03:14:07Z"}, "message": "re PR bootstrap/58933 (IRA ICE in update_costs_from_allocno)\n\n2013-10-30  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR bootstrap/58933\n\t* ira-color.c (update_costs_from_copies): Add new parameter.  Use\n\tit for calling update_costs_from_allocno.\n\t(assign_hard_reg): Call restore_costs_from_copies only for\n\t!retry_p.  Pass new argument to update_costs_from_copies.\n\t(color_pass): Pass new argument to update_costs_from_copies.\n\t(ira_mark_allocation_change): Ditto.\n\nFrom-SVN: r204245", "tree": {"sha": "aa26a1150731633717540bb96fbdb01b46cd7213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa26a1150731633717540bb96fbdb01b46cd7213"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c73ccc80a339f7e80afbecc3728b313fb3c66fe5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73ccc80a339f7e80afbecc3728b313fb3c66fe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c73ccc80a339f7e80afbecc3728b313fb3c66fe5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73ccc80a339f7e80afbecc3728b313fb3c66fe5/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "477e804b725b654821bfea08e991c3d594046e0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477e804b725b654821bfea08e991c3d594046e0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/477e804b725b654821bfea08e991c3d594046e0c"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "966b4a5ffe08602564c0bc98c5bd6ea3b86a5ad0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73ccc80a339f7e80afbecc3728b313fb3c66fe5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73ccc80a339f7e80afbecc3728b313fb3c66fe5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c73ccc80a339f7e80afbecc3728b313fb3c66fe5", "patch": "@@ -1,3 +1,13 @@\n+2013-10-30  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR bootstrap/58933\n+\t* ira-color.c (update_costs_from_copies): Add new parameter.  Use\n+\tit for calling update_costs_from_allocno.\n+\t(assign_hard_reg): Call restore_costs_from_copies only for\n+\t!retry_p.  Pass new argument to update_costs_from_copies.\n+\t(color_pass): Pass new argument to update_costs_from_copies.\n+\t(ira_mark_allocation_change): Ditto.\n+\n 2013-10-30  Sharad Singhai  <singhai@google.com>\n \n \tPR middle-end/58134"}, {"sha": "295cd5327d756c4fd167dfb89a916909180ac93b", "filename": "gcc/ira-color.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73ccc80a339f7e80afbecc3728b313fb3c66fe5/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73ccc80a339f7e80afbecc3728b313fb3c66fe5/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=c73ccc80a339f7e80afbecc3728b313fb3c66fe5", "patch": "@@ -1217,7 +1217,7 @@ static struct update_cost_queue_elem *update_cost_queue_elems;\n static int update_cost_check;\n \n /* Allocate and initialize data necessary for function\n-   update_costs_from_copiess.  */\n+   update_costs_from_copies.  */\n static void\n initiate_cost_update (void)\n {\n@@ -1399,16 +1399,16 @@ update_costs_from_prefs (ira_allocno_t allocno)\n /* Update (decrease if DECR_P) the cost of allocnos connected to\n    ALLOCNO through copies to increase chances to remove some copies as\n    the result of subsequent assignment.  ALLOCNO was just assigned to\n-   a hard register.  */\n+   a hard register.  Record cost updates if RECORD_P is true.  */\n static void\n-update_costs_from_copies (ira_allocno_t allocno, bool decr_p)\n+update_costs_from_copies (ira_allocno_t allocno, bool decr_p, bool record_p)\n {\n   int hard_regno;\n \n   hard_regno = ALLOCNO_HARD_REGNO (allocno);\n   ira_assert (hard_regno >= 0 && ALLOCNO_CLASS (allocno) != NO_REGS);\n   start_update_cost ();\n-  update_costs_from_allocno (allocno, hard_regno, 1, decr_p, true);\n+  update_costs_from_allocno (allocno, hard_regno, 1, decr_p, record_p);\n }\n \n /* Restore costs of allocnos connected to ALLOCNO by copies as it was\n@@ -1849,11 +1849,12 @@ assign_hard_reg (ira_allocno_t a, bool retry_p)\n       for (i = hard_regno_nregs[best_hard_regno][mode] - 1; i >= 0; i--)\n \tallocated_hardreg_p[best_hard_regno + i] = true;\n     }\n-  restore_costs_from_copies (a);\n+  if (! retry_p)\n+    restore_costs_from_copies (a);\n   ALLOCNO_HARD_REGNO (a) = best_hard_regno;\n   ALLOCNO_ASSIGNED_P (a) = true;\n   if (best_hard_regno >= 0)\n-    update_costs_from_copies (a, true);\n+    update_costs_from_copies (a, true, ! retry_p);\n   ira_assert (ALLOCNO_CLASS (a) == aclass);\n   /* We don't need updated costs anymore: */\n   ira_free_allocno_updated_costs (a);\n@@ -2942,7 +2943,7 @@ color_pass (ira_loop_tree_node_t loop_tree_node)\n \t    ALLOCNO_HARD_REGNO (subloop_allocno) = hard_regno;\n \t    ALLOCNO_ASSIGNED_P (subloop_allocno) = true;\n \t    if (hard_regno >= 0)\n-\t      update_costs_from_copies (subloop_allocno, true);\n+\t      update_costs_from_copies (subloop_allocno, true, true);\n \t    /* We don't need updated costs anymore: */\n \t    ira_free_allocno_updated_costs (subloop_allocno);\n \t  }\n@@ -2986,7 +2987,7 @@ color_pass (ira_loop_tree_node_t loop_tree_node)\n \t\t  ALLOCNO_HARD_REGNO (subloop_allocno) = hard_regno;\n \t\t  ALLOCNO_ASSIGNED_P (subloop_allocno) = true;\n \t\t  if (hard_regno >= 0)\n-\t\t    update_costs_from_copies (subloop_allocno, true);\n+\t\t    update_costs_from_copies (subloop_allocno, true, true);\n \t\t  /* We don't need updated costs anymore: */\n \t\t  ira_free_allocno_updated_costs (subloop_allocno);\n \t\t}\n@@ -3002,7 +3003,7 @@ color_pass (ira_loop_tree_node_t loop_tree_node)\n \t\t  ALLOCNO_HARD_REGNO (subloop_allocno) = hard_regno;\n \t\t  ALLOCNO_ASSIGNED_P (subloop_allocno) = true;\n \t\t  if (hard_regno >= 0)\n-\t\t    update_costs_from_copies (subloop_allocno, true);\n+\t\t    update_costs_from_copies (subloop_allocno, true, true);\n \t\t  /* We don't need updated costs anymore: */\n \t\t  ira_free_allocno_updated_costs (subloop_allocno);\n \t\t}\n@@ -3983,7 +3984,7 @@ ira_mark_allocation_change (int regno)\n \t       ? ALLOCNO_CLASS_COST (a)\n \t       : ALLOCNO_HARD_REG_COSTS (a)\n \t         [ira_class_hard_reg_index[aclass][old_hard_regno]]);\n-      update_costs_from_copies (a, false);\n+      update_costs_from_copies (a, false, false);\n     }\n   ira_overall_cost -= cost;\n   ALLOCNO_HARD_REGNO (a) = hard_regno;\n@@ -3998,7 +3999,7 @@ ira_mark_allocation_change (int regno)\n \t       ? ALLOCNO_CLASS_COST (a)\n \t       : ALLOCNO_HARD_REG_COSTS (a)\n \t         [ira_class_hard_reg_index[aclass][hard_regno]]);\n-      update_costs_from_copies (a, true);\n+      update_costs_from_copies (a, true, false);\n     }\n   else\n     /* Reload changed class of the allocno.  */"}]}