{"sha": "54fde020ccdc4bbb163fb6d481743342d9ee2deb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRmZGUwMjBjY2RjNGJiYjE2M2ZiNmQ0ODE3NDMzNDJkOWVlMmRlYg==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2014-05-13T16:23:11Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2014-05-13T16:23:11Z"}, "message": "Enable Java on Cygwin-64\n\nCurrently it is not possible to build GCC's libjava support on Cygwin-64.\n\nThis patch fixes the current build-problems on Cygwin-64 and the most\nfundamental bugs on that platform.\n\nNote you must still add --enable-threads=posix to successfully build the\njava language support.\n\n\nboehm-gc/ChangeLog:\n\n2014-05-13  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        Fix current cygwin-64 build problems.\n        * include/gc_config_macros.h (GC_PTHREADS): Use __CYGWIN__ instead\n        of __CYGWIN32__ here.\n        * win32_threads.c (GC_push_all_stacks): Push all X86_64 registers.\n        (GC_get_thread_stack_base): Get the stack base for X86_64.\n\nlibffi/ChangeLog:\n\n2014-05-13  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        Fix current cygwin-64 build problems.\n        * src/java_raw_api.c: Remove if !defined(FFI_NO_RAW_API).\n        * src/x86/ffi.c: Add if defined(__CYGWIN__).\n        * src/x86/win64.S (ffi_closure_win64, ffi_call_win64): Added\n        handling for FFI_TYPE_UINT64, FFI_TYPE_POINTER and FFI_TYPE_INT.\n        Added SEH information.  Fixed formatting.\n\nlibgcc/ChangeLog:\n\n2014-05-13  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * unwind-seh.c (_Unwind_Backtrace): Uncommented, finished\n        implementation.\n\nlibjava/ChangeLog:\n\n2014-05-13  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        Fix current cygwin-64 build problems.\n        * configure.host: Added handling for x86_64-*-cygwin/mingw.\n        * boehm.cc (_Jv_GCAttachThread, _Jv_GCDetachThread): Don't compile if\n        GC_WIN32_THREADS is defined.\n        * java/lang/natClass.cc (_Jv_InterfaceAssignableFrom): Rename interface\n        to source_interface.\n\nlibjava/classpath/ChangeLog:\n\n2014-05-13  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        Fix current cygwin-64 build problems.\n        * native/fdlibm/mprec.c (_REENT_CHECK_MP, _REENT_MP_FREELIST,\n        _REENT_MP_P5S, __ULong, __Long): Undefine previous definitions.\n\nFrom-SVN: r210386", "tree": {"sha": "fbcc4f4a9f2fcf4816b6055b5e2b235c10e3d758", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbcc4f4a9f2fcf4816b6055b5e2b235c10e3d758"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54fde020ccdc4bbb163fb6d481743342d9ee2deb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54fde020ccdc4bbb163fb6d481743342d9ee2deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54fde020ccdc4bbb163fb6d481743342d9ee2deb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54fde020ccdc4bbb163fb6d481743342d9ee2deb/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af2db4c5770b07d6278207cf43d65c3bf7bad36f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af2db4c5770b07d6278207cf43d65c3bf7bad36f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af2db4c5770b07d6278207cf43d65c3bf7bad36f"}], "stats": {"total": 293, "additions": 199, "deletions": 94}, "files": [{"sha": "50a0802d9d8b39cce43ece85baa0e8be0ec76b17", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fde020ccdc4bbb163fb6d481743342d9ee2deb/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fde020ccdc4bbb163fb6d481743342d9ee2deb/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=54fde020ccdc4bbb163fb6d481743342d9ee2deb", "patch": "@@ -1,3 +1,11 @@\n+2014-05-13  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tFix current cygwin-64 build problems.\n+\t* include/gc_config_macros.h (GC_PTHREADS): Use __CYGWIN__ instead\n+\tof __CYGWIN32__ here.\n+\t* win32_threads.c (GC_push_all_stacks): Push all X86_64 registers.\n+\t(GC_get_thread_stack_base): Get the stack base for X86_64.\n+\n 2014-04-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/43620"}, {"sha": "a01da4a1342d177b0401f9396c62d2924edc22d4", "filename": "boehm-gc/include/gc_config_macros.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fde020ccdc4bbb163fb6d481743342d9ee2deb/boehm-gc%2Finclude%2Fgc_config_macros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fde020ccdc4bbb163fb6d481743342d9ee2deb/boehm-gc%2Finclude%2Fgc_config_macros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fgc_config_macros.h?ref=54fde020ccdc4bbb163fb6d481743342d9ee2deb", "patch": "@@ -23,7 +23,7 @@\n \tdefined(GC_HPUX_THREADS) || defined(GC_OSF1_THREADS) || \\\n \tdefined(GC_DGUX386_THREADS) || defined(GC_DARWIN_THREADS) || \\\n \tdefined(GC_AIX_THREADS) || \\\n-        (defined(GC_WIN32_THREADS) && defined(__CYGWIN32__))\n+        (defined(GC_WIN32_THREADS) && defined(__CYGWIN__))\n #   define GC_PTHREADS\n # endif\n "}, {"sha": "2de1c6953b870f1a1df07927f87da32dd43e0fde", "filename": "boehm-gc/win32_threads.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fde020ccdc4bbb163fb6d481743342d9ee2deb/boehm-gc%2Fwin32_threads.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fde020ccdc4bbb163fb6d481743342d9ee2deb/boehm-gc%2Fwin32_threads.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fwin32_threads.c?ref=54fde020ccdc4bbb163fb6d481743342d9ee2deb", "patch": "@@ -365,7 +365,11 @@ void GC_push_all_stacks()\n #       define PUSH1(reg) GC_push_one((word)context.reg)\n #       define PUSH2(r1,r2) PUSH1(r1), PUSH1(r2)\n #       define PUSH4(r1,r2,r3,r4) PUSH2(r1,r2), PUSH2(r3,r4)\n-#       if defined(I386)\n+#       if defined(__x86_64__) \n+          PUSH4(Rdi,Rsi,Rbx,Rdx), PUSH2(Rcx,Rax), PUSH1(Rbp);\n+          PUSH4(R8,R9,R10,R11), PUSH4(R12,R13,R14,R15);\n+          sp = (ptr_t)context.Rsp;\n+#       elif defined(I386)\n           PUSH4(Edi,Esi,Ebx,Edx), PUSH2(Ecx,Eax), PUSH1(Ebp);\n \t  sp = (ptr_t)context.Esp;\n #       elif defined(ARM32)\n@@ -755,8 +759,12 @@ int GC_pthread_detach(pthread_t thread)\n \n GC_PTR GC_get_thread_stack_base()\n {\n+#ifdef __x86_64__\n+  return ((NT_TIB*)NtCurrentTeb())->StackBase;\n+#else\n   extern GC_PTR _tlsbase __asm__ (\"%fs:4\");\n   return _tlsbase;\n+#endif\n }\n \n #else /* !CYGWIN32 */"}, {"sha": "9ca95562fbd3e974a1caf13a4ff6d5d716ce9c31", "filename": "libffi/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=54fde020ccdc4bbb163fb6d481743342d9ee2deb", "patch": "@@ -1,3 +1,12 @@\n+2014-05-13  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tFix current cygwin-64 build problems.\n+\t* src/java_raw_api.c: Remove if !defined(FFI_NO_RAW_API).\n+\t* src/x86/ffi.c: Add if defined(__CYGWIN__).\n+\t* src/x86/win64.S (ffi_closure_win64, ffi_call_win64): Added\n+\thandling for FFI_TYPE_UINT64, FFI_TYPE_POINTER and FFI_TYPE_INT.\n+\tAdded SEH information.  Fixed formatting.\n+\n 2014-04-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/43620"}, {"sha": "d8e79ea1d4511db027bc3a1d8535b34979f5cf5d", "filename": "libffi/src/java_raw_api.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libffi%2Fsrc%2Fjava_raw_api.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libffi%2Fsrc%2Fjava_raw_api.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fjava_raw_api.c?ref=54fde020ccdc4bbb163fb6d481743342d9ee2deb", "patch": "@@ -39,7 +39,7 @@\n #include <ffi_common.h>\n #include <stdlib.h>\n \n-#if !defined(NO_JAVA_RAW_API) && !defined(FFI_NO_RAW_API)\n+#if !defined(NO_JAVA_RAW_API)\n \n size_t\n ffi_java_raw_size (ffi_cif *cif)\n@@ -353,4 +353,4 @@ ffi_prep_java_raw_closure (ffi_java_raw_closure* cl,\n \n #endif /* FFI_CLOSURES */\n #endif /* !FFI_NATIVE_RAW_API */\n-#endif /* !FFI_NO_RAW_API */\n+#endif /* !NO_JAVA_RAW_API */"}, {"sha": "6338de2a0f227b261fc6bce737b509c21c4ebe22", "filename": "libffi/src/x86/ffi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libffi%2Fsrc%2Fx86%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libffi%2Fsrc%2Fx86%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fffi.c?ref=54fde020ccdc4bbb163fb6d481743342d9ee2deb", "patch": "@@ -28,7 +28,7 @@\n    DEALINGS IN THE SOFTWARE.\n    ----------------------------------------------------------------------- */\n \n-#if !defined(__x86_64__) || defined(_WIN64)\n+#if !defined(__x86_64__) || defined(_WIN64) || defined(__CYGWIN__)\n \n #ifdef _WIN64\n #include <windows.h>"}, {"sha": "687f97c451df0310577d437614933f89cbe43140", "filename": "libffi/src/x86/win64.S", "status": "modified", "additions": 110, "deletions": 58, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libffi%2Fsrc%2Fx86%2Fwin64.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libffi%2Fsrc%2Fx86%2Fwin64.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fwin64.S?ref=54fde020ccdc4bbb163fb6d481743342d9ee2deb", "patch": "@@ -1,8 +1,8 @@\n #define LIBFFI_ASM\n #include <fficonfig.h>\n #include <ffi.h>\n-\t\n-/* Constants for ffi_call_win64 */\t\n+\n+/* Constants for ffi_call_win64 */\n #define STACK 0\n #define PREP_ARGS_FN 32\n #define ECIF 40\n@@ -12,8 +12,8 @@\n #define FN 72\n \n /* ffi_call_win64 (void (*prep_args_fn)(char *, extended_cif *),\n-                   extended_cif *ecif, unsigned bytes, unsigned flags,\n-                   unsigned *rvalue, void (*fn)());\n+\t\t   extended_cif *ecif, unsigned bytes, unsigned flags,\n+\t\t   unsigned *rvalue, void (*fn)());\n  */\n \n #ifdef _MSC_VER\n@@ -31,68 +31,68 @@ _TEXT\tSEGMENT\n ;;;\n ;;; It must move the parameters passed in registers to their stack location,\n ;;; call ffi_closure_win64_inner for the actual work, then return the result.\n-;;; \n+;;;\n ffi_closure_win64 PROC FRAME\n \t;; copy register arguments onto stack\n \ttest\tr11, 1\n-\tjne\tfirst_is_float\t\n+\tjne\tfirst_is_float\n \tmov\tQWORD PTR [rsp+8], rcx\n \tjmp\tsecond\n first_is_float:\n \tmovlpd\tQWORD PTR [rsp+8], xmm0\n \n second:\n \ttest\tr11, 2\n-\tjne\tsecond_is_float\t\n+\tjne\tsecond_is_float\n \tmov\tQWORD PTR [rsp+16], rdx\n \tjmp\tthird\n second_is_float:\n \tmovlpd\tQWORD PTR [rsp+16], xmm1\n \n third:\n \ttest\tr11, 4\n-\tjne\tthird_is_float\t\n+\tjne\tthird_is_float\n \tmov\tQWORD PTR [rsp+24], r8\n \tjmp\tfourth\n third_is_float:\n \tmovlpd\tQWORD PTR [rsp+24], xmm2\n \n fourth:\n \ttest\tr11, 8\n-\tjne\tfourth_is_float\t\n+\tjne\tfourth_is_float\n \tmov\tQWORD PTR [rsp+32], r9\n \tjmp\tdone\n fourth_is_float:\n \tmovlpd\tQWORD PTR [rsp+32], xmm3\n \n done:\n-        .ALLOCSTACK 40\n+\t.ALLOCSTACK 40\n \tsub\trsp, 40\n-        .ENDPROLOG\n+\t.ENDPROLOG\n \tmov\trcx, rax\t; context is first parameter\n \tmov\trdx, rsp\t; stack is second parameter\n \tadd\trdx, 48\t\t; point to start of arguments\n \tmov\trax, ffi_closure_win64_inner\n \tcall\trax\t\t; call the real closure function\n \tadd\trsp, 40\n \tmovd\txmm0, rax\t; If the closure returned a float,\n-                                ; ffi_closure_win64_inner wrote it to rax\n+\t\t\t\t; ffi_closure_win64_inner wrote it to rax\n \tret\t0\n ffi_closure_win64 ENDP\n \n ffi_call_win64 PROC FRAME\n-        ;; copy registers onto stack\n+\t;; copy registers onto stack\n \tmov\tQWORD PTR [rsp+32], r9\n \tmov\tQWORD PTR [rsp+24], r8\n \tmov\tQWORD PTR [rsp+16], rdx\n \tmov\tQWORD PTR [rsp+8], rcx\n-        .PUSHREG rbp\n+\t.PUSHREG rbp\n \tpush\trbp\n-        .ALLOCSTACK 48\n+\t.ALLOCSTACK 48\n \tsub\trsp, 48\t\t\t\t\t; 00000030H\n-        .SETFRAME rbp, 32\n+\t.SETFRAME rbp, 32\n \tlea\trbp, QWORD PTR [rsp+32]\n-        .ENDPROLOG\n+\t.ENDPROLOG\n \n \tmov\teax, DWORD PTR CIF_BYTES[rbp]\n \tadd\trax, 15\n@@ -209,20 +209,45 @@ ret_float$:\n \n ret_double$:\n  \tcmp\tDWORD PTR CIF_FLAGS[rbp], FFI_TYPE_DOUBLE\n- \tjne\tSHORT ret_sint64$\n+ \tjne\tSHORT ret_uint64$\n \n  \tmov\trax, QWORD PTR RVALUE[rbp]\n  \tmovlpd\tQWORD PTR [rax], xmm0\n  \tjmp\tSHORT ret_void$\n \n+ret_uint64$:\n+  \tcmp\tDWORD PTR CIF_FLAGS[rbp], FFI_TYPE_UINT64\n+  \tjne\tSHORT ret_sint64$\n+\n+ \tmov\trcx, QWORD PTR RVALUE[rbp]\n+ \tmov\tQWORD PTR [rcx], rax\n+ \tjmp\tSHORT ret_void$\n+\n ret_sint64$:\n   \tcmp\tDWORD PTR CIF_FLAGS[rbp], FFI_TYPE_SINT64\n-  \tjne\tret_void$\n+  \tjne\tSHORT ret_pointer$\n \n  \tmov\trcx, QWORD PTR RVALUE[rbp]\n  \tmov\tQWORD PTR [rcx], rax\n  \tjmp\tSHORT ret_void$\n-\t\n+\n+ret_pointer$:\n+  \tcmp\tDWORD PTR CIF_FLAGS[rbp], FFI_TYPE_POINTER\n+  \tjne\tSHORT ret_int$\n+\n+ \tmov\trcx, QWORD PTR RVALUE[rbp]\n+ \tmov\tQWORD PTR [rcx], rax\n+ \tjmp\tSHORT ret_void$\n+\n+ret_int$:\n+  \tcmp\tDWORD PTR CIF_FLAGS[rbp], FFI_TYPE_INT\n+  \tjne\tSHORT ret_void$\n+\n+\tmov\trcx, QWORD PTR RVALUE[rbp]\n+\tcdqe\n+\tmov\tQWORD PTR [rcx], rax\n+ \tjmp\tSHORT ret_void$\n+\n ret_void$:\n \txor\trax, rax\n \n@@ -252,72 +277,74 @@ END\n #\n # It must move the parameters passed in registers to their stack location,\n # call ffi_closure_win64_inner for the actual work, then return the result.\n-# \n+#\n \t.balign 16\n-        .globl SYMBOL_NAME(ffi_closure_win64)\n+\t.globl SYMBOL_NAME(ffi_closure_win64)\n+\t.seh_proc SYMBOL_NAME(ffi_closure_win64)\n SYMBOL_NAME(ffi_closure_win64):\n \t# copy register arguments onto stack\n \ttest\t$1,%r11\n-\tjne\t.Lfirst_is_float\t\n+\tjne\t.Lfirst_is_float\n \tmov\t%rcx, 8(%rsp)\n \tjmp\t.Lsecond\n .Lfirst_is_float:\n \tmovlpd\t%xmm0, 8(%rsp)\n \n .Lsecond:\n \ttest\t$2, %r11\n-\tjne\t.Lsecond_is_float\t\n+\tjne\t.Lsecond_is_float\n \tmov\t%rdx, 16(%rsp)\n \tjmp\t.Lthird\n .Lsecond_is_float:\n \tmovlpd\t%xmm1, 16(%rsp)\n \n .Lthird:\n \ttest\t$4, %r11\n-\tjne\t.Lthird_is_float\t\n+\tjne\t.Lthird_is_float\n \tmov\t%r8,24(%rsp)\n \tjmp\t.Lfourth\n .Lthird_is_float:\n \tmovlpd\t%xmm2, 24(%rsp)\n \n .Lfourth:\n \ttest\t$8, %r11\n-\tjne\t.Lfourth_is_float\t\n+\tjne\t.Lfourth_is_float\n \tmov\t%r9, 32(%rsp)\n \tjmp\t.Ldone\n .Lfourth_is_float:\n \tmovlpd\t%xmm3, 32(%rsp)\n \n .Ldone:\n-#.ALLOCSTACK 40\n+\t.seh_stackalloc 40\n \tsub\t$40, %rsp\n-#.ENDPROLOG\n+\t.seh_endprologue\n \tmov\t%rax, %rcx\t# context is first parameter\n \tmov\t%rsp, %rdx\t# stack is second parameter\n \tadd\t$48, %rdx\t# point to start of arguments\n \tleaq\tSYMBOL_NAME(ffi_closure_win64_inner)(%rip), %rax\n \tcallq\t*%rax\t\t# call the real closure function\n \tadd\t$40, %rsp\n \tmovq\t%rax, %xmm0\t# If the closure returned a float,\n-                                # ffi_closure_win64_inner wrote it to rax\n+\t\t\t\t# ffi_closure_win64_inner wrote it to rax\n \tretq\n-.ffi_closure_win64_end:\n+\t.seh_endproc\n \n \t.balign 16\n-        .globl\tSYMBOL_NAME(ffi_call_win64)\n+\t.globl\tSYMBOL_NAME(ffi_call_win64)\n+\t.seh_proc SYMBOL_NAME(ffi_call_win64)\n SYMBOL_NAME(ffi_call_win64):\n-        # copy registers onto stack\n+\t# copy registers onto stack\n \tmov\t%r9,32(%rsp)\n \tmov\t%r8,24(%rsp)\n \tmov\t%rdx,16(%rsp)\n \tmov\t%rcx,8(%rsp)\n-        #.PUSHREG rbp\n+\t.seh_pushreg rbp\n \tpush\t%rbp\n-        #.ALLOCSTACK 48\n+\t.seh_stackalloc 48\n \tsub\t$48,%rsp\n-        #.SETFRAME rbp, 32\n+\t.seh_setframe rbp, 32\n \tlea\t32(%rsp),%rbp\n-        #.ENDPROLOG\n+\t.seh_endprologue\n \n \tmov\tCIF_BYTES(%rbp),%eax\n \tadd\t$15, %rax\n@@ -366,61 +393,61 @@ Lch_done:\n .Lret_struct2b:\n \tcmpl\t$FFI_TYPE_SMALL_STRUCT_2B, CIF_FLAGS(%rbp)\n \tjne .Lret_struct1b\n-\t\n+\n \tmov\tRVALUE(%rbp), %rcx\n \tmov\t%ax, (%rcx)\n \tjmp .Lret_void\n-\t\n+\n .Lret_struct1b:\n \tcmpl\t$FFI_TYPE_SMALL_STRUCT_1B, CIF_FLAGS(%rbp)\n \tjne .Lret_uint8\n-\t\n+\n \tmov\tRVALUE(%rbp), %rcx\n \tmov\t%al, (%rcx)\n \tjmp .Lret_void\n \n .Lret_uint8:\n \tcmpl\t$FFI_TYPE_UINT8, CIF_FLAGS(%rbp)\n \tjne .Lret_sint8\n-\t\n-        mov     RVALUE(%rbp), %rcx\n-        movzbq  %al, %rax\n+\n+\tmov     RVALUE(%rbp), %rcx\n+\tmovzbq  %al, %rax\n \tmovq    %rax, (%rcx)\n \tjmp .Lret_void\n \n .Lret_sint8:\n \tcmpl\t$FFI_TYPE_SINT8, CIF_FLAGS(%rbp)\n \tjne .Lret_uint16\n-\t\n-        mov     RVALUE(%rbp), %rcx\n-        movsbq  %al, %rax\n+\n+\tmov     RVALUE(%rbp), %rcx\n+\tmovsbq  %al, %rax\n \tmovq    %rax, (%rcx)\n \tjmp .Lret_void\n \n .Lret_uint16:\n \tcmpl\t$FFI_TYPE_UINT16, CIF_FLAGS(%rbp)\n \tjne .Lret_sint16\n-\t\n-        mov     RVALUE(%rbp), %rcx\n-        movzwq  %ax, %rax\n+\n+\tmov     RVALUE(%rbp), %rcx\n+\tmovzwq  %ax, %rax\n \tmovq    %rax, (%rcx)\n \tjmp .Lret_void\n \n .Lret_sint16:\n \tcmpl\t$FFI_TYPE_SINT16, CIF_FLAGS(%rbp)\n \tjne .Lret_uint32\n-\t\n-        mov     RVALUE(%rbp), %rcx\n-        movswq  %ax, %rax\n+\n+\tmov     RVALUE(%rbp), %rcx\n+\tmovswq  %ax, %rax\n \tmovq    %rax, (%rcx)\n \tjmp .Lret_void\n \n .Lret_uint32:\n \tcmpl\t$FFI_TYPE_UINT32, CIF_FLAGS(%rbp)\n \tjne .Lret_sint32\n-\t\n-        mov     RVALUE(%rbp), %rcx\n-        movl    %eax, %eax\n+\n+\tmov     RVALUE(%rbp), %rcx\n+\tmovl    %eax, %eax\n \tmovq    %rax, (%rcx)\n \tjmp .Lret_void\n \n@@ -443,26 +470,51 @@ Lch_done:\n \n .Lret_double:\n  \tcmpl\t$FFI_TYPE_DOUBLE, CIF_FLAGS(%rbp)\n- \tjne\t.Lret_sint64\n+ \tjne\t.Lret_uint64\n \n  \tmov\tRVALUE(%rbp), %rax\n  \tmovlpd\t%xmm0, (%rax)\n  \tjmp\t.Lret_void\n \n+.Lret_uint64:\n+  \tcmpl\t$FFI_TYPE_UINT64, CIF_FLAGS(%rbp)\n+ \tjne\t.Lret_sint64\n+\n+ \tmov\tRVALUE(%rbp), %rcx\n+ \tmov\t%rax, (%rcx)\n+ \tjmp\t.Lret_void\n+\n .Lret_sint64:\n   \tcmpl\t$FFI_TYPE_SINT64, CIF_FLAGS(%rbp)\n-  \tjne\t.Lret_void\n+  \tjne\t.Lret_pointer\n+\n+ \tmov\tRVALUE(%rbp), %rcx\n+ \tmov\t%rax, (%rcx)\n+ \tjmp\t.Lret_void\n+\n+.Lret_pointer:\n+  \tcmpl\t$FFI_TYPE_POINTER, CIF_FLAGS(%rbp)\n+  \tjne\t.Lret_int\n \n  \tmov\tRVALUE(%rbp), %rcx\n  \tmov\t%rax, (%rcx)\n  \tjmp\t.Lret_void\n-\t\n+\n+.Lret_int:\n+  \tcmpl\t$FFI_TYPE_INT, CIF_FLAGS(%rbp)\n+  \tjne\t.Lret_void\n+\n+\tmov\tRVALUE(%rbp), %rcx\n+\tcltq\n+\tmovq\t%rax, (%rcx)\n+\tjmp\t.Lret_void\n+\n .Lret_void:\n \txor\t%rax, %rax\n \n \tlea\t16(%rbp), %rsp\n \tpop\t%rbp\n \tretq\n-.ffi_call_win64_end:\n+\t.seh_endproc\n #endif /* !_MSC_VER */\n "}, {"sha": "13036945556b2aea4572a4e8ddfd202bd783a9a0", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=54fde020ccdc4bbb163fb6d481743342d9ee2deb", "patch": "@@ -1,3 +1,8 @@\n+2014-05-13  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* unwind-seh.c (_Unwind_Backtrace): Uncommented, finished\n+\timplementation.\n+\n 2014-05-12  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/arm/bpabi-lib.h (License): Add GCC Runtime Library Exception."}, {"sha": "c8187b37a1665a62114757e525a97a1f77a12513", "filename": "libgcc/unwind-seh.c", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libgcc%2Funwind-seh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libgcc%2Funwind-seh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-seh.c?ref=54fde020ccdc4bbb163fb6d481743342d9ee2deb", "patch": "@@ -431,43 +431,40 @@ _Unwind_DeleteException (struct _Unwind_Exception *exc)\n /* Perform stack backtrace through unwind data.  */\n \n _Unwind_Reason_Code\n-_Unwind_Backtrace(_Unwind_Trace_Fn trace ATTRIBUTE_UNUSED,\n-\t\t  void *trace_argument ATTRIBUTE_UNUSED)\n+_Unwind_Backtrace(_Unwind_Trace_Fn trace,\n+\t\t  void *trace_argument)\n {\n-#if 0\n   UNWIND_HISTORY_TABLE ms_history;\n   CONTEXT ms_context;\n   struct _Unwind_Context gcc_context;\n+  DISPATCHER_CONTEXT disp_context;\n \n   memset (&ms_history, 0, sizeof(ms_history));\n   memset (&gcc_context, 0, sizeof(gcc_context));\n+  memset (&disp_context, 0, sizeof(disp_context));\n \n   ms_context.ContextFlags = CONTEXT_ALL;\n   RtlCaptureContext (&ms_context);\n \n-  gcc_context.disp.ContextRecord = &ms_context;\n-  gcc_context.disp.HistoryTable = &ms_history;\n+  gcc_context.disp = &disp_context;\n+  gcc_context.disp->ContextRecord = &ms_context;\n+  gcc_context.disp->HistoryTable = &ms_history;\n \n   while (1)\n     {\n-      gcc_context.disp.ControlPc = ms_context.Rip;\n-      gcc_context.disp.FunctionEntry\n-\t= RtlLookupFunctionEntry (ms_context.Rip, &gcc_context.disp.ImageBase,\n+      gcc_context.disp->ControlPc = ms_context.Rip;\n+      gcc_context.disp->FunctionEntry\n+\t= RtlLookupFunctionEntry (ms_context.Rip, &gcc_context.disp->ImageBase,\n \t\t\t\t  &ms_history);\n \n-      if (gcc_context.disp.FunctionEntry)\n-\t{\n-\t  gcc_context.disp.LanguageHandler\n-\t    = RtlVirtualUnwind (0, gcc_context.disp.ImageBase, ms_context.Rip,\n-\t\t\t\tgcc_context.disp.FunctionEntry, &ms_context,\n-\t\t\t\t&gcc_context.disp.HandlerData,\n-\t\t\t\t&gcc_context.disp.EstablisherFrame, NULL);\n-\t}\n-      else\n-\t{\n-\t  ms_context.Rip = *(ULONG_PTR *)ms_context.Rsp;\n-\t  ms_context.Rsp += 8;\n-\t}\n+      if (!gcc_context.disp->FunctionEntry)\n+\treturn _URC_END_OF_STACK;\n+\n+      gcc_context.disp->LanguageHandler\n+\t= RtlVirtualUnwind (0, gcc_context.disp->ImageBase, ms_context.Rip,\n+\t\t\t    gcc_context.disp->FunctionEntry, &ms_context,\n+\t\t\t    &gcc_context.disp->HandlerData,\n+\t\t\t    &gcc_context.disp->EstablisherFrame, NULL);\n \n       /* Call trace function.  */\n       if (trace (&gcc_context, trace_argument) != _URC_NO_REASON)\n@@ -477,8 +474,5 @@ _Unwind_Backtrace(_Unwind_Trace_Fn trace ATTRIBUTE_UNUSED,\n       if (ms_context.Rip == 0)\n \treturn _URC_END_OF_STACK;\n     }\n-#else\n-  return _URC_END_OF_STACK;\n-#endif\n }\n #endif /* __SEH__  && !defined (__USING_SJLJ_EXCEPTIONS__)  */"}, {"sha": "0bedfed271d2c2d7304a0969610e2d5abd65b756", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=54fde020ccdc4bbb163fb6d481743342d9ee2deb", "patch": "@@ -1,3 +1,12 @@\n+2014-05-13  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tFix current cygwin-64 build problems.\n+\t* configure.host: Added handling for x86_64-*-cygwin/mingw.\t\n+\t* boehm.cc (_Jv_GCAttachThread, _Jv_GCDetachThread): Don't compile if\n+\tGC_WIN32_THREADS is defined.\n+\t* java/lang/natClass.cc (_Jv_InterfaceAssignableFrom): Rename interface\n+\tto source_interface.\n+\n 2014-04-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.ac (THREADLIBS, THREADSPEC): Remove *-*-solaris2.9"}, {"sha": "043fd0030ca620199e26c2939690d52e5d61070f", "filename": "libjava/boehm.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libjava%2Fboehm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libjava%2Fboehm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fboehm.cc?ref=54fde020ccdc4bbb163fb6d481743342d9ee2deb", "patch": "@@ -747,15 +747,17 @@ _Jv_GCAttachThread ()\n   // The registration interface is only defined on posixy systems and\n   // only actually works if pthread_getattr_np is defined.\n   // FIXME: until gc7 it is simpler to disable this on solaris.\n-#if defined(HAVE_PTHREAD_GETATTR_NP) && !defined(GC_SOLARIS_THREADS)\n+#if defined(HAVE_PTHREAD_GETATTR_NP) && !defined(GC_SOLARIS_THREADS) \\\n+    && !defined(GC_WIN32_THREADS)\n   GC_register_my_thread ();\n #endif\n }\n \n void\n _Jv_GCDetachThread ()\n {\n-#if defined(HAVE_PTHREAD_GETATTR_NP) && !defined(GC_SOLARIS_THREADS)\n+#if defined(HAVE_PTHREAD_GETATTR_NP) && !defined(GC_SOLARIS_THREADS) \\\n+    && !defined(GC_WIN32_THREADS)\n   GC_unregister_my_thread ();\n #endif\n }"}, {"sha": "4389fc05507e68dcf1142720392f4dee2ccd39b7", "filename": "libjava/classpath/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libjava%2Fclasspath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libjava%2Fclasspath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FChangeLog?ref=54fde020ccdc4bbb163fb6d481743342d9ee2deb", "patch": "@@ -1,3 +1,9 @@\n+2014-05-13  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tFix current cygwin-64 build problems.\n+\t* native/fdlibm/mprec.c (_REENT_CHECK_MP, _REENT_MP_FREELIST,\n+\t_REENT_MP_P5S, __ULong, __Long): Undefine previous definitions.\n+\n 2013-09-20  Alan Modra  <amodra@gmail.com>\n \n \t* configure: Regenerate."}, {"sha": "460c301054d1e0fbd2ecae9402bfadb937beaa6d", "filename": "libjava/classpath/native/fdlibm/mprec.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libjava%2Fclasspath%2Fnative%2Ffdlibm%2Fmprec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libjava%2Fclasspath%2Fnative%2Ffdlibm%2Fmprec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fnative%2Ffdlibm%2Fmprec.c?ref=54fde020ccdc4bbb163fb6d481743342d9ee2deb", "patch": "@@ -93,12 +93,17 @@\n #define _reent _Jv_reent\n #define _Bigint _Jv_Bigint\n \n+#undef  _REENT_CHECK_MP\n #define _REENT_CHECK_MP(x)\n+#undef  _REENT_MP_FREELIST\n #define _REENT_MP_FREELIST(x) ((x)->_freelist)\n+#undef  _REENT_MP_P5S\n #define _REENT_MP_P5S(x) ((x)->_p5s)\n \n-typedef unsigned long __ULong;\n-typedef long __Long;\n+#undef  __ULong\n+#define __ULong unsigned long\n+#undef  __Long\n+#define __Long long\n \n static void *\n mprec_calloc (void *ignore, size_t x1, size_t x2)"}, {"sha": "c6f359c5492a6d2f7b492138824d4cadb6263c1f", "filename": "libjava/configure.host", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libjava%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libjava%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.host?ref=54fde020ccdc4bbb163fb6d481743342d9ee2deb", "patch": "@@ -365,6 +365,13 @@ EOF\n esac\n \n case \"${host}\" in\n+  x86_64-*-cygwin* | x86_64-*-mingw*)\n+\t# Win32 DLLs are limited to 64k exported symbols each.\n+\tenable_libgcj_sublibs_default=yes\n+\tlibgcj_sublib_ltflags='$(lt_host_flags) \\\n+\t    -Wl,-u,_ZN3org4ietf4jgss10GSSManagerC1Ev,-L..,-lgcj-noncore-dummy'\n+\tlibgcj_sublib_core_extra_deps=libgcj-noncore-dummy.dll.a\n+  ;;\n   *-cygwin* | *-mingw*)\n \tfallback_backtrace_h=sysdep/i386/backtrace.h  \n \t# We need a frame pointer on Windows, so override BACKTRACESPEC"}, {"sha": "00766d0b1029cf833d0618302f7788138a0c8f8b", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fde020ccdc4bbb163fb6d481743342d9ee2deb/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=54fde020ccdc4bbb163fb6d481743342d9ee2deb", "patch": "@@ -1870,9 +1870,9 @@ _Jv_InterfaceAssignableFrom (jclass source, jclass iface)\n {\n   for (int i = 0; i < source->interface_count; i++)\n     {\n-      jclass interface = source->interfaces[i];\n-      if (iface == interface\n-          || _Jv_InterfaceAssignableFrom (interface, iface))\n+      jclass source_interface = source->interfaces[i];\n+      if (iface == source_interface\n+          || _Jv_InterfaceAssignableFrom (source_interface, iface))\n         return true;      \n     }\n     "}]}