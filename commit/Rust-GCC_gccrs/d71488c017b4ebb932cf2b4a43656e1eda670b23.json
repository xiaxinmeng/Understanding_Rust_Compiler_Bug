{"sha": "d71488c017b4ebb932cf2b4a43656e1eda670b23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcxNDg4YzAxN2I0ZWJiOTMyY2YyYjRhNDM2NTZlMWVkYTY3MGIyMw==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2018-06-06T11:49:20Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozefl@gcc.gnu.org", "date": "2018-06-06T11:49:20Z"}, "message": "MSP430: Allow interrupt handlers to be static\n\n\t* gcc/config/msp430/msp430.c (msp430_attr): Allow interrupt handlers\n\tto be static and remove check on interrupt attribute name.\n\n\tgcc/testsuite/gcc.target/msp430/\n\t* function-attributes-4.c: New test.\n\t* static-interrupts.c: New test.\n\nFrom-SVN: r261229", "tree": {"sha": "462308a806f1c8964920dce9f4e931c9209bdc9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/462308a806f1c8964920dce9f4e931c9209bdc9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d71488c017b4ebb932cf2b4a43656e1eda670b23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71488c017b4ebb932cf2b4a43656e1eda670b23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d71488c017b4ebb932cf2b4a43656e1eda670b23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71488c017b4ebb932cf2b4a43656e1eda670b23/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7db54ccd8a2b8a2c89f9cf38f716974aac27fa62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7db54ccd8a2b8a2c89f9cf38f716974aac27fa62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7db54ccd8a2b8a2c89f9cf38f716974aac27fa62"}], "stats": {"total": 163, "additions": 153, "deletions": 10}, "files": [{"sha": "85515d98f98ee1292ccb1681a93e81e7dcba14ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71488c017b4ebb932cf2b4a43656e1eda670b23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71488c017b4ebb932cf2b4a43656e1eda670b23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d71488c017b4ebb932cf2b4a43656e1eda670b23", "patch": "@@ -1,3 +1,12 @@\n+2018-06-06  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* gcc/config/msp430/msp430.c (msp430_attr): Allow interrupt handlers\n+\tto be static and remove check on interrupt attribute name.\n+\n+\tgcc/testsuite/gcc.target/msp430/\n+\t* function-attributes-4.c: New test.\n+\t* static-interrupts.c: New test.\n+\n 2018-06-05  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* doc/extend.texi (PowerPC AltiVec Built-in Functions): Remove"}, {"sha": "90517615bba9b69cea731cd8bef871907b386ece", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71488c017b4ebb932cf2b4a43656e1eda670b23/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71488c017b4ebb932cf2b4a43656e1eda670b23/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=d71488c017b4ebb932cf2b4a43656e1eda670b23", "patch": "@@ -1878,11 +1878,9 @@ msp430_attr (tree * node,\n {\n   gcc_assert (DECL_P (* node));\n \n+  /* Only the interrupt attribute takes an argument.  */\n   if (args != NULL)\n     {\n-      /* Only the interrupt attribute takes an argument.  */\n-      gcc_assert (TREE_NAME_EQ (name, ATTR_INTR));\n-\n       tree value = TREE_VALUE (args);\n \n       switch (TREE_CODE (value))\n@@ -1927,13 +1925,12 @@ msp430_attr (tree * node,\n       if (TREE_CODE (TREE_TYPE (* node)) == FUNCTION_TYPE\n \t  && ! VOID_TYPE_P (TREE_TYPE (TREE_TYPE (* node))))\n \tmessage = \"interrupt handlers must be void\";\n-\n-      if (! TREE_PUBLIC (* node))\n-\tmessage = \"interrupt handlers cannot be static\";\n-\n-      /* Ensure interrupt handlers never get optimised out.  */\n-      TREE_USED (* node) = 1;\n-      DECL_PRESERVE_P (* node) = 1;\n+      else\n+\t{\n+\t  /* Ensure interrupt handlers never get optimised out.  */\n+\t  TREE_USED (* node) = 1;\n+\t  DECL_PRESERVE_P (* node) = 1;\n+\t}\n     }\n   else if (TREE_NAME_EQ (name, ATTR_REENT))\n     {"}, {"sha": "07d13c95ff16b39320eb72b2e7f83cab9bf7efa4", "filename": "gcc/testsuite/gcc.target/msp430/function-attributes-4.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71488c017b4ebb932cf2b4a43656e1eda670b23/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Ffunction-attributes-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71488c017b4ebb932cf2b4a43656e1eda670b23/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Ffunction-attributes-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Ffunction-attributes-4.c?ref=d71488c017b4ebb932cf2b4a43656e1eda670b23", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* Check that the foo interrupt vectors aren't actually removed.  */\n+/* { dg-final { scan-assembler-times \"__interrupt_vector_foo\" 2 } } */\n+\n+/* Check that warnings are emitted when attributes are used incorrectly and\n+   that attributes are interpreted correctly whether leading and trailing\n+   underscores are used or not.  */\n+\n+void __attribute__((__naked__,__reentrant__))\n+fn1(void)\n+{ /* { dg-warning \"naked functions cannot be reentrant\" } */\n+}\n+\n+void __attribute__((naked,reentrant))\n+fn2(void)\n+{ /* { dg-warning \"naked functions cannot be reentrant\" } */\n+}\n+\n+void __attribute__((__reentrant__,__naked__))\n+fn3(void)\n+{ /* { dg-warning \"reentrant functions cannot be naked\" } */\n+}\n+\n+void __attribute__((reentrant,naked))\n+fn4(void)\n+{ /* { dg-warning \"reentrant functions cannot be naked\" } */\n+}\n+\n+void __attribute__((__critical__,__reentrant__))\n+fn5(void)\n+{ /* { dg-warning \"critical functions cannot be reentrant\" } */\n+}\n+\n+void __attribute__((critical,reentrant))\n+fn6(void)\n+{ /* { dg-warning \"critical functions cannot be reentrant\" } */\n+}\n+\n+void __attribute__((__reentrant__,__critical__))\n+fn7(void)\n+{ /* { dg-warning \"reentrant functions cannot be critical\" } */\n+}\n+\n+void __attribute__((reentrant,critical))\n+fn8(void)\n+{ /* { dg-warning \"reentrant functions cannot be critical\" } */\n+}\n+\n+void __attribute__((__critical__,__naked__))\n+fn9(void)\n+{ /* { dg-warning \"critical functions cannot be naked\" } */\n+}\n+\n+void __attribute__((critical,naked))\n+fn10(void)\n+{ /* { dg-warning \"critical functions cannot be naked\" } */\n+}\n+\n+void __attribute__((__naked__,__critical__))\n+fn11(void)\n+{ /* { dg-warning \"naked functions cannot be critical\" } */\n+}\n+\n+void __attribute__((naked,critical))\n+fn12(void)\n+{ /* { dg-warning \"naked functions cannot be critical\" } */\n+}\n+\n+int __attribute__((interrupt))\n+isr1 (void)\n+{ /* { dg-warning \"interrupt handlers must be void\" } */\n+}\n+\n+int __attribute__((__interrupt__))\n+isr2 (void)\n+{ /* { dg-warning \"interrupt handlers must be void\" } */\n+}\n+\n+void __attribute__((interrupt(\"foo1\")))\n+isr3 (void)\n+{ /* { dg-warning \"unrecognized interrupt vector argument\" } */\n+}\n+\n+void __attribute__((__interrupt__(\"foo2\")))\n+isr4 (void)\n+{ /* { dg-warning \"unrecognized.*interrupt vector argument\" } */\n+}\n+\n+void __attribute__((interrupt(65)))\n+isr5 (void)\n+{ /* { dg-warning \"numeric argument of 'interrupt' attribute must be in range 0..63\" } */\n+}\n+\n+void __attribute__((__interrupt__(100)))\n+isr6 (void)\n+{ /* { dg-warning \"numeric argument of 'interrupt' attribute must be in range 0..63\" } */\n+}\n+\n+void __attribute__((interrupt(0.5)))\n+isr7 (void)\n+{ /* { dg-warning \"argument of 'interrupt' attribute is not a string constant or number\" } */\n+  volatile int __attribute__((__naked__))\n+    a; /* { dg-warning \"'naked' attribute only applies to functions\" } */\n+}\n+\n+void __attribute__((__interrupt__(1.5)))\n+isr8 (void)\n+{ /* { dg-warning \"argument of 'interrupt' attribute is not a string constant or number\" } */\n+  volatile int __attribute__((naked))\n+    a; /* { dg-warning \"'naked' attribute only applies to functions\" } */\n+}"}, {"sha": "06d9ea694af557777931b4745118d68c753e1394", "filename": "gcc/testsuite/gcc.target/msp430/static-interrupts.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71488c017b4ebb932cf2b4a43656e1eda670b23/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fstatic-interrupts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71488c017b4ebb932cf2b4a43656e1eda670b23/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fstatic-interrupts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fstatic-interrupts.c?ref=d71488c017b4ebb932cf2b4a43656e1eda670b23", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+/* { dg-final { scan-assembler-times \"__interrupt_vector_\" 4 } } */\n+\n+/* Test that interrupts aren't optimised out and that \"__interrupt__\" and\n+   \"interrupt\" can be used interchangeably.  */\n+\n+static void __attribute__((interrupt(1)))\n+isr_static (void)\n+{\n+}\n+\n+static void __attribute__((__interrupt__(2)))\n+isr_static_alt (void)\n+{\n+}\n+\n+void __attribute__((interrupt(3)))\n+isr_global (void)\n+{\n+}\n+\n+void __attribute__((__interrupt__(4)))\n+isr_global_alt (void)\n+{\n+}"}]}