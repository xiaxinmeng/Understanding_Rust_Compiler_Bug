{"sha": "758ad97333838b7e5e839100a927b6cadbd030d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU4YWQ5NzMzMzgzOGI3ZTVlODM5MTAwYTkyN2I2Y2FkYmQwMzBkMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-06-14T10:46:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-06-14T10:46:14Z"}, "message": "[multiple changes]\n\n2012-06-14  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch9.adb: Minor reformatting.\n\n2012-06-14  Thomas Quinot  <quinot@adacore.com>\n\n\t* freeze.adb (Freeze_Record_Type): Warn about useless bit order\n\tspecification [when there's no component clause] regardless\n\tof whether the specified bit order is reversed or not.\n\n2012-06-14  Tristan Gingold  <gingold@adacore.com>\n\n\t* raise-gcc.c (__gnat_personality_seh0): New function.\n\n2012-06-14  Tristan Gingold  <gingold@adacore.com>\n\n\t* gnatname.adb (Gnatname): Make sure that dynamic table\n\targument_data is initialized.\n\n2012-06-14  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_aux.adb: Minor code reorganization.\n\nFrom-SVN: r188608", "tree": {"sha": "8022f62e88e8a45e5256b4ea139d3f253429a975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8022f62e88e8a45e5256b4ea139d3f253429a975"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/758ad97333838b7e5e839100a927b6cadbd030d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/758ad97333838b7e5e839100a927b6cadbd030d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/758ad97333838b7e5e839100a927b6cadbd030d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/758ad97333838b7e5e839100a927b6cadbd030d3/comments", "author": null, "committer": null, "parents": [{"sha": "34f3a7014b95e058d68adc1bee2e357e38056dec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f3a7014b95e058d68adc1bee2e357e38056dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34f3a7014b95e058d68adc1bee2e357e38056dec"}], "stats": {"total": 75, "additions": 59, "deletions": 16}, "files": [{"sha": "3efe1d536d27990d3fa6545a372e0295b52061f7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/758ad97333838b7e5e839100a927b6cadbd030d3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/758ad97333838b7e5e839100a927b6cadbd030d3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=758ad97333838b7e5e839100a927b6cadbd030d3", "patch": "@@ -1,3 +1,26 @@\n+2012-06-14  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch9.adb: Minor reformatting.\n+\n+2012-06-14  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* freeze.adb (Freeze_Record_Type): Warn about useless bit order\n+\tspecification [when there's no component clause] regardless\n+\tof whether the specified bit order is reversed or not.\n+\n+2012-06-14  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* raise-gcc.c (__gnat_personality_seh0): New function.\n+\n+2012-06-14  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* gnatname.adb (Gnatname): Make sure that dynamic table\n+\targument_data is initialized.\n+\n+2012-06-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_aux.adb: Minor code reorganization.\n+\n 2012-06-14  Vincent Pucci  <pucci@adacore.com>\n \n \t* einfo.adb einfo.ads (Get_Rep_Item): Removed."}, {"sha": "c340baf85d893285f1f4b615a3c093b4139e25a0", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/758ad97333838b7e5e839100a927b6cadbd030d3/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/758ad97333838b7e5e839100a927b6cadbd030d3/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=758ad97333838b7e5e839100a927b6cadbd030d3", "patch": "@@ -13668,7 +13668,7 @@ package body Exp_Ch9 is\n       Args := New_List;\n \n       --  Priority parameter. Set to Unspecified_Priority unless there is a\n-      --  priority rep item, in which case we take the value from the rep item.\n+      --  Priority rep item, in which case we take the value from the rep item.\n \n       if Has_Rep_Item (Ttyp, Name_Priority) then\n          Append_To (Args,"}, {"sha": "e58dac5a589437354fd19444c474bc11a4f47312", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/758ad97333838b7e5e839100a927b6cadbd030d3/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/758ad97333838b7e5e839100a927b6cadbd030d3/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=758ad97333838b7e5e839100a927b6cadbd030d3", "patch": "@@ -2168,20 +2168,23 @@ package body Freeze is\n \n          --  Deal with Bit_Order aspect specifying a non-default bit order\n \n-         if Reverse_Bit_Order (Rec) and then Base_Type (Rec) = Rec then\n+         ADC :=\n+           Get_Attribute_Definition_Clause (Rec, Attribute_Bit_Order);\n+\n+         if Present (ADC) and then Base_Type (Rec) = Rec then\n             if not Placed_Component then\n-               ADC :=\n-                 Get_Attribute_Definition_Clause (Rec, Attribute_Bit_Order);\n                Error_Msg_N (\"?bit order specification has no effect\", ADC);\n                Error_Msg_N\n                  (\"\\?since no component clauses were specified\", ADC);\n \n             --  Here is where we do the processing for reversed bit order\n \n-            elsif not Reverse_Storage_Order (Rec) then\n+            elsif Reverse_Bit_Order (Rec)\n+                    and then not Reverse_Storage_Order (Rec)\n+            then\n                Adjust_Record_For_Reverse_Bit_Order (Rec);\n \n-            --  Case where we have both a reverse Bit_Order and a corresponding\n+            --  Case where we have both an explicit Bit_Order and the same\n             --  Scalar_Storage_Order: leave record untouched, the back-end\n             --  will take care of required layout conversions.\n "}, {"sha": "68375ef21db4edcddf86264da19231fdf16881c5", "filename": "gcc/ada/gnatname.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/758ad97333838b7e5e839100a927b6cadbd030d3/gcc%2Fada%2Fgnatname.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/758ad97333838b7e5e839100a927b6cadbd030d3/gcc%2Fada%2Fgnatname.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatname.adb?ref=758ad97333838b7e5e839100a927b6cadbd030d3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -575,7 +575,15 @@ begin\n    --  Initialize tables\n \n    Arguments.Set_Last (0);\n-   Arguments.Increment_Last;\n+   declare\n+      New_Arguments : Argument_Data;\n+      pragma Warnings (Off, New_Arguments);\n+      --  Declaring this defaulted initialized object ensures\n+      --  that the new allocated component of table Arguments\n+      --  is correctly initialized.\n+   begin\n+      Arguments.Append (New_Arguments);\n+   end;\n    Patterns.Init (Arguments.Table (1).Directories);\n    Patterns.Set_Last (Arguments.Table (1).Directories, 0);\n    Patterns.Init (Arguments.Table (1).Name_Patterns);"}, {"sha": "1cfb622434951460f3efa7b1165fd3bb537b3bef", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/758ad97333838b7e5e839100a927b6cadbd030d3/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/758ad97333838b7e5e839100a927b6cadbd030d3/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=758ad97333838b7e5e839100a927b6cadbd030d3", "patch": "@@ -1026,6 +1026,8 @@ extern void __gnat_notify_unhandled_exception (void);\n \n #ifdef __USING_SJLJ_EXCEPTIONS__\n #define PERSONALITY_FUNCTION    __gnat_personality_sj0\n+#elif defined(__SEH__)\n+#define PERSONALITY_FUNCTION    __gnat_personality_imp\n #else\n #define PERSONALITY_FUNCTION    __gnat_personality_v0\n #endif\n@@ -1061,6 +1063,9 @@ typedef int version_arg_t;\n typedef _Unwind_Action phases_arg_t;\n #endif\n \n+#ifdef __SEH__\n+static\n+#endif\n _Unwind_Reason_Code\n PERSONALITY_FUNCTION (version_arg_t, phases_arg_t,\n                       _Unwind_Exception_Class, _Unwind_Exception *,\n@@ -1208,6 +1213,16 @@ __gnat_Unwind_ForcedUnwind (_Unwind_Exception *e,\n \n #endif /* __USING_SJLJ_EXCEPTIONS__ */\n \n+#ifdef __SEH__\n+EXCEPTION_DISPOSITION\n+__gnat_personality_seh0 (PEXCEPTION_RECORD ms_exc, void *this_frame,\n+\t\t\t PCONTEXT ms_orig_context,\n+\t\t\t PDISPATCHER_CONTEXT ms_disp)\n+{\n+  return _GCC_specific_handler (ms_exc, this_frame, ms_orig_context,\n+\t\t\t\tms_disp, __gnat_personality_imp);\n+}\n+#endif /* SEH */\n #else\n /* ! IN_RTS  */\n "}, {"sha": "d729519003e761d2f3c16445e537e6b012b6f199", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/758ad97333838b7e5e839100a927b6cadbd030d3/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/758ad97333838b7e5e839100a927b6cadbd030d3/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=758ad97333838b7e5e839100a927b6cadbd030d3", "patch": "@@ -464,10 +464,7 @@ package body Sem_Aux is\n                 or else (Nam = Name_Priority\n                           and then Chars (N) = Name_Interrupt_Priority))\n          then\n-            if Check_Parents then\n-               return N;\n-\n-            elsif Entity (N) = E then\n+            if Check_Parents or else Entity (N) = E then\n                return N;\n             end if;\n \n@@ -524,10 +521,7 @@ package body Sem_Aux is\n                   --  This node represents the parent type of type E (if any)\n \n                begin\n-                  if No (Par) then\n-                     return N;\n-\n-                  elsif not Present_In_Rep_Item (Par, N) then\n+                  if No (Par) or else not Present_In_Rep_Item (Par, N) then\n                      return N;\n                   end if;\n                end;"}]}