{"sha": "09b893bba75609fa03a01600d46b001c288ba2f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDliODkzYmJhNzU2MDlmYTAzYTAxNjAwZDQ2YjAwMWMyODhiYTJmOA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "1999-04-02T13:46:46Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-04-02T13:46:46Z"}, "message": "pdp11.c: Include \"recog.h\".\n\n        * pdp11.c: Include \"recog.h\".\n        (output_functip', `notice_update_cc_on_set', `output_ascii',\n        `output_function_epilogue', `output_function_prologue',\n        `print_operand_address', `register_move_cost',\n        `simple_memory_operand'.\n        (HARD_REGNO_MODE_OK): Parenthesise `REGNO' arg.\n        (REGNO_REG_CLASS): Likewise.\n        * pdp11.md: Add explicit `int' to `static count' (in two places).\n        (addhi3): Add explicit braces to avoid ambiguous else.\n        (addqi3): Likewise.\n        (ashlhi3): Likewise.\n\nFrom-SVN: r26125", "tree": {"sha": "774afedb09cf6fee1ca69d6d228d22f94f627f9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/774afedb09cf6fee1ca69d6d228d22f94f627f9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09b893bba75609fa03a01600d46b001c288ba2f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09b893bba75609fa03a01600d46b001c288ba2f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09b893bba75609fa03a01600d46b001c288ba2f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09b893bba75609fa03a01600d46b001c288ba2f8/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8b9243df2730d2a30ea55ee3e254134026cfce4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9243df2730d2a30ea55ee3e254134026cfce4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b9243df2730d2a30ea55ee3e254134026cfce4c"}], "stats": {"total": 88, "additions": 64, "deletions": 24}, "files": [{"sha": "b54560951fc5cfb69758d2560f27ce6180909b73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b893bba75609fa03a01600d46b001c288ba2f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b893bba75609fa03a01600d46b001c288ba2f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09b893bba75609fa03a01600d46b001c288ba2f8", "patch": "@@ -1,3 +1,27 @@\n+1999-04-02  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* pdp11.c: Include \"recog.h\".\n+\t(output_function_prologue): Remove unused variables `nregs', `i',\n+\t`offset'.\n+\t(output_function_epilogue): Remove unused variables\n+\t`may_call_alloca', `nregs', `regno', `adjust_fp'.\n+\t(output_ascii): Mark as returning void.\n+\t(print_operand_address: Likewise.\n+\t(simple_memory_operand): Remove unused variables `plus0', `plus1',\n+\t`offset'.\n+\t* pdp11.h: Declare functions `arith_operand',\n+\t`const_immediate_operand', `expand_shift_operand',\n+\t`legitimate_address_p', `notice_update_cc_on_set', `output_ascii',\n+\t`output_function_epilogue', `output_function_prologue',\n+\t`print_operand_address', `register_move_cost',\n+\t`simple_memory_operand'.\n+\t(HARD_REGNO_MODE_OK): Parenthesise `REGNO' arg.\n+\t(REGNO_REG_CLASS): Likewise.\n+\t* pdp11.md: Add explicit `int' to `static count' (in two places).\n+\t(addhi3): Add explicit braces to avoid ambiguous else.\n+\t(addqi3): Likewise.\n+\t(ashlhi3): Likewise.\n+\n Fri Apr  2 14:17:10 1999  Jerry James <jerry@cs.ucsb.edu>\n \n \t* gcc/invoke.texi: Add documentation for additional supported"}, {"sha": "8ca31d684307ed9452e550133dc2b9488a52bb5d", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b893bba75609fa03a01600d46b001c288ba2f8/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b893bba75609fa03a01600d46b001c288ba2f8/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=09b893bba75609fa03a01600d46b001c288ba2f8", "patch": "@@ -31,6 +31,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"insn-attr.h\"\n #include \"flags.h\"\n+#include \"recog.h\"\n \n /*\n #define FPU_REG_P(X)\t((X)>=8 && (X)<14)\n@@ -97,8 +98,7 @@ output_function_prologue(stream, size)\n   int size;\n {\t\t\t\t\t\t\t       \n     int fsize = ((size) + 1) & ~1;      \t\t\t\t\n-    int regno, nregs, i;\t\t\t\t\t\t\n-    int offset = 0;\n+    int regno;\n \n     int via_ac = -1;\n     \n@@ -192,10 +192,8 @@ output_function_epilogue(stream, size)\n   FILE *stream;\n   int size;\n {\t\t\t\t\t\t\t\t\n-    extern int may_call_alloca;\n-\n     int fsize = ((size) + 1) & ~1;      \t\t\t\t\n-    int nregs, regno, i, j, k, adjust_fp;\t\t\t\t\n+    int i, j, k;\n \n     int via_ac;\n     \n@@ -735,6 +733,7 @@ find_addr_reg (addr)\n }\n \f\n /* Output an ascii string.  */\n+void\n output_ascii (file, p, size)\n      FILE *file;\n      char *p;\n@@ -769,6 +768,7 @@ output_ascii (file, p, size)\n \n /* --- stole from out-vax, needs changes */\n \n+void\n print_operand_address (file, addr)\n      FILE *file;\n      register rtx addr;\n@@ -1039,8 +1039,7 @@ int simple_memory_operand(op, mode)\n   rtx op;\n   enum machine_mode mode;\n {\n-    rtx addr, plus0, plus1;\n-    int offset = 0;\n+    rtx addr;\n \n     /* Eliminate non-memory operations */\n     if (GET_CODE (op) != MEM)"}, {"sha": "7cb73602fbe4bd1051a7bc379400ad3a51aea9f5", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b893bba75609fa03a01600d46b001c288ba2f8/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b893bba75609fa03a01600d46b001c288ba2f8/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=09b893bba75609fa03a01600d46b001c288ba2f8", "patch": "@@ -21,10 +21,21 @@ Boston, MA 02111-1307, USA.  */\n \n \n /* declarations */\n+int arith_operand ();\n+int const_immediate_operand ();\n+int expand_shift_operand ();\n+int legitimate_address_p ();\n+void notice_update_cc_on_set ();\n+void output_ascii ();\n+void output_function_epilogue ();\n+void output_function_prologue ();\n char *output_jump();\n char *output_move_double();\n char *output_move_quad();\n char *output_block_move();\n+void print_operand_address ();\n+int register_move_cost ();\n+int simple_memory_operand ();\n \n /* check whether load_fpu_reg or not */\n #define LOAD_FPU_REG_P(x) ((x)>=8 && (x)<=11)\n@@ -289,9 +300,9 @@ extern int target_flags;\n    FPU can only hold DF - simplifies life!\n */\n #define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n-((REGNO < 8)?\t\t\t\t\t\t\\\n+(((REGNO) < 8)?\t\t\t\t\t\t\\\n   ((GET_MODE_BITSIZE(MODE) <= 16) \t\t\t\\\n-   || (GET_MODE_BITSIZE(MODE) == 32 && !(REGNO & 1)))\t\\\n+   || (GET_MODE_BITSIZE(MODE) == 32 && !((REGNO) & 1)))\t\\\n   :(MODE) == DFmode)\n     \n \n@@ -395,7 +406,7 @@ enum reg_class { NO_REGS, MUL_REGS, GENERAL_REGS, LOAD_FPU_REGS, NO_LOAD_FPU_REG\n    or could index an array.  */\n \n #define REGNO_REG_CLASS(REGNO) \t\t\\\n-((REGNO)>=8?((REGNO)<=11?LOAD_FPU_REGS:NO_LOAD_FPU_REGS):((REGNO&1)?MUL_REGS:GENERAL_REGS))\n+((REGNO)>=8?((REGNO)<=11?LOAD_FPU_REGS:NO_LOAD_FPU_REGS):(((REGNO)&1)?MUL_REGS:GENERAL_REGS))\n \n \n /* The class value for index registers, and the one for base regs.  */"}, {"sha": "1980e45e6ace4b91b95676da6f5be8cf147c9149", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b893bba75609fa03a01600d46b001c288ba2f8/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b893bba75609fa03a01600d46b001c288ba2f8/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=09b893bba75609fa03a01600d46b001c288ba2f8", "patch": "@@ -878,7 +878,7 @@\n   \"(! TARGET_40_PLUS)\"\n   \"*\n {\n-  static count = 0;\n+  static int count = 0;\n   char buf[100];\n   rtx lateoperands[2];\n \n@@ -1041,10 +1041,12 @@\n   \"*\n {\n   if (GET_CODE (operands[2]) == CONST_INT)\n-    if (INTVAL(operands[2]) == 1)\n-      return \\\"inc %0\\\";\n-    else if (INTVAL(operands[2]) == -1)\n-      return \\\"dec %0\\\";\n+    {\n+      if (INTVAL(operands[2]) == 1)\n+\treturn \\\"inc %0\\\";\n+      else if (INTVAL(operands[2]) == -1)\n+        return \\\"dec %0\\\";\n+    }\n \n   return \\\"add %2, %0\\\";\n }\"\n@@ -1058,10 +1060,12 @@\n   \"*\n {\n   if (GET_CODE (operands[2]) == CONST_INT)\n-    if (INTVAL(operands[2]) == 1)\n-      return \\\"incb %0\\\";\n-    else if (INTVAL(operands[2]) == -1)\n-      return \\\"decb %0\\\";\n+    {\n+      if (INTVAL(operands[2]) == 1)\n+\treturn \\\"incb %0\\\";\n+      else if (INTVAL(operands[2]) == -1)\n+\treturn \\\"decb %0\\\";\n+    }\n \n   return \\\"addb %2, %0\\\";\n }\"\n@@ -1520,10 +1524,12 @@\n   \"*\n {\n   if (GET_CODE(operands[2]) == CONST_INT)\n-    if (INTVAL(operands[2]) == 1)\n-      return \\\"asl %0\\\";\n-    else if (INTVAL(operands[2]) == -1)\n-      return \\\"asr %0\\\";\n+    {\n+      if (INTVAL(operands[2]) == 1)\n+\treturn \\\"asl %0\\\";\n+      else if (INTVAL(operands[2]) == -1)\n+\treturn \\\"asr %0\\\";\n+    }\n \n   return \\\"ash %2,%0\\\";\n }\"\n@@ -1563,7 +1569,7 @@\n   \"TARGET_ABSHI_BUILTIN\"\n   \"*\n {\n-  static count = 0;\n+  static int count = 0;\n   char buf[200];\n \t\n   output_asm_insn(\\\"tst %0\\\", operands);"}]}