{"sha": "96cd90694f7fb6a803648bf705858c94ca9a84df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZjZDkwNjk0ZjdmYjZhODAzNjQ4YmY3MDU4NThjOTRjYTlhODRkZg==", "commit": {"author": {"name": "Stephane Carrez", "email": "stcarrez@nerim.fr", "date": "2003-04-12T15:14:26Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2003-04-12T15:14:26Z"}, "message": "m68hc11.h (TARGET_SWITCHES): Fix -mnominmax option; recognize -mnorelax.\n\n\t* config/m68hc11/m68hc11.h (TARGET_SWITCHES): Fix -mnominmax option;\n\trecognize -mnorelax.\n\t(reg_class): Add Z_OR_S_REGS to represent soft registers with Z\n\t(REG_CLASS_NAMES): Add its name.\n\t(REG_CLASS_CONTENTS): Define its content.\n\nFrom-SVN: r65511", "tree": {"sha": "a2452f1a2e20d3df1b1154a6aca74bf32018b2cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2452f1a2e20d3df1b1154a6aca74bf32018b2cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96cd90694f7fb6a803648bf705858c94ca9a84df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96cd90694f7fb6a803648bf705858c94ca9a84df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96cd90694f7fb6a803648bf705858c94ca9a84df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96cd90694f7fb6a803648bf705858c94ca9a84df/comments", "author": null, "committer": null, "parents": [{"sha": "c364c3a60d307e78cba573820bfb31b07055d59d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c364c3a60d307e78cba573820bfb31b07055d59d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c364c3a60d307e78cba573820bfb31b07055d59d"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "f5f58ed38ca431081867277d3aa00241eeff4522", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96cd90694f7fb6a803648bf705858c94ca9a84df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96cd90694f7fb6a803648bf705858c94ca9a84df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96cd90694f7fb6a803648bf705858c94ca9a84df", "patch": "@@ -1,3 +1,11 @@\n+2003-04-12  Stephane Carrez  <stcarrez@nerim.fr>\n+\n+\t* config/m68hc11/m68hc11.h (TARGET_SWITCHES): Fix -mnominmax option;\n+\trecognize -mnorelax.\n+\t(reg_class): Add Z_OR_S_REGS to represent soft registers with Z\n+\t(REG_CLASS_NAMES): Add its name.\n+\t(REG_CLASS_CONTENTS): Define its content.\n+\n 2003-04-12  Stephane Carrez  <stcarrez@nerim.fr>\n \n \t* config/m68hc11/larith.asm (memcpy): Use ARG macro to access stack"}, {"sha": "cb689cc6454f6bceb78846b5f904c506d2db5e4a", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96cd90694f7fb6a803648bf705858c94ca9a84df/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96cd90694f7fb6a803648bf705858c94ca9a84df/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=96cd90694f7fb6a803648bf705858c94ca9a84df", "patch": "@@ -181,16 +181,18 @@ extern short *reg_renumber;\t/* def in local_alloc.c */\n     N_(\"Auto pre/post decrement increment allowed\")},\t\t\\\n   { \"noauto-incdec\", - MASK_AUTO_INC_DEC,\t\t\t\\\n     N_(\"Auto pre/post decrement increment not allowed\")},\t\\\n-  { \"inmax\", MASK_MIN_MAX,                                     \\\n+  { \"inmax\", MASK_MIN_MAX,                                      \\\n     N_(\"Min/max instructions allowed\")},                        \\\n-  { \"nominmax\", MASK_MIN_MAX,                                   \\\n+  { \"nominmax\", - MASK_MIN_MAX,                                 \\\n     N_(\"Min/max instructions not allowed\")},                    \\\n   { \"long-calls\", MASK_LONG_CALLS,\t\t\t\t\\\n     N_(\"Use call and rtc for function calls and returns\")},\t\\\n   { \"nolong-calls\", - MASK_LONG_CALLS,\t\t\t\t\\\n     N_(\"Use jsr and rts for function calls and returns\")},\t\\\n   { \"relax\", MASK_NO_DIRECT_MODE,                               \\\n     N_(\"Do not use direct addressing mode for soft registers\")},\\\n+  { \"norelax\", -MASK_NO_DIRECT_MODE,                            \\\n+    N_(\"Use direct addressing mode for soft registers\")},       \\\n   { \"68hc11\", MASK_M6811,\t\t\t\t\t\\\n     N_(\"Compile for a 68HC11\")},\t\t\t\t\\\n   { \"68hc12\", MASK_M6812,\t\t\t\t\t\\\n@@ -576,6 +578,7 @@ enum reg_class\n   D_OR_S_REGS,\t\t\t/* 16-bit soft register or D register */\n   X_OR_S_REGS,\t\t\t/* 16-bit soft register or X register */\n   Y_OR_S_REGS,\t\t\t/* 16-bit soft register or Y register */\n+  Z_OR_S_REGS,\t\t\t/* 16-bit soft register or Z register */\n   SP_OR_S_REGS,\t\t\t/* 16-bit soft register or SP register */\n   D_OR_X_OR_S_REGS,\t\t/* 16-bit soft register or D or X register */\n   D_OR_Y_OR_S_REGS,\t\t/* 16-bit soft register or D or Y register */\n@@ -622,6 +625,7 @@ enum reg_class\n       \"D_OR_S_REGS\",                            \\\n       \"X_OR_S_REGS\",                            \\\n       \"Y_OR_S_REGS\",                            \\\n+      \"Z_OR_S_REGS\",                            \\\n       \"SP_OR_S_REGS\",                           \\\n       \"D_OR_X_OR_S_REGS\",                       \\\n       \"D_OR_Y_OR_S_REGS\",                       \\\n@@ -690,6 +694,7 @@ enum reg_class\n /* D_OR_S_REGS */\t { 0xFFFFDE02, 0x00007FFF }, /* D _.D */        \\\n /* X_OR_S_REGS */\t { 0xFFFFDE01, 0x00007FFF }, /* X _.D */        \\\n /* Y_OR_S_REGS */\t { 0xFFFFDE04, 0x00007FFF }, /* Y _.D */        \\\n+/* Z_OR_S_REGS */\t { 0xFFFFDF00, 0x00007FFF }, /* Z _.D */        \\\n /* SP_OR_S_REGS */\t { 0xFFFFDE08, 0x00007FFF }, /* SP _.D */\t\\\n /* D_OR_X_OR_S_REGS */\t { 0xFFFFDE03, 0x00007FFF }, /* D X _.D */      \\\n /* D_OR_Y_OR_S_REGS */\t { 0xFFFFDE06, 0x00007FFF }, /* D Y _.D */      \\"}]}