{"sha": "4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ0YjhjYjljMGY4MmMyMjI1MjAxOGIxYjI1Y2Q4YjNjNjMxNjZiMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-09-04T16:07:50Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-09-04T16:07:50Z"}, "message": "re PR middle-end/29478 (optimization generates warning for casts)\n\n\n\t* gcc.dg/tree-ssa/loadpre8.c: Disable inlining.\n\t* gcc.dg/tree-ssa/pr27236.c: Likewise.\n\t* gcc.dg/tree-ssa/predcom-1.c: Likewise.\n\t* gcc.dg/tree-ssa/predcom-2.c: Likewise.\n\t* gcc.dg/tree-ssa/flatten-2.c: Avoid overactive tail call ellim.\n\t* gcc.dg/tree-ssa/loadpre5.c: Likewise.\n\t* gcc.dg/vect/costmodel/i386/costmodel-fast-math-vect-pr29925.c:\n\tLikewise.\n\t* invoke.texi (-finline-small-functions): Document.\n\t* ipa-inline.c (cgraph_default_inline_p): Do not use DECL_INLINE\n\twhen deciding what is inlinable.\n\t(cgraph_decide_recursive_inlining): Handle flag_inline_functions.\n\t(cgraph_decide_inlining_of_small_function): Handle new flags.\n\t(cgraph_decide_inlining_incrementally): Likewise.\n\t* opts.c (decode_options): Enable flag_inline_small_functions at -O2\n\t* common.opt (finline-small-functions): New.\n\t* Makefile.in (build/gengtype.o-warn): Work around PR29478\n\nFrom-SVN: r128092", "tree": {"sha": "75c149d77b7daa8ab6ece4c2f7b9b97094602534", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75c149d77b7daa8ab6ece4c2f7b9b97094602534"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/comments", "author": null, "committer": null, "parents": [{"sha": "4c5bae34c163fa87e5c137e71d4be728d4b21291", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c5bae34c163fa87e5c137e71d4be728d4b21291", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c5bae34c163fa87e5c137e71d4be728d4b21291"}], "stats": {"total": 89, "additions": 78, "deletions": 11}, "files": [{"sha": "7cbdf9aebbdcd08272cc331a4560e82b9f8be655", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3", "patch": "@@ -1,3 +1,15 @@\n+2007-09-04  Jan Hubicka  <jh@suse.cz>\n+\n+\t* invoke.texi (-finline-small-functions): Document.\n+\t* ipa-inline.c (cgraph_default_inline_p): Do not use DECL_INLINE\n+\twhen deciding what is inlinable.\n+\t(cgraph_decide_recursive_inlining): Handle flag_inline_functions.\n+\t(cgraph_decide_inlining_of_small_function): Handle new flags.\n+\t(cgraph_decide_inlining_incrementally): Likewise.\n+\t* opts.c (decode_options): Enable flag_inline_small_functions at -O2\n+\t* common.opt (finline-small-functions): New.\n+\t* Makefile.in (build/gengtype.o-warn): Work around PR29478\n+\n 2007-09-04  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-operands.c (add_virtual_operand): Only mark"}, {"sha": "3f44ba8f1b87b805aa4a491d66581c7097dd7d22", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3", "patch": "@@ -562,6 +562,10 @@ finline\n Common Report Var(flag_no_inline,0) Init(2)\n Pay attention to the \\\"inline\\\" keyword\n \n+finline-small-functions\n+Common Report Var(flag_inline_small_functions) Optimization\n+Integrate simple functions into their callers when code size is known to not growth\n+\n finline-functions\n Common Report Var(flag_inline_functions) Optimization\n Integrate simple functions into their callers"}, {"sha": "9164078b75f5b959749fd0d0778615106c52a0b3", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3", "patch": "@@ -328,7 +328,7 @@ Objective-C and Objective-C++ Dialects}.\n -fgcse  -fgcse-lm  -fgcse-sm  -fgcse-las  -fgcse-after-reload @gol\n -fcrossjumping  -fif-conversion  -fif-conversion2 @gol\n -finline-functions  -finline-functions-called-once @gol\n--finline-limit=@var{n}  -fkeep-inline-functions @gol\n+-finline-small-functions -finline-limit=@var{n}  -fkeep-inline-functions @gol\n -fkeep-static-consts  -fmerge-constants  -fmerge-all-constants @gol\n -fmodulo-sched -fmodulo-sched-allow-regmoves -fno-branch-count-reg @gol\n -fno-default-inline  -fno-defer-pop -fmove-loop-invariants @gol\n@@ -5033,6 +5033,7 @@ compilation time.\n -ftree-fre @gol\n -ftree-ch @gol\n -funit-at-a-time @gol\n+-finline-small-functions @gol\n -fmerge-constants}\n \n @option{-O} also turns on @option{-fomit-frame-pointer} on machines\n@@ -5172,6 +5173,15 @@ Don't pay attention to the @code{inline} keyword.  Normally this option\n is used to keep the compiler from expanding any functions inline.\n Note that if you are not optimizing, no functions can be expanded inline.\n \n+@item -finline-small-functions\n+@opindex finline-small-functions\n+Integrate functions into their callers when their body is smaller than expected\n+function call code (so overall size of program gets smaller).  The compiler\n+heuristically decides which functions are simple enough to be worth integrating\n+in this way.\n+\n+Enabled at level @option{-O2}.\n+\n @item -finline-functions\n @opindex finline-functions\n Integrate all simple functions into their callers.  The compiler"}, {"sha": "2ea5f73cdc92274711d879008e7b330ca43572cb", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3", "patch": "@@ -404,10 +404,10 @@ cgraph_default_inline_p (struct cgraph_node *n, const char **reason)\n \n   if (n->inline_decl)\n     decl = n->inline_decl;\n-  if (!DECL_INLINE (decl))\n+  if (!flag_inline_small_functions && !DECL_DECLARED_INLINE_P (decl))\n     {\n       if (reason)\n-\t*reason = N_(\"function not inlinable\");\n+\t*reason = N_(\"function not inline candidate\");\n       return false;\n     }\n \n@@ -666,7 +666,8 @@ cgraph_decide_recursive_inlining (struct cgraph_node *node)\n   int depth = 0;\n   int n = 0;\n \n-  if (optimize_size)\n+  if (optimize_size\n+      || (!flag_inline_functions && !DECL_DECLARED_INLINE_P (node->decl)))\n     return false;\n \n   if (DECL_DECLARED_INLINE_P (node->decl))\n@@ -863,6 +864,7 @@ cgraph_decide_inlining_of_small_functions (void)\n       struct cgraph_node *where;\n       int growth =\n \tcgraph_estimate_size_after_inlining (1, edge->caller, edge->callee);\n+      const char *not_good = NULL;\n \n       growth -= edge->caller->global.insns;\n \n@@ -916,13 +918,19 @@ cgraph_decide_inlining_of_small_functions (void)\n \t    }\n \t}\n \n-      if ((!cgraph_maybe_hot_edge_p (edge) || optimize_size) && growth > 0)\n+      if (!cgraph_maybe_hot_edge_p (edge))\n+ \tnot_good = N_(\"call is unlikely and code size would grow\");\n+      if (!flag_inline_functions\n+\t  && !DECL_DECLARED_INLINE_P (edge->callee->decl))\n+ \tnot_good = N_(\"function not declared inline and code size would grow\");\n+      if (optimize_size)\n+ \tnot_good = N_(\"optimizing for size and code size would grow\");\n+      if (not_good && growth > 0)\n \t{\n           if (!cgraph_recursive_inlining_p (edge->caller, edge->callee,\n \t\t\t\t            &edge->inline_failed))\n \t    {\n-\t      edge->inline_failed = \n-\t\tN_(\"call is unlikely\");\n+\t      edge->inline_failed = not_good;\n \t      if (dump_file)\n \t\tfprintf (dump_file, \" inline_failed:%s.\\n\", edge->inline_failed);\n \t    }\n@@ -1363,7 +1371,9 @@ cgraph_decide_inlining_incrementally (struct cgraph_node *node,\n \t/* When the function body would grow and inlining the function won't\n \t   eliminate the need for offline copy of the function, don't inline.\n \t */\n-\tif (mode == INLINE_SIZE\n+\tif ((mode == INLINE_SIZE\n+\t     || (!flag_inline_functions\n+\t\t && !DECL_DECLARED_INLINE_P (e->callee->decl)))\n \t    && (cgraph_estimate_size_after_inlining (1, e->caller, e->callee)\n \t\t> e->caller->global.insns)\n \t    && cgraph_estimate_growth (e->callee) > 0)"}, {"sha": "f6c749f32c86ef48d6a69fcb54e266998a072643", "filename": "gcc/opts.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3", "patch": "@@ -353,6 +353,7 @@ static bool profile_arc_flag_set, flag_profile_values_set;\n static bool flag_unroll_loops_set, flag_tracer_set;\n static bool flag_value_profile_transformations_set;\n static bool flag_peel_loops_set, flag_branch_probabilities_set;\n+static bool flag_inline_functions_set;\n \n /* Functions excluded from profiling.  */\n \n@@ -821,6 +822,7 @@ decode_options (unsigned int argc, const char **argv)\n \n   if (optimize >= 2)\n     {\n+      flag_inline_small_functions = 1;\n       flag_thread_jumps = 1;\n       flag_crossjumping = 1;\n       flag_optimize_sibling_calls = 1;\n@@ -1605,6 +1607,10 @@ common_handle_option (size_t scode, const char *arg, int value,\n       profile_arc_flag_set = true;\n       break;\n \n+    case OPT_finline_functions:\n+      flag_inline_functions_set = true;\n+      break;\n+\n     case OPT_fprofile_use:\n       if (!flag_branch_probabilities_set)\n         flag_branch_probabilities = value;\n@@ -1618,6 +1624,8 @@ common_handle_option (size_t scode, const char *arg, int value,\n         flag_tracer = value;\n       if (!flag_value_profile_transformations_set)\n         flag_value_profile_transformations = value;\n+      if (!flag_inline_functions_set)\n+        flag_inline_functions = value;\n       break;\n \n     case OPT_fprofile_generate:"}, {"sha": "89b16069f4a722f536eba622e2846dc359cb6f7c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3", "patch": "@@ -1,3 +1,14 @@\n+2007-09-04  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/tree-ssa/loadpre8.c: Disable inlining.\n+\t* gcc.dg/tree-ssa/pr27236.c: Likewise.\n+\t* gcc.dg/tree-ssa/predcom-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/predcom-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/flatten-2.c: Avoid overactive tail call ellim.\n+\t* gcc.dg/tree-ssa/loadpre5.c: Likewise.\n+\t* gcc.dg/vect/costmodel/i386/costmodel-fast-math-vect-pr29925.c:\n+\tLikewise.\n+\n 2007-09-04  Janus Weil  <jaydub66@gmail.com>\n \t    Tobias Burnus  <burnus@net-b.de>\n "}, {"sha": "52a865dbd7ca5554d865630c04b5d9e93452e8d2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/flatten-2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fflatten-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fflatten-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fflatten-2.c?ref=4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options -O2 } */\n \n+extern void do_something_usefull();\n /* Check that we finish compiling even if instructed to\n    flatten a cyclic callgraph.  Verify we correctly\n    flatten with another function marked flatten in the\n@@ -27,6 +28,7 @@ void __attribute__((flatten)) doubleindirect(void);\n static void doubleindirect2(void)\n {\n   doubleindirect();\n+  do_something_usefull ();\n }\n static void doubleindirect1(void)\n {\n@@ -42,6 +44,7 @@ static void subcycle1(void);\n static void subcycle2(void)\n {\n   subcycle1();\n+  do_something_usefull ();\n }\n static void subcycle1(void)\n {\n@@ -58,6 +61,7 @@ static void doublesubcycle2(void);\n static void doublesubcycle3(void)\n {\n   doublesubcycle1();\n+  do_something_usefull ();\n }\n static void doublesubcycle2(void)\n {"}, {"sha": "8948cf6ac7fb496ffc0b4132b5b3d52b0e613890", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loadpre5.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre5.c?ref=4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3", "patch": "@@ -2,6 +2,8 @@\n /* { dg-options \"-O2 -fdump-tree-pre-stats\" } */\n int p;\n int r;\n+\n+__attribute__ ((noinline))\n int a(void)\n {\n   return p;"}, {"sha": "42b38d3a9643d12b7daee44a362a9a2f5f8ed1de", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loadpre8.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre8.c?ref=4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3", "patch": "@@ -24,7 +24,7 @@ typedef struct VEC_edge_base\n {\n }\n VEC_edge_base;\n-edge\n+__attribute__ ((noinline)) edge\n VEC_edge_base_index (const VEC_edge_base * vec_, unsigned ix_)\n {\n }\n@@ -56,7 +56,7 @@ ei_start_1 (VEC_edge_gc ** ev)\n   i.container = ev;\n   return i;\n }\n-ei_next (edge_iterator * i)\n+__attribute__ ((noinline)) ei_next (edge_iterator * i)\n {\n }\n static __inline__ edge\n@@ -75,7 +75,7 @@ static __inline__ tree\n get_def_from_ptr (def_operand_p def)\n {\n }\n-tree\n+__attribute__ ((noinline)) tree\n phi_nodes (basic_block bb)\n {\n }"}, {"sha": "389b652069d0878949e4f1a09f26755681208c4b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr27236.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr27236.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr27236.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr27236.c?ref=4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3", "patch": "@@ -5,6 +5,7 @@ static inline int inline_read(volatile int *mem)\n {\n         return *mem;\n }\n+__attribute__ ((noinline))\n int foo_read(volatile int *mem)\n {\n         return inline_read(mem);"}, {"sha": "16bd5c910d8f717d42f1fa93d3ee9f28534abd07", "filename": "gcc/testsuite/gcc.dg/tree-ssa/predcom-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-1.c?ref=4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3", "patch": "@@ -6,6 +6,7 @@ void abort (void);\n \n unsigned fib[1000];\n \n+__attribute__ ((noinline))\n void count_fib(void)\n {\n   int i;\n@@ -18,6 +19,7 @@ void count_fib(void)\n \n unsigned avg[1000];\n \n+__attribute__ ((noinline))\n void count_averages(int n)\n {\n   int i;"}, {"sha": "7275f2868dd90e347ad26b517d8b31cde31e72e4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/predcom-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-2.c?ref=4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3", "patch": "@@ -6,6 +6,7 @@ void abort (void);\n \n long int fib[1000];\n \n+__attribute__ ((noinline))\n void count_fib(void)\n {\n   int i;\n@@ -18,6 +19,7 @@ void count_fib(void)\n \n int avg[1000];\n \n+__attribute__ ((noinline))\n void count_averages(void)\n {\n   int i;"}, {"sha": "5d84017dd240e485bfe8b9ae83230cc551987d57", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/i386/costmodel-fast-math-vect-pr29925.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fi386%2Fcostmodel-fast-math-vect-pr29925.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fi386%2Fcostmodel-fast-math-vect-pr29925.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fi386%2Fcostmodel-fast-math-vect-pr29925.c?ref=4d4b8cb9c0f82c22252018b1b25cd8b3c63166b3", "patch": "@@ -3,6 +3,7 @@\n #include <stdlib.h>\n #include \"../../tree-vect.h\"\n \n+__attribute__ ((noinline))\n void interp_pitch(float *exc, float *interp, int pitch, int len)\n {\n    int i,k;"}]}