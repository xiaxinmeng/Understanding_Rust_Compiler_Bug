{"sha": "e9f389f0da308bdb9259afc8be4b7b207acd3900", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlmMzg5ZjBkYTMwOGJkYjkyNTlhZmM4YmU0YjdiMjA3YWNkMzkwMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-06-16T22:09:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-16T22:09:28Z"}, "message": "re PR c++/44160 ([C++0x] a mysterious error on __func__ in a lambda expression)\n\n\tPR c++/44160\n\t* parser.c (cp_parser_lambda_body): Share code between\n\tsimple and complex cases instead of using cp_parser_function_body.\n\nFrom-SVN: r175123", "tree": {"sha": "6a964d4f3e21ec42e69554a50b88a7271e374b01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a964d4f3e21ec42e69554a50b88a7271e374b01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9f389f0da308bdb9259afc8be4b7b207acd3900", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f389f0da308bdb9259afc8be4b7b207acd3900", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9f389f0da308bdb9259afc8be4b7b207acd3900", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f389f0da308bdb9259afc8be4b7b207acd3900/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa54bbb75d70055628f966d59570256649fa3fdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa54bbb75d70055628f966d59570256649fa3fdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa54bbb75d70055628f966d59570256649fa3fdb"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "7d0a799f90a0812fcff918a5634d74b5ad199945", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f389f0da308bdb9259afc8be4b7b207acd3900/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f389f0da308bdb9259afc8be4b7b207acd3900/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e9f389f0da308bdb9259afc8be4b7b207acd3900", "patch": "@@ -1,5 +1,9 @@\n 2011-06-16  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/44160\n+\t* parser.c (cp_parser_lambda_body): Share code between\n+\tsimple and complex cases instead of using cp_parser_function_body.\n+\n \tPR c++/45378\n \t* decl.c (check_initializer): Check narrowing.\n "}, {"sha": "5ea04b56cb5fdfc9a8c2e2864832d472fdab3d47", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f389f0da308bdb9259afc8be4b7b207acd3900/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f389f0da308bdb9259afc8be4b7b207acd3900/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e9f389f0da308bdb9259afc8be4b7b207acd3900", "patch": "@@ -7731,6 +7731,7 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)\n     tree fco = lambda_function (lambda_expr);\n     tree body;\n     bool done = false;\n+    tree compound_stmt;\n \n     /* Let the front end know that we are going to be defining this\n        function.  */\n@@ -7741,6 +7742,11 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)\n     start_lambda_scope (fco);\n     body = begin_function_body ();\n \n+    if (!cp_parser_require (parser, CPP_OPEN_BRACE, RT_OPEN_BRACE))\n+      goto out;\n+\n+    compound_stmt = begin_compound_stmt (0);\n+\n     /* 5.1.1.4 of the standard says:\n          If a lambda-expression does not include a trailing-return-type, it\n          is as if the trailing-return-type denotes the following type:\n@@ -7757,19 +7763,16 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)\n        in the body.  Since we used void as the placeholder return type, parsing\n        the body as usual will give such desired behavior.  */\n     if (!LAMBDA_EXPR_RETURN_TYPE (lambda_expr)\n-        && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE)\n-        && cp_lexer_peek_nth_token (parser->lexer, 2)->keyword == RID_RETURN\n-        && cp_lexer_peek_nth_token (parser->lexer, 3)->type != CPP_SEMICOLON)\n+        && cp_lexer_peek_nth_token (parser->lexer, 1)->keyword == RID_RETURN\n+        && cp_lexer_peek_nth_token (parser->lexer, 2)->type != CPP_SEMICOLON)\n       {\n-\ttree compound_stmt;\n \ttree expr = NULL_TREE;\n \tcp_id_kind idk = CP_ID_KIND_NONE;\n \n \t/* Parse tentatively in case there's more after the initial return\n \t   statement.  */\n \tcp_parser_parse_tentatively (parser);\n \n-\tcp_parser_require (parser, CPP_OPEN_BRACE, RT_OPEN_BRACE);\n \tcp_parser_require_keyword (parser, RID_RETURN, RT_RETURN);\n \n \texpr = cp_parser_expression (parser, /*cast_p=*/false, &idk);\n@@ -7781,10 +7784,8 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)\n \t  {\n \t    apply_lambda_return_type (lambda_expr, lambda_return_type (expr));\n \n-\t    compound_stmt = begin_compound_stmt (0);\n \t    /* Will get error here if type not deduced yet.  */\n \t    finish_return_stmt (expr);\n-\t    finish_compound_stmt (compound_stmt);\n \n \t    done = true;\n \t  }\n@@ -7794,12 +7795,16 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)\n       {\n \tif (!LAMBDA_EXPR_RETURN_TYPE (lambda_expr))\n \t  LAMBDA_EXPR_DEDUCE_RETURN_TYPE_P (lambda_expr) = true;\n-\t/* TODO: does begin_compound_stmt want BCS_FN_BODY?\n-\t   cp_parser_compound_stmt does not pass it.  */\n-\tcp_parser_function_body (parser);\n+\twhile (cp_lexer_next_token_is_keyword (parser->lexer, RID_LABEL))\n+\t  cp_parser_label_declaration (parser);\n+\tcp_parser_statement_seq_opt (parser, NULL_TREE);\n+\tcp_parser_require (parser, CPP_CLOSE_BRACE, RT_CLOSE_BRACE);\n \tLAMBDA_EXPR_DEDUCE_RETURN_TYPE_P (lambda_expr) = false;\n       }\n \n+    finish_compound_stmt (compound_stmt);\n+\n+  out:\n     finish_function_body (body);\n     finish_lambda_scope ();\n "}, {"sha": "b4a75409e306e1e68b201ccd33f908ccb0dbe75c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f389f0da308bdb9259afc8be4b7b207acd3900/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f389f0da308bdb9259afc8be4b7b207acd3900/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e9f389f0da308bdb9259afc8be4b7b207acd3900", "patch": "@@ -1,5 +1,8 @@\n 2011-06-16  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/44160\n+\t* g++.dg/cpp0x/lambda/lambda-__func__.C: New.\n+\n \tPR c++/45378\n \t* g++.dg/cpp0x/initlist52.C New.\n "}, {"sha": "1cc7bb6583388882f5232971e695da6afd95419f", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-__func__.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f389f0da308bdb9259afc8be4b7b207acd3900/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-__func__.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f389f0da308bdb9259afc8be4b7b207acd3900/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-__func__.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-__func__.C?ref=e9f389f0da308bdb9259afc8be4b7b207acd3900", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/44160\n+// { dg-options -std=c++0x }\n+// { dg-do link }\n+\n+int main()\n+{\n+  const char *p = []() { return __func__; }();\n+  return p == 0;\n+}"}]}