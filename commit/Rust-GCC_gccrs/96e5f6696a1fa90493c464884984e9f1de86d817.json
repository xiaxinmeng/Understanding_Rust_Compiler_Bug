{"sha": "96e5f6696a1fa90493c464884984e9f1de86d817", "node_id": "C_kwDOANBUbNoAKDk2ZTVmNjY5NmExZmE5MDQ5M2M0NjQ4ODQ5ODRlOWYxZGU4NmQ4MTc", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-08-01T22:08:23Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-08-01T22:08:23Z"}, "message": "PR target/106481: Handle CONST_WIDE_INT in REG_EQUAL during STV on x86_64.\n\nThis patch resolves PR target/106481, and is an oversight in my recent\nbattles with REG_EQUAL notes during TImode STV (see PR target/106278\nhttps://gcc.gnu.org/pipermail/gcc-patches/2022-July/598416.html).\n\nThe patch above's/current behaviour is that we check that the mode of\nthe REG_EQUAL note is TImode before using PUT_MODE to set it to V1TImode.\nHowever, the new test case reveals that this doesn't consider REG_EQUAL\nnotes that are CONST_INT or CONST_WIDE_INT, i.e. that are VOIDmode,\nand so STV produces:\n\n(insn 85 84 86 2 (set (reg:V1TI 113)\n        (reg:V1TI 84)) \"pr106481.c\":13:3 1766 {movv1ti_internal}\n     (expr_list:REG_EQUAL (const_wide_int 0x0ffffffff00000004)\n        (nil)))\n\nwhich causes problems as the const_wide_int isn't a valid immediate\nconstant for V1TImode.  With this patch, we now generate the correct:\n\n(insn 85 84 86 2 (set (reg:V1TI 113)\n        (reg:V1TI 84)) \"pr106481.c\":13:3 1766 {movv1ti_internal}\n     (expr_list:REG_EQUAL (const_vector:V1TI [\n                (const_wide_int 0x0ffffffff00000004)\n            ])\n        (nil)))\n\n2022-08-01  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog\n\tPR target/106481\n\t* config/i386/i386-features.cc (timode_scalar_chain::convert_insn):\n\tConvert a CONST_SCALAR_INT_P in a REG_EQUAL note into a V1TImode\n\tCONST_VECTOR.\n\ngcc/testsuite/ChangeLog\n\tPR target/106481\n\t* gcc.target/i386/pr106481.c: New test case.", "tree": {"sha": "14c89f554d9e6b8ed0c4f54d5aa3032fcc6f76f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14c89f554d9e6b8ed0c4f54d5aa3032fcc6f76f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96e5f6696a1fa90493c464884984e9f1de86d817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e5f6696a1fa90493c464884984e9f1de86d817", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96e5f6696a1fa90493c464884984e9f1de86d817", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e5f6696a1fa90493c464884984e9f1de86d817/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80928920147a109a7f8735bffc55a72cbe8db185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80928920147a109a7f8735bffc55a72cbe8db185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80928920147a109a7f8735bffc55a72cbe8db185"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "e3ecc22580a15d65dcf80eef89a511b14ce61e12", "filename": "gcc/config/i386/i386-features.cc", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e5f6696a1fa90493c464884984e9f1de86d817/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e5f6696a1fa90493c464884984e9f1de86d817/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.cc?ref=96e5f6696a1fa90493c464884984e9f1de86d817", "patch": "@@ -1353,8 +1353,15 @@ timode_scalar_chain::convert_insn (rtx_insn *insn)\n       if (GET_MODE (dst) == V1TImode)\n \t{\n \t  tmp = find_reg_equal_equiv_note (insn);\n-\t  if (tmp && GET_MODE (XEXP (tmp, 0)) == TImode)\n-\t    PUT_MODE (XEXP (tmp, 0), V1TImode);\n+\t  if (tmp)\n+\t    {\n+\t      if (GET_MODE (XEXP (tmp, 0)) == TImode)\n+\t\tPUT_MODE (XEXP (tmp, 0), V1TImode);\n+\t      else if (CONST_SCALAR_INT_P (XEXP (tmp, 0)))\n+\t\tXEXP (tmp, 0)\n+\t\t  = gen_rtx_CONST_VECTOR (V1TImode,\n+\t\t\t\t\t  gen_rtvec (1, XEXP (tmp, 0)));\n+\t    }\n \t}\n       break;\n     case MEM:"}, {"sha": "8cc704865cda104139a68d27f85c21f13113a15d", "filename": "gcc/testsuite/gcc.target/i386/pr106481.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e5f6696a1fa90493c464884984e9f1de86d817/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106481.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e5f6696a1fa90493c464884984e9f1de86d817/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106481.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106481.c?ref=96e5f6696a1fa90493c464884984e9f1de86d817", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -fno-dce -fno-forward-propagate -fno-rerun-cse-after-loop -Wno-psabi\" } */\n+\n+typedef int V __attribute__((vector_size (64)));\n+typedef __int128 W __attribute__((vector_size (64)));\n+\n+W w;\n+V bar (void);\n+\n+void\n+foo (V v, W)\n+{\n+  foo ((V){4, ~0}, (W) v);\n+  foo (v, w);\n+  bar ();\n+}\n+"}]}