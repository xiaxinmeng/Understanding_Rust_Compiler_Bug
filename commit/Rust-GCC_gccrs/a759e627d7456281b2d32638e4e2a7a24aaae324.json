{"sha": "a759e627d7456281b2d32638e4e2a7a24aaae324", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc1OWU2MjdkNzQ1NjI4MWIyZDMyNjM4ZTRlMmE3YTI0YWFhZTMyNA==", "commit": {"author": {"name": "Martin v. L\u00f6wis", "email": "loewis@informatik.hu-berlin.de", "date": "1998-07-12T16:55:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-07-12T16:55:29Z"}, "message": "decl2.c (build_expr_from_tree): Change calls of do_identifier.\n\n\t* decl2.c (build_expr_from_tree): Change calls of do_identifier.\n\tDo Koenig lookup in CALL_EXPR.\n\t(arg_assoc): Handle error_mark.\n\t* lex.c (is_global): New function.\n\t(do_identifier): Expect arguments for Koenig lookup.\n\t* parse.y (primary): Add rules for calls of unqualified function calls.\n\t(do_id): Change call of do_identifier.\n\t* pt.c (finish_stmt_expr): Likewise.\n\t* semantics.c (finish_id_expr): Likewise.\n\t(finish_call_expr): Add integer parameter to indicate\n\targument-dependent lookup.\n\nFrom-SVN: r21091", "tree": {"sha": "5d9e15ba1851589f5d201f5829ad5d7556142aa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d9e15ba1851589f5d201f5829ad5d7556142aa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a759e627d7456281b2d32638e4e2a7a24aaae324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a759e627d7456281b2d32638e4e2a7a24aaae324", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a759e627d7456281b2d32638e4e2a7a24aaae324", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a759e627d7456281b2d32638e4e2a7a24aaae324/comments", "author": null, "committer": null, "parents": [{"sha": "894ded60fa7734ee7b3f029b98c0ab6d7d95a7b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894ded60fa7734ee7b3f029b98c0ab6d7d95a7b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/894ded60fa7734ee7b3f029b98c0ab6d7d95a7b4"}], "stats": {"total": 8791, "additions": 4453, "deletions": 4338}, "files": [{"sha": "c0f3237e6630371910c8e3b7128d61c1955cdb60", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a759e627d7456281b2d32638e4e2a7a24aaae324/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a759e627d7456281b2d32638e4e2a7a24aaae324/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a759e627d7456281b2d32638e4e2a7a24aaae324", "patch": "@@ -1,5 +1,17 @@\n 1998-07-12  Martin von L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n+\t* decl2.c (build_expr_from_tree): Change calls of do_identifier.\n+\tDo Koenig lookup in CALL_EXPR.\n+\t(arg_assoc): Handle error_mark.\n+\t* lex.c (is_global): New function.\n+\t(do_identifier): Expect arguments for Koenig lookup.\n+\t* parse.y (primary): Add rules for calls of unqualified function calls.\n+\t(do_id): Change call of do_identifier.\n+\t* pt.c (finish_stmt_expr): Likewise.\n+\t* semantics.c (finish_id_expr): Likewise.\n+\t(finish_call_expr): Add integer parameter to indicate\n+\targument-dependent lookup.\n+\n \t* decl.c (struct binding_level): New field using_directives.\n \t(push_using_decl): Not sorry anymore.\n \t(push_using_directive): New function."}, {"sha": "31098113b7c80d5bf95e48255c29215b06427f70", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a759e627d7456281b2d32638e4e2a7a24aaae324/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a759e627d7456281b2d32638e4e2a7a24aaae324/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a759e627d7456281b2d32638e4e2a7a24aaae324", "patch": "@@ -2606,7 +2606,7 @@ extern void note_list_got_semicolon\t\tPROTO((tree));\n extern void do_pending_lang_change\t\tPROTO((void));\n extern int identifier_type\t\t\tPROTO((tree));\n extern void see_typename\t\t\tPROTO((void));\n-extern tree do_identifier\t\t\tPROTO((tree, int));\n+extern tree do_identifier\t\t\tPROTO((tree, int, tree));\n extern tree do_scoped_id\t\t\tPROTO((tree, int));\n extern tree identifier_typedecl_value\t\tPROTO((tree));\n extern int real_yylex\t\t\t\tPROTO((void));\n@@ -2798,7 +2798,7 @@ extern void finish_asm_stmt                     PROTO((tree, tree, tree, tree, t\n extern tree finish_parenthesized_expr           PROTO((tree));\n extern tree begin_stmt_expr                     PROTO((void));\n extern tree finish_stmt_expr                    PROTO((tree, tree));\n-extern tree finish_call_expr                    PROTO((tree, tree));\n+extern tree finish_call_expr                    PROTO((tree, tree, int));\n extern tree finish_increment_expr               PROTO((tree, enum tree_code));\n extern tree finish_this_expr                    PROTO((void));\n extern tree finish_object_call_expr             PROTO((tree, tree, tree));"}, {"sha": "632e4f975a9d312022a4dab0917ec779703d844d", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a759e627d7456281b2d32638e4e2a7a24aaae324/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a759e627d7456281b2d32638e4e2a7a24aaae324/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=a759e627d7456281b2d32638e4e2a7a24aaae324", "patch": "@@ -3480,13 +3480,13 @@ build_expr_from_tree (t)\n   switch (TREE_CODE (t))\n     {\n     case IDENTIFIER_NODE:\n-      return do_identifier (t, 0);\n+      return do_identifier (t, 0, NULL_TREE);\n \n     case LOOKUP_EXPR:\n       if (LOOKUP_EXPR_GLOBAL (t))\n \treturn do_scoped_id (TREE_OPERAND (t, 0), 0);\n       else\n-\treturn do_identifier (TREE_OPERAND (t, 0), 0);\n+\treturn do_identifier (TREE_OPERAND (t, 0), 0, NULL_TREE);\n \n     case TEMPLATE_ID_EXPR:\n       return (lookup_template_function\n@@ -3651,12 +3651,21 @@ build_expr_from_tree (t)\n       else\n \t{\n \t  tree name = TREE_OPERAND (t, 0);\n-\t  if (TREE_CODE (name) == TEMPLATE_ID_EXPR\n+          tree id;\n+          tree args = build_expr_from_tree (TREE_OPERAND (t, 1));\n+          if (args != NULL_TREE && TREE_CODE (name) == LOOKUP_EXPR\n+              && !LOOKUP_EXPR_GLOBAL (name)\n+              && TREE_CODE ((id = TREE_OPERAND (name, 0))) == IDENTIFIER_NODE\n+              && (!current_class_type\n+                  || !lookup_member (current_class_type, id, 0, 0)))\n+            {\n+              /* Do Koenig lookup if there are no class members. */\n+              name = do_identifier (id, 0, args);\n+            }\n+          else if (TREE_CODE (name) == TEMPLATE_ID_EXPR\n \t      || ! really_overloaded_fn (name))\n \t    name = build_expr_from_tree (name);\n-\t  return build_x_function_call\n-\t    (name, build_expr_from_tree (TREE_OPERAND (t, 1)),\n-\t     current_class_ref);\n+\t  return build_x_function_call (name, args, current_class_ref);\n \t}\n \n     case COND_EXPR:\n@@ -4329,6 +4338,13 @@ arg_assoc (k, n)\n \t  if (arg_assoc_type (k, DECL_CLASS_CONTEXT (n)))\n \t    return 1;\n \treturn 0;\n+      case TEMPLATE_DECL:\n+        /* XXX Type of a function template in the context of Koenig lookup?\n+           Assume that template parameters are non-deduced for the moment. */\n+        n = DECL_RESULT (n);\n+        continue;\n+      case ERROR_MARK:\n+        return 0;\n       default:\n \tcp_error (\"sorry, Koenig lookup for `%s' of type `%T' failed\",\n \t\t  tree_code_name [(int)TREE_CODE (n)], TREE_TYPE (n));"}, {"sha": "47d8c1f7537107bdf179ca801911b396a77efe70", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a759e627d7456281b2d32638e4e2a7a24aaae324/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a759e627d7456281b2d32638e4e2a7a24aaae324/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=a759e627d7456281b2d32638e4e2a7a24aaae324", "patch": "@@ -2792,10 +2792,29 @@ see_typename ()\n     }\n }\n \n+/* Return true if d is in a global scope. */\n+\n+static int\n+is_global (d)\n+  tree d;\n+{\n+  while (1)\n+    switch (TREE_CODE (d))\n+      {\n+      case OVERLOAD: d = OVL_FUNCTION (d); continue;\n+      case TREE_LIST: d = TREE_VALUE (d); continue;\n+      default:\n+        my_friendly_assert (TREE_CODE_CLASS (TREE_CODE (d)) == 'd', 980629);\n+        d = CP_DECL_CONTEXT (d);\n+        return TREE_CODE (d) == NAMESPACE_DECL;\n+      }\n+}\n+\n tree\n-do_identifier (token, parsing)\n+do_identifier (token, parsing, args)\n      register tree token;\n      int parsing;\n+     tree args;\n {\n   register tree id;\n \n@@ -2808,7 +2827,7 @@ do_identifier (token, parsing)\n     yychar = yylex ();\n   /* Scope class declarations before global\n      declarations.  */\n-  if (id == IDENTIFIER_NAMESPACE_VALUE (token)\n+  if (id && is_global (id)\n       && current_class_type != 0\n       && TYPE_SIZE (current_class_type) == 0)\n     {\n@@ -2835,6 +2854,15 @@ do_identifier (token, parsing)\n \t}\n     }\n \n+  /* Do Koenig lookup if appropriate (inside templates we build lookup\n+     expressions instead).  */\n+  if (args && !current_template_parms && (!id || is_global (id)))\n+    {\n+      /* If we have arguments and we only found global names,\n+         do Koenig lookup. */\n+      id = lookup_arg_dependent (token, id, args);\n+    }\n+\n   /* Remember that this name has been used in the class definition, as per\n      [class.scope0] */\n   if (id && current_class_type && parsing"}, {"sha": "471d977e38c4455f6fcc1bb6dc65a18ed89455db", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 4368, "deletions": 4321, "changes": 8689, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a759e627d7456281b2d32638e4e2a7a24aaae324/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a759e627d7456281b2d32638e4e2a7a24aaae324/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=a759e627d7456281b2d32638e4e2a7a24aaae324"}, {"sha": "b35322e9c64ff4c6616dc42eff371c8217505259", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a759e627d7456281b2d32638e4e2a7a24aaae324/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a759e627d7456281b2d32638e4e2a7a24aaae324/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=a759e627d7456281b2d32638e4e2a7a24aaae324", "patch": "@@ -1264,7 +1264,7 @@ notype_unqualified_id:\n \t;\n \n do_id:\n-\t\t{ $$ = do_identifier ($<ttype>-1, 1); }\n+\t\t{ $$ = do_identifier ($<ttype>-1, 1, NULL_TREE); }\n \n template_id:\n           PFUNCNAME '<' do_id template_arg_list_opt template_close_bracket \n@@ -1351,10 +1351,17 @@ primary:\n \t\t}\n \t  compstmt ')'\n                { $$ = finish_stmt_expr ($<ttype>2, $3); }\n+        /* Koenig lookup support\n+           We could store lastiddecl in $1 to avoid another lookup,\n+           but that would result in many additional reduce/reduce conflicts. */\n+        | IDENTIFIER '(' nonnull_exprlist ')'\n+               { $$ = finish_call_expr ($1, $3, 1); }\n+        | IDENTIFIER LEFT_RIGHT\n+               { $$ = finish_call_expr ($1, NULL_TREE, 1); }\n \t| primary '(' nonnull_exprlist ')'\n-               { $$ = finish_call_expr ($1, $3); }\n+               { $$ = finish_call_expr ($1, $3, 0); }\n \t| primary LEFT_RIGHT\n-               { $$ = finish_call_expr ($1, NULL_TREE); }\n+               { $$ = finish_call_expr ($1, NULL_TREE, 0); }\n \t| primary '[' expr ']'\n \t\t{ $$ = grok_array_decl ($$, $3); }\n \t| primary PLUSPLUS"}, {"sha": "f367f128f03e4ea8a355f0d9ae8264aff98aa1ee", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a759e627d7456281b2d32638e4e2a7a24aaae324/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a759e627d7456281b2d32638e4e2a7a24aaae324/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a759e627d7456281b2d32638e4e2a7a24aaae324", "patch": "@@ -5229,7 +5229,7 @@ tsubst_copy (t, args, in_decl)\n   switch (code)\n     {\n     case PARM_DECL:\n-      return do_identifier (DECL_NAME (t), 0);\n+      return do_identifier (DECL_NAME (t), 0, NULL_TREE);\n \n     case CONST_DECL:\n     case FIELD_DECL:"}, {"sha": "fe4709aee9553e06a5f62c2e422d43947bdc59b7", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a759e627d7456281b2d32638e4e2a7a24aaae324/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a759e627d7456281b2d32638e4e2a7a24aaae324/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a759e627d7456281b2d32638e4e2a7a24aaae324", "patch": "@@ -836,11 +836,16 @@ finish_stmt_expr (rtl_expr, expr)\n    call.  */\n \n tree \n-finish_call_expr (fn, args)\n+finish_call_expr (fn, args, koenig)\n      tree fn;\n      tree args;\n+     int koenig;\n {\n-  tree result = build_x_function_call (fn, args, current_class_ref);\n+  tree result;\n+\n+  if (koenig)\n+    fn = do_identifier (fn, 0, args);\n+  result = build_x_function_call (fn, args, current_class_ref);\n \n   if (TREE_CODE (result) == CALL_EXPR\n       && TREE_TYPE (result) != void_type_node)\n@@ -1028,7 +1033,7 @@ finish_id_expr (expr)\n      tree expr;\n {\n   if (TREE_CODE (expr) == IDENTIFIER_NODE)\n-    expr = do_identifier (expr, 1);\n+    expr = do_identifier (expr, 1, NULL_TREE);\n \n   return expr;\n }"}]}