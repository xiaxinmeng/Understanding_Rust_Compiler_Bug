{"sha": "4c0cca1801ea06ba839f6cb6340ad014b8620423", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMwY2NhMTgwMWVhMDZiYTgzOWY2Y2I2MzQwYWQwMTRiODYyMDQyMw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2015-08-03T11:48:57Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2015-08-03T11:48:57Z"}, "message": "configure.ac: Set aliasing_flags to -fno-strict-aliasing if...\n\ngcc/ChangeLog:\n\n\t* configure.ac: Set aliasing_flags to -fno-strict-aliasing if\n\tthe host compiler is affected by placement new aliasing bug.\n\t* configure: Regenerate.\n\t* Makefile.in (ALIASING_FLAGS): New variable.\n\t(ALL_CXXFLAGS): Add $(ALIASING_FLAGS).\n\nFrom-SVN: r226499", "tree": {"sha": "8d1ac1de12fbb1cd572e93abe124add449ed32da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d1ac1de12fbb1cd572e93abe124add449ed32da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c0cca1801ea06ba839f6cb6340ad014b8620423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c0cca1801ea06ba839f6cb6340ad014b8620423", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c0cca1801ea06ba839f6cb6340ad014b8620423", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c0cca1801ea06ba839f6cb6340ad014b8620423/comments", "author": null, "committer": null, "parents": [{"sha": "1f71aee9c1b36a44509adc8f9134ccc17f2989a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f71aee9c1b36a44509adc8f9134ccc17f2989a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f71aee9c1b36a44509adc8f9134ccc17f2989a2"}], "stats": {"total": 80, "additions": 77, "deletions": 3}, "files": [{"sha": "42b03ce9d1885fdceff3bee7432f3dfa5cbd5719", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c0cca1801ea06ba839f6cb6340ad014b8620423/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c0cca1801ea06ba839f6cb6340ad014b8620423/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c0cca1801ea06ba839f6cb6340ad014b8620423", "patch": "@@ -1,3 +1,11 @@\n+2015-08-03  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* configure.ac: Set aliasing_flags to -fno-strict-aliasing if\n+\tthe host compiler is affected by placement new aliasing bug.\n+\t* configure: Regenerate.\n+\t* Makefile.in (ALIASING_FLAGS): New variable.\n+\t(ALL_CXXFLAGS): Add $(ALIASING_FLAGS).\n+\n 2015-08-03  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \tPR target/66731"}, {"sha": "36168af9e83e683fe7277bac11bd038e11527885", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c0cca1801ea06ba839f6cb6340ad014b8620423/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c0cca1801ea06ba839f6cb6340ad014b8620423/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4c0cca1801ea06ba839f6cb6340ad014b8620423", "patch": "@@ -180,6 +180,8 @@ NOCOMMON_FLAG = @nocommon_flag@\n \n NOEXCEPTION_FLAGS = @noexception_flags@\n \n+ALIASING_FLAGS = @aliasing_flags@\n+\n # This is set by --disable-maintainer-mode (default) to \"#\"\n # FIXME: 'MAINT' will always be set to an empty string, no matter if\n # --disable-maintainer-mode is used or not.  This is because the\n@@ -986,7 +988,8 @@ ALL_CFLAGS = $(T_CFLAGS) $(CFLAGS-$@) \\\n \n # The C++ version.\n ALL_CXXFLAGS = $(T_CFLAGS) $(CFLAGS-$@) $(CXXFLAGS) $(INTERNAL_CFLAGS) \\\n-  $(COVERAGE_FLAGS) $(NOEXCEPTION_FLAGS) $(WARN_CXXFLAGS) @DEFS@\n+  $(COVERAGE_FLAGS) $(ALIASING_FLAGS) $(NOEXCEPTION_FLAGS) \\\n+  $(WARN_CXXFLAGS) @DEFS@\n \n # Likewise.  Put INCLUDES at the beginning: this way, if some autoconf macro\n # puts -I options in CPPFLAGS, our include files in the srcdir will always"}, {"sha": "271316ad295444178659267a75839257af7403c6", "filename": "gcc/configure", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c0cca1801ea06ba839f6cb6340ad014b8620423/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c0cca1801ea06ba839f6cb6340ad014b8620423/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=4c0cca1801ea06ba839f6cb6340ad014b8620423", "patch": "@@ -789,6 +789,7 @@ c_strict_warn\n strict_warn\n c_loose_warn\n loose_warn\n+aliasing_flags\n CPP\n EGREP\n GREP\n@@ -6526,6 +6527,42 @@ fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n \n+# Check whether compiler is affected by placement new aliasing bug (PR 29286).\n+# If the host compiler is affected by the bug, and we build with optimization\n+# enabled (which happens e.g. when cross-compiling), the pool allocator may\n+# get miscompiled.  Use -fno-strict-aliasing to work around this problem.\n+# Since there is no reliable feature check for the presence of this bug,\n+# we simply use a GCC version number check.  (This should never trigger for\n+# stages 2 or 3 of a native bootstrap.)\n+aliasing_flags=\n+if test \"$GCC\" = yes; then\n+  saved_CXXFLAGS=\"$CXXFLAGS\"\n+\n+  # The following test compilation will succeed if and only if $CXX accepts\n+  # -fno-strict-aliasing *and* is older than GCC 4.3.\n+  CXXFLAGS=\"$CXXFLAGS -fno-strict-aliasing\"\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether $CXX is affected by placement new aliasing bug\" >&5\n+$as_echo_n \"checking whether $CXX is affected by placement new aliasing bug... \" >&6; }\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3)\n+#error compiler not affected by placement new aliasing bug\n+#endif\n+\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n+$as_echo \"yes\" >&6; }; aliasing_flags='-fno-strict-aliasing'\n+else\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n+$as_echo \"no\" >&6; }\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+  CXXFLAGS=\"$saved_CXXFLAGS\"\n+fi\n+\n \n \n \n@@ -18301,7 +18338,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18304 \"configure\"\n+#line 18341 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18407,7 +18444,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18410 \"configure\"\n+#line 18447 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "767e288af2a6c8a1a813560a83a9c0ec6afa86a1", "filename": "gcc/configure.ac", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c0cca1801ea06ba839f6cb6340ad014b8620423/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c0cca1801ea06ba839f6cb6340ad014b8620423/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=4c0cca1801ea06ba839f6cb6340ad014b8620423", "patch": "@@ -416,6 +416,32 @@ struct X<long long> { typedef long long t; };\n ]], [[X<int64_t>::t x;]])],[],[AC_MSG_ERROR([error verifying int64_t uses long long])])\n fi\n \n+# Check whether compiler is affected by placement new aliasing bug (PR 29286).\n+# If the host compiler is affected by the bug, and we build with optimization\n+# enabled (which happens e.g. when cross-compiling), the pool allocator may\n+# get miscompiled.  Use -fno-strict-aliasing to work around this problem.\n+# Since there is no reliable feature check for the presence of this bug,\n+# we simply use a GCC version number check.  (This should never trigger for\n+# stages 2 or 3 of a native bootstrap.)\n+aliasing_flags=\n+if test \"$GCC\" = yes; then\n+  saved_CXXFLAGS=\"$CXXFLAGS\"\n+\n+  # The following test compilation will succeed if and only if $CXX accepts\n+  # -fno-strict-aliasing *and* is older than GCC 4.3.\n+  CXXFLAGS=\"$CXXFLAGS -fno-strict-aliasing\"\n+  AC_MSG_CHECKING([whether $CXX is affected by placement new aliasing bug])\n+  AC_COMPILE_IFELSE([\n+#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3)\n+#error compiler not affected by placement new aliasing bug\n+#endif\n+],\n+    [AC_MSG_RESULT([yes]); aliasing_flags='-fno-strict-aliasing'],\n+    [AC_MSG_RESULT([no])])\n+\n+  CXXFLAGS=\"$saved_CXXFLAGS\"\n+fi\n+AC_SUBST(aliasing_flags)\n \n \n "}]}