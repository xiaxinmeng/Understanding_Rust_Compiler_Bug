{"sha": "53678f7f794aa3ff99d9df87c02abe1caf4ec1d3", "node_id": "C_kwDOANBUbNoAKDUzNjc4ZjdmNzk0YWEzZmY5OWQ5ZGY4N2MwMmFiZTFjYWY0ZWMxZDM", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2023-02-08T23:41:47Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2023-02-08T23:41:47Z"}, "message": "c: Update checks on constexpr pointer initializers\n\nWG14 has agreed a change of the rules on constexpr pointer\ninitializers, so that a (constant) null value that is not a null\npointer constant is accepted in that context, rather than only\naccepting null pointer constants.  (In particular, this means that a\nconstexpr variable of pointer type can be used to initializer another\nsuch variable.)  Remove the null pointer constant restriction in GCC,\ninstead checking just whether the value is null.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/c/\n\t* c-typeck.cc (check_constexpr_init): Remove argument\n\tnull_pointer_constant.  Only check pointer initializers for being\n\tnull.\n\t(digest_init): Update calls to check_constexpr_init.\n\ngcc/testsuite/\n\t* gcc.dg/c2x-constexpr-1.c: Test initialization of constexpr\n\tpointers with null values that are not null pointer constants.\n\t* gcc.dg/c2x-constexpr-3.c: Test initialization of constexpr\n\tpointers with non-null values, not with null values that are not\n\tnull pointer constants.", "tree": {"sha": "d8b3bdb44374933e867320b3ef02e4b0d4126fc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8b3bdb44374933e867320b3ef02e4b0d4126fc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53678f7f794aa3ff99d9df87c02abe1caf4ec1d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53678f7f794aa3ff99d9df87c02abe1caf4ec1d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53678f7f794aa3ff99d9df87c02abe1caf4ec1d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53678f7f794aa3ff99d9df87c02abe1caf4ec1d3/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a49390f3f6febc1f5539f76459c416dba83b4db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a49390f3f6febc1f5539f76459c416dba83b4db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a49390f3f6febc1f5539f76459c416dba83b4db"}], "stats": {"total": 48, "additions": 27, "deletions": 21}, "files": [{"sha": "157b77eda951abf2b5abab41b915656256272755", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53678f7f794aa3ff99d9df87c02abe1caf4ec1d3/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53678f7f794aa3ff99d9df87c02abe1caf4ec1d3/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=53678f7f794aa3ff99d9df87c02abe1caf4ec1d3", "patch": "@@ -8186,23 +8186,20 @@ constexpr_init_fits_real_type (tree type, tree init)\n \n /* Check whether INIT (location LOC) is valid as a 'constexpr'\n    initializer for type TYPE, and give an error if not.  INIT has\n-   already been folded and verified to be constant.\n-   NULL_POINTER_CONSTANT, INT_CONST_EXPR and ARITH_CONST_EXPR say\n-   whether it is a null pointer constant, integer constant expression\n-   or arithmetic constant expression, respectively.  If TYPE is not a\n-   scalar type, this function does nothing.  */\n+   already been folded and verified to be constant.  INT_CONST_EXPR\n+   and ARITH_CONST_EXPR say whether it is an integer constant\n+   expression or arithmetic constant expression, respectively.  If\n+   TYPE is not a scalar type, this function does nothing.  */\n \n static void\n check_constexpr_init (location_t loc, tree type, tree init,\n-\t\t      bool null_pointer_constant, bool int_const_expr,\n-\t\t      bool arith_const_expr)\n+\t\t      bool int_const_expr, bool arith_const_expr)\n {\n   if (POINTER_TYPE_P (type))\n     {\n-      /* The initializer must be a null pointer constant.  */\n-      if (!null_pointer_constant)\n-\terror_at (loc, \"%<constexpr%> pointer initializer is not a \"\n-\t\t  \"null pointer constant\");\n+      /* The initializer must be null.  */\n+      if (TREE_CODE (init) != INTEGER_CST || !integer_zerop (init))\n+\terror_at (loc, \"%<constexpr%> pointer initializer is not null\");\n       return;\n     }\n   if (INTEGRAL_TYPE_P (type))\n@@ -8582,8 +8579,7 @@ digest_init (location_t init_loc, tree type, tree init, tree origtype,\n \t\t      \"initializer element is not a constant expression\");\n       else if (require_constexpr)\n \tcheck_constexpr_init (init_loc, type, inside_init,\n-\t\t\t      null_pointer_constant, int_const_expr,\n-\t\t\t      arith_const_expr);\n+\t\t\t      int_const_expr, arith_const_expr);\n \n       /* Added to enable additional -Wsuggest-attribute=format warnings.  */\n       if (TREE_CODE (TREE_TYPE (inside_init)) == POINTER_TYPE)\n@@ -8638,8 +8634,7 @@ digest_init (location_t init_loc, tree type, tree init, tree origtype,\n \t\t      \"initializer element is not a constant expression\");\n       else if (require_constexpr)\n \tcheck_constexpr_init (init_loc, type, unconverted_init,\n-\t\t\t      null_pointer_constant, int_const_expr,\n-\t\t\t      arith_const_expr);\n+\t\t\t      int_const_expr, arith_const_expr);\n \n       return inside_init;\n     }"}, {"sha": "898953020e7777e396b5d7c12dd0a6a239130b8a", "filename": "gcc/testsuite/gcc.dg/c2x-constexpr-1.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53678f7f794aa3ff99d9df87c02abe1caf4ec1d3/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-constexpr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53678f7f794aa3ff99d9df87c02abe1caf4ec1d3/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-constexpr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-constexpr-1.c?ref=53678f7f794aa3ff99d9df87c02abe1caf4ec1d3", "patch": "@@ -176,6 +176,12 @@ constexpr int v97[100] = { [v82.x.f] = 7 };\n static int v98[v94];\n constexpr _Complex double v99 = 1.0;\n constexpr _Complex float v100 = 12345;\n+constexpr int *v101 = (int *) 0;\n+constexpr void *v102 = (void *) (void *) 0;\n+constexpr void *v103 = v101;\n+constexpr void *v104 = v84;\n+struct s105 { void *p; };\n+constexpr struct s105 v106 = { (int *) 0 };\n \n void\n f0 ()\n@@ -251,6 +257,11 @@ f0 ()\n   (constexpr union u58) { { 0 } }; /* { dg-warning \"braces around scalar initializer\" } */\n   (constexpr _Complex double) { 1.0 };\n   (constexpr _Complex float) { 12345 };\n+  (constexpr int *) { (int *) 0 };\n+  (constexpr void *) { (void *) (void *) 0 };\n+  (constexpr void *) { v101 };\n+  (constexpr void *) { v84 };\n+  (constexpr struct s105) { (int *) 0 };\n   /* It's not entirely clear if constexpr declarations are allowed in this\n      position in a for loop; presume they are, as implicitly auto just as if no\n      storage class specifiers were used.  */"}, {"sha": "b9b780e5adae3f04ec106020fbdad39ef6a02bc6", "filename": "gcc/testsuite/gcc.dg/c2x-constexpr-3.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53678f7f794aa3ff99d9df87c02abe1caf4ec1d3/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-constexpr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53678f7f794aa3ff99d9df87c02abe1caf4ec1d3/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-constexpr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-constexpr-3.c?ref=53678f7f794aa3ff99d9df87c02abe1caf4ec1d3", "patch": "@@ -102,12 +102,12 @@ struct s85 { int a; } constexpr v85 = { 0 }; /* { dg-error \"'struct s85' defined\n union u86 { int a; } constexpr v86 = { 0 }; /* { dg-error \"'union u86' defined in underspecified object declaration\" } */\n enum e87 { E87 } constexpr v87 = E87; /* { dg-error \"'enum e87' defined in underspecified object declaration\" } */\n enum { E88 } constexpr v88 = E88; /* { dg-error \"defined in underspecified object declaration\" } */\n-constexpr int *v89 = (int *) 0; /* { dg-error \"'constexpr' pointer initializer is not a null pointer constant\" } */\n-constexpr void *v90 = (void *) (void *) 0; /* { dg-error \"'constexpr' pointer initializer is not a null pointer constant\" } */\n+constexpr void *v89 = (void *) 64; /* { dg-error \"'constexpr' pointer initializer is not null\" } */\n+constexpr int *v90 = (int *) 64; /* { dg-error \"'constexpr' pointer initializer is not null\" } */\n constexpr int v91 = (int) (double) 1.0; /* { dg-error \"constexpr' integer initializer is not an integer constant expression\" } */\n constexpr struct s71 v92 = { (int) (double) 1.0, 0 }; /* { dg-error \"constexpr' integer initializer is not an integer constant expression\" } */\n struct s93 { void *p; };\n-constexpr struct s93 v94 = { (int *) 0 }; /* { dg-error \"'constexpr' pointer initializer is not a null pointer constant\" } */\n+constexpr struct s93 v94 = { (int *) 16 }; /* { dg-error \"'constexpr' pointer initializer is not null\" } */\n constexpr int v95 = (unsigned int) -1; /* { dg-error \"'constexpr' initializer not representable in type of object\" } */\n constexpr unsigned char v96 = -1; /* { dg-error \"'constexpr' initializer not representable in type of object\" } */\n constexpr signed char v97 = 1234567LL; /* { dg-error \"'constexpr' initializer not representable in type of object\" } */\n@@ -200,11 +200,11 @@ f0 ()\n   (constexpr union fs13 { int a; }) { 0 }; /* { dg-error \"defined in 'constexpr' compound literal\" } */\n   (constexpr enum fs14 { FS14 }) { FS14 }; /* { dg-error \"defined in 'constexpr' compound literal\" } */\n   (constexpr enum { FS15 }) { FS15 }; /* { dg-error \"defined in 'constexpr' compound literal\" } */\n-  (constexpr int *) { (int *) 0 }; /* { dg-error \"'constexpr' pointer initializer is not a null pointer constant\" } */\n-  (constexpr void *) { (void *) (void *) 0 }; /* { dg-error \"'constexpr' pointer initializer is not a null pointer constant\" } */\n+  (constexpr void *) { (void *) 64 }; /* { dg-error \"'constexpr' pointer initializer is not null\" } */\n+  (constexpr int *) { (int *) 64 }; /* { dg-error \"'constexpr' pointer initializer is not null\" } */\n   (constexpr int) { (int) (double) 1.0 }; /* { dg-error \"constexpr' integer initializer is not an integer constant expression\" } */\n   (constexpr struct s71) { (int) (double) 1.0, 0 }; /* { dg-error \"constexpr' integer initializer is not an integer constant expression\" } */\n-  (constexpr struct s93) { (int *) 0 }; /* { dg-error \"'constexpr' pointer initializer is not a null pointer constant\" } */\n+  (constexpr struct s93) { (int *) 16 }; /* { dg-error \"'constexpr' pointer initializer is not null\" } */\n   (constexpr int) { (unsigned int) -1 }; /* { dg-error \"'constexpr' initializer not representable in type of object\" } */\n   (constexpr unsigned char) { -1 }; /* { dg-error \"'constexpr' initializer not representable in type of object\" } */\n   (constexpr signed char) { 1234567LL }; /* { dg-error \"'constexpr' initializer not representable in type of object\" } */"}]}