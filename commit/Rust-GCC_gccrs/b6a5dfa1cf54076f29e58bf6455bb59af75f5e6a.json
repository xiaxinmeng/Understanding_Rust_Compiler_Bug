{"sha": "b6a5dfa1cf54076f29e58bf6455bb59af75f5e6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZhNWRmYTFjZjU0MDc2ZjI5ZTU4YmY2NDU1YmI1OWFmNzVmNWU2YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-06-06T16:39:52Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-06-06T16:39:52Z"}, "message": "* g++.old-deja/g++.eh/badalloc1.C: New test.\n\nFrom-SVN: r34430", "tree": {"sha": "518b9fa5d1a7fb16fd9c5e830cd1818ff9140deb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/518b9fa5d1a7fb16fd9c5e830cd1818ff9140deb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6a5dfa1cf54076f29e58bf6455bb59af75f5e6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a5dfa1cf54076f29e58bf6455bb59af75f5e6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6a5dfa1cf54076f29e58bf6455bb59af75f5e6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a5dfa1cf54076f29e58bf6455bb59af75f5e6a/comments", "author": null, "committer": null, "parents": [{"sha": "103c63aeb9b6bb856ff8a34b7e35d0dc7ab9bf83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/103c63aeb9b6bb856ff8a34b7e35d0dc7ab9bf83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/103c63aeb9b6bb856ff8a34b7e35d0dc7ab9bf83"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "db0f3cf6a35e4c713de3fbabf2d2a1b103e20244", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a5dfa1cf54076f29e58bf6455bb59af75f5e6a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a5dfa1cf54076f29e58bf6455bb59af75f5e6a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b6a5dfa1cf54076f29e58bf6455bb59af75f5e6a", "patch": "@@ -1,3 +1,7 @@\n+2000-06-06  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.eh/badalloc1.C: New test.\n+\n 2000-06-05  Richard Henderson  <rth@cygnus.com>\n \n \t* gcc.c-torture/execute/20000605-1.c: New test."}, {"sha": "05de379e2b4ca28ec1198f61bb9862d5e0fde242", "filename": "gcc/testsuite/g++.old-deja/g++.eh/badalloc1.C", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a5dfa1cf54076f29e58bf6455bb59af75f5e6a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a5dfa1cf54076f29e58bf6455bb59af75f5e6a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C?ref=b6a5dfa1cf54076f29e58bf6455bb59af75f5e6a", "patch": "@@ -0,0 +1,77 @@\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 6 June 2000 <nathan@codesourcery.com>\n+\n+// Check we can throw a bad_alloc exception when malloc dies\n+\n+static __SIZE_TYPE__ arena[100000]; // so things can initialize\n+static int fail;\n+static unsigned pos;\n+\n+extern \"C\" void *malloc (__SIZE_TYPE__ size)\n+{\n+  unsigned *p = &arena[pos];\n+\n+  if (fail)\n+    return 0;\n+  \n+  arena[pos] = size;\n+  size = (size + 4 * sizeof (__SIZE_TYPE__) - 1)\n+         / sizeof (__SIZE_TYPE__) & ~3; // Yes, this is a hack\n+  pos += size + 4;\n+  return p + 4;\n+}\n+extern \"C\" void free (void *)\n+{\n+  \n+}\n+extern \"C\" void *realloc (void *p, __SIZE_TYPE__ size)\n+{\n+  void *r = malloc (size);\n+  unsigned int oldSize;\n+  \n+  if (r && p)\n+    {\n+      oldSize = ((__SIZE_TYPE__ *)p)[-4];\n+      if (oldSize < size)\n+        size = oldSize;\n+      while (size--)\n+        ((char *)r)[size] = ((char *)p)[size];\n+    }\n+  free (p);\n+  return r;\n+}\n+\n+void fn_throw() throw(int)\n+{\n+  throw 1;\n+}\n+\n+void fn_rethrow() throw(int)\n+{\n+  try{fn_throw();}\n+  catch(int a){\n+    throw;}\n+}\n+\n+void fn_catchthrow() throw(int)\n+{\n+  try{fn_throw();}\n+  catch(int a){\n+    throw a + 1;}\n+}\n+\n+int main()\n+{\n+  fail = 1;\n+\n+  try{fn_throw();}\n+  catch(int a){}\n+\n+  try{fn_rethrow();}\n+  catch(int a){}\n+\n+  try{fn_catchthrow();}\n+  catch(int a){}\n+  \n+  return 0;\n+}"}]}