{"sha": "3d423c6f6a69d87ad52ba3af75f3debd8a8b8810", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q0MjNjNmY2YTY5ZDg3YWQ1MmJhM2FmNzVmM2RlYmQ4YThiODgxMA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-22T11:40:40Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-22T11:40:40Z"}, "message": "c++: Handle RANGE_EXPR index in init_subob_ctx [PR97328]\n\nIn the testcase below, we're ICEing during constexpr evaluation of the\nCONSTRUCTOR {.data={{}, [1 ... 7]={}}} of type 'vector'.  The interesting\nthing about this CONSTRUCTOR is that it has a RANGE_EXPR index for an\nelement initializer which doesn't satisfy reduced_constant_expression_p\n(because the field 't' is uninitialized).\n\nThis is a problem because init_subob_ctx currently punts on setting up a\nsub-aggregate initialization context when given a RANGE_EXPR index, so\nwe later trip over the asserts in verify_ctor_sanity when recursing into\ncxx_eval_bare_aggregate on this element initializer.\n\nFix this by making init_subob_ctx set up an appropriate initialization\ncontext when supplied a RANGE_EXPR index.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97328\n\t* constexpr.c (init_subob_ctx): Don't punt on RANGE_EXPR\n\tindexes, instead build a sub-aggregate initialization context\n\twith no subobject.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97328\n\t* g++.dg/cpp2a/constexpr-init19.C: New test.\n\t* g++.dg/cpp2a/constexpr-init20.C: New test.", "tree": {"sha": "7b18374271775aff161bccee7f25be3014cf0dae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b18374271775aff161bccee7f25be3014cf0dae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d423c6f6a69d87ad52ba3af75f3debd8a8b8810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d423c6f6a69d87ad52ba3af75f3debd8a8b8810", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d423c6f6a69d87ad52ba3af75f3debd8a8b8810", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d423c6f6a69d87ad52ba3af75f3debd8a8b8810/comments", "author": null, "committer": null, "parents": [{"sha": "46fdced6a9f936ae4d5b42347d7d87f69875683a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fdced6a9f936ae4d5b42347d7d87f69875683a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46fdced6a9f936ae4d5b42347d7d87f69875683a"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "4707d29f3bcf964255b76ec5fdbf924451cdb943", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d423c6f6a69d87ad52ba3af75f3debd8a8b8810/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d423c6f6a69d87ad52ba3af75f3debd8a8b8810/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=3d423c6f6a69d87ad52ba3af75f3debd8a8b8810", "patch": "@@ -3954,7 +3954,8 @@ init_subob_ctx (const constexpr_ctx *ctx, constexpr_ctx &new_ctx,\n   new_ctx = *ctx;\n \n   if (index && TREE_CODE (index) != INTEGER_CST\n-      && TREE_CODE (index) != FIELD_DECL)\n+      && TREE_CODE (index) != FIELD_DECL\n+      && TREE_CODE (index) != RANGE_EXPR)\n     /* This won't have an element in the new CONSTRUCTOR.  */\n     return;\n \n@@ -3967,7 +3968,13 @@ init_subob_ctx (const constexpr_ctx *ctx, constexpr_ctx &new_ctx,\n      update object to refer to the subobject and ctor to refer to\n      the (newly created) sub-initializer.  */\n   if (ctx->object)\n-    new_ctx.object = build_ctor_subob_ref (index, type, ctx->object);\n+    {\n+      if (index == NULL_TREE || TREE_CODE (index) == RANGE_EXPR)\n+\t/* There's no well-defined subobject for this index.  */\n+\tnew_ctx.object = NULL_TREE;\n+      else\n+\tnew_ctx.object = build_ctor_subob_ref (index, type, ctx->object);\n+    }\n   tree elt = build_constructor (type, NULL);\n   CONSTRUCTOR_NO_CLEARING (elt) = true;\n   new_ctx.ctor = elt;"}, {"sha": "d354c5ad609e296b0e6a352ad5490701a5f5a746", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init19.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d423c6f6a69d87ad52ba3af75f3debd8a8b8810/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d423c6f6a69d87ad52ba3af75f3debd8a8b8810/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init19.C?ref=3d423c6f6a69d87ad52ba3af75f3debd8a8b8810", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/97328\n+// { dg-do compile { target c++20 } }\n+\n+struct vector {\n+  struct storage {\n+    int t;\n+    constexpr storage() {}\n+  } data[8];\n+};\n+\n+constexpr auto foo() {\n+  vector i;\n+  return i;\n+}\n+auto val = foo();"}, {"sha": "1a6ed8d86dd4f31c75d7bf4c4a9964b1027fc777", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init20.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d423c6f6a69d87ad52ba3af75f3debd8a8b8810/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d423c6f6a69d87ad52ba3af75f3debd8a8b8810/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init20.C?ref=3d423c6f6a69d87ad52ba3af75f3debd8a8b8810", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/97328\n+// { dg-do compile { target c++20 } }\n+\n+struct vector {\n+  union storage {\n+    int t;\n+    constexpr storage() {}\n+  } data[8];\n+};\n+\n+constexpr auto foo() {\n+  vector i;\n+  return i;\n+}\n+auto val = foo();"}]}