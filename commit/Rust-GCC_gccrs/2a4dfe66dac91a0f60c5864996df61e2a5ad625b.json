{"sha": "2a4dfe66dac91a0f60c5864996df61e2a5ad625b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE0ZGZlNjZkYWM5MWEwZjYwYzU4NjQ5OTZkZjYxZTJhNWFkNjI1Yg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2016-01-26T17:44:38Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-01-26T17:44:38Z"}, "message": "PR other/69477 - attribute aligned documentation misleading\n\ngcc/ChangeLog:\n2016-01-26  Martin Sebor  <msebor@redhat.com>\n\n\tPR other/69477\n\t* doc/extend.texi (Common Type Attributes): Move text that talks about\n\tattribute packed from attribute aligned to the section discussing\n\tthe former attribute for clarity.\n\nFrom-SVN: r232840", "tree": {"sha": "65861c0d1f4e515379c3501e59423f679942870f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65861c0d1f4e515379c3501e59423f679942870f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a4dfe66dac91a0f60c5864996df61e2a5ad625b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a4dfe66dac91a0f60c5864996df61e2a5ad625b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a4dfe66dac91a0f60c5864996df61e2a5ad625b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a4dfe66dac91a0f60c5864996df61e2a5ad625b/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ffc445f48618c0bdd51146e9a59cdc5c293f24ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffc445f48618c0bdd51146e9a59cdc5c293f24ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffc445f48618c0bdd51146e9a59cdc5c293f24ec"}], "stats": {"total": 73, "additions": 40, "deletions": 33}, "files": [{"sha": "98716c024773afe5bb388c24e5fc397471875c98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4dfe66dac91a0f60c5864996df61e2a5ad625b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4dfe66dac91a0f60c5864996df61e2a5ad625b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a4dfe66dac91a0f60c5864996df61e2a5ad625b", "patch": "@@ -1,3 +1,10 @@\n+2016-01-26  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR other/69477\n+\t* doc/extend.texi (Common Type Attributes): Move text that talks about\n+\tattribute packed from attribute aligned to the section discussing\n+\tthe former attribute for clarity.\n+\n 2016-01-26  Richard Henderson  <rth@redhat.com>\n \n \tPR middle-end/60908"}, {"sha": "a1c36f5fcf45c41456843600388a43ed8d3514d5", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4dfe66dac91a0f60c5864996df61e2a5ad625b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4dfe66dac91a0f60c5864996df61e2a5ad625b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2a4dfe66dac91a0f60c5864996df61e2a5ad625b", "patch": "@@ -6307,9 +6307,6 @@ relevant type, and the code that the compiler generates for these\n pointer arithmetic operations is often more efficient for\n efficiently-aligned types than for other types.\n \n-The @code{aligned} attribute can only increase the alignment; but you\n-can decrease it by specifying @code{packed} as well.  See below.\n-\n Note that the effectiveness of @code{aligned} attributes may be limited\n by inherent limitations in your linker.  On many systems, the linker is\n only able to arrange for variables to be aligned up to a certain maximum\n@@ -6319,36 +6316,8 @@ up to a maximum of 8-byte alignment, then specifying @code{aligned(16)}\n in an @code{__attribute__} still only provides you with 8-byte\n alignment.  See your linker documentation for further information.\n \n-@opindex fshort-enums\n-Specifying this attribute for @code{struct} and @code{union} types is\n-equivalent to specifying the @code{packed} attribute on each of the\n-structure or union members.  Specifying the @option{-fshort-enums}\n-flag on the line is equivalent to specifying the @code{packed}\n-attribute on all @code{enum} definitions.\n-\n-In the following example @code{struct my_packed_struct}'s members are\n-packed closely together, but the internal layout of its @code{s} member\n-is not packed---to do that, @code{struct my_unpacked_struct} needs to\n-be packed too.\n-\n-@smallexample\n-struct my_unpacked_struct\n- @{\n-    char c;\n-    int i;\n- @};\n-\n-struct __attribute__ ((__packed__)) my_packed_struct\n-  @{\n-     char c;\n-     int  i;\n-     struct my_unpacked_struct s;\n-  @};\n-@end smallexample\n-\n-You may only specify this attribute on the definition of an @code{enum},\n-@code{struct} or @code{union}, not on a @code{typedef} that does not\n-also define the enumerated type, structure or union.\n+The @code{aligned} attribute can only increase alignment.  Alignment\n+can be decreased by specifying the @code{packed} attribute.  See below.\n \n @item bnd_variable_size\n @cindex @code{bnd_variable_size} type attribute\n@@ -6476,6 +6445,37 @@ of the structure or union is placed to minimize the memory required.  When\n attached to an @code{enum} definition, it indicates that the smallest\n integral type should be used.\n \n+@opindex fshort-enums\n+Specifying the @code{packed} attribute for @code{struct} and @code{union}\n+types is equivalent to specifying the @code{packed} attribute on each\n+of the structure or union members.  Specifying the @option{-fshort-enums}\n+flag on the command line is equivalent to specifying the @code{packed}\n+attribute on all @code{enum} definitions.\n+\n+In the following example @code{struct my_packed_struct}'s members are\n+packed closely together, but the internal layout of its @code{s} member\n+is not packed---to do that, @code{struct my_unpacked_struct} needs to\n+be packed too.\n+\n+@smallexample\n+struct my_unpacked_struct\n+ @{\n+    char c;\n+    int i;\n+ @};\n+\n+struct __attribute__ ((__packed__)) my_packed_struct\n+  @{\n+     char c;\n+     int  i;\n+     struct my_unpacked_struct s;\n+  @};\n+@end smallexample\n+\n+You may only specify the @code{packed} attribute attribute on the definition\n+of an @code{enum}, @code{struct} or @code{union}, not on a @code{typedef}\n+that does not also define the enumerated type, structure or union.\n+\n @item scalar_storage_order (\"@var{endianness}\")\n @cindex @code{scalar_storage_order} type attribute\n When attached to a @code{union} or a @code{struct}, this attribute sets"}]}