{"sha": "34969c14bed456b8a4cd76d71319b75342825878", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ5NjljMTRiZWQ0NTZiOGE0Y2Q3NmQ3MTMxOWI3NTM0MjgyNTg3OA==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-31T18:48:22Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-31T19:51:14Z"}, "message": "StructExprTuple doesn't really exist\n\nA StructExprTuple is parsed as a CallExpr. Both (can) start with a\nPathInExpression followed by zero or more Expressions between\nbrackets.\n\nOnly, after type checking, when actually generating gcc generic trees\nis a distinction made between a function call or tuple constructor.\n\nRemove the AST and HIR StructExprTuple classes which are never used.", "tree": {"sha": "bd9bb28d9425588446cb74885aa43c164ce5a262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd9bb28d9425588446cb74885aa43c164ce5a262"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34969c14bed456b8a4cd76d71319b75342825878", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34969c14bed456b8a4cd76d71319b75342825878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34969c14bed456b8a4cd76d71319b75342825878", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34969c14bed456b8a4cd76d71319b75342825878/comments", "author": null, "committer": null, "parents": [{"sha": "82e1061579796adaa39ab34da77b6c8c6ea82539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e1061579796adaa39ab34da77b6c8c6ea82539", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e1061579796adaa39ab34da77b6c8c6ea82539"}], "stats": {"total": 287, "additions": 0, "deletions": 287}, "files": [{"sha": "205da881ed4a578f7b7514d8e9fb5e1757b8a123", "filename": "gcc/rust/ast/rust-ast-full-decls.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-decls.h?ref=34969c14bed456b8a4cd76d71319b75342825878", "patch": "@@ -109,7 +109,6 @@ class StructExprFieldIdentifierValue;\n class StructExprFieldIndexValue;\n class StructExprStructFields;\n class StructExprStructBase;\n-class StructExprTuple;\n class StructExprUnit;\n class EnumVariantExpr;\n class EnumExprField;"}, {"sha": "1a447ae01980eb6f5e11f49bc60722ed6ba918f4", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=34969c14bed456b8a4cd76d71319b75342825878", "patch": "@@ -3239,44 +3239,6 @@ StructExpr::as_string () const\n   return str;\n }\n \n-std::string\n-StructExprTuple::as_string () const\n-{\n-  std::string str = StructExpr::as_string ();\n-\n-  if (exprs.empty ())\n-    {\n-      str += \"()\";\n-    }\n-  else\n-    {\n-      auto i = exprs.begin ();\n-      auto e = exprs.end ();\n-\n-      // debug - null pointer check\n-      if (*i == nullptr)\n-\treturn \"ERROR_MARK_STRING - nullptr struct expr tuple field\";\n-\n-      str += '(';\n-      for (; i != e; i++)\n-\t{\n-\t  str += (*i)->as_string ();\n-\t  if (e != i + 1)\n-\t    str += \", \";\n-\t}\n-      str += ')';\n-    }\n-\n-  indent_spaces (enter);\n-  indent_spaces (enter);\n-  // inner attributes\n-  str += append_attributes (inner_attrs, INNER);\n-  indent_spaces (out);\n-  indent_spaces (out);\n-\n-  return str;\n-}\n-\n std::string\n StructExprStruct::as_string () const\n {\n@@ -5222,12 +5184,6 @@ StructExprStructBase::accept_vis (ASTVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-StructExprTuple::accept_vis (ASTVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n StructExprUnit::accept_vis (ASTVisitor &vis)\n {"}, {"sha": "30e156facbbfb3381447705011194184c65a6053", "filename": "gcc/rust/ast/rust-ast-visitor.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-visitor.h?ref=34969c14bed456b8a4cd76d71319b75342825878", "patch": "@@ -93,7 +93,6 @@ class ASTVisitor\n   virtual void visit (StructExprFieldIndexValue &field) = 0;\n   virtual void visit (StructExprStructFields &expr) = 0;\n   virtual void visit (StructExprStructBase &expr) = 0;\n-  virtual void visit (StructExprTuple &expr) = 0;\n   virtual void visit (StructExprUnit &expr) = 0;\n   // virtual void visit(EnumExprField& field) = 0;\n   virtual void visit (EnumExprFieldIdentifier &field) = 0;"}, {"sha": "effdb2303192a44ac3d64408b82a604521589c33", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=34969c14bed456b8a4cd76d71319b75342825878", "patch": "@@ -1852,75 +1852,6 @@ class StructExprStructBase : public StructExprStruct\n   }\n };\n \n-// AST node of a tuple struct creator\n-class StructExprTuple : public StructExpr\n-{\n-  std::vector<Attribute> inner_attrs;\n-  std::vector<std::unique_ptr<Expr> > exprs;\n-\n-  Location locus;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  const std::vector<Attribute> &get_inner_attrs () const { return inner_attrs; }\n-  std::vector<Attribute> &get_inner_attrs () { return inner_attrs; }\n-\n-  StructExprTuple (PathInExpression struct_path,\n-\t\t   std::vector<std::unique_ptr<Expr> > tuple_exprs,\n-\t\t   std::vector<Attribute> inner_attribs,\n-\t\t   std::vector<Attribute> outer_attribs, Location locus)\n-    : StructExpr (std::move (struct_path), std::move (outer_attribs)),\n-      inner_attrs (std::move (inner_attribs)), exprs (std::move (tuple_exprs)),\n-      locus (locus)\n-  {}\n-\n-  // copy constructor with vector clone\n-  StructExprTuple (StructExprTuple const &other)\n-    : StructExpr (other), inner_attrs (other.inner_attrs), locus (other.locus)\n-  {\n-    exprs.reserve (other.exprs.size ());\n-    for (const auto &e : other.exprs)\n-      exprs.push_back (e->clone_expr ());\n-  }\n-\n-  // overloaded assignment operator with vector clone\n-  StructExprTuple &operator= (StructExprTuple const &other)\n-  {\n-    StructExpr::operator= (other);\n-    inner_attrs = other.inner_attrs;\n-    locus = other.locus;\n-\n-    exprs.reserve (other.exprs.size ());\n-    for (const auto &e : other.exprs)\n-      exprs.push_back (e->clone_expr ());\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  StructExprTuple (StructExprTuple &&other) = default;\n-  StructExprTuple &operator= (StructExprTuple &&other) = default;\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (ASTVisitor &vis) override;\n-\n-  const std::vector<std::unique_ptr<Expr> > &get_elems () const\n-  {\n-    return exprs;\n-  }\n-  std::vector<std::unique_ptr<Expr> > &get_elems () { return exprs; }\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  StructExprTuple *clone_expr_without_block_impl () const override\n-  {\n-    return new StructExprTuple (*this);\n-  }\n-};\n-\n // AST node of a \"unit\" struct creator (no fields and no braces)\n class StructExprUnit : public StructExpr\n {"}, {"sha": "d7cc009133b9080c14e3f0a9c7eb449612b5a358", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=34969c14bed456b8a4cd76d71319b75342825878", "patch": "@@ -72,7 +72,6 @@ class HIRCompileBase : public HIR::HIRVisitor\n   virtual void visit (HIR::StructExprFieldIndexValue &field) {}\n   virtual void visit (HIR::StructExprStructFields &expr) {}\n   virtual void visit (HIR::StructExprStructBase &expr) {}\n-  virtual void visit (HIR::StructExprTuple &expr) {}\n   virtual void visit (HIR::StructExprUnit &expr) {}\n   // virtual void visit(EnumExprField& field) {}\n   virtual void visit (HIR::EnumExprFieldIdentifier &field) {}"}, {"sha": "060d41ad04c5d1cfd8159788d584ed4fc208d936", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=34969c14bed456b8a4cd76d71319b75342825878", "patch": "@@ -939,36 +939,6 @@ class AttrVisitor : public AST::ASTVisitor\n \t\t     \"cannot strip expression in this position - outer \"\n \t\t     \"attributes not allowed\");\n   }\n-  void visit (AST::StructExprTuple &expr) override\n-  {\n-    // initial strip test based on outer attrs\n-    expander.expand_cfg_attrs (expr.get_outer_attrs ());\n-    if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n-      {\n-\texpr.mark_for_strip ();\n-\treturn;\n-      }\n-\n-    /* strip test based on inner attrs - spec says these are inner\n-     * attributes, not outer attributes of inner expr */\n-    expander.expand_cfg_attrs (expr.get_inner_attrs ());\n-    if (expander.fails_cfg_with_expand (expr.get_inner_attrs ()))\n-      {\n-\texpr.mark_for_strip ();\n-\treturn;\n-      }\n-\n-    // strip sub-exprs of path\n-    auto &struct_name = expr.get_struct_name ();\n-    visit (struct_name);\n-    if (struct_name.is_marked_for_strip ())\n-      rust_error_at (struct_name.get_locus (),\n-\t\t     \"cannot strip path in this position\");\n-\n-    /* spec says outer attributes are specifically allowed for elements\n-     * of tuple-style struct expressions, so full stripping possible */\n-    expand_pointer_allow_strip (expr.get_elems ());\n-  }\n   void visit (AST::StructExprUnit &expr) override\n   {\n     // initial strip test based on outer attrs"}, {"sha": "e4303f2942c6deadfd8902da9de2cbd5d85e188e", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=34969c14bed456b8a4cd76d71319b75342825878", "patch": "@@ -96,7 +96,6 @@ class ASTLoweringBase : public AST::ASTVisitor\n   virtual void visit (AST::StructExprFieldIndexValue &field) {}\n   virtual void visit (AST::StructExprStructFields &expr) {}\n   virtual void visit (AST::StructExprStructBase &expr) {}\n-  virtual void visit (AST::StructExprTuple &expr) {}\n   virtual void visit (AST::StructExprUnit &expr) {}\n   //  virtual void visit(EnumExprField& field) {}\n   virtual void visit (AST::EnumExprFieldIdentifier &field) {}"}, {"sha": "d099455f9fb9db6e8fadb84f5e17a4893ffff5b6", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=34969c14bed456b8a4cd76d71319b75342825878", "patch": "@@ -1578,80 +1578,6 @@ class StructExprStructBase : public StructExprStruct\n   }\n };\n \n-// HIR node of a tuple struct creator\n-class StructExprTuple : public StructExpr\n-{\n-  AST::AttrVec inner_attrs;\n-  std::vector<std::unique_ptr<Expr> > exprs;\n-\n-  Location locus;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  const AST::AttrVec &get_inner_attrs () const { return inner_attrs; }\n-\n-  /*inline std::vector<std::unique_ptr<Expr>> get_exprs() const {\n-      return exprs;\n-  }*/\n-\n-  StructExprTuple (Analysis::NodeMapping mappings, PathInExpression struct_path,\n-\t\t   std::vector<std::unique_ptr<Expr> > tuple_exprs,\n-\t\t   AST::AttrVec inner_attribs, AST::AttrVec outer_attribs,\n-\t\t   Location locus)\n-    : StructExpr (std::move (mappings), std::move (struct_path),\n-\t\t  std::move (outer_attribs)),\n-      inner_attrs (std::move (inner_attribs)), exprs (std::move (tuple_exprs)),\n-      locus (locus)\n-  {}\n-\n-  // copy constructor with vector clone\n-  StructExprTuple (StructExprTuple const &other)\n-    : StructExpr (other), inner_attrs (other.inner_attrs), locus (other.locus)\n-  {\n-    exprs.reserve (other.exprs.size ());\n-    for (const auto &e : other.exprs)\n-      exprs.push_back (e->clone_expr ());\n-  }\n-\n-  // overloaded assignment operator with vector clone\n-  StructExprTuple &operator= (StructExprTuple const &other)\n-  {\n-    StructExpr::operator= (other);\n-    inner_attrs = other.inner_attrs;\n-    locus = other.locus;\n-\n-    exprs.reserve (other.exprs.size ());\n-    for (const auto &e : other.exprs)\n-      exprs.push_back (e->clone_expr ());\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  StructExprTuple (StructExprTuple &&other) = default;\n-  StructExprTuple &operator= (StructExprTuple &&other) = default;\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (HIRVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  StructExprTuple *clone_expr_impl () const override\n-  {\n-    return new StructExprTuple (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  StructExprTuple *clone_expr_without_block_impl () const override\n-  {\n-    return new StructExprTuple (*this);\n-  }\n-};\n-\n // HIR node of a \"unit\" struct creator (no fields and no braces)\n class StructExprUnit : public StructExpr\n {"}, {"sha": "11b82267333e90f6b974baab6b1b6ed1a10d93ad", "filename": "gcc/rust/hir/tree/rust-hir-full-decls.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h?ref=34969c14bed456b8a4cd76d71319b75342825878", "patch": "@@ -90,7 +90,6 @@ class StructExprFieldIdentifierValue;\n class StructExprFieldIndexValue;\n class StructExprStructFields;\n class StructExprStructBase;\n-class StructExprTuple;\n class StructExprUnit;\n class EnumVariantExpr;\n class EnumExprField;"}, {"sha": "67a193594decaa6e3f7e5a6694662039a633d148", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=34969c14bed456b8a4cd76d71319b75342825878", "patch": "@@ -2994,59 +2994,6 @@ StructExpr::as_string () const\n   return str;\n }\n \n-std::string\n-StructExprTuple::as_string () const\n-{\n-  std::string str = StructExpr::as_string ();\n-\n-  if (exprs.empty ())\n-    {\n-      str += \"()\";\n-    }\n-  else\n-    {\n-      auto i = exprs.begin ();\n-      auto e = exprs.end ();\n-\n-      // debug - null pointer check\n-      if (*i == nullptr)\n-\t{\n-\t  return \"ERROR_MARK_STRING - nullptr struct expr tuple field\";\n-\t}\n-\n-      str += '(';\n-      for (; i != e; i++)\n-\t{\n-\t  str += (*i)->as_string ();\n-\t  if (e != i + 1)\n-\t    str += \", \";\n-\t}\n-      str += ')';\n-    }\n-\n-  indent_spaces (enter);\n-  indent_spaces (enter);\n-  // inner attributes\n-  str += \"\\n\" + indent_spaces (stay) + \"inner attributes:\";\n-  if (inner_attrs.empty ())\n-    {\n-      str += \"none\";\n-    }\n-  else\n-    {\n-      /* note that this does not print them with \"inner attribute\" syntax -\n-       * just the body */\n-      for (const auto &attr : inner_attrs)\n-\t{\n-\t  str += \"\\n\" + indent_spaces (stay) + attr.as_string ();\n-\t}\n-    }\n-  indent_spaces (out);\n-  indent_spaces (out);\n-\n-  return str;\n-}\n-\n std::string\n StructExprStruct::as_string () const\n {\n@@ -3983,12 +3930,6 @@ StructExprStructBase::accept_vis (HIRVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-StructExprTuple::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n StructExprUnit::accept_vis (HIRVisitor &vis)\n {"}, {"sha": "dffd0d565bb2ad12d7d18ef8813ef138d1b3da15", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=34969c14bed456b8a4cd76d71319b75342825878", "patch": "@@ -60,7 +60,6 @@ class HIRVisitor\n   virtual void visit (StructExprFieldIndexValue &field) = 0;\n   virtual void visit (StructExprStructFields &expr) = 0;\n   virtual void visit (StructExprStructBase &expr) = 0;\n-  virtual void visit (StructExprTuple &expr) = 0;\n   virtual void visit (StructExprUnit &expr) = 0;\n   virtual void visit (EnumExprFieldIdentifier &field) = 0;\n   virtual void visit (EnumExprFieldIdentifierValue &field) = 0;"}, {"sha": "0354ad2e6f0563b83c32f4fcc238d60f6950b70e", "filename": "gcc/rust/lint/rust-lint-marklive-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive-base.h?ref=34969c14bed456b8a4cd76d71319b75342825878", "patch": "@@ -70,7 +70,6 @@ class MarkLiveBase : public HIR::HIRVisitor\n   virtual void visit (HIR::StructExprFieldIndexValue &) override {}\n   virtual void visit (HIR::StructExprStructFields &) override {}\n   virtual void visit (HIR::StructExprStructBase &) override {}\n-  virtual void visit (HIR::StructExprTuple &) override {}\n   virtual void visit (HIR::StructExprUnit &) override {}\n \n   virtual void visit (HIR::EnumExprFieldIdentifier &) override {}"}, {"sha": "42c938d4fcf0380269e36585555c07eb604ae70b", "filename": "gcc/rust/resolve/rust-ast-resolve-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h?ref=34969c14bed456b8a4cd76d71319b75342825878", "patch": "@@ -73,7 +73,6 @@ class ResolverBase : public AST::ASTVisitor\n   void visit (AST::StructExprFieldIndexValue &) {}\n   void visit (AST::StructExprStructFields &) {}\n   void visit (AST::StructExprStructBase &) {}\n-  void visit (AST::StructExprTuple &) {}\n   void visit (AST::StructExprUnit &) {}\n   void visit (AST::EnumExprFieldIdentifier &) {}\n   void visit (AST::EnumExprFieldIdentifierValue &) {}"}, {"sha": "7a6d6c5c2071a35516aa4b39f67dd1110300aa72", "filename": "gcc/rust/typecheck/rust-hir-const-fold-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold-base.h?ref=34969c14bed456b8a4cd76d71319b75342825878", "patch": "@@ -73,7 +73,6 @@ class ConstFoldBase : public HIR::HIRVisitor\n   virtual void visit (HIR::StructExprFieldIndexValue &) override {}\n   virtual void visit (HIR::StructExprStructFields &) override {}\n   virtual void visit (HIR::StructExprStructBase &) override {}\n-  virtual void visit (HIR::StructExprTuple &) override {}\n   virtual void visit (HIR::StructExprUnit &) override {}\n \n   virtual void visit (HIR::EnumExprFieldIdentifier &) override {}"}, {"sha": "162df2d5959ac8756993b5f35eb47f429eee643c", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=34969c14bed456b8a4cd76d71319b75342825878", "patch": "@@ -74,7 +74,6 @@ class TypeCheckBase : public HIR::HIRVisitor\n   virtual void visit (HIR::StructExprFieldIndexValue &) override {}\n   virtual void visit (HIR::StructExprStructFields &) override {}\n   virtual void visit (HIR::StructExprStructBase &) override {}\n-  virtual void visit (HIR::StructExprTuple &) override {}\n   virtual void visit (HIR::StructExprUnit &) override {}\n \n   virtual void visit (HIR::EnumExprFieldIdentifier &) override {}"}, {"sha": "a2f1a43a8fdc0d95527411778caca8520d6fb525", "filename": "gcc/rust/typecheck/rust-hir-type-check-util.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34969c14bed456b8a4cd76d71319b75342825878/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-util.h?ref=34969c14bed456b8a4cd76d71319b75342825878", "patch": "@@ -68,7 +68,6 @@ class SimpleHirVisitor : public HIR::HIRVisitor\n   virtual void visit (HIR::StructExprFieldIndexValue &) override {}\n   virtual void visit (HIR::StructExprStructFields &) override {}\n   virtual void visit (HIR::StructExprStructBase &) override {}\n-  virtual void visit (HIR::StructExprTuple &) override {}\n   virtual void visit (HIR::StructExprUnit &) override {}\n \n   virtual void visit (HIR::EnumExprFieldIdentifier &) override {}"}]}