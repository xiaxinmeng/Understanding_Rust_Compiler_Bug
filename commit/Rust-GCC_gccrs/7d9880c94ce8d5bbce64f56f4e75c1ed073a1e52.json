{"sha": "7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q5ODgwYzk0Y2U4ZDViYmNlNjRmNTZmNGU3NWMxZWQwNzNhMWU1Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-28T08:19:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-28T08:19:18Z"}, "message": "[multiple changes]\n\n2015-05-28  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch13.adb, sem_disp.ads: Minor reformatting.\n\n2015-05-28  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb (Set_Debug_Info_Needed): For a private type\n\twhose full view is itself a derived private type, set flag on\n\tunderlying full view as well, for proper gdb display.\n\n2015-05-28  Bob Duff  <duff@adacore.com>\n\n\t* exp_tss.ads: Minor comment fix.\n\t* exp_ch3.adb (Build_Array_Init_Proc, Build_Record_Init_Proc):\n\tInline init_procs when the type has controlled parts. Remove\n\tobsolete comments about those init_procs -- init_procs for\n\tsuch types are no longer complex. A typical init_proc just\n\tinitializes the 'Tag field, and calls the parent init_proc\n\t(e.g. for Limited_Controlled), which calls the grandparent\n\t(for Root_Controlled), which does nothing. This all boils down\n\tto one instruction when inlined.\n\t* exp_ch7.adb (Create_Finalizer): Inline the finalizer.\n\n2015-05-28  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Analyze_Selected_Component): If the type to use\n\tis a derived type and is a generic actual, the selected component\n\tappears within an instance body, and the check over the type\n\thas failed, examine ancestor types for the desired component.\n\t(Find_Component_In_Instance): If record type is a derived type,\n\texamine all ancestors in order to locate desired component.\n\nFrom-SVN: r223800", "tree": {"sha": "87ddbfc54b121aaa33ef712bdfdbd05e7afa9629", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87ddbfc54b121aaa33ef712bdfdbd05e7afa9629"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52/comments", "author": null, "committer": null, "parents": [{"sha": "55ffa75632e635c049c238db332c20de1b3116c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55ffa75632e635c049c238db332c20de1b3116c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55ffa75632e635c049c238db332c20de1b3116c2"}], "stats": {"total": 141, "additions": 110, "deletions": 31}, "files": [{"sha": "c9f142ff7132b9ee1c32f0a86e1c74404295a928", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52", "patch": "@@ -1,3 +1,35 @@\n+2015-05-28  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch13.adb, sem_disp.ads: Minor reformatting.\n+\n+2015-05-28  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Set_Debug_Info_Needed): For a private type\n+\twhose full view is itself a derived private type, set flag on\n+\tunderlying full view as well, for proper gdb display.\n+\n+2015-05-28  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_tss.ads: Minor comment fix.\n+\t* exp_ch3.adb (Build_Array_Init_Proc, Build_Record_Init_Proc):\n+\tInline init_procs when the type has controlled parts. Remove\n+\tobsolete comments about those init_procs -- init_procs for\n+\tsuch types are no longer complex. A typical init_proc just\n+\tinitializes the 'Tag field, and calls the parent init_proc\n+\t(e.g. for Limited_Controlled), which calls the grandparent\n+\t(for Root_Controlled), which does nothing. This all boils down\n+\tto one instruction when inlined.\n+\t* exp_ch7.adb (Create_Finalizer): Inline the finalizer.\n+\n+2015-05-28  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Selected_Component): If the type to use\n+\tis a derived type and is a generic actual, the selected component\n+\tappears within an instance body, and the check over the type\n+\thas failed, examine ancestor types for the desired component.\n+\t(Find_Component_In_Instance): If record type is a derived type,\n+\texamine all ancestors in order to locate desired component.\n+\n 2015-05-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc-interface/Makefile.in (TOOLS_LIBS): Add @NO_PIE_FLAG@."}, {"sha": "885e63a4ae9d80387d37fa8d2186933de76ff84f", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52", "patch": "@@ -311,7 +311,7 @@ package body Exp_Ch3 is\n    --  Predefined_Primitive_Bodies.\n \n    function Has_New_Non_Standard_Rep (T : Entity_Id) return Boolean;\n-   --  returns True if there are representation clauses for type T that are not\n+   --  Returns True if there are representation clauses for type T that are not\n    --  inherited. If the result is false, the init_proc and the discriminant\n    --  checking functions of the parent can be reused by a derived type.\n \n@@ -761,14 +761,12 @@ package body Exp_Ch3 is\n             Set_Debug_Info_Off (Proc_Id);\n          end if;\n \n-         --  Set inlined unless controlled stuff or tasks around, in which\n-         --  case we do not want to inline, because nested stuff may cause\n-         --  difficulties in inter-unit inlining, and furthermore there is\n-         --  in any case no point in inlining such complex init procs.\n+         --  Set inlined unless tasks are around, in which case we do not\n+         --  want to inline, because nested stuff may cause difficulties in\n+         --  inter-unit inlining, and furthermore there is in any case no\n+         --  point in inlining such complex init procs.\n \n-         if not Has_Task (Proc_Id)\n-           and then not Needs_Finalization (Proc_Id)\n-         then\n+         if not Has_Task (Proc_Id) then\n             Set_Is_Inlined (Proc_Id);\n          end if;\n \n@@ -3619,14 +3617,10 @@ package body Exp_Ch3 is\n          --  The initialization of protected records is not worth inlining.\n          --  In addition, when compiled for another unit for inlining purposes,\n          --  it may make reference to entities that have not been elaborated\n-         --  yet. The initialization of controlled records contains a nested\n-         --  clean-up procedure that makes it impractical to inline as well,\n-         --  and leads to undefined symbols if inlined in a different unit.\n-         --  Similar considerations apply to task types.\n+         --  yet. Similar considerations apply to task types.\n \n          if not Is_Concurrent_Type (Rec_Type)\n            and then not Has_Task (Rec_Type)\n-           and then not Needs_Finalization (Rec_Type)\n          then\n             Set_Is_Inlined  (Proc_Id);\n          end if;"}, {"sha": "23d97d502e8807da89d2aa5c4bd9637b55468fe6", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52", "patch": "@@ -1440,6 +1440,13 @@ package body Exp_Ch7 is\n             --  resides, there is no need for elaboration checks.\n \n             Set_Kill_Elaboration_Checks (Fin_Id);\n+\n+            --  Inlining the finalizer produces a substantial speedup at -O2.\n+            --  It is inlined by default at -O3. Either way, it is called\n+            --  exactly twice (once on the normal path, and once for\n+            --  exceptions/abort), so this won't bloat the code too much.\n+\n+            Set_Is_Inlined  (Fin_Id);\n          end if;\n \n          --  Step 2: Creation of the finalizer specification"}, {"sha": "a66e41d5d294ade7fba0280f87b5ab6be8401e61", "filename": "gcc/ada/exp_tss.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52/gcc%2Fada%2Fexp_tss.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52/gcc%2Fada%2Fexp_tss.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_tss.ads?ref=7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -213,7 +213,7 @@ package Exp_Tss is\n    --  case arises for concurrent types. Such types do not themselves have an\n    --  init proc TSS, but initialization is required. The init proc used is\n    --  the one for the corresponding record type (see Base_Init_Proc). If\n-   --  Ref is present it is call to a subprogram whose profile matches the\n+   --  Ref is present it is a call to a subprogram whose profile matches the\n    --  profile of the required constructor (this argument is used to handle\n    --  non-default CPP constructors).\n "}, {"sha": "5494d3321841c4f03d7d18ef7dc2c6a84c45d6df", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52", "patch": "@@ -6496,7 +6496,7 @@ package body Sem_Ch13 is\n          return;\n       end if;\n \n-      --  We know we have a first subtype, now possibly go the anonymous\n+      --  We know we have a first subtype, now possibly go to the anonymous\n       --  base type to determine whether Rectype is a record extension.\n \n       Recdef := Type_Definition (Declaration_Node (Base_Type (Rectype)));"}, {"sha": "80f023408ec5a69e2627b72d49c91fb519ea0d6a", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 40, "deletions": 9, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52", "patch": "@@ -4102,7 +4102,8 @@ package body Sem_Ch4 is\n       --  searches have failed. If a match is found, the Etype of both N and\n       --  Sel are set from this component, and the entity of Sel is set to\n       --  reference this component. If no match is found, Entity (Sel) remains\n-      --  unset.\n+      --  unset. For a derived type that is an actual of the instance, the\n+      --  desired component may be found in any ancestor.\n \n       function Has_Mode_Conformant_Spec (Comp : Entity_Id) return Boolean;\n       --  It is known that the parent of N denotes a subprogram call. Comp\n@@ -4117,18 +4118,36 @@ package body Sem_Ch4 is\n \n       procedure Find_Component_In_Instance (Rec : Entity_Id) is\n          Comp : Entity_Id;\n+         Typ  : Entity_Id;\n \n       begin\n-         Comp := First_Component (Rec);\n-         while Present (Comp) loop\n-            if Chars (Comp) = Chars (Sel) then\n-               Set_Entity_With_Checks (Sel, Comp);\n-               Set_Etype (Sel, Etype (Comp));\n-               Set_Etype (N,   Etype (Comp));\n+         Typ := Rec;\n+         while Present (Typ) loop\n+            Comp := First_Component (Typ);\n+            while Present (Comp) loop\n+               if Chars (Comp) = Chars (Sel) then\n+                  Set_Entity_With_Checks (Sel, Comp);\n+                  Set_Etype (Sel, Etype (Comp));\n+                  Set_Etype (N,   Etype (Comp));\n+                  return;\n+               end if;\n+\n+               Next_Component (Comp);\n+            end loop;\n+\n+            --  If not found, the component may be declared in the parent\n+            --  type or its full view, if any.\n+\n+            if Is_Derived_Type (Typ) then\n+               Typ := Etype (Typ);\n+\n+               if Is_Private_Type (Typ) then\n+                  Typ := Full_View (Typ);\n+               end if;\n+\n+            else\n                return;\n             end if;\n-\n-            Next_Component (Comp);\n          end loop;\n \n          --  If we fall through, no match, so no changes made\n@@ -4789,6 +4808,18 @@ package body Sem_Ch4 is\n                      Par := Etype (Par);\n                   end loop;\n \n+               --  Another special case: the type is an extension of a private\n+               --  type T, is an actual in an instance, and we are in the body\n+               --  of the instance, so the generic body had a full view of the\n+               --  type declaration for T or of some ancestor that defines the\n+               --  component in question.\n+\n+               elsif Is_Derived_Type (Type_To_Use)\n+                 and then Used_As_Generic_Actual (Type_To_Use)\n+                 and then In_Instance_Body\n+               then\n+                  Find_Component_In_Instance (Parent_Subtype (Type_To_Use));\n+\n                --  In ASIS mode the generic parent type may be absent. Examine\n                --  the parent type directly for a component that may have been\n                --  visible in a parent generic unit."}, {"sha": "6100afcf5eb1844a7b85e072ac870cfb298441a4", "filename": "gcc/ada/sem_disp.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52/gcc%2Fada%2Fsem_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52/gcc%2Fada%2Fsem_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.ads?ref=7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52", "patch": "@@ -48,11 +48,11 @@ package Sem_Disp is\n    --  primitive operations (new primitives are only defined in package spec,\n    --  overridden operation can be defined in any scope). If Old_Subp is not\n    --  Empty we are in the overriding case. If the tagged type associated with\n-   --  Subp is a concurrent type (case that occurs when the type is declared in\n-   --  a generic because the analysis of generics disables generation of the\n-   --  corresponding record) then this routine does not add Subp to the\n-   --  list of primitive operations but leaves Subp decorated as dispatching\n-   --  operation to enable checks associated with the Object.Operation notation\n+   --  Subp is a concurrent type (case that occurs when the type is declared\n+   --  in a generic because the analysis of generics disables generation of the\n+   --  corresponding record) then this routine does not add Subp to the list of\n+   --  primitive operations but leaves Subp decorated as dispatching operation\n+   --  to enable checks associated with the Object.Operation notation.\n \n    procedure Check_Operation_From_Incomplete_Type\n      (Subp : Entity_Id;"}, {"sha": "d749ea1c5fe43bac16a5c6c182643292411dbc50", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52", "patch": "@@ -17704,7 +17704,22 @@ package body Sem_Util is\n             Set_Debug_Info_Needed_If_Not_Set (Directly_Designated_Type (T));\n \n          elsif Is_Private_Type (T) then\n-            Set_Debug_Info_Needed_If_Not_Set (Full_View (T));\n+            declare\n+               FV : constant Entity_Id := Full_View (T);\n+\n+            begin\n+               Set_Debug_Info_Needed_If_Not_Set (FV);\n+\n+               --  If the full view is itself a derived private type, we need\n+               --  debug information on its underlying type.\n+\n+               if Present (FV)\n+                 and then Is_Private_Type (FV)\n+                 and then Present (Underlying_Full_View (FV))\n+               then\n+                  Set_Needs_Debug_Info (Underlying_Full_View (FV));\n+               end if;\n+            end;\n \n          elsif Is_Protected_Type (T) then\n             Set_Debug_Info_Needed_If_Not_Set (Corresponding_Record_Type (T));"}]}