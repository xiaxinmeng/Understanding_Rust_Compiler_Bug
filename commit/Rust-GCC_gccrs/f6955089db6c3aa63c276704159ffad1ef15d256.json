{"sha": "f6955089db6c3aa63c276704159ffad1ef15d256", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY5NTUwODlkYjZjM2FhNjNjMjc2NzA0MTU5ZmZhZDFlZjE1ZDI1Ng==", "commit": {"author": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2020-04-27T01:37:27Z"}, "committer": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2020-04-27T01:41:38Z"}, "message": "rs6000: Don't use HARD_FRAME_POINTER_REGNUM if it's not live in pro_and_epilogue (PR91518)\n\nThis bug is exposed by FRE refactor of r263875.  Comparing the fre\ndump file shows no obvious change of the segment fault function proves\nit to be a target issue.\nframe_pointer_needed is set to true in reload pass setup_can_eliminate,\nbut regs_ever_live[31] is false, pro_and_epilogue uses it without live\ncheck causing CPU2006 465.tonto segment fault of loading from invalid\naddresses due to r31 not saved/restored.  Thus, add HARD_FRAME_POINTER_REGNUM\nlive check with frame_pointer_needed_indeed when generating pro_and_epilogue\ninstructions.\n\ngcc/ChangeLog\n\n2020-04-27  Xiong Hu Luo  <luoxhu@linux.ibm.com>\n\n\tPR target/91518\n\t* config/rs6000/rs6000-logue.c (frame_pointer_needed_indeed):\n\tNew variable.\n\t(rs6000_emit_prologue_components):\n\tCheck with frame_pointer_needed_indeed.\n\t(rs6000_emit_epilogue_components): Likewise.\n\t(rs6000_emit_prologue): Likewise.\n\t(rs6000_emit_epilogue): Set frame_pointer_needed_indeed.", "tree": {"sha": "0433341f8d43b3c95276846b1130cb88eb5e535b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0433341f8d43b3c95276846b1130cb88eb5e535b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6955089db6c3aa63c276704159ffad1ef15d256", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6955089db6c3aa63c276704159ffad1ef15d256", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6955089db6c3aa63c276704159ffad1ef15d256", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6955089db6c3aa63c276704159ffad1ef15d256/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfdea9ae81f924ecdcc6be9bd64b6c9084881088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfdea9ae81f924ecdcc6be9bd64b6c9084881088", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfdea9ae81f924ecdcc6be9bd64b6c9084881088"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "36b5720756a3a208466ee3084ceef306d4ebf09d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6955089db6c3aa63c276704159ffad1ef15d256/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6955089db6c3aa63c276704159ffad1ef15d256/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6955089db6c3aa63c276704159ffad1ef15d256", "patch": "@@ -1,3 +1,14 @@\n+2020-04-27  Xiong Hu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR target/91518\n+\t* config/rs6000/rs6000-logue.c (frame_pointer_needed_indeed):\n+\tNew variable.\n+\t(rs6000_emit_prologue_components):\n+\tCheck with frame_pointer_needed_indeed.\n+\t(rs6000_emit_epilogue_components): Likewise.\n+\t(rs6000_emit_prologue): Likewise.\n+\t(rs6000_emit_epilogue): Set frame_pointer_needed_indeed.\n+\n 2020-04-25  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/rs6000-logue.c (rs6000_stack_info): Don't push a"}, {"sha": "6aad1ff826ab6ff9e5afa9b2afba239854ab43e7", "filename": "gcc/config/rs6000/rs6000-logue.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6955089db6c3aa63c276704159ffad1ef15d256/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6955089db6c3aa63c276704159ffad1ef15d256/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c?ref=f6955089db6c3aa63c276704159ffad1ef15d256", "patch": "@@ -58,6 +58,8 @@ static bool rs6000_save_toc_in_prologue_p (void);\n \n static rs6000_stack_t stack_info;\n \n+/* Set if HARD_FRAM_POINTER_REGNUM is really needed.  */\n+static bool frame_pointer_needed_indeed = false;\n \n /* Label number of label created for -mrelocatable, to call to so we can\n    get the address of the GOT section */\n@@ -2735,9 +2737,9 @@ void\n rs6000_emit_prologue_components (sbitmap components)\n {\n   rs6000_stack_t *info = rs6000_stack_info ();\n-  rtx ptr_reg = gen_rtx_REG (Pmode, frame_pointer_needed\n-\t\t\t     ? HARD_FRAME_POINTER_REGNUM\n-\t\t\t     : STACK_POINTER_REGNUM);\n+  rtx ptr_reg = gen_rtx_REG (Pmode, frame_pointer_needed_indeed\n+\t\t\t\t      ? HARD_FRAME_POINTER_REGNUM\n+\t\t\t\t      : STACK_POINTER_REGNUM);\n \n   machine_mode reg_mode = Pmode;\n   int reg_size = TARGET_32BIT ? 4 : 8;\n@@ -2815,9 +2817,9 @@ void\n rs6000_emit_epilogue_components (sbitmap components)\n {\n   rs6000_stack_t *info = rs6000_stack_info ();\n-  rtx ptr_reg = gen_rtx_REG (Pmode, frame_pointer_needed\n-\t\t\t     ? HARD_FRAME_POINTER_REGNUM\n-\t\t\t     : STACK_POINTER_REGNUM);\n+  rtx ptr_reg = gen_rtx_REG (Pmode, frame_pointer_needed_indeed\n+\t\t\t\t      ? HARD_FRAME_POINTER_REGNUM\n+\t\t\t\t      : STACK_POINTER_REGNUM);\n \n   machine_mode reg_mode = Pmode;\n   int reg_size = TARGET_32BIT ? 4 : 8;\n@@ -2996,7 +2998,10 @@ rs6000_emit_prologue (void)\n                            && (lookup_attribute (\"no_split_stack\",\n                                                  DECL_ATTRIBUTES (cfun->decl))\n                                == NULL));\n- \n+\n+  frame_pointer_needed_indeed\n+    = frame_pointer_needed && df_regs_ever_live_p (HARD_FRAME_POINTER_REGNUM);\n+\n   /* Offset to top of frame for frame_reg and sp respectively.  */\n   HOST_WIDE_INT frame_off = 0;\n   HOST_WIDE_INT sp_off = 0;\n@@ -3658,7 +3663,7 @@ rs6000_emit_prologue (void)\n     }\n \n   /* Set frame pointer, if needed.  */\n-  if (frame_pointer_needed)\n+  if (frame_pointer_needed_indeed)\n     {\n       insn = emit_move_insn (gen_rtx_REG (Pmode, HARD_FRAME_POINTER_REGNUM),\n \t\t\t     sp_reg_rtx);\n@@ -4534,7 +4539,7 @@ rs6000_emit_epilogue (enum epilogue_type epilogue_type)\n     }\n   /* If we have a frame pointer, we can restore the old stack pointer\n      from it.  */\n-  else if (frame_pointer_needed)\n+  else if (frame_pointer_needed_indeed)\n     {\n       frame_reg_rtx = sp_reg_rtx;\n       if (DEFAULT_ABI == ABI_V4)"}]}