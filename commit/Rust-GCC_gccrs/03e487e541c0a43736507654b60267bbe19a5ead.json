{"sha": "03e487e541c0a43736507654b60267bbe19a5ead", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNlNDg3ZTU0MWMwYTQzNzM2NTA3NjU0YjYwMjY3YmJlMTlhNWVhZA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2019-12-20T19:27:47Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2019-12-20T19:27:47Z"}, "message": "Rename signed integer 16/34-bit macros.\n\n2019-12-20   Michael Meissner  <meissner@linux.ibm.com>\n\n\t* config/rs6000/predicates.md (cint34_operand): Use\n\tSIGNED_INTEGER_34BIT_P macro.\n\t* config/rs6000/rs6000.c (num_insns_constant_gpr): Use the\n\tSIGNED_INTEGER_16BIT_P and SIGNED_INTEGER_34BIT_P macros.\n\t(address_to_insn_form): Use the SIGNED_INTEGER_16BIT_P and\n\tSIGNED_INTEGER_34BIT_P macros.\n\t* config/rs6000/rs6000.h (SIGNED_INTEGER_NBIT_P): New macro.\n\t(SIGNED_INTEGER_16BIT_P): Rename SIGNED_16BIT_OFFSET_P to be\n\tSIGNED_INTEGER_34BIT_P.\n\t(SIGNED_INTEGER_34BIT_P): Rename SIGNED_34BIT_OFFSET_P to be\n\tSIGNED_INTEGER_34BIT_P.\n\nFrom-SVN: r279677", "tree": {"sha": "5286da81b10f3da63c5907e99aace882585a7d4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5286da81b10f3da63c5907e99aace882585a7d4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03e487e541c0a43736507654b60267bbe19a5ead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03e487e541c0a43736507654b60267bbe19a5ead", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03e487e541c0a43736507654b60267bbe19a5ead", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03e487e541c0a43736507654b60267bbe19a5ead/comments", "author": null, "committer": null, "parents": [{"sha": "39292e25076e1048b2aaa89ac60c28f3f61a78a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39292e25076e1048b2aaa89ac60c28f3f61a78a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39292e25076e1048b2aaa89ac60c28f3f61a78a0"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "6afc0177f2134290c35b1ae6173a383604e3fe6e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03e487e541c0a43736507654b60267bbe19a5ead/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03e487e541c0a43736507654b60267bbe19a5ead/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03e487e541c0a43736507654b60267bbe19a5ead", "patch": "@@ -1,3 +1,17 @@\n+2019-12-20   Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/predicates.md (cint34_operand): Use\n+\tSIGNED_INTEGER_34BIT_P macro.\n+\t* config/rs6000/rs6000.c (num_insns_constant_gpr): Use the\n+\tSIGNED_INTEGER_16BIT_P and SIGNED_INTEGER_34BIT_P macros.\n+\t(address_to_insn_form): Use the SIGNED_INTEGER_16BIT_P and\n+\tSIGNED_INTEGER_34BIT_P macros.\n+\t* config/rs6000/rs6000.h (SIGNED_INTEGER_NBIT_P): New macro.\n+\t(SIGNED_INTEGER_16BIT_P): Rename SIGNED_16BIT_OFFSET_P to be\n+\tSIGNED_INTEGER_34BIT_P.\n+\t(SIGNED_INTEGER_34BIT_P): Rename SIGNED_34BIT_OFFSET_P to be\n+\tSIGNED_INTEGER_34BIT_P.\n+\n 2019-12-20  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n \n \t* doc/sourcebuild.texi"}, {"sha": "94e2d05b8aae18a613cd84742d8054b0cbfd3c1a", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03e487e541c0a43736507654b60267bbe19a5ead/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03e487e541c0a43736507654b60267bbe19a5ead/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=03e487e541c0a43736507654b60267bbe19a5ead", "patch": "@@ -309,7 +309,7 @@\n   if (!TARGET_PREFIXED_ADDR)\n     return 0;\n \n-  return SIGNED_34BIT_OFFSET_P (INTVAL (op));\n+  return SIGNED_INTEGER_34BIT_P (INTVAL (op));\n })\n \n ;; Return 1 if op is a register that is not special."}, {"sha": "9dd09b95902e31317dc94d9bc96937a81d5cf9bc", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03e487e541c0a43736507654b60267bbe19a5ead/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03e487e541c0a43736507654b60267bbe19a5ead/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=03e487e541c0a43736507654b60267bbe19a5ead", "patch": "@@ -5557,7 +5557,7 @@ static int\n num_insns_constant_gpr (HOST_WIDE_INT value)\n {\n   /* signed constant loadable with addi */\n-  if (((unsigned HOST_WIDE_INT) value + 0x8000) < 0x10000)\n+  if (SIGNED_INTEGER_16BIT_P (value))\n     return 1;\n \n   /* constant loadable with addis */\n@@ -5566,7 +5566,7 @@ num_insns_constant_gpr (HOST_WIDE_INT value)\n     return 1;\n \n   /* PADDI can support up to 34 bit signed integers.  */\n-  else if (TARGET_PREFIXED_ADDR && SIGNED_34BIT_OFFSET_P (value))\n+  else if (TARGET_PREFIXED_ADDR && SIGNED_INTEGER_34BIT_P (value))\n     return 1;\n \n   else if (TARGET_POWERPC64)\n@@ -24770,7 +24770,7 @@ address_to_insn_form (rtx addr,\n     return INSN_FORM_BAD;\n \n   HOST_WIDE_INT offset = INTVAL (op1);\n-  if (!SIGNED_34BIT_OFFSET_P (offset))\n+  if (!SIGNED_INTEGER_34BIT_P (offset))\n     return INSN_FORM_BAD;\n \n   /* Check for local and external PC-relative addresses.  Labels are always\n@@ -24789,7 +24789,7 @@ address_to_insn_form (rtx addr,\n     return INSN_FORM_BAD;\n \n   /* Large offsets must be prefixed.  */\n-  if (!SIGNED_16BIT_OFFSET_P (offset))\n+  if (!SIGNED_INTEGER_16BIT_P (offset))\n     {\n       if (TARGET_PREFIXED_ADDR)\n \treturn INSN_FORM_PREFIXED_NUMERIC;"}, {"sha": "7c1229fb8333e7635c9aff6b97858f6bbbcfef35", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03e487e541c0a43736507654b60267bbe19a5ead/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03e487e541c0a43736507654b60267bbe19a5ead/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=03e487e541c0a43736507654b60267bbe19a5ead", "patch": "@@ -2529,18 +2529,16 @@ typedef struct GTY(()) machine_function\n #pragma GCC poison TARGET_FLOAT128 OPTION_MASK_FLOAT128 MASK_FLOAT128\n #endif\n \n-/* Whether a given VALUE is a valid 16 or 34-bit signed offset.  */\n-#define SIGNED_16BIT_OFFSET_P(VALUE)\t\t\t\t\t\\\n+/* Whether a given VALUE is a valid 16 or 34-bit signed integer.  */\n+#define SIGNED_INTEGER_NBIT_P(VALUE, N)\t\t\t\t\t\\\n   IN_RANGE ((VALUE),\t\t\t\t\t\t\t\\\n-\t    -(HOST_WIDE_INT_1 << 15),\t\t\t\t\t\\\n-\t    (HOST_WIDE_INT_1 << 15) - 1)\n+\t    -(HOST_WIDE_INT_1 << ((N)-1)),\t\t\t\t\\\n+\t    (HOST_WIDE_INT_1 << ((N)-1)) - 1)\n \n-#define SIGNED_34BIT_OFFSET_P(VALUE)\t\t\t\t\t\\\n-  IN_RANGE ((VALUE),\t\t\t\t\t\t\t\\\n-\t    -(HOST_WIDE_INT_1 << 33),\t\t\t\t\t\\\n-\t    (HOST_WIDE_INT_1 << 33) - 1)\n+#define SIGNED_INTEGER_16BIT_P(VALUE)\tSIGNED_INTEGER_NBIT_P (VALUE, 16)\n+#define SIGNED_INTEGER_34BIT_P(VALUE)\tSIGNED_INTEGER_NBIT_P (VALUE, 34)\n \n-/* Like SIGNED_16BIT_OFFSET_P and SIGNED_34BIT_OFFSET_P, but with an extra\n+/* Like SIGNED_INTEGER_16BIT_P and SIGNED_INTEGER_34BIT_P, but with an extra\n    argument that gives a length to validate a range of addresses, to allow for\n    splitting insns into several insns, each of which has an offsettable\n    address.  */"}]}