{"sha": "92f93e54a36d424390b05a14df11d0d723e84f88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJmOTNlNTRhMzZkNDI0MzkwYjA1YTE0ZGYxMWQwZDcyM2U4NGY4OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-12-19T17:43:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-12-19T17:43:54Z"}, "message": "Handle anonymous unions at the tree level.\n\n        C++ ABI change: Mangle anonymous unions using the name of their\n        first named field (by depth-first search).  Should not cause\n        binary compatibility problems, though, as the compiler previously\n        didn't emit anything for affected unions.\n        * cp-tree.def (ALIAS_DECL): New tree code.\n        * decl2.c (build_anon_union_vars): Build ALIAS_DECLs.  Return the\n        first field, not the largest.\n        (finish_anon_union): Don't mess with RTL.  Do set DECL_ASSEMBLER_NAME,\n        push the decl, and write it out at namespace scope.\n        * decl.c (lookup_name_real): See through an ALIAS_DECL.\n        (pushdecl): Add namespace bindings for ALIAS_DECLs.\n        * rtti.c (unemitted_tinfo_decl_p): Don't try to look at the name\n        of a decl which doesn't have one.\n        * typeck.c (build_class_member_access_expr): Don't recurse if\n        we already have the type we want.\n\nFrom-SVN: r60315", "tree": {"sha": "379e706639fac601c7a33fba9b6597855c065b16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/379e706639fac601c7a33fba9b6597855c065b16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92f93e54a36d424390b05a14df11d0d723e84f88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92f93e54a36d424390b05a14df11d0d723e84f88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92f93e54a36d424390b05a14df11d0d723e84f88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92f93e54a36d424390b05a14df11d0d723e84f88/comments", "author": null, "committer": null, "parents": [{"sha": "0ca7178c8462ce29e086db3cb8f0a080fc7f80f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ca7178c8462ce29e086db3cb8f0a080fc7f80f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ca7178c8462ce29e086db3cb8f0a080fc7f80f2"}], "stats": {"total": 1, "additions": 0, "deletions": 1}, "files": [{"sha": "6ae06055057214c3699e3a49e4d4192d06638479", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/union1.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f93e54a36d424390b05a14df11d0d723e84f88/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Funion1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f93e54a36d424390b05a14df11d0d723e84f88/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Funion1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Funion1.C?ref=92f93e54a36d424390b05a14df11d0d723e84f88", "patch": "@@ -3,7 +3,6 @@\n // the DECL_SIZE of the decls, instead of comparing the DECL_SIZE nodes.\n \n // The compiler currently fails to allocate space for the static union.\n-// excess errors test - XFAIL *-*-*\n \n      unsigned\n      hash(const double d)"}]}