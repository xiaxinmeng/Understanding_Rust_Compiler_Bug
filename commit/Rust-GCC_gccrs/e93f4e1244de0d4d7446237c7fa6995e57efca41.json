{"sha": "e93f4e1244de0d4d7446237c7fa6995e57efca41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkzZjRlMTI0NGRlMGQ0ZDc0NDYyMzdjN2ZhNjk5NWU1N2VmY2E0MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-23T09:53:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-23T09:53:23Z"}, "message": "[multiple changes]\n\n2013-04-23  Vincent Celier  <celier@adacore.com>\n\n\t* prj-part.ads, prj-conf.ads: Minor comment updates.\n\n2013-04-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo.adb (Predicate_Function): For a private type, retrieve\n\tpredicate function from full view.\n\t* aspects.adb (Find_Aspect): Ditto.\n\t* exp_ch6.adb (Expand_Actuals): If the formal is class-wide and\n\tthe actual is a definite type, apply predicate check after call.\n\t* sem_res.adb: Do not apply a predicate check before the call to\n\ta generated Init_Proc.\n\nFrom-SVN: r198185", "tree": {"sha": "7707a1974f10354ae188d09877f6b574d4ca66aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7707a1974f10354ae188d09877f6b574d4ca66aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e93f4e1244de0d4d7446237c7fa6995e57efca41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93f4e1244de0d4d7446237c7fa6995e57efca41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e93f4e1244de0d4d7446237c7fa6995e57efca41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93f4e1244de0d4d7446237c7fa6995e57efca41/comments", "author": null, "committer": null, "parents": [{"sha": "9d5598bf839e572e6262367af623d1e1af91c4a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d5598bf839e572e6262367af623d1e1af91c4a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d5598bf839e572e6262367af623d1e1af91c4a6"}], "stats": {"total": 75, "additions": 60, "deletions": 15}, "files": [{"sha": "984e97d15235d2c9f53eed9bea605cec07065070", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93f4e1244de0d4d7446237c7fa6995e57efca41/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93f4e1244de0d4d7446237c7fa6995e57efca41/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e93f4e1244de0d4d7446237c7fa6995e57efca41", "patch": "@@ -1,3 +1,17 @@\n+2013-04-23  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-part.ads, prj-conf.ads: Minor comment updates.\n+\n+2013-04-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.adb (Predicate_Function): For a private type, retrieve\n+\tpredicate function from full view.\n+\t* aspects.adb (Find_Aspect): Ditto.\n+\t* exp_ch6.adb (Expand_Actuals): If the formal is class-wide and\n+\tthe actual is a definite type, apply predicate check after call.\n+\t* sem_res.adb: Do not apply a predicate check before the call to\n+\ta generated Init_Proc.\n+\n 2013-04-23  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch13.adb (Analyze_Aspect_Specifications): Significant"}, {"sha": "b72debb8600c341ad4541a5bb0dce695d4d82f97", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93f4e1244de0d4d7446237c7fa6995e57efca41/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93f4e1244de0d4d7446237c7fa6995e57efca41/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=e93f4e1244de0d4d7446237c7fa6995e57efca41", "patch": "@@ -163,6 +163,12 @@ package body Aspects is\n          if Is_Class_Wide_Type (Owner) and then Inherited_Aspect (A) then\n             Owner := Root_Type (Owner);\n          end if;\n+\n+         if Is_Private_Type (Owner)\n+           and then Present (Full_View (Owner))\n+         then\n+            Owner := Full_View (Owner);\n+         end if;\n       end if;\n \n       --  Search the representation items for the desired aspect"}, {"sha": "aa254f5f16d6dfd6139d4d804cd132cfb2ff3724", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93f4e1244de0d4d7446237c7fa6995e57efca41/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93f4e1244de0d4d7446237c7fa6995e57efca41/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=e93f4e1244de0d4d7446237c7fa6995e57efca41", "patch": "@@ -7168,15 +7168,25 @@ package body Einfo is\n \n    function Predicate_Function (Id : E) return E is\n       S : Entity_Id;\n+      T : Entity_Id;\n \n    begin\n       pragma Assert (Is_Type (Id));\n \n-      if No (Subprograms_For_Type (Id)) then\n+      --  If type is private and has a completion, predicate may be defined\n+      --  on the full view.\n+\n+      if Is_Private_Type (Id) and then Present (Full_View (Id)) then\n+         T := Full_View (Id);\n+      else\n+         T := Id;\n+      end if;\n+\n+      if No (Subprograms_For_Type (T)) then\n          return Empty;\n \n       else\n-         S := Subprograms_For_Type (Id);\n+         S := Subprograms_For_Type (T);\n          while Present (S) loop\n             if Is_Predicate_Function (S) then\n                return S;"}, {"sha": "bbb7bde6bc0e926800efef834f29bc63d8ba9e21", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93f4e1244de0d4d7446237c7fa6995e57efca41/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93f4e1244de0d4d7446237c7fa6995e57efca41/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=e93f4e1244de0d4d7446237c7fa6995e57efca41", "patch": "@@ -1720,15 +1720,19 @@ package body Exp_Ch6 is\n             --  this is harder to verify, and there may be a redundant check.\n \n             --  Note also that Subp may be either a subprogram entity for\n-            --  direct calls, or a type entity for indirect calls, hence the\n-            --  test that Is_Overloadable returns True before testing whether\n-            --  Subp is an inherited operation.\n+            --  direct calls, or a type entity for indirect calls, which must\n+            --  be handled separately because the name does not denote an\n+            --  overloadable entity.\n \n-            if (Present (Find_Aspect (E_Actual, Aspect_Predicate))\n+            --  If the formal is class-wide the corresponding postcondition\n+            --  procedure does not include a predicate call, so it has to be\n+            --  generated explicitly.\n+\n+            if (Has_Aspect (E_Actual, Aspect_Predicate)\n                   or else\n-                Present (Find_Aspect (E_Actual, Aspect_Dynamic_Predicate))\n+                Has_Aspect (E_Actual, Aspect_Dynamic_Predicate)\n                   or else\n-                Present (Find_Aspect (E_Actual, Aspect_Static_Predicate)))\n+                Has_Aspect (E_Actual, Aspect_Static_Predicate))\n               and then not Is_Init_Proc (Subp)\n             then\n                if (Is_Derived_Type (E_Actual)\n@@ -1738,6 +1742,12 @@ package body Exp_Ch6 is\n                then\n                   Append_To\n                     (Post_Call, Make_Predicate_Check (E_Actual, Actual));\n+\n+               elsif Is_Class_Wide_Type (E_Formal)\n+                 and then not Is_Class_Wide_Type (E_Actual)\n+               then\n+                  Append_To\n+                    (Post_Call, Make_Predicate_Check (E_Actual, Actual));\n                end if;\n             end if;\n "}, {"sha": "1c72fa769baf3137062e46d89c569b94f2191120", "filename": "gcc/ada/prj-conf.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93f4e1244de0d4d7446237c7fa6995e57efca41/gcc%2Fada%2Fprj-conf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93f4e1244de0d4d7446237c7fa6995e57efca41/gcc%2Fada%2Fprj-conf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-conf.ads?ref=e93f4e1244de0d4d7446237c7fa6995e57efca41", "patch": "@@ -89,8 +89,10 @@ package Prj.Conf is\n    --\n    --  If Implicit_Project is True, the main project file being parsed is\n    --  deemed to be in the current working directory, even if it is not the\n-   --  case.\n-   --  Why is this ever useful???\n+   --  case. Implicit_Project is set to True when a tool such as gprbuild is\n+   --  invoked without a project file and is using an implicit project file\n+   --  that is virtually in the current working directory, but is physically\n+   --  in another directory.\n \n    procedure Process_Project_And_Apply_Config\n      (Main_Project               : out Prj.Project_Id;"}, {"sha": "1bf1366fb5c9704832cd841cce7ea7bc33ee18c7", "filename": "gcc/ada/prj-part.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93f4e1244de0d4d7446237c7fa6995e57efca41/gcc%2Fada%2Fprj-part.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93f4e1244de0d4d7446237c7fa6995e57efca41/gcc%2Fada%2Fprj-part.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-part.ads?ref=e93f4e1244de0d4d7446237c7fa6995e57efca41", "patch": "@@ -70,7 +70,9 @@ package Prj.Part is\n    --\n    --  If Implicit_Project is True, the main project file being parsed is\n    --  deemed to be in the current working directory, even if it is not the\n-   --  case.\n-   --  Why is this ever useful???\n+   --  case. Implicit_Project is set to True when a tool such as gprbuild is\n+   --  invoked without a project file and is using an implicit project file\n+   --  that is virtually in the current working directory, but is physically\n+   --  in another directory.\n \n end Prj.Part;"}, {"sha": "ee2483bc53b09b558681764d0175992efe2f8100", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93f4e1244de0d4d7446237c7fa6995e57efca41/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93f4e1244de0d4d7446237c7fa6995e57efca41/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=e93f4e1244de0d4d7446237c7fa6995e57efca41", "patch": "@@ -3946,12 +3946,13 @@ package body Sem_Res is\n \n                --  Apply predicate checks, unless this is a call to the\n                --  predicate check function itself, which would cause an\n-               --  infinite recursion.\n+               --  infinite recursion, or it is a call to an initialization\n+               --  procedure whose operand is of course an unfinished object.\n \n                if not (Ekind (Nam) = E_Function\n                         and then (Is_Predicate_Function (Nam)\n-                                    or else\n-                                  Is_Predicate_Function_M (Nam)))\n+                                    or else Is_Predicate_Function_M (Nam)))\n+                 and then not Is_Init_Proc (Nam)\n                then\n                   Apply_Predicate_Check (A, F_Typ);\n                end if;"}]}