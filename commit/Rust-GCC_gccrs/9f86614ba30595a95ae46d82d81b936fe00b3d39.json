{"sha": "9f86614ba30595a95ae46d82d81b936fe00b3d39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY4NjYxNGJhMzA1OTVhOTVhZTQ2ZDgyZDgxYjkzNmZlMDBiM2QzOQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-12T20:40:09Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-12T20:40:09Z"}, "message": "(IDENTIFIER_VIRTUAL_P): Deleted from here.\n\nFrom-SVN: r1576", "tree": {"sha": "a5a2fb594e625af1d63c8e9bf853a905f0cb8f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5a2fb594e625af1d63c8e9bf853a905f0cb8f60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f86614ba30595a95ae46d82d81b936fe00b3d39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f86614ba30595a95ae46d82d81b936fe00b3d39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f86614ba30595a95ae46d82d81b936fe00b3d39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f86614ba30595a95ae46d82d81b936fe00b3d39/comments", "author": null, "committer": null, "parents": [{"sha": "118149afaeff51fe56a62878b609c183a439df77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/118149afaeff51fe56a62878b609c183a439df77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/118149afaeff51fe56a62878b609c183a439df77"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "01910ab33a27c4397a5a5f5ae186f3d4dc56a118", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f86614ba30595a95ae46d82d81b936fe00b3d39/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f86614ba30595a95ae46d82d81b936fe00b3d39/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9f86614ba30595a95ae46d82d81b936fe00b3d39", "patch": "@@ -230,7 +230,7 @@ struct tree_common\n #define TREE_ADDRESSABLE(NODE) ((NODE)->common.addressable_flag)\n \n /* In a VAR_DECL, nonzero means allocate static storage.\n-   In a FUNCTION_DECL, currently nonzero if function has been defined.\n+   In a FUNCTION_DECL, nonzero if function has been defined.\n    In a CONSTRUCTOR, nonzero means allocate static storage.  */\n #define TREE_STATIC(NODE) ((NODE)->common.static_flag)\n \n@@ -305,7 +305,8 @@ struct tree_common\n    This is interesting in an inline function, since it might not need\n    to be compiled separately.\n    Nonzero in a RECORD_TYPE, UNION_TYPE or ENUMERAL_TYPE\n-   if the sdb debugging info for the type has been written.  */\n+   if the sdb debugging info for the type has been written.\n+   In a BLOCK node, nonzero if reorder_blocks has already seen this block.  */\n #define TREE_ASM_WRITTEN(NODE) ((NODE)->common.asm_written_flag)\n \n /* Nonzero in a _DECL if the name is used in its scope.\n@@ -318,10 +319,13 @@ struct tree_common\n    in the raising of an exception.  Not implemented yet.  */\n #define TREE_RAISES(NODE) ((NODE)->common.raises_flag)\n \n-/* These are currently used in classes in C++.  */\n+/* Used in classes in C++.  */\n #define TREE_PRIVATE(NODE) ((NODE)->common.private_flag)\n+/* Used in classes in C++.\n+   In a BLOCK node, this is BLOCK_HANDLER_BLOCK.  */\n #define TREE_PROTECTED(NODE) ((NODE)->common.protected_flag)\n \n+/* These flags are available for each language front end to use internally.  */\n #define TREE_LANG_FLAG_0(NODE) ((NODE)->common.lang_flag_0)\n #define TREE_LANG_FLAG_1(NODE) ((NODE)->common.lang_flag_1)\n #define TREE_LANG_FLAG_2(NODE) ((NODE)->common.lang_flag_2)\n@@ -413,7 +417,6 @@ struct tree_complex\n \n #define IDENTIFIER_LENGTH(NODE) ((NODE)->identifier.length)\n #define IDENTIFIER_POINTER(NODE) ((NODE)->identifier.pointer)\n-#define IDENTIFIER_VIRTUAL_P(NODE) TREE_LANG_FLAG_1(NODE)\n \n struct tree_identifier\n {\n@@ -532,6 +535,7 @@ struct tree_exp\n /* Means this type is const-qualified.  */\n #define TYPE_READONLY(NODE) ((NODE)->common.readonly_flag)\n \n+/* These flags are available for each language front end to use internally.  */\n #define TYPE_LANG_FLAG_0(NODE) ((NODE)->type.lang_flag_0)\n #define TYPE_LANG_FLAG_1(NODE) ((NODE)->type.lang_flag_1)\n #define TYPE_LANG_FLAG_2(NODE) ((NODE)->type.lang_flag_2)"}]}