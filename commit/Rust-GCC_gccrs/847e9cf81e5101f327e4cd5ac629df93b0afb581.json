{"sha": "847e9cf81e5101f327e4cd5ac629df93b0afb581", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ3ZTljZjgxZTUxMDFmMzI3ZTRjZDVhYzYyOWRmOTNiMGFmYjU4MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-11-11T23:57:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-11-11T23:57:35Z"}, "message": "Define __void_t and SFINAE-friendly iterator_traits.\n\n\t* include/std/type_traits (__void_t): Define new alias template.\n\t(_GLIBCXX_HAS_NESTED_TYPE): Redefine using __void_t.\n\t* include/std/functional (_Maybe_get_result_type): Likewise.\n\t* include/bits/stl_iterator_base_types.h (__iterator_traits): Likewise.\n\t* include/bits/uses_allocator.h (__uses_allocator_helper): Likewise.\n\t* testsuite/20_util/bind/ref_neg.cc: Adjust dg-error.\n\t* testsuite/20_util/reference_wrapper/typedefs-3.cc: Adjust to changes\n\tin _GLIBCXX_HAS_NESTED_TYPE.\n\nFrom-SVN: r217395", "tree": {"sha": "8ec5894e6110647b77984b20292bdc7b63253e0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ec5894e6110647b77984b20292bdc7b63253e0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/847e9cf81e5101f327e4cd5ac629df93b0afb581", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847e9cf81e5101f327e4cd5ac629df93b0afb581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/847e9cf81e5101f327e4cd5ac629df93b0afb581", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847e9cf81e5101f327e4cd5ac629df93b0afb581/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c03d39d4593eb0fd988e7067bd47fc5a58d4658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c03d39d4593eb0fd988e7067bd47fc5a58d4658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c03d39d4593eb0fd988e7067bd47fc5a58d4658"}], "stats": {"total": 88, "additions": 43, "deletions": 45}, "files": [{"sha": "4a17fd0b9b3fe4ca9171e666f80434a9765eb758", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e9cf81e5101f327e4cd5ac629df93b0afb581/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e9cf81e5101f327e4cd5ac629df93b0afb581/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=847e9cf81e5101f327e4cd5ac629df93b0afb581", "patch": "@@ -1,3 +1,14 @@\n+2014-11-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (__void_t): Define new alias template.\n+\t(_GLIBCXX_HAS_NESTED_TYPE): Redefine using __void_t.\n+\t* include/std/functional (_Maybe_get_result_type): Likewise.\n+\t* include/bits/stl_iterator_base_types.h (__iterator_traits): Likewise.\n+\t* include/bits/uses_allocator.h (__uses_allocator_helper): Likewise.\n+\t* testsuite/20_util/bind/ref_neg.cc: Adjust dg-error.\n+\t* testsuite/20_util/reference_wrapper/typedefs-3.cc: Adjust to changes\n+\tin _GLIBCXX_HAS_NESTED_TYPE.\n+\n 2014-11-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/functional (_Mem_fn_traits): Add partial specializations"}, {"sha": "ba3f92322780395e54f84459357fd3144c22d7b2", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e9cf81e5101f327e4cd5ac629df93b0afb581/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e9cf81e5101f327e4cd5ac629df93b0afb581/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=847e9cf81e5101f327e4cd5ac629df93b0afb581", "patch": "@@ -64,7 +64,7 @@\n #include <bits/c++config.h>\n \n #if __cplusplus >= 201103L\n-# include <type_traits>  // For _GLIBCXX_HAS_NESTED_TYPE, is_convertible\n+# include <type_traits>  // For __void_t, is_convertible\n #endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -138,15 +138,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  provide tighter, more correct semantics.\n   */\n #if __cplusplus >= 201103L\n-\n-_GLIBCXX_HAS_NESTED_TYPE(iterator_category)\n-\n-  template<typename _Iterator,\n-\t   bool = __has_iterator_category<_Iterator>::value>\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 2408. SFINAE-friendly common_type/iterator_traits is missing in C++14\n+  template<typename _Iterator, typename = __void_t<>>\n     struct __iterator_traits { };\n \n   template<typename _Iterator>\n-    struct __iterator_traits<_Iterator, true>\n+    struct __iterator_traits<_Iterator,\n+\t\t\t     __void_t<typename _Iterator::iterator_category,\n+\t\t\t\t      typename _Iterator::value_type,\n+\t\t\t\t      typename _Iterator::difference_type,\n+\t\t\t\t      typename _Iterator::pointer,\n+\t\t\t\t      typename _Iterator::reference>>\n     {\n       typedef typename _Iterator::iterator_category iterator_category;\n       typedef typename _Iterator::value_type        value_type;"}, {"sha": "a50ce10a5ca5fe9b2bc063970f6509ae6d29f76b", "filename": "libstdc++-v3/include/bits/uses_allocator.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e9cf81e5101f327e4cd5ac629df93b0afb581/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e9cf81e5101f327e4cd5ac629df93b0afb581/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fuses_allocator.h?ref=847e9cf81e5101f327e4cd5ac629df93b0afb581", "patch": "@@ -40,15 +40,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   constexpr allocator_arg_t allocator_arg = allocator_arg_t();\n \n-_GLIBCXX_HAS_NESTED_TYPE(allocator_type)\n-\n-  template<typename _Tp, typename _Alloc,\n-\t   bool = __has_allocator_type<_Tp>::value>\n+  template<typename _Tp, typename _Alloc, typename = __void_t<>>\n     struct __uses_allocator_helper\n     : false_type { };\n \n   template<typename _Tp, typename _Alloc>\n-    struct __uses_allocator_helper<_Tp, _Alloc, true>\n+    struct __uses_allocator_helper<_Tp, _Alloc,\n+\t\t\t\t   __void_t<typename _Tp::allocator_type>>\n     : is_convertible<_Alloc, typename _Tp::allocator_type>::type\n     { };\n "}, {"sha": "e711350a5dfe8dbf5c86aac6d6cc7d331681e6b4", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e9cf81e5101f327e4cd5ac629df93b0afb581/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e9cf81e5101f327e4cd5ac629df93b0afb581/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=847e9cf81e5101f327e4cd5ac629df93b0afb581", "patch": "@@ -67,24 +67,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Mem_fn<_Tp _Class::*>\n     mem_fn(_Tp _Class::*) noexcept;\n \n-_GLIBCXX_HAS_NESTED_TYPE(result_type)\n-\n   /// If we have found a result_type, extract it.\n-  template<bool _Has_result_type, typename _Functor>\n+  template<typename _Functor, typename = __void_t<>>\n     struct _Maybe_get_result_type\n     { };\n \n   template<typename _Functor>\n-    struct _Maybe_get_result_type<true, _Functor>\n+    struct _Maybe_get_result_type<_Functor,\n+\t\t\t\t  __void_t<typename _Functor::result_type>>\n     { typedef typename _Functor::result_type result_type; };\n \n   /**\n    *  Base class for any function object that has a weak result type, as\n-   *  defined in 3.3/3 of TR1.\n+   *  defined in 20.8.2 [func.require] of C++11.\n   */\n   template<typename _Functor>\n     struct _Weak_result_type_impl\n-    : _Maybe_get_result_type<__has_result_type<_Functor>::value, _Functor>\n+    : _Maybe_get_result_type<_Functor>\n     { };\n \n   /// Retrieve the result type for a function type."}, {"sha": "6b72a3a2a18c2e6627192c5b6f0af9d64e4ca6d6", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e9cf81e5101f327e4cd5ac629df93b0afb581/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e9cf81e5101f327e4cd5ac629df93b0afb581/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=847e9cf81e5101f327e4cd5ac629df93b0afb581", "patch": "@@ -2404,34 +2404,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     using result_of_t = typename result_of<_Tp>::type;\n #endif\n \n+  template<typename...> using __void_t = void;\n+\n   /// @} group metaprogramming\n-\t\n+\n   /**\n    *  Use SFINAE to determine if the type _Tp has a publicly-accessible\n    *  member type _NTYPE.\n    */\n #define _GLIBCXX_HAS_NESTED_TYPE(_NTYPE)\t\t\t\t\\\n-  template<typename _Tp>\t\t\t\t\t\t\\\n-    class __has_##_NTYPE##_helper\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      template<typename _Up>\t\t\t\t\t\t\\\n-\tstruct _Wrap_type\t\t\t\t\t\t\\\n-\t{ };\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      template<typename _Up>\t\t\t\t\t\t\\\n-\tstatic true_type __test(_Wrap_type<typename _Up::_NTYPE>*);\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      template<typename _Up>\t\t\t\t\t\t\\\n-\tstatic false_type __test(...);\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    public:\t\t\t\t\t\t\t\t\\\n-      typedef decltype(__test<_Tp>(0)) type;\t\t\t\t\\\n-    };\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  template<typename _Tp>\t\t\t\t\t\t\\\n+  template<typename _Tp, typename = __void_t<>>\t\t\t\t\\\n     struct __has_##_NTYPE\t\t\t\t\t\t\\\n-    : public __has_##_NTYPE##_helper\t\t\t\t\t\\\n-\t\t\t<typename remove_cv<_Tp>::type>::type\t\t\\\n+    : false_type\t\t\t\t\t\t\t\\\n+    { };\t\t\t\t\t\t\t\t\\\n+  template<typename _Tp>\t\t\t\t\t\t\\\n+    struct __has_##_NTYPE<_Tp, __void_t<typename _Tp::_NTYPE>>\t\t\\\n+    : true_type\t\t\t\t\t\t\t\t\\\n     { };\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "fde434f2db2ae5bed8a2db79ad7924e105ee5341", "filename": "libstdc++-v3/testsuite/20_util/bind/ref_neg.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e9cf81e5101f327e4cd5ac629df93b0afb581/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fref_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e9cf81e5101f327e4cd5ac629df93b0afb581/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fref_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fref_neg.cc?ref=847e9cf81e5101f327e4cd5ac629df93b0afb581", "patch": "@@ -30,10 +30,10 @@ void test01()\n {\n   const int dummy = 0;\n   std::bind(&inc, _1)(0);               // { dg-error  \"no match\" }\n-  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1126 }\n-  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1140 }\n-  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1154 }\n-  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1168 }\n+  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1125 }\n+  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1139 }\n+  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1153 }\n+  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1167 }\n   std::bind(&inc, std::ref(dummy))();\t// { dg-error  \"no match\" }\n }\n "}, {"sha": "909b305d9a0fa0f7b4822f5d935c4b8820b8ec81", "filename": "libstdc++-v3/testsuite/20_util/reference_wrapper/typedefs-3.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e9cf81e5101f327e4cd5ac629df93b0afb581/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Ftypedefs-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e9cf81e5101f327e4cd5ac629df93b0afb581/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Ftypedefs-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Freference_wrapper%2Ftypedefs-3.cc?ref=847e9cf81e5101f327e4cd5ac629df93b0afb581", "patch": "@@ -46,8 +46,7 @@ struct S012 : S0, S1, S2 { };\n \n using std::true_type;\n using std::false_type;\n-using std::integral_constant;\n-using std::remove_cv;\n+using std::__void_t;\n \n _GLIBCXX_HAS_NESTED_TYPE(argument_type)\n _GLIBCXX_HAS_NESTED_TYPE(first_argument_type)"}]}