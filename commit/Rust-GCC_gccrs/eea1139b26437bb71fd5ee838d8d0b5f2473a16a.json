{"sha": "eea1139b26437bb71fd5ee838d8d0b5f2473a16a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVhMTEzOWIyNjQzN2JiNzFmZDVlZTgzOGQ4ZDBiNWYyNDczYTE2YQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2008-07-11T18:16:26Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2008-07-11T18:16:26Z"}, "message": "c-common.h (enum rid): Add RID_CXX_COMPAT_WARN.\n\n./:\t* c-common.h (enum rid): Add RID_CXX_COMPAT_WARN.\n\t(struct c_common_resword): Define.\n\t(D_CONLY, D_CXXONLY, D_C99, D_CXX0X, D_EXT, D_EXT89): Define.\n\t(D_ASM, D_OBJC, D_CXX_OBJC, D_CXXWARN): Define.\n\t(c_common_reswords, num_c_common_reswords): Declare.\n\t* c-common.c (c_common_reswords): New global const array.\n\t(num_c_common_reswords): New const int.\n\t* c-parser.c (struct resword, reswords): Don't define.\n\t(D_C89, D_EXT, D_EXT89, D_OBJC): Don't define.\n\t(c_parse_init): Clarify mask code.  Use c_common_reswords rather\n\tthan reswords.  If warning about C++ keywords, give them a special\n\tRID code.\n\t(c_lex_one_token): Warn about C++ keywords.  Call\n\tobjc_is_reserved_word rather than OBJC_IS_AT_KEYWORD.\n\t(c_parser_external_declaration): Look for RID_xxx rather than\n\tRID_AT_xxx, for ObjC++ keywords which are also C++ keywords.\n\t(c_parser_statement_after_labels): Likewise.\n\t(c_parser_objc_class_instance_variables): Likewise.\n\t(c_parser_objc_class_declaration): Likewise.\n\t(c_parser_objc_try_catch_statement): Likewise.\n\t* c-decl.c (c_print_identifier): Ignore RID_CXX_COMPAT_WARN.\n\t(declspecs_add_type): Likewise.\ncp/:\n\t* lex.c (struct resword, reswords): Don't define.\n\t(D_EXT, D_ASM, D_OBJC, D_CXX0X): Don't define.\n\t(init_reswords): Clarify mask code.  Use c_common_reswords rather\n\tthan reswords.\nobjc/:\n\t* objc-act.c (objc_is_reserved_word): Always check for RID_CLASS,\n\tetc., not just when OBJCPLUS is defined.\ntestsuite/:\n\t* gcc.dg/Wcxx-compat-2.c: New test.\n\nFrom-SVN: r137724", "tree": {"sha": "c00388a092ba64841d77b31eb539029bb96b0622", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c00388a092ba64841d77b31eb539029bb96b0622"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eea1139b26437bb71fd5ee838d8d0b5f2473a16a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea1139b26437bb71fd5ee838d8d0b5f2473a16a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eea1139b26437bb71fd5ee838d8d0b5f2473a16a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/comments", "author": null, "committer": null, "parents": [{"sha": "94eeabbe1999a998aa8fb64a86e794c77755d0df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94eeabbe1999a998aa8fb64a86e794c77755d0df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94eeabbe1999a998aa8fb64a86e794c77755d0df"}], "stats": {"total": 677, "additions": 351, "deletions": 326}, "files": [{"sha": "0a3ff2570569de8e53fd9e2efe440ffc79ed35bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eea1139b26437bb71fd5ee838d8d0b5f2473a16a", "patch": "@@ -1,3 +1,29 @@\n+2008-07-11  Tom Tromey  <tromey@redhat.com>\n+\t    Ian Lance Taylor  <iant@google.com>\n+\n+\t* c-common.h (enum rid): Add RID_CXX_COMPAT_WARN.\n+\t(struct c_common_resword): Define.\n+\t(D_CONLY, D_CXXONLY, D_C99, D_CXX0X, D_EXT, D_EXT89): Define.\n+\t(D_ASM, D_OBJC, D_CXX_OBJC, D_CXXWARN): Define.\n+\t(c_common_reswords, num_c_common_reswords): Declare.\n+\t* c-common.c (c_common_reswords): New global const array.\n+\t(num_c_common_reswords): New const int.\n+\t* c-parser.c (struct resword, reswords): Don't define.\n+\t(D_C89, D_EXT, D_EXT89, D_OBJC): Don't define.\n+\t(c_parse_init): Clarify mask code.  Use c_common_reswords rather\n+\tthan reswords.  If warning about C++ keywords, give them a special\n+\tRID code.\n+\t(c_lex_one_token): Warn about C++ keywords.  Call\n+\tobjc_is_reserved_word rather than OBJC_IS_AT_KEYWORD.\n+\t(c_parser_external_declaration): Look for RID_xxx rather than\n+\tRID_AT_xxx, for ObjC++ keywords which are also C++ keywords.\n+\t(c_parser_statement_after_labels): Likewise.\n+\t(c_parser_objc_class_instance_variables): Likewise.\n+\t(c_parser_objc_class_declaration): Likewise.\n+\t(c_parser_objc_try_catch_statement): Likewise.\n+\t* c-decl.c (c_print_identifier): Ignore RID_CXX_COMPAT_WARN.\n+\t(declspecs_add_type): Likewise.\n+\n 2008-07-11  Angelo Graziosi  <angelo.graziosi@alice.it>\n \n \t* ggc-page.c (alloc_page):"}, {"sha": "1af2120f84b3666cc0265aed4b61e4abc9a8dc87", "filename": "gcc/c-common.c", "status": "modified", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=eea1139b26437bb71fd5ee838d8d0b5f2473a16a", "patch": "@@ -581,6 +581,179 @@ static bool nonnull_check_p (tree, unsigned HOST_WIDE_INT);\n static bool get_nonnull_operand (tree, unsigned HOST_WIDE_INT *);\n static int resort_field_decl_cmp (const void *, const void *);\n \n+/* Reserved words.  The third field is a mask: keywords are disabled\n+   if they match the mask.\n+\n+   Masks for languages:\n+   C --std=c89: D_C99 | D_CXXONLY | D_OBJC | D_CXX_OBJC\n+   C --std=c99: D_CXXONLY | D_OBJC\n+   ObjC is like C except that D_OBJC and D_CXX_OBJC are not set\n+   C++ --std=c98: D_CONLY | D_CXXOX | D_OBJC\n+   C++ --std=c0x: D_CONLY | D_OBJC\n+   ObjC++ is like C++ except that D_OBJC is not set\n+\n+   If -fno-asm is used, D_ASM is added to the mask.  If\n+   -fno-gnu-keywords is used, D_EXT is added.  If -fno-asm and C in\n+   C89 mode, D_EXT89 is added for both -fno-asm and -fno-gnu-keywords.\n+   In C with -Wcxx-compat, we warn if D_CXXWARN is set.  */\n+\n+const struct c_common_resword c_common_reswords[] =\n+{\n+  { \"_Bool\",\t\tRID_BOOL,      D_CONLY },\n+  { \"_Complex\",\t\tRID_COMPLEX,\t0 },\n+  { \"_Decimal32\",       RID_DFLOAT32,  D_CONLY | D_EXT },\n+  { \"_Decimal64\",       RID_DFLOAT64,  D_CONLY | D_EXT },\n+  { \"_Decimal128\",      RID_DFLOAT128, D_CONLY | D_EXT },\n+  { \"_Fract\",           RID_FRACT,     D_CONLY | D_EXT },\n+  { \"_Accum\",           RID_ACCUM,     D_CONLY | D_EXT },\n+  { \"_Sat\",             RID_SAT,       D_CONLY | D_EXT },\n+  { \"__FUNCTION__\",\tRID_FUNCTION_NAME, 0 },\n+  { \"__PRETTY_FUNCTION__\", RID_PRETTY_FUNCTION_NAME, 0 },\n+  { \"__alignof\",\tRID_ALIGNOF,\t0 },\n+  { \"__alignof__\",\tRID_ALIGNOF,\t0 },\n+  { \"__asm\",\t\tRID_ASM,\t0 },\n+  { \"__asm__\",\t\tRID_ASM,\t0 },\n+  { \"__attribute\",\tRID_ATTRIBUTE,\t0 },\n+  { \"__attribute__\",\tRID_ATTRIBUTE,\t0 },\n+  { \"__builtin_choose_expr\", RID_CHOOSE_EXPR, D_CONLY },\n+  { \"__builtin_offsetof\", RID_OFFSETOF, 0 },\n+  { \"__builtin_types_compatible_p\", RID_TYPES_COMPATIBLE_P, D_CONLY },\n+  { \"__builtin_va_arg\",\tRID_VA_ARG,\t0 },\n+  { \"__complex\",\tRID_COMPLEX,\t0 },\n+  { \"__complex__\",\tRID_COMPLEX,\t0 },\n+  { \"__const\",\t\tRID_CONST,\t0 },\n+  { \"__const__\",\tRID_CONST,\t0 },\n+  { \"__decltype\",       RID_DECLTYPE,   D_CXXONLY },\n+  { \"__extension__\",\tRID_EXTENSION,\t0 },\n+  { \"__func__\",\t\tRID_C99_FUNCTION_NAME, 0 },\n+  { \"__has_nothrow_assign\", RID_HAS_NOTHROW_ASSIGN, D_CXXONLY },\n+  { \"__has_nothrow_constructor\", RID_HAS_NOTHROW_CONSTRUCTOR, D_CXXONLY },\n+  { \"__has_nothrow_copy\", RID_HAS_NOTHROW_COPY, D_CXXONLY },\n+  { \"__has_trivial_assign\", RID_HAS_TRIVIAL_ASSIGN, D_CXXONLY },\n+  { \"__has_trivial_constructor\", RID_HAS_TRIVIAL_CONSTRUCTOR, D_CXXONLY },\n+  { \"__has_trivial_copy\", RID_HAS_TRIVIAL_COPY, D_CXXONLY },\n+  { \"__has_trivial_destructor\", RID_HAS_TRIVIAL_DESTRUCTOR, D_CXXONLY },\n+  { \"__has_virtual_destructor\", RID_HAS_VIRTUAL_DESTRUCTOR, D_CXXONLY },\n+  { \"__is_abstract\",\tRID_IS_ABSTRACT, D_CXXONLY },\n+  { \"__is_base_of\",\tRID_IS_BASE_OF, D_CXXONLY },\n+  { \"__is_class\",\tRID_IS_CLASS,\tD_CXXONLY },\n+  { \"__is_convertible_to\", RID_IS_CONVERTIBLE_TO, D_CXXONLY },\n+  { \"__is_empty\",\tRID_IS_EMPTY,\tD_CXXONLY },\n+  { \"__is_enum\",\tRID_IS_ENUM,\tD_CXXONLY },\n+  { \"__is_pod\",\t\tRID_IS_POD,\tD_CXXONLY },\n+  { \"__is_polymorphic\",\tRID_IS_POLYMORPHIC, D_CXXONLY },\n+  { \"__is_union\",\tRID_IS_UNION,\tD_CXXONLY },\n+  { \"__imag\",\t\tRID_IMAGPART,\t0 },\n+  { \"__imag__\",\t\tRID_IMAGPART,\t0 },\n+  { \"__inline\",\t\tRID_INLINE,\t0 },\n+  { \"__inline__\",\tRID_INLINE,\t0 },\n+  { \"__label__\",\tRID_LABEL,\t0 },\n+  { \"__null\",\t\tRID_NULL,\t0 },\n+  { \"__real\",\t\tRID_REALPART,\t0 },\n+  { \"__real__\",\t\tRID_REALPART,\t0 },\n+  { \"__restrict\",\tRID_RESTRICT,\t0 },\n+  { \"__restrict__\",\tRID_RESTRICT,\t0 },\n+  { \"__signed\",\t\tRID_SIGNED,\t0 },\n+  { \"__signed__\",\tRID_SIGNED,\t0 },\n+  { \"__thread\",\t\tRID_THREAD,\t0 },\n+  { \"__typeof\",\t\tRID_TYPEOF,\t0 },\n+  { \"__typeof__\",\tRID_TYPEOF,\t0 },\n+  { \"__volatile\",\tRID_VOLATILE,\t0 },\n+  { \"__volatile__\",\tRID_VOLATILE,\t0 },\n+  { \"asm\",\t\tRID_ASM,\tD_ASM },\n+  { \"auto\",\t\tRID_AUTO,\t0 },\n+  { \"bool\",\t\tRID_BOOL,\tD_CXXONLY },\n+  { \"break\",\t\tRID_BREAK,\t0 },\n+  { \"case\",\t\tRID_CASE,\t0 },\n+  { \"catch\",\t\tRID_CATCH,\tD_CXX_OBJC },\n+  { \"char\",\t\tRID_CHAR,\t0 },\n+  { \"char16_t\",\t\tRID_CHAR16,\tD_CXXONLY | D_CXX0X },\n+  { \"char32_t\",\t\tRID_CHAR32,\tD_CXXONLY | D_CXX0X },\n+  { \"class\",\t\tRID_CLASS,\tD_CXX_OBJC },\n+  { \"const\",\t\tRID_CONST,\t0 },\n+  { \"const_cast\",\tRID_CONSTCAST,\tD_CXXONLY | D_CXXWARN },\n+  { \"continue\",\t\tRID_CONTINUE,\t0 },\n+  { \"decltype\",         RID_DECLTYPE,   D_CXXONLY | D_CXX0X },\n+  { \"default\",\t\tRID_DEFAULT,\t0 },\n+  { \"delete\",\t\tRID_DELETE,\tD_CXXONLY },\n+  { \"do\",\t\tRID_DO,\t\t0 },\n+  { \"double\",\t\tRID_DOUBLE,\t0 },\n+  { \"dynamic_cast\",\tRID_DYNCAST,\tD_CXXONLY | D_CXXWARN },\n+  { \"else\",\t\tRID_ELSE,\t0 },\n+  { \"enum\",\t\tRID_ENUM,\t0 },\n+  { \"explicit\",\t\tRID_EXPLICIT,\tD_CXXONLY },\n+  { \"export\",\t\tRID_EXPORT,\tD_CXXONLY },\n+  { \"extern\",\t\tRID_EXTERN,\t0 },\n+  { \"false\",\t\tRID_FALSE,\tD_CXXONLY },\n+  { \"float\",\t\tRID_FLOAT,\t0 },\n+  { \"for\",\t\tRID_FOR,\t0 },\n+  { \"friend\",\t\tRID_FRIEND,\tD_CXXONLY },\n+  { \"goto\",\t\tRID_GOTO,\t0 },\n+  { \"if\",\t\tRID_IF,\t\t0 },\n+  { \"inline\",\t\tRID_INLINE,\tD_EXT89 },\n+  { \"int\",\t\tRID_INT,\t0 },\n+  { \"long\",\t\tRID_LONG,\t0 },\n+  { \"mutable\",\t\tRID_MUTABLE,\tD_CXXONLY | D_CXXWARN },\n+  { \"namespace\",\tRID_NAMESPACE,\tD_CXXONLY },\n+  { \"new\",\t\tRID_NEW,\tD_CXXONLY },\n+  { \"operator\",\t\tRID_OPERATOR,\tD_CXXONLY },\n+  { \"private\",\t\tRID_PRIVATE,\tD_CXX_OBJC },\n+  { \"protected\",\tRID_PROTECTED,\tD_CXX_OBJC },\n+  { \"public\",\t\tRID_PUBLIC,\tD_CXX_OBJC },\n+  { \"register\",\t\tRID_REGISTER,\t0 },\n+  { \"reinterpret_cast\",\tRID_REINTCAST,\tD_CXXONLY | D_CXXWARN },\n+  { \"restrict\",\t\tRID_RESTRICT,\tD_CONLY | D_C99 },\n+  { \"return\",\t\tRID_RETURN,\t0 },\n+  { \"short\",\t\tRID_SHORT,\t0 },\n+  { \"signed\",\t\tRID_SIGNED,\t0 },\n+  { \"sizeof\",\t\tRID_SIZEOF,\t0 },\n+  { \"static\",\t\tRID_STATIC,\t0 },\n+  { \"static_assert\",    RID_STATIC_ASSERT, D_CXXONLY | D_CXX0X | D_CXXWARN },\n+  { \"static_cast\",\tRID_STATCAST,\tD_CXXONLY | D_CXXWARN },\n+  { \"struct\",\t\tRID_STRUCT,\t0 },\n+  { \"switch\",\t\tRID_SWITCH,\t0 },\n+  { \"template\",\t\tRID_TEMPLATE,\tD_CXXONLY },\n+  { \"this\",\t\tRID_THIS,\tD_CXXONLY },\n+  { \"throw\",\t\tRID_THROW,\tD_CXX_OBJC },\n+  { \"true\",\t\tRID_TRUE,\tD_CXXONLY },\n+  { \"try\",\t\tRID_TRY,\tD_CXX_OBJC },\n+  { \"typedef\",\t\tRID_TYPEDEF,\t0 },\n+  { \"typename\",\t\tRID_TYPENAME,\tD_CXXONLY },\n+  { \"typeid\",\t\tRID_TYPEID,\tD_CXXONLY },\n+  { \"typeof\",\t\tRID_TYPEOF,\tD_ASM | D_EXT },\n+  { \"union\",\t\tRID_UNION,\t0 },\n+  { \"unsigned\",\t\tRID_UNSIGNED,\t0 },\n+  { \"using\",\t\tRID_USING,\tD_CXXONLY },\n+  { \"virtual\",\t\tRID_VIRTUAL,\tD_CXXONLY },\n+  { \"void\",\t\tRID_VOID,\t0 },\n+  { \"volatile\",\t\tRID_VOLATILE,\t0 },\n+  { \"wchar_t\",\t\tRID_WCHAR,\tD_CXXONLY },\n+  { \"while\",\t\tRID_WHILE,\t0 },\n+  /* These Objective-C keywords are recognized only immediately after\n+     an '@'.  */\n+  { \"compatibility_alias\", RID_AT_ALIAS,\tD_OBJC },\n+  { \"defs\",\t\tRID_AT_DEFS,\t\tD_OBJC },\n+  { \"encode\",\t\tRID_AT_ENCODE,\t\tD_OBJC },\n+  { \"end\",\t\tRID_AT_END,\t\tD_OBJC },\n+  { \"implementation\",\tRID_AT_IMPLEMENTATION,\tD_OBJC },\n+  { \"interface\",\tRID_AT_INTERFACE,\tD_OBJC },\n+  { \"protocol\",\t\tRID_AT_PROTOCOL,\tD_OBJC },\n+  { \"selector\",\t\tRID_AT_SELECTOR,\tD_OBJC },\n+  { \"finally\",\t\tRID_AT_FINALLY,\t\tD_OBJC },\n+  { \"synchronized\",\tRID_AT_SYNCHRONIZED,\tD_OBJC },\n+  /* These are recognized only in protocol-qualifier context\n+     (see above) */\n+  { \"bycopy\",\t\tRID_BYCOPY,\t\tD_OBJC },\n+  { \"byref\",\t\tRID_BYREF,\t\tD_OBJC },\n+  { \"in\",\t\tRID_IN,\t\t\tD_OBJC },\n+  { \"inout\",\t\tRID_INOUT,\t\tD_OBJC },\n+  { \"oneway\",\t\tRID_ONEWAY,\t\tD_OBJC },\n+  { \"out\",\t\tRID_OUT,\t\tD_OBJC },\n+};\n+\n+const unsigned int num_c_common_reswords =\n+  sizeof c_common_reswords / sizeof (struct c_common_resword);\n+\n /* Table of machine-independent attributes common to all C-like languages.  */\n const struct attribute_spec c_common_attribute_table[] =\n {"}, {"sha": "7edb4a67afda1524ab972bea7c90539acea18883", "filename": "gcc/c-common.h", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=eea1139b26437bb71fd5ee838d8d0b5f2473a16a", "patch": "@@ -74,6 +74,10 @@ enum rid\n   RID_DFLOAT32, RID_DFLOAT64, RID_DFLOAT128,\n   RID_FRACT, RID_ACCUM,\n \n+  /* This means to warn that this is a C++ keyword, and then treat it\n+     as a normal identifier.  */\n+  RID_CXX_COMPAT_WARN,\n+\n   /* Too many ways of getting the name of a function as a string */\n   RID_FUNCTION_NAME, RID_PRETTY_FUNCTION_NAME, RID_C99_FUNCTION_NAME,\n \n@@ -197,6 +201,36 @@ struct c_common_identifier GTY(())\n   struct cpp_hashnode node;\n };\n \n+/* An entry in the reserved keyword table.  */\n+\n+struct c_common_resword\n+{\n+  const char *const word;\n+  ENUM_BITFIELD(rid) const rid : 16;\n+  const unsigned int disable   : 16;\n+};\n+\n+/* Disable mask.  Keywords are disabled if (reswords[i].disable &\n+   mask) is _true_.  Thus for keywords which are present in all\n+   languages the disable field is zero.  */\n+\n+#define D_CONLY\t\t0x001\t/* C only (not in C++).  */\n+#define D_CXXONLY\t0x002\t/* C++ only (not in C).  */\n+#define D_C99\t\t0x004\t/* In C, C99 only.  */\n+#define D_CXX0X         0x008\t/* In C++, C++0X only.  */\n+#define D_EXT\t\t0x010\t/* GCC extension.  */\n+#define D_EXT89\t\t0x020\t/* GCC extension incorporated in C99.  */\n+#define D_ASM\t\t0x040\t/* Disabled by -fno-asm.  */\n+#define D_OBJC\t\t0x080\t/* In Objective C and neither C nor C++.  */\n+#define D_CXX_OBJC\t0x100\t/* In Objective C, and C++, but not C.  */\n+#define D_CXXWARN\t0x200\t/* In C warn with -Wcxx-compat.  */\n+\n+/* The reserved keyword table.  */\n+extern const struct c_common_resword c_common_reswords[];\n+\n+/* The number of items in the reserved keyword table.  */\n+extern const unsigned int num_c_common_reswords;\n+\n #define char16_type_node\t\tc_global_trees[CTI_CHAR16_TYPE]\n #define char32_type_node\t\tc_global_trees[CTI_CHAR32_TYPE]\n #define wchar_type_node\t\t\tc_global_trees[CTI_WCHAR_TYPE]"}, {"sha": "0f190e12be88b62dcafb80b5ddc6ee795092b143", "filename": "gcc/c-decl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=eea1139b26437bb71fd5ee838d8d0b5f2473a16a", "patch": "@@ -445,7 +445,7 @@ c_print_identifier (FILE *file, tree node, int indent)\n   print_node (file, \"symbol\", I_SYMBOL_DECL (node), indent + 4);\n   print_node (file, \"tag\", I_TAG_DECL (node), indent + 4);\n   print_node (file, \"label\", I_LABEL_DECL (node), indent + 4);\n-  if (C_IS_RESERVED_WORD (node))\n+  if (C_IS_RESERVED_WORD (node) && C_RID_CODE (node) != RID_CXX_COMPAT_WARN)\n     {\n       tree rid = ridpointers[C_RID_CODE (node)];\n       indent_to (file, indent + 4);\n@@ -7177,7 +7177,9 @@ declspecs_add_type (struct c_declspecs *specs, struct c_typespec spec)\n     specs->deprecated_p = true;\n \n   /* Handle type specifier keywords.  */\n-  if (TREE_CODE (type) == IDENTIFIER_NODE && C_IS_RESERVED_WORD (type))\n+  if (TREE_CODE (type) == IDENTIFIER_NODE\n+      && C_IS_RESERVED_WORD (type)\n+      && C_RID_CODE (type) != RID_CXX_COMPAT_WARN)\n     {\n       enum rid i = C_RID_CODE (type);\n       if (specs->type)"}, {"sha": "aba007c9bc2c1b47e33f2a330a69b3004b230d17", "filename": "gcc/c-parser.c", "status": "modified", "additions": 44, "deletions": 145, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=eea1139b26437bb71fd5ee838d8d0b5f2473a16a", "patch": "@@ -59,131 +59,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n \n \f\n-/* The reserved keyword table.  */\n-struct resword\n-{\n-  const char *word;\n-  ENUM_BITFIELD(rid) rid : 16;\n-  unsigned int disable   : 16;\n-};\n-\n-/* Disable mask.  Keywords are disabled if (reswords[i].disable &\n-   mask) is _true_.  */\n-#define D_C89\t0x01\t/* not in C89 */\n-#define D_EXT\t0x02\t/* GCC extension */\n-#define D_EXT89\t0x04\t/* GCC extension incorporated in C99 */\n-#define D_OBJC\t0x08\t/* Objective C only */\n-\n-static const struct resword reswords[] =\n-{\n-  { \"_Bool\",\t\tRID_BOOL,\t0 },\n-  { \"_Complex\",\t\tRID_COMPLEX,\t0 },\n-  { \"_Decimal32\",       RID_DFLOAT32,  D_EXT },\n-  { \"_Decimal64\",       RID_DFLOAT64,  D_EXT },\n-  { \"_Decimal128\",      RID_DFLOAT128, D_EXT },\n-  { \"_Fract\",           RID_FRACT,     D_EXT },\n-  { \"_Accum\",           RID_ACCUM,     D_EXT },\n-  { \"_Sat\",             RID_SAT,       D_EXT },\n-  { \"__FUNCTION__\",\tRID_FUNCTION_NAME, 0 },\n-  { \"__PRETTY_FUNCTION__\", RID_PRETTY_FUNCTION_NAME, 0 },\n-  { \"__alignof\",\tRID_ALIGNOF,\t0 },\n-  { \"__alignof__\",\tRID_ALIGNOF,\t0 },\n-  { \"__asm\",\t\tRID_ASM,\t0 },\n-  { \"__asm__\",\t\tRID_ASM,\t0 },\n-  { \"__attribute\",\tRID_ATTRIBUTE,\t0 },\n-  { \"__attribute__\",\tRID_ATTRIBUTE,\t0 },\n-  { \"__builtin_choose_expr\", RID_CHOOSE_EXPR, 0 },\n-  { \"__builtin_offsetof\", RID_OFFSETOF, 0 },\n-  { \"__builtin_types_compatible_p\", RID_TYPES_COMPATIBLE_P, 0 },\n-  { \"__builtin_va_arg\",\tRID_VA_ARG,\t0 },\n-  { \"__complex\",\tRID_COMPLEX,\t0 },\n-  { \"__complex__\",\tRID_COMPLEX,\t0 },\n-  { \"__const\",\t\tRID_CONST,\t0 },\n-  { \"__const__\",\tRID_CONST,\t0 },\n-  { \"__extension__\",\tRID_EXTENSION,\t0 },\n-  { \"__func__\",\t\tRID_C99_FUNCTION_NAME, 0 },\n-  { \"__imag\",\t\tRID_IMAGPART,\t0 },\n-  { \"__imag__\",\t\tRID_IMAGPART,\t0 },\n-  { \"__inline\",\t\tRID_INLINE,\t0 },\n-  { \"__inline__\",\tRID_INLINE,\t0 },\n-  { \"__label__\",\tRID_LABEL,\t0 },\n-  { \"__real\",\t\tRID_REALPART,\t0 },\n-  { \"__real__\",\t\tRID_REALPART,\t0 },\n-  { \"__restrict\",\tRID_RESTRICT,\t0 },\n-  { \"__restrict__\",\tRID_RESTRICT,\t0 },\n-  { \"__signed\",\t\tRID_SIGNED,\t0 },\n-  { \"__signed__\",\tRID_SIGNED,\t0 },\n-  { \"__thread\",\t\tRID_THREAD,\t0 },\n-  { \"__typeof\",\t\tRID_TYPEOF,\t0 },\n-  { \"__typeof__\",\tRID_TYPEOF,\t0 },\n-  { \"__volatile\",\tRID_VOLATILE,\t0 },\n-  { \"__volatile__\",\tRID_VOLATILE,\t0 },\n-  { \"asm\",\t\tRID_ASM,\tD_EXT },\n-  { \"auto\",\t\tRID_AUTO,\t0 },\n-  { \"break\",\t\tRID_BREAK,\t0 },\n-  { \"case\",\t\tRID_CASE,\t0 },\n-  { \"char\",\t\tRID_CHAR,\t0 },\n-  { \"const\",\t\tRID_CONST,\t0 },\n-  { \"continue\",\t\tRID_CONTINUE,\t0 },\n-  { \"default\",\t\tRID_DEFAULT,\t0 },\n-  { \"do\",\t\tRID_DO,\t\t0 },\n-  { \"double\",\t\tRID_DOUBLE,\t0 },\n-  { \"else\",\t\tRID_ELSE,\t0 },\n-  { \"enum\",\t\tRID_ENUM,\t0 },\n-  { \"extern\",\t\tRID_EXTERN,\t0 },\n-  { \"float\",\t\tRID_FLOAT,\t0 },\n-  { \"for\",\t\tRID_FOR,\t0 },\n-  { \"goto\",\t\tRID_GOTO,\t0 },\n-  { \"if\",\t\tRID_IF,\t\t0 },\n-  { \"inline\",\t\tRID_INLINE,\tD_EXT89 },\n-  { \"int\",\t\tRID_INT,\t0 },\n-  { \"long\",\t\tRID_LONG,\t0 },\n-  { \"register\",\t\tRID_REGISTER,\t0 },\n-  { \"restrict\",\t\tRID_RESTRICT,\tD_C89 },\n-  { \"return\",\t\tRID_RETURN,\t0 },\n-  { \"short\",\t\tRID_SHORT,\t0 },\n-  { \"signed\",\t\tRID_SIGNED,\t0 },\n-  { \"sizeof\",\t\tRID_SIZEOF,\t0 },\n-  { \"static\",\t\tRID_STATIC,\t0 },\n-  { \"struct\",\t\tRID_STRUCT,\t0 },\n-  { \"switch\",\t\tRID_SWITCH,\t0 },\n-  { \"typedef\",\t\tRID_TYPEDEF,\t0 },\n-  { \"typeof\",\t\tRID_TYPEOF,\tD_EXT },\n-  { \"union\",\t\tRID_UNION,\t0 },\n-  { \"unsigned\",\t\tRID_UNSIGNED,\t0 },\n-  { \"void\",\t\tRID_VOID,\t0 },\n-  { \"volatile\",\t\tRID_VOLATILE,\t0 },\n-  { \"while\",\t\tRID_WHILE,\t0 },\n-  /* These Objective-C keywords are recognized only immediately after\n-     an '@'.  */\n-  { \"class\",\t\tRID_AT_CLASS,\t\tD_OBJC },\n-  { \"compatibility_alias\", RID_AT_ALIAS,\tD_OBJC },\n-  { \"defs\",\t\tRID_AT_DEFS,\t\tD_OBJC },\n-  { \"encode\",\t\tRID_AT_ENCODE,\t\tD_OBJC },\n-  { \"end\",\t\tRID_AT_END,\t\tD_OBJC },\n-  { \"implementation\",\tRID_AT_IMPLEMENTATION,\tD_OBJC },\n-  { \"interface\",\tRID_AT_INTERFACE,\tD_OBJC },\n-  { \"private\",\t\tRID_AT_PRIVATE,\t\tD_OBJC },\n-  { \"protected\",\tRID_AT_PROTECTED,\tD_OBJC },\n-  { \"protocol\",\t\tRID_AT_PROTOCOL,\tD_OBJC },\n-  { \"public\",\t\tRID_AT_PUBLIC,\t\tD_OBJC },\n-  { \"selector\",\t\tRID_AT_SELECTOR,\tD_OBJC },\n-  { \"throw\",\t\tRID_AT_THROW,\t\tD_OBJC },\n-  { \"try\",\t\tRID_AT_TRY,\t\tD_OBJC },\n-  { \"catch\",\t\tRID_AT_CATCH,\t\tD_OBJC },\n-  { \"finally\",\t\tRID_AT_FINALLY,\t\tD_OBJC },\n-  { \"synchronized\",\tRID_AT_SYNCHRONIZED,\tD_OBJC },\n-  /* These are recognized only in protocol-qualifier context\n-     (see above) */\n-  { \"bycopy\",\t\tRID_BYCOPY,\t\tD_OBJC },\n-  { \"byref\",\t\tRID_BYREF,\t\tD_OBJC },\n-  { \"in\",\t\tRID_IN,\t\t\tD_OBJC },\n-  { \"inout\",\t\tRID_INOUT,\t\tD_OBJC },\n-  { \"oneway\",\t\tRID_ONEWAY,\t\tD_OBJC },\n-  { \"out\",\t\tRID_OUT,\t\tD_OBJC },\n-};\n-#define N_reswords (sizeof reswords / sizeof (struct resword))\n-\n /* Initialization routine for this file.  */\n \n void\n@@ -193,24 +68,41 @@ c_parse_init (void)\n      identifiers.  */\n   unsigned int i;\n   tree id;\n-  int mask = (flag_isoc99 ? 0 : D_C89)\n-\t      | (flag_no_asm ? (flag_isoc99 ? D_EXT : D_EXT|D_EXT89) : 0);\n+  int mask = 0;\n \n+  mask |= D_CXXONLY;\n+  if (!flag_isoc99)\n+    mask |= D_C99;\n+  if (flag_no_asm)\n+    {\n+      mask |= D_ASM | D_EXT;\n+      if (!flag_isoc99)\n+\tmask |= D_EXT89;\n+    }\n   if (!c_dialect_objc ())\n-     mask |= D_OBJC;\n+    mask |= D_OBJC | D_CXX_OBJC;\n \n   ridpointers = GGC_CNEWVEC (tree, (int) RID_MAX);\n-  for (i = 0; i < N_reswords; i++)\n+  for (i = 0; i < num_c_common_reswords; i++)\n     {\n       /* If a keyword is disabled, do not enter it into the table\n \t and so create a canonical spelling that isn't a keyword.  */\n-      if (reswords[i].disable & mask)\n-\tcontinue;\n+      if (c_common_reswords[i].disable & mask)\n+\t{\n+\t  if (warn_cxx_compat\n+\t      && (c_common_reswords[i].disable & D_CXXWARN))\n+\t    {\n+\t      id = get_identifier (c_common_reswords[i].word);\n+\t      C_SET_RID_CODE (id, RID_CXX_COMPAT_WARN);\n+\t      C_IS_RESERVED_WORD (id) = 1;\n+\t    }\n+\t  continue;\n+\t}\n \n-      id = get_identifier (reswords[i].word);\n-      C_SET_RID_CODE (id, reswords[i].rid);\n+      id = get_identifier (c_common_reswords[i].word);\n+      C_SET_RID_CODE (id, c_common_reswords[i].rid);\n       C_IS_RESERVED_WORD (id) = 1;\n-      ridpointers [(int) reswords[i].rid] = id;\n+      ridpointers [(int) c_common_reswords[i].rid] = id;\n     }\n }\n \f\n@@ -330,9 +222,16 @@ c_lex_one_token (c_parser *parser, c_token *token)\n \t  {\n \t    enum rid rid_code = C_RID_CODE (token->value);\n \n-\t    if (c_dialect_objc ())\n+\t    if (rid_code == RID_CXX_COMPAT_WARN)\n+\t      {\n+\t\twarning (OPT_Wc___compat,\n+\t\t\t \"%Hidentifier %qs conflicts with C++ keyword\",\n+\t\t\t &token->location,\n+\t\t\t IDENTIFIER_POINTER (token->value));\n+\t      }\n+\t    else if (c_dialect_objc ())\n \t      {\n-\t\tif (!OBJC_IS_AT_KEYWORD (rid_code)\n+\t\tif (!objc_is_reserved_word (token->value)\n \t\t    && (!OBJC_IS_PQ_KEYWORD (rid_code)\n \t\t\t|| parser->objc_pq_context))\n \t\t  {\n@@ -1129,7 +1028,7 @@ c_parser_external_declaration (c_parser *parser)\n \t  gcc_assert (c_dialect_objc ());\n \t  c_parser_objc_class_definition (parser);\n \t  break;\n-\tcase RID_AT_CLASS:\n+\tcase RID_CLASS:\n \t  gcc_assert (c_dialect_objc ());\n \t  c_parser_objc_class_declaration (parser);\n \t  break;\n@@ -3830,7 +3729,7 @@ c_parser_statement_after_labels (c_parser *parser)\n \tcase RID_ASM:\n \t  stmt = c_parser_asm_statement (parser);\n \t  break;\n-\tcase RID_AT_THROW:\n+\tcase RID_THROW:\n \t  gcc_assert (c_dialect_objc ());\n \t  c_parser_consume_token (parser);\n \t  if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n@@ -3845,7 +3744,7 @@ c_parser_statement_after_labels (c_parser *parser)\n \t      goto expect_semicolon;\n \t    }\n \t  break;\n-\tcase RID_AT_TRY:\n+\tcase RID_TRY:\n \t  gcc_assert (c_dialect_objc ());\n \t  c_parser_objc_try_catch_statement (parser);\n \t  break;\n@@ -5906,19 +5805,19 @@ c_parser_objc_class_instance_variables (c_parser *parser)\n \t  break;\n \t}\n       /* Parse any objc-visibility-spec.  */\n-      if (c_parser_next_token_is_keyword (parser, RID_AT_PRIVATE))\n+      if (c_parser_next_token_is_keyword (parser, RID_PRIVATE))\n \t{\n \t  c_parser_consume_token (parser);\n \t  objc_set_visibility (2);\n \t  continue;\n \t}\n-      else if (c_parser_next_token_is_keyword (parser, RID_AT_PROTECTED))\n+      else if (c_parser_next_token_is_keyword (parser, RID_PROTECTED))\n \t{\n \t  c_parser_consume_token (parser);\n \t  objc_set_visibility (0);\n \t  continue;\n \t}\n-      else if (c_parser_next_token_is_keyword (parser, RID_AT_PUBLIC))\n+      else if (c_parser_next_token_is_keyword (parser, RID_PUBLIC))\n \t{\n \t  c_parser_consume_token (parser);\n \t  objc_set_visibility (1);\n@@ -5953,7 +5852,7 @@ static void\n c_parser_objc_class_declaration (c_parser *parser)\n {\n   tree list = NULL_TREE;\n-  gcc_assert (c_parser_next_token_is_keyword (parser, RID_AT_CLASS));\n+  gcc_assert (c_parser_next_token_is_keyword (parser, RID_CLASS));\n   c_parser_consume_token (parser);\n   /* Any identifiers, including those declared as type names, are OK\n      here.  */\n@@ -6390,12 +6289,12 @@ c_parser_objc_try_catch_statement (c_parser *parser)\n {\n   location_t loc;\n   tree stmt;\n-  gcc_assert (c_parser_next_token_is_keyword (parser, RID_AT_TRY));\n+  gcc_assert (c_parser_next_token_is_keyword (parser, RID_TRY));\n   c_parser_consume_token (parser);\n   loc = c_parser_peek_token (parser)->location;\n   stmt = c_parser_compound_statement (parser);\n   objc_begin_try_stmt (loc, stmt);\n-  while (c_parser_next_token_is_keyword (parser, RID_AT_CATCH))\n+  while (c_parser_next_token_is_keyword (parser, RID_CATCH))\n     {\n       struct c_parm *parm;\n       c_parser_consume_token (parser);"}, {"sha": "ac33477482d56d1bba6f4eb28f38ee141108d153", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eea1139b26437bb71fd5ee838d8d0b5f2473a16a", "patch": "@@ -1,3 +1,11 @@\n+2008-07-11  Tom Tromey  <tromey@redhat.com>\n+\t    Ian Lance Taylor  <iant@google.com>\n+\n+\t* lex.c (struct resword, reswords): Don't define.\n+\t(D_EXT, D_ASM, D_OBJC, D_CXX0X): Don't define.\n+\t(init_reswords): Clarify mask code.  Use c_common_reswords rather\n+\tthan reswords.\n+\n 2008-07-11  Dodji Seketeli  <dseketel@redhat.com>\n \n \tPR c++/13101"}, {"sha": "890640e912a7455e50b8ab7d9885400521a264de", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 17, "deletions": 175, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=eea1139b26437bb71fd5ee838d8d0b5f2473a16a", "patch": "@@ -163,190 +163,32 @@ init_operators (void)\n     = \"(round %=)\";\n }\n \n-/* The reserved keyword table.  */\n-struct resword\n-{\n-  const char *const word;\n-  ENUM_BITFIELD(rid) const rid : 16;\n-  const unsigned int disable   : 16;\n-};\n-\n-/* Disable mask.  Keywords are disabled if (reswords[i].disable & mask) is\n-   _true_.  */\n-#define D_EXT\t\t0x01\t/* GCC extension */\n-#define D_ASM\t\t0x02\t/* in C99, but has a switch to turn it off */\n-#define D_OBJC\t\t0x04\t/* Objective C++ only */\n-#define D_CXX0X         0x08    /* C++0x only */\n-\n-CONSTRAINT(ridbits_fit, RID_LAST_MODIFIER < sizeof(unsigned long) * CHAR_BIT);\n-\n-static const struct resword reswords[] =\n-{\n-  { \"_Complex\",\t\tRID_COMPLEX,\t0 },\n-  { \"__FUNCTION__\",\tRID_FUNCTION_NAME, 0 },\n-  { \"__PRETTY_FUNCTION__\", RID_PRETTY_FUNCTION_NAME, 0 },\n-  { \"__alignof\",\tRID_ALIGNOF,\t0 },\n-  { \"__alignof__\",\tRID_ALIGNOF,\t0 },\n-  { \"__asm\",\t\tRID_ASM,\t0 },\n-  { \"__asm__\",\t\tRID_ASM,\t0 },\n-  { \"__attribute\",\tRID_ATTRIBUTE,\t0 },\n-  { \"__attribute__\",\tRID_ATTRIBUTE,\t0 },\n-  { \"__builtin_offsetof\", RID_OFFSETOF, 0 },\n-  { \"__builtin_va_arg\",\tRID_VA_ARG,\t0 },\n-  { \"__complex\",\tRID_COMPLEX,\t0 },\n-  { \"__complex__\",\tRID_COMPLEX,\t0 },\n-  { \"__const\",\t\tRID_CONST,\t0 },\n-  { \"__const__\",\tRID_CONST,\t0 },\n-  { \"__decltype\",       RID_DECLTYPE,   0 },\n-  { \"__extension__\",\tRID_EXTENSION,\t0 },\n-  { \"__func__\",\t\tRID_C99_FUNCTION_NAME,\t0 },\n-  { \"__has_nothrow_assign\", RID_HAS_NOTHROW_ASSIGN, 0 },\n-  { \"__has_nothrow_constructor\", RID_HAS_NOTHROW_CONSTRUCTOR, 0 },\n-  { \"__has_nothrow_copy\", RID_HAS_NOTHROW_COPY, 0 },\n-  { \"__has_trivial_assign\", RID_HAS_TRIVIAL_ASSIGN, 0 },\n-  { \"__has_trivial_constructor\", RID_HAS_TRIVIAL_CONSTRUCTOR, 0 },\n-  { \"__has_trivial_copy\", RID_HAS_TRIVIAL_COPY, 0 },\n-  { \"__has_trivial_destructor\", RID_HAS_TRIVIAL_DESTRUCTOR, 0 },\n-  { \"__has_virtual_destructor\", RID_HAS_VIRTUAL_DESTRUCTOR, 0 },\n-  { \"__is_abstract\",\tRID_IS_ABSTRACT, 0 },\n-  { \"__is_base_of\",\tRID_IS_BASE_OF, 0 },\n-  { \"__is_class\",\tRID_IS_CLASS,\t0 },\n-  { \"__is_convertible_to\", RID_IS_CONVERTIBLE_TO, 0 },\n-  { \"__is_empty\",\tRID_IS_EMPTY,\t0 },\n-  { \"__is_enum\",\tRID_IS_ENUM,\t0 },\n-  { \"__is_pod\",\t\tRID_IS_POD,\t0 },\n-  { \"__is_polymorphic\",\tRID_IS_POLYMORPHIC, 0 },\n-  { \"__is_union\",\tRID_IS_UNION,\t0 },\n-  { \"__imag\",\t\tRID_IMAGPART,\t0 },\n-  { \"__imag__\",\t\tRID_IMAGPART,\t0 },\n-  { \"__inline\",\t\tRID_INLINE,\t0 },\n-  { \"__inline__\",\tRID_INLINE,\t0 },\n-  { \"__label__\",\tRID_LABEL,\t0 },\n-  { \"__null\",\t\tRID_NULL,\t0 },\n-  { \"__real\",\t\tRID_REALPART,\t0 },\n-  { \"__real__\",\t\tRID_REALPART,\t0 },\n-  { \"__restrict\",\tRID_RESTRICT,\t0 },\n-  { \"__restrict__\",\tRID_RESTRICT,\t0 },\n-  { \"__signed\",\t\tRID_SIGNED,\t0 },\n-  { \"__signed__\",\tRID_SIGNED,\t0 },\n-  { \"__thread\",\t\tRID_THREAD,\t0 },\n-  { \"__typeof\",\t\tRID_TYPEOF,\t0 },\n-  { \"__typeof__\",\tRID_TYPEOF,\t0 },\n-  { \"__volatile\",\tRID_VOLATILE,\t0 },\n-  { \"__volatile__\",\tRID_VOLATILE,\t0 },\n-  { \"asm\",\t\tRID_ASM,\tD_ASM },\n-  { \"auto\",\t\tRID_AUTO,\t0 },\n-  { \"bool\",\t\tRID_BOOL,\t0 },\n-  { \"break\",\t\tRID_BREAK,\t0 },\n-  { \"case\",\t\tRID_CASE,\t0 },\n-  { \"catch\",\t\tRID_CATCH,\t0 },\n-  { \"char\",\t\tRID_CHAR,\t0 },\n-  { \"char16_t\",\t\tRID_CHAR16,\tD_CXX0X },\n-  { \"char32_t\",\t\tRID_CHAR32,\tD_CXX0X },\n-  { \"class\",\t\tRID_CLASS,\t0 },\n-  { \"const\",\t\tRID_CONST,\t0 },\n-  { \"const_cast\",\tRID_CONSTCAST,\t0 },\n-  { \"continue\",\t\tRID_CONTINUE,\t0 },\n-  { \"decltype\",         RID_DECLTYPE,   D_CXX0X },\n-  { \"default\",\t\tRID_DEFAULT,\t0 },\n-  { \"delete\",\t\tRID_DELETE,\t0 },\n-  { \"do\",\t\tRID_DO,\t\t0 },\n-  { \"double\",\t\tRID_DOUBLE,\t0 },\n-  { \"dynamic_cast\",\tRID_DYNCAST,\t0 },\n-  { \"else\",\t\tRID_ELSE,\t0 },\n-  { \"enum\",\t\tRID_ENUM,\t0 },\n-  { \"explicit\",\t\tRID_EXPLICIT,\t0 },\n-  { \"export\",\t\tRID_EXPORT,\t0 },\n-  { \"extern\",\t\tRID_EXTERN,\t0 },\n-  { \"false\",\t\tRID_FALSE,\t0 },\n-  { \"float\",\t\tRID_FLOAT,\t0 },\n-  { \"for\",\t\tRID_FOR,\t0 },\n-  { \"friend\",\t\tRID_FRIEND,\t0 },\n-  { \"goto\",\t\tRID_GOTO,\t0 },\n-  { \"if\",\t\tRID_IF,\t\t0 },\n-  { \"inline\",\t\tRID_INLINE,\t0 },\n-  { \"int\",\t\tRID_INT,\t0 },\n-  { \"long\",\t\tRID_LONG,\t0 },\n-  { \"mutable\",\t\tRID_MUTABLE,\t0 },\n-  { \"namespace\",\tRID_NAMESPACE,\t0 },\n-  { \"new\",\t\tRID_NEW,\t0 },\n-  { \"operator\",\t\tRID_OPERATOR,\t0 },\n-  { \"private\",\t\tRID_PRIVATE,\t0 },\n-  { \"protected\",\tRID_PROTECTED,\t0 },\n-  { \"public\",\t\tRID_PUBLIC,\t0 },\n-  { \"register\",\t\tRID_REGISTER,\t0 },\n-  { \"reinterpret_cast\",\tRID_REINTCAST,\t0 },\n-  { \"return\",\t\tRID_RETURN,\t0 },\n-  { \"short\",\t\tRID_SHORT,\t0 },\n-  { \"signed\",\t\tRID_SIGNED,\t0 },\n-  { \"sizeof\",\t\tRID_SIZEOF,\t0 },\n-  { \"static\",\t\tRID_STATIC,\t0 },\n-  { \"static_assert\",    RID_STATIC_ASSERT, D_CXX0X },\n-  { \"static_cast\",\tRID_STATCAST,\t0 },\n-  { \"struct\",\t\tRID_STRUCT,\t0 },\n-  { \"switch\",\t\tRID_SWITCH,\t0 },\n-  { \"template\",\t\tRID_TEMPLATE,\t0 },\n-  { \"this\",\t\tRID_THIS,\t0 },\n-  { \"throw\",\t\tRID_THROW,\t0 },\n-  { \"true\",\t\tRID_TRUE,\t0 },\n-  { \"try\",\t\tRID_TRY,\t0 },\n-  { \"typedef\",\t\tRID_TYPEDEF,\t0 },\n-  { \"typename\",\t\tRID_TYPENAME,\t0 },\n-  { \"typeid\",\t\tRID_TYPEID,\t0 },\n-  { \"typeof\",\t\tRID_TYPEOF,\tD_ASM|D_EXT },\n-  { \"union\",\t\tRID_UNION,\t0 },\n-  { \"unsigned\",\t\tRID_UNSIGNED,\t0 },\n-  { \"using\",\t\tRID_USING,\t0 },\n-  { \"virtual\",\t\tRID_VIRTUAL,\t0 },\n-  { \"void\",\t\tRID_VOID,\t0 },\n-  { \"volatile\",\t\tRID_VOLATILE,\t0 },\n-  { \"wchar_t\",\t\tRID_WCHAR,\t0 },\n-  { \"while\",\t\tRID_WHILE,\t0 },\n-\n-  /* The remaining keywords are specific to Objective-C++.  NB:\n-     All of them will remain _disabled_, since they are context-\n-     sensitive.  */\n-\n-  /* These ObjC keywords are recognized only immediately after\n-     an '@'.  NB: The following C++ keywords double as\n-     ObjC keywords in this context: RID_CLASS, RID_PRIVATE,\n-     RID_PROTECTED, RID_PUBLIC, RID_THROW, RID_TRY and RID_CATCH.  */\n-  { \"compatibility_alias\", RID_AT_ALIAS,\tD_OBJC },\n-  { \"defs\",\t\tRID_AT_DEFS,\t\tD_OBJC },\n-  { \"encode\",\t\tRID_AT_ENCODE,\t\tD_OBJC },\n-  { \"end\",\t\tRID_AT_END,\t\tD_OBJC },\n-  { \"implementation\",\tRID_AT_IMPLEMENTATION,\tD_OBJC },\n-  { \"interface\",\tRID_AT_INTERFACE,\tD_OBJC },\n-  { \"protocol\",\t\tRID_AT_PROTOCOL,\tD_OBJC },\n-  { \"selector\",\t\tRID_AT_SELECTOR,\tD_OBJC },\n-  { \"finally\",\t\tRID_AT_FINALLY,\t\tD_OBJC },\n-  { \"synchronized\",\tRID_AT_SYNCHRONIZED,\tD_OBJC },\n-  /* These are recognized only in protocol-qualifier context.  */\n-  { \"bycopy\",\t\tRID_BYCOPY,\t\tD_OBJC },\n-  { \"byref\",\t\tRID_BYREF,\t\tD_OBJC },\n-  { \"in\",\t\tRID_IN,\t\t\tD_OBJC },\n-  { \"inout\",\t\tRID_INOUT,\t\tD_OBJC },\n-  { \"oneway\",\t\tRID_ONEWAY,\t\tD_OBJC },\n-  { \"out\",\t\tRID_OUT,\t\tD_OBJC },\n-};\n+/* Initialize the reserved words.  */\n \n void\n init_reswords (void)\n {\n   unsigned int i;\n   tree id;\n-  int mask = ((flag_no_asm ? D_ASM : 0)\n-\t      | D_OBJC\n-\t      | (flag_no_gnu_keywords ? D_EXT : 0)\n-              | ((cxx_dialect == cxx0x) ? 0 : D_CXX0X));\n+  int mask = 0;\n+\n+  mask |= D_CONLY;\n+  if (cxx_dialect != cxx0x)\n+    mask |= D_CXX0X;\n+  if (flag_no_asm)\n+    mask |= D_ASM | D_EXT;\n+  if (flag_no_gnu_keywords)\n+    mask |= D_EXT;\n+  if (!c_dialect_objc())\n+    mask |= D_OBJC;\n \n   ridpointers = GGC_CNEWVEC (tree, (int) RID_MAX);\n-  for (i = 0; i < ARRAY_SIZE (reswords); i++)\n+  for (i = 0; i < num_c_common_reswords; i++)\n     {\n-      id = get_identifier (reswords[i].word);\n-      C_SET_RID_CODE (id, reswords[i].rid);\n-      ridpointers [(int) reswords[i].rid] = id;\n-      if (! (reswords[i].disable & mask))\n+      id = get_identifier (c_common_reswords[i].word);\n+      C_SET_RID_CODE (id, c_common_reswords[i].rid);\n+      ridpointers [(int) c_common_reswords[i].rid] = id;\n+      if (! (c_common_reswords[i].disable & mask))\n \tC_IS_RESERVED_WORD (id) = 1;\n     }\n }"}, {"sha": "18a548da635a0a0ab23059ee352a23b1bfb64517", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=eea1139b26437bb71fd5ee838d8d0b5f2473a16a", "patch": "@@ -1,3 +1,8 @@\n+2008-07-11  Ian Lance Taylor  <iant@google.com>\n+\n+\t* objc-act.c (objc_is_reserved_word): Always check for RID_CLASS,\n+\tetc., not just when OBJCPLUS is defined.\n+\n 2008-06-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* objc-act.c (setup_string_decl, objc_build_string_object,"}, {"sha": "822dd35eb8d6f8619f1a2cd686698a3e47dd8254", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=eea1139b26437bb71fd5ee838d8d0b5f2473a16a", "patch": "@@ -760,12 +760,9 @@ objc_is_reserved_word (tree ident)\n   unsigned char code = C_RID_CODE (ident);\n \n   return (OBJC_IS_AT_KEYWORD (code)\n-#ifdef OBJCPLUS\n \t  || code == RID_CLASS || code == RID_PUBLIC\n \t  || code == RID_PROTECTED || code == RID_PRIVATE\n-\t  || code == RID_TRY || code == RID_THROW || code == RID_CATCH\n-#endif\n-\t    );\n+\t  || code == RID_TRY || code == RID_THROW || code == RID_CATCH);\n }\n \n /* Return true if TYPE is 'id'.  */"}, {"sha": "c246c5f6aec2d18ded80ccf6a81712214d25c9dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eea1139b26437bb71fd5ee838d8d0b5f2473a16a", "patch": "@@ -1,3 +1,7 @@\n+2008-07-11  Ian Lance Taylor  <iant@google.com>\n+\n+\t* gcc.dg/Wcxx-compat-2.c: New test.\n+\n 2008-07-11  Dodji Seketeli  <dseketel@redhat.com>\n \n \tPR c++/13101"}, {"sha": "5a46fbe4bd597201c8da93b7f344db25813bf2b0", "filename": "gcc/testsuite/gcc.dg/Wcxx-compat-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea1139b26437bb71fd5ee838d8d0b5f2473a16a/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-2.c?ref=eea1139b26437bb71fd5ee838d8d0b5f2473a16a", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-options \"-Wc++-compat\" } */\n+\n+int bool;\n+int catch;\n+int char16_t;\n+int char32_t;\n+int class;\n+int const_cast;\t\t\t/* { dg-warning \"keyword\" } */\n+int decltype;\n+int delete;\n+int dynamic_cast;\t\t/* { dg-warning \"keyword\" } */\n+int explicit;\n+int export;\n+int false;\n+int friend;\n+int mutable;\t\t\t/* { dg-warning \"keyword\" } */\n+int namespace;\n+int new;\n+int operator;\n+int private;\n+int protected;\n+int public;\n+int reinterpret_cast;\t\t/* { dg-warning \"keyword\" } */\n+int static_assert;\t\t/* { dg-warning \"keyword\" } */\n+int static_cast;\t\t/* { dg-warning \"keyword\" } */\n+int template;\n+int this;\n+int throw;\n+int true;\n+int try;\n+int typename;\n+int typeid;\n+int using;\n+int virtual;\n+int wchar_t;"}]}