{"sha": "cfdaefecf6ad134e393cd67fe54f4f5cdd21c5a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZkYWVmZWNmNmFkMTM0ZTM5M2NkNjdmZTU0ZjRmNWNkZDIxYzVhMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-11-23T13:39:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-11-23T13:39:44Z"}, "message": "re PR c++/34198 (-Wconversion gives apparent erroneous warning with g++ 4.3-20071109)\n\n\tPR c++/34198\n\t* c-common.c (conversion_warning): For INTEGER_TYPE to\n\tINTEGER_TYPE conversions call get_narrower on expr to avoid\n\tspurious warnings from binop shortening or when the implicit\n\tconversion can't change the value.\n\n\t* gcc.dg/Wconversion-5.c: New test.\n\t* g++.dg/Wconversion3.C: New test.\n\nFrom-SVN: r130377", "tree": {"sha": "e85ad82f029ca77413c4971bdede1ccb117867cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e85ad82f029ca77413c4971bdede1ccb117867cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfdaefecf6ad134e393cd67fe54f4f5cdd21c5a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfdaefecf6ad134e393cd67fe54f4f5cdd21c5a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfdaefecf6ad134e393cd67fe54f4f5cdd21c5a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfdaefecf6ad134e393cd67fe54f4f5cdd21c5a0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bb1f5840b580ba1672d97cf0c8eccbcb50c3d3c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb1f5840b580ba1672d97cf0c8eccbcb50c3d3c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb1f5840b580ba1672d97cf0c8eccbcb50c3d3c0"}], "stats": {"total": 119, "additions": 114, "deletions": 5}, "files": [{"sha": "722ec42882c475213cab58857a14736f40b7d278", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdaefecf6ad134e393cd67fe54f4f5cdd21c5a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdaefecf6ad134e393cd67fe54f4f5cdd21c5a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cfdaefecf6ad134e393cd67fe54f4f5cdd21c5a0", "patch": "@@ -1,3 +1,11 @@\n+2007-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/34198\n+\t* c-common.c (conversion_warning): For INTEGER_TYPE to\n+\tINTEGER_TYPE conversions call get_narrower on expr to avoid\n+\tspurious warnings from binop shortening or when the implicit\n+\tconversion can't change the value.\n+\n 2007-11-22  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/14050"}, {"sha": "6872e3acef94498ca7ad9fecb89a7d33440f8ccb", "filename": "gcc/c-common.c", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdaefecf6ad134e393cd67fe54f4f5cdd21c5a0/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdaefecf6ad134e393cd67fe54f4f5cdd21c5a0/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=cfdaefecf6ad134e393cd67fe54f4f5cdd21c5a0", "patch": "@@ -1280,21 +1280,46 @@ conversion_warning (tree type, tree expr)\n       else if (TREE_CODE (TREE_TYPE (expr)) == INTEGER_TYPE\n                && TREE_CODE (type) == INTEGER_TYPE)\n         {\n+\t  /* Don't warn about unsigned char y = 0xff, x = (int) y;  */\n+\t  int uns;\n+\t  tree orig_expr = expr;\n+\t  expr = get_narrower (expr, &uns);\n+\n+\t  if (expr == orig_expr)\n+\t    uns = TYPE_UNSIGNED (TREE_TYPE (expr));\n+\n           /* Warn for integer types converted to smaller integer types.  */\n           if (formal_prec < TYPE_PRECISION (TREE_TYPE (expr))) \n \t    give_warning = true;\n \n \t  /* When they are the same width but different signedness,\n \t     then the value may change.  */\n \t  else if ((formal_prec == TYPE_PRECISION (TREE_TYPE (expr))\n-\t\t    && TYPE_UNSIGNED (TREE_TYPE (expr)) != TYPE_UNSIGNED (type))\n+\t\t    && uns != TYPE_UNSIGNED (type))\n \t\t   /* Even when converted to a bigger type, if the type is\n \t\t      unsigned but expr is signed, then negative values\n \t\t      will be changed.  */\n-\t\t   || (TYPE_UNSIGNED (type) && !TYPE_UNSIGNED (TREE_TYPE (expr))))\n-\t    warning (OPT_Wsign_conversion,\n-\t\t     \"conversion to %qT from %qT may change the sign of the result\",\n-\t\t     type, TREE_TYPE (expr));\n+\t\t   || (TYPE_UNSIGNED (type) && !uns))\n+\t    {\n+\t      if (uns != TYPE_UNSIGNED (TREE_TYPE (expr)))\n+\t\t{\n+\t\t  /* For signed char s1, s2 = (int) (unsigned char) s1;\n+\t\t     get_narrower returns s1, but uns = 1.  Find the\n+\t\t     narrowest type with uns == TYPE_UNSIGNED (type).  */\n+\t\t  tree unsexpr = orig_expr;\n+\n+\t\t  while (TREE_CODE (unsexpr) == NOP_EXPR\n+\t\t\t && unsexpr != expr\n+\t\t\t && TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (unsexpr,\n+\t\t\t\t\t\t\t\t    0)))\n+\t\t\t    == uns)\n+\t\t    unsexpr = TREE_OPERAND (unsexpr, 0);\n+\t\t  expr = unsexpr;\n+\t\t}\n+\t      warning (OPT_Wsign_conversion,\n+\t\t       \"conversion to %qT from %qT may change the sign of the result\",\n+\t\t       type, TREE_TYPE (expr));\n+\t    }\n         }\n \n       /* Warn for integer types converted to real types if and only if"}, {"sha": "7f0c52bcc22abfe1e95a6d2067bb26ac237ac1e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdaefecf6ad134e393cd67fe54f4f5cdd21c5a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdaefecf6ad134e393cd67fe54f4f5cdd21c5a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cfdaefecf6ad134e393cd67fe54f4f5cdd21c5a0", "patch": "@@ -1,3 +1,9 @@\n+2007-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/34198\n+\t* gcc.dg/Wconversion-5.c: New test.\n+\t* g++.dg/Wconversion3.C: New test.\n+\n 2007-11-23  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/alias-17.c: New testcase."}, {"sha": "24202b7d98ea3d3fcaf5b31b148198156898f7e7", "filename": "gcc/testsuite/g++.dg/warn/Wconversion3.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdaefecf6ad134e393cd67fe54f4f5cdd21c5a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdaefecf6ad134e393cd67fe54f4f5cdd21c5a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion3.C?ref=cfdaefecf6ad134e393cd67fe54f4f5cdd21c5a0", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/34198\n+// { dg-do compile }\n+// { dg-options \"-O2 -Wconversion -Wsign-conversion\" }\n+\n+signed char sc;\n+unsigned char uc;\n+short int ss;\n+unsigned short int us;\n+int si;\n+unsigned int ui;\n+\n+void test1 (void)\n+{\n+  int a = uc & 0xff;\n+  int b = sc & 0x7f;\n+  int c = 0xff & uc;\n+  int d = 0x7f & sc;\n+  int e = uc & sc;\n+  unsigned char f = (int) uc;\n+  signed char g = (int) sc;\n+  unsigned char h = (unsigned int) (short int) uc;\n+  signed char i = (int) (unsigned short int) sc;\t// { dg-warning \"may alter its value\" }\n+  unsigned char j = (unsigned int) (short int) us;\t// { dg-warning \"may alter its value\" }\n+  signed char k = (int) (unsigned short int) ss;\t// { dg-warning \"may alter its value\" }\n+}\n+\n+void test2 (void)\n+{\n+  signed char a = (unsigned char) sc;\t\t// { dg-warning \"may change the sign\" }\n+  unsigned char b = (signed char) uc;\t\t// { dg-warning \"may change the sign\" }\n+  signed char c = (int) (unsigned char) sc;\t// { dg-warning \"may change the sign\" }\n+  unsigned char d = (int) (signed char) uc;\t// { dg-warning \"may change the sign\" }\n+  int e = (unsigned int) si;\t\t\t// { dg-warning \"may change the sign\" }\n+  unsigned int f = (int) ui;\t\t\t// { dg-warning \"may change the sign\" }\n+}"}, {"sha": "a09caae4def5479450bcfba33456d46081cd6ead", "filename": "gcc/testsuite/gcc.dg/Wconversion-5.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdaefecf6ad134e393cd67fe54f4f5cdd21c5a0/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdaefecf6ad134e393cd67fe54f4f5cdd21c5a0/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-5.c?ref=cfdaefecf6ad134e393cd67fe54f4f5cdd21c5a0", "patch": "@@ -0,0 +1,35 @@\n+/* PR c++/34198 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wconversion\" } */\n+\n+signed char sc;\n+unsigned char uc;\n+short int ss;\n+unsigned short int us;\n+int si;\n+unsigned int ui;\n+\n+void test1 (void)\n+{\n+  int a = uc & 0xff;\n+  int b = sc & 0x7f;\n+  int c = 0xff & uc;\n+  int d = 0x7f & sc;\n+  int e = uc & sc;\n+  unsigned char f = (int) uc;\n+  signed char g = (int) sc;\n+  unsigned char h = (unsigned int) (short int) uc;\n+  signed char i = (int) (unsigned short int) sc;\t/* { dg-warning \"may alter its value\" } */\n+  unsigned char j = (unsigned int) (short int) us;\t/* { dg-warning \"may alter its value\" } */\n+  signed char k = (int) (unsigned short int) ss;\t/* { dg-warning \"may alter its value\" } */\n+}\n+\n+void test2 (void)\n+{\n+  signed char a = (unsigned char) sc;\t\t/* { dg-warning \"may change the sign\" } */\n+  unsigned char b = (signed char) uc;\t\t/* { dg-warning \"may change the sign\" } */\n+  signed char c = (int) (unsigned char) sc;\t/* { dg-warning \"may change the sign\" } */\n+  unsigned char d = (int) (signed char) uc;\t/* { dg-warning \"may change the sign\" } */\n+  int e = (unsigned int) si;\t\t\t/* { dg-warning \"may change the sign\" } */\n+  unsigned int f = (int) ui;\t\t\t/* { dg-warning \"may change the sign\" } */\n+}"}]}