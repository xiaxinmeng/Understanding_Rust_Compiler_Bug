{"sha": "5d183d1740d8d8b84991f186ce4d992ee799536f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQxODNkMTc0MGQ4ZDhiODQ5OTFmMTg2Y2U0ZDk5MmVlNzk5NTM2Zg==", "commit": {"author": {"name": "Frederik Harwath", "email": "frederik@gcc.gnu.org", "date": "2019-11-06T10:43:52Z"}, "committer": {"name": "Frederik Harwath", "email": "frederik@gcc.gnu.org", "date": "2019-11-06T10:43:52Z"}, "message": "Warn about inconsistent OpenACC nested reduction clauses\n\n\tOpenACC (cf. OpenACC 2.7, section 2.9.11. \"reduction clause\";\n\tthis was first clarified by OpenACC 2.6) requires that, if a\n\tvariable is used in reduction clauses on two nested loops, then\n\tthere must be reduction clauses for that variable on all loops\n\tthat are nested in between the two loops and all these reduction\n\tclauses must use the same operator.\n\tThis commit introduces a check for that property which reports\n\twarnings if it is violated.\n\n\t2019-11-06  Gerg\u00f6 Barany  <gergo@codesourcery.com>\n\t            Frederik Harwath  <frederik@codesourcery.com>\n\t            Thomas Schwinge  <thomas@codesourcery.com>\n\n\tgcc/\n\t* omp-low.c (struct omp_context): New fields\n\tlocal_reduction_clauses, outer_reduction_clauses.\n\t(new_omp_context): Initialize these.\n\t(scan_sharing_clauses): Record reduction clauses on OpenACC constructs.\n\t(scan_omp_for): Check reduction clauses for incorrect nesting.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/nested-reductions-warn.c: New test.\n\t* c-c++-common/goacc/nested-reductions.c: New test.\n\t* gfortran.dg/goacc/nested-reductions-warn.f90: New test.\n\t* gfortran.dg/goacc/nested-reductions.f90: New test.\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-1.c:\n\tAdd expected warnings about missing reduction clauses.\n\t* testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-3.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-4.c:\n\tLikewise.\n\n\tReviewed-by: Thomas Schwinge <thomas@codesourcery.com>\n\nFrom-SVN: r277875", "tree": {"sha": "3445dfb2c8e435ce0d5878394fbc00b923de7eab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3445dfb2c8e435ce0d5878394fbc00b923de7eab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d183d1740d8d8b84991f186ce4d992ee799536f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d183d1740d8d8b84991f186ce4d992ee799536f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d183d1740d8d8b84991f186ce4d992ee799536f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d183d1740d8d8b84991f186ce4d992ee799536f/comments", "author": null, "committer": null, "parents": [{"sha": "5f6705b7b57c0461766f784d6d495986163692bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f6705b7b57c0461766f784d6d495986163692bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f6705b7b57c0461766f784d6d495986163692bb"}], "stats": {"total": 2294, "additions": 2290, "deletions": 4}, "files": [{"sha": "38160dd631e9aa51b09e5a9ac66784d6f7cadd78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d183d1740d8d8b84991f186ce4d992ee799536f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d183d1740d8d8b84991f186ce4d992ee799536f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d183d1740d8d8b84991f186ce4d992ee799536f", "patch": "@@ -1,3 +1,13 @@\n+2019-11-06  Gerg\u00f6 Barany  <gergo@codesourcery.com>\n+\t    Frederik Harwath  <frederik@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-low.c (struct omp_context): New fields\n+\tlocal_reduction_clauses, outer_reduction_clauses.\n+\t(new_omp_context): Initialize these.\n+\t(scan_sharing_clauses): Record reduction clauses on OpenACC constructs.\n+\t(scan_omp_for): Check reduction clauses for incorrect nesting.\n+\t\n 2019-11-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR inline-asm/92352"}, {"sha": "fa76ceba33c6d9edcdb9b9c8d906c191d6a70ed2", "filename": "gcc/omp-low.c", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d183d1740d8d8b84991f186ce4d992ee799536f/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d183d1740d8d8b84991f186ce4d992ee799536f/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=5d183d1740d8d8b84991f186ce4d992ee799536f", "patch": "@@ -128,6 +128,12 @@ struct omp_context\n      corresponding tracking loop iteration variables.  */\n   hash_map<tree, tree> *lastprivate_conditional_map;\n \n+  /* A tree_list of the reduction clauses in this context.  */\n+  tree local_reduction_clauses;\n+\n+  /* A tree_list of the reduction clauses in outer contexts.  */\n+  tree outer_reduction_clauses;\n+\n   /* Nesting depth of this context.  Used to beautify error messages re\n      invalid gotos.  The outermost ctx is depth 1, with depth 0 being\n      reserved for the main body of the function.  */\n@@ -910,6 +916,8 @@ new_omp_context (gimple *stmt, omp_context *outer_ctx)\n       ctx->outer = outer_ctx;\n       ctx->cb = outer_ctx->cb;\n       ctx->cb.block = NULL;\n+      ctx->local_reduction_clauses = NULL;\n+      ctx->outer_reduction_clauses = ctx->outer_reduction_clauses;\n       ctx->depth = outer_ctx->depth + 1;\n     }\n   else\n@@ -925,6 +933,8 @@ new_omp_context (gimple *stmt, omp_context *outer_ctx)\n       ctx->cb.transform_call_graph_edges = CB_CGE_MOVE;\n       ctx->cb.adjust_array_error_bounds = true;\n       ctx->cb.dont_remap_vla_if_no_change = true;\n+      ctx->local_reduction_clauses = NULL;\n+      ctx->outer_reduction_clauses = NULL;\n       ctx->depth = 1;\n     }\n \n@@ -1139,6 +1149,11 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t  goto do_private;\n \n \tcase OMP_CLAUSE_REDUCTION:\n+\t  if (is_oacc_parallel (ctx) || is_oacc_kernels (ctx))\n+\t    ctx->local_reduction_clauses\n+\t      = tree_cons (NULL, c, ctx->local_reduction_clauses);\n+\t  /* FALLTHRU */\n+\n \tcase OMP_CLAUSE_IN_REDUCTION:\n \t  decl = OMP_CLAUSE_DECL (c);\n \t  if (TREE_CODE (decl) == MEM_REF)\n@@ -2423,6 +2438,88 @@ scan_omp_for (gomp_for *stmt, omp_context *outer_ctx)\n \t  gimple_omp_for_set_clauses (stmt, clauses);\n \t  check_oacc_kernel_gwv (stmt, ctx);\n \t}\n+\n+      /* Collect all variables named in reductions on this loop.  Ensure\n+\t that, if this loop has a reduction on some variable v, and there is\n+\t a reduction on v somewhere in an outer context, then there is a\n+\t reduction on v on all intervening loops as well.  */\n+      tree local_reduction_clauses = NULL;\n+      for (tree c = gimple_omp_for_clauses (stmt); c; c = OMP_CLAUSE_CHAIN (c))\n+\t{\n+\t  if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_REDUCTION)\n+\t    local_reduction_clauses\n+\t      = tree_cons (NULL, c, local_reduction_clauses);\n+\t}\n+      if (ctx->outer_reduction_clauses == NULL && ctx->outer != NULL)\n+\tctx->outer_reduction_clauses\n+\t  = chainon (unshare_expr (ctx->outer->local_reduction_clauses),\n+\t\t     ctx->outer->outer_reduction_clauses);\n+      tree outer_reduction_clauses = ctx->outer_reduction_clauses;\n+      tree local_iter = local_reduction_clauses;\n+      for (; local_iter; local_iter = TREE_CHAIN (local_iter))\n+\t{\n+\t  tree local_clause = TREE_VALUE (local_iter);\n+\t  tree local_var = OMP_CLAUSE_DECL (local_clause);\n+\t  tree_code local_op = OMP_CLAUSE_REDUCTION_CODE (local_clause);\n+\t  bool have_outer_reduction = false;\n+\t  tree ctx_iter = outer_reduction_clauses;\n+\t  for (; ctx_iter; ctx_iter = TREE_CHAIN (ctx_iter))\n+\t    {\n+\t      tree outer_clause = TREE_VALUE (ctx_iter);\n+\t      tree outer_var = OMP_CLAUSE_DECL (outer_clause);\n+\t      tree_code outer_op = OMP_CLAUSE_REDUCTION_CODE (outer_clause);\n+\t      if (outer_var == local_var && outer_op != local_op)\n+\t\t{\n+\t\t  warning_at (gimple_location (stmt), 0,\n+\t\t\t      \"conflicting reduction operations for %qE\",\n+\t\t\t      local_var);\n+\t\t  inform (OMP_CLAUSE_LOCATION (outer_clause),\n+\t\t\t  \"location of the previous reduction for %qE\",\n+\t\t\t  outer_var);\n+\t\t}\n+\t      if (outer_var == local_var)\n+\t\t{\n+\t\t  have_outer_reduction = true;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t  if (have_outer_reduction)\n+\t    {\n+\t      /* There is a reduction on outer_var both on this loop and on\n+\t\t some enclosing loop.  Walk up the context tree until such a\n+\t\t loop with a reduction on outer_var is found, and complain\n+\t\t about all intervening loops that do not have such a\n+\t\t reduction.  */\n+\t      struct omp_context *curr_loop = ctx->outer;\n+\t      bool found = false;\n+\t      while (curr_loop != NULL)\n+\t\t{\n+\t\t  tree curr_iter = curr_loop->local_reduction_clauses;\n+\t\t  for (; curr_iter; curr_iter = TREE_CHAIN (curr_iter))\n+\t\t    {\n+\t\t      tree curr_clause = TREE_VALUE (curr_iter);\n+\t\t      tree curr_var = OMP_CLAUSE_DECL (curr_clause);\n+\t\t      if (curr_var == local_var)\n+\t\t\t{\n+\t\t\t  found = true;\n+\t\t\t  break;\n+\t\t\t}\n+\t\t    }\n+\t\t  if (!found)\n+\t\t    warning_at (gimple_location (curr_loop->stmt), 0,\n+\t\t\t\t\"nested loop in reduction needs \"\n+\t\t\t\t\"reduction clause for %qE\",\n+\t\t\t\tlocal_var);\n+\t\t  else\n+\t\t    break;\n+\t\t  curr_loop = curr_loop->outer;\n+\t\t}\n+\t    }\n+\t}\n+      ctx->local_reduction_clauses = local_reduction_clauses;\n+      ctx->outer_reduction_clauses\n+\t= chainon (unshare_expr (ctx->local_reduction_clauses),\n+\t\t   ctx->outer_reduction_clauses);\n     }\n \n   scan_sharing_clauses (clauses, ctx);"}, {"sha": "64568e5661af292c59f764168cdbf542980c749b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d183d1740d8d8b84991f186ce4d992ee799536f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d183d1740d8d8b84991f186ce4d992ee799536f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d183d1740d8d8b84991f186ce4d992ee799536f", "patch": "@@ -1,3 +1,12 @@\n+2019-11-06  Gerg\u00f6 Barany  <gergo@codesourcery.com>\n+\t    Frederik Harwath  <frederik@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/goacc/nested-reductions-warn.c: New test.\n+\t* c-c++-common/goacc/nested-reductions.c: New test.\n+\t* gfortran.dg/goacc/nested-reductions-warn.f90: New test.\n+\t* gfortran.dg/goacc/nested-reductions.f90: New test.\n+\n 2019-11-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR inline-asm/92352"}, {"sha": "e2af66e4fa3b3021a3f4a7bb12da5938e3d5e5c5", "filename": "gcc/testsuite/c-c++-common/goacc/nested-reductions-warn.c", "status": "added", "additions": 525, "deletions": 0, "changes": 525, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d183d1740d8d8b84991f186ce4d992ee799536f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d183d1740d8d8b84991f186ce4d992ee799536f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions-warn.c?ref=5d183d1740d8d8b84991f186ce4d992ee799536f", "patch": "@@ -0,0 +1,525 @@\n+/* Test erroneous cases of nested reduction loops.  */\n+\n+void acc_parallel (void)\n+{\n+  int i, j, k, l, sum, diff;\n+\n+  #pragma acc parallel\n+  {\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop collapse(2) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          #pragma acc loop reduction(+:sum)\n+          for (l = 0; l < 10; l++)\n+            sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+          #pragma acc loop reduction(+:sum)\n+          for (l = 0; l < 10; l++)\n+            sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" } \n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(-:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+\t  #pragma acc loop reduction(*:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+\t  for (l = 0; l < 10; l++)\n+\t    sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+\t  #pragma acc loop reduction(*:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+\t  for (l = 0; l < 10; l++)\n+\t    sum = 1;\n+\n+    #pragma acc loop reduction(+:sum) reduction(-:diff)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(-:diff) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+  }\n+}\n+\n+/* The same tests as above, but using a combined parallel loop construct.  */\n+\n+void acc_parallel_loop (void)\n+{\n+  int i, j, k, l, sum, diff;\n+\n+  #pragma acc parallel loop\n+  for (int h = 0; h < 10; ++h)\n+  {\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop collapse(2) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          #pragma acc loop reduction(+:sum)\n+          for (l = 0; l < 10; l++)\n+            sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+          #pragma acc loop reduction(+:sum)\n+          for (l = 0; l < 10; l++)\n+            sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(-:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+\t  #pragma acc loop reduction(*:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+\t  for (l = 0; l < 10; l++)\n+\t    sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+\t  #pragma acc loop reduction(*:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+\t  for (l = 0; l < 10; l++)\n+\t    sum = 1;\n+\n+    #pragma acc loop reduction(+:sum) reduction(-:diff)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(-:diff) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+  }\n+}\n+\n+/* The same tests as above, but now the outermost reduction clause is on\n+   the parallel region, not the outermost loop.  */\n+void acc_parallel_reduction (void)\n+{\n+  int i, j, k, l, sum, diff;\n+\n+  #pragma acc parallel reduction(+:sum)\n+  {\n+    #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop collapse(2) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          #pragma acc loop reduction(+:sum)\n+          for (l = 0; l < 10; l++)\n+            sum = 1;\n+\n+    #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+          #pragma acc loop reduction(+:sum)\n+          for (l = 0; l < 10; l++)\n+            sum = 1;\n+\n+    #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(-:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(max:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+\t  #pragma acc loop reduction(*:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+\t  for (l = 0; l < 10; l++)\n+\t    sum = 1;\n+\n+    #pragma acc loop reduction(max:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+      #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" })\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+\tfor (k = 0; k < 10; k++)\n+\t  #pragma acc loop reduction(*:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+\t  for (l = 0; l < 10; l++)\n+\t    sum = 1;\n+\n+    #pragma acc loop reduction(-:diff) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(-:diff) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+  }\n+}\n+\n+/* The same tests as above, but using a combined parallel loop construct, and\n+   the outermost reduction clause is on that one, not the outermost loop.  */\n+void acc_parallel_loop_reduction (void)\n+{\n+  int i, j, k, l, sum, diff;\n+\n+  #pragma acc parallel loop reduction(+:sum)\n+  for (int h = 0; h < 10; ++h)\n+  {\n+    #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop collapse(2) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          #pragma acc loop reduction(+:sum)\n+          for (l = 0; l < 10; l++)\n+            sum = 1;\n+\n+    #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+          #pragma acc loop reduction(+:sum)\n+          for (l = 0; l < 10; l++)\n+            sum = 1;\n+\n+    #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(-:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(max:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+\t  #pragma acc loop reduction(*:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+\t  for (l = 0; l < 10; l++)\n+\t    sum = 1;\n+\n+    #pragma acc loop reduction(max:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+      for (j = 0; j < 10; j++)\n+      #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" })\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+\t  #pragma acc loop reduction(*:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+\t  for (l = 0; l < 10; l++)\n+\t    sum = 1;\n+\n+    #pragma acc loop reduction(-:diff) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(-:diff) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+  }\n+}\n+\n+/* The same tests as above, but inside a routine construct.  */\n+#pragma acc routine gang\n+void acc_routine (void)\n+{\n+  int i, j, k, l, sum, diff;\n+\n+  {\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop collapse(2) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          #pragma acc loop reduction(+:sum)\n+          for (l = 0; l < 10; l++)\n+            sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+\tfor (k = 0; k < 10; k++)\n+          #pragma acc loop reduction(+:sum)\n+          for (l = 0; l < 10; l++)\n+            sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(-:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+\t  #pragma acc loop reduction(*:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+\t  for (l = 0; l < 10; l++)\n+\t    sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+      for (j = 0; j < 10; j++)\n+      #pragma acc loop reduction(+:sum) // { dg-warning \"conflicting reduction operations for .sum.\" })\n+      // { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 } \n+        for (k = 0; k < 10; k++)\n+\t  #pragma acc loop reduction(*:sum) // { dg-warning \"conflicting reduction operations for .sum.\" }\n+\t  for (l = 0; l < 10; l++)\n+\t    sum = 1;\n+\n+    #pragma acc loop reduction(+:sum) reduction(-:diff)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(-:diff) // { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+  }\n+}\n+\n+void acc_kernels (void)\n+{\n+  int i, j, k, sum, diff;\n+\n+  /* FIXME:  No diagnostics are produced for these loops because reductions\n+     in kernels regions are not supported yet.  */\n+  #pragma acc kernels\n+  {\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:diff)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(-:sum)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+  }\n+}"}, {"sha": "15385c4da9924d0833823795d40e045805e448c6", "filename": "gcc/testsuite/c-c++-common/goacc/nested-reductions.c", "status": "added", "additions": 420, "deletions": 0, "changes": 420, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d183d1740d8d8b84991f186ce4d992ee799536f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d183d1740d8d8b84991f186ce4d992ee799536f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnested-reductions.c?ref=5d183d1740d8d8b84991f186ce4d992ee799536f", "patch": "@@ -0,0 +1,420 @@\n+/* Test cases of nested reduction loops that should compile cleanly.  */\n+\n+void acc_parallel (void)\n+{\n+  int i, j, k, sum, diff;\n+\n+  #pragma acc parallel\n+  {\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop collapse(2) reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(+:sum)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop collapse(2) reduction(+:sum)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(+:sum)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum) reduction(-:diff)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(+:sum)\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(-:diff)\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+  }\n+}\n+\n+/* The same tests as above, but using a combined parallel loop construct.  */\n+\n+void acc_parallel_loop (void)\n+{\n+  int i, j, k, l, sum, diff;\n+\n+  #pragma acc parallel loop\n+  for (int h = 0; h < 10; ++h)\n+  {\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop collapse(2) reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(+:sum)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop collapse(2) reduction(+:sum)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(+:sum) // { dg-warning \"insufficient partitioning available to parallelize loop\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum) reduction(-:diff)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"insufficient partitioning available to parallelize loop\" }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(-:diff) // { dg-warning \"insufficient partitioning available to parallelize loop\" }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+  }\n+}\n+\n+/* The same tests as above, but now the outermost reduction clause is on\n+   the parallel region, not the outermost loop.  */\n+\n+void acc_parallel_reduction (void)\n+{\n+  int i, j, k, sum, diff;\n+\n+  #pragma acc parallel reduction(+:sum)\n+  {\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(+:sum)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum) reduction(-:diff)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(+:sum)\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(-:diff)\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(+:sum)\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(-:diff)\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(+:sum)\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+  }\n+}\n+\n+/* The same tests as above, but using a combined parallel loop construct, and\n+   the outermost reduction clause is on that one, not the outermost loop.  */\n+void acc_parallel_loop_reduction (void)\n+{\n+  int i, j, k, sum, diff;\n+\n+  #pragma acc parallel loop reduction(+:sum)\n+  for (int h = 0; h < 10; ++h)\n+  {\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(+:sum) // { dg-warning \"insufficient partitioning available to parallelize loop\" }\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum) reduction(-:diff)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"insufficient partitioning available to parallelize loop\" }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(-:diff) // { dg-warning \"insufficient partitioning available to parallelize loop\" }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"insufficient partitioning available to parallelize loop\" }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(-:diff) // { dg-warning \"insufficient partitioning available to parallelize loop\" }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(+:sum) // { dg-warning \"insufficient partitioning available to parallelize loop\" }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop // { dg-warning \"insufficient partitioning available to parallelize loop\" }\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+  }\n+}\n+\n+/* The same tests as above, but inside a routine construct.  */\n+#pragma acc routine gang\n+void acc_routine (void)\n+{\n+  int i, j, k, sum, diff;\n+\n+  {\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop collapse(2) reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(+:sum)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop collapse(2) reduction(+:sum)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(+:sum)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum) reduction(-:diff)\n+    for (i = 0; i < 10; i++)\n+      {\n+        #pragma acc loop reduction(+:sum)\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(+:sum)\n+          for (k = 0; k < 10; k++)\n+            sum = 1;\n+\n+        #pragma acc loop reduction(-:diff)\n+        for (j = 0; j < 10; j++)\n+          #pragma acc loop reduction(-:diff)\n+          for (k = 0; k < 10; k++)\n+            diff = 1;\n+      }\n+  }\n+}\n+\n+void acc_kernels (void)\n+{\n+  int i, j, k, sum, diff;\n+\n+  /* FIXME:  These tests are not meaningful yet because reductions in\n+     kernels regions are not supported yet.  */\n+  #pragma acc kernels\n+  {\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(+:sum)\n+      for (j = 0; j < 10; j++)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+\n+    #pragma acc loop reduction(+:sum)\n+    for (i = 0; i < 10; i++)\n+      #pragma acc loop reduction(+:sum)\n+      for (j = 0; j < 10; j++)\n+        #pragma acc loop reduction(+:sum)\n+        for (k = 0; k < 10; k++)\n+          sum = 1;\n+  }\n+}"}, {"sha": "ec36bc9616e04141f919a1c8690d17b88213157e", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-reductions-warn.f90", "status": "added", "additions": 674, "deletions": 0, "changes": 674, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d183d1740d8d8b84991f186ce4d992ee799536f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-warn.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d183d1740d8d8b84991f186ce4d992ee799536f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-warn.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions-warn.f90?ref=5d183d1740d8d8b84991f186ce4d992ee799536f", "patch": "@@ -0,0 +1,674 @@\n+! Test erroneous cases of nested reduction loops.\n+\n+subroutine acc_parallel ()\n+  implicit none (type, external)\n+  integer :: i, j, k, l, sum, diff\n+\n+  !$acc parallel\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop collapse(2)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      do j = 1, 10\n+        do k = 1, 10\n+          !$acc loop reduction(+:sum)\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(+:sum)\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(-:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(*:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(*:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum) reduction(-:diff)\n+    do i = 1, 10\n+      !$acc loop reduction(-:diff)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n+  !$acc end parallel\n+end subroutine acc_parallel\n+\n+! The same tests as above, but using a combined parallel loop construct.\n+\n+subroutine acc_parallel_loop ()\n+  implicit none (type, external)\n+  integer :: h, i, j, k, l, sum, diff\n+\n+  !$acc parallel loop\n+  do h = 1, 10\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop collapse(2)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do j = 1, 10\n+        do k = 1, 10\n+          !$acc loop reduction(+:sum)\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(+:sum)\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(-:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(*:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(*:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum) reduction(-:diff)\n+    do i = 1, 10\n+      !$acc loop reduction(-:diff)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n+  end do\n+end subroutine acc_parallel_loop\n+\n+! The same tests as above, but now the outermost reduction clause is on\n+! the parallel region, not the outermost loop.\n+\n+subroutine acc_parallel_reduction ()\n+  implicit none (type, external)\n+  integer :: i, j, k, l, sum, diff\n+\n+  !$acc parallel reduction(+:sum)\n+    !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop collapse(2)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      do j = 1, 10\n+        do k = 1, 10\n+          !$acc loop reduction(+:sum)\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(+:sum)\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(-:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(max:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(*:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(max:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(*:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(-:diff)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop reduction(-:diff)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n+  !$acc end parallel\n+end subroutine acc_parallel_reduction\n+\n+! The same tests as above, but using a combined parallel loop construct, and\n+! the outermost reduction clause is on that one, not the outermost loop.  */\n+subroutine acc_parallel_loop_reduction ()\n+  implicit none (type, external)\n+  integer :: h, i, j, k, l, sum, diff\n+\n+  !$acc parallel loop reduction(+:sum)\n+  do h = 1, 10\n+    !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop collapse(2)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do j = 1, 10\n+        do k = 1, 10\n+          !$acc loop reduction(+:sum)\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(+:sum)\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }  \n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(-:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(max:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(*:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(max:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(*:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(-:diff)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+    do i = 1, 10\n+      !$acc loop reduction(-:diff)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n+      ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n+  end do\n+end subroutine acc_parallel_loop_reduction\n+\n+! The same tests as above, but inside a routine construct.\n+subroutine acc_routine ()\n+  implicit none (type, external)\n+  !$acc routine gang\n+  integer :: i, j, k, l, sum, diff\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop collapse(2)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      do j = 1, 10\n+        do k = 1, 10\n+          !$acc loop reduction(+:sum)\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(+:sum)\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(-:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(*:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+        ! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+        do k = 1, 10\n+          !$acc loop reduction(*:sum)  ! { dg-warning \"conflicting reduction operations for .sum.\" }\n+          do l = 1, 10\n+            sum = 1\n+          end do\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum) reduction(-:diff)\n+    do i = 1, 10\n+      !$acc loop reduction(-:diff)  ! { dg-warning \"nested loop in reduction needs reduction clause for .sum.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"nested loop in reduction needs reduction clause for .diff.\" }\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+            diff = 1\n+        end do\n+      end do\n+    end do\n+end subroutine acc_routine\n+\n+subroutine acc_kernels ()\n+  integer :: i, j, k, sum, diff\n+\n+  ! FIXME:  No diagnostics are produced for these loops because reductions\n+  ! in kernels regions are not supported yet.\n+  !$acc kernels\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:diff)\n+      do j = 1, 10\n+        !$acc loop\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(-:sum)\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+  !$acc end kernels\n+end subroutine acc_kernels"}, {"sha": "3becafabe622048a617f5c0d96e6a4939d19100b", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-reductions.f90", "status": "added", "additions": 540, "deletions": 0, "changes": 540, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d183d1740d8d8b84991f186ce4d992ee799536f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d183d1740d8d8b84991f186ce4d992ee799536f/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-reductions.f90?ref=5d183d1740d8d8b84991f186ce4d992ee799536f", "patch": "@@ -0,0 +1,540 @@\n+! Test cases of nested reduction loops that should compile cleanly.\n+\n+subroutine acc_parallel ()\n+  implicit none (type, external)\n+  integer :: i, j, k, sum, diff\n+\n+  !$acc parallel\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop collapse(2) reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop collapse(2) reduction(+:sum)\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum) reduction(-:diff)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop reduction(-:diff)\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n+  !$acc end parallel\n+end subroutine acc_parallel\n+\n+! The same tests as above, but using a combined parallel loop construct.\n+\n+subroutine acc_parallel_loop ()\n+  implicit none (type, external)\n+  integer :: h, i, j, k, l, sum, diff\n+\n+  !$acc parallel loop\n+  do h = 1, 10\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop collapse(2) reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop collapse(2) reduction(+:sum)\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"insufficient partitioning available to parallelize loop\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum) reduction(-:diff)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"insufficient partitioning available to parallelize loop\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop reduction(-:diff)  ! { dg-warning \"insufficient partitioning available to parallelize loop\" }\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n+  end do\n+end subroutine acc_parallel_loop\n+\n+! The same tests as above, but now the outermost reduction clause is on\n+! the parallel region, not the outermost loop.  */\n+\n+subroutine acc_parallel_reduction ()\n+  implicit none (type, external)\n+  integer :: i, j, k, sum, diff\n+\n+  !$acc parallel reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    do i = 1, 10\n+      !$acc loop\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    do i = 1, 10\n+      do j = 1, 10\n+        !$acc loop\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum) reduction(-:diff)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop reduction(-:diff)\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop reduction(-:diff)\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n+  !$acc end parallel\n+end subroutine acc_parallel_reduction\n+\n+! The same tests as above, but using a combined parallel loop construct, and\n+! the outermost reduction clause is on that one, not the outermost loop.  */\n+subroutine acc_parallel_loop_reduction ()\n+  implicit none (type, external)\n+  integer :: h, i, j, k, sum, diff\n+\n+  !$acc parallel loop reduction(+:sum)\n+  do h = 1, 10\n+    do i = 1, 10\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    do i = 1, 10\n+      !$acc loop\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    do i = 1, 10\n+      do j = 1, 10\n+        !$acc loop\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"insufficient partitioning available to parallelize loop\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum) reduction(-:diff)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"insufficient partitioning available to parallelize loop\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop reduction(-:diff)  ! { dg-warning \"insufficient partitioning available to parallelize loop\" }\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"insufficient partitioning available to parallelize loop\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop reduction(-:diff)  ! { dg-warning \"insufficient partitioning available to parallelize loop\" }\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)  ! { dg-warning \"insufficient partitioning available to parallelize loop\" }\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop  ! { dg-warning \"insufficient partitioning available to parallelize loop\" }\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n+  end do\n+end subroutine acc_parallel_loop_reduction\n+\n+! The same tests as above, but inside a routine construct.\n+subroutine acc_routine ()\n+  implicit none (type, external)\n+  !$acc routine gang\n+\n+  integer :: i, j, k, sum, diff\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop collapse(2) reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop collapse(2) reduction(+:sum)\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum) reduction(-:diff)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+\n+      !$acc loop reduction(-:diff)\n+      do j = 1, 10\n+        !$acc loop reduction(-:diff)\n+        do k = 1, 10\n+          diff = 1\n+        end do\n+      end do\n+    end do\n+end subroutine acc_routine\n+\n+subroutine acc_kernels ()\n+  implicit none (type, external)\n+  integer :: i, j, k, sum, diff\n+\n+  ! FIXME:  These tests are not meaningful yet because reductions in\n+  ! kernels regions are not supported yet.\n+  !$acc kernels\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)\n+      do j = 1, 10\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+\n+    !$acc loop reduction(+:sum)\n+    do i = 1, 10\n+      !$acc loop reduction(+:sum)\n+      do j = 1, 10\n+        !$acc loop reduction(+:sum)\n+        do k = 1, 10\n+          sum = 1\n+        end do\n+      end do\n+    end do\n+\n+  !$acc end kernels\n+end subroutine acc_kernels"}, {"sha": "067d247da9accf60c5627adfc5fd99beb2b8204a", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d183d1740d8d8b84991f186ce4d992ee799536f/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d183d1740d8d8b84991f186ce4d992ee799536f/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=5d183d1740d8d8b84991f186ce4d992ee799536f", "patch": "@@ -1,3 +1,14 @@\n+2019-11-06  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-1.c:\n+\tAdd expected warnings about missing reduction clauses.\n+\t* testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-2.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-3.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-4.c:\n+\tLikewise.\n+\n 2019-11-04  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* testsuite/libgomp.fortran/pr66199-1.f90: Remove"}, {"sha": "8c08717fdf2ccf99c5e1b1361428bc67cd3b38d0", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d183d1740d8d8b84991f186ce4d992ee799536f/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d183d1740d8d8b84991f186ce4d992ee799536f/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-1.c?ref=5d183d1740d8d8b84991f186ce4d992ee799536f", "patch": "@@ -15,7 +15,7 @@ main (int argc, char *argv[])\n   #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n     reduction(+:res) copy(res)\n   {\n-    #pragma acc loop gang\n+    #pragma acc loop gang /* { dg-warning \"nested loop in reduction needs reduction clause for 'res'\" \"TODO\" } */\n     for (j = 0; j < 32; j++)\n       {\n \t#pragma acc loop worker reduction(+:res)"}, {"sha": "41042accbde5895a163eff9f5089916e37e500ca", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d183d1740d8d8b84991f186ce4d992ee799536f/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d183d1740d8d8b84991f186ce4d992ee799536f/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-2.c?ref=5d183d1740d8d8b84991f186ce4d992ee799536f", "patch": "@@ -14,7 +14,7 @@ main (int argc, char *argv[])\n   #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n \t\t       reduction(^:res)\n   {\n-    #pragma acc loop gang\n+    #pragma acc loop gang /* { dg-warning \"nested loop in reduction needs reduction clause for 'res'\" \"TODO\" } */\n     for (j = 0; j < 32; j++)\n       {\n \t#pragma acc loop worker vector reduction(^:res)"}, {"sha": "ace1e005e2e293e0e3f38c67fe5dd561a91c2cb5", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d183d1740d8d8b84991f186ce4d992ee799536f/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d183d1740d8d8b84991f186ce4d992ee799536f/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-3.c?ref=5d183d1740d8d8b84991f186ce4d992ee799536f", "patch": "@@ -16,7 +16,7 @@ main (int argc, char *argv[])\n   #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n     reduction(+:res) copy(res)\n   {\n-    #pragma acc loop gang\n+    #pragma acc loop gang /* { dg-warning \"nested loop in reduction needs reduction clause for 'res'\" \"TODO\" } */\n     for (j = 0; j < 32; j++)\n       {\n \t#pragma acc loop worker vector reduction(+:res)"}, {"sha": "c3cc12fa953a602086ae8ba7137c6e6141e571e5", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d183d1740d8d8b84991f186ce4d992ee799536f/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d183d1740d8d8b84991f186ce4d992ee799536f/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-4.c?ref=5d183d1740d8d8b84991f186ce4d992ee799536f", "patch": "@@ -16,7 +16,7 @@ main (int argc, char *argv[])\n   #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n     reduction(+:res) reduction(max:mres) copy(res, mres)\n   {\n-    #pragma acc loop gang\n+    #pragma acc loop gang /* { dg-warning \"nested loop in reduction needs reduction clause for 'm\\?res'\" \"TODO\" } */\n     for (j = 0; j < 32; j++)\n       {\n \t#pragma acc loop worker vector reduction(+:res) reduction(max:mres)"}]}