{"sha": "d8fa96e0895efa743ade7d3dcd12a4f92909382d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhmYTk2ZTA4OTVlZmE3NDNhZGU3ZDNkY2QxMmE0ZjkyOTA5MzgyZA==", "commit": {"author": {"name": "Christopher D. Rickett", "email": "crickett@lanl.gov", "date": "2007-07-23T17:47:16Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-07-23T17:47:16Z"}, "message": "re PR fortran/32797 ([ISO C Binding] Internal Error: gfc_basic_typename(): Undefined type)\n\n2007-07-23  Christopher D. Rickett  <crickett@lanl.gov>\n\n        PR fortran/32797\n        PR fortran/32800\n        * decl.c (verify_bind_c_sym): Use the result symbol for functions\n        with a result clause.  Warn if implicitly typed.  Verify the type\n        and rank of the SHAPE argument, if given.\n        * resolve.c (gfc_iso_c_sub_interface): Use gfc_procedure_use to\n        check the actual args against the formal, sorting them if\n        necessary.\n        * symbol.c (gen_shape_param): Initialize type of SHAPE param to\n        BT_VOID.\n\n2007-07-23  Christopher D. Rickett  <crickett@lanl.gov>\n\n        PR fortran/32797\n        PR fortran/32800\n        * gfortran.dg/bind_c_usage_8.f03: New test case.\n        * gfortran.dg/c_f_pointer_tests_2.f03: Ditto.\n        * gfortran.dg/c_ptr_tests_5.f03: Updated expected error message.\n\nFrom-SVN: r126856", "tree": {"sha": "0d4e807824b3a8f0020eb56a4163295d31415a69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d4e807824b3a8f0020eb56a4163295d31415a69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8fa96e0895efa743ade7d3dcd12a4f92909382d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8fa96e0895efa743ade7d3dcd12a4f92909382d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8fa96e0895efa743ade7d3dcd12a4f92909382d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8fa96e0895efa743ade7d3dcd12a4f92909382d/comments", "author": null, "committer": null, "parents": [{"sha": "f4e00f444bc09fae39ee050ceb3d1ba16481293a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e00f444bc09fae39ee050ceb3d1ba16481293a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e00f444bc09fae39ee050ceb3d1ba16481293a"}], "stats": {"total": 145, "additions": 120, "deletions": 25}, "files": [{"sha": "04f2486240e23f4249048700370fec897eb3aa6a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fa96e0895efa743ade7d3dcd12a4f92909382d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fa96e0895efa743ade7d3dcd12a4f92909382d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d8fa96e0895efa743ade7d3dcd12a4f92909382d", "patch": "@@ -1,3 +1,16 @@\n+2007-07-23  Christopher D. Rickett  <crickett@lanl.gov>\n+\n+\tPR fortran/32797\n+\tPR fortran/32800\n+\t* decl.c (verify_bind_c_sym): Use the result symbol for functions\n+\twith a result clause.  Warn if implicitly typed.  Verify the type\n+\tand rank of the SHAPE argument, if given.\n+\t* resolve.c (gfc_iso_c_sub_interface): Use gfc_procedure_use to\n+\tcheck the actual args against the formal, sorting them if\n+\tnecessary.\n+\t* symbol.c (gen_shape_param): Initialize type of SHAPE param to\n+\tBT_VOID.\n+\n 2007-07-23  Christopher D. Rickett  <crickett@lanl.gov>\n \n \tPR fortran/32732"}, {"sha": "8774c8509a57deebb7b289640139daae09b3fc6c", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fa96e0895efa743ade7d3dcd12a4f92909382d/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fa96e0895efa743ade7d3dcd12a4f92909382d/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=d8fa96e0895efa743ade7d3dcd12a4f92909382d", "patch": "@@ -2927,6 +2927,22 @@ verify_bind_c_sym (gfc_symbol *tmp_sym, gfc_typespec *ts,\n                    int is_in_common, gfc_common_head *com_block)\n {\n   try retval = SUCCESS;\n+\n+  if (tmp_sym->attr.function && tmp_sym->result != NULL)\n+    {\n+      tmp_sym = tmp_sym->result;\n+      /* Make sure it wasn't an implicitly typed result.  */\n+      if (tmp_sym->attr.implicit_type)\n+\t{\n+\t  gfc_warning (\"Implicitly declared BIND(C) function '%s' at \"\n+                       \"%L may not be C interoperable\", tmp_sym->name,\n+                       &tmp_sym->declared_at);\n+\t  tmp_sym->ts.f90_type = tmp_sym->ts.type;\n+\t  /* Mark it as C interoperable to prevent duplicate warnings.\t*/\n+\t  tmp_sym->ts.is_c_interop = 1;\n+\t  tmp_sym->attr.is_c_interop = 1;\n+\t}\n+    }\n   \n   /* Here, we know we have the bind(c) attribute, so if we have\n      enough type info, then verify that it's a C interop kind."}, {"sha": "ceb8473e23df5a88306b48717fe524e950b41f27", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fa96e0895efa743ade7d3dcd12a4f92909382d/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fa96e0895efa743ade7d3dcd12a4f92909382d/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=d8fa96e0895efa743ade7d3dcd12a4f92909382d", "patch": "@@ -2323,7 +2323,15 @@ gfc_iso_c_sub_interface (gfc_code *c, gfc_symbol *sym)\n   char binding_label[GFC_MAX_BINDING_LABEL_LEN + 1];\n   /* default to success; will override if find error */\n   match m = MATCH_YES;\n-  gfc_symbol *tmp_sym;\n+\n+  /* Make sure the actual arguments are in the necessary order (based on the \n+     formal args) before resolving.  */\n+  gfc_procedure_use (sym, &c->ext.actual, &(c->loc));\n+\n+  /* Give the optional SHAPE formal arg a type now that we've done our\n+     initial checking against the actual.  */\n+  if (sym->intmod_sym_id == ISOCBINDING_F_POINTER)\n+    sym->formal->next->next->sym->ts.type = BT_INTEGER;\n \n   if ((sym->intmod_sym_id == ISOCBINDING_F_POINTER) ||\n       (sym->intmod_sym_id == ISOCBINDING_F_PROCPOINTER))\n@@ -2334,25 +2342,29 @@ gfc_iso_c_sub_interface (gfc_code *c, gfc_symbol *sym)\n \t{\n \t  if (c->ext.actual != NULL && c->ext.actual->next != NULL)\n \t    {\n-\t      /* Make sure we got a third arg.\tThe type/rank of it will\n-\t\t be checked later if it's there (gfc_procedure_use()).\t*/\n-\t      if (c->ext.actual->next->expr->rank != 0 &&\n-\t\t  c->ext.actual->next->next == NULL)\n+\t      /* Make sure we got a third arg if the second arg has non-zero\n+\t\t rank.\tWe must also check that the type and rank are\n+\t\t correct since we short-circuit this check in\n+\t\t gfc_procedure_use() (called above to sort actual args).  */\n+\t      if (c->ext.actual->next->expr->rank != 0)\n \t\t{\n-\t\t  m = MATCH_ERROR;\n-\t\t  gfc_error (\"Missing SHAPE parameter for call to %s \"\n-\t\t\t     \"at %L\", sym->name, &(c->loc));\n+\t\t  if(c->ext.actual->next->next == NULL \n+\t\t     || c->ext.actual->next->next->expr == NULL)\n+\t\t    {\n+\t\t      m = MATCH_ERROR;\n+\t\t      gfc_error (\"Missing SHAPE parameter for call to %s \"\n+\t\t\t\t \"at %L\", sym->name, &(c->loc));\n+\t\t    }\n+\t\t  else if (c->ext.actual->next->next->expr->ts.type\n+\t\t\t   != BT_INTEGER\n+\t\t\t   || c->ext.actual->next->next->expr->rank != 1)\n+\t\t    {\n+\t\t      m = MATCH_ERROR;\n+\t\t      gfc_error (\"SHAPE parameter for call to %s at %L must \"\n+\t\t\t\t \"be a rank 1 INTEGER array\", sym->name,\n+\t\t\t\t &(c->loc));\n+\t\t    }\n \t\t}\n-              /* Make sure the param is a POINTER.  No need to make sure\n-                 it does not have INTENT(IN) since it is a POINTER.  */\n-              tmp_sym = c->ext.actual->next->expr->symtree->n.sym;\n-              if (tmp_sym != NULL && tmp_sym->attr.pointer != 1)\n-                {\n-                  gfc_error (\"Argument '%s' to '%s' at %L \"\n-                             \"must have the POINTER attribute\",\n-                             tmp_sym->name, sym->name, &(c->loc));\n-                  m = MATCH_ERROR;\n-                }\n \t    }\n \t}\n       \n@@ -2405,10 +2417,7 @@ gfc_iso_c_sub_interface (gfc_code *c, gfc_symbol *sym)\n \n   /* set the resolved symbol */\n   if (m != MATCH_ERROR)\n-    {\n-      gfc_procedure_use (new_sym, &c->ext.actual, &c->loc);\n-      c->resolved_sym = new_sym;\n-    }\n+    c->resolved_sym = new_sym;\n   else\n     c->resolved_sym = sym;\n   "}, {"sha": "32fe1f18ea0434dd10aa1dd52420291f830aa5d1", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fa96e0895efa743ade7d3dcd12a4f92909382d/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fa96e0895efa743ade7d3dcd12a4f92909382d/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=d8fa96e0895efa743ade7d3dcd12a4f92909382d", "patch": "@@ -3419,8 +3419,12 @@ gen_shape_param (gfc_formal_arglist **head,\n   param_sym->attr.dummy = 1;\n   param_sym->attr.use_assoc = 1;\n \n-  /* Integer array, rank 1, describing the shape of the object.  */\n-  param_sym->ts.type = BT_INTEGER;\n+  /* Integer array, rank 1, describing the shape of the object.  Make it's\n+     type BT_VOID initially so we can accept any type/kind combination of\n+     integer.  During gfc_iso_c_sub_interface (resolve.c), we'll make it\n+     of BT_INTEGER type.  */\n+  param_sym->ts.type = BT_VOID;\n+\n   /* Initialize the kind to default integer.  However, it will be overriden\n      during resolution to match the kind of the SHAPE parameter given as\n      the actual argument (to allow for any valid integer kind).  */"}, {"sha": "923fe9798a38b776852838631e74fede5cc1f2b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fa96e0895efa743ade7d3dcd12a4f92909382d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fa96e0895efa743ade7d3dcd12a4f92909382d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d8fa96e0895efa743ade7d3dcd12a4f92909382d", "patch": "@@ -1,3 +1,11 @@\n+2007-07-23  Christopher D. Rickett  <crickett@lanl.gov>\n+\n+\tPR fortran/32797\n+\tPR fortran/32800\n+\t* gfortran.dg/bind_c_usage_8.f03: New test case.\n+\t* gfortran.dg/c_f_pointer_tests_2.f03: Ditto.\n+\t* gfortran.dg/c_ptr_tests_5.f03: Updated expected error message. \n+\n 2007-07-23  Richard Sandiford  <richard@codesourcery.com>\n \n \t* gcc.target/mips/branch-cost-1.c: New test."}, {"sha": "a94545cc51ca17bfe098da61482518787539d871", "filename": "gcc/testsuite/gfortran.dg/bind_c_usage_8.f03", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fa96e0895efa743ade7d3dcd12a4f92909382d/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_8.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fa96e0895efa743ade7d3dcd12a4f92909382d/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_8.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_8.f03?ref=d8fa96e0895efa743ade7d3dcd12a4f92909382d", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+! This should compile, though there is a warning about the type of len\n+! (return variable of strlen()) for being implicit.\n+! PR fortran/32797\n+!\n+MODULE ISO_C_UTILITIES\n+   USE ISO_C_BINDING\n+   implicit none\n+   CHARACTER(C_CHAR), DIMENSION(1), SAVE, TARGET, PRIVATE :: dummy_string=\"?\"\n+CONTAINS\n+   FUNCTION C_F_STRING(CPTR) RESULT(FPTR)\n+     use, intrinsic :: iso_c_binding\n+      TYPE(C_PTR), INTENT(IN) :: CPTR ! The C address\n+      CHARACTER(KIND=C_CHAR), DIMENSION(:), POINTER :: FPTR\n+      INTERFACE\n+         FUNCTION strlen(string) RESULT(len) BIND(C,NAME=\"strlen\") ! { dg-warning \"Implicitly declared\" }\n+            USE ISO_C_BINDING\n+            TYPE(C_PTR), VALUE :: string ! A C pointer\n+         END FUNCTION\n+      END INTERFACE\n+      CALL C_F_POINTER(FPTR=FPTR, CPTR=CPTR, SHAPE=[strlen(CPTR)])\n+   END FUNCTION\n+END MODULE ISO_C_UTILITIES\n+! { dg-final { cleanup-modules \"iso_c_utilities\" } }\n+"}, {"sha": "3fe6dd66b1d074c2081e461f14471a4714739d3a", "filename": "gcc/testsuite/gfortran.dg/c_f_pointer_tests_2.f03", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fa96e0895efa743ade7d3dcd12a4f92909382d/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_tests_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fa96e0895efa743ade7d3dcd12a4f92909382d/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_tests_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_tests_2.f03?ref=d8fa96e0895efa743ade7d3dcd12a4f92909382d", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile }\n+! This should compile.  There was a bug in resolving c_f_pointer that was \n+! caused by not sorting the actual args to match the order of the formal args.\n+! PR fortran/32800\n+!\n+FUNCTION C_F_STRING(CPTR) RESULT(FPTR)\n+  USE ISO_C_BINDING\n+  implicit none\n+  TYPE(C_PTR), INTENT(IN) :: CPTR ! The C address\n+  CHARACTER(KIND=C_CHAR), DIMENSION(:), POINTER :: FPTR\n+  INTERFACE\n+     FUNCTION strlen(string) RESULT(len) BIND(C,NAME=\"strlen\")\n+       import\n+       TYPE(C_PTR), VALUE :: string ! A C pointer\n+       integer(c_int) :: len\n+     END FUNCTION strlen\n+  END INTERFACE\n+  CALL C_F_POINTER(FPTR=FPTR, CPTR=CPTR,SHAPE=[strlen(cptr)])\n+END FUNCTION C_F_STRING\n+"}, {"sha": "a9fbbd60e07f004db3914eaacf7d885e870209d8", "filename": "gcc/testsuite/gfortran.dg/c_ptr_tests_5.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8fa96e0895efa743ade7d3dcd12a4f92909382d/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_5.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8fa96e0895efa743ade7d3dcd12a4f92909382d/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_5.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_5.f03?ref=d8fa96e0895efa743ade7d3dcd12a4f92909382d", "patch": "@@ -11,6 +11,6 @@ subroutine sub0(c_struct) bind(c)\n     type(c_ptr), value :: c_struct\n     type(my_f90_type) :: f90_type\n \n-    call c_f_pointer(c_struct, f90_type) ! { dg-error \"must have the POINTER\" }\n+    call c_f_pointer(c_struct, f90_type) ! { dg-error \"must be a pointer\" }\n   end subroutine sub0\n end module c_ptr_tests_5"}]}