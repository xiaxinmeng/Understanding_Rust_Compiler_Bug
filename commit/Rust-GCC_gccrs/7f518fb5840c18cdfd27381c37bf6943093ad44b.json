{"sha": "7f518fb5840c18cdfd27381c37bf6943093ad44b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y1MThmYjU4NDBjMThjZGZkMjczODFjMzdiZjY5NDMwOTNhZDQ0Yg==", "commit": {"author": {"name": "Akshat Agarwal", "email": "humancalico@disroot.org", "date": "2021-02-20T05:37:43Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-22T17:11:21Z"}, "message": "Reformat all files in gcc/rust/typecheck\n\nSigned-off-by: Akshat Agarwal <humancalico@disroot.org>", "tree": {"sha": "2d3b1798d702eebca6b36622d70b666336561b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d3b1798d702eebca6b36622d70b666336561b3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f518fb5840c18cdfd27381c37bf6943093ad44b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f518fb5840c18cdfd27381c37bf6943093ad44b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f518fb5840c18cdfd27381c37bf6943093ad44b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f518fb5840c18cdfd27381c37bf6943093ad44b/comments", "author": {"login": "humancalico", "id": 51334444, "node_id": "MDQ6VXNlcjUxMzM0NDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/51334444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/humancalico", "html_url": "https://github.com/humancalico", "followers_url": "https://api.github.com/users/humancalico/followers", "following_url": "https://api.github.com/users/humancalico/following{/other_user}", "gists_url": "https://api.github.com/users/humancalico/gists{/gist_id}", "starred_url": "https://api.github.com/users/humancalico/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/humancalico/subscriptions", "organizations_url": "https://api.github.com/users/humancalico/orgs", "repos_url": "https://api.github.com/users/humancalico/repos", "events_url": "https://api.github.com/users/humancalico/events{/privacy}", "received_events_url": "https://api.github.com/users/humancalico/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3673b0b3b729cf4e8f9abe01096ecdfad0ad3d5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3673b0b3b729cf4e8f9abe01096ecdfad0ad3d5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3673b0b3b729cf4e8f9abe01096ecdfad0ad3d5f"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "c9fe26e6d98082e84720115ce92bb2da59d13b9b", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f518fb5840c18cdfd27381c37bf6943093ad44b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f518fb5840c18cdfd27381c37bf6943093ad44b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=7f518fb5840c18cdfd27381c37bf6943093ad44b", "patch": "@@ -601,8 +601,8 @@ class TypeCheckExpr : public TypeCheckBase\n \treturn;\n       }\n \n-    auto resolved_index_expr = size_ty->unify (\n-      TypeCheckExpr::Resolve (expr.get_index_expr (), false));\n+    auto resolved_index_expr\n+      = size_ty->unify (TypeCheckExpr::Resolve (expr.get_index_expr (), false));\n     if (resolved_index_expr == nullptr)\n       {\n \trust_error_at (expr.get_index_expr ()->get_locus_slow (),"}, {"sha": "fa87bee5bb0f433a8e92179ee104efa727937e09", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f518fb5840c18cdfd27381c37bf6943093ad44b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f518fb5840c18cdfd27381c37bf6943093ad44b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=7f518fb5840c18cdfd27381c37bf6943093ad44b", "patch": "@@ -72,7 +72,7 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \tauto param_tyty = TypeCheckType::Resolve (param.get_type ());\n \tparams.push_back (\n \t  std::pair<HIR::Pattern *, TyTy::BaseType *> (param.get_param_name (),\n-\t\t\t\t\t\t     param_tyty));\n+\t\t\t\t\t\t       param_tyty));\n \n \tcontext->insert_type (param.get_mappings (), param_tyty);\n       }\n@@ -115,15 +115,16 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \t\t\t\t    std::unique_ptr<HIR::Pattern> (nullptr));\n     context->insert_type (self_param.get_mappings (), self->clone ());\n     params.push_back (\n-      std::pair<HIR::Pattern *, TyTy::BaseType *> (self_pattern, self->clone ()));\n+      std::pair<HIR::Pattern *, TyTy::BaseType *> (self_pattern,\n+\t\t\t\t\t\t   self->clone ()));\n \n     for (auto &param : method.get_function_params ())\n       {\n \t// get the name as well required for later on\n \tauto param_tyty = TypeCheckType::Resolve (param.get_type ());\n \tparams.push_back (\n \t  std::pair<HIR::Pattern *, TyTy::BaseType *> (param.get_param_name (),\n-\t\t\t\t\t\t     param_tyty));\n+\t\t\t\t\t\t       param_tyty));\n \n \tcontext->insert_type (param.get_mappings (), param_tyty);\n       }\n@@ -134,7 +135,8 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n   }\n \n private:\n-  TypeCheckTopLevelImplItem (TyTy::BaseType *self) : TypeCheckBase (), self (self)\n+  TypeCheckTopLevelImplItem (TyTy::BaseType *self)\n+    : TypeCheckBase (), self (self)\n   {}\n \n   TyTy::BaseType *self;"}, {"sha": "c82abaa54c178d15996bfa05c9bdf6ccb3d83ff9", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f518fb5840c18cdfd27381c37bf6943093ad44b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f518fb5840c18cdfd27381c37bf6943093ad44b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=7f518fb5840c18cdfd27381c37bf6943093ad44b", "patch": "@@ -126,7 +126,7 @@ class TypeCheckTopLevel : public TypeCheckBase\n \tauto param_tyty = TypeCheckType::Resolve (param.get_type ());\n \tparams.push_back (\n \t  std::pair<HIR::Pattern *, TyTy::BaseType *> (param.get_param_name (),\n-\t\t\t\t\t\t     param_tyty));\n+\t\t\t\t\t\t       param_tyty));\n \n \tcontext->insert_type (param.get_mappings (), param_tyty);\n       }"}, {"sha": "21f93fb1ed5a188aa7e331b26af4595d72c2c717", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f518fb5840c18cdfd27381c37bf6943093ad44b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f518fb5840c18cdfd27381c37bf6943093ad44b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=7f518fb5840c18cdfd27381c37bf6943093ad44b", "patch": "@@ -100,7 +100,8 @@ class TypeCheckType : public TypeCheckBase\n \t  = new HIR::IdentifierPattern (param.get_name (), param.get_locus (),\n \t\t\t\t\tis_ref, is_mut, std::move (to_bind));\n \n-\tTyTy::BaseType *ptype = TypeCheckType::Resolve (param.get_type ().get ());\n+\tTyTy::BaseType *ptype\n+\t  = TypeCheckType::Resolve (param.get_type ().get ());\n \tparams.push_back (\n \t  std::pair<HIR::Pattern *, TyTy::BaseType *> (pattern, ptype));\n       }\n@@ -178,7 +179,8 @@ class TypeCheckType : public TypeCheckBase\n \n   void visit (HIR::ReferenceType &type)\n   {\n-    TyTy::BaseType *base = TypeCheckType::Resolve (type.get_base_type ().get ());\n+    TyTy::BaseType *base\n+      = TypeCheckType::Resolve (type.get_base_type ().get ());\n     translated = new TyTy::ReferenceType (type.get_mappings ().get_hirid (),\n \t\t\t\t\t  base->get_ref ());\n   }"}, {"sha": "9bc3f3a2663996a2f7c01ae0478fd9470c066c92", "filename": "gcc/rust/typecheck/rust-hir-type-check.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f518fb5840c18cdfd27381c37bf6943093ad44b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f518fb5840c18cdfd27381c37bf6943093ad44b/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h?ref=7f518fb5840c18cdfd27381c37bf6943093ad44b", "patch": "@@ -37,7 +37,8 @@ class TypeCheckContext\n   bool lookup_builtin (std::string name, TyTy::BaseType **type);\n   void insert_builtin (HirId id, NodeId ref, TyTy::BaseType *type);\n \n-  void insert_type (const Analysis::NodeMapping &mappings, TyTy::BaseType *type);\n+  void insert_type (const Analysis::NodeMapping &mappings,\n+\t\t    TyTy::BaseType *type);\n   bool lookup_type (HirId id, TyTy::BaseType **type);\n \n   void insert_type_by_node_id (NodeId ref, HirId id);"}, {"sha": "e1f1a8cec81b47e11a07f16887e85c6b2b4573dd", "filename": "gcc/rust/typecheck/rust-tyty-call.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f518fb5840c18cdfd27381c37bf6943093ad44b/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f518fb5840c18cdfd27381c37bf6943093ad44b/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h?ref=7f518fb5840c18cdfd27381c37bf6943093ad44b", "patch": "@@ -32,7 +32,7 @@ class TypeCheckCallExpr : private TyVisitor\n {\n public:\n   static BaseType *go (BaseType *ref, HIR::CallExpr &call,\n-\t\t     Resolver::TypeCheckContext *context)\n+\t\t       Resolver::TypeCheckContext *context)\n   {\n     TypeCheckCallExpr checker (call, context);\n     ref->accept_vis (checker);\n@@ -76,7 +76,7 @@ class TypeCheckMethodCallExpr : private TyVisitor\n {\n public:\n   static BaseType *go (BaseType *ref, HIR::MethodCallExpr &call,\n-\t\t     Resolver::TypeCheckContext *context)\n+\t\t       Resolver::TypeCheckContext *context)\n   {\n     TypeCheckMethodCallExpr checker (call, context);\n     ref->accept_vis (checker);"}, {"sha": "2479378c2aad630dee01a4ac64dc9a96d5eb7d35", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f518fb5840c18cdfd27381c37bf6943093ad44b/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f518fb5840c18cdfd27381c37bf6943093ad44b/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=7f518fb5840c18cdfd27381c37bf6943093ad44b", "patch": "@@ -60,9 +60,9 @@ class BaseRules : public TyVisitor\n     other->accept_vis (*this);\n     if (resolved != nullptr)\n       {\n-\tresolved->append_reference (get_base()->get_ref ());\n+\tresolved->append_reference (get_base ()->get_ref ());\n \tresolved->append_reference (other->get_ref ());\n-\tfor (auto ref : get_base()->get_combined_refs ())\n+\tfor (auto ref : get_base ()->get_combined_refs ())\n \t  resolved->append_reference (ref);\n \tfor (auto ref : other->get_combined_refs ())\n \t  resolved->append_reference (ref);"}]}