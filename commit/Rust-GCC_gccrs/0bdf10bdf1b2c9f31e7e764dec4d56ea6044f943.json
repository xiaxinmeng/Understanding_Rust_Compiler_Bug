{"sha": "0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943", "node_id": "C_kwDOANBUbNoAKDBiZGYxMGJkZjFiMmM5ZjMxZTdlNzY0ZGVjNGQ1NmVhNjA0NGY5NDM", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-11-04T10:23:12Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-11-04T14:14:50Z"}, "message": "Fix recent thinko in operand_equal_p\n\nThere is a thinko in a recent improvement made to operand_equal_p where\nthe code just looks at operand 2 of COMPONENT_REF, if it is present, to\ncompare addresses.  That's wrong because operand 2 contains the number of\nDECL_OFFSET_ALIGN-bit-sized words so, when DECL_OFFSET_ALIGN > 8, not all\nthe  bytes are included and some of them are in DECL_FIELD_BIT_OFFSET, see\nget_inner_reference for the model computation.\n\nIn other words, you would need to compare operand 2 and DECL_OFFSET_ALIGN\nand DECL_FIELD_BIT_OFFSET in this situation, but I'm not sure this is worth\nthe hassle in practice so the fix just removes this alternate handling.\n\ngcc/\n\t* fold-const.cc (operand_compare::operand_equal_p) <COMPONENT_REF>:\n\tDo not take into account operand 2.\n\t(operand_compare::hash_operand) <COMPONENT_REF>: Likewise.\n\ngcc/testsuite/\n\t* gnat.dg/opt99.adb: New test.\n\t* gnat.dg/opt99_pkg1.ads, gnat.dg/opt99_pkg1.adb: New helper.\n\t* gnat.dg/opt99_pkg2.ads: Likewise.", "tree": {"sha": "25b2ac3b00d05621a82a46657a3dd214fe1d3a72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25b2ac3b00d05621a82a46657a3dd214fe1d3a72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943/comments", "author": null, "committer": null, "parents": [{"sha": "3e2bdf2460a34a2389dee813a2ba8ecf976f2ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e2bdf2460a34a2389dee813a2ba8ecf976f2ec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e2bdf2460a34a2389dee813a2ba8ecf976f2ec9"}], "stats": {"total": 75, "additions": 61, "deletions": 14}, "files": [{"sha": "b89cac91cae2f3e47f4407df96fb5b4f86c78d2b", "filename": "gcc/fold-const.cc", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943/gcc%2Ffold-const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943/gcc%2Ffold-const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.cc?ref=0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943", "patch": "@@ -3377,9 +3377,6 @@ operand_compare::operand_equal_p (const_tree arg0, const_tree arg1,\n \t\tif (compare_address\n \t\t    && (flags & OEP_ADDRESS_OF_SAME_FIELD) == 0)\n \t\t  {\n-\t\t    if (TREE_OPERAND (arg0, 2)\n-\t\t\t|| TREE_OPERAND (arg1, 2))\n-\t\t      return OP_SAME_WITH_NULL (2);\n \t\t    tree field0 = TREE_OPERAND (arg0, 1);\n \t\t    tree field1 = TREE_OPERAND (arg1, 1);\n \n@@ -3890,17 +3887,10 @@ operand_compare::hash_operand (const_tree t, inchash::hash &hstate,\n \t      if (sflags & OEP_ADDRESS_OF)\n \t\t{\n \t\t  hash_operand (TREE_OPERAND (t, 0), hstate, flags);\n-\t\t  if (TREE_OPERAND (t, 2))\n-\t\t    hash_operand (TREE_OPERAND (t, 2), hstate,\n-\t\t\t\t  flags & ~OEP_ADDRESS_OF);\n-\t\t  else\n-\t\t    {\n-\t\t      tree field = TREE_OPERAND (t, 1);\n-\t\t      hash_operand (DECL_FIELD_OFFSET (field),\n-\t\t\t\t    hstate, flags & ~OEP_ADDRESS_OF);\n-\t\t      hash_operand (DECL_FIELD_BIT_OFFSET (field),\n-\t\t\t\t    hstate, flags & ~OEP_ADDRESS_OF);\n-\t\t    }\n+\t\t  hash_operand (DECL_FIELD_OFFSET (TREE_OPERAND (t, 1)),\n+\t\t\t\thstate, flags & ~OEP_ADDRESS_OF);\n+\t\t  hash_operand (DECL_FIELD_BIT_OFFSET (TREE_OPERAND (t, 1)),\n+\t\t\t\thstate, flags & ~OEP_ADDRESS_OF);\n \t\t  return;\n \t\t}\n \t      break;"}, {"sha": "8805d47c122e211206398b8ca19b9da24da9b69d", "filename": "gcc/testsuite/gnat.dg/opt99.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943/gcc%2Ftestsuite%2Fgnat.dg%2Fopt99.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943/gcc%2Ftestsuite%2Fgnat.dg%2Fopt99.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt99.adb?ref=0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943", "patch": "@@ -0,0 +1,15 @@\n+-- { dg-do run }\n+-- { dg-options \"-O\" }\n+\n+with Opt99_Pkg1; use Opt99_Pkg1;\n+\n+procedure Opt99 is\n+  C : constant My_Character := (D => True, C => ' ');\n+  D : Derived;\n+\n+begin\n+  Set (D, C, C);\n+  if not D.C2.D then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "476b09c9524d898d6ae1eb08231f9b20816bc77e", "filename": "gcc/testsuite/gnat.dg/opt99_pkg1.adb", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943/gcc%2Ftestsuite%2Fgnat.dg%2Fopt99_pkg1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943/gcc%2Ftestsuite%2Fgnat.dg%2Fopt99_pkg1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt99_pkg1.adb?ref=0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943", "patch": "@@ -0,0 +1,10 @@\n+package body Opt99_Pkg1 is\n+\n+  procedure Set (D: in out Derived; C1, C2 : My_Character) is\n+  begin\n+    D.I  := 0;\n+    D.C1 := C1;\n+    D.C2 := C2;\n+  end;\n+\n+end Opt99_Pkg1;"}, {"sha": "3e265616d1444f2cff98cf702145ae39e0ee9739", "filename": "gcc/testsuite/gnat.dg/opt99_pkg1.ads", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943/gcc%2Ftestsuite%2Fgnat.dg%2Fopt99_pkg1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943/gcc%2Ftestsuite%2Fgnat.dg%2Fopt99_pkg1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt99_pkg1.ads?ref=0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943", "patch": "@@ -0,0 +1,19 @@\n+with Opt99_Pkg2;\n+\n+package Opt99_Pkg1 is\n+\n+  type My_Character (D : Boolean := False) is record\n+    case D is\n+      when False => null;\n+      when True  => C : Character;\n+    end case;\n+  end record;\n+\n+  type Derived is new Opt99_Pkg2.Root with record\n+    I : Integer;\n+    C1, C2 : My_Character;\n+  end record;\n+\n+  procedure Set (D: in out Derived; C1, C2 : My_Character);\n+\n+end Opt99_Pkg1;"}, {"sha": "09aaff14e014162106e7cbfdfb84939d3f68e6ed", "filename": "gcc/testsuite/gnat.dg/opt99_pkg2.ads", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943/gcc%2Ftestsuite%2Fgnat.dg%2Fopt99_pkg2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943/gcc%2Ftestsuite%2Fgnat.dg%2Fopt99_pkg2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt99_pkg2.ads?ref=0bdf10bdf1b2c9f31e7e764dec4d56ea6044f943", "patch": "@@ -0,0 +1,13 @@\n+package Opt99_Pkg2 is\n+\n+  function Get_Max return Positive is (4);\n+\n+  C : constant Positive := Get_Max;\n+\n+  type Arr is array (1 .. C) of Integer;\n+\n+  type Root is tagged record\n+    Data : Arr;\n+  end record;\n+\n+end Opt99_Pkg2;"}]}