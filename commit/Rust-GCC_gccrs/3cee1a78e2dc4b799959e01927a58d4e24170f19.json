{"sha": "3cee1a78e2dc4b799959e01927a58d4e24170f19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NlZTFhNzhlMmRjNGI3OTk5NTllMDE5MjdhNThkNGUyNDE3MGYxOQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-12-21T17:43:15Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-12-21T17:43:15Z"}, "message": "h8300-protos.h: Update the prototype for split_adds_subs.\n\n\t* config/h8300/h8300-protos.h: Update the prototype for\n\tsplit_adds_subs.\n\tAdd prototypes for const_le_2_operand and const_le_6_operand.\n\t* config/h8300/h8300.c (split_adds_subs): Add an argument to\n\tspecify whether inc/dec should be used when possible.\n\t(const_le_2_operand): New.\n\t(const_le_6_operand): Likewise.\n\t* config/h8300/h8300.md (two peepholes): New.\n\nFrom-SVN: r60387", "tree": {"sha": "f82a732b2bcd8f9839f9f872c8ba4a44a96cc2f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f82a732b2bcd8f9839f9f872c8ba4a44a96cc2f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cee1a78e2dc4b799959e01927a58d4e24170f19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cee1a78e2dc4b799959e01927a58d4e24170f19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cee1a78e2dc4b799959e01927a58d4e24170f19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cee1a78e2dc4b799959e01927a58d4e24170f19/comments", "author": null, "committer": null, "parents": [{"sha": "b06daadc88f0f1316a7736de904c51e036991337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b06daadc88f0f1316a7736de904c51e036991337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b06daadc88f0f1316a7736de904c51e036991337"}], "stats": {"total": 121, "additions": 114, "deletions": 7}, "files": [{"sha": "5896006ece793606743e388d13a733fb088d2ec8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cee1a78e2dc4b799959e01927a58d4e24170f19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cee1a78e2dc4b799959e01927a58d4e24170f19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3cee1a78e2dc4b799959e01927a58d4e24170f19", "patch": "@@ -1,3 +1,14 @@\n+2002-12-21  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300-protos.h: Update the prototype for\n+\tsplit_adds_subs.\n+\tAdd prototypes for const_le_2_operand and const_le_6_operand.\n+\t* config/h8300/h8300.c (split_adds_subs): Add an argument to\n+\tspecify whether inc/dec should be used when possible.\n+\t(const_le_2_operand): New.\n+\t(const_le_6_operand): Likewise.\n+\t* config/h8300/h8300.md (two peepholes): New.\n+\n 2002-12-21  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/fr30/fr30.md: Fix a comment typo."}, {"sha": "ebb0cd17d4cff1aad02f380fdec25aa1748c6e25", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cee1a78e2dc4b799959e01927a58d4e24170f19/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cee1a78e2dc4b799959e01927a58d4e24170f19/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=3cee1a78e2dc4b799959e01927a58d4e24170f19", "patch": "@@ -47,7 +47,7 @@ extern int h8300_shift_needs_scratch_p PARAMS ((int, enum machine_mode));\n extern int expand_a_rotate PARAMS ((enum rtx_code, rtx[]));\n extern int fix_bit_operand PARAMS ((rtx *, int, enum rtx_code));\n extern int h8300_adjust_insn_length PARAMS ((rtx, int));\n-extern void split_adds_subs PARAMS ((enum machine_mode, rtx[]));\n+extern void split_adds_subs PARAMS ((enum machine_mode, rtx[], int));\n \n extern int general_operand_src PARAMS ((rtx, enum machine_mode));\n extern int general_operand_dst PARAMS ((rtx, enum machine_mode));\n@@ -59,6 +59,8 @@ extern int small_call_insn_operand PARAMS ((rtx, enum machine_mode));\n extern int jump_address_operand PARAMS ((rtx, enum machine_mode));\n extern int bit_operand PARAMS ((rtx, enum machine_mode));\n extern int bit_memory_operand PARAMS ((rtx, enum machine_mode));\n+extern int const_le_2_operand PARAMS ((rtx, enum machine_mode));\n+extern int const_le_6_operand PARAMS ((rtx, enum machine_mode));\n extern int incdec_operand PARAMS ((rtx, enum machine_mode));\n extern int bit_operator PARAMS ((rtx, enum machine_mode));\n extern int nshift_operator PARAMS ((rtx, enum machine_mode));"}, {"sha": "c13b247ec75a99260dd5cbdaf92eff0f749f11f1", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 53, "deletions": 4, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cee1a78e2dc4b799959e01927a58d4e24170f19/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cee1a78e2dc4b799959e01927a58d4e24170f19/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=3cee1a78e2dc4b799959e01927a58d4e24170f19", "patch": "@@ -916,17 +916,23 @@ two_insn_adds_subs_operand (op, mode)\n   return 0;\n }\n \n-/* Split an add of a small constant into two adds/subs insns.  */\n+/* Split an add of a small constant into two adds/subs insns.\n+\n+   If USE_INCDEC_P is nonzero, we generate the last insn using inc/dec\n+   instead of adds/subs.  */\n \n void\n-split_adds_subs (mode, operands)\n+split_adds_subs (mode, operands, use_incdec_p)\n      enum machine_mode mode;\n      rtx *operands;\n+     int use_incdec_p;\n {\n   HOST_WIDE_INT val = INTVAL (operands[1]);\n   rtx reg = operands[0];\n   HOST_WIDE_INT sign = 1;\n   HOST_WIDE_INT amount;\n+  rtx (*gen_last) (rtx, rtx, rtx);\n+  rtx (*gen_normal) (rtx, rtx, rtx);\n \n   /* Force VAL to be positive so that we do not have to consider the\n      sign.  */\n@@ -936,15 +942,34 @@ split_adds_subs (mode, operands)\n       sign = -1;\n     }\n \n+  switch (mode)\n+    {\n+    case HImode:\n+      gen_normal = gen_addhi3;\n+      gen_last   = gen_addhi3_incdec;\n+      break;\n+\n+    case SImode:\n+      gen_normal = gen_addsi3;\n+      gen_last   = gen_addsi3_incdec;\n+      break;\n+\n+    default:\n+      abort ();\n+    }\n+\n   /* Try different amounts in descending order.  */\n   for (amount = (TARGET_H8300H || TARGET_H8300S) ? 4 : 2;\n        amount > 0;\n        amount /= 2)\n     {\n       for (; val >= amount; val -= amount)\n \t{\n-\t  rtx tmp = gen_rtx_PLUS (mode, reg, GEN_INT (sign * amount));\n-\t  emit_insn (gen_rtx_SET (VOIDmode, reg, tmp));\n+\t  /* If requested, generate the last insn using inc/dec.  */\n+\t  if (use_incdec_p && amount <= 2 && val == amount)\n+\t    emit_insn (gen_last (reg, reg, GEN_INT (sign * amount)));\n+\t  else\n+\t    emit_insn (gen_normal (reg, reg, GEN_INT (sign * amount)));\n \t}\n     }\n \n@@ -1806,6 +1831,30 @@ notice_update_cc (body, insn)\n     }\n }\n \n+/* Return nonzero if X is a constant whose absolute value is no\n+   greater than 2.  */\n+\n+int\n+const_le_2_operand (x, mode)\n+     rtx x;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  return (GET_CODE (x) == CONST_INT\n+\t  && abs (INTVAL (x)) <= 2);\n+}\n+\n+/* Return nonzero if X is a constant whose absolute value is no\n+   greater than 6.  */\n+\n+int\n+const_le_6_operand (x, mode)\n+     rtx x;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  return (GET_CODE (x) == CONST_INT\n+\t  && abs (INTVAL (x)) <= 6);\n+}\n+\n /* Return nonzero if X is a constant suitable for inc/dec.  */\n \n int"}, {"sha": "5eb0c74ee9c6dfe91efd146207d3666b34ce026e", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cee1a78e2dc4b799959e01927a58d4e24170f19/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cee1a78e2dc4b799959e01927a58d4e24170f19/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=3cee1a78e2dc4b799959e01927a58d4e24170f19", "patch": "@@ -815,7 +815,7 @@\n \t\t (match_operand:HI 1 \"two_insn_adds_subs_operand\" \"\")))]\n   \"\"\n   [(const_int 0)]\n-  \"split_adds_subs (HImode, operands); DONE;\")\n+  \"split_adds_subs (HImode, operands, 0); DONE;\")\n \n (define_expand \"addsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -867,7 +867,7 @@\n \t\t (match_operand:SI 1 \"two_insn_adds_subs_operand\" \"\")))]\n   \"TARGET_H8300H || TARGET_H8300S\"\n   [(const_int 0)]\n-  \"split_adds_subs (SImode, operands); DONE;\")\n+  \"split_adds_subs (SImode, operands, 0); DONE;\")\n \n ;; ----------------------------------------------------------------------\n ;; SUBTRACT INSTRUCTIONS\n@@ -2872,3 +2872,48 @@\n \t\t      (label_ref (match_dup 2))\n \t\t      (pc)))]\n   \"\")\n+\n+;; For a small constant, it is cheaper to actually do the subtraction\n+;; and then test the register.\n+\n+(define_peephole2\n+  [(set (cc0)\n+\t(compare:HI (match_operand:HI 0 \"register_operand\" \"\")\n+\t\t    (match_operand:HI 1 \"const_le_2_operand\" \"\")))\n+   (set (pc)\n+\t(if_then_else (match_operator 3 \"eqne_operator\"\n+\t\t\t[(cc0) (const_int 0)])\n+\t\t      (label_ref (match_operand 2 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"(TARGET_H8300H || TARGET_H8300S)\n+   && find_regno_note (insn, REG_DEAD, REGNO (operands[0]))\"\n+  [(set (cc0)\n+\t(match_dup 0))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])\n+\t\t      (label_ref (match_operand 2 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"operands[1] = GEN_INT (- INTVAL (operands[1]));\n+   split_adds_subs (HImode, operands, 1);\")\n+\n+;; The SImode version of the previous pattern.\n+\n+(define_peephole2\n+  [(set (cc0)\n+\t(compare:SI (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t    (match_operand:SI 1 \"const_le_6_operand\" \"\")))\n+   (set (pc)\n+\t(if_then_else (match_operator 3 \"eqne_operator\"\n+\t\t\t[(cc0) (const_int 0)])\n+\t\t      (label_ref (match_operand 2 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"(TARGET_H8300H || TARGET_H8300S)\n+   && find_regno_note (insn, REG_DEAD, REGNO (operands[0]))\"\n+  [(set (cc0)\n+\t(match_dup 0))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])\n+\t\t      (label_ref (match_operand 2 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"operands[1] = GEN_INT (- INTVAL (operands[1]));\n+   split_adds_subs (SImode, operands, 1);\")"}]}