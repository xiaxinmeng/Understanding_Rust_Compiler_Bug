{"sha": "bee27152f7e6651f38c25ac68db13370382147e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVlMjcxNTJmN2U2NjUxZjM4YzI1YWM2OGRiMTMzNzAzODIxNDdlMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-07T06:27:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-07T06:27:49Z"}, "message": "i386: Fix emit_reduc_half on V{64Q,32H}Imode [PR94500]\n\nThe following testcase is miscompiled in 8.x, because emit_reduc_half is\nprepared to handle for 512-bit modes only i equal to 512, 256, 128 and 64.\nV32HImode also needs i equal to 32 and V64QImode i equal to 32 and 16,\nbut emit_reduc_half in that case performs a redundant permutation exactly\nlike i == 32.  In 9+ the testcase works because Richard in r9-3393\nchanged the reduc_* expanders so that they actually don't call\nix86_expand_reduc on 512-bit modes, but only 128-bit ones.\n\nThe patch fixes emit_reduc_half to handle also i of 32 and 16 similarly to\nhow V32QImode/V16HImode are handled for AVX2.  I think it shouldn't hurt\nto fix the function even on the trunk and 9 branch even when nothing uses\nit ATM.\n\n2020-04-07  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/94500\n\t* config/i386/i386-expand.c (emit_reduc_half): For V{64QI,32HI}mode\n\thandle i < 64 using avx512bw_lshrv4ti3.  Formatting fixes.\n\n\t* gcc.target/i386/avx512bw-pr94500.c: New test.", "tree": {"sha": "089a85d991c57f6e359ef13e65d949642dd4dc54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/089a85d991c57f6e359ef13e65d949642dd4dc54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bee27152f7e6651f38c25ac68db13370382147e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bee27152f7e6651f38c25ac68db13370382147e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bee27152f7e6651f38c25ac68db13370382147e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bee27152f7e6651f38c25ac68db13370382147e0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "467fc7c83abfe8fca8b75defac7c89f6c75bf9d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467fc7c83abfe8fca8b75defac7c89f6c75bf9d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/467fc7c83abfe8fca8b75defac7c89f6c75bf9d7"}], "stats": {"total": 105, "additions": 76, "deletions": 29}, "files": [{"sha": "f248688933d4e2790256e0add2f2edd3755e6d30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee27152f7e6651f38c25ac68db13370382147e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee27152f7e6651f38c25ac68db13370382147e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bee27152f7e6651f38c25ac68db13370382147e0", "patch": "@@ -1,3 +1,9 @@\n+2020-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94500\n+\t* config/i386/i386-expand.c (emit_reduc_half): For V{64QI,32HI}mode\n+\thandle i < 64 using avx512bw_lshrv4ti3.  Formatting fixes.\n+\n 2020-04-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cselib.c (cselib_subst_to_values): For SP_DERIVED_VALUE_P"}, {"sha": "066de99e66076d486338fcd2238ac4013f4a5e30", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 37, "deletions": 29, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee27152f7e6651f38c25ac68db13370382147e0/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee27152f7e6651f38c25ac68db13370382147e0/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=bee27152f7e6651f38c25ac68db13370382147e0", "patch": "@@ -14891,43 +14891,51 @@ emit_reduc_half (rtx dest, rtx src, int i)\n       break;\n     case E_V64QImode:\n     case E_V32HImode:\n+      if (i < 64)\n+\t{\n+\t  d = gen_reg_rtx (V4TImode);\n+\t  tem = gen_avx512bw_lshrv4ti3 (d, gen_lowpart (V4TImode, src),\n+\t\t\t\t\tGEN_INT (i / 2));\n+\t  break;\n+\t}\n+      /* FALLTHRU */\n     case E_V16SImode:\n     case E_V16SFmode:\n     case E_V8DImode:\n     case E_V8DFmode:\n       if (i > 128)\n \ttem = gen_avx512f_shuf_i32x4_1 (gen_lowpart (V16SImode, dest),\n-\t\t\t\t      gen_lowpart (V16SImode, src),\n-\t\t\t\t      gen_lowpart (V16SImode, src),\n-\t\t\t\t      GEN_INT (0x4 + (i == 512 ? 4 : 0)),\n-\t\t\t\t      GEN_INT (0x5 + (i == 512 ? 4 : 0)),\n-\t\t\t\t      GEN_INT (0x6 + (i == 512 ? 4 : 0)),\n-\t\t\t\t      GEN_INT (0x7 + (i == 512 ? 4 : 0)),\n-\t\t\t\t      GEN_INT (0xC), GEN_INT (0xD),\n-\t\t\t\t      GEN_INT (0xE), GEN_INT (0xF),\n-\t\t\t\t      GEN_INT (0x10), GEN_INT (0x11),\n-\t\t\t\t      GEN_INT (0x12), GEN_INT (0x13),\n-\t\t\t\t      GEN_INT (0x14), GEN_INT (0x15),\n-\t\t\t\t      GEN_INT (0x16), GEN_INT (0x17));\n+\t\t\t\t\tgen_lowpart (V16SImode, src),\n+\t\t\t\t\tgen_lowpart (V16SImode, src),\n+\t\t\t\t\tGEN_INT (0x4 + (i == 512 ? 4 : 0)),\n+\t\t\t\t\tGEN_INT (0x5 + (i == 512 ? 4 : 0)),\n+\t\t\t\t\tGEN_INT (0x6 + (i == 512 ? 4 : 0)),\n+\t\t\t\t\tGEN_INT (0x7 + (i == 512 ? 4 : 0)),\n+\t\t\t\t\tGEN_INT (0xC), GEN_INT (0xD),\n+\t\t\t\t\tGEN_INT (0xE), GEN_INT (0xF),\n+\t\t\t\t\tGEN_INT (0x10), GEN_INT (0x11),\n+\t\t\t\t\tGEN_INT (0x12), GEN_INT (0x13),\n+\t\t\t\t\tGEN_INT (0x14), GEN_INT (0x15),\n+\t\t\t\t\tGEN_INT (0x16), GEN_INT (0x17));\n       else\n \ttem = gen_avx512f_pshufd_1 (gen_lowpart (V16SImode, dest),\n-\t\t\t\t   gen_lowpart (V16SImode, src),\n-\t\t\t\t   GEN_INT (i == 128 ? 0x2 : 0x1),\n-\t\t\t\t   GEN_INT (0x3),\n-\t\t\t\t   GEN_INT (0x3),\n-\t\t\t\t   GEN_INT (0x3),\n-\t\t\t\t   GEN_INT (i == 128 ? 0x6 : 0x5),\n-\t\t\t\t   GEN_INT (0x7),\n-\t\t\t\t   GEN_INT (0x7),\n-\t\t\t\t   GEN_INT (0x7),\n-\t\t\t\t   GEN_INT (i == 128 ? 0xA : 0x9),\n-\t\t\t\t   GEN_INT (0xB),\n-\t\t\t\t   GEN_INT (0xB),\n-\t\t\t\t   GEN_INT (0xB),\n-\t\t\t\t   GEN_INT (i == 128 ? 0xE : 0xD),\n-\t\t\t\t   GEN_INT (0xF),\n-\t\t\t\t   GEN_INT (0xF),\n-\t\t\t\t   GEN_INT (0xF));\n+\t\t\t\t    gen_lowpart (V16SImode, src),\n+\t\t\t\t    GEN_INT (i == 128 ? 0x2 : 0x1),\n+\t\t\t\t    GEN_INT (0x3),\n+\t\t\t\t    GEN_INT (0x3),\n+\t\t\t\t    GEN_INT (0x3),\n+\t\t\t\t    GEN_INT (i == 128 ? 0x6 : 0x5),\n+\t\t\t\t    GEN_INT (0x7),\n+\t\t\t\t    GEN_INT (0x7),\n+\t\t\t\t    GEN_INT (0x7),\n+\t\t\t\t    GEN_INT (i == 128 ? 0xA : 0x9),\n+\t\t\t\t    GEN_INT (0xB),\n+\t\t\t\t    GEN_INT (0xB),\n+\t\t\t\t    GEN_INT (0xB),\n+\t\t\t\t    GEN_INT (i == 128 ? 0xE : 0xD),\n+\t\t\t\t    GEN_INT (0xF),\n+\t\t\t\t    GEN_INT (0xF),\n+\t\t\t\t    GEN_INT (0xF));\n       break;\n     default:\n       gcc_unreachable ();"}, {"sha": "d9209f920aed38123d8cfc29d3981d9cd20c3874", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee27152f7e6651f38c25ac68db13370382147e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee27152f7e6651f38c25ac68db13370382147e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bee27152f7e6651f38c25ac68db13370382147e0", "patch": "@@ -1,3 +1,8 @@\n+2020-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94500\n+\t* gcc.target/i386/avx512bw-pr94500.c: New test.\n+\n 2020-04-06  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/93686"}, {"sha": "7effdac5a173a1b85ceafbf10df3fd14c1809349", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr94500.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bee27152f7e6651f38c25ac68db13370382147e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr94500.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bee27152f7e6651f38c25ac68db13370382147e0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr94500.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr94500.c?ref=bee27152f7e6651f38c25ac68db13370382147e0", "patch": "@@ -0,0 +1,28 @@\n+/* PR target/94500 */\n+/* { dg-do run { target avx512bw } } */\n+/* { dg-options \"-O3 -mavx512bw -mprefer-vector-width=512\" } */\n+\n+#define AVX512BW\n+#include \"avx512f-helper.h\"\n+\n+__attribute__((noipa)) signed char\n+foo (signed char *p)\n+{\n+  signed char r = 0;\n+  int i;\n+  for (i = 0; i < 256; i++)\n+    if (p[i] > r) r = p[i];\n+  return r;\n+}\n+\n+signed char buf[256];\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  for (i = 0; i < 256; i++)\n+    buf[i] = i - 128;\n+  if (foo (buf) != 127)\n+    abort ();\n+}"}]}