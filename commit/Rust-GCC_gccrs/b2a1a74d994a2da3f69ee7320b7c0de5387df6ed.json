{"sha": "b2a1a74d994a2da3f69ee7320b7c0de5387df6ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJhMWE3NGQ5OTRhMmRhM2Y2OWVlNzMyMGI3YzBkZTUzODdkZjZlZA==", "commit": {"author": {"name": "Ira Rosen", "email": "ira.rosen@linaro.org", "date": "2011-11-29T07:00:53Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2011-11-29T07:00:53Z"}, "message": "re PR tree-optimization/51301 (Compiler ICE in vect_is_simple_use_1)\n\n\n        PR tree-optimization/51301\n        * tree-vect-patterns.c (vect_recog_over_widening_pattern): Check\n        that the last statement doesn't convert to a bigger type than the\n        original type of the computation.\n\nFrom-SVN: r181797", "tree": {"sha": "d3ecf3c65cbd7e736351c23e3e95e50a8572f764", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3ecf3c65cbd7e736351c23e3e95e50a8572f764"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2a1a74d994a2da3f69ee7320b7c0de5387df6ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a1a74d994a2da3f69ee7320b7c0de5387df6ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2a1a74d994a2da3f69ee7320b7c0de5387df6ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a1a74d994a2da3f69ee7320b7c0de5387df6ed/comments", "author": null, "committer": null, "parents": [{"sha": "db4e52814df0022e937794d28cca0d159c76a890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db4e52814df0022e937794d28cca0d159c76a890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db4e52814df0022e937794d28cca0d159c76a890"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "ef9c4800fe2a2f67f3ee16ac92ff2a583b2d7d5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a1a74d994a2da3f69ee7320b7c0de5387df6ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a1a74d994a2da3f69ee7320b7c0de5387df6ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2a1a74d994a2da3f69ee7320b7c0de5387df6ed", "patch": "@@ -1,3 +1,10 @@\n+2011-11-29  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\tPR tree-optimization/51301\n+\t* tree-vect-patterns.c (vect_recog_over_widening_pattern): Check that\n+\tthe last statement doesn't convert to a bigger type than the original\n+\ttype of the computation.\n+\n 2011-11-28  Richard Henderson  <rth@redhat.com>\n \n \t* config/rs6000/rs6000.c (rs6000_expand_atomic_compare_and_swap):"}, {"sha": "f2e923685e027c28fe31c3f7320cab264947cd95", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a1a74d994a2da3f69ee7320b7c0de5387df6ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a1a74d994a2da3f69ee7320b7c0de5387df6ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2a1a74d994a2da3f69ee7320b7c0de5387df6ed", "patch": "@@ -1,3 +1,8 @@\n+2011-11-29  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\tPR tree-optimization/51301\n+\t* gcc.dg/vect/pr51301.c: New test.\n+\n 2011-11-28  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* g++.dg/cdce3.C: Use dg-additional-options."}, {"sha": "c0000cad942344453857b5a4d1b0f11b7abe5140", "filename": "gcc/testsuite/gcc.dg/vect/pr51301.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a1a74d994a2da3f69ee7320b7c0de5387df6ed/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr51301.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a1a74d994a2da3f69ee7320b7c0de5387df6ed/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr51301.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr51301.c?ref=b2a1a74d994a2da3f69ee7320b7c0de5387df6ed", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+typedef signed char int8_t;\n+typedef signed long long int64_t;\n+int64_t\n+f0a (int8_t * __restrict__ arg1)\n+{\n+  int idx;\n+  int64_t result = 0;\n+  for (idx = 0; idx < 416; idx += 1)\n+    result += arg1[idx] << (arg1[idx] == arg1[idx]);\n+  return result;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "22414475f6f8695762f57e1cfa1a548c9eeadd5b", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a1a74d994a2da3f69ee7320b7c0de5387df6ed/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a1a74d994a2da3f69ee7320b7c0de5387df6ed/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=b2a1a74d994a2da3f69ee7320b7c0de5387df6ed", "patch": "@@ -1088,6 +1088,7 @@ vect_recog_over_widening_pattern (VEC (gimple, heap) **stmts,\n   tree var = NULL_TREE, new_type = NULL_TREE, tmp, new_oprnd;\n   bool first;\n   struct loop *loop = (gimple_bb (stmt))->loop_father;\n+  tree type = NULL;\n \n   first = true;\n   while (1)\n@@ -1150,6 +1151,7 @@ vect_recog_over_widening_pattern (VEC (gimple, heap) **stmts,\n           print_gimple_stmt (vect_dump, pattern_stmt, 0, TDF_SLIM);\n         }\n \n+      type = gimple_expr_type (stmt);\n       prev_stmt = stmt;\n       stmt = use_stmt;\n \n@@ -1165,9 +1167,11 @@ vect_recog_over_widening_pattern (VEC (gimple, heap) **stmts,\n     {\n       use_lhs = gimple_assign_lhs (use_stmt);\n       use_type = TREE_TYPE (use_lhs);\n-      /* Support only type promotion or signedess change.  */\n+      /* Support only type promotion or signedess change.  Check that USE_TYPE\n+\t is not bigger than the original type.  */\n       if (!INTEGRAL_TYPE_P (use_type)\n-          || TYPE_PRECISION (new_type) > TYPE_PRECISION (use_type))\n+          || TYPE_PRECISION (new_type) > TYPE_PRECISION (use_type)\n+\t  || TYPE_PRECISION (type) < TYPE_PRECISION (use_type))\n         return NULL;\n \n       if (TYPE_UNSIGNED (new_type) != TYPE_UNSIGNED (use_type)"}]}