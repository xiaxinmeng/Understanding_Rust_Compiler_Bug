{"sha": "994e0ad41529f5518fd013474a657968807d9ca5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk0ZTBhZDQxNTI5ZjU1MThmZDAxMzQ3NGE2NTc5Njg4MDdkOWNhNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-13T23:11:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-13T23:11:24Z"}, "message": "c++: Emit DFP typeinfos even when DFP is disabled [PR92906]\n\nBefore Joseph's changes when compiling\nlibstdc++-v3/libsupc++/fundamental_type_info.cc\nwe were emitting\n_ZTIPDd, _ZTIPDe, _ZTIPDf, _ZTIPKDd, _ZTIPKDe, _ZTIPKDf, _ZTIDd, _ZTIDe, _ZTIDf\nsymbols even when DFP wasn't usable, but now we don't and thus those 9\nsymbols @@CXXABI_1.3.4 are gone from libstdc++.  While nothing could\nprobably use it (except perhaps dlsym etc.), various tools don't really like\nsymbols disappearing from symbol versioned shared libraries with stable ABI.\nAdding those in assembly would be possible, but would be a portability\nnightmare (the PR has something Red Hat uses in libstdc++_nonshared.a, but that\ncan handle only a handful of linux ELF targets we care about).\nSo, instead this patch hacks up the FE, so that it emits those, but in a way\nthat won't make the DFP types available again on targets that don't support\nthem.\n\n2020-02-14  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libstdc++/92906\n\t* cp-tree.h (enum cp_tree_index): Add CPTI_FALLBACK_DFLOAT32_TYPE,\n\tCPTI_FALLBACK_DFLOAT64_TYPE and CPTI_FALLBACK_DFLOAT128_TYPE.\n\t(fallback_dfloat32_type, fallback_dfloat64_type,\n\tfallback_dfloat128_type): Define.\n\t* mangle.c (write_builtin_type): Handle fallback_dfloat*_type like\n\tdfloat*_type_node.\n\t* rtti.c (emit_support_tinfos): Emit DFP typeinfos even when dfp\n\tis disabled for compatibility.", "tree": {"sha": "ba765517b05fcbdb0e04132ad7532961e9fc8760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba765517b05fcbdb0e04132ad7532961e9fc8760"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/994e0ad41529f5518fd013474a657968807d9ca5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/994e0ad41529f5518fd013474a657968807d9ca5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/994e0ad41529f5518fd013474a657968807d9ca5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/994e0ad41529f5518fd013474a657968807d9ca5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a0c4f5b373e236cb4af5491f50862d41fd8775a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a0c4f5b373e236cb4af5491f50862d41fd8775a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a0c4f5b373e236cb4af5491f50862d41fd8775a"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "11acab7008ee98f9cd81d4bc508a6a3f58e62f7e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994e0ad41529f5518fd013474a657968807d9ca5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994e0ad41529f5518fd013474a657968807d9ca5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=994e0ad41529f5518fd013474a657968807d9ca5", "patch": "@@ -1,3 +1,15 @@\n+2020-02-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/92906\n+\t* cp-tree.h (enum cp_tree_index): Add CPTI_FALLBACK_DFLOAT32_TYPE,\n+\tCPTI_FALLBACK_DFLOAT64_TYPE and CPTI_FALLBACK_DFLOAT128_TYPE.\n+\t(fallback_dfloat32_type, fallback_dfloat64_type,\n+\tfallback_dfloat128_type): Define.\n+\t* mangle.c (write_builtin_type): Handle fallback_dfloat*_type like\n+\tdfloat*_type_node.\n+\t* rtti.c (emit_support_tinfos): Emit DFP typeinfos even when dfp\n+\tis disabled for compatibility.\n+\n 2020-02-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/93713"}, {"sha": "c1aafa1de3aa665e3de0127d96af4c6b47b10c9d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994e0ad41529f5518fd013474a657968807d9ca5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994e0ad41529f5518fd013474a657968807d9ca5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=994e0ad41529f5518fd013474a657968807d9ca5", "patch": "@@ -206,6 +206,10 @@ enum cp_tree_index\n \n     CPTI_SOURCE_LOCATION_IMPL,\n \n+    CPTI_FALLBACK_DFLOAT32_TYPE,\n+    CPTI_FALLBACK_DFLOAT64_TYPE,\n+    CPTI_FALLBACK_DFLOAT128_TYPE,\n+\n     CPTI_MAX\n };\n \n@@ -366,6 +370,12 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n \n #define access_default_node\t\tnull_node\n \n+/* Variant of dfloat{32,64,128}_type_node only used for fundamental\n+   rtti purposes if DFP is disabled.  */\n+#define fallback_dfloat32_type\t\tcp_global_trees[CPTI_FALLBACK_DFLOAT32_TYPE]\n+#define fallback_dfloat64_type\t\tcp_global_trees[CPTI_FALLBACK_DFLOAT64_TYPE]\n+#define fallback_dfloat128_type\t\tcp_global_trees[CPTI_FALLBACK_DFLOAT128_TYPE]\n+\n \f\n #include \"name-lookup.h\"\n "}, {"sha": "a0e888fde62f2c2112a249927553443689e877ca", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994e0ad41529f5518fd013474a657968807d9ca5/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994e0ad41529f5518fd013474a657968807d9ca5/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=994e0ad41529f5518fd013474a657968807d9ca5", "patch": "@@ -2569,11 +2569,11 @@ write_builtin_type (tree type)\n \twrite_char ('d');\n       else if (type == long_double_type_node)\n \twrite_char ('e');\n-      else if (type == dfloat32_type_node)\n+      else if (type == dfloat32_type_node || type == fallback_dfloat32_type)\n \twrite_string (\"Df\");\n-      else if (type == dfloat64_type_node)\n+      else if (type == dfloat64_type_node || type == fallback_dfloat64_type)\n \twrite_string (\"Dd\");\n-      else if (type == dfloat128_type_node)\n+      else if (type == dfloat128_type_node || type == fallback_dfloat128_type)\n \twrite_string (\"De\");\n       else\n \tgcc_unreachable ();"}, {"sha": "f20941c413b936ebab937e0044d6d8df0ddc7484", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994e0ad41529f5518fd013474a657968807d9ca5/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994e0ad41529f5518fd013474a657968807d9ca5/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=994e0ad41529f5518fd013474a657968807d9ca5", "patch": "@@ -1588,6 +1588,20 @@ emit_support_tinfos (void)\n       }\n   for (tree t = registered_builtin_types; t; t = TREE_CHAIN (t))\n     emit_support_tinfo_1 (TREE_VALUE (t));\n+  /* For compatibility, emit DFP typeinfos even when DFP isn't enabled,\n+     because we've emitted that in the past.  */\n+  if (!targetm.decimal_float_supported_p ())\n+    {\n+      gcc_assert (dfloat32_type_node == NULL_TREE\n+\t\t  && dfloat64_type_node == NULL_TREE\n+\t\t  && dfloat128_type_node == NULL_TREE);\n+      fallback_dfloat32_type = make_node (REAL_TYPE);\n+      fallback_dfloat64_type = make_node (REAL_TYPE);\n+      fallback_dfloat128_type = make_node (REAL_TYPE);\n+      emit_support_tinfo_1 (fallback_dfloat32_type);\n+      emit_support_tinfo_1 (fallback_dfloat64_type);\n+      emit_support_tinfo_1 (fallback_dfloat128_type);\n+    }\n   input_location = saved_loc;\n }\n "}]}