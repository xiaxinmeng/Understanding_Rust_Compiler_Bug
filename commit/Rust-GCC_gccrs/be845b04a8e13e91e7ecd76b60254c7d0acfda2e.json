{"sha": "be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU4NDViMDRhOGUxM2U5MWU3ZWNkNzZiNjAyNTRjN2QwYWNmZGEyZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-10-07T19:37:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-07T19:37:46Z"}, "message": "Implement LWG2296 helper intrinsic c-family/\n\n\tImplement LWG2296 helper intrinsic\nc-family/\n\t* c-common.h (enum rid): Add RID_ADDRESSOF.\n\t* c-common.c (c_common_reswords): Add __builtin_addressof.\ncp/\n\t* parser.c (cp_parser_postfix_expression): Handle RID_ADDRESSOF.\n\t* cp-objcp-common.c (cp_common_init_ts): Handle ADDRESSOF_EXPR.\n\t* constexpr.c (potential_constant_expression_1): Likewise.\n\t* error.c (dump_expr): Likewise.\n\t* typeck.c (cp_build_addressof): New function.\n\t* cp-tree.h (cp_build_addressof): Declare.\n\t* cxx-pretty-print.h (pp_cxx_addressof_expression): Declare.\n\t* cp-tree.def (ADDRESSOF_EXPR): New tree code.\n\t* cxx-pretty-print.c (cxx_pretty_printer::primary_expression): Handle\n\tADDRESSOF_EXPR.  Add __builtin_addressof and\n\t__has_unique_object_representations into syntax in function comment.\n\t(pp_cxx_addressof_expression): New function.\n\t* pt.c (tsubst_copy_and_build): Handle ADDRESSOF_EXPR.\ntestsuite/\n\t* g++.dg/cpp0x/addressof1.C: New test.\n\t* g++.dg/cpp0x/addressof2.C: New test.\n\nFrom-SVN: r240873", "tree": {"sha": "7b14e19adcc90c0ed591c2745b010b6ffcf52ade", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b14e19adcc90c0ed591c2745b010b6ffcf52ade"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "082139830afb428628657a7520659a01ae00b852", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/082139830afb428628657a7520659a01ae00b852", "html_url": "https://github.com/Rust-GCC/gccrs/commit/082139830afb428628657a7520659a01ae00b852"}], "stats": {"total": 257, "additions": 244, "deletions": 13}, "files": [{"sha": "52ba9b8fdebba22497185c67997abd53d073386d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "patch": "@@ -1,3 +1,9 @@\n+2016-10-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tImplement LWG2296 helper intrinsic\n+\t* c-common.h (enum rid): Add RID_ADDRESSOF.\n+\t* c-common.c (c_common_reswords): Add __builtin_addressof.\n+\n 2016-10-07  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR c++/77700"}, {"sha": "f7a5d62012bb84871f02a1e993f41738058a8a1b", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "patch": "@@ -463,6 +463,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"__attribute__\",\tRID_ATTRIBUTE,\t0 },\n   { \"__auto_type\",\tRID_AUTO_TYPE,\tD_CONLY },\n   { \"__bases\",          RID_BASES, D_CXXONLY },\n+  { \"__builtin_addressof\", RID_ADDRESSOF, D_CXXONLY },\n   { \"__builtin_call_with_static_chain\",\n     RID_BUILTIN_CALL_WITH_STATIC_CHAIN, D_CONLY },\n   { \"__builtin_choose_expr\", RID_CHOOSE_EXPR, D_CONLY },"}, {"sha": "0a7b5ec5f9b97586e930224f5f8d443811292b7e", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "patch": "@@ -146,6 +146,7 @@ enum rid\n   RID_CONSTCAST, RID_DYNCAST, RID_REINTCAST, RID_STATCAST,\n \n   /* C++ extensions */\n+  RID_ADDRESSOF,\n   RID_BASES,                   RID_DIRECT_BASES,\n   RID_HAS_NOTHROW_ASSIGN,      RID_HAS_NOTHROW_CONSTRUCTOR,\n   RID_HAS_NOTHROW_COPY,        RID_HAS_TRIVIAL_ASSIGN,"}, {"sha": "ce875ce3b3e53c1b5ea6f317b733e4a0d40f29af", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "patch": "@@ -1,3 +1,20 @@\n+2016-10-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tImplement LWG2296 helper intrinsic\n+\t* parser.c (cp_parser_postfix_expression): Handle RID_ADDRESSOF.\n+\t* cp-objcp-common.c (cp_common_init_ts): Handle ADDRESSOF_EXPR.\n+\t* constexpr.c (potential_constant_expression_1): Likewise.\n+\t* error.c (dump_expr): Likewise.\n+\t* typeck.c (cp_build_addressof): New function.\n+\t* cp-tree.h (cp_build_addressof): Declare.\n+\t* cxx-pretty-print.h (pp_cxx_addressof_expression): Declare.\n+\t* cp-tree.def (ADDRESSOF_EXPR): New tree code.\n+\t* cxx-pretty-print.c (cxx_pretty_printer::primary_expression): Handle\n+\tADDRESSOF_EXPR.  Add __builtin_addressof and\n+\t__has_unique_object_representations into syntax in function comment.\n+\t(pp_cxx_addressof_expression): New function.\n+\t* pt.c (tsubst_copy_and_build): Handle ADDRESSOF_EXPR.\n+\n 2016-10-07  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR c++/77700"}, {"sha": "f5235fc21e6e49d38781a56898f812c362a25be9", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "patch": "@@ -5025,6 +5025,11 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n         return (RECUR (from, TREE_CODE (t) != VIEW_CONVERT_EXPR));\n       }\n \n+    case ADDRESSOF_EXPR:\n+      /* This is like ADDR_EXPR, except it won't form pointer-to-member.  */\n+      t = TREE_OPERAND (t, 0);\n+      goto handle_addr_expr;\n+\n     case ADDR_EXPR:\n       /* -- a unary operator & that is applied to an lvalue that\n             designates an object with thread or automatic storage\n@@ -5035,6 +5040,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \t/* A pointer-to-member constant.  */\n \treturn true;\n \n+    handle_addr_expr:\n #if 0\n       /* FIXME adjust when issue 1197 is fully resolved.  For now don't do\n          any checking here, as we might dereference the pointer later.  If"}, {"sha": "ac1bb63f8174da837266ca1d3e735022331fe350", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "patch": "@@ -315,6 +315,7 @@ cp_common_init_ts (void)\n   MARK_TS_TYPED (STMT_EXPR);\n   MARK_TS_TYPED (OFFSET_REF);\n   MARK_TS_TYPED (OFFSETOF_EXPR);\n+  MARK_TS_TYPED (ADDRESSOF_EXPR);\n   MARK_TS_TYPED (PTRMEM_CST);\n   MARK_TS_TYPED (EMPTY_CLASS_EXPR);\n   MARK_TS_TYPED (VEC_INIT_EXPR);"}, {"sha": "9e4407650f543f4c39e8be3c3f5f675a0a073641", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "patch": "@@ -334,6 +334,11 @@ DEFTREECODE (TAG_DEFN, \"tag_defn\", tcc_expression, 0)\n /* Represents an 'offsetof' expression during template expansion.  */\n DEFTREECODE (OFFSETOF_EXPR, \"offsetof_expr\", tcc_expression, 1)\n \n+/* Represents an '__builtin_addressof' expression during template\n+   expansion.  This is similar to ADDR_EXPR, but it doesn't invoke\n+   overloaded & operators.  */\n+DEFTREECODE (ADDRESSOF_EXPR, \"addressof_expr\", tcc_expression, 1)\n+\n /* Represents the -> operator during template expansion.  */\n DEFTREECODE (ARROW_EXPR, \"arrow_expr\", tcc_expression, 1)\n "}, {"sha": "6a086277c34b6886ef1f0ca5c40cc66efba832f1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "patch": "@@ -6658,6 +6658,8 @@ extern tree build_x_array_ref\t\t\t(location_t, tree, tree,\n extern tree build_x_unary_op\t\t\t(location_t,\n \t\t\t\t\t\t enum tree_code, cp_expr,\n                                                  tsubst_flags_t);\n+extern tree cp_build_addressof\t\t\t(location_t, tree,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern tree cp_build_addr_expr\t\t\t(tree, tsubst_flags_t);\n extern tree cp_build_unary_op                   (enum tree_code, tree, bool,\n                                                  tsubst_flags_t);"}, {"sha": "5157faba23e5b69359c864143568c1329bf8764d", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "patch": "@@ -380,13 +380,15 @@ pp_cxx_userdef_literal (cxx_pretty_printer *pp, tree t)\n    GNU Extensions:\n      __builtin_va_arg ( assignment-expression , type-id )\n      __builtin_offsetof ( type-id, offsetof-expression )\n+     __builtin_addressof ( expression )\n \n      __has_nothrow_assign ( type-id )   \n      __has_nothrow_constructor ( type-id )\n      __has_nothrow_copy ( type-id )\n      __has_trivial_assign ( type-id )   \n      __has_trivial_constructor ( type-id )\n      __has_trivial_copy ( type-id )\n+     __has_unique_object_representations ( type-id )\n      __has_trivial_destructor ( type-id )\n      __has_virtual_destructor ( type-id )     \n      __is_abstract ( type-id )\n@@ -456,6 +458,10 @@ cxx_pretty_printer::primary_expression (tree t)\n       pp_cxx_offsetof_expression (this, t);\n       break;\n \n+    case ADDRESSOF_EXPR:\n+      pp_cxx_addressof_expression (this, t);\n+      break;\n+\n     case REQUIRES_EXPR:\n       pp_cxx_requires_expr (this, t);\n       break;\n@@ -2437,6 +2443,15 @@ pp_cxx_offsetof_expression (cxx_pretty_printer *pp, tree t)\n   pp_cxx_right_paren (pp);\n }\n \n+void\n+pp_cxx_addressof_expression (cxx_pretty_printer *pp, tree t)\n+{\n+  pp_cxx_ws_string (pp, \"__builtin_addressof\");\n+  pp_cxx_left_paren (pp);\n+  pp->expression (TREE_OPERAND (t, 0));\n+  pp_cxx_right_paren (pp);\n+}\n+\n static char const*\n get_fold_operator (tree t)\n {"}, {"sha": "1eb55dfacc025824a7b657acc16650f4b6726dc7", "filename": "gcc/cp/cxx-pretty-print.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "patch": "@@ -90,6 +90,7 @@ void pp_cxx_canonical_template_parameter (cxx_pretty_printer *, tree);\n void pp_cxx_trait_expression (cxx_pretty_printer *, tree);\n void pp_cxx_va_arg_expression (cxx_pretty_printer *, tree);\n void pp_cxx_offsetof_expression (cxx_pretty_printer *, tree);\n+void pp_cxx_addressof_expression (cxx_pretty_printer *, tree);\n void pp_cxx_userdef_literal (cxx_pretty_printer *, tree);\n void pp_cxx_requires_clause (cxx_pretty_printer *, tree);\n void pp_cxx_requires_expr (cxx_pretty_printer *, tree);"}, {"sha": "4cf00411b67e7b807024ca97e5995a4516492666", "filename": "gcc/cp/error.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "patch": "@@ -2678,6 +2678,10 @@ dump_expr (cxx_pretty_printer *pp, tree t, int flags)\n       pp_cxx_offsetof_expression (pp, t);\n       break;\n \n+    case ADDRESSOF_EXPR:\n+      pp_cxx_addressof_expression (pp, t);\n+      break;\n+\n     case SCOPE_REF:\n       dump_decl (pp, t, flags);\n       break;"}, {"sha": "643c1e7bfe90fc81cd217f66e51ea6d5d16d1d10", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "patch": "@@ -6602,6 +6602,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \tbreak;\n       }\n \n+    case RID_ADDRESSOF:\n     case RID_BUILTIN_SHUFFLE:\n       {\n \tvec<tree, va_gc> *vec;\n@@ -6618,19 +6619,29 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \tFOR_EACH_VEC_ELT (*vec, i, p)\n \t  mark_exp_read (p);\n \n-\tif (vec->length () == 2)\n-\t  return build_x_vec_perm_expr (loc, (*vec)[0], NULL_TREE, (*vec)[1],\n-\t\t\t\t\t tf_warning_or_error);\n-\telse if (vec->length () == 3)\n-\t  return build_x_vec_perm_expr (loc, (*vec)[0], (*vec)[1], (*vec)[2],\n-\t\t\t\t\t tf_warning_or_error);\n-\telse\n-\t{\n-\t  error_at (loc, \"wrong number of arguments to \"\n-\t      \"%<__builtin_shuffle%>\");\n-\t  return error_mark_node;\n-\t}\n-\tbreak;\n+\tswitch (keyword)\n+\t  {\n+\t  case RID_ADDRESSOF:\n+\t    if (vec->length () == 1)\n+\t      return cp_build_addressof (loc, (*vec)[0], tf_warning_or_error);\n+\t    error_at (loc, \"wrong number of arguments to \"\n+\t\t\t   \"%<__builtin_addressof%>\");\n+\t    return error_mark_node;\n+\n+\t  case RID_BUILTIN_SHUFFLE:\n+\t    if (vec->length () == 2)\n+\t      return build_x_vec_perm_expr (loc, (*vec)[0], NULL_TREE,\n+\t\t\t\t\t    (*vec)[1], tf_warning_or_error);\n+\t    else if (vec->length () == 3)\n+\t      return build_x_vec_perm_expr (loc, (*vec)[0], (*vec)[1],\n+\t\t\t\t\t    (*vec)[2], tf_warning_or_error);\n+\t    error_at (loc, \"wrong number of arguments to \"\n+\t\t\t   \"%<__builtin_shuffle%>\");\n+\t    return error_mark_node;\n+\n+\t  default:\n+\t    gcc_unreachable ();\n+\t  }\n       }\n \n     default:"}, {"sha": "f6cd3ea47ba0bffd23886c468e937b28a98594f9", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "patch": "@@ -17204,6 +17204,10 @@ tsubst_copy_and_build (tree t,\n       RETURN (finish_offsetof (RECUR (TREE_OPERAND (t, 0)),\n \t\t\t       EXPR_LOCATION (t)));\n \n+    case ADDRESSOF_EXPR:\n+      RETURN (cp_build_addressof (EXPR_LOCATION (t),\n+\t\t\t\t  RECUR (TREE_OPERAND (t, 0)), complain));\n+\n     case TRAIT_EXPR:\n       {\n \ttree type1 = tsubst (TRAIT_EXPR_TYPE1 (t), args,"}, {"sha": "64562698854124f5e485400f1b5780b292a39539", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "patch": "@@ -5456,6 +5456,29 @@ build_x_unary_op (location_t loc, enum tree_code code, cp_expr xarg,\n   return exp;\n }\n \n+/* Construct and perhaps optimize a tree representation\n+   for __builtin_addressof operation.  ARG specifies the operand.  */\n+\n+tree\n+cp_build_addressof (location_t loc, tree arg, tsubst_flags_t complain)\n+{\n+  tree orig_expr = arg;\n+\n+  if (processing_template_decl)\n+    {\n+      if (type_dependent_expression_p (arg))\n+\treturn build_min_nt_loc (loc, ADDRESSOF_EXPR, arg, NULL_TREE);\n+\n+      arg = build_non_dependent_expr (arg);\n+    }\n+\n+  tree exp = cp_build_addr_expr_strict (arg, complain);\n+\n+  if (processing_template_decl && exp != error_mark_node)\n+    exp = build_min_non_dep (ADDRESSOF_EXPR, exp, orig_expr, NULL_TREE);\n+  return exp;\n+}\n+\n /* Like c_common_truthvalue_conversion, but handle pointer-to-member\n    constants, where a null value is represented by an INTEGER_CST of\n    -1.  */"}, {"sha": "07cfac4aa86e5179f0c2b416e5e1fda0d93da533", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "patch": "@@ -1,3 +1,8 @@\n+2016-10-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/cpp0x/addressof1.C: New test.\n+\t* g++.dg/cpp0x/addressof2.C: New test.\n+\n 2016-10-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/float128-type-1.c: New test to check that"}, {"sha": "027811a82b576f425c7d411aaffad64b2534778a", "filename": "gcc/testsuite/g++.dg/cpp0x/addressof1.C", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faddressof1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faddressof1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faddressof1.C?ref=be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "patch": "@@ -0,0 +1,96 @@\n+// LWG2296 - addressof should be constexpr\n+// { dg-do run { target c++11 } }\n+\n+template <typename T>\n+constexpr inline T *\n+addressof (T &x) noexcept\n+{\n+  return __builtin_addressof (x);\n+}\n+\n+int i;\n+static_assert (__builtin_addressof (i) == &i, \"\");\n+static_assert (addressof (i) == &i, \"\");\n+\n+constexpr int &j = i;\n+static_assert (__builtin_addressof (j) == &i, \"\");\n+static_assert (addressof (j) == &i, \"\");\n+\n+struct S { int s; } s;\n+static_assert (__builtin_addressof (s) == &s, \"\");\n+static_assert ((int *) __builtin_addressof (s) == &s.s, \"\");\n+static_assert (addressof (s) == &s, \"\");\n+static_assert ((int *) addressof (s) == &s.s, \"\");\n+\n+struct T\n+{\n+  static T tt;\n+  constexpr T () : p (addressof (tt)) {}\n+  constexpr T *operator & () const { return p; }\n+  T *p;\n+};\n+constexpr T t;\n+T T::tt;\n+static_assert (__builtin_addressof (t) == (const T *) &t.p, \"\");\n+static_assert (&t == __builtin_addressof (T::tt), \"\");\n+static_assert (addressof (t) == (const T *) &t.p, \"\");\n+static_assert (&t == addressof (T::tt), \"\");\n+\n+struct S x, y;\n+\n+constexpr S *\n+foo (bool b)\n+{\n+  return __builtin_addressof (b ? x : y);\n+}\n+\n+constexpr S *\n+bar (bool b, S &c, S &d)\n+{\n+  return __builtin_addressof (b ? c : d);\n+}\n+\n+static_assert (foo (false) == &y, \"\");\n+static_assert (foo (true) == &x, \"\");\n+static_assert (bar (false, y, x) == &x, \"\");\n+static_assert (bar (true, y, x) == &y, \"\");\n+\n+constexpr S *\n+foo2 (bool b)\n+{\n+  return addressof (b ? x : y);\n+}\n+\n+constexpr S *\n+bar2 (bool b, S &c, S &d)\n+{\n+  return addressof (b ? c : d);\n+}\n+\n+static_assert (foo2 (false) == &y, \"\");\n+static_assert (foo2 (true) == &x, \"\");\n+static_assert (bar2 (false, y, x) == &x, \"\");\n+static_assert (bar2 (true, y, x) == &y, \"\");\n+\n+constexpr int a = 1;\n+static_assert (__builtin_addressof (a) == &a, \"\");\n+static_assert (addressof (a) == &a, \"\");\n+constexpr int c[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n+static_assert ((const int *) __builtin_addressof (c) == &c[0], \"\");\n+static_assert ((const int *) addressof (c) == &c[0], \"\");\n+\n+void\n+baz ()\n+{\n+}\n+\n+int\n+main ()\n+{\n+  if (__builtin_addressof (T::tt) == __builtin_addressof (t)\n+      || addressof (T::tt) == addressof (t)\n+      || &T::tt != &t\n+      || __builtin_addressof (baz) != baz\n+      || addressof (baz) != baz)\n+    __builtin_abort ();\n+}"}, {"sha": "28b71d83b3cb57c81028d83db355083c1131100c", "filename": "gcc/testsuite/g++.dg/cpp0x/addressof2.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faddressof2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be845b04a8e13e91e7ecd76b60254c7d0acfda2e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faddressof2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Faddressof2.C?ref=be845b04a8e13e91e7ecd76b60254c7d0acfda2e", "patch": "@@ -0,0 +1,33 @@\n+// LWG2296 - addressof should be constexpr\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T>\n+constexpr inline T *\n+addressof (T &x) noexcept\n+{\n+  return __builtin_addressof (x);\n+}\n+\n+auto a = __builtin_addressof (1);\t\t// { dg-error \"lvalue required as unary\" }\n+auto b = addressof (1);\t\t\t\t// { dg-error \"cannot bind non-const lvalue reference of type\" }\n+\n+struct S { int s : 5; int t; void foo (); } s;\n+\n+auto c = __builtin_addressof (s);\n+auto d = addressof (s);\n+auto e = __builtin_addressof (s.s);\t\t// { dg-error \"attempt to take address of bit-field structure member\" }\n+auto f = addressof (s.s);\t\t\t// { dg-error \"cannot bind bitfield\" }\n+auto g = __builtin_addressof (S{});\t\t// { dg-error \"taking address of temporary\" }\n+auto h = addressof (S{});\t\t\t// { dg-error \"cannot bind non-const lvalue reference of type\" }\n+auto i = __builtin_addressof (S::t);\t\t// { dg-error \"invalid use of non-static data member\" }\n+auto j = __builtin_addressof (S::foo);\t\t// { dg-error \"invalid use of non-static member function\" }\n+\n+void\n+foo (bool b)\n+{\n+  lab:;\n+  char c;\n+  long long int d;\n+  auto k = __builtin_addressof (lab);\t\t// { dg-error \"was not declared in this scope\" }\n+  auto l = __builtin_addressof (b ? c : d);\t// { dg-error \"lvalue required as unary\" }\n+}"}]}