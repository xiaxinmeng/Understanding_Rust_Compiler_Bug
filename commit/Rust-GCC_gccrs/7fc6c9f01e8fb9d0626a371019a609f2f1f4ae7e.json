{"sha": "7fc6c9f01e8fb9d0626a371019a609f2f1f4ae7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZjNmM5ZjAxZThmYjlkMDYyNmEzNzEwMTlhNjA5ZjJmMWY0YWU3ZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-19T21:40:59Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-19T21:40:59Z"}, "message": "Add function definitions for shift_instr,\n\noutput_mov_long_double_fpu_from_arm,\noutput_mov_long_double_arm_from_fpu, and\noutput_mov_long_double_arm_from_arm.\n(FLOAT_WORDS_BIG_ENDIAN): Define to 1.\n(SECONDARY_OUTPUT_RELOAD_CLASS): return GENERAL_REGS for HImode outputs.\n(ASM_OUTPUT_LONG_DOUBLE, ASM_OUTPUT_DOUBLE, ASM_OUTPUT_FLOAT): output\nfloating point constants as hex, make order correct given definition\nof FLOAT_WORDS_BIG_ENDIAN.\n(PRINT_OPERAND): Delete redundant code when handling CONST_DOUBLE.\n\nFrom-SVN: r5809", "tree": {"sha": "765382a537f3bd350dbbd94e8a6c548c2d385df8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/765382a537f3bd350dbbd94e8a6c548c2d385df8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fc6c9f01e8fb9d0626a371019a609f2f1f4ae7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fc6c9f01e8fb9d0626a371019a609f2f1f4ae7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fc6c9f01e8fb9d0626a371019a609f2f1f4ae7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fc6c9f01e8fb9d0626a371019a609f2f1f4ae7e/comments", "author": null, "committer": null, "parents": [{"sha": "af48348a34ddbb400bbbae2b8cd204cb2610cf78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af48348a34ddbb400bbbae2b8cd204cb2610cf78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af48348a34ddbb400bbbae2b8cd204cb2610cf78"}], "stats": {"total": 72, "additions": 47, "deletions": 25}, "files": [{"sha": "82556246569698c62a248205d2d1920c2ac12723", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 47, "deletions": 25, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc6c9f01e8fb9d0626a371019a609f2f1f4ae7e/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc6c9f01e8fb9d0626a371019a609f2f1f4ae7e/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=7fc6c9f01e8fb9d0626a371019a609f2f1f4ae7e", "patch": "@@ -35,6 +35,9 @@ extern char *output_call_mem ();\n extern char *output_move_double ();\n extern char *output_mov_double_fpu_from_arm ();\n extern char *output_mov_double_arm_from_fpu ();\n+extern char *output_mov_long_double_fpu_from_arm ();\n+extern char *output_mov_long_double_arm_from_fpu ();\n+extern char *output_mov_long_double_arm_from_arm ();\n extern char *output_mov_immediate ();\n extern char *output_multi_immediate ();\n extern char *output_shifted_move ();\n@@ -44,6 +47,7 @@ extern char *output_arithmetic_with_shift ();\n extern char *output_return_instruction ();\n extern char *output_load_symbol ();\n extern char *fp_immediate_constant ();\n+extern char *shift_instr ();\n extern struct rtx_def *gen_compare_reg ();\n extern struct rtx_def *arm_gen_store_multiple ();\n extern struct rtx_def *arm_gen_load_multiple ();\n@@ -221,6 +225,9 @@ extern enum processor_type arm_cpu;\n    numbered.  */\n #define WORDS_BIG_ENDIAN  0\n \n+/* Define this if most significant word of doubles is the lowest numbered */\n+#define FLOAT_WORDS_BIG_ENDIAN 1\n+\n /* Number of bits in an addressable storage unit */\n #define BITS_PER_UNIT  8\n \n@@ -536,7 +543,7 @@ enum reg_class\n #define SECONDARY_OUTPUT_RELOAD_CLASS(CLASS,MODE,X)\t\\\n   (((MODE) == DFmode && (CLASS) == GENERAL_REGS\t\t\\\n     && true_regnum (X) == -1) ? GENERAL_REGS\t\t\\\n-   : NO_REGS)\n+   : ((MODE) == HImode && true_regnum (X) == -1) ? GENERAL_REGS : NO_REGS)\n \n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.\n@@ -1514,36 +1521,56 @@ do {\t\t\t\t\t\t\t\t\t\\\n   (arm_increase_location (4)                     \\\n    , fprintf (STREAM, \"\\t.word\\tL%d\\n\", VALUE))\n \n-/* Output various types of constants.  */\n+/* Output various types of constants.  For real numbers we output hex, with\n+   a comment containing the \"human\" value, this allows us to pass NaN's which\n+   the riscix assembler doesn't understand (it also makes cross-assembling\n+   less likely to fail). */\n+\n #define ASM_OUTPUT_LONG_DOUBLE(STREAM,VALUE)\t\t\t\t\\\n-do { long l[3];\t\t\t\t\t\t\t\t\\\n+do { char dstr[30];\t\t\t\t\t\t\t\\\n+     long l[3];\t\t\t\t\t\t\t\t\\\n      arm_increase_location (12);\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\t\t\\\n+     REAL_VALUE_TO_DECIMAL (VALUE, \"%.20g\", dstr);\t\t\t\\\n      if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-       fprintf (STREAM, \"\\t.long 0x%x,0x%x,0x%x\\n\", l[2], l[1], l[0]);\t\\\n+       fprintf (STREAM, \"\\t.long 0x%x,0x%x,0x%x\\t@ long double %s\\n\",\t\\\n+\t\tl[2], l[1], l[0], dstr);\t\t\t\t\\\n      else\t\t\t\t\t\t\t\t\\\n-       fprintf (STREAM, \"\\t.long 0x%lx,0x%lx,0x%lx\\n\", l[2], l[1], l[0]);\t\\\n+       fprintf (STREAM, \"\\t.long 0x%lx,0x%lx,0x%lx\\t@ long double %s\\n\",\\\n+\t\tl[0], l[1], l[2], dstr);\t\t\t\t\\\n    } while (0)\n \n     \n-#define ASM_OUTPUT_DOUBLE(STREAM, VALUE)  \t\t\\\n-do { char dstr[30];\t\t\t\t\t\\\n-     arm_increase_location (8);\t\t\t\t\\\n-     REAL_VALUE_TO_DECIMAL (VALUE, \"%.20g\", dstr);\t\\\n-     fprintf (STREAM, \"\\t.double %s\\n\", dstr);\t\\\n+#define ASM_OUTPUT_DOUBLE(STREAM, VALUE)  \t\t\t\t\\\n+do { char dstr[30];\t\t\t\t\t\t\t\\\n+     long l[2];\t\t\t\t\t\t\t\t\\\n+     arm_increase_location (8);\t\t\t\t\t\t\\\n+     REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\t\t\\\n+     REAL_VALUE_TO_DECIMAL (VALUE, \"%.14g\", dstr);\t\t\t\\\n+     if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n+       fprintf (STREAM, \"\\t.long 0x%x, 0x%x\\t@ double %s\\n\", l[0], l[1],\\\n+\t\tdstr);\t\t\t\t\t\t\t\\\n+     else\t\t\t\t\t\t\t\t\\\n+       fprintf (STREAM, \"\\t.long 0x%lx, 0x%lx\\t@ double %s\\n\", l[0],\t\\\n+\t\tl[1], dstr);\t\t\t\t\t\t\\\n    } while (0)\n \n-#define ASM_OUTPUT_FLOAT(STREAM, VALUE)\t\t\t\\\n-do { char dstr[30];\t\t\t\t\t\\\n-     arm_increase_location (4);\t\t\t\t\\\n-     REAL_VALUE_TO_DECIMAL (VALUE, \"%.20g\", dstr);\t\\\n-     fprintf (STREAM, \"\\t.float %s\\n\", dstr);\t\t\\\n+#define ASM_OUTPUT_FLOAT(STREAM, VALUE)\t\t\t\t\t\\\n+do { char dstr[30];\t\t\t\t\t\t\t\\\n+     long l;\t\t\t\t\t\t\t\t\\\n+     arm_increase_location (4);\t\t\t\t\t\t\\\n+     REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\t\t\\\n+     REAL_VALUE_TO_DECIMAL (VALUE, \"%.7g\", dstr);\t\t\t\\\n+     if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n+       fprintf (STREAM, \"\\t.word 0x%x\\t@ float %s\\n\", l, dstr);\t\t\\\n+     else\t\t\t\t\t\t\t\t\\\n+       fprintf (STREAM, \"\\t.word 0x%lx\\t@ float %s\\n\", l, dstr);\t\\\n    } while (0);\n \n-#define ASM_OUTPUT_INT(STREAM, EXP)  \\\n-  (fprintf (STREAM, \"\\t.word\\t\"),      \\\n-   output_addr_const (STREAM, (EXP)),  \\\n-   arm_increase_location (4),          \\\n+#define ASM_OUTPUT_INT(STREAM, EXP)\t\\\n+  (fprintf (STREAM, \"\\t.word\\t\"),\t\\\n+   output_addr_const (STREAM, (EXP)),\t\\\n+   arm_increase_location (4),\t\t\\\n    fputc ('\\n', STREAM))\n \n #define ASM_OUTPUT_SHORT(STREAM, EXP)  \\\n@@ -1693,12 +1720,7 @@ do { char dstr[30];\t\t\t\t\t\\\n       output_address (XEXP (X, 0));\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else if (GET_CODE(X) == CONST_DOUBLE)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      union real_extract u;\t\t\t\t\t\t\\\n-      u.i[0] = CONST_DOUBLE_LOW (X);\t\t\t\t\t\\\n-      u.i[1] = CONST_DOUBLE_HIGH (X);\t\t\t\t\t\\\n-      fprintf(STREAM,\"#%s\", fp_immediate_constant(X));\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+    fprintf(STREAM,\"#%s\", fp_immediate_constant(X));\t\t\t\\\n   else if (GET_CODE (X) == NEG)\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       fputc ('-', (STREAM));\t\t\t\t\t\t\\"}]}