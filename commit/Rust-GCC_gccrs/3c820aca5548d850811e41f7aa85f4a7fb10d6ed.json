{"sha": "3c820aca5548d850811e41f7aa85f4a7fb10d6ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M4MjBhY2E1NTQ4ZDg1MDgxMWU0MWY3YWE4NWY0YTdmYjEwZDZlZA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-07-16T14:10:58Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-07-16T14:10:58Z"}, "message": "[Ada] Segmentation_Fault with Integer'Wide_Wide_Value\n\nThis patch updates the routines which produce Wide_String and Wide_Wide_String\nfrom a String to construct a result of the proper maximum size which is later\nsliced.\n\n2018-07-16  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/s-wchwts.adb (Wide_String_To_String): Use the appropriate\n\tlongest sequence factor. Code clean up.\n\t(Wide_Wide_String_To_String): Use the appropriate longest sequence\n\tfactor.  Code clean up.\n\ngcc/testsuite/\n\n\t* gnat.dg/wide_wide_value1.adb: New testcase.\n\nFrom-SVN: r262713", "tree": {"sha": "f5a98a5b17dc2d48840fb981d2493311ba019685", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5a98a5b17dc2d48840fb981d2493311ba019685"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c820aca5548d850811e41f7aa85f4a7fb10d6ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c820aca5548d850811e41f7aa85f4a7fb10d6ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c820aca5548d850811e41f7aa85f4a7fb10d6ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c820aca5548d850811e41f7aa85f4a7fb10d6ed/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2588c36c2ea1f62176b07268fa7a8e0cedeb4fbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2588c36c2ea1f62176b07268fa7a8e0cedeb4fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2588c36c2ea1f62176b07268fa7a8e0cedeb4fbf"}], "stats": {"total": 110, "additions": 97, "deletions": 13}, "files": [{"sha": "a782582543e5c2a54d2cd36afa8e822d7ac4f4c6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c820aca5548d850811e41f7aa85f4a7fb10d6ed/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c820aca5548d850811e41f7aa85f4a7fb10d6ed/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3c820aca5548d850811e41f7aa85f4a7fb10d6ed", "patch": "@@ -1,3 +1,10 @@\n+2018-07-16  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* libgnat/s-wchwts.adb (Wide_String_To_String): Use the appropriate\n+\tlongest sequence factor. Code clean up.\n+\t(Wide_Wide_String_To_String): Use the appropriate longest sequence\n+\tfactor.  Code clean up.\n+\n 2018-07-16  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Report an error"}, {"sha": "4eed382bbb8789f3b2979e881ea4102eeff0310b", "filename": "gcc/ada/libgnat/s-wchwts.adb", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c820aca5548d850811e41f7aa85f4a7fb10d6ed/gcc%2Fada%2Flibgnat%2Fs-wchwts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c820aca5548d850811e41f7aa85f4a7fb10d6ed/gcc%2Fada%2Flibgnat%2Fs-wchwts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-wchwts.adb?ref=3c820aca5548d850811e41f7aa85f4a7fb10d6ed", "patch": "@@ -86,16 +86,23 @@ package body System.WCh_WtS is\n      (S  : Wide_String;\n       EM : WC_Encoding_Method) return String\n    is\n-      R  : String (S'First .. S'First + 5 * S'Length); -- worst case length\n-      RP : Natural;\n+      Max_Chars : constant Natural := WC_Longest_Sequences (EM);\n+\n+      Result     : String (S'First .. S'First + Max_Chars * S'Length);\n+      Result_Idx : Natural;\n \n    begin\n-      RP := R'First - 1;\n-      for SP in S'Range loop\n-         Store_UTF_32_Character (Wide_Character'Pos (S (SP)), R, RP, EM);\n+      Result_Idx := Result'First - 1;\n+\n+      for S_Idx in S'Range loop\n+         Store_UTF_32_Character\n+           (U  => Wide_Character'Pos (S (S_Idx)),\n+            S  => Result,\n+            P  => Result_Idx,\n+            EM => EM);\n       end loop;\n \n-      return R (R'First .. RP);\n+      return Result (Result'First .. Result_Idx);\n    end Wide_String_To_String;\n \n    --------------------------------\n@@ -106,17 +113,23 @@ package body System.WCh_WtS is\n      (S  : Wide_Wide_String;\n       EM : WC_Encoding_Method) return String\n    is\n-      R  : String (S'First .. S'First + 7 * S'Length); -- worst case length\n-      RP : Natural;\n+      Max_Chars : constant Natural := WC_Longest_Sequences (EM);\n \n-   begin\n-      RP := R'First - 1;\n+      Result     : String (S'First .. S'First + Max_Chars * S'Length);\n+      Result_Idx : Natural;\n \n-      for SP in S'Range loop\n-         Store_UTF_32_Character (Wide_Wide_Character'Pos (S (SP)), R, RP, EM);\n+   begin\n+      Result_Idx := Result'First - 1;\n+\n+      for S_Idx in S'Range loop\n+         Store_UTF_32_Character\n+           (U  => Wide_Wide_Character'Pos (S (S_Idx)),\n+            S  => Result,\n+            P  => Result_Idx,\n+            EM => EM);\n       end loop;\n \n-      return R (R'First .. RP);\n+      return Result (Result'First .. Result_Idx);\n    end Wide_Wide_String_To_String;\n \n end System.WCh_WtS;"}, {"sha": "506bdf836fba1dac115f375e1d8641dcfbef17f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c820aca5548d850811e41f7aa85f4a7fb10d6ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c820aca5548d850811e41f7aa85f4a7fb10d6ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c820aca5548d850811e41f7aa85f4a7fb10d6ed", "patch": "@@ -1,3 +1,7 @@\n+2018-07-16  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* gnat.dg/wide_wide_value1.adb: New testcase.\n+\n 2018-07-16  Javier Miranda  <miranda@adacore.com>\n \n \t* gnat.dg/bit_order1.adb: New testcase."}, {"sha": "28b922267532ddcb1b89266c259321643ae16ec0", "filename": "gcc/testsuite/gnat.dg/wide_wide_value1.adb", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c820aca5548d850811e41f7aa85f4a7fb10d6ed/gcc%2Ftestsuite%2Fgnat.dg%2Fwide_wide_value1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c820aca5548d850811e41f7aa85f4a7fb10d6ed/gcc%2Ftestsuite%2Fgnat.dg%2Fwide_wide_value1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fwide_wide_value1.adb?ref=3c820aca5548d850811e41f7aa85f4a7fb10d6ed", "patch": "@@ -0,0 +1,60 @@\n+--  { dg-do run }\n+\n+with Ada.Text_IO; use Ada.Text_IO;\n+\n+procedure Wide_Wide_Value1 is\n+begin\n+   begin\n+      declare\n+         Str : constant Wide_Wide_String :=\n+                 Wide_Wide_Character'Val (16#00000411#) &\n+                 Wide_Wide_Character'Val (16#0000043e#) &\n+                 Wide_Wide_Character'Val (16#00000434#) &\n+                 Wide_Wide_Character'Val (16#00000430#) &\n+                 Wide_Wide_Character'Val (16#00000443#) &\n+                 Wide_Wide_Character'Val (16#00000431#) &\n+                 Wide_Wide_Character'Val (16#00000430#) &\n+                 Wide_Wide_Character'Val (16#00000435#) &\n+                 Wide_Wide_Character'Val (16#00000432#) &\n+                 Wide_Wide_Character'Val (16#00000416#) &\n+                 Wide_Wide_Character'Val (16#00000443#) &\n+                 Wide_Wide_Character'Val (16#0000043c#) &\n+                 Wide_Wide_Character'Val (16#00000430#) &\n+                 Wide_Wide_Character'Val (16#00000442#) &\n+                 Wide_Wide_Character'Val (16#0000041c#) &\n+                 Wide_Wide_Character'Val (16#00000430#) &\n+                 Wide_Wide_Character'Val (16#00000440#) &\n+                 Wide_Wide_Character'Val (16#00000430#) &\n+                 Wide_Wide_Character'Val (16#00000442#) &\n+                 Wide_Wide_Character'Val (16#0000043e#) &\n+                 Wide_Wide_Character'Val (16#00000432#) &\n+                 Wide_Wide_Character'Val (16#00000438#) &\n+                 Wide_Wide_Character'Val (16#00000447#);\n+\n+         Val : constant Integer := Integer'Wide_Wide_Value (Str);\n+      begin\n+         Put_Line (\"ERROR: 1: Constraint_Error not raised\");\n+      end;\n+   exception\n+      when Constraint_Error =>\n+         null;\n+      when others =>\n+         Put_Line (\"ERROR: 1: unexpected exception\");\n+   end;\n+\n+   begin\n+      declare\n+         Str : Wide_Wide_String (1 .. 128) :=\n+                 (others => Wide_Wide_Character'Val (16#0FFFFFFF#));\n+\n+         Val : constant Integer := Integer'Wide_Wide_Value (Str);\n+      begin\n+         Put_Line (\"ERROR: 1: Constraint_Error not raised\");\n+      end;\n+   exception\n+      when Constraint_Error =>\n+         null;\n+      when others =>\n+         Put_Line (\"ERROR: 1: unexpected exception\");\n+   end;\n+end Wide_Wide_Value1;"}]}