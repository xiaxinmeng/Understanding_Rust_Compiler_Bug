{"sha": "4a49c70b858351daecd43cac4bbe5d7f6e4e70e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE0OWM3MGI4NTgzNTFkYWVjZDQzY2FjNGJiZTVkN2Y2ZTRlNzBlNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2008-03-21T11:31:11Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-03-21T11:31:11Z"}, "message": "testsuite_abi.cc: Add support for not counting GLIBCXX_LDBL_* compat symbols missing if...\n\n2008-03-20  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/util/testsuite_abi.cc: Add support for not counting\n\tGLIBCXX_LDBL_* compat symbols missing if no long double compat\n\tsymbols under test.\n\nFrom-SVN: r133417", "tree": {"sha": "5542d981a812631ee45abb3e09f94d3799dfa9df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5542d981a812631ee45abb3e09f94d3799dfa9df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a49c70b858351daecd43cac4bbe5d7f6e4e70e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a49c70b858351daecd43cac4bbe5d7f6e4e70e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a49c70b858351daecd43cac4bbe5d7f6e4e70e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a49c70b858351daecd43cac4bbe5d7f6e4e70e4/comments", "author": null, "committer": null, "parents": [{"sha": "f3270633e01dda3ee98c4305410fd4830d8a829c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3270633e01dda3ee98c4305410fd4830d8a829c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3270633e01dda3ee98c4305410fd4830d8a829c"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "a48967dcad73ab3fb50b6c800e0e324634ec4ce2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a49c70b858351daecd43cac4bbe5d7f6e4e70e4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a49c70b858351daecd43cac4bbe5d7f6e4e70e4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4a49c70b858351daecd43cac4bbe5d7f6e4e70e4", "patch": "@@ -1,3 +1,9 @@\n+2008-03-20  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/util/testsuite_abi.cc: Add support for not counting\n+\tGLIBCXX_LDBL_* compat symbols missing if no long double compat\n+\tsymbols under test.\n+\t\n 2008-03-20  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/35637"}, {"sha": "e78a1132462074b10c9c61c604732d119513d11d", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a49c70b858351daecd43cac4bbe5d7f6e4e70e4/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a49c70b858351daecd43cac4bbe5d7f6e4e70e4/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=4a49c70b858351daecd43cac4bbe5d7f6e4e70e4", "patch": "@@ -354,6 +354,16 @@ compare_symbols(const char* baseline_file, const char* test_file,\n       exit(2);\n     }\n \n+  // Check to see if any long double compatibility symbols are produced.\n+  bool ld_version_found(false);\n+  symbol_objects::iterator li(test_objects.begin());\n+  while (!ld_version_found && li != test_objects.end())\n+    {\n+      if (li->second.version_name.find(\"GLIBCXX_LDBL_\") != std::string::npos)\n+\tld_version_found = true;\n+      ++li;\n+    }\n+\n   // Sort out names.\n   // Assuming baseline_names, test_names are both unique w/ no duplicates.\n   //\n@@ -389,8 +399,17 @@ compare_symbols(const char* baseline_file, const char* test_file,\n   for (size_t j = 0; j < missing_size; ++j)\n     {\n       symbol& base = baseline_objects[missing_names[j]];\n-      base.status = symbol::subtracted;\n-      incompatible.push_back(symbol_pair(base, base));\n+      \n+      // Iff no test long double symbols at all and the symbol missing\n+      // is a baseline long double symbol, skip.\n+      if (!ld_version_found\n+\t  && base.version_name.find(\"GLIBCXX_LDBL_\") != std::string::npos)\n+\tcontinue;\n+      else\n+\t{\n+\t  base.status = symbol::subtracted;\n+\t  incompatible.push_back(symbol_pair(base, base));\n+\t}\n     }\n \n   // Check shared names for compatibility."}]}