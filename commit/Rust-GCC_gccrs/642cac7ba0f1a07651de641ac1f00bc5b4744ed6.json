{"sha": "642cac7ba0f1a07651de641ac1f00bc5b4744ed6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQyY2FjN2JhMGYxYTA3NjUxZGU2NDFhYzFmMDBiYzViNDc0NGVkNg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-01-08T12:05:20Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-01-08T12:05:20Z"}, "message": "stmt.c (optimize_tail_recursion): New function, extracted from ...\n\n        * stmt.c (optimize_tail_recursion): New function, extracted from ...\n        (expand_return): Use optimize_tail_recursion.\n        * tree.h (optimize_tail_recursion): Declare.\n\nFrom-SVN: r24574", "tree": {"sha": "1a67de6b312fec2a44ab4db5c9976d28a2f672fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a67de6b312fec2a44ab4db5c9976d28a2f672fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/642cac7ba0f1a07651de641ac1f00bc5b4744ed6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/642cac7ba0f1a07651de641ac1f00bc5b4744ed6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/642cac7ba0f1a07651de641ac1f00bc5b4744ed6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/642cac7ba0f1a07651de641ac1f00bc5b4744ed6/comments", "author": null, "committer": null, "parents": [{"sha": "5c280133c9545b5828b1d2fcb805746506efe249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c280133c9545b5828b1d2fcb805746506efe249", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c280133c9545b5828b1d2fcb805746506efe249"}], "stats": {"total": 87, "additions": 54, "deletions": 33}, "files": [{"sha": "ef257fe82bfbff501960c23b3ee867b31c40fbc7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/642cac7ba0f1a07651de641ac1f00bc5b4744ed6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/642cac7ba0f1a07651de641ac1f00bc5b4744ed6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=642cac7ba0f1a07651de641ac1f00bc5b4744ed6", "patch": "@@ -1,18 +1,22 @@\n-Thu Jan  7 19:52:53 1999  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n-\n-\t* system.h (abort): Supply more detailed information on how to\n- \treport an Internal Compiler Error.\n-\n Fri Jan  8 10:51:13 1999  Andreas Schwab  <schwab@issan.cs.uni-dortmund.de>\n \n \t* config/m68k/m68k.h: Declare output_function_epilogue.\n \t* recog.h: Declare next_insn_tests_no_inequality.\n \n Fri Jan  8 01:43:53 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* stmt.c (optimize_tail_recursion): New function, extracted from ...\n+\t(expand_return): Use optimize_tail_recursion.\n+\t* tree.h (optimize_tail_recursion): Declare.\n+\n \t* toplev.c (compile_file): Move call to output_func_start_profiler\n \tto after the loop to emit deferred functions.\n \n+Thu Jan  7 19:52:53 1999  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n+\n+\t* system.h (abort): Supply more detailed information on how to\n+ \treport an Internal Compiler Error.\n+\n Thu Jan  7 11:26:17 1999  Mark Mitchell  <mark@markmitchell.com>\n \n \t* calls.c (store_unaligned_arguments_into_pseudos): Use xmalloc to"}, {"sha": "4f2e911dfbcf909ef37a4bf662ca17503cf41a85", "filename": "gcc/stmt.c", "status": "modified", "additions": 43, "deletions": 27, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/642cac7ba0f1a07651de641ac1f00bc5b4744ed6/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/642cac7ba0f1a07651de641ac1f00bc5b4744ed6/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=642cac7ba0f1a07651de641ac1f00bc5b4744ed6", "patch": "@@ -1,5 +1,5 @@\n /* Expands front end tree to back end RTL for GNU C-Compiler\n-   Copyright (C) 1987, 88, 89, 92-97, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 92-98, 1999 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -2564,32 +2564,9 @@ expand_return (retval)\n       return;\n     }\n \n-  /* For tail-recursive call to current function,\n-     just jump back to the beginning.\n-     It's unsafe if any auto variable in this function\n-     has its address taken; for simplicity,\n-     require stack frame to be empty.  */\n-  if (optimize && retval_rhs != 0\n-      && frame_offset == 0\n-      && TREE_CODE (retval_rhs) == CALL_EXPR\n-      && TREE_CODE (TREE_OPERAND (retval_rhs, 0)) == ADDR_EXPR\n-      && TREE_OPERAND (TREE_OPERAND (retval_rhs, 0), 0) == current_function_decl\n-      /* Finish checking validity, and if valid emit code\n-\t to set the argument variables for the new call.  */\n-      && tail_recursion_args (TREE_OPERAND (retval_rhs, 1),\n-\t\t\t      DECL_ARGUMENTS (current_function_decl)))\n-    {\n-      if (tail_recursion_label == 0)\n-\t{\n-\t  tail_recursion_label = gen_label_rtx ();\n-\t  emit_label_after (tail_recursion_label,\n-\t\t\t    tail_recursion_reentry);\n-\t}\n-      emit_queue ();\n-      expand_goto_internal (NULL_TREE, tail_recursion_label, last_insn);\n-      emit_barrier ();\n-      return;\n-    }\n+  /* Attempt to optimize the call if it is tail recursive.  */\n+  optimize_tail_recursion (retval_rhs, last_insn);\n+\n #ifdef HAVE_return\n   /* This optimization is safe if there are local cleanups\n      because expand_null_return takes care of them.\n@@ -2794,6 +2771,45 @@ drop_through_at_end_p ()\n   return insn && GET_CODE (insn) != BARRIER;\n }\n \f\n+/* Test CALL_EXPR to determine if it is a potential tail recursion call\n+   and emit code to optimize the tail recursion.  LAST_INSN indicates where\n+   to place the jump to the tail recursion label.\n+\n+   This is only used by expand_return, but expand_call is expected to\n+   use it soon.  */\n+\n+void\n+optimize_tail_recursion (call_expr, last_insn)\n+     tree call_expr;\n+     rtx last_insn;\n+{\n+  /* For tail-recursive call to current function,\n+     just jump back to the beginning.\n+     It's unsafe if any auto variable in this function\n+     has its address taken; for simplicity,\n+     require stack frame to be empty.  */\n+  if (optimize && call_expr != 0\n+      && frame_offset == 0\n+      && TREE_CODE (call_expr) == CALL_EXPR\n+      && TREE_CODE (TREE_OPERAND (call_expr, 0)) == ADDR_EXPR\n+      && TREE_OPERAND (TREE_OPERAND (call_expr, 0), 0) == current_function_decl\n+      /* Finish checking validity, and if valid emit code\n+\t to set the argument variables for the new call.  */\n+      && tail_recursion_args (TREE_OPERAND (call_expr, 1),\n+\t\t\t      DECL_ARGUMENTS (current_function_decl)))\n+    {\n+      if (tail_recursion_label == 0)\n+\t{\n+\t  tail_recursion_label = gen_label_rtx ();\n+\t  emit_label_after (tail_recursion_label,\n+\t\t\t    tail_recursion_reentry);\n+\t}\n+      emit_queue ();\n+      expand_goto_internal (NULL_TREE, tail_recursion_label, last_insn);\n+      emit_barrier ();\n+    }\n+}\n+\n /* Emit code to alter this function's formal parms for a tail-recursive call.\n    ACTUALS is a list of actual parameter expressions (chain of TREE_LISTs).\n    FORMALS is the chain of decls of formals."}, {"sha": "cf3ec9dc3682f4118e017386e2d781c1fe93f895", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/642cac7ba0f1a07651de641ac1f00bc5b4744ed6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/642cac7ba0f1a07651de641ac1f00bc5b4744ed6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=642cac7ba0f1a07651de641ac1f00bc5b4744ed6", "patch": "@@ -1,5 +1,5 @@\n /* Front-end tree definitions for GNU compiler.\n-   Copyright (C) 1989, 93, 94, 95, 96, 97, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 93-98, 1999 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1930,6 +1930,7 @@ extern int expand_exit_something\t\tPROTO((void));\n \n extern void expand_null_return\t\t\tPROTO((void));\n extern void expand_return\t\t\tPROTO((tree));\n+extern void optimize_tail_recursion\t\tPROTO((tree, struct rtx_def *));\n extern void expand_start_bindings\t\tPROTO((int));\n extern void expand_end_bindings\t\t\tPROTO((tree, int, int));\n extern void start_cleanup_deferral\t\tPROTO((void));"}]}