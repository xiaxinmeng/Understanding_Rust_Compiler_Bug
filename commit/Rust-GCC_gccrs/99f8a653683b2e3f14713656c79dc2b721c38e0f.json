{"sha": "99f8a653683b2e3f14713656c79dc2b721c38e0f", "node_id": "C_kwDOANBUbNoAKDk5ZjhhNjUzNjgzYjJlM2YxNDcxMzY1NmM3OWRjMmI3MjFjMzhlMGY", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-11-01T08:20:17Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-11-10T08:57:40Z"}, "message": "[Ada] Don't carry action bodies for expansion of array equality\n\ngcc/ada/\n\n\t* exp_ch3.adb (Make_Eq_Body): Adapt call to\n\tExpand_Record_Equality.\n\t* exp_ch4.ads, exp_ch4.adb (Expand_Composite_Equality): Remove\n\tBodies parameter; adapt comment; fix style in body; adapt calls\n\tto Expand_Record_Equality.\n\t(Expand_Array_Equality): Adapt calls to\n\tExpand_Composite_Equality.\n\t(Expand_Record_Equality): Remove Bodies parameter; adapt\n\tcomment; adapt call to Expand_Composite_Equality.\n\t* exp_ch8.adb (Build_Body_For_Renaming): Adapt call to\n\tExpand_Record_Equality.", "tree": {"sha": "93f187e004bb821269ab53e75a8db325763cb0a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93f187e004bb821269ab53e75a8db325763cb0a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99f8a653683b2e3f14713656c79dc2b721c38e0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f8a653683b2e3f14713656c79dc2b721c38e0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99f8a653683b2e3f14713656c79dc2b721c38e0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f8a653683b2e3f14713656c79dc2b721c38e0f/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c66423ac99a0cbdb87b8019b7d5da3931b50045", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c66423ac99a0cbdb87b8019b7d5da3931b50045", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c66423ac99a0cbdb87b8019b7d5da3931b50045"}], "stats": {"total": 95, "additions": 34, "deletions": 61}, "files": [{"sha": "c91008f69a8a8f8268b4d47cca176ed6632d82ad", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f8a653683b2e3f14713656c79dc2b721c38e0f/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f8a653683b2e3f14713656c79dc2b721c38e0f/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=99f8a653683b2e3f14713656c79dc2b721c38e0f", "patch": "@@ -9864,10 +9864,9 @@ package body Exp_Ch3 is\n              Expression =>\n                Expand_Record_Equality\n                  (Typ,\n-                  Typ    => Typ,\n-                  Lhs    => Make_Identifier (Loc, Name_X),\n-                  Rhs    => Make_Identifier (Loc, Name_Y),\n-                  Bodies => Declarations (Decl))));\n+                  Typ => Typ,\n+                  Lhs => Make_Identifier (Loc, Name_X),\n+                  Rhs => Make_Identifier (Loc, Name_Y))));\n       end if;\n \n       Set_Handled_Statement_Sequence"}, {"sha": "9c50668e957b683db168069dbe562734988dc9ca", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 22, "deletions": 36, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f8a653683b2e3f14713656c79dc2b721c38e0f/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f8a653683b2e3f14713656c79dc2b721c38e0f/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=99f8a653683b2e3f14713656c79dc2b721c38e0f", "patch": "@@ -146,18 +146,14 @@ package body Exp_Ch4 is\n    --  where we allow comparison of \"out of range\" values.\n \n    function Expand_Composite_Equality\n-     (Nod    : Node_Id;\n-      Typ    : Entity_Id;\n-      Lhs    : Node_Id;\n-      Rhs    : Node_Id;\n-      Bodies : List_Id) return Node_Id;\n+     (Nod : Node_Id;\n+      Typ : Entity_Id;\n+      Lhs : Node_Id;\n+      Rhs : Node_Id) return Node_Id;\n    --  Local recursive function used to expand equality for nested composite\n-   --  types. Used by Expand_Record/Array_Equality, Bodies is a list on which\n-   --  to attach bodies of local functions that are created in the process. It\n-   --  is the responsibility of the caller to insert those bodies at the right\n-   --  place. Nod provides the Sloc value for generated code. Lhs and Rhs are\n-   --  the left and right sides for the comparison, and Typ is the type of the\n-   --  objects to compare.\n+   --  types. Used by Expand_Record/Array_Equality. Nod provides the Sloc value\n+   --  for generated code. Lhs and Rhs are the left and right sides for the\n+   --  comparison, and Typ is the type of the objects to compare.\n \n    procedure Expand_Concatenate (Cnode : Node_Id; Opnds : List_Id);\n    --  Routine to expand concatenation of a sequence of two or more operands\n@@ -1722,8 +1718,7 @@ package body Exp_Ch4 is\n              Prefix      => Make_Identifier (Loc, Chars (B)),\n              Expressions => Index_List2);\n \n-         Test := Expand_Composite_Equality\n-                   (Nod, Component_Type (Typ), L, R, Decls);\n+         Test := Expand_Composite_Equality (Nod, Component_Type (Typ), L, R);\n \n          --  If some (sub)component is an unchecked_union, the whole operation\n          --  will raise program error.\n@@ -2012,7 +2007,7 @@ package body Exp_Ch4 is\n                 Prefix      => New_Copy_Tree (New_Rhs),\n                 Expressions => New_List (New_Copy_Tree (Low_B)));\n \n-            TestL := Expand_Composite_Equality (Nod, Ctyp, L, R, Bodies);\n+            TestL := Expand_Composite_Equality (Nod, Ctyp, L, R);\n \n             L :=\n               Make_Indexed_Component (Loc,\n@@ -2024,7 +2019,7 @@ package body Exp_Ch4 is\n                 Prefix      => New_Rhs,\n                 Expressions => New_List (New_Copy_Tree (High_B)));\n \n-            TestH := Expand_Composite_Equality (Nod, Ctyp, L, R, Bodies);\n+            TestH := Expand_Composite_Equality (Nod, Ctyp, L, R);\n \n             return\n               Make_And_Then (Loc, Left_Opnd => TestL, Right_Opnd => TestH);\n@@ -2437,18 +2432,15 @@ package body Exp_Ch4 is\n    --  case because it is not possible to respect normal Ada visibility rules.\n \n    function Expand_Composite_Equality\n-     (Nod    : Node_Id;\n-      Typ    : Entity_Id;\n-      Lhs    : Node_Id;\n-      Rhs    : Node_Id;\n-      Bodies : List_Id) return Node_Id\n+     (Nod : Node_Id;\n+      Typ : Entity_Id;\n+      Lhs : Node_Id;\n+      Rhs : Node_Id) return Node_Id\n    is\n       Loc       : constant Source_Ptr := Sloc (Nod);\n       Full_Type : Entity_Id;\n       Eq_Op     : Entity_Id;\n \n-   --  Start of processing for Expand_Composite_Equality\n-\n    begin\n       if Is_Private_Type (Typ) then\n          Full_Type := Underlying_Type (Typ);\n@@ -2665,7 +2657,7 @@ package body Exp_Ch4 is\n             end;\n \n          else\n-            return Expand_Record_Equality (Nod, Full_Type, Lhs, Rhs, Bodies);\n+            return Expand_Record_Equality (Nod, Full_Type, Lhs, Rhs);\n          end if;\n \n       --  Case of non-record types (always use predefined equality)\n@@ -8640,10 +8632,8 @@ package body Exp_Ch4 is\n          else\n             Remove_Side_Effects (Lhs);\n             Remove_Side_Effects (Rhs);\n-            Rewrite (N,\n-              Expand_Record_Equality (N, Typl, Lhs, Rhs, Bodies));\n+            Rewrite (N, Expand_Record_Equality (N, Typl, Lhs, Rhs));\n \n-            Insert_Actions      (N, Bodies,           Suppress => All_Checks);\n             Analyze_And_Resolve (N, Standard_Boolean, Suppress => All_Checks);\n          end if;\n \n@@ -8666,10 +8656,8 @@ package body Exp_Ch4 is\n          Rewrite (N,\n            Expand_Record_Equality (N, Typl,\n              Unchecked_Convert_To (Typl, Lhs),\n-             Unchecked_Convert_To (Typl, Rhs),\n-             Bodies));\n+             Unchecked_Convert_To (Typl, Rhs)));\n \n-         Insert_Actions      (N, Bodies,           Suppress => All_Checks);\n          Analyze_And_Resolve (N, Standard_Boolean, Suppress => All_Checks);\n       end if;\n \n@@ -12994,11 +12982,10 @@ package body Exp_Ch4 is\n    --  otherwise the primitive \"=\" is used directly.\n \n    function Expand_Record_Equality\n-     (Nod    : Node_Id;\n-      Typ    : Entity_Id;\n-      Lhs    : Node_Id;\n-      Rhs    : Node_Id;\n-      Bodies : List_Id) return Node_Id\n+     (Nod : Node_Id;\n+      Typ : Entity_Id;\n+      Lhs : Node_Id;\n+      Rhs : Node_Id) return Node_Id\n    is\n       Loc : constant Source_Ptr := Sloc (Nod);\n \n@@ -13085,8 +13072,7 @@ package body Exp_Ch4 is\n                Rhs =>\n                  Make_Selected_Component (Loc,\n                    Prefix        => New_Rhs,\n-                   Selector_Name => New_Occurrence_Of (C, Loc)),\n-               Bodies => Bodies);\n+                   Selector_Name => New_Occurrence_Of (C, Loc)));\n \n             --  If some (sub)component is an unchecked_union, the whole\n             --  operation will raise program error."}, {"sha": "b723adc6d9669b7aa1943785a6189453a0435546", "filename": "gcc/ada/exp_ch4.ads", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f8a653683b2e3f14713656c79dc2b721c38e0f/gcc%2Fada%2Fexp_ch4.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f8a653683b2e3f14713656c79dc2b721c38e0f/gcc%2Fada%2Fexp_ch4.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.ads?ref=99f8a653683b2e3f14713656c79dc2b721c38e0f", "patch": "@@ -89,20 +89,16 @@ package Exp_Ch4 is\n    --  while for records without variants only a simple expression is needed.\n \n    function Expand_Record_Equality\n-     (Nod    : Node_Id;\n-      Typ    : Entity_Id;\n-      Lhs    : Node_Id;\n-      Rhs    : Node_Id;\n-      Bodies : List_Id) return Node_Id;\n+     (Nod : Node_Id;\n+      Typ : Entity_Id;\n+      Lhs : Node_Id;\n+      Rhs : Node_Id) return Node_Id;\n    --  Expand a record equality into an expression that compares the fields\n    --  individually to yield the required Boolean result. Loc is the\n    --  location for the generated nodes. Typ is the type of the record, and\n    --  Lhs, Rhs are the record expressions to be compared, these\n    --  expressions need not to be analyzed but have to be side-effect free.\n-   --  Bodies is a list on which to attach bodies of local functions that\n-   --  are created in the process. This is the responsibility of the caller\n-   --  to insert those bodies at the right place. Nod provides the Sloc\n-   --  value for generated code.\n+   --  Nod provides the Sloc value for generated code.\n \n    procedure Expand_Set_Membership (N : Node_Id);\n    --  For each choice of a set membership, we create a simple equality or"}, {"sha": "ff3c0ebae2cca6386f8f8ae56130161347919f69", "filename": "gcc/ada/exp_ch8.adb", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f8a653683b2e3f14713656c79dc2b721c38e0f/gcc%2Fada%2Fexp_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f8a653683b2e3f14713656c79dc2b721c38e0f/gcc%2Fada%2Fexp_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch8.adb?ref=99f8a653683b2e3f14713656c79dc2b721c38e0f", "patch": "@@ -288,7 +288,6 @@ package body Exp_Ch8 is\n       function Build_Body_For_Renaming (Typ : Entity_Id) return Node_Id is\n          Left    : constant Entity_Id := First_Formal (Id);\n          Right   : constant Entity_Id := Next_Formal (Left);\n-         Bodies  : List_Id;\n          Body_Id : Entity_Id;\n          Decl    : Node_Id;\n \n@@ -318,12 +317,6 @@ package body Exp_Ch8 is\n          --  subprogram.\n \n          else\n-            --  While expanding record equality we might create auxiliary\n-            --  subprograms that will be placed in the declaration list of the\n-            --  equality subprogram itself.\n-\n-            Bodies := Empty_List;\n-\n             Decl :=\n               Make_Subprogram_Body (Loc,\n                 Specification              =>\n@@ -332,18 +325,17 @@ package body Exp_Ch8 is\n                     Parameter_Specifications => Copy_Parameter_List (Id),\n                     Result_Definition        =>\n                       New_Occurrence_Of (Standard_Boolean, Loc)),\n-                Declarations               => Bodies,\n+                Declarations               => Empty_List,\n                 Handled_Statement_Sequence =>\n                   Make_Handled_Sequence_Of_Statements (Loc,\n                     Statements => New_List (\n                       Make_Simple_Return_Statement (Loc,\n                         Expression =>\n                           Expand_Record_Equality\n                             (Id,\n-                             Typ    => Typ,\n-                             Lhs    => Make_Identifier (Loc, Chars (Left)),\n-                             Rhs    => Make_Identifier (Loc, Chars (Right)),\n-                             Bodies => Bodies)))));\n+                             Typ => Typ,\n+                             Lhs => Make_Identifier (Loc, Chars (Left)),\n+                             Rhs => Make_Identifier (Loc, Chars (Right)))))));\n          end if;\n \n          return Decl;"}]}