{"sha": "131314e14a3d9d4ef1111b817c4495eaf4dd4777", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMxMzE0ZTE0YTNkOWQ0ZWYxMTExYjgxN2M0NDk1ZWFmNGRkNDc3Nw==", "commit": {"author": {"name": "James Bowman", "email": "james.bowman@ftdichip.com", "date": "2015-09-21T22:31:53Z"}, "committer": {"name": "James Bowman", "email": "jamesbowman@gcc.gnu.org", "date": "2015-09-21T22:31:53Z"}, "message": "[FT32] fixes for the default hardware startup\n\nlibgcc/\n        * config/ft32/crti-hw.S: Use __PMSIZE to allow configurable\n        memory layout. Deal correctly with BSS region larger than 32K.\n        Handle a watchdog reset like a power-on reset. Clean up unused\n        code.\n\nFrom-SVN: r227986", "tree": {"sha": "71f53127014b31dc1d1fbb7130e3c4035808bace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71f53127014b31dc1d1fbb7130e3c4035808bace"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/131314e14a3d9d4ef1111b817c4495eaf4dd4777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/131314e14a3d9d4ef1111b817c4495eaf4dd4777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/131314e14a3d9d4ef1111b817c4495eaf4dd4777", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/131314e14a3d9d4ef1111b817c4495eaf4dd4777/comments", "author": null, "committer": null, "parents": [{"sha": "6ff560cc2513d230edbb37ef613339e1adaeb934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff560cc2513d230edbb37ef613339e1adaeb934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ff560cc2513d230edbb37ef613339e1adaeb934"}], "stats": {"total": 60, "additions": 33, "deletions": 27}, "files": [{"sha": "6d2d9eb53cf0179745b064b96dcae9860b22286b", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131314e14a3d9d4ef1111b817c4495eaf4dd4777/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131314e14a3d9d4ef1111b817c4495eaf4dd4777/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=131314e14a3d9d4ef1111b817c4495eaf4dd4777", "patch": "@@ -1,3 +1,10 @@\n+2015-09-21  James Bowman  <james.bowman@ftdichip.com>\n+\n+\t* config/ft32/crti-hw.S: Use __PMSIZE to allow configurable\n+\tmemory layout. Deal correctly with BSS region larger than 32K.\n+\tHandle a watchdog reset like a power-on reset. Clean up unused\n+\tcode.\n+\n 2015-09-18  Andrew Dixie  <andrewd@gentrack.com>\n \t    David Edelsohn  <dje.gcc@gmail.com>\n "}, {"sha": "c2951fc3c28104fc38196cd5d382adffe9611886", "filename": "libgcc/config/ft32/crti-hw.S", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/131314e14a3d9d4ef1111b817c4495eaf4dd4777/libgcc%2Fconfig%2Fft32%2Fcrti-hw.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/131314e14a3d9d4ef1111b817c4495eaf4dd4777/libgcc%2Fconfig%2Fft32%2Fcrti-hw.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fft32%2Fcrti-hw.S?ref=131314e14a3d9d4ef1111b817c4495eaf4dd4777", "patch": "@@ -1,11 +1,8 @@\n-.equ SYS_REGMSC0CFG_B3  , 0x1001b\n-.equ SYS_REGIRQCTL_B3   , 0x100e3\n-\n .global _start\n _start:\n # START Interrupt Vector Table [[\n-        jmp     0x3fffc         # RESET Vector\n-        jmp     _watchdog_isr   # WATCHDOG Vector # TODO: Change me to reset the chip proper\n+        jmp     __PMSIZE-4\n+        jmp     watchdog_init\n         jmp     interrupt_0\n         jmp     interrupt_1\n         jmp     interrupt_2\n@@ -38,64 +35,66 @@ _start:\n         jmp     interrupt_29\n         jmp     interrupt_30\n         jmp     interrupt_31\n-        jmp     0x3fff8\n+        jmp     __PMSIZE-8\n # ]] END Interrupt Vector Table\n \n codestart:\n         jmp    init\n-\n         \n .global _exithook\n _exithook:               # Debugger uses '_exithook' at 0x90 to catch program exit\n         return\n         \n+watchdog_init:\n+        ldk\t$r0,1\n init:\n+        ldk     $sp,__RAMSIZE\n         # Disable all interrupts\n-        ldk     $r0,0x80\n-        sta.b   0x100e3,$r0\n-        \n-        # Reset all peripherals\n-        # lda.l   $r0, 0x10018\n-        # bins.l  $r0, $r0, 0x23F  # Set bit 31\n-        # sta.l   0x10018, $r0\n+        ldk     $r4,0x80\n+        sta.b   0x100e3,$r4\n         \n         # Initialize DATA by copying from program memory\n-        ldk.l   $r0,__data_load_start\n+        ldk.l   $r4,__data_load_start\n         ldk.l   $r1,__data_load_end\n         ldk.l   $r2,0   # Will use __data after binutils patch\n \n         jmp     .dscopy\n .dsloop:\n-        # Copy PM[$r0] to RAM $r2\n-        lpmi.l  $r3,$r0,0\n+        # Copy PM[$r4] to RAM $r2\n+        lpmi.l  $r3,$r4,0\n         sti.l   $r2,0,$r3\n-        add.l   $r0,$r0,4\n+        add.l   $r4,$r4,4\n         add.l   $r2,$r2,4\n .dscopy:\n-        cmp.l   $r0,$r1\n+        cmp.l   $r4,$r1\n         jmpc    lt,.dsloop\n \n         # Zero BSS\n-        ldk.l   $r0,_bss_start\n+        ldk.l   $r4,_bss_start\n         ldk.l   $r2,_end\n-        sub.l   $r2,$r2,$r0\n+        sub.l   $r2,$r2,$r4\n         ldk.l   $r1,0\n-        memset.l  $r0,$r1,$r2\n+        ldk    $r3,32764\n+1:\n+        cmp    $r2,$r3\n+        jmpc   lt,2f\n+        memset $r4,$r1,$r3\n+        add    $r4,$r4,$r3\n+        sub    $r2,$r2,$r3\n+        jmp    1b\n+2:\n+        memset $r4,$r1,$r2\n \n         sub.l   $sp,$sp,24  # Space for the caller argument frame\n         call    main\n \n-.equ EXITEXIT    , 0x1fffc\n+.equ EXITEXIT,0x1fffc\n \n .global _exit\n _exit:\n         sta.l   EXITEXIT,$r0    # simulator end of test\n         jmp     _exithook\n \n-_watchdog_isr:\n-        ldk.l   $sp, 0x80FFFF   # Reset the stack pointer so it doesn't grow to a huge size\n-        jmp     0\n-\n # Macro to construct the interrupt stub code.\n # it just saves r0, loads r0 with the int vector\n # and branches to interrupt_common."}]}