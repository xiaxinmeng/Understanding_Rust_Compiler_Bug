{"sha": "7f166d94478f406bc59ed40d9ff24c9d98f30c90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YxNjZkOTQ0NzhmNDA2YmM1OWVkNDBkOWZmMjRjOWQ5OGYzMGM5MA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-03-17T15:01:56Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-03-17T15:01:56Z"}, "message": "re PR tree-optimization/71437 (Performance regression after r235817)\n\n\tPR tree-optimization/71437\n\t* tree-vrp.c (simplify_stmt_for_jump_threading): Lookup the\n\tconditional in the hash table first.\n\t(vrp_dom_walker::before_dom_children): Extract condition from\n\tASSERT_EXPR.  Record condition, its inverion and any implied\n\tconditions as well.\n\n\tPR tree-optimization/71437\n\t* gcc.dg/tree-ssa/pr71437.c: New test.\n\t* gcc.dg/tree-ssa/20040305-1.c: Test earlier dump.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-4.c: Adjust for jump threads\n\tnow caught by VRP, but which were previously caught by DOM.\n\nFrom-SVN: r246225", "tree": {"sha": "bafecb847a08eb5bb194630c81535b709ace0748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bafecb847a08eb5bb194630c81535b709ace0748"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f166d94478f406bc59ed40d9ff24c9d98f30c90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f166d94478f406bc59ed40d9ff24c9d98f30c90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f166d94478f406bc59ed40d9ff24c9d98f30c90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f166d94478f406bc59ed40d9ff24c9d98f30c90/comments", "author": null, "committer": null, "parents": [{"sha": "faec5f24736ac2550ef9c4080200edb20d2b1e22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faec5f24736ac2550ef9c4080200edb20d2b1e22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faec5f24736ac2550ef9c4080200edb20d2b1e22"}], "stats": {"total": 95, "additions": 86, "deletions": 9}, "files": [{"sha": "71bebcf9fb3de1263839959e37038adf122013df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f166d94478f406bc59ed40d9ff24c9d98f30c90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f166d94478f406bc59ed40d9ff24c9d98f30c90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f166d94478f406bc59ed40d9ff24c9d98f30c90", "patch": "@@ -1,3 +1,12 @@\n+2017-03-17  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/71437\n+\t* tree-vrp.c (simplify_stmt_for_jump_threading): Lookup the\n+\tconditional in the hash table first.\n+\t(vrp_dom_walker::before_dom_children): Extract condition from\n+\tASSERT_EXPR.  Record condition, its inverion and any implied\n+\tconditions as well.\n+\n 2017-03-17  Marek Polacek  <polacek@redhat.com>\n \t    Markus Trippelsdorf  <markus@trippelsdorf.de>\n "}, {"sha": "ab4a49d5ffa46acc7e7a8aac54fab7e2f83a8756", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f166d94478f406bc59ed40d9ff24c9d98f30c90/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f166d94478f406bc59ed40d9ff24c9d98f30c90/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f166d94478f406bc59ed40d9ff24c9d98f30c90", "patch": "@@ -1,3 +1,11 @@\n+2017-03-17  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/71437\n+\t* gcc.dg/tree-ssa/pr71437.c: New test.\n+\t* gcc.dg/tree-ssa/20040305-1.c: Test earlier dump.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-4.c: Adjust for jump threads\n+\tnow caught by VRP, but which were previously caught by DOM.\n+\n 2017-03-17  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/80075"}, {"sha": "10935293476cb79cc5c030adb4c6a9625a099cc3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040305-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f166d94478f406bc59ed40d9ff24c9d98f30c90/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040305-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f166d94478f406bc59ed40d9ff24c9d98f30c90/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040305-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040305-1.c?ref=7f166d94478f406bc59ed40d9ff24c9d98f30c90", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-cddce3 -fdump-tree-forwprop1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-dce2 -fdump-tree-forwprop1-details\" } */\n   \n int abarney[2];\n int afred[1];\n@@ -25,6 +25,6 @@ void foo(int edx, int eax)\n /* Verify that we did a forward propagation.  */\n /* { dg-final { scan-tree-dump-times \"gimple_simplified\" 1 \"forwprop1\"} } */\n \n-/* After cddce we should have two IF statements remaining as the other\n+/* After dce we should have two IF statements remaining as the other\n    two tests can be threaded.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 2 \"cddce3\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 2 \"dce2\"} } */"}, {"sha": "66a540532708fe449e8b5c3154d30582ee9c474b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr71437.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f166d94478f406bc59ed40d9ff24c9d98f30c90/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71437.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f166d94478f406bc59ed40d9ff24c9d98f30c90/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71437.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71437.c?ref=7f166d94478f406bc59ed40d9ff24c9d98f30c90", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-ffast-math -O3 -fdump-tree-vrp1-details\" } */\n+\n+int I = 50, J = 50;\n+int S, L;\n+const int *pL;\n+const int *pS;\n+\n+void bar (float, float);\n+\n+void foo (int K)\n+{\n+  int k, i, j;\n+  static float LD, SD;\n+  for (k = 0 ; k < K; k++)\n+    {\n+        for( i = 0 ; i < ( I - 1 ) ; i++ )\n+        {\n+            if( ( L < pL[i+1] ) && ( L >= pL[i] ) )\n+              break ;\n+        }\n+\n+        if( i == ( I - 1 ) )\n+          L = pL[i] ;\n+        LD = (float)( L - pL[i] ) /\n+                        (float)( pL[i + 1] - pL[i] ) ;\n+\n+        for( j = 0 ; j < ( J-1 ) ; j++ )\n+        {\n+            if( ( S < pS[j+1] ) && ( S >= pS[j] ) )\n+              break ;\n+        }\n+\n+        if( j == ( J - 1 ) )\n+          S = pS[j] ;\n+        SD = (float)( S - pS[j] ) /\n+                         (float)( pS[j + 1] - pS[j] ) ;\n+\n+\tbar (LD, SD);\n+    }\n+}\n+/* { dg-final { scan-tree-dump-times \"Threaded jump \" 2 \"vrp1\" } } */"}, {"sha": "ed76e8119adc3d3cc1ea28e0dfed3ab9536618e7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-4.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f166d94478f406bc59ed40d9ff24c9d98f30c90/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f166d94478f406bc59ed40d9ff24c9d98f30c90/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c?ref=7f166d94478f406bc59ed40d9ff24c9d98f30c90", "patch": "@@ -57,8 +57,13 @@ bitmap_ior_and_compl (bitmap dst, const_bitmap a, const_bitmap b,\n    we should thread all three, but due to a bug in the threading\n    code we missed the edge when the first conditional is false\n    (b_elt is zero, which means the second conditional is always\n-   zero.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded\" 3 \"dom2\" { target { ! logical_op_short_circuit } } } } */\n+   zero.  \n+\n+   The first two are caught by VRP1, the last is caught by DOM\n+   along with another jump thread.  */\n+/* { dg-final { scan-tree-dump-times \"Threaded\" 2 \"vrp1\" { target { ! logical_op_short_circuit } } } } */\n+/* { dg-final { scan-tree-dump-times \"Threaded\" 2 \"dom2\" { target { ! logical_op_short_circuit } } } } */\n+\n /* On targets that define LOGICAL_OP_NON_SHORT_CIRCUIT to 0, we split both\n    \"a_elt || b_elt\" and \"b_elt && kill_elt\" into two conditions each,\n    rather than using \"(var1 != 0) op (var2 != 0)\".  Also, as on other targets,\n@@ -76,7 +81,6 @@ bitmap_ior_and_compl (bitmap dst, const_bitmap a, const_bitmap b,\n \t skipping the known-true \"b_elt && kill_elt\" in the second\n \t condition.\n \n-   The !b_elt cases are picked up by VRP1 as jump threads.  The others\n-   are optimized by DOM.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded\" 2 \"vrp1\" { target logical_op_short_circuit } } } */\n+   All the cases are picked up by VRP1 as jump threads.  */\n+/* { dg-final { scan-tree-dump-times \"Threaded\" 4 \"vrp1\" { target logical_op_short_circuit } } } */\n "}, {"sha": "26652e3b048a5fa8dbeb400f73f37748f2408d3f", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f166d94478f406bc59ed40d9ff24c9d98f30c90/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f166d94478f406bc59ed40d9ff24c9d98f30c90/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=7f166d94478f406bc59ed40d9ff24c9d98f30c90", "patch": "@@ -10783,6 +10783,11 @@ simplify_stmt_for_jump_threading (gimple *stmt, gimple *within_stmt,\n     class avail_exprs_stack *avail_exprs_stack ATTRIBUTE_UNUSED,\n     basic_block bb)\n {\n+  /* First see if the conditional is in the hash table.  */\n+  tree cached_lhs = avail_exprs_stack->lookup_avail_expr (stmt, false, true);\n+  if (cached_lhs && is_gimple_min_invariant (cached_lhs))\n+    return cached_lhs;\n+\n   if (gcond *cond_stmt = dyn_cast <gcond *> (stmt))\n     {\n       tree op0 = gimple_cond_lhs (cond_stmt);\n@@ -10915,10 +10920,19 @@ vrp_dom_walker::before_dom_children (basic_block bb)\n       if (gimple_assign_single_p (stmt)\n          && TREE_CODE (gimple_assign_rhs1 (stmt)) == ASSERT_EXPR)\n \t{\n-\t  tree lhs = gimple_assign_lhs (stmt);\n \t  tree rhs1 = gimple_assign_rhs1 (stmt);\n+\t  tree cond = TREE_OPERAND (rhs1, 1);\n+\t  tree inverted = invert_truthvalue (cond);\n+\t  vec<cond_equivalence> p;\n+\t  p.create (3);\n+\t  record_conditions (&p, cond, inverted);\n+\t  for (unsigned int i = 0; i < p.length (); i++)\n+\t    m_avail_exprs_stack->record_cond (&p[i]);\n+\n+\t  tree lhs = gimple_assign_lhs (stmt);\n \t  m_const_and_copies->record_const_or_copy (lhs,\n \t\t\t\t\t\t    TREE_OPERAND (rhs1, 0));\n+\t  p.release ();\n \t  continue;\n \t}\n       break;"}]}