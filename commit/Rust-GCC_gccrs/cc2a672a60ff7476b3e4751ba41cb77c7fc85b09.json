{"sha": "cc2a672a60ff7476b3e4751ba41cb77c7fc85b09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MyYTY3MmE2MGZmNzQ3NmIzZTQ3NTFiYTQxY2I3N2M3ZmM4NWIwOQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-05-02T08:43:25Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-05-02T08:43:25Z"}, "message": "Enhance target and target_clone error messages.\n\n2019-05-02  Martin Liska  <mliska@suse.cz>\n\n\t* cgraphclones.c: Call valid_attribute_p with 1 for\n\ttarget_clone.\n\t* config/i386/i386-c.c (ix86_pragma_target_parse): Use 0 as\n\tit's for target attribute.\n\t* config/i386/i386-protos.h (ix86_valid_target_attribute_tree):\n\tAdd new boolean argument.\n\t* config/i386/i386.c (ix86_valid_target_attribute_inner_p):\n\tLikewise.\n\t(ix86_valid_target_attribute_tree): Pass target_clone_attr\n\tto ix86_valid_target_attribute_inner_p.\n\t(ix86_valid_target_attribute_p): Pass flags argument to\n\tix86_valid_target_attribute_inner_p.\n\t(get_builtin_code_for_version): Use 0 as it's target attribute.\n2019-05-02  Martin Liska  <mliska@suse.cz>\n\n\t* gcc.target/i386/funcspec-4.c: Update scanned pattern.\n\t* g++.target/i386/pr57362.C: Likewise.\n\nFrom-SVN: r270789", "tree": {"sha": "535133224f484fcbf189c5d0ecba02acc7e9f9ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/535133224f484fcbf189c5d0ecba02acc7e9f9ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc2a672a60ff7476b3e4751ba41cb77c7fc85b09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc2a672a60ff7476b3e4751ba41cb77c7fc85b09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc2a672a60ff7476b3e4751ba41cb77c7fc85b09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc2a672a60ff7476b3e4751ba41cb77c7fc85b09/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2dcfc8722b6146e479039a2f8994050c772b25e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dcfc8722b6146e479039a2f8994050c772b25e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dcfc8722b6146e479039a2f8994050c772b25e6"}], "stats": {"total": 90, "additions": 62, "deletions": 28}, "files": [{"sha": "e99c6a1158926c9015811408df00a9191dc23cab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2a672a60ff7476b3e4751ba41cb77c7fc85b09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2a672a60ff7476b3e4751ba41cb77c7fc85b09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc2a672a60ff7476b3e4751ba41cb77c7fc85b09", "patch": "@@ -1,3 +1,19 @@\n+2019-05-02  Martin Liska  <mliska@suse.cz>\n+\n+\t* cgraphclones.c: Call valid_attribute_p with 1 for\n+\ttarget_clone.\n+\t* config/i386/i386-c.c (ix86_pragma_target_parse): Use 0 as\n+\tit's for target attribute.\n+\t* config/i386/i386-protos.h (ix86_valid_target_attribute_tree):\n+\tAdd new boolean argument.\n+\t* config/i386/i386.c (ix86_valid_target_attribute_inner_p):\n+\tLikewise.\n+\t(ix86_valid_target_attribute_tree): Pass target_clone_attr\n+\tto ix86_valid_target_attribute_inner_p.\n+\t(ix86_valid_target_attribute_p): Pass flags argument to\n+\tix86_valid_target_attribute_inner_p.\n+\t(get_builtin_code_for_version): Use 0 as it's target attribute.\n+\n 2019-05-02  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.c (process_command): Add dummy file only"}, {"sha": "fd867ecac91a15fd7d8ef4559c3d5de8ccb72e23", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2a672a60ff7476b3e4751ba41cb77c7fc85b09/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2a672a60ff7476b3e4751ba41cb77c7fc85b09/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=cc2a672a60ff7476b3e4751ba41cb77c7fc85b09", "patch": "@@ -1056,7 +1056,7 @@ cgraph_node::create_version_clone_with_body\n       location_t saved_loc = input_location;\n       tree v = TREE_VALUE (target_attributes);\n       input_location = DECL_SOURCE_LOCATION (new_decl);\n-      bool r = targetm.target_option.valid_attribute_p (new_decl, NULL, v, 0);\n+      bool r = targetm.target_option.valid_attribute_p (new_decl, NULL, v, 1);\n       input_location = saved_loc;\n       if (!r)\n \treturn NULL;"}, {"sha": "50cac3b1a9f4f59fe3ed00cc93f308588f485164", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2a672a60ff7476b3e4751ba41cb77c7fc85b09/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2a672a60ff7476b3e4751ba41cb77c7fc85b09/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=cc2a672a60ff7476b3e4751ba41cb77c7fc85b09", "patch": "@@ -586,8 +586,9 @@ ix86_pragma_target_parse (tree args, tree pop_target)\n     }\n   else\n     {\n-      cur_tree = ix86_valid_target_attribute_tree (args, &global_options,\n-\t\t\t\t\t\t   &global_options_set);\n+      cur_tree = ix86_valid_target_attribute_tree (NULL_TREE, args,\n+\t\t\t\t\t\t   &global_options,\n+\t\t\t\t\t\t   &global_options_set, 0);\n       if (!cur_tree || cur_tree == error_mark_node)\n        {\n          cl_target_option_restore (&global_options,"}, {"sha": "597af643eb85e84b501bec8c059dec7a0ee022c7", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2a672a60ff7476b3e4751ba41cb77c7fc85b09/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2a672a60ff7476b3e4751ba41cb77c7fc85b09/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=cc2a672a60ff7476b3e4751ba41cb77c7fc85b09", "patch": "@@ -215,9 +215,9 @@ extern unsigned int ix86_minimum_alignment (tree, machine_mode,\n extern tree ix86_handle_shared_attribute (tree *, tree, tree, int, bool *);\n extern tree ix86_handle_selectany_attribute (tree *, tree, tree, int, bool *);\n extern int x86_field_alignment (tree, int);\n-extern tree ix86_valid_target_attribute_tree (tree,\n+extern tree ix86_valid_target_attribute_tree (tree, tree,\n \t\t\t\t\t      struct gcc_options *,\n-\t\t\t\t\t      struct gcc_options *);\n+\t\t\t\t\t      struct gcc_options *, bool);\n extern unsigned int ix86_get_callcvt (const_tree);\n \n #endif"}, {"sha": "bc2348c3bc7716cbc64639d07d85f1bf78ef3e92", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2a672a60ff7476b3e4751ba41cb77c7fc85b09/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2a672a60ff7476b3e4751ba41cb77c7fc85b09/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=cc2a672a60ff7476b3e4751ba41cb77c7fc85b09", "patch": "@@ -847,10 +847,11 @@ static void ix86_function_specific_post_stream_in (struct cl_target_option *);\n static void ix86_function_specific_print (FILE *, int,\n \t\t\t\t\t  struct cl_target_option *);\n static bool ix86_valid_target_attribute_p (tree, tree, tree, int);\n-static bool ix86_valid_target_attribute_inner_p (tree, char *[],\n+static bool ix86_valid_target_attribute_inner_p (tree, tree, char *[],\n \t\t\t\t\t\t struct gcc_options *,\n \t\t\t\t\t\t struct gcc_options *,\n-\t\t\t\t\t\t struct gcc_options *);\n+\t\t\t\t\t\t struct gcc_options *,\n+\t\t\t\t\t\t bool);\n static bool ix86_can_inline_p (tree, tree);\n static void ix86_set_current_function (tree);\n static unsigned int ix86_minimum_incoming_stack_boundary (bool);\n@@ -5149,10 +5150,11 @@ ix86_function_specific_print (FILE *file, int indent,\n    over the list.  */\n \n static bool\n-ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n+ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n \t\t\t\t     struct gcc_options *opts,\n \t\t\t\t     struct gcc_options *opts_set,\n-\t\t\t\t     struct gcc_options *enum_opts_set)\n+\t\t\t\t     struct gcc_options *enum_opts_set,\n+\t\t\t\t     bool target_clone_attr)\n {\n   char *next_optstr;\n   bool ret = true;\n@@ -5296,27 +5298,31 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_YES (\"recip\",\n \t\t   OPT_mrecip,\n \t\t   MASK_RECIP),\n-\n   };\n \n+  location_t loc\n+    = fndecl == NULL ? UNKNOWN_LOCATION : DECL_SOURCE_LOCATION (fndecl);\n+  const char *attr_name = target_clone_attr ? \"target_clone\" : \"target\";\n+\n   /* If this is a list, recurse to get the options.  */\n   if (TREE_CODE (args) == TREE_LIST)\n     {\n       bool ret = true;\n \n       for (; args; args = TREE_CHAIN (args))\n \tif (TREE_VALUE (args)\n-\t    && !ix86_valid_target_attribute_inner_p (TREE_VALUE (args),\n+\t    && !ix86_valid_target_attribute_inner_p (fndecl, TREE_VALUE (args),\n \t\t\t\t\t\t     p_strings, opts, opts_set,\n-\t\t\t\t\t\t     enum_opts_set))\n+\t\t\t\t\t\t     enum_opts_set,\n+\t\t\t\t\t\t     target_clone_attr))\n \t  ret = false;\n \n       return ret;\n     }\n \n   else if (TREE_CODE (args) != STRING_CST)\n     {\n-      error (\"attribute %<target%> argument not a string\");\n+      error_at (loc, \"attribute %qs argument is not a string\", attr_name);\n       return false;\n     }\n \n@@ -5328,7 +5334,6 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n       char *p = next_optstr;\n       char *orig_p = p;\n       char *comma = strchr (next_optstr, ',');\n-      const char *opt_string;\n       size_t len, opt_len;\n       int opt;\n       bool opt_set_p;\n@@ -5374,15 +5379,15 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n \t    {\n \t      opt = attrs[i].opt;\n \t      mask = attrs[i].mask;\n-\t      opt_string = attrs[i].string;\n \t      break;\n \t    }\n \t}\n \n       /* Process the option.  */\n       if (opt == N_OPTS)\n \t{\n-\t  error (\"attribute(target(\\\"%s\\\")) is unknown\", orig_p);\n+\t  error_at (loc, \"attribute %qs argument %qs is unknown\",\n+\t\t    orig_p, attr_name);\n \t  ret = false;\n \t}\n \n@@ -5410,7 +5415,8 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n \t{\n \t  if (p_strings[opt])\n \t    {\n-\t      error (\"option(\\\"%s\\\") was already specified\", opt_string);\n+\t      error_at (loc, \"attribute value %qs was already specified \"\n+\t\t\t\"in %qs attribute\", orig_p, attr_name);\n \t      ret = false;\n \t    }\n \t  else\n@@ -5429,7 +5435,8 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n \t\t\tglobal_dc);\n \t  else\n \t    {\n-\t      error (\"attribute(target(\\\"%s\\\")) is unknown\", orig_p);\n+\t      error_at (loc, \"attribute value %qs is unknown in %qs attribute\",\n+\t\t\torig_p, attr_name);\n \t      ret = false;\n \t    }\n \t}\n@@ -5453,9 +5460,10 @@ release_options_strings (char **option_strings)\n /* Return a TARGET_OPTION_NODE tree of the target options listed or NULL.  */\n \n tree\n-ix86_valid_target_attribute_tree (tree args,\n+ix86_valid_target_attribute_tree (tree fndecl, tree args,\n \t\t\t\t  struct gcc_options *opts,\n-\t\t\t\t  struct gcc_options *opts_set)\n+\t\t\t\t  struct gcc_options *opts_set,\n+\t\t\t\t  bool target_clone_attr)\n {\n   const char *orig_arch_string = opts->x_ix86_arch_string;\n   const char *orig_tune_string = opts->x_ix86_tune_string;\n@@ -5471,8 +5479,9 @@ ix86_valid_target_attribute_tree (tree args,\n   memset (&enum_opts_set, 0, sizeof (enum_opts_set));\n \n   /* Process each of the options on the chain.  */\n-  if (! ix86_valid_target_attribute_inner_p (args, option_strings, opts,\n-\t\t\t\t\t     opts_set, &enum_opts_set))\n+  if (!ix86_valid_target_attribute_inner_p (fndecl, args, option_strings, opts,\n+\t\t\t\t\t    opts_set, &enum_opts_set,\n+\t\t\t\t\t    target_clone_attr))\n     return error_mark_node;\n \n   /* If the changed options are different from the default, rerun\n@@ -5545,7 +5554,7 @@ static bool\n ix86_valid_target_attribute_p (tree fndecl,\n \t\t\t       tree ARG_UNUSED (name),\n \t\t\t       tree args,\n-\t\t\t       int ARG_UNUSED (flags))\n+\t\t\t       int flags)\n {\n   struct gcc_options func_options;\n   tree new_target, new_optimize;\n@@ -5580,8 +5589,10 @@ ix86_valid_target_attribute_p (tree fndecl,\n   cl_target_option_restore (&func_options,\n \t\t\t    TREE_TARGET_OPTION (target_option_default_node));\n \n-  new_target = ix86_valid_target_attribute_tree (args, &func_options,\n-\t\t\t\t\t\t &global_options_set);\n+  /* FLAGS == 1 is used for target_clones attribute.  */\n+  new_target\n+    = ix86_valid_target_attribute_tree (fndecl, args, &func_options,\n+\t\t\t\t\t&global_options_set, flags == 1);\n \n   new_optimize = build_optimization_node (&func_options);\n \n@@ -32071,8 +32082,9 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n   if (strstr (attrs_str, \"arch=\") != NULL)\n     {\n       cl_target_option_save (&cur_target, &global_options);\n-      target_node = ix86_valid_target_attribute_tree (attrs, &global_options,\n-\t\t\t\t\t\t      &global_options_set);\n+      target_node\n+\t= ix86_valid_target_attribute_tree (decl, attrs, &global_options,\n+\t\t\t\t\t    &global_options_set, 0);\n     \n       gcc_assert (target_node);\n       if (target_node == error_mark_node)"}, {"sha": "851993426150785f81d23f55d905b8f5cb198bc3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2a672a60ff7476b3e4751ba41cb77c7fc85b09/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2a672a60ff7476b3e4751ba41cb77c7fc85b09/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc2a672a60ff7476b3e4751ba41cb77c7fc85b09", "patch": "@@ -1,3 +1,8 @@\n+2019-05-02  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.target/i386/funcspec-4.c: Update scanned pattern.\n+\t* g++.target/i386/pr57362.C: Likewise.\n+\n 2019-05-02  Martin Liska  <mliska@suse.cz>\n \n \tPR target/88809"}, {"sha": "e345acdef1761e272a8d415312ca0a01b89379f2", "filename": "gcc/testsuite/gcc.target/i386/funcspec-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2a672a60ff7476b3e4751ba41cb77c7fc85b09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2a672a60ff7476b3e4751ba41cb77c7fc85b09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-4.c?ref=cc2a672a60ff7476b3e4751ba41cb77c7fc85b09", "patch": "@@ -5,7 +5,7 @@\n extern void error1 (void) __attribute__((__target__(\"fma400\"))); /* { dg-error \"unknown\" } */\n \n /* Multiple arch switches */\n-extern void error2 (void) __attribute__((__target__(\"arch=core2,arch=k8\"))); /* { dg-error \"already specified\" } */\n+extern void error2 (void) __attribute__((__target__(\"arch=core2,arch=k8\"))); /* { dg-error \"attribute value 'arch=k8' was already specified in 'target' attribute\" } */\n \n /* Unknown tune target */\n extern void error3 (void) __attribute__((__target__(\"tune=foobar\"))); /* { dg-error \"bad value\" } */"}]}