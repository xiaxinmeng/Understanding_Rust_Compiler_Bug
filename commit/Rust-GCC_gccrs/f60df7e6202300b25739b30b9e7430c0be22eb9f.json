{"sha": "f60df7e6202300b25739b30b9e7430c0be22eb9f", "node_id": "C_kwDOANBUbNoAKGY2MGRmN2U2MjAyMzAwYjI1NzM5YjMwYjllNzQzMGMwYmUyMmViOWY", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-23T15:00:51Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-12-13T13:00:03Z"}, "message": "gccrs: Add link cases testsuite\n\nThis testsuite is heavily inspired from the LTO testsuite that uses a\npattern where each file is compiled to an object file and finally linked\ntogether. Since Rust does not have headers/prototypes, we rely on the\nordering here so that all files numbered greater than zero get compiled to\nobject files first. This leaves the _0 file free to test the 'extern crate' and\n'use' keywords to force testing of the compiler to read metadata from the\nother 'crates'.\n\n\tgcc/testsuite/\n\t* rust/link/generic_function_0.rs: New.\n\t* rust/link/generic_function_1.rs: New.\n\t* rust/link/link.exp: New.\n\t* rust/link/simple_function_0.rs: New.\n\t* rust/link/simple_function_1.rs: New.\n\t* rust/link/trait_import_0.rs: New.\n\t* rust/link/trait_import_1.rs: New.", "tree": {"sha": "ee0ff858c4e3851726c92ad2d5e813bedddadfc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee0ff858c4e3851726c92ad2d5e813bedddadfc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f60df7e6202300b25739b30b9e7430c0be22eb9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f60df7e6202300b25739b30b9e7430c0be22eb9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f60df7e6202300b25739b30b9e7430c0be22eb9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f60df7e6202300b25739b30b9e7430c0be22eb9f/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b8f3005af0ddfd409f43e671b817f846e3c47e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8f3005af0ddfd409f43e671b817f846e3c47e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b8f3005af0ddfd409f43e671b817f846e3c47e4"}], "stats": {"total": 218, "additions": 218, "deletions": 0}, "files": [{"sha": "58b8eb13db66ae52a4178327eef0c34b80513246", "filename": "gcc/testsuite/rust/link/generic_function_0.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60df7e6202300b25739b30b9e7430c0be22eb9f/gcc%2Ftestsuite%2Frust%2Flink%2Fgeneric_function_0.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60df7e6202300b25739b30b9e7430c0be22eb9f/gcc%2Ftestsuite%2Frust%2Flink%2Fgeneric_function_0.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Flink%2Fgeneric_function_0.rs?ref=f60df7e6202300b25739b30b9e7430c0be22eb9f", "patch": "@@ -0,0 +1,7 @@\n+extern crate generic_function_1;\n+use generic_function_1::generic_function;\n+\n+fn main() -> i32 {\n+    let a = generic_function(123);\n+    a - 123\n+}"}, {"sha": "8fb0788e388eea037b55c29e33210982a1559d0c", "filename": "gcc/testsuite/rust/link/generic_function_1.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60df7e6202300b25739b30b9e7430c0be22eb9f/gcc%2Ftestsuite%2Frust%2Flink%2Fgeneric_function_1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60df7e6202300b25739b30b9e7430c0be22eb9f/gcc%2Ftestsuite%2Frust%2Flink%2Fgeneric_function_1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Flink%2Fgeneric_function_1.rs?ref=f60df7e6202300b25739b30b9e7430c0be22eb9f", "patch": "@@ -0,0 +1,3 @@\n+pub fn generic_function<X>(a: X) -> X {\n+    a\n+}"}, {"sha": "8b2e93ceab614bc8ad5c14e9771a5cd459191979", "filename": "gcc/testsuite/rust/link/link.exp", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60df7e6202300b25739b30b9e7430c0be22eb9f/gcc%2Ftestsuite%2Frust%2Flink%2Flink.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60df7e6202300b25739b30b9e7430c0be22eb9f/gcc%2Ftestsuite%2Frust%2Flink%2Flink.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Flink%2Flink.exp?ref=f60df7e6202300b25739b30b9e7430c0be22eb9f", "patch": "@@ -0,0 +1,172 @@\n+# Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Execute tests, torture testing.\n+\n+# Load support procs.\n+load_lib rust-dg.exp\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+set saved-dg-do-what-default ${dg-do-what-default}\n+\n+set dg-do-what-default \"assemble\"\n+\n+# rs-obj -- compile to an object file\n+#\n+# SOURCE is the source file\n+# DEST is the object file\n+# OPTALL is the list of compiler options to use with all tests\n+# OPTFILE is the list of compiler options to use with this file\n+# OPTSTR is the options to print with test messages\n+# XFAILDATA is the xfail data to be passed to the compiler\n+proc rs-obj { source dest optall optfile optstr xfaildata } {\n+    global tool\n+    global compiler_conditional_xfail_data\n+\n+    # Set up the options for compiling this file.\n+    set options \"\"\n+    lappend options \"additional_flags=$optall $optfile\"\n+\n+    set compiler_conditional_xfail_data $xfaildata\n+    set comp_output [${tool}_target_compile \"$source\" \"$dest\" object $options]\n+}\n+\n+# rs-execute -- compile multi-file tests\n+#\n+# SRC1 is the full pathname of the main file of the testcase.\n+# SID identifies a test suite in the names of temporary files.\n+proc rs-execute-1 { src1 } {\n+    global srcdir tmpdir\n+    \n+    # Get extra flags for this test from the primary source file, and\n+    # process other dg-* options that this suite supports.  Warn about\n+    # unsupported flags.\n+    verbose \"rs-execute: $src1\" 1\n+    set compile_type \"run\"\n+    set compile_xfail(0) \"\" \n+\n+    # Set up the names of the other source files.\n+    set dir [file dirname $src1]\n+    set base [file rootname $src1]\n+    set base [string range $base [string length $dir] end]\n+    regsub \"_0\" $base \"\" base\n+    regsub \"/\" $base \"\" base\n+    set src_list $src1\n+    set i 1\n+    set done 0\n+    while { !$done } {\n+\tset names [glob -nocomplain -types f -- \"${dir}/${base}_${i}.*\"]\n+\tif { [llength ${names}] > 1 } {\n+\t    warning \"rs-link-execute: more than one file matched ${dir}/${base}_${i}.*\"\n+\t}\n+\tif { [llength ${names}] == 1 } {\n+\t    lappend src_list [lindex ${names} 0]\n+\t    incr i\n+\t} else {\n+\t    set num_srcs ${i}\n+\t    set done 1\n+\t}\n+    }\n+\n+\n+    # Define the names of the object files.\n+    set obj_list \"\"\n+    for {set i 0} {$i < $num_srcs} {incr i} {\n+\tlappend obj_list \"${base}_${i}.o\"\n+    }\n+\n+    # Get the base name of this test, for use in messages.\n+    set testcase [lindex ${src_list} 0]\n+\n+    # Remove the $srcdir and $tmpdir prefixes from $src1.  (It would\n+    # be possible to use \"regsub\" here, if we were careful to escape\n+    # all regular expression characters in $srcdir and $tmpdir, but\n+    # that would be more complicated that this approach.) \n+    if {[string first \"$srcdir/\" \"${testcase}\"] == 0} {\n+\tset testcase [string range \"${testcase}\" [string length \"$srcdir/\"] end]\n+    }\n+    if {[string first \"$tmpdir/\" \"$testcase\"] == 0} {\n+\tset testcase [string range \"$testcase\" [string length \"$tmpdir/\"] end]\n+\tset testcase \"tmpdir-$testcase\"\n+    }\n+    # If we couldn't rip $srcdir out of `src1' then just do the best we can.\n+    # The point is to reduce the unnecessary noise in the logs.  Don't strip\n+    # out too much because different testcases with the same name can confuse\n+    # `test-tool'.\n+    if [string match \"/*\" $testcase] then {\n+        set testcase \"[file tail [file dirname $src1]]/[file tail $src1]\"\n+    }\n+\n+    # Set up the base name of executable files so they'll be unique.\n+    regsub -all \"\\[./\\]\" $testcase \"-\" execbase\n+\n+    verbose \"Testing $testcase - $obj_list - $src_list\"\n+    \n+    # There's a unique name for each executable we generate.\n+    set execname \"${execbase}-1.exe\"\n+\n+    # The LTO tests don't use dg-test, so testname_with_flags and\n+    # output_file need to be defined explicitly for each file.  scan-symbol\n+    # directives rely on both of these to be defined to find the symbol to\n+    # scan and for the text to print in the PASS/FAIL since they can also\n+    # be called from dg-test.  testname_with_flags is also used via\n+    # testname-for-summary when calling into generic function below to\n+    # clean temporary files.\n+    set output_file $execname\n+    set testname_with_flags $execname\n+\n+    file_on_host delete $execname\n+    \n+    rs-obj [lindex ${src_list} 1] [lindex ${obj_list} 1] \"\" \"\" \"\" \"\"\n+    rs-obj [lindex ${src_list} 0] [lindex ${obj_list} 0] \"\" \"\" \"\" \"\"\n+\n+    gcc-dg-runtest [lindex ${src_list} 0] \"\" \"\"\n+\n+    # FIXME it would be ideal if we could link then execute these tests.\n+    # I was not able to figure out how to specify gc-dg-runtest to link\n+    # against the first object.\n+}\n+\n+proc rs-link-execute { src1 } {\n+    rs-execute-1 $src1\n+}\n+\n+# Main loop.\n+foreach src [lsort [find $srcdir/$subdir *_0.rs]] {\n+    # If we're only testing specific files and this isn't one of them, skip it.\n+    if ![runtest_file_p $runtests $src] then {\n+\tcontinue\n+    }\n+\n+    # To prevent 'runtest_file_p' being tested again (for example, via\n+    # 'gcc-dg-runtest'), with undesirable consequences due to its side effects,\n+    # interpose a dummy:\n+    rename runtest_file_p saved_runtest_file_p\n+    proc runtest_file_p { runtests testcase } {\n+\treturn 1\n+    }\n+    rs-link-execute $src\n+    rename runtest_file_p {}\n+    rename saved_runtest_file_p runtest_file_p\n+}\n+\n+set dg-do-what-default ${saved-dg-do-what-default}\n+\n+# All done.\n+dg-finish"}, {"sha": "5bd4926def85a07ab7e450454d8635ab11f2c9ec", "filename": "gcc/testsuite/rust/link/simple_function_0.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60df7e6202300b25739b30b9e7430c0be22eb9f/gcc%2Ftestsuite%2Frust%2Flink%2Fsimple_function_0.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60df7e6202300b25739b30b9e7430c0be22eb9f/gcc%2Ftestsuite%2Frust%2Flink%2Fsimple_function_0.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Flink%2Fsimple_function_0.rs?ref=f60df7e6202300b25739b30b9e7430c0be22eb9f", "patch": "@@ -0,0 +1,8 @@\n+extern crate simple_function_1;\n+use simple_function_1::test_func;\n+\n+fn main() -> i32 {\n+    let a = test_func(123);\n+    // { dg-bogus \"call to extern function\" \"\" { xfail *-*-* } .-1 }\n+    a - 124\n+}"}, {"sha": "aaa1fc3936700a21176e8a46cd6f8c5577984df8", "filename": "gcc/testsuite/rust/link/simple_function_1.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60df7e6202300b25739b30b9e7430c0be22eb9f/gcc%2Ftestsuite%2Frust%2Flink%2Fsimple_function_1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60df7e6202300b25739b30b9e7430c0be22eb9f/gcc%2Ftestsuite%2Frust%2Flink%2Fsimple_function_1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Flink%2Fsimple_function_1.rs?ref=f60df7e6202300b25739b30b9e7430c0be22eb9f", "patch": "@@ -0,0 +1,3 @@\n+pub fn test_func(a: i32) -> i32 {\n+    a + 1\n+}"}, {"sha": "ac8c5811d22b40068fa9b462cfaa8b26f11edaf8", "filename": "gcc/testsuite/rust/link/trait_import_0.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60df7e6202300b25739b30b9e7430c0be22eb9f/gcc%2Ftestsuite%2Frust%2Flink%2Ftrait_import_0.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60df7e6202300b25739b30b9e7430c0be22eb9f/gcc%2Ftestsuite%2Frust%2Flink%2Ftrait_import_0.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Flink%2Ftrait_import_0.rs?ref=f60df7e6202300b25739b30b9e7430c0be22eb9f", "patch": "@@ -0,0 +1,19 @@\n+extern crate trait_import_1;\n+use trait_import_1::Add;\n+\n+struct Foo(i32);\n+\n+impl Add for Foo {\n+    type Output = Foo;\n+\n+    fn add(self, other: Foo) -> Foo {\n+        Foo(self.0 + other.0)\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a;\n+    a = Foo(1) + Foo(2);\n+\n+    0\n+}"}, {"sha": "fc7f5168ede14777d10de3bde7f2115ab553263d", "filename": "gcc/testsuite/rust/link/trait_import_1.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60df7e6202300b25739b30b9e7430c0be22eb9f/gcc%2Ftestsuite%2Frust%2Flink%2Ftrait_import_1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60df7e6202300b25739b30b9e7430c0be22eb9f/gcc%2Ftestsuite%2Frust%2Flink%2Ftrait_import_1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Flink%2Ftrait_import_1.rs?ref=f60df7e6202300b25739b30b9e7430c0be22eb9f", "patch": "@@ -0,0 +1,6 @@\n+#[lang = \"add\"]\n+pub trait Add<Rhs = Self> {\n+    type Output;\n+\n+    fn add(self, rhs: Rhs) -> Self::Output;\n+}"}]}