{"sha": "85be939ea97a39df3c15f2dac34da0cb1d55fc1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODViZTkzOWVhOTdhMzlkZjNjMTVmMmRhYzM0ZGEwY2IxZDU1ZmMxZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-28T13:37:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-28T13:37:44Z"}, "message": "[multiple changes]\n\n2017-04-28  Bob Duff  <duff@adacore.com>\n\n\t* sem_util.ads, sem_util.adb (Might_Raise): New function\n\tthat replaces Is_Exception_Safe, but has the opposite\n\tsense. Is_Exception_Safe was missing various cases -- calls inside\n\ta pragma Debug, calls inside an 'if' or assignment statement,\n\tetc. Might_Raise now walks the entire subtree looking for things\n\tthat can raise.\n\t* exp_ch9.adb (Is_Exception_Safe): Remove.\n\t(Build_Protected_Subprogram_Body): Replace call to\n\tIs_Exception_Safe with \"not Might_Raise\". Misc cleanup (use\n\tconstants where possible).\n\t* exp_ch7.adb: Rename Is_Protected_Body -->\n\tIs_Protected_Subp_Body. A protected_body is something different\n\tin the grammar.\n\n2017-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* inline.adb (Expand_Inlined_Call): Initialize Targ1 variable.\n\t* par-ch3.adb (P_Component_Items): Initialize Decl_Node variable.\n\t(P_Discrete_Choice_List): Initialize Expr_Node variable.\n\t* par-ch9.adb (P_Task): Initialize Aspect_Sloc variable.\n\t(P_Protected): Likewise.\n\t* sem_case.adb (Check_Duplicates):\n\tAdd pragma Warnings on variable.\n\t* sem_ch12.adb (Preanalyze_Actuals): Initialize Vis variable.\n\t* sem_ch4.adb (List_Operand_Interps):  Add pragma Warnings on variable.\n\t* sem_ch5.adb (Analyze_Assignment): Initialize Save_Full_Analysis.\n\t(Analyze_Exit_Statement): Initialize Scope_Id variable.\n\t(Analyze_Iterator_Specification): Initialize Bas variable.\n\t* sem_ch9.adb (Allows_Lock_Free_Implementation): Initialize\n\tError_Count (Satisfies_Lock_Free_Requirements): Likewise.\n\t(Analyze_Accept_Statement): Initialize Task_Nam.\n\n2017-04-28  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* checks.adb (Install_Primitive_Elaboration_Check):\n\tDo not generate an elaboration check if all checks have been\n\tsuppressed.\n\n2017-04-28  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Specifications, case\n\tInterrupt_Handler and Attach_Handler): Generate reference\n\tto protected operation to prevent spurious warnings about\n\tunreferenced entities. Previous scheme failed with style checks\n\tenabled.\n\n2017-04-28  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Relocate_Pragmas_To_Body): A pragma Warnings\n\tthat follows an expression function must not be relocated to\n\tthe generated body, because it applies to the code that follows.\n\nFrom-SVN: r247387", "tree": {"sha": "e9a6a25e4b62db2bbed549c618ac66f5348cbf9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9a6a25e4b62db2bbed549c618ac66f5348cbf9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85be939ea97a39df3c15f2dac34da0cb1d55fc1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85be939ea97a39df3c15f2dac34da0cb1d55fc1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85be939ea97a39df3c15f2dac34da0cb1d55fc1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/comments", "author": null, "committer": null, "parents": [{"sha": "99f8abb6afb37c687776b61eedd8fd6b62c71b76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f8abb6afb37c687776b61eedd8fd6b62c71b76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99f8abb6afb37c687776b61eedd8fd6b62c71b76"}], "stats": {"total": 372, "additions": 200, "deletions": 172}, "files": [{"sha": "a52d9b460cf10ca81f4b1518d1c17fc5dc43bd2b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=85be939ea97a39df3c15f2dac34da0cb1d55fc1d", "patch": "@@ -1,3 +1,57 @@\n+2017-04-28  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Might_Raise): New function\n+\tthat replaces Is_Exception_Safe, but has the opposite\n+\tsense. Is_Exception_Safe was missing various cases -- calls inside\n+\ta pragma Debug, calls inside an 'if' or assignment statement,\n+\tetc. Might_Raise now walks the entire subtree looking for things\n+\tthat can raise.\n+\t* exp_ch9.adb (Is_Exception_Safe): Remove.\n+\t(Build_Protected_Subprogram_Body): Replace call to\n+\tIs_Exception_Safe with \"not Might_Raise\". Misc cleanup (use\n+\tconstants where possible).\n+\t* exp_ch7.adb: Rename Is_Protected_Body -->\n+\tIs_Protected_Subp_Body. A protected_body is something different\n+\tin the grammar.\n+\n+2017-04-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* inline.adb (Expand_Inlined_Call): Initialize Targ1 variable.\n+\t* par-ch3.adb (P_Component_Items): Initialize Decl_Node variable.\n+\t(P_Discrete_Choice_List): Initialize Expr_Node variable.\n+\t* par-ch9.adb (P_Task): Initialize Aspect_Sloc variable.\n+\t(P_Protected): Likewise.\n+\t* sem_case.adb (Check_Duplicates):\n+\tAdd pragma Warnings on variable.\n+\t* sem_ch12.adb (Preanalyze_Actuals): Initialize Vis variable.\n+\t* sem_ch4.adb (List_Operand_Interps):  Add pragma Warnings on variable.\n+\t* sem_ch5.adb (Analyze_Assignment): Initialize Save_Full_Analysis.\n+\t(Analyze_Exit_Statement): Initialize Scope_Id variable.\n+\t(Analyze_Iterator_Specification): Initialize Bas variable.\n+\t* sem_ch9.adb (Allows_Lock_Free_Implementation): Initialize\n+\tError_Count (Satisfies_Lock_Free_Requirements): Likewise.\n+\t(Analyze_Accept_Statement): Initialize Task_Nam.\n+\n+2017-04-28  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* checks.adb (Install_Primitive_Elaboration_Check):\n+\tDo not generate an elaboration check if all checks have been\n+\tsuppressed.\n+\n+2017-04-28  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications, case\n+\tInterrupt_Handler and Attach_Handler): Generate reference\n+\tto protected operation to prevent spurious warnings about\n+\tunreferenced entities. Previous scheme failed with style checks\n+\tenabled.\n+\n+2017-04-28  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Relocate_Pragmas_To_Body): A pragma Warnings\n+\tthat follows an expression function must not be relocated to\n+\tthe generated body, because it applies to the code that follows.\n+\n 2017-04-28  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_util.adb (Is_Dependent_Component_Of_Mutable_Object): Test"}, {"sha": "90d70ab9ed6e546e0b025e88a7d9945922ce1b00", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=85be939ea97a39df3c15f2dac34da0cb1d55fc1d", "patch": "@@ -7795,9 +7795,10 @@ package body Checks is\n       if ASIS_Mode or GNATprove_Mode then\n          return;\n \n-      --  Do not generate an elaboration check if such code is not desirable\n+      --  Do not generate an elaboration check if all checks have been\n+      --  suppressed.\n \n-      elsif Restriction_Active (No_Elaboration_Code) then\n+      elsif Suppress_Checks then\n          return;\n \n       --  Do not generate an elaboration check if the related subprogram is\n@@ -7806,6 +7807,11 @@ package body Checks is\n       elsif Elaboration_Checks_Suppressed (Subp_Id) then\n          return;\n \n+      --  Do not generate an elaboration check if such code is not desirable\n+\n+      elsif Restriction_Active (No_Elaboration_Code) then\n+         return;\n+\n       --  Do not consider subprograms which act as compilation units, because\n       --  they cannot be the target of a dispatching call.\n "}, {"sha": "4baca7cca3ec885903e035b7709cfa4407eb3688", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=85be939ea97a39df3c15f2dac34da0cb1d55fc1d", "patch": "@@ -4176,37 +4176,37 @@ package body Exp_Ch7 is\n    procedure Expand_Cleanup_Actions (N : Node_Id) is\n       Scop : constant Entity_Id := Current_Scope;\n \n-      Is_Asynchronous_Call : constant Boolean :=\n-                               Nkind (N) = N_Block_Statement\n-                                 and then Is_Asynchronous_Call_Block (N);\n-      Is_Master            : constant Boolean :=\n-                               Nkind (N) /= N_Entry_Body\n-                                 and then Is_Task_Master (N);\n-      Is_Protected_Body    : constant Boolean :=\n-                               Nkind (N) = N_Subprogram_Body\n-                                 and then Is_Protected_Subprogram_Body (N);\n-      Is_Task_Allocation   : constant Boolean :=\n-                               Nkind (N) = N_Block_Statement\n-                                 and then Is_Task_Allocation_Block (N);\n-      Is_Task_Body         : constant Boolean :=\n-                               Nkind (Original_Node (N)) = N_Task_Body;\n-      Needs_Sec_Stack_Mark : constant Boolean :=\n-                               Uses_Sec_Stack (Scop)\n-                                 and then\n-                                   not Sec_Stack_Needed_For_Return (Scop);\n-      Needs_Custom_Cleanup : constant Boolean :=\n-                               Nkind (N) = N_Block_Statement\n-                                 and then Present (Cleanup_Actions (N));\n-\n-      Actions_Required     : constant Boolean :=\n-                               Requires_Cleanup_Actions (N, True)\n-                                 or else Is_Asynchronous_Call\n-                                 or else Is_Master\n-                                 or else Is_Protected_Body\n-                                 or else Is_Task_Allocation\n-                                 or else Is_Task_Body\n-                                 or else Needs_Sec_Stack_Mark\n-                                 or else Needs_Custom_Cleanup;\n+      Is_Asynchronous_Call   : constant Boolean :=\n+                                 Nkind (N) = N_Block_Statement\n+                                   and then Is_Asynchronous_Call_Block (N);\n+      Is_Master              : constant Boolean :=\n+                                 Nkind (N) /= N_Entry_Body\n+                                   and then Is_Task_Master (N);\n+      Is_Protected_Subp_Body : constant Boolean :=\n+                                 Nkind (N) = N_Subprogram_Body\n+                                   and then Is_Protected_Subprogram_Body (N);\n+      Is_Task_Allocation     : constant Boolean :=\n+                                 Nkind (N) = N_Block_Statement\n+                                   and then Is_Task_Allocation_Block (N);\n+      Is_Task_Body           : constant Boolean :=\n+                                 Nkind (Original_Node (N)) = N_Task_Body;\n+      Needs_Sec_Stack_Mark   : constant Boolean :=\n+                                 Uses_Sec_Stack (Scop)\n+                                   and then\n+                                     not Sec_Stack_Needed_For_Return (Scop);\n+      Needs_Custom_Cleanup   : constant Boolean :=\n+                                 Nkind (N) = N_Block_Statement\n+                                   and then Present (Cleanup_Actions (N));\n+\n+      Actions_Required       : constant Boolean :=\n+                                 Requires_Cleanup_Actions (N, True)\n+                                   or else Is_Asynchronous_Call\n+                                   or else Is_Master\n+                                   or else Is_Protected_Subp_Body\n+                                   or else Is_Task_Allocation\n+                                   or else Is_Task_Body\n+                                   or else Needs_Sec_Stack_Mark\n+                                   or else Needs_Custom_Cleanup;\n \n       HSS : Node_Id := Handled_Statement_Sequence (N);\n       Loc : Source_Ptr;"}, {"sha": "28244c36c97f4762228f5a9ccb7d5a165b47fbe2", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 14, "deletions": 117, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=85be939ea97a39df3c15f2dac34da0cb1d55fc1d", "patch": "@@ -24,7 +24,6 @@\n ------------------------------------------------------------------------------\n \n with Atree;    use Atree;\n-with Checks;   use Checks;\n with Einfo;    use Einfo;\n with Elists;   use Elists;\n with Errout;   use Errout;\n@@ -421,9 +420,6 @@ package body Exp_Ch9 is\n    --  the Task_Body_Procedure of Spec_Id. The returned entity denotes formal\n    --  parameter _E.\n \n-   function Is_Exception_Safe (Subprogram : Node_Id) return Boolean;\n-   --  Tell whether a given subprogram cannot raise an exception\n-\n    function Is_Potentially_Large_Family\n      (Base_Index : Entity_Id;\n       Conctyp    : Entity_Id;\n@@ -3889,30 +3885,28 @@ package body Exp_Ch9 is\n       Pid       : Node_Id;\n       N_Op_Spec : Node_Id) return Node_Id\n    is\n-      Loc         : constant Source_Ptr := Sloc (N);\n-      Op_Spec     : Node_Id;\n-      P_Op_Spec   : Node_Id;\n-      Uactuals    : List_Id;\n-      Pformal     : Node_Id;\n-      Unprot_Call : Node_Id;\n-      Sub_Body    : Node_Id;\n+      Exc_Safe : constant Boolean := not Might_Raise (N);\n+      --  True if N cannot raise an exception\n+\n+      Loc       : constant Source_Ptr := Sloc (N);\n+      Op_Spec   : constant Node_Id := Specification (N);\n+      P_Op_Spec : constant Node_Id :=\n+                    Build_Protected_Sub_Specification (N, Pid, Protected_Mode);\n+\n+      Lock_Kind   : RE_Id;\n       Lock_Name   : Node_Id;\n       Lock_Stmt   : Node_Id;\n+      Object_Parm : Node_Id;\n+      Pformal     : Node_Id;\n       R           : Node_Id;\n       Return_Stmt : Node_Id := Empty;    -- init to avoid gcc 3 warning\n       Pre_Stmts   : List_Id := No_List;  -- init to avoid gcc 3 warning\n       Stmts       : List_Id;\n-      Object_Parm : Node_Id;\n-      Exc_Safe    : Boolean;\n-      Lock_Kind   : RE_Id;\n+      Sub_Body    : Node_Id;\n+      Uactuals    : List_Id;\n+      Unprot_Call : Node_Id;\n \n    begin\n-      Op_Spec := Specification (N);\n-      Exc_Safe := Is_Exception_Safe (N);\n-\n-      P_Op_Spec :=\n-        Build_Protected_Sub_Specification (N, Pid, Protected_Mode);\n-\n       --  Build a list of the formal parameters of the protected version of\n       --  the subprogram to use as the actual parameters of the unprotected\n       --  version.\n@@ -13545,103 +13539,6 @@ package body Exp_Ch9 is\n       end if;\n    end Install_Private_Data_Declarations;\n \n-   -----------------------\n-   -- Is_Exception_Safe --\n-   -----------------------\n-\n-   function Is_Exception_Safe (Subprogram : Node_Id) return Boolean is\n-\n-      function Has_Side_Effect (N : Node_Id) return Boolean;\n-      --  Return True whenever encountering a subprogram call or raise\n-      --  statement of any kind in the sequence of statements\n-\n-      ---------------------\n-      -- Has_Side_Effect --\n-      ---------------------\n-\n-      --  What is this doing buried two levels down in exp_ch9. It seems like a\n-      --  generally useful function, and indeed there may be code duplication\n-      --  going on here ???\n-\n-      function Has_Side_Effect (N : Node_Id) return Boolean is\n-         Stmt : Node_Id;\n-         Expr : Node_Id;\n-\n-         function Is_Call_Or_Raise (N : Node_Id) return Boolean;\n-         --  Indicate whether N is a subprogram call or a raise statement\n-\n-         ----------------------\n-         -- Is_Call_Or_Raise --\n-         ----------------------\n-\n-         function Is_Call_Or_Raise (N : Node_Id) return Boolean is\n-         begin\n-            return Nkind_In (N, N_Procedure_Call_Statement,\n-                                N_Function_Call,\n-                                N_Raise_Statement,\n-                                N_Raise_Constraint_Error,\n-                                N_Raise_Program_Error,\n-                                N_Raise_Storage_Error);\n-         end Is_Call_Or_Raise;\n-\n-      --  Start of processing for Has_Side_Effect\n-\n-      begin\n-         Stmt := N;\n-         while Present (Stmt) loop\n-            if Is_Call_Or_Raise (Stmt) then\n-               return True;\n-            end if;\n-\n-            --  An object declaration can also contain a function call or a\n-            --  raise statement.\n-\n-            if Nkind (Stmt) = N_Object_Declaration then\n-               Expr := Expression (Stmt);\n-\n-               if Present (Expr) and then Is_Call_Or_Raise (Expr) then\n-                  return True;\n-               end if;\n-            end if;\n-\n-            Next (Stmt);\n-         end loop;\n-\n-         return False;\n-      end Has_Side_Effect;\n-\n-   --  Start of processing for Is_Exception_Safe\n-\n-   begin\n-      --  When exceptions can't be propagated, the subprogram returns normally\n-\n-      if No_Exception_Handlers_Set then\n-         return True;\n-      end if;\n-\n-      --  If the checks handled by the back end are not disabled, we cannot\n-      --  ensure that no exception will be raised.\n-\n-      if not Access_Checks_Suppressed (Empty)\n-        or else not Discriminant_Checks_Suppressed (Empty)\n-        or else not Range_Checks_Suppressed (Empty)\n-        or else not Index_Checks_Suppressed (Empty)\n-        or else Opt.Stack_Checking_Enabled\n-      then\n-         return False;\n-      end if;\n-\n-      if Has_Side_Effect (First (Declarations (Subprogram)))\n-        or else\n-          Has_Side_Effect\n-            (First (Statements (Handled_Statement_Sequence (Subprogram))))\n-      then\n-         return False;\n-      else\n-         return True;\n-      end if;\n-   end Is_Exception_Safe;\n-\n    ---------------------------------\n    -- Is_Potentially_Large_Family --\n    ---------------------------------"}, {"sha": "ac19c9d2c45bbecad7b8e96c9467aadb4d2c37b6", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=85be939ea97a39df3c15f2dac34da0cb1d55fc1d", "patch": "@@ -2301,7 +2301,7 @@ package body Inline is\n       --  this is the left-hand side of the assignment, else it is a temporary\n       --  to which the return value is assigned prior to rewriting the call.\n \n-      Targ1 : Node_Id;\n+      Targ1 : Node_Id := Empty;\n       --  A separate target used when the return type is unconstrained\n \n       Temp     : Entity_Id;"}, {"sha": "6553a954eb1216d47d62549fce316bbb729a7225", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=85be939ea97a39df3c15f2dac34da0cb1d55fc1d", "patch": "@@ -3494,7 +3494,7 @@ package body Ch3 is\n    procedure P_Component_Items (Decls : List_Id) is\n       Aliased_Present  : Boolean := False;\n       CompDef_Node     : Node_Id;\n-      Decl_Node        : Node_Id;\n+      Decl_Node        : Node_Id := Empty;  -- initialize to prevent warning\n       Scan_State       : Saved_Scan_State;\n       Not_Null_Present : Boolean := False;\n       Num_Idents       : Nat;\n@@ -3754,7 +3754,7 @@ package body Ch3 is\n \n    function P_Discrete_Choice_List return List_Id is\n       Choices     : List_Id;\n-      Expr_Node   : Node_Id;\n+      Expr_Node   : Node_Id := Empty;  -- initialize to prevent warning\n       Choice_Node : Node_Id;\n \n    begin"}, {"sha": "9e4ac07426f98f8f7f9373be68da4bac36e82b23", "filename": "gcc/ada/par-ch9.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fpar-ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fpar-ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch9.adb?ref=85be939ea97a39df3c15f2dac34da0cb1d55fc1d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -79,7 +79,7 @@ package body Ch9 is\n    --  Error recovery: cannot raise Error_Resync\n \n    function P_Task return Node_Id is\n-      Aspect_Sloc : Source_Ptr;\n+      Aspect_Sloc : Source_Ptr := No_Location;\n       Name_Node   : Node_Id;\n       Task_Node   : Node_Id;\n       Task_Sloc   : Source_Ptr;\n@@ -425,7 +425,7 @@ package body Ch9 is\n    --  Error recovery: cannot raise Error_Resync\n \n    function P_Protected return Node_Id is\n-      Aspect_Sloc    : Source_Ptr;\n+      Aspect_Sloc    : Source_Ptr := No_Location;\n       Name_Node      : Node_Id;\n       Protected_Node : Node_Id;\n       Protected_Sloc : Source_Ptr;"}, {"sha": "187a98baafc909cd5afa5d0f8164b73b51b7bf8b", "filename": "gcc/ada/sem_case.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fsem_case.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fsem_case.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_case.adb?ref=85be939ea97a39df3c15f2dac34da0cb1d55fc1d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -459,6 +459,7 @@ package body Sem_Case is\n          Choice_Hi   : Uint;\n          Choice_Lo   : Uint;\n          Prev_Choice : Node_Id;\n+         pragma Warnings (Off, Prev_Choice);\n          Prev_Hi     : Uint;\n \n       begin"}, {"sha": "093a2bdf81ca8e582c4dd24eb5d873e8b10a473d", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=85be939ea97a39df3c15f2dac34da0cb1d55fc1d", "patch": "@@ -13620,7 +13620,7 @@ package body Sem_Ch12 is\n       Cur : Entity_Id := Empty;\n       --  Current homograph of the instance name\n \n-      Vis : Boolean;\n+      Vis : Boolean := False;\n       --  Saved visibility status of the current homograph\n \n    begin"}, {"sha": "2b92afd8a770cf4bb678af27fe1bd7707b92da67", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=85be939ea97a39df3c15f2dac34da0cb1d55fc1d", "patch": "@@ -1968,15 +1968,12 @@ package body Sem_Ch13 is\n             if A_Id = Aspect_Attach_Handler\n               or else A_Id = Aspect_Interrupt_Handler\n             then\n-               --  Decorate the reference as comming from the sources and force\n-               --  its reanalysis to generate the reference to E; required to\n-               --  avoid reporting spurious warning on E as unreferenced entity\n-               --  (because aspects are not fully analyzed).\n \n-               Set_Comes_From_Source (Ent, Comes_From_Source (Id));\n-               Set_Entity (Ent, Empty);\n+               --  Treat the specification as a reference to the protected\n+               --  operation, which might otherwise appear unreferenced and\n+               --  generate spurious warnings.\n \n-               Analyze (Ent);\n+               Generate_Reference (E, Id);\n             end if;\n \n             --  Check for duplicate aspect. Note that the Comes_From_Source"}, {"sha": "a7362a74a68349c52d207837427c40e3d7946a38", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=85be939ea97a39df3c15f2dac34da0cb1d55fc1d", "patch": "@@ -340,6 +340,7 @@ package body Sem_Ch4 is\n \n       procedure List_Operand_Interps (Opnd : Node_Id) is\n          Nam   : Node_Id;\n+         pragma Warnings (Off, Nam);\n          Err   : Node_Id := N;\n \n       begin"}, {"sha": "6ef90955102136e77a122678aafa8b3d816b73bf", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=85be939ea97a39df3c15f2dac34da0cb1d55fc1d", "patch": "@@ -107,7 +107,7 @@ package body Sem_Ch5 is\n       T1   : Entity_Id;\n       T2   : Entity_Id;\n \n-      Save_Full_Analysis : Boolean;\n+      Save_Full_Analysis : Boolean := False;  -- initialize to prevent warning\n \n       procedure Diagnose_Non_Variable_Lhs (N : Node_Id);\n       --  N is the node for the left hand side of an assignment, and it is not\n@@ -1387,7 +1387,7 @@ package body Sem_Ch5 is\n    procedure Analyze_Exit_Statement (N : Node_Id) is\n       Target   : constant Node_Id := Name (N);\n       Cond     : constant Node_Id := Condition (N);\n-      Scope_Id : Entity_Id;\n+      Scope_Id : Entity_Id := Empty;  -- initialize to prevent warning\n       U_Name   : Entity_Id;\n       Kind     : Entity_Kind;\n \n@@ -1864,7 +1864,7 @@ package body Sem_Ch5 is\n       Loc       : constant Source_Ptr := Sloc (N);\n       Subt      : constant Node_Id    := Subtype_Indication (N);\n \n-      Bas : Entity_Id;\n+      Bas : Entity_Id := Empty;  -- initialize to prevent warning\n       Typ : Entity_Id;\n \n    --   Start of processing for Analyze_Iterator_Specification"}, {"sha": "184fe43e50c86ad43f0d68faefac415b8f8b0b79", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=85be939ea97a39df3c15f2dac34da0cb1d55fc1d", "patch": "@@ -127,7 +127,7 @@ package body Sem_Ch9 is\n      (N               : Node_Id;\n       Lock_Free_Given : Boolean := False) return Boolean\n    is\n-      Errors_Count : Nat;\n+      Errors_Count : Nat := 0;\n       --  Errors_Count is a count of errors detected by the compiler so far\n       --  when Lock_Free_Given is True.\n \n@@ -257,7 +257,7 @@ package body Sem_Ch9 is\n                Comp : Entity_Id := Empty;\n                --  Track the current component which the body references\n \n-               Errors_Count : Nat;\n+               Errors_Count : Nat := 0;\n                --  Errors_Count is a count of errors detected by the compiler\n                --  so far when Lock_Free_Given is True.\n \n@@ -772,7 +772,7 @@ package body Sem_Ch9 is\n       Entry_Nam : Entity_Id;\n       E         : Entity_Id;\n       Kind      : Entity_Kind;\n-      Task_Nam  : Entity_Id;\n+      Task_Nam  : Entity_Id := Empty;  -- initialize to prevent warning\n \n    begin\n       Tasking_Used := True;"}, {"sha": "6d0ecb67c7d6f84f5dbc1c429c274cb48a38c50e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=85be939ea97a39df3c15f2dac34da0cb1d55fc1d", "patch": "@@ -29959,7 +29959,17 @@ package body Sem_Prag is\n          if Nkind (Stmt) = N_Pragma\n            and then Pragma_On_Body_Or_Stub_OK (Get_Pragma_Id (Stmt))\n          then\n-            Relocate_Pragma (Stmt);\n+\n+            --  If a source pragma Warnings follows the body, it applies to\n+            --  following statements and does not belong in the body.\n+\n+            if Get_Pragma_Id (Stmt) = Pragma_Warnings\n+              and then Comes_From_Source (Stmt)\n+            then\n+               null;\n+            else\n+               Relocate_Pragma (Stmt);\n+            end if;\n \n          --  Skip internally generated code\n "}, {"sha": "e8fc7288b3d4ecae00ca7506869c8fb1a343e443", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=85be939ea97a39df3c15f2dac34da0cb1d55fc1d", "patch": "@@ -16869,6 +16869,63 @@ package body Sem_Util is\n       Mark_Allocators (Root_Nod);\n    end Mark_Coextensions;\n \n+   -----------------\n+   -- Might_Raise --\n+   -----------------\n+\n+   function Might_Raise (N : Node_Id) return Boolean is\n+      Result : Boolean := False;\n+\n+      function Process (N : Node_Id) return Traverse_Result;\n+      --  Set Result to True if we find something that could raise an exception\n+\n+      -------------\n+      -- Process --\n+      -------------\n+\n+      function Process (N : Node_Id) return Traverse_Result is\n+      begin\n+         if Nkind_In (N, N_Procedure_Call_Statement,\n+                         N_Function_Call,\n+                         N_Raise_Statement,\n+                         N_Raise_Constraint_Error,\n+                         N_Raise_Program_Error,\n+                         N_Raise_Storage_Error)\n+         then\n+            Result := True;\n+            return Abandon;\n+         else\n+            return OK;\n+         end if;\n+      end Process;\n+\n+      procedure Set_Result is new Traverse_Proc (Process);\n+\n+   --  Start of processing for Might_Raise\n+\n+   begin\n+      --  False if exceptions can't be propagated\n+\n+      if No_Exception_Handlers_Set then\n+         return False;\n+      end if;\n+\n+      --  If the checks handled by the back end are not disabled, we cannot\n+      --  ensure that no exception will be raised.\n+\n+      if not Access_Checks_Suppressed (Empty)\n+        or else not Discriminant_Checks_Suppressed (Empty)\n+        or else not Range_Checks_Suppressed (Empty)\n+        or else not Index_Checks_Suppressed (Empty)\n+        or else Opt.Stack_Checking_Enabled\n+      then\n+         return True;\n+      end if;\n+\n+      Set_Result (N);\n+      return Result;\n+   end Might_Raise;\n+\n    --------------------------------\n    -- Nearest_Enclosing_Instance --\n    --------------------------------"}, {"sha": "9df64228f18dfcce24404531e5b42d7c3c40dfeb", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85be939ea97a39df3c15f2dac34da0cb1d55fc1d/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=85be939ea97a39df3c15f2dac34da0cb1d55fc1d", "patch": "@@ -1984,6 +1984,11 @@ package Sem_Util is\n    --  to guarantee this in all cases. Note that it is more possible to give\n    --  correct answer if the tree is fully analyzed.\n \n+   function Might_Raise (N : Node_Id) return Boolean;\n+   --  True if evaluation of N might raise an exception. This is conservative;\n+   --  if we're not sure, we return True. If N is a subprogram body, this is\n+   --  about whether execution of that body can raise.\n+\n    function Nearest_Enclosing_Instance (E : Entity_Id) return Entity_Id;\n    --  Return the entity of the nearest enclosing instance which encapsulates\n    --  entity E. If no such instance exits, return Empty."}]}