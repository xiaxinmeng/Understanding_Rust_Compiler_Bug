{"sha": "a0b25e45b7a2e2b816055f853ecebb1c28a3b8e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBiMjVlNDViN2EyZTJiODE2MDU1Zjg1M2VjZWJiMWMyOGEzYjhlMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-23T12:29:42Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-23T12:29:42Z"}, "message": "(decl_attributes): Warn if attribute will be ignored.\n\nAllow `noreturn', `volatile', and `const' on object of type pointer to\nfunction.\nAlways give decl with error or warning.\n\nFrom-SVN: r6610", "tree": {"sha": "f3c90fe91b3329a549fce5ab8038cd22ee027b95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3c90fe91b3329a549fce5ab8038cd22ee027b95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0b25e45b7a2e2b816055f853ecebb1c28a3b8e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b25e45b7a2e2b816055f853ecebb1c28a3b8e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0b25e45b7a2e2b816055f853ecebb1c28a3b8e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b25e45b7a2e2b816055f853ecebb1c28a3b8e0/comments", "author": null, "committer": null, "parents": [{"sha": "984da0ffb053f5e65221d8e7edfcaad2c2005282", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/984da0ffb053f5e65221d8e7edfcaad2c2005282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/984da0ffb053f5e65221d8e7edfcaad2c2005282"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "050e472a7da363b69209e997a813ecc149b3d389", "filename": "gcc/c-common.c", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b25e45b7a2e2b816055f853ecebb1c28a3b8e0/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b25e45b7a2e2b816055f853ecebb1c28a3b8e0/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=a0b25e45b7a2e2b816055f853ecebb1c28a3b8e0", "patch": "@@ -215,17 +215,41 @@ decl_attributes (decl, attributes)\n \t  DECL_PACKED (decl) = 1;\n \t/* We can't set DECL_PACKED for a VAR_DECL, because the bit is\n \t   used for DECL_REGISTER.  It wouldn't mean anything anyway.  */\n+\telse\n+\t  warning_with_decl (decl, \"`packed' attribute ignore\");\n+\n       }\n     else if (TREE_VALUE (a) == get_identifier (\"noreturn\")\n \t     || TREE_VALUE (a) == get_identifier (\"volatile\"))\n       {\n+\ttree type = TREE_TYPE (decl);\n+\n \tif (TREE_CODE (decl) == FUNCTION_DECL)\n \t  TREE_THIS_VOLATILE (decl) = 1;\n+\telse if (TREE_CODE (type) == POINTER_TYPE\n+\t\t && TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE)\n+\t  TREE_TYPE (decl)\n+\t    = build_pointer_type\n+\t      (build_type_variant (TREE_TYPE (type),\n+\t\t\t\t   TREE_READONLY (TREE_TYPE (type)), 1));\n+\telse\n+\t  warning_with_decl (decl, \"`%s' attribute ignored\",\n+\t\t\t     IDENTIFIER_POINTER (TREE_VALUE (a)));\n       }\n     else if (TREE_VALUE (a) == get_identifier (\"const\"))\n       {\n+\ttree type = TREE_TYPE (decl);\n+\n \tif (TREE_CODE (decl) == FUNCTION_DECL)\n \t  TREE_READONLY (decl) = 1;\n+\telse if (TREE_CODE (type) == POINTER_TYPE\n+\t\t && TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE)\n+\t  TREE_TYPE (decl)\n+\t    = build_pointer_type\n+\t      (build_type_variant (TREE_TYPE (type), 1,\n+\t\t\t\t   TREE_THIS_VOLATILE (TREE_TYPE (type))));\n+\telse\n+\t  warning_with_decl (decl, \"`const' attribute ignored\");\n       }\n     else if (TREE_VALUE (a) != 0\n \t     && TREE_CODE (TREE_VALUE (a)) == TREE_LIST\n@@ -252,7 +276,7 @@ decl_attributes (decl, attributes)\n \t      break;\n \t    }\n \tif (i == NUM_MACHINE_MODES)\n-\t  error (\"unknown machine mode `%s'\", specified_name);\n+\t  error_with_decl (decl, \"unknown machine mode `%s'\", specified_name);\n       }\n     else if (TREE_VALUE (a) != 0\n \t     && TREE_CODE (TREE_VALUE (a)) == TREE_LIST\n@@ -262,7 +286,8 @@ decl_attributes (decl, attributes)\n \tif (TREE_CODE (decl) == FUNCTION_DECL || TREE_CODE (decl) == VAR_DECL)\n \t  {\n \t    if (TREE_CODE (decl) == VAR_DECL && current_function_decl != NULL_TREE)\n-\t      error (\"section attribute cannot be specified for local variables\");\n+\t      error_with_decl (decl,\n+\t\t\t       \"section attribute cannot be specified for local variables\");\n \t    /* The decl may have already been given a section attribute from\n \t       a previous declaration.  Ensure they match.  */\n \t    else if (DECL_SECTION_NAME (decl) != NULL_TREE"}]}