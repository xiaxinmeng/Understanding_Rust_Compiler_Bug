{"sha": "00e9a94486dff064693e711d4161dcbdcf5bbe5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBlOWE5NDQ4NmRmZjA2NDY5M2U3MTFkNDE2MWRjYmRjZjViYmU1Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-08-06T14:46:08Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-08-06T14:46:08Z"}, "message": "tuple (pack_arguments): Rename to forward_as_tuple and simplify, per US 98 and US 99.\n\n2010-08-06  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/tuple (pack_arguments): Rename to forward_as_tuple\n\tand simplify, per US 98 and US 99.\n\t* testsuite/20_util/tuple/creation_functions/pack_arguments.cc:\n\tRename to...\n\t* testsuite/20_util/tuple/creation_functions/forward_as_tuple.cc:\n\t... this, adjust.\n\t* testsuite/20_util/pair/piecewise.cc: Adjust.\n\nFrom-SVN: r162948", "tree": {"sha": "5708435aabe2db96c7c94b9c13e8df3b049a2cce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5708435aabe2db96c7c94b9c13e8df3b049a2cce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00e9a94486dff064693e711d4161dcbdcf5bbe5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00e9a94486dff064693e711d4161dcbdcf5bbe5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00e9a94486dff064693e711d4161dcbdcf5bbe5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00e9a94486dff064693e711d4161dcbdcf5bbe5b/comments", "author": null, "committer": null, "parents": [{"sha": "f25496f35244af6ff790cdff903b92d38c4bd4ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f25496f35244af6ff790cdff903b92d38c4bd4ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f25496f35244af6ff790cdff903b92d38c4bd4ec"}], "stats": {"total": 57, "additions": 25, "deletions": 32}, "files": [{"sha": "9690a7ed9033018835f41076ab90298e3be16023", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e9a94486dff064693e711d4161dcbdcf5bbe5b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e9a94486dff064693e711d4161dcbdcf5bbe5b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=00e9a94486dff064693e711d4161dcbdcf5bbe5b", "patch": "@@ -1,3 +1,13 @@\n+2010-08-06  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/tuple (pack_arguments): Rename to forward_as_tuple\n+\tand simplify, per US 98 and US 99.\n+\t* testsuite/20_util/tuple/creation_functions/pack_arguments.cc:\n+\tRename to...\n+\t* testsuite/20_util/tuple/creation_functions/forward_as_tuple.cc:\n+\t... this, adjust.\n+\t* testsuite/20_util/pair/piecewise.cc: Adjust.\n+\n 2010-08-06  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/tuple (begin, end): Remove per GB 87."}, {"sha": "2e352414fe44c1aaea05094b960de026a476c9af", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e9a94486dff064693e711d4161dcbdcf5bbe5b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e9a94486dff064693e711d4161dcbdcf5bbe5b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=00e9a94486dff064693e711d4161dcbdcf5bbe5b", "patch": "@@ -549,27 +549,10 @@ namespace std\n       return __result_type(std::forward<_Elements>(__args)...);\n     }\n \n-  template<typename _Tp, bool = is_array<_Tp>::value>\n-    struct __pa_add_rvalue_reference_helper\n-    { typedef typename std::add_rvalue_reference<_Tp>::type __type; };\n-\n-  template<typename _Tp>\n-    struct __pa_add_rvalue_reference_helper<_Tp, true>\n-    { typedef _Tp& __type; };\n-\n-  template<typename _Tp>\n-    struct __pa_add_rvalue_reference\n-    : public __pa_add_rvalue_reference_helper<_Tp>\n-    { };\n-\n   template<typename... _Elements>\n-    inline tuple<typename __pa_add_rvalue_reference<_Elements>::__type...>\n-    pack_arguments(_Elements&&... __args)\n-    {\n-      typedef tuple<typename __pa_add_rvalue_reference<_Elements>::__type...>\n-\t__result_type;\n-      return __result_type(std::forward<_Elements>(__args)...);\n-    }\n+    inline tuple<_Elements&&...>\n+    forward_as_tuple(_Elements&&... __args)\n+    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }\n \n   template<std::size_t...> struct __index_holder { };    \n "}, {"sha": "ef71473202d15f5591b4925f110ed7caf59a6161", "filename": "libstdc++-v3/testsuite/20_util/pair/piecewise.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e9a94486dff064693e711d4161dcbdcf5bbe5b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fpiecewise.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e9a94486dff064693e711d4161dcbdcf5bbe5b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fpiecewise.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fpiecewise.cc?ref=00e9a94486dff064693e711d4161dcbdcf5bbe5b", "patch": "@@ -70,21 +70,21 @@ void test01()\n   bool test __attribute__((unused)) = true;\n \n   std::pair<type_one, type_zero> pp0(std::piecewise_construct_t(),\n-\t\t\t\t     std::pack_arguments(-3),\n-\t\t\t\t     std::pack_arguments());\n+\t\t\t\t     std::forward_as_tuple(-3),\n+\t\t\t\t     std::forward_as_tuple());\n   VERIFY( pp0.first.get() == -3 );\n   VERIFY( pp0.second.get() == 757 );\n \n   std::pair<type_one, type_two> pp1(std::piecewise_construct_t(),\n-\t\t\t\t    std::pack_arguments(6),\n-\t\t\t\t    std::pack_arguments(5, 4));\n+\t\t\t\t    std::forward_as_tuple(6),\n+\t\t\t\t    std::forward_as_tuple(5, 4));\n   VERIFY( pp1.first.get() == 6 );\n   VERIFY( pp1.second.get1() == 5 );\n   VERIFY( pp1.second.get2() == 4 );\n \n   std::pair<type_two, type_two> pp2(std::piecewise_construct_t(),\n-\t\t\t\t    std::pack_arguments(2, 1),\n-\t\t\t\t    std::pack_arguments(-1, -3));\n+\t\t\t\t    std::forward_as_tuple(2, 1),\n+\t\t\t\t    std::forward_as_tuple(-1, -3));\n   VERIFY( pp2.first.get1() == 2 );\n   VERIFY( pp2.first.get2() == 1 );\n   VERIFY( pp2.second.get1() == -1 );"}, {"sha": "bad4ad49c75c8a7794c68aea9ceca9a33f4a2b70", "filename": "libstdc++-v3/testsuite/20_util/tuple/creation_functions/forward_as_tuple.cc", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e9a94486dff064693e711d4161dcbdcf5bbe5b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fforward_as_tuple.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e9a94486dff064693e711d4161dcbdcf5bbe5b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fforward_as_tuple.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fforward_as_tuple.cc?ref=00e9a94486dff064693e711d4161dcbdcf5bbe5b", "patch": "@@ -30,16 +30,16 @@ test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  std::pack_arguments();\n+  std::forward_as_tuple();\n \n-  VERIFY( std::get<0>(std::pack_arguments(-1)) == -1 );\n-  VERIFY( (std::is_same<decltype(std::pack_arguments(-1)),\n+  VERIFY( std::get<0>(std::forward_as_tuple(-1)) == -1 );\n+  VERIFY( (std::is_same<decltype(std::forward_as_tuple(-1)),\n \t   std::tuple<int&&>>::value) );\n \n   const int i1 = 1;\n   const int i2 = 2;\n   const double d1 = 4.0;\n-  auto t1 = std::pack_arguments(i1, i2, d1);\n+  auto t1 = std::forward_as_tuple(i1, i2, d1);\n   VERIFY( (std::is_same<decltype(t1), std::tuple<const int&,\n \t   const int&, const double&>>::value) );\n   VERIFY( std::get<0>(t1) == i1 );\n@@ -48,7 +48,7 @@ test01()\n \n   typedef const int a_type1[3];\n   a_type1 a1 = { -1, 1, 2 };\n-  auto t2 = std::pack_arguments(a1);\n+  auto t2 = std::forward_as_tuple(a1);\n   VERIFY( (std::is_same<decltype(t2), std::tuple<a_type1&>>::value) );\n   VERIFY( std::get<0>(t2)[0] == a1[0] );\n   VERIFY( std::get<0>(t2)[1] == a1[1] );\n@@ -57,7 +57,7 @@ test01()\n   typedef int a_type2[2];\n   a_type2 a2 = { 2, -2 };\n   volatile int i4 = 1;\n-  auto t3 = std::pack_arguments(a2, i4);\n+  auto t3 = std::forward_as_tuple(a2, i4);\n   VERIFY( (std::is_same<decltype(t3), std::tuple<a_type2&,\n \t   volatile int&>>::value) );\n   VERIFY( std::get<0>(t3)[0] == a2[0] );", "previous_filename": "libstdc++-v3/testsuite/20_util/tuple/creation_functions/pack_arguments.cc"}]}