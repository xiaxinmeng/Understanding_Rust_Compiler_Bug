{"sha": "784fb9b322452e7f5e31e75be538ccf453335abb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg0ZmI5YjMyMjQ1MmU3ZjVlMzFlNzViZTUzOGNjZjQ1MzMzNWFiYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-11-13T07:25:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-11-13T07:25:36Z"}, "message": "re PR tree-optimization/55281 (ICE in  build_int_cst_wide, at tree.c:1217  (with Ofast, ok with O3))\n\n\tPR tree-optimization/55281\n\t* tree-vect-generic.c (expand_vector_condition): Accept any\n\tis_gimple_val rather than just SSA_NAME if not COMPARISON_CLASS_P.\n\t* fold-const.c (fold_ternary_loc): Fold VEC_COND_EXPR if arg0 is\n\teither integer_all_onesp or integer_zerop.\n\t* tree-vect-stmts.c (vectorizable_condition): Build the condition\n\tusing corresponding vector integer type instead of vectype.\n\n\t* gcc.dg/vect/fast-math-pr55281.c: New test.\n\t* g++.dg/opt/pr55281.C: New test.\n\nFrom-SVN: r193471", "tree": {"sha": "5384a6491928ac5d95d62e04069c2d911f262a7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5384a6491928ac5d95d62e04069c2d911f262a7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/784fb9b322452e7f5e31e75be538ccf453335abb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/784fb9b322452e7f5e31e75be538ccf453335abb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/784fb9b322452e7f5e31e75be538ccf453335abb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/784fb9b322452e7f5e31e75be538ccf453335abb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d68b7e60b0b2f26624477ff0b7ef9f2595c9325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d68b7e60b0b2f26624477ff0b7ef9f2595c9325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d68b7e60b0b2f26624477ff0b7ef9f2595c9325"}], "stats": {"total": 85, "additions": 82, "deletions": 3}, "files": [{"sha": "b238d64ad56ed936d06c662321d7247af51f2b59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784fb9b322452e7f5e31e75be538ccf453335abb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784fb9b322452e7f5e31e75be538ccf453335abb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=784fb9b322452e7f5e31e75be538ccf453335abb", "patch": "@@ -1,5 +1,13 @@\n 2012-11-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/55281\n+\t* tree-vect-generic.c (expand_vector_condition): Accept any\n+\tis_gimple_val rather than just SSA_NAME if not COMPARISON_CLASS_P.\n+\t* fold-const.c (fold_ternary_loc): Fold VEC_COND_EXPR if arg0 is\n+\teither integer_all_onesp or integer_zerop.\n+\t* tree-vect-stmts.c (vectorizable_condition): Build the condition\n+\tusing corresponding vector integer type instead of vectype.\n+\n \tPR rtl-optimization/54127\n \t* cfgrtl.c (force_nonfallthru_and_redirect): When redirecting\n \tasm goto labels from BB_HEAD (e->dest) to target bb, decrement"}, {"sha": "2e9086484515a4bf4d4fc17dd2e75c9abd4acd47", "filename": "gcc/fold-const.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784fb9b322452e7f5e31e75be538ccf453335abb/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784fb9b322452e7f5e31e75be538ccf453335abb/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=784fb9b322452e7f5e31e75be538ccf453335abb", "patch": "@@ -14036,6 +14036,16 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \n       return NULL_TREE;\n \n+    case VEC_COND_EXPR:\n+      if (TREE_CODE (arg0) == VECTOR_CST)\n+\t{\n+\t  if (integer_all_onesp (arg0) && !TREE_SIDE_EFFECTS (op2))\n+\t    return pedantic_non_lvalue_loc (loc, op1);\n+\t  if (integer_zerop (arg0) && !TREE_SIDE_EFFECTS (op1))\n+\t    return pedantic_non_lvalue_loc (loc, op2);\n+\t}\n+      return NULL_TREE;\n+\n     case CALL_EXPR:\n       /* CALL_EXPRs used to be ternary exprs.  Catch any mistaken uses\n \t of fold_ternary on them.  */"}, {"sha": "5e6e65b6c15ad43f3b17236a392b883f8424811f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784fb9b322452e7f5e31e75be538ccf453335abb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784fb9b322452e7f5e31e75be538ccf453335abb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=784fb9b322452e7f5e31e75be538ccf453335abb", "patch": "@@ -1,5 +1,9 @@\n 2012-11-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/55281\n+\t* gcc.dg/vect/fast-math-pr55281.c: New test.\n+\t* g++.dg/opt/pr55281.C: New test.\n+\n \tPR rtl-optimization/54127\n \t* gcc.dg/torture/pr54127.c: New test.\n "}, {"sha": "7076a19c836b35cee4c8d5e814dca25f6538993b", "filename": "gcc/testsuite/g++.dg/opt/pr55281.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784fb9b322452e7f5e31e75be538ccf453335abb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr55281.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784fb9b322452e7f5e31e75be538ccf453335abb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr55281.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr55281.C?ref=784fb9b322452e7f5e31e75be538ccf453335abb", "patch": "@@ -0,0 +1,17 @@\n+// PR tree-optimization/55281\n+// { dg-do compile }\n+// { dg-options \"-Ofast\" }\n+\n+typedef float VF __attribute__((vector_size (16)));\n+\n+VF x;\n+\n+void\n+foo (void)\n+{\n+  VF a, b, c;\n+  a = (VF) { 1.0, 2.0, 3.0, 4.0 };\n+  b = (VF) { 5.0, 6.0, 7.0, 8.0 };\n+  c = (VF) { 0.0, 0.0, 0.0, 0.0 };\n+  x = c == ((VF) { 0.0, 0.0, 0.0, 0.0 }) ? a : b;\n+}"}, {"sha": "4d75403e77dcdee0e89c4385b06dfb5737e6b660", "filename": "gcc/testsuite/gcc.dg/vect/fast-math-pr55281.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784fb9b322452e7f5e31e75be538ccf453335abb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-pr55281.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784fb9b322452e7f5e31e75be538ccf453335abb/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-pr55281.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-pr55281.c?ref=784fb9b322452e7f5e31e75be538ccf453335abb", "patch": "@@ -0,0 +1,30 @@\n+/* PR tree-optimization/55281 */\n+/* { dg-do compile } */\n+\n+static inline float\n+bar (float k, float j)\n+{\n+  float l = 0.0f;\n+  if (k > j)\n+    l = k;\n+  float t = k / j;\n+  float v = t * t;\n+  if (k == 0)\n+    v = 0.0f;\n+  if (t > 0.4f)\n+    v += 0.7;\n+  if (l != 0)\n+    v = 1.5 - v;\n+  return v;\n+}\n+\n+void\n+foo (int *a, int b, float *d, float *e, int *f)\n+{\n+  int i, l;\n+  for (l = 0; l != b; ++l)\n+    for (i = 0; i != 8; ++i)\n+      f[i] = e[i] + bar (a[i], d[i]);\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "611666f2c8633a646af0d097469789961249f102", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784fb9b322452e7f5e31e75be538ccf453335abb/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784fb9b322452e7f5e31e75be538ccf453335abb/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=784fb9b322452e7f5e31e75be538ccf453335abb", "patch": "@@ -892,7 +892,7 @@ expand_vector_condition (gimple_stmt_iterator *gsi)\n   int i;\n   location_t loc = gimple_location (gsi_stmt (*gsi));\n \n-  if (TREE_CODE (a) != SSA_NAME)\n+  if (!is_gimple_val (a))\n     {\n       gcc_assert (COMPARISON_CLASS_P (a));\n       a_is_comparison = true;"}, {"sha": "2f4be11703b0094f97cbc4fb510f9e4e6f496a55", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784fb9b322452e7f5e31e75be538ccf453335abb/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784fb9b322452e7f5e31e75be538ccf453335abb/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=784fb9b322452e7f5e31e75be538ccf453335abb", "patch": "@@ -5310,6 +5310,7 @@ vectorizable_condition (gimple stmt, gimple_stmt_iterator *gsi,\n   bb_vec_info bb_vinfo = STMT_VINFO_BB_VINFO (stmt_info);\n   VEC (tree, heap) *vec_oprnds0 = NULL, *vec_oprnds1 = NULL;\n   VEC (tree, heap) *vec_oprnds2 = NULL, *vec_oprnds3 = NULL;\n+  tree vec_cmp_type = vectype;\n \n   if (slp_node || PURE_SLP_STMT (stmt_info))\n     ncopies = 1;\n@@ -5382,6 +5383,15 @@ vectorizable_condition (gimple stmt, gimple_stmt_iterator *gsi,\n \t   && TREE_CODE (else_clause) != FIXED_CST)\n     return false;\n \n+  if (!INTEGRAL_TYPE_P (TREE_TYPE (vectype)))\n+    {\n+      unsigned int prec = GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (vectype)));\n+      tree cmp_type = build_nonstandard_integer_type (prec, 1);\n+      vec_cmp_type = get_same_sized_vectype (cmp_type, vectype);\n+      if (vec_cmp_type == NULL_TREE)\n+\treturn false;\n+    }\n+\n   if (!vec_stmt)\n     {\n       STMT_VINFO_TYPE (stmt_info) = condition_vec_info_type;\n@@ -5488,8 +5498,8 @@ vectorizable_condition (gimple stmt, gimple_stmt_iterator *gsi,\n           vec_then_clause = VEC_index (tree, vec_oprnds2, i);\n           vec_else_clause = VEC_index (tree, vec_oprnds3, i);\n \n-          vec_compare = build2 (TREE_CODE (cond_expr), vectype,\n-  \t\t\t       vec_cond_lhs, vec_cond_rhs);\n+\t  vec_compare = build2 (TREE_CODE (cond_expr), vec_cmp_type,\n+\t\t\t\tvec_cond_lhs, vec_cond_rhs);\n           vec_cond_expr = build3 (VEC_COND_EXPR, vectype,\n  \t\t         vec_compare, vec_then_clause, vec_else_clause);\n "}]}