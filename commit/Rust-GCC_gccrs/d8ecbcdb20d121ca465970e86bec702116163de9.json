{"sha": "d8ecbcdb20d121ca465970e86bec702116163de9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhlY2JjZGIyMGQxMjFjYTQ2NTk3MGU4NmJlYzcwMjExNjE2M2RlOQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2004-05-04T02:24:51Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2004-05-04T02:24:51Z"}, "message": "rs6000-protos.h: Protoize rs6000_hard_regno_nregs.\n\n\t* config/rs6000/rs6000-protos.h: Protoize rs6000_hard_regno_nregs.\n\n\t* config/rs6000/rs6000.c (rs6000_hard_regno_nregs): New.\n\n\t* config/rs6000/rs6000.h (HARD_REGNO_NREGS): Call\n\trs6000_hard_regno_nregs.\n\nFrom-SVN: r81467", "tree": {"sha": "024cb84c1af87981445ed879127e8a3b4f1d3b94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/024cb84c1af87981445ed879127e8a3b4f1d3b94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8ecbcdb20d121ca465970e86bec702116163de9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ecbcdb20d121ca465970e86bec702116163de9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8ecbcdb20d121ca465970e86bec702116163de9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ecbcdb20d121ca465970e86bec702116163de9/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f7e5a0df0c1766d3b1ed6c1a5c6a0b17f68fa94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7e5a0df0c1766d3b1ed6c1a5c6a0b17f68fa94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f7e5a0df0c1766d3b1ed6c1a5c6a0b17f68fa94"}], "stats": {"total": 60, "additions": 41, "deletions": 19}, "files": [{"sha": "f98f7cd328731519dd1e486f40f421159483a5cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ecbcdb20d121ca465970e86bec702116163de9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ecbcdb20d121ca465970e86bec702116163de9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8ecbcdb20d121ca465970e86bec702116163de9", "patch": "@@ -1,3 +1,12 @@\n+2004-05-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* config/rs6000/rs6000-protos.h: Protoize rs6000_hard_regno_nregs.\n+\n+\t* config/rs6000/rs6000.c (rs6000_hard_regno_nregs): New.\n+\n+\t* config/rs6000/rs6000.h (HARD_REGNO_NREGS): Call\n+\trs6000_hard_regno_nregs.\n+\n 2004-05-03  Eric Christopher  <echristo@redhat.com>\n \n \t* config/s390/s390.c (s390_emit_prologue): Call unspec tpf"}, {"sha": "93ed98a2581e58bc905fac01b966a1f28c01a5ac", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ecbcdb20d121ca465970e86bec702116163de9/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ecbcdb20d121ca465970e86bec702116163de9/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=d8ecbcdb20d121ca465970e86bec702116163de9", "patch": "@@ -201,6 +201,7 @@ extern int rs6000_memory_move_cost (enum machine_mode, enum reg_class, int);\n extern bool rs6000_tls_referenced_p (rtx);\n extern int rs6000_tls_symbol_ref (rtx, enum machine_mode);\n extern void rs6000_output_dwarf_dtprel (FILE*, int, rtx);\n+extern int rs6000_hard_regno_nregs (int, enum machine_mode);\n \n /* Declare functions in rs6000-c.c */\n "}, {"sha": "b188132c0670cbbcd552f5a8ed1b0b1c1e842528", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ecbcdb20d121ca465970e86bec702116163de9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ecbcdb20d121ca465970e86bec702116163de9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d8ecbcdb20d121ca465970e86bec702116163de9", "patch": "@@ -3343,6 +3343,34 @@ rs6000_mode_dependent_address (rtx addr)\n \n   return false;\n }\n+\n+/* Return number of consecutive hard regs needed starting at reg REGNO\n+   to hold something of mode MODE.\n+   This is ordinarily the length in words of a value of mode MODE\n+   but can be less for certain modes in special long registers.\n+\n+   For the SPE, GPRs are 64 bits but only 32 bits are visible in\n+   scalar instructions.  The upper 32 bits are only available to the\n+   SIMD instructions.\n+\n+   POWER and PowerPC GPRs hold 32 bits worth;\n+   PowerPC64 GPRs and FPRs point register holds 64 bits worth.  */\n+\n+int\n+rs6000_hard_regno_nregs (int regno, enum machine_mode mode)\n+{\n+  if (FP_REGNO_P (regno))\n+    return (GET_MODE_SIZE (mode) + UNITS_PER_FP_WORD - 1) / UNITS_PER_FP_WORD;\n+\n+  if (SPE_SIMD_REGNO_P (regno) && TARGET_SPE && SPE_VECTOR_MODE (mode))\n+    return (GET_MODE_SIZE (mode) + UNITS_PER_SPE_WORD - 1) / UNITS_PER_SPE_WORD;\n+\n+  if (ALTIVEC_REGNO_P (regno))\n+    return\n+      (GET_MODE_SIZE (mode) + UNITS_PER_ALTIVEC_WORD - 1) / UNITS_PER_ALTIVEC_WORD;\n+\n+  return (GET_MODE_SIZE (mode) + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n+}\n \f\n /* Try to output insns to set TARGET equal to the constant C if it can\n    be done in less than N insns.  Do all computations in MODE."}, {"sha": "dc574279304d756151f2766fd5e53c205fe2d118", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8ecbcdb20d121ca465970e86bec702116163de9/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8ecbcdb20d121ca465970e86bec702116163de9/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=d8ecbcdb20d121ca465970e86bec702116163de9", "patch": "@@ -997,25 +997,9 @@ extern const char *rs6000_warn_altivec_long_switch;\n #define ALTIVEC_REGNO_P(N) ((N) >= FIRST_ALTIVEC_REGNO && (N) <= LAST_ALTIVEC_REGNO)\n \n /* Return number of consecutive hard regs needed starting at reg REGNO\n-   to hold something of mode MODE.\n-   This is ordinarily the length in words of a value of mode MODE\n-   but can be less for certain modes in special long registers.\n-\n-   For the SPE, GPRs are 64 bits but only 32 bits are visible in\n-   scalar instructions.  The upper 32 bits are only available to the\n-   SIMD instructions.\n-\n-   POWER and PowerPC GPRs hold 32 bits worth;\n-   PowerPC64 GPRs and FPRs point register holds 64 bits worth.  */\n-\n-#define HARD_REGNO_NREGS(REGNO, MODE)\t\t\t\t\t\\\n-  (FP_REGNO_P (REGNO)\t\t\t\t\t\t\t\\\n-   ? ((GET_MODE_SIZE (MODE) + UNITS_PER_FP_WORD - 1) / UNITS_PER_FP_WORD) \\\n-   : (SPE_SIMD_REGNO_P (REGNO) && TARGET_SPE && SPE_VECTOR_MODE (MODE))   \\\n-   ? ((GET_MODE_SIZE (MODE) + UNITS_PER_SPE_WORD - 1) / UNITS_PER_SPE_WORD) \\\n-   : ALTIVEC_REGNO_P (REGNO)\t\t\t\t\t\t\\\n-   ? ((GET_MODE_SIZE (MODE) + UNITS_PER_ALTIVEC_WORD - 1) / UNITS_PER_ALTIVEC_WORD) \\\n-   : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n+   to hold something of mode MODE.  */\n+\n+#define HARD_REGNO_NREGS(REGNO, MODE) rs6000_hard_regno_nregs ((REGNO), (MODE))\n \n #define HARD_REGNO_CALL_PART_CLOBBERED(REGNO, MODE)\t\\\n   ((TARGET_32BIT && TARGET_POWERPC64\t\t\t\\"}]}