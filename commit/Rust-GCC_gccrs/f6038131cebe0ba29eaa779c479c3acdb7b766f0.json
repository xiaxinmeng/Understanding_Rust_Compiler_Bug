{"sha": "f6038131cebe0ba29eaa779c479c3acdb7b766f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYwMzgxMzFjZWJlMGJhMjllYWE3NzljNDc5YzNhY2RiN2I3NjZmMA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-08-13T11:16:16Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-08-13T11:16:16Z"}, "message": "re PR fortran/40995 (Spurious \"Type specified for intrinsic function...ignored\" message)\n\n2009-08-13  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/40995\n\t* resolve.c (resolve_symbol): Move some checking code to\n\tresolve_intrinsic, and call this from here.\n\t(resolve_intrinsic): Some checking code moved here from resolve_symbol.\n\tMake sure each intrinsic is only resolved once.\n\n2009-08-13  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/40995\n\t* gfortran.dg/intrinsic_4.f90: New.\n\t* gfortran.dg/intrinsic_subroutine.f90: An error message moved to a\n\tdifferent line.\n\nFrom-SVN: r150716", "tree": {"sha": "739c2704897863774c04c78ec5b29c1a589bf82d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/739c2704897863774c04c78ec5b29c1a589bf82d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6038131cebe0ba29eaa779c479c3acdb7b766f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6038131cebe0ba29eaa779c479c3acdb7b766f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6038131cebe0ba29eaa779c479c3acdb7b766f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6038131cebe0ba29eaa779c479c3acdb7b766f0/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5fdcd8cc54cacb910bd9730ce60626b155f1bb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5fdcd8cc54cacb910bd9730ce60626b155f1bb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5fdcd8cc54cacb910bd9730ce60626b155f1bb1"}], "stats": {"total": 133, "additions": 79, "deletions": 54}, "files": [{"sha": "a07ee12aef3fa448b078f3f6c9d93e843b278243", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6038131cebe0ba29eaa779c479c3acdb7b766f0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6038131cebe0ba29eaa779c479c3acdb7b766f0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f6038131cebe0ba29eaa779c479c3acdb7b766f0", "patch": "@@ -1,3 +1,11 @@\n+2009-08-13  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/40995\n+\t* resolve.c (resolve_symbol): Move some checking code to\n+\tresolve_intrinsic, and call this from here.\n+\t(resolve_intrinsic): Some checking code moved here from resolve_symbol.\n+\tMake sure each intrinsic is only resolved once.\n+\n 2009-08-12  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/41034"}, {"sha": "bc71af185df9c3da52fbb2fc6be4db2926a0cc20", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 50, "deletions": 52, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6038131cebe0ba29eaa779c479c3acdb7b766f0/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6038131cebe0ba29eaa779c479c3acdb7b766f0/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=f6038131cebe0ba29eaa779c479c3acdb7b766f0", "patch": "@@ -1148,24 +1148,64 @@ is_illegal_recursion (gfc_symbol* sym, gfc_namespace* context)\n static gfc_try\n resolve_intrinsic (gfc_symbol *sym, locus *loc)\n {\n-  gfc_intrinsic_sym *isym = gfc_find_function (sym->name);\n-  if (isym)\n+  gfc_intrinsic_sym* isym;\n+  const char* symstd;\n+\n+  if (sym->formal)\n+    return SUCCESS;\n+\n+  /* We already know this one is an intrinsic, so we don't call\n+     gfc_is_intrinsic for full checking but rather use gfc_find_function and\n+     gfc_find_subroutine directly to check whether it is a function or\n+     subroutine.  */\n+\n+  if ((isym = gfc_find_function (sym->name)))\n     {\n+      if (sym->ts.type != BT_UNKNOWN && gfc_option.warn_surprising\n+\t  && !sym->attr.implicit_type)\n+\tgfc_warning (\"Type specified for intrinsic function '%s' at %L is\"\n+\t\t      \" ignored\", sym->name, &sym->declared_at);\n+\n       if (!sym->attr.function &&\n \t  gfc_add_function (&sym->attr, sym->name, loc) == FAILURE)\n \treturn FAILURE;\n+\n       sym->ts = isym->ts;\n     }\n-  else\n+  else if ((isym = gfc_find_subroutine (sym->name)))\n     {\n-      isym = gfc_find_subroutine (sym->name);\n-      gcc_assert (isym);\n+      if (sym->ts.type != BT_UNKNOWN && !sym->attr.implicit_type)\n+\t{\n+\t  gfc_error (\"Intrinsic subroutine '%s' at %L shall not have a type\"\n+\t\t      \" specifier\", sym->name, &sym->declared_at);\n+\t  return FAILURE;\n+\t}\n+\n       if (!sym->attr.subroutine &&\n \t  gfc_add_subroutine (&sym->attr, sym->name, loc) == FAILURE)\n \treturn FAILURE;\n     }\n-  if (!sym->formal)\n-    gfc_copy_formal_args_intr (sym, isym);\n+  else\n+    {\n+      gfc_error (\"'%s' declared INTRINSIC at %L does not exist\", sym->name,\n+\t\t &sym->declared_at);\n+      return FAILURE;\n+    }\n+\n+  gfc_copy_formal_args_intr (sym, isym);\n+\n+  /* Check it is actually available in the standard settings.  */\n+  if (gfc_check_intrinsic_standard (isym, &symstd, false, sym->declared_at)\n+      == FAILURE)\n+    {\n+      gfc_error (\"The intrinsic '%s' declared INTRINSIC at %L is not\"\n+\t\t \" available in the current standard settings but %s.  Use\"\n+\t\t \" an appropriate -std=* option or enable -fall-intrinsics\"\n+\t\t \" in order to use it.\",\n+\t\t sym->name, &sym->declared_at, symstd);\n+      return FAILURE;\n+    }\n+\n   return SUCCESS;\n }\n \n@@ -9944,51 +9984,9 @@ resolve_symbol (gfc_symbol *sym)\n   /* Make sure that the intrinsic is consistent with its internal \n      representation. This needs to be done before assigning a default \n      type to avoid spurious warnings.  */\n-  if (sym->attr.flavor != FL_MODULE && sym->attr.intrinsic)\n-    {\n-      gfc_intrinsic_sym* isym;\n-      const char* symstd;\n-\n-      /* We already know this one is an intrinsic, so we don't call\n-\t gfc_is_intrinsic for full checking but rather use gfc_find_function and\n-\t gfc_find_subroutine directly to check whether it is a function or\n-\t subroutine.  */\n-\n-      if ((isym = gfc_find_function (sym->name)))\n-\t{\n-\t  if (sym->ts.type != BT_UNKNOWN && gfc_option.warn_surprising\n-\t      && !sym->attr.implicit_type)\n-\t    gfc_warning (\"Type specified for intrinsic function '%s' at %L is\"\n-\t\t\t \" ignored\", sym->name, &sym->declared_at);\n-\t}\n-      else if ((isym = gfc_find_subroutine (sym->name)))\n-\t{\n-\t  if (sym->ts.type != BT_UNKNOWN && !sym->attr.implicit_type)\n-\t    {\n-\t      gfc_error (\"Intrinsic subroutine '%s' at %L shall not have a type\"\n-\t\t\t \" specifier\", sym->name, &sym->declared_at);\n-\t      return;\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  gfc_error (\"'%s' declared INTRINSIC at %L does not exist\",\n-\t\t     sym->name, &sym->declared_at);\n-\t  return;\n-\t}\n-\n-      /* Check it is actually available in the standard settings.  */\n-      if (gfc_check_intrinsic_standard (isym, &symstd, false, sym->declared_at)\n-\t    == FAILURE)\n-\t{\n-\t  gfc_error (\"The intrinsic '%s' declared INTRINSIC at %L is not\"\n-\t\t     \" available in the current standard settings but %s.  Use\"\n-                     \" an appropriate -std=* option or enable -fall-intrinsics\"\n-                     \" in order to use it.\",\n-                     sym->name, &sym->declared_at, symstd);\n-\t  return;\n-\t}\n-     }\n+  if (sym->attr.flavor != FL_MODULE && sym->attr.intrinsic\n+      && resolve_intrinsic (sym, &sym->declared_at) == FAILURE)\n+    return;\n \n   /* Assign default type to symbols that need one and don't have one.  */\n   if (sym->ts.type == BT_UNKNOWN)"}, {"sha": "25fc2bc102bb9cf5b091ffada951b0a64dd55340", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6038131cebe0ba29eaa779c479c3acdb7b766f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6038131cebe0ba29eaa779c479c3acdb7b766f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f6038131cebe0ba29eaa779c479c3acdb7b766f0", "patch": "@@ -1,3 +1,10 @@\n+2009-08-13  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/40995\n+\t* gfortran.dg/intrinsic_4.f90: New.\n+\t* gfortran.dg/intrinsic_subroutine.f90: An error message moved to a\n+\tdifferent line.\n+\n 2009-08-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/41047"}, {"sha": "300dfde1fde50c6a58abead4634e576deda18c1f", "filename": "gcc/testsuite/gfortran.dg/intrinsic_4.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6038131cebe0ba29eaa779c479c3acdb7b766f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6038131cebe0ba29eaa779c479c3acdb7b766f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_4.f90?ref=f6038131cebe0ba29eaa779c479c3acdb7b766f0", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do compile }\n+! { dg-options \"-Wsurprising\" }\n+!\n+! PR 40995: [4.5 Regression] Spurious \"Type specified for intrinsic function...ignored\" message\n+!\n+! Contributed by Mat Cross <mathewc@nag.co.uk>\n+\n+subroutine sub(n,x)\n+  intrinsic abs\n+  integer n, x(abs(n))\n+end\n+"}, {"sha": "d3f84cdf17f97bb53b6e65c16f641ce211264fc0", "filename": "gcc/testsuite/gfortran.dg/intrinsic_subroutine.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6038131cebe0ba29eaa779c479c3acdb7b766f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_subroutine.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6038131cebe0ba29eaa779c479c3acdb7b766f0/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_subroutine.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_subroutine.f90?ref=f6038131cebe0ba29eaa779c479c3acdb7b766f0", "patch": "@@ -1,7 +1,7 @@\n ! { dg-do compile }\n ! PR 33229\n implicit none\n-intrinsic cpu_time\n+intrinsic cpu_time  ! { dg-error \"attribute conflicts with\" }\n real :: time\n-print *, CPU_TIME(TIME)  ! { dg-error \"attribute conflicts with\" }\n+print *, CPU_TIME(TIME)  ! { dg-error \"is not a function\" }\n end"}]}