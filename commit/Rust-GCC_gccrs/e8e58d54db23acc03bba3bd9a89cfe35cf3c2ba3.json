{"sha": "e8e58d54db23acc03bba3bd9a89cfe35cf3c2ba3", "node_id": "C_kwDOANBUbNoAKGU4ZTU4ZDU0ZGIyM2FjYzAzYmJhM2JkOWE4OWNmZTM1Y2YzYzJiYTM", "commit": {"author": {"name": "Faisal Abbas", "email": "90.abbasfaisal@gmail.com", "date": "2022-07-30T19:28:13Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-25T11:40:26Z"}, "message": "rust-constexpr.cc: port over cxx_eval_logical_expression", "tree": {"sha": "f6c137428568e6694e87200605f5fab959ef8df4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6c137428568e6694e87200605f5fab959ef8df4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8e58d54db23acc03bba3bd9a89cfe35cf3c2ba3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8e58d54db23acc03bba3bd9a89cfe35cf3c2ba3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8e58d54db23acc03bba3bd9a89cfe35cf3c2ba3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8e58d54db23acc03bba3bd9a89cfe35cf3c2ba3/comments", "author": {"login": "abbasfaisal", "id": 9428333, "node_id": "MDQ6VXNlcjk0MjgzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/9428333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abbasfaisal", "html_url": "https://github.com/abbasfaisal", "followers_url": "https://api.github.com/users/abbasfaisal/followers", "following_url": "https://api.github.com/users/abbasfaisal/following{/other_user}", "gists_url": "https://api.github.com/users/abbasfaisal/gists{/gist_id}", "starred_url": "https://api.github.com/users/abbasfaisal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abbasfaisal/subscriptions", "organizations_url": "https://api.github.com/users/abbasfaisal/orgs", "repos_url": "https://api.github.com/users/abbasfaisal/repos", "events_url": "https://api.github.com/users/abbasfaisal/events{/privacy}", "received_events_url": "https://api.github.com/users/abbasfaisal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30b2f58b544acfa8a90cc4f0cf5d6ae7e0956f37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30b2f58b544acfa8a90cc4f0cf5d6ae7e0956f37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30b2f58b544acfa8a90cc4f0cf5d6ae7e0956f37"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "357caef694684b9f9c9db0c8b039168e86b1db3f", "filename": "gcc/rust/backend/rust-constexpr.cc", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8e58d54db23acc03bba3bd9a89cfe35cf3c2ba3/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8e58d54db23acc03bba3bd9a89cfe35cf3c2ba3/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-constexpr.cc?ref=e8e58d54db23acc03bba3bd9a89cfe35cf3c2ba3", "patch": "@@ -909,6 +909,32 @@ rs_eval_indirect_ref (const constexpr_ctx *ctx, tree t, bool lval,\n   return r;\n }\n \n+// forked from gcc/cp/constexpr.cc cxx_eval_logical_expression\n+\n+/* Subroutine of cxx_eval_constant_expression.\n+   Evaluate a short-circuited logical expression T in the context\n+   of a given constexpr CALL.  BAILOUT_VALUE is the value for\n+   early return.  CONTINUE_VALUE is used here purely for\n+   sanity check purposes.  */\n+\n+static tree\n+eval_logical_expression (const constexpr_ctx *ctx, tree t, tree bailout_value,\n+\t\t\t tree continue_value, bool lval, bool *non_constant_p,\n+\t\t\t bool *overflow_p)\n+{\n+  tree r;\n+  tree lhs = eval_constant_expression (ctx, TREE_OPERAND (t, 0), lval,\n+\t\t\t\t       non_constant_p, overflow_p);\n+  VERIFY_CONSTANT (lhs);\n+  if (tree_int_cst_equal (lhs, bailout_value))\n+    return lhs;\n+  gcc_assert (tree_int_cst_equal (lhs, continue_value));\n+  r = eval_constant_expression (ctx, TREE_OPERAND (t, 1), lval, non_constant_p,\n+\t\t\t\toverflow_p);\n+  VERIFY_CONSTANT (r);\n+  return r;\n+}\n+\n static tree\n eval_constant_expression (const constexpr_ctx *ctx, tree t, bool lval,\n \t\t\t  bool *non_constant_p, bool *overflow_p,\n@@ -1022,6 +1048,22 @@ eval_constant_expression (const constexpr_ctx *ctx, tree t, bool lval,\n       r = eval_binary_expression (ctx, t, false, non_constant_p, overflow_p);\n       break;\n \n+      /* fold can introduce non-IF versions of these; still treat them as\n+\t short-circuiting.  */\n+    case TRUTH_AND_EXPR:\n+    case TRUTH_ANDIF_EXPR:\n+      r = eval_logical_expression (ctx, t, boolean_false_node,\n+\t\t\t\t   boolean_true_node, lval, non_constant_p,\n+\t\t\t\t   overflow_p);\n+      break;\n+\n+    case TRUTH_OR_EXPR:\n+    case TRUTH_ORIF_EXPR:\n+      r = eval_logical_expression (ctx, t, boolean_true_node,\n+\t\t\t\t   boolean_false_node, lval, non_constant_p,\n+\t\t\t\t   overflow_p);\n+      break;\n+\n     case CALL_EXPR:\n       r = eval_call_expression (ctx, t, false, non_constant_p, overflow_p);\n       break;"}]}