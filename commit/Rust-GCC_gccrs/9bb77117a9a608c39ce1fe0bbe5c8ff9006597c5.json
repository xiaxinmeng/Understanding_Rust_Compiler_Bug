{"sha": "9bb77117a9a608c39ce1fe0bbe5c8ff9006597c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJiNzcxMTdhOWE2MDhjMzljZTFmZTBiYmU1YzhmZjkwMDY1OTdjNQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1992-12-08T16:54:51Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1992-12-08T16:54:51Z"}, "message": "* pa.c (shadd_operand): Newfunction.\n\nFrom-SVN: r2850", "tree": {"sha": "6b244a8ca981b9eae06271552b44006d564a1794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b244a8ca981b9eae06271552b44006d564a1794"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bb77117a9a608c39ce1fe0bbe5c8ff9006597c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bb77117a9a608c39ce1fe0bbe5c8ff9006597c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bb77117a9a608c39ce1fe0bbe5c8ff9006597c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bb77117a9a608c39ce1fe0bbe5c8ff9006597c5/comments", "author": null, "committer": null, "parents": [{"sha": "a603c4aa001a2620029526f8dca77b3e53dcb54c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a603c4aa001a2620029526f8dca77b3e53dcb54c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a603c4aa001a2620029526f8dca77b3e53dcb54c"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "0cd457628a18873c01ade509337a0ac0f0773b61", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb77117a9a608c39ce1fe0bbe5c8ff9006597c5/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb77117a9a608c39ce1fe0bbe5c8ff9006597c5/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=9bb77117a9a608c39ce1fe0bbe5c8ff9006597c5", "patch": "@@ -2520,3 +2520,18 @@ function_label_operand  (op, mode)\n {\n   return GET_CODE (op) == SYMBOL_REF && FUNCTION_NAME_P (XSTR (op, 0));\n }\n+\n+/* Return 1 if OP is suitable for the second add operand (the unshifed \n+   operand) in an shadd instruction.   Allow CONST_INT to work around\n+   a reload bug.  */\n+int\n+shadd_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (GET_CODE (op) == REG)\n+    return 1;\n+  if (GET_CODE (op) == CONST_INT)\n+    return 1;\n+  return 0;\n+}"}, {"sha": "cf95448dfc0763d5f7498f7c8caaaabe50513a47", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb77117a9a608c39ce1fe0bbe5c8ff9006597c5/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb77117a9a608c39ce1fe0bbe5c8ff9006597c5/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=9bb77117a9a608c39ce1fe0bbe5c8ff9006597c5", "patch": "@@ -2039,29 +2039,29 @@\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"1\")])\n \n-;; Using nonmemory_operand works around a bug in reload.  For 2.4 fix\n+;; Using shadd_operand works around a bug in reload.  For 2.4 fix\n ;; reload and use register_operand instead.\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (mult:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t\t  (const_int 2))\n-\t\t (match_operand:SI 1 \"nonmemory_operand\" \"r\")))]\n+\t\t (match_operand:SI 1 \"shadd_operand\" \"r\")))]\n   \"\"\n   \"sh1add %2,%1,%0\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (mult:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t\t  (const_int 4))\n-\t\t (match_operand:SI 1 \"nonmemory_operand\" \"r\")))]\n+\t\t (match_operand:SI 1 \"shadd_operand\" \"r\")))]\n   \"\"\n   \"sh2add %2,%1,%0\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (mult:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t\t  (const_int 8))\n-\t\t (match_operand:SI 1 \"nonmemory_operand\" \"r\")))]\n+\t\t (match_operand:SI 1 \"shadd_operand\" \"r\")))]\n   \"\"\n   \"sh3add %2,%1,%0\")\n "}]}