{"sha": "80439563c5704b4daca5e0dbc898771523354645", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA0Mzk1NjNjNTcwNGI0ZGFjYTVlMGRiYzg5ODc3MTUyMzM1NDY0NQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-11-01T00:07:10Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-11-01T00:07:10Z"}, "message": "re PR c++/15172 (Copy constructor optimization in aggregate initialization)\n\n\tPR c++/15172\n\t* typeck2.c (store_init_value): Use split_nonconstant_init even\n\tfor types that require construction.\n\n\tPR c++/15172\n\t* g++.dg/init/aggr2.C: New test.\n\nFrom-SVN: r89922", "tree": {"sha": "ec81a164c2f746c8558e3f7779a015d4d716b7c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec81a164c2f746c8558e3f7779a015d4d716b7c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80439563c5704b4daca5e0dbc898771523354645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80439563c5704b4daca5e0dbc898771523354645", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80439563c5704b4daca5e0dbc898771523354645", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80439563c5704b4daca5e0dbc898771523354645/comments", "author": null, "committer": null, "parents": [{"sha": "8d511b90979177c471d1b96aad76ec064bd3b517", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d511b90979177c471d1b96aad76ec064bd3b517", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d511b90979177c471d1b96aad76ec064bd3b517"}], "stats": {"total": 83, "additions": 66, "deletions": 17}, "files": [{"sha": "3337312dc7edf04a32b0fa78cc991a608c3fcfe4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80439563c5704b4daca5e0dbc898771523354645/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80439563c5704b4daca5e0dbc898771523354645/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=80439563c5704b4daca5e0dbc898771523354645", "patch": "@@ -1,3 +1,9 @@\n+2004-10-31  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/15172\n+\t* typeck2.c (store_init_value): Use split_nonconstant_init even\n+\tfor types that require construction.\n+\t\n 1004-10-28  Matt Austern  <austern@apple.com>\n \n \tPR c++/17542"}, {"sha": "46cbaeaa079106a96fa44c03de5dfb8da3331c39", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80439563c5704b4daca5e0dbc898771523354645/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80439563c5704b4daca5e0dbc898771523354645/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=80439563c5704b4daca5e0dbc898771523354645", "patch": "@@ -604,24 +604,16 @@ store_init_value (tree decl, tree init)\n \n   /* Digest the specified initializer into an expression.  */\n   value = digest_init (type, init, (tree *) 0);\n-\n-  /* Store the expression if valid; else report error.  */\n-\n-  if (TREE_CODE (value) == ERROR_MARK)\n-    ;\n-  /* Other code expects that initializers for objects of types that need\n-     constructing never make it into DECL_INITIAL, and passes 'init' to\n-     build_aggr_init without checking DECL_INITIAL.  So just return.  */\n-  else if (TYPE_NEEDS_CONSTRUCTING (type))\n-    return build2 (INIT_EXPR, type, decl, value);\n-  else if (TREE_STATIC (decl)\n-\t   && (TREE_SIDE_EFFECTS (value)\n-\t       || ! initializer_constant_valid_p (value, TREE_TYPE (value))))\n+  /* If the initializer is not a constant, fill in DECL_INITIAL with\n+     the bits that are constant, and then return an expression that\n+     will perform the dynamic initialization.  */\n+  if (value != error_mark_node\n+      && (TREE_SIDE_EFFECTS (value)\n+\t   || ! initializer_constant_valid_p (value, TREE_TYPE (value))))\n     return split_nonconstant_init (decl, value);\n-  \n-  /* Store the VALUE in DECL_INITIAL.  If we're building a\n-     statement-tree we will actually expand the initialization later\n-     when we output this function.  */\n+  /* If the value is a constant, just put it in DECL_INITIAL.  If DECL\n+     is an automatic variable, the middle end will turn this into a\n+     dynamic initialization later.  */\n   DECL_INITIAL (decl) = value;\n   return NULL_TREE;\n }"}, {"sha": "994723eb5c42eb8bda1ae051b5c0e12522bf97b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80439563c5704b4daca5e0dbc898771523354645/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80439563c5704b4daca5e0dbc898771523354645/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=80439563c5704b4daca5e0dbc898771523354645", "patch": "@@ -1,3 +1,8 @@\n+2004-10-31  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/15172\n+\t* g++.dg/init/aggr2.C: New test.\n+\n 2004-10-30  Ziemowit Laski  <zlaski@apple.com>\n \n \t* objc.dg/local-decl-1.m: New test."}, {"sha": "97dbeb6190b80da608ce80ab9cf7369c6aa7278f", "filename": "gcc/testsuite/g++.dg/init/aggr2.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80439563c5704b4daca5e0dbc898771523354645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faggr2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80439563c5704b4daca5e0dbc898771523354645/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faggr2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faggr2.C?ref=80439563c5704b4daca5e0dbc898771523354645", "patch": "@@ -0,0 +1,46 @@\n+// PR c++/15172\n+// { dg-do run }\n+\n+extern \"C\" int printf (const char *, ...);\n+extern \"C\" void abort ();\n+\n+struct A {\n+  static A* p;\n+\n+  A() { p = this; }\n+  A(const A&);\n+  ~A() { if (this != p) abort (); }\n+  void print () { }\n+};\n+\n+A* A::p;\n+\n+struct B {\n+  A a;\n+};\n+\n+B b = { A () };\n+\n+struct A2 {\n+  static A2* p;\n+\n+  A2() { p = this; }\n+  A2(const A2&);\n+  ~A2() { if (this != p) abort (); }\n+  void print () { }\n+};\n+\n+A2* A2::p;\n+\n+struct B2 {\n+  A2 a2;\n+};\n+\n+int main () {\n+  b.a.print ();\n+  {\n+    B2 b2 = { A2() };\n+    b2.a2.print ();\n+  }\n+} \n+    "}]}