{"sha": "e541461a498d47602918a711290095ed28041355", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU0MTQ2MWE0OThkNDc2MDI5MThhNzExMjkwMDk1ZWQyODA0MTM1NQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-10-31T15:54:00Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-10-31T15:54:00Z"}, "message": "complex.cc (arg, polar): Comment out specializations.\n\n\t* src/complex.cc (arg, polar): Comment out specializations.\n\n\t* include/bits/std_complex.h (complex<>): Remove arg<> friend\n\tdeclaration.\n\t(arg): Define primary template.\n\t(polar): Likewise.\n\t(conj): Likewise.\n\nFrom-SVN: r37159", "tree": {"sha": "a44226106d4183bee1f0ead2ec3bf88797338b8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a44226106d4183bee1f0ead2ec3bf88797338b8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e541461a498d47602918a711290095ed28041355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e541461a498d47602918a711290095ed28041355", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e541461a498d47602918a711290095ed28041355", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e541461a498d47602918a711290095ed28041355/comments", "author": null, "committer": null, "parents": [{"sha": "4b9580a58c86cfec3643012e7d7e6f497893a341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b9580a58c86cfec3643012e7d7e6f497893a341", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b9580a58c86cfec3643012e7d7e6f497893a341"}], "stats": {"total": 83, "additions": 50, "deletions": 33}, "files": [{"sha": "ea5cc1d2992acffc09303ad27c6e15c1fe9f1e86", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e541461a498d47602918a711290095ed28041355/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e541461a498d47602918a711290095ed28041355/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e541461a498d47602918a711290095ed28041355", "patch": "@@ -1,3 +1,13 @@\n+2000-10-31  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* src/complex.cc (arg, polar): Comment out specializations.\n+\n+\t* include/bits/std_complex.h (complex<>): Remove arg<> friend\n+\tdeclaration. \n+\t(arg): Define primary template.\n+\t(polar): Likewise.\n+\t(conj): Likewise.\n+\n 2000-10-31  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* include/c/bits/std_cwctype.h: #undef possible function-like"}, {"sha": "349d2dc6fd6a83d176dcd7fb85ebfafb261a4761", "filename": "libstdc++-v3/include/bits/std_complex.h", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e541461a498d47602918a711290095ed28041355/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e541461a498d47602918a711290095ed28041355/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h?ref=e541461a498d47602918a711290095ed28041355", "patch": "@@ -177,7 +177,6 @@ namespace std\n     friend class complex<long double>;\n \n     // friend float abs<>(const complex<float>&);\n-    friend float arg<>(const complex<float>&);\n \n     friend complex<float> conj<>(const complex<float>&);\n \n@@ -254,7 +253,6 @@ namespace std\n     friend class complex<long double>;\n \n     // friend double abs<>(const complex<double>&);\n-    friend double arg<>(const complex<double>&);\n \n     friend complex<double> conj<>(const complex<double>&);\n     friend complex<double> cos<>(const complex<double>&);\n@@ -331,7 +329,6 @@ namespace std\n     friend class complex<double>;\n \n     // friend long double abs<>(const complex<long double>&);\n-    friend long double arg<>(const complex<long double>&);\n \n     friend complex<long double> conj<>(const complex<long double>&);\n     friend complex<long double> cos<>(const complex<long double>&);\n@@ -886,12 +883,12 @@ namespace std\n   template<typename _Tp>\n     inline bool\n     operator==(const complex<_Tp>& __x, const _Tp& __y)\n-    { return __x.real() == __y && __x.imag() == 0; }\n+    { return __x.real() == __y && __x.imag() == _Tp(); }\n \n   template<typename _Tp>\n     inline bool\n     operator==(const _Tp& __x, const complex<_Tp>& __y)\n-    { return __x == __y.real() && 0 == __y.imag(); }\n+    { return __x == __y.real() && _Tp() == __y.imag(); }\n \n   template<typename _Tp>\n     inline bool\n@@ -901,12 +898,12 @@ namespace std\n   template<typename _Tp>\n     inline bool\n     operator!=(const complex<_Tp>& __x, const _Tp& __y)\n-    { return __x.real() != __y || __x.imag() != 0; }\n+    { return __x.real() != __y || __x.imag() != _Tp(); }\n \n   template<typename _Tp>\n     inline bool\n     operator!=(const _Tp& __x, const complex<_Tp>& __y)\n-    { return __x != __y.real() || 0 != __y.imag(); }\n+    { return __x != __y.real() || _Tp() != __y.imag(); }\n \n   template<typename _Tp, typename _CharT, class _Traits>\n     basic_istream<_CharT, _Traits>&\n@@ -940,7 +937,22 @@ namespace std\n       __x /= __s; __y /= __s;\n       return __s * sqrt(__x * __x + __y * __y);\n     }\n-    \n+\n+  template<typename _Tp>\n+    inline _Tp\n+    arg(const complex<_Tp>& __z)\n+    { return atan2(__z.imag(), __z.real()); }\n+\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    polar(const _Tp& __rho, const _Tp& __theta)\n+    { return complex<_Tp>(__rho * cos(__theta), __rho * sin(__theta)); }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    conj(const complex<_Tp>& __z)\n+    { return complex<_Tp>(__z.real(), -__z.imag()); }\n \n   // We use here a few more specializations.\n   template<>"}, {"sha": "d1c5df237d49b9338713ad465529283302ce85d0", "filename": "libstdc++-v3/src/complex.cc", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e541461a498d47602918a711290095ed28041355/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e541461a498d47602918a711290095ed28041355/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc?ref=e541461a498d47602918a711290095ed28041355", "patch": "@@ -54,27 +54,27 @@ namespace std\n //      return hypot (__real__ __x._M_value, __imag__ __x._M_value); \n //    }\n \n-  template<>\n-  FLT\n-  arg(const complex<FLT>& __x)\n-  { return carg(__x._M_value); }\n+//    template<>\n+//    FLT\n+//    arg(const complex<FLT>& __x)\n+//    { return carg(__x._M_value); }\n \n-  template<>\n-  complex<FLT>\n-  polar(const FLT& __rho, const FLT& __theta)\n-  {\n-#if 0\n-// XXX\n-// defined(_GLIBCPP_HAVE_SINCOS) && !defined(__osf__)\n-    // Although sincos does exist on OSF3.2 and OSF4.0 we cannot use it\n-    // since the necessary types are not defined in the headers.\n-    FLT __sinx, __cosx;\n-    sincos(__theta, &__sinx, &__cosx);\n-    return complex<FLT>(__rho * __cosx, __rho * __sinx);\n-#else\n-    return complex<FLT>(__rho * cos(__theta), __rho * sin(__theta));\n-#endif\n-  }\n+//    template<>\n+//    complex<FLT>\n+//    polar(const FLT& __rho, const FLT& __theta)\n+//    {\n+//  #if 0\n+//  // XXX\n+//  // defined(_GLIBCPP_HAVE_SINCOS) && !defined(__osf__)\n+//      // Although sincos does exist on OSF3.2 and OSF4.0 we cannot use it\n+//      // since the necessary types are not defined in the headers.\n+//      FLT __sinx, __cosx;\n+//      sincos(__theta, &__sinx, &__cosx);\n+//      return complex<FLT>(__rho * __cosx, __rho * __sinx);\n+//  #else\n+//      return complex<FLT>(__rho * cos(__theta), __rho * sin(__theta));\n+//  #endif\n+//    }\n \n   template<>\n   complex<FLT>\n@@ -147,8 +147,3 @@ namespace std\n   { return complex<FLT>(ctanh(__x._M_value)); }\n   \n } // namespace std\n-\n-\n-\n-\n-"}]}