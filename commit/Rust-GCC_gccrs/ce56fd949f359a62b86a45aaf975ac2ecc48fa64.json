{"sha": "ce56fd949f359a62b86a45aaf975ac2ecc48fa64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U1NmZkOTQ5ZjM1OWE2MmI4NmE0NWFhZjk3NWFjMmVjYzQ4ZmE2NA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-28T15:46:18Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-28T16:04:20Z"}, "message": "d: Merge upstream dmd 8508c4e68.\n\nFixes a performance bug where 'static foreach' would take an\nexponentially long time to expand during CTFE.\n\nIn the following example:\n\n    static foreach (i; 0..30000) {}\n\nCompilation time had been reduced from around 40 to 0.08 seconds.\nMemory consumption is also reduced from 3.5GB to 55MB.\n\nReviewed-on: https://github.com/dlang/dmd/pull/11335\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd 8508c4e68.", "tree": {"sha": "dcaa656a7457469c1b72556b0f88eaa377680dd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcaa656a7457469c1b72556b0f88eaa377680dd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce56fd949f359a62b86a45aaf975ac2ecc48fa64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce56fd949f359a62b86a45aaf975ac2ecc48fa64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce56fd949f359a62b86a45aaf975ac2ecc48fa64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce56fd949f359a62b86a45aaf975ac2ecc48fa64/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b62cac6d92ff251213753475b69ec0b269cb7fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b62cac6d92ff251213753475b69ec0b269cb7fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b62cac6d92ff251213753475b69ec0b269cb7fae"}], "stats": {"total": 75, "additions": 61, "deletions": 14}, "files": [{"sha": "b99e9f3353d990381ee67dd5bb321a4263713306", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce56fd949f359a62b86a45aaf975ac2ecc48fa64/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce56fd949f359a62b86a45aaf975ac2ecc48fa64/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=ce56fd949f359a62b86a45aaf975ac2ecc48fa64", "patch": "@@ -1,4 +1,4 @@\n-4be011355dd2c5e2e54b99f9369d5faeabca2ca5\n+8508c4e683f065eb3deab76b610f7fecb3258a8e\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "beda133ffdb64c9f5afff181912e9b59220ef922", "filename": "gcc/d/dmd/cond.c", "status": "modified", "additions": 60, "deletions": 13, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce56fd949f359a62b86a45aaf975ac2ecc48fa64/gcc%2Fd%2Fdmd%2Fcond.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce56fd949f359a62b86a45aaf975ac2ecc48fa64/gcc%2Fd%2Fdmd%2Fcond.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcond.c?ref=ce56fd949f359a62b86a45aaf975ac2ecc48fa64", "patch": "@@ -92,13 +92,23 @@ static void lowerArrayAggregate(StaticForeach *sfe, Scope *sc)\n     el = el->ctfeInterpret();\n     if (el->op == TOKint64)\n     {\n-        dinteger_t length = el->toInteger();\n-        Expressions *es = new Expressions();\n-        for (size_t i = 0; i < length; i++)\n+        Expressions *es;\n+        if (ArrayLiteralExp *ale = aggr->isArrayLiteralExp())\n         {\n-            IntegerExp *index = new IntegerExp(sfe->loc, i, Type::tsize_t);\n-            Expression *value = new IndexExp(aggr->loc, aggr, index);\n-            es->push(value);\n+            // Directly use the elements of the array for the TupleExp creation\n+            es = ale->elements;\n+        }\n+        else\n+        {\n+            size_t length = (size_t)el->toInteger();\n+            es = new Expressions();\n+            es->setDim(length);\n+            for (size_t i = 0; i < length; i++)\n+            {\n+                IntegerExp *index = new IntegerExp(sfe->loc, i, Type::tsize_t);\n+                Expression *value = new IndexExp(aggr->loc, aggr, index);\n+                (*es)[i] = value;\n+            }\n         }\n         sfe->aggrfe->aggr = new TupleExp(aggr->loc, es);\n         sfe->aggrfe->aggr = semantic(sfe->aggrfe->aggr, sc);\n@@ -307,13 +317,50 @@ static void lowerNonArrayAggregate(StaticForeach *sfe, Scope *sc)\n     Expression *catass = new CatAssignExp(aloc, new IdentifierExp(aloc, idres), res[1]);\n     s2->push(createForeach(sfe, aloc, pparams[1], new ExpStatement(aloc, catass)));\n     s2->push(new ReturnStatement(aloc, new IdentifierExp(aloc, idres)));\n-    Expression *aggr = wrapAndCall(aloc, new CompoundStatement(aloc, s2));\n-    sc = sc->startCTFE();\n-    aggr = semantic(aggr, sc);\n-    aggr = resolveProperties(sc, aggr);\n-    sc = sc->endCTFE();\n-    aggr = aggr->optimize(WANTvalue);\n-    aggr = aggr->ctfeInterpret();\n+\n+    Expression *aggr;\n+    Type *indexty;\n+\n+    if (sfe->rangefe && (indexty = ety->semantic(aloc, sc))->isintegral())\n+    {\n+        sfe->rangefe->lwr->type = indexty;\n+        sfe->rangefe->upr->type = indexty;\n+        IntRange lwrRange = getIntRange(sfe->rangefe->lwr);\n+        IntRange uprRange = getIntRange(sfe->rangefe->upr);\n+\n+        const dinteger_t lwr = sfe->rangefe->lwr->toInteger();\n+        dinteger_t upr = sfe->rangefe->upr->toInteger();\n+        size_t length = 0;\n+\n+        if (lwrRange.imin <= uprRange.imax)\n+            length = (size_t)(upr - lwr);\n+\n+        Expressions *exps = new Expressions();\n+        exps->setDim(length);\n+\n+        if (sfe->rangefe->op == TOKforeach)\n+        {\n+            for (size_t i = 0; i < length; i++)\n+                (*exps)[i] = new IntegerExp(aloc, lwr + i, indexty);\n+        }\n+        else\n+        {\n+            --upr;\n+            for (size_t i = 0; i < length; i++)\n+                (*exps)[i] = new IntegerExp(aloc, upr - i, indexty);\n+        }\n+        aggr = new ArrayLiteralExp(aloc, indexty->arrayOf(), exps);\n+    }\n+    else\n+    {\n+        aggr = wrapAndCall(aloc, new CompoundStatement(aloc, s2));\n+        sc = sc->startCTFE();\n+        aggr = semantic(aggr, sc);\n+        aggr = resolveProperties(sc, aggr);\n+        sc = sc->endCTFE();\n+        aggr = aggr->optimize(WANTvalue);\n+        aggr = aggr->ctfeInterpret();\n+    }\n \n     assert(!!sfe->aggrfe ^ !!sfe->rangefe);\n     sfe->aggrfe = new ForeachStatement(sfe->loc, TOKforeach, pparams[2], aggr,"}]}