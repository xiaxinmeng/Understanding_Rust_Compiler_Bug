{"sha": "1230b94d569c2d914af665a2890d0e841f1c2ae3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIzMGI5NGQ1NjljMmQ5MTRhZjY2NWEyODkwZDBlODQxZjFjMmFlMw==", "commit": {"author": {"name": "Scott Gilbertson", "email": "scottg@mantatest.com", "date": "2003-04-19T17:59:40Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-04-19T17:59:40Z"}, "message": "XGraphicsConfiguration.java (FontMetricsCache): New inner class.\n\n2003-04-19  Scott Gilbertson  <scottg@mantatest.com>\n\n\t* gnu/awt/xlib/XGraphicsConfiguration.java (FontMetricsCache): New\n\tinner class.\n\t(CACHE_SIZE_PER_DISPLAY): New field\n\t(fontMetricsCache): New field\n\t(getXFontMetrics): Use fontMetricsCache to cache fonts. Prefer\n\tloading ISO10646-1 fonts.\n\nFrom-SVN: r65821", "tree": {"sha": "e80fc1a431e861eaf074ba267233e9717d2c16ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e80fc1a431e861eaf074ba267233e9717d2c16ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1230b94d569c2d914af665a2890d0e841f1c2ae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1230b94d569c2d914af665a2890d0e841f1c2ae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1230b94d569c2d914af665a2890d0e841f1c2ae3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1230b94d569c2d914af665a2890d0e841f1c2ae3/comments", "author": null, "committer": null, "parents": [{"sha": "3b2288059d786fc6994debbaffeff898746a6921", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b2288059d786fc6994debbaffeff898746a6921", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b2288059d786fc6994debbaffeff898746a6921"}], "stats": {"total": 179, "additions": 153, "deletions": 26}, "files": [{"sha": "498a6b005951adb3feafa4afa63fa40088d83080", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1230b94d569c2d914af665a2890d0e841f1c2ae3/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1230b94d569c2d914af665a2890d0e841f1c2ae3/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1230b94d569c2d914af665a2890d0e841f1c2ae3", "patch": "@@ -1,3 +1,12 @@\n+2003-04-19  Scott Gilbertson  <scottg@mantatest.com>\n+\n+\t* gnu/awt/xlib/XGraphicsConfiguration.java (FontMetricsCache): New\n+\tinner class.\n+\t(CACHE_SIZE_PER_DISPLAY): New field\n+\t(fontMetricsCache): New field\n+\t(getXFontMetrics): Use fontMetricsCache to cache fonts. Prefer\n+\tloading ISO10646-1 fonts.\n+\n 2003-04-19  Scott Gilbertson  <scottg@mantatest.com>\n \n \t* libjava/gnu/gcj/xlib/natFont.cc (getStringWidth): Support 16-bit"}, {"sha": "d867beed2256100418afc75bb800f07e94643279", "filename": "libjava/gnu/awt/xlib/XGraphicsConfiguration.java", "status": "modified", "additions": 144, "deletions": 26, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1230b94d569c2d914af665a2890d0e841f1c2ae3/libjava%2Fgnu%2Fawt%2Fxlib%2FXGraphicsConfiguration.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1230b94d569c2d914af665a2890d0e841f1c2ae3/libjava%2Fgnu%2Fawt%2Fxlib%2FXGraphicsConfiguration.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fxlib%2FXGraphicsConfiguration.java?ref=1230b94d569c2d914af665a2890d0e841f1c2ae3", "patch": "@@ -16,6 +16,7 @@\n import java.awt.Point;\n import java.awt.Color;\n import java.awt.color.ColorSpace;\n+import java.awt.Font;\n import java.awt.image.*;\n import java.awt.geom.AffineTransform;\n import gnu.gcj.xlib.GC;\n@@ -27,7 +28,9 @@\n import gnu.gcj.xlib.XColor;\n import gnu.gcj.xlib.Screen;\n import gnu.gcj.xlib.Display;\n+import gnu.gcj.xlib.XException;\n import gnu.java.awt.Buffers;\n+import java.util.Enumeration;\n import java.util.Hashtable;\n \n public class XGraphicsConfiguration extends GraphicsConfiguration\n@@ -39,6 +42,104 @@ public class XGraphicsConfiguration extends GraphicsConfiguration\n   Colormap colormap;\n   ColorModel imageCM;\n   ColorModel pixelCM;\n+  private static final int CACHE_SIZE_PER_DISPLAY = 10;\n+  static FontMetricsCache fontMetricsCache = new FontMetricsCache ();\n+  \n+  /** Font metrics cache class.  Caches at most CACHE_SIZE_PER_DISPLAY\n+   * XFontMetrics objects for each display device.  When a display's cache\n+   * gets full, the least-recently used entry is overwritten.\n+   * XXX: lruOrder rolls over after a few billion operations, so it might\n+   * on very rare occasions misinterpret which is the oldest entry\n+   */\n+  class FontMetricsCache\n+  {\n+    private java.util.Hashtable displays = new java.util.Hashtable ();\n+    \n+    /** Font metrics cache for a display device\n+     */\n+    class PerDisplayCache\n+    {\n+      private int lruCount = 0;\n+      private java.util.Hashtable entries = new java.util.Hashtable ();\n+      \n+      class CacheEntry\n+      {\n+        int lruOrder;\n+        XFontMetrics fm;\n+        Font font;\n+      }\n+      \n+      /** Get an entry (null if not there) and update LRU ordering\n+       */\n+      XFontMetrics get (Font font)\n+      {\n+        CacheEntry entry = (CacheEntry)entries.get (font);\n+        if (entry != null)\n+        {\n+          entry.lruOrder = lruCount++;\n+        }\n+        return (entry==null) ? null : entry.fm;\n+      }\n+      \n+      /** Put an entry in the cache, eliminating the oldest entry if\n+       * the cache is at capacity.\n+       */\n+      void put (Font font, XFontMetrics fontMetrics)\n+      {\n+        if (entries.size () >= CACHE_SIZE_PER_DISPLAY)\n+        {\n+          // cache is full -- eliminate the oldest entry\n+          // slow operation, but shouldn't happen very often\n+          int maxAge = 0;\n+          CacheEntry oldestEntry = null;\n+          int referenceCount = lruCount;\n+          for (Enumeration e = entries.elements (); e.hasMoreElements ();)\n+          {\n+            CacheEntry entry = (CacheEntry)e.nextElement ();\n+            if ((referenceCount-entry.lruOrder) > maxAge)\n+            {\n+              maxAge = referenceCount-entry.lruOrder;\n+              oldestEntry = entry;\n+            }\n+          }\n+          if (oldestEntry != null)\n+            entries.remove (oldestEntry.font);\n+        }\n+        CacheEntry newEntry = new CacheEntry ();\n+        newEntry.lruOrder = lruCount++;\n+        newEntry.fm = fontMetrics;\n+        newEntry.font = font;\n+        entries.put (font,newEntry);\n+      }\n+    }\n+    \n+    /** Get the font metrics for a font, if it is present in the cache.\n+     * @param font The AWT font for which to find the font metrics\n+     * @param display The display, to select the cached entries for that display\n+     * @return The font metrics, or null if not cached\n+     */\n+    XFontMetrics get (Font font, Display display)\n+    {\n+      PerDisplayCache cache = (PerDisplayCache)displays.get (display);\n+      return (cache==null) ? null : cache.get (font);\n+    }\n+    \n+    /** Put a font in the cache\n+     * @param font The font\n+     * @param display The display\n+     * @param fontMetrics The font metrics\n+     */\n+    void put (Font font, Display display, XFontMetrics fontMetrics)\n+    {\n+      PerDisplayCache cache = (PerDisplayCache)displays.get (display);\n+      if (cache == null)\n+      {\n+        cache = new PerDisplayCache ();\n+        displays.put (display,cache);\n+      }\n+      cache.put (font,fontMetrics);\n+    }\n+  }\n   \n   public XGraphicsConfiguration(Visual visual)\n   {\n@@ -358,33 +459,50 @@ Visual getVisual()\n   }\n     \n   /* FIXME: This should be moved to XGraphicsDevice... */\n-  XFontMetrics getXFontMetrics(java.awt.Font awtFont)\n+  XFontMetrics getXFontMetrics (java.awt.Font awtFont)\n   {\n-    // FIXME: do caching...\n-    \n-    String family       = \"*\";\n-    String name         = awtFont.getName();\n-    String weight       = awtFont.isBold() ? \"bold\" : \"medium\";\n-    String slant        = awtFont.isItalic() ? \"i\" : \"r\";\n-    String addStyle     = \"*\";\n-    String pixelSize    = \"*\";\n-    String pointSize    = awtFont.getSize() + \"0\";\n-    String xres         = \"*\";\n-    String yres         = \"*\";\n-    String spacing      = \"*\";\n-    String averageWidth = \"*\";\n-    String charset      = \"*\";\n-    \n-    String logicalFontDescription =\n-      family    + \"-\" + name         + \"-\" + weight    + \"-\" +\n-      slant     + \"-\" + addStyle     + \"-\" + pixelSize + \"-\" +\n-      pointSize + \"-\" + xres         + \"-\" + yres      + \"-\" +\n-      spacing   + \"-\" + averageWidth + \"-\" + charset;\n-    \n-    Display display = visual.getScreen().getDisplay();\n-    gnu.gcj.xlib.Font xfont =\n-      new gnu.gcj.xlib.Font(display, logicalFontDescription);\n-    return new XFontMetrics(xfont, awtFont);\n+    // If the metrics object for this font is already cached, use it.\n+    // Otherwise create and cache it.\n+    Display display = visual.getScreen ().getDisplay ();\n+    XFontMetrics fm = fontMetricsCache.get (awtFont,display);\n+    if (fm == null)\n+    {\n+      String foundry      = \"*\";\n+      String family       = awtFont.getName ();\n+      String weight       = awtFont.isBold () ? \"bold\" : \"medium\";\n+      String slant        = awtFont.isItalic () ? \"i\" : \"r\";\n+      String sWidth       = \"*\";\n+      String addStyle     = \"\";\n+      String pixelSize    = \"*\";\n+      String pointSize    = awtFont.getSize () + \"0\";\n+      String xres         = \"*\";\n+      String yres         = \"*\";\n+      String spacing      = \"*\";\n+      String averageWidth = \"*\";\n+      String charset      = \"iso10646-1\"; // because we use functions like XDrawString16\n+      \n+      String logicalFontDescription =\n+        \"-\" + // FontNameRegistry prefix\n+        foundry   + \"-\" + family    + \"-\" + weight       + \"-\" +\n+        slant     + \"-\" + sWidth    + \"-\" + addStyle     + \"-\" +\n+        pixelSize + \"-\" + pointSize + \"-\" + xres         + \"-\" +\n+        yres      + \"-\" + spacing   + \"-\" + averageWidth + \"-\";\n+      \n+      // Try to load a Unicode font.  If that doesn't work, try again, without\n+      // specifying the character set.\n+      try\n+      {\n+        gnu.gcj.xlib.Font xfont = new gnu.gcj.xlib.Font (display, logicalFontDescription + charset);\n+        fm = new XFontMetrics (xfont, awtFont);\n+      }\n+      catch (XException e)\n+      {\n+        gnu.gcj.xlib.Font xfont = new gnu.gcj.xlib.Font (display, logicalFontDescription + \"*-*\");\n+        fm = new XFontMetrics (xfont, awtFont);\n+      }\n+      fontMetricsCache.put (awtFont,display,fm);\n+    }\n+    return fm;\n   }\n \n   int getPixel(Color color)"}]}