{"sha": "d7d938374664ca711b5bb894486394425d8c9227", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdkOTM4Mzc0NjY0Y2E3MTFiNWJiODk0NDg2Mzk0NDI1ZDhjOTIyNw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2005-12-06T19:45:00Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2005-12-06T19:45:00Z"}, "message": "re PR c++/24138 (ICE with the code in PR 20407)\n\n        PR C++/24138\n        * tree.c (integer_all_onesp): Always return true if all bits on.\n\n        * cp/decl.c (reshape_init_array_1): Handle max_index of -1.\n\n        * testsuite/g++.dg/init/array0.C: New.\n\nFrom-SVN: r108126", "tree": {"sha": "9a4d882c3bd13e5816af7f4580ea174e21a1509f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a4d882c3bd13e5816af7f4580ea174e21a1509f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7d938374664ca711b5bb894486394425d8c9227", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7d938374664ca711b5bb894486394425d8c9227", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7d938374664ca711b5bb894486394425d8c9227", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7d938374664ca711b5bb894486394425d8c9227/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3af22b23b32d69bd7cc0d444429f33e4edae008d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af22b23b32d69bd7cc0d444429f33e4edae008d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3af22b23b32d69bd7cc0d444429f33e4edae008d"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "ea51aa210628aeb824bb4e336949422d3515003d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d938374664ca711b5bb894486394425d8c9227/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d938374664ca711b5bb894486394425d8c9227/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7d938374664ca711b5bb894486394425d8c9227", "patch": "@@ -1,3 +1,10 @@\n+2005-12-06  Aldy Hernandez  <aldyh@redhat.com>\n+\n+       PR C++/24138\n+        * tree.c (integer_all_onesp): Always return true if all bits on.\n+\n+        * testsuite/g++.dg/init/array0.C: New.\n+\n 2005-12-06  Adrian Straetling  <straetling@de.ibm.com>\n \n \t  * doc/md.texi: Adapt to implementation."}, {"sha": "77f506e93bdd7580359cd1a4bc9d2026df8d8a2c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d938374664ca711b5bb894486394425d8c9227/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d938374664ca711b5bb894486394425d8c9227/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d7d938374664ca711b5bb894486394425d8c9227", "patch": "@@ -1,3 +1,8 @@\n+2005-12-06  Aldy Hernandez  <aldyh@redhat.com>\n+\n+       PR C++/24138\n+        * decl.c (reshape_init_array_1): Handle max_index of -1.\n+\n 2005-12-06  Roger Sayle  <roger@eyesopen.com>\n \n \t* typeck.c (build_binary_op): Issue warning if either operand of a"}, {"sha": "ffa5e336d9b238a61d405c32cee4e82fe3419e95", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d938374664ca711b5bb894486394425d8c9227/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d938374664ca711b5bb894486394425d8c9227/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d7d938374664ca711b5bb894486394425d8c9227", "patch": "@@ -4209,6 +4209,10 @@ reshape_init_array_1 (tree elt_type, tree max_index, reshape_iter *d)\n \n   if (sized_array_p)\n     {\n+      /* Minus 1 is used for zero sized arrays.  */\n+      if (integer_all_onesp (max_index))\n+\treturn new_init;\n+\n       if (host_integerp (max_index, 1))\n \tmax_index_cst = tree_low_cst (max_index, 1);\n       /* sizetype is sign extended, not zero extended.  */"}, {"sha": "235cdf0deb910fc3e9254fcfdc9b0ac83f643dc4", "filename": "gcc/testsuite/g++.dg/init/array0.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d938374664ca711b5bb894486394425d8c9227/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d938374664ca711b5bb894486394425d8c9227/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray0.C?ref=d7d938374664ca711b5bb894486394425d8c9227", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile }\n+// { dg-options \"\" }\n+// PR C++/24138\n+\n+void foo()\n+{\n+  typedef struct {\n+    unsigned char dir;\n+    int data[0];\n+  } yanito;\n+  static const yanito horse = { 1,  { 2,  3 }  }; // { dg-error \"too many\" }\n+}"}, {"sha": "42da6891d8ddb42a15e6346eed18d37ec17e0920", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7d938374664ca711b5bb894486394425d8c9227/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7d938374664ca711b5bb894486394425d8c9227/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=d7d938374664ca711b5bb894486394425d8c9227", "patch": "@@ -1208,9 +1208,11 @@ integer_all_onesp (tree expr)\n     return 0;\n \n   uns = TYPE_UNSIGNED (TREE_TYPE (expr));\n+  if (TREE_INT_CST_LOW (expr) == ~(unsigned HOST_WIDE_INT) 0\n+      && TREE_INT_CST_HIGH (expr) == -1)\n+    return 1;\n   if (!uns)\n-    return (TREE_INT_CST_LOW (expr) == ~(unsigned HOST_WIDE_INT) 0\n-\t    && TREE_INT_CST_HIGH (expr) == -1);\n+    return 0;\n \n   /* Note that using TYPE_PRECISION here is wrong.  We care about the\n      actual bits, not the (arbitrary) range of the type.  */"}]}