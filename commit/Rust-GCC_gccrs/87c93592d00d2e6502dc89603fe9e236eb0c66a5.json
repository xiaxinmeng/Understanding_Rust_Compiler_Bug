{"sha": "87c93592d00d2e6502dc89603fe9e236eb0c66a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdjOTM1OTJkMDBkMmU2NTAyZGM4OTYwM2ZlOWUyMzZlYjBjNjZhNQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2009-09-25T23:57:01Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2009-09-25T23:57:01Z"}, "message": "re PR tree-optimization/41454 (DOM miscompiles gcc.c-torture/execute/990513-1.c at -O2 -fno-tree-vrp)\n\n\tPR tree-optimization/41454\n\t* tree-ssa-dom (stmts_to_rescan): Remove variable.\n\t(tree_ssa_dominator_optimize): Don't allocate and free it.\n\t(dom_opt_leave_block): Don't iterate over it.\n\t(eliminate_redundant_computations): Don't return a value.\n\t(cprop_operand, cprop_into_stmt): Ditto.\n\t(optimize_stmt): Don't defer updating stmts.\n\ntestsuite/\n\t* gcc.dg/pr41454.c: New test.\n\nFrom-SVN: r152189", "tree": {"sha": "98636101aa1098a974f5a35fb373a9c5fed448d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98636101aa1098a974f5a35fb373a9c5fed448d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87c93592d00d2e6502dc89603fe9e236eb0c66a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87c93592d00d2e6502dc89603fe9e236eb0c66a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87c93592d00d2e6502dc89603fe9e236eb0c66a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87c93592d00d2e6502dc89603fe9e236eb0c66a5/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7653f2738f8f2c8a1a0bf3f60d09fb0b99205458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7653f2738f8f2c8a1a0bf3f60d09fb0b99205458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7653f2738f8f2c8a1a0bf3f60d09fb0b99205458"}], "stats": {"total": 123, "additions": 52, "deletions": 71}, "files": [{"sha": "9e6e398062464edb489297e33885070432829874", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c93592d00d2e6502dc89603fe9e236eb0c66a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c93592d00d2e6502dc89603fe9e236eb0c66a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87c93592d00d2e6502dc89603fe9e236eb0c66a5", "patch": "@@ -1,3 +1,13 @@\n+2009-09-26  Michael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/41454\n+\t* tree-ssa-dom (stmts_to_rescan): Remove variable.\n+\t(tree_ssa_dominator_optimize): Don't allocate and free it.\n+\t(dom_opt_leave_block): Don't iterate over it.\n+\t(eliminate_redundant_computations): Don't return a value.\n+\t(cprop_operand, cprop_into_stmt): Ditto.\n+\t(optimize_stmt): Don't defer updating stmts.\n+\n 2009-09-25  Dodji Seketeli  <dodji@redhat.com>\n \n \t* dwarf2out.c (dwarf_tag_name, gen_generic_params_dies,"}, {"sha": "b33eb1f5c00ecfc99b72b504d7ff935cb785c8ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c93592d00d2e6502dc89603fe9e236eb0c66a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c93592d00d2e6502dc89603fe9e236eb0c66a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=87c93592d00d2e6502dc89603fe9e236eb0c66a5", "patch": "@@ -1,3 +1,8 @@\n+2009-09-26  Michael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/41454\n+\t* gcc.dg/pr41454.c: New test.\n+\n 2009-09-25  Dodji Seketeli  <dodji@redhat.com>\n \n \t* g++.dg/debug/dwarf2/template-func-params-4.C: Adjust after renaming"}, {"sha": "d8264bc637eaa614358f9758385f61916b2a0812", "filename": "gcc/testsuite/gcc.dg/pr41454.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c93592d00d2e6502dc89603fe9e236eb0c66a5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41454.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c93592d00d2e6502dc89603fe9e236eb0c66a5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41454.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41454.c?ref=87c93592d00d2e6502dc89603fe9e236eb0c66a5", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-tree-vrp\" } */\n+\n+extern void abort (void);\n+\n+int main ()\n+{\n+  int BM_tab2[0400];\n+  int *BM_tab = BM_tab2;\n+  int *BM_tab_base;\n+\n+  BM_tab_base = BM_tab;\n+  BM_tab += 0400;\n+  while (BM_tab_base != BM_tab)\n+    {\n+      *--BM_tab = 6;\n+      *--BM_tab = 6;\n+    }\n+  if (BM_tab2[0] != 6)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "067a91195177a85fc88095381d5df95b54c53e9a", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 15, "deletions": 71, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87c93592d00d2e6502dc89603fe9e236eb0c66a5/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87c93592d00d2e6502dc89603fe9e236eb0c66a5/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=87c93592d00d2e6502dc89603fe9e236eb0c66a5", "patch": "@@ -127,15 +127,6 @@ DEF_VEC_ALLOC_P(expr_hash_elt_t,heap);\n \n static VEC(expr_hash_elt_t,heap) *avail_exprs_stack;\n \n-/* Stack of statements we need to rescan during finalization for newly\n-   exposed variables.\n-\n-   Statement rescanning must occur after the current block's available\n-   expressions are removed from AVAIL_EXPRS.  Else we may change the\n-   hash code for an expression and be unable to find/remove it from\n-   AVAIL_EXPRS.  */\n-static VEC(gimple,heap) *stmts_to_rescan;\n-\n /* Structure for entries in the expression hash table.  */\n \n struct expr_hash_elt\n@@ -194,7 +185,7 @@ static void record_const_or_copy (tree, tree);\n static void record_equality (tree, tree);\n static void record_equivalences_from_phis (basic_block);\n static void record_equivalences_from_incoming_edge (basic_block);\n-static bool eliminate_redundant_computations (gimple_stmt_iterator *);\n+static void eliminate_redundant_computations (gimple_stmt_iterator *);\n static void record_equivalences_from_stmt (gimple, int);\n static void dom_thread_across_edge (struct dom_walk_data *, edge);\n static void dom_opt_leave_block (struct dom_walk_data *, basic_block);\n@@ -623,7 +614,6 @@ tree_ssa_dominator_optimize (void)\n   avail_exprs = htab_create (1024, real_avail_expr_hash, avail_expr_eq, free_expr_hash_elt);\n   avail_exprs_stack = VEC_alloc (expr_hash_elt_t, heap, 20);\n   const_and_copies_stack = VEC_alloc (tree, heap, 20);\n-  stmts_to_rescan = VEC_alloc (gimple, heap, 20);\n   need_eh_cleanup = BITMAP_ALLOC (NULL);\n \n   /* Setup callbacks for the generic dominator tree walker.  */\n@@ -733,7 +723,6 @@ tree_ssa_dominator_optimize (void)\n   \n   VEC_free (expr_hash_elt_t, heap, avail_exprs_stack);\n   VEC_free (tree, heap, const_and_copies_stack);\n-  VEC_free (gimple, heap, stmts_to_rescan);\n   \n   /* Free the value-handle array.  */\n   threadedge_finalize_values ();\n@@ -1773,20 +1762,6 @@ dom_opt_leave_block (struct dom_walk_data *walk_data, basic_block bb)\n \n   remove_local_expressions_from_table ();\n   restore_vars_to_original_value ();\n-\n-  /* If we queued any statements to rescan in this block, then\n-     go ahead and rescan them now.  */\n-  while (VEC_length (gimple, stmts_to_rescan) > 0)\n-    {\n-      gimple stmt = VEC_last (gimple, stmts_to_rescan);\n-      basic_block stmt_bb = gimple_bb (stmt);\n-\n-      if (stmt_bb != bb)\n-\tbreak;\n-\n-      VEC_pop (gimple, stmts_to_rescan);\n-      update_stmt (stmt);\n-    }\n }\n \n /* Search for redundant computations in STMT.  If any are found, then\n@@ -1795,13 +1770,12 @@ dom_opt_leave_block (struct dom_walk_data *walk_data, basic_block bb)\n    If safe, record this expression into the available expression hash\n    table.  */\n \n-static bool\n+static void\n eliminate_redundant_computations (gimple_stmt_iterator* gsi)\n {\n   tree expr_type;\n   tree cached_lhs;\n   bool insert = true;\n-  bool retval = false;\n   bool assigns_var_p = false;\n \n   gimple stmt = gsi_stmt (*gsi);\n@@ -1844,7 +1818,7 @@ eliminate_redundant_computations (gimple_stmt_iterator* gsi)\n     gcc_unreachable ();\n \n   if (!cached_lhs)\n-    return false;\n+    return;\n \n   /* It is safe to ignore types here since we have already done\n      type checking in the hashing and equality routines.  In fact\n@@ -1871,11 +1845,6 @@ eliminate_redundant_computations (gimple_stmt_iterator* gsi)\n \t}\n \n       opt_stats.num_re++;\n-\n-      if (TREE_CODE (cached_lhs) == ADDR_EXPR\n-\t  || (POINTER_TYPE_P (expr_type)\n-\t      && is_gimple_min_invariant (cached_lhs)))\n-\tretval = true;\n       \n       if (assigns_var_p\n \t  && !useless_type_conversion_p (expr_type, TREE_TYPE (cached_lhs)))\n@@ -1888,7 +1857,6 @@ eliminate_redundant_computations (gimple_stmt_iterator* gsi)\n          itself.  */\n       gimple_set_modified (gsi_stmt (*gsi), true);\n   }\n-  return retval;\n }\n \n /* STMT, a GIMPLE_ASSIGN, may create certain equivalences, in either\n@@ -1980,10 +1948,9 @@ record_equivalences_from_stmt (gimple stmt, int may_optimize_p)\n /* Replace *OP_P in STMT with any known equivalent value for *OP_P from\n    CONST_AND_COPIES.  */\n \n-static bool\n+static void\n cprop_operand (gimple stmt, use_operand_p op_p)\n {\n-  bool may_have_exposed_new_symbols = false;\n   tree val;\n   tree op = USE_FROM_PTR (op_p);\n \n@@ -2002,34 +1969,34 @@ cprop_operand (gimple stmt, use_operand_p op_p)\n \t  && (TREE_CODE (val) != SSA_NAME\n \t      || is_gimple_reg (val)\n \t      || get_virtual_var (val) != get_virtual_var (op)))\n-\treturn false;\n+\treturn;\n \n       /* Do not replace hard register operands in asm statements.  */\n       if (gimple_code (stmt) == GIMPLE_ASM\n \t  && !may_propagate_copy_into_asm (op))\n-\treturn false;\n+\treturn;\n \n       /* Certain operands are not allowed to be copy propagated due\n \t to their interaction with exception handling and some GCC\n \t extensions.  */\n       if (!may_propagate_copy (op, val))\n-\treturn false;\n+\treturn;\n \n       /* Do not propagate addresses that point to volatiles into memory\n \t stmts without volatile operands.  */\n       if (POINTER_TYPE_P (TREE_TYPE (val))\n \t  && TYPE_VOLATILE (TREE_TYPE (TREE_TYPE (val)))\n \t  && gimple_has_mem_ops (stmt)\n \t  && !gimple_has_volatile_ops (stmt))\n-\treturn false;\n+\treturn;\n \n       /* Do not propagate copies if the propagated value is at a deeper loop\n \t depth than the propagatee.  Otherwise, this may move loop variant\n \t variables outside of their loops and prevent coalescing\n \t opportunities.  If the value was loop invariant, it will be hoisted\n \t by LICM and exposed for copy propagation.  */\n       if (loop_depth_of_name (val) > loop_depth_of_name (op))\n-\treturn false;\n+\treturn;\n \n       /* Dump details.  */\n       if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -2042,13 +2009,6 @@ cprop_operand (gimple stmt, use_operand_p op_p)\n \t  fprintf (dump_file, \"'\\n\");\n \t}\n \n-      /* If VAL is an ADDR_EXPR or a constant of pointer type, note\n-\t that we may have exposed a new symbol for SSA renaming.  */\n-      if (TREE_CODE (val) == ADDR_EXPR\n-\t  || (POINTER_TYPE_P (TREE_TYPE (op))\n-\t      && is_gimple_min_invariant (val)))\n-\tmay_have_exposed_new_symbols = true;\n-\n       if (TREE_CODE (val) != SSA_NAME)\n \topt_stats.num_const_prop++;\n       else\n@@ -2061,7 +2021,6 @@ cprop_operand (gimple stmt, use_operand_p op_p)\n \t rescan the statement and rewrite its operands again.  */\n       gimple_set_modified (stmt, true);\n     }\n-  return may_have_exposed_new_symbols;\n }\n \n /* CONST_AND_COPIES is a table which maps an SSA_NAME to the current\n@@ -2070,20 +2029,17 @@ cprop_operand (gimple stmt, use_operand_p op_p)\n    Propagate values from CONST_AND_COPIES into the uses, vuses and\n    vdef_ops of STMT.  */\n \n-static bool\n+static void\n cprop_into_stmt (gimple stmt)\n {\n-  bool may_have_exposed_new_symbols = false;\n   use_operand_p op_p;\n   ssa_op_iter iter;\n \n   FOR_EACH_SSA_USE_OPERAND (op_p, stmt, iter, SSA_OP_ALL_USES)\n     {\n       if (TREE_CODE (USE_FROM_PTR (op_p)) == SSA_NAME)\n-\tmay_have_exposed_new_symbols |= cprop_operand (stmt, op_p);\n+\tcprop_operand (stmt, op_p);\n     }\n-\n-  return may_have_exposed_new_symbols;\n }\n \n /* Optimize the statement pointed to by iterator SI.\n@@ -2106,7 +2062,6 @@ optimize_stmt (basic_block bb, gimple_stmt_iterator si)\n {\n   gimple stmt, old_stmt;\n   bool may_optimize_p;\n-  bool may_have_exposed_new_symbols;\n   bool modified_p = false;\n \n   old_stmt = stmt = gsi_stmt (si);\n@@ -2124,7 +2079,7 @@ optimize_stmt (basic_block bb, gimple_stmt_iterator si)\n     }\n \n   /* Const/copy propagate into USES, VUSES and the RHS of VDEFs.  */\n-  may_have_exposed_new_symbols = cprop_into_stmt (stmt);\n+  cprop_into_stmt (stmt);\n \n   /* If the statement has been modified with constant replacements,\n      fold its RHS before checking for redundant computations.  */\n@@ -2157,12 +2112,6 @@ optimize_stmt (basic_block bb, gimple_stmt_iterator si)\n       if (rhs && TREE_CODE (rhs) == ADDR_EXPR)\n         recompute_tree_invariant_for_addr_expr (rhs);\n \n-      /* Constant/copy propagation above may change the set of \n-\t virtual operands associated with this statement.  Folding\n-\t may remove the need for some virtual operands.\n-\n-\t Indicate we will need to rescan and rewrite the statement.  */\n-      may_have_exposed_new_symbols = true;\n       /* Indicate that maybe_clean_or_replace_eh_stmt needs to be called,\n \t even if fold_stmt updated the stmt already and thus cleared\n \t gimple_modified_p flag on it.  */\n@@ -2182,7 +2131,7 @@ optimize_stmt (basic_block bb, gimple_stmt_iterator si)\n \n   if (may_optimize_p)\n     {\n-      may_have_exposed_new_symbols |= eliminate_redundant_computations (&si);\n+      eliminate_redundant_computations (&si);\n       stmt = gsi_stmt (si);\n     }\n \n@@ -2218,6 +2167,8 @@ optimize_stmt (basic_block bb, gimple_stmt_iterator si)\n   if (gimple_modified_p (stmt) || modified_p)\n     {\n       tree val = NULL;\n+      \n+      update_stmt (stmt);\n \n       if (gimple_code (stmt) == GIMPLE_COND)\n         val = fold_binary_loc (gimple_location (stmt),\n@@ -2238,13 +2189,6 @@ optimize_stmt (basic_block bb, gimple_stmt_iterator si)\n \t    fprintf (dump_file, \"  Flagged to clear EH edges.\\n\");\n \t}\n     }\n-\n-  /* Queue the statement to be re-scanned after all the\n-     AVAIL_EXPRS have been processed.  The change buffer stack for\n-     all the pushed statements will be processed when this queue\n-     is emptied.  */\n-  if (may_have_exposed_new_symbols)\n-    VEC_safe_push (gimple, heap, stmts_to_rescan, gsi_stmt (si));\n }\n \n /* Search for an existing instance of STMT in the AVAIL_EXPRS table."}]}