{"sha": "897db4af51cf3c7abccb0dfa75d957304671c7cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk3ZGI0YWY1MWNmM2M3YWJjY2IwZGZhNzVkOTU3MzA0NjcxYzdjZg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-03-18T18:16:54Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-03-18T18:16:54Z"}, "message": "2003-03-18  Michael Koch  <konqueror@gmx.de>\n\n\t* java/awt/ScrollPane.java\n\t(ScrollPane): Rewrote for new ScrollPaneAdjustable.\n\t(getViewportSize): Likewise.\n\t(addNotify): Likewise.\n\t(removeNotify): Likewise.\n\t* java/awt/ScrollPaneAdjustable.java\n\t(ScrollPaneAdjustable): No longer extends Scrollbar.\n\t* java/beans/beancontext/BeanContextServices.java:\n\tReformated.\n\t(getService): Added throws TooManyListenersException;\n\t* java/beans/beancontext/BeanContextServicesSupport.java:\n\tReformated.\n\nFrom-SVN: r64538", "tree": {"sha": "cfffc936c1690e91c2b2381097e711fbdfd7bb58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfffc936c1690e91c2b2381097e711fbdfd7bb58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/897db4af51cf3c7abccb0dfa75d957304671c7cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/897db4af51cf3c7abccb0dfa75d957304671c7cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/897db4af51cf3c7abccb0dfa75d957304671c7cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/897db4af51cf3c7abccb0dfa75d957304671c7cf/comments", "author": null, "committer": null, "parents": [{"sha": "8dfa3bb06ec4c13b185595beefbacf4455979d1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dfa3bb06ec4c13b185595beefbacf4455979d1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dfa3bb06ec4c13b185595beefbacf4455979d1f"}], "stats": {"total": 434, "additions": 231, "deletions": 203}, "files": [{"sha": "ab1c75b3e9c5a5764705f4f9e3b042d62b8c6d63", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/897db4af51cf3c7abccb0dfa75d957304671c7cf/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/897db4af51cf3c7abccb0dfa75d957304671c7cf/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=897db4af51cf3c7abccb0dfa75d957304671c7cf", "patch": "@@ -1,3 +1,18 @@\n+2003-03-18  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/awt/ScrollPane.java\n+\t(ScrollPane): Rewrote for new ScrollPaneAdjustable.\n+\t(getViewportSize): Likewise.\n+\t(addNotify): Likewise.\n+\t(removeNotify): Likewise.\n+\t* java/awt/ScrollPaneAdjustable.java\n+\t(ScrollPaneAdjustable): No longer extends Scrollbar.\n+\t* java/beans/beancontext/BeanContextServices.java:\n+\tReformated.\n+\t(getService): Added throws TooManyListenersException;\n+\t* java/beans/beancontext/BeanContextServicesSupport.java:\n+\tReformated.\n+\n 2003-03-18  Michael Koch  <konqueror@gmx.de>\n \n \t* java/io/BufferedOutputStream.java,"}, {"sha": "930ace7d1b50db3b3e3a71e15fb32ca9ecea95f0", "filename": "libjava/java/awt/ScrollPane.java", "status": "modified", "additions": 13, "deletions": 28, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/897db4af51cf3c7abccb0dfa75d957304671c7cf/libjava%2Fjava%2Fawt%2FScrollPane.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/897db4af51cf3c7abccb0dfa75d957304671c7cf/libjava%2Fjava%2Fawt%2FScrollPane.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FScrollPane.java?ref=897db4af51cf3c7abccb0dfa75d957304671c7cf", "patch": "@@ -153,8 +153,8 @@ public class ScrollPane extends Container implements Accessible\n \n   if (scrollbarDisplayPolicy != SCROLLBARS_NEVER)\n     {\n-      hAdjustable = new ScrollPaneAdjustable(Scrollbar.HORIZONTAL);\n-      vAdjustable = new ScrollPaneAdjustable(Scrollbar.VERTICAL);\n+      hAdjustable = new ScrollPaneAdjustable (this, Scrollbar.HORIZONTAL);\n+      vAdjustable = new ScrollPaneAdjustable (this, Scrollbar.VERTICAL);\n     }\n \n   wheelScrollingEnabled = true;\n@@ -215,23 +215,17 @@ public class ScrollPane extends Container implements Accessible\n   *\n   * @return The viewport size.\n   */\n-public Dimension\n-getViewportSize()\n+public Dimension getViewportSize ()\n {\n-  Dimension viewsize = getSize();\n-  Insets insets = getInsets();\n-  viewsize.width = viewsize.width - (insets.left + insets.right);\n-  viewsize.height = viewsize.height - (insets.top + insets.bottom);\n-\n-  ScrollPaneAdjustable v = (ScrollPaneAdjustable)getVAdjustable();\n-  ScrollPaneAdjustable h = (ScrollPaneAdjustable)getHAdjustable();\n-\n-  if ((v != null) && v.isVisible())\n-    viewsize.width = viewsize.width - v.getSize().width;\n-  if ((h != null) && h.isVisible())\n-    viewsize.height = viewsize.height - v.getSize().height;\n-\n-  return(viewsize);\n+  Dimension viewsize = getSize ();\n+  Insets insets = getInsets ();\n+  viewsize.width = (viewsize.width\n+                    - (insets.left + insets.right)\n+                    - getVScrollbarWidth ());\n+  viewsize.height = (viewsize.height\n+                     - (insets.top + insets.bottom)\n+                     - getHScrollbarHeight ());\n+  return viewsize;\n }\n \n /*************************************************************************/\n@@ -347,11 +341,7 @@ public class ScrollPane extends Container implements Accessible\n     return;\n \n   setPeer((ComponentPeer)getToolkit().createScrollPane(this));\n-\n-  if (hAdjustable != null)\n-    hAdjustable.addNotify();\n-  if (vAdjustable != null)\n-    vAdjustable.removeNotify();\n+  super.addNotify();\n }\n \n /*************************************************************************/\n@@ -362,11 +352,6 @@ public class ScrollPane extends Container implements Accessible\n public void\n removeNotify()\n {\n-  if (hAdjustable != null)\n-    hAdjustable.removeNotify();\n-  if (vAdjustable != null)\n-    vAdjustable.removeNotify();\n-\n   super.removeNotify();\n }\n "}, {"sha": "13131f9c45b862494d26d968538f8f1b22fbaa8b", "filename": "libjava/java/awt/ScrollPaneAdjustable.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/897db4af51cf3c7abccb0dfa75d957304671c7cf/libjava%2Fjava%2Fawt%2FScrollPaneAdjustable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/897db4af51cf3c7abccb0dfa75d957304671c7cf/libjava%2Fjava%2Fawt%2FScrollPaneAdjustable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FScrollPaneAdjustable.java?ref=897db4af51cf3c7abccb0dfa75d957304671c7cf", "patch": "@@ -49,7 +49,6 @@\n  * @since 1.4\n  */\n public class ScrollPaneAdjustable\n-  extends Scrollbar\n   implements Adjustable, Serializable\n {\n   private static final long serialVersionUID = -3359745691033257079L;\n@@ -60,13 +59,14 @@\n   int minimum;\n   int maximum;\n   int visibleAmount;\n-  int unitIncrement;\n-  int blockIncrement;\n+  int unitIncrement = 1;\n+  int blockIncrement = 1;\n   AdjustmentListener adjustmentListener;\n \n-  ScrollPaneAdjustable (int orientation)\n+  ScrollPaneAdjustable (ScrollPane sp, int orientation)\n   {\n-    throw new Error (\"not implemented\");\n+    this.sp = sp;\n+    this.orientation = orientation;\n   }\n   \n   ScrollPaneAdjustable (ScrollPane sp, int orientation, int value, int minimum,"}, {"sha": "89906aa977d5496b599249ed28d34f762a0401bf", "filename": "libjava/java/beans/beancontext/BeanContextServices.java", "status": "modified", "additions": 167, "deletions": 155, "changes": 322, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/897db4af51cf3c7abccb0dfa75d957304671c7cf/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextServices.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/897db4af51cf3c7abccb0dfa75d957304671c7cf/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextServices.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextServices.java?ref=897db4af51cf3c7abccb0dfa75d957304671c7cf", "patch": "@@ -39,168 +39,180 @@\n package java.beans.beancontext;\n \n import java.util.Iterator;\n+import java.util.TooManyListenersException;\n \n /**\n  * Allows a <code>BeanContext</code> to provide services to its children.\n  *\n  * @specnote it is unclear whether a <code>BeanContextServices</code>\n  *           should delegate unhandled requests to parents.  I assume so.\n  * @author John Keiser\n- * @since JDK1.2\n+ * @since 1.2\n  */\n \n-public interface BeanContextServices extends BeanContext, BeanContextServicesListener {\n-\t/**\n-\t * Register a service to make it available to others.\n-\t * This class may refuse to add the service based on whatever\n-\t * information it can gather, including whether the service\n-\t * provider is trusted.\n-\t *\n-\t * @param serviceClass the service class.\n-\t * @param provider the factory that will actually provide the service.\n-\t * @return whether the service was added or not.\n-\t */\n-\tpublic boolean addService(Class serviceClass, BeanContextServiceProvider provider);\n-\n-\t/**\n-\t * Make it so that no one else can use this service.\n-\t * <P>\n-\t *\n-\t * If <code>revokeNow</code> is <code>false</code>, the only\n-\t * effect of this method is to make all subsequent calls to\n-\t * <code>getService()</code> on this service class fail.\n-\t * <P>\n-\t *\n-\t * If it is <code>true</code>, a message is also sent out to all\n-\t * listeners on the service and all references to it are released.\n-\t *\n-\t * @param serviceClass the service class to revoke.\n-\t * @param provider the service provider providing the service class.\n-\t * @param revokeNow whether to release all current references to\n-\t *        the service.\n-\t */\n-\tpublic void revokeService(Class serviceClass, BeanContextServiceProvider provider, boolean revokeNow);\n-\n-\t/**\n-\t * Release your copy of this service.\n-\t * <P>\n-\t *\n-\t * If all copies of the service's class have been relinquished by\n-\t * the requestor, the <code>BeanContextServiceRevokedListener</code>\n-\t * previously registered by <code>getService()</code> will be\n-\t * unregistered.\n-\t *\n-\t * @param requestorChild the original <code>BeanContextChild</code>\n-\t *        requesting the service.\n-\t * @param requestor the original requestor of the service.\n-\t * @param service the service to relinquish\n-\t * @see #getService(java.beans.beancontext.BeanContextChild,java.lang.Object,java.lang.Class,java.lang.Object,java.beans.beancontext.BeanContextServiceRevokedListener)\n-\t */\n-\tpublic void releaseService(BeanContextChild requestorChild, Object requestor, Object service);\n-\n-\t/**\n-\t * Get a service from this <code>BeanContextServices</code>.\n-\t * <P>\n-\t *\n-\t * The specified listener will be registered to receive a\n-\t * revocation notice for the specified serviceClass.  One\n-\t * notification per service class per requestor object will be\n-\t * sent.\n-\t * <P>\n-\t *\n-\t * The listener will be unregistered when all services that were\n-\t * obtained by that requestor for that service class are released.\n-\t * <P>\n-\t *\n-\t * If the requested service class is not available, or if this\n-\t * <code>BeanContextServices</code> object chooses not honor the\n-\t * request because the service class has been revoked or for some\n-\t * other reason, then this method will return <code>null</code>.\n-\t * <P>\n-\t *\n-\t * This method may throw unchecked exceptions, so watch out.\n-\t *\n-\t * @specnote it is not specified what happens when two subsequent\n-\t *           calls are made to <code>getService()</code> with the\n-\t *           same requestor object and service class but different\n-\t *           listeners.  Which listener is to be notified?\n-\t *\n-\t * @param requestorChild the <code>BeanContextChild</code>\n-\t *        associated with the requestor.  Typically this will be\n-\t *        the same as the requestor itself, but since any\n-\t *        <code>Object</code>, even one outside the hierarchy, may\n-\t *        make a request, this parameter is necessary.  Only weak\n-\t *        references to this will be retained, and it will never\n-\t *        be changed, only queried in a read-only manner.\n-\t * @param requestor the actual requestor of the service.  Only\n-\t *        weak references to this will be retained, and it will\n-\t *        never be changed, only queried in a read-only manner.\n-\t * @param serviceClass the <code>Class</code> of the service being\n-\t *        requested.\n-\t * @param serviceSelector a parameter to customize the service\n-\t *        returned with.\n-\t * @param listener a listener that will be notified if the service\n-\t *        being requested is revoked.\n-\t * @return an instance of <code>serviceClass</code> (such that\n-\t *        <code>instanceof</code> serviceClass is true), or\n-\t *        <code>null</code>.\n-\t */\n-\tpublic Object getService(BeanContextChild requestorChild, Object requestor, Class serviceClass, Object serviceSelector, BeanContextServiceRevokedListener listener);\n-\n-\t/**\n-\t * Get a list of all service classes supported.\n-\t * <P>\n-\t *\n-\t * This method must synchronize on\n-\t * <code>BeanContext.globalHierarchyLock</code>.\n-\t *\n-\t * @return a list of all service classes supported.\n-\t * @see java.beans.beancontext.BeanContext#globalHierarchyLock\n-\t */\n-\tpublic Iterator getCurrentServiceClasses();\n-\n-\t/**\n-\t * Get a list of valid service selectors for the specified service class.\n-\t * <P>\n-\t *\n-\t * If the specified service class does not have a finite number of\n-\t * valid service selectors, it should return <code>null</code>.\n-\t * If it takes a general <code>Integer</code> parameter, for\n-\t * example, you may as well return <code>null</code> or the poor\n-\t * soul who called this method will be iterating all day.\n-\t * <P>\n-\t *\n-\t * If it has no valid service selectors, it should still return an empty\n-\t * <code>Iterator</code>.\n-\t *\n-\t * @param serviceClass the service class to get selectors for.\n-\t * @return a list of valid service selectors for the service\n-\t *         class, or <code>null</code>.\n-\t */\n-\tpublic Iterator getCurrentServiceSelectors(Class serviceClass);\n-\n-\t/**\n-\t * Tell whether the specified service class is available.\n-\t * Iff getService() could return a non-null value for the\n-\t * specified service, this method will return <code>true</code>.\n-\t *\n-\t * @param serviceClass the service class to check on.\n-\t * @return whether the specified service class is availabe.\n-\t */\n-\tpublic boolean hasService(Class serviceClass);\n-\n-\t/**\n-\t * Add a listener on all adds and removes of services.\n-\t * @param listener the listener to add.\n-\t */\n-\tpublic void addBeanContextServicesListener(BeanContextServicesListener listener);\n-\n-\t/**\n-\t * Remove a listener on all adds and removes of services.\n-\t * @specnote it is not certain whether this should remove this\n-\t *           listener if it was specified in\n-\t *           <code>getService()</code>.\n-\t * @param listener the listener to add.\n-\t */\n-\tpublic void removeBeanContextServicesListener(BeanContextServicesListener listener);\n+public interface BeanContextServices\n+  extends BeanContext, BeanContextServicesListener\n+{\n+  /**\n+   * Register a service to make it available to others.\n+   * This class may refuse to add the service based on whatever\n+   * information it can gather, including whether the service\n+   * provider is trusted.\n+   *\n+   * @param serviceClass the service class.\n+   * @param provider the factory that will actually provide the service.\n+   * @return whether the service was added or not.\n+   */\n+  public boolean addService (Class serviceClass,\n+                             BeanContextServiceProvider provider);\n+\n+  /**\n+   * Make it so that no one else can use this service.\n+   * <P>\n+   *\n+   * If <code>revokeNow</code> is <code>false</code>, the only\n+   * effect of this method is to make all subsequent calls to\n+   * <code>getService()</code> on this service class fail.\n+   * <P>\n+   *\n+   * If it is <code>true</code>, a message is also sent out to all\n+   * listeners on the service and all references to it are released.\n+   *\n+   * @param serviceClass the service class to revoke.\n+   * @param provider the service provider providing the service class.\n+   * @param revokeNow whether to release all current references to\n+   *        the service.\n+   */\n+  public void revokeService (Class serviceClass,\n+                             BeanContextServiceProvider provider,\n+                             boolean revokeNow);\n+\n+  /**\n+   * Release your copy of this service.\n+   * <P>\n+   *\n+   * If all copies of the service's class have been relinquished by\n+   * the requestor, the <code>BeanContextServiceRevokedListener</code>\n+   * previously registered by <code>getService()</code> will be\n+   * unregistered.\n+   *\n+   * @param requestorChild the original <code>BeanContextChild</code>\n+   *        requesting the service.\n+   * @param requestor the original requestor of the service.\n+   * @param service the service to relinquish\n+   * @see #getService(java.beans.beancontext.BeanContextChild,java.lang.Object,java.lang.Class,java.lang.Object,java.beans.beancontext.BeanContextServiceRevokedListener)\n+   */\n+  public void releaseService (BeanContextChild requestorChild, Object requestor,\n+                              Object service);\n+\n+  /**\n+   * Get a service from this <code>BeanContextServices</code>.\n+   * <P>\n+   *\n+   * The specified listener will be registered to receive a\n+   * revocation notice for the specified serviceClass.  One\n+   * notification per service class per requestor object will be\n+   * sent.\n+   * <P>\n+   *\n+   * The listener will be unregistered when all services that were\n+   * obtained by that requestor for that service class are released.\n+   * <P>\n+   *\n+   * If the requested service class is not available, or if this\n+   * <code>BeanContextServices</code> object chooses not honor the\n+   * request because the service class has been revoked or for some\n+   * other reason, then this method will return <code>null</code>.\n+   * <P>\n+   *\n+   * This method may throw unchecked exceptions, so watch out.\n+   *\n+   * @specnote it is not specified what happens when two subsequent\n+   *           calls are made to <code>getService()</code> with the\n+   *           same requestor object and service class but different\n+   *           listeners.  Which listener is to be notified?\n+   *\n+   * @param requestorChild the <code>BeanContextChild</code>\n+   *        associated with the requestor.  Typically this will be\n+   *        the same as the requestor itself, but since any\n+   *        <code>Object</code>, even one outside the hierarchy, may\n+   *        make a request, this parameter is necessary.  Only weak\n+   *        references to this will be retained, and it will never\n+   *        be changed, only queried in a read-only manner.\n+   * @param requestor the actual requestor of the service.  Only\n+   *        weak references to this will be retained, and it will\n+   *        never be changed, only queried in a read-only manner.\n+   * @param serviceClass the <code>Class</code> of the service being\n+   *        requested.\n+   * @param serviceSelector a parameter to customize the service\n+   *        returned with.\n+   * @param listener a listener that will be notified if the service\n+   *        being requested is revoked.\n+   * @return an instance of <code>serviceClass</code> (such that\n+   *        <code>instanceof</code> serviceClass is true), or\n+   *        <code>null</code>.\n+   */\n+  public Object getService (BeanContextChild requestorChild, Object requestor,\n+                            Class serviceClass, Object serviceSelector,\n+                            BeanContextServiceRevokedListener listener)\n+    throws TooManyListenersException;\n+\n+  /**\n+   * Get a list of all service classes supported.\n+   * <P>\n+   *\n+   * This method must synchronize on\n+   * <code>BeanContext.globalHierarchyLock</code>.\n+   *\n+   * @return a list of all service classes supported.\n+   * @see java.beans.beancontext.BeanContext#globalHierarchyLock\n+   */\n+  public Iterator getCurrentServiceClasses ();\n+\n+  /**\n+   * Get a list of valid service selectors for the specified service class.\n+   * <P>\n+   *\n+   * If the specified service class does not have a finite number of\n+   * valid service selectors, it should return <code>null</code>.\n+   * If it takes a general <code>Integer</code> parameter, for\n+   * example, you may as well return <code>null</code> or the poor\n+   * soul who called this method will be iterating all day.\n+   * <P>\n+   *\n+   * If it has no valid service selectors, it should still return an empty\n+   * <code>Iterator</code>.\n+   *\n+   * @param serviceClass the service class to get selectors for.\n+   * @return a list of valid service selectors for the service\n+   *         class, or <code>null</code>.\n+   */\n+  public Iterator getCurrentServiceSelectors (Class serviceClass);\n+\n+  /**\n+   * Tell whether the specified service class is available.\n+   * Iff getService() could return a non-null value for the\n+   * specified service, this method will return <code>true</code>.\n+   *\n+   * @param serviceClass the service class to check on.\n+   * @return whether the specified service class is available.\n+   */\n+  public boolean hasService (Class serviceClass);\n+\n+  /**\n+   * Add a listener on all adds and removes of services.\n+   * @param listener the listener to add.\n+   */\n+  public void\n+  addBeanContextServicesListener (BeanContextServicesListener listener);\n+\n+  /**\n+   * Remove a listener on all adds and removes of services.\n+   * @specnote it is not certain whether this should remove this\n+   *           listener if it was specified in\n+   *           <code>getService()</code>.\n+   * @param listener the listener to add.\n+   */\n+  public void\n+  removeBeanContextServicesListener (BeanContextServicesListener listener);\n }"}, {"sha": "02ee53aa90994c610d054502aa869d7b0f31f707", "filename": "libjava/java/beans/beancontext/BeanContextServicesSupport.java", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/897db4af51cf3c7abccb0dfa75d957304671c7cf/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextServicesSupport.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/897db4af51cf3c7abccb0dfa75d957304671c7cf/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextServicesSupport.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextServicesSupport.java?ref=897db4af51cf3c7abccb0dfa75d957304671c7cf", "patch": "@@ -131,12 +131,14 @@ public BeanContextServicesSupport (BeanContextServices peer, Locale lcle)\n     this (peer, lcle, true, true);\n   }\n \n-  public BeanContextServicesSupport (BeanContextServices peer, Locale lcle, boolean dtime)\n+  public BeanContextServicesSupport (BeanContextServices peer, Locale lcle,\n+                                     boolean dtime)\n   {\n     this (peer, lcle, dtime, true);\n   }\n \n-  public BeanContextServicesSupport (BeanContextServices peer, Locale lcle, boolean dtime, boolean visible)\n+  public BeanContextServicesSupport (BeanContextServices peer, Locale lcle,\n+                                     boolean dtime, boolean visible)\n   {\n     throw new Error (\"Not implemented\");\n   }\n@@ -146,12 +148,14 @@ public void addBeanContextServicesListener (BeanContextServicesListener bcsl)\n     throw new Error (\"Not implemented\");\n   }\n \n-  public boolean addService (Class serviceClass, BeanContextServiceProvider bcsp) \n+  public boolean addService (Class serviceClass, BeanContextServiceProvider bcsp)\n   {\n     throw new Error (\"Not implemented\");\n   }\n \n-  protected boolean addService (Class serviceClass, BeanContextServiceProvider bcsp, boolean fireEvent)\n+  protected boolean addService (Class serviceClass,\n+                                BeanContextServiceProvider bcsp,\n+                                boolean fireEvent)\n   {\n     throw new Error (\"Not implemented\");\n   }\n@@ -167,22 +171,26 @@ protected void bcsPreSerializationHook (ObjectOutputStream oos)\n   {\n     throw new Error (\"Not implemented\");\n   }\n-  protected void childJustRemovedHook (Object child, BeanContextSupport.BCSChild bcsc)\n+  \n+  protected void childJustRemovedHook (Object child,\n+                                       BeanContextSupport.BCSChild bcsc)\n   {\n     throw new Error (\"Not implemented\");\n   }\n \n-  protected BeanContextSupport.BCSChild createBCSChild (Object targetChild, Object peer) \n+  protected BeanContextSupport.BCSChild createBCSChild (Object targetChild,\n+                                                        Object peer) \n   {\n     throw new Error (\"Not implemented\");\n   }\n \n-  protected BeanContextServicesSupport.BCSSServiceProvider createBCSSServiceProvider (Class sc, BeanContextServiceProvider bcsp)\n+  protected BeanContextServicesSupport.BCSSServiceProvider\n+  createBCSSServiceProvider (Class sc, BeanContextServiceProvider bcsp)\n   {\n     throw new Error (\"Not implemented\");\n   }\n \n-  protected final void fireServiceAdded (BeanContextServiceAvailableEvent bcssae) \n+  protected final void fireServiceAdded (BeanContextServiceAvailableEvent bcssae)\n   {\n     throw new Error (\"Not implemented\");\n   }\n@@ -192,12 +200,14 @@ protected final void fireServiceAdded (Class serviceClass)\n     throw new Error (\"Not implemented\");\n   }\n \n-  protected final void fireServiceRevoked (BeanContextServiceRevokedEvent bcsre) \n+  protected final void\n+  fireServiceRevoked (BeanContextServiceRevokedEvent bcsre)\n   {\n     throw new Error (\"Not implemented\");\n   }\n \n-  protected final void fireServiceRevoked (Class serviceClass, boolean revokeNow)\n+  protected final void fireServiceRevoked (Class serviceClass,\n+                                           boolean revokeNow)\n   {\n     throw new Error (\"Not implemented\");\n   }\n@@ -207,7 +217,8 @@ public BeanContextServices getBeanContextServicesPeer ()\n     throw new Error (\"Not implemented\");\n   }\n \n-  protected static final BeanContextServicesListener getChildBeanContextServicesListener (Object child) \n+  protected static final BeanContextServicesListener\n+  getChildBeanContextServicesListener (Object child) \n   {\n     throw new Error (\"Not implemented\");\n   }\n@@ -222,7 +233,9 @@ public Iterator getCurrentServiceSelectors (Class serviceClass)\n     throw new Error (\"Not implemented\");\n   }\n \n-  public Object getService (BeanContextChild child, Object requestor, Class serviceClass, Object serviceSelector, BeanContextServiceRevokedListener bcsrl)\n+  public Object getService (BeanContextChild child, Object requestor,\n+                            Class serviceClass, Object serviceSelector,\n+                            BeanContextServiceRevokedListener bcsrl)\n     throws TooManyListenersException\n   {\n     throw new Error (\"Not implemented\");\n@@ -248,17 +261,20 @@ protected  void releaseBeanContextResources ()\n     throw new Error (\"Not implemented\");\n   }\n \n-  public void releaseService (BeanContextChild child, Object requestor, Object service) \n+  public void releaseService (BeanContextChild child, Object requestor,\n+                              Object service)\n   {\n     throw new Error (\"Not implemented\");\n   }\n \n-  public void removeBeanContextServicesListener (BeanContextServicesListener bcsl) \n+  public void\n+  removeBeanContextServicesListener (BeanContextServicesListener bcsl)\n   {\n     throw new Error (\"Not implemented\");\n   }\n \n-  public void revokeService (Class serviceClass, BeanContextServiceProvider bcsp, boolean revokeCurrentServicesNow) \n+  public void revokeService (Class serviceClass, BeanContextServiceProvider bcsp,\n+                             boolean revokeCurrentServicesNow) \n   {\n     throw new Error (\"Not implemented\");\n   }"}]}