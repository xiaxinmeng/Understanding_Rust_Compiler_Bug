{"sha": "6d98f7a8d0c7adb17408c7e54c408b166a0a8cd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ5OGY3YThkMGM3YWRiMTc0MDhjN2U1NGM0MDhiMTY2YTBhOGNkMQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-10-15T13:57:00Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-10-15T13:57:00Z"}, "message": "AttributedCharacterIterator.java, [...]: Reformated.\n\n2003-10-15  Michael Koch  <konqueror@gmx.de>\n\n\t* java/text/AttributedCharacterIterator.java,\n\tjava/text/CharacterIterator.java: Reformated.\n\nFrom-SVN: r72518", "tree": {"sha": "3a064e022c0a69ad1a42f2463c77361798e80c8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a064e022c0a69ad1a42f2463c77361798e80c8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d98f7a8d0c7adb17408c7e54c408b166a0a8cd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d98f7a8d0c7adb17408c7e54c408b166a0a8cd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d98f7a8d0c7adb17408c7e54c408b166a0a8cd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d98f7a8d0c7adb17408c7e54c408b166a0a8cd1/comments", "author": null, "committer": null, "parents": [{"sha": "c191caf2fc5eb496520a4bff88792ca649b93818", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c191caf2fc5eb496520a4bff88792ca649b93818", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c191caf2fc5eb496520a4bff88792ca649b93818"}], "stats": {"total": 485, "additions": 225, "deletions": 260}, "files": [{"sha": "5ad23895a70257faf7fdbd011249d805bad6532b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d98f7a8d0c7adb17408c7e54c408b166a0a8cd1/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d98f7a8d0c7adb17408c7e54c408b166a0a8cd1/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6d98f7a8d0c7adb17408c7e54c408b166a0a8cd1", "patch": "@@ -1,3 +1,8 @@\n+2003-10-15  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/text/AttributedCharacterIterator.java,\n+\tjava/text/CharacterIterator.java: Reformated.\n+\n 2003-10-15  Michael Koch  <konqueror@gmx.de>\n \n \t* javax/swing/UIDefaults.java (putDefaults):"}, {"sha": "bcb2885e4605ab9679061cb188db249080e72d51", "filename": "libjava/java/text/AttributedCharacterIterator.java", "status": "modified", "additions": 218, "deletions": 259, "changes": 477, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d98f7a8d0c7adb17408c7e54c408b166a0a8cd1/libjava%2Fjava%2Ftext%2FAttributedCharacterIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d98f7a8d0c7adb17408c7e54c408b166a0a8cd1/libjava%2Fjava%2Ftext%2FAttributedCharacterIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FAttributedCharacterIterator.java?ref=6d98f7a8d0c7adb17408c7e54c408b166a0a8cd1", "patch": "@@ -44,266 +44,225 @@\n import java.util.Map;\n \n /**\n-  * This interface extends the <code>CharacterIterator</code> interface\n-  * in order to support iteration over character attributes as well as\n-  * over the characters themselves.\n-  * <p>\n-  * In addition to attributes of specific characters, this interface\n-  * supports the concept of the \"attribute run\", which is an attribute\n-  * that is defined for a particular value across an entire range of\n-  * characters or which is undefined over a range of characters.\n-  *\n-  * @version 0.0\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public interface AttributedCharacterIterator extends CharacterIterator\n-{\n-/**\n-  * This class defines attribute keys that are used as text attributes.\n-  */\n-public static class Attribute implements Serializable\n-{\n-\n-  private static final long serialVersionUID = -9142742483513960612L;\n-\n-/*************************************************************************/\n-\n-/*\n- * Static Variables\n- */\n-\n-/**\n-  * This is the attribute for the language of the text.  The value of\n-  * attributes of this key type are instances of <code>Locale</code>.\n-  */\n-public static final Attribute LANGUAGE = new Attribute(\"LANGUAGE\");\n-\n-/**\n-  * This is the attribute for the reading form of text.  This is used\n-  * for storing pronunciation along with the written text for languages\n-  * which need it.  The value of attributes of this key type are\n-  * instances of <code>Annotation</code> which wrappers a <code>String</code>.\n-  */\n-public static final Attribute READING = new Attribute(\"READING\");\n-\n-/**\n-  * This is the attribute for input method segments.  The value of attributes\n-  * of this key type are instances of <code>Annotation</code> which wrapper\n-  * a <code>String</code>.\n-  */\n-public static final Attribute INPUT_METHOD_SEGMENT =    \n-                                  new Attribute(\"INPUT_METHOD_SEGMENT\");\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Variables\n+ * This interface extends the <code>CharacterIterator</code> interface\n+ * in order to support iteration over character attributes as well as\n+ * over the characters themselves.\n+ * <p>\n+ * In addition to attributes of specific characters, this interface\n+ * supports the concept of the \"attribute run\", which is an attribute\n+ * that is defined for a particular value across an entire range of\n+ * characters or which is undefined over a range of characters.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n-\n-/**\n-  * This is the name of the attribute key\n-  * @serial\n-  */\n-private String name;\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n- */\n-\n-/**\n-  * This method initializes a new instance of this class with the specified\n-  * name.\n-  *\n-  * @param name The name of this attribute key.\n-  */\n-protected\n-Attribute(String name)\n-{\n-  this.name = name;\n-}\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Methods\n- */\n-\n-/**\n-  * This method returns the name of this attribute.\n-  *\n-  * @return The attribute name\n-  */\n-protected String\n-getName()\n-{\n-  return(name);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method resolves an instance of <code>AttributedCharacterIterator.Attribute</code>\n-  * that is being deserialized to one of the three pre-defined attribute\n-  * constants.  It does this by comparing the names of the attributes.  The\n-  * constant that the deserialized object resolves to is returned.\n-  *\n-  * @return The resolved contant value\n-  *\n-  * @exception InvalidObjectException If the object being deserialized cannot be resolved.\n-  */\n-protected Object\n-readResolve() throws InvalidObjectException\n-{\n-  if (this.equals(READING))\n-    return(READING);\n-\n-  if (this.equals(LANGUAGE))\n-    return(LANGUAGE);\n-\n-  if (this.equals(INPUT_METHOD_SEGMENT))\n-    return(INPUT_METHOD_SEGMENT);\n-\n-  throw new InvalidObjectException(\"Can't resolve Attribute: \" + getName());\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method tests this object for equality against the specified object.\n-  * The two objects will be considered equal if and only if:\n-  * <ul>\n-  * <li>The specified object is not <code>null</code>.\n-  * <li>The specified object is an instance of <code>AttributedCharacterIterator.Attribute</code>.\n-  * <li>The specified object has the same attribute name as this object.\n-  * </ul>\n-  *\n-  * @param The <code>Object</code> to test for equality against this object.\n-  *\n-  * @return <code>true</code> if the specified object is equal to this one, <code>false</code> otherwise.\n-  */\n-public final boolean\n-equals(Object obj)\n-{\n-  if (obj == this)\n-    return(true);\n-  else \n-    return(false);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns a hash value for this object.\n-  *\n-  * @return A hash value for this object.\n-  */\n-public final int\n-hashCode()\n-{\n-  return(super.hashCode());\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns a <code>String</code> representation of this object.\n-  *\n-  * @return A <code>String</code> representation of this object.\n-  */\n-public String toString()\n+public interface AttributedCharacterIterator extends CharacterIterator\n {\n-  return(getClass().getName() + \"(\" + getName() + \")\");\n-}\n-\n-} // Inner class Attribute\n-\n-/**\n-  * This method returns a list of all keys that are defined for the \n-  * text range.  This can be an empty list if no attributes are defined.\n-  *\n-  * @return A list of keys \n-  */\n-Set getAllAttributeKeys();\n-\n-/**\n-  * This method returns a <code>Map</code> of the attributed defined for\n-  * the current character.\n-  *\n-  * @return A <code>Map</code> of the attributes for the current character.\n-  */\n-Map getAttributes();\n-\n-/**\n-  * This method returns the value of the specified attribute for the\n-  * current character.  If the attribute is not defined for the current\n-  * character, <code>null</code> is returned.\n-  *\n-  * @param attrib The attribute to retrieve the value of.\n-  *\n-  * @return The value of the specified attribute\n-  */\n-Object getAttribute (AttributedCharacterIterator.Attribute attrib);\n-\n-/**\n-  * This method returns the index of the first character in the run that\n-  * contains all attributes defined for the current character.\n-  *\n-  * @return The start index of the run\n-  */\n-int getRunStart();\n-\n-/**\n-  * This method returns the index of the first character in the run that\n-  * contains all attributes in the specified <code>Set</code> defined for\n-  * the current character.\n-  *\n-  * @param attribs The <code>Set</code> of attributes.\n-  *\n-  * @return The start index of the run.\n-  */\n-int getRunStart (Set attribs);\n-\n-/**\n-  * This method returns the index of the first character in the run that\n-  * contains the specified attribute defined for the current character.\n-  *\n-  * @param attrib The attribute.\n-  *\n-  * @return The start index of the run.\n-  */\n-int getRunStart (AttributedCharacterIterator.Attribute attrib);\n-\n-/**\n-  * This method returns the index of the character after the end of the run\n-  * that contains all attributed defined for the current character.\n-  *\n-  * @return The end index of the run.\n-  */\n-int getRunLimit();\n-\n-/**\n-  * This method returns the index of the character after the end of the run\n-  * that contains all attributes in the specified <code>Set</code> defined\n-  * for the current character.\n-  *\n-  * @param attribs The <code>Set</code> of attributes.\n-  *\n-  * @return The end index of the run.\n-  */\n-int getRunLimit (Set attribs);\n-\n-/**\n-  * This methods returns the index of the character after the end of the run\n-  * that contains the specified attribute defined for the current character.\n-  *\n-  * @param attrib The attribute.\n-  * \n-  * @return The end index of the run.\n-  */\n-int getRunLimit (AttributedCharacterIterator.Attribute attrib);\n+  /**\n+   * This class defines attribute keys that are used as text attributes.\n+   */\n+  public static class Attribute implements Serializable\n+  {\n+    private static final long serialVersionUID = -9142742483513960612L;\n+\n+    /**\n+     * This is the attribute for the language of the text.  The value of\n+     * attributes of this key type are instances of <code>Locale</code>.\n+     */\n+    public static final Attribute LANGUAGE = new Attribute (\"LANGUAGE\");\n+\n+    /**\n+     * This is the attribute for the reading form of text.  This is used\n+     * for storing pronunciation along with the written text for languages\n+     * which need it.  The value of attributes of this key type are\n+     * instances of <code>Annotation</code> which wrappers a <code>String</code>.\n+     */\n+    public static final Attribute READING = new Attribute (\"READING\");\n+\n+    /**\n+     * This is the attribute for input method segments.  The value of attributes\n+     * of this key type are instances of <code>Annotation</code> which wrapper\n+     * a <code>String</code>.\n+     */\n+    public static final Attribute INPUT_METHOD_SEGMENT =\n+      new Attribute (\"INPUT_METHOD_SEGMENT\");\n+\n+    /**\n+     * This is the name of the attribute key\n+     * @serial\n+     */\n+    private String name;\n+\n+    /**\n+     * This method initializes a new instance of this class with the specified\n+     * name.\n+     *\n+     * @param name The name of this attribute key.\n+     */\n+    protected Attribute (String name)\n+    {\n+      this.name = name;\n+    }\n+\n+    /**\n+     * This method returns the name of this attribute.\n+     *\n+     * @return The attribute name\n+     */\n+    protected String getName()\n+    {\n+      return name;\n+    }\n+\n+    /**\n+     * This method resolves an instance of <code>AttributedCharacterIterator.Attribute</code>\n+     * that is being deserialized to one of the three pre-defined attribute\n+     * constants.  It does this by comparing the names of the attributes.  The\n+     * constant that the deserialized object resolves to is returned.\n+     *\n+     * @return The resolved contant value\n+     *\n+     * @exception InvalidObjectException If the object being deserialized cannot be resolved.\n+     */\n+    protected Object readResolve() throws InvalidObjectException\n+    {\n+      if (this.equals (READING))\n+        return READING;\n+\n+      if (this.equals (LANGUAGE))\n+        return LANGUAGE;\n+\n+      if (this.equals (INPUT_METHOD_SEGMENT))\n+        return INPUT_METHOD_SEGMENT;\n+\n+      throw new InvalidObjectException (\"Can't resolve Attribute: \" + getName());\n+    }\n+    \n+    /**\n+     * This method tests this object for equality against the specified object.\n+     * The two objects will be considered equal if and only if:\n+     * <ul>\n+     * <li>The specified object is not <code>null</code>.\n+     * <li>The specified object is an instance of <code>AttributedCharacterIterator.Attribute</code>.\n+     * <li>The specified object has the same attribute name as this object.\n+     * </ul>\n+     *\n+     * @param The <code>Object</code> to test for equality against this object.\n+     *\n+     * @return <code>true</code> if the specified object is equal to this one, <code>false</code> otherwise.\n+     */\n+    public final boolean equals (Object obj)\n+    {\n+      if (obj == this)\n+        return true;\n+      else \n+        return false;\n+    }\n+\n+    /**\n+     * This method returns a hash value for this object.\n+     *\n+     * @return A hash value for this object.\n+     */\n+    public final int hashCode()\n+    {\n+      return super.hashCode();\n+    }\n+\n+    /**\n+     * This method returns a <code>String</code> representation of this object.\n+     *\n+     * @return A <code>String</code> representation of this object.\n+     */\n+    public String toString()\n+    {\n+      return getClass().getName() + \"(\" + getName() + \")\";\n+    }\n+\n+  } // Inner class Attribute\n+\n+  /**\n+   * This method returns a list of all keys that are defined for the \n+   * text range.  This can be an empty list if no attributes are defined.\n+   *\n+   * @return A list of keys \n+   */\n+  Set getAllAttributeKeys();\n+\n+  /**\n+   * This method returns a <code>Map</code> of the attributed defined for\n+   * the current character.\n+   *\n+   * @return A <code>Map</code> of the attributes for the current character.\n+   */\n+  Map getAttributes();\n+\n+  /**\n+   * This method returns the value of the specified attribute for the\n+   * current character.  If the attribute is not defined for the current\n+   * character, <code>null</code> is returned.\n+   *\n+   * @param attrib The attribute to retrieve the value of.\n+   *\n+   * @return The value of the specified attribute\n+   */\n+  Object getAttribute (AttributedCharacterIterator.Attribute attrib);\n+\n+  /**\n+   * This method returns the index of the first character in the run that\n+   * contains all attributes defined for the current character.\n+   *\n+   * @return The start index of the run\n+   */\n+  int getRunStart();\n+\n+  /**\n+   * This method returns the index of the first character in the run that\n+   * contains all attributes in the specified <code>Set</code> defined for\n+   * the current character.\n+   *\n+   * @param attribs The <code>Set</code> of attributes.\n+   *\n+   * @return The start index of the run.\n+   */\n+  int getRunStart (Set attribs);\n+  \n+  /**\n+   * This method returns the index of the first character in the run that\n+   * contains the specified attribute defined for the current character.\n+   *\n+   * @param attrib The attribute.\n+   *\n+   * @return The start index of the run.\n+   */\n+  int getRunStart (AttributedCharacterIterator.Attribute attrib);\n+  \n+  /**\n+   * This method returns the index of the character after the end of the run\n+   * that contains all attributed defined for the current character.\n+   *\n+   * @return The end index of the run.\n+   */\n+  int getRunLimit();\n+  \n+  /**\n+   * This method returns the index of the character after the end of the run\n+   * that contains all attributes in the specified <code>Set</code> defined\n+   * for the current character.\n+   *\n+   * @param attribs The <code>Set</code> of attributes.\n+   *\n+   * @return The end index of the run.\n+   */\n+  int getRunLimit (Set attribs);\n+  \n+  /**\n+   * This methods returns the index of the character after the end of the run\n+   * that contains the specified attribute defined for the current character.\n+   *\n+   * @param attrib The attribute.\n+   * \n+   * @return The end index of the run.\n+   */\n+  int getRunLimit (AttributedCharacterIterator.Attribute attrib);\n \n } // interface AttributedCharacterIterator\n-"}, {"sha": "7b774f7a299b8359c1697dc14735eb363a5d3d3a", "filename": "libjava/java/text/CharacterIterator.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d98f7a8d0c7adb17408c7e54c408b166a0a8cd1/libjava%2Fjava%2Ftext%2FCharacterIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d98f7a8d0c7adb17408c7e54c408b166a0a8cd1/libjava%2Fjava%2Ftext%2FCharacterIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FCharacterIterator.java?ref=6d98f7a8d0c7adb17408c7e54c408b166a0a8cd1", "patch": "@@ -140,4 +140,5 @@ public interface CharacterIterator extends Cloneable\n    * @return A copy of this <code>CharacterIterator</code>.\n    */\n   Object clone();\n-}\n+\n+} // interface CharacterIterator"}]}