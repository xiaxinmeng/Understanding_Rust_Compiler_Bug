{"sha": "0e5dbd9b2c3cc2d6f3f482066f53cfd53206f824", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU1ZGJkOWIyYzNjYzJkNmYzZjQ4MjA2NmY1M2NmZDUzMjA2ZjgyNA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2002-09-05T03:49:42Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-09-05T03:49:42Z"}, "message": "rs6000.c (rs6000_flag_pic): New variable.\n\n        * config/rs6000/rs6000.c (rs6000_flag_pic): New variable.\n        (rs6000_elf_encode_section_info): ATTRIBUTE_UNUSED.\n        (TARGET_BINDS_LOCAL_P): Define.\n        (rs6000_override_options): Save original flag_pic value.\n        (rs6000_elf_select_section): Call default_elf_select_section_1.\n        (rs6000_elf_unique_section): Call default_unique_section_1.\n        (rs6000_elf_in_small_data_p): New function.\n        (rs6000_xcoff_asm_named_section): Determine storage mapping class.\n        (rs6000_xcoff_select_section): Update based on defaults.\n        (rs6000_xcoff_unique_section): Set to basic name if not common.\n        (rs6000_binds_local_p): New function.\n        * config/rs6000/sysv4.h (SUBTARGET_OVERRIDE_OPTIONS): Set\n        targetm.have_srodata_section if SDATA_EABI.\n        (TARGET_IN_SMALL_DATA_P): Define.\n\nFrom-SVN: r56826", "tree": {"sha": "e9605a5d23ddad5f2d0a65df19bf1fc5230895be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9605a5d23ddad5f2d0a65df19bf1fc5230895be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e5dbd9b2c3cc2d6f3f482066f53cfd53206f824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e5dbd9b2c3cc2d6f3f482066f53cfd53206f824", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e5dbd9b2c3cc2d6f3f482066f53cfd53206f824", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e5dbd9b2c3cc2d6f3f482066f53cfd53206f824/comments", "author": null, "committer": null, "parents": [{"sha": "f57f9cb867c637fb60b443770f77f54114c021c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f57f9cb867c637fb60b443770f77f54114c021c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f57f9cb867c637fb60b443770f77f54114c021c9"}], "stats": {"total": 270, "additions": 132, "deletions": 138}, "files": [{"sha": "ce1a955f00b7a66d1f58e885c384708fb23e21b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5dbd9b2c3cc2d6f3f482066f53cfd53206f824/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5dbd9b2c3cc2d6f3f482066f53cfd53206f824/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e5dbd9b2c3cc2d6f3f482066f53cfd53206f824", "patch": "@@ -1,3 +1,20 @@\n+2002-09-04  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_flag_pic): New variable.\n+\t(rs6000_elf_encode_section_info): ATTRIBUTE_UNUSED.\n+\t(TARGET_BINDS_LOCAL_P): Define.\n+\t(rs6000_override_options): Save original flag_pic value.\n+\t(rs6000_elf_select_section): Call default_elf_select_section_1.\n+\t(rs6000_elf_unique_section): Call default_unique_section_1.\n+\t(rs6000_elf_in_small_data_p): New function.\n+\t(rs6000_xcoff_asm_named_section): Determine storage mapping class.\n+\t(rs6000_xcoff_select_section): Update based on defaults.\n+\t(rs6000_xcoff_unique_section): Set to basic name if not common.\n+\t(rs6000_binds_local_p): New function.\n+\t* config/rs6000/sysv4.h (SUBTARGET_OVERRIDE_OPTIONS): Set\n+\ttargetm.have_srodata_section if SDATA_EABI.\n+\t(TARGET_IN_SMALL_DATA_P): Define.\n+\n 2002-09-04  Dale Johannesen  <dalej@apple.com>\n \n \t* varasm.c (struct rtx_const, decode_rtx_const):"}, {"sha": "95ad0e863974f008b9c97605eb8d5d5a062b281f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 107, "deletions": 133, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5dbd9b2c3cc2d6f3f482066f53cfd53206f824/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5dbd9b2c3cc2d6f3f482066f53cfd53206f824/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0e5dbd9b2c3cc2d6f3f482066f53cfd53206f824", "patch": "@@ -95,6 +95,9 @@ const char *rs6000_isel_string;\n /* Set to non-zero once AIX common-mode calls have been defined.  */\n static int common_mode_defined;\n \n+/* Private copy of original value of flag_pic for ABI_AIX.  */\n+static int rs6000_flag_pic;\n+\n /* Save information from a \"cmpxx\" operation until the branch or scc is\n    emitted.  */\n rtx rs6000_compare_op0, rs6000_compare_op1;\n@@ -201,8 +204,10 @@ static void rs6000_elf_select_section PARAMS ((tree, int,\n static void rs6000_elf_unique_section PARAMS ((tree, int));\n static void rs6000_elf_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t\t   unsigned HOST_WIDE_INT));\n-static void rs6000_elf_encode_section_info PARAMS ((tree, int));\n+static void rs6000_elf_encode_section_info PARAMS ((tree, int))\n+     ATTRIBUTE_UNUSED;\n static const char *rs6000_elf_strip_name_encoding PARAMS ((const char *));\n+static bool rs6000_elf_in_small_data_p PARAMS ((tree));\n #endif\n #if TARGET_XCOFF\n static void rs6000_xcoff_asm_globalize_label PARAMS ((FILE *, const char *));\n@@ -216,6 +221,7 @@ static const char * rs6000_xcoff_strip_name_encoding PARAMS ((const char *));\n #endif\n static void rs6000_xcoff_encode_section_info PARAMS ((tree, int))\n      ATTRIBUTE_UNUSED;\n+static void rs6000_binds_local_p PARAMS ((tree));\n static int rs6000_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n static int rs6000_adjust_priority PARAMS ((rtx, int));\n static int rs6000_issue_rate PARAMS ((void));\n@@ -361,6 +367,9 @@ static const char alt_reg_names[][8] =\n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN rs6000_expand_builtin\n \n+#undef TARGET_BINDS_LOCAL_P\n+#define TARGET_BINDS_LOCAL_P rs6000_binds_local_p\n+\n /* The VRSAVE bitmask puts bit %v0 as the most significant bit.  */\n #define ALTIVEC_REG_BIT(REGNO) (0x80000000 >> ((REGNO) - FIRST_ALTIVEC_REGNO))\n \n@@ -574,11 +583,8 @@ rs6000_override_options (default_cpu)\n \n   if (flag_pic != 0 && DEFAULT_ABI == ABI_AIX)\n     {\n+      rs6000_flag_pic = flag_pic;\n       flag_pic = 0;\n-\n-      if (extra_warnings)\n-\twarning (\"-f%s ignored (all code is position independent)\",\n-\t\t (flag_pic > 1) ? \"PIC\" : \"pic\");\n     }\n \n #ifdef XCOFF_DEBUGGING_INFO\n@@ -12425,43 +12431,10 @@ static void\n rs6000_elf_select_section (decl, reloc, align)\n      tree decl;\n      int reloc;\n-     unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED;\n+     unsigned HOST_WIDE_INT align;\n {\n-  int size = int_size_in_bytes (TREE_TYPE (decl));\n-  bool needs_sdata;\n-  bool readonly;\n-  static void (* const sec_funcs[4]) PARAMS ((void)) = {\n-    &readonly_data_section,\n-    &sdata2_section,\n-    &data_section,\n-    &sdata_section\n-  };\n-  \n-  needs_sdata = (size > 0 \n-\t\t && size <= g_switch_value\n-\t\t && rs6000_sdata != SDATA_NONE\n-\t\t && (rs6000_sdata != SDATA_DATA || TREE_PUBLIC (decl)));\n-\n-  if (TREE_CODE (decl) == STRING_CST)\n-    readonly = !flag_writable_strings;\n-  else if (TREE_CODE (decl) == VAR_DECL)\n-    readonly = (!((flag_pic || DEFAULT_ABI == ABI_AIX) && reloc)\n-\t\t&& TREE_READONLY (decl)\n-\t\t&& !TREE_SIDE_EFFECTS (decl)\n-\t\t&& DECL_INITIAL (decl)\n-\t\t&& DECL_INITIAL (decl) != error_mark_node\n-\t\t&& TREE_CONSTANT (DECL_INITIAL (decl)));\n-  else if (TREE_CODE (decl) == CONSTRUCTOR)\n-    readonly = (!((flag_pic || DEFAULT_ABI == ABI_AIX) && reloc)\n-\t\t&& !TREE_SIDE_EFFECTS (decl)\n-\t\t&& TREE_CONSTANT (decl));\n-  else\n-    readonly = !((flag_pic || DEFAULT_ABI == ABI_AIX) && reloc);\n-\n-  if (needs_sdata && rs6000_sdata != SDATA_EABI)\n-    readonly = false;\n-  \n-  (*sec_funcs[(readonly ? 0 : 2) + (needs_sdata ? 1 : 0)])();\n+  default_elf_select_section_1 (decl, reloc, align,\n+\t\t\t\tflag_pic || DEFAULT_ABI == ABI_AIX);\n }\n \n /* A C statement to build up a unique section name, expressed as a\n@@ -12477,73 +12450,8 @@ rs6000_elf_unique_section (decl, reloc)\n      tree decl;\n      int reloc;\n {\n-  int len;\n-  int sec;\n-  const char *name;\n-  char *string;\n-  const char *prefix;\n-\n-  static const char *const prefixes[7][2] =\n-  {\n-    { \".rodata.\", \".gnu.linkonce.r.\" },\n-    { \".sdata2.\", \".gnu.linkonce.s2.\" },\n-    { \".data.\",   \".gnu.linkonce.d.\" },\n-    { \".sdata.\",  \".gnu.linkonce.s.\" },\n-    { \".bss.\",    \".gnu.linkonce.b.\" },\n-    { \".sbss.\",   \".gnu.linkonce.sb.\" },\n-    { \".text.\",   \".gnu.linkonce.t.\" }\n-  };\n-\n-  if (TREE_CODE (decl) == FUNCTION_DECL)\n-    sec = 6;\n-  else\n-    {\n-      bool readonly;\n-      bool needs_sdata;\n-      int size;\n-\n-      if (TREE_CODE (decl) == STRING_CST)\n-\treadonly = !flag_writable_strings;\n-      else if (TREE_CODE (decl) == VAR_DECL)\n-\treadonly = (!((flag_pic || DEFAULT_ABI == ABI_AIX) && reloc)\n-\t\t    && TREE_READONLY (decl)\n-\t\t    && !TREE_SIDE_EFFECTS (decl)\n-\t\t    && TREE_CONSTANT (DECL_INITIAL (decl)));\n-      else\n-\treadonly = !((flag_pic || DEFAULT_ABI == ABI_AIX) && reloc);\n-\n-      size = int_size_in_bytes (TREE_TYPE (decl));\n-      needs_sdata = (size > 0 \n-\t\t     && size <= g_switch_value\n-\t\t     && rs6000_sdata != SDATA_NONE\n-\t\t     && (rs6000_sdata != SDATA_DATA || TREE_PUBLIC (decl)));\n-\n-      if (DECL_INITIAL (decl) == NULL\n-\t  || DECL_INITIAL (decl) == error_mark_node)\n-\tsec = 4;\n-      else if (!readonly)\n-\tsec = 2;\n-      else\n-\tsec = 0;\n-\n-      if (needs_sdata)\n-\t{\n-\t  /* .sdata2 is only for EABI.  */\n-\t  if (sec == 0 && rs6000_sdata != SDATA_EABI)\n-\t    sec = 2;\n-\t  sec += 1;\n-\t}\n-    }\n-\n-  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-  name = (*targetm.strip_name_encoding) (name);\n-  prefix = prefixes[sec][DECL_ONE_ONLY (decl)];\n-  len    = strlen (name) + strlen (prefix);\n-  string = alloca (len + 1);\n-  \n-  sprintf (string, \"%s%s\", prefix, name);\n-  \n-  DECL_SECTION_NAME (decl) = build_string (len, string);\n+  default_unique_section_1 (decl, reloc,\n+\t\t\t    flag_pic || DEFAULT_ABI == ABI_AIX);\n }\n \n \f\n@@ -12637,6 +12545,34 @@ rs6000_elf_strip_name_encoding (str)\n   return str;\n }\n \n+static bool\n+rs6000_elf_in_small_data_p (decl)\n+     tree decl;\n+{\n+  if (rs6000_sdata == SDATA_NONE)\n+    return false;\n+\n+  if (TREE_CODE (decl) == VAR_DECL && DECL_SECTION_NAME (decl))\n+    {\n+      const char *section = TREE_STRING_POINTER (DECL_SECTION_NAME (decl));\n+      if (strcmp (section, \".sdata\") == 0\n+\t  || strcmp (section, \".sdata2\") == 0\n+\t  || strcmp (section, \".sbss\") == 0)\n+\treturn true;\n+    }\n+  else\n+    {\n+      HOST_WIDE_INT size = int_size_in_bytes (TREE_TYPE (decl));\n+\n+      if (size > 0\n+\t  && size <= g_switch_value\n+\t  && (rs6000_sdata != SDATA_DATA || TREE_PUBLIC (decl)))\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n #endif /* USING_ELFOS_H */\n \n \f\n@@ -13106,34 +13042,57 @@ rs6000_xcoff_asm_globalize_label (stream, name)\n static void\n rs6000_xcoff_asm_named_section (name, flags)\n      const char *name;\n-     unsigned int flags ATTRIBUTE_UNUSED;\n+     unsigned int flags;\n {\n-  fprintf (asm_out_file, \"\\t.csect %s\\n\", name);\n+  int smclass;\n+  static const char * const suffix[3] = { \"PR\", \"RO\", \"RW\" };\n+\n+  if (flags & SECTION_CODE)\n+    smclass = 0;\n+  else if (flags & SECTION_WRITE)\n+    smclass = 2;\n+  else\n+    smclass = 1;\n+\n+  fprintf (asm_out_file, \"\\t.csect %s%s[%s]\\n\",\n+\t   (flags & SECTION_CODE) ? \".\" : \"\",\n+\t   name, suffix[smclass]);\n }\n \n static void\n-rs6000_xcoff_select_section (exp, reloc, align)\n-     tree exp;\n+rs6000_xcoff_select_section (decl, reloc, align)\n+     tree decl;\n      int reloc;\n      unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED;\n {\n-  if ((TREE_CODE (exp) == STRING_CST\n-       && ! flag_writable_strings)\n-      || (TREE_CODE_CLASS (TREE_CODE (exp)) == 'd'\n-\t  && TREE_READONLY (exp) && ! TREE_THIS_VOLATILE (exp)\n-\t  && DECL_INITIAL (exp)\n-\t  && (DECL_INITIAL (exp) == error_mark_node\n-\t      || TREE_CONSTANT (DECL_INITIAL (exp)))\n-\t  && ! (reloc)))\n+  bool readonly = false;\n+\n+  if (TREE_CODE (decl) == STRING_CST)\n+    readonly = !flag_writable_strings;\n+  else if (TREE_CODE (decl) == VAR_DECL)\n+    readonly = (!reloc\n+\t\t&& TREE_READONLY (decl)\n+\t\t&& !TREE_SIDE_EFFECTS (decl)\n+\t\t&& DECL_INITIAL (decl)\n+\t\t&& DECL_INITIAL (decl) != error_mark_node\n+\t\t&& TREE_CONSTANT (DECL_INITIAL (decl)));\n+  else if (TREE_CODE (decl) == CONSTRUCTOR)\n+    readonly = (!reloc\n+\t\t&& !TREE_SIDE_EFFECTS (decl)\n+\t\t&& TREE_CONSTANT (decl));\n+  else\n+    readonly = !reloc;\n+\n+  if (readonly)\n     {\n-      if (TREE_PUBLIC (exp))\n+      if (TREE_PUBLIC (decl))\n         read_only_data_section ();\n       else\n         read_only_private_data_section ();\n     }\n   else\n     {\n-      if (TREE_PUBLIC (exp))\n+      if (TREE_PUBLIC (decl))\n         data_section ();\n       else\n         private_data_section ();\n@@ -13146,17 +13105,18 @@ rs6000_xcoff_unique_section (decl, reloc)\n      int reloc ATTRIBUTE_UNUSED;\n {\n   const char *name;\n-  char *string;\n-  size_t len;\n \n-  if (TREE_CODE (decl) == FUNCTION_DECL)\n-    {\n-      name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-      len = strlen (name) + 5;\n-      string = alloca (len + 1);\n-      sprintf (string, \".%s[PR]\", name);\n-      DECL_SECTION_NAME (decl) = build_string (len, string);\n-    }\n+  /* Use select_section for uninitialized data.  */\n+  if (DECL_COMMON (decl)\n+      || DECL_INITIAL (decl) == NULL_TREE\n+      || DECL_INITIAL (decl) == error_mark_node\n+      || (flag_zero_initialized_in_bss\n+\t  && initializer_zerop (DECL_INITIAL (decl))))\n+    return;\n+\n+  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+  name = (*targetm.strip_name_encoding) (name);\n+  DECL_SECTION_NAME (decl) = build_string (strlen (name), name);\n }\n \n /* Select section for constant in constant pool.\n@@ -13195,7 +13155,7 @@ rs6000_xcoff_strip_name_encoding (name)\n \n #endif /* TARGET_XCOFF */\n \n-/* Note that this is also used for ELF64.  */\n+/* Note that this is also used for PPC64 Linux.  */\n \n static void\n rs6000_xcoff_encode_section_info (decl, first)\n@@ -13207,3 +13167,17 @@ rs6000_xcoff_encode_section_info (decl, first)\n       && ! DECL_WEAK (decl))\n     SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n }\n+\n+/* Cross-module name binding.  For AIX and PPC64 Linux, which always are\n+   PIC, use private copy of flag_pic.  */\n+\n+static void\n+rs6000_binds_local_p (decl)\n+     tree decl;\n+{\n+  if (DEFAULT_ABI == ABI_AIX)\n+    default_binds_local_p_1 (decl, rs6000_flag_pic);\n+  else\n+    default_binds_local_p_1 (decl, flag_pic);\n+}\n+"}, {"sha": "f77e28493023d81362de085f010dc7c0c6ef9365", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5dbd9b2c3cc2d6f3f482066f53cfd53206f824/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5dbd9b2c3cc2d6f3f482066f53cfd53206f824/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=0e5dbd9b2c3cc2d6f3f482066f53cfd53206f824", "patch": "@@ -261,6 +261,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t     rs6000_sdata_name, rs6000_abi_name);\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+  targetm.have_srodata_section = rs6000_sdata == SDATA_EABI;\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_RELOCATABLE && !TARGET_MINIMAL_TOC)\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags |= MASK_MINIMAL_TOC;\t\t\t\t\t\\\n@@ -778,14 +780,15 @@ extern int fixuplabelno;\n /* This is the end of what might become sysv4.h.  */\n \n /* Use DWARF 2 debugging information by default.  */\n-#undef\tPREFERRED_DEBUGGING_TYPE\n-#define\tPREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n+#undef  PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n \n /* Historically we have also supported stabs debugging.  */\n-#define\tDBX_DEBUGGING_INFO 1\n+#define DBX_DEBUGGING_INFO 1\n \n-#define\tTARGET_ENCODE_SECTION_INFO  rs6000_elf_encode_section_info\n-#define\tTARGET_STRIP_NAME_ENCODING  rs6000_elf_strip_name_encoding\n+#define TARGET_ENCODE_SECTION_INFO  rs6000_elf_encode_section_info\n+#define TARGET_STRIP_NAME_ENCODING  rs6000_elf_strip_name_encoding\n+#define TARGET_IN_SMALL_DATA_P  rs6000_elf_in_small_data_p\n \n /* The ELF version doesn't encode [DS] or whatever at the end of symbols.  */\n "}]}