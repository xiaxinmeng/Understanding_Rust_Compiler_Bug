{"sha": "02a65d230fc24a23a5c74483bc6de7dcd24b4e80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJhNjVkMjMwZmMyNGEyM2E1Yzc0NDgzYmM2ZGU3ZGNkMjRiNGU4MA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-01-26T10:34:53Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-01-26T10:34:53Z"}, "message": "acinclude.m4 ([GLIBCXX_ENABLE_C99]): Add ac_c99_complex to the final test for enable_c99, thus robustifying it...\n\n2005-01-26  Paolo Carlini  <pcarlini@suse.de>\n\n\t* acinclude.m4 ([GLIBCXX_ENABLE_C99]): Add ac_c99_complex\n\tto the final test for enable_c99, thus robustifying it; remove\n\tduplicate final test on ac_99_math.\n\t* configure: Regenerate.\n\n\t* include/std/std_complex.h: Remove usages of the dead\n\t_GLIBCXX_BUGGY_COMPLEX macro.\n\n\t* testsuite/26_numerics/cmath/19322.cc: Protect with\n\t_GLIBCXX_USE_C99_MATH instead of the stronger _GLIBCXX_USE_C99,\n\tsince only C99 math facilities are involved.\n\t* testsuite/26_numerics/cmath/c99_classification_macros_c++.cc:\n\tLikewise.\n\nFrom-SVN: r94257", "tree": {"sha": "8649195ff92300ce4f1438e8b0637e1bc93132c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8649195ff92300ce4f1438e8b0637e1bc93132c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02a65d230fc24a23a5c74483bc6de7dcd24b4e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a65d230fc24a23a5c74483bc6de7dcd24b4e80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a65d230fc24a23a5c74483bc6de7dcd24b4e80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a65d230fc24a23a5c74483bc6de7dcd24b4e80/comments", "author": null, "committer": null, "parents": [{"sha": "97bd954f1c5c2e26f5a429bab411e510b3f2ad39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97bd954f1c5c2e26f5a429bab411e510b3f2ad39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97bd954f1c5c2e26f5a429bab411e510b3f2ad39"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "d362f203f39a671afef66b7898b7bd939dc397d3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a65d230fc24a23a5c74483bc6de7dcd24b4e80/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a65d230fc24a23a5c74483bc6de7dcd24b4e80/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=02a65d230fc24a23a5c74483bc6de7dcd24b4e80", "patch": "@@ -1,3 +1,19 @@\n+2005-01-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* acinclude.m4 ([GLIBCXX_ENABLE_C99]): Add ac_c99_complex\n+\tto the final test for enable_c99, thus robustifying it; remove\n+\tduplicate final test on ac_99_math.\n+\t* configure: Regenerate.\n+\n+\t* include/std/std_complex.h: Remove usages of the dead\n+\t_GLIBCXX_BUGGY_COMPLEX macro.\n+\n+\t* testsuite/26_numerics/cmath/19322.cc: Protect with\n+\t_GLIBCXX_USE_C99_MATH instead of the stronger _GLIBCXX_USE_C99,\n+\tsince only C99 math facilities are involved.\n+\t* testsuite/26_numerics/cmath/c99_classification_macros_c++.cc:\n+\tLikewise.\n+\n 2005-01-25  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* acinclude.m4 (GLIBCXX_ENABLE_CLOCALE): Map FreeBSD to darwin"}, {"sha": "f18b7d90b53120d258206f2ee9728c004f6a4b22", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a65d230fc24a23a5c74483bc6de7dcd24b4e80/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a65d230fc24a23a5c74483bc6de7dcd24b4e80/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=02a65d230fc24a23a5c74483bc6de7dcd24b4e80", "patch": "@@ -871,7 +871,7 @@ AC_DEFUN([GLIBCXX_ENABLE_C99], [\n     AC_DEFINE(_GLIBCXX_USE_C99_MATH)\n   fi\n \n-  # Check for the existence of <math.h> complex functions.\n+  # Check for the existence of <complex.h> complex functions.\n   # This is necessary even though libstdc++ uses the builtin versions\n   # of these functions, because if the builtin cannot be used, a reference\n   # to the library function is emitted.\n@@ -1055,17 +1055,14 @@ AC_DEFUN([GLIBCXX_ENABLE_C99], [\n \n   AC_MSG_CHECKING([for enabled ISO C99 support])\n   if test x\"$ac_c99_math\" = x\"no\" ||\n+     test x\"$ac_c99_complex\" = x\"no\" ||\n      test x\"$ac_c99_stdio\" = x\"no\" ||\n      test x\"$ac_c99_stdlib\" = x\"no\" ||\n      test x\"$ac_c99_wchar\" = x\"no\"; then\n     enable_c99=no;\n   fi;\n   AC_MSG_RESULT($enable_c99)\n \n-  if test x\"$ac_99_math\" = x\"yes\"; then\n-    AC_DEFINE(_GLIBCXX_USE_C99_MATH)\n-  fi\n-\n   # Option parsed, now set things appropriately\n   if test x\"$enable_c99\" = x\"yes\"; then\n     AC_DEFINE(_GLIBCXX_USE_C99)"}, {"sha": "8b7b49374f47b48a9e00f242c8780f10bf26523c", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a65d230fc24a23a5c74483bc6de7dcd24b4e80/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a65d230fc24a23a5c74483bc6de7dcd24b4e80/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=02a65d230fc24a23a5c74483bc6de7dcd24b4e80", "patch": "@@ -6948,7 +6948,7 @@ _ACEOF\n \n   fi\n \n-  # Check for the existence of <math.h> complex functions.\n+  # Check for the existence of <complex.h> complex functions.\n   # This is necessary even though libstdc++ uses the builtin versions\n   # of these functions, because if the builtin cannot be used, a reference\n   # to the library function is emitted.\n@@ -9369,6 +9369,7 @@ echo \"${ECHO_T}$ac_c99_wchar\" >&6\n   echo \"$as_me:$LINENO: checking for enabled ISO C99 support\" >&5\n echo $ECHO_N \"checking for enabled ISO C99 support... $ECHO_C\" >&6\n   if test x\"$ac_c99_math\" = x\"no\" ||\n+     test x\"$ac_c99_complex\" = x\"no\" ||\n      test x\"$ac_c99_stdio\" = x\"no\" ||\n      test x\"$ac_c99_stdlib\" = x\"no\" ||\n      test x\"$ac_c99_wchar\" = x\"no\"; then\n@@ -9377,13 +9378,6 @@ echo $ECHO_N \"checking for enabled ISO C99 support... $ECHO_C\" >&6\n   echo \"$as_me:$LINENO: result: $enable_c99\" >&5\n echo \"${ECHO_T}$enable_c99\" >&6\n \n-  if test x\"$ac_99_math\" = x\"yes\"; then\n-    cat >>confdefs.h <<\\_ACEOF\n-#define _GLIBCXX_USE_C99_MATH 1\n-_ACEOF\n-\n-  fi\n-\n   # Option parsed, now set things appropriately\n   if test x\"$enable_c99\" = x\"yes\"; then\n     cat >>confdefs.h <<\\_ACEOF"}, {"sha": "2ef5817755eaa54c0264f5395a3c4040f7b35a36", "filename": "libstdc++-v3/include/std/std_complex.h", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a65d230fc24a23a5c74483bc6de7dcd24b4e80/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a65d230fc24a23a5c74483bc6de7dcd24b4e80/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h?ref=02a65d230fc24a23a5c74483bc6de7dcd24b4e80", "patch": "@@ -995,9 +995,7 @@ namespace std\n       complex(_ComplexT __z) : _M_value(__z) { }\n \n       complex(float = 0.0f, float = 0.0f);\n-#if _GLIBCXX_BUGGY_COMPLEX\n-      complex(const complex& __z) : _M_value(__z._M_value) { }\n-#endif\n+\n       explicit complex(const complex<double>&);\n       explicit complex(const complex<long double>&);\n \n@@ -1150,10 +1148,8 @@ namespace std\n \n       complex(_ComplexT __z) : _M_value(__z) { }\n \n-      complex(double  = 0.0, double = 0.0);\n-#if _GLIBCXX_BUGGY_COMPLEX\n-      complex(const complex& __z) : _M_value(__z._M_value) { }\n-#endif\n+      complex(double = 0.0, double = 0.0);\n+\n       complex(const complex<float>&);\n       explicit complex(const complex<long double>&);\n \n@@ -1306,9 +1302,7 @@ namespace std\n       complex(_ComplexT __z) : _M_value(__z) { }\n \n       complex(long double = 0.0L, long double = 0.0L);\n-#if _GLIBCXX_BUGGY_COMPLEX\n-      complex(const complex& __z) : _M_value(__z._M_value) { }\n-#endif\n+\n       complex(const complex<float>&);\n       complex(const complex<double>&);\n "}, {"sha": "ca6fdaadb17d783ff4187357ef223c68094bc055", "filename": "libstdc++-v3/testsuite/26_numerics/cmath/19322.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a65d230fc24a23a5c74483bc6de7dcd24b4e80/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcmath%2F19322.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a65d230fc24a23a5c74483bc6de7dcd24b4e80/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcmath%2F19322.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcmath%2F19322.cc?ref=02a65d230fc24a23a5c74483bc6de7dcd24b4e80", "patch": "@@ -28,7 +28,7 @@\n #include <cmath>\n #include <testsuite_hooks.h>\n \n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_MATH\n // libstdc++/19322\n void test01()\n {\n@@ -40,7 +40,7 @@ void test01()\n \n int main()\n {\n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_MATH\n   test01();\n #endif\n   return 0;"}, {"sha": "28dd9407c6b51a65c355cb600c4d9c4ab280eaab", "filename": "libstdc++-v3/testsuite/26_numerics/cmath/c99_classification_macros_c++.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a65d230fc24a23a5c74483bc6de7dcd24b4e80/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcmath%2Fc99_classification_macros_c%2B%2B.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a65d230fc24a23a5c74483bc6de7dcd24b4e80/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcmath%2Fc99_classification_macros_c%2B%2B.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcmath%2Fc99_classification_macros_c%2B%2B.cc?ref=02a65d230fc24a23a5c74483bc6de7dcd24b4e80", "patch": "@@ -55,7 +55,7 @@ void islessgreater() { }\n \n void isunordered() { }\n \n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_MATH\n template <typename _Tp>\n   void test_c99_classify()\n   {\n@@ -83,7 +83,7 @@ template <typename _Tp>\n \n int main()\n {\n-#if _GLIBCXX_USE_C99\n+#if _GLIBCXX_USE_C99_MATH\n   test_c99_classify<float>();\n   test_c99_classify<double>();\n #endif"}]}