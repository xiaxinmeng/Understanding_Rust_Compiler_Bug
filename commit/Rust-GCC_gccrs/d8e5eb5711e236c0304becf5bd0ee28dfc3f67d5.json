{"sha": "d8e5eb5711e236c0304becf5bd0ee28dfc3f67d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhlNWViNTcxMWUyMzZjMDMwNGJlY2Y1YmQwZWUyOGRmYzNmNjdkNQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-12-29T09:20:01Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-12-29T09:20:01Z"}, "message": "dependency.c (gfc_dep_compare_functions): Document new behavior for REALs and complex.\n\n2011-12-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\t* dependency.c (gfc_dep_compare_functions):  Document\n\tnew behavior for REALs and complex.  Add comment to cases\n\twhere only INTEGERs are handled.  Compare REAL and COMPLEX\n\tconstants, returning 0 and -2 only.  Add assert to make\n\tsure that only integer constants are compared.\n\n2011-12-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\t* gfortran.dg/function_optimize_9.f90:  New test.\n\nFrom-SVN: r182720", "tree": {"sha": "d10f25bdc5da73a713310bc59080aacef1f576df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d10f25bdc5da73a713310bc59080aacef1f576df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8e5eb5711e236c0304becf5bd0ee28dfc3f67d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e5eb5711e236c0304becf5bd0ee28dfc3f67d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e5eb5711e236c0304becf5bd0ee28dfc3f67d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e5eb5711e236c0304becf5bd0ee28dfc3f67d5/comments", "author": null, "committer": null, "parents": [{"sha": "663b7c930535f94f4a2dc3309dae30d22faab1b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/663b7c930535f94f4a2dc3309dae30d22faab1b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/663b7c930535f94f4a2dc3309dae30d22faab1b8"}], "stats": {"total": 74, "additions": 68, "deletions": 6}, "files": [{"sha": "d79478d949c50296bff294893fca8bea5730750e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e5eb5711e236c0304becf5bd0ee28dfc3f67d5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e5eb5711e236c0304becf5bd0ee28dfc3f67d5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d8e5eb5711e236c0304becf5bd0ee28dfc3f67d5", "patch": "@@ -1,3 +1,11 @@\n+2011-12-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* dependency.c (gfc_dep_compare_functions):  Document\n+\tnew behavior for REALs and complex.  Add comment to cases\n+\twhere only INTEGERs are handled.  Compare REAL and COMPLEX\n+\tconstants, returning 0 and -2 only.  Add assert to make\n+\tsure that only integer constants are compared.\n+\n 2011-12-19  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/51605"}, {"sha": "a2cf21d65f18a274cdc301a4ee6b65da8b355bb6", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e5eb5711e236c0304becf5bd0ee28dfc3f67d5/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e5eb5711e236c0304becf5bd0ee28dfc3f67d5/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=d8e5eb5711e236c0304becf5bd0ee28dfc3f67d5", "patch": "@@ -245,7 +245,9 @@ gfc_dep_compare_functions (gfc_expr *e1, gfc_expr *e2, bool impure_ok)\n    * 0 if e1 == e2\n    * -1 if e1 < e2\n    * -2 if the relationship could not be determined\n-   * -3 if e1 /= e2, but we cannot tell which one is larger.  */\n+   * -3 if e1 /= e2, but we cannot tell which one is larger.\n+   REAL and COMPLEX constants are only compared for equality\n+   or inequality; if they are unequal, -2 is returned in all cases.  */\n \n int\n gfc_dep_compare_expr (gfc_expr *e1, gfc_expr *e2)\n@@ -303,7 +305,7 @@ gfc_dep_compare_expr (gfc_expr *e1, gfc_expr *e2)\n \n   if (e1->expr_type == EXPR_OP && e1->value.op.op == INTRINSIC_PLUS)\n     {\n-      /* Compare X+C vs. X.  */\n+      /* Compare X+C vs. X, for INTEGER only.  */\n       if (e1->value.op.op2->expr_type == EXPR_CONSTANT\n \t  && e1->value.op.op2->ts.type == BT_INTEGER\n \t  && gfc_dep_compare_expr (e1->value.op.op1, e2) == 0)\n@@ -342,7 +344,7 @@ gfc_dep_compare_expr (gfc_expr *e1, gfc_expr *e2)\n \t}\n     }\n \n-  /* Compare X vs. X+C.  */\n+  /* Compare X vs. X+C, for INTEGER only.  */\n   if (e2->expr_type == EXPR_OP && e2->value.op.op == INTRINSIC_PLUS)\n     {\n       if (e2->value.op.op2->expr_type == EXPR_CONSTANT\n@@ -351,7 +353,7 @@ gfc_dep_compare_expr (gfc_expr *e1, gfc_expr *e2)\n \treturn -mpz_sgn (e2->value.op.op2->value.integer);\n     }\n \n-  /* Compare X-C vs. X.  */\n+  /* Compare X-C vs. X, for INTEGER only.  */\n   if (e1->expr_type == EXPR_OP && e1->value.op.op == INTRINSIC_MINUS)\n     {\n       if (e1->value.op.op2->expr_type == EXPR_CONSTANT\n@@ -415,7 +417,7 @@ gfc_dep_compare_expr (gfc_expr *e1, gfc_expr *e2)\n \t}\n     }\n \n-  /* Compare X vs. X-C.  */\n+  /* Compare X vs. X-C, for INTEGER only.  */\n   if (e2->expr_type == EXPR_OP && e2->value.op.op == INTRINSIC_MINUS)\n     {\n       if (e2->value.op.op2->expr_type == EXPR_CONSTANT\n@@ -434,9 +436,34 @@ gfc_dep_compare_expr (gfc_expr *e1, gfc_expr *e2)\n       if (e1->ts.type == BT_CHARACTER && e2->ts.type == BT_CHARACTER)\n \treturn gfc_compare_string (e1, e2);\n \n+      /* Compare REAL and COMPLEX constants.  Because of the\n+\t traps and pitfalls associated with comparing\n+\t a + 1.0 with a + 0.5, check for equality only.  */\n+      if (e2->expr_type == EXPR_CONSTANT)\n+\t{\n+\t  if (e1->ts.type == BT_REAL && e2->ts.type == BT_REAL)\n+\t    {\n+\t      if (mpfr_cmp (e1->value.real, e2->value.real) == 0)\n+\t\treturn 0;\n+\t      else\n+\t\treturn -2;\n+\t    }\n+\t  else if (e1->ts.type == BT_COMPLEX && e2->ts.type == BT_COMPLEX)\n+\t    {\n+\t      if (mpc_cmp (e1->value.complex, e2->value.complex) == 0)\n+\t\treturn 0;\n+\t      else\n+\t\treturn -2;\n+\t    }\n+\t}\n+\n       if (e1->ts.type != BT_INTEGER || e2->ts.type != BT_INTEGER)\n \treturn -2;\n \n+      /* For INTEGER, all cases where e2 is not constant should have\n+\t been filtered out above.  */\n+      gcc_assert (e2->expr_type == EXPR_CONSTANT);\n+\n       i = mpz_cmp (e1->value.integer, e2->value.integer);\n       if (i == 0)\n \treturn 0;\n@@ -465,7 +492,7 @@ gfc_dep_compare_expr (gfc_expr *e1, gfc_expr *e2)\n       else if (e1->value.op.op == INTRINSIC_TIMES\n \t       && gfc_dep_compare_expr (e1->value.op.op1, e2->value.op.op2) == 0\n \t       && gfc_dep_compare_expr (e1->value.op.op2, e2->value.op.op1) == 0)\n-\t/* Commutativity of multiplication.  */\n+\t/* Commutativity of multiplication; addition is handled above.  */\n \treturn 0;\n \n       return -2;"}, {"sha": "306356790a90296b67abb25ec5f77d3dc2cf3e31", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e5eb5711e236c0304becf5bd0ee28dfc3f67d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e5eb5711e236c0304becf5bd0ee28dfc3f67d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d8e5eb5711e236c0304becf5bd0ee28dfc3f67d5", "patch": "@@ -1,3 +1,7 @@\n+2011-12-29  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* gfortran.dg/function_optimize_9.f90:  New test.\n+\n 2011-12-27  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n \n \tPR c++/23211"}, {"sha": "350ce9a8f66ef5692d4c890ef6da72e1713ee7e6", "filename": "gcc/testsuite/gfortran.dg/function_optimize_9.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e5eb5711e236c0304becf5bd0ee28dfc3f67d5/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_optimize_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e5eb5711e236c0304becf5bd0ee28dfc3f67d5/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_optimize_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_optimize_9.f90?ref=d8e5eb5711e236c0304becf5bd0ee28dfc3f67d5", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+! { dg-options \"-O -fdump-tree-original\" }\n+program main\n+  integer, parameter :: n=100\n+  real, parameter :: pi=4*atan(1.)\n+  real, parameter :: tmax=20.\n+  real, parameter :: dt = tmax/(2*pi)/real(n)\n+  real, parameter :: t0 = dt/30.\n+  integer :: i\n+  interface\n+     pure function purefunc(x)\n+       real :: purefunc\n+       real, intent(in) :: x\n+     end function purefunc\n+  end interface\n+  real :: a(n)\n+  do i=1,n\n+     a(i) = purefunc(dt*i + t0) * 3. + 2 * purefunc(t0 + i*dt) \n+  end do\n+  print *,a\n+end program main\n+! { dg-final { scan-tree-dump-times \"purefunc\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}