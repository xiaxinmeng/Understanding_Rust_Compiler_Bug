{"sha": "567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY3YTZlMWNkYjNjYWUwOWFlNzRiZGQ1MjhmZDMxYzBiNDk1NmFkMg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-01-13T13:52:34Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-01-13T13:52:34Z"}, "message": "re PR fortran/52162 (Bogus -fcheck=bounds with realloc on assignment to unallocated LHS)\n\n2018-01-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/52162\n\t* trans-expr.c (gfc_trans_scalar_assign): Flag is_alloc_lhs if\n\tthe rhs expression is neither an elemental nor a conversion\n\tfunction.\n\n\tPR fortran/83622\n\t* trans-array.c (is_pointer_array): Remove unconditional return\n\tof false for -fopenmp.\n\n2018-01-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/52162\n\t* gfortran.dg/bounds_check_19.f90 : New test.\n\nFrom-SVN: r256607", "tree": {"sha": "a382870fea24ff5a8345e401de81e482bb901fde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a382870fea24ff5a8345e401de81e482bb901fde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2/comments", "author": null, "committer": null, "parents": [{"sha": "700b62ccf29e12b68029883b5c1e69f151c4e512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/700b62ccf29e12b68029883b5c1e69f151c4e512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/700b62ccf29e12b68029883b5c1e69f151c4e512"}], "stats": {"total": 50, "additions": 45, "deletions": 5}, "files": [{"sha": "1e421d9027dba702b18d1269bf7e304ed06384b2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2", "patch": "@@ -1,3 +1,14 @@\n+2018-01-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/52162\n+\t* trans-expr.c (gfc_trans_scalar_assign): Flag is_alloc_lhs if\n+\tthe rhs expression is neither an elemental nor a conversion\n+\tfunction.\n+\n+\tPR fortran/83622\n+\t* trans-array.c (is_pointer_array): Remove unconditional return\n+\tof false for -fopenmp.\n+\n 2018-01-13  Thomas Koenig <tkoenig@gcc.gnu.org>\n \t<emsr@gcc.gnu.org>\n "}, {"sha": "0cf1831802b66692a6920b6ff49dcc7beee7420b", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2", "patch": "@@ -786,9 +786,6 @@ gfc_add_ss_to_loop (gfc_loopinfo * loop, gfc_ss * head)\n static bool\n is_pointer_array (tree expr)\n {\n-  if (flag_openmp)\n-    return false;\n-\n   if (expr == NULL_TREE\n       || !GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (expr))\n       || GFC_CLASS_TYPE_P (TREE_TYPE (expr)))"}, {"sha": "e90036f43067908f67c0cca741c457d354f19d31", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2", "patch": "@@ -9924,9 +9924,12 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n   /* Walk the lhs.  */\n   lss = gfc_walk_expr (expr1);\n   if (gfc_is_reallocatable_lhs (expr1)\n-\t&& !(expr2->expr_type == EXPR_FUNCTION\n-\t     && expr2->value.function.isym != NULL))\n+      && !(expr2->expr_type == EXPR_FUNCTION\n+\t   && expr2->value.function.isym != NULL\n+\t   && !(expr2->value.function.isym->elemental\n+\t\t|| expr2->value.function.isym->conversion)))\n     lss->is_alloc_lhs = 1;\n+\n   rss = NULL;\n \n   if ((expr1->ts.type == BT_DERIVED)"}, {"sha": "04c613fea6e8b0a5a9330ba289327ab80416d6c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2", "patch": "@@ -1,3 +1,8 @@\n+2018-01-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/52162\n+\t* gfortran.dg/bounds_check_19.f90 : New test.\n+\n 2018-01-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.target/powerpc/float128-hw7.c: Use scan-assembler-times"}, {"sha": "21651f1fa6b954899b6fc948a91abf70c01da2eb", "filename": "gcc/testsuite/gfortran.dg/bounds_check_19.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_19.f90?ref=567a6e1cdb3cae09ae74bdd528fd31c0b4956ad2", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+!\n+! Test the fix for PR52162 in which the elemental and conversion\n+! intrinsics in lines 14 and 19 would cause the bounds check to fail.\n+!\n+! Contributed by Dominique d'Humieres  <dominiq@lps.ens.fr>\n+!\n+    integer(4), allocatable :: a(:)\n+    integer(8), allocatable :: b(:)\n+    real, allocatable :: c(:)\n+    allocate (b(7:11), source = [7_8,8_8,9_8,10_8,11_8])\n+\n+    a = b ! Implicit conversion\n+\n+    if (lbound (a, 1) .ne. lbound(b, 1)) call abort\n+    if (ubound (a, 1) .ne. ubound(b, 1)) call abort\n+\n+    c = sin(real(b(9:11))/100_8) ! Elemental intrinsic\n+\n+    if ((ubound(c, 1) - lbound(c, 1)) .ne. 2) call abort\n+    if (any (nint(asin(c)*100.0) .ne. b(9:11))) call abort\n+    deallocate (a, b, c)\n+  end"}]}