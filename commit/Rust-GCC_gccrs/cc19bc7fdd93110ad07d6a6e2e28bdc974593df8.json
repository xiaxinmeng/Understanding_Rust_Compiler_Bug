{"sha": "cc19bc7fdd93110ad07d6a6e2e28bdc974593df8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MxOWJjN2ZkZDkzMTEwYWQwN2Q2YTZlMmUyOGJkYzk3NDU5M2RmOA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2012-01-29T20:29:50Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2012-01-29T20:29:50Z"}, "message": "Reduce size of pointer_info tree, minor cleanups.\n\n2012-01-29  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* module.c (pointer_info): Make true_name and module pointers\n\trather than arrays, order pointers before other fields.\n\t(free_pi_tree): free true_name and module as well.\n\t(mio_read_string): Rename to read_string.\n\t(mio_write_string): Remove.\n\t(load_commons): Use read_string.\n\t(read_module): Use read_string rather than mio_internal_string.\n\t(write_blank_common): Call write_atom directly.\n\t(write_symbol): Likewise.\n\nFrom-SVN: r183681", "tree": {"sha": "bae8d94d5edd3bb74f1f25459b78f00d2775be5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bae8d94d5edd3bb74f1f25459b78f00d2775be5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc19bc7fdd93110ad07d6a6e2e28bdc974593df8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc19bc7fdd93110ad07d6a6e2e28bdc974593df8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc19bc7fdd93110ad07d6a6e2e28bdc974593df8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc19bc7fdd93110ad07d6a6e2e28bdc974593df8/comments", "author": null, "committer": null, "parents": [{"sha": "4ed1b019f60ffc7d367baf51dc3cfa36f536a395", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed1b019f60ffc7d367baf51dc3cfa36f536a395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ed1b019f60ffc7d367baf51dc3cfa36f536a395"}], "stats": {"total": 71, "additions": 39, "deletions": 32}, "files": [{"sha": "6b45348c417ff3b585a676162a85bf7c62a5a936", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc19bc7fdd93110ad07d6a6e2e28bdc974593df8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc19bc7fdd93110ad07d6a6e2e28bdc974593df8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cc19bc7fdd93110ad07d6a6e2e28bdc974593df8", "patch": "@@ -1,3 +1,15 @@\n+2012-01-29  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* module.c (pointer_info): Make true_name and module pointers\n+\trather than arrays, order pointers before other fields.\n+\t(free_pi_tree): free true_name and module as well.\n+\t(mio_read_string): Rename to read_string.\n+\t(mio_write_string): Remove.\n+\t(load_commons): Use read_string.\n+\t(read_module): Use read_string rather than mio_internal_string.\n+\t(write_blank_common): Call write_atom directly.\n+\t(write_symbol): Likewise.\n+\n 2012-01-29  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/51972"}, {"sha": "c68277b253612133be004bf8f4c19a5ae7c4759a", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 27, "deletions": 32, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc19bc7fdd93110ad07d6a6e2e28bdc974593df8/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc19bc7fdd93110ad07d6a6e2e28bdc974593df8/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=cc19bc7fdd93110ad07d6a6e2e28bdc974593df8", "patch": "@@ -155,13 +155,12 @@ typedef struct pointer_info\n     struct\n     {\n       gfc_symbol *sym;\n-      char true_name[GFC_MAX_SYMBOL_LEN + 1], module[GFC_MAX_SYMBOL_LEN + 1];\n+      char *true_name, *module, *binding_label;\n+      fixup_t *stfixup;\n+      gfc_symtree *symtree;\n       enum gfc_rsym_state state;\n       int ns, referenced, renamed;\n       module_locus where;\n-      fixup_t *stfixup;\n-      gfc_symtree *symtree;\n-      char* binding_label;\n     }\n     rsym;\n \n@@ -229,7 +228,11 @@ free_pi_tree (pointer_info *p)\n   free_pi_tree (p->right);\n \n   if (iomode == IO_INPUT)\n-    XDELETEVEC (p->u.rsym.binding_label);\n+    {\n+      XDELETEVEC (p->u.rsym.true_name);\n+      XDELETEVEC (p->u.rsym.module);\n+      XDELETEVEC (p->u.rsym.binding_label);\n+    }\n \n   free (p);\n }\n@@ -1442,6 +1445,19 @@ find_enum (const mstring *m)\n }\n \n \n+/* Read a string. The caller is responsible for freeing.  */\n+\n+static char*\n+read_string (void)\n+{\n+  char* p;\n+  require_atom (ATOM_STRING);\n+  p = atom_string;\n+  atom_string = NULL;\n+  return p;\n+}\n+\n+\n /**************** Module output subroutines ***************************/\n \n /* Output a character to a module file.  */\n@@ -1816,27 +1832,6 @@ mio_internal_string (char *string)\n }\n \n \n-/* Read a string. The caller is responsible for freeing.  */\n-\n-static char*\n-mio_read_string (void)\n-{\n-  char* p;\n-  require_atom (ATOM_STRING);\n-  p = atom_string;\n-  atom_string = NULL;\n-  return p;\n-}\n-\n-\n-/* Write a string.  */\n-static void\n-mio_write_string (const char* string)\n-{\n-  write_atom (ATOM_STRING, string);\n-}\n-\n-\n typedef enum\n { AB_ALLOCATABLE, AB_DIMENSION, AB_EXTERNAL, AB_INTRINSIC, AB_OPTIONAL,\n   AB_POINTER, AB_TARGET, AB_DUMMY, AB_RESULT, AB_DATA,\n@@ -4168,7 +4163,7 @@ load_commons (void)\n       /* Get whether this was a bind(c) common or not.  */\n       mio_integer (&p->is_bind_c);\n       /* Get the binding label.  */\n-      label = mio_read_string ();\n+      label = read_string ();\n       if (strlen (label))\n \tp->binding_label = IDENTIFIER_POINTER (get_identifier (label));\n       XDELETEVEC (label);\n@@ -4531,9 +4526,9 @@ read_module (void)\n       info->type = P_SYMBOL;\n       info->u.rsym.state = UNUSED;\n \n-      mio_internal_string (info->u.rsym.true_name);\n-      mio_internal_string (info->u.rsym.module);\n-      bind_label = mio_read_string ();\n+      info->u.rsym.true_name = read_string ();\n+      info->u.rsym.module = read_string ();\n+      bind_label = read_string ();\n       if (strlen (bind_label))\n \tinfo->u.rsym.binding_label = bind_label;\n       else\n@@ -4960,7 +4955,7 @@ write_blank_common (void)\n   mio_integer (&is_bind_c);\n \n   /* Write out an empty binding label.  */\n-  mio_write_string (\"\");\n+  write_atom (ATOM_STRING, \"\");\n \n   mio_rparen ();\n }\n@@ -5064,7 +5059,7 @@ write_symbol (int n, gfc_symbol *sym)\n       mio_pool_string (&label);\n     }\n   else\n-    mio_write_string (\"\");\n+    write_atom (ATOM_STRING, \"\");\n \n   mio_pointer_ref (&sym->ns);\n "}]}