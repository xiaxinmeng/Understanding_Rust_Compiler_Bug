{"sha": "13f0d49cdfb507a8e369b86d1c5038a08635cee7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNmMGQ0OWNkZmI1MDdhOGUzNjliODZkMWM1MDM4YTA4NjM1Y2VlNw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2002-06-11T23:11:34Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-06-11T23:11:34Z"}, "message": "objc-act.c (warn_with_ivar): Adjust calls to diagnostic_count_error.\n\n\t* objc/objc-act.c (warn_with_ivar): Adjust calls to\n\tdiagnostic_count_error.\n\t(warn_with_method): Likewise.\n\n\t* diagnostic.h (warnings_are_errors_message): New field of\n\tdiagnostic_context.\n\t(diagnostic_count_error): Rename to\n\tdiagnostic_count_diagnostic to\n\tmatch semantics.\n\t* diagnostic.c: Adjust calls to diagnostic_count_error through\n\tout.\n\t(diagnostic_count_diagnostic): Make aware of other kinds of\n\tdiagnostics.\n\t(diagnostic_initialize): Initialize\n\twarnings_are_errors_message field.\n\nf/\n2002-06-12  Gabriel Dos Reis  <gdr@codesourcery.com>\n\n\t    * bad.c (ffebad_start_): Adjust calls to\n              diagnostic_count_error.\n\nFrom-SVN: r54532", "tree": {"sha": "78d7bd65c43f7bf23d766026f9d3611afa6983e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78d7bd65c43f7bf23d766026f9d3611afa6983e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13f0d49cdfb507a8e369b86d1c5038a08635cee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13f0d49cdfb507a8e369b86d1c5038a08635cee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13f0d49cdfb507a8e369b86d1c5038a08635cee7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13f0d49cdfb507a8e369b86d1c5038a08635cee7/comments", "author": null, "committer": null, "parents": [{"sha": "0db79a6b35fc77ec500206c7442457dcc401a0e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0db79a6b35fc77ec500206c7442457dcc401a0e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0db79a6b35fc77ec500206c7442457dcc401a0e1"}], "stats": {"total": 81, "additions": 59, "deletions": 22}, "files": [{"sha": "cbf8cbd08be259445d65130af814830c44fc91a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f0d49cdfb507a8e369b86d1c5038a08635cee7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f0d49cdfb507a8e369b86d1c5038a08635cee7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13f0d49cdfb507a8e369b86d1c5038a08635cee7", "patch": "@@ -1,3 +1,18 @@\n+2002-06-12  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* objc/objc-act.c (warn_with_ivar): Adjust calls to\n+\tdiagnostic_count_error.\n+\t(warn_with_method): Likewise.\n+\n+\t* diagnostic.h (warnings_are_errors_message): New field of\n+\tdiagnostic_context.\n+\t(diagnostic_count_error): Rename to diagnostic_count_diagnostic to\n+\tmatch semantics.\n+\t* diagnostic.c: Adjust calls to diagnostic_count_error through out.\n+\t(diagnostic_count_diagnostic): Make aware of other kinds of\n+\tdiagnostics. \n+\t(diagnostic_initialize): Initialize warnings_are_errors_message field.\n+\n 2002-06-11  Tom Tromey  <tromey@redhat.com>\n \n \tFor PR java/6520:"}, {"sha": "fd4462aedf05b3936cd790a1e7c6e71cd3570c02", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f0d49cdfb507a8e369b86d1c5038a08635cee7/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f0d49cdfb507a8e369b86d1c5038a08635cee7/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=13f0d49cdfb507a8e369b86d1c5038a08635cee7", "patch": "@@ -766,6 +766,7 @@ diagnostic_initialize (context)\n \n   diagnostic_starter (context) = default_diagnostic_starter;\n   diagnostic_finalizer (context) = default_diagnostic_finalizer;\n+  context->warnings_are_errors_message = warnings_are_errors;\n }\n \n void\n@@ -819,7 +820,7 @@ diagnostic_for_decl (diagnostic, decl)\n   if (global_dc->lock++)\n     error_recursion (global_dc);\n \n-  if (diagnostic_count_error (global_dc, diagnostic->kind))\n+  if (diagnostic_count_diagnostic (global_dc, diagnostic->kind))\n     {\n       diagnostic_report_current_function (global_dc);\n       output_set_prefix\n@@ -839,29 +840,42 @@ diagnostic_flush_buffer (context)\n   fflush (output_buffer_attached_stream (&context->buffer));\n }\n \n-/* Count an error or warning.  Return true if the message should be\n-   printed.  */\n+/* Count a diagnostic.  Return true if the message should be printed.  */\n bool\n-diagnostic_count_error (context, kind)\n+diagnostic_count_diagnostic (context, kind)\n     diagnostic_context *context;\n     diagnostic_t kind;\n {\n-  if (kind == DK_WARNING && !diagnostic_report_warnings_p ())\n-    return false;\n-\n-  if (kind == DK_WARNING && !warnings_are_errors)\n-    ++diagnostic_kind_count (context, DK_WARNING);\n-  else\n+  switch (kind)\n     {\n-      static bool warning_message = false;\n-\n-      if (kind == DK_WARNING && !warning_message)\n-\t{\n+    default:\n+      abort();\n+      break;\n+      \n+    case DK_FATAL: case DK_ICE: case DK_SORRY:\n+    case DK_ANACHRONISM: case DK_NOTE:\n+      ++diagnostic_kind_count (context, kind);\n+      break;\n+\n+    case DK_WARNING:\n+      if (!diagnostic_report_warnings_p ())\n+        return false;\n+      else if (!warnings_are_errors)\n+        {\n+          ++diagnostic_kind_count (context, DK_WARNING);\n+          break;\n+        }\n+      /* else fall through.  */\n+\n+    case DK_ERROR:\n+      if (kind == DK_WARNING && context->warnings_are_errors_message)\n+        {\n \t  output_verbatim (&context->buffer,\n                            \"%s: warnings being treated as errors\\n\", progname);\n-\t  warning_message = true;\n-\t}\n+          context->warnings_are_errors_message = false;\n+        }\n       ++diagnostic_kind_count (context, DK_ERROR);\n+      break;\n     }\n \n   return true;\n@@ -1220,7 +1234,7 @@ diagnostic_report_diagnostic (context, diagnostic)\n   if (context->lock++)\n     error_recursion (context);\n \n-  if (diagnostic_count_error (context, diagnostic->kind))\n+  if (diagnostic_count_diagnostic (context, diagnostic->kind))\n     {\n       (*diagnostic_starter (context)) (context, diagnostic);\n       output_format (&context->buffer, &diagnostic->message);"}, {"sha": "c98b8e13b6e4e9684963eee4791ffe120682f6f5", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f0d49cdfb507a8e369b86d1c5038a08635cee7/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f0d49cdfb507a8e369b86d1c5038a08635cee7/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=13f0d49cdfb507a8e369b86d1c5038a08635cee7", "patch": "@@ -187,6 +187,10 @@ struct diagnostic_context\n   /* The number of times we have issued diagnostics.  */\n   int diagnostic_count[DK_LAST_DIAGNOSTIC_KIND];\n \n+  /* True if we should display the \"warnings are being tread as error\"\n+     message, usually displayed once per compiler run.  */\n+  bool warnings_are_errors_message;\n+\n   /* This function is called before any message is printed out.  It is\n      responsible for preparing message prefix and such.  For example, it\n      might say:\n@@ -284,7 +288,7 @@ extern void diagnostic_initialize\tPARAMS ((diagnostic_context *));\n extern void diagnostic_report_current_module PARAMS ((diagnostic_context *));\n extern void diagnostic_report_current_function PARAMS ((diagnostic_context *));\n extern void diagnostic_flush_buffer\tPARAMS ((diagnostic_context *));\n-extern bool diagnostic_count_error      PARAMS ((diagnostic_context *,\n+extern bool diagnostic_count_diagnostic PARAMS ((diagnostic_context *,\n                                                  diagnostic_t));\n extern void diagnostic_report_diagnostic PARAMS ((diagnostic_context *,\n                                                  diagnostic_info *));"}, {"sha": "48fa9a0792ed70e609cbeafc9f45be6cd71601cd", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f0d49cdfb507a8e369b86d1c5038a08635cee7/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f0d49cdfb507a8e369b86d1c5038a08635cee7/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=13f0d49cdfb507a8e369b86d1c5038a08635cee7", "patch": "@@ -1,3 +1,7 @@\n+2002-06-12  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* bad.c (ffebad_start_): Adjust calls to diagnostic_count_error.\n+\n 2002-06-04  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* bad.c (ffebad_start_): Adjust call to count_error."}, {"sha": "21fa4871d74857574058abe7d01354ba5e8cbafc", "filename": "gcc/f/bad.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f0d49cdfb507a8e369b86d1c5038a08635cee7/gcc%2Ff%2Fbad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f0d49cdfb507a8e369b86d1c5038a08635cee7/gcc%2Ff%2Fbad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbad.c?ref=13f0d49cdfb507a8e369b86d1c5038a08635cee7", "patch": "@@ -203,7 +203,7 @@ ffebad_start_ (bool lex_override, ffebad errnum, ffebadSeverity sev,\n       if ((ffebad_severity_ != FFEBAD_severityPEDANTIC)\n \t  || !flag_pedantic_errors)\n \t{\n-\t  if (!diagnostic_count_error (global_dc, DK_WARNING))\n+\t  if (!diagnostic_count_diagnostic (global_dc, DK_WARNING))\n \t    {\t\t\t/* User wants no warnings. */\n \t      ffebad_is_temp_inhibited_ = TRUE;\n \t      return FALSE;\n@@ -215,7 +215,7 @@ ffebad_start_ (bool lex_override, ffebad errnum, ffebadSeverity sev,\n     case FFEBAD_severityWEIRD:\n     case FFEBAD_severitySEVERE:\n     case FFEBAD_severityDISASTER:\n-      diagnostic_count_error (global_dc, DK_ERROR);\n+      diagnostic_count_diagnostic (global_dc, DK_ERROR);\n       break;\n \n     default:"}, {"sha": "c6b9d5ff4ef670585cca8cd37f7afa93d23ebbca", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f0d49cdfb507a8e369b86d1c5038a08635cee7/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f0d49cdfb507a8e369b86d1c5038a08635cee7/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=13f0d49cdfb507a8e369b86d1c5038a08635cee7", "patch": "@@ -3416,7 +3416,7 @@ error_with_ivar (message, decl, rawdecl)\n      tree decl;\n      tree rawdecl;\n {\n-  diagnostic_count_error (global_dc, DK_ERROR);\n+  diagnostic_count_diagnostic (global_dc, DK_ERROR);\n \n   diagnostic_report_current_function (global_dc);\n \n@@ -6895,7 +6895,7 @@ warn_with_method (message, mtype, method)\n      int mtype;\n      tree method;\n {\n-  if (!diagnostic_count_error (global_dc, DK_WARNING))\n+  if (!diagnostic_count_diagnostic (global_dc, DK_WARNING))\n     return;\n \n   diagnostic_report_current_function (global_dc);"}]}