{"sha": "13ad6d9f50e3f197246b460c4d9a9e80ba2559cf", "node_id": "C_kwDOANBUbNoAKDEzYWQ2ZDlmNTBlM2YxOTcyNDZiNDYwYzRkOWE5ZTgwYmEyNTU5Y2Y", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-01-28T18:37:51Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-02-02T14:55:29Z"}, "message": "analyzer: fix missing check for uninit of return values\n\nWhen moving the -fanalyzer tests for -ftrivial-auto-var-init to the\n\"torture\" subdirectory of gcc.dg/analyzer I noticed that -fanalyzer\nwasn't always properly checking for initialization of return values.\n\nThe issue was that some \"return\" handling was using\nregion_model::copy_region to copy to the RESULT_DECL, and copy_region\nwasn't checking for poisoned svalues.\n\nThis patch eliminates region_model::copy_region in favor of simply\ndoing a get_ravlue/set_value pair, fixing the issue.\n\ngcc/analyzer/ChangeLog:\n\t* region-model.cc (region_model::on_return): Replace usage of\n\tcopy_region with get_rvalue/set_value pair.\n\t(region_model::pop_frame): Likewise.\n\t(selftest::test_compound_assignment): Likewise.\n\t* region-model.h (region_model::copy_region): Delete decl.\n\t* region.cc (region_model::copy_region): Delete.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/torture/ubsan-1.c: Add missing return stmts.\n\t* gcc.dg/analyzer/uninit-trivial-auto-var-init-pattern.c: Move\n\tto...\n\t* gcc.dg/analyzer/torture/uninit-trivial-auto-var-init-pattern.c:\n\t...here.\n\t* gcc.dg/analyzer/uninit-trivial-auto-var-init-uninitialized.c:\n\tMove to...\n\t* gcc.dg/analyzer/torture/uninit-trivial-auto-var-init-uninitialized.c:\n\t...here.\n\t* gcc.dg/analyzer/uninit-trivial-auto-var-init-zero.c: Move to...\n\t* gcc.dg/analyzer/torture/uninit-trivial-auto-var-init-zero.c: ...here.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "5e0440468c2de0836d9963f6b68da0d59565a2c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e0440468c2de0836d9963f6b68da0d59565a2c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13ad6d9f50e3f197246b460c4d9a9e80ba2559cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13ad6d9f50e3f197246b460c4d9a9e80ba2559cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13ad6d9f50e3f197246b460c4d9a9e80ba2559cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13ad6d9f50e3f197246b460c4d9a9e80ba2559cf/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea3e1915954371d8230fda44ce6821928f04f80e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea3e1915954371d8230fda44ce6821928f04f80e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea3e1915954371d8230fda44ce6821928f04f80e"}], "stats": {"total": 91, "additions": 43, "deletions": 48}, "files": [{"sha": "6e7a21d0f9caff91b9f7ff2477ade10d51bf48d6", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ad6d9f50e3f197246b460c4d9a9e80ba2559cf/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ad6d9f50e3f197246b460c4d9a9e80ba2559cf/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=13ad6d9f50e3f197246b460c4d9a9e80ba2559cf", "patch": "@@ -1559,7 +1559,11 @@ region_model::on_return (const greturn *return_stmt, region_model_context *ctxt)\n   tree rhs = gimple_return_retval (return_stmt);\n \n   if (lhs && rhs)\n-    copy_region (get_lvalue (lhs, ctxt), get_lvalue (rhs, ctxt), ctxt);\n+    {\n+      const svalue *sval = get_rvalue (rhs, ctxt);\n+      const region *ret_reg = get_lvalue (lhs, ctxt);\n+      set_value (ret_reg, sval, ctxt);\n+    }\n }\n \n /* Update this model for a call and return of setjmp/sigsetjmp at CALL within\n@@ -3618,15 +3622,11 @@ region_model::pop_frame (const region *result_dst_reg,\n   tree result = DECL_RESULT (fndecl);\n   if (result && TREE_TYPE (result) != void_type_node)\n     {\n+      const svalue *retval = get_rvalue (result, ctxt);\n       if (result_dst_reg)\n-\t{\n-\t  /* Copy the result to RESULT_DST_REG.  */\n-\t  copy_region (result_dst_reg,\n-\t\t       get_lvalue (result, ctxt),\n-\t\t       ctxt);\n-\t}\n+\tset_value (result_dst_reg, retval, ctxt);\n       if (out_result)\n-\t*out_result = get_rvalue (result, ctxt);\n+\t*out_result = retval;\n     }\n \n   /* Pop the frame.  */\n@@ -4758,8 +4758,9 @@ test_compound_assignment ()\n   model.set_value (c_y, int_m3, NULL);\n \n   /* Copy c to d.  */\n-  model.copy_region (model.get_lvalue (d, NULL), model.get_lvalue (c, NULL),\n-\t\t     NULL);\n+  const svalue *sval = model.get_rvalue (c, NULL);\n+  model.set_value (model.get_lvalue (d, NULL), sval, NULL);\n+\n   /* Check that the fields have the same svalues.  */\n   ASSERT_EQ (model.get_rvalue (c_x, NULL), model.get_rvalue (d_x, NULL));\n   ASSERT_EQ (model.get_rvalue (c_y, NULL), model.get_rvalue (d_y, NULL));"}, {"sha": "46cf37e6b26524d144d84e8406c8269c3f6a042a", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ad6d9f50e3f197246b460c4d9a9e80ba2559cf/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ad6d9f50e3f197246b460c4d9a9e80ba2559cf/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=13ad6d9f50e3f197246b460c4d9a9e80ba2559cf", "patch": "@@ -676,8 +676,6 @@ class region_model\n   void zero_fill_region (const region *reg);\n   void mark_region_as_unknown (const region *reg, uncertainty_t *uncertainty);\n \n-  void copy_region (const region *dst_reg, const region *src_reg,\n-\t\t    region_model_context *ctxt);\n   tristate eval_condition (const svalue *lhs,\n \t\t\t   enum tree_code op,\n \t\t\t   const svalue *rhs) const;"}, {"sha": "0adc75e577d081dc7dffce65b63be718867473a3", "filename": "gcc/analyzer/region.cc", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ad6d9f50e3f197246b460c4d9a9e80ba2559cf/gcc%2Fanalyzer%2Fregion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ad6d9f50e3f197246b460c4d9a9e80ba2559cf/gcc%2Fanalyzer%2Fregion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion.cc?ref=13ad6d9f50e3f197246b460c4d9a9e80ba2559cf", "patch": "@@ -539,21 +539,6 @@ region::get_relative_concrete_offset (bit_offset_t *) const\n   return false;\n }\n \n-/* Copy from SRC_REG to DST_REG, using CTXT for any issues that occur.  */\n-\n-void\n-region_model::copy_region (const region *dst_reg, const region *src_reg,\n-\t\t\t   region_model_context *ctxt)\n-{\n-  gcc_assert (dst_reg);\n-  gcc_assert (src_reg);\n-  if (dst_reg == src_reg)\n-    return;\n-\n-  const svalue *sval = get_store_value (src_reg, ctxt);\n-  set_value (dst_reg, sval, ctxt);\n-}\n-\n /* Dump a description of this region to stderr.  */\n \n DEBUG_FUNCTION void"}, {"sha": "2e1e6a09feadc89b126cf88c7fa40bc7ddf16dca", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/ubsan-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ad6d9f50e3f197246b460c4d9a9e80ba2559cf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fubsan-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ad6d9f50e3f197246b460c4d9a9e80ba2559cf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fubsan-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fubsan-1.c?ref=13ad6d9f50e3f197246b460c4d9a9e80ba2559cf", "patch": "@@ -19,6 +19,7 @@ int test_2 (int *arr, int i, int n)\n     __analyzer_eval (arr[i]); /* { dg-warning \"TRUE\" } */\n   else\n     __analyzer_eval (arr[i]); /* { dg-warning \"FALSE\" } */\n+  return 1;\n }\n \n int test_3 (int arr[], int i, int n)\n@@ -29,6 +30,7 @@ int test_3 (int arr[], int i, int n)\n     __analyzer_eval (arr[i]); /* { dg-warning \"TRUE\" } */\n   else\n     __analyzer_eval (arr[i]); /* { dg-warning \"FALSE\" } */\n+  return 1;\n }\n \n void test_4 (int i, int n)"}, {"sha": "2445ee509dfc7d887dbc3d8d95016b8d0f9b486b", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/uninit-trivial-auto-var-init-pattern.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ad6d9f50e3f197246b460c4d9a9e80ba2559cf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Funinit-trivial-auto-var-init-pattern.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ad6d9f50e3f197246b460c4d9a9e80ba2559cf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Funinit-trivial-auto-var-init-pattern.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Funinit-trivial-auto-var-init-pattern.c?ref=13ad6d9f50e3f197246b460c4d9a9e80ba2559cf", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } { \"\" } } */\n+/* { dg-additional-options \"-ftrivial-auto-var-init=pattern\" } */\n+\n+int test_1 (void)\n+{\n+  int i; /* { dg-message \"region created on stack here\" } */\n+  return i; /* { dg-warning \"use of uninitialized value 'i.*'\" } */\n+  /* FIXME: the LTO build sometimes shows SSA names here\n+     (PR analyzer/94976).  */\n+}"}, {"sha": "7c4dd27adec34dd7c66f9ff8946501b50996b0f8", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/uninit-trivial-auto-var-init-uninitialized.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ad6d9f50e3f197246b460c4d9a9e80ba2559cf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Funinit-trivial-auto-var-init-uninitialized.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ad6d9f50e3f197246b460c4d9a9e80ba2559cf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Funinit-trivial-auto-var-init-uninitialized.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Funinit-trivial-auto-var-init-uninitialized.c?ref=13ad6d9f50e3f197246b460c4d9a9e80ba2559cf", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } { \"\" } } */\n+/* { dg-additional-options \"-ftrivial-auto-var-init=uninitialized\" } */\n+\n+int test_1 (void)\n+{\n+  int i; /* { dg-message \"region created on stack here\" } */\n+  return i; /* { dg-warning \"use of uninitialized value 'i.*'\" } */\n+  /* FIXME: the LTO build sometimes shows SSA names here\n+     (PR analyzer/94976).  */\n+}"}, {"sha": "6486d25a72a90a37d975bde1517b01d0a0e232bf", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/uninit-trivial-auto-var-init-zero.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ad6d9f50e3f197246b460c4d9a9e80ba2559cf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Funinit-trivial-auto-var-init-zero.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ad6d9f50e3f197246b460c4d9a9e80ba2559cf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Funinit-trivial-auto-var-init-zero.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Funinit-trivial-auto-var-init-zero.c?ref=13ad6d9f50e3f197246b460c4d9a9e80ba2559cf", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } { \"\" } } */\n+/* { dg-additional-options \"-ftrivial-auto-var-init=zero\" } */\n+\n+int test_1 (void)\n+{\n+  int i; /* { dg-message \"region created on stack here\" } */\n+  return i; /* { dg-warning \"use of uninitialized value 'i.*'\" } */\n+  /* FIXME: the LTO build sometimes shows SSA names here\n+     (PR analyzer/94976).  */\n+}"}, {"sha": "0b78dc652670d515456e6963712151d6ee3603f9", "filename": "gcc/testsuite/gcc.dg/analyzer/uninit-trivial-auto-var-init-pattern.c", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3e1915954371d8230fda44ce6821928f04f80e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-trivial-auto-var-init-pattern.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3e1915954371d8230fda44ce6821928f04f80e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-trivial-auto-var-init-pattern.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-trivial-auto-var-init-pattern.c?ref=ea3e1915954371d8230fda44ce6821928f04f80e", "patch": "@@ -1,7 +0,0 @@\n-/* { dg-additional-options \"-ftrivial-auto-var-init=pattern\" } */\n-\n-int test_1 (void)\n-{\n-  int i; /* { dg-message \"region created on stack here\" } */\n-  return i; /* { dg-warning \"use of uninitialized value 'i'\" } */\n-}"}, {"sha": "124d3a327b8a59d159c10eb0a840caa871228ce6", "filename": "gcc/testsuite/gcc.dg/analyzer/uninit-trivial-auto-var-init-uninitialized.c", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3e1915954371d8230fda44ce6821928f04f80e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-trivial-auto-var-init-uninitialized.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3e1915954371d8230fda44ce6821928f04f80e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-trivial-auto-var-init-uninitialized.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-trivial-auto-var-init-uninitialized.c?ref=ea3e1915954371d8230fda44ce6821928f04f80e", "patch": "@@ -1,7 +0,0 @@\n-/* { dg-additional-options \"-ftrivial-auto-var-init=uninitialized\" } */\n-\n-int test_1 (void)\n-{\n-  int i; /* { dg-message \"region created on stack here\" } */\n-  return i; /* { dg-warning \"use of uninitialized value 'i'\" } */\n-}"}, {"sha": "ef7dc674867450780b417c0e18d61e7c0296bfdd", "filename": "gcc/testsuite/gcc.dg/analyzer/uninit-trivial-auto-var-init-zero.c", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea3e1915954371d8230fda44ce6821928f04f80e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-trivial-auto-var-init-zero.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea3e1915954371d8230fda44ce6821928f04f80e/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-trivial-auto-var-init-zero.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-trivial-auto-var-init-zero.c?ref=ea3e1915954371d8230fda44ce6821928f04f80e", "patch": "@@ -1,7 +0,0 @@\n-/* { dg-additional-options \"-ftrivial-auto-var-init=zero\" } */\n-\n-int test_1 (void)\n-{\n-  int i; /* { dg-message \"region created on stack here\" } */\n-  return i; /* { dg-warning \"use of uninitialized value 'i'\" } */\n-}"}]}