{"sha": "a73a5af281cebd03bbd37f37eef9a8a91b5fbf95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTczYTVhZjI4MWNlYmQwM2JiZDM3ZjM3ZWVmOWE4YTkxYjVmYmY5NQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-18T11:57:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-19T08:18:46Z"}, "message": "apply TLC to GIMPLE reference verification\n\nThis inlines verify_types_in_gimple_min_lval and makes sure we\nalso verify call lhs and arguments.  It also asserts that\nWITH_SIZE_EXPR in plain assignments does not happen, instead\nthose should have become memcpy/memset.\n\n2021-05-18  Richard Biener  <rguenther@suse.de>\n\n\t* tree-cfg.c (verify_types_in_gimple_min_lval): Inline...\n\t(verify_types_in_gimple_reference): ... here.  Sanitize.\n\t(verify_gimple_call): Verify references in LHS and arguments.\n\t(verify_gimple_assign_single): Reject WITH_SIZE_EXPR.", "tree": {"sha": "0346758f0f5d647b9f201dd8b0b9ba4c45ae0dbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0346758f0f5d647b9f201dd8b0b9ba4c45ae0dbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a73a5af281cebd03bbd37f37eef9a8a91b5fbf95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73a5af281cebd03bbd37f37eef9a8a91b5fbf95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a73a5af281cebd03bbd37f37eef9a8a91b5fbf95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73a5af281cebd03bbd37f37eef9a8a91b5fbf95/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea30c7bd497bcd390f7b177e1e156f630a90f232", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea30c7bd497bcd390f7b177e1e156f630a90f232", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea30c7bd497bcd390f7b177e1e156f630a90f232"}], "stats": {"total": 80, "additions": 41, "deletions": 39}, "files": [{"sha": "02256580c986be426564adc1105ed2e1c69b0efc", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 41, "deletions": 39, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73a5af281cebd03bbd37f37eef9a8a91b5fbf95/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73a5af281cebd03bbd37f37eef9a8a91b5fbf95/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=a73a5af281cebd03bbd37f37eef9a8a91b5fbf95", "patch": "@@ -3036,40 +3036,6 @@ verify_address (tree t, bool verify_addressable)\n }\n \n \n-/* Verify if EXPR is either a GIMPLE ID or a GIMPLE indirect reference.\n-   Returns true if there is an error, otherwise false.  */\n-\n-static bool\n-verify_types_in_gimple_min_lval (tree expr)\n-{\n-  tree op;\n-\n-  if (is_gimple_id (expr))\n-    return false;\n-\n-  if (TREE_CODE (expr) != TARGET_MEM_REF\n-      && TREE_CODE (expr) != MEM_REF)\n-    {\n-      error (\"invalid expression for min lvalue\");\n-      return true;\n-    }\n-\n-  /* TARGET_MEM_REFs are strange beasts.  */\n-  if (TREE_CODE (expr) == TARGET_MEM_REF)\n-    return false;\n-\n-  op = TREE_OPERAND (expr, 0);\n-  if (!is_gimple_val (op))\n-    {\n-      error (\"invalid operand in indirect reference\");\n-      debug_generic_stmt (op);\n-      return true;\n-    }\n-  /* Memory references now generally can involve a value conversion.  */\n-\n-  return false;\n-}\n-\n /* Verify if EXPR is a valid GIMPLE reference expression.  If\n    REQUIRE_LVALUE is true verifies it is an lvalue.  Returns true\n    if there is an error, otherwise false.  */\n@@ -3307,8 +3273,21 @@ verify_types_in_gimple_reference (tree expr, bool require_lvalue)\n       return true;\n     }\n \n-  return ((require_lvalue || !is_gimple_min_invariant (expr))\n-\t  && verify_types_in_gimple_min_lval (expr));\n+  if (!require_lvalue\n+      && (TREE_CODE (expr) == SSA_NAME || is_gimple_min_invariant (expr)))\n+    return false;\n+\n+  if (TREE_CODE (expr) != SSA_NAME && is_gimple_id (expr))\n+    return false;\n+\n+  if (TREE_CODE (expr) != TARGET_MEM_REF\n+      && TREE_CODE (expr) != MEM_REF)\n+    {\n+      error (\"invalid expression for min lvalue\");\n+      return true;\n+    }\n+\n+  return false;\n }\n \n /* Returns true if there is one pointer type in TYPE_POINTER_TO (SRC_OBJ)\n@@ -3398,8 +3377,11 @@ verify_gimple_call (gcall *stmt)\n \n   tree lhs = gimple_call_lhs (stmt);\n   if (lhs\n-      && (!is_gimple_lvalue (lhs)\n-\t  || verify_types_in_gimple_reference (lhs, true)))\n+      && (!is_gimple_reg (lhs)\n+\t  && (!is_gimple_lvalue (lhs)\n+\t      || verify_types_in_gimple_reference\n+\t\t   (TREE_CODE (lhs) == WITH_SIZE_EXPR\n+\t\t    ? TREE_OPERAND (lhs, 0) : lhs, true))))\n     {\n       error (\"invalid LHS in gimple call\");\n       return true;\n@@ -3488,6 +3470,13 @@ verify_gimple_call (gcall *stmt)\n \t  debug_generic_expr (arg);\n \t  return true;\n \t}\n+      if (!is_gimple_reg (arg))\n+\t{\n+\t  if (TREE_CODE (arg) == WITH_SIZE_EXPR)\n+\t    arg = TREE_OPERAND (arg, 0);\n+\t  if (verify_types_in_gimple_reference (arg, false))\n+\t    return true;\n+\t}\n     }\n \n   return false;\n@@ -4479,6 +4468,14 @@ verify_gimple_assign_single (gassign *stmt)\n       return true;\n     }\n \n+  if (TREE_CODE (lhs) == WITH_SIZE_EXPR)\n+    {\n+      error (\"%qs LHS in assignment statement\",\n+\t     get_tree_code_name (TREE_CODE (lhs)));\n+      debug_generic_expr (lhs);\n+      return true;\n+    }\n+\n   if (handled_component_p (lhs)\n       || TREE_CODE (lhs) == MEM_REF\n       || TREE_CODE (lhs) == TARGET_MEM_REF)\n@@ -4669,8 +4666,13 @@ verify_gimple_assign_single (gassign *stmt)\n \t}\n       break;\n \n-    case OBJ_TYPE_REF:\n     case WITH_SIZE_EXPR:\n+      error (\"%qs RHS in assignment statement\",\n+\t     get_tree_code_name (rhs_code));\n+      debug_generic_expr (rhs1);\n+      return true;\n+\n+    case OBJ_TYPE_REF:\n       /* FIXME.  */\n       return res;\n "}]}