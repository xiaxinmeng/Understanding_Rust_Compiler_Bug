{"sha": "2780484bc376a89edb0c97b6b85209f4c27f34ee", "node_id": "C_kwDOANBUbNoAKDI3ODA0ODRiYzM3NmE4OWVkYjBjOTdiNmI4NTIwOWY0YzI3ZjM0ZWU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-23T10:02:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-23T10:03:44Z"}, "message": "inliner: Remove unused transform_lang_insert_block hook\n\nThis struct copy_body_data's hook is always NULL since merge\nof the tuples branch, before that it has been shortly used by the C++\nFE during ctor/dtor cloning to chain the remapped blocks, but only\nvery shortly, before transform_lang_insert_block was a bool and\nthe call to insert_block was done through a langhook.\nI'd say that for something that hasn't been used since 4.4 there is\nzero chance we'll want to use it again in the near future.\n\n2021-11-23  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/\n\t* tree-inline.h (struct copy_body_data): Remove\n\ttransform_lang_insert_block member.\n\t* tree-inline.c (remap_block): Don't call\n\tid->transform_lang_insert_block.\n\t(optimize_inline_calls, copy_gimple_seq_and_replace_locals,\n\ttree_function_versioning, maybe_inline_call_in_expr,\n\tcopy_fn): Don't initialize id.transform_lang_insert_block.\n\t* gimplify.c (gimplify_omp_loop): Likewise.\ngcc/c/\n\t* c-typeck.c (c_clone_omp_udr): Don't initialize\n\tid.transform_lang_insert_block.\ngcc/cp/\n\t* semantics.c (clone_omp_udr): Don't initialize\n\tid.transform_lang_insert_block.\n\t* optimize.c (clone_body): Likewise.", "tree": {"sha": "e5c066342cebb43318c69819acdf24d2b9e383ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5c066342cebb43318c69819acdf24d2b9e383ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2780484bc376a89edb0c97b6b85209f4c27f34ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2780484bc376a89edb0c97b6b85209f4c27f34ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2780484bc376a89edb0c97b6b85209f4c27f34ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2780484bc376a89edb0c97b6b85209f4c27f34ee/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6033b27eade9c31c0be50657094c89ef9068892d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6033b27eade9c31c0be50657094c89ef9068892d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6033b27eade9c31c0be50657094c89ef9068892d"}], "stats": {"total": 15, "additions": 0, "deletions": 15}, "files": [{"sha": "b71358e182147dec473ee60bf936b3b1a32ac083", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2780484bc376a89edb0c97b6b85209f4c27f34ee/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2780484bc376a89edb0c97b6b85209f4c27f34ee/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=2780484bc376a89edb0c97b6b85209f4c27f34ee", "patch": "@@ -13848,7 +13848,6 @@ c_clone_omp_udr (tree stmt, tree omp_decl1, tree omp_decl2,\n   id.transform_call_graph_edges = CB_CGE_DUPLICATE;\n   id.transform_new_cfg = true;\n   id.transform_return_to_modify = false;\n-  id.transform_lang_insert_block = NULL;\n   id.eh_lp_nr = 0;\n   walk_tree (&stmt, copy_tree_body_r, &id, NULL);\n   return stmt;"}, {"sha": "e6fd27f1092e43b19cb248aed1693d16612dd208", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2780484bc376a89edb0c97b6b85209f4c27f34ee/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2780484bc376a89edb0c97b6b85209f4c27f34ee/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=2780484bc376a89edb0c97b6b85209f4c27f34ee", "patch": "@@ -103,7 +103,6 @@ clone_body (tree clone, tree fn, void *arg_map)\n   id.transform_call_graph_edges = CB_CGE_DUPLICATE;\n   id.transform_new_cfg = true;\n   id.transform_return_to_modify = false;\n-  id.transform_lang_insert_block = NULL;\n \n   /* We're not inside any EH region.  */\n   id.eh_lp_nr = 0;"}, {"sha": "79b8162ef1eb9c03ef3fe0ce4ee77283c0219272", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2780484bc376a89edb0c97b6b85209f4c27f34ee/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2780484bc376a89edb0c97b6b85209f4c27f34ee/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=2780484bc376a89edb0c97b6b85209f4c27f34ee", "patch": "@@ -6066,7 +6066,6 @@ clone_omp_udr (tree stmt, tree omp_decl1, tree omp_decl2,\n   id.transform_call_graph_edges = CB_CGE_DUPLICATE;\n   id.transform_new_cfg = true;\n   id.transform_return_to_modify = false;\n-  id.transform_lang_insert_block = NULL;\n   id.eh_lp_nr = 0;\n   walk_tree (&stmt, copy_tree_body_r, &id, NULL);\n   return stmt;"}, {"sha": "816cdaf8a18a3aa8659270f2628c6710d8c53742", "filename": "gcc/gimplify.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2780484bc376a89edb0c97b6b85209f4c27f34ee/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2780484bc376a89edb0c97b6b85209f4c27f34ee/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=2780484bc376a89edb0c97b6b85209f4c27f34ee", "patch": "@@ -13413,7 +13413,6 @@ gimplify_omp_loop (tree *expr_p, gimple_seq *pre_p)\n \t\tid.transform_call_graph_edges = CB_CGE_DUPLICATE;\n \t\tid.transform_new_cfg = true;\n \t\tid.transform_return_to_modify = false;\n-\t\tid.transform_lang_insert_block = NULL;\n \t\tid.eh_lp_nr = 0;\n \t\twalk_tree (&OMP_CLAUSE_REDUCTION_INIT (*pc), copy_tree_body_r,\n \t\t\t   &id, NULL);"}, {"sha": "bc5ff0bb0526252fee61a5e5c0d2509219e725d6", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2780484bc376a89edb0c97b6b85209f4c27f34ee/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2780484bc376a89edb0c97b6b85209f4c27f34ee/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=2780484bc376a89edb0c97b6b85209f4c27f34ee", "patch": "@@ -823,9 +823,6 @@ remap_block (tree *block, copy_body_data *id)\n   \t\t\t\t\t&BLOCK_NONLOCALIZED_VARS (new_block),\n \t\t\t\t\tid);\n \n-  if (id->transform_lang_insert_block)\n-    id->transform_lang_insert_block (new_block);\n-\n   /* Remember the remapped block.  */\n   insert_decl_map (id, old_block, new_block);\n }\n@@ -5473,7 +5470,6 @@ optimize_inline_calls (tree fn)\n   id.transform_new_cfg = false;\n   id.transform_return_to_modify = true;\n   id.transform_parameter = true;\n-  id.transform_lang_insert_block = NULL;\n   id.statements_to_fold = new hash_set<gimple *>;\n \n   push_gimplify_context ();\n@@ -5857,7 +5853,6 @@ copy_gimple_seq_and_replace_locals (gimple_seq seq)\n   id.transform_new_cfg = false;\n   id.transform_return_to_modify = false;\n   id.transform_parameter = false;\n-  id.transform_lang_insert_block = NULL;\n \n   /* Walk the tree once to find local labels.  */\n   memset (&wi, 0, sizeof (wi));\n@@ -6252,7 +6247,6 @@ tree_function_versioning (tree old_decl, tree new_decl,\n   id.transform_new_cfg = true;\n   id.transform_return_to_modify = false;\n   id.transform_parameter = false;\n-  id.transform_lang_insert_block = NULL;\n \n   old_entry_block = ENTRY_BLOCK_PTR_FOR_FN\n     (DECL_STRUCT_FUNCTION (old_decl));\n@@ -6541,7 +6535,6 @@ maybe_inline_call_in_expr (tree exp)\n       id.transform_new_cfg = false;\n       id.transform_return_to_modify = true;\n       id.transform_parameter = true;\n-      id.transform_lang_insert_block = NULL;\n \n       /* Make sure not to unshare trees behind the front-end's back\n \t since front-end specific mechanisms may rely on sharing.  */\n@@ -6613,7 +6606,6 @@ copy_fn (tree fn, tree& parms, tree& result)\n   id.transform_new_cfg = false;\n   id.transform_return_to_modify = false;\n   id.transform_parameter = true;\n-  id.transform_lang_insert_block = NULL;\n \n   /* Make sure not to unshare trees behind the front-end's back\n      since front-end specific mechanisms may rely on sharing.  */"}, {"sha": "e9d21a44d2f28a46cbbce5a811d7531d72d01560", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2780484bc376a89edb0c97b6b85209f4c27f34ee/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2780484bc376a89edb0c97b6b85209f4c27f34ee/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=2780484bc376a89edb0c97b6b85209f4c27f34ee", "patch": "@@ -133,9 +133,6 @@ struct copy_body_data\n      and only in that case will actually remap the type.  */\n   bool dont_remap_vla_if_no_change;\n \n-  /* A function to be called when duplicating BLOCK nodes.  */\n-  void (*transform_lang_insert_block) (tree);\n-\n   /* Statements that might be possibly folded.  */\n   hash_set<gimple *> *statements_to_fold;\n "}]}