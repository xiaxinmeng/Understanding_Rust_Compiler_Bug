{"sha": "37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdhMzY2MmY3NmQ3OWExZDlmZjAyYTMxZTVjYzBmN2UyMGRmYmM2MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-16T11:30:46Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-16T11:30:46Z"}, "message": "[AArch64] Add scatter stores for partial SVE modes\n\nThis patch adds support for scatter stores of partial vectors,\nwhere the vector base or offset elements can be wider than the\nelements being stored.\n\n2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md\n\t(scatter_store<SVE_FULL_SD:mode><v_int_equiv>): Extend to...\n\t(scatter_store<SVE_24:mode><v_int_container>): ...this.\n\t(mask_scatter_store<SVE_FULL_S:mode><v_int_equiv>): Extend to...\n\t(mask_scatter_store<SVE_4:mode><v_int_equiv>): ...this.\n\t(mask_scatter_store<SVE_FULL_D:mode><v_int_equiv>): Extend to...\n\t(mask_scatter_store<SVE_2:mode><v_int_equiv>): ...this.\n\t(*mask_scatter_store<mode><v_int_container>_<su>xtw_unpacked): New\n\tpattern.\n\t(*mask_scatter_store<SVE_FULL_D:mode><v_int_equiv>_sxtw): Extend to...\n\t(*mask_scatter_store<SVE_2:mode><v_int_equiv>_sxtw): ...this.\n\t(*mask_scatter_store<SVE_FULL_D:mode><v_int_equiv>_uxtw): Extend to...\n\t(*mask_scatter_store<SVE_2:mode><v_int_equiv>_uxtw): ...this.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/scatter_store_1.c (TEST_LOOP): Start at 0.\n\t(TEST_ALL): Add tests for 8-bit and 16-bit elements.\n\t* gcc.target/aarch64/sve/scatter_store_2.c: Update accordingly.\n\t* gcc.target/aarch64/sve/scatter_store_3.c (TEST_LOOP): Start at 0.\n\t(TEST_ALL): Add tests for 8-bit and 16-bit elements.\n\t* gcc.target/aarch64/sve/scatter_store_4.c: Update accordingly.\n\t* gcc.target/aarch64/sve/scatter_store_5.c (TEST_LOOP): Start at 0.\n\t(TEST_ALL): Add tests for 8-bit, 16-bit and 32-bit elements.\n\t* gcc.target/aarch64/sve/scatter_store_8.c: New test.\n\t* gcc.target/aarch64/sve/scatter_store_9.c: Likewise.\n\nFrom-SVN: r278347", "tree": {"sha": "660a9b8440f573162b2b065adca170d59c4b9a64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/660a9b8440f573162b2b065adca170d59c4b9a64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "87a80d27218f2325d05adc5382abe7d582062306", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a80d27218f2325d05adc5382abe7d582062306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87a80d27218f2325d05adc5382abe7d582062306"}], "stats": {"total": 225, "additions": 185, "deletions": 40}, "files": [{"sha": "2a9d5871179de07855d6696563d9284c65ca2ad9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60", "patch": "@@ -1,3 +1,19 @@\n+2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md\n+\t(scatter_store<SVE_FULL_SD:mode><v_int_equiv>): Extend to...\n+\t(scatter_store<SVE_24:mode><v_int_container>): ...this.\n+\t(mask_scatter_store<SVE_FULL_S:mode><v_int_equiv>): Extend to...\n+\t(mask_scatter_store<SVE_4:mode><v_int_equiv>): ...this.\n+\t(mask_scatter_store<SVE_FULL_D:mode><v_int_equiv>): Extend to...\n+\t(mask_scatter_store<SVE_2:mode><v_int_equiv>): ...this.\n+\t(*mask_scatter_store<mode><v_int_container>_<su>xtw_unpacked): New\n+\tpattern.\n+\t(*mask_scatter_store<SVE_FULL_D:mode><v_int_equiv>_sxtw): Extend to...\n+\t(*mask_scatter_store<SVE_2:mode><v_int_equiv>_sxtw): ...this.\n+\t(*mask_scatter_store<SVE_FULL_D:mode><v_int_equiv>_uxtw): Extend to...\n+\t(*mask_scatter_store<SVE_2:mode><v_int_equiv>_uxtw): ...this.\n+\n 2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/iterators.md (SVE_2BHSI, SVE_2HSDI, SVE_4BHI)"}, {"sha": "cdc3b4c3f4a6e273235369b4f8bf2c413b1c5343", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 62, "deletions": 35, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60", "patch": "@@ -2135,15 +2135,15 @@\n ;; -------------------------------------------------------------------------\n \n ;; Unpredicated scatter stores.\n-(define_expand \"scatter_store<mode><v_int_equiv>\"\n+(define_expand \"scatter_store<mode><v_int_container>\"\n   [(set (mem:BLK (scratch))\n \t(unspec:BLK\n \t  [(match_dup 5)\n \t   (match_operand:DI 0 \"aarch64_sve_gather_offset_<Vesize>\")\n-\t   (match_operand:<V_INT_EQUIV> 1 \"register_operand\")\n+\t   (match_operand:<V_INT_CONTAINER> 1 \"register_operand\")\n \t   (match_operand:DI 2 \"const_int_operand\")\n \t   (match_operand:DI 3 \"aarch64_gather_scale_operand_<Vesize>\")\n-\t   (match_operand:SVE_FULL_SD 4 \"register_operand\")]\n+\t   (match_operand:SVE_24 4 \"register_operand\")]\n \t  UNSPEC_ST1_SCATTER))]\n   \"TARGET_SVE\"\n   {\n@@ -2153,48 +2153,74 @@\n \n ;; Predicated scatter stores for 32-bit elements.  Operand 2 is true for\n ;; unsigned extension and false for signed extension.\n-(define_insn \"mask_scatter_store<mode><v_int_equiv>\"\n+(define_insn \"mask_scatter_store<mode><v_int_container>\"\n   [(set (mem:BLK (scratch))\n \t(unspec:BLK\n \t  [(match_operand:VNx4BI 5 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl, Upl\")\n-\t   (match_operand:DI 0 \"aarch64_sve_gather_offset_w\" \"Z, vgw, rk, rk, rk, rk\")\n+\t   (match_operand:DI 0 \"aarch64_sve_gather_offset_<Vesize>\" \"Z, vgw, rk, rk, rk, rk\")\n \t   (match_operand:VNx4SI 1 \"register_operand\" \"w, w, w, w, w, w\")\n \t   (match_operand:DI 2 \"const_int_operand\" \"Ui1, Ui1, Z, Ui1, Z, Ui1\")\n-\t   (match_operand:DI 3 \"aarch64_gather_scale_operand_w\" \"Ui1, Ui1, Ui1, Ui1, i, i\")\n-\t   (match_operand:SVE_FULL_S 4 \"register_operand\" \"w, w, w, w, w, w\")]\n+\t   (match_operand:DI 3 \"aarch64_gather_scale_operand_<Vesize>\" \"Ui1, Ui1, Ui1, Ui1, i, i\")\n+\t   (match_operand:SVE_4 4 \"register_operand\" \"w, w, w, w, w, w\")]\n \t  UNSPEC_ST1_SCATTER))]\n   \"TARGET_SVE\"\n   \"@\n-   st1w\\t%4.s, %5, [%1.s]\n-   st1w\\t%4.s, %5, [%1.s, #%0]\n-   st1w\\t%4.s, %5, [%0, %1.s, sxtw]\n-   st1w\\t%4.s, %5, [%0, %1.s, uxtw]\n-   st1w\\t%4.s, %5, [%0, %1.s, sxtw %p3]\n-   st1w\\t%4.s, %5, [%0, %1.s, uxtw %p3]\"\n+   st1<Vesize>\\t%4.s, %5, [%1.s]\n+   st1<Vesize>\\t%4.s, %5, [%1.s, #%0]\n+   st1<Vesize>\\t%4.s, %5, [%0, %1.s, sxtw]\n+   st1<Vesize>\\t%4.s, %5, [%0, %1.s, uxtw]\n+   st1<Vesize>\\t%4.s, %5, [%0, %1.s, sxtw %p3]\n+   st1<Vesize>\\t%4.s, %5, [%0, %1.s, uxtw %p3]\"\n )\n \n ;; Predicated scatter stores for 64-bit elements.  The value of operand 2\n ;; doesn't matter in this case.\n-(define_insn \"mask_scatter_store<mode><v_int_equiv>\"\n+(define_insn \"mask_scatter_store<mode><v_int_container>\"\n   [(set (mem:BLK (scratch))\n \t(unspec:BLK\n \t  [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl, Upl, Upl\")\n-\t   (match_operand:DI 0 \"aarch64_sve_gather_offset_d\" \"Z, vgd, rk, rk\")\n+\t   (match_operand:DI 0 \"aarch64_sve_gather_offset_<Vesize>\" \"Z, vgd, rk, rk\")\n \t   (match_operand:VNx2DI 1 \"register_operand\" \"w, w, w, w\")\n \t   (match_operand:DI 2 \"const_int_operand\")\n-\t   (match_operand:DI 3 \"aarch64_gather_scale_operand_d\" \"Ui1, Ui1, Ui1, i\")\n-\t   (match_operand:SVE_FULL_D 4 \"register_operand\" \"w, w, w, w\")]\n+\t   (match_operand:DI 3 \"aarch64_gather_scale_operand_<Vesize>\" \"Ui1, Ui1, Ui1, i\")\n+\t   (match_operand:SVE_2 4 \"register_operand\" \"w, w, w, w\")]\n \t  UNSPEC_ST1_SCATTER))]\n   \"TARGET_SVE\"\n   \"@\n-   st1d\\t%4.d, %5, [%1.d]\n-   st1d\\t%4.d, %5, [%1.d, #%0]\n-   st1d\\t%4.d, %5, [%0, %1.d]\n-   st1d\\t%4.d, %5, [%0, %1.d, lsl %p3]\"\n+   st1<Vesize>\\t%4.d, %5, [%1.d]\n+   st1<Vesize>\\t%4.d, %5, [%1.d, #%0]\n+   st1<Vesize>\\t%4.d, %5, [%0, %1.d]\n+   st1<Vesize>\\t%4.d, %5, [%0, %1.d, lsl %p3]\"\n )\n \n-;; Likewise, but with the offset being sign-extended from 32 bits.\n-(define_insn_and_rewrite \"*mask_scatter_store<mode><v_int_equiv>_sxtw\"\n+;; Likewise, but with the offset being extended from 32 bits.\n+(define_insn_and_rewrite \"*mask_scatter_store<mode><v_int_container>_<su>xtw_unpacked\"\n+  [(set (mem:BLK (scratch))\n+\t(unspec:BLK\n+\t  [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl\")\n+\t   (match_operand:DI 0 \"register_operand\" \"rk, rk\")\n+\t   (unspec:VNx2DI\n+\t     [(match_operand 6)\n+\t      (ANY_EXTEND:VNx2DI\n+\t\t(match_operand:VNx2SI 1 \"register_operand\" \"w, w\"))]\n+\t     UNSPEC_PRED_X)\n+\t   (match_operand:DI 2 \"const_int_operand\")\n+\t   (match_operand:DI 3 \"aarch64_gather_scale_operand_<Vesize>\" \"Ui1, i\")\n+\t   (match_operand:SVE_2 4 \"register_operand\" \"w, w\")]\n+\t  UNSPEC_ST1_SCATTER))]\n+  \"TARGET_SVE\"\n+  \"@\n+   st1<Vesize>\\t%4.d, %5, [%0, %1.d, <su>xtw]\n+   st1<Vesize>\\t%4.d, %5, [%0, %1.d, <su>xtw %p3]\"\n+  \"&& !CONSTANT_P (operands[6])\"\n+  {\n+    operands[6] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+)\n+\n+;; Likewise, but with the offset being truncated to 32 bits and then\n+;; sign-extended.\n+(define_insn_and_rewrite \"*mask_scatter_store<mode><v_int_container>_sxtw\"\n   [(set (mem:BLK (scratch))\n \t(unspec:BLK\n \t  [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl\")\n@@ -2206,21 +2232,22 @@\n \t\t  (match_operand:VNx2DI 1 \"register_operand\" \"w, w\")))]\n \t     UNSPEC_PRED_X)\n \t   (match_operand:DI 2 \"const_int_operand\")\n-\t   (match_operand:DI 3 \"aarch64_gather_scale_operand_d\" \"Ui1, i\")\n-\t   (match_operand:SVE_FULL_D 4 \"register_operand\" \"w, w\")]\n+\t   (match_operand:DI 3 \"aarch64_gather_scale_operand_<Vesize>\" \"Ui1, i\")\n+\t   (match_operand:SVE_2 4 \"register_operand\" \"w, w\")]\n \t  UNSPEC_ST1_SCATTER))]\n   \"TARGET_SVE\"\n   \"@\n-   st1d\\t%4.d, %5, [%0, %1.d, sxtw]\n-   st1d\\t%4.d, %5, [%0, %1.d, sxtw %p3]\"\n-  \"&& !rtx_equal_p (operands[5], operands[6])\"\n+   st1<Vesize>\\t%4.d, %5, [%0, %1.d, sxtw]\n+   st1<Vesize>\\t%4.d, %5, [%0, %1.d, sxtw %p3]\"\n+  \"&& !CONSTANT_P (operands[6])\"\n   {\n-    operands[6] = copy_rtx (operands[5]);\n+    operands[6] = CONSTM1_RTX (<VPRED>mode);\n   }\n )\n \n-;; Likewise, but with the offset being zero-extended from 32 bits.\n-(define_insn \"*mask_scatter_store<mode><v_int_equiv>_uxtw\"\n+;; Likewise, but with the offset being truncated to 32 bits and then\n+;; zero-extended.\n+(define_insn \"*mask_scatter_store<mode><v_int_container>_uxtw\"\n   [(set (mem:BLK (scratch))\n \t(unspec:BLK\n \t  [(match_operand:VNx2BI 5 \"register_operand\" \"Upl, Upl\")\n@@ -2229,13 +2256,13 @@\n \t     (match_operand:VNx2DI 1 \"register_operand\" \"w, w\")\n \t     (match_operand:VNx2DI 6 \"aarch64_sve_uxtw_immediate\"))\n \t   (match_operand:DI 2 \"const_int_operand\")\n-\t   (match_operand:DI 3 \"aarch64_gather_scale_operand_d\" \"Ui1, i\")\n-\t   (match_operand:SVE_FULL_D 4 \"register_operand\" \"w, w\")]\n+\t   (match_operand:DI 3 \"aarch64_gather_scale_operand_<Vesize>\" \"Ui1, i\")\n+\t   (match_operand:SVE_2 4 \"register_operand\" \"w, w\")]\n \t  UNSPEC_ST1_SCATTER))]\n   \"TARGET_SVE\"\n   \"@\n-   st1d\\t%4.d, %5, [%0, %1.d, uxtw]\n-   st1d\\t%4.d, %5, [%0, %1.d, uxtw %p3]\"\n+   st1<Vesize>\\t%4.d, %5, [%0, %1.d, uxtw]\n+   st1<Vesize>\\t%4.d, %5, [%0, %1.d, uxtw %p3]\"\n )\n \n ;; -------------------------------------------------------------------------"}, {"sha": "23a452b1e49a90844c38debb829bf92678578aeb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60", "patch": "@@ -1,3 +1,16 @@\n+2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/scatter_store_1.c (TEST_LOOP): Start at 0.\n+\t(TEST_ALL): Add tests for 8-bit and 16-bit elements.\n+\t* gcc.target/aarch64/sve/scatter_store_2.c: Update accordingly.\n+\t* gcc.target/aarch64/sve/scatter_store_3.c (TEST_LOOP): Start at 0.\n+\t(TEST_ALL): Add tests for 8-bit and 16-bit elements.\n+\t* gcc.target/aarch64/sve/scatter_store_4.c: Update accordingly.\n+\t* gcc.target/aarch64/sve/scatter_store_5.c (TEST_LOOP): Start at 0.\n+\t(TEST_ALL): Add tests for 8-bit, 16-bit and 32-bit elements.\n+\t* gcc.target/aarch64/sve/scatter_store_8.c: New test.\n+\t* gcc.target/aarch64/sve/scatter_store_9.c: Likewise.\n+\n 2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/gather_load_extend_1.c: New test."}, {"sha": "53078fb11a86f9e3a8df71b027795689fc3f0eb6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/scatter_store_1.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_1.c?ref=37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60", "patch": "@@ -13,11 +13,15 @@\n   f_##DATA_TYPE (DATA_TYPE *restrict dest, DATA_TYPE *restrict src,\t\\\n \t\t INDEX##BITS *indices, int n)\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    for (int i = 9; i < n; ++i)\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n       dest[indices[i]] = src[i] + 1;\t\t\t\t\t\\\n   }\n \n #define TEST_ALL(T)\t\t\t\t\\\n+  T (int8_t, 32)\t\t\t\t\\\n+  T (uint8_t, 32)\t\t\t\t\\\n+  T (int16_t, 32)\t\t\t\t\\\n+  T (uint16_t, 32)\t\t\t\t\\\n   T (int32_t, 32)\t\t\t\t\\\n   T (uint32_t, 32)\t\t\t\t\\\n   T (float, 32)\t\t\t\t\t\\\n@@ -27,5 +31,7 @@\n \n TEST_ALL (TEST_LOOP)\n \n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.s, p[0-7], \\[x[0-9]+, z[0-9]+.s, sxtw\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.s, p[0-7], \\[x[0-9]+, z[0-9]+.s, sxtw 1\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s, p[0-7], \\[x[0-9]+, z[0-9]+.s, sxtw 2\\]\\n} 3 } } */\n /* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d, p[0-7], \\[x[0-9]+, z[0-9]+.d, lsl 3\\]\\n} 3 } } */"}, {"sha": "6bc7cbb02e78da2a75a3e3c1c256de34127635ec", "filename": "gcc/testsuite/gcc.target/aarch64/sve/scatter_store_2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_2.c?ref=37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60", "patch": "@@ -6,5 +6,7 @@\n \n #include \"scatter_store_1.c\"\n \n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.s, p[0-7], \\[x[0-9]+, z[0-9]+.s, uxtw\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.s, p[0-7], \\[x[0-9]+, z[0-9]+.s, uxtw 1\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s, p[0-7], \\[x[0-9]+, z[0-9]+.s, uxtw 2\\]\\n} 3 } } */\n /* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d, p[0-7], \\[x[0-9]+, z[0-9]+.d, lsl 3\\]\\n} 3 } } */"}, {"sha": "fe3d59a23bb165db6035807ffc17eb3578823382", "filename": "gcc/testsuite/gcc.target/aarch64/sve/scatter_store_3.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_3.c?ref=37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60", "patch": "@@ -8,17 +8,20 @@\n #define INDEX64 int64_t\n #endif\n \n-/* Invoked 18 times for each data size.  */\n #define TEST_LOOP(DATA_TYPE, BITS)\t\t\t\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\t\\\n   f_##DATA_TYPE (DATA_TYPE *restrict dest, DATA_TYPE *restrict src,\t\\\n \t\t INDEX##BITS *indices, int n)\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    for (int i = 9; i < n; ++i)\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n       *(DATA_TYPE *) ((char *) dest + indices[i]) = src[i] + 1;\t\t\\\n   }\n \n #define TEST_ALL(T)\t\t\t\t\\\n+  T (int8_t, 32)\t\t\t\t\\\n+  T (uint8_t, 32)\t\t\t\t\\\n+  T (int16_t, 32)\t\t\t\t\\\n+  T (uint16_t, 32)\t\t\t\t\\\n   T (int32_t, 32)\t\t\t\t\\\n   T (uint32_t, 32)\t\t\t\t\\\n   T (float, 32)\t\t\t\t\t\\\n@@ -28,5 +31,7 @@\n \n TEST_ALL (TEST_LOOP)\n \n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.s, p[0-7], \\[x[0-9]+, z[0-9]+.s, sxtw\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.s, p[0-7], \\[x[0-9]+, z[0-9]+.s, sxtw\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s, p[0-7], \\[x[0-9]+, z[0-9]+.s, sxtw\\]\\n} 3 } } */\n /* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d, p[0-7], \\[x[0-9]+, z[0-9]+.d\\]\\n} 3 } } */"}, {"sha": "8a9fa2c5cdbad1fc8cd7e84c5631cd28f71b88f5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/scatter_store_4.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_4.c?ref=37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60", "patch": "@@ -6,5 +6,7 @@\n \n #include \"scatter_store_3.c\"\n \n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.s, p[0-7], \\[x[0-9]+, z[0-9]+.s, uxtw\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.s, p[0-7], \\[x[0-9]+, z[0-9]+.s, uxtw\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s, p[0-7], \\[x[0-9]+, z[0-9]+.s, uxtw\\]\\n} 3 } } */\n /* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d, p[0-7], \\[x[0-9]+, z[0-9]+.d\\]\\n} 3 } } */"}, {"sha": "d3a64521d3c5e441f15880669b59098fb15a2896", "filename": "gcc/testsuite/gcc.target/aarch64/sve/scatter_store_5.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_5.c?ref=37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60", "patch": "@@ -3,21 +3,29 @@\n \n #include <stdint.h>\n \n-/* Invoked 18 times for each data size.  */\n #define TEST_LOOP(DATA_TYPE)\t\t\t\t\t\t\\\n   void __attribute__ ((noinline, noclone))\t\t\t\t\\\n   f_##DATA_TYPE (DATA_TYPE *restrict *dest, DATA_TYPE *restrict src,\t\\\n \t\t int n)\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    for (int i = 9; i < n; ++i)\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n       *dest[i] = src[i] + 1;\t\t\t\t\t\t\\\n   }\n \n #define TEST_ALL(T)\t\t\t\t\\\n+  T (int8_t)\t\t\t\t\t\\\n+  T (uint8_t)\t\t\t\t\t\\\n+  T (int16_t)\t\t\t\t\t\\\n+  T (uint16_t)\t\t\t\t\t\\\n+  T (int32_t)\t\t\t\t\t\\\n+  T (uint32_t)\t\t\t\t\t\\\n   T (int64_t)\t\t\t\t\t\\\n   T (uint64_t)\t\t\t\t\t\\\n   T (double)\n \n TEST_ALL (TEST_LOOP)\n \n+/* We assume this isn't profitable for bytes.  */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.d, p[0-7], \\[z[0-9]+.d\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.d, p[0-7], \\[z[0-9]+.d\\]\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d, p[0-7], \\[z[0-9]+.d\\]\\n} 3 } } */"}, {"sha": "30f37f0fc95beb9326f2b805b1c1dc1a687accdf", "filename": "gcc/testsuite/gcc.target/aarch64/sve/scatter_store_8.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_8.c?ref=37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fwrapv --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#ifndef INDEX32\n+#define INDEX16 int16_t\n+#define INDEX32 int32_t\n+#endif\n+\n+#define TEST_LOOP(DATA_TYPE, BITS)\t\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\t\t\\\n+  f_##DATA_TYPE (DATA_TYPE *restrict dest, DATA_TYPE *restrict src,\t\\\n+\t\t INDEX##BITS *indices, INDEX##BITS mask, int n)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      dest[(INDEX##BITS) (indices[i] + mask)] = src[i];\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (int8_t, 16)\t\t\t\t\\\n+  T (uint8_t, 16)\t\t\t\t\\\n+  T (int16_t, 16)\t\t\t\t\\\n+  T (uint16_t, 16)\t\t\t\t\\\n+  T (_Float16, 16)\t\t\t\t\\\n+  T (int32_t, 16)\t\t\t\t\\\n+  T (uint32_t, 16)\t\t\t\t\\\n+  T (float, 16)\t\t\t\t\t\\\n+  T (int64_t, 32)\t\t\t\t\\\n+  T (uint64_t, 32)\t\t\t\t\\\n+  T (double, 32)\n+\n+TEST_ALL (TEST_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.s, p[0-7], \\[x[0-9]+, z[0-9]+.s, sxtw\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.s, p[0-7], \\[x[0-9]+, z[0-9]+.s, sxtw 1\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s, p[0-7], \\[x[0-9]+, z[0-9]+.s, sxtw 2\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d, p[0-7], \\[x[0-9]+, z[0-9]+.d, sxtw 3\\]\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsxt.\\tz} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tsxth\\tz[0-9]+\\.s,} 8 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.s,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.s,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d,} 3 } } */"}, {"sha": "0218d35ff9903fc119fd8f3b919225777c64d219", "filename": "gcc/testsuite/gcc.target/aarch64/sve/scatter_store_9.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fscatter_store_9.c?ref=37a3662f76d79a1d9ff02a31e5cc0f7e20dfbc60", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fwrapv --save-temps\" } */\n+\n+#define INDEX16 uint16_t\n+#define INDEX32 uint32_t\n+\n+#include \"scatter_store_8.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.s, p[0-7], \\[x[0-9]+, z[0-9]+.s, uxtw\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.s, p[0-7], \\[x[0-9]+, z[0-9]+.s, uxtw 1\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s, p[0-7], \\[x[0-9]+, z[0-9]+.s, uxtw 2\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d, p[0-7], \\[x[0-9]+, z[0-9]+.d, uxtw 3\\]\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuxt.\\tz} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tuxth\\tz[0-9]+\\.s,} 8 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.s,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.s,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s,} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d,} 3 } } */"}]}