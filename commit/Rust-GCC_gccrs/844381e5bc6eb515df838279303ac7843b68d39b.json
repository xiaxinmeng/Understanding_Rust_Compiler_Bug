{"sha": "844381e5bc6eb515df838279303ac7843b68d39b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ0MzgxZTViYzZlYjUxNWRmODM4Mjc5MzAzYWM3ODQzYjY4ZDM5Yg==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2010-05-08T15:53:59Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2010-05-08T15:53:59Z"}, "message": "re PR middle-end/28685 (Multiple comparisons are not simplified)\n\n2010-05-08  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tPR middle-end/28685\n\n\tgcc/\n\t* tree-ssa-reassoc.c (eliminate_redundant_comparison): New function.\n\t(optimize_ops_list): Call it.\n\n\tgcc/testsuite/\n\t* gcc.dg/pr28685-1.c: New file.\n\nFrom-SVN: r159189", "tree": {"sha": "10331b08926ef42a8e2ee7f510365d174376f10a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10331b08926ef42a8e2ee7f510365d174376f10a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/844381e5bc6eb515df838279303ac7843b68d39b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/844381e5bc6eb515df838279303ac7843b68d39b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/844381e5bc6eb515df838279303ac7843b68d39b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/844381e5bc6eb515df838279303ac7843b68d39b/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a79741bd29546a3f3d3722a29a62a1a8862523c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a79741bd29546a3f3d3722a29a62a1a8862523c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a79741bd29546a3f3d3722a29a62a1a8862523c"}], "stats": {"total": 171, "additions": 170, "deletions": 1}, "files": [{"sha": "28fd31f3379f6efed13674a1d8775a5f6c9d807a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844381e5bc6eb515df838279303ac7843b68d39b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844381e5bc6eb515df838279303ac7843b68d39b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=844381e5bc6eb515df838279303ac7843b68d39b", "patch": "@@ -1,3 +1,9 @@\n+2010-05-08  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR middle-end/28685\n+\t* tree-ssa-reassoc.c (eliminate_redundant_comparison): New function.\n+\t(optimize_ops_list): Call it.\n+\n 2010-05-08  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/44030"}, {"sha": "38501a7841418919651aa4b3b9f94fb07e9367aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844381e5bc6eb515df838279303ac7843b68d39b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844381e5bc6eb515df838279303ac7843b68d39b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=844381e5bc6eb515df838279303ac7843b68d39b", "patch": "@@ -1,3 +1,8 @@\n+2010-05-08  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR middle-end/28685\n+\t* gcc.dg/pr28685-1.c: New file.\n+\n 2010-05-08  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/44030"}, {"sha": "1d9d97ed615a57f703ed3b76337d1ac2e12d868e", "filename": "gcc/testsuite/gcc.dg/pr28685-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844381e5bc6eb515df838279303ac7843b68d39b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28685-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844381e5bc6eb515df838279303ac7843b68d39b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28685-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28685-1.c?ref=844381e5bc6eb515df838279303ac7843b68d39b", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" }  */\n+\n+/* Should produce <=.  */\n+int test1 (int a, int b)\n+{\n+  return (a < b || a == b);\n+}\n+\n+/* Should produce <=.  */\n+int test2 (int a, int b)\n+{\n+  int lt = a < b;\n+  int eq = a == b;\n+\n+  return (lt || eq);\n+}\n+\n+/* Should produce <= (just deleting redundant test).  */\n+int test3 (int a, int b)\n+{\n+  int lt = a <= b;\n+  int eq = a == b;\n+\n+  return (lt || eq);\n+}\n+\n+/* Should produce <= (operands reversed to test the swap logic).  */\n+int test4 (int a, int b)\n+{\n+  int lt = a < b;\n+  int eq = b == a;\n+\n+  return (lt || eq);\n+}\n+\n+/* Should produce constant 0.  */\n+int test5 (int a, int b)\n+{\n+  int lt = a < b;\n+  int eq = a == b;\n+\n+  return (lt && eq);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \" <= \" 4 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 0\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" < \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" == \" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "6bdb57ec2b2a43b925ff828dac98ce81cd48d927", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 109, "deletions": 1, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/844381e5bc6eb515df838279303ac7843b68d39b/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/844381e5bc6eb515df838279303ac7843b68d39b/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=844381e5bc6eb515df838279303ac7843b68d39b", "patch": "@@ -1215,6 +1215,113 @@ undistribute_ops_list (enum tree_code opcode,\n   return changed;\n }\n \n+/* If OPCODE is BIT_IOR_EXPR or BIT_AND_EXPR and CURR is a comparison\n+   expression, examine the other OPS to see if any of them are comparisons\n+   of the same values, which we may be able to combine or eliminate.\n+   For example, we can rewrite (a < b) | (a == b) as (a <= b).  */\n+\n+static bool\n+eliminate_redundant_comparison (enum tree_code opcode,\n+\t\t\t\tVEC (operand_entry_t, heap) **ops,\n+\t\t\t\tunsigned int currindex,\n+\t\t\t\toperand_entry_t curr)\n+{\n+  tree op1, op2;\n+  enum tree_code lcode, rcode;\n+  gimple def1, def2;\n+  int i;\n+  operand_entry_t oe;\n+\n+  if (opcode != BIT_IOR_EXPR && opcode != BIT_AND_EXPR)\n+    return false;\n+\n+  /* Check that CURR is a comparison.  */\n+  if (TREE_CODE (curr->op) != SSA_NAME)\n+    return false;\n+  def1 = SSA_NAME_DEF_STMT (curr->op);\n+  if (!is_gimple_assign (def1))\n+    return false;\n+  lcode = gimple_assign_rhs_code (def1);\n+  if (TREE_CODE_CLASS (lcode) != tcc_comparison)\n+    return false;\n+  op1 = gimple_assign_rhs1 (def1);\n+  op2 = gimple_assign_rhs2 (def1);\n+\n+  /* Now look for a similar comparison in the remaining OPS.  */\n+  for (i = currindex + 1;\n+       VEC_iterate (operand_entry_t, *ops, i, oe);\n+       i++)\n+    {\n+      tree t;\n+\n+      if (TREE_CODE (oe->op) != SSA_NAME)\n+\tcontinue;\n+      def2 = SSA_NAME_DEF_STMT (oe->op);\n+      if (!is_gimple_assign (def2))\n+\tcontinue;\n+      rcode = gimple_assign_rhs_code (def2);\n+      if (TREE_CODE_CLASS (rcode) != tcc_comparison)\n+\tcontinue;\n+      if (operand_equal_p (op1, gimple_assign_rhs1 (def2), 0)\n+\t  && operand_equal_p (op2, gimple_assign_rhs2 (def2), 0))\n+\t;\n+      else if (operand_equal_p (op1, gimple_assign_rhs2 (def2), 0)\n+\t       && operand_equal_p (op2, gimple_assign_rhs1 (def2), 0))\n+\trcode = swap_tree_comparison (rcode);\n+      else\n+\tcontinue;\n+\n+      /* If we got here, we have a match.  See if we can combine the\n+\t two comparisons.  */\n+      t = combine_comparisons (UNKNOWN_LOCATION,\n+\t\t\t       (opcode == BIT_IOR_EXPR\n+\t\t\t\t? TRUTH_OR_EXPR : TRUTH_AND_EXPR),\n+\t\t\t       lcode, rcode, TREE_TYPE (curr->op), op1, op2);\n+      if (!t)\n+\tcontinue;\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  fprintf (dump_file, \"Equivalence: \");\n+\t  print_generic_expr (dump_file, curr->op, 0);\n+\t  fprintf (dump_file, \" %s \", op_symbol_code (opcode));\n+\t  print_generic_expr (dump_file, oe->op, 0);\n+\t  fprintf (dump_file, \" -> \");\n+\t  print_generic_expr (dump_file, t, 0);\n+\t  fprintf (dump_file, \"\\n\");\n+\t}\n+\n+      /* Now we can delete oe, as it has been subsumed by the new combined\n+         expression t.  */\n+      VEC_ordered_remove (operand_entry_t, *ops, i);\n+      reassociate_stats.ops_eliminated ++;\n+\n+      /* If t is the same as curr->op, we're done.  Otherwise we must\n+\t replace curr->op with t.  Special case is if we got a constant\n+\t back, in which case we add it to the end instead of in place of\n+\t the current entry.  */\n+      if (TREE_CODE (t) == INTEGER_CST)\n+\t{\n+\t  VEC_ordered_remove (operand_entry_t, *ops, currindex);\n+\t  add_to_ops_vec (ops, t);\n+\t}\n+      else if (TREE_CODE (t) != lcode)\n+\t{\n+\t  tree tmpvar;\n+\t  gimple sum;\n+\t  enum tree_code subcode;\n+\t  tree newop1;\n+\t  tree newop2;\n+\t  tmpvar = create_tmp_var (TREE_TYPE (t), NULL);\n+\t  add_referenced_var (tmpvar);\n+\t  extract_ops_from_tree (t, &subcode, &newop1, &newop2);\n+\t  sum = build_and_add_sum (tmpvar, newop1, newop2, subcode);\n+\t  curr->op = gimple_get_lhs (sum);\n+\t}\n+      return true;\n+    }\n+\n+  return false;\n+}\n \n /* Perform various identities and other optimizations on the list of\n    operand entries, stored in OPS.  The tree code for the binary\n@@ -1276,7 +1383,8 @@ optimize_ops_list (enum tree_code opcode,\n       if (eliminate_not_pairs (opcode, ops, i, oe))\n \treturn;\n       if (eliminate_duplicate_pair (opcode, ops, &done, i, oe, oelast)\n-\t  || (!done && eliminate_plus_minus_pair (opcode, ops, i, oe)))\n+\t  || (!done && eliminate_plus_minus_pair (opcode, ops, i, oe))\n+\t  || (!done && eliminate_redundant_comparison (opcode, ops, i, oe)))\n \t{\n \t  if (done)\n \t    return;"}]}