{"sha": "cb3c3d63315ceb4dc262e5efb83b42c73c43387d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IzYzNkNjMzMTVjZWI0ZGMyNjJlNWVmYjgzYjQyYzczYzQzMzg3ZA==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-08-28T11:54:10Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-08-28T11:54:10Z"}, "message": "Fortran: Fix absent-optional handling for nondescriptor arrays (PR94672)\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/94672\n\t* trans-array.c (gfc_trans_g77_array): Check against the parm decl and\n\tset the nonparm decl used for the is-present check to NULL if absent.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/94672\n\t* gfortran.dg/optional_assumed_charlen_2.f90: New test.", "tree": {"sha": "a31c6b5ab69e7883905bc4591157d059fefc8382", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a31c6b5ab69e7883905bc4591157d059fefc8382"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb3c3d63315ceb4dc262e5efb83b42c73c43387d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3c3d63315ceb4dc262e5efb83b42c73c43387d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb3c3d63315ceb4dc262e5efb83b42c73c43387d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3c3d63315ceb4dc262e5efb83b42c73c43387d/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b648814c02eb418aaf27897c480452172ee96303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b648814c02eb418aaf27897c480452172ee96303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b648814c02eb418aaf27897c480452172ee96303"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "6566c47d4ae36505eb10c4847952514f1f2f043c", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3c3d63315ceb4dc262e5efb83b42c73c43387d/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3c3d63315ceb4dc262e5efb83b42c73c43387d/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=cb3c3d63315ceb4dc262e5efb83b42c73c43387d", "patch": "@@ -6472,8 +6472,14 @@ gfc_trans_g77_array (gfc_symbol * sym, gfc_wrapped_block * block)\n \n   if (sym->attr.optional || sym->attr.not_always_present)\n     {\n-      tmp = gfc_conv_expr_present (sym);\n-      stmt = build3_v (COND_EXPR, tmp, stmt, build_empty_stmt (input_location));\n+      tree nullify;\n+      if (TREE_CODE (parm) != PARM_DECL)\n+\tnullify = fold_build2_loc (input_location, MODIFY_EXPR, void_type_node,\n+\t\t\t\t   parm, null_pointer_node);\n+      else\n+\tnullify = build_empty_stmt (input_location);\n+      tmp = gfc_conv_expr_present (sym, true);\n+      stmt = build3_v (COND_EXPR, tmp, stmt, nullify);\n     }\n \n   gfc_add_init_cleanup (block, stmt, NULL_TREE);"}, {"sha": "fa8cfd7903824f96db87e95127f85e5fa01ea13d", "filename": "gcc/testsuite/gfortran.dg/optional_assumed_charlen_2.f90", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3c3d63315ceb4dc262e5efb83b42c73c43387d/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_assumed_charlen_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3c3d63315ceb4dc262e5efb83b42c73c43387d/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_assumed_charlen_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_assumed_charlen_2.f90?ref=cb3c3d63315ceb4dc262e5efb83b42c73c43387d", "patch": "@@ -0,0 +1,48 @@\n+! { dg-do run }\n+! PR fortran/94672\n+!\n+! Contributed by Tom\u00e1\u0161 Trnka\n+!\n+module m\n+  implicit none (type,external)\n+  type t\n+    integer :: i = 5\n+  end type t\n+contains\n+subroutine bar(x, y, z, n)\n+  integer, value :: n\n+  type(t), intent(out), optional :: x(:), y(n), z(:)\n+  allocatable :: z\n+end subroutine bar\n+\n+subroutine foo (n, nFound, sVal)\n+   integer,                   value  :: n\n+   integer,                   intent(out)  :: nFound\n+   character(*),    optional, intent(out) :: sVal(n)\n+\n+   nFound = 0\n+\n+   if (present(sVal)) then\n+      nFound = nFound + 1\n+   end if\n+end subroutine\n+end\n+\n+use m\n+implicit none (type,external)\n+type(t) :: a(7), b(7), c(:)\n+allocatable :: c\n+integer :: nn, nf\n+character(len=4) :: str\n+\n+allocate(c(7))\n+call bar(a,b,c,7)\n+if (any(a(:)%i /= 5)) stop 1\n+if (any(b(:)%i /= 5)) stop 2\n+if (allocated(c)) stop 3\n+\n+call foo(7, nf, str)\n+if (nf /= 1) stop 4\n+call foo(7, nf)\n+if (nf /= 0) stop 5\n+end"}]}