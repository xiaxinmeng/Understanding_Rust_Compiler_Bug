{"sha": "5930876d68cf7480566c7c96ecc28069d20acd98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkzMDg3NmQ2OGNmNzQ4MDU2NmM3Yzk2ZWNjMjgwNjlkMjBhY2Q5OA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2014-12-14T12:04:49Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2014-12-14T12:04:49Z"}, "message": "re PR fortran/63674 ([F03] procedure pointer and non/pure procedure)\n\n2014-12-14  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/63674\n\t* resolve.c (pure_function): Treat procedure-pointer components.\n\t(check_pure_function): New function.\n\t(resolve_function): Use it.\n\t(pure_subroutine): Return a bool to indicate success and modify\n\targuments.\n\t(resolve_generic_s0,resolve_specific_s0,resolve_unknown_s): Use return\n\tvalue of 'pure_subroutine'.\n\t(resolve_ppc_call): Call 'pure_subroutine'.\n\t(resolve_expr_ppc): Call 'check_pure_function'.\n\n\n2014-12-14  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/63674\n\t* gfortran.dg/proc_ptr_comp_39.f90: New.\n\t* gfortran.dg/pure_dummy_length_1.f90: Modified error message.\n\t* gfortran.dg/stfunc_6.f90: Ditto.\n\t* gfortran.dg/typebound_operator_4.f90: Ditto.\n\nFrom-SVN: r218717", "tree": {"sha": "cb5e16af307f095cd94a87bf193d891742cca6eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb5e16af307f095cd94a87bf193d891742cca6eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5930876d68cf7480566c7c96ecc28069d20acd98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5930876d68cf7480566c7c96ecc28069d20acd98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5930876d68cf7480566c7c96ecc28069d20acd98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5930876d68cf7480566c7c96ecc28069d20acd98/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "761bd3334833d7b5d53fb6b233bd767237f1c1b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/761bd3334833d7b5d53fb6b233bd767237f1c1b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/761bd3334833d7b5d53fb6b233bd767237f1c1b6"}], "stats": {"total": 175, "additions": 129, "deletions": 46}, "files": [{"sha": "24bddef50d560f5725d273848ed4db03fd8fe325", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5930876d68cf7480566c7c96ecc28069d20acd98/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5930876d68cf7480566c7c96ecc28069d20acd98/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5930876d68cf7480566c7c96ecc28069d20acd98", "patch": "@@ -1,3 +1,16 @@\n+2014-12-14  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/63674\n+\t* resolve.c (pure_function): Treat procedure-pointer components.\n+\t(check_pure_function): New function.\n+\t(resolve_function): Use it.\n+\t(pure_subroutine): Return a bool to indicate success and modify\n+\targuments.\n+\t(resolve_generic_s0,resolve_specific_s0,resolve_unknown_s): Use return\n+\tvalue of 'pure_subroutine'.\n+\t(resolve_ppc_call): Call 'pure_subroutine'.\n+\t(resolve_expr_ppc): Call 'check_pure_function'.\n+\n 2014-12-13  Tobias Burnus  <burnus@net-b.de>\n \t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n "}, {"sha": "6a0a869f68cce3e19f093972ca97fd5b65883fcd", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 72, "deletions": 42, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5930876d68cf7480566c7c96ecc28069d20acd98/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5930876d68cf7480566c7c96ecc28069d20acd98/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=5930876d68cf7480566c7c96ecc28069d20acd98", "patch": "@@ -2746,6 +2746,7 @@ static int\n pure_function (gfc_expr *e, const char **name)\n {\n   int pure;\n+  gfc_component *comp;\n \n   *name = NULL;\n \n@@ -2754,7 +2755,13 @@ pure_function (gfc_expr *e, const char **name)\n         && e->symtree->n.sym->attr.proc == PROC_ST_FUNCTION)\n     return pure_stmt_function (e, e->symtree->n.sym);\n \n-  if (e->value.function.esym)\n+  comp = gfc_get_proc_ptr_comp (e);\n+  if (comp)\n+    {\n+      pure = gfc_pure (comp->ts.interface);\n+      *name = comp->name;\n+    }\n+  else if (e->value.function.esym)\n     {\n       pure = gfc_pure (e->value.function.esym);\n       *name = e->value.function.esym->name;\n@@ -2801,6 +2808,39 @@ pure_stmt_function (gfc_expr *e, gfc_symbol *sym)\n }\n \n \n+/* Check if a non-pure function function is allowed in the current context. */\n+\n+static bool check_pure_function (gfc_expr *e)\n+{\n+  const char *name = NULL;\n+  if (!pure_function (e, &name) && name)\n+    {\n+      if (forall_flag)\n+\t{\n+\t  gfc_error (\"Reference to non-PURE function %qs at %L inside a \"\n+\t\t     \"FORALL %s\", name, &e->where,\n+\t\t     forall_flag == 2 ? \"mask\" : \"block\");\n+\t  return false;\n+\t}\n+      else if (gfc_do_concurrent_flag)\n+\t{\n+\t  gfc_error (\"Reference to non-PURE function %qs at %L inside a \"\n+\t\t     \"DO CONCURRENT %s\", name, &e->where,\n+\t\t     gfc_do_concurrent_flag == 2 ? \"mask\" : \"block\");\n+\t  return false;\n+\t}\n+      else if (gfc_pure (NULL))\n+\t{\n+\t  gfc_error (\"Reference to non-PURE function %qs at %L \"\n+\t\t     \"within a PURE procedure\", name, &e->where);\n+\t  return false;\n+\t}\n+      gfc_unset_implicit_pure (NULL);\n+    }\n+  return true;\n+}\n+\n+\n /* Resolve a function call, which means resolving the arguments, then figuring\n    out which entity the name refers to.  */\n \n@@ -2809,7 +2849,6 @@ resolve_function (gfc_expr *expr)\n {\n   gfc_actual_arglist *arg;\n   gfc_symbol *sym;\n-  const char *name;\n   bool t;\n   int temp;\n   procedure_type p = PROC_INTRINSIC;\n@@ -2982,33 +3021,9 @@ resolve_function (gfc_expr *expr)\n #undef GENERIC_ID\n \n   need_full_assumed_size = temp;\n-  name = NULL;\n \n-  if (!pure_function (expr, &name) && name)\n-    {\n-      if (forall_flag)\n-\t{\n-\t  gfc_error (\"Reference to non-PURE function %qs at %L inside a \"\n-\t\t     \"FORALL %s\", name, &expr->where,\n-\t\t     forall_flag == 2 ? \"mask\" : \"block\");\n-\t  t = false;\n-\t}\n-      else if (gfc_do_concurrent_flag)\n-\t{\n-\t  gfc_error (\"Reference to non-PURE function %qs at %L inside a \"\n-\t\t     \"DO CONCURRENT %s\", name, &expr->where,\n-\t\t     gfc_do_concurrent_flag == 2 ? \"mask\" : \"block\");\n-\t  t = false;\n-\t}\n-      else if (gfc_pure (NULL))\n-\t{\n-\t  gfc_error (\"Function reference to %qs at %L is to a non-PURE \"\n-\t\t     \"procedure within a PURE procedure\", name, &expr->where);\n-\t  t = false;\n-\t}\n-\n-      gfc_unset_implicit_pure (NULL);\n-    }\n+  if (!check_pure_function(expr))\n+    t = false;\n \n   /* Functions without the RECURSIVE attribution are not allowed to\n    * call themselves.  */\n@@ -3056,23 +3071,32 @@ resolve_function (gfc_expr *expr)\n \n /************* Subroutine resolution *************/\n \n-static void\n-pure_subroutine (gfc_code *c, gfc_symbol *sym)\n+static bool\n+pure_subroutine (gfc_symbol *sym, const char *name, locus *loc)\n {\n   if (gfc_pure (sym))\n-    return;\n+    return true;\n \n   if (forall_flag)\n-    gfc_error (\"Subroutine call to %qs in FORALL block at %L is not PURE\",\n-\t       sym->name, &c->loc);\n+    {\n+      gfc_error (\"Subroutine call to %qs in FORALL block at %L is not PURE\",\n+\t\t name, loc);\n+      return false;\n+    }\n   else if (gfc_do_concurrent_flag)\n-    gfc_error (\"Subroutine call to %qs in DO CONCURRENT block at %L is not \"\n-\t       \"PURE\", sym->name, &c->loc);\n+    {\n+      gfc_error (\"Subroutine call to %qs in DO CONCURRENT block at %L is not \"\n+\t\t \"PURE\", name, loc);\n+      return false;\n+    }\n   else if (gfc_pure (NULL))\n-    gfc_error (\"Subroutine call to %qs at %L is not PURE\", sym->name,\n-\t       &c->loc);\n+    {\n+      gfc_error (\"Subroutine call to %qs at %L is not PURE\", name, loc);\n+      return false;\n+    }\n \n   gfc_unset_implicit_pure (NULL);\n+  return true;\n }\n \n \n@@ -3087,7 +3111,8 @@ resolve_generic_s0 (gfc_code *c, gfc_symbol *sym)\n       if (s != NULL)\n \t{\n \t  c->resolved_sym = s;\n-\t  pure_subroutine (c, s);\n+\t  if (!pure_subroutine (s, s->name, &c->loc))\n+\t    return MATCH_ERROR;\n \t  return MATCH_YES;\n \t}\n \n@@ -3190,7 +3215,8 @@ resolve_specific_s0 (gfc_code *c, gfc_symbol *sym)\n   gfc_procedure_use (sym, &c->ext.actual, &c->loc);\n \n   c->resolved_sym = sym;\n-  pure_subroutine (c, sym);\n+  if (!pure_subroutine (sym, sym->name, &c->loc))\n+    return MATCH_ERROR;\n \n   return MATCH_YES;\n }\n@@ -3260,9 +3286,7 @@ resolve_unknown_s (gfc_code *c)\n \n   c->resolved_sym = sym;\n \n-  pure_subroutine (c, sym);\n-\n-  return true;\n+  return pure_subroutine (sym, sym->name, &c->loc);\n }\n \n \n@@ -6036,6 +6060,9 @@ resolve_ppc_call (gfc_code* c)\n \t\t\t\t && comp->ts.interface->formal)))\n     return false;\n \n+  if (!pure_subroutine (comp->ts.interface, comp->name, &c->expr1->where))\n+    return false;\n+\n   gfc_ppc_use (comp, &c->expr1->value.compcall.actual, &c->expr1->where);\n \n   return true;\n@@ -6074,6 +6101,9 @@ resolve_expr_ppc (gfc_expr* e)\n   if (!update_ppc_arglist (e))\n     return false;\n \n+  if (!check_pure_function(e))\n+    return false;\n+\n   gfc_ppc_use (comp, &e->value.compcall.actual, &e->where);\n \n   return true;"}, {"sha": "3d96f347ee411be7f156fbdf5da6dd0556a6cfe4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5930876d68cf7480566c7c96ecc28069d20acd98/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5930876d68cf7480566c7c96ecc28069d20acd98/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5930876d68cf7480566c7c96ecc28069d20acd98", "patch": "@@ -1,3 +1,11 @@\n+2014-12-14  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/63674\n+\t* gfortran.dg/proc_ptr_comp_39.f90: New.\n+\t* gfortran.dg/pure_dummy_length_1.f90: Modified error message.\n+\t* gfortran.dg/stfunc_6.f90: Ditto.\n+\t* gfortran.dg/typebound_operator_4.f90: Ditto.\n+\n 2014-12-13  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/53513"}, {"sha": "cc4096a4ecc5a045c1baa7f328a4d22708d6fb8d", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_39.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5930876d68cf7480566c7c96ecc28069d20acd98/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_39.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5930876d68cf7480566c7c96ecc28069d20acd98/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_39.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_39.f90?ref=5930876d68cf7480566c7c96ecc28069d20acd98", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do compile }\n+!\n+! PR 63674: [F03] procedure pointer and non/pure procedure\n+!\n+! Contributed by Valery Weber <valeryweber@hotmail.com>\n+\n+program prog\n+  interface\n+    integer function nf()\n+    end function\n+    pure integer function pf()\n+    end function\n+    subroutine ns()\n+    end subroutine\n+    pure subroutine ps()\n+    end subroutine\n+  end interface\n+  type :: t\n+    procedure(nf), nopass, pointer :: nf => NULL()  ! non-pure function\n+    procedure(pf), nopass, pointer :: pf => NULL()  ! pure function\n+    procedure(ns), nopass, pointer :: ns => NULL()  ! non-pure subroutine\n+    procedure(ps), nopass, pointer :: ps => NULL()  ! pure subroutine\n+  end type\n+contains\n+  pure integer function eval(a)\n+    type(t), intent(in) :: a\n+    eval = a%pf()\n+    eval = a%nf()   ! { dg-error \"Reference to non-PURE function\" }\n+    call a%ps()\n+    call a%ns()     ! { dg-error \"is not PURE\" }\n+  end function\n+end"}, {"sha": "b3e75a4115b9dfd0e4de8c161551af56357bb8a6", "filename": "gcc/testsuite/gfortran.dg/pure_dummy_length_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5930876d68cf7480566c7c96ecc28069d20acd98/gcc%2Ftestsuite%2Fgfortran.dg%2Fpure_dummy_length_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5930876d68cf7480566c7c96ecc28069d20acd98/gcc%2Ftestsuite%2Fgfortran.dg%2Fpure_dummy_length_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpure_dummy_length_1.f90?ref=5930876d68cf7480566c7c96ecc28069d20acd98", "patch": "@@ -24,6 +24,6 @@ pure function purity(self, string, ignore_case) result(same)\n          character(*), intent(in) :: string\r\n          integer(4), intent(in) :: ignore_case\r\n          integer i\r\n-         if (end > impure (self)) & ! { dg-error \"non-PURE procedure\" }\r\n+         if (end > impure (self)) & ! { dg-error \"non-PURE function\" }\r\n            return\r\n    end function\r"}, {"sha": "413e583759b1460fd41ef5f0b396e3ea4ff80f00", "filename": "gcc/testsuite/gfortran.dg/stfunc_6.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5930876d68cf7480566c7c96ecc28069d20acd98/gcc%2Ftestsuite%2Fgfortran.dg%2Fstfunc_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5930876d68cf7480566c7c96ecc28069d20acd98/gcc%2Ftestsuite%2Fgfortran.dg%2Fstfunc_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstfunc_6.f90?ref=5930876d68cf7480566c7c96ecc28069d20acd98", "patch": "@@ -22,7 +22,7 @@\n contains\n   pure integer function u (x)\n     integer,intent(in) :: x\n-    st2 (i) = i * v(i) ! { dg-error \"non-PURE procedure\" }\n+    st2 (i) = i * v(i) ! { dg-error \"non-PURE function\" }\n     u = st2(x)\n   end function\n   integer function v (x)"}, {"sha": "0a8415fc667f57233922e0d3fc8227132f28041d", "filename": "gcc/testsuite/gfortran.dg/typebound_operator_4.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5930876d68cf7480566c7c96ecc28069d20acd98/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5930876d68cf7480566c7c96ecc28069d20acd98/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_4.f03?ref=5930876d68cf7480566c7c96ecc28069d20acd98", "patch": "@@ -75,8 +75,8 @@ PURE SUBROUTINE iampure2 ()\n   TYPE(myreal) :: x\n \n   x = 0.0 ! { dg-error \"is not PURE\" }\n-  x = x + 42.0 ! { dg-error \"to a non-PURE procedure\" }\n-  x = x .PLUS. 5.0 ! { dg-error \"to a non-PURE procedure\" }\n+  x = x + 42.0 ! { dg-error \"non-PURE function\" }\n+  x = x .PLUS. 5.0 ! { dg-error \"non-PURE function\" }\n END SUBROUTINE iampure2\n \n PROGRAM main"}]}