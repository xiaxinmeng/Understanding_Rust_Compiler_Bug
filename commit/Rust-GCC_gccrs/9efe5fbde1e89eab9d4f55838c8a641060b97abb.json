{"sha": "9efe5fbde1e89eab9d4f55838c8a641060b97abb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVmZTVmYmRlMWU4OWVhYjlkNGY1NTgzOGM4YTY0MTA2MGI5N2FiYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-10-08T14:15:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-10-08T14:15:06Z"}, "message": "call.c (call_copy_ctor): New.\n\n\t* call.c (call_copy_ctor): New.\n\t(build_over_call): Use it to avoid infinite recursion on invalid code.\n\nFrom-SVN: r216005", "tree": {"sha": "bb8de79e5cf30cc8a35f32d7f3c8fd2456c4c076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb8de79e5cf30cc8a35f32d7f3c8fd2456c4c076"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9efe5fbde1e89eab9d4f55838c8a641060b97abb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9efe5fbde1e89eab9d4f55838c8a641060b97abb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9efe5fbde1e89eab9d4f55838c8a641060b97abb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9efe5fbde1e89eab9d4f55838c8a641060b97abb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "19d4baed5721eb7c95e56c2bec68ae7db6308f9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19d4baed5721eb7c95e56c2bec68ae7db6308f9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19d4baed5721eb7c95e56c2bec68ae7db6308f9e"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "c70de7e22ed1db0f27240c585c59ebfb393cd09e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9efe5fbde1e89eab9d4f55838c8a641060b97abb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9efe5fbde1e89eab9d4f55838c8a641060b97abb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9efe5fbde1e89eab9d4f55838c8a641060b97abb", "patch": "@@ -1,3 +1,8 @@\n+2014-10-08  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (call_copy_ctor): New.\n+\t(build_over_call): Use it to avoid infinite recursion on invalid code.\n+\n 2014-10-07  Jason Merrill  <jason@redhat.com>\n \n \t* tree.c (cp_tree_equal) [TRAIT_EXPR]: Use cp_tree_equal for type2."}, {"sha": "76d8eabf33f1e94b56040d6261222b28cc26809d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9efe5fbde1e89eab9d4f55838c8a641060b97abb/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9efe5fbde1e89eab9d4f55838c8a641060b97abb/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=9efe5fbde1e89eab9d4f55838c8a641060b97abb", "patch": "@@ -6896,6 +6896,25 @@ mark_versions_used (tree fn)\n     }\n }\n \n+/* Build a call to \"the copy constructor\" for the type of A, even if it\n+   wouldn't be selected by normal overload resolution.  Used for\n+   diagnostics.  */\n+\n+static tree\n+call_copy_ctor (tree a, tsubst_flags_t complain)\n+{\n+  tree ctype = TYPE_MAIN_VARIANT (TREE_TYPE (a));\n+  tree binfo = TYPE_BINFO (ctype);\n+  tree copy = get_copy_ctor (ctype, complain);\n+  copy = build_baselink (binfo, binfo, copy, NULL_TREE);\n+  tree ob = build_dummy_object (ctype);\n+  vec<tree, va_gc>* args = make_tree_vector_single (a);\n+  tree r = build_new_method_call (ob, copy, &args, NULL_TREE,\n+\t\t\t\t  LOOKUP_NORMAL, NULL, complain);\n+  release_tree_vector (args);\n+  return r;\n+}\n+\n /* Subroutine of the various build_*_call functions.  Overload resolution\n    has chosen a winning candidate CAND; build up a CALL_EXPR accordingly.\n    ARGS is a TREE_LIST of the unconverted arguments to the call.  FLAGS is a\n@@ -7234,6 +7253,16 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n       if (magic_varargs_p (fn))\n \t/* Do no conversions for magic varargs.  */\n \ta = mark_type_use (a);\n+      else if (DECL_CONSTRUCTOR_P (fn)\n+\t       && same_type_ignoring_top_level_qualifiers_p (DECL_CONTEXT (fn),\n+\t\t\t\t\t\t\t     TREE_TYPE (a)))\n+\t{\n+\t  /* Avoid infinite recursion trying to call A(...).  */\n+\t  if (complain & tf_error)\n+\t    /* Try to call the actual copy constructor for a good error.  */\n+\t    call_copy_ctor (a, complain);\n+\t  return error_mark_node;\n+\t}\n       else\n \ta = convert_arg_to_ellipsis (a, complain);\n       argarray[j++] = a;"}, {"sha": "e7d34d6df43a36c598b3fef2a8f2ebc03a0927db", "filename": "gcc/testsuite/g++.dg/overload/ellipsis3.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9efe5fbde1e89eab9d4f55838c8a641060b97abb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fellipsis3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9efe5fbde1e89eab9d4f55838c8a641060b97abb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fellipsis3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fellipsis3.C?ref=9efe5fbde1e89eab9d4f55838c8a641060b97abb", "patch": "@@ -0,0 +1,9 @@\n+struct A {\n+  A(...);\n+};\n+\n+int main()\n+{\n+  volatile A a;\n+  volatile A a2(a);\t\t// { dg-error \"volatile\" }\n+}"}]}