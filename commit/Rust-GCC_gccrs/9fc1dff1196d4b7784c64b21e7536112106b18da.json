{"sha": "9fc1dff1196d4b7784c64b21e7536112106b18da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZjMWRmZjExOTZkNGI3Nzg0YzY0YjIxZTc1MzYxMTIxMDZiMThkYQ==", "commit": {"author": {"name": "Michael Meissner", "email": "Michael Meissner meissner@linux.ibm.com", "date": "2020-05-05T17:30:07Z"}, "committer": {"name": "Michael Meissner", "email": "Michael Meissner meissner@linux.ibm.com", "date": "2020-05-05T17:30:07Z"}, "message": "Patch ieee128-lib-patch002b", "tree": {"sha": "cef84f70655218458fbc4c6898eabe03729236c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cef84f70655218458fbc4c6898eabe03729236c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fc1dff1196d4b7784c64b21e7536112106b18da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc1dff1196d4b7784c64b21e7536112106b18da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc1dff1196d4b7784c64b21e7536112106b18da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc1dff1196d4b7784c64b21e7536112106b18da/comments", "author": null, "committer": null, "parents": [{"sha": "f1d82734ecfc3fc9913d598871192fd0f3fff536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1d82734ecfc3fc9913d598871192fd0f3fff536", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1d82734ecfc3fc9913d598871192fd0f3fff536"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "ab1d5afa56a7236f1545d4867f7fa26677661a3d", "filename": "gcc/ChangeLog.meissner", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc1dff1196d4b7784c64b21e7536112106b18da/gcc%2FChangeLog.meissner", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc1dff1196d4b7784c64b21e7536112106b18da/gcc%2FChangeLog.meissner", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.meissner?ref=9fc1dff1196d4b7784c64b21e7536112106b18da", "patch": "@@ -1,3 +1,11 @@\n+2020-05-05  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t(ieee128-lib-patch002b)\n+\tPR target/94630\n+\t* config/rs6000/rs6000.c (rs6000_mangle_decl_assembler_name): When\n+\tlong double is IEEE 128-bit, map *printf and *scanf built-in\n+\tfunctions to the IEEE 128-bit name.\n+\n 2020-05-05  Michael Meissner  <meissner@linux.ibm.com>\n \n \t(ieee128-lib-patch001b)"}, {"sha": "dc184419d44677e4ae2e639c339c1314beb2d389", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc1dff1196d4b7784c64b21e7536112106b18da/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc1dff1196d4b7784c64b21e7536112106b18da/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9fc1dff1196d4b7784c64b21e7536112106b18da", "patch": "@@ -26340,7 +26340,33 @@ rs6000_mangle_decl_assembler_name (tree decl, tree id)\n       size_t len = IDENTIFIER_LENGTH (id);\n       const char *name = IDENTIFIER_POINTER (id);\n \n-      if (name[len - 1] == 'l')\n+      /* Update the __builtin_*printf && __builtin_*scanf functions.  */\n+      const size_t printf_len = sizeof (\"printf\") - 1;\n+      const size_t scanf_len = sizeof (\"scanf\") - 1;\n+      const size_t printf_extra = sizeof (\"__\") - 1 + sizeof (\"ieee128\") - 1;\n+      const size_t scanf_extra = sizeof (\"__isoc99_\") - 1 + sizeof (\"ieee128\") - 1;\n+\n+      if (len >= printf_len\n+\t  && strcmp (name + len - printf_len, \"printf\") == 0)\n+\t{\n+\t  char *newname = (char *) alloca (len + 1 + printf_extra);\n+\t  strcpy (newname, \"__\");\n+\t  memcpy (newname + 2, name, len);\n+\t  strcpy (newname + 2 + len, \"ieee128\");\n+\t  id = get_identifier (newname);\n+\t}\n+\n+      else if (len >= scanf_len\n+\t       && strcmp (name + len - scanf_len, \"scanf\") == 0)\n+\t{\n+\t  char *newname = (char *) alloca (len + 1 + scanf_extra);\n+\t  strcpy (newname, \"__isoc99_\");\n+\t  memcpy (newname + sizeof (\"__isoc99\") - 1, name, len);\n+\t  strcpy (newname + sizeof (\"__isoc99\") - 1 + len, \"ieee128\");\n+\t  id = get_identifier (newname);\n+\t}\n+\n+      else if (name[len - 1] == 'l')\n \t{\n \t  bool uses_ieee128_p = false;\n \t  tree type = TREE_TYPE (decl);"}]}