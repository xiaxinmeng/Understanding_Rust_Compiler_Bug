{"sha": "dd865ef6e85afae532e83f05cf3126a23cb81ba5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ4NjVlZjZlODVhZmFlNTMyZTgzZjA1Y2YzMTI2YTIzY2I4MWJhNQ==", "commit": {"author": {"name": "Shujing Zhao", "email": "pearly.zhao@oracle.com", "date": "2009-12-17T03:22:22Z"}, "committer": {"name": "Shujing Zhao", "email": "pzhao@gcc.gnu.org", "date": "2009-12-17T03:22:22Z"}, "message": "re PR c/40885 (build_indirect_ref i18n problems)\n\n2009-12-17  Shujing Zhao  <pearly.zhao@oracle.com>\n\n\tPR c/40885\n\t* c-common.h (ref_operator): New type.\n\t(build_indirect_ref): Adjust prototype with new argument.\n\t* c-typeck.c (build_indirect_ref): Accept ref_operator as argument and\n\temit the diagnostics for easy translation.\n\t(build_array_ref): Update calls to build_indirect_ref.\n\t* c-omp.c (c_finish_omp_atomic): Likewise.\n\t* c-parser.c (c_parser_unary_expression,\n\tc_parser_postfix_expression_after_primary): Likewise.\n\ncp/\n2009-12-17  Shujing Zhao  <pearly.zhao@oracle.com>\n\n\t* typeck.c (build_indirect_ref): Update the argument.\n\t(build_x_indirect_ref): Likewise.\n\t(cp_build_indirect_ref): Update the argument and emit the diagnostics\n\tfor easy translation.\n\t(build_class_member_access_expr, build_array_ref,\n\tget_member_function_from_ptrfunc): Update calls.\n\t* cp-tree.h (build_x_indirect_ref, cp_build_indirect_ref): Update\n\tprototypes.\n\t* call.c (build_new_op, convert_like_real, build_x_va_arg,\n\tbuild_over_call): Update calls.\n\t* class.c (build_base_path, build_simple_base_path, build_vfn_ref):\n\tLikewise.\n\t* decl.c (start_preparsed_function): Likewise.\n\t* except.c (expand_start_catch_block, build_throw): Likewise.\n\t* init.c (emit_mem_initializers, expand_virtual_init,\n\texpand_virtual_init, build_new_1, build_vec_init, build_delete,\n\tbuild_vec_delete): Likewise.\n\t* parser.c (cp_parser_unary_expression): Likewise.\n\t* pt.c (tsubst_copy_and_build): Likewise.\n\t* rtti.c (build_headof, get_tinfo_decl_dynamic, get_typeid): Likewise.\n\t* semantics.c (finish_non_static_data_member, thisify_lambda_field):\n\tLikewise.\n\t* tree.c (build_dummy_object, stabilize_expr): Likewise.\n\t* typeck2.c (build_x_arrow): Likewise.\n\ntestsuite/\n2009-12-17  Shujing Zhao  <pearly.zhao@oracle.com>\n\n\t* g++.old-deja/g++.mike/net31.C: Make expected dg-error strings\n\texplicit.\n\t* g++.old-deja/g++.bugs/900213_02.C: Likewise.\n\t* g++.old-deja/g++.bugs/900215_02.C: Likewise.\n\nFrom-SVN: r155302", "tree": {"sha": "27ca1fe8f71a3b516fc9e49ec49456f83326e58c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27ca1fe8f71a3b516fc9e49ec49456f83326e58c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd865ef6e85afae532e83f05cf3126a23cb81ba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd865ef6e85afae532e83f05cf3126a23cb81ba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd865ef6e85afae532e83f05cf3126a23cb81ba5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd865ef6e85afae532e83f05cf3126a23cb81ba5/comments", "author": null, "committer": null, "parents": [{"sha": "3d34d0a029039f01426edee77b5bad8815304c2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d34d0a029039f01426edee77b5bad8815304c2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d34d0a029039f01426edee77b5bad8815304c2a"}], "stats": {"total": 234, "additions": 168, "deletions": 66}, "files": [{"sha": "b38240c70a70f6369c80e0f7d1000b24aa631ca7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -1,3 +1,15 @@\n+2009-12-17  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\tPR c/40885\n+\t* c-common.h (ref_operator): New type.\n+\t(build_indirect_ref): Adjust prototype with new argument.\n+\t* c-typeck.c (build_indirect_ref): Accept ref_operator as argument and\n+\temit the diagnostics for easy translation.\n+\t(build_array_ref): Update calls to build_indirect_ref.\n+\t* c-omp.c (c_finish_omp_atomic): Likewise.\n+\t* c-parser.c (c_parser_unary_expression,\n+\tc_parser_postfix_expression_after_primary): Likewise.\n+\n 2009-12-16  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/42392"}, {"sha": "6f8d832d455ab1849144ce73344a25fc6586ef44", "filename": "gcc/c-common.h", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -391,6 +391,20 @@ extern c_language_kind c_language;\n #define c_dialect_cxx()\t\t((c_language & clk_cxx) != 0)\n #define c_dialect_objc()\t((c_language & clk_objc) != 0)\n \n+/* The various name of operator that appears in error messages. */\n+typedef enum ref_operator {\n+  /* NULL */\n+  RO_NULL,\n+  /* array indexing */\n+  RO_ARRAY_INDEXING,\n+  /* unary * */\n+  RO_UNARY_STAR,\n+  /* -> */\n+  RO_ARROW,\n+  /* implicit conversion */\n+  RO_IMPLICIT_CONVERSION\n+} ref_operator;\n+\n /* Information about a statement tree.  */\n \n struct GTY(()) stmt_tree_s {\n@@ -448,7 +462,7 @@ extern tree pushdecl_top_level (tree);\n extern tree pushdecl (tree);\n extern tree build_modify_expr (location_t, tree, tree, enum tree_code,\n \t\t\t       location_t, tree, tree);\n-extern tree build_indirect_ref (location_t, tree, const char *);\n+extern tree build_indirect_ref (location_t, tree, ref_operator);\n \n extern int c_expand_decl (tree);\n "}, {"sha": "eb6f3ef78de51e2e309394c12615244b88dd09af", "filename": "gcc/c-omp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-omp.c?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -145,7 +145,7 @@ c_finish_omp_atomic (location_t loc, enum tree_code code, tree lhs, tree rhs)\n       DECL_CONTEXT (var) = current_function_decl;\n       addr = build4 (TARGET_EXPR, TREE_TYPE (addr), var, addr, NULL, NULL);\n     }\n-  lhs = build_indirect_ref (loc, addr, NULL);\n+  lhs = build_indirect_ref (loc, addr, RO_NULL);\n \n   /* There are lots of warnings, errors, and conversions that need to happen\n      in the course of interpreting a statement.  Use the normal mechanisms"}, {"sha": "bf66a584ba8e580b2f37162f7fc30c667fe8af5f", "filename": "gcc/c-parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -5102,7 +5102,7 @@ c_parser_unary_expression (c_parser *parser)\n       exp_loc = c_parser_peek_token (parser)->location;\n       op = c_parser_cast_expression (parser, NULL);\n       op = default_function_array_conversion (exp_loc, op);\n-      ret.value = build_indirect_ref (op_loc, op.value, \"unary *\");\n+      ret.value = build_indirect_ref (op_loc, op.value, RO_UNARY_STAR);\n       return ret;\n     case CPP_PLUS:\n       if (!c_dialect_objc () && !in_system_header)\n@@ -5947,7 +5947,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t  expr.value = build_component_ref (op_loc,\n \t\t\t\t\t    build_indirect_ref (op_loc,\n \t\t\t\t\t\t\t\texpr.value,\n-\t\t\t\t\t\t\t\t\"->\"),\n+\t\t\t\t\t\t\t\tRO_ARROW),\n \t\t\t\t\t    ident);\n \t  expr.original_code = ERROR_MARK;\n \t  if (TREE_CODE (expr.value) != COMPONENT_REF)"}, {"sha": "dbaddd684666cf22ae9d79c31f6b1b99a42fe182", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -2107,7 +2107,7 @@ build_component_ref (location_t loc, tree datum, tree component)\n    LOC is the location to use for the generated tree.  */\n \n tree\n-build_indirect_ref (location_t loc, tree ptr, const char *errorstring)\n+build_indirect_ref (location_t loc, tree ptr, ref_operator errstring)\n {\n   tree pointer = default_conversion (ptr);\n   tree type = TREE_TYPE (pointer);\n@@ -2165,8 +2165,26 @@ build_indirect_ref (location_t loc, tree ptr, const char *errorstring)\n \t}\n     }\n   else if (TREE_CODE (pointer) != ERROR_MARK)\n-    error_at (loc,\n-\t      \"invalid type argument of %qs (have %qT)\", errorstring, type);\n+    switch (errstring)\n+      {\n+         case RO_ARRAY_INDEXING:\n+           error_at (loc,\n+                     \"invalid type argument of array indexing (have %qT)\",\n+                     type);\n+           break;\n+         case RO_UNARY_STAR:\n+           error_at (loc,\n+                     \"invalid type argument of unary %<*%> (have %qT)\",\n+                     type);\n+           break;\n+         case RO_ARROW:\n+           error_at (loc,\n+                     \"invalid type argument of %<->%> (have %qT)\",\n+                     type);\n+           break;\n+         default:\n+           gcc_unreachable ();\n+      }\n   return error_mark_node;\n }\n \n@@ -2301,7 +2319,7 @@ build_array_ref (location_t loc, tree array, tree index)\n \n       return build_indirect_ref\n \t(loc, build_binary_op (loc, PLUS_EXPR, ar, index, 0),\n-\t \"array indexing\");\n+\t RO_ARRAY_INDEXING);\n     }\n }\n \f"}, {"sha": "4a756cf33d361379d44ed0fe7c37c4740bc237b3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -1,3 +1,30 @@\n+2009-12-17  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\t* typeck.c (build_indirect_ref): Update the argument.\n+\t(build_x_indirect_ref): Likewise.\n+\t(cp_build_indirect_ref): Update the argument and emit the diagnostics\n+\tfor easy translation.\n+\t(build_class_member_access_expr, build_array_ref,\n+\tget_member_function_from_ptrfunc): Update calls.\n+\t* cp-tree.h (build_x_indirect_ref, cp_build_indirect_ref): Update\n+\tprototypes.\n+\t* call.c (build_new_op, convert_like_real, build_x_va_arg,\n+\tbuild_over_call): Update calls.\n+\t* class.c (build_base_path, build_simple_base_path, build_vfn_ref):\n+\tLikewise.\n+\t* decl.c (start_preparsed_function): Likewise.\n+\t* except.c (expand_start_catch_block, build_throw): Likewise.\n+\t* init.c (emit_mem_initializers, expand_virtual_init,\n+\texpand_virtual_init, build_new_1, build_vec_init, build_delete,\n+\tbuild_vec_delete): Likewise.\n+\t* parser.c (cp_parser_unary_expression): Likewise.\n+\t* pt.c (tsubst_copy_and_build): Likewise.\n+\t* rtti.c (build_headof, get_tinfo_decl_dynamic, get_typeid): Likewise.\n+\t* semantics.c (finish_non_static_data_member, thisify_lambda_field):\n+\tLikewise.\n+\t* tree.c (build_dummy_object, stabilize_expr): Likewise.\n+\t* typeck2.c (build_x_arrow): Likewise.\n+\n 2009-12-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/42387"}, {"sha": "d375302e722c582090ec29e84aff10116911b0e3", "filename": "gcc/cp/call.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -4464,7 +4464,7 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n       return cp_build_modify_expr (arg1, code2, arg2, complain);\n \n     case INDIRECT_REF:\n-      return cp_build_indirect_ref (arg1, \"unary *\", complain);\n+      return cp_build_indirect_ref (arg1, RO_UNARY_STAR, complain);\n \n     case TRUTH_ANDIF_EXPR:\n     case TRUTH_ORIF_EXPR:\n@@ -4509,7 +4509,7 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n       return build_array_ref (input_location, arg1, arg2);\n \n     case MEMBER_REF:\n-      return build_m_component_ref (cp_build_indirect_ref (arg1, NULL, \n+      return build_m_component_ref (cp_build_indirect_ref (arg1, RO_NULL, \n                                                            complain), \n                                     arg2);\n \n@@ -5024,7 +5024,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t  expr = cp_build_unary_op (ADDR_EXPR, expr, 0, complain);\n \t  expr = convert_to_base (expr, build_pointer_type (totype),\n \t\t\t\t  !c_cast_p, /*nonnull=*/true);\n-\t  expr = cp_build_indirect_ref (expr, \"implicit conversion\", complain);\n+\t  expr = cp_build_indirect_ref (expr, RO_IMPLICIT_CONVERSION, complain);\n \t  return expr;\n \t}\n \n@@ -5242,7 +5242,7 @@ build_x_va_arg (tree expr, tree type)\n       error (\"cannot receive objects of non-trivially-copyable type %q#T \"\n \t     \"through %<...%>; \", type);\n       expr = convert (build_pointer_type (type1), null_node);\n-      expr = cp_build_indirect_ref (expr, NULL, tf_warning_or_error);\n+      expr = cp_build_indirect_ref (expr, RO_NULL, tf_warning_or_error);\n       return expr;\n     }\n \n@@ -5739,7 +5739,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n       if (targ)\n \targ = targ;\n       else\n-\targ = cp_build_indirect_ref (arg, 0, complain);\n+\targ = cp_build_indirect_ref (arg, RO_NULL, complain);\n \n       if (TREE_CODE (arg) == TARGET_EXPR\n \t  && TARGET_EXPR_LIST_INIT_P (arg))\n@@ -5774,7 +5774,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t       || (TYPE_HAS_TRIVIAL_INIT_REF (DECL_CONTEXT (fn))\n \t\t   && !move_fn_p (fn)))\n \t{\n-\t  tree to = stabilize_reference (cp_build_indirect_ref (fa, 0,\n+\t  tree to = stabilize_reference (cp_build_indirect_ref (fa, RO_NULL,\n \t\t\t\t\t\t\t\tcomplain));\n \n \t  val = build2 (INIT_EXPR, DECL_CONTEXT (fn), to, arg);\n@@ -5786,14 +5786,14 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t   && TYPE_HAS_TRIVIAL_ASSIGN_REF (DECL_CONTEXT (fn)))\n     {\n       tree to = stabilize_reference\n-\t(cp_build_indirect_ref (argarray[0], 0, complain));\n+\t(cp_build_indirect_ref (argarray[0], RO_NULL, complain));\n       tree type = TREE_TYPE (to);\n       tree as_base = CLASSTYPE_AS_BASE (type);\n       tree arg = argarray[1];\n \n       if (tree_int_cst_equal (TYPE_SIZE (type), TYPE_SIZE (as_base)))\n \t{\n-\t  arg = cp_build_indirect_ref (arg, 0, complain);\n+\t  arg = cp_build_indirect_ref (arg, RO_NULL, complain);\n \t  val = build2 (MODIFY_EXPR, TREE_TYPE (to), to, arg);\n \t}\n       else"}, {"sha": "16d566682a6df67c916716fca98388187b55149a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -297,7 +297,7 @@ build_base_path (enum tree_code code,\n     {\n       expr = build_nop (build_pointer_type (target_type), expr);\n       if (!want_pointer)\n-\texpr = build_indirect_ref (EXPR_LOCATION (expr), expr, NULL);\n+\texpr = build_indirect_ref (EXPR_LOCATION (expr), expr, RO_NULL);\n       return expr;\n     }\n \n@@ -343,7 +343,7 @@ build_base_path (enum tree_code code,\n \t interesting to the optimizers anyway.  */\n       && !has_empty)\n     {\n-      expr = cp_build_indirect_ref (expr, NULL, tf_warning_or_error);\n+      expr = cp_build_indirect_ref (expr, RO_NULL, tf_warning_or_error);\n       expr = build_simple_base_path (expr, binfo);\n       if (want_pointer)\n \texpr = build_address (expr);\n@@ -368,11 +368,11 @@ build_base_path (enum tree_code code,\n \t  t = TREE_TYPE (TYPE_VFIELD (current_class_type));\n \t  t = build_pointer_type (t);\n \t  v_offset = convert (t, current_vtt_parm);\n-\t  v_offset = cp_build_indirect_ref (v_offset, NULL, \n+\t  v_offset = cp_build_indirect_ref (v_offset, RO_NULL, \n                                             tf_warning_or_error);\n \t}\n       else\n-\tv_offset = build_vfield_ref (cp_build_indirect_ref (expr, NULL,\n+\tv_offset = build_vfield_ref (cp_build_indirect_ref (expr, RO_NULL,\n                                                             tf_warning_or_error),\n \t\t\t\t     TREE_TYPE (TREE_TYPE (expr)));\n \n@@ -381,7 +381,7 @@ build_base_path (enum tree_code code,\n       v_offset = build1 (NOP_EXPR,\n \t\t\t build_pointer_type (ptrdiff_type_node),\n \t\t\t v_offset);\n-      v_offset = cp_build_indirect_ref (v_offset, NULL, tf_warning_or_error);\n+      v_offset = cp_build_indirect_ref (v_offset, RO_NULL, tf_warning_or_error);\n       TREE_CONSTANT (v_offset) = 1;\n \n       offset = convert_to_integer (ptrdiff_type_node,\n@@ -424,7 +424,7 @@ build_base_path (enum tree_code code,\n     null_test = NULL;\n \n   if (!want_pointer)\n-    expr = cp_build_indirect_ref (expr, NULL, tf_warning_or_error);\n+    expr = cp_build_indirect_ref (expr, RO_NULL, tf_warning_or_error);\n \n  out:\n   if (null_test)\n@@ -458,7 +458,7 @@ build_simple_base_path (tree expr, tree binfo)\n \t in the back end.  */\n       temp = unary_complex_lvalue (ADDR_EXPR, expr);\n       if (temp)\n-\texpr = cp_build_indirect_ref (temp, NULL, tf_warning_or_error);\n+\texpr = cp_build_indirect_ref (temp, RO_NULL, tf_warning_or_error);\n \n       return expr;\n     }\n@@ -646,7 +646,7 @@ build_vfn_ref (tree instance_ptr, tree idx)\n {\n   tree aref;\n \n-  aref = build_vtbl_ref_1 (cp_build_indirect_ref (instance_ptr, 0,\n+  aref = build_vtbl_ref_1 (cp_build_indirect_ref (instance_ptr, RO_NULL,\n                                                   tf_warning_or_error), \n                            idx);\n "}, {"sha": "469dcecb1841b6e70898834a7a71b3fb7a900e0a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -5297,9 +5297,9 @@ extern tree build_class_member_access_expr      (tree, tree, tree, bool,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree finish_class_member_access_expr     (tree, tree, bool, \n \t\t\t\t\t\t tsubst_flags_t);\n-extern tree build_x_indirect_ref\t\t(tree, const char *, \n+extern tree build_x_indirect_ref\t\t(tree, ref_operator, \n                                                  tsubst_flags_t);\n-extern tree cp_build_indirect_ref\t\t(tree, const char *,\n+extern tree cp_build_indirect_ref\t\t(tree, ref_operator,\n                                                  tsubst_flags_t);\n extern tree build_array_ref\t\t\t(location_t, tree, tree);\n extern tree get_member_function_from_ptrfunc\t(tree *, tree);"}, {"sha": "a83d39f3fd8e4e447e02c7b5deeee49f7f7895b5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -11916,7 +11916,7 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n       gcc_assert (TREE_CODE (TREE_TYPE (t)) == POINTER_TYPE);\n \n       cp_function_chain->x_current_class_ref\n-\t= cp_build_indirect_ref (t, NULL, tf_warning_or_error);\n+\t= cp_build_indirect_ref (t, RO_NULL, tf_warning_or_error);\n       cp_function_chain->x_current_class_ptr = t;\n \n       /* Constructors and destructors need to know whether they're \"in"}, {"sha": "83164c86a7ebbabed8b688e4fcc1fb13688f9bd6", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -442,7 +442,7 @@ expand_start_catch_block (tree decl)\n \t\t    fold_build1_loc (input_location,\n \t\t\t\t NEGATE_EXPR, sizetype,\n \t\t\t \t TYPE_SIZE_UNIT (TREE_TYPE (exp))));\n-      exp = cp_build_indirect_ref (exp, NULL, tf_warning_or_error);\n+      exp = cp_build_indirect_ref (exp, RO_NULL, tf_warning_or_error);\n       initialize_handler_parm (decl, exp);\n       return type;\n     }\n@@ -718,7 +718,7 @@ build_throw (tree exp)\n       allocate_expr = get_target_expr (allocate_expr);\n       ptr = TARGET_EXPR_SLOT (allocate_expr);\n       object = build_nop (build_pointer_type (temp_type), ptr);\n-      object = cp_build_indirect_ref (object, NULL, tf_warning_or_error);\n+      object = cp_build_indirect_ref (object, RO_NULL, tf_warning_or_error);\n \n       elided = (TREE_CODE (exp) == TARGET_EXPR);\n "}, {"sha": "1bd80ffa0f8656152230a574013d0f451396fc14", "filename": "gcc/cp/init.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -834,7 +834,7 @@ emit_mem_initializers (tree mem_inits)\n \t  base_addr = build_base_path (PLUS_EXPR, current_class_ptr,\n \t\t\t\t       subobject, 1);\n \t  expand_aggr_init_1 (subobject, NULL_TREE,\n-\t\t\t      cp_build_indirect_ref (base_addr, NULL,\n+\t\t\t      cp_build_indirect_ref (base_addr, RO_NULL,\n                                                      tf_warning_or_error),\n \t\t\t      arguments,\n \t\t\t      LOOKUP_NORMAL,\n@@ -918,7 +918,7 @@ expand_virtual_init (tree binfo, tree decl)\n \t\t      TREE_TYPE (vtt_parm),\n \t\t      vtt_parm,\n \t\t      vtt_index);\n-      vtbl2 = cp_build_indirect_ref (vtbl2, NULL, tf_warning_or_error);\n+      vtbl2 = cp_build_indirect_ref (vtbl2, RO_NULL, tf_warning_or_error);\n       vtbl2 = convert (TREE_TYPE (vtbl), vtbl2);\n \n       /* The actual initializer is the VTT value only in the subobject\n@@ -933,7 +933,7 @@ expand_virtual_init (tree binfo, tree decl)\n     }\n \n   /* Compute the location of the vtpr.  */\n-  vtbl_ptr = build_vfield_ref (cp_build_indirect_ref (decl, NULL, \n+  vtbl_ptr = build_vfield_ref (cp_build_indirect_ref (decl, RO_NULL, \n                                                       tf_warning_or_error),\n \t\t\t       TREE_TYPE (binfo));\n   gcc_assert (vtbl_ptr != error_mark_node);\n@@ -2055,7 +2055,7 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \t\t\t\talloc_node, cookie_ptr);\n       size_ptr_type = build_pointer_type (sizetype);\n       cookie_ptr = fold_convert (size_ptr_type, cookie_ptr);\n-      cookie = cp_build_indirect_ref (cookie_ptr, NULL, complain);\n+      cookie = cp_build_indirect_ref (cookie_ptr, RO_NULL, complain);\n \n       cookie_expr = build2 (MODIFY_EXPR, sizetype, cookie, nelts);\n \n@@ -2067,7 +2067,7 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \t\t\t\t\t    NEGATE_EXPR, sizetype,\n \t\t\t\t\t    size_in_bytes (sizetype)));\n \n-\t  cookie = cp_build_indirect_ref (cookie_ptr, NULL, complain);\n+\t  cookie = cp_build_indirect_ref (cookie_ptr, RO_NULL, complain);\n \t  cookie = build2 (MODIFY_EXPR, sizetype, cookie,\n \t\t\t   size_in_bytes (elt_type));\n \t  cookie_expr = build2 (COMPOUND_EXPR, TREE_TYPE (cookie_expr),\n@@ -2154,7 +2154,7 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \t}\n       else\n \t{\n-\t  init_expr = cp_build_indirect_ref (data_addr, NULL, complain);\n+\t  init_expr = cp_build_indirect_ref (data_addr, RO_NULL, complain);\n \n \t  if (TYPE_NEEDS_CONSTRUCTING (type) && !explicit_value_init_p)\n \t    {\n@@ -2949,7 +2949,7 @@ build_vec_init (tree base, tree maxindex, tree init,\n     {\n       atype = build_pointer_type (atype);\n       stmt_expr = build1 (NOP_EXPR, atype, stmt_expr);\n-      stmt_expr = cp_build_indirect_ref (stmt_expr, NULL, complain);\n+      stmt_expr = cp_build_indirect_ref (stmt_expr, RO_NULL, complain);\n       TREE_NO_WARNING (stmt_expr) = 1;\n     }\n \n@@ -3144,7 +3144,7 @@ build_delete (tree type, tree addr, special_function_kind auto_delete,\n \t\t\t\t/*alloc_fn=*/NULL_TREE);\n \t}\n \n-      expr = build_dtor_call (cp_build_indirect_ref (addr, NULL, \n+      expr = build_dtor_call (cp_build_indirect_ref (addr, RO_NULL, \n                                                      tf_warning_or_error),\n \t\t\t      auto_delete, flags);\n       if (do_delete)\n@@ -3298,7 +3298,7 @@ build_vec_delete (tree base, tree maxindex,\n \t\t\t    size_ptr_type,\n \t\t\t    fold_convert (size_ptr_type, base),\n \t\t\t    cookie_addr);\n-      maxindex = cp_build_indirect_ref (cookie_addr, NULL, tf_warning_or_error);\n+      maxindex = cp_build_indirect_ref (cookie_addr, RO_NULL, tf_warning_or_error);\n     }\n   else if (TREE_CODE (type) == ARRAY_TYPE)\n     {"}, {"sha": "ee4fece6818090acc88a1784e32e68fba0c451f6", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -5628,7 +5628,7 @@ cp_parser_unary_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t{\n \tcase INDIRECT_REF:\n \t  non_constant_p = \"%<*%>\";\n-\t  expression = build_x_indirect_ref (cast_expression, \"unary *\",\n+\t  expression = build_x_indirect_ref (cast_expression, RO_UNARY_STAR,\n                                              tf_warning_or_error);\n \t  break;\n "}, {"sha": "395a026311c585ac536bd5eb6ddc64a68194d54b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -11858,7 +11858,7 @@ tsubst_copy_and_build (tree t,\n \t      r = convert_from_reference (r);\n \t  }\n \telse\n-\t  r = build_x_indirect_ref (r, \"unary *\", complain);\n+\t  r = build_x_indirect_ref (r, RO_UNARY_STAR, complain);\n \treturn r;\n       }\n "}, {"sha": "0f7225fc5426f380f4148455207426ed55c316f1", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -188,7 +188,7 @@ build_headof (tree exp)\n   index = build_int_cst (NULL_TREE,\n \t\t\t -2 * TARGET_VTABLE_DATA_ENTRY_DISTANCE);\n \n-  offset = build_vtbl_ref (cp_build_indirect_ref (exp, NULL, \n+  offset = build_vtbl_ref (cp_build_indirect_ref (exp, RO_NULL, \n                                                   tf_warning_or_error), \n                            index);\n \n@@ -277,7 +277,7 @@ get_tinfo_decl_dynamic (tree exp)\n     /* Otherwise return the type_info for the static type of the expr.  */\n     t = get_tinfo_ptr (TYPE_MAIN_VARIANT (type));\n \n-  return cp_build_indirect_ref (t, NULL, tf_warning_or_error);\n+  return cp_build_indirect_ref (t, RO_NULL, tf_warning_or_error);\n }\n \n static bool\n@@ -483,7 +483,7 @@ get_typeid (tree type)\n   if (!type)\n     return error_mark_node;\n \n-  return cp_build_indirect_ref (get_tinfo_ptr (type), NULL, \n+  return cp_build_indirect_ref (get_tinfo_ptr (type), RO_NULL, \n                                 tf_warning_or_error);\n }\n "}, {"sha": "547e89934c1c659e74cd0b97e5d6a947881fcbfe", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -1458,7 +1458,7 @@ finish_non_static_data_member (tree decl, tree object, tree qualifying_scope)\n     object = cp_build_indirect_ref (lambda_expr_this_capture\n \t\t\t\t    (CLASSTYPE_LAMBDA_EXPR\n \t\t\t\t     (TREE_TYPE (object))),\n-                                    /*errorstring=*/\"\",\n+                                    RO_NULL,\n                                     /*complain=*/tf_warning_or_error);\n \n   if (current_class_ptr)\n@@ -5689,7 +5689,7 @@ thisify_lambda_field (tree decl)\n {\n   tree context = lambda_function (DECL_CONTEXT (decl));\n   tree object = cp_build_indirect_ref (DECL_ARGUMENTS (context),\n-\t\t\t\t       /*errorstring*/\"\",\n+\t\t\t\t       RO_NULL,\n \t\t\t\t       tf_warning_or_error);\n   return finish_non_static_data_member (decl, object,\n \t\t\t\t\t/*qualifying_scope*/NULL_TREE);"}, {"sha": "865abbcfdd3f4f81c8e98e80ebe346d113d0ada3", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -2292,7 +2292,7 @@ tree\n build_dummy_object (tree type)\n {\n   tree decl = build1 (NOP_EXPR, build_pointer_type (type), void_zero_node);\n-  return cp_build_indirect_ref (decl, NULL, tf_warning_or_error);\n+  return cp_build_indirect_ref (decl, RO_NULL, tf_warning_or_error);\n }\n \n /* We've gotten a reference to a member of TYPE.  Return *this if appropriate,\n@@ -2956,7 +2956,7 @@ stabilize_expr (tree exp, tree* initp)\n       exp = cp_build_unary_op (ADDR_EXPR, exp, 1, tf_warning_or_error);\n       init_expr = get_target_expr (exp);\n       exp = TARGET_EXPR_SLOT (init_expr);\n-      exp = cp_build_indirect_ref (exp, 0, tf_warning_or_error);\n+      exp = cp_build_indirect_ref (exp, RO_NULL, tf_warning_or_error);\n     }\n   *initp = init_expr;\n "}, {"sha": "2a036e391edb751cfefc50ada0e095bb27582361", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -2092,7 +2092,7 @@ build_class_member_access_expr (tree object, tree member,\n   {\n     tree temp = unary_complex_lvalue (ADDR_EXPR, object);\n     if (temp)\n-      object = cp_build_indirect_ref (temp, NULL, complain);\n+      object = cp_build_indirect_ref (temp, RO_NULL, complain);\n   }\n \n   /* In [expr.ref], there is an explicit list of the valid choices for\n@@ -2592,7 +2592,7 @@ build_ptrmemfunc_access_expr (tree ptrmem, tree member_name)\n    Must also handle REFERENCE_TYPEs for C++.  */\n \n tree\n-build_x_indirect_ref (tree expr, const char *errorstring, \n+build_x_indirect_ref (tree expr, ref_operator errorstring, \n                       tsubst_flags_t complain)\n {\n   tree orig_expr = expr;\n@@ -2623,13 +2623,13 @@ build_x_indirect_ref (tree expr, const char *errorstring,\n /* Helper function called from c-common.  */\n tree\n build_indirect_ref (location_t loc __attribute__ ((__unused__)),\n-\t\t    tree ptr, const char *errorstring)\n+\t\t    tree ptr, ref_operator errorstring)\n {\n   return cp_build_indirect_ref (ptr, errorstring, tf_warning_or_error);\n }\n \n tree\n-cp_build_indirect_ref (tree ptr, const char *errorstring, \n+cp_build_indirect_ref (tree ptr, ref_operator errorstring, \n                        tsubst_flags_t complain)\n {\n   tree pointer, type;\n@@ -2697,14 +2697,38 @@ cp_build_indirect_ref (tree ptr, const char *errorstring,\n   /* `pointer' won't be an error_mark_node if we were given a\n      pointer to member, so it's cool to check for this here.  */\n   else if (TYPE_PTR_TO_MEMBER_P (type))\n-    error (\"invalid use of %qs on pointer to member\", errorstring);\n+    switch (errorstring)\n+      {\n+         case RO_ARRAY_INDEXING:\n+           error (\"invalid use of array indexing on pointer to member\");\n+           break;\n+         case RO_UNARY_STAR:\n+           error (\"invalid use of unary %<*%> on pointer to member\");\n+           break;\n+         case RO_IMPLICIT_CONVERSION:\n+           error (\"invalid use of implicit conversion on pointer to member\");\n+           break;\n+         default:\n+           gcc_unreachable ();\n+      }\n   else if (pointer != error_mark_node)\n-    {\n-      if (errorstring)\n-\terror (\"invalid type argument of %qs\", errorstring);\n-      else\n-\terror (\"invalid type argument\");\n-    }\n+    switch (errorstring)\n+      {\n+         case RO_NULL:\n+           error (\"invalid type argument\");\n+           break;\n+         case RO_ARRAY_INDEXING:\n+           error (\"invalid type argument of array indexing\");\n+           break;\n+         case RO_UNARY_STAR:\n+           error (\"invalid type argument of unary %<*%>\");\n+           break;\n+         case RO_IMPLICIT_CONVERSION:\n+           error (\"invalid type argument of implicit conversion\");\n+           break;\n+         default:\n+           gcc_unreachable ();\n+      }\n   return error_mark_node;\n }\n \n@@ -2871,7 +2895,7 @@ build_array_ref (location_t loc, tree array, tree idx)\n     ret = cp_build_indirect_ref (cp_build_binary_op (input_location,\n \t\t\t\t\t\t     PLUS_EXPR, ar, ind,\n \t\t\t\t\t\t     tf_warning_or_error),\n-                                 \"array indexing\",\n+                                 RO_ARRAY_INDEXING,\n                                  tf_warning_or_error);\n     protected_set_expr_location (ret, loc);\n     return ret;\n@@ -2980,7 +3004,7 @@ get_member_function_from_ptrfunc (tree *instance_ptrptr, tree function)\n       /* Next extract the vtable pointer from the object.  */\n       vtbl = build1 (NOP_EXPR, build_pointer_type (vtbl_ptr_type_node),\n \t\t     instance_ptr);\n-      vtbl = cp_build_indirect_ref (vtbl, NULL, tf_warning_or_error);\n+      vtbl = cp_build_indirect_ref (vtbl, RO_NULL, tf_warning_or_error);\n       /* If the object is not dynamic the access invokes undefined\n \t behavior.  As it is not executed in this case silence the\n \t spurious warnings it may provoke.  */\n@@ -2990,7 +3014,7 @@ get_member_function_from_ptrfunc (tree *instance_ptrptr, tree function)\n       e2 = fold_build2_loc (input_location,\n \t\t\tPOINTER_PLUS_EXPR, TREE_TYPE (vtbl), vtbl,\n \t\t\tfold_convert (sizetype, idx));\n-      e2 = cp_build_indirect_ref (e2, NULL, tf_warning_or_error);\n+      e2 = cp_build_indirect_ref (e2, RO_NULL, tf_warning_or_error);\n       TREE_CONSTANT (e2) = 1;\n \n       /* When using function descriptors, the address of the"}, {"sha": "a4bd3811ead0d53dbfdea8282e0392483183612f", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -1434,7 +1434,7 @@ build_x_arrow (tree expr)\n \t  return expr;\n \t}\n \n-      return cp_build_indirect_ref (last_rval, NULL, tf_warning_or_error);\n+      return cp_build_indirect_ref (last_rval, RO_NULL, tf_warning_or_error);\n     }\n \n   if (types_memoized)"}, {"sha": "f162037a99d779b68488de55d43bd4da5d9a5d68", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -1,3 +1,10 @@\n+2009-12-17  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\t* g++.old-deja/g++.mike/net31.C: Make expected dg-error strings\n+\texplicit.\n+\t* g++.old-deja/g++.bugs/900213_02.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900215_02.C: Likewise.\n+\n 2009-12-16  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/42392"}, {"sha": "9b9ae994de91db13c2832f38e919dddc7a39a826", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900213_02.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900213_02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900213_02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900213_02.C?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -16,7 +16,7 @@ int struct0::*dmp;\n \n void global_function_0 ()\n {\n-  i = *dmp;\t\t\t// { dg-error \"\" } causes abort\n+  i = *dmp;\t\t\t// { dg-error \"invalid use of unary '\\\\\\*' on pointer to member\" } causes abort\n }\n \n int main () { return 0; }"}, {"sha": "3309c886384adf26c696d8ee81e3cf2a75bb67fd", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900215_02.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900215_02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900215_02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900215_02.C?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -41,8 +41,8 @@ void struct0::function_member ()\n   i = (this->*fmp) ();\t\t// perfectly legal - for both cfront and g++\n   i = this->*dmp;\t\t// perfectly legal - for both cfront and g++\n \n-  i = (*fmp) ();\t\t// { dg-error \"\" } \n-  i = *dmp;\t\t\t// { dg-error \"\" } \n+  i = (*fmp) ();\t\t// { dg-error \"invalid use of unary '\\\\\\*' on pointer to member\" } \n+  i = *dmp;\t\t\t// { dg-error \"invalid use of unary '\\\\\\*' on pointer to member\" } \n }\n \n int main () { return 0; }"}, {"sha": "8bc159b136ea744c9d80360c4b8b7ea2ee4d9e0b", "filename": "gcc/testsuite/g++.old-deja/g++.mike/net31.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd865ef6e85afae532e83f05cf3126a23cb81ba5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet31.C?ref=dd865ef6e85afae532e83f05cf3126a23cb81ba5", "patch": "@@ -40,7 +40,7 @@ foo_b& foo_c<TP>::bug_func(int x) {\n         static foo_b retval(m);\n         retval.bar_a(m);\n         for (register int i = 0; i < m; i++)\n-\t  retval(i) = (*(operator()(i)))(x);\t\t// { dg-error \"\" } \n+\t  retval(i) = (*(operator()(i)))(x);\t\t// { dg-error \"invalid use of unary '\\\\\\*'\" } \n         return retval;\n }\n "}]}