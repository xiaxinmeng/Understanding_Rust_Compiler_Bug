{"sha": "d724c876235c87b49603ec319ab3fbc4886a027f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcyNGM4NzYyMzVjODdiNDk2MDNlYzMxOWFiM2ZiYzQ4ODZhMDI3Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-10-06T07:47:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-10-06T07:47:28Z"}, "message": "re PR middle-end/45838 (FAIL: libgomp.c/pr34513.c execution test)\n\n\tPR middle-end/45838\n\t* omp-builtins.def (BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START,\n\tBUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START,\n\tBUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START,\n\tBUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START,\n\tBUILT_IN_GOMP_PARALLEL_START, BUILT_IN_GOMP_TASK,\n\tBUILT_IN_GOMP_PARALLEL_SECTIONS_START): Use\n\tRevert back to ATTR_NOTHROW_LIST instead of ATTR_NOTHROW_LEAF_LIST.\n\n\t* f95-lang.c (ATTR_NOTHROW_LEAF_LIST, ATTR_CONST_NOTHROW_LEAF_LIST,\n\tATTR_NOTHROW_LIST, ATTR_CONST_NOTHROW_LIST): Define.\n\t(gfc_define_builtin): Change last argument to int bitmask from bool,\n\tcontrol addition of TREE_NOTHROW and leaf attribute as well.\n\t(DO_DEFINE_MATH_BUILTIN): Adjust callers.\n\t(gfc_init_builtin_functions): Likewise.  Remove\n\tATTR_{,CONST_}NOTHROW_LIST enum.\n\nFrom-SVN: r165012", "tree": {"sha": "e6c82edb47126c03a51182f6fb2ce5b25a2bad3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6c82edb47126c03a51182f6fb2ce5b25a2bad3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d724c876235c87b49603ec319ab3fbc4886a027f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d724c876235c87b49603ec319ab3fbc4886a027f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d724c876235c87b49603ec319ab3fbc4886a027f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d724c876235c87b49603ec319ab3fbc4886a027f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44ee3dea99d3bffe87e0d07fbd8273b7b3276a1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44ee3dea99d3bffe87e0d07fbd8273b7b3276a1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44ee3dea99d3bffe87e0d07fbd8273b7b3276a1e"}], "stats": {"total": 236, "additions": 136, "deletions": 100}, "files": [{"sha": "a97c5a00f691b5e98b94300e9c9281a79e74d222", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d724c876235c87b49603ec319ab3fbc4886a027f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d724c876235c87b49603ec319ab3fbc4886a027f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d724c876235c87b49603ec319ab3fbc4886a027f", "patch": "@@ -1,3 +1,14 @@\n+2010-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/45838\n+\t* omp-builtins.def (BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START,\n+\tBUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START,\n+\tBUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START,\n+\tBUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START,\n+\tBUILT_IN_GOMP_PARALLEL_START, BUILT_IN_GOMP_TASK,\n+\tBUILT_IN_GOMP_PARALLEL_SECTIONS_START): Use\n+\tRevert back to ATTR_NOTHROW_LIST instead of ATTR_NOTHROW_LEAF_LIST.\n+\n 2010-10-05  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/m68hc11/m68hc11.h (CLASS_LIKELY_SPILLED_P): Remove."}, {"sha": "485aebb6cca8ec28dd6a84a13422fa9c4ccc2529", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d724c876235c87b49603ec319ab3fbc4886a027f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d724c876235c87b49603ec319ab3fbc4886a027f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d724c876235c87b49603ec319ab3fbc4886a027f", "patch": "@@ -1,3 +1,14 @@\n+2010-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/45838\n+\t* f95-lang.c (ATTR_NOTHROW_LEAF_LIST, ATTR_CONST_NOTHROW_LEAF_LIST,\n+\tATTR_NOTHROW_LIST, ATTR_CONST_NOTHROW_LIST): Define.\n+\t(gfc_define_builtin): Change last argument to int bitmask from bool,\n+\tcontrol addition of TREE_NOTHROW and leaf attribute as well.\n+\t(DO_DEFINE_MATH_BUILTIN): Adjust callers.\n+\t(gfc_init_builtin_functions): Likewise.  Remove\n+\tATTR_{,CONST_}NOTHROW_LIST enum.\n+\n 2010-10-04  Andi Kleen <ak@linux.intel.com>\n \n \t* Make-lang.in (gfortran, f951): Add + to build rule."}, {"sha": "f20e42211ee36ce02d5f7a499abb4ceb82d72030", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 106, "deletions": 92, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d724c876235c87b49603ec319ab3fbc4886a027f/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d724c876235c87b49603ec319ab3fbc4886a027f/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=d724c876235c87b49603ec319ab3fbc4886a027f", "patch": "@@ -631,23 +631,27 @@ gfc_builtin_function (tree decl)\n   return decl;\n }\n \n+/* So far we need just these 4 attribute types.  */\n+#define ATTR_NOTHROW_LEAF_LIST\t\t(ECF_NOTHROW | ECF_LEAF)\n+#define ATTR_CONST_NOTHROW_LEAF_LIST\t(ECF_NOTHROW | ECF_LEAF | ECF_CONST)\n+#define ATTR_NOTHROW_LIST\t\t(ECF_NOTHROW)\n+#define ATTR_CONST_NOTHROW_LIST\t\t(ECF_NOTHROW | ECF_CONST)\n \n static void\n-gfc_define_builtin (const char *name,\n-\t\t    tree type,\n-\t\t    int code,\n-\t\t    const char *library_name,\n-\t\t    bool const_p)\n+gfc_define_builtin (const char *name, tree type, int code,\n+\t\t    const char *library_name, int attr)\n {\n   tree decl;\n \n   decl = add_builtin_function (name, type, code, BUILT_IN_NORMAL,\n \t\t\t       library_name, NULL_TREE);\n-  if (const_p)\n+  if (attr & ECF_CONST)\n     TREE_READONLY (decl) = 1;\n-  TREE_NOTHROW (decl) = 1;\n-  DECL_ATTRIBUTES (decl) = tree_cons (get_identifier (\"leaf\"),\n-\t\t\t\t      NULL, DECL_ATTRIBUTES (decl));\n+  if (attr & ECF_NOTHROW)\n+    TREE_NOTHROW (decl) = 1;\n+  if (attr & ECF_LEAF)\n+    DECL_ATTRIBUTES (decl) = tree_cons (get_identifier (\"leaf\"),\n+\t\t\t\t\tNULL, DECL_ATTRIBUTES (decl));\n \n   built_in_decls[code] = decl;\n   implicit_built_in_decls[code] = decl;\n@@ -656,11 +660,14 @@ gfc_define_builtin (const char *name,\n \n #define DO_DEFINE_MATH_BUILTIN(code, name, argtype, tbase) \\\n     gfc_define_builtin (\"__builtin_\" name \"l\", tbase##longdouble[argtype], \\\n-                       BUILT_IN_ ## code ## L, name \"l\", true); \\\n+\t\t\tBUILT_IN_ ## code ## L, name \"l\", \\\n+\t\t\tATTR_CONST_NOTHROW_LEAF_LIST); \\\n     gfc_define_builtin (\"__builtin_\" name, tbase##double[argtype], \\\n-\t\t\tBUILT_IN_ ## code, name, true); \\\n+\t\t\tBUILT_IN_ ## code, name, \\\n+\t\t\tATTR_CONST_NOTHROW_LEAF_LIST); \\\n     gfc_define_builtin (\"__builtin_\" name \"f\", tbase##float[argtype], \\\n-\t\t\tBUILT_IN_ ## code ## F, name \"f\", true);\n+\t\t\tBUILT_IN_ ## code ## F, name \"f\", \\\n+\t\t\tATTR_CONST_NOTHROW_LEAF_LIST);\n \n #define DEFINE_MATH_BUILTIN(code, name, argtype) \\\n     DO_DEFINE_MATH_BUILTIN (code, name, argtype, mfunc_)\n@@ -735,12 +742,6 @@ gfc_init_builtin_functions (void)\n     BT_LAST\n   };\n   typedef enum builtin_type builtin_type;\n-  enum\n-  {\n-    /* So far we need just these 2 attribute types.  */\n-    ATTR_NOTHROW_LEAF_LIST,\n-    ATTR_CONST_NOTHROW_LEAF_LIST\n-  };\n \n   tree mfunc_float[6];\n   tree mfunc_double[6];\n@@ -804,207 +805,219 @@ gfc_init_builtin_functions (void)\n #include \"mathbuiltins.def\"\n \n   gfc_define_builtin (\"__builtin_roundl\", mfunc_longdouble[0], \n-\t\t      BUILT_IN_ROUNDL, \"roundl\", true);\n+\t\t      BUILT_IN_ROUNDL, \"roundl\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_round\", mfunc_double[0], \n-\t\t      BUILT_IN_ROUND, \"round\", true);\n+\t\t      BUILT_IN_ROUND, \"round\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_roundf\", mfunc_float[0], \n-\t\t      BUILT_IN_ROUNDF, \"roundf\", true);\n+\t\t      BUILT_IN_ROUNDF, \"roundf\", ATTR_CONST_NOTHROW_LEAF_LIST);\n \n   gfc_define_builtin (\"__builtin_truncl\", mfunc_longdouble[0],\n-\t\t      BUILT_IN_TRUNCL, \"truncl\", true);\n+\t\t      BUILT_IN_TRUNCL, \"truncl\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_trunc\", mfunc_double[0],\n-                      BUILT_IN_TRUNC, \"trunc\", true);\n+\t\t      BUILT_IN_TRUNC, \"trunc\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_truncf\", mfunc_float[0],\n-                      BUILT_IN_TRUNCF, \"truncf\", true);\n+\t\t      BUILT_IN_TRUNCF, \"truncf\", ATTR_CONST_NOTHROW_LEAF_LIST);\n \n   gfc_define_builtin (\"__builtin_cabsl\", func_clongdouble_longdouble, \n-\t\t      BUILT_IN_CABSL, \"cabsl\", true);\n+\t\t      BUILT_IN_CABSL, \"cabsl\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_cabs\", func_cdouble_double, \n-\t\t      BUILT_IN_CABS, \"cabs\", true);\n+\t\t      BUILT_IN_CABS, \"cabs\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_cabsf\", func_cfloat_float, \n-\t\t      BUILT_IN_CABSF, \"cabsf\", true);\n+\t\t      BUILT_IN_CABSF, \"cabsf\", ATTR_CONST_NOTHROW_LEAF_LIST);\n  \n   gfc_define_builtin (\"__builtin_copysignl\", mfunc_longdouble[1], \n-\t\t      BUILT_IN_COPYSIGNL, \"copysignl\", true);\n+\t\t      BUILT_IN_COPYSIGNL, \"copysignl\",\n+\t\t      ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_copysign\", mfunc_double[1], \n-\t\t      BUILT_IN_COPYSIGN, \"copysign\", true);\n+\t\t      BUILT_IN_COPYSIGN, \"copysign\",\n+\t\t      ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_copysignf\", mfunc_float[1], \n-\t\t      BUILT_IN_COPYSIGNF, \"copysignf\", true);\n+\t\t      BUILT_IN_COPYSIGNF, \"copysignf\",\n+\t\t      ATTR_CONST_NOTHROW_LEAF_LIST);\n  \n   gfc_define_builtin (\"__builtin_nextafterl\", mfunc_longdouble[1], \n-\t\t      BUILT_IN_NEXTAFTERL, \"nextafterl\", true);\n+\t\t      BUILT_IN_NEXTAFTERL, \"nextafterl\",\n+\t\t      ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_nextafter\", mfunc_double[1], \n-\t\t      BUILT_IN_NEXTAFTER, \"nextafter\", true);\n+\t\t      BUILT_IN_NEXTAFTER, \"nextafter\",\n+\t\t      ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_nextafterf\", mfunc_float[1], \n-\t\t      BUILT_IN_NEXTAFTERF, \"nextafterf\", true);\n+\t\t      BUILT_IN_NEXTAFTERF, \"nextafterf\",\n+\t\t      ATTR_CONST_NOTHROW_LEAF_LIST);\n  \n   gfc_define_builtin (\"__builtin_frexpl\", mfunc_longdouble[4], \n-\t\t      BUILT_IN_FREXPL, \"frexpl\", false);\n+\t\t      BUILT_IN_FREXPL, \"frexpl\", ATTR_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_frexp\", mfunc_double[4], \n-\t\t      BUILT_IN_FREXP, \"frexp\", false);\n+\t\t      BUILT_IN_FREXP, \"frexp\", ATTR_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_frexpf\", mfunc_float[4], \n-\t\t      BUILT_IN_FREXPF, \"frexpf\", false);\n+\t\t      BUILT_IN_FREXPF, \"frexpf\", ATTR_NOTHROW_LEAF_LIST);\n  \n   gfc_define_builtin (\"__builtin_fabsl\", mfunc_longdouble[0], \n-\t\t      BUILT_IN_FABSL, \"fabsl\", true);\n+\t\t      BUILT_IN_FABSL, \"fabsl\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_fabs\", mfunc_double[0], \n-\t\t      BUILT_IN_FABS, \"fabs\", true);\n+\t\t      BUILT_IN_FABS, \"fabs\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_fabsf\", mfunc_float[0], \n-\t\t      BUILT_IN_FABSF, \"fabsf\", true);\n+\t\t      BUILT_IN_FABSF, \"fabsf\", ATTR_CONST_NOTHROW_LEAF_LIST);\n  \n   gfc_define_builtin (\"__builtin_scalbnl\", mfunc_longdouble[5], \n-\t\t      BUILT_IN_SCALBNL, \"scalbnl\", true);\n+\t\t      BUILT_IN_SCALBNL, \"scalbnl\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_scalbn\", mfunc_double[5], \n-\t\t      BUILT_IN_SCALBN, \"scalbn\", true);\n+\t\t      BUILT_IN_SCALBN, \"scalbn\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_scalbnf\", mfunc_float[5], \n-\t\t      BUILT_IN_SCALBNF, \"scalbnf\", true);\n+\t\t      BUILT_IN_SCALBNF, \"scalbnf\", ATTR_CONST_NOTHROW_LEAF_LIST);\n  \n   gfc_define_builtin (\"__builtin_fmodl\", mfunc_longdouble[1], \n-\t\t      BUILT_IN_FMODL, \"fmodl\", true);\n+\t\t      BUILT_IN_FMODL, \"fmodl\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_fmod\", mfunc_double[1], \n-\t\t      BUILT_IN_FMOD, \"fmod\", true);\n+\t\t      BUILT_IN_FMOD, \"fmod\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_fmodf\", mfunc_float[1], \n-\t\t      BUILT_IN_FMODF, \"fmodf\", true);\n+\t\t      BUILT_IN_FMODF, \"fmodf\", ATTR_CONST_NOTHROW_LEAF_LIST);\n \n   /* lround{f,,l} and llround{f,,l} */\n   ftype = build_function_type_list (long_integer_type_node,\n                                     float_type_node, NULL_TREE); \n   gfc_define_builtin (\"__builtin_lroundf\", ftype, BUILT_IN_LROUNDF,\n-\t\t      \"lroundf\", true);\n+\t\t      \"lroundf\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   ftype = build_function_type_list (long_long_integer_type_node,\n                                     float_type_node, NULL_TREE); \n   gfc_define_builtin (\"__builtin_llroundf\", ftype, BUILT_IN_LLROUNDF,\n-\t\t      \"llroundf\", true);\n+\t\t      \"llroundf\", ATTR_CONST_NOTHROW_LEAF_LIST);\n \n   ftype = build_function_type_list (long_integer_type_node,\n                                     double_type_node, NULL_TREE); \n   gfc_define_builtin (\"__builtin_lround\", ftype, BUILT_IN_LROUND,\n-\t\t      \"lround\", true);\n+\t\t      \"lround\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   ftype = build_function_type_list (long_long_integer_type_node,\n                                     double_type_node, NULL_TREE); \n   gfc_define_builtin (\"__builtin_llround\", ftype, BUILT_IN_LLROUND,\n-\t\t      \"llround\", true);\n+\t\t      \"llround\", ATTR_CONST_NOTHROW_LEAF_LIST);\n \n   ftype = build_function_type_list (long_integer_type_node,\n                                     long_double_type_node, NULL_TREE); \n   gfc_define_builtin (\"__builtin_lroundl\", ftype, BUILT_IN_LROUNDL,\n-\t\t      \"lroundl\", true);\n+\t\t      \"lroundl\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   ftype = build_function_type_list (long_long_integer_type_node,\n                                     long_double_type_node, NULL_TREE); \n   gfc_define_builtin (\"__builtin_llroundl\", ftype, BUILT_IN_LLROUNDL,\n-\t\t      \"llroundl\", true);\n+\t\t      \"llroundl\", ATTR_CONST_NOTHROW_LEAF_LIST);\n \n   /* These are used to implement the ** operator.  */\n   gfc_define_builtin (\"__builtin_powl\", mfunc_longdouble[1], \n-\t\t      BUILT_IN_POWL, \"powl\", true);\n+\t\t      BUILT_IN_POWL, \"powl\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_pow\", mfunc_double[1], \n-\t\t      BUILT_IN_POW, \"pow\", true);\n+\t\t      BUILT_IN_POW, \"pow\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_powf\", mfunc_float[1], \n-\t\t      BUILT_IN_POWF, \"powf\", true);\n+\t\t      BUILT_IN_POWF, \"powf\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_cpowl\", mfunc_clongdouble[1], \n-\t\t      BUILT_IN_CPOWL, \"cpowl\", true);\n+\t\t      BUILT_IN_CPOWL, \"cpowl\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_cpow\", mfunc_cdouble[1], \n-\t\t      BUILT_IN_CPOW, \"cpow\", true);\n+\t\t      BUILT_IN_CPOW, \"cpow\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_cpowf\", mfunc_cfloat[1], \n-\t\t      BUILT_IN_CPOWF, \"cpowf\", true);\n+\t\t      BUILT_IN_CPOWF, \"cpowf\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_powil\", mfunc_longdouble[2], \n-\t\t      BUILT_IN_POWIL, \"powil\", true);\n+\t\t      BUILT_IN_POWIL, \"powil\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_powi\", mfunc_double[2], \n-\t\t      BUILT_IN_POWI, \"powi\", true);\n+\t\t      BUILT_IN_POWI, \"powi\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_powif\", mfunc_float[2], \n-\t\t      BUILT_IN_POWIF, \"powif\", true);\n+\t\t      BUILT_IN_POWIF, \"powif\", ATTR_CONST_NOTHROW_LEAF_LIST);\n \n \n   if (TARGET_C99_FUNCTIONS)\n     {\n       gfc_define_builtin (\"__builtin_cbrtl\", mfunc_longdouble[0],\n-\t\t\t  BUILT_IN_CBRTL, \"cbrtl\", true);\n+\t\t\t  BUILT_IN_CBRTL, \"cbrtl\",\n+\t\t\t  ATTR_CONST_NOTHROW_LEAF_LIST);\n       gfc_define_builtin (\"__builtin_cbrt\", mfunc_double[0],\n-\t\t\t  BUILT_IN_CBRT, \"cbrt\", true);\n+\t\t\t  BUILT_IN_CBRT, \"cbrt\",\n+\t\t\t  ATTR_CONST_NOTHROW_LEAF_LIST);\n       gfc_define_builtin (\"__builtin_cbrtf\", mfunc_float[0],\n-\t\t\t  BUILT_IN_CBRTF, \"cbrtf\", true);\n+\t\t\t  BUILT_IN_CBRTF, \"cbrtf\",\n+\t\t\t  ATTR_CONST_NOTHROW_LEAF_LIST);\n       gfc_define_builtin (\"__builtin_cexpil\", func_longdouble_clongdouble, \n-\t\t          BUILT_IN_CEXPIL, \"cexpil\", true);\n+\t\t\t  BUILT_IN_CEXPIL, \"cexpil\",\n+\t\t\t  ATTR_CONST_NOTHROW_LEAF_LIST);\n       gfc_define_builtin (\"__builtin_cexpi\", func_double_cdouble,\n-\t\t          BUILT_IN_CEXPI, \"cexpi\", true);\n+\t\t\t  BUILT_IN_CEXPI, \"cexpi\",\n+\t\t\t  ATTR_CONST_NOTHROW_LEAF_LIST);\n       gfc_define_builtin (\"__builtin_cexpif\", func_float_cfloat,\n-\t\t          BUILT_IN_CEXPIF, \"cexpif\", true);\n+\t\t\t  BUILT_IN_CEXPIF, \"cexpif\",\n+\t\t\t  ATTR_CONST_NOTHROW_LEAF_LIST);\n     }\n \n   if (TARGET_HAS_SINCOS)\n     {\n       gfc_define_builtin (\"__builtin_sincosl\",\n \t\t\t  func_longdouble_longdoublep_longdoublep,\n-\t\t          BUILT_IN_SINCOSL, \"sincosl\", false);\n+\t\t\t  BUILT_IN_SINCOSL, \"sincosl\", ATTR_NOTHROW_LEAF_LIST);\n       gfc_define_builtin (\"__builtin_sincos\", func_double_doublep_doublep,\n-\t\t          BUILT_IN_SINCOS, \"sincos\", false);\n+\t\t\t  BUILT_IN_SINCOS, \"sincos\", ATTR_NOTHROW_LEAF_LIST);\n       gfc_define_builtin (\"__builtin_sincosf\", func_float_floatp_floatp,\n-\t\t          BUILT_IN_SINCOSF, \"sincosf\", false);\n+\t\t\t  BUILT_IN_SINCOSF, \"sincosf\", ATTR_NOTHROW_LEAF_LIST);\n     }\n \n   /* For LEADZ, TRAILZ, POPCNT and POPPAR.  */\n   ftype = build_function_type_list (integer_type_node,\n                                     unsigned_type_node, NULL_TREE);\n   gfc_define_builtin (\"__builtin_clz\", ftype, BUILT_IN_CLZ,\n-\t\t      \"__builtin_clz\", true);\n+\t\t      \"__builtin_clz\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_ctz\", ftype, BUILT_IN_CTZ,\n-\t\t      \"__builtin_ctz\", true);\n+\t\t      \"__builtin_ctz\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_parity\", ftype, BUILT_IN_PARITY,\n-\t\t      \"__builtin_parity\", true);\n+\t\t      \"__builtin_parity\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_popcount\", ftype, BUILT_IN_POPCOUNT,\n-\t\t      \"__builtin_popcount\", true);\n+\t\t      \"__builtin_popcount\", ATTR_CONST_NOTHROW_LEAF_LIST);\n \n   ftype = build_function_type_list (integer_type_node,\n                                     long_unsigned_type_node, NULL_TREE);\n   gfc_define_builtin (\"__builtin_clzl\", ftype, BUILT_IN_CLZL,\n-\t\t      \"__builtin_clzl\", true);\n+\t\t      \"__builtin_clzl\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_ctzl\", ftype, BUILT_IN_CTZL,\n-\t\t      \"__builtin_ctzl\", true);\n+\t\t      \"__builtin_ctzl\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_parityl\", ftype, BUILT_IN_PARITYL,\n-\t\t      \"__builtin_parityl\", true);\n+\t\t      \"__builtin_parityl\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_popcountl\", ftype, BUILT_IN_POPCOUNTL,\n-\t\t      \"__builtin_popcountl\", true);\n+\t\t      \"__builtin_popcountl\", ATTR_CONST_NOTHROW_LEAF_LIST);\n \n   ftype = build_function_type_list (integer_type_node,\n                                     long_long_unsigned_type_node, NULL_TREE);\n   gfc_define_builtin (\"__builtin_clzll\", ftype, BUILT_IN_CLZLL,\n-\t\t      \"__builtin_clzll\", true);\n+\t\t      \"__builtin_clzll\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_ctzll\", ftype, BUILT_IN_CTZLL,\n-\t\t      \"__builtin_ctzll\", true);\n+\t\t      \"__builtin_ctzll\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_parityll\", ftype, BUILT_IN_PARITYLL,\n-\t\t      \"__builtin_parityll\", true);\n+\t\t      \"__builtin_parityll\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__builtin_popcountll\", ftype, BUILT_IN_POPCOUNTLL,\n-\t\t      \"__builtin_popcountll\", true);\n+\t\t      \"__builtin_popcountll\", ATTR_CONST_NOTHROW_LEAF_LIST);\n \n   /* Other builtin functions we use.  */\n \n   ftype = build_function_type_list (long_integer_type_node,\n                                     long_integer_type_node,\n                                     long_integer_type_node, NULL_TREE);\n   gfc_define_builtin (\"__builtin_expect\", ftype, BUILT_IN_EXPECT,\n-\t\t      \"__builtin_expect\", true);\n+\t\t      \"__builtin_expect\", ATTR_CONST_NOTHROW_LEAF_LIST);\n \n   ftype = build_function_type_list (void_type_node,\n                                     pvoid_type_node, NULL_TREE);\n   gfc_define_builtin (\"__builtin_free\", ftype, BUILT_IN_FREE,\n-\t\t      \"free\", false);\n+\t\t      \"free\", ATTR_NOTHROW_LEAF_LIST);\n \n   ftype = build_function_type_list (pvoid_type_node,\n                                     size_type_node, NULL_TREE);\n   gfc_define_builtin (\"__builtin_malloc\", ftype, BUILT_IN_MALLOC,\n-\t\t      \"malloc\", false);\n+\t\t      \"malloc\", ATTR_NOTHROW_LEAF_LIST);\n   DECL_IS_MALLOC (built_in_decls[BUILT_IN_MALLOC]) = 1;\n \n   ftype = build_function_type_list (pvoid_type_node,\n                                     size_type_node, pvoid_type_node,\n                                     NULL_TREE);\n   gfc_define_builtin (\"__builtin_realloc\", ftype, BUILT_IN_REALLOC,\n-\t\t      \"realloc\", false);\n+\t\t      \"realloc\", ATTR_NOTHROW_LEAF_LIST);\n \n   ftype = build_function_type_list (integer_type_node,\n                                     void_type_node, NULL_TREE);\n   gfc_define_builtin (\"__builtin_isnan\", ftype, BUILT_IN_ISNAN,\n-\t\t      \"__builtin_isnan\", true);\n+\t\t      \"__builtin_isnan\", ATTR_CONST_NOTHROW_LEAF_LIST);\n \n #define DEF_PRIMITIVE_TYPE(ENUM, VALUE) \\\n   builtin_types[(int) ENUM] = VALUE;\n@@ -1093,7 +1106,7 @@ gfc_init_builtin_functions (void)\n #undef DEF_SYNC_BUILTIN\n #define DEF_SYNC_BUILTIN(code, name, type, attr) \\\n     gfc_define_builtin (name, builtin_types[type], code, name, \\\n-\t\t\tattr == ATTR_CONST_NOTHROW_LEAF_LIST);\n+\t\t\tattr);\n #include \"../sync-builtins.def\"\n #undef DEF_SYNC_BUILTIN\n \n@@ -1102,22 +1115,23 @@ gfc_init_builtin_functions (void)\n #undef DEF_GOMP_BUILTIN\n #define DEF_GOMP_BUILTIN(code, name, type, attr) \\\n       gfc_define_builtin (\"__builtin_\" name, builtin_types[type], \\\n-\t\t\t  code, name, attr == ATTR_CONST_NOTHROW_LEAF_LIST);\n+\t\t\t  code, name, attr);\n #include \"../omp-builtins.def\"\n #undef DEF_GOMP_BUILTIN\n     }\n \n   gfc_define_builtin (\"__builtin_trap\", builtin_types[BT_FN_VOID],\n-\t\t      BUILT_IN_TRAP, NULL, false);\n+\t\t      BUILT_IN_TRAP, NULL, ATTR_NOTHROW_LEAF_LIST);\n   TREE_THIS_VOLATILE (built_in_decls[BUILT_IN_TRAP]) = 1;\n \n   gfc_define_builtin (\"__emutls_get_address\",\n-\t\t      builtin_types[BT_FN_PTR_PTR], BUILT_IN_EMUTLS_GET_ADDRESS,\n-\t\t      \"__emutls_get_address\", true);\n+\t\t      builtin_types[BT_FN_PTR_PTR],\n+\t\t      BUILT_IN_EMUTLS_GET_ADDRESS,\n+\t\t      \"__emutls_get_address\", ATTR_CONST_NOTHROW_LEAF_LIST);\n   gfc_define_builtin (\"__emutls_register_common\",\n \t\t      builtin_types[BT_FN_VOID_PTR_WORD_WORD_PTR],\n \t\t      BUILT_IN_EMUTLS_REGISTER_COMMON,\n-\t\t      \"__emutls_register_common\", false);\n+\t\t      \"__emutls_register_common\", ATTR_NOTHROW_LEAF_LIST);\n \n   build_common_builtin_nodes ();\n   targetm.init_builtins ();"}, {"sha": "125b76c44530408948b11f52645f44b3014faab2", "filename": "gcc/omp-builtins.def", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d724c876235c87b49603ec319ab3fbc4886a027f/gcc%2Fomp-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d724c876235c87b49603ec319ab3fbc4886a027f/gcc%2Fomp-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-builtins.def?ref=d724c876235c87b49603ec319ab3fbc4886a027f", "patch": "@@ -1,6 +1,6 @@\n /* This file contains the definitions and documentation for the\n    OpenMP builtins used in the GNU compiler.\n-   Copyright (C) 2005, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2008, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -160,19 +160,19 @@ DEF_GOMP_BUILTIN (BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT,\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START,\n \t\t  \"GOMP_parallel_loop_static_start\",\n \t\t  BT_FN_VOID_OMPFN_PTR_UINT_LONG_LONG_LONG_LONG,\n-\t\t  ATTR_NOTHROW_LEAF_LIST)\n+\t\t  ATTR_NOTHROW_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START,\n \t\t  \"GOMP_parallel_loop_dynamic_start\",\n \t\t  BT_FN_VOID_OMPFN_PTR_UINT_LONG_LONG_LONG_LONG,\n-\t\t  ATTR_NOTHROW_LEAF_LIST)\n+\t\t  ATTR_NOTHROW_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START,\n \t\t  \"GOMP_parallel_loop_guided_start\",\n \t\t  BT_FN_VOID_OMPFN_PTR_UINT_LONG_LONG_LONG_LONG,\n-\t\t  ATTR_NOTHROW_LEAF_LIST)\n+\t\t  ATTR_NOTHROW_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START,\n \t\t  \"GOMP_parallel_loop_runtime_start\",\n \t\t  BT_FN_VOID_OMPFN_PTR_UINT_LONG_LONG_LONG,\n-\t\t  ATTR_NOTHROW_LEAF_LIST)\n+\t\t  ATTR_NOTHROW_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_LOOP_END, \"GOMP_loop_end\",\n \t\t  BT_FN_VOID, ATTR_NOTHROW_LEAF_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_LOOP_END_NOWAIT, \"GOMP_loop_end_nowait\",\n@@ -182,19 +182,19 @@ DEF_GOMP_BUILTIN (BUILT_IN_GOMP_ORDERED_START, \"GOMP_ordered_start\",\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_ORDERED_END, \"GOMP_ordered_end\",\n \t\t  BT_FN_VOID, ATTR_NOTHROW_LEAF_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_PARALLEL_START, \"GOMP_parallel_start\",\n-\t\t  BT_FN_VOID_OMPFN_PTR_UINT, ATTR_NOTHROW_LEAF_LIST)\n+\t\t  BT_FN_VOID_OMPFN_PTR_UINT, ATTR_NOTHROW_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_PARALLEL_END, \"GOMP_parallel_end\",\n \t\t  BT_FN_VOID, ATTR_NOTHROW_LEAF_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_TASK, \"GOMP_task\",\n \t\t  BT_FN_VOID_OMPFN_PTR_OMPCPYFN_LONG_LONG_BOOL_UINT,\n-\t\t  ATTR_NOTHROW_LEAF_LIST)\n+\t\t  ATTR_NOTHROW_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_SECTIONS_START, \"GOMP_sections_start\",\n \t\t  BT_FN_UINT_UINT, ATTR_NOTHROW_LEAF_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_SECTIONS_NEXT, \"GOMP_sections_next\",\n \t\t  BT_FN_UINT, ATTR_NOTHROW_LEAF_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_PARALLEL_SECTIONS_START,\n \t\t  \"GOMP_parallel_sections_start\",\n-\t\t  BT_FN_VOID_OMPFN_PTR_UINT_UINT, ATTR_NOTHROW_LEAF_LIST)\n+\t\t  BT_FN_VOID_OMPFN_PTR_UINT_UINT, ATTR_NOTHROW_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_SECTIONS_END, \"GOMP_sections_end\",\n \t\t  BT_FN_VOID, ATTR_NOTHROW_LEAF_LIST)\n DEF_GOMP_BUILTIN (BUILT_IN_GOMP_SECTIONS_END_NOWAIT,"}]}