{"sha": "f97d9ec3779fba07c222b4241da011afb1664a24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk3ZDllYzM3NzlmYmEwN2MyMjJiNDI0MWRhMDExYWZiMTY2NGEyNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@freesoft.cz", "date": "1999-11-19T20:27:08Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "1999-11-19T20:27:08Z"}, "message": "i386.md (extend?f?f): Split to expander and pattern, refuse two memory operands in patterns.\n\n\n\t* i386.md (extend?f?f): Split to expander and pattern, refuse two\n\tmemory operands in patterns.\n\t(fop*): Refuse two memory operands.\n\nFrom-SVN: r30593", "tree": {"sha": "3c478c1a1a0e592ec2139f42cafb7cf56b149b65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c478c1a1a0e592ec2139f42cafb7cf56b149b65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f97d9ec3779fba07c222b4241da011afb1664a24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f97d9ec3779fba07c222b4241da011afb1664a24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f97d9ec3779fba07c222b4241da011afb1664a24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f97d9ec3779fba07c222b4241da011afb1664a24/comments", "author": null, "committer": null, "parents": [{"sha": "c37d59c3e785b3fede4262748dcd92a3611f25d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37d59c3e785b3fede4262748dcd92a3611f25d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c37d59c3e785b3fede4262748dcd92a3611f25d3"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "663be335a8412559221f67365d3f96c681a4dd82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f97d9ec3779fba07c222b4241da011afb1664a24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f97d9ec3779fba07c222b4241da011afb1664a24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f97d9ec3779fba07c222b4241da011afb1664a24", "patch": "@@ -1,5 +1,9 @@\n Fri Nov 19 06:32:19 CET 1999  Jan Hubicka  <hubicka@freesoft.cz>\n \n+\t* i386.md (extend?f?f): Split to expander and pattern, refuse two\n+\tmemory operands in patterns.\n+\t(fop*): Refuse two memory operands.\n+\n \t* i386.md (ashrsi3_31): Allow cltd when optimizing for size even\n \ton !TARGET_USE_CLTD CPUs.\n "}, {"sha": "8567cd54ed2a9a0e00fa5ffd16e8733f9a4c7e18", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f97d9ec3779fba07c222b4241da011afb1664a24/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f97d9ec3779fba07c222b4241da011afb1664a24/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f97d9ec3779fba07c222b4241da011afb1664a24", "patch": "@@ -2419,10 +2419,21 @@\n   [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -12)))\n    (set (mem:DF (reg:SI 7)) (float_extend:XF (match_dup 1)))])\n \n-(define_insn \"extendsfdf2\"\n+(define_expand \"extendsfdf2\"\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n+        (float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_80387\"\n+  \"\n+{\n+  if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n+    operands[0] = force_reg (DFmode, operands[0]);\n+}\")\n+\n+(define_insn \"*extendsfdf2_1\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,m\")\n         (float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"*\n {\n   switch (which_alternative)\n@@ -2449,10 +2460,21 @@\n }\"\n   [(set_attr \"type\" \"fmov\")])\n \n-(define_insn \"extendsfxf2\"\n+(define_expand \"extendsfxf2\"\n+  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n+        (float_extend:XF (match_operand:SF 1 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_80387\"\n+  \"\n+{\n+  if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n+    operands[0] = force_reg (XFmode, operands[0]);\n+}\")\n+\n+(define_insn \"*extendsfxf2_1\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m\")\n         (float_extend:XF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"*\n {\n   switch (which_alternative)\n@@ -2480,10 +2502,21 @@\n }\"\n   [(set_attr \"type\" \"fmov\")])\n \n-(define_insn \"extenddfxf2\"\n+(define_expand \"extenddfxf2\"\n+  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n+        (float_extend:XF (match_operand:DF 1 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_80387\"\n+  \"\n+{\n+  if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n+    operands[0] = force_reg (XFmode, operands[0]);\n+}\")\n+\n+(define_insn \"*extenddfxf2_1\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m\")\n         (float_extend:XF (match_operand:DF 1 \"nonimmediate_operand\" \"fm,f\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"*\n {\n   switch (which_alternative)\n@@ -6826,7 +6859,8 @@\n \t(match_operator:SF 3 \"binary_fp_operator\"\n \t\t\t[(match_operand:SF 1 \"nonimmediate_operand\" \"0,fm\")\n \t\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"fm,0\")]))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:SF 3 \"mult_operator\" \"\") \n@@ -6875,7 +6909,8 @@\n \t(match_operator:DF 3 \"binary_fp_operator\"\n \t\t\t[(match_operand:DF 1 \"nonimmediate_operand\" \"0,fm\")\n \t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"fm,0\")]))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:DF 3 \"mult_operator\" \"\") \n@@ -6924,7 +6959,8 @@\n \t(match_operator:DF 3 \"binary_fp_operator\"\n \t   [(float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,0\"))\n \t    (match_operand:DF 2 \"register_operand\" \"0,f\")]))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387\n+   && (GET_CODE (operands[1]) != MEM || GET_CODE (operands[2]) != MEM)\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:DF 3 \"mult_operator\" \"\") "}]}