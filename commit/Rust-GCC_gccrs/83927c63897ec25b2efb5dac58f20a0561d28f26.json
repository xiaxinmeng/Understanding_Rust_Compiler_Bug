{"sha": "83927c63897ec25b2efb5dac58f20a0561d28f26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM5MjdjNjM4OTdlYzI1YjJlZmI1ZGFjNThmMjBhMDU2MWQyOGYyNg==", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2020-04-07T18:39:53Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-10-15T03:07:16Z"}, "message": "Enable Intel HRESET Instruction\n\ngcc/\n\n\t* common/config/i386/cpuinfo.h (get_available_features):\n\tDetect HRESET.\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA2_HRESET_SET,\n\tOPTION_MASK_ISA2_HRESET_UNSET): New macros.\n\t(ix86_handle_option): Handle -mhreset.\n\t* common/config/i386/i386-cpuinfo.h (enum processor_features):\n\tAdd FEATURE_HRESET.\n\t* common/config/i386/i386-isas.h: Add ISA_NAMES_TABLE_ENTRY\n\tfor hreset.\n\t* config.gcc: Add hresetintrin.h\n\t* config/i386/hresetintrin.h: New header file.\n\t* config/i386/x86gprintrin.h: Include hresetintrin.h.\n\t* config/i386/cpuid.h (bit_HRESET): New.\n\t* config/i386/i386-builtin.def: Add new builtin.\n\t* config/i386/i386-expand.c (ix86_expand_builtin):\n\tHandle new builtin.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n\t__HRESET__.\n\t* config/i386/i386-options.c (isa2_opts): Add -mhreset.\n\t(ix86_valid_target_attribute_inner_p): Handle hreset.\n\t* config/i386/i386.h (TARGET_HRESET, TARGET_HRESET_P,\n\tPTA_HRESET): New.\n\t(PTA_ALDERLAKE): Add PTA_HRESET.\n\t* config/i386/i386.opt: Add option -mhreset.\n\t* config/i386/i386.md (UNSPECV_HRESET): New unspec.\n\t(hreset): New define_insn.\n\t* doc/invoke.texi: Document -mhreset.\n\t* doc/extend.texi: Document hreset.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/hreset-1.c: New test.\n\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n\t* gcc.target/i386/x86gprintrin-1.c: Add -mhreset.\n\t* gcc.target/i386/x86gprintrin-2.c: Ditto.\n\t* gcc.target/i386/x86gprintrin-3.c: Ditto.\n\t* gcc.target/i386/x86gprintrin-4.c: Add mhreset.\n\t* gcc.target/i386/x86gprintrin-5.c: Ditto.", "tree": {"sha": "401fab74035eb564e3b00f8e6e78f7077f84b365", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/401fab74035eb564e3b00f8e6e78f7077f84b365"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83927c63897ec25b2efb5dac58f20a0561d28f26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83927c63897ec25b2efb5dac58f20a0561d28f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83927c63897ec25b2efb5dac58f20a0561d28f26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83927c63897ec25b2efb5dac58f20a0561d28f26/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "299a53d7979aaa639298b95bd46b69d3a8546f49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299a53d7979aaa639298b95bd46b69d3a8546f49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/299a53d7979aaa639298b95bd46b69d3a8546f49"}], "stats": {"total": 154, "additions": 140, "deletions": 14}, "files": [{"sha": "1e8324e49b64dc746c11e06330c085c5b5aa4260", "filename": "gcc/common/config/i386/cpuinfo.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -707,6 +707,9 @@ get_available_features (struct __processor_model *cpu_model,\n \t  __cpuid_count (7, 1, eax, ebx, ecx, edx);\n \t  if (eax & bit_AVX512BF16)\n \t    set_feature (FEATURE_AVX512BF16);\n+\t  if (eax & bit_HRESET)\n+\t    set_feature (FEATURE_HRESET);\n+\n \t}\n     }\n "}, {"sha": "bfdca8581c6ae1f0299ae37b529631464fc83460", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -164,6 +164,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_SERIALIZE_SET OPTION_MASK_ISA2_SERIALIZE\n #define OPTION_MASK_ISA2_TSXLDTRK_SET OPTION_MASK_ISA2_TSXLDTRK\n #define OPTION_MASK_ISA2_UINTR_SET OPTION_MASK_ISA2_UINTR\n+#define OPTION_MASK_ISA2_HRESET_SET OPTION_MASK_ISA2_HRESET\n \n /* Define a set of ISAs which aren't available when a given ISA is\n    disabled.  MMX and SSE ISAs are handled separately.  */\n@@ -256,6 +257,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_AMX_INT8_UNSET OPTION_MASK_ISA2_AMX_INT8\n #define OPTION_MASK_ISA2_AMX_BF16_UNSET OPTION_MASK_ISA2_AMX_BF16\n #define OPTION_MASK_ISA2_UINTR_UNSET OPTION_MASK_ISA2_UINTR\n+#define OPTION_MASK_ISA2_HRESET_UNSET OPTION_MASK_ISA2_HRESET\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -716,6 +718,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_UINTR_UNSET;\n \t}\n       return true;\n+    \n+    case OPT_mhreset:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_HRESET_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_HRESET_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_HRESET_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_HRESET_UNSET;\n+\t}\n+      return true;\n \n     case OPT_mavx5124fmaps:\n       if (value)"}, {"sha": "8c3f7821b9afa13228f2f5f08614e6a11b7e9083", "filename": "gcc/common/config/i386/i386-cpuinfo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -220,6 +220,7 @@ enum processor_features\n   FEATURE_AMX_INT8,\n   FEATURE_AMX_BF16,\n   FEATURE_UINTR,\n+  FEATURE_HRESET,\n   CPU_FEATURE_MAX\n };\n "}, {"sha": "888e325de9e3f4eb780ea6d76fc6f52eaad2a0e0", "filename": "gcc/common/config/i386/i386-isas.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -164,4 +164,5 @@ ISA_NAMES_TABLE_START\n   ISA_NAMES_TABLE_ENTRY(\"amx-int8\", FEATURE_AMX_INT8, P_NONE, \"-mamx-int8\")\n   ISA_NAMES_TABLE_ENTRY(\"amx-bf16\", FEATURE_AMX_BF16, P_NONE, \"-mamx-bf16\")\n   ISA_NAMES_TABLE_ENTRY(\"uintr\", FEATURE_UINTR, P_NONE, \"-muintr\")\n+  ISA_NAMES_TABLE_ENTRY(\"hreset\", FEATURE_HRESET, P_NONE, \"-mhreset\")\n ISA_NAMES_TABLE_END"}, {"sha": "b79c544c9fa4170aabfe521e57038a61d470b30b", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -413,7 +413,8 @@ i[34567]86-*-*)\n \t\t       avx512bf16intrin.h enqcmdintrin.h serializeintrin.h\n \t\t       avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\n \t\t       tsxldtrkintrin.h amxtileintrin.h amxint8intrin.h\n-\t\t       amxbf16intrin.h x86gprintrin.h uintrintrin.h\"\n+\t\t       amxbf16intrin.h x86gprintrin.h uintrintrin.h\n+\t\t       hresetintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -449,7 +450,8 @@ x86_64-*-*)\n \t\t       avx512bf16intrin.h enqcmdintrin.h serializeintrin.h\n \t\t       avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\n \t\t       tsxldtrkintrin.h amxtileintrin.h amxint8intrin.h\n-\t\t       amxbf16intrin.h x86gprintrin.h uintrintrin.h\"\n+\t\t       amxbf16intrin.h x86gprintrin.h uintrintrin.h\n+\t\t       hresetintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "22d284ea441acf12c0187d689993226502a46cb5", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -26,6 +26,7 @@\n \n /* %eax */\n #define bit_AVX512BF16\t(1 << 5)\n+#define bit_HRESET\t(1 << 22)\n \n /* %ecx */\n #define bit_SSE3\t(1 << 0)"}, {"sha": "bdbe253755ddb0300bc70f7446d78275a47fc039", "filename": "gcc/config/i386/hresetintrin.h", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig%2Fi386%2Fhresetintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig%2Fi386%2Fhresetintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fhresetintrin.h?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -0,0 +1,48 @@\n+/* Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _X86GPRINTRIN_H_INCLUDED\n+# error \"Never use <hresetintrin.h> directly; include <x86gprintrin.h> instead.\"\n+#endif\n+\n+#ifndef _HRESETINTRIN_H_INCLUDED\n+#define _HRESETINTRIN_H_INCLUDED\n+\n+#ifndef __HRESET__\n+#pragma GCC push_options\n+#pragma GCC target (\"hreset\")\n+#define __DISABLE_HRESET__\n+#endif /* __HRESET__ */\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_hreset (unsigned int __EAX)\n+{\n+  __builtin_ia32_hreset (__EAX);\n+}\n+\n+#ifdef __DISABLE_HRESET__\n+#undef __DISABLE_HRESET__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_HRESET__ */\n+#endif /* _HRESETINTRIN_H_INCLUDED.  */"}, {"sha": "882cba5dba561ebf023f44748df90079840f72c2", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -457,6 +457,9 @@ BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_UINTR, CODE_FOR_clui, \"__builtin_\n BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_UINTR, CODE_FOR_stui, \"__builtin_ia32_stui\", IX86_BUILTIN_STUI, UNKNOWN, (int) VOID_FTYPE_VOID)\n BDESC (OPTION_MASK_ISA_64BIT, OPTION_MASK_ISA2_UINTR, CODE_FOR_senduipi, \"__builtin_ia32_senduipi\", IX86_BUILTIN_SENDUIPI, UNKNOWN, (int) VOID_FTYPE_UINT64)\n \n+/* HRESET */\n+BDESC (0, OPTION_MASK_ISA2_HRESET, CODE_FOR_hreset, \"__builtin_ia32_hreset\", IX86_BUILTIN_HRESET, UNKNOWN, (int) VOID_FTYPE_UNSIGNED)\n+\n BDESC_END (SPECIAL_ARGS, ARGS)\n \n /* Builtins with variable number of arguments.  */"}, {"sha": "bbe9ac5ade1fa25bd838687013f97d9b4accd5d1", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -600,7 +600,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__MOVBE__\");\n   if (isa_flag2 & OPTION_MASK_ISA2_UINTR)\n     def_or_undef (parse_in, \"__UINTR__\");\n-\n+  if (isa_flag2 & OPTION_MASK_ISA2_HRESET)\n+    def_or_undef (parse_in, \"__HRESET__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "02d5ca5783d5f9da737204357709fabd86994bca", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -12825,6 +12825,14 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       emit_insn (gen_incssp (mode, op0));\n       return 0;\n \n+    case IX86_BUILTIN_HRESET:\n+      icode = CODE_FOR_hreset;\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      op0 = expand_normal (arg0);\n+      op0 = force_reg (SImode, op0);\n+      emit_insn (gen_hreset (op0));\n+      return 0;\n+\n     case IX86_BUILTIN_RSTORSSP:\n     case IX86_BUILTIN_CLRSSBSY:\n       arg0 = CALL_EXPR_ARG (exp, 0);"}, {"sha": "82c8091f7412c28aebe332513893a25573937650", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -213,7 +213,8 @@ static struct ix86_target_opts isa2_opts[] =\n   { \"-mamx-tile\",\tOPTION_MASK_ISA2_AMX_TILE },\n   { \"-mamx-int8\",\tOPTION_MASK_ISA2_AMX_INT8 },\n   { \"-mamx-bf16\",\tOPTION_MASK_ISA2_AMX_BF16 },\n-  { \"-muintr\",\t\tOPTION_MASK_ISA2_UINTR }\n+  { \"-muintr\",\t\tOPTION_MASK_ISA2_UINTR },\n+  { \"-mhreset\",\t\tOPTION_MASK_ISA2_HRESET }\n };\n static struct ix86_target_opts isa_opts[] =\n {\n@@ -1041,6 +1042,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"amx-tile\", OPT_mamx_tile),\n     IX86_ATTR_ISA (\"amx-int8\", OPT_mamx_int8),\n     IX86_ATTR_ISA (\"amx-bf16\", OPT_mamx_bf16),\n+    IX86_ATTR_ISA (\"hreset\", OPT_mhreset),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),"}, {"sha": "e8bde37645a51bc1c572c29382ed1752d2d12b07", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -211,6 +211,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_AMX_BF16_P(x) TARGET_ISA2_AMX_BF16(x)\n #define TARGET_UINTR\tTARGET_ISA2_UINTR\n #define TARGET_UINTR_P(x) TARGET_ISA2_UINTR_P(x)\n+#define TARGET_HRESET\t    TARGET_ISA2_HRESET\n+#define TARGET_HRESET_P(x)  TARGET_ISA2_HRESET_P(x)\n \n #define TARGET_LP64\tTARGET_ABI_64\n #define TARGET_LP64_P(x)\tTARGET_ABI_64_P(x)\n@@ -2478,6 +2480,7 @@ const wide_int_bitmask PTA_AMX_TILE(0, HOST_WIDE_INT_1U << 19);\n const wide_int_bitmask PTA_AMX_INT8(0, HOST_WIDE_INT_1U << 20);\n const wide_int_bitmask PTA_AMX_BF16(0, HOST_WIDE_INT_1U << 21);\n const wide_int_bitmask PTA_UINTR (0, HOST_WIDE_INT_1U << 22);\n+const wide_int_bitmask PTA_HRESET(0, HOST_WIDE_INT_1U << 23);\n \n const wide_int_bitmask PTA_X86_64_BASELINE = PTA_64BIT | PTA_MMX | PTA_SSE\n   | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR;\n@@ -2524,7 +2527,7 @@ const wide_int_bitmask PTA_SAPPHIRERAPIDS = PTA_COOPERLAKE | PTA_MOVDIRI\n   | PTA_PTWRITE | PTA_WAITPKG | PTA_SERIALIZE | PTA_TSXLDTRK | PTA_AMX_TILE\n   | PTA_AMX_INT8 | PTA_AMX_BF16 | PTA_UINTR;\n const wide_int_bitmask PTA_ALDERLAKE = PTA_SKYLAKE | PTA_CLDEMOTE | PTA_PTWRITE\n-  | PTA_WAITPKG | PTA_SERIALIZE;\n+  | PTA_WAITPKG | PTA_SERIALIZE | PTA_HRESET;\n const wide_int_bitmask PTA_KNL = PTA_BROADWELL | PTA_AVX512PF | PTA_AVX512ER\n   | PTA_AVX512F | PTA_AVX512CD;\n const wide_int_bitmask PTA_BONNELL = PTA_CORE2 | PTA_MOVBE;"}, {"sha": "87308165f70d2abc28636ea01e3cf5c010c7ebb1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -316,6 +316,9 @@\n \n   ;; For patchable area support\n   UNSPECV_PATCHABLE_AREA\n+\n+  ;; For HRESET support\n+  UNSPECV_HRESET\n ])\n \n ;; Constants to represent rounding modes in the ROUND instruction\n@@ -21703,6 +21706,14 @@\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"modrm\" \"0\")])\n \n+(define_insn \"hreset\"\n+  [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"a\")]\n+\t\t     UNSPECV_HRESET)]\n+  \"TARGET_HRESET\"\n+  \"hreset\\t{$0|0}\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"4\")])\n+\n (include \"mmx.md\")\n (include \"sse.md\")\n (include \"sync.md\")"}, {"sha": "e6b1695febb708a8f0ca05d7a5e24aec6a118a39", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -1131,3 +1131,7 @@ Support AMX-INT8 built-in functions and code generation.\n mamx-bf16\n Target Report Mask(ISA2_AMX_BF16) Var(ix86_isa_flags2) Save\n Support AMX-BF16 built-in functions and code generation.\n+\n+mhreset\n+Target Report Mask(ISA2_HRESET) Var(ix86_isa_flags2) Save\n+Support HRESET built-in functions and code generation."}, {"sha": "ffe07e4519bbd3e0752520edce7ce242386d061e", "filename": "gcc/config/i386/x86gprintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -92,6 +92,8 @@\n \n #include <xtestintrin.h>\n \n+#include <hresetintrin.h>\n+\n extern __inline void\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _wbinvd (void)"}, {"sha": "62549b02452320cf2d7e942019985b9916c11665", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -6643,6 +6643,11 @@ Enable/disable the generation of the AMX-BF16 instructions.\n @cindex @code{target(\"uintr\")} function attribute, x86\n Enable/disable the generation of the UINTR instructions.\n \n+@item hreset\n+@itemx no-hreset\n+@cindex @code{target(\"hreset\")} function attribute, x86\n+Enable/disable the generation of the HRESET instruction.\n+\n @item cld\n @itemx no-cld\n @cindex @code{target(\"cld\")} function attribute, x86"}, {"sha": "b997c5123a7d96c0b42e28807a4e48fe689c470c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -1364,7 +1364,7 @@ See RS/6000 and PowerPC Options.\n -mvpclmulqdq  -mavx512bitalg  -mmovdiri  -mmovdir64b  -mavx512vpopcntdq @gol\n -mavx5124fmaps  -mavx512vnni  -mavx5124vnniw  -mprfchw  -mrdpid @gol\n -mrdseed  -msgx -mavx512vp2intersect -mserialize -mtsxldtrk@gol\n--mamx-tile  -mamx-int8  -mamx-bf16 -muintr@gol\n+-mamx-tile  -mamx-int8  -mamx-bf16 -muintr -mhreset@gol\n -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mmemcpy-strategy=@var{strategy}  -mmemset-strategy=@var{strategy} @gol\n@@ -30294,6 +30294,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @itemx -mamx-bf16\n @opindex mamx-bf16\n+@need 200\n+@itemx -mhreset\n+@opindex mhreset\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4, SSE4A, SSE4.1, SSE4.2, AVX, AVX2, AVX512F, AVX512PF,\n AVX512ER, AVX512CD, AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, SHA,\n@@ -30303,7 +30306,7 @@ WBNOINVD, FMA4, PREFETCHW, RDPID, PREFETCHWT1, RDSEED, SGX, XOP, LWP,\n XSAVEOPT, XSAVEC, XSAVES, RTM, HLE, TBM, MWAITX, CLZERO, PKU, AVX512VBMI2,\n GFNI, VAES, WAITPKG, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B, AVX512BF16,\n ENQCMD, AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, SERIALIZE,\n-UINTR or CLDEMOTE extended instruction sets.  Each has a corresponding\n+UINTR, HRESET or CLDEMOTE extended instruction sets.  Each has a corresponding\n @option{-mno-} option to disable use of these instructions.\n \n These extensions are also available as built-in functions: see"}, {"sha": "02cdc34a38510552552e9722cfdc0b3bdea18961", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -75,6 +75,7 @@ extern void test_amx_tile (void)\t\t__attribute__((__target__(\"amx-tile\")));\n extern void test_amx_int8 (void)\t\t__attribute__((__target__(\"amx-int8\")));\n extern void test_amx_bf16 (void)\t\t__attribute__((__target__(\"amx-bf16\")));\n extern void test_uintr (void)\t\t\t__attribute__((__target__(\"uintr\")));\n+extern void test_hreset (void)\t\t\t__attribute__((__target__(\"hreset\")));\n \n extern void test_no_sgx (void)\t\t\t__attribute__((__target__(\"no-sgx\")));\n extern void test_no_avx5124fmaps(void)\t\t__attribute__((__target__(\"no-avx5124fmaps\")));\n@@ -151,6 +152,7 @@ extern void test_no_amx_tile (void)\t\t__attribute__((__target__(\"no-amx-tile\")));\n extern void test_no_amx_int8 (void)\t\t__attribute__((__target__(\"no-amx-int8\")));\n extern void test_no_amx_bf16 (void)\t\t__attribute__((__target__(\"no-amx-bf16\")));\n extern void test_no_uintr (void)\t\t__attribute__((__target__(\"no-uintr\")));\n+extern void test_no_hreset (void)\t\t__attribute__((__target__(\"no-hreset\")));\n \n extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));"}, {"sha": "573513f8c583b2905891e5b94f01bc52c843c925", "filename": "gcc/testsuite/gcc.target/i386/hreset-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fhreset-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fhreset-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fhreset-1.c?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mhreset\" } */\n+/* { dg-final { scan-assembler-times \"eax\"  1 } } */\n+/* { dg-final { scan-assembler-times \"hreset\\[ \\\\t\\]+\\[\\$\\]\\?0\"  1 } } */\n+\n+#include <immintrin.h>\n+\n+void foo(unsigned int eax)\n+{\n+  _hreset (eax);\n+}"}, {"sha": "293be094b787c238444ee7540df39fbe00dc3813", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-1.c?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -1,6 +1,6 @@\n /* Test that <x86gprintrin.h> is usable with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mhreset -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n /* { dg-additional-options \"-muintr\" { target { ! ia32 } } }  */\n \n #include <x86gprintrin.h>"}, {"sha": "c63302757466d98e99325bec4dafef1fbfe57046", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-2.c?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mhreset -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n /* { dg-add-options bind_pic_locally } */\n /* { dg-additional-options \"-muintr\" { target { ! ia32 } } }  */\n "}, {"sha": "3a7e1f4a10d1007caa17e6c500ac4216aa4b7c5d", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-3.c?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=x86-64 -madx -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -menqcmd -mfsgsbase -mfxsr -mhreset -mlzcnt -mlwp -mmovdiri -mmwaitx -mpconfig -mpopcnt -mpku -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -mserialize -msgx -mshstk -mtbm -mtsxldtrk -mwaitpkg -mwbnoinvd -mxsave -mxsavec -mxsaveopt -mxsaves -mno-sse -mno-mmx\" } */\n /* { dg-add-options bind_pic_locally } */\n /* { dg-additional-options \"-muintr\" { target { ! ia32 } } }  */\n "}, {"sha": "d8a6126e5dc6866c35ab6df4d87ab72de244436e", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-4.c?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -15,9 +15,9 @@\n \n #ifndef DIFFERENT_PRAGMAS\n #ifdef __x86_64__\n-#pragma GCC target (\"adx,bmi,bmi2,fsgsbase,fxsr,lwp,lzcnt,popcnt,rdrnd,rdseed,tbm,rtm,serialize,tsxldtrk,uintr,xsaveopt\")\n+#pragma GCC target (\"adx,bmi,bmi2,fsgsbase,fxsr,hreset,lwp,lzcnt,popcnt,rdrnd,rdseed,tbm,rtm,serialize,tsxldtrk,uintr,xsaveopt\")\n #else\n-#pragma GCC target (\"adx,bmi,bmi2,fsgsbase,fxsr,lwp,lzcnt,popcnt,rdrnd,rdseed,tbm,rtm,serialize,tsxldtrk,xsaveopt\")\n+#pragma GCC target (\"adx,bmi,bmi2,fsgsbase,fxsr,hreset,lwp,lzcnt,popcnt,rdrnd,rdseed,tbm,rtm,serialize,tsxldtrk,xsaveopt\")\n #endif\n #endif\n "}, {"sha": "9ef66fdad54511a3f6073cf55cf630956adb2b4f", "filename": "gcc/testsuite/gcc.target/i386/x86gprintrin-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83927c63897ec25b2efb5dac58f20a0561d28f26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86gprintrin-5.c?ref=83927c63897ec25b2efb5dac58f20a0561d28f26", "patch": "@@ -28,9 +28,9 @@\n #define __builtin_ia32_xabort(M) __builtin_ia32_xabort(1)\n \n #ifdef __x86_64__\n-#pragma GCC target (\"adx,bmi,bmi2,clflushopt,clwb,clzero,enqcmd,fsgsbase,fxsr,lwp,lzcnt,mwaitx,pconfig,pku,popcnt,rdpid,rdrnd,rdseed,tbm,rtm,serialize,sgx,tsxldtrk,uintr,xsavec,xsaveopt,xsaves,wbnoinvd\")\n+#pragma GCC target (\"adx,bmi,bmi2,clflushopt,clwb,clzero,enqcmd,fsgsbase,fxsr,hreset,lwp,lzcnt,mwaitx,pconfig,pku,popcnt,rdpid,rdrnd,rdseed,tbm,rtm,serialize,sgx,tsxldtrk,uintr,xsavec,xsaveopt,xsaves,wbnoinvd\")\n #else\n-#pragma GCC target (\"adx,bmi,bmi2,clflushopt,clwb,clzero,enqcmd,fsgsbase,fxsr,lwp,lzcnt,mwaitx,pconfig,pku,popcnt,rdpid,rdrnd,rdseed,tbm,rtm,serialize,sgx,tsxldtrk,xsavec,xsaveopt,xsaves,wbnoinvd\")\n+#pragma GCC target (\"adx,bmi,bmi2,clflushopt,clwb,clzero,enqcmd,fsgsbase,fxsr,hreset,lwp,lzcnt,mwaitx,pconfig,pku,popcnt,rdpid,rdrnd,rdseed,tbm,rtm,serialize,sgx,tsxldtrk,xsavec,xsaveopt,xsaves,wbnoinvd\")\n #endif\n \n #include <x86gprintrin.h>"}]}