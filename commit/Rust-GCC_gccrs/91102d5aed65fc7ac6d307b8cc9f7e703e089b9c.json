{"sha": "91102d5aed65fc7ac6d307b8cc9f7e703e089b9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTExMDJkNWFlZDY1ZmM3YWM2ZDMwN2I4Y2M5ZjdlNzAzZTA4OWI5Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-27T20:23:44Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-27T20:23:44Z"}, "message": "(set_nonzero_bits_and_sign_copies): Handle reg even if only set once and in one basic block.\n\n(set_nonzero_bits_and_sign_copies): Handle reg even\nif only set once and in one basic block.\n(nonzero_bits, case REG): Use REGNO_POINTER_ALIGN instead of\nexplicit alignment of registers pointing into frame.\n\nFrom-SVN: r10870", "tree": {"sha": "4e0fdc16082025bcbc91eaca4f4490c68a2e2c2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e0fdc16082025bcbc91eaca4f4490c68a2e2c2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91102d5aed65fc7ac6d307b8cc9f7e703e089b9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91102d5aed65fc7ac6d307b8cc9f7e703e089b9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91102d5aed65fc7ac6d307b8cc9f7e703e089b9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91102d5aed65fc7ac6d307b8cc9f7e703e089b9c/comments", "author": null, "committer": null, "parents": [{"sha": "dc6d66b319dd54d881f549b97d6ac17fdaa1d249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc6d66b319dd54d881f549b97d6ac17fdaa1d249", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc6d66b319dd54d881f549b97d6ac17fdaa1d249"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "ee1635572bb6d4354f3b5142c454f34a78801419", "filename": "gcc/combine.c", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91102d5aed65fc7ac6d307b8cc9f7e703e089b9c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91102d5aed65fc7ac6d307b8cc9f7e703e089b9c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=91102d5aed65fc7ac6d307b8cc9f7e703e089b9c", "patch": "@@ -701,10 +701,8 @@ setup_incoming_promotions ()\n #endif\n }\n \f\n-/* Called via note_stores.  If X is a pseudo that is used in more than\n-   one basic block, is narrower that HOST_BITS_PER_WIDE_INT, and is being\n-   set, record what bits are known zero.  If we are clobbering X,\n-   ignore this \"set\" because the clobbered value won't be used. \n+/* Called via note_stores.  If X is a pseudo that is narrower than\n+   HOST_BITS_PER_WIDE_INT and is being set, record what bits are known zero.\n \n    If we are setting only a portion of X and we can't figure out what\n    portion, assume all bits will be used since we don't know what will\n@@ -723,8 +721,6 @@ set_nonzero_bits_and_sign_copies (x, set)\n \n   if (GET_CODE (x) == REG\n       && REGNO (x) >= FIRST_PSEUDO_REGISTER\n-      && reg_n_sets[REGNO (x)] > 1\n-      && reg_basic_block[REGNO (x)] < 0\n       /* If this register is undefined at the start of the file, we can't\n \t say what its contents were.  */\n       && ! (basic_block_live_at_start[0][REGNO (x) / REGSET_ELT_BITS]\n@@ -6888,26 +6884,25 @@ nonzero_bits (x, mode)\n \tnonzero &= GET_MODE_MASK (ptr_mode);\n #endif\n \n-#ifdef STACK_BOUNDARY\n-      /* If this is the stack pointer, we may know something about its\n-\t alignment.  If PUSH_ROUNDING is defined, it is possible for the\n+      /* We may know something about the alignment of this register.\n+\t But if PUSH_ROUNDING is defined, it is possible for the\n \t stack to be momentarily aligned only to that amount, so we pick\n \t the least alignment.  */\n \n-      if (x == stack_pointer_rtx)\n+      if (REGNO_POINTER_ALIGN (REGNO (x)) != 0)\n \t{\n-\t  int sp_alignment = STACK_BOUNDARY / BITS_PER_UNIT;\n+\t  int alignment = REGNO_POINTER_ALIGN (REGNO (x));\n \n #ifdef PUSH_ROUNDING\n-\t  sp_alignment = MIN (PUSH_ROUNDING (1), sp_alignment);\n+\t  if (REGNO (x) == STACK_POINTER_REGNUM)\n+\t    alignment = MIN (PUSH_ROUNDING (1), alignment);\n #endif\n \n \t  /* We must return here, otherwise we may get a worse result from\n \t     one of the choices below.  There is nothing useful below as\n \t     far as the stack pointer is concerned.  */\n-\t  return nonzero &= ~ (sp_alignment - 1);\n+\t  return nonzero &= ~ (alignment - 1);\n \t}\n-#endif\n \n       /* If X is a register whose nonzero bits value is current, use it.\n \t Otherwise, if X is a register whose value we can find, use that"}]}