{"sha": "e793c60979f7a1570e33810541b301b861fb64a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc5M2M2MDk3OWY3YTE1NzBlMzM4MTA1NDFiMzAxYjg2MWZiNjRhNg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2000-12-12T18:54:26Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-12-12T18:54:26Z"}, "message": "tradcpp.c (enum node_type): Add T_ERROR.\n\n        * tradcpp.c (enum node_type): Add T_ERROR.\n        (do_error): New function.\n        (directive_table): Add #error handler.\n\nFrom-SVN: r38205", "tree": {"sha": "fb12373fbefeb3e65e2fa9894ead7673ca3fd5c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb12373fbefeb3e65e2fa9894ead7673ca3fd5c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e793c60979f7a1570e33810541b301b861fb64a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e793c60979f7a1570e33810541b301b861fb64a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e793c60979f7a1570e33810541b301b861fb64a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e793c60979f7a1570e33810541b301b861fb64a6/comments", "author": null, "committer": null, "parents": [{"sha": "d033a98935109d31a0a2987c99da6944d8fd8afe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d033a98935109d31a0a2987c99da6944d8fd8afe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d033a98935109d31a0a2987c99da6944d8fd8afe"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "b42d16b89abf3fa626376226ad5d1f515ccbeb37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e793c60979f7a1570e33810541b301b861fb64a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e793c60979f7a1570e33810541b301b861fb64a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e793c60979f7a1570e33810541b301b861fb64a6", "patch": "@@ -1,3 +1,9 @@\n+2000-12-12  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * tradcpp.c (enum node_type): Add T_ERROR.\n+        (do_error): New function.\n+        (directive_table): Add #error handler.\n+\n 2000-12-12  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \n \t* configure.in (HAVE_AS_DWARF2_DEBUG_LINE): Enable .file/.loc check"}, {"sha": "27bd3a23702fa3c0e6d30abe43bc4e6ef23e077e", "filename": "gcc/tradcpp.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e793c60979f7a1570e33810541b301b861fb64a6/gcc%2Ftradcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e793c60979f7a1570e33810541b301b861fb64a6/gcc%2Ftradcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.c?ref=e793c60979f7a1570e33810541b301b861fb64a6", "patch": "@@ -221,6 +221,7 @@ enum node_type {\n  T_ELSE,\t/* `#else' */\n  T_ELIF,\t/* `#elif' */\n  T_UNDEF,\t/* `#undef' */\n+ T_ERROR,\t/* `#error' */\n  T_LINE,\t/* `#line' */\n  T_ENDIF,\t/* `#endif' */\n  T_ASSERT,\t/* `#assert' */\n@@ -327,6 +328,7 @@ struct arglist {\n /* Function prototypes.  */\n \n static void do_define\tPARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n+static void do_error\tPARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n static void do_line\tPARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n static void do_include\tPARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n static void do_undef\tPARAMS ((U_CHAR *, U_CHAR *, FILE_BUF *));\n@@ -416,6 +418,7 @@ struct directive directive_table[] = {\n   {  4, do_else,    \"else\",    T_ELSE    },\n   {  6, do_ifndef,  \"ifndef\",  T_IFNDEF  },\n   {  5, do_undef,   \"undef\",   T_UNDEF   },\n+  {  5, do_error,   \"error\",   T_ERROR   },\n   {  4, do_line,    \"line\",    T_LINE    },\n   {  4, do_elif,    \"elif\",    T_ELIF    },\n   {  6, do_assert,  \"assert\",  T_ASSERT  },\n@@ -3174,6 +3177,16 @@ test_assertion (pbuf)\n   return result;\n }\n \n+/* Handle a #error directive.  */\n+static void\n+do_error (buf, limit, op)\n+     U_CHAR *buf;\n+     U_CHAR *limit;\n+     FILE_BUF *op ATTRIBUTE_UNUSED;\n+{\n+  error (\"#error%.*s\", limit - buf, buf);\n+}\n+\n /* Handle a #assert directive.  */\n static void\n do_assert (buf, limit, op)"}]}