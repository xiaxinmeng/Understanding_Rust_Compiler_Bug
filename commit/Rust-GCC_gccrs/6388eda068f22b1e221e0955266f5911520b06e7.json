{"sha": "6388eda068f22b1e221e0955266f5911520b06e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM4OGVkYTA2OGYyMmIxZTIyMWUwOTU1MjY2ZjU5MTE1MjBiMDZlNw==", "commit": {"author": {"name": "Dominique d'Humieres", "email": "dominiq@gcc.gnu.org", "date": "2019-02-25T15:19:45Z"}, "committer": {"name": "Dominique d'Humieres", "email": "dominiq@gcc.gnu.org", "date": "2019-02-25T15:19:45Z"}, "message": "re PR fortran/89282 (Garbage arithmetics results in fortran with -O3 and overloaded operators)\n\n2019-02-25  Dominique d'Humieres  <dominiq@gcc.gnu.org>\n\n\tPR fortran/89282\n\t* gfortran.dg/overload_3.f90: New test.\n\nFrom-SVN: r269190", "tree": {"sha": "4dfd9c324e925a6cf8898e6b62d3a478d7fd8f4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dfd9c324e925a6cf8898e6b62d3a478d7fd8f4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6388eda068f22b1e221e0955266f5911520b06e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6388eda068f22b1e221e0955266f5911520b06e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6388eda068f22b1e221e0955266f5911520b06e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6388eda068f22b1e221e0955266f5911520b06e7/comments", "author": null, "committer": null, "parents": [{"sha": "74a4de687d4628e986f64a7be2c6a683b53957a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74a4de687d4628e986f64a7be2c6a683b53957a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74a4de687d4628e986f64a7be2c6a683b53957a7"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "403be0fd5e52a2f4a56aa9d2e66655b247a85203", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6388eda068f22b1e221e0955266f5911520b06e7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6388eda068f22b1e221e0955266f5911520b06e7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6388eda068f22b1e221e0955266f5911520b06e7", "patch": "@@ -1,3 +1,8 @@\n+2019-02-25  Dominique d'Humieres  <dominiq@gcc.gnu.org>\n+\n+\tPR fortran/89282\n+\t* gfortran.dg/overload_3.f90: New test. \n+\n 2019-02-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/89285"}, {"sha": "a2fb47effd7a2edb560f0752af979484a7b83aaa", "filename": "gcc/testsuite/gfortran.dg/overload_3.f90", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6388eda068f22b1e221e0955266f5911520b06e7/gcc%2Ftestsuite%2Fgfortran.dg%2Foverload_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6388eda068f22b1e221e0955266f5911520b06e7/gcc%2Ftestsuite%2Fgfortran.dg%2Foverload_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Foverload_3.f90?ref=6388eda068f22b1e221e0955266f5911520b06e7", "patch": "@@ -0,0 +1,84 @@\n+! { dg-do run }\n+! { dg-options \"-fno-tree-vrp\" }\n+! PR fortran/89282\n+! Contributed by Federico Perini.\n+!\n+module myclass\n+    use iso_fortran_env, only: real64\n+    implicit none\n+\n+    ! My generic type\n+    type :: t\n+\n+        integer :: n=0\n+        real(real64), allocatable :: x(:)\n+\n+        contains\n+\n+          procedure :: init => t_init\n+          procedure :: destroy => t_destroy\n+          procedure :: print => t_print\n+\n+          procedure, private, pass(this) :: x_minus_t\n+          generic :: operator(-) => x_minus_t\n+\n+\n+    end type t\n+\n+    contains\n+\n+    elemental subroutine t_destroy(this)\n+       class(t), intent(inout) :: this\n+       this%n=0\n+       if (allocated(this%x)) deallocate(this%x)\n+    end subroutine t_destroy\n+\n+    subroutine t_init(this,n)\n+      class(t), intent(out) :: this\n+      integer, intent(in) :: n\n+      call this%destroy()\n+      this%n=n\n+      allocate(this%x(n))\n+    end subroutine t_init\n+\n+    type(t) function x_minus_t(x,this) result(xmt)\n+       real(real64), intent(in) :: x\n+       class(t), intent(in) :: this\n+       call xmt%init(this%n)\n+       xmt%x(:) = x-this%x(:)\n+    end function x_minus_t\n+\n+    subroutine t_print(this,msg)\n+       class(t), intent(in) :: this\n+       character(*), intent(in) :: msg\n+\n+       integer :: i\n+\n+       print \"('type(t) object <',a,'>, size=',i0)\", msg,this%n\n+       do i=1,this%n\n+         print \"('  x(',i0,') =',1pe12.5)\",i,this%x(i)\n+       end do\n+\n+    end subroutine t_print\n+\n+end module myclass\n+\n+\n+program test_overloaded\n+    use myclass\n+    implicit none\n+\n+    type(t) :: t1,r1\n+\n+    ! Error with result (5)  \n+    call t1%init(5);  t1%x(:) = 1.0_real64; r1 = 3.0_real64 - t1\n+    if (any(r1%x /= 2.0)) stop 1\n+!    call r1%print('r1')\n+\n+    ! No errors\n+    call t1%init(6);  t1%x(:) = 1.0_real64; r1 = 3.0_real64 - t1\n+    if (any(r1%x /= 2.0)) stop 2\n+!    call r1%print('r1')\n+    return\n+\n+end program test_overloaded"}]}