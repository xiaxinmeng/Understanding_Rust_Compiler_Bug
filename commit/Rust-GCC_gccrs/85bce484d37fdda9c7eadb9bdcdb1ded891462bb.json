{"sha": "85bce484d37fdda9c7eadb9bdcdb1ded891462bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODViY2U0ODRkMzdmZGRhOWM3ZWFkYjliZGNkYjFkZWQ4OTE0NjJiYg==", "commit": {"author": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2020-05-29T21:19:10Z"}, "committer": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2020-06-02T16:27:46Z"}, "message": "Correctly identify stfs if prefixed\n\nBecause reg_to_non_prefixed() only looks at the register being used, it\ndoesn't get the right answer for stfs, which leads to us not seeing\nthat it has a PCREL symbol ref.  This patch works around this by\nintroducing a helper function that inspects the insn to see if it is in\nfact a stfs. Then if we use NON_PREFIXED_DEFAULT, address_to_insn_form()\ncan see that it has the PCREL symbol ref.\n\ngcc/ChangeLog:\n\n\tPR target/95347\n\t* config/rs6000/rs6000.c (prefixed_store_p): Add special case\n\tfor stfs.\n\t(is_stfs_insn): New helper function.", "tree": {"sha": "5c3fb388953bf3016ad91e4ea9885e38a1dc95f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c3fb388953bf3016ad91e4ea9885e38a1dc95f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85bce484d37fdda9c7eadb9bdcdb1ded891462bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85bce484d37fdda9c7eadb9bdcdb1ded891462bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85bce484d37fdda9c7eadb9bdcdb1ded891462bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85bce484d37fdda9c7eadb9bdcdb1ded891462bb/comments", "author": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34e5efa10a7b514238ed9a914b802898d2d8cb36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e5efa10a7b514238ed9a914b802898d2d8cb36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34e5efa10a7b514238ed9a914b802898d2d8cb36"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "ba9069ecc3ba6f3a04204c8f5444780a6f23b0c6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85bce484d37fdda9c7eadb9bdcdb1ded891462bb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85bce484d37fdda9c7eadb9bdcdb1ded891462bb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=85bce484d37fdda9c7eadb9bdcdb1ded891462bb", "patch": "@@ -24980,6 +24980,51 @@ address_to_insn_form (rtx addr,\n   return INSN_FORM_BAD;\n }\n \n+/* Helper function to see if we're potentially looking at stfs.\n+   - PARALLEL containing a SET and a CLOBBER\n+   - SET is from UNSPEC_SI_FROM_SF to MEM:SI\n+   - CLOBBER is a V4SF\n+ */\n+\n+static bool\n+is_stfs_insn (rtx_insn *insn)\n+{\n+  rtx pattern = PATTERN (insn);\n+  if (GET_CODE (pattern) != PARALLEL)\n+    return false;\n+\n+  /* This should be a parallel with exactly one set and one clobber.  */\n+  if (XVECLEN (pattern, 0) != 2)\n+    return false;\n+\n+  rtx set = XVECEXP (pattern, 0, 0);\n+  if (GET_CODE (set) != SET)\n+    return false;\n+  \n+  rtx clobber = XVECEXP (pattern, 0, 1);\n+  if (GET_CODE (clobber) != CLOBBER)\n+    return false;\n+\n+  /* All we care is that the destination of the SET is a mem:SI,\n+     the source should be an UNSPEC_SI_FROM_SF, and the clobber\n+     should be a scratch:V4SF.  */\n+\n+  rtx dest = SET_DEST (set);\n+  rtx src = SET_SRC (set);\n+  rtx scratch = SET_DEST (clobber);\n+\n+  if (GET_CODE (src) != UNSPEC || XINT (src, 1) != UNSPEC_SI_FROM_SF)\n+    return false;\n+\n+  if (GET_CODE (dest) != MEM || GET_MODE (dest) != SImode)\n+    return false;\n+\n+  if (GET_CODE (scratch) != SCRATCH || GET_MODE (scratch) != V4SFmode)\n+    return false;\n+\n+  return true;\n+}\n+\n /* Helper function to take a REG and a MODE and turn it into the non-prefixed\n    instruction format (D/DS/DQ) used for offset memory.  */\n \n@@ -25119,8 +25164,16 @@ prefixed_store_p (rtx_insn *insn)\n     return false;\n \n   machine_mode mem_mode = GET_MODE (mem);\n+  rtx addr = XEXP (mem, 0);\n   enum non_prefixed_form non_prefixed = reg_to_non_prefixed (reg, mem_mode);\n-  return address_is_prefixed (XEXP (mem, 0), mem_mode, non_prefixed);\n+\n+  /* Need to make sure we aren't looking at a stfs which doesn't look\n+     like the other things reg_to_non_prefixed/address_is_prefixed\n+     looks for.  */\n+  if (non_prefixed == NON_PREFIXED_X && is_stfs_insn (insn))\n+    return address_is_prefixed (addr, mem_mode, NON_PREFIXED_DEFAULT);\n+  else\n+    return address_is_prefixed (addr, mem_mode, non_prefixed);\n }\n \n /* Whether a load immediate or add instruction is a prefixed instruction.  This"}]}