{"sha": "4a13695ca1f5a81aa054ff52e15705b88016bd17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGExMzY5NWNhMWY1YTgxYWEwNTRmZjUyZTE1NzA1Yjg4MDE2YmQxNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-15T12:52:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-15T12:52:48Z"}, "message": "[multiple changes]\n\n2009-04-15  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Loop_Statement): Don't check for infinite loop\n\twarnings unless the loop comes from source, because checking generated\n\tloops is a waste of time, and makes it harder to debug\n\tCheck_Infinite_Loop_Warning.\n\n\t* sem_warn.adb (Check_Infinite_Loop_Warning): If the local variable\n\ttested in the while loop is a renaming, do not warn. Otherwise, we get\n\tfalse alarms, because it's usually renaming something that we can't\n\tdeal with (an indexed component, a global variable, ...).\n\n\t* gnat_rm.texi: Fix typo\n\n2009-04-15  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch6.adb: Minor reformatting\n\nFrom-SVN: r146111", "tree": {"sha": "c697b3c422f469e9dda6aebd785df1cac6bb0330", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c697b3c422f469e9dda6aebd785df1cac6bb0330"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a13695ca1f5a81aa054ff52e15705b88016bd17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a13695ca1f5a81aa054ff52e15705b88016bd17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a13695ca1f5a81aa054ff52e15705b88016bd17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a13695ca1f5a81aa054ff52e15705b88016bd17/comments", "author": null, "committer": null, "parents": [{"sha": "c3b36d484f5b232e882a0535bf275329dc91f3a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3b36d484f5b232e882a0535bf275329dc91f3a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3b36d484f5b232e882a0535bf275329dc91f3a4"}], "stats": {"total": 51, "additions": 37, "deletions": 14}, "files": [{"sha": "48eac4e06e5cd681612e2de063451b3867039878", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a13695ca1f5a81aa054ff52e15705b88016bd17/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a13695ca1f5a81aa054ff52e15705b88016bd17/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4a13695ca1f5a81aa054ff52e15705b88016bd17", "patch": "@@ -1,3 +1,21 @@\n+2009-04-15  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Loop_Statement): Don't check for infinite loop\n+\twarnings unless the loop comes from source, because checking generated\n+\tloops is a waste of time, and makes it harder to debug\n+\tCheck_Infinite_Loop_Warning.\n+\n+\t* sem_warn.adb (Check_Infinite_Loop_Warning): If the local variable\n+\ttested in the while loop is a renaming, do not warn. Otherwise, we get\n+\tfalse alarms, because it's usually renaming something that we can't\n+\tdeal with (an indexed component, a global variable, ...).\n+\n+\t* gnat_rm.texi: Fix typo\n+\n+2009-04-15  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch6.adb: Minor reformatting\n+\n 2009-04-15  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch7.adb (Expand_Ctrl_Function_Call): Check for the case where the"}, {"sha": "fe463550ae181e2777bdf4c14f9a8b19c52a90cb", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a13695ca1f5a81aa054ff52e15705b88016bd17/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a13695ca1f5a81aa054ff52e15705b88016bd17/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=4a13695ca1f5a81aa054ff52e15705b88016bd17", "patch": "@@ -5189,9 +5189,9 @@ also be used as a configuration pragma.\n The fourth form, with an On|Off parameter and a string, is used to\n control individual messages, based on their text. The string argument\n is a pattern that is used to match against the text of individual\n-warning messages (not including the initial \"warnings: \" tag).\n+warning messages (not including the initial \"warning: \" tag).\n \n-The pattern may contain asterisks which match zero or more characters in\n+The pattern may contain asterisks, which match zero or more characters in\n the message. For example, you can use\n @code{pragma Warnings (Off, \"*bits of*unused\")} to suppress the warning\n message @code{warning: 960 bits of \"a\" unused}. No other regular"}, {"sha": "dab987174cea2f0a2c3e710b1687afae8d013c43", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a13695ca1f5a81aa054ff52e15705b88016bd17/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a13695ca1f5a81aa054ff52e15705b88016bd17/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=4a13695ca1f5a81aa054ff52e15705b88016bd17", "patch": "@@ -2031,7 +2031,12 @@ package body Sem_Ch5 is\n       Process_End_Label (Loop_Statement, 'e', Ent);\n       End_Scope;\n       Kill_Current_Values;\n-      Check_Infinite_Loop_Warning (N);\n+\n+      --  No point in checking for warnings in code we generated\n+\n+      if Comes_From_Source (N) then\n+         Check_Infinite_Loop_Warning (N);\n+      end if;\n \n       --  Code after loop is unreachable if the loop has no WHILE or FOR\n       --  and contains no EXIT statements within the body of the loop."}, {"sha": "576f9cd45b86652e87296d2996656f8282426387", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a13695ca1f5a81aa054ff52e15705b88016bd17/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a13695ca1f5a81aa054ff52e15705b88016bd17/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=4a13695ca1f5a81aa054ff52e15705b88016bd17", "patch": "@@ -3954,19 +3954,17 @@ package body Sem_Ch6 is\n       procedure Possible_Freeze (T : Entity_Id);\n       --  T is the type of either a formal parameter or of the return type.\n       --  If T is not yet frozen and needs a delayed freeze, then the\n-      --  subprogram itself must be delayed. If T is the limited view of\n-      --  of an incomplete type the subprogram must be frozen as well,\n-      --  because T may depend on local types that have not been frozen yet.\n+      --  subprogram itself must be delayed. If T is the limited view of an\n+      --  incomplete type the subprogram must be frozen as well, because\n+      --  T may depend on local types that have not been frozen yet.\n \n       ---------------------\n       -- Possible_Freeze --\n       ---------------------\n \n       procedure Possible_Freeze (T : Entity_Id) is\n       begin\n-         if Has_Delayed_Freeze (T)\n-           and then not Is_Frozen (T)\n-         then\n+         if Has_Delayed_Freeze (T) and then not Is_Frozen (T) then\n             Set_Has_Delayed_Freeze (Designator);\n \n          elsif Is_Access_Type (T)\n@@ -3975,11 +3973,10 @@ package body Sem_Ch6 is\n          then\n             Set_Has_Delayed_Freeze (Designator);\n \n-         elsif Ekind (T) = E_Incomplete_Type\n-           and then From_With_Type (T)\n-         then\n+         elsif Ekind (T) = E_Incomplete_Type and then From_With_Type (T) then\n             Set_Has_Delayed_Freeze (Designator);\n          end if;\n+\n       end Possible_Freeze;\n \n    --  Start of processing for Check_Delayed_Subprogram"}, {"sha": "2724255540b6ca3da93ba896611f5f6cf0c3fe48", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a13695ca1f5a81aa054ff52e15705b88016bd17/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a13695ca1f5a81aa054ff52e15705b88016bd17/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=4a13695ca1f5a81aa054ff52e15705b88016bd17", "patch": "@@ -541,7 +541,7 @@ package body Sem_Warn is\n    --  Start of processing for Check_Infinite_Loop_Warning\n \n    begin\n-      --  We need a while iteration with no condition actions. Conditions\n+      --  We need a while iteration with no condition actions. Condition\n       --  actions just make things too complicated to get the warning right.\n \n       if No (Iter)\n@@ -556,12 +556,15 @@ package body Sem_Warn is\n \n       Find_Var (Condition (Iter));\n \n-      --  Nothing to do if local variable from source not found\n+      --  Nothing to do if local variable from source not found. If it's a\n+      --  renaming, it is probably renaming something too complicated to deal\n+      --  with here.\n \n       if No (Var)\n         or else Ekind (Var) /= E_Variable\n         or else Is_Library_Level_Entity (Var)\n         or else not Comes_From_Source (Var)\n+        or else Nkind (Parent (Var)) = N_Object_Renaming_Declaration\n       then\n          return;\n "}]}