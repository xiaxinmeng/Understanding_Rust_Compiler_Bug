{"sha": "22869a37b0d0bb3107a6a55d95a08dd243bc50fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI4NjlhMzdiMGQwYmIzMTA3YTZhNTVkOTVhMDhkZDI0M2JjNTBmYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-04-28T14:36:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-04-28T14:36:13Z"}, "message": "re PR middle-end/60092 (posix_memalign not recognized to derive alias and alignment info)\n\n2014-04-28  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/60092\n\t* builtins.def (DEF_C11_BUILTIN): Add.\n\t(BUILT_IN_ALIGNED_ALLOC): Likewise.\n\t* coretypes.h (enum function_class): Add function_c11_misc.\n\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1): Handle\n\tBUILT_IN_ALIGNED_ALLOC like BUILT_IN_MALLOC.\n\t(call_may_clobber_ref_p_1): Likewise.\n\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Likewise.\n\t(mark_all_reaching_defs_necessary_1): Likewise.\n\t(propagate_necessity): Likewise.\n\t(eliminate_unnecessary_stmts): Likewise.\n\t* tree-ssa-ccp.c (evaluate_stmt): Handle BUILT_IN_ALIGNED_ALLOC.\n\n\tada/\n\t* gcc-interface/utils.c: Define flag_isoc11.\n\n\tlto/\n\t* lto-lang.c: Define flag_isoc11.\n\n\t* gcc.dg/tree-ssa/alias-32.c: New testcase.\n\t* gcc.dg/vect/pr60092.c: Likewise.\n\nFrom-SVN: r209863", "tree": {"sha": "51d32838b9998a12218d4e27734aff397aed9cb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51d32838b9998a12218d4e27734aff397aed9cb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22869a37b0d0bb3107a6a55d95a08dd243bc50fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22869a37b0d0bb3107a6a55d95a08dd243bc50fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22869a37b0d0bb3107a6a55d95a08dd243bc50fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "771c950116f7b08a45eecb6334954cfe8891a587", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/771c950116f7b08a45eecb6334954cfe8891a587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/771c950116f7b08a45eecb6334954cfe8891a587"}], "stats": {"total": 112, "additions": 109, "deletions": 3}, "files": [{"sha": "5e9a1295bf31f9c11f0f95cab1d015d6b8e97583", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22869a37b0d0bb3107a6a55d95a08dd243bc50fc", "patch": "@@ -1,3 +1,18 @@\n+2014-04-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/60092\n+\t* builtins.def (DEF_C11_BUILTIN): Add.\n+\t(BUILT_IN_ALIGNED_ALLOC): Likewise.\n+\t* coretypes.h (enum function_class): Add function_c11_misc.\n+\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1): Handle\n+\tBUILT_IN_ALIGNED_ALLOC like BUILT_IN_MALLOC.\n+\t(call_may_clobber_ref_p_1): Likewise.\n+\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Likewise.\n+\t(mark_all_reaching_defs_necessary_1): Likewise.\n+\t(propagate_necessity): Likewise.\n+\t(eliminate_unnecessary_stmts): Likewise.\n+\t* tree-ssa-ccp.c (evaluate_stmt): Handle BUILT_IN_ALIGNED_ALLOC.\n+\n 2014-04-28  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vrp.c (vrp_var_may_overflow): Remove."}, {"sha": "8d8ac30a8f7f828649b600d2cad188920cc06d78", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=22869a37b0d0bb3107a6a55d95a08dd243bc50fc", "patch": "@@ -1,3 +1,8 @@\n+2014-04-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/60092\n+\t* gcc-interface/utils.c: Define flag_isoc11.\n+\n 2014-04-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnatvsn.ads (Library_Version): Bump to 4.10."}, {"sha": "c81ab00897dfc987b4d1888e4b58197aca61077a", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=22869a37b0d0bb3107a6a55d95a08dd243bc50fc", "patch": "@@ -6519,6 +6519,7 @@ def_builtin_1 (enum built_in_function fncode,\n \n static int flag_isoc94 = 0;\n static int flag_isoc99 = 0;\n+static int flag_isoc11 = 0;\n \n /* Install what the common builtins.def offers.  */\n "}, {"sha": "5b902d8a938217c0f5bcbcd149c52e3a5e201e4a", "filename": "gcc/builtins.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=22869a37b0d0bb3107a6a55d95a08dd243bc50fc", "patch": "@@ -111,6 +111,13 @@ along with GCC; see the file COPYING3.  If not see\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n \t       true, true, !flag_isoc99, ATTRS, targetm.libc_has_function (function_c99_misc), true)\n \n+/* Like DEF_LIB_BUILTIN, except that the function is only a part of\n+   the standard in C11 or above.  */\n+#undef DEF_C11_BUILTIN\n+#define DEF_C11_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n+  DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n+\t       true, true, !flag_isoc11, ATTRS, targetm.libc_has_function (function_c11_misc), true)\n+\n /* Like DEF_C99_BUILTIN, but for complex math functions.  */\n #undef DEF_C99_COMPL_BUILTIN\n #define DEF_C99_COMPL_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n@@ -223,6 +230,7 @@ DEF_C99_BUILTIN        (BUILT_IN_ACOSH, \"acosh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHF\n DEF_C99_BUILTIN        (BUILT_IN_ACOSHF, \"acoshf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_ACOSHL, \"acoshl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_ACOSL, \"acosl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C11_BUILTIN        (BUILT_IN_ALIGNED_ALLOC, \"aligned_alloc\", BT_FN_PTR_SIZE_SIZE, ATTR_MALLOC_NOTHROW_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_ASIN, \"asin\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_ASINF, \"asinf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_ASINH, \"asinh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)"}, {"sha": "d70fb11d893ee90fb16b6e7383380142a0c6c719", "filename": "gcc/coretypes.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=22869a37b0d0bb3107a6a55d95a08dd243bc50fc", "patch": "@@ -194,7 +194,8 @@ enum function_class {\n   function_c94,\n   function_c99_misc,\n   function_c99_math_complex,\n-  function_sincos\n+  function_sincos,\n+  function_c11_misc\n };\n \n /* Memory model types for the __atomic* builtins. "}, {"sha": "edb5bb9cfca754d5e976f6e508d74e406be9a233", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=22869a37b0d0bb3107a6a55d95a08dd243bc50fc", "patch": "@@ -1,3 +1,8 @@\n+2014-04-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/60092\n+\t* lto-lang.c: Define flag_isoc11.\n+\n 2014-04-23  David Malcolm  <dmalcolm@redhat.com>\n \n \t* lto-partition.c (add_references_to_partition): Update for"}, {"sha": "339bebfa87d398d9e40474b61c2ab4eef05554ae", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=22869a37b0d0bb3107a6a55d95a08dd243bc50fc", "patch": "@@ -192,6 +192,7 @@ static GTY(()) tree signed_size_type_node;\n /* Flags needed to process builtins.def.  */\n int flag_isoc94;\n int flag_isoc99;\n+int flag_isoc11;\n \n /* Attribute handlers.  */\n "}, {"sha": "41c082116e73b1c45e3f0c0cc55af61102789b01", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=22869a37b0d0bb3107a6a55d95a08dd243bc50fc", "patch": "@@ -1,3 +1,9 @@\n+2014-04-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/60092\n+\t* gcc.dg/tree-ssa/alias-32.c: New testcase.\n+\t* gcc.dg/vect/pr60092.c: Likewise.\n+\n 2014-04-28  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/vrp91.c: New testcase."}, {"sha": "5d0dcc2937e30d62b3218edb3c9ce1987f6f7414", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-32.c?ref=22869a37b0d0bb3107a6a55d95a08dd243bc50fc", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-cddce1\" } */\n+\n+int bar (short *p)\n+{\n+  int res = *p;\n+  struct { int *q1; int *q2; } q;\n+  q.q1 = __builtin_aligned_alloc (128, 128 * sizeof (int));\n+  q.q2 = __builtin_aligned_alloc (128, 128 * sizeof (int));\n+  *q.q1 = 1;\n+  *q.q2 = 2;\n+  return res + *p + *q.q1 + *q.q2;\n+}\n+\n+/* There should be only one load from *p left.  All stores and all\n+   other loads should be removed.  Likewise the calls to aligned_alloc.  */\n+\n+/* { dg-final { scan-tree-dump-times \"\\\\\\*\\[^ \\]\" 1 \"cddce1\" } } */\n+/* { dg-final { scan-tree-dump-not \"aligned_alloc\" \"cddce1\" } } */\n+/* { dg-final { cleanup-tree-dump \"cddce1\" } } */"}, {"sha": "e03c625b489a1d4fb6f5d56e6a35862fd1ee3eef", "filename": "gcc/testsuite/gcc.dg/vect/pr60092.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60092.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60092.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr60092.c?ref=22869a37b0d0bb3107a6a55d95a08dd243bc50fc", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+\n+int *foo (int n)\n+{\n+  int *p = __builtin_aligned_alloc (256, n * sizeof (int));\n+  int *q = __builtin_aligned_alloc (256, n * sizeof (int));\n+  bar (q);\n+  int i;\n+  for (i = 0; i < n; ++i)\n+    p[i] = q[i] + q[i];\n+  return p;\n+}\n+\n+/* { dg-final { scan-tree-dump \"LOOP VECTORIZED\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-not \"Peeling for alignment will be applied\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-not \"Vectorizing an unaligned access\" \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "cd2c110b41a6ec5adc31a876fcea905ebe2b31fb", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=22869a37b0d0bb3107a6a55d95a08dd243bc50fc", "patch": "@@ -1646,6 +1646,7 @@ ref_maybe_used_by_call_p_1 (gimple call, ao_ref *ref)\n \tcase BUILT_IN_FREE:\n \tcase BUILT_IN_MALLOC:\n \tcase BUILT_IN_POSIX_MEMALIGN:\n+\tcase BUILT_IN_ALIGNED_ALLOC:\n \tcase BUILT_IN_CALLOC:\n \tcase BUILT_IN_ALLOCA:\n \tcase BUILT_IN_ALLOCA_WITH_ALIGN:\n@@ -1956,6 +1957,7 @@ call_may_clobber_ref_p_1 (gimple call, ao_ref *ref)\n \t/* Allocating memory does not have any side-effects apart from\n \t   being the definition point for the pointer.  */\n \tcase BUILT_IN_MALLOC:\n+\tcase BUILT_IN_ALIGNED_ALLOC:\n \tcase BUILT_IN_CALLOC:\n \tcase BUILT_IN_STRDUP:\n \tcase BUILT_IN_STRNDUP:"}, {"sha": "5e6b4d88d1be2f5d765358a1559977eea33c88d1", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=22869a37b0d0bb3107a6a55d95a08dd243bc50fc", "patch": "@@ -1762,6 +1762,25 @@ evaluate_stmt (gimple stmt)\n \t      val = bit_value_assume_aligned (stmt, NULL_TREE, val, false);\n \t      break;\n \n+\t    case BUILT_IN_ALIGNED_ALLOC:\n+\t      {\n+\t\ttree align = get_constant_value (gimple_call_arg (stmt, 0));\n+\t\tif (align\n+\t\t    && tree_fits_uhwi_p (align))\n+\t\t  {\n+\t\t    unsigned HOST_WIDE_INT aligni = tree_to_uhwi (align);\n+\t\t    if (aligni > 1\n+\t\t\t/* align must be power-of-two */\n+\t\t\t&& (aligni & (aligni - 1)) == 0)\n+\t\t      {\n+\t\t\tval.lattice_val = CONSTANT;\n+\t\t\tval.value = build_int_cst (ptr_type_node, 0);\n+\t\t\tval.mask = double_int::from_shwi (-aligni);\n+\t\t      }\n+\t\t  }\n+\t\tbreak;\n+\t      }\n+\n \t    default:;\n \t    }\n \t}"}, {"sha": "e1edb2ee3acf3353a805c49837dfe4f44ddbe3c9", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22869a37b0d0bb3107a6a55d95a08dd243bc50fc/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=22869a37b0d0bb3107a6a55d95a08dd243bc50fc", "patch": "@@ -231,6 +231,7 @@ mark_stmt_if_obviously_necessary (gimple stmt, bool aggressive)\n \t  switch (DECL_FUNCTION_CODE (callee))\n \t    {\n \t    case BUILT_IN_MALLOC:\n+\t    case BUILT_IN_ALIGNED_ALLOC:\n \t    case BUILT_IN_CALLOC:\n \t    case BUILT_IN_ALLOCA:\n \t    case BUILT_IN_ALLOCA_WITH_ALIGN:\n@@ -573,6 +574,7 @@ mark_all_reaching_defs_necessary_1 (ao_ref *ref ATTRIBUTE_UNUSED,\n \tswitch (DECL_FUNCTION_CODE (callee))\n \t  {\n \t  case BUILT_IN_MALLOC:\n+\t  case BUILT_IN_ALIGNED_ALLOC:\n \t  case BUILT_IN_CALLOC:\n \t  case BUILT_IN_ALLOCA:\n \t  case BUILT_IN_ALLOCA_WITH_ALIGN:\n@@ -776,7 +778,8 @@ propagate_necessity (bool aggressive)\n \t\t  && is_gimple_call (def_stmt = SSA_NAME_DEF_STMT (ptr))\n \t\t  && (def_callee = gimple_call_fndecl (def_stmt))\n \t\t  && DECL_BUILT_IN_CLASS (def_callee) == BUILT_IN_NORMAL\n-\t\t  && (DECL_FUNCTION_CODE (def_callee) == BUILT_IN_MALLOC\n+\t\t  && (DECL_FUNCTION_CODE (def_callee) == BUILT_IN_ALIGNED_ALLOC\n+\t\t      || DECL_FUNCTION_CODE (def_callee) == BUILT_IN_MALLOC\n \t\t      || DECL_FUNCTION_CODE (def_callee) == BUILT_IN_CALLOC))\n \t\tcontinue;\n \t    }\n@@ -822,6 +825,7 @@ propagate_necessity (bool aggressive)\n \t\t  && (DECL_FUNCTION_CODE (callee) == BUILT_IN_MEMSET\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_MEMSET_CHK\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_MALLOC\n+\t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_ALIGNED_ALLOC\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_CALLOC\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_FREE\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_VA_END\n@@ -1229,7 +1233,8 @@ eliminate_unnecessary_stmts (void)\n \t\t     special logic we apply to malloc/free pair removal.  */\n \t\t  && (!(call = gimple_call_fndecl (stmt))\n \t\t      || DECL_BUILT_IN_CLASS (call) != BUILT_IN_NORMAL\n-\t\t      || (DECL_FUNCTION_CODE (call) != BUILT_IN_MALLOC\n+\t\t      || (DECL_FUNCTION_CODE (call) != BUILT_IN_ALIGNED_ALLOC\n+\t\t\t  && DECL_FUNCTION_CODE (call) != BUILT_IN_MALLOC\n \t\t\t  && DECL_FUNCTION_CODE (call) != BUILT_IN_CALLOC\n \t\t\t  && DECL_FUNCTION_CODE (call) != BUILT_IN_ALLOCA\n \t\t\t  && (DECL_FUNCTION_CODE (call)"}]}