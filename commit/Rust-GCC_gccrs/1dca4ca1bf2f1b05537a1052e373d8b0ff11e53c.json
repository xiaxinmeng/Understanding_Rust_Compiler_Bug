{"sha": "1dca4ca1bf2f1b05537a1052e373d8b0ff11e53c", "node_id": "C_kwDOANBUbNoAKDFkY2E0Y2ExYmYyZjFiMDU1MzdhMTA1MmUzNzNkOGIwZmYxMWU1M2M", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2022-03-29T15:59:37Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2022-03-29T15:59:37Z"}, "message": "arm: temporarily disable 'local' pcs selection (PR96882)\n\nThe arm port has an optimization used during selection of the\nfunction's ABI to permit deviation from the strict ABI when the\nfunction does not escape the current translation unit.\n\nUnfortunately, the ABI selection it makes can be unsafe if it changes\nhow a result is returned because not enough information is available\nvia the RETURN_IN_MEMORY hook to determine where the function gets\nused.  This can result in some parts of the compiler thinking a value\nis returned in memory while others think it is returned in registers.\n\nTo mitigate this, this patch temporarily disables the optimization and\nfalls back to using the default ABI for the translation.\n\ngcc/ChangeLog:\n\n\tPR target/96882\n\t* config/arm/arm.cc (arm_get_pcs_model): Disable selection of\n\tARM_PCS_AAPCS_LOCAL.", "tree": {"sha": "fd71996db342fdff79b0dbdfa519a2c3df39750c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd71996db342fdff79b0dbdfa519a2c3df39750c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dca4ca1bf2f1b05537a1052e373d8b0ff11e53c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dca4ca1bf2f1b05537a1052e373d8b0ff11e53c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dca4ca1bf2f1b05537a1052e373d8b0ff11e53c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dca4ca1bf2f1b05537a1052e373d8b0ff11e53c/comments", "author": null, "committer": null, "parents": [{"sha": "a2eacdbd4c4a698b3b6f27ef5e1f8dd3d836b2e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2eacdbd4c4a698b3b6f27ef5e1f8dd3d836b2e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2eacdbd4c4a698b3b6f27ef5e1f8dd3d836b2e5"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "26ed7f97fc6300998be087b6cd655a9d1fdf4bb9", "filename": "gcc/config/arm/arm.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dca4ca1bf2f1b05537a1052e373d8b0ff11e53c/gcc%2Fconfig%2Farm%2Farm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dca4ca1bf2f1b05537a1052e373d8b0ff11e53c/gcc%2Fconfig%2Farm%2Farm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.cc?ref=1dca4ca1bf2f1b05537a1052e373d8b0ff11e53c", "patch": "@@ -6194,7 +6194,7 @@ arm_pcs_from_attribute (tree attr)\n    specification, DECL is the specific declartion.  DECL may be null if\n    the call could be indirect or if this is a library call.  */\n static enum arm_pcs\n-arm_get_pcs_model (const_tree type, const_tree decl)\n+arm_get_pcs_model (const_tree type, const_tree decl ATTRIBUTE_UNUSED)\n {\n   bool user_convention = false;\n   enum arm_pcs user_pcs = arm_pcs_default;\n@@ -6228,6 +6228,14 @@ arm_get_pcs_model (const_tree type, const_tree decl)\n \treturn ARM_PCS_AAPCS;\n       else if (user_convention)\n \treturn user_pcs;\n+#if 0\n+      /* Unfortunately, this is not safe and can lead to wrong code\n+\t being generated (PR96882).  Not all calls into the back-end\n+\t pass the DECL, so it is unsafe to make any PCS-changing\n+\t decisions based on it.  In particular the RETURN_IN_MEMORY\n+\t hook is only ever passed a TYPE.  This needs revisiting to\n+\t see if there are any partial improvements that can be\n+\t re-enabled.  */\n       else if (decl && flag_unit_at_a_time)\n \t{\n \t  /* Local functions never leak outside this compilation unit,\n@@ -6239,6 +6247,7 @@ arm_get_pcs_model (const_tree type, const_tree decl)\n \t  if (local_info_node && local_info_node->local)\n \t    return ARM_PCS_AAPCS_LOCAL;\n \t}\n+#endif\n     }\n   else if (user_convention && user_pcs != arm_pcs_default)\n     sorry (\"PCS variant\");"}]}