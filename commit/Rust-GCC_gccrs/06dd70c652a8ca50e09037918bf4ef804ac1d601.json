{"sha": "06dd70c652a8ca50e09037918bf4ef804ac1d601", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZkZDcwYzY1MmE4Y2E1MGUwOTAzNzkxOGJmNGVmODA0YWMxZDYwMQ==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "2001-01-05T03:58:12Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2001-01-05T03:58:12Z"}, "message": "c4x.c (c4x_init_builtins): Remove builtin support for 'abs', 'labs', and 'fabs'.\n\n\t* config/c4x/c4x.c (c4x_init_builtins): Remove builtin support\n\tfor 'abs', 'labs', and 'fabs'.\n\t(c4x_expand_builtin): Likewise.\n\t* config/c4x/c4x.h (enum c4x_builtins): Likewise.\n\nFrom-SVN: r38702", "tree": {"sha": "aeea9175b71b47a39a19641ffe5835ec44bf79c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aeea9175b71b47a39a19641ffe5835ec44bf79c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06dd70c652a8ca50e09037918bf4ef804ac1d601", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06dd70c652a8ca50e09037918bf4ef804ac1d601", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06dd70c652a8ca50e09037918bf4ef804ac1d601", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06dd70c652a8ca50e09037918bf4ef804ac1d601/comments", "author": null, "committer": null, "parents": [{"sha": "99e87c10036e8d45f31415ab6e3dc66c61bf4752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e87c10036e8d45f31415ab6e3dc66c61bf4752", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99e87c10036e8d45f31415ab6e3dc66c61bf4752"}], "stats": {"total": 61, "additions": 11, "deletions": 50}, "files": [{"sha": "a710137906ba9c6a5b35eb6951e14c2a7965a639", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06dd70c652a8ca50e09037918bf4ef804ac1d601/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06dd70c652a8ca50e09037918bf4ef804ac1d601/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06dd70c652a8ca50e09037918bf4ef804ac1d601", "patch": "@@ -1,3 +1,10 @@\n+2001-01-05  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.c (c4x_init_builtins): Remove builtin support\n+\tfor 'abs', 'labs', and 'fabs'.\n+\t(c4x_expand_builtin): Likewise.\n+\t* config/c4x/c4x.h (enum c4x_builtins): Likewise.\n+\n 2001-01-05  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/sh/sh.md (prget, prset): New insn types.\n@@ -7,7 +14,7 @@\n \tfor prset and prget.\n \n 2001-01-05  Michael Hayes  <mhayes@redhat.com>\n-\n+\t\n \t* loop.h (struct loop_reg): New.\n \t(struct loop_regs): Change to use array of `struct loop_reg'.\n \t* loop.c: Replace assortment of varrays with single regs array."}, {"sha": "230b54cf0d2c49df265681f7a110e1873b04e5e4", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 3, "deletions": 46, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06dd70c652a8ca50e09037918bf4ef804ac1d601/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06dd70c652a8ca50e09037918bf4ef804ac1d601/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=06dd70c652a8ca50e09037918bf4ef804ac1d601", "patch": "@@ -829,11 +829,11 @@ c4x_expand_prologue ()\n \t  /* FIXME: Assume ISR doesn't require more than 32767 words\n \t     of local variables.  */\n \t  if (size > 32767)\n-\t    error (\"ISR %s requires %d words of local variables, \"\n-\t\t   \"maximum is 32767.\", current_function_name, size);\n+\t    error (\"ISR %s requires %d words of local vars, max is 32767.\",\n+\t\t   current_function_name, size);\n \t  insn = emit_insn (gen_addqi3 (gen_rtx_REG (QImode, SP_REGNO),\n \t\t\t\t        gen_rtx_REG (QImode, SP_REGNO),\n-\t\t\t\t\tGEN_INT(size)));\n+\t\t\t\t\tGEN_INT (size)));\n           RTX_FRAME_RELATED_P (insn) = 1;\n \t}\n       for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n@@ -4867,22 +4867,6 @@ void\n c4x_init_builtins (endlink)\n      tree endlink;\n {\n-\n-  builtin_function (\"abs\",\n-\t\t    build_function_type\n-\t\t    (integer_type_node, \n-\t\t     tree_cons (NULL_TREE, integer_type_node, endlink)),\n- \t\t    C4X_BUILTIN_ABS, BUILT_IN_MD, NULL_PTR);\n-  builtin_function (\"fabs\",\n- \t\t    build_function_type\n-\t\t    (double_type_node, \n-\t\t     tree_cons (NULL_TREE, double_type_node, endlink)),\n- \t\t    C4X_BUILTIN_FABS, BUILT_IN_MD, NULL_PTR);\n-  builtin_function (\"labs\",\n-\t\t    build_function_type \n-\t\t    (long_integer_type_node, \n-\t\t     tree_cons (NULL_TREE, long_integer_type_node, endlink)),\n-\t\t    C4X_BUILTIN_LABS, BUILT_IN_MD, NULL_PTR);\n   builtin_function (\"fast_ftoi\",\n \t\t    build_function_type \n \t\t    (integer_type_node,\n@@ -4938,33 +4922,6 @@ c4x_expand_builtin (exp, target, subtarget, mode, ignore)\n \n   switch (fcode)\n     {\n-    case C4X_BUILTIN_ABS:\n-      arg0 = TREE_VALUE (arglist);\n-      r0 = expand_expr (arg0, NULL_RTX, QImode, 0);\n-      r0 = protect_from_queue (r0, 0);\n-      if (! target || ! register_operand (target, QImode))\n-\ttarget = gen_reg_rtx (QImode);\n-      emit_insn (gen_absqi2 (target, r0));\n-      return target;\n-\n-    case C4X_BUILTIN_FABS:\n-      arg0 = TREE_VALUE (arglist);\n-      r0 = expand_expr (arg0, NULL_RTX, QFmode, 0);\n-      r0 = protect_from_queue (r0, 0);\n-      if (! target || ! register_operand (target, QFmode))\n-\ttarget = gen_reg_rtx (QFmode);\n-      emit_insn (gen_absqf2 (target, r0));\n-      return target;\n-\n-    case C4X_BUILTIN_LABS:\n-      arg0 = TREE_VALUE (arglist);\n-      r0 = expand_expr (arg0, NULL_RTX, QImode, 0);\n-      r0 = protect_from_queue (r0, 0);\n-      if (! target || ! register_operand (target, QImode))\n-\ttarget = gen_reg_rtx (QImode);\n-      emit_insn (gen_absqi2 (target, r0));\n-      return target;\n-\n     case C4X_BUILTIN_FIX:\n       arg0 = TREE_VALUE (arglist);\n       r0 = expand_expr (arg0, NULL_RTX, QFmode, 0);"}, {"sha": "49b979eca5192173ec464e53e0ceda65653615a4", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06dd70c652a8ca50e09037918bf4ef804ac1d601/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06dd70c652a8ca50e09037918bf4ef804ac1d601/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=06dd70c652a8ca50e09037918bf4ef804ac1d601", "patch": "@@ -2711,9 +2711,6 @@ if (final_sequence != NULL_RTX)\t\t\t\t\\\n enum c4x_builtins\n {\n \t\t\t/*\tintrinsic name\t\t*/\n-  C4X_BUILTIN_ABS,\t/*\tabs\t\t\t*/\n-  C4X_BUILTIN_FABS,\t/*\tfabs\t\t\t*/\n-  C4X_BUILTIN_LABS,\t/*\tlabs\t\t\t*/\n   C4X_BUILTIN_FIX,\t/*\tfast_ftoi\t\t*/\n   C4X_BUILTIN_FIX_ANSI,\t/*\tansi_ftoi\t\t*/\n   C4X_BUILTIN_MPYI,\t/*\tfast_imult (only C3x)\t*/"}]}