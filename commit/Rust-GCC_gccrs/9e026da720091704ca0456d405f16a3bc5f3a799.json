{"sha": "9e026da720091704ca0456d405f16a3bc5f3a799", "node_id": "C_kwDOANBUbNoAKDllMDI2ZGE3MjAwOTE3MDRjYTA0NTZkNDA1ZjE2YTNiYzVmM2E3OTk", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-07-30T07:23:20Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-11-24T20:38:11Z"}, "message": "Reduce scope of a few 'class loop *loop' variables\n\nFurther clean-up after commit e41ba804ba5f5ca433e09238d561b1b4c8b10985\n\"Use range-based for loops for traversing loops\".  No functional change.\n\n\tgcc/\n\t* cfgloop.c (verify_loop_structure): Reduce scope of\n\t'class loop *loop' variable.\n\t* ipa-fnsummary.c (analyze_function_body): Likewise.\n\t* loop-init.c (fix_loop_structure): Likewise.\n\t* loop-invariant.c (calculate_loop_reg_pressure): Likewise.\n\t* predict.c (predict_loops): Likewise.\n\t* tree-loop-distribution.c (loop_distribution::execute): Likewise.\n\t* tree-vectorizer.c (pass_vectorize::execute): Likewise.", "tree": {"sha": "3a7f3baacd6108840078139ebf1b863db0089485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a7f3baacd6108840078139ebf1b863db0089485"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e026da720091704ca0456d405f16a3bc5f3a799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e026da720091704ca0456d405f16a3bc5f3a799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e026da720091704ca0456d405f16a3bc5f3a799", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e026da720091704ca0456d405f16a3bc5f3a799/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5deacf6058d1bc7261a75c9fd1f116c4442e9e60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5deacf6058d1bc7261a75c9fd1f116c4442e9e60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5deacf6058d1bc7261a75c9fd1f116c4442e9e60"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "3190d12b2ce77c7cfdbe0c7c68bafd5101811267", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e026da720091704ca0456d405f16a3bc5f3a799/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e026da720091704ca0456d405f16a3bc5f3a799/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=9e026da720091704ca0456d405f16a3bc5f3a799", "patch": "@@ -1398,7 +1398,6 @@ verify_loop_structure (void)\n {\n   unsigned *sizes, i, j;\n   basic_block bb, *bbs;\n-  class loop *loop;\n   int err = 0;\n   edge e;\n   unsigned num = number_of_loops (cfun);\n@@ -1689,7 +1688,7 @@ verify_loop_structure (void)\n \t      for (; exit; exit = exit->next_e)\n \t\teloops++;\n \n-\t      for (loop = bb->loop_father;\n+\t      for (class loop *loop = bb->loop_father;\n \t\t   loop != e->dest->loop_father\n \t\t   /* When a loop exit is also an entry edge which\n \t\t      can happen when avoiding CFG manipulations"}, {"sha": "cb13d2e4b3c9d8455ae597ce90ced72f6f65fff6", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e026da720091704ca0456d405f16a3bc5f3a799/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e026da720091704ca0456d405f16a3bc5f3a799/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=9e026da720091704ca0456d405f16a3bc5f3a799", "patch": "@@ -2934,7 +2934,6 @@ analyze_function_body (struct cgraph_node *node, bool early)\n   if (nonconstant_names.exists () && !early)\n     {\n       ipa_fn_summary *s = ipa_fn_summaries->get (node);\n-      class loop *loop;\n       unsigned max_loop_predicates = opt_for_fn (node->decl,\n \t\t\t\t\t\t param_ipa_max_loop_predicates);\n \n@@ -2978,7 +2977,7 @@ analyze_function_body (struct cgraph_node *node, bool early)\n       /* To avoid quadratic behavior we analyze stride predicates only\n          with respect to the containing loop.  Thus we simply iterate\n \t over all defs in the outermost loop body.  */\n-      for (loop = loops_for_fn (cfun)->tree_root->inner;\n+      for (class loop *loop = loops_for_fn (cfun)->tree_root->inner;\n \t   loop != NULL; loop = loop->next)\n \t{\n \t  ipa_predicate loop_stride = true;"}, {"sha": "f0931a996617d62cd305ac4d0014c0619d983c16", "filename": "gcc/loop-init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e026da720091704ca0456d405f16a3bc5f3a799/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e026da720091704ca0456d405f16a3bc5f3a799/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=9e026da720091704ca0456d405f16a3bc5f3a799", "patch": "@@ -201,7 +201,6 @@ fix_loop_structure (bitmap changed_bbs)\n {\n   basic_block bb;\n   int record_exits = 0;\n-  class loop *loop;\n   unsigned old_nloops, i;\n \n   timevar_push (TV_LOOP_INIT);\n@@ -279,6 +278,7 @@ fix_loop_structure (bitmap changed_bbs)\n \n   /* Finally free deleted loops.  */\n   bool any_deleted = false;\n+  class loop *loop;\n   FOR_EACH_VEC_ELT (*get_loops (cfun), i, loop)\n     if (loop && loop->header == NULL)\n       {"}, {"sha": "5eee2e5c9f84b1b4a81d2bf038cc40e9992c3371", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e026da720091704ca0456d405f16a3bc5f3a799/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e026da720091704ca0456d405f16a3bc5f3a799/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=9e026da720091704ca0456d405f16a3bc5f3a799", "patch": "@@ -2134,7 +2134,7 @@ calculate_loop_reg_pressure (void)\n   basic_block bb;\n   rtx_insn *insn;\n   rtx link;\n-  class loop *loop, *parent;\n+  class loop *parent;\n \n   for (auto loop : loops_list (cfun, 0))\n     if (loop->aux == NULL)\n@@ -2151,7 +2151,7 @@ calculate_loop_reg_pressure (void)\n       if (curr_loop == current_loops->tree_root)\n \tcontinue;\n \n-      for (loop = curr_loop;\n+      for (class loop *loop = curr_loop;\n \t   loop != current_loops->tree_root;\n \t   loop = loop_outer (loop))\n \tbitmap_ior_into (&LOOP_DATA (loop)->regs_live, DF_LR_IN (bb));"}, {"sha": "3cb4e3c0eb57dac094001eb917e0d85e3035f987", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e026da720091704ca0456d405f16a3bc5f3a799/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e026da720091704ca0456d405f16a3bc5f3a799/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=9e026da720091704ca0456d405f16a3bc5f3a799", "patch": "@@ -1927,7 +1927,6 @@ predict_extra_loop_exits (edge exit_edge)\n static void\n predict_loops (void)\n {\n-  class loop *loop;\n   basic_block bb;\n   hash_set <class loop *> with_recursion(10);\n \n@@ -1941,7 +1940,7 @@ predict_loops (void)\n \t    && (decl = gimple_call_fndecl (gsi_stmt (gsi))) != NULL\n \t    && recursive_call_p (current_function_decl, decl))\n \t  {\n-\t    loop = bb->loop_father;\n+\t    class loop *loop = bb->loop_father;\n \t    while (loop && !with_recursion.add (loop))\n \t      loop = loop_outer (loop);\n \t  }"}, {"sha": "c9e18739165fa1d224239610adabbac4dcdf6fef", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e026da720091704ca0456d405f16a3bc5f3a799/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e026da720091704ca0456d405f16a3bc5f3a799/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=9e026da720091704ca0456d405f16a3bc5f3a799", "patch": "@@ -3737,7 +3737,6 @@ prepare_perfect_loop_nest (class loop *loop)\n unsigned int\n loop_distribution::execute (function *fun)\n {\n-  class loop *loop;\n   bool changed = false;\n   basic_block bb;\n   control_dependences *cd = NULL;\n@@ -3845,6 +3844,7 @@ loop_distribution::execute (function *fun)\n       /* Destroy loop bodies that could not be reused.  Do this late as we\n \t otherwise can end up refering to stale data in control dependences.  */\n       unsigned i;\n+      class loop *loop;\n       FOR_EACH_VEC_ELT (loops_to_be_destroyed, i, loop)\n \tdestroy_loop (loop);\n "}, {"sha": "f4a2873a91eed9fa0641686632426edc98313dc5", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e026da720091704ca0456d405f16a3bc5f3a799/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e026da720091704ca0456d405f16a3bc5f3a799/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=9e026da720091704ca0456d405f16a3bc5f3a799", "patch": "@@ -1209,7 +1209,6 @@ pass_vectorize::execute (function *fun)\n   unsigned int i;\n   unsigned int num_vectorized_loops = 0;\n   unsigned int vect_loops_num;\n-  class loop *loop;\n   hash_table<simduid_to_vf> *simduid_to_vf_htab = NULL;\n   hash_table<simd_array_to_simduid> *simd_array_to_simduid_htab = NULL;\n   bool any_ifcvt_loops = false;\n@@ -1293,7 +1292,7 @@ pass_vectorize::execute (function *fun)\n   if (any_ifcvt_loops)\n     for (i = 1; i < number_of_loops (fun); i++)\n       {\n-\tloop = get_loop (fun, i);\n+\tclass loop *loop = get_loop (fun, i);\n \tif (loop && loop->dont_vectorize)\n \t  {\n \t    gimple *g = vect_loop_vectorized_call (loop);\n@@ -1342,7 +1341,7 @@ pass_vectorize::execute (function *fun)\n       loop_vec_info loop_vinfo;\n       bool has_mask_store;\n \n-      loop = get_loop (fun, i);\n+      class loop *loop = get_loop (fun, i);\n       if (!loop || !loop->aux)\n \tcontinue;\n       loop_vinfo = (loop_vec_info) loop->aux;"}]}