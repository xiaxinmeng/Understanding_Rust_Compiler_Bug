{"sha": "5e91e92ede69d69e331a6acac2502a69e4a5abb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU5MWU5MmVkZTY5ZDY5ZTMzMWE2YWNhYzI1MDJhNjllNGE1YWJiNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-07-02T14:49:09Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-07-02T14:49:09Z"}, "message": "type_traits.h (_Is_normal_iterator): Move...\n\n2004-07-02  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/type_traits.h (_Is_normal_iterator): Move...\n\t* include/bits/cpp_type_traits.h: ... here, renamed to\n\t__is_normal_iterator and consistent with the other traits.\n\t* include/bits/stl_algobase.h (__copy_ni1, __copy_ni2): Convert\n\tto the struct __copy_normal and three specializations.\n\t(__copy_backward_output_normal_iterator,\n\t__copy_backward_input_normal_iterator): Likewise, convert to\n\tthe struct __copy_backward_normal and three specializations.\n\t(copy, copy_backward): Use the latter.\n\t(__copy_aux, __copy_backward_aux): Very minor tweaks.\n\nFrom-SVN: r84019", "tree": {"sha": "ef4bfafe4c9e720ecea1bb370055ac81c0f2892a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef4bfafe4c9e720ecea1bb370055ac81c0f2892a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e91e92ede69d69e331a6acac2502a69e4a5abb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e91e92ede69d69e331a6acac2502a69e4a5abb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e91e92ede69d69e331a6acac2502a69e4a5abb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e91e92ede69d69e331a6acac2502a69e4a5abb6/comments", "author": null, "committer": null, "parents": [{"sha": "ec13a3ef9b7ebf476a9f27276afba8b27dfbcf2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec13a3ef9b7ebf476a9f27276afba8b27dfbcf2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec13a3ef9b7ebf476a9f27276afba8b27dfbcf2c"}], "stats": {"total": 202, "additions": 118, "deletions": 84}, "files": [{"sha": "4a28639dd986de0a76113900d59a2556cb85ef7e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e91e92ede69d69e331a6acac2502a69e4a5abb6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e91e92ede69d69e331a6acac2502a69e4a5abb6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5e91e92ede69d69e331a6acac2502a69e4a5abb6", "patch": "@@ -1,3 +1,16 @@\n+2004-07-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/type_traits.h (_Is_normal_iterator): Move...\n+\t* include/bits/cpp_type_traits.h: ... here, renamed to\n+\t__is_normal_iterator and consistent with the other traits.\n+\t* include/bits/stl_algobase.h (__copy_ni1, __copy_ni2): Convert\n+\tto the struct __copy_normal and three specializations.\n+\t(__copy_backward_output_normal_iterator,\n+\t__copy_backward_input_normal_iterator): Likewise, convert to\n+\tthe struct __copy_backward_normal and three specializations.\n+\t(copy, copy_backward): Use the latter.\n+\t(__copy_aux, __copy_backward_aux): Very minor tweaks.\n+\n 2004-07-01  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_algobase.h (__copy_trivial): Remove."}, {"sha": "feb7b1c93e8d118546c53cdea23adb5761c70de0", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e91e92ede69d69e331a6acac2502a69e4a5abb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e91e92ede69d69e331a6acac2502a69e4a5abb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=5e91e92ede69d69e331a6acac2502a69e4a5abb6", "patch": "@@ -42,7 +42,7 @@\n //\n // This file provides some compile-time information about various types.\n // These representations were designed, on purpose, to be constant-expressions\n-// and not types as found in <stl/bits/type_traits.h>.  In particular, they\n+// and not types as found in <bits/type_traits.h>.  In particular, they\n // can be used in control structures and the optimizer hopefully will do\n // the obvious thing.\n //\n@@ -77,6 +77,13 @@ namespace __gnu_internal\n   __two& __test_type (...);\n } // namespace __gnu_internal\n \n+// Forward declaration hack, should really include this from somewhere.\n+namespace __gnu_cxx\n+{\n+  template<typename _Iterator, typename _Container>\n+    class __normal_iterator;\n+} // namespace __gnu_cxx\n+\n namespace std\n {\n   // Compare for equality of types.\n@@ -324,6 +331,28 @@ namespace std\n \t};\n     };\n \n+  //\n+  // Normal iterator type\n+  //\n+  template<typename _Tp>\n+    struct __is_normal_iterator\n+    {\n+      enum\n+\t{\n+\t  _M_type = 0\n+\t};\n+    };\n+\n+  template<typename _Iterator, typename _Container>\n+    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,\n+\t\t\t\t\t\t\t      _Container> >\n+    {\n+      enum\n+\t{\n+\t  _M_type = 1\n+\t};\n+    };\n+\n   //\n   // An arithmetic type is an integer type or a floating point type\n   //"}, {"sha": "39a52ca1812a0fda20193c3e7807250a27842aa1", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 75, "deletions": 63, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e91e92ede69d69e331a6acac2502a69e4a5abb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e91e92ede69d69e331a6acac2502a69e4a5abb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=5e91e92ede69d69e331a6acac2502a69e4a5abb6", "patch": "@@ -66,10 +66,8 @@\n #include <climits>\n #include <cstdlib>\n #include <cstddef>\n-#include <new>\n #include <iosfwd>\n #include <bits/stl_pair.h>\n-#include <bits/type_traits.h>\n #include <bits/cpp_type_traits.h>\n #include <bits/stl_iterator_base_types.h>\n #include <bits/stl_iterator_base_funcs.h>\n@@ -220,7 +218,7 @@ namespace std\n       return __a;\n     }\n \n-  // All of these auxiliary functions serve two purposes.  (1) Replace\n+  // All of these auxiliary structs serve two purposes.  (1) Replace\n   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,\n   // because the input and output ranges are permitted to overlap.)\n   // (2) If we're using random access iterators, then write the loop as\n@@ -276,45 +274,50 @@ namespace std\n       typedef typename iterator_traits<_II>::value_type _ValueTypeI;\n       typedef typename iterator_traits<_OI>::value_type _ValueTypeO;\n       typedef typename iterator_traits<_II>::iterator_category _Category;\n-      const bool __simple = (__is_trivially_copyable<_ValueTypeO>::_M_type\n+      const bool __simple = (__is_trivially_copyable<_ValueTypeI>::_M_type\n \t                     && __is_pointer<_II>::_M_type\n \t                     && __is_pointer<_OI>::_M_type\n \t\t\t     && __are_same<_ValueTypeI, _ValueTypeO>::_M_type);\n \n       return std::__copy<__simple, _Category>::copy(__first, __last, __result);\n     }\n \n-  template<typename _InputIterator, typename _OutputIterator>\n-    inline _OutputIterator\n-    __copy_ni2(_InputIterator __first, _InputIterator __last,\n-\t       _OutputIterator __result, __true_type)\n-    { return _OutputIterator(std::__copy_aux(__first, __last,\n-\t\t\t\t\t     __result.base())); }\n+  template<bool, bool>\n+    struct __copy_normal\n+    {\n+      template<typename _II, typename _OI>\n+        static _OI\n+        copy_n(_II __first, _II __last, _OI __result)\n+        { return std::__copy_aux(__first, __last, __result); }\n+    };\n \n-  template<typename _InputIterator, typename _OutputIterator>\n-    inline _OutputIterator\n-    __copy_ni2(_InputIterator __first, _InputIterator __last,\n-\t       _OutputIterator __result, __false_type)\n-    { return std::__copy_aux(__first, __last, __result); }\n+  template<>\n+    struct __copy_normal<true, false>\n+    {\n+      template<typename _II, typename _OI>\n+        static _OI\n+        copy_n(_II __first, _II __last, _OI __result)\n+        { return std::__copy_aux(__first.base(), __last.base(), __result); }\n+    };\n \n-  template<typename _InputIterator, typename _OutputIterator>\n-    inline _OutputIterator\n-    __copy_ni1(_InputIterator __first, _InputIterator __last,\n-\t       _OutputIterator __result, __true_type)\n+  template<>\n+    struct __copy_normal<false, true>\n     {\n-      typedef typename _Is_normal_iterator<_OutputIterator>::_Normal __Normal;\n-      return std::__copy_ni2(__first.base(), __last.base(),\n-\t\t\t     __result, __Normal());\n-    }\n+      template<typename _II, typename _OI>\n+        static _OI\n+        copy_n(_II __first, _II __last, _OI __result)\n+        { return _OI(std::__copy_aux(__first, __last, __result.base())); }\n+    };\n \n-  template<typename _InputIterator, typename _OutputIterator>\n-    inline _OutputIterator\n-    __copy_ni1(_InputIterator __first, _InputIterator __last,\n-\t       _OutputIterator __result, __false_type)\n+  template<>\n+    struct __copy_normal<true, true>\n     {\n-      typedef typename _Is_normal_iterator<_OutputIterator>::_Normal __Normal;\n-      return std::__copy_ni2(__first, __last, __result, __Normal());\n-    }\n+      template<typename _II, typename _OI>\n+        static _OI\n+        copy_n(_II __first, _II __last, _OI __result)\n+        { return _OI(std::__copy_aux(__first.base(), __last.base(),\n+\t\t\t\t     __result.base())); }\n+    };\n \n   /**\n    *  @brief Copies the range [first,last) into result.\n@@ -343,8 +346,10 @@ namespace std\n \t    typename iterator_traits<_InputIterator>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-       typedef typename _Is_normal_iterator<_InputIterator>::_Normal __Normal;\n-       return std::__copy_ni1(__first, __last, __result, __Normal());\n+       const bool __in = __is_normal_iterator<_InputIterator>::_M_type;\n+       const bool __out = __is_normal_iterator<_OutputIterator>::_M_type;\n+       return std::__copy_normal<__in, __out>::copy_n(__first, __last,\n+\t\t\t\t\t\t      __result);\n     }\n   \n   template<bool, typename>\n@@ -394,7 +399,7 @@ namespace std\n       typedef typename iterator_traits<_BI1>::value_type _ValueType1;\n       typedef typename iterator_traits<_BI2>::value_type _ValueType2;\n       typedef typename iterator_traits<_BI1>::iterator_category _Category;\n-      const bool __simple = (__is_trivially_copyable<_ValueType2>::_M_type\n+      const bool __simple = (__is_trivially_copyable<_ValueType1>::_M_type\n \t                     && __is_pointer<_BI1>::_M_type\n \t                     && __is_pointer<_BI2>::_M_type\n \t\t\t     && __are_same<_ValueType1, _ValueType2>::_M_type);\n@@ -403,38 +408,44 @@ namespace std\n \t\t\t\t\t\t\t       __result);\n     }\n \n-  template <typename _BI1, typename _BI2>\n-    inline _BI2\n-    __copy_backward_output_normal_iterator(_BI1 __first, _BI1 __last,\n-\t\t\t\t\t   _BI2 __result, __true_type)\n-    { return _BI2(std::__copy_backward_aux(__first, __last, __result.base())); }\n+  template<bool, bool>\n+    struct __copy_backward_normal\n+    {\n+      template<typename _BI1, typename _BI2>\n+        static _BI2\n+        copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)\n+        { return std::__copy_backward_aux(__first, __last, __result); }\n+    };\n \n-  template <typename _BI1, typename _BI2>\n-    inline _BI2\n-    __copy_backward_output_normal_iterator(_BI1 __first, _BI1 __last,\n-\t\t\t\t\t   _BI2 __result, __false_type)\n-    { return std::__copy_backward_aux(__first, __last, __result); }\n+  template<>\n+    struct __copy_backward_normal<true, false>\n+    {\n+      template<typename _BI1, typename _BI2>\n+        static _BI2\n+        copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)\n+        { return std::__copy_backward_aux(__first.base(), __last.base(),\n+\t\t\t\t\t  __result); }\n+    };\n \n-  template <typename _BI1, typename _BI2>\n-    inline _BI2\n-    __copy_backward_input_normal_iterator(_BI1 __first, _BI1 __last,\n-\t\t\t\t\t  _BI2 __result, __true_type)\n+  template<>\n+    struct __copy_backward_normal<false, true>\n     {\n-      typedef typename _Is_normal_iterator<_BI2>::_Normal __Normal;\n-      return std::__copy_backward_output_normal_iterator(__first.base(),\n-\t\t\t\t\t\t\t __last.base(),\n-\t\t\t\t\t\t\t __result, __Normal());\n-    }\n+      template<typename _BI1, typename _BI2>\n+        static _BI2\n+        copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)\n+        { return _BI2(std::__copy_backward_aux(__first, __last,\n+\t\t\t\t\t       __result.base())); }\n+    };\n \n-  template <typename _BI1, typename _BI2>\n-    inline _BI2\n-    __copy_backward_input_normal_iterator(_BI1 __first, _BI1 __last,\n-\t\t\t\t\t  _BI2 __result, __false_type)\n+  template<>\n+    struct __copy_backward_normal<true, true>\n     {\n-      typedef typename _Is_normal_iterator<_BI2>::_Normal __Normal;\n-      return std::__copy_backward_output_normal_iterator(__first, __last,\n-\t\t\t\t\t\t\t __result, __Normal());\n-    }\n+      template<typename _BI1, typename _BI2>\n+        static _BI2\n+        copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)\n+        { return _BI2(std::__copy_backward_aux(__first.base(), __last.base(),\n+\t\t\t\t\t       __result.base())); }\n+    };\n \n   /**\n    *  @brief Copies the range [first,last) into result.\n@@ -465,9 +476,10 @@ namespace std\n \t    typename iterator_traits<_BI2>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      typedef typename _Is_normal_iterator<_BI1>::_Normal __Normal;\n-      return std::__copy_backward_input_normal_iterator(__first, __last,\n-\t\t\t\t\t\t\t__result, __Normal());\n+      const bool __bi1 = __is_normal_iterator<_BI1>::_M_type;\n+      const bool __bi2 = __is_normal_iterator<_BI2>::_M_type;\n+      return std::__copy_backward_normal<__bi1, __bi2>::copy_b_n(__first, __last,\n+\t\t\t\t\t\t\t\t __result);\n     }\n \n   template<bool>"}, {"sha": "0a263e5e0b6f6b500529f657ba730e142f55e3f6", "filename": "libstdc++-v3/include/bits/type_traits.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e91e92ede69d69e331a6acac2502a69e4a5abb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e91e92ede69d69e331a6acac2502a69e4a5abb6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h?ref=5e91e92ede69d69e331a6acac2502a69e4a5abb6", "patch": "@@ -378,26 +378,6 @@ template<>\n     typedef __true_type _Integral;\n   };\n \n-template<typename _Tp>\n-  struct _Is_normal_iterator\n-  {\n-    typedef __false_type _Normal;\n-  };\n-\n-// Forward declaration hack, should really include this from somewhere.\n-namespace __gnu_cxx\n-{\n-  template<typename _Iterator, typename _Container>\n-    class __normal_iterator;\n-}\n-\n-template<typename _Iterator, typename _Container>\n-  struct _Is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,\n-\t\t\t\t\t\t\t   _Container> >\n-  {\n-    typedef __true_type _Normal;\n-  };\n-\n #endif /* _TYPE_TRAITS_H */\n \n // Local Variables:"}]}