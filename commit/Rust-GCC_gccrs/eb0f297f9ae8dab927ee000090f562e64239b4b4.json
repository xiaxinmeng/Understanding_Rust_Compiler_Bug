{"sha": "eb0f297f9ae8dab927ee000090f562e64239b4b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIwZjI5N2Y5YWU4ZGFiOTI3ZWUwMDAwOTBmNTYyZTY0MjM5YjRiNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T08:47:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T08:47:04Z"}, "message": "[multiple changes]\n\n2017-09-08  Ed Schonberg  <schonberg@adacore.com>\n\n        * sem_ch12.adb (Check_Generic_Parent): New procedure within\n        Analyze_Associations, to handle actual packages that depend on\n        previous instances.  If a package IAP that is an instantiation is\n        used as an actual in a subsequent instantiation SI in the same\n        scope, and IAP has a body, IAP must be frozen before SI. If\n        the generic parent of IAP is itself declared in a previous\n        instantiation in the same scope, that instantiation must also\n        be frozen before SI.\n        (Install_Body): Prevent double insertion of freeze node for\n        instance.\n\n2017-09-08  Hristian Kirtchev  <kirtchev@adacore.com>\n\n        * sem_prag.adb (Resolve_State): Update the\n        comment on documentation. Generate a reference to the state once\n        resolution takes place.\n\n2017-09-08  Ed Schonberg  <schonberg@adacore.com>\n\n        * sem_ch13.adb (Analyze_Aspect_Specifications, case\n        Linker_Section): If the aspect applies to an object declaration\n        with explicit initialization, do not delay the freezing of the\n        object, to prevent access-before-elaboration in the generated\n        initialization code.\n\n2017-09-08  Ed Schonberg  <schonberg@adacore.com>\n\n        * a-wtdeio.adb (Put, all versions): Use Long_Long_Integer\n        (Integer_Value (Item)) when the size of the fixed decimal type\n        is larger than Integer.\n\nFrom-SVN: r251866", "tree": {"sha": "02fd7c1a1492373ee9e5a7df7173ce829a9ba12d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02fd7c1a1492373ee9e5a7df7173ce829a9ba12d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb0f297f9ae8dab927ee000090f562e64239b4b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb0f297f9ae8dab927ee000090f562e64239b4b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb0f297f9ae8dab927ee000090f562e64239b4b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb0f297f9ae8dab927ee000090f562e64239b4b4/comments", "author": null, "committer": null, "parents": [{"sha": "be91c7e2aa3a25bd6e9c1a56820a4d238acd0f66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be91c7e2aa3a25bd6e9c1a56820a4d238acd0f66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be91c7e2aa3a25bd6e9c1a56820a4d238acd0f66"}], "stats": {"total": 93, "additions": 68, "deletions": 25}, "files": [{"sha": "1c13f9a878b1039d8675700c44a3facbd47cb4f9", "filename": "gcc/ada/a-wtdeio.adb", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0f297f9ae8dab927ee000090f562e64239b4b4/gcc%2Fada%2Fa-wtdeio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0f297f9ae8dab927ee000090f562e64239b4b4/gcc%2Fada%2Fa-wtdeio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wtdeio.adb?ref=eb0f297f9ae8dab927ee000090f562e64239b4b4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -112,16 +112,11 @@ package body Ada.Wide_Text_IO.Decimal_IO is\n    begin\n       if Num'Size > Integer'Size then\n          Aux.Put_LLD\n---           (TFT (File), Long_Long_Integer'Integer_Value (Item),\n---  ???\n-           (TFT (File), Long_Long_Integer (Item),\n+           (TFT (File), Long_Long_Integer'Integer_Value (Item),\n             Fore, Aft, Exp, Scale);\n       else\n          Aux.Put_Dec\n---           (TFT (File), Integer'Integer_Value (Item), Fore, Aft, Exp, Scale);\n---  ???\n-           (TFT (File), Integer (Item), Fore, Aft, Exp, Scale);\n-\n+           (TFT (File), Integer'Integer_Value (Item), Fore, Aft, Exp, Scale);\n       end if;\n    end Put;\n \n@@ -145,15 +140,11 @@ package body Ada.Wide_Text_IO.Decimal_IO is\n \n    begin\n       if Num'Size > Integer'Size then\n---       Aux.Puts_LLD\n---         (S, Long_Long_Integer'Integer_Value (Item), Aft, Exp, Scale);\n---  ???\n          Aux.Puts_LLD\n-           (S, Long_Long_Integer (Item), Aft, Exp, Scale);\n+           (S, Long_Long_Integer'Integer_Value (Item), Aft, Exp, Scale);\n+\n       else\n---       Aux.Puts_Dec (S, Integer'Integer_Value (Item), Aft, Exp, Scale);\n---  ???\n-         Aux.Puts_Dec (S, Integer (Item), Aft, Exp, Scale);\n+         Aux.Puts_Dec (S, Integer'Integer_Value (Item), Aft, Exp, Scale);\n       end if;\n \n       for J in S'Range loop"}, {"sha": "94bd498d74ab5e5ecec78b74fe10f1526f903ee0", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0f297f9ae8dab927ee000090f562e64239b4b4/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0f297f9ae8dab927ee000090f562e64239b4b4/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=eb0f297f9ae8dab927ee000090f562e64239b4b4", "patch": "@@ -1908,10 +1908,40 @@ package body Sem_Ch12 is\n                         Needs_Freezing : Boolean;\n                         S              : Entity_Id;\n \n+                        procedure Check_Generic_Parent;\n+                        --  The actual may be an instantiation of a unit\n+                        --  declared in a previous instantiation. If that\n+                        --  one is also in the current compilation, it must\n+                        --  itself be frozen before the actual.\n+                        --  Should this itself be recursive ???\n+\n+                        --------------------------\n+                        -- Check_Generic_Parent --\n+                        --------------------------\n+\n+                        procedure Check_Generic_Parent is\n+                           Par            : Entity_Id;\n+                        begin\n+                           if Nkind (Parent (Actual)) = N_Package_Specification\n+                           then\n+                              Par := Scope (Generic_Parent (Parent (Actual)));\n+                              if Is_Generic_Instance (Par)\n+                                and then Scope (Par) = Current_Scope\n+                                and then (No (Freeze_Node (Par))\n+                                  or else\n+                                    not Is_List_Member (Freeze_Node (Par)))\n+                              then\n+                                 Set_Has_Delayed_Freeze (Par);\n+                                 Append_Elmt (Par, Actuals_To_Freeze);\n+                              end if;\n+                           end if;\n+                        end Check_Generic_Parent;\n+\n                      begin\n                         if not Expander_Active\n                           or else not Has_Completion (Actual)\n                           or else not In_Same_Source_Unit (I_Node, Actual)\n+                          or else Is_Frozen (Actual)\n                           or else\n                             (Present (Renamed_Entity (Actual))\n                               and then not\n@@ -1943,6 +1973,7 @@ package body Sem_Ch12 is\n                            end loop;\n \n                            if Needs_Freezing then\n+                              Check_Generic_Parent;\n                               Set_Has_Delayed_Freeze (Actual);\n                               Append_Elmt (Actual, Actuals_To_Freeze);\n                            end if;\n@@ -9281,7 +9312,10 @@ package body Sem_Ch12 is\n       --  if no delay is needed, we place the freeze node at the end of the\n       --  current declarative part.\n \n-      if Expander_Active then\n+      if Expander_Active\n+        and then (No (Freeze_Node (Act_Id))\n+          or else not Is_List_Member (Freeze_Node (Act_Id)))\n+      then\n          Ensure_Freeze_Node (Act_Id);\n          F_Node := Freeze_Node (Act_Id);\n "}, {"sha": "90b629ce92601157984724dcdd76ff1f3e4d6905", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0f297f9ae8dab927ee000090f562e64239b4b4/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0f297f9ae8dab927ee000090f562e64239b4b4/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=eb0f297f9ae8dab927ee000090f562e64239b4b4", "patch": "@@ -2208,6 +2208,20 @@ package body Sem_Ch13 is\n                          Expression => Relocate_Node (Expr))),\n                      Pragma_Name                  => Chars (Id));\n \n+                  --  Linker_Section does not need delaying, as its argument\n+                  --  must be a static string. Furthermore, if applied to\n+                  --  an object with an explicit initialization, the object\n+                  --  must be frozen in order to elaborate the initialization\n+                  --  code. (This is already done for types with implicit\n+                  --  initialization, such as protected types.)\n+\n+                  if A_Id = Aspect_Linker_Section\n+                    and then Nkind (N) = N_Object_Declaration\n+                    and then Has_Init_Expression (N)\n+                  then\n+                     Delay_Required := False;\n+                  end if;\n+\n                --  Synchronization\n \n                --  Corresponds to pragma Implemented, construct the pragma"}, {"sha": "2f6b2306f6012215574f0a4e7592b2952da19092", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0f297f9ae8dab927ee000090f562e64239b4b4/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0f297f9ae8dab927ee000090f562e64239b4b4/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=eb0f297f9ae8dab927ee000090f562e64239b4b4", "patch": "@@ -283,9 +283,9 @@ package body Sem_Prag is\n    --  reference for future checks (see Analyze_Refined_State_In_Decls).\n \n    procedure Resolve_State (N : Node_Id);\n-   --  Handle the overloading of state names by functions. When N denotes a\n-   --  function, this routine finds the corresponding state and sets the entity\n-   --  of N to that of the state.\n+   --  Handle the overloading of state names by parameterless functions. When N\n+   --  denotes a function, this routine finds the corresponding state and sets\n+   --  the entity of N to that of the state.\n \n    procedure Rewrite_Assertion_Kind\n      (N           : Node_Id;\n@@ -30229,16 +30229,20 @@ package body Sem_Prag is\n          --  homonym chain looking for an abstract state.\n \n          if Ekind (Func) = E_Function and then Has_Homonym (Func) then\n+            pragma Assert (Is_Overloaded (N));\n+\n             State := Homonym (Func);\n             while Present (State) loop\n+               if Ekind (State) = E_Abstract_State then\n \n-               --  Resolve the overloading by setting the proper entity of the\n-               --  reference to that of the state.\n+                  --  Resolve the overloading by setting the proper entity of\n+                  --  the reference to that of the state.\n \n-               if Ekind (State) = E_Abstract_State then\n-                  Set_Etype           (N, Standard_Void_Type);\n-                  Set_Entity          (N, State);\n-                  Set_Associated_Node (N, State);\n+                  Set_Etype         (N, Standard_Void_Type);\n+                  Set_Entity        (N, State);\n+                  Set_Is_Overloaded (N, False);\n+\n+                  Generate_Reference (State, N);\n                   return;\n                end if;\n "}]}