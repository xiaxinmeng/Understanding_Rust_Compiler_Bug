{"sha": "60d0536b1edb935829a92be6526393e7c3a31896", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBkMDUzNmIxZWRiOTM1ODI5YTkyYmU2NTI2MzkzZTdjM2EzMTg5Ng==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1999-06-21T07:25:35Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1999-06-21T07:25:35Z"}, "message": "Add cpp support for ARM920 and ARM920T processor types.\n\nMinor formatting tidies in arm.c and arm.md\n\nFrom-SVN: r27657", "tree": {"sha": "653bd7ed48f03c103cc6805743de51e4082230ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/653bd7ed48f03c103cc6805743de51e4082230ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60d0536b1edb935829a92be6526393e7c3a31896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d0536b1edb935829a92be6526393e7c3a31896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60d0536b1edb935829a92be6526393e7c3a31896", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d0536b1edb935829a92be6526393e7c3a31896/comments", "author": null, "committer": null, "parents": [{"sha": "d4308a83ff4d0133faff3eb96729ff4671c2cf38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4308a83ff4d0133faff3eb96729ff4671c2cf38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4308a83ff4d0133faff3eb96729ff4671c2cf38"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "6a02178dd87def45c04e9ad31af54bcb78a341ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d0536b1edb935829a92be6526393e7c3a31896/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d0536b1edb935829a92be6526393e7c3a31896/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60d0536b1edb935829a92be6526393e7c3a31896", "patch": "@@ -1,3 +1,8 @@\n+Mon Jun 21 14:58:42 1999  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* config/arm/arm.h: Add cpp support for ARM920 and ARM920T cpu\n+\ttypes. \n+\n Mon Jun 21 06:22:21 1999  Mark Elbrecht <snowball3@bigfoot.com>\n \n \t* i386/djgpp.h (LIB_SPEC): New."}, {"sha": "d2c037c88e39c64d01b8d98a718e45c85c6114ea", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d0536b1edb935829a92be6526393e7c3a31896/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d0536b1edb935829a92be6526393e7c3a31896/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=60d0536b1edb935829a92be6526393e7c3a31896", "patch": "@@ -73,7 +73,7 @@ static int const_ok_for_op RTX_CODE_PROTO ((Hint, Rcode));\n /* True if we are currently building a constant table. */\n int making_const_table;\n \n-/*  Define the information needed to generate branch insns.  This is\n+/* Define the information needed to generate branch insns.  This is\n    stored from the compare operation. */\n rtx arm_compare_op0, arm_compare_op1;\n "}, {"sha": "629f04abad360482c975afff71d75c292f08a3bb", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d0536b1edb935829a92be6526393e7c3a31896/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d0536b1edb935829a92be6526393e7c3a31896/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=60d0536b1edb935829a92be6526393e7c3a31896", "patch": "@@ -141,6 +141,8 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n %{march=arm8:-D__ARM_ARCH_4__} \\\n %{march=arm810:-D__ARM_ARCH_4__} \\\n %{march=arm9:-D__ARM_ARCH_4T__} \\\n+%{march=arm920:-D__ARM_ARCH_4__} \\\n+%{march=arm920t:-D__ARM_ARCH_4T__} \\\n %{march=arm9tdmi:-D__ARM_ARCH_4T__} \\\n %{march=strongarm:-D__ARM_ARCH_4__} \\\n %{march=strongarm110:-D__ARM_ARCH_4__} \\\n@@ -171,6 +173,8 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n  %{mcpu=arm8:-D__ARM_ARCH_4__} \\\n  %{mcpu=arm810:-D__ARM_ARCH_4__} \\\n  %{mcpu=arm9:-D__ARM_ARCH_4T__} \\\n+ %{mcpu=arm920:-D__ARM_ARCH_4__} \\\n+ %{mcpu=arm920t:-D__ARM_ARCH_4T__} \\\n  %{mcpu=arm9tdmi:-D__ARM_ARCH_4T__} \\\n  %{mcpu=strongarm:-D__ARM_ARCH_4__} \\\n  %{mcpu=strongarm110:-D__ARM_ARCH_4__} \\\n@@ -317,7 +321,7 @@ function tries to return. */\n #define TARGET_APCS_FLOAT\t\t(target_flags & ARM_FLAG_APCS_FLOAT)\n #define TARGET_APCS_REENT\t\t(target_flags & ARM_FLAG_APCS_REENT)\n /* Note: TARGET_SHORT_BY_BYTES is really a misnomer.  What it means is\n-   that short values sould not be accessed using word load instructions\n+   that short values should not be accessed using word load instructions\n    as there is a possibility that they may not be word aligned and this\n    would generate an MMU fault.  On processors which do not have a 16 bit\n    load instruction therefore, short values must be loaded by individual"}, {"sha": "599621da0be172da26164b5b1feeca4492d2673f", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d0536b1edb935829a92be6526393e7c3a31896/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d0536b1edb935829a92be6526393e7c3a31896/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=60d0536b1edb935829a92be6526393e7c3a31896", "patch": "@@ -4267,7 +4267,7 @@\n ;; Often the return insn will be the same as loading from memory, so set attr\n (define_insn \"return\"\n   [(return)]\n-  \"USE_RETURN_INSN(FALSE)\"\n+  \"USE_RETURN_INSN (FALSE)\"\n   \"*\n {\n   extern int arm_ccfsm_state;\n@@ -4287,7 +4287,7 @@\n \t\t       [(match_operand 1 \"cc_register\" \"\") (const_int 0)])\n                       (return)\n                       (pc)))]\n-  \"USE_RETURN_INSN(TRUE)\"\n+  \"USE_RETURN_INSN (TRUE)\"\n   \"*\n {\n   extern int arm_ccfsm_state;\n@@ -4308,7 +4308,7 @@\n \t\t       [(match_operand 1 \"cc_register\" \"\") (const_int 0)])\n                       (pc)\n \t\t      (return)))]\n-  \"USE_RETURN_INSN(TRUE)\"\n+  \"USE_RETURN_INSN (TRUE)\"\n   \"*\n {\n   extern int arm_ccfsm_state;\n@@ -5974,7 +5974,7 @@\n \t\t\t  (match_operand:SI 1 \"general_operand\" \"g\"))\n \t\t    (clobber (reg:SI 14))])\n    (return)]\n-  \"(GET_CODE (operands[0]) == SYMBOL_REF && USE_RETURN_INSN(FALSE)\n+  \"(GET_CODE (operands[0]) == SYMBOL_REF && USE_RETURN_INSN (FALSE)\n     && !get_frame_size () && !current_function_calls_alloca\n     && !frame_pointer_needed && !current_function_args_size)\"\n   \"*\n@@ -6002,7 +6002,7 @@\n \t\t\t (match_operand:SI 2 \"general_operand\" \"g\")))\n \t      (clobber (reg:SI 14))])\n    (return)]\n-  \"(GET_CODE (operands[1]) == SYMBOL_REF && USE_RETURN_INSN(FALSE)\n+  \"(GET_CODE (operands[1]) == SYMBOL_REF && USE_RETURN_INSN (FALSE)\n     && !get_frame_size () && !current_function_calls_alloca\n     && !frame_pointer_needed && !current_function_args_size)\"\n   \"*\n@@ -6034,7 +6034,7 @@\n \t      (clobber (reg:SI 14))])\n    (use (match_dup 0))\n    (return)]\n-  \"(GET_CODE (operands[1]) == SYMBOL_REF && USE_RETURN_INSN(FALSE)\n+  \"(GET_CODE (operands[1]) == SYMBOL_REF && USE_RETURN_INSN (FALSE)\n     && !get_frame_size () && !current_function_calls_alloca\n     && !frame_pointer_needed && !current_function_args_size)\"\n   \"*"}]}