{"sha": "84034c69b386acf96756e2dfe5bd706feed88122", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQwMzRjNjliMzg2YWNmOTY3NTZlMmRmZTViZDcwNmZlZWQ4ODEyMg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-09-15T16:14:15Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-09-15T16:14:15Z"}, "message": "Instruction attributes take an rtx_insn *\n\ngcc/ChangeLog:\n\t* config/arc/arc-protos.h (arc_attr_type): Strengthen param from\n\trtx to rtx_insn *.\n\t(arc_sets_cc_p): Likewise.\n\t* config/arc/arc.c (arc_print_operand): Use methods of\n\t\"final_sequence\" for clarity, and to enable strengthening of\n\tlocals \"jump\" and \"delay\" from rtx to rtx_insn *.\n\t(arc_adjust_insn_length): Strengthen local \"prev\" from rtx to\n\trtx_insn *; use method of rtx_sequence for typesafety.\n\t(arc_get_insn_variants): Use insn method of rtx_sequence for\n\ttypesafety.\n\t(arc_pad_return): Likewise.\n\t(arc_attr_type): Strengthen param from rtx to rtx_insn *.\n\t(arc_sets_cc_p): Likewise.  Also, convert a GET_CODE check to a\n\tdyn_cast to rtx_sequence *, using insn method for typesafety.\n\t* config/arc/arc.h (ADJUST_INSN_LENGTH): Add checked casts to\n\trtx_sequence * and use insn method when invoking get_attr_length.\n\t* config/bfin/bfin.c (type_for_anomaly): Strengthen param from rtx\n\tto rtx_insn *.  Replace a GET_CODE check with a dyn_cast to\n\trtx_sequence *, introducing a local \"seq\", using its insn method\n\tfrom typesafety and clarity.\n\t(add_sched_insns_for_speculation): Strengthen local \"next\" from\n\trtx to rtx_insn *.\n\t* config/c6x/c6x.c (get_insn_side): Likewise for param \"insn\".\n\t(predicate_insn): Likewise.\n\t* config/cris/cris-protos.h (cris_notice_update_cc): Likewise for\n\tsecond param.\n\t* config/cris/cris.c (cris_notice_update_cc): Likewise.\n\t* config/epiphany/epiphany-protos.h\n\t(extern void epiphany_insert_mode_switch_use): Likewise for param\n\t\"insn\".\n\t(get_attr_sched_use_fpu): Likewise for param.\n\t* config/epiphany/epiphany.c (epiphany_insert_mode_switch_use):\n\tLikewise for param \"insn\".\n\t* config/epiphany/mode-switch-use.c (insert_uses): Likewise for\n\tparam \"insn\" of \"target_insert_mode_switch_use\" callback.\n\t* config/frv/frv.c (frv_insn_unit): Likewise for param \"insn\".\n\t(frv_issues_to_branch_unit_p): Likewise.\n\t(frv_pack_insn_p): Likewise.\n\t(frv_compare_insns): Strengthen locals \"insn1\" and \"insn2\" from\n\tconst rtx * (i.e. mutable rtx_def * const *) to\n\trtx_insn * const *.\n\t* config/i386/i386-protos.h (standard_sse_constant_opcode):\n\tStrengthen first param from rtx to rtx_insn *.\n\t(output_fix_trunc): Likewise.\n\t* config/i386/i386.c (standard_sse_constant_opcode): Likewise.\n\t(output_fix_trunc): Likewise.\n\t(core2i7_first_cycle_multipass_filter_ready_try): Likewise for\n\tlocal \"insn\".\n\t(min_insn_size): Likewise for param \"insn\".\n\t(get_mem_group): Likewise.\n\t(is_cmp): Likewise.\n\t(get_insn_path): Likewise.\n\t(get_insn_group): Likewise.\n\t(count_num_restricted): Likewise.\n\t(fits_dispatch_window): Likewise.\n\t(add_insn_window): Likewise.\n\t(add_to_dispatch_window): Likewise.\n\t(debug_insn_dispatch_info_file): Likewise.\n\t* config/m32c/m32c-protos.h (m32c_output_compare): Likewise for\n\tfirst param.\n\t* config/m32c/m32c.c (m32c_compare_redundant): Likewise for param\n\t\"cmp\" and local \"prev\".\n\t(m32c_output_compare): Likewise for param \"insn\".\n\t* config/m32r/predicates.md (define_predicate \"small_insn_p\"): Add\n\ta checked cast to rtx_insn * on \"op\" after we know it's an INSN_P.\n\t(define_predicate \"large_insn_p\"): Likewise.\n\t* config/m68k/m68k-protos.h (m68k_sched_attr_size): Strengthen\n\tparam from rtx to rtx_insn *.\n\t(attr_op_mem m68k_sched_attr_op_mem): Likewise.\n\t* config/m68k/m68k.c (sched_get_attr_size_int): Likewise.\n\t(m68k_sched_attr_size): Likewise.\n\t(sched_get_opxy_mem_type): Likewise for param \"insn\".\n\t(m68k_sched_attr_op_mem): Likewise.\n\t(sched_mem_operand_p): Likewise.\n\t* config/mep/mep-protos.h (mep_multi_slot): Likewise for param.\n\t* config/mep/mep.c (mep_multi_slot): Likewise.\n\t* config/mips/mips-protos.h (mips_output_sync_loop): Likewise for\n\tfirst param.\n\t(mips_sync_loop_insns): Likewise.\n\t* config/mips/mips.c (mips_print_operand_punctuation): Use insn\n\tmethod of \"final_sequence\" for typesafety.\n\t(mips_process_sync_loop): Strengthen param \"insn\" from rtx to\n\trtx_insn *.\n\t(mips_output_sync_loop): Likewise.\n\t(mips_sync_loop_insns): Likewise.\n\t(mips_74k_agen_init): Likewise.\n\t(mips_sched_init): Use NULL rather than NULL_RTX when working with\n\tinsns.\n\t* config/nds32/nds32-fp-as-gp.c (nds32_symbol_load_store_p):\n\tStrengthen param \"insn\" from rtx to rtx_insn *.\n\t* config/nds32/nds32.c (nds32_target_alignment): Likewise for\n\tlocal \"insn\".\n\t* config/pa/pa-protos.h (pa_insn_refs_are_delayed): Likewise for\n\tparam.\n\t* config/pa/pa.c (pa_output_function_epilogue): Likewise for local\n\t\"insn\".  Use method of rtx_sequence for typesafety.\n\t(branch_to_delay_slot_p): Strengthen param \"insn\" from rtx to\n\trtx_insn *.\n\t(branch_needs_nop_p): Likewise.\n\t(use_skip_p): Likewise.\n\t(pa_insn_refs_are_delayed): Likewise.\n\t* config/rl78/rl78.c (rl78_propogate_register_origins): Likewise\n\tfor locals \"insn\", \"ninsn\".\n\t* config/rs6000/rs6000.c (is_microcoded_insn): Likewise for param\n\t\"insn\".\n\t(is_cracked_insn): Likewise.\n\t(is_branch_slot_insn): Likewise.\n\t(is_nonpipeline_insn): Likewise.\n\t(insn_terminates_group_p): Likewise.\n\t(insn_must_be_first_in_group): Likewise.\n\t(insn_must_be_last_in_group): Likewise.\n\t(force_new_group): Likewise for param \"next_insn\".\n\t* config/s390/s390.c (s390_get_sched_attrmask): Likewise for param\n\t\"insn\".\n\t(s390_sched_score): Likewise.\n\t* config/sh/sh-protos.h (output_branch): Likewise for param 2.\n\t(rtx sfunc_uses_reg): Likewise for sole param.\n\t* config/sh/sh.c (sh_print_operand): Use insn method of\n\tfinal_sequence for typesafety.\n\t(output_branch): Strengthen param \"insn\" from rtx to rtx_insn *.\n\tUse insn method of final_sequence for typesafety.\n\t(sfunc_uses_reg): Strengthen param \"insn\" from rtx to rtx_insn *.\n\t* config/sparc/sparc-protos.h (eligible_for_call_delay): Likewise\n\tfor param.\n\t(eligible_for_return_delay): Likewise.\n\t(eligible_for_sibcall_delay): Likewise.\n\t* config/sparc/sparc.c (eligible_for_call_delay): Likewise.\n\t(eligible_for_return_delay): Likewise.\n\t(eligible_for_sibcall_delay): Likewise.\n\t* config/stormy16/stormy16-protos.h\n\t(xstormy16_output_cbranch_hi): Likewise for final param.\n\t(xstormy16_output_cbranch_si): Likewise.\n\t* config/stormy16/stormy16.c (xstormy16_output_cbranch_hi): LIkewise.\n\t(xstormy16_output_cbranch_si): Likewise.\n\t* config/v850/v850-protos.h (notice_update_cc): Likewise.\n\t* config/v850/v850.c (notice_update_cc): Likewise.\n\n\t* final.c (get_attr_length_1): Strengthen param \"insn\" and param\n\tof \"fallback_fn\" from rtx to rtx_insn *, eliminating a checked cast.\n\t(get_attr_length): Strengthen param \"insn\" from rtx to rtx_insn *.\n\t(get_attr_min_length): Likewise.\n\t(shorten_branches): Likewise for signature of locals \"length_fun\"\n\tand \"inner_length_fun\".  Introduce local rtx_sequence * \"seqn\"\n\tfrom a checked cast and use its methods for clarity and to enable\n\tstrengthening local \"inner_insn\" from rtx to rtx_insn *.\n\t* genattr.c (gen_attr): When writing out the prototypes of the\n\tvarious generated \"get_attr_\" functions, strengthen the params of\n\tthe non-const functions from rtx to rtx_insn *.\n\tSimilarly, strengthen the params of insn_default_length,\n\tinsn_min_length, insn_variable_length_p, insn_current_length.\n\t(main): Similarly, strengthen the param of num_delay_slots,\n\tinternal_dfa_insn_code, insn_default_latency, bypass_p,\n\tinsn_latency, min_issue_delay, print_reservation,\n\tinsn_has_dfa_reservation_p and of the \"internal_dfa_insn_code\" and\n\t\"insn_default_latency\" callbacks.  Rename hook_int_rtx_unreachable\n\tto hook_int_rtx_insn_unreachable.\n\t* genattrtab.c (write_attr_get): When writing out the generated\n\t\"get_attr_\" functions, strengthen the param \"insn\" from rtx to\n\trtx_insn *, eliminating a checked cast.\n\t(make_automaton_attrs): When writing out prototypes of\n\t\"internal_dfa_insn_code_\", \"insn_default_latency_\" functions\n\tand the \"internal_dfa_insn_code\" and \"insn_default_latency\"\n\tcallbacks, strengthen their params from rtx to rtx_insn *\n\t* genautomata.c (output_internal_insn_code_evaluation): When\n\twriting out code, add a checked cast from rtx to rtx_insn * when\n\tinvoking DFA_INSN_CODE_FUNC_NAME aka dfa_insn_code.\n\t(output_dfa_insn_code_func): Strengthen param of generated\n\tfunction \"dfa_insn_code_enlarge\" from rtx to rtx_insn *.\n\t(output_trans_func): Likewise for generated function\n\t\"state_transition\".\n\t(output_internal_insn_latency_func): When writing out generated\n\tfunction \"internal_insn_latency\", rename params from \"insn\" and\n\t\"insn2\" to \"insn_or_const0\" and \"insn2_or_const0\".  Reintroduce\n\tlocals \"insn\" and \"insn2\" as rtx_insn * with checked casts once\n\twe've proven that we're not dealing with const0_rtx.\n\t(output_insn_latency_func):  Strengthen param of generated\n\tfunction \"insn_latency\" from rtx to rtx_insn *.\n\t(output_print_reservation_func): Likewise for generated function\n\t\"print_reservation\".\n\t(output_insn_has_dfa_reservation_p): Likewise for generated\n\tfunction \"insn_has_dfa_reservation_p\".\n\t* hooks.c (hook_int_rtx_unreachable): Rename to...\n\t(hook_int_rtx_insn_unreachable): ...this, and strengthen param\n\tfrom rtx to rtx_insn *.\n\t* hooks.h (hook_int_rtx_unreachable): Likewise.\n\t(extern int hook_int_rtx_insn_unreachable): Likewise.\n\t* output.h (get_attr_length): Strengthen param from rtx to rtx_insn *.\n\t(get_attr_min_length): Likewise.\n\t* recog.c (get_enabled_alternatives): Likewise.\n\t* recog.h (alternative_mask get_enabled_alternatives): Likewise.\n\t* reorg.c (find_end_label): Introduce local rtx \"pat\" and\n\tstrengthen local \"insn\" from rtx to rtx_insn *.\n\t(redundant_insn): Use insn method of \"seq\" rather than element for\n\ttypesafety; strengthen local \"control\" from rtx to rtx_insn *.\n\t* resource.c (mark_referenced_resources): Add checked cast to\n\trtx_insn * within INSN/JUMP_INSN case.\n\t(mark_set_resources): Likewise.\n\t* sel-sched.c (estimate_insn_cost): Strengthen param \"insn\" from\n\trtx to rtx_insn *.\n\nFrom-SVN: r215271", "tree": {"sha": "ecf16917b040a04f3879abe2bb5ccb48f7d87d25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecf16917b040a04f3879abe2bb5ccb48f7d87d25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84034c69b386acf96756e2dfe5bd706feed88122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84034c69b386acf96756e2dfe5bd706feed88122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84034c69b386acf96756e2dfe5bd706feed88122", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84034c69b386acf96756e2dfe5bd706feed88122/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9158a0d8c7cf13071568c33a9bd282941731b2a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9158a0d8c7cf13071568c33a9bd282941731b2a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9158a0d8c7cf13071568c33a9bd282941731b2a1"}], "stats": {"total": 621, "additions": 426, "deletions": 195}, "files": [{"sha": "ec7d9e8879114adbf530878927e39d9cd8e81499", "filename": "gcc/ChangeLog", "status": "modified", "additions": 202, "deletions": 0, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -1,3 +1,205 @@\n+2014-09-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/arc/arc-protos.h (arc_attr_type): Strengthen param from\n+\trtx to rtx_insn *.\n+\t(arc_sets_cc_p): Likewise.\n+\t* config/arc/arc.c (arc_print_operand): Use methods of\n+\t\"final_sequence\" for clarity, and to enable strengthening of\n+\tlocals \"jump\" and \"delay\" from rtx to rtx_insn *.\n+\t(arc_adjust_insn_length): Strengthen local \"prev\" from rtx to\n+\trtx_insn *; use method of rtx_sequence for typesafety.\n+\t(arc_get_insn_variants): Use insn method of rtx_sequence for\n+\ttypesafety.\n+\t(arc_pad_return): Likewise.\n+\t(arc_attr_type): Strengthen param from rtx to rtx_insn *.\n+\t(arc_sets_cc_p): Likewise.  Also, convert a GET_CODE check to a\n+\tdyn_cast to rtx_sequence *, using insn method for typesafety.\n+\t* config/arc/arc.h (ADJUST_INSN_LENGTH): Add checked casts to\n+\trtx_sequence * and use insn method when invoking get_attr_length.\n+\t* config/bfin/bfin.c (type_for_anomaly): Strengthen param from rtx\n+\tto rtx_insn *.  Replace a GET_CODE check with a dyn_cast to\n+\trtx_sequence *, introducing a local \"seq\", using its insn method\n+\tfrom typesafety and clarity.\n+\t(add_sched_insns_for_speculation): Strengthen local \"next\" from\n+\trtx to rtx_insn *.\n+\t* config/c6x/c6x.c (get_insn_side): Likewise for param \"insn\".\n+\t(predicate_insn): Likewise.\n+\t* config/cris/cris-protos.h (cris_notice_update_cc): Likewise for\n+\tsecond param.\n+\t* config/cris/cris.c (cris_notice_update_cc): Likewise.\n+\t* config/epiphany/epiphany-protos.h\n+\t(extern void epiphany_insert_mode_switch_use): Likewise for param\n+\t\"insn\".\n+\t(get_attr_sched_use_fpu): Likewise for param.\n+\t* config/epiphany/epiphany.c (epiphany_insert_mode_switch_use):\n+\tLikewise for param \"insn\".\n+\t* config/epiphany/mode-switch-use.c (insert_uses): Likewise for\n+\tparam \"insn\" of \"target_insert_mode_switch_use\" callback.\n+\t* config/frv/frv.c (frv_insn_unit): Likewise for param \"insn\".\n+\t(frv_issues_to_branch_unit_p): Likewise.\n+\t(frv_pack_insn_p): Likewise.\n+\t(frv_compare_insns): Strengthen locals \"insn1\" and \"insn2\" from\n+\tconst rtx * (i.e. mutable rtx_def * const *) to\n+\trtx_insn * const *.\n+\t* config/i386/i386-protos.h (standard_sse_constant_opcode):\n+\tStrengthen first param from rtx to rtx_insn *.\n+\t(output_fix_trunc): Likewise.\n+\t* config/i386/i386.c (standard_sse_constant_opcode): Likewise.\n+\t(output_fix_trunc): Likewise.\n+\t(core2i7_first_cycle_multipass_filter_ready_try): Likewise for\n+\tlocal \"insn\".\n+\t(min_insn_size): Likewise for param \"insn\".\n+\t(get_mem_group): Likewise.\n+\t(is_cmp): Likewise.\n+\t(get_insn_path): Likewise.\n+\t(get_insn_group): Likewise.\n+\t(count_num_restricted): Likewise.\n+\t(fits_dispatch_window): Likewise.\n+\t(add_insn_window): Likewise.\n+\t(add_to_dispatch_window): Likewise.\n+\t(debug_insn_dispatch_info_file): Likewise.\n+\t* config/m32c/m32c-protos.h (m32c_output_compare): Likewise for\n+\tfirst param.\n+\t* config/m32c/m32c.c (m32c_compare_redundant): Likewise for param\n+\t\"cmp\" and local \"prev\".\n+\t(m32c_output_compare): Likewise for param \"insn\".\n+\t* config/m32r/predicates.md (define_predicate \"small_insn_p\"): Add\n+\ta checked cast to rtx_insn * on \"op\" after we know it's an INSN_P.\n+\t(define_predicate \"large_insn_p\"): Likewise.\n+\t* config/m68k/m68k-protos.h (m68k_sched_attr_size): Strengthen\n+\tparam from rtx to rtx_insn *.\n+\t(attr_op_mem m68k_sched_attr_op_mem): Likewise.\n+\t* config/m68k/m68k.c (sched_get_attr_size_int): Likewise.\n+\t(m68k_sched_attr_size): Likewise.\n+\t(sched_get_opxy_mem_type): Likewise for param \"insn\".\n+\t(m68k_sched_attr_op_mem): Likewise.\n+\t(sched_mem_operand_p): Likewise.\n+\t* config/mep/mep-protos.h (mep_multi_slot): Likewise for param.\n+\t* config/mep/mep.c (mep_multi_slot): Likewise.\n+\t* config/mips/mips-protos.h (mips_output_sync_loop): Likewise for\n+\tfirst param.\n+\t(mips_sync_loop_insns): Likewise.\n+\t* config/mips/mips.c (mips_print_operand_punctuation): Use insn\n+\tmethod of \"final_sequence\" for typesafety.\n+\t(mips_process_sync_loop): Strengthen param \"insn\" from rtx to\n+\trtx_insn *.\n+\t(mips_output_sync_loop): Likewise.\n+\t(mips_sync_loop_insns): Likewise.\n+\t(mips_74k_agen_init): Likewise.\n+\t(mips_sched_init): Use NULL rather than NULL_RTX when working with\n+\tinsns.\n+\t* config/nds32/nds32-fp-as-gp.c (nds32_symbol_load_store_p):\n+\tStrengthen param \"insn\" from rtx to rtx_insn *.\n+\t* config/nds32/nds32.c (nds32_target_alignment): Likewise for\n+\tlocal \"insn\".\n+\t* config/pa/pa-protos.h (pa_insn_refs_are_delayed): Likewise for\n+\tparam.\n+\t* config/pa/pa.c (pa_output_function_epilogue): Likewise for local\n+\t\"insn\".  Use method of rtx_sequence for typesafety.\n+\t(branch_to_delay_slot_p): Strengthen param \"insn\" from rtx to\n+\trtx_insn *.\n+\t(branch_needs_nop_p): Likewise.\n+\t(use_skip_p): Likewise.\n+\t(pa_insn_refs_are_delayed): Likewise.\n+\t* config/rl78/rl78.c (rl78_propogate_register_origins): Likewise\n+\tfor locals \"insn\", \"ninsn\".\n+\t* config/rs6000/rs6000.c (is_microcoded_insn): Likewise for param\n+\t\"insn\".\n+\t(is_cracked_insn): Likewise.\n+\t(is_branch_slot_insn): Likewise.\n+\t(is_nonpipeline_insn): Likewise.\n+\t(insn_terminates_group_p): Likewise.\n+\t(insn_must_be_first_in_group): Likewise.\n+\t(insn_must_be_last_in_group): Likewise.\n+\t(force_new_group): Likewise for param \"next_insn\".\n+\t* config/s390/s390.c (s390_get_sched_attrmask): Likewise for param\n+\t\"insn\".\n+\t(s390_sched_score): Likewise.\n+\t* config/sh/sh-protos.h (output_branch): Likewise for param 2.\n+\t(rtx sfunc_uses_reg): Likewise for sole param.\n+\t* config/sh/sh.c (sh_print_operand): Use insn method of\n+\tfinal_sequence for typesafety.\n+\t(output_branch): Strengthen param \"insn\" from rtx to rtx_insn *.\n+\tUse insn method of final_sequence for typesafety.\n+\t(sfunc_uses_reg): Strengthen param \"insn\" from rtx to rtx_insn *.\n+\t* config/sparc/sparc-protos.h (eligible_for_call_delay): Likewise\n+\tfor param.\n+\t(eligible_for_return_delay): Likewise.\n+\t(eligible_for_sibcall_delay): Likewise.\n+\t* config/sparc/sparc.c (eligible_for_call_delay): Likewise.\n+\t(eligible_for_return_delay): Likewise.\n+\t(eligible_for_sibcall_delay): Likewise.\n+\t* config/stormy16/stormy16-protos.h\n+\t(xstormy16_output_cbranch_hi): Likewise for final param.\n+\t(xstormy16_output_cbranch_si): Likewise.\n+\t* config/stormy16/stormy16.c (xstormy16_output_cbranch_hi): LIkewise.\n+\t(xstormy16_output_cbranch_si): Likewise.\n+\t* config/v850/v850-protos.h (notice_update_cc): Likewise.\n+\t* config/v850/v850.c (notice_update_cc): Likewise.\n+\n+\t* final.c (get_attr_length_1): Strengthen param \"insn\" and param\n+\tof \"fallback_fn\" from rtx to rtx_insn *, eliminating a checked cast.\n+\t(get_attr_length): Strengthen param \"insn\" from rtx to rtx_insn *.\n+\t(get_attr_min_length): Likewise.\n+\t(shorten_branches): Likewise for signature of locals \"length_fun\"\n+\tand \"inner_length_fun\".  Introduce local rtx_sequence * \"seqn\"\n+\tfrom a checked cast and use its methods for clarity and to enable\n+\tstrengthening local \"inner_insn\" from rtx to rtx_insn *.\n+\t* genattr.c (gen_attr): When writing out the prototypes of the\n+\tvarious generated \"get_attr_\" functions, strengthen the params of\n+\tthe non-const functions from rtx to rtx_insn *.\n+\tSimilarly, strengthen the params of insn_default_length,\n+\tinsn_min_length, insn_variable_length_p, insn_current_length.\n+\t(main): Similarly, strengthen the param of num_delay_slots,\n+\tinternal_dfa_insn_code, insn_default_latency, bypass_p,\n+\tinsn_latency, min_issue_delay, print_reservation,\n+\tinsn_has_dfa_reservation_p and of the \"internal_dfa_insn_code\" and\n+\t\"insn_default_latency\" callbacks.  Rename hook_int_rtx_unreachable\n+\tto hook_int_rtx_insn_unreachable.\n+\t* genattrtab.c (write_attr_get): When writing out the generated\n+\t\"get_attr_\" functions, strengthen the param \"insn\" from rtx to\n+\trtx_insn *, eliminating a checked cast.\n+\t(make_automaton_attrs): When writing out prototypes of\n+\t\"internal_dfa_insn_code_\", \"insn_default_latency_\" functions\n+\tand the \"internal_dfa_insn_code\" and \"insn_default_latency\"\n+\tcallbacks, strengthen their params from rtx to rtx_insn *\n+\t* genautomata.c (output_internal_insn_code_evaluation): When\n+\twriting out code, add a checked cast from rtx to rtx_insn * when\n+\tinvoking DFA_INSN_CODE_FUNC_NAME aka dfa_insn_code.\n+\t(output_dfa_insn_code_func): Strengthen param of generated\n+\tfunction \"dfa_insn_code_enlarge\" from rtx to rtx_insn *.\n+\t(output_trans_func): Likewise for generated function\n+\t\"state_transition\".\n+\t(output_internal_insn_latency_func): When writing out generated\n+\tfunction \"internal_insn_latency\", rename params from \"insn\" and\n+\t\"insn2\" to \"insn_or_const0\" and \"insn2_or_const0\".  Reintroduce\n+\tlocals \"insn\" and \"insn2\" as rtx_insn * with checked casts once\n+\twe've proven that we're not dealing with const0_rtx.\n+\t(output_insn_latency_func):  Strengthen param of generated\n+\tfunction \"insn_latency\" from rtx to rtx_insn *.\n+\t(output_print_reservation_func): Likewise for generated function\n+\t\"print_reservation\".\n+\t(output_insn_has_dfa_reservation_p): Likewise for generated\n+\tfunction \"insn_has_dfa_reservation_p\".\n+\t* hooks.c (hook_int_rtx_unreachable): Rename to...\n+\t(hook_int_rtx_insn_unreachable): ...this, and strengthen param\n+\tfrom rtx to rtx_insn *.\n+\t* hooks.h (hook_int_rtx_unreachable): Likewise.\n+\t(extern int hook_int_rtx_insn_unreachable): Likewise.\n+\t* output.h (get_attr_length): Strengthen param from rtx to rtx_insn *.\n+\t(get_attr_min_length): Likewise.\n+\t* recog.c (get_enabled_alternatives): Likewise.\n+\t* recog.h (alternative_mask get_enabled_alternatives): Likewise.\n+\t* reorg.c (find_end_label): Introduce local rtx \"pat\" and\n+\tstrengthen local \"insn\" from rtx to rtx_insn *.\n+\t(redundant_insn): Use insn method of \"seq\" rather than element for\n+\ttypesafety; strengthen local \"control\" from rtx to rtx_insn *.\n+\t* resource.c (mark_referenced_resources): Add checked cast to\n+\trtx_insn * within INSN/JUMP_INSN case.\n+\t(mark_set_resources): Likewise.\n+\t* sel-sched.c (estimate_insn_cost): Strengthen param \"insn\" from\n+\trtx to rtx_insn *.\n+\n 2014-09-15  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/rs6000/rs6000.c (rs6000_loop_align_max_skip): Strengthen"}, {"sha": "8fd746f2f5f078081e185b673f19251cd1a68888", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -104,9 +104,9 @@ extern rtx arc_split_move (rtx *);\n extern int arc_verify_short (rtx_insn *insn, int unalign, int);\n extern const char *arc_short_long (rtx_insn *insn, const char *, const char *);\n extern rtx arc_regno_use_in (unsigned int, rtx);\n-extern int arc_attr_type (rtx);\n+extern int arc_attr_type (rtx_insn *);\n extern bool arc_scheduling_not_expected (void);\n-extern bool arc_sets_cc_p (rtx insn);\n+extern bool arc_sets_cc_p (rtx_insn *insn);\n extern int arc_label_align (rtx label);\n extern bool arc_need_delay (rtx_insn *insn);\n extern bool arc_text_label (rtx_insn *insn);"}, {"sha": "3e808ea7f78f02f287365f66e9971702e7e6cb5e", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -2817,10 +2817,10 @@ arc_print_operand (FILE *file, rtx x, int code)\n       /* Unconditional branches / branches not depending on condition codes.\n \t This could also be a CALL_INSN.\n \t Output the appropriate delay slot suffix.  */\n-      if (final_sequence && XVECLEN (final_sequence, 0) != 1)\n+      if (final_sequence && final_sequence->len () != 1)\n \t{\n-\t  rtx jump = XVECEXP (final_sequence, 0, 0);\n-\t  rtx delay = XVECEXP (final_sequence, 0, 1);\n+\t  rtx_insn *jump = final_sequence->insn (0);\n+\t  rtx_insn *delay = final_sequence->insn (1);\n \n \t  /* For TARGET_PAD_RETURN we might have grabbed the delay insn.  */\n \t  if (INSN_DELETED_P (delay))\n@@ -7828,12 +7828,13 @@ arc_adjust_insn_length (rtx_insn *insn, int len, bool)\n       && GET_CODE (PATTERN (insn)) != ADDR_DIFF_VEC\n       && get_attr_type (insn) == TYPE_RETURN)\n     {\n-      rtx prev = prev_active_insn (insn);\n+      rtx_insn *prev = prev_active_insn (insn);\n \n       if (!prev || !(prev = prev_active_insn (prev))\n \t  || ((NONJUMP_INSN_P (prev)\n \t       && GET_CODE (PATTERN (prev)) == SEQUENCE)\n-\t      ? CALL_ATTR (XVECEXP (PATTERN (prev), 0, 0), NON_SIBCALL)\n+\t      ? CALL_ATTR (as_a <rtx_sequence *> (PATTERN (prev))->insn (0),\n+\t\t\t   NON_SIBCALL)\n \t      : CALL_ATTR (prev, NON_SIBCALL)))\n \treturn len + 4;\n     }\n@@ -7915,7 +7916,7 @@ arc_get_insn_variants (rtx_insn *insn, int len, bool, bool target_p,\n \t entire SEQUENCE.  */\n       rtx_insn *inner;\n       if (TARGET_UPSIZE_DBR\n-\t  && get_attr_length (XVECEXP (pat, 0, 1)) <= 2\n+\t  && get_attr_length (pat->insn (1)) <= 2\n \t  && (((type = get_attr_type (inner = pat->insn (0)))\n \t       == TYPE_UNCOND_BRANCH)\n \t      || type == TYPE_BRANCH)\n@@ -7961,7 +7962,8 @@ arc_get_insn_variants (rtx_insn *insn, int len, bool, bool target_p,\n   rtx_insn *prev = prev_active_insn (insn);\n   if (prev && arc_next_active_insn (prev, 0) == insn\n       && ((NONJUMP_INSN_P (prev) && GET_CODE (PATTERN (prev)) == SEQUENCE)\n-\t  ? CALL_ATTR (XVECEXP (PATTERN (prev), 0, 0), NON_SIBCALL)\n+\t  ? CALL_ATTR (as_a <rtx_sequence *> (PATTERN (prev))->insn (0),\n+\t\t       NON_SIBCALL)\n \t  : (CALL_ATTR (prev, NON_SIBCALL)\n \t     && NEXT_INSN (PREV_INSN (prev)) == prev)))\n     force_target = true;\n@@ -8678,7 +8680,8 @@ arc_pad_return (void)\n     }\n   if (!prev\n       || ((NONJUMP_INSN_P (prev) && GET_CODE (PATTERN (prev)) == SEQUENCE)\n-\t  ? CALL_ATTR (XVECEXP (PATTERN (prev), 0, 0), NON_SIBCALL)\n+\t  ? CALL_ATTR (as_a <rtx_sequence *> (PATTERN (prev))->insn (0),\n+\t\t       NON_SIBCALL)\n \t  : CALL_ATTR (prev, NON_SIBCALL)))\n     {\n       if (want_long)\n@@ -9078,7 +9081,7 @@ arc_regno_use_in (unsigned int regno, rtx x)\n    INSN can't have attributes.  */\n \n int\n-arc_attr_type (rtx insn)\n+arc_attr_type (rtx_insn *insn)\n {\n   if (NONJUMP_INSN_P (insn)\n       ? (GET_CODE (PATTERN (insn)) == USE\n@@ -9094,10 +9097,11 @@ arc_attr_type (rtx insn)\n /* Return true if insn sets the condition codes.  */\n \n bool\n-arc_sets_cc_p (rtx insn)\n+arc_sets_cc_p (rtx_insn *insn)\n {\n-  if (NONJUMP_INSN_P (insn) && GET_CODE (PATTERN (insn)) == SEQUENCE)\n-    insn = XVECEXP (PATTERN (insn), 0, XVECLEN (PATTERN (insn), 0) - 1);\n+  if (NONJUMP_INSN_P (insn))\n+    if (rtx_sequence *seq = dyn_cast <rtx_sequence *> (PATTERN (insn)))\n+      insn = seq->insn (seq->len () - 1);\n   return arc_attr_type (insn) == TYPE_COMPARE;\n }\n "}, {"sha": "2b0a04c3a4ca4c9ee24a4ab6cd9465984028c787", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -1657,16 +1657,16 @@ extern enum arc_function_type arc_compute_function_type (struct function *);\n   ((LENGTH) \\\n    = (GET_CODE (PATTERN (X)) == SEQUENCE \\\n       ? ((LENGTH) \\\n-\t + arc_adjust_insn_length (as_a <rtx_sequence *> (PATTERN (X))->insn (0), \\\n-\t\t\t\t   get_attr_length (XVECEXP (PATTERN (X), \\\n-\t\t\t\t\t\t    0, 0)), \\\n-\t\t\t\t   true) \\\n-\t - get_attr_length (XVECEXP (PATTERN (X), 0, 0)) \\\n-\t + arc_adjust_insn_length (as_a <rtx_sequence *> (PATTERN (X))->insn (1), \\\n-\t\t\t\t   get_attr_length (XVECEXP (PATTERN (X), \\\n-\t\t\t\t\t\t    0, 1)), \\\n-\t\t\t\t   true) \\\n-\t - get_attr_length (XVECEXP (PATTERN (X), 0, 1))) \\\n+\t + arc_adjust_insn_length ( \\\n+             as_a <rtx_sequence *> (PATTERN (X))->insn (0), \\\n+\t     get_attr_length (as_a <rtx_sequence *> (PATTERN (X))->insn (0)), \\\n+\t     true)\t\t\t\t\t\t\t\\\n+\t - get_attr_length (as_a <rtx_sequence *> (PATTERN (X))->insn (0)) \\\n+\t + arc_adjust_insn_length ( \\\n+\t     as_a <rtx_sequence *> (PATTERN (X))->insn (1), \\\n+\t     get_attr_length (as_a <rtx_sequence *> (PATTERN (X))->insn (1)), \\\n+\t     true)\t\t\t\t\t\t\t\\\n+\t - get_attr_length (as_a <rtx_sequence *> (PATTERN (X))->insn (1))) \\\n       : arc_adjust_insn_length ((X), (LENGTH), false)))\n \n #define IS_ASM_LOGICAL_LINE_SEPARATOR(C,STR) ((C) == '`')"}, {"sha": "0556592430d065f86c97ccca578fc70753117fd9", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -4176,16 +4176,16 @@ workaround_rts_anomaly (void)\n    SEQUENCEs.  */\n \n static enum attr_type\n-type_for_anomaly (rtx insn)\n+type_for_anomaly (rtx_insn *insn)\n {\n   rtx pat = PATTERN (insn);\n-  if (GET_CODE (pat) == SEQUENCE)\n+  if (rtx_sequence *seq = dyn_cast <rtx_sequence *> (pat))\n     {\n       enum attr_type t;\n-      t = get_attr_type (XVECEXP (pat, 0, 1));\n+      t = get_attr_type (seq->insn (1));\n       if (t == TYPE_MCLD)\n \treturn t;\n-      t = get_attr_type (XVECEXP (pat, 0, 2));\n+      t = get_attr_type (seq->insn (2));\n       if (t == TYPE_MCLD)\n \treturn t;\n       return TYPE_MCST;\n@@ -4572,7 +4572,7 @@ add_sched_insns_for_speculation (void)\n \t  && (cbranch_predicted_taken_p (insn)))\n \t{\n \t  rtx target = JUMP_LABEL (insn);\n-\t  rtx next = next_real_insn (target);\n+\t  rtx_insn *next = next_real_insn (target);\n \n \t  if (GET_CODE (PATTERN (next)) == UNSPEC_VOLATILE\n \t      && get_attr_type (next) == TYPE_STALL)"}, {"sha": "6a80f66d72a74d0a71f65251f7cdf91afb9d9187", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -3028,7 +3028,7 @@ get_reservation_flags (enum attr_units units)\n /* Compute the side of the machine used by INSN, which reserves UNITS.\n    This must match the reservations in the scheduling description.  */\n static int\n-get_insn_side (rtx insn, enum attr_units units)\n+get_insn_side (rtx_insn *insn, enum attr_units units)\n {\n   if (units == UNITS_D_ADDR)\n     return (get_attr_addr_regfile (insn) == ADDR_REGFILE_A ? 0 : 1);\n@@ -3785,7 +3785,7 @@ conditions_opposite_p (rtx cond1, rtx cond2)\n    already has that predicate.  If DOIT is true, also perform the\n    modification.  */\n static bool\n-predicate_insn (rtx insn, rtx cond, bool doit)\n+predicate_insn (rtx_insn *insn, rtx cond, bool doit)\n {\n   int icode;\n   if (cond == NULL_RTX)"}, {"sha": "503866054d7db9b5ec41b6b80f4374dd436ddece", "filename": "gcc/config/cris/cris-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-protos.h?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n extern bool cris_simple_epilogue (void);\n #ifdef RTX_CODE\n extern const char *cris_op_str (rtx);\n-extern void cris_notice_update_cc (rtx, rtx);\n+extern void cris_notice_update_cc (rtx, rtx_insn *);\n extern bool cris_reload_address_legitimized (rtx, enum machine_mode, int, int, int);\n extern int cris_side_effect_mode_ok (enum rtx_code, rtx *, int, int,\n                                      int, int, int);"}, {"sha": "0221a6867b57d27918ee222fd2a0efcfb07d63f6", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -1922,7 +1922,7 @@ cris_normal_notice_update_cc (rtx exp, rtx insn)\n     check-cc-attribute methods.  */\n \n void\n-cris_notice_update_cc (rtx exp, rtx insn)\n+cris_notice_update_cc (rtx exp, rtx_insn *insn)\n {\n   enum attr_cc attrval = get_attr_cc (insn);\n "}, {"sha": "38b07b882df5d993119aa0a3f5c741036bde2878", "filename": "gcc/config/epiphany/epiphany-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fepiphany%2Fepiphany-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fepiphany%2Fepiphany-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany-protos.h?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -43,7 +43,7 @@ extern int hard_regno_mode_ok (int regno, enum machine_mode mode);\n extern void emit_set_fp_mode (int entity, int mode, int prev_mode,\n \t\t\t      HARD_REG_SET regs_live);\n #endif\n-extern void epiphany_insert_mode_switch_use (rtx insn, int, int);\n+extern void epiphany_insert_mode_switch_use (rtx_insn *insn, int, int);\n extern void epiphany_expand_set_fp_mode (rtx *operands);\n extern int epiphany_mode_needed (int entity, rtx_insn *insn);\n extern int epiphany_mode_after (int entity, int last_mode, rtx_insn *insn);\n@@ -59,5 +59,5 @@ extern bool epiphany_regno_rename_ok (unsigned src, unsigned dst);\n    can't / won't include that.  In particular:\n    PR other/55523: gencondmd file includes / dependencies are messed up,\n    it uses peephole2 predicates without having all the necessary headers.  */\n-extern int get_attr_sched_use_fpu (rtx);\n+extern int get_attr_sched_use_fpu (rtx_insn *);\n "}, {"sha": "4460ab8247914deeaf9f6d954e25c993bd1fb086", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -2692,7 +2692,7 @@ epiphany_expand_set_fp_mode (rtx *operands)\n }\n \n void\n-epiphany_insert_mode_switch_use (rtx insn,\n+epiphany_insert_mode_switch_use (rtx_insn *insn,\n \t\t\t\t int entity ATTRIBUTE_UNUSED,\n \t\t\t\t int mode ATTRIBUTE_UNUSED)\n {"}, {"sha": "8f9c512160e65b89436f8e1e52a11fc433e63ce9", "filename": "gcc/config/epiphany/mode-switch-use.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fepiphany%2Fmode-switch-use.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fepiphany%2Fmode-switch-use.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fmode-switch-use.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -43,7 +43,7 @@ insert_uses (void)\n   static const int num_modes[] = NUM_MODES_FOR_MODE_SWITCHING;\n #define N_ENTITIES ARRAY_SIZE (num_modes)\n   int e;\n-  void (*target_insert_mode_switch_use) (rtx insn, int, int)\n+  void (*target_insert_mode_switch_use) (rtx_insn *insn, int, int)\n     = TARGET_INSERT_MODE_SWITCH_USE;\n \n   for (e = N_ENTITIES - 1; e >= 0; e--)"}, {"sha": "854d1eac3bc2f864f0b9585ed9457a0b62905c81", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -325,8 +325,8 @@ static void frv_ifcvt_add_insn\t\t\t(rtx, rtx, int);\n static rtx frv_ifcvt_rewrite_mem\t\t(rtx, enum machine_mode, rtx);\n static rtx frv_ifcvt_load_value\t\t\t(rtx, rtx);\n static int frv_acc_group_1\t\t\t(rtx *, void *);\n-static unsigned int frv_insn_unit\t\t(rtx);\n-static bool frv_issues_to_branch_unit_p\t\t(rtx);\n+static unsigned int frv_insn_unit\t\t(rtx_insn *);\n+static bool frv_issues_to_branch_unit_p\t\t(rtx_insn *);\n static int frv_cond_flags \t\t\t(rtx);\n static bool frv_regstate_conflict_p \t\t(regstate_t, regstate_t);\n static int frv_registers_conflict_p_1 \t\t(rtx *, void *);\n@@ -336,7 +336,7 @@ static void frv_registers_update \t\t(rtx);\n static void frv_start_packet \t\t\t(void);\n static void frv_start_packet_block \t\t(void);\n static void frv_finish_packet \t\t\t(void (*) (void));\n-static bool frv_pack_insn_p \t\t\t(rtx);\n+static bool frv_pack_insn_p \t\t\t(rtx_insn *);\n static void frv_add_insn_to_packet\t\t(rtx_insn *);\n static void frv_insert_nop_in_packet\t\t(rtx_insn *);\n static bool frv_for_each_packet \t\t(void (*) (void));\n@@ -7058,7 +7058,7 @@ frv_acc_group (rtx insn)\n    type attribute, we can cache the results in FRV_TYPE_TO_UNIT[].  */\n \n static unsigned int\n-frv_insn_unit (rtx insn)\n+frv_insn_unit (rtx_insn *insn)\n {\n   enum attr_type type;\n \n@@ -7089,7 +7089,7 @@ frv_insn_unit (rtx insn)\n /* Return true if INSN issues to a branch unit.  */\n \n static bool\n-frv_issues_to_branch_unit_p (rtx insn)\n+frv_issues_to_branch_unit_p (rtx_insn *insn)\n {\n   return frv_unit_groups[frv_insn_unit (insn)] == GROUP_B;\n }\n@@ -7344,7 +7344,7 @@ frv_finish_packet (void (*handle_packet) (void))\n    the DFA state on success.  */\n \n static bool\n-frv_pack_insn_p (rtx insn)\n+frv_pack_insn_p (rtx_insn *insn)\n {\n   /* See if the packet is already as long as it can be.  */\n   if (frv_packet.num_insns == frv_packet.issue_rate)\n@@ -7567,8 +7567,8 @@ frv_sort_insn_group_1 (enum frv_insn_group group,\n static int\n frv_compare_insns (const void *first, const void *second)\n {\n-  const rtx *const insn1 = (rtx const *) first,\n-    *const insn2 = (rtx const *) second;\n+  rtx_insn * const *insn1 = (rtx_insn * const *) first;\n+  rtx_insn * const *insn2 = (rtx_insn * const *) second;\n   return frv_insn_unit (*insn1) - frv_insn_unit (*insn2);\n }\n "}, {"sha": "2dd699a8eeed51e7b4bf7c3b2ad8ab4a23c2c426", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -47,7 +47,7 @@ extern int standard_80387_constant_p (rtx);\n extern const char *standard_80387_constant_opcode (rtx);\n extern rtx standard_80387_constant_rtx (int);\n extern int standard_sse_constant_p (rtx);\n-extern const char *standard_sse_constant_opcode (rtx, rtx);\n+extern const char *standard_sse_constant_opcode (rtx_insn *, rtx);\n extern bool symbolic_reference_mentioned_p (rtx);\n extern bool extended_reg_mentioned_p (rtx);\n extern bool x86_extended_QIreg_mentioned_p (rtx_insn *);\n@@ -75,7 +75,7 @@ extern void split_double_mode (enum machine_mode, rtx[], int, rtx[], rtx[]);\n extern const char *output_set_got (rtx, rtx);\n extern const char *output_387_binary_op (rtx, rtx*);\n extern const char *output_387_reg_move (rtx, rtx*);\n-extern const char *output_fix_trunc (rtx, rtx*, bool);\n+extern const char *output_fix_trunc (rtx_insn *, rtx*, bool);\n extern const char *output_fp_compare (rtx, rtx*, bool, bool);\n extern const char *output_adjust_stack_and_probe (rtx);\n extern const char *output_probe_stack_range (rtx, rtx);"}, {"sha": "37024b48af39cc3ef6fb9ea0c396df927fdcdb53", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -8992,7 +8992,7 @@ standard_sse_constant_p (rtx x)\n    the constant X.  */\n \n const char *\n-standard_sse_constant_opcode (rtx insn, rtx x)\n+standard_sse_constant_opcode (rtx_insn *insn, rtx x)\n {\n   switch (standard_sse_constant_p (x))\n     {\n@@ -16461,7 +16461,7 @@ ix86_emit_mode_set (int entity, int mode, int prev_mode ATTRIBUTE_UNUSED,\n    operand may be [SDX]Fmode.  */\n \n const char *\n-output_fix_trunc (rtx insn, rtx *operands, bool fisttp)\n+output_fix_trunc (rtx_insn *insn, rtx *operands, bool fisttp)\n {\n   int stack_top_dies = find_regno_note (insn, REG_DEAD, FIRST_STACK_REG) != 0;\n   int dimode_p = GET_MODE (operands[0]) == DImode;\n@@ -26374,7 +26374,7 @@ core2i7_dfa_post_advance_cycle (void)\n   data->ifetch_block_n_insns = 0;\n }\n \n-static int min_insn_size (rtx);\n+static int min_insn_size (rtx_insn *);\n \n /* Filter out insns from ready_try that the core will not be able to issue\n    on current cycle due to decoder.  */\n@@ -26385,7 +26385,7 @@ core2i7_first_cycle_multipass_filter_ready_try\n {\n   while (n_ready--)\n     {\n-      rtx insn;\n+      rtx_insn *insn;\n       int insn_size;\n \n       if (ready_try[n_ready])\n@@ -39082,7 +39082,7 @@ x86_function_profiler (FILE *file, int labelno ATTRIBUTE_UNUSED)\n    99% of cases.  */\n \n static int\n-min_insn_size (rtx insn)\n+min_insn_size (rtx_insn *insn)\n {\n   int l = 0, len;\n \n@@ -45836,7 +45836,7 @@ static dispatch_windows *dispatch_window_list1;\n /* Get dispatch group of insn.  */\n \n static enum dispatch_group\n-get_mem_group (rtx insn)\n+get_mem_group (rtx_insn *insn)\n {\n   enum attr_memory memory;\n \n@@ -45858,7 +45858,7 @@ get_mem_group (rtx insn)\n /* Return true if insn is a compare instruction.  */\n \n static bool\n-is_cmp (rtx insn)\n+is_cmp (rtx_insn *insn)\n {\n   enum attr_type type;\n \n@@ -46095,7 +46095,7 @@ has_immediate (rtx insn)\n /* Return single or double path for instructions.  */\n \n static enum insn_path\n-get_insn_path (rtx insn)\n+get_insn_path (rtx_insn *insn)\n {\n   enum attr_amdfam10_decode path = get_attr_amdfam10_decode (insn);\n \n@@ -46111,7 +46111,7 @@ get_insn_path (rtx insn)\n /* Return insn dispatch group.  */\n \n static enum dispatch_group\n-get_insn_group (rtx insn)\n+get_insn_group (rtx_insn *insn)\n {\n   enum dispatch_group group = get_mem_group (insn);\n   if (group)\n@@ -46136,7 +46136,7 @@ get_insn_group (rtx insn)\n    window WINDOW_LIST.  */\n \n static int\n-count_num_restricted (rtx insn, dispatch_windows *window_list)\n+count_num_restricted (rtx_insn *insn, dispatch_windows *window_list)\n {\n   enum dispatch_group group = get_insn_group (insn);\n   int imm_size;\n@@ -46186,7 +46186,7 @@ count_num_restricted (rtx insn, dispatch_windows *window_list)\n    last window scheduled.  */\n \n static bool\n-fits_dispatch_window (rtx insn)\n+fits_dispatch_window (rtx_insn *insn)\n {\n   dispatch_windows *window_list = dispatch_window_list;\n   dispatch_windows *window_list_next = dispatch_window_list->next;\n@@ -46243,7 +46243,7 @@ fits_dispatch_window (rtx insn)\n    dispatch window WINDOW_LIST.  */\n \n static void\n-add_insn_window (rtx insn, dispatch_windows *window_list, int num_uops)\n+add_insn_window (rtx_insn *insn, dispatch_windows *window_list, int num_uops)\n {\n   int byte_len = min_insn_size (insn);\n   int num_insn = window_list->num_insn;\n@@ -46294,7 +46294,7 @@ add_insn_window (rtx insn, dispatch_windows *window_list, int num_uops)\n    the window exceed allowable, it allocates a new window.  */\n \n static void\n-add_to_dispatch_window (rtx insn)\n+add_to_dispatch_window (rtx_insn *insn)\n {\n   int byte_len;\n   dispatch_windows *window_list;\n@@ -46429,7 +46429,7 @@ debug_dispatch_window (int window_num)\n /* Print INSN dispatch information to FILE.  */\n \n DEBUG_FUNCTION static void\n-debug_insn_dispatch_info_file (FILE *file, rtx insn)\n+debug_insn_dispatch_info_file (FILE *file, rtx_insn *insn)\n {\n   int byte_len;\n   enum insn_path path;"}, {"sha": "b67351c5bdbc14720fdf6066073c71cf3f03e72c", "filename": "gcc/config/m32c/m32c-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -58,7 +58,7 @@ int  m32c_legitimize_reload_address (rtx *, enum machine_mode, int, int, int);\n int  m32c_limit_reload_class (enum machine_mode, int);\n int  m32c_modes_tieable_p (enum machine_mode, enum machine_mode);\n bool m32c_mov_ok (rtx *, enum machine_mode);\n-char * m32c_output_compare (rtx, rtx *);\n+char * m32c_output_compare (rtx_insn *, rtx *);\n int  m32c_prepare_move (rtx *, enum machine_mode);\n int  m32c_prepare_shift (rtx *, int, int);\n int  m32c_reg_ok_for_base_p (rtx, int);"}, {"sha": "71723c83434e1b41369bab41cde40caf1c79031e", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -4293,11 +4293,12 @@ flags_needed_for_conditional (rtx cond)\n /* Returns true if a compare insn is redundant because it would only\n    set flags that are already set correctly.  */\n static bool\n-m32c_compare_redundant (rtx cmp, rtx *operands)\n+m32c_compare_redundant (rtx_insn *cmp, rtx *operands)\n {\n   int flags_needed;\n   int pflags;\n-  rtx prev, pp, next;\n+  rtx_insn *prev;\n+  rtx pp, next;\n   rtx op0, op1;\n #if DEBUG_CMP\n   int prev_icode, i;\n@@ -4508,7 +4509,7 @@ m32c_compare_redundant (rtx cmp, rtx *operands)\n    the compare is redundant, else a normal pattern is returned.  Thus,\n    the assembler output says where the compare would have been.  */\n char *\n-m32c_output_compare (rtx insn, rtx *operands)\n+m32c_output_compare (rtx_insn *insn, rtx *operands)\n {\n   static char templ[] = \";cmp.b\\t%1,%0\";\n   /*                             ^ 5  */"}, {"sha": "d877a4f2863adc31653ff525687caab6ed65ee72", "filename": "gcc/config/m32r/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fm32r%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fm32r%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fpredicates.md?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -390,7 +390,7 @@\n   if (! INSN_P (op))\n     return 0;\n \n-  return get_attr_length (op) == 2;\n+  return get_attr_length (as_a <rtx_insn *> (op)) == 2;\n })\n \n ;; Return true if op is an integer constant, less than or equal to\n@@ -415,7 +415,7 @@\n   if (! INSN_P (op))\n     return 0;\n \n-  return get_attr_length (op) != 2;\n+  return get_attr_length (as_a <rtx_insn *> (op)) != 2;\n })\n \n ;; Returns 1 if OP is an acceptable operand for seth/add3."}, {"sha": "e9ad9c94faa74d0c927b9feb3581fe26ea76dd90", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -80,8 +80,8 @@ extern enum attr_mac m68k_sched_mac;\n \n extern enum attr_opx_type m68k_sched_attr_opx_type (rtx_insn *, int);\n extern enum attr_opy_type m68k_sched_attr_opy_type (rtx_insn *, int);\n-extern enum attr_size m68k_sched_attr_size (rtx);\n-extern enum attr_op_mem m68k_sched_attr_op_mem (rtx);\n+extern enum attr_size m68k_sched_attr_size (rtx_insn *);\n+extern enum attr_op_mem m68k_sched_attr_op_mem (rtx_insn *);\n #endif /* HAVE_ATTR_cpu */\n \n #endif /* RTX_CODE */"}, {"sha": "cb37af5242c75375106941a241b6364432391ad0", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -5640,7 +5640,7 @@ m68k_sched_attr_opy_type (rtx_insn *insn, int address_p)\n \n /* Return size of INSN as int.  */\n static int\n-sched_get_attr_size_int (rtx insn)\n+sched_get_attr_size_int (rtx_insn *insn)\n {\n   int size;\n \n@@ -5725,7 +5725,7 @@ sched_get_attr_size_int (rtx insn)\n \n /* Return size of INSN as attribute enum value.  */\n enum attr_size\n-m68k_sched_attr_size (rtx insn)\n+m68k_sched_attr_size (rtx_insn *insn)\n {\n   switch (sched_get_attr_size_int (insn))\n     {\n@@ -5746,7 +5746,7 @@ m68k_sched_attr_size (rtx insn)\n /* Return operand X or Y (depending on OPX_P) of INSN,\n    if it is a MEM, or NULL overwise.  */\n static enum attr_op_type\n-sched_get_opxy_mem_type (rtx insn, bool opx_p)\n+sched_get_opxy_mem_type (rtx_insn *insn, bool opx_p)\n {\n   if (opx_p)\n     {\n@@ -5802,7 +5802,7 @@ sched_get_opxy_mem_type (rtx insn, bool opx_p)\n \n /* Implement op_mem attribute.  */\n enum attr_op_mem\n-m68k_sched_attr_op_mem (rtx insn)\n+m68k_sched_attr_op_mem (rtx_insn *insn)\n {\n   enum attr_op_type opx;\n   enum attr_op_type opy;\n@@ -6322,7 +6322,7 @@ sched_get_reg_operand (rtx_insn *insn, bool opx_p)\n /* Return true, if X or Y (depending on OPX_P) operand of INSN\n    is a MEM.  */\n static bool\n-sched_mem_operand_p (rtx insn, bool opx_p)\n+sched_mem_operand_p (rtx_insn *insn, bool opx_p)\n {\n   switch (sched_get_opxy_mem_type (insn, opx_p))\n     {"}, {"sha": "345db04ddd0e6977012c912336f2fc6da745c56d", "filename": "gcc/config/mep/mep-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fmep%2Fmep-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fmep%2Fmep-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep-protos.h?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -27,7 +27,7 @@ extern bool mep_bit_position_p (rtx, bool);\n extern bool mep_split_mov (rtx *, int);\n extern bool mep_vliw_mode_match (rtx);\n extern bool mep_vliw_jmp_match (rtx);\n-extern bool mep_multi_slot (rtx);\n+extern bool mep_multi_slot (rtx_insn *);\n extern bool mep_legitimate_address (enum machine_mode, rtx, int);\n extern int mep_legitimize_address (rtx *, rtx, enum machine_mode);\n extern int mep_legitimize_reload_address (rtx *, enum machine_mode, int, /*enum reload_type*/ int, int);"}, {"sha": "1c0e80b3bb3b5cb82eecb4d2fc7bdbb67bed0652", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -1061,7 +1061,7 @@ mep_vliw_jmp_match (rtx tgt)\n }\n \n bool\n-mep_multi_slot (rtx x)\n+mep_multi_slot (rtx_insn *x)\n {\n   return get_attr_slot (x) == SLOT_MULTI;\n }"}, {"sha": "ba4a850e50a30e3d8e235e1db9a675db8b4ff69e", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -294,8 +294,8 @@ extern const char *mips_output_conditional_branch (rtx_insn *, rtx *,\n extern const char *mips_output_order_conditional_branch (rtx_insn *, rtx *,\n \t\t\t\t\t\t\t bool);\n extern const char *mips_output_sync (void);\n-extern const char *mips_output_sync_loop (rtx, rtx *);\n-extern unsigned int mips_sync_loop_insns (rtx, rtx *);\n+extern const char *mips_output_sync_loop (rtx_insn *, rtx *);\n+extern unsigned int mips_sync_loop_insns (rtx_insn *, rtx *);\n extern const char *mips_output_division (const char *, rtx *);\n extern const char *mips_output_probe_stack_range (rtx, rtx);\n extern unsigned int mips_hard_regno_nregs (int, enum machine_mode);"}, {"sha": "98652f634f5c67e3a0dcdfea5a09322858219b1c", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -8107,7 +8107,7 @@ mips_print_operand_punctuation (FILE *file, int ch)\n       /* If the delay slot instruction is short, then use the\n \t compact version.  */\n       if (final_sequence == 0\n-\t  || get_attr_length (XVECEXP (final_sequence, 0, 1)) == 2)\n+\t  || get_attr_length (final_sequence->insn (1)) == 2)\n \tputc ('s', file);\n       break;\n \n@@ -12683,7 +12683,7 @@ mips_get_sync_operand (rtx *operands, int index, rtx default_value)\n    sequence for it.  */\n \n static void\n-mips_process_sync_loop (rtx insn, rtx *operands)\n+mips_process_sync_loop (rtx_insn *insn, rtx *operands)\n {\n   rtx at, mem, oldval, newval, inclusive_mask, exclusive_mask;\n   rtx required_oldval, insn1_op2, tmp1, tmp2, tmp3, cmp;\n@@ -12865,7 +12865,7 @@ mips_process_sync_loop (rtx insn, rtx *operands)\n    the operands given by OPERANDS.  */\n \n const char *\n-mips_output_sync_loop (rtx insn, rtx *operands)\n+mips_output_sync_loop (rtx_insn *insn, rtx *operands)\n {\n   mips_process_sync_loop (insn, operands);\n \n@@ -12892,7 +12892,7 @@ mips_output_sync_loop (rtx insn, rtx *operands)\n    which has the operands given by OPERANDS.  */\n \n unsigned int\n-mips_sync_loop_insns (rtx insn, rtx *operands)\n+mips_sync_loop_insns (rtx_insn *insn, rtx *operands)\n {\n   mips_process_sync_loop (insn, operands);\n   return mips_multi_num_insns;\n@@ -13511,7 +13511,7 @@ static enum attr_type mips_last_74k_agen_insn = TYPE_UNKNOWN;\n    resets to TYPE_UNKNOWN state.  */\n \n static void\n-mips_74k_agen_init (rtx insn)\n+mips_74k_agen_init (rtx_insn *insn)\n {\n   if (!insn || CALL_P (insn) || JUMP_P (insn))\n     mips_last_74k_agen_insn = TYPE_UNKNOWN;\n@@ -13585,7 +13585,7 @@ mips_sched_init (FILE *file ATTRIBUTE_UNUSED, int verbose ATTRIBUTE_UNUSED,\n {\n   mips_macc_chains_last_hilo = 0;\n   vr4130_last_insn = 0;\n-  mips_74k_agen_init (NULL_RTX);\n+  mips_74k_agen_init (NULL);\n \n   /* When scheduling for Loongson2, branch instructions go to ALU1,\n      therefore basic block is most likely to start with round-robin counter"}, {"sha": "b4c5af994e664d2f5c043498d9b3ec2816c75543", "filename": "gcc/config/nds32/nds32-fp-as-gp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fnds32%2Fnds32-fp-as-gp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fnds32%2Fnds32-fp-as-gp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-fp-as-gp.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -72,7 +72,7 @@ nds32_have_prologue_p (void)\n /* Return true if is load/store with SYMBOL_REF addressing mode\n    and memory mode is SImode.  */\n static bool\n-nds32_symbol_load_store_p (rtx insn)\n+nds32_symbol_load_store_p (rtx_insn *insn)\n {\n   rtx mem_src = NULL_RTX;\n "}, {"sha": "24360eacb415b2d0441757a3750c91c632d38093", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -3423,7 +3423,7 @@ nds32_adjust_insn_length (rtx_insn *insn, int length)\n int\n nds32_target_alignment (rtx label)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   if (optimize_size)\n     return 0;"}, {"sha": "3da845d635c50fe4623f46c8fac49503fda2280d", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -81,7 +81,7 @@ extern rtx pa_return_addr_rtx (int, rtx);\n extern enum direction pa_function_arg_padding (enum machine_mode, const_tree);\n #endif\n #endif /* ARGS_SIZE_RTX */\n-extern int pa_insn_refs_are_delayed (rtx);\n+extern int pa_insn_refs_are_delayed (rtx_insn *);\n extern rtx pa_get_deferred_plabel (rtx);\n #endif /* RTX_CODE */\n "}, {"sha": "6db4f3dbd80bb2753f4a96d217adb5d2200eac55", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -4143,7 +4143,7 @@ update_total_code_bytes (unsigned int nbytes)\n static void\n pa_output_function_epilogue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n {\n-  rtx insn = get_last_insn ();\n+  rtx_insn *insn = get_last_insn ();\n   bool extra_nop;\n \n   /* pa_expand_epilogue does the dirty work now.  We just need\n@@ -4161,7 +4161,7 @@ pa_output_function_epilogue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n \n   /* If it is a sequence, then look inside.  */\n   if (insn && NONJUMP_INSN_P (insn) && GET_CODE (PATTERN (insn)) == SEQUENCE)\n-    insn = XVECEXP (PATTERN (insn), 0, 0);\n+    insn = as_a <rtx_sequence *> (PATTERN (insn))-> insn (0);\n \n   /* If insn is a CALL_INSN, then it must be a call to a volatile\n      function (otherwise there would be epilogue insns).  */\n@@ -6325,7 +6325,7 @@ pa_scalar_mode_supported_p (enum machine_mode mode)\n    it branches into the delay slot.  Otherwise, return FALSE.  */\n \n static bool\n-branch_to_delay_slot_p (rtx insn)\n+branch_to_delay_slot_p (rtx_insn *insn)\n {\n   rtx jump_insn;\n \n@@ -6359,7 +6359,7 @@ branch_to_delay_slot_p (rtx insn)\n    when this occurs.  */\n \n static bool\n-branch_needs_nop_p (rtx insn)\n+branch_needs_nop_p (rtx_insn *insn)\n {\n   rtx jump_insn;\n \n@@ -6387,7 +6387,7 @@ branch_needs_nop_p (rtx insn)\n    to a mis-predicted branch when we fall through.  */\n \n static bool\n-use_skip_p (rtx insn)\n+use_skip_p (rtx_insn *insn)\n {\n   rtx jump_insn = next_active_insn (JUMP_LABEL (insn));\n \n@@ -9255,7 +9255,7 @@ pa_can_combine_p (rtx_insn *new_rtx, rtx_insn *anchor, rtx_insn *floater,\n    filter out things it will not accept -- SEQUENCE, USE and CLOBBER insns\n    in particular.  */\n int\n-pa_insn_refs_are_delayed (rtx insn)\n+pa_insn_refs_are_delayed (rtx_insn *insn)\n {\n   return ((NONJUMP_INSN_P (insn)\n \t   && GET_CODE (PATTERN (insn)) != SEQUENCE"}, {"sha": "5fe1f6fc6c9d0fe8b7e66e85aa28d9697808b076", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -3385,7 +3385,7 @@ rl78_propogate_register_origins (void)\n   int origins[FIRST_PSEUDO_REGISTER];\n   int age[FIRST_PSEUDO_REGISTER];\n   int i;\n-  rtx insn, ninsn = NULL_RTX;\n+  rtx_insn *insn, *ninsn = NULL;\n   rtx pat;\n \n   reset_origins (origins, age);"}, {"sha": "770aa6250a4410056741335731054b22492d122f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -1076,15 +1076,15 @@ static bool rs6000_debug_rtx_costs (rtx, int, int, int, int *, bool);\n static int rs6000_debug_address_cost (rtx, enum machine_mode, addr_space_t,\n \t\t\t\t      bool);\n static int rs6000_debug_adjust_cost (rtx_insn *, rtx, rtx_insn *, int);\n-static bool is_microcoded_insn (rtx);\n-static bool is_nonpipeline_insn (rtx);\n-static bool is_cracked_insn (rtx);\n+static bool is_microcoded_insn (rtx_insn *);\n+static bool is_nonpipeline_insn (rtx_insn *);\n+static bool is_cracked_insn (rtx_insn *);\n static bool is_load_insn (rtx, rtx *);\n static bool is_store_insn (rtx, rtx *);\n static bool set_to_load_agen (rtx_insn *,rtx_insn *);\n-static bool insn_terminates_group_p (rtx , enum group_termination);\n-static bool insn_must_be_first_in_group (rtx);\n-static bool insn_must_be_last_in_group (rtx);\n+static bool insn_terminates_group_p (rtx_insn *, enum group_termination);\n+static bool insn_must_be_first_in_group (rtx_insn *);\n+static bool insn_must_be_last_in_group (rtx_insn *);\n static void altivec_init_builtins (void);\n static tree builtin_function_type (enum machine_mode, enum machine_mode,\n \t\t\t\t   enum machine_mode, enum machine_mode,\n@@ -26643,7 +26643,7 @@ rs6000_debug_adjust_cost (rtx_insn *insn, rtx link, rtx_insn *dep_insn,\n    Return false otherwise.  */\n \n static bool\n-is_microcoded_insn (rtx insn)\n+is_microcoded_insn (rtx_insn *insn)\n {\n   if (!insn || !NONDEBUG_INSN_P (insn)\n       || GET_CODE (PATTERN (insn)) == USE\n@@ -26674,7 +26674,7 @@ is_microcoded_insn (rtx insn)\n    by the processor (and therefore occupies 2 issue slots).  */\n \n static bool\n-is_cracked_insn (rtx insn)\n+is_cracked_insn (rtx_insn *insn)\n {\n   if (!insn || !NONDEBUG_INSN_P (insn)\n       || GET_CODE (PATTERN (insn)) == USE\n@@ -26719,7 +26719,7 @@ is_cracked_insn (rtx insn)\n    the branch slot.  */\n \n static bool\n-is_branch_slot_insn (rtx insn)\n+is_branch_slot_insn (rtx_insn *insn)\n {\n   if (!insn || !NONDEBUG_INSN_P (insn)\n       || GET_CODE (PATTERN (insn)) == USE\n@@ -26907,7 +26907,7 @@ rs6000_adjust_priority (rtx_insn *insn ATTRIBUTE_UNUSED, int priority)\n \n /* Return true if the instruction is nonpipelined on the Cell. */\n static bool\n-is_nonpipeline_insn (rtx insn)\n+is_nonpipeline_insn (rtx_insn *insn)\n {\n   enum attr_type type;\n   if (!insn || !NONDEBUG_INSN_P (insn)\n@@ -27460,7 +27460,7 @@ rs6000_sched_reorder2 (FILE *dump, int sched_verbose, rtx_insn **ready,\n    the first insn in the group it belongs to).  */\n \n static bool\n-insn_terminates_group_p (rtx insn, enum group_termination which_group)\n+insn_terminates_group_p (rtx_insn *insn, enum group_termination which_group)\n {\n   bool first, last;\n \n@@ -27483,7 +27483,7 @@ insn_terminates_group_p (rtx insn, enum group_termination which_group)\n \n \n static bool\n-insn_must_be_first_in_group (rtx insn)\n+insn_must_be_first_in_group (rtx_insn *insn)\n {\n   enum attr_type type;\n \n@@ -27661,7 +27661,7 @@ insn_must_be_first_in_group (rtx insn)\n }\n \n static bool\n-insn_must_be_last_in_group (rtx insn)\n+insn_must_be_last_in_group (rtx_insn *insn)\n {\n   enum attr_type type;\n \n@@ -27823,7 +27823,7 @@ is_costly_group (rtx *group_insns, rtx next_insn)\n \n static int\n force_new_group (int sched_verbose, FILE *dump, rtx *group_insns,\n-\t\t rtx next_insn, bool *group_end, int can_issue_more,\n+\t\t rtx_insn *next_insn, bool *group_end, int can_issue_more,\n \t\t int *group_count)\n {\n   rtx nop;"}, {"sha": "0997fb648cb9f0335e67a19a4a2894a7f1c6e3e1", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -11504,7 +11504,7 @@ static int s390_sched_state;\n #define S390_OOO_SCHED_ATTR_MASK_GROUPALONE 0x8\n \n static unsigned int\n-s390_get_sched_attrmask (rtx insn)\n+s390_get_sched_attrmask (rtx_insn *insn)\n {\n   unsigned int mask = 0;\n \n@@ -11523,7 +11523,7 @@ s390_get_sched_attrmask (rtx insn)\n    better.  The score is calculated from the OOO scheduling attributes\n    of INSN and the scheduling state s390_sched_state.  */\n static int\n-s390_sched_score (rtx insn)\n+s390_sched_score (rtx_insn *insn)\n {\n   unsigned int mask = s390_get_sched_attrmask (insn);\n   int score = 0;"}, {"sha": "336aaef6b8f78df974df23ba5b9d1de650c4f8ec", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -94,15 +94,15 @@ extern rtx sh_fsca_int2sf (void);\n \n /* Declare functions defined in sh.c and used in templates.  */\n \n-extern const char *output_branch (int, rtx, rtx *);\n+extern const char *output_branch (int, rtx_insn *, rtx *);\n extern const char *output_ieee_ccmpeq (rtx_insn *, rtx *);\n extern const char *output_branchy_insn (enum rtx_code, const char *,\n \t\t\t\t\trtx_insn *, rtx *);\n extern const char *output_movedouble (rtx, rtx[], enum machine_mode);\n extern const char *output_movepcrel (rtx, rtx[], enum machine_mode);\n extern const char *output_far_jump (rtx_insn *, rtx);\n \n-extern rtx sfunc_uses_reg (rtx);\n+extern rtx sfunc_uses_reg (rtx_insn *);\n extern int barrier_align (rtx_insn *);\n extern int sh_loop_align (rtx_insn *);\n extern bool fp_zero_operand (rtx);"}, {"sha": "9456d8bc23292fcb8fc7472f72fd77f28b620e04", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -1205,8 +1205,8 @@ sh_print_operand (FILE *stream, rtx x, int code)\n \n     case '.':\n       if (final_sequence\n-\t  && ! INSN_ANNULLED_BRANCH_P (XVECEXP (final_sequence, 0, 0))\n-\t  && get_attr_length (XVECEXP (final_sequence, 0, 1)))\n+\t  && ! INSN_ANNULLED_BRANCH_P (final_sequence->insn (0))\n+\t  && get_attr_length (final_sequence->insn (1)))\n \tfprintf (stream, ASSEMBLER_DIALECT ? \"/s\" : \".s\");\n       break;\n     case ',':\n@@ -2754,7 +2754,7 @@ static int lf = 100;\n \n /* Output code for ordinary branches.  */\n const char *\n-output_branch (int logic, rtx insn, rtx *operands)\n+output_branch (int logic, rtx_insn *insn, rtx *operands)\n {\n   switch (get_attr_length (insn))\n     {\n@@ -2777,8 +2777,8 @@ output_branch (int logic, rtx insn, rtx *operands)\n \t     place for it is after the label.  final will do that by default.  */\n \n \t  if (final_sequence\n-\t      && ! INSN_ANNULLED_BRANCH_P (XVECEXP (final_sequence, 0, 0))\n-\t      && get_attr_length (XVECEXP (final_sequence, 0, 1)))\n+\t      && ! INSN_ANNULLED_BRANCH_P (final_sequence->insn (0))\n+\t      && get_attr_length (final_sequence->insn (1)))\n \t    {\n \t      asm_fprintf (asm_out_file, \"\\tb%s%ss\\t%LLF%d\\n\", logic ? \"f\" : \"t\",\n \t                   ASSEMBLER_DIALECT ? \"/\" : \".\", label);\n@@ -5368,7 +5368,7 @@ find_barrier (int num_mova, rtx_insn *mova, rtx_insn *from)\n    register is not used anywhere else in this instruction - except as the\n    destination of a set, return this register; else, return 0.  */\n rtx\n-sfunc_uses_reg (rtx insn)\n+sfunc_uses_reg (rtx_insn *insn)\n {\n   int i;\n   rtx pattern, part, reg_part, reg;"}, {"sha": "223f5baef3bad0b2eaeb2aa54f339ebac4cad629", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -85,9 +85,9 @@ extern int mems_ok_for_ldd_peep (rtx, rtx, rtx);\n extern rtx widen_mem_for_ldd_peep (rtx, rtx, enum machine_mode);\n extern int empty_delay_slot (rtx_insn *);\n extern int emit_cbcond_nop (rtx);\n-extern int eligible_for_call_delay (rtx);\n-extern int eligible_for_return_delay (rtx);\n-extern int eligible_for_sibcall_delay (rtx);\n+extern int eligible_for_call_delay (rtx_insn *);\n+extern int eligible_for_return_delay (rtx_insn *);\n+extern int eligible_for_sibcall_delay (rtx_insn *);\n extern int emit_move_sequence (rtx, enum machine_mode);\n extern int fp_sethi_p (rtx);\n extern int fp_mov_p (rtx);"}, {"sha": "103288ceccaaf100ba1604ee5055a1d8fe49892a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -3479,7 +3479,7 @@ emit_cbcond_nop (rtx insn)\n /* Return nonzero if TRIAL can go into the call delay slot.  */\n \n int\n-eligible_for_call_delay (rtx trial)\n+eligible_for_call_delay (rtx_insn *trial)\n {\n   rtx pat;\n \n@@ -3605,7 +3605,7 @@ eligible_for_restore_insn (rtx trial, bool return_p)\n /* Return nonzero if TRIAL can go into the function return's delay slot.  */\n \n int\n-eligible_for_return_delay (rtx trial)\n+eligible_for_return_delay (rtx_insn *trial)\n {\n   int regno;\n   rtx pat;\n@@ -3671,7 +3671,7 @@ eligible_for_return_delay (rtx trial)\n /* Return nonzero if TRIAL can go into the sibling call's delay slot.  */\n \n int\n-eligible_for_sibcall_delay (rtx trial)\n+eligible_for_sibcall_delay (rtx_insn *trial)\n {\n   rtx pat;\n "}, {"sha": "aafa52bd8ab0afd72b4710718be27b05e0a4a14a", "filename": "gcc/config/stormy16/stormy16-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -40,8 +40,8 @@ extern void xstormy16_initialize_trampoline (rtx, rtx, rtx);\n \n #ifdef RTX_CODE\n extern void xstormy16_emit_cbranch (enum rtx_code, rtx, rtx, rtx);\n-extern char *xstormy16_output_cbranch_hi (rtx, const char *, int, rtx);\n-extern char *xstormy16_output_cbranch_si (rtx, const char *, int, rtx);\n+extern char *xstormy16_output_cbranch_hi (rtx, const char *, int, rtx_insn *);\n+extern char *xstormy16_output_cbranch_si (rtx, const char *, int, rtx_insn *);\n \n extern void xstormy16_expand_casesi (rtx, rtx, rtx, rtx, rtx);\n extern void xstormy16_output_addr_vec (FILE *, rtx, rtx);"}, {"sha": "1a34d9730b18d276bf142aedd2f0f9bc7ec59b76", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -294,7 +294,8 @@ xstormy16_split_cbranch (enum machine_mode mode, rtx label, rtx comparison,\n    INSN is the insn.  */\n \n char *\n-xstormy16_output_cbranch_hi (rtx op, const char *label, int reversed, rtx insn)\n+xstormy16_output_cbranch_hi (rtx op, const char *label, int reversed,\n+\t\t\t     rtx_insn *insn)\n {\n   static char string[64];\n   int need_longbranch = (op != NULL_RTX\n@@ -367,7 +368,8 @@ xstormy16_output_cbranch_hi (rtx op, const char *label, int reversed, rtx insn)\n    INSN is the insn.  */\n \n char *\n-xstormy16_output_cbranch_si (rtx op, const char *label, int reversed, rtx insn)\n+xstormy16_output_cbranch_si (rtx op, const char *label, int reversed,\n+\t\t\t     rtx_insn *insn)\n {\n   static char string[64];\n   int need_longbranch = get_attr_length (insn) >= 8;"}, {"sha": "3f8b865710d6fa32c72c15ce56dbe17fa03c9a06", "filename": "gcc/config/v850/v850-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-protos.h?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -32,7 +32,7 @@ extern void   v850_init_expanders           (void);\n #ifdef RTX_CODE\n extern rtx    v850_return_addr              (int);\n extern const char *output_move_single       (rtx *);\n-extern void   notice_update_cc              (rtx, rtx);\n+extern void   notice_update_cc              (rtx, rtx_insn *);\n extern char * construct_save_jarl           (rtx);\n extern char * construct_restore_jr          (rtx);\n #ifdef HAVE_MACHINE_MODES"}, {"sha": "dca82b9ccac73fd0beb872ea13e37aa152002db3", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -1989,7 +1989,7 @@ expand_epilogue (void)\n \n /* Update the condition code from the insn.  */\n void\n-notice_update_cc (rtx body, rtx insn)\n+notice_update_cc (rtx body, rtx_insn *insn)\n {\n   switch (get_attr_cc (insn))\n     {"}, {"sha": "3b2d5e3ca3f971030164f8bb949824d0792665ae", "filename": "gcc/final.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -375,9 +375,8 @@ init_insn_lengths (void)\n    get its actual length.  Otherwise, use FALLBACK_FN to calculate the\n    length.  */\n static int\n-get_attr_length_1 (rtx uncast_insn, int (*fallback_fn) (rtx))\n+get_attr_length_1 (rtx_insn *insn, int (*fallback_fn) (rtx_insn *))\n {\n-  rtx_insn *insn = as_a <rtx_insn *> (uncast_insn);\n   rtx body;\n   int i;\n   int length = 0;\n@@ -428,15 +427,15 @@ get_attr_length_1 (rtx uncast_insn, int (*fallback_fn) (rtx))\n /* Obtain the current length of an insn.  If branch shortening has been done,\n    get its actual length.  Otherwise, get its maximum length.  */\n int\n-get_attr_length (rtx insn)\n+get_attr_length (rtx_insn *insn)\n {\n   return get_attr_length_1 (insn, insn_default_length);\n }\n \n /* Obtain the current length of an insn.  If branch shortening has been done,\n    get its actual length.  Otherwise, get its minimum length.  */\n int\n-get_attr_min_length (rtx insn)\n+get_attr_min_length (rtx_insn *insn)\n {\n   return get_attr_length_1 (insn, insn_min_length);\n }\n@@ -1107,7 +1106,7 @@ shorten_branches (rtx_insn *first)\n #endif /* CASE_VECTOR_SHORTEN_MODE */\n \n   /* Compute initial lengths, addresses, and varying flags for each insn.  */\n-  int (*length_fun) (rtx) = increasing ? insn_min_length : insn_default_length;\n+  int (*length_fun) (rtx_insn *) = increasing ? insn_min_length : insn_default_length;\n \n   for (insn_current_address = 0, insn = first;\n        insn != 0;\n@@ -1159,7 +1158,7 @@ shorten_branches (rtx_insn *first)\n #else\n \t  const_delay_slots = 0;\n #endif\n-\t  int (*inner_length_fun) (rtx)\n+\t  int (*inner_length_fun) (rtx_insn *)\n \t    = const_delay_slots ? length_fun : insn_default_length;\n \t  /* Inside a delay slot sequence, we do not do any branch shortening\n \t     if the shortening could change the number of delay slots\n@@ -1414,13 +1413,14 @@ shorten_branches (rtx_insn *first)\n \n \t  if (NONJUMP_INSN_P (insn) && GET_CODE (PATTERN (insn)) == SEQUENCE)\n \t    {\n+\t      rtx_sequence *seqn = as_a <rtx_sequence *> (PATTERN (insn));\n \t      int i;\n \n \t      body = PATTERN (insn);\n \t      new_length = 0;\n-\t      for (i = 0; i < XVECLEN (body, 0); i++)\n+\t      for (i = 0; i < seqn->len (); i++)\n \t\t{\n-\t\t  rtx inner_insn = XVECEXP (body, 0, i);\n+\t\t  rtx_insn *inner_insn = seqn->insn (i);\n \t\t  int inner_uid = INSN_UID (inner_insn);\n \t\t  int inner_length;\n "}, {"sha": "699590e9fbedeec9f11b881dc606ec05311c9393", "filename": "gcc/genattr.c", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -48,16 +48,18 @@ gen_attr (rtx attr)\n   /* If numeric attribute, don't need to write an enum.  */\n   if (GET_CODE (attr) == DEFINE_ENUM_ATTR)\n     printf (\"extern enum %s get_attr_%s (%s);\\n\\n\",\n-\t    XSTR (attr, 1), XSTR (attr, 0), (is_const ? \"void\" : \"rtx\"));\n+\t    XSTR (attr, 1), XSTR (attr, 0),\n+\t    (is_const ? \"void\" : \"rtx_insn *\"));\n   else\n     {\n       p = XSTR (attr, 1);\n       if (*p == '\\0')\n \tprintf (\"extern int get_attr_%s (%s);\\n\", XSTR (attr, 0),\n-\t\t(is_const ? \"void\" : \"rtx\"));\n+\t\t(is_const ? \"void\" : \"rtx_insn *\"));\n       else\n \tprintf (\"extern enum attr_%s get_attr_%s (%s);\\n\\n\",\n-\t\tXSTR (attr, 0), XSTR (attr, 0), (is_const ? \"void\" : \"rtx\"));\n+\t\tXSTR (attr, 0), XSTR (attr, 0),\n+\t\t(is_const ? \"void\" : \"rtx_insn *\"));\n     }\n \n   /* If `length' attribute, write additional function definitions and define\n@@ -66,10 +68,10 @@ gen_attr (rtx attr)\n     {\n       puts (\"\\\n extern void shorten_branches (rtx_insn *);\\n\\\n-extern int insn_default_length (rtx);\\n\\\n-extern int insn_min_length (rtx);\\n\\\n-extern int insn_variable_length_p (rtx);\\n\\\n-extern int insn_current_length (rtx);\\n\\n\\\n+extern int insn_default_length (rtx_insn *);\\n\\\n+extern int insn_min_length (rtx_insn *);\\n\\\n+extern int insn_variable_length_p (rtx_insn *);\\n\\\n+extern int insn_current_length (rtx_insn *);\\n\\n\\\n #include \\\"insn-addr.h\\\"\\n\");\n     }\n }\n@@ -176,7 +178,7 @@ main (int argc, char **argv)\n         {\n \t  if (! have_delay)\n \t    {\n-\t      printf (\"extern int num_delay_slots (rtx);\\n\");\n+\t      printf (\"extern int num_delay_slots (rtx_insn *);\\n\");\n \t      printf (\"extern int eligible_for_delay (rtx_insn *, int, rtx_insn *, int);\\n\\n\");\n \t      printf (\"extern int const_num_delay_slots (rtx_insn *);\\n\\n\");\n \t      have_delay = 1;\n@@ -230,25 +232,25 @@ main (int argc, char **argv)\n \t  printf (\"   and insn_default_latency.  */\\n\");\n \t  printf (\"extern void init_sched_attrs (void);\\n\\n\");\n \t  printf (\"/* Internal insn code number used by automata.  */\\n\");\n-\t  printf (\"extern int (*internal_dfa_insn_code) (rtx);\\n\\n\");\n+\t  printf (\"extern int (*internal_dfa_insn_code) (rtx_insn *);\\n\\n\");\n \t  printf (\"/* Insn latency time defined in define_insn_reservation. */\\n\");\n-\t  printf (\"extern int (*insn_default_latency) (rtx);\\n\\n\");\n+\t  printf (\"extern int (*insn_default_latency) (rtx_insn *);\\n\\n\");\n \t}\n       else\n \t{\n \t  printf (\"#define init_sched_attrs() do { } while (0)\\n\\n\");\n \t  printf (\"/* Internal insn code number used by automata.  */\\n\");\n-\t  printf (\"extern int internal_dfa_insn_code (rtx);\\n\\n\");\n+\t  printf (\"extern int internal_dfa_insn_code (rtx_insn *);\\n\\n\");\n \t  printf (\"/* Insn latency time defined in define_insn_reservation. */\\n\");\n-\t  printf (\"extern int insn_default_latency (rtx);\\n\\n\");\n+\t  printf (\"extern int insn_default_latency (rtx_insn *);\\n\\n\");\n \t}\n       printf (\"/* Return nonzero if there is a bypass for given insn\\n\");\n       printf (\"   which is a data producer.  */\\n\");\n-      printf (\"extern int bypass_p (rtx);\\n\\n\");\n+      printf (\"extern int bypass_p (rtx_insn *);\\n\\n\");\n       printf (\"/* Insn latency time on data consumed by the 2nd insn.\\n\");\n       printf (\"   Use the function if bypass_p returns nonzero for\\n\");\n       printf (\"   the 1st insn. */\\n\");\n-      printf (\"extern int insn_latency (rtx_insn *, rtx_insn *);\\n\\n\");\n+      printf (\"extern int insn_latency (rtx, rtx);\\n\\n\");\n       printf (\"/* Maximal insn latency time possible of all bypasses for this insn.\\n\");\n       printf (\"   Use the function if bypass_p returns nonzero for\\n\");\n       printf (\"   the 1st insn. */\\n\");\n@@ -288,7 +290,7 @@ main (int argc, char **argv)\n       printf (\"   implementation may require much memory.  */\\n\");\n       printf (\"extern int state_alts (state_t, rtx);\\n\");\n       printf (\"#endif\\n\\n\");\n-      printf (\"extern int min_issue_delay (state_t, rtx);\\n\");\n+      printf (\"extern int min_issue_delay (state_t, rtx_insn *);\\n\");\n       printf (\"/* The following function returns nonzero if no one insn\\n\");\n       printf (\"   can be issued in current DFA state. */\\n\");\n       printf (\"extern int state_dead_lock_p (state_t);\\n\");\n@@ -303,7 +305,7 @@ main (int argc, char **argv)\n       printf (\"/* The following function outputs reservations for given\\n\");\n       printf (\"   insn as they are described in the corresponding\\n\");\n       printf (\"   define_insn_reservation.  */\\n\");\n-      printf (\"extern void print_reservation (FILE *, rtx);\\n\");\n+      printf (\"extern void print_reservation (FILE *, rtx_insn *);\\n\");\n       printf (\"\\n#if CPU_UNITS_QUERY\\n\");\n       printf (\"/* The following function returns code of functional unit\\n\");\n       printf (\"   with given name (see define_cpu_unit). */\\n\");\n@@ -315,7 +317,7 @@ main (int argc, char **argv)\n       printf (\"#endif\\n\\n\");\n       printf (\"/* The following function returns true if insn\\n\");\n       printf (\"   has a dfa reservation.  */\\n\");\n-      printf (\"extern bool insn_has_dfa_reservation_p (rtx);\\n\\n\");\n+      printf (\"extern bool insn_has_dfa_reservation_p (rtx_insn *);\\n\\n\");\n       printf (\"/* Clean insn code cache.  It should be called if there\\n\");\n       printf (\"   is a chance that condition value in a\\n\");\n       printf (\"   define_insn_reservation will be changed after\\n\");\n@@ -346,11 +348,11 @@ main (int argc, char **argv)\n   /* We make an exception here to provide stub definitions for\n      insn_*_length* / get_attr_enabled functions.  */\n   puts (\"#if !HAVE_ATTR_length\\n\"\n-\t\"extern int hook_int_rtx_unreachable (rtx);\\n\"\n-\t\"#define insn_default_length hook_int_rtx_unreachable\\n\"\n-\t\"#define insn_min_length hook_int_rtx_unreachable\\n\"\n-\t\"#define insn_variable_length_p hook_int_rtx_unreachable\\n\"\n-\t\"#define insn_current_length hook_int_rtx_unreachable\\n\"\n+\t\"extern int hook_int_rtx_insn_unreachable (rtx_insn *);\\n\"\n+\t\"#define insn_default_length hook_int_rtx_insn_unreachable\\n\"\n+\t\"#define insn_min_length hook_int_rtx_insn_unreachable\\n\"\n+\t\"#define insn_variable_length_p hook_int_rtx_insn_unreachable\\n\"\n+\t\"#define insn_current_length hook_int_rtx_insn_unreachable\\n\"\n \t\"#include \\\"insn-addr.h\\\"\\n\"\n \t\"#endif\\n\"\n \t\"#if !HAVE_ATTR_enabled\\n\""}, {"sha": "9d34bc8d61c4717eb2f3a665d11dc693a170a0ed", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -4027,9 +4027,9 @@ write_attr_get (FILE *outf, struct attr_desc *attr)\n   /* If the attribute name starts with a star, the remainder is the name of\n      the subroutine to use, instead of `get_attr_...'.  */\n   if (attr->name[0] == '*')\n-    fprintf (outf, \"%s (rtx uncast_insn ATTRIBUTE_UNUSED)\\n\", &attr->name[1]);\n+    fprintf (outf, \"%s (rtx_insn *insn ATTRIBUTE_UNUSED)\\n\", &attr->name[1]);\n   else if (attr->is_const == 0)\n-    fprintf (outf, \"get_attr_%s (rtx uncast_insn ATTRIBUTE_UNUSED)\\n\", attr->name);\n+    fprintf (outf, \"get_attr_%s (rtx_insn *insn ATTRIBUTE_UNUSED)\\n\", attr->name);\n   else\n     {\n       fprintf (outf, \"get_attr_%s (void)\\n\", attr->name);\n@@ -4050,9 +4050,6 @@ write_attr_get (FILE *outf, struct attr_desc *attr)\n \n   fprintf (outf, \"{\\n\");\n \n-  if (attr->name[0] == '*' || attr->is_const == 0)\n-    fprintf (outf, \"  rtx_insn *insn = as_a <rtx_insn *> (uncast_insn);\\n\");\n-\n   /* Find attributes that are worth caching in the conditions.  */\n   cached_attr_count = 0;\n   attrs_seen_more_than_once = 0;\n@@ -4925,7 +4922,7 @@ make_automaton_attrs (void)\n \t    continue;\n \t  gcc_assert (GET_CODE (val->value) == CONST_STRING);\n \t  fprintf (dfa_file,\n-\t\t   \"extern int internal_dfa_insn_code_%s (rtx);\\n\",\n+\t\t   \"extern int internal_dfa_insn_code_%s (rtx_insn *);\\n\",\n \t\t   XSTR (val->value, 0));\n \t}\n       fprintf (dfa_file, \"\\n\");\n@@ -4937,7 +4934,7 @@ make_automaton_attrs (void)\n \t    continue;\n \t  gcc_assert (GET_CODE (val->value) == CONST_STRING);\n \t  fprintf (latency_file,\n-\t\t   \"extern int insn_default_latency_%s (rtx);\\n\",\n+\t\t   \"extern int insn_default_latency_%s (rtx_insn *);\\n\",\n \t\t   XSTR (val->value, 0));\n \t}\n       fprintf (latency_file, \"\\n\");\n@@ -4949,13 +4946,13 @@ make_automaton_attrs (void)\n \t    continue;\n \t  gcc_assert (GET_CODE (val->value) == CONST_STRING);\n \t  fprintf (attr_file,\n-\t\t   \"extern int internal_dfa_insn_code_%s (rtx);\\n\"\n-\t\t   \"extern int insn_default_latency_%s (rtx);\\n\",\n+\t\t   \"extern int internal_dfa_insn_code_%s (rtx_insn *);\\n\"\n+\t\t   \"extern int insn_default_latency_%s (rtx_insn *);\\n\",\n \t\t   XSTR (val->value, 0), XSTR (val->value, 0));\n \t}\n       fprintf (attr_file, \"\\n\");\n-      fprintf (attr_file, \"int (*internal_dfa_insn_code) (rtx);\\n\");\n-      fprintf (attr_file, \"int (*insn_default_latency) (rtx);\\n\");\n+      fprintf (attr_file, \"int (*internal_dfa_insn_code) (rtx_insn *);\\n\");\n+      fprintf (attr_file, \"int (*insn_default_latency) (rtx_insn *);\\n\");\n       fprintf (attr_file, \"\\n\");\n       fprintf (attr_file, \"void\\n\");\n       fprintf (attr_file, \"init_sched_attrs (void)\\n\");"}, {"sha": "da18e5da2f1771ce2091577d759f5c16a53d7874", "filename": "gcc/genautomata.c", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -8134,8 +8134,9 @@ output_internal_insn_code_evaluation (const char *insn_name,\n \t       insn_code_name, COLLAPSE_NDFA_VALUE_NAME);\n     }\n   fprintf (output_file, \"\\n  else\\n    {\\n\");\n-  fprintf (output_file, \"      %s = %s (%s);\\n\", insn_code_name,\n-\t   DFA_INSN_CODE_FUNC_NAME, insn_name);\n+  fprintf (output_file,\n+\t   \"      %s = %s (as_a <rtx_insn *> (%s));\\n\",\n+\t   insn_code_name, DFA_INSN_CODE_FUNC_NAME, insn_name);\n   fprintf (output_file, \"      if (%s > %s)\\n        return %d;\\n    }\\n\",\n \t   insn_code_name, ADVANCE_CYCLE_VALUE_NAME, code);\n }\n@@ -8165,7 +8166,7 @@ dfa_insn_code_enlarge (int uid)\\n\\\n \t   DFA_INSN_CODES_LENGTH_VARIABLE_NAME,\n \t   DFA_INSN_CODES_VARIABLE_NAME);\n   fprintf (output_file, \"\\\n-static inline int\\n%s (rtx %s)\\n\\\n+static inline int\\n%s (rtx_insn *%s)\\n\\\n {\\n\\\n   int uid = INSN_UID (%s);\\n\\\n   int %s;\\n\\n\",\n@@ -8208,7 +8209,7 @@ output_trans_func (void)\n static void\n output_min_issue_delay_func (void)\n {\n-  fprintf (output_file, \"int\\n%s (%s %s, rtx %s)\\n\",\n+  fprintf (output_file, \"int\\n%s (%s %s, rtx_insn *%s)\\n\",\n \t   MIN_ISSUE_DELAY_FUNC_NAME, STATE_TYPE_NAME, STATE_NAME,\n \t   INSN_PARAMETER_NAME);\n   fprintf (output_file, \"{\\n  int %s;\\n\", INTERNAL_INSN_CODE_NAME);\n@@ -8360,10 +8361,10 @@ output_internal_insn_latency_func (void)\n   decl_t decl;\n   struct bypass_decl *bypass;\n \n-  fprintf (output_file, \"static int\\n%s (int %s ATTRIBUTE_UNUSED,\\n\\tint %s ATTRIBUTE_UNUSED,\\n\\trtx_insn *%s ATTRIBUTE_UNUSED,\\n\\trtx_insn *%s ATTRIBUTE_UNUSED)\\n\",\n+  fprintf (output_file, \"static int\\n%s (int %s ATTRIBUTE_UNUSED,\\n\\tint %s ATTRIBUTE_UNUSED,\\n\\trtx %s ATTRIBUTE_UNUSED,\\n\\trtx %s ATTRIBUTE_UNUSED)\\n\",\n \t   INTERNAL_INSN_LATENCY_FUNC_NAME, INTERNAL_INSN_CODE_NAME,\n-\t   INTERNAL_INSN2_CODE_NAME, INSN_PARAMETER_NAME,\n-\t   INSN2_PARAMETER_NAME);\n+\t   INTERNAL_INSN2_CODE_NAME, \"insn_or_const0\",\n+\t   \"insn2_or_const0\");\n   fprintf (output_file, \"{\\n\");\n \n   if (DECL_INSN_RESERV (advance_cycle_insn_decl)->insn_num == 0)\n@@ -8376,6 +8377,28 @@ output_internal_insn_latency_func (void)\n \t   INTERNAL_INSN_CODE_NAME, ADVANCE_CYCLE_VALUE_NAME,\n \t   INTERNAL_INSN2_CODE_NAME, ADVANCE_CYCLE_VALUE_NAME);\n \n+  /* We've now rejected the case that\n+       INTERNAL_INSN_CODE_NAME >= ADVANCE_CYCLE_VALUE_NAME\n+     i.e. that\n+       insn_code >= DFA__ADVANCE_CYCLE,\n+     and similarly for insn2_code.  */\n+  fprintf (output_file,\n+\t   \"  /* Within output_internal_insn_code_evaluation, the generated\\n\"\n+\t   \"     code sets \\\"code\\\" to NDFA__COLLAPSE for const0_rtx, and\\n\"\n+\t   \"     NDFA__COLLAPSE > DFA__ADVANCE_CYCLE.  Hence we can't be\\n\"\n+\t   \"     dealing with const0_rtx instances at this point.  */\\n\");\n+  if (collapse_flag)\n+    fprintf (output_file,\n+\t     \"  gcc_assert (NDFA__COLLAPSE > DFA__ADVANCE_CYCLE);\\n\");\n+  fprintf (output_file,\n+\t   (\"  gcc_assert (insn_or_const0 != const0_rtx);\\n\"\n+\t    \"  rtx_insn *%s ATTRIBUTE_UNUSED = safe_as_a <rtx_insn *> (insn_or_const0);\\n\"),\n+\t   INSN_PARAMETER_NAME);\n+  fprintf (output_file,\n+\t   (\"  gcc_assert (insn2_or_const0 != const0_rtx);\\n\"\n+\t    \"  rtx_insn *%s ATTRIBUTE_UNUSED = safe_as_a <rtx_insn *> (insn2_or_const0);\\n\"),\n+\t   INSN2_PARAMETER_NAME);\n+\n   fprintf (output_file, \"  switch (%s)\\n    {\\n\", INTERNAL_INSN_CODE_NAME);\n   for (i = 0; i < description->decls_num; i++)\n     if (description->decls[i]->mode == dm_insn_reserv\n@@ -8477,7 +8500,7 @@ output_internal_maximal_insn_latency_func (void)\n static void\n output_insn_latency_func (void)\n {\n-  fprintf (output_file, \"int\\n%s (rtx_insn *%s, rtx_insn *%s)\\n\",\n+  fprintf (output_file, \"int\\n%s (rtx %s, rtx %s)\\n\",\n \t   INSN_LATENCY_FUNC_NAME, INSN_PARAMETER_NAME, INSN2_PARAMETER_NAME);\n   fprintf (output_file, \"{\\n  int %s, %s;\\n\",\n \t   INTERNAL_INSN_CODE_NAME, INTERNAL_INSN2_CODE_NAME);\n@@ -8514,7 +8537,7 @@ output_print_reservation_func (void)\n   int i, j;\n \n   fprintf (output_file,\n-\t   \"void\\n%s (FILE *%s, rtx %s ATTRIBUTE_UNUSED)\\n{\\n\",\n+\t   \"void\\n%s (FILE *%s, rtx_insn *%s ATTRIBUTE_UNUSED)\\n{\\n\",\n            PRINT_RESERVATION_FUNC_NAME, FILE_PARAMETER_NAME,\n            INSN_PARAMETER_NAME);\n \n@@ -8680,7 +8703,7 @@ static void\n output_insn_has_dfa_reservation_p (void)\n {\n   fprintf (output_file,\n-\t   \"bool\\n%s (rtx %s ATTRIBUTE_UNUSED)\\n{\\n\",\n+\t   \"bool\\n%s (rtx_insn *%s ATTRIBUTE_UNUSED)\\n{\\n\",\n            INSN_HAS_DFA_RESERVATION_P_FUNC_NAME,\n            INSN_PARAMETER_NAME);\n "}, {"sha": "ce62dfd804f6895d0c8ae21289cfb942200470dc", "filename": "gcc/hooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -216,7 +216,7 @@ hook_int_rtx_1 (rtx)\n }\n \n int\n-hook_int_rtx_unreachable (rtx)\n+hook_int_rtx_insn_unreachable (rtx_insn *)\n {\n   gcc_unreachable ();\n }"}, {"sha": "76a6551472d247cc67c31717f879f9dc9e63256e", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -81,7 +81,7 @@ extern int hook_int_const_tree_0 (const_tree);\n extern int hook_int_const_tree_const_tree_1 (const_tree, const_tree);\n extern int hook_int_rtx_0 (rtx);\n extern int hook_int_rtx_1 (rtx);\n-extern int hook_int_rtx_unreachable (rtx);\n+extern int hook_int_rtx_insn_unreachable (rtx_insn *);\n extern int hook_int_rtx_bool_0 (rtx, bool);\n extern int hook_int_rtx_mode_as_bool_0 (rtx, enum machine_mode, addr_space_t,\n \t\t\t\t\tbool);"}, {"sha": "62f0532193ee3c162fed5cc9795e82cfc3e498cc", "filename": "gcc/output.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -42,11 +42,11 @@ extern void init_insn_lengths (void);\n \n /* Obtain the current length of an insn.  If branch shortening has been done,\n    get its actual length.  Otherwise, get its maximum length.  */\n-extern int get_attr_length (rtx);\n+extern int get_attr_length (rtx_insn *);\n \n /* Obtain the current length of an insn.  If branch shortening has been done,\n    get its actual length.  Otherwise, get its minimum length.  */\n-extern int get_attr_min_length (rtx);\n+extern int get_attr_min_length (rtx_insn *);\n \n /* Make a pass over all insns and compute their actual lengths by shortening\n    any branches of variable length if possible.  */"}, {"sha": "b1838094cc1bdddcd4b38e9b578c390a2c86ae4e", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -2058,7 +2058,7 @@ mode_dependent_address_p (rtx addr, addr_space_t addrspace)\n    depend on things like the values of operands.  */\n \n alternative_mask\n-get_enabled_alternatives (rtx insn)\n+get_enabled_alternatives (rtx_insn *insn)\n {\n   /* Quick exit for asms and for targets that don't use the \"enabled\"\n      attribute.  */"}, {"sha": "df974a915790d4e4c16cb07e9baeb5f1d403118d", "filename": "gcc/recog.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -402,7 +402,7 @@ extern struct target_recog *this_target_recog;\n #define this_target_recog (&default_target_recog)\n #endif\n \n-alternative_mask get_enabled_alternatives (rtx);\n+alternative_mask get_enabled_alternatives (rtx_insn *);\n \n void recog_init ();\n #endif"}, {"sha": "3f4defd0cf7d59c23e8db4cced8d26455c4aeba0", "filename": "gcc/reorg.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -483,8 +483,8 @@ find_end_label (rtx kind)\n \t  if (HAVE_return)\n \t    {\n \t      /* The return we make may have delay slots too.  */\n-\t      rtx insn = gen_return ();\n-\t      insn = emit_jump_insn (insn);\n+\t      rtx pat = gen_return ();\n+\t      rtx_insn *insn = emit_jump_insn (pat);\n \t      set_return_jump_label (insn);\n \t      emit_barrier ();\n \t      if (num_delay_slots (insn) > 0)\n@@ -1548,12 +1548,12 @@ redundant_insn (rtx insn, rtx_insn *target, rtx delay_list)\n \t     correctly.  */\n \n #ifdef INSN_SETS_ARE_DELAYED\n-\t  if (INSN_SETS_ARE_DELAYED (seq->element (0)))\n+\t  if (INSN_SETS_ARE_DELAYED (seq->insn (0)))\n \t    return 0;\n #endif\n \n #ifdef INSN_REFERENCES_ARE_DELAYED\n-\t  if (INSN_REFERENCES_ARE_DELAYED (seq->element (0)))\n+\t  if (INSN_REFERENCES_ARE_DELAYED (seq->insn (0)))\n \t    return 0;\n #endif\n \n@@ -1641,7 +1641,7 @@ redundant_insn (rtx insn, rtx_insn *target, rtx delay_list)\n       if (rtx_sequence *seq = dyn_cast <rtx_sequence *> (pat))\n \t{\n \t  bool annul_p = false;\n-          rtx control = seq->element (0);\n+          rtx_insn *control = seq->insn (0);\n \n \t  /* If this is a CALL_INSN and its delay slots, it is hard to track\n \t     the resource needs properly, so give up.  */"}, {"sha": "3bc422cc2120467f33b0d0a35bce9f101173bf79", "filename": "gcc/resource.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -386,7 +386,7 @@ mark_referenced_resources (rtx x, struct resources *res,\n \n #ifdef INSN_REFERENCES_ARE_DELAYED\n       if (! include_delayed_effects\n-\t  && INSN_REFERENCES_ARE_DELAYED (x))\n+\t  && INSN_REFERENCES_ARE_DELAYED (as_a <rtx_insn *> (x)))\n \treturn;\n #endif\n \n@@ -690,7 +690,7 @@ mark_set_resources (rtx x, struct resources *res, int in_dest,\n \n #ifdef INSN_SETS_ARE_DELAYED\n       if (mark_type != MARK_SRC_DEST_CALL\n-\t  && INSN_SETS_ARE_DELAYED (x))\n+\t  && INSN_SETS_ARE_DELAYED (as_a <rtx_insn *> (x)))\n \treturn;\n #endif\n "}, {"sha": "e860300094a87a46dedb9a22117382ac8c51996c", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84034c69b386acf96756e2dfe5bd706feed88122/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=84034c69b386acf96756e2dfe5bd706feed88122", "patch": "@@ -4283,7 +4283,7 @@ invoke_aftermath_hooks (fence_t fence, rtx_insn *best_insn, int issue_more)\n \n /* Estimate the cost of issuing INSN on DFA state STATE.  */\n static int\n-estimate_insn_cost (rtx insn, state_t state)\n+estimate_insn_cost (rtx_insn *insn, state_t state)\n {\n   static state_t temp = NULL;\n   int cost;"}]}