{"sha": "4a0ae68e1ce9e7fb876b9846bee6a77d9c592e52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEwYWU2OGUxY2U5ZTdmYjg3NmI5ODQ2YmVlNmE3N2Q5YzU5MmU1Mg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-10-20T14:17:08Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-10-20T14:17:08Z"}, "message": "re PR c/53063 (encode group options in the .opt files)\n\n2012-10-20  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/53063\n\tPR c/40989\nc-family/\n\t* c.opt (Waddress,Wchar-subscripts,Wsign-conversion,Wimplicit,\n\tWimplicit-function-declaration,Wimplicit-int,Wsizeof-pointer-memaccess,\n\tWnarrowing,Wparentheses,Wpointer-sign,Wreturn-type,Wsequence-point,\n\tWsign-compare,Wuninitialized,Wmaybe-uninitialized,Wunused,\n\tWvolatile-register-var): Add LangEnabledBy or EnabledBy.\n\t* c-opts.c (c_common_handle_option): Remove explicit handling from\n\there.\n\t(c_common_post_options): Likewise.\ngcc/\n\t* opts.c (finish_options): Remove explicit handling from here.\n\nFrom-SVN: r192635", "tree": {"sha": "c0cc84d9ea7c7ca3b8febc047eeae70bb2aa18ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0cc84d9ea7c7ca3b8febc047eeae70bb2aa18ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a0ae68e1ce9e7fb876b9846bee6a77d9c592e52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a0ae68e1ce9e7fb876b9846bee6a77d9c592e52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a0ae68e1ce9e7fb876b9846bee6a77d9c592e52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a0ae68e1ce9e7fb876b9846bee6a77d9c592e52/comments", "author": null, "committer": null, "parents": [{"sha": "f6df08e637baa5670a655e9f5736da11ea8627da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6df08e637baa5670a655e9f5736da11ea8627da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6df08e637baa5670a655e9f5736da11ea8627da"}], "stats": {"total": 158, "additions": 63, "deletions": 95}, "files": [{"sha": "ecba9c67c68f231c41c5ccdb9d1604c6765d4cf5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a0ae68e1ce9e7fb876b9846bee6a77d9c592e52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a0ae68e1ce9e7fb876b9846bee6a77d9c592e52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a0ae68e1ce9e7fb876b9846bee6a77d9c592e52", "patch": "@@ -1,3 +1,9 @@\n+2012-10-20  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/53063\n+\tPR c/40989\n+\t* opts.c (finish_options): Remove explicit handling from here.\n+\n 2012-10-20  Joern Rennecke  <joern.rennecke@embecosm.com>\n \t    Richard Sandiford  <rdsandiford@googlemail.com>\n "}, {"sha": "3fb6a30ee7f61dc1aab6073ae8243115c8b69afd", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a0ae68e1ce9e7fb876b9846bee6a77d9c592e52/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a0ae68e1ce9e7fb876b9846bee6a77d9c592e52/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4a0ae68e1ce9e7fb876b9846bee6a77d9c592e52", "patch": "@@ -1,3 +1,16 @@\n+2012-10-20  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/53063\n+\tPR c/40989\n+\t* c.opt (Waddress,Wchar-subscripts,Wsign-conversion,Wimplicit,\n+\tWimplicit-function-declaration,Wimplicit-int,Wsizeof-pointer-memaccess,\n+\tWnarrowing,Wparentheses,Wpointer-sign,Wreturn-type,Wsequence-point,\n+\tWsign-compare,Wuninitialized,Wmaybe-uninitialized,Wunused,\n+\tWvolatile-register-var): Add LangEnabledBy or EnabledBy.\n+\t* c-opts.c (c_common_handle_option): Remove explicit handling from\n+\there.\n+\t(c_common_post_options): Likewise.\n+\n 2012-10-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-ada-spec.c (LOCATION_COL): Delete."}, {"sha": "b1746d0079a3d489249bf1bd575becccc12d0f17", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a0ae68e1ce9e7fb876b9846bee6a77d9c592e52/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a0ae68e1ce9e7fb876b9846bee6a77d9c592e52/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=4a0ae68e1ce9e7fb876b9846bee6a77d9c592e52", "patch": "@@ -361,32 +361,14 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \n     case OPT_Wall:\n       /* ??? Don't add new options here. Use LangEnabledBy in c.opt.  */\n-      handle_generated_option (&global_options, &global_options_set,\n-\t\t\t       OPT_Wunused, NULL, value,\n-\t\t\t       c_family_lang_mask, kind, loc,\n-\t\t\t       handlers, global_dc);\n       set_Wformat (value);\n-      handle_generated_option (&global_options, &global_options_set,\n-\t\t\t       OPT_Wimplicit, NULL, value,\n-\t\t\t       c_family_lang_mask, kind, loc,\n-\t\t\t       handlers, global_dc);\n-      warn_char_subscripts = value;\n-      warn_parentheses = value;\n-      warn_return_type = value;\n-      warn_sequence_point = value;\t/* Was C only.  */\n       warn_switch = value;\n-      warn_sizeof_pointer_memaccess = value;\n-      warn_address = value;\n       warn_array_bounds = value;\n-      warn_volatile_register_var = value;\n \n       /* Only warn about unknown pragmas that are not in system\n \t headers.  */\n       warn_unknown_pragmas = value;\n \n-      warn_uninitialized = value;\n-      warn_maybe_uninitialized = value;\n-\n       if (!c_dialect_cxx ())\n \t{\n \t  /* We set this to 2 here, but 1 in -Wmain, so -ffreestanding\n@@ -400,19 +382,10 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n           if (warn_enum_compare == -1)\n             warn_enum_compare = value;\n \t}\n-      else\n-\t{\n-\t  /* C++-specific warnings.  */\n-          warn_sign_compare = value;\n-\t  warn_narrowing = value;\n-\t}\n \n       cpp_opts->warn_trigraphs = value;\n       cpp_opts->warn_comments = value;\n       cpp_opts->warn_num_sign_change = value;\n-\n-      if (warn_pointer_sign == -1)\n-\twarn_pointer_sign = value;\n       break;\n \n     case OPT_Wbuiltin_macro_redefined:\n@@ -431,10 +404,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       cpp_opts->warn_cxx_operator_names = value;\n       break;\n \n-    case OPT_Wc__0x_compat:\n-      warn_narrowing = value;\n-      break;\n-\n     case OPT_Wdeprecated:\n       cpp_opts->cpp_warn_deprecated = value;\n       break;\n@@ -451,20 +420,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       set_Wformat (atoi (arg));\n       break;\n \n-    case OPT_Wimplicit:\n-      gcc_assert (value == 0 || value == 1);\n-      if (warn_implicit_int == -1)\n-\thandle_generated_option (&global_options, &global_options_set,\n-\t\t\t\t OPT_Wimplicit_int, NULL, value,\n-\t\t\t\t c_family_lang_mask, kind, loc, handlers,\n-\t\t\t\t global_dc);\n-      if (warn_implicit_function_declaration == -1)\n-\thandle_generated_option (&global_options, &global_options_set,\n-\t\t\t\t OPT_Wimplicit_function_declaration, NULL,\n-\t\t\t\t value, c_family_lang_mask, kind, loc,\n-\t\t\t\t handlers, global_dc);\n-      break;\n-\n     case OPT_Winvalid_pch:\n       cpp_opts->warn_invalid_pch = value;\n       break;\n@@ -734,8 +689,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n     case OPT_Wpedantic:\n       cpp_opts->cpp_pedantic = 1;\n       cpp_opts->warn_endif_labels = 1;\n-      if (warn_pointer_sign == -1)\n-\twarn_pointer_sign = 1;\n       if (warn_overlength_strings == -1)\n \twarn_overlength_strings = 1;\n       if (warn_main == -1)\n@@ -924,18 +877,6 @@ c_common_post_options (const char **pfilename)\n   if (flag_objc_exceptions && !flag_objc_sjlj_exceptions)\n     flag_exceptions = 1;\n \n-  /* -Wextra implies the following flags\n-     unless explicitly overridden.  */\n-\n-  /* Wsign-compare is also enabled by -Wall in C++. */\n-  if (warn_sign_compare == -1)\n-    warn_sign_compare = extra_warnings;\n-\n-  /* -Wpointer-sign is disabled by default, but it is enabled if any\n-     of -Wall or -Wpedantic are given.  */\n-  if (warn_pointer_sign == -1)\n-    warn_pointer_sign = 0;\n-\n   /* -Woverlength-strings is off by default, but is enabled by -Wpedantic.\n      It is never enabled in C++, as the minimum limit is not normative\n      in that standard.  */\n@@ -951,12 +892,6 @@ c_common_post_options (const char **pfilename)\n   else if (warn_main == 2)\n     warn_main = flag_hosted ? 1 : 0;\n \n-  /* In C, -Wconversion enables -Wsign-conversion (unless disabled\n-     through -Wno-sign-conversion). While in C++,\n-     -Wsign-conversion needs to be requested explicitly.  */\n-  if (warn_sign_conversion == -1)\n-    warn_sign_conversion =  (c_dialect_cxx ()) ? 0 : warn_conversion;\n-\n   /* In C, -Wall and -Wc++-compat enable -Wenum-compare, which we do\n      in c_common_handle_option; if it has not yet been set, it is\n      disabled by default.  In C++, it is enabled by default.  */\n@@ -987,12 +922,6 @@ c_common_post_options (const char **pfilename)\n \t       \"-Wformat-security ignored without -Wformat\");\n     }\n \n-  if (warn_implicit == -1)\n-    warn_implicit = 0;\n-      \n-  if (warn_implicit_int == -1)\n-    warn_implicit_int = 0;\n-\n   /* -Wimplicit-function-declaration is enabled by default for C99.  */\n   if (warn_implicit_function_declaration == -1)\n     warn_implicit_function_declaration = flag_isoc99;"}, {"sha": "d2a97ab1019e133f2a7dc0741b5ae10762dff79b", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 44, "deletions": 20, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a0ae68e1ce9e7fb876b9846bee6a77d9c592e52/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a0ae68e1ce9e7fb876b9846bee6a77d9c592e52/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=4a0ae68e1ce9e7fb876b9846bee6a77d9c592e52", "patch": "@@ -261,7 +261,7 @@ Wpsabi\n C ObjC C++ ObjC++ LTO Var(warn_psabi) Init(1) Undocumented\n \n Waddress\n-C ObjC C++ ObjC++ Var(warn_address) Warning\n+C ObjC C++ ObjC++ Var(warn_address) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about suspicious uses of memory addresses\n \n Wall\n@@ -297,7 +297,7 @@ C ObjC C++ ObjC++ Var(warn_cast_qual) Warning\n Warn about casts which discard qualifiers\n \n Wchar-subscripts\n-C ObjC C++ ObjC++ Var(warn_char_subscripts) Warning\n+C ObjC C++ ObjC++ Var(warn_char_subscripts) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about subscripts whose type is \\\"char\\\"\n \n Wclobbered\n@@ -320,10 +320,6 @@ Wconversion-null\n C++ ObjC++ Var(warn_conversion_null) Init(1) Warning\n Warn for converting NULL from/to a non-pointer type\n \n-Wsign-conversion\n-C ObjC C++ ObjC++ Var(warn_sign_conversion) Init(-1)\n-Warn for implicit type conversions between signed and unsigned integers\n-\n Wctor-dtor-privacy\n C++ ObjC++ Var(warn_ctor_dtor_privacy) Warning\n Warn when all constructors and destructors are private\n@@ -412,19 +408,19 @@ C ObjC C++ ObjC++ Var(warn_init_self) Warning LangEnabledBy(C++ ObjC++,Wall)\n Warn about variables which are initialized to themselves\n \n Wimplicit\n-C ObjC Var(warn_implicit) Init(-1) Warning\n+C ObjC Var(warn_implicit) Warning LangEnabledBy(C ObjC,Wall)\n Warn about implicit declarations\n \n Wdouble-promotion\n C ObjC C++ ObjC++ Var(warn_double_promotion) Warning\n Warn about implicit conversions from \\\"float\\\" to \\\"double\\\"\n \n Wimplicit-function-declaration\n-C ObjC Var(warn_implicit_function_declaration) Init(-1) Warning\n+C ObjC Var(warn_implicit_function_declaration) Init(-1) Warning LangEnabledBy(C ObjC,Wimplicit)\n Warn about implicit function declarations\n \n Wimplicit-int\n-C ObjC Var(warn_implicit_int) Init(-1) Warning\n+C ObjC Var(warn_implicit_int) Warning LangEnabledBy(C ObjC,Wimplicit)\n Warn when a declaration does not specify a type\n \n Wimport\n@@ -475,7 +471,7 @@ C ObjC C++ ObjC++ Var(warn_missing_field_initializers) Warning EnabledBy(Wextra)\n Warn about missing fields in struct initializers\n \n Wsizeof-pointer-memaccess\n-C ObjC C++ ObjC++ Var(warn_sizeof_pointer_memaccess) Warning\n+C ObjC C++ ObjC++ Var(warn_sizeof_pointer_memaccess) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n \n Wsuggest-attribute=format\n C ObjC C++ ObjC++ Var(warn_suggest_attribute_format) Warning\n@@ -506,9 +502,13 @@ C ObjC C++ ObjC++ Warning\n Warn about use of multi-character character constants\n \n Wnarrowing\n-C ObjC C++ ObjC++ Warning Var(warn_narrowing) Init(-1)\n+C ObjC C++ ObjC++ Warning Var(warn_narrowing) Init(-1) LangEnabledBy(C++ ObjC++,Wall)\n Warn about narrowing conversions within { } that are ill-formed in C++11\n \n+Wnarrowing\n+C ObjC C++ ObjC++ LangEnabledBy(C++ ObjC++,Wc++0x-compat)\n+;\n+\n Wnested-externs\n C ObjC Var(warn_nested_externs) Warning\n Warn about \\\"extern\\\" declarations not at file scope\n@@ -562,7 +562,7 @@ C ObjC C++ ObjC++ Var(warn_packed_bitfield_compat) Init(-1) Warning\n Warn about packed bit-fields whose offset changed in GCC 4.4\n \n Wparentheses\n-C ObjC C++ ObjC++ Var(warn_parentheses) Warning\n+C ObjC C++ ObjC++ Var(warn_parentheses) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about possibly missing parentheses\n \n Wpedantic\n@@ -577,6 +577,14 @@ Wpointer-arith\n C ObjC C++ ObjC++ Var(warn_pointer_arith) Warning\n Warn about function pointer arithmetic\n \n+Wpointer-sign\n+C ObjC Var(warn_pointer_sign) Warning LangEnabledBy(C ObjC,Wall)\n+Warn when a pointer differs in signedness in an assignment\n+\n+Wpointer-sign\n+C ObjC LangEnabledBy(C ObjC,Wpedantic)\n+;\n+\n Wpointer-to-int-cast\n C ObjC Var(warn_pointer_to_int_cast) Init(1) Warning\n Warn when a pointer is cast to an integer of a different size\n@@ -602,21 +610,29 @@ C++ ObjC++ Var(warn_reorder) Warning LangEnabledBy(C++ ObjC++,Wall)\n Warn when the compiler reorders code\n \n Wreturn-type\n-C ObjC C++ ObjC++ Var(warn_return_type) Warning\n+C ObjC C++ ObjC++ Var(warn_return_type) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn whenever a function's return type defaults to \\\"int\\\" (C), or about inconsistent return types (C++)\n \n Wselector\n ObjC ObjC++ Var(warn_selector) Warning\n Warn if a selector has multiple methods\n \n Wsequence-point\n-C ObjC C++ ObjC++ Var(warn_sequence_point) Warning\n+C ObjC C++ ObjC++ Var(warn_sequence_point) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about possible violations of sequence point rules\n \n Wsign-compare\n-C ObjC C++ ObjC++ Var(warn_sign_compare) Init(-1) Warning\n+C ObjC C++ ObjC++ Var(warn_sign_compare) Warning LangEnabledBy(C++ ObjC++,Wall)\n Warn about signed-unsigned comparisons\n \n+Wsign-compare\n+C ObjC C++ ObjC++ EnabledBy(Wextra)\n+;\n+\n+Wsign-conversion\n+C ObjC C++ ObjC++ Var(warn_sign_conversion) LangEnabledBy(C ObjC,Wconversion)\n+Warn for implicit type conversions between signed and unsigned integers\n+\n Wsign-promo\n C++ ObjC++ Var(warn_sign_promo) Warning\n Warn when overload promotes from unsigned to signed\n@@ -673,6 +689,14 @@ Wundef\n C ObjC C++ ObjC++ Warning\n Warn if an undefined macro is used in an #if directive\n \n+Wuninitialized\n+C ObjC C++ ObjC++ LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+;\n+\n+Wmaybe-uninitialized\n+C ObjC C++ ObjC++ LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+;\n+\n Wunknown-pragmas\n C ObjC C++ ObjC++ Warning\n Warn about unrecognized pragmas\n@@ -681,6 +705,10 @@ Wunsuffixed-float-constants\n C ObjC Var(warn_unsuffixed_float_constants) Warning\n Warn about unsuffixed float constants\n \n+Wunused\n+C ObjC C++ ObjC++ LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+; documented in common.opt\n+\n Wunused-local-typedefs\n C ObjC C++ ObjC++ Var(warn_unused_local_typedefs) Warning EnabledBy(Wunused)\n Warn when typedefs locally defined in a function are not used\n@@ -706,17 +734,13 @@ C ObjC C++ ObjC++ Var(warn_vla) Init(-1) Warning\n Warn if a variable length array is used\n \n Wvolatile-register-var\n-C ObjC C++ ObjC++ Var(warn_volatile_register_var) Warning\n+C ObjC C++ ObjC++ Var(warn_volatile_register_var) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn when a register variable is declared volatile\n \n Wwrite-strings\n C ObjC C++ ObjC++ Var(warn_write_strings) Warning\n In C++, nonzero means warn about deprecated conversion from string literals to 'char *'.  In C, similar warning, except that the conversion is of course not deprecated by the ISO C standard.\n \n-Wpointer-sign\n-C ObjC Var(warn_pointer_sign) Init(-1) Warning\n-Warn when a pointer differs in signedness in an assignment\n-\n Wzero-as-null-pointer-constant\n C++ ObjC++ Var(warn_zero_as_null_pointer_constant) Warning\n Warn when a literal '0' is used as null pointer"}, {"sha": "a1cf2d5bae6068fdabc8a3f339568b661f13d19f", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a0ae68e1ce9e7fb876b9846bee6a77d9c592e52/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a0ae68e1ce9e7fb876b9846bee6a77d9c592e52/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=4a0ae68e1ce9e7fb876b9846bee6a77d9c592e52", "patch": "@@ -829,10 +829,6 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n     maybe_set_param_value (PARAM_MAX_STORES_TO_SINK, 0,\n                            opts->x_param_values, opts_set->x_param_values);\n \n-  /* This replaces set_Wunused.  */\n-  /* Wunused-local-typedefs is enabled by -Wunused or -Wall.  */\n-  if (opts->x_warn_unused_local_typedefs == -1)\n-    opts->x_warn_unused_local_typedefs = opts->x_warn_unused;\n }\n \n #define LEFT_COLUMN\t27"}]}