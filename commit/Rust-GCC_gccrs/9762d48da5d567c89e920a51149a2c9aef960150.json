{"sha": "9762d48da5d567c89e920a51149a2c9aef960150", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc2MmQ0OGRhNWQ1NjdjODllOTIwYTUxMTQ5YTJjOWFlZjk2MDE1MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-12-03T20:04:31Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-12-03T20:04:31Z"}, "message": "except.c (expand_fixup_region_end): New fn.\n\n\t* except.c (expand_fixup_region_end): New fn.\n\t(expand_fixup_region_start): Likewise.\n\t(expand_eh_region_start_tree): Store cleanup into finalization here.\n\t* stmt.c (expand_cleanups): Use them to protect fixups.\n\nFrom-SVN: r16929", "tree": {"sha": "2a7cbc8dffb4904b9ccaed9c7d077f4874fcddcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a7cbc8dffb4904b9ccaed9c7d077f4874fcddcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9762d48da5d567c89e920a51149a2c9aef960150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9762d48da5d567c89e920a51149a2c9aef960150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9762d48da5d567c89e920a51149a2c9aef960150", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9762d48da5d567c89e920a51149a2c9aef960150/comments", "author": null, "committer": null, "parents": [{"sha": "aa36c0813a2f8c213bb5b041ce67e7032b078c5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa36c0813a2f8c213bb5b041ce67e7032b078c5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa36c0813a2f8c213bb5b041ce67e7032b078c5a"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "2af7dc14aa70a2e3233c2235188dcc6aade52b03", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9762d48da5d567c89e920a51149a2c9aef960150/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9762d48da5d567c89e920a51149a2c9aef960150/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9762d48da5d567c89e920a51149a2c9aef960150", "patch": "@@ -1,3 +1,10 @@\n+Wed Dec  3 12:01:56 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* except.c (expand_fixup_region_end): New fn.\n+\t(expand_fixup_region_start): Likewise.\n+\t(expand_eh_region_start_tree): Store cleanup into finalization here.\n+\t* stmt.c (expand_cleanups): Use them to protect fixups.\n+\n Wed Dec  3 11:41:13 1997  Gavin Koch  <gavin@cygnus.com>\n \n \t* mips/mips.md (muldi3_r4000): Broaden the output template"}, {"sha": "a493375c8ab35b564a81120a5581d732757029d3", "filename": "gcc/except.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9762d48da5d567c89e920a51149a2c9aef960150/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9762d48da5d567c89e920a51149a2c9aef960150/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=9762d48da5d567c89e920a51149a2c9aef960150", "patch": "@@ -1013,6 +1013,7 @@ expand_eh_region_start_tree (decl, cleanup)\n     }\n \n   expand_eh_region_start_for_decl (decl);\n+  ehstack.top->entry->finalization = cleanup;\n \n   return 0;\n }\n@@ -1138,6 +1139,57 @@ expand_eh_region_end (handler)\n     }\n }\n \n+/* End the EH region for a goto fixup.  We only need them in the region-based\n+   EH scheme.  */\n+\n+void\n+expand_fixup_region_start ()\n+{\n+  if (! doing_eh (0) || exceptions_via_longjmp)\n+    return;\n+\n+  expand_eh_region_start ();\n+}\n+\n+/* End the EH region for a goto fixup.  CLEANUP is the cleanup we just\n+   expanded; to avoid running it twice if it throws, we look through the\n+   ehqueue for a matching region and rethrow from its outer_context.  */\n+\n+void\n+expand_fixup_region_end (cleanup)\n+     tree cleanup;\n+{\n+  tree t;\n+  struct eh_node *node;\n+  int yes;\n+\n+  if (! doing_eh (0) || exceptions_via_longjmp)\n+    return;\n+\n+  for (node = ehstack.top; node && node->entry->finalization != cleanup; )\n+    node = node->chain;\n+  if (node == 0)\n+    for (node = ehqueue.head; node && node->entry->finalization != cleanup; )\n+      node = node->chain;\n+  if (node == 0)\n+    abort ();\n+\n+  yes = suspend_momentary ();\n+\n+  t = build (RTL_EXPR, void_type_node, NULL_RTX, const0_rtx);\n+  TREE_SIDE_EFFECTS (t) = 1;\n+  do_pending_stack_adjust ();\n+  start_sequence_for_rtl_expr (t);\n+  expand_internal_throw (node->entry->outer_context);\n+  do_pending_stack_adjust ();\n+  RTL_EXPR_SEQUENCE (t) = get_insns ();\n+  end_sequence ();\n+\n+  resume_momentary (yes);\n+\n+  expand_eh_region_end (t);\n+}\n+\n /* If we are using the setjmp/longjmp EH codegen method, we emit a\n    call to __sjthrow.\n "}, {"sha": "ee9139ce7916931b4a7ea8d248db5ee4fc1cbf57", "filename": "gcc/stmt.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9762d48da5d567c89e920a51149a2c9aef960150/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9762d48da5d567c89e920a51149a2c9aef960150/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=9762d48da5d567c89e920a51149a2c9aef960150", "patch": "@@ -4229,7 +4229,14 @@ expand_cleanups (list, dont_do, in_fixup, reachable)\n \t\t   the target.  Though the cleanups are expanded multiple\n \t\t   times, the control paths are non-overlapping so the\n \t\t   cleanups will not be executed twice.  */\n+\n+\t\t/* We may need to protect fixups with rethrow regions.  */\n+\t\tint protect = (in_fixup && ! TREE_ADDRESSABLE (tail));\n+\t\tif (protect)\n+\t\t  expand_fixup_region_start ();\n \t\texpand_expr (TREE_VALUE (tail), const0_rtx, VOIDmode, 0);\n+\t\tif (protect)\n+\t\t  expand_fixup_region_end (TREE_VALUE (tail));\n \t\tfree_temp_slots ();\n \t      }\n \t  }"}]}