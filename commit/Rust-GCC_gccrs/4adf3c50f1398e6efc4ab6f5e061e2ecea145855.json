{"sha": "4adf3c50f1398e6efc4ab6f5e061e2ecea145855", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFkZjNjNTBmMTM5OGU2ZWZjNGFiNmY1ZTA2MWUyZWNlYTE0NTg1NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-19T10:30:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-19T10:30:18Z"}, "message": "[multiple changes]\n\n2010-10-19  Javier Miranda  <miranda@adacore.com>\n\n\t* par-ch4.adb: Update documentation of Ada 2012 syntax rules for\n\tmembership test.\n\n2010-10-19  Bob Duff  <duff@adacore.com>\n\n\t* sem_attr.adb (Eval_Attribute): Implement Max_Alignment_For_Allocation\n\tattribute.\n\t* exp_attr.adb (Expand_N_Attribute_Reference): Add\n\tAttribute_Max_Alignment_For_Allocation to the case statement.\n\t* snames.ads-tmpl (Name_Max_Alignment_For_Allocation,\n\tAttribute_Max_Alignment_For_Allocation): New attribute name.\n\n2010-10-19  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (OK_For_Limited_Init_In_05): a call to an access to\n\tparameterless function appears syntactically as an explicit dereference.\n\n2010-10-19  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch8.adb, sem_ch12.adb, opt.ads, sem_ch6.adb, sem_res.adb,\n\ti-cexten.ads, exp_disp.adb, exp_ch4.adb, exp_ch9.adb: Minor reformatting\n\n2010-10-19  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_util.adb (Collect_Primitive_Operations): A function with an\n\tanonymous access result designating T is a primitive operation of T.\n\nFrom-SVN: r165692", "tree": {"sha": "68fe3d1d6a7c9c7ad653e6ddc50449d6d8b5092f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68fe3d1d6a7c9c7ad653e6ddc50449d6d8b5092f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4adf3c50f1398e6efc4ab6f5e061e2ecea145855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4adf3c50f1398e6efc4ab6f5e061e2ecea145855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4adf3c50f1398e6efc4ab6f5e061e2ecea145855", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/comments", "author": null, "committer": null, "parents": [{"sha": "e2f289f3c75abb5716f15cd7d3e0d78b0439f952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2f289f3c75abb5716f15cd7d3e0d78b0439f952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2f289f3c75abb5716f15cd7d3e0d78b0439f952"}], "stats": {"total": 232, "additions": 151, "deletions": 81}, "files": [{"sha": "b431a34a7fcd69326c595244020bfd43a7b8a52e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4adf3c50f1398e6efc4ab6f5e061e2ecea145855", "patch": "@@ -1,3 +1,32 @@\n+2010-10-19  Javier Miranda  <miranda@adacore.com>\n+\n+\t* par-ch4.adb: Update documentation of Ada 2012 syntax rules for\n+\tmembership test.\n+\n+2010-10-19  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_attr.adb (Eval_Attribute): Implement Max_Alignment_For_Allocation\n+\tattribute.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Add\n+\tAttribute_Max_Alignment_For_Allocation to the case statement.\n+\t* snames.ads-tmpl (Name_Max_Alignment_For_Allocation,\n+\tAttribute_Max_Alignment_For_Allocation): New attribute name.\n+\n+2010-10-19  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (OK_For_Limited_Init_In_05): a call to an access to\n+\tparameterless function appears syntactically as an explicit dereference.\n+\n+2010-10-19  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch8.adb, sem_ch12.adb, opt.ads, sem_ch6.adb, sem_res.adb,\n+\ti-cexten.ads, exp_disp.adb, exp_ch4.adb, exp_ch9.adb: Minor reformatting\n+\n+2010-10-19  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_util.adb (Collect_Primitive_Operations): A function with an\n+\tanonymous access result designating T is a primitive operation of T.\n+\n 2010-10-19  Tristan Gingold  <gingold@adacore.com>\n \n \t* init.c: On Alpha/VMS, only adjust PC for HPARITH."}, {"sha": "8d23fa3f26060b82d1845a2978c38b8a579a06a8", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=4adf3c50f1398e6efc4ab6f5e061e2ecea145855", "patch": "@@ -5310,8 +5310,8 @@ package body Exp_Attr is\n       --  that the result is in range.\n \n       when Attribute_Aft                          |\n-           Attribute_Max_Size_In_Storage_Elements\n-      =>\n+           Attribute_Max_Alignment_For_Allocation |\n+           Attribute_Max_Size_In_Storage_Elements =>\n          Apply_Universal_Integer_Attribute_Checks (N);\n \n       --  The following attributes should not appear at this stage, since they"}, {"sha": "d5743736cd193739d6e686014e4d58de247fc054", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=4adf3c50f1398e6efc4ab6f5e061e2ecea145855", "patch": "@@ -363,11 +363,11 @@ package Opt is\n    --  GNAT\n    --  Used to record the storage pool name (or null literal) that is the\n    --  argument of an applicable pragma Default_Storage_Pool.\n-   --    Empty: No pragma Default_Storage_Pool applies.\n+   --    Empty:       No pragma Default_Storage_Pool applies.\n    --    N_Null node: \"pragma Default_Storage_Pool (null);\" applies.\n-   --    otherwise: \"pragma Default_Storage_Pool (X);\" applies, and\n-   --    this points to the name X.\n-   --  Push_Scope and Pop_Scope in Sem_Ch8 save and restore this.\n+   --    otherwise:   \"pragma Default_Storage_Pool (X);\" applies, and\n+   --                 this points to the name X.\n+   --  Push_Scope and Pop_Scope in Sem_Ch8 save and restore this value.\n \n    Detect_Blocking : Boolean := False;\n    --  GNAT"}, {"sha": "5069fd155637197171ae4d5077364d3ee6159588", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=4adf3c50f1398e6efc4ab6f5e061e2ecea145855", "patch": "@@ -1739,8 +1739,7 @@ package body Ch4 is\n \n    --  RELATION ::=\n    --    SIMPLE_EXPRESSION [RELATIONAL_OPERATOR SIMPLE_EXPRESSION]\n-   --  | SIMPLE_EXPRESSION [not] in RANGE\n-   --  | SIMPLE_EXPRESSION [not] in SUBTYPE_MARK\n+   --  | SIMPLE_EXPRESSION [not] in MEMBERSHIP_CHOICE_LIST\n \n    --  On return, Expr_Form indicates the categorization of the expression\n \n@@ -2882,6 +2881,9 @@ package body Ch4 is\n    -- P_Membership_Test --\n    -----------------------\n \n+   --  MEMBERSHIP_CHOICE_LIST ::= MEMBERHIP_CHOICE {'|' MEMBERSHIP_CHOICE}\n+   --  MEMBERSHIP_CHOICE      ::= CHOICE_EXPRESSION | range | subtype_mark\n+\n    procedure P_Membership_Test (N : Node_Id) is\n       Alt : constant Node_Id :=\n               P_Range_Or_Subtype_Mark"}, {"sha": "264ea6964422a30e06a2fd75b358588d088d3625", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=4adf3c50f1398e6efc4ab6f5e061e2ecea145855", "patch": "@@ -3420,10 +3420,12 @@ package body Sem_Attr is\n          Set_Etype (N, P_Base_Type);\n \n       ----------------------------------\n+      -- Max_Alignment_For_Allocation --\n       -- Max_Size_In_Storage_Elements --\n       ----------------------------------\n \n-      when Attribute_Max_Size_In_Storage_Elements =>\n+      when Attribute_Max_Alignment_For_Allocation |\n+        Attribute_Max_Size_In_Storage_Elements =>\n          Check_E0;\n          Check_Type;\n          Check_Not_Incomplete_Type;\n@@ -5589,7 +5591,9 @@ package body Sem_Attr is\n                or else\n              Id = Attribute_Type_Class\n                or else\n-             Id = Attribute_Unconstrained_Array)\n+             Id = Attribute_Unconstrained_Array\n+               or else\n+             Id = Attribute_Max_Alignment_For_Allocation)\n         and then not Is_Generic_Type (P_Entity)\n       then\n          P_Type := P_Entity;\n@@ -5714,7 +5718,7 @@ package body Sem_Attr is\n       then\n          Static := False;\n \n-      else\n+      elsif Id /= Attribute_Max_Alignment_For_Allocation then\n          if not Is_Constrained (P_Type)\n            or else (Id /= Attribute_First and then\n                     Id /= Attribute_Last  and then\n@@ -6623,6 +6627,29 @@ package body Sem_Attr is\n          end if;\n       end Max;\n \n+      ----------------------------------\n+      -- Max_Alignment_For_Allocation --\n+      ----------------------------------\n+\n+      --  Max_Alignment_For_Allocation is usually the Alignment. However,\n+      --  arrays are allocated with dope, so we need to take into account both\n+      --  the alignment of the array, which comes from the component alignment,\n+      --  and the alignment of the dope. Also, if the alignment is unknown, we\n+      --  use the max (it's OK to be pessimistic).\n+\n+      when Attribute_Max_Alignment_For_Allocation =>\n+         declare\n+            A : Uint := UI_From_Int (Ttypes.Maximum_Alignment);\n+         begin\n+            if Known_Alignment (P_Type) and then\n+              (not Is_Array_Type (P_Type) or else Alignment (P_Type) > A)\n+            then\n+               A := Alignment (P_Type);\n+            end if;\n+\n+            Fold_Uint (N, A, Static);\n+         end;\n+\n       ----------------------------------\n       -- Max_Size_In_Storage_Elements --\n       ----------------------------------\n@@ -7641,7 +7668,7 @@ package body Sem_Attr is\n          end if;\n       end Width;\n \n-      --  The following attributes denote function that cannot be folded\n+      --  The following attributes denote functions that cannot be folded\n \n       when Attribute_From_Any |\n            Attribute_To_Any   |"}, {"sha": "e8c1741f672240f3007400d8bafce0c875fc2733", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=4adf3c50f1398e6efc4ab6f5e061e2ecea145855", "patch": "@@ -5320,7 +5320,7 @@ package body Sem_Ch12 is\n             then\n                declare\n                   Renamed_Package : constant Node_Id :=\n-                    Name (Parent (Entity (Gen_Id)));\n+                                      Name (Parent (Entity (Gen_Id)));\n                begin\n                   if Nkind (Renamed_Package) = N_Expanded_Name then\n                      Inst_Par := Entity (Prefix (Renamed_Package));"}, {"sha": "1325b912c63caf60f9cdbad117c5d5d2657fd475", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=4adf3c50f1398e6efc4ab6f5e061e2ecea145855", "patch": "@@ -16016,8 +16016,10 @@ package body Sem_Ch3 is\n \n       --  Ada 2005 (AI-287, AI-318): Relax the strictness of the front end in\n       --  case of limited aggregates (including extension aggregates), and\n-      --  function calls. The function call may have been give in prefixed\n+      --  function calls. The function call may have been given in prefixed\n       --  notation, in which case the original node is an indexed component.\n+      --  If the function is parameterless, the original node was an explicit\n+      --  dereference.\n \n       case Nkind (Original_Node (Exp)) is\n          when N_Aggregate | N_Extension_Aggregate | N_Function_Call | N_Op =>\n@@ -16042,7 +16044,8 @@ package body Sem_Ch3 is\n                 OK_For_Limited_Init_In_05\n                   (Typ, Expression (Original_Node (Exp)));\n \n-         when N_Indexed_Component | N_Selected_Component  =>\n+         when N_Indexed_Component | N_Selected_Component |\n+               N_Explicit_Dereference  =>\n             return Nkind (Exp) = N_Function_Call;\n \n          --  A use of 'Input is a function call, hence allowed. Normally the"}, {"sha": "7dc72f3b245a4ccb5942638eb187e0f76451e251", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=4adf3c50f1398e6efc4ab6f5e061e2ecea145855", "patch": "@@ -5472,7 +5472,6 @@ package body Sem_Ch6 is\n             end if;\n \n             Desig_1 := Find_Designated_Type (Type_1);\n-\n             Desig_2 := Find_Designated_Type (Type_2);\n \n             --  If the context is an instance association for a formal\n@@ -5493,7 +5492,8 @@ package body Sem_Ch6 is\n             --  of an incomplete Class_Wide_Type are illegal.\n \n             if Is_Class_Wide_Type (Desig_1)\n-              and then Is_Class_Wide_Type (Desig_2)\n+                 and then\n+               Is_Class_Wide_Type (Desig_2)\n             then\n                return\n                  Conforming_Types\n@@ -7518,13 +7518,13 @@ package body Sem_Ch6 is\n             In_Scope := True;\n \n          --  The enclosing scope is not a synchronized type and the subprogram\n-         --  has no formals\n+         --  has no formals.\n \n          elsif No (First_Formal (Def_Id)) then\n             return;\n \n          --  The subprogram has formals and hence it may be a primitive of a\n-         --  concurrent type\n+         --  concurrent type.\n \n          else\n             Typ := Etype (First_Formal (Def_Id));\n@@ -7573,7 +7573,7 @@ package body Sem_Ch6 is\n             Subp      : Entity_Id := Empty;\n \n          begin\n-            --  Traverse the homonym chain, looking at a potentially\n+            --  Traverse the homonym chain, looking for a potentially\n             --  overridden subprogram that belongs to an implemented\n             --  interface.\n \n@@ -7591,7 +7591,7 @@ package body Sem_Ch6 is\n                   null;\n \n                --  Entries and procedures can override abstract or null\n-               --  interface procedures\n+               --  interface procedures.\n \n                elsif (Ekind (Def_Id) = E_Procedure\n                         or else Ekind (Def_Id) = E_Entry)\n@@ -7652,23 +7652,20 @@ package body Sem_Ch6 is\n                Hom := Homonym (Hom);\n             end loop;\n \n-            --  After examining all candidates for overriding, we are\n-            --  left with the best match which is a mode incompatible\n-            --  interface routine. Do not emit an error if the Expander\n-            --  is active since this error will be detected later on\n-            --  after all concurrent types are expanded and all wrappers\n-            --  are built. This check is meant for spec-only\n-            --  compilations.\n+            --  After examining all candidates for overriding, we are left with\n+            --  the best match which is a mode incompatible interface routine.\n+            --  Do not emit an error if the Expander is active since this error\n+            --  will be detected later on after all concurrent types are\n+            --  expanded and all wrappers are built. This check is meant for\n+            --  spec-only compilations.\n \n-            if Present (Candidate)\n-              and then not Expander_Active\n-            then\n+            if Present (Candidate) and then not Expander_Active then\n                Iface_Typ :=\n                  Find_Parameter_Type (Parent (First_Formal (Candidate)));\n \n-               --  Def_Id is primitive of a protected type, declared\n-               --  inside the type, and the candidate is primitive of a\n-               --  limited or synchronized interface.\n+               --  Def_Id is primitive of a protected type, declared inside the\n+               --  type, and the candidate is primitive of a limited or\n+               --  synchronized interface.\n \n                if In_Scope\n                  and then Is_Protected_Type (Typ)\n@@ -7678,15 +7675,12 @@ package body Sem_Ch6 is\n                       or else Is_Synchronized_Interface (Iface_Typ)\n                       or else Is_Task_Interface (Iface_Typ))\n                then\n-                  --  Must reword this message, comma before to in -gnatj\n-                  --  mode ???\n-\n                   Error_Msg_NE\n                     (\"first formal of & must be of mode `OUT`, `IN OUT`\"\n                       & \" or access-to-variable\", Typ, Candidate);\n                   Error_Msg_N\n-                    (\"\\to be overridden by protected procedure or entry \"\n-                      & \"(RM 9.4(11.9/2))\", Typ);\n+                    (\"\\in order to be overridden by protected procedure or \"\n+                      & \"entry (RM 9.4(11.9/2))\", Typ);\n                end if;\n             end if;\n \n@@ -7775,7 +7769,7 @@ package body Sem_Ch6 is\n          --  Inside_Freeze_Actions is non zero when S corresponds with an\n          --  internal entity that links an interface primitive with its\n          --  covering primitive through attribute Interface_Alias (see\n-         --  Add_Internal_Interface_Entities)\n+         --  Add_Internal_Interface_Entities).\n \n          if Inside_Freezing_Actions = 0\n            and then Is_Package_Or_Generic_Package (Current_Scope)\n@@ -7846,9 +7840,7 @@ package body Sem_Ch6 is\n          --  dispatch table anyway, because it can be dispatched to even if it\n          --  cannot be called directly.\n \n-         elsif Present (Alias (S))\n-           and then not Comes_From_Source (S)\n-         then\n+         elsif Present (Alias (S)) and then not Comes_From_Source (S) then\n             Set_Scope (S, Current_Scope);\n \n             if Is_Dispatching_Operation (Alias (S)) then"}, {"sha": "10b76643314388c3907dd2c09c24330d62a9507d", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=4adf3c50f1398e6efc4ab6f5e061e2ecea145855", "patch": "@@ -6651,7 +6651,7 @@ package body Sem_Ch8 is\n       then\n          declare\n             Aux : constant Node_Id :=\n-              Aux_Decls_Node (Parent (Unit_Declaration_Node (S)));\n+                    Aux_Decls_Node (Parent (Unit_Declaration_Node (S)));\n          begin\n             if No (Default_Storage_Pool (Aux)) then\n                Set_Default_Storage_Pool (Aux, Default_Pool);\n@@ -6802,7 +6802,7 @@ package body Sem_Ch8 is\n       then\n          declare\n             Aux : constant Node_Id :=\n-              Aux_Decls_Node (Parent (Unit_Declaration_Node (E)));\n+                    Aux_Decls_Node (Parent (Unit_Declaration_Node (E)));\n          begin\n             if Present (Default_Storage_Pool (Aux)) then\n                Default_Pool := Default_Storage_Pool (Aux);"}, {"sha": "da8f638893faaf3d892b19886a0216c65b17c540", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=4adf3c50f1398e6efc4ab6f5e061e2ecea145855", "patch": "@@ -8880,7 +8880,7 @@ package body Sem_Res is\n             Orig_T := Etype (Parent (N));\n          end if;\n \n-         --  if we have an entity name, then give the warning if the entity\n+         --  If we have an entity name, then give the warning if the entity\n          --  is the right type, or if it is a loop parameter covered by the\n          --  original type (that's needed because loop parameters have an\n          --  odd subtype coming from the bounds).\n@@ -8908,12 +8908,13 @@ package body Sem_Res is\n                null;\n \n             --  Finally, if this type conversion occurs in a context that\n-            --  requires a prefix, and the expression is a qualified\n-            --  expression, then the type conversion is not redundant,\n-            --  because a qualified expression is not a prefix, whereas a\n-            --  type conversion is. For example, \"X := T'(Funx(...)).Y;\" is\n-            --  illegal. because a selected component requires a prefix, but\n-            --  a type conversion makes it legal: \"X := T(T'(Funx(...))).Y;\"\n+            --  requires a prefix, and the expression is a qualified expression\n+            --  then the type conversion is not redundant, because a qualified\n+            --  expression is not a prefix, whereas a type conversion is. For\n+            --  example, \"X := T'(Funx(...)).Y;\" is illegal because a selected\n+            --  component requires a prefix, but a type conversion makes it\n+            --  legal: \"X := T(T'(Funx(...))).Y;\"\n+\n             --  In Ada 2012, a qualified expression is a name, so this idiom is\n             --  no longer needed, but we still suppress the warning because it\n             --  seems unfriendly for warnings to pop up when you switch to the\n@@ -9515,9 +9516,9 @@ package body Sem_Res is\n             --  be used when generating attributes of the string, for example\n             --  in the context of a slice assignment.\n \n-            Set_Etype        (Index_Subtype, Base_Type (Index_Type));\n-            Set_Size_Info    (Index_Subtype, Index_Type);\n-            Set_RM_Size      (Index_Subtype, RM_Size (Index_Type));\n+            Set_Etype     (Index_Subtype, Base_Type (Index_Type));\n+            Set_Size_Info (Index_Subtype, Index_Type);\n+            Set_RM_Size   (Index_Subtype, RM_Size (Index_Type));\n \n             Array_Subtype := Create_Itype (E_Array_Subtype, N);\n \n@@ -9568,7 +9569,7 @@ package body Sem_Res is\n \n             --     ityp (x)\n \n-            --  with the Float_Truncate flag set, which is more efficient\n+            --  with the Float_Truncate flag set, which is more efficient.\n \n             then\n                Rewrite (Operand,\n@@ -9696,8 +9697,8 @@ package body Sem_Res is\n       --  Specifically test for validity of tagged conversions\n \n       function Valid_Array_Conversion return Boolean;\n-      --  Check index and component conformance, and accessibility levels\n-      --  if the component types are anonymous access types (Ada 2005)\n+      --  Check index and component conformance, and accessibility levels if\n+      --  the component types are anonymous access types (Ada 2005).\n \n       ----------------------\n       -- Conversion_Check --\n@@ -9931,10 +9932,9 @@ package body Sem_Res is\n             --  is no context type and the removal of the spurious operations\n             --  must be done explicitly here.\n \n-            --  The node may be labelled overloaded, but still contain only\n-            --  one interpretation because others were discarded in previous\n-            --  filters. If this is the case, retain the single interpretation\n-            --  if legal.\n+            --  The node may be labelled overloaded, but still contain only one\n+            --  interpretation because others were discarded earlier. If this\n+            --  is the case, retain the single interpretation if legal.\n \n             Get_First_Interp (Operand, I, It);\n             Opnd_Type := It.Typ;\n@@ -10049,8 +10049,7 @@ package body Sem_Res is\n            or else Opnd_Type = Any_Composite\n            or else Opnd_Type = Any_String\n          then\n-            Error_Msg_N\n-              (\"illegal operand for array conversion\", Operand);\n+            Error_Msg_N (\"illegal operand for array conversion\", Operand);\n             return False;\n          else\n             return Valid_Array_Conversion;\n@@ -10342,11 +10341,11 @@ package body Sem_Res is\n          end Check_Limited;\n \n       --  Access to subprogram types. If the operand is an access parameter,\n-      --  the type has a deeper accessibility that any master, and cannot\n-      --  be assigned. We must make an exception if the conversion is part\n-      --  of an assignment and the target is the return object of an extended\n-      --  return statement, because in that case the accessibility check\n-      --  takes place after the return.\n+      --  the type has a deeper accessibility that any master, and cannot be\n+      --  assigned. We must make an exception if the conversion is part of an\n+      --  assignment and the target is the return object of an extended return\n+      --  statement, because in that case the accessibility check takes place\n+      --  after the return.\n \n       elsif Is_Access_Subprogram_Type (Target_Type)\n         and then No (Corresponding_Remote_Type (Opnd_Type))\n@@ -10434,7 +10433,8 @@ package body Sem_Res is\n       --  If both are tagged types, check legality of view conversions\n \n       elsif Is_Tagged_Type (Target_Type)\n-        and then Is_Tagged_Type (Opnd_Type)\n+              and then\n+            Is_Tagged_Type (Opnd_Type)\n       then\n          return Valid_Tagged_Conversion (Target_Type, Opnd_Type);\n \n@@ -10443,8 +10443,8 @@ package body Sem_Res is\n       elsif Root_Type (Target_Type) = Root_Type (Opnd_Type) then\n          return True;\n \n-      --  In an instance or an inlined body, there may be inconsistent\n-      --  views of the same type, or of types derived from a common root.\n+      --  In an instance or an inlined body, there may be inconsistent views of\n+      --  the same type, or of types derived from a common root.\n \n       elsif (In_Instance or In_Inlined_Body)\n         and then"}, {"sha": "53726d4421780459aee035fecb659bf5a4718d91", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=4adf3c50f1398e6efc4ab6f5e061e2ecea145855", "patch": "@@ -1693,6 +1693,27 @@ package body Sem_Util is\n       Formal_Derived : Boolean := False;\n       Id             : Entity_Id;\n \n+      function Match (E : Entity_Id) return Boolean;\n+      --  True if E's base type is B_Type, or E is of an anonymous access type\n+      --  and the base type of its designated type is B_Type.\n+\n+      -----------\n+      -- Match --\n+      -----------\n+\n+      function Match (E : Entity_Id) return Boolean is\n+         Etyp : Entity_Id := Etype (E);\n+\n+      begin\n+         if Ekind (Etyp) = E_Anonymous_Access_Type then\n+            Etyp := Designated_Type (Etyp);\n+         end if;\n+\n+         return Base_Type (Etyp) = B_Type;\n+      end Match;\n+\n+   --  Start of processing for Collect_Primitive_Operations\n+\n    begin\n       --  For tagged types, the primitive operations are collected as they\n       --  are declared, and held in an explicit list which is simply returned.\n@@ -1761,19 +1782,13 @@ package body Sem_Util is\n             then\n                Is_Prim := False;\n \n-               if Base_Type (Etype (Id)) = B_Type then\n+               if Match (Id) then\n                   Is_Prim := True;\n+\n                else\n                   Formal := First_Formal (Id);\n                   while Present (Formal) loop\n-                     if Base_Type (Etype (Formal)) = B_Type then\n-                        Is_Prim := True;\n-                        exit;\n-\n-                     elsif Ekind (Etype (Formal)) = E_Anonymous_Access_Type\n-                       and then Base_Type\n-                         (Designated_Type (Etype (Formal))) = B_Type\n-                     then\n+                     if Match (Formal) then\n                         Is_Prim := True;\n                         exit;\n                      end if;"}, {"sha": "0223c1e747cb27fdbf21e4b5b526f4a7d48d0f9a", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adf3c50f1398e6efc4ab6f5e061e2ecea145855/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=4adf3c50f1398e6efc4ab6f5e061e2ecea145855", "patch": "@@ -764,6 +764,7 @@ package Snames is\n    Name_Machine_Rounds                 : constant Name_Id := N + $;\n    Name_Machine_Size                   : constant Name_Id := N + $; -- GNAT\n    Name_Mantissa                       : constant Name_Id := N + $; -- Ada 83\n+   Name_Max_Alignment_For_Allocation   : constant Name_Id := N + $; -- Ada 12\n    Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + $;\n    Name_Maximum_Alignment              : constant Name_Id := N + $; -- GNAT\n    Name_Mechanism_Code                 : constant Name_Id := N + $; -- GNAT\n@@ -1282,6 +1283,7 @@ package Snames is\n       Attribute_Machine_Rounds,\n       Attribute_Machine_Size,\n       Attribute_Mantissa,\n+      Attribute_Max_Alignment_For_Allocation,\n       Attribute_Max_Size_In_Storage_Elements,\n       Attribute_Maximum_Alignment,\n       Attribute_Mechanism_Code,"}]}