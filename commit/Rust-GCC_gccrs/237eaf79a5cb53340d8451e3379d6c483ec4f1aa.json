{"sha": "237eaf79a5cb53340d8451e3379d6c483ec4f1aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM3ZWFmNzlhNWNiNTMzNDBkODQ1MWUzMzc5ZDZjNDgzZWM0ZjFhYQ==", "commit": {"author": {"name": "Dorit Naishlos", "email": "dorit@il.ibm.com", "date": "2005-02-20T20:32:41Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2005-02-20T20:32:41Z"}, "message": "re PR tree-optimization/19951 (ICE in tree_split_edge, at tree-cfg.c:3199 with -ftree-vectorize)\n\n        PR tree-optimization/19951\n        * g++.dg/vect: New directory.\n        * g++.dg/vect/vect.exp: New file.\n        * g++.dg/vect/pr19951.cc: New testcase.\n        * g++.dg/dg.exp: Also prune vectorizer tests.\n\nFrom-SVN: r95309", "tree": {"sha": "6afc7e05c074393a103861ad33c742c981d84043", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6afc7e05c074393a103861ad33c742c981d84043"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/237eaf79a5cb53340d8451e3379d6c483ec4f1aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/237eaf79a5cb53340d8451e3379d6c483ec4f1aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/237eaf79a5cb53340d8451e3379d6c483ec4f1aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/237eaf79a5cb53340d8451e3379d6c483ec4f1aa/comments", "author": null, "committer": null, "parents": [{"sha": "50c177f74466e46e2048d30c18856f9e6f9a4d2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50c177f74466e46e2048d30c18856f9e6f9a4d2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50c177f74466e46e2048d30c18856f9e6f9a4d2e"}], "stats": {"total": 121, "additions": 121, "deletions": 0}, "files": [{"sha": "68594ec18b4f26fa474a4ebd6731290307c4e1ca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/237eaf79a5cb53340d8451e3379d6c483ec4f1aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/237eaf79a5cb53340d8451e3379d6c483ec4f1aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=237eaf79a5cb53340d8451e3379d6c483ec4f1aa", "patch": "@@ -1,3 +1,11 @@\n+2005-02-20  Dorit Naishlos  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/19951\n+\t* g++.dg/vect: New directory.\n+\t* g++.dg/vect/vect.exp: New file.\n+\t* g++.dg/vect/pr19951.cc: New testcase.\n+\t* g++.dg/dg.exp: Also prune vectorizer tests.\n+\n 2005-02-20  Zack Weinberg  <zack@codesourcery.com>\n \n \tPR 18785"}, {"sha": "f4ec94c6ee1c8680512f989b91e5ae88590c73cf", "filename": "gcc/testsuite/g++.dg/dg.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/237eaf79a5cb53340d8451e3379d6c483ec4f1aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/237eaf79a5cb53340d8451e3379d6c483ec4f1aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp?ref=237eaf79a5cb53340d8451e3379d6c483ec4f1aa", "patch": "@@ -39,6 +39,7 @@ set tests [prune $tests $srcdir/$subdir/gcov/*]\n set tests [prune $tests $srcdir/$subdir/pch/*]\n set tests [prune $tests $srcdir/$subdir/special/*]\n set tests [prune $tests $srcdir/$subdir/tls/*]\n+set tests [prune $tests $srcdir/$subdir/vect/*]\n \n # Main loop.\n dg-runtest $tests \"\" $DEFAULT_CXXFLAGS"}, {"sha": "bb6586c0629a9ee67c364f03011b6848dce5cfd0", "filename": "gcc/testsuite/g++.dg/vect/pr19951.cc", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/237eaf79a5cb53340d8451e3379d6c483ec4f1aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr19951.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/237eaf79a5cb53340d8451e3379d6c483ec4f1aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr19951.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr19951.cc?ref=237eaf79a5cb53340d8451e3379d6c483ec4f1aa", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+struct A\n+{\n+    ~A();\n+};\n+\n+void foo();\n+\n+void bar()\n+{\n+    A a;\n+\n+    foo();\n+    for (;;)\n+        foo();\n+}"}, {"sha": "cc2e4e303649a278652ad4081688166be1281d54", "filename": "gcc/testsuite/g++.dg/vect/vect.exp", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/237eaf79a5cb53340d8451e3379d6c483ec4f1aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/237eaf79a5cb53340d8451e3379d6c483ec4f1aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp?ref=237eaf79a5cb53340d8451e3379d6c483ec4f1aa", "patch": "@@ -0,0 +1,95 @@\n+#   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+\n+# GCC testsuite that uses the 'dg.exp' driver.\n+\n+# There's a bunch of headers we need.\n+if [is_remote host] {\n+    foreach header [glob -nocomplain $srcdir/$subdir/*.{h,def} ] {\n+        remote_download host $header\n+    }\n+}\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+load_lib target-supports.exp\n+\n+# If the target system supports vector instructions, the default action\n+# for a test is 'run', otherwise it's 'compile'.  Save current default.\n+# Executing vector instructions on a system without hardware vector support\n+# is also disabled by a call to check_vect, but disabling execution here is\n+# more efficient.\n+global dg-do-what-default\n+set save-dg-do-what-default ${dg-do-what-default}\n+\n+# Set up flags used for tests that don't specify options.\n+set DEFAULT_VECTCFLAGS \"\"\n+\n+# These flags are used for all targets.\n+lappend DEFAULT_VECTCFLAGS \"-O2\" \"-ftree-vectorize\" \\\n+  \"-ftree-vectorizer-verbose=3\" \"-fdump-tree-vect-stats\"\n+\n+# Skip these tests for targets that do not support generating vector\n+# code.  Set additional target-dependent vector flags, which can be\n+# overridden by using dg-options in individual tests.\n+if [istarget \"powerpc*-*-*\"] {\n+    # If there are powerpc targets to skip, do it here.\n+\n+    lappend DEFAULT_VECTCFLAGS \"-maltivec\"\n+    if [check_vmx_hw_available] {\n+        set dg-do-what-default run\n+    } else {\n+        if [is-effective-target ilp32] {\n+            # Specify a cpu that supports VMX for compile-only tests.\n+            lappend DEFAULT_VECTCFLAGS \"-mcpu=7400\"\n+        }\n+        set dg-do-what-default compile\n+    }\n+} elseif { [istarget \"i?86-*-*\"] || [istarget \"x86_64-*-*\"] } {\n+    lappend DEFAULT_VECTCFLAGS \"-msse2\"\n+    set dg-do-what-default run\n+} elseif [istarget \"mipsisa64*-*-*\"] {\n+    lappend DEFAULT_VECTCFLAGS \"-mpaired-single\"\n+    set dg-do-what-default run\n+} elseif [istarget \"sparc*-*-*\"] {\n+    lappend DEFAULT_VECTCFLAGS \"-mcpu=ultrasparc\" \"-mvis\"\n+    set dg-do-what-default run\n+} elseif [istarget \"alpha*-*-*\"] {\n+    lappend DEFAULT_VECTCFLAGS \"-mmax\"\n+    if [check_alpha_max_hw_available] {\n+        set dg-do-what-default run\n+    } else {\n+        set dg-do-what-default compile\n+    }\n+} elseif [istarget \"ia64-*-*\"] {\n+    set dg-do-what-default run\n+} else {\n+    return\n+}\n+\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.{c,cc,S} ]] \\\n+        \"\" $DEFAULT_VECTCFLAGS\n+\n+# Clean up.\n+set dg-do-what-default ${save-dg-do-what-default} \n+\n+# All done.\n+dg-finish"}]}