{"sha": "f0eddb90199eac4df644329c8cd0089b110062f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBlZGRiOTAxOTllYWM0ZGY2NDQzMjljOGNkMDA4OWIxMTAwNjJmMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-03-16T11:36:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-03-16T11:36:30Z"}, "message": "gimple-fold.c (maybe_fold_reference): Open-code relevant constant folding.\n\n2011-03-16  Richard Guenther  <rguenther@suse.de>\n\n\t* gimple-fold.c (maybe_fold_reference): Open-code relevant\n\tconstant folding.  Move MEM_REF canonicalization first.\n\tRely on fold_const_aggregate_ref for initializer folding.\n\t* tree-ssa-ccp.c (ccp_fold): Handle constant vector extracts.\n\n\t* gcc.dg/tree-ssa/pr14814.c: Adjust.\n\t* gcc.dg/tree-ssa/ssa-ccp-19.c: Likewise.\n\nFrom-SVN: r171043", "tree": {"sha": "8f1870e0ed7b128c09f885498dd35f51103bff22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f1870e0ed7b128c09f885498dd35f51103bff22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0eddb90199eac4df644329c8cd0089b110062f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0eddb90199eac4df644329c8cd0089b110062f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0eddb90199eac4df644329c8cd0089b110062f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0eddb90199eac4df644329c8cd0089b110062f1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "29f10e717837d30e181b25f9a691c7457be120a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f10e717837d30e181b25f9a691c7457be120a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f10e717837d30e181b25f9a691c7457be120a5"}], "stats": {"total": 114, "additions": 66, "deletions": 48}, "files": [{"sha": "f42547c88fbb59eb16c75b63de026d3b942e820c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0eddb90199eac4df644329c8cd0089b110062f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0eddb90199eac4df644329c8cd0089b110062f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0eddb90199eac4df644329c8cd0089b110062f1", "patch": "@@ -1,3 +1,10 @@\n+2011-03-16  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimple-fold.c (maybe_fold_reference): Open-code relevant\n+\tconstant folding.  Move MEM_REF canonicalization first.\n+\tRely on fold_const_aggregate_ref for initializer folding.\n+\t* tree-ssa-ccp.c (ccp_fold): Handle constant vector extracts.\n+\n 2011-03-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/48136"}, {"sha": "158cb05802d629b419673ab3a2133c36fa4e04a8", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 41, "deletions": 46, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0eddb90199eac4df644329c8cd0089b110062f1/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0eddb90199eac4df644329c8cd0089b110062f1/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=f0eddb90199eac4df644329c8cd0089b110062f1", "patch": "@@ -560,23 +560,50 @@ maybe_fold_reference (tree expr, bool is_lhs)\n   tree *t = &expr;\n   tree result;\n \n-  if (!is_lhs\n-      && (result = fold_const_aggregate_ref (expr))\n-      && is_gimple_min_invariant (result))\n-    return result;\n+  if ((TREE_CODE (expr) == VIEW_CONVERT_EXPR\n+       || TREE_CODE (expr) == REALPART_EXPR\n+       || TREE_CODE (expr) == IMAGPART_EXPR)\n+      && CONSTANT_CLASS_P (TREE_OPERAND (expr, 0)))\n+    return fold_unary_loc (EXPR_LOCATION (expr),\n+\t\t\t   TREE_CODE (expr),\n+\t\t\t   TREE_TYPE (expr),\n+\t\t\t   TREE_OPERAND (expr, 0));\n+  else if (TREE_CODE (expr) == BIT_FIELD_REF\n+\t   && CONSTANT_CLASS_P (TREE_OPERAND (expr, 0)))\n+    return fold_ternary_loc (EXPR_LOCATION (expr),\n+\t\t\t     TREE_CODE (expr),\n+\t\t\t     TREE_TYPE (expr),\n+\t\t\t     TREE_OPERAND (expr, 0),\n+\t\t\t     TREE_OPERAND (expr, 1),\n+\t\t\t     TREE_OPERAND (expr, 2));\n+\n+  while (handled_component_p (*t))\n+    t = &TREE_OPERAND (*t, 0);\n \n-  /* ???  We might want to open-code the relevant remaining cases\n-     to avoid using the generic fold.  */\n-  if (handled_component_p (*t)\n-      && CONSTANT_CLASS_P (TREE_OPERAND (*t, 0)))\n+  /* Canonicalize MEM_REFs invariant address operand.  Do this first\n+     to avoid feeding non-canonical MEM_REFs elsewhere.  */\n+  if (TREE_CODE (*t) == MEM_REF\n+      && !is_gimple_mem_ref_addr (TREE_OPERAND (*t, 0)))\n     {\n-      tree tem = fold (*t);\n-      if (tem != *t)\n-\treturn tem;\n+      bool volatile_p = TREE_THIS_VOLATILE (*t);\n+      tree tem = fold_binary (MEM_REF, TREE_TYPE (*t),\n+\t\t\t      TREE_OPERAND (*t, 0),\n+\t\t\t      TREE_OPERAND (*t, 1));\n+      if (tem)\n+\t{\n+\t  TREE_THIS_VOLATILE (tem) = volatile_p;\n+\t  *t = tem;\n+\t  tem = maybe_fold_reference (expr, is_lhs);\n+\t  if (tem)\n+\t    return tem;\n+\t  return expr;\n+\t}\n     }\n \n-  while (handled_component_p (*t))\n-    t = &TREE_OPERAND (*t, 0);\n+  if (!is_lhs\n+      && (result = fold_const_aggregate_ref (expr))\n+      && is_gimple_min_invariant (result))\n+    return result;\n \n   /* Fold back MEM_REFs to reference trees.  */\n   if (TREE_CODE (*t) == MEM_REF\n@@ -593,7 +620,7 @@ maybe_fold_reference (tree expr, bool is_lhs)\n \t compatibility.  */\n       && types_compatible_p (TREE_TYPE (*t),\n \t\t\t     TREE_TYPE (TREE_OPERAND\n-\t\t\t\t\t  (TREE_OPERAND (*t, 0), 0))))\n+\t\t\t\t\t(TREE_OPERAND (*t, 0), 0))))\n     {\n       tree tem;\n       *t = TREE_OPERAND (TREE_OPERAND (*t, 0), 0);\n@@ -602,24 +629,6 @@ maybe_fold_reference (tree expr, bool is_lhs)\n \treturn tem;\n       return expr;\n     }\n-  /* Canonicalize MEM_REFs invariant address operand.  */\n-  else if (TREE_CODE (*t) == MEM_REF\n-\t   && !is_gimple_mem_ref_addr (TREE_OPERAND (*t, 0)))\n-    {\n-      bool volatile_p = TREE_THIS_VOLATILE (*t);\n-      tree tem = fold_binary (MEM_REF, TREE_TYPE (*t),\n-\t\t\t      TREE_OPERAND (*t, 0),\n-\t\t\t      TREE_OPERAND (*t, 1));\n-      if (tem)\n-\t{\n-\t  TREE_THIS_VOLATILE (tem) = volatile_p;\n-\t  *t = tem;\n-\t  tem = maybe_fold_reference (expr, is_lhs);\n-\t  if (tem)\n-\t    return tem;\n-\t  return expr;\n-\t}\n-    }\n   else if (TREE_CODE (*t) == TARGET_MEM_REF)\n     {\n       tree tem = maybe_fold_tmr (*t);\n@@ -632,20 +641,6 @@ maybe_fold_reference (tree expr, bool is_lhs)\n \t  return expr;\n \t}\n     }\n-  else if (!is_lhs\n-\t   && DECL_P (*t))\n-    {\n-      tree tem = get_symbol_constant_value (*t);\n-      if (tem\n-\t  && useless_type_conversion_p (TREE_TYPE (*t), TREE_TYPE (tem)))\n-\t{\n-\t  *t = unshare_expr (tem);\n-\t  tem = maybe_fold_reference (expr, is_lhs);\n-\t  if (tem)\n-\t    return tem;\n-\t  return expr;\n-\t}\n-    }\n \n   return NULL_TREE;\n }"}, {"sha": "b3d5f8193fd95f6dd0279ca077816793976cfc22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0eddb90199eac4df644329c8cd0089b110062f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0eddb90199eac4df644329c8cd0089b110062f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f0eddb90199eac4df644329c8cd0089b110062f1", "patch": "@@ -1,3 +1,8 @@\n+2011-03-16  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/pr14814.c: Adjust.\n+\t* gcc.dg/tree-ssa/ssa-ccp-19.c: Likewise.\n+\n 2011-03-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/48136"}, {"sha": "20608156f3c657a93633d4e2ab6546172742ba21", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr14814.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0eddb90199eac4df644329c8cd0089b110062f1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14814.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0eddb90199eac4df644329c8cd0089b110062f1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14814.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14814.c?ref=f0eddb90199eac4df644329c8cd0089b110062f1", "patch": "@@ -18,5 +18,5 @@ int foo(const struct XX* r) {\n   return 1;\n }\n \n-/* { dg-final { scan-tree-dump-times \"&\" 0 \"forwprop2\" } } */\n+/* { dg-final { scan-tree-dump-times \"= &\" 0 \"forwprop2\" } } */\n /* { dg-final { cleanup-tree-dump \"forwprop2\" } } */"}, {"sha": "c67373f017e615933da93bd09595fc2fd29583e9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ccp-19.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0eddb90199eac4df644329c8cd0089b110062f1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0eddb90199eac4df644329c8cd0089b110062f1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-19.c?ref=f0eddb90199eac4df644329c8cd0089b110062f1", "patch": "@@ -12,5 +12,5 @@ int g()\n   return *i;  /* This should be turned into a.i */\n }\n \n-/* { dg-final { scan-tree-dump \"= a.i;\" \"ccp1\" } } */\n+/* { dg-final { scan-tree-dump \"= MEM\\\\\\[\\\\\\(int \\\\\\*\\\\\\)&a\\\\\\];\" \"ccp1\" } } */\n /* { dg-final { cleanup-tree-dump \"ccp1\" } } */"}, {"sha": "4fc4316bb1c57509cf13ed78d0df7c4e76afe366", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0eddb90199eac4df644329c8cd0089b110062f1/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0eddb90199eac4df644329c8cd0089b110062f1/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=f0eddb90199eac4df644329c8cd0089b110062f1", "patch": "@@ -1182,6 +1182,17 @@ ccp_fold (gimple stmt)\n \t\t\t\t\t       TREE_CODE (rhs),\n \t\t\t\t\t       TREE_TYPE (rhs), val);\n \t\t    }\n+\t\t  else if (TREE_CODE (rhs) == BIT_FIELD_REF\n+\t\t\t   && TREE_CODE (TREE_OPERAND (rhs, 0)) == SSA_NAME)\n+\t\t    {\n+\t\t      tree val = get_constant_value (TREE_OPERAND (rhs, 0));\n+\t\t      if (val)\n+\t\t\treturn fold_ternary_loc (EXPR_LOCATION (rhs),\n+\t\t\t\t\t\t TREE_CODE (rhs),\n+\t\t\t\t\t\t TREE_TYPE (rhs), val,\n+\t\t\t\t\t\t TREE_OPERAND (rhs, 1),\n+\t\t\t\t\t\t TREE_OPERAND (rhs, 2));\n+\t\t    }\n \t\t  else if (TREE_CODE (rhs) == MEM_REF\n \t\t\t   && TREE_CODE (TREE_OPERAND (rhs, 0)) == SSA_NAME)\n \t\t    {"}]}