{"sha": "ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM5MTljZmNlZjhkN2ZjYmFhYjI0ZDBlMGQ0NzJjNjVlNTMyOWNhNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-30T15:38:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-30T15:38:21Z"}, "message": "Fix vextract* masked patterns [PR93069]\n\nThe AVX512F documentation clearly states that in instructions where the\ndestination is a memory only merging-masking is possible, not zero-masking,\nand the assembler enforces that.\n\nThe testcase in this patch fails to assemble because of\nError: unsupported masking for `vextracti32x8'\non\n        vextracti32x8   $0x0, %zmm1, -64(%rsp){%k1}{z}\nFor the vector extraction patterns, we apparently have 7 *_maskm patterns\nthat only accept memory destinations and rtx_equal_p merge-masking source\nfor it, 7 *<mask_name> corresponding patterns that allow memory destination\nonly for the non-masked cases (through <store_mask_constraint>), then 2\n*<mask_name> patterns (lo ssehalf V16FI and lo ssehalf VI8F_256 ones) which\ndo allow memory destination even for masked cases and are the cause of the\ntestsuite failure, because we must not allow C constraint if the destination\nis m, and finally one pair of patterns (separate * and *_mask, hi ssehalf\nVI4F_256), which has another issue (for which I don't have a testcase\nthough), where if it would match zero-masking with register destination,\nit wouldn't emit the needed {z} into assembly.\nThe attached patch fixes those 3 issues only, perhaps more suitable for\nbackporting.\n\n2020-03-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/93069\n\t* config/i386/sse.md (vec_extract_lo_<mode><mask_name>): Use\n\t<store_mask_constraint> instead of m in output operand constraint.\n\t(vec_extract_hi_<mode><mask_name>): Use <mask_operand2> instead of\n\t%{%3%}.\n\n\t* gcc.target/i386/avx512vl-pr93069.c: New test.\n\t* gcc.dg/vect/pr93069.c: New test.", "tree": {"sha": "68304cc7f8bb7f18c3c02cd56f4874df02bb60ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68304cc7f8bb7f18c3c02cd56f4874df02bb60ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07c48b61a082128b69cc9a4a7ae1d05e2b2a2ebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c48b61a082128b69cc9a4a7ae1d05e2b2a2ebb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07c48b61a082128b69cc9a4a7ae1d05e2b2a2ebb"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "c9867651c950458c0b7b002faf601755f9131cb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6", "patch": "@@ -1,3 +1,11 @@\n+2020-03-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/93069\n+\t* config/i386/sse.md (vec_extract_lo_<mode><mask_name>): Use\n+\t<store_mask_constraint> instead of m in output operand constraint.\n+\t(vec_extract_hi_<mode><mask_name>): Use <mask_operand2> instead of\n+\t%{%3%}.\n+\n 2020-03-30  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_call_aix): Emit cookie to pattern."}, {"sha": "3221542a8cb5f3d452cf7f7404fb2ca4bec6d1de", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6", "patch": "@@ -8693,7 +8693,8 @@\n })\n \n (define_insn \"vec_extract_lo_<mode><mask_name>\"\n-  [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=v,v,m\")\n+  [(set (match_operand:<ssehalfvecmode> 0 \"<store_mask_predicate>\"\n+\t\t\t\t\t  \"=v,v,<store_mask_constraint>\")\n \t(vec_select:<ssehalfvecmode>\n \t  (match_operand:V16FI 1 \"<store_mask_predicate>\"\n \t\t\t\t \"v,<store_mask_constraint>,v\")\n@@ -8750,7 +8751,8 @@\n })\n \n (define_insn \"vec_extract_lo_<mode><mask_name>\"\n-  [(set (match_operand:<ssehalfvecmode> 0 \"<store_mask_predicate>\" \"=v,v,m\")\n+  [(set (match_operand:<ssehalfvecmode> 0 \"<store_mask_predicate>\"\n+\t\t\t\t\t  \"=v,v,<store_mask_constraint>\")\n \t(vec_select:<ssehalfvecmode>\n \t  (match_operand:VI8F_256 1 \"<store_mask_predicate>\"\n \t\t\t\t    \"v,<store_mask_constraint>,v\")\n@@ -8760,7 +8762,7 @@\n    && (<mask_applied> || !(MEM_P (operands[0]) && MEM_P (operands[1])))\"\n {\n   if (<mask_applied>)\n-    return \"vextract<shuffletype>64x2\\t{$0x0, %1, %0%{%3%}|%0%{%3%}, %1, 0x0}\";\n+    return \"vextract<shuffletype>64x2\\t{$0x0, %1, %0<mask_operand2>|%0<mask_operand2>, %1, 0x0}\";\n   else\n     return \"#\";\n }"}, {"sha": "b07ba6d87d2640c491205b24679013852fcf0e89", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6", "patch": "@@ -1,3 +1,9 @@\n+2020-03-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/93069\n+\t* gcc.target/i386/avx512vl-pr93069.c: New test.\n+\t* gcc.dg/vect/pr93069.c: New test.\n+\n 2020-03-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* lib/gdc-utils.exp: (gdc-convert-args): Handle compilation test"}, {"sha": "45c740dbe9e7bc0c6c626f7b5f870e81738f2b0b", "filename": "gcc/testsuite/gcc.dg/vect/pr93069.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr93069.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr93069.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr93069.c?ref=ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6", "patch": "@@ -0,0 +1,10 @@\n+/* PR target/93069 */\n+/* { dg-do assemble { target vect_simd_clones } } */\n+/* { dg-options \"-O2 -fopenmp-simd\" } */\n+\n+#pragma omp declare simd\n+int\n+foo (int x, int y)\n+{\n+  return x == 0 ? x : y;\n+}"}, {"sha": "b38b5ad32bbc3ed08bd8ae512c7e1820c4b3f89a", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr93069.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr93069.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr93069.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr93069.c?ref=ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6", "patch": "@@ -0,0 +1,12 @@\n+/* PR target/93069 */\n+/* { dg-do assemble { target vect_simd_clones } } */\n+/* { dg-options \"-O2 -fopenmp-simd -mtune=skylake-avx512\" } */\n+/* { dg-additional-options \"-mavx512vl\" { target avx512vl } } */\n+/* { dg-additional-options \"-mavx512dq\" { target avx512dq } } */\n+\n+#pragma omp declare simd\n+int\n+foo (int x, int y)\n+{\n+  return x == 0 ? x : y;\n+}"}]}