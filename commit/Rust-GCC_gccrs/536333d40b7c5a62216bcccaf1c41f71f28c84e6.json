{"sha": "536333d40b7c5a62216bcccaf1c41f71f28c84e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM2MzMzZDQwYjdjNWE2MjIxNmJjY2NhZjFjNDFmNzFmMjhjODRlNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-11-22T17:50:33Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-11-22T17:50:33Z"}, "message": "decl.c (poplevel): Remove code to handle KEEP == 2.\n\n\t* decl.c (poplevel): Remove code to handle KEEP == 2.\n\t(finish_function): Don't confuse BLOCK-order when\n\tprocessing a destructor.\n\nFrom-SVN: r23755", "tree": {"sha": "1cc39d308e45d70f85d0739fca97d3f92d0d1e40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cc39d308e45d70f85d0739fca97d3f92d0d1e40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/536333d40b7c5a62216bcccaf1c41f71f28c84e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/536333d40b7c5a62216bcccaf1c41f71f28c84e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/536333d40b7c5a62216bcccaf1c41f71f28c84e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/536333d40b7c5a62216bcccaf1c41f71f28c84e6/comments", "author": null, "committer": null, "parents": [{"sha": "ff0236af5a568d756186f42f595147ce674f48d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff0236af5a568d756186f42f595147ce674f48d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff0236af5a568d756186f42f595147ce674f48d5"}], "stats": {"total": 60, "additions": 45, "deletions": 15}, "files": [{"sha": "15b37aaba8f33169312405273d5467ed4d7a31e4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/536333d40b7c5a62216bcccaf1c41f71f28c84e6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/536333d40b7c5a62216bcccaf1c41f71f28c84e6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=536333d40b7c5a62216bcccaf1c41f71f28c84e6", "patch": "@@ -1,3 +1,9 @@\n+1998-11-22  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* decl.c (poplevel): Remove code to handle KEEP == 2.\n+\t(finish_function): Don't confuse BLOCK-order when\n+\tprocessing a destructor.\n+\n 1998-11-21  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (require_complete_types_for_parms): Call layout_decl"}, {"sha": "d50c5eaa39367958003e6889b01e5cc6a82f1b0a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/536333d40b7c5a62216bcccaf1c41f71f28c84e6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/536333d40b7c5a62216bcccaf1c41f71f28c84e6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=536333d40b7c5a62216bcccaf1c41f71f28c84e6", "patch": "@@ -1043,12 +1043,6 @@ pushlevel_temporary (tag_transparent)\n    and create a \"block\" (a BLOCK node) for the level\n    to record its declarations and subblocks for symbol table output.\n \n-   If KEEP == 2, this level's subblocks go to the front,\n-   not the back of the current binding level.  This happens,\n-   for instance, when code for constructors and destructors\n-   need to generate code at the end of a function which must\n-   be moved up to the front of the function.\n-\n    If FUNCTIONBODY is nonzero, this level is the body of a function,\n    so create a block as if KEEP were set and also clear out all\n    label names.\n@@ -1075,6 +1069,11 @@ poplevel (keep, reverse, functionbody)\n   tree decl;\n   int block_previously_created;\n \n+  /* We used to use KEEP == 2 to indicate that the new block should go\n+     at the beginning of the list of blocks at this binding level,\n+     rather than the end.  This hack is no longer used.  */\n+  my_friendly_assert (keep == 0 || keep == 1, 0);\n+\n   GNU_xref_end_scope ((HOST_WIDE_INT) current_binding_level,\n \t\t      (HOST_WIDE_INT) current_binding_level->level_chain,\n \t\t      current_binding_level->parm_flag,\n@@ -1325,14 +1324,8 @@ poplevel (keep, reverse, functionbody)\n      must be carried forward so they will later become subblocks\n      of something else.  */\n   else if (subblocks)\n-    {\n-      if (keep == 2)\n-\tcurrent_binding_level->blocks\n-\t  = chainon (subblocks, current_binding_level->blocks);\n-      else\n-\tcurrent_binding_level->blocks\n-\t  = chainon (current_binding_level->blocks, subblocks);\n-    }\n+    current_binding_level->blocks\n+      = chainon (current_binding_level->blocks, subblocks);\n \n   /* Take care of compiler's internal binding structures.  */\n   if (tmp == 2)\n@@ -13302,7 +13295,7 @@ finish_function (lineno, call_poplevel, nested)\n \n \t  /* End of destructor.  */\n \t  expand_end_bindings (NULL_TREE, getdecls () != NULL_TREE, 0);\n-\t  poplevel (2, 0, 0);\t/* XXX change to 1 */\n+\t  poplevel (getdecls () != NULL_TREE, 0, 0);\n \n \t  /* Back to the top of destructor.  */\n \t  /* Don't execute destructor code if `this' is NULL.  */"}, {"sha": "200aeb3cffc16cae0ed4c4389c418f1c0df9f9c3", "filename": "gcc/testsuite/g++.old-deja/g++.other/debug2.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/536333d40b7c5a62216bcccaf1c41f71f28c84e6/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdebug2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/536333d40b7c5a62216bcccaf1c41f71f28c84e6/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdebug2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdebug2.C?ref=536333d40b7c5a62216bcccaf1c41f71f28c84e6", "patch": "@@ -0,0 +1,31 @@\n+// Build don't link:\n+// Special g++ Options: -funroll-loops -O2 -g\n+\n+inline void f()\n+{\n+  typedef int T;\n+}\n+\n+inline void g()\n+{\n+  typedef double U;\n+}\n+\n+int n;\n+\n+struct B\n+{\n+  ~B() { \n+    for (int i = 0; i < n; ++i)\n+      g(); \n+  }\n+};\n+\n+struct D : public B {\n+  ~D() { \n+    for (int j = 0; j < n; ++j)\n+      f(); \n+  }\n+};\n+\n+D d;"}]}