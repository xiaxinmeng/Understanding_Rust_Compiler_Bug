{"sha": "1c51d6883ae957c26cbd2a71c09291e34a21f73c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM1MWQ2ODgzYWU5NTdjMjZjYmQyYTcxYzA5MjkxZTM0YTIxZjczYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-02-07T07:46:34Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-02-07T07:46:34Z"}, "message": "configure.ac (libgcc_cv_mips_hard_float): New.\n\nlibgcc/\n\t* configure.ac (libgcc_cv_mips_hard_float): New.\n\t* configure: Regenerate.\n\t* config.host (mips*-*-*): Use t-hardfp-sfdf rather than\n\tt-softfp-sfdf for hard-float targets.\n\t* config/mips/t-mips (LIB2_SIDITI_CONV_FUNCS): Reinstate.\n\t(softfp_float_modes, softfp_int_modes, softfp_extensions)\n\t(softfp_truncations, softfp_exclude_libgcc2): New.\n\t* config/t-hardfp: New file.\n\t* config/t-hardfp-sfdf: Likewise.\n\t* config/hardfp.c: Likewise.\n\nFrom-SVN: r207593", "tree": {"sha": "9d53b8933341fc4dff85d5421e2b2231852248bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d53b8933341fc4dff85d5421e2b2231852248bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c51d6883ae957c26cbd2a71c09291e34a21f73c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c51d6883ae957c26cbd2a71c09291e34a21f73c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c51d6883ae957c26cbd2a71c09291e34a21f73c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c51d6883ae957c26cbd2a71c09291e34a21f73c/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d6af792827fa779531662366b6dadad477a84dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d6af792827fa779531662366b6dadad477a84dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d6af792827fa779531662366b6dadad477a84dc"}], "stats": {"total": 230, "additions": 229, "deletions": 1}, "files": [{"sha": "2389df557386150679debbf55a356f66f47b1a86", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c51d6883ae957c26cbd2a71c09291e34a21f73c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c51d6883ae957c26cbd2a71c09291e34a21f73c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=1c51d6883ae957c26cbd2a71c09291e34a21f73c", "patch": "@@ -1,3 +1,16 @@\n+2014-02-07  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* configure.ac (libgcc_cv_mips_hard_float): New.\n+\t* configure: Regenerate.\n+\t* config.host (mips*-*-*): Use t-hardfp-sfdf rather than\n+\tt-softfp-sfdf for hard-float targets.\n+\t* config/mips/t-mips (LIB2_SIDITI_CONV_FUNCS): Reinstate.\n+\t(softfp_float_modes, softfp_int_modes, softfp_extensions)\n+\t(softfp_truncations, softfp_exclude_libgcc2): New.\n+\t* config/t-hardfp: New file.\n+\t* config/t-hardfp-sfdf: Likewise.\n+\t* config/hardfp.c: Likewise.\n+\n 2014-02-05  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config.host: Include t-floattodi also for s390x."}, {"sha": "0b83fc05464e38bf7168b2e11848183946a8226a", "filename": "libgcc/config.host", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c51d6883ae957c26cbd2a71c09291e34a21f73c/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c51d6883ae957c26cbd2a71c09291e34a21f73c/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=1c51d6883ae957c26cbd2a71c09291e34a21f73c", "patch": "@@ -142,7 +142,12 @@ microblaze*-*-*)\n mips*-*-*)\n \t# All MIPS targets provide a full set of FP routines.\n \tcpu_type=mips\n-\ttmake_file=\"mips/t-mips t-softfp-sfdf\"\n+\ttmake_file=\"mips/t-mips\"\n+\tif test \"${libgcc_cv_mips_hard_float}\" = yes; then\n+\t\ttmake_file=\"${tmake_file} t-hardfp-sfdf t-hardfp\"\n+\telse\n+\t\ttmake_file=\"${tmake_file} t-softfp-sfdf\"\n+\tfi\n \tif test \"${ac_cv_sizeof_long_double}\" = 16; then\n \t\ttmake_file=\"${tmake_file} mips/t-softfp-tf\"\n \tfi"}, {"sha": "4d938d44b07807343dda0db116fccac66bca6455", "filename": "libgcc/config/hardfp.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c51d6883ae957c26cbd2a71c09291e34a21f73c/libgcc%2Fconfig%2Fhardfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c51d6883ae957c26cbd2a71c09291e34a21f73c/libgcc%2Fconfig%2Fhardfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fhardfp.c?ref=1c51d6883ae957c26cbd2a71c09291e34a21f73c", "patch": "@@ -0,0 +1,62 @@\n+/* Dummy floating-point routines for hard-float code.\n+   Copyright (C) 2014 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define sf float\n+#define df double\n+\n+#if defined (OP_add3)\n+TYPE FUNC (TYPE x, TYPE y) { return x + y; }\n+#elif defined (OP_sub3)\n+TYPE FUNC (TYPE x, TYPE y) { return x - y; }\n+#elif defined (OP_neg2)\n+TYPE FUNC (TYPE x) { return -x; }\n+#elif defined (OP_mul3)\n+TYPE FUNC (TYPE x, TYPE y) { return x * y; }\n+#elif defined (OP_div3)\n+TYPE FUNC (TYPE x, TYPE y) { return x / y; }\n+#elif defined (OP_eq2) || defined (OP_ne2)\n+int FUNC (TYPE x, TYPE y) { return x == y ? 0 : 1; }\n+#elif defined (OP_ge2)\n+int FUNC (TYPE x, TYPE y) { return x >= y ? 0 : -1; }\n+#elif defined (OP_gt2)\n+int FUNC (TYPE x, TYPE y) { return x > y ? 1 : 0; }\n+#elif defined (OP_le2)\n+int FUNC (TYPE x, TYPE y) { return x <= y ? 0 : 1; }\n+#elif defined (OP_lt2)\n+int FUNC (TYPE x, TYPE y) { return x < y ? -1 : 0; }\n+#elif defined (OP_unord2)\n+int FUNC (TYPE x, TYPE y) { return __builtin_isunordered (x, y); }\n+#elif defined (OP_fixsi)\n+int FUNC (TYPE x) { return (int) x; }\n+#elif defined (OP_floatsi)\n+TYPE FUNC (int x) { return (TYPE) x; }\n+#elif defined (OP_floatunsi)\n+TYPE FUNC (unsigned int x) { return (TYPE) x; }\n+#elif defined (OP_extendsf2)\n+TYPE FUNC (float x) { return (TYPE) x; }\n+#elif defined (OP_truncdf2)\n+TYPE FUNC (double x) { return (TYPE) x; }\n+#else\n+#error Unknown operation\n+#endif"}, {"sha": "4fb8e1362171201a3f640188b5f530420803d9d7", "filename": "libgcc/config/mips/t-mips", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c51d6883ae957c26cbd2a71c09291e34a21f73c/libgcc%2Fconfig%2Fmips%2Ft-mips", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c51d6883ae957c26cbd2a71c09291e34a21f73c/libgcc%2Fconfig%2Fmips%2Ft-mips", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Ft-mips?ref=1c51d6883ae957c26cbd2a71c09291e34a21f73c", "patch": "@@ -1 +1,9 @@\n+LIB2_SIDITI_CONV_FUNCS = yes\n+\n+softfp_float_modes :=\n+softfp_int_modes := si di\n+softfp_extensions :=\n+softfp_truncations :=\n+softfp_exclude_libgcc2 := n\n+\n LIB2ADD_ST += $(srcdir)/config/mips/lib2funcs.c"}, {"sha": "fe02f8e3dde9717060ab99b08d2684a1c3d6ff3f", "filename": "libgcc/config/t-hardfp", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c51d6883ae957c26cbd2a71c09291e34a21f73c/libgcc%2Fconfig%2Ft-hardfp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c51d6883ae957c26cbd2a71c09291e34a21f73c/libgcc%2Fconfig%2Ft-hardfp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-hardfp?ref=1c51d6883ae957c26cbd2a71c09291e34a21f73c", "patch": "@@ -0,0 +1,81 @@\n+# Copyright (C) 2014 Free Software Foundation, Inc.\n+\n+# This file is part of GCC.\n+\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# For historical reasons, some targets provide a full set of FP routines\n+# even if there is native hardware support for some of them.  This file\n+# is used to define functions that can be implemented directly in hardware.\n+# For example, an __adddf3 defined by this file will use an FPU addition.\n+#\n+# The following variables should be set up before including this file:\n+#\n+# hardfp_float_modes: a list of hardware floating-point modes.\n+#                     e.g. sf df\n+# hardfp_int_modes: a list of integer modes for which to define conversions;\n+#\t\t    usually this is \"si\", since libgcc2.c provides routines\n+#\t\t    for wider modes\n+# hardfp_extensions: a list of extensions between hardware floating-point modes,\n+#                    e.g. sfdf\n+# hardfp_truncations: a list of truncations between hardware floating-point\n+#                     modes, e.g. dfsf\n+\n+# Functions parameterized by a floating-point mode M.\n+hardfp_func_bases := addM3 subM3 negM2 mulM3 divM3\n+hardfp_func_bases += eqM2 neM2 geM2 gtM2 leM2 ltM2 unordM2\n+\n+# Functions parameterized by both a floating-point mode M and an integer mode N.\n+hardfp_int_func_bases := fixMN floatNM floatunNM\n+hardfp_func_bases += $(foreach n, $(hardfp_int_modes), \\\n+\t\t\t       $(subst N,$(n),$(hardfp_int_func_bases)))\n+\n+# Get the full list of functions.\n+hardfp_func_list := $(foreach m, $(hardfp_float_modes), \\\n+\t      \t \t      $(subst M,$(m),$(hardfp_func_bases)))\n+hardfp_func_list += $(foreach pair, $(hardfp_extensions), \\\n+\t\t    \t      $(subst M,$(pair),extendM2))\n+hardfp_func_list += $(foreach pair, $(hardfp_truncations), \\\n+\t\t    \t      $(subst M,$(pair),truncM2))\n+\n+# Regexp for matching a floating-point mode.\n+hardfp_mode_regexp := $(shell echo $(hardfp_float_modes) | sed 's/ /\\\\|/g')\n+\n+# Regexp for matching the end of a function name, after the last\n+# floating-point mode.\n+hardfp_suffix_regexp := $(shell echo $(hardfp_int_modes) 2 3 | sed 's/ /\\\\|/g')\n+\n+# Add -D options to define:\n+#   FUNC: the function name (e.g. __addsf3)\n+#   OP:   the function name without the leading __ and with the last\n+#            floating-point mode removed (e.g. add3)\n+#   TYPE: the last floating-point mode (e.g. sf)\n+hardfp_defines_for = \\\n+  $(shell echo $1 | \\\n+    sed 's/\\(.*\\)\\($(hardfp_mode_regexp)\\)\\($(hardfp_suffix_regexp)\\|\\)$$/-DFUNC=__& -DOP_\\1\\3 -DTYPE=\\2/')\n+\n+hardfp-o = $(patsubst %,%$(objext),$(hardfp_func_list))\n+$(hardfp-o): %$(objext): $(srcdir)/config/hardfp.c\n+\t@echo \"Mode = $(hardfp_mode_regexp)\"\n+\t@echo \"Suffix = $(hardfp_suffix_regexp)\"\n+\t$(gcc_compile) $(call hardfp_defines_for, $*) -c $< $(vis_hide) -Wno-missing-prototypes\n+libgcc-objects += $(hardfp-o)\n+\n+ifeq ($(enable_shared),yes)\n+hardfp-s-o = $(patsubst %,%_s$(objext),$(hardfp_func_list))\n+$(hardfp-s-o): %_s$(objext): $(srcdir)/config/hardfp.c\n+\t$(gcc_s_compile) $(call hardfp_defines_for, $*) -c $< -Wno-missing-prototypes\n+libgcc-s-objects += $(hardfp-s-o)\n+endif"}, {"sha": "5d39b78929de0f89a9cb52da74a42d3a5dafca3a", "filename": "libgcc/config/t-hardfp-sfdf", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c51d6883ae957c26cbd2a71c09291e34a21f73c/libgcc%2Fconfig%2Ft-hardfp-sfdf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c51d6883ae957c26cbd2a71c09291e34a21f73c/libgcc%2Fconfig%2Ft-hardfp-sfdf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-hardfp-sfdf?ref=1c51d6883ae957c26cbd2a71c09291e34a21f73c", "patch": "@@ -0,0 +1,23 @@\n+# Copyright (C) 2014 Free Software Foundation, Inc.\n+\n+# This file is part of GCC.\n+\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+hardfp_float_modes := sf df\n+# di and ti are provided by libgcc2.c where needed.\n+hardfp_int_modes := si\n+hardfp_extensions := sfdf\n+hardfp_truncations := dfsf"}, {"sha": "35896deb7bf69aa823c4c0140c2f2dd3734d5b85", "filename": "libgcc/configure", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c51d6883ae957c26cbd2a71c09291e34a21f73c/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c51d6883ae957c26cbd2a71c09291e34a21f73c/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=1c51d6883ae957c26cbd2a71c09291e34a21f73c", "patch": "@@ -4330,6 +4330,30 @@ EOF\n eval `${CC-cc} -E conftest.c | grep host_address=`\n rm -f conftest.c\n \n+case ${host} in\n+mips*-*-*)\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether the target is hard-float\" >&5\n+$as_echo_n \"checking whether the target is hard-float... \" >&6; }\n+if test \"${libgcc_cv_mips_hard_float+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#ifndef __mips_hard_float\n+     #error FOO\n+     #endif\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  libgcc_cv_mips_hard_float=yes\n+else\n+  libgcc_cv_mips_hard_float=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgcc_cv_mips_hard_float\" >&5\n+$as_echo \"$libgcc_cv_mips_hard_float\" >&6; }\n+esac\n+\n # Collect host-machine-specific information.\n . ${srcdir}/config.host\n "}, {"sha": "d877d21c092e036b8fefdc0d02d8895606537e2a", "filename": "libgcc/configure.ac", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c51d6883ae957c26cbd2a71c09291e34a21f73c/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c51d6883ae957c26cbd2a71c09291e34a21f73c/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=1c51d6883ae957c26cbd2a71c09291e34a21f73c", "patch": "@@ -292,6 +292,18 @@ EOF\n eval `${CC-cc} -E conftest.c | grep host_address=`\n rm -f conftest.c\n \n+case ${host} in\n+mips*-*-*)\n+  AC_CACHE_CHECK([whether the target is hard-float],\n+\t\t [libgcc_cv_mips_hard_float],\n+\t\t [AC_COMPILE_IFELSE(\n+    [#ifndef __mips_hard_float\n+     #error FOO\n+     #endif],\n+    [libgcc_cv_mips_hard_float=yes],\n+    [libgcc_cv_mips_hard_float=no])])\n+esac\n+\n # Collect host-machine-specific information.\n . ${srcdir}/config.host\n "}]}