{"sha": "253cbc5f37c1c0025b02f977d6fbebc304bdc87e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUzY2JjNWYzN2MxYzAwMjViMDJmOTc3ZDZmYmViYzMwNGJkYzg3ZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2012-05-27T16:25:58Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2012-05-27T16:25:58Z"}, "message": "tree.c (build_constructor): Propagate TREE_SIDE_EFFECTS.\n\n\t* tree.c (build_constructor): Propagate TREE_SIDE_EFFECTS.\ntestsuite/\n\t* gcc.dg/stmt-expr-4.c: New.\n\nFrom-SVN: r187923", "tree": {"sha": "e3ab539b1c4e074d9ad83e5c9cb0254a4ff9fe41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3ab539b1c4e074d9ad83e5c9cb0254a4ff9fe41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/253cbc5f37c1c0025b02f977d6fbebc304bdc87e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/253cbc5f37c1c0025b02f977d6fbebc304bdc87e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/253cbc5f37c1c0025b02f977d6fbebc304bdc87e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/253cbc5f37c1c0025b02f977d6fbebc304bdc87e/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ca8bef0218b120d504b18a983b6da1f37f3acbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ca8bef0218b120d504b18a983b6da1f37f3acbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ca8bef0218b120d504b18a983b6da1f37f3acbe"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "02b48a025dc7efbd492552fed7647009fb6fbf14", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/253cbc5f37c1c0025b02f977d6fbebc304bdc87e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/253cbc5f37c1c0025b02f977d6fbebc304bdc87e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=253cbc5f37c1c0025b02f977d6fbebc304bdc87e", "patch": "@@ -1,3 +1,7 @@\n+2012-05-27  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* tree.c (build_constructor): Propagate TREE_SIDE_EFFECTS.\n+\n 2012-05-26  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/53220"}, {"sha": "4d6b6ffe1412e944fa7a9fa6169203f12ea37b7e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/253cbc5f37c1c0025b02f977d6fbebc304bdc87e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/253cbc5f37c1c0025b02f977d6fbebc304bdc87e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=253cbc5f37c1c0025b02f977d6fbebc304bdc87e", "patch": "@@ -1,3 +1,7 @@\n+2012-05-27  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* gcc.dg/stmt-expr-4.c: New.\n+\n 2012-05-26  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/53491"}, {"sha": "d6d01633d3bb0b2728e93a6b4ef7467defbdd914", "filename": "gcc/testsuite/gcc.dg/stmt-expr-4.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/253cbc5f37c1c0025b02f977d6fbebc304bdc87e/gcc%2Ftestsuite%2Fgcc.dg%2Fstmt-expr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/253cbc5f37c1c0025b02f977d6fbebc304bdc87e/gcc%2Ftestsuite%2Fgcc.dg%2Fstmt-expr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstmt-expr-4.c?ref=253cbc5f37c1c0025b02f977d6fbebc304bdc87e", "patch": "@@ -0,0 +1,22 @@\n+\n+/* { dg-options \"-O2 -std=gnu99\" } */\n+/* Internal compiler error in iterative_hash_expr */\n+\n+struct tree_string\n+{\n+  char str[1];\n+};\n+\n+union tree_node\n+{\n+  struct tree_string string;\n+};\n+\n+char *Foo (union tree_node * num_string)\n+{\n+  char *str = ((union {const char * _q; char * _nq;})\n+\t       ((const char *)(({ __typeof (num_string) const __t\n+\t\t\t\t     = num_string;  __t; })\n+\t\t\t       ->string.str)))._nq;\n+  return str;\n+}"}, {"sha": "e5c19bccabfcfc4e06bbaa4ca9e12ed2f26a994f", "filename": "gcc/tree.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/253cbc5f37c1c0025b02f977d6fbebc304bdc87e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/253cbc5f37c1c0025b02f977d6fbebc304bdc87e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=253cbc5f37c1c0025b02f977d6fbebc304bdc87e", "patch": "@@ -1416,17 +1416,24 @@ build_constructor (tree type, VEC(constructor_elt,gc) *vals)\n   unsigned int i;\n   constructor_elt *elt;\n   bool constant_p = true;\n+  bool side_effects_p = false;\n \n   TREE_TYPE (c) = type;\n   CONSTRUCTOR_ELTS (c) = vals;\n \n   FOR_EACH_VEC_ELT (constructor_elt, vals, i, elt)\n-    if (!TREE_CONSTANT (elt->value))\n-      {\n+    {\n+      /* Mostly ctors will have elts that don't have side-effects, so\n+\t the usual case is to scan all the elements.  Hence a single\n+\t loop for both const and side effects, rather than one loop\n+\t each (with early outs).  */\n+      if (!TREE_CONSTANT (elt->value))\n \tconstant_p = false;\n-\tbreak;\n-      }\n+      if (TREE_SIDE_EFFECTS (elt->value))\n+\tside_effects_p = true;\n+    }\n \n+  TREE_SIDE_EFFECTS (c) = side_effects_p;\n   TREE_CONSTANT (c) = constant_p;\n \n   return c;"}]}