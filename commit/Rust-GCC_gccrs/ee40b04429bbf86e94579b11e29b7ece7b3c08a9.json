{"sha": "ee40b04429bbf86e94579b11e29b7ece7b3c08a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU0MGIwNDQyOWJiZjg2ZTk0NTc5YjExZTI5YjdlY2U3YjNjMDhhOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-07-06T16:43:33Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-07-06T16:43:33Z"}, "message": "i386.md (extv<mode>): Rename from extv.\n\n\t* config/i386/i386.md (extv<mode>): Rename from extv.  Use SWI24\n\tmodes for operands 0 and 1.  Use SImode for operands 2 and 3.\n\tCopy operand 1 to a temporary if !ext_register_operand.  Remove\n\tancient extract_bit_field workaround.\n\t(*extv<mode>): Rename from *mov<mode>_extv_1.\n\t(*extvqi): Rename from *movqi_extv_q.\n\t(extzv<mode>): Rename from extzv.  Use SWI248 modes for\n\toperands 0 and 1.  Use SImode for operands 2 and 3. Copy operand 1\n\tto a temporary if !ext_register_operand.  Remove ancient\n\textract_bit_field workaround.\n\t(*extzv<mode>): Rename from *mov<mode>_extzv_1.\n\t(*extzvqi): Rename from *movqi_extzv_1.\n\t(*testqi_ext_3): Remove modes from const_int_operand predicated\n\toperands.  Add \"n\" constraint.\n\t(*btsq, *btrq, *btcq): Remove mode from const_0_to_63 predicated\n\toperand.  Add \"J\" constraint.\n\t(*btsq, *btrq, *btcq peephole2s): Remove mode from\n\tconst_0_to_63 predicated operand.\n\t(regmode): New insn attribute.\n\t(*bt<mode>): Use SImode for operand 1.  Change operand 1 predicate\n\tto nonmemory_operand.  Use regmode insn attribute.\n\t(*jcc_bt<mode>_1): Convert operand 2 to SImode.\n\t(*jcc_bt<mode>_mask): Remove mode from operand 3.\n\t(*jcc_btsi_1, *jcc_btsi_mask_1): Remove patterns.\n\t(tbm_bextri_<mode>): Remove modes from const_0_to_255 predicated\n\toperands.  Use \"N\" constraint instead of \"n\".\n\nFrom-SVN: r225463", "tree": {"sha": "7c4c81751bd0a4de8472d57ef23a0e2800e05a4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c4c81751bd0a4de8472d57ef23a0e2800e05a4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee40b04429bbf86e94579b11e29b7ece7b3c08a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee40b04429bbf86e94579b11e29b7ece7b3c08a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee40b04429bbf86e94579b11e29b7ece7b3c08a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee40b04429bbf86e94579b11e29b7ece7b3c08a9/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd5cabb2d7b8eed87dd4e00a8341b769674046ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd5cabb2d7b8eed87dd4e00a8341b769674046ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd5cabb2d7b8eed87dd4e00a8341b769674046ef"}], "stats": {"total": 230, "additions": 89, "deletions": 141}, "files": [{"sha": "b9785156595591bed38a72fc7eb79bcefe920206", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee40b04429bbf86e94579b11e29b7ece7b3c08a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee40b04429bbf86e94579b11e29b7ece7b3c08a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee40b04429bbf86e94579b11e29b7ece7b3c08a9", "patch": "@@ -1,3 +1,32 @@\n+2015-07-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (extv<mode>): Rename from extv.  Use SWI24\n+\tmodes for operands 0 and 1.  Use SImode for operands 2 and 3.\n+\tCopy operand 1 to a temporary if !ext_register_operand.  Remove\n+\tancient extract_bit_field workaround.\n+\t(*extv<mode>): Rename from *mov<mode>_extv_1.\n+\t(*extvqi): Rename from *movqi_extv_q.\n+\t(extzv<mode>): Rename from extzv.  Use SWI248 modes for\n+\toperands 0 and 1.  Use SImode for operands 2 and 3. Copy operand 1\n+\tto a temporary if !ext_register_operand.  Remove ancient\n+\textract_bit_field workaround.\n+\t(*extzv<mode>): Rename from *mov<mode>_extzv_1.\n+\t(*extzvqi): Rename from *movqi_extzv_1.\n+\t(*testqi_ext_3): Remove modes from const_int_operand predicated\n+\toperands.  Add \"n\" constraint.\n+\t(*btsq, *btrq, *btcq): Remove mode from const_0_to_63 predicated\n+\toperand.  Add \"J\" constraint.\n+\t(*btsq, *btrq, *btcq peephole2s): Remove mode from\n+\tconst_0_to_63 predicated operand.\n+\t(regmode): New insn attribute.\n+\t(*bt<mode>): Use SImode for operand 1.  Change operand 1 predicate\n+\tto nonmemory_operand.  Use regmode insn attribute.\n+\t(*jcc_bt<mode>_1): Convert operand 2 to SImode.\n+\t(*jcc_bt<mode>_mask): Remove mode from operand 3.\n+\t(*jcc_btsi_1, *jcc_btsi_mask_1): Remove patterns.\n+\t(tbm_bextri_<mode>): Remove modes from const_0_to_255 predicated\n+\toperands.  Use \"N\" constraint instead of \"n\".\n+\n 2015-07-06  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/arm/arm.md (movdi): Avoid odd-number ldrd/strd in ARM state."}, {"sha": "f59b2f8f819e0432113f89e2108480bfc1da3662", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 60, "deletions": 141, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee40b04429bbf86e94579b11e29b7ece7b3c08a9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee40b04429bbf86e94579b11e29b7ece7b3c08a9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ee40b04429bbf86e94579b11e29b7ece7b3c08a9", "patch": "@@ -2675,7 +2675,22 @@\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"length_immediate\" \"0\")])\n \n-(define_insn \"*mov<mode>_extv_1\"\n+(define_expand \"extv<mode>\"\n+  [(set (match_operand:SWI24 0 \"register_operand\")\n+\t(sign_extract:SWI24 (match_operand:SWI24 1 \"register_operand\")\n+\t\t\t    (match_operand:SI 2 \"const_int_operand\")\n+\t\t\t    (match_operand:SI 3 \"const_int_operand\")))]\n+  \"\"\n+{\n+  /* Handle extractions from %ah et al.  */\n+  if (INTVAL (operands[2]) != 8 || INTVAL (operands[3]) != 8)\n+    FAIL;\n+\n+  if (! ext_register_operand (operands[1], VOIDmode))\n+    operands[1] = copy_to_reg (operands[1]);\n+})\n+\n+(define_insn \"*extv<mode>\"\n   [(set (match_operand:SWI24 0 \"register_operand\" \"=R\")\n \t(sign_extract:SWI24 (match_operand 1 \"ext_register_operand\" \"Q\")\n \t\t\t    (const_int 8)\n@@ -2685,7 +2700,7 @@\n   [(set_attr \"type\" \"imovx\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*movqi_extv_1\"\n+(define_insn \"*extvqi\"\n   [(set (match_operand:QI 0 \"nonimmediate_x64nomem_operand\" \"=Q,?R,m\")\n         (sign_extract:QI (match_operand 1 \"ext_register_operand\" \"Q,Q,Q\")\n                          (const_int 8)\n@@ -2712,17 +2727,32 @@\n \t(const_string \"SI\")\n \t(const_string \"QI\")))])\n \n-(define_insn \"*mov<mode>_extzv_1\"\n-  [(set (match_operand:SWI48 0 \"register_operand\" \"=R\")\n-\t(zero_extract:SWI48 (match_operand 1 \"ext_register_operand\" \"Q\")\n-\t\t\t    (const_int 8)\n-\t\t\t    (const_int 8)))]\n+(define_expand \"extzv<mode>\"\n+  [(set (match_operand:SWI248 0 \"register_operand\")\n+\t(zero_extract:SWI248 (match_operand:SWI248 1 \"register_operand\")\n+\t\t\t     (match_operand:SI 2 \"const_int_operand\")\n+\t\t\t     (match_operand:SI 3 \"const_int_operand\")))]\n+  \"\"\n+{\n+  /* Handle extractions from %ah et al.  */\n+  if (INTVAL (operands[2]) != 8 || INTVAL (operands[3]) != 8)\n+    FAIL;\n+\n+  if (! ext_register_operand (operands[1], VOIDmode))\n+    operands[1] = copy_to_reg (operands[1]);\n+})\n+\n+(define_insn \"*extzv<mode>\"\n+  [(set (match_operand:SWI248 0 \"register_operand\" \"=R\")\n+\t(zero_extract:SWI248 (match_operand 1 \"ext_register_operand\" \"Q\")\n+\t\t\t     (const_int 8)\n+\t\t\t     (const_int 8)))]\n   \"\"\n   \"movz{bl|x}\\t{%h1, %k0|%k0, %h1}\"\n   [(set_attr \"type\" \"imovx\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*movqi_extzv_2\"\n+(define_insn \"*extzvqi\"\n   [(set (match_operand:QI 0 \"nonimmediate_x64nomem_operand\" \"=Q,?R,m\")\n         (subreg:QI\n \t  (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"Q,Q,Q\")\n@@ -2752,8 +2782,8 @@\n \n (define_insn \"mov<mode>_insv_1\"\n   [(set (zero_extract:SWI48 (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n-\t\t\t     (const_int 8)\n-\t\t\t     (const_int 8))\n+\t\t\t    (const_int 8)\n+\t\t\t    (const_int 8))\n \t(match_operand:SWI48 1 \"general_x64nomem_operand\" \"Qn,m\"))]\n   \"\"\n {\n@@ -7583,8 +7613,8 @@\n   [(set (reg FLAGS_REG)\n \t(compare (zero_extract:SWI48\n \t\t   (match_operand 0 \"nonimmediate_operand\" \"rm\")\n-\t\t   (match_operand:SWI48 1 \"const_int_operand\")\n-\t\t   (match_operand:SWI48 2 \"const_int_operand\"))\n+\t\t   (match_operand 1 \"const_int_operand\" \"n\")\n+\t\t   (match_operand 2 \"const_int_operand\" \"n\"))\n \t\t (const_int 0)))]\n   \"ix86_match_ccmode (insn, CCNOmode)\n    && ((TARGET_64BIT && GET_MODE (operands[0]) == DImode)\n@@ -10578,40 +10608,6 @@\n \f\n ;; Bit set / bit test instructions\n \n-(define_expand \"extv\"\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(sign_extract:SI (match_operand:SI 1 \"register_operand\")\n-\t\t\t (match_operand:SI 2 \"const8_operand\")\n-\t\t\t (match_operand:SI 3 \"const8_operand\")))]\n-  \"\"\n-{\n-  /* Handle extractions from %ah et al.  */\n-  if (INTVAL (operands[2]) != 8 || INTVAL (operands[3]) != 8)\n-    FAIL;\n-\n-  /* From mips.md: extract_bit_field doesn't verify that our source\n-     matches the predicate, so check it again here.  */\n-  if (! ext_register_operand (operands[1], VOIDmode))\n-    FAIL;\n-})\n-\n-(define_expand \"extzv\"\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(zero_extract:SI (match_operand 1 \"ext_register_operand\")\n-\t\t\t (match_operand:SI 2 \"const8_operand\")\n-\t\t\t (match_operand:SI 3 \"const8_operand\")))]\n-  \"\"\n-{\n-  /* Handle extractions from %ah et al.  */\n-  if (INTVAL (operands[2]) != 8 || INTVAL (operands[3]) != 8)\n-    FAIL;\n-\n-  /* From mips.md: extract_bit_field doesn't verify that our source\n-     matches the predicate, so check it again here.  */\n-  if (! ext_register_operand (operands[1], VOIDmode))\n-    FAIL;\n-})\n-\n (define_expand \"insv\"\n   [(set (zero_extract (match_operand 0 \"register_operand\")\n \t\t      (match_operand 1 \"const_int_operand\")\n@@ -10656,7 +10652,7 @@\n (define_insn \"*btsq\"\n   [(set (zero_extract:DI (match_operand:DI 0 \"register_operand\" \"+r\")\n \t\t\t (const_int 1)\n-\t\t\t (match_operand:DI 1 \"const_0_to_63_operand\"))\n+\t\t\t (match_operand 1 \"const_0_to_63_operand\" \"J\"))\n \t(const_int 1))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && (TARGET_USE_BT || reload_completed)\"\n@@ -10668,7 +10664,7 @@\n (define_insn \"*btrq\"\n   [(set (zero_extract:DI (match_operand:DI 0 \"register_operand\" \"+r\")\n \t\t\t (const_int 1)\n-\t\t\t (match_operand:DI 1 \"const_0_to_63_operand\"))\n+\t\t\t (match_operand 1 \"const_0_to_63_operand\" \"J\"))\n \t(const_int 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && (TARGET_USE_BT || reload_completed)\"\n@@ -10680,7 +10676,7 @@\n (define_insn \"*btcq\"\n   [(set (zero_extract:DI (match_operand:DI 0 \"register_operand\" \"+r\")\n \t\t\t (const_int 1)\n-\t\t\t (match_operand:DI 1 \"const_0_to_63_operand\"))\n+\t\t\t (match_operand 1 \"const_0_to_63_operand\" \"J\"))\n \t(not:DI (zero_extract:DI (match_dup 0) (const_int 1) (match_dup 1))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && (TARGET_USE_BT || reload_completed)\"\n@@ -10696,7 +10692,7 @@\n    (parallel [(set (zero_extract:DI\n \t\t     (match_operand:DI 0 \"register_operand\")\n \t\t     (const_int 1)\n-\t\t     (match_operand:DI 1 \"const_0_to_63_operand\"))\n+\t\t     (match_operand 1 \"const_0_to_63_operand\"))\n \t\t   (const_int 1))\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_64BIT && !TARGET_USE_BT\"\n@@ -10721,7 +10717,7 @@\n    (parallel [(set (zero_extract:DI\n \t\t     (match_operand:DI 0 \"register_operand\")\n \t\t     (const_int 1)\n-\t\t     (match_operand:DI 1 \"const_0_to_63_operand\"))\n+\t\t     (match_operand 1 \"const_0_to_63_operand\"))\n \t\t   (const_int 0))\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_64BIT && !TARGET_USE_BT\"\n@@ -10746,7 +10742,7 @@\n    (parallel [(set (zero_extract:DI\n \t\t     (match_operand:DI 0 \"register_operand\")\n \t\t     (const_int 1)\n-\t\t     (match_operand:DI 1 \"const_0_to_63_operand\"))\n+\t\t     (match_operand 1 \"const_0_to_63_operand\"))\n \t      (not:DI (zero_extract:DI\n \t\t\t(match_dup 0) (const_int 1) (match_dup 1))))\n \t      (clobber (reg:CC FLAGS_REG))])]\n@@ -10767,16 +10763,18 @@\n   DONE;\n })\n \n+(define_mode_attr regmode [(SI \"k\") (DI \"q\")])\n+\n (define_insn \"*bt<mode>\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC\n \t  (zero_extract:SWI48\n \t    (match_operand:SWI48 0 \"register_operand\" \"r\")\n \t    (const_int 1)\n-\t    (match_operand:SWI48 1 \"x86_64_nonmemory_operand\" \"rN\"))\n+\t    (match_operand:SI 1 \"nonmemory_operand\" \"rN\"))\n \t  (const_int 0)))]\n   \"TARGET_USE_BT || optimize_function_for_size_p (cfun)\"\n-  \"bt{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n+  \"bt{<imodesuffix>}\\t{%<regmode>1, %0|%0, %<regmode>1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"prefix_0f\" \"1\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -11036,19 +11034,13 @@\n     FAIL;\n })\n \n-;; zero_extend in SImode is correct also for DImode, since this is what combine\n-;; pass generates from shift insn with QImode operand.  Actually, the mode\n-;; of operand 2 (bit offset operand) doesn't matter since bt insn takes\n-;; appropriate modulo of the bit offset value.\n-\n (define_insn_and_split \"*jcc_bt<mode>\"\n   [(set (pc)\n   \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n \t\t\t[(zero_extract:SWI48\n \t\t\t   (match_operand:SWI48 1 \"register_operand\" \"r\")\n \t\t\t   (const_int 1)\n-\t\t\t   (zero_extend:SI\n-\t\t\t     (match_operand:QI 2 \"register_operand\" \"r\")))\n+\t\t\t   (match_operand:SI 2 \"register_operand\" \"r\"))\n \t\t\t (const_int 0)])\n \t\t      (label_ref (match_operand 3))\n \t\t      (pc)))\n@@ -11068,20 +11060,18 @@\n \t\t      (label_ref (match_dup 3))\n \t\t      (pc)))]\n {\n-  operands[2] = simplify_gen_subreg (<MODE>mode, operands[2], QImode, 0);\n   operands[0] = shallow_copy_rtx (operands[0]);\n   PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n })\n \n-;; Like *jcc_bt<mode>, but expect a SImode operand 2 instead of QImode\n-;; zero extended to SImode.\n (define_insn_and_split \"*jcc_bt<mode>_1\"\n   [(set (pc)\n   \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n \t\t\t[(zero_extract:SWI48\n \t\t\t   (match_operand:SWI48 1 \"register_operand\" \"r\")\n \t\t\t   (const_int 1)\n-\t\t\t   (match_operand:SI 2 \"register_operand\" \"r\"))\n+\t\t\t   (zero_extend:SI\n+\t\t\t     (match_operand:QI 2 \"register_operand\" \"r\")))\n \t\t\t (const_int 0)])\n \t\t      (label_ref (match_operand 3))\n \t\t      (pc)))\n@@ -11101,13 +11091,12 @@\n \t\t      (label_ref (match_dup 3))\n \t\t      (pc)))]\n {\n-  operands[2] = simplify_gen_subreg (<MODE>mode, operands[2], SImode, 0);\n+  operands[2] = simplify_gen_subreg (SImode, operands[2], QImode, 0);\n   operands[0] = shallow_copy_rtx (operands[0]);\n   PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n })\n \n-;; Avoid useless masking of bit offset operand.  \"and\" in SImode is correct\n-;; also for DImode, this is what combine produces.\n+;; Avoid useless masking of bit offset operand.\n (define_insn_and_split \"*jcc_bt<mode>_mask\"\n   [(set (pc)\n   \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n@@ -11116,7 +11105,7 @@\n \t\t\t   (const_int 1)\n \t\t\t   (and:SI\n \t\t\t     (match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t     (match_operand:SI 3 \"const_int_operand\" \"n\")))])\n+\t\t\t     (match_operand 3 \"const_int_operand\" \"n\")))])\n \t\t      (label_ref (match_operand 4))\n \t\t      (pc)))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -11136,76 +11125,6 @@\n \t(if_then_else (match_op_dup 0 [(reg:CCC FLAGS_REG) (const_int 0)])\n \t\t      (label_ref (match_dup 4))\n \t\t      (pc)))]\n-{\n-  operands[2] = simplify_gen_subreg (<MODE>mode, operands[2], SImode, 0);\n-  operands[0] = shallow_copy_rtx (operands[0]);\n-  PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n-})\n-\n-(define_insn_and_split \"*jcc_btsi_1\"\n-  [(set (pc)\n-  \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n-\t\t\t[(and:SI\n-\t\t\t   (lshiftrt:SI\n-\t\t\t     (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t     (match_operand:QI 2 \"register_operand\" \"r\"))\n-\t\t\t   (const_int 1))\n-\t\t\t (const_int 0)])\n-\t\t      (label_ref (match_operand 3))\n-\t\t      (pc)))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_USE_BT || optimize_function_for_size_p (cfun)\"\n-  \"#\"\n-  \"&& 1\"\n-  [(set (reg:CCC FLAGS_REG)\n-\t(compare:CCC\n-\t  (zero_extract:SI\n-\t    (match_dup 1)\n-\t    (const_int 1)\n-\t    (match_dup 2))\n-\t  (const_int 0)))\n-   (set (pc)\n-\t(if_then_else (match_op_dup 0 [(reg:CCC FLAGS_REG) (const_int 0)])\n-\t\t      (label_ref (match_dup 3))\n-\t\t      (pc)))]\n-{\n-  operands[2] = simplify_gen_subreg (SImode, operands[2], QImode, 0);\n-  operands[0] = shallow_copy_rtx (operands[0]);\n-  PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n-})\n-\n-;; avoid useless masking of bit offset operand\n-(define_insn_and_split \"*jcc_btsi_mask_1\"\n-  [(set (pc)\n-  \t(if_then_else\n-\t  (match_operator 0 \"bt_comparison_operator\"\n-\t    [(and:SI\n-\t       (lshiftrt:SI\n-\t\t (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t (subreg:QI\n-\t\t   (and:SI\n-\t\t     (match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t     (match_operand:SI 3 \"const_int_operand\" \"n\")) 0))\n-\t       (const_int 1))\n-\t     (const_int 0)])\n-\t  (label_ref (match_operand 4))\n-\t  (pc)))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n-   && (INTVAL (operands[3]) & 0x1f) == 0x1f\"\n-  \"#\"\n-  \"&& 1\"\n-  [(set (reg:CCC FLAGS_REG)\n-\t(compare:CCC\n-\t  (zero_extract:SI\n-\t    (match_dup 1)\n-\t    (const_int 1)\n-\t    (match_dup 2))\n-\t  (const_int 0)))\n-   (set (pc)\n-\t(if_then_else (match_op_dup 0 [(reg:CCC FLAGS_REG) (const_int 0)])\n-\t\t      (label_ref (match_dup 4))\n-\t\t      (pc)))]\n {\n   operands[0] = shallow_copy_rtx (operands[0]);\n   PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n@@ -12748,8 +12667,8 @@\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n         (zero_extract:SWI48\n           (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n-          (match_operand:SWI48 2 \"const_0_to_255_operand\" \"n\")\n-          (match_operand:SWI48 3 \"const_0_to_255_operand\" \"n\")))\n+          (match_operand 2 \"const_0_to_255_operand\" \"N\")\n+          (match_operand 3 \"const_0_to_255_operand\" \"N\")))\n    (clobber (reg:CC FLAGS_REG))]\n    \"TARGET_TBM\"\n {"}]}