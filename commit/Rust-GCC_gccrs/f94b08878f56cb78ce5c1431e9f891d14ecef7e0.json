{"sha": "f94b08878f56cb78ce5c1431e9f891d14ecef7e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk0YjA4ODc4ZjU2Y2I3OGNlNWMxNDMxZTlmODkxZDE0ZWNlZjdlMA==", "commit": {"author": {"name": "Randolph Chung", "email": "tausq@debian.org", "date": "2004-03-19T22:39:10Z"}, "committer": {"name": "Matthias Klose", "email": "doko@gcc.gnu.org", "date": "2004-03-19T22:39:10Z"}, "message": "configure.in: Build java for hppa target.\n\n2004-02-10  Randolph Chung  <tausq@debian.org>\n\n        * configure.in: Build java for hppa target.\n        * configure: Regenerate.\n        * libjava/configure.host (hppa-*): Add target.\n        * libjava/sysdeps/pa/lock.h: New file.\n\nFrom-SVN: r79703", "tree": {"sha": "6086f833ba3a28243d14144c4fd745c90ce44538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6086f833ba3a28243d14144c4fd745c90ce44538"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f94b08878f56cb78ce5c1431e9f891d14ecef7e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f94b08878f56cb78ce5c1431e9f891d14ecef7e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f94b08878f56cb78ce5c1431e9f891d14ecef7e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f94b08878f56cb78ce5c1431e9f891d14ecef7e0/comments", "author": null, "committer": null, "parents": [{"sha": "d65a810fe451b24db35f4a48f2f7eecb5b2402bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d65a810fe451b24db35f4a48f2f7eecb5b2402bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d65a810fe451b24db35f4a48f2f7eecb5b2402bd"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "7bf33ffea075df6e147f27afeebdc5bca815cc22", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f94b08878f56cb78ce5c1431e9f891d14ecef7e0/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f94b08878f56cb78ce5c1431e9f891d14ecef7e0/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f94b08878f56cb78ce5c1431e9f891d14ecef7e0", "patch": "@@ -1,3 +1,10 @@\n+2004-02-10  Randolph Chung  <tausq@debian.org>\n+ \n+\t* configure.in: Build java for hppa target.\n+\t* configure: Regenerate.\n+\t* libjava/configure.host (hppa-*): Add target.\n+\t* libjava/sysdeps/pa/lock.h: New file.\n+\n 2004-03-19  Mark Wielaard  <mark@klomp.org>\n \n \tReported by Stephen Crawley"}, {"sha": "c021d13abedb6d00a14d95af224b8abd0782400d", "filename": "libjava/configure.host", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f94b08878f56cb78ce5c1431e9f891d14ecef7e0/libjava%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f94b08878f56cb78ce5c1431e9f891d14ecef7e0/libjava%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.host?ref=f94b08878f56cb78ce5c1431e9f891d14ecef7e0", "patch": "@@ -115,6 +115,11 @@ case \"${host}\" in\n \tenable_hash_synchronization_default=yes\n \tIEEESPEC=-mieee\n \t;;\n+  hppa-*)\n+\tsysdeps_dir=pa\n+\tlibgcj_interpreter=yes\n+\tenable_hash_synchronization_default=yes\n+\t;;\n   powerpc64*-*)\n \tsysdeps_dir=powerpc\n \tlibgcj_interpreter=yes"}, {"sha": "3f24afc5669bec2a105ffea78eae344073d1e3c4", "filename": "libjava/sysdep/pa/locks.h", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f94b08878f56cb78ce5c1431e9f891d14ecef7e0/libjava%2Fsysdep%2Fpa%2Flocks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f94b08878f56cb78ce5c1431e9f891d14ecef7e0/libjava%2Fsysdep%2Fpa%2Flocks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Fpa%2Flocks.h?ref=f94b08878f56cb78ce5c1431e9f891d14ecef7e0", "patch": "@@ -0,0 +1,78 @@\n+// locks.h - Thread synchronization primitives. PARISC implementation.\n+\n+/* Copyright (C) 2002  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#ifndef __SYSDEP_LOCKS_H__\n+#define __SYSDEP_LOCKS_H__\n+\n+typedef size_t obj_addr_t;\t/* Integer type big enough for object\t*/\n+\t\t\t\t/* address.\t\t\t\t*/\n+\n+// Atomically replace *addr by new_val if it was initially equal to old.\n+// Return true if the comparison succeeded.\n+// Assumed to have acquire semantics, i.e. later memory operations\n+// cannot execute before the compare_and_swap finishes.\n+inline static bool\n+compare_and_swap(volatile obj_addr_t *addr,\n+\t \t obj_addr_t old,\n+\t\t obj_addr_t new_val) \n+{\n+  /* FIXME: not atomic */\n+  obj_addr_t prev;\n+\n+  if ((prev = *addr) == old)\n+    {\n+      *addr = new_val;\n+      return true;\n+    }\n+  else\n+    {\n+      return false;\n+    }\n+}\n+\n+// Set *addr to new_val with release semantics, i.e. making sure\n+// that prior loads and stores complete before this\n+// assignment.\n+inline static void\n+release_set(volatile obj_addr_t *addr, obj_addr_t new_val)\n+{\n+  __asm__ __volatile__(\" \" : : : \"memory\");\n+  *(addr) = new_val;\n+}\n+\n+// Compare_and_swap with release semantics instead of acquire semantics.\n+// On many architecture, the operation makes both guarantees, so the\n+// implementation can be the same.\n+inline static bool\n+compare_and_swap_release(volatile obj_addr_t *addr,\n+\t \t\t\t\t             obj_addr_t old,\n+\t\t\t\t\t\t     obj_addr_t new_val) \n+{\n+  return compare_and_swap(addr, old, new_val);\n+}\n+\n+// Ensure that subsequent instructions do not execute on stale\n+// data that was loaded from memory before the barrier.\n+inline static void\n+read_barrier()\n+{\n+  __asm__ __volatile__(\" \" : : : \"memory\");\n+}\n+\n+// Ensure that prior stores to memory are completed with respect to other\n+// processors.\n+inline static void\n+write_barrier()\n+{\n+  __asm__ __volatile__(\" \" : : : \"memory\");\n+}\n+\n+#endif\n+"}]}