{"sha": "fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFjMGY3MjI0ZDRmYmI0NDE0OTZjOGVhMTdjNWI0MTNiOGNiZTgzYw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-09-16T12:04:29Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-09-16T12:04:29Z"}, "message": "target.def (target_option.optimization): New hook.\n\n\t* target.def (target_option.optimization): New hook.\n\t* doc/tm.texi.in (OPTIMIZATION_OPTIONS): Change to\n\tTARGET_OPTION_OPTIMIZATION hook.\n\t* doc/tm.texi: Regenerate.\n\t* hooks.c (hook_void_int_int): New.\n\t* hooks.h (hook_void_int_int): Declare.\n\t* opts.c: Don't include tm_p.h.\n\t(decode_options): Use targetm.target_option.optimization instead\n\tof OPTIMIZATION_OPTIONS.\n\t* system.h (OPTIMIZATION_OPTIONS): Poison.\n\t* config/arm/arm-protos.h (arm_optimization_options): Remove.\n\t* config/arm/arm.c (TARGET_OPTION_OPTIMIZATION): Define.\n\t(arm_optimization_options): Rename to arm_option_optimization.\n\tMake static.\n\t* config/arm/arm.h (OPTIMIZATION_OPTIONS): Remove.\n\t* config/cris/cris.c (TARGET_OPTION_OPTIMIZATION): Define.\n\t(cris_option_optimization): New.\n\t* config/cris/cris.h (OPTIMIZATION_OPTIONS): Remove.\n\t* config/crx/crx.c (TARGET_OPTION_OPTIMIZATION): Define.\n\t(crx_option_optimization): New.\n\t* config/crx/crx.h (OPTIMIZATION_OPTIONS): Remove.\n\t* config/frv/frv-protos.h (frv_optimization_options): Remove.\n\t* config/frv/frv.c (TARGET_OPTION_OPTIMIZATION): Define.\n\t(frv_optimization_options): Rename to frv_option_optimization.\n\tMake static.\n\t* config/frv/frv.h (OPTIMIZATION_OPTIONS): Remove.\n\t* config/h8300/h8300.c (h8300_option_optimization): New.\n\t(TARGET_OPTION_OPTIMIZATION): Define.\n\t* config/h8300/h8300.h (OPTIMIZATION_OPTIONS): Remove.\n\t* config/i386/i386-protos.h (optimization_options): Remove.\n\t* config/i386/i386.c (optimization_options): Rename to\n\tix86_option_optimization.  Make static.\n\t(TARGET_OPTION_OPTIMIZATION): Define.\n\t* config/i386/i386.h (OPTIMIZATION_OPTIONS): Remove.\n\t* config/ia64/ia64-protos.h (ia64_optimization_options): Remove.\n\t* config/ia64/ia64.c (TARGET_OPTION_OPTIMIZATION): Define.\n\t(ia64_optimization_options): Rename to ia64_option_optimization.\n\tMake static.  Call SUBTARGET_OPTIMIZATION_OPTIONS.\n\t* config/ia64/ia64.h (OPTIMIZATION_OPTIONS): Remove.  Remove\n\tcommented-out definition.\n\t* config/ia64/vms.h (SUBTARGET_OPTIMIZATION_OPTIONS): Define\n\tinstead of OPTIMIZATION_OPTIONS.\n\t* config/m32r/m32r.c (TARGET_OPTION_OPTIMIZATION): Define.\n\t(m32r_option_optimization): New.\n\t* config/m32r/m32r.h (OPTIMIZATION_OPTIONS): Remove.\n\t* config/m68hc11/m68hc11-protos.h (m68hc11_optimization_options):\n\tRemove.\n\t* config/mcore/mcore.c (TARGET_OPTION_OPTIMIZATION): Define.\n\t(mcore_option_optimization): New.\n\t* config/mcore/mcore.h (OPTIMIZATION_OPTIONS): Remove.\n\t* config/mep/mep-protos.h (mep_optimization_options): Remove.\n\t* config/mep/mep.c (TARGET_OPTION_OPTIMIZATION): Define.\n\t(mep_optimization_options): Rename to mep_option_optimization.\n\tMake static.  Take unused level and size parameters.\n\t* config/mep/mep.h (OPTIMIZATION_OPTIONS): Remove.\n\t* config/mmix/mmix.c (TARGET_OPTION_OPTIMIZATION): Define.\n\t(mmix_option_optimization): New.\n\t* config/mmix/mmix.h (OPTIMIZATION_OPTIONS): Remove.\n\t* config/pdp11/pdp11.c (TARGET_OPTION_OPTIMIZATION): Define.\n\t(pdp11_option_optimization): New.\n\t* config/pdp11/pdp11.h (OPTIMIZATION_OPTIONS): Remove.\n\t* config/rs6000/rs6000-protos.h (optimization_options): Remove.\n\t* config/rs6000/rs6000.c (TARGET_OPTION_OPTIMIZATION): Define.\n\t(optimization_options): Rename to rs6000_option_optimization.\n\tMake static.\n\t* config/rs6000/rs6000.h (OPTIMIZATION_OPTIONS): Remove.\n\t* config/rx/rx-protos.h (rx_set_optimization_options): Remove.\n\t* config/rx/rx.c (rx_set_optimization_options): Rename to\n\trx_option_optimization.  Make static.  Take unused level and size\n\tparameters.\n\t(TARGET_OPTION_OPTIMIZATION): Define.\n\t* config/rx/rx.h (OPTIMIZATION_OPTIONS): Remove.\n\t* config/s390/s390-protos.h (optimization_options): Remove.\n\t* config/s390/s390.c (optimization_options): Rename to\n\ts390_option_optimization.  Make static.  Don't mark size parameter\n\tunused.\n\t(TARGET_OPTION_OPTIMIZATION): Define.\n\t* config/s390/s390.h (OPTIMIZATION_OPTIONS): Remove.\n\t* config/sh/sh-protos.h (sh_optimization_options): Remove.\n\t* config/sh/sh.c (TARGET_OPTION_OPTIMIZATION): Define.\n\t(sh_optimization_options): Rename to sh_option_optimization.  Make\n\tstatic.  Don't mark parameters unused.\n\t* config/sh/sh.h (OPTIMIZATION_OPTIONS): Remove.\n\t* config/spu/spu-protos.h (spu_optimization_options): Remove.\n\t* config/spu/spu.c (TARGET_OPTION_OPTIMIZATION): Define.\n\t(spu_optimization_options): Rename to spu_option_optimization.\n\tMake static.\n\t* config/spu/spu.h (OPTIMIZATION_OPTIONS): Remove.\n\t* config/v850/v850.c (TARGET_OPTION_OPTIMIZATION): Define.\n\t(v850_option_optimization): New.\n\t* config/v850/v850.h (OPTIMIZATION_OPTIONS): Remove.\n\t* config/xtensa/xtensa.c (TARGET_OPTION_OPTIMIZATION): Define.\n\t(xtensa_option_optimization): New.\n\t* config/xtensa/xtensa.h (OPTIMIZATION_OPTIONS): Remove.\n\nFrom-SVN: r164335", "tree": {"sha": "2d5286583d5ebde7118db3f77239f739154c9d7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d5286583d5ebde7118db3f77239f739154c9d7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5387660230bce1ec6e40d47e243ff04059e4d77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5387660230bce1ec6e40d47e243ff04059e4d77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5387660230bce1ec6e40d47e243ff04059e4d77"}], "stats": {"total": 632, "additions": 351, "deletions": 281}, "files": [{"sha": "1f4770cf555261c4527c88dd39a7298e88832631", "filename": "gcc/ChangeLog", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -1,3 +1,100 @@\n+2010-09-16  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* target.def (target_option.optimization): New hook.\n+\t* doc/tm.texi.in (OPTIMIZATION_OPTIONS): Change to\n+\tTARGET_OPTION_OPTIMIZATION hook.\n+\t* doc/tm.texi: Regenerate.\n+\t* hooks.c (hook_void_int_int): New.\n+\t* hooks.h (hook_void_int_int): Declare.\n+\t* opts.c: Don't include tm_p.h.\n+\t(decode_options): Use targetm.target_option.optimization instead\n+\tof OPTIMIZATION_OPTIONS.\n+\t* system.h (OPTIMIZATION_OPTIONS): Poison.\n+\t* config/arm/arm-protos.h (arm_optimization_options): Remove.\n+\t* config/arm/arm.c (TARGET_OPTION_OPTIMIZATION): Define.\n+\t(arm_optimization_options): Rename to arm_option_optimization.\n+\tMake static.\n+\t* config/arm/arm.h (OPTIMIZATION_OPTIONS): Remove.\n+\t* config/cris/cris.c (TARGET_OPTION_OPTIMIZATION): Define.\n+\t(cris_option_optimization): New.\n+\t* config/cris/cris.h (OPTIMIZATION_OPTIONS): Remove.\n+\t* config/crx/crx.c (TARGET_OPTION_OPTIMIZATION): Define.\n+\t(crx_option_optimization): New.\n+\t* config/crx/crx.h (OPTIMIZATION_OPTIONS): Remove.\n+\t* config/frv/frv-protos.h (frv_optimization_options): Remove.\n+\t* config/frv/frv.c (TARGET_OPTION_OPTIMIZATION): Define.\n+\t(frv_optimization_options): Rename to frv_option_optimization.\n+\tMake static.\n+\t* config/frv/frv.h (OPTIMIZATION_OPTIONS): Remove.\n+\t* config/h8300/h8300.c (h8300_option_optimization): New.\n+\t(TARGET_OPTION_OPTIMIZATION): Define.\n+\t* config/h8300/h8300.h (OPTIMIZATION_OPTIONS): Remove.\n+\t* config/i386/i386-protos.h (optimization_options): Remove.\n+\t* config/i386/i386.c (optimization_options): Rename to\n+\tix86_option_optimization.  Make static.\n+\t(TARGET_OPTION_OPTIMIZATION): Define.\n+\t* config/i386/i386.h (OPTIMIZATION_OPTIONS): Remove.\n+\t* config/ia64/ia64-protos.h (ia64_optimization_options): Remove.\n+\t* config/ia64/ia64.c (TARGET_OPTION_OPTIMIZATION): Define.\n+\t(ia64_optimization_options): Rename to ia64_option_optimization.\n+\tMake static.  Call SUBTARGET_OPTIMIZATION_OPTIONS.\n+\t* config/ia64/ia64.h (OPTIMIZATION_OPTIONS): Remove.  Remove\n+\tcommented-out definition.\n+\t* config/ia64/vms.h (SUBTARGET_OPTIMIZATION_OPTIONS): Define\n+\tinstead of OPTIMIZATION_OPTIONS.\n+\t* config/m32r/m32r.c (TARGET_OPTION_OPTIMIZATION): Define.\n+\t(m32r_option_optimization): New.\n+\t* config/m32r/m32r.h (OPTIMIZATION_OPTIONS): Remove.\n+\t* config/m68hc11/m68hc11-protos.h (m68hc11_optimization_options):\n+\tRemove.\n+\t* config/mcore/mcore.c (TARGET_OPTION_OPTIMIZATION): Define.\n+\t(mcore_option_optimization): New.\n+\t* config/mcore/mcore.h (OPTIMIZATION_OPTIONS): Remove.\n+\t* config/mep/mep-protos.h (mep_optimization_options): Remove.\n+\t* config/mep/mep.c (TARGET_OPTION_OPTIMIZATION): Define.\n+\t(mep_optimization_options): Rename to mep_option_optimization.\n+\tMake static.  Take unused level and size parameters.\n+\t* config/mep/mep.h (OPTIMIZATION_OPTIONS): Remove.\n+\t* config/mmix/mmix.c (TARGET_OPTION_OPTIMIZATION): Define.\n+\t(mmix_option_optimization): New.\n+\t* config/mmix/mmix.h (OPTIMIZATION_OPTIONS): Remove.\n+\t* config/pdp11/pdp11.c (TARGET_OPTION_OPTIMIZATION): Define.\n+\t(pdp11_option_optimization): New.\n+\t* config/pdp11/pdp11.h (OPTIMIZATION_OPTIONS): Remove.\n+\t* config/rs6000/rs6000-protos.h (optimization_options): Remove.\n+\t* config/rs6000/rs6000.c (TARGET_OPTION_OPTIMIZATION): Define.\n+\t(optimization_options): Rename to rs6000_option_optimization.\n+\tMake static.\n+\t* config/rs6000/rs6000.h (OPTIMIZATION_OPTIONS): Remove.\n+\t* config/rx/rx-protos.h (rx_set_optimization_options): Remove.\n+\t* config/rx/rx.c (rx_set_optimization_options): Rename to\n+\trx_option_optimization.  Make static.  Take unused level and size\n+\tparameters.\n+\t(TARGET_OPTION_OPTIMIZATION): Define.\n+\t* config/rx/rx.h (OPTIMIZATION_OPTIONS): Remove.\n+\t* config/s390/s390-protos.h (optimization_options): Remove.\n+\t* config/s390/s390.c (optimization_options): Rename to\n+\ts390_option_optimization.  Make static.  Don't mark size parameter\n+\tunused.\n+\t(TARGET_OPTION_OPTIMIZATION): Define.\n+\t* config/s390/s390.h (OPTIMIZATION_OPTIONS): Remove.\n+\t* config/sh/sh-protos.h (sh_optimization_options): Remove.\n+\t* config/sh/sh.c (TARGET_OPTION_OPTIMIZATION): Define.\n+\t(sh_optimization_options): Rename to sh_option_optimization.  Make\n+\tstatic.  Don't mark parameters unused.\n+\t* config/sh/sh.h (OPTIMIZATION_OPTIONS): Remove.\n+\t* config/spu/spu-protos.h (spu_optimization_options): Remove.\n+\t* config/spu/spu.c (TARGET_OPTION_OPTIMIZATION): Define.\n+\t(spu_optimization_options): Rename to spu_option_optimization.\n+\tMake static.\n+\t* config/spu/spu.h (OPTIMIZATION_OPTIONS): Remove.\n+\t* config/v850/v850.c (TARGET_OPTION_OPTIMIZATION): Define.\n+\t(v850_option_optimization): New.\n+\t* config/v850/v850.h (OPTIMIZATION_OPTIONS): Remove.\n+\t* config/xtensa/xtensa.c (TARGET_OPTION_OPTIMIZATION): Define.\n+\t(xtensa_option_optimization): New.\n+\t* config/xtensa/xtensa.h (OPTIMIZATION_OPTIONS): Remove.\n+\n 2010-09-16  Joseph Myers  <joseph@codesourcery.com>\n \n \t* doc/tm.texi.in (OVERRIDE_OPTIONS): Remove documentation."}, {"sha": "59e1c5024ec10ef861715a45f1ebfe29c26b8dc7", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -23,7 +23,6 @@\n #ifndef GCC_ARM_PROTOS_H\n #define GCC_ARM_PROTOS_H\n \n-extern void arm_optimization_options (int, int);\n extern int use_return_insn (int, rtx);\n extern enum reg_class arm_regno_class (int);\n extern void arm_load_pic_register (unsigned long);"}, {"sha": "206e06cac5205c88abfb7ec0780db31d1ff2a510", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -216,6 +216,7 @@ static tree arm_build_builtin_va_list (void);\n static void arm_expand_builtin_va_start (tree, rtx);\n static tree arm_gimplify_va_arg_expr (tree, tree, gimple_seq *, gimple_seq *);\n static void arm_option_override (void);\n+static void arm_option_optimization (int, int);\n static bool arm_handle_option (size_t, const char *, int);\n static void arm_target_help (void);\n static unsigned HOST_WIDE_INT arm_shift_truncation_mask (enum machine_mode);\n@@ -321,6 +322,8 @@ static const struct attribute_spec arm_attribute_table[] =\n #define TARGET_HELP arm_target_help\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE arm_option_override\n+#undef  TARGET_OPTION_OPTIMIZATION\n+#define TARGET_OPTION_OPTIMIZATION arm_option_optimization\n \n #undef  TARGET_COMP_TYPE_ATTRIBUTES\n #define TARGET_COMP_TYPE_ATTRIBUTES arm_comp_type_attributes\n@@ -22627,8 +22630,8 @@ arm_order_regs_for_local_alloc (void)\n }\n \n /* Set default optimization options.  */\n-void\n-arm_optimization_options (int level, int size ATTRIBUTE_UNUSED)\n+static void\n+arm_option_optimization (int level, int size ATTRIBUTE_UNUSED)\n {\n   /* Enable section anchors by default at -O1 or higher.\n      Use 2 to distinguish from an explicit -fsection-anchors"}, {"sha": "8727305a6e21ff6c511df612918efb711a4c67fb", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -498,9 +498,6 @@ extern int arm_arch_hwdiv;\n    that is controlled by the APCS-FRAME option.  */\n #define CAN_DEBUG_WITHOUT_FP\n \n-#define OPTIMIZATION_OPTIONS(LEVEL,SIZE)\t\t\\\n-\tarm_optimization_options ((LEVEL), (SIZE))\n-\n /* Nonzero if PIC code requires explicit qualifiers to generate\n    PLT and GOT relocs rather than the assembler doing so implicitly.\n    Subtargets can override these if required.  */"}, {"sha": "52367c2c71d0aee1177623f1047bc77ad955f9af", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -130,6 +130,7 @@ static int cris_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n static tree cris_md_asm_clobbers (tree, tree, tree);\n \n static bool cris_handle_option (size_t, const char *, int);\n+static void cris_option_optimization (int, int);\n static void cris_option_override (void);\n \n static bool cris_frame_pointer_required (void);\n@@ -211,6 +212,8 @@ int cris_cpu_version = CRIS_DEFAULT_CPU_VERSION;\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE cris_option_override\n+#undef TARGET_OPTION_OPTIMIZATION\n+#define TARGET_OPTION_OPTIMIZATION cris_option_optimization\n \n #undef TARGET_ASM_TRAMPOLINE_TEMPLATE\n #define TARGET_ASM_TRAMPOLINE_TEMPLATE cris_asm_trampoline_template\n@@ -2396,6 +2399,15 @@ cris_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED,\n   return true;\n }\n \n+/* Implement TARGET_OPTION_OPTIMIZATION.  */\n+\n+static void\n+cris_option_optimization (int level, int size)\n+{\n+  if (level >= 2 || size)\n+    flag_omit_frame_pointer = 1;\n+}\n+\n /* The TARGET_OPTION_OVERRIDE worker.\n    As is the norm, this also parses -mfoo=bar type parameters.  */\n "}, {"sha": "d302c9f55406e87d3a105862f7d59e00acea0847", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -328,15 +328,6 @@ extern int target_flags;\n \n #define CRIS_SUBTARGET_HANDLE_OPTION(x, y, z)\n \n-#define OPTIMIZATION_OPTIONS(OPTIMIZE, SIZE)\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      if ((OPTIMIZE) >= 2 || (SIZE))\t\t\\\n-\tflag_omit_frame_pointer = 1;\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n-\n /* Node: Storage Layout */\n \n #define BITS_BIG_ENDIAN 0"}, {"sha": "8ae552fe5db8259869d33eb6f6ceced231776aaf", "filename": "gcc/config/crx/crx.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fcrx%2Fcrx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fcrx%2Fcrx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -1,6 +1,6 @@\n /* Output routines for GCC for CRX.\n    Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n-   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -130,6 +130,7 @@ static bool crx_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_U\n static int crx_address_cost (rtx, bool);\n static bool crx_legitimate_address_p (enum machine_mode, rtx, bool);\n static bool crx_can_eliminate (const int, const int);\n+static void crx_option_optimization (int, int);\n \n /*****************************************************************************/\n /* RTL VALIDITY\t\t\t\t\t\t\t\t     */\n@@ -174,6 +175,10 @@ static const struct attribute_spec crx_attribute_table[] = {\n   {NULL, 0, 0, false, false, false, NULL}\n };\n \n+/* Option handling.  */\n+\n+#undef\tTARGET_OPTION_OPTIMIZATION\n+#define\tTARGET_OPTION_OPTIMIZATION\tcrx_option_optimization\n \n /* Initialize 'targetm' variable which contains pointers to functions and data\n  * relating to the target machine.  */\n@@ -1442,3 +1447,13 @@ crx_expand_epilogue (void)\n   else\n     emit_jump_insn (gen_pop_and_popret_return (GEN_INT (sum_regs)));\n }\n+\n+/* Implement TARGET_OPTION_OPTIMIZATION.  */\n+static void\n+crx_option_optimization (int level, int size)\n+{\n+  /* Put each function in its own section so that PAGE-instruction\n+     relaxation can do its best.  */\n+  if (level || size)\n+    flag_function_sections = 1;\n+}"}, {"sha": "d4bf2743bf3c458f099725f5e58f0a08d40bb1d6", "filename": "gcc/config/crx/crx.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fcrx%2Fcrx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fcrx%2Fcrx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for CRX.\n    Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -54,14 +54,6 @@ do {\t\t\t\t\t\t\t\t\\\n \n #define TARGET_VERSION fputs (\" (CRX/ELF)\", stderr);\n \n-/* Put each function in its own section so that PAGE-instruction\n- * relaxation can do its best.  */\n-#define OPTIMIZATION_OPTIONS(LEVEL, SIZEFLAG)\t\\\n-    do {\t\t\t\t\t\\\n-\tif ((LEVEL) || (SIZEFLAG))\t\t\\\n-\t    flag_function_sections = 1;\t\\\n-    } while (0)\n-\n /* Show we can debug even without a frame pointer.  */\n #define CAN_DEBUG_WITHOUT_FP\n "}, {"sha": "68c2a576a63b3b612ec740f20cbc4b922ea16162", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -38,7 +38,6 @@ extern frv_cpu_t frv_cpu_type;\t\t\t/* value of -mcpu= */\n /* Define functions defined in frv.c */\n extern void frv_expand_prologue\t\t\t(void);\n extern void frv_expand_epilogue\t\t\t(bool);\n-extern void frv_optimization_options\t\t(int, int);\n extern void frv_conditional_register_usage\t(void);\n extern frv_stack_t *frv_stack_info\t\t(void);\n extern void frv_debug_stack\t\t\t(frv_stack_t *);"}, {"sha": "0730e32d9a4686fa557f45f21f109f813449ac70", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -265,6 +265,7 @@ frv_cpu_t frv_cpu_type = CPU_TYPE;\t/* value of -mcpu= */\n \n static bool frv_handle_option\t\t\t(size_t, const char *, int);\n static void frv_option_override\t\t\t(void);\n+static void frv_option_optimization\t\t(int, int);\n static bool frv_legitimate_address_p\t\t(enum machine_mode, rtx, bool);\n static int frv_default_flags_for_cpu\t\t(void);\n static int frv_string_begins_with\t\t(const_tree, const char *);\n@@ -431,6 +432,8 @@ static bool frv_class_likely_spilled_p \t\t(reg_class_t);\n #define TARGET_HANDLE_OPTION frv_handle_option\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE frv_option_override\n+#undef TARGET_OPTION_OPTIMIZATION\n+#define TARGET_OPTION_OPTIMIZATION frv_option_optimization\n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS frv_init_builtins\n #undef TARGET_EXPAND_BUILTIN\n@@ -850,29 +853,12 @@ frv_option_override (void)\n }\n \n \f\n-/* Some machines may desire to change what optimizations are performed for\n-   various optimization levels.  This macro, if defined, is executed once just\n-   after the optimization level is determined and before the remainder of the\n-   command options have been parsed.  Values set in this macro are used as the\n-   default values for the other command line options.\n+/* Implement TARGET_OPTION_OPTIMIZATION.\n \n-   LEVEL is the optimization level specified; 2 if `-O2' is specified, 1 if\n-   `-O' is specified, and 0 if neither is specified.\n-\n-   SIZE is nonzero if `-Os' is specified, 0 otherwise.\n-\n-   You should not use this macro to change options that are not\n-   machine-specific.  These should uniformly selected by the same optimization\n-   level on all supported machines.  Use this macro to enable machine-specific\n-   optimizations.\n-\n-   *Do not examine `write_symbols' in this macro!* The debugging options are\n-   *not supposed to alter the generated code.  */\n-\n-/* On the FRV, possibly disable VLIW packing which is done by the 2nd\n+   On the FRV, possibly disable VLIW packing which is done by the 2nd\n    scheduling pass at the current time.  */\n-void\n-frv_optimization_options (int level, int size ATTRIBUTE_UNUSED)\n+static void\n+frv_option_optimization (int level, int size ATTRIBUTE_UNUSED)\n {\n   if (level >= 2)\n     {"}, {"sha": "463f6ad1ecc75be418754d48c95b7a30d770b82c", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -328,27 +328,6 @@\n         #endif  */\n #define TARGET_VERSION fprintf (stderr, _(\" (frv)\"))\n \n-/* Some machines may desire to change what optimizations are performed for\n-   various optimization levels.  This macro, if defined, is executed once just\n-   after the optimization level is determined and before the remainder of the\n-   command options have been parsed.  Values set in this macro are used as the\n-   default values for the other command line options.\n-\n-   LEVEL is the optimization level specified; 2 if `-O2' is specified, 1 if\n-   `-O' is specified, and 0 if neither is specified.\n-\n-   SIZE is nonzero if `-Os' is specified, 0 otherwise.\n-\n-   You should not use this macro to change options that are not\n-   machine-specific.  These should uniformly selected by the same optimization\n-   level on all supported machines.  Use this macro to enable machine-specific\n-   optimizations.\n-\n-   *Do not examine `write_symbols' in this macro!* The debugging options are\n-   *not supposed to alter the generated code.  */\n-#define OPTIMIZATION_OPTIONS(LEVEL,SIZE) frv_optimization_options (LEVEL, SIZE)\n-\n-\n /* Define this macro if debugging can be performed even without a frame\n    pointer.  If this macro is defined, GCC will turn on the\n    `-fomit-frame-pointer' option whenever `-O' is specified.  */"}, {"sha": "551e354b849d1738fa34551c4f87881bcd75e21c", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -303,6 +303,18 @@ enum h8_cpu\n   H8_S\n };\n \n+/* Implement TARGET_OPTION_OPTIMIZATION.  */\n+\n+static void\n+h8300_option_optimization (int level ATTRIBUTE_UNUSED,\n+\t\t\t   int size ATTRIBUTE_UNUSED)\n+{\n+  /* Basic block reordering is only beneficial on targets with cache\n+     and/or variable-cycle branches where (cycle count taken != cycle\n+     count not taken).  */\n+  flag_reorder_blocks = 0;\n+}\n+\n /* Initialize various cpu specific globals at start up.  */\n \n static void\n@@ -5925,4 +5937,7 @@ h8300_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE h8300_option_override\n \n+#undef TARGET_OPTION_OPTIMIZATION\n+#define TARGET_OPTION_OPTIMIZATION h8300_option_optimization\n+\n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "7d7437f0f2db2bc52ec91d986d4d1ace1e6c739d", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -82,16 +82,6 @@ extern const char * const *h8_reg_names;\n \n #define LIB_SPEC \"%{mrelax:-relax} %{g:-lg} %{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}\"\n \n-#define OPTIMIZATION_OPTIONS(LEVEL, SIZE)\t\t\t\t \\\n-  do\t\t\t\t\t\t\t\t\t \\\n-    {\t\t\t\t\t\t\t\t\t \\\n-      /* Basic block reordering is only beneficial on targets with cache \\\n-\t and/or variable-cycle branches where (cycle count taken !=\t \\\n-\t cycle count not taken).  */\t\t\t\t\t \\\n-      flag_reorder_blocks = 0;\t\t\t\t\t\t \\\n-    }\t\t\t\t\t\t\t\t\t \\\n-  while (0)\n-\n /* Print subsidiary information on the compiler version in use.  */\n \n #define TARGET_VERSION fprintf (stderr, \" (Renesas H8/300)\");"}, {"sha": "6f1d6f272cd9594bfd4350b8fe3f03b509ee10e4", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -20,7 +20,6 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n /* Functions in i386.c */\n-extern void optimization_options (int, int);\n extern void ix86_conditional_register_usage (void);\n \n extern bool ix86_target_stack_probe (void);"}, {"sha": "61c73c0de7bd5ab2b4cf1b968ae3970f00076285", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -4516,8 +4516,8 @@ x86_output_aligned_bss (FILE *file, tree decl ATTRIBUTE_UNUSED,\n   ASM_OUTPUT_SKIP (file, size ? size : 1);\n }\n \f\n-void\n-optimization_options (int level, int size ATTRIBUTE_UNUSED)\n+static void\n+ix86_option_optimization (int level, int size ATTRIBUTE_UNUSED)\n {\n   /* For -O2 and beyond, turn off -fschedule-insns by default.  It tends to\n      make the problem with not enough registers even worse.  */\n@@ -32504,6 +32504,8 @@ ix86_units_per_simd_word (enum machine_mode mode)\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE ix86_option_override\n+#undef TARGET_OPTION_OPTIMIZATION\n+#define TARGET_OPTION_OPTIMIZATION ix86_option_optimization\n \n #undef TARGET_REGISTER_MOVE_COST\n #define TARGET_REGISTER_MOVE_COST ix86_register_move_cost"}, {"sha": "22dd02b0bb86219d74d4164f582422f4452046cd", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -506,10 +506,6 @@ extern enum calling_abi ix86_abi;\n    with the rounding mode forced to 53 bits.  */\n #define TARGET_96_ROUND_53_LONG_DOUBLE 0\n \n-/* Define this to change the optimizations performed by default.  */\n-#define OPTIMIZATION_OPTIONS(LEVEL, SIZE) \\\n-  optimization_options ((LEVEL), (SIZE))\n-\n /* -march=native handling only makes sense with compiler running on\n    an x86 or x86_64 chip.  If changing this condition, also change\n    the condition in driver-i386.c.  */"}, {"sha": "8a3ff4b8b08c9183836c60d4397a09350346f883", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -99,7 +99,6 @@ extern void ia64_hpux_handle_builtin_pragma (struct cpp_reader *);\n extern void ia64_output_function_profiler (FILE *, int);\n extern void ia64_profile_hook (int);\n \n-extern void ia64_optimization_options (int, int);\n extern void ia64_init_expanders (void);\n \n extern rtx ia64_dconst_0_5 (void);"}, {"sha": "d02d2b8fc3f41033f861ca96554bc1a7f33878c1", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -202,6 +202,7 @@ static rtx gen_fr_spill_x (rtx, rtx, rtx);\n static rtx gen_fr_restore_x (rtx, rtx, rtx);\n \n static void ia64_option_override (void);\n+static void ia64_option_optimization (int, int);\n static bool ia64_can_eliminate (const int, const int);\n static enum machine_mode hfa_element_mode (const_tree, bool);\n static void ia64_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n@@ -361,6 +362,8 @@ static const struct attribute_spec ia64_attribute_table[] =\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE ia64_option_override\n+#undef TARGET_OPTION_OPTIMIZATION\n+#define TARGET_OPTION_OPTIMIZATION ia64_option_optimization\n \n #undef TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE ia64_output_function_prologue\n@@ -10719,10 +10722,14 @@ ia64_invalid_binary_op (int op ATTRIBUTE_UNUSED, const_tree type1, const_tree ty\n }\n \n /* Implement overriding of the optimization options.  */\n-void\n-ia64_optimization_options (int level ATTRIBUTE_UNUSED,\n-                           int size ATTRIBUTE_UNUSED)\n+static void\n+ia64_option_optimization (int level ATTRIBUTE_UNUSED,\n+\t\t\t  int size ATTRIBUTE_UNUSED)\n {\n+#ifdef SUBTARGET_OPTIMIZATION_OPTIONS\n+  SUBTARGET_OPTIMIZATION_OPTIONS;\n+#endif\n+\n   /* Let the scheduler form additional regions.  */\n   set_param_value (\"max-sched-extend-regions-iters\", 2);\n "}, {"sha": "dbb5ebd434b157a86c40e6b3e8a78b828ed102b3", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -118,14 +118,6 @@ enum processor_type\n };\n \n extern enum processor_type ia64_tune;\n-\n-/* Some machines may desire to change what optimizations are performed for\n-   various optimization levels.  This macro, if defined, is executed once just\n-   after the optimization level is determined and before the remainder of the\n-   command options have been parsed.  Values set in this macro are used as the\n-   default values for the other command line options.  */\n-\n-/* #define OPTIMIZATION_OPTIONS(LEVEL,SIZE) */\n \f\n /* Driver configuration */\n \n@@ -1897,8 +1889,4 @@ struct GTY(()) machine_function\n /* Switch on code for querying unit reservations.  */\n #define CPU_UNITS_QUERY 1\n \n-/* Define this to change the optimizations performed by default.  */\n-#define OPTIMIZATION_OPTIONS(LEVEL, SIZE) \\\n-  ia64_optimization_options ((LEVEL), (SIZE))\n-\n /* End of ia64.h */"}, {"sha": "e077e7d14f1c6060b3b25ec1a8e1fb78d7994648", "filename": "gcc/config/ia64/vms.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fia64%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fia64%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvms.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -183,11 +183,10 @@ typedef struct crtl_name_spec\n \t  }                                                                \\\n     } while (0)\n \n-#undef OPTIMIZATION_OPTIONS\n-#define OPTIMIZATION_OPTIONS(LEVEL,SIZE)                   \\\n+#undef SUBTARGET_OPTIMIZATION_OPTIONS\n+#define SUBTARGET_OPTIMIZATION_OPTIONS                     \\\n   do {                                                     \\\n        flag_merge_constants = 0;                           \\\n-       ia64_optimization_options ((LEVEL), (SIZE));        \\\n   } while (0)\n \n /* Define this to be nonzero if static stack checking is supported.  */"}, {"sha": "7b8b8fc3d1339bda76654197cf3c1c2ab6cfd430", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -64,6 +64,7 @@ enum m32r_sdata m32r_sdata = M32R_SDATA_DEFAULT;\n /* Forward declaration.  */\n static bool  m32r_handle_option (size_t, const char *, int);\n static void  m32r_option_override (void);\n+static void  m32r_option_optimization (int, int);\n static void  init_reg_tables (void);\n static void  block_move_call (rtx, rtx, rtx);\n static int   m32r_is_insn (rtx);\n@@ -153,6 +154,8 @@ static const struct attribute_spec m32r_attribute_table[] =\n #define TARGET_HANDLE_OPTION m32r_handle_option\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE m32r_option_override\n+#undef  TARGET_OPTION_OPTIMIZATION\n+#define TARGET_OPTION_OPTIMIZATION m32r_option_optimization\n \n #undef  TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO m32r_encode_section_info\n@@ -280,6 +283,18 @@ m32r_option_override (void)\n   SUBTARGET_OVERRIDE_OPTIONS;\n }\n \n+static void\n+m32r_option_optimization (int level, int size)\n+{\n+  if (level == 1)\n+    flag_regmove = 1;\n+\n+  if (size)\n+    flag_omit_frame_pointer = 1;\n+\n+  SUBTARGET_OPTIMIZATION_OPTIONS;\n+}\n+\n /* Vectors to keep interesting information about registers where it can easily\n    be got.  We use to use the actual mode value as the bit number, but there\n    is (or may be) more than 32 modes now.  Instead we use two tables: one"}, {"sha": "c232a74258caed99534458515e95f096b2dbd2fe", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -310,21 +310,6 @@ extern enum m32r_sdata m32r_sdata;\n #define SUBTARGET_OPTIMIZATION_OPTIONS\n #endif\n \n-#define OPTIMIZATION_OPTIONS(LEVEL, SIZE)\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      if (LEVEL == 1)\t\t\t\t\\\n-\tflag_regmove = TRUE;\t\t\t\\\n-      \t\t\t\t\t\t\\\n-      if (SIZE)\t\t\t\t\t\\\n-\t{\t\t\t\t\t\\\n-\t  flag_omit_frame_pointer = TRUE;\t\\\n-\t}\t\t\t\t\t\\\n-      \t\t\t\t\t\t\\\n-      SUBTARGET_OPTIMIZATION_OPTIONS\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n /* Define this macro if debugging can be performed even without a\n    frame pointer.  If this macro is defined, GCC will turn on the\n    `-fomit-frame-pointer' option whenever `-O' is specified.  */"}, {"sha": "e98c1909baf3f66ed7317f709fa5a1268663f4d0", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -20,7 +20,6 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n \n-extern int m68hc11_optimization_options (int,int);\n extern void m68hc11_conditional_register_usage (void);\n extern int hard_regno_mode_ok (int, enum machine_mode);\n extern int m68hc11_hard_regno_rename_ok (int, int);"}, {"sha": "b81a8b939e58f0f23a7a872440751ab60d5fd6cb", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -150,6 +150,7 @@ static int        mcore_arg_partial_bytes       (CUMULATIVE_ARGS *,\n static void       mcore_asm_trampoline_template (FILE *);\n static void       mcore_trampoline_init\t\t(rtx, tree, rtx);\n static void       mcore_option_override\t\t(void);\n+static void       mcore_option_optimization\t(int, int);\n \f\n /* MCore specific attributes.  */\n \n@@ -228,6 +229,8 @@ static const struct attribute_spec mcore_attribute_table[] =\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE mcore_option_override\n+#undef TARGET_OPTION_OPTIMIZATION\n+#define TARGET_OPTION_OPTIMIZATION mcore_option_optimization\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -2690,6 +2693,34 @@ mcore_option_override (void)\n   if (TARGET_LITTLE_END && ! TARGET_M340)\n     target_flags |= MASK_M340;\n }\n+\n+/* What options are we going to default to specific settings when\n+   -O* happens; the user can subsequently override these settings.\n+  \n+   Omitting the frame pointer is a very good idea on the MCore.\n+   Scheduling isn't worth anything on the current MCore implementation.  */\n+\n+static void\n+mcore_option_optimization (int level, int size)\n+{\n+  if (level)\n+    {\n+      flag_no_function_cse = 1;\n+      flag_omit_frame_pointer = 1;\n+\n+      if (level >= 2)\n+        {\n+          flag_caller_saves = 0;\n+          flag_schedule_insns = 0;\n+          flag_schedule_insns_after_reload = 0;\n+        }\n+    }\n+  if (size)\n+    {\n+      target_flags &= ~MASK_HARDLIT;\n+    }\n+}\n+\n \f\n /* Compute the number of word sized registers needed to \n    hold a function argument of mode MODE and type TYPE.  */"}, {"sha": "5044811761bf0fd686ffbeacfbe789baafeb5263", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -85,31 +85,6 @@ extern char * mcore_current_function_name;\n /* The MCore ABI says that bitfields are unsigned by default.  */\n #define CC1_SPEC \"-funsigned-bitfields\"\n \n-/* What options are we going to default to specific settings when\n-   -O* happens; the user can subsequently override these settings.\n-  \n-   Omitting the frame pointer is a very good idea on the MCore.\n-   Scheduling isn't worth anything on the current MCore implementation.  */\n-#define OPTIMIZATION_OPTIONS(LEVEL,SIZE)\t\\\n-{\t\t\t\t\t\t\\\n-  if (LEVEL)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      flag_no_function_cse = 1;\t\t\t\\\n-      flag_omit_frame_pointer = 1;\t\t\\\n-\t\t\t\t\t\t\\\n-      if (LEVEL >= 2)\t\t\t\t\\\n-        {\t\t\t\t\t\\\n-          flag_caller_saves = 0;\t\t\\\n-          flag_schedule_insns = 0;\t\t\\\n-          flag_schedule_insns_after_reload = 0;\t\\\n-        }\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\\\n-  if (SIZE)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      target_flags &= ~MASK_HARDLIT;\t\t\\\n-    }\t\t\t\t\t\t\\\n-}\n-\n /* Target machine storage Layout.  */\n \n #define PROMOTE_MODE(MODE,UNSIGNEDP,TYPE)  \t\\"}, {"sha": "4ab86b5faab6761a349e5eea4b14ce438f889b20", "filename": "gcc/config/mep/mep-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fmep%2Fmep-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fmep%2Fmep-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep-protos.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -20,7 +20,6 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n extern void mep_conditional_register_usage (void);\n-extern void mep_optimization_options (void);\n extern int mep_regno_reg_class (int);\n extern int mep_reg_class_from_constraint (int, const char *);\n extern bool mep_const_ok_for_letter_p (HOST_WIDE_INT, int);"}, {"sha": "712abbe5f2aa0bd4a0a6b82e67631c658c4ea1d5", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -291,8 +291,8 @@ mep_conditional_register_usage (void)\n     global_regs[i] = 1;\n }\n \n-void\n-mep_optimization_options (void)\n+static void\n+mep_option_optimization (int level ATTRIBUTE_UNUSED, int size ATTRIBUTE_UNUSED)\n {\n   /* The first scheduling pass often increases register pressure and tends\n      to result in more spill code.  Only run it when specifically asked.  */\n@@ -7411,6 +7411,8 @@ mep_asm_init_sections (void)\n #define TARGET_HANDLE_OPTION            mep_handle_option\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE\t\tmep_option_override\n+#undef  TARGET_OPTION_OPTIMIZATION\n+#define TARGET_OPTION_OPTIMIZATION\tmep_option_optimization\n #undef  TARGET_DEFAULT_TARGET_FLAGS\n #define TARGET_DEFAULT_TARGET_FLAGS\tTARGET_DEFAULT\n #undef  TARGET_ALLOCATE_INITIAL_VALUE"}, {"sha": "1bebf3badb7676fc44c9e73f1da52356e5f7a869", "filename": "gcc/config/mep/mep.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fmep%2Fmep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fmep%2Fmep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -163,8 +163,6 @@ extern int target_flags;\n /* end-coproc-selection-table */\n \n #define CAN_DEBUG_WITHOUT_FP\n-\n-#define OPTIMIZATION_OPTIONS(LEVEL, FOR_SIZE) mep_optimization_options ()\n \f\n \n #define BITS_BIG_ENDIAN 0"}, {"sha": "293a2f5bde6ce5b7c6af6d4d997d64c4f489f5dc", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -114,6 +114,7 @@ rtx mmix_compare_op1;\n static int mmix_output_destination_register;\n \n static void mmix_option_override (void);\n+static void mmix_option_optimization (int, int);\n static void mmix_asm_output_source_filename (FILE *, const char *);\n static void mmix_output_shiftvalue_op_from_str\n   (FILE *, const char *, HOST_WIDEST_INT);\n@@ -236,6 +237,8 @@ static void mmix_trampoline_init (rtx, tree, rtx);\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE mmix_option_override\n+#undef TARGET_OPTION_OPTIMIZATION\n+#define TARGET_OPTION_OPTIMIZATION mmix_option_optimization\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -259,6 +262,18 @@ mmix_option_override (void)\n     }\n }\n \n+/* TARGET_OPTION_OPTIMIZATION.  */\n+\n+static void\n+mmix_option_optimization (int level, int size)\n+{\n+  if (level >= 1)\n+    flag_regmove = 1;\n+\n+  if (size || level > 1)\n+    flag_omit_frame_pointer = 1;\n+}\n+\n /* INIT_EXPANDERS.  */\n \n void"}, {"sha": "5908a7542843c8521871e46d77ed642bdbdf90a7", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -149,19 +149,6 @@ extern int target_flags;\n #define TARGET_VERSION \\\n   fprintf (stderr, \" (MMIX)\")\n \n-#define OPTIMIZATION_OPTIONS(LEVEL, SIZE)\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      if (LEVEL >= 1)\t\t\t\t\\\n-\tflag_regmove = TRUE;\t\t\t\\\n-      \t\t\t\t\t\t\\\n-      if (SIZE || LEVEL > 1)\t\t\t\\\n-\t{\t\t\t\t\t\\\n-\t  flag_omit_frame_pointer = TRUE;\t\\\n-\t}\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n /* This one will have to wait a little bit; right now we can't debug\n    neither with or without a frame-pointer.  */\n /* #define CAN_DEBUG_WITHOUT_FP */"}, {"sha": "2812e9509b1fbeb6e21983985bc5d1a333c57bca", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -145,6 +145,7 @@ decode_pdp11_d (const struct real_format *fmt ATTRIBUTE_UNUSED,\n /* rtx cc0_reg_rtx; - no longer needed? */\n \n static bool pdp11_handle_option (size_t, const char *, int);\n+static void pdp11_option_optimization (int, int);\n static rtx find_addr_reg (rtx); \n static const char *singlemove_string (rtx *);\n static bool pdp11_assemble_integer (rtx, unsigned int, int);\n@@ -182,6 +183,8 @@ static void pdp11_trampoline_init (rtx, tree, rtx);\n   (MASK_FPU | MASK_45 | MASK_ABSHI_BUILTIN | TARGET_UNIX_ASM_DEFAULT)\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION pdp11_handle_option\n+#undef TARGET_OPTION_OPTIMIZATION\n+#define TARGET_OPTION_OPTIMIZATION pdp11_option_optimization\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS pdp11_rtx_costs\n@@ -218,6 +221,21 @@ pdp11_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED,\n     }\n }\n \n+/* Implement TARGET_OPTION_OPTIMIZATION.  */\n+\n+static void\n+pdp11_option_optimization (int level, int size ATTRIBUTE_UNUSED)\n+{\n+  flag_finite_math_only = 0;\n+  flag_trapping_math = 0;\n+  flag_signaling_nans = 0;\n+  if (level >= 3)\n+    {\n+      flag_omit_frame_pointer = 1;\n+      /* flag_unroll_loops = 1; */\n+    }\n+}\n+\n /* Nonzero if OP is a valid second operand for an arithmetic insn.  */\n \n int"}, {"sha": "332e99db245a4ce5aff47f520b3458293fd9808d", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -949,28 +949,6 @@ extern struct rtx_def *cc0_reg_rtx;\n #define TRAMPOLINE_SIZE 8\n #define TRAMPOLINE_ALIGNMENT 16\n \n-/* Some machines may desire to change what optimizations are\n-   performed for various optimization levels.   This macro, if\n-   defined, is executed once just after the optimization level is\n-   determined and before the remainder of the command options have\n-   been parsed.  Values set in this macro are used as the default\n-   values for the other command line options.\n-\n-   LEVEL is the optimization level specified; 2 if -O2 is\n-   specified, 1 if -O is specified, and 0 if neither is specified.  */\n-\n-#define OPTIMIZATION_OPTIONS(LEVEL,SIZE)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  flag_finite_math_only\t\t= 0;\t\t\t\t\t\\\n-  flag_trapping_math\t\t= 0;\t\t\t\t\t\\\n-  flag_signaling_nans\t\t= 0;\t\t\t\t\t\\\n-  if (LEVEL >= 3)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      flag_omit_frame_pointer\t\t= 1;\t\t\t\t\\\n-      /* flag_unroll_loops\t\t\t= 1; */\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n /* there is no point in avoiding branches on a pdp, \n    since branches are really cheap - I just want to find out\n    how much difference the BRANCH_COST macro makes in code */"}, {"sha": "c18899448ee45e55cb762b96f795fd938c227a0a", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -153,7 +153,6 @@ extern enum direction function_arg_padding (enum machine_mode, const_tree);\n \n #endif /* TREE_CODE */\n \n-extern void optimization_options (int, int);\n extern int direct_return (void);\n extern int first_reg_to_save (void);\n extern int first_fp_reg_to_save (void);"}, {"sha": "4b874399ac7624b3a9deac30527f1f4db9d19cd8", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -1135,6 +1135,7 @@ static rtx altivec_expand_vec_set_builtin (tree);\n static rtx altivec_expand_vec_ext_builtin (tree, rtx);\n static int get_element_number (tree, tree);\n static void rs6000_option_override (void);\n+static void rs6000_option_optimization (int, int);\n static bool rs6000_handle_option (size_t, const char *, int);\n static void rs6000_parse_tls_size_option (void);\n static void rs6000_parse_yes_no_option (const char *, const char *, int *);\n@@ -1596,6 +1597,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE rs6000_option_override\n \n+#undef TARGET_OPTION_OPTIMIZATION\n+#define TARGET_OPTION_OPTIMIZATION rs6000_option_optimization\n+\n #undef TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION\n #define TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION \\\n   rs6000_builtin_vectorized_function\n@@ -3634,8 +3638,9 @@ rs6000_parse_tls_size_option (void)\n     error (\"bad value %qs for -mtls-size switch\", rs6000_tls_size_string);\n }\n \n-void\n-optimization_options (int level ATTRIBUTE_UNUSED, int size ATTRIBUTE_UNUSED)\n+static void\n+rs6000_option_optimization (int level ATTRIBUTE_UNUSED,\n+\t\t\t    int size ATTRIBUTE_UNUSED)\n {\n   if (DEFAULT_ABI == ABI_DARWIN)\n     /* The Darwin libraries never set errno, so we might as well"}, {"sha": "b12ed819ab8ba70e67e2a875fe71921f8c0cd93c", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -622,9 +622,6 @@ extern unsigned char rs6000_recip_bits[];\n /* The default CPU for TARGET_OPTION_OVERRIDE.  */\n #define OPTION_TARGET_CPU_DEFAULT TARGET_CPU_DEFAULT\n \n-/* Define this to change the optimizations performed by default.  */\n-#define OPTIMIZATION_OPTIONS(LEVEL,SIZE) optimization_options(LEVEL,SIZE)\n-\n /* Show we can debug even without a frame pointer.  */\n #define CAN_DEBUG_WITHOUT_FP\n "}, {"sha": "18bc64bb96ede577e579fbd3ff90956469c310f7", "filename": "gcc/config/rx/rx-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Frx%2Frx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Frx%2Frx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx-protos.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -28,7 +28,6 @@\n extern void\t\trx_conditional_register_usage (void);\n extern void\t\trx_expand_prologue (void);\n extern int\t\trx_initial_elimination_offset (int, int);\n-extern void\t\trx_set_optimization_options (void);\n \n #ifdef RTX_CODE\n extern bool\t\trx_compare_redundant (rtx);"}, {"sha": "22992732c9ae1f0edb938ea3477d599add160796", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -2162,8 +2162,10 @@ rx_handle_option (size_t code, const char *  arg ATTRIBUTE_UNUSED, int value)\n   return true;\n }\n \n-void\n-rx_set_optimization_options (void)\n+/* Implement TARGET_OPTION_OPTIMIZATION.  */\n+\n+static void\n+rx_option_optimization (int level ATTRIBUTE_UNUSED, int size ATTRIBUTE_UNUSED)\n {\n   static bool first_time = TRUE;\n   static bool saved_allow_rx_fpu = TRUE;\n@@ -2803,6 +2805,9 @@ rx_memory_move_cost (enum machine_mode mode, enum reg_class regclass, bool in)\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE\t\t\trx_option_override\n \n+#undef  TARGET_OPTION_OPTIMIZATION\n+#define TARGET_OPTION_OPTIMIZATION\t\trx_option_optimization\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* #include \"gt-rx.h\" */"}, {"sha": "140d6d41fe2d7ed6bcd4d2141bdb076a837f38ce", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -632,9 +632,6 @@ extern int rx_float_compare_mode;\n #define TARGET_OPTION_TRANSLATE_TABLE \\\n   {\"-nofpu\", \"-mnofpu\" }\n \n-#define OPTIMIZATION_OPTIONS(LEVEL,SIZE) \\\n-  rx_set_optimization_options ()\n-\n #define TARGET_USE_FPU\t\t(! TARGET_NO_USE_FPU)\n \n /* This macro is used to decide when RX FPU instructions can be used.  */"}, {"sha": "e3cc59c64538a11fa371deedecf9095a1fd9ee9d", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -34,7 +34,6 @@ extern bool s390_check_symref_alignment (rtx addr, HOST_WIDE_INT alignment);\n \n /* Declare functions in s390.c.  */\n \n-extern void optimization_options (int, int);\n extern HOST_WIDE_INT s390_initial_elimination_offset (int, int);\n extern void s390_emit_prologue (void);\n extern void s390_emit_epilogue (bool);"}, {"sha": "11e9fe2e724ca5b75b759fdfbac8ef6100b9a13c", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -1465,8 +1465,8 @@ s390_init_machine_status (void)\n \n    SIZE is nonzero if `-Os' is specified and zero otherwise.  */\n \n-void\n-optimization_options (int level ATTRIBUTE_UNUSED, int size ATTRIBUTE_UNUSED)\n+static void\n+s390_option_optimization (int level ATTRIBUTE_UNUSED, int size)\n {\n   /* ??? There are apparently still problems with -fcaller-saves.  */\n   flag_caller_saves = 0;\n@@ -1675,7 +1675,7 @@ s390_option_override (void)\n   if (!PARAM_SET_P (PARAM_SIMULTANEOUS_PREFETCHES))\n     set_param_value (\"simultaneous-prefetches\", 6);\n \n-  /* This cannot reside in optimization_options since HAVE_prefetch\n+  /* This cannot reside in s390_option_optimization since HAVE_prefetch\n      requires the arch flags to be evaluated already.  Since prefetching\n      is beneficial on s390, we enable it if available.  */\n   if (flag_prefetch_loop_arrays < 0 && HAVE_prefetch && optimize >= 3)\n@@ -10426,6 +10426,9 @@ s390_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE s390_option_override\n \n+#undef TARGET_OPTION_OPTIMIZATION\n+#define TARGET_OPTION_OPTIMIZATION s390_option_optimization\n+\n #undef\tTARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO s390_encode_section_info\n "}, {"sha": "fcc63b0d3321ad71d0ccce35ab2727e3e99ca123", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -149,9 +149,6 @@ extern int s390_arch_flags;\n #define TARGET_VERSION fprintf (stderr, \" (S/390)\");\n #endif\n \n-/* Hook to override options.  */\n-#define OPTIMIZATION_OPTIONS(LEVEL, SIZE) optimization_options(LEVEL, SIZE)\n-\n /* Frame pointer is not used for debugging.  */\n #define CAN_DEBUG_WITHOUT_FP\n "}, {"sha": "5a2fd2e711e1896e25c7bfa910ca4d1ab346614e", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -124,7 +124,6 @@ extern rtx sh_gen_truncate (enum machine_mode, rtx, int);\n extern bool sh_vector_mode_supported_p (enum machine_mode);\n #endif /* RTX_CODE */\n \n-extern void sh_optimization_options (int, int);\n extern const char *output_jump_label_table (void);\n extern int sh_handle_pragma (int (*)(void), void (*)(int), const char *);\n extern struct rtx_def *get_fpscr_rtx (void);"}, {"sha": "1e8b141813a3145815be60e85b4e45607509c1c3", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -183,6 +183,7 @@ static int noncall_uses_reg (rtx, rtx, rtx *);\n static rtx gen_block_redirect (rtx, int, int);\n static void sh_reorg (void);\n static void sh_option_override (void);\n+static void sh_option_optimization (int, int);\n static void output_stack_adjust (int, rtx, int, HARD_REG_SET *, bool);\n static rtx frame_insn (rtx);\n static rtx push (int);\n@@ -339,6 +340,8 @@ static const struct attribute_spec sh_attribute_table[] =\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE sh_option_override\n+#undef TARGET_OPTION_OPTIMIZATION\n+#define TARGET_OPTION_OPTIMIZATION sh_option_optimization\n \n #undef TARGET_PRINT_OPERAND\n #define TARGET_PRINT_OPERAND sh_print_operand\n@@ -694,8 +697,8 @@ sh_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED,\n }\n \f\n /* Set default optimization options.  */\n-void\n-sh_optimization_options (int level ATTRIBUTE_UNUSED, int size ATTRIBUTE_UNUSED)\n+static void\n+sh_option_optimization (int level, int size)\n {\n   if (level)\n     {"}, {"sha": "2e9ee76d3ef6e5b03c3a76463de9c8beef903fb5", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -470,8 +470,6 @@ do { \\\n \n #define DRIVER_SELF_SPECS \"%{m2a:%{ml:%eSH2a does not support little-endian}}\"\n \n-#define OPTIMIZATION_OPTIONS(LEVEL,SIZE) sh_optimization_options (LEVEL, SIZE)\n-\n #define ASSEMBLER_DIALECT assembler_dialect\n \n extern int assembler_dialect;"}, {"sha": "f0ecd93f3f9d31a2b300878087d6334d6a410feb", "filename": "gcc/config/spu/spu-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-protos.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -20,7 +20,6 @@\n \n extern void spu_cpu_cpp_builtins (struct cpp_reader * pfile);\n extern void builtin_define_std (const char *);\n-extern void spu_optimization_options (int level, int size);\n extern void spu_c_common_override_options (void);\n extern int valid_subreg (rtx op);\n extern void spu_expand_extv (rtx * ops, int unsignedp);"}, {"sha": "8b462ecf5e315bfd4232630b87d078105f36ffb3", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -150,6 +150,7 @@ char regs_ever_allocated[FIRST_PSEUDO_REGISTER];\n \n /*  Prototypes and external defs.  */\n static void spu_option_override (void);\n+static void spu_option_optimization (int, int);\n static void spu_init_builtins (void);\n static tree spu_builtin_decl (unsigned, bool);\n static bool spu_scalar_mode_supported_p (enum machine_mode mode);\n@@ -468,10 +469,13 @@ static const struct attribute_spec spu_attribute_table[] =\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE spu_option_override\n \n+#undef TARGET_OPTION_OPTIMIZATION\n+#define TARGET_OPTION_OPTIMIZATION spu_option_optimization\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n-void\n-spu_optimization_options (int level ATTRIBUTE_UNUSED, int size ATTRIBUTE_UNUSED)\n+static void\n+spu_option_optimization (int level ATTRIBUTE_UNUSED, int size ATTRIBUTE_UNUSED)\n {\n   /* Override some of the default param values.  With so many registers\n      larger values are better for these params.  */"}, {"sha": "878cb6383e545e81c30979606542842fa07d254a", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -22,9 +22,6 @@\n \n #define C_COMMON_OVERRIDE_OPTIONS spu_c_common_override_options()\n \n-#define OPTIMIZATION_OPTIONS(level,size) \\\n-\t  spu_optimization_options(level,size)\n-\n #define INIT_EXPANDERS spu_init_expanders()\n \n extern int target_flags;"}, {"sha": "49b8e756e92304a62acbb2b25e863b7ef4858cac", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for insn-output.c for NEC V850 series\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n    This file is part of GCC.\n@@ -50,6 +50,7 @@\n \n /* Function prototypes for stupid compilers:  */\n static bool v850_handle_option       (size_t, const char *, int);\n+static void v850_option_optimization (int, int);\n static void const_double_split       (rtx, HOST_WIDE_INT *, HOST_WIDE_INT *);\n static int  const_costs_int          (HOST_WIDE_INT, int);\n static int  const_costs\t\t     (rtx, enum rtx_code);\n@@ -218,6 +219,9 @@ static const struct attribute_spec v850_attribute_table[] =\n #undef TARGET_STRICT_ARGUMENT_NAMING\n #define TARGET_STRICT_ARGUMENT_NAMING v850_strict_argument_naming\n \n+#undef TARGET_OPTION_OPTIMIZATION\n+#define TARGET_OPTION_OPTIMIZATION v850_option_optimization\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Set the maximum size of small memory area TYPE to the value given\n@@ -279,6 +283,21 @@ v850_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n     }\n }\n \n+/* Implement TARGET_OPTION_OPTIMIZATION.  */\n+\n+static void\n+v850_option_optimization (int level, int size ATTRIBUTE_UNUSED)\n+{\n+  if (level)\n+    /* Note - we no longer enable MASK_EP when optimizing.  This is\n+       because of a hardware bug which stops the SLD and SST instructions\n+       from correctly detecting some hazards.  If the user is sure that\n+       their hardware is fixed or that their program will not encounter\n+       the conditions that trigger the bug then they can enable -mep by\n+       hand.  */\n+    target_flags |= MASK_PROLOG_FUNCTION;\n+}\n+\n /* Handle the TARGET_PASS_BY_REFERENCE target hook.\n    Specify whether to pass the argument by reference.  */\n "}, {"sha": "9ae0784af564b6a4804c770e44cc13fb1cf56dc1", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler. NEC V850 series\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2007, 2008, 2009  Free Software Foundation, Inc.\n+   2007, 2008, 2009, 2010  Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n    This file is part of GCC.\n@@ -140,39 +140,6 @@ extern struct small_memory_info small_memory[(int)SMALL_MEMORY_max];\n \n /* Show we can debug even without a frame pointer.  */\n #define CAN_DEBUG_WITHOUT_FP\n-\n-/* Some machines may desire to change what optimizations are\n-   performed for various optimization levels.   This macro, if\n-   defined, is executed once just after the optimization level is\n-   determined and before the remainder of the command options have\n-   been parsed.  Values set in this macro are used as the default\n-   values for the other command line options.\n-\n-   LEVEL is the optimization level specified; 2 if `-O2' is\n-   specified, 1 if `-O' is specified, and 0 if neither is specified.\n-\n-   SIZE is nonzero if `-Os' is specified, 0 otherwise.  \n-\n-   You should not use this macro to change options that are not\n-   machine-specific.  These should uniformly selected by the same\n-   optimization level on all supported machines.  Use this macro to\n-   enable machine-specific optimizations.\n-\n-   *Do not examine `write_symbols' in this macro!* The debugging\n-   options are not supposed to alter the generated code.  */\n-\n-#define OPTIMIZATION_OPTIONS(LEVEL,SIZE)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (LEVEL)\t\t\t\t\t\t\t\t\\\n-    /* Note - we no longer enable MASK_EP when optimizing.  This is\t\\\n-       because of a hardware bug which stops the SLD and SST instructions\\\n-       from correctly detecting some hazards.  If the user is sure that \\\n-       their hardware is fixed or that their program will not encounter \\\n-       the conditions that trigger the bug then they can enable -mep by \\\n-       hand.  */\t\t\t\t\t\t\t\\\n-    target_flags |= MASK_PROLOG_FUNCTION;\t\t\t\t\\\n-}\n-\n \f\n /* Target machine storage layout */\n "}, {"sha": "7b261e3f3f29ddd01c381116bd4fe62f61b491fa", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -119,6 +119,7 @@ const enum reg_class xtensa_regno_to_class[FIRST_PSEUDO_REGISTER] =\n };\n \n static void xtensa_option_override (void);\n+static void xtensa_option_optimization (int, int);\n static enum internal_test map_test_to_internal_test (enum rtx_code);\n static rtx gen_int_relational (enum rtx_code, rtx, rtx, int *);\n static rtx gen_float_relational (enum rtx_code, rtx, rtx);\n@@ -254,6 +255,8 @@ static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n \n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE xtensa_option_override\n+#undef TARGET_OPTION_OPTIMIZATION\n+#define TARGET_OPTION_OPTIMIZATION xtensa_option_optimization\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -2168,6 +2171,19 @@ xtensa_option_override (void)\n     }\n }\n \n+/* Implement TARGET_OPTION_OPTIMIZATION.  */\n+\n+static void\n+xtensa_option_optimization (int level ATTRIBUTE_UNUSED,\n+\t\t\t    int size ATTRIBUTE_UNUSED)\n+{\n+  /* Reordering blocks for Xtensa is not a good idea unless the\n+     compiler understands the range of conditional branches.\n+     Currently all branch relaxation for Xtensa is handled in the\n+     assembler, so GCC cannot do a good job of reordering blocks.  Do\n+     not enable reordering unless it is explicitly requested.  */\n+  flag_reorder_blocks = 0;\n+}\n \n /* A C compound statement to output to stdio stream STREAM the\n    assembler syntax for an instruction operand X.  X is an RTL"}, {"sha": "1bc2fdef0741b0a567123146b0a3dee0909000bf", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -74,18 +74,6 @@ extern unsigned xtensa_current_frame_size;\n #define HAVE_AS_TLS 0\n #endif\n \n-/* Reordering blocks for Xtensa is not a good idea unless the compiler\n-   understands the range of conditional branches.  Currently all branch\n-   relaxation for Xtensa is handled in the assembler, so GCC cannot do a\n-   good job of reordering blocks.  Do not enable reordering unless it is\n-   explicitly requested.  */\n-#define OPTIMIZATION_OPTIONS(LEVEL, SIZE)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      flag_reorder_blocks = 0;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n \f\n /* Target CPU builtins.  */\n #define TARGET_CPU_CPP_BUILTINS()\t\t\t\t\t\\"}, {"sha": "a5356ebbcbbdd55a541c2421081a0b8c88214ca6", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -791,9 +791,9 @@ used to alter option flag variables which only exist in those\n frontends.\n @end defmac\n \n-@defmac OPTIMIZATION_OPTIONS (@var{level}, @var{size})\n+@deftypefn {Target Hook} void TARGET_OPTION_OPTIMIZATION (int @var{level}, int @var{size})\n Some machines may desire to change what optimizations are performed for\n-various optimization levels.   This macro, if defined, is executed once\n+various optimization levels.   This hook, if defined, is executed once\n just after the optimization level is determined and before the remainder\n of the command options have been parsed.  Values set in this macro are\n used as the default values for the other command line options.\n@@ -808,9 +808,9 @@ options are changed via @code{#pragma GCC optimize} or by using the\n @code{optimize} attribute.\n \n @strong{Do not examine @code{write_symbols} in\n-this macro!} The debugging options are not supposed to alter the\n+this hook!}  The debugging options are not supposed to alter the\n generated code.\n-@end defmac\n+@end deftypefn\n \n @deftypefn {Target Hook} void TARGET_HELP (void)\n This hook is called in response to the user invoking\n@@ -9414,7 +9414,7 @@ Define this macro if GCC should produce debugging output for VMS\n in response to the @option{-g} option.  The default behavior for VMS\n is to generate minimal debug info for a traceback in the absence of\n @option{-g} unless explicitly overridden with @option{-g0}.  This\n-behavior is controlled by @code{OPTIMIZATION_OPTIONS} and\n+behavior is controlled by @code{TARGET_OPTION_OPTIMIZATION} and\n @code{TARGET_OPTION_OVERRIDE}.\n @end defmac\n \n@@ -9762,7 +9762,7 @@ a particular target machine.  You can override the hook\n once just after all the command options have been parsed.\n \n Don't use this hook to turn on various extra optimizations for\n-@option{-O}.  That is what @code{OPTIMIZATION_OPTIONS} is for.\n+@option{-O}.  That is what @code{TARGET_OPTION_OPTIMIZATION} is for.\n \n If you need to do something whenever the optimization level is\n changed via the optimize attribute or pragma, see"}, {"sha": "2fcd97956dd02b7846e2a557322bc3f72922b198", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -791,9 +791,9 @@ used to alter option flag variables which only exist in those\n frontends.\n @end defmac\n \n-@defmac OPTIMIZATION_OPTIONS (@var{level}, @var{size})\n+@hook TARGET_OPTION_OPTIMIZATION\n Some machines may desire to change what optimizations are performed for\n-various optimization levels.   This macro, if defined, is executed once\n+various optimization levels.   This hook, if defined, is executed once\n just after the optimization level is determined and before the remainder\n of the command options have been parsed.  Values set in this macro are\n used as the default values for the other command line options.\n@@ -808,9 +808,9 @@ options are changed via @code{#pragma GCC optimize} or by using the\n @code{optimize} attribute.\n \n @strong{Do not examine @code{write_symbols} in\n-this macro!} The debugging options are not supposed to alter the\n+this hook!}  The debugging options are not supposed to alter the\n generated code.\n-@end defmac\n+@end deftypefn\n \n @hook TARGET_HELP\n This hook is called in response to the user invoking\n@@ -9398,7 +9398,7 @@ Define this macro if GCC should produce debugging output for VMS\n in response to the @option{-g} option.  The default behavior for VMS\n is to generate minimal debug info for a traceback in the absence of\n @option{-g} unless explicitly overridden with @option{-g0}.  This\n-behavior is controlled by @code{OPTIMIZATION_OPTIONS} and\n+behavior is controlled by @code{TARGET_OPTION_OPTIMIZATION} and\n @code{TARGET_OPTION_OVERRIDE}.\n @end defmac\n \n@@ -9744,7 +9744,7 @@ a particular target machine.  You can override the hook\n once just after all the command options have been parsed.\n \n Don't use this hook to turn on various extra optimizations for\n-@option{-O}.  That is what @code{OPTIMIZATION_OPTIONS} is for.\n+@option{-O}.  That is what @code{TARGET_OPTION_OPTIMIZATION} is for.\n \n If you need to do something whenever the optimization level is\n changed via the optimize attribute or pragma, see"}, {"sha": "9969bce177be9c3aba4d8cb210ec5dd152b8b5a3", "filename": "gcc/hooks.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -181,6 +181,11 @@ hook_void_tree_treeptr (tree a ATTRIBUTE_UNUSED, tree *b ATTRIBUTE_UNUSED)\n {\n }\n \n+void\n+hook_void_int_int (int a ATTRIBUTE_UNUSED, int b ATTRIBUTE_UNUSED)\n+{\n+}\n+\n bool\n hook_bool_tree_false (tree a ATTRIBUTE_UNUSED)\n {"}, {"sha": "de18b86423f9e1beb75dc3600b743ee43168f638", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -60,6 +60,7 @@ extern void hook_void_rtx_int (rtx, int);\n extern void hook_void_FILEptr_constcharptr (FILE *, const char *);\n extern void hook_void_tree (tree);\n extern void hook_void_tree_treeptr (tree, tree *);\n+extern void hook_void_int_int (int, int);\n \n extern int hook_int_const_tree_0 (const_tree);\n extern int hook_int_const_tree_const_tree_1 (const_tree, const_tree);"}, {"sha": "49c91a4a09486a7256befa62c5a5a9c160faa734", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -37,7 +37,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"diagnostic.h\"\n #include \"opts-diagnostic.h\"\n-#include \"tm_p.h\"\t\t/* For OPTIMIZATION_OPTIONS.  */\n #include \"insn-attr.h\"\t\t/* For INSN_SCHEDULING.  */\n #include \"target.h\"\n #include \"tree-pass.h\"\n@@ -888,8 +887,9 @@ decode_options (unsigned int argc, const char **argv,\n \t set after target options have been processed.  */\n       flag_short_enums = 2;\n \n-      /* Initialize target_flags before OPTIMIZATION_OPTIONS so the latter can\n-\t modify it.  */\n+      /* Initialize target_flags before\n+\t targetm.target_option.optimization so the latter can modify\n+\t it.  */\n       target_flags = targetm.default_target_flags;\n \n       /* Some targets have ABI-specified unwind tables.  */\n@@ -901,10 +901,8 @@ decode_options (unsigned int argc, const char **argv,\n   lto_clear_user_options ();\n #endif\n \n-#ifdef OPTIMIZATION_OPTIONS\n   /* Allow default optimizations to be specified on a per-machine basis.  */\n-  OPTIMIZATION_OPTIONS (optimize, optimize_size);\n-#endif\n+  targetm.target_option.optimization (optimize, optimize_size);\n \n   read_cmdline_options (*decoded_options, *decoded_options_count, lang_mask,\n \t\t\t&handlers);"}, {"sha": "8928ce6a316826f130cd521d0fb00ae0cc0b7d05", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -715,7 +715,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tALLOCATE_INITIAL_VALUE LEGITIMIZE_ADDRESS FRAME_POINTER_REQUIRED \\\n \tCAN_ELIMINATE TRAMPOLINE_TEMPLATE INITIALIZE_TRAMPOLINE\t\t\\\n \tTRAMPOLINE_ADJUST_ADDRESS STATIC_CHAIN STATIC_CHAIN_INCOMING\t\\\n-\tRETURN_POPS_ARGS UNITS_PER_SIMD_WORD OVERRIDE_OPTIONS\n+\tRETURN_POPS_ARGS UNITS_PER_SIMD_WORD OVERRIDE_OPTIONS\t\t\\\n+\tOPTIMIZATION_OPTIONS\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "35c9799062c57a5426ca8d449826729e11fdad68", "filename": "gcc/target.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac0f7224d4fbb441496c8ea17c5b413b8cbe83c/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=fac0f7224d4fbb441496c8ea17c5b413b8cbe83c", "patch": "@@ -2313,6 +2313,13 @@ DEFHOOK\n  void, (void),\n  hook_void_void)\n \n+/* Set default optimizations for the target.  */\n+DEFHOOK\n+(optimization,\n+ \"\",\n+ void, (int level, int size),\n+ hook_void_int_int)\n+\n /* Function to determine if one function can inline another function.  */\n #undef HOOK_PREFIX\n #define HOOK_PREFIX \"TARGET_\""}]}