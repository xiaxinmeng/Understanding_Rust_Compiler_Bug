{"sha": "50dc4eedfede767f6c3bc1430c514619c56a889e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBkYzRlZWRmZWRlNzY3ZjZjM2JjMTQzMGM1MTQ2MTljNTZhODg5ZQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-02-02T12:18:52Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-02-02T12:18:52Z"}, "message": "S/390: Add missing comments listing mnemonics.\n\nThese were useful in the past but are currently lacking on a couple of\npatterns.  Fixed with this patch.\n\ngcc/ChangeLog:\n\n2017-02-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/s390.md: Add missing comments with the expanded\n\tmnemonics.\n\t* config/s390/vector.md: Likewise.\n\t* config/s390/vx-builtins.md: Likewise.\n\nFrom-SVN: r245122", "tree": {"sha": "c9b7b4895d8e60f30b84bb8b01833323fe35cbce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9b7b4895d8e60f30b84bb8b01833323fe35cbce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50dc4eedfede767f6c3bc1430c514619c56a889e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50dc4eedfede767f6c3bc1430c514619c56a889e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50dc4eedfede767f6c3bc1430c514619c56a889e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50dc4eedfede767f6c3bc1430c514619c56a889e/comments", "author": null, "committer": null, "parents": [{"sha": "bef7e56112f194be3748fb45a9801107f41c8388", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef7e56112f194be3748fb45a9801107f41c8388", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bef7e56112f194be3748fb45a9801107f41c8388"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "a083ac699914a14d99f3aa225f8012ae5d87a36b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50dc4eedfede767f6c3bc1430c514619c56a889e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50dc4eedfede767f6c3bc1430c514619c56a889e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50dc4eedfede767f6c3bc1430c514619c56a889e", "patch": "@@ -1,3 +1,10 @@\n+2017-02-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.md: Add missing comments with the expanded\n+\tmnemonics.\n+\t* config/s390/vector.md: Likewise.\n+\t* config/s390/vx-builtins.md: Likewise.\n+\n 2017-02-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/79197"}, {"sha": "9bbd7e0dc306a9d78659d99185d40bbe35a996bb", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50dc4eedfede767f6c3bc1430c514619c56a889e/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50dc4eedfede767f6c3bc1430c514619c56a889e/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=50dc4eedfede767f6c3bc1430c514619c56a889e", "patch": "@@ -4095,6 +4095,7 @@\n     operands[6] = operands[0];\n })\n \n+; rosbg, rxsbg\n (define_insn \"*r<noxa>sbg_<mode>_noshift\"\n   [(set (match_operand:GPR 0 \"nonimmediate_operand\" \"=d\")\n \t(IXOR:GPR\n@@ -4106,6 +4107,7 @@\n   \"r<noxa>sbg\\t%0,%1,%<bfstart>2,%<bfend>2,0\"\n   [(set_attr \"op_type\" \"RIE\")])\n \n+; rosbg, rxsbg\n (define_insn \"*r<noxa>sbg_di_rotl\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d\")\n \t(IXOR:DI\n@@ -4120,6 +4122,7 @@\n   \"r<noxa>sbg\\t%0,%1,%<bfstart>2,%<bfend>2,%b3\"\n   [(set_attr \"op_type\" \"RIE\")])\n \n+; rosbg, rxsbg\n (define_insn \"*r<noxa>sbg_<mode>_srl_bitmask\"\n   [(set (match_operand:GPR 0 \"nonimmediate_operand\" \"=d\")\n \t(IXOR:GPR\n@@ -4136,6 +4139,7 @@\n   \"r<noxa>sbg\\t%0,%1,%<bfstart>2,%<bfend>2,64-%3\"\n   [(set_attr \"op_type\" \"RIE\")])\n \n+; rosbg, rxsbg\n (define_insn \"*r<noxa>sbg_<mode>_sll_bitmask\"\n   [(set (match_operand:GPR 0 \"nonimmediate_operand\" \"=d\")\n \t(IXOR:GPR\n@@ -4155,6 +4159,7 @@\n ;; unsigned {int,long} a, b\n ;; a = a | (b << const_int)\n ;; a = a ^ (b << const_int)\n+; rosbg, rxsbg\n (define_insn \"*r<noxa>sbg_<mode>_sll\"\n   [(set (match_operand:GPR 0 \"nonimmediate_operand\" \"=d\")\n \t(IXOR:GPR\n@@ -4170,6 +4175,7 @@\n ;; unsigned {int,long} a, b\n ;; a = a | (b >> const_int)\n ;; a = a ^ (b >> const_int)\n+; rosbg, rxsbg\n (define_insn \"*r<noxa>sbg_<mode>_srl\"\n   [(set (match_operand:GPR 0 \"nonimmediate_operand\" \"=d\")\n \t(IXOR:GPR\n@@ -10671,6 +10677,7 @@\n \n ; FIXME: There is also mvcin but we cannot use it since src and target\n ; may overlap.\n+; lrvr, lrv, strv, lrvgr, lrvg, strvg\n (define_insn \"bswap<mode>2\"\n   [(set (match_operand:GPR 0            \"nonimmediate_operand\" \"=d,d,T\")\n \t(bswap:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \" d,T,d\")))]"}, {"sha": "c4bbffce55e123c3e4796f2d2339223ebce7497b", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50dc4eedfede767f6c3bc1430c514619c56a889e/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50dc4eedfede767f6c3bc1430c514619c56a889e/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=50dc4eedfede767f6c3bc1430c514619c56a889e", "patch": "@@ -144,6 +144,7 @@\n (include \"vx-builtins.md\")\n \n ; Full HW vector size moves\n+; vgmb, vgmh, vgmf, vgmg, vrepib, vrepih, vrepif, vrepig\n (define_insn \"mov<mode>\"\n   [(set (match_operand:V_128 0 \"nonimmediate_operand\" \"=v,v,R,  v,  v,  v,  v,  v,v,d\")\n \t(match_operand:V_128 1 \"general_operand\"      \" v,R,v,j00,jm1,jyy,jxx,jKK,d,v\"))]\n@@ -329,6 +330,7 @@\n ; FIXME: A target memory operand seems to be useful otherwise we end\n ; up with vl vlvgg vst.  Shouldn't the middle-end be able to handle\n ; that itself?\n+; vlvgb, vlvgh, vlvgf, vlvgg, vleb, vleh, vlef, vleg, vleib, vleih, vleif, vleig\n (define_insn \"*vec_set<mode>\"\n   [(set (match_operand:V                    0 \"register_operand\"  \"=v,v,v\")\n \t(unspec:V [(match_operand:<non_vec> 1 \"general_operand\"    \"d,R,K\")\n@@ -344,6 +346,7 @@\n    vlei<bhfgq>\\t%v0,%1,%2\"\n   [(set_attr \"op_type\" \"VRS,VRX,VRI\")])\n \n+; vlvgb, vlvgh, vlvgf, vlvgg\n (define_insn \"*vec_set<mode>_plus\"\n   [(set (match_operand:V                      0 \"register_operand\" \"=v\")\n \t(unspec:V [(match_operand:<non_vec>   1 \"general_operand\"   \"d\")\n@@ -366,6 +369,7 @@\n \t\t\t  UNSPEC_VEC_EXTRACT))]\n   \"TARGET_VX\")\n \n+; vlgvb, vlgvh, vlgvf, vlgvg, vsteb, vsteh, vstef, vsteg\n (define_insn \"*vec_extract<mode>\"\n   [(set (match_operand:<non_vec> 0 \"nonimmediate_operand\"          \"=d,R\")\n \t(unspec:<non_vec> [(match_operand:V  1 \"register_operand\"   \"v,v\")\n@@ -379,6 +383,7 @@\n    vste<bhfgq>\\t%v1,%0,%2\"\n   [(set_attr \"op_type\" \"VRS,VRX\")])\n \n+; vlgvb, vlgvh, vlgvf, vlgvg\n (define_insn \"*vec_extract<mode>_plus\"\n   [(set (match_operand:<non_vec>                      0 \"nonimmediate_operand\" \"=d\")\n \t(unspec:<non_vec> [(match_operand:V           1 \"register_operand\"      \"v\")\n@@ -399,6 +404,7 @@\n })\n \n ; Replicate from vector element\n+; vrepb, vreph, vrepf, vrepg\n (define_insn \"*vec_splat<mode>\"\n   [(set (match_operand:V_HW   0 \"register_operand\" \"=v\")\n \t(vec_duplicate:V_HW\n@@ -410,6 +416,7 @@\n   \"vrep<bhfgq>\\t%v0,%v1,%2\"\n   [(set_attr \"op_type\" \"VRI\")])\n \n+; vlrepb, vlreph, vlrepf, vlrepg, vrepib, vrepih, vrepif, vrepig, vrepb, vreph, vrepf, vrepg\n (define_insn \"*vec_splats<mode>\"\n   [(set (match_operand:V_HW                          0 \"register_operand\" \"=v,v,v,v\")\n \t(vec_duplicate:V_HW (match_operand:<non_vec> 1 \"general_operand\"  \" R,K,v,d\")))]\n@@ -692,6 +699,7 @@\n })\n \n ; Count leading zeros\n+; vclzb, vclzh, vclzf, vclzg\n (define_insn \"clz<mode>2\"\n   [(set (match_operand:V        0 \"register_operand\" \"=v\")\n \t(clz:V (match_operand:V 1 \"register_operand\"  \"v\")))]\n@@ -700,6 +708,7 @@\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; Count trailing zeros\n+; vctzb, vctzh, vctzf, vctzg\n (define_insn \"ctz<mode>2\"\n   [(set (match_operand:V        0 \"register_operand\" \"=v\")\n \t(ctz:V (match_operand:V 1 \"register_operand\"  \"v\")))]"}, {"sha": "e53cca811eef953ea79690eb3d8319ad721e7307", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50dc4eedfede767f6c3bc1430c514619c56a889e/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50dc4eedfede767f6c3bc1430c514619c56a889e/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=50dc4eedfede767f6c3bc1430c514619c56a889e", "patch": "@@ -65,6 +65,7 @@\n \n ; Vector gather element\n \n+; vgef, vgeg\n (define_insn \"vec_gather_element<mode>\"\n   [(set (match_operand:V_HW_32_64                     0 \"register_operand\"  \"=v\")\n \t(unspec:V_HW_32_64 [(match_operand:V_HW_32_64 1 \"register_operand\"   \"0\")\n@@ -167,6 +168,7 @@\n \n ; vec_extract is also an RTL standard name -> vector.md\n \n+; vllezb, vllezh, vllezf, vllezg\n (define_insn \"vec_insert_and_zero<mode>\"\n   [(set (match_operand:V_HW                    0 \"register_operand\" \"=v\")\n \t(unspec:V_HW [(match_operand:<non_vec> 1 \"memory_operand\"    \"R\")]\n@@ -187,6 +189,7 @@\n ; FIXME: The following two patterns might using vec_merge. But what is\n ; the canonical form: (vec_select (vec_merge op0 op1)) or (vec_merge\n ; (vec_select op0) (vec_select op1)\n+; vmrhb, vmrhh, vmrhf, vmrhg\n (define_insn \"vec_mergeh<mode>\"\n   [(set (match_operand:V_HW               0 \"register_operand\" \"=v\")\n \t(unspec:V_HW [(match_operand:V_HW 1 \"register_operand\"  \"v\")\n@@ -196,6 +199,7 @@\n   \"vmrh<bhfgq>\\t%v0,%1,%2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n+; vmrlb, vmrlh, vmrlf, vmrlg\n (define_insn \"vec_mergel<mode>\"\n   [(set (match_operand:V_HW               0 \"register_operand\" \"=v\")\n \t(unspec:V_HW [(match_operand:V_HW 1 \"register_operand\"  \"v\")\n@@ -208,6 +212,7 @@\n \n ; Vector pack\n \n+; vpkh, vpkf, vpkg\n (define_insn \"vec_pack<mode>\"\n   [(set (match_operand:<vec_half>                    0 \"register_operand\" \"=v\")\n \t(unspec:<vec_half> [(match_operand:VI_HW_HSD 1 \"register_operand\"  \"v\")\n@@ -220,6 +225,7 @@\n \n ; Vector pack saturate\n \n+; vpksh, vpksf, vpksg\n (define_insn \"vec_packs<mode>\"\n   [(set (match_operand:<vec_half>                    0 \"register_operand\" \"=v\")\n \t(unspec:<vec_half> [(match_operand:VI_HW_HSD 1 \"register_operand\"  \"v\")\n@@ -249,6 +255,7 @@\n   operands[4] = gen_reg_rtx (SImode);\n })\n \n+; vpksh, vpksf, vpksg\n (define_insn \"*vec_packs_cc<mode>\"\n   [(set (reg:CCRAW CC_REGNUM)\n \t(unspec:CCRAW [(match_operand:VI_HW_HSD 1 \"register_operand\" \"v\")\n@@ -264,6 +271,7 @@\n \n ; Vector pack logical saturate\n \n+; vpklsh, vpklsf, vpklsg\n (define_insn \"vec_packsu<mode>\"\n   [(set (match_operand:<vec_half>                    0 \"register_operand\" \"=v\")\n \t(unspec:<vec_half> [(match_operand:VI_HW_HSD 1 \"register_operand\"  \"v\")\n@@ -322,6 +330,7 @@\n   operands[4] = gen_reg_rtx (SImode);\n })\n \n+; vpklsh, vpklsf, vpklsg\n (define_insn \"*vec_packsu_cc<mode>\"\n   [(set (reg:CCRAW CC_REGNUM)\n \t(unspec:CCRAW [(match_operand:VI_HW_HSD 1 \"register_operand\" \"v\")\n@@ -403,6 +412,7 @@\n   [(set_attr \"op_type\" \"VRV\")])\n \n ; A 31 bit target address is generated from 64 bit elements\n+; vsceg\n (define_insn \"vec_scatter_element<V_HW_64:mode>_SI\"\n   [(set (mem:<non_vec>\n \t (plus:SI (subreg:SI\n@@ -417,6 +427,7 @@\n   [(set_attr \"op_type\" \"VRV\")])\n \n ; Element size and target address size is the same\n+; vscef, vsceg\n (define_insn \"vec_scatter_element<mode>_<non_vec_int>\"\n   [(set (mem:<non_vec>\n \t (plus:<non_vec_int> (unspec:<non_vec_int>\n@@ -482,6 +493,7 @@\n ; Vector sign extend to doubleword\n \n ; Sign extend of right most vector element to respective double-word\n+; vsegb, vsegh, vsegf\n (define_insn \"vec_extend<mode>\"\n   [(set (match_operand:VI_HW_QHS                    0 \"register_operand\" \"=v\")\n \t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\"  \"v\")]\n@@ -551,6 +563,7 @@\n \n ; Vector add compute carry\n \n+; vaccb, vacch, vaccf, vaccg, vaccq\n (define_insn \"vacc<bhfgq>_<mode>\"\n   [(set (match_operand:VIT_HW                 0 \"register_operand\" \"=v\")\n \t(unspec:VIT_HW [(match_operand:VIT_HW 1 \"register_operand\" \"%v\")\n@@ -638,6 +651,7 @@\n \n ; Vector average\n \n+; vavgb, vavgh, vavgf, vavgg\n (define_insn \"vec_avg<mode>\"\n   [(set (match_operand:VI_HW                0 \"register_operand\" \"=v\")\n \t(unspec:VI_HW [(match_operand:VI_HW 1 \"register_operand\" \"%v\")\n@@ -649,6 +663,7 @@\n \n ; Vector average logical\n \n+; vavglb, vavglh, vavglf, vavglg\n (define_insn \"vec_avgu<mode>\"\n   [(set (match_operand:VI_HW                0 \"register_operand\" \"=v\")\n \t(unspec:VI_HW [(match_operand:VI_HW 1 \"register_operand\" \"%v\")\n@@ -787,6 +802,7 @@\n \n ; Vector Galois field multiply sum\n \n+; vgfmb, vgfmh, vgfmf\n (define_insn \"vec_gfmsum<mode>\"\n   [(set (match_operand:VI_HW_QHS 0 \"register_operand\" \"=v\")\n \t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n@@ -805,6 +821,7 @@\n   \"vgfmg\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n+; vgfmab, vgfmah, vgfmaf\n (define_insn \"vec_gfmsum_accum<mode>\"\n   [(set (match_operand:<vec_double> 0 \"register_operand\" \"=v\")\n \t(unspec:<vec_double> [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n@@ -1115,6 +1132,7 @@\n \n ; Vector subtract compute borrow indication\n \n+; vscbib, vscbih, vscbif, vscbig, vscbiq\n (define_insn \"vscbi<bhfgq>_<mode>\"\n   [(set (match_operand:VIT_HW 0 \"register_operand\"                \"=v\")\n \t(unspec:VIT_HW [(match_operand:VIT_HW 1 \"register_operand\" \"v\")"}]}