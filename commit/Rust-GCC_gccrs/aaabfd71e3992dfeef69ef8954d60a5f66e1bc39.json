{"sha": "aaabfd71e3992dfeef69ef8954d60a5f66e1bc39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFhYmZkNzFlMzk5MmRmZWVmNjllZjg5NTRkNjBhNWY2NmUxYmMzOQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2018-11-06T10:49:34Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2018-11-06T10:49:34Z"}, "message": "Enable libsanitizer on Solaris (PR sanitizer/80953)\n\n\tgcc:\n\tPR sanitizer/80953\n\t* config/sol2.h (ASAN_CC1_SPEC): Define.\n\t(LD_WHOLE_ARCHIVE_OPTION): Define.\n\t(LD_NO_WHOLE_ARCHIVE_OPTION): Define.\n\t(ASAN_REJECT_SPEC): Provide default.\n\t(LIBASAN_EARLY_SPEC): Define.\n\t(LIBTSAN_EARLY_SPEC): Define.\n\t(LIBLSAN_EARLY_SPEC): Define.\n\t* config/i386/sol2.h (CC1_SPEC): Redefine.\n\t(ASAN_REJECT_SPEC): Define.\n\n\t* config/sparc/sparc.c (sparc_asan_shadow_offset): Declare.\n\t(TARGET_ASAN_SHADOW_OFFSET): Define.\n\t(sparc_asan_shadow_offset): New function.\n\t* config/sparc/sol2.h (CC1_SPEC): Append ASAN_CC1_SPEC.\n\t(ASAN_REJECT_SPEC): Define.\n\n\tgcc/testsuite:\n\tPR sanitizer/80953\n\t* c-c++-common/asan/alloca_loop_unpoisoning.c: Require alloca\n\tsupport.\n\t(foo): Use __builtin_alloca.\n\n\tlibsanitizer:\n\tPR sanitizer/80953\n\t* configure.tgt (sparc*-*-solaris2.11*): Enable.\n\t(x86_64-*-solaris2.11* | i?86-*-solaris2.11*): Enable.\n\nFrom-SVN: r265837", "tree": {"sha": "31b3b8a5faf12ac6f59f690270bbd76202bedf1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31b3b8a5faf12ac6f59f690270bbd76202bedf1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b5ccc800e06364b31cec61c45aede13e6c68a58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b5ccc800e06364b31cec61c45aede13e6c68a58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b5ccc800e06364b31cec61c45aede13e6c68a58"}], "stats": {"total": 98, "additions": 95, "deletions": 3}, "files": [{"sha": "11a6b4745129d35254348dc11c11d2e7a328f54a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aaabfd71e3992dfeef69ef8954d60a5f66e1bc39", "patch": "@@ -1,3 +1,22 @@\n+2018-11-06  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR sanitizer/80953\n+\t* config/sol2.h (ASAN_CC1_SPEC): Define.\n+\t(LD_WHOLE_ARCHIVE_OPTION): Define.\n+\t(LD_NO_WHOLE_ARCHIVE_OPTION): Define.\n+\t(ASAN_REJECT_SPEC): Provide default.\n+\t(LIBASAN_EARLY_SPEC): Define.\n+\t(LIBTSAN_EARLY_SPEC): Define.\n+\t(LIBLSAN_EARLY_SPEC): Define.\n+\t* config/i386/sol2.h (CC1_SPEC): Redefine.\n+\t(ASAN_REJECT_SPEC): Define.\n+\n+\t* config/sparc/sparc.c (sparc_asan_shadow_offset): Declare.\n+\t(TARGET_ASAN_SHADOW_OFFSET): Define.\n+\t(sparc_asan_shadow_offset): New function.\n+\t* config/sparc/sol2.h (CC1_SPEC): Append ASAN_CC1_SPEC.\n+\t(ASAN_REJECT_SPEC): Define.\n+\n 018-11-06  Jan Hubicka  <jh@suse.cz>\n \n \t* tree.c (fld_type_variant): Copy canonical type."}, {"sha": "73ebc4a85e1bdc5d455e0c260b37071aff58cb78", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=aaabfd71e3992dfeef69ef8954d60a5f66e1bc39", "patch": "@@ -54,6 +54,9 @@ along with GCC; see the file COPYING3.  If not see\n #undef CPP_SPEC\n #define CPP_SPEC \"%(cpp_subtarget)\"\n \n+#undef CC1_SPEC\n+#define CC1_SPEC \"%(cc1_cpu) \" ASAN_CC1_SPEC\n+\n /* GNU as understands --32 and --64, but the native Solaris\n    assembler requires -xarch=generic or -xarch=generic64 instead.  */\n #ifdef USE_GAS\n@@ -241,6 +244,10 @@ along with GCC; see the file COPYING3.  If not see\n #define LARGECOMM_SECTION_ASM_OP \"\\t.lbcomm\\t\"\n #endif\n \n+/* -fsanitize=address is currently only supported for 32-bit.  */\n+#define ASAN_REJECT_SPEC \\\n+  DEF_ARCH64_SPEC(\"%e:-fsanitize=address is not supported in this configuration\")\n+\n #define USE_IX86_FRAME_POINTER 1\n #define USE_X86_64_FRAME_POINTER 1\n "}, {"sha": "197acfbd0fe43448cb89fcc7ff1ba1003cf6a70f", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=aaabfd71e3992dfeef69ef8954d60a5f66e1bc39", "patch": "@@ -138,6 +138,9 @@ along with GCC; see the file COPYING3.  If not see\n #define DEF_ARCH64_SPEC(__str) \"%{!m32:\" __str \"}\"\n #endif\n \n+/* Solaris needs -fasynchronous-unwind-tables to generate unwind info.  */\n+#define ASAN_CC1_SPEC \"%{%:sanitize(address):-fasynchronous-unwind-tables}\"\n+\n /* It's safe to pass -s always, even if -g is not used.  Those options are\n    handled by both Sun as and GNU as.  */\n #define ASM_SPEC_BASE \\\n@@ -231,6 +234,36 @@ along with GCC; see the file COPYING3.  If not see\n #define ENDFILE_VTV_SPEC \"\"\n #endif /* !ENABLE_VTABLE_VERIFY */\n \n+/* Link -lasan early on the command line.  For -static-libasan, don't link\n+   it for -shared link, the executable should be compiled with -static-libasan\n+   in that case, and for executable link with --{,no-}whole-archive around\n+   it to force everything into the executable.  */\n+\n+#ifndef USE_GNU_LD\n+#define LD_WHOLE_ARCHIVE_OPTION \"-z allextract\"\n+#define LD_NO_WHOLE_ARCHIVE_OPTION \"-z defaultextract\"\n+#else\n+#define LD_WHOLE_ARCHIVE_OPTION \"--whole-archive\"\n+#define LD_NO_WHOLE_ARCHIVE_OPTION \"--no-whole-archive\"\n+#endif\n+\n+/* Allow rejecting -fsanitize=address, e.g. for specific multilibs.  */\n+#ifndef ASAN_REJECT_SPEC\n+#define ASAN_REJECT_SPEC \"\"\n+#endif\n+\n+#define LIBASAN_EARLY_SPEC ASAN_REJECT_SPEC \\\n+  \" %{!shared:libasan_preinit%O%s} \\\n+    %{static-libasan:%{!shared: -Bstatic \"\\\n+    LD_WHOLE_ARCHIVE_OPTION \" -lasan \" LD_NO_WHOLE_ARCHIVE_OPTION \\\n+    \"-Bdynamic}}%{!static-libasan:-lasan}\"\n+\n+/* Error out on -fsanitize=thread|leak.  */\n+#define LIBTSAN_EARLY_SPEC \"\\\n+  %e:-fsanitize=thread is not supported in this configuration\"\n+#define LIBLSAN_EARLY_SPEC \"\\\n+  %e:-fsanitize=leak is not supported in this configuration\"\n+\n /* We don't use the standard svr4 STARTFILE_SPEC because it's wrong for us.  */\n #undef STARTFILE_SPEC\n #ifdef HAVE_SOLARIS_CRTS"}, {"sha": "61069b52ed6173a0356b747f75d7b68f3771a377", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=aaabfd71e3992dfeef69ef8954d60a5f66e1bc39", "patch": "@@ -237,15 +237,15 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n %{m64:%{m32:%emay not use both -m32 and -m64}} \\\n %{m64:-mptr64 -mstack-bias -mno-v8plus \\\n   %{!mcpu*:-%{!mv8plus:mcpu=v9}}} \\\n-\"\n+\" ASAN_CC1_SPEC\n #else\n #define CC1_SPEC \"\\\n %{m32:%{m64:%emay not use both -m32 and -m64}} \\\n %{m32:-mptr32 -mno-stack-bias \\\n   %{!mcpu*:%{!mv8plus:-mcpu=v9}}} \\\n %{mv8plus:-m32 -mptr32 -mno-stack-bias \\\n   %{!mcpu*:-mcpu=v9}} \\\n-\"\n+\" ASAN_CC1_SPEC\n #endif\n \n /* Support for a compile-time default CPU, et cetera.  The rules are:\n@@ -322,6 +322,9 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \n #define ENDFILE_ARCH_SPEC \"\"\n \n+/* -fsanitize=address is currently only supported for 32-bit.  */\n+#define ASAN_REJECT_SPEC \\\n+  DEF_ARCH64_SPEC(\"%e:-fsanitize=address is not supported in this configuration\")\n \f\n \n /* Register the Solaris-specific #pragma directives.  */"}, {"sha": "dcdaef20dc04eabb1bb16f6cd23da6df1079a072", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=aaabfd71e3992dfeef69ef8954d60a5f66e1bc39", "patch": "@@ -674,6 +674,7 @@ static unsigned int sparc_function_arg_boundary (machine_mode,\n \t\t\t\t\t\t const_tree);\n static int sparc_arg_partial_bytes (cumulative_args_t,\n \t\t\t\t    machine_mode, tree, bool);\n+static unsigned HOST_WIDE_INT sparc_asan_shadow_offset (void);\n static void sparc_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n static void sparc_file_end (void);\n static bool sparc_frame_pointer_required (void);\n@@ -839,6 +840,9 @@ char sparc_hard_reg_printed[8];\n #undef TARGET_STRICT_ARGUMENT_NAMING\n #define TARGET_STRICT_ARGUMENT_NAMING sparc_strict_argument_naming\n \n+#undef TARGET_ASAN_SHADOW_OFFSET\n+#define TARGET_ASAN_SHADOW_OFFSET sparc_asan_shadow_offset\n+\n #undef TARGET_EXPAND_BUILTIN_VA_START\n #define TARGET_EXPAND_BUILTIN_VA_START sparc_va_start\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n@@ -12476,7 +12480,15 @@ sparc_init_machine_status (void)\n {\n   return ggc_cleared_alloc<machine_function> ();\n }\n+\f\n+/* Implement the TARGET_ASAN_SHADOW_OFFSET hook.  */\n \n+static unsigned HOST_WIDE_INT\n+sparc_asan_shadow_offset (void)\n+{\n+  return TARGET_ARCH64 ? HOST_WIDE_INT_C (0x7fff8000) : (HOST_WIDE_INT_1 << 29);\n+}\n+\f\n /* This is called from dwarf2out.c via TARGET_ASM_OUTPUT_DWARF_DTPREL.\n    We need to emit DTP-relative relocations.  */\n "}, {"sha": "6d7683b6e987fa20645d217f709a499d11186201", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aaabfd71e3992dfeef69ef8954d60a5f66e1bc39", "patch": "@@ -1,3 +1,10 @@\n+2018-11-06  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR sanitizer/80953\n+\t* c-c++-common/asan/alloca_loop_unpoisoning.c: Require alloca\n+\tsupport.\n+\t(foo): Use __builtin_alloca.\n+\n 2018-11-06  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/lto/tbaa-1.c: New testcase."}, {"sha": "55345fdb3a5843f61ad3d06be6d0bc871a984934", "filename": "gcc/testsuite/c-c++-common/asan/alloca_loop_unpoisoning.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Falloca_loop_unpoisoning.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Falloca_loop_unpoisoning.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Falloca_loop_unpoisoning.c?ref=aaabfd71e3992dfeef69ef8954d60a5f66e1bc39", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do run } */\n+/* { dg-require-effective-target alloca } */\n \n /* This testcase checks that allocas and VLAs inside loop are correctly unpoisoned.  */\n \n@@ -16,7 +17,7 @@ __attribute__((noinline)) void foo(int len) {\n   top = &x;\n   volatile char array[len];\n   assert(!((uintptr_t) array & 31L));\n-  alloca(len);\n+  __builtin_alloca(len);\n   for (int i = 0; i < thirty_two; ++i) {\n     char array[i];\n     bot = array;"}, {"sha": "6664c63a4f7f01de5f1fc391ac79bd7aa0628989", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=aaabfd71e3992dfeef69ef8954d60a5f66e1bc39", "patch": "@@ -1,3 +1,9 @@\n+2018-11-06  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR sanitizer/80953\n+\t* configure.tgt (sparc*-*-solaris2.11*): Enable.\n+\t(x86_64-*-solaris2.11* | i?86-*-solaris2.11*): Enable.\n+\n 2018-11-06  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR sanitizer/80953"}, {"sha": "b241ddbfec4b5a278e265bf106dc0c5e844a6b90", "filename": "libsanitizer/configure.tgt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39/libsanitizer%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaabfd71e3992dfeef69ef8954d60a5f66e1bc39/libsanitizer%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fconfigure.tgt?ref=aaabfd71e3992dfeef69ef8954d60a5f66e1bc39", "patch": "@@ -43,6 +43,8 @@ case \"${target}\" in\n \t;;\n   s390*-*-linux*)\n \t;;\n+  sparc*-*-solaris2.11*)\n+\t;;\n   arm*-*-linux*)\n \t;;\n   mips*64*-*-linux*)\n@@ -61,6 +63,8 @@ case \"${target}\" in\n   x86_64-*-darwin[1]* | i?86-*-darwin[1]*)\n \tTSAN_SUPPORTED=no\n \t;;\n+  x86_64-*-solaris2.11* | i?86-*-solaris2.11*)\n+\t;;\n   *)\n \tUNSUPPORTED=1\n \t;;"}]}