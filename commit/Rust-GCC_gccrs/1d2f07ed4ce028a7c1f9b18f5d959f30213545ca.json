{"sha": "1d2f07ed4ce028a7c1f9b18f5d959f30213545ca", "node_id": "C_kwDOANBUbNoAKDFkMmYwN2VkNGNlMDI4YTdjMWY5YjE4ZjVkOTU5ZjMwMjEzNTQ1Y2E", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-10T14:06:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-10T20:37:03Z"}, "message": "libstdc++: Revert addition of constraints to make_signed/make_unsigned\n\nConstraining the primary template makes it unusable in uninstantiated\ncontexts.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/type_traits (make_signed, make_unsigned): Remove\n\tconstraints on primary template.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n\tUndo changes to expected error in C++20 mode.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\t* testsuite/24_iterators/range_access/range_access_cpp20_neg.cc:\n\tLikewise.\n\t* testsuite/20_util/make_signed/requirements/uninstantiated.cc:\n\tNew test.\n\t* testsuite/20_util/make_unsigned/requirements/uninstantiated.cc:\n\tNew test.", "tree": {"sha": "df6ee2dda819f5968e162e58e4d17e7019136a90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df6ee2dda819f5968e162e58e4d17e7019136a90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d2f07ed4ce028a7c1f9b18f5d959f30213545ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d2f07ed4ce028a7c1f9b18f5d959f30213545ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d2f07ed4ce028a7c1f9b18f5d959f30213545ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d2f07ed4ce028a7c1f9b18f5d959f30213545ca/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67efffec943656a509e036cd3c785a5c3d6885e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67efffec943656a509e036cd3c785a5c3d6885e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67efffec943656a509e036cd3c785a5c3d6885e1"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "1d7c3b04a0eac81c0cee6d6d4a7223a0d1950bdd", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d2f07ed4ce028a7c1f9b18f5d959f30213545ca/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d2f07ed4ce028a7c1f9b18f5d959f30213545ca/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=1d2f07ed4ce028a7c1f9b18f5d959f30213545ca", "patch": "@@ -1802,9 +1802,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Primary template.\n   /// make_unsigned\n   template<typename _Tp>\n-#if __cpp_concepts\n-    requires is_integral<_Tp>::value || __is_enum(_Tp)\n-#endif\n     struct make_unsigned\n     { typedef typename __make_unsigned_selector<_Tp>::__type type; };\n \n@@ -1937,9 +1934,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Primary template.\n   /// make_signed\n   template<typename _Tp>\n-#if __cpp_concepts\n-    requires is_integral<_Tp>::value || __is_enum(_Tp)\n-#endif\n     struct make_signed\n     { typedef typename __make_signed_selector<_Tp>::__type type; };\n "}, {"sha": "451eeb8c92dbe2f360c09feea3c00bdcd35e69a7", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d2f07ed4ce028a7c1f9b18f5d959f30213545ca/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d2f07ed4ce028a7c1f9b18f5d959f30213545ca/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=1d2f07ed4ce028a7c1f9b18f5d959f30213545ca", "patch": "@@ -43,5 +43,4 @@ void test01()\n   using T8 = make_signed<float>::type; // { dg-error \"here\" }\n }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target c++17_down } 0 }\n-// { dg-error \"constraint failure\" \"\" { target c++20 } 0 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 0 }"}, {"sha": "3facf0c595adc9a4142ee0e7ea3dbb322ed9a870", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/uninstantiated.cc", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d2f07ed4ce028a7c1f9b18f5d959f30213545ca/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Funinstantiated.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d2f07ed4ce028a7c1f9b18f5d959f30213545ca/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Funinstantiated.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Funinstantiated.cc?ref=1d2f07ed4ce028a7c1f9b18f5d959f30213545ca", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile { target c++11 } }\n+#include <type_traits>\n+\n+// Check that we can name invalid specializations, just don't instantiate them.\n+\n+using X = std::make_signed<float>;\n+using Y = std::make_signed<bool>;\n+using Z = std::make_signed<void>;"}, {"sha": "49d520936a3fc6a22a422440395bffc6337d4d27", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d2f07ed4ce028a7c1f9b18f5d959f30213545ca/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d2f07ed4ce028a7c1f9b18f5d959f30213545ca/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=1d2f07ed4ce028a7c1f9b18f5d959f30213545ca", "patch": "@@ -43,5 +43,4 @@ void test01()\n   using T8 = make_unsigned<float>::type; // { dg-error \"here\" }\n }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target c++17_down } 0 }\n-// { dg-error \"constraint failure\" \"\" { target c++20 } 0 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 0 }"}, {"sha": "9b8609673790686ce4f0490203b0dc04682a8066", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/uninstantiated.cc", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d2f07ed4ce028a7c1f9b18f5d959f30213545ca/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Funinstantiated.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d2f07ed4ce028a7c1f9b18f5d959f30213545ca/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Funinstantiated.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Funinstantiated.cc?ref=1d2f07ed4ce028a7c1f9b18f5d959f30213545ca", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile { target c++11 } }\n+#include <type_traits>\n+\n+// Check that we can name invalid specializations, just don't instantiate them.\n+\n+using X = std::make_unsigned<float>;\n+using Y = std::make_unsigned<bool>;\n+using Z = std::make_unsigned<void>;"}, {"sha": "c0825a585871248d3e9b7013024ad3dc2671f754", "filename": "libstdc++-v3/testsuite/24_iterators/range_access/range_access_cpp20_neg.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d2f07ed4ce028a7c1f9b18f5d959f30213545ca/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access%2Frange_access_cpp20_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d2f07ed4ce028a7c1f9b18f5d959f30213545ca/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access%2Frange_access_cpp20_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_access%2Frange_access_cpp20_neg.cc?ref=1d2f07ed4ce028a7c1f9b18f5d959f30213545ca", "patch": "@@ -46,5 +46,4 @@ test03()\n   C c;\n   std::ssize(c);  // { dg-error \"no matching function\" }\n }\n-// { dg-error \"incomplete type .*make_signed.*S\" \"\" { target c++17_down } 0 }\n-// { dg-error \"constraint failure\" \"\" { target c++20 } 0 }\n+// { dg-error \"incomplete type .*make_signed.*S\" \"\" { target *-*-* } 0 }"}]}