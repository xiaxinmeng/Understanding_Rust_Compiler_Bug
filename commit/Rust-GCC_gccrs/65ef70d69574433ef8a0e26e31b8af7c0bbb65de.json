{"sha": "65ef70d69574433ef8a0e26e31b8af7c0bbb65de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVlZjcwZDY5NTc0NDMzZWY4YTBlMjZlMzFiOGFmN2MwYmJiNjVkZQ==", "commit": {"author": {"name": "Aditya Kumar", "email": "aditya.k7@samsung.com", "date": "2015-10-01T22:04:14Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-10-01T22:04:14Z"}, "message": "Rename gimple_bb to gimple_poly_bb\n\nRenaming gimple_bb to gimple_poly_bb because there is a function gimple_bb\nby the same name in gimple.h. No functional change intended.\nPasses regtest and bootstrap.\n\ngcc/ChangeLog:\n\n2015-10-01  Aditya Kumar  <hiraditya@msn.com>\n\n        * graphite-isl-ast-to-gimple.c (class translate_isl_ast_to_gimple):\n\tRenamed type from gimple_bb_p to gimple_poly_bb_p.\n        (translate_isl_ast_node_user): Same.\n        * graphite-poly.c (new_poly_bb): Same.\n        * graphite-poly.h (gbb_from_bb): Same.\n        * sese.h: Same.\n        * graphite-sese-to-poly.c (new_gimple_bb): gimple_bb_p -> gimple_poly_bb_p\n        (build_scop_scattering): Same.\n        (find_params_in_bb): Same.\n        (add_conditions_to_domain): Same.\n        (sese_dom_walker::before_dom_children): Same.\n        (analyze_drs_in_stmts): Same.\n        (new_pbb_from_pbb): Same.\n        (free_data_refs_aux): New pointer to type base_alias_pair.\n        * graphite-sese-to-poly.h: Same.\n        * sese.c (if_region_set_false_region): Fixed Indentation.\n        (move_sese_in_condition): Same.\n\nFrom-SVN: r228358", "tree": {"sha": "b47420e2ef79e0545a5d418d9d6ea1f21496fbfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b47420e2ef79e0545a5d418d9d6ea1f21496fbfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65ef70d69574433ef8a0e26e31b8af7c0bbb65de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65ef70d69574433ef8a0e26e31b8af7c0bbb65de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65ef70d69574433ef8a0e26e31b8af7c0bbb65de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65ef70d69574433ef8a0e26e31b8af7c0bbb65de/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6652875ffe9269a326cf7b3f17e7446079ba11d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6652875ffe9269a326cf7b3f17e7446079ba11d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6652875ffe9269a326cf7b3f17e7446079ba11d5"}], "stats": {"total": 87, "additions": 54, "deletions": 33}, "files": [{"sha": "4bd05f88d71e57db26510c84605211b65b9813c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ef70d69574433ef8a0e26e31b8af7c0bbb65de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ef70d69574433ef8a0e26e31b8af7c0bbb65de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65ef70d69574433ef8a0e26e31b8af7c0bbb65de", "patch": "@@ -1,3 +1,23 @@\n+2015-10-01  Aditya Kumar  <aditya.k7@samsung.com>\n+\n+\t* graphite-isl-ast-to-gimple.c (class translate_isl_ast_to_gimple):\n+\tRenamed type from gimple_bb_p to gimple_poly_bb_p.\n+\t(translate_isl_ast_node_user): Same.\n+\t* graphite-poly.c (new_poly_bb): Same.\n+\t* graphite-poly.h (gbb_from_bb): Same.\n+\t* sese.h: Same.\n+\t* graphite-sese-to-poly.c (new_gimple_bb): gimple_bb_p -> gimple_poly_bb_p\n+\t(build_scop_scattering): Same.\n+\t(find_params_in_bb): Same.\n+\t(add_conditions_to_domain): Same.\n+\t(sese_dom_walker::before_dom_children): Same.\n+\t(analyze_drs_in_stmts): Same.\n+\t(new_pbb_from_pbb): Same.\n+\t(free_data_refs_aux): New pointer to type base_alias_pair.\n+\t* graphite-sese-to-poly.h: Same.\n+\t* sese.c (if_region_set_false_region): Fixed Indentation.\n+\t(move_sese_in_condition): Same.\n+\n 2015-10-01  Sebastian Pop  <s.pop@samsung.com>\n \t    Aditya Kumar  <aditya.k7@samsung.com>\n "}, {"sha": "18342d02ecf44fdf12f1fc6dcd94eeaed5ad27bf", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ef70d69574433ef8a0e26e31b8af7c0bbb65de/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ef70d69574433ef8a0e26e31b8af7c0bbb65de/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=65ef70d69574433ef8a0e26e31b8af7c0bbb65de", "patch": "@@ -259,7 +259,7 @@ class translate_isl_ast_to_gimple\n      FIXME: Instead of using a vec<tree> that maps each loop id to a possible\n      chrec, we could consider using a map<int, tree> that maps loop ids to the\n      corresponding tree expressions.  */\n-  void build_iv_mapping (vec<tree> iv_map, gimple_bb_p gbb,\n+  void build_iv_mapping (vec<tree> iv_map, gimple_poly_bb_p gbb,\n \t\t\t __isl_keep isl_ast_expr *user_expr, ivs_params &ip,\n \t\t\t sese region);\n private:\n@@ -739,7 +739,7 @@ translate_isl_ast_node_for (loop_p context_loop, __isl_keep isl_ast_node *node,\n \n void\n translate_isl_ast_to_gimple::\n-build_iv_mapping (vec<tree> iv_map, gimple_bb_p gbb,\n+build_iv_mapping (vec<tree> iv_map, gimple_poly_bb_p gbb,\n \t\t  __isl_keep isl_ast_expr *user_expr, ivs_params &ip,\n \t\t  sese region)\n {\n@@ -775,7 +775,7 @@ translate_isl_ast_node_user (__isl_keep isl_ast_node *node,\n   isl_id *name_id = isl_ast_expr_get_id (name_expr);\n   poly_bb_p pbb = (poly_bb_p) isl_id_get_user (name_id);\n   gcc_assert (pbb);\n-  gimple_bb_p gbb = PBB_BLACK_BOX (pbb);\n+  gimple_poly_bb_p gbb = PBB_BLACK_BOX (pbb);\n   vec<tree> iv_map;\n   isl_ast_expr_free (name_expr);\n   isl_id_free (name_id);"}, {"sha": "f70a54200846113ad59be0cda36dfaa02cabcf0c", "filename": "gcc/graphite-poly.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ef70d69574433ef8a0e26e31b8af7c0bbb65de/gcc%2Fgraphite-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ef70d69574433ef8a0e26e31b8af7c0bbb65de/gcc%2Fgraphite-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.c?ref=65ef70d69574433ef8a0e26e31b8af7c0bbb65de", "patch": "@@ -180,7 +180,7 @@ new_poly_bb (scop_p scop, void *black_box)\n   pbb_set_black_box (pbb, black_box);\n   PBB_DRS (pbb).create (3);\n   PBB_IS_REDUCTION (pbb) = false;\n-  GBB_PBB ((gimple_bb_p) black_box) = pbb;\n+  GBB_PBB ((gimple_poly_bb_p) black_box) = pbb;\n \n   return pbb;\n }\n@@ -324,7 +324,7 @@ print_pbb_domain (FILE *file, poly_bb_p pbb, int verbosity ATTRIBUTE_UNUSED)\n /* Dump the cases of a graphite basic block GBB on FILE.  */\n \n static void\n-dump_gbb_cases (FILE *file, gimple_bb_p gbb)\n+dump_gbb_cases (FILE *file, gimple_poly_bb_p gbb)\n {\n   int i;\n   gimple *stmt;\n@@ -351,7 +351,7 @@ dump_gbb_cases (FILE *file, gimple_bb_p gbb)\n /* Dump conditions of a graphite basic block GBB on FILE.  */\n \n static void\n-dump_gbb_conditions (FILE *file, gimple_bb_p gbb)\n+dump_gbb_conditions (FILE *file, gimple_poly_bb_p gbb)\n {\n   int i;\n   gimple *stmt;"}, {"sha": "fd59d6fd7eef1771c91891e1bf93dbdec2bae0aa", "filename": "gcc/graphite-poly.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ef70d69574433ef8a0e26e31b8af7c0bbb65de/gcc%2Fgraphite-poly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ef70d69574433ef8a0e26e31b8af7c0bbb65de/gcc%2Fgraphite-poly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.h?ref=65ef70d69574433ef8a0e26e31b8af7c0bbb65de", "patch": "@@ -277,7 +277,7 @@ struct poly_bb\n   bool is_reduction;\n };\n \n-#define PBB_BLACK_BOX(PBB) ((gimple_bb_p) PBB->black_box)\n+#define PBB_BLACK_BOX(PBB) ((gimple_poly_bb_p) PBB->black_box)\n #define PBB_SCOP(PBB) (PBB->scop)\n #define PBB_DRS(PBB) (PBB->drs)\n #define PBB_IS_REDUCTION(PBB) (PBB->is_reduction)\n@@ -319,10 +319,10 @@ extern void debug_gmp_value (mpz_t);\n \n /* Returns a gimple_bb from BB.  */\n \n-static inline gimple_bb_p\n+static inline gimple_poly_bb_p\n gbb_from_bb (basic_block bb)\n {\n-  return (gimple_bb_p) bb->aux;\n+  return (gimple_poly_bb_p) bb->aux;\n }\n \n /* The poly_bb of the BB.  */"}, {"sha": "062cb3b2d1888f40d20d1f992dc1be0cfc5ce758", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ef70d69574433ef8a0e26e31b8af7c0bbb65de/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ef70d69574433ef8a0e26e31b8af7c0bbb65de/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=65ef70d69574433ef8a0e26e31b8af7c0bbb65de", "patch": "@@ -198,12 +198,12 @@ reduction_phi_p (sese region, gphi_iterator *psi)\n \n /* Store the GRAPHITE representation of BB.  */\n \n-static gimple_bb_p\n+static gimple_poly_bb_p\n new_gimple_bb (basic_block bb, vec<data_reference_p> drs)\n {\n-  struct gimple_bb *gbb;\n+  gimple_poly_bb_p gbb;\n \n-  gbb = XNEW (struct gimple_bb);\n+  gbb = XNEW (struct gimple_poly_bb);\n   bb->aux = gbb;\n   GBB_BB (gbb) = bb;\n   GBB_DATA_REFS (gbb) = drs;\n@@ -217,12 +217,12 @@ static void\n free_data_refs_aux (vec<data_reference_p> datarefs)\n {\n   unsigned int i;\n-  struct data_reference *dr;\n+  data_reference_p dr;\n \n   FOR_EACH_VEC_ELT (datarefs, i, dr)\n     if (dr->aux)\n       {\n-\tbase_alias_pair *bap = (base_alias_pair *)(dr->aux);\n+\tbase_alias_pair_p bap = (base_alias_pair_p)(dr->aux);\n \n \tfree (bap->alias_set);\n \n@@ -233,7 +233,7 @@ free_data_refs_aux (vec<data_reference_p> datarefs)\n /* Frees GBB.  */\n \n static void\n-free_gimple_bb (struct gimple_bb *gbb)\n+free_gimple_bb (gimple_poly_bb_p gbb)\n {\n   free_data_refs_aux (GBB_DATA_REFS (gbb));\n   free_data_refs (GBB_DATA_REFS (gbb));\n@@ -277,7 +277,7 @@ free_scops (vec<scop_p> scops)\n /* Generates a polyhedral black box only if the bb contains interesting\n    information.  */\n \n-static gimple_bb_p\n+static gimple_poly_bb_p\n try_generate_gimple_bb (scop_p scop, basic_block bb)\n {\n   vec<data_reference_p> drs;\n@@ -526,7 +526,7 @@ build_scop_scattering (scop_p scop)\n {\n   int i;\n   poly_bb_p pbb;\n-  gimple_bb_p previous_gbb = NULL;\n+  gimple_poly_bb_p previous_gbb = NULL;\n   isl_space *dc = isl_set_get_space (scop->context);\n   isl_aff *static_sched;\n \n@@ -541,7 +541,7 @@ build_scop_scattering (scop_p scop)\n \n   FOR_EACH_VEC_ELT (SCOP_BBS (scop), i, pbb)\n     {\n-      gimple_bb_p gbb = PBB_BLACK_BOX (pbb);\n+      gimple_poly_bb_p gbb = PBB_BLACK_BOX (pbb);\n       int prefix;\n \n       if (previous_gbb)\n@@ -876,7 +876,7 @@ scan_tree_for_params (sese s, tree e)\n    access functions, conditions and loop bounds.  */\n \n static void\n-find_params_in_bb (sese region, gimple_bb_p gbb)\n+find_params_in_bb (sese region, gimple_poly_bb_p gbb)\n {\n   int i;\n   unsigned j;\n@@ -1133,7 +1133,7 @@ add_conditions_to_domain (poly_bb_p pbb)\n {\n   unsigned int i;\n   gimple *stmt;\n-  gimple_bb_p gbb = PBB_BLACK_BOX (pbb);\n+  gimple_poly_bb_p gbb = PBB_BLACK_BOX (pbb);\n \n   if (GBB_CONDITIONS (gbb).is_empty ())\n     return;\n@@ -1229,7 +1229,7 @@ sese_dom_walker::sese_dom_walker (cdi_direction direction, sese region)\n void\n sese_dom_walker::before_dom_children (basic_block bb)\n {\n-  gimple_bb_p gbb;\n+  gimple_poly_bb_p gbb;\n   gcond *stmt;\n \n   if (!bb_in_sese_p (bb, m_region))\n@@ -1900,7 +1900,7 @@ static void\n analyze_drs_in_stmts (scop_p scop, basic_block bb, vec<gimple *> stmts)\n {\n   loop_p nest;\n-  gimple_bb_p gbb;\n+  gimple_poly_bb_p gbb;\n   gimple *stmt;\n   int i;\n   sese region = SCOP_REGION (scop);\n@@ -1982,8 +1982,8 @@ new_pbb_from_pbb (scop_p scop, poly_bb_p pbb, basic_block bb)\n {\n   vec<data_reference_p> drs;\n   drs.create (3);\n-  gimple_bb_p gbb = PBB_BLACK_BOX (pbb);\n-  gimple_bb_p gbb1 = new_gimple_bb (bb, drs);\n+  gimple_poly_bb_p gbb = PBB_BLACK_BOX (pbb);\n+  gimple_poly_bb_p gbb1 = new_gimple_bb (bb, drs);\n   poly_bb_p pbb1 = new_poly_bb (scop, gbb1);\n   int index, n = SCOP_BBS (scop).length ();\n "}, {"sha": "25d9a09270fc9db6f7af6234555feab60f8e83fc", "filename": "gcc/graphite-sese-to-poly.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ef70d69574433ef8a0e26e31b8af7c0bbb65de/gcc%2Fgraphite-sese-to-poly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ef70d69574433ef8a0e26e31b8af7c0bbb65de/gcc%2Fgraphite-sese-to-poly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.h?ref=65ef70d69574433ef8a0e26e31b8af7c0bbb65de", "patch": "@@ -21,11 +21,11 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_GRAPHITE_SESE_TO_POLY_H\n #define GCC_GRAPHITE_SESE_TO_POLY_H\n \n-struct base_alias_pair\n+typedef struct base_alias_pair\n {\n   int base_obj_set;\n   int *alias_set;\n-};\n+} *base_alias_pair_p;\n \n void build_poly_scop (scop_p);\n "}, {"sha": "2c654bcb24c5bbd91f40398fc253ba6a75120fc9", "filename": "gcc/sese.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ef70d69574433ef8a0e26e31b8af7c0bbb65de/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ef70d69574433ef8a0e26e31b8af7c0bbb65de/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=65ef70d69574433ef8a0e26e31b8af7c0bbb65de", "patch": "@@ -693,7 +693,7 @@ if_region_set_false_region (ifsese if_region, sese region)\n       memcpy (loop_exit, *((struct loop_exit **) slot), sizeof (struct loop_exit));\n       current_loops->exits->clear_slot (slot);\n \n-\t\t\t\t\t\t\thashval_t hash = htab_hash_pointer (false_edge);\n+      hashval_t hash = htab_hash_pointer (false_edge);\n       slot = current_loops->exits->find_slot_with_hash (false_edge, hash,\n \t\t\t\t\t\t\tINSERT);\n       loop_exit->e = false_edge;\n@@ -752,7 +752,8 @@ move_sese_in_condition (sese region)\n   ifsese if_region;\n \n   SESE_ENTRY (region) = single_succ_edge (pred_block);\n-  if_region = create_if_region_on_edge (single_pred_edge (pred_block), integer_one_node);\n+  if_region = create_if_region_on_edge (single_pred_edge (pred_block),\n+\t\t\t\t\tinteger_one_node);\n   if_region_set_false_region (if_region, region);\n \n   return if_region;"}, {"sha": "0b2db8d0332d3a735dfae9f9f4a886ad666d7964", "filename": "gcc/sese.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ef70d69574433ef8a0e26e31b8af7c0bbb65de/gcc%2Fsese.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ef70d69574433ef8a0e26e31b8af7c0bbb65de/gcc%2Fsese.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.h?ref=65ef70d69574433ef8a0e26e31b8af7c0bbb65de", "patch": "@@ -263,7 +263,7 @@ recompute_all_dominators (void)\n   calculate_dominance_info (CDI_POST_DOMINATORS);\n }\n \n-typedef struct gimple_bb\n+typedef struct gimple_poly_bb\n {\n   basic_block bb;\n   struct poly_bb *pbb;\n@@ -291,7 +291,7 @@ typedef struct gimple_bb\n   vec<gimple *> conditions;\n   vec<gimple *> condition_cases;\n   vec<data_reference_p> data_refs;\n-} *gimple_bb_p;\n+} *gimple_poly_bb_p;\n \n #define GBB_BB(GBB) (GBB)->bb\n #define GBB_PBB(GBB) (GBB)->pbb\n@@ -302,7 +302,7 @@ typedef struct gimple_bb\n /* Return the innermost loop that contains the basic block GBB.  */\n \n static inline struct loop *\n-gbb_loop (struct gimple_bb *gbb)\n+gbb_loop (gimple_poly_bb_p gbb)\n {\n   return GBB_BB (gbb)->loop_father;\n }\n@@ -311,7 +311,7 @@ gbb_loop (struct gimple_bb *gbb)\n    If there is no corresponding gimple loop, we return NULL.  */\n \n static inline loop_p\n-gbb_loop_at_index (gimple_bb_p gbb, sese region, int index)\n+gbb_loop_at_index (gimple_poly_bb_p gbb, sese region, int index)\n {\n   loop_p loop = gbb_loop (gbb);\n   int depth = sese_loop_depth (region, loop);\n@@ -327,7 +327,7 @@ gbb_loop_at_index (gimple_bb_p gbb, sese region, int index)\n /* The number of common loops in REGION for GBB1 and GBB2.  */\n \n static inline int\n-nb_common_loops (sese region, gimple_bb_p gbb1, gimple_bb_p gbb2)\n+nb_common_loops (sese region, gimple_poly_bb_p gbb1, gimple_poly_bb_p gbb2)\n {\n   loop_p l1 = gbb_loop (gbb1);\n   loop_p l2 = gbb_loop (gbb2);"}]}