{"sha": "57dd4e7bb754db3f2ccdffd031d8f252d0a6d3bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdkZDRlN2JiNzU0ZGIzZjJjY2RmZmQwMzFkOGYyNTJkMGE2ZDNiYg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2020-10-13T09:53:30Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2020-10-16T15:33:35Z"}, "message": "Allow self configured definition of _WRS_VXWORKS_MAJOR\n\nThis conditions the use of system headers to fetch a\n_WRS_VXWORKS_MAJOR macro on the non definition of that\nmacro. This allows builds where a specific value is\npredefined, e.g. with a self spec, useful in environments\nwhere the system headers don't actually define that macro\n(e.g. vxworks 5 or 653).\n\nIn addition, _WRS_VXWORKS_MINOR is only provided by the\nsystem headers when really meaningful, e.g. from 6.4 to 6.9.\n\nWe just pick a conservative default to 0 for all the cases\nwhere it is not exposed by the system headers or otherwise.\n\n2020-10-15  Olivier Hainque  <hainque@adacore.com>\n\ngcc/\n\t* config/vxworks/_vxworks-versions.h: Only include\n\tversion.h if _WRS_VXWORKS_MAJOR is not defined.\n\tProvide a default _WRS_VXWORKS_MINOR (0).", "tree": {"sha": "a99c40d59417bee04a1a1adb87d4f3e0cf641a90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a99c40d59417bee04a1a1adb87d4f3e0cf641a90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57dd4e7bb754db3f2ccdffd031d8f252d0a6d3bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57dd4e7bb754db3f2ccdffd031d8f252d0a6d3bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57dd4e7bb754db3f2ccdffd031d8f252d0a6d3bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57dd4e7bb754db3f2ccdffd031d8f252d0a6d3bb/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90042c43a92c452a5f9f3afbfcdad511ea09a54f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90042c43a92c452a5f9f3afbfcdad511ea09a54f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90042c43a92c452a5f9f3afbfcdad511ea09a54f"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "15e8bfeb4a60c44b42532e272454eb56d6967d03", "filename": "gcc/config/vxworks/_vxworks-versions.h", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57dd4e7bb754db3f2ccdffd031d8f252d0a6d3bb/gcc%2Fconfig%2Fvxworks%2F_vxworks-versions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57dd4e7bb754db3f2ccdffd031d8f252d0a6d3bb/gcc%2Fconfig%2Fvxworks%2F_vxworks-versions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks%2F_vxworks-versions.h?ref=57dd4e7bb754db3f2ccdffd031d8f252d0a6d3bb", "patch": "@@ -22,17 +22,29 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #ifndef _VXWORKS_VERSIONS_H\n #define _VXWORKS_VERSIONS_H  1\n \n-/* All we need is access to the bare _WRS_VXWORKS_MAJOR/MINOR macros\n-   exposed by version.h.  Cheat a bit to make sure we don't drag additional\n-   header files, which can easily cause #include ordering nightmares.  */\n+/* All we need is access to the bare _WRS_VXWORKS_MAJOR/MINOR macros,\n+   exposed by version.h or already provided somehow (e.g. with a self\n+   spec for some reason).  When resorting to system headers, cheat a\n+   bit to make sure we don't drag additional header files, which can\n+   easily cause #include ordering nightmares.  */\n \n+#if !defined(_WRS_VXWORKS_MAJOR)\n #pragma push_macro(\"_WRS_KERNEL\")\n #undef _WRS_KERNEL\n #include <version.h>\n #pragma pop_macro(\"_WRS_KERNEL\")\n+#endif\n+\n+/* A lot depends on the MAJOR so we really need to make sure we have\n+   that.  MINOR is less critical and many environments don't actually\n+   define it unless it is really meaningful (e.g. 6.4 through 6.9).  */\n \n #if !defined(_WRS_VXWORKS_MAJOR)\n-#error \"VxWorks version macros needed but not defined\"\n+#error \"_WRS_VXWORKS_MAJOR undefined\"\n+#endif\n+\n+#if !defined(_WRS_VXWORKS_MINOR)\n+#define _WRS_VXWORKS_MINOR 0\n #endif\n \n #define _VXWORKS_MAJOR_GT(MAJOR) (_WRS_VXWORKS_MAJOR > (MAJOR))"}]}