{"sha": "0c8e76210a1b7272b468691312f4e47028fd610d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM4ZTc2MjEwYTFiNzI3MmI0Njg2OTEzMTJmNGU0NzAyOGZkNjEwZA==", "commit": {"author": {"name": "Andre Vieira", "email": "avieira@gcc.gnu.org", "date": "2018-05-30T15:59:14Z"}, "committer": {"name": "Andre Vieira", "email": "avieira@gcc.gnu.org", "date": "2018-05-30T15:59:14Z"}, "message": "Reverting r260635\n\n    gcc\n    2018-05-30  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t2018-05-24  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n        PR target/83009\n\tRevert:\n        * config/aarch64/predicates.md (aarch64_mem_pair_lanes_operand): Make\n        address check not strict.\n\n    gcc/testsuite\n    2018-05-30  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t2018-05-24  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\tRevert\n        PR target/83009\n        * gcc/target/aarch64/store_v2vec_lanes.c: Add extra tests.\n    git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/trunk@260635 138bc75d-0d04-0410-961f-82ee72b054a4\n\nFrom-SVN: r260957", "tree": {"sha": "da096dd888253589b22c7a2a1be2d2108b76c2f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da096dd888253589b22c7a2a1be2d2108b76c2f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c8e76210a1b7272b468691312f4e47028fd610d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8e76210a1b7272b468691312f4e47028fd610d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c8e76210a1b7272b468691312f4e47028fd610d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8e76210a1b7272b468691312f4e47028fd610d/comments", "author": null, "committer": null, "parents": [{"sha": "7ce4ce10cd0a6f332dd473bd4726f1a1adefda0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce4ce10cd0a6f332dd473bd4726f1a1adefda0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ce4ce10cd0a6f332dd473bd4726f1a1adefda0e"}], "stats": {"total": 30, "additions": 4, "deletions": 26}, "files": [{"sha": "7aec76d681f5eca87b7b5e1d63d12dc0205ad113", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8e76210a1b7272b468691312f4e47028fd610d/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8e76210a1b7272b468691312f4e47028fd610d/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=0c8e76210a1b7272b468691312f4e47028fd610d", "patch": "@@ -226,7 +226,7 @@\n ;; as a 128-bit vec_concat.\n (define_predicate \"aarch64_mem_pair_lanes_operand\"\n   (and (match_code \"mem\")\n-       (match_test \"aarch64_legitimate_address_p (DFmode, XEXP (op, 0), false,\n+       (match_test \"aarch64_legitimate_address_p (DFmode, XEXP (op, 0), 1,\n \t\t\t\t\t\t  ADDR_QUERY_LDP_STP)\")))\n \n (define_predicate \"aarch64_prefetch_operand\""}, {"sha": "990aea32de6f8239effa95a081950684c6e11386", "filename": "gcc/testsuite/gcc.target/aarch64/store_v2vec_lanes.c", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8e76210a1b7272b468691312f4e47028fd610d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstore_v2vec_lanes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8e76210a1b7272b468691312f4e47028fd610d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstore_v2vec_lanes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstore_v2vec_lanes.c?ref=0c8e76210a1b7272b468691312f4e47028fd610d", "patch": "@@ -22,32 +22,10 @@ construct_lane_2 (long long *y, v2di *z)\n   z[2] = x;\n }\n \n-void\n-construct_lane_3 (double **py, v2df **pz)\n-{\n-  double *y = *py;\n-  v2df *z = *pz;\n-  double y0 = y[0] + 1;\n-  double y1 = y[1] + 2;\n-  v2df x = {y0, y1};\n-  z[2] = x;\n-}\n-\n-void\n-construct_lane_4 (long long **py, v2di **pz)\n-{\n-  long long *y = *py;\n-  v2di *z = *pz;\n-  long long y0 = y[0] + 1;\n-  long long y1 = y[1] + 2;\n-  v2di x = {y0, y1};\n-  z[2] = x;\n-}\n-\n /* We can use the load_pair_lanes<mode> pattern to vec_concat two DI/DF\n    values from consecutive memory into a 2-element vector by using\n    a Q-reg LDR.  */\n \n-/* { dg-final { scan-assembler-times \"stp\\td\\[0-9\\]+, d\\[0-9\\]+\" 2 } } */\n-/* { dg-final { scan-assembler-times \"stp\\tx\\[0-9\\]+, x\\[0-9\\]+\" 2 } } */\n-/* { dg-final { scan-assembler-not \"ins\\t\" } } */\n+/* { dg-final { scan-assembler-times \"stp\\td\\[0-9\\]+, d\\[0-9\\]+\" 1 { xfail ilp32 } } } */\n+/* { dg-final { scan-assembler-times \"stp\\tx\\[0-9\\]+, x\\[0-9\\]+\" 1 { xfail ilp32 } } } */\n+/* { dg-final { scan-assembler-not \"ins\\t\" { xfail ilp32 } } } */"}]}