{"sha": "6f48900c2b2a9d1ee6d394a67efef714adb07e09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY0ODkwMGMyYjJhOWQxZWU2ZDM5NGE2N2VmZWY3MTRhZGIwN2UwOQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-02-01T03:20:39Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-02-01T03:20:39Z"}, "message": "codecvt_specializations_ieee_1003.1-200x.h: Initialize all data members in copy ctor.\n\n\n2002-01-31  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* config/locale/codecvt_specializations_ieee_1003.1-200x.h:\n\tInitialize all data members in copy ctor. Make ctors explicit.\n\t(__enc_traits::__enc_traits()): Default ctor does nothing.\n\t(__enc_traits::_M_init): Guard against multiple iconv_opens.\n\t* include/std/std_sstream.h (basic_stringbuf): Make data members\n\tprotected.\n\t* include/std/std_fstream.h (basic_filebuf): Same.\n\t* include/std/std_streambuf.h: Tweak.\n\t* include/bits/streambuf.tcc: Same.\n\t* include/bits/sstream.tcc: Same.\n\t* include/bits/fstream.tcc: Same.\n\nFrom-SVN: r49387", "tree": {"sha": "45d84b75c410396fd9a4248de584e42d152135bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45d84b75c410396fd9a4248de584e42d152135bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f48900c2b2a9d1ee6d394a67efef714adb07e09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f48900c2b2a9d1ee6d394a67efef714adb07e09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f48900c2b2a9d1ee6d394a67efef714adb07e09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f48900c2b2a9d1ee6d394a67efef714adb07e09/comments", "author": null, "committer": null, "parents": [{"sha": "6d747e63e05927dc8021c712e77344442996c321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d747e63e05927dc8021c712e77344442996c321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d747e63e05927dc8021c712e77344442996c321"}], "stats": {"total": 158, "additions": 86, "deletions": 72}, "files": [{"sha": "7ec0a9b79df7bc0cc0796dc2b66788efa245c733", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f48900c2b2a9d1ee6d394a67efef714adb07e09/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f48900c2b2a9d1ee6d394a67efef714adb07e09/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6f48900c2b2a9d1ee6d394a67efef714adb07e09", "patch": "@@ -1,3 +1,17 @@\n+2002-01-31  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* config/locale/codecvt_specializations_ieee_1003.1-200x.h:\n+\tInitialize all data members in copy ctor. Make ctors explicit.\n+\t(__enc_traits::__enc_traits()): Default ctor does nothing.\n+\t(__enc_traits::_M_init): Guard against multiple iconv_opens.\n+\t* include/std/std_sstream.h (basic_stringbuf): Make data members\n+\tprotected.\n+\t* include/std/std_fstream.h (basic_filebuf): Same.\n+\t* include/std/std_streambuf.h: Tweak.\n+\t* include/bits/streambuf.tcc: Same.\n+\t* include/bits/sstream.tcc: Same.\n+\t* include/bits/fstream.tcc: Same.\t\n+\n 2002-01-31  Loren Rittle <ljrittle@acm.org>\n \n \t* testsuite/22_locale/codecvt_members_char_char.cc: Do not"}, {"sha": "e1e996bf97550383967e412e6c8822c6ba9f4b05", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f48900c2b2a9d1ee6d394a67efef714adb07e09/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f48900c2b2a9d1ee6d394a67efef714adb07e09/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=6f48900c2b2a9d1ee6d394a67efef714adb07e09", "patch": "@@ -1,6 +1,6 @@\n-# Makefile.in generated automatically by automake 1.4 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n \n-# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n+# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -308,7 +308,7 @@ maintainer-clean-recursive:\n \tdot_seen=no; \\\n \trev=''; list='$(SUBDIRS)'; for subdir in $$list; do \\\n \t  rev=\"$$subdir $$rev\"; \\\n-\t  test \"$$subdir\" = \".\" && dot_seen=yes; \\\n+\t  test \"$$subdir\" != \".\" || dot_seen=yes; \\\n \tdone; \\\n \ttest \"$$dot_seen\" = \"no\" && rev=\". $$rev\"; \\\n \ttarget=`echo $@ | sed s/-recursive//`; \\"}, {"sha": "5cacffb81f88424af0962ba736c9a4f481225865", "filename": "libstdc++-v3/config/locale/codecvt_specializations_ieee_1003.1-200x.h", "status": "modified", "additions": 54, "deletions": 36, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f48900c2b2a9d1ee6d394a67efef714adb07e09/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcodecvt_specializations_ieee_1003.1-200x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f48900c2b2a9d1ee6d394a67efef714adb07e09/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcodecvt_specializations_ieee_1003.1-200x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fcodecvt_specializations_ieee_1003.1-200x.h?ref=6f48900c2b2a9d1ee6d394a67efef714adb07e09", "patch": "@@ -1,6 +1,6 @@\n // Locale support (codecvt) -*- C++ -*-\n \n-// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -35,23 +35,18 @@\n \n // Written by Benjamin Kosnik <bkoz@cygnus.com>\n \n-  // XXX \n-  // __enc_traits may need to move up the locale header hierarchy,\n-  // depending on if ctype ends up using it.\n-\n-  // Extensions to use icov for dealing with character encodings,\n-  // including conversions and comparisons between various character\n-  // sets.  This object encapsulates data that may need to be shared between\n-  // char_traits, codecvt and ctype.\n+  // XXX\n+  // Define this here to codecvt.cc can have _S_max_size definition.\n+#define _GLIBCPP_USE___ENC_TRAITS 1\n \n #if _GLIBCPP_USE_SHADOW_HEADERS\n   using _C_legacy::CODESET;\n #endif\n \n-  // XXX\n-  // Define this here to codecvt.cc can have _S_max_size definition.\n-#define _GLIBCPP_USE___ENC_TRAITS 1\n-\n+  // Extension to use icov for dealing with character encodings,\n+  // including conversions and comparisons between various character\n+  // sets.  This object encapsulates data that may need to be shared between\n+  // char_traits, codecvt and ctype.\n   class __enc_traits\n   {\n   public:\n@@ -81,7 +76,14 @@\n     int\t\t\t_M_int_bom;\n \n   public:\n-    __enc_traits(const locale& __loc = locale())\n+    explicit __enc_traits() \n+    : _M_in_desc(0), _M_out_desc(0), _M_ext_bom(0), _M_int_bom(0) \n+    {\n+      memset(_M_int_enc, 0, _S_max_size);\n+      memset(_M_ext_enc, 0, _S_max_size);\n+    }\n+\n+    explicit __enc_traits(const locale& __loc)\n     : _M_in_desc(0), _M_out_desc(0), _M_ext_bom(0), _M_int_bom(0)\n     {\n       // __intc_end = whatever we are using internally, which is\n@@ -98,8 +100,8 @@\n       locale::facet::_S_destroy_c_locale(__cloc);\n     }\n \n-    __enc_traits(const char* __int, const char* __ext, int __ibom = 0, \n-\t\t int __ebom = 0)\n+    explicit __enc_traits(const char* __int, const char* __ext, \n+\t\t\t  int __ibom = 0, int __ebom = 0)\n     : _M_in_desc(0), _M_out_desc(0), _M_ext_bom(0), _M_int_bom(0)\n     {\n       strncpy(_M_int_enc, __int, _S_max_size);\n@@ -111,10 +113,22 @@\n     // typedef STATE_T state_type\n     // requires: state_type shall meet the requirements of\n     // CopyConstructible types (20.1.3)\n-    __enc_traits(const __enc_traits& __obj)\n+    __enc_traits(const __enc_traits& __obj): _M_in_desc(0), _M_out_desc(0)\n+    {\n+      strncpy(_M_int_enc, __obj._M_int_enc, _S_max_size);\n+      strncpy(_M_ext_enc, __obj._M_ext_enc, _S_max_size);\n+      _M_ext_bom = __obj._M_ext_bom;\n+      _M_int_bom = __obj._M_int_bom;\n+    }\n+\n+    // Need assignment operator as well.\n+    __enc_traits&\n+    operator=(const __enc_traits& __obj)\n     {\n       strncpy(_M_int_enc, __obj._M_int_enc, _S_max_size);\n       strncpy(_M_ext_enc, __obj._M_ext_enc, _S_max_size);\n+      _M_in_desc = 0;\n+      _M_out_desc = 0;\n       _M_ext_bom = __obj._M_ext_bom;\n       _M_int_bom = __obj._M_int_bom;\n     }\n@@ -131,19 +145,25 @@\n     void\n     _M_init()\n     {\n-      __desc_type __err = reinterpret_cast<iconv_t>(-1);\n-      _M_in_desc = iconv_open(_M_int_enc, _M_ext_enc);\n-      if (_M_in_desc == __err)\n-\t__throw_runtime_error(\"creating iconv input descriptor failed.\");\n-      _M_out_desc = iconv_open(_M_ext_enc, _M_int_enc);\n-      if (_M_out_desc == __err)\n-\t__throw_runtime_error(\"creating iconv output descriptor failed.\");\n+      const __desc_type __err = reinterpret_cast<iconv_t>(-1);\n+      if (!_M_in_desc)\n+\t{\n+\t  _M_in_desc = iconv_open(_M_int_enc, _M_ext_enc);\n+\t  if (_M_in_desc == __err)\n+\t    __throw_runtime_error(\"creating iconv input descriptor failed.\");\n+\t}\n+      if (!_M_out_desc)\n+\t{\n+\t  _M_out_desc = iconv_open(_M_ext_enc, _M_int_enc);\n+\t  if (_M_out_desc == __err)\n+\t    __throw_runtime_error(\"creating iconv output descriptor failed.\");\n+\t}\n     }\n \n     bool\n     _M_good()\n     { \n-      __desc_type __err = reinterpret_cast<iconv_t>(-1);\n+      const __desc_type __err = reinterpret_cast<iconv_t>(-1);\n       bool __test = _M_in_desc && _M_in_desc != __err; \n       __test &=  _M_out_desc && _M_out_desc != __err;\n       return __test;\n@@ -157,21 +177,21 @@\n     _M_get_out_descriptor()\n     { return &_M_out_desc; }\n \n-   const char* \n-    _M_get_internal_enc()\n-    { return _M_int_enc; }\n-\n-    const char* \n-    _M_get_external_enc()\n-    { return _M_ext_enc; }\n-\n     int \n     _M_get_external_bom()\n     { return _M_ext_bom; }\n \n     int \n     _M_get_internal_bom()\n     { return _M_int_bom; }\n+\n+    const char* \n+    _M_get_internal_enc()\n+    { return _M_int_enc; }\n+\n+    const char* \n+    _M_get_external_enc()\n+    { return _M_ext_enc; }\n   };\n \n   // Partial specialization\n@@ -250,9 +270,7 @@\n     __iconv_adaptor(size_t(*iconv_func)(iconv_t, _T, size_t*, char**, size_t*),\n                     iconv_t cd, char** inbuf, size_t* inbytesleft,\n                     char** outbuf, size_t* outbytesleft)\n-    {\n-      return iconv_func(cd, (_T)inbuf, inbytesleft, outbuf, outbytesleft);\n-    }\n+    { return iconv_func(cd, (_T)inbuf, inbytesleft, outbuf, outbytesleft); }\n \n   template<typename _InternT, typename _ExternT>\n     codecvt_base::result"}, {"sha": "85a0e085e3f744e6dae589b44787b65520943b66", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f48900c2b2a9d1ee6d394a67efef714adb07e09/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f48900c2b2a9d1ee6d394a67efef714adb07e09/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=6f48900c2b2a9d1ee6d394a67efef714adb07e09", "patch": "@@ -143,9 +143,7 @@ namespace std\n     int\n     basic_filebuf<_CharT, _Traits>::\n     fd()\n-    {\n-      return _M_file->fd();\n-    }\n+    { return _M_file->fd(); }\n \n   template<typename _CharT, typename _Traits>\n     typename basic_filebuf<_CharT, _Traits>::__filebuf_type* \n@@ -604,14 +602,6 @@ namespace std\n       // XXX The part in the above comment is not done.\n       _M_last_overflowed = false;\t\n     }\n-  \n } // namespace std\n \n-#endif // _CPP_BITS_FSTREAM_TCC\n-\n-\n-\n-\n-\n-\n-\n+#endif "}, {"sha": "d610532ae75bc0293f4e5b509e4c785f2240e3d0", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f48900c2b2a9d1ee6d394a67efef714adb07e09/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f48900c2b2a9d1ee6d394a67efef714adb07e09/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=6f48900c2b2a9d1ee6d394a67efef714adb07e09", "patch": "@@ -1,6 +1,7 @@\n // String based streams -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2001, 2002\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,7 +39,6 @@\n \n namespace std\n {\n-\n   template <class _CharT, class _Traits, class _Alloc>\n     typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type \n     basic_stringbuf<_CharT, _Traits, _Alloc>::\n@@ -206,8 +206,6 @@ namespace std\n       \n       return __ret;\n     }\n-\n } // namespace std\n \n-#endif\t/* _CPP_BITS_SSTREAM_TCC */\n-\n+#endif"}, {"sha": "81b40716f981e34f4274c15177b6ef2caa246e9a", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f48900c2b2a9d1ee6d394a67efef714adb07e09/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f48900c2b2a9d1ee6d394a67efef714adb07e09/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=6f48900c2b2a9d1ee6d394a67efef714adb07e09", "patch": "@@ -1,6 +1,7 @@\n // Stream buffer classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,8 +35,8 @@\n #ifndef _CPP_BITS_STREAMBUF_TCC\n #define _CPP_BITS_STREAMBUF_TCC 1\n \n-namespace std {\n-\n+namespace std \n+{\n   template<typename _CharT, typename _Traits>\n     typename basic_streambuf<_CharT, _Traits>::int_type\n     basic_streambuf<_CharT, _Traits>::\n@@ -225,4 +226,4 @@ namespace std {\n     }\n } // namespace std\n \n-#endif // _CPP_BITS_STREAMBUF_TCC\n+#endif "}, {"sha": "7de9f30b3b3cb92fd9be39b18e87871ea44cde76", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f48900c2b2a9d1ee6d394a67efef714adb07e09/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f48900c2b2a9d1ee6d394a67efef714adb07e09/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=6f48900c2b2a9d1ee6d394a67efef714adb07e09", "patch": "@@ -44,8 +44,8 @@\n \n #include <istream>\n #include <ostream>\n-#include <bits/basic_file.h>\n #include <locale>\t// For codecvt\n+#include <bits/basic_file.h>\n #include <bits/gthr.h>\n \n namespace std \n@@ -72,7 +72,7 @@ namespace std\n \n       friend class ios_base; // For sync_with_stdio.\n \n-    private:\n+    protected:\n       // Data Members:\n       // External buffer.\n       __file_type* \t\t_M_file;\n@@ -422,7 +422,6 @@ namespace std\n     };\n } // namespace std\n \n-\n #ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n # define export\n #ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n@@ -431,4 +430,3 @@ namespace std\n #endif\n \n #endif\t\n-"}, {"sha": "fc7eb05654fe61b205677c9d32985af64622fecc", "filename": "libstdc++-v3/include/std/std_sstream.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f48900c2b2a9d1ee6d394a67efef714adb07e09/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f48900c2b2a9d1ee6d394a67efef714adb07e09/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h?ref=6f48900c2b2a9d1ee6d394a67efef714adb07e09", "patch": "@@ -66,7 +66,7 @@ namespace std\n       typedef basic_string<char_type, _Traits, _Alloc> \t__string_type;\n       typedef typename __string_type::size_type\t\t__size_type;\n \n-    private:\n+    protected:\n       // Data Members:\n       __string_type \t\t_M_string;\n       \n@@ -360,13 +360,11 @@ namespace std\n     };\n } // namespace std\n \n-\n-\n #ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n # define export\n #ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n # include <bits/sstream.tcc>\n #endif\n #endif\n \n-#endif\t// _CPP_SSTREAM\n+#endif"}, {"sha": "48ffd97e2f787d0f463321e5e872c1bc438d7417", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f48900c2b2a9d1ee6d394a67efef714adb07e09/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f48900c2b2a9d1ee6d394a67efef714adb07e09/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=6f48900c2b2a9d1ee6d394a67efef714adb07e09", "patch": "@@ -83,7 +83,6 @@ namespace std\n \t\t\t  __streambuf_type* __sbin,__streambuf_type* __sbout);\n       \n     protected:\n-\n       // Pointer to the beginning of internally-allocated\n       // space. Filebuf manually allocates/deallocates this, whereas\n       // stringstreams attempt to use the built-in intelligence of the\n@@ -527,7 +526,6 @@ namespace std\n       operator=(const __streambuf_type&);\n #endif\n     };\n-\n } // namespace std\n \n #ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n@@ -537,5 +535,4 @@ namespace std\n #endif\n #endif\n \n-#endif\t/* _CPP_STREAMBUF */\n-\n+#endif\t"}]}