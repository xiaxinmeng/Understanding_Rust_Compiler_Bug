{"sha": "1c0ca89ddb5087f6a1b73f91e89e1b8791ee4f4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMwY2E4OWRkYjUwODdmNmExYjczZjkxZTg5ZTFiODc5MWVlNGY0Zg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-06-12T01:36:13Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-06-12T01:36:13Z"}, "message": "config.gcc: Make the name of the extra-modes file adjustable by target stanzas.\n\n\t* config.gcc: Make the name of the extra-modes file adjustable\n\tby target stanzas.\n\t(s390x, strongarm, xscale stanzas): Use this facility.\n\t* configure.in: Update to match.\n\t* configure: Regenerate.\n\nFrom-SVN: r54540", "tree": {"sha": "10185c460e3b9c3633d38d39942bff0205449176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10185c460e3b9c3633d38d39942bff0205449176"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c0ca89ddb5087f6a1b73f91e89e1b8791ee4f4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c0ca89ddb5087f6a1b73f91e89e1b8791ee4f4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c0ca89ddb5087f6a1b73f91e89e1b8791ee4f4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c0ca89ddb5087f6a1b73f91e89e1b8791ee4f4f/comments", "author": null, "committer": null, "parents": [{"sha": "5dc8d5361697ad7378b9ff360aaaec980091d6b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dc8d5361697ad7378b9ff360aaaec980091d6b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dc8d5361697ad7378b9ff360aaaec980091d6b4"}], "stats": {"total": 80, "additions": 51, "deletions": 29}, "files": [{"sha": "b3ec1212ffb1747e09e692a4b9fa58566796529e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0ca89ddb5087f6a1b73f91e89e1b8791ee4f4f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0ca89ddb5087f6a1b73f91e89e1b8791ee4f4f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c0ca89ddb5087f6a1b73f91e89e1b8791ee4f4f", "patch": "@@ -1,16 +1,24 @@\n+2002-06-11  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* config.gcc: Make the name of the extra-modes file adjustable\n+\tby target stanzas.\n+\t(s390x, strongarm, xscale stanzas): Use this facility.\n+\t* configure.in: Update to match.\n+\t* configure: Regenerate.\n+\n 2002-06-11  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/rs6000.c (rs6000_emit_minmax): Treat unsigned\n-        max/mins as unsigned GE compares.\n+\t* config/rs6000/rs6000.c (rs6000_emit_minmax): Treat unsigned\n+\tmax/mins as unsigned GE compares.\n \n 2002-06-11  Jason Thorpe  <thorpej@wasabisystems.com>\n \n-\t* config.gcc (vax-*-bsd*): Add vax/bsd.h to ${tm_file}. \n+\t* config.gcc (vax-*-bsd*): Add vax/bsd.h to ${tm_file}.\n \t* config/vax/bsd.h: New file.\n \t* config/vax/netbsd.h: Add missing notice.\n-\t(CPP_PREDEFINES): Remove.  \n-\t(TARGET_OS_CPP_BUILTINS): Define.  \n-\t(CPP_SPEC): Use NETBSD_CPP_SPEC.   \n+\t(CPP_PREDEFINES): Remove.\n+\t(TARGET_OS_CPP_BUILTINS): Define.\n+\t(CPP_SPEC): Use NETBSD_CPP_SPEC.\n \t* config/vax/openbsd.h: Update copyright years.\n \t(CPP_PREDEFINES): Remove.\n \t(TARGET_OS_CPP_BUILTINS): Define.\n@@ -97,7 +105,7 @@ Wed Jun 12 01:50:28 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \tmatch semantics.\n \t* diagnostic.c: Adjust calls to diagnostic_count_error through out.\n \t(diagnostic_count_diagnostic): Make aware of other kinds of\n-\tdiagnostics. \n+\tdiagnostics.\n \t(diagnostic_initialize): Initialize warnings_are_errors_message field.\n \n 2002-06-11  Tom Tromey  <tromey@redhat.com>\n@@ -115,7 +123,7 @@ Wed Jun 12 01:50:28 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n 2002-06-11  Richard Henderson  <rth@redhat.com>\n \n-\t* defaults.h (EH_FRAME_SECTION_NAME): Don't define if \n+\t* defaults.h (EH_FRAME_SECTION_NAME): Don't define if\n \tDWARF2_UNWIND_INFO is false.\n \n 2002-06-11  Bob Wilson  <bob.wilson@acm.org>\n@@ -181,19 +189,19 @@ Tue Jun 11 21:53:37 CEST 2002  Jan Hubicka  <jh@suse.cz>\n 2002-06-11  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.md (reload_base, ltorg): Remove.\n-\t* s390.c (s390_stop_dump_lit_p, s390_dump_literal_pool, \n+\t* s390.c (s390_stop_dump_lit_p, s390_dump_literal_pool,\n \ts390_asm_output_pool_prologue, s390_pool_start_insn): Remove.\n-\t* s390-protos.h (s390_stop_dump_lit_p, s390_dump_literal_pool, \n+\t* s390-protos.h (s390_stop_dump_lit_p, s390_dump_literal_pool,\n \ts390_asm_output_pool_prologue): Likewise.\n \t* s390.h (s390_pool_start_insn): Likewise.\n \n-\t* s390.c (s390_output_symbolic_const): Remove support for \n+\t* s390.c (s390_output_symbolic_const): Remove support for\n \told-style pool chunks.\n \t(s390_function_epilogue): Likewise.\n-\t(s390_output_constant_pool): Likewise.  Also, fix incorrect \n+\t(s390_output_constant_pool): Likewise.  Also, fix incorrect\n \talignment for 64-bit literal pools.\n \t(print_operand_address): Remove 'y' and 'Y' format flags.\n-\t* s390.h (ASM_OUTPUT_POOL_PROLOGUE): Remove support for \n+\t* s390.h (ASM_OUTPUT_POOL_PROLOGUE): Remove support for\n \told-style pool chunks.\n \t(ASM_OUTPUT_SPECIAL_POOL_ENTRY): Likewise.\n \t(ASM_OUTPUT_POOL_EPILOGUE): Remove.\n@@ -202,23 +210,23 @@ Tue Jun 11 21:53:37 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \t* s390.c (consttable_operand): New function.\n \t* s390-protos.h (consttable_operand): Declare it.\n \t* s390.h (PREDICATE_CODES): Add consttable_operand.\n-\t* s390.md (consttable_qi, consttable_hi, consttable_si, consttable_di, \n-\tconsttable_sf, consttable_df, pool_start_31, pool_end_31, \n+\t* s390.md (consttable_qi, consttable_hi, consttable_si, consttable_di,\n+\tconsttable_sf, consttable_df, pool_start_31, pool_end_31,\n \tpool_start_64, pool_end_64, reload_base, reload_base2): New insns.\n \t* s390.c (struct constant, struct constant_pool): New data types.\n \t(constant_modes, gen_consttable): New variables.\n-\t(s390_start_pool, s390_end_pool, s390_add_pool, \n+\t(s390_start_pool, s390_end_pool, s390_add_pool,\n \ts390_dump_pool, s390_free_pool): New functions.\n-\t(s390_chunkify_pool): Completely reimplement literal pool \n+\t(s390_chunkify_pool): Completely reimplement literal pool\n \toverflow handling.\n \n \t* s390.c (s390_pool_overflow): New variable.\n \t* s390.h (s390_pool_overflow): Declare it.\n-\t* s390.md (cjump, icjump): Use it to adapt length for out-of-range \n+\t* s390.md (cjump, icjump): Use it to adapt length for out-of-range\n \tjumps in literal pool overflow situations.\n \n \t* s390.c (s390_decompose_address): Accept new-style pool chunk offsets.\n-\t(s390_frame_info): Account for possible use of RETURN_REGNUM \n+\t(s390_frame_info): Account for possible use of RETURN_REGNUM\n \tby new literal pool overflow code.\n \t(s390_emit_prologue): Likewise.\n \n@@ -340,15 +348,15 @@ Tue Jun 11 21:53:37 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \t* combine.c (try_combine): Expect insn lists from split generator.\n \t* reorg.c (relax_delay_slots): Emit SEQUENCE into insn list by\n \thand.\n-\t\n+\n 2002-06-11  Roger Sayle  <roger@eyesopen.com>\n \t    Andreas Jaeger <aj@suse.de>\n \n \t* cfgbuild.c: Update copyright years.\n \n 2002-06-11  Andreas Schwab  <schwab@suse.de>\n \n-\t* config/m68k/m68k.h (PREDICATE_CODES): Define. \n+\t* config/m68k/m68k.h (PREDICATE_CODES): Define.\n \n 2002-06-11  Eric Christopher  <echristo@redhat.com>\n \n@@ -690,7 +698,7 @@ Mon Jun 10 18:02:24 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n 2002-06-10  Tim Josling  <tej@melbpc.org.au>\n \n-         First steps to making treelang documentation compliant, based on\n+\t First steps to making treelang documentation compliant, based on\n \t instructions in sourcebuild.texi. Also add to gcc.c list of\n \t default languages.\n "}, {"sha": "655e7fdb5803478d086c0ec02cd819ba8e573cc0", "filename": "gcc/config.gcc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0ca89ddb5087f6a1b73f91e89e1b8791ee4f4f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0ca89ddb5087f6a1b73f91e89e1b8791ee4f4f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=1c0ca89ddb5087f6a1b73f91e89e1b8791ee4f4f", "patch": "@@ -69,6 +69,10 @@\n #\t\t\tmakefile-fragments, if different from\n #\t\t\t\"$cpu_type/t-$cpu_type\".\n #\n+#  extra_modes          The name of the file containing a list of extra\n+#                       machine modes, if necessary and different from\n+#                       \"$cpu_type/$cpu_type-modes.def\".\n+#\n #  float_format\t\tSet to the symbolic name for the floating-point\n #\t\t\tformats used for this machine, if different from\n #\t\t\t\"i64\".  Used to derive a header file name to\n@@ -287,6 +291,11 @@ if test -f ${srcdir}/config/${cpu_type}/${cpu_type}-protos.h\n then\n \ttm_p_file=${cpu_type}/${cpu_type}-protos.h\n fi\n+extra_modes=\n+if test -f ${srcdir}/config/${cpu_type}/${cpu_type}-modes.def\n+then\n+\textra_modes=${cpu_type}/${cpu_type}-modes.def\n+fi\n \n case $machine in\n x86_64-*-*)\n@@ -2201,6 +2210,7 @@ s390x-*-linux*)\n \ttm_file=\"s390/s390x.h s390/s390.h dbxelf.h elfos.h svr4.h linux.h s390/linux.h\"\n \ttm_p_file=s390/s390-protos.h\n \tmd_file=s390/s390.md\n+\textra_modes=s390/s390-modes.def\n \tout_file=s390/s390.c\n \ttmake_file=\"t-slibgcc-elf-ver t-linux s390/t-linux s390/t-linux64\"\n \textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n@@ -2582,18 +2592,21 @@ strongarm-*-elf*)\n \ttmake_file=arm/t-strongarm-elf\n \tout_file=arm/arm.c\n \tmd_file=arm/arm.md\n+\textra_modes=arm/arm-modes.def\n \t;;\n strongarm-*-coff*)\n \ttm_file=\"arm/semi.h arm/aout.h arm/coff.h arm/strongarm-coff.h arm/arm.h\"\n \ttmake_file=arm/t-strongarm-coff\n \tout_file=arm/arm.c\n \tmd_file=arm/arm.md\n+\textra_modes=arm/arm-modes.def\n \t;;\n strongarm-*-pe)\n \ttm_file=\"arm/semi.h arm/aout.h arm/coff.h arm/strongarm-coff.h arm/arm.h arm/pe.h arm/strongarm-pe.h\"\n \ttmake_file=arm/t-strongarm-pe\n \tout_file=arm/arm.c\n \tmd_file=arm/arm.md\n+\textra_modes=arm/arm-modes.def\n \textra_objs=pe.o\n \t;;\n thumb*-*-*)\n@@ -2667,12 +2680,14 @@ xscale-*-elf)\n \ttmake_file=arm/t-xscale-elf\n \tout_file=arm/arm.c\n \tmd_file=arm/arm.md\n+\textra_modes=arm/arm-modes.def\n \t;;\n xscale-*-coff)\n \ttm_file=\"arm/semi.h arm/aout.h arm/coff.h arm/xscale-coff.h arm/arm.h\"\n \ttmake_file=arm/t-xscale-coff\n \tout_file=arm/arm.c\n \tmd_file=arm/arm.md\n+\textra_modes=arm/arm-modes.def\n \t;;\n xstormy16-*-elf)\n \t# For historical reasons, the target files omit the 'x'."}, {"sha": "07637d60244cd5a1758d53cd8b124d3c4789ed39", "filename": "gcc/configure", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0ca89ddb5087f6a1b73f91e89e1b8791ee4f4f/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0ca89ddb5087f6a1b73f91e89e1b8791ee4f4f/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=1c0ca89ddb5087f6a1b73f91e89e1b8791ee4f4f", "patch": "@@ -5078,11 +5078,11 @@ if test x$thread_file = x; then\n fi\n \n # Look for a file containing extra machine modes.\n-if test -f $srcdir/config/${cpu_type}/${cpu_type}-modes.def; then\n-  extra_modes_file='$(srcdir)/config/'${cpu_type}/${cpu_type}-modes.def\n+if test -n \"$extra_modes\" && test -f $srcdir/config/$extra_modes; then\n+  extra_modes_file='$(srcdir)'/config/${extra_modes}\n   \n   cat >> confdefs.h <<EOF\n-#define EXTRA_MODES_FILE \"${cpu_type}/${cpu_type}-modes.def\"\n+#define EXTRA_MODES_FILE \"$extra_modes\"\n EOF\n \n   cat >> confdefs.h <<\\EOF"}, {"sha": "00b33c7bf67137ebab80f05d2b5daad0f8d9ccff", "filename": "gcc/configure.in", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0ca89ddb5087f6a1b73f91e89e1b8791ee4f4f/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0ca89ddb5087f6a1b73f91e89e1b8791ee4f4f/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=1c0ca89ddb5087f6a1b73f91e89e1b8791ee4f4f", "patch": "@@ -870,11 +870,10 @@ if test x$thread_file = x; then\n fi\n \n # Look for a file containing extra machine modes.\n-if test -f $srcdir/config/${cpu_type}/${cpu_type}-modes.def; then\n-  extra_modes_file='$(srcdir)/config/'${cpu_type}/${cpu_type}-modes.def\n+if test -n \"$extra_modes\" && test -f $srcdir/config/$extra_modes; then\n+  extra_modes_file='$(srcdir)'/config/${extra_modes}\n   AC_SUBST(extra_modes_file)\n-  AC_DEFINE_UNQUOTED(EXTRA_MODES_FILE,\n-\t\t\t   \"${cpu_type}/${cpu_type}-modes.def\",\n+  AC_DEFINE_UNQUOTED(EXTRA_MODES_FILE, \"$extra_modes\",\n   [Define to the name of a file containing a list of extra machine modes\n    for this architecture.])\n   AC_DEFINE(EXTRA_CC_MODES, 1,"}]}