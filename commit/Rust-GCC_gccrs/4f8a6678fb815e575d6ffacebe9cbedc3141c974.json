{"sha": "4f8a6678fb815e575d6ffacebe9cbedc3141c974", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY4YTY2NzhmYjgxNWU1NzVkNmZmYWNlYmU5Y2JlZGMzMTQxYzk3NA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-11-25T21:57:02Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-11-25T21:57:02Z"}, "message": "trans.c (unchecked_conversion_lhs_nop): Rename into...\n\n\t* gcc-interface/trans.c (unchecked_conversion_lhs_nop): Rename into...\n\t(unchecked_conversion_nop): ...this.  Handle actual parameters.\n\t(gnat_to_gnu): Adjust for above renaming.\n\nFrom-SVN: r154659", "tree": {"sha": "375bf91e96e795f424ecbe85eb103a51a888acb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/375bf91e96e795f424ecbe85eb103a51a888acb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f8a6678fb815e575d6ffacebe9cbedc3141c974", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f8a6678fb815e575d6ffacebe9cbedc3141c974", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f8a6678fb815e575d6ffacebe9cbedc3141c974", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f8a6678fb815e575d6ffacebe9cbedc3141c974/comments", "author": null, "committer": null, "parents": [{"sha": "ca37373a97985aed8cdba95af4c4e27484c19444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca37373a97985aed8cdba95af4c4e27484c19444", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca37373a97985aed8cdba95af4c4e27484c19444"}], "stats": {"total": 72, "additions": 63, "deletions": 9}, "files": [{"sha": "001d5a8b6aaf82aff215f17c55c9a033dccb7ca2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8a6678fb815e575d6ffacebe9cbedc3141c974/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8a6678fb815e575d6ffacebe9cbedc3141c974/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4f8a6678fb815e575d6ffacebe9cbedc3141c974", "patch": "@@ -1,3 +1,9 @@\n+2009-11-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (unchecked_conversion_lhs_nop): Rename into...\n+\t(unchecked_conversion_nop): ...this.  Handle actual parameters.\n+\t(gnat_to_gnu): Adjust for above renaming.\n+\n 2009-11-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Enumeration_Type>:"}, {"sha": "5e568a2447cc1ddc264d438219f277cf86da88e4", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8a6678fb815e575d6ffacebe9cbedc3141c974/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8a6678fb815e575d6ffacebe9cbedc3141c974/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=4f8a6678fb815e575d6ffacebe9cbedc3141c974", "patch": "@@ -3432,19 +3432,21 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n   invalidate_global_renaming_pointers ();\n }\n \f\n-/* Return whether GNAT_NODE, an unchecked type conversion, is on the LHS\n-   of an assignment and a no-op as far as gigi is concerned.  */\n+/* Return true if GNAT_NODE, an unchecked type conversion, is a no-op as far\n+   as gigi is concerned.  This is used to avoid conversions on the LHS.  */\n \n static bool\n-unchecked_conversion_lhs_nop (Node_Id gnat_node)\n+unchecked_conversion_nop (Node_Id gnat_node)\n {\n   Entity_Id from_type, to_type;\n \n-  /* The conversion must be on the LHS of an assignment.  Otherwise, even\n-     if the conversion was essentially a no-op, it could de facto ensure\n-     type consistency and this should be preserved.  */\n+  /* The conversion must be on the LHS of an assignment or an actual parameter\n+     of a call.  Otherwise, even if the conversion was essentially a no-op, it\n+     could de facto ensure type consistency and this should be preserved.  */\n   if (!(Nkind (Parent (gnat_node)) == N_Assignment_Statement\n-\t&& Name (Parent (gnat_node)) == gnat_node))\n+\t&& Name (Parent (gnat_node)) == gnat_node)\n+      && !(Nkind (Parent (gnat_node)) == N_Procedure_Call_Statement\n+\t   && Name (Parent (gnat_node)) != gnat_node))\n     return false;\n \n   from_type = Etype (Expression (gnat_node));\n@@ -4156,7 +4158,7 @@ gnat_to_gnu (Node_Id gnat_node)\n       gnu_result = gnat_to_gnu (Expression (gnat_node));\n \n       /* Skip further processing if the conversion is deemed a no-op.  */\n-      if (unchecked_conversion_lhs_nop (gnat_node))\n+      if (unchecked_conversion_nop (gnat_node))\n \t{\n \t  gnu_result_type = TREE_TYPE (gnu_result);\n \t  break;\n@@ -5409,7 +5411,7 @@ gnat_to_gnu (Node_Id gnat_node)\n       && ((Nkind (Parent (gnat_node)) == N_Assignment_Statement\n \t   && Name (Parent (gnat_node)) == gnat_node)\n \t  || (Nkind (Parent (gnat_node)) == N_Unchecked_Type_Conversion\n-\t      && unchecked_conversion_lhs_nop (Parent (gnat_node)))\n+\t      && unchecked_conversion_nop (Parent (gnat_node)))\n \t  || (Nkind (Parent (gnat_node)) == N_Procedure_Call_Statement\n \t      && Name (Parent (gnat_node)) != gnat_node)\n \t  || Nkind (Parent (gnat_node)) == N_Parameter_Association"}, {"sha": "9eff27dcdcb568b471fb15fdfdd8eb9457462d5e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8a6678fb815e575d6ffacebe9cbedc3141c974/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8a6678fb815e575d6ffacebe9cbedc3141c974/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4f8a6678fb815e575d6ffacebe9cbedc3141c974", "patch": "@@ -1,3 +1,8 @@\n+2009-11-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/pack6.ads: New test.\n+\t* gnat.dg/specs/pack6_pkg.ads: New helper.\n+\n 2009-11-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.target/powerpc/regnames-1.c: New test."}, {"sha": "cf1813d144bb18d9a062e4232482aa59dd842831", "filename": "gcc/testsuite/gnat.dg/specs/pack6.ads", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8a6678fb815e575d6ffacebe9cbedc3141c974/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8a6678fb815e575d6ffacebe9cbedc3141c974/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack6.ads?ref=4f8a6678fb815e575d6ffacebe9cbedc3141c974", "patch": "@@ -0,0 +1,24 @@\n+-- { dg-do compile }\n+\n+with Ada.Finalization;\n+with Pack6_Pkg;\n+\n+package Pack6 is\n+\n+  package Eight_Bits is new Pack6_Pkg (8);\n+\n+  type Some_Data is record\n+    Byte_1 : Eight_Bits.Object;\n+    Byte_2 : Eight_Bits.Object;\n+  end record;\n+\n+  for Some_Data use record\n+    Byte_1 at 0 range 0 .. 7;\n+    Byte_2 at 1 range 0 .. 7;\n+  end record;\n+\n+  type Top_Object is new Ada.Finalization.Controlled with record\n+    Data : Some_Data;\n+  end record;\n+\n+end Pack6;"}, {"sha": "52ded342d4b040561883366155b3b576a262bd96", "filename": "gcc/testsuite/gnat.dg/specs/pack6_pkg.ads", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8a6678fb815e575d6ffacebe9cbedc3141c974/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack6_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8a6678fb815e575d6ffacebe9cbedc3141c974/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack6_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fpack6_pkg.ads?ref=4f8a6678fb815e575d6ffacebe9cbedc3141c974", "patch": "@@ -0,0 +1,17 @@\n+generic\n+\n+  Size : Positive;\n+\n+package Pack6_Pkg is\n+\n+  type Object is private;\n+\n+private\n+\n+  type Bit is range 0 .. 1;\n+  for Bit'Size use 1;\n+\n+  type Object is array (1 .. Size) of Bit;\n+  pragma Pack (Object);\n+\n+end Pack6_Pkg;"}]}