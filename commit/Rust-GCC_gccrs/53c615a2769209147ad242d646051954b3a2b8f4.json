{"sha": "53c615a2769209147ad242d646051954b3a2b8f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNjNjE1YTI3NjkyMDkxNDdhZDI0MmQ2NDYwNTE5NTRiM2EyYjhmNA==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2015-03-05T18:56:37Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2015-03-05T18:56:37Z"}, "message": "re PR rtl-optimization/65067 (regression on accessing volatile bit field)\n\ngcc:\n2015-03-05  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR rtl-optimization/65067\n        * expmed.c (store_bit_field, extract_bit_field): Reworked the\n        strict volatile bitfield handling.\n\ntestsuite:\n2015-03-05  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * gcc.target/arm/pr65067.c: New test.\n\nFrom-SVN: r221222", "tree": {"sha": "9e9c800b382c8690b9fcedb6e5aaba6e7dd1e858", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e9c800b382c8690b9fcedb6e5aaba6e7dd1e858"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53c615a2769209147ad242d646051954b3a2b8f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c615a2769209147ad242d646051954b3a2b8f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53c615a2769209147ad242d646051954b3a2b8f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c615a2769209147ad242d646051954b3a2b8f4/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9374ef820b2e1b5410bfd9ccb4c2dbd023a369c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9374ef820b2e1b5410bfd9ccb4c2dbd023a369c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9374ef820b2e1b5410bfd9ccb4c2dbd023a369c6"}], "stats": {"total": 66, "additions": 49, "deletions": 17}, "files": [{"sha": "3ec2d1c726825bd3e172eeb9263737ea6dbce0d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c615a2769209147ad242d646051954b3a2b8f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c615a2769209147ad242d646051954b3a2b8f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53c615a2769209147ad242d646051954b3a2b8f4", "patch": "@@ -1,3 +1,9 @@\n+2015-03-05  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR rtl-optimization/65067\n+\t* expmed.c (store_bit_field, extract_bit_field): Reworked the\n+\tstrict volatile bitfield handling.\n+\n 2015-03-05  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/65318"}, {"sha": "0034203c2f707eb317d51cda762414022d7df3e7", "filename": "gcc/expmed.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c615a2769209147ad242d646051954b3a2b8f4/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c615a2769209147ad242d646051954b3a2b8f4/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=53c615a2769209147ad242d646051954b3a2b8f4", "patch": "@@ -976,20 +976,24 @@ store_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n       /* Storing any naturally aligned field can be done with a simple\n \t store.  For targets that support fast unaligned memory, any\n \t naturally sized, unit aligned field can be done directly.  */\n-      if (simple_mem_bitfield_p (str_rtx, bitsize, bitnum, fieldmode))\n+      if (bitsize == GET_MODE_BITSIZE (fieldmode))\n \t{\n \t  str_rtx = adjust_bitfield_address (str_rtx, fieldmode,\n \t\t\t\t\t     bitnum / BITS_PER_UNIT);\n \t  emit_move_insn (str_rtx, value);\n \t}\n       else\n \t{\n+\t  rtx temp;\n+\n \t  str_rtx = narrow_bit_field_mem (str_rtx, fieldmode, bitsize, bitnum,\n \t\t\t\t\t  &bitnum);\n-\t  /* Explicitly override the C/C++ memory model; ignore the\n-\t     bit range so that we can do the access in the mode mandated\n-\t     by -fstrict-volatile-bitfields instead.  */\n-\t  store_fixed_bit_field_1 (str_rtx, bitsize, bitnum, value);\n+\t  temp = copy_to_reg (str_rtx);\n+\t  if (!store_bit_field_1 (temp, bitsize, bitnum, 0, 0,\n+\t\t\t\t  fieldmode, value, true))\n+\t    gcc_unreachable ();\n+\n+\t  emit_move_insn (str_rtx, temp);\n \t}\n \n       return;\n@@ -1786,24 +1790,20 @@ extract_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \n   if (strict_volatile_bitfield_p (str_rtx, bitsize, bitnum, mode1, 0, 0))\n     {\n-      rtx result;\n-\n       /* Extraction of a full MODE1 value can be done with a load as long as\n \t the field is on a byte boundary and is sufficiently aligned.  */\n-      if (simple_mem_bitfield_p (str_rtx, bitsize, bitnum, mode1))\n-\tresult = adjust_bitfield_address (str_rtx, mode1,\n-\t\t\t\t\t  bitnum / BITS_PER_UNIT);\n-      else\n+      if (bitsize == GET_MODE_BITSIZE(mode1))\n \t{\n-\t  str_rtx = narrow_bit_field_mem (str_rtx, mode1, bitsize, bitnum,\n-\t\t\t\t\t  &bitnum);\n-\t  result = extract_fixed_bit_field_1 (mode, str_rtx, bitsize, bitnum,\n-\t\t\t\t\t      target, unsignedp);\n+\t  rtx result = adjust_bitfield_address (str_rtx, mode1,\n+\t\t\t\t\t\tbitnum / BITS_PER_UNIT);\n+\t  return convert_extracted_bit_field (result, mode, tmode, unsignedp);\n \t}\n \n-      return convert_extracted_bit_field (result, mode, tmode, unsignedp);\n+      str_rtx = narrow_bit_field_mem (str_rtx, mode1, bitsize, bitnum,\n+\t\t\t\t      &bitnum);\n+      str_rtx = copy_to_reg (str_rtx);\n     }\n-  \n+\n   return extract_bit_field_1 (str_rtx, bitsize, bitnum, unsignedp,\n \t\t\t      target, mode, tmode, true);\n }"}, {"sha": "321db122f76632dfa39e94dd2df944e00443a159", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c615a2769209147ad242d646051954b3a2b8f4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c615a2769209147ad242d646051954b3a2b8f4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53c615a2769209147ad242d646051954b3a2b8f4", "patch": "@@ -1,3 +1,7 @@\n+2015-03-05  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* gcc.target/arm/pr65067.c: New test.\n+\n 2015-03-05  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/65318"}, {"sha": "9ddd7bb9e6e908f8a9ef4356b839518a1414f08c", "filename": "gcc/testsuite/gcc.target/arm/pr65067.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c615a2769209147ad242d646051954b3a2b8f4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr65067.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c615a2769209147ad242d646051954b3a2b8f4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr65067.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr65067.c?ref=53c615a2769209147ad242d646051954b3a2b8f4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mthumb -mcpu=cortex-m3 -O2\" } */\n+\n+struct tmp {\n+ unsigned int dummy;\n+ union {\n+  struct {\n+   unsigned int xyz : 1;\n+   unsigned int mode: 3;\n+   unsigned int res : 28;\n+  } bf;\n+  unsigned int wordval;\n+ } reg;\n+};\n+\n+void set_mode(int mode)\n+{\n+ volatile struct tmp *t = (struct tmp *) 0x1000;\n+ t->reg.bf.mode = mode;\n+}\n+\n+/* { dg-final { scan-assembler \"bfi\" } } */"}]}