{"sha": "b15ef5d3f8a611af67254cdfaf126412872ca95c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE1ZWY1ZDNmOGE2MTFhZjY3MjU0Y2RmYWYxMjY0MTI4NzJjYTk1Yw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-11-07T19:33:57Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-11-07T19:33:57Z"}, "message": "rs6000: Use isel for the cstore patterns\n\nWe currently generate (sometimes pretty long) sequences of integer\ninsns to implement the various cstore patterns.  If the CPU has a fast\nisel, we can use that at the same latency as of just two integer insns\n(you also get a load immediate of 1, and sometimes one of 0 as well,\nbut those are not in the critical path: they don't depend on any other\ninstruction).\n\nThere are a few patterns that already are implemented with just two\ninstructions; so don't use isel in that case (I still need to check\nall lt/gt/ltu/gtu/le/leu/ge/geu patterns with all SI/DI combinations,\none or two might be better without isel).\n\nThis introduces a new GPR2 mode iterator, for those patterns that use\ntwo independent integer modes.\n\n\n\t* config/rs6000/rs6000.md (GPR2): New mode_iterator.\n\t(\"cstore<mode>4\"): Don't always expand with rs6000_emit_int_cmove for\n\teq and ne if TARGET_ISEL.\n\t(cmp): New code_iterator.\n\t(UNS, UNSU_, UNSIK): New code_attrs.\n\t(<code><GPR:mode><GPR2:mode>2_isel): New define_insn_and_split.\n\t(\"eq<mode>3\"): New define_expand, rename the define_insn_and_split\n\tto...\n\t(\"eq<mode>3\"): ... this.\n\t(\"ne<mode>3\"): New define_expand, rename the define_insn_and_split\n\tto...\n\t(\"ne<mode>3\"): ... this.\n\nFrom-SVN: r254508", "tree": {"sha": "267dcc501467af54d2c28993edcd7977a5214e4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/267dcc501467af54d2c28993edcd7977a5214e4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b15ef5d3f8a611af67254cdfaf126412872ca95c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15ef5d3f8a611af67254cdfaf126412872ca95c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b15ef5d3f8a611af67254cdfaf126412872ca95c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15ef5d3f8a611af67254cdfaf126412872ca95c/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d4bc3829f139406a9b8d238d834fb1580f68e1ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4bc3829f139406a9b8d238d834fb1580f68e1ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4bc3829f139406a9b8d238d834fb1580f68e1ec"}], "stats": {"total": 148, "additions": 134, "deletions": 14}, "files": [{"sha": "9c9f0ef8bb980a386d1c346b412130715ac2c8e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15ef5d3f8a611af67254cdfaf126412872ca95c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15ef5d3f8a611af67254cdfaf126412872ca95c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b15ef5d3f8a611af67254cdfaf126412872ca95c", "patch": "@@ -1,3 +1,18 @@\n+2017-11-07  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.md (GPR2): New mode_iterator.\n+\t(\"cstore<mode>4\"): Don't always expand with rs6000_emit_int_cmove for\n+\teq and ne if TARGET_ISEL.\n+\t(cmp): New code_iterator.\n+\t(UNS, UNSU_, UNSIK): New code_attrs.\n+\t(<code><GPR:mode><GPR2:mode>2_isel): New define_insn_and_split.\n+\t(\"eq<mode>3\"): New define_expand, rename the define_insn_and_split\n+\tto...\n+\t(\"eq<mode>3\"): ... this.\n+\t(\"ne<mode>3\"): New define_expand, rename the define_insn_and_split\n+\tto...\n+\t(\"ne<mode>3\"): ... this.\n+\n 2017-11-07  Julia Koval  <julia.koval@intel.com>\n \n \tPR target/82812"}, {"sha": "b800276692dbf8ae14b6d1fe2b1dfb689ddd3d8a", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 119, "deletions": 14, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15ef5d3f8a611af67254cdfaf126412872ca95c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15ef5d3f8a611af67254cdfaf126412872ca95c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=b15ef5d3f8a611af67254cdfaf126412872ca95c", "patch": "@@ -323,6 +323,9 @@\n ; of whole values in GPRs.\n (define_mode_iterator GPR [SI (DI \"TARGET_POWERPC64\")])\n \n+; And again, for patterns that need two (potentially) different integer modes.\n+(define_mode_iterator GPR2 [SI (DI \"TARGET_POWERPC64\")])\n+\n ; Any supported integer mode.\n (define_mode_iterator INT [QI HI SI DI TI PTI])\n \n@@ -11780,13 +11783,9 @@\n    (clobber (match_operand:GPR 0 \"gpc_reg_operand\"))]\n   \"\"\n {\n-  /* Use ISEL if the user asked for it.  */\n-  if (TARGET_ISEL)\n-    rs6000_emit_int_cmove (operands[0], operands[1], const1_rtx, const0_rtx);\n-\n   /* Expanding EQ and NE directly to some machine instructions does not help\n      but does hurt combine.  So don't.  */\n-  else if (GET_CODE (operands[1]) == EQ)\n+  if (GET_CODE (operands[1]) == EQ)\n     emit_insn (gen_eq<mode>3 (operands[0], operands[2], operands[3]));\n   else if (<MODE>mode == Pmode\n \t   && GET_CODE (operands[1]) == NE)\n@@ -11798,7 +11797,11 @@\n       emit_insn (gen_xor<mode>3 (operands[0], tmp, const1_rtx));\n     }\n \n-  /* Expanding the unsigned comparisons however helps a lot: all the neg_ltu\n+  /* If ISEL is fast, expand to it.  */\n+  else if (TARGET_ISEL)\n+    rs6000_emit_int_cmove (operands[0], operands[1], const1_rtx, const0_rtx);\n+\n+  /* Expanding the unsigned comparisons helps a lot: all the neg_ltu\n      etc. combinations magically work out just right.  */\n   else if (<MODE>mode == Pmode\n \t   && unsigned_comparison_operator (operands[1], VOIDmode))\n@@ -12280,18 +12283,102 @@\n   \"\")\n \n \n+(define_code_iterator cmp [eq ne lt ltu gt gtu le leu ge geu])\n+(define_code_attr UNS [(eq \"CC\")\n+\t\t       (ne \"CC\")\n+\t\t       (lt \"CC\") (ltu \"CCUNS\")\n+\t\t       (gt \"CC\") (gtu \"CCUNS\")\n+\t\t       (le \"CC\") (leu \"CCUNS\")\n+\t\t       (ge \"CC\") (geu \"CCUNS\")])\n+(define_code_attr UNSu_ [(eq \"\")\n+\t\t\t (ne \"\")\n+\t\t\t (lt \"\") (ltu \"u_\")\n+\t\t\t (gt \"\") (gtu \"u_\")\n+\t\t\t (le \"\") (leu \"u_\")\n+\t\t\t (ge \"\") (geu \"u_\")])\n+(define_code_attr UNSIK [(eq \"I\")\n+\t\t\t (ne \"I\")\n+\t\t\t (lt \"I\") (ltu \"K\")\n+\t\t\t (gt \"I\") (gtu \"K\")\n+\t\t\t (le \"I\") (leu \"K\")\n+\t\t\t (ge \"I\") (geu \"K\")])\n+\n+(define_insn_and_split \"<code><GPR:mode><GPR2:mode>2_isel\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(cmp:GPR (match_operand:GPR2 1 \"gpc_reg_operand\" \"r\")\n+\t\t (match_operand:GPR2 2 \"reg_or_<cmp:UNSu_>short_operand\" \"r<cmp:UNSIK>\")))\n+   (clobber (match_scratch:GPR 3 \"=r\"))\n+   (clobber (match_scratch:GPR 4 \"=r\"))\n+   (clobber (match_scratch:<UNS> 5 \"=y\"))]\n+  \"TARGET_ISEL\n+   && !(<CODE> == EQ && operands[2] == const0_rtx)\n+   && !(<CODE> == NE && operands[2] == const0_rtx\n+\t&& <GPR:MODE>mode == Pmode && <GPR2:MODE>mode == Pmode)\"\n+  \"#\"\n+  \"&& 1\"\n+  [(pc)]\n+{\n+  if (<CODE> == NE || <CODE> == LE || <CODE> == GE\n+      || <CODE> == LEU || <CODE> == GEU)\n+    operands[3] = const0_rtx;\n+  else\n+    {\n+      if (GET_CODE (operands[3]) == SCRATCH)\n+\toperands[3] = gen_reg_rtx (<GPR:MODE>mode);\n+      emit_move_insn (operands[3], const0_rtx);\n+    }\n+\n+  if (GET_CODE (operands[4]) == SCRATCH)\n+    operands[4] = gen_reg_rtx (<GPR:MODE>mode);\n+  emit_move_insn (operands[4], const1_rtx);\n+\n+  if (GET_CODE (operands[5]) == SCRATCH)\n+    operands[5] = gen_reg_rtx (<UNS>mode);\n+\n+  rtx c1 = gen_rtx_COMPARE (<UNS>mode, operands[1], operands[2]);\n+  emit_insn (gen_rtx_SET (operands[5], c1));\n+\n+  rtx c2 = gen_rtx_fmt_ee (<CODE>, <GPR:MODE>mode, operands[5], const0_rtx);\n+  rtx x = gen_rtx_IF_THEN_ELSE (<GPR:MODE>mode, c2, operands[4], operands[3]);\n+  emit_move_insn (operands[0], x);\n+\n+  DONE;\n+}\n+  [(set (attr \"cost\")\n+\t(if_then_else (match_test \"<CODE> == NE || <CODE> == LE || <CODE> == GE\n+\t\t\t\t   || <CODE> == LEU || <CODE> == GEU\")\n+\t\t      (const_string \"9\")\n+\t\t      (const_string \"10\")))])\n+\n (define_mode_attr scc_eq_op2 [(SI \"rKLI\")\n \t\t\t      (DI \"rKJI\")])\n \n-(define_insn_and_split \"eq<mode>3\"\n+(define_expand \"eq<mode>3\"\n+  [(parallel [\n+     (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t  (eq:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n+\t\t  (match_operand:GPR 2 \"scc_eq_operand\" \"<scc_eq_op2>\")))\n+     (clobber (match_scratch:GPR 3 \"=r\"))\n+     (clobber (match_scratch:GPR 4 \"=r\"))])]\n+  \"\"\n+{\n+  if (TARGET_ISEL && operands[2] != const0_rtx)\n+    {\n+      emit_insn (gen_eq<mode><mode>2_isel (operands[0], operands[1],\n+\t\t\t\t\t   operands[2]));\n+      DONE;\n+    }\n+})\n+\n+(define_insn_and_split \"*eq<mode>3\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n \t(eq:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n \t\t(match_operand:GPR 2 \"scc_eq_operand\" \"<scc_eq_op2>\")))\n    (clobber (match_scratch:GPR 3 \"=r\"))\n    (clobber (match_scratch:GPR 4 \"=r\"))]\n-  \"\"\n+  \"!(TARGET_ISEL && operands[2] != const0_rtx)\"\n   \"#\"\n-  \"\"\n+  \"&& 1\"\n   [(set (match_dup 4)\n \t(clz:GPR (match_dup 3)))\n    (set (match_dup 0)\n@@ -12311,16 +12398,34 @@\n \t\t      (const_string \"8\")\n \t\t      (const_string \"12\")))])\n \n-(define_insn_and_split \"ne<mode>3\"\n+(define_expand \"ne<mode>3\"\n+  [(parallel [\n+     (set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t  (ne:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n+\t\t(match_operand:P 2 \"scc_eq_operand\" \"<scc_eq_op2>\")))\n+     (clobber (match_scratch:P 3 \"=r\"))\n+     (clobber (match_scratch:P 4 \"=r\"))\n+     (clobber (reg:P CA_REGNO))])]\n+  \"\"\n+{\n+  if (TARGET_ISEL && operands[2] != const0_rtx)\n+    {\n+      emit_insn (gen_ne<mode><mode>2_isel (operands[0], operands[1],\n+\t\t\t\t\t   operands[2]));\n+      DONE;\n+    }\n+})\n+\n+(define_insn_and_split \"*ne<mode>3\"\n   [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n \t(ne:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n \t      (match_operand:P 2 \"scc_eq_operand\" \"<scc_eq_op2>\")))\n    (clobber (match_scratch:P 3 \"=r\"))\n    (clobber (match_scratch:P 4 \"=r\"))\n    (clobber (reg:P CA_REGNO))]\n-  \"!TARGET_ISEL\"\n+  \"!(TARGET_ISEL && operands[2] != const0_rtx)\"\n   \"#\"\n-  \"\"\n+  \"&& 1\"\n   [(parallel [(set (match_dup 4)\n \t\t   (plus:P (match_dup 3)\n \t\t\t   (const_int -1)))\n@@ -12573,9 +12678,9 @@\n    (clobber (match_scratch:SI 3 \"=r\"))\n    (clobber (match_scratch:SI 4 \"=r\"))\n    (clobber (match_scratch:EXTSI 5 \"=r\"))]\n-  \"\"\n+  \"!TARGET_ISEL\"\n   \"#\"\n-  \"\"\n+  \"&& 1\"\n   [(set (match_dup 4)\n \t(clz:SI (match_dup 3)))\n    (set (match_dup 5)"}]}