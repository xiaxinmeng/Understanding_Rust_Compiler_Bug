{"sha": "d02ab5925b612678beb975d99951b1d2052958a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAyYWI1OTI1YjYxMjY3OGJlYjk3NWQ5OTk1MWIxZDIwNTI5NThhMQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-02-10T17:01:48Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-10T18:10:57Z"}, "message": "Add check for break outside of a loop.\n\nThis will be needed to stop the compiler proceding to continue and break\nexpressions without a loop context.", "tree": {"sha": "8d3aab8d2d2d4ede40eda66d6ed0a166000798b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d3aab8d2d2d4ede40eda66d6ed0a166000798b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d02ab5925b612678beb975d99951b1d2052958a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d02ab5925b612678beb975d99951b1d2052958a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d02ab5925b612678beb975d99951b1d2052958a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d02ab5925b612678beb975d99951b1d2052958a1/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06c9fd97bf3d86a08eadcadb1bc59cb392116d16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06c9fd97bf3d86a08eadcadb1bc59cb392116d16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06c9fd97bf3d86a08eadcadb1bc59cb392116d16"}], "stats": {"total": 140, "additions": 85, "deletions": 55}, "files": [{"sha": "6a45fefde8896f4ed925fac8d429b32dfcdcddda", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 50, "deletions": 34, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02ab5925b612678beb975d99951b1d2052958a1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02ab5925b612678beb975d99951b1d2052958a1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=d02ab5925b612678beb975d99951b1d2052958a1", "patch": "@@ -32,9 +32,9 @@ namespace Resolver {\n class TypeCheckExpr : public TypeCheckBase\n {\n public:\n-  static TyTy::TyBase *Resolve (HIR::Expr *expr)\n+  static TyTy::TyBase *Resolve (HIR::Expr *expr, bool inside_loop)\n   {\n-    TypeCheckExpr resolver;\n+    TypeCheckExpr resolver (inside_loop);\n     expr->accept_vis (resolver);\n \n     if (resolver.infered == nullptr)\n@@ -53,7 +53,8 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::TupleIndexExpr &expr)\n   {\n-    auto resolved = TypeCheckExpr::Resolve (expr.get_tuple_expr ().get ());\n+    auto resolved\n+      = TypeCheckExpr::Resolve (expr.get_tuple_expr ().get (), inside_loop);\n     if (resolved == nullptr)\n       {\n \trust_error_at (expr.get_tuple_expr ()->get_locus_slow (),\n@@ -129,7 +130,7 @@ class TypeCheckExpr : public TypeCheckBase\n     std::vector<HirId> fields;\n     for (auto &elem : expr.get_tuple_elems ())\n       {\n-\tauto field_ty = TypeCheckExpr::Resolve (elem.get ());\n+\tauto field_ty = TypeCheckExpr::Resolve (elem.get (), false);\n \tfields.push_back (field_ty->get_ref ());\n       }\n     infered = new TyTy::TupleType (expr.get_mappings ().get_hirid (), fields);\n@@ -146,7 +147,7 @@ class TypeCheckExpr : public TypeCheckBase\n     auto fn_return_tyty = context->peek_return_type ();\n     rust_assert (fn_return_tyty != nullptr);\n \n-    auto expr_ty = TypeCheckExpr::Resolve (expr.get_expr ());\n+    auto expr_ty = TypeCheckExpr::Resolve (expr.get_expr (), false);\n     if (expr_ty == nullptr)\n       {\n \trust_error_at (expr.get_locus (),\n@@ -162,7 +163,8 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::CallExpr &expr)\n   {\n-    TyTy::TyBase *function_tyty = TypeCheckExpr::Resolve (expr.get_fnexpr ());\n+    TyTy::TyBase *function_tyty\n+      = TypeCheckExpr::Resolve (expr.get_fnexpr (), false);\n     if (function_tyty == nullptr)\n       return;\n \n@@ -178,7 +180,8 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::MethodCallExpr &expr)\n   {\n-    auto receiver_tyty = TypeCheckExpr::Resolve (expr.get_receiver ().get ());\n+    auto receiver_tyty\n+      = TypeCheckExpr::Resolve (expr.get_receiver ().get (), false);\n     if (receiver_tyty == nullptr)\n       {\n \trust_error_at (expr.get_receiver ()->get_locus_slow (),\n@@ -239,8 +242,8 @@ class TypeCheckExpr : public TypeCheckBase\n   {\n     infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n \n-    auto lhs = TypeCheckExpr::Resolve (expr.get_lhs ());\n-    auto rhs = TypeCheckExpr::Resolve (expr.get_rhs ());\n+    auto lhs = TypeCheckExpr::Resolve (expr.get_lhs (), false);\n+    auto rhs = TypeCheckExpr::Resolve (expr.get_rhs (), false);\n \n     auto result = lhs->combine (rhs);\n     if (result == nullptr)\n@@ -446,8 +449,8 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::ArithmeticOrLogicalExpr &expr)\n   {\n-    auto lhs = TypeCheckExpr::Resolve (expr.get_lhs ());\n-    auto rhs = TypeCheckExpr::Resolve (expr.get_rhs ());\n+    auto lhs = TypeCheckExpr::Resolve (expr.get_lhs (), false);\n+    auto rhs = TypeCheckExpr::Resolve (expr.get_rhs (), false);\n \n     bool valid_lhs = validate_arithmetic_type (lhs, expr.get_expr_type ());\n     bool valid_rhs = validate_arithmetic_type (rhs, expr.get_expr_type ());\n@@ -467,8 +470,8 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::ComparisonExpr &expr)\n   {\n-    auto lhs = TypeCheckExpr::Resolve (expr.get_lhs ());\n-    auto rhs = TypeCheckExpr::Resolve (expr.get_rhs ());\n+    auto lhs = TypeCheckExpr::Resolve (expr.get_lhs (), false);\n+    auto rhs = TypeCheckExpr::Resolve (expr.get_rhs (), false);\n \n     auto result = lhs->combine (rhs);\n     if (result == nullptr || result->get_kind () == TyTy::TypeKind::ERROR)\n@@ -482,8 +485,8 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::LazyBooleanExpr &expr)\n   {\n-    auto lhs = TypeCheckExpr::Resolve (expr.get_lhs ());\n-    auto rhs = TypeCheckExpr::Resolve (expr.get_rhs ());\n+    auto lhs = TypeCheckExpr::Resolve (expr.get_lhs (), false);\n+    auto rhs = TypeCheckExpr::Resolve (expr.get_rhs (), false);\n \n     // we expect the lhs and rhs must be bools at this point\n     TyTy::BoolType elhs (expr.get_mappings ().get_hirid ());\n@@ -503,7 +506,7 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::NegationExpr &expr)\n   {\n-    auto negated_expr_ty = TypeCheckExpr::Resolve (expr.get_expr ());\n+    auto negated_expr_ty = TypeCheckExpr::Resolve (expr.get_expr (), false);\n \n     // https://doc.rust-lang.org/reference/expressions/operator-expr.html#negation-operators\n     switch (expr.get_negation_type ())\n@@ -552,26 +555,29 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::IfExpr &expr)\n   {\n-    TypeCheckExpr::Resolve (expr.get_if_condition ());\n-    TypeCheckExpr::Resolve (expr.get_if_block ());\n+    TypeCheckExpr::Resolve (expr.get_if_condition (), false);\n+    TypeCheckExpr::Resolve (expr.get_if_block (), inside_loop);\n \n     infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::IfExprConseqElse &expr)\n   {\n-    TypeCheckExpr::Resolve (expr.get_if_condition ());\n-    auto if_blk_resolved = TypeCheckExpr::Resolve (expr.get_if_block ());\n-    auto else_blk_resolved = TypeCheckExpr::Resolve (expr.get_else_block ());\n+    TypeCheckExpr::Resolve (expr.get_if_condition (), false);\n+    auto if_blk_resolved\n+      = TypeCheckExpr::Resolve (expr.get_if_block (), inside_loop);\n+    auto else_blk_resolved\n+      = TypeCheckExpr::Resolve (expr.get_else_block (), inside_loop);\n \n     infered = if_blk_resolved->combine (else_blk_resolved);\n   }\n \n   void visit (HIR::IfExprConseqIf &expr)\n   {\n-    TypeCheckExpr::Resolve (expr.get_if_condition ());\n-    auto if_blk = TypeCheckExpr::Resolve (expr.get_if_block ());\n-    auto else_blk = TypeCheckExpr::Resolve (expr.get_conseq_if_expr ());\n+    TypeCheckExpr::Resolve (expr.get_if_condition (), false);\n+    auto if_blk = TypeCheckExpr::Resolve (expr.get_if_block (), inside_loop);\n+    auto else_blk\n+      = TypeCheckExpr::Resolve (expr.get_conseq_if_expr (), inside_loop);\n \n     infered = if_blk->combine (else_blk);\n   }\n@@ -589,8 +595,8 @@ class TypeCheckExpr : public TypeCheckBase\n \treturn;\n       }\n \n-    auto resolved_index_expr\n-      = size_ty->combine (TypeCheckExpr::Resolve (expr.get_index_expr ()));\n+    auto resolved_index_expr = size_ty->combine (\n+      TypeCheckExpr::Resolve (expr.get_index_expr (), false));\n     if (resolved_index_expr == nullptr)\n       {\n \trust_error_at (expr.get_index_expr ()->get_locus_slow (),\n@@ -637,7 +643,7 @@ class TypeCheckExpr : public TypeCheckBase\n   {\n     std::vector<TyTy::TyBase *> types;\n     elems.iterate ([&] (HIR::Expr *e) mutable -> bool {\n-      types.push_back (TypeCheckExpr::Resolve (e));\n+      types.push_back (TypeCheckExpr::Resolve (e, false));\n       return true;\n     });\n \n@@ -653,7 +659,8 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::ArrayElemsCopied &elems)\n   {\n-    infered_array_elems = TypeCheckExpr::Resolve (elems.get_elem_to_copy ());\n+    infered_array_elems\n+      = TypeCheckExpr::Resolve (elems.get_elem_to_copy (), false);\n   }\n \n   void visit (HIR::StructExprStructFields &struct_expr)\n@@ -667,13 +674,13 @@ class TypeCheckExpr : public TypeCheckBase\n \t    expr.as_string ().c_str (),\n \t    expr.get_expr_in_parens ()->as_string ().c_str ());\n \n-    infered = TypeCheckExpr::Resolve (expr.get_expr_in_parens ().get ());\n+    infered = TypeCheckExpr::Resolve (expr.get_expr_in_parens ().get (), false);\n   }\n \n   void visit (HIR::FieldAccessExpr &expr)\n   {\n     auto struct_base\n-      = TypeCheckExpr::Resolve (expr.get_receiver_expr ().get ());\n+      = TypeCheckExpr::Resolve (expr.get_receiver_expr ().get (), false);\n \n     bool is_valid_type = struct_base->get_kind () == TyTy::TypeKind::ADT;\n     if (!is_valid_type)\n@@ -750,19 +757,26 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::LoopExpr &expr)\n   {\n-    infered = TypeCheckExpr::Resolve (expr.get_loop_block ().get ());\n+    infered = TypeCheckExpr::Resolve (expr.get_loop_block ().get (), true);\n   }\n \n   void visit (HIR::BreakExpr &expr)\n   {\n+    if (!inside_loop)\n+      {\n+\trust_error_at (expr.get_locus (), \"cannot `break` outside of a loop\");\n+\treturn;\n+      }\n+\n     infered = expr.has_break_expr ()\n-\t\t? TypeCheckExpr::Resolve (expr.get_expr ().get ())\n+\t\t? TypeCheckExpr::Resolve (expr.get_expr ().get (), false)\n \t\t: new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n   }\n \n private:\n-  TypeCheckExpr ()\n-    : TypeCheckBase (), infered (nullptr), infered_array_elems (nullptr)\n+  TypeCheckExpr (bool inside_loop)\n+    : TypeCheckBase (), infered (nullptr), infered_array_elems (nullptr),\n+      inside_loop (inside_loop)\n   {}\n \n   bool\n@@ -813,6 +827,8 @@ class TypeCheckExpr : public TypeCheckBase\n \n   TyTy::TyBase *infered;\n   TyTy::TyBase *infered_array_elems;\n+\n+  bool inside_loop;\n };\n \n } // namespace Resolver"}, {"sha": "3e835b727f7bc969e69b1736e679d0cbf6e69a36", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02ab5925b612678beb975d99951b1d2052958a1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02ab5925b612678beb975d99951b1d2052958a1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=d02ab5925b612678beb975d99951b1d2052958a1", "patch": "@@ -40,7 +40,8 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n   void visit (HIR::ConstantItem &constant)\n   {\n     TyTy::TyBase *type = TypeCheckType::Resolve (constant.get_type ());\n-    TyTy::TyBase *expr_type = TypeCheckExpr::Resolve (constant.get_expr ());\n+    TyTy::TyBase *expr_type\n+      = TypeCheckExpr::Resolve (constant.get_expr (), false);\n \n     context->insert_type (constant.get_mappings (), type->combine (expr_type));\n   }\n@@ -170,7 +171,7 @@ class TypeCheckImplItem : public TypeCheckBase\n     auto expected_ret_tyty = resolve_fn_type->return_type ();\n     context->push_return_type (expected_ret_tyty);\n \n-    auto result = TypeCheckExpr::Resolve (function.function_body.get ());\n+    auto result = TypeCheckExpr::Resolve (function.function_body.get (), false);\n     auto ret_resolved = expected_ret_tyty->combine (result);\n     if (ret_resolved == nullptr)\n       return;\n@@ -202,7 +203,8 @@ class TypeCheckImplItem : public TypeCheckBase\n     auto expected_ret_tyty = resolve_fn_type->return_type ();\n     context->push_return_type (expected_ret_tyty);\n \n-    auto result = TypeCheckExpr::Resolve (method.get_function_body ().get ());\n+    auto result\n+      = TypeCheckExpr::Resolve (method.get_function_body ().get (), false);\n     auto ret_resolved = expected_ret_tyty->combine (result);\n     if (ret_resolved == nullptr)\n       return;"}, {"sha": "f54956c608066dc4f2a4a2473cbdfe5cb96816a5", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02ab5925b612678beb975d99951b1d2052958a1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02ab5925b612678beb975d99951b1d2052958a1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=d02ab5925b612678beb975d99951b1d2052958a1", "patch": "@@ -75,7 +75,7 @@ class TypeCheckItem : public TypeCheckBase\n     auto expected_ret_tyty = resolve_fn_type->return_type ();\n     context->push_return_type (expected_ret_tyty);\n \n-    auto result = TypeCheckExpr::Resolve (function.function_body.get ());\n+    auto result = TypeCheckExpr::Resolve (function.function_body.get (), false);\n     auto ret_resolved = expected_ret_tyty->combine (result);\n     if (ret_resolved == nullptr)\n       return;"}, {"sha": "195e48341b883ead9435d8c01cd37b40feb202d9", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02ab5925b612678beb975d99951b1d2052958a1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02ab5925b612678beb975d99951b1d2052958a1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=d02ab5925b612678beb975d99951b1d2052958a1", "patch": "@@ -30,21 +30,21 @@ namespace Resolver {\n class TypeCheckStmt : public TypeCheckBase\n {\n public:\n-  static TyTy::TyBase *Resolve (HIR::Stmt *stmt)\n+  static TyTy::TyBase *Resolve (HIR::Stmt *stmt, bool inside_loop)\n   {\n-    TypeCheckStmt resolver;\n+    TypeCheckStmt resolver (inside_loop);\n     stmt->accept_vis (resolver);\n     return resolver.infered;\n   }\n \n   void visit (HIR::ExprStmtWithBlock &stmt)\n   {\n-    infered = TypeCheckExpr::Resolve (stmt.get_expr ());\n+    infered = TypeCheckExpr::Resolve (stmt.get_expr (), inside_loop);\n   }\n \n   void visit (HIR::ExprStmtWithoutBlock &stmt)\n   {\n-    infered = TypeCheckExpr::Resolve (stmt.get_expr ());\n+    infered = TypeCheckExpr::Resolve (stmt.get_expr (), inside_loop);\n   }\n \n   void visit (HIR::LetStmt &stmt)\n@@ -54,7 +54,8 @@ class TypeCheckStmt : public TypeCheckBase\n     TyTy::TyBase *init_expr_ty = nullptr;\n     if (stmt.has_init_expr ())\n       {\n-\tinit_expr_ty = TypeCheckExpr::Resolve (stmt.get_init_expr ());\n+\tinit_expr_ty\n+\t  = TypeCheckExpr::Resolve (stmt.get_init_expr (), inside_loop);\n \tif (init_expr_ty == nullptr)\n \t  return;\n \n@@ -105,9 +106,12 @@ class TypeCheckStmt : public TypeCheckBase\n   }\n \n private:\n-  TypeCheckStmt () : TypeCheckBase (), infered (nullptr) {}\n+  TypeCheckStmt (bool inside_loop)\n+    : TypeCheckBase (), infered (nullptr), inside_loop (inside_loop)\n+  {}\n \n   TyTy::TyBase *infered;\n+  bool inside_loop;\n };\n \n } // namespace Resolver"}, {"sha": "6d4c876ade341b1bc10bab34488297f4f924a9bb", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02ab5925b612678beb975d99951b1d2052958a1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02ab5925b612678beb975d99951b1d2052958a1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=d02ab5925b612678beb975d99951b1d2052958a1", "patch": "@@ -86,15 +86,16 @@ class TypeCheckTopLevel : public TypeCheckBase\n   void visit (HIR::StaticItem &var)\n   {\n     TyTy::TyBase *type = TypeCheckType::Resolve (var.get_type ());\n-    TyTy::TyBase *expr_type = TypeCheckExpr::Resolve (var.get_expr ());\n+    TyTy::TyBase *expr_type = TypeCheckExpr::Resolve (var.get_expr (), false);\n \n     context->insert_type (var.get_mappings (), type->combine (expr_type));\n   }\n \n   void visit (HIR::ConstantItem &constant)\n   {\n     TyTy::TyBase *type = TypeCheckType::Resolve (constant.get_type ());\n-    TyTy::TyBase *expr_type = TypeCheckExpr::Resolve (constant.get_expr ());\n+    TyTy::TyBase *expr_type\n+      = TypeCheckExpr::Resolve (constant.get_expr (), false);\n \n     context->insert_type (constant.get_mappings (), type->combine (expr_type));\n   }"}, {"sha": "00a92b06cbb4704a4207485d68dc1222905244c3", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02ab5925b612678beb975d99951b1d2052958a1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02ab5925b612678beb975d99951b1d2052958a1/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=d02ab5925b612678beb975d99951b1d2052958a1", "patch": "@@ -112,7 +112,7 @@ TypeCheckExpr::visit (HIR::BlockExpr &expr)\n     bool is_final_expr\n       = is_final_stmt && (!expr.has_expr () || !expr.tail_expr_reachable ());\n \n-    auto resolved = TypeCheckStmt::Resolve (s);\n+    auto resolved = TypeCheckStmt::Resolve (s, inside_loop);\n     if (resolved == nullptr)\n       {\n \trust_error_at (s->get_locus_slow (), \"failure to resolve type\");\n@@ -137,7 +137,8 @@ TypeCheckExpr::visit (HIR::BlockExpr &expr)\n     {\n       delete block_tyty;\n \n-      block_tyty = TypeCheckExpr::Resolve (expr.get_final_expr ().get ());\n+      block_tyty\n+\t= TypeCheckExpr::Resolve (expr.get_final_expr ().get (), inside_loop);\n     }\n \n   infered = block_tyty->clone ();\n@@ -160,7 +161,8 @@ TypeCheckStructExpr::visit (HIR::StructExprStructFields &struct_expr)\n   if (struct_expr.has_struct_base ())\n     {\n       TyTy::TyBase *base_resolved\n-\t= TypeCheckExpr::Resolve (struct_expr.struct_base->base_struct.get ());\n+\t= TypeCheckExpr::Resolve (struct_expr.struct_base->base_struct.get (),\n+\t\t\t\t  false);\n       resolved = struct_path_resolved->combine (base_resolved);\n       if (resolved == nullptr)\n \t{\n@@ -326,7 +328,7 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIdentifierValue &field)\n     }\n \n   size_t field_index;\n-  TyTy::TyBase *value = TypeCheckExpr::Resolve (field.get_value ());\n+  TyTy::TyBase *value = TypeCheckExpr::Resolve (field.get_value (), false);\n   TyTy::StructFieldType *field_type\n     = struct_path_resolved->get_field (field.field_name, &field_index);\n   if (field_type == nullptr)\n@@ -355,7 +357,7 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIndexValue &field)\n     }\n \n   size_t field_index;\n-  TyTy::TyBase *value = TypeCheckExpr::Resolve (field.get_value ());\n+  TyTy::TyBase *value = TypeCheckExpr::Resolve (field.get_value (), false);\n   TyTy::StructFieldType *field_type\n     = struct_path_resolved->get_field (field_name, &field_index);\n   if (field_type == nullptr)\n@@ -395,7 +397,7 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIdentifier &field)\n   // existing code to figure out the type\n   HIR::IdentifierExpr expr (field.get_mappings (), field.get_field_name (),\n \t\t\t    field.get_locus ());\n-  TyTy::TyBase *value = TypeCheckExpr::Resolve (&expr);\n+  TyTy::TyBase *value = TypeCheckExpr::Resolve (&expr, false);\n \n   resolved_field = field_type->get_field_type ()->combine (value);\n   if (resolved_field != nullptr)"}, {"sha": "e12d5ffcc32f1596199248e892f09229bed80f69", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02ab5925b612678beb975d99951b1d2052958a1/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02ab5925b612678beb975d99951b1d2052958a1/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=d02ab5925b612678beb975d99951b1d2052958a1", "patch": "@@ -501,7 +501,7 @@ TypeCheckCallExpr::visit (ADTType &type)\n     StructFieldType *field = type.get_field (i);\n     TyBase *field_tyty = field->get_field_type ();\n \n-    TyBase *arg = Resolver::TypeCheckExpr::Resolve (p);\n+    TyBase *arg = Resolver::TypeCheckExpr::Resolve (p, false);\n     if (arg == nullptr)\n       {\n \trust_error_at (p->get_locus_slow (), \"failed to resolve argument type\");\n@@ -542,7 +542,7 @@ TypeCheckCallExpr::visit (FnType &type)\n   size_t i = 0;\n   call.iterate_params ([&] (HIR::Expr *param) mutable -> bool {\n     auto fnparam = type.param_at (i);\n-    auto argument_expr_tyty = Resolver::TypeCheckExpr::Resolve (param);\n+    auto argument_expr_tyty = Resolver::TypeCheckExpr::Resolve (param, false);\n     if (argument_expr_tyty == nullptr)\n       {\n \trust_error_at (param->get_locus_slow (),\n@@ -593,7 +593,7 @@ TypeCheckMethodCallExpr::visit (FnType &type)\n   size_t i = 1;\n   call.iterate_params ([&] (HIR::Expr *param) mutable -> bool {\n     auto fnparam = type.param_at (i);\n-    auto argument_expr_tyty = Resolver::TypeCheckExpr::Resolve (param);\n+    auto argument_expr_tyty = Resolver::TypeCheckExpr::Resolve (param, false);\n     if (argument_expr_tyty == nullptr)\n       {\n \trust_error_at (param->get_locus_slow (),"}, {"sha": "401a5751d73ca485d2aa9673b4bd8124d2a6c2f4", "filename": "gcc/testsuite/rust.test/fail_compilation/break1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02ab5925b612678beb975d99951b1d2052958a1/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fbreak1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02ab5925b612678beb975d99951b1d2052958a1/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fbreak1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fbreak1.rs?ref=d02ab5925b612678beb975d99951b1d2052958a1", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let a;\n+    a = 1;\n+    break a;\n+}"}]}