{"sha": "47d2dcd1397bf02b79515c39438e0ea9898f9056", "node_id": "C_kwDOANBUbNoAKDQ3ZDJkY2QxMzk3YmYwMmI3OTUxNWMzOTQzOGUwZWE5ODk4ZjkwNTY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-06T00:17:07Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-06T00:17:07Z"}, "message": "Daily bump.", "tree": {"sha": "c395b3eb800aca00e6f8b76cbc78effc54c87cd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c395b3eb800aca00e6f8b76cbc78effc54c87cd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47d2dcd1397bf02b79515c39438e0ea9898f9056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d2dcd1397bf02b79515c39438e0ea9898f9056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47d2dcd1397bf02b79515c39438e0ea9898f9056", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d2dcd1397bf02b79515c39438e0ea9898f9056/comments", "author": null, "committer": null, "parents": [{"sha": "5f38bf14bcb3ffe9fcd482b87cbf381df24a31df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f38bf14bcb3ffe9fcd482b87cbf381df24a31df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f38bf14bcb3ffe9fcd482b87cbf381df24a31df"}], "stats": {"total": 660, "additions": 659, "deletions": 1}, "files": [{"sha": "958ccc686d14bda6b99e25ceacfc0b054cae8782", "filename": "gcc/ChangeLog", "status": "modified", "additions": 305, "deletions": 0, "changes": 305, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d2dcd1397bf02b79515c39438e0ea9898f9056/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d2dcd1397bf02b79515c39438e0ea9898f9056/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47d2dcd1397bf02b79515c39438e0ea9898f9056", "patch": "@@ -1,3 +1,308 @@\n+2022-09-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-fold.cc\n+\t(fold_using_range::range_of_builtin_int_call): Ignore sign bit\n+\twhen there's the possibility of a NAN.\n+\n+2022-09-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-fold.cc\n+\t(fold_using_range::range_of_builtin_int_call): Fold a set signbit\n+\tin __builtin_signbit to nonzero.\n+\n+2022-09-05  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR target/106453\n+\t* config/i386/i386.md (sse4_2_crc32di): Model that only low 32\n+\tbits of operand 0 are consumed, and the result is zero-extended\n+\tto 64 bits.\n+\n+2022-09-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR middle-end/106831\n+\t* value-range.h (frange::supports_p): Disable decimal floats.\n+\t* range-op-float.cc (frange_drop_inf): Remove DECIMAL_FLOAT_MODE_P\n+\tcheck.\n+\t(frange_drop_ninf): Same.\n+\n+2022-09-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR middle-end/106824\n+\t* value-range.cc (frange::set_nan): Set undefined when updating a\n+\tNAN to a non-NAN.\n+\n+2022-09-05  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/riscv.cc (riscv_option_override): Fix wrong\n+\tcondition for MASK_DIV and simplify incompatible checking.\n+\t* config/riscv/riscv.md (muldi3): Adding parentheses.\n+\n+2022-09-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.cc (aarch64_validate_march): Check if invalid arch\n+\tstring is a valid -mcpu string and emit hint.\n+\n+2022-09-05  LiaoShihua  <shihua@iscas.ac.cn>\n+\n+\t* common/config/riscv/riscv-common.cc: Add Zmmul.\n+\t* config/riscv/riscv-opts.h (MASK_ZMMUL): New.\n+\t(TARGET_ZMMUL): Ditto.\n+\t* config/riscv/riscv.cc (riscv_option_override):Ditto.\n+\t* config/riscv/riscv.md: Add Zmmul\n+\t* config/riscv/riscv.opt: Ditto.\n+\n+2022-09-05  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-cfg.h (get_cases_for_edge): Declare.\n+\t* tree-cfg.cc (get_cases_for_edge): Export.\n+\t* tree-ssa-uninit.cc (execute_late_warn_uninitialized):\n+\tStart and end recording case labels.\n+\t* gimple-predicate-analysis.cc (MAX_SWITCH_CASES): Remove.\n+\t(predicate::init_from_control_deps): Use get_cases_for_edge.\n+\n+2022-09-05  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-predicate-analysis.cc (MAX_POSTDOM_CHECK): Remove.\n+\t(compute_control_dep_chain): Move uninit-control-dep-attempts\n+\tchecking where it also counts the post-dominator check\n+\tinvocations.\n+\n+2022-09-05  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-predicate-analysis.h (predicate::debug): New.\n+\t(predicate::dump): Add FILE * argument, add base overload.\n+\t* gimple-predicate-analysis.cc (debug): New.\n+\t(dump_pred_info): Add FILE * argument.\n+\t(dump_pred_chain): Likewise.\n+\t(predicate::dump): Split out preamble into overload.  Add\n+\tFILE * argument.\n+\t(predicate::debug): New.\n+\t(predicate::simplify): Adjust.\n+\t(predicate::normalize): Likewise.\n+\t(predicate::init_from_control_deps): Likewise.\n+\n+2022-09-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h\n+\t(aarch64_init_simd_builtins): Remove prototype.\n+\t* config/aarch64/aarch64-builtins.cc\n+\t(aarch64_simd_builtins_initialized_p): Delete.\n+\t(aarch64_init_simd_builtins): Make static.  Remove protection\n+\tagainst multiple calls.\n+\t* config/aarch64/aarch64-c.cc (aarch64_pragma_target_parse): Remove\n+\tlazy SIMD builtin initialization.\n+\t* config/aarch64/aarch64.cc\n+\t(aarch64_option_valid_attribute_p): Likewise.\n+\n+2022-09-05  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* config/loongarch/genopts/loongarch.opt.in: Add\n+\t-mdirect-extern-access option.\n+\t* config/loongarch/loongarch.opt: Regenerate.\n+\t* config/loongarch/loongarch.cc\n+\t(loongarch_symbol_binds_local_p): Return true if\n+\tTARGET_DIRECT_EXTERN_ACCESS.\n+\t(loongarch_option_override_internal): Complain if\n+\t-mdirect-extern-access is used with -fPIC or -fpic.\n+\t* doc/invoke.texi: Document -mdirect-extern-access for\n+\tLoongArch.\n+\n+2022-09-05  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/tm.texi.in: Rename DEBUGGER_REGISTER_NUMBER to\n+\t  DEBUGGER_REGNO.\n+\t* doc/tm.texi: Regenerate.\n+\n+2022-09-05  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_dbx_regno):\n+\tRename DBX_REGISTER_NUMBER to DEBUGGER_REGNO.\n+\t(aarch64_debugger_regno): Likewise.\n+\t* config/aarch64/aarch64.cc (aarch64_dbx_regno): Likewise.\n+\t(aarch64_debugger_regno): Likewise.\n+\t* config/aarch64/aarch64.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t(DWARF_FRAME_REGNUM): Likewise.\n+\t* config/alpha/alpha.h (DWARF_FRAME_REGNUM): Likewise.\n+\t* config/arc/arc.cc (arc_init_reg_tables): Likewise.\n+\t* config/arc/arc.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/arm/arm-protos.h (arm_dbx_regno): Likewise.\n+\t(arm_debugger_regno): Likewise.\n+\t* config/arm/arm.cc (arm_dbx_regno): Likewise.\n+\t(arm_debugger_regno): Likewise.\n+\t* config/arm/arm.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/bfin/bfin.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/c6x/c6x.cc: Likewise.\n+\t* config/c6x/c6x.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/cris/cris.h (enum reg_class): Likewise.\n+\t(DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/csky/csky.cc (enum reg_class): Likewise.\n+\t* config/csky/csky.h (DWARF_FRAME_REGNUM): Likewise.\n+\t(DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/frv/frv.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/gcn/gcn-hsa.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/gcn/gcn.cc (print_operand): Likewise.\n+\t* config/i386/bsd.h (ASM_QUAD): Likewise.\n+\t* config/i386/cygming.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t(DWARF_FRAME_REGNUM): Likewise.\n+\t* config/i386/darwin.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/i386/djgpp.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/i386/dragonfly.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/i386/freebsd.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/i386/gas.h: Likewise.\n+\t* config/i386/gnu-user.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/i386/i386.cc (enum reg_class): Likewise.\n+\t* config/i386/i386.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/i386/i386elf.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/i386/iamcu.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/i386/lynx.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/i386/netbsd-elf.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/i386/nto.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/i386/openbsdelf.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/i386/sysv4.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/i386/vxworks.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/i386/x86-64.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/ia64/ia64-protos.h (ia64_dbx_regno): Likewise.\n+\t(ia64_debugger_regno): Likewise.\n+\t* config/ia64/ia64.cc (ia64_output_function_prologue): Likewise.\n+\t(ia64_dbx_regno): Likewise.\n+\t(ia64_debugger_regno): Likewise.\n+\t(process_cfa_adjust_cfa): Likewise.\n+\t(process_cfa_register): Likewise.\n+\t(ia64_asm_unwind_emit): Likewise.\n+\t* config/ia64/ia64.h: Likewise.\n+\t* config/ia64/sysv4.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/lm32/lm32.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/m32c/m32c.cc (m32c_eh_return_stackadj_rtx): Likewise.\n+\t* config/m32c/m32c.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/m68k/linux.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/m68k/m68k.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t(__transfer_from_trampoline): Likewise.\n+\t* config/m68k/m68kelf.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/m68k/netbsd-elf.h (M68K_STATIC_CHAIN_REG_NAME): Likewise.\n+\t(DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/microblaze/microblaze.cc (microblaze_option_override): Likewise.\n+\t* config/microblaze/microblaze.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t(GP_DBX_FIRST): Likewise.\n+\t(GP_DEBUGGER_FIRST): Likewise.\n+\t* config/mips/vxworks.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/mmix/mmix-protos.h (mmix_dbx_regno): Likewise.\n+\t(mmix_debugger_regno): Likewise.\n+\t* config/mmix/mmix.cc (mmix_dbx_regno): Likewise.\n+\t(mmix_debugger_regno): Likewise.\n+\t* config/mmix/mmix.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/nds32/nds32-protos.h (nds32_dbx_regno): Likewise.\n+\t(nds32_debugger_regno): Likewise.\n+\t* config/nds32/nds32.cc (nds32_dbx_regno): Likewise.\n+\t(nds32_debugger_regno): Likewise.\n+\t(nds32_use_blocks_for_constant_p): Likewise.\n+\t* config/nds32/nds32.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/nvptx/nvptx.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/or1k/or1k.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/pa/pa32-regs.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/pa/pa64-regs.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/rs6000/rs6000-protos.h (rs6000_dbx_regno): Likewise.\n+\t(rs6000_debugger_regno): Likewise.\n+\t* config/rs6000/rs6000.cc (rs6000_dbx_regno): Likewise.\n+\t(rs6000_debugger_regno): Likewise.\n+\t* config/rs6000/rs6000.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t(DWARF2_FRAME_REG_OUT): Likewise.\n+\t* config/s390/s390.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/sh/elf.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/sh/linux.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/sh/sh.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t(SH_DBX_REGISTER_NUMBER): Likewise.\n+\t(SH_DEBUGGER_REGNO): Likewise.\n+\t* config/visium/visium.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/xtensa/elf.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/xtensa/linux.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/xtensa/uclinux.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* config/xtensa/xtensa-protos.h (xtensa_dbx_regno): Likewise.\n+\t(xtensa_debugger_regno): Likewise.\n+\t* config/xtensa/xtensa.cc (xtensa_dbx_regno): Likewise.\n+\t(xtensa_debugger_regno): Likewise.\n+\t* config/xtensa/xtensa.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t* defaults.h (DBX_REGISTER_NUMBER): Likewise.\n+\t(DEBUGGER_REGNO): Likewise.\n+\t(DWARF_FRAME_REGNUM): Likewise.\n+\t* doc/tm.texi: Likewise.\n+\t* doc/tm.texi.in: Likewise.\n+\t* dwarf2out.cc (dbx_reg_number): Likewise.\n+\t(debugger_reg_number): Likewise.\n+\t(reg_loc_descriptor): Likewise.\n+\t(multiple_reg_loc_descriptor): Likewise.\n+\t(mem_loc_descriptor): Likewise.\n+\t* except.cc: Likewise.\n+\n+2022-09-05  konglin1  <lingling.kong@intel.com>\n+\n+\tPR target/106742\n+\t* config/i386/i386-expand.cc (ix86_expand_vector_init_duplicate):\n+\tHandle V8BF mode.\n+\t(expand_vec_perm_broadcast_1): Ditto.\n+\t* config/i386/sse.md (avx512fmaskhalfmode): Add BF vector mode.\n+\t(vec_set<mode>_0): Add @ to it.\n+\t(@vec_set<mode>_0): Ditto.\n+\t(vec_interleave_high<mode><mask_name>): Ditto.\n+\t(@vec_interleave_high<mode><mask_name>): Ditto.\n+\t(vec_interleave_low<mode><mask_name>): Ditto.\n+\t(@vec_interleave_low<mode><mask_name>): Ditto.\n+\t* config/i386/subst.md (SUBST_V): Add BF vector mode.\n+\n+2022-09-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (early_nan_resolve): Remove.\n+\t(frange::intersect): Handle NANs.\n+\n 2022-09-04  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* value-range.cc (frange::union_): Do not drop properties when"}, {"sha": "80e4d819fedae221a20951c07342f37e1aff8615", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d2dcd1397bf02b79515c39438e0ea9898f9056/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d2dcd1397bf02b79515c39438e0ea9898f9056/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=47d2dcd1397bf02b79515c39438e0ea9898f9056", "patch": "@@ -1 +1 @@\n-20220905\n+20220906"}, {"sha": "80e856d4df38ba3f141b10e3ba3d9b21b40415af", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 239, "deletions": 0, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d2dcd1397bf02b79515c39438e0ea9898f9056/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d2dcd1397bf02b79515c39438e0ea9898f9056/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=47d2dcd1397bf02b79515c39438e0ea9898f9056", "patch": "@@ -1,3 +1,242 @@\n+2022-09-05  Martin Liska  <mliska@suse.cz>\n+\n+\t* sigtramp-vxworks-target.h: Rename DBX_REGISTER_NUMBER to\n+\t  DEBUGGER_REGNO.\n+\n+2022-09-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_aggr.adb (Check_Bounds): Move code and comment related to\n+\tcheck for null array aggregate from Resolve_Null_Array_Aggregate.\n+\t* sem_aggr.ads (Is_Null_Aggregate): Move spec from unit body.\n+\t* sem_aggr.adb (Resolve_Null_Array_Aggregate): Move check to\n+\texpansion.\n+\n+2022-09-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb\n+\t(Array_Aggr_Subtype): Bypass call to Collect_Aggr_Bound with\n+\tdedicated code for null array aggregates.\n+\t(Resolve_Array_Aggregate): Remove special handling of null array\n+\taggregates.\n+\t(Resolve_Array_Aggregate): Create bounds, but let\n+\tArray_Aggr_Subtype create itype entities.\n+\n+2022-09-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Null_Array_Aggregate): Insert check as a\n+\tRaise_Constraint_Error node and not an If_Statement.\n+\n+2022-09-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb\n+\t(Resolve_Container_Aggregate): Style cleanup.\n+\t(Resolve_Record_Aggregate): Remove redundant guard.\n+\n+2022-09-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_util.ads (Entry_Names_OK): Remove spec.\n+\t* exp_util.adb (Entry_Names_OK): Remove body.\n+\n+2022-09-05  Steve Baird  <baird@adacore.com>\n+\n+\t* libgnat/a-coinve.adb, libgnat/a-convec.adb\n+\t(Append): If the Append that takes an Element and a Count is\n+\tcalled with Count = 1, then call the Append that does not take a\n+\tCount parameter; otherwise call the code that handles the general\n+\tcase. Move the special case detection/handling code that was\n+\tformerly in that version of Append into the version that does not\n+\ttake a Count parameter, so that now both versions get the\n+\tperformance benefit.\n+\n+2022-09-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Null_Array_Aggregate): Create internal\n+\ttype for the aggregate as an itype.\n+\n+2022-09-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.ads (Itype_Has_Declaration): Remove spec.\n+\t* sem_util.adb (Itype_Has_Declaration): Remove body.\n+\n+2022-09-05  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch3.adb\n+\t(Expand_N_Object_Declaration): In deciding whether to emit a DIC\n+\tcheck, we were previously testing the Has_Init_Expression flag.\n+\tContinue to test that flag as before, but add a test for the\n+\tsyntactic presence of an initial value in the object declaration.\n+\tThis new test would not supersede the old test in the case where\n+\tan explicit initial value has been eliminated as part of some tree\n+\ttransformation.\n+\n+2022-09-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Validate_Unchecked_Conversions): Use\n+\tHas_Warnings_Off.\n+\t* sem_elab.adb (Check_Internal_Call_Continue): Likewise.\n+\n+2022-09-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-valuer.adb (Scan_Decimal_Digits): Consistently avoid\n+\tinitializing local variables.\n+\t(Scan_Integral_Digits): Likewise.\n+\t(Scan_Raw_Real): Likewise and add a couple of comments.\n+\n+2022-09-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch13.adb (Freeze_Entity_Checks): Build predicate functions\n+\tonly after checking the variant part of a record type, if any.\n+\n+2022-09-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_aggr.adb\n+\t(Two_Pass_Aggregate_Expansion): Expand into implicit rather than\n+\tordinary loops, to detect violations of restriction\n+\tNo_Implicit_Loops.\n+\t(Generate_Loop): Likewise for delta array aggregates.\n+\n+2022-09-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_aggr.adb (Two_Pass_Aggregate_Expansion): Expand iterated\n+\tcomponent association with an unanalyzed copy of iterated\n+\texpression. The previous code worked only because the expanded\n+\tloop used both an analyzed copy of the iterator_specification and\n+\tan analyzed copy of the iterated expression. Now the iterated\n+\texpression is reanalyzed in the context of the expanded loop.\n+\t* par-ch4.adb (Build_Iterated_Component_Association): Don't set\n+\tdefining identifier when iterator specification is present.\n+\t* sem_aggr.adb (Resolve_Iterated_Association): Pick index name\n+\tfrom the iterator specification.\n+\t* sem_elab.adb (Traverse_Potential_Scenario): Handle iterated\n+\telement association just like iterated component association. Not\n+\tstrictly part of this fix, but still worth for the completeness.\n+\t* sem_res.adb (Resolve): Pick index name from the iterator\n+\tspecification, when present.\n+\t* sem_util.adb (Traverse_More): For completeness, just like the\n+\tchange in Traverse_Potential_Scenario.\n+\t* sinfo.ads\n+\t(ITERATED_COMPONENT_ASSOCIATION): Fix and complete description.\n+\t(ITERATED_ELEMENT_ASSOCIATION): Likewise.\n+\n+2022-09-05  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch6.adb\n+\t(Analyze_Subprogram_Body_Helper): Use First_Real_Statement to deal\n+\twith this case. Note that First_Real_Statement is likely to be\n+\tremoved as part of this ticket, so this is a temporary fix.\n+\n+2022-09-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* ali.adb (Scan_ALI): Special case i-c*.ali when setting\n+\tSec_Stack_Used.\n+\n+2022-09-05  Bob Duff  <duff@adacore.com>\n+\n+\t* par-ch5.adb\n+\t(P_Sequence_Of_Statements): Call Error_Msg_GNAT_Extension to give\n+\tthe error message.\n+\n+2022-09-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Iterated_Component_Association): Split\n+\tprocessing of cases with and without iterator specification; reuse\n+\tanalysis of iterator specification; improve diagnostics for\n+\tpremature usage of iterator index in discrete choices.\n+\n+2022-09-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch5.adb (Check_Subtype_Definition): Remove redundant call to\n+\tPresent; style cleanup.\n+\n+2022-09-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Array_Aggregate): Change an inconsistent\n+\tuse of False into its local equivalent Failure.\n+\n+2022-09-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Iterated_Component_Association): Change\n+\tgeneric name Ent to a more intuitive Scop; rename Remove_Ref to\n+\tRemove_Reference, so it can be instantiated as a traversal routine\n+\twith plural name.\n+\n+2022-09-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch4.adb\n+\t(Is_Empty_Range): Move error reporting to the caller.\n+\t(Analyze_Qualified_Expression): Move error reporting from Is_Empty_Range;\n+\tadd matching call to End_Scope before rewriting and returning.\n+\n+2022-09-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* bindgen.adb (Gen_Elab_Calls): Check for Check_Elaboration_Flags.\n+\t* bindusg.adb (Display): Add -k.\n+\t* opt.ads (Check_Elaboration_Flags): New.\n+\t* switch-b.adb (Scan_Binder_Switches): Add processing of -k.\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst: Add\n+\tdocumentation for -k and -K.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2022-09-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* treepr.adb: Remove local To_Lower and use the procedure\n+\tversion instead.\n+\n+2022-09-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* aspects.ads (Delaying Evaluation of Aspect): Fix typos.\n+\t* exp_ch3.adb (Freeze_Type): Do not generate Invariant and DIC\n+\tprocedures for internal types.\n+\t* exp_util.adb (Build_DIC_Procedure_Body): Adjust comment.\n+\t* freeze.adb (Freeze_Entity): Call Inherit_Delayed_Rep_Aspects for\n+\tsubtypes and derived types only after the base or parent type has\n+\tbeen frozen.  Remove useless freezing for first subtype.\n+\t(Freeze_Fixed_Point_Type): Call Inherit_Delayed_Rep_Aspects too.\n+\t* layout.adb (Set_Elem_Alignment): Deal with private types.\n+\t* sem_ch3.adb (Build_Derived_Enumeration_Type): Build the implicit\n+\tbase as an itype and do not insert its declaration in the tree.\n+\t(Build_Derived_Numeric_Type): Do not freeze the implicit base.\n+\t(Derived_Standard_Character): Likewise.\n+\t(Constrain_Enumeration): Inherit the chain of representation items\n+\tinstead of replacing it.\n+\t* sem_ch13.ads (Inherit_Aspects_At_Freeze_Point): Add ??? comment.\n+\t(Inherit_Delayed_Rep_Aspects): Declare.\n+\t* sem_ch13.adb (Analyze_Aspects_At_Freeze_Point): Do not invoke\n+\tInherit_Delayed_Rep_Aspects.\n+\t(Inherit_Aspects_At_Freeze_Point): Deal with private types.\n+\t(Inherit_Delayed_Rep_Aspects): Move to library level.\n+\n+2022-09-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* einfo-utils.adb (Number_Entries): Refine type of a local variable.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Rename Conctyp to\n+\tProttyp; refactor repeated calls to New_Occurrence_Of; replace\n+\tNumber_Entries with Has_Entries.\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): Likewise; remove Subprg\n+\tvariable (apparently copy-pasted from expansion of the attribute).\n+\n+2022-09-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Fix detection of the\n+\tenclosing protected type and of the enclosing protected subprogram.\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): Likewise.\n+\n+2022-09-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* freeze.adb (Freeze_Itype): Remove excessive guard.\n+\t* sem_ch5.adb (Analyze_Loop_Parameter_Specification): Likewise.\n+\n+2022-09-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sprint.adb (Sprint_Node_Actual): Handle iterator_specification within\n+\titerated_component_association and iterator_filter within\n+\titerator_specification.\n+\n+2022-09-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* doc/gnat_ugn/gnat_and_program_execution.rst: Fix rest syntax\n+\t* gnat_ugn.texi: Regenerate.\n+\n 2022-09-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_util.adb (Expand_Subtype_From_Expr): Be prepared for"}, {"sha": "3ad3096e161bec7709d9ae0c18b8913815157423", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d2dcd1397bf02b79515c39438e0ea9898f9056/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d2dcd1397bf02b79515c39438e0ea9898f9056/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=47d2dcd1397bf02b79515c39438e0ea9898f9056", "patch": "@@ -1,3 +1,17 @@\n+2022-09-05  Tim Lange  <mail@tim-lange.me>\n+\n+\t* region-model-impl-calls.cc (region_model::impl_call_strcpy):\n+\tHandle the constant string case.\n+\t* region-model.cc (region_model::get_string_size):\n+\tNew function to get the string size from a region or svalue.\n+\t* region-model.h (class region_model): Add get_string_size.\n+\n+2022-09-05  Tim Lange  <mail@tim-lange.me>\n+\n+\t* region.cc (cast_region::get_relative_concrete_offset):\n+\tNew overloaded method.\n+\t* region.h: Add cast_region::get_relative_concrete_offset.\n+\n 2022-08-22  Martin Liska  <mliska@suse.cz>\n \n \t* region-model.cc: Add missing final keyword."}, {"sha": "e20d5691b6d7928f71aaab588141bfc9382f6dc0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d2dcd1397bf02b79515c39438e0ea9898f9056/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d2dcd1397bf02b79515c39438e0ea9898f9056/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=47d2dcd1397bf02b79515c39438e0ea9898f9056", "patch": "@@ -1,3 +1,29 @@\n+2022-09-05  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* dump-parse-tree.cc (show_omp_namelist, show_omp_clauses): Handle\n+\tomp_cur_iteration and distinguish doacross/depend.\n+\t* gfortran.h (enum gfc_omp_depend_doacross_op): Renamed from\n+\tgfc_omp_depend_op.\n+\t(enum gfc_omp_depend_doacross_op): Add OMP_DOACROSS_SINK_FIRST,\n+\tRename OMP_DEPEND_SINK to OMP_DOACROSS_SINK.\n+\t(gfc_omp_namelist) Handle renaming, rename depend_op to\n+\tdepend_doacross_op.\n+\t(struct gfc_omp_clauses): Add doacross_source.\n+\t* openmp.cc (gfc_match_omp_depend_sink): Renamed to ...\n+\t(gfc_match_omp_doacross_sink): ... this; handle omp_all_memory.\n+\t(enum omp_mask2): Add OMP_CLAUSE_DOACROSS.\n+\t(gfc_match_omp_clauses): Handle 'doacross' and syntax changes to\n+\tdepend.\n+\t(gfc_match_omp_depobj): Simplify as sink/source are now impossible.\n+\t(gfc_match_omp_ordered_depend): Request OMP_CLAUSE_DOACROSS.\n+\t(resolve_omp_clauses): Update sink/source checks.\n+\t(gfc_resolve_omp_directive): Resolve EXEC_OMP_ORDERED clauses.\n+\t* parse.cc (decode_omp_directive): Handle 'ordered doacross'.\n+\t* trans-openmp.cc (gfc_trans_omp_clauses): Handle doacross.\n+\t(gfc_trans_omp_do): Fix OMP_FOR_ORIG_DECLS handling if 'ordered'\n+\tclause is present.\n+\t(gfc_trans_omp_depobj): Update for member name change.\n+\n 2022-09-04  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n \n \tPR fortran/100136"}, {"sha": "e5f2849ed03667c7858ec1b6edb92decfe0794b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d2dcd1397bf02b79515c39438e0ea9898f9056/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d2dcd1397bf02b79515c39438e0ea9898f9056/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=47d2dcd1397bf02b79515c39438e0ea9898f9056", "patch": "@@ -1,3 +1,57 @@\n+2022-09-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/cpp/c11-trigraphs-1.c, gcc.dg/cpp/c2x-trigraphs-1.c,\n+\tgcc.dg/cpp/c2x-trigraphs-2.c: New tests.\n+\n+2022-09-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/vrp-float-signbit-2.c: New test.\n+\n+2022-09-05  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR target/106453\n+\t* gcc.target/i386/pr106453.c: New test.\n+\n+2022-09-05  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/all-memory-1.f90: Update dg-error.\n+\t* gfortran.dg/gomp/depend-iterator-2.f90: Likewise.\n+\t* gfortran.dg/gomp/depobj-2.f90: Likewise.\n+\t* gfortran.dg/gomp/doacross-5.f90: New test.\n+\t* gfortran.dg/gomp/doacross-6.f90: New test.\n+\n+2022-09-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR middle-end/106824\n+\t* g++.dg/pr106824.C: New test.\n+\n+2022-09-05  Tim Lange  <mail@tim-lange.me>\n+\n+\t* gcc.dg/analyzer/out-of-bounds-4.c: New test.\n+\t* gcc.dg/analyzer/strcpy-3.c: New test.\n+\n+2022-09-05  Tim Lange  <mail@tim-lange.me>\n+\n+\t* gcc.dg/analyzer/fold-string-to-char.c: New test.\n+\n+2022-09-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/spellcheck_10.c: New test.\n+\n+2022-09-05  LiaoShihua  <shihua@iscas.ac.cn>\n+\n+\t* gcc.target/riscv/zmmul-1.c: New test.\n+\t* gcc.target/riscv/zmmul-2.c: New test.\n+\n+2022-09-05  Xi Ruoyao  <xry111@xry111.site>\n+\n+\t* gcc.target/loongarch/direct-extern-1.c: New test.\n+\t* gcc.target/loongarch/direct-extern-2.c: New test.\n+\n+2022-09-05  konglin1  <lingling.kong@intel.com>\n+\n+\t* gcc.target/i386/pr106742.c: New test.\n+\n 2022-09-04  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n \n \tPR fortran/100136"}, {"sha": "7aba4f58599cd6330580d4c12b65187fb6ddd76d", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d2dcd1397bf02b79515c39438e0ea9898f9056/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d2dcd1397bf02b79515c39438e0ea9898f9056/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=47d2dcd1397bf02b79515c39438e0ea9898f9056", "patch": "@@ -1,3 +1,7 @@\n+2022-09-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* init.cc (lang_defaults): Disable trigraphs for C2x.\n+\n 2022-09-02  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/90885"}, {"sha": "ddf0729dfc55ad0d7242035a42244c82e026c5ad", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d2dcd1397bf02b79515c39438e0ea9898f9056/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d2dcd1397bf02b79515c39438e0ea9898f9056/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=47d2dcd1397bf02b79515c39438e0ea9898f9056", "patch": "@@ -1,3 +1,7 @@\n+2022-09-05  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp.texi (OpenMP 5.2): Update doacross/omp_cur_iteration status.\n+\n 2022-08-26  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* libgomp.texi (OpenMP 5.0): Mark 'ancestor' as implemented but"}, {"sha": "c9a7f3585a50ce0957b0a175ec2c03823619a5ff", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47d2dcd1397bf02b79515c39438e0ea9898f9056/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47d2dcd1397bf02b79515c39438e0ea9898f9056/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=47d2dcd1397bf02b79515c39438e0ea9898f9056", "patch": "@@ -1,3 +1,15 @@\n+2022-09-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (__success_type, __failure_type): Move\n+\tdefinitions later in the file.\n+\n+2022-09-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (is_trivial_v, is_trivially_copyable_v)\n+\t(is_standard_layout_v, is_pod_v, is_literal_type_v): Use\n+\tbuilt-in instead of class template.\n+\t(is_same_v): Add partial specialization for true case.\n+\n 2022-09-02  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/std/tuple (tuple::_UseOtherCtor): Use ::type when"}]}