{"sha": "31a782981f03d3a5184e12920c1cd3176d904ab4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFhNzgyOTgxZjAzZDNhNTE4NGUxMjkyMGMxY2QzMTc2ZDkwNGFiNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-06-21T19:05:00Z"}, "committer": {"name": "Jason Thorpe", "email": "thorpej@gcc.gnu.org", "date": "2002-06-21T19:05:00Z"}, "message": "bb-reorder.c (make_reorder_chain_1): Search harder for the vax casesi fallthru edge.\n\n2002-06-21  Richard Henderson  <rth@redhat.com>\n\n* bb-reorder.c (make_reorder_chain_1): Search harder for the\nvax casesi fallthru edge.\n* cfglayout.c (cleanup_unconditional_jumps): Use\nredirect_edge_succ_nodup.  Do not delete ADDR_VEC insns as dead.\n* cfgrtl.c (force_nonfallthru_and_redirect): Place redirection\nblock after ADDR_VEC.\n\nFrom-SVN: r54885", "tree": {"sha": "98be2ed2c2355e3096a24b83a1f3587c21e93b38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98be2ed2c2355e3096a24b83a1f3587c21e93b38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31a782981f03d3a5184e12920c1cd3176d904ab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31a782981f03d3a5184e12920c1cd3176d904ab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31a782981f03d3a5184e12920c1cd3176d904ab4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31a782981f03d3a5184e12920c1cd3176d904ab4/comments", "author": null, "committer": null, "parents": [{"sha": "b62cc13a208075e7853d29438eb68cd1456c017d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b62cc13a208075e7853d29438eb68cd1456c017d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b62cc13a208075e7853d29438eb68cd1456c017d"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "3bbfef1e9cb0aa4abc96552ce5ee61d0250fb38f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31a782981f03d3a5184e12920c1cd3176d904ab4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31a782981f03d3a5184e12920c1cd3176d904ab4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31a782981f03d3a5184e12920c1cd3176d904ab4", "patch": "@@ -1,3 +1,12 @@\n+2002-06-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* bb-reorder.c (make_reorder_chain_1): Search harder for the\n+\tvax casesi fallthru edge. \n+\t* cfglayout.c (cleanup_unconditional_jumps): Use \n+\tredirect_edge_succ_nodup.  Do not delete ADDR_VEC insns as dead.\n+\t* cfgrtl.c (force_nonfallthru_and_redirect): Place redirection\n+\tblock after ADDR_VEC.\n+\n 2002-06-21  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* config/sparc/t-linux64 (EXTRA_MULTILIB_PARTS): Add crtfastmath.o."}, {"sha": "24c41e51ced1aa05286b4426ce61f953123b2c8e", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31a782981f03d3a5184e12920c1cd3176d904ab4/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31a782981f03d3a5184e12920c1cd3176d904ab4/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=31a782981f03d3a5184e12920c1cd3176d904ab4", "patch": "@@ -209,17 +209,21 @@ make_reorder_chain_1 (bb, prev)\n   /* In the absence of a prediction, disturb things as little as possible\n      by selecting the old \"next\" block from the list of successors.  If\n      there had been a fallthru edge, that will be the one.  */\n+  /* Note that the fallthru block may not be next any time we eliminate\n+     forwarder blocks.  */\n   if (! next)\n     {\n       for (e = bb->succ; e ; e = e->succ_next)\n-\tif (e->dest == bb->next_bb)\n+\tif (e->flags & EDGE_FALLTHRU)\n \t  {\n-\t    if ((e->flags & EDGE_FALLTHRU)\n-\t        || (e->dest->succ\n-\t            && ! (e->flags & (EDGE_ABNORMAL_CALL | EDGE_EH))))\n-\t      next = e->dest;\n+\t    next = e->dest;\n \t    break;\n \t  }\n+\telse if (e->dest == bb->next_bb)\n+\t  {\n+\t    if (! (e->flags & (EDGE_ABNORMAL_CALL | EDGE_EH)))\n+\t      next = e->dest;\n+\t  }\n     }\n \n   /* Make sure we didn't select a silly next block.  */"}, {"sha": "70b7b17a7a1064609f95efc913ea4ce3f593eef6", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31a782981f03d3a5184e12920c1cd3176d904ab4/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31a782981f03d3a5184e12920c1cd3176d904ab4/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=31a782981f03d3a5184e12920c1cd3176d904ab4", "patch": "@@ -608,10 +608,9 @@ verify_insn_chain ()\n }\n \f\n /* Remove any unconditional jumps and forwarder block creating fallthru\n-   edges instead.  During BB reordering fallthru edges are not required\n+   edges instead.  During BB reordering, fallthru edges are not required\n    to target next basic block in the linear CFG layout, so the unconditional\n-   jumps are not needed.  If LOOPS is not null, also update loop structure &\n-   dominators.  */\n+   jumps are not needed.  */\n \n static void\n cleanup_unconditional_jumps ()\n@@ -636,7 +635,7 @@ cleanup_unconditional_jumps ()\n \t\tfprintf (rtl_dump_file, \"Removing forwarder BB %i\\n\",\n \t\t\t bb->index);\n \n-\t      redirect_edge_succ (bb->pred, bb->succ->dest);\n+\t      redirect_edge_succ_nodup (bb->pred, bb->succ->dest);\n \t      flow_delete_block (bb);\n \t      bb = prev;\n \t    }\n@@ -653,8 +652,6 @@ cleanup_unconditional_jumps ()\n \t  else\n \t    continue;\n \n-\t  /* Cleanup barriers and delete ADDR_VECs in a way as they are belonging\n-             to removed tablejump anyway.  */\n \t  insn = NEXT_INSN (bb->end);\n \t  while (insn\n \t\t && (GET_CODE (insn) != NOTE\n@@ -664,12 +661,6 @@ cleanup_unconditional_jumps ()\n \n \t      if (GET_CODE (insn) == BARRIER)\n \t\tdelete_barrier (insn);\n-\t      else if (GET_CODE (insn) == JUMP_INSN)\n-\t\tdelete_insn_chain (PREV_INSN (insn), insn);\n-\t      else if (GET_CODE (insn) == CODE_LABEL)\n-\t\t;\n-\t      else if (GET_CODE (insn) != NOTE)\n-\t\tabort ();\n \n \t      insn = next;\n \t    }"}, {"sha": "25a5c9f78b57aa4762607fcd0ba4854335ef54c8", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31a782981f03d3a5184e12920c1cd3176d904ab4/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31a782981f03d3a5184e12920c1cd3176d904ab4/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=31a782981f03d3a5184e12920c1cd3176d904ab4", "patch": "@@ -963,9 +963,21 @@ force_nonfallthru_and_redirect (e, target)\n   if (e->src->succ->succ_next)\n     {\n       /* Create the new structures.  */\n+\n+      /* Position the new block correctly relative to loop notes.  */\n       note = last_loop_beg_note (e->src->end);\n-      jump_block\n-\t= create_basic_block (NEXT_INSN (note), NULL, e->src);\n+      note = NEXT_INSN (note);\n+\n+      /* ... and ADDR_VECs.  */\n+      if (note != NULL\n+\t  && GET_CODE (note) == CODE_LABEL\n+\t  && NEXT_INSN (note)\n+\t  && GET_CODE (NEXT_INSN (note)) == JUMP_INSN\n+\t  && (GET_CODE (PATTERN (NEXT_INSN (note))) == ADDR_DIFF_VEC\n+\t      || GET_CODE (PATTERN (NEXT_INSN (note))) == ADDR_VEC))\n+\tnote = NEXT_INSN (NEXT_INSN (note));\n+\n+      jump_block = create_basic_block (note, NULL, e->src);\n       jump_block->count = e->count;\n       jump_block->frequency = EDGE_FREQUENCY (e);\n       jump_block->loop_depth = target->loop_depth;"}]}