{"sha": "00e7d024afb80e95fb36d74b1c059468d883a850", "node_id": "C_kwDOANBUbNoAKDAwZTdkMDI0YWZiODBlOTVmYjM2ZDc0YjFjMDU5NDY4ZDg4M2E4NTA", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-01-26T21:24:08Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-01-27T23:02:56Z"}, "message": "analyzer: show region creation events for uninit warnings\n\nWhen reviewing the output of -fanalyzer on PR analyzer/104224 I noticed\nthat despite very verbose paths, the diagnostic paths for\n  -Wanalyzer-use-of-uninitialized-value\ndon't show where the uninitialized memory is allocated.\n\nThis patch adapts and simplifies material from\n  \"[PATCH 3/6] analyzer: implement infoleak detection\"\n    https://gcc.gnu.org/pipermail/gcc-patches/2021-November/584377.html\nin order to add region creation events for the pertinent region (whether\non the stack or heap).\n\nFor example, this patch extends:\n\nmalloc-1.c: In function 'test_40':\nmalloc-1.c:461:5: warning: use of uninitialized value '*p' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]\n  461 |   i = *p;\n      |   ~~^~~~\n  'test_40': event 1\n    |\n    |  461 |   i = *p;\n    |      |   ~~^~~~\n    |      |     |\n    |      |     (1) use of uninitialized value '*p' here\n    |\n\nto:\n\nmalloc-1.c: In function 'test_40':\nmalloc-1.c:461:5: warning: use of uninitialized value '*p' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]\n  461 |   i = *p;\n      |   ~~^~~~\n  'test_40': events 1-2\n    |\n    |  460 |   int *p = (int*)malloc(sizeof(int*));\n    |      |                  ^~~~~~~~~~~~~~~~~~~~\n    |      |                  |\n    |      |                  (1) region created on heap here\n    |  461 |   i = *p;\n    |      |   ~~~~~~\n    |      |     |\n    |      |     (2) use of uninitialized value '*p' here\n    |\n\nand this helps readability of the resulting warnings, especially in\nmore complicated cases.\n\ngcc/analyzer/ChangeLog:\n\t* checker-path.cc (event_kind_to_string): Handle\n\tEK_REGION_CREATION.\n\t(region_creation_event::region_creation_event): New.\n\t(region_creation_event::get_desc): New.\n\t(checker_path::add_region_creation_event): New.\n\t* checker-path.h (enum event_kind): Add EK_REGION_CREATION.\n\t(class region_creation_event): New subclass.\n\t(checker_path::add_region_creation_event): New decl.\n\t* diagnostic-manager.cc\n\t(diagnostic_manager::emit_saved_diagnostic): Pass NULL for new\n\tparam to add_events_for_eedge when handling trailing eedge.\n\t(diagnostic_manager::build_emission_path): Create an interesting_t\n\tinstance, allow the pending diagnostic to populate it, and pass it\n\tto the calls to add_events_for_eedge.\n\t(diagnostic_manager::add_events_for_eedge): Add \"interest\" param.\n\tUse it to add region_creation_events for on-stack regions created\n\twithin at function entry, and when pertinent dynamically-sized\n\tregions are created.\n\t(diagnostic_manager::prune_for_sm_diagnostic): Add case for\n\tEK_REGION_CREATION.\n\t* diagnostic-manager.h (diagnostic_manager::add_events_for_eedge):\n\tAdd \"interest\" param.\n\t* pending-diagnostic.cc: Include \"selftest.h\", \"tristate.h\",\n\t\"analyzer/call-string.h\", \"analyzer/program-point.h\",\n\t\"analyzer/store.h\", and \"analyzer/region-model.h\".\n\t(interesting_t::add_region_creation): New.\n\t(interesting_t::dump_to_pp): New.\n\t* pending-diagnostic.h (struct interesting_t): New.\n\t(pending_diagnostic::mark_interesting_stuff): New vfunc.\n\t* region-model.cc\n\t(poisoned_value_diagnostic::poisoned_value_diagnostic): Add\n\t(poisoned_value_diagnostic::operator==): Compare m_pkind and\n\tm_src_region fields.\n\t(poisoned_value_diagnostic::mark_interesting_stuff): New.\n\t(poisoned_value_diagnostic::m_src_region): New.\n\t(region_model::check_for_poison): Call\n\tget_region_for_poisoned_expr for uninit values and pass the resul\n\tto the diagnostic.\n\t(region_model::get_region_for_poisoned_expr): New.\n\t(region_model::deref_rvalue): Pass NULL for\n\tpoisoned_value_diagnostic's src_region.\n\t* region-model.h (region_model::get_region_for_poisoned_expr): New\n\tdecl.\n\t* region.h (frame_region::get_fndecl): New.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/data-model-1.c: Add dg-message directives for\n\texpected region creation events.\n\t* gcc.dg/analyzer/malloc-1.c: Likewise.\n\t* gcc.dg/analyzer/memset-CVE-2017-18549-1.c: Likewise.\n\t* gcc.dg/analyzer/pr101547.c: Likewise.\n\t* gcc.dg/analyzer/pr101875.c: Likewise.\n\t* gcc.dg/analyzer/pr101962.c: Likewise.\n\t* gcc.dg/analyzer/pr104224.c: Likewise.\n\t* gcc.dg/analyzer/pr94047.c: Likewise.\n\t* gcc.dg/analyzer/symbolic-1.c: Likewise.\n\t* gcc.dg/analyzer/uninit-1.c: Likewise.\n\t* gcc.dg/analyzer/uninit-4.c: Likewise.\n\t* gcc.dg/analyzer/uninit-alloca.c: New test.\n\t* gcc.dg/analyzer/uninit-pr94713.c: Add dg-message directive for\n\texpected region creation event.\n\t* gcc.dg/analyzer/uninit-pr94714.c: Likewise.\n\t* gcc.dg/analyzer/zlib-3.c: Likewise.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "86eb3697b046aaa6b4e3c7411cf8372087f9537b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86eb3697b046aaa6b4e3c7411cf8372087f9537b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00e7d024afb80e95fb36d74b1c059468d883a850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00e7d024afb80e95fb36d74b1c059468d883a850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00e7d024afb80e95fb36d74b1c059468d883a850", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00e7d024afb80e95fb36d74b1c059468d883a850/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f21f22d1baf7e90f3edbfc48040c76fb14103803", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f21f22d1baf7e90f3edbfc48040c76fb14103803", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f21f22d1baf7e90f3edbfc48040c76fb14103803"}], "stats": {"total": 301, "additions": 265, "deletions": 36}, "files": [{"sha": "779ff80de7ccd470847bb08175cc0270cdf0924a", "filename": "gcc/analyzer/checker-path.cc", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Fanalyzer%2Fchecker-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Fanalyzer%2Fchecker-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.cc?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -81,6 +81,8 @@ event_kind_to_string (enum event_kind ek)\n       return \"EK_CUSTOM\";\n     case EK_STMT:\n       return \"EK_STMT\";\n+    case EK_REGION_CREATION:\n+      return \"EK_REGION_CREATION\";\n     case EK_FUNCTION_ENTRY:\n       return \"EK_FUNCTION_ENTRY\";\n     case EK_STATE_CHANGE:\n@@ -199,6 +201,34 @@ statement_event::get_desc (bool) const\n   return label_text::take (xstrdup (pp_formatted_text (&pp)));\n }\n \n+/* class region_creation_event : public checker_event.  */\n+\n+region_creation_event::region_creation_event (const region *reg,\n+\t\t\t\t\t      location_t loc,\n+\t\t\t\t\t      tree fndecl,\n+\t\t\t\t\t      int depth)\n+: checker_event (EK_REGION_CREATION, loc, fndecl, depth),\n+  m_reg (reg)\n+{\n+}\n+\n+/* Implementation of diagnostic_event::get_desc vfunc for\n+   region_creation_event.  */\n+\n+label_text\n+region_creation_event::get_desc (bool) const\n+{\n+  switch (m_reg->get_memory_space ())\n+    {\n+    default:\n+      return label_text::borrow (\"region created here\");\n+    case MEMSPACE_STACK:\n+      return label_text::borrow (\"region created on stack here\");\n+    case MEMSPACE_HEAP:\n+      return label_text::borrow (\"region created on heap here\");\n+    }\n+}\n+\n /* class function_entry_event : public checker_event.  */\n \n /* Implementation of diagnostic_event::get_desc vfunc for\n@@ -991,6 +1021,17 @@ checker_path::debug () const\n     }\n }\n \n+/* Add region_creation_event instance to this path for REG,\n+   describing whether REG is on the stack or heap.  */\n+\n+void\n+checker_path::add_region_creation_event (const region *reg,\n+\t\t\t\t\t location_t loc,\n+\t\t\t\t\t tree fndecl, int depth)\n+{\n+  add_event (new region_creation_event (reg, loc, fndecl, depth));\n+}\n+\n /* Add a warning_event to the end of this path.  */\n \n void"}, {"sha": "d37c99989b5898c4a979771cc07a7d4c883a7c99", "filename": "gcc/analyzer/checker-path.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Fanalyzer%2Fchecker-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Fanalyzer%2Fchecker-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.h?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -31,6 +31,7 @@ enum event_kind\n   EK_DEBUG,\n   EK_CUSTOM,\n   EK_STMT,\n+  EK_REGION_CREATION,\n   EK_FUNCTION_ENTRY,\n   EK_STATE_CHANGE,\n   EK_START_CFG_EDGE,\n@@ -58,6 +59,7 @@ extern const char *event_kind_to_string (enum event_kind ek);\n        custom_event (EK_CUSTOM)\n \t precanned_custom_event\n        statement_event (EK_STMT)\n+       region_creation_event (EK_REGION_CREATION)\n        function_entry_event (EK_FUNCTION_ENTRY)\n        state_change_event (EK_STATE_CHANGE)\n        superedge_event\n@@ -194,6 +196,21 @@ class statement_event : public checker_event\n   const program_state m_dst_state;\n };\n \n+/* A concrete event subclass describing the creation of a region that\n+   is significant for a diagnostic  e.g. \"region created on stack here\".  */\n+\n+class region_creation_event : public checker_event\n+{\n+public:\n+  region_creation_event (const region *reg,\n+\t\t\t location_t loc, tree fndecl, int depth);\n+\n+  label_text get_desc (bool) const FINAL OVERRIDE;\n+\n+private:\n+  const region *m_reg;\n+};\n+\n /* An event subclass describing the entry to a function.  */\n \n class function_entry_event : public checker_event\n@@ -561,6 +578,10 @@ class checker_path : public diagnostic_path\n     m_events[idx] = new_event;\n   }\n \n+  void add_region_creation_event (const region *reg,\n+\t\t\t\t  location_t loc,\n+\t\t\t\t  tree fndecl, int depth);\n+\n   void add_final_event (const state_machine *sm,\n \t\t\tconst exploded_node *enode, const gimple *stmt,\n \t\t\ttree var, state_machine::state_t state);"}, {"sha": "80bca6a073821d5b48337375ca680d873cb2a3c3", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 71, "deletions": 3, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -1222,7 +1222,7 @@ diagnostic_manager::emit_saved_diagnostic (const exploded_graph &eg,\n      trailing eedge stashed, add any events for it.  This is for use\n      in handling longjmp, to show where a longjmp is rewinding to.  */\n   if (sd.m_trailing_eedge)\n-    add_events_for_eedge (pb, *sd.m_trailing_eedge, &emission_path);\n+    add_events_for_eedge (pb, *sd.m_trailing_eedge, &emission_path, NULL);\n \n   emission_path.prepare_for_emission (sd.m_d);\n \n@@ -1269,10 +1269,13 @@ diagnostic_manager::build_emission_path (const path_builder &pb,\n \t\t\t\t\t checker_path *emission_path) const\n {\n   LOG_SCOPE (get_logger ());\n+\n+  interesting_t interest;\n+  pb.get_pending_diagnostic ()->mark_interesting_stuff (&interest);\n   for (unsigned i = 0; i < epath.m_edges.length (); i++)\n     {\n       const exploded_edge *eedge = epath.m_edges[i];\n-      add_events_for_eedge (pb, *eedge, emission_path);\n+      add_events_for_eedge (pb, *eedge, emission_path, &interest);\n     }\n }\n \n@@ -1580,10 +1583,12 @@ struct null_assignment_sm_context : public sm_context\n void\n diagnostic_manager::add_events_for_eedge (const path_builder &pb,\n \t\t\t\t\t  const exploded_edge &eedge,\n-\t\t\t\t\t  checker_path *emission_path) const\n+\t\t\t\t\t  checker_path *emission_path,\n+\t\t\t\t\t  interesting_t *interest) const\n {\n   const exploded_node *src_node = eedge.m_src;\n   const program_point &src_point = src_node->get_point ();\n+  const int src_stack_depth = src_point.get_stack_depth ();\n   const exploded_node *dst_node = eedge.m_dest;\n   const program_point &dst_point = dst_node->get_point ();\n   const int dst_stack_depth = dst_point.get_stack_depth ();\n@@ -1645,6 +1650,29 @@ diagnostic_manager::add_events_for_eedge (const path_builder &pb,\n \t     (dst_point.get_supernode ()->get_start_location (),\n \t      dst_point.get_fndecl (),\n \t      dst_stack_depth));\n+\t  /* Create region_creation_events for on-stack regions within\n+\t     this frame.  */\n+\t  if (interest)\n+\t    {\n+\t      unsigned i;\n+\t      const region *reg;\n+\t      FOR_EACH_VEC_ELT (interest->m_region_creation, i, reg)\n+\t\tif (const frame_region *frame = reg->maybe_get_frame_region ())\n+\t\t  if (frame->get_fndecl () == dst_point.get_fndecl ())\n+\t\t    {\n+\t\t      const region *base_reg = reg->get_base_region ();\n+\t\t      if (tree decl = base_reg->maybe_get_decl ())\n+\t\t\tif (DECL_P (decl)\n+\t\t\t    && DECL_SOURCE_LOCATION (decl) != UNKNOWN_LOCATION)\n+\t\t\t  {\n+\t\t\t    emission_path->add_region_creation_event\n+\t\t\t      (reg,\n+\t\t\t       DECL_SOURCE_LOCATION (decl),\n+\t\t\t       dst_point.get_fndecl (),\n+\t\t\t       dst_stack_depth);\n+\t\t\t  }\n+\t\t    }\n+\t    }\n \t}\n       break;\n     case PK_BEFORE_STMT:\n@@ -1700,6 +1728,42 @@ diagnostic_manager::add_events_for_eedge (const path_builder &pb,\n \t\t\t    == dst_node->m_succs[0]->m_dest->get_point ())))\n \t\t  break;\n \t      }\n+\n+\t    /* Look for changes in dynamic extents, which will identify\n+\t       the creation of heap-based regions and alloca regions.  */\n+\t    if (interest)\n+\t      {\n+\t\tconst region_model *src_model = src_state.m_region_model;\n+\t\tconst region_model *dst_model = dst_state.m_region_model;\n+\t\tif (src_model->get_dynamic_extents ()\n+\t\t    != dst_model->get_dynamic_extents ())\n+\t\t{\n+\t\t  unsigned i;\n+\t\t  const region *reg;\n+\t\t  FOR_EACH_VEC_ELT (interest->m_region_creation, i, reg)\n+\t\t    {\n+\t\t      const region *base_reg = reg->get_base_region ();\n+\t\t      const svalue *old_extents\n+\t\t\t= src_model->get_dynamic_extents (base_reg);\n+\t\t      const svalue *new_extents\n+\t\t\t= dst_model->get_dynamic_extents (base_reg);\n+\t\t      if (old_extents == NULL && new_extents != NULL)\n+\t\t\tswitch (base_reg->get_kind ())\n+\t\t\t  {\n+\t\t\t  default:\n+\t\t\t    break;\n+\t\t\t  case RK_HEAP_ALLOCATED:\n+\t\t\t  case RK_ALLOCA:\n+\t\t\t    emission_path->add_region_creation_event\n+\t\t\t      (reg,\n+\t\t\t       src_point.get_location (),\n+\t\t\t       src_point.get_fndecl (),\n+\t\t\t       src_stack_depth);\n+\t\t\t    break;\n+\t\t\t  }\n+\t\t    }\n+\t\t}\n+\t      }\n \t  }\n       }\n       break;\n@@ -2004,6 +2068,10 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t  }\n \t  break;\n \n+\tcase EK_REGION_CREATION:\n+\t  /* Don't filter these.  */\n+\t  break;\n+\n \tcase EK_FUNCTION_ENTRY:\n \t  if (m_verbosity < 1)\n \t    {"}, {"sha": "cfc0d86a871bdf713dcbb6332da6daff75db66d5", "filename": "gcc/analyzer/diagnostic-manager.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Fanalyzer%2Fdiagnostic-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Fanalyzer%2Fdiagnostic-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.h?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -141,7 +141,8 @@ class diagnostic_manager : public log_user\n \n   void add_events_for_eedge (const path_builder &pb,\n \t\t\t     const exploded_edge &eedge,\n-\t\t\t     checker_path *emission_path) const;\n+\t\t\t     checker_path *emission_path,\n+\t\t\t     interesting_t *interest) const;\n \n   bool significant_edge_p (const path_builder &pb,\n \t\t\t   const exploded_edge &eedge) const;"}, {"sha": "5e0ea4c31ac8be5a423fff0b59821bafa4a4cf1f", "filename": "gcc/analyzer/pending-diagnostic.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Fanalyzer%2Fpending-diagnostic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Fanalyzer%2Fpending-diagnostic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fpending-diagnostic.cc?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -33,11 +33,43 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-event-id.h\"\n #include \"analyzer/sm.h\"\n #include \"analyzer/pending-diagnostic.h\"\n+#include \"selftest.h\"\n+#include \"tristate.h\"\n+#include \"analyzer/call-string.h\"\n+#include \"analyzer/program-point.h\"\n+#include \"analyzer/store.h\"\n+#include \"analyzer/region-model.h\"\n \n #if ENABLE_ANALYZER\n \n namespace ana {\n \n+/* struct interesting_t.  */\n+\n+/* Mark the creation of REG as being interesting.  */\n+\n+void\n+interesting_t::add_region_creation (const region *reg)\n+{\n+  gcc_assert (reg);\n+  m_region_creation.safe_push (reg);\n+}\n+\n+void\n+interesting_t::dump_to_pp (pretty_printer *pp, bool simple) const\n+{\n+  pp_string (pp, \"{ region creation: [\");\n+  unsigned i;\n+  const region *reg;\n+  FOR_EACH_VEC_ELT (m_region_creation, i, reg)\n+    {\n+      if (i > 0)\n+\tpp_string (pp, \", \");\n+      reg->dump_to_pp (pp, simple);\n+    }\n+  pp_string (pp, \"]}\");\n+}\n+\n /* Generate a label_text by printing FMT.\n \n    Use a clone of the global_dc for formatting callbacks."}, {"sha": "5a407c8286947992fe60cfb4601c4043dff81f86", "filename": "gcc/analyzer/pending-diagnostic.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Fanalyzer%2Fpending-diagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Fanalyzer%2Fpending-diagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fpending-diagnostic.h?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -23,6 +23,22 @@ along with GCC; see the file COPYING3.  If not see\n \n namespace ana {\n \n+/* A bundle of information about things that are of interest to a\n+   pending_diagnostic.\n+\n+   For now, merely the set of regions that are pertinent to the\n+   diagnostic, so that we can notify the user about when they\n+   were created.  */\n+\n+struct interesting_t\n+{\n+  void add_region_creation (const region *reg);\n+\n+  void dump_to_pp (pretty_printer *pp, bool simple) const;\n+\n+  auto_vec<const region *> m_region_creation;\n+};\n+\n /* Various bundles of information used for generating more precise\n    messages for events within a diagnostic_path, for passing to the\n    various \"describe_*\" vfuncs of pending_diagnostic.  See those\n@@ -282,6 +298,14 @@ class pending_diagnostic\n   {\n     return false;\n   }\n+\n+  /* Vfunc for registering additional information of interest to this\n+     diagnostic.  */\n+\n+  virtual void mark_interesting_stuff (interesting_t *)\n+  {\n+    /* Default no-op implementation.  */\n+  }\n };\n \n /* A template to make it easier to make subclasses of pending_diagnostic."}, {"sha": "6810cf508d9cf431f677401b8dabe8936cbf475a", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -454,8 +454,10 @@ class poisoned_value_diagnostic\n : public pending_diagnostic_subclass<poisoned_value_diagnostic>\n {\n public:\n-  poisoned_value_diagnostic (tree expr, enum poison_kind pkind)\n-  : m_expr (expr), m_pkind (pkind)\n+  poisoned_value_diagnostic (tree expr, enum poison_kind pkind,\n+\t\t\t     const region *src_region)\n+  : m_expr (expr), m_pkind (pkind),\n+    m_src_region (src_region)\n   {}\n \n   const char *get_kind () const FINAL OVERRIDE { return \"poisoned_value_diagnostic\"; }\n@@ -467,7 +469,9 @@ class poisoned_value_diagnostic\n \n   bool operator== (const poisoned_value_diagnostic &other) const\n   {\n-    return m_expr == other.m_expr;\n+    return (m_expr == other.m_expr\n+\t    && m_pkind == other.m_pkind\n+\t    && m_src_region == other.m_src_region);\n   }\n \n   bool emit (rich_location *rich_loc) FINAL OVERRIDE\n@@ -528,9 +532,16 @@ class poisoned_value_diagnostic\n       }\n   }\n \n+  void mark_interesting_stuff (interesting_t *interest) FINAL OVERRIDE\n+  {\n+    if (m_src_region)\n+      interest->add_region_creation (m_src_region);\n+  }\n+\n private:\n   tree m_expr;\n   enum poison_kind m_pkind;\n+  const region *m_src_region;\n };\n \n /* A subclass of pending_diagnostic for complaining about shifts\n@@ -839,7 +850,11 @@ region_model::check_for_poison (const svalue *sval,\n \t fixup_tree_for_diagnostic.  */\n       tree diag_arg = fixup_tree_for_diagnostic (expr);\n       enum poison_kind pkind = poisoned_sval->get_poison_kind ();\n-      if (ctxt->warn (new poisoned_value_diagnostic (diag_arg, pkind)))\n+      const region *src_region = NULL;\n+      if (pkind == POISON_KIND_UNINIT)\n+\tsrc_region = get_region_for_poisoned_expr (expr);\n+      if (ctxt->warn (new poisoned_value_diagnostic (diag_arg, pkind,\n+\t\t\t\t\t\t     src_region)))\n \t{\n \t  /* We only want to report use of a poisoned value at the first\n \t     place it gets used; return an unknown value to avoid generating\n@@ -853,6 +868,24 @@ region_model::check_for_poison (const svalue *sval,\n   return sval;\n }\n \n+/* Attempt to get a region for describing EXPR, the source of region of\n+   a poisoned_svalue for use in a poisoned_value_diagnostic.\n+   Return NULL if there is no good region to use.  */\n+\n+const region *\n+region_model::get_region_for_poisoned_expr (tree expr) const\n+{\n+  if (TREE_CODE (expr) == SSA_NAME)\n+    {\n+      tree decl = SSA_NAME_VAR (expr);\n+      if (decl && DECL_P (decl))\n+\texpr = decl;\n+      else\n+\treturn NULL;\n+    }\n+  return get_lvalue (expr, NULL);\n+}\n+\n /* Update this model for the ASSIGN stmt, using CTXT to report any\n    diagnostics.  */\n \n@@ -2134,7 +2167,7 @@ region_model::deref_rvalue (const svalue *ptr_sval, tree ptr_tree,\n \t\tconst poisoned_svalue *poisoned_sval\n \t\t  = as_a <const poisoned_svalue *> (ptr_sval);\n \t\tenum poison_kind pkind = poisoned_sval->get_poison_kind ();\n-\t\tctxt->warn (new poisoned_value_diagnostic (ptr, pkind));\n+\t\tctxt->warn (new poisoned_value_diagnostic (ptr, pkind, NULL));\n \t      }\n \t  }\n       }"}, {"sha": "983d082ab3eeab8c990699fbdb4edb836a369c5a", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -813,6 +813,7 @@ class region_model\n   const svalue *check_for_poison (const svalue *sval,\n \t\t\t\t  tree expr,\n \t\t\t\t  region_model_context *ctxt) const;\n+  const region * get_region_for_poisoned_expr (tree expr) const;\n \n   void check_dynamic_size_for_taint (enum memory_space mem_space,\n \t\t\t\t     const svalue *size_in_bytes,"}, {"sha": "20eca524c04849f2c178cab5bf8dd9bf9ab430f2", "filename": "gcc/analyzer/region.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Fanalyzer%2Fregion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Fanalyzer%2Fregion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion.h?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -298,6 +298,7 @@ class frame_region : public space_region\n   /* Accessors.  */\n   const frame_region *get_calling_frame () const { return m_calling_frame; }\n   function *get_function () const { return m_fun; }\n+  tree get_fndecl () const { return get_function ()->decl; }\n   int get_index () const { return m_index; }\n   int get_stack_depth () const { return m_index + 1; }\n "}, {"sha": "43181911795925dc490a6dabf53dfcb2954c4088", "filename": "gcc/testsuite/gcc.dg/analyzer/data-model-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -152,7 +152,7 @@ int test_12 (void)\n /* Use of uninit value.  */\n int test_12a (void)\n {\n-  int i;\n+  int i; /* { dg-message \"region created on stack here\" } */\n   return i; /* { dg-warning \"use of uninitialized value 'i'\" } */\n }\n \n@@ -163,7 +163,7 @@ void test_12b (void *p, void *q)\n \n int test_12c (void)\n {\n-  int i;\n+  int i; /* { dg-message \"region created on stack here\" } */\n   int j;\n \n   j = i; /* { dg-warning \"use of uninitialized value 'i'\" } */\n@@ -349,7 +349,7 @@ void test_18 (int i)\n \n void test_19 (void)\n {\n-  int i, j;\n+  int i, j; /* { dg-message \"region created on stack here\" } */\n   /* Compare two uninitialized locals.  */\n     __analyzer_eval (i == j); /* { dg-warning \"UNKNOWN\" \"unknown \" } */\n     /* { dg-warning \"use of uninitialized value 'i'\" \"uninit i\" { target *-*-* } .-1 } */\n@@ -633,7 +633,7 @@ void test_29a (struct coord p[])\n \n void test_29b (void)\n {\n-  struct coord p[11];\n+  struct coord p[11]; /* { dg-message \"region created on stack here\" } */\n   struct coord *q;\n \n   p[0].x = 100024;\n@@ -819,15 +819,15 @@ void test_36 (int i)\n \n int test_37 (void)\n {\n-  int *ptr;\n+  int *ptr; /* { dg-message \"region created on stack here\" } */\n   return *ptr; /* { dg-warning \"use of uninitialized value 'ptr'\" } */\n }\n \n /* Write through uninitialized pointer.  */\n \n void test_37a (int i)\n {\n-  int *ptr;\n+  int *ptr; /* { dg-message \"region created on stack here\" } */\n   *ptr = i; /* { dg-warning \"use of uninitialized value 'ptr'\" } */\n }\n "}, {"sha": "3219f85f721bdaa0b4bb1b358e1d26136fc0ea32", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-1.c?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -189,7 +189,7 @@ void test_15 (void)\n \n void test_16 (void)\n {\n-  void *p, *q;\n+  void *p, *q; /* { dg-message \"region created on stack here\" } */\n \n   p = malloc (1024);\n   if (!p)\n@@ -457,7 +457,7 @@ test_39 (int i)\n int *\n test_40 (int i)\n {\n-  int *p = (int*)malloc(sizeof(int*));\n+  int *p = (int*)malloc(sizeof(int*)); /* { dg-message \"region created on heap here\" } */\n   i = *p; /* { dg-warning \"dereference of possibly-NULL 'p' \\\\\\[CWE-690\\\\\\]\" \"possibly-null\" } */\n   /* { dg-warning \"use of uninitialized value '\\\\*p'\" \"uninit\" { target *-*-*} .-1 } */\n   return p;"}, {"sha": "b12408a69a01611d890f6cbe1088e68aa6798b46", "filename": "gcc/testsuite/gcc.dg/analyzer/memset-CVE-2017-18549-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemset-CVE-2017-18549-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemset-CVE-2017-18549-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemset-CVE-2017-18549-1.c?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -47,7 +47,7 @@ static int aac_send_raw_srb(/* [...snip...] */)\n \n \t/* [...snip...] */\n \n-\tstruct aac_srb_reply reply;\n+\tstruct aac_srb_reply reply; /* { dg-message \"region created on stack here\" } */\n \n \treply.status = ST_OK;\n "}, {"sha": "b42e64ce3389ffa2a24f3a5ae04356ee1f335321", "filename": "gcc/testsuite/gcc.dg/analyzer/pr101547.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101547.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101547.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101547.c?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -5,7 +5,7 @@ void\n k2 (void)\n {\n   char *setfiles[1];\n-  int i;\n+  int i; /* { dg-message \"region created on stack here\" } */\n \n   setfiles[i] = fopen (\"\", \"\"); /* { dg-warning \"use of uninitialized value 'i'\" } */\n } /* { dg-warning \"leak of FILE\" } */"}, {"sha": "7700c7d030ff56da32d1a33d3778c682b550c6d1", "filename": "gcc/testsuite/gcc.dg/analyzer/pr101875.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101875.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101875.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101875.c?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -8,7 +8,7 @@ void\n k2 (void)\n {\n   char *setfiles[1];\n-  int i;\n+  int i; /* { dg-message \"region created on stack here\" } */\n \n   setfiles[i] = fopen(\"\", \"\"); /* { dg-warning \"use of uninitialized value 'i'\" } */\n   if (!setfiles[i]) /* { dg-warning \"use of uninitialized value 'i'\" } */"}, {"sha": "d15820af27f2e8ac8ba5e6934109861f7d01512a", "filename": "gcc/testsuite/gcc.dg/analyzer/pr101962.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101962.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101962.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101962.c?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -16,7 +16,7 @@ maybe_inc_int_ptr (int *ptr)\n int\n test_1 (void)\n {\n-  int stack;\n+  int stack; /* { dg-message \"region created on stack here\" } */\n   int *a = &stack;\n   a = maybe_inc_int_ptr (a);\n   a = maybe_inc_int_ptr (a);"}, {"sha": "b047c4ca5f205281ce7965756ae6a326b2fb8f6d", "filename": "gcc/testsuite/gcc.dg/analyzer/pr104224.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104224.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104224.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104224.c?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -73,11 +73,11 @@ enum {RED, AMBER, GREEN, BLACK};\n \n int main(void)\n {\n-        struct test t;\n-        int num;\n+        struct test t;  /* { dg-message \"region created on stack here\" } */\n+        int num;  /* { dg-message \"region created on stack here\" } */\n         int arry[10];\n-        int arry_2[10];\n-        int go;\n+        int arry_2[10];  /* { dg-message \"region created on stack here\" } */\n+        int go;  /* { dg-message \"region created on stack here\" } */\n         int color = BLACK;\n \n         func1(&t);"}, {"sha": "a5796735c231ad787dc56c438e5cc662994afaab", "filename": "gcc/testsuite/gcc.dg/analyzer/pr94047.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94047.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94047.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94047.c?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -12,7 +12,7 @@ bar (struct list *l)\n void\n foo (void)\n {\n-  struct list l;\n+  struct list l; /* { dg-message \"region created on stack here\" } */\n   tlist t = l; /* { dg-warning \"use of uninitialized value 'l'\" } */\n   for (;;)\n     bar (&t);"}, {"sha": "2f4e00bcc25d0c3818c885fba441ededabc1652f", "filename": "gcc/testsuite/gcc.dg/analyzer/symbolic-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsymbolic-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsymbolic-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsymbolic-1.c?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -5,7 +5,7 @@\n void test_1 (char a, char b, char c, char d, char e, char f,\n \t     int i, int j)\n {\n-  char arr[1024];\n+  char arr[1024]; /* { dg-message \"region created on stack here\" } */\n   arr[2] = a;  /* (1) */\n   arr[3] = b;  /* (2) */\n "}, {"sha": "cb7b252ef45ab252ad25f6374c6ea51049152442", "filename": "gcc/testsuite/gcc.dg/analyzer/uninit-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-1.c?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -2,13 +2,13 @@\n \n int test_1 (void)\n {\n-  int i;\n+  int i; /* { dg-message \"region created on stack here\" } */\n   return i; /* { dg-warning \"use of uninitialized value 'i'\" } */\n }\n \n int test_2 (void)\n {\n-  int i;\n+  int i; /* { dg-message \"region created on stack here\" } */\n   return i * 2; /* { dg-warning \"use of uninitialized value 'i'\" } */\n }\n \n@@ -20,13 +20,13 @@ int test_3 (void)\n \n int test_4 (void)\n {\n-  int *p;\n+  int *p; /* { dg-message \"region created on stack here\" } */\n   return *p; /* { dg-warning \"use of uninitialized value 'p'\" } */\n }\n \n int test_5 (int flag, int *q)\n {\n-  int *p;\n+  int *p; /* { dg-message \"region created on stack here\" } */\n   if (flag) /* { dg-message \"following 'false' branch\" } */\n     p = q;\n \n@@ -39,6 +39,6 @@ int test_5 (int flag, int *q)\n \n int test_6 (int i)\n {\n-  int arr[10];\n+  int arr[10]; /* { dg-message \"region created on stack here\" } */\n   return arr[i]; /* { dg-warning \"use of uninitialized value 'arr\\\\\\[i\\\\\\]'\" } */\n }"}, {"sha": "616cb3423481f29922517cb5841c2f7f49d385ec", "filename": "gcc/testsuite/gcc.dg/analyzer/uninit-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-4.c?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -14,7 +14,7 @@ struct foo\n struct foo *__attribute__((noinline))\n alloc_foo (int a, int b)\n {\n-  struct foo *p = malloc (sizeof (struct foo));\n+  struct foo *p = malloc (sizeof (struct foo)); /* { dg-message \"region created on heap here\" } */\n   if (!p)\n     return NULL;\n   p->i = a;"}, {"sha": "5dd3f8522d2df7f1d1ac0f5373d94bdb523d8895", "filename": "gcc/testsuite/gcc.dg/analyzer/uninit-alloca.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-alloca.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-alloca.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-alloca.c?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-require-effective-target alloca } */\n+\n+int test_1 (void)\n+{\n+  int *p = __builtin_alloca (sizeof (int)); /* { dg-message \"region created on stack here\" } */\n+  return *p; /* { dg-warning \"use of uninitialized value '\\\\*p'\" } */\n+}"}, {"sha": "e3bb8ceb5b3812a035838734c77aacbb4272b1ef", "filename": "gcc/testsuite/gcc.dg/analyzer/uninit-pr94713.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-pr94713.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-pr94713.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-pr94713.c?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -3,7 +3,7 @@ void f2 (int);\n \n int foo (void)\n {\n-  int *p;\n+  int *p; /* { dg-message \"region created on stack here\" } */\n \n   f1 (p); /* { dg-warning \"use of uninitialized value 'p'\" } */\n   f2 (p[0]); /* { dg-warning \"use of uninitialized value 'p'\" } */"}, {"sha": "f120901ec1a0fdb82ec4e822c89b3d61ea1bad5a", "filename": "gcc/testsuite/gcc.dg/analyzer/uninit-pr94714.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-pr94714.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-pr94714.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-pr94714.c?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -3,7 +3,7 @@\n int main (void)\n {\n   int *p;\n-  int i;\n+  int i; /* { dg-message \"region created on stack here\" } */\n \n   p = &i; /* { dg-bogus \"uninitialized\" } */\n   printf (\"%d\\n\", p[0]);  /* { dg-warning \"use of uninitialized value '\\\\*p'\" } */"}, {"sha": "5098b4fc363b76375bd76a0a44c274fded060da8", "filename": "gcc/testsuite/gcc.dg/analyzer/zlib-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fzlib-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00e7d024afb80e95fb36d74b1c059468d883a850/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fzlib-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fzlib-3.c?ref=00e7d024afb80e95fb36d74b1c059468d883a850", "patch": "@@ -46,7 +46,7 @@ static int huft_build(uInt *b, uInt n, uInt s, const uInt *d, const uInt *e,\n   uInt mask;\n   register uInt *p;\n   inflate_huft *q;\n-  struct inflate_huft_s r;\n+  struct inflate_huft_s r; /* { dg-message \"region created on stack here\" } */\n   inflate_huft *u[15];\n   register int w;\n   uInt x[15 + 1];"}]}