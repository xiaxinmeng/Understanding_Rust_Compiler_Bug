{"sha": "664d17c65c7505608c576515f32fa5099727358b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY0ZDE3YzY1Yzc1MDU2MDhjNTc2NTE1ZjMyZmE1MDk5NzI3MzU4Yg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-01-19T12:06:18Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-01-19T12:06:18Z"}, "message": "Adjust predictor values according to SPEC2006 and SPEC2017.\n\n2018-01-19  Martin Liska  <mliska@suse.cz>\n\n\t* predict.def (PRED_LOOP_EXIT): Change from 85 to 89.\n\t(PRED_LOOP_EXIT_WITH_RECURSION): Change from 72 to 78.\n\t(PRED_LOOP_EXTRA_EXIT): Change from 83 to 67.\n\t(PRED_OPCODE_POSITIVE): Change from 64 to 59.\n\t(PRED_TREE_OPCODE_POSITIVE): Change from 64 to 59.\n\t(PRED_CONST_RETURN): Change from 69 to 65.\n\t(PRED_NULL_RETURN): Change from 91 to 71.\n\t(PRED_LOOP_IV_COMPARE_GUESS): Change from 98 to 64.\n\t(PRED_LOOP_GUARD): Change from 66 to 73.\n\nFrom-SVN: r256888", "tree": {"sha": "a2d3167baa2038e3ff43769e1e360f89d33a607a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2d3167baa2038e3ff43769e1e360f89d33a607a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/664d17c65c7505608c576515f32fa5099727358b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664d17c65c7505608c576515f32fa5099727358b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/664d17c65c7505608c576515f32fa5099727358b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664d17c65c7505608c576515f32fa5099727358b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e2a1e6a441f9ced9412609cd4d8ae8ede52628a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a1e6a441f9ced9412609cd4d8ae8ede52628a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2a1e6a441f9ced9412609cd4d8ae8ede52628a3"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "de7445670732e4b26d374bb81c7ffff8a0d8862e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664d17c65c7505608c576515f32fa5099727358b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664d17c65c7505608c576515f32fa5099727358b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=664d17c65c7505608c576515f32fa5099727358b", "patch": "@@ -1,3 +1,15 @@\n+2018-01-19  Martin Liska  <mliska@suse.cz>\n+\n+\t* predict.def (PRED_LOOP_EXIT): Change from 85 to 89.\n+\t(PRED_LOOP_EXIT_WITH_RECURSION): Change from 72 to 78.\n+\t(PRED_LOOP_EXTRA_EXIT): Change from 83 to 67.\n+\t(PRED_OPCODE_POSITIVE): Change from 64 to 59.\n+\t(PRED_TREE_OPCODE_POSITIVE): Change from 64 to 59.\n+\t(PRED_CONST_RETURN): Change from 69 to 65.\n+\t(PRED_NULL_RETURN): Change from 91 to 71.\n+\t(PRED_LOOP_IV_COMPARE_GUESS): Change from 98 to 64.\n+\t(PRED_LOOP_GUARD): Change from 66 to 73.\n+\n 2018-01-19  Martin Liska  <mliska@suse.cz>\n \n \t* predict.c (predict_insn_def): Add new assert."}, {"sha": "fe72080d5bdde35bf142dade9358783c031bd3b3", "filename": "gcc/predict.def", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/664d17c65c7505608c576515f32fa5099727358b/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/664d17c65c7505608c576515f32fa5099727358b/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=664d17c65c7505608c576515f32fa5099727358b", "patch": "@@ -89,28 +89,28 @@ DEF_PREDICTOR (PRED_COLD_FUNCTION, \"cold function call\", PROB_VERY_LIKELY,\n \t       PRED_FLAG_FIRST_MATCH)\n \n /* Edge causing loop to terminate is probably not taken.  */\n-DEF_PREDICTOR (PRED_LOOP_EXIT, \"loop exit\", HITRATE (85),\n+DEF_PREDICTOR (PRED_LOOP_EXIT, \"loop exit\", HITRATE (89),\n \t       PRED_FLAG_FIRST_MATCH)\n \n /* Same as LOOP_EXIT but for loops containing recursive call.  */\n DEF_PREDICTOR (PRED_LOOP_EXIT_WITH_RECURSION, \"loop exit with recursion\",\n-\t       HITRATE (72), PRED_FLAG_FIRST_MATCH)\n+\t       HITRATE (78), PRED_FLAG_FIRST_MATCH)\n \n /* Edge causing loop to terminate by computing value used by later\n    conditional.  */\n-DEF_PREDICTOR (PRED_LOOP_EXTRA_EXIT, \"extra loop exit\", HITRATE (83),\n+DEF_PREDICTOR (PRED_LOOP_EXTRA_EXIT, \"extra loop exit\", HITRATE (67),\n \t       PRED_FLAG_FIRST_MATCH)\n \n /* Pointers are usually not NULL.  */\n DEF_PREDICTOR (PRED_POINTER, \"pointer\", HITRATE (70), 0)\n DEF_PREDICTOR (PRED_TREE_POINTER, \"pointer (on trees)\", HITRATE (70), 0)\n \n /* NE is probable, EQ not etc...  */\n-DEF_PREDICTOR (PRED_OPCODE_POSITIVE, \"opcode values positive\", HITRATE (64), 0)\n+DEF_PREDICTOR (PRED_OPCODE_POSITIVE, \"opcode values positive\", HITRATE (59), 0)\n DEF_PREDICTOR (PRED_OPCODE_NONEQUAL, \"opcode values nonequal\", HITRATE (66), 0)\n DEF_PREDICTOR (PRED_FPOPCODE, \"fp_opcode\", HITRATE (90), 0)\n DEF_PREDICTOR (PRED_TREE_OPCODE_POSITIVE, \"opcode values positive (on trees)\",\n-\t       HITRATE (64), 0)\n+\t       HITRATE (59), 0)\n DEF_PREDICTOR (PRED_TREE_OPCODE_NONEQUAL, \"opcode values nonequal (on trees)\",\n \t       HITRATE (66), 0)\n DEF_PREDICTOR (PRED_TREE_FPOPCODE, \"fp_opcode (on trees)\", HITRATE (90), 0)\n@@ -136,18 +136,18 @@ DEF_PREDICTOR (PRED_TREE_EARLY_RETURN, \"early return (on trees)\", HITRATE (66),\n DEF_PREDICTOR (PRED_GOTO, \"goto\", HITRATE (66), 0)\n \n /* Branch ending with return constant is probably not taken.  */\n-DEF_PREDICTOR (PRED_CONST_RETURN, \"const return\", HITRATE (69), 0)\n+DEF_PREDICTOR (PRED_CONST_RETURN, \"const return\", HITRATE (65), 0)\n \n /* Branch ending with return negative constant is probably not taken.  */\n DEF_PREDICTOR (PRED_NEGATIVE_RETURN, \"negative return\", HITRATE (98), 0)\n \n /* Branch ending with return; is probably not taken */\n-DEF_PREDICTOR (PRED_NULL_RETURN, \"null return\", HITRATE (91), 0)\n+DEF_PREDICTOR (PRED_NULL_RETURN, \"null return\", HITRATE (71), 0)\n \n /* Branches to compare induction variable to a loop bound is\n    extremely likely.  */\n DEF_PREDICTOR (PRED_LOOP_IV_COMPARE_GUESS, \"guess loop iv compare\",\n-\t       HITRATE (98), 0)\n+\t       HITRATE (64), 0)\n \n /* Use number of loop iterations determined by # of iterations analysis\n    to set probability of branches that compares IV to loop bound variable.  */\n@@ -160,7 +160,7 @@ DEF_PREDICTOR (PRED_LOOP_IV_COMPARE, \"loop iv compare\", PROB_UNINITIALIZED,\n        for (loop2)\n \t body;\n    guess that cond is unlikely.  */\n-DEF_PREDICTOR (PRED_LOOP_GUARD, \"loop guard\", HITRATE (66), 0)\n+DEF_PREDICTOR (PRED_LOOP_GUARD, \"loop guard\", HITRATE (73), 0)\n \n /* Same but for loops containing recursion.  */\n DEF_PREDICTOR (PRED_LOOP_GUARD_WITH_RECURSION, \"loop guard with recursion\","}]}