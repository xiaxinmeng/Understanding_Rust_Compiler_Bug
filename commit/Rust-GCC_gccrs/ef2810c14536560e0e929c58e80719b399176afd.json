{"sha": "ef2810c14536560e0e929c58e80719b399176afd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYyODEwYzE0NTM2NTYwZTBlOTI5YzU4ZTgwNzE5YjM5OTE3NmFmZA==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2014-10-26T14:46:14Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2014-10-26T14:46:14Z"}, "message": "linux-unwind.h (pa32_read_access_ok): New function.\n\n\t* config/pa/linux-unwind.h (pa32_read_access_ok): New function.\n\t(pa32_fallback_frame_state): Use pa32_read_access_ok to check if\n\tmemory read accesses are ok.\n\nFrom-SVN: r216716", "tree": {"sha": "60e477c920c2141bd940ae8fe0d6188c2b545b27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60e477c920c2141bd940ae8fe0d6188c2b545b27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef2810c14536560e0e929c58e80719b399176afd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef2810c14536560e0e929c58e80719b399176afd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef2810c14536560e0e929c58e80719b399176afd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef2810c14536560e0e929c58e80719b399176afd/comments", "author": null, "committer": null, "parents": [{"sha": "d44f6d93470c7a689fe0836b18f0aa01cca99cb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d44f6d93470c7a689fe0836b18f0aa01cca99cb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d44f6d93470c7a689fe0836b18f0aa01cca99cb8"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "36a63bcc693a0935f737dbfc747a811a63d25bf5", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2810c14536560e0e929c58e80719b399176afd/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2810c14536560e0e929c58e80719b399176afd/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=ef2810c14536560e0e929c58e80719b399176afd", "patch": "@@ -1,3 +1,9 @@\n+2014-10-26  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/linux-unwind.h (pa32_read_access_ok): New function.\n+\t(pa32_fallback_frame_state): Use pa32_read_access_ok to check if\n+\tmemory read accesses are ok.\n+\n 2014-10-25  Joseph Myers  <joseph@codesourcery.com>\n \n \t* configure.ac (ppc_fp_type): Set variable on powerpc*-*-linux*."}, {"sha": "98289a7006d9e30edbb73c9d061dee0cb4fec3e9", "filename": "libgcc/config/pa/linux-unwind.h", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2810c14536560e0e929c58e80719b399176afd/libgcc%2Fconfig%2Fpa%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2810c14536560e0e929c58e80719b399176afd/libgcc%2Fconfig%2Fpa%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Flinux-unwind.h?ref=ef2810c14536560e0e929c58e80719b399176afd", "patch": "@@ -32,6 +32,17 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include <signal.h>\n #include <sys/ucontext.h>\n \n+/* Return TRUE if read access to *P is allowed.  */\n+\n+static inline long\n+pa32_read_access_ok (void *p)\n+{\n+  long ret;\n+\n+  __asm__ (\"proberi (%1),3,%0\" : \"=r\" (ret) : \"r\" (p) :);\n+  return ret;\n+}\n+\n /* Unfortunately, because of various bugs and changes to the kernel,\n    we have several cases to deal with.\n \n@@ -48,7 +59,12 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    tell us how to locate the sigcontext structure.\n \n    Note that with a 2.4 64-bit kernel, the signal context is not properly\n-   passed back to userspace so the unwind will not work correctly.  */\n+   passed back to userspace so the unwind will not work correctly.\n+\n+   There is also a bug in various glibc versions.  The (CONTEXT)->ra\n+   for the outermost frame is not marked as undefined, so we need to\n+   check whether read access is allowed for all the accesses used in\n+   searching for the signal trampoline.  */\n \n #define MD_FALLBACK_FRAME_STATE_FOR pa32_fallback_frame_state\n \n@@ -73,14 +89,17 @@ pa32_fallback_frame_state (struct _Unwind_Context *context,\n      e4008200 be,l 0x100(%sr2, %r0), %sr0, %r31\n      08000240 nop  */\n \n-  if (pc[0] == 0x34190000 || pc[0] == 0x34190002)\n+  if (pa32_read_access_ok (pc)\n+      && (pc[0] == 0x34190000 || pc[0] == 0x34190002))\n     off = 4*4;\n-  else if (pc[4] == 0x34190000 || pc[4] == 0x34190002)\n+  else if (pa32_read_access_ok (&pc[4])\n+\t   && (pc[4] == 0x34190000 || pc[4] == 0x34190002))\n     {\n       pc += 4;\n       off = 10 * 4;\n     }\n-  else if (pc[5] == 0x34190000 || pc[5] == 0x34190002)\n+  else if (pa32_read_access_ok (&pc[5])\n+\t   && (pc[5] == 0x34190000 || pc[5] == 0x34190002))\n     {\n       pc += 5;\n       off = 10 * 4;\n@@ -96,13 +115,16 @@ pa32_fallback_frame_state (struct _Unwind_Context *context,\n \t word boundary and we can then determine the frame offset.  */\n       sp = (unsigned long)context->ra;\n       pc = (unsigned int *)sp;\n-      if ((pc[0] == 0x34190000 || pc[0] == 0x34190002) && (sp & 4))\n+      if ((sp & 4)\n+\t  && pa32_read_access_ok (pc)\n+\t  && (pc[0] == 0x34190000 || pc[0] == 0x34190002))\n \toff = 5 * 4;\n       else\n \treturn _URC_END_OF_STACK;\n     }\n \n-  if (pc[1] != 0x3414015a\n+  if (!pa32_read_access_ok (&pc[3])\n+      || pc[1] != 0x3414015a\n       || pc[2] != 0xe4008200\n       || pc[3] != 0x08000240)\n     return _URC_END_OF_STACK;"}]}