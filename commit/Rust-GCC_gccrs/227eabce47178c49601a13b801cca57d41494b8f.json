{"sha": "227eabce47178c49601a13b801cca57d41494b8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI3ZWFiY2U0NzE3OGM0OTYwMWExM2I4MDFjY2E1N2Q0MTQ5NGI4Zg==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2014-12-09T07:53:17Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2014-12-09T07:53:17Z"}, "message": "re PR bootstrap/63995 (Bootstrap error with -mmpx -fcheck-pointer-bounds)\n\ngcc/\n\n\tPR bootstrap/63995\n\t* tree-chkp.c (chkp_make_static_bounds): Share bounds var\n\tbetween nodes sharing assembler name.\n\ngcc/testsuite/\n\n\tPR bootstrap/63995\n\t* g++.dg/dg.exp: Add mpx-dg.exp.\n\t* g++.dg/pr63995-1.C: New.\n\nFrom-SVN: r218506", "tree": {"sha": "e3864d7dab150c66d4ff4cffb2ce74db44e62027", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3864d7dab150c66d4ff4cffb2ce74db44e62027"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/227eabce47178c49601a13b801cca57d41494b8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/227eabce47178c49601a13b801cca57d41494b8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/227eabce47178c49601a13b801cca57d41494b8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/227eabce47178c49601a13b801cca57d41494b8f/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9ea9950e0d2b51c94497d0011aa7718c41fbd2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ea9950e0d2b51c94497d0011aa7718c41fbd2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9ea9950e0d2b51c94497d0011aa7718c41fbd2d"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "dbd6272a0ed1a2466c81af84dbe7b6009378bd60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/227eabce47178c49601a13b801cca57d41494b8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/227eabce47178c49601a13b801cca57d41494b8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=227eabce47178c49601a13b801cca57d41494b8f", "patch": "@@ -1,3 +1,9 @@\n+2014-12-09  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\tPR bootstrap/63995\n+\t* tree-chkp.c (chkp_make_static_bounds): Share bounds var\n+\tbetween nodes sharing assembler name.\n+\n 2014-12-08  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/64204"}, {"sha": "1b1e7d5e95901a5db1d40f1a538aca1e2c46628f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/227eabce47178c49601a13b801cca57d41494b8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/227eabce47178c49601a13b801cca57d41494b8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=227eabce47178c49601a13b801cca57d41494b8f", "patch": "@@ -1,3 +1,9 @@\n+2014-12-09  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\tPR bootstrap/63995\n+\t* g++.dg/dg.exp: Add mpx-dg.exp.\n+\t* g++.dg/pr63995-1.C: New.\n+\n 2014-12-08  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* gcc.target/aarch64/bics_4.c: New."}, {"sha": "44eab0c0c383c805d85b2bfdeb640971920f5276", "filename": "gcc/testsuite/g++.dg/dg.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/227eabce47178c49601a13b801cca57d41494b8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/227eabce47178c49601a13b801cca57d41494b8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp?ref=227eabce47178c49601a13b801cca57d41494b8f", "patch": "@@ -18,6 +18,7 @@\n \n # Load support procs.\n load_lib g++-dg.exp\n+load_lib mpx-dg.exp\n \n # If a testcase doesn't have special options, use these.\n global DEFAULT_CXXFLAGS"}, {"sha": "82e76063ef1893d25878d343010871d14affcd6c", "filename": "gcc/testsuite/g++.dg/pr63995-1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/227eabce47178c49601a13b801cca57d41494b8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr63995-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/227eabce47178c49601a13b801cca57d41494b8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr63995-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr63995-1.C?ref=227eabce47178c49601a13b801cca57d41494b8f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-O2 -g -fcheck-pointer-bounds -mmpx\" } */\n+\n+int test1 (int i)\n+{\n+  extern const int arr[10];\n+  return arr[i];\n+}\n+\n+extern const int arr[10];\n+\n+int test2 (int i)\n+{\n+  return arr[i];\n+}"}, {"sha": "e7b9bbf602ec457e7dd0a7f73fa108476d1899cd", "filename": "gcc/tree-chkp.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/227eabce47178c49601a13b801cca57d41494b8f/gcc%2Ftree-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/227eabce47178c49601a13b801cca57d41494b8f/gcc%2Ftree-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp.c?ref=227eabce47178c49601a13b801cca57d41494b8f", "patch": "@@ -2760,9 +2760,23 @@ chkp_make_static_bounds (tree obj)\n   /* First check if we already have required var.  */\n   if (chkp_static_var_bounds)\n     {\n-      slot = chkp_static_var_bounds->get (obj);\n-      if (slot)\n-\treturn *slot;\n+      /* For vars we use assembler name as a key in\n+\t chkp_static_var_bounds map.  It allows to\n+\t avoid duplicating bound vars for decls\n+\t sharing assembler name.  */\n+      if (TREE_CODE (obj) == VAR_DECL)\n+\t{\n+\t  tree name = DECL_ASSEMBLER_NAME (obj);\n+\t  slot = chkp_static_var_bounds->get (name);\n+\t  if (slot)\n+\t    return *slot;\n+\t}\n+      else\n+\t{\n+\t  slot = chkp_static_var_bounds->get (obj);\n+\t  if (slot)\n+\t    return *slot;\n+\t}\n     }\n \n   /* Build decl for bounds var.  */\n@@ -2826,7 +2840,13 @@ chkp_make_static_bounds (tree obj)\n   if (!chkp_static_var_bounds)\n     chkp_static_var_bounds = new hash_map<tree, tree>;\n \n-  chkp_static_var_bounds->put (obj, bnd_var);\n+  if (TREE_CODE (obj) == VAR_DECL)\n+    {\n+      tree name = DECL_ASSEMBLER_NAME (obj);\n+      chkp_static_var_bounds->put (name, bnd_var);\n+    }\n+  else\n+    chkp_static_var_bounds->put (obj, bnd_var);\n \n   return bnd_var;\n }"}]}