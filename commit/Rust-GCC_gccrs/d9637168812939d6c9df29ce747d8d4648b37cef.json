{"sha": "d9637168812939d6c9df29ce747d8d4648b37cef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk2MzcxNjg4MTI5MzlkNmM5ZGYyOWNlNzQ3ZDhkNDY0OGIzN2NlZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-22T19:12:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-22T22:05:42Z"}, "message": "c-family: Remove location parm from unsafe_conversion_p.\n\nMy earlier change removed the warning calls from this function, so the\nlocation is no longer useful.\n\n\t* c-common.c (unsafe_conversion_p): Remove location parm.", "tree": {"sha": "c004b459cb8d6ac1b58af5af2646e98736c91e8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c004b459cb8d6ac1b58af5af2646e98736c91e8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9637168812939d6c9df29ce747d8d4648b37cef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9637168812939d6c9df29ce747d8d4648b37cef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9637168812939d6c9df29ce747d8d4648b37cef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9637168812939d6c9df29ce747d8d4648b37cef/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9085381f1931cc3667412c8fff91878184835901", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9085381f1931cc3667412c8fff91878184835901", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9085381f1931cc3667412c8fff91878184835901"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "774e29be1041a08743a166308bcb0047b031af05", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9637168812939d6c9df29ce747d8d4648b37cef/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9637168812939d6c9df29ce747d8d4648b37cef/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=d9637168812939d6c9df29ce747d8d4648b37cef", "patch": "@@ -1324,14 +1324,11 @@ int_safely_convertible_to_real_p (const_tree from_type, const_tree to_type)\n    to TYPE.  */\n \n enum conversion_safety\n-unsafe_conversion_p (location_t loc, tree type, tree expr, tree result,\n-\t\t     bool check_sign)\n+unsafe_conversion_p (tree type, tree expr, tree result, bool check_sign)\n {\n   enum conversion_safety give_warning = SAFE_CONVERSION; /* is 0 or false */\n   tree expr_type = TREE_TYPE (expr);\n \n-  loc = expansion_point_location_if_in_system_header (loc);\n-\n   expr = fold_for_warn (expr);\n \n   if (TREE_CODE (expr) == REAL_CST || TREE_CODE (expr) == INTEGER_CST)\n@@ -1402,7 +1399,7 @@ unsafe_conversion_p (location_t loc, tree type, tree expr, tree result,\n \t   with different type of EXPR, but it is still safe, because when EXPR\n \t   is a constant, it's type is not used in text of generated warnings\n \t   (otherwise they could sound misleading).  */\n-\treturn unsafe_conversion_p (loc, type, TREE_REALPART (expr), result,\n+\treturn unsafe_conversion_p (type, TREE_REALPART (expr), result,\n \t\t\t\t    check_sign);\n       /* Conversion from complex constant with non-zero imaginary part.  */\n       else\n@@ -1412,10 +1409,10 @@ unsafe_conversion_p (location_t loc, tree type, tree expr, tree result,\n \t  if (TREE_CODE (type) == COMPLEX_TYPE)\n \t    {\n \t      enum conversion_safety re_safety =\n-\t\tunsafe_conversion_p (loc, type, TREE_REALPART (expr),\n+\t\tunsafe_conversion_p (type, TREE_REALPART (expr),\n \t\t\t\t     result, check_sign);\n \t      enum conversion_safety im_safety =\n-\t\tunsafe_conversion_p (loc, type, imag_part, result, check_sign);\n+\t\tunsafe_conversion_p (type, imag_part, result, check_sign);\n \n \t      /* Merge the results into appropriate single warning.  */\n \n@@ -8068,7 +8065,7 @@ scalar_to_vector (location_t loc, enum tree_code code, tree op0, tree op1,\n \tif (TREE_CODE (type0) == INTEGER_TYPE\n \t    && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE)\n \t  {\n-\t    if (unsafe_conversion_p (loc, TREE_TYPE (type1), op0,\n+\t    if (unsafe_conversion_p (TREE_TYPE (type1), op0,\n \t\t\t\t     NULL_TREE, false))\n \t      {\n \t\tif (complain)\n@@ -8117,7 +8114,7 @@ scalar_to_vector (location_t loc, enum tree_code code, tree op0, tree op1,\n \tif (TREE_CODE (type0) == INTEGER_TYPE\n \t    && TREE_CODE (TREE_TYPE (type1)) == INTEGER_TYPE)\n \t  {\n-\t    if (unsafe_conversion_p (loc, TREE_TYPE (type1), op0,\n+\t    if (unsafe_conversion_p (TREE_TYPE (type1), op0,\n \t\t\t\t     NULL_TREE, false))\n \t      {\n \t\tif (complain)\n@@ -8133,7 +8130,7 @@ scalar_to_vector (location_t loc, enum tree_code code, tree op0, tree op1,\n \t\t     || TREE_CODE (type0) == INTEGER_TYPE)\n \t\t && SCALAR_FLOAT_TYPE_P (TREE_TYPE (type1)))\n \t  {\n-\t    if (unsafe_conversion_p (loc, TREE_TYPE (type1), op0,\n+\t    if (unsafe_conversion_p (TREE_TYPE (type1), op0,\n \t\t\t\t     NULL_TREE, false))\n \t      {\n \t\tif (complain)"}, {"sha": "3e26ca034ca36fc673e285faa72b83fdc2bfacd9", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9637168812939d6c9df29ce747d8d4648b37cef/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9637168812939d6c9df29ce747d8d4648b37cef/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=d9637168812939d6c9df29ce747d8d4648b37cef", "patch": "@@ -853,8 +853,7 @@ extern tree c_common_signed_type (tree);\n extern tree c_common_signed_or_unsigned_type (int, tree);\n extern void c_common_init_ts (void);\n extern tree c_build_bitfield_integer_type (unsigned HOST_WIDE_INT, int);\n-extern enum conversion_safety unsafe_conversion_p (location_t, tree, tree, tree,\n-\t\t\t\t\t\t   bool);\n+extern enum conversion_safety unsafe_conversion_p (tree, tree, tree, bool);\n extern bool decl_with_nonnull_addr_p (const_tree);\n extern tree c_fully_fold (tree, bool, bool *, bool = false);\n extern tree c_wrap_maybe_const (tree, bool);"}, {"sha": "4df4893ca02ef08f7a9c0acd63582d84398a7c8c", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9637168812939d6c9df29ce747d8d4648b37cef/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9637168812939d6c9df29ce747d8d4648b37cef/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=d9637168812939d6c9df29ce747d8d4648b37cef", "patch": "@@ -1202,7 +1202,7 @@ conversion_warning (location_t loc, tree type, tree expr, tree result)\n     case INTEGER_CST:\n     case COMPLEX_CST:\n       {\n-\tconversion_kind = unsafe_conversion_p (loc, type, expr, result, true);\n+\tconversion_kind = unsafe_conversion_p (type, expr, result, true);\n \tint warnopt;\n \tif (conversion_kind == UNSAFE_REAL)\n \t  warnopt = OPT_Wfloat_conversion;\n@@ -1310,7 +1310,7 @@ conversion_warning (location_t loc, tree type, tree expr, tree result)\n       is_arith = true;\n       gcc_fallthrough ();\n     default:\n-      conversion_kind = unsafe_conversion_p (loc, type, expr, result, true);\n+      conversion_kind = unsafe_conversion_p (type, expr, result, true);\n       {\n \tint warnopt;\n \tif (conversion_kind == UNSAFE_REAL)"}, {"sha": "009cb85ad60db76fa1c2b50682e48e4d7414b5f9", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9637168812939d6c9df29ce747d8d4648b37cef/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9637168812939d6c9df29ce747d8d4648b37cef/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=d9637168812939d6c9df29ce747d8d4648b37cef", "patch": "@@ -5170,14 +5170,14 @@ build_conditional_expr_1 (const op_location_t &loc,\n \t     but the warnings (like Wsign-conversion) have already been\n \t     given by the scalar build_conditional_expr_1. We still check\n \t     unsafe_conversion_p to forbid truncating long long -> float.  */\n-\t  if (unsafe_conversion_p (loc, stype, arg2, NULL_TREE, false))\n+\t  if (unsafe_conversion_p (stype, arg2, NULL_TREE, false))\n \t    {\n \t      if (complain & tf_error)\n \t\terror_at (loc, \"conversion of scalar %qH to vector %qI \"\n \t\t\t       \"involves truncation\", arg2_type, vtype);\n \t      return error_mark_node;\n \t    }\n-\t  if (unsafe_conversion_p (loc, stype, arg3, NULL_TREE, false))\n+\t  if (unsafe_conversion_p (stype, arg3, NULL_TREE, false))\n \t    {\n \t      if (complain & tf_error)\n \t\terror_at (loc, \"conversion of scalar %qH to vector %qI \""}]}