{"sha": "780d73d73d39e83d6034d1d7b06c27091e9a9cdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgwZDczZDczZDM5ZTgzZDYwMzRkMWQ3YjA2YzI3MDkxZTlhOWNkYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T09:19:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T09:19:34Z"}, "message": "[multiple changes]\n\n2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_util.ads, sem_util.adb (Is_CCT_Instance): moved from\n\tsem_prag.adb to make it available for GNATprove; for concurrent\n\ttypes replace custom scope climbing with Scope_Same_Or_Within; for\n\tsingle concurrent objects add scope climbing (with Scope_Within),\n\twhich was not there (that's the primary semantic change of this\n\tcommit); also, when comparing a single concurrent object with\n\tits corresponding concurrent type rely on equality of types,\n\tnot of objects (because that's simpler to code).\n\t* sem_prag.adb (Is_CCT_Instance): lifted to sem_util.ads.\n\t(Analyze_Global_Item): adjust special-casing of references to the\n\tcurrent instance of a concurrent unit in the Global contracts\n\tof task types and single tasks objects; similar for references\n\tin the protected operations and entries of protected types and\n\tsingle protected objects (in all these cases the current instance\n\tbehaves as an implicit parameter and must not be mentioned in\n\tthe Global contract).\n\n2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_ch6.adb (Expand_Call_Helper): Introduce temporary for\n\tfunction calls returning a record within a subprogram call,\n\tfor C generation.\n\n2017-09-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Find_Expanded_Name): Handle properly an expanded\n\tname that designates the current instance of a child unit in its\n\town body and appears as the prefix of a reference to an entity\n\tlocal to the child unit.\n\t* exp_ch6.adb, freeze.adb, sem_ch3.adb, sem_prag.adb, sem_util.adb:\n\tMinor reformatting.\n\n2017-09-08  Yannick Moy  <moy@adacore.com>\n\n\t* sem_res.adb (Resolve_Equality_Op): Do not warn on comparisons that\n\tmay be intentional.\n\n2017-09-08  Tristan Gingold  <gingold@adacore.com>\n\n\t* sem_warn.adb (Check_Unused_Withs): Remove test that disabled\n\twarnings on internal units in configurable run time mode.\n\nFrom-SVN: r251871", "tree": {"sha": "6cc2ed5afe27fb0e912331d77b4304f3168b6374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cc2ed5afe27fb0e912331d77b4304f3168b6374"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/780d73d73d39e83d6034d1d7b06c27091e9a9cdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/780d73d73d39e83d6034d1d7b06c27091e9a9cdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/780d73d73d39e83d6034d1d7b06c27091e9a9cdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/comments", "author": null, "committer": null, "parents": [{"sha": "b2c3160ca56fe11425e80fffff754f206faf9e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c3160ca56fe11425e80fffff754f206faf9e19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2c3160ca56fe11425e80fffff754f206faf9e19"}], "stats": {"total": 375, "additions": 241, "deletions": 134}, "files": [{"sha": "8f5ef1bc989592118e4f4363be2bd6a1689103e2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=780d73d73d39e83d6034d1d7b06c27091e9a9cdc", "patch": "@@ -1,3 +1,47 @@\n+2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Is_CCT_Instance): moved from\n+\tsem_prag.adb to make it available for GNATprove; for concurrent\n+\ttypes replace custom scope climbing with Scope_Same_Or_Within; for\n+\tsingle concurrent objects add scope climbing (with Scope_Within),\n+\twhich was not there (that's the primary semantic change of this\n+\tcommit); also, when comparing a single concurrent object with\n+\tits corresponding concurrent type rely on equality of types,\n+\tnot of objects (because that's simpler to code).\n+\t* sem_prag.adb (Is_CCT_Instance): lifted to sem_util.ads.\n+\t(Analyze_Global_Item): adjust special-casing of references to the\n+\tcurrent instance of a concurrent unit in the Global contracts\n+\tof task types and single tasks objects; similar for references\n+\tin the protected operations and entries of protected types and\n+\tsingle protected objects (in all these cases the current instance\n+\tbehaves as an implicit parameter and must not be mentioned in\n+\tthe Global contract).\n+\n+2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call_Helper): Introduce temporary for\n+\tfunction calls returning a record within a subprogram call,\n+\tfor C generation.\n+\n+2017-09-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Find_Expanded_Name): Handle properly an expanded\n+\tname that designates the current instance of a child unit in its\n+\town body and appears as the prefix of a reference to an entity\n+\tlocal to the child unit.\n+\t* exp_ch6.adb, freeze.adb, sem_ch3.adb, sem_prag.adb, sem_util.adb:\n+\tMinor reformatting.\n+\n+2017-09-08  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Equality_Op): Do not warn on comparisons that\n+\tmay be intentional.\n+\n+2017-09-08  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* sem_warn.adb (Check_Unused_Withs): Remove test that disabled\n+\twarnings on internal units in configurable run time mode.\n+\n 2017-09-08  Bob Duff  <duff@adacore.com>\n \n \t* sem_ch3.adb (Build_Derived_Private_Type): Inherit"}, {"sha": "28227653d4480d81b8810d38385b159469fdacb2", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 59, "deletions": 21, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=780d73d73d39e83d6034d1d7b06c27091e9a9cdc", "patch": "@@ -2751,32 +2751,70 @@ package body Exp_Ch6 is\n          end;\n       end if;\n \n-      --  When generating C code, transform a function call that returns a\n-      --  constrained array type into procedure form.\n-\n       if Modify_Tree_For_C\n         and then Nkind (Call_Node) = N_Function_Call\n         and then Is_Entity_Name (Name (Call_Node))\n-        and then Rewritten_For_C (Ultimate_Alias (Entity (Name (Call_Node))))\n       then\n-         --  For internally generated calls ensure that they reference the\n-         --  entity of the spec of the called function (needed since the\n-         --  expander may generate calls using the entity of their body).\n-         --  See for example Expand_Boolean_Operator().\n-\n-         if not (Comes_From_Source (Call_Node))\n-           and then Nkind (Unit_Declaration_Node\n-                            (Ultimate_Alias (Entity (Name (Call_Node))))) =\n-                              N_Subprogram_Body\n-         then\n-            Set_Entity (Name (Call_Node),\n-              Corresponding_Function\n-                (Corresponding_Procedure\n-                  (Ultimate_Alias (Entity (Name (Call_Node))))));\n-         end if;\n+         declare\n+            Func_Id : constant Entity_Id :=\n+                        Ultimate_Alias (Entity (Name (Call_Node)));\n+         begin\n+            --  When generating C code, transform a function call that returns\n+            --  a constrained array type into procedure form.\n \n-         Rewrite_Function_Call_For_C (Call_Node);\n-         return;\n+            if Rewritten_For_C (Func_Id) then\n+\n+               --  For internally generated calls ensure that they reference\n+               --  the entity of the spec of the called function (needed since\n+               --  the expander may generate calls using the entity of their\n+               --  body). See for example Expand_Boolean_Operator().\n+\n+               if not (Comes_From_Source (Call_Node))\n+                 and then Nkind (Unit_Declaration_Node (Func_Id)) =\n+                            N_Subprogram_Body\n+               then\n+                  Set_Entity (Name (Call_Node),\n+                    Corresponding_Function\n+                      (Corresponding_Procedure (Func_Id)));\n+               end if;\n+\n+               Rewrite_Function_Call_For_C (Call_Node);\n+               return;\n+\n+            --  Also introduce a temporary for functions that return a record\n+            --  called within another procedure or function call, since records\n+            --  are passed by pointer in the generated C code, and we cannot\n+            --  take a pointer from a subprogram call.\n+\n+            elsif Nkind (Parent (Call_Node)) in N_Subprogram_Call\n+              and then Is_Record_Type (Etype (Func_Id))\n+            then\n+               declare\n+                  Temp_Id : constant Entity_Id := Make_Temporary (Loc, 'T');\n+                  Decl    : Node_Id;\n+\n+               begin\n+                  --  Generate:\n+                  --    Temp : ... := Func_Call (...);\n+\n+                  Decl :=\n+                    Make_Object_Declaration (Loc,\n+                      Defining_Identifier => Temp_Id,\n+                      Object_Definition   =>\n+                        New_Occurrence_Of (Etype (Func_Id), Loc),\n+                      Expression          =>\n+                        Make_Function_Call (Loc,\n+                          Name                   =>\n+                            New_Occurrence_Of (Func_Id, Loc),\n+                          Parameter_Associations =>\n+                            Parameter_Associations (Call_Node)));\n+\n+                  Insert_Action (Parent (Call_Node), Decl);\n+                  Rewrite (Call_Node, New_Occurrence_Of (Temp_Id, Loc));\n+                  return;\n+               end;\n+            end if;\n+         end;\n       end if;\n \n       --  First step, compute extra actuals, corresponding to any Extra_Formals"}, {"sha": "437951c82e3874424b9fec1a260d83fb2ab990f4", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=780d73d73d39e83d6034d1d7b06c27091e9a9cdc", "patch": "@@ -3423,16 +3423,12 @@ package body Freeze is\n       --------------------\n \n       function Freeze_Profile (E : Entity_Id) return Boolean is\n-         F_Type    : Entity_Id;\n-         R_Type    : Entity_Id;\n-         Warn_Node : Node_Id;\n-\n          function Has_Incomplete_Component (T : Entity_Id) return Boolean;\n-         --  If a type includes a private component from an enclosing scope\n-         --  it cannot be frozen yet. This can happen in a package nested\n-         --  within another, when freezing an expression function whose\n-         --  profile depends on a type in some outer scope. Those types will\n-         --  be frozen at a later time in the enclosing unit.\n+         --  If a type includes a private component from an enclosing scope it\n+         --  cannot be frozen yet. This can happen in a package nested within\n+         --  another, when freezing an expression function whose profile\n+         --  depends on a type in some outer scope. Those types will be frozen\n+         --  at a later time in the enclosing unit.\n \n          ------------------------------\n          -- Has_Incomplete_Component --\n@@ -3456,6 +3452,7 @@ package body Freeze is\n \n                while Present (Comp) loop\n                   Comp_Typ := Etype (Comp);\n+\n                   if Ekind_In (Comp, E_Component, E_Discriminant)\n                     and then Is_Private_Type (Comp_Typ)\n                     and then No (Full_View (Comp_Typ))\n@@ -3464,23 +3461,34 @@ package body Freeze is\n                   then\n                      return True;\n                   end if;\n+\n                   Comp := Next_Entity (Comp);\n                end loop;\n \n                return False;\n \n             elsif Is_Array_Type (T) then\n                Comp_Typ := Component_Type (T);\n-               return Is_Private_Type (Comp_Typ)\n-                 and then No (Full_View (Comp_Typ))\n-                 and then In_Open_Scopes (Scope (Comp_Typ))\n-                 and then Scope (Comp_Typ) /= Current_Scope;\n+\n+               return\n+                 Is_Private_Type (Comp_Typ)\n+                   and then No (Full_View (Comp_Typ))\n+                   and then In_Open_Scopes (Scope (Comp_Typ))\n+                   and then Scope (Comp_Typ) /= Current_Scope;\n \n             else\n                return False;\n             end if;\n          end Has_Incomplete_Component;\n \n+         --  Local variables\n+\n+         F_Type    : Entity_Id;\n+         R_Type    : Entity_Id;\n+         Warn_Node : Node_Id;\n+\n+      --  Start of processing for Freeze_Profile\n+\n       begin\n          --  Loop through formals\n "}, {"sha": "188a0d39799265b6dd94b5696c69815b9f4019ec", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=780d73d73d39e83d6034d1d7b06c27091e9a9cdc", "patch": "@@ -9580,6 +9580,7 @@ package body Sem_Ch3 is\n       --  type, and from any interfaces.\n \n       Inherit_Rep_Item_Chain (Derived_Type, Parent_Type);\n+\n       declare\n          Iface : Node_Id := First (Abstract_Interface_List (Derived_Type));\n       begin"}, {"sha": "51947035007c248f7f27fa58f8f939916a731416", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=780d73d73d39e83d6034d1d7b06c27091e9a9cdc", "patch": "@@ -3437,7 +3437,7 @@ package body Sem_Ch8 is\n          --  addition the renamed entity may depend on the generic formals of\n          --  the enclosing generic.\n \n-         if Is_Actual and not Inside_A_Generic then\n+         if Is_Actual and then not Inside_A_Generic then\n             Freeze_Before (N, Old_S);\n             Freeze_Actual_Profile;\n             Set_Has_Delayed_Freeze (New_S, False);\n@@ -6000,6 +6000,21 @@ package body Sem_Ch8 is\n                Candidate        := Get_Full_View (Non_Limited_View (Id));\n                Is_New_Candidate := True;\n \n+            --  An unusual case arises with a fully qualified name for an\n+            --  entity local to a generic child unit package, within an\n+            --  instantiation of that package. The name of the unit now\n+            --  denotes the renaming created within the instance. This is\n+            --  only relevant in an instance body, see below.\n+\n+            elsif Is_Generic_Instance (Scope (Id))\n+              and then In_Open_Scopes (Scope (Id))\n+              and then In_Instance_Body\n+              and then Ekind (Scope (Id)) = E_Package\n+              and then Ekind (Id) = E_Package\n+              and then Renamed_Entity (Id) = Scope (Id)\n+            then\n+               Is_New_Candidate := True;\n+\n             else\n                Is_New_Candidate := False;\n             end if;\n@@ -6246,6 +6261,10 @@ package body Sem_Ch8 is\n                      end;\n \n                   else\n+                     --  Might be worth specializing the case when the prefix\n+                     --  is a limited view.\n+                     --  ... not declared in limited view of...\n+\n                      Error_Msg_NE (\"& not declared in&\", N, Selector);\n                   end if;\n "}, {"sha": "ed4622e357ff384e128bc5b82996631e6b2ca112", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 32, "deletions": 89, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=780d73d73d39e83d6034d1d7b06c27091e9a9cdc", "patch": "@@ -259,14 +259,6 @@ package body Sem_Prag is\n    --  Determine whether dependency clause Clause is surrounded by extra\n    --  parentheses. If this is the case, issue an error message.\n \n-   function Is_CCT_Instance\n-     (Ref_Id     : Entity_Id;\n-      Context_Id : Entity_Id) return Boolean;\n-   --  Subsidiary to the analysis of pragmas [Refined_]Depends and [Refined_]\n-   --  Global. Determine whether entity Ref_Id denotes the current instance of\n-   --  a concurrent type. Context_Id denotes the associated context where the\n-   --  pragma appears.\n-\n    function Is_Unconstrained_Or_Tagged_Item (Item : Entity_Id) return Boolean;\n    --  Subsidiary to Collect_Subprogram_Inputs_Outputs and the analysis of\n    --  pragma Depends. Determine whether the type of dependency item Item is\n@@ -2188,24 +2180,28 @@ package body Sem_Prag is\n                      --  formal parameter.\n \n                      if Ekind (Item_Id) = E_Protected_Type then\n-                        Error_Msg_Name_1 := Chars (Item_Id);\n-                        SPARK_Msg_NE\n-                          (Fix_Msg (Spec_Id, \"global item of subprogram & \"\n-                           & \"cannot reference current instance of protected \"\n-                           & \"type %\"), Item, Spec_Id);\n-                        return;\n+                        if Scope (Spec_Id) = Item_Id then\n+                           Error_Msg_Name_1 := Chars (Item_Id);\n+                           SPARK_Msg_NE\n+                             (Fix_Msg (Spec_Id, \"global item of subprogram & \"\n+                              & \"cannot reference current instance of \"\n+                              & \"protected type %\"), Item, Spec_Id);\n+                           return;\n+                        end if;\n \n                      --  Pragma [Refined_]Global associated with a task type\n                      --  cannot mention the current instance of a task type\n                      --  because the instance behaves as a formal parameter.\n \n                      else pragma Assert (Ekind (Item_Id) = E_Task_Type);\n-                        Error_Msg_Name_1 := Chars (Item_Id);\n-                        SPARK_Msg_NE\n-                          (Fix_Msg (Spec_Id, \"global item of subprogram & \"\n-                           & \"cannot reference current instance of task type \"\n-                           & \"%\"), Item, Spec_Id);\n-                        return;\n+                        if Spec_Id = Item_Id then\n+                           Error_Msg_Name_1 := Chars (Item_Id);\n+                           SPARK_Msg_NE\n+                             (Fix_Msg (Spec_Id, \"global item of subprogram & \"\n+                              & \"cannot reference current instance of task \"\n+                              & \"type %\"), Item, Spec_Id);\n+                           return;\n+                        end if;\n                      end if;\n \n                   --  Otherwise the global item denotes a subtype mark that is\n@@ -2230,24 +2226,28 @@ package body Sem_Prag is\n                   --  parameter.\n \n                   if Is_Single_Protected_Object (Item_Id) then\n-                     Error_Msg_Name_1 := Chars (Item_Id);\n-                     SPARK_Msg_NE\n-                       (Fix_Msg (Spec_Id, \"global item of subprogram & cannot \"\n-                        & \"reference current instance of protected type %\"),\n-                        Item, Spec_Id);\n-                     return;\n+                     if Scope (Spec_Id) = Etype (Item_Id) then\n+                        Error_Msg_Name_1 := Chars (Item_Id);\n+                        SPARK_Msg_NE\n+                          (Fix_Msg (Spec_Id, \"global item of subprogram & \"\n+                           & \"cannot reference current instance of protected \"\n+                           & \"type %\"), Item, Spec_Id);\n+                        return;\n+                     end if;\n \n                   --  Pragma [Refined_]Global associated with a task type\n                   --  cannot mention the current instance of a task type\n                   --  because the instance behaves as a formal parameter.\n \n                   else pragma Assert (Is_Single_Task_Object (Item_Id));\n-                     Error_Msg_Name_1 := Chars (Item_Id);\n-                     SPARK_Msg_NE\n-                       (Fix_Msg (Spec_Id, \"global item of subprogram & cannot \"\n-                        & \"reference current instance of task type %\"),\n-                        Item, Spec_Id);\n-                     return;\n+                     if Spec_Id = Item_Id then\n+                        Error_Msg_Name_1 := Chars (Item_Id);\n+                        SPARK_Msg_NE\n+                          (Fix_Msg (Spec_Id, \"global item of subprogram & \"\n+                           & \"cannot reference current instance of task \"\n+                           & \"type %\"), Item, Spec_Id);\n+                        return;\n+                     end if;\n                   end if;\n \n                --  A formal object may act as a global item inside a generic\n@@ -29243,63 +29243,6 @@ package body Sem_Prag is\n       return Add_Config_Static_String (Arg);\n    end Is_Config_Static_String;\n \n-   ---------------------\n-   -- Is_CCT_Instance --\n-   ---------------------\n-\n-   function Is_CCT_Instance\n-     (Ref_Id     : Entity_Id;\n-      Context_Id : Entity_Id) return Boolean\n-   is\n-      S   : Entity_Id;\n-      Typ : Entity_Id;\n-\n-   begin\n-      --  When the reference denotes a single protected type, the context is\n-      --  either a protected subprogram or its body.\n-\n-      if Is_Single_Protected_Object (Ref_Id) then\n-         Typ := Scope (Context_Id);\n-\n-         return\n-           Ekind (Typ) = E_Protected_Type\n-             and then Present (Anonymous_Object (Typ))\n-             and then Anonymous_Object (Typ) = Ref_Id;\n-\n-      --  When the reference denotes a single task type, the context is either\n-      --  the same type or if inside the body, the anonymous task type.\n-\n-      elsif Is_Single_Task_Object (Ref_Id) then\n-         if Ekind (Context_Id) = E_Task_Type then\n-            return\n-              Present (Anonymous_Object (Context_Id))\n-                and then Anonymous_Object (Context_Id) = Ref_Id;\n-         else\n-            return Ref_Id = Context_Id;\n-         end if;\n-\n-      --  Otherwise the reference denotes a protected or a task type. Climb the\n-      --  scope chain looking for an enclosing concurrent type that matches the\n-      --  referenced entity.\n-\n-      else\n-         pragma Assert (Ekind_In (Ref_Id, E_Protected_Type, E_Task_Type));\n-\n-         S := Current_Scope;\n-         while Present (S) and then S /= Standard_Standard loop\n-            if Ekind_In (S, E_Protected_Type, E_Task_Type)\n-              and then S = Ref_Id\n-            then\n-               return True;\n-            end if;\n-\n-            S := Scope (S);\n-         end loop;\n-      end if;\n-\n-      return False;\n-   end Is_CCT_Instance;\n-\n    -------------------------------\n    -- Is_Elaboration_SPARK_Mode --\n    -------------------------------"}, {"sha": "fc997539925d2d8d31acf7a3eed0c43d7d132ed9", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=780d73d73d39e83d6034d1d7b06c27091e9a9cdc", "patch": "@@ -7997,11 +7997,20 @@ package body Sem_Res is\n             Check_Restriction (No_Dispatching_Calls, N);\n          end if;\n \n+         --  Only warn for redundant equality comparison to True for objects\n+         --  (e.g. \"X = True\") and operations (e.g. \"(X < Y) = True\"). For\n+         --  other expressions, it may be a matter of preference to write\n+         --  \"Expr = True\" or \"Expr\".\n+\n          if Warn_On_Redundant_Constructs\n            and then Comes_From_Source (N)\n            and then Comes_From_Source (R)\n            and then Is_Entity_Name (R)\n            and then Entity (R) = Standard_True\n+           and then\n+             ((Is_Entity_Name (L) and then Is_Object (Entity (L)))\n+                or else\n+              Nkind (L) in N_Op)\n          then\n             Error_Msg_N -- CODEFIX\n               (\"?r?comparison with True is redundant!\", N);"}, {"sha": "8fe3e1ada7951db2a394218028056cb6fcf4512b", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=780d73d73d39e83d6034d1d7b06c27091e9a9cdc", "patch": "@@ -205,7 +205,7 @@ package body Sem_Util is\n             Nod := Type_Definition (Parent (Typ));\n          end if;\n \n-      --  It's not the kind of type that can implement interfaces\n+      --  Otherwise the type is of a kind which does not implement interfaces\n \n       else\n          return Empty_List;\n@@ -12382,6 +12382,52 @@ package body Sem_Util is\n                   Is_RTE (Root_Type (Under), RO_WW_Super_String));\n    end Is_Bounded_String;\n \n+   ---------------------\n+   -- Is_CCT_Instance --\n+   ---------------------\n+\n+   function Is_CCT_Instance\n+     (Ref_Id     : Entity_Id;\n+      Context_Id : Entity_Id) return Boolean\n+   is\n+   begin\n+      pragma Assert\n+        (Is_Entry (Context_Id)\n+           or else\n+         Ekind_In (Context_Id, E_Function,\n+                               E_Procedure,\n+                               E_Protected_Type,\n+                               E_Task_Type)\n+           or else\n+         Is_Single_Concurrent_Object (Context_Id));\n+\n+      --  When the reference denotes a single protected type, the context is\n+      --  either a protected subprogram or its body.\n+\n+      if Is_Single_Protected_Object (Ref_Id) then\n+         return Scope_Within (Context_Id, Etype (Ref_Id));\n+\n+      --  When the reference denotes a single task type, the context is either\n+      --  the same type or if inside the body, the anonymous task object.\n+\n+      elsif Is_Single_Task_Object (Ref_Id) then\n+         if Is_Single_Task_Object (Context_Id) then\n+            return Context_Id = Ref_Id;\n+\n+         elsif Ekind (Context_Id) = E_Task_Type then\n+            return Context_Id = Etype (Ref_Id);\n+\n+         else\n+            return Scope_Within_Or_Same (Context_Id, Etype (Ref_Id));\n+         end if;\n+\n+      else\n+         pragma Assert (Ekind_In (Ref_Id, E_Protected_Type, E_Task_Type));\n+\n+         return Scope_Within_Or_Same (Context_Id, Ref_Id);\n+      end if;\n+   end Is_CCT_Instance;\n+\n    -------------------------\n    -- Is_Child_Or_Sibling --\n    -------------------------"}, {"sha": "1477dcdf5f41d730d41044f5055278633a0d1914", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=780d73d73d39e83d6034d1d7b06c27091e9a9cdc", "patch": "@@ -1476,6 +1476,14 @@ package Sem_Util is\n    function Is_CPP_Constructor_Call (N : Node_Id) return Boolean;\n    --  Returns True if N is a call to a CPP constructor\n \n+   function Is_CCT_Instance\n+     (Ref_Id     : Entity_Id;\n+      Context_Id : Entity_Id) return Boolean;\n+   --  Subsidiary to the analysis of pragmas [Refined_]Depends and [Refined_]\n+   --  Global. Determine whether entity Ref_Id denotes the current instance of\n+   --  a concurrent type. Context_Id denotes the associated context where the\n+   --  pragma appears.\n+\n    function Is_Child_Or_Sibling\n      (Pack_1 : Entity_Id;\n       Pack_2 : Entity_Id) return Boolean;"}, {"sha": "f6adb7c7bfa1907fd221c846cef15de35e5b9694", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780d73d73d39e83d6034d1d7b06c27091e9a9cdc/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=780d73d73d39e83d6034d1d7b06c27091e9a9cdc", "patch": "@@ -2383,15 +2383,6 @@ package body Sem_Warn is\n \n          if not In_Extended_Main_Source_Unit (Cnode) then\n             return;\n-\n-         --  In configurable run time mode, we remove the bodies of non-inlined\n-         --  subprograms, which may lead to spurious warnings, which are\n-         --  clearly undesirable.\n-\n-         elsif Configurable_Run_Time_Mode\n-           and then Is_Predefined_Unit (Unit)\n-         then\n-            return;\n          end if;\n \n          --  Loop through context items in this unit"}]}