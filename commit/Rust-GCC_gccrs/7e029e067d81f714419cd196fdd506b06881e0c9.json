{"sha": "7e029e067d81f714419cd196fdd506b06881e0c9", "node_id": "C_kwDOANBUbNoAKDdlMDI5ZTA2N2Q4MWY3MTQ0MTljZDE5NmZkZDUwNmIwNjg4MWUwYzk", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-07-31T11:36:59Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-08-01T06:16:03Z"}, "message": "const_tree conversion of vrange::supports_*\n\nMake all vrange::supports_*_p methods const_tree as they can end up\nbeing called from functions that are const_tree.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* value-range.cc (vrange::supports_type_p): Use const_tree.\n\t(irange::supports_type_p): Same.\n\t(frange::supports_type_p): Same.\n\t* value-range.h (Value_Range::supports_type_p): Same.\n\t(irange::supports_p): Same.", "tree": {"sha": "e6c9575d4db9db7b0eded4d25967fc9d7d74de72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6c9575d4db9db7b0eded4d25967fc9d7d74de72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e029e067d81f714419cd196fdd506b06881e0c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e029e067d81f714419cd196fdd506b06881e0c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e029e067d81f714419cd196fdd506b06881e0c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e029e067d81f714419cd196fdd506b06881e0c9/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "460dcec49f875a83ca9b66d5e45d712f836f681e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/460dcec49f875a83ca9b66d5e45d712f836f681e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/460dcec49f875a83ca9b66d5e45d712f836f681e"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "7adbf55c6a69ebf70bee70993a4bd3ec18c28912", "filename": "gcc/value-range.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e029e067d81f714419cd196fdd506b06881e0c9/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e029e067d81f714419cd196fdd506b06881e0c9/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=7e029e067d81f714419cd196fdd506b06881e0c9", "patch": "@@ -105,7 +105,7 @@ vrange::type () const\n }\n \n bool\n-vrange::supports_type_p (tree) const\n+vrange::supports_type_p (const_tree) const\n {\n   return false;\n }\n@@ -229,7 +229,7 @@ vrange::dump (FILE *file) const\n }\n \n bool\n-irange::supports_type_p (tree type) const\n+irange::supports_type_p (const_tree type) const\n {\n   return supports_p (type);\n }\n@@ -416,7 +416,7 @@ frange::operator== (const frange &src) const\n }\n \n bool\n-frange::supports_type_p (tree type) const\n+frange::supports_type_p (const_tree type) const\n {\n   return supports_p (type);\n }"}, {"sha": "c6ab955c407d597180027975ab169f38c9679bda", "filename": "gcc/value-range.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e029e067d81f714419cd196fdd506b06881e0c9/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e029e067d81f714419cd196fdd506b06881e0c9/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=7e029e067d81f714419cd196fdd506b06881e0c9", "patch": "@@ -78,7 +78,7 @@ class vrange\n   virtual void accept (const class vrange_visitor &v) const = 0;\n   virtual void set (tree, tree, value_range_kind = VR_RANGE);\n   virtual tree type () const;\n-  virtual bool supports_type_p (tree type) const;\n+  virtual bool supports_type_p (const_tree type) const;\n   virtual void set_varying (tree type);\n   virtual void set_undefined ();\n   virtual bool union_ (const vrange &);\n@@ -122,8 +122,8 @@ class GTY((user)) irange : public vrange\n   virtual void set_undefined () override;\n \n   // Range types.\n-  static bool supports_p (tree type);\n-  virtual bool supports_type_p (tree type) const override;\n+  static bool supports_p (const_tree type);\n+  virtual bool supports_type_p (const_tree type) const override;\n   virtual tree type () const override;\n \n   // Iteration over sub-ranges.\n@@ -336,7 +336,7 @@ class frange : public vrange\n public:\n   frange ();\n   frange (const frange &);\n-  static bool supports_p (tree type)\n+  static bool supports_p (const_tree type)\n   {\n     // Disabled until floating point range-ops come live.\n     return 0 && SCALAR_FLOAT_TYPE_P (type);\n@@ -347,7 +347,7 @@ class frange : public vrange\n   virtual void set_undefined () override;\n   virtual bool union_ (const vrange &) override;\n   virtual bool intersect (const vrange &) override;\n-  virtual bool supports_type_p (tree type) const override;\n+  virtual bool supports_type_p (const_tree type) const override;\n   virtual void accept (const vrange_visitor &v) const override;\n   frange& operator= (const frange &);\n   bool operator== (const frange &) const;\n@@ -457,7 +457,7 @@ class Value_Range\n   operator vrange &();\n   operator const vrange &() const;\n   void dump (FILE *) const;\n-  static bool supports_type_p (tree type);\n+  static bool supports_type_p (const_tree type);\n \n   // Convenience methods for vrange compatability.\n   void set (tree min, tree max, value_range_kind kind = VR_RANGE)\n@@ -588,7 +588,7 @@ Value_Range::operator const vrange &() const\n // Return TRUE if TYPE is supported by the vrange infrastructure.\n \n inline bool\n-Value_Range::supports_type_p (tree type)\n+Value_Range::supports_type_p (const_tree type)\n {\n   return irange::supports_p (type) || frange::supports_p (type);\n }\n@@ -730,7 +730,7 @@ irange::nonzero_p () const\n }\n \n inline bool\n-irange::supports_p (tree type)\n+irange::supports_p (const_tree type)\n {\n   return INTEGRAL_TYPE_P (type) || POINTER_TYPE_P (type);\n }"}]}