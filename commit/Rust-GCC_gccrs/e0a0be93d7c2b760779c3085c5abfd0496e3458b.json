{"sha": "e0a0be93d7c2b760779c3085c5abfd0496e3458b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBhMGJlOTNkN2MyYjc2MDc3OWMzMDg1YzVhYmZkMDQ5NmUzNDU4Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-14T09:06:12Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-14T09:06:12Z"}, "message": "[AArch64] Add support for SVE CNOT\n\nThis patch adds support for predicated and unpredicated CNOT\n(logical NOT on integers).  In RTL terms, this is a select between\n1 and 0 in which the predicate is fed by a comparison with zero.\n\n2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/predicates.md (aarch64_simd_imm_one): New predicate.\n\t* config/aarch64/aarch64-sve.md (*cnot<mode>): New pattern.\n\t(*cond_cnot<mode>_2, *cond_cnot<mode>_any): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cnot_1.c: New test.\n\t* gcc.target/aarch64/sve/cond_cnot_1.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_cnot_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_cnot_2.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_cnot_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_cnot_3.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_cnot_3_run.c: Likewise.\n\nFrom-SVN: r274438", "tree": {"sha": "17baa373c4ffe1295960726017011cd0a73766f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17baa373c4ffe1295960726017011cd0a73766f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0a0be93d7c2b760779c3085c5abfd0496e3458b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0a0be93d7c2b760779c3085c5abfd0496e3458b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0a0be93d7c2b760779c3085c5abfd0496e3458b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0a0be93d7c2b760779c3085c5abfd0496e3458b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bca5a9971f47cf5fe79e6595beb762539f200f46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca5a9971f47cf5fe79e6595beb762539f200f46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bca5a9971f47cf5fe79e6595beb762539f200f46"}], "stats": {"total": 341, "additions": 341, "deletions": 0}, "files": [{"sha": "701f75ca2b9533ddaeb665628913fe1017df7e88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0a0be93d7c2b760779c3085c5abfd0496e3458b", "patch": "@@ -1,3 +1,9 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/predicates.md (aarch64_simd_imm_one): New predicate.\n+\t* config/aarch64/aarch64-sve.md (*cnot<mode>): New pattern.\n+\t(*cond_cnot<mode>_2, *cond_cnot<mode>_any): Likewise.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/iterators.md (SVE_INT_UNARY): Add clrsb and clz."}, {"sha": "e3654aa5174f84e7d6f6276d1d3b410a5cd412c0", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=e0a0be93d7c2b760779c3085c5abfd0496e3458b", "patch": "@@ -54,6 +54,7 @@\n ;;\n ;; == Unary arithmetic\n ;; ---- [INT] General unary arithmetic corresponding to rtx codes\n+;; ---- [INT] Logical inverse\n ;; ---- [FP] General unary arithmetic corresponding to unspecs\n ;; ---- [PRED] Inverse\n \n@@ -1454,6 +1455,95 @@\n   \"<sve_int_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n )\n \n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Logical inverse\n+;; -------------------------------------------------------------------------\n+\n+;; Predicated logical inverse.\n+(define_insn \"*cnot<mode>\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w\")\n+\t(unspec:SVE_I\n+\t  [(unspec:<VPRED>\n+\t     [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n+\t      (match_operand:SI 5 \"aarch64_sve_ptrue_flag\")\n+\t      (eq:<VPRED>\n+\t\t(match_operand:SVE_I 2 \"register_operand\" \"w\")\n+\t\t(match_operand:SVE_I 3 \"aarch64_simd_imm_zero\"))]\n+\t     UNSPEC_PRED_Z)\n+\t   (match_operand:SVE_I 4 \"aarch64_simd_imm_one\")\n+\t   (match_dup 3)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\"\n+  \"cnot\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n+)\n+\n+;; Predicated logical inverse, merging with the first input.\n+(define_insn_and_rewrite \"*cond_cnot<mode>_2\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   ;; Logical inverse of operand 2 (as above).\n+\t   (unspec:SVE_I\n+\t     [(unspec:<VPRED>\n+\t\t[(match_operand 5)\n+\t\t (const_int SVE_KNOWN_PTRUE)\n+\t\t (eq:<VPRED>\n+\t\t   (match_operand:SVE_I 2 \"register_operand\" \"0, w\")\n+\t\t   (match_operand:SVE_I 3 \"aarch64_simd_imm_zero\"))]\n+\t\tUNSPEC_PRED_Z)\n+\t      (match_operand:SVE_I 4 \"aarch64_simd_imm_one\")\n+\t      (match_dup 3)]\n+\t     UNSPEC_SEL)\n+\t   (match_dup 2)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\"\n+  \"@\n+   cnot\\t%0.<Vetype>, %1/m, %0.<Vetype>\n+   movprfx\\t%0, %2\\;cnot\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n+  \"&& !CONSTANT_P (operands[5])\"\n+  {\n+    operands[5] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Predicated logical inverse, merging with an independent value.\n+;;\n+;; The earlyclobber isn't needed for the first alternative, but omitting\n+;; it would only help the case in which operands 2 and 6 are the same,\n+;; which is handled above rather than here.  Marking all the alternatives\n+;; as earlyclobber helps to make the instruction more regular to the\n+;; register allocator.\n+(define_insn_and_rewrite \"*cond_cnot<mode>_any\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=&w, ?&w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   ;; Logical inverse of operand 2 (as above).\n+\t   (unspec:SVE_I\n+\t     [(unspec:<VPRED>\n+\t\t[(match_operand 5)\n+\t\t (const_int SVE_KNOWN_PTRUE)\n+\t\t (eq:<VPRED>\n+\t\t   (match_operand:SVE_I 2 \"register_operand\" \"w, w, w\")\n+\t\t   (match_operand:SVE_I 3 \"aarch64_simd_imm_zero\"))]\n+\t\tUNSPEC_PRED_Z)\n+\t      (match_operand:SVE_I 4 \"aarch64_simd_imm_one\")\n+\t      (match_dup 3)]\n+\t     UNSPEC_SEL)\n+\t   (match_operand:SVE_I 6 \"aarch64_simd_reg_or_zero\" \"0, Dz, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE && !rtx_equal_p (operands[2], operands[6])\"\n+  \"@\n+   cnot\\t%0.<Vetype>, %1/m, %2.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;cnot\\t%0.<Vetype>, %1/m, %2.<Vetype>\n+   movprfx\\t%0, %6\\;cnot\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n+  \"&& !CONSTANT_P (operands[5])\"\n+  {\n+    operands[5] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes,yes\")]\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [FP] General unary arithmetic corresponding to unspecs\n ;; -------------------------------------------------------------------------"}, {"sha": "5c85671109b75987cd1a6111b40f8fb7207249bc", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=e0a0be93d7c2b760779c3085c5abfd0496e3458b", "patch": "@@ -460,6 +460,10 @@\n   (and (match_code \"const,const_vector\")\n        (match_test \"op == CONST0_RTX (GET_MODE (op))\")))\n \n+(define_predicate \"aarch64_simd_imm_one\"\n+  (and (match_code \"const_vector\")\n+       (match_test \"op == CONST1_RTX (GET_MODE (op))\")))\n+\n (define_predicate \"aarch64_simd_or_scalar_imm_zero\"\n   (and (match_code \"const_int,const_double,const,const_vector\")\n        (match_test \"op == CONST0_RTX (GET_MODE (op))\")))"}, {"sha": "167cbfc9db8e7a1ebc1d04b56f64feb44c02031b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0a0be93d7c2b760779c3085c5abfd0496e3458b", "patch": "@@ -1,3 +1,13 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/cnot_1.c: New test.\n+\t* gcc.target/aarch64/sve/cond_cnot_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_cnot_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_cnot_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_cnot_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_cnot_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_cnot_3_run.c: Likewise.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/vect-clz.c: Force SVE off."}, {"sha": "5fa33461c5907c34ccda3daf289a6d9392bc36b5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cnot_1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcnot_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcnot_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcnot_1.c?ref=e0a0be93d7c2b760779c3085c5abfd0496e3458b", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE)\t\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##TYPE (TYPE *restrict r, TYPE *restrict a, int n)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+      r[i] = !a[i];\t\t\t\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\\\n+  T (int8_t)\t\t\t\\\n+  T (int16_t)\t\t\t\\\n+  T (int32_t)\t\t\t\\\n+  T (int64_t)\t\t\t\\\n+  T (uint8_t)\t\t\t\\\n+  T (uint16_t)\t\t\t\\\n+  T (uint32_t)\t\t\t\\\n+  T (uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 2 } } */"}, {"sha": "bd8776637239bf06247616c2fa8e0ff5597f3b67", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_cnot_1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_1.c?ref=e0a0be93d7c2b760779c3085c5abfd0496e3458b", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE (TYPE *__restrict r, TYPE *__restrict a,\t\\\n+\t       TYPE *__restrict b, int n)\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = a[i] == 0 ? !b[i] : b[i];\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int8_t) \\\n+  T (uint8_t) \\\n+  T (int16_t) \\\n+  T (uint16_t) \\\n+  T (int32_t) \\\n+  T (uint32_t) \\\n+  T (int64_t) \\\n+  T (uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* Currently we canonicalize the ?: so that !b[i] is the \"false\" value.  */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} { xfail *-*-* } } } */"}, {"sha": "802bcbb2ee786724338566542d828ca31a405899", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_cnot_1_run.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_1_run.c?ref=e0a0be93d7c2b760779c3085c5abfd0496e3458b", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_cnot_1.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N];\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i % 3) < (i % 5);\t\t\t\t\\\n+\tb[i] = i % 7 < 3;\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE (r, a, b, N);\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = a[i] == 0 ? !b[i] : b[i];\t\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "d689e21dc1143b4235138a1fd69814d090493245", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_cnot_2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_2.c?ref=e0a0be93d7c2b760779c3085c5abfd0496e3458b", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE (TYPE *__restrict r, TYPE *__restrict a,\t\\\n+\t       TYPE *__restrict b, int n)\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = a[i] == 0 ? !b[i] : a[i];\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int8_t) \\\n+  T (uint8_t) \\\n+  T (int16_t) \\\n+  T (uint16_t) \\\n+  T (int32_t) \\\n+  T (uint32_t) \\\n+  T (int64_t) \\\n+  T (uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* Currently we canonicalize the ?: so that !b[i] is the \"false\" value.  */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} { xfail *-*-* } } } */"}, {"sha": "6db8bf14ee3ae87b26c4540d19699e06f662b71e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_cnot_2_run.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_2_run.c?ref=e0a0be93d7c2b760779c3085c5abfd0496e3458b", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_cnot_2.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N];\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i % 3) < (i % 5);\t\t\t\t\\\n+\tb[i] = i % 7 < 3;\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE (r, a, b, N);\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = a[i] == 0 ? !b[i] : a[i];\t\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "806e517885cadacf4f36f248f390808d81f8db49", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_cnot_3.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_3.c?ref=e0a0be93d7c2b760779c3085c5abfd0496e3458b", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE (TYPE *__restrict r, TYPE *__restrict a,\t\\\n+\t       TYPE *__restrict b, int n)\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = a[i] == 0 ? !b[i] : 127;\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (int8_t) \\\n+  T (uint8_t) \\\n+  T (int16_t) \\\n+  T (uint16_t) \\\n+  T (int32_t) \\\n+  T (uint32_t) \\\n+  T (int64_t) \\\n+  T (uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tcnot\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+, z[0-9]+\\n} 8 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^\\n]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "6e025e4896354164fcfd439901d7556b24910211", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_cnot_3_run.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a0be93d7c2b760779c3085c5abfd0496e3458b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_cnot_3_run.c?ref=e0a0be93d7c2b760779c3085c5abfd0496e3458b", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_cnot_3.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N];\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i % 3) < (i % 5);\t\t\t\t\\\n+\tb[i] = i % 7 < 3;\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE (r, a, b, N);\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = a[i] == 0 ? !b[i] : 127;\t\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}]}