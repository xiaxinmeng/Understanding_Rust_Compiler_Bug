{"sha": "a3f10e50d72e939d3d413d0c84a92af34b53c3b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNmMTBlNTBkNzJlOTM5ZDNkNDEzZDBjODRhOTJhZjM0YjUzYzNiNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-07-18T17:19:41Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-07-18T17:19:41Z"}, "message": "cp-tree.h (finish_non_static_data_member): Add object param.\n\ncp:\n\t* cp-tree.h (finish_non_static_data_member): Add object param.\n\t* method.c (hack_identifier): Adjust.\n\t* pt.c (tsubst_copy_and_build) <COMPONENT_REF case>: Don't search\n\tagain for a FIELD_DECL.\n\t* semantics.c (finish_non_static_data_member): Add object\n\tparameter. Always save the DECL in the COMPONENT_REF.\n\t* call.c (resolve_scoped_fn_name): Adjust.\ntestsuite:\n\t* g++.dg/parse/non-dependent2.C: New test.\n\nFrom-SVN: r69564", "tree": {"sha": "739c2d965b5f14c53b06da69cb304426d2ea001d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/739c2d965b5f14c53b06da69cb304426d2ea001d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3f10e50d72e939d3d413d0c84a92af34b53c3b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f10e50d72e939d3d413d0c84a92af34b53c3b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3f10e50d72e939d3d413d0c84a92af34b53c3b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f10e50d72e939d3d413d0c84a92af34b53c3b6/comments", "author": null, "committer": null, "parents": [{"sha": "c26052b06be808348a5bf78f9bf3d4a29cb80843", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c26052b06be808348a5bf78f9bf3d4a29cb80843", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c26052b06be808348a5bf78f9bf3d4a29cb80843"}], "stats": {"total": 99, "additions": 79, "deletions": 20}, "files": [{"sha": "6f677a5243b22674c6b94b2612d1fa8ad1ad226e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f10e50d72e939d3d413d0c84a92af34b53c3b6/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f10e50d72e939d3d413d0c84a92af34b53c3b6/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a3f10e50d72e939d3d413d0c84a92af34b53c3b6", "patch": "@@ -2651,7 +2651,7 @@ resolve_scoped_fn_name (tree scope, tree name)\n \n       /* It might be the name of a function pointer member.  */\n       if (fn && TREE_CODE (fn) == FIELD_DECL)\n-\tfn = finish_non_static_data_member (fn, scope);\n+\tfn = finish_non_static_data_member (fn, current_class_ref, scope);\n     }\n   \n   if (!fn)"}, {"sha": "4f2a1432e4661761a1c6c63c2b0a61b244a6688a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f10e50d72e939d3d413d0c84a92af34b53c3b6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f10e50d72e939d3d413d0c84a92af34b53c3b6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a3f10e50d72e939d3d413d0c84a92af34b53c3b6", "patch": "@@ -4129,7 +4129,7 @@ extern tree finish_label_stmt                   (tree);\n extern void finish_label_decl                   (tree);\n extern void finish_subobject                    (tree);\n extern tree finish_parenthesized_expr           (tree);\n-extern tree finish_non_static_data_member       (tree, tree);\n+extern tree finish_non_static_data_member       (tree, tree, tree);\n extern tree begin_stmt_expr                     (void);\n extern tree finish_stmt_expr                    (tree);\n extern tree perform_koenig_lookup               (tree, tree);"}, {"sha": "fdc026b3476f19f58284522a520bf2ea8728e28f", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f10e50d72e939d3d413d0c84a92af34b53c3b6/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f10e50d72e939d3d413d0c84a92af34b53c3b6/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=a3f10e50d72e939d3d413d0c84a92af34b53c3b6", "patch": "@@ -117,7 +117,7 @@ hack_identifier (tree value, tree name)\n \n   type = TREE_TYPE (value);\n   if (TREE_CODE (value) == FIELD_DECL)\n-    value = finish_non_static_data_member (value, \n+    value = finish_non_static_data_member (value, current_class_ref,\n \t\t\t\t\t   /*qualifying_scope=*/NULL_TREE);\n   else if ((TREE_CODE (value) == FUNCTION_DECL\n \t    && DECL_FUNCTION_MEMBER_P (value))"}, {"sha": "9d66c3c0addb66e8bce54069819db9a1e4a67f3d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f10e50d72e939d3d413d0c84a92af34b53c3b6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f10e50d72e939d3d413d0c84a92af34b53c3b6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a3f10e50d72e939d3d413d0c84a92af34b53c3b6", "patch": "@@ -8273,6 +8273,8 @@ tsubst_copy_and_build (tree t,\n \t\treturn error_mark_node;\n \t      }\n \t  }\n+\telse if (TREE_CODE (member) == FIELD_DECL)\n+\t  return finish_non_static_data_member (member, object, NULL_TREE);\n \n \treturn finish_class_member_access_expr (object, member);\n       }"}, {"sha": "812ef6df2dc11277337a104dbc177fd0e54eed2a", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f10e50d72e939d3d413d0c84a92af34b53c3b6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f10e50d72e939d3d413d0c84a92af34b53c3b6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a3f10e50d72e939d3d413d0c84a92af34b53c3b6", "patch": "@@ -1218,11 +1218,11 @@ finish_parenthesized_expr (tree expr)\n    preceded by `.' or `->'.  */\n \n tree\n-finish_non_static_data_member (tree decl, tree qualifying_scope)\n+finish_non_static_data_member (tree decl, tree object, tree qualifying_scope)\n {\n   my_friendly_assert (TREE_CODE (decl) == FIELD_DECL, 20020909);\n \n-  if (current_class_ptr == NULL_TREE)\n+  if (!object)\n     {\n       if (current_function_decl \n \t  && DECL_STATIC_FUNCTION_P (current_function_decl))\n@@ -1236,27 +1236,42 @@ finish_non_static_data_member (tree decl, tree qualifying_scope)\n     }\n   TREE_USED (current_class_ptr) = 1;\n   if (processing_template_decl)\n-    return build_min (COMPONENT_REF, TREE_TYPE (decl),\n-\t\t      current_class_ref, DECL_NAME (decl));\n-  else\n     {\n-      tree access_type = current_class_type;\n-      tree object = current_class_ref;\n+      tree type = TREE_TYPE (decl);\n \n-      while (access_type\n-\t     && !DERIVED_FROM_P (context_for_name_lookup (decl), access_type))\n+      if (TREE_CODE (type) == REFERENCE_TYPE)\n+\ttype = TREE_TYPE (type);\n+      else\n+\t{\n+\t  /* Set the cv qualifiers */\n+\t  int quals = cp_type_quals (TREE_TYPE (current_class_ref));\n+\t  \n+\t  if (DECL_MUTABLE_P (decl))\n+\t    quals &= ~TYPE_QUAL_CONST;\n+\t  \n+\t  quals |= cp_type_quals (TREE_TYPE (decl));\n+\t  type = cp_build_qualified_type (type, quals);\n+\t}\n+\n+      return build_min (COMPONENT_REF, type, object, decl);\n+    }\n+  else\n+    {\n+      tree access_type = TREE_TYPE (object);\n+      tree lookup_context = context_for_name_lookup (decl);\n+      \n+      while (!DERIVED_FROM_P (lookup_context, access_type))\n \t{\n \t  access_type = TYPE_CONTEXT (access_type);\n \t  while (access_type && DECL_P (access_type))\n \t    access_type = DECL_CONTEXT (access_type);\n-\t}\n \n-      if (!access_type)\n-\t{\n-\t  cp_error_at (\"object missing in reference to `%D'\",\n-\t\t       decl);\n-\t  error (\"from this location\");\n-\t  return error_mark_node;\n+\t  if (!access_type)\n+\t    {\n+\t      cp_error_at (\"object missing in reference to `%D'\", decl);\n+\t      error (\"from this location\");\n+\t      return error_mark_node;\n+\t    }\n \t}\n \n       perform_or_defer_access_check (TYPE_BINFO (access_type), decl);\n@@ -1357,7 +1372,8 @@ finish_qualified_id_expr (tree qualifying_class, tree expr, bool done,\n     }\n \n   if (TREE_CODE (expr) == FIELD_DECL)\n-    expr = finish_non_static_data_member (expr, qualifying_class);\n+    expr = finish_non_static_data_member (expr, current_class_ref,\n+\t\t\t\t\t  qualifying_class);\n   else if (BASELINK_P (expr) && !processing_template_decl)\n     {\n       tree fn;"}, {"sha": "4a3fcb97aca14f284268cd41cc1005d62bc4090b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f10e50d72e939d3d413d0c84a92af34b53c3b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f10e50d72e939d3d413d0c84a92af34b53c3b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3f10e50d72e939d3d413d0c84a92af34b53c3b6", "patch": "@@ -1,3 +1,7 @@\n+2003-07-18  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/parse/non-dependent2.C: New test.\n+\n 2003-07-18  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* g++.dg/init/init-ref4.C: xfail on targets without "}, {"sha": "46335c56bcce9c0abbebdf1864a1569a2d773920", "filename": "gcc/testsuite/g++.dg/parse/non-dependent2.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f10e50d72e939d3d413d0c84a92af34b53c3b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnon-dependent2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f10e50d72e939d3d413d0c84a92af34b53c3b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnon-dependent2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnon-dependent2.C?ref=a3f10e50d72e939d3d413d0c84a92af34b53c3b6", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 16 Jul 2003 <nathan@codesourcery.com>\n+\n+// A non-dependent field_decl can bind at parse time.\n+\n+template <class T>\n+struct Foo {\n+  int j; // we never see this one.\n+  int k; // { dg-error \"\" \"\" }\n+  \n+};\n+\n+struct Baz \n+{\n+  int j;\n+  int k; // { dg-error \"\" \"\" }\n+  \n+};\n+\n+template <class T>\n+struct Bar : public Foo<T>, Baz {\n+  \n+  int baz () { return j; } // binds to Baz::j\n+  int foo () { return this->k; } // { dg-error \"request for member\" \"\" }\n+};\n+\n+int main()\n+{\n+  Bar<int> bar;\n+\n+  bar.baz ();\n+  bar.foo ();\n+  \n+  return 0;\n+}"}]}