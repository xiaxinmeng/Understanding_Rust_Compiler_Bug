{"sha": "1c3c7c414570020cfb7b510f908fc20995ab2da0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMzYzdjNDE0NTcwMDIwY2ZiN2I1MTBmOTA4ZmMyMDk5NWFiMmRhMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-01-12T14:54:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-01-12T14:54:33Z"}, "message": "Prevent recursive instantiation in std::function\n\n\tPR libstdc++/69005\n\tPR libstdc++/69222\n\t* include/std/functional (function::_Invoke): Remove, use result_of.\n\t(function::_Callable): Replace alias template with class template\n\tand use partial specialization instead of _NotSelf alias template.\n\t(function(_Functor)): Add \"not self\" constraint so that _Callable is\n\tnot used while type is incomplete.\n\t* testsuite/20_util/function/69222.cc: New.\n\nFrom-SVN: r232273", "tree": {"sha": "c7a791ee1bf6a87f06582f10e061a632ec28dcf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7a791ee1bf6a87f06582f10e061a632ec28dcf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c3c7c414570020cfb7b510f908fc20995ab2da0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c3c7c414570020cfb7b510f908fc20995ab2da0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c3c7c414570020cfb7b510f908fc20995ab2da0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c3c7c414570020cfb7b510f908fc20995ab2da0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c4e91c903a599641e3adf08b6f2646d778c4cf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c4e91c903a599641e3adf08b6f2646d778c4cf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c4e91c903a599641e3adf08b6f2646d778c4cf3"}], "stats": {"total": 58, "additions": 47, "deletions": 11}, "files": [{"sha": "d6fa5319b53f1566ef581f57f05e8a11ccaafd1d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c3c7c414570020cfb7b510f908fc20995ab2da0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c3c7c414570020cfb7b510f908fc20995ab2da0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1c3c7c414570020cfb7b510f908fc20995ab2da0", "patch": "@@ -1,3 +1,14 @@\n+2016-01-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/69005\n+\tPR libstdc++/69222\n+\t* include/std/functional (function::_Invoke): Remove, use result_of.\n+\t(function::_Callable): Replace alias template with class template\n+\tand use partial specialization instead of _NotSelf alias template.\n+\t(function(_Functor)): Add \"not self\" constraint so that _Callable is\n+\tnot used while type is incomplete.\n+\t* testsuite/20_util/function/69222.cc: New.\n+\n 2016-01-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/60976"}, {"sha": "557156a358c32653e4513955ab9682fe35e76174", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c3c7c414570020cfb7b510f908fc20995ab2da0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c3c7c414570020cfb7b510f908fc20995ab2da0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=1c3c7c414570020cfb7b510f908fc20995ab2da0", "patch": "@@ -1846,20 +1846,14 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n     {\n       typedef _Res _Signature_type(_ArgTypes...);\n \n-      template<typename _Functor>\n-\tusing _Invoke\n-\t= decltype(std::__callable_functor(std::declval<_Functor&>())\n-\t\t   (std::declval<_ArgTypes>()...) );\n+      template<typename _Func,\n+\t       typename _Res2 = typename result_of<_Func(_ArgTypes...)>::type>\n+\tstruct _Callable : __check_func_return_type<_Res2, _Res> { };\n \n       // Used so the return type convertibility checks aren't done when\n       // performing overload resolution for copy construction/assignment.\n       template<typename _Tp>\n-\tusing _NotSelf = __not_<is_same<_Tp, function>>;\n-\n-      template<typename _Functor>\n-\tusing _Callable\n-\t  = __and_<_NotSelf<_Functor>,\n-\t\t   __check_func_return_type<_Invoke<_Functor>, _Res>>;\n+\tstruct _Callable<function, _Tp> : false_type { };\n \n       template<typename _Cond, typename _Tp>\n \tusing _Requires = typename enable_if<_Cond::value, _Tp>::type;\n@@ -1924,6 +1918,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n        *  reference_wrapper<F>, this function will not throw.\n        */\n       template<typename _Functor,\n+\t       typename = _Requires<__not_<is_same<_Functor, function>>, void>,\n \t       typename = _Requires<_Callable<_Functor>, void>>\n \tfunction(_Functor);\n \n@@ -2116,7 +2111,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n     }\n \n   template<typename _Res, typename... _ArgTypes>\n-    template<typename _Functor, typename>\n+    template<typename _Functor, typename, typename>\n       function<_Res(_ArgTypes...)>::\n       function(_Functor __f)\n       : _Function_base()"}, {"sha": "7c9dfecb5470d44136b16f2d7320969b792c89d9", "filename": "libstdc++-v3/testsuite/20_util/function/69222.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c3c7c414570020cfb7b510f908fc20995ab2da0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F69222.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c3c7c414570020cfb7b510f908fc20995ab2da0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F69222.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F69222.cc?ref=1c3c7c414570020cfb7b510f908fc20995ab2da0", "patch": "@@ -0,0 +1,30 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <functional>\n+\n+// Reduced from c++/69005\n+struct Foo {\n+  std::function<void(Foo)> f;\n+};\n+\n+extern Foo exfoo;\n+Foo f(exfoo);\n+Foo& r = f = exfoo;"}]}