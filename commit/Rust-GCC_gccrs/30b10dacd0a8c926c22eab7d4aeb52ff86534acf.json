{"sha": "30b10dacd0a8c926c22eab7d4aeb52ff86534acf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBiMTBkYWNkMGE4YzkyNmMyMmVhYjdkNGFlYjUyZmY4NjUzNGFjZg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-03-18T19:36:09Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-03-18T19:38:00Z"}, "message": "PR middle-end/99502 - missing -Warray-bounds on partial out of bounds\n\ngcc/ChangeLog:\n\n\tPR middle-end/99502\n\t* gimple-array-bounds.cc (inbounds_vbase_memaccess_p): Rename...\n\t(inbounds_memaccess_p): ...to this.  Check the ending offset of\n\tthe accessed member.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/99502\n\t* g++.dg/warn/Warray-bounds-22.C: New test.\n\t* g++.dg/warn/Warray-bounds-23.C: New test.\n\t* g++.dg/warn/Warray-bounds-24.C: New test.", "tree": {"sha": "b39b32d49992bc87c3a9f7b7b349bbce699e5aef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b39b32d49992bc87c3a9f7b7b349bbce699e5aef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30b10dacd0a8c926c22eab7d4aeb52ff86534acf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30b10dacd0a8c926c22eab7d4aeb52ff86534acf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30b10dacd0a8c926c22eab7d4aeb52ff86534acf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30b10dacd0a8c926c22eab7d4aeb52ff86534acf/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5e55673b486533c4d6d19ac903460f70b48f11a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5e55673b486533c4d6d19ac903460f70b48f11a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5e55673b486533c4d6d19ac903460f70b48f11a"}], "stats": {"total": 758, "additions": 753, "deletions": 5}, "files": [{"sha": "199d9f5d2161fc698d01997664508adec8a5188b", "filename": "gcc/gimple-array-bounds.cc", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b10dacd0a8c926c22eab7d4aeb52ff86534acf/gcc%2Fgimple-array-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b10dacd0a8c926c22eab7d4aeb52ff86534acf/gcc%2Fgimple-array-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-array-bounds.cc?ref=30b10dacd0a8c926c22eab7d4aeb52ff86534acf", "patch": "@@ -895,7 +895,7 @@ array_bounds_checker::check_addr_expr (location_t location, tree t)\n    problems discussed in pr98266 and pr97595.  */\n \n static bool\n-inbounds_vbase_memaccess_p (tree t)\n+inbounds_memaccess_p (tree t)\n {\n   if (TREE_CODE (t) != COMPONENT_REF)\n     return false;\n@@ -928,10 +928,19 @@ inbounds_vbase_memaccess_p (tree t)\n      object by adding its offset computed above to the MEM_REF offset.  */\n   tree refoff = TREE_OPERAND (mref, 1);\n   tree fldoff = int_const_binop (PLUS_EXPR, fldpos, refoff);\n+  /* Return false if the member offset is greater or equal to the size\n+     of the complete object.  */\n+  if (!tree_int_cst_lt (fldoff, refsize))\n+    return false;\n+\n+  tree fldsiz = DECL_SIZE_UNIT (fld);\n+  if (!fldsiz || TREE_CODE (fldsiz) != INTEGER_CST)\n+    return false;\n \n-  /* Return true if the member offset is less than the size of the complete\n-     object.  */\n-  return tree_int_cst_lt (fldoff, refsize);\n+  /* Return true if the offset just past the end of the member is less\n+     than or equal to the size of the complete object.  */\n+  tree fldend = int_const_binop (PLUS_EXPR, fldoff, fldsiz);\n+  return tree_int_cst_le (fldend, refsize);\n }\n \n /* Callback for walk_tree to check a tree for out of bounds array\n@@ -965,7 +974,7 @@ array_bounds_checker::check_array_bounds (tree *tp, int *walk_subtree,\n       checker->check_addr_expr (location, t);\n       *walk_subtree = false;\n     }\n-  else if (inbounds_vbase_memaccess_p (t))\n+  else if (inbounds_memaccess_p (t))\n     /* Hack: Skip MEM_REF checks in accesses to a member of a base class\n        at an offset that's within the bounds of the enclosing object.\n        See pr98266 and pr97595.  */"}, {"sha": "77cdb5ebd43bb75d40b5f38aaff008ad2fc9a2ad", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-22.C", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b10dacd0a8c926c22eab7d4aeb52ff86534acf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b10dacd0a8c926c22eab7d4aeb52ff86534acf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-22.C?ref=30b10dacd0a8c926c22eab7d4aeb52ff86534acf", "patch": "@@ -0,0 +1,105 @@\n+/* PR middle-end/99502 - missing -Warray-bounds on partial out of bounds\n+   access in C++\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+typedef __INT8_TYPE__  int8_t;\n+typedef __INT16_TYPE__ int16_t;\n+typedef __INT32_TYPE__ int32_t;\n+\n+struct POD32\n+{\n+  int32_t i32;\n+};\n+\n+int8_t a16[2];\n+int8_t apod32[sizeof (POD32)];\n+\n+void nowarn_pod32_assign ()\n+{\n+  POD32 *p = (POD32*)apod32;\n+  *p = POD32 ();\n+}\n+\n+void nowarn_pod32_assign_member ()\n+{\n+  POD32 *p = (POD32*)apod32;\n+  p->i32 = __LINE__;\n+}\n+\n+\n+void warn_pod32_assign ()\n+{\n+  POD32 *p = (POD32*)a16;\n+  *p = POD32 ();              // { dg-warning \"-Warray-bounds\" }\n+}\n+\n+void warn_pod32_assign_member ()\n+{\n+  POD32 *p = (POD32*)a16;\n+  p->i32 = __LINE__;          // { dg-warning \"-Warray-bounds\" }\n+}\n+\n+\n+struct BV32                   // { dg-warning \"-Warray-bounds\" \"due to pr99525\" }\n+{\n+  int32_t i32;\n+\n+  virtual ~BV32 ();\n+};\n+\n+int8_t abv32[sizeof (BV32)];\n+\n+void nowarn_bv32_assign ()\n+{\n+  BV32 *p = (BV32*)abv32;\n+  *p = BV32 ();\n+}\n+\n+void nowarn_bv32_assign_member ()\n+{\n+  BV32 *p = (BV32*)abv32;\n+  p->i32 = __LINE__;\n+}\n+\n+void warn_bv32_assign ()\n+{\n+  BV32 *p = (BV32*)a16;\n+  *p = BV32 ();                // { dg-warning \"-Warray-bounds\" \"pr99525\" { xfail *-*-* } }\n+}\n+\n+void warn_bv32_assign_member ()\n+{\n+  BV32 *p = (BV32*)a16;\n+  p->i32 = __LINE__;          // { dg-warning \"-Warray-bounds\" }\n+}\n+\n+\n+struct DV32: virtual BV32 { };\n+\n+int8_t adv32[sizeof (DV32)];\n+int8_t adv32_m1[sizeof adv32 - 1];\n+\n+void nowarn_dv32_assign ()\n+{\n+  DV32 *p = (DV32*)adv32;\n+  *p = DV32 ();\n+}\n+\n+void nowarn_dv32_assign_member ()\n+{\n+  DV32 *p = (DV32*)adv32;\n+  p->i32 = __LINE__;\n+}\n+\n+void warn_dv32_assign ()\n+{\n+  DV32 *p = (DV32*)adv32_m1;\n+  *p = DV32 ();                // { dg-warning \"-Warray-bounds\" \"pr?????\" { xfail *-*-* } }\n+}\n+\n+void warn_dv32_assign_member ()\n+{\n+  DV32 *p = (DV32*)adv32_m1;\n+  p->i32 = __LINE__;          // { dg-warning \"-Warray-bounds\" \"pr?????\" { xfail *-*-* } }\n+}"}, {"sha": "c43a7dea3efc2dca1858933c09e52e7f0c01be03", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-23.C", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b10dacd0a8c926c22eab7d4aeb52ff86534acf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b10dacd0a8c926c22eab7d4aeb52ff86534acf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-23.C?ref=30b10dacd0a8c926c22eab7d4aeb52ff86534acf", "patch": "@@ -0,0 +1,345 @@\n+/* PR middle-end/99502 - missing -Warray-bounds on partial out of bounds\n+   access in C++\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+inline void* operator new (__SIZE_TYPE__, void *p) { return p; }\n+\n+struct B0 { int b0i; };\n+struct B1: virtual B0 { int b1i; };\n+struct B2: virtual B0 { int b2i; };\n+struct D1: B1, B2 { int d1i; };\n+struct D2: D1 { int d2i; };\n+struct D3: D2 { long d3i, d3ax[]; };\n+\n+void sink (void*);\n+\n+\n+void test_D1 ()\n+{\n+  {\n+    char *p = new char[sizeof (D1)];\n+    new (p) D1 ();\n+    sink (p);\n+  }\n+\n+  {\n+    char *p = new char[sizeof (D1) - 1];\n+    new (p) D1 ();                      // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D1_b0i ()\n+{\n+  {\n+    D1 *p = (D1*)new char[sizeof (D1)];\n+    p->b0i = __LINE__;\n+    sink (p);\n+  }\n+\n+  {\n+    D1 *p = (D1*)new char[3];\n+    p->b0i = __LINE__;                   // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D1_b1i ()\n+{\n+  {\n+    D1 *p = (D1*)new char[sizeof (D1)];\n+    p->b1i = __LINE__;\n+    sink (p);\n+  }\n+\n+  {\n+    D1 *p = (D1*)new char[3];\n+    p->b1i = __LINE__;                   // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D1_b2i ()\n+{\n+  {\n+    D1 *p = (D1*)new char[sizeof (D1)];\n+    p->b2i = __LINE__;\n+    sink (p);\n+  }\n+\n+  {\n+    D1 *p = (D1*)new char[3];\n+    p->b2i = __LINE__;                   // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D1_d1i ()\n+{\n+  {\n+    D1 *p = (D1*)new char[sizeof (D1)];\n+    p->d1i = __LINE__;\n+    sink (p);\n+  }\n+\n+  {\n+    D1 *p = (D1*)new char[3];\n+    p->d1i = __LINE__;                   // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+\n+void test_D2 ()\n+{\n+  {\n+    char *p = new char[sizeof (D2)];\n+    new (p) D2 ();\n+    sink (p);\n+  }\n+\n+  {\n+    char *p = new char[sizeof (D2) - 1];\n+    new (p) D2 ();                      // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D2_b0i ()\n+{\n+  {\n+    D2 *p = (D2*)new char[sizeof (D2)];\n+    p->b0i = __LINE__;\n+    sink (p);\n+  }\n+\n+  {\n+    D2 *p = (D2*)new char[3];\n+    p->b0i = __LINE__;                   // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D2_b1i ()\n+{\n+  {\n+    D2 *p = (D2*)new char[sizeof (D2)];\n+    p->b1i = __LINE__;\n+    sink (p);\n+  }\n+\n+  {\n+    D2 *p = (D2*)new char[3];\n+    p->b1i = __LINE__;                   // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D2_b2i ()\n+{\n+  {\n+    D2 *p = (D2*)new char[sizeof (D2)];\n+    p->b2i = __LINE__;\n+    sink (p);\n+  }\n+\n+  {\n+    D2 *p = (D2*)new char[3];\n+    p->b2i = __LINE__;                   // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D2_d1i ()\n+{\n+  {\n+    D2 *p = (D2*)new char[sizeof (D2)];\n+    p->d1i = __LINE__;\n+    sink (p);\n+  }\n+\n+  {\n+    D2 *p = (D2*)new char[3];\n+    p->d1i = __LINE__;                   // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D2_d2i ()\n+{\n+  {\n+    D2 *p = (D2*)new char[sizeof (D2)];\n+    p->d2i = __LINE__;\n+    sink (p);\n+  }\n+\n+  {\n+    D2 *p = (D2*)new char[3];\n+    p->d2i = __LINE__;                   // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+\n+void test_D3 ()\n+{\n+  {\n+    char *p = new char[sizeof (D3)];\n+    new (p) D3 ();\n+    sink (p);\n+  }\n+\n+  {\n+    char *p = new char[sizeof (D3) - 1];\n+    new (p) D3 ();                      // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D3_b0i ()\n+{\n+  {\n+    D3 *p = (D3*)new char[sizeof (D3)];\n+    p->b0i = __LINE__;\n+    sink (p);\n+  }\n+\n+  {\n+    D3 *p = (D3*)new char[3];\n+    p->b0i = __LINE__;                   // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D3_b1i ()\n+{\n+  {\n+    D3 *p = (D3*)new char[sizeof (D3)];\n+    p->b1i = __LINE__;\n+    sink (p);\n+  }\n+\n+  {\n+    D3 *p = (D3*)new char[3];\n+    p->b1i = __LINE__;                   // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D3_b2i ()\n+{\n+  {\n+    D3 *p = (D3*)new char[sizeof (D3)];\n+    p->b2i = __LINE__;\n+    sink (p);\n+  }\n+\n+  {\n+    D3 *p = (D3*)new char[3];\n+    p->b2i = __LINE__;                   // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D3_d1i ()\n+{\n+  {\n+    D3 *p = (D3*)new char[sizeof (D3)];\n+    p->d1i = __LINE__;\n+    sink (p);\n+  }\n+\n+  {\n+    D3 *p = (D3*)new char[3];\n+    p->d1i = __LINE__;                   // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D3_d2i ()\n+{\n+  {\n+    D3 *p = (D3*)new char[sizeof (D3)];\n+    p->d2i = __LINE__;\n+    sink (p);\n+  }\n+\n+  {\n+    D3 *p = (D3*)new char[3];\n+    p->d2i = __LINE__;                   // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D3_d3i ()\n+{\n+  {\n+    D3 *p = (D3*)new char[sizeof (D3)];\n+    p->d3i = __LINE__;\n+    sink (p);\n+  }\n+\n+  {\n+    D3 *p = (D3*)new char[3];\n+    p->d3i = __LINE__;                   // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D3_d3ax ()\n+{\n+  {\n+    D3 *p = (D3*)new char[sizeof (D3)];\n+    *p->d3ax = __LINE__;                // { dg-warning \"-Warray-bounds\" \"pr?????\" { xfail *-*-* } }\n+    p->d3ax[9] = __LINE__;              // { dg-warning \"-Warray-bounds\" \"pr?????\" { xfail *-*-* } }\n+    sink (p);\n+  }\n+\n+  {\n+    D3 *p = (D3*)new char[sizeof (D3) + sizeof (D3::d3ax[0])];\n+    p->d3ax[0] = __LINE__;\n+    p->d3ax[1] = __LINE__;              // { dg-warning \"-Warray-bounds\" \"pr?????\" { xfail *-*-* } }\n+    sink (p);\n+  }\n+\n+  {\n+    D3 *p = (D3*)new char[3];\n+    *p->d3ax = __LINE__;                // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+struct D4: D2\n+{\n+  // D4:d4a0 overlaps with B0:b0i!\n+  long d4i, d4a0[0];\n+};\n+\n+void test_D4_d3a0 ()\n+{\n+  {\n+    D4 *p = (D4*)new char[sizeof (D4)];\n+    *p->d4a0 = __LINE__;                // { dg-warning \"-Warray-bounds\" }\n+    p->d4a0[1] = __LINE__;              // { dg-warning \"-Warray-bounds\" }\n+    p->d4a0[9] = __LINE__;              // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+\n+  {\n+    D4 *p = (D4*)new char[sizeof (D4) + sizeof (D4::d4a0[0])];\n+    /* The access to d4a0[0] should get a -Wzero-length-bounds because\n+       it's in bounds but overlaps p->b0i.  */\n+    p->d4a0[0] = __LINE__;              // { dg-warning \"-Wzero-length-bounds\" \"pr99635\" { xfail *-*-* } }\n+                                        // { dg-warning \"-Warray-bounds\" \"actual\" { target *-*-* } .-1 }\n+    p->d4a0[1] = __LINE__;              // { dg-warning \"-Warray-bounds\" }\n+    p->d4a0[9] = __LINE__;              // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+\n+  {\n+    D4 *p = (D4*)new char[3];\n+    *p->d4a0 = __LINE__;                // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}"}, {"sha": "071453a485d7023087b9a4cccfd44850e511d236", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-24.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b10dacd0a8c926c22eab7d4aeb52ff86534acf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b10dacd0a8c926c22eab7d4aeb52ff86534acf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-24.C?ref=30b10dacd0a8c926c22eab7d4aeb52ff86534acf", "patch": "@@ -0,0 +1,289 @@\n+/* PR middle-end/99502 - missing -Warray-bounds on partial out of bounds\n+   access in C++\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+inline void* operator new (__SIZE_TYPE__, void *p) { return p; }\n+\n+struct B0 { int b0i, b0a[0]; };\n+struct B1: virtual B0 { int b1i, b1a[0]; };\n+struct B2: virtual B0 { int b2i, b2a[0]; };\n+struct D1: B1, B2 { int d1i, d1a[0]; };\n+struct D2: D1 { int d2i, d2a[0]; };\n+struct D3: D2 { int d3i, d3a[0]; };\n+\n+void sink (void*);\n+\n+\n+void test_D1 ()\n+{\n+  {\n+    char *p = new char[sizeof (D1)];\n+    new (p) D1 ();\n+    sink (p);\n+  }\n+\n+  {\n+    char *p = new char[sizeof (D1) - 1];\n+    new (p) D1 ();                      // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D1_b0a ()\n+{\n+  {\n+    D1 *p = (D1*)new char[sizeof (D1)];\n+    *p->b0a = __LINE__;                 // { dg-warning \"-Warray-bounds\" \"pr99630\" { xfail *-*-* } }\n+    sink (p);\n+  }\n+\n+  {\n+    D1 *p = (D1*)new char[3];\n+    *p->b0a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D1_b1a ()\n+{\n+  {\n+    D1 *p = (D1*)new char[sizeof (D1)];\n+    *p->b1a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+\n+  {\n+    D1 *p = (D1*)new char[3];\n+    *p->b1a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D1_b2a ()\n+{\n+  {\n+    D1 *p = (D1*)new char[sizeof (D1)];\n+    *p->b2a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+\n+  {\n+    D1 *p = (D1*)new char[3];\n+    *p->b2a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D1_d1a ()\n+{\n+  {\n+    D1 *p = (D1*)new char[sizeof (D1)];\n+    *p->d1a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+\n+  {\n+    D1 *p = (D1*)new char[3];\n+    *p->d1a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+\n+void test_D2 ()\n+{\n+  {\n+    char *p = new char[sizeof (D2)];\n+    new (p) D2 ();\n+    sink (p);\n+  }\n+\n+  {\n+    char *p = new char[sizeof (D2) - 1];\n+    new (p) D2 ();                      // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D2_b0a ()\n+{\n+  {\n+    D2 *p = (D2*)new char[sizeof (D2)];\n+    *p->b0a = __LINE__;                 // { dg-warning \"-Warray-bounds\" \"pr99630\" { xfail *-*-* } }\n+    sink (p);\n+  }\n+\n+  {\n+    D2 *p = (D2*)new char[3];\n+    *p->b0a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D2_b1a ()\n+{\n+  {\n+    D2 *p = (D2*)new char[sizeof (D2)];\n+    *p->b1a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+\n+  {\n+    D2 *p = (D2*)new char[3];\n+    *p->b1a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D2_b2a ()\n+{\n+  {\n+    D2 *p = (D2*)new char[sizeof (D2)];\n+    *p->b2a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+\n+  {\n+    D2 *p = (D2*)new char[3];\n+    *p->b2a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D2_d1a ()\n+{\n+  {\n+    D2 *p = (D2*)new char[sizeof (D2)];\n+    *p->d1a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+\n+  {\n+    D2 *p = (D2*)new char[3];\n+    *p->d1a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D2_d2a ()\n+{\n+  {\n+    D2 *p = (D2*)new char[sizeof (D2)];\n+    *p->d2a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+\n+  {\n+    D2 *p = (D2*)new char[3];\n+    *p->d2a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+\n+void test_D3 ()\n+{\n+  {\n+    char *p = new char[sizeof (D3)];\n+    new (p) D3 ();\n+    sink (p);\n+  }\n+\n+  {\n+    char *p = new char[sizeof (D3) - 1];\n+    new (p) D3 ();                      // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D3_b0a ()\n+{\n+  {\n+    D3 *p = (D3*)new char[sizeof (D3)];\n+    *p->b0a = __LINE__;                 // { dg-warning \"-Warray-bounds\" \"pr99630\" { xfail *-*-* } }\n+    sink (p);\n+  }\n+\n+  {\n+    D3 *p = (D3*)new char[3];\n+    *p->b0a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D3_b1a ()\n+{\n+  {\n+    D3 *p = (D3*)new char[sizeof (D3)];\n+    *p->b1a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+\n+  {\n+    D3 *p = (D3*)new char[3];\n+    *p->b1a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D3_b2a ()\n+{\n+  {\n+    D3 *p = (D3*)new char[sizeof (D3)];\n+    *p->b2a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+\n+  {\n+    D3 *p = (D3*)new char[3];\n+    *p->b2a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D3_d1a ()\n+{\n+  {\n+    D3 *p = (D3*)new char[sizeof (D3)];\n+    *p->d1a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+\n+  {\n+    D3 *p = (D3*)new char[3];\n+    *p->d1a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D3_d2a ()\n+{\n+  {\n+    D3 *p = (D3*)new char[sizeof (D3)];\n+    *p->d2a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+\n+  {\n+    D3 *p = (D3*)new char[3];\n+    *p->d2a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+\n+void test_D3_d3a ()\n+{\n+  {\n+    D3 *p = (D3*)new char[sizeof (D3)];\n+    *p->d3a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+\n+  {\n+    D3 *p = (D3*)new char[3];\n+    *p->d3a = __LINE__;                 // { dg-warning \"-Warray-bounds\" }\n+    sink (p);\n+  }\n+}\n+"}]}