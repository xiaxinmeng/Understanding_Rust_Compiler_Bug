{"sha": "7f014022861b5b3f00be9bb32fe3fe772517ddac", "node_id": "C_kwDOANBUbNoAKDdmMDE0MDIyODYxYjViM2YwMGJlOWJiMzJmZTNmZTc3MjUxN2RkYWM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-16T06:37:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-16T06:37:05Z"}, "message": "c++: Allow attributes on concepts - DR 2428\n\nThe following patch adds parsing of attributes to concept definition,\nallows deprecated attribute to be specified (as CONCEPT_DECL now needs\nto be checked in c-family/c-attribs.cc, I had to move its declaration\nfrom cp/*.def to c-family/*.def) and checks TREE_DEPRECATED in\nbuild_standard_check (not sure if that is the right spot, or whether\nit shouldn't be checked also for variable and function concepts and\nhow to write testcase coverage for that).\n\n2022-11-16  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/c-family/\n\t* c-common.def (CONCEPT_DECL): New tree, moved here from\n\tcp-tree.def.\n\t* c-common.cc (c_common_init_ts): Handle CONCEPT_DECL.\n\t* c-attribs.cc (handle_deprecated_attribute): Allow deprecated\n\tattribute on CONCEPT_DECL.\ngcc/cp/\n\t* cp-tree.def (CONCEPT_DECL): Move to c-common.def.\n\t* cp-objcp-common.cc (cp_common_init_ts): Don't handle CONCEPT_DECL\n\there.\n\t* cp-tree.h (finish_concept_definition): Add ATTRS parameter.\n\t* parser.cc (cp_parser_concept_definition): Parse attributes in\n\tbetween identifier and =.  Adjust finish_concept_definition\n\tcaller.\n\t* pt.cc (finish_concept_definition): Add ATTRS parameter.  Call\n\tcplus_decl_attributes.\n\t* constraint.cc (build_standard_check): If CONCEPT_DECL is\n\tTREE_DEPRECATED, emit -Wdeprecated-declaration warnings.\ngcc/testsuite/\n\t* g++.dg/cpp2a/concepts-dr2428.C: New test.", "tree": {"sha": "ed009c2de327bf023de96fb16d0e71d14c749985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed009c2de327bf023de96fb16d0e71d14c749985"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f014022861b5b3f00be9bb32fe3fe772517ddac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f014022861b5b3f00be9bb32fe3fe772517ddac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f014022861b5b3f00be9bb32fe3fe772517ddac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f014022861b5b3f00be9bb32fe3fe772517ddac/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c6cd9c05efca29a1a9635b81c86cbad25bbdbbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c6cd9c05efca29a1a9635b81c86cbad25bbdbbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c6cd9c05efca29a1a9635b81c86cbad25bbdbbe"}], "stats": {"total": 54, "additions": 44, "deletions": 10}, "files": [{"sha": "07bca68e9b9425ed4631f110e2572eb99c1ee11c", "filename": "gcc/c-family/c-attribs.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f014022861b5b3f00be9bb32fe3fe772517ddac/gcc%2Fc-family%2Fc-attribs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f014022861b5b3f00be9bb32fe3fe772517ddac/gcc%2Fc-family%2Fc-attribs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.cc?ref=7f014022861b5b3f00be9bb32fe3fe772517ddac", "patch": "@@ -4211,7 +4211,8 @@ handle_deprecated_attribute (tree *node, tree name,\n \t  || VAR_OR_FUNCTION_DECL_P (decl)\n \t  || TREE_CODE (decl) == FIELD_DECL\n \t  || TREE_CODE (decl) == CONST_DECL\n-\t  || objc_method_decl (TREE_CODE (decl)))\n+\t  || objc_method_decl (TREE_CODE (decl))\n+\t  || TREE_CODE (decl) == CONCEPT_DECL)\n \tTREE_DEPRECATED (decl) = 1;\n       else if (TREE_CODE (decl) == LABEL_DECL)\n \t{"}, {"sha": "6f1f21bc4c173e15dfee6e7196ad97e4fe12d2d4", "filename": "gcc/c-family/c-common.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f014022861b5b3f00be9bb32fe3fe772517ddac/gcc%2Fc-family%2Fc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f014022861b5b3f00be9bb32fe3fe772517ddac/gcc%2Fc-family%2Fc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.cc?ref=7f014022861b5b3f00be9bb32fe3fe772517ddac", "patch": "@@ -8497,6 +8497,8 @@ c_common_init_ts (void)\n   MARK_TS_EXP (FOR_STMT);\n   MARK_TS_EXP (SWITCH_STMT);\n   MARK_TS_EXP (WHILE_STMT);\n+\n+  MARK_TS_DECL_COMMON (CONCEPT_DECL);\n }\n \n /* Build a user-defined numeric literal out of an integer constant type VALUE"}, {"sha": "64956fc2ca1208535ef0e5f0603e37b6dffa140b", "filename": "gcc/c-family/c-common.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f014022861b5b3f00be9bb32fe3fe772517ddac/gcc%2Fc-family%2Fc-common.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f014022861b5b3f00be9bb32fe3fe772517ddac/gcc%2Fc-family%2Fc-common.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.def?ref=7f014022861b5b3f00be9bb32fe3fe772517ddac", "patch": "@@ -81,6 +81,14 @@ DEFTREECODE (CONTINUE_STMT, \"continue_stmt\", tcc_statement, 0)\n    SWITCH_STMT_SCOPE, respectively.  */\n DEFTREECODE (SWITCH_STMT, \"switch_stmt\", tcc_statement, 4)\n \n+/* Extensions for C++ Concepts. */\n+\n+/* Concept definition. This is not entirely different than a VAR_DECL\n+   except that a) it must be a template, and b) doesn't have the wide\n+   range of value and linkage options available to variables.  Used\n+   by C++ FE and in c-family attribute handling.  */\n+DEFTREECODE (CONCEPT_DECL, \"concept_decl\", tcc_declaration, 0)\n+\n /*\n Local variables:\n mode:c"}, {"sha": "a113d3e269e5dc8340a9aab4cfbd77bf4e85d95c", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f014022861b5b3f00be9bb32fe3fe772517ddac/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f014022861b5b3f00be9bb32fe3fe772517ddac/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=7f014022861b5b3f00be9bb32fe3fe772517ddac", "patch": "@@ -1396,6 +1396,8 @@ build_standard_check (tree tmpl, tree args, tsubst_flags_t complain)\n {\n   gcc_assert (standard_concept_p (tmpl));\n   gcc_assert (TREE_CODE (tmpl) == TEMPLATE_DECL);\n+  if (TREE_DEPRECATED (DECL_TEMPLATE_RESULT (tmpl)))\n+    warn_deprecated_use (DECL_TEMPLATE_RESULT (tmpl), NULL_TREE);\n   tree parms = INNERMOST_TEMPLATE_PARMS (DECL_TEMPLATE_PARMS (tmpl));\n   args = coerce_template_parms (parms, args, tmpl, complain);\n   if (args == error_mark_node)"}, {"sha": "7f76f2c669a77b360d5d4b7f4efe5ca5827d3de6", "filename": "gcc/cp/cp-objcp-common.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f014022861b5b3f00be9bb32fe3fe772517ddac/gcc%2Fcp%2Fcp-objcp-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f014022861b5b3f00be9bb32fe3fe772517ddac/gcc%2Fcp%2Fcp-objcp-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.cc?ref=7f014022861b5b3f00be9bb32fe3fe772517ddac", "patch": "@@ -473,7 +473,6 @@ cp_common_init_ts (void)\n   /* New decls.  */\n   MARK_TS_DECL_COMMON (TEMPLATE_DECL);\n   MARK_TS_DECL_COMMON (WILDCARD_DECL);\n-  MARK_TS_DECL_COMMON (CONCEPT_DECL);\n \n   MARK_TS_DECL_NON_COMMON (USING_DECL);\n "}, {"sha": "3de8278e9f152d72e8fa6c4b86c17d20438fb3e7", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f014022861b5b3f00be9bb32fe3fe772517ddac/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f014022861b5b3f00be9bb32fe3fe772517ddac/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=7f014022861b5b3f00be9bb32fe3fe772517ddac", "patch": "@@ -495,11 +495,6 @@ DEFTREECODE (OMP_DEPOBJ, \"omp_depobj\", tcc_statement, 2)\n \n /* Extensions for Concepts. */\n \n-/* Concept definition. This is not entirely different than a VAR_DECL\n-   except that a) it must be a template, and b) doesn't have the wide\n-   range of value and linkage options available to variables.  */\n-DEFTREECODE (CONCEPT_DECL, \"concept_decl\", tcc_declaration, 0)\n-\n /* Used to represent information associated with constrained declarations. */\n DEFTREECODE (CONSTRAINT_INFO, \"constraint_info\", tcc_exceptional, 0)\n "}, {"sha": "07f96ea861fb953c051e7954131c43c597c681a7", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f014022861b5b3f00be9bb32fe3fe772517ddac/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f014022861b5b3f00be9bb32fe3fe772517ddac/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7f014022861b5b3f00be9bb32fe3fe772517ddac", "patch": "@@ -8322,7 +8322,7 @@ struct diagnosing_failed_constraint\n extern cp_expr finish_constraint_or_expr\t(location_t, cp_expr, cp_expr);\n extern cp_expr finish_constraint_and_expr\t(location_t, cp_expr, cp_expr);\n extern cp_expr finish_constraint_primary_expr\t(cp_expr);\n-extern tree finish_concept_definition\t\t(cp_expr, tree);\n+extern tree finish_concept_definition\t\t(cp_expr, tree, tree);\n extern tree combine_constraint_expressions      (tree, tree);\n extern tree append_constraint\t\t\t(tree, tree);\n extern tree get_constraints                     (const_tree);"}, {"sha": "c5929a6cc5fcd65a3f4a5c79f7148ad6b720e189", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f014022861b5b3f00be9bb32fe3fe772517ddac/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f014022861b5b3f00be9bb32fe3fe772517ddac/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=7f014022861b5b3f00be9bb32fe3fe772517ddac", "patch": "@@ -29672,6 +29672,8 @@ cp_parser_concept_definition (cp_parser *parser)\n       return NULL_TREE;\n     }\n \n+  tree attrs = cp_parser_attributes_opt (parser);\n+\n   if (!cp_parser_require (parser, CPP_EQ, RT_EQ))\n     {\n       cp_parser_skip_to_end_of_statement (parser);\n@@ -29688,7 +29690,7 @@ cp_parser_concept_definition (cp_parser *parser)\n      but continue as if it were.  */\n   cp_parser_consume_semicolon_at_end_of_statement (parser);\n \n-  return finish_concept_definition (id, init);\n+  return finish_concept_definition (id, init, attrs);\n }\n \n // -------------------------------------------------------------------------- //"}, {"sha": "0310e38c9b955b09e11fb95355c25eddd0c83685", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f014022861b5b3f00be9bb32fe3fe772517ddac/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f014022861b5b3f00be9bb32fe3fe772517ddac/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=7f014022861b5b3f00be9bb32fe3fe772517ddac", "patch": "@@ -28928,7 +28928,7 @@ placeholder_type_constraint_dependent_p (tree t)\n    the TEMPLATE_DECL. */\n \n tree\n-finish_concept_definition (cp_expr id, tree init)\n+finish_concept_definition (cp_expr id, tree init, tree attrs)\n {\n   gcc_assert (identifier_p (id));\n   gcc_assert (processing_template_decl);\n@@ -28962,6 +28962,9 @@ finish_concept_definition (cp_expr id, tree init)\n   DECL_CONTEXT (decl) = current_scope ();\n   DECL_INITIAL (decl) = init;\n \n+  if (attrs)\n+    cplus_decl_attributes (&decl, attrs, 0);\n+\n   set_originating_module (decl, false);\n \n   /* Push the enclosing template.  */"}, {"sha": "d08ad36bd8c6b999641a106178de450f6bb3befe", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-dr2428.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f014022861b5b3f00be9bb32fe3fe772517ddac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-dr2428.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f014022861b5b3f00be9bb32fe3fe772517ddac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-dr2428.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-dr2428.C?ref=7f014022861b5b3f00be9bb32fe3fe772517ddac", "patch": "@@ -0,0 +1,22 @@\n+// DR 2428\n+// { dg-do compile { target c++20 } }\n+\n+template<typename T>\n+concept C1 [[deprecated]] = true;\n+\n+template<typename T>\n+concept C2 __attribute__((deprecated)) = false;\n+\n+template<typename T>\n+concept C3 [[deprecated]] = true;\n+\n+template<typename T>\n+concept C4 __attribute__((deprecated)) = false;\n+\n+static_assert(C3<int>);\t// { dg-warning \"'C3' is deprecated\" }\n+static_assert(C4<int>); // { dg-error \"static assertion failed\" }\n+\t\t\t// { dg-warning \"'C4' is deprecated\" \"\" { target *-*-* } .-1 }\n+\n+template<typename T>\n+  requires C3<T>\t// { dg-warning \"'C3' is deprecated\" }\n+int fn1(T t) { return 0; }"}]}