{"sha": "7cf4c53d1ed645e185da310d27f3dcd627e4e42b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NmNGM1M2QxZWQ2NDVlMTg1ZGEzMTBkMjdmM2RjZDYyN2U0ZTQyYg==", "commit": {"author": {"name": "Vladimir Prus", "email": "vladimir@codesourcery.com", "date": "2007-01-31T18:40:34Z"}, "committer": {"name": "Vladimir Prus", "email": "vprus@gcc.gnu.org", "date": "2007-01-31T18:40:34Z"}, "message": "libiberty.h (PEX_STDERR_TO_PIPE): New define.\n\n        include/\n        * libiberty.h (PEX_STDERR_TO_PIPE): New define.\n        (PEX_BINARY_ERROR): New define.\n        (pex_read_err): New function.\n\n        libiberty/\n        * pex-common.h (struct pex_obj): New fields\n        stderr_pipe and read_err.\n        * pex-common.c (pex_init_common): Initialize\n        stderr_pipe.\n\nFrom-SVN: r121430", "tree": {"sha": "870f21c9718416f8744d44e883b9722141905461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/870f21c9718416f8744d44e883b9722141905461"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cf4c53d1ed645e185da310d27f3dcd627e4e42b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf4c53d1ed645e185da310d27f3dcd627e4e42b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cf4c53d1ed645e185da310d27f3dcd627e4e42b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf4c53d1ed645e185da310d27f3dcd627e4e42b/comments", "author": {"login": "vprus", "id": 225915, "node_id": "MDQ6VXNlcjIyNTkxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/225915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vprus", "html_url": "https://github.com/vprus", "followers_url": "https://api.github.com/users/vprus/followers", "following_url": "https://api.github.com/users/vprus/following{/other_user}", "gists_url": "https://api.github.com/users/vprus/gists{/gist_id}", "starred_url": "https://api.github.com/users/vprus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vprus/subscriptions", "organizations_url": "https://api.github.com/users/vprus/orgs", "repos_url": "https://api.github.com/users/vprus/repos", "events_url": "https://api.github.com/users/vprus/events{/privacy}", "received_events_url": "https://api.github.com/users/vprus/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a968c71490366bd7b72be57fd4daa4297bd024c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a968c71490366bd7b72be57fd4daa4297bd024c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a968c71490366bd7b72be57fd4daa4297bd024c9"}], "stats": {"total": 172, "additions": 153, "deletions": 19}, "files": [{"sha": "c494efc8faeb82de017efeac9e757f584899c736", "filename": "include/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf4c53d1ed645e185da310d27f3dcd627e4e42b/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf4c53d1ed645e185da310d27f3dcd627e4e42b/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=7cf4c53d1ed645e185da310d27f3dcd627e4e42b", "patch": "@@ -1,3 +1,9 @@\n+2007-01-31  Vladimir Prus  <vladimir@codesourcery.com>\n+\t\n+\t* libiberty.h (PEX_STDERR_TO_PIPE): New define.\n+\t(PEX_BINARY_ERROR): New define.\n+\t(pex_read_err): New function.\n+\n 2007-01-29  Simon Baldwin <simonb@google.com>\n \n \t* demangle.h: New cplus_demangle_print_callback,"}, {"sha": "cc6cce3d22028ec75b4eebf8686ae8a0492e61f6", "filename": "include/libiberty.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf4c53d1ed645e185da310d27f3dcd627e4e42b/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf4c53d1ed645e185da310d27f3dcd627e4e42b/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=7cf4c53d1ed645e185da310d27f3dcd627e4e42b", "patch": "@@ -400,6 +400,19 @@ extern struct pex_obj *pex_init (int flags, const char *pname,\n    PEX_BINARY_INPUT.  */\n #define PEX_BINARY_OUTPUT\t0x20\n \n+/* Capture stderr to a pipe.  The output can be read by\n+   calling pex_read_err and reading from the returned\n+   FILE object.  This flag may be specified only for\n+   the last program in a pipeline.  \n+\n+   This flag is supported only on Unix and Windows.  */\n+#define PEX_STDERR_TO_PIPE\t0x40\n+\n+/* Capture stderr in binary mode.  This flag is ignored\n+   on Unix.  */\n+#define PEX_BINARY_ERROR\t0x80\n+\n+\n /* Execute one program.  Returns NULL on success.  On error returns an\n    error string (typically just the name of a system call); the error\n    string is statically allocated.\n@@ -521,6 +534,14 @@ extern FILE *pex_input_pipe (struct pex_obj *obj, int binary);\n \n extern FILE *pex_read_output (struct pex_obj *, int binary);\n \n+/* Read the standard error of the last program to be executed.\n+   pex_run can not be called after this.  BINARY should be non-zero if\n+   the file should be opened in binary mode; this is ignored on Unix.\n+   Returns NULL on error.  Don't call fclose on the returned FILE; it\n+   will be closed by pex_free.  */\n+\n+extern FILE *pex_read_err (struct pex_obj *, int binary);\n+\n /* Return exit status of all programs in VECTOR.  COUNT indicates the\n    size of VECTOR.  The status codes in the vector are in the order of\n    the calls to pex_run.  Returns 0 on error, 1 on success.  */"}, {"sha": "4f23225cf72123c2d996bd25eac96e9a7a70f968", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf4c53d1ed645e185da310d27f3dcd627e4e42b/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf4c53d1ed645e185da310d27f3dcd627e4e42b/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=7cf4c53d1ed645e185da310d27f3dcd627e4e42b", "patch": "@@ -1,3 +1,17 @@\n+2007-01-31  Vladimir Prus  <vladimir@codesourcery.com>\n+\n+\t* pex-common.h (struct pex_obj): New fields\n+\tstderr_pipe and read_err.\t\n+\t* pex-common.c (pex_init_common): Initialize\n+\tstderr_pipe.\n+\t(pex_run_in_environment): Add error checking\n+\tfor PEX_STDERR_TO_PIPE.  Create a pipe\n+\tfor stderr if necessary.\n+\t(pex_read_err): New.\n+\t(pex_free): Close read_err.\n+\t* pexecute.txh: Document changes.\n+\t* functions.texi: Regenerated.\n+\n 2007-01-31  Ben Elliston  <bje@au.ibm.com>\n \n \t* strsignal.c (psignal): Change type of signo to int."}, {"sha": "b791f23c1b44ae3492f11763518629b4f0284df1", "filename": "libiberty/functions.texi", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf4c53d1ed645e185da310d27f3dcd627e4e42b/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf4c53d1ed645e185da310d27f3dcd627e4e42b/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=7cf4c53d1ed645e185da310d27f3dcd627e4e42b", "patch": "@@ -650,7 +650,7 @@ Sets the first @var{count} bytes of @var{s} to the constant byte\n \n @end deftypefn\n \n-@c mkstemps.c:54\n+@c mkstemps.c:58\n @deftypefn Replacement int mkstemps (char *@var{pattern}, int @var{suffix_len})\n \n Generate a unique temporary file name from @var{pattern}.\n@@ -668,14 +668,14 @@ reading and writing.\n \n @end deftypefn\n \n-@c pexecute.txh:244\n+@c pexecute.txh:266\n @deftypefn Extension void pex_free (struct pex_obj @var{obj})\n \n Clean up and free all data associated with @var{obj}.\n \n @end deftypefn\n \n-@c pexecute.txh:219\n+@c pexecute.txh:241\n @deftypefn Extension int pex_get_status (struct pex_obj *@var{obj}, int @var{count}, int *@var{vector})\n \n Returns the exit status of all programs run using @var{obj}.\n@@ -685,7 +685,7 @@ to @code{pex_run}.  Returns 0 on error, 1 on success.\n \n @end deftypefn\n \n-@c pexecute.txh:228\n+@c pexecute.txh:250\n @deftypefn Extension int pex_get_times (struct pex_obj *@var{obj}, int @var{count}, struct pex_time *@var{vector})\n \n Returns the process execution times of all programs run using\n@@ -734,7 +734,7 @@ temporary files; it may be @code{NULL} to use a randomly chosen name.\n \n @end deftypefn\n \n-@c pexecute.txh:146\n+@c pexecute.txh:155\n @deftypefn Extension {FILE *} pex_input_file (struct pex_obj *@var{obj}, int @var{flags}, const char *@var{in_name})\n \n Return a stream for a temporary file to pass to the first program in\n@@ -752,7 +752,7 @@ binary mode; otherwise, open it in the default mode.  Including\n @code{PEX_BINARY_OUTPUT} in @var{flags} has no effect on Unix.\n @end deftypefn\n \n-@c pexecute.txh:163\n+@c pexecute.txh:172\n @deftypefn Extension {FILE *} pex_input_pipe (struct pex_obj *@var{obj}, int @var{binary})\n \n Return a stream @var{fp} for a pipe connected to the standard input of\n@@ -797,7 +797,7 @@ the output pipe is you, but you are blocked on the input pipe.\n \n @end deftypefn\n \n-@c pexecute.txh:250\n+@c pexecute.txh:272\n @deftypefn Extension {const char *} pex_one (int @var{flags}, const char *@var{executable}, char * const *@var{argv}, const char *@var{pname}, const char *@var{outname}, const char *@var{errname}, int *@var{status}, int *@var{err})\n \n An interface to permit the easy execution of a\n@@ -810,7 +810,20 @@ be set to the exit status of the program.\n \n @end deftypefn\n \n-@c pexecute.txh:207\n+@c pexecute.txh:228\n+@deftypefn Extension {FILE *} pex_read_err (struct pex_obj *@var{obj}, int @var{binary})\n+\n+Returns a @code{FILE} pointer which may be used to read the standard\n+error of the last program in the pipeline.  When this is used,\n+@code{PEX_LAST} should not be used in a call to @code{pex_run}.  After\n+this is called, @code{pex_run} may no longer be called with the same\n+@var{obj}.  @var{binary} should be non-zero if the file should be\n+opened in binary mode.  Don't call @code{fclose} on the returned file;\n+it will be closed by @code{pex_free}.\n+\n+@end deftypefn\n+\n+@c pexecute.txh:216\n @deftypefn Extension {FILE *} pex_read_output (struct pex_obj *@var{obj}, int @var{binary})\n \n Returns a @code{FILE} pointer which may be used to read the standard\n@@ -861,14 +874,23 @@ Send the program's standard error to standard output, if possible.\n \n @vindex PEX_BINARY_INPUT\n @vindex PEX_BINARY_OUTPUT\n+@vindex PEX_BINARY_ERROR\n @item PEX_BINARY_INPUT\n @itemx PEX_BINARY_OUTPUT\n-The standard input (output) of the program should be read (written) in\n+@itemx PEX_BINARY_ERROR\n+The standard input (output or error) of the program should be read (written) in\n binary mode rather than text mode.  These flags are ignored on systems\n which do not distinguish binary mode and text mode, such as Unix.  For\n proper behavior these flags should match appropriately---a call to\n @code{pex_run} using @code{PEX_BINARY_OUTPUT} should be followed by a\n call using @code{PEX_BINARY_INPUT}.\n+\n+@vindex PEX_STDERR_TO_PIPE\n+@item PEX_STDERR_TO_PIPE\n+Send the program's standard error to a pipe, if possible.  This flag\n+cannot be specified together with @code{PEX_STDERR_TO_STDOUT}.  This\n+flag can be specified only on the last program in pipeline.\n+\n @end table\n \n @var{executable} is the program to execute.  @var{argv} is the set of\n@@ -924,7 +946,7 @@ value, or to 0 if there is no relevant @code{errno}.\n \n @end deftypefn\n \n-@c pexecute.txh:133\n+@c pexecute.txh:142\n @deftypefn Extension {const char *} pex_run_in_environment (struct pex_obj *@var{obj}, int @var{flags}, const char *@var{executable}, char * const *@var{argv}, char * const *@var{env}, int @var{env_size}, const char *@var{outname}, const char *@var{errname}, int *@var{err})\n \n Execute one program in a pipeline, permitting the environment for the\n@@ -938,8 +960,8 @@ form @code{VAR=VALUE}, with the exception of the last element that must be\n \n @end deftypefn\n \n-@c pexecute.txh:262\n-@deftypefn Extension int pexecute (const char *@var{program}, char * const *@var{argv}, const char *@var{this_pname}, const char *@var{temp_base}, char **@var{errmsg_fmt}, char **@var{errmsg_arg}, int flags)\n+@c pexecute.txh:284\n+@deftypefn Extension int pexecute (const char *@var{program}, char * const *@var{argv}, const char *@var{this_pname}, const char *@var{temp_base}, char **@var{errmsg_fmt}, char **@var{errmsg_arg}, int @var{flags})\n \n This is the old interface to execute one or more programs.  It is\n still supported for compatibility purposes, but is no longer\n@@ -966,7 +988,7 @@ name is unset/removed.\n \n @end deftypefn\n \n-@c pexecute.txh:270\n+@c pexecute.txh:292\n @deftypefn Extension int pwait (int @var{pid}, int *@var{status}, int @var{flags})\n \n Another part of the old execution interface."}, {"sha": "7f355365edafd192fa2a0d46f8a733ba95fda2ad", "filename": "libiberty/pex-common.c", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf4c53d1ed645e185da310d27f3dcd627e4e42b/libiberty%2Fpex-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf4c53d1ed645e185da310d27f3dcd627e4e42b/libiberty%2Fpex-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-common.c?ref=7cf4c53d1ed645e185da310d27f3dcd627e4e42b", "patch": "@@ -62,13 +62,15 @@ pex_init_common (int flags, const char *pname, const char *tempbase,\n   obj->next_input = STDIN_FILE_NO;\n   obj->next_input_name = NULL;\n   obj->next_input_name_allocated = 0;\n+  obj->stderr_pipe = -1;\n   obj->count = 0;\n   obj->children = NULL;\n   obj->status = NULL;\n   obj->time = NULL;\n   obj->number_waited = 0;\n   obj->input_file = NULL;\n   obj->read_output = NULL;\n+  obj->read_err = NULL;\n   obj->remove_count = 0;\n   obj->remove = NULL;\n   obj->funcs = funcs;\n@@ -282,14 +284,43 @@ pex_run_in_environment (struct pex_obj *obj, int flags, const char *executable,\n \n   /* Set ERRDES.  */\n \n+  if (errname != NULL && (flags & PEX_STDERR_TO_PIPE) != 0)\n+    {\n+      *err = 0;\n+      errmsg = \"both ERRNAME and PEX_STDERR_TO_PIPE specified.\";\n+      goto error_exit;\n+    }\n+\n+  if (obj->stderr_pipe != -1)\n+    {\n+      *err = 0;\n+      errmsg = \"PEX_STDERR_TO_PIPE used in the middle of pipeline\";\n+      goto error_exit;\n+    }\n+\n   if (errname == NULL)\n-    errdes = STDERR_FILE_NO;\n+    {\n+      if (flags & PEX_STDERR_TO_PIPE)\n+\t{\n+\t  if (obj->funcs->pipe (obj, p, (flags & PEX_BINARY_ERROR) != 0) < 0)\n+\t    {\n+\t      *err = errno;\n+\t      errmsg = \"pipe\";\n+\t      goto error_exit;\n+\t    }\n+\t  \n+\t  errdes = p[WRITE_PORT];\n+\t  obj->stderr_pipe = p[READ_PORT];\t  \n+\t}\n+      else\n+\t{\n+\t  errdes = STDERR_FILE_NO;\n+\t}\n+    }\n   else\n     {\n-      /* We assume that stderr is in text mode--it certainly shouldn't\n-\t be controlled by PEX_BINARY_OUTPUT.  If necessary, we can add\n-\t a PEX_BINARY_STDERR flag.  */\n-      errdes = obj->funcs->open_write (obj, errname, 0);\n+      errdes = obj->funcs->open_write (obj, errname, \n+\t\t\t\t       (flags & PEX_BINARY_ERROR) != 0);\n       if (errdes < 0)\n \t{\n \t  *err = errno;\n@@ -465,6 +496,18 @@ pex_read_output (struct pex_obj *obj, int binary)\n   return obj->read_output;\n }\n \n+FILE *\n+pex_read_err (struct pex_obj *obj, int binary)\n+{\n+  int o;\n+  \n+  o = obj->stderr_pipe;\n+  if (o < 0 || o == STDIN_FILE_NO)\n+    return NULL;\n+  obj->read_err = obj->funcs->fdopenr (obj, o, binary);\n+  return obj->read_err;    \n+}\n+\n /* Get the exit status and, if requested, the resource time for all\n    the child processes.  Return 0 on failure, 1 on success.  */\n \n@@ -578,6 +621,8 @@ pex_free (struct pex_obj *obj)\n     free (obj->time);\n   if (obj->read_output != NULL)\n     fclose (obj->read_output);\n+  if (obj->read_err != NULL)\n+    fclose (obj->read_err);\n \n   if (obj->remove_count > 0)\n     {"}, {"sha": "8edc13b7650fea8e6da7076ec41cefbdf4ea939e", "filename": "libiberty/pex-common.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf4c53d1ed645e185da310d27f3dcd627e4e42b/libiberty%2Fpex-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf4c53d1ed645e185da310d27f3dcd627e4e42b/libiberty%2Fpex-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-common.h?ref=7cf4c53d1ed645e185da310d27f3dcd627e4e42b", "patch": "@@ -59,6 +59,8 @@ struct pex_obj\n   char *next_input_name;\n   /* Whether next_input_name was allocated using malloc.  */\n   int next_input_name_allocated;\n+  /* If not -1, stderr pipe from the last process.  */\n+  int stderr_pipe;\n   /* Number of child processes.  */\n   int count;\n   /* PIDs of child processes; array allocated using malloc.  */\n@@ -73,6 +75,8 @@ struct pex_obj\n   FILE *input_file;\n   /* FILE created by pex_read_output.  */\n   FILE *read_output;\n+  /* FILE created by pex_read_err.  */\n+  FILE *read_err;\n   /* Number of temporary files to remove.  */\n   int remove_count;\n   /* List of temporary files to remove; array allocated using malloc"}, {"sha": "b87c0e53a6d36f037e4034698eeb169e82913876", "filename": "libiberty/pexecute.txh", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf4c53d1ed645e185da310d27f3dcd627e4e42b/libiberty%2Fpexecute.txh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf4c53d1ed645e185da310d27f3dcd627e4e42b/libiberty%2Fpexecute.txh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpexecute.txh?ref=7cf4c53d1ed645e185da310d27f3dcd627e4e42b", "patch": "@@ -67,14 +67,23 @@ Send the program's standard error to standard output, if possible.\n \n @vindex PEX_BINARY_INPUT\n @vindex PEX_BINARY_OUTPUT\n+@vindex PEX_BINARY_ERROR\n @item PEX_BINARY_INPUT\n @itemx PEX_BINARY_OUTPUT\n-The standard input (output) of the program should be read (written) in\n+@itemx PEX_BINARY_ERROR\n+The standard input (output or error) of the program should be read (written) in\n binary mode rather than text mode.  These flags are ignored on systems\n which do not distinguish binary mode and text mode, such as Unix.  For\n proper behavior these flags should match appropriately---a call to\n @code{pex_run} using @code{PEX_BINARY_OUTPUT} should be followed by a\n call using @code{PEX_BINARY_INPUT}.\n+\n+@vindex PEX_STDERR_TO_PIPE\n+@item PEX_STDERR_TO_PIPE\n+Send the program's standard error to a pipe, if possible.  This flag\n+cannot be specified together with @code{PEX_STDERR_TO_STDOUT}.  This\n+flag can be specified only on the last program in pipeline.\n+\n @end table\n \n @var{executable} is the program to execute.  @var{argv} is the set of\n@@ -216,6 +225,19 @@ it will be closed by @code{pex_free}.\n \n @end deftypefn\n \n+@deftypefn Extension {FILE *} pex_read_err (struct pex_obj *@var{obj}, int @var{binary})\n+\n+Returns a @code{FILE} pointer which may be used to read the standard\n+error of the last program in the pipeline.  When this is used,\n+@code{PEX_LAST} should not be used in a call to @code{pex_run}.  After\n+this is called, @code{pex_run} may no longer be called with the same\n+@var{obj}.  @var{binary} should be non-zero if the file should be\n+opened in binary mode.  Don't call @code{fclose} on the returned file;\n+it will be closed by @code{pex_free}.\n+\n+@end deftypefn\n+\n+\n @deftypefn Extension int pex_get_status (struct pex_obj *@var{obj}, int @var{count}, int *@var{vector})\n \n Returns the exit status of all programs run using @var{obj}."}]}