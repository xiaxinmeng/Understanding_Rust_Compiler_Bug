{"sha": "e5af9ddd011d07b38554d4f794470082ce5b13e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVhZjlkZGQwMTFkMDdiMzg1NTRkNGY3OTQ0NzAwODJjZTViMTNlNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-09-23T17:41:02Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-09-23T17:41:02Z"}, "message": "rtl.texi (REG_NOTES): Say that int_list can also be used.\n\ngcc/\n\t* doc/rtl.texi (REG_NOTES): Say that int_list can also be used.\n\t(REG_BR_PROB): Say that the probability is stored in an int_list.\n\t* reg-notes.def: Update commentary to mention INT_LIST.\n\t* rtl.def (EXPR_LIST, INSN_LIST): Capitalize comments.\n\t(INT_LIST): New rtx.\n\t* rtl.h (add_int_reg_note, add_shallow_copy_of_reg_note): Declare.\n\t* rtlanal.c (int_reg_note_p): New function.\n\t(alloc_reg_note): Assert that the note does not have an int argument.\n\t(add_int_reg_note, add_shallow_copy_of_reg_note): New functions.\n\t* combine.c (distribute_notes): Use add_shallow_copy_of_rtx.\n\t* cse.c (cse_process_notes_1): Expect REG_EQUAL to be an EXPR_LIST\n\trather than an INSN_LIST.  Handle INT_LIST.\n\t* ifcvt.c (cond_exec_process_insns): Take the probability as an int\n\trather than an rtx.  Use gen_rtx_INT_LIST to create a REG_BR_PROB note.\n\t(cond_exec_process_if_block): Use XINT to extract REG_BR_PROB values.\n\tManipulate them as ints rather than rtxes.\n\t* reg-stack.c (subst_asm_stack_regs): Only handle EXPR_LIST notes.\n\t* regmove.c (copy_src_to_dest): Likewise.\n\t* sched-vis.c (print_insn_with_notes): Handle INT_LIST.\n\n\t* config/i386/winnt.c (i386_pe_seh_unwind_emit): Sink pat assignment\n\tinto the cases that need it.\n\t* config/arm/arm.c (arm_unwind_emit): Likewise.\n\n\t* asan.c (asan_clear_shadow): Use add_int_reg_note for REG_BR_PROB.\n\t* emit-rtl.c (try_split, emit_copy_of_insn_after): Likewise.\n\t* loop-doloop.c (add_test, doloop_modify): Likewise.\n\t* loop-unswitch.c (compare_and_jump_seq): Likewise.\n\t* optabs.c (emit_cmp_and_jump_insn_1): Likewise.\n\t* predict.c (combine_predictions_for_insn): Likewise.\n\t* print-rtl.c (print_rtx): Handle INT_LIST.\n\t* config/aarch64/aarch64.c (aarch64_emit_unlikely_jump): Likewise.\n\t* config/alpha/alpha.c (emit_unlikely_jump): Likewise.\n\t* config/arm/arm.c (emit_unlikely_jump): Likewise.\n\t* config/i386/i386.c (ix86_expand_split_stack_prologue): Likewise.\n\t(ix86_split_fp_branch, predict_jump): Likewise.\n\t* config/rs6000/rs6000.c (emit_unlikely_jump): Likewise.\n\t* config/sh/sh.c (expand_cbranchsi4): Likewise.\n\t* config/spu/spu.c (ea_load_store_inline): Likewise.\n\n\t* cfgbuild.c (compute_outgoing_frequencies): Use XINT to access the\n\tvalue of a REG_BR_PROB note.\n\t* cfgrtl.c (force_nonfallthru_and_redirect): Likewise.\n\t(update_br_prob_note, rtl_verify_edges, purge_dead_edges): Likewise.\n\t* emit-rtl.c (try_split): Likewise.\n\t* predict.c (br_prob_note_reliable_p): Likewise.\n\t(invert_br_probabilities, combine_predictions_for_insn): Likewise.\n\t* reorg.c (mostly_true_jump): Likewise.\n\t* config/bfin/bfin.c (cbranch_predicted_taken_p): Likewise.\n\t* config/frv/frv.c (frv_print_operand_jump_hint): Likewise.\n\t* config/i386/i386.c (ix86_print_operand): Likewise.\n\t* config/ia64/ia64.c (ia64_print_operand): Likewise.\n\t* config/mmix/mmix.c (mmix_print_operand): Likewise.\n\t* config/rs6000/rs6000.c (output_cbranch): Likewise.\n\t* config/s390/s390.c (s390_expand_tbegin): Likewise.\n\t* config/sh/sh.c (sh_print_operand, sh_adjust_cost): Likewise.\n\t* config/sparc/sparc.c (output_cbranch): Likewise.\n\t* config/spu/spu.c (get_branch_target): Likewise.\n\t* config/tilegx/tilegx.c (cbranch_predicted_p): Likewise.\n\t* config/tilepro/tilepro.c (cbranch_predicted_p): Likewise.\n\nFrom-SVN: r202839", "tree": {"sha": "f0f02b81672861af134a5f088d252ccd973c596f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0f02b81672861af134a5f088d252ccd973c596f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5af9ddd011d07b38554d4f794470082ce5b13e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5af9ddd011d07b38554d4f794470082ce5b13e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5af9ddd011d07b38554d4f794470082ce5b13e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5af9ddd011d07b38554d4f794470082ce5b13e6/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "450ad0cd441aa2da250c2ca84e8005cb3a2d38e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/450ad0cd441aa2da250c2ca84e8005cb3a2d38e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/450ad0cd441aa2da250c2ca84e8005cb3a2d38e3"}], "stats": {"total": 315, "additions": 213, "deletions": 102}, "files": [{"sha": "179a3798c6eb9520a481bc520a985356df4823c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -1,3 +1,66 @@\n+2013-09-23  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* doc/rtl.texi (REG_NOTES): Say that int_list can also be used.\n+\t(REG_BR_PROB): Say that the probability is stored in an int_list.\n+\t* reg-notes.def: Update commentary to mention INT_LIST.\n+\t* rtl.def (EXPR_LIST, INSN_LIST): Capitalize comments.\n+\t(INT_LIST): New rtx.\n+\t* rtl.h (add_int_reg_note, add_shallow_copy_of_reg_note): Declare.\n+\t* rtlanal.c (int_reg_note_p): New function.\n+\t(alloc_reg_note): Assert that the note does not have an int argument.\n+\t(add_int_reg_note, add_shallow_copy_of_reg_note): New functions.\n+\t* combine.c (distribute_notes): Use add_shallow_copy_of_rtx.\n+\t* cse.c (cse_process_notes_1): Expect REG_EQUAL to be an EXPR_LIST\n+\trather than an INSN_LIST.  Handle INT_LIST.\n+\t* ifcvt.c (cond_exec_process_insns): Take the probability as an int\n+\trather than an rtx.  Use gen_rtx_INT_LIST to create a REG_BR_PROB note.\n+\t(cond_exec_process_if_block): Use XINT to extract REG_BR_PROB values.\n+\tManipulate them as ints rather than rtxes.\n+\t* reg-stack.c (subst_asm_stack_regs): Only handle EXPR_LIST notes.\n+\t* regmove.c (copy_src_to_dest): Likewise.\n+\t* sched-vis.c (print_insn_with_notes): Handle INT_LIST.\n+\n+\t* config/i386/winnt.c (i386_pe_seh_unwind_emit): Sink pat assignment\n+\tinto the cases that need it.\n+\t* config/arm/arm.c (arm_unwind_emit): Likewise.\n+\n+\t* asan.c (asan_clear_shadow): Use add_int_reg_note for REG_BR_PROB.\n+\t* emit-rtl.c (try_split, emit_copy_of_insn_after): Likewise.\n+\t* loop-doloop.c (add_test, doloop_modify): Likewise.\n+\t* loop-unswitch.c (compare_and_jump_seq): Likewise.\n+\t* optabs.c (emit_cmp_and_jump_insn_1): Likewise.\n+\t* predict.c (combine_predictions_for_insn): Likewise.\n+\t* print-rtl.c (print_rtx): Handle INT_LIST.\n+\t* config/aarch64/aarch64.c (aarch64_emit_unlikely_jump): Likewise.\n+\t* config/alpha/alpha.c (emit_unlikely_jump): Likewise.\n+\t* config/arm/arm.c (emit_unlikely_jump): Likewise.\n+\t* config/i386/i386.c (ix86_expand_split_stack_prologue): Likewise.\n+\t(ix86_split_fp_branch, predict_jump): Likewise.\n+\t* config/rs6000/rs6000.c (emit_unlikely_jump): Likewise.\n+\t* config/sh/sh.c (expand_cbranchsi4): Likewise.\n+\t* config/spu/spu.c (ea_load_store_inline): Likewise.\n+\n+\t* cfgbuild.c (compute_outgoing_frequencies): Use XINT to access the\n+\tvalue of a REG_BR_PROB note.\n+\t* cfgrtl.c (force_nonfallthru_and_redirect): Likewise.\n+\t(update_br_prob_note, rtl_verify_edges, purge_dead_edges): Likewise.\n+\t* emit-rtl.c (try_split): Likewise.\n+\t* predict.c (br_prob_note_reliable_p): Likewise.\n+\t(invert_br_probabilities, combine_predictions_for_insn): Likewise.\n+\t* reorg.c (mostly_true_jump): Likewise.\n+\t* config/bfin/bfin.c (cbranch_predicted_taken_p): Likewise.\n+\t* config/frv/frv.c (frv_print_operand_jump_hint): Likewise.\n+\t* config/i386/i386.c (ix86_print_operand): Likewise.\n+\t* config/ia64/ia64.c (ia64_print_operand): Likewise.\n+\t* config/mmix/mmix.c (mmix_print_operand): Likewise.\n+\t* config/rs6000/rs6000.c (output_cbranch): Likewise.\n+\t* config/s390/s390.c (s390_expand_tbegin): Likewise.\n+\t* config/sh/sh.c (sh_print_operand, sh_adjust_cost): Likewise.\n+\t* config/sparc/sparc.c (output_cbranch): Likewise.\n+\t* config/spu/spu.c (get_branch_target): Likewise.\n+\t* config/tilegx/tilegx.c (cbranch_predicted_p): Likewise.\n+\t* config/tilepro/tilepro.c (cbranch_predicted_p): Likewise.\n+\n 2013-09-23  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-cp.c (ipa_get_indirect_edge_target_1): Add sanity check"}, {"sha": "32f183775cdfd89a0624b175b770b3654084bbdb", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -908,7 +908,7 @@ asan_clear_shadow (rtx shadow_mem, HOST_WIDE_INT len)\n   emit_cmp_and_jump_insns (addr, end, LT, NULL_RTX, Pmode, true, top_label);\n   jump = get_last_insn ();\n   gcc_assert (JUMP_P (jump));\n-  add_reg_note (jump, REG_BR_PROB, GEN_INT (REG_BR_PROB_BASE * 80 / 100));\n+  add_int_reg_note (jump, REG_BR_PROB, REG_BR_PROB_BASE * 80 / 100);\n }\n \n /* Insert code to protect stack vars.  The prologue sequence should be emitted"}, {"sha": "a9ed5f14b17325df17d5a07d8d484c0dc405c795", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -542,7 +542,7 @@ compute_outgoing_frequencies (basic_block b)\n \n       if (note)\n \t{\n-\t  probability = INTVAL (XEXP (note, 0));\n+\t  probability = XINT (note, 0);\n \t  e = BRANCH_EDGE (b);\n \t  e->probability = probability;\n \t  e->count = apply_probability (b->count, probability);"}, {"sha": "c82e480ee3095b3f64e9091ab16fd6480228938e", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -1480,7 +1480,7 @@ force_nonfallthru_and_redirect (edge e, basic_block target, rtx jump_label)\n       note = find_reg_note (BB_END (e->src), REG_BR_PROB, NULL_RTX);\n       if (note)\n \t{\n-\t  int prob = INTVAL (XEXP (note, 0));\n+\t  int prob = XINT (note, 0);\n \n \t  b->probability = prob;\n           /* Update this to use GCOV_COMPUTE_SCALE.  */\n@@ -2207,9 +2207,9 @@ update_br_prob_note (basic_block bb)\n   if (!JUMP_P (BB_END (bb)))\n     return;\n   note = find_reg_note (BB_END (bb), REG_BR_PROB, NULL_RTX);\n-  if (!note || INTVAL (XEXP (note, 0)) == BRANCH_EDGE (bb)->probability)\n+  if (!note || XINT (note, 0) == BRANCH_EDGE (bb)->probability)\n     return;\n-  XEXP (note, 0) = GEN_INT (BRANCH_EDGE (bb)->probability);\n+  XINT (note, 0) = BRANCH_EDGE (bb)->probability;\n }\n \n /* Get the last insn associated with block BB (that includes barriers and\n@@ -2399,11 +2399,11 @@ rtl_verify_edges (void)\n \t  && EDGE_COUNT (bb->succs) >= 2\n \t  && any_condjump_p (BB_END (bb)))\n \t{\n-\t  if (INTVAL (XEXP (note, 0)) != BRANCH_EDGE (bb)->probability\n+\t  if (XINT (note, 0) != BRANCH_EDGE (bb)->probability\n \t      && profile_status != PROFILE_ABSENT)\n \t    {\n-\t      error (\"verify_flow_info: REG_BR_PROB does not match cfg %wi %i\",\n-\t\t     INTVAL (XEXP (note, 0)), BRANCH_EDGE (bb)->probability);\n+\t      error (\"verify_flow_info: REG_BR_PROB does not match cfg %i %i\",\n+\t\t     XINT (note, 0), BRANCH_EDGE (bb)->probability);\n \t      err = 1;\n \t    }\n \t}\n@@ -3104,7 +3104,7 @@ purge_dead_edges (basic_block bb)\n \n \t  b = BRANCH_EDGE (bb);\n \t  f = FALLTHRU_EDGE (bb);\n-\t  b->probability = INTVAL (XEXP (note, 0));\n+\t  b->probability = XINT (note, 0);\n \t  f->probability = REG_BR_PROB_BASE - b->probability;\n           /* Update these to use GCOV_COMPUTE_SCALE.  */\n \t  b->count = bb->count * b->probability / REG_BR_PROB_BASE;\n@@ -3735,7 +3735,7 @@ fixup_reorder_chain (void)\n \t\t  rtx note = find_reg_note (bb_end_insn, REG_BR_PROB, 0);\n \n \t\t  if (note\n-\t\t      && INTVAL (XEXP (note, 0)) < REG_BR_PROB_BASE / 2\n+\t\t      && XINT (note, 0) < REG_BR_PROB_BASE / 2\n \t\t      && invert_jump (bb_end_insn,\n \t\t\t\t      (e_fall->dest == EXIT_BLOCK_PTR\n \t\t\t\t       ? NULL_RTX"}, {"sha": "248a6eeeaa9d2409fc55b8d0a99fd7f7002b66ae", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -13677,7 +13677,7 @@ distribute_notes (rtx notes, rtx from_insn, rtx i3, rtx i2, rtx elim_i2,\n \t}\n \n       if (place2)\n-\tadd_reg_note (place2, REG_NOTE_KIND (note), XEXP (note, 0));\n+\tadd_shallow_copy_of_reg_note (place2, note);\n     }\n }\n \f"}, {"sha": "6f4fe36e0117835ca2e8ebe57fb17418717d95a2", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -7162,10 +7162,10 @@ aarch64_emit_store_exclusive (enum machine_mode mode, rtx bval,\n static void\n aarch64_emit_unlikely_jump (rtx insn)\n {\n-  rtx very_unlikely = GEN_INT (REG_BR_PROB_BASE / 100 - 1);\n+  int very_unlikely = REG_BR_PROB_BASE / 100 - 1;\n \n   insn = emit_jump_insn (insn);\n-  add_reg_note (insn, REG_BR_PROB, very_unlikely);\n+  add_int_reg_note (insn, REG_BR_PROB, very_unlikely);\n }\n \n /* Expand a compare and swap pattern.  */"}, {"sha": "095b8fc7305f91b15431b45fde280a509ca30fe0", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -4228,12 +4228,12 @@ alpha_expand_builtin_vector_binop (rtx (*gen) (rtx, rtx, rtx),\n static void\n emit_unlikely_jump (rtx cond, rtx label)\n {\n-  rtx very_unlikely = GEN_INT (REG_BR_PROB_BASE / 100 - 1);\n+  int very_unlikely = REG_BR_PROB_BASE / 100 - 1;\n   rtx x;\n \n   x = gen_rtx_IF_THEN_ELSE (VOIDmode, cond, label, pc_rtx);\n   x = emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, x));\n-  add_reg_note (x, REG_BR_PROB, very_unlikely);\n+  add_int_reg_note (x, REG_BR_PROB, very_unlikely);\n }\n \n /* A subroutine of the atomic operation splitters.  Emit a load-locked"}, {"sha": "cc3eec767aed80562553d2c53e5ef64c5f4e6af8", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -26103,13 +26103,14 @@ arm_unwind_emit (FILE * asm_out_file, rtx insn)\n \n   for (note = REG_NOTES (insn); note ; note = XEXP (note, 1))\n     {\n-      pat = XEXP (note, 0);\n       switch (REG_NOTE_KIND (note))\n \t{\n \tcase REG_FRAME_RELATED_EXPR:\n+\t  pat = XEXP (note, 0);\n \t  goto found;\n \n \tcase REG_CFA_REGISTER:\n+\t  pat = XEXP (note, 0);\n \t  if (pat == NULL)\n \t    {\n \t      pat = PATTERN (insn);\n@@ -27028,10 +27029,10 @@ arm_emit_store_exclusive (enum machine_mode mode, rtx bval, rtx rval,\n static void\n emit_unlikely_jump (rtx insn)\n {\n-  rtx very_unlikely = GEN_INT (REG_BR_PROB_BASE / 100 - 1);\n+  int very_unlikely = REG_BR_PROB_BASE / 100 - 1;\n \n   insn = emit_jump_insn (insn);\n-  add_reg_note (insn, REG_BR_PROB, very_unlikely);\n+  add_int_reg_note (insn, REG_BR_PROB, very_unlikely);\n }\n \n /* Expand a compare and swap pattern.  */"}, {"sha": "558f4c18bef0ccc01a8226967827546f672110f6", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -2438,7 +2438,7 @@ cbranch_predicted_taken_p (rtx insn)\n \n   if (x)\n     {\n-      int pred_val = INTVAL (XEXP (x, 0));\n+      int pred_val = XINT (x, 0);\n \n       return pred_val >= REG_BR_PROB_BASE / 2;\n     }"}, {"sha": "376a0bbe7a6b5950104dbc6c0e0b22e5ed84e4e2", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -2643,7 +2643,7 @@ frv_print_operand_jump_hint (rtx insn)\n   rtx note;\n   rtx labelref;\n   int ret;\n-  HOST_WIDE_INT prob = -1;\n+  int prob = -1;\n   enum { UNKNOWN, BACKWARD, FORWARD } jump_type = UNKNOWN;\n \n   gcc_assert (JUMP_P (insn));\n@@ -2669,7 +2669,7 @@ frv_print_operand_jump_hint (rtx insn)\n \n       else\n \t{\n-\t  prob = INTVAL (XEXP (note, 0));\n+\t  prob = XINT (note, 0);\n \t  ret = ((prob >= (REG_BR_PROB_BASE / 2))\n \t\t ? FRV_JUMP_LIKELY\n \t\t : FRV_JUMP_NOT_LIKELY);\n@@ -2690,10 +2690,10 @@ frv_print_operand_jump_hint (rtx insn)\n \t}\n \n       fprintf (stderr,\n-\t       \"%s: uid %ld, %s, probability = %ld, max prob. = %ld, hint = %d\\n\",\n+\t       \"%s: uid %ld, %s, probability = %d, max prob. = %d, hint = %d\\n\",\n \t       IDENTIFIER_POINTER (DECL_NAME (current_function_decl)),\n-\t       (long)INSN_UID (insn), direction, (long)prob,\n-\t       (long)REG_BR_PROB_BASE, ret);\n+\t       (long)INSN_UID (insn), direction, prob,\n+\t       REG_BR_PROB_BASE, ret);\n     }\n #endif\n "}, {"sha": "b4d40bc650c101f2484f7eb8d73224202bec2544", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -11511,8 +11511,8 @@ ix86_expand_split_stack_prologue (void)\n   JUMP_LABEL (jump_insn) = label;\n \n   /* Mark the jump as very likely to be taken.  */\n-  add_reg_note (jump_insn, REG_BR_PROB,\n-\t\tGEN_INT (REG_BR_PROB_BASE - REG_BR_PROB_BASE / 100));\n+  add_int_reg_note (jump_insn, REG_BR_PROB,\n+\t\t    REG_BR_PROB_BASE - REG_BR_PROB_BASE / 100);\n \n   if (split_stack_fn == NULL_RTX)\n     split_stack_fn = gen_rtx_SYMBOL_REF (Pmode, \"__morestack\");\n@@ -14808,7 +14808,7 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t    x = find_reg_note (current_output_insn, REG_BR_PROB, 0);\n \t    if (x)\n \t      {\n-\t\tint pred_val = INTVAL (XEXP (x, 0));\n+\t\tint pred_val = XINT (x, 0);\n \n \t\tif (pred_val < REG_BR_PROB_BASE * 45 / 100\n \t\t    || pred_val > REG_BR_PROB_BASE * 55 / 100)\n@@ -19454,7 +19454,7 @@ ix86_split_fp_branch (enum rtx_code code, rtx op1, rtx op2,\n \t\t       gen_rtx_IF_THEN_ELSE (VOIDmode,\n \t\t\t\t\t     condition, target1, target2)));\n   if (split_branch_probability >= 0)\n-    add_reg_note (i, REG_BR_PROB, GEN_INT (split_branch_probability));\n+    add_int_reg_note (i, REG_BR_PROB, split_branch_probability);\n }\n \n void\n@@ -21961,7 +21961,7 @@ predict_jump (int prob)\n {\n   rtx insn = get_last_insn ();\n   gcc_assert (JUMP_P (insn));\n-  add_reg_note (insn, REG_BR_PROB, GEN_INT (prob));\n+  add_int_reg_note (insn, REG_BR_PROB, prob);\n }\n \n /* Helper function for the string operations below.  Dest VARIABLE whether"}, {"sha": "58e95a3790b44b6851c84499b79a7e9d15774f49", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -1178,10 +1178,10 @@ i386_pe_seh_unwind_emit (FILE *asm_out_file, rtx insn)\n \n   for (note = REG_NOTES (insn); note ; note = XEXP (note, 1))\n     {\n-      pat = XEXP (note, 0);\n       switch (REG_NOTE_KIND (note))\n \t{\n \tcase REG_FRAME_RELATED_EXPR:\n+\t  pat = XEXP (note, 0);\n \t  goto found;\n \n \tcase REG_CFA_DEF_CFA:\n@@ -1195,6 +1195,7 @@ i386_pe_seh_unwind_emit (FILE *asm_out_file, rtx insn)\n \t  gcc_unreachable ();\n \n \tcase REG_CFA_ADJUST_CFA:\n+\t  pat = XEXP (note, 0);\n \t  if (pat == NULL)\n \t    {\n \t      pat = PATTERN (insn);\n@@ -1206,6 +1207,7 @@ i386_pe_seh_unwind_emit (FILE *asm_out_file, rtx insn)\n \t  break;\n \n \tcase REG_CFA_OFFSET:\n+\t  pat = XEXP (note, 0);\n \t  if (pat == NULL)\n \t    pat = single_set (insn);\n \t  seh_cfa_offset (asm_out_file, seh, pat);"}, {"sha": "273cd39065f249656498ab33193c660d4bcbbc20", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -5463,7 +5463,7 @@ ia64_print_operand (FILE * file, rtx x, int code)\n \tx = find_reg_note (current_output_insn, REG_BR_PROB, 0);\n \tif (x)\n \t  {\n-\t    int pred_val = INTVAL (XEXP (x, 0));\n+\t    int pred_val = XINT (x, 0);\n \n \t    /* Guess top and bottom 10% statically predicted.  */\n \t    if (pred_val < REG_BR_PROB_BASE / 50"}, {"sha": "34b4fea7503e549da48388aab3185e69bf93de9b", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -1531,7 +1531,7 @@ mmix_print_operand (FILE *stream, rtx x, int code)\n       if (TARGET_BRANCH_PREDICT)\n \t{\n \t  x = find_reg_note (current_output_insn, REG_BR_PROB, 0);\n-\t  if (x && INTVAL (XEXP (x, 0)) > REG_BR_PROB_BASE / 2)\n+\t  if (x && XINT (x, 0) > REG_BR_PROB_BASE / 2)\n \t    putc ('P', stream);\n \t}\n       return;"}, {"sha": "26fb05b1a66c44d092d57469bff1294cc0565259", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -17541,7 +17541,7 @@ output_cbranch (rtx op, const char *label, int reversed, rtx insn)\n   if (note != NULL_RTX)\n     {\n       /* PROB is the difference from 50%.  */\n-      int prob = INTVAL (XEXP (note, 0)) - REG_BR_PROB_BASE / 2;\n+      int prob = XINT (note, 0) - REG_BR_PROB_BASE / 2;\n \n       /* Only hint for highly probable/improbable branches on newer\n \t cpus as static prediction overrides processor dynamic\n@@ -18147,12 +18147,12 @@ rs6000_emit_minmax (rtx dest, enum rtx_code code, rtx op0, rtx op1)\n static void\n emit_unlikely_jump (rtx cond, rtx label)\n {\n-  rtx very_unlikely = GEN_INT (REG_BR_PROB_BASE / 100 - 1);\n+  int very_unlikely = REG_BR_PROB_BASE / 100 - 1;\n   rtx x;\n \n   x = gen_rtx_IF_THEN_ELSE (VOIDmode, cond, label, pc_rtx);\n   x = emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, x));\n-  add_reg_note (x, REG_BR_PROB, very_unlikely);\n+  add_int_reg_note (x, REG_BR_PROB, very_unlikely);\n }\n \n /* A subroutine of the atomic operation splitters.  Emit a load-locked"}, {"sha": "3bb70f48502369abbfac55915146e2e15f3758b1", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -9589,7 +9589,7 @@ s390_expand_tbegin (rtx dest, rtx tdb, rtx retry, bool clobber_fprs_p)\n   rtx retry_reg = gen_reg_rtx (SImode);\n   rtx retry_label = NULL_RTX;\n   rtx jump;\n-  rtx very_unlikely = GEN_INT (REG_BR_PROB_BASE / 100 - 1);\n+  int very_unlikely = REG_BR_PROB_BASE / 100 - 1;\n \n   if (retry != NULL_RTX)\n     {\n@@ -9612,7 +9612,7 @@ s390_expand_tbegin (rtx dest, rtx tdb, rtx retry, bool clobber_fprs_p)\n \n   JUMP_LABEL (jump) = abort_label;\n   LABEL_NUSES (abort_label) = 1;\n-  add_reg_note (jump, REG_BR_PROB, very_unlikely);\n+  add_int_reg_note (jump, REG_BR_PROB, very_unlikely);\n \n   /* Initialize CC return value.  */\n   emit_move_insn (dest, const0_rtx);\n@@ -9632,7 +9632,7 @@ s390_expand_tbegin (rtx dest, rtx tdb, rtx retry, bool clobber_fprs_p)\n \t\t\t       gen_rtx_REG (CCRAWmode, CC_REGNUM),\n \t\t\t       gen_rtx_CONST_INT (VOIDmode, CC1 | CC3)));\n       LABEL_NUSES (leave_label) = 2;\n-      add_reg_note (jump, REG_BR_PROB, very_unlikely);\n+      add_int_reg_note (jump, REG_BR_PROB, very_unlikely);\n \n       /* CC2 - transient failure. Perform retry with ppa.  */\n       emit_move_insn (count, retry);"}, {"sha": "e603e740cd0268b3c90e7841774c9eb812dd6989", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -1146,7 +1146,7 @@ sh_print_operand (FILE *stream, rtx x, int code)\n       {\n \trtx note = find_reg_note (current_output_insn, REG_BR_PROB, 0);\n \n-\tif (note && INTVAL (XEXP (note, 0)) * 2 < REG_BR_PROB_BASE)\n+\tif (note && XINT (note, 0) * 2 < REG_BR_PROB_BASE)\n \t  fputs (\"/u\", stream);\n \tbreak;\n       }\n@@ -2082,7 +2082,7 @@ expand_cbranchsi4 (rtx *operands, enum rtx_code comparison, int probability)\n \t\t\t\t\t  operands[1], operands[2])));\n   rtx jump = emit_jump_insn (branch_expander (operands[3]));\n   if (probability >= 0)\n-    add_reg_note (jump, REG_BR_PROB, GEN_INT (probability));\n+    add_int_reg_note (jump, REG_BR_PROB, probability);\n }\n \n /* ??? How should we distribute probabilities when more than one branch\n@@ -10741,8 +10741,7 @@ sh_adjust_cost (rtx insn, rtx link ATTRIBUTE_UNUSED, rtx dep_insn, int cost)\n \t    {\n \t      int orig_cost = cost;\n \t      rtx note = find_reg_note (insn, REG_BR_PROB, 0);\n-\t      rtx target = ((! note\n-\t\t\t     || INTVAL (XEXP (note, 0)) * 2 < REG_BR_PROB_BASE)\n+\t      rtx target = ((!note || XINT (note, 0) * 2 < REG_BR_PROB_BASE)\n \t\t\t    ? insn : JUMP_LABEL (insn));\n \t      /* On the likely path, the branch costs 1, on the unlikely path,\n \t\t it costs 3.  */"}, {"sha": "e9b2bcf5aac68da5d041fe75cc0446a750a2c164", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -7724,7 +7724,7 @@ output_cbranch (rtx op, rtx dest, int label, int reversed, int annul,\n       if (*labelno && insn && (note = find_reg_note (insn, REG_BR_PROB, NULL_RTX)))\n \t{\n \t  strcpy (p,\n-\t\t  ((INTVAL (XEXP (note, 0)) >= REG_BR_PROB_BASE / 2) ^ far)\n+\t\t  ((XINT (note, 0) >= REG_BR_PROB_BASE / 2) ^ far)\n \t\t  ? \",pt\" : \",pn\");\n \t  p += 3;\n \t  spaces -= 3;\n@@ -8195,7 +8195,7 @@ output_v9branch (rtx op, rtx dest, int reg, int label, int reversed,\n   if (insn && (note = find_reg_note (insn, REG_BR_PROB, NULL_RTX)))\n     {\n       strcpy (p,\n-\t      ((INTVAL (XEXP (note, 0)) >= REG_BR_PROB_BASE / 2) ^ far)\n+\t      ((XINT (note, 0) >= REG_BR_PROB_BASE / 2) ^ far)\n \t      ? \",pt\" : \",pn\");\n       p += 3;\n     }"}, {"sha": "c32e48a6fc2298a6d9e137feb378ba36d5223605", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -2197,7 +2197,7 @@ get_branch_target (rtx branch)\n \t    {\n \t      /* If the more probable case is not a fall through, then\n \t         try a branch hint.  */\n-\t      HOST_WIDE_INT prob = INTVAL (XEXP (note, 0));\n+\t      int prob = XINT (note, 0);\n \t      if (prob > (REG_BR_PROB_BASE * 6 / 10)\n \t\t  && GET_CODE (XEXP (src, 1)) != PC)\n \t\tlab = XEXP (src, 1);\n@@ -4342,7 +4342,7 @@ ea_load_store_inline (rtx mem, bool is_store, rtx ea_addr, rtx data_addr)\n \t\t\t\t\t\t\t    hit_ref, pc_rtx)));\n   /* Say that this branch is very likely to happen.  */\n   v = REG_BR_PROB_BASE - REG_BR_PROB_BASE / 100 - 1;\n-  add_reg_note (insn, REG_BR_PROB, GEN_INT (v));\n+  add_int_reg_note (insn, REG_BR_PROB, v);\n \n   ea_load_store (mem, is_store, ea_addr, data_addr);\n   cont_label = gen_label_rtx ();"}, {"sha": "35d38c625029e4818cb2d477c6aee9b4475f5b73", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -2529,7 +2529,7 @@ cbranch_predicted_p (rtx insn)\n \n   if (x)\n     {\n-      int pred_val = INTVAL (XEXP (x, 0));\n+      int pred_val = XINT (x, 0);\n \n       return pred_val >= REG_BR_PROB_BASE / 2;\n     }"}, {"sha": "35384ef16f074eacf2b28f08410c91895bd17cc3", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -2411,7 +2411,7 @@ cbranch_predicted_p (rtx insn)\n \n   if (x)\n     {\n-      int pred_val = INTVAL (XEXP (x, 0));\n+      int pred_val = XINT (x, 0);\n \n       return pred_val >= REG_BR_PROB_BASE / 2;\n     }"}, {"sha": "4b23de1ebe0fc926688bfc27d644c075e7266a2d", "filename": "gcc/cse.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -6068,9 +6068,12 @@ cse_process_notes_1 (rtx x, rtx object, bool *changed)\n       return x;\n \n     case EXPR_LIST:\n-    case INSN_LIST:\n       if (REG_NOTE_KIND (x) == REG_EQUAL)\n \tXEXP (x, 0) = cse_process_notes (XEXP (x, 0), NULL_RTX, changed);\n+      /* Fall through.  */\n+\n+    case INSN_LIST:\n+    case INT_LIST:\n       if (XEXP (x, 1))\n \tXEXP (x, 1) = cse_process_notes (XEXP (x, 1), NULL_RTX, changed);\n       return x;"}, {"sha": "84c0444ad9c44f49ca00557e0352152fb7272ded", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -3732,8 +3732,8 @@ Def-use and use-def chains are now preferred.\n \n @findex REG_NOTES\n @item REG_NOTES (@var{i})\n-A list (chain of @code{expr_list} and @code{insn_list} expressions)\n-giving miscellaneous information about the insn.  It is often\n+A list (chain of @code{expr_list}, @code{insn_list} and @code{int_list}\n+expressions) giving miscellaneous information about the insn.  It is often\n information pertaining to the registers used in this insn.\n @end table\n \n@@ -3752,10 +3752,10 @@ analysis pass adds a link to insns which store into registers values\n that are used for the first time in this insn.\n \n The @code{REG_NOTES} field of an insn is a chain similar to the\n-@code{LOG_LINKS} field but it includes @code{expr_list} expressions in\n-addition to @code{insn_list} expressions.  There are several kinds of\n-register notes, which are distinguished by the machine mode, which in a\n-register note is really understood as being an @code{enum reg_note}.\n+@code{LOG_LINKS} field but it includes @code{expr_list} and @code{int_list}\n+expressions in addition to @code{insn_list} expressions.  There are several\n+kinds of register notes, which are distinguished by the machine mode, which\n+in a register note is really understood as being an @code{enum reg_note}.\n The first operand @var{op} of the note is data whose meaning depends on\n the kind of note.\n \n@@ -3956,16 +3956,16 @@ This indicates an anti dependence (a write after read dependence).\n @end table\n \n These notes describe information gathered from gcov profile data.  They\n-are stored in the @code{REG_NOTES} field of an insn as an\n-@code{expr_list}.\n+are stored in the @code{REG_NOTES} field of an insn.\n \n @table @code\n @findex REG_BR_PROB\n @item REG_BR_PROB\n This is used to specify the ratio of branches to non-branches of a\n-branch insn according to the profile data.  The value is stored as a\n-value between 0 and REG_BR_PROB_BASE; larger values indicate a higher\n-probability that the branch will be taken.\n+branch insn according to the profile data.  The note is represented\n+as an @code{int_list} expression whose integer value is between 0 and\n+REG_BR_PROB_BASE.  Larger values indicate a higher probability that\n+the branch will be taken.\n \n @findex REG_BR_PRED\n @item REG_BR_PRED"}, {"sha": "a7ac1276b547551f39dd78c491adcb6fd9cadeed", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -3461,7 +3461,7 @@ try_split (rtx pat, rtx trial, int last)\n \n   if (any_condjump_p (trial)\n       && (note = find_reg_note (trial, REG_BR_PROB, 0)))\n-    split_branch_probability = INTVAL (XEXP (note, 0));\n+    split_branch_probability = XINT (note, 0);\n   probability = split_branch_probability;\n \n   seq = split_insns (pat, trial);\n@@ -3512,7 +3512,7 @@ try_split (rtx pat, rtx trial, int last)\n \t\t is responsible for this step using\n \t\t split_branch_probability variable.  */\n \t      gcc_assert (njumps == 1);\n-\t      add_reg_note (insn, REG_BR_PROB, GEN_INT (probability));\n+\t      add_int_reg_note (insn, REG_BR_PROB, probability);\n \t    }\n \t}\n     }\n@@ -5968,7 +5968,7 @@ emit_copy_of_insn_after (rtx insn, rtx after)\n \t  add_reg_note (new_rtx, REG_NOTE_KIND (link),\n \t\t\tcopy_insn_1 (XEXP (link, 0)));\n \telse\n-\t  add_reg_note (new_rtx, REG_NOTE_KIND (link), XEXP (link, 0));\n+\t  add_shallow_copy_of_reg_note (new_rtx, link);\n       }\n \n   INSN_CODE (new_rtx) = INSN_CODE (insn);"}, {"sha": "747fab9cabc45c54479615a20979b29707b48187", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -91,7 +91,7 @@ static rtx last_active_insn (basic_block, int);\n static rtx find_active_insn_before (basic_block, rtx);\n static rtx find_active_insn_after (basic_block, rtx);\n static basic_block block_fallthru (basic_block);\n-static int cond_exec_process_insns (ce_if_block_t *, rtx, rtx, rtx, rtx, int);\n+static int cond_exec_process_insns (ce_if_block_t *, rtx, rtx, rtx, int, int);\n static rtx cond_exec_get_condition (rtx);\n static rtx noce_get_condition (rtx, rtx *, bool);\n static int noce_operand_ok (const_rtx);\n@@ -316,7 +316,7 @@ cond_exec_process_insns (ce_if_block_t *ce_info ATTRIBUTE_UNUSED,\n \t\t\t /* if block information */rtx start,\n \t\t\t /* first insn to look at */rtx end,\n \t\t\t /* last insn to look at */rtx test,\n-\t\t\t /* conditional execution test */rtx prob_val,\n+\t\t\t /* conditional execution test */int prob_val,\n \t\t\t /* probability of branch taken. */int mod_ok)\n {\n   int must_be_last = FALSE;\n@@ -387,10 +387,10 @@ cond_exec_process_insns (ce_if_block_t *ce_info ATTRIBUTE_UNUSED,\n \n       validate_change (insn, &PATTERN (insn), pattern, 1);\n \n-      if (CALL_P (insn) && prob_val)\n+      if (CALL_P (insn) && prob_val >= 0)\n \tvalidate_change (insn, &REG_NOTES (insn),\n-\t\t\t alloc_EXPR_LIST (REG_BR_PROB, prob_val,\n-\t\t\t\t\t  REG_NOTES (insn)), 1);\n+\t\t\t gen_rtx_INT_LIST ((enum machine_mode) REG_BR_PROB,\n+\t\t\t\t\t   prob_val, REG_NOTES (insn)), 1);\n \n     insn_done:\n       if (insn == end)\n@@ -449,14 +449,15 @@ cond_exec_process_if_block (ce_if_block_t * ce_info,\n   int then_mod_ok;\t\t/* whether conditional mods are ok in THEN */\n   rtx true_expr;\t\t/* test for else block insns */\n   rtx false_expr;\t\t/* test for then block insns */\n-  rtx true_prob_val;\t\t/* probability of else block */\n-  rtx false_prob_val;\t\t/* probability of then block */\n+  int true_prob_val;\t\t/* probability of else block */\n+  int false_prob_val;\t\t/* probability of then block */\n   rtx then_last_head = NULL_RTX;\t/* Last match at the head of THEN */\n   rtx else_last_head = NULL_RTX;\t/* Last match at the head of ELSE */\n   rtx then_first_tail = NULL_RTX;\t/* First match at the tail of THEN */\n   rtx else_first_tail = NULL_RTX;\t/* First match at the tail of ELSE */\n   int then_n_insns, else_n_insns, n_insns;\n   enum rtx_code false_code;\n+  rtx note;\n \n   /* If test is comprised of && or || elements, and we've failed at handling\n      all of them together, just use the last test if it is the special case of\n@@ -588,14 +589,17 @@ cond_exec_process_if_block (ce_if_block_t * ce_info,\n     goto fail;\n #endif\n \n-  true_prob_val = find_reg_note (BB_END (test_bb), REG_BR_PROB, NULL_RTX);\n-  if (true_prob_val)\n+  note = find_reg_note (BB_END (test_bb), REG_BR_PROB, NULL_RTX);\n+  if (note)\n     {\n-      true_prob_val = XEXP (true_prob_val, 0);\n-      false_prob_val = GEN_INT (REG_BR_PROB_BASE - INTVAL (true_prob_val));\n+      true_prob_val = XINT (note, 0);\n+      false_prob_val = REG_BR_PROB_BASE - true_prob_val;\n     }\n   else\n-    false_prob_val = NULL_RTX;\n+    {\n+      true_prob_val = -1;\n+      false_prob_val = -1;\n+    }\n \n   /* If we have && or || tests, do them here.  These tests are in the adjacent\n      blocks after the first block containing the test.  */\n@@ -4113,15 +4117,14 @@ dead_or_predicable (basic_block test_bb, basic_block merge_bb,\n \t All that's left is making sure the insns involved can actually\n \t be predicated.  */\n \n-      rtx cond, prob_val;\n+      rtx cond;\n \n       cond = cond_exec_get_condition (jump);\n       if (! cond)\n \treturn FALSE;\n \n-      prob_val = find_reg_note (jump, REG_BR_PROB, NULL_RTX);\n-      if (prob_val)\n-\tprob_val = XEXP (prob_val, 0);\n+      rtx note = find_reg_note (jump, REG_BR_PROB, NULL_RTX);\n+      int prob_val = (note ? XINT (note, 0) : -1);\n \n       if (reversep)\n \t{\n@@ -4130,8 +4133,8 @@ dead_or_predicable (basic_block test_bb, basic_block merge_bb,\n \t    return FALSE;\n \t  cond = gen_rtx_fmt_ee (rev, GET_MODE (cond), XEXP (cond, 0),\n \t\t\t         XEXP (cond, 1));\n-\t  if (prob_val)\n-\t    prob_val = GEN_INT (REG_BR_PROB_BASE - INTVAL (prob_val));\n+\t  if (prob_val >= 0)\n+\t    prob_val = REG_BR_PROB_BASE - prob_val;\n \t}\n \n       if (cond_exec_process_insns (NULL, head, end, cond, prob_val, 0)"}, {"sha": "3b86f841fc98431e99ab55fd02fc78b64366f739", "filename": "gcc/loop-doloop.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Floop-doloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Floop-doloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-doloop.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -381,7 +381,7 @@ add_test (rtx cond, edge *e, basic_block dest)\n   JUMP_LABEL (jump) = label;\n \n   /* The jump is supposed to handle an unlikely special case.  */\n-  add_reg_note (jump, REG_BR_PROB, const0_rtx);\n+  add_int_reg_note (jump, REG_BR_PROB, 0);\n \n   LABEL_NUSES (label)++;\n \n@@ -594,8 +594,7 @@ doloop_modify (struct loop *loop, struct niter_desc *desc,\n   if (true_prob_val)\n     {\n       /* Seems safer to use the branch probability.  */\n-      add_reg_note (jump_insn, REG_BR_PROB,\n-\t\t    GEN_INT (desc->in_edge->probability));\n+      add_int_reg_note (jump_insn, REG_BR_PROB, desc->in_edge->probability);\n     }\n }\n "}, {"sha": "23057d8694b3b0ef75244e3a2c475e10e867764c", "filename": "gcc/loop-unswitch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Floop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Floop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unswitch.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -126,7 +126,7 @@ compare_and_jump_seq (rtx op0, rtx op1, enum rtx_code comp, rtx label, int prob,\n       JUMP_LABEL (jump) = label;\n       LABEL_NUSES (label)++;\n     }\n-  add_reg_note (jump, REG_BR_PROB, GEN_INT (prob));\n+  add_int_reg_note (jump, REG_BR_PROB, prob);\n \n   seq = get_insns ();\n   end_sequence ();"}, {"sha": "3238885c1879d297bd02773b2929943e11fa6716", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -4288,7 +4288,7 @@ emit_cmp_and_jump_insn_1 (rtx test, enum machine_mode mode, rtx label, int prob)\n       && JUMP_P (insn)\n       && any_condjump_p (insn)\n       && !find_reg_note (insn, REG_BR_PROB, 0))\n-    add_reg_note (insn, REG_BR_PROB, GEN_INT (prob));\n+    add_int_reg_note (insn, REG_BR_PROB, prob);\n }\n \n /* Generate code to compare X with Y so that the condition codes are"}, {"sha": "aa66ecdbbdbac85fdf0c82a543b6f55155222b62", "filename": "gcc/predict.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -528,7 +528,7 @@ bool\n br_prob_note_reliable_p (const_rtx note)\n {\n   gcc_assert (REG_NOTE_KIND (note) == REG_BR_PROB);\n-  return probability_reliable_p (INTVAL (XEXP (note, 0)));\n+  return probability_reliable_p (XINT (note, 0));\n }\n \n static void\n@@ -682,7 +682,7 @@ invert_br_probabilities (rtx insn)\n \n   for (note = REG_NOTES (insn); note; note = XEXP (note, 1))\n     if (REG_NOTE_KIND (note) == REG_BR_PROB)\n-      XEXP (note, 0) = GEN_INT (REG_BR_PROB_BASE - INTVAL (XEXP (note, 0)));\n+      XINT (note, 0) = REG_BR_PROB_BASE - XINT (note, 0);\n     else if (REG_NOTE_KIND (note) == REG_BR_PRED)\n       XEXP (XEXP (note, 0), 1)\n \t= GEN_INT (REG_BR_PROB_BASE - INTVAL (XEXP (XEXP (note, 0), 1)));\n@@ -836,7 +836,7 @@ combine_predictions_for_insn (rtx insn, basic_block bb)\n \n   if (!prob_note)\n     {\n-      add_reg_note (insn, REG_BR_PROB, GEN_INT (combined_probability));\n+      add_int_reg_note (insn, REG_BR_PROB, combined_probability);\n \n       /* Save the prediction into CFG in case we are seeing non-degenerated\n \t conditional jump.  */\n@@ -849,7 +849,7 @@ combine_predictions_for_insn (rtx insn, basic_block bb)\n     }\n   else if (!single_succ_p (bb))\n     {\n-      int prob = INTVAL (XEXP (prob_note, 0));\n+      int prob = XINT (prob_note, 0);\n \n       BRANCH_EDGE (bb)->probability = prob;\n       FALLTHRU_EDGE (bb)->probability = REG_BR_PROB_BASE - prob;"}, {"sha": "a1ba0dcc71eb1ec4e40502ba7a600bc13f3979db", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -150,7 +150,8 @@ print_rtx (const_rtx in_rtx)\n \n       /* Print REG_NOTE names for EXPR_LIST and INSN_LIST.  */\n       if ((GET_CODE (in_rtx) == EXPR_LIST\n-\t   || GET_CODE (in_rtx) == INSN_LIST)\n+\t   || GET_CODE (in_rtx) == INSN_LIST\n+\t   || GET_CODE (in_rtx) == INT_LIST)\n \t  && (int)GET_MODE (in_rtx) < REG_NOTE_MAX)\n \tfprintf (outfile, \":%s\",\n \t\t GET_REG_NOTE_NAME (GET_MODE (in_rtx)));"}, {"sha": "fd7e337c2d68c947956d9ff31704b0dfba4f481b", "filename": "gcc/reg-notes.def", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Freg-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Freg-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-notes.def?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -18,9 +18,9 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n /* This file defines all the codes that may appear on individual\n-   EXPR_LIST rtxes in the REG_NOTES chain of an insn.  The codes are\n-   stored in the mode field of the EXPR_LIST.  Source files define\n-   DEF_REG_NOTE appropriately before including this file.  */\n+   EXPR_LIST, INSN_LIST and INT_LIST rtxes in the REG_NOTES chain of an insn.\n+   The codes are stored in the mode field of the rtx.  Source files\n+   define DEF_REG_NOTE appropriately before including this file.  */\n \n /* Shorthand.  */\n #define REG_NOTE(NAME) DEF_REG_NOTE (REG_##NAME)\n@@ -94,9 +94,9 @@ REG_NOTE (DEP_ANTI)\n REG_NOTE (DEP_CONTROL)\n \n /* REG_BR_PROB is attached to JUMP_INSNs and CALL_INSNs.  It has an\n-   integer value.  For jumps, it is the probability that this is a\n-   taken branch.  For calls, it is the probability that this call\n-   won't return.  */\n+   integer value (in an INT_LIST).  For jumps, it is the probability\n+   that this is a taken branch.  For calls, it is the probability that\n+   this call won't return.  */\n REG_NOTE (BR_PROB)\n \n /* Attached to a call insn; indicates that the call is malloc-like and"}, {"sha": "69c05b62ad4d3009b9b4f486a8866317f6b78f92", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -2058,6 +2058,8 @@ subst_asm_stack_regs (rtx insn, stack_ptr regstack)\n   n_notes = 0;\n   for (note = REG_NOTES (insn); note; note = XEXP (note, 1))\n     {\n+      if (GET_CODE (note) != EXPR_LIST)\n+\tcontinue;\n       rtx reg = XEXP (note, 0);\n       rtx *loc = & XEXP (note, 0);\n "}, {"sha": "c8686d36aec726a3571cf039cea4128216ee793f", "filename": "gcc/regmove.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -652,7 +652,7 @@ copy_src_to_dest (rtx insn, rtx src, rtx dest)\n       for (link = REG_NOTES (insn); link != NULL_RTX; link = next)\n \t{\n \t  next = XEXP (link, 1);\n-\t  if (XEXP (link, 0) == src)\n+\t  if (GET_CODE (link) == EXPR_LIST && XEXP (link, 0) == src)\n \t    {\n \t      *p_move_notes = link;\n \t      p_move_notes = &XEXP (link, 1);"}, {"sha": "e65cbf7e54b18264965efacfa25ecaafc82d8e7e", "filename": "gcc/reorg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -876,7 +876,7 @@ mostly_true_jump (rtx jump_insn)\n   rtx note = find_reg_note (jump_insn, REG_BR_PROB, 0);\n   if (note)\n     {\n-      int prob = INTVAL (XEXP (note, 0));\n+      int prob = XINT (note, 0);\n \n       if (prob >= REG_BR_PROB_BASE * 9 / 10)\n \treturn 2;"}, {"sha": "15a997b8c25d6417a084dde8d15f49863a287aac", "filename": "gcc/rtl.def", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -95,13 +95,16 @@ DEF_RTL_EXPR(DEBUG_EXPR, \"debug_expr\", \"0\", RTX_OBJ)\n    Expressions used in constructing lists.\n    --------------------------------------------------------------------- */\n \n-/* a linked list of expressions */\n+/* A linked list of expressions.  */\n DEF_RTL_EXPR(EXPR_LIST, \"expr_list\", \"ee\", RTX_EXTRA)\n \n-/* a linked list of instructions.\n+/* A linked list of instructions.\n    The insns are represented in print by their uids.  */\n DEF_RTL_EXPR(INSN_LIST, \"insn_list\", \"ue\", RTX_EXTRA)\n \n+/* A linked list of integers.  */\n+DEF_RTL_EXPR(INT_LIST, \"int_list\", \"ie\", RTX_EXTRA)\n+\n /* SEQUENCE is used in late passes of the compiler to group insns for\n    one reason or another.\n "}, {"sha": "f7e5cffa08d285d35eeba020517f5e20d75d59bd", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -2055,6 +2055,8 @@ extern int find_reg_fusage (const_rtx, enum rtx_code, const_rtx);\n extern int find_regno_fusage (const_rtx, enum rtx_code, unsigned int);\n extern rtx alloc_reg_note (enum reg_note, rtx, rtx);\n extern void add_reg_note (rtx, enum reg_note, rtx);\n+extern void add_int_reg_note (rtx, enum reg_note, int);\n+extern void add_shallow_copy_of_reg_note (rtx, rtx);\n extern void remove_note (rtx, const_rtx);\n extern void remove_reg_equal_equiv_notes (rtx);\n extern void remove_reg_equal_equiv_notes_for_regno (unsigned int);"}, {"sha": "554a44c4d9c0be7c08bfc54853773d57d22d0738", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -1923,6 +1923,14 @@ find_regno_fusage (const_rtx insn, enum rtx_code code, unsigned int regno)\n }\n \n \f\n+/* Return true if KIND is an integer REG_NOTE.  */\n+\n+static bool\n+int_reg_note_p (enum reg_note kind)\n+{\n+  return kind == REG_BR_PROB;\n+}\n+\n /* Allocate a register note with kind KIND and datum DATUM.  LIST is\n    stored as the pointer to the next register note.  */\n \n@@ -1931,6 +1939,7 @@ alloc_reg_note (enum reg_note kind, rtx datum, rtx list)\n {\n   rtx note;\n \n+  gcc_checking_assert (!int_reg_note_p (kind));\n   switch (kind)\n     {\n     case REG_CC_SETTER:\n@@ -1961,6 +1970,27 @@ add_reg_note (rtx insn, enum reg_note kind, rtx datum)\n   REG_NOTES (insn) = alloc_reg_note (kind, datum, REG_NOTES (insn));\n }\n \n+/* Add an integer register note with kind KIND and datum DATUM to INSN.  */\n+\n+void\n+add_int_reg_note (rtx insn, enum reg_note kind, int datum)\n+{\n+  gcc_checking_assert (int_reg_note_p (kind));\n+  REG_NOTES (insn) = gen_rtx_INT_LIST ((enum machine_mode) kind,\n+\t\t\t\t       datum, REG_NOTES (insn));\n+}\n+\n+/* Add a register note like NOTE to INSN.  */\n+\n+void\n+add_shallow_copy_of_reg_note (rtx insn, rtx note)\n+{\n+  if (GET_CODE (note) == INT_LIST)\n+    add_int_reg_note (insn, REG_NOTE_KIND (note), XINT (note, 0));\n+  else\n+    add_reg_note (insn, REG_NOTE_KIND (note), XEXP (note, 0));\n+}\n+\n /* Remove register note NOTE from the REG_NOTES of INSN.  */\n \n void"}, {"sha": "a965c4d54d65cb98236b0149f9bc1e1d3ca2563f", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5af9ddd011d07b38554d4f794470082ce5b13e6/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=e5af9ddd011d07b38554d4f794470082ce5b13e6", "patch": "@@ -751,7 +751,10 @@ print_insn_with_notes (pretty_printer *pp, const_rtx x)\n       {\n \tpp_printf (pp, \"%s      %s \", print_rtx_head,\n \t\t   GET_REG_NOTE_NAME (REG_NOTE_KIND (note)));\n-\tprint_pattern (pp, XEXP (note, 0), 1);\n+\tif (GET_CODE (note) == INT_LIST)\n+\t  pp_printf (pp, \"%d\", XINT (note, 0));\n+\telse\n+\t  print_pattern (pp, XEXP (note, 0), 1);\n \tpp_newline (pp);\n       }\n }"}]}