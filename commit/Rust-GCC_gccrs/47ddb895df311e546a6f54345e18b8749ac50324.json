{"sha": "47ddb895df311e546a6f54345e18b8749ac50324", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdkZGI4OTVkZjMxMWU1NDZhNmY1NDM0NWUxOGI4NzQ5YWM1MDMyNA==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2020-05-15T21:46:08Z"}, "committer": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2020-06-21T18:14:46Z"}, "message": "aix: Add GCC64 configuration and FAT target libraries.\n\nThis patch adds the ability to configure GCC on AIX to build as a\n64 bit application and to build target libraries \"FAT\" libraries in both\n32 bit and 64 bit mode.\n\nThe patch adds makefile fragment hooks to target libraries that allows\nthem to include target-specific rules.  The target specific rules for\nAIX place both 32 bit and 64 bit objects and shared objects\nin archives at the top-level, not multilib subdirectories.  The\nmultilibs are built in subdirectories, but must be combined during the\nlast parts of the target library build process.  Because of the way\nthat GCC bootstrap works, the libraries must be combined during the\nmultiple stages of GCC bootstrap, not solely when installed in the\nfinal destination, so the libraries are correct at the end of\neach target library build stage, not solely an install recipe.\n\ngcc/ChangeLog\n\n2020-06-21  David Edelsohn  <dje.gcc@gmail.com>\n\n\t* config.gcc: Use t-aix64, biarch64 and default64 for cpu_is_64bit.\n\t* config/rs6000/aix72.h (ASM_SPEC): Remove aix64 option.\n\t(ASM_SPEC32): New.\n\t(ASM_SPEC64): New.\n\t(ASM_CPU_SPEC): Remove vsx and altivec options.\n\t(CPP_SPEC_COMMON): Rename from CPP_SPEC.\n\t(CPP_SPEC32): New.\n\t(CPP_SPEC64): New.\n\t(CPLUSPLUS_CPP_SPEC): Rename to CPLUSPLUS_CPP_SPEC_COMMON..\n\t(TARGET_DEFAULT): Only define if not BIARCH.\n\t(LIB_SPEC_COMMON): Rename from LIB_SPEC.\n\t(LIB_SPEC32): New.\n\t(LIB_SPEC64): New.\n\t(LINK_SPEC_COMMON): Rename from LINK_SPEC.\n\t(LINK_SPEC32): New.\n\t(LINK_SPEC64): New.\n\t(STARTFILE_SPEC): Add 64 bit version of crtcxa and crtdbase.\n\t(ASM_SPEC): Define 32 and 64 bit alternatives using DEFAULT_ARCH64_P.\n\t(CPP_SPEC): Same.\n\t(CPLUSPLUS_CPP_SPEC): Same.\n\t(LIB_SPEC): Same.\n\t(LINK_SPEC): Same.\n\t(SUBTARGET_EXTRA_SPECS): Add new 32/64 specs.\n\t* config/rs6000/defaultaix64.h: New file.\n\t* config/rs6000/t-aix64: New file.\n\nlibgcc/ChangeLog\n\n2020-06-21  David Edelsohn  <dje.gcc@gmail.com>\n\n\t* config.host (extra_parts): Add crtcxa_64 and crtdbase_64.\n\t* config/rs6000/t-aix-cxa: Explicitly compile 32 bit with -maix32\n\tand 64 bit with -maix64.\n\t* config/rs6000/t-slibgcc-aix: Remove extra @multilib_dir@ level.\n\tBuild and install AIX-style FAT libraries.\n\nlibgomp/ChangeLog\n\n2020-06-21  David Edelsohn  <dje.gcc@gmail.com>\n\n\t* Makefile.am (tmake_file): Build and install AIX-style FAT libraries.\n\t* Makefile.in: Regenerate\n\t* configure.ac (tmake_file): Substitute.\n\t* configure: Regenerate.\n\t* configure.tgt (powerpc-ibm-aix*): Define tmake_file.\n\t* config/t-aix: New file.\n\nlibstdc++-v3/ChangeLog\n\n2020-06-21  David Edelsohn  <dje.gcc@gmail.com>\n\n\t* Makefile.am (tmake_file): Build and install AIX-style FAT libraries.\n\t* Makefile.in: Regenerate.\n\t* configure.ac (tmake_file): Substitute.\n\t* configure: Regenerate.\n\t* configure.host (aix*): Define tmake_file.\n\t* config/os/aix/t-aix: New file.\n\nlibatomic/ChangeLog\n\n2020-06-21  David Edelsohn  <dje.gcc@gmail.com>\n\n\t* Makefile.am (tmake_file): Build and install AIX-style FAT libraries.\n\t* Makefile.in: Regenerate.\n\t* configure.ac (tmake_file): Substitute.\n\t* configure: Regenerate.\n\t* configure.tgt (powerpc-ibm-aix*): Define tmake_file.\n\t* config/t-aix: New file.\n\nlibgfortran/ChangeLog\n\n2020-06-21  David Edelsohn  <dje.gcc@gmail.com>\n\n\t* Makefile.am (tmake_file): Build and install AIX-style FAT libraries.\n\t* Makefile.in: Regenerate.\n\t* configure.ac (tmake_file): Substitute.\n\t* configure: Regenerate.\n\t* configure.host: Add system configury stanza. Define tmake_file.\n\t* config/t-aix: New file.", "tree": {"sha": "0b30e4df51b10fe25ab50b0119daeebd2c99ac6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b30e4df51b10fe25ab50b0119daeebd2c99ac6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47ddb895df311e546a6f54345e18b8749ac50324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ddb895df311e546a6f54345e18b8749ac50324", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47ddb895df311e546a6f54345e18b8749ac50324", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ddb895df311e546a6f54345e18b8749ac50324/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ee2640bfdc62f835ec9740278f948034bc7d9f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ee2640bfdc62f835ec9740278f948034bc7d9f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ee2640bfdc62f835ec9740278f948034bc7d9f1"}], "stats": {"total": 500, "additions": 425, "deletions": 75}, "files": [{"sha": "365263a0f46282c822ad404cd5173d95a2a277ef", "filename": "gcc/config.gcc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -3040,8 +3040,12 @@ rs6000-ibm-aix7.1.* | powerpc-ibm-aix7.1.*)\n \tdefault_use_cxa_atexit=yes\n \t;;\n rs6000-ibm-aix[789].* | powerpc-ibm-aix[789].*)\n-\ttm_file=\"${tm_file} rs6000/aix.h rs6000/aix72.h rs6000/xcoff.h rs6000/aix-stdint.h\"\n \ttmake_file=\"rs6000/t-aix52 t-slibgcc\"\n+\tif test x$cpu_is_64bit = xyes; then\n+\t    tm_file=\"${tm_file} rs6000/biarch64.h rs6000/defaultaix64.h\"\n+\t    tmake_file=\"rs6000/t-aix64 t-slibgcc\"\n+\tfi\n+\ttm_file=\"${tm_file} rs6000/aix.h rs6000/aix72.h rs6000/xcoff.h rs6000/aix-stdint.h\"\n \textra_options=\"${extra_options} rs6000/aix64.opt\"\n \tuse_collect2=yes\n \tthread_file='aix'"}, {"sha": "b0262afb2602e2a3f5620252c31f17196ba4b68a", "filename": "gcc/config/rs6000/aix72.h", "status": "modified", "additions": 68, "deletions": 21, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/gcc%2Fconfig%2Frs6000%2Faix72.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/gcc%2Fconfig%2Frs6000%2Faix72.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix72.h?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -64,8 +64,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \n-#undef ASM_SPEC\n-#define ASM_SPEC \"-u %{maix64:-a64} %(asm_cpu)\"\n+#define ASM_SPEC32 \"-a32\"\n+#define ASM_SPEC64 \"-a64\"\n+#define ASM_SPEC_COMMON \"-u %(asm_cpu)\"\n \n /* Common ASM definitions used by ASM_SPEC amongst the various targets for\n    handling -mcpu=xxx switches.  There is a parallel list in driver-rs6000.c to\n@@ -91,10 +92,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   mcpu=620: -m620; \\\n   mcpu=630: -m620; \\\n   mcpu=970|mcpu=G5: -m970; \\\n-  !mcpu*: %{mvsx: -mpwr6; \\\n-\t    maltivec: -m970; \\\n-\t    maix64|mpowerpc64: -mppc64; \\\n-\t    : %(asm_default)}} \\\n+  !mcpu*: %(asm_default)} \\\n -many\"\n \n #undef\tASM_DEFAULT_SPEC\n@@ -115,28 +113,28 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }                                \\\n   while (0)\n \n-#undef CPP_SPEC\n-#define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\t\\\n+#define CPP_SPEC32 \"\"\n+#define CPP_SPEC64 \"-D__64BIT__\"\n+#define CPP_SPEC_COMMON \"%{posix: -D_POSIX_SOURCE} \\\n   %{ansi: -D_ANSI_C_SOURCE}\t\t\t\\\n-  %{maix64: -D__64BIT__}\t\t\t\\\n   %{mpe: -I%R/usr/lpp/ppe.poe/include}\t\t\\\n   %{pthread: -D_THREAD_SAFE}\"\n \n /* The GNU C++ standard library requires that these macros be \n    defined.  Synchronize with libstdc++ os_defines.h.  */\n-#undef CPLUSPLUS_CPP_SPEC                       \n-#define CPLUSPLUS_CPP_SPEC\t\t\t\\\n+#define CPLUSPLUS_CPP_SPEC_COMMON\t\t\\\n   \"-D_ALL_SOURCE -D__COMPATMATH__\t\t\\\n-   %{maix64: -D__64BIT__}\t\t\t\\\n    %{mpe: -I%R/usr/lpp/ppe.poe/include}\t\t\\\n    %{pthread: -D_THREAD_SAFE}\"\n \n #define RS6000_CPU(NAME, CPU, FLAGS)\n #include \"rs6000-cpus.def\"\n #undef RS6000_CPU\n \n+#ifndef RS6000_BI_ARCH\n #undef  TARGET_DEFAULT\n #define TARGET_DEFAULT ISA_2_6_MASKS_EMBEDDED\n+#endif\n \n #undef  PROCESSOR_DEFAULT\n #define PROCESSOR_DEFAULT PROCESSOR_POWER7\n@@ -155,29 +153,78 @@ do {\t\t\t\t\t\t\t\t\t\\\n    the target makefile fragment or if none of the options listed in\n    `MULTILIB_OPTIONS' are set by default.  *Note Target Fragment::.  */\n \n-#undef\tMULTILIB_DEFAULTS\n+#undef MULTILIB_DEFAULTS\n \n-#undef LIB_SPEC\n-#define LIB_SPEC \"%{pg:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n+#define DEFAULT_ARCH64_P (TARGET_DEFAULT & MASK_64BIT)\n+\n+#define LIB_SPEC32 \"%{!shared:%{g*:-lg}}\"\n+#define LIB_SPEC64 \"\"\n+#define LIB_SPEC_COMMON \"%{pg:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n    %{p:-L%R/lib/profiled -L%R/usr/lib/profiled}\\\n-   %{!maix64:%{!shared:%{g*:-lg}}}\\\n    %{fprofile-arcs|fprofile-generate*|coverage:-lpthreads}\\\n    %{mpe:-L%R/usr/lpp/ppe.poe/lib -lmpi -lvtd}\\\n    %{mlong-double-128:-lc128}\\\n    %{pthread:-lpthreads} -lc\"\n \n-#undef LINK_SPEC\n-#define LINK_SPEC \"-bpT:0x10000000 -bpD:0x20000000 %{!r:-btextro}\\\n+#define LINK_SPEC32 \"%{!shared:%{g*: %(link_libg) }} -b32\"\n+#define LINK_SPEC64 \"-b64\"\n+#define LINK_SPEC_COMMON \"-bpT:0x10000000 -bpD:0x20000000 %{!r:-btextro}\\\n    %{static:-bnso %(link_syscalls) } %{shared:-bM:SRE %{!e:-bnoentry}}\\\n-   %{!maix64:%{!shared:%{g*: %(link_libg) }}} %{maix64:-b64}\\\n-   %{mpe:-binitfini:poe_remote_main}\"\n+   %{mpe:-binitfini:poe_remote_main} \"\n \n #undef STARTFILE_SPEC\n+#if DEFAULT_ARCH64_P\n+#define STARTFILE_SPEC \"%{!shared:\\\n+   %{!maix32:%{pg:gcrt0_64%O%s;:%{p:mcrt0_64%O%s;:crt0_64%O%s}};:\\\n+     %{pthread:%{pg:gcrt0_r%O%s;:%{p:mcrt0_r%O%s;:crt0_r%O%s}};:\\\n+       %{pg:gcrt0%O%s;:%{p:mcrt0%O%s;:crt0%O%s}}}}}\\\n+   %{!maix32:%{shared:crtcxa_64_s%O%s;:crtcxa_64%O%s} crtdbase_64%O%s;:\\\n+     %{shared:crtcxa_s%O%s;:crtcxa%O%s} crtdbase%O%s}\"\n+#else\n #define STARTFILE_SPEC \"%{!shared:\\\n    %{maix64:%{pg:gcrt0_64%O%s;:%{p:mcrt0_64%O%s;:crt0_64%O%s}};:\\\n      %{pthread:%{pg:gcrt0_r%O%s;:%{p:mcrt0_r%O%s;:crt0_r%O%s}};:\\\n        %{pg:gcrt0%O%s;:%{p:mcrt0%O%s;:crt0%O%s}}}}}\\\n-   %{shared:crtcxa_s%O%s;:crtcxa%O%s} crtdbase%O%s\"\n+   %{maix64:%{shared:crtcxa_64_s%O%s;:crtcxa_64%O%s} crtdbase_64%O%s;:\\\n+     %{shared:crtcxa_s%O%s;:crtcxa%O%s} crtdbase%O%s}\"\n+#endif\n+\n+\n+#undef ASM_SPEC\n+#undef CPP_SPEC\n+#undef CPLUSPLUS_CPP_SPEC\n+#undef LIB_SPEC\n+#undef LINK_SPEC\n+\n+#if DEFAULT_ARCH64_P\n+#define ASM_SPEC \"%{maix32:%(asm_spec32);:%(asm_spec64)} %(asm_spec_common)\"\n+#define CPP_SPEC \"%{maix32:%(cpp_spec32);:%(cpp_spec64)} %(cpp_spec_common)\"\n+#define CPLUSPLUS_CPP_SPEC \"%{maix32:%(cpp_spec32);:%(cpp_spec64)} %(cplusplus_cpp_spec_common)\"\n+#define LIB_SPEC \"%{maix32:%(lib_spec32);:%(lib_spec64)} %(lib_spec_common)\"\n+#define LINK_SPEC \"%{maix32:%(link_spec32);:%(link_spec64)} %(link_spec_common)\"\n+#else\n+#define ASM_SPEC \"%{maix64:%(asm_spec64);:%(asm_spec32)} %(asm_spec_common)\"\n+#define CPP_SPEC \"%{maix64:%(cpp_spec64);:%(cpp_spec32)} %(cpp_spec_common)\"\n+#define CPLUSPLUS_CPP_SPEC \"%{maix64:%(cpp_spec64);:%(cpp_spec32)} %(cplusplus_cpp_spec_common)\"\n+#define LIB_SPEC \"%{maix64:%(lib_spec64);:%(lib_spec32)} %(lib_spec_common)\"\n+#define LINK_SPEC \"%{maix64:%(link_spec64);:%(link_spec32)} %(link_spec_common)\"\n+#endif\n+\n+#undef SUBTARGET_EXTRA_SPECS\n+#define SUBTARGET_EXTRA_SPECS\t\t\t\t\t\\\n+  { \"asm_spec_common\",\t\tASM_SPEC_COMMON },\t\t\\\n+  { \"asm_spec32\",\t\tASM_SPEC32 },\t\t\t\\\n+  { \"asm_spec64\",\t\tASM_SPEC64 },\t\t\t\\\n+  { \"cpp_spec_common\",\t\tCPP_SPEC_COMMON },\t\t\\\n+  { \"cplusplus_cpp_spec_common\", CPLUSPLUS_CPP_SPEC_COMMON },\t\\\n+  { \"cpp_spec32\",\t\tCPP_SPEC32 },\t\t\t\\\n+  { \"cpp_spec64\",\t\tCPP_SPEC64 },\t\t\t\\\n+  { \"lib_spec_common\",\t\tLIB_SPEC_COMMON },\t\t\\\n+  { \"lib_spec32\",\t\tLIB_SPEC32 },\t\t\t\\\n+  { \"lib_spec64\",\t\tLIB_SPEC64 },\t\t\t\\\n+  { \"link_spec_common\",\t\tLINK_SPEC_COMMON },\t\t\\\n+  { \"link_spec32\",\t\tLINK_SPEC32 },\t\t\t\\\n+  { \"link_spec64\",\t\tLINK_SPEC64 },\n \n /* AIX V5 typedefs ptrdiff_t as \"long\" while earlier releases used \"int\".  */\n "}, {"sha": "ecac576a12132d68023c593cc15a90c6e290ad2c", "filename": "gcc/config/rs6000/defaultaix64.h", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/gcc%2Fconfig%2Frs6000%2Fdefaultaix64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/gcc%2Fconfig%2Frs6000%2Fdefaultaix64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdefaultaix64.h?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -0,0 +1,28 @@\n+/* Definitions of target machine for GNU compiler,\n+   for 64 bit powerpc linux defaulting to -m64.\n+   Copyright (C) 2003-2020 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define RS6000_CPU(NAME, CPU, FLAGS)\n+#include \"rs6000-cpus.def\"\n+#undef RS6000_CPU\n+\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT (ISA_2_6_MASKS_EMBEDDED | MASK_POWERPC64 | MASK_64BIT)\n+#undef ASM_DEFAULT_SPEC\n+#define ASM_DEFAULT_SPEC \"-mpwr7\""}, {"sha": "8134e19203a86aeadd0492ab7f88f944d4f57e6b", "filename": "gcc/config/rs6000/t-aix64", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/gcc%2Fconfig%2Frs6000%2Ft-aix64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/gcc%2Fconfig%2Frs6000%2Ft-aix64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-aix64?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -0,0 +1,27 @@\n+# Copyright (C) 2002-2020 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Build the libraries for pthread and all of the\n+# different processor models\n+\n+MULTILIB_OPTIONS\t= pthread maix64/maix32\n+\n+MULTILIB_DIRNAMES\t= pthread ppc64 ppc32\n+\n+MULTILIB_MATCHES\t= .=maix32\n+"}, {"sha": "f169d505227c23355ddf76c82172b2f846edb324", "filename": "libatomic/Makefile.am", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libatomic%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libatomic%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FMakefile.am?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -153,4 +153,9 @@ libatomic_convenience_la_LIBADD = $(libatomic_la_LIBADD)\n all-multi: $(libatomic_la_LIBADD)\n \t$(MULTIDO) $(AM_MAKEFLAGS) DO=all multi-do # $(MAKE)\n \n+# target overrides\n+ifneq ($(tmake_file),)\n+include $(tmake_file)\n+endif\n+\n include $(top_srcdir)/../multilib.am"}, {"sha": "e8d47f28364f679492417bab13bb1d88e0288d04", "filename": "libatomic/Makefile.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libatomic%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libatomic%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FMakefile.in?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -376,6 +376,7 @@ target_alias = @target_alias@\n target_cpu = @target_cpu@\n target_os = @target_os@\n target_vendor = @target_vendor@\n+tmake_file = @tmake_file@\n toolexecdir = @toolexecdir@\n toolexeclibdir = @toolexeclibdir@\n top_build_prefix = @top_build_prefix@\n@@ -862,6 +863,11 @@ vpath % $(strip $(search_path))\n all-multi: $(libatomic_la_LIBADD)\n \t$(MULTIDO) $(AM_MAKEFLAGS) DO=all multi-do # $(MAKE)\n \n+# target overrides\n+ifneq ($(tmake_file),)\n+include $(tmake_file)\n+endif\n+\n # GNU Make needs to see an explicit $(MAKE) variable in the command it\n # runs to enable its job server during parallel builds.  Hence the\n # comments below."}, {"sha": "53c2d83242f4390543ec7f40809dcfbb8eab7f4b", "filename": "libatomic/config/t-aix", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libatomic%2Fconfig%2Ft-aix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libatomic%2Fconfig%2Ft-aix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfig%2Ft-aix?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -0,0 +1,10 @@\n+ifeq ($(MULTIBUILDTOP),)\n+BITS=$(shell if test -z \"`ar -X64 t .libs/$(PACKAGE).a`\" ; then \\\n+    echo '64'; else echo '32'; fi)\n+#MAJOR=$(firstword $(subst :, ,$(libtool_VERSION)))\n+MAJOR=1\n+all-local:\n+\tar -X$(BITS) rc .libs/$(PACKAGE).a ../ppc$(BITS)/$(PACKAGE)/.libs/$(PACKAGE).so.$(MAJOR)\n+\tar -X$(BITS) rc ../pthread/$(PACKAGE)/.libs/$(PACKAGE).a ../pthread/ppc$(BITS)/$(PACKAGE)/.libs/$(PACKAGE).so.$(MAJOR)\n+endif\n+"}, {"sha": "2acaffe441aaccc8126ec4cd5080b84820408844", "filename": "libatomic/configure", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libatomic%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libatomic%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfigure?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -643,6 +643,7 @@ ARCH_AARCH64_LINUX_FALSE\n ARCH_AARCH64_LINUX_TRUE\n HAVE_IFUNC_FALSE\n HAVE_IFUNC_TRUE\n+tmake_file\n SIZES\n XLDFLAGS\n XCFLAGS\n@@ -11387,7 +11388,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11390 \"configure\"\n+#line 11391 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11493,7 +11494,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11496 \"configure\"\n+#line 11497 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15668,6 +15669,19 @@ XCFLAGS=\"$XCFLAGS $XPCFLAGS\"\n \n \n \n+# Conditionalize the makefile for this target machine.\n+tmake_file_=\n+for f in ${tmake_file}\n+do\n+\tif test -f ${srcdir}/config/$f\n+\tthen\n+\t\ttmake_file_=\"${tmake_file_} \\$(srcdir)/config/$f\"\n+\tfi\n+done\n+tmake_file=\"${tmake_file_}\"\n+\n+\n+\n  if test x$libat_cv_have_ifunc = xyes; then\n   HAVE_IFUNC_TRUE=\n   HAVE_IFUNC_FALSE='#'"}, {"sha": "d74bd7c4c18d98bc369798856ca2d47f61f36534", "filename": "libatomic/configure.ac", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libatomic%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libatomic%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfigure.ac?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -268,6 +268,19 @@ AC_SUBST(XLDFLAGS)\n AC_SUBST(LIBS)\n AC_SUBST(SIZES)\n \n+# Conditionalize the makefile for this target machine.\n+tmake_file_=\n+for f in ${tmake_file}\n+do\n+\tif test -f ${srcdir}/config/$f\n+\tthen\n+\t\ttmake_file_=\"${tmake_file_} \\$(srcdir)/config/$f\"\n+\tfi\n+done\n+tmake_file=\"${tmake_file_}\"\n+AC_SUBST(tmake_file)\n+\n+\n AM_CONDITIONAL(HAVE_IFUNC, test x$libat_cv_have_ifunc = xyes)\n AM_CONDITIONAL(ARCH_AARCH64_LINUX,\n \t       [expr \"$config_path\" : \".* linux/aarch64 .*\" > /dev/null])"}, {"sha": "efb3b1efb6898c23318a7082544d72ac0279d18c", "filename": "libatomic/configure.tgt", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libatomic%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libatomic%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfigure.tgt?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -117,6 +117,7 @@ if test -d ${srcdir}/config/$ARCH ; then\n   config_path=\"$ARCH\"\n fi\n \n+tmake_file=\n # Other system configury\n case \"${target}\" in\n   aarch64*-*-linux*)\n@@ -134,6 +135,11 @@ case \"${target}\" in\n \tconfig_path=\"${config_path} s390 posix\"\n \t;;\n \n+  powerpc*-*-aix*)\n+\tconfig_path=\"${config_path} posix\"\n+\ttmake_file=\"t-aix\"\n+\t;;\n+\n   *-*-linux* | *-*-gnu* | *-*-k*bsd*-gnu \\\n   | *-*-netbsd* | *-*-freebsd* | *-*-openbsd* | *-*-dragonfly* \\\n   | *-*-solaris2* | *-*-sysv4* | *-*-irix6* | *-*-osf* | *-*-hpux11* \\"}, {"sha": "7a3e29d0c71cdb5d185e149d2ae44323ec5beed2", "filename": "libgcc/config.host", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -1273,7 +1273,7 @@ rs6000-ibm-aix5.1.* | powerpc-ibm-aix5.1.*)\n rs6000-ibm-aix[56789].* | powerpc-ibm-aix[56789].*)\n \tmd_unwind_header=rs6000/aix-unwind.h\n \ttmake_file=\"t-fdpbit rs6000/t-ppc64-fp rs6000/t-slibgcc-aix rs6000/t-ibm-ldouble rs6000/t-aix-cxa\"\n-\textra_parts=\"crtcxa.o crtcxa_s.o crtdbase.o\"\n+\textra_parts=\"crtcxa.o crtcxa_s.o crtdbase.o crtcxa_64.o crtcxa_64_s.o crtdbase_64.o\"\n \t;;\n rl78-*-elf)\n \ttmake_file=\"$tm_file t-fdpbit rl78/t-rl78\""}, {"sha": "0e1bccb15256bf9dc40824abba5fa582d3f58741", "filename": "libgcc/config/rs6000/t-aix-cxa", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libgcc%2Fconfig%2Frs6000%2Ft-aix-cxa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libgcc%2Fconfig%2Frs6000%2Ft-aix-cxa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-aix-cxa?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -8,10 +8,19 @@ LIB2ADD_ST += $(srcdir)/config/rs6000/aixinitfini.c\n SHLIB_MAPFILES += $(srcdir)/config/rs6000/libgcc-aix-cxa.ver\n \n crtdbase.o: $(srcdir)/config/rs6000/crtdbase.S\n-\t$(crt_compile) -c $<\n+\t$(crt_compile) -maix32 -c $<\n \n crtcxa.o: $(srcdir)/config/rs6000/crtcxa.c\n-\t$(crt_compile) -c $<\n+\t$(crt_compile) -maix32 -c $<\n \n crtcxa_s.o: $(srcdir)/config/rs6000/crtcxa.c\n-\t$(crt_compile) -DSHARED -c $<\n+\t$(crt_compile) -maix32 -DSHARED -c $<\n+\n+crtdbase_64.o: $(srcdir)/config/rs6000/crtdbase.S\n+\t$(crt_compile) -maix64 -c $<\n+\n+crtcxa_64.o: $(srcdir)/config/rs6000/crtcxa.c\n+\t$(crt_compile) -maix64 -c $<\n+\n+crtcxa_64_s.o: $(srcdir)/config/rs6000/crtcxa.c\n+\t$(crt_compile) -maix64 -DSHARED -c $<"}, {"sha": "e5f8a029ff87c1a70a502dd9a010aa502ae99136", "filename": "libgcc/config/rs6000/t-slibgcc-aix", "status": "modified", "additions": 49, "deletions": 20, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libgcc%2Fconfig%2Frs6000%2Ft-slibgcc-aix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libgcc%2Fconfig%2Frs6000%2Ft-slibgcc-aix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-slibgcc-aix?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -37,48 +37,44 @@ SHLIB_SONAME = @shlib_base_name@.so.$(SHLIB_SOVERSION)\n SHLIB_LINK = \\\n \tif test svr4 != $(with_aix_soname) ; then \\\n \t  $(CC) $(LIBGCC2_CFLAGS) -shared -Wl,-bnortl -nodefaultlibs \\\n-\t  -Wl,-bE:@shlib_map_file@ -o @multilib_dir@/shr.o \\\n+\t  -Wl,-bE:@shlib_map_file@ -o shr.o \\\n \t  @multilib_flags@ @shlib_objs@ -lc \\\n \t  `case @multilib_dir@ in \\\n \t  *pthread*) echo -L$(TARGET_SYSTEM_ROOT)/usr/lib/threads -lpthreads -lc_r $(TARGET_SYSTEM_ROOT)/usr/lib/libc.a ;; \\\n \t  *) echo -lc ;; esac` ; \\\n-\t  rm -f @multilib_dir@/tmp-@shlib_base_name@.a ; \\\n-\t  $(AR_CREATE_FOR_TARGET) @multilib_dir@/tmp-@shlib_base_name@.a \\\n-\t    @multilib_dir@/shr.o ; \\\n-\t  mv @multilib_dir@/tmp-@shlib_base_name@.a \\\n-\t     @multilib_dir@/@shlib_base_name@.a ; \\\n-\t  rm -f @multilib_dir@/shr.o ; \\\n+\t  rm -f tmp-@shlib_base_name@.a ; \\\n+\t  $(AR_CREATE_FOR_TARGET) tmp-@shlib_base_name@.a shr.o ; \\\n+\t  mv tmp-@shlib_base_name@.a @shlib_base_name@.a ; \\\n+\t  rm -f shr.o ; \\\n \tfi ; \\\n \tif test aix != $(with_aix_soname) ; then \\\n \t  case @multilib_dir@ in *64*) shr='shr_64' ;; *) shr='shr' ;; esac ; \\\n \t  $(CC) $(LIBGCC2_CFLAGS) -shared -Wl,-G -nodefaultlibs \\\n-\t  -Wl,-bE:@shlib_map_file@ -o @multilib_dir@/$$shr.o \\\n+\t  -Wl,-bE:@shlib_map_file@ -o $$shr.o \\\n \t  @multilib_flags@ @shlib_objs@ -lc \\\n \t  `case @multilib_dir@ in \\\n \t  *pthread*) echo -L$(TARGET_SYSTEM_ROOT)/usr/lib/threads -lpthreads -lc_r $(TARGET_SYSTEM_ROOT)/usr/lib/libc.a ;; \\\n \t  *) echo -lc ;; esac` ; \\\n-\t  $(STRIP_FOR_TARGET) -X32_64 -e @multilib_dir@/$$shr.o ; \\\n+\t  $(STRIP_FOR_TARGET) -X32_64 -e $$shr.o ; \\\n \t  { echo \"\\#! $(SHLIB_SONAME)($$shr.o)\" ; \\\n \t    case @multilib_dir@ in *64*) echo '\\# 64' ;; *) echo '\\# 32' ;; esac ; \\\n \t    cat @shlib_map_file@ ; \\\n-\t  } > @multilib_dir@/$$shr.imp ; \\\n-\t  rm -f @multilib_dir@/tmp-$(SHLIB_SONAME) ; \\\n-\t  $(AR_CREATE_FOR_TARGET) @multilib_dir@/tmp-$(SHLIB_SONAME) \\\n-\t    @multilib_dir@/$$shr.imp @multilib_dir@/$$shr.o ; \\\n-\t  mv @multilib_dir@/tmp-$(SHLIB_SONAME) \\\n-\t     @multilib_dir@/$(SHLIB_SONAME) ; \\\n-\t  rm -f @multilib_dir@/@shlib_base_name@.so ; \\\n-\t  $(LN_S) $(SHLIB_SONAME) @multilib_dir@/@shlib_base_name@.so ; \\\n-\t  rm -f @multilib_dir@/$$shr.imp @multilib_dir@/$$shr.o ; \\\n+\t  } > $$shr.imp ; \\\n+\t  rm -f tmp-$(SHLIB_SONAME) ; \\\n+\t  $(AR_CREATE_FOR_TARGET) tmp-$(SHLIB_SONAME) $$shr.imp $$shr.o ; \\\n+\t  mv tmp-$(SHLIB_SONAME) $(SHLIB_SONAME) ; \\\n+\t  rm -f @shlib_base_name@.so ; \\\n+\t  $(LN_S) $(SHLIB_SONAME) @shlib_base_name@.so ; \\\n+\t  rm -f $$shr.imp $$shr.o ; \\\n \tfi\n SHLIB_INSTALL = \\\n \t$(mkinstalldirs) $(DESTDIR)$(slibdir)@shlib_slibdir_qual@; \\\n \tif test svr4 != $(with_aix_soname) ; then \\\n-\t  $(INSTALL_DATA) @multilib_dir@/@shlib_base_name@.a \\\n+\t  $(INSTALL_DATA) @shlib_base_name@.a \\\n \t\t  $(DESTDIR)$(slibdir)@shlib_slibdir_qual@/ ; \\\n \tfi ; \\\n \tif test aix != $(with_aix_soname) ; then \\\n-\t  $(INSTALL_DATA) @multilib_dir@/$(SHLIB_SONAME) \\\n+\t  $(INSTALL_DATA) $(SHLIB_SONAME) \\\n \t\t  $(DESTDIR)$(slibdir)@shlib_slibdir_qual@/ ; \\\n \t  rm -f $(DESTDIR)$(slibdir)@shlib_slibdir_qual@/@shlib_base_name@.so ; \\\n \t  $(LN_S) $(SHLIB_SONAME) \\\n@@ -91,3 +87,36 @@ SHLIB_NM_FLAGS = -Bpg -X32_64\n \n # Either 32-bit and 64-bit objects in archives.\n AR_FLAGS_FOR_TARGET = -X32_64\n+\n+# Build and install AIX-style FAT libraries\n+ifeq ($(MULTIBUILDTOP),)\n+BITS=$(shell if test -z \"`ar -X64 t libgcc_s.a`\" ; then \\\n+    echo '64'; else echo '32'; fi)\n+all: all-multi\n+ifeq ($(enable_shared),yes)\n+\tar -X$(BITS) x ../ppc$(BITS)/libgcc/libgcc_s.a shr.o\n+\tar -X$(BITS) rc ./libgcc_s.a shr.o\n+\trm -f shr.o\n+\tar -X$(BITS) x ../pthread/ppc$(BITS)/libgcc/libgcc_s.a shr.o\n+\tar -X$(BITS) rc ../pthread/libgcc/libgcc_s.a shr.o\n+\trm -f shr.o\n+endif\n+\tar -X$(BITS) rc libgcc.a \\\n+\t    $(addprefix ../ppc$(BITS)/libgcc/,$(libgcc-objects))\n+\tar -X$(BITS) rc libgcc_eh.a \\\n+\t    $(addprefix ../ppc$(BITS)/libgcc/,$(libgcc-eh-objects))\n+\tar -X$(BITS) rc ../pthread/libgcc/libgcc.a \\\n+\t    $(addprefix ../pthread/ppc$(BITS)/libgcc/,$(libgcc-objects))\n+\tar -X$(BITS) rc ../pthread/libgcc/libgcc_eh.a \\\n+\t    $(addprefix ../pthread/ppc$(BITS)/libgcc/,$(libgcc-eh-objects))\n+ifeq ($(enable_gcov),yes)\n+\tar -X$(BITS) rc libgcov.a \\\n+\t    $(addprefix ../ppc$(BITS)/libgcc/,$(libgcov-objects))\n+\tar -X$(BITS) rc ../pthread/libgcc/libgcov.a \\\n+\t    $(addprefix ../pthread/ppc$(BITS)/libgcc/,$(libgcov-objects))\n+endif\n+\t$(MAKE) install-leaf DESTDIR=$(gcc_objdir) \\\n+\t    slibdir= libsubdir= MULTIOSDIR=$(MULTIDIR)\n+\tcp ../pthread/libgcc/libgcc_s.a ../../gcc/pthread/\n+\tcp ../pthread/libgcc/libgcc_eh.a ../../gcc/pthread/\n+endif"}, {"sha": "69e94eea550ca97925d850eabbe1b415c506e05c", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -1236,4 +1236,9 @@ endif\n \n EXTRA_DIST = $(m4_files)\n \n+# target overrides\n+ifneq ($(tmake_file),)\n+include $(tmake_file)\n+endif\n+\n include $(top_srcdir)/../multilib.am"}, {"sha": "1de35db54beb667d476be44c815ad473b606864c", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -707,6 +707,7 @@ target_noncanonical = @target_noncanonical@\n target_os = @target_os@\n target_subdir = @target_subdir@\n target_vendor = @target_vendor@\n+tmake_file = @tmake_file@\n toolexecdir = @toolexecdir@\n toolexeclibdir = @toolexeclibdir@\n top_build_prefix = @top_build_prefix@\n@@ -7190,6 +7191,11 @@ fpu-target.inc: fpu-target.h $(srcdir)/libgfortran.h\n @MAINTAINER_MODE_TRUE@$(gfor_misc_specifics): m4/misc_specifics.m4 m4/head.m4\n @MAINTAINER_MODE_TRUE@\t$(M4) -Dfile=$@ -I$(srcdir)/m4 misc_specifics.m4 > $@\n \n+# target overrides\n+ifneq ($(tmake_file),)\n+include $(tmake_file)\n+endif\n+\n # GNU Make needs to see an explicit $(MAKE) variable in the command it\n # runs to enable its job server during parallel builds.  Hence the\n # comments below."}, {"sha": "7046aeeacc3803af307c99c434b27382370bc24d", "filename": "libgfortran/config/t-aix", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libgfortran%2Fconfig%2Ft-aix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libgfortran%2Fconfig%2Ft-aix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ft-aix?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -0,0 +1,10 @@\n+ifeq ($(MULTIBUILDTOP),)\n+BITS=$(shell if test -z \"`ar -X64 t .libs/$(PACKAGE).a`\" ; then \\\n+    echo '64'; else echo '32'; fi)\n+#MAJOR=$(firstword $(subst :, ,$(libtool_VERSION)))\n+MAJOR=5\n+all-local:\n+\tar -X$(BITS) rc .libs/$(PACKAGE).a ../ppc$(BITS)/$(PACKAGE)/.libs/$(PACKAGE).so.$(MAJOR)\n+\tar -X$(BITS) rc ../pthread/$(PACKAGE)/.libs/$(PACKAGE).a ../pthread/ppc$(BITS)/$(PACKAGE)/.libs/$(PACKAGE).so.$(MAJOR)\n+endif\n+"}, {"sha": "854656960c4c6fe2e44c29f16da54c00e240d7c9", "filename": "libgfortran/configure", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -639,6 +639,7 @@ LIBOBJS\n get_gcc_base_ver\n HAVE_AVX128_FALSE\n HAVE_AVX128_TRUE\n+tmake_file\n IEEE_FLAGS\n IEEE_SUPPORT\n IEEE_SUPPORT_FALSE\n@@ -12723,7 +12724,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12726 \"configure\"\n+#line 12727 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12829,7 +12830,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12832 \"configure\"\n+#line 12833 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -26533,6 +26534,18 @@ fi\n IEEE_FLAGS=\"${ieee_flags}\"\n \n \n+# Conditionalize the makefile for this target machine.\n+tmake_file_=\n+for f in ${tmake_file}\n+do\n+\tif test -f ${srcdir}/config/$f\n+\tthen\n+\t\ttmake_file_=\"${tmake_file_} \\$(srcdir)/config/$f\"\n+\tfi\n+done\n+tmake_file=\"${tmake_file_}\"\n+\n+\n \n # Check for POSIX getpwuid_r\n #"}, {"sha": "4109d0fefae12884759eb91d55ae6180d5a0d821", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -601,6 +601,18 @@ AC_SUBST(IEEE_SUPPORT)\n IEEE_FLAGS=\"${ieee_flags}\"\n AC_SUBST(IEEE_FLAGS)\n \n+# Conditionalize the makefile for this target machine.\n+tmake_file_=\n+for f in ${tmake_file}\n+do\n+\tif test -f ${srcdir}/config/$f\n+\tthen\n+\t\ttmake_file_=\"${tmake_file_} \\$(srcdir)/config/$f\"\n+\tfi\n+done\n+tmake_file=\"${tmake_file_}\"\n+AC_SUBST(tmake_file)\n+\n \n # Check for POSIX getpwuid_r \n #"}, {"sha": "e9d92c9d34dd2f3a2fdba5d97c6ab6ffce1b06ad", "filename": "libgfortran/configure.host", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libgfortran%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libgfortran%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.host?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -15,6 +15,9 @@\n # It sets the following shell variables:\n #\n #   fpu_host            FPU-specific code file, defaults to fpu-generic.\n+#   tmake_file\t\tA list of machine-description-specific\n+#\t\t\tmakefile fragments.\n+\n \n \n # DEFAULTS\n@@ -57,3 +60,18 @@ case \"${host_cpu}\" in\n   sh*)\n     ieee_flags=\"-mieee\" ;;\n esac\n+\n+tmake_file=\n+# Other system configury\n+case \"${target}\" in\n+\n+  *-*-aix*)\n+\t# Create AIX-style \"FAT\" libraries.\n+\ttmake_file=\"t-aix\"\n+\t;;\n+\n+  *)\n+\t;;\n+\n+esac\n+"}, {"sha": "16b6995694969e7fcdd6f23fcde47282fa67f3a9", "filename": "libgomp/Makefile.am", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libgomp%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libgomp%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FMakefile.am?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -141,4 +141,9 @@ stamp-build-info: libgomp.texi\n CLEANFILES = $(STAMP_GENINSRC) $(STAMP_BUILD_INFO)\n MAINTAINERCLEANFILES = $(srcdir)/libgomp.info\n \n+# target overrides\n+ifneq ($(tmake_file),)\n+include $(tmake_file)\n+endif\n+\n include $(top_srcdir)/../multilib.am"}, {"sha": "5455951cdedc3adecb389fcd065f922fa9f493c6", "filename": "libgomp/Makefile.in", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libgomp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libgomp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FMakefile.in?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -16,7 +16,7 @@\n \n # Plugins for offload execution, Makefile.am fragment.\n #\n-# Copyright (C) 2014-2019 Free Software Foundation, Inc.\n+# Copyright (C) 2014-2020 Free Software Foundation, Inc.\n #\n # Contributed by Mentor Embedded.\n #\n@@ -530,6 +530,7 @@ target_alias = @target_alias@\n target_cpu = @target_cpu@\n target_os = @target_os@\n target_vendor = @target_vendor@\n+tmake_file = @tmake_file@\n toolexecdir = @toolexecdir@\n toolexeclibdir = @toolexeclibdir@\n top_build_prefix = @top_build_prefix@\n@@ -573,8 +574,8 @@ libgomp_la_SOURCES = alloc.c atomic.c barrier.c critical.c env.c \\\n \taffinity.c target.c splay-tree.c libgomp-plugin.c \\\n \toacc-parallel.c oacc-host.c oacc-init.c oacc-mem.c \\\n \toacc-async.c oacc-plugin.c oacc-cuda.c priority_queue.c \\\n-\taffinity-fmt.c teams.c allocator.c oacc-profiling.c oacc-target.c \\\n-\t$(am__append_4)\n+\taffinity-fmt.c teams.c allocator.c oacc-profiling.c \\\n+\toacc-target.c $(am__append_4)\n \n # Nvidia PTX OpenACC plugin.\n @PLUGIN_NVPTX_TRUE@libgomp_plugin_nvptx_version_info = -version-info $(libtool_VERSION)\n@@ -1438,6 +1439,11 @@ stamp-build-info: libgomp.texi\n \t$(MAKEINFO) $(AM_MAKEINFOFLAGS) $(MAKEINFOFLAGS) -I $(srcdir) -o libgomp.info $(srcdir)/libgomp.texi\n \t@touch $@\n \n+# target overrides\n+ifneq ($(tmake_file),)\n+include $(tmake_file)\n+endif\n+\n # GNU Make needs to see an explicit $(MAKE) variable in the command it\n # runs to enable its job server during parallel builds.  Hence the\n # comments below."}, {"sha": "5d0b7e0f9ae5710ee749fdbc336e47bcb2a2faf1", "filename": "libgomp/config/t-aix", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libgomp%2Fconfig%2Ft-aix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libgomp%2Fconfig%2Ft-aix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Ft-aix?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -0,0 +1,9 @@\n+ifeq ($(MULTIBUILDTOP),)\n+BITS=$(shell if test -z \"`ar -X64 t .libs/$(PACKAGE).a`\" ; then \\\n+    echo '64'; else echo '32'; fi)\n+MAJOR=$(firstword $(subst :, ,$(libtool_VERSION)))\n+all-local:\n+\tar -X$(BITS) rc .libs/$(PACKAGE).a ../ppc$(BITS)/$(PACKAGE)/.libs/$(PACKAGE).so.$(MAJOR)\n+\tar -X$(BITS) rc ../pthread/$(PACKAGE)/.libs/$(PACKAGE).a ../pthread/ppc$(BITS)/$(PACKAGE)/.libs/$(PACKAGE).so.$(MAJOR)\n+endif\n+"}, {"sha": "fd65828136d80d80753e22fa5e6cec88f7f04d4c", "filename": "libgomp/configure", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -650,6 +650,7 @@ OMP_LOCK_SIZE\n USE_FORTRAN_FALSE\n USE_FORTRAN_TRUE\n link_gomp\n+tmake_file\n XLDFLAGS\n XCFLAGS\n config_path\n@@ -11432,7 +11433,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11435 \"configure\"\n+#line 11436 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11538,7 +11539,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11541 \"configure\"\n+#line 11542 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -16747,6 +16748,7 @@ fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for CET support\" >&5\n $as_echo_n \"checking for CET support... \" >&6; }\n \n+# NB: Avoid nested save_CFLAGS and save_LDFLAGS.\n case \"$host\" in\n   i[34567]86-*-linux* | x86_64-*-linux*)\n     case \"$enable_cet\" in\n@@ -16822,6 +16824,18 @@ FCFLAGS=\"$FCFLAGS $CET_FLAGS\"\n \n \n \n+# Conditionalize the makefile for this target machine.\n+tmake_file_=\n+for f in ${tmake_file}\n+do\n+\tif test -f ${srcdir}/config/$f\n+\tthen\n+\t\ttmake_file_=\"${tmake_file_} \\$(srcdir)/config/$f\"\n+\tfi\n+done\n+tmake_file=\"${tmake_file_}\"\n+\n+\n # Cleanup and exit.\n CFLAGS=\"$save_CFLAGS\"\n cat >confcache <<\\_ACEOF"}, {"sha": "201d26fff7ae01f50ce7fd4a1b6290f6ee5e8204", "filename": "libgomp/configure.ac", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libgomp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libgomp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure.ac?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -348,6 +348,18 @@ AC_SUBST(config_path)\n AC_SUBST(XCFLAGS)\n AC_SUBST(XLDFLAGS)\n \n+# Conditionalize the makefile for this target machine.\n+tmake_file_=\n+for f in ${tmake_file}\n+do\n+\tif test -f ${srcdir}/config/$f\n+\tthen\n+\t\ttmake_file_=\"${tmake_file_} \\$(srcdir)/config/$f\"\n+\tfi\n+done\n+tmake_file=\"${tmake_file_}\"\n+AC_SUBST(tmake_file)\n+\n # Cleanup and exit.\n CFLAGS=\"$save_CFLAGS\"\n AC_CACHE_SAVE"}, {"sha": "1863287fa0d4f66cbb4c2421808e4208bdf9e50c", "filename": "libgomp/configure.tgt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libgomp%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libgomp%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure.tgt?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -9,6 +9,8 @@\n #\t\t\tconfig subdirectory of the source tree.\n #  XCFLAGS\t\tAdd extra compile flags to use.\n #  XLDFLAGS\t\tAdd extra link flags to use.\n+#  tmake_file\t\tA list of machine-description-specific\n+#\t\t\tmakefile fragments.\n \n # Optimize TLS usage by avoiding the overhead of dynamic allocation.\n if test $gcc_cv_have_tls = yes ; then\n@@ -30,6 +32,7 @@ if test $gcc_cv_have_tls = yes ; then\n   esac\n fi\n \n+tmake_file=\n # Since we require POSIX threads, assume a POSIX system by default.\n config_path=\"posix\"\n \n@@ -154,6 +157,8 @@ case \"${target}\" in\n \tXLDFLAGS=\"${XLDFLAGS} -lpthread\"\n \t# AIX needs -frandom-seed for bootstrap compare.\n \tXCFLAGS=\"${XCFLAGS} -frandom-seed=\\$@\"\n+\t# Create AIX-style \"FAT\" libraries.\n+\ttmake_file=\"t-aix\"\n \t;;\n \n   nvptx*-*-*)"}, {"sha": "62c2c324082885a88b7dc8c85b8c220c9e899c06", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -173,4 +173,9 @@ AM_MAKEFLAGS = \\\n # Subdir rules rely on $(FLAGS_TO_PASS)\n FLAGS_TO_PASS = $(AM_MAKEFLAGS)\n \n+# target overrides\n+ifneq ($(tmake_file),)\n+include $(tmake_file)\n+endif\n+\n include $(top_srcdir)/../multilib.am"}, {"sha": "e8987d45916e69cbd6989282a8aaa713080f0c42", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -377,6 +377,7 @@ target_cpu = @target_cpu@\n target_os = @target_os@\n target_vendor = @target_vendor@\n thread_header = @thread_header@\n+tmake_file = @tmake_file@\n top_build_prefix = @top_build_prefix@\n top_builddir = @top_builddir@\n top_srcdir = @top_srcdir@\n@@ -817,6 +818,11 @@ install-dvi:\n # automake-generated TAGS rule. Make a simple one here.\n TAGS: tags-recursive $(LISP)\n \n+# target overrides\n+ifneq ($(tmake_file),)\n+include $(tmake_file)\n+endif\n+\n # GNU Make needs to see an explicit $(MAKE) variable in the command it\n # runs to enable its job server during parallel builds.  Hence the\n # comments below."}, {"sha": "a588746dd99795314685f05631ae4c99487c0564", "filename": "libstdc++-v3/config/os/aix/t-aix", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Ft-aix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Ft-aix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Ft-aix?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -0,0 +1,9 @@\n+ifeq ($(MULTIBUILDTOP),)\n+BITS=$(shell if test -z \"`ar -X64 t src/.libs/$(PACKAGE).a`\" ; then \\\n+    echo '64'; else echo '32'; fi)\n+MAJOR=$(firstword $(subst :, ,$(libtool_VERSION)))\n+all-local:\n+\tar -X$(BITS) rc src/.libs/$(PACKAGE).a ../ppc$(BITS)/$(PACKAGE)-v3/src/.libs/$(PACKAGE).so.$(MAJOR)\n+\tar -X$(BITS) rc ../pthread/$(PACKAGE)-v3/src/.libs/$(PACKAGE).a ../pthread/ppc$(BITS)/$(PACKAGE)-v3/src/.libs/$(PACKAGE).so.$(MAJOR)\n+endif\n+"}, {"sha": "dd54bd406a9a341c1c69bc561652904b33021b39", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -643,6 +643,7 @@ glibcxx_toolexecdir\n gxx_include_dir\n glibcxx_prefixdir\n EXTRA_CFLAGS\n+tmake_file\n CPU_OPT_BITS_RANDOM\n CPU_OPT_EXT_RANDOM\n ERROR_CONSTANTS_SRCDIR\n@@ -12059,7 +12060,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12062 \"configure\"\n+#line 12063 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12165,7 +12166,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12168 \"configure\"\n+#line 12169 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15857,7 +15858,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15860 \"configure\"\n+#line 15861 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15892,7 +15893,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15895 \"configure\"\n+#line 15896 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15927,7 +15928,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15930 \"configure\"\n+#line 15931 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15963,7 +15964,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15966 \"configure\"\n+#line 15967 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -16116,7 +16117,7 @@ $as_echo \"mutex\" >&6; }\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 16119 \"configure\"\n+#line 16120 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -16158,7 +16159,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 16161 \"configure\"\n+#line 16162 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -16192,7 +16193,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16195 \"configure\"\n+#line 16196 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -77719,6 +77720,17 @@ CPU_OPT_BITS_RANDOM=config/${cpu_opt_bits_random}\n \n \n \n+# Conditionalize the makefile for this target machine.\n+tmake_file_=\n+for f in ${tmake_file}\n+do\n+\tif test -f ${srcdir}/config/$f\n+\tthen\n+\t\ttmake_file_=\"${tmake_file_} \\$(srcdir)/config/$f\"\n+\tfi\n+done\n+tmake_file=\"${tmake_file_}\"\n+\n \n # Add CET specific flags if Intel CET is enabled.\n  # Check whether --enable-cet was given."}, {"sha": "ffd0079613fee466f4fb1b0a6ab5e6c429cd7ca1", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -528,6 +528,17 @@ AC_SUBST(ERROR_CONSTANTS_SRCDIR)\n AC_SUBST(CPU_OPT_EXT_RANDOM)\n AC_SUBST(CPU_OPT_BITS_RANDOM)\n \n+# Conditionalize the makefile for this target machine.\n+tmake_file_=\n+for f in ${tmake_file}\n+do\n+\tif test -f ${srcdir}/config/$f\n+\tthen\n+\t\ttmake_file_=\"${tmake_file_} \\$(srcdir)/config/$f\"\n+\tfi\n+done\n+tmake_file=\"${tmake_file_}\"\n+AC_SUBST(tmake_file)\n \n # Add CET specific flags if Intel CET is enabled.\n GCC_CET_FLAGS(CET_FLAGS)"}, {"sha": "8d1b60804f3dfad0dd36777577b5aae519b690c4", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ddb895df311e546a6f54345e18b8749ac50324/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ddb895df311e546a6f54345e18b8749ac50324/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=47ddb895df311e546a6f54345e18b8749ac50324", "patch": "@@ -70,6 +70,9 @@\n #                          additional symbols to export from the shared\n #                          library, when symbol versioning is in use\n #\n+#   tmake_file\t\t   A list of machine-description-specific\n+#\t\t\t   makefile fragments.\n+#\n #\n # If the defaults will not work for your platform, you need only change the\n # variables that won't work, i.e., you do not need to explicitly set a\n@@ -91,6 +94,7 @@ try_cpu=generic\n abi_baseline_subdir_switch=--print-multi-directory\n abi_tweaks_dir=\"cpu/generic\"\n error_constants_dir=\"os/generic\"\n+tmake_file=\n \n # HOST-SPECIFIC OVERRIDES\n # Set any CPU-dependent bits.\n@@ -206,17 +210,7 @@ case \"${host_os}\" in\n     # Newer versions of AIX only support PowerPC architecture, so use\n     # atomic instructions directly.\n     os_include_dir=\"os/aix\"\n-    ;;\n-  aix4.[3456789]*)\n-    # We set os_include_dir to os/aix only on AIX 4.3 and newer, but\n-    # os/aix/atomicity.h works on earlier versions of AIX 4.*, so we\n-    # explicitly duplicate the directory for 4.[<3].\n-    os_include_dir=\"os/aix\"\n-    atomicity_dir=\"os/aix\"\n-    ;;\n-  aix4.*)\n-    os_include_dir=\"os/generic\"\n-    atomicity_dir=\"os/aix\"\n+    tmake_file=\"os/aix/t-aix\"\n     ;;\n   aix*)\n     os_include_dir=\"os/generic\""}]}