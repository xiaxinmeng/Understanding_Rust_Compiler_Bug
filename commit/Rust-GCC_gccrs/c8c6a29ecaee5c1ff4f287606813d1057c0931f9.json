{"sha": "c8c6a29ecaee5c1ff4f287606813d1057c0931f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhjNmEyOWVjYWVlNWMxZmY0ZjI4NzYwNjgxM2QxMDU3YzA5MzFmOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-03-02T08:02:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-03-02T08:02:41Z"}, "message": "wide-int.h (wide_int_storage::operator=): Implement in terms of wi::copy.\n\n2017-03-02  Richard Biener  <rguenther@suse.de>\n\n\t* wide-int.h (wide_int_storage::operator=): Implement in terms\n\tof wi::copy.\n\nFrom-SVN: r245831", "tree": {"sha": "0afe675d39c1f3032d680a6d67fdce250ae5a52d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0afe675d39c1f3032d680a6d67fdce250ae5a52d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8c6a29ecaee5c1ff4f287606813d1057c0931f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8c6a29ecaee5c1ff4f287606813d1057c0931f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8c6a29ecaee5c1ff4f287606813d1057c0931f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8c6a29ecaee5c1ff4f287606813d1057c0931f9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "83692f96622d65acd462df4cea225b7bc2827d80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83692f96622d65acd462df4cea225b7bc2827d80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83692f96622d65acd462df4cea225b7bc2827d80"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "5bd3094e3aa988ec4757710607d5bc306c15a09d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c6a29ecaee5c1ff4f287606813d1057c0931f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c6a29ecaee5c1ff4f287606813d1057c0931f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8c6a29ecaee5c1ff4f287606813d1057c0931f9", "patch": "@@ -1,3 +1,8 @@\n+2017-03-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* wide-int.h (wide_int_storage::operator=): Implement in terms\n+\tof wi::copy.\n+\n 2017-03-02  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/79777"}, {"sha": "2115b614a9f84eb23964f9a1c0a9fc0775955d2c", "filename": "gcc/wide-int.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c6a29ecaee5c1ff4f287606813d1057c0931f9/gcc%2Fwide-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c6a29ecaee5c1ff4f287606813d1057c0931f9/gcc%2Fwide-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.h?ref=c8c6a29ecaee5c1ff4f287606813d1057c0931f9", "patch": "@@ -1019,6 +1019,9 @@ class GTY(()) wide_int_storage\n   HOST_WIDE_INT *write_val ();\n   void set_len (unsigned int, bool = false);\n \n+  template <typename T>\n+  wide_int_storage &operator = (const T &);\n+\n   static wide_int from (const wide_int_ref &, unsigned int, signop);\n   static wide_int from_array (const HOST_WIDE_INT *, unsigned int,\n \t\t\t      unsigned int, bool = true);\n@@ -1058,6 +1061,18 @@ inline wide_int_storage::wide_int_storage (const T &x)\n   wi::copy (*this, xi);\n }\n \n+template <typename T>\n+inline wide_int_storage&\n+wide_int_storage::operator = (const T &x)\n+{\n+  { STATIC_ASSERT (!wi::int_traits<T>::host_dependent_precision); }\n+  { STATIC_ASSERT (wi::int_traits<T>::precision_type != wi::CONST_PRECISION); }\n+  WIDE_INT_REF_FOR (T) xi (x);\n+  precision = xi.precision;\n+  wi::copy (*this, xi);\n+  return *this;\n+}\n+\n inline unsigned int\n wide_int_storage::get_precision () const\n {"}]}