{"sha": "93257ed603d72b58bb2616da5b63c4c6737f424b", "node_id": "C_kwDOANBUbNoAKDkzMjU3ZWQ2MDNkNzJiNThiYjI2MTZkYTViNjNjNGM2NzM3ZjQyNGI", "commit": {"author": {"name": "Philipp Fent", "email": "fent@in.tum.de", "date": "2022-09-06T21:24:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-14T18:17:36Z"}, "message": "libstdc++: Add pretty printer for std::stringstreams\n\nTo display (o-,i-)stringstreams in the common case, we just print the\nunderlying stringbuf, without the many ios_base members. In the\nunconventional case that the underlying streambuf was redirected, we\nreport the redirected target.\n\nSigned-off-by: Philipp Fent <fent@in.tum.de>\n\nlibstdc++-v3/ChangeLog:\n\n\t* python/libstdcxx/v6/printers.py (access_streambuf_ptrs):\n\tNew helper function.\n\t(StdStringBufPrinter, StdStringStreamPrinter): New printers.\n\t(build_libstdcxx_dictionary): Register stringstream printers.\n\t* testsuite/libstdc++-prettyprinters/debug.cc: Check string\n\tstreams.\n\t* testsuite/libstdc++-prettyprinters/simple.cc: Likewise.\n\t* testsuite/libstdc++-prettyprinters/simple11.cc: Likewise.", "tree": {"sha": "ed328dd30a6f419c667f2bfeca785288fced5ce9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed328dd30a6f419c667f2bfeca785288fced5ce9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93257ed603d72b58bb2616da5b63c4c6737f424b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93257ed603d72b58bb2616da5b63c4c6737f424b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93257ed603d72b58bb2616da5b63c4c6737f424b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93257ed603d72b58bb2616da5b63c4c6737f424b/comments", "author": {"login": "pfent", "id": 5686284, "node_id": "MDQ6VXNlcjU2ODYyODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5686284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pfent", "html_url": "https://github.com/pfent", "followers_url": "https://api.github.com/users/pfent/followers", "following_url": "https://api.github.com/users/pfent/following{/other_user}", "gists_url": "https://api.github.com/users/pfent/gists{/gist_id}", "starred_url": "https://api.github.com/users/pfent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pfent/subscriptions", "organizations_url": "https://api.github.com/users/pfent/orgs", "repos_url": "https://api.github.com/users/pfent/repos", "events_url": "https://api.github.com/users/pfent/events{/privacy}", "received_events_url": "https://api.github.com/users/pfent/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c85c1188579bee9c6f8b8f5223daf49b772e594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c85c1188579bee9c6f8b8f5223daf49b772e594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c85c1188579bee9c6f8b8f5223daf49b772e594"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "bd4289c1c6203119132561246547547f5e8dc8c3", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93257ed603d72b58bb2616da5b63c4c6737f424b/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93257ed603d72b58bb2616da5b63c4c6737f424b/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=93257ed603d72b58bb2616da5b63c4c6737f424b", "patch": "@@ -969,6 +969,57 @@ def to_string(self):\n     def display_hint (self):\n         return 'string'\n \n+def access_streambuf_ptrs(streambuf):\n+    \"Access the streambuf put area pointers\"\n+    pbase = streambuf['_M_out_beg']\n+    pptr = streambuf['_M_out_cur']\n+    egptr = streambuf['_M_in_end']\n+    return pbase, pptr, egptr\n+\n+class StdStringBufPrinter:\n+    \"Print a std::basic_stringbuf\"\n+\n+    def __init__(self, _, val):\n+        self.val = val\n+\n+    def to_string(self):\n+        (pbase, pptr, egptr) = access_streambuf_ptrs(self.val)\n+        # Logic from basic_stringbuf::_M_high_mark()\n+        if pptr:\n+            if not egptr or pptr > egptr:\n+                return pbase.string(length = pptr - pbase)\n+            else:\n+                return pbase.string(length = egptr - pbase)\n+        return self.val['_M_string']\n+\n+    def display_hint(self):\n+        return 'string'\n+\n+class StdStringStreamPrinter:\n+    \"Print a std::basic_stringstream\"\n+\n+    def __init__(self, typename, val):\n+        self.val = val\n+        self.typename = typename\n+\n+        # Check if the stream was redirected:\n+        # This is essentially: val['_M_streambuf'] == val['_M_stringbuf'].address\n+        # However, GDB can't resolve the virtual inheritance, so we do that manually\n+        basetype = [f.type for f in val.type.fields() if f.is_base_class][0]\n+        gdb.set_convenience_variable('__stream', val.cast(basetype).address)\n+        self.streambuf = gdb.parse_and_eval('$__stream->rdbuf()')\n+        self.was_redirected = self.streambuf != val['_M_stringbuf'].address\n+\n+    def to_string(self):\n+        if self.was_redirected:\n+            return \"%s redirected to %s\" % (self.typename, self.streambuf.dereference())\n+        return self.val['_M_stringbuf']\n+\n+    def display_hint(self):\n+        if self.was_redirected:\n+            return None\n+        return 'string'\n+\n class Tr1HashtableIterator(Iterator):\n     def __init__ (self, hashtable):\n         self.buckets = hashtable['_M_buckets']\n@@ -2232,6 +2283,11 @@ def build_libstdcxx_dictionary ():\n     libstdcxx_printer.add_version('std::', 'initializer_list',\n                                   StdInitializerListPrinter)\n     libstdcxx_printer.add_version('std::', 'atomic', StdAtomicPrinter)\n+    libstdcxx_printer.add_version('std::', 'basic_stringbuf', StdStringBufPrinter)\n+    libstdcxx_printer.add_version('std::__cxx11::', 'basic_stringbuf', StdStringBufPrinter)\n+    for sstream in ('istringstream', 'ostringstream', 'stringstream'):\n+        libstdcxx_printer.add_version('std::', 'basic_' + sstream, StdStringStreamPrinter)\n+        libstdcxx_printer.add_version('std::__cxx11::', 'basic_' + sstream, StdStringStreamPrinter)\n \n     # std::regex components\n     libstdcxx_printer.add_version('std::__detail::', '_State',"}, {"sha": "3c6195591c52bf65db5c150a3f0f417353774f96", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/debug.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93257ed603d72b58bb2616da5b63c4c6737f424b/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93257ed603d72b58bb2616da5b63c4c6737f424b/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fdebug.cc?ref=93257ed603d72b58bb2616da5b63c4c6737f424b", "patch": "@@ -29,6 +29,7 @@\n #include <list>\n #include <map>\n #include <set>\n+#include <sstream>\n #include <vector>\n #include <ext/slist>\n \n@@ -110,6 +111,20 @@ main()\n   __gnu_cxx::slist<int>::iterator slliter = sll.begin();\n // { dg-final { note-test slliter {47} } }\n \n+  std::stringstream sstream;\n+  sstream << \"abc\";\n+// { dg-final { note-test sstream \"\\\"abc\\\"\" } }\n+  std::stringstream ssin(\"input\", std::ios::in);\n+// { dg-final { note-test ssin \"\\\"input\\\"\" } }\n+  std::istringstream ssin2(\"input\");\n+// { dg-final { note-test ssin2 \"\\\"input\\\"\" } }\n+  std::ostringstream ssout;\n+  ssout << \"out\";\n+// { dg-final { note-test ssout \"\\\"out\\\"\" } }\n+  std::stringstream redirected(\"xxx\");\n+  static_cast<std::basic_ios<std::stringstream::char_type>&>(redirected).rdbuf(sstream.rdbuf());\n+// { dg-final { regexp-test redirected {std::.*stringstream redirected to .*} } }\n+\n   std::cout << \"\\n\";\n   return 0;\t\t\t// Mark SPOT\n }"}, {"sha": "1609ae2c8db3255664065e4795ae919bcb080470", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/simple.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93257ed603d72b58bb2616da5b63c4c6737f424b/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93257ed603d72b58bb2616da5b63c4c6737f424b/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc?ref=93257ed603d72b58bb2616da5b63c4c6737f424b", "patch": "@@ -30,6 +30,7 @@\n #include <list>\n #include <map>\n #include <set>\n+#include <sstream>\n #include <vector>\n #include <ext/slist>\n \n@@ -169,6 +170,20 @@ main()\n   __gnu_cxx::slist<int>::iterator slliter0;\n // { dg-final { note-test slliter0 {non-dereferenceable iterator for __gnu_cxx::slist} } }\n \n+  std::stringstream sstream;\n+  sstream << \"abc\";\n+// { dg-final { note-test sstream \"\\\"abc\\\"\" } }\n+  std::stringstream ssin(\"input\", std::ios::in);\n+// { dg-final { note-test ssin \"\\\"input\\\"\" } }\n+  std::istringstream ssin2(\"input\");\n+// { dg-final { note-test ssin2 \"\\\"input\\\"\" } }\n+  std::ostringstream ssout;\n+  ssout << \"out\";\n+// { dg-final { note-test ssout \"\\\"out\\\"\" } }\n+  std::stringstream redirected(\"xxx\");\n+  static_cast<std::basic_ios<std::stringstream::char_type>&>(redirected).rdbuf(sstream.rdbuf());\n+// { dg-final { regexp-test redirected {std::.*stringstream redirected to .*} } }\n+\n   std::cout << \"\\n\";\n   return 0;\t\t\t// Mark SPOT\n }"}, {"sha": "a4b82e30f9c4a8599d73c55657f939838601af63", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/simple11.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93257ed603d72b58bb2616da5b63c4c6737f424b/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93257ed603d72b58bb2616da5b63c4c6737f424b/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc?ref=93257ed603d72b58bb2616da5b63c4c6737f424b", "patch": "@@ -30,6 +30,7 @@\n #include <list>\n #include <map>\n #include <set>\n+#include <sstream>\n #include <vector>\n #include <ext/slist>\n \n@@ -162,6 +163,20 @@ main()\n   __gnu_cxx::slist<int>::iterator slliter0;\n // { dg-final { note-test slliter0 {non-dereferenceable iterator for __gnu_cxx::slist} } }\n \n+  std::stringstream sstream;\n+  sstream << \"abc\";\n+// { dg-final { note-test sstream \"\\\"abc\\\"\" } }\n+  std::stringstream ssin(\"input\", std::ios::in);\n+// { dg-final { note-test ssin \"\\\"input\\\"\" } }\n+  std::istringstream ssin2(\"input\");\n+// { dg-final { note-test ssin2 \"\\\"input\\\"\" } }\n+  std::ostringstream ssout;\n+  ssout << \"out\";\n+// { dg-final { note-test ssout \"\\\"out\\\"\" } }\n+  std::stringstream redirected(\"xxx\");\n+  static_cast<std::basic_ios<std::stringstream::char_type>&>(redirected).rdbuf(sstream.rdbuf());\n+// { dg-final { regexp-test redirected {std::.*stringstream redirected to .*} } }\n+\n   std::cout << \"\\n\";\n   return 0;\t\t\t// Mark SPOT\n }"}]}