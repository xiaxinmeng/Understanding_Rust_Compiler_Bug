{"sha": "12f64ca5e16915c6d6b0079b0286cc8e6066975b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJmNjRjYTVlMTY5MTVjNmQ2YjAwNzliMDI4NmNjOGU2MDY2OTc1Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-10-04T23:17:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-10-04T23:17:51Z"}, "message": "re PR c++/58503 ([c++11] ICE with invalid range in range-based for-loop)\n\n/cp\n2013-10-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/58503\n\t* parser.c (cp_parser_perform_range_for_lookup): If eventually\n\teither *begin or *end is type-dependent, return NULL_TREE.\n\t(do_range_for_auto_deduction): If cp_parser_perform_range_for_lookup\n\treturns NULL_TREE, don't actually do_auto_deduction.\n\n/testsuite\n2013-10-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/58503\n\t* g++.dg/cpp0x/range-for26.C: New.\n\t* g++.dg/cpp0x/range-for27.C: Likewise.\n\nFrom-SVN: r203219", "tree": {"sha": "9138155ba25bbedcf3f2d32906fbb306d4014e3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9138155ba25bbedcf3f2d32906fbb306d4014e3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12f64ca5e16915c6d6b0079b0286cc8e6066975b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12f64ca5e16915c6d6b0079b0286cc8e6066975b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12f64ca5e16915c6d6b0079b0286cc8e6066975b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12f64ca5e16915c6d6b0079b0286cc8e6066975b/comments", "author": null, "committer": null, "parents": [{"sha": "e36fae42ad580a61208c8c9bb82cc0b5964577b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e36fae42ad580a61208c8c9bb82cc0b5964577b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e36fae42ad580a61208c8c9bb82cc0b5964577b4"}], "stats": {"total": 55, "additions": 50, "deletions": 5}, "files": [{"sha": "88e5078b5b6b099fc4507d8c5f10678555c4539d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12f64ca5e16915c6d6b0079b0286cc8e6066975b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12f64ca5e16915c6d6b0079b0286cc8e6066975b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=12f64ca5e16915c6d6b0079b0286cc8e6066975b", "patch": "@@ -1,3 +1,11 @@\n+2013-10-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/58503\n+\t* parser.c (cp_parser_perform_range_for_lookup): If eventually\n+\teither *begin or *end is type-dependent, return NULL_TREE.\n+\t(do_range_for_auto_deduction): If cp_parser_perform_range_for_lookup\n+\treturns NULL_TREE, don't actually do_auto_deduction.\n+\n 2013-10-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58448"}, {"sha": "90c17757c4c59388c6f0640515bc4ba308298bce", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12f64ca5e16915c6d6b0079b0286cc8e6066975b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12f64ca5e16915c6d6b0079b0286cc8e6066975b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=12f64ca5e16915c6d6b0079b0286cc8e6066975b", "patch": "@@ -9960,11 +9960,15 @@ do_range_for_auto_deduction (tree decl, tree range_expr)\n       range_temp = convert_from_reference (build_range_temp (range_expr));\n       iter_type = (cp_parser_perform_range_for_lookup\n \t\t   (range_temp, &begin_dummy, &end_dummy));\n-      iter_decl = build_decl (input_location, VAR_DECL, NULL_TREE, iter_type);\n-      iter_decl = build_x_indirect_ref (input_location, iter_decl, RO_NULL,\n-\t\t\t\t\ttf_warning_or_error);\n-      TREE_TYPE (decl) = do_auto_deduction (TREE_TYPE (decl),\n-\t\t\t\t\t    iter_decl, auto_node);\n+      if (iter_type)\n+\t{\n+\t  iter_decl = build_decl (input_location, VAR_DECL, NULL_TREE,\n+\t\t\t\t  iter_type);\n+\t  iter_decl = build_x_indirect_ref (input_location, iter_decl, RO_NULL,\n+\t\t\t\t\t    tf_warning_or_error);\n+\t  TREE_TYPE (decl) = do_auto_deduction (TREE_TYPE (decl),\n+\t\t\t\t\t\titer_decl, auto_node);\n+\t}\n     }\n }\n \n@@ -10171,6 +10175,11 @@ cp_parser_perform_range_for_lookup (tree range, tree *begin, tree *end)\n \t  *begin = *end = error_mark_node;\n \t  return error_mark_node;\n \t}\n+      else if (type_dependent_expression_p (*begin)\n+\t       || type_dependent_expression_p (*end))\n+\t/* Can happen, when, eg, in a template context, Koenig lookup\n+\t   can't resolve begin/end (c++/58503).  */\n+\treturn NULL_TREE;\n       else\n \t{\n \t  tree iter_type = cv_unqualified (TREE_TYPE (*begin));"}, {"sha": "68d415ef0051fee679a3c1095c09ae9474b268da", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12f64ca5e16915c6d6b0079b0286cc8e6066975b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12f64ca5e16915c6d6b0079b0286cc8e6066975b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12f64ca5e16915c6d6b0079b0286cc8e6066975b", "patch": "@@ -1,3 +1,9 @@\n+2013-10-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/58503\n+\t* g++.dg/cpp0x/range-for26.C: New.\n+\t* g++.dg/cpp0x/range-for27.C: Likewise.\n+\n 2013-10-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58448"}, {"sha": "71359cde6e4e3e8fd63c8bccee65437668955c6e", "filename": "gcc/testsuite/g++.dg/cpp0x/range-for26.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12f64ca5e16915c6d6b0079b0286cc8e6066975b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12f64ca5e16915c6d6b0079b0286cc8e6066975b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for26.C?ref=12f64ca5e16915c6d6b0079b0286cc8e6066975b", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/58503\n+// { dg-require-effective-target c++11 }\n+\n+template<int> void foo()\n+{\n+  for (auto i : 0) {}  // { dg-error \"there are no arguments\" }\n+}"}, {"sha": "a9cfb8ebc32c7c80d2b2d16e9ed47120a7290741", "filename": "gcc/testsuite/g++.dg/cpp0x/range-for27.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12f64ca5e16915c6d6b0079b0286cc8e6066975b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12f64ca5e16915c6d6b0079b0286cc8e6066975b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frange-for27.C?ref=12f64ca5e16915c6d6b0079b0286cc8e6066975b", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/58503\n+// { dg-require-effective-target c++11 }\n+// { dg-options \"-fpermissive -w\" }\n+\n+struct c { };\n+\n+template<int> void foo()\n+{\n+  for (auto i : c()) { }\n+}\n+\n+c* begin(const c&);\n+c* end(const c&);\n+\n+template void foo<1>(); "}]}