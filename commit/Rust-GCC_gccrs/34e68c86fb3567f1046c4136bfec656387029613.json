{"sha": "34e68c86fb3567f1046c4136bfec656387029613", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRlNjhjODZmYjM1NjdmMTA0NmM0MTM2YmZlYzY1NjM4NzAyOTYxMw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2002-02-12T21:33:12Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2002-02-12T21:33:12Z"}, "message": "* gcc.dg/c90-const-expr-3.c, gcc.dg/c99-const-expr-3.c: New tests.\n\nFrom-SVN: r49712", "tree": {"sha": "8c30e0a5877dc5077c07ee2484a371abbfed5afc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c30e0a5877dc5077c07ee2484a371abbfed5afc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34e68c86fb3567f1046c4136bfec656387029613", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e68c86fb3567f1046c4136bfec656387029613", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34e68c86fb3567f1046c4136bfec656387029613", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e68c86fb3567f1046c4136bfec656387029613/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc209487c0f969cef2e13f40fa2e0558b2b21322", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc209487c0f969cef2e13f40fa2e0558b2b21322", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc209487c0f969cef2e13f40fa2e0558b2b21322"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "2d3c7130f9a8c57f25f4fbd20b21092c7718de2a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e68c86fb3567f1046c4136bfec656387029613/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e68c86fb3567f1046c4136bfec656387029613/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=34e68c86fb3567f1046c4136bfec656387029613", "patch": "@@ -1,3 +1,7 @@\n+2002-02-12  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c90-const-expr-3.c, gcc.dg/c99-const-expr-3.c: New tests.\n+\n 2002-02-12  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* gcc.dg/decl-1.c: New test."}, {"sha": "987284360d8662e4934d57e8b747d6d99b3516f5", "filename": "gcc/testsuite/gcc.dg/c90-const-expr-3.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e68c86fb3567f1046c4136bfec656387029613/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e68c86fb3567f1046c4136bfec656387029613/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-3.c?ref=34e68c86fb3567f1046c4136bfec656387029613", "patch": "@@ -0,0 +1,39 @@\n+/* Test for constant expressions: broken optimization with const variables.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -O2\" } */\n+/* Note: not using -pedantic since the -std option alone should be enough\n+   to give the correct behavior to conforming programs.  */\n+\n+static const int ZERO = 0;\n+\n+int *a;\n+int b;\n+long *c;\n+\n+/* Assertion that n is a constant zero: so the conditional expression\n+   has type 'int *' instead of 'void *'.\n+*/\n+#define ASSERT_NPC(n)\t(b = *(1 ? a : (n)))\n+/* Assertion that n is not a constant zero: so the conditional\n+   expresions has type 'void *' instead of 'int *'.\n+*/\n+#define ASSERT_NOT_NPC(n)\t(c = (1 ? a : (void *)(__SIZE_TYPE__)(n)))\n+\n+void\n+foo (void)\n+{\n+  ASSERT_NPC (0);\n+  ASSERT_NOT_NPC (ZERO);\n+  ASSERT_NPC (0 + 0);\n+  ASSERT_NOT_NPC (ZERO + 0); /* { dg-bogus \"incompatible\" \"bogus null pointer constant\" { xfail *-*-* } } */\n+  ASSERT_NOT_NPC (ZERO + ZERO); /* { dg-bogus \"incompatible\" \"bogus null pointer constant\" { xfail *-*-* } } */\n+  ASSERT_NPC (+0);\n+  ASSERT_NOT_NPC (+ZERO); /* { dg-bogus \"incompatible\" \"bogus null pointer constant\" { xfail *-*-* } } */\n+  ASSERT_NPC (-0);\n+  ASSERT_NOT_NPC (-ZERO); /* { dg-bogus \"incompatible\" \"bogus null pointer constant\" { xfail *-*-* } } */\n+  ASSERT_NPC ((char) 0);\n+  ASSERT_NOT_NPC ((char) ZERO);\n+  ASSERT_NPC ((int) 0);\n+  ASSERT_NOT_NPC ((int) ZERO);\n+}"}, {"sha": "7490f62a4ab48ea40827bd5ade169b6bd0389b74", "filename": "gcc/testsuite/gcc.dg/c99-const-expr-3.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e68c86fb3567f1046c4136bfec656387029613/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e68c86fb3567f1046c4136bfec656387029613/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-3.c?ref=34e68c86fb3567f1046c4136bfec656387029613", "patch": "@@ -0,0 +1,39 @@\n+/* Test for constant expressions: broken optimization with const variables.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -O2\" } */\n+/* Note: not using -pedantic since the -std option alone should be enough\n+   to give the correct behavior to conforming programs.  */\n+\n+static const int ZERO = 0;\n+\n+int *a;\n+int b;\n+long *c;\n+\n+/* Assertion that n is a constant zero: so the conditional expression\n+   has type 'int *' instead of 'void *'.\n+*/\n+#define ASSERT_NPC(n)\t(b = *(1 ? a : (n)))\n+/* Assertion that n is not a constant zero: so the conditional\n+   expresions has type 'void *' instead of 'int *'.\n+*/\n+#define ASSERT_NOT_NPC(n)\t(c = (1 ? a : (void *)(__SIZE_TYPE__)(n)))\n+\n+void\n+foo (void)\n+{\n+  ASSERT_NPC (0);\n+  ASSERT_NOT_NPC (ZERO);\n+  ASSERT_NPC (0 + 0);\n+  ASSERT_NOT_NPC (ZERO + 0); /* { dg-bogus \"incompatible\" \"bogus null pointer constant\" { xfail *-*-* } } */\n+  ASSERT_NOT_NPC (ZERO + ZERO); /* { dg-bogus \"incompatible\" \"bogus null pointer constant\" { xfail *-*-* } } */\n+  ASSERT_NPC (+0);\n+  ASSERT_NOT_NPC (+ZERO); /* { dg-bogus \"incompatible\" \"bogus null pointer constant\" { xfail *-*-* } } */\n+  ASSERT_NPC (-0);\n+  ASSERT_NOT_NPC (-ZERO); /* { dg-bogus \"incompatible\" \"bogus null pointer constant\" { xfail *-*-* } } */\n+  ASSERT_NPC ((char) 0);\n+  ASSERT_NOT_NPC ((char) ZERO);\n+  ASSERT_NPC ((int) 0);\n+  ASSERT_NOT_NPC ((int) ZERO);\n+}"}]}