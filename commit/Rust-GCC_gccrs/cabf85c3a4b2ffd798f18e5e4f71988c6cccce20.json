{"sha": "cabf85c3a4b2ffd798f18e5e4f71988c6cccce20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FiZjg1YzNhNGIyZmZkNzk4ZjE4ZTVlNGY3MTk4OGM2Y2NjY2UyMA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-05-21T18:42:20Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-05-21T18:42:20Z"}, "message": "cpuid.h (bit_MOVBE): New.\n\ngcc/\n\n2009-05-21  H.J. Lu  <hongjiu.lu@intel.com>\n\t    Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/cpuid.h (bit_MOVBE): New.\n\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Check movbe.\n\n\t* config/i386/i386.c (OPTION_MASK_ISA_MOVBE_SET): New.\n\t(OPTION_MASK_ISA_MOVBE_UNSET): Likewise.\n\t(ix86_handle_option): Handle OPT_mmovbe.\n\t(ix86_target_string): Add -mmovbe.\n\t(pta_flags): Add PTA_MOVBE.\n\t(processor_alias_table): Add PTA_MOVBE to \"atom\".\n\t(override_options): Handle PTA_MOVBE.\n\n\t* config/i386/i386.h (TARGET_MOVBE): New.\n\n\t* config/i386/i386.md (bswapsi2): Check TARGET_MOVBE.\n\t(*bswapsi_movbe): New.\n\t(*bswapdi_movbe): Likewise.\n\t(bswapdi2): Renamed to ...\n\t(*bswapdi_1): This.\n\t(bswapdi2): New expander.\n\n\t* config/i386/i386.opt (mmovbe): New.\n\n\t* doc/invoke.texi: Document -mmovbe.\n\ngcc/testsuite/\n\n2009-05-21  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* gcc.target/i386/movbe-1.c: New.\n\t* gcc.target/i386/movbe-2.c: Likewise.\n\nFrom-SVN: r147773", "tree": {"sha": "a93fbd470e8d9d31fa245f28efc6de13f4f22724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a93fbd470e8d9d31fa245f28efc6de13f4f22724"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/comments", "author": null, "committer": null, "parents": [{"sha": "9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0"}], "stats": {"total": 165, "additions": 155, "deletions": 10}, "files": [{"sha": "c15abbe8beb471e95723220580c5f0cbc54a90dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cabf85c3a4b2ffd798f18e5e4f71988c6cccce20", "patch": "@@ -1,9 +1,38 @@\n+2009-05-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/cpuid.h (bit_MOVBE): New.\n+\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Check movbe.\n+\n+\t* config/i386/i386.c (OPTION_MASK_ISA_MOVBE_SET): New.\n+\t(OPTION_MASK_ISA_MOVBE_UNSET): Likewise.\n+\t(ix86_handle_option): Handle OPT_mmovbe.\n+\t(ix86_target_string): Add -mmovbe.\n+\t(pta_flags): Add PTA_MOVBE.\n+\t(processor_alias_table): Add PTA_MOVBE to \"atom\".\n+\t(override_options): Handle PTA_MOVBE.\n+\n+\t* config/i386/i386.h (TARGET_MOVBE): New.\n+\n+\t* config/i386/i386.md (bswapsi2): Check TARGET_MOVBE.\n+\t(*bswapsi_movbe): New.\n+\t(*bswapdi_movbe): Likewise.\n+\t(bswapdi2): Renamed to ...\n+\t(*bswapdi_1): This.\n+\t(bswapdi2): New expander.\n+\n+\t* config/i386/i386.opt (mmovbe): New.\n+\n+\t* doc/invoke.texi: Document -mmovbe.\n+\n 2009-05-21  Taras Glek  <tglek@mozilla.com>\n \n \t* plugin.c (try_init_one_plugin): Updated to new plugin_init API.\n \t* gcc-plugin.h (plugin_init): Updated signature.\n \t* gcc-plugin.h (plugin_name_args): Moved to this header.\n-\t* doc/plugins.texi (plugin_init): Updated documention to reflect API change.\n+\t* doc/plugins.texi (plugin_init): Updated documention to reflect\n+\tAPI change.\n \t* doc/plugins.texi (plugin_name_args): Added to documention.\n \n 2009-05-21  Mark Mitchell  <mark@codesourcery.com>"}, {"sha": "2d0916fb36a6a3214a8e371dd9b3a729cb91d420", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=cabf85c3a4b2ffd798f18e5e4f71988c6cccce20", "patch": "@@ -29,6 +29,7 @@\n #define bit_CMPXCHG16B\t(1 << 13)\n #define bit_SSE4_1\t(1 << 19)\n #define bit_SSE4_2\t(1 << 20)\n+#define bit_MOVBE\t(1 << 22)\n #define bit_POPCNT\t(1 << 23)\n #define bit_AES\t\t(1 << 25)\n #define bit_XSAVE\t(1 << 26)"}, {"sha": "4fc009896948cec23c456635adcff1eb452191d5", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=cabf85c3a4b2ffd798f18e5e4f71988c6cccce20", "patch": "@@ -378,6 +378,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   /* Extended features */\n   unsigned int has_lahf_lm = 0, has_sse4a = 0;\n   unsigned int has_longmode = 0, has_3dnowp = 0, has_3dnow = 0;\n+  unsigned int has_movbe = 0;\n \n   bool arch;\n \n@@ -415,6 +416,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   has_sse3 = ecx & bit_SSE3;\n   has_ssse3 = ecx & bit_SSSE3;\n   has_cmpxchg16b = ecx & bit_CMPXCHG16B;\n+  has_movbe = ecx & bit_MOVBE;\n \n   has_cmpxchg8b = edx & bit_CMPXCHG8B;\n   has_cmov = edx & bit_CMOV;\n@@ -601,6 +603,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \toptions = concat (options, \"-mcx16 \", NULL);\n       if (has_lahf_lm)\n \toptions = concat (options, \"-msahf \", NULL);\n+      if (has_movbe)\n+\toptions = concat (options, \"-mmovbe\", NULL);\n     }\n \n done:"}, {"sha": "205691fd5fe6c3682e770c0a5e1cbbe4f14a9010", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=cabf85c3a4b2ffd798f18e5e4f71988c6cccce20", "patch": "@@ -1965,9 +1965,11 @@ static int ix86_isa_flags_explicit;\n \n #define OPTION_MASK_ISA_ABM_SET \\\n   (OPTION_MASK_ISA_ABM | OPTION_MASK_ISA_POPCNT)\n+\n #define OPTION_MASK_ISA_POPCNT_SET OPTION_MASK_ISA_POPCNT\n #define OPTION_MASK_ISA_CX16_SET OPTION_MASK_ISA_CX16\n #define OPTION_MASK_ISA_SAHF_SET OPTION_MASK_ISA_SAHF\n+#define OPTION_MASK_ISA_MOVBE_SET OPTION_MASK_ISA_MOVBE\n \n /* Define a set of ISAs which aren't available when a given ISA is\n    disabled.  MMX and SSE ISAs are handled separately.  */\n@@ -2009,6 +2011,7 @@ static int ix86_isa_flags_explicit;\n #define OPTION_MASK_ISA_POPCNT_UNSET OPTION_MASK_ISA_POPCNT\n #define OPTION_MASK_ISA_CX16_UNSET OPTION_MASK_ISA_CX16\n #define OPTION_MASK_ISA_SAHF_UNSET OPTION_MASK_ISA_SAHF\n+#define OPTION_MASK_ISA_MOVBE_UNSET OPTION_MASK_ISA_MOVBE\n \n /* Vectorization library interface and handlers.  */\n tree (*ix86_veclib_handler)(enum built_in_function, tree, tree) = NULL;\n@@ -2299,6 +2302,19 @@ ix86_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED, int value)\n \t}\n       return true;\n \n+    case OPT_mmovbe:\n+      if (value)\n+\t{\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_MOVBE_SET;\n+\t  ix86_isa_flags_explicit |= OPTION_MASK_ISA_MOVBE_SET;\n+\t}\n+      else\n+\t{\n+\t  ix86_isa_flags &= ~OPTION_MASK_ISA_MOVBE_UNSET;\n+\t  ix86_isa_flags_explicit |= OPTION_MASK_ISA_MOVBE_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_maes:\n       if (value)\n \t{\n@@ -2361,6 +2377,7 @@ ix86_target_string (int isa, int flags, const char *arch, const char *tune,\n     { \"-mmmx\",\t\tOPTION_MASK_ISA_MMX },\n     { \"-mabm\",\t\tOPTION_MASK_ISA_ABM },\n     { \"-mpopcnt\",\tOPTION_MASK_ISA_POPCNT },\n+    { \"-mmovbe\",\tOPTION_MASK_ISA_MOVBE },\n     { \"-maes\",\t\tOPTION_MASK_ISA_AES },\n     { \"-mpclmul\",\tOPTION_MASK_ISA_PCLMUL },\n   };\n@@ -2577,7 +2594,8 @@ override_options (bool main_args_p)\n       PTA_AES = 1 << 17,\n       PTA_PCLMUL = 1 << 18,\n       PTA_AVX = 1 << 19,\n-      PTA_FMA = 1 << 20 \n+      PTA_FMA = 1 << 20,\n+      PTA_MOVBE = 1 << 21\n     };\n \n   static struct pta\n@@ -2621,7 +2639,7 @@ override_options (bool main_args_p)\n \t| PTA_SSSE3 | PTA_CX16},\n       {\"atom\", PROCESSOR_ATOM, CPU_ATOM,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-\t| PTA_SSSE3 | PTA_CX16},\n+\t| PTA_SSSE3 | PTA_CX16 | PTA_MOVBE},\n       {\"geode\", PROCESSOR_GEODE, CPU_GEODE,\n \tPTA_MMX | PTA_3DNOW | PTA_3DNOW_A |PTA_PREFETCH_SSE},\n       {\"k6\", PROCESSOR_K6, CPU_K6, PTA_MMX},\n@@ -2935,6 +2953,9 @@ override_options (bool main_args_p)\n \tif (!(TARGET_64BIT && (processor_alias_table[i].flags & PTA_NO_SAHF))\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_SAHF))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_SAHF;\n+\tif (processor_alias_table[i].flags & PTA_MOVBE\n+\t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_MOVBE))\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_MOVBE;\n \tif (processor_alias_table[i].flags & PTA_AES\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_AES))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_AES;"}, {"sha": "1d7acf66efbc94770b9122241253db12ac01c1f7", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=cabf85c3a4b2ffd798f18e5e4f71988c6cccce20", "patch": "@@ -59,6 +59,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_ABM\tOPTION_ISA_ABM\n #define TARGET_POPCNT\tOPTION_ISA_POPCNT\n #define TARGET_SAHF\tOPTION_ISA_SAHF\n+#define TARGET_MOVBE\tOPTION_ISA_MOVBE\n #define TARGET_AES\tOPTION_ISA_AES\n #define TARGET_PCLMUL\tOPTION_ISA_PCLMUL\n #define TARGET_CMPXCHG16B OPTION_ISA_CX16"}, {"sha": "dbe781deb84f772c2e77f9ef632c999198906fd9", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=cabf85c3a4b2ffd798f18e5e4f71988c6cccce20", "patch": "@@ -16105,7 +16105,7 @@\n \t(bswap:SI (match_operand:SI 1 \"register_operand\" \"\")))]\n   \"\"\n {\n-  if (!TARGET_BSWAP)\n+  if (!(TARGET_BSWAP || TARGET_MOVBE))\n     {\n       rtx x = operands[0];\n \n@@ -16117,6 +16117,21 @@\n     }\n })\n \n+(define_insn \"*bswapsi_movbe\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,m\")\n+\t(bswap:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,m,r\")))]\n+  \"TARGET_MOVBE && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"@\n+    bswap\\t%0\n+    movbe\\t{%1, %0|%0, %1}\n+    movbe\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"*,imov,imov\")\n+   (set_attr \"modrm\" \"*,1,1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"prefix_extra\" \"*,1,1\")\n+   (set_attr \"length\" \"2,*,*\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"*bswapsi_1\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(bswap:SI (match_operand:SI 1 \"register_operand\" \"0\")))]\n@@ -16145,7 +16160,29 @@\n   [(set_attr \"length\" \"4\")\n    (set_attr \"mode\" \"HI\")])\n \n-(define_insn \"bswapdi2\"\n+(define_expand \"bswapdi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(bswap:DI (match_operand:DI 1 \"register_operand\" \"\")))]\n+  \"TARGET_64BIT\"\n+  \"\")\n+\n+(define_insn \"*bswapdi_movbe\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,m\")\n+\t(bswap:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,m,r\")))]\n+  \"TARGET_64BIT && TARGET_MOVBE\n+   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"@\n+    bswap\\t%0\n+    movbe\\t{%1, %0|%0, %1}\n+    movbe\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"*,imov,imov\")\n+   (set_attr \"modrm\" \"*,1,1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"prefix_extra\" \"*,1,1\")\n+   (set_attr \"length\" \"3,*,*\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"*bswapdi_1\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(bswap:DI (match_operand:DI 1 \"register_operand\" \"0\")))]\n   \"TARGET_64BIT\""}, {"sha": "e9be268e005712d38fe2ca0eb796185f1acb627d", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=cabf85c3a4b2ffd798f18e5e4f71988c6cccce20", "patch": "@@ -339,6 +339,10 @@ msahf\n Target Report Mask(ISA_SAHF) Var(ix86_isa_flags) VarExists Save\n Support code generation of sahf instruction in 64bit x86-64 code.\n \n+mmovbe\n+Target Report Mask(ISA_MOVBE) Var(ix86_isa_flags) VarExists Save\n+Support code generation of movbe instruction.\n+\n maes\n Target Report Mask(ISA_AES) Var(ix86_isa_flags) VarExists Save\n Support AES built-in functions and code generation"}, {"sha": "db9df63fb02bb975af10a05d9e4b2ee4848dee9a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=cabf85c3a4b2ffd798f18e5e4f71988c6cccce20", "patch": "@@ -577,7 +577,7 @@ Objective-C and Objective-C++ Dialects}.\n -mno-wide-multiply  -mrtd  -malign-double @gol\n -mpreferred-stack-boundary=@var{num}\n -mincoming-stack-boundary=@var{num}\n--mcld -mcx16 -msahf -mrecip @gol\n+-mcld -mcx16 -msahf -mmovbe -mrecip @gol\n -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx @gol\n -maes -mpclmul @gol\n -msse4a -m3dnow -mpopcnt -mabm -msse5 @gol\n@@ -11458,6 +11458,11 @@ SAHF are load and store instructions, respectively, for certain status flags.\n In 64-bit mode, SAHF instruction is used to optimize @code{fmod}, @code{drem}\n or @code{remainder} built-in functions: see @ref{Other Builtins} for details.\n \n+@item -mmovbe\n+@opindex mmovbe\n+This option will enable GCC to use movbe instruction to implement\n+@code{__builtin_bswap32} and @code{__builtin_bswap64}.\n+\n @item -mrecip\n @opindex mrecip\n This option will enable GCC to use RCPSS and RSQRTSS instructions (and their"}, {"sha": "3f4f035708b6642d51a2d1fba62cb3be3baf68b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cabf85c3a4b2ffd798f18e5e4f71988c6cccce20", "patch": "@@ -1,9 +1,15 @@\n+2009-05-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/movbe-1.c: New.\n+\t* gcc.target/i386/movbe-2.c: Likewise.\n+\n 2009-05-21  Taras Glek  <tglek@mozilla.com>\n \n-\t* gcc.dg/plugin/selfassign.c (plugin_init): Updated to new plugin_init signature.\n-\t* g++.dg/plugin/selfassign.c (plugin_init): Updated to new plugin_init signature.\n-\t* g++.dg/plugin/dumb_plugin.c (plugin_init): Updated to new plugin_init signature.\n-\t* g++.dg/plugin/attribute_plugin.c (plugin_init): Updated to new plugin_init signature.\n+\t* gcc.dg/plugin/selfassign.c (plugin_init): Updated to new\n+\tplugin_init signature.\n+\t* g++.dg/plugin/selfassign.c (plugin_init): Likewise.\n+\t* g++.dg/plugin/dumb_plugin.c (plugin_init): Likewise.\n+\t* g++.dg/plugin/attribute_plugin.c (plugin_init): Likewise.\n \n 2009-05-21  Mark Mitchell  <mark@codesourcery.com>\n "}, {"sha": "391d4ad9814f38a831241482e132399f87dec537", "filename": "gcc/testsuite/gcc.target/i386/movbe-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovbe-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovbe-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovbe-1.c?ref=cabf85c3a4b2ffd798f18e5e4f71988c6cccce20", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mmovbe\" } */\n+\n+extern int x;\n+\n+void\n+foo (int i)\n+{\n+  x = __builtin_bswap32 (i);\n+}\n+\n+int\n+bar ()\n+{\n+  return __builtin_bswap32 (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movbe\\[ \\t\\]\" 2 } } */"}, {"sha": "d898f20dce4127cf697088e5dabce2038429ced6", "filename": "gcc/testsuite/gcc.target/i386/movbe-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovbe-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabf85c3a4b2ffd798f18e5e4f71988c6cccce20/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovbe-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovbe-2.c?ref=cabf85c3a4b2ffd798f18e5e4f71988c6cccce20", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mmovbe\" } */\n+\n+extern long long x;\n+\n+void\n+foo (long long i)\n+{\n+  x = __builtin_bswap64 (i);\n+}\n+\n+long long\n+bar ()\n+{\n+  return __builtin_bswap64 (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movbe\\[ \\t\\]\" 4 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times \"movbe\\[ \\t\\]\" 2 { target lp64 } } } */"}]}