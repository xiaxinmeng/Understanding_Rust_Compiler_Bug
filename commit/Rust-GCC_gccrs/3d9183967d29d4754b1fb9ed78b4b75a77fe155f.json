{"sha": "3d9183967d29d4754b1fb9ed78b4b75a77fe155f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q5MTgzOTY3ZDI5ZDQ3NTRiMWZiOWVkNzhiNGI3NWE3N2ZlMTU1Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-07-08T08:05:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-07-08T08:05:45Z"}, "message": "[multiple changes]\n\n2013-07-08  Robert Dewar  <dewar@adacore.com>\n\n\t* gnatcmd.adb: Minor reformatting.\n\n2013-07-08  Robert Dewar  <dewar@adacore.com>\n\n\t* targparm.adb (Get_Target_Parameters): Recognize pragma\n\tPartition_Elaboration_Policy.\n\n2013-07-08  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Minor update to mention partition elaboration policy.\n\n2013-07-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Comple_Object_Operation): Revert previous change.\n\t(Analyze_Indexed_Component_Form): In ASIS mode, if node has been\n\ttransformed but not rewritten as a function call (as is the case\n\tin a generic), analyze it as such.\n\n2013-07-08  Thomas Quinot  <quinot@adacore.com>\n\n\t* gnat_rm.texi: Minor rewording: add missing word \"operators\"\n\tin documentation for restriction No_Direct_Boolean_Operator.\n\n2013-07-08  Robert Dewar  <dewar@adacore.com>\n\n\t* errout.adb (Set_Msg_Txt): No longer sets Is_Style_Msg,\n\tIs_Warning_Msg, or Is_Unconditional_Msg (all are set elsewhere\n\tnow).\n\t* errout.ads: Insertions ! and !! no longer have to be at the\n\tend of the message, they can be anywhere in the message.\n\t* erroutc.adb (Test_Style_Warning_Serious_Unconditional_Msg):\n\tReplaces Test_Style_Warning_Serious_Msg\n\t* erroutc.ads (Has_Double_Exclam): New flag New comments for\n\texisting flags (Test_Style_Warning_Serious_Unconditional_Msg):\n\tReplaces Test_Style_Warning_Serious_Msg\n\t* errutil.adb (Test_Style_Warning_Serious_Unconditional_Msg):\n\tReplaces Test_Style_Warning_Serious_Msg\n\nFrom-SVN: r200765", "tree": {"sha": "18dc61f15a5c2d320fddca9b79c9f9708b4009b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18dc61f15a5c2d320fddca9b79c9f9708b4009b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d9183967d29d4754b1fb9ed78b4b75a77fe155f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9183967d29d4754b1fb9ed78b4b75a77fe155f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d9183967d29d4754b1fb9ed78b4b75a77fe155f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/comments", "author": null, "committer": null, "parents": [{"sha": "6480338ae6d2350656b8c689df8af79c02ebc6be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6480338ae6d2350656b8c689df8af79c02ebc6be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6480338ae6d2350656b8c689df8af79c02ebc6be"}], "stats": {"total": 210, "additions": 150, "deletions": 60}, "files": [{"sha": "ab8ce39b928e6c017d0cedc279df1d5f1315a98b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3d9183967d29d4754b1fb9ed78b4b75a77fe155f", "patch": "@@ -1,3 +1,43 @@\n+2013-07-08  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnatcmd.adb: Minor reformatting.\n+\n+2013-07-08  Robert Dewar  <dewar@adacore.com>\n+\n+\t* targparm.adb (Get_Target_Parameters): Recognize pragma\n+\tPartition_Elaboration_Policy.\n+\n+2013-07-08  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Minor update to mention partition elaboration policy.\n+\n+2013-07-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Comple_Object_Operation): Revert previous change.\n+\t(Analyze_Indexed_Component_Form): In ASIS mode, if node has been\n+\ttransformed but not rewritten as a function call (as is the case\n+\tin a generic), analyze it as such.\n+\n+2013-07-08  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* gnat_rm.texi: Minor rewording: add missing word \"operators\"\n+\tin documentation for restriction No_Direct_Boolean_Operator.\n+\n+2013-07-08  Robert Dewar  <dewar@adacore.com>\n+\n+\t* errout.adb (Set_Msg_Txt): No longer sets Is_Style_Msg,\n+\tIs_Warning_Msg, or Is_Unconditional_Msg (all are set elsewhere\n+\tnow).\n+\t* errout.ads: Insertions ! and !! no longer have to be at the\n+\tend of the message, they can be anywhere in the message.\n+\t* erroutc.adb (Test_Style_Warning_Serious_Unconditional_Msg):\n+\tReplaces Test_Style_Warning_Serious_Msg\n+\t* erroutc.ads (Has_Double_Exclam): New flag New comments for\n+\texisting flags (Test_Style_Warning_Serious_Unconditional_Msg):\n+\tReplaces Test_Style_Warning_Serious_Msg\n+\t* errutil.adb (Test_Style_Warning_Serious_Unconditional_Msg):\n+\tReplaces Test_Style_Warning_Serious_Msg\n+\n 2013-07-08  Robert Dewar  <dewar@adacore.com>\n \n \t* par-prag.adb (Process_Restrictions_Or_Restriction_Warnings):"}, {"sha": "5e3e72381fd7375bb9414973dee65bc276e21f33", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=3d9183967d29d4754b1fb9ed78b4b75a77fe155f", "patch": "@@ -153,8 +153,7 @@ package body Errout is\n    --  be one of the special insertion characters (see documentation in spec).\n    --  Flag is the location at which the error is to be posted, which is used\n    --  to determine whether or not the # insertion needs a file name. The\n-   --  variables Msg_Buffer, Msglen, Is_Style_Msg, Is_Warning_Msg, and\n-   --  Is_Unconditional_Msg are set on return.\n+   --  variables Msg_Buffer are set on return Msglen.\n \n    procedure Set_Posted (N : Node_Id);\n    --  Sets the Error_Posted flag on the given node, and all its parents\n@@ -283,7 +282,7 @@ package body Errout is\n       --  Start of processing for new message\n \n       Sindex := Get_Source_File_Index (Flag_Location);\n-      Test_Style_Warning_Serious_Msg (Msg);\n+      Test_Style_Warning_Serious_Unconditional_Msg (Msg);\n       Orig_Loc := Original_Location (Flag_Location);\n \n       --  If the current location is in an instantiation, the issue arises of\n@@ -726,7 +725,7 @@ package body Errout is\n       if Suppress_Message\n         and then not All_Errors_Mode\n         and then not Is_Warning_Msg\n-        and then Msg (Msg'Last) /= '!'\n+        and then not Is_Unconditional_Msg\n       then\n          if not Continuation then\n             Last_Killed := True;\n@@ -787,9 +786,9 @@ package body Errout is\n          elsif Debug_Flag_GG then\n             null;\n \n-         --  Keep warning if message text ends in !!\n+         --  Keep warning if message text contains !!\n \n-         elsif Msg (Msg'Last) = '!' and then Msg (Msg'Last - 1) = '!' then\n+         elsif Has_Double_Exclam then\n             null;\n \n          --  Here is where we delete a warning from a with'ed unit\n@@ -1123,7 +1122,7 @@ package body Errout is\n          return;\n       end if;\n \n-      Test_Style_Warning_Serious_Msg (Msg);\n+      Test_Style_Warning_Serious_Unconditional_Msg (Msg);\n \n       --  Special handling for warning messages\n \n@@ -1163,7 +1162,7 @@ package body Errout is\n       --  Test for message to be output\n \n       if All_Errors_Mode\n-        or else Msg (Msg'Last) = '!'\n+        or else Is_Unconditional_Msg\n         or else Is_Warning_Msg\n         or else OK_Node (N)\n         or else (Msg (Msg'First) = '\\' and then not Last_Killed)\n@@ -2711,7 +2710,6 @@ package body Errout is\n \n    begin\n       Manual_Quote_Mode := False;\n-      Is_Unconditional_Msg := False;\n       Msglen := 0;\n       Flag_Source := Get_Source_File_Index (Flag);\n \n@@ -2776,7 +2774,7 @@ package body Errout is\n                Set_Msg_Char ('\"');\n \n             when '!' =>\n-               Is_Unconditional_Msg := True;\n+               null; -- already dealt with\n \n             when '?' =>\n                Set_Msg_Insertion_Warning;"}, {"sha": "9afc4dfd34a6682f4bf6c5149dfb0a14f7edfb24", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=3d9183967d29d4754b1fb9ed78b4b75a77fe155f", "patch": "@@ -101,10 +101,9 @@ package Errout is\n    --        messages. Warning messages are only suppressed for case 1, and\n    --        when they come from other than the main extended unit.\n \n-   --  This normal suppression action may be overridden in cases 2-5 (but not\n-   --  in case 1) by setting All_Errors mode, or by setting the special\n-   --  unconditional message insertion character (!) at the end of the message\n-   --  text as described below.\n+   --  This normal suppression action may be overridden in cases 2-5 (but\n+   --  not in case 1) by setting All_Errors mode, or by setting the special\n+   --  unconditional message insertion character (!) as described below.\n \n    ---------------------------------------------------------\n    -- Error Message Text and Message Insertion Characters --\n@@ -230,7 +229,7 @@ package Errout is\n    --      name is defined, this insertion character has no effect.\n \n    --    Insertion character ! (Exclamation: unconditional message)\n-   --      The character ! appearing as the last character of a message makes\n+   --      The character ! appearing anywhere in the text of a message makes\n    --      the message unconditional which means that it is output even if it\n    --      would normally be suppressed. See section above for a description\n    --      of the cases in which messages are normally suppressed. Note that\n@@ -249,7 +248,7 @@ package Errout is\n \n    --    Insertion character !! (Double exclamation: unconditional warning)\n    --      Normally warning messages issued in other than the main unit are\n-   --      suppressed. If the message ends with !! then this suppression is\n+   --      suppressed. If the message contains !! then this suppression is\n    --      avoided. This is currently used by the Compile_Time_Warning pragma\n    --      to ensure the message for a with'ed unit is output, and for warnings\n    --      on ineffective back-end inlining, which is detected in units that"}, {"sha": "97ce9d77891fc4d4414c9e78a10bb2766a8de256", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=3d9183967d29d4754b1fb9ed78b4b75a77fe155f", "patch": "@@ -1226,29 +1226,41 @@ package body Erroutc is\n    -- Test_Style_Warning_Serious_Msg --\n    ------------------------------------\n \n-   procedure Test_Style_Warning_Serious_Msg (Msg : String) is\n+   procedure Test_Style_Warning_Serious_Unconditional_Msg (Msg : String) is\n    begin\n+      --  Nothing to do for continuation line\n+\n       if Msg (Msg'First) = '\\' then\n          return;\n       end if;\n \n-      Is_Serious_Error := True;\n-      Is_Warning_Msg   := False;\n+      --  Set initial values of globals (may be changed during scan)\n+\n+      Is_Serious_Error     := True;\n+      Is_Unconditional_Msg := False;\n+      Is_Warning_Msg       := False;\n+      Has_Double_Exclam    := False;\n \n       Is_Style_Msg :=\n         (Msg'Length > 7 and then Msg (Msg'First .. Msg'First + 6) = \"(style)\");\n \n-      if Is_Style_Msg then\n-         Is_Serious_Error := False;\n-      end if;\n-\n       for J in Msg'Range loop\n          if Msg (J) = '?'\n            and then (J = Msg'First or else Msg (J - 1) /= ''')\n          then\n             Is_Warning_Msg := True;\n             Warning_Msg_Char := ' ';\n \n+         elsif Msg (J) = '!'\n+           and then (J = Msg'First or else Msg (J - 1) /= ''')\n+         then\n+            Is_Unconditional_Msg := True;\n+            Warning_Msg_Char := ' ';\n+\n+            if J < Msg'Last and then Msg (J + 1) = '!' then\n+               Has_Double_Exclam := True;\n+            end if;\n+\n          elsif Msg (J) = '<'\n            and then (J = Msg'First or else Msg (J - 1) /= ''')\n          then\n@@ -1265,7 +1277,7 @@ package body Erroutc is\n       if Is_Warning_Msg or Is_Style_Msg then\n          Is_Serious_Error := False;\n       end if;\n-   end Test_Style_Warning_Serious_Msg;\n+   end Test_Style_Warning_Serious_Unconditional_Msg;\n \n    --------------------------------\n    -- Validate_Specific_Warnings --"}, {"sha": "02101852d44768c444ddc260f31e6d788b78670a", "filename": "gcc/ada/erroutc.ads", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2Ferroutc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2Ferroutc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.ads?ref=3d9183967d29d4754b1fb9ed78b4b75a77fe155f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -47,8 +47,20 @@ package Erroutc is\n    Flag_Source : Source_File_Index;\n    --  Source file index for source file where error is being posted\n \n+   Has_Double_Exclam : Boolean := False;\n+   --  Set true to indicate that the current message contains the insertion\n+   --  sequence !! (force warnings even in non-main unit source files).\n+\n+   Is_Serious_Error : Boolean := False;\n+   --  Set True for a serious error (i.e. any message that is not a warning\n+   --  or style message, and that does not contain a | insertion character).\n+\n+   Is_Unconditional_Msg : Boolean := False;\n+   --  Set True to indicate that the current message contains the insertion\n+   --  character ! and is thus to be treated as an unconditional message.\n+\n    Is_Warning_Msg : Boolean := False;\n-   --  Set True to indicate if current message is warning message\n+   --  Set True to indicate if current message is warning message (contains ?)\n \n    Warning_Msg_Char : Character;\n    --  Warning character, valid only if Is_Warning_Msg is True\n@@ -61,12 +73,6 @@ package Erroutc is\n    --  Set True to indicate if the current message is a style message\n    --  (i.e. a message whose text starts with the characters \"(style)\").\n \n-   Is_Serious_Error : Boolean := False;\n-   --  Set by Set_Msg_Text to indicate if current message is serious error\n-\n-   Is_Unconditional_Msg : Boolean := False;\n-   --  Set by Set_Msg_Text to indicate if current message is unconditional\n-\n    Kill_Message : Boolean := False;\n    --  A flag used to kill weird messages (e.g. those containing uninterpreted\n    --  implicit type references) if we have already seen at least one message\n@@ -490,14 +496,26 @@ package Erroutc is\n    --  Called in response to a pragma Warnings (On) to record the source\n    --  location from which warnings are to be turned back on.\n \n-   procedure Test_Style_Warning_Serious_Msg (Msg : String);\n-   --  Sets Is_Warning_Msg true if Msg is a warning message (contains a\n-   --  question mark character), and False otherwise. Is_Style_Msg is set true\n-   --  if Msg is a style message (starts with \"(style)\". Sets Is_Serious_Error\n-   --  True unless the message is a warning or style/info message or contains\n-   --  the character | indicating a non-serious error message. Note that the\n-   --  call has no effect for continuation messages (those whose first\n-   --  character is '\\').\n+   procedure Test_Style_Warning_Serious_Unconditional_Msg (Msg : String);\n+   --  Scans message text and sets the following variables:\n+   --\n+   --    Is_Warning_Msg is set True if Msg is a warning message (contains a\n+   --    question mark character), and False otherwise.\n+   --\n+   --    Is_Style_Msg is set True if Msg is a style message (starts with\n+   --    \"(style)\") and False otherwise.\n+   --\n+   --    Is_Serious_Error is set to True unless the message is a warning or\n+   --    style message or contains the character | (non-serious error).\n+   --\n+   --    Is_Unconditional_Msg is set True if the message contains the character\n+   --    ! and is otherwise set False.\n+   --\n+   --    Has_Double_Exclam is set True if the message contains the sequence !!\n+   --    and is otherwise set False.\n+   --\n+   --  Note that the call has no effect for continuation messages (those whose\n+   --  first character is '\\'), and all variables are left unchanged.\n \n    function Warnings_Suppressed (Loc : Source_Ptr) return Boolean;\n    --  Determines if given location is covered by a warnings off suppression"}, {"sha": "b79ea027f502caf4a08fb74b67bd45d3a1a91bc9", "filename": "gcc/ada/errutil.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2Ferrutil.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2Ferrutil.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrutil.adb?ref=3d9183967d29d4754b1fb9ed78b4b75a77fe155f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1991-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1991-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -163,9 +163,9 @@ package body Errutil is\n       --  Corresponds to the Sptr value in the error message object\n \n       Optr : Source_Ptr renames Flag_Location;\n-      --  Corresponds to the Optr value in the error message object. Note\n-      --  that for this usage, Sptr and Optr always have the same value,\n-      --  since we do not have to worry about generic instantiations.\n+      --  Corresponds to the Optr value in the error message object. Note that\n+      --  for this usage, Sptr and Optr always have the same value, since we do\n+      --  not have to worry about generic instantiations.\n \n    begin\n       if Errors_Must_Be_Ignored then\n@@ -176,7 +176,7 @@ package body Errutil is\n          raise Error_Msg_Exception;\n       end if;\n \n-      Test_Style_Warning_Serious_Msg (Msg);\n+      Test_Style_Warning_Serious_Unconditional_Msg (Msg);\n       Set_Msg_Text (Msg, Sptr);\n \n       --  Kill continuation if parent message killed\n@@ -680,8 +680,8 @@ package body Errutil is\n    ------------------\n \n    procedure Set_Msg_Text (Text : String; Flag : Source_Ptr) is\n-      C : Character;         -- Current character\n-      P : Natural;           -- Current index;\n+      C : Character; -- Current character\n+      P : Natural;   -- Current index;\n \n    begin\n       Manual_Quote_Mode := False;\n@@ -744,7 +744,7 @@ package body Errutil is\n             Set_Msg_Char ('\"');\n \n          elsif C = '!' then\n-            Is_Unconditional_Msg := True;\n+            null;\n \n          elsif C = '?' then\n             null;"}, {"sha": "89db1172d2bb7b9bc88a5a222f715fedd9f59f85", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=3d9183967d29d4754b1fb9ed78b4b75a77fe155f", "patch": "@@ -9066,11 +9066,11 @@ dependence on a library unit.\n @node No_Direct_Boolean_Operators\n @unnumberedsubsec No_Direct_Boolean_Operators\n @findex No_Direct_Boolean_Operators\n-[GNAT] This restriction ensures that no logical (and/or/xor) are used on\n-operands of type Boolean (or any type derived\n-from Boolean). This is intended for use in safety critical programs\n-where the certification protocol requires the use of short-circuit\n-(and then, or else) forms for all composite boolean operations.\n+[GNAT] This restriction ensures that no logical operators (and/or/xor)\n+are used on operands of type Boolean (or any type derived from Boolean).\n+This is intended for use in safety critical programs where the certification\n+protocol requires the use of short-circuit (and then, or else) forms for all\n+composite boolean operations.\n \n @node No_Dispatch\n @unnumberedsubsec No_Dispatch"}, {"sha": "4099ace5c67b12f6667f0f505455bf329f54a1aa", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=3d9183967d29d4754b1fb9ed78b4b75a77fe155f", "patch": "@@ -17251,6 +17251,7 @@ The pragmas listed below should be used with caution inside libraries,\n as they can create incompatibilities with other Ada libraries:\n @itemize @bullet\n @item pragma @code{Locking_Policy}\n+@item pragma @code{Partition_Elaboration_Policy}\n @item pragma @code{Queuing_Policy}\n @item pragma @code{Task_Dispatching_Policy}\n @item pragma @code{Unreserve_All_Interrupts}"}, {"sha": "d879cb7813a11475267711e469f34039e1b1cd5e", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=3d9183967d29d4754b1fb9ed78b4b75a77fe155f", "patch": "@@ -406,14 +406,14 @@ procedure GNATCmd is\n          end if;\n       end loop;\n \n-      --  If all arguments are switches and there is no switch -files=, add\n-      --  the path names of all the sources of the main project.\n+      --  If all arguments are switches and there is no switch -files=, add the\n+      --  path names of all the sources of the main project.\n \n       if Add_Sources then\n \n-         --  For gnatcheck, gnatpp, and gnatmetric, create a temporary file\n-         --  and put the list of sources in it. For gnatstack create a\n-         --  temporary file with the list of .ci files.\n+         --  For gnatcheck, gnatpp, and gnatmetric, create a temporary file and\n+         --  put the list of sources in it. For gnatstack create a temporary\n+         --  file with the list of .ci files.\n \n          if The_Command = Check  or else\n             The_Command = Pretty or else"}, {"sha": "333fb4bd397d58dc7c2fdbbd469c5aac2cc30231", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=3d9183967d29d4754b1fb9ed78b4b75a77fe155f", "patch": "@@ -2472,10 +2472,22 @@ package body Sem_Ch4 is\n             Process_Function_Call;\n \n          elsif Nkind (P) = N_Selected_Component\n+           and then Present (Entity (Selector_Name (P)))\n            and then Is_Overloadable (Entity (Selector_Name (P)))\n          then\n             Process_Function_Call;\n \n+         --  In ASIS mode within a generic, a prefixed call is analyzed and\n+         --  partially rewritten but the original indexed component has not\n+         --  yet been rewritten as a call. Perform the replacement now.\n+\n+         elsif Nkind (P) = N_Selected_Component\n+           and then Nkind (Parent (P)) = N_Function_Call\n+           and then ASIS_Mode\n+         then\n+            Rewrite (N, Parent (P));\n+            Analyze (N);\n+\n          else\n             --  Indexed component, slice, or a call to a member of a family\n             --  entry, which will be converted to an entry call later.\n@@ -7202,13 +7214,13 @@ package body Sem_Ch4 is\n          --  though they may be overwritten during resolution if overloaded.\n          --  Perform the same transformation in ASIS mode, because during\n          --  pre-analysis of a pre/post condition the node will not be\n-         --  rewritten as a call.\n+         --  rewritten as a call. (is this ASIS comment obsolete ???)\n \n          Set_Comes_From_Source (Subprog, Comes_From_Source (N));\n          Set_Comes_From_Source (Call_Node, Comes_From_Source (N));\n \n          if Nkind (N) = N_Selected_Component\n-           and then (not Inside_A_Generic or ASIS_Mode)\n+           and then not Inside_A_Generic\n          then\n             Set_Entity (Selector_Name (N), Entity (Subprog));\n             Set_Etype  (Selector_Name (N), Etype (Entity (Subprog)));"}, {"sha": "37ac4cd25f9397322b094b96c7fc6f2dd999c68b", "filename": "gcc/ada/targparm.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2Ftargparm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9183967d29d4754b1fb9ed78b4b75a77fe155f/gcc%2Fada%2Ftargparm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.adb?ref=3d9183967d29d4754b1fb9ed78b4b75a77fe155f", "patch": "@@ -388,6 +388,16 @@ package body Targparm is\n             Opt.Init_Or_Norm_Scalars := True;\n             goto Line_Loop_Continue;\n \n+         --  Partition_Elaboration_Policy\n+\n+         elsif System_Text (P .. P + 36) =\n+                 \"pragma Partition_Elaboration_Policy (\"\n+         then\n+            P := P + 37;\n+            Opt.Partition_Elaboration_Policy := System_Text (P);\n+            Opt.Partition_Elaboration_Policy_Sloc := System_Location;\n+            goto Line_Loop_Continue;\n+\n          --  Polling (On)\n \n          elsif System_Text (P .. P + 19) = \"pragma Polling (On);\" then"}]}