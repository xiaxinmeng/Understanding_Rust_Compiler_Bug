{"sha": "496f4f884716ae061f771a62e44868a32dbd502f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk2ZjRmODg0NzE2YWUwNjFmNzcxYTYyZTQ0ODY4YTMyZGJkNTAyZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-04T09:01:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-04T09:01:08Z"}, "message": "match.pd: Decrease number of nop conversions around bitwise ops [PR94718]\n\nOn the following testcase, there are in *.optimized dump 14 nop conversions\n(from signed to unsigned and back), while this patch decreases that number\nto just 4; for bitwise ops it really doesn't matter if they are performed in\nsigned or unsigned, so the patch (in GIMPLE only, there are some comments\nabout it being undesirable during GENERIC earlier), if it sees both\nbitop operands nop converted from the same types performs the bitop in their\nnon-converted type and converts the result (i.e. 2 conversions into 1),\nsimilarly, if a bitop has one operand nop converted from something, the\nother not and the result is converted back to the type of the nop converted\noperand before conversion, it is possible to replace those 2 conversions\nwith just a single conversion of the other operand.\n\n2020-05-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/94718\n\t* match.pd (bitop (convert @0) (convert? @1)): For GIMPLE, if we can,\n\treplace two nop conversions on bit_{and,ior,xor} argument\n\tand result with just one conversion on the result or another argument.\n\n\t* gcc.dg/tree-ssa/pr94718-3.c: New test.", "tree": {"sha": "97ee7206b36e9c4ad10545727c3d0f13eec435c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97ee7206b36e9c4ad10545727c3d0f13eec435c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/496f4f884716ae061f771a62e44868a32dbd502f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/496f4f884716ae061f771a62e44868a32dbd502f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/496f4f884716ae061f771a62e44868a32dbd502f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/496f4f884716ae061f771a62e44868a32dbd502f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73a8043481d24ac86ce8d19459276181dfd9c858", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a8043481d24ac86ce8d19459276181dfd9c858", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a8043481d24ac86ce8d19459276181dfd9c858"}], "stats": {"total": 75, "additions": 72, "deletions": 3}, "files": [{"sha": "036a40303087d0bb627b901054fec642018e534b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/496f4f884716ae061f771a62e44868a32dbd502f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/496f4f884716ae061f771a62e44868a32dbd502f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=496f4f884716ae061f771a62e44868a32dbd502f", "patch": "@@ -1,5 +1,10 @@\n 2020-05-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/94718\n+\t* match.pd (bitop (convert @0) (convert? @1)): For GIMPLE, if we can,\n+\treplace two nop conversions on bit_{and,ior,xor} argument\n+\tand result with just one conversion on the result or another argument.\n+\n \tPR tree-optimization/94718\n \t* fold-const.c (fold_binary_loc): Move (X & C) eqne (Y & C)\n \t-> (X ^ Y) & C eqne 0 optimization to ..."}, {"sha": "929be14e8b7dfdd2ce9545bd9cee953cb99d32ec", "filename": "gcc/match.pd", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/496f4f884716ae061f771a62e44868a32dbd502f/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/496f4f884716ae061f771a62e44868a32dbd502f/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=496f4f884716ae061f771a62e44868a32dbd502f", "patch": "@@ -1311,7 +1311,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    We combine the above two cases by using a conditional convert.  */\n (for bitop (bit_and bit_ior bit_xor)\n  (simplify\n-  (bitop (convert @0) (convert? @1))\n+  (bitop (convert@2 @0) (convert?@3 @1))\n   (if (((TREE_CODE (@1) == INTEGER_CST\n \t && INTEGRAL_TYPE_P (TREE_TYPE (@0))\n \t && int_fits_type_p (@1, TREE_TYPE (@0)))\n@@ -1330,8 +1330,24 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t   || GET_MODE_CLASS (TYPE_MODE (type)) != MODE_INT\n \t   /* Or if the precision of TO is not the same as the precision\n \t      of its mode.  */\n-\t   || !type_has_mode_precision_p (type)))\n-   (convert (bitop @0 (convert @1))))))\n+\t   || !type_has_mode_precision_p (type)\n+\t   /* In GIMPLE, getting rid of 2 conversions for one new results\n+\t      in smaller IL.  */\n+\t   || (GIMPLE\n+\t       && TREE_CODE (@1) != INTEGER_CST\n+\t       && tree_nop_conversion_p (type, TREE_TYPE (@0))\n+\t       && single_use (@2)\n+\t       && single_use (@3))))\n+   (convert (bitop @0 (convert @1)))))\n+ /* In GIMPLE, getting rid of 2 conversions for one new results\n+    in smaller IL.  */\n+ (simplify\n+  (convert (bitop:cs@2 (nop_convert:s @0) @1))\n+  (if (GIMPLE\n+       && TREE_CODE (@1) != INTEGER_CST\n+       && tree_nop_conversion_p (type, TREE_TYPE (@2))\n+       && types_match (type, @0))\n+   (bitop @0 (convert @1)))))\n \n (for bitop (bit_and bit_ior)\n      rbitop (bit_ior bit_and)"}, {"sha": "09979b5749c7fad642d4ce81395943beab03b52d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/496f4f884716ae061f771a62e44868a32dbd502f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/496f4f884716ae061f771a62e44868a32dbd502f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=496f4f884716ae061f771a62e44868a32dbd502f", "patch": "@@ -1,5 +1,8 @@\n 2020-05-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/94718\n+\t* gcc.dg/tree-ssa/pr94718-3.c: New test.\n+\n \tPR tree-optimization/94718\n \t* gcc.dg/tree-ssa/pr94718-1.c: New test.\n \t* gcc.dg/tree-ssa/pr94718-2.c: New test."}, {"sha": "d1fb4a645044a625d62fb77270c08957a5daed49", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr94718-3.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/496f4f884716ae061f771a62e44868a32dbd502f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94718-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/496f4f884716ae061f771a62e44868a32dbd502f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94718-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94718-3.c?ref=496f4f884716ae061f771a62e44868a32dbd502f", "patch": "@@ -0,0 +1,45 @@\n+/* PR tree-optimization/94718 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-ipa-icf -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \" \\\\\\(int\\\\\\) \" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" \\\\\\(unsigned int\\\\\\) \" 2 \"optimized\" } } */\n+\n+int\n+f1 (int x, int y)\n+{\n+  return (int) ((unsigned) x | (unsigned) y);\n+}\n+\n+int\n+f2 (int x, int y)\n+{\n+  unsigned a = x;\n+  unsigned b = y;\n+  return a | b;\n+}\n+\n+int\n+f3 (int x, unsigned y)\n+{\n+  return (int) ((unsigned) x | y);\n+}\n+\n+int\n+f4 (int x, unsigned y)\n+{\n+  unsigned a = x;\n+  return a | y;\n+}\n+\n+unsigned\n+f5 (int x, unsigned y)\n+{\n+  return (unsigned) (x | (int) y);\n+}\n+\n+unsigned\n+f6 (int x, unsigned y)\n+{\n+  int a = y;\n+  return x | a;\n+}"}]}