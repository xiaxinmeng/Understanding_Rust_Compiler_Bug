{"sha": "837142257cbde3cc03ee0dacd1d7b2fb4fa48bae", "node_id": "C_kwDOANBUbNoAKDgzNzE0MjI1N2NiZGUzY2MwM2VlMGRhY2QxZDdiMmZiNGZhNDhiYWU", "commit": {"author": {"name": "Immad Mir", "email": "mirimmad@outlook.com", "date": "2022-08-11T16:15:54Z"}, "committer": {"name": "Immad Mir", "email": "mirimmad@outlook.com", "date": "2022-08-11T16:16:05Z"}, "message": "analyzer: fix ICE casued by dup2 in sm-fd.cc[PR106551]\n\nThis patch fixes the ICE caused by valid_to_unchecked_state,\nat analyzer/sm-fd.cc by handling the m_start state in\ncheck_for_dup.\n\nTested lightly on x86_64.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/106551\n\t* sm-fd.cc (check_for_dup): handle the m_start\n\tstate when transitioning the state of LHS\n\tof dup, dup2 and dup3 call.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/fd-dup-1.c: New testcases.\n\t* gcc.dg/analyzer/fd-uninit-1.c: Remove bogus\n\twarning.\nSigned-off-by: Immad Mir <mirimmad@outlook.com>", "tree": {"sha": "b9ce4bc7e40ab06f9a06fa664ce21eac0ab4c18c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9ce4bc7e40ab06f9a06fa664ce21eac0ab4c18c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/837142257cbde3cc03ee0dacd1d7b2fb4fa48bae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/837142257cbde3cc03ee0dacd1d7b2fb4fa48bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/837142257cbde3cc03ee0dacd1d7b2fb4fa48bae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/837142257cbde3cc03ee0dacd1d7b2fb4fa48bae/comments", "author": null, "committer": null, "parents": [{"sha": "04ce2400b35225302e0d6883bb0817378180f5d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ce2400b35225302e0d6883bb0817378180f5d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04ce2400b35225302e0d6883bb0817378180f5d7"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "e02b86baad18a3a2e3729f10558b4cf65830ca47", "filename": "gcc/analyzer/sm-fd.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837142257cbde3cc03ee0dacd1d7b2fb4fa48bae/gcc%2Fanalyzer%2Fsm-fd.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837142257cbde3cc03ee0dacd1d7b2fb4fa48bae/gcc%2Fanalyzer%2Fsm-fd.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-fd.cc?ref=837142257cbde3cc03ee0dacd1d7b2fb4fa48bae", "patch": "@@ -971,7 +971,8 @@ fd_state_machine::check_for_dup (sm_context *sm_ctxt, const supernode *node,\n   state_t state_arg_1 = sm_ctxt->get_state (stmt, arg_1);\n   if (state_arg_1 == m_stop)\n     return;\n-  if (!(is_constant_fd_p (state_arg_1) || is_valid_fd_p (state_arg_1)))\n+  if (!(is_constant_fd_p (state_arg_1) || is_valid_fd_p (state_arg_1)\n+\t|| state_arg_1 == m_start))\n     {\n       check_for_open_fd (sm_ctxt, node, stmt, call, callee_fndecl,\n \t\t\t DIRS_READ_WRITE);\n@@ -983,7 +984,7 @@ fd_state_machine::check_for_dup (sm_context *sm_ctxt, const supernode *node,\n     case DUP_1:\n       if (lhs)\n \t{\n-\t  if (is_constant_fd_p (state_arg_1))\n+\t  if (is_constant_fd_p (state_arg_1) || state_arg_1 == m_start)\n \t    sm_ctxt->set_next_state (stmt, lhs, m_unchecked_read_write);\n \t  else\n \t    sm_ctxt->set_next_state (stmt, lhs,\n@@ -999,7 +1000,8 @@ fd_state_machine::check_for_dup (sm_context *sm_ctxt, const supernode *node,\n       if (state_arg_2 == m_stop)\n \treturn;\n       /* Check if -1 was passed as second argument to dup2.  */\n-      if (!(is_constant_fd_p (state_arg_2) || is_valid_fd_p (state_arg_2)))\n+      if (!(is_constant_fd_p (state_arg_2) || is_valid_fd_p (state_arg_2)\n+\t    || state_arg_2 == m_start))\n \t{\n \t  sm_ctxt->warn (\n \t      node, stmt, arg_2,\n@@ -1011,7 +1013,7 @@ fd_state_machine::check_for_dup (sm_context *sm_ctxt, const supernode *node,\n       file descriptor i.e the first argument.  */\n       if (lhs)\n \t{\n-\t  if (is_constant_fd_p (state_arg_1))\n+\t  if (is_constant_fd_p (state_arg_1) || state_arg_1 == m_start)\n \t    sm_ctxt->set_next_state (stmt, lhs, m_unchecked_read_write);\n \t  else\n \t    sm_ctxt->set_next_state (stmt, lhs,"}, {"sha": "b971d31b1c77c0d9df7b646dcf8d4780daa3c30d", "filename": "gcc/testsuite/gcc.dg/analyzer/fd-dup-1.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837142257cbde3cc03ee0dacd1d7b2fb4fa48bae/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-dup-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837142257cbde3cc03ee0dacd1d7b2fb4fa48bae/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-dup-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-dup-1.c?ref=837142257cbde3cc03ee0dacd1d7b2fb4fa48bae", "patch": "@@ -220,4 +220,29 @@ test_19 (const char *path, void *buf)\n         close (fd);\n     }\n     \n-}\n\\ No newline at end of file\n+}\n+\n+extern int m;\n+\n+void\n+test_20 ()\n+{\n+    int fd = dup (m); \n+    close (fd);\n+}\n+\n+void\n+test_21 ()\n+{\n+    int fd = dup2 (m, 1); \n+    close (fd);\n+}\n+\n+void\n+test_22 (int flags)\n+{\n+    int fd = dup3 (m, 1, flags);\n+    close (fd);\n+}\n+\n+"}, {"sha": "1084d1b4da28071a09a5500f79fe3c07d677b37a", "filename": "gcc/testsuite/gcc.dg/analyzer/fd-uninit-1.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/837142257cbde3cc03ee0dacd1d7b2fb4fa48bae/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-uninit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/837142257cbde3cc03ee0dacd1d7b2fb4fa48bae/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-uninit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-uninit-1.c?ref=837142257cbde3cc03ee0dacd1d7b2fb4fa48bae", "patch": "@@ -9,8 +9,6 @@ test_1 ()\n {\n   int m;\n   return dup (m); /* { dg-warning \"use of uninitialized value 'm'\" \"uninit\" } */\n-  /* { dg-bogus \"'dup' on possibly invalid file descriptor 'm'\" \"invalid fd false +ve\" { xfail *-*-* } .-1 } */\n-  /* XFAIL: probably covered by fix for PR analyzer/106551.  */\n }\n \n int"}]}