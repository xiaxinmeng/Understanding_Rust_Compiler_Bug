{"sha": "103fc15d39020d97a613299918b779c594ea07cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAzZmMxNWQzOTAyMGQ5N2E2MTMyOTk5MThiNzc5YzU5NGVhMDdjYw==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@wasabisystems.com", "date": "2003-06-02T03:53:54Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2003-06-02T03:53:54Z"}, "message": "arm.c (arm_use_dfa_pipeline_interface): Declare.\n\n2003-06-02  Ben Elliston  <bje@wasabisystems.com>\n\n\t* config/arm/arm.c (arm_use_dfa_pipeline_interface): Declare.\n\t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Define if not already defined.\n\t(arm_use_dfa_pipeline_interface): Implement.\n\t* config/arm/arm.md (arm): New automaton.\n\t(write_buf): Remove function units; new cpu unit.\n\t(write_blockage): Remove function units; new cpu unit.\n\t(core): Remove function units; new cpu unit.\n\t(r_mem_f_wbuf): New instruction reservation.\n\t(store1_wbuf, store2_wbuf, store3_wbuf, store4_wbuf): Likewise.\n\t(store1_ldsched, store2, store3, store4): Likewise.\n\t(load_ldsched, load_ldsched_xscale, load_or_store): Likewise.\n\t(mult, mult_ldsched, mult_ldsched_strongarm): Likewise.\n\t(multi_cycle, single_cycle): Likewise.\n\t* config/arm/fpa.md (armfp): New automaton.\n\t(fpa): Remove function units; new cpu unit.\n\t(fpa_mem): Remove function unit; new cpu unit.\n\t(fdivx, fdivd, fdivs, fmul, ffmul, farith, ffarith): New reservations.\n\t(r_2_f, f_2_r, f_load, f_store, r_mem_f, f_mem_r): Likewise.\n\nFrom-SVN: r67322", "tree": {"sha": "b917381f3c798c9a17575974d61752aa53ce00db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b917381f3c798c9a17575974d61752aa53ce00db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/103fc15d39020d97a613299918b779c594ea07cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/103fc15d39020d97a613299918b779c594ea07cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/103fc15d39020d97a613299918b779c594ea07cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/103fc15d39020d97a613299918b779c594ea07cc/comments", "author": null, "committer": null, "parents": [{"sha": "3ae1d4c240f91dc62b85be2addb733fb773956b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae1d4c240f91dc62b85be2addb733fb773956b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ae1d4c240f91dc62b85be2addb733fb773956b9"}], "stats": {"total": 297, "additions": 181, "deletions": 116}, "files": [{"sha": "0377b610d50d9b48ff8aa5f089d06e3d9910f496", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103fc15d39020d97a613299918b779c594ea07cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103fc15d39020d97a613299918b779c594ea07cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=103fc15d39020d97a613299918b779c594ea07cc", "patch": "@@ -1,3 +1,24 @@\n+2003-06-02  Ben Elliston  <bje@wasabisystems.com>\n+\n+\t* config/arm/arm.c (arm_use_dfa_pipeline_interface): Declare.\n+\t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Define if not already defined.\n+\t(arm_use_dfa_pipeline_interface): Implement.\n+\t* config/arm/arm.md (arm): New automaton.\n+\t(write_buf): Remove function units; new cpu unit.\n+\t(write_blockage): Remove function units; new cpu unit.\n+\t(core): Remove function units; new cpu unit.\n+\t(r_mem_f_wbuf): New instruction reservation.\n+\t(store1_wbuf, store2_wbuf, store3_wbuf, store4_wbuf): Likewise.\n+\t(store1_ldsched, store2, store3, store4): Likewise.\n+\t(load_ldsched, load_ldsched_xscale, load_or_store): Likewise.\n+\t(mult, mult_ldsched, mult_ldsched_strongarm): Likewise.\n+\t(multi_cycle, single_cycle): Likewise.\n+\t* config/arm/fpa.md (armfp): New automaton.\n+\t(fpa): Remove function units; new cpu unit.\n+\t(fpa_mem): Remove function unit; new cpu unit.\n+\t(fdivx, fdivd, fdivs, fmul, ffmul, farith, ffarith): New reservations.\n+\t(r_2_f, f_2_r, f_load, f_store, r_mem_f, f_mem_r): Likewise.\n+\n 2003-06-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtin-attrs.def (ATTR_ASM_FPRINTF): New."}, {"sha": "e767dab3567fc58c78262463762aee255b000b32", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103fc15d39020d97a613299918b779c594ea07cc/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103fc15d39020d97a613299918b779c594ea07cc/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=103fc15d39020d97a613299918b779c594ea07cc", "patch": "@@ -127,6 +127,7 @@ static void\t thumb_output_function_prologue PARAMS ((FILE *, Hint));\n static int\t arm_comp_type_attributes\tPARAMS ((tree, tree));\n static void\t arm_set_default_type_attributes PARAMS ((tree));\n static int\t arm_adjust_cost\t\tPARAMS ((rtx, rtx, rtx, int));\n+static int\t arm_use_dfa_pipeline_interface PARAMS ((void));\n static int\t count_insns_for_constant\tPARAMS ((Hint, int));\n static int\t arm_get_strip_length\t\tPARAMS ((int));\n static bool      arm_function_ok_for_sibcall    PARAMS ((tree, tree));\n@@ -193,6 +194,9 @@ static void\t aof_globalize_label\t\tPARAMS ((FILE *, Ccstar));\n #undef  TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST arm_adjust_cost\n \n+#undef  TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE \n+#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE arm_use_dfa_pipeline_interface\n+\n #undef TARGET_ENCODE_SECTION_INFO\n #ifdef ARM_PE\n #define TARGET_ENCODE_SECTION_INFO  arm_pe_encode_section_info\n@@ -3468,6 +3472,12 @@ arm_address_cost (X)\n   return (TARGET_ARM ? ARM_ADDRESS_COST (X) : THUMB_ADDRESS_COST (X));\n }\n \n+static int\n+arm_use_dfa_pipeline_interface ()\n+{\n+  return true;\n+}\n+\n static int\n arm_adjust_cost (insn, link, dep, cost)\n      rtx insn;"}, {"sha": "2d231c1c045319c7121f76ae91924f45355f9e6c", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 78, "deletions": 81, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103fc15d39020d97a613299918b779c594ea07cc/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103fc15d39020d97a613299918b779c594ea07cc/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=103fc15d39020d97a613299918b779c594ea07cc", "patch": "@@ -249,12 +249,10 @@\n ;; distant label.  Only applicable to Thumb code.\n (define_attr \"far_jump\" \"yes,no\" (const_string \"no\"))\n \n-;; (define_function_unit {name} {num-units} {n-users} {test}\n-;;                       {ready-delay} {issue-delay} [{conflict-list}])\n+(define_automaton \"arm\")\n \n-;;--------------------------------------------------------------------\n ;; Write buffer\n-;;--------------------------------------------------------------------\n+;\n ; Strictly, we should model a 4-deep write buffer for ARM7xx based chips\n ;\n ; The write buffer on some of the arm6 processors is hard to model exactly.\n@@ -266,102 +264,101 @@\n ; writes will take 2 FCLK cycles per word, if FCLK and MCLK are asynchronous\n ; (they aren't allowed to be at present) then there is a startup cost of 1MCLK\n ; cycle to add as well.\n+(define_cpu_unit \"write_buf\" \"arm\")\n \n-(define_function_unit \"write_buf\" 1 2\n-  (and (eq_attr \"model_wbuf\" \"yes\")\n-       (eq_attr \"type\" \"store1,r_mem_f\")) 5 3)\n-(define_function_unit \"write_buf\" 1 2 \n-  (and (eq_attr \"model_wbuf\" \"yes\")\n-       (eq_attr \"type\" \"store2\")) 7 4)\n-(define_function_unit \"write_buf\" 1 2\n-  (and (eq_attr \"model_wbuf\" \"yes\")\n-       (eq_attr \"type\" \"store3\")) 9 5)\n-(define_function_unit \"write_buf\" 1 2\n-  (and (eq_attr \"model_wbuf\" \"yes\")\n-       (eq_attr \"type\" \"store4\")) 11 6)\n-\n-;;--------------------------------------------------------------------\n ;; Write blockage unit\n-;;--------------------------------------------------------------------\n+;\n ; The write_blockage unit models (partially), the fact that reads will stall\n ; until the write buffer empties.\n ; The f_mem_r and r_mem_f could also block, but they are to the stack,\n ; so we don't model them here\n-(define_function_unit \"write_blockage\" 1 0 (and (eq_attr \"model_wbuf\" \"yes\")\n-\t\t\t\t\t\t(eq_attr \"type\" \"store1\")) 5 5\n-\t[(eq_attr \"write_conflict\" \"yes\")])\n-(define_function_unit \"write_blockage\" 1 0 (and (eq_attr \"model_wbuf\" \"yes\")\n-\t\t\t\t\t\t(eq_attr \"type\" \"store2\")) 7 7\n-\t[(eq_attr \"write_conflict\" \"yes\")])\n-(define_function_unit \"write_blockage\" 1 0 (and (eq_attr \"model_wbuf\" \"yes\")\n-\t\t\t\t\t\t(eq_attr \"type\" \"store3\")) 9 9\n-\t[(eq_attr \"write_conflict\" \"yes\")])\n-(define_function_unit \"write_blockage\" 1 0\n-\t(and (eq_attr \"model_wbuf\" \"yes\") (eq_attr \"type\" \"store4\")) 11 11\n-\t[(eq_attr \"write_conflict\" \"yes\")])\n-(define_function_unit \"write_blockage\" 1 0\n-\t(and (eq_attr \"model_wbuf\" \"yes\")\n-\t     (eq_attr \"write_conflict\" \"yes\")) 1 1)\n-\n-;;--------------------------------------------------------------------\n-;; Core unit\n-;;--------------------------------------------------------------------\n-; Everything must spend at least one cycle in the core unit\n-(define_function_unit \"core\" 1 0 (eq_attr \"core_cycles\" \"single\") 1 1)\n-\n-(define_function_unit \"core\" 1 0\n-  (and (eq_attr \"ldsched\" \"yes\") (eq_attr \"type\" \"store1\")) 1 1)\n-\n-(define_function_unit \"core\" 1 0\n-  (and (eq_attr \"ldsched\" \"yes\") (eq_attr \"type\" \"load\")) 2 1)\n-\n-;; We do not need to conditionalize the define_function_unit immediately\n-;; above.  This one will be ignored for anything other than xscale\n-;; compiles and for xscale compiles it provides a larger delay\n-;; and the scheduler will DTRT.\n-;; FIXME: this test needs to be revamped to not depend on this feature \n-;; of the scheduler.\n-\n-(define_function_unit \"core\" 1 0\n-  (and (and (eq_attr \"ldsched\" \"yes\") (eq_attr \"type\" \"load\"))\n-       (eq_attr \"is_xscale\" \"yes\"))\n-   3 1)\n+(define_cpu_unit \"write_blockage\" \"arm\")\n \n-(define_function_unit \"core\" 1 0\n-  (and (eq_attr \"ldsched\" \"!yes\") (eq_attr \"type\" \"load,store1\")) 2 2)\n+;; Core\n+;\n+(define_cpu_unit \"core\" \"arm\")\n \n-(define_function_unit \"core\" 1 0\n-  (and (eq_attr \"fpu\" \"fpa\") (eq_attr \"type\" \"f_load\")) 3 3)\n+(define_insn_reservation \"r_mem_f_wbuf\" 5\n+  (and (eq_attr \"model_wbuf\" \"yes\")\n+       (eq_attr \"type\" \"r_mem_f\"))\n+  \"core+write_buf*3\")\n \n-(define_function_unit \"core\" 1 0\n-  (and (eq_attr \"fpu\" \"fpa\") (eq_attr \"type\" \"f_store\")) 4 4)\n+(define_insn_reservation \"store1_wbuf\" 5\n+  (and (eq_attr \"model_wbuf\" \"yes\")\n+       (eq_attr \"type\" \"store1\"))\n+  \"core+write_buf*3+write_blockage*5\")\n \n-(define_function_unit \"core\" 1 0\n-  (and (eq_attr \"fpu\" \"fpa\") (eq_attr \"type\" \"r_mem_f\")) 6 6)\n+(define_insn_reservation \"store2_wbuf\" 7\n+  (and (eq_attr \"model_wbuf\" \"yes\")\n+       (eq_attr \"type\" \"store2\"))\n+  \"core+write_buf*4+write_blockage*7\")\n \n-(define_function_unit \"core\" 1 0\n-  (and (eq_attr \"fpu\" \"fpa\") (eq_attr \"type\" \"f_mem_r\")) 7 7)\n+(define_insn_reservation \"store3_wbuf\" 9\n+  (and (eq_attr \"model_wbuf\" \"yes\")\n+       (eq_attr \"type\" \"store3\"))\n+  \"core+write_buf*5+write_blockage*9\")\n \n-(define_function_unit \"core\" 1 0\n-  (and (eq_attr \"ldsched\" \"no\") (eq_attr \"type\" \"mult\")) 16 16)\n+(define_insn_reservation \"store4_wbuf\" 11\n+  (and (eq_attr \"model_wbuf\" \"yes\")\n+       (eq_attr \"type\" \"store4\"))\n+  \"core+write_buf*6+write_blockage*11\")\n \n-(define_function_unit \"core\" 1 0\n-  (and (and (eq_attr \"ldsched\" \"yes\") (eq_attr \"is_strongarm\" \"no\"))\n-       (eq_attr \"type\" \"mult\")) 4 4)\n+(define_insn_reservation \"store2\" 3\n+  (and (eq_attr \"model_wbuf\" \"no\")\n+       (eq_attr \"type\" \"store2\"))\n+  \"core*3\")\n \n-(define_function_unit \"core\" 1 0\n-  (and (and (eq_attr \"ldsched\" \"yes\") (eq_attr \"is_strongarm\" \"yes\"))\n-       (eq_attr \"type\" \"mult\")) 3 2)\n+(define_insn_reservation \"store3\" 4\n+  (and (eq_attr \"model_wbuf\" \"no\")\n+       (eq_attr \"type\" \"store3\"))\n+  \"core*4\")\n+\n+(define_insn_reservation \"store4\" 5\n+  (and (eq_attr \"model_wbuf\" \"no\")\n+       (eq_attr \"type\" \"store4\"))\n+  \"core*5\")\n+\n+(define_insn_reservation \"store1_ldsched\" 1\n+  (and (eq_attr \"ldsched\" \"yes\") (eq_attr \"type\" \"store1\"))\n+  \"core\")\n+\n+(define_insn_reservation \"load_ldsched_xscale\" 3\n+  (and (and (eq_attr \"ldsched\" \"yes\") (eq_attr \"type\" \"load\"))\n+       (eq_attr \"is_xscale\" \"yes\"))\n+  \"core\")\n \n-(define_function_unit \"core\" 1 0 (eq_attr \"type\" \"store2\") 3 3)\n+(define_insn_reservation \"load_ldsched\" 2\n+  (and (and (eq_attr \"ldsched\" \"yes\") (eq_attr \"type\" \"load\"))\n+       (eq_attr \"is_xscale\" \"no\"))\n+  \"core\")\n+\n+(define_insn_reservation \"load_or_store\" 2\n+  (and (eq_attr \"ldsched\" \"!yes\") (eq_attr \"type\" \"load,store1\"))\n+  \"core*2\")\n \n-(define_function_unit \"core\" 1 0 (eq_attr \"type\" \"store3\") 4 4)\n+(define_insn_reservation \"mult\" 16\n+  (and (eq_attr \"ldsched\" \"no\") (eq_attr \"type\" \"mult\"))\n+  \"core*16\")\n \n-(define_function_unit \"core\" 1 0 (eq_attr \"type\" \"store4\") 5 5)\n+(define_insn_reservation \"mult_ldsched_strongarm\" 3\n+  (and (and (eq_attr \"ldsched\" \"yes\") (eq_attr \"is_strongarm\" \"yes\"))\n+       (eq_attr \"type\" \"mult\"))\n+  \"core*2\")\n \n-(define_function_unit \"core\" 1 0\n+(define_insn_reservation \"mult_ldsched\" 4\n+  (and (and (eq_attr \"ldsched\" \"yes\") (eq_attr \"is_strongarm\" \"no\"))\n+       (eq_attr \"type\" \"mult\"))\n+  \"core*4\")\n+\n+(define_insn_reservation \"multi_cycle\" 32\n   (and (eq_attr \"core_cycles\" \"multi\")\n-       (eq_attr \"type\" \"!mult,load,store1,store2,store3,store4\")) 32 32)\n+       (eq_attr \"type\" \"!mult,load,store1,store2,store3,store4\"))\n+  \"core*32\")\n+\n+(define_insn_reservation \"single_cycle\" 1\n+  (eq_attr \"core_cycles\" \"single\")\n+  \"core\")\n+\n \f\n ;;---------------------------------------------------------------------------\n ;; Insn patterns"}, {"sha": "3b6efbfbbda36daf1375bcecd8f9fe29770d5573", "filename": "gcc/config/arm/fpa.md", "status": "modified", "additions": 72, "deletions": 35, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103fc15d39020d97a613299918b779c594ea07cc/gcc%2Fconfig%2Farm%2Ffpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103fc15d39020d97a613299918b779c594ea07cc/gcc%2Fconfig%2Farm%2Ffpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffpa.md?ref=103fc15d39020d97a613299918b779c594ea07cc", "patch": "@@ -22,43 +22,80 @@\n ;; the Free Software Foundation, 59 Temple Place - Suite 330,\n ;; Boston, MA 02111-1307, USA.\n \n-;;--------------------------------------------------------------------\n-;; Floating point unit (FPA)\n-;;--------------------------------------------------------------------\n-(define_function_unit \"fpa\" 1 0 (and (eq_attr \"fpu\" \"fpa\")\n-\t\t\t\t     (eq_attr \"type\" \"fdivx\")) 71 69)\n-\n-(define_function_unit \"fpa\" 1 0 (and (eq_attr \"fpu\" \"fpa\")\n-\t\t\t\t     (eq_attr \"type\" \"fdivd\")) 59 57)\n-\n-(define_function_unit \"fpa\" 1 0 (and (eq_attr \"fpu\" \"fpa\")\n-\t\t\t\t     (eq_attr \"type\" \"fdivs\")) 31 29)\n-\n-(define_function_unit \"fpa\" 1 0 (and (eq_attr \"fpu\" \"fpa\")\n-\t\t\t\t     (eq_attr \"type\" \"fmul\")) 9 7)\n-\n-(define_function_unit \"fpa\" 1 0 (and (eq_attr \"fpu\" \"fpa\")\n-\t\t\t\t     (eq_attr \"type\" \"ffmul\")) 6 4)\n+;; FPA automaton.\n+(define_automaton \"armfp\")\n \n-(define_function_unit \"fpa\" 1 0 (and (eq_attr \"fpu\" \"fpa\")\n-\t\t\t\t     (eq_attr \"type\" \"farith\")) 4 2)\n-\n-(define_function_unit \"fpa\" 1 0 (and (eq_attr \"fpu\" \"fpa\")\n-\t\t\t\t     (eq_attr \"type\" \"ffarith\")) 2 2)\n-\n-(define_function_unit \"fpa\" 1 0 (and (eq_attr \"fpu\" \"fpa\")\n-\t\t\t\t     (eq_attr \"type\" \"r_2_f\")) 5 3)\n-\n-(define_function_unit \"fpa\" 1 0 (and (eq_attr \"fpu\" \"fpa\")\n-\t\t\t\t     (eq_attr \"type\" \"f_2_r\")) 1 2)\n-\n-; The fpa10 doesn't really have a memory read unit, but it can start to\n-; speculatively execute the instruction in the pipeline, provided the data\n-; is already loaded, so pretend reads have a delay of 2 (and that the\n-; pipeline is infinite).\n+;; Floating point unit (FPA)\n+(define_cpu_unit \"fpa\" \"armfp\")\n+\n+; The fpa10 doesn't really have a memory read unit, but it can start\n+; to speculatively execute the instruction in the pipeline, provided\n+; the data is already loaded, so pretend reads have a delay of 2 (and\n+; that the pipeline is infinite).\n+(define_cpu_unit \"fpa_mem\" \"arm\")\n+\n+(define_insn_reservation \"fdivx\" 71\n+  (and (eq_attr \"fpu\" \"fpa\")\n+       (eq_attr \"type\" \"fdivx\"))\n+  \"core+fpa*69\")\n+\n+(define_insn_reservation \"fdivd\" 59\n+  (and (eq_attr \"fpu\" \"fpa\")\n+       (eq_attr \"type\" \"fdivd\"))\n+  \"core+fpa*57\")\n+\n+(define_insn_reservation \"fdivs\" 31\n+  (and (eq_attr \"fpu\" \"fpa\")\n+       (eq_attr \"type\" \"fdivs\"))\n+  \"core+fpa*29\")\n+\n+(define_insn_reservation \"fmul\" 9\n+  (and (eq_attr \"fpu\" \"fpa\")\n+       (eq_attr \"type\" \"fmul\"))\n+  \"core+fpa*7\")\n+\n+(define_insn_reservation \"ffmul\" 6\n+  (and (eq_attr \"fpu\" \"fpa\")\n+       (eq_attr \"type\" \"ffmul\"))\n+  \"core+fpa*4\")\n+\n+(define_insn_reservation \"farith\" 4\n+  (and (eq_attr \"fpu\" \"fpa\")\n+       (eq_attr \"type\" \"farith\"))\n+  \"core+fpa*2\")\n+\n+(define_insn_reservation \"ffarith\" 2\n+  (and (eq_attr \"fpu\" \"fpa\")\n+       (eq_attr \"type\" \"ffarith\"))\n+  \"core+fpa*2\")\n+\n+(define_insn_reservation \"r_2_f\" 5\n+  (and (eq_attr \"fpu\" \"fpa\")\n+       (eq_attr \"type\" \"r_2_f\"))\n+  \"core+fpa*3\")\n+\n+(define_insn_reservation \"f_2_r\" 1\n+  (and (eq_attr \"fpu\" \"fpa\")\n+       (eq_attr \"type\" \"f_2_r\"))\n+  \"core+fpa*2\")\n+\n+(define_insn_reservation \"f_load\" 3\n+  (and (eq_attr \"fpu\" \"fpa\") (eq_attr \"type\" \"f_load\"))\n+  \"fpa_mem+core*3\")\n+\n+(define_insn_reservation \"f_store\" 4\n+  (and (eq_attr \"fpu\" \"fpa\") (eq_attr \"type\" \"f_store\"))\n+  \"core*4\")\n+\n+(define_insn_reservation \"r_mem_f\" 6\n+  (and (eq_attr \"model_wbuf\" \"no\")\n+    (and (eq_attr \"fpu\" \"fpa\") (eq_attr \"type\" \"r_mem_f\")))\n+  \"core*6\")\n+\n+(define_insn_reservation \"f_mem_r\" 7\n+  (and (eq_attr \"fpu\" \"fpa\") (eq_attr \"type\" \"f_mem_r\"))\n+  \"core*7\")\n \n-(define_function_unit \"fpa_mem\" 1 0 (and (eq_attr \"fpu\" \"fpa\")\n-\t\t\t\t\t (eq_attr \"type\" \"f_load\")) 3 1)\n \n (define_insn \"*addsf3_fpa\"\n   [(set (match_operand:SF          0 \"s_register_operand\" \"=f,f\")"}]}