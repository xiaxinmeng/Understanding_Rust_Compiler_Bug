{"sha": "cb48166e52c0f159eb80a0666c4847825e294ec0", "node_id": "C_kwDOANBUbNoAKGNiNDgxNjZlNTJjMGYxNTllYjgwYTA2NjZjNDg0NzgyNWUyOTRlYzA", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gmail.com", "date": "2021-12-31T22:19:03Z"}, "committer": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gmail.com", "date": "2021-12-31T22:19:34Z"}, "message": "Fortran: Fix test on targets without REAL128\n\nREAL128 is a named constant, so we cannot simply use\n(REAL128 > 0) to conditionally compile for targets with\nREAL128.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/89639\n\t* gfortran.dg/ieee/ieee_9.f90: Adjust test for targets without\n\tREAL128.", "tree": {"sha": "0443023707054b6f710a2e819dac6db46b89e5d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0443023707054b6f710a2e819dac6db46b89e5d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb48166e52c0f159eb80a0666c4847825e294ec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb48166e52c0f159eb80a0666c4847825e294ec0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb48166e52c0f159eb80a0666c4847825e294ec0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb48166e52c0f159eb80a0666c4847825e294ec0/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3cbb8c66c930ba738674b0fcf29848dc3ecfef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3cbb8c66c930ba738674b0fcf29848dc3ecfef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3cbb8c66c930ba738674b0fcf29848dc3ecfef2"}], "stats": {"total": 90, "additions": 32, "deletions": 58}, "files": [{"sha": "e5935ecd702166cc05fcf4843d7c1da9ab2ddc9c", "filename": "gcc/testsuite/gfortran.dg/ieee/ieee_9.f90", "status": "modified", "additions": 32, "deletions": 58, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb48166e52c0f159eb80a0666c4847825e294ec0/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fieee_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb48166e52c0f159eb80a0666c4847825e294ec0/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fieee_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fieee%2Fieee_9.f90?ref=cb48166e52c0f159eb80a0666c4847825e294ec0", "patch": "@@ -1,71 +1,45 @@\n-! { dg-do run { xfail arm*-*-gnueabi arm*-*-gnueabihf } }\n-! { dg-skip-if \"PR89639\" { hppa*-*-linux* } }\n+! { dg-do run }\n program foo\n    use ieee_arithmetic\n    use iso_fortran_env\n+   implicit none\n+\n+   ! This allows us to test REAL128 if it exists, and still compile\n+   ! on platforms were it is not present\n+   ! https://gcc.gnu.org/bugzilla/show_bug.cgi?id=89639\n+   integer, parameter :: large = merge(real128, real64, real128 > 0)\n+\n    integer i, p\n    real x\n    x = 4\n    i = 4\n \n-   if (int8 > 0) then\n-      if (real32 > 0) then\n-         p = int(ieee_scalb(real(x, real32), int(i, int8)))\n-         if (p /= 64) stop 1\n-      endif\n-      if (real64 > 0) then\n-         p = int(ieee_scalb(real(x, real64), int(i, int8)))\n-         if (p /= 64) stop 2\n-      endif\n-      if (real128 > 0) then\n-         p = int(ieee_scalb(real(x, real128), int(i, int8)))\n-         if (p /= 64) stop 3\n-      end if\n-   end if\n+   p = int(ieee_scalb(real(x, real32), int(i, int8)))\n+   if (p /= 64) stop 1\n+   p = int(ieee_scalb(real(x, real64), int(i, int8)))\n+   if (p /= 64) stop 2\n+   p = int(ieee_scalb(real(x, large), int(i, int8)))\n+   if (p /= 64) stop 3\n \n-   if (int16 > 0) then\n-      if (real32 > 0) then\n-         p = int(ieee_scalb(real(x, real32), int(i, int16)))\n-         if (p /= 64) stop 4\n-      endif\n-      if (real64 > 0) then\n-         p = int(ieee_scalb(real(x, real64), int(i, int16)))\n-         if (p /= 64) stop 5\n-      endif\n-      if (real128 > 0) then\n-         p = int(ieee_scalb(real(x, real128), int(i, int16)))\n-         if (p /= 64) stop 6\n-      end if\n-   end if\n+   p = int(ieee_scalb(real(x, real32), int(i, int16)))\n+   if (p /= 64) stop 4\n+   p = int(ieee_scalb(real(x, real64), int(i, int16)))\n+   if (p /= 64) stop 5\n+   p = int(ieee_scalb(real(x, large), int(i, int16)))\n+   if (p /= 64) stop 6\n \n-   if (int32 > 0) then\n-      if (real32 > 0) then\n-         p = int(ieee_scalb(real(x, real32), int(i, int32)))\n-         if (p /= 64) stop 7\n-      endif\n-      if (real64 > 0) then\n-         p = int(ieee_scalb(real(x, real64), int(i, int32)))\n-         if (p /= 64) stop 8\n-      endif\n-      if (real128 > 0) then\n-         p = int(ieee_scalb(real(x, real128), int(i, int32)))\n-         if (p /= 64) stop 9\n-      end if\n-   end if\n+   p = int(ieee_scalb(real(x, real32), int(i, int32)))\n+   if (p /= 64) stop 7\n+   p = int(ieee_scalb(real(x, real64), int(i, int32)))\n+   if (p /= 64) stop 8\n+   p = int(ieee_scalb(real(x, large), int(i, int32)))\n+   if (p /= 64) stop 9\n \n-   if (int64 > 0) then\n-      if (real32 > 0) then\n-         p = int(ieee_scalb(real(x, real32), int(i, int64)))\n-         if (p /= 64) stop 10\n-      endif\n-      if (real64 > 0) then\n-         p = int(ieee_scalb(real(x, real64), int(i, int64)))\n-         if (p /= 64) stop 11\n-      endif\n-      if (real128 > 0) then\n-         p = int(ieee_scalb(real(x, real128), int(i, int64)))\n-         if (p /= 64) stop 12\n-      end if\n-   end if\n+   p = int(ieee_scalb(real(x, real32), int(i, int64)))\n+   if (p /= 64) stop 10\n+   p = int(ieee_scalb(real(x, real64), int(i, int64)))\n+   if (p /= 64) stop 11\n+   p = int(ieee_scalb(real(x, large), int(i, int64)))\n+   if (p /= 64) stop 12\n \n end program foo"}]}