{"sha": "2a7ba9243eec646d7aa4adae3b4b867a689251f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE3YmE5MjQzZWVjNjQ2ZDdhYTRhZGFlM2I0Yjg2N2E2ODkyNTFmMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-09-14T16:55:41Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-09-14T16:55:41Z"}, "message": "compiler: don't use address of temporary for deferred delete\n    \n    This CL corrects the handling of a deferred delete in a loop, to not\n    use a temporary whose value will, at deferred execution time, wind up\n    being the last value in the loop.\n    \n    The test for this is TestDeferDeleteSlow in the 1.11 runtime package.\n    \n    Reviewed-on: https://go-review.googlesource.com/135358\n\nFrom-SVN: r264325", "tree": {"sha": "ed6dddd3d52e2444802907f0139d34e010c26ddc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed6dddd3d52e2444802907f0139d34e010c26ddc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a7ba9243eec646d7aa4adae3b4b867a689251f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a7ba9243eec646d7aa4adae3b4b867a689251f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a7ba9243eec646d7aa4adae3b4b867a689251f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a7ba9243eec646d7aa4adae3b4b867a689251f2/comments", "author": null, "committer": null, "parents": [{"sha": "98ef99ab97b84f526a401d8d96b9aca52c0daad7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ef99ab97b84f526a401d8d96b9aca52c0daad7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ef99ab97b84f526a401d8d96b9aca52c0daad7"}], "stats": {"total": 59, "additions": 53, "deletions": 6}, "files": [{"sha": "d801077bf0ccc882a447d4238dc67155fe5c5f3d", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a7ba9243eec646d7aa4adae3b4b867a689251f2/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a7ba9243eec646d7aa4adae3b4b867a689251f2/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=2a7ba9243eec646d7aa4adae3b4b867a689251f2", "patch": "@@ -1,4 +1,4 @@\n-218c9159635e06e39ae43d0efe1ac1e694fead2e\n+3fd61802286c81e5fb672f682d9e661181184d1f\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "46a1e693d507c82b5806b9e4d5c252bb76ee45b7", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a7ba9243eec646d7aa4adae3b4b867a689251f2/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a7ba9243eec646d7aa4adae3b4b867a689251f2/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=2a7ba9243eec646d7aa4adae3b4b867a689251f2", "patch": "@@ -7409,7 +7409,32 @@ Builtin_call_expression::do_lower(Gogo*, Named_object* function,\n \t\t\t\t\t\t\t\t  loc);\n \t    Expression* e3 = Expression::make_temporary_reference(key_temp,\n \t\t\t\t\t\t\t\t  loc);\n-\t    e3 = Expression::make_unary(OPERATOR_AND, e3, loc);\n+\n+\t    // If the call to delete is deferred, and is in a loop,\n+\t    // then the loop will only have a single instance of the\n+\t    // temporary variable.  Passing the address of the\n+\t    // temporary variable here means that the deferred call\n+\t    // will see the last value in the loop, not the current\n+\t    // value.  So for this unusual case copy the value into\n+\t    // the heap.\n+\t    if (!this->is_deferred())\n+\t      e3 = Expression::make_unary(OPERATOR_AND, e3, loc);\n+\t    else\n+\t      {\n+\t\tExpression* a = Expression::make_allocation(mt->key_type(),\n+\t\t\t\t\t\t\t    loc);\n+\t\tTemporary_statement* atemp =\n+\t\t  Statement::make_temporary(NULL, a, loc);\n+\t\tinserter->insert(atemp);\n+\n+\t\ta = Expression::make_temporary_reference(atemp, loc);\n+\t\ta = Expression::make_dereference(a, NIL_CHECK_NOT_NEEDED, loc);\n+\t\tStatement* s = Statement::make_assignment(a, e3, loc);\n+\t\tinserter->insert(s);\n+\n+\t\te3 = Expression::make_temporary_reference(atemp, loc);\n+\t      }\n+\n \t    return Runtime::make_call(Runtime::MAPDELETE, this->location(),\n \t\t\t\t      3, e1, e2, e3);\n \t  }\n@@ -9024,6 +9049,10 @@ Builtin_call_expression::do_copy()\n \n   if (this->varargs_are_lowered())\n     bce->set_varargs_are_lowered();\n+  if (this->is_deferred())\n+    bce->set_is_deferred();\n+  if (this->is_concurrent())\n+    bce->set_is_concurrent();\n   return bce;\n }\n \n@@ -9606,8 +9635,16 @@ Call_expression::do_lower(Gogo* gogo, Named_object* function,\n \n   // Recognize a call to a builtin function.\n   if (fntype->is_builtin())\n-    return new Builtin_call_expression(gogo, this->fn_, this->args_,\n-\t\t\t\t       this->is_varargs_, loc);\n+    {\n+      Builtin_call_expression* bce =\n+\tnew Builtin_call_expression(gogo, this->fn_, this->args_,\n+\t\t\t\t    this->is_varargs_, loc);\n+      if (this->is_deferred_)\n+\tbce->set_is_deferred();\n+      if (this->is_concurrent_)\n+\tbce->set_is_concurrent();\n+      return bce;\n+    }\n \n   // If this call returns multiple results, create a temporary\n   // variable to hold them.\n@@ -10275,6 +10312,10 @@ Call_expression::do_copy()\n \n   if (this->varargs_are_lowered_)\n     call->set_varargs_are_lowered();\n+  if (this->is_deferred_)\n+    call->set_is_deferred();\n+  if (this->is_concurrent_)\n+    call->set_is_concurrent();\n   return call;\n }\n "}, {"sha": "6ed4377ddc13cf3ac0c856a48727f26f4cfcb391", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a7ba9243eec646d7aa4adae3b4b867a689251f2/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a7ba9243eec646d7aa4adae3b4b867a689251f2/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=2a7ba9243eec646d7aa4adae3b4b867a689251f2", "patch": "@@ -4304,9 +4304,15 @@ Parse::go_or_defer_stat()\n   this->gogo_->start_block(stat_location);\n   Statement* stat;\n   if (is_go)\n-    stat = Statement::make_go_statement(call_expr, stat_location);\n+    {\n+      stat = Statement::make_go_statement(call_expr, stat_location);\n+      call_expr->set_is_concurrent();\n+    }\n   else\n-    stat = Statement::make_defer_statement(call_expr, stat_location);\n+    {\n+      stat = Statement::make_defer_statement(call_expr, stat_location);\n+      call_expr->set_is_deferred();\n+    }\n   this->gogo_->add_statement(stat);\n   this->gogo_->add_block(this->gogo_->finish_block(stat_location),\n \t\t\t stat_location);"}]}