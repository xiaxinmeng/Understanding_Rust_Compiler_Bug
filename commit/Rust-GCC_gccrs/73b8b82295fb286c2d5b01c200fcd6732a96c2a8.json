{"sha": "73b8b82295fb286c2d5b01c200fcd6732a96c2a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNiOGI4MjI5NWZiMjg2YzJkNWIwMWMyMDBmY2Q2NzMyYTk2YzJhOA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-02-22T17:09:06Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-02-22T17:09:06Z"}, "message": "i386: Add __x86_indirect_thunk_nt_reg for -fcf-protection -mcet\n\nnocf_check attribute can be used with -fcf-protection -mcet to disable\ncontrol-flow check by adding NOTRACK prefix before indirect branch.\nWhen -mindirect-branch=thunk-extern -mindirect-branch-register is added,\nindirect branch via register, \"notrack call/jmp reg\", is converted to\n\n    call/jmp __x86_indirect_thunk_nt_reg\n\nWhen running on machines with CET enabled, __x86_indirect_thunk_nt_reg\ncan be updated to\n\n    notrack jmp reg\n\nat run-time to restore NOTRACK prefix in the original indirect branch.\n\nSince we don't support -mindirect-branch=thunk-extern, CET and MPX at\nthe same time, -mindirect-branch=thunk-extern is disallowed with\n-fcf-protection=branch and -fcheck-pointer-bounds.\n\nTested on i686 and x86-64.\n\ngcc/\n\n\tPR target/84176\n\t* config/i386/i386.c (ix86_set_indirect_branch_type): Issue an\n\terror when -mindirect-branch=thunk-extern, -fcf-protection=branch\n\tand -fcheck-pointer-bounds are used together.\n\t(indirect_thunk_prefix): New enum.\n\t(indirect_thunk_need_prefix): New function.\n\t(indirect_thunk_name): Replace need_bnd_p with need_prefix.  Use\n\t\"_nt\" instead of \"_bnd\" for NOTRACK prefix.\n\t(output_indirect_thunk): Replace need_bnd_p with need_prefix.\n\t(output_indirect_thunk_function): Likewise.\n\t(): Likewise.\n\t(ix86_code_end): Update output_indirect_thunk_function calls.\n\t(ix86_output_indirect_branch_via_reg): Replace\n\tix86_bnd_prefixed_insn_p with indirect_thunk_need_prefix.\n\t(ix86_output_indirect_branch_via_push): Likewise.\n\t(ix86_output_function_return): Likewise.\n\t* doc/invoke.texi: Document -mindirect-branch=thunk-extern is\n\tincompatible with -fcf-protection=branch and\n\t-fcheck-pointer-bounds.\n\ngcc/testsuite/\n\n\tPR target/84176\n\t* gcc.target/i386/indirect-thunk-11.c: New test.\n\t* gcc.target/i386/indirect-thunk-12.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-12.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-13.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-14.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-15.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-attr-16.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-10.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-8.c: Likewise.\n\t* gcc.target/i386/indirect-thunk-extern-9.c: Likewise.\n\nFrom-SVN: r257909", "tree": {"sha": "74872a581bf4597a9147fbaf2d607e96f1bd5729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74872a581bf4597a9147fbaf2d607e96f1bd5729"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73b8b82295fb286c2d5b01c200fcd6732a96c2a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73b8b82295fb286c2d5b01c200fcd6732a96c2a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73b8b82295fb286c2d5b01c200fcd6732a96c2a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eae52f300e0f1c71ac69b83495bc9a170330e95b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae52f300e0f1c71ac69b83495bc9a170330e95b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eae52f300e0f1c71ac69b83495bc9a170330e95b"}], "stats": {"total": 301, "additions": 258, "deletions": 43}, "files": [{"sha": "1868bb6d83f6ac457fa2d6beb7c1960dc1125eac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73b8b82295fb286c2d5b01c200fcd6732a96c2a8", "patch": "@@ -1,3 +1,25 @@\n+2018-02-22  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/84176\n+\t* config/i386/i386.c (ix86_set_indirect_branch_type): Issue an\n+\terror when -mindirect-branch=thunk-extern, -fcf-protection=branch\n+\tand -fcheck-pointer-bounds are used together.\n+\t(indirect_thunk_prefix): New enum.\n+\t(indirect_thunk_need_prefix): New function.\n+\t(indirect_thunk_name): Replace need_bnd_p with need_prefix.  Use\n+\t\"_nt\" instead of \"_bnd\" for NOTRACK prefix.\n+\t(output_indirect_thunk): Replace need_bnd_p with need_prefix.\n+\t(output_indirect_thunk_function): Likewise.\n+\t(): Likewise.\n+\t(ix86_code_end): Update output_indirect_thunk_function calls.\n+\t(ix86_output_indirect_branch_via_reg): Replace\n+\tix86_bnd_prefixed_insn_p with indirect_thunk_need_prefix.\n+\t(ix86_output_indirect_branch_via_push): Likewise.\n+\t(ix86_output_function_return): Likewise.\n+\t* doc/invoke.texi: Document -mindirect-branch=thunk-extern is\n+\tincompatible with -fcf-protection=branch and\n+\t-fcheck-pointer-bounds.\n+\n 2018-02-22  Steve Ellcey  <sellcey@cavium.com>\n \n \tPR target/83335"}, {"sha": "640c59218639eb17bae09f192822530d1b192e98", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 108, "deletions": 43, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=73b8b82295fb286c2d5b01c200fcd6732a96c2a8", "patch": "@@ -5898,6 +5898,16 @@ ix86_set_indirect_branch_type (tree fndecl)\n \t       ((cfun->machine->indirect_branch_type\n \t\t == indirect_branch_thunk_extern)\n \t\t? \"thunk-extern\" : \"thunk\"));\n+\n+      /* -mindirect-branch=thunk-extern, -fcf-protection=branch and\n+\t -fcheck-pointer-bounds are not compatible.  */\n+      if ((cfun->machine->indirect_branch_type\n+\t   == indirect_branch_thunk_extern)\n+\t  && flag_check_pointer_bounds\n+\t  && (flag_cf_protection & CF_BRANCH) != 0)\n+\terror (\"%<-mindirect-branch=thunk-extern%>, \"\n+\t       \"%<-fcf-protection=branch%> and \"\n+\t       \"%<-fcheck-pointer-bounds%> are not compatible\");\n     }\n \n   if (cfun->machine->function_return_type == indirect_branch_unset)\n@@ -10806,18 +10816,62 @@ static int indirect_thunks_bnd_used;\n # define INDIRECT_LABEL \"LIND\"\n #endif\n \n+/* Indicate what prefix is needed for an indirect branch.  */\n+enum indirect_thunk_prefix\n+{\n+  indirect_thunk_prefix_none,\n+  indirect_thunk_prefix_bnd,\n+  indirect_thunk_prefix_nt\n+};\n+\n+/* Return the prefix needed for an indirect branch INSN.  */\n+\n+enum indirect_thunk_prefix\n+indirect_thunk_need_prefix (rtx_insn *insn)\n+{\n+  enum indirect_thunk_prefix need_prefix;\n+  if (ix86_bnd_prefixed_insn_p (insn))\n+    need_prefix = indirect_thunk_prefix_bnd;\n+  else if ((cfun->machine->indirect_branch_type\n+\t    == indirect_branch_thunk_extern)\n+\t   && ix86_notrack_prefixed_insn_p (insn))\n+    {\n+      /* NOTRACK prefix is only used with external thunk so that it\n+\t can be properly updated to support CET at run-time.  */\n+      need_prefix = indirect_thunk_prefix_nt;\n+    }\n+  else\n+    need_prefix = indirect_thunk_prefix_none;\n+  return need_prefix;\n+}\n+\n /* Fills in the label name that should be used for the indirect thunk.  */\n \n static void\n indirect_thunk_name (char name[32], unsigned int regno,\n-\t\t     bool need_bnd_p, bool ret_p)\n+\t\t     enum indirect_thunk_prefix need_prefix,\n+\t\t     bool ret_p)\n {\n   if (regno != INVALID_REGNUM && ret_p)\n     gcc_unreachable ();\n \n   if (USE_HIDDEN_LINKONCE)\n     {\n-      const char *bnd = need_bnd_p ? \"_bnd\" : \"\";\n+      const char *prefix;\n+\n+      if (need_prefix == indirect_thunk_prefix_bnd)\n+\tprefix = \"_bnd\";\n+      else if (need_prefix == indirect_thunk_prefix_nt\n+\t       && regno != INVALID_REGNUM)\n+\t{\n+\t  /* NOTRACK prefix is only used with external thunk via\n+\t     register so that NOTRACK prefix can be added to indirect\n+\t     branch via register to support CET at run-time.  */\n+\t  prefix = \"_nt\";\n+\t}\n+      else\n+\tprefix = \"\";\n+\n       if (regno != INVALID_REGNUM)\n \t{\n \t  const char *reg_prefix;\n@@ -10826,19 +10880,19 @@ indirect_thunk_name (char name[32], unsigned int regno,\n \t  else\n \t    reg_prefix = \"\";\n \t  sprintf (name, \"__x86_indirect_thunk%s_%s%s\",\n-\t\t   bnd, reg_prefix, reg_names[regno]);\n+\t\t   prefix, reg_prefix, reg_names[regno]);\n \t}\n       else\n \t{\n \t  const char *ret = ret_p ? \"return\" : \"indirect\";\n-\t  sprintf (name, \"__x86_%s_thunk%s\", ret, bnd);\n+\t  sprintf (name, \"__x86_%s_thunk%s\", ret, prefix);\n \t}\n     }\n   else\n     {\n       if (regno != INVALID_REGNUM)\n \t{\n-\t  if (need_bnd_p)\n+\t  if (need_prefix == indirect_thunk_prefix_bnd)\n \t    ASM_GENERATE_INTERNAL_LABEL (name, \"LITBR\", regno);\n \t  else\n \t    ASM_GENERATE_INTERNAL_LABEL (name, \"LITR\", regno);\n@@ -10847,14 +10901,14 @@ indirect_thunk_name (char name[32], unsigned int regno,\n \t{\n \t  if (ret_p)\n \t    {\n-\t      if (need_bnd_p)\n+\t      if (need_prefix == indirect_thunk_prefix_bnd)\n \t\tASM_GENERATE_INTERNAL_LABEL (name, \"LRTB\", 0);\n \t      else\n \t\tASM_GENERATE_INTERNAL_LABEL (name, \"LRT\", 0);\n \t    }\n \t  else\n \t    {\n-\t      if (need_bnd_p)\n+\t      if (need_prefix == indirect_thunk_prefix_bnd)\n \t\tASM_GENERATE_INTERNAL_LABEL (name, \"LITB\", 0);\n \t      else\n \t\tASM_GENERATE_INTERNAL_LABEL (name, \"LIT\", 0);\n@@ -10890,7 +10944,8 @@ indirect_thunk_name (char name[32], unsigned int regno,\n  */\n \n static void\n-output_indirect_thunk (bool need_bnd_p, unsigned int regno)\n+output_indirect_thunk (enum indirect_thunk_prefix need_prefix,\n+\t\t       unsigned int regno)\n {\n   char indirectlabel1[32];\n   char indirectlabel2[32];\n@@ -10901,7 +10956,7 @@ output_indirect_thunk (bool need_bnd_p, unsigned int regno)\n \t\t\t       indirectlabelno++);\n \n   /* Call */\n-  if (need_bnd_p)\n+  if (need_prefix == indirect_thunk_prefix_bnd)\n     fputs (\"\\tbnd call\\t\", asm_out_file);\n   else\n     fputs (\"\\tcall\\t\", asm_out_file);\n@@ -10938,7 +10993,7 @@ output_indirect_thunk (bool need_bnd_p, unsigned int regno)\n       output_asm_insn (\"lea\\t{%E1, %0|%0, %E1}\", xops);\n     }\n \n-  if (need_bnd_p)\n+  if (need_prefix == indirect_thunk_prefix_bnd)\n     fputs (\"\\tbnd ret\\n\", asm_out_file);\n   else\n     fputs (\"\\tret\\n\", asm_out_file);\n@@ -10950,13 +11005,14 @@ output_indirect_thunk (bool need_bnd_p, unsigned int regno)\n    on the top of stack.  */\n \n static void\n-output_indirect_thunk_function (bool need_bnd_p, unsigned int regno)\n+output_indirect_thunk_function (enum indirect_thunk_prefix need_prefix,\n+\t\t\t\tunsigned int regno)\n {\n   char name[32];\n   tree decl;\n \n   /* Create __x86_indirect_thunk/__x86_indirect_thunk_bnd.  */\n-  indirect_thunk_name (name, regno, need_bnd_p, false);\n+  indirect_thunk_name (name, regno, need_prefix, false);\n   decl = build_decl (BUILTINS_LOCATION, FUNCTION_DECL,\n \t\t     get_identifier (name),\n \t\t     build_function_type_list (void_type_node, NULL_TREE));\n@@ -11004,7 +11060,7 @@ output_indirect_thunk_function (bool need_bnd_p, unsigned int regno)\n       /* Create alias for __x86.return_thunk/__x86.return_thunk_bnd.  */\n       char alias[32];\n \n-      indirect_thunk_name (alias, regno, need_bnd_p, true);\n+      indirect_thunk_name (alias, regno, need_prefix, true);\n #if TARGET_MACHO\n       if (TARGET_MACHO)\n \t{\n@@ -11040,7 +11096,7 @@ output_indirect_thunk_function (bool need_bnd_p, unsigned int regno)\n   /* Make sure unwind info is emitted for the thunk if needed.  */\n   final_start_function (emit_barrier (), asm_out_file, 1);\n \n-  output_indirect_thunk (need_bnd_p, regno);\n+  output_indirect_thunk (need_prefix, regno);\n \n   final_end_function ();\n   init_insn_lengths ();\n@@ -11076,18 +11132,22 @@ ix86_code_end (void)\n   unsigned int regno;\n \n   if (indirect_thunk_needed)\n-    output_indirect_thunk_function (false, INVALID_REGNUM);\n+    output_indirect_thunk_function (indirect_thunk_prefix_none,\n+\t\t\t\t    INVALID_REGNUM);\n   if (indirect_thunk_bnd_needed)\n-    output_indirect_thunk_function (true, INVALID_REGNUM);\n+    output_indirect_thunk_function (indirect_thunk_prefix_bnd,\n+\t\t\t\t    INVALID_REGNUM);\n \n   for (regno = FIRST_REX_INT_REG; regno <= LAST_REX_INT_REG; regno++)\n     {\n       unsigned int i = regno - FIRST_REX_INT_REG + LAST_INT_REG + 1;\n       if ((indirect_thunks_used & (1 << i)))\n-\toutput_indirect_thunk_function (false, regno);\n+\toutput_indirect_thunk_function (indirect_thunk_prefix_none,\n+\t\t\t\t\tregno);\n \n       if ((indirect_thunks_bnd_used & (1 << i)))\n-\toutput_indirect_thunk_function (true, regno);\n+\toutput_indirect_thunk_function (indirect_thunk_prefix_bnd,\n+\t\t\t\t\tregno);\n     }\n \n   for (regno = FIRST_INT_REG; regno <= LAST_INT_REG; regno++)\n@@ -11096,10 +11156,12 @@ ix86_code_end (void)\n       tree decl;\n \n       if ((indirect_thunks_used & (1 << regno)))\n-\toutput_indirect_thunk_function (false, regno);\n+\toutput_indirect_thunk_function (indirect_thunk_prefix_none,\n+\t\t\t\t\tregno);\n \n       if ((indirect_thunks_bnd_used & (1 << regno)))\n-\toutput_indirect_thunk_function (true, regno);\n+\toutput_indirect_thunk_function (indirect_thunk_prefix_bnd,\n+\t\t\t\t\tregno);\n \n       if (!(pic_labels_used & (1 << regno)))\n \tcontinue;\n@@ -28676,7 +28738,8 @@ ix86_output_indirect_branch_via_reg (rtx call_op, bool sibcall_p)\n {\n   char thunk_name_buf[32];\n   char *thunk_name;\n-  bool need_bnd_p = ix86_bnd_prefixed_insn_p (current_output_insn);\n+  enum indirect_thunk_prefix need_prefix\n+    = indirect_thunk_need_prefix (current_output_insn);\n   int regno = REGNO (call_op);\n \n   if (cfun->machine->indirect_branch_type\n@@ -28687,12 +28750,12 @@ ix86_output_indirect_branch_via_reg (rtx call_op, bool sibcall_p)\n \t  int i = regno;\n \t  if (i >= FIRST_REX_INT_REG)\n \t    i -= (FIRST_REX_INT_REG - LAST_INT_REG - 1);\n-\t  if (need_bnd_p)\n+\t  if (need_prefix == indirect_thunk_prefix_bnd)\n \t    indirect_thunks_bnd_used |= 1 << i;\n \t  else\n \t    indirect_thunks_used |= 1 << i;\n \t}\n-      indirect_thunk_name (thunk_name_buf, regno, need_bnd_p, false);\n+      indirect_thunk_name (thunk_name_buf, regno, need_prefix, false);\n       thunk_name = thunk_name_buf;\n     }\n   else\n@@ -28702,19 +28765,19 @@ ix86_output_indirect_branch_via_reg (rtx call_op, bool sibcall_p)\n     {\n       if (thunk_name != NULL)\n \t{\n-\t  if (need_bnd_p)\n+\t  if (need_prefix == indirect_thunk_prefix_bnd)\n \t    fprintf (asm_out_file, \"\\tbnd jmp\\t%s\\n\", thunk_name);\n \t  else\n \t    fprintf (asm_out_file, \"\\tjmp\\t%s\\n\", thunk_name);\n \t}\n       else\n-\toutput_indirect_thunk (need_bnd_p, regno);\n+\toutput_indirect_thunk (need_prefix, regno);\n     }\n   else\n     {\n       if (thunk_name != NULL)\n \t{\n-\t  if (need_bnd_p)\n+\t  if (need_prefix == indirect_thunk_prefix_bnd)\n \t    fprintf (asm_out_file, \"\\tbnd call\\t%s\\n\", thunk_name);\n \t  else\n \t    fprintf (asm_out_file, \"\\tcall\\t%s\\n\", thunk_name);\n@@ -28732,7 +28795,7 @@ ix86_output_indirect_branch_via_reg (rtx call_op, bool sibcall_p)\n \t\t\t\t   indirectlabelno++);\n \n       /* Jump.  */\n-      if (need_bnd_p)\n+      if (need_prefix == indirect_thunk_prefix_bnd)\n \tfputs (\"\\tbnd jmp\\t\", asm_out_file);\n       else\n \tfputs (\"\\tjmp\\t\", asm_out_file);\n@@ -28743,18 +28806,18 @@ ix86_output_indirect_branch_via_reg (rtx call_op, bool sibcall_p)\n \n       if (thunk_name != NULL)\n \t{\n-\t  if (need_bnd_p)\n+\t  if (need_prefix == indirect_thunk_prefix_bnd)\n \t    fprintf (asm_out_file, \"\\tbnd jmp\\t%s\\n\", thunk_name);\n \t  else\n \t    fprintf (asm_out_file, \"\\tjmp\\t%s\\n\", thunk_name);\n \t}\n       else\n-\toutput_indirect_thunk (need_bnd_p, regno);\n+\toutput_indirect_thunk (need_prefix, regno);\n \n       ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, indirectlabel2);\n \n       /* Call.  */\n-      if (need_bnd_p)\n+      if (need_prefix == indirect_thunk_prefix_bnd)\n \tfputs (\"\\tbnd call\\t\", asm_out_file);\n       else\n \tfputs (\"\\tcall\\t\", asm_out_file);\n@@ -28788,20 +28851,21 @@ ix86_output_indirect_branch_via_push (rtx call_op, const char *xasm,\n   char thunk_name_buf[32];\n   char *thunk_name;\n   char push_buf[64];\n-  bool need_bnd_p = ix86_bnd_prefixed_insn_p (current_output_insn);\n+  enum indirect_thunk_prefix need_prefix\n+    = indirect_thunk_need_prefix (current_output_insn);\n   int regno = -1;\n \n   if (cfun->machine->indirect_branch_type\n       != indirect_branch_thunk_inline)\n     {\n       if (cfun->machine->indirect_branch_type == indirect_branch_thunk)\n \t{\n-\t  if (need_bnd_p)\n+\t  if (need_prefix == indirect_thunk_prefix_bnd)\n \t    indirect_thunk_bnd_needed = true;\n \t  else\n \t    indirect_thunk_needed = true;\n \t}\n-      indirect_thunk_name (thunk_name_buf, regno, need_bnd_p, false);\n+      indirect_thunk_name (thunk_name_buf, regno, need_prefix, false);\n       thunk_name = thunk_name_buf;\n     }\n   else\n@@ -28815,13 +28879,13 @@ ix86_output_indirect_branch_via_push (rtx call_op, const char *xasm,\n       output_asm_insn (push_buf, &call_op);\n       if (thunk_name != NULL)\n \t{\n-\t  if (need_bnd_p)\n+\t  if (need_prefix == indirect_thunk_prefix_bnd)\n \t    fprintf (asm_out_file, \"\\tbnd jmp\\t%s\\n\", thunk_name);\n \t  else\n \t    fprintf (asm_out_file, \"\\tjmp\\t%s\\n\", thunk_name);\n \t}\n       else\n-\toutput_indirect_thunk (need_bnd_p, regno);\n+\toutput_indirect_thunk (need_prefix, regno);\n     }\n   else\n     {\n@@ -28836,7 +28900,7 @@ ix86_output_indirect_branch_via_push (rtx call_op, const char *xasm,\n \t\t\t\t   indirectlabelno++);\n \n       /* Jump.  */\n-      if (need_bnd_p)\n+      if (need_prefix == indirect_thunk_prefix_bnd)\n \tfputs (\"\\tbnd jmp\\t\", asm_out_file);\n       else\n \tfputs (\"\\tjmp\\t\", asm_out_file);\n@@ -28882,18 +28946,18 @@ ix86_output_indirect_branch_via_push (rtx call_op, const char *xasm,\n \n       if (thunk_name != NULL)\n \t{\n-\t  if (need_bnd_p)\n+\t  if (need_prefix == indirect_thunk_prefix_bnd)\n \t    fprintf (asm_out_file, \"\\tbnd jmp\\t%s\\n\", thunk_name);\n \t  else\n \t    fprintf (asm_out_file, \"\\tjmp\\t%s\\n\", thunk_name);\n \t}\n       else\n-\toutput_indirect_thunk (need_bnd_p, regno);\n+\toutput_indirect_thunk (need_prefix, regno);\n \n       ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, indirectlabel2);\n \n       /* Call.  */\n-      if (need_bnd_p)\n+      if (need_prefix == indirect_thunk_prefix_bnd)\n \tfputs (\"\\tbnd call\\t\", asm_out_file);\n       else\n \tfputs (\"\\tcall\\t\", asm_out_file);\n@@ -28945,16 +29009,17 @@ ix86_output_function_return (bool long_p)\n   if (cfun->machine->function_return_type != indirect_branch_keep)\n     {\n       char thunk_name[32];\n-      bool need_bnd_p = ix86_bnd_prefixed_insn_p (current_output_insn);\n+      enum indirect_thunk_prefix need_prefix\n+\t= indirect_thunk_need_prefix (current_output_insn);\n \n       if (cfun->machine->function_return_type\n \t  != indirect_branch_thunk_inline)\n \t{\n \t  bool need_thunk = (cfun->machine->function_return_type\n \t\t\t     == indirect_branch_thunk);\n-\t  indirect_thunk_name (thunk_name, INVALID_REGNUM, need_bnd_p,\n+\t  indirect_thunk_name (thunk_name, INVALID_REGNUM, need_prefix,\n \t\t\t       true);\n-\t  if (need_bnd_p)\n+\t  if (need_prefix == indirect_thunk_prefix_bnd)\n \t    {\n \t      indirect_thunk_bnd_needed |= need_thunk;\n \t      fprintf (asm_out_file, \"\\tbnd jmp\\t%s\\n\", thunk_name);\n@@ -28966,7 +29031,7 @@ ix86_output_function_return (bool long_p)\n \t    }\n \t}\n       else\n-\toutput_indirect_thunk (need_bnd_p, INVALID_REGNUM);\n+\toutput_indirect_thunk (need_prefix, INVALID_REGNUM);\n \n       return \"\";\n     }"}, {"sha": "e70e2bad4d82b7e927551c3ba149875884bc3884", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=73b8b82295fb286c2d5b01c200fcd6732a96c2a8", "patch": "@@ -27837,6 +27837,11 @@ Note that @option{-mcmodel=large} is incompatible with\n @option{-mindirect-branch=thunk-extern} since the thunk function may\n not be reachable in large code model.\n \n+Note that @option{-mindirect-branch=thunk-extern} is incompatible with\n+@option{-fcf-protection=branch} and @option{-fcheck-pointer-bounds}\n+since the external thunk can not be modified to disable control-flow\n+check.\n+\n @item -mfunction-return=@var{choice}\n @opindex -mfunction-return\n Convert function return with @var{choice}.  The default is @samp{keep},"}, {"sha": "d85d8a52dd60a7485beb13d6125d34ecab453b9c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73b8b82295fb286c2d5b01c200fcd6732a96c2a8", "patch": "@@ -1,3 +1,17 @@\n+2018-02-22  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/84176\n+\t* gcc.target/i386/indirect-thunk-11.c: New test.\n+\t* gcc.target/i386/indirect-thunk-12.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-12.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-13.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-14.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-15.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-attr-16.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-10.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-8.c: Likewise.\n+\t* gcc.target/i386/indirect-thunk-extern-9.c: Likewise.\n+\n 2018-02-22  Steve Ellcey  <sellcey@cavium.com>\n \n \tPR target/83335"}, {"sha": "afa89ff227ba26fee6eee7606f615bd84d679ed7", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-11.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-11.c?ref=73b8b82295fb286c2d5b01c200fcd6732a96c2a8", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target { ! x32 } } } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk-extern -fcf-protection -mcet -fcheck-pointer-bounds -mmpx\" } */\n+\n+void\n+bar (void)\n+{ /* { dg-error \"'-mindirect-branch=thunk-extern', '-fcf-protection=branch' and '-fcheck-pointer-bounds' are not compatible\" } */\n+}"}, {"sha": "d456973ee6df81d3f5f59290cac03a1030980f37", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-12.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-12.c?ref=73b8b82295fb286c2d5b01c200fcd6732a96c2a8", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target { ! x32 } } } */\n+/* { dg-options \"-O2 -mindirect-branch=thunk -fcf-protection -mcet -fcheck-pointer-bounds -mmpx\" } */\n+\n+void\n+bar (void)\n+{\n+}"}, {"sha": "24a1a08a3ca44947847a61ea8f6234f08cd77954", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-12.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-12.c?ref=73b8b82295fb286c2d5b01c200fcd6732a96c2a8", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target { ! x32 } } } */\n+/* { dg-options \"-O2 -mindirect-branch=keep -fcf-protection -mcet -fcheck-pointer-bounds -mmpx\" } */\n+\n+__attribute__ ((indirect_branch(\"thunk-extern\")))\n+void\n+bar (void)\n+{ /* { dg-error \"'-mindirect-branch=thunk-extern', '-fcf-protection=branch' and '-fcheck-pointer-bounds' are not compatible\" } */\n+}"}, {"sha": "ff2fccae9358f36ec6be4baaa0d18a32e88c992f", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-13.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-13.c?ref=73b8b82295fb286c2d5b01c200fcd6732a96c2a8", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target { ! x32 } } } */\n+/* { dg-options \"-O2 -mindirect-branch=keep -fcf-protection -mcet -fcheck-pointer-bounds -mmpx\" } */\n+\n+__attribute__ ((indirect_branch(\"thunk-inline\")))\n+void\n+bar (void)\n+{\n+}"}, {"sha": "669e56d7726ca4bace0b2348d443f1cb1556a228", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-14.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-14.c?ref=73b8b82295fb286c2d5b01c200fcd6732a96c2a8", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -mno-indirect-branch-register -mfunction-return=keep -fno-pic -fplt -mindirect-branch=keep -fcf-protection -mcet\" } */\n+\n+extern void (*bar) (void);\n+\n+__attribute__ ((indirect_branch(\"thunk-extern\")))\n+void\n+foo (void)\n+{\n+  bar ();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*__x86_indirect_thunk_nt\" } } */"}, {"sha": "c033fb238792f38b930f785bfedd7a00d9eaa794", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-15.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-15.c?ref=73b8b82295fb286c2d5b01c200fcd6732a96c2a8", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -mindirect-branch-register -mfunction-return=keep -fno-pic -fplt -mindirect-branch=keep -fcf-protection -mcet\" } */\n+\n+extern void (*bar) (void);\n+\n+__attribute__ ((indirect_branch(\"thunk-extern\")))\n+void\n+foo (void)\n+{\n+  bar ();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*__x86_indirect_thunk_nt\" } } */"}, {"sha": "0244edf53b7f6f39c251d6a49e812194baf5cf3c", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-16.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-16.c?ref=73b8b82295fb286c2d5b01c200fcd6732a96c2a8", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -mindirect-branch-register -mfunction-return=keep -fno-pic -fplt -mindirect-branch=keep -fcf-protection -mcet\" } */\n+\n+extern void (*bar) (void) __attribute__((nocf_check));\n+\n+__attribute__ ((indirect_branch(\"thunk-extern\")))\n+void\n+foo (void)\n+{\n+  bar ();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk_nt_(r|e)\" } } */"}, {"sha": "2a982ab69f8d15bb7f8874fadb764c3910dcb8f3", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-10.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-10.c?ref=73b8b82295fb286c2d5b01c200fcd6732a96c2a8", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -mindirect-branch-register -mfunction-return=keep -fno-pic -fplt -mindirect-branch=thunk-extern -fcf-protection -mcet\" } */\n+\n+extern void (*bar) (void) __attribute__((nocf_check));\n+\n+void\n+foo (void)\n+{\n+  bar ();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk_nt_(r|e)\" } } */"}, {"sha": "30d12cc07114ae7e1f34ed1d830a0b352305eab9", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-8.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-8.c?ref=73b8b82295fb286c2d5b01c200fcd6732a96c2a8", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -mno-indirect-branch-register -mfunction-return=keep -fno-pic -fplt -mindirect-branch=thunk-extern -fcf-protection -mcet\" } */\n+\n+extern void (*bar) (void);\n+\n+void\n+foo (void)\n+{\n+  bar ();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*__x86_indirect_thunk_nt\" } } */"}, {"sha": "d714b0155dfdc29dce24f6f0138eabd052f6d1e8", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-extern-9.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73b8b82295fb286c2d5b01c200fcd6732a96c2a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-extern-9.c?ref=73b8b82295fb286c2d5b01c200fcd6732a96c2a8", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -mindirect-branch-register -mfunction-return=keep -fno-pic -fplt -mindirect-branch=thunk-extern -fcf-protection -mcet\" } */\n+\n+extern void (*bar) (void);\n+\n+void\n+foo (void)\n+{\n+  bar ();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_indirect_thunk\" } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*__x86_indirect_thunk_nt\" } } */"}]}