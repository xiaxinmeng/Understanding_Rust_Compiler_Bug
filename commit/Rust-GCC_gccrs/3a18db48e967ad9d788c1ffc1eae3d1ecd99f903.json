{"sha": "3a18db48e967ad9d788c1ffc1eae3d1ecd99f903", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ExOGRiNDhlOTY3YWQ5ZDc4OGMxZmZjMWVhZTNkMWVjZDk5ZjkwMw==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@apple.com", "date": "2004-07-07T21:26:31Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-07-07T21:26:31Z"}, "message": "expr.c (expand_expr_real_1): Fix formating.\n\n\n\t* expr.c (expand_expr_real_1): Fix formating.\n\tBUFFER_REF and IN_EXPR are dead.\n\t* fold-const.c (non_lvalue): BUFFER_REF is dead.\n\t* tree-inline.c (estimate_num_insns_1): Likewise.\n\t* tree-pretty-print.c (dump_generic_node): BUFFER_REF,\n\tIN_EXPR, SET_LE_EXPR, and CARD_EXPR are dead.\n\t* tree.def (BUFFER_REF, IN_EXPR, SET_LE_EXPR, CARD_EXPR): Kill.\ncp/ChangeLog:\n\t* class.c (instantiate_type): BUFFER_REF is dead.\n\t* lex.c (init_operators): IN_EXPR is dead.\n\nFrom-SVN: r84230", "tree": {"sha": "b6e5baf7bc85812120d168a34c8509ea6a4c2a45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6e5baf7bc85812120d168a34c8509ea6a4c2a45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903/comments", "author": null, "committer": null, "parents": [{"sha": "4fe2a1a7bceeb0a0ff1b3c81a0d964ddc24850e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fe2a1a7bceeb0a0ff1b3c81a0d964ddc24850e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fe2a1a7bceeb0a0ff1b3c81a0d964ddc24850e1"}], "stats": {"total": 155, "additions": 18, "deletions": 137}, "files": [{"sha": "134e1ea2a60704cf083e1a7df440a039b7fa7401", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a18db48e967ad9d788c1ffc1eae3d1ecd99f903", "patch": "@@ -1,3 +1,13 @@\n+2004-07-07  Andrew Pinski  <apinski@apple.com>\n+\n+\t* expr.c (expand_expr_real_1): Fix formating.\n+\tBUFFER_REF and IN_EXPR are dead.\n+\t* fold-const.c (non_lvalue): BUFFER_REF is dead.\n+\t* tree-inline.c (estimate_num_insns_1): Likewise.\n+\t* tree-pretty-print.c (dump_generic_node): BUFFER_REF,\n+\tIN_EXPR, SET_LE_EXPR, and CARD_EXPR are dead.\n+\t* tree.def (BUFFER_REF, IN_EXPR, SET_LE_EXPR, CARD_EXPR): Kill.\n+\n 2004-07-07  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* collect2.c (dump_file): Don't call cplus_demangle if"}, {"sha": "839745b3a844334ada00c4c7b427057eb652e36c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3a18db48e967ad9d788c1ffc1eae3d1ecd99f903", "patch": "@@ -1,3 +1,8 @@\n+2004-07-07  Andrew Pinski  <apinski@apple.com>\n+\n+\t* class.c (instantiate_type): BUFFER_REF is dead.\n+\t* lex.c (init_operators): IN_EXPR is dead.\n+\n 2004-07-07  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/16334"}, {"sha": "e41172786906c258766510ac1823d4c34e70293e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=3a18db48e967ad9d788c1ffc1eae3d1ecd99f903", "patch": "@@ -6053,7 +6053,6 @@ instantiate_type (tree lhstype, tree rhs, tsubst_flags_t flags)\n     case CONVERT_EXPR:\n     case SAVE_EXPR:\n     case CONSTRUCTOR:\n-    case BUFFER_REF:\n       abort ();\n       return error_mark_node;\n "}, {"sha": "2e3bccdaac240b7d5162de90d838d32542603900", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=3a18db48e967ad9d788c1ffc1eae3d1ecd99f903", "patch": "@@ -150,7 +150,6 @@ init_operators (void)\n   operator_name_info [(int) ABS_EXPR].name = \"abs\";\n   operator_name_info [(int) TRUTH_AND_EXPR].name = \"strict &&\";\n   operator_name_info [(int) TRUTH_OR_EXPR].name = \"strict ||\";\n-  operator_name_info [(int) IN_EXPR].name = \"in\";\n   operator_name_info [(int) RANGE_EXPR].name = \"...\";\n   operator_name_info [(int) CONVERT_EXPR].name = \"+\";\n "}, {"sha": "b9fd93863e0e68c3015e7b8c0274397becfe5e1e", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 110, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3a18db48e967ad9d788c1ffc1eae3d1ecd99f903", "patch": "@@ -6443,8 +6443,8 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n   original_target = target;\n   ignore = (target == const0_rtx\n \t    || ((code == NON_LVALUE_EXPR || code == NOP_EXPR\n-\t\t || code == CONVERT_EXPR || code == COND_EXPR \n-     || code == VIEW_CONVERT_EXPR)\n+\t\t || code == CONVERT_EXPR || code == COND_EXPR\n+\t\t || code == VIEW_CONVERT_EXPR)\n \t\t&& TREE_CODE (type) == VOID_TYPE));\n \n   /* If we are going to ignore this result, we need only do something\n@@ -6472,7 +6472,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t}\n \n       if (TREE_CODE_CLASS (code) == '1' || code == COMPONENT_REF\n-\t  || code == INDIRECT_REF || code == BUFFER_REF)\n+\t  || code == INDIRECT_REF)\n \treturn expand_expr (TREE_OPERAND (exp, 0), const0_rtx, VOIDmode,\n \t\t\t    modifier);\n \n@@ -7345,113 +7345,6 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n     case OBJ_TYPE_REF:\n       return expand_expr (OBJ_TYPE_REF_EXPR (exp), target, tmode, modifier);\n \n-      /* Intended for a reference to a buffer of a file-object in Pascal.\n-\t But it's not certain that a special tree code will really be\n-\t necessary for these.  INDIRECT_REF might work for them.  */\n-    case BUFFER_REF:\n-      abort ();\n-\n-    case IN_EXPR:\n-      {\n-\t/* Pascal set IN expression.\n-\n-\t   Algorithm:\n-\t       rlo       = set_low - (set_low%bits_per_word);\n-\t       the_word  = set [ (index - rlo)/bits_per_word ];\n-\t       bit_index = index % bits_per_word;\n-\t       bitmask   = 1 << bit_index;\n-\t       return !!(the_word & bitmask);  */\n-\n-\ttree set = TREE_OPERAND (exp, 0);\n-\ttree index = TREE_OPERAND (exp, 1);\n-\tint iunsignedp = TYPE_UNSIGNED (TREE_TYPE (index));\n-\ttree set_type = TREE_TYPE (set);\n-\ttree set_low_bound = TYPE_MIN_VALUE (TYPE_DOMAIN (set_type));\n-\ttree set_high_bound = TYPE_MAX_VALUE (TYPE_DOMAIN (set_type));\n-\trtx index_val = expand_expr (index, 0, VOIDmode, 0);\n-\trtx lo_r = expand_expr (set_low_bound, 0, VOIDmode, 0);\n-\trtx hi_r = expand_expr (set_high_bound, 0, VOIDmode, 0);\n-\trtx setval = expand_expr (set, 0, VOIDmode, 0);\n-\trtx setaddr = XEXP (setval, 0);\n-\tenum machine_mode index_mode = TYPE_MODE (TREE_TYPE (index));\n-\trtx rlow;\n-\trtx diff, quo, rem, addr, bit, result;\n-\n-\t/* If domain is empty, answer is no.  Likewise if index is constant\n-\t   and out of bounds.  */\n-\tif (((TREE_CODE (set_high_bound) == INTEGER_CST\n-\t     && TREE_CODE (set_low_bound) == INTEGER_CST\n-\t     && tree_int_cst_lt (set_high_bound, set_low_bound))\n-\t     || (TREE_CODE (index) == INTEGER_CST\n-\t\t && TREE_CODE (set_low_bound) == INTEGER_CST\n-\t\t && tree_int_cst_lt (index, set_low_bound))\n-\t     || (TREE_CODE (set_high_bound) == INTEGER_CST\n-\t\t && TREE_CODE (index) == INTEGER_CST\n-\t\t && tree_int_cst_lt (set_high_bound, index))))\n-\t  return const0_rtx;\n-\n-\tif (target == 0)\n-\t  target = gen_reg_rtx (tmode != VOIDmode ? tmode : mode);\n-\n-\t/* If we get here, we have to generate the code for both cases\n-\t   (in range and out of range).  */\n-\n-\top0 = gen_label_rtx ();\n-\top1 = gen_label_rtx ();\n-\n-\tif (! (GET_CODE (index_val) == CONST_INT\n-\t       && GET_CODE (lo_r) == CONST_INT))\n-\t  emit_cmp_and_jump_insns (index_val, lo_r, LT, NULL_RTX,\n-\t\t\t\t   GET_MODE (index_val), iunsignedp, op1);\n-\n-\tif (! (GET_CODE (index_val) == CONST_INT\n-\t       && GET_CODE (hi_r) == CONST_INT))\n-\t  emit_cmp_and_jump_insns (index_val, hi_r, GT, NULL_RTX,\n-\t\t\t\t   GET_MODE (index_val), iunsignedp, op1);\n-\n-\t/* Calculate the element number of bit zero in the first word\n-\t   of the set.  */\n-\tif (GET_CODE (lo_r) == CONST_INT)\n-\t  rlow = GEN_INT (INTVAL (lo_r)\n-\t\t\t  & ~((HOST_WIDE_INT) 1 << BITS_PER_UNIT));\n-\telse\n-\t  rlow = expand_binop (index_mode, and_optab, lo_r,\n-\t\t\t       GEN_INT (~((HOST_WIDE_INT) 1 << BITS_PER_UNIT)),\n-\t\t\t       NULL_RTX, iunsignedp, OPTAB_LIB_WIDEN);\n-\n-\tdiff = expand_binop (index_mode, sub_optab, index_val, rlow,\n-\t\t\t     NULL_RTX, iunsignedp, OPTAB_LIB_WIDEN);\n-\n-\tquo = expand_divmod (0, TRUNC_DIV_EXPR, index_mode, diff,\n-\t\t\t     GEN_INT (BITS_PER_UNIT), NULL_RTX, iunsignedp);\n-\trem = expand_divmod (1, TRUNC_MOD_EXPR, index_mode, index_val,\n-\t\t\t     GEN_INT (BITS_PER_UNIT), NULL_RTX, iunsignedp);\n-\n-\taddr = memory_address (byte_mode,\n-\t\t\t       expand_binop (index_mode, add_optab, diff,\n-\t\t\t\t\t     setaddr, NULL_RTX, iunsignedp,\n-\t\t\t\t\t     OPTAB_LIB_WIDEN));\n-\n-\t/* Extract the bit we want to examine.  */\n-\tbit = expand_shift (RSHIFT_EXPR, byte_mode,\n-\t\t\t    gen_rtx_MEM (byte_mode, addr),\n-\t\t\t    make_tree (TREE_TYPE (index), rem),\n-\t\t\t    NULL_RTX, 1);\n-\tresult = expand_binop (byte_mode, and_optab, bit, const1_rtx,\n-\t\t\t       GET_MODE (target) == byte_mode ? target : 0,\n-\t\t\t       1, OPTAB_LIB_WIDEN);\n-\n-\tif (result != target)\n-\t  convert_move (target, result, 1);\n-\n-\t/* Output the code to handle the out-of-range case.  */\n-\temit_jump (op0);\n-\temit_label (op1);\n-\temit_move_insn (target, const0_rtx);\n-\temit_label (op0);\n-\treturn target;\n-      }\n-\n     case WITH_CLEANUP_EXPR:\n       if (WITH_CLEANUP_EXPR_RTL (exp) == 0)\n \t{"}, {"sha": "b68e47087981ba384609ce9ac3b70625be1782ac", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=3a18db48e967ad9d788c1ffc1eae3d1ecd99f903", "patch": "@@ -2023,7 +2023,6 @@ non_lvalue (tree x)\n   case ARRAY_REF:\n   case ARRAY_RANGE_REF:\n   case BIT_FIELD_REF:\n-  case BUFFER_REF:\n   case OBJ_TYPE_REF:\n \n   case REALPART_EXPR:"}, {"sha": "2172f33203b5efd734370b905e4fa322f247960c", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=3a18db48e967ad9d788c1ffc1eae3d1ecd99f903", "patch": "@@ -1184,7 +1184,6 @@ estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n     case COMPONENT_REF:\n     case BIT_FIELD_REF:\n     case INDIRECT_REF:\n-    case BUFFER_REF:\n     case ARRAY_REF:\n     case ARRAY_RANGE_REF:\n     case OBJ_TYPE_REF:"}, {"sha": "743524f481eccdabd9be8a1ead0115406907118a", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=3a18db48e967ad9d788c1ffc1eae3d1ecd99f903", "patch": "@@ -641,10 +641,6 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       pp_string (buffer, \">\");\n       break;\n \n-    case BUFFER_REF:\n-      NIY;\n-      break;\n-\n     case ARRAY_REF:\n     case ARRAY_RANGE_REF:\n       op0 = TREE_OPERAND (node, 0);\n@@ -1054,18 +1050,6 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       pp_character (buffer, '>');\n       break;\n \n-    case IN_EXPR:\n-      NIY;\n-      break;\n-\n-    case SET_LE_EXPR:\n-      NIY;\n-      break;\n-\n-    case CARD_EXPR:\n-      NIY;\n-      break;\n-\n     case RANGE_EXPR:\n       NIY;\n       break;"}, {"sha": "70af240a38fad2ed31634e487be90616d5ee64f9", "filename": "gcc/tree.def", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a18db48e967ad9d788c1ffc1eae3d1ecd99f903/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=3a18db48e967ad9d788c1ffc1eae3d1ecd99f903", "patch": "@@ -372,9 +372,6 @@ DEFTREECODE (BIT_FIELD_REF, \"bit_field_ref\", 'r', 3)\n /* C unary `*' or Pascal `^'.  One operand, an expression for a pointer.  */\n DEFTREECODE (INDIRECT_REF, \"indirect_ref\", 'r', 1)\n \n-/* Pascal `^` on a file.  One operand, an expression for the file.  */\n-DEFTREECODE (BUFFER_REF, \"buffer_ref\", 'r', 1)\n-\n /* Array indexing.\n    Operand 0 is the array; operand 1 is a (single) array index.\n    Operand 2, if present, is a copy of TYPE_MIN_VALUE of the index.\n@@ -693,10 +690,6 @@ DEFTREECODE (UNEQ_EXPR, \"uneq_expr\", '<', 2)\n /* This is the reverse of uneq_expr.  */\n DEFTREECODE (LTGT_EXPR, \"ltgt_expr\", '<', 2)\n \n-/* Operations for Pascal sets.  Not used now.  */\n-DEFTREECODE (IN_EXPR, \"in_expr\", '2', 2)\n-DEFTREECODE (SET_LE_EXPR, \"set_le_expr\", '<', 2)\n-DEFTREECODE (CARD_EXPR, \"card_expr\", '1', 1)\n DEFTREECODE (RANGE_EXPR, \"range_expr\", '2', 2)\n \n /* Represents a conversion of type of a value."}]}