{"sha": "82bb66730bc42b8694fdebef607ea6e49e8496bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJiYjY2NzMwYmM0MmI4Njk0ZmRlYmVmNjA3ZWE2ZTQ5ZTg0OTZiZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-19T17:36:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-19T17:36:56Z"}, "message": "c++: Only reject reinterpret casts from pointers to integers for manifestly_const_eval evaluation [PR99456]\n\nMy PR82304/PR95307 fix moved reinterpret cast from pointer to integer\ndiagnostics from cxx_eval_outermost_constant_expr where it caught\ninvalid code only at the outermost level down into\ncxx_eval_constant_expression.\nUnfortunately, it regressed following testcase, we emit worse code\nincluding dynamic initialization of some vars.\nWhile the initializers are not constant expressions due to the\nreinterpret_cast in there, there is no reason not to fold them as an\noptimization.\n\nI've tried to make this dependent on !ctx->quiet, but that regressed\ntwo further tests, and on ctx->strict, which regressed other tests,\nso this patch bases that on manifestly_const_eval.\n\nThe new testcase is now optimized as much as it used to be in GCC 10\nand the only regression it causes is an extra -Wnarrowing warning\non vla22.C test on invalid code (which the patch adjusts).\n\n2021-03-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/99456\n\t* constexpr.c (cxx_eval_constant_expression): For CONVERT_EXPR from\n\tINDIRECT_TYPE_P to ARITHMETIC_TYPE_P, when !ctx->manifestly_const_eval\n\tdon't diagnose it, set *non_constant_p nor return t.\n\n\t* g++.dg/opt/pr99456.C: New test.\n\t* g++.dg/ext/vla22.C: Expect a -Wnarrowing warning for c++11 and\n\tlater.", "tree": {"sha": "7c7282833d2a07704bea93c4f10887d073d4f498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c7282833d2a07704bea93c4f10887d073d4f498"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82bb66730bc42b8694fdebef607ea6e49e8496bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82bb66730bc42b8694fdebef607ea6e49e8496bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82bb66730bc42b8694fdebef607ea6e49e8496bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82bb66730bc42b8694fdebef607ea6e49e8496bf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02f305440f29c68b7368c9af9ae689cce6d26d6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f305440f29c68b7368c9af9ae689cce6d26d6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02f305440f29c68b7368c9af9ae689cce6d26d6d"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "42d00ec8d312d543ffe083c3b92bfe398cecc8a9", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb66730bc42b8694fdebef607ea6e49e8496bf/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb66730bc42b8694fdebef607ea6e49e8496bf/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=82bb66730bc42b8694fdebef607ea6e49e8496bf", "patch": "@@ -6656,7 +6656,8 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \n \tif (TREE_CODE (t) == CONVERT_EXPR\n \t    && ARITHMETIC_TYPE_P (type)\n-\t    && INDIRECT_TYPE_P (TREE_TYPE (op)))\n+\t    && INDIRECT_TYPE_P (TREE_TYPE (op))\n+\t    && ctx->manifestly_const_eval)\n \t  {\n \t    if (!ctx->quiet)\n \t      error_at (loc,"}, {"sha": "967adb9ab67b5a7733051debe217ef0e97b4a31a", "filename": "gcc/testsuite/g++.dg/ext/vla22.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb66730bc42b8694fdebef607ea6e49e8496bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb66730bc42b8694fdebef607ea6e49e8496bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla22.C?ref=82bb66730bc42b8694fdebef607ea6e49e8496bf", "patch": "@@ -6,4 +6,4 @@ void\n f ()\n {\n   const int tbl[(long) \"h\"] = { 12 }; // { dg-error \"size of array .tbl. is not an integral constant-expression\" }\n-}\n+}\t\t\t\t      // { dg-warning \"narrowing conversion\" \"\" { target c++11 } .-1 }"}, {"sha": "66f19c86300e695302fccf0bedec94ace51d850b", "filename": "gcc/testsuite/g++.dg/opt/pr99456.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb66730bc42b8694fdebef607ea6e49e8496bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr99456.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb66730bc42b8694fdebef607ea6e49e8496bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr99456.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr99456.C?ref=82bb66730bc42b8694fdebef607ea6e49e8496bf", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/99456\n+// { dg-do compile { target c++17 } }\n+// { dg-options \"-g0\" }\n+// { dg-final { scan-assembler-not \"PR99456Var0\\[1234]\" } }\n+// { dg-final { scan-assembler-not \"__static_initialization_and_destruction\" } }\n+// { dg-final { scan-assembler-not \"_GLOBAL__sub_I\" } }\n+// { dg-final { scan-assembler-not \"_ZGV12PR99456Var1\\[1234]\" } }\n+\n+typedef __UINTPTR_TYPE__ uintptr_t;\n+\n+class Container\n+{\n+public:\n+  uintptr_t m;\n+};\n+\n+extern unsigned desc;\n+static constexpr unsigned &descRef = desc;\n+\n+inline Container PR99456Var01 {reinterpret_cast<uintptr_t> (&descRef)};\n+inline Container PR99456Var02 {reinterpret_cast<uintptr_t> (&desc)};\n+inline uintptr_t PR99456Var03 {reinterpret_cast<uintptr_t> (&descRef)};\n+inline uintptr_t PR99456Var04 {reinterpret_cast<uintptr_t> (&desc)};\n+\n+inline Container PR99456Var11 {reinterpret_cast<uintptr_t> (&descRef)};\n+inline Container PR99456Var12 {reinterpret_cast<uintptr_t> (&desc)};\n+inline uintptr_t PR99456Var13 {reinterpret_cast<uintptr_t> (&descRef)};\n+inline uintptr_t PR99456Var14 {reinterpret_cast<uintptr_t> (&desc)};\n+\n+auto *PR99456Ref11 = &PR99456Var11;\n+auto *PR99456Ref12 = &PR99456Var12;\n+auto *PR99456Ref13 = &PR99456Var13;\n+auto *PR99456Ref14 = &PR99456Var14;"}]}