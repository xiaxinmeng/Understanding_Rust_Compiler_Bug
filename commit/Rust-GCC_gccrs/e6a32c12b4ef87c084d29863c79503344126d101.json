{"sha": "e6a32c12b4ef87c084d29863c79503344126d101", "node_id": "C_kwDOANBUbNoAKGU2YTMyYzEyYjRlZjg3YzA4NGQyOTg2M2M3OTUwMzM0NDEyNmQxMDE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-23T10:53:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-23T10:53:54Z"}, "message": "libstdc++: Fix libstdc++ build on some targets [PR107811]\n\nfast_float library relies on size_t being 32-bit or larger and float/double\nbeing IEEE single/double.  Otherwise we only use strtod/strtof.\nIn 3 spots I've used fast_float namespace stuff unconditionally in one\nfunction, which breaks the build if fast_float is disabled.\n\n2022-11-23  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libstdc++/107811\n\t* src/c++17/floating_from_chars.cc (__floating_from_chars_hex): Guard\n\tfast_float uses with #if USE_LIB_FAST_FLOAT and for mantissa_bits and\n\texponent_bits provide a fallback.", "tree": {"sha": "ab19abc9bd8f46fd886a1f143c8a3dd97f08b7fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab19abc9bd8f46fd886a1f143c8a3dd97f08b7fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6a32c12b4ef87c084d29863c79503344126d101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6a32c12b4ef87c084d29863c79503344126d101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6a32c12b4ef87c084d29863c79503344126d101", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6a32c12b4ef87c084d29863c79503344126d101/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cac00d013856fea4cee0f13c4959c8e21afd2d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cac00d013856fea4cee0f13c4959c8e21afd2d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cac00d013856fea4cee0f13c4959c8e21afd2d9"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "3f5d4d411d978da8bab7c443ebcbbc77d3637aaa", "filename": "libstdc++-v3/src/c++17/floating_from_chars.cc", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6a32c12b4ef87c084d29863c79503344126d101/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6a32c12b4ef87c084d29863c79503344126d101/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc?ref=e6a32c12b4ef87c084d29863c79503344126d101", "patch": "@@ -783,11 +783,16 @@ namespace\n     using uint_t = conditional_t<is_same_v<T, float>, uint32_t,\n \t\t\t\t conditional_t<is_same_v<T, double>, uint64_t,\n \t\t\t\t\t       uint16_t>>;\n+#if USE_LIB_FAST_FLOAT\n     constexpr int mantissa_bits\n       = fast_float::binary_format<T>::mantissa_explicit_bits();\n     constexpr int exponent_bits\n       = is_same_v<T, double> ? 11\n \t: is_same_v<T, fast_float::floating_type_float16_t> ? 5 : 8;\n+#else\n+    constexpr int mantissa_bits = is_same_v<T, float> ? 23 : 52;\n+    constexpr int exponent_bits = is_same_v<T, float> ? 8 : 11;\n+#endif\n     constexpr int exponent_bias = (1 << (exponent_bits - 1)) - 1;\n \n     __glibcxx_requires_valid_range(first, last);\n@@ -945,8 +950,11 @@ namespace\n \telse if (mantissa_idx >= -4)\n \t  {\n \t    if constexpr (is_same_v<T, float>\n+#if USE_LIB_FAST_FLOAT\n \t\t\t  || is_same_v<T,\n-\t\t\t\t       fast_float::floating_type_bfloat16_t>)\n+\t\t\t\t       fast_float::floating_type_bfloat16_t>\n+#endif\n+\t\t\t )\n \t      {\n \t\t__glibcxx_assert(mantissa_idx == -1);\n \t\tmantissa |= hexit >> 1;\n@@ -1130,6 +1138,7 @@ namespace\n       }\n     if constexpr (is_same_v<T, float> || is_same_v<T, double>)\n       memcpy(&value, &result, sizeof(result));\n+#if USE_LIB_FAST_FLOAT\n     else if constexpr (is_same_v<T, fast_float::floating_type_bfloat16_t>)\n       {\n \tuint32_t res = uint32_t{result} << 16;\n@@ -1156,6 +1165,7 @@ namespace\n \t\t | ((uint32_t{result} & 0x8000) << 16));\n \tmemcpy(value.x, &res, sizeof(res));\n       }\n+#endif\n \n     return {first, errc{}};\n   }"}]}