{"sha": "63028caaeb63f5a3fa1dcabaae10fe5902a39048", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMwMjhjYWFlYjYzZjVhM2ZhMWRjYWJhYWUxMGZlNTkwMmEzOTA0OA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-03-23T16:43:43Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-03-23T16:43:43Z"}, "message": "[arm] PR target/85026: Fix ldrsh length estimate in Thumb state\n\nThis bug has been reported against GCC 7.3.0 but it is latent in all release branches and on trunk.\nWe underestimate the length of the LRSH instruction in Thumb state.\nUnlike other load instructions LDRSH can be encoded in 16 bits only when using a register offset.\nIn the testcase we have \"ldrsh   r2, [r4]\" being assigned a length of 2, which is wrong.\nSo we don't calculate branch ranges properly and cause the assembler error.\n\nThe fix is to make the unaligned_loadhis insn similar to the *arm_extendqihi_insn insn that outputs an LDRSB.\nJust remove the wrong 2-byte alternative. I don't think this is worth inventing a new \"register-offset-only\" constraint.\nThis also makes the patch safer for backporting.\n\nBootstrapped and tested on arm-none-linux-gnueabihf.\n\n\tPR target/85026\n\t* config/arm/arm.md (unaligned_loadhis): Remove first alternative.\n\tClean up attributes.\n\n\t* g++.dg/pr85026.C: New test.\n\nFrom-SVN: r258818", "tree": {"sha": "a60f13219c7d8bb048d9338aa4dbb01fb98eb1e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a60f13219c7d8bb048d9338aa4dbb01fb98eb1e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63028caaeb63f5a3fa1dcabaae10fe5902a39048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63028caaeb63f5a3fa1dcabaae10fe5902a39048", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63028caaeb63f5a3fa1dcabaae10fe5902a39048", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63028caaeb63f5a3fa1dcabaae10fe5902a39048/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2fce761ff8de61f2418c36dbba20b3ac63890996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fce761ff8de61f2418c36dbba20b3ac63890996", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fce761ff8de61f2418c36dbba20b3ac63890996"}], "stats": {"total": 81, "additions": 75, "deletions": 6}, "files": [{"sha": "53b67fb832bb610179e933accaec7287ca949068", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63028caaeb63f5a3fa1dcabaae10fe5902a39048/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63028caaeb63f5a3fa1dcabaae10fe5902a39048/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63028caaeb63f5a3fa1dcabaae10fe5902a39048", "patch": "@@ -1,3 +1,9 @@\n+2018-03-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/85026\n+\t* config/arm/arm.md (unaligned_loadhis): Remove first alternative.\n+\tClean up attributes.\n+\n 2018-03-23  Richard Biener  <rguenther@suse.de>\n \n \tPR debug/85020"}, {"sha": "2d5359e532f321cec8ce6c507bf79b295ecc6a4c", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63028caaeb63f5a3fa1dcabaae10fe5902a39048/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63028caaeb63f5a3fa1dcabaae10fe5902a39048/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=63028caaeb63f5a3fa1dcabaae10fe5902a39048", "patch": "@@ -4460,16 +4460,13 @@\n    (set_attr \"type\" \"load_4\")])\n \n (define_insn \"unaligned_loadhis\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=l,r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(sign_extend:SI\n-\t  (unspec:HI [(match_operand:HI 1 \"memory_operand\" \"Uw,Uh\")]\n+\t  (unspec:HI [(match_operand:HI 1 \"memory_operand\" \"Uh\")]\n \t\t     UNSPEC_UNALIGNED_LOAD)))]\n   \"unaligned_access\"\n   \"ldrsh%?\\t%0, %1\\t@ unaligned\"\n-  [(set_attr \"arch\" \"t2,any\")\n-   (set_attr \"length\" \"2,4\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"yes,no\")\n+  [(set_attr \"predicable\" \"yes\")\n    (set_attr \"type\" \"load_byte\")])\n \n (define_insn \"unaligned_loadhiu\""}, {"sha": "e709ff18b48ebecea0f90652a320b01bc4627670", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63028caaeb63f5a3fa1dcabaae10fe5902a39048/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63028caaeb63f5a3fa1dcabaae10fe5902a39048/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=63028caaeb63f5a3fa1dcabaae10fe5902a39048", "patch": "@@ -1,3 +1,8 @@\n+2018-03-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/85026\n+\t* g++.dg/pr85026.C: New test.\n+\n 2018-03-23  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* g++.dg/debug/pr84704.C: XFAIL AIX."}, {"sha": "e1e3ccd2e354880e15715210051ed549e54b9396", "filename": "gcc/testsuite/g++.dg/pr85026.C", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63028caaeb63f5a3fa1dcabaae10fe5902a39048/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr85026.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63028caaeb63f5a3fa1dcabaae10fe5902a39048/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr85026.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr85026.C?ref=63028caaeb63f5a3fa1dcabaae10fe5902a39048", "patch": "@@ -0,0 +1,61 @@\n+/* PR target/85026.  */\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -std=gnu++11\" } */\n+\n+template <class> class a;\n+class b;\n+struct c {\n+  typedef a<b> &g;\n+};\n+template <typename d> struct e { typedef typename d::f iter; };\n+class h {\n+public:\n+  void __attribute__((noreturn)) i();\n+} ab;\n+template <class> class a {\n+public:\n+  typedef b *f;\n+  b &operator[](unsigned m) {\n+    if (ac)\n+      ab.i();\n+    return ad[m];\n+  }\n+  f n() { return ad; }\n+  f m_fn3();\n+  b *ad;\n+  unsigned ac;\n+};\n+class b {\n+public:\n+  short j;\n+  short k;\n+  signed l;\n+} __attribute__((__packed__));\n+void o(a<b> &m, b &p2, b &p) {\n+  p2 = p = m[0];\n+  if (bool at = false)\n+    ;\n+  else\n+    for (c::g au(m);; at = true)\n+      if (bool av = false)\n+        ;\n+      else\n+        for (e<a<int>>::iter aw = au.n(), ax = au.m_fn3(); ax;\n+             av ? (void)0 : (void)0)\n+          if (bool ay = 0)\n+            ;\n+          else\n+            for (b az = *aw; !ay; ay = true) {\n+              if (p2.j)\n+                p2.j = az.j;\n+              else if (p.j)\n+                p.j = az.j;\n+              if (p2.k)\n+                p2.k = az.k;\n+              else if (az.k > p.k)\n+                p.k = az.k;\n+              if (az.l < p2.l)\n+                if (az.l > p.l)\n+                  p.l = az.l;\n+            }\n+}"}]}